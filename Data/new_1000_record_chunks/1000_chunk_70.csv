record_number,buggy_code,fixed_code
69001,"@Override public void actionPerformed(java.awt.event.ActionEvent e){
  boolean configured=ConfigurationDialogs.show(view,getDialogMode());
  boolean makeReqs=true;
  boolean completed=false;
  java.util.List<String> nodes=new ArrayList<>();
  if (configured) {
    if (BurpPropertiesManager.getBurpPropertiesManager().getConfigFile() != null)     callbacks.loadConfigFromJson(getBurpConfigAsString());
    try {
      EndpointDecorator[] endpoints=getEndpoints(view);
      EndpointDecorator[] comparePoints=null;
      if (BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder().trim().isEmpty())       comparePoints=getComparePoints(view);
      if (endpoints.length == 0)       JOptionPane.showMessageDialog(view,getNoEndpointsMessage(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
 else {
        if (comparePoints != null && comparePoints.length != 0)         endpoints=compareEndpoints(endpoints,comparePoints,view);
        fillEndpointsToTable(endpoints);
        for (        EndpointDecorator decorator : endpoints) {
          if (decorator != null) {
            Endpoint.Info endpoint=decorator.getEndpoint();
            String endpointPath=endpoint.getUrlPath();
            if (endpointPath.startsWith(""String_Node_Str""))             endpointPath=endpointPath.substring(1);
            endpointPath=endpointPath.replaceAll(GENERIC_INT_SEGMENT,""String_Node_Str"");
            nodes.add(endpointPath);
            for (            Map.Entry<String,RouteParameter> parameter : endpoint.getParameters().entrySet())             nodes.add(endpointPath + ""String_Node_Str"" + parameter.getKey()+ ""String_Node_Str""+ parameter.getValue());
          }
        }
        String url=UrlDialog.show(view);
        if (url != null) {
          try {
            if (!url.substring(url.length() - 1).equals(""String_Node_Str""))             url=url + ""String_Node_Str"";
            for (            String node : nodes) {
              URL nodeUrl=new URL(url + node);
              callbacks.includeInScope(nodeUrl);
              if (BurpPropertiesManager.getBurpPropertiesManager().getAutoSpider())               callbacks.sendToSpider(nodeUrl);
            }
            buildRequests(view,callbacks,endpoints,url);
            completed=true;
          }
 catch (          MalformedURLException e1) {
            JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
          }
          if (completed)           JOptionPane.showMessageDialog(view,getCompletedMessage());
        }
 else         makeReqs=false;
      }
      if (makeReqs) {
        if (BurpPropertiesManager.getBurpPropertiesManager().getAutoScan())         sendToScanner(callbacks,UrlDialog.show(view));
        RequestMakerThread rmt=new RequestMakerThread(callbacks,view);
        new Thread(rmt).start();
      }
    }
 catch (    Exception ex) {
      JOptionPane.showMessageDialog(view,""String_Node_Str"");
    }
  }
 else   JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
}","@Override public void actionPerformed(java.awt.event.ActionEvent e){
  boolean configured=ConfigurationDialogs.show(view,getDialogMode());
  boolean makeReqs=true;
  boolean completed=false;
  java.util.List<String> nodes=new ArrayList<>();
  if (configured) {
    if (BurpPropertiesManager.getBurpPropertiesManager().getConfigFile() != null)     callbacks.loadConfigFromJson(getBurpConfigAsString());
    try {
      EndpointDecorator[] endpoints=getEndpoints(view);
      EndpointDecorator[] comparePoints=null;
      if (BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder().trim().isEmpty() && mode == 0)       comparePoints=getComparePoints(view);
 else       if (BurpPropertiesManager.getBurpPropertiesManager().getOldSerializationFile() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSerializationFile().trim().isEmpty() && mode == 1)       comparePoints=getComparePoints(view);
      if (endpoints.length == 0)       JOptionPane.showMessageDialog(view,getNoEndpointsMessage(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
 else {
        if (comparePoints != null && comparePoints.length != 0)         endpoints=compareEndpoints(endpoints,comparePoints,view);
        fillEndpointsToTable(endpoints);
        for (        EndpointDecorator decorator : endpoints) {
          if (decorator != null) {
            Endpoint.Info endpoint=decorator.getEndpoint();
            String endpointPath=endpoint.getUrlPath();
            if (endpointPath.startsWith(""String_Node_Str""))             endpointPath=endpointPath.substring(1);
            endpointPath=endpointPath.replaceAll(GENERIC_INT_SEGMENT,""String_Node_Str"");
            nodes.add(endpointPath);
            for (            Map.Entry<String,RouteParameter> parameter : endpoint.getParameters().entrySet())             nodes.add(endpointPath + ""String_Node_Str"" + parameter.getKey()+ ""String_Node_Str""+ parameter.getValue());
          }
        }
        String url=UrlDialog.show(view);
        if (url != null) {
          try {
            if (!url.substring(url.length() - 1).equals(""String_Node_Str""))             url=url + ""String_Node_Str"";
            for (            String node : nodes) {
              URL nodeUrl=new URL(url + node);
              callbacks.includeInScope(nodeUrl);
              if (BurpPropertiesManager.getBurpPropertiesManager().getAutoSpider())               callbacks.sendToSpider(nodeUrl);
            }
            buildRequests(view,callbacks,endpoints,url);
            completed=true;
          }
 catch (          MalformedURLException e1) {
            JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
          }
          if (completed)           JOptionPane.showMessageDialog(view,getCompletedMessage());
        }
 else         makeReqs=false;
      }
      if (makeReqs) {
        if (BurpPropertiesManager.getBurpPropertiesManager().getAutoScan())         sendToScanner(callbacks,UrlDialog.show(view));
        RequestMakerThread rmt=new RequestMakerThread(callbacks,view);
        new Thread(rmt).start();
      }
    }
 catch (    Exception ex) {
      JOptionPane.showMessageDialog(view,""String_Node_Str"");
    }
  }
 else   JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
}"
69002,"public EndpointsButton(final Component view,final IBurpExtenderCallbacks callbacks){
  setText(getButtonText());
  addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent e){
      boolean configured=ConfigurationDialogs.show(view,getDialogMode());
      boolean makeReqs=true;
      boolean completed=false;
      java.util.List<String> nodes=new ArrayList<>();
      if (configured) {
        if (BurpPropertiesManager.getBurpPropertiesManager().getConfigFile() != null)         callbacks.loadConfigFromJson(getBurpConfigAsString());
        try {
          EndpointDecorator[] endpoints=getEndpoints(view);
          EndpointDecorator[] comparePoints=null;
          if (BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder().trim().isEmpty())           comparePoints=getComparePoints(view);
          if (endpoints.length == 0)           JOptionPane.showMessageDialog(view,getNoEndpointsMessage(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
 else {
            if (comparePoints != null && comparePoints.length != 0)             endpoints=compareEndpoints(endpoints,comparePoints,view);
            fillEndpointsToTable(endpoints);
            for (            EndpointDecorator decorator : endpoints) {
              if (decorator != null) {
                Endpoint.Info endpoint=decorator.getEndpoint();
                String endpointPath=endpoint.getUrlPath();
                if (endpointPath.startsWith(""String_Node_Str""))                 endpointPath=endpointPath.substring(1);
                endpointPath=endpointPath.replaceAll(GENERIC_INT_SEGMENT,""String_Node_Str"");
                nodes.add(endpointPath);
                for (                Map.Entry<String,RouteParameter> parameter : endpoint.getParameters().entrySet())                 nodes.add(endpointPath + ""String_Node_Str"" + parameter.getKey()+ ""String_Node_Str""+ parameter.getValue());
              }
            }
            String url=UrlDialog.show(view);
            if (url != null) {
              try {
                if (!url.substring(url.length() - 1).equals(""String_Node_Str""))                 url=url + ""String_Node_Str"";
                for (                String node : nodes) {
                  URL nodeUrl=new URL(url + node);
                  callbacks.includeInScope(nodeUrl);
                  if (BurpPropertiesManager.getBurpPropertiesManager().getAutoSpider())                   callbacks.sendToSpider(nodeUrl);
                }
                buildRequests(view,callbacks,endpoints,url);
                completed=true;
              }
 catch (              MalformedURLException e1) {
                JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
              }
              if (completed)               JOptionPane.showMessageDialog(view,getCompletedMessage());
            }
 else             makeReqs=false;
          }
          if (makeReqs) {
            if (BurpPropertiesManager.getBurpPropertiesManager().getAutoScan())             sendToScanner(callbacks,UrlDialog.show(view));
            RequestMakerThread rmt=new RequestMakerThread(callbacks,view);
            new Thread(rmt).start();
          }
        }
 catch (        Exception ex) {
          JOptionPane.showMessageDialog(view,""String_Node_Str"");
        }
      }
 else       JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
    }
  }
);
}","public EndpointsButton(final Component view,final IBurpExtenderCallbacks callbacks,int mode){
  this.mode=mode;
  setText(getButtonText());
  addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent e){
      boolean configured=ConfigurationDialogs.show(view,getDialogMode());
      boolean makeReqs=true;
      boolean completed=false;
      java.util.List<String> nodes=new ArrayList<>();
      if (configured) {
        if (BurpPropertiesManager.getBurpPropertiesManager().getConfigFile() != null)         callbacks.loadConfigFromJson(getBurpConfigAsString());
        try {
          EndpointDecorator[] endpoints=getEndpoints(view);
          EndpointDecorator[] comparePoints=null;
          if (BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder().trim().isEmpty() && mode == 0)           comparePoints=getComparePoints(view);
 else           if (BurpPropertiesManager.getBurpPropertiesManager().getOldSerializationFile() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSerializationFile().trim().isEmpty() && mode == 1)           comparePoints=getComparePoints(view);
          if (endpoints.length == 0)           JOptionPane.showMessageDialog(view,getNoEndpointsMessage(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
 else {
            if (comparePoints != null && comparePoints.length != 0)             endpoints=compareEndpoints(endpoints,comparePoints,view);
            fillEndpointsToTable(endpoints);
            for (            EndpointDecorator decorator : endpoints) {
              if (decorator != null) {
                Endpoint.Info endpoint=decorator.getEndpoint();
                String endpointPath=endpoint.getUrlPath();
                if (endpointPath.startsWith(""String_Node_Str""))                 endpointPath=endpointPath.substring(1);
                endpointPath=endpointPath.replaceAll(GENERIC_INT_SEGMENT,""String_Node_Str"");
                nodes.add(endpointPath);
                for (                Map.Entry<String,RouteParameter> parameter : endpoint.getParameters().entrySet())                 nodes.add(endpointPath + ""String_Node_Str"" + parameter.getKey()+ ""String_Node_Str""+ parameter.getValue());
              }
            }
            String url=UrlDialog.show(view);
            if (url != null) {
              try {
                if (!url.substring(url.length() - 1).equals(""String_Node_Str""))                 url=url + ""String_Node_Str"";
                for (                String node : nodes) {
                  URL nodeUrl=new URL(url + node);
                  callbacks.includeInScope(nodeUrl);
                  if (BurpPropertiesManager.getBurpPropertiesManager().getAutoSpider())                   callbacks.sendToSpider(nodeUrl);
                }
                buildRequests(view,callbacks,endpoints,url);
                completed=true;
              }
 catch (              MalformedURLException e1) {
                JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
              }
              if (completed)               JOptionPane.showMessageDialog(view,getCompletedMessage());
            }
 else             makeReqs=false;
          }
          if (makeReqs) {
            if (BurpPropertiesManager.getBurpPropertiesManager().getAutoScan())             sendToScanner(callbacks,UrlDialog.show(view));
            RequestMakerThread rmt=new RequestMakerThread(callbacks,view);
            new Thread(rmt).start();
          }
        }
 catch (        Exception ex) {
          JOptionPane.showMessageDialog(view,""String_Node_Str"");
        }
      }
 else       JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
    }
  }
);
}"
69003,"public LocalEndpointsButton(final Component view,final IBurpExtenderCallbacks callbacks){
  super(view,callbacks);
}","public LocalEndpointsButton(final Component view,final IBurpExtenderCallbacks callbacks){
  super(view,callbacks,0);
}"
69004,"public SerializedEndpointsButton(final Component view,final IBurpExtenderCallbacks callbacks){
  super(view,callbacks);
}","public SerializedEndpointsButton(final Component view,final IBurpExtenderCallbacks callbacks){
  super(view,callbacks,1);
}"
69005,"/** 
 * Intent传递大量数据出现TransactionTooLargeException异常的解决方案
 */
@Override public void onItemClick(int position){
  EventBus.getDefault().postSticky(mList);
  Intent intent=new Intent(getActivity(),VerticalVideoActivity.class);
  intent.putExtra(""String_Node_Str"",position);
  getActivity().startActivity(intent);
}","/** 
 * 加载过程中不让点击
 */
@Override public void onItemClick(int position){
  if (ptrRecyclerViewUIComponent.isLoadingMore()) {
    return;
  }
  Intent intent=new Intent(getActivity(),VerticalVideoActivity.class);
  WeakDataHolder.getInstance().saveData(""String_Node_Str"",mList);
  intent.putExtra(""String_Node_Str"",position);
  getActivity().startActivity(intent);
}"
69006,"@Override protected void onDestroy(){
  super.onDestroy();
  videoPlayer.release();
  videoPlayer.setVideoAllCallBack(null);
  GSYVideoManager.releaseAllVideos();
  EventBus.getDefault().unregister(this);
}","@Override protected void onDestroy(){
  super.onDestroy();
  videoPlayer.release();
  videoPlayer.setVideoAllCallBack(null);
  GSYVideoManager.releaseAllVideos();
}"
69007,"@Override protected void initView(){
  position=getIntent().getIntExtra(""String_Node_Str"",-1);
  mFragmentManager=getSupportFragmentManager();
  mCurrentItem=position;
}","@Override protected void initView(){
  mList=(List<LevideoData>)WeakDataHolder.getInstance().getData(""String_Node_Str"");
  int position=getIntent().getIntExtra(""String_Node_Str"",-1);
  mFragmentManager=getSupportFragmentManager();
  mCurrentItem=position;
  final MyPageAdapter myAdapter=new MyPageAdapter(mList);
  mVerticalViewpager.setAdapter(myAdapter);
  if (position != -1) {
    mVerticalViewpager.setCurrentItem(position);
  }
  mVerticalViewpager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      mCurrentItem=position;
    }
  }
);
  mRoomContainer=LayoutInflater.from(this).inflate(R.layout.view_video_container,null);
  mFragmentContainer=mRoomContainer.findViewById(R.id.fragment_container);
  mPlay=mRoomContainer.findViewById(R.id.iv_play);
  videoPlayer=mRoomContainer.findViewById(R.id.video_player);
  mRootView=mRoomContainer.findViewById(R.id.view_play);
  mCover=mRoomContainer.findViewById(R.id.cover_img);
  mTvVideoTitle=mRoomContainer.findViewById(R.id.tv_video_title);
  mVerticalViewpager.setPageTransformer(false,new ViewPager.PageTransformer(){
    @Override public void transformPage(    View page,    float position){
      ViewGroup viewGroup=(ViewGroup)page;
      if ((position < 0 && viewGroup.getId() != mCurrentItem)) {
        View roomContainer=viewGroup.findViewById(R.id.room_container);
        if (roomContainer != null && roomContainer.getParent() != null && roomContainer.getParent() instanceof ViewGroup) {
          ((ViewGroup)(roomContainer.getParent())).removeView(roomContainer);
        }
      }
      if (viewGroup.getId() == mCurrentItem && position == 0 && mCurrentItem != mRoomId) {
        if (mRoomContainer.getParent() != null && mRoomContainer.getParent() instanceof ViewGroup) {
          ((ViewGroup)(mRoomContainer.getParent())).removeView(mRoomContainer);
        }
        loadVideo(viewGroup,mCurrentItem);
      }
    }
  }
);
  mRootView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (isSelected) {
        isStop=false;
        videoPlayer.onClick(videoPlayer.getStartButton());
        mPlay.setVisibility(View.GONE);
      }
 else {
        isStop=true;
        videoPlayer.onClick(videoPlayer.getStartButton());
        mPlay.setVisibility(View.VISIBLE);
        mPlay.setSelected(false);
      }
      isSelected=!isSelected;
    }
  }
);
}"
69008,"@Override public void onResponse(String response){
  try {
    JSONObject indieAuthResponse=new JSONObject(response);
    String accessToken=indieAuthResponse.getString(""String_Node_Str"");
    Log.d(""String_Node_Str"",accessToken);
    SharedPreferences.Editor editor=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE).edit();
    editor.putString(""String_Node_Str"",accessToken);
    editor.putString(""String_Node_Str"",domainInput);
    editor.apply();
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    if (preferences.getString(""String_Node_Str"",""String_Node_Str"").length() > 0) {
      Intent Channels=new Intent(getBaseContext(),ChannelActivity.class);
      startActivity(Channels);
    }
 else {
      Intent Micropub=new Intent(getBaseContext(),MicropubActivity.class);
      startActivity(Micropub);
    }
  }
 catch (  JSONException e) {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    Log.d(""String_Node_Str"",e.getMessage());
    info.setVisibility(View.VISIBLE);
    domain.setVisibility(View.VISIBLE);
    signIn.setVisibility(View.VISIBLE);
  }
  Log.d(""String_Node_Str"",response);
}","@Override public void onResponse(String response){
  try {
    JSONObject indieAuthResponse=new JSONObject(response);
    String accessToken=indieAuthResponse.getString(""String_Node_Str"");
    Log.d(""String_Node_Str"",accessToken);
    SharedPreferences.Editor editor=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE).edit();
    editor.putString(""String_Node_Str"",accessToken);
    editor.putString(""String_Node_Str"",domainInput);
    editor.apply();
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    if (preferences.getString(""String_Node_Str"",""String_Node_Str"").length() > 0) {
      Intent Channels=new Intent(getBaseContext(),ChannelActivity.class);
      startActivity(Channels);
    }
 else {
      Intent Micropub=new Intent(getBaseContext(),MicropubActivity.class);
      startActivity(Micropub);
    }
  }
 catch (  JSONException e) {
    Toast.makeText(getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
    Log.d(""String_Node_Str"",e.getMessage());
    info.setVisibility(View.VISIBLE);
    domain.setVisibility(View.VISIBLE);
    signIn.setVisibility(View.VISIBLE);
  }
  Log.d(""String_Node_Str"",response);
}"
69009,"public void onClick(View v){
  domainInput=domain.getText().toString();
  if (!domainInput.contains(""String_Node_Str"") && !domainInput.contains(""String_Node_Str"")) {
    domainInput=""String_Node_Str"" + domainInput;
  }
  if (validDomain(domainInput)) {
    info.setVisibility(View.INVISIBLE);
    domain.setVisibility(View.INVISIBLE);
    signIn.setVisibility(View.INVISIBLE);
    webview.setVisibility(View.VISIBLE);
    startOauthDance();
  }
 else {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}","public void onClick(View v){
  domainInput=domain.getText().toString();
  if (!domainInput.contains(""String_Node_Str"") && !domainInput.contains(""String_Node_Str"")) {
    domainInput=""String_Node_Str"" + domainInput;
  }
  if (validDomain(domainInput)) {
    info.setVisibility(View.GONE);
    domain.setVisibility(View.GONE);
    signIn.setVisibility(View.GONE);
    webview.setVisibility(View.VISIBLE);
    startOauthDance();
  }
 else {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}"
69010,"/** 
 * Authenticates with the IndieAuth endpoint. This method uses a webview to go to the authorization endpoint to start the oauth dance. If we get back to indigenous.abode.pub, we'll intercept and check if we have a code and validate.
 */
@SuppressLint(""String_Node_Str"") private void startOauthDance(){
  webview.setWebViewClient(new WebViewClient(){
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      Uri uri=Uri.parse(url);
      if (uri.getHost().contains(""String_Node_Str"")) {
        webview.setVisibility(View.INVISIBLE);
        webview.loadUrl(""String_Node_Str"");
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        code=uri.getQueryParameter(""String_Node_Str"");
        if (code != null && code.length() > 0) {
          validateCode(code);
        }
        return true;
      }
      return false;
    }
  }
);
  webview.getSettings().setJavaScriptEnabled(true);
  SharedPreferences preferences=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  String AuthEndPoint=preferences.getString(""String_Node_Str"",""String_Node_Str"");
  webview.loadUrl(AuthEndPoint + ""String_Node_Str"" + RedirectUri+ ""String_Node_Str""+ ClientId+ ""String_Node_Str""+ domainInput+ ""String_Node_Str"");
}","/** 
 * Authenticates with the IndieAuth endpoint. This method uses a webview to go to the authorization endpoint to start the oauth dance. If we get back to indigenous.abode.pub, we'll intercept and check if we have a code and validate.
 */
@SuppressLint(""String_Node_Str"") private void startOauthDance(){
  webview.setWebViewClient(new WebViewClient(){
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      Uri uri=Uri.parse(url);
      if (uri.getHost().contains(""String_Node_Str"")) {
        webview.setVisibility(View.INVISIBLE);
        webview.loadUrl(""String_Node_Str"");
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        code=uri.getQueryParameter(""String_Node_Str"");
        if (code != null && code.length() > 0) {
          validateCode(code);
        }
 else {
          Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
        return true;
      }
      return false;
    }
  }
);
  webview.getSettings().setJavaScriptEnabled(true);
  SharedPreferences preferences=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  String AuthEndPoint=preferences.getString(""String_Node_Str"",""String_Node_Str"");
  webview.loadUrl(AuthEndPoint + ""String_Node_Str"" + RedirectUri+ ""String_Node_Str""+ ClientId+ ""String_Node_Str""+ domainInput+ ""String_Node_Str"");
}"
69011,"@Override public boolean shouldOverrideUrlLoading(WebView view,String url){
  Uri uri=Uri.parse(url);
  if (uri.getHost().contains(""String_Node_Str"")) {
    webview.setVisibility(View.INVISIBLE);
    webview.loadUrl(""String_Node_Str"");
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    code=uri.getQueryParameter(""String_Node_Str"");
    if (code != null && code.length() > 0) {
      validateCode(code);
    }
    return true;
  }
  return false;
}","@Override public boolean shouldOverrideUrlLoading(WebView view,String url){
  Uri uri=Uri.parse(url);
  if (uri.getHost().contains(""String_Node_Str"")) {
    webview.setVisibility(View.INVISIBLE);
    webview.loadUrl(""String_Node_Str"");
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    code=uri.getQueryParameter(""String_Node_Str"");
    if (code != null && code.length() > 0) {
      validateCode(code);
    }
 else {
      Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
    return true;
  }
  return false;
}"
69012,"/** 
 * Validates the code.
 * @param code The code we got back after the oauth dance with the authorization endpoint.
 */
private void validateCode(final String code){
  RequestQueue queue=Volley.newRequestQueue(getApplicationContext());
  final SharedPreferences preferences=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  String TokenEndPoint=preferences.getString(""String_Node_Str"",""String_Node_Str"");
  StringRequest postRequest=new StringRequest(Request.Method.POST,TokenEndPoint,new Response.Listener<String>(){
    @Override public void onResponse(    String response){
      try {
        JSONObject indieAuthResponse=new JSONObject(response);
        String accessToken=indieAuthResponse.getString(""String_Node_Str"");
        Log.d(""String_Node_Str"",accessToken);
        SharedPreferences.Editor editor=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE).edit();
        editor.putString(""String_Node_Str"",accessToken);
        editor.putString(""String_Node_Str"",domainInput);
        editor.apply();
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        if (preferences.getString(""String_Node_Str"",""String_Node_Str"").length() > 0) {
          Intent Channels=new Intent(getBaseContext(),ChannelActivity.class);
          startActivity(Channels);
        }
 else {
          Intent Micropub=new Intent(getBaseContext(),MicropubActivity.class);
          startActivity(Micropub);
        }
      }
 catch (      JSONException e) {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
        Log.d(""String_Node_Str"",e.getMessage());
        info.setVisibility(View.VISIBLE);
        domain.setVisibility(View.VISIBLE);
        signIn.setVisibility(View.VISIBLE);
      }
      Log.d(""String_Node_Str"",response);
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      info.setVisibility(View.VISIBLE);
      domain.setVisibility(View.VISIBLE);
      signIn.setVisibility(View.VISIBLE);
      Log.d(""String_Node_Str"",error.getMessage());
    }
  }
){
    @Override protected Map<String,String> getParams(){
      Map<String,String> params=new HashMap<String,String>();
      params.put(""String_Node_Str"",code);
      params.put(""String_Node_Str"",domainInput);
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",ClientId);
      params.put(""String_Node_Str"",""String_Node_Str"");
      return params;
    }
    @Override public Map<String,String> getHeaders() throws AuthFailureError {
      HashMap<String,String> headers=new HashMap<String,String>();
      headers.put(""String_Node_Str"",""String_Node_Str"");
      return headers;
    }
  }
;
  queue.add(postRequest);
}","/** 
 * Validates the code.
 * @param code The code we got back after the oauth dance with the authorization endpoint.
 */
private void validateCode(final String code){
  RequestQueue queue=Volley.newRequestQueue(getApplicationContext());
  final SharedPreferences preferences=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  String TokenEndPoint=preferences.getString(""String_Node_Str"",""String_Node_Str"");
  StringRequest postRequest=new StringRequest(Request.Method.POST,TokenEndPoint,new Response.Listener<String>(){
    @Override public void onResponse(    String response){
      try {
        JSONObject indieAuthResponse=new JSONObject(response);
        String accessToken=indieAuthResponse.getString(""String_Node_Str"");
        Log.d(""String_Node_Str"",accessToken);
        SharedPreferences.Editor editor=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE).edit();
        editor.putString(""String_Node_Str"",accessToken);
        editor.putString(""String_Node_Str"",domainInput);
        editor.apply();
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        if (preferences.getString(""String_Node_Str"",""String_Node_Str"").length() > 0) {
          Intent Channels=new Intent(getBaseContext(),ChannelActivity.class);
          startActivity(Channels);
        }
 else {
          Intent Micropub=new Intent(getBaseContext(),MicropubActivity.class);
          startActivity(Micropub);
        }
      }
 catch (      JSONException e) {
        Toast.makeText(getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
        Log.d(""String_Node_Str"",e.getMessage());
        info.setVisibility(View.VISIBLE);
        domain.setVisibility(View.VISIBLE);
        signIn.setVisibility(View.VISIBLE);
      }
      Log.d(""String_Node_Str"",response);
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      Toast.makeText(getApplicationContext(),""String_Node_Str"" + error.getMessage(),Toast.LENGTH_LONG).show();
      info.setVisibility(View.VISIBLE);
      domain.setVisibility(View.VISIBLE);
      signIn.setVisibility(View.VISIBLE);
      Log.d(""String_Node_Str"",error.getMessage());
    }
  }
){
    @Override protected Map<String,String> getParams(){
      Map<String,String> params=new HashMap<String,String>();
      params.put(""String_Node_Str"",code);
      params.put(""String_Node_Str"",domainInput);
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",ClientId);
      params.put(""String_Node_Str"",""String_Node_Str"");
      return params;
    }
    @Override public Map<String,String> getHeaders() throws AuthFailureError {
      HashMap<String,String> headers=new HashMap<String,String>();
      headers.put(""String_Node_Str"",""String_Node_Str"");
      return headers;
    }
  }
;
  queue.add(postRequest);
}"
69013,"@Override public void onErrorResponse(VolleyError error){
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  info.setVisibility(View.VISIBLE);
  domain.setVisibility(View.VISIBLE);
  signIn.setVisibility(View.VISIBLE);
  Log.d(""String_Node_Str"",error.getMessage());
}","@Override public void onErrorResponse(VolleyError error){
  Toast.makeText(getApplicationContext(),""String_Node_Str"" + error.getMessage(),Toast.LENGTH_LONG).show();
  info.setVisibility(View.VISIBLE);
  domain.setVisibility(View.VISIBLE);
  signIn.setVisibility(View.VISIBLE);
  Log.d(""String_Node_Str"",error.getMessage());
}"
69014,"public View getView(final int position,View convertView,ViewGroup parent){
  final ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.channel_list_item,null);
    holder=new ViewHolder();
    holder.row=convertView.findViewById(R.id.channel_row);
    holder.name=convertView.findViewById(R.id.channel_name);
    holder.unread=convertView.findViewById(R.id.channel_unread);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  final Channel channel=channels.get(position);
  if (channel != null) {
    String color=((position % 2) == 0) ? ""String_Node_Str"" : ""String_Node_Str"";
    holder.row=convertView.findViewById(R.id.channel_row);
    holder.row.setBackgroundColor(Color.parseColor(color));
    holder.name.setText(channel.getName());
    Integer unreadText=channel.getUnread();
    if (unreadText > 0) {
      holder.unread.setVisibility(View.VISIBLE);
      holder.unread.setText(unreadText);
    }
 else {
      holder.unread.setVisibility(View.GONE);
    }
    holder.row.setOnTouchListener(new View.OnTouchListener(){
      @Override public boolean onTouch(      View view,      MotionEvent motionEvent){
        String backColor=((position % 2) == 0) ? ""String_Node_Str"" : ""String_Node_Str"";
switch (motionEvent.getAction()) {
case MotionEvent.ACTION_UP:
          holder.row.setBackgroundColor(Color.parseColor(backColor));
        Intent intent=new Intent(context,TimelineActivity.class);
      intent.putExtra(""String_Node_Str"",channel.getUid());
    intent.putExtra(""String_Node_Str"",channel.getName());
  intent.putExtra(""String_Node_Str"",channel.getUnread());
context.startActivity(intent);
break;
}
return true;
}
}
);
}
return convertView;
}","public View getView(final int position,View convertView,ViewGroup parent){
  final ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.channel_list_item,null);
    holder=new ViewHolder();
    holder.row=convertView.findViewById(R.id.channel_row);
    holder.name=convertView.findViewById(R.id.channel_name);
    holder.unread=convertView.findViewById(R.id.channel_unread);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  final Channel channel=channels.get(position);
  if (channel != null) {
    String color=((position % 2) == 0) ? ""String_Node_Str"" : ""String_Node_Str"";
    holder.row=convertView.findViewById(R.id.channel_row);
    holder.row.setBackgroundColor(Color.parseColor(color));
    holder.name.setText(channel.getName());
    Integer unreadText=channel.getUnread();
    if (unreadText > 0) {
      holder.unread.setVisibility(View.VISIBLE);
      holder.unread.setText(String.valueOf(unreadText));
    }
 else {
      holder.unread.setVisibility(View.GONE);
    }
    holder.row.setOnTouchListener(new View.OnTouchListener(){
      @Override public boolean onTouch(      View view,      MotionEvent motionEvent){
        String backColor=((position % 2) == 0) ? ""String_Node_Str"" : ""String_Node_Str"";
switch (motionEvent.getAction()) {
case MotionEvent.ACTION_UP:
          holder.row.setBackgroundColor(Color.parseColor(backColor));
        Intent intent=new Intent(context,TimelineActivity.class);
      intent.putExtra(""String_Node_Str"",channel.getUid());
    intent.putExtra(""String_Node_Str"",channel.getName());
  intent.putExtra(""String_Node_Str"",channel.getUnread());
context.startActivity(intent);
break;
}
return true;
}
}
);
}
return convertView;
}"
69015,"public void addGridBars(){
  if (Double.isNaN(barsGrid.getWidth()) || Double.isNaN(barsGrid.getHeight()) || RandomBars.barsArray[0] == null) {
    return;
  }
  barsGrid.getChildren().removeAll(barsGrid.getChildren());
  IntStream.range(0,10).forEachOrdered(index -> {
    Bar bar=RandomBars.barsArray[index];
    bar.getStyleClass().add(""String_Node_Str"");
    double height=calculateHeight(bar.getValue());
    bar.setMaxHeight(height);
    bar.setPrefHeight(height);
    bar.setBackground(new Background(new BackgroundFill(bar.getColor(),CornerRadii.EMPTY,Insets.EMPTY)));
    barsGrid.add(bar,index,0);
  }
);
}","public void addGridBars(){
  if (Double.isNaN(barsGrid.getWidth()) || Double.isNaN(barsGrid.getHeight()) || RandomBars.barsArray == null) {
    return;
  }
  barsGrid.getChildren().removeAll(barsGrid.getChildren());
  IntStream.range(0,10).forEachOrdered(index -> {
    Bar bar=RandomBars.barsArray[index];
    bar.getStyleClass().add(""String_Node_Str"");
    double height=calculateHeight(bar.getValue());
    bar.setMaxHeight(height);
    bar.setPrefHeight(height);
    bar.setBackground(new Background(new BackgroundFill(bar.getColor(),CornerRadii.EMPTY,Insets.EMPTY)));
    barsGrid.add(bar,index,0);
  }
);
}"
69016,"/** 
 * Constructor.
 * @param context Context
 */
@Inject FavoriteStore(@ApplicationContext final Context context){
  this.appContext=context;
  favoriteDatabase=Room.databaseBuilder(appContext,FavoriteDatabase.class,Constants.DATABASE_NAME).build();
}","/** 
 * Constructor.
 * @param context Context
 */
@Inject FavoriteStore(@ApplicationContext final Context context){
  this.appContext=context;
  buildFavoriteDatabase();
}"
69017,"@Override public boolean clearData(){
  boolean result=true;
  favoriteDatabase.close();
  final File databaseFile=appContext.getDatabasePath(Constants.DATABASE_NAME);
  if (databaseFile.exists()) {
    result=databaseFile.delete();
  }
  final File databaseJournalFile=appContext.getDatabasePath(Constants.DATABASE_NAME + DATABASE_JOURNAL_SUFFIX);
  if (databaseJournalFile.exists()) {
    result=result && databaseJournalFile.delete();
  }
  return result;
}","@Override public boolean clearData(){
  boolean result=true;
  favoriteDatabase.close();
  final File databaseFile=appContext.getDatabasePath(Constants.DATABASE_NAME);
  if (databaseFile.exists()) {
    result=databaseFile.delete();
  }
  final File databaseJournalFile=appContext.getDatabasePath(Constants.DATABASE_NAME + DATABASE_JOURNAL_SUFFIX);
  if (databaseJournalFile.exists()) {
    result=result && databaseJournalFile.delete();
  }
  buildFavoriteDatabase();
  return result;
}"
69018,"@Override public Single<List<MovieData>> getAllFavoriteMovies(){
  final FavoriteDao dao=favoriteDatabase.getDao();
  return Single.fromCallable(() -> {
    final List<MovieData> movies=new ArrayList<>();
    for (    final Favorite favorite : dao.loadAllFavorites()) {
      movies.add(favorite.toMovie());
    }
    return movies;
  }
).subscribeOn(Schedulers.io());
}","@Override public Single<List<MovieData>> getAllFavoriteMovies(){
  return Single.fromCallable(() -> {
    final List<MovieData> movies=new ArrayList<>();
    final FavoriteDao dao=favoriteDatabase.getDao();
    for (    final Favorite favorite : dao.loadAllFavorites()) {
      movies.add(favorite.toMovie());
    }
    return movies;
  }
).subscribeOn(Schedulers.io());
}"
69019,"@ApiOperation(""String_Node_Str"") @PutMapping(""String_Node_Str"") @NeedLogin Result approval(@PathVariable BigInteger id,@PathVariable Integer status) throws Exception {
  transactionService.approval(id,status);
  return ResultGenerator.genSuccessResult();
}","@ApiOperation(""String_Node_Str"") @PutMapping(""String_Node_Str"") @NeedLogin Result approval(@PathVariable BigInteger id,@PathVariable Integer status,@RequestBody HashDTO hashDTO) throws Exception {
  transactionService.approval(id,status,hashDTO.getHashAddress());
  return ResultGenerator.genSuccessResult();
}"
69020,"private void addressHandler(org.web3j.protocol.core.methods.response.Transaction tx){
  String to=Web3jUtil.getTo(tx);
  String key=RedisConstants.LISTEN_ETH_ADDR + ""String_Node_Str"" + to;
  String hash=tx.getHash();
  BigInteger userId=(BigInteger)redisTemplate.opsForValue().get(key);
  if (null == userId) {
    return;
  }
  if (existHash(hash)) {
    return;
  }
  BigInteger tokenId=getTokenId(tx);
  Config config=configService.get(tokenId);
  if (null == config) {
    return;
  }
  Transaction transaction=new Transaction();
  transaction.setHash(hash);
  transaction.setUserId(userId);
  transaction.setTokenId(tokenId);
  transaction.setOrderId(getOrderId(CommonConstants.ORDER_RECHARGE));
  transaction.setType(CommonConstants.RECHARGE);
  transaction.setStatus(CommonConstants.STATUS_SUCCESS);
  transaction.setToAddress(to);
  transaction.setFromAddress(tx.getFrom());
  transaction.setNumber(Web3jUtil.getValue(tx.getValue(),transaction.getTokenId(),redisTemplate));
  transaction.setPoundage(0f);
  transaction.setRealNumber(transaction.getNumber());
  transactionMapper.insertSelective(transaction);
  updateBalance(transaction);
  this.transferBalance(transaction);
}","private void addressHandler(org.web3j.protocol.core.methods.response.Transaction tx){
  String to=Web3jUtil.getTo(tx);
  String key=RedisConstants.LISTEN_ETH_ADDR + ""String_Node_Str"" + to;
  String hash=tx.getHash();
  BigInteger userId=(BigInteger)redisTemplate.opsForValue().get(key);
  if (null == userId) {
    return;
  }
  if (existHash(hash)) {
    return;
  }
  BigInteger tokenId=getTokenId(tx);
  Config config=configService.get(tokenId);
  if (null == config) {
    return;
  }
  Transaction transaction=new Transaction();
  transaction.setHash(hash);
  transaction.setUserId(userId);
  transaction.setTokenId(tokenId);
  transaction.setOrderId(getOrderId(CommonConstants.ORDER_RECHARGE));
  transaction.setType(CommonConstants.RECHARGE);
  transaction.setStatus(CommonConstants.STATUS_SUCCESS);
  transaction.setToAddress(to);
  transaction.setFromAddress(tx.getFrom());
  transaction.setNumber(Web3jUtil.getValue(tx.getValue(),transaction.getTokenId(),redisTemplate));
  transaction.setPoundage(0f);
  transaction.setRealNumber(transaction.getNumber());
  transactionMapper.insertSelective(transaction);
  updateBalance(transaction);
  this.transferBalance(transaction,coldUser);
}"
69021,"@Async public void transferBalance(Transaction transaction){
  try {
    EthGetBalance result=web3j.ethGetBalance(transaction.getToAddress(),DefaultBlockParameterName.LATEST).send();
    BigInteger needBalance=TransactionService.DEFAULT_GAS_LIMIT.multiply(TransactionService.DEFAULT_GAS_PRICE);
    BigInteger sendBalance=result.getBalance().subtract(needBalance);
    if (sendGasIfNull(transaction,result,needBalance)) {
      return;
    }
    String contractAddress=getContractAddressByTokenId(transaction);
    if (!transaction.getTokenId().equals(BigInteger.ZERO)) {
      sendBalance=contractService.balanceOf(contractAddress,transaction.getToAddress());
    }
    sendTransaction(transaction.getToAddress(),defaultUser,contractAddress,sendBalance,false);
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(e.getMessage());
  }
}","@Async public void transferBalance(Transaction transaction,String address){
  try {
    EthGetBalance result=web3j.ethGetBalance(transaction.getToAddress(),DefaultBlockParameterName.LATEST).send();
    BigInteger needBalance=TransactionService.DEFAULT_GAS_LIMIT.multiply(TransactionService.DEFAULT_GAS_PRICE);
    BigInteger sendBalance=result.getBalance().subtract(needBalance);
    if (sendGasIfNull(transaction,result,needBalance)) {
      return;
    }
    String contractAddress=getContractAddressByTokenId(transaction);
    if (!transaction.getTokenId().equals(BigInteger.ZERO)) {
      sendBalance=contractService.balanceOf(contractAddress,transaction.getToAddress());
    }
    sendTransaction(transaction.getToAddress(),address,contractAddress,sendBalance,false);
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(e.getMessage());
  }
}"
69022,"private boolean sendGasIfNull(Transaction transaction,EthGetBalance result,BigInteger needBalance) throws IOException {
  if (!result.hasError() && result.getBalance().compareTo(BigInteger.ZERO) == 0) {
    org.web3j.protocol.core.methods.request.Transaction trans=new org.web3j.protocol.core.methods.request.Transaction(defaultUser,null,DEFAULT_GAS_PRICE,DEFAULT_GAS_LIMIT,transaction.getToAddress(),needBalance,null);
    admin.personalUnlockAccount(defaultUser,password);
    web3j.ethSendTransaction(trans).send();
    redisTemplate.opsForList().leftPush(RedisConstants.GAS_QUENE,transaction);
    return true;
  }
  ;
  return false;
}","private boolean sendGasIfNull(Transaction transaction,EthGetBalance result,BigInteger needBalance) throws IOException {
  if (!result.hasError() && result.getBalance().compareTo(BigInteger.ZERO) == 0) {
    org.web3j.protocol.core.methods.request.Transaction trans=new org.web3j.protocol.core.methods.request.Transaction(defaultUser,null,DEFAULT_GAS_PRICE,DEFAULT_GAS_LIMIT,transaction.getToAddress(),needBalance,null);
    admin.personalUnlockAccount(defaultUser,password);
    web3j.ethSendTransaction(trans).send();
    redisTemplate.opsForList().leftPush(RedisConstants.GAS_QUENE,transaction);
    return true;
  }
  return false;
}"
69023,"public void approval(BigInteger id,Integer status) throws Exception {
  Assert.isTrue(status != 2,MessageConstants.getMsg(""String_Node_Str""));
  Transaction transaction=new Transaction();
  transaction.setId(id);
  transaction.setStatus(status);
  transactionMapper.updateByPrimaryKeySelective(transaction);
  setBalance(id,status);
  sendValue(id,status);
}","public void approval(BigInteger id,Integer status,String hash) throws Exception {
  Assert.isTrue(status != 2,MessageConstants.getMsg(""String_Node_Str""));
  Transaction transaction=new Transaction();
  transaction.setId(id);
  transaction.setStatus(status);
  transactionMapper.updateByPrimaryKeySelective(transaction);
  setBalance(id,status);
  sendValue(id,status,hash);
}"
69024,"public Integer sendGas(){
  Integer number=0;
  while (redisTemplate.opsForList().size(RedisConstants.GAS_QUENE) > 0) {
    Transaction transaction=(Transaction)redisTemplate.opsForList().rightPop(RedisConstants.GAS_QUENE);
    transferBalance(transaction);
    number++;
  }
  return number;
}","public Integer sendGas(){
  Integer number=0;
  while (redisTemplate.opsForList().size(RedisConstants.GAS_QUENE) > 0) {
    Transaction transaction=(Transaction)redisTemplate.opsForList().rightPop(RedisConstants.GAS_QUENE);
    transferBalance(transaction,defaultUser);
    number++;
  }
  return number;
}"
69025,"private void sendValue(BigInteger id,Integer status) throws Exception {
  if (status.equals(1)) {
    Transaction transaction=new Transaction();
    transaction.setId(id);
    transaction=transactionMapper.selectByPrimaryKey(transaction);
    String contractAddress=null;
    BigInteger value=Web3jUtil.getWei(transaction.getRealNumber(),transaction.getTokenId(),redisTemplate);
    contractAddress=getContractAddressByTokenId(transaction);
    String hash=sendTransaction(defaultUser,transaction.getToAddress(),contractAddress,value,true);
    transaction.setHash(hash);
    transactionMapper.updateByPrimaryKeySelective(transaction);
  }
}","private void sendValue(BigInteger id,Integer status,String hash) throws Exception {
  if (status.equals(1)) {
    Assert.notNull(hash,""String_Node_Str"");
    Transaction transaction=new Transaction();
    transaction.setId(id);
    transaction=transactionMapper.selectByPrimaryKey(transaction);
    transaction.setHash(hash);
    EthGetTransactionReceipt result=web3j.ethGetTransactionReceipt(hash).send();
    if (null != result && null != result.getResult() && !result.hasError() && result.getTransactionReceipt().get().getStatus().equalsIgnoreCase(""String_Node_Str"")) {
      transaction.setStatus(CommonConstants.STATUS_SUCCESS);
    }
 else {
      redisTemplate.opsForValue().set(RedisConstants.LISTEN_HASH + ""String_Node_Str"" + hash,1);
    }
    transactionMapper.updateByPrimaryKeySelective(transaction);
  }
}"
69026,"@Insert(""String_Node_Str"") void sendToken(@Param(""String_Node_Str"") BigInteger projectId,@Param(""String_Node_Str"") BigInteger tokenId);","@Select(""String_Node_Str"") void sendToken(@Param(""String_Node_Str"") BigInteger projectId,@Param(""String_Node_Str"") BigInteger tokenId);"
69027,"private void checkCanWithdraw(WithdrawDTO withdrawDTO,Config config){
  String addressKey=RedisConstants.LISTEN_ETH_ADDR + ""String_Node_Str"" + withdrawDTO.getAddress();
  Assert.isTrue(!redisTemplate.hasKey(addressKey),MessageConstants.ADDERSS_ERROR);
  String key=RedisConstants.TODAY_USER + ""String_Node_Str"" + withdrawDTO.getTokenName()+ ""String_Node_Str""+ getUserId();
  BigDecimal use=(BigDecimal)redisTemplate.opsForValue().get(key);
  use=null == use ? BigDecimal.ZERO : use;
  Boolean canWithdraw=BigDecimal.valueOf(config.getMax()).subtract(use).compareTo(withdrawDTO.getNumber()) > 0;
  Assert.isTrue(canWithdraw,CommonConstants.NOT_ENOUGH);
}","private void checkCanWithdraw(WithdrawDTO withdrawDTO,Config config){
  String addressKey=RedisConstants.LISTEN_ETH_ADDR + ""String_Node_Str"" + withdrawDTO.getAddress();
  Assert.isTrue(!redisTemplate.hasKey(addressKey),MessageConstants.ADDERSS_ERROR);
  String key=RedisConstants.TODAY_USER + ""String_Node_Str"" + withdrawDTO.getTokenName()+ ""String_Node_Str""+ getUserId();
  BigDecimal use=(BigDecimal)redisTemplate.opsForValue().get(key);
  use=null == use ? BigDecimal.ZERO : use;
  Boolean canWithdraw=BigDecimal.valueOf(config.getMax()).subtract(use).compareTo(withdrawDTO.getNumber()) >= 0;
  Assert.isTrue(canWithdraw,CommonConstants.NOT_ENOUGH);
}"
69028,"public static BigDecimal getValue(BigInteger value,BigInteger tokenId,RedisTemplate redisTemplate){
  if (null == tokenId) {
    return null;
  }
  if (tokenId.equals(BigInteger.ZERO)) {
    return Convert.fromWei(new BigDecimal(value),Convert.Unit.ETHER);
  }
  Convert.Unit unit=(Convert.Unit)redisTemplate.opsForValue().get(RedisConstants.UNIT + ""String_Node_Str"" + tokenId);
  return Convert.fromWei(new BigDecimal(value),unit);
}","public static BigDecimal getValue(BigInteger value,BigInteger tokenId,RedisTemplate redisTemplate){
  if (null == tokenId) {
    return null;
  }
  if (tokenId.equals(BigInteger.ZERO)) {
    return Convert.fromWei(new BigDecimal(value),Convert.Unit.ETHER);
  }
  String name=redisTemplate.opsForValue().get(RedisConstants.UNIT + ""String_Node_Str"" + tokenId).toString();
  Convert.Unit unit=Convert.Unit.valueOf(name);
  return Convert.fromWei(new BigDecimal(value),unit);
}"
69029,"public static BigInteger getWei(BigDecimal realNumber,BigInteger tokenId,RedisTemplate redisTemplate){
  if (null == tokenId || BigInteger.ZERO.equals(tokenId)) {
    return Convert.toWei(realNumber,Convert.Unit.ETHER).toBigInteger();
  }
 else {
    Convert.Unit unit=(Convert.Unit)redisTemplate.opsForValue().get(RedisConstants.UNIT + ""String_Node_Str"" + tokenId);
    return Convert.toWei(realNumber,unit).toBigInteger();
  }
}","public static BigInteger getWei(BigDecimal realNumber,BigInteger tokenId,RedisTemplate redisTemplate){
  if (null == tokenId || BigInteger.ZERO.equals(tokenId)) {
    return Convert.toWei(realNumber,Convert.Unit.ETHER).toBigInteger();
  }
 else {
    String name=redisTemplate.opsForValue().get(RedisConstants.UNIT + ""String_Node_Str"" + tokenId).toString();
    Convert.Unit unit=Convert.Unit.valueOf(name);
    return Convert.toWei(realNumber,unit).toBigInteger();
  }
}"
69030,"private void newListen() throws InterruptedException {
  Subscription subscribe=web3j.transactionObservable().subscribe(tx -> listenTx(tx,false),getOnError());
  while (true) {
    if (null == subscribe || subscribe.isUnsubscribed()) {
      Thread.sleep(1000);
      newListen();
    }
  }
}","private void newListen() throws InterruptedException {
  Subscription subscribe=web3j.transactionObservable().subscribe(tx -> listenTx(tx,false),getOnError());
  while (true) {
    if (null == subscribe || subscribe.isUnsubscribed()) {
      Thread.sleep(10000);
      newListen();
    }
  }
}"
69031,"private void historyListen() throws InterruptedException {
  BigInteger lastBlockNumber=(BigInteger)redisTemplate.opsForValue().get(RedisConstants.LAST_BOLCK_NUMBER);
  if (null == lastBlockNumber) {
    lastBlockNumber=BigInteger.ZERO;
  }
  Subscription subscription=web3j.replayTransactionsObservable(DefaultBlockParameter.valueOf(lastBlockNumber),DefaultBlockParameterName.LATEST).subscribe(tx -> listenTx(tx,true),getOnError());
  while (true) {
    if (null == subscription || subscription.isUnsubscribed()) {
      historyListen();
      Thread.sleep(1000);
    }
  }
}","private void historyListen() throws InterruptedException {
  BigInteger lastBlockNumber=(BigInteger)redisTemplate.opsForValue().get(RedisConstants.LAST_BOLCK_NUMBER);
  if (null == lastBlockNumber) {
    lastBlockNumber=BigInteger.ZERO;
  }
  Subscription subscription=web3j.replayTransactionsObservable(DefaultBlockParameter.valueOf(lastBlockNumber),DefaultBlockParameterName.LATEST).subscribe(tx -> listenTx(tx,true),getOnError());
  while (true) {
    if (null == subscription || subscription.isUnsubscribed()) {
      Thread.sleep(10000);
      historyListen();
    }
  }
}"
69032,"public void retire(BigInteger id,Integer retire){
  Project project=getNotNullById(id);
  Config config=configService.getConfigByTokenName(project.getTokenName());
  Boolean canRetire=project.getStatus().equals(2) && project.getRetire().equals(0) && config.getWithdrawStatus().equals(0);
  Assert.isTrue(canRetire,MessageConstants.CANNOT_RETIRE);
  project.setRetire(1);
  projectMapper.updateByPrimaryKeySelective(project);
  projectMapper.retireBalance(id);
  projectMapper.retireToken(id,config.getId());
  orderService.retireToken(id,CommonConstants.ORDER_STATUS_RETIRE);
}","public void retire(BigInteger id,Integer retire){
  Project project=getNotNullById(id);
  Config config=configService.getConfigByTokenName(project.getTokenName());
  Boolean canRetire=project.getStatus().equals(2) && project.getRetire().equals(0) && config.getWithdrawStatus().equals(0);
  Assert.isTrue(canRetire,MessageConstants.CANNOT_RETIRE);
  project.setRetire(1);
  projectMapper.updateByPrimaryKeySelective(project);
  Orders orders=new Orders();
  orders.setProjectId(id);
  if (orderMapper.selectCount(orders) > 0) {
    projectMapper.retireBalance(id);
    projectMapper.retireToken(id,config.getId());
    orderService.retireToken(id,CommonConstants.ORDER_STATUS_RETIRE);
  }
}"
69033,"private void newListen() throws InterruptedException {
  Subscription subscribe=web3j.transactionObservable().subscribe(tx -> listenTx(tx,false),getOnError());
  while (true) {
    if (null == subscribe || subscribe.isUnsubscribed()) {
      newListen();
      Thread.sleep(1000);
    }
  }
}","private void newListen() throws InterruptedException {
  Subscription subscribe=web3j.transactionObservable().subscribe(tx -> listenTx(tx,false),getOnError());
  while (true) {
    if (null == subscribe || subscribe.isUnsubscribed()) {
      Thread.sleep(1000);
      newListen();
    }
  }
}"
69034,"@Override @Async public void run(String... args) throws InterruptedException {
  transactionService.initConfig();
  transactionService.startListen();
}","@Override @Async public void run(String... args) throws InterruptedException {
  transactionService.initConfig();
  transactionService.startHistory();
  transactionService.startListen();
}"
69035,"public void startListen() throws InterruptedException {
  try {
    historyListen();
    newListen();
  }
 catch (  Exception e) {
    Thread.sleep(10000);
    startListen();
  }
}","@Async public void startListen() throws InterruptedException {
  try {
    newListen();
  }
 catch (  Exception e) {
    Thread.sleep(10000);
    startListen();
  }
}"
69036,"public static String getTo(Transaction tx){
  try {
    String to=tx.getTo();
    if (null == to) {
      return to;
    }
    if (ETH_FLAG.equalsIgnoreCase(tx.getInput())) {
      return to;
    }
    if (isContractTx(tx)) {
      return tx.getInput().substring(34,74);
    }
    return null;
  }
 catch (  Exception e) {
    return null;
  }
}","public static String getTo(Transaction tx){
  try {
    String to=tx.getTo();
    if (null == to) {
      return to;
    }
    if (ETH_FLAG.equalsIgnoreCase(tx.getInput())) {
      return to;
    }
    if (isContractTx(tx)) {
      return ""String_Node_Str"" + tx.getInput().substring(34,74);
    }
    return null;
  }
 catch (  Exception e) {
    return null;
  }
}"
69037,"public void retire(BigInteger id,Integer retire){
  Project project=getNotNullById(id);
  Config config=configService.getConfigByTokenName(project.getTokenName());
  Boolean canRetire=project.getStatus().equals(2) && project.getRetire().equals(0) && config.getWithdrawStatus().equals(0);
  Assert.isTrue(canRetire,MessageConstants.CANNOT_RETIRE);
  project.setRetire(1);
  projectMapper.updateByPrimaryKeySelective(project);
  projectMapper.retireBalance(id);
  projectMapper.retireToken(id,config.getId());
  orderService.updateStatusByProject(id,CommonConstants.ORDER_STATUS_RETIRE);
}","public void retire(BigInteger id,Integer retire){
  Project project=getNotNullById(id);
  Config config=configService.getConfigByTokenName(project.getTokenName());
  Boolean canRetire=project.getStatus().equals(2) && project.getRetire().equals(0) && config.getWithdrawStatus().equals(0);
  Assert.isTrue(canRetire,MessageConstants.CANNOT_RETIRE);
  project.setRetire(1);
  projectMapper.updateByPrimaryKeySelective(project);
  projectMapper.retireBalance(id);
  projectMapper.retireToken(id,config.getId());
  orderService.retireToken(id,CommonConstants.ORDER_STATUS_RETIRE);
}"
69038,"@Update(""String_Node_Str"") void retireBalance(@Param(""String_Node_Str"") BigInteger userId,@Param(""String_Node_Str"") BigInteger projectId);","@Update(""String_Node_Str"") void retireBalance(@Param(""String_Node_Str"") BigInteger projectId);"
69039,"public void retire(BigInteger id,Integer retire){
  Project project=getNotNullById(id);
  Config config=configService.getConfigByTokenName(project.getTokenName());
  Boolean canRetire=project.getStatus().equals(2) && project.getRetire().equals(0) && config.getRechargeStatus().equals(0);
  Assert.isTrue(canRetire,MessageConstants.CANNOT_RETIRE);
  project.setRetire(1);
  projectMapper.updateByPrimaryKeySelective(project);
  orderService.updateStatusByProject(id,CommonConstants.ORDER_STATUS_RETIRE);
  projectMapper.retireBalance(getUserId(),id);
}","public void retire(BigInteger id,Integer retire){
  Project project=getNotNullById(id);
  Config config=configService.getConfigByTokenName(project.getTokenName());
  Boolean canRetire=project.getStatus().equals(2) && project.getRetire().equals(0) && config.getRechargeStatus().equals(0);
  Assert.isTrue(canRetire,MessageConstants.CANNOT_RETIRE);
  project.setRetire(1);
  projectMapper.updateByPrimaryKeySelective(project);
  projectMapper.retireBalance(id);
  projectMapper.retireToken(id,config.getId());
  orderService.updateStatusByProject(id,CommonConstants.ORDER_STATUS_RETIRE);
}"
69040,"public void withdraw(WithdrawDTO withdrawDTO){
  checkAccount(withdrawDTO);
  Config config=getConfig(withdrawDTO.getTokenName());
  Assert.notNull(config,CommonConstants.TOKEN_ERR);
  checkCanWithdraw(withdrawDTO,config);
  checkEthBalance(withdrawDTO,config);
  Transaction transaction=new Transaction();
  transaction.setStatus(0);
  transaction.setNumber(withdrawDTO.getNumber());
  transaction.setOrderId(getOrderId(CommonConstants.ORDER_WITHDRAW));
  transaction.setPoundage(config.getPoundage());
  transaction.setRealNumber(withdrawDTO.getNumber().subtract(BigDecimal.valueOf(config.getPoundage())));
  transaction.setToAddress(withdrawDTO.getAddress());
  transaction.setType(CommonConstants.WITHDRAW);
  transaction.setUserId(getUserId());
  transaction.setTokenId(config.getId());
  transaction.setFromAddress(defaultUser);
  transactionMapper.insert(transaction);
  capitalMapper.updateBalance(getUserId(),config.getId(),BigDecimal.ZERO.subtract(withdrawDTO.getNumber()));
}","public void withdraw(WithdrawDTO withdrawDTO){
  checkAccount(withdrawDTO);
  Config config=getConfig(withdrawDTO.getTokenName());
  Assert.notNull(config,CommonConstants.TOKEN_ERR);
  checkCanWithdraw(withdrawDTO,config);
  checkEthBalance(withdrawDTO,config);
  Transaction transaction=new Transaction();
  transaction.setStatus(0);
  transaction.setNumber(withdrawDTO.getNumber());
  transaction.setOrderId(getOrderId(CommonConstants.ORDER_WITHDRAW));
  transaction.setPoundage(config.getPoundage());
  transaction.setRealNumber(withdrawDTO.getNumber().subtract(BigDecimal.valueOf(config.getPoundage())));
  transaction.setToAddress(withdrawDTO.getAddress());
  transaction.setType(CommonConstants.WITHDRAW);
  transaction.setUserId(getUserId());
  transaction.setTokenId(config.getId());
  transaction.setFromAddress(defaultUser);
  transactionMapper.insert(transaction);
  capitalMapper.updateBalance(getUserId(),config.getId(),BigDecimal.ZERO.subtract(withdrawDTO.getNumber()));
  String key=RedisConstants.TODAY_USER + ""String_Node_Str"" + withdrawDTO.getTokenName()+ ""String_Node_Str""+ getUserId();
  BigDecimal use=(BigDecimal)redisTemplate.opsForValue().get(key);
  use=use == null ? withdrawDTO.getNumber() : use.add(withdrawDTO.getNumber());
  redisTemplate.opsForValue().set(key,use);
}"
69041,"public TokenVO login(AdminDTO adminDTO){
  String username=adminDTO.getUsername();
  Admin admin=new Admin();
  admin.setUsername(username);
  admin=adminMapper.selectOne(admin);
  Assert.notNull(admin,MessageConstants.getMsg(""String_Node_Str""));
  boolean result=encoder.matches(adminDTO.getPassword(),admin.getPassword());
  Assert.isTrue(result,MessageConstants.getMsg(""String_Node_Str""));
  Assert.isTrue(!MessageConstants.getMsg(""String_Node_Str"").equals(admin.getStatus()),""String_Node_Str"");
  redisTemplate.opsForValue().set(RedisConstants.USER_STATUS,admin.getStatus());
  String token=JwtHelper.createToken(username,admin.getId());
  String refreshToken=JwtHelper.createRefresh(username,admin.getId());
  return new TokenVO(token,refreshToken);
}","public TokenVO login(AdminDTO adminDTO){
  String username=adminDTO.getUsername();
  Admin admin=new Admin();
  admin.setUsername(username);
  admin=adminMapper.selectOne(admin);
  Assert.notNull(admin,MessageConstants.getMsg(""String_Node_Str""));
  boolean result=encoder.matches(adminDTO.getPassword(),admin.getPassword());
  Assert.isTrue(result,MessageConstants.getMsg(""String_Node_Str""));
  Assert.isTrue(!CommonConstants.USER_FREEZE.equals(admin.getStatus()),""String_Node_Str"");
  redisTemplate.opsForValue().set(RedisConstants.USER_STATUS,admin.getStatus());
  String token=JwtHelper.createToken(username,admin.getId());
  String refreshToken=JwtHelper.createRefresh(username,admin.getId());
  return new TokenVO(token,refreshToken);
}"
69042,"public void buy(BuyDTO buyDTO){
  Account account=accountService.getAccount(getUserId());
  Assert.isTrue(encoder.matches(buyDTO.getTransactionPassword(),account.getTransactionPassword()),MessageConstants.getMsg(""String_Node_Str""));
  ProjectVO project=get(buyDTO.getProjectId());
  Assert.notNull(project,MessageConstants.getMsg(""String_Node_Str""));
  BigDecimal sold=getSold(buyDTO.getProjectId()).getSoldEth();
  Assert.isTrue(sold.add(buyDTO.getEthNumber()).compareTo(project.getEthNumber()) <= 0,MessageConstants.getMsg(""String_Node_Str""));
  BigDecimal balance=buyDTO.getEthNumber().multiply(new BigDecimal(project.getRatio()));
  Capital ethCapital=new Capital();
  ethCapital.setUserId(getUserId());
  ethCapital.setTokenId(BigInteger.ZERO);
  Integer result=capitalMapper.updateEth(getUserId(),buyDTO.getEthNumber());
  Assert.isTrue(result > 0,MessageConstants.getMsg(""String_Node_Str""));
  addOrder(buyDTO,balance);
  Integer orderNum=account.getOrderNum();
  orderNum=null == orderNum ? 1 : ++orderNum;
  account.setOrderNum(orderNum);
  accountService.update(account);
  String key=RedisConstants.USER_PROJECTS + ""String_Node_Str"" + getUserId();
  redisTemplate.opsForValue().set(key,orderMapper.getUserProject(getUserId()));
}","public void buy(BuyDTO buyDTO){
  Account account=accountService.getAccount(getUserId());
  Assert.isTrue(encoder.matches(buyDTO.getTransactionPassword(),account.getTransactionPassword()),MessageConstants.getMsg(""String_Node_Str""));
  ProjectVO project=get(buyDTO.getProjectId());
  Assert.notNull(project,MessageConstants.getMsg(""String_Node_Str""));
  BigDecimal sold=getSold(buyDTO.getProjectId()).getSoldEth();
  Assert.isTrue(sold.add(buyDTO.getEthNumber()).compareTo(project.getEthNumber()) <= 0,MessageConstants.getMsg(""String_Node_Str""));
  BigDecimal balance=buyDTO.getEthNumber().multiply(new BigDecimal(project.getRatio()));
  Capital ethCapital=new Capital();
  ethCapital.setUserId(getUserId());
  ethCapital.setTokenId(BigInteger.ZERO);
  Integer result=capitalMapper.updateEth(getUserId(),buyDTO.getEthNumber());
  Assert.isTrue(result > 0,MessageConstants.getMsg(""String_Node_Str""));
  addOrder(buyDTO,balance);
  Integer orderNum=account.getOrderNum();
  orderNum=null == orderNum ? 1 : ++orderNum;
  account.setOrderNum(orderNum);
  accountService.update(account);
  sold=getSold(buyDTO.getProjectId()).getSoldEth();
  Assert.isTrue(sold.compareTo(project.getEthNumber()) <= 0,MessageConstants.getMsg(""String_Node_Str""));
  String key=RedisConstants.USER_PROJECTS + ""String_Node_Str"" + getUserId();
  redisTemplate.opsForValue().set(key,orderMapper.getUserProject(getUserId()));
}"
69043,"@Bean public OkHttpClient okHttpClient() throws IOException {
  OkHttpClient.Builder builder=new OkHttpClient.Builder();
  builder.connectTimeout(120,TimeUnit.SECONDS).readTimeout(120,TimeUnit.SECONDS).writeTimeout(120,TimeUnit.SECONDS).retryOnConnectionFailure(true).addInterceptor(new Interceptor(){
    @Autowired TransactionService transactionService;
    @Override public Response intercept(    Chain chain) throws IOException {
      Request originalRequest=chain.request();
      Request requestWithUserAgent=originalRequest.newBuilder().build();
      Response result=null;
      try {
        result=chain.proceed(requestWithUserAgent);
      }
 catch (      Exception e) {
        e.printStackTrace();
        try {
          transactionService.startListen();
          return null;
        }
 catch (        InterruptedException e1) {
          e1.printStackTrace();
        }
      }
      return result;
    }
  }
);
  return builder.build();
}","@Bean public OkHttpClient okHttpClient() throws IOException {
  OkHttpClient.Builder builder=new OkHttpClient.Builder();
  builder.connectTimeout(120,TimeUnit.SECONDS).readTimeout(120,TimeUnit.SECONDS).writeTimeout(120,TimeUnit.SECONDS).retryOnConnectionFailure(true).addInterceptor(new Interceptor(){
    TransactionService transactionService=SpringContextUtil.getBean(""String_Node_Str"");
    @Override public Response intercept(    Chain chain) throws IOException {
      Request originalRequest=chain.request();
      Request requestWithUserAgent=originalRequest.newBuilder().build();
      Response result=null;
      try {
        result=chain.proceed(requestWithUserAgent);
      }
 catch (      Exception e) {
        e.printStackTrace();
        try {
          transactionService.startListen();
          return null;
        }
 catch (        InterruptedException e1) {
          e1.printStackTrace();
        }
      }
      return result;
    }
  }
);
  return builder.build();
}"
69044,"private void addressHandler(org.web3j.protocol.core.methods.response.Transaction tx){
  String to=Web3jUtil.getTo(tx);
  String key=RedisConstants.LISTEN_ETH_ADDR + ""String_Node_Str"" + to;
  String hash=tx.getHash();
  BigInteger userId=(BigInteger)redisTemplate.opsForValue().get(key);
  if (null == userId) {
    return;
  }
  if (existHash(hash)) {
    return;
  }
  BigInteger tokenId=getTokenId(tx);
  Config config=configService.get(tokenId);
  if (null == config) {
    return;
  }
  Transaction transaction=new Transaction();
  transaction.setHash(hash);
  transaction.setUserId(userId);
  transaction.setTokenId(tokenId);
  transaction.setOrderId(getOrderId(CommonConstants.ORDER_RECHARGE));
  transaction.setType(CommonConstants.RECHARGE);
  transaction.setStatus(CommonConstants.STATUS_SUCCESS);
  transaction.setToAddress(to);
  transaction.setFromAddress(tx.getFrom());
  transaction.setNumber(Web3jUtil.getValue(tx.getValue(),transaction.getTokenId(),redisTemplate));
  transaction.setPoundage(0f);
  transaction.setRealNumber(transaction.getNumber());
  transactionMapper.insertSelective(transaction);
  updateBalance(transaction);
  this.transferBalance(transaction,coldUser);
}","private void addressHandler(org.web3j.protocol.core.methods.response.Transaction tx){
  String to=Web3jUtil.getTo(tx);
  String key=RedisConstants.LISTEN_ETH_ADDR + ""String_Node_Str"" + to;
  String hash=tx.getHash();
  BigInteger userId=(BigInteger)redisTemplate.opsForValue().get(key);
  if (null == userId) {
    return;
  }
  if (existHash(hash)) {
    return;
  }
  BigInteger tokenId=getTokenId(tx);
  Config config=configService.get(tokenId);
  if (null == config) {
    return;
  }
  Transaction transaction=new Transaction();
  transaction.setHash(hash);
  transaction.setUserId(userId);
  transaction.setTokenId(tokenId);
  transaction.setOrderId(getOrderId(CommonConstants.ORDER_RECHARGE));
  transaction.setType(CommonConstants.RECHARGE);
  transaction.setStatus(CommonConstants.STATUS_SUCCESS);
  transaction.setToAddress(to);
  transaction.setFromAddress(tx.getFrom());
  BigInteger value=Web3jUtil.isContractTx(tx) ? new BigInteger(tx.getInput().substring(tx.getInput().length() - 64),16) : tx.getValue();
  transaction.setNumber(Web3jUtil.getValue(value,transaction.getTokenId(),redisTemplate));
  transaction.setPoundage(0f);
  transaction.setRealNumber(transaction.getNumber());
  transactionMapper.insertSelective(transaction);
  updateBalance(transaction);
  this.transferBalance(transaction,coldUser);
}"
69045,"private void newListen() throws InterruptedException {
  Subscription subscribe=web3j.transactionObservable().subscribe(tx -> listenTx(tx,false),getOnError());
  while (true) {
    if (null == subscribe || subscribe.isUnsubscribed()) {
      Thread.sleep(10000);
      newListen();
    }
  }
}","private void newListen() throws InterruptedException {
  Subscription subscribe=null;
  try {
    subscribe=web3j.transactionObservable().subscribe(tx -> listenTx(tx,false),getOnError());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  while (true) {
    if (null == subscribe || subscribe.isUnsubscribed()) {
      Thread.sleep(10000);
      newListen();
    }
  }
}"
69046,"public PageInfo<TransactionVO> transaction(TransactionDTO transactionDTO){
  transactionDTO.setOrderId(StringUtils.isEmpty(transactionDTO.getOrderId()) ? null : transactionDTO.getOrderId());
  Transaction transaction=(Transaction)BeanUtil.copyProperties(transactionDTO,new Transaction());
  List<Transaction> list=transactionMapper.select(transaction);
  PageInfo pageInfo=new PageInfo(list);
  return (PageInfo<TransactionVO>)BeanUtil.beanList2VOList(pageInfo,TransactionVO.class);
}","public PageInfo<TransactionVO> transaction(TransactionDTO transactionDTO){
  transactionDTO.setOrderId(StringUtils.isEmpty(transactionDTO.getOrderId()) ? null : transactionDTO.getOrderId());
  Transaction transaction=(Transaction)BeanUtil.copyProperties(transactionDTO,new Transaction());
  List<Transaction> list=transactionMapper.select(transaction);
  PageInfo pageInfo=new PageInfo(list);
  PageInfo<TransactionVO> result=(PageInfo<TransactionVO>)BeanUtil.beanList2VOList(pageInfo,TransactionVO.class);
  result.getList().forEach(obj -> obj.setTokenName(configService.getNameByTokenId(obj.getTokenId())));
  return result;
}"
69047,"public void update(Config config){
  insert(config);
  configMapper.updateByPrimaryKeySelective(config);
}","public void update(Config config){
  insert(config);
  configMapper.updateByPrimaryKeySelective(config);
  setUnit(config.getId(),config.getDecimals());
}"
69048,"public void retire(BigInteger id,Integer retire){
  Project project=getNotNullById(id);
  Config config=configService.getConfigByTokenName(project.getTokenName());
  Boolean canRetire=project.getStatus().equals(2) && project.getRetire().equals(0) && config.getRechargeStatus().equals(0);
  Assert.isTrue(canRetire,MessageConstants.CANNOT_RETIRE);
  project.setRetire(1);
  projectMapper.updateByPrimaryKeySelective(project);
  projectMapper.retireBalance(id);
  projectMapper.retireToken(id,config.getId());
  orderService.updateStatusByProject(id,CommonConstants.ORDER_STATUS_RETIRE);
}","public void retire(BigInteger id,Integer retire){
  Project project=getNotNullById(id);
  Config config=configService.getConfigByTokenName(project.getTokenName());
  Boolean canRetire=project.getStatus().equals(2) && project.getRetire().equals(0) && config.getWithdrawStatus().equals(0);
  Assert.isTrue(canRetire,MessageConstants.CANNOT_RETIRE);
  project.setRetire(1);
  projectMapper.updateByPrimaryKeySelective(project);
  projectMapper.retireBalance(id);
  projectMapper.retireToken(id,config.getId());
  orderService.updateStatusByProject(id,CommonConstants.ORDER_STATUS_RETIRE);
}"
69049,"@Override @Async public void run(String... args) throws InterruptedException {
  transactionService.startListen();
}","@Override @Async public void run(String... args) throws InterruptedException {
  transactionService.initConfig();
  transactionService.startListen();
}"
69050,"@Update(""String_Node_Str"") void retireToken(BigInteger id,Integer orderStatusRetire);","@Update(""String_Node_Str"") void retireToken(@Param(""String_Node_Str"") BigInteger projectId,@Param(""String_Node_Str"") Integer orderStatus);"
69051,"public Map<String,String> doGetSignature(String dir) throws UnsupportedEncodingException {
  String host=""String_Node_Str"" + bucketName + ""String_Node_Str""+ endpoint;
  long expireTime=30;
  long expireEndTime=System.currentTimeMillis() + expireTime * 1000;
  Date expiration=new Date(expireEndTime);
  PolicyConditions policyConds=new PolicyConditions();
  policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE,0,1048576000);
  policyConds.addConditionItem(MatchMode.StartWith,PolicyConditions.COND_KEY,dir);
  String postPolicy=ossClient.generatePostPolicy(expiration,policyConds);
  byte[] binaryData=postPolicy.getBytes(""String_Node_Str"");
  String encodedPolicy=BinaryUtil.toBase64String(binaryData);
  String postSignature=ossClient.calculatePostSignature(postPolicy);
  Map<String,String> responseMap=new LinkedHashMap<String,String>();
  responseMap.put(""String_Node_Str"",accessKeyId);
  responseMap.put(""String_Node_Str"",encodedPolicy);
  responseMap.put(""String_Node_Str"",postSignature);
  responseMap.put(""String_Node_Str"",dir);
  responseMap.put(""String_Node_Str"",host);
  responseMap.put(""String_Node_Str"",String.valueOf(expireEndTime / 1000));
  return responseMap;
}","public Map<String,String> doGetSignature(String dir) throws UnsupportedEncodingException {
  String host=""String_Node_Str"" + bucketName + ""String_Node_Str""+ endpoint;
  long expireTime=300;
  long expireEndTime=System.currentTimeMillis() + expireTime * 1000;
  Date expiration=new Date(expireEndTime);
  PolicyConditions policyConds=new PolicyConditions();
  policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE,0,1048576000);
  policyConds.addConditionItem(MatchMode.StartWith,PolicyConditions.COND_KEY,dir);
  String postPolicy=ossClient.generatePostPolicy(expiration,policyConds);
  byte[] binaryData=postPolicy.getBytes(""String_Node_Str"");
  String encodedPolicy=BinaryUtil.toBase64String(binaryData);
  String postSignature=ossClient.calculatePostSignature(postPolicy);
  Map<String,String> responseMap=new LinkedHashMap<String,String>();
  responseMap.put(""String_Node_Str"",accessKeyId);
  responseMap.put(""String_Node_Str"",encodedPolicy);
  responseMap.put(""String_Node_Str"",postSignature);
  responseMap.put(""String_Node_Str"",dir);
  responseMap.put(""String_Node_Str"",host);
  responseMap.put(""String_Node_Str"",String.valueOf(expireEndTime / 1000));
  return responseMap;
}"
69052,"public TokenVO login(AdminDTO adminDTO){
  String username=adminDTO.getUsername();
  Admin admin=new Admin();
  String encrypt=encoder.encode(adminDTO.getPassword());
  admin.setUsername(username);
  admin=adminMapper.selectOne(admin);
  boolean result=encoder.matches(adminDTO.getPassword(),encrypt);
  Assert.isTrue(result,MessageConstants.PWD_ERR);
  Assert.isTrue(!CommonConstants.USER_FREEZE.equals(admin.getStatus()),""String_Node_Str"");
  redisTemplate.opsForValue().set(RedisConstants.USER_STATUS,admin.getStatus());
  String token=JwtHelper.createToken(username,admin.getId());
  String refreshToken=JwtHelper.createRefresh(username,admin.getId());
  return new TokenVO(token,refreshToken);
}","public TokenVO login(AdminDTO adminDTO){
  String username=adminDTO.getUsername();
  Admin admin=new Admin();
  String encrypt=encoder.encode(adminDTO.getPassword());
  admin.setUsername(username);
  admin=adminMapper.selectOne(admin);
  Assert.notNull(admin,MessageConstants.PWD_ERR);
  boolean result=encoder.matches(adminDTO.getPassword(),encrypt);
  Assert.isTrue(result,MessageConstants.PWD_ERR);
  Assert.isTrue(!CommonConstants.USER_FREEZE.equals(admin.getStatus()),""String_Node_Str"");
  redisTemplate.opsForValue().set(RedisConstants.USER_STATUS,admin.getStatus());
  String token=JwtHelper.createToken(username,admin.getId());
  String refreshToken=JwtHelper.createRefresh(username,admin.getId());
  return new TokenVO(token,refreshToken);
}"
69053,"String getOrderId(String type){
  Long sid=redisTemplate.opsForValue().increment(type,1);
  return type + sid;
}","String getOrderId(String type){
  Long sid=redisTemplate.opsForValue().increment(type,1);
  return type + String.format(""String_Node_Str"",sid);
}"
69054,"public void buy(BuyDTO buyDTO){
  Config config=new Config();
  config.setProjectId(buyDTO.getProjectId());
  config=configMapper.selectOne(config);
  Assert.notNull(config,CommonConstants.PROJECT_NOT_EXIST);
  ProjectVO project=get(buyDTO.getProjectId());
  Assert.notNull(project,CommonConstants.PROJECT_NOT_EXIST);
  Capital capital=new Capital();
  capital.setUserId(getUserId());
  capital.setTokenId(config.getId());
  Capital capitalTemp=capitalMapper.selectOne(capital);
  BigDecimal balance=buyDTO.getEthNumber().multiply(new BigDecimal(project.getRatio()));
  if (null == capitalTemp) {
    capitalTemp=capital;
    capitalTemp.setBalance(balance);
    capitalMapper.insert(capital);
  }
 else {
    capitalMapper.updateBalance(getUserId(),config.getId(),balance);
  }
  Capital ethCapital=new Capital();
  ethCapital.setUserId(getUserId());
  ethCapital.setTokenId(BigInteger.ZERO);
  Integer result=capitalMapper.updateEth(getUserId(),buyDTO.getEthNumber());
  Assert.isTrue(result > 0,CommonConstants.ETH_NOT_ENOUGH);
  addOrder(buyDTO,balance);
  Account account=accountService.getAccount(getUserId());
  Integer orderNum=account.getOrderNum();
  orderNum=null == orderNum ? 1 : orderNum++;
  account.setOrderNum(orderNum);
  accountService.update(account);
}","public void buy(BuyDTO buyDTO){
  Config config=new Config();
  config.setProjectId(buyDTO.getProjectId());
  config=configMapper.selectOne(config);
  Assert.notNull(config,CommonConstants.PROJECT_NOT_EXIST);
  ProjectVO project=get(buyDTO.getProjectId());
  Assert.notNull(project,CommonConstants.PROJECT_NOT_EXIST);
  BigDecimal sold=getSold(buyDTO.getProjectId()).getSoldEth();
  Assert.isTrue(sold.add(buyDTO.getEthNumber()).compareTo(project.getEthNumber()) < 0,MessageConstants.ETH_OVER);
  Capital capital=new Capital();
  capital.setUserId(getUserId());
  capital.setTokenId(config.getId());
  Capital capitalTemp=capitalMapper.selectOne(capital);
  BigDecimal balance=buyDTO.getEthNumber().multiply(new BigDecimal(project.getRatio()));
  if (null == capitalTemp) {
    capitalTemp=capital;
    capitalTemp.setBalance(balance);
    capitalMapper.insert(capital);
  }
 else {
    capitalMapper.updateBalance(getUserId(),config.getId(),balance);
  }
  Capital ethCapital=new Capital();
  ethCapital.setUserId(getUserId());
  ethCapital.setTokenId(BigInteger.ZERO);
  Integer result=capitalMapper.updateEth(getUserId(),buyDTO.getEthNumber());
  Assert.isTrue(result > 0,CommonConstants.ETH_NOT_ENOUGH);
  addOrder(buyDTO,balance);
  Account account=accountService.getAccount(getUserId());
  Integer orderNum=account.getOrderNum();
  orderNum=null == orderNum ? 1 : ++orderNum;
  account.setOrderNum(orderNum);
  accountService.update(account);
}"
69055,"private void updateSold(BigInteger projectId,BigDecimal ethNumber,BigDecimal balance){
  ProjectSold projectSold=new ProjectSold();
  projectSold.setId(projectId);
  projectSold.setSoldEth(ethNumber);
  projectMapper.updateSoldBalance(projectSold);
}","private void updateSold(BigInteger projectId,BigDecimal ethNumber,BigDecimal balance){
  Orders orders=new Orders();
  orders.setUserId(getUserId());
  Integer orderNum=orderMapper.selectCount(orders);
  Integer buyerNum=orderNum == 1 ? 1 : 0;
  ProjectSold projectSold=new ProjectSold();
  projectSold.setId(projectId);
  projectSold.setSoldEth(ethNumber);
  projectSold.setBuyerNum(buyerNum);
  projectMapper.updateSoldBalance(projectSold);
}"
69056,"public void withdraw(WithdrawDTO withdrawDTO){
  checkAccount(withdrawDTO);
  Config config=getConfig(withdrawDTO.getTokenName());
  Assert.notNull(config,CommonConstants.TOKEN_ERR);
  checkCanWithdraw(withdrawDTO,config);
  checkEthBalance(withdrawDTO,config);
  Transaction transaction=new Transaction();
  transaction.setStatus(0);
  transaction.setNumber(withdrawDTO.getNumber());
  transaction.setOrderId(getOrderId(CommonConstants.ORDER_WITHDRAW));
  transaction.setPoundage(config.getPoundage());
  transaction.setRealNumber(withdrawDTO.getNumber().subtract(BigDecimal.valueOf(config.getPoundage())));
  transaction.setToAddress(withdrawDTO.getAddress());
  transaction.setType(CommonConstants.WITHDRAW);
  transaction.setUserId(getUserId());
  transaction.setFromAddress(defaultUser);
  transactionMapper.insert(transaction);
  capitalMapper.updateBalance(getUserId(),config.getId(),BigDecimal.ZERO.multiply(withdrawDTO.getNumber()));
}","public void withdraw(WithdrawDTO withdrawDTO){
  checkAccount(withdrawDTO);
  Config config=getConfig(withdrawDTO.getTokenName());
  Assert.notNull(config,CommonConstants.TOKEN_ERR);
  checkCanWithdraw(withdrawDTO,config);
  checkEthBalance(withdrawDTO,config);
  Transaction transaction=new Transaction();
  transaction.setStatus(0);
  transaction.setNumber(withdrawDTO.getNumber());
  transaction.setOrderId(getOrderId(CommonConstants.ORDER_WITHDRAW));
  transaction.setPoundage(config.getPoundage());
  transaction.setRealNumber(withdrawDTO.getNumber().subtract(BigDecimal.valueOf(config.getPoundage())));
  transaction.setToAddress(withdrawDTO.getAddress());
  transaction.setType(CommonConstants.WITHDRAW);
  transaction.setUserId(getUserId());
  transaction.setTokenId(config.getId());
  transaction.setFromAddress(defaultUser);
  transactionMapper.insert(transaction);
  capitalMapper.updateBalance(getUserId(),config.getId(),BigDecimal.ZERO.multiply(withdrawDTO.getNumber()));
}"
69057,"public void updateStatus(BigInteger orderId,Integer orderStatus){
  Orders orders=new Orders();
  orders.setId(orderId);
  orders=orderMapper.selectByPrimaryKey(orderId);
  Assert.isTrue(orders.getOrderStatus() == 0,MessageConstants.CANNOT_CANCEL);
  orders.setOrderStatus(orderStatus);
  orderMapper.updateByPrimaryKeySelective(orders);
  tokenSoldMapper.updateEth(orders.getProjectId(),orders.getEthNumber());
}","public void updateStatus(BigInteger orderId,Integer orderStatus){
  Orders orders=new Orders();
  orders.setId(orderId);
  orders=orderMapper.selectByPrimaryKey(orderId);
  Assert.isTrue(orders.getOrderStatus() == 0,MessageConstants.CANNOT_CANCEL);
  orders.setOrderStatus(orderStatus);
  orderMapper.updateByPrimaryKeySelective(orders);
  tokenSoldMapper.updateEth(orders.getProjectId(),orders.getEthNumber());
  capitalMapper.updateBalance(orders.getUserId(),BigInteger.ZERO,orders.getEthNumber());
}"
69058,"@Async public void transferBalance(Transaction transaction){
  try {
    EthGetBalance result=web3j.ethGetBalance(transaction.getToAddress(),DefaultBlockParameterName.LATEST).send();
    BigInteger needBalance=TransactionService.DEFAULT_GAS_LIMIT.multiply(TransactionService.DEFAULT_GAS_PRICE);
    BigInteger sendBalance=result.getBalance().subtract(needBalance);
    if (sendGasIfNull(transaction,result,needBalance)) {
      return;
    }
    String contractAddress=getContractAddressByTokenId(transaction);
    if (!transaction.getTokenId().equals(0)) {
      sendBalance=contractService.balanceOf(contractAddress,transaction.getToAddress());
    }
    sendTransaction(transaction.getToAddress(),defaultUser,contractAddress,sendBalance,false);
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(e.getMessage());
  }
}","@Async public void transferBalance(Transaction transaction){
  try {
    EthGetBalance result=web3j.ethGetBalance(transaction.getToAddress(),DefaultBlockParameterName.LATEST).send();
    BigInteger needBalance=TransactionService.DEFAULT_GAS_LIMIT.multiply(TransactionService.DEFAULT_GAS_PRICE);
    BigInteger sendBalance=result.getBalance().subtract(needBalance);
    if (sendGasIfNull(transaction,result,needBalance)) {
      return;
    }
    String contractAddress=getContractAddressByTokenId(transaction);
    if (!transaction.getTokenId().equals(BigInteger.ZERO)) {
      sendBalance=contractService.balanceOf(contractAddress,transaction.getToAddress());
    }
    sendTransaction(transaction.getToAddress(),defaultUser,contractAddress,sendBalance,false);
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(e.getMessage());
  }
}"
69059,"private void updateBalance(Transaction transaction){
  Capital capital=new Capital();
  capital.setUserId(transaction.getUserId());
  capital.setTokenId(transaction.getTokenId());
  Capital capitalTemp=capitalMapper.selectOne(capital);
  if (null == capitalTemp) {
    capitalMapper.insert(capital);
  }
  capitalMapper.updateBalance(transaction.getUserId(),transaction.getTokenId(),transaction.getNumber());
}","private void updateBalance(Transaction transaction){
  Capital capital=new Capital();
  capital.setUserId(transaction.getUserId());
  capital.setTokenId(transaction.getTokenId());
  Capital capitalTemp=capitalMapper.selectOne(capital);
  if (null == capitalTemp) {
    capital.setBalance(transaction.getNumber());
    capitalMapper.insert(capital);
  }
 else {
    capitalMapper.updateBalance(transaction.getUserId(),transaction.getTokenId(),transaction.getNumber());
  }
}"
69060,"private void updateSold(BigInteger projectId,BigDecimal ethNumber,BigDecimal balance){
  Orders orders=new Orders();
  orders.setUserId(getUserId());
  orders.setProjectId(projectId);
  Integer orderNum=orderMapper.selectCount(orders);
  Integer buyerNum=orderNum == 0 ? 1 : 0;
  ProjectSold projectSold=new ProjectSold();
  projectSold.setId(projectId);
  projectSold.setSoldEth(ethNumber);
  projectSold.setBuyerNum(buyerNum);
  projectMapper.updateSoldBalance(projectSold);
}","private void updateSold(BigInteger projectId,BigDecimal ethNumber,BigDecimal balance){
  Orders orders=new Orders();
  orders.setUserId(getUserId());
  orders.setProjectId(projectId);
  Integer orderNum=orderMapper.selectCount(orders);
  Integer buyerNum=orderNum == 1 ? 1 : 0;
  ProjectSold projectSold=new ProjectSold();
  projectSold.setId(projectId);
  projectSold.setSoldEth(ethNumber);
  projectSold.setBuyerNum(buyerNum);
  projectMapper.updateSoldBalance(projectSold);
}"
69061,"private void addressHandler(org.web3j.protocol.core.methods.response.Transaction tx){
  String to=Web3jUtil.getTo(tx);
  String key=RedisConstants.LISTEN_ETH_ADDR + ""String_Node_Str"" + to;
  String hash=tx.getHash();
  BigInteger userId=(BigInteger)redisTemplate.opsForValue().get(key);
  if (null == userId) {
    return;
  }
  if (existHash(hash)) {
    return;
  }
  BigInteger tokenId=getTokenId(tx);
  Config config=configService.get(tokenId);
  if (null == config) {
    return;
  }
  Transaction transaction=new Transaction();
  transaction.setHash(hash);
  transaction.setUserId(userId);
  transaction.setTokenId(tokenId);
  transaction.setOrderId(getOrderId(CommonConstants.ORDER_RECHARGE));
  transaction.setType(CommonConstants.RECHARGE);
  transaction.setStatus(CommonConstants.STATUS_SUCCESS);
  transaction.setToAddress(to);
  transaction.setFromAddress(tx.getFrom());
  transaction.setNumber(Web3jUtil.getValue(tx.getValue(),transaction.getTokenId(),redisTemplate));
  transaction.setPoundage(0f);
  transaction.setRealNumber(transaction.getNumber());
  transactionMapper.insertSelective(transaction);
  capitalMapper.updateBalance(transaction.getUserId(),transaction.getTokenId(),transaction.getNumber());
  this.transferBalance(transaction);
}","private void addressHandler(org.web3j.protocol.core.methods.response.Transaction tx){
  String to=Web3jUtil.getTo(tx);
  String key=RedisConstants.LISTEN_ETH_ADDR + ""String_Node_Str"" + to;
  String hash=tx.getHash();
  BigInteger userId=(BigInteger)redisTemplate.opsForValue().get(key);
  if (null == userId) {
    return;
  }
  if (existHash(hash)) {
    return;
  }
  BigInteger tokenId=getTokenId(tx);
  Config config=configService.get(tokenId);
  if (null == config) {
    return;
  }
  Transaction transaction=new Transaction();
  transaction.setHash(hash);
  transaction.setUserId(userId);
  transaction.setTokenId(tokenId);
  transaction.setOrderId(getOrderId(CommonConstants.ORDER_RECHARGE));
  transaction.setType(CommonConstants.RECHARGE);
  transaction.setStatus(CommonConstants.STATUS_SUCCESS);
  transaction.setToAddress(to);
  transaction.setFromAddress(tx.getFrom());
  transaction.setNumber(Web3jUtil.getValue(tx.getValue(),transaction.getTokenId(),redisTemplate));
  transaction.setPoundage(0f);
  transaction.setRealNumber(transaction.getNumber());
  transactionMapper.insertSelective(transaction);
  updateBalance(transaction);
  this.transferBalance(transaction);
}"
69062,"@Async public void transferBalance(Transaction transaction){
  try {
    EthGetBalance result=web3j.ethGetBalance(transaction.getToAddress(),DefaultBlockParameterName.LATEST).send();
    BigInteger needBalance=TransactionService.DEFAULT_GAS_LIMIT.multiply(TransactionService.DEFAULT_GAS_PRICE);
    BigInteger sendBalance=result.getBalance().subtract(needBalance);
    if (sendGasIfNull(transaction,result,needBalance)) {
      return;
    }
    String contractAddress=getContractAddressByTokenId(transaction);
    if (!transaction.getTokenId().equals(0)) {
      sendBalance=contractService.balanceOf(contractAddress,transaction.getToAddress());
    }
    sendTransaction(transaction.getToAddress(),defaultUser,contractAddress,sendBalance,false);
  }
 catch (  Exception e) {
    log.error(e.getMessage());
  }
}","@Async public void transferBalance(Transaction transaction){
  try {
    EthGetBalance result=web3j.ethGetBalance(transaction.getToAddress(),DefaultBlockParameterName.LATEST).send();
    BigInteger needBalance=TransactionService.DEFAULT_GAS_LIMIT.multiply(TransactionService.DEFAULT_GAS_PRICE);
    BigInteger sendBalance=result.getBalance().subtract(needBalance);
    if (sendGasIfNull(transaction,result,needBalance)) {
      return;
    }
    String contractAddress=getContractAddressByTokenId(transaction);
    if (!transaction.getTokenId().equals(0)) {
      sendBalance=contractService.balanceOf(contractAddress,transaction.getToAddress());
    }
    sendTransaction(transaction.getToAddress(),defaultUser,contractAddress,sendBalance,false);
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(e.getMessage());
  }
}"
69063,"public void buy(BuyDTO buyDTO){
  Account account=accountService.getAccount(getUserId());
  Assert.isTrue(encoder.matches(buyDTO.getTransactionPassword(),account.getPassword()),MessageConstants.TRANSFER_PWD_ERR);
  ProjectVO project=get(buyDTO.getProjectId());
  Assert.notNull(project,CommonConstants.PROJECT_NOT_EXIST);
  BigDecimal sold=getSold(buyDTO.getProjectId()).getSoldEth();
  Assert.isTrue(sold.add(buyDTO.getEthNumber()).compareTo(project.getEthNumber()) < 0,MessageConstants.ETH_OVER);
  BigDecimal balance=buyDTO.getEthNumber().multiply(new BigDecimal(project.getRatio()));
  Capital ethCapital=new Capital();
  ethCapital.setUserId(getUserId());
  ethCapital.setTokenId(BigInteger.ZERO);
  Integer result=capitalMapper.updateEth(getUserId(),buyDTO.getEthNumber());
  Assert.isTrue(result > 0,CommonConstants.ETH_NOT_ENOUGH);
  addOrder(buyDTO,balance);
  Integer orderNum=account.getOrderNum();
  orderNum=null == orderNum ? 1 : ++orderNum;
  account.setOrderNum(orderNum);
  accountService.update(account);
  String key=RedisConstants.USER_PROJECTS + ""String_Node_Str"" + getUserId();
  redisTemplate.opsForValue().set(key,orderMapper.getUserProject(getUserId()));
}","public void buy(BuyDTO buyDTO){
  Account account=accountService.getAccount(getUserId());
  Assert.isTrue(encoder.matches(buyDTO.getTransactionPassword(),account.getTransactionPassword()),MessageConstants.TRANSFER_PWD_ERR);
  ProjectVO project=get(buyDTO.getProjectId());
  Assert.notNull(project,CommonConstants.PROJECT_NOT_EXIST);
  BigDecimal sold=getSold(buyDTO.getProjectId()).getSoldEth();
  Assert.isTrue(sold.add(buyDTO.getEthNumber()).compareTo(project.getEthNumber()) < 0,MessageConstants.ETH_OVER);
  BigDecimal balance=buyDTO.getEthNumber().multiply(new BigDecimal(project.getRatio()));
  Capital ethCapital=new Capital();
  ethCapital.setUserId(getUserId());
  ethCapital.setTokenId(BigInteger.ZERO);
  Integer result=capitalMapper.updateEth(getUserId(),buyDTO.getEthNumber());
  Assert.isTrue(result > 0,CommonConstants.ETH_NOT_ENOUGH);
  addOrder(buyDTO,balance);
  Integer orderNum=account.getOrderNum();
  orderNum=null == orderNum ? 1 : ++orderNum;
  account.setOrderNum(orderNum);
  accountService.update(account);
  String key=RedisConstants.USER_PROJECTS + ""String_Node_Str"" + getUserId();
  redisTemplate.opsForValue().set(key,orderMapper.getUserProject(getUserId()));
}"
69064,"public void buy(BuyDTO buyDTO){
  Account account=accountService.getAccount(getUserId());
  Assert.isTrue(encoder.matches(buyDTO.getTransactionPassword(),account.getTransactionPassword()),MessageConstants.TRANSFER_PWD_ERR);
  ProjectVO project=get(buyDTO.getProjectId());
  Assert.notNull(project,CommonConstants.PROJECT_NOT_EXIST);
  BigDecimal sold=getSold(buyDTO.getProjectId()).getSoldEth();
  Assert.isTrue(sold.add(buyDTO.getEthNumber()).compareTo(project.getEthNumber()) < 0,MessageConstants.ETH_OVER);
  BigDecimal balance=buyDTO.getEthNumber().multiply(new BigDecimal(project.getRatio()));
  Capital ethCapital=new Capital();
  ethCapital.setUserId(getUserId());
  ethCapital.setTokenId(BigInteger.ZERO);
  Integer result=capitalMapper.updateEth(getUserId(),buyDTO.getEthNumber());
  Assert.isTrue(result > 0,CommonConstants.ETH_NOT_ENOUGH);
  addOrder(buyDTO,balance);
  Integer orderNum=account.getOrderNum();
  orderNum=null == orderNum ? 1 : ++orderNum;
  account.setOrderNum(orderNum);
  accountService.update(account);
  String key=RedisConstants.USER_PROJECTS + ""String_Node_Str"" + getUserId();
  redisTemplate.opsForValue().set(key,orderMapper.getUserProject(getUserId()));
}","public void buy(BuyDTO buyDTO){
  Account account=accountService.getAccount(getUserId());
  Assert.isTrue(encoder.matches(buyDTO.getTransactionPassword(),account.getTransactionPassword()),MessageConstants.TRANSFER_PWD_ERR);
  ProjectVO project=get(buyDTO.getProjectId());
  Assert.notNull(project,CommonConstants.PROJECT_NOT_EXIST);
  BigDecimal sold=getSold(buyDTO.getProjectId()).getSoldEth();
  Assert.isTrue(sold.add(buyDTO.getEthNumber()).compareTo(project.getEthNumber()) <= 0,MessageConstants.ETH_OVER);
  BigDecimal balance=buyDTO.getEthNumber().multiply(new BigDecimal(project.getRatio()));
  Capital ethCapital=new Capital();
  ethCapital.setUserId(getUserId());
  ethCapital.setTokenId(BigInteger.ZERO);
  Integer result=capitalMapper.updateEth(getUserId(),buyDTO.getEthNumber());
  Assert.isTrue(result > 0,CommonConstants.ETH_NOT_ENOUGH);
  addOrder(buyDTO,balance);
  Integer orderNum=account.getOrderNum();
  orderNum=null == orderNum ? 1 : ++orderNum;
  account.setOrderNum(orderNum);
  accountService.update(account);
  String key=RedisConstants.USER_PROJECTS + ""String_Node_Str"" + getUserId();
  redisTemplate.opsForValue().set(key,orderMapper.getUserProject(getUserId()));
}"
69065,"public void withdraw(WithdrawDTO withdrawDTO){
  checkAccount(withdrawDTO);
  Config config=getConfig(withdrawDTO.getTokenName());
  Assert.notNull(config,CommonConstants.TOKEN_ERR);
  checkCanWithdraw(withdrawDTO,config);
  checkEthBalance(withdrawDTO,config);
  Transaction transaction=new Transaction();
  transaction.setStatus(0);
  transaction.setNumber(withdrawDTO.getNumber());
  transaction.setOrderId(getOrderId(CommonConstants.ORDER_WITHDRAW));
  transaction.setPoundage(config.getPoundage());
  transaction.setRealNumber(withdrawDTO.getNumber().subtract(BigDecimal.valueOf(config.getPoundage())));
  transaction.setToAddress(withdrawDTO.getAddress());
  transaction.setType(CommonConstants.WITHDRAW);
  transaction.setUserId(getUserId());
  transaction.setTokenId(config.getId());
  transaction.setFromAddress(defaultUser);
  transactionMapper.insert(transaction);
  capitalMapper.updateBalance(getUserId(),config.getId(),BigDecimal.ZERO.multiply(withdrawDTO.getNumber()));
}","public void withdraw(WithdrawDTO withdrawDTO){
  checkAccount(withdrawDTO);
  Config config=getConfig(withdrawDTO.getTokenName());
  Assert.notNull(config,CommonConstants.TOKEN_ERR);
  checkCanWithdraw(withdrawDTO,config);
  checkEthBalance(withdrawDTO,config);
  Transaction transaction=new Transaction();
  transaction.setStatus(0);
  transaction.setNumber(withdrawDTO.getNumber());
  transaction.setOrderId(getOrderId(CommonConstants.ORDER_WITHDRAW));
  transaction.setPoundage(config.getPoundage());
  transaction.setRealNumber(withdrawDTO.getNumber().subtract(BigDecimal.valueOf(config.getPoundage())));
  transaction.setToAddress(withdrawDTO.getAddress());
  transaction.setType(CommonConstants.WITHDRAW);
  transaction.setUserId(getUserId());
  transaction.setTokenId(config.getId());
  transaction.setFromAddress(defaultUser);
  transactionMapper.insert(transaction);
  capitalMapper.updateBalance(getUserId(),config.getId(),BigDecimal.ZERO.subtract(withdrawDTO.getNumber()));
}"
69066,"private void updateSold(BigInteger projectId,BigDecimal ethNumber,BigDecimal balance){
  Orders orders=new Orders();
  orders.setUserId(getUserId());
  Integer orderNum=orderMapper.selectCount(orders);
  Integer buyerNum=orderNum == 1 ? 1 : 0;
  ProjectSold projectSold=new ProjectSold();
  projectSold.setId(projectId);
  projectSold.setSoldEth(ethNumber);
  projectSold.setBuyerNum(buyerNum);
  projectMapper.updateSoldBalance(projectSold);
}","private void updateSold(BigInteger projectId,BigDecimal ethNumber,BigDecimal balance){
  Orders orders=new Orders();
  orders.setUserId(getUserId());
  orders.setProjectId(projectId);
  Integer orderNum=orderMapper.selectCount(orders);
  Integer buyerNum=orderNum == 0 ? 1 : 0;
  ProjectSold projectSold=new ProjectSold();
  projectSold.setId(projectId);
  projectSold.setSoldEth(ethNumber);
  projectSold.setBuyerNum(buyerNum);
  projectMapper.updateSoldBalance(projectSold);
}"
69067,"private void hashHandler(org.web3j.protocol.core.methods.response.Transaction tx){
  try {
    String key=RedisConstants.LISTEN_HASH + ""String_Node_Str"" + tx.getHash();
    String hash=tx.getHash();
    if (!redisTemplate.hasKey(key)) {
      return;
    }
    Transaction transaction=new Transaction();
    transaction.setHash(hash);
    transaction=transactionMapper.selectOne(transaction);
    if (null == transaction) {
      return;
    }
    if (web3j.ethGetTransactionByHash(hash).send().hasError()) {
      transaction.setStatus(CommonConstants.ERROR);
    }
 else {
      transaction.setStatus(CommonConstants.STATUS_SUCCESS);
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
}","private void hashHandler(org.web3j.protocol.core.methods.response.Transaction tx){
  try {
    String key=RedisConstants.LISTEN_HASH + ""String_Node_Str"" + tx.getHash();
    String hash=tx.getHash();
    if (!redisTemplate.hasKey(key)) {
      return;
    }
    Transaction transaction=new Transaction();
    transaction.setHash(hash);
    transaction=transactionMapper.selectOne(transaction);
    if (null == transaction) {
      return;
    }
    if (web3j.ethGetTransactionByHash(hash).send().hasError()) {
      transaction.setStatus(CommonConstants.ERROR);
    }
 else {
      transaction.setStatus(CommonConstants.STATUS_SUCCESS);
    }
    transactionMapper.updateByPrimaryKeySelective(transaction);
    redisTemplate.delete(key);
  }
 catch (  Exception e) {
    log.error(e);
  }
}"
69068,"public void approval(BigInteger id,Integer status) throws Exception {
  Transaction transaction=new Transaction();
  transaction.setId(id);
  transaction.setStatus(status);
  transactionMapper.updateByPrimaryKeySelective(transaction);
  setBalance(id,status);
  sendValue(id,status);
}","public void approval(BigInteger id,Integer status) throws Exception {
  Assert.isTrue(status != 2,MessageConstants.STATUS_ERROR);
  Transaction transaction=new Transaction();
  transaction.setId(id);
  transaction.setStatus(status);
  transactionMapper.updateByPrimaryKeySelective(transaction);
  setBalance(id,status);
  sendValue(id,status);
}"
69069,"private String getContractAddressByTokenId(Transaction transaction){
  String contractAddress=null;
  if (!transaction.getTokenId().equals(0)) {
    Project project=projectService.getByTokenId(transaction.getTokenId());
    contractAddress=project.getContractAddress();
  }
  return contractAddress;
}","private String getContractAddressByTokenId(Transaction transaction){
  String contractAddress=null;
  if (!transaction.getTokenId().equals(BigInteger.ZERO)) {
    Project project=projectService.getByTokenId(transaction.getTokenId());
    contractAddress=project.getContractAddress();
  }
  return contractAddress;
}"
69070,"private void sendValue(BigInteger id,Integer status) throws Exception {
  if (status.equals(1)) {
    Transaction transaction=new Transaction();
    transaction.setId(id);
    transaction=transactionMapper.selectByPrimaryKey(transaction);
    String contractAddress=null;
    BigInteger value=Web3jUtil.getWei(transaction.getRealNumber(),transaction.getTokenId(),redisTemplate);
    contractAddress=getContractAddressByTokenId(transaction);
    sendTransaction(defaultUser,transaction.getToAddress(),contractAddress,value,true);
  }
}","private void sendValue(BigInteger id,Integer status) throws Exception {
  if (status.equals(1)) {
    Transaction transaction=new Transaction();
    transaction.setId(id);
    transaction=transactionMapper.selectByPrimaryKey(transaction);
    String contractAddress=null;
    BigInteger value=Web3jUtil.getWei(transaction.getRealNumber(),transaction.getTokenId(),redisTemplate);
    contractAddress=getContractAddressByTokenId(transaction);
    String hash=sendTransaction(defaultUser,transaction.getToAddress(),contractAddress,value,true);
    transaction.setHash(hash);
    transactionMapper.updateByPrimaryKeySelective(transaction);
  }
}"
69071,"private void sendTransaction(String fromAddress,String toAddress,String contractAddress,BigInteger realNumber,Boolean listen) throws Exception {
  PersonalUnlockAccount flag=admin.personalUnlockAccount(fromAddress,password).send();
  Assert.isTrue(flag.accountUnlocked(),""String_Node_Str"");
  org.web3j.protocol.core.methods.request.Transaction transaction=new org.web3j.protocol.core.methods.request.Transaction(fromAddress,null,DEFAULT_GAS_PRICE,DEFAULT_GAS_LIMIT,toAddress,realNumber,null);
  EthSendTransaction result=null;
  if (null == contractAddress) {
    result=web3j.ethSendTransaction(transaction).send();
  }
 else {
    result=contractService.eth_sendTransaction(transaction,contractAddress);
  }
  Assert.isTrue(result != null && !result.hasError(),null == result ? ""String_Node_Str"" : result.getError().getMessage());
  if (listen) {
    redisTemplate.opsForValue().set(RedisConstants.LISTEN_HASH + ""String_Node_Str"" + result.getTransactionHash(),1);
  }
}","private String sendTransaction(String fromAddress,String toAddress,String contractAddress,BigInteger realNumber,Boolean listen) throws Exception {
  PersonalUnlockAccount flag=admin.personalUnlockAccount(fromAddress,password).send();
  Assert.isTrue(flag.accountUnlocked(),""String_Node_Str"");
  org.web3j.protocol.core.methods.request.Transaction transaction=new org.web3j.protocol.core.methods.request.Transaction(fromAddress,null,DEFAULT_GAS_PRICE,DEFAULT_GAS_LIMIT,toAddress,realNumber,null);
  EthSendTransaction result=null;
  if (null == contractAddress) {
    result=web3j.ethSendTransaction(transaction).send();
  }
 else {
    result=contractService.eth_sendTransaction(transaction,contractAddress);
  }
  Assert.isTrue(result != null && !result.hasError(),null != result.getError() ? result.getError().getMessage() : ""String_Node_Str"");
  if (listen) {
    redisTemplate.opsForValue().set(RedisConstants.LISTEN_HASH + ""String_Node_Str"" + result.getTransactionHash(),1);
  }
  return result.getTransactionHash();
}"
69072,"@Update(""String_Node_Str"") void sendToken(@Param(""String_Node_Str"") BigInteger userId,@Param(""String_Node_Str"") BigInteger projectId,@Param(""String_Node_Str"") BigInteger tokenId);","@Insert(""String_Node_Str"") void sendToken(@Param(""String_Node_Str"") BigInteger projectId,@Param(""String_Node_Str"") BigInteger tokenId);"
69073,"public void sendToken(BigInteger id,Integer sendToken){
  Project project=getNotNullById(id);
  Config config=configService.getConfigByTokenName(project.getTokenName());
  Boolean canSend=project.getStatus().equals(2) && project.getSendToken() == 0;
  Assert.isTrue(canSend,MessageConstants.CANNOT_SEND_TOKEN);
  project.setSendToken(1);
  projectMapper.updateByPrimaryKeySelective(project);
  orderService.updateStatusByProject(id,CommonConstants.ORDER_STATUS_SEND_TOKEN);
  projectMapper.sendToken(getUserId(),id,config.getId());
}","public void sendToken(BigInteger id,Integer sendToken){
  Project project=getNotNullById(id);
  Config config=configService.getConfigByTokenName(project.getTokenName());
  Boolean canSend=project.getStatus().equals(2) && project.getSendToken() == 0;
  Assert.isTrue(canSend,MessageConstants.CANNOT_SEND_TOKEN);
  project.setSendToken(1);
  projectMapper.updateByPrimaryKeySelective(project);
  projectMapper.sendToken(id,config.getId());
  orderService.updateStatusByProject(id,CommonConstants.ORDER_STATUS_SEND_TOKEN);
}"
69074,"public void insert(Config config){
  configMapper.insertSelective(config);
}","public void insert(Config config){
  String tokenName=config.getTokenName();
  Config configTemp=getConfigByTokenName(tokenName);
  if (null != configTemp) {
    config.setId(configTemp.getId());
    return;
  }
  configMapper.insertSelective(config);
  setUnit(config.getId(),config.getDecimals());
}"
69075,"public void update(Config config){
  configMapper.updateByPrimaryKeySelective(config);
}","public void update(Config config){
  insert(config);
  configMapper.updateByPrimaryKeySelective(config);
}"
69076,"public void updateStatus(BigInteger orderId,Integer orderStatus){
  Orders orders=new Orders();
  orders.setId(orderId);
  orders=orderMapper.selectByPrimaryKey(orderId);
  Assert.isTrue(orders.getOrderStatus() == 0,MessageConstants.CANNOT_CANCEL);
  orders.setOrderStatus(orderStatus);
  orderMapper.updateByPrimaryKeySelective(orders);
  Config config=configService.getByPorjectId(orders.getProjectId());
  tokenSoldMapper.updateEth(orders.getProjectId(),orders.getEthNumber());
}","public void updateStatus(BigInteger orderId,Integer orderStatus){
  Orders orders=new Orders();
  orders.setId(orderId);
  orders=orderMapper.selectByPrimaryKey(orderId);
  Assert.isTrue(orders.getOrderStatus() == 0,MessageConstants.CANNOT_CANCEL);
  orders.setOrderStatus(orderStatus);
  orderMapper.updateByPrimaryKeySelective(orders);
  tokenSoldMapper.updateEth(orders.getProjectId(),orders.getEthNumber());
}"
69077,"public void buy(BuyDTO buyDTO){
  Config config=new Config();
  config.setProjectId(buyDTO.getProjectId());
  config=configMapper.selectOne(config);
  Assert.notNull(config,CommonConstants.PROJECT_NOT_EXIST);
  ProjectVO project=get(buyDTO.getProjectId());
  Assert.notNull(project,CommonConstants.PROJECT_NOT_EXIST);
  BigDecimal sold=getSold(buyDTO.getProjectId()).getSoldEth();
  Assert.isTrue(sold.add(buyDTO.getEthNumber()).compareTo(project.getEthNumber()) < 0,MessageConstants.ETH_OVER);
  Capital capital=new Capital();
  capital.setUserId(getUserId());
  capital.setTokenId(config.getId());
  Capital capitalTemp=capitalMapper.selectOne(capital);
  BigDecimal balance=buyDTO.getEthNumber().multiply(new BigDecimal(project.getRatio()));
  if (null == capitalTemp) {
    capitalTemp=capital;
    capitalTemp.setBalance(balance);
    capitalMapper.insert(capital);
  }
 else {
    capitalMapper.updateBalance(getUserId(),config.getId(),balance);
  }
  Capital ethCapital=new Capital();
  ethCapital.setUserId(getUserId());
  ethCapital.setTokenId(BigInteger.ZERO);
  Integer result=capitalMapper.updateEth(getUserId(),buyDTO.getEthNumber());
  Assert.isTrue(result > 0,CommonConstants.ETH_NOT_ENOUGH);
  addOrder(buyDTO,balance);
  Account account=accountService.getAccount(getUserId());
  Integer orderNum=account.getOrderNum();
  orderNum=null == orderNum ? 1 : ++orderNum;
  account.setOrderNum(orderNum);
  accountService.update(account);
}","public void buy(BuyDTO buyDTO){
  ProjectVO project=get(buyDTO.getProjectId());
  Assert.notNull(project,CommonConstants.PROJECT_NOT_EXIST);
  BigDecimal sold=getSold(buyDTO.getProjectId()).getSoldEth();
  Assert.isTrue(sold.add(buyDTO.getEthNumber()).compareTo(project.getEthNumber()) < 0,MessageConstants.ETH_OVER);
  BigDecimal balance=buyDTO.getEthNumber().multiply(new BigDecimal(project.getRatio()));
  Capital ethCapital=new Capital();
  ethCapital.setUserId(getUserId());
  ethCapital.setTokenId(BigInteger.ZERO);
  Integer result=capitalMapper.updateEth(getUserId(),buyDTO.getEthNumber());
  Assert.isTrue(result > 0,CommonConstants.ETH_NOT_ENOUGH);
  addOrder(buyDTO,balance);
  Account account=accountService.getAccount(getUserId());
  Integer orderNum=account.getOrderNum();
  orderNum=null == orderNum ? 1 : ++orderNum;
  account.setOrderNum(orderNum);
  accountService.update(account);
  String key=RedisConstants.USER_PROJECTS + ""String_Node_Str"" + getUserId();
  redisTemplate.opsForValue().set(key,orderMapper.getUserProject(getUserId()));
}"
69078,"public void insert(ProjectDTO projectDTO){
  Project project=(Project)BeanUtil.copyProperties(projectDTO,new Project());
  checkTokenName(projectDTO.getTokenName(),projectDTO.getId());
  projectMapper.insertSelective(project);
  Config config=new Config();
  config.setProjectId(project.getId());
  config.setTokenName(project.getTokenName());
  configService.insert(config);
  setUnit(config.getId(),project.getDecimals());
  ProjectSold projectSold=new ProjectSold();
  projectSold.setId(project.getId());
  projectSold.setBuyerNum(0);
  projectSold.setSendToken(BigDecimal.ZERO);
  projectSold.setSoldEth(BigDecimal.ZERO);
  tokenSoldMapper.insert(projectSold);
}","public void insert(ProjectDTO projectDTO){
  Project project=(Project)BeanUtil.copyProperties(projectDTO,new Project());
  projectMapper.insertSelective(project);
  ProjectSold projectSold=new ProjectSold();
  projectSold.setId(project.getId());
  projectSold.setBuyerNum(0);
  projectSold.setSendToken(BigDecimal.ZERO);
  projectSold.setSoldEth(BigDecimal.ZERO);
  tokenSoldMapper.insert(projectSold);
}"
69079,"public void update(ProjectDTO projectDTO){
  Project project=(Project)BeanUtil.copyProperties(projectDTO,new Project());
  checkTokenName(projectDTO.getTokenName(),project.getId());
  projectMapper.updateByPrimaryKeySelective(project);
  Config config=new Config();
  config.setProjectId(project.getId());
  config.setTokenName(project.getTokenName());
  configService.update(config);
}","public void update(ProjectDTO projectDTO){
  Project project=(Project)BeanUtil.copyProperties(projectDTO,new Project());
  projectMapper.updateByPrimaryKeySelective(project);
}"
69080,"public void retire(BigInteger id,Integer retire){
  Project project=getNotNullById(id);
  Config config=configService.getByPorjectId(project.getId());
  Boolean canRetire=project.getStatus().equals(2) && project.getRetire().equals(0) && config.getRechargeStatus().equals(0);
  Assert.isTrue(canRetire,MessageConstants.CANNOT_RETIRE);
  project.setRetire(1);
  projectMapper.updateByPrimaryKeySelective(project);
  orderService.updateStatusByProject(id,CommonConstants.ORDER_STATUS_RETIRE);
}","public void retire(BigInteger id,Integer retire){
  Project project=getNotNullById(id);
  Config config=configService.getConfigByTokenName(project.getTokenName());
  Boolean canRetire=project.getStatus().equals(2) && project.getRetire().equals(0) && config.getRechargeStatus().equals(0);
  Assert.isTrue(canRetire,MessageConstants.CANNOT_RETIRE);
  project.setRetire(1);
  projectMapper.updateByPrimaryKeySelective(project);
  orderService.updateStatusByProject(id,CommonConstants.ORDER_STATUS_RETIRE);
  projectMapper.retireBalance(getUserId(),id);
}"
69081,"public void sendToken(BigInteger id,Integer sendToken){
  Project project=getNotNullById(id);
  Boolean canSend=project.getStatus().equals(2) && project.getSendToken() == 0;
  Assert.isTrue(canSend,MessageConstants.CANNOT_SEND_TOKEN);
  project.setSendToken(1);
  projectMapper.updateByPrimaryKeySelective(project);
  orderService.updateStatusByProject(id,CommonConstants.ORDER_STATUS_SEND_TOKEN);
}","public void sendToken(BigInteger id,Integer sendToken){
  Project project=getNotNullById(id);
  Config config=configService.getConfigByTokenName(project.getTokenName());
  Boolean canSend=project.getStatus().equals(2) && project.getSendToken() == 0;
  Assert.isTrue(canSend,MessageConstants.CANNOT_SEND_TOKEN);
  project.setSendToken(1);
  projectMapper.updateByPrimaryKeySelective(project);
  orderService.updateStatusByProject(id,CommonConstants.ORDER_STATUS_SEND_TOKEN);
  projectMapper.sendToken(getUserId(),id,config.getId());
}"
69082,"private BigInteger getTokenId(org.web3j.protocol.core.methods.response.Transaction tx){
  if (Web3jUtil.isContractTx(tx)) {
    BigInteger tokenId=transactionMapper.selectTokenIdByContractAddress(tx.getTo());
    return tokenId;
  }
 else {
    return BigInteger.ZERO;
  }
}","private BigInteger getTokenId(org.web3j.protocol.core.methods.response.Transaction tx){
  if (Web3jUtil.isContractTx(tx)) {
    BigInteger tokenId=configService.getIdByContractAddress(tx.getTo());
    return tokenId;
  }
 else {
    return BigInteger.ZERO;
  }
}"
69083,"private String getContractAddressByTokenId(Transaction transaction){
  String contractAddress=null;
  if (!transaction.getTokenId().equals(BigInteger.ZERO)) {
    Project project=projectService.getByTokenId(transaction.getTokenId());
    contractAddress=project.getContractAddress();
  }
  return contractAddress;
}","private String getContractAddressByTokenId(Transaction transaction){
  return configService.getByTokenId(transaction.getTokenId()).getContractAddress();
}"
69084,"public ContainerDefinition findContainerWithExposedPort(EcsPushDefinition definition,boolean isAlb){
  if (!getTaskType(definition).equals(TaskType.WEB)) {
    throw new AwsExecException(""String_Node_Str"");
  }
  ContainerDefinition container=null;
  for (  ContainerDefinition containerDefinition : definition.getContainerDefinitions()) {
    if (containerDefinition.getPortMappings() != null && !containerDefinition.getPortMappings().isEmpty()) {
      for (      PortMapping p : containerDefinition.getPortMappings()) {
        if (p.getHostPort() == 0) {
          if (container == null) {
            container=containerDefinition;
          }
 else {
            throw new AwsExecException(""String_Node_Str"");
          }
        }
      }
    }
  }
  if (container != null) {
    if (!isAlb) {
      Random random=new Random();
      int randomPort=(random.nextInt() * (DOCKER_MAX_PORT - DOCKER_MIN_PORT)) + DOCKER_MIN_PORT;
      container.getPortMappings().get(0).setHostPort(randomPort);
    }
  }
 else {
    throw new AwsExecException(""String_Node_Str"");
  }
  return container;
}","public ContainerDefinition findContainerWithExposedPort(EcsPushDefinition definition,boolean isAlb){
  if (!getTaskType(definition).equals(TaskType.WEB)) {
    throw new AwsExecException(""String_Node_Str"");
  }
  ContainerDefinition container=null;
  for (  ContainerDefinition containerDefinition : definition.getContainerDefinitions()) {
    if (containerDefinition.getPortMappings() != null && !containerDefinition.getPortMappings().isEmpty()) {
      for (      PortMapping p : containerDefinition.getPortMappings()) {
        if (p.getHostPort() == 0) {
          if (container == null) {
            container=containerDefinition;
          }
 else {
            throw new AwsExecException(""String_Node_Str"");
          }
        }
      }
    }
  }
  if (container != null) {
    if (!isAlb) {
      int randomPort=(int)((Math.random() * (DOCKER_MAX_PORT - DOCKER_MIN_PORT)) + DOCKER_MIN_PORT);
      container.getPortMappings().get(0).setHostPort(randomPort);
    }
  }
 else {
    throw new AwsExecException(""String_Node_Str"");
  }
  return container;
}"
69085,"public LoadBalancer createLoadBalancer(EcsClusterMetadata clusterMetadata,EcsPushDefinition definition){
  String appName=definition.getAppName();
  EcsPortHandler portHandler=new EcsPortHandler();
  String protocol=definition.getService().getProtocol();
  if (protocol == null) {
    protocol=HTTPS;
  }
  String urlPrefix=appName;
  if (definition.getService().getUrlPrefixOverride() != null) {
    urlPrefix=definition.getService().getUrlPrefixOverride();
  }
  String urlSuffix=definition.getService().getUrlSuffix();
  DeriveCertResult deriveCertResult=certHandler.deriveCert(protocol,urlSuffix,urlPrefix);
  ContainerDefinition webContainer=portHandler.findContainerWithExposedPort(definition,false);
  Integer randomPort=webContainer.getPortMappings().get(0).getHostPort();
  Integer containerPort=webContainer.getPortMappings().get(0).getContainerPort();
  String containerName=webContainer.getName();
  boolean isInternetFacingUrlScheme=certHandler.isInternetFacingUrlScheme(deriveCertResult.getSslCertificate(),definition.getService().getUrlSchemeOverride());
  boolean isUsingInternalSubnets=true;
  String elbScheme;
  List<String> elbSubnets;
  if (isInternetFacingUrlScheme || ""String_Node_Str"".equals(definition.getService().getElbSchemeOverride())) {
    elbScheme=""String_Node_Str"";
    isUsingInternalSubnets=false;
    elbSubnets=clusterMetadata.getPublicSubnets();
  }
 else {
    elbScheme=""String_Node_Str"";
    elbSubnets=clusterMetadata.getElbSubnets();
  }
  List<String> elbSecurityGroups=new ArrayList<>();
  if (isInternetFacingUrlScheme && HTTPS.equals(protocol)) {
    elbSecurityGroups.addAll(clusterMetadata.getAkamaiSecurityGroup());
  }
 else {
    elbSecurityGroups.addAll(clusterMetadata.getElbSecurityGroups());
  }
  List<Listener> listeners=generateListeners(definition.getService().getElbSourcePorts(),randomPort,protocol,deriveCertResult.getCertArn());
  List<com.amazonaws.services.elasticloadbalancing.model.Tag> tags=getElbTagList(clusterMetadata.getClusterCftStackTags(),appName);
  try {
    elbClient.createLoadBalancer(new CreateLoadBalancerRequest().withSubnets(elbSubnets).withListeners(listeners).withScheme(elbScheme).withSecurityGroups(elbSecurityGroups).withLoadBalancerName(appName).withTags(tags));
  }
 catch (  DuplicateLoadBalancerNameException e) {
    LOGGER.debug(""String_Node_Str"" + appName,e);
    buildLogger.addBuildLogEntry(""String_Node_Str"" + appName);
    elbClient.deleteLoadBalancerListeners(new DeleteLoadBalancerListenersRequest().withLoadBalancerName(appName).withLoadBalancerPorts(CollectionUtils.isNotEmpty(definition.getService().getElbSourcePorts()) ? definition.getService().getElbSourcePorts() : Arrays.asList(443)));
    elbClient.createLoadBalancerListeners(new CreateLoadBalancerListenersRequest().withListeners(listeners).withLoadBalancerName(appName));
    elbClient.applySecurityGroupsToLoadBalancer(new ApplySecurityGroupsToLoadBalancerRequest().withLoadBalancerName(appName).withSecurityGroups(elbSecurityGroups));
    elbClient.addTags(new AddTagsRequest().withLoadBalancerNames(appName).withTags(tags));
    elbClient.attachLoadBalancerToSubnets(new AttachLoadBalancerToSubnetsRequest().withSubnets(elbSubnets).withLoadBalancerName(appName));
  }
  if (definition.getService().getAppStickinessCookie() != null) {
    elbClient.createAppCookieStickinessPolicy(new CreateAppCookieStickinessPolicyRequest().withLoadBalancerName(appName).withPolicyName(""String_Node_Str"").withCookieName(definition.getService().getAppStickinessCookie()));
    elbClient.setLoadBalancerPoliciesOfListener(new SetLoadBalancerPoliciesOfListenerRequest().withLoadBalancerName(appName).withLoadBalancerPort(443).withPolicyNames(""String_Node_Str""));
  }
  HealthCheck healthCheck=definition.getService().getHealthCheck();
  String healthCheckPath=healthCheck.getTarget();
  if (""String_Node_Str"".equals(healthCheckPath)) {
    healthCheckPath=""String_Node_Str"" + randomPort;
  }
 else {
    healthCheckPath=""String_Node_Str"" + randomPort + healthCheckPath;
  }
  healthCheck.setTarget(healthCheckPath);
  if (healthCheck.getInterval() == null) {
    healthCheck.setInterval(30);
  }
  if (healthCheck.getHealthyThreshold() == null) {
    healthCheck.setHealthyThreshold(2);
  }
  if (healthCheck.getTimeout() == null) {
    healthCheck.setTimeout(10);
  }
  if (healthCheck.getUnhealthyThreshold() == null) {
    healthCheck.setUnhealthyThreshold(10);
  }
  elbClient.configureHealthCheck(new ConfigureHealthCheckRequest().withLoadBalancerName(appName).withHealthCheck(healthCheck));
  DescribeLoadBalancersResult elbResult=elbClient.describeLoadBalancers(new DescribeLoadBalancersRequest().withLoadBalancerNames(appName));
  LoadBalancerDescription elbDesc=elbResult.getLoadBalancerDescriptions().get(0);
  String registeredUrl=urlPrefix + ""String_Node_Str"" + definition.getService().getUrlSuffix();
  if (isUsingInternalSubnets) {
    dnsRegistrar.registerDns(registeredUrl,elbDesc.getDNSName(),appName,clusterMetadata.getClusterCftStackTags());
    buildLogger.addBuildLogEntry(""String_Node_Str"" + protocol.toLowerCase() + ""String_Node_Str""+ registeredUrl);
  }
 else {
    buildLogger.addBuildLogEntry(""String_Node_Str"" + protocol.toLowerCase() + ""String_Node_Str""+ elbDesc.getDNSName());
    buildLogger.addBuildLogEntry(""String_Node_Str"" + protocol.toLowerCase() + ""String_Node_Str""+ registeredUrl);
  }
  buildLogger.addBuildLogEntry(""String_Node_Str"");
  return new LoadBalancer().withContainerName(containerName).withContainerPort(containerPort).withLoadBalancerName(appName);
}","public LoadBalancer createLoadBalancer(EcsClusterMetadata clusterMetadata,EcsPushDefinition definition){
  String appName=definition.getAppName();
  EcsPortHandler portHandler=new EcsPortHandler();
  String protocol=definition.getService().getProtocol();
  if (protocol == null) {
    protocol=HTTPS;
  }
  String urlPrefix=appName;
  if (definition.getService().getUrlPrefixOverride() != null) {
    urlPrefix=definition.getService().getUrlPrefixOverride();
  }
  String urlSuffix=definition.getService().getUrlSuffix();
  DeriveCertResult deriveCertResult=certHandler.deriveCert(protocol,urlSuffix,urlPrefix);
  ContainerDefinition webContainer=portHandler.findContainerWithExposedPort(definition,false);
  Integer randomPort=webContainer.getPortMappings().get(0).getHostPort();
  Integer containerPort=webContainer.getPortMappings().get(0).getContainerPort();
  String containerName=webContainer.getName();
  boolean isInternetFacingUrlScheme=certHandler.isInternetFacingUrlScheme(deriveCertResult.getSslCertificate(),definition.getService().getUrlSchemeOverride());
  boolean isUsingInternalSubnets=true;
  String elbScheme;
  List<String> elbSubnets;
  if (isInternetFacingUrlScheme || ""String_Node_Str"".equals(definition.getService().getElbSchemeOverride())) {
    elbScheme=""String_Node_Str"";
    isUsingInternalSubnets=false;
    elbSubnets=clusterMetadata.getPublicSubnets();
  }
 else {
    elbScheme=""String_Node_Str"";
    elbSubnets=clusterMetadata.getElbSubnets();
  }
  List<String> elbSecurityGroups=new ArrayList<>();
  if (isInternetFacingUrlScheme && HTTPS.equals(protocol)) {
    elbSecurityGroups.addAll(clusterMetadata.getAkamaiSecurityGroup());
  }
 else {
    elbSecurityGroups.addAll(clusterMetadata.getElbSecurityGroups());
  }
  List<Listener> listeners=generateListeners(definition.getService().getElbSourcePorts(),randomPort,protocol,deriveCertResult.getCertArn());
  List<com.amazonaws.services.elasticloadbalancing.model.Tag> tags=getElbTagList(clusterMetadata.getClusterCftStackTags(),appName);
  CreateLoadBalancerRequest createLoadBalancerRequest=new CreateLoadBalancerRequest().withSubnets(elbSubnets).withListeners(listeners).withScheme(elbScheme).withSecurityGroups(elbSecurityGroups).withLoadBalancerName(appName).withTags(tags);
  try {
    elbClient.createLoadBalancer(createLoadBalancerRequest);
  }
 catch (  DuplicateLoadBalancerNameException e) {
    LOGGER.debug(""String_Node_Str"" + appName,e);
    buildLogger.addBuildLogEntry(""String_Node_Str"" + appName);
    elbClient.deleteLoadBalancerListeners(new DeleteLoadBalancerListenersRequest().withLoadBalancerName(appName).withLoadBalancerPorts(CollectionUtils.isNotEmpty(definition.getService().getElbSourcePorts()) ? definition.getService().getElbSourcePorts() : Arrays.asList(443)));
    elbClient.createLoadBalancerListeners(new CreateLoadBalancerListenersRequest().withListeners(listeners).withLoadBalancerName(appName));
    elbClient.applySecurityGroupsToLoadBalancer(new ApplySecurityGroupsToLoadBalancerRequest().withLoadBalancerName(appName).withSecurityGroups(elbSecurityGroups));
    elbClient.addTags(new AddTagsRequest().withLoadBalancerNames(appName).withTags(tags));
    elbClient.attachLoadBalancerToSubnets(new AttachLoadBalancerToSubnetsRequest().withSubnets(elbSubnets).withLoadBalancerName(appName));
  }
catch (  Exception ex) {
    throw new RuntimeException(""String_Node_Str"" + createLoadBalancerRequest);
  }
  if (definition.getService().getAppStickinessCookie() != null) {
    elbClient.createAppCookieStickinessPolicy(new CreateAppCookieStickinessPolicyRequest().withLoadBalancerName(appName).withPolicyName(""String_Node_Str"").withCookieName(definition.getService().getAppStickinessCookie()));
    elbClient.setLoadBalancerPoliciesOfListener(new SetLoadBalancerPoliciesOfListenerRequest().withLoadBalancerName(appName).withLoadBalancerPort(443).withPolicyNames(""String_Node_Str""));
  }
  HealthCheck healthCheck=definition.getService().getHealthCheck();
  String healthCheckPath=healthCheck.getTarget();
  if (""String_Node_Str"".equals(healthCheckPath)) {
    healthCheckPath=""String_Node_Str"" + randomPort;
  }
 else {
    healthCheckPath=""String_Node_Str"" + randomPort + healthCheckPath;
  }
  healthCheck.setTarget(healthCheckPath);
  if (healthCheck.getInterval() == null) {
    healthCheck.setInterval(30);
  }
  if (healthCheck.getHealthyThreshold() == null) {
    healthCheck.setHealthyThreshold(2);
  }
  if (healthCheck.getTimeout() == null) {
    healthCheck.setTimeout(10);
  }
  if (healthCheck.getUnhealthyThreshold() == null) {
    healthCheck.setUnhealthyThreshold(10);
  }
  elbClient.configureHealthCheck(new ConfigureHealthCheckRequest().withLoadBalancerName(appName).withHealthCheck(healthCheck));
  DescribeLoadBalancersResult elbResult=elbClient.describeLoadBalancers(new DescribeLoadBalancersRequest().withLoadBalancerNames(appName));
  LoadBalancerDescription elbDesc=elbResult.getLoadBalancerDescriptions().get(0);
  String registeredUrl=urlPrefix + ""String_Node_Str"" + definition.getService().getUrlSuffix();
  if (isUsingInternalSubnets) {
    dnsRegistrar.registerDns(registeredUrl,elbDesc.getDNSName(),appName,clusterMetadata.getClusterCftStackTags());
    buildLogger.addBuildLogEntry(""String_Node_Str"" + protocol.toLowerCase() + ""String_Node_Str""+ registeredUrl);
  }
 else {
    buildLogger.addBuildLogEntry(""String_Node_Str"" + protocol.toLowerCase() + ""String_Node_Str""+ elbDesc.getDNSName());
    buildLogger.addBuildLogEntry(""String_Node_Str"" + protocol.toLowerCase() + ""String_Node_Str""+ registeredUrl);
  }
  buildLogger.addBuildLogEntry(""String_Node_Str"");
  return new LoadBalancer().withContainerName(containerName).withContainerPort(containerPort).withLoadBalancerName(appName);
}"
69086,"TableAndFile(File databaseDir,long fileNumber,UserComparator userComparator,boolean verifyChecksums) throws IOException {
  String tableFileName=Filename.tableFileName(fileNumber);
  File tableFile=new File(databaseDir,tableFileName);
  FileInputStream fis=new FileInputStream(tableFile);
  FileChannel fileChannel=fis.getChannel();
  try {
    if (Iq80DBFactory.USE_MMAP) {
      table=new MMapTable(tableFile.getAbsolutePath(),fileChannel,userComparator,verifyChecksums);
    }
 else {
      table=new FileChannelTable(tableFile.getAbsolutePath(),fileChannel,userComparator,verifyChecksums);
    }
  }
  finally {
    Closeables.closeQuietly(fis);
    Closeables.closeQuietly(fileChannel);
  }
}","TableAndFile(File databaseDir,long fileNumber,UserComparator userComparator,boolean verifyChecksums) throws IOException {
  String tableFileName=Filename.tableFileName(fileNumber);
  File tableFile=new File(databaseDir,tableFileName);
  FileInputStream fis=new FileInputStream(tableFile);
  FileChannel fileChannel=fis.getChannel();
  if (Iq80DBFactory.USE_MMAP) {
    table=new MMapTable(tableFile.getAbsolutePath(),fileChannel,userComparator,verifyChecksums);
  }
 else {
    table=new FileChannelTable(tableFile.getAbsolutePath(),fileChannel,userComparator,verifyChecksums);
  }
}"
69087,"public TableCache(final File databaseDir,final int tableCacheSize,final UserComparator userComparator,final boolean verifyChecksums){
  requireNonNull(databaseDir,""String_Node_Str"");
  cache=new LruCache<>(tableCacheSize);
  this.userComparator=userComparator;
  this.verifyChecksums=verifyChecksums;
  this.databaseDir=databaseDir;
}","public TableCache(final File databaseDir,final int tableCacheSize,final UserComparator userComparator,final boolean verifyChecksums){
  requireNonNull(databaseDir,""String_Node_Str"");
  cache=new TableLruCache(tableCacheSize);
  this.userComparator=userComparator;
  this.verifyChecksums=verifyChecksums;
  this.databaseDir=databaseDir;
}"
69088,"@Test public void testBackgroundCompaction() throws Exception {
  Options options=new Options();
  options.maxOpenFiles(100);
  options.createIfMissing(true);
  DbImpl db=new DbImpl(options,this.databaseDir);
  Random random=new Random(301);
  for (int i=0; i < 200000 * STRESS_FACTOR; i++) {
    db.put(randomString(random,64).getBytes(),new byte[]{0x01},new WriteOptions().sync(false));
    db.get(randomString(random,64).getBytes());
    if ((i % 50000) == 0 && i != 0) {
      System.out.println(i + ""String_Node_Str"");
    }
  }
}","@Test public void testBackgroundCompaction() throws Exception {
  Options options=new Options();
  options.maxOpenFiles(100);
  options.createIfMissing(true);
  DbImpl db=new DbImpl(this.databaseDir,options);
  Random random=new Random(301);
  for (int i=0; i < 200000 * STRESS_FACTOR; i++) {
    db.put(randomString(random,64).getBytes(),new byte[]{0x01},new WriteOptions().sync(false));
    db.get(randomString(random,64).getBytes());
    if ((i % 50000) == 0 && i != 0) {
      System.out.println(i + ""String_Node_Str"");
    }
  }
}"
69089,"public void reopen(Options options) throws IOException {
  db.close();
  db=new DbImpl(options.verifyChecksums(true).createIfMissing(false).errorIfExists(false),databaseDir);
}","public void reopen(Options options) throws IOException {
  db.close();
  db=new DbImpl(databaseDir,options.verifyChecksums(true).createIfMissing(false).errorIfExists(false));
}"
69090,"DbStringWrapper(Options options,File databaseDir) throws IOException {
  this.options=options.verifyChecksums(true).createIfMissing(true).errorIfExists(true);
  this.databaseDir=databaseDir;
  this.db=new DbImpl(options,databaseDir);
  opened.add(this);
}","DbStringWrapper(Options options,File databaseDir) throws IOException {
  this.options=options.verifyChecksums(true).createIfMissing(true).errorIfExists(true);
  this.databaseDir=databaseDir;
  this.db=new DbImpl(databaseDir,options);
  opened.add(this);
}"
69091,"@Test public void testCompactionsOnBigDataSet() throws Exception {
  Options options=new Options();
  options.createIfMissing(true);
  DbImpl db=new DbImpl(options,databaseDir);
  for (int index=0; index < 5000000; index++) {
    String key=""String_Node_Str"" + index;
    String value=""String_Node_Str"" + index + ""String_Node_Str"";
    db.put(key.getBytes(UTF_8),value.getBytes(UTF_8));
  }
}","@Test public void testCompactionsOnBigDataSet() throws Exception {
  Options options=new Options();
  options.createIfMissing(true);
  DbImpl db=new DbImpl(databaseDir,options);
  for (int index=0; index < 5000000; index++) {
    String key=""String_Node_Str"" + index;
    String value=""String_Node_Str"" + index + ""String_Node_Str"";
    db.put(key.getBytes(UTF_8),value.getBytes(UTF_8));
  }
}"
69092,"/** 
 * Unmarshall byte[] to string set
 */
public static Set<String> unMarshallStringSet(byte[] bytes){
  Parcel parcel=null;
  try {
    parcel=Parcel.obtain();
    parcel.unmarshall(bytes,0,bytes.length);
    return new HashSet<>(parcel.createStringArrayList());
  }
  finally {
    if (parcel != null) {
      parcel.recycle();
    }
  }
}","/** 
 * Unmarshall byte[] to string set
 */
public static Set<String> unMarshallStringSet(byte[] bytes){
  Parcel parcel=null;
  try {
    parcel=Parcel.obtain();
    parcel.unmarshall(bytes,0,bytes.length);
    parcel.setDataPosition(0);
    return new HashSet<>(parcel.createStringArrayList());
  }
  finally {
    if (parcel != null) {
      parcel.recycle();
    }
  }
}"
69093,"@Override public void use(AbstractPlayer p,AbstractMonster m){
  if (this.upgraded) {
    this.scaling=.5;
  }
 else {
    this.scaling=.33;
  }
  AbstractDungeon.actionManager.addToBottom(new DamageAction((AbstractCreature)m,new DamageInfo(p,this.damage,this.damageTypeForTurn),AbstractGameAction.AttackEffect.SLASH_VERTICAL));
  AbstractDungeon.actionManager.addToBottom(new GainBlockAction(p,p,(this.block + (int)(scaling * this.damage))));
}","@Override public void use(AbstractPlayer p,AbstractMonster m){
  int dexCount=GetPowerCount(p,""String_Node_Str"");
  if (this.upgraded) {
    this.scaling=.5;
  }
 else {
    this.scaling=.33;
  }
  AbstractDungeon.actionManager.addToBottom(new DamageAction((AbstractCreature)m,new DamageInfo(p,this.damage,this.damageTypeForTurn),AbstractGameAction.AttackEffect.SLASH_VERTICAL));
  AbstractDungeon.actionManager.addToBottom(new GainBlockAction(p,p,(dexCount + (int)(scaling * this.damage))));
}"
69094,"@Override public void receiveEditCharacters(){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + TheJuggernautEnum.THE_JUGGERNAUT.toString());
  BaseMod.addCharacter(TheJuggernaut.class,""String_Node_Str"",""String_Node_Str"",AbstractCardEnum.COPPER.toString(),""String_Node_Str"",makePath(SEEKER_BUTTON),makePath(SEEKER_PORTRAIT),TheJuggernautEnum.THE_JUGGERNAUT.toString());
  logger.info(""String_Node_Str"");
}","@Override public void receiveEditCharacters(){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + TheJuggernautEnum.THE_JUGGERNAUT.toString());
  BaseMod.addCharacter(TheJuggernaut.class,""String_Node_Str"",""String_Node_Str"",AbstractCardEnum.COPPER.toString(),""String_Node_Str"",makePath(JUGGERNAUT_BUTTON),makePath(JUGGERNAUT_PORTRAIT),TheJuggernautEnum.THE_JUGGERNAUT.toString());
  logger.info(""String_Node_Str"");
}"
69095,"@Override public void receiveEditCards(){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + TheJuggernautEnum.THE_JUGGERNAUT.toString());
  BaseMod.addCard(new Strike_Purple());
  BaseMod.addCard(new Defend_Purple());
  BaseMod.addCard(new HeavierBody());
  BaseMod.addCard(new Slugfest());
  BaseMod.addCard(new Improvisation());
  BaseMod.addCard(new Blitz());
  BaseMod.addCard(new BattleShout());
  BaseMod.addCard(new Charge());
  BaseMod.addCard(new Impenetrable());
  BaseMod.addCard(new Atlas());
  BaseMod.addCard(new OverflowingArmor());
  BaseMod.addCard(new PerfectedBlow());
  BaseMod.addCard(new CallToArms());
  BaseMod.addCard(new Mangle());
  BaseMod.addCard(new IndomitableWill());
  BaseMod.addCard(new SpikedArmor());
  BaseMod.addCard(new Colossus());
  BaseMod.addCard(new Overexert());
  BaseMod.addCard(new ApexPredator());
  BaseMod.addCard(new Feast());
  BaseMod.addCard(new GigaImpact());
  BaseMod.addCard(new Bide());
  BaseMod.addCard(new Cannibalize());
  BaseMod.addCard(new NaturalEndurance());
  BaseMod.addCard(new Shatter());
  BaseMod.addCard(new ReleaseRestraint());
  BaseMod.addCard(new CombatTraining());
  BaseMod.addCard(new Inertia());
  BaseMod.addCard(new BruteForce());
  BaseMod.addCard(new Mercurial());
  BaseMod.addCard(new LivingArmor());
  BaseMod.addCard(new ThunderStruck());
  BaseMod.addCard(new DestructiveFinish());
  BaseMod.addCard(new Taunt());
  BaseMod.addCard(new HunkerDown());
  BaseMod.addCard(new InhumanRecovery());
  BaseMod.addCard(new Grapple());
  BaseMod.addCard(new HeavyArmor());
  BaseMod.addCard(new Bolster());
  BaseMod.addCard(new Breakthrough());
  BaseMod.addCard(new SlowAndSteady());
  BaseMod.addCard(new HeavyAssault());
  BaseMod.addCard(new UnstoppableForce());
  BaseMod.addCard(new LashOut());
  BaseMod.addCard(new SteelForce());
  BaseMod.addCard(new HeavyCrash());
  BaseMod.addCard(new Overpower());
  BaseMod.addCard(new Vengeance());
  BaseMod.addCard(new ConvertFlesh());
  BaseMod.addCard(new Unshakable());
  BaseMod.addCard(new FocusedPower());
  BaseMod.addCard(new Bulwark());
  BaseMod.addCard(new Accelerate());
  BaseMod.addCard(new Galvanize());
  BaseMod.addCard(new Endure());
  BaseMod.addCard(new Pursuit());
  BaseMod.addCard(new Bulldoze());
  BaseMod.addCard(new Feint());
  BaseMod.addCard(new CascadingSteel());
  BaseMod.addCard(new Smother());
  BaseMod.addCard(new Hysteria());
  BaseMod.addCard(new ChallengingRoar());
  BaseMod.addCard(new SimpleMinded());
  BaseMod.addCard(new Lunge());
  BaseMod.addCard(new RelentlessBlows());
  BaseMod.addCard(new FlyingPress());
  BaseMod.addCard(new Frenzy());
  BaseMod.addCard(new ShoulderBlow());
  BaseMod.addCard(new Pulverize());
  BaseMod.addCard(new HammerArm());
  BaseMod.addCard(new SkullBash());
  BaseMod.addCard(new Struggle());
  BaseMod.addCard(new Fury());
  BaseMod.addCard(new OnGuard());
  BaseMod.addCard(new Earthquake());
  UnlockTracker.unlockCard(""String_Node_Str"");
  UnlockTracker.unlockCard(""String_Node_Str"");
  logger.info(""String_Node_Str"");
}","@Override public void receiveEditCards(){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + TheJuggernautEnum.THE_JUGGERNAUT.toString());
  BaseMod.addCard(new Strike_Purple());
  BaseMod.addCard(new Defend_Purple());
  BaseMod.addCard(new HeavierBody());
  BaseMod.addCard(new Slugfest());
  BaseMod.addCard(new Improvisation());
  BaseMod.addCard(new Blitz());
  BaseMod.addCard(new BattleShout());
  BaseMod.addCard(new Charge());
  BaseMod.addCard(new Impenetrable());
  BaseMod.addCard(new Atlas());
  BaseMod.addCard(new OverflowingArmor());
  BaseMod.addCard(new PerfectedBlow());
  BaseMod.addCard(new CallToArms());
  BaseMod.addCard(new Mangle());
  BaseMod.addCard(new IndomitableWill());
  BaseMod.addCard(new SpikedArmor());
  BaseMod.addCard(new Colossus());
  BaseMod.addCard(new Overexert());
  BaseMod.addCard(new ApexPredator());
  BaseMod.addCard(new Feast());
  BaseMod.addCard(new GigaImpact());
  BaseMod.addCard(new Bide());
  BaseMod.addCard(new Cannibalize());
  BaseMod.addCard(new NaturalEndurance());
  BaseMod.addCard(new Shatter());
  BaseMod.addCard(new ReleaseRestraint());
  BaseMod.addCard(new CombatTraining());
  BaseMod.addCard(new Inertia());
  BaseMod.addCard(new BruteForce());
  BaseMod.addCard(new Mercurial());
  BaseMod.addCard(new LivingArmor());
  BaseMod.addCard(new ThunderStruck());
  BaseMod.addCard(new DestructiveFinish());
  BaseMod.addCard(new Taunt());
  BaseMod.addCard(new HunkerDown());
  BaseMod.addCard(new InhumanRecovery());
  BaseMod.addCard(new Grapple());
  BaseMod.addCard(new HeavyArmor());
  BaseMod.addCard(new Bolster());
  BaseMod.addCard(new Breakthrough());
  BaseMod.addCard(new SlowAndSteady());
  BaseMod.addCard(new HeavyAssault());
  BaseMod.addCard(new UnstoppableForce());
  BaseMod.addCard(new LashOut());
  BaseMod.addCard(new SteelForce());
  BaseMod.addCard(new HeavyCrash());
  BaseMod.addCard(new Overpower());
  BaseMod.addCard(new Vengeance());
  BaseMod.addCard(new ConvertFlesh());
  BaseMod.addCard(new Unshakable());
  BaseMod.addCard(new FocusedPower());
  BaseMod.addCard(new Bulwark());
  BaseMod.addCard(new Accelerate());
  BaseMod.addCard(new Galvanize());
  BaseMod.addCard(new Endure());
  BaseMod.addCard(new Pursuit());
  BaseMod.addCard(new Bulldoze());
  BaseMod.addCard(new Feint());
  BaseMod.addCard(new CascadingSteel());
  BaseMod.addCard(new Smother());
  BaseMod.addCard(new Hysteria());
  BaseMod.addCard(new ChallengingRoar());
  BaseMod.addCard(new SimpleMinded());
  BaseMod.addCard(new Lunge());
  BaseMod.addCard(new RelentlessBlows());
  BaseMod.addCard(new FlyingPress());
  BaseMod.addCard(new Frenzy());
  BaseMod.addCard(new ShoulderBlow());
  BaseMod.addCard(new Pulverize());
  BaseMod.addCard(new HammerArm());
  BaseMod.addCard(new SkullBash());
  BaseMod.addCard(new Fury());
  BaseMod.addCard(new OnGuard());
  BaseMod.addCard(new Earthquake());
  UnlockTracker.unlockCard(""String_Node_Str"");
  UnlockTracker.unlockCard(""String_Node_Str"");
  logger.info(""String_Node_Str"");
}"
69096,"@Override public void use(AbstractPlayer p,AbstractMonster m){
  if (AbstractDungeon.player.drawPile.isEmpty()) {
    AbstractDungeon.actionManager.addToBottom(new EmptyDeckShuffleAction());
  }
  AbstractDungeon.actionManager.addToBottom(new DrawCardAction(p,this.magicNumber));
  AbstractDungeon.actionManager.addToBottom(new GainBlockAction(p,p,this.block));
  AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(p,p,new DexterityPower(p,DEX_GAIN_AMT),DEX_GAIN_AMT));
}","@Override public void use(AbstractPlayer p,AbstractMonster m){
  AbstractDungeon.actionManager.addToBottom(new DrawCardAction(p,this.magicNumber));
  AbstractDungeon.actionManager.addToBottom(new GainBlockAction(p,p,this.block));
  AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(p,p,new DexterityPower(p,DEX_GAIN_AMT),DEX_GAIN_AMT));
}"
69097,"@Override public void use(AbstractPlayer p,AbstractMonster m){
  int strengthCount=GetPowerCount(p,""String_Node_Str"") * this.magicNumber;
  this.block=this.baseBlock + strengthCount;
  AbstractDungeon.actionManager.addToBottom(new GainBlockAction(p,p,this.block));
}","@Override public void use(AbstractPlayer p,AbstractMonster m){
  int strengthCount=GetPowerCount(p,""String_Node_Str"") * this.magicNumber;
  AbstractDungeon.actionManager.addToBottom(new GainBlockAction(p,p,this.block + strengthCount));
}"
69098,"public Inertia(){
  super(ID,NAME,JuggerMod.makePath(JuggerMod.INERTIA),COST,DESCRIPTION,CardType.POWER,AbstractCardEnum.COPPER,CardRarity.UNCOMMON,CardTarget.SELF,POOL);
}","public Inertia(){
  super(ID,NAME,JuggerMod.makePath(JuggerMod.INERTIA),COST,DESCRIPTION,CardType.POWER,AbstractCardEnum.COPPER,CardRarity.RARE,CardTarget.SELF,POOL);
}"
69099,"@Override public void use(AbstractPlayer p,AbstractMonster m){
  if (AbstractDungeon.player.drawPile.isEmpty()) {
    AbstractDungeon.actionManager.addToBottom(new EmptyDeckShuffleAction());
  }
  AbstractDungeon.actionManager.addToBottom(new DrawCardAction(p,this.magicNumber));
  AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(p,p,new DexterityPower(p,DEX_LOSS),DEX_LOSS));
}","@Override public void use(AbstractPlayer p,AbstractMonster m){
  AbstractDungeon.actionManager.addToBottom(new DrawCardAction(p,this.magicNumber));
  AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(p,p,new DexterityPower(p,DEX_LOSS),DEX_LOSS));
}"
69100,"@Override public void use(AbstractPlayer p,AbstractMonster m){
  AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(p,p,new ConfusionPower(p)));
}","@Override public void use(AbstractPlayer p,AbstractMonster m){
  AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(p,p,new ConfusionPower(p)));
  if (AbstractDungeon.player.drawPile.isEmpty()) {
    AbstractDungeon.actionManager.addToBottom(new EmptyDeckShuffleAction());
  }
  AbstractDungeon.actionManager.addToBottom(new DrawCardAction(p,DRAW));
}"
69101,"public void upgrade(){
  if (!this.upgraded) {
    upgradeName();
    upgradeDamage(UPGRADE_PLUS_DMG);
  }
}","public void upgrade(){
  if (!this.upgraded) {
    upgradeName();
    upgradeBaseCost(UPGRADED_COST);
  }
}"
69102,"public void use(com.megacrit.cardcrawl.characters.AbstractPlayer p,AbstractMonster m){
  AbstractDungeon.actionManager.addToBottom(new com.megacrit.cardcrawl.actions.common.DamageAction(m,new DamageInfo(p,this.damage,this.damageTypeForTurn),AbstractGameAction.AttackEffect.SLASH_DIAGONAL));
}","public void use(com.megacrit.cardcrawl.characters.AbstractPlayer p,AbstractMonster m){
  AbstractDungeon.actionManager.addToBottom(new com.megacrit.cardcrawl.actions.common.DamageAction(m,new DamageInfo(p,this.damage,this.damageTypeForTurn),AbstractGameAction.AttackEffect.SLASH_DIAGONAL));
  AbstractDungeon.actionManager.addToBottom(new GainEnergyAction(ENERGY_GAIN));
}"
69103,"private int getHandCount(){
  int count=0;
  for (  AbstractCard c : AbstractDungeon.player.hand.group) {
    if (c == null)     continue;
    ++count;
  }
  return count - 1;
}","private int getHandCount(){
  int count=0;
  for (  AbstractCard c : AbstractDungeon.player.hand.group) {
    if (c == null)     continue;
    ++count;
  }
  return count;
}"
69104,"public TheJuggernaut(String name,PlayerClass setClass){
  super(name,setClass,orbTextures,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  initializeClass(null,JuggerMod.makePath(JuggerMod.SEEKER_SHOULDER_2),JuggerMod.makePath(JuggerMod.SEEKER_SHOULDER_1),JuggerMod.makePath(JuggerMod.SEEKER_CORPSE),getLoadout(),20.0F,-10.0F,220.0F,290.0F,new EnergyManager(ENERGY_PER_TURN));
}","public TheJuggernaut(String name,PlayerClass setClass){
  super(name,setClass,orbTextures,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  initializeClass(null,JuggerMod.makePath(JuggerMod.JUGGERNAUT_SHOULDER_2),JuggerMod.makePath(JuggerMod.JUGGERNAUT_SHOULDER_1),JuggerMod.makePath(JuggerMod.JUGGERNAUT_CORPSE),getLoadout(),20.0F,-10.0F,220.0F,290.0F,new EnergyManager(ENERGY_PER_TURN));
}"
69105,"public GigaImpactPower(int Amt){
  this.name=NAME;
  this.ID=""String_Node_Str"";
  this.owner=AbstractDungeon.player;
  this.amount=Amt;
  this.updateDescription();
  this.img=JuggerMod.getGigaImpactPowerTexture();
  this.type=AbstractPower.PowerType.DEBUFF;
  this.isTurnBased=true;
}","public GigaImpactPower(int Amt){
  this.name=NAME;
  this.ID=""String_Node_Str"";
  this.owner=AbstractDungeon.player;
  this.amount=Amt;
  this.updateDescription();
  this.img=JuggerMod.getGigaImpactPowerTexture();
  this.isTurnBased=true;
}"
69106,"@Override public void update(){
  if (this.duration == 0.5f) {
    AbstractDungeon.handCardSelectScreen.open(TEXT[0],this.amount,false,true,false,false,false);
    AbstractDungeon.actionManager.addToBottom(new WaitAction(0.25f));
    this.tickDuration();
    return;
  }
  if (!AbstractDungeon.handCardSelectScreen.wereCardsRetrieved) {
    for (    AbstractCard c : AbstractDungeon.handCardSelectScreen.selectedCards.group) {
switch (c.type) {
case ATTACK:
        if (AbstractDungeon.player.hasPower(""String_Node_Str"")) {
          AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player,AbstractDungeon.player,new StrengthPower(AbstractDungeon.player,TMP_STRENGTH_UP),TMP_STRENGTH_UP));
          AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player,AbstractDungeon.player,new LoseStrengthPower(AbstractDungeon.player,TMP_STRENGTH_UP),TMP_STRENGTH_UP));
        }
 else {
          AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player,AbstractDungeon.player,new StrengthPower(AbstractDungeon.player,TMP_STRENGTH),TMP_STRENGTH));
          AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player,AbstractDungeon.player,new LoseStrengthPower(AbstractDungeon.player,TMP_STRENGTH),TMP_STRENGTH));
        }
      break;
case SKILL:
    if (AbstractDungeon.player.hasPower(""String_Node_Str"")) {
      AbstractDungeon.actionManager.addToBottom(new GainBlockAction(AbstractDungeon.player,AbstractDungeon.player,BLOCK_AMT_UP));
    }
 else {
      AbstractDungeon.actionManager.addToBottom(new GainBlockAction(AbstractDungeon.player,AbstractDungeon.player,BLOCK_AMT));
    }
  break;
case POWER:
if (AbstractDungeon.player.hasPower(""String_Node_Str"")) {
  AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player,AbstractDungeon.player,new PlatedArmorPower(AbstractDungeon.player,PLATE_AMT_UP),PLATE_AMT_UP));
}
 else {
  AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player,AbstractDungeon.player,new PlatedArmorPower(AbstractDungeon.player,PLATE_AMT),PLATE_AMT));
}
break;
default :
if (AbstractDungeon.player.hasPower(""String_Node_Str"")) {
AbstractDungeon.actionManager.addToTop(new DrawCardAction(AbstractDungeon.player,DRAW_AMT));
AbstractDungeon.actionManager.addToTop(new ExhaustAction(AbstractDungeon.player,AbstractDungeon.player,1,false));
}
 else {
AbstractDungeon.actionManager.addToTop(new ExhaustAction(AbstractDungeon.player,AbstractDungeon.player,1,false));
}
break;
}
AbstractDungeon.player.hand.addToTop(c);
AbstractDungeon.handCardSelectScreen.wereCardsRetrieved=true;
}
this.tickDuration();
}
AbstractDungeon.player.hand.refreshHandLayout();
AbstractDungeon.player.hand.glowCheck();
this.isDone=true;
}","@Override public void update(){
  if (this.duration == 0.5f) {
    AbstractDungeon.handCardSelectScreen.open(TEXT[0],this.amount,true,true,false,false,false);
    AbstractDungeon.actionManager.addToBottom(new WaitAction(0.25f));
    this.tickDuration();
    return;
  }
  if (!AbstractDungeon.handCardSelectScreen.wereCardsRetrieved) {
    for (    AbstractCard c : AbstractDungeon.handCardSelectScreen.selectedCards.group) {
switch (c.type) {
case ATTACK:
        if (AbstractDungeon.player.hasPower(""String_Node_Str"")) {
          AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player,AbstractDungeon.player,new StrengthPower(AbstractDungeon.player,TMP_STRENGTH_UP),TMP_STRENGTH_UP));
          AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player,AbstractDungeon.player,new LoseStrengthPower(AbstractDungeon.player,TMP_STRENGTH_UP),TMP_STRENGTH_UP));
        }
 else {
          AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player,AbstractDungeon.player,new StrengthPower(AbstractDungeon.player,TMP_STRENGTH),TMP_STRENGTH));
          AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player,AbstractDungeon.player,new LoseStrengthPower(AbstractDungeon.player,TMP_STRENGTH),TMP_STRENGTH));
        }
      break;
case SKILL:
    if (AbstractDungeon.player.hasPower(""String_Node_Str"")) {
      AbstractDungeon.actionManager.addToBottom(new GainBlockAction(AbstractDungeon.player,AbstractDungeon.player,BLOCK_AMT_UP));
    }
 else {
      AbstractDungeon.actionManager.addToBottom(new GainBlockAction(AbstractDungeon.player,AbstractDungeon.player,BLOCK_AMT));
    }
  break;
case POWER:
if (AbstractDungeon.player.hasPower(""String_Node_Str"")) {
  AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player,AbstractDungeon.player,new PlatedArmorPower(AbstractDungeon.player,PLATE_AMT_UP),PLATE_AMT_UP));
}
 else {
  AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player,AbstractDungeon.player,new PlatedArmorPower(AbstractDungeon.player,PLATE_AMT),PLATE_AMT));
}
break;
default :
if (AbstractDungeon.player.hasPower(""String_Node_Str"")) {
AbstractDungeon.actionManager.addToTop(new DrawCardAction(AbstractDungeon.player,DRAW_AMT));
AbstractDungeon.actionManager.addToTop(new ExhaustAction(AbstractDungeon.player,AbstractDungeon.player,1,false));
}
 else {
AbstractDungeon.actionManager.addToTop(new ExhaustAction(AbstractDungeon.player,AbstractDungeon.player,1,false));
}
break;
}
AbstractDungeon.player.hand.addToTop(c);
AbstractDungeon.handCardSelectScreen.wereCardsRetrieved=true;
}
this.tickDuration();
}
AbstractDungeon.player.hand.refreshHandLayout();
AbstractDungeon.player.hand.glowCheck();
this.isDone=true;
}"
69107,"@Override public void use(AbstractPlayer p,AbstractMonster m){
  AbstractDungeon.actionManager.addToBottom(new SwordBoomerangAction(AbstractDungeon.getMonsters().getRandomMonster(true),new DamageInfo(p,this.damage),this.magicNumber));
}","@Override public void use(AbstractPlayer p,AbstractMonster m){
  AbstractDungeon.actionManager.addToBottom(new SwordBoomerangAction(AbstractDungeon.getMonsters().getRandomMonster(true),new DamageInfo(p,ATTACK_DMG),this.magicNumber));
}"
69108,"@Override public void receiveEditCards(){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + JuggernautEnum.JUGGERNAUT.toString());
  BaseMod.addCard(new Strike_Purple());
  BaseMod.addCard(new Defend_Purple());
  BaseMod.addCard(new Improvisation());
  BaseMod.addCard(new Blitz());
  BaseMod.addCard(new BattleShout());
  BaseMod.addCard(new Charge());
  BaseMod.addCard(new Impenetrable());
  BaseMod.addCard(new Atlas());
  BaseMod.addCard(new OverflowingArmor());
  BaseMod.addCard(new PerfectedBlow());
  BaseMod.addCard(new CallToArms());
  BaseMod.addCard(new Mangle());
  BaseMod.addCard(new IndomitableWill());
  BaseMod.addCard(new SpikedArmor());
  BaseMod.addCard(new Colossus());
  BaseMod.addCard(new Overexert());
  BaseMod.addCard(new ApexPredator());
  BaseMod.addCard(new Feast());
  BaseMod.addCard(new GigaImpact());
  BaseMod.addCard(new Cannibalize());
  BaseMod.addCard(new NaturalEndurance());
  BaseMod.addCard(new Shatter());
  BaseMod.addCard(new ReleaseRestraint());
  BaseMod.addCard(new CombatTraining());
  BaseMod.addCard(new Inertia());
  BaseMod.addCard(new BruteForce());
  BaseMod.addCard(new Mercurial());
  BaseMod.addCard(new LivingArmor());
  BaseMod.addCard(new ThunderStruck());
  BaseMod.addCard(new DestructiveFinish());
  BaseMod.addCard(new Taunt());
  BaseMod.addCard(new HunkerDown());
  BaseMod.addCard(new InhumanRecovery());
  BaseMod.addCard(new Grapple());
  BaseMod.addCard(new HeavyArmor());
  BaseMod.addCard(new Bolster());
  BaseMod.addCard(new Breakthrough());
  BaseMod.addCard(new SlowAndSteady());
  BaseMod.addCard(new HeavyAssault());
  BaseMod.addCard(new UnstoppableForce());
  BaseMod.addCard(new LashOut());
  BaseMod.addCard(new SteelForce());
  BaseMod.addCard(new HeavyCrash());
  BaseMod.addCard(new Overpower());
  BaseMod.addCard(new Vengeance());
  BaseMod.addCard(new ConvertFlesh());
  BaseMod.addCard(new Unshakable());
  BaseMod.addCard(new FocusedPower());
  BaseMod.addCard(new Bulwark());
  BaseMod.addCard(new Accelerate());
  BaseMod.addCard(new Galvanize());
  BaseMod.addCard(new Endure());
  BaseMod.addCard(new Pursuit());
  BaseMod.addCard(new Bulldoze());
  BaseMod.addCard(new Feint());
  BaseMod.addCard(new CascadingSteel());
  BaseMod.addCard(new Smother());
  BaseMod.addCard(new Hysteria());
  BaseMod.addCard(new ChallengingRoar());
  BaseMod.addCard(new SimpleMinded());
  BaseMod.addCard(new Lunge());
  BaseMod.addCard(new RelentlessBlows());
  BaseMod.addCard(new FlyingPress());
  BaseMod.addCard(new Frenzy());
  BaseMod.addCard(new ShoulderBlow());
  BaseMod.addCard(new Pulverize());
  BaseMod.addCard(new HammerArm());
  BaseMod.addCard(new SkullBash());
  BaseMod.addCard(new Struggle());
  BaseMod.addCard(new Fury());
  BaseMod.addCard(new OnGuard());
  BaseMod.addCard(new Earthquake());
  UnlockTracker.unlockCard(""String_Node_Str"");
  UnlockTracker.unlockCard(""String_Node_Str"");
  logger.info(""String_Node_Str"");
}","@Override public void receiveEditCards(){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + JuggernautEnum.JUGGERNAUT.toString());
  BaseMod.addCard(new Strike_Purple());
  BaseMod.addCard(new Defend_Purple());
  BaseMod.addCard(new Improvisation());
  BaseMod.addCard(new Blitz());
  BaseMod.addCard(new BattleShout());
  BaseMod.addCard(new Charge());
  BaseMod.addCard(new Impenetrable());
  BaseMod.addCard(new Atlas());
  BaseMod.addCard(new OverflowingArmor());
  BaseMod.addCard(new PerfectedBlow());
  BaseMod.addCard(new CallToArms());
  BaseMod.addCard(new Mangle());
  BaseMod.addCard(new IndomitableWill());
  BaseMod.addCard(new SpikedArmor());
  BaseMod.addCard(new Colossus());
  BaseMod.addCard(new Overexert());
  BaseMod.addCard(new ApexPredator());
  BaseMod.addCard(new Feast());
  BaseMod.addCard(new GigaImpact());
  BaseMod.addCard(new Cannibalize());
  BaseMod.addCard(new NaturalEndurance());
  BaseMod.addCard(new Shatter());
  BaseMod.addCard(new ReleaseRestraint());
  BaseMod.addCard(new CombatTraining());
  BaseMod.addCard(new BruteForce());
  BaseMod.addCard(new Mercurial());
  BaseMod.addCard(new LivingArmor());
  BaseMod.addCard(new ThunderStruck());
  BaseMod.addCard(new DestructiveFinish());
  BaseMod.addCard(new Taunt());
  BaseMod.addCard(new HunkerDown());
  BaseMod.addCard(new InhumanRecovery());
  BaseMod.addCard(new Grapple());
  BaseMod.addCard(new HeavyArmor());
  BaseMod.addCard(new Bolster());
  BaseMod.addCard(new Breakthrough());
  BaseMod.addCard(new SlowAndSteady());
  BaseMod.addCard(new HeavyAssault());
  BaseMod.addCard(new UnstoppableForce());
  BaseMod.addCard(new LashOut());
  BaseMod.addCard(new SteelForce());
  BaseMod.addCard(new HeavyCrash());
  BaseMod.addCard(new Overpower());
  BaseMod.addCard(new Vengeance());
  BaseMod.addCard(new ConvertFlesh());
  BaseMod.addCard(new Unshakable());
  BaseMod.addCard(new FocusedPower());
  BaseMod.addCard(new Bulwark());
  BaseMod.addCard(new Accelerate());
  BaseMod.addCard(new Galvanize());
  BaseMod.addCard(new Endure());
  BaseMod.addCard(new Pursuit());
  BaseMod.addCard(new Bulldoze());
  BaseMod.addCard(new Feint());
  BaseMod.addCard(new CascadingSteel());
  BaseMod.addCard(new Smother());
  BaseMod.addCard(new Hysteria());
  BaseMod.addCard(new ChallengingRoar());
  BaseMod.addCard(new SimpleMinded());
  BaseMod.addCard(new Lunge());
  BaseMod.addCard(new RelentlessBlows());
  BaseMod.addCard(new FlyingPress());
  BaseMod.addCard(new Frenzy());
  BaseMod.addCard(new ShoulderBlow());
  BaseMod.addCard(new Pulverize());
  BaseMod.addCard(new HammerArm());
  BaseMod.addCard(new SkullBash());
  BaseMod.addCard(new Struggle());
  BaseMod.addCard(new Fury());
  BaseMod.addCard(new OnGuard());
  BaseMod.addCard(new Earthquake());
  UnlockTracker.unlockCard(""String_Node_Str"");
  UnlockTracker.unlockCard(""String_Node_Str"");
  logger.info(""String_Node_Str"");
}"
69109,"@Override public void use(AbstractPlayer p,AbstractMonster m){
  AbstractDungeon.actionManager.addToBottom((new DamageAction((AbstractCreature)m,new DamageInfo(p,this.damage,this.damageTypeForTurn),AbstractGameAction.AttackEffect.SLASH_HEAVY)));
  DestructiveFinish that=this;
  AbstractDungeon.actionManager.addToBottom(new DiscardWithCallbackAction(p,p,this.magicNumber,false,true,true,false,new IDiscardCallback(){
    @Override public void processCard(    AbstractCard c){
      AbstractDungeon.actionManager.addToBottom(new DamageAction((AbstractCreature)m,new DamageInfo(p,that.damage,that.damageTypeForTurn),AbstractGameAction.AttackEffect.SLASH_HEAVY));
    }
  }
));
}","@Override public void use(AbstractPlayer p,AbstractMonster m){
  AbstractDungeon.actionManager.addToBottom((new DamageAction((AbstractCreature)m,new DamageInfo(p,this.damage,this.damageTypeForTurn),AbstractGameAction.AttackEffect.SLASH_HEAVY)));
  AbstractDungeon.actionManager.addToBottom(new DestructiveFinishAction(m,new DamageInfo(p,this.damage,this.damageTypeForTurn),this.magicNumber));
}"
69110,"/** 
 * Creates a new item.
 * @param model the instance of the {@code MODEL} class.
 * @param adapterViewTypeDelegate the {@link AdapterViewTypeDelegate} associated with this item.
 */
public ViewItem(MODEL model,AdapterViewTypeDelegate adapterViewTypeDelegate){
  this.model=model;
  this.viewType=adapterViewTypeDelegate.getViewType();
}","/** 
 * Creates a new item.
 * @param model the instance of the {@code MODEL} class.
 * @param adapterViewTypeDelegate the {@link AdapterViewTypeDelegate} associated with this item.
 */
public ViewItem(MODEL model,AdapterViewTypeDelegate adapterViewTypeDelegate){
  this.model=model;
  this.viewType=adapterViewTypeDelegate.getViewType();
  if (viewType == RecyclerView.INVALID_TYPE) {
    throw new RuntimeException(""String_Node_Str"" + adapterViewTypeDelegate);
  }
}"
69111,"private CompletableFuture<Optional<Conversation>> searchNextConversationPage(String conversationName,Iterator<CompletableFuture<Result<List<Conversation>,SlackError>>> pageIterator){
  if (!pageIterator.hasNext()) {
    return CompletableFuture.completedFuture(Optional.empty());
  }
  CompletableFuture<Result<List<Conversation>,SlackError>> nextPage=pageIterator.next();
  return nextPage.thenApply(Result::unwrapOrElseThrow).thenCompose(conversations -> {
    Optional<Conversation> matchInPage=conversations.stream().filter(conversation -> conversation.getName().isPresent() && conversation.getName().get().equals(conversationName)).findFirst();
    if (matchInPage.isPresent()) {
      return CompletableFuture.completedFuture(matchInPage);
    }
    return searchNextConversationPage(conversationName,pageIterator);
  }
);
}","private CompletableFuture<Optional<Conversation>> searchNextConversationPage(String conversationName,Iterator<CompletableFuture<Result<List<Conversation>,SlackError>>> pageIterator){
  if (!pageIterator.hasNext()) {
    return CompletableFuture.completedFuture(Optional.empty());
  }
  CompletableFuture<Result<List<Conversation>,SlackError>> nextPage=pageIterator.next();
  return nextPage.thenApply(Result::unwrapOrElseThrow).thenComposeAsync(conversations -> {
    Optional<Conversation> matchInPage=conversations.stream().filter(conversation -> conversation.getName().isPresent() && conversation.getName().get().equals(conversationName)).findFirst();
    if (matchInPage.isPresent()) {
      return CompletableFuture.completedFuture(matchInPage);
    }
    return searchNextConversationPage(conversationName,pageIterator);
  }
,recursingExecutor);
}"
69112,"private CompletableFuture<Optional<SlackChannel>> searchNextPage(String channelName,Iterator<CompletableFuture<Result<List<SlackChannel>,SlackError>>> pageIterator){
  if (!pageIterator.hasNext()) {
    return CompletableFuture.completedFuture(Optional.empty());
  }
  CompletableFuture<Result<List<SlackChannel>,SlackError>> nextPage=pageIterator.next();
  return nextPage.thenApply(Result::unwrapOrElseThrow).thenCompose(channels -> {
    Optional<SlackChannel> matchInPage=channels.stream().filter(channel -> channel.getName().equals(channelName)).findFirst();
    if (matchInPage.isPresent()) {
      return CompletableFuture.completedFuture(matchInPage);
    }
    return searchNextPage(channelName,pageIterator);
  }
);
}","private CompletableFuture<Optional<SlackChannel>> searchNextPage(String channelName,Iterator<CompletableFuture<Result<List<SlackChannel>,SlackError>>> pageIterator){
  if (!pageIterator.hasNext()) {
    return CompletableFuture.completedFuture(Optional.empty());
  }
  CompletableFuture<Result<List<SlackChannel>,SlackError>> nextPage=pageIterator.next();
  return nextPage.thenApply(Result::unwrapOrElseThrow).thenComposeAsync(channels -> {
    Optional<SlackChannel> matchInPage=channels.stream().filter(channel -> channel.getName().equals(channelName)).findFirst();
    if (matchInPage.isPresent()) {
      return CompletableFuture.completedFuture(matchInPage);
    }
    return searchNextPage(channelName,pageIterator);
  }
,recursingExecutor);
}"
69113,"@AssistedInject public SlackWebClient(DefaultHttpRequestDebugger defaultHttpRequestDebugger,DefaultHttpResponseDebugger defaultHttpResponseDebugger,NioHttpClient.Factory nioHttpClientFactory,@Assisted SlackClientRuntimeConfig config){
  this.nioHttpClient=nioHttpClientFactory.wrap(new NingAsyncHttpClient(config.getHttpConfig().orElse(DEFAULT_CONFIG)));
  this.config=config;
  this.methodAcceptor=config.getMethodFilter().orElse(new SlackMethodAcceptor(){
    @Override public String getFailureExplanation(    SlackMethod method,    Object params){
      throw new IllegalStateException(""String_Node_Str"");
    }
    @Override public boolean test(    SlackMethod slackMethod,    Object o){
      return true;
    }
  }
);
  this.requestDebugger=config.getRequestDebugger().orElse(defaultHttpRequestDebugger);
  this.responseDebugger=config.getResponseDebugger().orElse(defaultHttpResponseDebugger);
}","@AssistedInject public SlackWebClient(DefaultHttpRequestDebugger defaultHttpRequestDebugger,DefaultHttpResponseDebugger defaultHttpResponseDebugger,NioHttpClient.Factory nioHttpClientFactory,@Assisted SlackClientRuntimeConfig config){
  this.nioHttpClient=nioHttpClientFactory.wrap(new NingAsyncHttpClient(config.getHttpConfig().orElse(DEFAULT_CONFIG)));
  this.config=config;
  this.methodAcceptor=config.getMethodFilter().orElse(new SlackMethodAcceptor(){
    @Override public String getFailureExplanation(    SlackMethod method,    Object params){
      throw new IllegalStateException(""String_Node_Str"");
    }
    @Override public boolean test(    SlackMethod slackMethod,    Object o){
      return true;
    }
  }
);
  this.requestDebugger=config.getRequestDebugger().orElse(defaultHttpRequestDebugger);
  this.responseDebugger=config.getResponseDebugger().orElse(defaultHttpResponseDebugger);
  this.recursingExecutor=MoreExecutors.threadPoolDaemonExecutorBuilder(""String_Node_Str"").setFollowThreadLocals(true).setUnbounded(true).build();
}"
69114,"@Override protected final CompletableFuture<T> computeNext(){
  try {
    if (page == null || page.hasMore().join()) {
      page=getPage(getInitialOffset());
      return page.getResults();
    }
    return endOfData();
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}","@Override protected final CompletableFuture<T> computeNext(){
  try {
    if (page == null) {
      page=getPage(getInitialOffset());
      if (page == null) {
        return endOfData();
      }
      return page.getResults();
    }
    if (page.hasMore().join()) {
      page=getPage(page.getOffset().join());
      return page.getResults();
    }
    return endOfData();
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}"
69115,"@Override public void debugProcessingFailure(long requestId,SlackMethod method,HttpRequest request,HttpResponse response,Throwable ex){
  LOG.error(""String_Node_Str"",request,method,HttpFormatter.formatRequest(request),HttpFormatter.formatResponse(response),ex);
}","@Override public void debugProcessingFailure(long requestId,SlackMethod method,HttpRequest request,HttpResponse response,Throwable ex){
  LOG.error(""String_Node_Str"",requestId,method,HttpFormatter.formatRequest(request),HttpFormatter.formatResponse(response),ex);
}"
69116,"@Override public void debugSlackApiError(long requestId,SlackMethod method,HttpRequest request,HttpResponse failure){
  LOG.error(""String_Node_Str"",request,method,HttpFormatter.formatRequest(request),HttpFormatter.formatResponse(failure));
}","@Override public void debugSlackApiError(long requestId,SlackMethod method,HttpRequest request,HttpResponse failure){
  LOG.error(""String_Node_Str"",requestId,method,HttpFormatter.formatRequest(request),HttpFormatter.formatResponse(failure));
}"
69117,"private void checkCryptoSetup(){
  BooleanProperty result=new SimpleBooleanProperty();
  Thread checkCryptoThread=new Thread(() -> {
    try {
      Thread.currentThread().setName(""String_Node_Str"");
      log.trace(""String_Node_Str"");
      Ping payload=new Ping(1,1);
      SealedAndSigned sealedAndSigned=EncryptionService.encryptHybridWithSignature(payload,keyRing.getSignatureKeyPair(),keyRing.getPubKeyRing().getEncryptionPubKey());
      DecryptedDataTuple tuple=encryptionService.decryptHybridWithSignature(sealedAndSigned,keyRing.getEncryptionKeyPair().getPrivate());
      if (tuple.getNetworkEnvelope() instanceof Ping && ((Ping)tuple.getNetworkEnvelope()).getNonce() == payload.getNonce() && ((Ping)tuple.getNetworkEnvelope()).getLastRoundTripTime() == payload.getLastRoundTripTime()) {
        log.debug(""String_Node_Str"");
        if (Security.getProvider(""String_Node_Str"") != null) {
          UserThread.execute(() -> result.set(true));
        }
 else {
          throw new CryptoException(""String_Node_Str"");
        }
      }
 else {
        throw new CryptoException(""String_Node_Str"");
      }
    }
 catch (    CryptoException e) {
      e.printStackTrace();
      String msg=Res.get(""String_Node_Str"",e.getMessage());
      log.error(msg);
      if (cryptoSetupFailedHandler != null)       cryptoSetupFailedHandler.accept(msg);
    }
  }
);
  checkCryptoThread.start();
}","private void checkCryptoSetup(){
  BooleanProperty result=new SimpleBooleanProperty();
  Thread checkCryptoThread=new Thread(() -> {
    try {
      Thread.currentThread().setName(""String_Node_Str"");
      log.trace(""String_Node_Str"");
      Ping payload=new Ping(1,1);
      SealedAndSigned sealedAndSigned=EncryptionService.encryptHybridWithSignature(payload,keyRing.getSignatureKeyPair(),keyRing.getPubKeyRing().getEncryptionPubKey());
      DecryptedDataTuple tuple=encryptionService.decryptHybridWithSignature(sealedAndSigned,keyRing.getEncryptionKeyPair().getPrivate());
      if (tuple.getNetworkEnvelope() instanceof Ping && ((Ping)tuple.getNetworkEnvelope()).getNonce() == payload.getNonce() && ((Ping)tuple.getNetworkEnvelope()).getLastRoundTripTime() == payload.getLastRoundTripTime()) {
        log.debug(""String_Node_Str"");
        if (Security.getProvider(""String_Node_Str"") != null) {
          UserThread.execute(() -> result.set(true));
        }
 else {
          throw new CryptoException(""String_Node_Str"");
        }
      }
 else {
        throw new CryptoException(""String_Node_Str"");
      }
    }
 catch (    CryptoException|ProtobufferException e) {
      e.printStackTrace();
      String msg=Res.get(""String_Node_Str"",e.getMessage());
      log.error(msg);
      if (cryptoSetupFailedHandler != null)       cryptoSetupFailedHandler.accept(msg);
    }
  }
);
  checkCryptoThread.start();
}"
69118,"boolean isValid(){
  if (!predicates.isMatchingCurrency(offer,account)) {
    return false;
  }
  boolean isEqualPaymentMethods=predicates.isEqualPaymentMethods(offer,account);
  if (!(account instanceof CountryBasedPaymentAccount)) {
    return isEqualPaymentMethods;
  }
  if (!predicates.isMatchingCountryCodes(offer,account)) {
    return false;
  }
  if (predicates.isSepaRelated(offer,account)) {
    return true;
  }
 else   if (predicates.isOfferRequireSameOrSpecificBank(offer,account)) {
    return predicates.isMatchingBankId(offer,account);
  }
 else {
    return isEqualPaymentMethods;
  }
}","boolean isValid(){
  if (!predicates.isMatchingCurrency(offer,account)) {
    return false;
  }
  boolean isEqualPaymentMethods=predicates.isEqualPaymentMethods(offer,account);
  if (!(account instanceof CountryBasedPaymentAccount)) {
    return isEqualPaymentMethods;
  }
  if (!predicates.isMatchingCountryCodes(offer,account)) {
    return false;
  }
  if (predicates.isMatchingSepaOffer(offer,account)) {
    return true;
  }
  if (predicates.isMatchingSepaInstant(offer,account)) {
    return true;
  }
  if (predicates.isOfferRequireSameOrSpecificBank(offer,account)) {
    return predicates.isMatchingBankId(offer,account);
  }
  return isEqualPaymentMethods;
}"
69119,"public Contract(OfferPayload offerPayload,long tradeAmount,long tradePrice,String takerFeeTxID,NodeAddress buyerNodeAddress,NodeAddress sellerNodeAddress,NodeAddress arbitratorNodeAddress,NodeAddress mediatorNodeAddress,boolean isBuyerMakerAndSellerTaker,String makerAccountId,String takerAccountId,PaymentAccountPayload makerPaymentAccountPayload,PaymentAccountPayload takerPaymentAccountPayload,PubKeyRing makerPubKeyRing,PubKeyRing takerPubKeyRing,String makerPayoutAddressString,String takerPayoutAddressString,byte[] makerMultiSigPubKey,byte[] takerMultiSigPubKey){
  this.offerPayload=offerPayload;
  this.tradeAmount=tradeAmount;
  this.tradePrice=tradePrice;
  this.takerFeeTxID=takerFeeTxID;
  this.buyerNodeAddress=buyerNodeAddress;
  this.sellerNodeAddress=sellerNodeAddress;
  this.arbitratorNodeAddress=arbitratorNodeAddress;
  this.mediatorNodeAddress=mediatorNodeAddress;
  this.isBuyerMakerAndSellerTaker=isBuyerMakerAndSellerTaker;
  this.makerAccountId=makerAccountId;
  this.takerAccountId=takerAccountId;
  this.makerPaymentAccountPayload=makerPaymentAccountPayload;
  this.takerPaymentAccountPayload=takerPaymentAccountPayload;
  this.makerPubKeyRing=makerPubKeyRing;
  this.takerPubKeyRing=takerPubKeyRing;
  this.makerPayoutAddressString=makerPayoutAddressString;
  this.takerPayoutAddressString=takerPayoutAddressString;
  this.makerMultiSigPubKey=makerMultiSigPubKey;
  this.takerMultiSigPubKey=takerMultiSigPubKey;
  checkArgument(makerPaymentAccountPayload.getPaymentMethodId().equals(takerPaymentAccountPayload.getPaymentMethodId()),""String_Node_Str"" + ""String_Node_Str"" + makerPaymentAccountPayload.getPaymentMethodId() + ""String_Node_Str""+ ""String_Node_Str""+ takerPaymentAccountPayload.getPaymentMethodId());
}","public Contract(OfferPayload offerPayload,long tradeAmount,long tradePrice,String takerFeeTxID,NodeAddress buyerNodeAddress,NodeAddress sellerNodeAddress,NodeAddress arbitratorNodeAddress,NodeAddress mediatorNodeAddress,boolean isBuyerMakerAndSellerTaker,String makerAccountId,String takerAccountId,PaymentAccountPayload makerPaymentAccountPayload,PaymentAccountPayload takerPaymentAccountPayload,PubKeyRing makerPubKeyRing,PubKeyRing takerPubKeyRing,String makerPayoutAddressString,String takerPayoutAddressString,byte[] makerMultiSigPubKey,byte[] takerMultiSigPubKey){
  this.offerPayload=offerPayload;
  this.tradeAmount=tradeAmount;
  this.tradePrice=tradePrice;
  this.takerFeeTxID=takerFeeTxID;
  this.buyerNodeAddress=buyerNodeAddress;
  this.sellerNodeAddress=sellerNodeAddress;
  this.arbitratorNodeAddress=arbitratorNodeAddress;
  this.mediatorNodeAddress=mediatorNodeAddress;
  this.isBuyerMakerAndSellerTaker=isBuyerMakerAndSellerTaker;
  this.makerAccountId=makerAccountId;
  this.takerAccountId=takerAccountId;
  this.makerPaymentAccountPayload=makerPaymentAccountPayload;
  this.takerPaymentAccountPayload=takerPaymentAccountPayload;
  this.makerPubKeyRing=makerPubKeyRing;
  this.takerPubKeyRing=takerPubKeyRing;
  this.makerPayoutAddressString=makerPayoutAddressString;
  this.takerPayoutAddressString=takerPayoutAddressString;
  this.makerMultiSigPubKey=makerMultiSigPubKey;
  this.takerMultiSigPubKey=takerMultiSigPubKey;
  String makerPaymentMethodId=makerPaymentAccountPayload.getPaymentMethodId();
  String takerPaymentMethodId=takerPaymentAccountPayload.getPaymentMethodId();
  boolean result=(makerPaymentMethodId.equals(PaymentMethod.SEPA_ID) && takerPaymentMethodId.equals(PaymentMethod.SEPA_INSTANT_ID)) || makerPaymentMethodId.equals(takerPaymentMethodId);
  checkArgument(result,""String_Node_Str"" + ""String_Node_Str"" + makerPaymentMethodId + ""String_Node_Str""+ ""String_Node_Str""+ takerPaymentMethodId);
}"
69120,"@Test public void testIsValidWhenNationalBankAccount(){
  account=mock(NationalBankAccount.class);
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isSepaRelated(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(false);
  assertTrue(new ReceiptValidator(offer,account,predicates).isValid());
}","@Test public void testIsValidWhenNationalBankAccount(){
  account=mock(NationalBankAccount.class);
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isMatchingSepaOffer(offer,account)).thenReturn(false);
  when(predicates.isMatchingSepaOffer(offer,account)).thenReturn(false);
  when(predicates.isMatchingSepaInstant(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(false);
  assertTrue(new ReceiptValidator(offer,account,predicates).isValid());
}"
69121,"@Test public void testIsValidWhenSpecificBankAccountAndOfferRequireSpecificBank(){
  account=mock(SpecificBanksAccount.class);
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isSepaRelated(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(true);
  when(predicates.isMatchingBankId(offer,account)).thenReturn(false);
  assertFalse(new ReceiptValidator(offer,account,predicates).isValid());
}","@Test public void testIsValidWhenSpecificBankAccountAndOfferRequireSpecificBank(){
  account=mock(SpecificBanksAccount.class);
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isMatchingSepaOffer(offer,account)).thenReturn(false);
  when(predicates.isMatchingSepaInstant(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(true);
  when(predicates.isMatchingBankId(offer,account)).thenReturn(false);
  assertFalse(new ReceiptValidator(offer,account,predicates).isValid());
}"
69122,"@Test public void testIsValidWhenSameBankAccountAndOfferRequireSpecificBank(){
  account=mock(SameBankAccount.class);
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isSepaRelated(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(true);
  when(predicates.isMatchingBankId(offer,account)).thenReturn(false);
  assertFalse(new ReceiptValidator(offer,account,predicates).isValid());
}","@Test public void testIsValidWhenSameBankAccountAndOfferRequireSpecificBank(){
  account=mock(SameBankAccount.class);
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isMatchingSepaOffer(offer,account)).thenReturn(false);
  when(predicates.isMatchingSepaInstant(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(true);
  when(predicates.isMatchingBankId(offer,account)).thenReturn(false);
  assertFalse(new ReceiptValidator(offer,account,predicates).isValid());
}"
69123,"@Test public void testIsValidWhenSameBankAccount(){
  account=mock(SameBankAccount.class);
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isSepaRelated(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(true);
  when(predicates.isMatchingBankId(offer,account)).thenReturn(true);
  assertTrue(new ReceiptValidator(offer,account,predicates).isValid());
}","@Test public void testIsValidWhenSameBankAccount(){
  account=mock(SameBankAccount.class);
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isMatchingSepaOffer(offer,account)).thenReturn(false);
  when(predicates.isMatchingSepaInstant(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(true);
  when(predicates.isMatchingBankId(offer,account)).thenReturn(true);
  assertTrue(new ReceiptValidator(offer,account,predicates).isValid());
}"
69124,"@Test public void testIsValidWhenSpecificBankAccount(){
  account=mock(SpecificBanksAccount.class);
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isSepaRelated(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(true);
  when(predicates.isMatchingBankId(offer,account)).thenReturn(true);
  assertTrue(new ReceiptValidator(offer,account,predicates).isValid());
}","@Test public void testIsValidWhenSpecificBankAccount(){
  account=mock(SpecificBanksAccount.class);
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isMatchingSepaOffer(offer,account)).thenReturn(false);
  when(predicates.isMatchingSepaInstant(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(true);
  when(predicates.isMatchingBankId(offer,account)).thenReturn(true);
  assertTrue(new ReceiptValidator(offer,account,predicates).isValid());
}"
69125,"@Test public void testIsValidWhenWesternUnionAccount(){
  account=mock(WesternUnionAccount.class);
  PaymentMethod.WESTERN_UNION=mock(PaymentMethod.class);
  when(offer.getPaymentMethod()).thenReturn(PaymentMethod.WESTERN_UNION);
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isSepaRelated(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(false);
  assertTrue(new ReceiptValidator(offer,account,predicates).isValid());
}","@Test public void testIsValidWhenWesternUnionAccount(){
  account=mock(WesternUnionAccount.class);
  PaymentMethod.WESTERN_UNION=mock(PaymentMethod.class);
  when(offer.getPaymentMethod()).thenReturn(PaymentMethod.WESTERN_UNION);
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isMatchingSepaOffer(offer,account)).thenReturn(false);
  when(predicates.isMatchingSepaInstant(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(false);
  assertTrue(new ReceiptValidator(offer,account,predicates).isValid());
}"
69126,"@Test public void testIsValidWhenWesternIrregularAccount(){
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isSepaRelated(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(false);
  assertTrue(validator.isValid());
}","@Test public void testIsValidWhenWesternIrregularAccount(){
  when(predicates.isMatchingCurrency(offer,account)).thenReturn(true);
  when(predicates.isEqualPaymentMethods(offer,account)).thenReturn(true);
  when(predicates.isMatchingCountryCodes(offer,account)).thenReturn(true);
  when(predicates.isMatchingSepaOffer(offer,account)).thenReturn(false);
  when(predicates.isMatchingSepaInstant(offer,account)).thenReturn(false);
  when(predicates.isOfferRequireSameOrSpecificBank(offer,account)).thenReturn(false);
  assertTrue(validator.isValid());
}"
69127,"protected void applyInjector(){
  DevEnv.setup(injector);
  setupPersistedDataHosts(injector);
}","protected void applyInjector(){
  DevEnv.setup(injector);
  setCorruptedDataBaseFilesHandler();
  setupPersistedDataHosts(injector);
}"
69128,"@Override protected void configure(){
  bind(BisqEnvironment.class).toInstance((BisqEnvironment)environment);
  bind(KeyStorage.class).in(Singleton.class);
  bind(KeyRing.class).in(Singleton.class);
  bind(User.class).in(Singleton.class);
  bind(Clock.class).in(Singleton.class);
  bind(Preferences.class).in(Singleton.class);
  bind(BridgeAddressProvider.class).to(Preferences.class).in(Singleton.class);
  bind(SeedNodeAddressLookup.class).in(Singleton.class);
  bind(SeedNodeRepository.class).to(DefaultSeedNodeRepository.class).in(Singleton.class);
  File storageDir=new File(environment.getRequiredProperty(Storage.STORAGE_DIR));
  bind(File.class).annotatedWith(named(Storage.STORAGE_DIR)).toInstance(storageDir);
  File keyStorageDir=new File(environment.getRequiredProperty(KeyStorage.KEY_STORAGE_DIR));
  bind(File.class).annotatedWith(named(KeyStorage.KEY_STORAGE_DIR)).toInstance(keyStorageDir);
  bind(NetworkProtoResolver.class).to(CoreNetworkProtoResolver.class).in(Singleton.class);
  bind(PersistenceProtoResolver.class).to(CorePersistenceProtoResolver.class).in(Singleton.class);
  Boolean useDevPrivilegeKeys=environment.getProperty(AppOptionKeys.USE_DEV_PRIVILEGE_KEYS,Boolean.class,false);
  bind(boolean.class).annotatedWith(Names.named(AppOptionKeys.USE_DEV_PRIVILEGE_KEYS)).toInstance(useDevPrivilegeKeys);
  Boolean useDevMode=environment.getProperty(CommonOptionKeys.USE_DEV_MODE,Boolean.class,false);
  bind(boolean.class).annotatedWith(Names.named(CommonOptionKeys.USE_DEV_MODE)).toInstance(useDevMode);
  install(tradeModule());
  install(encryptionServiceModule());
  install(arbitratorModule());
  install(offerModule());
  install(p2pModule());
  install(bitcoinModule());
  install(daoModule());
  install(alertModule());
  install(filterModule());
}","@Override protected void configure(){
  bind(BisqEnvironment.class).toInstance((BisqEnvironment)environment);
  bind(KeyStorage.class).in(Singleton.class);
  bind(KeyRing.class).in(Singleton.class);
  bind(User.class).in(Singleton.class);
  bind(Clock.class).in(Singleton.class);
  bind(Preferences.class).in(Singleton.class);
  bind(BridgeAddressProvider.class).to(Preferences.class).in(Singleton.class);
  bind(CorruptedDataBaseFilesHandler.class).in(Singleton.class);
  bind(SeedNodeAddressLookup.class).in(Singleton.class);
  bind(SeedNodeRepository.class).to(DefaultSeedNodeRepository.class).in(Singleton.class);
  File storageDir=new File(environment.getRequiredProperty(Storage.STORAGE_DIR));
  bind(File.class).annotatedWith(named(Storage.STORAGE_DIR)).toInstance(storageDir);
  File keyStorageDir=new File(environment.getRequiredProperty(KeyStorage.KEY_STORAGE_DIR));
  bind(File.class).annotatedWith(named(KeyStorage.KEY_STORAGE_DIR)).toInstance(keyStorageDir);
  bind(NetworkProtoResolver.class).to(CoreNetworkProtoResolver.class).in(Singleton.class);
  bind(PersistenceProtoResolver.class).to(CorePersistenceProtoResolver.class).in(Singleton.class);
  Boolean useDevPrivilegeKeys=environment.getProperty(AppOptionKeys.USE_DEV_PRIVILEGE_KEYS,Boolean.class,false);
  bind(boolean.class).annotatedWith(Names.named(AppOptionKeys.USE_DEV_PRIVILEGE_KEYS)).toInstance(useDevPrivilegeKeys);
  Boolean useDevMode=environment.getProperty(CommonOptionKeys.USE_DEV_MODE,Boolean.class,false);
  bind(boolean.class).annotatedWith(Names.named(CommonOptionKeys.USE_DEV_MODE)).toInstance(useDevMode);
  install(tradeModule());
  install(encryptionServiceModule());
  install(arbitratorModule());
  install(offerModule());
  install(p2pModule());
  install(bitcoinModule());
  install(daoModule());
  install(alertModule());
  install(filterModule());
}"
69129,"protected void applyInjector(){
  DevEnv.setup(injector);
  setupPersistedDataHosts(injector);
}","protected void applyInjector(){
  DevEnv.setup(injector);
  setCorruptedDataBaseFilesHandler();
  setupPersistedDataHosts(injector);
}"
69130,"@Override protected void configure(){
  bind(BisqEnvironment.class).toInstance((BisqEnvironment)environment);
  bind(KeyStorage.class).in(Singleton.class);
  bind(KeyRing.class).in(Singleton.class);
  bind(User.class).in(Singleton.class);
  bind(Clock.class).in(Singleton.class);
  bind(Preferences.class).in(Singleton.class);
  bind(BridgeAddressProvider.class).to(Preferences.class).in(Singleton.class);
  bind(SeedNodeAddressLookup.class).in(Singleton.class);
  bind(SeedNodeRepository.class).to(DefaultSeedNodeRepository.class).in(Singleton.class);
  File storageDir=new File(environment.getRequiredProperty(Storage.STORAGE_DIR));
  bind(File.class).annotatedWith(named(Storage.STORAGE_DIR)).toInstance(storageDir);
  File keyStorageDir=new File(environment.getRequiredProperty(KeyStorage.KEY_STORAGE_DIR));
  bind(File.class).annotatedWith(named(KeyStorage.KEY_STORAGE_DIR)).toInstance(keyStorageDir);
  bind(NetworkProtoResolver.class).to(CoreNetworkProtoResolver.class).in(Singleton.class);
  bind(PersistenceProtoResolver.class).to(CorePersistenceProtoResolver.class).in(Singleton.class);
  Boolean useDevPrivilegeKeys=environment.getProperty(AppOptionKeys.USE_DEV_PRIVILEGE_KEYS,Boolean.class,false);
  bind(boolean.class).annotatedWith(Names.named(AppOptionKeys.USE_DEV_PRIVILEGE_KEYS)).toInstance(useDevPrivilegeKeys);
  Boolean useDevMode=environment.getProperty(CommonOptionKeys.USE_DEV_MODE,Boolean.class,false);
  bind(boolean.class).annotatedWith(Names.named(CommonOptionKeys.USE_DEV_MODE)).toInstance(useDevMode);
  install(tradeModule());
  install(encryptionServiceModule());
  install(arbitratorModule());
  install(offerModule());
  install(p2pModule());
  install(bitcoinModule());
  install(daoModule());
  install(alertModule());
  install(filterModule());
}","@Override protected void configure(){
  bind(BisqEnvironment.class).toInstance((BisqEnvironment)environment);
  bind(KeyStorage.class).in(Singleton.class);
  bind(KeyRing.class).in(Singleton.class);
  bind(User.class).in(Singleton.class);
  bind(Clock.class).in(Singleton.class);
  bind(Preferences.class).in(Singleton.class);
  bind(BridgeAddressProvider.class).to(Preferences.class).in(Singleton.class);
  bind(CorruptedDatabaseFilesHandler.class).in(Singleton.class);
  bind(SeedNodeAddressLookup.class).in(Singleton.class);
  bind(SeedNodeRepository.class).to(DefaultSeedNodeRepository.class).in(Singleton.class);
  File storageDir=new File(environment.getRequiredProperty(Storage.STORAGE_DIR));
  bind(File.class).annotatedWith(named(Storage.STORAGE_DIR)).toInstance(storageDir);
  File keyStorageDir=new File(environment.getRequiredProperty(KeyStorage.KEY_STORAGE_DIR));
  bind(File.class).annotatedWith(named(KeyStorage.KEY_STORAGE_DIR)).toInstance(keyStorageDir);
  bind(NetworkProtoResolver.class).to(CoreNetworkProtoResolver.class).in(Singleton.class);
  bind(PersistenceProtoResolver.class).to(CorePersistenceProtoResolver.class).in(Singleton.class);
  Boolean useDevPrivilegeKeys=environment.getProperty(AppOptionKeys.USE_DEV_PRIVILEGE_KEYS,Boolean.class,false);
  bind(boolean.class).annotatedWith(Names.named(AppOptionKeys.USE_DEV_PRIVILEGE_KEYS)).toInstance(useDevPrivilegeKeys);
  Boolean useDevMode=environment.getProperty(CommonOptionKeys.USE_DEV_MODE,Boolean.class,false);
  bind(boolean.class).annotatedWith(Names.named(CommonOptionKeys.USE_DEV_MODE)).toInstance(useDevMode);
  install(tradeModule());
  install(encryptionServiceModule());
  install(arbitratorModule());
  install(offerModule());
  install(p2pModule());
  install(bitcoinModule());
  install(daoModule());
  install(alertModule());
  install(filterModule());
}"
69131,"public void activateOpenOffer(OpenOffer openOffer,ResultHandler resultHandler,ErrorMessageHandler errorMessageHandler){
  if (offersToBeEdited.containsKey(openOffer.getId())) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Offer offer=openOffer.getOffer();
  openOffer.setStorage(openOfferTradableListStorage);
  offerBookService.activateOffer(offer,() -> {
    openOffer.setState(OpenOffer.State.AVAILABLE);
    log.debug(""String_Node_Str"",offer.getId());
    resultHandler.handleResult();
  }
,errorMessageHandler);
}","public void activateOpenOffer(OpenOffer openOffer,ResultHandler resultHandler,ErrorMessageHandler errorMessageHandler){
  if (!offersToBeEdited.containsKey(openOffer.getId())) {
    Offer offer=openOffer.getOffer();
    openOffer.setStorage(openOfferTradableListStorage);
    offerBookService.activateOffer(offer,() -> {
      openOffer.setState(OpenOffer.State.AVAILABLE);
      log.debug(""String_Node_Str"",offer.getId());
      resultHandler.handleResult();
    }
,errorMessageHandler);
  }
 else {
    errorMessageHandler.handleErrorMessage(""String_Node_Str"");
  }
}"
69132,"public void removeOpenOffer(OpenOffer openOffer,ResultHandler resultHandler,ErrorMessageHandler errorMessageHandler){
  if (offersToBeEdited.containsKey(openOffer.getId())) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Offer offer=openOffer.getOffer();
  if (openOffer.isDeactivated()) {
    openOffer.setStorage(openOfferTradableListStorage);
    onRemoved(openOffer,resultHandler,offer);
  }
 else {
    offerBookService.removeOffer(offer.getOfferPayload(),() -> {
      onRemoved(openOffer,resultHandler,offer);
    }
,errorMessageHandler);
  }
}","public void removeOpenOffer(OpenOffer openOffer,ResultHandler resultHandler,ErrorMessageHandler errorMessageHandler){
  if (!offersToBeEdited.containsKey(openOffer.getId())) {
    Offer offer=openOffer.getOffer();
    if (openOffer.isDeactivated()) {
      openOffer.setStorage(openOfferTradableListStorage);
      onRemoved(openOffer,resultHandler,offer);
    }
 else {
      offerBookService.removeOffer(offer.getOfferPayload(),() -> onRemoved(openOffer,resultHandler,offer),errorMessageHandler);
    }
  }
 else {
    errorMessageHandler.handleErrorMessage(""String_Node_Str"");
  }
}"
69133,"public void editOpenOfferPublish(Offer editedOffer,OpenOffer.State originalState,ResultHandler resultHandler,ErrorMessageHandler errorMessageHandler){
  Optional<OpenOffer> openOfferOptional=getOpenOfferById(editedOffer.getId());
  if (openOfferOptional.isPresent()) {
    final OpenOffer openOffer=openOfferOptional.get();
    openOffer.setStorage(openOfferTradableListStorage);
    openOffer.getOffer().setState(Offer.State.REMOVED);
    openOffer.setState(OpenOffer.State.CANCELED);
    openOffers.remove(openOffer);
    final OpenOffer editedOpenOffer=new OpenOffer(editedOffer,openOfferTradableListStorage);
    editedOpenOffer.setState(originalState);
    openOffers.add(editedOpenOffer);
    republishOffer(editedOpenOffer);
    offersToBeEdited.remove(openOffer.getId());
    resultHandler.handleResult();
  }
 else {
    errorMessageHandler.handleErrorMessage(""String_Node_Str"");
  }
}","public void editOpenOfferPublish(Offer editedOffer,OpenOffer.State originalState,ResultHandler resultHandler,ErrorMessageHandler errorMessageHandler){
  Optional<OpenOffer> openOfferOptional=getOpenOfferById(editedOffer.getId());
  if (openOfferOptional.isPresent()) {
    final OpenOffer openOffer=openOfferOptional.get();
    openOffer.setStorage(openOfferTradableListStorage);
    openOffer.getOffer().setState(Offer.State.REMOVED);
    openOffer.setState(OpenOffer.State.CANCELED);
    openOffers.remove(openOffer);
    final OpenOffer editedOpenOffer=new OpenOffer(editedOffer,openOfferTradableListStorage);
    editedOpenOffer.setState(originalState);
    openOffers.add(editedOpenOffer);
    if (!editedOpenOffer.isDeactivated())     republishOffer(editedOpenOffer);
    offersToBeEdited.remove(openOffer.getId());
    resultHandler.handleResult();
  }
 else {
    errorMessageHandler.handleErrorMessage(""String_Node_Str"");
  }
}"
69134,"public void editOpenOfferStart(OpenOffer openOffer,ResultHandler resultHandler,ErrorMessageHandler errorMessageHandler){
  if (offersToBeEdited.containsKey(openOffer.getId())) {
    resultHandler.handleResult();
    return;
  }
  if (openOffer.isDeactivated()) {
    offersToBeEdited.put(openOffer.getId(),openOffer);
    resultHandler.handleResult();
  }
 else {
    deactivateOpenOffer(openOffer,() -> {
      offersToBeEdited.put(openOffer.getId(),openOffer);
      resultHandler.handleResult();
    }
,errorMessage -> {
      offersToBeEdited.remove(openOffer.getId());
      errorMessageHandler.handleErrorMessage(errorMessage);
    }
);
  }
}","public void editOpenOfferStart(OpenOffer openOffer,ResultHandler resultHandler,ErrorMessageHandler errorMessageHandler){
  if (offersToBeEdited.containsKey(openOffer.getId())) {
    log.warn(""String_Node_Str"");
    resultHandler.handleResult();
    return;
  }
  offersToBeEdited.put(openOffer.getId(),openOffer);
  if (openOffer.isDeactivated()) {
    resultHandler.handleResult();
  }
 else {
    deactivateOpenOffer(openOffer,() -> resultHandler.handleResult(),errorMessage -> {
      offersToBeEdited.remove(openOffer.getId());
      errorMessageHandler.handleErrorMessage(errorMessage);
    }
);
  }
}"
69135,"private void handleOfferAvailabilityRequest(OfferAvailabilityRequest message,NodeAddress sender){
  log.trace(""String_Node_Str"" + message.getClass().getSimpleName() + ""String_Node_Str""+ sender);
  if (p2PService.isBootstrapped()) {
    if (!stopped) {
      try {
        Validator.nonEmptyStringOf(message.offerId);
        checkNotNull(message.getPubKeyRing());
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + message.toString());
        return;
      }
      Optional<OpenOffer> openOfferOptional=getOpenOfferById(message.offerId);
      AvailabilityResult availabilityResult;
      if (openOfferOptional.isPresent()) {
        if (openOfferOptional.get().getState() == OpenOffer.State.AVAILABLE) {
          final Offer offer=openOfferOptional.get().getOffer();
          if (!preferences.getIgnoreTradersList().stream().filter(i -> i.equals(offer.getMakerNodeAddress().getHostNameWithoutPostFix())).findAny().isPresent()) {
            availabilityResult=AvailabilityResult.AVAILABLE;
            List<NodeAddress> acceptedArbitrators=user.getAcceptedArbitratorAddresses();
            if (acceptedArbitrators != null && !acceptedArbitrators.isEmpty()) {
              try {
                offer.checkTradePriceTolerance(message.getTakersTradePrice());
              }
 catch (              TradePriceOutOfToleranceException e) {
                log.warn(""String_Node_Str"");
                availabilityResult=AvailabilityResult.PRICE_OUT_OF_TOLERANCE;
              }
catch (              MarketPriceNotAvailableException e) {
                log.warn(e.getMessage());
                availabilityResult=AvailabilityResult.MARKET_PRICE_NOT_AVAILABLE;
              }
catch (              Throwable e) {
                log.warn(""String_Node_Str"" + e.getMessage());
                availabilityResult=AvailabilityResult.UNKNOWN_FAILURE;
              }
            }
 else {
              log.warn(""String_Node_Str"" + acceptedArbitrators);
              availabilityResult=AvailabilityResult.NO_ARBITRATORS;
            }
          }
 else {
            availabilityResult=AvailabilityResult.USER_IGNORED;
          }
        }
 else {
          availabilityResult=AvailabilityResult.OFFER_TAKEN;
        }
      }
 else {
        log.warn(""String_Node_Str"");
        availabilityResult=AvailabilityResult.OFFER_TAKEN;
      }
      try {
        p2PService.sendEncryptedDirectMessage(sender,message.getPubKeyRing(),new OfferAvailabilityResponse(message.offerId,availabilityResult),new SendDirectMessageListener(){
          @Override public void onArrived(){
            log.trace(""String_Node_Str"");
          }
          @Override public void onFault(){
            log.debug(""String_Node_Str"");
          }
        }
);
      }
 catch (      Throwable t) {
        t.printStackTrace();
        log.debug(""String_Node_Str"" + t.getMessage());
      }
    }
 else {
      log.debug(""String_Node_Str"");
    }
  }
 else {
    log.info(""String_Node_Str"");
  }
}","private void handleOfferAvailabilityRequest(OfferAvailabilityRequest message,NodeAddress sender){
  log.trace(""String_Node_Str"" + message.getClass().getSimpleName() + ""String_Node_Str""+ sender);
  if (p2PService.isBootstrapped()) {
    if (!stopped) {
      try {
        Validator.nonEmptyStringOf(message.offerId);
        checkNotNull(message.getPubKeyRing());
      }
 catch (      Throwable t) {
        log.warn(""String_Node_Str"" + message.toString());
        return;
      }
      Optional<OpenOffer> openOfferOptional=getOpenOfferById(message.offerId);
      AvailabilityResult availabilityResult;
      if (openOfferOptional.isPresent()) {
        if (openOfferOptional.get().getState() == OpenOffer.State.AVAILABLE) {
          final Offer offer=openOfferOptional.get().getOffer();
          if (!preferences.getIgnoreTradersList().stream().anyMatch(i -> i.equals(offer.getMakerNodeAddress().getHostNameWithoutPostFix()))) {
            availabilityResult=AvailabilityResult.AVAILABLE;
            List<NodeAddress> acceptedArbitrators=user.getAcceptedArbitratorAddresses();
            if (acceptedArbitrators != null && !acceptedArbitrators.isEmpty()) {
              try {
                offer.checkTradePriceTolerance(message.getTakersTradePrice());
              }
 catch (              TradePriceOutOfToleranceException e) {
                log.warn(""String_Node_Str"");
                availabilityResult=AvailabilityResult.PRICE_OUT_OF_TOLERANCE;
              }
catch (              MarketPriceNotAvailableException e) {
                log.warn(e.getMessage());
                availabilityResult=AvailabilityResult.MARKET_PRICE_NOT_AVAILABLE;
              }
catch (              Throwable e) {
                log.warn(""String_Node_Str"" + e.getMessage());
                availabilityResult=AvailabilityResult.UNKNOWN_FAILURE;
              }
            }
 else {
              log.warn(""String_Node_Str"" + acceptedArbitrators);
              availabilityResult=AvailabilityResult.NO_ARBITRATORS;
            }
          }
 else {
            availabilityResult=AvailabilityResult.USER_IGNORED;
          }
        }
 else {
          availabilityResult=AvailabilityResult.OFFER_TAKEN;
        }
      }
 else {
        log.warn(""String_Node_Str"");
        availabilityResult=AvailabilityResult.OFFER_TAKEN;
      }
      try {
        p2PService.sendEncryptedDirectMessage(sender,message.getPubKeyRing(),new OfferAvailabilityResponse(message.offerId,availabilityResult),new SendDirectMessageListener(){
          @Override public void onArrived(){
            log.trace(""String_Node_Str"");
          }
          @Override public void onFault(){
            log.debug(""String_Node_Str"");
          }
        }
);
      }
 catch (      Throwable t) {
        t.printStackTrace();
        log.debug(""String_Node_Str"" + t.getMessage());
      }
    }
 else {
      log.debug(""String_Node_Str"");
    }
  }
 else {
    log.info(""String_Node_Str"");
  }
}"
69136,"@SuppressWarnings(""String_Node_Str"") @Inject public FullNode(WritableBsqBlockChain writableBsqBlockChain,ReadableBsqBlockChain readableBsqBlockChain,SnapshotManager snapshotManager,P2PService p2PService,FullNodeExecutor bsqFullNodeExecutor,JsonBlockChainExporter jsonBlockChainExporter,FeeService feeService,FullNodeNetworkService fullNodeNetworkService){
  super(writableBsqBlockChain,readableBsqBlockChain,snapshotManager,p2PService,feeService);
  this.bsqFullNodeExecutor=bsqFullNodeExecutor;
  this.jsonBlockChainExporter=jsonBlockChainExporter;
  this.fullNodeNetworkService=fullNodeNetworkService;
}","@SuppressWarnings(""String_Node_Str"") @Inject public FullNode(ReadableBsqBlockChain readableBsqBlockChain,SnapshotManager snapshotManager,P2PService p2PService,FullNodeExecutor bsqFullNodeExecutor,JsonBlockChainExporter jsonBlockChainExporter,FullNodeNetworkService fullNodeNetworkService){
  super(readableBsqBlockChain,snapshotManager,p2PService);
  this.bsqFullNodeExecutor=bsqFullNodeExecutor;
  this.jsonBlockChainExporter=jsonBlockChainExporter;
  this.fullNodeNetworkService=fullNodeNetworkService;
}"
69137,"@SuppressWarnings(""String_Node_Str"") @Inject public LiteNode(WritableBsqBlockChain writableBsqBlockChain,ReadableBsqBlockChain readableBsqBlockChain,SnapshotManager snapshotManager,P2PService p2PService,LiteNodeExecutor bsqLiteNodeExecutor,FeeService feeService,LiteNodeNetworkService liteNodeNetworkService){
  super(writableBsqBlockChain,readableBsqBlockChain,snapshotManager,p2PService,feeService);
  this.bsqLiteNodeExecutor=bsqLiteNodeExecutor;
  this.liteNodeNetworkService=liteNodeNetworkService;
}","@SuppressWarnings(""String_Node_Str"") @Inject public LiteNode(ReadableBsqBlockChain readableBsqBlockChain,SnapshotManager snapshotManager,P2PService p2PService,LiteNodeExecutor bsqLiteNodeExecutor,LiteNodeNetworkService liteNodeNetworkService){
  super(readableBsqBlockChain,snapshotManager,p2PService);
  this.bsqLiteNodeExecutor=bsqLiteNodeExecutor;
  this.liteNodeNetworkService=liteNodeNetworkService;
}"
69138,"private ProposalList getSortedProposalList(){
  FilteredList<Proposal> proposals=proposalService.getActiveProposals();
  BlindVoteConsensus.sortProposalList(proposals);
  return new ProposalList(proposals);
}","private ProposalList getSortedProposalList(){
  List<Proposal> proposals=new ArrayList<>(proposalService.getActiveProposals());
  BlindVoteConsensus.sortProposalList(proposals);
  return new ProposalList(proposals);
}"
69139,"@Inject public ProposalService(P2PService p2PService,WalletsManager walletsManager,PeriodService periodService,ReadableBsqBlockChain readableBsqBlockChain,KeyRing keyRing,Storage<ProposalList> proposalListStorage){
  this.p2PService=p2PService;
  this.walletsManager=walletsManager;
  this.periodService=periodService;
  this.readableBsqBlockChain=readableBsqBlockChain;
  this.proposalListStorage=proposalListStorage;
  signaturePubKey=keyRing.getPubKeyRing().getSignaturePubKey();
  activeProposals.setPredicate(proposal -> periodService.isTxInCurrentCycle(proposal.getTxId()));
  closedProposals.setPredicate(proposal -> periodService.isTxInPastCycle(proposal.getTxId()));
}","@Inject public ProposalService(P2PService p2PService,WalletsManager walletsManager,PeriodService periodService,ReadableBsqBlockChain readableBsqBlockChain,KeyRing keyRing,Storage<ProposalList> proposalListStorage){
  this.p2PService=p2PService;
  this.walletsManager=walletsManager;
  this.periodService=periodService;
  this.readableBsqBlockChain=readableBsqBlockChain;
  this.proposalListStorage=proposalListStorage;
  signaturePubKey=keyRing.getPubKeyRing().getSignaturePubKey();
  readableBsqBlockChain.addListener(this);
}"
69140,"private void addProposal(ProposalPayload proposalPayload,boolean storeLocally){
  if (!listContains(proposalPayload)) {
    observableList.add(createSpecificProposal(proposalPayload));
    if (storeLocally)     persist();
  }
 else {
    if (!isMine(proposalPayload))     log.warn(""String_Node_Str"");
  }
}","private void addProposal(ProposalPayload proposalPayload,boolean storeLocally){
  if (!listContains(proposalPayload)) {
    log.info(""String_Node_Str"" + proposalPayload);
    observableList.add(createSpecificProposal(proposalPayload));
    if (storeLocally)     persist();
    upDatePredicate();
  }
 else {
    if (!isMine(proposalPayload))     log.warn(""String_Node_Str"");
  }
}"
69141,"public Set<TxOutput> getBlindVoteStakeTxOutputs(){
  return lock.read(() -> getVerifiedTxOutputs().stream().filter(e -> e.getTxOutputType() == TxOutputType.BLIND_VOTE_LOCK_STAKE_OUTPUT).collect(Collectors.toSet()));
}","public Set<TxOutput> getBlindVoteStakeTxOutputs(){
  return lock.read(() -> getUnspentTxOutputs().stream().filter(e -> e.getTxOutputType() == TxOutputType.BLIND_VOTE_LOCK_STAKE_OUTPUT).collect(Collectors.toSet()));
}"
69142,"private Optional<OpReturnType> getOptionalOpReturnType(Tx tx,Model model){
  if (model.isBsqOutputFound()) {
    if (model.getOpReturnTypeCandidate() == model.getVerifiedOpReturnType()) {
      final OpReturnType verifiedOpReturnType=model.getVerifiedOpReturnType();
      return verifiedOpReturnType != null ? Optional.of(verifiedOpReturnType) : Optional.empty();
    }
 else {
      final String msg=""String_Node_Str"" + ""String_Node_Str"" + model.getOpReturnTypeCandidate() + ""String_Node_Str""+ model.getVerifiedOpReturnType();
      DevEnv.logErrorAndThrowIfDevMode(msg);
    }
  }
 else {
    final String msg=""String_Node_Str"" + tx;
    log.warn(msg);
    if (DevEnv.isDevMode())     throw new RuntimeException(msg);
  }
  return Optional.empty();
}","private Optional<OpReturnType> getOptionalOpReturnType(Tx tx,Model model){
  if (model.isBsqOutputFound()) {
    if (model.getOpReturnTypeCandidate() == model.getVerifiedOpReturnType()) {
      final OpReturnType verifiedOpReturnType=model.getVerifiedOpReturnType();
      return verifiedOpReturnType != null ? Optional.of(verifiedOpReturnType) : Optional.empty();
    }
 else {
      final String msg=""String_Node_Str"" + ""String_Node_Str"" + model.getOpReturnTypeCandidate() + ""String_Node_Str""+ model.getVerifiedOpReturnType();
      log.error(msg);
    }
  }
 else {
    final String msg=""String_Node_Str"" + tx;
    log.warn(msg);
    if (DevEnv.isDevMode())     throw new RuntimeException(msg);
  }
  return Optional.empty();
}"
69143,"@Test public void calculatePhaseTest(){
  int totalPhaseBlocks=service.getNumBlocksOfCycle();
  int phase1=DaoPeriodService.Phase.PROPOSAL.getDurationInBlocks();
  int phase2=phase1 + DaoPeriodService.Phase.BREAK1.getDurationInBlocks();
  int phase3=phase2 + DaoPeriodService.Phase.BLIND_VOTE.getDurationInBlocks();
  int phase4=phase3 + DaoPeriodService.Phase.BREAK2.getDurationInBlocks();
  int phase5=phase4 + DaoPeriodService.Phase.VOTE_REVEAL.getDurationInBlocks();
  int phase6=phase5 + DaoPeriodService.Phase.BREAK3.getDurationInBlocks();
  assertEquals(DaoPeriodService.Phase.PROPOSAL,service.calculatePhase(service.getRelativeBlocksInCycle(0,0,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.PROPOSAL,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase1 - 1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BREAK1,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BREAK1,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase2 - 1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BLIND_VOTE,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase2,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BLIND_VOTE,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase3 - 1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BREAK2,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase3,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BREAK2,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase4 - 1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.VOTE_REVEAL,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase4,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.VOTE_REVEAL,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase5 - 1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BREAK3,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase5,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BREAK3,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase6 - 1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.ISSUANCE,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase6,totalPhaseBlocks)));
}","@Test public void calculatePhaseTest(){
  int totalPhaseBlocks=service.getNumBlocksOfCycle();
  int phase1=DaoPeriodService.Phase.PROPOSAL.getDurationInBlocks();
  int phase2=phase1 + DaoPeriodService.Phase.BREAK1.getDurationInBlocks();
  int phase3=phase2 + DaoPeriodService.Phase.OPEN_FOR_VOTING.getDurationInBlocks();
  int phase4=phase3 + DaoPeriodService.Phase.BREAK2.getDurationInBlocks();
  int phase5=phase4 + DaoPeriodService.Phase.VOTE_REVEAL.getDurationInBlocks();
  int phase6=phase5 + DaoPeriodService.Phase.BREAK3.getDurationInBlocks();
  assertEquals(DaoPeriodService.Phase.PROPOSAL,service.calculatePhase(service.getRelativeBlocksInCycle(0,0,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.PROPOSAL,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase1 - 1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BREAK1,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BREAK1,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase2 - 1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.OPEN_FOR_VOTING,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase2,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.OPEN_FOR_VOTING,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase3 - 1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BREAK2,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase3,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BREAK2,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase4 - 1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.VOTE_REVEAL,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase4,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.VOTE_REVEAL,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase5 - 1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BREAK3,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase5,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.BREAK3,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase6 - 1,totalPhaseBlocks)));
  assertEquals(DaoPeriodService.Phase.ISSUANCE,service.calculatePhase(service.getRelativeBlocksInCycle(0,phase6,totalPhaseBlocks)));
}"
69144,"@Override public TopicBean clone(){
  TopicBean bean=null;
  try {
    bean=(TopicBean)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return bean;
}","@Override public TopicBean clone(){
  TopicBean bean=null;
  try {
    bean=(TopicBean)super.clone();
    bean.newsArray=(ArrayList<TopicNewsBean>)newsArray.clone();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return bean;
}"
69145,"@Override protected void convert(BaseViewHolder holder,TopicBean topicBean){
  int newsCount=0;
  String mediaName=""String_Node_Str"";
  if (null != topicBean.getNewsArray() && !topicBean.getNewsArray().isEmpty()) {
    newsCount=topicBean.getNewsArray().size();
    mediaName=topicBean.getNewsArray().get(0).getSiteName();
  }
  holder.setText(R.id.tv_title,topicBean.getTitle());
  holder.setText(R.id.tv_summary,topicBean.getSummary());
  holder.setVisible(R.id.tv_summary,TextUtils.isEmpty(topicBean.getSummary()) ? false : true);
  holder.setText(R.id.tv_time,FormatUtils.getRelativeTimeSpanString(topicBean.getPublishDate()));
  if (newsCount == 0) {
    holder.setGone(R.id.line,true);
    holder.setGone(R.id.fl_item_footer,true);
  }
 else   if (newsCount == 1) {
    holder.setText(R.id.tv_info,mContext.getString(R.string.single__media___report,mediaName));
  }
 else {
    holder.setText(R.id.tv_info,mContext.getString(R.string.multi__media___report,mediaName,newsCount));
  }
  holder.setVisible(R.id.img_instant_read,topicBean.hasInstantView() ? true : false);
  holder.setOnClickListener(R.id.img_instant_read,v -> InstantReadFragment.newInstance(topicBean.getId()).show(((MainActivity)mContext).getSupportFragmentManager(),InstantReadFragment.TAG));
  holder.setOnClickListener(R.id.ll_item_header,v -> ((SupportActivity)mContext).findFragment(MainFragment.class).start(TopicDetailFragment.newInstance(topicBean.getId(),topicBean.getTitle())));
  ExpandableLayout layoutExpand=holder.getView(R.id.layout_expand);
  layoutExpand.setExpanded(false);
  ImageView imgExpandState=holder.getView(R.id.img_expand_state);
  imgExpandState.setImageResource(R.drawable.ic_more_info);
  holder.setOnClickListener(R.id.fl_item_footer,v -> {
    if (layoutExpand.getState() == ExpandableLayout.State.COLLAPSED) {
      imgExpandState.setImageResource(R.drawable.ic_less_info);
      layoutExpand.setExpanded(true);
    }
 else     if (layoutExpand.getState() == ExpandableLayout.State.EXPANDED) {
      imgExpandState.setImageResource(R.drawable.ic_more_info);
      layoutExpand.setExpanded(false);
    }
  }
);
  ArrayList<TopicNewsBean> newsList=topicBean.getNewsArray();
  LinearLayout layoutSource=holder.getView(R.id.layout_source);
  layoutSource.removeAllViews();
  for (int i=0; i < newsList.size(); i++) {
    View newsItemView=mLayoutInflater.inflate(R.layout.item_topic_news,null,false);
    layoutSource.addView(newsItemView);
    TopicNewsBean news=newsList.get(i);
    NewsViewHolder newsViewHolder=(NewsViewHolder)newsItemView.getTag();
    if (newsViewHolder == null) {
      newsViewHolder=new NewsViewHolder(newsItemView);
      newsItemView.setTag(newsViewHolder);
    }
    newsViewHolder.bindData(news);
    if (newsList.size() > MOST_NEWS_COUNT_PER_ITEM && i == MOST_NEWS_COUNT_PER_ITEM - 1) {
      View newsMoreView=mLayoutInflater.inflate(R.layout.item_topic_news_more,null,false);
      newsMoreView.setOnClickListener(v -> ((SupportActivity)mContext).findFragment(MainFragment.class).start(TopicDetailFragment.newInstance(topicBean.getId(),topicBean.getTitle())));
      layoutSource.addView(newsMoreView);
      break;
    }
 else {
      if (i == newsList.size() - 1) {
        newsViewHolder.setLineVisibility(View.INVISIBLE);
      }
    }
  }
}","@Override protected void convert(BaseViewHolder holder,TopicBean topicBean){
  int newsCount=0;
  String mediaName=""String_Node_Str"";
  if (null != topicBean.getNewsArray() && !topicBean.getNewsArray().isEmpty()) {
    newsCount=topicBean.getNewsArray().size();
    mediaName=topicBean.getNewsArray().get(0).getSiteName();
  }
  holder.setText(R.id.tv_title,topicBean.getTitle());
  holder.setText(R.id.tv_summary,topicBean.getSummary());
  holder.setVisible(R.id.tv_summary,TextUtils.isEmpty(topicBean.getSummary()) ? false : true);
  holder.setText(R.id.tv_time,FormatUtils.getRelativeTimeSpanString(topicBean.getPublishDate()));
  if (newsCount == 0) {
    holder.setGone(R.id.line,true);
    holder.setGone(R.id.fl_item_footer,true);
  }
 else   if (newsCount == 1) {
    holder.setText(R.id.tv_info,mContext.getString(R.string.single__media___report,mediaName));
  }
 else {
    holder.setText(R.id.tv_info,mContext.getString(R.string.multi__media___report,mediaName,newsCount));
  }
  holder.setVisible(R.id.img_instant_read,topicBean.hasInstantView() ? true : false);
  holder.setOnClickListener(R.id.img_instant_read,v -> InstantReadFragment.newInstance(topicBean.getId()).show(((MainActivity)mContext).getSupportFragmentManager(),InstantReadFragment.TAG));
  holder.setOnClickListener(R.id.ll_item_header,v -> ((SupportActivity)mContext).findFragment(MainFragment.class).start(TopicDetailFragment.newInstance(topicBean.getId(),topicBean.getTitle())));
  ExpandableLayout layoutExpand=holder.getView(R.id.layout_expand);
  layoutExpand.setExpanded(false);
  ImageView imgExpandState=holder.getView(R.id.img_expand_state);
  imgExpandState.setImageResource(R.drawable.ic_more_info);
  holder.setOnClickListener(R.id.fl_item_footer,v -> {
    if (layoutExpand.getState() == ExpandableLayout.State.COLLAPSED) {
      imgExpandState.setImageResource(R.drawable.ic_less_info);
      layoutExpand.setExpanded(true);
    }
 else     if (layoutExpand.getState() == ExpandableLayout.State.EXPANDED) {
      imgExpandState.setImageResource(R.drawable.ic_more_info);
      layoutExpand.setExpanded(false);
    }
  }
);
  Log.e(""String_Node_Str"",""String_Node_Str"" + topicBean.getTitle() + ""String_Node_Str"");
  ArrayList<TopicNewsBean> newsList=topicBean.getNewsArray();
  if (null == newsList || newsList.isEmpty()) {
    return;
  }
  LinearLayout layoutSource=holder.getView(R.id.layout_source);
  Log.e(""String_Node_Str"",""String_Node_Str"" + layoutSource.getChildCount());
  if (layoutSource.getChildCount() < MOST_NEWS_COUNT_PER_ITEM) {
  }
  adjustLayoutSourceChildren(layoutSource,newsList.size());
  for (int i=0; i < layoutSource.getChildCount(); i++) {
    TopicNewsBean news=newsList.get(i);
    View view=layoutSource.getChildAt(i);
    NewsViewHolder newsViewHolder=(NewsViewHolder)view.getTag();
    if (newsViewHolder == null) {
      newsViewHolder=new NewsViewHolder(view);
      view.setTag(newsViewHolder);
    }
    newsViewHolder.bindData(news);
  }
  Log.e(""String_Node_Str"",""String_Node_Str"" + layoutSource.getChildCount());
}"
69146,"void bindData(@NonNull TopicNewsBean news){
  this.news=news;
  tvTitle.setText(news.getTitle());
  String infoText=mContext.getString(R.string.site_name___time,news.getSiteName(),FormatUtils.getRelativeTimeSpanString(news.getPublishDate()));
  SpannableString spannableInfoText=new SpannableString(infoText);
  spannableInfoText.setSpan(new StyleSpan(Typeface.BOLD),0,news.getSiteName().length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  tvInfo.setText(spannableInfoText);
}","void bindData(@NonNull TopicNewsBean news){
  this.news=news;
  tvTitle.setText(news.getTitle());
  Log.e(""String_Node_Str"",""String_Node_Str"" + news.getTitle());
  String infoText=mContext.getString(R.string.site_name___time,news.getSiteName(),FormatUtils.getRelativeTimeSpanString(news.getPublishDate()));
  SpannableString spannableInfoText=new SpannableString(infoText);
  spannableInfoText.setSpan(new StyleSpan(Typeface.BOLD),0,news.getSiteName().length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  tvInfo.setText(spannableInfoText);
}"
69147,"@Inject CommonPresenter(DataManager dataManager){
  super(dataManager);
  this.mDataManager=dataManager;
  initEvent();
}","@Inject CommonPresenter(DataManager dataManager){
  super(dataManager);
  this.mDataManager=dataManager;
}"
69148,"@Override public void onAttatch(MainContract.View view){
  super.onAttatch(view);
  registerEvent();
}","@Override public void onAttatch(MainContract.View view){
  super.onAttatch(view);
  initEvent();
}"
69149,"@OnClick(R.id.txt_new) void onClick(){
  mTxtNew.setVisibility(View.GONE);
  if (!mRefreshLayout.isRefreshing()) {
    mRefreshLayout.setRefreshing(true);
    onRefresh();
  }
}","@OnClick(R.id.txt_new) void onClick(){
  mTxtNew.setVisibility(View.GONE);
  mRecyclerView.scrollToPosition(0);
  mRefreshLayout.setRefreshing(true);
  onRefresh();
}"
69150,"@Override public void onFabClick(){
  mRecyclerView.scrollToPosition(0);
  mTxtNew.setVisibility(View.GONE);
}","@Override public void onFabClick(){
  mRecyclerView.scrollToPosition(0);
}"
69151,"@Override public void bindData(DataListBean<TopicBean> data){
  if (null != data) {
    if (null != data.getData() && !data.getData().isEmpty()) {
      List<TopicBean> dataList=data.getData();
      if (isPullToRefresh) {
        mRefreshLayout.setRefreshing(false);
        mAdapter.setNewData(dataList);
      }
 else {
        mAdapter.addData(dataList);
        mAdapter.loadMoreComplete();
        mAdapter.setEnableLoadMore(true);
      }
    }
 else {
      if (isPullToRefresh) {
      }
 else {
        mAdapter.loadMoreEnd(false);
      }
    }
  }
 else {
    if (isPullToRefresh) {
    }
 else {
      mAdapter.loadMoreFail();
    }
  }
}","@Override public void bindData(DataListBean<TopicBean> data){
  if (null != data) {
    if (null != data.getData() && !data.getData().isEmpty()) {
      List<TopicBean> dataList=data.getData();
      if (isPullToRefresh) {
        mTxtNew.setVisibility(View.GONE);
        mRefreshLayout.setRefreshing(false);
        mAdapter.setNewData(dataList);
        mRecyclerView.scrollToPosition(0);
      }
 else {
        mAdapter.addData(dataList);
        mAdapter.loadMoreComplete();
        mAdapter.setEnableLoadMore(true);
      }
    }
 else {
      if (isPullToRefresh) {
      }
 else {
        mAdapter.loadMoreEnd(false);
      }
    }
  }
 else {
    if (isPullToRefresh) {
    }
 else {
      mAdapter.loadMoreFail();
    }
  }
}"
69152,"@Inject TopicPresenter(DataManager dataManager){
  super(dataManager);
  this.mDataManager=dataManager;
  initEvent();
}","@Inject TopicPresenter(DataManager dataManager){
  super(dataManager);
  this.mDataManager=dataManager;
}"
69153,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  performInject();
  if (null != mPresenter) {
    mPresenter.onAttatch(this);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  performInject();
}"
69154,"@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  mContentView=inflater.inflate(getLayoutId(),container,false);
  unBinder=ButterKnife.bind(this,mContentView);
  initView();
  initDataAndEvent();
  return mContentView;
}","@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  mContentView=inflater.inflate(getLayoutId(),container,false);
  unBinder=ButterKnife.bind(this,mContentView);
  initView();
  return mContentView;
}"
69155,"@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  if (mContentView == null) {
    mContentView=inflater.inflate(getLayoutId(),container,false);
  }
  unBinder=ButterKnife.bind(this,mContentView);
  initView();
  initDataAndEvent();
  ViewGroup parent=(ViewGroup)mContentView.getParent();
  if (parent != null) {
    parent.removeView(mContentView);
  }
  return mContentView;
}","@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  if (mContentView == null) {
    mContentView=inflater.inflate(getLayoutId(),container,false);
  }
  unBinder=ButterKnife.bind(this,mContentView);
  initView();
  ViewGroup parent=(ViewGroup)mContentView.getParent();
  if (parent != null) {
    parent.removeView(mContentView);
  }
  return mContentView;
}"
69156,"@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  mContentView=inflater.inflate(getLayoutId(),container,false);
  unBinder=ButterKnife.bind(this,mContentView);
  RxBus.getInstance().post(new SetDrawerStatusEvent(DrawerLayout.LOCK_MODE_LOCKED_CLOSED));
  initView();
  initDataAndEvent();
  return attachToSwipeBack(mContentView);
}","@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  mContentView=inflater.inflate(getLayoutId(),container,false);
  unBinder=ButterKnife.bind(this,mContentView);
  RxBus.getInstance().post(new SetDrawerStatusEvent(DrawerLayout.LOCK_MODE_LOCKED_CLOSED));
  initView();
  return attachToSwipeBack(mContentView);
}"
69157,"void adjustLayoutSourceChildren(LinearLayout layoutSource,int count){
  if (layoutSource.getChildCount() < count) {
    int offset=count - layoutSource.getChildCount();
    for (int i=0; i < offset; i++) {
      View view;
      if (newsViewPool.isEmpty()) {
        view=mLayoutInflater.inflate(R.layout.item_topic_news,layoutSource,false);
      }
 else {
        view=newsViewPool.remove(0);
      }
      layoutSource.addView(view);
    }
  }
 else   if (layoutSource.getChildCount() > count) {
    int offset=layoutSource.getChildCount() - count;
    for (int i=0; i < offset; i++) {
      View view=layoutSource.getChildAt(0);
      layoutSource.removeView(view);
      newsViewPool.add(view);
    }
  }
}","void adjustLayoutSourceChildren(LinearLayout layoutSource,int count){
  if (layoutSource.getChildCount() < count) {
    int offset=count - layoutSource.getChildCount();
    for (int i=0; i < offset; i++) {
      View view;
      if (newsViewPool.isEmpty()) {
        view=mLayoutInflater.inflate(R.layout.item_topic_news,null,false);
      }
 else {
        view=newsViewPool.remove(0);
      }
      layoutSource.addView(view);
    }
  }
 else   if (layoutSource.getChildCount() > count) {
    int offset=layoutSource.getChildCount() - count;
    for (int i=0; i < offset; i++) {
      View view=layoutSource.getChildAt(0);
      layoutSource.removeView(view);
      newsViewPool.add(view);
    }
  }
}"
69158,"@Override protected void convert(BaseViewHolder holder,TopicBean topicBean){
  int newsCount=0;
  String mediaName=""String_Node_Str"";
  if (null != topicBean.getNewsArray() && !topicBean.getNewsArray().isEmpty()) {
    newsCount=topicBean.getNewsArray().size();
    mediaName=topicBean.getNewsArray().get(0).getSiteName();
  }
  holder.setText(R.id.tv_title,topicBean.getTitle());
  holder.setText(R.id.tv_summary,topicBean.getSummary());
  holder.setVisible(R.id.tv_summary,TextUtils.isEmpty(topicBean.getSummary()) ? false : true);
  holder.setText(R.id.tv_time,FormatUtils.getRelativeTimeSpanString(topicBean.getPublishDate()));
  if (newsCount == 0) {
    holder.setGone(R.id.line,true);
    holder.setGone(R.id.fl_item_footer,true);
  }
 else   if (newsCount == 1) {
    holder.setText(R.id.tv_info,mContext.getString(R.string.single__media___report,mediaName));
  }
 else {
    holder.setText(R.id.tv_info,mContext.getString(R.string.multi__media___report,mediaName,newsCount));
  }
  holder.setVisible(R.id.img_instant_read,topicBean.hasInstantView() ? true : false);
  holder.setOnClickListener(R.id.img_instant_read,v -> InstantReadFragment.newInstance(topicBean.getId()).show(((MainActivity)mContext).getSupportFragmentManager(),InstantReadFragment.TAG));
  holder.setOnClickListener(R.id.ll_item_header,v -> ((SupportActivity)mContext).findFragment(MainFragment.class).start(TopicDetailFragment.newInstance(topicBean.getId(),topicBean.getTitle())));
  ExpandableLayout layoutExpand=holder.getView(R.id.layout_expand);
  layoutExpand.setExpanded(false);
  ImageView imgExpandState=holder.getView(R.id.img_expand_state);
  imgExpandState.setImageResource(R.drawable.ic_more_info);
  holder.setOnClickListener(R.id.fl_item_footer,v -> {
    if (layoutExpand.getState() == ExpandableLayout.State.COLLAPSED) {
      imgExpandState.setImageResource(R.drawable.ic_less_info);
      layoutExpand.setExpanded(true);
    }
 else     if (layoutExpand.getState() == ExpandableLayout.State.EXPANDED) {
      imgExpandState.setImageResource(R.drawable.ic_more_info);
      layoutExpand.setExpanded(false);
    }
  }
);
  Log.e(""String_Node_Str"",""String_Node_Str"" + topicBean.getTitle() + ""String_Node_Str"");
  ArrayList<TopicNewsBean> newsList=topicBean.getNewsArray();
  if (null == newsList || newsList.isEmpty()) {
    return;
  }
  LinearLayout layoutSource=holder.getView(R.id.layout_source);
  Log.e(""String_Node_Str"",""String_Node_Str"" + layoutSource.getChildCount());
  if (layoutSource.getChildCount() < MOST_NEWS_COUNT_PER_ITEM) {
  }
  adjustLayoutSourceChildren(layoutSource,newsList.size());
  for (int i=0; i < layoutSource.getChildCount(); i++) {
    TopicNewsBean news=newsList.get(i);
    View view=layoutSource.getChildAt(i);
    NewsViewHolder newsViewHolder=(NewsViewHolder)view.getTag();
    if (newsViewHolder == null) {
      newsViewHolder=new NewsViewHolder(view);
      view.setTag(newsViewHolder);
    }
    newsViewHolder.bindData(news);
  }
  Log.e(""String_Node_Str"",""String_Node_Str"" + layoutSource.getChildCount());
}","@Override protected void convert(BaseViewHolder holder,TopicBean topicBean){
  int newsCount=0;
  String mediaName=""String_Node_Str"";
  if (null != topicBean.getNewsArray() && !topicBean.getNewsArray().isEmpty()) {
    newsCount=topicBean.getNewsArray().size();
    mediaName=topicBean.getNewsArray().get(0).getSiteName();
  }
  holder.setText(R.id.tv_title,topicBean.getTitle());
  holder.setText(R.id.tv_summary,topicBean.getSummary());
  holder.setVisible(R.id.tv_summary,TextUtils.isEmpty(topicBean.getSummary()) ? false : true);
  holder.setText(R.id.tv_time,FormatUtils.getRelativeTimeSpanString(topicBean.getPublishDate()));
  if (newsCount == 0) {
    holder.setGone(R.id.line,true);
    holder.setGone(R.id.fl_item_footer,true);
  }
 else   if (newsCount == 1) {
    holder.setText(R.id.tv_info,mContext.getString(R.string.single__media___report,mediaName));
  }
 else {
    holder.setText(R.id.tv_info,mContext.getString(R.string.multi__media___report,mediaName,newsCount));
  }
  holder.setVisible(R.id.img_instant_read,topicBean.hasInstantView() ? true : false);
  holder.setOnClickListener(R.id.img_instant_read,v -> InstantReadFragment.newInstance(topicBean.getId()).show(((MainActivity)mContext).getSupportFragmentManager(),InstantReadFragment.TAG));
  holder.setOnClickListener(R.id.ll_item_header,v -> ((SupportActivity)mContext).findFragment(MainFragment.class).start(TopicDetailFragment.newInstance(topicBean.getId(),topicBean.getTitle())));
  ExpandableLayout layoutExpand=holder.getView(R.id.layout_expand);
  layoutExpand.setExpanded(false);
  ImageView imgExpandState=holder.getView(R.id.img_expand_state);
  imgExpandState.setImageResource(R.drawable.ic_more_info);
  holder.setOnClickListener(R.id.fl_item_footer,v -> {
    if (layoutExpand.getState() == ExpandableLayout.State.COLLAPSED) {
      imgExpandState.setImageResource(R.drawable.ic_less_info);
      layoutExpand.setExpanded(true);
    }
 else     if (layoutExpand.getState() == ExpandableLayout.State.EXPANDED) {
      imgExpandState.setImageResource(R.drawable.ic_more_info);
      layoutExpand.setExpanded(false);
    }
  }
);
  ArrayList<TopicNewsBean> newsList=topicBean.getNewsArray();
  if (null == newsList || newsList.isEmpty()) {
    return;
  }
  LinearLayout layoutSource=holder.getView(R.id.layout_source);
  View moreItemView=null;
  if (layoutSource.getChildCount() > MOST_NEWS_COUNT_PER_ITEM) {
    moreItemView=layoutSource.getChildAt(MOST_NEWS_COUNT_PER_ITEM);
    layoutSource.removeViewAt(MOST_NEWS_COUNT_PER_ITEM);
  }
  adjustLayoutSourceChildren(layoutSource,newsList.size() > MOST_NEWS_COUNT_PER_ITEM ? MOST_NEWS_COUNT_PER_ITEM : newsList.size());
  for (int i=0; i < layoutSource.getChildCount(); i++) {
    TopicNewsBean news=newsList.get(i);
    View view=layoutSource.getChildAt(i);
    NewsViewHolder newsViewHolder=(NewsViewHolder)view.getTag();
    if (newsViewHolder == null) {
      newsViewHolder=new NewsViewHolder(view);
      view.setTag(newsViewHolder);
    }
    newsViewHolder.bindData(news);
    newsViewHolder.setLineVisibility(View.VISIBLE);
    if (newsList.size() <= MOST_NEWS_COUNT_PER_ITEM && i == newsList.size() - 1) {
      newsViewHolder.setLineVisibility(View.INVISIBLE);
    }
  }
  if (newsList.size() > MOST_NEWS_COUNT_PER_ITEM) {
    if (null == moreItemView) {
      moreItemView=mLayoutInflater.inflate(R.layout.item_topic_news_more,null,false);
    }
    moreItemView.setOnClickListener(v -> ((SupportActivity)mContext).findFragment(MainFragment.class).start(TopicDetailFragment.newInstance(topicBean.getId(),topicBean.getTitle())));
    layoutSource.addView(moreItemView);
  }
}"
69159,"void bindData(@NonNull TopicNewsBean news){
  this.news=news;
  tvTitle.setText(news.getTitle());
  Log.e(""String_Node_Str"",""String_Node_Str"" + news.getTitle());
  String infoText=mContext.getString(R.string.site_name___time,news.getSiteName(),FormatUtils.getRelativeTimeSpanString(news.getPublishDate()));
  SpannableString spannableInfoText=new SpannableString(infoText);
  spannableInfoText.setSpan(new StyleSpan(Typeface.BOLD),0,news.getSiteName().length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  tvInfo.setText(spannableInfoText);
}","void bindData(@NonNull TopicNewsBean news){
  this.news=news;
  tvTitle.setText(news.getTitle());
  String infoText=mContext.getString(R.string.site_name___time,news.getSiteName(),FormatUtils.getRelativeTimeSpanString(news.getPublishDate()));
  SpannableString spannableInfoText=new SpannableString(infoText);
  spannableInfoText.setSpan(new StyleSpan(Typeface.BOLD),0,news.getSiteName().length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  tvInfo.setText(spannableInfoText);
}"
69160,"@Override public void initDataAndEvent(){
  mTopicId=Objects.requireNonNull(getArguments()).getString(Constants.BUNDLE_TOPIC_ID);
  initWebSettings();
  mPresenter.getTopicInstantRead(mTopicId);
}","@Override public void initDataAndEvent(){
  mTopicId=Objects.requireNonNull(getArguments()).getString(Constants.BUNDLE_TOPIC_ID);
  initWebSettings();
}"
69161,void onFabClick();,void onFabClick(int currentPageIndex);
69162,"@Override public void onFabClick(){
  mRecyclerView.scrollToPosition(0);
  if (!mRefreshLayout.isRefreshing()) {
    mRefreshLayout.setRefreshing(true);
    onRefresh();
  }
}","@Override public void onFabClick(int currentPageIndex){
  if ((mNewsType == NewsBean.TYPE_NEWS && currentPageIndex == 1) || (mNewsType == NewsBean.TYPE_TECHNEWS && currentPageIndex == 2) || (mNewsType == NewsBean.TYPE_BLOCKCHAIN && currentPageIndex == 3)) {
    mRecyclerView.scrollToPosition(0);
    if (!mRefreshLayout.isRefreshing()) {
      mRefreshLayout.setRefreshing(true);
      onRefresh();
    }
  }
}"
69163,"private void initEvent(){
  addSubscribe(RxBus.getInstance().toFlowable(FabClickEvent.class).subscribe(fabClickEvent -> getView().onFabClick()));
}","private void initEvent(){
  addSubscribe(RxBus.getInstance().toFlowable(FabClickEvent.class).subscribe(fabClickEvent -> getView().onFabClick(fabClickEvent.getCurrentItemIndex())));
}"
69164,"@OnClick(R.id.fab) void onFabClick(){
  RxBus.getInstance().post(new FabClickEvent());
}","@OnClick(R.id.fab) void onFabClick(){
  RxBus.getInstance().post(new FabClickEvent(mViewPager.getCurrentItem()));
}"
69165,"private void initEvent(){
  addSubscribe(RxBus.getInstance().toFlowable(FabClickEvent.class).subscribe(fabClickEvent -> getView().onFabClick()));
}","private void initEvent(){
  addSubscribe(RxBus.getInstance().toFlowable(FabClickEvent.class).filter(fabClickEvent -> fabClickEvent.getCurrentItemIndex() == 0).subscribe(fabClickEvent -> getView().onFabClick()));
}"
69166,"@Override public void onDestroy(){
  super.onDestroy();
  if (null != unBinder) {
    unBinder.unbind();
  }
  Log.e(""String_Node_Str"",System.currentTimeMillis() + ""String_Node_Str"");
  Observable.timer(50,TimeUnit.MILLISECONDS).subscribe(timeout -> RxBus.getInstance().post(new SetDrawerStatusEvent(DrawerLayout.LOCK_MODE_UNDEFINED)));
}","@Override public void onDestroy(){
  super.onDestroy();
  if (null != unBinder) {
    unBinder.unbind();
  }
}"
69167,"@Override public void onDestroyView(){
  Log.e(""String_Node_Str"",System.currentTimeMillis() + ""String_Node_Str"");
  super.onDestroyView();
}","@Override public void onDestroyView(){
  super.onDestroyView();
  Observable.timer(50,TimeUnit.MILLISECONDS).subscribe(timeout -> RxBus.getInstance().post(new SetDrawerStatusEvent(DrawerLayout.LOCK_MODE_UNDEFINED)));
}"
69168,"@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(getLayoutId(),container,false);
  unBinder=ButterKnife.bind(this,view);
  initView();
  initDataAndEvent();
  return attachToSwipeBack(view);
}","@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(getLayoutId(),container,false);
  unBinder=ButterKnife.bind(this,view);
  RxBus.getInstance().post(new SetDrawerStatusEvent(DrawerLayout.LOCK_MODE_LOCKED_CLOSED));
  initView();
  initDataAndEvent();
  return attachToSwipeBack(view);
}"
69169,"@Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_web,container,false);
  ButterKnife.bind(this,view);
  mUrl=getArguments().getString(Constants.EXTRA_TOPIC_URL);
  return attachToSwipeBack(view);
}","@Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_web,container,false);
  ButterKnife.bind(this,view);
  RxBus.getInstance().post(new SetDrawerStatusEvent(DrawerLayout.LOCK_MODE_LOCKED_CLOSED));
  mUrl=getArguments().getString(Constants.EXTRA_TOPIC_URL);
  return attachToSwipeBack(view);
}"
69170,"public static void openInBrowser(@NonNull Activity context,@NonNull String url){
  new CustomTabsIntent.Builder().setToolbarColor(ResourceUtil.getThemeAttrColor(context,R.attr.readhubStatus)).build().launchUrl(context,Uri.parse(url));
}","public static void openInBrowser(@NonNull Activity context,@NonNull String url){
  String useableUrl=RegularUtil.matchWebSite(url);
  if (!TextUtils.isEmpty(useableUrl)) {
    new CustomTabsIntent.Builder().setToolbarColor(ResourceUtil.getThemeAttrColor(context,R.attr.readhubStatus)).build().launchUrl(context,Uri.parse(useableUrl));
  }
}"
69171,"@Override public void onCreate(){
  super.onCreate();
  if (LeakCanary.isInAnalyzerProcess(this)) {
    return;
  }
  sInstance=this;
  String packageName=this.getPackageName();
  String processName=getProcessName(android.os.Process.myPid());
  CrashReport.UserStrategy strategy=new CrashReport.UserStrategy(this);
  strategy.setUploadProcess(processName == null || processName.equals(packageName));
  Beta.storageDir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
  Beta.canShowUpgradeActs.add(MainActivity.class);
  Bugly.init(sInstance,""String_Node_Str"",false,strategy);
  LeakCanary.install(this);
  AppStatusTracker.init(this);
  AndroidThreeTen.init(this);
}","@Override public void onCreate(){
  super.onCreate();
  if (LeakCanary.isInAnalyzerProcess(this)) {
    return;
  }
  sInstance=this;
  String packageName=this.getPackageName();
  String processName=getProcessName(android.os.Process.myPid());
  CrashReport.UserStrategy strategy=new CrashReport.UserStrategy(this);
  strategy.setUploadProcess(processName == null || processName.equals(packageName));
  Beta.storageDir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
  Beta.autoCheckUpgrade=false;
  Beta.canShowUpgradeActs.add(MainActivity.class);
  Bugly.init(sInstance,""String_Node_Str"",false,strategy);
  LeakCanary.install(this);
  AppStatusTracker.init(this);
  AndroidThreeTen.init(this);
}"
69172,"@Override public void onAttatch(V view){
  this.weakView=new WeakReference<>(view);
  proxyView=(V)Proxy.newProxyInstance(view.getClass().getClassLoader(),view.getClass().getInterfaces(),new MyInvocationHandler(this.weakView.get()));
  initEvent();
}","@Override public void onAttatch(V view){
  this.weakView=new WeakReference<>(view);
  proxyView=(V)Proxy.newProxyInstance(view.getClass().getClassLoader(),view.getClass().getInterfaces(),new MyInvocationHandler(this.weakView.get()));
}"
69173,"@Inject CommonPresenter(DataManager dataManager){
  super(dataManager);
  this.mDataManager=dataManager;
}","@Inject CommonPresenter(DataManager dataManager){
  super(dataManager);
  this.mDataManager=dataManager;
  initEvent();
}"
69174,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ButterKnife.bind(this);
  Beta.checkUpgrade();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ButterKnife.bind(this);
}"
69175,"@Override public void initDataAndEvent(){
  ObjectAnimator desAnim=ObjectAnimator.ofFloat(mAppDes,""String_Node_Str"",-500f,0f);
  desAnim.setDuration(700);
  desAnim.setInterpolator(new DecelerateInterpolator());
  desAnim.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      mAppName.setVisibility(View.INVISIBLE);
    }
    @Override public void onAnimationEnd(    Animator animation){
      mAppName.setVisibility(View.VISIBLE);
    }
  }
);
  ObjectAnimator nameAnim=ObjectAnimator.ofFloat(mAppName,""String_Node_Str"",-500f,0f);
  nameAnim.setDuration(2000);
  nameAnim.setInterpolator(new BounceInterpolator());
  nameAnim.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      Observable.timer(1,TimeUnit.SECONDS).subscribe(aLong -> go2Main());
    }
  }
);
  AnimatorSet animSet=new AnimatorSet();
  animSet.play(nameAnim).after(desAnim);
  animSet.start();
}","@Override public void initDataAndEvent(){
  ObjectAnimator desAnim=ObjectAnimator.ofFloat(mAppDes,""String_Node_Str"",-500f,0f);
  desAnim.setDuration(700);
  desAnim.setInterpolator(new DecelerateInterpolator());
  desAnim.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      mAppName.setVisibility(View.INVISIBLE);
    }
    @Override public void onAnimationEnd(    Animator animation){
      mAppName.setVisibility(View.VISIBLE);
    }
  }
);
  ObjectAnimator nameAnim=ObjectAnimator.ofFloat(mAppName,""String_Node_Str"",-500f,0f);
  nameAnim.setDuration(2000);
  nameAnim.setInterpolator(new BounceInterpolator());
  nameAnim.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      Observable.timer(500,TimeUnit.MILLISECONDS).subscribe(aLong -> go2Main());
    }
  }
);
  AnimatorSet animSet=new AnimatorSet();
  animSet.play(nameAnim).after(desAnim);
  animSet.start();
}"
69176,"@Override public void onAnimationEnd(Animator animation){
  Observable.timer(1,TimeUnit.SECONDS).subscribe(aLong -> go2Main());
}","@Override public void onAnimationEnd(Animator animation){
  Observable.timer(500,TimeUnit.MILLISECONDS).subscribe(aLong -> go2Main());
}"
69177,"@Inject TopicPresenter(DataManager dataManager){
  super(dataManager);
  this.mDataManager=dataManager;
}","@Inject TopicPresenter(DataManager dataManager){
  super(dataManager);
  this.mDataManager=dataManager;
  initEvent();
}"
69178,"@OnClick(R.id.img_close) void onCloseClick(){
  dismiss();
}","@OnClick(R.id.imb_close) void onCloseClick(){
  dismiss();
}"
69179,"@Override public void initView(){
  Rect displayRectangle=new Rect();
  Objects.requireNonNull(getDialog().getWindow()).getDecorView().getWindowVisibleDisplayFrame(displayRectangle);
  FrameLayout.LayoutParams params=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,(int)(displayRectangle.height() * 0.8f));
  mContentWrapper.setLayoutParams(params);
}","@Override public void initView(){
}"
69180,"@Override public void onRequestEnd(InstantReadBean data){
  if (data == null) {
    return;
  }
  mProgressBarWrapper.setVisibility(View.GONE);
  mTxtTopicTitle.setText(data.getTitle());
  mTxtSource.setText(getString(R.string.source_format,data.getSiteName()));
  String htmlHead=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String htmlContent=""String_Node_Str"" + htmlHead + ""String_Node_Str""+ data.getContent()+ ""String_Node_Str"";
  mWebView.loadUrl(""String_Node_Str"");
}","@Override public void onRequestEnd(InstantReadBean data){
  mTxtTopicTitle.setText(data.getTitle());
  mTxtSource.setText(getString(R.string.source_format,data.getSiteName()));
  mTxtJump2Source.setOnClickListener(v -> {
    dismiss();
    ((SupportActivity)getContext()).findFragment(MainFragment.class).start(CommonWebViewFragment.newInstance(data.getUrl()));
  }
);
  String htmlHead=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String htmlContent=""String_Node_Str"" + htmlHead + ""String_Node_Str""+ data.getContent()+ ""String_Node_Str"";
  mWebView.loadData(htmlContent,""String_Node_Str"",null);
}"
69181,"public static void openInBrowser(@NonNull Activity context,@NonNull String url){
  String useableUrl=RegularUtil.matchWebSite(url);
  if (!TextUtils.isEmpty(useableUrl)) {
    new CustomTabsIntent.Builder().setToolbarColor(ResourceUtil.getThemeAttrColor(context,R.attr.readhubStatus)).build().launchUrl(context,Uri.parse(useableUrl));
  }
}","public static void openInBrowser(@NonNull Activity context,@NonNull String url){
  String validedUrl=RegularUtil.matchWebSite(url);
  if (!TextUtils.isEmpty(validedUrl)) {
    new CustomTabsIntent.Builder().setToolbarColor(ResourceUtil.getThemeAttrColor(context,R.attr.readhubStatus)).build().launchUrl(context,Uri.parse(validedUrl));
  }
}"
69182,"@Override public Observable<RelevantTopicBean> getRelateTopic(String topicId,int eventType,long order,long timeStamp){
  return mNetHelper.getRelateTopic(topicId,eventType,order,timeStamp);
}","@Override public Observable<List<RelevantTopicBean>> getRelateTopic(String topicId,int eventType,long order,long timeStamp){
  return mNetHelper.getRelateTopic(topicId,eventType,order,timeStamp);
}"
69183,"Observable<RelevantTopicBean> getRelateTopic(String topicId,int eventType,long order,long timeStamp);","Observable<List<RelevantTopicBean>> getRelateTopic(String topicId,int eventType,long order,long timeStamp);"
69184,"@Override public Observable<RelevantTopicBean> getRelateTopic(String topicId,int eventType,long order,long timeStamp){
  return readhubApi.getRelateTopic(topicId,eventType,order,timeStamp);
}","@Override public Observable<List<RelevantTopicBean>> getRelateTopic(String topicId,int eventType,long order,long timeStamp){
  return readhubApi.getRelateTopic(topicId,eventType,order,timeStamp);
}"
69185,"@GET(""String_Node_Str"") Observable<RelevantTopicBean> getRelateTopic(@Query(""String_Node_Str"") String topicId,@Query(""String_Node_Str"") int eventType,@Query(""String_Node_Str"") long order,@Query(""String_Node_Str"") long timeStamp);","@GET(""String_Node_Str"") Observable<List<RelevantTopicBean>> getRelateTopic(@Query(""String_Node_Str"") String topicId,@Query(""String_Node_Str"") int eventType,@Query(""String_Node_Str"") long order,@Query(""String_Node_Str"") long timeStamp);"
69186,void inject(RelativePopupWindow relativePopupWindow);,void inject(RelevantTopicWindow relevantTopicWindow);
69187,"@Override public int getItemViewType(int position){
  if (position == 0) {
    return VIEW_TYPE_TOP;
  }
  if (position == getItemCount() - 1) {
    return VIEW_TYPE_BOTTOM;
  }
  return super.getItemViewType(position);
}","@Override public int getItemViewType(int position){
  if (getItemCount() == 1) {
    return VIEW_TYPE_ONLY_ONE;
  }
  if (position == 0) {
    return VIEW_TYPE_TOP;
  }
  if (position == getItemCount() - 1) {
    return VIEW_TYPE_BOTTOM;
  }
  return super.getItemViewType(position);
}"
69188,"@Override public void bindData(RelevantTopicBean value,int position){
  mTopicTrace=value;
  LocalDate date=value.getCreatedAt().toLocalDate();
  int year=date.getYear();
  int month=date.getMonthValue();
  int day=date.getDayOfMonth();
  if (year == OffsetDateTime.now().getYear()) {
    mTxtDate.setText(mContext.getString(R.string.month__day,month,day));
  }
 else {
    SpannableString spannableTitle=SpannableString.valueOf(mContext.getString(R.string.month__day__year,month,day,year));
    spannableTitle.setSpan(new ForegroundColorSpan(Color.parseColor(""String_Node_Str"")),spannableTitle.toString().indexOf(""String_Node_Str"") + 1,spannableTitle.toString().indexOf(""String_Node_Str"") + 5,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    mTxtDate.setText(spannableTitle);
  }
  mTxtContent.setText(value.getTitle());
  mDividerTop.setVisibility(getItemViewType() == VIEW_TYPE_TOP ? View.INVISIBLE : View.VISIBLE);
  mDividerBottom.setVisibility(getItemViewType() == VIEW_TYPE_BOTTOM ? View.INVISIBLE : View.VISIBLE);
}","@Override public void bindData(RelevantTopicBean value,int position){
  mTopicTrace=value;
  LocalDate date=value.getCreatedAt().toLocalDate();
  int year=date.getYear();
  int month=date.getMonthValue();
  int day=date.getDayOfMonth();
  if (year == OffsetDateTime.now().getYear()) {
    mTxtDate.setText(mContext.getString(R.string.month__day,month,day));
  }
 else {
    SpannableString spannableTitle=SpannableString.valueOf(mContext.getString(R.string.month__day__year,month,day,year));
    spannableTitle.setSpan(new ForegroundColorSpan(Color.parseColor(""String_Node_Str"")),spannableTitle.toString().indexOf(""String_Node_Str"") + 1,spannableTitle.toString().indexOf(""String_Node_Str"") + 5,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    mTxtDate.setText(spannableTitle);
  }
  mTxtContent.setText(value.getTitle());
  mDividerTop.setVisibility(getItemViewType() == VIEW_TYPE_TOP || getItemViewType() == VIEW_TYPE_ONLY_ONE ? View.INVISIBLE : View.VISIBLE);
  mDividerBottom.setVisibility(getItemViewType() == VIEW_TYPE_BOTTOM || getItemViewType() == VIEW_TYPE_ONLY_ONE ? View.INVISIBLE : View.VISIBLE);
}"
69189,"@Override public boolean onTagClick(View view,int position,FlowLayout parent){
  String topicId=String.valueOf(entityEventTopics.get(position).getEntityId());
  long order=mTopic.getOrder();
  RelevantTopicWindow window=new RelevantTopicWindow(getActivity(),topicId,order);
  window.showOnAnchor(view,RelativePopupWindow.VerticalPosition.ABOVE,RelativePopupWindow.HorizontalPosition.CENTER,false);
  return true;
}","@Override public boolean onTagClick(View view,int position,FlowLayout parent){
  String topicId=String.valueOf(entityEventTopics.get(position).getEntityId());
  long order=mTopic.getOrder();
  RelevantTopicWindow window=new RelevantTopicWindow(getActivity(),topicId,order);
  window.showOnAnchor(view,RelativePopupWindow.VerticalPosition.ABOVE,RelativePopupWindow.HorizontalPosition.CENTER,true);
  return true;
}"
69190,"@Override public void initDataAndEvent(){
  if (mTopic == null) {
    return;
  }
  mTxtTopicTitle.setText(mTopic.getTitle());
  mTxtTopicTime.setText(mTopic.getPublishDate().toLocalDate().toString() + ""String_Node_Str"" + mTopic.getPublishDate().toLocalTime().toString().substring(0,8));
  mTxtTopicDescription.setText(mTopic.getSummary());
  mTxtTopicDescription.setVisibility(TextUtils.isEmpty(mTopic.getSummary()) ? View.GONE : View.VISIBLE);
  mTitleContainer.removeAllViews();
  for (  final TopicNewsBean topic : mTopic.getNewsArray()) {
    TextView textView=new TextView(getContext());
    LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
    textView.setLayoutParams(params);
    textView.setPadding(10,16,10,16);
    textView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_news,0,0,0);
    textView.setCompoundDrawablePadding(15);
    textView.setTextSize(TypedValue.COMPLEX_UNIT_SP,16);
    textView.setTextColor(getResources().getColor(R.color.text_topic_detail_news_title));
    textView.setBackgroundResource(R.drawable.selector_btn_background);
    if (TextUtils.isEmpty(topic.getSiteName())) {
      textView.setText(topic.getTitle());
    }
 else {
      SpannableString spannableTitle=SpannableString.valueOf(topic.getTitle() + ""String_Node_Str"" + topic.getSiteName());
      spannableTitle.setSpan(new ForegroundColorSpan(getResources().getColor(R.color.text_topic_detail_news_author)),topic.getTitle().length() + 1,topic.getTitle().length() + topic.getSiteName().length() + 1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      textView.setText(spannableTitle);
    }
    textView.setOnClickListener(v -> start(CommonArticleFragment.newInstance(topic)));
    mTitleContainer.addView(textView);
  }
  mTimelineAdapter=new TopicTimelineAdapter(getContext());
  mRecyclerTimeline.setAdapter(mTimelineAdapter);
  mRecyclerTimeline.setLayoutManager(new LinearLayoutManager(getContext()));
  mRecyclerTimeline.setNestedScrollingEnabled(false);
  if (null != mTopic.getTimeline() && null != mTopic.getTimeline().getTopics() && 0 < mTopic.getTimeline().getTopics().size()) {
    mTimelineAdapter.addItems(mTopic.getTimeline().getTopics());
    mTimelineContainer.setVisibility(View.VISIBLE);
  }
 else {
    mTimelineContainer.setVisibility(View.GONE);
  }
  if (!mTopic.getEntityEventTopics().isEmpty()) {
    mRelativeTopicContainer.setVisibility(View.VISIBLE);
    ArrayList<EntityEventTopicBean> entityEventTopics=mTopic.getEntityEventTopics();
    mRelativeTopic.setAdapter(new TagAdapter<EntityEventTopicBean>(mTopic.getEntityEventTopics()){
      @Override public View getView(      FlowLayout parent,      int position,      EntityEventTopicBean entityEventTopicBean){
        TextView item=(TextView)getLayoutInflater().inflate(R.layout.item_relevant_topic,mRelativeTopic,false);
        item.setText(entityEventTopicBean.getEntityName() + entityEventTopicBean.getEventTypeLabel());
        return item;
      }
    }
);
    mRelativeTopic.setOnSelectListener(new TagFlowLayout.OnSelectListener(){
      @Override public void onSelected(      Set<Integer> selectPosSet){
        if (!selectPosSet.isEmpty()) {
          Iterator<Integer> iterator=selectPosSet.iterator();
          if (iterator.hasNext()) {
          }
        }
      }
    }
);
    mRelativeTopic.setOnTagClickListener(new TagFlowLayout.OnTagClickListener(){
      @Override public boolean onTagClick(      View view,      int position,      FlowLayout parent){
        String topicId=String.valueOf(entityEventTopics.get(position).getEntityId());
        long order=mTopic.getOrder();
        RelevantTopicWindow window=new RelevantTopicWindow(getActivity(),topicId,order);
        window.showOnAnchor(view,RelativePopupWindow.VerticalPosition.ABOVE,RelativePopupWindow.HorizontalPosition.CENTER,false);
        return true;
      }
    }
);
  }
 else {
    mRelativeTopicContainer.setVisibility(View.GONE);
  }
  mScrollView.setOnScrollChangeListener((NestedScrollView.OnScrollChangeListener)(v,scrollX,scrollY,oldScrollX,oldScrollY) -> {
  }
);
}","@Override public void initDataAndEvent(){
  if (mTopic == null) {
    return;
  }
  mTxtTopicTitle.setText(mTopic.getTitle());
  mTxtTopicTime.setText(mTopic.getPublishDate().toLocalDate().toString() + ""String_Node_Str"" + mTopic.getPublishDate().toLocalTime().toString().substring(0,8));
  mTxtTopicDescription.setText(mTopic.getSummary());
  mTxtTopicDescription.setVisibility(TextUtils.isEmpty(mTopic.getSummary()) ? View.GONE : View.VISIBLE);
  mTitleContainer.removeAllViews();
  for (  final TopicNewsBean topic : mTopic.getNewsArray()) {
    TextView textView=new TextView(getContext());
    LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
    textView.setLayoutParams(params);
    textView.setPadding(10,16,10,16);
    textView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_news,0,0,0);
    textView.setCompoundDrawablePadding(15);
    textView.setTextSize(TypedValue.COMPLEX_UNIT_SP,16);
    textView.setTextColor(getResources().getColor(R.color.text_topic_detail_news_title));
    textView.setBackgroundResource(R.drawable.selector_btn_background);
    if (TextUtils.isEmpty(topic.getSiteName())) {
      textView.setText(topic.getTitle());
    }
 else {
      SpannableString spannableTitle=SpannableString.valueOf(topic.getTitle() + ""String_Node_Str"" + topic.getSiteName());
      spannableTitle.setSpan(new ForegroundColorSpan(getResources().getColor(R.color.text_topic_detail_news_author)),topic.getTitle().length() + 1,topic.getTitle().length() + topic.getSiteName().length() + 1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      textView.setText(spannableTitle);
    }
    textView.setOnClickListener(v -> start(CommonArticleFragment.newInstance(topic)));
    mTitleContainer.addView(textView);
  }
  mTimelineAdapter=new TopicTimelineAdapter(getContext());
  mRecyclerTimeline.setAdapter(mTimelineAdapter);
  mRecyclerTimeline.setLayoutManager(new LinearLayoutManager(getContext()));
  mRecyclerTimeline.setNestedScrollingEnabled(false);
  if (null != mTopic.getTimeline() && null != mTopic.getTimeline().getTopics() && 0 < mTopic.getTimeline().getTopics().size()) {
    mTimelineAdapter.addItems(mTopic.getTimeline().getTopics());
    mTimelineContainer.setVisibility(View.VISIBLE);
  }
 else {
    mTimelineContainer.setVisibility(View.GONE);
  }
  if (!mTopic.getEntityEventTopics().isEmpty()) {
    mRelativeTopicContainer.setVisibility(View.VISIBLE);
    ArrayList<EntityEventTopicBean> entityEventTopics=mTopic.getEntityEventTopics();
    mRelativeTopic.setAdapter(new TagAdapter<EntityEventTopicBean>(mTopic.getEntityEventTopics()){
      @Override public View getView(      FlowLayout parent,      int position,      EntityEventTopicBean entityEventTopicBean){
        TextView item=(TextView)getLayoutInflater().inflate(R.layout.item_relevant_topic,mRelativeTopic,false);
        item.setText(entityEventTopicBean.getEntityName() + entityEventTopicBean.getEventTypeLabel());
        return item;
      }
    }
);
    mRelativeTopic.setOnSelectListener(new TagFlowLayout.OnSelectListener(){
      @Override public void onSelected(      Set<Integer> selectPosSet){
        if (!selectPosSet.isEmpty()) {
          Iterator<Integer> iterator=selectPosSet.iterator();
          if (iterator.hasNext()) {
          }
        }
      }
    }
);
    mRelativeTopic.setOnTagClickListener(new TagFlowLayout.OnTagClickListener(){
      @Override public boolean onTagClick(      View view,      int position,      FlowLayout parent){
        String topicId=String.valueOf(entityEventTopics.get(position).getEntityId());
        long order=mTopic.getOrder();
        RelevantTopicWindow window=new RelevantTopicWindow(getActivity(),topicId,order);
        window.showOnAnchor(view,RelativePopupWindow.VerticalPosition.ABOVE,RelativePopupWindow.HorizontalPosition.CENTER,true);
        return true;
      }
    }
);
  }
 else {
    mRelativeTopicContainer.setVisibility(View.GONE);
  }
  mScrollView.setOnScrollChangeListener((NestedScrollView.OnScrollChangeListener)(v,scrollX,scrollY,oldScrollX,oldScrollY) -> {
  }
);
}"
69191,void onRequestTopicEnd(RelevantTopicBean bean);,void onRequestTopicEnd(List<RelevantTopicBean> bean);
69192,"@Override public void getRelateTopic(String topicId,int eventType,long order,long timeStamp){
  addSubscribe(mDataManager.getRelateTopic(topicId,eventType,order,timeStamp).compose(RxSchedulers.io2Main()).doOnSubscribe(disposable -> getView().onRequestStart()).subscribeWith(new DisposableObserver<RelevantTopicBean>(){
    @Override public void onNext(    RelevantTopicBean bean){
      getView().onRequestTopicEnd(bean);
    }
    @Override public void onError(    Throwable e){
      getView().onRequestError();
    }
    @Override public void onComplete(){
    }
  }
));
}","@Override public void getRelateTopic(String topicId,int eventType,long order,long timeStamp){
  addSubscribe(mDataManager.getRelateTopic(topicId,eventType,order,timeStamp).compose(RxSchedulers.io2Main()).doOnSubscribe(disposable -> getView().onRequestStart()).subscribeWith(new DisposableObserver<List<RelevantTopicBean>>(){
    @Override public void onNext(    List<RelevantTopicBean> list){
      getView().onRequestTopicEnd(list);
    }
    @Override public void onError(    Throwable e){
      getView().onRequestError();
    }
    @Override public void onComplete(){
    }
  }
));
}"
69193,"@Override public void onNext(RelevantTopicBean bean){
  getView().onRequestTopicEnd(bean);
}","@Override public void onNext(List<RelevantTopicBean> list){
  getView().onRequestTopicEnd(list);
}"
69194,"private void initData(){
  try {
    mPresenter.getRelateTopic(mTopicId,1,mOrder,System.currentTimeMillis());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void initData(){
  mPresenter.getRelateTopic(mTopicId,1,mOrder,System.currentTimeMillis());
}"
69195,"@Override public void onRequestTopicEnd(RelevantTopicBean bean){
}","@Override public void onRequestTopicEnd(List<RelevantTopicBean> bean){
  mAdapter.addItems(bean);
}"
69196,"public RelevantTopicWindow(Context context,String topicId,long order){
  this.mTopicId=topicId;
  this.mOrder=order;
  View view=LayoutInflater.from(context).inflate(R.layout.layout_topic_trace,null);
  mRecyclerView=view.findViewById(R.id.recycler_topic_trace);
  setContentView(view);
  setWidth(ViewGroup.LayoutParams.WRAP_CONTENT);
  setHeight(ViewGroup.LayoutParams.WRAP_CONTENT);
  setFocusable(true);
  setOutsideTouchable(true);
  setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    setAnimationStyle(0);
  }
  performInject();
  initData();
}","public RelevantTopicWindow(Context context,String topicId,long order){
  mContext=context;
  this.mTopicId=topicId;
  this.mOrder=order;
  performInject();
  if (null != mPresenter) {
    mPresenter.onAttatch(this);
  }
  View view1=LayoutInflater.from(context).inflate(R.layout.test,null);
  setContentView(view1);
  setWidth(ViewGroup.LayoutParams.WRAP_CONTENT);
  setHeight(ViewGroup.LayoutParams.WRAP_CONTENT);
  setFocusable(true);
  setOutsideTouchable(true);
  setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    setAnimationStyle(0);
  }
}"
69197,"private void performInject(){
  DaggerPopupWindowComponent.builder().appComponent(ReadhubApplication.getAppComponent()).popupWindowModule(new PopupWindowModule(this)).build().inject(this);
}","private void performInject(){
  DaggerPopupWindowComponent.builder().appComponent(ReadhubApplication.getAppComponent()).build().inject(this);
}"
69198,"/** 
 * Show at relative position to anchor View with translation.
 * @param anchor Anchor View
 * @param vertPos Vertical Position Flag
 * @param horizPos Horizontal Position Flag
 * @param x Translation X
 * @param y Translation Y
 * @param fitInScreen Automatically fit in screen or not
 */
public void showOnAnchor(@NonNull View anchor,@VerticalPosition int vertPos,@HorizontalPosition int horizPos,int x,int y,boolean fitInScreen){
  setClippingEnabled(fitInScreen);
  View contentView=getContentView();
  contentView.measure(makeDropDownMeasureSpec(getWidth()),makeDropDownMeasureSpec(getHeight()));
  final int measuredW=contentView.getMeasuredWidth();
  final int measuredH=contentView.getMeasuredHeight();
  if (!fitInScreen) {
    final int[] anchorLocation=new int[2];
    anchor.getLocationInWindow(anchorLocation);
    x+=anchorLocation[0];
    y+=anchorLocation[1] + anchor.getHeight();
  }
switch (vertPos) {
case VerticalPosition.ABOVE:
    y-=measuredH + anchor.getHeight();
  break;
case VerticalPosition.ALIGN_BOTTOM:
y-=measuredH;
break;
case VerticalPosition.CENTER:
y-=anchor.getHeight() / 2 + measuredH / 2;
break;
case VerticalPosition.ALIGN_TOP:
y-=anchor.getHeight();
break;
case VerticalPosition.BELOW:
break;
}
switch (horizPos) {
case HorizontalPosition.LEFT:
x-=measuredW;
break;
case HorizontalPosition.ALIGN_RIGHT:
x-=measuredW - anchor.getWidth();
break;
case HorizontalPosition.CENTER:
x+=anchor.getWidth() / 2 - measuredW / 2;
break;
case HorizontalPosition.ALIGN_LEFT:
break;
case HorizontalPosition.RIGHT:
x+=anchor.getWidth();
break;
}
if (fitInScreen) {
PopupWindowCompat.showAsDropDown(this,anchor,x,y,Gravity.NO_GRAVITY);
}
 else {
showAtLocation(anchor,Gravity.NO_GRAVITY,x,y);
}
}","/** 
 * Show at relative position to anchor View with translation.
 * @param anchor Anchor View
 * @param vertPos Vertical Position Flag
 * @param horizPos Horizontal Position Flag
 * @param x Translation X
 * @param y Translation Y
 * @param fitInScreen Automatically fit in screen or not
 */
public void showOnAnchor(@NonNull View anchor,@VerticalPosition int vertPos,@HorizontalPosition int horizPos,int x,int y,boolean fitInScreen){
  setClippingEnabled(fitInScreen);
  View contentView=getContentView();
  contentView.measure(makeDropDownMeasureSpec(getWidth()),makeDropDownMeasureSpec(getHeight()));
  final int measuredW=contentView.getMeasuredWidth();
  final int measuredH=contentView.getMeasuredHeight();
  if (!fitInScreen) {
    final int[] anchorLocation=new int[2];
    anchor.getLocationInWindow(anchorLocation);
    x+=anchorLocation[0];
    y+=anchorLocation[1] + anchor.getHeight();
  }
switch (vertPos) {
case VerticalPosition.ABOVE:
    y-=measuredH + anchor.getHeight();
  break;
case VerticalPosition.ALIGN_BOTTOM:
y-=measuredH;
break;
case VerticalPosition.CENTER:
y-=anchor.getHeight() / 2 + measuredH / 2;
break;
case VerticalPosition.ALIGN_TOP:
y-=anchor.getHeight();
break;
case VerticalPosition.BELOW:
break;
default :
break;
}
switch (horizPos) {
case HorizontalPosition.LEFT:
x-=measuredW;
break;
case HorizontalPosition.ALIGN_RIGHT:
x-=measuredW - anchor.getWidth();
break;
case HorizontalPosition.CENTER:
x+=anchor.getWidth() / 2 - measuredW / 2;
break;
case HorizontalPosition.ALIGN_LEFT:
break;
case HorizontalPosition.RIGHT:
x+=anchor.getWidth();
break;
default :
break;
}
if (fitInScreen) {
PopupWindowCompat.showAsDropDown(this,anchor,x,y,Gravity.NO_GRAVITY);
}
 else {
showAtLocation(anchor,Gravity.NO_GRAVITY,x,y);
}
}"
69199,"public ArrayList<TopicRelativeBean> getTopics(){
  return topics;
}","public ArrayList<RelateTopicBean> getTopics(){
  return topics;
}"
69200,"public void setTopics(ArrayList<TopicRelativeBean> topics){
  this.topics=topics;
}","public void setTopics(ArrayList<RelateTopicBean> topics){
  this.topics=topics;
}"
69201,"@Override public BaseViewHolder<TopicRelativeBean> onCreateViewHolder(ViewGroup parent,int viewType){
  return new TopicTraceViewHolder(getContext(),parent);
}","@Override public BaseViewHolder<RelateTopicBean> onCreateViewHolder(ViewGroup parent,int viewType){
  return new TopicTraceViewHolder(getContext(),parent);
}"
69202,"@Override public void initDataAndEvent(){
  if (mTopic == null) {
    return;
  }
  mTxtTopicTitle.setText(mTopic.getTitle());
  mTxtTopicTime.setText(mTopic.getPublishDate().toLocalDate().toString() + ""String_Node_Str"" + mTopic.getPublishDate().toLocalTime().toString().substring(0,8));
  mTxtTopicDescription.setText(mTopic.getSummary());
  mTxtTopicDescription.setVisibility(TextUtils.isEmpty(mTopic.getSummary()) ? View.GONE : View.VISIBLE);
  mTitleContainer.removeAllViews();
  for (  final TopicNewsBean topic : mTopic.getNewsArray()) {
    TextView textView=new TextView(getContext());
    LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
    textView.setLayoutParams(params);
    textView.setPadding(10,16,10,16);
    textView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_news,0,0,0);
    textView.setCompoundDrawablePadding(15);
    textView.setTextSize(TypedValue.COMPLEX_UNIT_SP,16);
    textView.setTextColor(getResources().getColor(R.color.text_topic_detail_news_title));
    textView.setBackgroundResource(R.drawable.selector_btn_background);
    if (TextUtils.isEmpty(topic.getSiteName())) {
      textView.setText(topic.getTitle());
    }
 else {
      SpannableString spannableTitle=SpannableString.valueOf(topic.getTitle() + ""String_Node_Str"" + topic.getSiteName());
      spannableTitle.setSpan(new ForegroundColorSpan(getResources().getColor(R.color.text_topic_detail_news_author)),topic.getTitle().length() + 1,topic.getTitle().length() + topic.getSiteName().length() + 1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      textView.setText(spannableTitle);
    }
    textView.setOnClickListener(v -> start(CommonArticleFragment.newInstance(topic)));
    mTitleContainer.addView(textView);
  }
  mRecyclerTimeline.setAdapter(mTimelineAdapter);
  mRecyclerTimeline.setLayoutManager(new LinearLayoutManager(getContext()));
  mRecyclerTimeline.setNestedScrollingEnabled(false);
  if (null != mTopic.getTimeline() && null != mTopic.getTimeline().getTopics() && 0 < mTopic.getTimeline().getTopics().size()) {
    mTimelineAdapter.addItems(mTopic.getTimeline().getTopics());
    mTimelineContainer.setVisibility(View.VISIBLE);
  }
 else {
    mTimelineContainer.setVisibility(View.GONE);
  }
  if (!mTopic.getEntityEventTopics().isEmpty()) {
    mRelativeTopicContainer.setVisibility(View.VISIBLE);
    ArrayList<EntityEventTopicBean> entityEventTopics=mTopic.getEntityEventTopics();
    mRelativeTopic.setAdapter(new TagAdapter<EntityEventTopicBean>(mTopic.getEntityEventTopics()){
      @Override public View getView(      FlowLayout parent,      int position,      EntityEventTopicBean entityEventTopicBean){
        TextView item=(TextView)getLayoutInflater().inflate(R.layout.item_relative_topic,mRelativeTopic,false);
        item.setText(entityEventTopicBean.getEntityName() + entityEventTopicBean.getEventTypeLabel());
        return item;
      }
    }
);
  }
 else {
    mRelativeTopicContainer.setVisibility(View.GONE);
  }
  mScrollView.setOnScrollChangeListener((NestedScrollView.OnScrollChangeListener)(v,scrollX,scrollY,oldScrollX,oldScrollY) -> {
  }
);
}","@Override public void initDataAndEvent(){
  if (mTopic == null) {
    return;
  }
  mTxtTopicTitle.setText(mTopic.getTitle());
  mTxtTopicTime.setText(mTopic.getPublishDate().toLocalDate().toString() + ""String_Node_Str"" + mTopic.getPublishDate().toLocalTime().toString().substring(0,8));
  mTxtTopicDescription.setText(mTopic.getSummary());
  mTxtTopicDescription.setVisibility(TextUtils.isEmpty(mTopic.getSummary()) ? View.GONE : View.VISIBLE);
  mTitleContainer.removeAllViews();
  for (  final TopicNewsBean topic : mTopic.getNewsArray()) {
    TextView textView=new TextView(getContext());
    LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
    textView.setLayoutParams(params);
    textView.setPadding(10,16,10,16);
    textView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_news,0,0,0);
    textView.setCompoundDrawablePadding(15);
    textView.setTextSize(TypedValue.COMPLEX_UNIT_SP,16);
    textView.setTextColor(getResources().getColor(R.color.text_topic_detail_news_title));
    textView.setBackgroundResource(R.drawable.selector_btn_background);
    if (TextUtils.isEmpty(topic.getSiteName())) {
      textView.setText(topic.getTitle());
    }
 else {
      SpannableString spannableTitle=SpannableString.valueOf(topic.getTitle() + ""String_Node_Str"" + topic.getSiteName());
      spannableTitle.setSpan(new ForegroundColorSpan(getResources().getColor(R.color.text_topic_detail_news_author)),topic.getTitle().length() + 1,topic.getTitle().length() + topic.getSiteName().length() + 1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      textView.setText(spannableTitle);
    }
    textView.setOnClickListener(v -> start(CommonArticleFragment.newInstance(topic)));
    mTitleContainer.addView(textView);
  }
  mRecyclerTimeline.setAdapter(mTimelineAdapter);
  mRecyclerTimeline.setLayoutManager(new LinearLayoutManager(getContext()));
  mRecyclerTimeline.setNestedScrollingEnabled(false);
  if (null != mTopic.getTimeline() && null != mTopic.getTimeline().getTopics() && 0 < mTopic.getTimeline().getTopics().size()) {
    mTimelineAdapter.addItems(mTopic.getTimeline().getTopics());
    mTimelineContainer.setVisibility(View.VISIBLE);
  }
 else {
    mTimelineContainer.setVisibility(View.GONE);
  }
  if (!mTopic.getEntityEventTopics().isEmpty()) {
    mRelativeTopicContainer.setVisibility(View.VISIBLE);
    ArrayList<EntityEventTopicBean> entityEventTopics=mTopic.getEntityEventTopics();
    mRelativeTopic.setAdapter(new TagAdapter<EntityEventTopicBean>(mTopic.getEntityEventTopics()){
      @Override public View getView(      FlowLayout parent,      int position,      EntityEventTopicBean entityEventTopicBean){
        TextView item=(TextView)getLayoutInflater().inflate(R.layout.item_relate_topic,mRelativeTopic,false);
        item.setText(entityEventTopicBean.getEntityName() + entityEventTopicBean.getEventTypeLabel());
        return item;
      }
    }
);
    mRelativeTopic.setOnSelectListener(new TagFlowLayout.OnSelectListener(){
      @Override public void onSelected(      Set<Integer> selectPosSet){
        if (!selectPosSet.isEmpty()) {
          Iterator<Integer> iterator=selectPosSet.iterator();
          if (iterator.hasNext()) {
          }
        }
      }
    }
);
    mRelativeTopic.setOnTagClickListener(new TagFlowLayout.OnTagClickListener(){
      @Override public boolean onTagClick(      View view,      int position,      FlowLayout parent){
        String topicId=String.valueOf(entityEventTopics.get(position).getEntityId());
        long order=mTopic.getOrder();
        RelateTopicWindow window=new RelateTopicWindow(getActivity(),topicId,order);
        window.showOnAnchor(view,RelativePopupWindow.VerticalPosition.ABOVE,RelativePopupWindow.HorizontalPosition.CENTER,false);
        return true;
      }
    }
);
  }
 else {
    mRelativeTopicContainer.setVisibility(View.GONE);
  }
  mScrollView.setOnScrollChangeListener((NestedScrollView.OnScrollChangeListener)(v,scrollX,scrollY,oldScrollX,oldScrollY) -> {
  }
);
}"
69203,"@Override public View getView(FlowLayout parent,int position,EntityEventTopicBean entityEventTopicBean){
  TextView item=(TextView)getLayoutInflater().inflate(R.layout.item_relative_topic,mRelativeTopic,false);
  item.setText(entityEventTopicBean.getEntityName() + entityEventTopicBean.getEventTypeLabel());
  return item;
}","@Override public View getView(FlowLayout parent,int position,EntityEventTopicBean entityEventTopicBean){
  TextView item=(TextView)getLayoutInflater().inflate(R.layout.item_relate_topic,mRelativeTopic,false);
  item.setText(entityEventTopicBean.getEntityName() + entityEventTopicBean.getEventTypeLabel());
  return item;
}"
69204,"@Override public void bindData(TopicRelativeBean value,int position){
  mTopicTrace=value;
  LocalDate date=value.getCreatedAt().toLocalDate();
  int year=date.getYear();
  int month=date.getMonthValue();
  int day=date.getDayOfMonth();
  if (year == OffsetDateTime.now().getYear()) {
    mTxtDate.setText(mContext.getString(R.string.month__day,month,day));
  }
 else {
    SpannableString spannableTitle=SpannableString.valueOf(mContext.getString(R.string.month__day__year,month,day,year));
    spannableTitle.setSpan(new ForegroundColorSpan(Color.parseColor(""String_Node_Str"")),5,9,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    mTxtDate.setText(spannableTitle);
  }
  mTxtContent.setText(value.getTitle());
  mDividerTop.setVisibility(getItemViewType() == TopicDetailFragment.VIEW_TYPE_TOP ? View.INVISIBLE : View.VISIBLE);
  mDividerBottom.setVisibility(getItemViewType() == TopicDetailFragment.VIEW_TYPE_BOTTOM ? View.INVISIBLE : View.VISIBLE);
}","@Override public void bindData(RelateTopicBean value,int position){
  mTopicTrace=value;
  LocalDate date=value.getCreatedAt().toLocalDate();
  int year=date.getYear();
  int month=date.getMonthValue();
  int day=date.getDayOfMonth();
  if (year == OffsetDateTime.now().getYear()) {
    mTxtDate.setText(mContext.getString(R.string.month__day,month,day));
  }
 else {
    SpannableString spannableTitle=SpannableString.valueOf(mContext.getString(R.string.month__day__year,month,day,year));
    spannableTitle.setSpan(new ForegroundColorSpan(Color.parseColor(""String_Node_Str"")),5,9,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    mTxtDate.setText(spannableTitle);
  }
  mTxtContent.setText(value.getTitle());
  mDividerTop.setVisibility(getItemViewType() == TopicDetailFragment.VIEW_TYPE_TOP ? View.INVISIBLE : View.VISIBLE);
  mDividerBottom.setVisibility(getItemViewType() == TopicDetailFragment.VIEW_TYPE_BOTTOM ? View.INVISIBLE : View.VISIBLE);
}"
69205,"public ViewHolder(Context context,ViewGroup parent){
  super(context,parent,R.layout.item_topic_trace);
  this.mContext=context;
}","public ViewHolder(Context context,ViewGroup parent){
  super(context,parent,R.layout.item_topic_timeline);
  this.mContext=context;
}"
69206,"@NonNull @Override public TopicViewHolder onCreateViewHolder(@NonNull ViewGroup parent,int viewType){
  return new TopicViewHolder(inflater.inflate(R.layout.item_topic,parent,false));
}","@NonNull @Override public BaseViewHolder<TopicBean> onCreateViewHolder(@NonNull ViewGroup parent,int viewType){
  return new TopicViewHolder(activity,parent);
}"
69207,"TopicViewHolder(@NonNull View itemView){
  super(itemView);
  ButterKnife.bind(this,itemView);
}","TopicViewHolder(Context context,ViewGroup parent){
  super(context,parent,R.layout.item_topic_trace);
}"
69208,"NewsViewHolder(@NonNull View itemView){
  ButterKnife.bind(this,itemView);
}","NewsViewHolder(Context context,ViewGroup parent){
  super(context,parent,R.layout.item_topic_news);
}"
69209,"public TopicTraceViewHolder(Context context,ViewGroup parent){
  super(context,parent,R.layout.item_topic_trace);
}","public TopicTraceViewHolder(Context context,ViewGroup parent){
  super(context,parent,R.layout.item_topic_trace);
  this.mContext=context;
}"
69210,"@Override public void bindData(TopicRelativeBean value){
  mTopicTrace=value;
  mTxtDate.setText(value.getCreatedAt().toLocalDate().toString());
  mTxtContent.setText(value.getTitle());
  mDividerTop.setVisibility(getItemViewType() == TopicDetailFragment.VIEW_TYPE_TOP ? View.INVISIBLE : View.VISIBLE);
  mDividerBottom.setVisibility(getItemViewType() == TopicDetailFragment.VIEW_TYPE_BOTTOM ? View.INVISIBLE : View.VISIBLE);
}","@Override public void bindData(TopicRelativeBean value){
  mTopicTrace=value;
  LocalDate date=value.getCreatedAt().toLocalDate();
  int year=date.getYear();
  int month=date.getMonthValue();
  int day=date.getDayOfMonth();
  if (year == OffsetDateTime.now().getYear()) {
    mTxtDate.setText(mContext.getString(R.string.month__day,month,day));
  }
 else {
    SpannableString spannableTitle=SpannableString.valueOf(mContext.getString(R.string.month__day__year,month,day,year));
    spannableTitle.setSpan(new ForegroundColorSpan(Color.parseColor(""String_Node_Str"")),5,9,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    mTxtDate.setText(spannableTitle);
  }
  mTxtContent.setText(value.getTitle());
  mDividerTop.setVisibility(getItemViewType() == TopicDetailFragment.VIEW_TYPE_TOP ? View.INVISIBLE : View.VISIBLE);
  mDividerBottom.setVisibility(getItemViewType() == TopicDetailFragment.VIEW_TYPE_BOTTOM ? View.INVISIBLE : View.VISIBLE);
}"
69211,"public boolean _load(File file,ProgressHandler handler){
  this.file=file;
  handler.setProgress(String.format(Messages.getString(""String_Node_Str""),file),-1);
  SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    SAXParser parser=factory.newSAXParser();
    parser.parse(file,new DefaultHandler(){
      private HashMap<String,Rom> roms_bycrc=new HashMap<>();
      private boolean in_softwares_list=false;
      private boolean in_software=false;
      private boolean in_machine=false;
      private boolean in_description=false;
      private boolean in_header=false;
      private SoftwareList curr_software_list=null;
      private Software curr_software=null;
      private Machine curr_machine=null;
      private Rom curr_rom=null;
      private Disk curr_disk=null;
      private String curr_tag;
      @Override public void startElement(      String uri,      String localName,      String qName,      Attributes attributes) throws SAXException {
        curr_tag=qName;
        if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
          for (int i=0; i < attributes.getLength(); i++) {
switch (attributes.getQName(i)) {
case ""String_Node_Str"":
              build=attributes.getValue(i);
          }
        }
      }
 else       if (qName.equals(""String_Node_Str"")) {
        in_header=true;
      }
 else       if (qName.equals(""String_Node_Str"")) {
        in_softwares_list=true;
        curr_software_list=new SoftwareList();
        for (int i=0; i < attributes.getLength(); i++) {
switch (attributes.getQName(i)) {
case ""String_Node_Str"":
            curr_software_list.name=attributes.getValue(i);
          software_list_byname.put(curr_software_list.name,curr_software_list);
        break;
    }
  }
}
 else if (qName.equals(""String_Node_Str"")) {
  in_software=true;
  curr_software=new Software();
  for (int i=0; i < attributes.getLength(); i++) {
switch (attributes.getQName(i)) {
case ""String_Node_Str"":
      curr_software.name=attributes.getValue(i);
    break;
case ""String_Node_Str"":
  curr_software.cloneof=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_software.supported=Software.Supported.valueOf(attributes.getValue(i));
break;
}
}
}
 else if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
in_machine=true;
curr_machine=new Machine();
for (int i=0; i < attributes.getLength(); i++) {
switch (attributes.getQName(i)) {
case ""String_Node_Str"":
curr_machine.name=attributes.getValue(i);
machines_byname.put(curr_machine.name,curr_machine);
break;
case ""String_Node_Str"":
curr_machine.romof=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_machine.cloneof=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_machine.sampleof=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_machine.isbios=BooleanUtils.toBoolean(attributes.getValue(i));
break;
case ""String_Node_Str"":
curr_machine.ismechanical=BooleanUtils.toBoolean(attributes.getValue(i));
break;
case ""String_Node_Str"":
curr_machine.isdevice=BooleanUtils.toBoolean(attributes.getValue(i));
break;
}
}
}
 else if (qName.equals(""String_Node_Str"") && (in_machine || in_software || in_softwares_list)) {
in_description=true;
}
 else if (qName.equals(""String_Node_Str"")) {
if (in_machine || in_software) {
curr_rom=new Rom(in_machine ? curr_machine : curr_software);
for (int i=0; i < attributes.getLength(); i++) {
switch (attributes.getQName(i)) {
case ""String_Node_Str"":
curr_rom.setName(attributes.getValue(i));
break;
case ""String_Node_Str"":
curr_rom.size=Long.decode(attributes.getValue(i));
break;
case ""String_Node_Str"":
curr_rom.crc=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_rom.sha1=attributes.getValue(i);
sha1_roms=true;
break;
case ""String_Node_Str"":
curr_rom.md5=attributes.getValue(i);
md5_roms=true;
break;
case ""String_Node_Str"":
curr_rom.merge=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_rom.bios=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_rom.status=Entity.Status.valueOf(attributes.getValue(i));
break;
}
}
}
}
 else if (qName.equals(""String_Node_Str"")) {
if (in_machine || in_software) {
curr_disk=new Disk(in_machine ? curr_machine : curr_software);
for (int i=0; i < attributes.getLength(); i++) {
switch (attributes.getQName(i)) {
case ""String_Node_Str"":
curr_disk.setName(attributes.getValue(i));
break;
case ""String_Node_Str"":
curr_disk.sha1=attributes.getValue(i);
sha1_disks=true;
break;
case ""String_Node_Str"":
curr_disk.md5=attributes.getValue(i);
md5_disks=true;
break;
case ""String_Node_Str"":
curr_disk.merge=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_disk.status=Entity.Status.valueOf(attributes.getValue(i));
break;
}
}
}
}
}
@Override public void endElement(String uri,String localName,String qName) throws SAXException {
if (qName.equals(""String_Node_Str"")) {
in_header=false;
}
 else if (qName.equals(""String_Node_Str"")) {
software_lists.add(curr_software_list);
softwares_list_cnt++;
in_softwares_list=false;
}
 else if (qName.equals(""String_Node_Str"")) {
curr_software_list.add(curr_software);
softwares_cnt++;
in_software=false;
handler.setProgress(String.format(Messages.getString(""String_Node_Str""),softwares_cnt,roms_cnt));
if (handler.isCancel()) throw new BreakException();
}
 else if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
machines.add(curr_machine);
machines_cnt++;
in_machine=false;
handler.setProgress(String.format(Messages.getString(""String_Node_Str""),machines_cnt,roms_cnt));
if (handler.isCancel()) throw new BreakException();
}
 else if (qName.equals(""String_Node_Str"")) {
(in_machine ? curr_machine : curr_software).roms.add(curr_rom);
roms_cnt++;
if (curr_rom.crc != null) {
Rom old_rom=roms_bycrc.put(curr_rom.crc,curr_rom);
if (old_rom != null) {
if (old_rom.sha1 != null && curr_rom.sha1 != null) if (!old_rom.equals(curr_rom)) suspicious_crc.add(curr_rom.crc);
if (old_rom.md5 != null && curr_rom.md5 != null) if (!old_rom.equals(curr_rom)) suspicious_crc.add(curr_rom.crc);
}
}
}
 else if (qName.equals(""String_Node_Str"")) {
(in_machine ? curr_machine : curr_software).disks.add(curr_disk);
disks_cnt++;
}
 else if (qName.equals(""String_Node_Str"") && (in_machine || in_software || in_softwares_list)) {
in_description=false;
}
}
@Override public void characters(char[] ch,int start,int length) throws SAXException {
if (in_description) {
if (in_machine) curr_machine.description.append(ch,start,length);
 else if (in_software) curr_software.description.append(ch,start,length);
 else if (in_softwares_list) curr_software_list.description.append(ch,start,length);
}
 else if (in_header) {
if (!header.containsKey(curr_tag)) header.put(curr_tag,new StringBuffer());
header.get(curr_tag).append(ch,start,length);
}
}
}
);
handler.setProgress(Messages.getString(""String_Node_Str""),-1);
machines.forEach(machine -> {
if (machine.romof != null) {
machine.parent=machines_byname.get(machine.romof);
if (machine.parent != null) {
if (!machine.getParent().isbios) machine.parent.clones.put(machine.name,machine);
}
}
}
);
software_lists.forEach(software_list -> {
software_list.softwares.forEach(software -> {
if (software.cloneof != null) {
software.parent=software_list.softwares_byname.get(software.cloneof);
if (software.parent != null) software.parent.clones.put(software.name,software);
}
}
);
}
);
handler.setProgress(Messages.getString(""String_Node_Str""),-1);
save();
return true;
}
 catch (ParserConfigurationException|SAXException e) {
Log.err(""String_Node_Str"",e);
}
catch (IOException e) {
Log.err(""String_Node_Str"",e);
}
catch (BreakException e) {
return false;
}
catch (Throwable e) {
Log.err(""String_Node_Str"",e);
}
return false;
}","public boolean _load(File file,ProgressHandler handler){
  this.file=file;
  handler.setProgress(String.format(Messages.getString(""String_Node_Str""),file),-1);
  SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    SAXParser parser=factory.newSAXParser();
    parser.parse(file,new DefaultHandler(){
      private HashMap<String,Rom> roms_bycrc=new HashMap<>();
      private boolean in_softwares_list=false;
      private boolean in_software=false;
      private boolean in_machine=false;
      private boolean in_description=false;
      private boolean in_header=false;
      private SoftwareList curr_software_list=null;
      private Software curr_software=null;
      private Machine curr_machine=null;
      private Rom curr_rom=null;
      private Disk curr_disk=null;
      private String curr_tag;
      @Override public void startElement(      String uri,      String localName,      String qName,      Attributes attributes) throws SAXException {
        curr_tag=qName;
        if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
          for (int i=0; i < attributes.getLength(); i++) {
switch (attributes.getQName(i)) {
case ""String_Node_Str"":
              build=attributes.getValue(i);
          }
        }
      }
 else       if (qName.equals(""String_Node_Str"")) {
        in_header=true;
      }
 else       if (qName.equals(""String_Node_Str"")) {
        in_softwares_list=true;
        curr_software_list=new SoftwareList();
        for (int i=0; i < attributes.getLength(); i++) {
switch (attributes.getQName(i)) {
case ""String_Node_Str"":
            curr_software_list.name=attributes.getValue(i);
          software_list_byname.put(curr_software_list.name,curr_software_list);
        break;
    }
  }
}
 else if (qName.equals(""String_Node_Str"")) {
  in_software=true;
  curr_software=new Software();
  for (int i=0; i < attributes.getLength(); i++) {
switch (attributes.getQName(i)) {
case ""String_Node_Str"":
      curr_software.name=attributes.getValue(i);
    break;
case ""String_Node_Str"":
  curr_software.cloneof=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_software.supported=Software.Supported.valueOf(attributes.getValue(i));
break;
}
}
}
 else if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
in_machine=true;
curr_machine=new Machine();
for (int i=0; i < attributes.getLength(); i++) {
switch (attributes.getQName(i)) {
case ""String_Node_Str"":
curr_machine.name=attributes.getValue(i);
machines_byname.put(curr_machine.name,curr_machine);
break;
case ""String_Node_Str"":
curr_machine.romof=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_machine.cloneof=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_machine.sampleof=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_machine.isbios=BooleanUtils.toBoolean(attributes.getValue(i));
break;
case ""String_Node_Str"":
curr_machine.ismechanical=BooleanUtils.toBoolean(attributes.getValue(i));
break;
case ""String_Node_Str"":
curr_machine.isdevice=BooleanUtils.toBoolean(attributes.getValue(i));
break;
}
}
}
 else if (qName.equals(""String_Node_Str"") && (in_machine || in_software || in_softwares_list)) {
in_description=true;
}
 else if (qName.equals(""String_Node_Str"")) {
if (in_machine || in_software) {
curr_rom=new Rom(in_machine ? curr_machine : curr_software);
for (int i=0; i < attributes.getLength(); i++) {
switch (attributes.getQName(i)) {
case ""String_Node_Str"":
curr_rom.setName(attributes.getValue(i));
break;
case ""String_Node_Str"":
curr_rom.size=Long.decode(attributes.getValue(i));
break;
case ""String_Node_Str"":
curr_rom.crc=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_rom.sha1=attributes.getValue(i);
sha1_roms=true;
break;
case ""String_Node_Str"":
curr_rom.md5=attributes.getValue(i);
md5_roms=true;
break;
case ""String_Node_Str"":
curr_rom.merge=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_rom.bios=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_rom.status=Entity.Status.valueOf(attributes.getValue(i));
break;
}
}
}
}
 else if (qName.equals(""String_Node_Str"")) {
if (in_machine || in_software) {
curr_disk=new Disk(in_machine ? curr_machine : curr_software);
for (int i=0; i < attributes.getLength(); i++) {
switch (attributes.getQName(i)) {
case ""String_Node_Str"":
curr_disk.setName(attributes.getValue(i));
break;
case ""String_Node_Str"":
curr_disk.sha1=attributes.getValue(i);
sha1_disks=true;
break;
case ""String_Node_Str"":
curr_disk.md5=attributes.getValue(i);
md5_disks=true;
break;
case ""String_Node_Str"":
curr_disk.merge=attributes.getValue(i);
break;
case ""String_Node_Str"":
curr_disk.status=Entity.Status.valueOf(attributes.getValue(i));
break;
}
}
}
}
}
@Override public void endElement(String uri,String localName,String qName) throws SAXException {
if (qName.equals(""String_Node_Str"")) {
in_header=false;
}
 else if (qName.equals(""String_Node_Str"")) {
software_lists.add(curr_software_list);
softwares_list_cnt++;
in_softwares_list=false;
}
 else if (qName.equals(""String_Node_Str"")) {
curr_software_list.add(curr_software);
softwares_cnt++;
in_software=false;
handler.setProgress(String.format(Messages.getString(""String_Node_Str""),softwares_cnt,roms_cnt));
if (handler.isCancel()) throw new BreakException();
}
 else if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
machines.add(curr_machine);
machines_cnt++;
in_machine=false;
handler.setProgress(String.format(Messages.getString(""String_Node_Str""),machines_cnt,roms_cnt));
if (handler.isCancel()) throw new BreakException();
}
 else if (qName.equals(""String_Node_Str"")) {
if (curr_rom.getName() != null) {
(in_machine ? curr_machine : curr_software).roms.add(curr_rom);
roms_cnt++;
if (curr_rom.crc != null) {
Rom old_rom=roms_bycrc.put(curr_rom.crc,curr_rom);
if (old_rom != null) {
if (old_rom.sha1 != null && curr_rom.sha1 != null) if (!old_rom.equals(curr_rom)) suspicious_crc.add(curr_rom.crc);
if (old_rom.md5 != null && curr_rom.md5 != null) if (!old_rom.equals(curr_rom)) suspicious_crc.add(curr_rom.crc);
}
}
}
}
 else if (qName.equals(""String_Node_Str"")) {
if (curr_disk.getName() != null) {
(in_machine ? curr_machine : curr_software).disks.add(curr_disk);
disks_cnt++;
}
}
 else if (qName.equals(""String_Node_Str"") && (in_machine || in_software || in_softwares_list)) {
in_description=false;
}
}
@Override public void characters(char[] ch,int start,int length) throws SAXException {
if (in_description) {
if (in_machine) curr_machine.description.append(ch,start,length);
 else if (in_software) curr_software.description.append(ch,start,length);
 else if (in_softwares_list) curr_software_list.description.append(ch,start,length);
}
 else if (in_header) {
if (!header.containsKey(curr_tag)) header.put(curr_tag,new StringBuffer());
header.get(curr_tag).append(ch,start,length);
}
}
}
);
handler.setProgress(Messages.getString(""String_Node_Str""),-1);
machines.forEach(machine -> {
if (machine.romof != null) {
machine.parent=machines_byname.get(machine.romof);
if (machine.parent != null) {
if (!machine.getParent().isbios) machine.parent.clones.put(machine.name,machine);
}
}
}
);
software_lists.forEach(software_list -> {
software_list.softwares.forEach(software -> {
if (software.cloneof != null) {
software.parent=software_list.softwares_byname.get(software.cloneof);
if (software.parent != null) software.parent.clones.put(software.name,software);
}
}
);
}
);
handler.setProgress(Messages.getString(""String_Node_Str""),-1);
save();
return true;
}
 catch (ParserConfigurationException|SAXException e) {
Log.err(""String_Node_Str"",e);
}
catch (IOException e) {
Log.err(""String_Node_Str"",e);
}
catch (BreakException e) {
return false;
}
catch (Throwable e) {
Log.err(""String_Node_Str"",e);
}
return false;
}"
69212,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  if (qName.equals(""String_Node_Str"")) {
    in_header=false;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    software_lists.add(curr_software_list);
    softwares_list_cnt++;
    in_softwares_list=false;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    curr_software_list.add(curr_software);
    softwares_cnt++;
    in_software=false;
    handler.setProgress(String.format(Messages.getString(""String_Node_Str""),softwares_cnt,roms_cnt));
    if (handler.isCancel())     throw new BreakException();
  }
 else   if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
    machines.add(curr_machine);
    machines_cnt++;
    in_machine=false;
    handler.setProgress(String.format(Messages.getString(""String_Node_Str""),machines_cnt,roms_cnt));
    if (handler.isCancel())     throw new BreakException();
  }
 else   if (qName.equals(""String_Node_Str"")) {
    (in_machine ? curr_machine : curr_software).roms.add(curr_rom);
    roms_cnt++;
    if (curr_rom.crc != null) {
      Rom old_rom=roms_bycrc.put(curr_rom.crc,curr_rom);
      if (old_rom != null) {
        if (old_rom.sha1 != null && curr_rom.sha1 != null)         if (!old_rom.equals(curr_rom))         suspicious_crc.add(curr_rom.crc);
        if (old_rom.md5 != null && curr_rom.md5 != null)         if (!old_rom.equals(curr_rom))         suspicious_crc.add(curr_rom.crc);
      }
    }
  }
 else   if (qName.equals(""String_Node_Str"")) {
    (in_machine ? curr_machine : curr_software).disks.add(curr_disk);
    disks_cnt++;
  }
 else   if (qName.equals(""String_Node_Str"") && (in_machine || in_software || in_softwares_list)) {
    in_description=false;
  }
}","@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  if (qName.equals(""String_Node_Str"")) {
    in_header=false;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    software_lists.add(curr_software_list);
    softwares_list_cnt++;
    in_softwares_list=false;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    curr_software_list.add(curr_software);
    softwares_cnt++;
    in_software=false;
    handler.setProgress(String.format(Messages.getString(""String_Node_Str""),softwares_cnt,roms_cnt));
    if (handler.isCancel())     throw new BreakException();
  }
 else   if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
    machines.add(curr_machine);
    machines_cnt++;
    in_machine=false;
    handler.setProgress(String.format(Messages.getString(""String_Node_Str""),machines_cnt,roms_cnt));
    if (handler.isCancel())     throw new BreakException();
  }
 else   if (qName.equals(""String_Node_Str"")) {
    if (curr_rom.getName() != null) {
      (in_machine ? curr_machine : curr_software).roms.add(curr_rom);
      roms_cnt++;
      if (curr_rom.crc != null) {
        Rom old_rom=roms_bycrc.put(curr_rom.crc,curr_rom);
        if (old_rom != null) {
          if (old_rom.sha1 != null && curr_rom.sha1 != null)           if (!old_rom.equals(curr_rom))           suspicious_crc.add(curr_rom.crc);
          if (old_rom.md5 != null && curr_rom.md5 != null)           if (!old_rom.equals(curr_rom))           suspicious_crc.add(curr_rom.crc);
        }
      }
    }
  }
 else   if (qName.equals(""String_Node_Str"")) {
    if (curr_disk.getName() != null) {
      (in_machine ? curr_machine : curr_software).disks.add(curr_disk);
      disks_cnt++;
    }
  }
 else   if (qName.equals(""String_Node_Str"") && (in_machine || in_software || in_softwares_list)) {
    in_description=false;
  }
}"
69213,public abstract String getFullName();,public abstract String getFullName(String filename);
69214,public abstract boolean isClone();,"public boolean isClone(){
  return (parent != null && !getParent().isBios());
}"
69215,"@Override public String getFullName(){
  return name;
}","@Override public String getFullName(String filename){
  return filename;
}"
69216,"@Override public String getName(){
  if (Machine.merge_mode.isMerge()) {
    if (merge == null) {
      if (isCollisionMode() && parent.isClone())       return parent.name + ""String_Node_Str"" + name;
    }
 else     return merge;
  }
  return name;
}","@Override public String getName(){
  if (Machine.merge_mode.isMerge()) {
    if (merge == null) {
      if (isCollisionMode() && parent.isClone()) {
        return parent.name + ""String_Node_Str"" + name;
      }
    }
 else     return merge;
  }
  return name;
}"
69217,"@Override public String getFullName(){
  return list.name + ""String_Node_Str"" + name;
}","@Override public String getFullName(String filename){
  return list.name + File.separator + filename;
}"
69218,"@Override public boolean doAction(ProgressHandler handler){
  handler.setProgress(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ container.m.description+ ""String_Node_Str"");
  if (container.getType() == Container.Type.ZIP) {
    if (format == FormatOptions.ZIP || format == FormatOptions.TZIP) {
      Map<String,Object> env=new HashMap<>();
      env.put(""String_Node_Str"",""String_Node_Str"");
      env.put(""String_Node_Str"",Boolean.TRUE);
      try (FileSystem fs=FileSystems.newFileSystem(URI.create(""String_Node_Str"" + container.file.toURI()),env)){
        for (        EntryAction action : entry_actions)         if (!action.doAction(fs,handler)) {
          System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
          return false;
        }
        fs.close();
        if (format == FormatOptions.TZIP && tzip_cmd.exists()) {
          return new ProcessBuilder(tzip_cmd.getPath(),container.file.getAbsolutePath()).directory(tzip_cmd.getParentFile()).start().waitFor() == 0;
        }
        return true;
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
 else     if (format == FormatOptions.ZIPE) {
      try (Archive archive=new ZipArchive(container.file)){
        for (        EntryAction action : entry_actions)         if (!action.doAction(archive,handler)) {
          System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
          return false;
        }
        return true;
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
 else   if (container.getType() == Container.Type.SEVENZIP) {
    try (Archive archive=new SevenZipArchive(container.file)){
      for (      EntryAction action : entry_actions)       if (!action.doAction(archive,handler)) {
        System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
        return false;
      }
      return true;
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
 else   if (container.getType() == Container.Type.DIR) {
    try {
      Path target=container.file.toPath();
      if (FileSystems.getDefault().supportedFileAttributeViews().contains(""String_Node_Str""))       Files.createDirectories(target,PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString(""String_Node_Str"")));
 else       Files.createDirectories(target);
      for (      EntryAction action : entry_actions)       if (!action.doAction(target,handler)) {
        System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
        return false;
      }
      return true;
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
  return false;
}","@Override public boolean doAction(ProgressHandler handler){
  handler.setProgress(""String_Node_Str"" + container.m.getFullName(container.file.getName()) + ""String_Node_Str""+ container.m.description+ ""String_Node_Str"");
  if (container.getType() == Container.Type.ZIP) {
    if (format == FormatOptions.ZIP || format == FormatOptions.TZIP) {
      Map<String,Object> env=new HashMap<>();
      env.put(""String_Node_Str"",""String_Node_Str"");
      env.put(""String_Node_Str"",Boolean.TRUE);
      try (FileSystem fs=FileSystems.newFileSystem(URI.create(""String_Node_Str"" + container.file.toURI()),env)){
        for (        EntryAction action : entry_actions)         if (!action.doAction(fs,handler)) {
          System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
          return false;
        }
        fs.close();
        if (format == FormatOptions.TZIP && tzip_cmd.exists()) {
          return new ProcessBuilder(tzip_cmd.getPath(),container.file.getAbsolutePath()).directory(tzip_cmd.getParentFile()).start().waitFor() == 0;
        }
        return true;
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
 else     if (format == FormatOptions.ZIPE) {
      try (Archive archive=new ZipArchive(container.file)){
        for (        EntryAction action : entry_actions)         if (!action.doAction(archive,handler)) {
          System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
          return false;
        }
        return true;
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
 else   if (container.getType() == Container.Type.SEVENZIP) {
    try (Archive archive=new SevenZipArchive(container.file)){
      for (      EntryAction action : entry_actions)       if (!action.doAction(archive,handler)) {
        System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
        return false;
      }
      return true;
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
 else   if (container.getType() == Container.Type.DIR) {
    try {
      Path target=container.file.toPath();
      if (FileSystems.getDefault().supportedFileAttributeViews().contains(""String_Node_Str""))       Files.createDirectories(target,PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString(""String_Node_Str"")));
 else       Files.createDirectories(target);
      for (      EntryAction action : entry_actions)       if (!action.doAction(target,handler)) {
        System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
        return false;
      }
      return true;
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
  return false;
}"
69219,"@Override public boolean doAction(ProgressHandler handler){
  handler.setProgress(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ container.m.description+ ""String_Node_Str"");
  if (container.getType() == Container.Type.ZIP) {
    if (format == FormatOptions.ZIP) {
      Map<String,Object> env=new HashMap<>();
      env.put(""String_Node_Str"",""String_Node_Str"");
      env.put(""String_Node_Str"",Boolean.TRUE);
      try (FileSystem fs=FileSystems.newFileSystem(URI.create(""String_Node_Str"" + container.file.toURI()),env)){
        for (        EntryAction action : entry_actions) {
          if (!action.doAction(fs,handler)) {
            System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
            return false;
          }
        }
        deleteEmptyFolders(fs.getPath(""String_Node_Str""));
        fs.close();
        if (format == FormatOptions.TZIP && tzip_cmd.exists()) {
          return new ProcessBuilder(tzip_cmd.getPath(),container.file.getAbsolutePath()).directory(tzip_cmd.getParentFile()).start().waitFor() == 0;
        }
        return true;
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
 else     if (format == FormatOptions.ZIPE) {
      try (Archive archive=new ZipArchive(container.file)){
        for (        EntryAction action : entry_actions) {
          if (!action.doAction(archive,handler)) {
            System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
            return false;
          }
        }
        return true;
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
 else   if (container.getType() == Container.Type.SEVENZIP) {
    try (Archive archive=new SevenZipArchive(container.file)){
      for (      EntryAction action : entry_actions) {
        if (!action.doAction(archive,handler)) {
          System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
          return false;
        }
      }
      return true;
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
 else   if (container.getType() == Container.Type.DIR) {
    Path target=container.file.toPath();
    for (    EntryAction action : entry_actions) {
      if (!action.doAction(target,handler)) {
        System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
        return false;
      }
    }
    deleteEmptyFolders(container.file);
    return true;
  }
  return false;
}","@Override public boolean doAction(ProgressHandler handler){
  handler.setProgress(""String_Node_Str"" + container.m.getFullName(container.file.getName()) + ""String_Node_Str""+ container.m.description+ ""String_Node_Str"");
  if (container.getType() == Container.Type.ZIP) {
    if (format == FormatOptions.ZIP) {
      Map<String,Object> env=new HashMap<>();
      env.put(""String_Node_Str"",""String_Node_Str"");
      env.put(""String_Node_Str"",Boolean.TRUE);
      try (FileSystem fs=FileSystems.newFileSystem(URI.create(""String_Node_Str"" + container.file.toURI()),env)){
        for (        EntryAction action : entry_actions) {
          if (!action.doAction(fs,handler)) {
            System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
            return false;
          }
        }
        deleteEmptyFolders(fs.getPath(""String_Node_Str""));
        fs.close();
        if (format == FormatOptions.TZIP && tzip_cmd.exists()) {
          return new ProcessBuilder(tzip_cmd.getPath(),container.file.getAbsolutePath()).directory(tzip_cmd.getParentFile()).start().waitFor() == 0;
        }
        return true;
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
 else     if (format == FormatOptions.ZIPE) {
      try (Archive archive=new ZipArchive(container.file)){
        for (        EntryAction action : entry_actions) {
          if (!action.doAction(archive,handler)) {
            System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
            return false;
          }
        }
        return true;
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
 else   if (container.getType() == Container.Type.SEVENZIP) {
    try (Archive archive=new SevenZipArchive(container.file)){
      for (      EntryAction action : entry_actions) {
        if (!action.doAction(archive,handler)) {
          System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
          return false;
        }
      }
      return true;
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
 else   if (container.getType() == Container.Type.DIR) {
    Path target=container.file.toPath();
    for (    EntryAction action : entry_actions) {
      if (!action.doAction(target,handler)) {
        System.err.println(""String_Node_Str"" + container.file.getName() + ""String_Node_Str""+ action.entry.file+ ""String_Node_Str"");
        return false;
      }
    }
    deleteEmptyFolders(container.file);
    return true;
  }
  return false;
}"
69220,"@Override public int add_stdin(InputStream src,String entry) throws IOException {
  if (readonly)   return -1;
  FileUtils.copyInputStreamToFile(src,new File(getTempDir(),entry));
  to_add.add(entry);
  return 0;
}","@Override public int add_stdin(InputStream src,String entry) throws IOException {
  if (readonly)   return -1;
  System.out.println(""String_Node_Str"" + new File(getTempDir(),entry));
  FileUtils.copyInputStreamToFile(src,new File(getTempDir(),entry));
  to_add.add(entry);
  return 0;
}"
69221,"@Override public void close() throws IOException {
  if (!to_add.isEmpty() || !to_rename.isEmpty() || !to_delete.isEmpty()|| !to_duplicate.isEmpty()) {
    IOutCreateCallback<IOutItemAllFormats> callback=new IOutCreateCallback<IOutItemAllFormats>(){
      HashMap<Integer,String> idx_to_delete=new HashMap<>();
      HashMap<Integer,String> idx_to_rename=new HashMap<>();
      ArrayList<Object[]> idx_to_duplicate=new ArrayList<>();
      int old_idx=0, old_tot=0;
      HashMap<Integer,RandomAccessFile> rafs=new HashMap<>();
      HashMap<Integer,File> tmpfiles=new HashMap<>();
      int curr_index=-1;
{
        if (iinarchive != null) {
          old_tot=iinarchive.getNumberOfItems();
          for (int i=0; i < old_tot; i++) {
            String path=iinarchive.getProperty(i,PropID.PATH).toString();
            for (            String to_d : to_delete) {
              if (path.equals(to_d)) {
                idx_to_delete.put(i,to_d);
                break;
              }
            }
            for (            Entry<String,String> to_r : to_rename.entrySet()) {
              if (path.equals(to_r.getKey())) {
                idx_to_rename.put(i,to_r.getValue());
                break;
              }
            }
            for (            Entry<String,String> to_p : to_duplicate.entrySet()) {
              if (path.equals(to_p.getValue())) {
                idx_to_duplicate.add(new Object[]{i,to_p.getKey(),null});
              }
            }
          }
          if (to_delete.size() != idx_to_delete.size())           System.err.println(""String_Node_Str"" + to_delete.size() + ""String_Node_Str""+ idx_to_delete.size());
          if (to_rename.size() != idx_to_rename.size())           System.err.println(""String_Node_Str"" + to_rename.size() + ""String_Node_Str""+ idx_to_rename.size());
          if (to_duplicate.size() != idx_to_duplicate.size())           System.err.println(""String_Node_Str"" + to_duplicate.size() + ""String_Node_Str""+ idx_to_duplicate.size());
        }
      }
      @Override public void setTotal(      long total) throws SevenZipException {
      }
      @Override public void setCompleted(      long complete) throws SevenZipException {
      }
      @Override public void setOperationResult(      boolean operationResultOk) throws SevenZipException {
        try {
          if (curr_index >= 0) {
            if (rafs.containsKey(curr_index))             rafs.remove(curr_index).close();
            if (tmpfiles.containsKey(curr_index))             tmpfiles.remove(curr_index).delete();
            curr_index=-1;
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      @Override public ISequentialInStream getStream(      int index) throws SevenZipException {
        curr_index=index;
        if (index + idx_to_delete.size() - old_tot < to_add.size()) {
          try {
            rafs.put(index,new RandomAccessFile(new File(getTempDir(),to_add.get(index + idx_to_delete.size() - old_tot)),""String_Node_Str""));
            return new RandomAccessFileInStream(rafs.get(index));
          }
 catch (          FileNotFoundException e) {
            e.printStackTrace();
          }
catch (          IOException e) {
            e.printStackTrace();
          }
        }
        if (index + idx_to_delete.size() - old_tot - to_add.size() < to_duplicate.size()) {
          try {
            if (!rafs.containsKey(index)) {
              HashMap<Integer,File> tmpfiles_by_oldindex=new HashMap<>();
              HashMap<Integer,RandomAccessFile> rafs2=new HashMap<>();
              for (              Object[] o : idx_to_duplicate) {
                if (!tmpfiles_by_oldindex.containsKey(o[0]))                 tmpfiles_by_oldindex.put((Integer)o[0],Files.createTempFile(""String_Node_Str"",null).toFile());
                tmpfiles.put((Integer)o[2],tmpfiles_by_oldindex.get(o[0]));
              }
              for (              Entry<Integer,File> entry : tmpfiles_by_oldindex.entrySet())               rafs2.put(entry.getKey(),new RandomAccessFile(entry.getValue(),""String_Node_Str""));
              int[] indices=idx_to_duplicate.stream().flatMapToInt(objs -> IntStream.of((Integer)objs[0])).toArray();
              iinarchive.extract(indices,false,new IArchiveExtractCallback(){
                @Override public void setTotal(                long total) throws SevenZipException {
                }
                @Override public void setCompleted(                long complete) throws SevenZipException {
                }
                @Override public void setOperationResult(                ExtractOperationResult extractOperationResult) throws SevenZipException {
                }
                @Override public void prepareOperation(                ExtractAskMode extractAskMode) throws SevenZipException {
                }
                @Override public ISequentialOutStream getStream(                int idx,                ExtractAskMode extractAskMode) throws SevenZipException {
                  if (ExtractAskMode.EXTRACT == extractAskMode)                   return new RandomAccessFileOutStream(rafs2.get(idx));
                  return null;
                }
              }
);
              for (              RandomAccessFile raf2 : rafs2.values())               raf2.close();
              for (              Entry<Integer,File> entry : tmpfiles.entrySet())               rafs.put(entry.getKey(),new RandomAccessFile(entry.getValue(),""String_Node_Str""));
            }
            rafs.get(index).seek(0);
            return new RandomAccessFileInStream(rafs.get(index));
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
        return null;
      }
      @Override public IOutItemAllFormats getItemInformation(      int index,      OutItemFactory<IOutItemAllFormats> outItemFactory) throws SevenZipException {
        try {
          while (idx_to_delete.containsKey(old_idx))           old_idx++;
          if (idx_to_rename.containsKey(old_idx)) {
            IOutItemAllFormats item=outItemFactory.createOutItemAndCloneProperties(old_idx);
            item.setPropertyPath(idx_to_rename.get(old_idx));
            return item;
          }
          if (old_idx < old_tot)           return outItemFactory.createOutItem(old_idx);
 else {
            if (old_idx - old_tot < to_add.size()) {
              String file=to_add.get(old_idx - old_tot);
              IOutItemAllFormats item=outItemFactory.createOutItem();
              item.setPropertyPath(file);
              try {
                item.setDataSize(new File(getTempDir(),file).length());
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
              item.setUpdateIsNewData(true);
              item.setUpdateIsNewProperties(true);
              return item;
            }
 else {
              Object[] objects=idx_to_duplicate.get(old_idx - old_tot - to_add.size());
              ISimpleInArchiveItem ref_item=iinarchive.getSimpleInterface().getArchiveItem((Integer)objects[0]);
              objects[2]=index;
              IOutItemAllFormats item=outItemFactory.createOutItem();
              item.setPropertyPath((String)objects[1]);
              item.setDataSize(ref_item.getSize());
              item.setUpdateIsNewData(true);
              item.setUpdateIsNewProperties(true);
              return item;
            }
          }
        }
  finally {
          old_idx++;
        }
      }
    }
;
    if (archive.exists() && iinarchive != null) {
      File tmpfile=Files.createTempFile(archive.getParentFile().toPath(),""String_Node_Str"",""String_Node_Str"" + ext).toFile();
      tmpfile.delete();
      try (RandomAccessFile raf=new RandomAccessFile(tmpfile,""String_Node_Str"")){
        IOutUpdateArchive<IOutItemAllFormats> iout=iinarchive.getConnectedOutArchive();
        SetOptions(iout);
        int itemsCount=iinarchive.getNumberOfItems() - to_delete.size() + to_add.size() + to_duplicate.size();
        iout.updateItems(new RandomAccessFileOutStream(raf),itemsCount,callback);
      }
       for (      Closeable c : closeables)       c.close();
      closeables.clear();
      if (tmpfile.exists() && tmpfile.length() > 0) {
        archive.delete();
        if (!tmpfile.renameTo(archive))         tmpfile.delete();
      }
    }
 else {
      try (IOutCreateArchive<IOutItemAllFormats> iout=SevenZip.openOutArchive(format);RandomAccessFile raf=new RandomAccessFile(archive,""String_Node_Str"")){
        SetOptions(iout);
        int itemsCount=to_add.size() + to_duplicate.size();
        iout.createArchive(new RandomAccessFileOutStream(raf),itemsCount,callback);
      }
       for (      Closeable c : closeables)       c.close();
      closeables.clear();
    }
  }
 else {
    for (    Closeable c : closeables)     c.close();
    closeables.clear();
  }
  try {
    if (tempDir != null)     FileUtils.deleteDirectory(tempDir);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void close() throws IOException {
  if (!to_add.isEmpty() || !to_rename.isEmpty() || !to_delete.isEmpty()|| !to_duplicate.isEmpty()) {
    HashMap<Integer,RandomAccessFile> rafs=new HashMap<>();
    HashMap<Integer,File> tmpfiles=new HashMap<>();
    IOutCreateCallback<IOutItemAllFormats> callback=new IOutCreateCallback<IOutItemAllFormats>(){
      HashMap<Integer,String> idx_to_delete=new HashMap<>();
      HashMap<Integer,String> idx_to_rename=new HashMap<>();
      ArrayList<Object[]> idx_to_duplicate=new ArrayList<>();
      int old_idx=0, old_tot=0;
      int curr_index=-1;
{
        if (iinarchive != null) {
          old_tot=iinarchive.getNumberOfItems();
          for (int i=0; i < old_tot; i++) {
            String path=iinarchive.getProperty(i,PropID.PATH).toString();
            for (            String to_d : to_delete) {
              if (path.equals(to_d)) {
                idx_to_delete.put(i,to_d);
                break;
              }
            }
            for (            Entry<String,String> to_r : to_rename.entrySet()) {
              if (path.equals(to_r.getKey())) {
                idx_to_rename.put(i,to_r.getValue());
                break;
              }
            }
            for (            Entry<String,String> to_p : to_duplicate.entrySet()) {
              if (path.equals(to_p.getValue())) {
                idx_to_duplicate.add(new Object[]{i,to_p.getKey(),null});
              }
            }
          }
          if (to_delete.size() != idx_to_delete.size())           System.err.println(""String_Node_Str"" + to_delete.size() + ""String_Node_Str""+ idx_to_delete.size());
          if (to_rename.size() != idx_to_rename.size())           System.err.println(""String_Node_Str"" + to_rename.size() + ""String_Node_Str""+ idx_to_rename.size());
          if (to_duplicate.size() != idx_to_duplicate.size())           System.err.println(""String_Node_Str"" + to_duplicate.size() + ""String_Node_Str""+ idx_to_duplicate.size());
        }
      }
      @Override public void setTotal(      long total) throws SevenZipException {
      }
      @Override public void setCompleted(      long complete) throws SevenZipException {
      }
      @Override public void setOperationResult(      boolean operationResultOk) throws SevenZipException {
      }
      @Override public ISequentialInStream getStream(      int index) throws SevenZipException {
        System.out.println(""String_Node_Str"" + index);
        curr_index=index;
        if (index + idx_to_delete.size() - old_tot < to_add.size()) {
          try {
            System.out.println(""String_Node_Str"" + new File(getTempDir(),to_add.get(index + idx_to_delete.size() - old_tot)));
            rafs.put(index,new RandomAccessFile(new File(getTempDir(),to_add.get(index + idx_to_delete.size() - old_tot)),""String_Node_Str""));
            return new RandomAccessFileInStream(rafs.get(index));
          }
 catch (          FileNotFoundException e) {
            e.printStackTrace();
          }
catch (          IOException e) {
            e.printStackTrace();
          }
        }
        if (index + idx_to_delete.size() - old_tot - to_add.size() < to_duplicate.size()) {
          try {
            if (!rafs.containsKey(index)) {
              HashMap<Integer,File> tmpfiles_by_oldindex=new HashMap<>();
              HashMap<Integer,RandomAccessFile> rafs2=new HashMap<>();
              for (              Object[] o : idx_to_duplicate) {
                if (!tmpfiles_by_oldindex.containsKey(o[0]))                 tmpfiles_by_oldindex.put((Integer)o[0],Files.createTempFile(""String_Node_Str"",null).toFile());
                tmpfiles.put((Integer)o[2],tmpfiles_by_oldindex.get(o[0]));
              }
              for (              Entry<Integer,File> entry : tmpfiles_by_oldindex.entrySet())               rafs2.put(entry.getKey(),new RandomAccessFile(entry.getValue(),""String_Node_Str""));
              int[] indices=idx_to_duplicate.stream().flatMapToInt(objs -> IntStream.of((Integer)objs[0])).toArray();
              iinarchive.extract(indices,false,new IArchiveExtractCallback(){
                @Override public void setTotal(                long total) throws SevenZipException {
                }
                @Override public void setCompleted(                long complete) throws SevenZipException {
                }
                @Override public void setOperationResult(                ExtractOperationResult extractOperationResult) throws SevenZipException {
                }
                @Override public void prepareOperation(                ExtractAskMode extractAskMode) throws SevenZipException {
                }
                @Override public ISequentialOutStream getStream(                int idx,                ExtractAskMode extractAskMode) throws SevenZipException {
                  if (ExtractAskMode.EXTRACT == extractAskMode)                   return new RandomAccessFileOutStream(rafs2.get(idx));
                  return null;
                }
              }
);
              for (              RandomAccessFile raf2 : rafs2.values())               raf2.close();
              for (              Entry<Integer,File> entry : tmpfiles.entrySet())               rafs.put(entry.getKey(),new RandomAccessFile(entry.getValue(),""String_Node_Str""));
            }
            rafs.get(index).seek(0);
            return new RandomAccessFileInStream(rafs.get(index));
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
        return null;
      }
      @Override public IOutItemAllFormats getItemInformation(      int index,      OutItemFactory<IOutItemAllFormats> outItemFactory) throws SevenZipException {
        try {
          while (idx_to_delete.containsKey(old_idx))           old_idx++;
          if (idx_to_rename.containsKey(old_idx)) {
            IOutItemAllFormats item=outItemFactory.createOutItemAndCloneProperties(old_idx);
            item.setPropertyPath(idx_to_rename.get(old_idx));
            return item;
          }
          if (old_idx < old_tot)           return outItemFactory.createOutItem(old_idx);
 else {
            if (old_idx - old_tot < to_add.size()) {
              String file=to_add.get(old_idx - old_tot);
              IOutItemAllFormats item=outItemFactory.createOutItem();
              item.setPropertyPath(file);
              try {
                item.setDataSize(new File(getTempDir(),file).length());
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
              item.setUpdateIsNewData(true);
              item.setUpdateIsNewProperties(true);
              return item;
            }
 else {
              Object[] objects=idx_to_duplicate.get(old_idx - old_tot - to_add.size());
              ISimpleInArchiveItem ref_item=iinarchive.getSimpleInterface().getArchiveItem((Integer)objects[0]);
              objects[2]=index;
              IOutItemAllFormats item=outItemFactory.createOutItem();
              item.setPropertyPath((String)objects[1]);
              item.setDataSize(ref_item.getSize());
              item.setUpdateIsNewData(true);
              item.setUpdateIsNewProperties(true);
              return item;
            }
          }
        }
  finally {
          old_idx++;
        }
      }
    }
;
    if (archive.exists() && iinarchive != null) {
      File tmpfile=Files.createTempFile(archive.getParentFile().toPath(),""String_Node_Str"",""String_Node_Str"" + ext).toFile();
      tmpfile.delete();
      try (RandomAccessFile raf=new RandomAccessFile(tmpfile,""String_Node_Str"")){
        IOutUpdateArchive<IOutItemAllFormats> iout=iinarchive.getConnectedOutArchive();
        SetOptions(iout);
        int itemsCount=iinarchive.getNumberOfItems() - to_delete.size() + to_add.size() + to_duplicate.size();
        iout.updateItems(new RandomAccessFileOutStream(raf),itemsCount,callback);
      }
       for (      Closeable c : closeables)       c.close();
      closeables.clear();
      if (tmpfile.exists() && tmpfile.length() > 0) {
        archive.delete();
        if (!tmpfile.renameTo(archive))         tmpfile.delete();
      }
    }
 else {
      try (IOutCreateArchive<IOutItemAllFormats> iout=SevenZip.openOutArchive(format);RandomAccessFile raf=new RandomAccessFile(archive,""String_Node_Str"")){
        SetOptions(iout);
        int itemsCount=to_add.size() + to_duplicate.size();
        iout.createArchive(new RandomAccessFileOutStream(raf),itemsCount,callback);
      }
       for (      Closeable c : closeables)       c.close();
      closeables.clear();
    }
    for (    RandomAccessFile raf : rafs.values())     raf.close();
    for (    File tmpfile : tmpfiles.values())     tmpfile.delete();
  }
 else {
    for (    Closeable c : closeables)     c.close();
    closeables.clear();
  }
  try {
    if (tempDir != null)     FileUtils.deleteDirectory(tempDir);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
69222,"public DirScan(Profile profile,File dir,ProgressHandler handler,boolean is_dest) throws BreakException {
  this();
  need_sha1_or_md5=profile.getProperty(""String_Node_Str"",false);
  use_parallelism=profile.getProperty(""String_Node_Str"",false);
  Path path=Paths.get(dir.getAbsolutePath());
  containers_byname=load(dir,handler);
  try (Stream<Path> stream=Files.walk(path,is_dest ? 1 : 100,FileVisitOption.FOLLOW_LINKS)){
    AtomicInteger i=new AtomicInteger();
    handler.setProgress(""String_Node_Str"" + dir + ""String_Node_Str"",-1);
    StreamEx.of(StreamSupport.stream(stream.spliterator(),use_parallelism)).unordered().takeWhile((p) -> !handler.isCancel()).forEach(p -> {
      Container c=null;
      if (path.equals(p))       return;
      File file=p.toFile();
      try {
        BasicFileAttributes attr=Files.readAttributes(p,BasicFileAttributes.class);
        if (is_dest) {
          if (null == (c=containers_byname.get(file.getName())) || c.modified != attr.lastModifiedTime().toMillis() || (c instanceof Archive && c.size != attr.size())) {
            if (attr.isRegularFile())             containers.add(c=new Archive(file,attr));
 else             containers.add(c=new Directory(file,attr));
            if (c != null) {
              c.up2date=true;
              containers_byname.put(file.getName(),c);
            }
          }
 else {
            c.up2date=true;
            containers.add(c);
          }
        }
 else {
          if (attr.isRegularFile()) {
            if (Container.getType(file) == Type.UNK) {
              File parent_dir=file.getParentFile();
              BasicFileAttributes parent_attr=Files.readAttributes(p.getParent(),BasicFileAttributes.class);
              if (null == (c=containers_byname.get(parent_dir.getAbsolutePath())) || c.modified != parent_attr.lastModifiedTime().toMillis()) {
                containers.add(c=new Directory(parent_dir,attr));
                if (c != null) {
                  c.up2date=true;
                  containers_byname.put(parent_dir.getAbsolutePath(),c);
                }
              }
 else {
                c.up2date=true;
                containers.add(c);
              }
            }
 else {
              if (null == (c=containers_byname.get(file.getName())) || c.modified != attr.lastModifiedTime().toMillis() || c.size != attr.size()) {
                containers.add(c=new Archive(file,attr));
                if (c != null) {
                  c.up2date=true;
                  containers_byname.put(file.getName(),c);
                }
              }
 else {
                c.up2date=true;
                containers.add(c);
              }
            }
          }
        }
        handler.setProgress(""String_Node_Str"" + dir + ""String_Node_Str""+ i.incrementAndGet()+ ""String_Node_Str"");
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
);
    if (containers_byname.entrySet().removeIf(entry -> !entry.getValue().up2date))     Log.info(""String_Node_Str"");
  }
 catch (  IOException e) {
    Log.err(""String_Node_Str"",e);
  }
catch (  Throwable e) {
    Log.err(""String_Node_Str"",e);
  }
  AtomicInteger i=new AtomicInteger(0);
  handler.setProgress(""String_Node_Str"" + dir + ""String_Node_Str"",i.get(),containers.size());
  StreamEx.of(use_parallelism ? containers.parallelStream().unordered() : containers.stream()).takeWhile((c) -> !handler.isCancel()).forEach(c -> {
    try {
switch (c.getType()) {
case ZIP:
{
          if (c.loaded < 1 || (need_sha1_or_md5 && c.loaded < 2)) {
            Map<String,Object> env=new HashMap<>();
            env.put(""String_Node_Str"",Boolean.TRUE);
            try (FileSystem fs=FileSystems.newFileSystem(URI.create(""String_Node_Str"" + c.file.toURI()),env)){
              final Path root=fs.getPath(""String_Node_Str"");
              Files.walkFileTree(root,new SimpleFileVisitor<Path>(){
                @Override public FileVisitResult visitFile(                Path entry_path,                BasicFileAttributes attrs) throws IOException {
                  update_entry(profile,c.add(new Entry(entry_path.toString())),entry_path);
                  return FileVisitResult.CONTINUE;
                }
                @Override public FileVisitResult preVisitDirectory(                Path dir,                BasicFileAttributes attrs) throws IOException {
                  return FileVisitResult.CONTINUE;
                }
              }
);
              c.loaded=need_sha1_or_md5 ? 2 : 1;
            }
           }
 else {
            for (            Entry entry : c.getEntries())             update_entry(profile,entry);
          }
          break;
        }
case SEVENZIP:
{
        try (SevenZUpdateEntries entries=new SevenZUpdateEntries(profile,c)){
          entries.updateEntries();
        }
         break;
      }
case DIR:
{
      Files.walkFileTree(c.file.toPath(),new SimpleFileVisitor<Path>(){
        @Override public FileVisitResult visitFile(        Path entry_path,        BasicFileAttributes attrs) throws IOException {
          update_entry(profile,c.add(new Entry(entry_path.toString(),attrs)),entry_path);
          return FileVisitResult.CONTINUE;
        }
        @Override public FileVisitResult preVisitDirectory(        Path dir,        BasicFileAttributes attrs) throws IOException {
          return FileVisitResult.CONTINUE;
        }
      }
);
      c.loaded=need_sha1_or_md5 ? 2 : 1;
      break;
    }
default :
  break;
}
handler.setProgress(""String_Node_Str"" + c.file.getName(),i.incrementAndGet(),null,i.get() + ""String_Node_Str"" + containers.size()+ ""String_Node_Str""+ (int)(i.get() * 100.0 / containers.size())+ ""String_Node_Str"");
}
 catch (IOException e) {
Log.err(""String_Node_Str"",e);
}
catch (BreakException e) {
handler.cancel();
}
catch (Throwable e) {
Log.err(""String_Node_Str"",e);
}
}
);
save(dir,containers_byname);
}","public DirScan(Profile profile,File dir,ProgressHandler handler,boolean is_dest) throws BreakException {
  this();
  need_sha1_or_md5=profile.getProperty(""String_Node_Str"",false);
  use_parallelism=profile.getProperty(""String_Node_Str"",false);
  Path path=Paths.get(dir.getAbsolutePath());
  if (!Settings.getProperty(""String_Node_Str"",false))   containers_byname=load(dir,handler);
  try (Stream<Path> stream=Files.walk(path,is_dest ? 1 : 100,FileVisitOption.FOLLOW_LINKS)){
    AtomicInteger i=new AtomicInteger();
    handler.setProgress(""String_Node_Str"" + dir + ""String_Node_Str"",-1);
    StreamEx.of(StreamSupport.stream(stream.spliterator(),use_parallelism)).unordered().takeWhile((p) -> !handler.isCancel()).forEach(p -> {
      Container c=null;
      if (path.equals(p))       return;
      File file=p.toFile();
      try {
        BasicFileAttributes attr=Files.readAttributes(p,BasicFileAttributes.class);
        if (is_dest) {
          if (null == (c=containers_byname.get(file.getName())) || c.modified != attr.lastModifiedTime().toMillis() || (c instanceof Archive && c.size != attr.size())) {
            if (attr.isRegularFile())             containers.add(c=new Archive(file,attr));
 else             containers.add(c=new Directory(file,attr));
            if (c != null) {
              c.up2date=true;
              containers_byname.put(file.getName(),c);
            }
          }
 else {
            c.up2date=true;
            containers.add(c);
          }
        }
 else {
          if (attr.isRegularFile()) {
            if (Container.getType(file) == Type.UNK) {
              File parent_dir=file.getParentFile();
              BasicFileAttributes parent_attr=Files.readAttributes(p.getParent(),BasicFileAttributes.class);
              if (null == (c=containers_byname.get(parent_dir.getAbsolutePath())) || c.modified != parent_attr.lastModifiedTime().toMillis()) {
                containers.add(c=new Directory(parent_dir,attr));
                if (c != null) {
                  c.up2date=true;
                  containers_byname.put(parent_dir.getAbsolutePath(),c);
                }
              }
 else {
                c.up2date=true;
                containers.add(c);
              }
            }
 else {
              if (null == (c=containers_byname.get(file.getName())) || c.modified != attr.lastModifiedTime().toMillis() || c.size != attr.size()) {
                containers.add(c=new Archive(file,attr));
                if (c != null) {
                  c.up2date=true;
                  containers_byname.put(file.getName(),c);
                }
              }
 else {
                c.up2date=true;
                containers.add(c);
              }
            }
          }
        }
        handler.setProgress(""String_Node_Str"" + dir + ""String_Node_Str""+ i.incrementAndGet()+ ""String_Node_Str"");
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
);
    if (containers_byname.entrySet().removeIf(entry -> !entry.getValue().up2date))     Log.info(""String_Node_Str"");
  }
 catch (  IOException e) {
    Log.err(""String_Node_Str"",e);
  }
catch (  Throwable e) {
    Log.err(""String_Node_Str"",e);
  }
  AtomicInteger i=new AtomicInteger(0);
  handler.setProgress(""String_Node_Str"" + dir + ""String_Node_Str"",i.get(),containers.size());
  StreamEx.of(use_parallelism ? containers.parallelStream().unordered() : containers.stream()).takeWhile((c) -> !handler.isCancel()).forEach(c -> {
    try {
switch (c.getType()) {
case ZIP:
{
          if (c.loaded < 1 || (need_sha1_or_md5 && c.loaded < 2)) {
            Map<String,Object> env=new HashMap<>();
            env.put(""String_Node_Str"",Boolean.TRUE);
            try (FileSystem fs=FileSystems.newFileSystem(URI.create(""String_Node_Str"" + c.file.toURI()),env)){
              final Path root=fs.getPath(""String_Node_Str"");
              Files.walkFileTree(root,new SimpleFileVisitor<Path>(){
                @Override public FileVisitResult visitFile(                Path entry_path,                BasicFileAttributes attrs) throws IOException {
                  update_entry(profile,c.add(new Entry(entry_path.toString())),entry_path);
                  return FileVisitResult.CONTINUE;
                }
                @Override public FileVisitResult preVisitDirectory(                Path dir,                BasicFileAttributes attrs) throws IOException {
                  return FileVisitResult.CONTINUE;
                }
              }
);
              c.loaded=need_sha1_or_md5 ? 2 : 1;
            }
           }
 else {
            for (            Entry entry : c.getEntries())             update_entry(profile,entry);
          }
          break;
        }
case SEVENZIP:
{
        try (SevenZUpdateEntries entries=new SevenZUpdateEntries(profile,c)){
          entries.updateEntries();
        }
         break;
      }
case DIR:
{
      Files.walkFileTree(c.file.toPath(),new SimpleFileVisitor<Path>(){
        @Override public FileVisitResult visitFile(        Path entry_path,        BasicFileAttributes attrs) throws IOException {
          update_entry(profile,c.add(new Entry(entry_path.toString(),attrs)),entry_path);
          return FileVisitResult.CONTINUE;
        }
        @Override public FileVisitResult preVisitDirectory(        Path dir,        BasicFileAttributes attrs) throws IOException {
          return FileVisitResult.CONTINUE;
        }
      }
);
      c.loaded=need_sha1_or_md5 ? 2 : 1;
      break;
    }
default :
  break;
}
handler.setProgress(""String_Node_Str"" + c.file.getName(),i.incrementAndGet(),null,i.get() + ""String_Node_Str"" + containers.size()+ ""String_Node_Str""+ (int)(i.get() * 100.0 / containers.size())+ ""String_Node_Str"");
}
 catch (IOException e) {
Log.err(""String_Node_Str"",e);
}
catch (BreakException e) {
handler.cancel();
}
catch (Throwable e) {
Log.err(""String_Node_Str"",e);
}
}
);
if (!handler.isCancel()) save(dir,containers_byname);
}"
69223,"public static Profile load(File file,ProgressHandler handler){
  File cachefile=getCacheFile(file);
  if (cachefile.lastModified() >= file.lastModified()) {
    handler.setProgress(""String_Node_Str"",-1);
    try (ObjectInputStream ois=new ObjectInputStream(new BufferedInputStream(new FileInputStream(cachefile)))){
      Profile profile=(Profile)ois.readObject();
      profile.loadSettings();
      return profile;
    }
 catch (    Throwable e) {
    }
  }
  Profile profile=new Profile();
  if (profile._load(file,handler)) {
    profile.loadSettings();
    return profile;
  }
  return null;
}","public static Profile load(File file,ProgressHandler handler){
  File cachefile=getCacheFile(file);
  if (cachefile.lastModified() >= file.lastModified() && !Settings.getProperty(""String_Node_Str"",false)) {
    handler.setProgress(""String_Node_Str"",-1);
    try (ObjectInputStream ois=new ObjectInputStream(new BufferedInputStream(new FileInputStream(cachefile)))){
      Profile profile=(Profile)ois.readObject();
      profile.loadSettings();
      return profile;
    }
 catch (    Throwable e) {
    }
  }
  Profile profile=new Profile();
  if (profile._load(file,handler)) {
    profile.loadSettings();
    return profile;
  }
  return null;
}"
69224,"private CanalConnector processInstanceEntry(Map.Entry<String,CanalConfig.Instance> instanceEntry){
  CanalConfig.Instance instance=instanceEntry.getValue();
  CanalConnector connector=CanalConnectors.newSingleConnector(new InetSocketAddress(instance.getHost(),instance.getPort()),instanceEntry.getKey(),instance.getUserName(),instance.getPassword());
  connector.connect();
  if (!StringUtils.isEmpty(instance.getFilter())) {
    connector.subscribe(instance.getFilter());
  }
  connector.rollback();
  return connector;
}","private CanalConnector processInstanceEntry(Map.Entry<String,CanalConfig.Instance> instanceEntry){
  CanalConfig.Instance instance=instanceEntry.getValue();
  CanalConnector connector=CanalConnectors.newSingleConnector(new InetSocketAddress(instance.getHost(),instance.getPort()),instanceEntry.getKey(),instance.getUserName(),instance.getPassword());
  connector.connect();
  if (!StringUtils.isEmpty(instance.getFilter())) {
    connector.subscribe(instance.getFilter());
  }
 else {
    connector.subscribe();
  }
  connector.rollback();
  return connector;
}"
69225,"@Override public void onError(Throwable e){
  e.printStackTrace();
  Toast.makeText(getContext(),R.string.error_mnemonics,Toast.LENGTH_LONG).show();
  customProgressDialog.cancel();
  etMnemonic.requestFocus();
  btnImportAccount.setEnabled(true);
}","@Override public void onError(Throwable e){
  e.printStackTrace();
  AlertDialog dialogTip=new AlertDialog.Builder(getContext()).setMessage(R.string.error_mnemonics).setNegativeButton(R.string.cancel,(dialog,which) -> dialog.cancel()).create();
  dialogTip.show();
  customProgressDialog.cancel();
  etMnemonic.requestFocus();
  btnImportAccount.setEnabled(true);
}"
69226,"private void importMnemonicAccount(){
  btnImportAccount.setEnabled(false);
  etAccountName.setError(null);
  etPassword.setError(null);
  etRepeatPassword.setError(null);
  String mnemonics=etMnemonic.getText().toString().trim();
  String name=etAccountName.getText().toString().trim();
  String password=etPassword.getText().toString();
  String repeatPassword=etRepeatPassword.getText().toString();
  boolean cancel=false;
  View focusView=null;
  if (TextUtils.isEmpty(mnemonics)) {
    focusView=etMnemonic;
    Toast.makeText(getActivity(),R.string.error_field_required,Toast.LENGTH_LONG).show();
    cancel=true;
  }
  if (!cancel && TextUtils.isEmpty(name)) {
    etAccountName.setError(getString(R.string.error_field_required));
    focusView=etAccountName;
    cancel=true;
  }
  if (!cancel && accounts != null && accounts.size() > 0) {
    for (    AccountEntity accountEntity : accounts) {
      if (accountEntity.getName().equals(name)) {
        cancel=true;
        break;
      }
    }
    if (cancel) {
      etAccountName.setError(getString(R.string.error_incorrect_name));
      focusView=etAccountName;
    }
  }
  if (!cancel && !password.equals(repeatPassword)) {
    etPassword.setError(getString(R.string.error_incorrect_password));
    focusView=etPassword;
    cancel=true;
  }
  if (cancel) {
    focusView.requestFocus();
    btnImportAccount.setEnabled(true);
    return;
  }
  if (CommonUtil.isValidMnemonics(mnemonics)) {
    customProgressDialog=new CustomProgressDialog(getActivity(),R.style.CustomProgressDialogStyle,getString(R.string.progress_import_account));
    customProgressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
    customProgressDialog.setCancelable(false);
    customProgressDialog.show();
    mViewModel.importAccountWithMnemonics(mnemonics,password,name).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<String>(){
      @Override public void onNext(      String address){
        customProgressDialog.cancel();
        if (address != null && WalletUtils.isValidAddress(address)) {
          Toast.makeText(getContext(),R.string.success_import_account,Toast.LENGTH_SHORT).show();
          getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
          Intent intent=new Intent();
          getActivity().setResult(Activity.RESULT_OK,intent);
          getActivity().finish();
        }
 else         if (address != null && address.length() == 0) {
          AlertDialog dialogTip=new AlertDialog.Builder(getContext()).setMessage(R.string.error_account_exists).setNegativeButton(R.string.cancel,(dialog,which) -> dialog.cancel()).create();
          dialogTip.show();
          etMnemonic.requestFocus();
          btnImportAccount.setEnabled(true);
        }
 else {
          Toast.makeText(getContext(),R.string.error_mnemonics,Toast.LENGTH_LONG).show();
          etMnemonic.requestFocus();
          btnImportAccount.setEnabled(true);
        }
      }
      @Override public void onError(      Throwable e){
        e.printStackTrace();
        Toast.makeText(getContext(),R.string.error_mnemonics,Toast.LENGTH_LONG).show();
        customProgressDialog.cancel();
        etMnemonic.requestFocus();
        btnImportAccount.setEnabled(true);
      }
      @Override public void onCompleted(){
      }
    }
);
  }
 else {
    Toast.makeText(getContext(),R.string.error_mnemonics_length,Toast.LENGTH_LONG).show();
    etMnemonic.requestFocus();
    btnImportAccount.setEnabled(true);
  }
}","private void importMnemonicAccount(){
  btnImportAccount.setEnabled(false);
  etAccountName.setError(null);
  etPassword.setError(null);
  etRepeatPassword.setError(null);
  String mnemonics=etMnemonic.getText().toString().trim();
  String name=etAccountName.getText().toString().trim();
  String password=etPassword.getText().toString();
  String repeatPassword=etRepeatPassword.getText().toString();
  boolean cancel=false;
  View focusView=null;
  if (TextUtils.isEmpty(mnemonics)) {
    focusView=etMnemonic;
    Toast.makeText(getActivity(),R.string.error_field_required,Toast.LENGTH_LONG).show();
    cancel=true;
  }
  if (!cancel && TextUtils.isEmpty(name)) {
    etAccountName.setError(getString(R.string.error_field_required));
    focusView=etAccountName;
    cancel=true;
  }
  if (!cancel && accounts != null && accounts.size() > 0) {
    for (    AccountEntity accountEntity : accounts) {
      if (accountEntity.getName().equals(name)) {
        cancel=true;
        break;
      }
    }
    if (cancel) {
      etAccountName.setError(getString(R.string.error_incorrect_name));
      focusView=etAccountName;
    }
  }
  if (!cancel && !password.equals(repeatPassword)) {
    etPassword.setError(getString(R.string.error_incorrect_password));
    focusView=etPassword;
    cancel=true;
  }
  if (cancel) {
    focusView.requestFocus();
    btnImportAccount.setEnabled(true);
    return;
  }
  if (CommonUtil.isValidMnemonics(mnemonics)) {
    customProgressDialog=new CustomProgressDialog(getActivity(),R.style.CustomProgressDialogStyle,getString(R.string.progress_import_account));
    customProgressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
    customProgressDialog.setCancelable(false);
    customProgressDialog.show();
    mViewModel.importAccountWithMnemonics(mnemonics,password,name).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<String>(){
      @Override public void onNext(      String address){
        customProgressDialog.cancel();
        if (address != null && WalletUtils.isValidAddress(address)) {
          Toast.makeText(getContext(),R.string.success_import_account,Toast.LENGTH_SHORT).show();
          getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
          Intent intent=new Intent();
          getActivity().setResult(Activity.RESULT_OK,intent);
          getActivity().finish();
        }
 else         if (address != null && address.length() == 0) {
          AlertDialog dialogTip=new AlertDialog.Builder(getContext()).setMessage(R.string.error_account_exists).setNegativeButton(R.string.cancel,(dialog,which) -> dialog.cancel()).create();
          dialogTip.show();
          etMnemonic.requestFocus();
          btnImportAccount.setEnabled(true);
        }
 else {
          Toast.makeText(getContext(),R.string.error_mnemonics,Toast.LENGTH_LONG).show();
          etMnemonic.requestFocus();
          btnImportAccount.setEnabled(true);
        }
      }
      @Override public void onError(      Throwable e){
        e.printStackTrace();
        AlertDialog dialogTip=new AlertDialog.Builder(getContext()).setMessage(R.string.error_mnemonics).setNegativeButton(R.string.cancel,(dialog,which) -> dialog.cancel()).create();
        dialogTip.show();
        customProgressDialog.cancel();
        etMnemonic.requestFocus();
        btnImportAccount.setEnabled(true);
      }
      @Override public void onCompleted(){
      }
    }
);
  }
 else {
    Toast.makeText(getContext(),R.string.error_mnemonics_length,Toast.LENGTH_LONG).show();
    etMnemonic.requestFocus();
    btnImportAccount.setEnabled(true);
  }
}"
69227,"public Observable<String> importAccountWithMnemonics(String mnemonics,String password,String name){
  return Observable.create((  Subscriber<? super String> e) -> {
    try {
      long timeSeconds=System.currentTimeMillis() / 1000;
      DeterministicSeed seed=new DeterministicSeed(mnemonics,null,""String_Node_Str"",timeSeconds);
      DeterministicKeyChain chain=DeterministicKeyChain.builder().seed(seed).build();
      List<ChildNumber> keyPath=HDUtils.parsePath(""String_Node_Str"");
      DeterministicKey key=chain.getKeyByPath(keyPath,true);
      BigInteger privateKey=key.getPrivKey();
      ECKeyPair ecKeyPair=ECKeyPair.create(privateKey);
      WalletFile walletFile=Wallet.createLight(password,ecKeyPair);
      String address=BrahmaWeb3jService.getInstance().prependHexPrefix(walletFile.getAddress());
      List<AccountEntity> accounts=mObservableAccounts.getValue();
      boolean cancel=false;
      if (accounts != null && accounts.size() > 0) {
        for (        AccountEntity accountEntity : accounts) {
          if (accountEntity.getAddress().equals(address)) {
            cancel=true;
            break;
          }
        }
      }
      if (cancel) {
        e.onNext(""String_Node_Str"");
      }
 else {
        SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
        String filename=dateFormat.format(new Date()) + walletFile.getAddress() + ""String_Node_Str"";
        File destination=new File(getApplication().getFilesDir(),filename);
        ObjectMapper objectMapper=ObjectMapperFactory.getObjectMapper();
        objectMapper.writeValue(destination,walletFile);
        AccountEntity account=new AccountEntity();
        account.setName(name);
        account.setAddress(BrahmaWeb3jService.getInstance().prependHexPrefix(walletFile.getAddress()));
        account.setFilename(filename);
        ((WalletApp)getApplication()).getRepository().createAccount(account);
        e.onNext(address);
      }
    }
 catch (    CipherException|IOException|UnreadableWalletException e1) {
      e1.printStackTrace();
      e.onNext(""String_Node_Str"");
    }
    e.onCompleted();
  }
);
}","public Observable<String> importAccountWithMnemonics(String mnemonics,String password,String accountName){
  return Observable.create((  Subscriber<? super String> e) -> {
    try {
      List<String> menmonicsCodes=Splitter.on(""String_Node_Str"").splitToList(mnemonics);
      MnemonicCode.INSTANCE.check(menmonicsCodes);
      long timeSeconds=System.currentTimeMillis() / 1000;
      DeterministicSeed seed=new DeterministicSeed(mnemonics,null,""String_Node_Str"",timeSeconds);
      DeterministicKeyChain chain=DeterministicKeyChain.builder().seed(seed).build();
      List<ChildNumber> keyPath=HDUtils.parsePath(""String_Node_Str"");
      DeterministicKey key=chain.getKeyByPath(keyPath,true);
      BigInteger privateKey=key.getPrivKey();
      ECKeyPair ecKeyPair=ECKeyPair.create(privateKey);
      WalletFile walletFile=Wallet.createLight(password,ecKeyPair);
      String address=BrahmaWeb3jService.getInstance().prependHexPrefix(walletFile.getAddress());
      List<AccountEntity> accounts=mObservableAccounts.getValue();
      boolean cancel=false;
      if (accounts != null && accounts.size() > 0) {
        for (        AccountEntity accountEntity : accounts) {
          if (accountEntity.getAddress().equals(address)) {
            cancel=true;
            break;
          }
        }
      }
      if (cancel) {
        e.onNext(""String_Node_Str"");
      }
 else {
        SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
        String filename=dateFormat.format(new Date()) + walletFile.getAddress() + ""String_Node_Str"";
        File destination=new File(getApplication().getFilesDir(),filename);
        ObjectMapper objectMapper=ObjectMapperFactory.getObjectMapper();
        objectMapper.writeValue(destination,walletFile);
        AccountEntity account=new AccountEntity();
        account.setName(accountName);
        account.setAddress(BrahmaWeb3jService.getInstance().prependHexPrefix(walletFile.getAddress()));
        account.setFilename(filename);
        ((WalletApp)getApplication()).getRepository().createAccount(account);
        e.onNext(address);
      }
    }
 catch (    MnemonicException e1) {
      e1.printStackTrace();
      e.onError(e1);
    }
catch (    CipherException|IOException|UnreadableWalletException e1) {
      e1.printStackTrace();
      e.onNext(""String_Node_Str"");
    }
    e.onCompleted();
  }
);
}"
69228,"public Flux<ResolvedTarget> resolveSingleTarget(Target configTarget){
  if (configTarget.getApplicationName() != null) {
    ResolvedTarget rt=new ResolvedTarget(configTarget);
    return Flux.just(rt);
  }
  Mono<String> orgIdMono=this.cfAccessor.retrieveOrgId(configTarget.getOrgName()).map(r -> r.getResources()).map(l -> l.get(0)).map(e -> e.getMetadata()).map(entry -> entry.getId());
  Mono<String> spaceIdMono=orgIdMono.flatMap(orgId -> {
    return this.cfAccessor.retrieveSpaceId(orgId,configTarget.getSpaceName());
  }
).map(r -> r.getResources()).map(l -> l.get(0)).map(e -> e.getMetadata()).map(entry -> entry.getId());
  Flux<String> applicationNamesFlux=selectApplications(configTarget,orgIdMono,spaceIdMono);
  Flux<ResolvedTarget> result=applicationNamesFlux.map(appName -> {
    ResolvedTarget newTarget=new ResolvedTarget(configTarget);
    newTarget.setApplicationName(appName);
    return newTarget;
  }
);
  return result;
}","public Flux<ResolvedTarget> resolveSingleTarget(Target configTarget){
  if (configTarget.getApplicationName() != null) {
    ResolvedTarget rt=new ResolvedTarget(configTarget);
    return Flux.just(rt);
  }
  Mono<String> orgIdMono=this.cfAccessor.retrieveOrgId(configTarget.getOrgName()).map(r -> r.getResources()).map(l -> l.get(0)).map(e -> e.getMetadata()).map(entry -> entry.getId());
  Mono<String> spaceIdMono=orgIdMono.flatMap(orgId -> {
    return this.cfAccessor.retrieveSpaceId(orgId,configTarget.getSpaceName());
  }
).map(r -> r.getResources()).map(l -> l.get(0)).map(e -> e.getMetadata()).map(entry -> entry.getId());
  Flux<String> applicationNamesFlux=selectApplications(configTarget,orgIdMono,spaceIdMono).doOnError(e -> {
    log.warn(String.format(""String_Node_Str"",configTarget.getOrgName(),configTarget.getSpaceName()),e);
  }
).onErrorResume(__ -> Flux.empty());
  Flux<ResolvedTarget> result=applicationNamesFlux.map(appName -> {
    ResolvedTarget newTarget=new ResolvedTarget(configTarget);
    newTarget.setApplicationName(appName);
    return newTarget;
  }
);
  return result;
}"
69229,"private Flux<String> selectApplications(Target configTarget,Mono<String> orgIdMono,Mono<String> spaceIdMono){
  Flux<String> applicationsInSelection=null;
  if (configTarget.getApplicationRegex() == null && configTarget.getApplicationName() != null) {
    throw new InternalError(""String_Node_Str"");
  }
 else {
    Mono<ListApplicationsResponse> responseMono=Mono.zip(orgIdMono,spaceIdMono).flatMap(tuple -> this.cfAccessor.retrieveAllApplicationIdsInSpace(tuple.getT1(),tuple.getT2()));
    applicationsInSelection=responseMono.map(r -> {
      List<ApplicationResource> resources=r.getResources();
      if (resources == null) {
        log.error(String.format(""String_Node_Str"",configTarget.getOrgName(),configTarget.getSpaceName()));
        throw Exceptions.propagate(new InvalidResponseFromCFCloudConnector(""String_Node_Str""));
      }
      return resources;
    }
).flatMapMany(resources -> {
      List<String> appNames=new LinkedList<>();
      for (      ApplicationResource ar : resources) {
        if (!isApplicationInScrapableState(ar.getEntity().getState())) {
          continue;
        }
        appNames.add(ar.getEntity().getName());
      }
      return Flux.fromIterable(appNames);
    }
).onErrorResume(__ -> Flux.empty());
  }
  Flux<String> filteredApplicationsInSpace=applicationsInSelection;
  if (configTarget.getApplicationRegex() != null) {
    final Pattern filterPattern=Pattern.compile(configTarget.getApplicationRegex());
    filteredApplicationsInSpace=applicationsInSelection.filter(appName -> {
      Matcher m=filterPattern.matcher(appName);
      return m.matches();
    }
);
  }
  return filteredApplicationsInSpace;
}","private Flux<String> selectApplications(Target configTarget,Mono<String> orgIdMono,Mono<String> spaceIdMono){
  Flux<String> applicationsInSelection=null;
  if (configTarget.getApplicationRegex() == null && configTarget.getApplicationName() != null) {
    throw new InternalError(""String_Node_Str"");
  }
 else {
    Mono<ListApplicationsResponse> responseMono=Mono.zip(orgIdMono,spaceIdMono).flatMap(tuple -> {
      return this.cfAccessor.retrieveAllApplicationIdsInSpace(tuple.getT1(),tuple.getT2());
    }
);
    applicationsInSelection=responseMono.map(r -> {
      List<ApplicationResource> resources=r.getResources();
      if (resources == null) {
        log.error(String.format(""String_Node_Str"",configTarget.getOrgName(),configTarget.getSpaceName()));
        throw Exceptions.propagate(new InvalidResponseFromCFCloudConnector(""String_Node_Str""));
      }
      return resources;
    }
).flatMapMany(resources -> {
      List<String> appNames=new LinkedList<>();
      for (      ApplicationResource ar : resources) {
        if (!isApplicationInScrapableState(ar.getEntity().getState())) {
          continue;
        }
        appNames.add(ar.getEntity().getName());
      }
      return Flux.fromIterable(appNames);
    }
);
  }
  Flux<String> filteredApplicationsInSpace=applicationsInSelection;
  if (configTarget.getApplicationRegex() != null) {
    final Pattern filterPattern=Pattern.compile(configTarget.getApplicationRegex());
    filteredApplicationsInSpace=applicationsInSelection.filter(appName -> {
      Matcher m=filterPattern.matcher(appName);
      return m.matches();
    }
);
  }
  return filteredApplicationsInSpace;
}"
69230,"@Override public Mono<GetRouteResponse> retrieveRoute(String routeId){
  RouteEntity entity=null;
  if (routeId.startsWith(APP_ROUTE_UUID_PREFIX)) {
    String appNumber=routeId.substring(APP_ROUTE_UUID_PREFIX.length());
    entity=RouteEntity.builder().domainId(SHARED_DOMAIN_UUID).host(APP_HOST_PREFIX + appNumber).build();
  }
  if (entity == null) {
    log.error(""String_Node_Str"");
    return null;
  }
  GetRouteResponse resp=GetRouteResponse.builder().entity(entity).build();
  return Mono.just(resp);
}","@Override public Mono<GetRouteResponse> retrieveRoute(String routeId){
  RouteEntity entity=null;
  if (routeId.startsWith(APP_ROUTE_UUID_PREFIX)) {
    String appNumber=routeId.substring(APP_ROUTE_UUID_PREFIX.length());
    entity=RouteEntity.builder().domainId(SHARED_DOMAIN_UUID).host(APP_HOST_PREFIX + appNumber).build();
  }
  if (entity == null) {
    log.error(""String_Node_Str"");
    return null;
  }
  GetRouteResponse resp=GetRouteResponse.builder().entity(entity).build();
  return Mono.just(resp).delayElement(this.getSleepRandomDuration());
}"
69231,"@Override public Mono<ListApplicationsResponse> retrieveAllApplicationIdsInSpace(String orgId,String spaceId){
  if (orgId.equals(ORG_UUID) && spaceId.equals(SPACE_UUID)) {
    List<ApplicationResource> list=new LinkedList<>();
    for (int i=0; i < 100; i++) {
      ApplicationResource ar=null;
      ar=ApplicationResource.builder().entity(ApplicationEntity.builder().name(""String_Node_Str"" + i).build()).metadata(Metadata.builder().createdAt(CREATED_AT_TIMESTAMP).id(APP_UUID_PREFIX + i).build()).build();
      list.add(ar);
    }
    ListApplicationsResponse resp=ListApplicationsResponse.builder().addAllResources(list).build();
    return Mono.just(resp);
  }
  log.error(""String_Node_Str"");
  return null;
}","@Override public Mono<ListApplicationsResponse> retrieveAllApplicationIdsInSpace(String orgId,String spaceId){
  if (orgId.equals(ORG_UUID) && spaceId.equals(SPACE_UUID)) {
    List<ApplicationResource> list=new LinkedList<>();
    for (int i=0; i < 100; i++) {
      ApplicationResource ar=null;
      ar=ApplicationResource.builder().entity(ApplicationEntity.builder().name(""String_Node_Str"" + i).build()).metadata(Metadata.builder().createdAt(CREATED_AT_TIMESTAMP).id(APP_UUID_PREFIX + i).build()).build();
      list.add(ar);
    }
    ListApplicationsResponse resp=ListApplicationsResponse.builder().addAllResources(list).build();
    return Mono.just(resp).delayElement(this.getSleepRandomDuration());
  }
  log.error(""String_Node_Str"");
  return null;
}"
69232,"@Override public Mono<GetSharedDomainResponse> retrieveSharedDomain(String domainId){
  if (domainId.equals(SHARED_DOMAIN_UUID)) {
    SharedDomainEntity entity=SharedDomainEntity.builder().name(SHARED_DOMAIN).build();
    GetSharedDomainResponse resp=GetSharedDomainResponse.builder().entity(entity).build();
    return Mono.just(resp);
  }
  log.error(""String_Node_Str"");
  return null;
}","@Override public Mono<GetSharedDomainResponse> retrieveSharedDomain(String domainId){
  if (domainId.equals(SHARED_DOMAIN_UUID)) {
    SharedDomainEntity entity=SharedDomainEntity.builder().name(SHARED_DOMAIN).build();
    GetSharedDomainResponse resp=GetSharedDomainResponse.builder().entity(entity).build();
    return Mono.just(resp).delayElement(this.getSleepRandomDuration());
  }
  log.error(""String_Node_Str"");
  return null;
}"
69233,"@Override public Mono<ListOrganizationsResponse> retrieveOrgId(String orgName){
  if (""String_Node_Str"".equals(orgName)) {
    OrganizationResource or=OrganizationResource.builder().entity(OrganizationEntity.builder().name(orgName).build()).metadata(Metadata.builder().createdAt(CREATED_AT_TIMESTAMP).id(ORG_UUID).build()).build();
    List<OrganizationResource> list=new LinkedList<>();
    list.add(or);
    ListOrganizationsResponse resp=ListOrganizationsResponse.builder().addAllResources(list).build();
    return Mono.just(resp);
  }
  log.error(""String_Node_Str"");
  return null;
}","@Override public Mono<ListOrganizationsResponse> retrieveOrgId(String orgName){
  if (""String_Node_Str"".equals(orgName)) {
    OrganizationResource or=OrganizationResource.builder().entity(OrganizationEntity.builder().name(orgName).build()).metadata(Metadata.builder().createdAt(CREATED_AT_TIMESTAMP).id(ORG_UUID).build()).build();
    List<OrganizationResource> list=new LinkedList<>();
    list.add(or);
    ListOrganizationsResponse resp=ListOrganizationsResponse.builder().addAllResources(list).build();
    return Mono.just(resp).delayElement(this.getSleepRandomDuration());
  }
  log.error(""String_Node_Str"");
  return null;
}"
69234,"@Override public Mono<ListSpacesResponse> retrieveSpaceId(String orgId,String spaceName){
  if (""String_Node_Str"".equals(spaceName) && orgId.equals(ORG_UUID)) {
    SpaceResource sr=SpaceResource.builder().entity(SpaceEntity.builder().name(spaceName).build()).metadata(Metadata.builder().createdAt(CREATED_AT_TIMESTAMP).id(SPACE_UUID).build()).build();
    List<SpaceResource> list=new LinkedList<>();
    list.add(sr);
    ListSpacesResponse resp=ListSpacesResponse.builder().addAllResources(list).build();
    return Mono.just(resp);
  }
  log.error(""String_Node_Str"");
  return null;
}","@Override public Mono<ListSpacesResponse> retrieveSpaceId(String orgId,String spaceName){
  if (""String_Node_Str"".equals(spaceName) && orgId.equals(ORG_UUID)) {
    SpaceResource sr=SpaceResource.builder().entity(SpaceEntity.builder().name(spaceName).build()).metadata(Metadata.builder().createdAt(CREATED_AT_TIMESTAMP).id(SPACE_UUID).build()).build();
    List<SpaceResource> list=new LinkedList<>();
    list.add(sr);
    ListSpacesResponse resp=ListSpacesResponse.builder().addAllResources(list).build();
    return Mono.just(resp).delayElement(this.getSleepRandomDuration());
  }
  log.error(""String_Node_Str"");
  return null;
}"
69235,"@Override public Mono<ListRouteMappingsResponse> retrieveRouteMapping(String appId){
  RouteMappingEntity entity=null;
  if (appId.startsWith(APP_UUID_PREFIX)) {
    String appNumber=appId.substring(APP_UUID_PREFIX.length());
    entity=RouteMappingEntity.builder().applicationId(appId).routeId(APP_ROUTE_UUID_PREFIX + appNumber).build();
  }
  if (entity == null) {
    log.error(""String_Node_Str"");
    return null;
  }
  RouteMappingResource rmr=null;
  rmr=RouteMappingResource.builder().entity(entity).build();
  List<RouteMappingResource> list=new LinkedList<>();
  list.add(rmr);
  ListRouteMappingsResponse resp=ListRouteMappingsResponse.builder().addAllResources(list).build();
  return Mono.just(resp);
}","@Override public Mono<ListRouteMappingsResponse> retrieveRouteMapping(String appId){
  RouteMappingEntity entity=null;
  if (appId.startsWith(APP_UUID_PREFIX)) {
    String appNumber=appId.substring(APP_UUID_PREFIX.length());
    entity=RouteMappingEntity.builder().applicationId(appId).routeId(APP_ROUTE_UUID_PREFIX + appNumber).build();
  }
  if (entity == null) {
    log.error(""String_Node_Str"");
    return null;
  }
  RouteMappingResource rmr=null;
  rmr=RouteMappingResource.builder().entity(entity).build();
  List<RouteMappingResource> list=new LinkedList<>();
  list.add(rmr);
  ListRouteMappingsResponse resp=ListRouteMappingsResponse.builder().addAllResources(list).build();
  return Mono.just(resp).delayElement(this.getSleepRandomDuration());
}"
69236,"@Override public Mono<ListApplicationsResponse> retrieveApplicationId(String orgId,String spaceId,String applicationName){
  if (orgId.equals(ORG_UUID) && spaceId.equals(SPACE_UUID)) {
    ApplicationResource ar=null;
    if (applicationName.startsWith(""String_Node_Str"")) {
      String appNumber=applicationName.substring(7);
      ar=ApplicationResource.builder().entity(ApplicationEntity.builder().name(applicationName).build()).metadata(Metadata.builder().createdAt(CREATED_AT_TIMESTAMP).id(APP_UUID_PREFIX + appNumber).build()).build();
    }
 else {
      log.error(""String_Node_Str"");
    }
    List<ApplicationResource> list=new LinkedList<>();
    list.add(ar);
    ListApplicationsResponse resp=ListApplicationsResponse.builder().addAllResources(list).build();
    return Mono.just(resp);
  }
  log.error(""String_Node_Str"");
  return null;
}","@Override public Mono<ListApplicationsResponse> retrieveApplicationId(String orgId,String spaceId,String applicationName){
  if (orgId.equals(ORG_UUID) && spaceId.equals(SPACE_UUID)) {
    ApplicationResource ar=null;
    if (applicationName.startsWith(""String_Node_Str"")) {
      String appNumber=applicationName.substring(7);
      ar=ApplicationResource.builder().entity(ApplicationEntity.builder().name(applicationName).build()).metadata(Metadata.builder().createdAt(CREATED_AT_TIMESTAMP).id(APP_UUID_PREFIX + appNumber).build()).build();
    }
 else {
      log.error(""String_Node_Str"");
    }
    List<ApplicationResource> list=new LinkedList<>();
    list.add(ar);
    ListApplicationsResponse resp=ListApplicationsResponse.builder().addAllResources(list).build();
    return Mono.just(resp).delayElement(this.getSleepRandomDuration());
  }
  log.error(""String_Node_Str"");
  return null;
}"
69237,"@Override public Mono<ListProcessesResponse> retrieveProcesses(String orgId,String spaceId,String appId){
  if (orgId.equals(ORG_UUID) && spaceId.equals(SPACE_UUID)) {
    List<ProcessResource> list=new LinkedList<>();
    Data data=Data.builder().timeout(100).build();
    HealthCheck hc=HealthCheck.builder().type(HealthCheckType.HTTP).data(data).build();
    Builder builder=ProcessResource.builder().type(""String_Node_Str"").command(""String_Node_Str"").memoryInMb(1024).diskInMb(1024).healthCheck(hc).createdAt(CREATED_AT_TIMESTAMP).updatedAt(UPDATED_AT_TIMESTAMP);
    ProcessResource ar=null;
    if (appId.startsWith(APP_UUID_PREFIX)) {
      ar=builder.instances(this.amountInstances).id(appId).build();
    }
    if (ar == null) {
      log.error(""String_Node_Str"");
      return null;
    }
    list.add(ar);
    ListProcessesResponse resp=ListProcessesResponse.builder().addAllResources(list).build();
    return Mono.just(resp);
  }
  log.error(""String_Node_Str"");
  return null;
}","@Override public Mono<ListProcessesResponse> retrieveProcesses(String orgId,String spaceId,String appId){
  if (orgId.equals(ORG_UUID) && spaceId.equals(SPACE_UUID)) {
    List<ProcessResource> list=new LinkedList<>();
    Data data=Data.builder().timeout(100).build();
    HealthCheck hc=HealthCheck.builder().type(HealthCheckType.HTTP).data(data).build();
    Builder builder=ProcessResource.builder().type(""String_Node_Str"").command(""String_Node_Str"").memoryInMb(1024).diskInMb(1024).healthCheck(hc).createdAt(CREATED_AT_TIMESTAMP).updatedAt(UPDATED_AT_TIMESTAMP);
    ProcessResource ar=null;
    if (appId.startsWith(APP_UUID_PREFIX)) {
      ar=builder.instances(this.amountInstances).id(appId).build();
    }
    if (ar == null) {
      log.error(""String_Node_Str"");
      return null;
    }
    list.add(ar);
    ListProcessesResponse resp=ListProcessesResponse.builder().addAllResources(list).build();
    return Mono.just(resp).delayElement(this.getSleepRandomDuration());
  }
  log.error(""String_Node_Str"");
  return null;
}"
69238,"@Override public HashMap<String,MetricFamilySamples> call() throws Exception {
  Timer timer=null;
  if (this.mfm.getLatencyRequest() != null) {
    timer=this.mfm.getLatencyRequest().startTimer();
  }
  HttpGet httpget=new HttpGet(this.accessURL);
  this.ae.enrichWithAuthentication(httpget);
  String result=SIM_TEXT004;
  TextFormat004Parser parser=new TextFormat004Parser(result);
  HashMap<String,MetricFamilySamples> emfs=parser.parse();
  emfs=this.mfse.determineEnumerationOfMetricFamilySamples(emfs);
  int latency=this.randomLatency.nextInt(300);
  Thread.sleep(latency);
  this.up.set(1);
  if (timer != null) {
    timer.observeDuration();
  }
  return emfs;
}","@Override public HashMap<String,MetricFamilySamples> call() throws Exception {
  Timer timer=null;
  if (this.mfm.getLatencyRequest() != null) {
    timer=this.mfm.getLatencyRequest().startTimer();
  }
  HttpGet httpget=new HttpGet(this.accessURL);
  this.ae.enrichWithAuthentication(httpget);
  String result=SIM_TEXT004;
  TextFormat004Parser parser=new TextFormat004Parser(result);
  HashMap<String,MetricFamilySamples> emfs=parser.parse();
  emfs=this.mfse.determineEnumerationOfMetricFamilySamples(emfs);
  int latency=this.randomLatency.nextInt(300);
  log.info(String.format(""String_Node_Str"",this.accessURL,latency));
  Thread.sleep(latency);
  this.up.set(1);
  if (timer != null) {
    timer.observeDuration();
  }
  return emfs;
}"
69239,"@Override public List<Instance> determineInstancesFromTargets(List<ResolvedTarget> targets,@Null Predicate<? super String> applicationIdFilter,@Null Predicate<? super Instance> instanceFilter){
  Flux<ResolvedTarget> targetsFlux=Flux.fromIterable(targets);
  Flux<OSAVector> initialOSAVectorFlux=targetsFlux.map(target -> {
    OSAVector v=new OSAVector();
    v.target=target;
    return v;
  }
);
  Flux<String> orgIdFlux=initialOSAVectorFlux.flatMap(v -> this.getOrgId(v.target.getOrgName()));
  Flux<OSAVector> OSAVectorOrgFlux=Flux.zip(initialOSAVectorFlux,orgIdFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.orgId=tuple.getT2();
    return v;
  }
);
  Flux<String> spaceIdFlux=OSAVectorOrgFlux.flatMap(v -> this.getSpaceId(v.orgId,v.target.getSpaceName()));
  Flux<OSAVector> OSAVectorSpaceFlux=Flux.zip(OSAVectorOrgFlux,spaceIdFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.spaceId=tuple.getT2();
    return v;
  }
);
  Flux<String> applicationIdFlux=OSAVectorSpaceFlux.flatMap(v -> this.getApplicationId(v.orgId,v.spaceId,v.target.getApplicationName()));
  Flux<OSAVector> OSAVectorApplicationFlux=Flux.zip(OSAVectorSpaceFlux,applicationIdFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.applicationId=tuple.getT2();
    return v;
  }
);
  if (applicationIdFilter != null) {
    OSAVectorApplicationFlux=OSAVectorApplicationFlux.filter(v -> applicationIdFilter.test(v.applicationId));
  }
  Flux<String> applicationURLFlux=OSAVectorApplicationFlux.flatMap(v -> this.getApplicationUrl(v.applicationId,v.target.getProtocol()));
  Flux<OSAVector> OSAVectorURLFlux=Flux.zip(OSAVectorApplicationFlux,applicationURLFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.accessURL=this.determineAccessURL(tuple.getT2(),v.target.getPath());
    return v;
  }
);
  Flux<Integer> numberOfInstancesFlux=OSAVectorApplicationFlux.flatMap(v -> this.getNumberOfProcesses(v));
  Flux<OSAVector> OSAVectorCompleteFlux=Flux.zip(OSAVectorURLFlux,numberOfInstancesFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.numberOfInstances=tuple.getT2();
    return v;
  }
);
  Flux<Instance> instancesFlux=OSAVectorCompleteFlux.flatMap(v -> {
    List<Instance> instances=new ArrayList<>(v.numberOfInstances);
    for (int i=0; i < v.numberOfInstances; i++) {
      Instance inst=new Instance(v.target,String.format(""String_Node_Str"",v.applicationId,i),v.accessURL);
      instances.add(inst);
    }
    return Flux.fromIterable(instances);
  }
);
  if (instanceFilter != null) {
    instancesFlux=instancesFlux.filter(instanceFilter);
  }
  Mono<List<Instance>> listInstancesMono=instancesFlux.collectList();
  List<Instance> result=null;
  try {
    result=listInstancesMono.block();
  }
 catch (  RuntimeException e) {
    log.error(""String_Node_Str"",e);
    result=null;
  }
  return result;
}","@Override public List<Instance> determineInstancesFromTargets(List<ResolvedTarget> targets,@Null Predicate<? super String> applicationIdFilter,@Null Predicate<? super Instance> instanceFilter){
  Flux<ResolvedTarget> targetsFlux=Flux.fromIterable(targets);
  Flux<OSAVector> initialOSAVectorFlux=targetsFlux.map(target -> {
    OSAVector v=new OSAVector();
    v.target=target;
    return v;
  }
);
  Flux<String> orgIdFlux=initialOSAVectorFlux.flatMapSequential(v -> this.getOrgId(v.target.getOrgName()));
  Flux<OSAVector> OSAVectorOrgFlux=Flux.zip(initialOSAVectorFlux,orgIdFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.orgId=tuple.getT2();
    return v;
  }
);
  Flux<String> spaceIdFlux=OSAVectorOrgFlux.flatMapSequential(v -> this.getSpaceId(v.orgId,v.target.getSpaceName()));
  Flux<OSAVector> OSAVectorSpaceFlux=Flux.zip(OSAVectorOrgFlux,spaceIdFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.spaceId=tuple.getT2();
    return v;
  }
);
  Flux<String> applicationIdFlux=OSAVectorSpaceFlux.flatMapSequential(v -> this.getApplicationId(v.orgId,v.spaceId,v.target.getApplicationName()));
  Flux<OSAVector> OSAVectorApplicationFlux=Flux.zip(OSAVectorSpaceFlux,applicationIdFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.applicationId=tuple.getT2();
    return v;
  }
);
  if (applicationIdFilter != null) {
    OSAVectorApplicationFlux=OSAVectorApplicationFlux.filter(v -> applicationIdFilter.test(v.applicationId));
  }
  Flux<String> applicationURLFlux=OSAVectorApplicationFlux.flatMapSequential(v -> this.getApplicationUrl(v.applicationId,v.target.getProtocol()));
  Flux<OSAVector> OSAVectorURLFlux=Flux.zip(OSAVectorApplicationFlux,applicationURLFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.accessURL=this.determineAccessURL(tuple.getT2(),v.target.getPath());
    return v;
  }
);
  Flux<Integer> numberOfInstancesFlux=OSAVectorApplicationFlux.flatMapSequential(v -> this.getNumberOfProcesses(v));
  Flux<OSAVector> OSAVectorCompleteFlux=Flux.zip(OSAVectorURLFlux,numberOfInstancesFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.numberOfInstances=tuple.getT2();
    return v;
  }
);
  Flux<Instance> instancesFlux=OSAVectorCompleteFlux.flatMapSequential(v -> {
    List<Instance> instances=new ArrayList<>(v.numberOfInstances);
    for (int i=0; i < v.numberOfInstances; i++) {
      Instance inst=new Instance(v.target,String.format(""String_Node_Str"",v.applicationId,i),v.accessURL);
      instances.add(inst);
    }
    return Flux.fromIterable(instances);
  }
);
  if (instanceFilter != null) {
    instancesFlux=instancesFlux.filter(instanceFilter);
  }
  Mono<List<Instance>> listInstancesMono=instancesFlux.collectList();
  List<Instance> result=null;
  try {
    result=listInstancesMono.block();
  }
 catch (  RuntimeException e) {
    log.error(""String_Node_Str"",e);
    result=null;
  }
  return result;
}"
69240,"@Override public List<ResolvedTarget> resolveTargets(List<Target> configTargets){
  Flux<ResolvedTarget> resultFlux=Flux.fromIterable(configTargets).flatMap(configTarget -> this.resolveSingleTarget(configTarget));
  return resultFlux.collectList().block();
}","@Override public List<ResolvedTarget> resolveTargets(List<Target> configTargets){
  Flux<ResolvedTarget> resultFlux=Flux.fromIterable(configTargets).flatMapSequential(configTarget -> this.resolveSingleTarget(configTarget));
  return resultFlux.collectList().block();
}"
69241,"@Test public void testStraightForward(){
  HttpServletRequest requestMock=Mockito.mock(HttpServletRequest.class);
  DiscoveryResponse[] response=this.subject.getDiscovery(requestMock);
  Assert.assertEquals(3,response.length);
  Assert.assertEquals(1,response[0].getTargets().length);
  Assert.assertEquals(""String_Node_Str"",response[0].getTargets()[0]);
  Assert.assertEquals(1,response[1].getTargets().length);
  Assert.assertEquals(""String_Node_Str"",response[1].getTargets()[0]);
  Assert.assertEquals(1,response[2].getTargets().length);
  Assert.assertEquals(""String_Node_Str"",response[2].getTargets()[0]);
  DiscoveryLabel label=null;
  label=response[0].getLabels();
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_applicationId());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_applicationName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_instanceId());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_instanceNumber());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_orgName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_spaceName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_path());
  label=response[1].getLabels();
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_applicationId());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_applicationName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_instanceId());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_instanceNumber());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_orgName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_spaceName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_path());
  label=response[2].getLabels();
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_applicationId());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_applicationName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_instanceId());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_instanceNumber());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_orgName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_spaceName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_path());
}","@Test public void testStraightForward(){
  HttpServletRequest requestMock=Mockito.mock(HttpServletRequest.class);
  ResponseEntity<DiscoveryResponse[]> responseEntity=this.subject.getDiscovery(requestMock);
  DiscoveryResponse[] response=responseEntity.getBody();
  Assert.assertEquals(3,response.length);
  Assert.assertEquals(1,response[0].getTargets().length);
  Assert.assertEquals(""String_Node_Str"",response[0].getTargets()[0]);
  Assert.assertEquals(1,response[1].getTargets().length);
  Assert.assertEquals(""String_Node_Str"",response[1].getTargets()[0]);
  Assert.assertEquals(1,response[2].getTargets().length);
  Assert.assertEquals(""String_Node_Str"",response[2].getTargets()[0]);
  DiscoveryLabel label=null;
  label=response[0].getLabels();
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_applicationId());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_applicationName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_instanceId());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_instanceNumber());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_orgName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_spaceName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_path());
  label=response[1].getLabels();
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_applicationId());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_applicationName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_instanceId());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_instanceNumber());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_orgName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_spaceName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_path());
  label=response[2].getLabels();
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_applicationId());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_applicationName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_instanceId());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_instanceNumber());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_orgName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_spaceName());
  Assert.assertEquals(""String_Node_Str"",label.get__meta_promregator_target_path());
}"
69242,"public Flux<ResolvedTarget> resolveSingleTarget(Target configTarget){
  if (configTarget.getApplicationName() != null) {
    ResolvedTarget rt=new ResolvedTarget(configTarget);
    return Flux.just(rt);
  }
  Mono<String> orgIdMono=this.cfAccessor.retrieveOrgId(configTarget.getOrgName()).map(r -> r.getResources()).map(l -> l.get(0)).map(e -> e.getMetadata()).map(entry -> entry.getId());
  Mono<String> spaceIdMono=orgIdMono.flatMap(orgId -> {
    return this.cfAccessor.retrieveSpaceId(orgId,configTarget.getSpaceName());
  }
).map(r -> r.getResources()).map(l -> l.get(0)).map(e -> e.getMetadata()).map(entry -> entry.getId());
  Mono<ListApplicationsResponse> responseMono=Mono.zip(orgIdMono,spaceIdMono).flatMap(tuple -> this.cfAccessor.retrieveAllApplicationIdsInSpace(tuple.getT1(),tuple.getT2()));
  Flux<String> applicationsInSpace=responseMono.map(r -> r.getResources()).flatMapMany(resources -> {
    List<String> appNames=new LinkedList<>();
    for (    ApplicationResource ar : resources) {
      if (!isApplicationInScrapableState(ar.getEntity().getState())) {
        continue;
      }
      appNames.add(ar.getEntity().getName());
    }
    return Flux.fromIterable(appNames);
  }
);
  Flux<String> filteredApplicationsInSpace=applicationsInSpace;
  if (configTarget.getApplicationRegex() != null) {
    final Pattern filterPattern=Pattern.compile(configTarget.getApplicationRegex());
    filteredApplicationsInSpace=applicationsInSpace.filter(appName -> {
      Matcher m=filterPattern.matcher(appName);
      return m.matches();
    }
);
  }
  Flux<ResolvedTarget> result=filteredApplicationsInSpace.map(appName -> {
    ResolvedTarget newTarget=new ResolvedTarget(configTarget);
    newTarget.setApplicationName(appName);
    return newTarget;
  }
);
  return result;
}","public Flux<ResolvedTarget> resolveSingleTarget(Target configTarget){
  if (configTarget.getApplicationName() != null) {
    ResolvedTarget rt=new ResolvedTarget(configTarget);
    return Flux.just(rt);
  }
  Mono<String> orgIdMono=this.cfAccessor.retrieveOrgId(configTarget.getOrgName()).map(r -> r.getResources()).map(l -> l.get(0)).map(e -> e.getMetadata()).map(entry -> entry.getId());
  Mono<String> spaceIdMono=orgIdMono.flatMap(orgId -> {
    return this.cfAccessor.retrieveSpaceId(orgId,configTarget.getSpaceName());
  }
).map(r -> r.getResources()).map(l -> l.get(0)).map(e -> e.getMetadata()).map(entry -> entry.getId());
  Flux<String> applicationNamesFlux=selectApplications(configTarget,orgIdMono,spaceIdMono);
  Flux<ResolvedTarget> result=applicationNamesFlux.map(appName -> {
    ResolvedTarget newTarget=new ResolvedTarget(configTarget);
    newTarget.setApplicationName(appName);
    return newTarget;
  }
);
  return result;
}"
69243,"@Bean public CFAccessor cfAccessor(){
  return new CFAccessorMock();
}","@Bean public CFAccessor cfAccessor(){
  return Mockito.spy(new CFAccessorMock());
}"
69244,"@Test public void testFullyResolvedAlready(){
  List<Target> list=new LinkedList<>();
  Target t=new Target();
  t.setOrgName(""String_Node_Str"");
  t.setSpaceName(""String_Node_Str"");
  t.setApplicationName(""String_Node_Str"");
  t.setPath(""String_Node_Str"");
  t.setProtocol(""String_Node_Str"");
  list.add(t);
  List<ResolvedTarget> actualList=this.targetResolver.resolveTargets(list);
  Assert.assertEquals(1,actualList.size());
  ResolvedTarget rt=actualList.get(0);
  Assert.assertEquals(t,rt.getOriginalTarget());
  Assert.assertEquals(t.getOrgName(),rt.getOrgName());
  Assert.assertEquals(t.getSpaceName(),rt.getSpaceName());
  Assert.assertEquals(t.getApplicationName(),rt.getApplicationName());
  Assert.assertEquals(t.getPath(),rt.getPath());
  Assert.assertEquals(t.getProtocol(),rt.getProtocol());
}","@Test public void testFullyResolvedAlready(){
  List<Target> list=new LinkedList<>();
  Target t=new Target();
  t.setOrgName(""String_Node_Str"");
  t.setSpaceName(""String_Node_Str"");
  t.setApplicationName(""String_Node_Str"");
  t.setPath(""String_Node_Str"");
  t.setProtocol(""String_Node_Str"");
  list.add(t);
  List<ResolvedTarget> actualList=this.targetResolver.resolveTargets(list);
  Assert.assertEquals(1,actualList.size());
  ResolvedTarget rt=actualList.get(0);
  Assert.assertEquals(t,rt.getOriginalTarget());
  Assert.assertEquals(t.getOrgName(),rt.getOrgName());
  Assert.assertEquals(t.getSpaceName(),rt.getSpaceName());
  Assert.assertEquals(t.getApplicationName(),rt.getApplicationName());
  Assert.assertEquals(t.getPath(),rt.getPath());
  Assert.assertEquals(t.getProtocol(),rt.getProtocol());
  Mockito.verify(this.cfAccessor,Mockito.times(0)).retrieveAllApplicationIdsInSpace(CFAccessorMock.UNITTEST_ORG_UUID,CFAccessorMock.UNITTEST_SPACE_UUID);
  Mockito.verify(this.cfAccessor,Mockito.times(0)).retrieveApplicationId(CFAccessorMock.UNITTEST_ORG_UUID,CFAccessorMock.UNITTEST_SPACE_UUID,""String_Node_Str"");
}"
69245,"@Test public void testMissingApplicationName(){
  List<Target> list=new LinkedList<>();
  Target t=new Target();
  t.setOrgName(""String_Node_Str"");
  t.setSpaceName(""String_Node_Str"");
  t.setPath(""String_Node_Str"");
  t.setProtocol(""String_Node_Str"");
  list.add(t);
  List<ResolvedTarget> actualList=this.targetResolver.resolveTargets(list);
  Assert.assertEquals(2,actualList.size());
  ResolvedTarget rt=actualList.get(0);
  Assert.assertEquals(t,rt.getOriginalTarget());
  Assert.assertEquals(t.getOrgName(),rt.getOrgName());
  Assert.assertEquals(t.getSpaceName(),rt.getSpaceName());
  Assert.assertEquals(""String_Node_Str"",rt.getApplicationName());
  Assert.assertEquals(t.getPath(),rt.getPath());
  Assert.assertEquals(t.getProtocol(),rt.getProtocol());
  rt=actualList.get(1);
  Assert.assertEquals(t,rt.getOriginalTarget());
  Assert.assertEquals(t.getOrgName(),rt.getOrgName());
  Assert.assertEquals(t.getSpaceName(),rt.getSpaceName());
  Assert.assertEquals(""String_Node_Str"",rt.getApplicationName());
  Assert.assertEquals(t.getPath(),rt.getPath());
  Assert.assertEquals(t.getProtocol(),rt.getProtocol());
}","@Test public void testMissingApplicationName(){
  List<Target> list=new LinkedList<>();
  Target t=new Target();
  t.setOrgName(""String_Node_Str"");
  t.setSpaceName(""String_Node_Str"");
  t.setPath(""String_Node_Str"");
  t.setProtocol(""String_Node_Str"");
  list.add(t);
  List<ResolvedTarget> actualList=this.targetResolver.resolveTargets(list);
  Assert.assertEquals(2,actualList.size());
  ResolvedTarget rt=actualList.get(0);
  Assert.assertEquals(t,rt.getOriginalTarget());
  Assert.assertEquals(t.getOrgName(),rt.getOrgName());
  Assert.assertEquals(t.getSpaceName(),rt.getSpaceName());
  Assert.assertEquals(""String_Node_Str"",rt.getApplicationName());
  Assert.assertEquals(t.getPath(),rt.getPath());
  Assert.assertEquals(t.getProtocol(),rt.getProtocol());
  rt=actualList.get(1);
  Assert.assertEquals(t,rt.getOriginalTarget());
  Assert.assertEquals(t.getOrgName(),rt.getOrgName());
  Assert.assertEquals(t.getSpaceName(),rt.getSpaceName());
  Assert.assertEquals(""String_Node_Str"",rt.getApplicationName());
  Assert.assertEquals(t.getPath(),rt.getPath());
  Assert.assertEquals(t.getProtocol(),rt.getProtocol());
  Mockito.verify(this.cfAccessor,Mockito.times(1)).retrieveAllApplicationIdsInSpace(CFAccessorMock.UNITTEST_ORG_UUID,CFAccessorMock.UNITTEST_SPACE_UUID);
}"
69246,"@Test public void testWithApplicationRegex(){
  List<Target> list=new LinkedList<>();
  Target t=new Target();
  t.setOrgName(""String_Node_Str"");
  t.setSpaceName(""String_Node_Str"");
  t.setApplicationRegex(""String_Node_Str"");
  t.setPath(""String_Node_Str"");
  t.setProtocol(""String_Node_Str"");
  list.add(t);
  List<ResolvedTarget> actualList=this.targetResolver.resolveTargets(list);
  Assert.assertEquals(1,actualList.size());
  ResolvedTarget rt=actualList.get(0);
  Assert.assertEquals(t,rt.getOriginalTarget());
  Assert.assertEquals(t.getOrgName(),rt.getOrgName());
  Assert.assertEquals(t.getSpaceName(),rt.getSpaceName());
  Assert.assertEquals(""String_Node_Str"",rt.getApplicationName());
  Assert.assertEquals(t.getPath(),rt.getPath());
  Assert.assertEquals(t.getProtocol(),rt.getProtocol());
}","@Test public void testWithApplicationRegex(){
  List<Target> list=new LinkedList<>();
  Target t=new Target();
  t.setOrgName(""String_Node_Str"");
  t.setSpaceName(""String_Node_Str"");
  t.setApplicationRegex(""String_Node_Str"");
  t.setPath(""String_Node_Str"");
  t.setProtocol(""String_Node_Str"");
  list.add(t);
  List<ResolvedTarget> actualList=this.targetResolver.resolveTargets(list);
  Assert.assertEquals(1,actualList.size());
  ResolvedTarget rt=actualList.get(0);
  Assert.assertEquals(t,rt.getOriginalTarget());
  Assert.assertEquals(t.getOrgName(),rt.getOrgName());
  Assert.assertEquals(t.getSpaceName(),rt.getSpaceName());
  Assert.assertEquals(""String_Node_Str"",rt.getApplicationName());
  Assert.assertEquals(t.getPath(),rt.getPath());
  Assert.assertEquals(t.getProtocol(),rt.getProtocol());
  Mockito.verify(this.cfAccessor,Mockito.times(1)).retrieveAllApplicationIdsInSpace(CFAccessorMock.UNITTEST_ORG_UUID,CFAccessorMock.UNITTEST_SPACE_UUID);
}"
69247,"@Bean public CachingTargetResolver cachingTargetResolver(){
  return new CachingTargetResolver(new ReactiveTargetResolver());
}","@Bean public CachingTargetResolver cachingTargetResolver(ReactiveTargetResolver reactiveTargetResolver){
  return new CachingTargetResolver(reactiveTargetResolver);
}"
69248,"public CachingTargetResolver(TargetResolver targetResolver){
  this.parentTargetResolver=targetResolver;
}","public CachingTargetResolver(TargetResolver parentTargetResolver){
  this.parentTargetResolver=parentTargetResolver;
}"
69249,"public List<Instance> discover(){
  log.debug(String.format(""String_Node_Str"",this.promregatorConfiguration.getTargets().size()));
  List<ResolvedTarget> resolvedTargets=this.targetResolver.resolveTargets(this.promregatorConfiguration.getTargets());
  log.debug(String.format(""String_Node_Str"",resolvedTargets.size()));
  List<Instance> instanceList=this.appInstanceScanner.determineInstancesFromTargets(resolvedTargets);
  log.debug(String.format(""String_Node_Str"",instanceList.size()));
  for (  Instance instance : instanceList) {
    this.registerInstance(instance);
  }
  return instanceList;
}","public List<Instance> discover(@Null Predicate<? super String> applicationIdFilter,@Null Predicate<? super Instance> instanceFilter){
  log.debug(String.format(""String_Node_Str"",this.promregatorConfiguration.getTargets().size()));
  List<ResolvedTarget> resolvedTargets=this.targetResolver.resolveTargets(this.promregatorConfiguration.getTargets());
  log.debug(String.format(""String_Node_Str"",resolvedTargets.size()));
  List<Instance> instanceList=this.appInstanceScanner.determineInstancesFromTargets(resolvedTargets,applicationIdFilter,instanceFilter);
  log.debug(String.format(""String_Node_Str"",instanceList.size()));
  for (  Instance instance : instanceList) {
    this.registerInstance(instance);
  }
  return instanceList;
}"
69250,"public String handleRequest(@Null Predicate<? super String> applicationIdFilter,@Null Predicate<? super Instance> instanceFilter){
  log.debug(""String_Node_Str"");
  Instant start=Instant.now();
  this.up.clear();
  List<Instance> instanceList=this.discoverer.discover();
  List<MetricsFetcher> callablesPrep=this.createMetricsFetchers(instanceList);
  LinkedList<Future<HashMap<String,MetricFamilySamples>>> futures=this.startMetricsFetchers(callablesPrep);
  log.debug(String.format(""String_Node_Str"",futures.size()));
  MergableMetricFamilySamples mmfs=waitForMetricsFetchers(futures);
  Instant stop=Instant.now();
  Duration duration=Duration.between(start,stop);
  this.handleScrapeDuration(this.requestRegistry,duration);
  if (this.isIncludeGlobalMetrics()) {
    mmfs.merge(this.gmfspr.determineEnumerationOfMetricFamilySamples(this.collectorRegistry));
  }
  mmfs.merge(this.gmfspr.determineEnumerationOfMetricFamilySamples(this.requestRegistry));
  return mmfs.toType004String();
}","public String handleRequest(@Null Predicate<? super String> applicationIdFilter,@Null Predicate<? super Instance> instanceFilter){
  log.debug(""String_Node_Str"");
  Instant start=Instant.now();
  this.up.clear();
  List<Instance> instanceList=this.discoverer.discover(applicationIdFilter,instanceFilter);
  List<MetricsFetcher> callablesPrep=this.createMetricsFetchers(instanceList);
  LinkedList<Future<HashMap<String,MetricFamilySamples>>> futures=this.startMetricsFetchers(callablesPrep);
  log.debug(String.format(""String_Node_Str"",futures.size()));
  MergableMetricFamilySamples mmfs=waitForMetricsFetchers(futures);
  Instant stop=Instant.now();
  Duration duration=Duration.between(start,stop);
  this.handleScrapeDuration(this.requestRegistry,duration);
  if (this.isIncludeGlobalMetrics()) {
    mmfs.merge(this.gmfspr.determineEnumerationOfMetricFamilySamples(this.collectorRegistry));
  }
  mmfs.merge(this.gmfspr.determineEnumerationOfMetricFamilySamples(this.requestRegistry));
  return mmfs.toType004String();
}"
69251,"@RequestMapping(method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public DiscoveryResponse[] getDiscovery(HttpServletRequest request){
  List<Instance> instances=this.discoverer.discover();
  String localHostname=this.myHostname != null ? this.myHostname : request.getLocalName();
  int localPort=this.myPort != 0 ? this.myPort : request.getLocalPort();
  final String[] targets={String.format(""String_Node_Str"",localHostname,localPort)};
  log.info(String.format(""String_Node_Str"",targets[0]));
  List<DiscoveryResponse> result=new LinkedList<>();
  for (  Instance instance : instances) {
    String path=String.format(SingleTargetMetricsEndpoint.ENDPOINT_PATH + ""String_Node_Str"",instance.getApplicationId(),instance.getInstanceNumber());
    DiscoveryLabel dl=new DiscoveryLabel(path,instance);
    DiscoveryResponse dr=new DiscoveryResponse(targets,dl);
    result.add(dr);
  }
  DiscoveryLabel dl=new DiscoveryLabel(PromregatorMetricsEndpoint.ENDPOINT_PATH);
  result.add(new DiscoveryResponse(targets,dl));
  log.info(String.format(""String_Node_Str"",result.size()));
  return result.toArray(new DiscoveryResponse[0]);
}","@RequestMapping(method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public DiscoveryResponse[] getDiscovery(HttpServletRequest request){
  List<Instance> instances=this.discoverer.discover(null,null);
  String localHostname=this.myHostname != null ? this.myHostname : request.getLocalName();
  int localPort=this.myPort != 0 ? this.myPort : request.getLocalPort();
  final String[] targets={String.format(""String_Node_Str"",localHostname,localPort)};
  log.info(String.format(""String_Node_Str"",targets[0]));
  List<DiscoveryResponse> result=new LinkedList<>();
  for (  Instance instance : instances) {
    String path=String.format(SingleTargetMetricsEndpoint.ENDPOINT_PATH + ""String_Node_Str"",instance.getApplicationId(),instance.getInstanceNumber());
    DiscoveryLabel dl=new DiscoveryLabel(path,instance);
    DiscoveryResponse dr=new DiscoveryResponse(targets,dl);
    result.add(dr);
  }
  DiscoveryLabel dl=new DiscoveryLabel(PromregatorMetricsEndpoint.ENDPOINT_PATH);
  result.add(new DiscoveryResponse(targets,dl));
  log.info(String.format(""String_Node_Str"",result.size()));
  return result.toArray(new DiscoveryResponse[0]);
}"
69252,"@Test public void testPerformance(){
  List<Target> targets=new LinkedList<>();
  Target t=null;
  final int numberOfApps=10000;
  for (int i=0; i < numberOfApps; i++) {
    t=new Target();
    t.setOrgName(""String_Node_Str"");
    t.setSpaceName(""String_Node_Str"");
    t.setApplicationName(""String_Node_Str"" + i);
    t.setPath(""String_Node_Str"");
    t.setProtocol(""String_Node_Str"");
    targets.add(t);
  }
  Instant start=Instant.now();
  List<Instance> result=this.appInstanceScanner.determineInstancesFromTargets(targets);
  Instant stop=Instant.now();
  Assert.assertEquals(numberOfApps * 10,result.size());
  Duration d=Duration.between(start,stop);
  Assert.assertTrue(d.minusSeconds(5).isNegative());
}","@Test public void testPerformance(){
  List<ResolvedTarget> targets=new LinkedList<>();
  ResolvedTarget t=null;
  final int numberOfApps=10000;
  for (int i=0; i < numberOfApps; i++) {
    t=new ResolvedTarget();
    t.setOrgName(""String_Node_Str"");
    t.setSpaceName(""String_Node_Str"");
    t.setApplicationName(""String_Node_Str"" + i);
    t.setPath(""String_Node_Str"");
    t.setProtocol(""String_Node_Str"");
    targets.add(t);
  }
  Instant start=Instant.now();
  List<Instance> result=this.appInstanceScanner.determineInstancesFromTargets(targets);
  Instant stop=Instant.now();
  Assert.assertEquals(numberOfApps * 10,result.size());
  Duration d=Duration.between(start,stop);
  Assert.assertTrue(d.minusSeconds(5).isNegative());
}"
69253,"@Override public List<ResolvedTarget> load(Target key) throws Exception {
  log.warn(String.format(""String_Node_Str"",key.toString()));
  List<Target> list=new LinkedList<>();
  list.add(key);
  return targetResolver.resolveTargets(list);
}","@Override public List<ResolvedTarget> load(Target key) throws Exception {
  log.warn(String.format(""String_Node_Str"",key.toString()));
  List<Target> list=new LinkedList<>();
  list.add(key);
  return nativeTargetResolver.resolveTargets(list);
}"
69254,"public CachingTargetResolver(TargetResolver targetResolver){
  this.nativeTargetResolver=targetResolver;
  this.targetResolutionCache=CacheBuilder.newBuilder().expireAfterWrite(this.timeoutCacheApplicationLevel,TimeUnit.SECONDS).removalListener(new RemovalListener<Target,List<ResolvedTarget>>(){
    @Override public void onRemoval(    RemovalNotification<Target,List<ResolvedTarget>> notification){
      if (removalListeners == null)       return;
      for (      CachingTargetResolverRemovalListener listener : removalListeners) {
        listener.onRemoval(notification.getKey(),notification.getValue());
      }
    }
  }
).build(new CacheLoader<Target,List<ResolvedTarget>>(){
    @Override public List<ResolvedTarget> load(    Target key) throws Exception {
      log.warn(String.format(""String_Node_Str"",key.toString()));
      List<Target> list=new LinkedList<>();
      list.add(key);
      return targetResolver.resolveTargets(list);
    }
  }
);
}","public CachingTargetResolver(TargetResolver targetResolver){
  this.nativeTargetResolver=targetResolver;
}"
69255,"@Override public List<Instance> determineInstancesFromTargets(List<Target> targets){
  Flux<Target> targetsFlux=Flux.fromIterable(targets);
  Flux<OSAVector> initialOSAVectorFlux=targetsFlux.map(target -> {
    OSAVector v=new OSAVector();
    v.target=target;
    return v;
  }
);
  Flux<String> orgIdFlux=initialOSAVectorFlux.flatMap(v -> this.getOrgId(v.target.getOrgName()));
  Flux<OSAVector> OSAVectorOrgFlux=Flux.zip(initialOSAVectorFlux,orgIdFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.orgId=tuple.getT2();
    return v;
  }
);
  Flux<String> spaceIdFlux=OSAVectorOrgFlux.flatMap(v -> this.getSpaceId(v.orgId,v.target.getSpaceName()));
  Flux<OSAVector> OSAVectorSpaceFlux=Flux.zip(OSAVectorOrgFlux,spaceIdFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.spaceId=tuple.getT2();
    return v;
  }
);
  Flux<String> applicationIdFlux=OSAVectorSpaceFlux.flatMap(v -> this.getApplicationId(v.orgId,v.spaceId,v.target.getApplicationName()));
  Flux<OSAVector> OSAVectorApplicationFlux=Flux.zip(OSAVectorSpaceFlux,applicationIdFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.applicationId=tuple.getT2();
    return v;
  }
);
  Flux<String> applicationURLFlux=OSAVectorApplicationFlux.flatMap(v -> this.getApplicationUrl(v.applicationId,v.target.getProtocol()));
  Flux<OSAVector> OSAVectorURLFlux=Flux.zip(OSAVectorApplicationFlux,applicationURLFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.accessURL=this.determineAccessURL(tuple.getT2(),v.target.getPath());
    return v;
  }
);
  Flux<Integer> numberOfInstancesFlux=OSAVectorApplicationFlux.flatMap(v -> this.getNumberOfProcesses(v));
  Flux<OSAVector> OSAVectorCompleteFlux=Flux.zip(OSAVectorURLFlux,numberOfInstancesFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.numberOfInstances=tuple.getT2();
    return v;
  }
);
  Flux<Instance> instancesFlux=OSAVectorCompleteFlux.flatMap(v -> {
    List<Instance> instances=new ArrayList<>(v.numberOfInstances);
    for (int i=0; i < v.numberOfInstances; i++) {
      Instance inst=new Instance(v.target,i + ""String_Node_Str"",v.accessURL);
      instances.add(inst);
    }
    return Flux.fromIterable(instances);
  }
);
  return instancesFlux.collectList().block();
}","@Override public List<Instance> determineInstancesFromTargets(List<Target> targets){
  Flux<Target> targetsFlux=Flux.fromIterable(targets);
  Flux<OSAVector> initialOSAVectorFlux=targetsFlux.map(target -> {
    OSAVector v=new OSAVector();
    v.target=target;
    return v;
  }
);
  Flux<String> orgIdFlux=initialOSAVectorFlux.flatMap(v -> this.getOrgId(v.target.getOrgName()));
  Flux<OSAVector> OSAVectorOrgFlux=Flux.zip(initialOSAVectorFlux,orgIdFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.orgId=tuple.getT2();
    return v;
  }
);
  Flux<String> spaceIdFlux=OSAVectorOrgFlux.flatMap(v -> this.getSpaceId(v.orgId,v.target.getSpaceName()));
  Flux<OSAVector> OSAVectorSpaceFlux=Flux.zip(OSAVectorOrgFlux,spaceIdFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.spaceId=tuple.getT2();
    return v;
  }
);
  Flux<String> applicationIdFlux=OSAVectorSpaceFlux.flatMap(v -> this.getApplicationId(v.orgId,v.spaceId,v.target.getApplicationName()));
  Flux<OSAVector> OSAVectorApplicationFlux=Flux.zip(OSAVectorSpaceFlux,applicationIdFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.applicationId=tuple.getT2();
    return v;
  }
);
  Flux<String> applicationURLFlux=OSAVectorApplicationFlux.flatMap(v -> this.getApplicationUrl(v.applicationId,v.target.getProtocol()));
  Flux<OSAVector> OSAVectorURLFlux=Flux.zip(OSAVectorApplicationFlux,applicationURLFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.accessURL=this.determineAccessURL(tuple.getT2(),v.target.getPath());
    return v;
  }
);
  Flux<Integer> numberOfInstancesFlux=OSAVectorApplicationFlux.flatMap(v -> this.getNumberOfProcesses(v));
  Flux<OSAVector> OSAVectorCompleteFlux=Flux.zip(OSAVectorURLFlux,numberOfInstancesFlux).map(tuple -> {
    OSAVector v=tuple.getT1();
    v.numberOfInstances=tuple.getT2();
    return v;
  }
);
  Flux<Instance> instancesFlux=OSAVectorCompleteFlux.flatMap(v -> {
    List<Instance> instances=new ArrayList<>(v.numberOfInstances);
    for (int i=0; i < v.numberOfInstances; i++) {
      Instance inst=new Instance(v.target,String.format(""String_Node_Str"",v.applicationId,i),v.accessURL);
      instances.add(inst);
    }
    return Flux.fromIterable(instances);
  }
);
  return instancesFlux.collectList().block();
}"
69256,"public String[] getTargets(){
  return targets;
}","public String[] getTargets(){
  return targets.clone();
}"
69257,"public DiscoveryResponse(String[] targets,DiscoveryLabel labels){
  super();
  this.targets=targets;
  this.labels=labels;
}","public DiscoveryResponse(String[] targets,DiscoveryLabel labels){
  super();
  this.targets=targets.clone();
  this.labels=labels;
}"
69258,"public String[] getOwnTelemetryLabels(){
  return ownTelemetryLabels;
}","public String[] getOwnTelemetryLabels(){
  return ownTelemetryLabels.clone();
}"
69259,"@Override public void onClick(DialogInterface arg0,int arg1){
  if (arg1 == -2) {
    path=null;
    childs=new String[fontpath.size()];
    for (int i=0; i < childs.length; ++i)     childs[i]=adpFont.getItem(i + 3);
    new AlertDialog.Builder(this).setTitle(R.string.rem).setItems(childs,this).setOnCancelListener(this).show();
    return;
  }
  if (arg1 != -1 && path == null) {
    childs=null;
    adpFont.remove(adpFont.getItem(arg1 + 3));
    try {
      if (fontpath.get(arg1).startsWith(this.getFilesDir().getCanonicalPath()))       new File(fontpath.get(arg1)).delete();
    }
 catch (    IOException e) {
    }
    fontpath.remove(arg1);
    if (fidx == arg1 + 1)     fidx=0;
    if (fidx > arg1 + 1)     --fidx;
    if (fontpath.size() == 0)     adpFont.remove(adpFont.getItem(2));
    spnFont.setSelection(fidx == 0 ? 0 : fidx + 2);
    return;
  }
  if (arg1 == -1)   path=""String_Node_Str"";
 else {
    if (path.endsWith(""String_Node_Str"")) {
      if (arg1 == 0)       path=path.substring(0,path.lastIndexOf('/') + 1);
 else {
        try {
          ZipFile zf=new ZipFile(path);
          ZipEntry ze=zf.getEntry(childs[arg1]);
          InputStream is=zf.getInputStream(ze);
          File of=new File(this.getFilesDir(),Long.toHexString(ze.getCrc()) + ""String_Node_Str"" + new File(ze.getName()).getName());
          of.getParentFile().mkdirs();
          OutputStream os=new FileOutputStream(of);
          byte[] buf=new byte[256];
          int size;
          while ((size=is.read(buf)) > 0)           os.write(buf,0,size);
          os.close();
          is.close();
          zf.close();
          path=of.getCanonicalPath();
        }
 catch (        ZipException e) {
          Toast.makeText(this,R.string.cantread,Toast.LENGTH_SHORT).show();
          spnFont.setSelection(0);
          path=null;
          return;
        }
catch (        IOException e) {
        }
      }
    }
 else {
      if (path.length() != 1 && arg1 == 0) {
        for (        String root : roots)         if (path.equals('/' + root))         path=""String_Node_Str"";
      }
      if (path.length() == 0)       path=""String_Node_Str"";
 else       path+=childs[arg1];
    }
  }
  if (path.charAt(path.length() - 1) != '/' && !path.endsWith(""String_Node_Str"")) {
    childs=null;
    Typeface tf;
    try {
      tf=Typeface.createFromFile(path);
    }
 catch (    RuntimeException e) {
      tf=null;
      Toast.makeText(this,R.string.cantopen,Toast.LENGTH_SHORT).show();
    }
    if (tf != null) {
      if (adpFont.getCount() < 3)       adpFont.add(getResources().getString(R.string.rem));
      for (int i=0; i < fontpath.size(); ++i) {
        if (!path.equals(fontpath.get(i)))         continue;
        adpFont.remove(adpFont.getItem(i + 3));
        fontpath.remove(i);
      }
      adpFont.add(new File(path).getName());
      fontpath.add(path);
    }
    spnFont.setSelection(tf == null ? 0 : adpFont.getCount() - 1);
    path=null;
  }
 else {
    try {
      if (path.length() == 1) {
        String[] dirs=new String[4];
        dirs[0]=Environment.getExternalStorageDirectory().getCanonicalPath();
        dirs[1]=Environment.getDataDirectory().getCanonicalPath();
        dirs[2]=Environment.getDownloadCacheDirectory().getCanonicalPath();
        dirs[3]=Environment.getRootDirectory().getCanonicalPath();
        for (int i=0; i < dirs.length; ++i)         for (int j=0; j < dirs.length; ++j)         if (i != j && dirs[i].length() > 0 && dirs[j].length() > 0 && dirs[i].startsWith(dirs[j]) && new File(dirs[j]).canRead())         dirs[i]=""String_Node_Str"";
        int cnt=0;
        for (        String dir1 : dirs) {
          if (!(dir1.length() > 0))           continue;
          if (!new File(dir1).canRead())           continue;
          ++cnt;
        }
        roots=new String[cnt];
        int j=0;
        for (        String dir : dirs) {
          if (!(dir.length() > 0))           continue;
          if (!new File(dir).canRead())           continue;
          roots[j]=dir.substring(1) + '/';
          ++j;
        }
        Arrays.sort(roots);
        childs=roots;
      }
 else       if (path.endsWith(""String_Node_Str"")) {
        try {
          ZipFile zf=new ZipFile(path);
          int cnt=1;
          for (Enumeration<? extends ZipEntry> e=zf.entries(); e.hasMoreElements(); )           if (!e.nextElement().isDirectory())           ++cnt;
          childs=new String[cnt];
          childs[0]=""String_Node_Str"";
          int j=1;
          for (Enumeration<? extends ZipEntry> e=zf.entries(); e.hasMoreElements(); ) {
            ZipEntry entry=e.nextElement();
            if (entry.isDirectory())             continue;
            childs[j]=entry.getName();
            ++j;
          }
          zf.close();
        }
 catch (        ZipException e) {
          Toast.makeText(this,R.string.cantread,Toast.LENGTH_SHORT).show();
          spnFont.setSelection(0);
          path=null;
          return;
        }
      }
 else {
        File f=new File(path);
        path=f.getCanonicalPath();
        if (!path.endsWith(""String_Node_Str""))         path+='/';
        File[] fl=f.listFiles();
        if (fl == null) {
          Toast.makeText(this,R.string.cantread,Toast.LENGTH_SHORT).show();
          spnFont.setSelection(0);
          path=null;
          return;
        }
        int cnt=1;
        for (        File aFl1 : fl)         if (aFl1.canRead())         ++cnt;
        childs=new String[cnt];
        childs[0]=""String_Node_Str"";
        int j=1;
        for (        File aFl : fl) {
          if (!aFl.canRead())           continue;
          childs[j]=aFl.getName();
          if (aFl.isDirectory())           childs[j]+='/';
          ++j;
        }
      }
      new AlertDialog.Builder(this).setTitle(path).setItems(childs,this).setOnCancelListener(this).show();
    }
 catch (    IOException e) {
    }
  }
}","@Override public void onClick(DialogInterface arg0,int arg1){
  if (arg1 == -2) {
    path=null;
    childs=new String[fontpath.size()];
    for (int i=0; i < childs.length; ++i)     childs[i]=adpFont.getItem(i + 3);
    new AlertDialog.Builder(this).setTitle(R.string.rem).setItems(childs,this).setOnCancelListener(this).show();
    return;
  }
  if (arg1 != -1 && path == null) {
    childs=null;
    adpFont.remove(adpFont.getItem(arg1 + 3));
    try {
      if (fontpath.get(arg1).startsWith(this.getFilesDir().getCanonicalPath()))       new File(fontpath.get(arg1)).delete();
    }
 catch (    IOException e) {
    }
    fontpath.remove(arg1);
    if (fidx == arg1 + 1)     fidx=0;
    if (fidx > arg1 + 1)     --fidx;
    if (fontpath.size() == 0)     adpFont.remove(adpFont.getItem(2));
    spnFont.setSelection(fidx == 0 ? 0 : fidx + 2);
    return;
  }
  if (arg1 == -1)   path=""String_Node_Str"";
 else {
    if (path.endsWith(""String_Node_Str"")) {
      if (arg1 == 0)       path=path.substring(0,path.lastIndexOf('/') + 1);
 else {
        try {
          ZipFile zf=new ZipFile(path);
          try {
            zf.entries().nextElement();
          }
 catch (          IllegalArgumentException e) {
            zf.close();
            PASSED: {
              if (Build.VERSION.SDK_INT >= 24) {
                for (                Charset charset : Charset.availableCharsets().values()) {
                  zf=new ZipFile(path,charset);
                  try {
                    zf.entries().nextElement();
                  }
 catch (                  IllegalArgumentException e2) {
                    zf.close();
                    continue;
                  }
                  break PASSED;
                }
              }
              Toast.makeText(this,R.string.malformed,Toast.LENGTH_SHORT).show();
              spnFont.setSelection(0);
              path=null;
              return;
            }
          }
          ZipEntry ze=zf.getEntry(childs[arg1]);
          InputStream is=zf.getInputStream(ze);
          File of=new File(this.getFilesDir(),Long.toHexString(ze.getCrc()) + ""String_Node_Str"" + new File(ze.getName()).getName());
          of.getParentFile().mkdirs();
          OutputStream os=new FileOutputStream(of);
          byte[] buf=new byte[256];
          int size;
          while ((size=is.read(buf)) > 0)           os.write(buf,0,size);
          os.close();
          is.close();
          zf.close();
          path=of.getCanonicalPath();
        }
 catch (        ZipException e) {
          Toast.makeText(this,R.string.cantread,Toast.LENGTH_SHORT).show();
          spnFont.setSelection(0);
          path=null;
          return;
        }
catch (        IOException e) {
        }
      }
    }
 else {
      if (path.length() != 1 && arg1 == 0) {
        for (        String root : roots)         if (path.equals('/' + root))         path=""String_Node_Str"";
      }
      if (path.length() == 0)       path=""String_Node_Str"";
 else       path+=childs[arg1];
    }
  }
  if (path.charAt(path.length() - 1) != '/' && !path.endsWith(""String_Node_Str"")) {
    childs=null;
    Typeface tf;
    try {
      tf=Typeface.createFromFile(path);
    }
 catch (    RuntimeException e) {
      tf=null;
      Toast.makeText(this,R.string.cantopen,Toast.LENGTH_SHORT).show();
    }
    if (tf != null) {
      if (adpFont.getCount() < 3)       adpFont.add(getResources().getString(R.string.rem));
      for (int i=0; i < fontpath.size(); ++i) {
        if (!path.equals(fontpath.get(i)))         continue;
        adpFont.remove(adpFont.getItem(i + 3));
        fontpath.remove(i);
      }
      adpFont.add(new File(path).getName());
      fontpath.add(path);
    }
    spnFont.setSelection(tf == null ? 0 : adpFont.getCount() - 1);
    path=null;
  }
 else {
    try {
      if (path.length() == 1) {
        String[] dirs=new String[4];
        dirs[0]=Environment.getExternalStorageDirectory().getCanonicalPath();
        dirs[1]=Environment.getDataDirectory().getCanonicalPath();
        dirs[2]=Environment.getDownloadCacheDirectory().getCanonicalPath();
        dirs[3]=Environment.getRootDirectory().getCanonicalPath();
        for (int i=0; i < dirs.length; ++i)         for (int j=0; j < dirs.length; ++j)         if (i != j && dirs[i].length() > 0 && dirs[j].length() > 0 && dirs[i].startsWith(dirs[j]) && new File(dirs[j]).canRead())         dirs[i]=""String_Node_Str"";
        int cnt=0;
        for (        String dir1 : dirs) {
          if (!(dir1.length() > 0))           continue;
          if (!new File(dir1).canRead())           continue;
          ++cnt;
        }
        roots=new String[cnt];
        int j=0;
        for (        String dir : dirs) {
          if (!(dir.length() > 0))           continue;
          if (!new File(dir).canRead())           continue;
          roots[j]=dir.substring(1) + '/';
          ++j;
        }
        Arrays.sort(roots);
        childs=roots;
      }
 else       if (path.endsWith(""String_Node_Str"")) {
        try {
          ZipFile zf=new ZipFile(path);
          try {
            zf.entries().nextElement();
          }
 catch (          IllegalArgumentException e) {
            zf.close();
            PASSED: {
              if (Build.VERSION.SDK_INT >= 24) {
                for (                Charset charset : Charset.availableCharsets().values()) {
                  zf=new ZipFile(path,charset);
                  try {
                    zf.entries().nextElement();
                  }
 catch (                  IllegalArgumentException e2) {
                    zf.close();
                    continue;
                  }
                  break PASSED;
                }
              }
              Toast.makeText(this,R.string.malformed,Toast.LENGTH_SHORT).show();
              spnFont.setSelection(0);
              path=null;
              return;
            }
          }
          int cnt=1;
          for (Enumeration<? extends ZipEntry> e=zf.entries(); e.hasMoreElements(); )           if (!e.nextElement().isDirectory())           ++cnt;
          childs=new String[cnt];
          childs[0]=""String_Node_Str"";
          int j=1;
          for (Enumeration<? extends ZipEntry> e=zf.entries(); e.hasMoreElements(); ) {
            ZipEntry entry=e.nextElement();
            if (entry.isDirectory())             continue;
            childs[j]=entry.getName();
            ++j;
          }
          zf.close();
        }
 catch (        ZipException e) {
          Toast.makeText(this,R.string.cantread,Toast.LENGTH_SHORT).show();
          spnFont.setSelection(0);
          path=null;
          return;
        }
      }
 else {
        File f=new File(path);
        path=f.getCanonicalPath();
        if (!path.endsWith(""String_Node_Str""))         path+='/';
        File[] fl=f.listFiles();
        if (fl == null) {
          Toast.makeText(this,R.string.cantread,Toast.LENGTH_SHORT).show();
          spnFont.setSelection(0);
          path=null;
          return;
        }
        int cnt=1;
        for (        File aFl1 : fl)         if (aFl1.canRead())         ++cnt;
        childs=new String[cnt];
        childs[0]=""String_Node_Str"";
        int j=1;
        for (        File aFl : fl) {
          if (!aFl.canRead())           continue;
          childs[j]=aFl.getName();
          if (aFl.isDirectory())           childs[j]+='/';
          ++j;
        }
      }
      new AlertDialog.Builder(this).setTitle(path).setItems(childs,this).setOnCancelListener(this).show();
    }
 catch (    IOException e) {
    }
  }
}"
69260,"@SuppressLint(""String_Node_Str"") @Override public Object instantiateItem(final View collection,final int position){
  CharacterView text=new CharacterView(context);
  text.setText((String)adapter.getItem(position));
  text.setTextSize(fontsize);
  text.setTypeface(tf);
  text.drawSlash(false);
  if (Build.VERSION.SDK_INT >= 11)   text.setLayerType(View.LAYER_TYPE_SOFTWARE,null);
  text.setTextColor(Color.BLACK);
  text.setBackgroundColor(Color.WHITE);
  text.setSquareAlpha((int)Math.min(Math.max(checker * 2.55f,0),255));
  text.drawLines(lines);
  text.shrinkWidth(shrink);
  text.shrinkHeight(true);
  LinearLayout layout=new LinearLayout(context);
  layout.setOrientation(LinearLayout.VERTICAL);
  layout.addView(text,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
  final int itemid=(int)adapter.getItemId(position);
  final boolean emoji=itemid == -1;
  int ver=!emoji ? db.getint(itemid,""String_Node_Str"") : db.getint(adapter.getItemString(position),""String_Node_Str"");
  text.setValid(ver != 0 && ver <= UnicodeActivity.univer);
  final StringBuilder str=new StringBuilder();
  if (!emoji)   str.append((String)adapter.getItem(position));
  OnLongClickListener lsn=new OnLongClickListener(){
    @Override public boolean onLongClick(    View arg0){
      context.adpPage.showDesc(arg0,arg0.getId() - 0x3F000000,new StringAdapter(str.toString()));
      return true;
    }
  }
;
  for (int i=0; i < (!emoji ? 9 : 6); ++i) {
    if (emoji && i == 4)     continue;
    if (i == 1) {
      int v=!emoji ? db.getint(itemid,cols[i]) : db.getint(adapter.getItemString(position),emjs[i]);
      TextView desc=new TextView(context);
      desc.setText(mods[i] + String.format(""String_Node_Str"",v / 100,v / 10 % 10,v % 10) + (v == 600 ? ""String_Node_Str"" : ""String_Node_Str""));
      desc.setGravity(Gravity.CENTER_VERTICAL);
      layout.addView(desc,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
      continue;
    }
    String r=!emoji ? db.get(itemid,cols[i]) : db.get(adapter.getItemString(position),emjs[i]);
    if (r == null && i == 0) {
      TextView desc=new TextView(context);
      desc.setText(""String_Node_Str"");
      layout.addView(desc,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
      break;
    }
    if (r == null)     continue;
    String[] l=r.split(emoji && i == 5 ? ""String_Node_Str"" : ""String_Node_Str"");
    for (    String s : l) {
      if (i == 0) {
        TextView desc=new TextView(context,null,android.R.attr.textAppearanceMedium);
        desc.setText(s);
        if (Build.VERSION.SDK_INT >= 11)         desc.setTextIsSelectable(true);
        desc.setGravity(Gravity.CENTER_VERTICAL);
        if (!emoji) {
          CheckBox fav=new CheckBox(context);
          fav.setButtonDrawable(android.R.drawable.btn_star);
          fav.setGravity(Gravity.TOP);
          fav.setChecked(afav.isfavorited(itemid));
          fav.setOnCheckedChangeListener(new OnCheckedChangeListener(){
            public void onCheckedChanged(            CompoundButton arg0,            boolean arg1){
              if (arg1)               afav.add(itemid);
 else               afav.remove(itemid);
            }
          }
);
          LinearLayout hl=new LinearLayout(context);
          hl.setOrientation(LinearLayout.HORIZONTAL);
          hl.addView(desc,new LinearLayout.LayoutParams(0,LayoutParams.MATCH_PARENT,1f));
          hl.addView(fav,new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT));
          layout.addView(hl,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
        }
 else         layout.addView(desc,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
        continue;
      }
      LinearLayout hl=new LinearLayout(context);
      hl.setOrientation(LinearLayout.HORIZONTAL);
      TextView it=new TextView(context);
      it.setGravity(Gravity.CENTER_VERTICAL);
      it.setText((!emoji ? mods : mode)[i]);
      hl.addView(it,new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT));
      if (i < 5) {
        TextView desc=new TextView(context);
        desc.setText(s);
        if (i != 2 && Build.VERSION.SDK_INT >= 11)         desc.setTextIsSelectable(true);
        hl.addView(desc,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT,1f));
      }
 else {
        String cs=""String_Node_Str"";
        String ps=""String_Node_Str"";
        String ns=null;
        Scanner sc=new Scanner(s);
        for (int j=0; sc.hasNext(); ++j) {
          if (i == 8 && j == 0 && s.charAt(0) == '<') {
            ns=sc.next();
            continue;
          }
          int tgt=sc.nextInt(16);
          cs+=String.valueOf(Character.toChars(tgt));
          ps+=String.format(""String_Node_Str"",tgt);
          if (i == 5) {
            String n=db.get(tgt,""String_Node_Str"");
            ns=n != null ? n : ""String_Node_Str"";
            break;
          }
          if (i == 6 && j == 1) {
            sc.useDelimiter(""String_Node_Str"");
            sc.skip(""String_Node_Str"");
            ns=sc.hasNext() ? sc.next() : ""String_Node_Str"";
            break;
          }
        }
        sc.close();
        if (ps.length() == 0)         continue;
        ps=ps.substring(0,ps.length() - 1);
        CharacterView ct=new CharacterView(context,null,android.R.attr.textAppearanceLarge);
        ct.setPadding(0,0,0,0);
        ct.setPadding(UnicodeAdapter.padding,UnicodeAdapter.padding,UnicodeAdapter.padding,UnicodeAdapter.padding);
        ct.setTextSize(UnicodeAdapter.fontsize);
        ct.setText(cs);
        ct.setTypeface(tf);
        hl.addView(ct,new LinearLayout.LayoutParams((int)(context.getResources().getDisplayMetrics().scaledDensity * UnicodeAdapter.fontsize * 2 + UnicodeAdapter.padding * 2),LayoutParams.MATCH_PARENT));
        TextView pt=new TextView(context,null,android.R.attr.textAppearanceSmall);
        pt.setPadding(0,0,0,0);
        pt.setGravity(Gravity.CENTER_VERTICAL);
        pt.setText(ps);
        if (ns != null) {
          TextView nt=new TextView(context,null,android.R.attr.textAppearanceSmall);
          nt.setPadding(0,0,0,0);
          nt.setGravity(Gravity.CENTER_VERTICAL);
          nt.setText(ns);
          LinearLayout vl=new LinearLayout(context);
          vl.setOrientation(LinearLayout.VERTICAL);
          vl.addView(pt,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,1f));
          vl.addView(nt,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,1f));
          hl.addView(vl,new LinearLayout.LayoutParams(0,LayoutParams.MATCH_PARENT,1f));
        }
 else         hl.addView(pt,new LinearLayout.LayoutParams(0,LayoutParams.MATCH_PARENT,1f));
        hl.setId(0x3F000000 + str.codePointCount(0,str.length()));
        str.append(cs);
        hl.setEnabled(true);
        hl.setClickable(true);
        hl.setFocusable(true);
        hl.setOnClickListener(this);
        hl.setOnLongClickListener(lsn);
        hl.setBackgroundResource(reslist);
      }
      layout.addView(hl,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
    }
  }
  ScrollView scroll=new ScrollView(context);
  scroll.addView(layout);
  ((ViewPager)collection).addView(scroll);
  collection.findViewById(0x3EFFFFFF).measure(MeasureSpec.makeMeasureSpec(10,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));
  layout.setPadding(0,0,0,collection.findViewById(0x3EFFFFFF).getMeasuredHeight() * 2);
  return scroll;
}","@SuppressLint(""String_Node_Str"") @Override public Object instantiateItem(final View collection,final int position){
  CharacterView text=new CharacterView(context);
  text.setText((String)adapter.getItem(position));
  text.setTextSize(fontsize);
  text.setTypeface(tf);
  text.drawSlash(false);
  if (Build.VERSION.SDK_INT >= 11)   text.setLayerType(View.LAYER_TYPE_SOFTWARE,null);
  text.setTextColor(Color.BLACK);
  text.setBackgroundColor(Color.WHITE);
  text.setSquareAlpha((int)Math.min(Math.max(checker * 2.55f,0),255));
  text.drawLines(lines);
  text.shrinkWidth(shrink);
  text.shrinkHeight(true);
  LinearLayout layout=new LinearLayout(context);
  layout.setOrientation(LinearLayout.VERTICAL);
  layout.addView(text,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
  final int itemid=(int)adapter.getItemId(position);
  final boolean emoji=itemid == -1;
  int ver=!emoji ? db.getint(itemid,""String_Node_Str"") : db.getint(adapter.getItemString(position),""String_Node_Str"");
  text.setValid(ver != 0 && ver <= UnicodeActivity.univer);
  final StringBuilder str=new StringBuilder();
  if (!emoji)   str.append((String)adapter.getItem(position));
  OnLongClickListener lsn=new OnLongClickListener(){
    @Override public boolean onLongClick(    View arg0){
      context.adpPage.showDesc(arg0,arg0.getId() - 0x3F000000,new StringAdapter(str.toString()));
      return true;
    }
  }
;
  for (int i=0; i < (!emoji ? 9 : 6); ++i) {
    if (emoji && i == 4)     continue;
    if (i == 1) {
      int v=!emoji ? db.getint(itemid,cols[i]) : db.getint(adapter.getItemString(position),emjs[i]);
      TextView desc=new TextView(context);
      desc.setText(mods[i] + String.format(""String_Node_Str"",v / 100,v / 10 % 10,v % 10) + (v == 600 ? ""String_Node_Str"" : ""String_Node_Str""));
      desc.setGravity(Gravity.CENTER_VERTICAL);
      layout.addView(desc,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
      continue;
    }
    String r=!emoji ? db.get(itemid,cols[i]) : db.get(adapter.getItemString(position),emjs[i]);
    if (r == null && i == 0) {
      TextView desc=new TextView(context);
      desc.setText(""String_Node_Str"");
      layout.addView(desc,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
      break;
    }
    if (r == null)     continue;
    String[] l=r.split(emoji && i == 5 ? ""String_Node_Str"" : ""String_Node_Str"");
    for (    String s : l) {
      if (i == 0) {
        TextView desc=new TextView(context,null,android.R.attr.textAppearanceMedium);
        desc.setText(s);
        if (Build.VERSION.SDK_INT >= 11)         desc.setTextIsSelectable(true);
        desc.setGravity(Gravity.CENTER_VERTICAL);
        if (!emoji) {
          CheckBox fav=new CheckBox(context);
          fav.setButtonDrawable(android.R.drawable.btn_star);
          fav.setGravity(Gravity.TOP);
          fav.setChecked(afav.isfavorited(itemid));
          fav.setOnCheckedChangeListener(new OnCheckedChangeListener(){
            public void onCheckedChanged(            CompoundButton arg0,            boolean arg1){
              if (arg1)               afav.add(itemid);
 else               afav.remove(itemid);
            }
          }
);
          LinearLayout hl=new LinearLayout(context);
          hl.setOrientation(LinearLayout.HORIZONTAL);
          hl.addView(desc,new LinearLayout.LayoutParams(0,LayoutParams.MATCH_PARENT,1f));
          hl.addView(fav,new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT));
          layout.addView(hl,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
        }
 else         layout.addView(desc,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
        continue;
      }
      LinearLayout hl=new LinearLayout(context);
      hl.setOrientation(LinearLayout.HORIZONTAL);
      TextView it=new TextView(context);
      it.setGravity(Gravity.CENTER_VERTICAL);
      it.setText((!emoji ? mods : mode)[i]);
      hl.addView(it,new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT));
      if (i < 5) {
        TextView desc=new TextView(context);
        desc.setText(s);
        if (i != 2 && Build.VERSION.SDK_INT >= 11)         desc.setTextIsSelectable(true);
        hl.addView(desc,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT,1f));
      }
 else {
        String cs=""String_Node_Str"";
        String ps=""String_Node_Str"";
        String ns=null;
        Scanner sc=new Scanner(s);
        for (int j=0; sc.hasNext(); ++j) {
          if (i == 8 && j == 0 && s.charAt(0) == '<') {
            ns=sc.next();
            continue;
          }
          int tgt=sc.nextInt(16);
          cs+=String.valueOf(Character.toChars(tgt));
          ps+=String.format(""String_Node_Str"",tgt);
          if (i == 5) {
            String n=db.get(tgt,""String_Node_Str"");
            ns=n != null ? n : ""String_Node_Str"";
            break;
          }
          if (i == 6 && j == 1) {
            sc.useDelimiter(""String_Node_Str"");
            sc.skip(""String_Node_Str"");
            ns=sc.hasNext() ? sc.next() : ""String_Node_Str"";
            break;
          }
        }
        sc.close();
        if (ps.length() == 0)         continue;
        ps=ps.substring(0,ps.length() - 1);
        CharacterView ct=new CharacterView(context,null,android.R.attr.textAppearanceLarge);
        ct.setPadding(0,0,0,0);
        ct.setPadding(UnicodeAdapter.padding,UnicodeAdapter.padding,UnicodeAdapter.padding,UnicodeAdapter.padding);
        ct.setTextSize(UnicodeAdapter.fontsize);
        ct.setText(cs);
        ct.setTypeface(tf);
        hl.addView(ct,new LinearLayout.LayoutParams((int)(context.getResources().getDisplayMetrics().scaledDensity * UnicodeAdapter.fontsize * 2 + UnicodeAdapter.padding * 2),LayoutParams.MATCH_PARENT));
        TextView pt=new TextView(context,null,android.R.attr.textAppearanceSmall);
        pt.setPadding(0,0,0,0);
        pt.setGravity(Gravity.CENTER_VERTICAL);
        pt.setText(ps);
        if (ns != null) {
          TextView nt=new TextView(context,null,android.R.attr.textAppearanceSmall);
          nt.setPadding(0,0,0,0);
          nt.setGravity(Gravity.CENTER_VERTICAL);
          nt.setText(ns);
          LinearLayout vl=new LinearLayout(context);
          vl.setOrientation(LinearLayout.VERTICAL);
          vl.addView(pt,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,1f));
          vl.addView(nt,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,1f));
          hl.addView(vl,new LinearLayout.LayoutParams(0,LayoutParams.MATCH_PARENT,1f));
        }
 else         hl.addView(pt,new LinearLayout.LayoutParams(0,LayoutParams.MATCH_PARENT,1f));
        hl.setId(0x3F000000 + str.codePointCount(0,str.length()));
        str.append(cs);
        hl.setEnabled(true);
        hl.setClickable(true);
        hl.setFocusable(true);
        hl.setOnClickListener(this);
        hl.setOnLongClickListener(lsn);
        hl.setBackgroundResource(reslist);
      }
      layout.addView(hl,new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
    }
  }
  ScrollView scroll=new ScrollView(context);
  scroll.addView(layout);
  ((ViewPager)collection).addView(scroll);
  collection.findViewById(R.id.TAB_ID).measure(MeasureSpec.makeMeasureSpec(10,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));
  layout.setPadding(0,0,0,collection.findViewById(R.id.TAB_ID).getMeasuredHeight() * 2);
  return scroll;
}"
69261,"void showDesc(final View view,int index,final UnicodeAdapter ua){
  PagerTabStrip tab=new PagerTabStrip(activity);
  tab.setId(0x3EFFFFFF);
  ViewPager.LayoutParams layoutParams=new ViewPager.LayoutParams();
  layoutParams.height=LayoutParams.WRAP_CONTENT;
  layoutParams.width=LayoutParams.MATCH_PARENT;
  layoutParams.gravity=Gravity.TOP;
  final ViewPager pager=new ViewPager(activity);
  pager.addView(tab,layoutParams);
  final CharacterAdapter adapter=new CharacterAdapter(activity,ua,tf,db,afav);
  pager.setAdapter(adapter);
  pager.setCurrentItem(index,false);
  pager.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,(int)(activity.getResources().getDisplayMetrics().scaledDensity * (CharacterAdapter.fontsize * 1.8f + new TextAppearanceSpan(activity,android.R.style.TextAppearance_Small).getTextSize() * 2.4f + 32.f))));
  LinearLayout layout=new LinearLayout(activity);
  layout.addView(pager);
  AlertDialog.Builder builder=new AlertDialog.Builder(activity).setView(layout);
  if (view != null)   builder.setPositiveButton(R.string.input,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (adapter.getId() != -1) {
        arec.add((int)adapter.getId());
        if (recpage != -1 && page != recpage && grids[recpage] != null)         grids[recpage].invalidateViews();
      }
      int start=edit.getSelectionStart();
      int end=edit.getSelectionEnd();
      if (start == -1)       return;
      edit.getEditableText().replace(Math.min(start,end),Math.max(start,end),(String)ua.getItem(adapter.getIndex()));
    }
  }
);
  if (!(view instanceof GridView) || ((GridView)view).getAdapter() != aemoji)   builder.setNeutralButton(R.string.inlist,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      find((int)adapter.getId());
    }
  }
);
  if (view instanceof GridView && ((GridView)view).getAdapter() == arec)   builder.setNegativeButton(R.string.remrec,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      arec.remove((int)adapter.getId());
      if (grids[recpage] != null)       grids[recpage].invalidateViews();
    }
  }
);
  if (view instanceof GridView && ((GridView)view).getAdapter() == aedt)   builder.setNegativeButton(R.string.delete,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      int i=pager.getCurrentItem();
      String s=edit.getEditableText().toString();
      edit.getEditableText().delete(s.offsetByCodePoints(0,i),s.offsetByCodePoints(0,i + 1));
    }
  }
);
  if (view instanceof GridView && ((GridView)view).getAdapter() == alist)   builder.setNegativeButton(R.string.mark,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      final EditText edit=new EditText(activity);
      new AlertDialog.Builder(activity).setTitle(R.string.mark).setView(edit).setPositiveButton(R.string.mark,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface arg0,        int arg1){
          alist.mark((int)adapter.getId(),edit.getText().toString());
        }
      }
).create().show();
    }
  }
);
  if (dlg != null && dlg.isShowing())   dlg.dismiss();
  dlg=builder.create();
  dlg.show();
}","void showDesc(final View view,int index,final UnicodeAdapter ua){
  PagerTabStrip tab=new PagerTabStrip(activity);
  tab.setId(R.id.TAB_ID);
  ViewPager.LayoutParams layoutParams=new ViewPager.LayoutParams();
  layoutParams.height=LayoutParams.WRAP_CONTENT;
  layoutParams.width=LayoutParams.MATCH_PARENT;
  layoutParams.gravity=Gravity.TOP;
  final ViewPager pager=new ViewPager(activity);
  pager.addView(tab,layoutParams);
  final CharacterAdapter adapter=new CharacterAdapter(activity,ua,tf,db,afav);
  pager.setAdapter(adapter);
  pager.setCurrentItem(index,false);
  pager.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,(int)(activity.getResources().getDisplayMetrics().scaledDensity * (CharacterAdapter.fontsize * 1.8f + new TextAppearanceSpan(activity,android.R.style.TextAppearance_Small).getTextSize() * 2.4f + 32.f))));
  LinearLayout layout=new LinearLayout(activity);
  layout.addView(pager);
  AlertDialog.Builder builder=new AlertDialog.Builder(activity).setView(layout);
  if (view != null)   builder.setPositiveButton(R.string.input,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (adapter.getId() != -1) {
        arec.add((int)adapter.getId());
        if (recpage != -1 && page != recpage && grids[recpage] != null)         grids[recpage].invalidateViews();
      }
      int start=edit.getSelectionStart();
      int end=edit.getSelectionEnd();
      if (start == -1)       return;
      edit.getEditableText().replace(Math.min(start,end),Math.max(start,end),(String)ua.getItem(adapter.getIndex()));
    }
  }
);
  if (!(view instanceof GridView) || ((GridView)view).getAdapter() != aemoji)   builder.setNeutralButton(R.string.inlist,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      find((int)adapter.getId());
    }
  }
);
  if (view instanceof GridView && ((GridView)view).getAdapter() == arec)   builder.setNegativeButton(R.string.remrec,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      arec.remove((int)adapter.getId());
      if (grids[recpage] != null)       grids[recpage].invalidateViews();
    }
  }
);
  if (view instanceof GridView && ((GridView)view).getAdapter() == aedt)   builder.setNegativeButton(R.string.delete,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      int i=pager.getCurrentItem();
      String s=edit.getEditableText().toString();
      edit.getEditableText().delete(s.offsetByCodePoints(0,i),s.offsetByCodePoints(0,i + 1));
    }
  }
);
  if (view instanceof GridView && ((GridView)view).getAdapter() == alist)   builder.setNegativeButton(R.string.mark,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      final EditText edit=new EditText(activity);
      new AlertDialog.Builder(activity).setTitle(R.string.mark).setView(edit).setPositiveButton(R.string.mark,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface arg0,        int arg1){
          alist.mark((int)adapter.getId(),edit.getText().toString());
        }
      }
).create().show();
    }
  }
);
  if (dlg != null && dlg.isShowing())   dlg.dismiss();
  dlg=builder.create();
  dlg.show();
}"
69262,"private void update(RolesElement wrapper,RolesByOrganisation editedRolesByOrg){
  for (  OrganisationRoles role : OrganisationRoles.values()) {
    wrapper.setRole(role,editedRolesByOrg.hasRole(role));
  }
  wrapper.saveSelectedRoles();
  if (editedRolesByOrg.hasSomeRoles(OrganisationRoles.administrator,OrganisationRoles.sysadmin,OrganisationRoles.rolesmanager)) {
    statusEl.setEnabled(false);
  }
  setStatus(editedIdentity.getStatus());
  wrapper.getRolesEl().setVisible(!isAnonymous());
  rolesSep.setVisible(!isAnonymous());
}","private void update(RolesElement wrapper,RolesByOrganisation editedRolesByOrg){
  for (  OrganisationRoles role : OrganisationRoles.values()) {
    boolean hasRole=editedRolesByOrg != null && editedRolesByOrg.hasRole(role);
    wrapper.setRole(role,hasRole);
  }
  wrapper.saveSelectedRoles();
  if (editedRolesByOrg != null && editedRolesByOrg.hasSomeRoles(OrganisationRoles.administrator,OrganisationRoles.sysadmin,OrganisationRoles.rolesmanager)) {
    statusEl.setEnabled(false);
  }
  setStatus(editedIdentity.getStatus());
  wrapper.getRolesEl().setVisible(!isAnonymous());
  rolesSep.setVisible(!isAnonymous());
}"
69263,"/** 
 * The method updates empty and null values!
 * @param re
 * @param displayName
 * @param externalRef
 * @param authors
 * @param description
 * @param objectives
 * @param requirements
 * @param credits
 * @param mainLanguage
 * @param expenditureOfWork
 * @param cycle
 * @return
 */
public RepositoryEntry setDescriptionAndName(final RepositoryEntry re,String displayName,String externalRef,String authors,String description,String objectives,String requirements,String credits,String mainLanguage,String location,String expenditureOfWork,RepositoryEntryLifecycle cycle,List<Organisation> organisations){
  RepositoryEntry reloadedRe=repositoryEntryDao.loadForUpdate(re);
  if (reloadedRe == null) {
    return null;
  }
  reloadedRe.setDisplayname(displayName);
  reloadedRe.setAuthors(authors);
  reloadedRe.setDescription(description);
  reloadedRe.setExternalRef(externalRef);
  reloadedRe.setObjectives(objectives);
  reloadedRe.setRequirements(requirements);
  reloadedRe.setCredits(credits);
  reloadedRe.setMainLanguage(mainLanguage);
  reloadedRe.setExpenditureOfWork(expenditureOfWork);
  reloadedRe.setLocation(location);
  RepositoryEntryLifecycle cycleToDelete=null;
  RepositoryEntryLifecycle currentCycle=reloadedRe.getLifecycle();
  if (currentCycle != null) {
    if (currentCycle.isPrivateCycle()) {
      if (cycle == null || !cycle.isPrivateCycle()) {
        cycleToDelete=currentCycle;
      }
    }
  }
  if (organisations != null) {
    Set<RepositoryEntryToOrganisation> currentRelations=reloadedRe.getOrganisations();
    List<RepositoryEntryToOrganisation> copyRelations=new ArrayList<>(currentRelations);
    Set<Organisation> currentOrganisations=new HashSet<>();
    for (    RepositoryEntryToOrganisation relation : copyRelations) {
      if (!organisations.contains(relation.getOrganisation())) {
        repositoryEntryToOrganisationDao.delete(relation);
        repositoryEntryRelationDao.removeRelation(relation.getOrganisation().getGroup());
      }
 else {
        currentOrganisations.add(relation.getOrganisation());
      }
    }
    for (    Organisation organisation : organisations) {
      if (!currentOrganisations.contains(organisation)) {
        RepositoryEntryToOrganisation newRelation=repositoryEntryToOrganisationDao.createRelation(organisation,reloadedRe,false);
        currentRelations.add(newRelation);
        RepositoryEntryToGroupRelation relToGroup=repositoryEntryRelationDao.createRelation(organisation.getGroup(),reloadedRe);
        reloadedRe.getGroups().add(relToGroup);
      }
    }
  }
  reloadedRe.setLifecycle(cycle);
  reloadedRe.setLastModified(new Date());
  RepositoryEntry updatedRe=dbInstance.getCurrentEntityManager().merge(reloadedRe);
  if (cycleToDelete != null) {
    dbInstance.getCurrentEntityManager().remove(cycleToDelete);
  }
  updatedRe.getStatistics().getLaunchCounter();
  if (updatedRe.getLifecycle() != null) {
    updatedRe.getLifecycle().getCreationDate();
  }
  dbInstance.commit();
  lifeIndexer.indexDocument(RepositoryEntryDocument.TYPE,updatedRe.getKey());
  autoAccessManager.grantAccess(updatedRe);
  return updatedRe;
}","/** 
 * The method updates empty and null values!
 * @param re
 * @param displayName
 * @param externalRef
 * @param authors
 * @param description
 * @param objectives
 * @param requirements
 * @param credits
 * @param mainLanguage
 * @param expenditureOfWork
 * @param cycle
 * @return
 */
public RepositoryEntry setDescriptionAndName(final RepositoryEntry re,String displayName,String externalRef,String authors,String description,String objectives,String requirements,String credits,String mainLanguage,String location,String expenditureOfWork,RepositoryEntryLifecycle cycle,List<Organisation> organisations){
  RepositoryEntry reloadedRe=repositoryEntryDao.loadForUpdate(re);
  if (reloadedRe == null) {
    return null;
  }
  reloadedRe.setDisplayname(displayName);
  reloadedRe.setAuthors(authors);
  reloadedRe.setDescription(description);
  reloadedRe.setExternalRef(externalRef);
  reloadedRe.setObjectives(objectives);
  reloadedRe.setRequirements(requirements);
  reloadedRe.setCredits(credits);
  reloadedRe.setMainLanguage(mainLanguage);
  reloadedRe.setExpenditureOfWork(expenditureOfWork);
  reloadedRe.setLocation(location);
  RepositoryEntryLifecycle cycleToDelete=null;
  RepositoryEntryLifecycle currentCycle=reloadedRe.getLifecycle();
  if (currentCycle != null) {
    if (currentCycle.isPrivateCycle()) {
      if (cycle == null || !cycle.isPrivateCycle()) {
        cycleToDelete=currentCycle;
      }
    }
  }
  if (organisations != null) {
    List<Organisation> currentOrganisationsByGroups=repositoryEntryRelationDao.getOrganisations(reloadedRe);
    for (    Organisation currentOrganisation : currentOrganisationsByGroups) {
      if (!organisations.contains(currentOrganisation)) {
        repositoryEntryRelationDao.removeRelation(currentOrganisation.getGroup(),reloadedRe);
      }
    }
    for (    Organisation organisation : organisations) {
      if (!currentOrganisationsByGroups.contains(organisation)) {
        RepositoryEntryToGroupRelation relToGroup=repositoryEntryRelationDao.createRelation(organisation.getGroup(),reloadedRe);
        reloadedRe.getGroups().add(relToGroup);
      }
    }
    Set<RepositoryEntryToOrganisation> currentRelations=reloadedRe.getOrganisations();
    List<RepositoryEntryToOrganisation> copyRelations=new ArrayList<>(currentRelations);
    List<Organisation> currentOrganisationsByRelations=new ArrayList<>();
    for (    RepositoryEntryToOrganisation relation : copyRelations) {
      if (!organisations.contains(relation.getOrganisation())) {
        repositoryEntryToOrganisationDao.delete(relation);
        currentRelations.remove(relation);
      }
 else {
        currentOrganisationsByRelations.add(relation.getOrganisation());
      }
    }
    for (    Organisation organisation : organisations) {
      if (!currentOrganisationsByRelations.contains(organisation)) {
        RepositoryEntryToOrganisation newRelation=repositoryEntryToOrganisationDao.createRelation(organisation,reloadedRe,false);
        currentRelations.add(newRelation);
      }
    }
  }
  reloadedRe.setLifecycle(cycle);
  reloadedRe.setLastModified(new Date());
  RepositoryEntry updatedRe=dbInstance.getCurrentEntityManager().merge(reloadedRe);
  if (cycleToDelete != null) {
    dbInstance.getCurrentEntityManager().remove(cycleToDelete);
  }
  updatedRe.getStatistics().getLaunchCounter();
  if (updatedRe.getLifecycle() != null) {
    updatedRe.getLifecycle().getCreationDate();
  }
  dbInstance.commit();
  lifeIndexer.indexDocument(RepositoryEntryDocument.TYPE,updatedRe.getKey());
  autoAccessManager.grantAccess(updatedRe);
  return updatedRe;
}"
69264,"private void initFormRoles(FormItemContainer formLayout,Organisation organisation){
  boolean admin=managerRoles.hasRoleInParentLine(organisation,OrganisationRoles.administrator) || managerRoles.hasRoleInParentLine(organisation,OrganisationRoles.rolesmanager);
  boolean userManager=managerRoles.hasRoleInParentLine(organisation,OrganisationRoles.usermanager);
  List<String> roleKeys=new ArrayList<>();
  List<String> roleValues=new ArrayList<>();
  roleKeys.add(OrganisationRoles.invitee.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.user.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.author.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.usermanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.rolesmanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.groupmanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.poolmanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.curriculummanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.lecturemanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.qualitymanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.linemanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.principal.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.administrator.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.learnresourcemanager.name());
  roleValues.add(translate(""String_Node_Str""));
  MultipleSelectionElement rolesEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"" + (++counter),""String_Node_Str"",formLayout,roleKeys.toArray(new String[roleKeys.size()]),roleValues.toArray(new String[roleValues.size()]));
  if (organisations.size() > 1 || !organisation.getIdentifier().equals(OrganisationService.DEFAULT_ORGANISATION_IDENTIFIER)) {
    rolesEl.setLabel(""String_Node_Str"",new String[]{organisation.getDisplayName()});
  }
  rolesEl.setUserObject(new RolesElement(roleKeys,organisation,rolesEl));
  if (admin) {
    rolesEl.setEnabled(new HashSet<>(roleKeys),true);
  }
 else   if (userManager) {
    Set<String> enabled=new HashSet<>();
    enabled.add(OrganisationRoles.invitee.name());
    enabled.add(OrganisationRoles.user.name());
    enabled.add(OrganisationRoles.author.name());
    rolesEl.setEnabled(enabled,true);
    Set<String> disabled=new HashSet<>(roleKeys);
    disabled.removeAll(enabled);
    rolesEl.setEnabled(disabled,false);
  }
 else {
    rolesEl.setEnabled(new HashSet<>(roleKeys),false);
  }
  rolesEls.add(rolesEl);
}","private void initFormRoles(FormItemContainer formLayout,Organisation organisation){
  boolean admin=managerRoles.hasRoleInParentLine(organisation,OrganisationRoles.administrator) || managerRoles.hasRoleInParentLine(organisation,OrganisationRoles.rolesmanager);
  boolean userManager=managerRoles.hasRoleInParentLine(organisation,OrganisationRoles.usermanager);
  List<String> roleKeys=new ArrayList<>();
  List<String> roleValues=new ArrayList<>();
  roleKeys.add(OrganisationRoles.invitee.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.user.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.author.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.usermanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.rolesmanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.groupmanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.poolmanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.curriculummanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.lecturemanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.qualitymanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.linemanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.learnresourcemanager.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.principal.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.administrator.name());
  roleValues.add(translate(""String_Node_Str""));
  roleKeys.add(OrganisationRoles.sysadmin.name());
  roleValues.add(translate(""String_Node_Str""));
  MultipleSelectionElement rolesEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"" + (++counter),""String_Node_Str"",formLayout,roleKeys.toArray(new String[roleKeys.size()]),roleValues.toArray(new String[roleValues.size()]));
  if (organisations.size() > 1 || !organisation.getIdentifier().equals(OrganisationService.DEFAULT_ORGANISATION_IDENTIFIER)) {
    rolesEl.setLabel(""String_Node_Str"",new String[]{organisation.getDisplayName()});
  }
  rolesEl.setUserObject(new RolesElement(roleKeys,organisation,rolesEl));
  if (admin) {
    rolesEl.setEnabled(new HashSet<>(roleKeys),true);
  }
 else   if (userManager) {
    Set<String> enabled=new HashSet<>();
    enabled.add(OrganisationRoles.invitee.name());
    enabled.add(OrganisationRoles.user.name());
    enabled.add(OrganisationRoles.author.name());
    rolesEl.setEnabled(enabled,true);
    Set<String> disabled=new HashSet<>(roleKeys);
    disabled.removeAll(enabled);
    rolesEl.setEnabled(disabled,false);
  }
 else {
    rolesEl.setEnabled(new HashSet<>(roleKeys),false);
  }
  rolesEls.add(rolesEl);
}"
69265,"public MembersCourseNodeRunController(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,ModuleConfiguration config){
  super(ureq,wControl);
  CourseEnvironment courseEnv=userCourseEnv.getCourseEnvironment();
  this.coaches=new ArrayList<>();
  this.participants=new ArrayList<>();
  boolean showOwners=config.getBooleanSafe(MembersCourseNode.CONFIG_KEY_SHOWOWNER);
  MembersCourseNodeConfiguration nodeConfig=(MembersCourseNodeConfiguration)CourseNodeFactory.getInstance().getCourseNodeConfiguration(""String_Node_Str"");
  boolean deduplicateList=nodeConfig.isDeduplicateList();
  String emailFct=config.getStringValue(MembersCourseNode.CONFIG_KEY_EMAIL_FUNCTION,MembersCourseNode.EMAIL_FUNCTION_COACH_ADMIN);
  boolean canEmail=MembersCourseNode.EMAIL_FUNCTION_ALL.equals(emailFct) || userCourseEnv.isAdmin() || userCourseEnv.isCoach();
  String downloadFct=config.getStringValue(MembersCourseNode.CONFIG_KEY_DOWNLOAD_FUNCTION,MembersCourseNode.EMAIL_FUNCTION_COACH_ADMIN);
  boolean canDownload=MembersCourseNode.EMAIL_FUNCTION_ALL.equals(downloadFct) || userCourseEnv.isAdmin() || userCourseEnv.isCoach();
  if (showOwners) {
    RepositoryEntry courseRepositoryEntry=courseEnv.getCourseGroupManager().getCourseEntry();
    owners=MembersHelpers.getOwners(repositoryService,courseRepositoryEntry);
  }
 else {
    owners=Collections.emptyList();
  }
  boolean showCoaches=false;
  if (config.anyTrue(MembersCourseNode.CONFIG_KEY_COACHES_ALL,MembersCourseNode.CONFIG_KEY_COACHES_COURSE) || config.hasAnyOf(MembersCourseNode.CONFIG_KEY_COACHES_GROUP,MembersCourseNode.CONFIG_KEY_COACHES_AREA)) {
    CourseGroupManager cgm=courseEnv.getCourseGroupManager();
    MembersHelpers.addCoaches(config,cgm,businessGroupService,coaches);
    showCoaches=true;
  }
  boolean showParticipants=false;
  if (config.anyTrue(MembersCourseNode.CONFIG_KEY_PARTICIPANTS_ALL,MembersCourseNode.CONFIG_KEY_PARTICIPANTS_COURSE) || config.hasAnyOf(MembersCourseNode.CONFIG_KEY_PARTICIPANTS_GROUP,MembersCourseNode.CONFIG_KEY_PARTICIPANTS_AREA)) {
    CourseGroupManager cgm=courseEnv.getCourseGroupManager();
    MembersHelpers.addParticipants(config,cgm,businessGroupService,participants);
    showParticipants=true;
  }
  membersDisplayRunController=new MembersDisplayRunController(ureq,wControl,getTranslator(),courseEnv,null,owners,coaches,participants,new ArrayList<>(),canEmail,canDownload,deduplicateList,showOwners,showCoaches,showParticipants,false,true);
  listenTo(membersDisplayRunController);
  putInitialPanel(membersDisplayRunController.getInitialComponent());
}","public MembersCourseNodeRunController(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,ModuleConfiguration config){
  super(ureq,wControl);
  CourseEnvironment courseEnv=userCourseEnv.getCourseEnvironment();
  List<Identity> owners;
  List<Identity> coaches=new ArrayList<>();
  List<Identity> participants=new ArrayList<>();
  boolean showOwners=config.getBooleanSafe(MembersCourseNode.CONFIG_KEY_SHOWOWNER);
  MembersCourseNodeConfiguration nodeConfig=(MembersCourseNodeConfiguration)CourseNodeFactory.getInstance().getCourseNodeConfiguration(""String_Node_Str"");
  boolean deduplicateList=nodeConfig.isDeduplicateList();
  String emailFct=config.getStringValue(MembersCourseNode.CONFIG_KEY_EMAIL_FUNCTION,MembersCourseNode.EMAIL_FUNCTION_COACH_ADMIN);
  boolean canEmail=MembersCourseNode.EMAIL_FUNCTION_ALL.equals(emailFct) || userCourseEnv.isAdmin() || userCourseEnv.isCoach();
  String downloadFct=config.getStringValue(MembersCourseNode.CONFIG_KEY_DOWNLOAD_FUNCTION,MembersCourseNode.EMAIL_FUNCTION_COACH_ADMIN);
  boolean canDownload=MembersCourseNode.EMAIL_FUNCTION_ALL.equals(downloadFct) || userCourseEnv.isAdmin() || userCourseEnv.isCoach();
  if (showOwners) {
    RepositoryEntry courseRepositoryEntry=courseEnv.getCourseGroupManager().getCourseEntry();
    owners=MembersHelpers.getOwners(repositoryService,courseRepositoryEntry);
  }
 else {
    owners=Collections.emptyList();
  }
  boolean showCoaches=false;
  if (config.anyTrue(MembersCourseNode.CONFIG_KEY_COACHES_ALL,MembersCourseNode.CONFIG_KEY_COACHES_COURSE) || config.hasAnyOf(MembersCourseNode.CONFIG_KEY_COACHES_GROUP,MembersCourseNode.CONFIG_KEY_COACHES_AREA)) {
    CourseGroupManager cgm=courseEnv.getCourseGroupManager();
    MembersHelpers.addCoaches(config,cgm,businessGroupService,coaches);
    showCoaches=true;
  }
  boolean showParticipants=false;
  if (config.anyTrue(MembersCourseNode.CONFIG_KEY_PARTICIPANTS_ALL,MembersCourseNode.CONFIG_KEY_PARTICIPANTS_COURSE) || config.hasAnyOf(MembersCourseNode.CONFIG_KEY_PARTICIPANTS_GROUP,MembersCourseNode.CONFIG_KEY_PARTICIPANTS_AREA)) {
    CourseGroupManager cgm=courseEnv.getCourseGroupManager();
    MembersHelpers.addParticipants(config,cgm,businessGroupService,participants);
    showParticipants=true;
  }
  membersDisplayRunController=new MembersDisplayRunController(ureq,wControl,getTranslator(),courseEnv,null,owners,coaches,participants,new ArrayList<>(),canEmail,canDownload,deduplicateList,showOwners,showCoaches,showParticipants,false,true);
  listenTo(membersDisplayRunController);
  putInitialPanel(membersDisplayRunController.getInitialComponent());
}"
69266,"public static List<Identity> retrieveCoachesFromCourseGroups(CourseGroupManager cgm){
  Set<Identity> uniq=new HashSet<Identity>();
{
    List<Identity> coaches=cgm.getCoachesFromAreas();
    uniq.addAll(coaches);
  }
{
    List<Identity> coaches=cgm.getCoachesFromBusinessGroups();
    uniq.addAll(coaches);
  }
  return new ArrayList<Identity>(uniq);
}","public static List<Identity> retrieveCoachesFromCourseGroups(CourseGroupManager cgm){
  Set<Identity> uniq=new HashSet<>();
  uniq.addAll(cgm.getCoachesFromAreas());
  uniq.addAll(cgm.getCoachesFromBusinessGroups());
  return new ArrayList<>(uniq);
}"
69267,"public static List<Identity> retrieveParticipantsFromAreas(List<Long> areaKeys,CourseGroupManager cgm){
  List<Identity> participiants=cgm.getParticipantsFromAreas(areaKeys);
  return participiants;
}","public static List<Identity> retrieveParticipantsFromAreas(List<Long> areaKeys,CourseGroupManager cgm){
  return cgm.getParticipantsFromAreas(areaKeys);
}"
69268,"public static List<Identity> retrieveCoachesFromGroups(List<Long> groupKeys,CourseGroupManager cgm){
  List<Identity> coaches=new ArrayList<Identity>(new HashSet<Identity>(cgm.getCoachesFromBusinessGroups(groupKeys)));
  return coaches;
}","public static List<Identity> retrieveCoachesFromGroups(List<Long> groupKeys,CourseGroupManager cgm){
  return new ArrayList<>(new HashSet<>(cgm.getCoachesFromBusinessGroups(groupKeys)));
}"
69269,"public static List<Identity> retrieveParticipantsFromGroups(List<Long> groupKeys,CourseGroupManager cgm){
  List<Identity> participiants=cgm.getParticipantsFromBusinessGroups(groupKeys);
  return participiants;
}","public static List<Identity> retrieveParticipantsFromGroups(List<Long> groupKeys,CourseGroupManager cgm){
  return cgm.getParticipantsFromBusinessGroups(groupKeys);
}"
69270,"public static List<Identity> retrieveParticipantsFromCourse(CourseGroupManager cgm){
  List<Identity> participiants=cgm.getParticipants();
  return participiants;
}","public static List<Identity> retrieveParticipantsFromCourse(CourseGroupManager cgm){
  return cgm.getParticipants();
}"
69271,"public static List<Identity> retrieveCoachesFromAreas(List<Long> areaKeys,CourseGroupManager cgm){
  List<Identity> coaches=cgm.getCoachesFromAreas(areaKeys);
  Set<Identity> coachesWithoutDuplicates=new HashSet<Identity>(coaches);
  coaches=new ArrayList<Identity>(coachesWithoutDuplicates);
  return coaches;
}","public static List<Identity> retrieveCoachesFromAreas(List<Long> areaKeys,CourseGroupManager cgm){
  List<Identity> coaches=cgm.getCoachesFromAreas(areaKeys);
  return new ArrayList<>(new HashSet<>(coaches));
}"
69272,"public static List<Identity> retrieveCoachesFromCourse(CourseGroupManager cgm){
  List<Identity> coaches=cgm.getCoaches();
  return coaches;
}","public static List<Identity> retrieveCoachesFromCourse(CourseGroupManager cgm){
  return cgm.getCoaches();
}"
69273,"public static List<Identity> retrieveParticipantsFromCourseGroups(CourseGroupManager cgm){
  Set<Identity> uniq=new HashSet<Identity>();
{
    List<Identity> participiants=cgm.getParticipantsFromAreas();
    uniq.addAll(participiants);
  }
{
    List<Identity> participiants=cgm.getParticipantsFromBusinessGroups();
    uniq.addAll(participiants);
  }
  return new ArrayList<Identity>(uniq);
}","public static List<Identity> retrieveParticipantsFromCourseGroups(CourseGroupManager cgm){
  Set<Identity> uniq=new HashSet<>();
  uniq.addAll(cgm.getParticipantsFromAreas());
  uniq.addAll(cgm.getParticipantsFromBusinessGroups());
  return new ArrayList<>(uniq);
}"
69274,"@Override public Identity saveDeletedByData(Identity identity,Identity doer){
  IdentityImpl reloadedIdentity=loadForUpdate(identity);
  if (reloadedIdentity != null) {
    reloadedIdentity.setDeletedBy(getDeletedByName(doer));
    reloadedIdentity.setDeletedDate(new Date());
    List<String> deletedRoles=getRolesSummaryWithResources(reloadedIdentity);
    StringBuilder deletedRoleBuffer=new StringBuilder();
    for (    String deletedRole : deletedRoles) {
      if (deletedRoleBuffer.length() > 0)       deletedRoleBuffer.append(""String_Node_Str"");
      deletedRoleBuffer.append(deletedRole);
    }
    reloadedIdentity.setDeletedRoles(deletedRoleBuffer.toString());
    reloadedIdentity=dbInstance.getCurrentEntityManager().merge(reloadedIdentity);
    dbInstance.commit();
  }
  return reloadedIdentity;
}","@Override public Identity saveDeletedByData(Identity identity,Identity doer){
  IdentityImpl reloadedIdentity=loadForUpdate(identity);
  if (reloadedIdentity != null) {
    reloadedIdentity.setDeletedBy(getDeletedByName(doer));
    reloadedIdentity.setDeletedDate(new Date());
    Collection<String> deletedRoles=new HashSet<>(getRolesSummaryWithResources(reloadedIdentity));
    StringBuilder deletedRoleBuffer=new StringBuilder();
    for (    String deletedRole : deletedRoles) {
      if (deletedRoleBuffer.length() > 0)       deletedRoleBuffer.append(""String_Node_Str"");
      deletedRoleBuffer.append(deletedRole);
    }
    reloadedIdentity.setDeletedRoles(deletedRoleBuffer.toString());
    reloadedIdentity=dbInstance.getCurrentEntityManager().merge(reloadedIdentity);
    dbInstance.commit();
  }
  return reloadedIdentity;
}"
69275,"private void appendStatistics(CorrectionIdentityRow row,AssessmentItemSession itemSession,ItemSessionState itemSessionState,AssessmentItemRef itemRef){
  row.addSession();
  if (itemSessionState.isResponded()) {
    row.addAnswered();
  }
 else {
    row.addNotAnswered();
  }
  BigDecimal manualScore=null;
  if (itemSession != null) {
    manualScore=itemSession.getManualScore();
    if (itemSession.isToReview()) {
      row.addToReview();
    }
  }
  boolean manualCorrection=model.isManualCorrection(itemRef);
  row.setManualCorrection(manualCorrection);
  if (manualCorrection) {
    if (manualScore == null) {
      row.addNotCorrected();
    }
 else {
      row.addCorrected();
    }
  }
 else   if (manualScore != null) {
    row.addCorrected();
  }
 else {
    row.addAutoCorrected();
  }
}","private void appendStatistics(CorrectionIdentityRow row,AssessmentItemSession itemSession,ItemSessionState itemSessionState,AssessmentItemRef itemRef){
  row.addSession();
  if (itemSessionState.isResponded()) {
    row.addAnswered();
  }
 else {
    row.addNotAnswered();
  }
  BigDecimal manualScore=null;
  if (itemSession != null) {
    manualScore=itemSession.getManualScore();
    if (itemSession.isToReview()) {
      row.addToReview();
    }
  }
  boolean manualCorrection=model.isManualCorrection(itemRef);
  if (!row.isManualCorrection()) {
    row.setManualCorrection(manualCorrection);
  }
  if (manualCorrection) {
    if (manualScore == null) {
      row.addNotCorrected();
    }
 else {
      row.addCorrected();
    }
  }
 else   if (manualScore != null) {
    row.addCorrected();
  }
 else {
    row.addAutoCorrected();
  }
}"
69276,"private TaxonomyLevelOverviewController doSelectTaxonomyLevel(UserRequest ureq,TaxonomyLevel taxonomyLevel){
  OLATResourceable ores=OresHelper.createOLATResourceableInstance(""String_Node_Str"",taxonomyLevel.getKey());
  WindowControl bwControl=addToHistory(ureq,ores,null);
  TaxonomyLevelOverviewController detailsLevelCtrl=new TaxonomyLevelOverviewController(ureq,bwControl,taxonomyLevel);
  listenTo(detailsLevelCtrl);
  stackPanel.pushController(taxonomyLevel.getDisplayName(),detailsLevelCtrl);
  return detailsLevelCtrl;
}","private TaxonomyLevelOverviewController doSelectTaxonomyLevel(UserRequest ureq,TaxonomyLevel taxonomyLevel){
  if (taxonomyLevel == null) {
    showWarning(""String_Node_Str"");
    loadModel(false,false);
    return null;
  }
 else {
    OLATResourceable ores=OresHelper.createOLATResourceableInstance(""String_Node_Str"",taxonomyLevel.getKey());
    WindowControl bwControl=addToHistory(ureq,ores,null);
    TaxonomyLevelOverviewController detailsLevelCtrl=new TaxonomyLevelOverviewController(ureq,bwControl,taxonomyLevel);
    listenTo(detailsLevelCtrl);
    stackPanel.pushController(taxonomyLevel.getDisplayName(),detailsLevelCtrl);
    return detailsLevelCtrl;
  }
}"
69277,"@Override public void activate(UserRequest ureq,List<ContextEntry> entries,StateEntry state){
  if (entries == null || entries.isEmpty())   return;
  String type=entries.get(0).getOLATResourceable().getResourceableTypeName();
  if (""String_Node_Str"".equalsIgnoreCase(type)) {
    Long levelKey=entries.get(0).getOLATResourceable().getResourceableId();
    List<TaxonomyLevelRow> rows=model.getObjects();
    for (    TaxonomyLevelRow row : rows) {
      if (levelKey.equals(row.getKey())) {
        List<ContextEntry> subEntries=entries.subList(1,entries.size());
        doSelectTaxonomyLevel(ureq,row).activate(ureq,subEntries,entries.get(0).getTransientState());
        break;
      }
    }
  }
}","@Override public void activate(UserRequest ureq,List<ContextEntry> entries,StateEntry state){
  if (entries == null || entries.isEmpty())   return;
  String type=entries.get(0).getOLATResourceable().getResourceableTypeName();
  if (""String_Node_Str"".equalsIgnoreCase(type)) {
    Long levelKey=entries.get(0).getOLATResourceable().getResourceableId();
    List<TaxonomyLevelRow> rows=model.getObjects();
    for (    TaxonomyLevelRow row : rows) {
      if (levelKey.equals(row.getKey())) {
        List<ContextEntry> subEntries=entries.subList(1,entries.size());
        TaxonomyLevelOverviewController ctrl=doSelectTaxonomyLevel(ureq,row);
        if (ctrl != null) {
          ctrl.activate(ureq,subEntries,entries.get(0).getTransientState());
        }
        break;
      }
    }
  }
}"
69278,"private void fillCheckbox(BGRightsOption groupRights,List<String> permissions){
  List<BGRight> selections=new ArrayList<>();
  for (  String permission : CourseRights.getAvailableRights()) {
    BGRight permissionEl=new BGRight(permission);
    boolean selected=permissions == null ? false : permissions.contains(permission);
    MultipleSelectionElement selection=createSelection(selected);
    permissionEl.setSelection(selection);
    selection.setUserObject(permissionEl);
    selections.add(permissionEl);
  }
  groupRights.setRightsEl(selections);
}","private void fillCheckbox(BGRightsRow groupRights,List<String> permissions){
  List<BGRight> selections=new ArrayList<>();
  for (  String permission : CourseRights.getAvailableRights()) {
    BGRight permissionEl=new BGRight(permission);
    boolean selected=permissions == null ? false : permissions.contains(permission);
    MultipleSelectionElement selection=createSelection(selected);
    permissionEl.setSelection(selection);
    selection.setUserObject(permissionEl);
    selections.add(permissionEl);
  }
  groupRights.setRightsEl(selections);
}"
69279,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  int colIndex=0;
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colIndex++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colIndex++));
  for (  String right : CourseRights.getAvailableRights()) {
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(right,colIndex++));
  }
  tableDataModel=new GroupsAndRightsDataModel(tableColumnModel);
  tableEl=uifactory.addTableElement(getWindowControl(),""String_Node_Str"",tableDataModel,getTranslator(),formLayout);
  FormLayoutContainer buttonsLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  buttonsLayout.setRootForm(mainForm);
  formLayout.add(""String_Node_Str"",buttonsLayout);
  if (!readOnly) {
    uifactory.addFormSubmitButton(""String_Node_Str"",buttonsLayout);
    removeAllLink=uifactory.addFormLink(""String_Node_Str"",buttonsLayout,Link.BUTTON);
  }
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  int colIndex=0;
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colIndex++,new BGRightsResourceNameRenderer()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colIndex++));
  for (  String right : CourseRights.getAvailableRights()) {
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(right,colIndex++));
  }
  tableDataModel=new GroupsAndRightsDataModel(tableColumnModel,getTranslator());
  tableEl=uifactory.addTableElement(getWindowControl(),""String_Node_Str"",tableDataModel,getTranslator(),formLayout);
  FormLayoutContainer buttonsLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  buttonsLayout.setRootForm(mainForm);
  formLayout.add(""String_Node_Str"",buttonsLayout);
  if (!readOnly) {
    uifactory.addFormSubmitButton(""String_Node_Str"",buttonsLayout);
    removeAllLink=uifactory.addFormLink(""String_Node_Str"",buttonsLayout,Link.BUTTON);
  }
}"
69280,"private MultipleSelectionElement createSelection(boolean selected){
  String name=""String_Node_Str"" + (++counter);
  MultipleSelectionElement selection=uifactory.addCheckboxesHorizontal(name,flc,keys,values);
  selection.setEnabled(!readOnly);
  flc.add(name,selection);
  if (selected) {
    selection.select(keys[0],true);
  }
  return selection;
}","private MultipleSelectionElement createSelection(boolean selected){
  String name=""String_Node_Str"" + (++counter);
  MultipleSelectionElement selection=uifactory.addCheckboxesHorizontal(name,null,flc,keys,values);
  selection.setEnabled(!readOnly);
  flc.add(name,selection);
  if (selected) {
    selection.select(keys[0],true);
  }
  return selection;
}"
69281,"private void doSaveChanges(){
  List<BGRightsOption> options=tableDataModel.getObjects();
  List<Group> groups=getAllBaseGroups();
  List<BGRights> currentRights=rightManager.findBGRights(groups,courseEntry.getOlatResource());
  Map<Group,BGRights> tutorToRightsMap=new HashMap<>();
  Map<Group,BGRights> participantToRightsMap=new HashMap<>();
  for (  BGRights right : currentRights) {
    if (right.getRole() == BGRightsRole.tutor) {
      tutorToRightsMap.put(right.getBaseGroup(),right);
    }
 else     if (right.getRole() == BGRightsRole.participant) {
      participantToRightsMap.put(right.getBaseGroup(),right);
    }
  }
  for (  BGRightsOption option : options) {
    List<String> newPermissions=option.getSelectedPermissions();
    BGRights rights=null;
    if (option.getRole() == BGRightsRole.tutor) {
      rights=tutorToRightsMap.get(option.getBaseGroup());
    }
 else     if (option.getRole() == BGRightsRole.participant) {
      rights=participantToRightsMap.get(option.getBaseGroup());
    }
    if (rights == null && newPermissions.isEmpty()) {
      continue;
    }
    List<String> currentPermissions=(rights == null ? Collections.<String>emptyList() : rights.getRights());
    if (newPermissions.containsAll(currentPermissions) && currentPermissions.containsAll(newPermissions)) {
      continue;
    }
    List<String> newPermissionsTmp=new ArrayList<>(newPermissions);
    newPermissionsTmp.removeAll(currentPermissions);
    for (    String newPermission : newPermissionsTmp) {
      rightManager.addBGRight(newPermission,option.getBaseGroup(),courseEntry.getOlatResource(),option.getRole());
    }
    currentPermissions.removeAll(newPermissions);
    for (    String currentPermission : currentPermissions) {
      rightManager.removeBGRight(currentPermission,option.getBaseGroup(),courseEntry.getOlatResource(),option.getRole());
    }
  }
}","private void doSaveChanges(){
  List<BGRightsRow> options=tableDataModel.getObjects();
  List<Group> groups=getAllBaseGroups();
  List<BGRights> currentRights=rightManager.findBGRights(groups,courseEntry.getOlatResource());
  Map<Group,BGRights> tutorToRightsMap=new HashMap<>();
  Map<Group,BGRights> participantToRightsMap=new HashMap<>();
  for (  BGRights right : currentRights) {
    if (right.getRole() == BGRightsRole.tutor) {
      tutorToRightsMap.put(right.getBaseGroup(),right);
    }
 else     if (right.getRole() == BGRightsRole.participant) {
      participantToRightsMap.put(right.getBaseGroup(),right);
    }
  }
  for (  BGRightsRow option : options) {
    List<String> newPermissions=option.getSelectedPermissions();
    BGRights rights=null;
    if (option.getRole() == BGRightsRole.tutor) {
      rights=tutorToRightsMap.get(option.getBaseGroup());
    }
 else     if (option.getRole() == BGRightsRole.participant) {
      rights=participantToRightsMap.get(option.getBaseGroup());
    }
    if (rights == null && newPermissions.isEmpty()) {
      continue;
    }
    List<String> currentPermissions=(rights == null ? Collections.<String>emptyList() : rights.getRights());
    if (newPermissions.containsAll(currentPermissions) && currentPermissions.containsAll(newPermissions)) {
      continue;
    }
    List<String> newPermissionsTmp=new ArrayList<>(newPermissions);
    newPermissionsTmp.removeAll(currentPermissions);
    for (    String newPermission : newPermissionsTmp) {
      rightManager.addBGRight(newPermission,option.getBaseGroup(),courseEntry.getOlatResource(),option.getRole());
    }
    currentPermissions.removeAll(newPermissions);
    for (    String currentPermission : currentPermissions) {
      rightManager.removeBGRight(currentPermission,option.getBaseGroup(),courseEntry.getOlatResource(),option.getRole());
    }
  }
}"
69282,"private void loadModel(){
  List<BusinessGroup> groups=businessGroupService.findBusinessGroups(null,courseEntry,0,-1);
  List<Group> baseGroups=getAllBaseGroups(groups);
  List<BGRights> currentRights=rightManager.findBGRights(baseGroups,courseEntry.getOlatResource());
  Map<Group,BGRights> tutorToRightsMap=new HashMap<>();
  Map<Group,BGRights> participantToRightsMap=new HashMap<>();
  for (  BGRights right : currentRights) {
    if (right.getRole() == BGRightsRole.tutor) {
      tutorToRightsMap.put(right.getBaseGroup(),right);
    }
 else     if (right.getRole() == BGRightsRole.participant) {
      participantToRightsMap.put(right.getBaseGroup(),right);
    }
  }
  List<BGRightsOption> options=new ArrayList<>();
  String courseName=courseEntry.getDisplayname();
  Group defGroup=repositoryService.getDefaultGroup(courseEntry);
  options.add(getRightsOption(defGroup,courseName,tutorToRightsMap.get(defGroup),BGRightsRole.tutor));
  options.add(getRightsOption(defGroup,courseName,participantToRightsMap.get(defGroup),BGRightsRole.participant));
  for (  BusinessGroup group : groups) {
    String name=group.getName();
    Group bGroup=group.getBaseGroup();
    options.add(getRightsOption(bGroup,name,tutorToRightsMap.get(bGroup),BGRightsRole.tutor));
    options.add(getRightsOption(bGroup,name,participantToRightsMap.get(bGroup),BGRightsRole.participant));
  }
  tableDataModel.setObjects(options);
}","private void loadModel(){
  List<BusinessGroup> groups=businessGroupService.findBusinessGroups(null,courseEntry,0,-1);
  List<Group> baseGroups=getAllBaseGroups(groups);
  List<BGRights> currentRights=rightManager.findBGRights(baseGroups,courseEntry.getOlatResource());
  Map<Group,BGRights> tutorToRightsMap=new HashMap<>();
  Map<Group,BGRights> participantToRightsMap=new HashMap<>();
  for (  BGRights right : currentRights) {
    if (right.getRole() == BGRightsRole.tutor) {
      tutorToRightsMap.put(right.getBaseGroup(),right);
    }
 else     if (right.getRole() == BGRightsRole.participant) {
      participantToRightsMap.put(right.getBaseGroup(),right);
    }
  }
  List<BGRightsRow> options=new ArrayList<>();
  String courseName=courseEntry.getDisplayname();
  Group defGroup=repositoryService.getDefaultGroup(courseEntry);
  options.add(getRightsOption(defGroup,courseName,tutorToRightsMap.get(defGroup),BGRightsRole.tutor,BGRightsResourceType.repositoryEntry));
  options.add(getRightsOption(defGroup,courseName,participantToRightsMap.get(defGroup),BGRightsRole.participant,BGRightsResourceType.repositoryEntry));
  for (  BusinessGroup group : groups) {
    String name=group.getName();
    Group bGroup=group.getBaseGroup();
    options.add(getRightsOption(bGroup,name,tutorToRightsMap.get(bGroup),BGRightsRole.tutor,BGRightsResourceType.businessGroup));
    options.add(getRightsOption(bGroup,name,participantToRightsMap.get(bGroup),BGRightsRole.participant,BGRightsResourceType.businessGroup));
  }
  tableDataModel.setObjects(options);
}"
69283,"private BGRightsOption getRightsOption(Group group,String name,BGRights r,BGRightsRole role){
  BGRightsOption options=new BGRightsOption(group,name,role);
  fillCheckbox(options,r == null ? null : r.getRights());
  FormLink rmLink=uifactory.addFormLink(""String_Node_Str"" + (++counter),""String_Node_Str"",""String_Node_Str"",flc,Link.LINK);
  rmLink.setUserObject(options);
  return options;
}","private BGRightsRow getRightsOption(Group group,String name,BGRights r,BGRightsRole role,BGRightsResourceType type){
  BGRightsRow options=new BGRightsRow(group,name,role,type);
  fillCheckbox(options,r == null ? null : r.getRights());
  FormLink rmLink=uifactory.addFormLink(""String_Node_Str"" + (++counter),""String_Node_Str"",""String_Node_Str"",flc,Link.LINK);
  rmLink.setUserObject(options);
  return options;
}"
69284,"protected void renderHeaderButtons(Renderer renderer,StringOutput sb,FlexiTableElementImpl ftE,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  Component searchCmp=ftE.getExtendedSearchComponent();
  if (searchCmp == null && !ftE.isExtendedSearchExpanded() && !ftE.isNumOfRowsEnabled() && !ftE.isFilterEnabled() && !ftE.isSortEnabled() && !ftE.isExportEnabled() && !ftE.isCustomizeColumns() && ftE.getAvailableRendererTypes().length <= 1) {
    return;
  }
  if (searchCmp != null && ftE.isExtendedSearchExpanded()) {
    renderer.render(searchCmp,sb,args);
  }
  sb.append(""String_Node_Str"").append(""String_Node_Str"");
  if (searchCmp == null || !ftE.isExtendedSearchExpanded()) {
    renderHeaderSearch(renderer,sb,ftE,ubu,translator,renderResult,args);
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (ftE.isNumOfRowsEnabled()) {
    int rowCount=ftE.getTableDataModel().getRowCount();
    if (rowCount == 1) {
      sb.append(rowCount).append(""String_Node_Str"").append(ftE.getTranslator().translate(""String_Node_Str""));
    }
 else     if (rowCount > 1) {
      sb.append(rowCount).append(""String_Node_Str"").append(ftE.getTranslator().translate(""String_Node_Str""));
    }
  }
  sb.append(""String_Node_Str"");
  boolean empty=ftE.getTableDataModel().getRowCount() == 0;
  String filterIndication=null;
  if (ftE.isFilterEnabled()) {
    List<FlexiTableFilter> filters=ftE.getFilters();
    if (filters != null && filters.size() > 0) {
      filterIndication=renderFilterDropdown(sb,ftE,filters);
    }
  }
  if (ftE.isSortEnabled()) {
    List<FlexiTableSort> sorts=ftE.getSorts();
    if (sorts != null && sorts.size() > 0) {
      renderSortDropdown(sb,ftE,sorts);
    }
  }
  if (ftE.getExportButton() != null && ftE.isExportEnabled()) {
    sb.append(""String_Node_Str"");
    ftE.getExportButton().setEnabled(!empty);
    renderFormItem(renderer,sb,ftE.getExportButton(),ubu,translator,renderResult,args);
    sb.append(""String_Node_Str"");
  }
  if (ftE.getCustomButton() != null && ftE.isCustomizeColumns() && (ftE.getRendererType() == null || ftE.getRendererType() == FlexiTableRendererType.classic)) {
    sb.append(""String_Node_Str"");
    renderFormItem(renderer,sb,ftE.getCustomButton(),ubu,translator,renderResult,args);
    sb.append(""String_Node_Str"");
  }
  FlexiTableRendererType[] types=ftE.getAvailableRendererTypes();
  if (types.length > 1) {
    sb.append(""String_Node_Str"");
    for (    FlexiTableRendererType type : types) {
      renderHeaderSwitchType(type,renderer,sb,ftE,ubu,translator,renderResult,args);
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  if (StringHelper.containsNonWhitespace(filterIndication)) {
    Form theForm=ftE.getRootForm();
    String dispatchId=ftE.getFormDispatchId();
    sb.append(""String_Node_Str"").append(filterIndication).append(""String_Node_Str"").append(FormJSHelper.getXHRFnCallFor(theForm,dispatchId,1,true,true,true,new NameValuePair(""String_Node_Str"",""String_Node_Str""))).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
}","protected void renderHeaderButtons(Renderer renderer,StringOutput sb,FlexiTableElementImpl ftE,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  Component searchCmp=ftE.getExtendedSearchComponent();
  if (searchCmp == null && !ftE.isExtendedSearchExpanded() && !ftE.isNumOfRowsEnabled() && !ftE.isFilterEnabled() && !ftE.isSortEnabled() && !ftE.isExportEnabled() && !ftE.isCustomizeColumns() && ftE.getAvailableRendererTypes().length <= 1) {
    return;
  }
  if (searchCmp != null && ftE.isExtendedSearchExpanded()) {
    renderer.render(searchCmp,sb,args);
  }
  sb.append(""String_Node_Str"").append(""String_Node_Str"");
  if (searchCmp == null || !ftE.isExtendedSearchExpanded()) {
    renderHeaderSearch(renderer,sb,ftE,ubu,translator,renderResult,args);
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (ftE.isNumOfRowsEnabled()) {
    int rowCount=ftE.getTableDataModel().getRowCount();
    if (rowCount == 1) {
      sb.append(rowCount).append(""String_Node_Str"").append(ftE.getTranslator().translate(""String_Node_Str""));
    }
 else     if (rowCount > 1) {
      sb.append(rowCount).append(""String_Node_Str"").append(ftE.getTranslator().translate(""String_Node_Str""));
    }
  }
  sb.append(""String_Node_Str"");
  boolean empty=ftE.getTableDataModel().getRowCount() == 0;
  String filterIndication=null;
  if (ftE.isFilterEnabled()) {
    List<FlexiTableFilter> filters=ftE.getFilters();
    if (filters != null && filters.size() > 0) {
      filterIndication=renderFilterDropdown(sb,ftE,filters);
    }
  }
  if (ftE.isSortEnabled()) {
    List<FlexiTableSort> sorts=ftE.getSorts();
    if (sorts != null && sorts.size() > 0) {
      renderSortDropdown(sb,ftE,sorts);
    }
  }
  if (ftE.getExportButton() != null && ftE.isExportEnabled()) {
    sb.append(""String_Node_Str"");
    ftE.getExportButton().setEnabled(!empty);
    renderFormItem(renderer,sb,ftE.getExportButton(),ubu,translator,renderResult,args);
    sb.append(""String_Node_Str"");
  }
  if (ftE.getCustomButton() != null && ftE.isCustomizeColumns() && (ftE.getRendererType() == null || ftE.getRendererType() == FlexiTableRendererType.classic)) {
    sb.append(""String_Node_Str"");
    renderFormItem(renderer,sb,ftE.getCustomButton(),ubu,translator,renderResult,args);
    sb.append(""String_Node_Str"");
  }
  FlexiTableRendererType[] types=ftE.getAvailableRendererTypes();
  if (types.length > 1) {
    sb.append(""String_Node_Str"");
    for (    FlexiTableRendererType type : types) {
      renderHeaderSwitchType(type,renderer,sb,ftE,ubu,translator,renderResult,args);
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  if (StringHelper.containsNonWhitespace(filterIndication)) {
    Form theForm=ftE.getRootForm();
    String dispatchId=ftE.getFormDispatchId();
    sb.append(""String_Node_Str"").append(filterIndication).append(""String_Node_Str"").append(FormJSHelper.getXHRFnCallFor(theForm,dispatchId,1,true,true,true,new NameValuePair(""String_Node_Str"",""String_Node_Str""))).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
}"
69285,"protected void renderHeaderSearch(Renderer renderer,StringOutput sb,FlexiTableElementImpl ftE,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  if (ftE.isSearchEnabled()) {
    Form theForm=ftE.getRootForm();
    String dispatchId=ftE.getFormDispatchId();
    sb.append(""String_Node_Str"");
    renderFormItem(renderer,sb,ftE.getSearchElement(),ubu,translator,renderResult,args);
    sb.append(""String_Node_Str"");
    String id=ftE.getSearchElement().getFormDispatchId();
    sb.append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(FormJSHelper.getXHRFnCallFor(theForm,dispatchId,1,true,true,true,new NameValuePair(""String_Node_Str"",""String_Node_Str""))).append(""String_Node_Str"");
    renderFormItem(renderer,sb,ftE.getSearchButton(),ubu,translator,renderResult,args);
    if (ftE.getExtendedSearchButton() != null) {
      renderFormItem(renderer,sb,ftE.getExtendedSearchButton(),ubu,translator,renderResult,args);
    }
    StringBuilder filterIndication=new StringBuilder();
    if (ftE.getExtendedFilterButton() != null) {
      ftE.getSelectedExtendedFilters().forEach(filter -> {
        if (filterIndication.length() > 0)         filterIndication.append(""String_Node_Str"");
        filterIndication.append(filter.getLabel());
      }
);
      renderFormItem(renderer,sb,ftE.getExtendedFilterButton(),ubu,translator,renderResult,args);
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    if (filterIndication.length() > 0) {
      sb.append(""String_Node_Str"").append(filterIndication).append(""String_Node_Str"").append(FormJSHelper.getXHRFnCallFor(theForm,dispatchId,1,true,true,true,new NameValuePair(""String_Node_Str"",""String_Node_Str""))).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    }
  }
 else   if (ftE.getExtendedSearchButton() != null) {
    renderFormItem(renderer,sb,ftE.getExtendedSearchButton(),ubu,translator,renderResult,args);
  }
}","protected void renderHeaderSearch(Renderer renderer,StringOutput sb,FlexiTableElementImpl ftE,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  if (ftE.isSearchEnabled()) {
    Form theForm=ftE.getRootForm();
    String dispatchId=ftE.getFormDispatchId();
    sb.append(""String_Node_Str"");
    renderFormItem(renderer,sb,ftE.getSearchElement(),ubu,translator,renderResult,args);
    sb.append(""String_Node_Str"");
    String id=ftE.getSearchElement().getFormDispatchId();
    sb.append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(FormJSHelper.getXHRFnCallFor(theForm,dispatchId,1,true,true,true,new NameValuePair(""String_Node_Str"",""String_Node_Str""))).append(""String_Node_Str"");
    renderFormItem(renderer,sb,ftE.getSearchButton(),ubu,translator,renderResult,args);
    if (ftE.getExtendedSearchButton() != null) {
      renderFormItem(renderer,sb,ftE.getExtendedSearchButton(),ubu,translator,renderResult,args);
    }
    StringBuilder filterIndication=new StringBuilder();
    if (ftE.getExtendedFilterButton() != null) {
      ftE.getSelectedExtendedFilters().forEach(filter -> {
        if (filterIndication.length() > 0)         filterIndication.append(""String_Node_Str"");
        filterIndication.append(filter.getLabel());
      }
);
      renderFormItem(renderer,sb,ftE.getExtendedFilterButton(),ubu,translator,renderResult,args);
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    if (filterIndication.length() > 0) {
      sb.append(""String_Node_Str"").append(filterIndication).append(""String_Node_Str"").append(FormJSHelper.getXHRFnCallFor(theForm,dispatchId,1,true,true,true,new NameValuePair(""String_Node_Str"",""String_Node_Str""))).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"");
    }
  }
 else   if (ftE.getExtendedSearchButton() != null) {
    renderFormItem(renderer,sb,ftE.getExtendedSearchButton(),ubu,translator,renderResult,args);
  }
}"
69286,"/** 
 * This is a convenience method to log out. IMPORTANT: This method initiates a redirect and RETURN. Make sure you return the call hierarchy gracefully. Most of all, don't touch HttpServletRequest or the Session after you call this method.
 * @param ureq
 */
public static void doLogout(UserRequest ureq){
  if (ureq == null)   return;
  boolean wasGuest=false;
  UserSession usess=ureq.getUserSession();
  if (usess != null && usess.getRoles() != null) {
    wasGuest=usess.getRoles().isGuestOnly();
  }
  String lang=I18nManager.getInstance().getLocaleKey(ureq.getLocale());
  HttpSession session=ureq.getHttpReq().getSession(false);
  if (session != null) {
    try {
      session.invalidate();
      deleteShibsessionCookie(ureq);
    }
 catch (    IllegalStateException ise) {
    }
  }
  String setWarning=wasGuest ? ""String_Node_Str"" : ""String_Node_Str"";
  ureq.getDispatchResult().setResultingMediaResource(new RedirectMediaResource(WebappHelper.getServletContextPath() + ""String_Node_Str"" + lang+ setWarning));
}","/** 
 * This is a convenience method to log out. IMPORTANT: This method initiates a redirect and RETURN. Make sure you return the call hierarchy gracefully. Most of all, don't touch HttpServletRequest or the Session after you call this method.
 * @param ureq
 */
public static void doLogout(UserRequest ureq){
  if (ureq == null)   return;
  boolean wasGuest=false;
  UserSession usess=ureq.getUserSession();
  if (usess != null && usess.getRoles() != null) {
    wasGuest=usess.getRoles().isGuestOnly();
  }
  String lang=CoreSpringFactory.getImpl(I18nModule.class).getLocaleKey(ureq.getLocale());
  HttpSession session=ureq.getHttpReq().getSession(false);
  if (session != null) {
    try {
      session.invalidate();
      deleteShibsessionCookie(ureq);
    }
 catch (    IllegalStateException ise) {
    }
  }
  String setWarning=wasGuest ? ""String_Node_Str"" : ""String_Node_Str"";
  ureq.getDispatchResult().setResultingMediaResource(new RedirectMediaResource(WebappHelper.getServletContextPath() + ""String_Node_Str"" + lang+ setWarning));
}"
69287,"public static int doInvitationLogin(String invitationToken,UserRequest ureq,Locale locale){
  InvitationDAO invitationDao=CoreSpringFactory.getImpl(InvitationDAO.class);
  boolean hasPolicies=invitationDao.hasInvitations(invitationToken,new Date());
  if (!hasPolicies) {
    return LOGIN_DENIED;
  }
  UserManager um=UserManager.getInstance();
  BaseSecurity securityManager=BaseSecurityManager.getInstance();
  GroupDAO groupDao=CoreSpringFactory.getImpl(GroupDAO.class);
  Invitation invitation=invitationDao.findInvitation(invitationToken);
  if (invitation == null) {
    return LOGIN_DENIED;
  }
  Identity identity=um.findIdentityByEmail(invitation.getMail());
  if (identity != null) {
    SecurityGroup allUsers=securityManager.findSecurityGroupByName(Constants.GROUP_OLATUSERS);
    if (securityManager.isIdentityInSecurityGroup(identity,allUsers)) {
      return LOGIN_DENIED;
    }
 else {
      if (!groupDao.hasRole(invitation.getBaseGroup(),identity,GroupRoles.invitee.name())) {
        groupDao.addMembershipTwoWay(invitation.getBaseGroup(),identity,GroupRoles.invitee.name());
        DBFactory.getInstance().commit();
      }
      int result=doLogin(identity,BaseSecurityModule.getDefaultAuthProviderIdentifier(),ureq);
      if (ureq.getUserSession().getRoles().isInvitee()) {
        return result;
      }
      return LOGIN_DENIED;
    }
  }
  Collection<String> supportedLanguages=I18nModule.getEnabledLanguageKeys();
  if (locale == null || !supportedLanguages.contains(locale.toString())) {
    locale=I18nModule.getDefaultLocale();
  }
  Identity invitee=invitationDao.createIdentityFrom(invitation,locale);
  return doLogin(invitee,BaseSecurityModule.getDefaultAuthProviderIdentifier(),ureq);
}","public static int doInvitationLogin(String invitationToken,UserRequest ureq,Locale locale){
  InvitationDAO invitationDao=CoreSpringFactory.getImpl(InvitationDAO.class);
  boolean hasPolicies=invitationDao.hasInvitations(invitationToken,new Date());
  if (!hasPolicies) {
    return LOGIN_DENIED;
  }
  UserManager um=UserManager.getInstance();
  BaseSecurity securityManager=BaseSecurityManager.getInstance();
  GroupDAO groupDao=CoreSpringFactory.getImpl(GroupDAO.class);
  Invitation invitation=invitationDao.findInvitation(invitationToken);
  if (invitation == null) {
    return LOGIN_DENIED;
  }
  Identity identity=um.findIdentityByEmail(invitation.getMail());
  if (identity != null) {
    SecurityGroup allUsers=securityManager.findSecurityGroupByName(Constants.GROUP_OLATUSERS);
    if (securityManager.isIdentityInSecurityGroup(identity,allUsers)) {
      return LOGIN_DENIED;
    }
 else {
      if (!groupDao.hasRole(invitation.getBaseGroup(),identity,GroupRoles.invitee.name())) {
        groupDao.addMembershipTwoWay(invitation.getBaseGroup(),identity,GroupRoles.invitee.name());
        DBFactory.getInstance().commit();
      }
      int result=doLogin(identity,BaseSecurityModule.getDefaultAuthProviderIdentifier(),ureq);
      if (ureq.getUserSession().getRoles().isInvitee()) {
        return result;
      }
      return LOGIN_DENIED;
    }
  }
  Collection<String> supportedLanguages=CoreSpringFactory.getImpl(I18nModule.class).getEnabledLanguageKeys();
  if (locale == null || !supportedLanguages.contains(locale.toString())) {
    locale=I18nModule.getDefaultLocale();
  }
  Identity invitee=invitationDao.createIdentityFrom(invitation,locale);
  return doLogin(invitee,BaseSecurityModule.getDefaultAuthProviderIdentifier(),ureq);
}"
69288,"private void gatherItems(Identity participant,Publisher p,CourseEnvironment courseEnv,CourseNode node){
  Path folderRoot=Paths.get(courseEnv.getCourseBaseContainer().getRelPath(),PFManager.FILENAME_PARTICIPANTFOLDER,node.getIdent(),pfManager.getIdFolderName(participant));
  final List<FileInfo> fInfos=FolderManager.getFileInfos(folderRoot.toString(),compareDate);
  SubscriptionListItem subListItem;
  for (Iterator<FileInfo> it_infos=fInfos.iterator(); it_infos.hasNext(); ) {
    FileInfo fi=it_infos.next();
    MetaInfo metaInfo=fi.getMetaInfo();
    String filePath=fi.getRelPath();
    Date modDate=fi.getLastModified();
    String action=""String_Node_Str"";
    try {
      Path basepath=courseEnv.getCourseBaseContainer().getBasefile().toPath();
      Path completepath=Paths.get(basepath.toString(),PFManager.FILENAME_PARTICIPANTFOLDER,node.getIdent(),pfManager.getIdFolderName(participant),filePath);
      BasicFileAttributes attrs=Files.readAttributes(completepath,BasicFileAttributes.class);
      if (attrs.creationTime().toMillis() < attrs.lastModifiedTime().toMillis()) {
        action=""String_Node_Str"";
      }
    }
 catch (    IOException ioe) {
      log.error(""String_Node_Str"",ioe);
    }
    String forby=translator.translate(""String_Node_Str"" + (filePath.contains(PFManager.FILENAME_DROPBOX) ? ""String_Node_Str"" : ""String_Node_Str""));
    String desc=translator.translate(""String_Node_Str"" + action,new String[]{filePath,forby,participant.getName()});
    String businessPath=p.getBusinessPath();
    String urlToSend=BusinessControlFactory.getInstance().getURLFromBusinessPathString(businessPath);
    String iconCssClass=null;
    if (metaInfo != null) {
      iconCssClass=metaInfo.getIconCssClass();
    }
    if (metaInfo != null && !metaInfo.getName().startsWith(""String_Node_Str"")) {
      subListItem=new SubscriptionListItem(desc,urlToSend,businessPath,modDate,iconCssClass);
      items.add(subListItem);
    }
  }
}","private void gatherItems(Identity participant,Publisher p,CourseEnvironment courseEnv,CourseNode node){
  Path folderRoot=Paths.get(courseEnv.getCourseBaseContainer().getRelPath(),PFManager.FILENAME_PARTICIPANTFOLDER,node.getIdent(),pfManager.getIdFolderName(participant));
  final List<FileInfo> fInfos=FolderManager.getFileInfos(folderRoot.toString(),compareDate);
  SubscriptionListItem subListItem;
  for (Iterator<FileInfo> it_infos=fInfos.iterator(); it_infos.hasNext(); ) {
    FileInfo fi=it_infos.next();
    MetaInfo metaInfo=fi.getMetaInfo();
    String filePath=fi.getRelPath();
    Date modDate=fi.getLastModified();
    String action=""String_Node_Str"";
    try {
      Path basepath=courseEnv.getCourseBaseContainer().getBasefile().toPath();
      Path completepath=Paths.get(basepath.toString(),PFManager.FILENAME_PARTICIPANTFOLDER,node.getIdent(),pfManager.getIdFolderName(participant),filePath);
      BasicFileAttributes attrs=Files.readAttributes(completepath,BasicFileAttributes.class);
      if (attrs.creationTime().toMillis() < attrs.lastModifiedTime().toMillis()) {
        action=""String_Node_Str"";
      }
    }
 catch (    IOException ioe) {
      log.error(""String_Node_Str"",ioe);
    }
    String forby=translator.translate(""String_Node_Str"" + (filePath.contains(PFManager.FILENAME_DROPBOX) ? ""String_Node_Str"" : ""String_Node_Str""));
    String userDisplayName=userManager.getUserDisplayName(participant);
    String desc=translator.translate(""String_Node_Str"" + action,new String[]{filePath,forby,userDisplayName});
    String businessPath=p.getBusinessPath();
    String urlToSend=BusinessControlFactory.getInstance().getURLFromBusinessPathString(businessPath);
    String iconCssClass=null;
    if (metaInfo != null) {
      iconCssClass=metaInfo.getIconCssClass();
    }
    if (metaInfo != null && !metaInfo.getName().startsWith(""String_Node_Str"")) {
      subListItem=new SubscriptionListItem(desc,urlToSend,businessPath,modDate,iconCssClass);
      items.add(subListItem);
    }
  }
}"
69289,"public PFNotifications(Subscriber subscriber,Locale locale,Date compareDate,PFManager pfManager,NotificationsManager notificationsManager){
  this.subscriber=subscriber;
  this.compareDate=compareDate;
  this.notificationsManager=notificationsManager;
  this.pfManager=pfManager;
  translator=Util.createPackageTranslator(PFRunController.class,locale);
}","public PFNotifications(Subscriber subscriber,Locale locale,Date compareDate,PFManager pfManager,NotificationsManager notificationsManager,UserManager userManager){
  this.subscriber=subscriber;
  this.compareDate=compareDate;
  this.notificationsManager=notificationsManager;
  this.pfManager=pfManager;
  this.userManager=userManager;
  translator=Util.createPackageTranslator(PFRunController.class,locale);
}"
69290,"@Override public SubscriptionInfo createSubscriptionInfo(Subscriber subscriber,Locale locale,Date compareDate){
  SubscriptionInfo si=null;
  Publisher p=subscriber.getPublisher();
  try {
    final Translator translator=Util.createPackageTranslator(PFRunController.class,locale);
    PFNotifications notifications=new PFNotifications(subscriber,locale,compareDate,pfManager,notificationsManager);
    List<SubscriptionListItem> items=notifications.getItems();
    if (items.isEmpty()) {
      si=notificationsManager.getNoSubscriptionInfo();
    }
 else {
      String displayName=notifications.getDisplayname();
      String title=translator.translate(""String_Node_Str"",new String[]{displayName});
      si=new SubscriptionInfo(subscriber.getKey(),p.getType(),new TitleItem(title,CSS_CLASS_ICON),items);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    si=notificationsManager.getNoSubscriptionInfo();
  }
  return si;
}","@Override public SubscriptionInfo createSubscriptionInfo(Subscriber subscriber,Locale locale,Date compareDate){
  SubscriptionInfo si=null;
  Publisher p=subscriber.getPublisher();
  try {
    final Translator translator=Util.createPackageTranslator(PFRunController.class,locale);
    PFNotifications notifications=new PFNotifications(subscriber,locale,compareDate,pfManager,notificationsManager,userManager);
    List<SubscriptionListItem> items=notifications.getItems();
    if (items.isEmpty()) {
      si=notificationsManager.getNoSubscriptionInfo();
    }
 else {
      String displayName=notifications.getDisplayname();
      String title=translator.translate(""String_Node_Str"",new String[]{displayName});
      si=new SubscriptionInfo(subscriber.getKey(),p.getType(),new TitleItem(title,CSS_CLASS_ICON),items);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    si=notificationsManager.getNoSubscriptionInfo();
  }
  return si;
}"
69291,"/** 
 * @param item
 * @return The media url of the item
 */
public String getMediaUrl(Item item){
  item=feedManager.loadItem(item.getKey());
  if (item == null) {
    return null;
  }
  String file=null;
  Enclosure enclosure=item.getEnclosure();
  if (enclosure != null) {
    if (helperFeed.isExternal()) {
      file=item.getEnclosure().getExternalUrl();
    }
 else     if (helperFeed.isInternal()) {
      file=this.baseUri + ""String_Node_Str"" + item.getGuid()+ ""String_Node_Str""+ MEDIA_DIR+ ""String_Node_Str""+ enclosure.getFileName();
    }
  }
  return file;
}","/** 
 * @param item
 * @return The media url of the item
 */
public String getMediaUrl(Item item){
  item=feedManager.loadItem(item.getKey());
  if (item == null) {
    return null;
  }
  String file=null;
  Enclosure enclosure=item.getEnclosure();
  if (enclosure != null) {
    if (item.getFeed().isExternal()) {
      file=item.getEnclosure().getExternalUrl();
    }
 else     if (item.getFeed().isInternal()) {
      file=this.baseUri + ""String_Node_Str"" + item.getGuid()+ ""String_Node_Str""+ MEDIA_DIR+ ""String_Node_Str""+ enclosure.getFileName();
    }
  }
  return file;
}"
69292,"/** 
 * Get the item description with media file paths that are dispatchable by a FeedMediaDispatcher.
 * @param item
 * @return 
 */
public String getItemDescriptionForBrowser(Item item){
  String itemDescription=""String_Node_Str"";
  if (item != null) {
    String description=item.getDescription();
    if (description != null) {
      if (helperFeed.isExternal()) {
        Filter xssFilter=FilterFactory.getXSSFilter(description.length() + 1);
        itemDescription=xssFilter.filter(description);
      }
 else {
        String basePath=baseUri + ""String_Node_Str"" + item.getGuid();
        Filter mediaUrlFilter=FilterFactory.getBaseURLToMediaRelativeURLFilter(basePath);
        itemDescription=mediaUrlFilter.filter(description);
      }
    }
    itemDescription=Formatter.formatLatexFormulas(itemDescription);
  }
  return itemDescription;
}","/** 
 * Get the item description with media file paths that are dispatchable by a FeedMediaDispatcher.
 * @param item
 * @return 
 */
public String getItemDescriptionForBrowser(Item item){
  String itemDescription=""String_Node_Str"";
  if (item != null) {
    String description=item.getDescription();
    if (description != null) {
      if (item.getFeed().isExternal()) {
        Filter xssFilter=FilterFactory.getXSSFilter(description.length() + 1);
        itemDescription=xssFilter.filter(description);
      }
 else {
        String basePath=baseUri + ""String_Node_Str"" + item.getGuid();
        Filter mediaUrlFilter=FilterFactory.getBaseURLToMediaRelativeURLFilter(basePath);
        itemDescription=mediaUrlFilter.filter(description);
      }
    }
    itemDescription=Formatter.formatLatexFormulas(itemDescription);
  }
  return itemDescription;
}"
69293,"/** 
 * @param item the target item for the jumpInLink null if not want to refer to a specific post
 * @return The jump in link
 */
public String getJumpInLink(Item item){
  String jumpInLink=null;
  RepositoryManager resMgr=RepositoryManager.getInstance();
  if (courseId != null && nodeId != null) {
    OLATResourceable oresCourse=OLATResourceManager.getInstance().findResourceable(courseId,CourseModule.getCourseTypeName());
    OLATResourceable oresNode=OresHelper.createOLATResourceableInstance(""String_Node_Str"",Long.valueOf(nodeId));
    RepositoryEntry repositoryEntry=resMgr.lookupRepositoryEntry(oresCourse,false);
    List<ContextEntry> ces=new ArrayList<>();
    ces.add(BusinessControlFactory.getInstance().createContextEntry(repositoryEntry));
    ces.add(BusinessControlFactory.getInstance().createContextEntry(oresNode));
    jumpInLink=BusinessControlFactory.getInstance().getAsURIString(ces,false);
  }
 else {
    RepositoryEntry repositoryEntry=resMgr.lookupRepositoryEntry(helperFeed,false);
    if (repositoryEntry != null) {
      ContextEntry ce=BusinessControlFactory.getInstance().createContextEntry(repositoryEntry);
      jumpInLink=BusinessControlFactory.getInstance().getAsURIString(Collections.singletonList(ce),false);
    }
 else {
      final BusinessControlFactory bCF=BusinessControlFactory.getInstance();
      String feedBP=LiveBlogArtefactHandler.LIVEBLOG + helperFeed.getResourceableId() + ""String_Node_Str"";
      final List<ContextEntry> ceList=bCF.createCEListFromString(feedBP);
      jumpInLink=bCF.getAsURIString(ceList,true);
    }
  }
  if (item != null && jumpInLink != null) {
    jumpInLink+=""String_Node_Str"" + item.getKey() + ""String_Node_Str"";
  }
  return jumpInLink;
}","/** 
 * @param item the target item for the jumpInLink null if not want to refer to a specific post
 * @return The jump in link
 */
public String getJumpInLink(Item item){
  String jumpInLink=null;
  RepositoryManager resMgr=RepositoryManager.getInstance();
  if (courseId != null && nodeId != null) {
    OLATResourceable oresCourse=OLATResourceManager.getInstance().findResourceable(courseId,CourseModule.getCourseTypeName());
    OLATResourceable oresNode=OresHelper.createOLATResourceableInstance(""String_Node_Str"",Long.valueOf(nodeId));
    RepositoryEntry repositoryEntry=resMgr.lookupRepositoryEntry(oresCourse,false);
    List<ContextEntry> ces=new ArrayList<>();
    ces.add(BusinessControlFactory.getInstance().createContextEntry(repositoryEntry));
    ces.add(BusinessControlFactory.getInstance().createContextEntry(oresNode));
    jumpInLink=BusinessControlFactory.getInstance().getAsURIString(ces,false);
  }
 else {
    RepositoryEntry repositoryEntry=resMgr.lookupRepositoryEntry(item.getFeed(),false);
    if (repositoryEntry != null) {
      ContextEntry ce=BusinessControlFactory.getInstance().createContextEntry(repositoryEntry);
      jumpInLink=BusinessControlFactory.getInstance().getAsURIString(Collections.singletonList(ce),false);
    }
 else {
      final BusinessControlFactory bCF=BusinessControlFactory.getInstance();
      String feedBP=LiveBlogArtefactHandler.LIVEBLOG + item.getFeed().getResourceableId() + ""String_Node_Str"";
      final List<ContextEntry> ceList=bCF.createCEListFromString(feedBP);
      jumpInLink=bCF.getAsURIString(ceList,true);
    }
  }
  if (item != null && jumpInLink != null) {
    jumpInLink+=""String_Node_Str"" + item.getKey() + ""String_Node_Str"";
  }
  return jumpInLink;
}"
69294,"/** 
 * Set the base uri of an internal feed. <br> E.g http://my.olat.org/olat/feed/ident/[IDKEY]/token/[TOKEN]/id/[ORESID]
 */
public void setURIs(){
  if (helperFeed.isInternal()) {
    baseUri=FeedManager.getInstance().getFeedBaseUri(helperFeed,identity,courseId,nodeId);
    feedUrl=baseUri + ""String_Node_Str"" + FeedManager.RSS_FEED_NAME;
  }
 else   if (helperFeed.isExternal()) {
    baseUri=FeedManager.getInstance().getFeedBaseUri(helperFeed,identity,courseId,nodeId);
    feedUrl=helperFeed.getExternalFeedUrl();
  }
 else {
    baseUri=FeedManager.getInstance().getFeedBaseUri(helperFeed,identity,courseId,nodeId);
    feedUrl=null;
    helperFeed.setExternalImageURL(null);
  }
}","/** 
 * Set the base uri of an internal feed. <br> E.g http://my.olat.org/olat/feed/ident/[IDKEY]/token/[TOKEN]/id/[ORESID]
 * @param feed 
 */
public void setURIs(Feed feed){
  baseUri=FeedManager.getInstance().getFeedBaseUri(feed,identity,courseId,nodeId);
  if (feed.isInternal()) {
    feedUrl=baseUri + ""String_Node_Str"" + FeedManager.RSS_FEED_NAME;
  }
 else   if (feed.isExternal()) {
    feedUrl=feed.getExternalFeedUrl();
  }
 else {
    feedUrl=null;
  }
}"
69295,"/** 
 * The item content with media file paths that are dispatchable by a FeedMediaDispatcher.
 * @param item
 * @return
 */
public String getItemContentForBrowser(Item item){
  String itemContent=""String_Node_Str"";
  if (item != null) {
    String content=item.getContent();
    if (content != null) {
      if (helperFeed.isExternal()) {
        Filter xssFilter=FilterFactory.getXSSFilter(content.length() + 1);
        itemContent=xssFilter.filter(content);
      }
 else {
        String basePath=baseUri + ""String_Node_Str"" + item.getGuid();
        Filter mediaUrlFilter=FilterFactory.getBaseURLToMediaRelativeURLFilter(basePath);
        itemContent=mediaUrlFilter.filter(content);
      }
    }
  }
  return itemContent;
}","/** 
 * The item content with media file paths that are dispatchable by a FeedMediaDispatcher.
 * @param item
 * @return
 */
public String getItemContentForBrowser(Item item){
  String itemContent=""String_Node_Str"";
  if (item != null) {
    String content=item.getContent();
    if (content != null) {
      if (item.getFeed().isExternal()) {
        Filter xssFilter=FilterFactory.getXSSFilter(content.length() + 1);
        itemContent=xssFilter.filter(content);
      }
 else {
        String basePath=baseUri + ""String_Node_Str"" + item.getGuid();
        Filter mediaUrlFilter=FilterFactory.getBaseURLToMediaRelativeURLFilter(basePath);
        itemContent=mediaUrlFilter.filter(content);
      }
    }
  }
  return itemContent;
}"
69296,"/** 
 * Use this constructor if no internationalization properties are required
 * @param feed
 * @param identityKey
 */
FeedViewHelper(Feed feed,Identity identity,Long courseId,String nodeId){
  this.helperFeed=feed;
  this.identity=identity;
  this.courseId=courseId;
  this.nodeId=nodeId;
  this.setURIs();
}","/** 
 * Use this constructor if no internationalization properties are required
 * @param feed
 * @param identityKey
 */
FeedViewHelper(Feed feed,Identity identity,Long courseId,String nodeId){
  this.identity=identity;
  this.courseId=courseId;
  this.nodeId=nodeId;
  this.setURIs(feed);
}"
69297,"@Override public Feed updateFeedMode(Boolean external,Feed feed){
  if (feed == null)   return null;
  Feed reloaded=feedDAO.loadFeed(feed);
  if (reloaded == null)   return null;
  if (external == null || feed.isUndefined() || external.booleanValue() != feed.getExternal().booleanValue()) {
    itemDAO.removeItems(feed);
  }
  reloaded.setExternal(external);
  return updateFeed(reloaded);
}","@Override public Feed updateFeedMode(Boolean external,Feed feed){
  if (feed == null)   return null;
  Feed reloaded=feedDAO.loadFeed(feed);
  if (reloaded == null)   return null;
  if (external == null || feed.isUndefined() || external.booleanValue() != feed.getExternal().booleanValue()) {
    itemDAO.removeItems(feed);
    reloaded.setExternalImageURL(null);
  }
  reloaded.setExternal(external);
  return updateFeed(reloaded);
}"
69298,"/** 
 * @see org.olat.core.gui.control.DefaultController#event(org.olat.core.gui.UserRequest,org.olat.core.gui.control.Controller,org.olat.core.gui.control.Event)
 */
protected void event(UserRequest ureq,Controller source,Event event){
  feedResource=feedManager.loadFeed(feedResource);
  accessibleItems=feedManager.loadFilteredAndSortedItems(feedResource,callback,ureq.getIdentity());
  if (source == cmc) {
    if (event.equals(CloseableModalController.CLOSE_MODAL_EVENT)) {
      removeAsListenerAndDispose(cmc);
      cmc=null;
      removeAsListenerAndDispose(itemFormCtr);
      itemFormCtr=null;
      cleanupTmpItemMediaDir(currentItem);
      if (!feedManager.hasItems(feedResource)) {
        feedResource=feedManager.updateFeedMode(null,feedResource);
        makeInternalAndExternalButtons();
      }
      feedManager.releaseLock(lock);
    }
  }
 else   if (source == confirmDialogCtr && DialogBoxUIFactory.isYesEvent(event)) {
    Item item=(Item)((DialogBoxController)source).getUserObject();
    lock=feedManager.acquireLock(feedResource,item,getIdentity());
    if (lock.isSuccess()) {
      naviCtr.remove(item);
      feedResource=feedManager.deleteItem(item);
      deleteButtons.remove(source);
      for (      Link editButton : editButtons) {
        if (item.equals(editButton.getUserObject())) {
          editButtons.remove(editButton);
          break;
        }
      }
      if (!feedManager.hasItems(feedResource)) {
        makeInternalAndExternalButtons();
        fireEvent(ureq,ItemsController.FEED_INFO_IS_DIRTY_EVENT);
      }
 else {
        if (callback.mayEditItems() || callback.mayCreateItems()) {
          createEditButtons(ureq,feedResource);
        }
        createCommentsAndRatingsLinks(ureq,feedResource);
      }
      vcItems.setDirty(true);
      mainPanel.setContent(vcItems);
      feedManager.releaseLock(lock);
      lock=null;
      ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_DELETE,getClass(),LoggingResourceable.wrap(item));
    }
 else {
      String fullName=userManager.getUserDisplayName(lock.getOwner());
      showInfo(""String_Node_Str"",fullName);
    }
  }
 else   if (source == itemFormCtr) {
    if (event.equals(Event.CHANGED_EVENT) || event.equals(Event.CANCELLED_EVENT)) {
      if (event.equals(Event.CHANGED_EVENT)) {
        FileElement mediaFile=currentItem.getMediaFile();
        if (feedManager.getItemContainer(currentItem) == null) {
          naviCtr.remove(currentItem);
        }
 else {
          if (!accessibleItems.contains(currentItem)) {
            feedResource=feedManager.createItem(feedResource,currentItem,mediaFile);
            if (feedResource == null) {
              feedResource=feedManager.loadFeed(feedResource);
              if (!feedResource.isInternal() && !feedResource.isExternal() && !feedManager.hasItems(feedResource)) {
                feedResource=feedManager.updateFeedMode(Boolean.FALSE,feedResource);
                feedResource=feedManager.createItem(feedResource,currentItem,mediaFile);
              }
            }
            if (feedResource != null) {
              createButtonsForItem(ureq,feedResource,currentItem);
              createItemLink(currentItem);
              String guid=currentItem.getGuid();
              if (currentItem.getDate() != null) {
                DateComponentFactory.createDateComponentWithYear(""String_Node_Str"" + guid,currentItem.getDate(),vcItems);
              }
              createCommentsAndRatingsLink(ureq,feedResource,currentItem);
              naviCtr.add(currentItem);
              accessibleItems=feedManager.loadFilteredAndSortedItems(feedResource,callback,ureq.getIdentity());
              if (accessibleItems != null && accessibleItems.size() == 1) {
                fireEvent(ureq,ItemsController.FEED_INFO_IS_DIRTY_EVENT);
                helper.setURIs();
              }
            }
          }
 else {
            currentItem=feedManager.updateItem(currentItem,mediaFile);
            if (itemCtr != null) {
              displayItemController(ureq,currentItem);
            }
            ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_EDIT,getClass(),LoggingResourceable.wrap(currentItem));
          }
        }
        vcItems.setDirty(true);
        if (itemCtr != null) {
          itemCtr.getInitialComponent().setDirty(true);
        }
      }
 else       if (event.equals(Event.CANCELLED_EVENT)) {
        cleanupTmpItemMediaDir(currentItem);
        if (!feedManager.hasItems(feedResource)) {
          feedResource=feedManager.updateFeedMode(null,feedResource);
          makeInternalAndExternalButtons();
        }
      }
      feedManager.releaseLock(lock);
      cmc.deactivate();
      removeAsListenerAndDispose(cmc);
      cmc=null;
      removeAsListenerAndDispose(itemFormCtr);
      itemFormCtr=null;
    }
  }
 else   if (source == naviCtr && event instanceof NavigationEvent) {
    List<? extends Dated> selItems=((NavigationEvent)event).getSelectedItems();
    List<Item> items=new ArrayList<>();
    for (    Dated item : selItems) {
      if (item instanceof Item) {
        items.add((Item)item);
      }
    }
    if (callback.mayEditItems() || callback.mayCreateItems()) {
      createEditButtons(ureq,feedResource);
    }
    createCommentsAndRatingsLinks(ureq,feedResource);
    vcItems.setDirty(true);
    mainPanel.setContent(vcItems);
  }
 else   if (source == itemCtr) {
    if (event == Event.BACK_EVENT) {
      mainPanel.setContent(vcItems);
      removeAsListenerAndDispose(itemCtr);
      itemCtr=null;
    }
  }
 else   if (source instanceof UserCommentsAndRatingsController) {
    UserCommentsAndRatingsController commentsRatingsCtr=(UserCommentsAndRatingsController)source;
    if (event == UserCommentsAndRatingsController.EVENT_COMMENT_LINK_CLICKED) {
      Item item=(Item)commentsRatingsCtr.getUserObject();
      if (item != null) {
        ItemController myItemCtr=displayItemController(ureq,item);
        List<ContextEntry> entries=BusinessControlFactory.getInstance().createCEListFromResourceType(ItemController.ACTIVATION_KEY_COMMENTS);
        myItemCtr.activate(ureq,entries,null);
      }
    }
  }
  if (feedResource != null) {
    resetItems(ureq,feedResource);
  }
}","/** 
 * @see org.olat.core.gui.control.DefaultController#event(org.olat.core.gui.UserRequest,org.olat.core.gui.control.Controller,org.olat.core.gui.control.Event)
 */
protected void event(UserRequest ureq,Controller source,Event event){
  feedResource=feedManager.loadFeed(feedResource);
  accessibleItems=feedManager.loadFilteredAndSortedItems(feedResource,callback,ureq.getIdentity());
  if (source == cmc) {
    if (event.equals(CloseableModalController.CLOSE_MODAL_EVENT)) {
      removeAsListenerAndDispose(cmc);
      cmc=null;
      removeAsListenerAndDispose(itemFormCtr);
      itemFormCtr=null;
      cleanupTmpItemMediaDir(currentItem);
      if (!feedManager.hasItems(feedResource)) {
        feedResource=feedManager.updateFeedMode(null,feedResource);
        makeInternalAndExternalButtons();
      }
      feedManager.releaseLock(lock);
    }
  }
 else   if (source == confirmDialogCtr && DialogBoxUIFactory.isYesEvent(event)) {
    Item item=(Item)((DialogBoxController)source).getUserObject();
    lock=feedManager.acquireLock(feedResource,item,getIdentity());
    if (lock.isSuccess()) {
      naviCtr.remove(item);
      feedResource=feedManager.deleteItem(item);
      deleteButtons.remove(source);
      for (      Link editButton : editButtons) {
        if (item.equals(editButton.getUserObject())) {
          editButtons.remove(editButton);
          break;
        }
      }
      if (!feedManager.hasItems(feedResource)) {
        makeInternalAndExternalButtons();
        fireEvent(ureq,ItemsController.FEED_INFO_IS_DIRTY_EVENT);
      }
 else {
        if (callback.mayEditItems() || callback.mayCreateItems()) {
          createEditButtons(ureq,feedResource);
        }
        createCommentsAndRatingsLinks(ureq,feedResource);
      }
      vcItems.setDirty(true);
      mainPanel.setContent(vcItems);
      feedManager.releaseLock(lock);
      lock=null;
      ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_DELETE,getClass(),LoggingResourceable.wrap(item));
    }
 else {
      String fullName=userManager.getUserDisplayName(lock.getOwner());
      showInfo(""String_Node_Str"",fullName);
    }
  }
 else   if (source == itemFormCtr) {
    if (event.equals(Event.CHANGED_EVENT) || event.equals(Event.CANCELLED_EVENT)) {
      if (event.equals(Event.CHANGED_EVENT)) {
        FileElement mediaFile=currentItem.getMediaFile();
        if (feedManager.getItemContainer(currentItem) == null) {
          naviCtr.remove(currentItem);
        }
 else {
          if (!accessibleItems.contains(currentItem)) {
            feedResource=feedManager.createItem(feedResource,currentItem,mediaFile);
            if (feedResource == null) {
              feedResource=feedManager.loadFeed(feedResource);
              if (!feedResource.isInternal() && !feedResource.isExternal() && !feedManager.hasItems(feedResource)) {
                feedResource=feedManager.updateFeedMode(Boolean.FALSE,feedResource);
                feedResource=feedManager.createItem(feedResource,currentItem,mediaFile);
              }
            }
            if (feedResource != null) {
              createButtonsForItem(ureq,feedResource,currentItem);
              createItemLink(currentItem);
              String guid=currentItem.getGuid();
              if (currentItem.getDate() != null) {
                DateComponentFactory.createDateComponentWithYear(""String_Node_Str"" + guid,currentItem.getDate(),vcItems);
              }
              createCommentsAndRatingsLink(ureq,feedResource,currentItem);
              naviCtr.add(currentItem);
              accessibleItems=feedManager.loadFilteredAndSortedItems(feedResource,callback,ureq.getIdentity());
              if (accessibleItems != null && accessibleItems.size() == 1) {
                fireEvent(ureq,ItemsController.FEED_INFO_IS_DIRTY_EVENT);
                helper.setURIs(currentItem.getFeed());
              }
            }
          }
 else {
            currentItem=feedManager.updateItem(currentItem,mediaFile);
            if (itemCtr != null) {
              displayItemController(ureq,currentItem);
            }
            ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_EDIT,getClass(),LoggingResourceable.wrap(currentItem));
          }
        }
        vcItems.setDirty(true);
        if (itemCtr != null) {
          itemCtr.getInitialComponent().setDirty(true);
        }
      }
 else       if (event.equals(Event.CANCELLED_EVENT)) {
        cleanupTmpItemMediaDir(currentItem);
        if (!feedManager.hasItems(feedResource)) {
          feedResource=feedManager.updateFeedMode(null,feedResource);
          makeInternalAndExternalButtons();
        }
      }
      feedManager.releaseLock(lock);
      cmc.deactivate();
      removeAsListenerAndDispose(cmc);
      cmc=null;
      removeAsListenerAndDispose(itemFormCtr);
      itemFormCtr=null;
    }
  }
 else   if (source == naviCtr && event instanceof NavigationEvent) {
    List<? extends Dated> selItems=((NavigationEvent)event).getSelectedItems();
    List<Item> items=new ArrayList<>();
    for (    Dated item : selItems) {
      if (item instanceof Item) {
        items.add((Item)item);
      }
    }
    if (callback.mayEditItems() || callback.mayCreateItems()) {
      createEditButtons(ureq,feedResource);
    }
    createCommentsAndRatingsLinks(ureq,feedResource);
    vcItems.setDirty(true);
    mainPanel.setContent(vcItems);
  }
 else   if (source == itemCtr) {
    if (event == Event.BACK_EVENT) {
      mainPanel.setContent(vcItems);
      removeAsListenerAndDispose(itemCtr);
      itemCtr=null;
    }
  }
 else   if (source instanceof UserCommentsAndRatingsController) {
    UserCommentsAndRatingsController commentsRatingsCtr=(UserCommentsAndRatingsController)source;
    if (event == UserCommentsAndRatingsController.EVENT_COMMENT_LINK_CLICKED) {
      Item item=(Item)commentsRatingsCtr.getUserObject();
      if (item != null) {
        ItemController myItemCtr=displayItemController(ureq,item);
        List<ContextEntry> entries=BusinessControlFactory.getInstance().createCEListFromResourceType(ItemController.ACTIVATION_KEY_COMMENTS);
        myItemCtr.activate(ureq,entries,null);
      }
    }
  }
  if (feedResource != null) {
    resetItems(ureq,feedResource);
  }
}"
69299,"public CourseAccessAndProperties(RepositoryEntry re,RepositoryEntryAllowToLeaveOptions setting,int access,boolean membersOnly,boolean canCopy,boolean canReference,boolean canDownload){
  super();
  this.repoEntry=re;
  this.setting=setting;
  this.access=access;
  this.membersOnly=membersOnly;
  this.canCopy=canCopy;
  this.canReference=canReference;
  this.canDownload=canDownload;
}","public CourseAccessAndProperties(RepositoryEntry re,RepositoryEntryAllowToLeaveOptions setting,int access,boolean membersOnly,boolean canCopy,boolean canReference,boolean canDownload){
  this.repoEntry=re;
  this.setting=setting;
  this.access=access;
  this.membersOnly=membersOnly;
  this.canCopy=canCopy;
  this.canReference=canReference;
  this.canDownload=canDownload;
}"
69300,"private void launchPublishingWizard(UserRequest ureq,ICourse course,boolean requestOnClose){
  if (publishStepsController != null)   return;
  Step start=new PublishStep00(ureq,cetm,course);
  StepRunnerCallback finish=new StepRunnerCallback(){
    public Step execute(    UserRequest ureq1,    WindowControl wControl1,    StepsRunContext runContext){
      boolean hasChanges=false;
      PublishProcess publishManager=(PublishProcess)runContext.get(""String_Node_Str"");
      PublishEvents publishEvents=publishManager.getPublishEvents();
      if (runContext.containsKey(""String_Node_Str"") && ((Boolean)runContext.get(""String_Node_Str"")).booleanValue()) {
        @SuppressWarnings(""String_Node_Str"") Collection<String> selectedNodeIds=(Collection<String>)runContext.get(""String_Node_Str"");
        hasChanges=(selectedNodeIds != null) && (selectedNodeIds.size() > 0);
        if (hasChanges) {
          publishManager.applyPublishSet(ureq1.getIdentity(),ureq1.getLocale(),false);
        }
      }
      if (runContext.containsKey(""String_Node_Str"")) {
        CourseAccessAndProperties accessAndProperties=(CourseAccessAndProperties)runContext.get(""String_Node_Str"");
        publishManager.changeAccessAndProperties(getIdentity(),accessAndProperties);
        hasChanges=true;
      }
      if (runContext.containsKey(""String_Node_Str"")) {
        String choice=(String)runContext.get(""String_Node_Str"");
        @SuppressWarnings(""String_Node_Str"") List<CategoryLabel> categories=(List<CategoryLabel>)runContext.get(""String_Node_Str"");
        publishManager.publishToCatalog(choice,categories);
      }
      if (publishEvents.getPostPublishingEvents().size() > 0) {
        for (        MultiUserEvent event : publishEvents.getPostPublishingEvents()) {
          CoordinatorManager.getInstance().getCoordinator().getEventBus().fireEventToListenersOf(event,ores);
        }
      }
      return hasChanges ? StepsMainRunController.DONE_MODIFIED : StepsMainRunController.DONE_UNCHANGED;
    }
  }
;
  publishStepsController=new StepsMainRunController(ureq,getWindowControl(),start,finish,null,translate(""String_Node_Str""),""String_Node_Str"");
  listenTo(publishStepsController);
  publishStepsController.getRunContext().put(""String_Node_Str"",requestOnClose);
  getWindowControl().pushAsModalDialog(publishStepsController.getInitialComponent());
}","private void launchPublishingWizard(UserRequest ureq,ICourse course,boolean requestOnClose){
  if (publishStepsController != null)   return;
  Step start=new PublishStep00(ureq,cetm,course);
  StepRunnerCallback finish=new StepRunnerCallback(){
    @Override public Step execute(    UserRequest ureq1,    WindowControl wControl1,    StepsRunContext runContext){
      boolean hasChanges=false;
      PublishProcess publishManager=(PublishProcess)runContext.get(""String_Node_Str"");
      PublishEvents publishEvents=publishManager.getPublishEvents();
      if (runContext.containsKey(""String_Node_Str"") && ((Boolean)runContext.get(""String_Node_Str"")).booleanValue()) {
        @SuppressWarnings(""String_Node_Str"") Collection<String> selectedNodeIds=(Collection<String>)runContext.get(""String_Node_Str"");
        hasChanges=(selectedNodeIds != null) && (selectedNodeIds.size() > 0);
        if (hasChanges) {
          publishManager.applyPublishSet(ureq1.getIdentity(),ureq1.getLocale(),false);
        }
      }
      if (runContext.containsKey(""String_Node_Str"")) {
        CourseAccessAndProperties accessAndProperties=(CourseAccessAndProperties)runContext.get(""String_Node_Str"");
        publishManager.changeAccessAndProperties(getIdentity(),accessAndProperties);
        hasChanges=true;
      }
      CourseCatalog courseCatalog=(CourseCatalog)runContext.get(""String_Node_Str"");
      if (courseCatalog != null) {
        publishManager.publishToCatalog(courseCatalog.getChoiceValue(),courseCatalog.getCategoryLabels());
      }
      if (publishEvents.getPostPublishingEvents().size() > 0) {
        for (        MultiUserEvent event : publishEvents.getPostPublishingEvents()) {
          CoordinatorManager.getInstance().getCoordinator().getEventBus().fireEventToListenersOf(event,ores);
        }
      }
      return hasChanges ? StepsMainRunController.DONE_MODIFIED : StepsMainRunController.DONE_UNCHANGED;
    }
  }
;
  publishStepsController=new StepsMainRunController(ureq,getWindowControl(),start,finish,null,translate(""String_Node_Str""),""String_Node_Str"");
  listenTo(publishStepsController);
  publishStepsController.getRunContext().put(""String_Node_Str"",requestOnClose);
  getWindowControl().pushAsModalDialog(publishStepsController.getInitialComponent());
}"
69301,"public Step execute(UserRequest ureq1,WindowControl wControl1,StepsRunContext runContext){
  boolean hasChanges=false;
  PublishProcess publishManager=(PublishProcess)runContext.get(""String_Node_Str"");
  PublishEvents publishEvents=publishManager.getPublishEvents();
  if (runContext.containsKey(""String_Node_Str"") && ((Boolean)runContext.get(""String_Node_Str"")).booleanValue()) {
    @SuppressWarnings(""String_Node_Str"") Collection<String> selectedNodeIds=(Collection<String>)runContext.get(""String_Node_Str"");
    hasChanges=(selectedNodeIds != null) && (selectedNodeIds.size() > 0);
    if (hasChanges) {
      publishManager.applyPublishSet(ureq1.getIdentity(),ureq1.getLocale(),false);
    }
  }
  if (runContext.containsKey(""String_Node_Str"")) {
    CourseAccessAndProperties accessAndProperties=(CourseAccessAndProperties)runContext.get(""String_Node_Str"");
    publishManager.changeAccessAndProperties(getIdentity(),accessAndProperties);
    hasChanges=true;
  }
  if (runContext.containsKey(""String_Node_Str"")) {
    String choice=(String)runContext.get(""String_Node_Str"");
    @SuppressWarnings(""String_Node_Str"") List<CategoryLabel> categories=(List<CategoryLabel>)runContext.get(""String_Node_Str"");
    publishManager.publishToCatalog(choice,categories);
  }
  if (publishEvents.getPostPublishingEvents().size() > 0) {
    for (    MultiUserEvent event : publishEvents.getPostPublishingEvents()) {
      CoordinatorManager.getInstance().getCoordinator().getEventBus().fireEventToListenersOf(event,ores);
    }
  }
  return hasChanges ? StepsMainRunController.DONE_MODIFIED : StepsMainRunController.DONE_UNCHANGED;
}","@Override public Step execute(UserRequest ureq1,WindowControl wControl1,StepsRunContext runContext){
  boolean hasChanges=false;
  PublishProcess publishManager=(PublishProcess)runContext.get(""String_Node_Str"");
  PublishEvents publishEvents=publishManager.getPublishEvents();
  if (runContext.containsKey(""String_Node_Str"") && ((Boolean)runContext.get(""String_Node_Str"")).booleanValue()) {
    @SuppressWarnings(""String_Node_Str"") Collection<String> selectedNodeIds=(Collection<String>)runContext.get(""String_Node_Str"");
    hasChanges=(selectedNodeIds != null) && (selectedNodeIds.size() > 0);
    if (hasChanges) {
      publishManager.applyPublishSet(ureq1.getIdentity(),ureq1.getLocale(),false);
    }
  }
  if (runContext.containsKey(""String_Node_Str"")) {
    CourseAccessAndProperties accessAndProperties=(CourseAccessAndProperties)runContext.get(""String_Node_Str"");
    publishManager.changeAccessAndProperties(getIdentity(),accessAndProperties);
    hasChanges=true;
  }
  CourseCatalog courseCatalog=(CourseCatalog)runContext.get(""String_Node_Str"");
  if (courseCatalog != null) {
    publishManager.publishToCatalog(courseCatalog.getChoiceValue(),courseCatalog.getCategoryLabels());
  }
  if (publishEvents.getPostPublishingEvents().size() > 0) {
    for (    MultiUserEvent event : publishEvents.getPostPublishingEvents()) {
      CoordinatorManager.getInstance().getCoordinator().getEventBus().fireEventToListenersOf(event,ores);
    }
  }
  return hasChanges ? StepsMainRunController.DONE_MODIFIED : StepsMainRunController.DONE_UNCHANGED;
}"
69302,"protected void publishToCatalog(String choiceValue,List<CategoryLabel> labels){
  CoursePropertyManager cpm=course.getCourseEnvironment().getCoursePropertyManager();
  CourseNode rootNode=course.getRunStructure().getRootNode();
  Property prop=cpm.findCourseNodeProperty(rootNode,null,null,""String_Node_Str"");
  if (prop == null) {
    prop=cpm.createCourseNodePropertyInstance(rootNode,null,null,""String_Node_Str"",null,null,choiceValue,null);
    cpm.saveProperty(prop);
  }
 else {
    prop.setStringValue(choiceValue);
    cpm.updateProperty(prop);
  }
  if (""String_Node_Str"".equals(choiceValue) && labels != null) {
    CatalogManager cm=CoreSpringFactory.getImpl(CatalogManager.class);
    List<CatalogEntry> refParentCategories=cm.getCatalogCategoriesFor(repositoryEntry);
    a_a:     for (    CategoryLabel label : labels) {
      CatalogEntry category=label.getCategory();
      CatalogEntry parentCategory=label.getParentCategory();
      if (label.isDeleted()) {
        if (category.getKey() != null) {
          List<CatalogEntry> children=cm.getChildrenOf(category);
          for (          CatalogEntry child : children) {
            if (child.getRepositoryEntry() != null && child.getRepositoryEntry().equalsByPersistableKey(repositoryEntry)) {
              cm.deleteCatalogEntry(child);
            }
          }
        }
      }
 else       if (category.getKey() == null) {
        for (Iterator<CatalogEntry> refIt=refParentCategories.iterator(); refIt.hasNext(); ) {
          CatalogEntry refParentCategory=refIt.next();
          if (refParentCategory.equalsByPersistableKey(parentCategory)) {
            refIt.remove();
            break a_a;
          }
        }
        category.setOwnerGroup(BaseSecurityManager.getInstance().createAndPersistSecurityGroup());
        cm.addCatalogEntry(parentCategory,category);
      }
 else {
        for (Iterator<CatalogEntry> refIt=refParentCategories.iterator(); refIt.hasNext(); ) {
          CatalogEntry refParentCategory=refIt.next();
          if (refParentCategory.equalsByPersistableKey(category)) {
            refIt.remove();
          }
        }
      }
    }
  }
}","protected void publishToCatalog(String choiceValue,List<CategoryLabel> labels){
  CoursePropertyManager cpm=course.getCourseEnvironment().getCoursePropertyManager();
  CourseNode rootNode=course.getRunStructure().getRootNode();
  Property prop=cpm.findCourseNodeProperty(rootNode,null,null,""String_Node_Str"");
  if (prop == null) {
    prop=cpm.createCourseNodePropertyInstance(rootNode,null,null,""String_Node_Str"",null,null,choiceValue,null);
    cpm.saveProperty(prop);
  }
 else {
    prop.setStringValue(choiceValue);
    cpm.updateProperty(prop);
  }
  CatalogManager cm=CoreSpringFactory.getImpl(CatalogManager.class);
  List<CatalogEntry> refParentCategories=cm.getCatalogCategoriesFor(repositoryEntry);
  a_a:   for (  CategoryLabel label : labels) {
    CatalogEntry category=label.getCategory();
    CatalogEntry parentCategory=label.getParentCategory();
    if (label.isDeleted()) {
      if (category.getKey() != null) {
        List<CatalogEntry> children=cm.getChildrenOf(category);
        for (        CatalogEntry child : children) {
          if (child.getRepositoryEntry() != null && child.getRepositoryEntry().equalsByPersistableKey(repositoryEntry)) {
            cm.deleteCatalogEntry(child);
          }
        }
      }
    }
 else     if (category.getKey() == null) {
      for (Iterator<CatalogEntry> refIt=refParentCategories.iterator(); refIt.hasNext(); ) {
        CatalogEntry refParentCategory=refIt.next();
        if (refParentCategory.equalsByPersistableKey(parentCategory)) {
          refIt.remove();
          break a_a;
        }
      }
      category.setOwnerGroup(BaseSecurityManager.getInstance().createAndPersistSecurityGroup());
      cm.addCatalogEntry(parentCategory,category);
    }
 else {
      for (Iterator<CatalogEntry> refIt=refParentCategories.iterator(); refIt.hasNext(); ) {
        CatalogEntry refParentCategory=refIt.next();
        if (refParentCategory.equalsByPersistableKey(category)) {
          refIt.remove();
        }
      }
    }
  }
}"
69303,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FormLayoutContainer headersLayout=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),velocity_root + ""String_Node_Str"");
  formLayout.add(headersLayout);
  headersLayout.contextPut(""String_Node_Str"",repositoryModule.isCatalogEnabled());
  FormLayoutContainer publishLayout=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(publishLayout);
  publishLayout.setFormTitle(translate(""String_Node_Str""));
  publishLayout.setFormContextHelp(""String_Node_Str"");
  publishLayout.setElementCssClass(""String_Node_Str"");
  if (loginModule.isGuestLoginLinksEnabled()) {
    publishedKeys=new String[]{OAU_KEY,OAUG_KEY,MEMBERSONLY_KEY};
  }
 else {
    publishedKeys=new String[]{OAU_KEY,MEMBERSONLY_KEY};
  }
  String resourceType=entry.getOlatResource().getResourceableTypeName();
  if (TestFileResource.TYPE_NAME.equals(resourceType) || SurveyFileResource.TYPE_NAME.equals(resourceType) || ScormCPFileResource.TYPE_NAME.equals(resourceType)) {
    String warning=translate(""String_Node_Str"");
    flc.contextPut(""String_Node_Str"",warning);
  }
  if (CourseModule.ORES_TYPE_COURSE.equals(resourceType)) {
    publishLayout.setFormDescription(translate(""String_Node_Str""));
  }
 else {
    publishLayout.setFormDescription(translate(""String_Node_Str""));
  }
  if (resourceType != null) {
    handler=RepositoryHandlerFactory.getInstance().getRepositoryHandler(resourceType);
  }
  final boolean managedSettings=RepositoryEntryManagedFlag.isManaged(entry,RepositoryEntryManagedFlag.settings);
  final boolean managedAccess=RepositoryEntryManagedFlag.isManaged(entry,RepositoryEntryManagedFlag.access);
  String[] yesNoValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  authorsSwitch=uifactory.addRadiosHorizontal(""String_Node_Str"",""String_Node_Str"",publishLayout,yesNoKeys,yesNoValues);
  authorsSwitch.setEnabled(!managedAccess);
  authorsSwitch.addActionListener(FormEvent.ONCHANGE);
  authorConfigLayout=FormLayoutContainer.createBareBoneFormLayout(""String_Node_Str"",getTranslator());
  publishLayout.add(authorConfigLayout);
  canReference=uifactory.addCheckboxesVertical(""String_Node_Str"",null,authorConfigLayout,new String[]{YES_KEY},new String[]{translate(""String_Node_Str"")},1);
  canReference.setEnabled(!managedSettings);
  canCopy=uifactory.addCheckboxesVertical(""String_Node_Str"",null,authorConfigLayout,new String[]{YES_KEY},new String[]{translate(""String_Node_Str"")},1);
  canCopy.setEnabled(!managedSettings);
  canDownload=uifactory.addCheckboxesVertical(""String_Node_Str"",null,authorConfigLayout,new String[]{YES_KEY},new String[]{translate(""String_Node_Str"")},1);
  canDownload.setEnabled(!managedSettings);
  canDownload.setVisible(handler.supportsDownload());
  uifactory.addSpacerElement(""String_Node_Str"",authorConfigLayout,true);
  String[] publishedValues;
  if (loginModule.isGuestLoginLinksEnabled()) {
    publishedValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
  }
 else {
    publishedValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  }
  usersSwitch=uifactory.addRadiosHorizontal(""String_Node_Str"",""String_Node_Str"",publishLayout,yesNoKeys,yesNoValues);
  usersSwitch.addActionListener(FormEvent.ONCHANGE);
  usersSwitch.setEnabled(!managedAccess);
  userConfigLayout=FormLayoutContainer.createBareBoneFormLayout(""String_Node_Str"",getTranslator());
  publishLayout.add(userConfigLayout);
  publishedForUsers=uifactory.addDropdownSingleselect(""String_Node_Str"",null,userConfigLayout,publishedKeys,publishedValues,null);
  publishedForUsers.setEnabled(!managedAccess);
  publishedForUsers.addActionListener(FormEvent.ONCHANGE);
  uifactory.addSpacerElement(""String_Node_Str"",userConfigLayout,true);
  FormLayoutContainer membershipLayout=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(membershipLayout);
  membershipLayout.setFormTitle(translate(""String_Node_Str""));
  String[] leaveValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
  final boolean managedLeaving=RepositoryEntryManagedFlag.isManaged(entry,RepositoryEntryManagedFlag.membersmanagement);
  leaveEl=uifactory.addDropdownSingleselect(""String_Node_Str"",""String_Node_Str"",membershipLayout,leaveKeys,leaveValues,null);
  boolean found=false;
  for (  String leaveKey : leaveKeys) {
    if (leaveKey.equals(entry.getAllowToLeaveOption().name())) {
      leaveEl.select(leaveKey,true);
      found=true;
    }
  }
  if (!found) {
    if (managedLeaving) {
      leaveEl.select(RepositoryEntryAllowToLeaveOptions.never.name(),true);
    }
 else {
      RepositoryEntryAllowToLeaveOptions defaultOption=repositoryModule.getAllowToLeaveDefaultOption();
      leaveEl.select(defaultOption.name(),true);
    }
  }
  leaveEl.setEnabled(!managedLeaving);
  accessLayout=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),velocity_root + ""String_Node_Str"");
  formLayout.add(accessLayout);
  accessLayout.setVisible(entry.getAccess() == RepositoryEntry.ACC_USERS || loginModule.isGuestLoginLinksEnabled() && entry.getAccess() == RepositoryEntry.ACC_USERS_GUESTS || entry.isMembersOnly());
  accessLayout.setFormTitle(translate(""String_Node_Str""));
  HelpTooltip acMethodsLabelHelp=new HelpTooltip(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getLocale());
  ((FormLayoutContainer)accessLayout).put(""String_Node_Str"",acMethodsLabelHelp);
  if (editable) {
    List<AccessMethod> methods=acService.getAvailableMethods(getIdentity(),ureq.getUserSession().getRoles());
    for (    AccessMethod method : methods) {
      AccessMethodHandler handler=acModule.getAccessMethodHandler(method.getType());
      if (handler.isPaymentMethod() && !allowPaymentMethod) {
        continue;
      }
      String title=handler.getMethodName(getLocale());
      FormLink add=uifactory.addFormLink(""String_Node_Str"" + handler.getType(),title,null,accessLayout,Link.LINK | Link.NONTRANSLATED);
      add.setUserObject(method);
      add.setIconLeftCSS((""String_Node_Str"" + method.getMethodCssClass() + ""String_Node_Str"").intern());
      addMethods.add(add);
      accessLayout.add(add.getName(),add);
    }
    ((FormLayoutContainer)accessLayout).contextPut(""String_Node_Str"",addMethods);
  }
  String confPage=velocity_root + ""String_Node_Str"";
  confControllerContainer=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),confPage);
  accessLayout.add(confControllerContainer);
  loadConfigurations();
  confControllerContainer.contextPut(""String_Node_Str"",confControllers);
  confControllerContainer.contextPut(""String_Node_Str"",Boolean.valueOf(emptyConfigGrantsFullAccess));
  initFormData();
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FormLayoutContainer headersLayout=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),velocity_root + ""String_Node_Str"");
  formLayout.add(headersLayout);
  headersLayout.contextPut(""String_Node_Str"",repositoryModule.isCatalogEnabled());
  FormLayoutContainer publishLayout=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(publishLayout);
  publishLayout.setFormTitle(translate(""String_Node_Str""));
  publishLayout.setFormContextHelp(""String_Node_Str"");
  publishLayout.setElementCssClass(""String_Node_Str"");
  if (loginModule.isGuestLoginLinksEnabled()) {
    publishedKeys=new String[]{OAU_KEY,OAUG_KEY,MEMBERSONLY_KEY};
  }
 else {
    publishedKeys=new String[]{OAU_KEY,MEMBERSONLY_KEY};
  }
  String resourceType=entry.getOlatResource().getResourceableTypeName();
  if (TestFileResource.TYPE_NAME.equals(resourceType) || SurveyFileResource.TYPE_NAME.equals(resourceType) || ScormCPFileResource.TYPE_NAME.equals(resourceType)) {
    String warning=translate(""String_Node_Str"");
    flc.contextPut(""String_Node_Str"",warning);
  }
  if (CourseModule.ORES_TYPE_COURSE.equals(resourceType)) {
    publishLayout.setFormDescription(translate(""String_Node_Str""));
  }
 else {
    publishLayout.setFormDescription(translate(""String_Node_Str""));
  }
  if (resourceType != null) {
    handler=RepositoryHandlerFactory.getInstance().getRepositoryHandler(resourceType);
  }
  final boolean managedSettings=RepositoryEntryManagedFlag.isManaged(entry,RepositoryEntryManagedFlag.settings);
  final boolean managedAccess=RepositoryEntryManagedFlag.isManaged(entry,RepositoryEntryManagedFlag.access);
  String[] yesNoValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  authorsSwitch=uifactory.addRadiosHorizontal(""String_Node_Str"",""String_Node_Str"",publishLayout,yesNoKeys,yesNoValues);
  authorsSwitch.setEnabled(!managedAccess);
  authorsSwitch.addActionListener(FormEvent.ONCHANGE);
  authorConfigLayout=FormLayoutContainer.createBareBoneFormLayout(""String_Node_Str"",getTranslator());
  publishLayout.add(authorConfigLayout);
  canReference=uifactory.addCheckboxesVertical(""String_Node_Str"",null,authorConfigLayout,new String[]{YES_KEY},new String[]{translate(""String_Node_Str"")},1);
  canReference.setEnabled(!managedSettings);
  canCopy=uifactory.addCheckboxesVertical(""String_Node_Str"",null,authorConfigLayout,new String[]{YES_KEY},new String[]{translate(""String_Node_Str"")},1);
  canCopy.setEnabled(!managedSettings);
  canDownload=uifactory.addCheckboxesVertical(""String_Node_Str"",null,authorConfigLayout,new String[]{YES_KEY},new String[]{translate(""String_Node_Str"")},1);
  canDownload.setEnabled(!managedSettings);
  canDownload.setVisible(handler.supportsDownload());
  uifactory.addSpacerElement(""String_Node_Str"",authorConfigLayout,true);
  String[] publishedValues;
  if (loginModule.isGuestLoginLinksEnabled()) {
    publishedValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
  }
 else {
    publishedValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  }
  usersSwitch=uifactory.addRadiosHorizontal(""String_Node_Str"",""String_Node_Str"",publishLayout,yesNoKeys,yesNoValues);
  usersSwitch.addActionListener(FormEvent.ONCHANGE);
  usersSwitch.setEnabled(!managedAccess);
  userConfigLayout=FormLayoutContainer.createBareBoneFormLayout(""String_Node_Str"",getTranslator());
  publishLayout.add(userConfigLayout);
  publishedForUsers=uifactory.addDropdownSingleselect(""String_Node_Str"",null,userConfigLayout,publishedKeys,publishedValues,null);
  publishedForUsers.setEnabled(!managedAccess);
  publishedForUsers.addActionListener(FormEvent.ONCHANGE);
  uifactory.addSpacerElement(""String_Node_Str"",userConfigLayout,true);
  FormLayoutContainer membershipLayout=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(membershipLayout);
  membershipLayout.setFormTitle(translate(""String_Node_Str""));
  String[] leaveValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
  final boolean managedLeaving=RepositoryEntryManagedFlag.isManaged(entry,RepositoryEntryManagedFlag.membersmanagement);
  leaveEl=uifactory.addDropdownSingleselect(""String_Node_Str"",""String_Node_Str"",membershipLayout,leaveKeys,leaveValues,null);
  boolean found=false;
  for (  String leaveKey : leaveKeys) {
    if (leaveKey.equals(entry.getAllowToLeaveOption().name())) {
      leaveEl.select(leaveKey,true);
      found=true;
    }
  }
  if (!found) {
    if (managedLeaving) {
      leaveEl.select(RepositoryEntryAllowToLeaveOptions.never.name(),true);
    }
 else {
      RepositoryEntryAllowToLeaveOptions defaultOption=repositoryModule.getAllowToLeaveDefaultOption();
      leaveEl.select(defaultOption.name(),true);
    }
  }
  leaveEl.setEnabled(!managedLeaving);
  accessLayout=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),velocity_root + ""String_Node_Str"");
  formLayout.add(accessLayout);
  accessLayout.setVisible(entry.getAccess() == RepositoryEntry.ACC_USERS || loginModule.isGuestLoginLinksEnabled() && entry.getAccess() == RepositoryEntry.ACC_USERS_GUESTS || entry.isMembersOnly());
  accessLayout.setFormTitle(translate(""String_Node_Str""));
  HelpTooltip acMethodsLabelHelp=new HelpTooltip(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getLocale());
  accessLayout.put(""String_Node_Str"",acMethodsLabelHelp);
  if (editable) {
    List<AccessMethod> methods=acService.getAvailableMethods(getIdentity(),ureq.getUserSession().getRoles());
    for (    AccessMethod method : methods) {
      AccessMethodHandler handler=acModule.getAccessMethodHandler(method.getType());
      if (handler.isPaymentMethod() && !allowPaymentMethod) {
        continue;
      }
      String title=handler.getMethodName(getLocale());
      FormLink add=uifactory.addFormLink(""String_Node_Str"" + handler.getType(),title,null,accessLayout,Link.LINK | Link.NONTRANSLATED);
      add.setUserObject(method);
      add.setIconLeftCSS((""String_Node_Str"" + method.getMethodCssClass() + ""String_Node_Str"").intern());
      addMethods.add(add);
      accessLayout.add(add.getName(),add);
    }
    accessLayout.contextPut(""String_Node_Str"",addMethods);
  }
  String confPage=velocity_root + ""String_Node_Str"";
  confControllerContainer=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),confPage);
  accessLayout.add(confControllerContainer);
  loadConfigurations();
  confControllerContainer.contextPut(""String_Node_Str"",confControllers);
  confControllerContainer.contextPut(""String_Node_Str"",Boolean.valueOf(emptyConfigGrantsFullAccess));
  initFormData();
}"
69304,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  CoursePropertyManager cpm=courseEnv.getCoursePropertyManager();
  Property prop=cpm.findCourseNodeProperty(rootNode,null,null,""String_Node_Str"");
  String value=prop == null ? null : prop.getStringValue();
  List<CatalogEntry> catalogEntries=catalogManager.getCatalogCategoriesFor(repositoryEntry);
  if (""String_Node_Str"".equals(value) && !catalogEntries.isEmpty()) {
    value=""String_Node_Str"";
  }
  FormItemContainer fc=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  fc.setRootForm(mainForm);
  formLayout.add(""String_Node_Str"",fc);
  final String[] keys=new String[]{""String_Node_Str"",""String_Node_Str""};
  final String[] values=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  catalogBox=uifactory.addDropdownSingleselect(""String_Node_Str"",""String_Node_Str"",fc,keys,values,null);
  catalogBox.addActionListener(FormEvent.ONCHANGE);
  if (!StringHelper.containsNonWhitespace(value)) {
    value=""String_Node_Str"";
  }
  catalogBox.select(value,true);
  flc.contextPut(""String_Node_Str"",value);
  boolean activate=""String_Node_Str"".equals(value);
  addToCatalog=uifactory.addFormLink(""String_Node_Str"",flc,Link.BUTTON_SMALL);
  addToCatalog.setElementCssClass(""String_Node_Str"");
  addToCatalog.setVisible(activate);
  for (  CatalogEntry entry : catalogEntries) {
    CategoryLabel label=new CategoryLabel(entry,entry.getParent(),getPath(entry));
    FormLink link=uifactory.addFormLink(label.getCategoryUUID(),""String_Node_Str"",null,flc,Link.LINK);
    link.setUserObject(label);
    deleteLinks.add(link);
  }
  flc.contextPut(""String_Node_Str"",deleteLinks);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  CoursePropertyManager cpm=courseEnv.getCoursePropertyManager();
  Property prop=cpm.findCourseNodeProperty(rootNode,null,null,""String_Node_Str"");
  String value=prop == null ? null : prop.getStringValue();
  List<CatalogEntry> catalogEntries=catalogManager.getCatalogCategoriesFor(repositoryEntry);
  if (""String_Node_Str"".equals(value) && !catalogEntries.isEmpty()) {
    value=""String_Node_Str"";
  }
  FormItemContainer fc=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  fc.setRootForm(mainForm);
  formLayout.add(""String_Node_Str"",fc);
  final String[] values=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  catalogBox=uifactory.addDropdownSingleselect(""String_Node_Str"",""String_Node_Str"",fc,keys,values,null);
  catalogBox.addActionListener(FormEvent.ONCHANGE);
  if (!StringHelper.containsNonWhitespace(value)) {
    value=""String_Node_Str"";
  }
  catalogBox.select(value,true);
  flc.contextPut(""String_Node_Str"",value);
  boolean activate=""String_Node_Str"".equals(value);
  addToCatalog=uifactory.addFormLink(""String_Node_Str"",flc,Link.BUTTON_SMALL);
  addToCatalog.setElementCssClass(""String_Node_Str"");
  addToCatalog.setVisible(activate);
  for (  CatalogEntry entry : catalogEntries) {
    CategoryLabel label=new CategoryLabel(entry,entry.getParent(),getPath(entry));
    FormLink link=uifactory.addFormLink(label.getCategoryUUID(),""String_Node_Str"",null,flc,Link.LINK);
    link.setUserObject(label);
    deleteLinks.add(link);
  }
  flc.contextPut(""String_Node_Str"",deleteLinks);
}"
69305,"@Override protected void formOK(UserRequest ureq){
  if (catalogBox.isOneSelected()) {
    String val=catalogBox.getSelectedKey();
    addToRunContext(""String_Node_Str"",val);
    List<CategoryLabel> categories=new ArrayList<CategoryLabel>();
    for (    FormLink deletedLink : deleteLinks) {
      CategoryLabel cat=(CategoryLabel)deletedLink.getUserObject();
      categories.add(cat);
    }
    addToRunContext(""String_Node_Str"",categories);
  }
  fireEvent(ureq,StepsEvent.ACTIVATE_NEXT);
}","@Override protected void formOK(UserRequest ureq){
  CourseCatalog courseCatalog=new CourseCatalog();
  courseCatalog.setChoiceValue(catalogBox.getSelectedKey());
  boolean removeAll=""String_Node_Str"".equals(catalogBox.getSelectedKey());
  for (  FormLink deletedLink : deleteLinks) {
    CategoryLabel cat=(CategoryLabel)deletedLink.getUserObject();
    if (removeAll) {
      cat.setDeleted(true);
    }
    courseCatalog.getCategoryLabels().add(cat);
  }
  addToRunContext(""String_Node_Str"",courseCatalog);
  fireEvent(ureq,StepsEvent.ACTIVATE_NEXT);
}"
69306,"private List<Member> initFormMemberList(String name,List<Identity> ids,Set<Long> duplicateCatcher,FormItemContainer formLayout,boolean withEmail){
  String page=velocity_root + ""String_Node_Str"";
  FormLayoutContainer container=FormLayoutContainer.createCustomFormLayout(name,getTranslator(),page);
  formLayout.add(name,container);
  container.setRootForm(mainForm);
  List<Member> members=createMemberLinks(ids,duplicateCatcher,container,withEmail);
  container.contextPut(""String_Node_Str"",members);
  container.contextPut(""String_Node_Str"",avatarBaseURL);
  return members;
}","private List<Member> initFormMemberList(String name,List<Identity> ids,Set<Long> duplicateCatcher,FormItemContainer formLayout,boolean withEmail){
  String page=velocity_root + ""String_Node_Str"";
  FormLayoutContainer container=FormLayoutContainer.createCustomFormLayout(name,getTranslator(),page);
  container.contextPut(""String_Node_Str"",userPropertyAvatarHandlers);
  Map<String,Integer> handlerLookupMap=new HashMap<String,Integer>();
  for (int i=userPropertyHandlers.size(); i-- > 0; ) {
    UserPropertyHandler handler=userPropertyHandlers.get(i);
    handlerLookupMap.put(handler.getName(),i);
  }
  container.contextPut(""String_Node_Str"",handlerLookupMap);
  formLayout.add(name,container);
  container.setRootForm(mainForm);
  List<Member> members=createMemberLinks(ids,duplicateCatcher,container,withEmail);
  container.contextPut(""String_Node_Str"",members);
  container.contextPut(""String_Node_Str"",avatarBaseURL);
  return members;
}"
69307,"@Override public Controller createController(UserRequest lureq,WindowControl lwControl){
  lwControl.getWindowBackOffice().getChiefController().addBodyCssClass(""String_Node_Str"");
  return new MembersPrintController(lureq,lwControl,userPropertyHandlers,getTranslator(),ownerList,coachList,participantList,waitingtList,showOwners,showCoaches,showParticipants,showWaiting,courseEnv != null ? courseEnv.getCourseTitle() : businessGroup.getName());
}","@Override public Controller createController(UserRequest lureq,WindowControl lwControl){
  lwControl.getWindowBackOffice().getChiefController().addBodyCssClass(""String_Node_Str"");
  return new MembersPrintController(lureq,lwControl,getTranslator(),ownerList,coachList,participantList,waitingtList,showOwners,showCoaches,showParticipants,showWaiting,courseEnv != null ? courseEnv.getCourseTitle() : businessGroup.getName());
}"
69308,"private void doPrint(UserRequest ureq){
  ControllerCreator printControllerCreator=new ControllerCreator(){
    @Override public Controller createController(    UserRequest lureq,    WindowControl lwControl){
      lwControl.getWindowBackOffice().getChiefController().addBodyCssClass(""String_Node_Str"");
      return new MembersPrintController(lureq,lwControl,userPropertyHandlers,getTranslator(),ownerList,coachList,participantList,waitingtList,showOwners,showCoaches,showParticipants,showWaiting,courseEnv != null ? courseEnv.getCourseTitle() : businessGroup.getName());
    }
  }
;
  ControllerCreator layoutCtrlr=BaseFullWebappPopupLayoutFactory.createPrintPopupLayout(printControllerCreator);
  openInNewBrowserWindow(ureq,layoutCtrlr);
}","private void doPrint(UserRequest ureq){
  ControllerCreator printControllerCreator=new ControllerCreator(){
    @Override public Controller createController(    UserRequest lureq,    WindowControl lwControl){
      lwControl.getWindowBackOffice().getChiefController().addBodyCssClass(""String_Node_Str"");
      return new MembersPrintController(lureq,lwControl,getTranslator(),ownerList,coachList,participantList,waitingtList,showOwners,showCoaches,showParticipants,showWaiting,courseEnv != null ? courseEnv.getCourseTitle() : businessGroup.getName());
    }
  }
;
  ControllerCreator layoutCtrlr=BaseFullWebappPopupLayoutFactory.createPrintPopupLayout(printControllerCreator);
  openInNewBrowserWindow(ureq,layoutCtrlr);
}"
69309,"public MembersAvatarDisplayRunController(UserRequest ureq,WindowControl wControl,Translator translator,CourseEnvironment courseEnv,BusinessGroup businessGroup,List<Identity> owners,List<Identity> coaches,List<Identity> participants,List<Identity> waiting,boolean canEmail,boolean canDownload,boolean deduplicateList,boolean showOwners,boolean showCoaches,boolean showParticipants,boolean showWaiting,boolean editable){
  super(ureq,wControl,""String_Node_Str"",translator);
  setTranslator(translator);
  this.courseEnv=courseEnv;
  this.businessGroup=businessGroup;
  this.repoEntry=courseEnv != null ? courseEnv.getCourseGroupManager().getCourseEntry() : null;
  userPropertyHandlers=userManager.getUserPropertyHandlersFor(USER_PROPS_ID,false);
  avatarBaseURL=registerCacheableMapper(ureq,""String_Node_Str"",new UserAvatarMapper(true));
  portraitManager=DisplayPortraitManager.getInstance();
  chatEnabled=imModule.isEnabled() && imModule.isPrivateEnabled();
  this.owners=owners;
  this.coaches=coaches;
  this.participants=participants;
  this.waiting=waiting;
  this.canEmail=canEmail;
  this.canDownload=canDownload;
  this.showOwners=showOwners;
  this.showCoaches=showCoaches;
  this.showParticipants=showParticipants;
  this.showWaiting=showWaiting;
  this.deduplicateList=deduplicateList;
  this.editable=editable;
  initForm(ureq);
}","public MembersAvatarDisplayRunController(UserRequest ureq,WindowControl wControl,Translator translator,CourseEnvironment courseEnv,BusinessGroup businessGroup,List<Identity> owners,List<Identity> coaches,List<Identity> participants,List<Identity> waiting,boolean canEmail,boolean canDownload,boolean deduplicateList,boolean showOwners,boolean showCoaches,boolean showParticipants,boolean showWaiting,boolean editable){
  super(ureq,wControl,""String_Node_Str"",translator);
  setTranslator(translator);
  this.courseEnv=courseEnv;
  this.businessGroup=businessGroup;
  this.repoEntry=courseEnv != null ? courseEnv.getCourseGroupManager().getCourseEntry() : null;
  Roles roles=ureq.getUserSession().getRoles();
  boolean isAdministrativeUser=securityModule.isUserAllowedAdminProps(roles);
  userPropertyHandlers=userManager.getUserPropertyHandlersFor(MembersDisplayRunController.USER_PROPS_LIST_ID,isAdministrativeUser);
  userPropertyAvatarHandlers=userManager.getUserPropertyHandlersFor(MembersDisplayRunController.USER_PROPS_AVATAR_ID,isAdministrativeUser);
  avatarBaseURL=registerCacheableMapper(ureq,""String_Node_Str"",new UserAvatarMapper(true));
  portraitManager=DisplayPortraitManager.getInstance();
  chatEnabled=imModule.isEnabled() && imModule.isPrivateEnabled();
  this.owners=owners;
  this.coaches=coaches;
  this.participants=participants;
  this.waiting=waiting;
  this.canEmail=canEmail;
  this.canDownload=canDownload;
  this.showOwners=showOwners;
  this.showCoaches=showCoaches;
  this.showParticipants=showParticipants;
  this.showWaiting=showWaiting;
  this.deduplicateList=deduplicateList;
  this.editable=editable;
  initForm(ureq);
}"
69310,"@Override public Controller createController(UserRequest lureq,WindowControl lwControl){
  lwControl.getWindowBackOffice().getChiefController().addBodyCssClass(""String_Node_Str"");
  return new MembersPrintController(lureq,lwControl,userPropertyHandlers,getTranslator(),ownerList,coachList,participantList,waitingtList,showOwners,showCoaches,showParticipants,showWaiting,courseEnv != null ? courseEnv.getCourseTitle() : businessGroup.getName());
}","@Override public Controller createController(UserRequest lureq,WindowControl lwControl){
  lwControl.getWindowBackOffice().getChiefController().addBodyCssClass(""String_Node_Str"");
  return new MembersPrintController(lureq,lwControl,getTranslator(),ownerList,coachList,participantList,waitingtList,showOwners,showCoaches,showParticipants,showWaiting,courseEnv != null ? courseEnv.getCourseTitle() : businessGroup.getName());
}"
69311,"public MembersListDisplayRunController(UserRequest ureq,WindowControl wControl,Translator translator,CourseEnvironment courseEnv,BusinessGroup businessGroup,List<Identity> owners,List<Identity> coaches,List<Identity> participants,List<Identity> waiting,boolean canEmail,boolean canDownload,boolean deduplicateList,boolean showOwners,boolean showCoaches,boolean showParticipants,boolean showWaiting,boolean editable){
  super(ureq,wControl);
  Translator fallback=userManager.getPropertyHandlerTranslator(getTranslator());
  setTranslator(Util.createPackageTranslator(translator,fallback,getLocale()));
  mainVC=createVelocityContainer(""String_Node_Str"");
  this.courseEnv=courseEnv;
  this.businessGroup=businessGroup;
  this.repoEntry=courseEnv != null ? courseEnv.getCourseGroupManager().getCourseEntry() : null;
  userPropertyHandlers=userManager.getUserPropertyHandlersFor(USER_PROPS_ID,false);
  this.owners=owners;
  this.coaches=coaches;
  this.participants=participants;
  this.waiting=waiting;
  this.showOwners=showOwners;
  this.showCoaches=showCoaches;
  this.showParticipants=showParticipants;
  this.showWaiting=showWaiting;
  if (canEmail) {
    allEmailLink=LinkFactory.createLink(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getTranslator(),mainVC,this,Link.BUTTON);
    allEmailLink.setIconLeftCSS(""String_Node_Str"");
  }
  IdentityEnvironment idEnv=ureq.getUserSession().getIdentityEnvironment();
  Identity ownId=idEnv.getIdentity();
  Roles roles=idEnv.getRoles();
  if (editable && (roles.isOLATAdmin() || roles.isGroupManager() || owners.contains(ownId)|| coaches.contains(ownId)|| (canDownload && !waiting.contains(ownId)))) {
    downloadLink=LinkFactory.createLink(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getTranslator(),mainVC,this,Link.BUTTON);
    downloadLink.setIconLeftCSS(""String_Node_Str"");
    printLink=LinkFactory.createButton(""String_Node_Str"",mainVC,this);
    printLink.setIconLeftCSS(""String_Node_Str"");
    printLink.setPopup(new LinkPopupSettings(700,500,""String_Node_Str""));
  }
  Comparator<Identity> idComparator=new IdentityComparator();
  Collections.sort(owners,idComparator);
  ownerList=convertIdentitiesToMembers(owners);
  Collections.sort(coaches,idComparator);
  coachList=convertIdentitiesToMembers(coaches);
  Collections.sort(participants,idComparator);
  participantList=convertIdentitiesToMembers(participants);
  Collections.sort(waiting,idComparator);
  waitingtList=convertIdentitiesToMembers(waiting);
  Set<MemberView> duplicateCatcher=new HashSet<>();
  boolean userLastTimeVisible=cacheGroupMemberships(ureq);
  if (showOwners && !owners.isEmpty()) {
    ownersTableCtrl=new MembersTableController(ureq,wControl,owners,duplicateCatcher,recentLaunches,initialLaunches,userPropertyHandlers,groupmemberships,repoEntry,businessGroup,courseEnv,deduplicateList,getTranslator(),editable,canEmail,userLastTimeVisible);
    listenTo(ownersTableCtrl);
    mainVC.put(""String_Node_Str"",ownersTableCtrl.getInitialComponent());
  }
  if (showCoaches && !coaches.isEmpty()) {
    coachesTableCtrl=new MembersTableController(ureq,wControl,coaches,duplicateCatcher,recentLaunches,initialLaunches,userPropertyHandlers,groupmemberships,repoEntry,businessGroup,courseEnv,deduplicateList,getTranslator(),editable,canEmail,userLastTimeVisible);
    listenTo(coachesTableCtrl);
    mainVC.put(""String_Node_Str"",coachesTableCtrl.getInitialComponent());
  }
  if (showParticipants && !participants.isEmpty()) {
    participantsTableCtrl=new MembersTableController(ureq,wControl,participants,duplicateCatcher,recentLaunches,initialLaunches,userPropertyHandlers,groupmemberships,repoEntry,businessGroup,courseEnv,deduplicateList,getTranslator(),editable,canEmail,userLastTimeVisible);
    listenTo(participantsTableCtrl);
    mainVC.put(""String_Node_Str"",participantsTableCtrl.getInitialComponent());
  }
  if (showWaiting && !waiting.isEmpty()) {
    waitingTableCtrl=new MembersTableController(ureq,wControl,waiting,duplicateCatcher,recentLaunches,initialLaunches,userPropertyHandlers,groupmemberships,repoEntry,businessGroup,courseEnv,deduplicateList,getTranslator(),editable,canEmail,userLastTimeVisible);
    listenTo(waitingTableCtrl);
    mainVC.put(""String_Node_Str"",waitingTableCtrl.getInitialComponent());
  }
  putInitialPanel(mainVC);
}","public MembersListDisplayRunController(UserRequest ureq,WindowControl wControl,Translator translator,CourseEnvironment courseEnv,BusinessGroup businessGroup,List<Identity> owners,List<Identity> coaches,List<Identity> participants,List<Identity> waiting,boolean canEmail,boolean canDownload,boolean deduplicateList,boolean showOwners,boolean showCoaches,boolean showParticipants,boolean showWaiting,boolean editable){
  super(ureq,wControl);
  Translator fallback=userManager.getPropertyHandlerTranslator(getTranslator());
  setTranslator(Util.createPackageTranslator(translator,fallback,getLocale()));
  mainVC=createVelocityContainer(""String_Node_Str"");
  this.courseEnv=courseEnv;
  this.businessGroup=businessGroup;
  this.repoEntry=courseEnv != null ? courseEnv.getCourseGroupManager().getCourseEntry() : null;
  Roles roles=ureq.getUserSession().getRoles();
  boolean isAdministrativeUser=securityModule.isUserAllowedAdminProps(roles);
  userPropertyHandlers=userManager.getUserPropertyHandlersFor(MembersDisplayRunController.USER_PROPS_LIST_ID,isAdministrativeUser);
  this.owners=owners;
  this.coaches=coaches;
  this.participants=participants;
  this.waiting=waiting;
  this.showOwners=showOwners;
  this.showCoaches=showCoaches;
  this.showParticipants=showParticipants;
  this.showWaiting=showWaiting;
  if (canEmail) {
    allEmailLink=LinkFactory.createLink(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getTranslator(),mainVC,this,Link.BUTTON);
    allEmailLink.setIconLeftCSS(""String_Node_Str"");
  }
  IdentityEnvironment idEnv=ureq.getUserSession().getIdentityEnvironment();
  Identity ownId=idEnv.getIdentity();
  if (editable && (roles.isOLATAdmin() || roles.isGroupManager() || owners.contains(ownId)|| coaches.contains(ownId)|| (canDownload && !waiting.contains(ownId)))) {
    downloadLink=LinkFactory.createLink(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getTranslator(),mainVC,this,Link.BUTTON);
    downloadLink.setIconLeftCSS(""String_Node_Str"");
    printLink=LinkFactory.createButton(""String_Node_Str"",mainVC,this);
    printLink.setIconLeftCSS(""String_Node_Str"");
    printLink.setPopup(new LinkPopupSettings(700,500,""String_Node_Str""));
  }
  Comparator<Identity> idComparator=new IdentityComparator();
  Collections.sort(owners,idComparator);
  ownerList=convertIdentitiesToMembers(owners);
  Collections.sort(coaches,idComparator);
  coachList=convertIdentitiesToMembers(coaches);
  Collections.sort(participants,idComparator);
  participantList=convertIdentitiesToMembers(participants);
  Collections.sort(waiting,idComparator);
  waitingtList=convertIdentitiesToMembers(waiting);
  Set<MemberView> duplicateCatcher=new HashSet<>();
  boolean userLastTimeVisible=cacheGroupMemberships(ureq);
  if (showOwners && !owners.isEmpty()) {
    ownersTableCtrl=new MembersTableController(ureq,wControl,owners,duplicateCatcher,recentLaunches,initialLaunches,userPropertyHandlers,groupmemberships,repoEntry,businessGroup,courseEnv,deduplicateList,getTranslator(),editable,canEmail,userLastTimeVisible);
    listenTo(ownersTableCtrl);
    mainVC.put(""String_Node_Str"",ownersTableCtrl.getInitialComponent());
  }
  if (showCoaches && !coaches.isEmpty()) {
    coachesTableCtrl=new MembersTableController(ureq,wControl,coaches,duplicateCatcher,recentLaunches,initialLaunches,userPropertyHandlers,groupmemberships,repoEntry,businessGroup,courseEnv,deduplicateList,getTranslator(),editable,canEmail,userLastTimeVisible);
    listenTo(coachesTableCtrl);
    mainVC.put(""String_Node_Str"",coachesTableCtrl.getInitialComponent());
  }
  if (showParticipants && !participants.isEmpty()) {
    participantsTableCtrl=new MembersTableController(ureq,wControl,participants,duplicateCatcher,recentLaunches,initialLaunches,userPropertyHandlers,groupmemberships,repoEntry,businessGroup,courseEnv,deduplicateList,getTranslator(),editable,canEmail,userLastTimeVisible);
    listenTo(participantsTableCtrl);
    mainVC.put(""String_Node_Str"",participantsTableCtrl.getInitialComponent());
  }
  if (showWaiting && !waiting.isEmpty()) {
    waitingTableCtrl=new MembersTableController(ureq,wControl,waiting,duplicateCatcher,recentLaunches,initialLaunches,userPropertyHandlers,groupmemberships,repoEntry,businessGroup,courseEnv,deduplicateList,getTranslator(),editable,canEmail,userLastTimeVisible);
    listenTo(waitingTableCtrl);
    mainVC.put(""String_Node_Str"",waitingTableCtrl.getInitialComponent());
  }
  putInitialPanel(mainVC);
}"
69312,"private void doPrint(UserRequest ureq){
  ControllerCreator printControllerCreator=new ControllerCreator(){
    @Override public Controller createController(    UserRequest lureq,    WindowControl lwControl){
      lwControl.getWindowBackOffice().getChiefController().addBodyCssClass(""String_Node_Str"");
      return new MembersPrintController(lureq,lwControl,userPropertyHandlers,getTranslator(),ownerList,coachList,participantList,waitingtList,showOwners,showCoaches,showParticipants,showWaiting,courseEnv != null ? courseEnv.getCourseTitle() : businessGroup.getName());
    }
  }
;
  ControllerCreator layoutCtrlr=BaseFullWebappPopupLayoutFactory.createPrintPopupLayout(printControllerCreator);
  openInNewBrowserWindow(ureq,layoutCtrlr);
}","private void doPrint(UserRequest ureq){
  ControllerCreator printControllerCreator=new ControllerCreator(){
    @Override public Controller createController(    UserRequest lureq,    WindowControl lwControl){
      lwControl.getWindowBackOffice().getChiefController().addBodyCssClass(""String_Node_Str"");
      return new MembersPrintController(lureq,lwControl,getTranslator(),ownerList,coachList,participantList,waitingtList,showOwners,showCoaches,showParticipants,showWaiting,courseEnv != null ? courseEnv.getCourseTitle() : businessGroup.getName());
    }
  }
;
  ControllerCreator layoutCtrlr=BaseFullWebappPopupLayoutFactory.createPrintPopupLayout(printControllerCreator);
  openInNewBrowserWindow(ureq,layoutCtrlr);
}"
69313,"public MembersPrintController(UserRequest ureq,WindowControl wControl,List<UserPropertyHandler> userPropertyHandlers,Translator translator,List<Member> owners,List<Member> coaches,List<Member> participants,List<Member> waiting,boolean showOwners,boolean showCoaches,boolean showParticipants,boolean showWaiting,String title){
  super(ureq,wControl);
  setTranslator(Util.createPackageTranslator(translator,getTranslator(),getLocale()));
  avatarBaseURL=registerCacheableMapper(ureq,""String_Node_Str"",new UserAvatarHQMapper());
  this.userPropertyHandlers=userPropertyHandlers;
  mainVC=createVelocityContainer(""String_Node_Str"");
  mainVC.contextPut(""String_Node_Str"",title);
  mainVC.contextPut(""String_Node_Str"",avatarBaseURL);
  mainVC.contextPut(""String_Node_Str"",userPropertyHandlers);
  if (showOwners && owners != null && owners.size() > 0) {
    initFormMemberList(""String_Node_Str"",translate(""String_Node_Str""),owners);
  }
  if (showCoaches && coaches != null && coaches.size() > 0) {
    initFormMemberList(""String_Node_Str"",translate(""String_Node_Str""),coaches);
  }
  if (showParticipants && participants != null && participants.size() > 0) {
    initFormMemberList(""String_Node_Str"",translate(""String_Node_Str""),participants);
  }
  if (showWaiting && waiting != null && waiting.size() > 0) {
    initFormMemberList(""String_Node_Str"",translate(""String_Node_Str""),waiting);
  }
  MainPanel mainPanel=new MainPanel(""String_Node_Str"");
  mainPanel.setContent(mainVC);
  putInitialPanel(mainPanel);
}","public MembersPrintController(UserRequest ureq,WindowControl wControl,Translator translator,List<Member> owners,List<Member> coaches,List<Member> participants,List<Member> waiting,boolean showOwners,boolean showCoaches,boolean showParticipants,boolean showWaiting,String title){
  super(ureq,wControl);
  setTranslator(Util.createPackageTranslator(translator,getTranslator(),getLocale()));
  mainVC=createVelocityContainer(""String_Node_Str"");
  mainVC.contextPut(""String_Node_Str"",title);
  avatarBaseURL=registerCacheableMapper(ureq,""String_Node_Str"",new UserAvatarHQMapper());
  mainVC.contextPut(""String_Node_Str"",avatarBaseURL);
  Roles roles=ureq.getUserSession().getRoles();
  boolean isAdministrativeUser=securityModule.isUserAllowedAdminProps(roles);
  userPropertyHandlers=userManager.getUserPropertyHandlersFor(MembersDisplayRunController.USER_PROPS_LIST_ID,isAdministrativeUser);
  userPropertyPrintHandlers=userManager.getUserPropertyHandlersFor(MembersDisplayRunController.USER_PROPS_PRINT_ID,isAdministrativeUser);
  if (showOwners && owners != null && owners.size() > 0) {
    initFormMemberList(""String_Node_Str"",translate(""String_Node_Str""),owners);
  }
  if (showCoaches && coaches != null && coaches.size() > 0) {
    initFormMemberList(""String_Node_Str"",translate(""String_Node_Str""),coaches);
  }
  if (showParticipants && participants != null && participants.size() > 0) {
    initFormMemberList(""String_Node_Str"",translate(""String_Node_Str""),participants);
  }
  if (showWaiting && waiting != null && waiting.size() > 0) {
    initFormMemberList(""String_Node_Str"",translate(""String_Node_Str""),waiting);
  }
  MainPanel mainPanel=new MainPanel(""String_Node_Str"");
  mainPanel.setContent(mainVC);
  putInitialPanel(mainPanel);
}"
69314,"private void initFormMemberList(String name,String label,List<Member> members){
  VelocityContainer listVC=createVelocityContainer(""String_Node_Str"");
  listVC.contextPut(""String_Node_Str"",label);
  listVC.contextPut(""String_Node_Str"",avatarBaseURL);
  listVC.contextPut(""String_Node_Str"",members);
  listVC.contextPut(""String_Node_Str"",userPropertyHandlers);
  listVC.contextPut(""String_Node_Str"",""String_Node_Str"" + name);
  mainVC.put(name,listVC);
}","private void initFormMemberList(String name,String label,List<Member> members){
  VelocityContainer listVC=createVelocityContainer(""String_Node_Str"");
  listVC.contextPut(""String_Node_Str"",label);
  listVC.contextPut(""String_Node_Str"",avatarBaseURL);
  listVC.contextPut(""String_Node_Str"",members);
  listVC.contextPut(""String_Node_Str"",""String_Node_Str"" + name);
  listVC.contextPut(""String_Node_Str"",userPropertyPrintHandlers);
  Map<String,Integer> handlerLookupMap=new HashMap<String,Integer>();
  for (int i=userPropertyHandlers.size(); i-- > 0; ) {
    UserPropertyHandler handler=userPropertyHandlers.get(i);
    handlerLookupMap.put(handler.getName(),i);
  }
  listVC.contextPut(""String_Node_Str"",handlerLookupMap);
  mainVC.put(name,listVC);
}"
69315,"private SortKey initColumns(FlexiTableColumnModel columnsModel){
  SortKey defaultSortKey=null;
  String editAction=""String_Node_Str"";
  if (chatEnabled && editable) {
    DefaultFlexiColumnModel chatCol=new DefaultFlexiColumnModel(Cols.online.i18n(),Cols.online.ordinal());
    chatCol.setExportable(false);
    columnsModel.addFlexiColumnModel(chatCol);
  }
  int colPos=USER_PROPS_OFFSET;
  for (  UserPropertyHandler userPropertyHandler : userPropertyHandlers) {
    if (userPropertyHandler == null)     continue;
    String propName=userPropertyHandler.getName();
    boolean visible=userManager.isMandatoryUserProperty(USER_PROPS_ID,userPropertyHandler);
    String myEditAction=editAction;
    FlexiColumnModel col;
    if (UserConstants.FIRSTNAME.equals(propName) || UserConstants.LASTNAME.equals(propName) || UserConstants.EMAIL.equals(propName)) {
      if (UserConstants.EMAIL.equals(propName)) {
        myEditAction=""String_Node_Str"";
        if (!canEmail) {
          continue;
        }
      }
      col=new DefaultFlexiColumnModel(userPropertyHandler.i18nColumnDescriptorLabelKey(),colPos,myEditAction,true,propName,new StaticFlexiCellRenderer(myEditAction,new TextFlexiCellRenderer()));
    }
 else {
      col=new DefaultFlexiColumnModel(visible,userPropertyHandler.i18nColumnDescriptorLabelKey(),colPos,true,propName);
    }
    columnsModel.addFlexiColumnModel(col);
    colPos++;
    if (defaultSortKey == null) {
      defaultSortKey=new SortKey(propName,true);
    }
  }
  if (userLastTimeVisible) {
    columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.firstTime.i18n(),Cols.firstTime.ordinal(),true,Cols.firstTime.name()));
    columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.lastTime.i18n(),Cols.lastTime.ordinal(),true,Cols.lastTime.name()));
  }
  return defaultSortKey;
}","private SortKey initColumns(FlexiTableColumnModel columnsModel){
  int colPos=AbstractMemberListController.USER_PROPS_OFFSET;
  SortKey defaultSortKey=null;
  String rowAction=""String_Node_Str"";
  if (chatEnabled && editable) {
    DefaultFlexiColumnModel chatCol=new DefaultFlexiColumnModel(Cols.online.i18n(),Cols.online.ordinal());
    chatCol.setExportable(false);
    columnsModel.addFlexiColumnModel(chatCol);
  }
  for (  UserPropertyHandler userPropertyHandler : userPropertyHandlers) {
    if (userPropertyHandler == null)     continue;
    String propName=userPropertyHandler.getName();
    boolean visible=userManager.isMandatoryUserProperty(MembersDisplayRunController.USER_PROPS_LIST_ID,userPropertyHandler);
    String emailRowAction=rowAction;
    FlexiColumnModel col;
    if (UserConstants.FIRSTNAME.equals(propName) || UserConstants.LASTNAME.equals(propName) || UserConstants.EMAIL.equals(propName)) {
      if (UserConstants.EMAIL.equals(propName) && canEmail) {
        emailRowAction=""String_Node_Str"";
      }
      col=new DefaultFlexiColumnModel(userPropertyHandler.i18nColumnDescriptorLabelKey(),colPos,emailRowAction,true,propName,new StaticFlexiCellRenderer(emailRowAction,new TextFlexiCellRenderer()));
    }
 else {
      col=new DefaultFlexiColumnModel(visible,userPropertyHandler.i18nColumnDescriptorLabelKey(),colPos,true,propName);
    }
    columnsModel.addFlexiColumnModel(col);
    colPos++;
    if (defaultSortKey == null) {
      defaultSortKey=new SortKey(propName,true);
    }
  }
  if (userLastTimeVisible) {
    columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.firstTime.i18n(),Cols.firstTime.ordinal(),true,Cols.firstTime.name()));
    columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.lastTime.i18n(),Cols.lastTime.ordinal(),true,Cols.lastTime.name()));
  }
  return defaultSortKey;
}"
69316,"private void activateTopUsers(){
  int all=horizontalRadioButtons.getSelected();
  numTableRows.setVisible(all != 0);
}","private void activateTopUsers(){
  int all=bestOnlyEl.getSelected();
  numTableRows.setVisible(all != 0);
}"
69317,"private void activateForm(boolean init){
  boolean formactive=allowHighScore.isSelected(0);
  MultipleSelectionElement[] checkboxes={showPosition,showPodium,showHistogram,showListing,displayAnonymous};
  for (int i=0; i < checkboxes.length; i++) {
    checkboxes[i].setEnabled(formactive);
    if (!init) {
      if (formactive) {
        checkboxes[i].select(""String_Node_Str"",true);
      }
 else {
        checkboxes[i].uncheckAll();
      }
    }
  }
  if (!init) {
    horizontalRadioButtons.setVisible(formactive);
    horizontalRadioButtons.select(yesOrNoKeys[1],true);
    numTableRows.setVisible(formactive);
    dateStart.setDate(null);
  }
}","private void activateForm(boolean init){
  boolean formactive=allowHighScore.isSelected(0);
  MultipleSelectionElement[] checkboxes={showPosition,showPodium,showHistogram,showListing,displayAnonymous};
  for (int i=0; i < checkboxes.length; i++) {
    checkboxes[i].setEnabled(formactive);
    if (!init) {
      if (formactive) {
        checkboxes[i].select(""String_Node_Str"",true);
      }
 else {
        checkboxes[i].uncheckAll();
      }
    }
  }
  if (!init) {
    bestOnlyEl.setVisible(formactive);
    bestOnlyEl.select(yesOrNoKeys[1],true);
    numTableRows.setVisible(formactive);
    dateStart.setDate(null);
  }
}"
69318,"public HighScoreEditController(UserRequest ureq,WindowControl wControl,CourseNode msNode){
  super(ureq,wControl,FormBasicController.LAYOUT_DEFAULT);
  this.msNode=msNode;
  initForm(ureq);
}","public HighScoreEditController(UserRequest ureq,WindowControl wControl,ModuleConfiguration config){
  super(ureq,wControl,FormBasicController.LAYOUT_DEFAULT);
  this.config=config;
  initForm(ureq);
}"
69319,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormTitle(""String_Node_Str"");
  setFormDescription(""String_Node_Str"");
  setFormContextHelp(""String_Node_Str"");
  config=msNode.getModuleConfiguration();
  allowHighScore=uifactory.addCheckboxesHorizontal(""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  allowHighScore.addActionListener(FormEvent.ONCLICK);
  boolean allowhighscore=config.getBooleanSafe(CONFIG_KEY_HIGHSCORE,false);
  if (allowhighscore) {
    allowHighScore.select(""String_Node_Str"",allowhighscore);
  }
  dateStart=new JSDateChooser(""String_Node_Str"",getLocale());
  dateStart.setLabel(""String_Node_Str"",null);
  dateStart.setExampleKey(""String_Node_Str"",null);
  dateStart.setDateChooserTimeEnabled(true);
  dateStart.setValidDateCheck(""String_Node_Str"");
  formLayout.add(dateStart);
  Date start=config.getBooleanEntry(CONFIG_KEY_DATESTART) != null ? (Date)config.get(CONFIG_KEY_DATESTART) : null;
  dateStart.setDate(start);
  displayAnonymous=uifactory.addCheckboxesHorizontal(""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  if (config.getBooleanSafe(CONFIG_KEY_ANONYMIZE,false)) {
    displayAnonymous.select(""String_Node_Str"",true);
  }
  uifactory.addSpacerElement(""String_Node_Str"",formLayout,false);
  showPosition=uifactory.addCheckboxesHorizontal(""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{translate(""String_Node_Str"")});
  showPosition.addActionListener(FormEvent.ONCLICK);
  boolean showposition=config.getBooleanSafe(CONFIG_KEY_POSITION,false);
  if (showposition) {
    showPosition.select(""String_Node_Str"",true);
  }
  showPodium=uifactory.addCheckboxesHorizontal(""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{translate(""String_Node_Str"")});
  showPodium.addActionListener(FormEvent.ONCLICK);
  if (config.getBooleanSafe(CONFIG_KEY_PODIUM,false)) {
    showPodium.select(""String_Node_Str"",true);
  }
  showHistogram=uifactory.addCheckboxesHorizontal(""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{translate(""String_Node_Str"")});
  showHistogram.addActionListener(FormEvent.ONCLICK);
  if (config.getBooleanSafe(CONFIG_KEY_HISTOGRAM,false)) {
    showHistogram.select(""String_Node_Str"",true);
  }
  showListing=uifactory.addCheckboxesHorizontal(""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{translate(""String_Node_Str"")});
  showListing.addActionListener(FormEvent.ONCLICK);
  boolean listing=config.getBooleanSafe(CONFIG_KEY_LISTING,false);
  if (listing) {
    showListing.select(""String_Node_Str"",true);
  }
  final String[] yesOrNoOptions=new String[yesOrNoKeys.length];
  for (int i=0; i < yesOrNoKeys.length; i++) {
    yesOrNoOptions[i]=translate(yesOrNoKeys[i]);
  }
  horizontalRadioButtons=uifactory.addRadiosHorizontal(""String_Node_Str"",formLayout,yesOrNoKeys,yesOrNoOptions);
  int showAll=config.getBooleanEntry(CONFIG_KEY_BESTONLY) != null ? (int)config.get(CONFIG_KEY_BESTONLY) : 1;
  horizontalRadioButtons.select(yesOrNoKeys[showAll],true);
  horizontalRadioButtons.addActionListener(FormEvent.ONCLICK);
  horizontalRadioButtons.setVisible(listing);
  numTableRows=uifactory.addIntegerElement(""String_Node_Str"",""String_Node_Str"",10,formLayout);
  numTableRows.setMandatory(true);
  numTableRows.setNotEmptyCheck(""String_Node_Str"");
  numTableRows.setMinValueCheck(1,""String_Node_Str"");
  numTableRows.setMaxValueCheck(100000,""String_Node_Str"");
  numTableRows.setIntValueCheck(""String_Node_Str"");
  if (showAll == 0 || !listing) {
    numTableRows.setVisible(false);
  }
  int numuser=config.getBooleanEntry(CONFIG_KEY_NUMUSER) != null ? (int)config.get(CONFIG_KEY_NUMUSER) : 10;
  numTableRows.setIntValue(numuser);
  final FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  formLayout.add(buttonLayout);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout);
  uifactory.addFormCancelButton(""String_Node_Str"",buttonLayout,ureq,getWindowControl());
  activateForm(true);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormTitle(""String_Node_Str"");
  setFormDescription(""String_Node_Str"");
  setFormContextHelp(""String_Node_Str"");
  allowHighScore=uifactory.addCheckboxesHorizontal(""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  allowHighScore.addActionListener(FormEvent.ONCLICK);
  boolean allowhighscore=config.getBooleanSafe(CONFIG_KEY_HIGHSCORE,false);
  if (allowhighscore) {
    allowHighScore.select(""String_Node_Str"",allowhighscore);
  }
  dateStart=new JSDateChooser(""String_Node_Str"",getLocale());
  dateStart.setLabel(""String_Node_Str"",null);
  dateStart.setExampleKey(""String_Node_Str"",null);
  dateStart.setDateChooserTimeEnabled(true);
  dateStart.setValidDateCheck(""String_Node_Str"");
  formLayout.add(dateStart);
  Date start=config.getBooleanEntry(CONFIG_KEY_DATESTART) != null ? (Date)config.get(CONFIG_KEY_DATESTART) : null;
  dateStart.setDate(start);
  displayAnonymous=uifactory.addCheckboxesHorizontal(""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  if (config.getBooleanSafe(CONFIG_KEY_ANONYMIZE,false)) {
    displayAnonymous.select(""String_Node_Str"",true);
  }
  uifactory.addSpacerElement(""String_Node_Str"",formLayout,false);
  showPosition=uifactory.addCheckboxesHorizontal(""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{translate(""String_Node_Str"")});
  showPosition.addActionListener(FormEvent.ONCLICK);
  boolean showposition=config.getBooleanSafe(CONFIG_KEY_POSITION,false);
  if (showposition) {
    showPosition.select(""String_Node_Str"",true);
  }
  showPodium=uifactory.addCheckboxesHorizontal(""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{translate(""String_Node_Str"")});
  showPodium.addActionListener(FormEvent.ONCLICK);
  if (config.getBooleanSafe(CONFIG_KEY_PODIUM,false)) {
    showPodium.select(""String_Node_Str"",true);
  }
  showHistogram=uifactory.addCheckboxesHorizontal(""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{translate(""String_Node_Str"")});
  showHistogram.addActionListener(FormEvent.ONCLICK);
  if (config.getBooleanSafe(CONFIG_KEY_HISTOGRAM,false)) {
    showHistogram.select(""String_Node_Str"",true);
  }
  showListing=uifactory.addCheckboxesHorizontal(""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{translate(""String_Node_Str"")});
  showListing.addActionListener(FormEvent.ONCLICK);
  boolean listing=config.getBooleanSafe(CONFIG_KEY_LISTING,false);
  if (listing) {
    showListing.select(""String_Node_Str"",true);
  }
  final String[] yesOrNoOptions=new String[yesOrNoKeys.length];
  for (int i=0; i < yesOrNoKeys.length; i++) {
    yesOrNoOptions[i]=translate(yesOrNoKeys[i]);
  }
  bestOnlyEl=uifactory.addRadiosHorizontal(""String_Node_Str"",formLayout,yesOrNoKeys,yesOrNoOptions);
  int showAll=config.getBooleanEntry(CONFIG_KEY_BESTONLY) != null ? (int)config.get(CONFIG_KEY_BESTONLY) : 1;
  bestOnlyEl.select(yesOrNoKeys[showAll],true);
  bestOnlyEl.addActionListener(FormEvent.ONCLICK);
  bestOnlyEl.setVisible(listing);
  numTableRows=uifactory.addIntegerElement(""String_Node_Str"",""String_Node_Str"",10,formLayout);
  numTableRows.setMandatory(true);
  numTableRows.setNotEmptyCheck(""String_Node_Str"");
  numTableRows.setMinValueCheck(1,""String_Node_Str"");
  numTableRows.setMaxValueCheck(100000,""String_Node_Str"");
  numTableRows.setIntValueCheck(""String_Node_Str"");
  if (showAll == 0 || !listing) {
    numTableRows.setVisible(false);
  }
  int numuser=config.getBooleanEntry(CONFIG_KEY_NUMUSER) != null ? (int)config.get(CONFIG_KEY_NUMUSER) : 10;
  numTableRows.setIntValue(numuser);
  final FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  formLayout.add(buttonLayout);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout);
  uifactory.addFormCancelButton(""String_Node_Str"",buttonLayout,ureq,getWindowControl());
  activateForm(true);
}"
69320,"@Override protected void formInnerEvent(UserRequest ureq,FormItem source,FormEvent event){
  if (source == allowHighScore) {
    activateForm(false);
  }
 else   if (source == showListing) {
    activateListing();
  }
 else   if (source == horizontalRadioButtons) {
    activateTopUsers();
  }
  if (allowHighScore.isSelected(0) && (!showPosition.isSelected(0) && !showPodium.isSelected(0) && !showListing.isSelected(0)&& !showHistogram.isSelected(0))) {
    allowHighScore.setErrorKey(""String_Node_Str"",null);
  }
 else {
    allowHighScore.clearError();
  }
}","@Override protected void formInnerEvent(UserRequest ureq,FormItem source,FormEvent event){
  if (source == allowHighScore) {
    activateForm(false);
  }
 else   if (source == showListing) {
    activateListing();
  }
 else   if (source == bestOnlyEl) {
    activateTopUsers();
  }
  if (allowHighScore.isSelected(0) && (!showPosition.isSelected(0) && !showPodium.isSelected(0) && !showListing.isSelected(0)&& !showHistogram.isSelected(0))) {
    allowHighScore.setErrorKey(""String_Node_Str"",null);
  }
 else {
    allowHighScore.clearError();
  }
}"
69321,"private void activateListing(){
  boolean listingactive=showListing.isSelected(0);
  horizontalRadioButtons.setVisible(listingactive);
  horizontalRadioButtons.select(yesOrNoKeys[1],true);
  numTableRows.setVisible(listingactive);
}","private void activateListing(){
  boolean listingactive=showListing.isSelected(0);
  bestOnlyEl.setVisible(listingactive);
  bestOnlyEl.select(yesOrNoKeys[1],true);
  numTableRows.setVisible(listingactive);
}"
69322,"@Override protected void formOK(UserRequest ureq){
  fireEvent(ureq,Event.DONE_EVENT);
}","@Override protected void formOK(UserRequest ureq){
  config.set(CONFIG_KEY_HIGHSCORE,allowHighScore.isSelected(0));
  config.set(CONFIG_KEY_POSITION,showPosition.isSelected(0));
  config.set(CONFIG_KEY_PODIUM,showPodium.isSelected(0));
  config.set(CONFIG_KEY_HISTOGRAM,showHistogram.isSelected(0));
  config.set(CONFIG_KEY_LISTING,showListing.isSelected(0));
  config.set(CONFIG_KEY_DATESTART,dateStart.getDate());
  config.set(CONFIG_KEY_ANONYMIZE,displayAnonymous.isSelected(0));
  if (showListing.isSelected(0)) {
    config.set(CONFIG_KEY_BESTONLY,bestOnlyEl.getSelected());
    config.set(CONFIG_KEY_NUMUSER,numTableRows.getIntValue());
  }
  fireEvent(ureq,Event.DONE_EVENT);
}"
69323,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  VelocityContainer mainVC=this.flc.getFormItemComponent();
  mainVC.put(""String_Node_Str"",new StatisticsComponent(""String_Node_Str""));
  if (viewHistogram) {
    VelocityContainer scoreHistogramVC=createVelocityContainer(""String_Node_Str"");
    HighScoreRankingResults modifiedData=highScoreManager.processHistogramData(allScores,lowerBorder,upperBorder);
    allScores=modifiedData.getModifiedScores();
    scoreHistogramVC.contextPut(""String_Node_Str"",BarSeries.datasToString(allScores));
    scoreHistogramVC.contextPut(""String_Node_Str"",ownIdIndices.size() > 0 ? highScoreManager.calculateHistogramCutvalue(allMembers.get(ownIdIndices.get(0)).getScore(),modifiedData.getClasswidth(),modifiedData.getMin()) : -1000);
    long classwidth=modifiedData.getClasswidth();
    scoreHistogramVC.contextPut(""String_Node_Str"",classwidth);
    UserAvatarMapper mapper=new UserAvatarMapper(false);
    String mapperPath=registerMapper(ureq,mapper);
    String identityMapperPath=mapper.createPathFor(mapperPath,ownIdentity);
    scoreHistogramVC.contextPut(""String_Node_Str"",identityMapperPath);
    mainVC.put(""String_Node_Str"",scoreHistogramVC);
  }
  if (viewPodium) {
    String[] localizer={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    int maxPerson=6;
    boolean showPortraits=!anonymous && allPodium.get(0).size() <= maxPerson && allPodium.get(1).size() <= maxPerson && allPodium.get(2).size() <= maxPerson;
    for (int i=0; i < localizer.length; i++) {
      int sizePerPos=allPodium.get(i).size();
      StringBuilder sb=new StringBuilder();
      if (sizePerPos > 2) {
        int reduce=0;
        if (allPodium.get(i).get(0).getIdentity().equals(ownIdentity)) {
          sb.append(userManager.getUserDisplayName(ownIdentity));
          ++reduce;
        }
        if (sizePerPos > 6 || anonymous) {
          mainVC.contextPut(""String_Node_Str"" + (i + 1),(sizePerPos - reduce) + ""String_Node_Str"" + (reduce == 1 ? translate(""String_Node_Str"") : translate(""String_Node_Str"")));
        }
 else {
          links[i]=LinkFactory.createLink(null,""String_Node_Str"" + (i + 1),""String_Node_Str"",(sizePerPos - reduce) + ""String_Node_Str"" + (reduce == 1 ? translate(""String_Node_Str"") : translate(""String_Node_Str"")),getTranslator(),mainVC,this,16);
        }
      }
 else {
        for (        HighScoreTableEntry te : allPodium.get(i)) {
          if (!anonymous || te.getIdentity().equals(ownIdentity)) {
            sb.append(userManager.getUserDisplayName(te.getIdentity()));
            sb.append(""String_Node_Str"");
          }
        }
      }
      mainVC.contextPut(localizer[i],sizePerPos > 0 ? sb.toString() : translate(""String_Node_Str""));
      mainVC.contextPut(""String_Node_Str"" + (i + 1),sizePerPos > 0 ? allPodium.get(i).get(0).getScore() : null);
      if (sizePerPos > 0 && showPortraits) {
        mainVC.contextPut(""String_Node_Str"" + (i + 1),sizePerPos);
        for (int j=0; j < sizePerPos; j++) {
          Identity currentID=allPodium.get(i).get(j).getIdentity();
          boolean choosePortrait=!anonymous || ownIdentity.equals(currentID);
          DisplayPortraitController portrait=new DisplayPortraitController(ureq,getWindowControl(),currentID,false,choosePortrait,!choosePortrait);
          Component portraitComponent=portrait.getInitialComponent();
          mainVC.put(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (j + 1),portraitComponent);
        }
      }
 else {
        for (int j=0; j < sizePerPos; j++) {
          Identity currentID=allPodium.get(i).get(j).getIdentity();
          if (ownIdentity.equals(currentID)) {
            DisplayPortraitController portrait=new DisplayPortraitController(ureq,getWindowControl(),currentID,true,true,false);
            mainVC.put(""String_Node_Str"" + (i + 1),portrait.getInitialComponent());
          }
        }
      }
    }
  }
  if (viewTable) {
    FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",HighScoreTableEntry.RANK));
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",HighScoreTableEntry.SCORE));
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",HighScoreTableEntry.NAME));
    if (tableSize < allMembers.size()) {
      allMembers.subList(tableSize,allMembers.size()).clear();
    }
    tableDataModel=new FlexiTableDataModelImpl<HighScoreTableEntry>(new HighScoreFlexiTableModel(allMembers,anonymous,translate(""String_Node_Str""),ownIdentity),tableColumnModel);
    FlexiTableElement topTenTable=uifactory.addTableElement(getWindowControl(),""String_Node_Str"",tableDataModel,getTranslator(),formLayout);
    topTenTable.setNumOfRowsEnabled(false);
    topTenTable.setCustomizeColumns(false);
    topTenTable.setCssDelegate(new MarkedMemberCssDelegate(false));
    if (!ownIdMembers.isEmpty()) {
      tableDataModel2=new FlexiTableDataModelImpl<HighScoreTableEntry>(new HighScoreFlexiTableModel(ownIdMembers,anonymous,translate(""String_Node_Str""),ownIdentity),tableColumnModel);
      FlexiTableElement tableElement=uifactory.addTableElement(getWindowControl(),""String_Node_Str"",tableDataModel2,getTranslator(),formLayout);
      tableElement.setNumOfRowsEnabled(false);
      tableElement.setCustomizeColumns(false);
      tableElement.setCssDelegate(new MarkedMemberCssDelegate(true));
    }
  }
  if (viewPosition && ownIdIndices.size() > 0) {
    mainVC.contextPut(""String_Node_Str"",translate(""String_Node_Str"",new String[]{String.valueOf(highscoreDataModel.getOwnTableEntry().getRank()),String.valueOf(allScores.length - ownIdIndices.get(0))}));
  }
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  VelocityContainer mainVC=this.flc.getFormItemComponent();
  mainVC.put(""String_Node_Str"",new StatisticsComponent(""String_Node_Str""));
  if (viewHistogram) {
    VelocityContainer scoreHistogramVC=createVelocityContainer(""String_Node_Str"");
    HighScoreRankingResults modifiedData=highScoreManager.processHistogramData(allScores,lowerBorder,upperBorder);
    allScores=modifiedData.getModifiedScores();
    scoreHistogramVC.contextPut(""String_Node_Str"",BarSeries.datasToString(allScores));
    scoreHistogramVC.contextPut(""String_Node_Str"",ownIdIndices.size() > 0 ? highScoreManager.calculateHistogramCutvalue(allMembers.get(ownIdIndices.get(0)).getScore(),modifiedData.getClasswidth(),modifiedData.getMin()) : -1000);
    long classwidth=modifiedData.getClasswidth();
    scoreHistogramVC.contextPut(""String_Node_Str"",classwidth);
    UserAvatarMapper mapper=new UserAvatarMapper(false);
    String mapperPath=registerMapper(ureq,mapper);
    String identityMapperPath=mapper.createPathFor(mapperPath,ownIdentity);
    scoreHistogramVC.contextPut(""String_Node_Str"",identityMapperPath);
    mainVC.put(""String_Node_Str"",scoreHistogramVC);
  }
  if (viewPodium) {
    String[] localizer={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    int maxPerson=6;
    boolean showPortraits=!anonymous && allPodium.get(0).size() <= maxPerson && allPodium.get(1).size() <= maxPerson && allPodium.get(2).size() <= maxPerson;
    for (int i=0; i < localizer.length; i++) {
      int sizePerPos=allPodium.get(i).size();
      StringBuilder sb=new StringBuilder();
      if (sizePerPos > 2) {
        int reduce=0;
        if (allPodium.get(i).get(0).getIdentity().equals(ownIdentity)) {
          sb.append(userManager.getUserDisplayName(ownIdentity));
          ++reduce;
        }
        if (sizePerPos > 6 || anonymous) {
          mainVC.contextPut(""String_Node_Str"" + (i + 1),(sizePerPos - reduce) + ""String_Node_Str"" + (reduce == 1 ? translate(""String_Node_Str"") : translate(""String_Node_Str"")));
        }
 else {
          links[i]=LinkFactory.createLink(null,""String_Node_Str"" + (i + 1),""String_Node_Str"",(sizePerPos - reduce) + ""String_Node_Str"" + (reduce == 1 ? translate(""String_Node_Str"") : translate(""String_Node_Str"")),getTranslator(),mainVC,this,16);
        }
      }
 else {
        for (        HighScoreTableEntry te : allPodium.get(i)) {
          if (!anonymous || te.getIdentity().equals(ownIdentity)) {
            sb.append(userManager.getUserDisplayName(te.getIdentity()));
            sb.append(""String_Node_Str"");
          }
        }
      }
      mainVC.contextPut(localizer[i],sizePerPos > 0 ? sb.toString() : translate(""String_Node_Str""));
      mainVC.contextPut(""String_Node_Str"" + (i + 1),sizePerPos > 0 ? allPodium.get(i).get(0).getScore() : null);
      if (sizePerPos > 0 && showPortraits) {
        mainVC.contextPut(""String_Node_Str"" + (i + 1),sizePerPos);
        for (int j=0; j < sizePerPos; j++) {
          Identity currentID=allPodium.get(i).get(j).getIdentity();
          boolean choosePortrait=!anonymous || ownIdentity.equals(currentID);
          DisplayPortraitController portrait=new DisplayPortraitController(ureq,getWindowControl(),currentID,false,choosePortrait,!choosePortrait);
          Component portraitComponent=portrait.getInitialComponent();
          mainVC.put(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (j + 1),portraitComponent);
        }
      }
 else {
        for (int j=0; j < sizePerPos; j++) {
          Identity currentID=allPodium.get(i).get(j).getIdentity();
          if (ownIdentity.equals(currentID)) {
            DisplayPortraitController portrait=new DisplayPortraitController(ureq,getWindowControl(),currentID,true,true,false);
            mainVC.put(""String_Node_Str"" + (i + 1),portrait.getInitialComponent());
          }
        }
      }
    }
  }
  if (viewTable) {
    FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",HighScoreTableEntry.RANK));
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",HighScoreTableEntry.SCORE));
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",HighScoreTableEntry.NAME));
    if (tableSize < allMembers.size()) {
      allMembers.subList(tableSize,allMembers.size()).clear();
    }
    tableDataModel=new FlexiTableDataModelImpl<HighScoreTableEntry>(new HighScoreFlexiTableModel(allMembers,anonymous,translate(""String_Node_Str""),ownIdentity),tableColumnModel);
    FlexiTableElement topTenTable=uifactory.addTableElement(getWindowControl(),""String_Node_Str"",tableDataModel,getTranslator(),formLayout);
    topTenTable.setNumOfRowsEnabled(false);
    topTenTable.setCustomizeColumns(false);
    topTenTable.setCssDelegate(new MarkedMemberCssDelegate(false));
    if (!ownIdMembers.isEmpty()) {
      tableDataModel2=new FlexiTableDataModelImpl<HighScoreTableEntry>(new HighScoreFlexiTableModel(ownIdMembers,anonymous,translate(""String_Node_Str""),ownIdentity),tableColumnModel);
      FlexiTableElement tableElement=uifactory.addTableElement(getWindowControl(),""String_Node_Str"",tableDataModel2,getTranslator(),formLayout);
      tableElement.setNumOfRowsEnabled(false);
      tableElement.setCustomizeColumns(false);
      tableElement.setCssDelegate(new MarkedMemberCssDelegate(true));
    }
  }
  if (viewPosition && ownIdIndices.size() > 0) {
    mainVC.contextPut(""String_Node_Str"",translate(""String_Node_Str"",new String[]{String.valueOf(highscoreDataModel.getOwnTableEntry().getRank()),String.valueOf(allScores.length - ownIdIndices.get(0) - 1)}));
  }
}"
69324,"/** 
 * Constructor for tunneling editor controller 
 * @param config The node module configuration
 * @param ureq The user request
 * @param wControl The window controller
 * @param tuCourseNode The current single page course node
 * @param course
 */
public LTIEditController(ModuleConfiguration config,UserRequest ureq,WindowControl wControl,BreadcrumbPanel stackPanel,BasicLTICourseNode ltCourseNode,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.config=config;
  this.courseNode=ltCourseNode;
  this.editCourseEnv=course.getCourseEnvironment();
  this.stackPanel=stackPanel;
  myContent=createVelocityContainer(""String_Node_Str"");
  previewButton=LinkFactory.createButtonSmall(""String_Node_Str"",myContent,this);
  previewButton.setIconLeftCSS(""String_Node_Str"");
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,courseNode);
  listenTo(highScoreNodeConfigController);
  ltConfigForm=new LTIConfigForm(ureq,wControl,config);
  listenTo(ltConfigForm);
  myContent.put(""String_Node_Str"",ltConfigForm.getInitialComponent());
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  Condition accessCondition=courseNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,ltCourseNode));
  this.listenTo(accessibilityCondContr);
  if (!(ltCourseNode.isConfigValid().isError()))   myContent.contextPut(""String_Node_Str"",Boolean.TRUE);
 else   myContent.contextPut(""String_Node_Str"",Boolean.FALSE);
}","/** 
 * Constructor for tunneling editor controller 
 * @param config The node module configuration
 * @param ureq The user request
 * @param wControl The window controller
 * @param tuCourseNode The current single page course node
 * @param course
 */
public LTIEditController(ModuleConfiguration config,UserRequest ureq,WindowControl wControl,BreadcrumbPanel stackPanel,BasicLTICourseNode ltCourseNode,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.config=config;
  this.courseNode=ltCourseNode;
  this.editCourseEnv=course.getCourseEnvironment();
  this.stackPanel=stackPanel;
  myContent=createVelocityContainer(""String_Node_Str"");
  previewButton=LinkFactory.createButtonSmall(""String_Node_Str"",myContent,this);
  previewButton.setIconLeftCSS(""String_Node_Str"");
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,config);
  listenTo(highScoreNodeConfigController);
  ltConfigForm=new LTIConfigForm(ureq,wControl,config);
  listenTo(ltConfigForm);
  myContent.put(""String_Node_Str"",ltConfigForm.getInitialComponent());
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  Condition accessCondition=courseNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,ltCourseNode));
  this.listenTo(accessibilityCondContr);
  if (!(ltCourseNode.isConfigValid().isError()))   myContent.contextPut(""String_Node_Str"",Boolean.TRUE);
 else   myContent.contextPut(""String_Node_Str"",Boolean.FALSE);
}"
69325,"/** 
 * @see org.olat.core.gui.control.DefaultController#event(org.olat.core.gui.UserRequest,org.olat.core.gui.control.Controller,org.olat.core.gui.control.Event)
 */
public void event(UserRequest ureq,Controller source,Event event){
  if (source == accessibilityCondContr) {
    if (event == Event.CHANGED_EVENT) {
      Condition cond=accessibilityCondContr.getCondition();
      courseNode.setPreConditionAccess(cond);
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == ltConfigForm) {
    if (event == Event.CANCELLED_EVENT) {
    }
 else     if (event == Event.DONE_EVENT) {
      config=ltConfigForm.getUpdatedConfig();
      updateHighscoreTab();
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
      myContent.contextPut(""String_Node_Str"",Boolean.TRUE);
    }
  }
 else   if (source == highScoreNodeConfigController) {
    if (event == Event.DONE_EVENT) {
      highScoreNodeConfigController.updateModuleConfiguration(courseNode.getModuleConfiguration());
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
}","/** 
 * @see org.olat.core.gui.control.DefaultController#event(org.olat.core.gui.UserRequest,org.olat.core.gui.control.Controller,org.olat.core.gui.control.Event)
 */
public void event(UserRequest ureq,Controller source,Event event){
  if (source == accessibilityCondContr) {
    if (event == Event.CHANGED_EVENT) {
      Condition cond=accessibilityCondContr.getCondition();
      courseNode.setPreConditionAccess(cond);
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == ltConfigForm) {
    if (event == Event.CANCELLED_EVENT) {
    }
 else     if (event == Event.DONE_EVENT) {
      config=ltConfigForm.getUpdatedConfig();
      updateHighscoreTab();
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
      myContent.contextPut(""String_Node_Str"",Boolean.TRUE);
    }
  }
 else   if (source == highScoreNodeConfigController) {
    if (event == Event.DONE_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
}"
69326,"/** 
 * @param cpNode
 * @param ureq
 * @param wControl
 * @param course
 */
public CheckListEditController(CheckListCourseNode courseNode,UserRequest ureq,WindowControl wControl,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.courseNode=courseNode;
  Condition accessCondition=courseNode.getPreConditionAccess();
  accessibilityCondCtrl=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(course.getEditorTreeModel(),courseNode));
  listenTo(accessibilityCondCtrl);
  CheckboxManager checkboxManager=CoreSpringFactory.getImpl(CheckboxManager.class);
  int numOfChecks=checkboxManager.countChecks(course,courseNode.getIdent());
  checkboxListEditCtrl=new CheckListBoxListEditController(ureq,wControl,course,courseNode,numOfChecks > 0);
  listenTo(checkboxListEditCtrl);
  configurationCtrl=new CheckListConfigurationController(ureq,wControl,courseNode,numOfChecks > 0);
  listenTo(configurationCtrl);
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,courseNode);
  listenTo(highScoreNodeConfigController);
}","/** 
 * @param cpNode
 * @param ureq
 * @param wControl
 * @param course
 */
public CheckListEditController(CheckListCourseNode courseNode,UserRequest ureq,WindowControl wControl,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.courseNode=courseNode;
  Condition accessCondition=courseNode.getPreConditionAccess();
  accessibilityCondCtrl=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(course.getEditorTreeModel(),courseNode));
  listenTo(accessibilityCondCtrl);
  CheckboxManager checkboxManager=CoreSpringFactory.getImpl(CheckboxManager.class);
  int numOfChecks=checkboxManager.countChecks(course,courseNode.getIdent());
  checkboxListEditCtrl=new CheckListBoxListEditController(ureq,wControl,course,courseNode,numOfChecks > 0);
  listenTo(checkboxListEditCtrl);
  configurationCtrl=new CheckListConfigurationController(ureq,wControl,courseNode,numOfChecks > 0);
  listenTo(configurationCtrl);
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,courseNode.getModuleConfiguration());
  listenTo(highScoreNodeConfigController);
}"
69327,"@Override public void event(UserRequest ureq,Controller source,Event event){
  if (source == accessibilityCondCtrl) {
    if (event == Event.DONE_EVENT || event == Event.CHANGED_EVENT) {
      Condition cond=accessibilityCondCtrl.getCondition();
      courseNode.setPreConditionAccess(cond);
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == configurationCtrl) {
    if (event == Event.DONE_EVENT || event == Event.CHANGED_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
      checkboxListEditCtrl.dispatchEvent(ureq,configurationCtrl,event);
      updateHighscoreTab();
    }
  }
 else   if (source == checkboxListEditCtrl) {
    if (event == Event.DONE_EVENT || event == Event.CHANGED_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
      configurationCtrl.dispatchEvent(ureq,checkboxListEditCtrl,event);
    }
  }
 else   if (source == highScoreNodeConfigController) {
    if (event == Event.DONE_EVENT) {
      highScoreNodeConfigController.updateModuleConfiguration(courseNode.getModuleConfiguration());
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
}","@Override public void event(UserRequest ureq,Controller source,Event event){
  if (source == accessibilityCondCtrl) {
    if (event == Event.DONE_EVENT || event == Event.CHANGED_EVENT) {
      Condition cond=accessibilityCondCtrl.getCondition();
      courseNode.setPreConditionAccess(cond);
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == configurationCtrl) {
    if (event == Event.DONE_EVENT || event == Event.CHANGED_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
      checkboxListEditCtrl.dispatchEvent(ureq,configurationCtrl,event);
      updateHighscoreTab();
    }
  }
 else   if (source == checkboxListEditCtrl) {
    if (event == Event.DONE_EVENT || event == Event.CHANGED_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
      configurationCtrl.dispatchEvent(ureq,checkboxListEditCtrl,event);
    }
  }
 else   if (source == highScoreNodeConfigController) {
    if (event == Event.DONE_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
}"
69328,"public GTAEditController(UserRequest ureq,WindowControl wControl,GTACourseNode gtaNode,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.euce=euce;
  this.gtaNode=gtaNode;
  courseEnv=course.getCourseEnvironment();
  config=gtaNode.getModuleConfiguration();
  Condition accessCondition=gtaNode.getPreConditionAccess();
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  accessibilityCondCtrl=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,gtaNode));
  listenTo(accessibilityCondCtrl);
  workflowCtrl=new GTAWorkflowEditController(ureq,getWindowControl(),gtaNode,euce.getCourseEditorEnv());
  listenTo(workflowCtrl);
  assignmentCtrl=new GTAAssignmentEditController(ureq,getWindowControl(),gtaNode,config,courseEnv,false);
  listenTo(assignmentCtrl);
  submissionCtrl=new GTASubmissionEditController(ureq,getWindowControl(),config);
  listenTo(submissionCtrl);
  manualAssessmentCtrl=new MSEditFormController(ureq,getWindowControl(),config);
  listenTo(manualAssessmentCtrl);
  solutionsCtrl=new GTASampleSolutionsEditController(ureq,getWindowControl(),gtaNode,courseEnv,false);
  listenTo(solutionsCtrl);
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,gtaNode);
  listenTo(highScoreNodeConfigController);
  if (""String_Node_Str"".equals(config.get(GTACourseNode.GTASK_TYPE))) {
    highScoreNodeConfigController.setFormInfoMessage(""String_Node_Str"",getTranslator());
  }
}","public GTAEditController(UserRequest ureq,WindowControl wControl,GTACourseNode gtaNode,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.euce=euce;
  this.gtaNode=gtaNode;
  courseEnv=course.getCourseEnvironment();
  config=gtaNode.getModuleConfiguration();
  Condition accessCondition=gtaNode.getPreConditionAccess();
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  accessibilityCondCtrl=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,gtaNode));
  listenTo(accessibilityCondCtrl);
  workflowCtrl=new GTAWorkflowEditController(ureq,getWindowControl(),gtaNode,euce.getCourseEditorEnv());
  listenTo(workflowCtrl);
  assignmentCtrl=new GTAAssignmentEditController(ureq,getWindowControl(),gtaNode,config,courseEnv,false);
  listenTo(assignmentCtrl);
  submissionCtrl=new GTASubmissionEditController(ureq,getWindowControl(),config);
  listenTo(submissionCtrl);
  manualAssessmentCtrl=new MSEditFormController(ureq,getWindowControl(),config);
  listenTo(manualAssessmentCtrl);
  solutionsCtrl=new GTASampleSolutionsEditController(ureq,getWindowControl(),gtaNode,courseEnv,false);
  listenTo(solutionsCtrl);
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,config);
  listenTo(highScoreNodeConfigController);
  if (""String_Node_Str"".equals(config.get(GTACourseNode.GTASK_TYPE))) {
    highScoreNodeConfigController.setFormInfoMessage(""String_Node_Str"",getTranslator());
  }
}"
69329,"@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (source == accessibilityCondCtrl) {
    if (event == Event.CHANGED_EVENT) {
      Condition cond=accessibilityCondCtrl.getCondition();
      gtaNode.setPreConditionAccess(cond);
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (workflowCtrl == source) {
    if (event == Event.DONE_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
      updateEnabledDisabledTabs();
    }
 else     if (event == Event.CANCELLED_EVENT) {
      removeAsListenerAndDispose(workflowCtrl);
      workflowCtrl=new GTAWorkflowEditController(ureq,getWindowControl(),gtaNode,euce.getCourseEditorEnv());
      listenTo(workflowCtrl);
      myTabbedPane.replaceTab(workflowPos,workflowCtrl.getInitialComponent());
    }
  }
 else   if (assignmentCtrl == source) {
    if (event == Event.DONE_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
 else     if (event == Event.CANCELLED_EVENT) {
      removeAsListenerAndDispose(assignmentCtrl);
      assignmentCtrl=new GTAAssignmentEditController(ureq,getWindowControl(),gtaNode,config,courseEnv,false);
      listenTo(assignmentCtrl);
      myTabbedPane.replaceTab(assignmentPos,assignmentCtrl.getInitialComponent());
    }
  }
 else   if (submissionCtrl == source) {
    if (event == Event.DONE_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
 else     if (event == Event.CANCELLED_EVENT) {
      removeAsListenerAndDispose(submissionCtrl);
      submissionCtrl=new GTASubmissionEditController(ureq,getWindowControl(),config);
      listenTo(submissionCtrl);
      myTabbedPane.replaceTab(submissionPos,submissionCtrl.getInitialComponent());
    }
  }
 else   if (manualAssessmentCtrl == source) {
    if (event == Event.DONE_EVENT) {
      manualAssessmentCtrl.updateModuleConfiguration(config);
      updateEnabledDisabledTabs();
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
 else     if (event == Event.CANCELLED_EVENT) {
      removeAsListenerAndDispose(manualAssessmentCtrl);
      manualAssessmentCtrl=new MSEditFormController(ureq,getWindowControl(),config);
      listenTo(manualAssessmentCtrl);
      myTabbedPane.replaceTab(gradingPos,manualAssessmentCtrl.getInitialComponent());
    }
  }
 else   if (solutionsCtrl == source) {
    if (event == Event.DONE_EVENT || event == Event.CHANGED_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == highScoreNodeConfigController) {
    if (event == Event.DONE_EVENT) {
      highScoreNodeConfigController.updateModuleConfiguration(gtaNode.getModuleConfiguration());
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
  super.event(ureq,source,event);
}","@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (source == accessibilityCondCtrl) {
    if (event == Event.CHANGED_EVENT) {
      Condition cond=accessibilityCondCtrl.getCondition();
      gtaNode.setPreConditionAccess(cond);
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (workflowCtrl == source) {
    if (event == Event.DONE_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
      updateEnabledDisabledTabs();
    }
 else     if (event == Event.CANCELLED_EVENT) {
      removeAsListenerAndDispose(workflowCtrl);
      workflowCtrl=new GTAWorkflowEditController(ureq,getWindowControl(),gtaNode,euce.getCourseEditorEnv());
      listenTo(workflowCtrl);
      myTabbedPane.replaceTab(workflowPos,workflowCtrl.getInitialComponent());
    }
  }
 else   if (assignmentCtrl == source) {
    if (event == Event.DONE_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
 else     if (event == Event.CANCELLED_EVENT) {
      removeAsListenerAndDispose(assignmentCtrl);
      assignmentCtrl=new GTAAssignmentEditController(ureq,getWindowControl(),gtaNode,config,courseEnv,false);
      listenTo(assignmentCtrl);
      myTabbedPane.replaceTab(assignmentPos,assignmentCtrl.getInitialComponent());
    }
  }
 else   if (submissionCtrl == source) {
    if (event == Event.DONE_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
 else     if (event == Event.CANCELLED_EVENT) {
      removeAsListenerAndDispose(submissionCtrl);
      submissionCtrl=new GTASubmissionEditController(ureq,getWindowControl(),config);
      listenTo(submissionCtrl);
      myTabbedPane.replaceTab(submissionPos,submissionCtrl.getInitialComponent());
    }
  }
 else   if (manualAssessmentCtrl == source) {
    if (event == Event.DONE_EVENT) {
      manualAssessmentCtrl.updateModuleConfiguration(config);
      updateEnabledDisabledTabs();
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
 else     if (event == Event.CANCELLED_EVENT) {
      removeAsListenerAndDispose(manualAssessmentCtrl);
      manualAssessmentCtrl=new MSEditFormController(ureq,getWindowControl(),config);
      listenTo(manualAssessmentCtrl);
      myTabbedPane.replaceTab(gradingPos,manualAssessmentCtrl.getInitialComponent());
    }
  }
 else   if (solutionsCtrl == source) {
    if (event == Event.DONE_EVENT || event == Event.CHANGED_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == highScoreNodeConfigController) {
    if (event == Event.DONE_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
  super.event(ureq,source,event);
}"
69330,"public GTARunController(UserRequest ureq,WindowControl wControl,GTACourseNode gtaNode,UserCourseEnvironment userCourseEnv){
  super(ureq,wControl);
  this.gtaNode=gtaNode;
  this.userCourseEnv=userCourseEnv;
  ModuleConfiguration config=gtaNode.getModuleConfiguration();
  RepositoryEntry entry=userCourseEnv.getCourseEnvironment().getCourseGroupManager().getCourseEntry();
  Membership membership=gtaManager.getMembership(getIdentity(),entry,gtaNode);
  if (membership.isCoach() && membership.isParticipant()) {
    mainVC=createVelocityContainer(""String_Node_Str"");
    segmentView=SegmentViewFactory.createSegmentView(""String_Node_Str"",mainVC,this);
    runLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
    segmentView.addSegment(runLink,true);
    coachLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
    segmentView.addSegment(coachLink,false);
    if (isManagementTabAvalaible(config)) {
      manageLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
      segmentView.addSegment(manageLink,false);
    }
    doOpenRun(ureq);
    mainVC.put(""String_Node_Str"",segmentView);
    putInitialPanel(mainVC);
  }
 else   if (isManagementTabAvalaible(config)) {
    mainVC=createVelocityContainer(""String_Node_Str"");
    segmentView=SegmentViewFactory.createSegmentView(""String_Node_Str"",mainVC,this);
    coachLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
    segmentView.addSegment(coachLink,true);
    manageLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
    segmentView.addSegment(manageLink,false);
    doOpenCoach(ureq);
    mainVC.put(""String_Node_Str"",segmentView);
    putInitialPanel(mainVC);
  }
 else   if (membership.isCoach() || userCourseEnv.isAdmin()) {
    createCoach(ureq);
    putInitialPanel(coachCtrl.getInitialComponent());
  }
 else   if (membership.isParticipant()) {
    createRun(ureq);
    putInitialPanel(runCtrl.getInitialComponent());
  }
 else {
    String title=translate(""String_Node_Str"");
    String message=translate(""String_Node_Str"");
    Controller msgCtrl=MessageUIFactory.createInfoMessage(ureq,wControl,title,message);
    listenTo(msgCtrl);
    putInitialPanel(msgCtrl.getInitialComponent());
  }
  if (gtaNode.getModuleConfiguration().getBooleanSafe(MSCourseNode.CONFIG_KEY_HAS_SCORE_FIELD,false)) {
    HighScoreRunController highScoreCtr=new HighScoreRunController(ureq,wControl,userCourseEnv,gtaNode);
    if (highScoreCtr.isViewHighscore()) {
      Component highScoreComponent=highScoreCtr.getInitialComponent();
      mainVC.put(""String_Node_Str"",highScoreComponent);
    }
  }
}","public GTARunController(UserRequest ureq,WindowControl wControl,GTACourseNode gtaNode,UserCourseEnvironment userCourseEnv){
  super(ureq,wControl);
  this.gtaNode=gtaNode;
  this.userCourseEnv=userCourseEnv;
  ModuleConfiguration config=gtaNode.getModuleConfiguration();
  RepositoryEntry entry=userCourseEnv.getCourseEnvironment().getCourseGroupManager().getCourseEntry();
  Membership membership=gtaManager.getMembership(getIdentity(),entry,gtaNode);
  if (membership.isCoach() && membership.isParticipant()) {
    mainVC=createVelocityContainer(""String_Node_Str"");
    segmentView=SegmentViewFactory.createSegmentView(""String_Node_Str"",mainVC,this);
    runLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
    segmentView.addSegment(runLink,true);
    coachLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
    segmentView.addSegment(coachLink,false);
    if (isManagementTabAvalaible(config)) {
      manageLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
      segmentView.addSegment(manageLink,false);
    }
    doOpenRun(ureq);
    mainVC.put(""String_Node_Str"",segmentView);
    putInitialPanel(mainVC);
  }
 else   if (isManagementTabAvalaible(config)) {
    mainVC=createVelocityContainer(""String_Node_Str"");
    segmentView=SegmentViewFactory.createSegmentView(""String_Node_Str"",mainVC,this);
    coachLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
    segmentView.addSegment(coachLink,true);
    manageLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
    segmentView.addSegment(manageLink,false);
    doOpenCoach(ureq);
    mainVC.put(""String_Node_Str"",segmentView);
    putInitialPanel(mainVC);
  }
 else   if (membership.isCoach() || userCourseEnv.isAdmin()) {
    createCoach(ureq);
    putInitialPanel(coachCtrl.getInitialComponent());
  }
 else   if (membership.isParticipant()) {
    createRun(ureq);
    putInitialPanel(runCtrl.getInitialComponent());
  }
 else {
    String title=translate(""String_Node_Str"");
    String message=translate(""String_Node_Str"");
    Controller msgCtrl=MessageUIFactory.createInfoMessage(ureq,wControl,title,message);
    listenTo(msgCtrl);
    putInitialPanel(msgCtrl.getInitialComponent());
  }
}"
69331,"private void init(UserRequest ureq){
  configurationCtrl=new IQConfigurationController(ureq,getWindowControl(),stackPanel,course,courseNode,type);
  listenTo(configurationCtrl);
  layoutConfigurationCtrl=new IQLayoutConfigurationController(ureq,getWindowControl(),course,courseNode,type);
  listenTo(layoutConfigurationCtrl);
  highScoreNodeConfigController=new HighScoreEditController(ureq,getWindowControl(),courseNode);
  listenTo(highScoreNodeConfigController);
  Condition accessCondition=courseNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(course.getEditorTreeModel(),courseNode));
  listenTo(accessibilityCondContr);
}","private void init(UserRequest ureq){
  configurationCtrl=new IQConfigurationController(ureq,getWindowControl(),stackPanel,course,courseNode,type);
  listenTo(configurationCtrl);
  layoutConfigurationCtrl=new IQLayoutConfigurationController(ureq,getWindowControl(),course,courseNode,type);
  listenTo(layoutConfigurationCtrl);
  if (AssessmentInstance.QMD_ENTRY_TYPE_ASSESS.equals(type)) {
    highScoreNodeConfigController=new HighScoreEditController(ureq,getWindowControl(),moduleConfiguration);
    listenTo(highScoreNodeConfigController);
  }
  Condition accessCondition=courseNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(course.getEditorTreeModel(),courseNode));
  listenTo(accessibilityCondContr);
}"
69332,"@Override public void addTabs(TabbedPane tabbedPane){
  myTabbedPane=tabbedPane;
  tabbedPane.addTab(translate(PANE_TAB_ACCESSIBILITY),accessibilityCondContr.getWrappedDefaultAccessConditionVC(translate(""String_Node_Str"")));
  tabbedPane.addTab(translate(PANE_TAB_IQCONFIG_XXX),configurationCtrl.getInitialComponent());
  tabbedPane.addTab(translate(PANE_TAB_IQLAYOUTCONFIG),layoutConfigurationCtrl.getInitialComponent());
  tabbedPane.addTab(translate(PANE_TAB_HIGHSCORE),highScoreNodeConfigController.getInitialComponent());
}","@Override public void addTabs(TabbedPane tabbedPane){
  myTabbedPane=tabbedPane;
  tabbedPane.addTab(translate(PANE_TAB_ACCESSIBILITY),accessibilityCondContr.getWrappedDefaultAccessConditionVC(translate(""String_Node_Str"")));
  tabbedPane.addTab(translate(PANE_TAB_IQCONFIG_XXX),configurationCtrl.getInitialComponent());
  tabbedPane.addTab(translate(PANE_TAB_IQLAYOUTCONFIG),layoutConfigurationCtrl.getInitialComponent());
  if (AssessmentInstance.QMD_ENTRY_TYPE_ASSESS.equals(type)) {
    tabbedPane.addTab(translate(PANE_TAB_HIGHSCORE),highScoreNodeConfigController.getInitialComponent());
  }
}"
69333,"@Override public void event(UserRequest urequest,Controller source,Event event){
  if (source == accessibilityCondContr) {
    if (event == Event.CHANGED_EVENT) {
      Condition cond=accessibilityCondContr.getCondition();
      courseNode.setPreConditionAccess(cond);
      fireEvent(urequest,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == configurationCtrl) {
    if (event == NodeEditController.NODECONFIG_CHANGED_EVENT) {
      fireEvent(urequest,NodeEditController.NODECONFIG_CHANGED_EVENT);
      layoutConfigurationCtrl.updateEditController(urequest);
    }
  }
 else   if (source == highScoreNodeConfigController) {
    if (event == Event.DONE_EVENT) {
      highScoreNodeConfigController.updateModuleConfiguration(courseNode.getModuleConfiguration());
      fireEvent(urequest,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == layoutConfigurationCtrl) {
    if (event == NodeEditController.NODECONFIG_CHANGED_EVENT) {
      fireEvent(urequest,NodeEditController.NODECONFIG_CHANGED_EVENT);
      configurationCtrl.updateEditController(urequest);
      layoutConfigurationCtrl.updateEditController(urequest);
    }
  }
}","@Override public void event(UserRequest urequest,Controller source,Event event){
  if (source == accessibilityCondContr) {
    if (event == Event.CHANGED_EVENT) {
      Condition cond=accessibilityCondContr.getCondition();
      courseNode.setPreConditionAccess(cond);
      fireEvent(urequest,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == configurationCtrl) {
    if (event == NodeEditController.NODECONFIG_CHANGED_EVENT) {
      fireEvent(urequest,NodeEditController.NODECONFIG_CHANGED_EVENT);
      layoutConfigurationCtrl.updateEditController(urequest);
    }
  }
 else   if (source == highScoreNodeConfigController) {
    if (event == Event.DONE_EVENT) {
      fireEvent(urequest,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == layoutConfigurationCtrl) {
    if (event == NodeEditController.NODECONFIG_CHANGED_EVENT) {
      fireEvent(urequest,NodeEditController.NODECONFIG_CHANGED_EVENT);
      configurationCtrl.updateEditController(urequest);
      layoutConfigurationCtrl.updateEditController(urequest);
    }
  }
}"
69334,"public QTI21AssessmentRunController(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,QTICourseNode courseNode){
  super(ureq,wControl,Util.createPackageTranslator(CourseNode.class,ureq.getLocale()));
  setTranslator(Util.createPackageTranslator(AssessmentTestDisplayController.class,getLocale(),getTranslator()));
  this.courseNode=courseNode;
  this.userCourseEnv=userCourseEnv;
  userSession=ureq.getUserSession();
  anonym=userSession.getRoles().isGuestOnly();
  config=courseNode.getModuleConfiguration();
  testEntry=courseNode.getReferencedRepositoryEntry();
  singleUserEventCenter=userSession.getSingleUserEventCenter();
  mainVC=createVelocityContainer(""String_Node_Str"");
  if (courseNode instanceof AssessableCourseNode) {
    AssessableCourseNode assessableCourseNode=(AssessableCourseNode)courseNode;
    if (assessableCourseNode.hasScoreConfigured() || userCourseEnv.isCoach()) {
      HighScoreRunController highScoreCtr=new HighScoreRunController(ureq,getWindowControl(),userCourseEnv,courseNode);
      if (highScoreCtr.isViewHighscore()) {
        Component highScoreComponent=highScoreCtr.getInitialComponent();
        mainVC.put(""String_Node_Str"",highScoreComponent);
      }
    }
  }
  addLoggingResourceable(LoggingResourceable.wrap(courseNode));
  if (courseNode instanceof IQTESTCourseNode) {
    mainVC.contextPut(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (courseNode instanceof IQSELFCourseNode) {
    mainVC.contextPut(""String_Node_Str"",""String_Node_Str"");
  }
  deliveryOptions=getDeliveryOptions();
  overrideOptions=getOverrideOptions();
  init(ureq);
  initAssessment();
  putInitialPanel(mainVC);
}","public QTI21AssessmentRunController(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,QTICourseNode courseNode){
  super(ureq,wControl,Util.createPackageTranslator(CourseNode.class,ureq.getLocale()));
  setTranslator(Util.createPackageTranslator(AssessmentTestDisplayController.class,getLocale(),getTranslator()));
  this.courseNode=courseNode;
  this.userCourseEnv=userCourseEnv;
  userSession=ureq.getUserSession();
  anonym=userSession.getRoles().isGuestOnly();
  config=courseNode.getModuleConfiguration();
  testEntry=courseNode.getReferencedRepositoryEntry();
  singleUserEventCenter=userSession.getSingleUserEventCenter();
  mainVC=createVelocityContainer(""String_Node_Str"");
  addLoggingResourceable(LoggingResourceable.wrap(courseNode));
  if (courseNode instanceof IQTESTCourseNode) {
    mainVC.contextPut(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (courseNode instanceof IQSELFCourseNode) {
    mainVC.contextPut(""String_Node_Str"",""String_Node_Str"");
  }
  deliveryOptions=getDeliveryOptions();
  overrideOptions=getOverrideOptions();
  init(ureq);
  initAssessment(ureq);
  putInitialPanel(mainVC);
}"
69335,"private void initAssessment(){
  boolean enableScoreInfo=config.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLESCOREINFO);
  mainVC.contextPut(""String_Node_Str"",new Boolean(enableScoreInfo));
  int maxAttempts=deliveryOptions.getMaxAttempts();
  if (maxAttempts > 0) {
    mainVC.contextPut(""String_Node_Str"",new Integer(maxAttempts));
  }
 else {
    mainVC.contextPut(""String_Node_Str"",Boolean.FALSE);
  }
  if (courseNode instanceof SelfAssessableCourseNode) {
    SelfAssessableCourseNode acn=(SelfAssessableCourseNode)courseNode;
    ScoreEvaluation scoreEval=acn.getUserScoreEvaluation(userCourseEnv);
    Integer attempts=acn.getUserAttempts(userCourseEnv);
    if (scoreEval != null) {
      mainVC.contextPut(""String_Node_Str"",Boolean.TRUE);
      mainVC.contextPut(""String_Node_Str"",AssessmentHelper.getRoundedScore(scoreEval.getScore()));
      mainVC.contextPut(""String_Node_Str"",(scoreEval.getPassed() == null ? Boolean.FALSE : Boolean.TRUE));
      mainVC.contextPut(""String_Node_Str"",scoreEval.getPassed());
      mainVC.contextPut(""String_Node_Str"",attempts);
    }
  }
 else   if (courseNode instanceof IQTESTCourseNode) {
    IQTESTCourseNode testCourseNode=(IQTESTCourseNode)courseNode;
    AssessmentEntry assessmentEntry=testCourseNode.getUserAssessmentEntry(userCourseEnv);
    if (assessmentEntry == null) {
      mainVC.contextPut(""String_Node_Str"",Boolean.FALSE);
      mainVC.contextPut(""String_Node_Str"",null);
      mainVC.contextPut(""String_Node_Str"",Boolean.FALSE);
      mainVC.contextPut(""String_Node_Str"",Boolean.FALSE);
      mainVC.contextPut(""String_Node_Str"",null);
      mainVC.contextPut(""String_Node_Str"",0);
    }
 else {
      Boolean passed=assessmentEntry.getPassed();
      Boolean blocked=Boolean.FALSE;
      boolean blockAfterSuccess=deliveryOptions.isBlockAfterSuccess();
      if (blockAfterSuccess && passed != null && passed.booleanValue()) {
        blocked=Boolean.TRUE;
      }
      mainVC.contextPut(""String_Node_Str"",blocked);
      Identity identity=userCourseEnv.getIdentityEnvironment().getIdentity();
      mainVC.contextPut(""String_Node_Str"",AssessmentHelper.getRoundedScore(assessmentEntry.getScore()));
      mainVC.contextPut(""String_Node_Str"",(passed == null ? Boolean.FALSE : Boolean.TRUE));
      mainVC.contextPut(""String_Node_Str"",passed);
      StringBuilder comment=Formatter.stripTabsAndReturns(testCourseNode.getUserUserComment(userCourseEnv));
      if (comment != null && comment.length() > 0) {
        mainVC.contextPut(""String_Node_Str"",StringHelper.xssScan(comment));
      }
      Integer attempts=assessmentEntry.getAttempts();
      mainVC.contextPut(""String_Node_Str"",attempts == null ? new Integer(0) : attempts);
      if (!anonym) {
        UserNodeAuditManager am=userCourseEnv.getCourseEnvironment().getAuditManager();
        mainVC.contextPut(""String_Node_Str"",am.getUserNodeLog(courseNode,identity));
      }
      if (deliveryOptions.isDigitalSignature()) {
        AssessmentTestSession session=qtiService.getAssessmentTestSession(assessmentEntry.getAssessmentId());
        if (session != null) {
          File signature=qtiService.getAssessmentResultSignature(session);
          if (signature != null && signature.exists()) {
            signatureDownloadLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
            signatureDownloadLink.setIconLeftCSS(""String_Node_Str"");
            signatureDownloadLink.setTarget(""String_Node_Str"");
            Date issueDate=qtiService.getAssessmentResultSignatureIssueDate(session);
            if (issueDate != null) {
              mainVC.contextPut(""String_Node_Str"",Formatter.getInstance(getLocale()).formatDateAndTime(issueDate));
            }
          }
        }
      }
    }
  }
  exposeResults();
}","private void initAssessment(UserRequest ureq){
  boolean enableScoreInfo=config.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLESCOREINFO);
  mainVC.contextPut(""String_Node_Str"",new Boolean(enableScoreInfo));
  int maxAttempts=deliveryOptions.getMaxAttempts();
  if (maxAttempts > 0) {
    mainVC.contextPut(""String_Node_Str"",new Integer(maxAttempts));
  }
 else {
    mainVC.contextPut(""String_Node_Str"",Boolean.FALSE);
  }
  if (courseNode instanceof AssessableCourseNode) {
    AssessableCourseNode assessableCourseNode=(AssessableCourseNode)courseNode;
    if (assessableCourseNode.hasScoreConfigured() || userCourseEnv.isCoach()) {
      HighScoreRunController highScoreCtr=new HighScoreRunController(ureq,getWindowControl(),userCourseEnv,courseNode);
      if (highScoreCtr.isViewHighscore()) {
        Component highScoreComponent=highScoreCtr.getInitialComponent();
        mainVC.put(""String_Node_Str"",highScoreComponent);
      }
    }
  }
  if (courseNode instanceof SelfAssessableCourseNode) {
    SelfAssessableCourseNode acn=(SelfAssessableCourseNode)courseNode;
    ScoreEvaluation scoreEval=acn.getUserScoreEvaluation(userCourseEnv);
    Integer attempts=acn.getUserAttempts(userCourseEnv);
    if (scoreEval != null) {
      mainVC.contextPut(""String_Node_Str"",Boolean.TRUE);
      mainVC.contextPut(""String_Node_Str"",AssessmentHelper.getRoundedScore(scoreEval.getScore()));
      mainVC.contextPut(""String_Node_Str"",(scoreEval.getPassed() == null ? Boolean.FALSE : Boolean.TRUE));
      mainVC.contextPut(""String_Node_Str"",scoreEval.getPassed());
      mainVC.contextPut(""String_Node_Str"",attempts);
    }
  }
 else   if (courseNode instanceof IQTESTCourseNode) {
    IQTESTCourseNode testCourseNode=(IQTESTCourseNode)courseNode;
    AssessmentEntry assessmentEntry=testCourseNode.getUserAssessmentEntry(userCourseEnv);
    if (assessmentEntry == null) {
      mainVC.contextPut(""String_Node_Str"",Boolean.FALSE);
      mainVC.contextPut(""String_Node_Str"",null);
      mainVC.contextPut(""String_Node_Str"",Boolean.FALSE);
      mainVC.contextPut(""String_Node_Str"",Boolean.FALSE);
      mainVC.contextPut(""String_Node_Str"",null);
      mainVC.contextPut(""String_Node_Str"",0);
    }
 else {
      Boolean passed=assessmentEntry.getPassed();
      Boolean blocked=Boolean.FALSE;
      boolean blockAfterSuccess=deliveryOptions.isBlockAfterSuccess();
      if (blockAfterSuccess && passed != null && passed.booleanValue()) {
        blocked=Boolean.TRUE;
      }
      mainVC.contextPut(""String_Node_Str"",blocked);
      Identity identity=userCourseEnv.getIdentityEnvironment().getIdentity();
      mainVC.contextPut(""String_Node_Str"",AssessmentHelper.getRoundedScore(assessmentEntry.getScore()));
      mainVC.contextPut(""String_Node_Str"",(passed == null ? Boolean.FALSE : Boolean.TRUE));
      mainVC.contextPut(""String_Node_Str"",passed);
      StringBuilder comment=Formatter.stripTabsAndReturns(testCourseNode.getUserUserComment(userCourseEnv));
      if (comment != null && comment.length() > 0) {
        mainVC.contextPut(""String_Node_Str"",StringHelper.xssScan(comment));
      }
      Integer attempts=assessmentEntry.getAttempts();
      mainVC.contextPut(""String_Node_Str"",attempts == null ? new Integer(0) : attempts);
      if (!anonym) {
        UserNodeAuditManager am=userCourseEnv.getCourseEnvironment().getAuditManager();
        mainVC.contextPut(""String_Node_Str"",am.getUserNodeLog(courseNode,identity));
      }
      if (deliveryOptions.isDigitalSignature()) {
        AssessmentTestSession session=qtiService.getAssessmentTestSession(assessmentEntry.getAssessmentId());
        if (session != null) {
          File signature=qtiService.getAssessmentResultSignature(session);
          if (signature != null && signature.exists()) {
            signatureDownloadLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
            signatureDownloadLink.setIconLeftCSS(""String_Node_Str"");
            signatureDownloadLink.setTarget(""String_Node_Str"");
            Date issueDate=qtiService.getAssessmentResultSignatureIssueDate(session);
            if (issueDate != null) {
              mainVC.contextPut(""String_Node_Str"",Formatter.getInstance(getLocale()).formatDateAndTime(issueDate));
            }
          }
        }
      }
    }
  }
  exposeResults();
}"
69336,"@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (source == displayCtrl) {
    if (event == Event.CANCELLED_EVENT) {
      doExitAssessment(ureq,event,false);
      exposeResults();
      showInfo(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(event.getCommand())) {
      doExitAssessment(ureq,event,false);
      exposeResults();
      showInfo(""String_Node_Str"");
    }
 else     if (event instanceof QTI21Event) {
      QTI21Event qe=(QTI21Event)event;
      if (QTI21Event.EXIT.equals(qe.getCommand())) {
        if (!displayCtrl.isResultsVisible()) {
          doExitAssessment(ureq,event,true);
          initAssessment();
        }
      }
 else       if (QTI21Event.CLOSE_RESULTS.equals(qe.getCommand())) {
        doExitAssessment(ureq,event,true);
        initAssessment();
      }
    }
  }
  super.event(ureq,source,event);
}","@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (source == displayCtrl) {
    if (event == Event.CANCELLED_EVENT) {
      doExitAssessment(ureq,event,false);
      exposeResults();
      showInfo(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(event.getCommand())) {
      doExitAssessment(ureq,event,false);
      exposeResults();
      showInfo(""String_Node_Str"");
    }
 else     if (event instanceof QTI21Event) {
      QTI21Event qe=(QTI21Event)event;
      if (QTI21Event.EXIT.equals(qe.getCommand())) {
        if (!displayCtrl.isResultsVisible()) {
          doExitAssessment(ureq,event,true);
          initAssessment(ureq);
        }
      }
 else       if (QTI21Event.CLOSE_RESULTS.equals(qe.getCommand())) {
        doExitAssessment(ureq,event,true);
        initAssessment(ureq);
      }
    }
  }
  super.event(ureq,source,event);
}"
69337,"/** 
 * Constructor for a manual scoring course edit controller
 * @param ureq The user request
 * @param msNode The manual scoring course node
 * @param course
 */
public MSCourseNodeEditController(UserRequest ureq,WindowControl wControl,MSCourseNode msNode,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  setTranslator(Util.createPackageTranslator(HighScoreEditController.class,getLocale(),getTranslator()));
  this.msNode=msNode;
  configurationVC=createVelocityContainer(""String_Node_Str"");
  editScoringConfigButton=LinkFactory.createButtonSmall(""String_Node_Str"",configurationVC,this);
  UserNodeAuditManager auditManager=course.getCourseEnvironment().getAuditManager();
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  Condition accessCondition=msNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,msNode));
  this.listenTo(accessibilityCondContr);
  modConfigController=new MSEditFormController(ureq,wControl,msNode.getModuleConfiguration());
  listenTo(modConfigController);
  configurationVC.put(""String_Node_Str"",modConfigController.getInitialComponent());
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,msNode);
  listenTo(highScoreNodeConfigController);
  hasLogEntries=auditManager.hasUserNodeLogs(msNode);
  configurationVC.contextPut(""String_Node_Str"",new Boolean(hasLogEntries));
  if (hasLogEntries) {
    modConfigController.setDisplayOnly(true);
  }
}","/** 
 * Constructor for a manual scoring course edit controller
 * @param ureq The user request
 * @param msNode The manual scoring course node
 * @param course
 */
public MSCourseNodeEditController(UserRequest ureq,WindowControl wControl,MSCourseNode msNode,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  setTranslator(Util.createPackageTranslator(HighScoreEditController.class,getLocale(),getTranslator()));
  this.msNode=msNode;
  configurationVC=createVelocityContainer(""String_Node_Str"");
  editScoringConfigButton=LinkFactory.createButtonSmall(""String_Node_Str"",configurationVC,this);
  UserNodeAuditManager auditManager=course.getCourseEnvironment().getAuditManager();
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  Condition accessCondition=msNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,msNode));
  this.listenTo(accessibilityCondContr);
  modConfigController=new MSEditFormController(ureq,wControl,msNode.getModuleConfiguration());
  listenTo(modConfigController);
  configurationVC.put(""String_Node_Str"",modConfigController.getInitialComponent());
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,msNode.getModuleConfiguration());
  listenTo(highScoreNodeConfigController);
  hasLogEntries=auditManager.hasUserNodeLogs(msNode);
  configurationVC.contextPut(""String_Node_Str"",new Boolean(hasLogEntries));
  if (hasLogEntries) {
    modConfigController.setDisplayOnly(true);
  }
}"
69338,"/** 
 * @see org.olat.core.gui.control.DefaultController#event(org.olat.core.gui.UserRequest,org.olat.core.gui.control.Controller,org.olat.core.gui.control.Event)
 */
@Override public void event(UserRequest ureq,Controller source,Event event){
  if (source == accessibilityCondContr) {
    if (event == Event.CHANGED_EVENT) {
      Condition cond=accessibilityCondContr.getCondition();
      msNode.setPreConditionAccess(cond);
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == modConfigController) {
    if (event == Event.CANCELLED_EVENT) {
      if (modConfigController != null) {
        removeAsListenerAndDispose(modConfigController);
      }
      modConfigController=new MSEditFormController(ureq,getWindowControl(),msNode.getModuleConfiguration());
      listenTo(modConfigController);
      configurationVC.put(""String_Node_Str"",modConfigController.getInitialComponent());
      if (hasLogEntries) {
        modConfigController.setDisplayOnly(true);
      }
      configurationVC.contextPut(""String_Node_Str"",new Boolean(false));
      return;
    }
 else     if (event == Event.DONE_EVENT) {
      modConfigController.updateModuleConfiguration(msNode.getModuleConfiguration());
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
    updateHighscoreTab();
  }
 else   if (source == highScoreNodeConfigController) {
    if (event == Event.DONE_EVENT) {
      highScoreNodeConfigController.updateModuleConfiguration(msNode.getModuleConfiguration());
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
}","/** 
 * @see org.olat.core.gui.control.DefaultController#event(org.olat.core.gui.UserRequest,org.olat.core.gui.control.Controller,org.olat.core.gui.control.Event)
 */
@Override public void event(UserRequest ureq,Controller source,Event event){
  if (source == accessibilityCondContr) {
    if (event == Event.CHANGED_EVENT) {
      Condition cond=accessibilityCondContr.getCondition();
      msNode.setPreConditionAccess(cond);
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == modConfigController) {
    if (event == Event.CANCELLED_EVENT) {
      if (modConfigController != null) {
        removeAsListenerAndDispose(modConfigController);
      }
      modConfigController=new MSEditFormController(ureq,getWindowControl(),msNode.getModuleConfiguration());
      listenTo(modConfigController);
      configurationVC.put(""String_Node_Str"",modConfigController.getInitialComponent());
      if (hasLogEntries) {
        modConfigController.setDisplayOnly(true);
      }
      configurationVC.contextPut(""String_Node_Str"",new Boolean(false));
      return;
    }
 else     if (event == Event.DONE_EVENT) {
      modConfigController.updateModuleConfiguration(msNode.getModuleConfiguration());
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
    updateHighscoreTab();
  }
 else   if (source == highScoreNodeConfigController) {
    if (event == Event.DONE_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
}"
69339,"public PortfolioCourseNodeEditController(UserRequest ureq,WindowControl wControl,BreadcrumbPanel stackPanel,ICourse course,PortfolioCourseNode node,ModuleConfiguration config,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.config=config;
  this.courseNode=node;
  configForm=new PortfolioConfigForm(ureq,wControl,stackPanel,course,node);
  listenTo(configForm);
  scoringController=new MSEditFormController(ureq,wControl,config);
  scoringContent=scoringController.getInitialComponent();
  listenTo(scoringController);
  textForm=new PortfolioTextForm(ureq,wControl,course,node);
  listenTo(textForm);
  configContent=createVelocityContainer(""String_Node_Str"");
  configContent.put(""String_Node_Str"",configForm.getInitialComponent());
  configContent.put(""String_Node_Str"",textForm.getInitialComponent());
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  Condition accessCondition=node.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,node));
  listenTo(accessibilityCondContr);
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,node);
  listenTo(highScoreNodeConfigController);
  UserNodeAuditManager am=course.getCourseEnvironment().getAuditManager();
  hasLogEntries=am.hasUserNodeLogs(node);
  configContent.contextPut(""String_Node_Str"",new Boolean(hasLogEntries));
  if (hasLogEntries) {
    scoringController.setDisplayOnly(true);
  }
  configContent.contextPut(""String_Node_Str"",new Boolean(false));
}","public PortfolioCourseNodeEditController(UserRequest ureq,WindowControl wControl,BreadcrumbPanel stackPanel,ICourse course,PortfolioCourseNode node,ModuleConfiguration config,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.config=config;
  this.courseNode=node;
  configForm=new PortfolioConfigForm(ureq,wControl,stackPanel,course,node);
  listenTo(configForm);
  scoringController=new MSEditFormController(ureq,wControl,config);
  scoringContent=scoringController.getInitialComponent();
  listenTo(scoringController);
  textForm=new PortfolioTextForm(ureq,wControl,course,node);
  listenTo(textForm);
  configContent=createVelocityContainer(""String_Node_Str"");
  configContent.put(""String_Node_Str"",configForm.getInitialComponent());
  configContent.put(""String_Node_Str"",textForm.getInitialComponent());
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  Condition accessCondition=node.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,node));
  listenTo(accessibilityCondContr);
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,config);
  listenTo(highScoreNodeConfigController);
  UserNodeAuditManager am=course.getCourseEnvironment().getAuditManager();
  hasLogEntries=am.hasUserNodeLogs(node);
  configContent.contextPut(""String_Node_Str"",new Boolean(hasLogEntries));
  if (hasLogEntries) {
    scoringController.setDisplayOnly(true);
  }
  configContent.contextPut(""String_Node_Str"",new Boolean(false));
}"
69340,"@Override public void event(UserRequest ureq,Controller source,Event event){
  if (source == accessibilityCondContr) {
    if (event == Event.CHANGED_EVENT) {
      Condition cond=accessibilityCondContr.getCondition();
      courseNode.setPreConditionAccess(cond);
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == configForm) {
    if (event == Event.DONE_EVENT) {
      configForm.getUpdatedConfig();
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
      textForm.loadMapOrBinder();
      textForm.updateUI();
      configContent.setDirty(true);
    }
  }
 else   if (source == textForm) {
    if (event == Event.DONE_EVENT) {
      textForm.getUpdatedConfig();
      configForm.setDirtyFromOtherForm(false);
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
 else     if (event == Event.CHANGED_EVENT) {
      configForm.setDirtyFromOtherForm(true);
    }
  }
 else   if (source == scoringController) {
    if (event == Event.CANCELLED_EVENT) {
      if (hasLogEntries) {
        scoringController.setDisplayOnly(true);
      }
      configContent.contextPut(""String_Node_Str"",new Boolean(false));
      return;
    }
 else     if (event == Event.DONE_EVENT) {
      scoringController.updateModuleConfiguration(config);
      updateHighscoreTab();
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == highScoreNodeConfigController) {
    if (event == Event.DONE_EVENT) {
      highScoreNodeConfigController.updateModuleConfiguration(courseNode.getModuleConfiguration());
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
}","@Override public void event(UserRequest ureq,Controller source,Event event){
  if (source == accessibilityCondContr) {
    if (event == Event.CHANGED_EVENT) {
      Condition cond=accessibilityCondContr.getCondition();
      courseNode.setPreConditionAccess(cond);
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == configForm) {
    if (event == Event.DONE_EVENT) {
      configForm.getUpdatedConfig();
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
      textForm.loadMapOrBinder();
      textForm.updateUI();
      configContent.setDirty(true);
    }
  }
 else   if (source == textForm) {
    if (event == Event.DONE_EVENT) {
      textForm.getUpdatedConfig();
      configForm.setDirtyFromOtherForm(false);
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
 else     if (event == Event.CHANGED_EVENT) {
      configForm.setDirtyFromOtherForm(true);
    }
  }
 else   if (source == scoringController) {
    if (event == Event.CANCELLED_EVENT) {
      if (hasLogEntries) {
        scoringController.setDisplayOnly(true);
      }
      configContent.contextPut(""String_Node_Str"",new Boolean(false));
      return;
    }
 else     if (event == Event.DONE_EVENT) {
      scoringController.updateModuleConfiguration(config);
      updateHighscoreTab();
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
 else   if (source == highScoreNodeConfigController) {
    if (event == Event.DONE_EVENT) {
      fireEvent(ureq,NodeEditController.NODECONFIG_CHANGED_EVENT);
    }
  }
}"
69341,"private void setupContent(UserRequest ureq,UserCourseEnvironment userCourseEnv,CourseNode courseNode){
  ModuleConfiguration config=courseNode.getModuleConfiguration();
  viewHighscore=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_HIGHSCORE);
  if (!viewHighscore) {
    return;
  }
  Date start=config.getBooleanEntry(HighScoreEditController.CONFIG_KEY_DATESTART) != null ? (Date)config.get(HighScoreEditController.CONFIG_KEY_DATESTART) : null;
  if (start != null && start.after(new Date())) {
    viewHighscore=false;
    return;
  }
  if (ureq.getUserSession().getRoles().isGuestOnly()) {
    viewHighscore=false;
    return;
  }
  ownIdentity=userCourseEnv.getIdentityEnvironment().getIdentity();
  AssessmentManager assessmentManager=userCourseEnv.getCourseEnvironment().getAssessmentManager();
  AssessmentEntry ownEntry=assessmentManager.getAssessmentEntry(courseNode,ownIdentity);
  if (ownEntry != null && ownEntry.getUserVisibility() != null && !ownEntry.getUserVisibility().booleanValue()) {
    viewHighscore=false;
    return;
  }
  boolean adminORcoach=userCourseEnv.isAdmin() || userCourseEnv.isCoach();
  if (!adminORcoach && (ownEntry == null || (ownEntry != null && ownEntry.getScore() == null))) {
    viewHighscore=false;
    return;
  }
  List<AssessmentEntry> assessEntries;
  if (""String_Node_Str"".equals(courseNode.getType())) {
    assessEntries=assessmentManager.getAssessmentEntriesWithStatus(courseNode,AssessmentEntryStatus.done);
  }
 else {
    assessEntries=assessmentManager.getAssessmentEntries(courseNode);
  }
  if (assessEntries == null || assessEntries.isEmpty()) {
    viewHighscore=false;
    return;
  }
  if (adminORcoach) {
    assessEntries.remove(ownEntry);
  }
  viewTable=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_LISTING);
  viewHistogram=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_HISTOGRAM);
  viewPosition=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_POSITION);
  viewPodium=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_PODIUM);
  anonymous=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_ANONYMIZE);
  int bestOnly=config.getBooleanEntry(HighScoreEditController.CONFIG_KEY_BESTONLY) != null ? (int)config.get(HighScoreEditController.CONFIG_KEY_BESTONLY) : 0;
  tableSize=bestOnly != 0 ? (int)config.get(HighScoreEditController.CONFIG_KEY_NUMUSER) : assessEntries.size();
  initLists();
  lowerBorder=(Float)config.get(MSCourseNode.CONFIG_KEY_SCORE_MIN);
  upperBorder=(Float)config.get(MSCourseNode.CONFIG_KEY_SCORE_MAX);
  highscoreDataModel=highScoreManager.sortRankByScore(assessEntries,allMembers,ownIdMembers,allPodium,ownIdIndices,tableSize,ownIdentity,userManager);
  allScores=highscoreDataModel.getScores();
  doLoadShowConfig(ureq);
  initForm(ureq);
}","private void setupContent(UserRequest ureq,UserCourseEnvironment userCourseEnv,CourseNode courseNode){
  ModuleConfiguration config=courseNode.getModuleConfiguration();
  viewHighscore=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_HIGHSCORE);
  if (!viewHighscore) {
    return;
  }
  Date start=config.getBooleanEntry(HighScoreEditController.CONFIG_KEY_DATESTART) != null ? (Date)config.get(HighScoreEditController.CONFIG_KEY_DATESTART) : null;
  if (start != null && start.after(new Date())) {
    viewHighscore=false;
    return;
  }
  if (ureq.getUserSession().getRoles().isGuestOnly()) {
    viewHighscore=false;
    return;
  }
  ownIdentity=userCourseEnv.getIdentityEnvironment().getIdentity();
  AssessmentManager assessmentManager=userCourseEnv.getCourseEnvironment().getAssessmentManager();
  AssessmentEntry ownEntry=assessmentManager.getAssessmentEntry(courseNode,ownIdentity);
  if (ownEntry != null && ownEntry.getUserVisibility() != null && !ownEntry.getUserVisibility().booleanValue()) {
    viewHighscore=false;
    return;
  }
  boolean adminORcoach=userCourseEnv.isAdmin() || userCourseEnv.isCoach();
  if (!adminORcoach && (ownEntry == null || (ownEntry != null && ownEntry.getScore() == null))) {
    viewHighscore=false;
    return;
  }
  List<AssessmentEntry> assessEntries;
  if (""String_Node_Str"".equals(courseNode.getType())) {
    assessEntries=assessmentManager.getAssessmentEntriesWithStatus(courseNode,AssessmentEntryStatus.done);
  }
 else {
    assessEntries=assessmentManager.getAssessmentEntries(courseNode);
  }
  if (assessEntries != null && adminORcoach) {
    assessEntries.remove(ownEntry);
  }
  if (assessEntries == null || assessEntries.isEmpty()) {
    viewHighscore=false;
    return;
  }
  viewTable=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_LISTING);
  viewHistogram=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_HISTOGRAM);
  viewPosition=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_POSITION);
  viewPodium=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_PODIUM);
  anonymous=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_ANONYMIZE);
  int bestOnly=config.getBooleanEntry(HighScoreEditController.CONFIG_KEY_BESTONLY) != null ? (int)config.get(HighScoreEditController.CONFIG_KEY_BESTONLY) : 0;
  tableSize=bestOnly != 0 ? (int)config.get(HighScoreEditController.CONFIG_KEY_NUMUSER) : assessEntries.size();
  initLists();
  lowerBorder=(Float)config.get(MSCourseNode.CONFIG_KEY_SCORE_MIN);
  upperBorder=(Float)config.get(MSCourseNode.CONFIG_KEY_SCORE_MAX);
  highscoreDataModel=highScoreManager.sortRankByScore(assessEntries,allMembers,ownIdMembers,allPodium,ownIdIndices,tableSize,ownIdentity,userManager);
  allScores=highscoreDataModel.getScores();
  doLoadShowConfig(ureq);
  initForm(ureq);
}"
69342,"public HighScoreEditController(UserRequest ureq,WindowControl wControl,CourseNode msNode,UserCourseEnvironment euce){
  super(ureq,wControl,FormBasicController.LAYOUT_DEFAULT);
  this.msNode=msNode;
  initForm(ureq);
}","public HighScoreEditController(UserRequest ureq,WindowControl wControl,CourseNode msNode){
  super(ureq,wControl,FormBasicController.LAYOUT_DEFAULT);
  this.msNode=msNode;
  initForm(ureq);
}"
69343,"@Override public void setObjects(List objects){
}","@Override public void setObjects(List<HighScoreTableEntry> entries){
  this.entries=entries;
}"
69344,"@Override public Object createCopyWithEmptyList(){
  return null;
}","@Override public Object createCopyWithEmptyList(){
  return new HighScoreFlexiTableModel(new ArrayList<>(),anonymous,placeholder,ownId);
}"
69345,"@Override public int getRowCount(){
  return ROW_COUNT;
}","@Override public int getRowCount(){
  return entries == null ? 0 : entries.size();
}"
69346,"public HighScoreFlexiTableModel(List<HighScoreTableEntry> entries,boolean anonymous,String placeholder,Identity ownId){
  this.ROW_COUNT=entries.size();
  this.entries=entries;
  this.anonymous=anonymous;
  this.placeholder=placeholder;
  this.ownId=ownId;
}","public HighScoreFlexiTableModel(List<HighScoreTableEntry> entries,boolean anonymous,String placeholder,Identity ownId){
  this.entries=entries;
  this.anonymous=anonymous;
  this.placeholder=placeholder;
  this.ownId=ownId;
}"
69347,"/** 
 * Instantiates a new high score run controller.  Use this controller in combination with BasicController and DefaultController
 */
public HighScoreRunController(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,CourseNode courseNode){
  super(ureq,wControl,""String_Node_Str"");
  this.nodeID=courseNode.getIdent();
  setupContent(ureq,wControl,userCourseEnv,courseNode);
}","/** 
 * Instantiates a new high score run controller.  Use this controller in combination with BasicController and DefaultController
 */
public HighScoreRunController(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,CourseNode courseNode){
  super(ureq,wControl,""String_Node_Str"");
  this.nodeID=courseNode.getIdent();
  setupContent(ureq,userCourseEnv,courseNode);
}"
69348,"private void setupContent(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,CourseNode courseNode){
  ownIdentity=userCourseEnv.getIdentityEnvironment().getIdentity();
  AssessmentEntry ownEntry=userCourseEnv.getCourseEnvironment().getAssessmentManager().getAssessmentEntry(courseNode,ownIdentity);
  boolean adminORcoach=userCourseEnv.isAdmin() || userCourseEnv.isCoach();
  if (ureq.getUserSession().getRoles().isGuestOnly()) {
    viewHighscore=false;
    return;
  }
  if (!adminORcoach && (ownEntry == null || (ownEntry != null && ownEntry.getScore() == null))) {
    viewHighscore=false;
    return;
  }
  List<AssessmentEntry> assessEntries=userCourseEnv.getCourseEnvironment().getAssessmentManager().getAssessmentEntries(courseNode);
  if (assessEntries.isEmpty()) {
    viewHighscore=false;
    return;
  }
  ModuleConfiguration config=courseNode.getModuleConfiguration();
  viewHighscore=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_HIGHSCORE);
  if (!viewHighscore) {
    return;
  }
  Date start=config.getBooleanEntry(HighScoreEditController.CONFIG_KEY_DATESTART) != null ? (Date)config.get(HighScoreEditController.CONFIG_KEY_DATESTART) : null;
  if (start != null && start.after(new Date())) {
    viewHighscore=false;
    return;
  }
  viewTable=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_LISTING);
  viewHistogram=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_HISTOGRAM);
  viewPosition=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_POSITION);
  viewPodium=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_PODIUM);
  anonymous=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_ANONYMIZE);
  int bestOnly=config.getBooleanEntry(HighScoreEditController.CONFIG_KEY_BESTONLY) != null ? (int)config.get(HighScoreEditController.CONFIG_KEY_BESTONLY) : 0;
  tableSize=bestOnly != 0 ? (int)config.get(HighScoreEditController.CONFIG_KEY_NUMUSER) : assessEntries.size();
  initLists();
  lowerBorder=(Float)config.get(MSCourseNode.CONFIG_KEY_SCORE_MIN);
  upperBorder=(Float)config.get(MSCourseNode.CONFIG_KEY_SCORE_MAX);
  allScores=highScoreManager.sortRankByScore(assessEntries,allMembers,ownIdMembers,allPodium,ownIdIndices,tableSize,ownIdentity,userManager);
  doLoadShowConfig(ureq);
  initForm(ureq);
}","private void setupContent(UserRequest ureq,UserCourseEnvironment userCourseEnv,CourseNode courseNode){
  ownIdentity=userCourseEnv.getIdentityEnvironment().getIdentity();
  AssessmentEntry ownEntry=userCourseEnv.getCourseEnvironment().getAssessmentManager().getAssessmentEntry(courseNode,ownIdentity);
  boolean adminORcoach=userCourseEnv.isAdmin() || userCourseEnv.isCoach();
  if (ureq.getUserSession().getRoles().isGuestOnly()) {
    viewHighscore=false;
    return;
  }
  if (!adminORcoach && (ownEntry == null || (ownEntry != null && ownEntry.getScore() == null))) {
    viewHighscore=false;
    return;
  }
  List<AssessmentEntry> assessEntries=userCourseEnv.getCourseEnvironment().getAssessmentManager().getAssessmentEntries(courseNode);
  if (assessEntries.isEmpty()) {
    viewHighscore=false;
    return;
  }
  ModuleConfiguration config=courseNode.getModuleConfiguration();
  viewHighscore=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_HIGHSCORE);
  if (!viewHighscore) {
    return;
  }
  Date start=config.getBooleanEntry(HighScoreEditController.CONFIG_KEY_DATESTART) != null ? (Date)config.get(HighScoreEditController.CONFIG_KEY_DATESTART) : null;
  if (start != null && start.after(new Date())) {
    viewHighscore=false;
    return;
  }
  viewTable=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_LISTING);
  viewHistogram=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_HISTOGRAM);
  viewPosition=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_POSITION);
  viewPodium=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_PODIUM);
  anonymous=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_ANONYMIZE);
  int bestOnly=config.getBooleanEntry(HighScoreEditController.CONFIG_KEY_BESTONLY) != null ? (int)config.get(HighScoreEditController.CONFIG_KEY_BESTONLY) : 0;
  tableSize=bestOnly != 0 ? (int)config.get(HighScoreEditController.CONFIG_KEY_NUMUSER) : assessEntries.size();
  initLists();
  lowerBorder=(Float)config.get(MSCourseNode.CONFIG_KEY_SCORE_MIN);
  upperBorder=(Float)config.get(MSCourseNode.CONFIG_KEY_SCORE_MAX);
  allScores=highScoreManager.sortRankByScore(assessEntries,allMembers,ownIdMembers,allPodium,ownIdIndices,tableSize,ownIdentity,userManager);
  doLoadShowConfig(ureq);
  initForm(ureq);
}"
69349,"/** 
 * Constructor for tunneling editor controller 
 * @param config The node module configuration
 * @param ureq The user request
 * @param wControl The window controller
 * @param tuCourseNode The current single page course node
 * @param course
 */
public LTIEditController(ModuleConfiguration config,UserRequest ureq,WindowControl wControl,BreadcrumbPanel stackPanel,BasicLTICourseNode ltCourseNode,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.config=config;
  this.courseNode=ltCourseNode;
  this.editCourseEnv=course.getCourseEnvironment();
  this.stackPanel=stackPanel;
  myContent=createVelocityContainer(""String_Node_Str"");
  previewButton=LinkFactory.createButtonSmall(""String_Node_Str"",myContent,this);
  previewButton.setIconLeftCSS(""String_Node_Str"");
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,courseNode,euce);
  listenTo(highScoreNodeConfigController);
  ltConfigForm=new LTIConfigForm(ureq,wControl,config);
  listenTo(ltConfigForm);
  myContent.put(""String_Node_Str"",ltConfigForm.getInitialComponent());
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  Condition accessCondition=courseNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,ltCourseNode));
  this.listenTo(accessibilityCondContr);
  if (!(ltCourseNode.isConfigValid().isError()))   myContent.contextPut(""String_Node_Str"",Boolean.TRUE);
 else   myContent.contextPut(""String_Node_Str"",Boolean.FALSE);
}","/** 
 * Constructor for tunneling editor controller 
 * @param config The node module configuration
 * @param ureq The user request
 * @param wControl The window controller
 * @param tuCourseNode The current single page course node
 * @param course
 */
public LTIEditController(ModuleConfiguration config,UserRequest ureq,WindowControl wControl,BreadcrumbPanel stackPanel,BasicLTICourseNode ltCourseNode,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.config=config;
  this.courseNode=ltCourseNode;
  this.editCourseEnv=course.getCourseEnvironment();
  this.stackPanel=stackPanel;
  myContent=createVelocityContainer(""String_Node_Str"");
  previewButton=LinkFactory.createButtonSmall(""String_Node_Str"",myContent,this);
  previewButton.setIconLeftCSS(""String_Node_Str"");
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,courseNode);
  listenTo(highScoreNodeConfigController);
  ltConfigForm=new LTIConfigForm(ureq,wControl,config);
  listenTo(ltConfigForm);
  myContent.put(""String_Node_Str"",ltConfigForm.getInitialComponent());
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  Condition accessCondition=courseNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,ltCourseNode));
  this.listenTo(accessibilityCondContr);
  if (!(ltCourseNode.isConfigValid().isError()))   myContent.contextPut(""String_Node_Str"",Boolean.TRUE);
 else   myContent.contextPut(""String_Node_Str"",Boolean.FALSE);
}"
69350,"/** 
 * @param cpNode
 * @param ureq
 * @param wControl
 * @param course
 */
public CheckListEditController(CheckListCourseNode courseNode,UserRequest ureq,WindowControl wControl,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.courseNode=courseNode;
  Condition accessCondition=courseNode.getPreConditionAccess();
  accessibilityCondCtrl=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(course.getEditorTreeModel(),courseNode));
  listenTo(accessibilityCondCtrl);
  CheckboxManager checkboxManager=CoreSpringFactory.getImpl(CheckboxManager.class);
  int numOfChecks=checkboxManager.countChecks(course,courseNode.getIdent());
  checkboxListEditCtrl=new CheckListBoxListEditController(ureq,wControl,course,courseNode,numOfChecks > 0);
  listenTo(checkboxListEditCtrl);
  configurationCtrl=new CheckListConfigurationController(ureq,wControl,courseNode,numOfChecks > 0);
  listenTo(configurationCtrl);
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,courseNode,euce);
  listenTo(highScoreNodeConfigController);
}","/** 
 * @param cpNode
 * @param ureq
 * @param wControl
 * @param course
 */
public CheckListEditController(CheckListCourseNode courseNode,UserRequest ureq,WindowControl wControl,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.courseNode=courseNode;
  Condition accessCondition=courseNode.getPreConditionAccess();
  accessibilityCondCtrl=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(course.getEditorTreeModel(),courseNode));
  listenTo(accessibilityCondCtrl);
  CheckboxManager checkboxManager=CoreSpringFactory.getImpl(CheckboxManager.class);
  int numOfChecks=checkboxManager.countChecks(course,courseNode.getIdent());
  checkboxListEditCtrl=new CheckListBoxListEditController(ureq,wControl,course,courseNode,numOfChecks > 0);
  listenTo(checkboxListEditCtrl);
  configurationCtrl=new CheckListConfigurationController(ureq,wControl,courseNode,numOfChecks > 0);
  listenTo(configurationCtrl);
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,courseNode);
  listenTo(highScoreNodeConfigController);
}"
69351,"public GTAEditController(UserRequest ureq,WindowControl wControl,GTACourseNode gtaNode,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.euce=euce;
  this.gtaNode=gtaNode;
  courseEnv=course.getCourseEnvironment();
  config=gtaNode.getModuleConfiguration();
  Condition accessCondition=gtaNode.getPreConditionAccess();
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  accessibilityCondCtrl=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,gtaNode));
  listenTo(accessibilityCondCtrl);
  workflowCtrl=new GTAWorkflowEditController(ureq,getWindowControl(),gtaNode,euce.getCourseEditorEnv());
  listenTo(workflowCtrl);
  assignmentCtrl=new GTAAssignmentEditController(ureq,getWindowControl(),gtaNode,config,courseEnv,false);
  listenTo(assignmentCtrl);
  submissionCtrl=new GTASubmissionEditController(ureq,getWindowControl(),config);
  listenTo(submissionCtrl);
  manualAssessmentCtrl=new MSEditFormController(ureq,getWindowControl(),config);
  listenTo(manualAssessmentCtrl);
  solutionsCtrl=new GTASampleSolutionsEditController(ureq,getWindowControl(),gtaNode,courseEnv,false);
  listenTo(solutionsCtrl);
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,gtaNode,euce);
  listenTo(highScoreNodeConfigController);
  if (""String_Node_Str"".equals(config.get(GTACourseNode.GTASK_TYPE))) {
    highScoreNodeConfigController.setFormInfoMessage(""String_Node_Str"",getTranslator());
  }
}","public GTAEditController(UserRequest ureq,WindowControl wControl,GTACourseNode gtaNode,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.euce=euce;
  this.gtaNode=gtaNode;
  courseEnv=course.getCourseEnvironment();
  config=gtaNode.getModuleConfiguration();
  Condition accessCondition=gtaNode.getPreConditionAccess();
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  accessibilityCondCtrl=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,gtaNode));
  listenTo(accessibilityCondCtrl);
  workflowCtrl=new GTAWorkflowEditController(ureq,getWindowControl(),gtaNode,euce.getCourseEditorEnv());
  listenTo(workflowCtrl);
  assignmentCtrl=new GTAAssignmentEditController(ureq,getWindowControl(),gtaNode,config,courseEnv,false);
  listenTo(assignmentCtrl);
  submissionCtrl=new GTASubmissionEditController(ureq,getWindowControl(),config);
  listenTo(submissionCtrl);
  manualAssessmentCtrl=new MSEditFormController(ureq,getWindowControl(),config);
  listenTo(manualAssessmentCtrl);
  solutionsCtrl=new GTASampleSolutionsEditController(ureq,getWindowControl(),gtaNode,courseEnv,false);
  listenTo(solutionsCtrl);
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,gtaNode);
  listenTo(highScoreNodeConfigController);
  if (""String_Node_Str"".equals(config.get(GTACourseNode.GTASK_TYPE))) {
    highScoreNodeConfigController.setFormInfoMessage(""String_Node_Str"",getTranslator());
  }
}"
69352,"private void init(UserRequest ureq){
  configurationCtrl=new IQConfigurationController(ureq,getWindowControl(),this.stackPanel,course,courseNode,euce,type);
  listenTo(configurationCtrl);
  highScoreNodeConfigController=new HighScoreEditController(ureq,getWindowControl(),courseNode,euce);
  listenTo(highScoreNodeConfigController);
  Condition accessCondition=courseNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(course.getEditorTreeModel(),courseNode));
  listenTo(accessibilityCondContr);
}","private void init(UserRequest ureq){
  configurationCtrl=new IQConfigurationController(ureq,getWindowControl(),this.stackPanel,course,courseNode,euce,type);
  listenTo(configurationCtrl);
  highScoreNodeConfigController=new HighScoreEditController(ureq,getWindowControl(),courseNode);
  listenTo(highScoreNodeConfigController);
  Condition accessCondition=courseNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(course.getEditorTreeModel(),courseNode));
  listenTo(accessibilityCondContr);
}"
69353,"/** 
 * Constructor for a manual scoring course edit controller
 * @param ureq The user request
 * @param msNode The manual scoring course node
 * @param course
 */
public MSCourseNodeEditController(UserRequest ureq,WindowControl wControl,MSCourseNode msNode,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  setTranslator(Util.createPackageTranslator(HighScoreEditController.class,getLocale(),getTranslator()));
  this.msNode=msNode;
  configurationVC=createVelocityContainer(""String_Node_Str"");
  editScoringConfigButton=LinkFactory.createButtonSmall(""String_Node_Str"",configurationVC,this);
  UserNodeAuditManager auditManager=course.getCourseEnvironment().getAuditManager();
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  Condition accessCondition=msNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,msNode));
  this.listenTo(accessibilityCondContr);
  modConfigController=new MSEditFormController(ureq,wControl,msNode.getModuleConfiguration());
  listenTo(modConfigController);
  configurationVC.put(""String_Node_Str"",modConfigController.getInitialComponent());
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,msNode,euce);
  listenTo(highScoreNodeConfigController);
  hasLogEntries=auditManager.hasUserNodeLogs(msNode);
  configurationVC.contextPut(""String_Node_Str"",new Boolean(hasLogEntries));
  if (hasLogEntries) {
    modConfigController.setDisplayOnly(true);
  }
}","/** 
 * Constructor for a manual scoring course edit controller
 * @param ureq The user request
 * @param msNode The manual scoring course node
 * @param course
 */
public MSCourseNodeEditController(UserRequest ureq,WindowControl wControl,MSCourseNode msNode,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  setTranslator(Util.createPackageTranslator(HighScoreEditController.class,getLocale(),getTranslator()));
  this.msNode=msNode;
  configurationVC=createVelocityContainer(""String_Node_Str"");
  editScoringConfigButton=LinkFactory.createButtonSmall(""String_Node_Str"",configurationVC,this);
  UserNodeAuditManager auditManager=course.getCourseEnvironment().getAuditManager();
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  Condition accessCondition=msNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,msNode));
  this.listenTo(accessibilityCondContr);
  modConfigController=new MSEditFormController(ureq,wControl,msNode.getModuleConfiguration());
  listenTo(modConfigController);
  configurationVC.put(""String_Node_Str"",modConfigController.getInitialComponent());
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,msNode);
  listenTo(highScoreNodeConfigController);
  hasLogEntries=auditManager.hasUserNodeLogs(msNode);
  configurationVC.contextPut(""String_Node_Str"",new Boolean(hasLogEntries));
  if (hasLogEntries) {
    modConfigController.setDisplayOnly(true);
  }
}"
69354,"public PortfolioCourseNodeEditController(UserRequest ureq,WindowControl wControl,BreadcrumbPanel stackPanel,ICourse course,PortfolioCourseNode node,ModuleConfiguration config,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.config=config;
  this.courseNode=node;
  configForm=new PortfolioConfigForm(ureq,wControl,stackPanel,course,node);
  listenTo(configForm);
  scoringController=new MSEditFormController(ureq,wControl,config);
  scoringContent=scoringController.getInitialComponent();
  listenTo(scoringController);
  textForm=new PortfolioTextForm(ureq,wControl,course,node);
  listenTo(textForm);
  configContent=createVelocityContainer(""String_Node_Str"");
  configContent.put(""String_Node_Str"",configForm.getInitialComponent());
  configContent.put(""String_Node_Str"",textForm.getInitialComponent());
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  Condition accessCondition=node.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,node));
  listenTo(accessibilityCondContr);
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,node,euce);
  listenTo(highScoreNodeConfigController);
  UserNodeAuditManager am=course.getCourseEnvironment().getAuditManager();
  hasLogEntries=am.hasUserNodeLogs(node);
  configContent.contextPut(""String_Node_Str"",new Boolean(hasLogEntries));
  if (hasLogEntries) {
    scoringController.setDisplayOnly(true);
  }
  configContent.contextPut(""String_Node_Str"",new Boolean(false));
}","public PortfolioCourseNodeEditController(UserRequest ureq,WindowControl wControl,BreadcrumbPanel stackPanel,ICourse course,PortfolioCourseNode node,ModuleConfiguration config,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.config=config;
  this.courseNode=node;
  configForm=new PortfolioConfigForm(ureq,wControl,stackPanel,course,node);
  listenTo(configForm);
  scoringController=new MSEditFormController(ureq,wControl,config);
  scoringContent=scoringController.getInitialComponent();
  listenTo(scoringController);
  textForm=new PortfolioTextForm(ureq,wControl,course,node);
  listenTo(textForm);
  configContent=createVelocityContainer(""String_Node_Str"");
  configContent.put(""String_Node_Str"",configForm.getInitialComponent());
  configContent.put(""String_Node_Str"",textForm.getInitialComponent());
  CourseEditorTreeModel editorModel=course.getEditorTreeModel();
  Condition accessCondition=node.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(editorModel,node));
  listenTo(accessibilityCondContr);
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,node);
  listenTo(highScoreNodeConfigController);
  UserNodeAuditManager am=course.getCourseEnvironment().getAuditManager();
  hasLogEntries=am.hasUserNodeLogs(node);
  configContent.contextPut(""String_Node_Str"",new Boolean(hasLogEntries));
  if (hasLogEntries) {
    scoringController.setDisplayOnly(true);
  }
  configContent.contextPut(""String_Node_Str"",new Boolean(false));
}"
69355,"/** 
 * @param cpNode CourseNode
 * @param ureq
 * @param wControl
 * @param course Course Interface
 * @param euce User course environment
 */
public ScormEditController(ScormCourseNode scormNode,UserRequest ureq,WindowControl wControl,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.course=course;
  this.scormNode=scormNode;
  this.config=scormNode.getModuleConfiguration();
  main=new Panel(""String_Node_Str"");
  cpConfigurationVc=this.createVelocityContainer(""String_Node_Str"");
  chooseCPButton=LinkFactory.createButtonSmall(""String_Node_Str"",cpConfigurationVc,this);
  chooseCPButton.setElementCssClass(""String_Node_Str"");
  changeCPButton=LinkFactory.createButtonSmall(""String_Node_Str"",cpConfigurationVc,this);
  changeCPButton.setElementCssClass(""String_Node_Str"");
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,scormNode,euce);
  listenTo(highScoreNodeConfigController);
  DeliveryOptions parentConfig=null;
  if (config.get(CONFIG_KEY_REPOSITORY_SOFTKEY) != null) {
    RepositoryEntry re=getScormCPReference(config,false);
    if (re == null) {
      showError(NLS_ERROR_CPREPOENTRYMISSING);
      cpConfigurationVc.contextPut(""String_Node_Str"",Boolean.FALSE);
      cpConfigurationVc.contextPut(VC_CHOSENCP,translate(NLS_NO_CP_CHOSEN));
    }
 else {
      cpConfigurationVc.contextPut(""String_Node_Str"",Boolean.TRUE);
      String displayname=StringHelper.escapeHtml(re.getDisplayname());
      previewLink=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",displayname,Link.NONTRANSLATED,cpConfigurationVc,this);
      previewLink.setIconLeftCSS(""String_Node_Str"");
      previewLink.setCustomEnabledLinkCSS(""String_Node_Str"");
      previewLink.setTitle(getTranslator().translate(""String_Node_Str""));
      ScormPackageConfig scormConfig=ScormMainManager.getInstance().getScormPackageConfig(re.getOlatResource());
      parentConfig=scormConfig == null ? null : scormConfig.getDeliveryOptions();
    }
  }
 else {
    cpConfigurationVc.contextPut(""String_Node_Str"",Boolean.FALSE);
    cpConfigurationVc.contextPut(VC_CHOSENCP,translate(NLS_NO_CP_CHOSEN));
  }
  boolean showMenu=config.getBooleanSafe(CONFIG_SHOWMENU,true);
  boolean showNavButtons=config.getBooleanSafe(CONFIG_SHOWNAVBUTTONS,true);
  boolean skipLaunchPage=config.getBooleanSafe(CONFIG_SKIPLAUNCHPAGE,false);
  boolean assessable=config.getBooleanSafe(CONFIG_ISASSESSABLE,true);
  String assessableType=null;
  if (assessable) {
    assessableType=config.getStringValue(CONFIG_ASSESSABLE_TYPE,CONFIG_ASSESSABLE_TYPE_SCORE);
  }
  boolean attemptsDependOnScore=config.getBooleanSafe(CONFIG_ATTEMPTSDEPENDONSCORE,true);
  int maxAttempts=config.getIntegerSafe(CONFIG_MAXATTEMPTS,0);
  boolean advanceScore=config.getBooleanSafe(CONFIG_ADVANCESCORE,true);
  int cutvalue=config.getIntegerSafe(CONFIG_CUTVALUE,0);
  boolean fullWindow=config.getBooleanSafe(CONFIG_FULLWINDOW,true);
  boolean closeOnFinish=config.getBooleanSafe(CONFIG_CLOSE_ON_FINISH,false);
  scorevarform=new VarForm(ureq,wControl,showMenu,skipLaunchPage,showNavButtons,assessableType,cutvalue,fullWindow,closeOnFinish,maxAttempts,advanceScore,attemptsDependOnScore);
  listenTo(scorevarform);
  cpConfigurationVc.put(""String_Node_Str"",scorevarform.getInitialComponent());
  Condition accessCondition=scormNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(course.getEditorTreeModel(),scormNode));
  listenTo(accessibilityCondContr);
  DeliveryOptions deliveryOptions=(DeliveryOptions)config.get(CONFIG_DELIVERY_OPTIONS);
  deliveryOptionsCtrl=new DeliveryOptionsConfigurationController(ureq,getWindowControl(),deliveryOptions,""String_Node_Str"",parentConfig);
  listenTo(deliveryOptionsCtrl);
  main.setContent(cpConfigurationVc);
}","/** 
 * @param cpNode CourseNode
 * @param ureq
 * @param wControl
 * @param course Course Interface
 * @param euce User course environment
 */
public ScormEditController(ScormCourseNode scormNode,UserRequest ureq,WindowControl wControl,ICourse course,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.course=course;
  this.scormNode=scormNode;
  this.config=scormNode.getModuleConfiguration();
  main=new Panel(""String_Node_Str"");
  cpConfigurationVc=this.createVelocityContainer(""String_Node_Str"");
  chooseCPButton=LinkFactory.createButtonSmall(""String_Node_Str"",cpConfigurationVc,this);
  chooseCPButton.setElementCssClass(""String_Node_Str"");
  changeCPButton=LinkFactory.createButtonSmall(""String_Node_Str"",cpConfigurationVc,this);
  changeCPButton.setElementCssClass(""String_Node_Str"");
  highScoreNodeConfigController=new HighScoreEditController(ureq,wControl,scormNode);
  listenTo(highScoreNodeConfigController);
  DeliveryOptions parentConfig=null;
  if (config.get(CONFIG_KEY_REPOSITORY_SOFTKEY) != null) {
    RepositoryEntry re=getScormCPReference(config,false);
    if (re == null) {
      showError(NLS_ERROR_CPREPOENTRYMISSING);
      cpConfigurationVc.contextPut(""String_Node_Str"",Boolean.FALSE);
      cpConfigurationVc.contextPut(VC_CHOSENCP,translate(NLS_NO_CP_CHOSEN));
    }
 else {
      cpConfigurationVc.contextPut(""String_Node_Str"",Boolean.TRUE);
      String displayname=StringHelper.escapeHtml(re.getDisplayname());
      previewLink=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",displayname,Link.NONTRANSLATED,cpConfigurationVc,this);
      previewLink.setIconLeftCSS(""String_Node_Str"");
      previewLink.setCustomEnabledLinkCSS(""String_Node_Str"");
      previewLink.setTitle(getTranslator().translate(""String_Node_Str""));
      ScormPackageConfig scormConfig=ScormMainManager.getInstance().getScormPackageConfig(re.getOlatResource());
      parentConfig=scormConfig == null ? null : scormConfig.getDeliveryOptions();
    }
  }
 else {
    cpConfigurationVc.contextPut(""String_Node_Str"",Boolean.FALSE);
    cpConfigurationVc.contextPut(VC_CHOSENCP,translate(NLS_NO_CP_CHOSEN));
  }
  boolean showMenu=config.getBooleanSafe(CONFIG_SHOWMENU,true);
  boolean showNavButtons=config.getBooleanSafe(CONFIG_SHOWNAVBUTTONS,true);
  boolean skipLaunchPage=config.getBooleanSafe(CONFIG_SKIPLAUNCHPAGE,false);
  boolean assessable=config.getBooleanSafe(CONFIG_ISASSESSABLE,true);
  String assessableType=null;
  if (assessable) {
    assessableType=config.getStringValue(CONFIG_ASSESSABLE_TYPE,CONFIG_ASSESSABLE_TYPE_SCORE);
  }
  boolean attemptsDependOnScore=config.getBooleanSafe(CONFIG_ATTEMPTSDEPENDONSCORE,true);
  int maxAttempts=config.getIntegerSafe(CONFIG_MAXATTEMPTS,0);
  boolean advanceScore=config.getBooleanSafe(CONFIG_ADVANCESCORE,true);
  int cutvalue=config.getIntegerSafe(CONFIG_CUTVALUE,0);
  boolean fullWindow=config.getBooleanSafe(CONFIG_FULLWINDOW,true);
  boolean closeOnFinish=config.getBooleanSafe(CONFIG_CLOSE_ON_FINISH,false);
  scorevarform=new VarForm(ureq,wControl,showMenu,skipLaunchPage,showNavButtons,assessableType,cutvalue,fullWindow,closeOnFinish,maxAttempts,advanceScore,attemptsDependOnScore);
  listenTo(scorevarform);
  cpConfigurationVc.put(""String_Node_Str"",scorevarform.getInitialComponent());
  Condition accessCondition=scormNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),euce,accessCondition,AssessmentHelper.getAssessableNodes(course.getEditorTreeModel(),scormNode));
  listenTo(accessibilityCondContr);
  DeliveryOptions deliveryOptions=(DeliveryOptions)config.get(CONFIG_DELIVERY_OPTIONS);
  deliveryOptionsCtrl=new DeliveryOptionsConfigurationController(ureq,getWindowControl(),deliveryOptions,""String_Node_Str"",parentConfig);
  listenTo(deliveryOptionsCtrl);
  main.setContent(cpConfigurationVc);
}"
69356,"@Override public boolean archiveNodeData(Locale locale,ICourse course,ArchiveOptions options,ZipOutputStream exportStream,String charset){
  String repositorySoftKey=(String)getModuleConfiguration().get(IQEditController.CONFIG_KEY_REPOSITORY_SOFTKEY);
  Long courseResourceableId=course.getResourceableId();
  CourseEnvironment courseEnv=course.getCourseEnvironment();
  List<Identity> identities=ScoreAccountingHelper.loadUsers(courseEnv,options);
  UserRequest ureq=new SyntheticUserRequest(identities.get(0),locale,new UserSession());
  Roles roles=new Roles(false,false,false,false,false,false,false);
  ureq.getUserSession().setRoles(roles);
  MediaResource resource;
  try {
    RepositoryEntry re=RepositoryManager.getInstance().lookupRepositoryEntryBySoftkey(repositorySoftKey,true);
    boolean onyx=OnyxModule.isOnyxTest(re.getOlatResource());
    if (onyx) {
      QTIResultManager qrm=QTIResultManager.getInstance();
      List<QTIResultSet> results=qrm.getResultSets(courseResourceableId,getIdent(),re.getKey(),null);
      if (results.size() > 0) {
        OnyxExportManager.getInstance().exportResults(results,exportStream,this);
      }
      return true;
    }
 else     if (ImsQTI21Resource.TYPE_NAME.equals(re.getOlatResource().getResourceableTypeName())) {
      QTI21Service qtiService=CoreSpringFactory.getImpl(QTI21Service.class);
      resource=new QTI21ResultsExportMediaResource(courseEnv,identities,this,qtiService,ureq,exportStream,locale);
      QTI21ArchiveFormat qaf=new QTI21ArchiveFormat(locale,true,true,true);
      RepositoryEntry courseEntry=course.getCourseEnvironment().getCourseGroupManager().getCourseEntry();
      qaf.export(courseEntry,getIdent(),re,exportStream);
      return true;
    }
 else {
      resource=new QTI12ResultsExportMediaResource(courseEnv,ureq,identities,this,exportStream);
      String shortTitle=getShortTitle();
      QTIExportManager qem=QTIExportManager.getInstance();
      QTIExportFormatter qef=new QTIExportFormatterCSVType1(locale,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
      return qem.selectAndExportResults(qef,courseResourceableId,shortTitle,getIdent(),re,exportStream,""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    return false;
  }
}","@Override public boolean archiveNodeData(Locale locale,ICourse course,ArchiveOptions options,ZipOutputStream exportStream,String charset){
  String repositorySoftKey=(String)getModuleConfiguration().get(IQEditController.CONFIG_KEY_REPOSITORY_SOFTKEY);
  Long courseResourceableId=course.getResourceableId();
  CourseEnvironment courseEnv=course.getCourseEnvironment();
  List<Identity> identities=ScoreAccountingHelper.loadUsers(courseEnv,options);
  UserRequest ureq=new SyntheticUserRequest(new TransientIdentity(),locale,new UserSession());
  Roles roles=new Roles(false,false,false,false,false,false,false);
  ureq.getUserSession().setRoles(roles);
  try {
    RepositoryEntry re=RepositoryManager.getInstance().lookupRepositoryEntryBySoftkey(repositorySoftKey,true);
    boolean onyx=OnyxModule.isOnyxTest(re.getOlatResource());
    if (onyx) {
      QTIResultManager qrm=QTIResultManager.getInstance();
      List<QTIResultSet> results=qrm.getResultSets(courseResourceableId,getIdent(),re.getKey(),null);
      if (results.size() > 0) {
        OnyxExportManager.getInstance().exportResults(results,exportStream,this);
      }
      return true;
    }
 else     if (ImsQTI21Resource.TYPE_NAME.equals(re.getOlatResource().getResourceableTypeName())) {
      QTI21Service qtiService=CoreSpringFactory.getImpl(QTI21Service.class);
      new QTI21ResultsExportMediaResource(courseEnv,identities,this,qtiService,ureq,exportStream,locale).prepare(null);
      ;
      QTI21ArchiveFormat qaf=new QTI21ArchiveFormat(locale,true,true,true);
      RepositoryEntry courseEntry=course.getCourseEnvironment().getCourseGroupManager().getCourseEntry();
      qaf.export(courseEntry,getIdent(),re,exportStream);
      return true;
    }
 else {
      new QTI12ResultsExportMediaResource(courseEnv,locale,identities,this,exportStream).prepare(null);
      String shortTitle=getShortTitle();
      QTIExportManager qem=QTIExportManager.getInstance();
      QTIExportFormatter qef=new QTIExportFormatterCSVType1(locale,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
      return qem.selectAndExportResults(qef,courseResourceableId,shortTitle,getIdent(),re,exportStream,""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    return false;
  }
}"
69357,"@Override public void prepare(HttpServletResponse hres){
  String exportFolderName=translator.translate(""String_Node_Str"");
  if (hres != null) {
    String label=StringHelper.transformDisplayNameToFileSystemName(title);
    if (label != null && !label.toLowerCase().endsWith(""String_Node_Str"")) {
      label+=""String_Node_Str"";
    }
    String urlEncodedLabel=StringHelper.urlEncodeUTF8(label);
    hres.setHeader(""String_Node_Str"",""String_Node_Str"" + urlEncodedLabel);
    hres.setHeader(""String_Node_Str"",urlEncodedLabel);
  }
  try {
    ZipOutputStream zout=hres == null ? exportStream : new ZipOutputStream(hres.getOutputStream());
    zout.setLevel(9);
    List<AssessedMember> assessedMembers=new ArrayList<AssessedMember>();
    for (    Identity identity : identities) {
      String idDir=exportFolderName + ""String_Node_Str"" + DATA+ identity.getName();
      idDir=idDir.endsWith(SEP) ? idDir : idDir + SEP;
      createZipDirectory(zout,idDir);
      String userName=identity.getName();
      String firstName=identity.getUser().getProperty(UserConstants.FIRSTNAME,null);
      String lastName=identity.getUser().getProperty(UserConstants.LASTNAME,null);
      String memberEmail=identity.getUser().getProperty(UserConstants.EMAIL,null);
      AssessedMember assessedMember=new AssessedMember(userName,lastName,firstName,memberEmail,null);
      Long resourceId=courseEnv.getCourseResourceableId();
      String resourceDetail=courseNode.getIdent();
      Long resid=courseNode.getReferencedRepositoryEntry().getKey();
      List<QTIResultSet> resultSets=qtiResultManager.getResultSets(resourceId,resourceDetail,resid,identity);
      List<ResultDetail> assessments=new ArrayList<ResultDetail>();
      for (      QTIResultSet qtiResultSet : resultSets) {
        Long assessmentID=qtiResultSet.getAssessmentID();
        String idPath=idDir + translator.translate(""String_Node_Str"") + (resultSets.indexOf(qtiResultSet) + 1)+ SEP;
        createZipDirectory(zout,idPath);
        String linkToHTML=createHTMLfromQTIResultSet(idPath,idDir,zout,identity,qtiResultSet);
        ResultDetail resultDetail=new ResultDetail(createLink(String.valueOf(assessmentID),linkToHTML,true),assessmentDateFormat.format(qtiResultSet.getCreationDate()),displayDateFormat.format(new Date(qtiResultSet.getDuration())),qtiResultSet.getScore(),createPassedIcons(qtiResultSet.getIsPassed()),linkToHTML);
        assessments.add(resultDetail);
      }
      String oneUserHTML=createResultListingHTML(assessments,assessedMember);
      convertToZipEntry(zout,exportFolderName + ""String_Node_Str"" + DATA+ identity.getName()+ ""String_Node_Str"",oneUserHTML);
      String linkToUser=idDir.replace(exportFolderName + ""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
      AssessedMember member=new AssessedMember();
      member.setUsername(createLink(identity.getName(),linkToUser,false));
      member.setLastname(createLink(identity.getUser().getProperty(UserConstants.LASTNAME,null),linkToUser,false));
      member.setFirstname(createLink(identity.getUser().getProperty(UserConstants.FIRSTNAME,null),linkToUser,false));
      member.setTries(String.valueOf(resultSets.size()));
      assessedMembers.add(member);
    }
    String usersHTML=createMemberListingHTML(assessedMembers);
    convertToZipEntry(zout,exportFolderName + ""String_Node_Str"",usersHTML);
    File sasstheme=new File(WebappHelper.getContextRealPath(""String_Node_Str""));
    fsToZip(zout,sasstheme.toPath(),exportFolderName + ""String_Node_Str"");
    File fontawesome=new File(WebappHelper.getContextRealPath(""String_Node_Str""));
    fsToZip(zout,fontawesome.toPath(),exportFolderName + ""String_Node_Str"");
    if (hres != null) {
      zout.close();
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","@Override public void prepare(HttpServletResponse hres){
  boolean hasServletResponse=hres != null;
  if (hasServletResponse) {
    String label=StringHelper.transformDisplayNameToFileSystemName(title);
    if (label != null && !label.toLowerCase().endsWith(""String_Node_Str"")) {
      label+=""String_Node_Str"";
    }
    String urlEncodedLabel=StringHelper.urlEncodeUTF8(label);
    hres.setHeader(""String_Node_Str"",""String_Node_Str"" + urlEncodedLabel);
    hres.setHeader(""String_Node_Str"",urlEncodedLabel);
  }
  try {
    createZipStream(hres,hasServletResponse);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}"
69358,"private String createHTMLfromQTIResultSet(String idPath,String idDir,ZipOutputStream zout,Identity assessedIdentity,QTIResultSet resultSet) throws IOException {
  Document doc=FilePersister.retreiveResultsReporting(assessedIdentity,AssessmentInstance.QMD_ENTRY_TYPE_ASSESS,resultSet.getAssessmentID());
  if (doc == null) {
    return ""String_Node_Str"";
  }
  File resourceXML=retrieveXML(assessedIdentity,resultSet.getAssessmentID());
  String resultsHTML=LocalizedXSLTransformer.getInstance(ureq.getLocale()).renderResults(doc);
  resultsHTML=createResultHTML(resultsHTML);
  String html=idPath + resultSet.getAssessmentID() + ""String_Node_Str"";
  String xml=html.replace(""String_Node_Str"",""String_Node_Str"");
  convertToZipEntry(zout,html,resultsHTML);
  convertToZipEntry(zout,xml,resourceXML);
  return idPath.replace(idDir,""String_Node_Str"") + resultSet.getAssessmentID() + ""String_Node_Str"";
}","private String createHTMLfromQTIResultSet(String idPath,String idDir,ZipOutputStream zout,Identity assessedIdentity,QTIResultSet resultSet) throws IOException {
  Document doc=FilePersister.retreiveResultsReporting(assessedIdentity,AssessmentInstance.QMD_ENTRY_TYPE_ASSESS,resultSet.getAssessmentID());
  if (doc == null) {
    return ""String_Node_Str"";
  }
  File resourceXML=retrieveXML(assessedIdentity,resultSet.getAssessmentID());
  String resultsHTML=LocalizedXSLTransformer.getInstance(locale != null ? locale : ureq.getLocale()).renderResults(doc);
  resultsHTML=createResultHTML(resultsHTML);
  String html=idPath + resultSet.getAssessmentID() + ""String_Node_Str"";
  String xml=html.replace(""String_Node_Str"",""String_Node_Str"");
  convertToZipEntry(zout,html,resultsHTML);
  convertToZipEntry(zout,xml,resourceXML);
  return idPath.replace(idDir,""String_Node_Str"") + resultSet.getAssessmentID() + ""String_Node_Str"";
}"
69359,"public QTI12ResultsExportMediaResource(CourseEnvironment courseEnv,UserRequest ureq,List<Identity> identities,QTICourseNode courseNode,ZipOutputStream exportStream){
  this.courseNode=courseNode;
  this.courseEnv=courseEnv;
  this.ureq=ureq;
  this.title=""String_Node_Str"";
  this.identities=identities;
  this.velocityHelper=VelocityHelper.getInstance();
  this.exportStream=exportStream;
  translator=new PackageTranslator(QTI12ResultsExportMediaResource.class.getPackage().getName(),ureq.getLocale());
  qtiResultManager=QTIResultManager.getInstance();
  prepare(null);
}","public QTI12ResultsExportMediaResource(CourseEnvironment courseEnv,Locale locale,List<Identity> identities,QTICourseNode courseNode,ZipOutputStream exportStream){
  this.courseNode=courseNode;
  this.courseEnv=courseEnv;
  this.locale=locale;
  this.title=""String_Node_Str"";
  this.identities=identities;
  this.velocityHelper=VelocityHelper.getInstance();
  this.exportStream=exportStream;
  translator=new PackageTranslator(QTI12ResultsExportMediaResource.class.getPackage().getName(),locale);
  this.exportFolderName=translator.translate(""String_Node_Str"");
  qtiResultManager=QTIResultManager.getInstance();
}"
69360,"/** 
 * This dispatches component events...
 * @see org.olat.core.gui.control.DefaultController#event(org.olat.core.gui.UserRequest,org.olat.core.gui.components.Component,org.olat.core.gui.control.Event)
 */
@Override public void event(UserRequest ureq,Component source,Event event){
  if (source == myContent) {
    if (event.getCommand().equals(COMMAND_SELECT)) {
      List<String> selectedEntries=new ArrayList<String>();
      String key=ureq.getParameter(AutoCompleterMapper.PARAM_KEY);
      if (key == null) {
        String searchValue=ureq.getParameter(VelocityRenderDecorator.getId(JSNAME_INPUTFIELD,myContent));
        if (searchValue == null) {
          logError(""String_Node_Str"",null);
          getWindowControl().setError(translate(""String_Node_Str""));
          return;
        }
 else         if (searchValue.equals(""String_Node_Str"")) {
          if (!isEmptyAsReset()) {
            getWindowControl().setWarning(translate(""String_Node_Str""));
          }
          fireEvent(ureq,new EmptyChosenEvent());
          return;
        }
 else         if (searchValue.equals(""String_Node_Str"") || searchValue.length() < 3) {
          getWindowControl().setWarning(translate(""String_Node_Str""));
          return;
        }
        AutoCompleterListReceiver receiver=new AutoCompleterListReceiver(""String_Node_Str"",false);
        gprovider.getResult(searchValue,receiver);
        JSONArray result=receiver.getResult();
        if (result.length() > 0) {
          try {
            JSONObject object=result.getJSONObject(0);
            key=object.getString(AutoCompleterMapper.PARAM_KEY);
          }
 catch (          JSONException e) {
            logError(""String_Node_Str"",e);
            key=""String_Node_Str"";
          }
        }
 else {
          key=""String_Node_Str"";
        }
      }
      key=key.trim();
      if (!key.equals(""String_Node_Str"") && !key.equals(AUTOCOMPLETER_NO_RESULT)) {
        selectedEntries.add(key);
      }
 else       if (key.equals(AUTOCOMPLETER_NO_RESULT)) {
        return;
      }
      fireEvent(ureq,new EntriesChosenEvent(selectedEntries));
    }
  }
}","/** 
 * This dispatches component events...
 * @see org.olat.core.gui.control.DefaultController#event(org.olat.core.gui.UserRequest,org.olat.core.gui.components.Component,org.olat.core.gui.control.Event)
 */
@Override public void event(UserRequest ureq,Component source,Event event){
  if (source == myContent) {
    if (COMMAND_SELECT.equals(event.getCommand())) {
      List<String> selectedEntries=new ArrayList<>();
      String key=ureq.getParameter(AutoCompleterMapper.PARAM_KEY);
      if (key == null) {
        String searchValue=ureq.getParameter(VelocityRenderDecorator.getId(JSNAME_INPUTFIELD,myContent));
        if (searchValue == null) {
          logError(""String_Node_Str"",null);
          getWindowControl().setError(translate(""String_Node_Str""));
          return;
        }
 else         if (searchValue.equals(""String_Node_Str"")) {
          if (!isEmptyAsReset()) {
            getWindowControl().setWarning(translate(""String_Node_Str""));
          }
          fireEvent(ureq,new EmptyChosenEvent());
          return;
        }
 else         if (searchValue.equals(""String_Node_Str"") || searchValue.length() < 3) {
          getWindowControl().setWarning(translate(""String_Node_Str""));
          return;
        }
        AutoCompleterListReceiver receiver=new AutoCompleterListReceiver(""String_Node_Str"",false);
        gprovider.getResult(searchValue,receiver);
        JSONArray result=receiver.getResult();
        if (result.length() > 0) {
          try {
            JSONObject object=result.getJSONObject(0);
            key=object.getString(AutoCompleterMapper.PARAM_KEY);
          }
 catch (          JSONException e) {
            logError(""String_Node_Str"",e);
            key=""String_Node_Str"";
          }
        }
 else {
          key=""String_Node_Str"";
        }
      }
      key=key.trim();
      if (!key.equals(""String_Node_Str"") && !key.equals(AUTOCOMPLETER_NO_RESULT)) {
        selectedEntries.add(key);
      }
 else       if (key.equals(AUTOCOMPLETER_NO_RESULT)) {
        return;
      }
      fireEvent(ureq,new EntriesChosenEvent(selectedEntries));
    }
  }
}"
69361,"@Override public void prepare(HttpServletResponse hres){
  translator=Util.createPackageTranslator(QTI21ResultsExportMediaResource.class,hres.getLocale());
  String label=StringHelper.transformDisplayNameToFileSystemName(title);
  if (label != null && !label.toLowerCase().endsWith(""String_Node_Str"")) {
    label+=""String_Node_Str"";
  }
  String urlEncodedLabel=StringHelper.urlEncodeUTF8(label);
  hres.setHeader(""String_Node_Str"",""String_Node_Str"" + urlEncodedLabel);
  hres.setHeader(""String_Node_Str"",urlEncodedLabel);
  try (ZipOutputStream zout=new ZipOutputStream(hres.getOutputStream())){
    zout.setLevel(9);
    List<AssessedMember> assessedMembers=new ArrayList<AssessedMember>();
    for (    Identity identity : identities) {
      String idDir=DATA + identity.getName();
      idDir=idDir.endsWith(SEP) ? idDir : idDir + SEP;
      createZipDirectory(zout,idDir);
      String userName=identity.getName();
      String firstName=identity.getUser().getProperty(UserConstants.FIRSTNAME,null);
      String lastName=identity.getUser().getProperty(UserConstants.LASTNAME,null);
      String memberEmail=identity.getUser().getProperty(UserConstants.EMAIL,null);
      AssessedMember assessedMember=new AssessedMember(userName,lastName,firstName,memberEmail,null);
      List<AssessmentTestSession> sessions=qtiService.getAssessmentTestSessions(entry,courseNode.getIdent(),identity);
      List<ResultDetail> assessments=new ArrayList<ResultDetail>();
      for (      AssessmentTestSession session : sessions) {
        Long assessmentID=session.getKey();
        String idPath=idDir + translator.translate(""String_Node_Str"") + (sessions.indexOf(session) + 1)+ SEP;
        createZipDirectory(zout,idPath);
        ResultDetail resultDetail=new ResultDetail(assessmentID.toString(),assessmentDateFormat.format(session.getCreationDate()),displayDateFormat.format(new Date(session.getDuration())),session.getScore().floatValue(),createPassedIcons(session.getPassed() == null ? true : session.getPassed()),idPath.replace(idDir,""String_Node_Str"") + assessmentID + ""String_Node_Str"");
        assessments.add(resultDetail);
        WindowControl mockwControl=new WindowControlMocker();
        FileResourceManager frm=FileResourceManager.getInstance();
        File fUnzippedDirRoot=frm.unzipFileResource(session.getTestEntry().getOlatResource());
        Controller assessmentResultController=new AssessmentResultController(ureq,mockwControl,identity,false,session,ShowResultsOnFinish.details,fUnzippedDirRoot,null);
        Component component=assessmentResultController.getInitialComponent();
        String componentHTML=createResultHTML(component);
        convertToZipEntry(zout,idPath + assessmentID + ""String_Node_Str"",componentHTML);
        File resultXML=qtiService.getAssessmentResultFile(session);
        convertToZipEntry(zout,idPath + assessmentID + ""String_Node_Str"",resultXML);
      }
      String singleUserInfoHTML=createResultListingHTML(assessments,assessedMember);
      convertToZipEntry(zout,DATA + identity.getName() + ""String_Node_Str"",singleUserInfoHTML);
      String linkToUser=idDir.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
      AssessedMember member=new AssessedMember();
      member.setUsername(createLink(identity.getName(),linkToUser,false));
      member.setLastname(createLink(identity.getUser().getProperty(UserConstants.LASTNAME,null),linkToUser,false));
      member.setFirstname(createLink(identity.getUser().getProperty(UserConstants.FIRSTNAME,null),linkToUser,false));
      member.setTries(String.valueOf(sessions.size()));
      assessedMembers.add(member);
    }
    String membersHTML=createMemberListingHTML(assessedMembers);
    convertToZipEntry(zout,""String_Node_Str"",membersHTML);
    File sasstheme=new File(WebappHelper.getContextRealPath(""String_Node_Str""));
    fsToZip(zout,sasstheme.toPath(),""String_Node_Str"");
    File fontawesome=new File(WebappHelper.getContextRealPath(""String_Node_Str""));
    fsToZip(zout,fontawesome.toPath(),""String_Node_Str"");
    zout.close();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","@Override public void prepare(HttpServletResponse hres){
  translator=Util.createPackageTranslator(QTI21ResultsExportMediaResource.class,hres.getLocale());
  String label=StringHelper.transformDisplayNameToFileSystemName(title);
  if (label != null && !label.toLowerCase().endsWith(""String_Node_Str"")) {
    label+=""String_Node_Str"";
  }
  String urlEncodedLabel=StringHelper.urlEncodeUTF8(label);
  hres.setHeader(""String_Node_Str"",""String_Node_Str"" + urlEncodedLabel);
  hres.setHeader(""String_Node_Str"",urlEncodedLabel);
  try (ZipOutputStream zout=new ZipOutputStream(hres.getOutputStream())){
    zout.setLevel(9);
    List<AssessedMember> assessedMembers=new ArrayList<AssessedMember>();
    for (    Identity identity : identities) {
      String idDir=DATA + identity.getName();
      idDir=idDir.endsWith(SEP) ? idDir : idDir + SEP;
      createZipDirectory(zout,idDir);
      String userName=identity.getName();
      String firstName=identity.getUser().getProperty(UserConstants.FIRSTNAME,null);
      String lastName=identity.getUser().getProperty(UserConstants.LASTNAME,null);
      String memberEmail=identity.getUser().getProperty(UserConstants.EMAIL,null);
      AssessedMember assessedMember=new AssessedMember(userName,lastName,firstName,memberEmail,null);
      List<AssessmentTestSession> sessions=qtiService.getAssessmentTestSessions(entry,courseNode.getIdent(),identity);
      List<ResultDetail> assessments=new ArrayList<ResultDetail>();
      for (      AssessmentTestSession session : sessions) {
        Long assessmentID=session.getKey();
        String idPath=idDir + translator.translate(""String_Node_Str"") + (sessions.indexOf(session) + 1)+ SEP;
        createZipDirectory(zout,idPath);
        ResultDetail resultDetail=new ResultDetail(assessmentID.toString(),assessmentDateFormat.format(session.getCreationDate()),displayDateFormat.format(new Date(session.getDuration())),session.getScore().floatValue(),createPassedIcons(session.getPassed() == null ? true : session.getPassed()),idPath.replace(idDir,""String_Node_Str"") + assessmentID + ""String_Node_Str"");
        assessments.add(resultDetail);
        WindowControl mockwControl=new WindowControlMocker();
        FileResourceManager frm=FileResourceManager.getInstance();
        File fUnzippedDirRoot=frm.unzipFileResource(session.getTestEntry().getOlatResource());
        Controller assessmentResultController=new AssessmentResultController(ureq,mockwControl,identity,false,session,ShowResultsOnFinish.details,fUnzippedDirRoot,null,false);
        Component component=assessmentResultController.getInitialComponent();
        String componentHTML=createResultHTML(component);
        convertToZipEntry(zout,idPath + assessmentID + ""String_Node_Str"",componentHTML);
        File resultXML=qtiService.getAssessmentResultFile(session);
        convertToZipEntry(zout,idPath + assessmentID + ""String_Node_Str"",resultXML);
      }
      String singleUserInfoHTML=createResultListingHTML(assessments,assessedMember);
      convertToZipEntry(zout,DATA + identity.getName() + ""String_Node_Str"",singleUserInfoHTML);
      String linkToUser=idDir.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
      AssessedMember member=new AssessedMember();
      member.setUsername(createLink(identity.getName(),linkToUser,false));
      member.setLastname(createLink(identity.getUser().getProperty(UserConstants.LASTNAME,null),linkToUser,false));
      member.setFirstname(createLink(identity.getUser().getProperty(UserConstants.FIRSTNAME,null),linkToUser,false));
      member.setTries(String.valueOf(sessions.size()));
      assessedMembers.add(member);
    }
    String membersHTML=createMemberListingHTML(assessedMembers);
    convertToZipEntry(zout,""String_Node_Str"",membersHTML);
    File sasstheme=new File(WebappHelper.getContextRealPath(""String_Node_Str""));
    fsToZip(zout,sasstheme.toPath(),""String_Node_Str"");
    File fontawesome=new File(WebappHelper.getContextRealPath(""String_Node_Str""));
    fsToZip(zout,fontawesome.toPath(),""String_Node_Str"");
    zout.close();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}"
69362,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    if (assessedIdentityInfosCtrl != null) {
      layoutCont.put(""String_Node_Str"",assessedIdentityInfosCtrl.getInitialComponent());
    }
 else     if (anonym) {
      layoutCont.contextPut(""String_Node_Str"",Boolean.TRUE);
    }
    Results results=new Results(false,""String_Node_Str"");
    results.setSessionState(testSessionState);
    layoutCont.contextPut(""String_Node_Str"",results);
    TestResult testResult=assessmentResult.getTestResult();
    if (testResult != null) {
      extractOutcomeVariable(testResult.getItemVariables(),results);
    }
    if (resultsOnfinish == ShowResultsOnFinish.sections || resultsOnfinish == ShowResultsOnFinish.details) {
      initFormSections(layoutCont);
    }
  }
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    layoutCont.contextPut(""String_Node_Str"",new Boolean(withPrint));
    layoutCont.contextPut(""String_Node_Str"",Boolean.FALSE);
    if (withPrint) {
      layoutCont.contextPut(""String_Node_Str"",""String_Node_Str"" + layoutCont.getFormItemComponent().getDispatchID());
      layoutCont.getFormItemComponent().addListener(this);
    }
    if (assessedIdentityInfosCtrl != null) {
      layoutCont.put(""String_Node_Str"",assessedIdentityInfosCtrl.getInitialComponent());
    }
 else     if (anonym) {
      layoutCont.contextPut(""String_Node_Str"",Boolean.TRUE);
    }
    Results results=new Results(false,""String_Node_Str"");
    results.setSessionState(testSessionState);
    layoutCont.contextPut(""String_Node_Str"",results);
    TestResult testResult=assessmentResult.getTestResult();
    if (testResult != null) {
      extractOutcomeVariable(testResult.getItemVariables(),results);
    }
    if (resultsOnfinish == ShowResultsOnFinish.sections || resultsOnfinish == ShowResultsOnFinish.details) {
      initFormSections(layoutCont);
    }
  }
}"
69363,"private Results initFormItemResult(FormLayoutContainer layoutCont,TestPlanNode node,Map<Identifier,AssessmentItemRef> identifierToRefs){
  TestPlanNodeKey testPlanNodeKey=node.getKey();
  Identifier identifier=testPlanNodeKey.getIdentifier();
  AssessmentItemRef itemRef=identifierToRefs.get(identifier);
  ResolvedAssessmentItem resolvedAssessmentItem=resolvedAssessmentTest.getResolvedAssessmentItem(itemRef);
  AssessmentItem assessmentItem=resolvedAssessmentItem.getRootNodeLookup().extractIfSuccessful();
  QTI21QuestionType type=QTI21QuestionType.getType(assessmentItem);
  Results r=new Results(false,type.getCssClass());
  r.setTitle(node.getSectionPartTitle());
  r.setSessionStatus(""String_Node_Str"");
  ItemSessionState sessionState=testSessionState.getItemSessionStates().get(testPlanNodeKey);
  if (sessionState != null) {
    r.setSessionState(sessionState);
    SessionStatus sessionStatus=sessionState.getSessionStatus();
    if (sessionState != null) {
      r.setSessionStatus(translate(""String_Node_Str"" + sessionStatus.toQtiString()));
    }
  }
  ItemResult itemResult=assessmentResult.getItemResult(identifier.toString());
  if (itemResult != null) {
    extractOutcomeVariable(itemResult.getItemVariables(),r);
  }
  List<Interaction> interactions=assessmentItem.getItemBody().findInteractions();
  for (  Interaction interaction : interactions) {
    if (interaction instanceof PositionObjectInteraction || interaction instanceof EndAttemptInteraction) {
      continue;
    }
    String responseId=""String_Node_Str"" + count++;
    InteractionResultFormItem responseFormItem=new InteractionResultFormItem(responseId,interaction,resolvedAssessmentItem);
    initInteractionResultFormItem(responseFormItem,sessionState);
    layoutCont.add(responseId,responseFormItem);
    String solutionId=""String_Node_Str"" + count++;
    InteractionResultFormItem solutionFormItem=new InteractionResultFormItem(solutionId,interaction,resolvedAssessmentItem);
    solutionFormItem.setShowSolution(true);
    initInteractionResultFormItem(solutionFormItem,sessionState);
    layoutCont.add(solutionId,solutionFormItem);
    r.getInteractionResults().add(new InteractionResults(responseFormItem,solutionFormItem));
  }
  return r;
}","private Results initFormItemResult(FormLayoutContainer layoutCont,TestPlanNode node,Map<Identifier,AssessmentItemRef> identifierToRefs){
  TestPlanNodeKey testPlanNodeKey=node.getKey();
  Identifier identifier=testPlanNodeKey.getIdentifier();
  AssessmentItemRef itemRef=identifierToRefs.get(identifier);
  ResolvedAssessmentItem resolvedAssessmentItem=resolvedAssessmentTest.getResolvedAssessmentItem(itemRef);
  AssessmentItem assessmentItem=resolvedAssessmentItem.getRootNodeLookup().extractIfSuccessful();
  QTI21QuestionType type=QTI21QuestionType.getType(assessmentItem);
  Results r=new Results(false,type.getCssClass());
  r.setTitle(node.getSectionPartTitle());
  r.setSessionStatus(""String_Node_Str"");
  ItemSessionState sessionState=testSessionState.getItemSessionStates().get(testPlanNodeKey);
  if (sessionState != null) {
    r.setSessionState(sessionState);
    SessionStatus sessionStatus=sessionState.getSessionStatus();
    if (sessionState != null) {
      r.setSessionStatus(translate(""String_Node_Str"" + sessionStatus.toQtiString()));
    }
  }
  ItemResult itemResult=assessmentResult.getItemResult(identifier.toString());
  if (itemResult != null) {
    extractOutcomeVariable(itemResult.getItemVariables(),r);
  }
  List<Interaction> interactions=assessmentItem.getItemBody().findInteractions();
  for (  Interaction interaction : interactions) {
    if (interaction instanceof PositionObjectInteraction || interaction instanceof EndAttemptInteraction) {
      continue;
    }
    String responseId=""String_Node_Str"" + count++;
    InteractionResultFormItem responseFormItem=new InteractionResultFormItem(responseId,interaction,resolvedAssessmentItem);
    initInteractionResultFormItem(responseFormItem,sessionState);
    layoutCont.add(responseId,responseFormItem);
    InteractionResultFormItem solutionFormItem;
    if (interaction instanceof ExtendedTextInteraction || interaction instanceof UploadInteraction || interaction instanceof DrawingInteraction) {
      solutionFormItem=null;
    }
 else {
      String solutionId=""String_Node_Str"" + count++;
      solutionFormItem=new InteractionResultFormItem(solutionId,interaction,resolvedAssessmentItem);
      solutionFormItem.setShowSolution(true);
      initInteractionResultFormItem(solutionFormItem,sessionState);
      layoutCont.add(solutionId,solutionFormItem);
    }
    r.getInteractionResults().add(new InteractionResults(responseFormItem,solutionFormItem));
  }
  return r;
}"
69364,"public AssessmentResultController(UserRequest ureq,WindowControl wControl,Identity assessedIdentity,boolean anonym,AssessmentTestSession candidateSession,ShowResultsOnFinish resultsOnfinish,File fUnzippedDirRoot,String mapperUri){
  super(ureq,wControl,""String_Node_Str"");
  this.anonym=anonym;
  this.mapperUri=mapperUri;
  this.resultsOnfinish=resultsOnfinish;
  ResourceLocator fileResourceLocator=new PathResourceLocator(fUnzippedDirRoot.toPath());
  inputResourceLocator=ImsQTI21Resource.createResolvingResourceLocator(fileResourceLocator);
  assessmentObjectUri=qtiService.createAssessmentObjectUri(fUnzippedDirRoot);
  if (!anonym && assessedIdentity != null) {
    assessedIdentityInfosCtrl=new UserShortDescription(ureq,getWindowControl(),assessedIdentity);
    listenTo(assessedIdentityInfosCtrl);
  }
  resolvedAssessmentTest=qtiService.loadAndResolveAssessmentTest(fUnzippedDirRoot,false,false);
  testSessionState=qtiService.loadTestSessionState(candidateSession);
  assessmentResult=qtiService.getAssessmentResult(candidateSession);
  candidateSessionContext=new TerminatedStaticCandidateSessionContext(candidateSession);
  initForm(ureq);
}","public AssessmentResultController(UserRequest ureq,WindowControl wControl,Identity assessedIdentity,boolean anonym,AssessmentTestSession candidateSession,ShowResultsOnFinish resultsOnfinish,File fUnzippedDirRoot,String mapperUri,boolean withPrint){
  super(ureq,wControl,""String_Node_Str"");
  this.anonym=anonym;
  this.mapperUri=mapperUri;
  this.withPrint=withPrint;
  this.resultsOnfinish=resultsOnfinish;
  this.assessedIdentity=assessedIdentity;
  this.candidateSession=candidateSession;
  this.fUnzippedDirRoot=fUnzippedDirRoot;
  ResourceLocator fileResourceLocator=new PathResourceLocator(fUnzippedDirRoot.toPath());
  inputResourceLocator=ImsQTI21Resource.createResolvingResourceLocator(fileResourceLocator);
  assessmentObjectUri=qtiService.createAssessmentObjectUri(fUnzippedDirRoot);
  if (!anonym && assessedIdentity != null) {
    assessedIdentityInfosCtrl=new UserShortDescription(ureq,getWindowControl(),assessedIdentity);
    listenTo(assessedIdentityInfosCtrl);
  }
  resolvedAssessmentTest=qtiService.loadAndResolveAssessmentTest(fUnzippedDirRoot,false,false);
  testSessionState=qtiService.loadTestSessionState(candidateSession);
  assessmentResult=qtiService.getAssessmentResult(candidateSession);
  candidateSessionContext=new TerminatedStaticCandidateSessionContext(candidateSession);
  initForm(ureq);
}"
69365,"/** 
 * Update the status and show the test results the test is at the end and the configuration allow it.
 * @param ureq
 * @return true if the results are visible
 */
private boolean updateStatusAndResults(UserRequest ureq){
  resultsVisible=false;
  if (testSessionController.getTestSessionState().isEnded() && deliveryOptions.getShowResultsOnFinish() != null && !ShowResultsOnFinish.none.equals(deliveryOptions.getShowResultsOnFinish())) {
    removeAsListenerAndDispose(resultCtrl);
    resultCtrl=new AssessmentResultController(ureq,getWindowControl(),assessedIdentity,anonym,AssessmentTestDisplayController.this.getCandidateSession(),deliveryOptions.getShowResultsOnFinish(),fUnzippedDirRoot,mapperUri);
    listenTo(resultCtrl);
    flc.add(""String_Node_Str"",resultCtrl.getInitialFormItem());
    resultsVisible=true;
  }
  if (testSessionController.getTestSessionState().isEnded() || testSessionController.findNextEnterableTestPart() == null) {
    closeTestButton.setI18nKey(""String_Node_Str"");
  }
 else {
    closeTestButton.setI18nKey(""String_Node_Str"");
  }
  closeResultsButton.setVisible(resultsVisible && showCloseResults);
  updateQtiWorksStatus();
  return resultsVisible;
}","/** 
 * Update the status and show the test results the test is at the end and the configuration allow it.
 * @param ureq
 * @return true if the results are visible
 */
private boolean updateStatusAndResults(UserRequest ureq){
  resultsVisible=false;
  if (testSessionController.getTestSessionState().isEnded() && deliveryOptions.getShowResultsOnFinish() != null && !ShowResultsOnFinish.none.equals(deliveryOptions.getShowResultsOnFinish())) {
    removeAsListenerAndDispose(resultCtrl);
    resultCtrl=new AssessmentResultController(ureq,getWindowControl(),assessedIdentity,anonym,AssessmentTestDisplayController.this.getCandidateSession(),deliveryOptions.getShowResultsOnFinish(),fUnzippedDirRoot,mapperUri,false);
    listenTo(resultCtrl);
    flc.add(""String_Node_Str"",resultCtrl.getInitialFormItem());
    resultsVisible=true;
  }
  if (testSessionController.getTestSessionState().isEnded() || testSessionController.findNextEnterableTestPart() == null) {
    closeTestButton.setI18nKey(""String_Node_Str"");
  }
 else {
    closeTestButton.setI18nKey(""String_Node_Str"");
  }
  closeResultsButton.setVisible(resultsVisible && showCloseResults);
  updateQtiWorksStatus();
  return resultsVisible;
}"
69366,"private void doOpenResult(UserRequest ureq,AssessmentTestSession session){
  if (resultCtrl != null)   return;
  FileResourceManager frm=FileResourceManager.getInstance();
  File fUnzippedDirRoot=frm.unzipFileResource(session.getTestEntry().getOlatResource());
  URI assessmentObjectUri=qtiService.createAssessmentObjectUri(fUnzippedDirRoot);
  File submissionDir=qtiService.getAssessmentResultFile(session);
  String mapperUri=registerCacheableMapper(null,""String_Node_Str"" + session.getTestEntry().getKey(),new ResourcesMapper(assessmentObjectUri,submissionDir));
  resultCtrl=new AssessmentResultController(ureq,getWindowControl(),assessedIdentity,false,session,ShowResultsOnFinish.details,fUnzippedDirRoot,mapperUri);
  listenTo(resultCtrl);
  cmc=new CloseableModalController(getWindowControl(),""String_Node_Str"",resultCtrl.getInitialComponent(),true,translate(""String_Node_Str""));
  cmc.activate();
  listenTo(cmc);
}","private void doOpenResult(UserRequest ureq,AssessmentTestSession session){
  if (resultCtrl != null)   return;
  FileResourceManager frm=FileResourceManager.getInstance();
  File fUnzippedDirRoot=frm.unzipFileResource(session.getTestEntry().getOlatResource());
  URI assessmentObjectUri=qtiService.createAssessmentObjectUri(fUnzippedDirRoot);
  File submissionDir=qtiService.getAssessmentResultFile(session);
  String mapperUri=registerCacheableMapper(null,""String_Node_Str"" + session.getTestEntry().getKey(),new ResourcesMapper(assessmentObjectUri,submissionDir));
  resultCtrl=new AssessmentResultController(ureq,getWindowControl(),assessedIdentity,false,session,ShowResultsOnFinish.details,fUnzippedDirRoot,mapperUri,true);
  listenTo(resultCtrl);
  cmc=new CloseableModalController(getWindowControl(),""String_Node_Str"",resultCtrl.getInitialComponent(),true,translate(""String_Node_Str""));
  cmc.activate();
  listenTo(cmc);
}"
69367,"/** 
 * Remove the runtime from the GUI stack only.
 * @param ureq
 * @param event
 */
private void doExitAssessment(UserRequest ureq,Event event){
  if (displayContainerController != null) {
    displayContainerController.deactivate(ureq);
  }
 else {
    getWindowControl().pop();
  }
  removeHistory(ureq);
  OLATResourceable ores=OresHelper.createOLATResourceableInstance(""String_Node_Str"",-1l);
  addToHistory(ureq,ores,null);
  if (!assessmentStopped) {
    assessmentStopped=true;
    singleUserEventCenter.deregisterFor(this,assessmentInstanceOres);
    AssessmentEvent assessmentStoppedEvent=new AssessmentEvent(AssessmentEvent.TYPE.STOPPED,userSession);
    singleUserEventCenter.fireEventToListenersOf(assessmentStoppedEvent,assessmentEventOres);
  }
  fireEvent(ureq,event);
}","/** 
 * Remove the runtime from the GUI stack only.
 * @param ureq
 * @param event
 * @param testEnded true if the test was ended and not suspended or cancelled (use to control increment of attempts)
 */
private void doExitAssessment(UserRequest ureq,Event event,boolean testEnded){
  if (displayContainerController != null) {
    displayContainerController.deactivate(ureq);
  }
 else {
    getWindowControl().pop();
  }
  removeHistory(ureq);
  OLATResourceable ores=OresHelper.createOLATResourceableInstance(""String_Node_Str"",-1l);
  addToHistory(ureq,ores,null);
  if (!assessmentStopped) {
    assessmentStopped=true;
    singleUserEventCenter.deregisterFor(this,assessmentInstanceOres);
    AssessmentEvent assessmentStoppedEvent=new AssessmentEvent(AssessmentEvent.TYPE.STOPPED,userSession);
    singleUserEventCenter.fireEventToListenersOf(assessmentStoppedEvent,assessmentEventOres);
  }
  if (testEnded) {
    incrementAttempts.set(true);
  }
  fireEvent(ureq,event);
}"
69368,"@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (source == displayCtrl) {
    if (event == Event.CANCELLED_EVENT) {
      doExitAssessment(ureq,event);
      exposeResults(ureq);
      showInfo(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(event.getCommand())) {
      doExitAssessment(ureq,event);
      exposeResults(ureq);
      showInfo(""String_Node_Str"");
    }
 else     if (event instanceof QTI21Event) {
      QTI21Event qe=(QTI21Event)event;
      if (QTI21Event.EXIT.equals(qe.getCommand())) {
        if (!displayCtrl.isResultsVisible()) {
          doExitAssessment(ureq,event);
          initAssessment(ureq);
        }
      }
 else       if (QTI21Event.CLOSE_RESULTS.equals(qe.getCommand())) {
        doExitAssessment(ureq,event);
        initAssessment(ureq);
      }
    }
  }
  super.event(ureq,source,event);
}","@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (source == displayCtrl) {
    if (event == Event.CANCELLED_EVENT) {
      doExitAssessment(ureq,event,false);
      exposeResults(ureq);
      showInfo(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(event.getCommand())) {
      doExitAssessment(ureq,event,false);
      exposeResults(ureq);
      showInfo(""String_Node_Str"");
    }
 else     if (event instanceof QTI21Event) {
      QTI21Event qe=(QTI21Event)event;
      if (QTI21Event.EXIT.equals(qe.getCommand())) {
        if (!displayCtrl.isResultsVisible()) {
          doExitAssessment(ureq,event,true);
          initAssessment(ureq);
        }
      }
 else       if (QTI21Event.CLOSE_RESULTS.equals(qe.getCommand())) {
        doExitAssessment(ureq,event,true);
        initAssessment(ureq);
      }
    }
  }
  super.event(ureq,source,event);
}"
69369,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  String[] correctionModeValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  correctionModeEl=uifactory.addRadiosVertical(""String_Node_Str"",""String_Node_Str"",formLayout,correctionModeKeys,correctionModeValues);
  String mode=modConfig.getStringValue(IQEditController.CONFIG_CORRECTION_MODE);
  boolean selected=false;
  for (  String correctionModeKey : correctionModeKeys) {
    if (correctionModeKey.equals(mode)) {
      correctionModeEl.select(correctionModeKey,true);
      selected=true;
    }
  }
  if (!selected) {
    if (needManulCorrection) {
      correctionModeEl.select(correctionModeKeys[1],true);
    }
 else {
      correctionModeEl.select(correctionModeKeys[0],true);
    }
  }
  limitAttemptsEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  limitAttemptsEl.addActionListener(FormEvent.ONCLICK);
  String maxAttemptsValue=""String_Node_Str"";
  int maxAttempts=modConfig.getIntegerSafe(IQEditController.CONFIG_KEY_ATTEMPTS,deliveryOptions.getMaxAttempts());
  if (maxAttempts > 0) {
    limitAttemptsEl.select(onKeys[0],true);
  }
  maxAttemptsEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",8,maxAttemptsValue,formLayout);
  maxAttemptsEl.setDisplaySize(2);
  maxAttemptsEl.setVisible(maxAttempts > 0);
  boolean blockAfterSuccess=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_BLOCK_AFTER_SUCCESS,deliveryOptions.isBlockAfterSuccess());
  blockAfterSuccessEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (blockAfterSuccess) {
    blockAfterSuccessEl.select(onKeys[0],true);
  }
  boolean allowAnonym=modConfig.getBooleanSafe(IQEditController.CONFIG_ALLOW_ANONYM,deliveryOptions.isAllowAnonym());
  allowAnonymEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (allowAnonym) {
    allowAnonymEl.select(onKeys[0],true);
  }
  boolean fullWindow=modConfig.getBooleanSafe(IQEditController.CONFIG_FULLWINDOW);
  fullWindowEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  fullWindowEl.select(""String_Node_Str"",fullWindow);
  boolean showTitles=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_QUESTIONTITLE,deliveryOptions.isShowTitles());
  showTitlesEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (showTitles) {
    showTitlesEl.select(onKeys[0],true);
  }
  boolean showMenu=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLEMENU,deliveryOptions.isShowMenu());
  showMenuEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (showMenu) {
    showMenuEl.select(onKeys[0],true);
  }
  boolean personalNotes=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_MEMO,deliveryOptions.isPersonalNotes());
  personalNotesEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (personalNotes) {
    personalNotesEl.select(onKeys[0],true);
  }
  boolean questionProgress=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_QUESTIONPROGRESS,deliveryOptions.isDisplayQuestionProgress());
  displayQuestionProgressEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (questionProgress) {
    displayQuestionProgressEl.select(onKeys[0],true);
  }
  boolean questionScore=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_SCOREPROGRESS,deliveryOptions.isDisplayScoreProgress());
  displayScoreProgressEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (questionScore) {
    displayScoreProgressEl.select(onKeys[0],true);
  }
  boolean enableSuspend=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLESUSPEND,deliveryOptions.isEnableSuspend());
  enableSuspendEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (enableSuspend) {
    enableSuspendEl.select(onKeys[0],true);
  }
  boolean enableCancel=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLECANCEL,deliveryOptions.isEnableCancel());
  enableCancelEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (enableCancel) {
    enableCancelEl.select(onKeys[0],true);
  }
  showResultsOnFinishEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  showResultsOnFinishEl.addActionListener(FormEvent.ONCHANGE);
  ShowResultsOnFinish showSummary=deliveryOptions.getShowResultsOnFinish();
  String defaultConfSummary=showSummary == null ? AssessmentInstance.QMD_ENTRY_SUMMARY_COMPACT : showSummary.getIQEquivalent();
  String confSummary=modConfig.getStringValue(IQEditController.CONFIG_KEY_SUMMARY,defaultConfSummary);
  if (!AssessmentInstance.QMD_ENTRY_SUMMARY_NONE.equals(confSummary)) {
    showResultsOnFinishEl.select(onKeys[0],true);
  }
  String[] typeShowResultsOnFinishKeys=new String[]{AssessmentInstance.QMD_ENTRY_SUMMARY_COMPACT,AssessmentInstance.QMD_ENTRY_SUMMARY_SECTION,AssessmentInstance.QMD_ENTRY_SUMMARY_DETAILED};
  String[] typeShowResultsOnFinishValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
  typeShowResultsOnFinishEl=uifactory.addRadiosVertical(""String_Node_Str"",""String_Node_Str"",formLayout,typeShowResultsOnFinishKeys,typeShowResultsOnFinishValues);
  typeShowResultsOnFinishEl.setVisible(showResultsOnFinishEl.isAtLeastSelected(1));
  if (StringHelper.containsNonWhitespace(confSummary)) {
    for (    String typeShowResultsOnFinishKey : typeShowResultsOnFinishKeys) {
      typeShowResultsOnFinishEl.select(typeShowResultsOnFinishKey,true);
    }
  }
  if (typeShowResultsOnFinishEl.isOneSelected()) {
    typeShowResultsOnFinishEl.select(AssessmentInstance.QMD_ENTRY_SUMMARY_COMPACT,true);
  }
  uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  String[] correctionModeValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  correctionModeEl=uifactory.addRadiosVertical(""String_Node_Str"",""String_Node_Str"",formLayout,correctionModeKeys,correctionModeValues);
  String mode=modConfig.getStringValue(IQEditController.CONFIG_CORRECTION_MODE);
  boolean selected=false;
  for (  String correctionModeKey : correctionModeKeys) {
    if (correctionModeKey.equals(mode)) {
      correctionModeEl.select(correctionModeKey,true);
      selected=true;
    }
  }
  if (!selected) {
    if (needManulCorrection) {
      correctionModeEl.select(correctionModeKeys[1],true);
    }
 else {
      correctionModeEl.select(correctionModeKeys[0],true);
    }
  }
  limitAttemptsEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  limitAttemptsEl.addActionListener(FormEvent.ONCLICK);
  String maxAttemptsValue=""String_Node_Str"";
  int maxAttempts=modConfig.getIntegerSafe(IQEditController.CONFIG_KEY_ATTEMPTS,deliveryOptions.getMaxAttempts());
  if (maxAttempts > 0) {
    limitAttemptsEl.select(onKeys[0],true);
    maxAttemptsValue=Integer.toString(maxAttempts);
  }
  maxAttemptsEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",8,maxAttemptsValue,formLayout);
  maxAttemptsEl.setDisplaySize(2);
  maxAttemptsEl.setVisible(maxAttempts > 0);
  boolean blockAfterSuccess=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_BLOCK_AFTER_SUCCESS,deliveryOptions.isBlockAfterSuccess());
  blockAfterSuccessEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (blockAfterSuccess) {
    blockAfterSuccessEl.select(onKeys[0],true);
  }
  boolean allowAnonym=modConfig.getBooleanSafe(IQEditController.CONFIG_ALLOW_ANONYM,deliveryOptions.isAllowAnonym());
  allowAnonymEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (allowAnonym) {
    allowAnonymEl.select(onKeys[0],true);
  }
  boolean fullWindow=modConfig.getBooleanSafe(IQEditController.CONFIG_FULLWINDOW);
  fullWindowEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  fullWindowEl.select(""String_Node_Str"",fullWindow);
  boolean showTitles=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_QUESTIONTITLE,deliveryOptions.isShowTitles());
  showTitlesEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (showTitles) {
    showTitlesEl.select(onKeys[0],true);
  }
  boolean showMenu=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLEMENU,deliveryOptions.isShowMenu());
  showMenuEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (showMenu) {
    showMenuEl.select(onKeys[0],true);
  }
  boolean personalNotes=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_MEMO,deliveryOptions.isPersonalNotes());
  personalNotesEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (personalNotes) {
    personalNotesEl.select(onKeys[0],true);
  }
  boolean questionProgress=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_QUESTIONPROGRESS,deliveryOptions.isDisplayQuestionProgress());
  displayQuestionProgressEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (questionProgress) {
    displayQuestionProgressEl.select(onKeys[0],true);
  }
  boolean questionScore=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_SCOREPROGRESS,deliveryOptions.isDisplayScoreProgress());
  displayScoreProgressEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (questionScore) {
    displayScoreProgressEl.select(onKeys[0],true);
  }
  boolean enableSuspend=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLESUSPEND,deliveryOptions.isEnableSuspend());
  enableSuspendEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (enableSuspend) {
    enableSuspendEl.select(onKeys[0],true);
  }
  boolean enableCancel=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLECANCEL,deliveryOptions.isEnableCancel());
  enableCancelEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (enableCancel) {
    enableCancelEl.select(onKeys[0],true);
  }
  showResultsOnFinishEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  showResultsOnFinishEl.addActionListener(FormEvent.ONCHANGE);
  ShowResultsOnFinish showSummary=deliveryOptions.getShowResultsOnFinish();
  String defaultConfSummary=showSummary == null ? AssessmentInstance.QMD_ENTRY_SUMMARY_COMPACT : showSummary.getIQEquivalent();
  String confSummary=modConfig.getStringValue(IQEditController.CONFIG_KEY_SUMMARY,defaultConfSummary);
  if (!AssessmentInstance.QMD_ENTRY_SUMMARY_NONE.equals(confSummary)) {
    showResultsOnFinishEl.select(onKeys[0],true);
  }
  String[] typeShowResultsOnFinishKeys=new String[]{AssessmentInstance.QMD_ENTRY_SUMMARY_COMPACT,AssessmentInstance.QMD_ENTRY_SUMMARY_SECTION,AssessmentInstance.QMD_ENTRY_SUMMARY_DETAILED};
  String[] typeShowResultsOnFinishValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
  typeShowResultsOnFinishEl=uifactory.addRadiosVertical(""String_Node_Str"",""String_Node_Str"",formLayout,typeShowResultsOnFinishKeys,typeShowResultsOnFinishValues);
  typeShowResultsOnFinishEl.setVisible(showResultsOnFinishEl.isAtLeastSelected(1));
  if (StringHelper.containsNonWhitespace(confSummary)) {
    for (    String typeShowResultsOnFinishKey : typeShowResultsOnFinishKeys) {
      typeShowResultsOnFinishEl.select(typeShowResultsOnFinishKey,true);
    }
  }
  if (typeShowResultsOnFinishEl.isOneSelected()) {
    typeShowResultsOnFinishEl.select(AssessmentInstance.QMD_ENTRY_SUMMARY_COMPACT,true);
  }
  uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
}"
69370,"private void generateStatusOfTranscodings(){
  availableTranscodings=new HashMap<>();
  availableTranscodings.put(240,new HashSet<Long>());
  availableTranscodings.put(360,new HashSet<Long>());
  availableTranscodings.put(480,new HashSet<Long>());
  availableTranscodings.put(720,new HashSet<Long>());
  availableTranscodings.put(1080,new HashSet<Long>());
  availableTranscodings.put(2160,new HashSet<Long>());
  List<String> types=new ArrayList<>();
  types.add(""String_Node_Str"");
  olatresources=olatresourceManager.findResourceByTypes(types);
  for (  OLATResource videoResource : olatresources) {
    List<VideoTranscoding> transcodings=videoManager.getVideoTranscodings(videoResource);
    for (    VideoTranscoding videoTranscoding : transcodings) {
      if (videoTranscoding.getStatus() != -1 || true) {
        availableTranscodings.get(videoTranscoding.getResolution()).add(videoTranscoding.getVideoResource().getKey());
      }
    }
  }
}","private void generateStatusOfTranscodings(){
  availableTranscodings=new HashMap<>();
  availableTranscodings.put(240,new HashSet<Long>());
  availableTranscodings.put(360,new HashSet<Long>());
  availableTranscodings.put(480,new HashSet<Long>());
  availableTranscodings.put(720,new HashSet<Long>());
  availableTranscodings.put(1080,new HashSet<Long>());
  availableTranscodings.put(2160,new HashSet<Long>());
  List<String> types=new ArrayList<>();
  types.add(""String_Node_Str"");
  olatresources=olatresourceManager.findResourceByTypes(types);
  for (  OLATResource videoResource : olatresources) {
    List<VideoTranscoding> transcodings=videoManager.getVideoTranscodings(videoResource);
    for (    VideoTranscoding videoTranscoding : transcodings) {
      if (videoTranscoding != null && videoTranscoding.getStatus() != -1) {
        Set<Long> oneResolution=availableTranscodings.get(videoTranscoding.getResolution());
        if (oneResolution != null) {
          oneResolution.add(videoTranscoding.getVideoResource().getKey());
        }
      }
    }
  }
}"
69371,"@Override public void event(UserRequest ureq,Controller source,Event event){
  if (pageCtrl == source) {
    if (event == Event.CHANGED_EVENT) {
      loadModel(ureq,null);
      fireEvent(ureq,Event.CHANGED_EVENT);
    }
 else     if (event instanceof PageRemovedEvent || event instanceof PageDeletedEvent) {
      loadModel(ureq,null);
      stackPanel.popUpToController(this);
      fireEvent(ureq,Event.CHANGED_EVENT);
    }
  }
 else   if (commentsCtrl == source) {
    if (event == Event.CHANGED_EVENT || ""String_Node_Str"".equals(event.getCommand())) {
      loadModel(ureq,null);
      fireEvent(ureq,Event.CHANGED_EVENT);
    }
    cmc.deactivate();
    cleanUp();
  }
 else   if (editAssignmentCtrl == source || moveAssignmentCtrl == source) {
    if (event == Event.CHANGED_EVENT || event == Event.DONE_EVENT) {
      loadModel(ureq,null);
      fireEvent(ureq,Event.CHANGED_EVENT);
    }
    cmc.deactivate();
    cleanUp();
  }
 else   if (confirmCloseSectionCtrl == source) {
    if (DialogBoxUIFactory.isYesEvent(event)) {
      PortfolioElementRow row=(PortfolioElementRow)confirmCloseSectionCtrl.getUserObject();
      doClose(ureq,row);
    }
  }
 else   if (confirmReopenSectionCtrl == source) {
    if (DialogBoxUIFactory.isYesEvent(event)) {
      PortfolioElementRow row=(PortfolioElementRow)confirmReopenSectionCtrl.getUserObject();
      doReopen(ureq,row);
    }
  }
 else   if (confirmDeleteAssignmentCtrl == source) {
    if (DialogBoxUIFactory.isYesEvent(event)) {
      PortfolioElementRow row=(PortfolioElementRow)confirmDeleteAssignmentCtrl.getUserObject();
      doDelete(row);
      loadModel(ureq,null);
    }
  }
 else   if (cmc == source) {
    cleanUp();
  }
  super.event(ureq,source,event);
}","@Override public void event(UserRequest ureq,Controller source,Event event){
  if (pageCtrl == source) {
    if (event == Event.CHANGED_EVENT) {
      loadModel(ureq,null);
      fireEvent(ureq,Event.CHANGED_EVENT);
    }
 else     if (event instanceof PageRemovedEvent) {
      loadModel(ureq,null);
      stackPanel.popUpToController(this);
      fireEvent(ureq,Event.CHANGED_EVENT);
    }
 else     if (event instanceof PageDeletedEvent) {
      loadModel(ureq,null);
      fireEvent(ureq,event);
    }
  }
 else   if (commentsCtrl == source) {
    if (event == Event.CHANGED_EVENT || ""String_Node_Str"".equals(event.getCommand())) {
      loadModel(ureq,null);
      fireEvent(ureq,Event.CHANGED_EVENT);
    }
    cmc.deactivate();
    cleanUp();
  }
 else   if (editAssignmentCtrl == source || moveAssignmentCtrl == source) {
    if (event == Event.CHANGED_EVENT || event == Event.DONE_EVENT) {
      loadModel(ureq,null);
      fireEvent(ureq,Event.CHANGED_EVENT);
    }
    cmc.deactivate();
    cleanUp();
  }
 else   if (confirmCloseSectionCtrl == source) {
    if (DialogBoxUIFactory.isYesEvent(event)) {
      PortfolioElementRow row=(PortfolioElementRow)confirmCloseSectionCtrl.getUserObject();
      doClose(ureq,row);
    }
  }
 else   if (confirmReopenSectionCtrl == source) {
    if (DialogBoxUIFactory.isYesEvent(event)) {
      PortfolioElementRow row=(PortfolioElementRow)confirmReopenSectionCtrl.getUserObject();
      doReopen(ureq,row);
    }
  }
 else   if (confirmDeleteAssignmentCtrl == source) {
    if (DialogBoxUIFactory.isYesEvent(event)) {
      PortfolioElementRow row=(PortfolioElementRow)confirmDeleteAssignmentCtrl.getUserObject();
      doDelete(row);
      loadModel(ureq,null);
    }
  }
 else   if (cmc == source) {
    cleanUp();
  }
  super.event(ureq,source,event);
}"
69372,"@Override protected void formInnerEvent(UserRequest ureq,FormItem source,FormEvent event){
  if (newBinderDropdown == source) {
    doNewBinderCallout(ureq);
  }
 else   if (newBinderFromCourseButton == source) {
    doNewBinderFromCourse(ureq);
  }
 else   if (source instanceof FormLink) {
    FormLink link=(FormLink)source;
    String cmd=link.getCmd();
    if (""String_Node_Str"".equals(cmd)) {
      BinderRow row=(BinderRow)link.getUserObject();
      Activateable2 activateable=doOpenBinder(ureq,row);
      if (activateable != null) {
        activateable.activate(ureq,null,null);
      }
    }
  }
  super.formInnerEvent(ureq,source,event);
}","@Override protected void formInnerEvent(UserRequest ureq,FormItem source,FormEvent event){
  if (newBinderDropdown == source) {
    doNewBinderCallout(ureq);
  }
 else   if (newBinderFromCourseButton == source) {
    doNewBinderFromCourse(ureq);
  }
 else   if (tableEl == source) {
    if (event instanceof SelectionEvent) {
      SelectionEvent se=(SelectionEvent)event;
      String cmd=se.getCommand();
      if (""String_Node_Str"".equals(cmd)) {
        BinderRow row=model.getObject(se.getIndex());
        Activateable2 activateable=doOpenBinder(ureq,row);
        if (activateable != null) {
          activateable.activate(ureq,null,null);
        }
      }
    }
  }
 else   if (source instanceof FormLink) {
    FormLink link=(FormLink)source;
    String cmd=link.getCmd();
    if (""String_Node_Str"".equals(cmd)) {
      BinderRow row=(BinderRow)link.getUserObject();
      Activateable2 activateable=doOpenBinder(ureq,row);
      if (activateable != null) {
        activateable.activate(ureq,null,null);
      }
    }
  }
  super.formInnerEvent(ureq,source,event);
}"
69373,"@Override public void initTools(){
  editLink(!openInEditMode);
  stackPanel.addTool(editLink,Align.left);
  editMetadataLink=LinkFactory.createToolLink(""String_Node_Str"",translate(""String_Node_Str""),this);
  editMetadataLink.setIconLeftCSS(""String_Node_Str"");
  editMetadataLink.setVisible(secCallback.canEditPageMetadata(page,assignments));
  stackPanel.addTool(editMetadataLink,Align.left);
  moveToTrashLink=LinkFactory.createToolLink(""String_Node_Str"",translate(""String_Node_Str""),this);
  moveToTrashLink.setIconLeftCSS(""String_Node_Str"");
  moveToTrashLink.setVisible(secCallback.canDeletePage(page));
  stackPanel.addTool(moveToTrashLink,Align.right);
  if (secCallback.canRestorePage(page)) {
    restoreLink=LinkFactory.createToolLink(""String_Node_Str"",translate(""String_Node_Str""),this);
    restoreLink.setIconLeftCSS(""String_Node_Str"");
    stackPanel.addTool(restoreLink,Align.left);
    deleteLink=LinkFactory.createToolLink(""String_Node_Str"",translate(""String_Node_Str""),this);
    deleteLink.setIconLeftCSS(""String_Node_Str"");
    stackPanel.addTool(deleteLink,Align.left);
  }
}","@Override public void initTools(){
  editLink(!openInEditMode);
  stackPanel.addTool(editLink,Align.left);
  editMetadataLink=LinkFactory.createToolLink(""String_Node_Str"",translate(""String_Node_Str""),this);
  editMetadataLink.setIconLeftCSS(""String_Node_Str"");
  editMetadataLink.setVisible(secCallback.canEditPageMetadata(page,assignments));
  stackPanel.addTool(editMetadataLink,Align.left);
  moveToTrashLink=LinkFactory.createToolLink(""String_Node_Str"",translate(""String_Node_Str""),this);
  moveToTrashLink.setIconLeftCSS(""String_Node_Str"");
  moveToTrashLink.setElementCssClass(""String_Node_Str"");
  moveToTrashLink.setVisible(secCallback.canDeletePage(page));
  stackPanel.addTool(moveToTrashLink,Align.right);
  if (secCallback.canRestorePage(page)) {
    restoreLink=LinkFactory.createToolLink(""String_Node_Str"",translate(""String_Node_Str""),this);
    restoreLink.setIconLeftCSS(""String_Node_Str"");
    stackPanel.addTool(restoreLink,Align.left);
    deleteLink=LinkFactory.createToolLink(""String_Node_Str"",translate(""String_Node_Str""),this);
    deleteLink.setIconLeftCSS(""String_Node_Str"");
    deleteLink.setElementCssClass(""String_Node_Str"");
    stackPanel.addTool(deleteLink,Align.left);
  }
}"
69374,"protected void updateSections(){
  String selectedBinderKey=bindersEl.isOneSelected() ? bindersEl.getSelectedKey() : null;
  if (selectedBinderKey == null || ""String_Node_Str"".equals(selectedBinderKey)) {
    sectionsEl.setKeysAndValues(new String[]{""String_Node_Str""},new String[]{""String_Node_Str""},null);
    sectionsEl.reset();
    sectionsEl.setVisible(false);
  }
 else {
    List<Section> sections=portfolioService.getSections(currentBinder);
    if (sections.isEmpty()) {
      sectionsEl.setKeysAndValues(new String[]{""String_Node_Str""},new String[]{""String_Node_Str""},null);
      sectionsEl.reset();
      sectionsEl.setVisible(false);
    }
 else {
      int numOfSections=sections.size();
      String[] theKeys=new String[numOfSections];
      String[] theValues=new String[numOfSections];
      for (int i=0; i < numOfSections; i++) {
        Long sectionKey=sections.get(i).getKey();
        theKeys[i]=sectionKey.toString();
        theValues[i]=(i + 1) + ""String_Node_Str"" + sections.get(i).getTitle();
      }
      sectionsEl.setKeysAndValues(theKeys,theValues,null);
      sectionsEl.reset();
      sectionsEl.setEnabled(true);
      sectionsEl.setVisible(true);
    }
  }
}","protected void updateSections(){
  String selectedBinderKey=bindersEl.isOneSelected() ? bindersEl.getSelectedKey() : null;
  if (selectedBinderKey == null || ""String_Node_Str"".equals(selectedBinderKey)) {
    sectionsEl.setKeysAndValues(new String[]{""String_Node_Str""},new String[]{""String_Node_Str""},null);
    sectionsEl.reset();
    sectionsEl.setVisible(false);
  }
 else {
    List<Section> sections=portfolioService.getSections(currentBinder);
    if (sections.isEmpty()) {
      sectionsEl.setKeysAndValues(new String[]{""String_Node_Str""},new String[]{""String_Node_Str""},null);
      sectionsEl.reset();
      sectionsEl.setVisible(false);
    }
 else {
      int numOfSections=sections.size();
      String[] theKeys=new String[numOfSections];
      String[] theValues=new String[numOfSections];
      for (int i=0; i < numOfSections; i++) {
        Long sectionKey=sections.get(i).getKey();
        theKeys[i]=sectionKey.toString();
        theValues[i]=sections.get(i).getTitle();
      }
      sectionsEl.setKeysAndValues(theKeys,theValues,null);
      sectionsEl.reset();
      sectionsEl.setEnabled(true);
      sectionsEl.setVisible(true);
    }
  }
}"
69375,"@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (event instanceof RestoreBinderEvent || event instanceof DeleteBinderEvent) {
    stackPanel.popUpToController(this);
  }
  super.event(ureq,source,event);
}","@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (event instanceof RestoreBinderEvent || event instanceof DeleteBinderEvent || event instanceof PageDeletedEvent) {
    stackPanel.popUpToController(this);
  }
  super.event(ureq,source,event);
}"
69376,"/** 
 * Yes in a dialog box controller.
 */
private void confirm(){
  By confirmButtonBy=By.xpath(""String_Node_Str"");
  OOGraphene.waitElement(confirmButtonBy,5,browser);
  OOGraphene.waitScrollTop(browser);
  browser.findElement(confirmButtonBy).click();
  OOGraphene.waitBusy(browser);
}","/** 
 * Yes in a dialog box controller.
 */
protected void confirm(){
  By confirmButtonBy=By.xpath(""String_Node_Str"");
  OOGraphene.waitElement(confirmButtonBy,5,browser);
  OOGraphene.waitScrollTop(browser);
  browser.findElement(confirmButtonBy).click();
  OOGraphene.waitBusy(browser);
}"
69377,"public BinderPage assertOnPageInToc(String title){
  By sectionTitleBy=By.xpath(""String_Node_Str"" + title + ""String_Node_Str"");
  OOGraphene.waitElement(sectionTitleBy,5,browser);
  return this;
}","public BinderPage assertOnPageInToc(String title){
  By pageTitleBy=By.xpath(""String_Node_Str"" + title + ""String_Node_Str"");
  OOGraphene.waitElement(pageTitleBy,5,browser);
  return this;
}"
69378,"/** 
 * @param ores
 * @return a wiki loaded from cache or the fileSystem
 */
public Wiki getOrLoadWiki(final OLATResourceable ores){
  final String wikiKey=OresHelper.createStringRepresenting(ores);
  if (wikiCache == null) {
    wikiCache=coordinator.getCoordinator().getCacher().getCache(WikiManager.class.getSimpleName(),""String_Node_Str"");
  }
  Wiki wiki=wikiCache.get(wikiKey);
  if (wiki != null) {
    log.debug(""String_Node_Str"" + ores.getResourceableId());
    return wiki;
  }
  coordinator.getCoordinator().getSyncer().doInSync(ores,new SyncerExecutor(){
    public void execute(){
      long start=0;
      if (log.isDebug()) {
        log.debug(""String_Node_Str"" + ores.getResourceableId());
        start=System.currentTimeMillis();
      }
      Wiki wiki=null;
      VFSContainer folder=getWikiContainer(ores,WIKI_RESOURCE_FOLDER_NAME);
      if (folder == null) {
        createFolders(ores);
        folder=getWikiContainer(ores,WIKI_RESOURCE_FOLDER_NAME);
      }
      wiki=new Wiki(getWikiRootContainer(ores));
      List<VFSItem> wikiLeaves=folder.getItems(new VFSItemSuffixFilter(new String[]{WikiManager.WIKI_PROPERTIES_SUFFIX}));
      for (Iterator<VFSItem> iter=wikiLeaves.iterator(); iter.hasNext(); ) {
        VFSLeaf propertiesFile=(VFSLeaf)iter.next();
        WikiPage page=Wiki.assignPropertiesToPage(propertiesFile);
        if (page == null) {
          String contentFileToBeDeleted=(propertiesFile.getName().substring(0,propertiesFile.getName().length() - WikiManager.WIKI_PROPERTIES_SUFFIX.length()) + WikiManager.WIKI_FILE_SUFFIX);
          folder.resolve(contentFileToBeDeleted).delete();
          propertiesFile.delete();
          continue;
        }
        if (page.getPageName().equals(WikiPage.WIKI_INDEX_PAGE) || page.getPageName().equals(WikiPage.WIKI_MENU_PAGE)) {
          VFSLeaf leaf=(VFSLeaf)folder.resolve(page.getPageId() + ""String_Node_Str"" + WikiManager.WIKI_FILE_SUFFIX);
          page.setContent(FileUtils.load(leaf.getInputStream(),""String_Node_Str""));
        }
        String idOutOfFileName=propertiesFile.getName().substring(0,propertiesFile.getName().indexOf(""String_Node_Str""));
        if (!page.getPageId().equals(idOutOfFileName)) {
          propertiesFile.rename(page.getPageId() + ""String_Node_Str"" + WikiManager.WIKI_PROPERTIES_SUFFIX);
          VFSLeaf contentFile=(VFSLeaf)folder.resolve(idOutOfFileName + ""String_Node_Str"" + WikiManager.WIKI_FILE_SUFFIX);
          contentFile.rename(page.getPageId() + ""String_Node_Str"" + WikiManager.WIKI_FILE_SUFFIX);
        }
        wiki.addPage(page);
      }
      if (wiki.getNumberOfPages() == 0) {
        WikiPage indexPage=new WikiPage(WikiPage.WIKI_INDEX_PAGE);
        WikiPage menuPage=new WikiPage(WikiPage.WIKI_MENU_PAGE);
        indexPage.setCreationTime(System.currentTimeMillis());
        wiki.addPage(indexPage);
        menuPage.setCreationTime(System.currentTimeMillis());
        menuPage.setContent(""String_Node_Str"");
        wiki.addPage(menuPage);
        saveWikiPage(ores,indexPage,false,wiki);
        saveWikiPage(ores,menuPage,false,wiki);
      }
      WikiPage recentChangesPage=new WikiPage(WikiPage.WIKI_RECENT_CHANGES_PAGE);
      WikiPage a2zPage=new WikiPage(WikiPage.WIKI_A2Z_PAGE);
      wiki.addPage(recentChangesPage);
      wiki.addPage(a2zPage);
      if (log.isDebug()) {
        long stop=System.currentTimeMillis();
        log.debug(""String_Node_Str"" + (stop - start));
      }
      wikiCache.put(wikiKey,wiki);
    }
  }
);
  return wikiCache.get(wikiKey);
}","/** 
 * @param ores
 * @return a wiki loaded from cache or the fileSystem
 */
public Wiki getOrLoadWiki(final OLATResourceable ores){
  final String wikiKey=OresHelper.createStringRepresenting(ores);
  if (wikiCache == null) {
    wikiCache=coordinator.getCoordinator().getCacher().getCache(WikiManager.class.getSimpleName(),""String_Node_Str"");
  }
  return wikiCache.computeIfAbsent(wikiKey,(key) -> {
    long start=0;
    if (log.isDebug()) {
      log.debug(""String_Node_Str"" + ores.getResourceableId());
      start=System.currentTimeMillis();
    }
    VFSContainer folder=getWikiContainer(ores,WIKI_RESOURCE_FOLDER_NAME);
    if (folder == null) {
      createFolders(ores);
      folder=getWikiContainer(ores,WIKI_RESOURCE_FOLDER_NAME);
    }
    Wiki wiki=new Wiki(getWikiRootContainer(ores));
    List<VFSItem> wikiLeaves=folder.getItems(new VFSItemSuffixFilter(new String[]{WikiManager.WIKI_PROPERTIES_SUFFIX}));
    for (Iterator<VFSItem> iter=wikiLeaves.iterator(); iter.hasNext(); ) {
      VFSLeaf propertiesFile=(VFSLeaf)iter.next();
      WikiPage page=Wiki.assignPropertiesToPage(propertiesFile);
      if (page == null) {
        String contentFileToBeDeleted=(propertiesFile.getName().substring(0,propertiesFile.getName().length() - WikiManager.WIKI_PROPERTIES_SUFFIX.length()) + WikiManager.WIKI_FILE_SUFFIX);
        folder.resolve(contentFileToBeDeleted).delete();
        propertiesFile.delete();
        continue;
      }
      if (page.getPageName().equals(WikiPage.WIKI_INDEX_PAGE) || page.getPageName().equals(WikiPage.WIKI_MENU_PAGE)) {
        VFSLeaf leaf=(VFSLeaf)folder.resolve(page.getPageId() + ""String_Node_Str"" + WikiManager.WIKI_FILE_SUFFIX);
        page.setContent(FileUtils.load(leaf.getInputStream(),""String_Node_Str""));
      }
      String idOutOfFileName=propertiesFile.getName().substring(0,propertiesFile.getName().indexOf(""String_Node_Str""));
      if (!page.getPageId().equals(idOutOfFileName)) {
        propertiesFile.rename(page.getPageId() + ""String_Node_Str"" + WikiManager.WIKI_PROPERTIES_SUFFIX);
        VFSLeaf contentFile=(VFSLeaf)folder.resolve(idOutOfFileName + ""String_Node_Str"" + WikiManager.WIKI_FILE_SUFFIX);
        contentFile.rename(page.getPageId() + ""String_Node_Str"" + WikiManager.WIKI_FILE_SUFFIX);
      }
      wiki.addPage(page);
    }
    if (wiki.getNumberOfPages() == 0) {
      WikiPage indexPage=new WikiPage(WikiPage.WIKI_INDEX_PAGE);
      WikiPage menuPage=new WikiPage(WikiPage.WIKI_MENU_PAGE);
      indexPage.setCreationTime(System.currentTimeMillis());
      wiki.addPage(indexPage);
      menuPage.setCreationTime(System.currentTimeMillis());
      menuPage.setContent(""String_Node_Str"");
      wiki.addPage(menuPage);
      saveWikiPage(ores,indexPage,false,wiki);
      saveWikiPage(ores,menuPage,false,wiki);
    }
    WikiPage recentChangesPage=new WikiPage(WikiPage.WIKI_RECENT_CHANGES_PAGE);
    WikiPage a2zPage=new WikiPage(WikiPage.WIKI_A2Z_PAGE);
    wiki.addPage(recentChangesPage);
    wiki.addPage(a2zPage);
    if (log.isDebug()) {
      long stop=System.currentTimeMillis();
      log.debug(""String_Node_Str"" + (stop - start));
    }
    return wiki;
  }
);
}"
69379,"public CopyVisitor(Path destDir) throws IOException {
  this.destDir=destDir;
  wikiDir=destDir.resolve(WIKI_RESOURCE_FOLDER_NAME);
  Files.createDirectories(wikiDir);
  mediaDir=destDir.resolve(WikiContainer.MEDIA_FOLDER_NAME);
  Files.createDirectories(mediaDir);
  Path versionDir=destDir.resolve(VERSION_FOLDER_NAME);
  Files.createDirectories(versionDir);
}","public CopyVisitor(Path sourceDir,Path destDir) throws IOException {
  this.destDir=destDir;
  this.sourceDir=sourceDir;
  Path wikiDir=destDir.resolve(WIKI_RESOURCE_FOLDER_NAME);
  Files.createDirectories(wikiDir);
  Path mediaDir=destDir.resolve(WikiContainer.MEDIA_FOLDER_NAME);
  Files.createDirectories(mediaDir);
  Path versionDir=destDir.resolve(VERSION_FOLDER_NAME);
  Files.createDirectories(versionDir);
}"
69380,"public boolean importWiki(File file,String filename,File targetDirectory){
  try {
    Path path=FileResource.getResource(file,filename);
    if (path == null) {
      return false;
    }
    Path destDir=targetDirectory.toPath();
    Files.walkFileTree(path,new CopyVisitor(destDir));
    return true;
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    return false;
  }
}","public boolean importWiki(File file,String filename,File targetDirectory){
  try {
    Path path=FileResource.getResource(file,filename);
    if (path == null) {
      return false;
    }
    Path destDir=targetDirectory.toPath();
    Files.walkFileTree(path,new ImportVisitor(destDir));
    return true;
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    return false;
  }
}"
69381,"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  String filename=file.getFileName().toString();
  if (filename.endsWith(WikiManager.WIKI_FILE_SUFFIX) || filename.endsWith(WikiManager.WIKI_PROPERTIES_SUFFIX)) {
    final Path destFile=Paths.get(wikiDir.toString(),file.toString());
    Files.copy(file,destFile,StandardCopyOption.REPLACE_EXISTING);
  }
 else   if (!filename.contains(WikiManager.WIKI_FILE_SUFFIX + ""String_Node_Str"") && !filename.contains(WikiManager.WIKI_PROPERTIES_SUFFIX + ""String_Node_Str"")) {
    final Path destFile=Paths.get(mediaDir.toString(),file.toString());
    Files.copy(file,destFile,StandardCopyOption.REPLACE_EXISTING);
  }
  return FileVisitResult.CONTINUE;
}","@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  String filename=file.getFileName().toString();
  if (filename.endsWith(WikiManager.WIKI_PROPERTIES_SUFFIX)) {
    final Path destFile=Paths.get(wikiDir.toString(),file.toString());
    resetAndCopyProperties(file,destFile);
  }
 else   if (filename.endsWith(WIKI_FILE_SUFFIX)) {
    final Path destFile=Paths.get(wikiDir.toString(),file.toString());
    Files.copy(file,destFile,StandardCopyOption.REPLACE_EXISTING);
  }
 else   if (!filename.contains(WIKI_FILE_SUFFIX + ""String_Node_Str"") && !filename.contains(WIKI_PROPERTIES_SUFFIX + ""String_Node_Str"")) {
    final Path destFile=Paths.get(mediaDir.toString(),file.toString());
    Files.copy(file,destFile,StandardCopyOption.REPLACE_EXISTING);
  }
  return FileVisitResult.CONTINUE;
}"
69382,"public HighScoreRunController(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,CourseNode courseNode){
  super(ureq,wControl,""String_Node_Str"");
  List<AssessmentEntry> assessEntries=userCourseEnv.getCourseEnvironment().getAssessmentManager().getAssessmentEntries(courseNode);
  ModuleConfiguration config=courseNode.getModuleConfiguration();
  Date start=config.getBooleanEntry(HighScoreEditController.CONFIG_KEY_DATESTART) != null ? (Date)config.get(HighScoreEditController.CONFIG_KEY_DATESTART) : null;
  if (start != null && start.getTime() > new Date().getTime())   return;
  viewHighscore=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_HIGHSCORE);
  if (!viewHighscore)   return;
  viewTable=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_LISTING);
  viewHistogram=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_HISTOGRAM);
  viewPodium=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_PODIUM);
  anonymous=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_ANONYMIZE);
  int bestOnly=(int)config.get(HighScoreEditController.CONFIG_KEY_BESTONLY);
  tableSize=bestOnly != 0 ? (int)config.get(HighScoreEditController.CONFIG_KEY_NUMUSER) : assessEntries.size();
  ownIdentity=ureq.getIdentity();
  initLists();
  allScores=highScoreManager.sortRankByScore(assessEntries,allMembers,ownIdMembers,allPodium,ownIdIndices,tableSize,ownIdentity,userManager);
  initForm(ureq);
}","public HighScoreRunController(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,CourseNode courseNode){
  super(ureq,wControl,""String_Node_Str"");
  List<AssessmentEntry> assessEntries=userCourseEnv.getCourseEnvironment().getAssessmentManager().getAssessmentEntries(courseNode);
  ModuleConfiguration config=courseNode.getModuleConfiguration();
  Date start=config.getBooleanEntry(HighScoreEditController.CONFIG_KEY_DATESTART) != null ? (Date)config.get(HighScoreEditController.CONFIG_KEY_DATESTART) : null;
  if (start != null && start.getTime() > new Date().getTime())   return;
  viewHighscore=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_HIGHSCORE);
  if (!viewHighscore)   return;
  viewTable=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_LISTING);
  viewHistogram=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_HISTOGRAM);
  viewPodium=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_PODIUM);
  anonymous=config.getBooleanSafe(HighScoreEditController.CONFIG_KEY_ANONYMIZE);
  int bestOnly=config.getBooleanEntry(HighScoreEditController.CONFIG_KEY_BESTONLY) != null ? (int)config.get(HighScoreEditController.CONFIG_KEY_BESTONLY) : 0;
  tableSize=bestOnly != 0 ? (int)config.get(HighScoreEditController.CONFIG_KEY_NUMUSER) : assessEntries.size();
  ownIdentity=ureq.getIdentity();
  initLists();
  allScores=highScoreManager.sortRankByScore(assessEntries,allMembers,ownIdMembers,allPodium,ownIdIndices,tableSize,ownIdentity,userManager);
  initForm(ureq);
}"
69383,"public void setAdditionalOpenIDConnectIF(String providerName,String displayName,boolean rootEnabled,String issuer,String endPoint,String apiKey,String apiSecret){
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",""String_Node_Str"",false);
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",rootEnabled ? ""String_Node_Str"" : ""String_Node_Str"",false);
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",apiKey,false);
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",apiSecret,false);
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",issuer,false);
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",displayName,false);
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",endPoint,true);
  updateProperties();
}","public void setAdditionalOpenIDConnectIF(String providerName,String displayName,boolean rootEnabled,String issuer,String endPoint,String apiKey,String apiSecret){
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",""String_Node_Str"",true);
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",rootEnabled ? ""String_Node_Str"" : ""String_Node_Str"",true);
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",apiKey,true);
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",apiSecret,true);
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",issuer,true);
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",displayName,true);
  setStringProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",endPoint,true);
  updateProperties();
}"
69384,"public void removeAdditionalOpenIDConnectIF(String providerName){
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",false);
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",false);
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",false);
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",false);
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",false);
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",false);
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",true);
  updateProperties();
}","public void removeAdditionalOpenIDConnectIF(String providerName){
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",true);
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",true);
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",true);
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",true);
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",true);
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",true);
  removeProperty(""String_Node_Str"" + providerName + ""String_Node_Str"",true);
  updateProperties();
}"
69385,"private void writeData(List<AssessmentResponse> responses,OpenXMLWorksheet exportSheet,OpenXMLWorkbook workbook){
  int num=0;
  SessionResponses sessionResponses=null;
  int numOfResponses=responses.size();
  for (int i=0; i < numOfResponses; i++) {
    AssessmentResponse response=responses.get(i);
    AssessmentItemSession itemSession=response.getAssessmentItemSession();
    AssessmentTestSession testSession=itemSession.getAssessmentTestSession();
    if (sessionResponses == null) {
      sessionResponses=new SessionResponses(testSession);
    }
 else     if (!sessionResponses.getSessionKey().equals(testSession.getKey())) {
      writeDataRow(++num,sessionResponses,exportSheet,workbook);
      sessionResponses=new SessionResponses(testSession);
    }
    sessionResponses.addResponse(itemSession,response);
  }
  writeDataRow(++num,sessionResponses,exportSheet,workbook);
}","private void writeData(List<AssessmentResponse> responses,OpenXMLWorksheet exportSheet,OpenXMLWorkbook workbook){
  int num=0;
  SessionResponses sessionResponses=null;
  int numOfResponses=responses.size();
  for (int i=0; i < numOfResponses; i++) {
    AssessmentResponse response=responses.get(i);
    AssessmentItemSession itemSession=response.getAssessmentItemSession();
    AssessmentTestSession testSession=itemSession.getAssessmentTestSession();
    if (sessionResponses == null) {
      sessionResponses=new SessionResponses(testSession);
    }
 else     if (!sessionResponses.getSessionKey().equals(testSession.getKey())) {
      writeDataRow(++num,sessionResponses,exportSheet,workbook);
      sessionResponses=new SessionResponses(testSession);
    }
    sessionResponses.addResponse(itemSession,response);
  }
  if (sessionResponses != null) {
    writeDataRow(++num,sessionResponses,exportSheet,workbook);
  }
}"
69386,"private AssessmentItemBuilder convertKPrim(Item item){
  KPrimAssessmentItemBuilder itemBuilder=new KPrimAssessmentItemBuilder(qtiSerializer);
  convertItemBasics(item,itemBuilder);
  Question question=item.getQuestion();
  itemBuilder.setShuffle(question.isShuffle());
  List<Response> responses=question.getResponses();
  List<SimpleAssociableChoice> choices=itemBuilder.getKprimChoices();
  for (int i=0; i < 4; i++) {
    Response response=responses.get(i);
    SimpleAssociableChoice choice=choices.get(i);
    String answer=response.getContent().renderAsHtmlForEditor();
    P firstChoiceText=AssessmentItemFactory.getParagraph(choice,answer);
    choice.getFlowStatics().clear();
    choice.getFlowStatics().add(firstChoiceText);
    if (response.isCorrect()) {
      itemBuilder.setAssociation(choice.getIdentifier(),QTI21Constants.CORRECT_IDENTIFIER);
    }
 else {
      itemBuilder.setAssociation(choice.getIdentifier(),QTI21Constants.WRONG_IDENTIFIER);
    }
  }
  double score=question.getMaxValue();
  itemBuilder.setMinScore(0.0d);
  itemBuilder.setMaxScore(score);
  return itemBuilder;
}","private AssessmentItemBuilder convertKPrim(Item item){
  KPrimAssessmentItemBuilder itemBuilder=new KPrimAssessmentItemBuilder(qtiSerializer);
  convertItemBasics(item,itemBuilder);
  Question question=item.getQuestion();
  itemBuilder.setShuffle(question.isShuffle());
  List<Response> responses=question.getResponses();
  List<SimpleAssociableChoice> choices=itemBuilder.getKprimChoices();
  for (int i=0; i < 4; i++) {
    Response response=responses.get(i);
    SimpleAssociableChoice choice=choices.get(i);
    String answer=response.getContent().renderAsHtmlForEditor();
    answer=prepareContent(answer);
    P firstChoiceText=AssessmentItemFactory.getParagraph(choice,answer);
    choice.getFlowStatics().clear();
    choice.getFlowStatics().add(firstChoiceText);
    if (response.isCorrect()) {
      itemBuilder.setAssociation(choice.getIdentifier(),QTI21Constants.CORRECT_IDENTIFIER);
    }
 else {
      itemBuilder.setAssociation(choice.getIdentifier(),QTI21Constants.WRONG_IDENTIFIER);
    }
  }
  double score=question.getMaxValue();
  itemBuilder.setMinScore(0.0d);
  itemBuilder.setMaxScore(score);
  return itemBuilder;
}"
69387,"private void convertItemBasics(Item item,AssessmentItemBuilder itemBuilder){
  AssessmentItem assessmentItem=itemBuilder.getAssessmentItem();
  if (StringHelper.containsNonWhitespace(item.getTitle())) {
    assessmentItem.setTitle(item.getTitle());
  }
  if (StringHelper.containsNonWhitespace(item.getLabel())) {
    assessmentItem.setLabel(item.getLabel());
  }
  Question question=item.getQuestion();
  String questionText=question.getQuestion().renderAsHtmlForEditor();
  itemBuilder.setQuestion(questionText);
  String hintText=question.getHintText();
  if (StringHelper.containsNonWhitespace(hintText)) {
    ModalFeedbackBuilder hint=itemBuilder.createHint();
    hint.setText(hintText);
  }
  String feedbackMastery=QTIEditHelper.getFeedbackMasteryText(item);
  if (StringHelper.containsNonWhitespace(feedbackMastery)) {
    ModalFeedbackBuilder feedback=itemBuilder.createCorrectFeedback();
    feedback.setText(feedbackMastery);
  }
  String feedbackFail=QTIEditHelper.getFeedbackFailText(item);
  if (StringHelper.containsNonWhitespace(feedbackFail)) {
    ModalFeedbackBuilder feedback=itemBuilder.createIncorrectFeedback();
    feedback.setText(feedbackFail);
  }
}","private void convertItemBasics(Item item,AssessmentItemBuilder itemBuilder){
  AssessmentItem assessmentItem=itemBuilder.getAssessmentItem();
  if (StringHelper.containsNonWhitespace(item.getTitle())) {
    assessmentItem.setTitle(item.getTitle());
  }
  if (StringHelper.containsNonWhitespace(item.getLabel())) {
    assessmentItem.setLabel(item.getLabel());
  }
  Question question=item.getQuestion();
  String questionText=question.getQuestion().renderAsHtmlForEditor();
  questionText=prepareContent(questionText);
  itemBuilder.setQuestion(""String_Node_Str"" + questionText + ""String_Node_Str"");
  String hintText=question.getHintText();
  if (StringHelper.containsNonWhitespace(hintText)) {
    ModalFeedbackBuilder hint=itemBuilder.createHint();
    hint.setText(hintText);
  }
  String feedbackMastery=QTIEditHelper.getFeedbackMasteryText(item);
  if (StringHelper.containsNonWhitespace(feedbackMastery)) {
    ModalFeedbackBuilder feedback=itemBuilder.createCorrectFeedback();
    feedback.setText(feedbackMastery);
  }
  String feedbackFail=QTIEditHelper.getFeedbackFailText(item);
  if (StringHelper.containsNonWhitespace(feedbackFail)) {
    ModalFeedbackBuilder feedback=itemBuilder.createIncorrectFeedback();
    feedback.setText(feedbackFail);
  }
}"
69388,"private AssessmentItemBuilder convertFIB(Item item){
  FIBAssessmentItemBuilder itemBuilder=new FIBAssessmentItemBuilder(EntryType.text,qtiSerializer);
  itemBuilder.setQuestion(""String_Node_Str"");
  itemBuilder.clearTextEntries();
  convertItemBasics(item,itemBuilder);
  Question question=item.getQuestion();
  boolean singleCorrect=question.isSingleCorrect();
  if (singleCorrect) {
    itemBuilder.setScoreEvaluationMode(ScoreEvaluation.allCorrectAnswers);
  }
 else {
    itemBuilder.setScoreEvaluationMode(ScoreEvaluation.perAnswer);
  }
  itemBuilder.getMinScoreBuilder().setScore(new Double(question.getMinValue()));
  itemBuilder.getMaxScoreBuilder().setScore(new Double(question.getMaxValue()));
  List<Response> responses=question.getResponses();
  StringBuilder sb=new StringBuilder();
  for (  Response response : responses) {
    if (response instanceof FIBResponse) {
      FIBResponse gap=(FIBResponse)response;
      if (FIBResponse.TYPE_BLANK.equals(gap.getType())) {
        String responseId=itemBuilder.generateResponseIdentifier();
        StringBuilder entryString=new StringBuilder();
        entryString.append(""String_Node_Str"").append(responseId).append(""String_Node_Str"");
        TextEntry entry=itemBuilder.createTextEntry(responseId);
        entry.setCaseSensitive(""String_Node_Str"".equals(gap.getCaseSensitive()));
        if (gap.getMaxLength() > 0) {
          entry.setExpectedLength(gap.getMaxLength());
          entryString.append(""String_Node_Str"").append(gap.getMaxLength()).append(""String_Node_Str"");
        }
 else         if (gap.getSize() > 0) {
          entry.setExpectedLength(gap.getSize());
          entryString.append(""String_Node_Str"").append(gap.getSize()).append(""String_Node_Str"");
        }
        parseAlternatives(gap.getCorrectBlank(),gap.getPoints(),entry);
        entryString.append(""String_Node_Str"");
        sb.append(entryString);
      }
 else       if (FIBResponse.TYPE_CONTENT.equals(gap.getType())) {
        Material text=gap.getContent();
        String htmltext=text.renderAsHtmlForEditor();
        sb.append(htmltext);
      }
    }
  }
  String fib=""String_Node_Str"" + sb.toString() + ""String_Node_Str"";
  itemBuilder.setQuestion(fib);
  return itemBuilder;
}","private AssessmentItemBuilder convertFIB(Item item){
  FIBAssessmentItemBuilder itemBuilder=new FIBAssessmentItemBuilder(EntryType.text,qtiSerializer);
  itemBuilder.setQuestion(""String_Node_Str"");
  itemBuilder.clearTextEntries();
  convertItemBasics(item,itemBuilder);
  Question question=item.getQuestion();
  boolean singleCorrect=question.isSingleCorrect();
  if (singleCorrect) {
    itemBuilder.setScoreEvaluationMode(ScoreEvaluation.allCorrectAnswers);
  }
 else {
    itemBuilder.setScoreEvaluationMode(ScoreEvaluation.perAnswer);
  }
  itemBuilder.getMinScoreBuilder().setScore(new Double(question.getMinValue()));
  itemBuilder.getMaxScoreBuilder().setScore(new Double(question.getMaxValue()));
  List<Response> responses=question.getResponses();
  StringBuilder sb=new StringBuilder();
  for (  Response response : responses) {
    if (response instanceof FIBResponse) {
      FIBResponse gap=(FIBResponse)response;
      if (FIBResponse.TYPE_BLANK.equals(gap.getType())) {
        String responseId=itemBuilder.generateResponseIdentifier();
        StringBuilder entryString=new StringBuilder();
        entryString.append(""String_Node_Str"").append(responseId).append(""String_Node_Str"");
        TextEntry entry=itemBuilder.createTextEntry(responseId);
        entry.setCaseSensitive(""String_Node_Str"".equals(gap.getCaseSensitive()));
        if (gap.getMaxLength() > 0) {
          entry.setExpectedLength(gap.getMaxLength());
          entryString.append(""String_Node_Str"").append(gap.getMaxLength()).append(""String_Node_Str"");
        }
 else         if (gap.getSize() > 0) {
          entry.setExpectedLength(gap.getSize());
          entryString.append(""String_Node_Str"").append(gap.getSize()).append(""String_Node_Str"");
        }
        parseAlternatives(gap.getCorrectBlank(),gap.getPoints(),entry);
        entryString.append(""String_Node_Str"");
        sb.append(entryString);
      }
 else       if (FIBResponse.TYPE_CONTENT.equals(gap.getType())) {
        Material text=gap.getContent();
        String htmltext=text.renderAsHtmlForEditor();
        htmltext=prepareContent(htmltext);
        sb.append(htmltext);
      }
    }
  }
  String fib=""String_Node_Str"" + sb.toString() + ""String_Node_Str"";
  itemBuilder.setQuestion(fib);
  return itemBuilder;
}"
69389,"private AssessmentItemBuilder convertSingleChoice(Item item){
  SingleChoiceAssessmentItemBuilder itemBuilder=new SingleChoiceAssessmentItemBuilder(qtiSerializer);
  convertItemBasics(item,itemBuilder);
  itemBuilder.clearMapping();
  itemBuilder.clearSimpleChoices();
  itemBuilder.setScoreEvaluationMode(ScoreEvaluation.allCorrectAnswers);
  ChoiceInteraction interaction=itemBuilder.getChoiceInteraction();
  Question question=item.getQuestion();
  itemBuilder.setShuffle(question.isShuffle());
  List<Response> responses=question.getResponses();
  for (  Response response : responses) {
    String responseText=response.getContent().renderAsHtmlForEditor();
    SimpleChoice newChoice;
    if (StringHelper.isHtml(responseText)) {
      newChoice=AssessmentItemFactory.createSimpleChoice(interaction,""String_Node_Str"",itemBuilder.getQuestionType().getPrefix());
      htmlBuilder.appendHtml(newChoice,responseText);
    }
 else {
      newChoice=AssessmentItemFactory.createSimpleChoice(interaction,responseText,itemBuilder.getQuestionType().getPrefix());
    }
    itemBuilder.addSimpleChoice(newChoice);
    if (response.isCorrect()) {
      itemBuilder.setCorrectAnswer(newChoice.getIdentifier());
    }
  }
  double correctScore=question.getSingleCorrectScore();
  if (correctScore >= 0.0d) {
    itemBuilder.setMinScore(0.0d);
    itemBuilder.setMaxScore(correctScore);
  }
  return itemBuilder;
}","private AssessmentItemBuilder convertSingleChoice(Item item){
  SingleChoiceAssessmentItemBuilder itemBuilder=new SingleChoiceAssessmentItemBuilder(qtiSerializer);
  convertItemBasics(item,itemBuilder);
  itemBuilder.clearMapping();
  itemBuilder.clearSimpleChoices();
  itemBuilder.setScoreEvaluationMode(ScoreEvaluation.allCorrectAnswers);
  ChoiceInteraction interaction=itemBuilder.getChoiceInteraction();
  Question question=item.getQuestion();
  itemBuilder.setShuffle(question.isShuffle());
  List<Response> responses=question.getResponses();
  for (  Response response : responses) {
    String responseText=response.getContent().renderAsHtmlForEditor();
    responseText=prepareContent(responseText);
    SimpleChoice newChoice;
    if (StringHelper.isHtml(responseText)) {
      newChoice=AssessmentItemFactory.createSimpleChoice(interaction,""String_Node_Str"",itemBuilder.getQuestionType().getPrefix());
      htmlBuilder.appendHtml(newChoice,responseText);
    }
 else {
      newChoice=AssessmentItemFactory.createSimpleChoice(interaction,responseText,itemBuilder.getQuestionType().getPrefix());
    }
    itemBuilder.addSimpleChoice(newChoice);
    if (response.isCorrect()) {
      itemBuilder.setCorrectAnswer(newChoice.getIdentifier());
    }
  }
  double correctScore=question.getSingleCorrectScore();
  if (correctScore >= 0.0d) {
    itemBuilder.setMinScore(0.0d);
    itemBuilder.setMaxScore(correctScore);
  }
  return itemBuilder;
}"
69390,"private AssessmentItemBuilder convertMultipleChoice(Item item){
  MultipleChoiceAssessmentItemBuilder itemBuilder=new MultipleChoiceAssessmentItemBuilder(qtiSerializer);
  convertItemBasics(item,itemBuilder);
  itemBuilder.clearMapping();
  itemBuilder.clearSimpleChoices();
  ChoiceInteraction interaction=itemBuilder.getChoiceInteraction();
  Question question=item.getQuestion();
  itemBuilder.setShuffle(question.isShuffle());
  boolean singleCorrect=question.isSingleCorrect();
  List<Response> responses=question.getResponses();
  for (  Response response : responses) {
    String responseText=response.getContent().renderAsHtmlForEditor();
    SimpleChoice newChoice;
    if (StringHelper.isHtml(responseText)) {
      newChoice=AssessmentItemFactory.createSimpleChoice(interaction,""String_Node_Str"",itemBuilder.getQuestionType().getPrefix());
      htmlBuilder.appendHtml(newChoice,responseText);
    }
 else {
      newChoice=AssessmentItemFactory.createSimpleChoice(interaction,responseText,itemBuilder.getQuestionType().getPrefix());
    }
    itemBuilder.addSimpleChoice(newChoice);
    if (response.isCorrect()) {
      itemBuilder.addCorrectAnswer(newChoice.getIdentifier());
    }
    double score=response.getPoints();
    if (singleCorrect) {
      if (score > 0.0f) {
        itemBuilder.setMaxScore(score);
      }
    }
 else {
      itemBuilder.setMapping(newChoice.getIdentifier(),score);
    }
  }
  if (singleCorrect) {
    itemBuilder.setScoreEvaluationMode(ScoreEvaluation.allCorrectAnswers);
  }
 else {
    itemBuilder.setScoreEvaluationMode(ScoreEvaluation.perAnswer);
  }
  return itemBuilder;
}","private AssessmentItemBuilder convertMultipleChoice(Item item){
  MultipleChoiceAssessmentItemBuilder itemBuilder=new MultipleChoiceAssessmentItemBuilder(qtiSerializer);
  convertItemBasics(item,itemBuilder);
  itemBuilder.clearMapping();
  itemBuilder.clearSimpleChoices();
  ChoiceInteraction interaction=itemBuilder.getChoiceInteraction();
  Question question=item.getQuestion();
  itemBuilder.setShuffle(question.isShuffle());
  boolean singleCorrect=question.isSingleCorrect();
  List<Response> responses=question.getResponses();
  for (  Response response : responses) {
    String responseText=response.getContent().renderAsHtmlForEditor();
    responseText=prepareContent(responseText);
    SimpleChoice newChoice;
    if (StringHelper.isHtml(responseText)) {
      newChoice=AssessmentItemFactory.createSimpleChoice(interaction,""String_Node_Str"",itemBuilder.getQuestionType().getPrefix());
      htmlBuilder.appendHtml(newChoice,responseText);
    }
 else {
      newChoice=AssessmentItemFactory.createSimpleChoice(interaction,responseText,itemBuilder.getQuestionType().getPrefix());
    }
    itemBuilder.addSimpleChoice(newChoice);
    if (response.isCorrect()) {
      itemBuilder.addCorrectAnswer(newChoice.getIdentifier());
    }
    double score=response.getPoints();
    if (singleCorrect) {
      if (score > 0.0f) {
        itemBuilder.setMaxScore(score);
      }
    }
 else {
      itemBuilder.setMapping(newChoice.getIdentifier(),score);
    }
  }
  if (singleCorrect) {
    itemBuilder.setScoreEvaluationMode(ScoreEvaluation.allCorrectAnswers);
  }
 else {
    itemBuilder.setScoreEvaluationMode(ScoreEvaluation.perAnswer);
  }
  return itemBuilder;
}"
69391,"@Test public void convert() throws URISyntaxException, IOException, XmlResourceNotFoundException, ImsManifestException {
  QTIDocument doc=loadDocument(""String_Node_Str"");
  File exportDir=new File(WebappHelper.getTmpDir(),""String_Node_Str"" + UUID.randomUUID());
  exportDir.mkdirs();
  QTI12To21Converter converter=new QTI12To21Converter(exportDir,Locale.ENGLISH);
  converter.convert(doc);
  int validAssessmentItems=0;
  boolean validAssessmentTest=false;
  QtiContentPackageSummary readableManifest=null;
  File[] generatedFiles=exportDir.listFiles();
  for (  File generatedFile : generatedFiles) {
    String filename=generatedFile.getName();
    if (filename.equals(""String_Node_Str"")) {
      readableManifest=new QtiContentPackageExtractor(exportDir).parse();
    }
 else     if (filename.startsWith(""String_Node_Str"")) {
      validAssessmentTest=validateAssessmentTest(generatedFile);
    }
 else     if (filename.endsWith(""String_Node_Str"")) {
      boolean validItem=validateAssessmentItem(generatedFile);
      if (validItem) {
        validAssessmentItems++;
      }
    }
  }
  FileUtils.deleteDirsAndFiles(exportDir.toPath());
  Assert.assertTrue(validAssessmentTest);
  Assert.assertEquals(4,validAssessmentItems);
  Assert.assertEquals(1,readableManifest.getTestResources().size());
  Assert.assertEquals(4,readableManifest.getItemResources().size());
}","@Test public void convert() throws URISyntaxException, IOException, XmlResourceNotFoundException, ImsManifestException {
  QTIDocument doc=loadDocument(""String_Node_Str"");
  File exportDir=new File(WebappHelper.getTmpDir(),""String_Node_Str"" + UUID.randomUUID());
  exportDir.mkdirs();
  QTI12To21Converter converter=new QTI12To21Converter(exportDir,Locale.ENGLISH);
  converter.convert(null,doc);
  int validAssessmentItems=0;
  boolean validAssessmentTest=false;
  QtiContentPackageSummary readableManifest=null;
  File[] generatedFiles=exportDir.listFiles();
  for (  File generatedFile : generatedFiles) {
    String filename=generatedFile.getName();
    if (filename.equals(""String_Node_Str"")) {
      readableManifest=new QtiContentPackageExtractor(exportDir).parse();
    }
 else     if (filename.startsWith(""String_Node_Str"")) {
      validAssessmentTest=validateAssessmentTest(generatedFile);
    }
 else     if (filename.endsWith(""String_Node_Str"")) {
      boolean validItem=validateAssessmentItem(generatedFile);
      if (validItem) {
        validAssessmentItems++;
      }
    }
  }
  FileUtils.deleteDirsAndFiles(exportDir.toPath());
  Assert.assertTrue(validAssessmentTest);
  Assert.assertEquals(4,validAssessmentItems);
  Assert.assertEquals(1,readableManifest.getTestResources().size());
  Assert.assertEquals(4,readableManifest.getItemResources().size());
}"
69392,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes){
  if (video)   return;
  if (""String_Node_Str"".equals(localName)) {
    localName=qName=""String_Node_Str"";
    attributes=new AttributesDelegate(attributes);
  }
 else   if (""String_Node_Str"".equals(localName)) {
    String cssClass=attributes.getValue(""String_Node_Str"");
    if (cssClass != null && ""String_Node_Str"".equals(cssClass)) {
      video=true;
      return;
    }
  }
  super.startElement(uri,localName,qName,attributes);
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes){
  if (video)   return;
  if (""String_Node_Str"".equals(localName)) {
    localName=qName=""String_Node_Str"";
    AttributesImpl attributesCleaned=new AttributesImpl(""String_Node_Str"");
    for (int i=0; i < attributes.getLength(); i++) {
      String name=attributes.getLocalName(i);
      if (!""String_Node_Str"".equalsIgnoreCase(name)) {
        String value=attributes.getValue(i);
        attributesCleaned.addAttribute(name,value);
      }
    }
    attributes=new AttributesDelegate(attributesCleaned);
  }
 else   if (""String_Node_Str"".equals(localName)) {
    String cssClass=attributes.getValue(""String_Node_Str"");
    if (cssClass != null && ""String_Node_Str"".equals(cssClass)) {
      video=true;
      return;
    }
  }
  super.startElement(uri,localName,qName,attributes);
}"
69393,"protected void ensureFeedbackBasicOutcomeDeclaration(){
  OutcomeDeclaration feedbackBasicDeclaration=assessmentItem.getOutcomeDeclaration(QTI21Constants.FEEDBACKBASIC_IDENTIFIER);
  if (feedbackBasicDeclaration == null) {
    feedbackBasicDeclaration=AssessmentItemFactory.createOutcomeDeclarationForFeedbackBasic(assessmentItem);
    assessmentItem.getOutcomeDeclarations().add(feedbackBasicDeclaration);
  }
}","protected void ensureFeedbackBasicOutcomeDeclaration(){
  AssessmentItemFactory.ensureFeedbackBasicOutcomeDeclaration(assessmentItem);
}"
69394,"private static AssessmentItem createAssessmentItem(){
  AssessmentItem assessmentItem=AssessmentItemFactory.createAssessmentItem(QTI21QuestionType.kprim,""String_Node_Str"");
  NodeGroupList nodeGroups=assessmentItem.getNodeGroups();
  double maxScore=1.0d;
  Identifier responseDeclarationId=Identifier.assumedLegal(""String_Node_Str"");
  ResponseDeclaration responseDeclaration=createKPrimResponseDeclaration(assessmentItem,responseDeclarationId,new HashMap<>(),maxScore);
  nodeGroups.getResponseDeclarationGroup().getResponseDeclarations().add(responseDeclaration);
  appendDefaultOutcomeDeclarations(assessmentItem,maxScore);
  ItemBody itemBody=appendDefaultItemBody(assessmentItem);
  appendMatchInteractionForKPrim(itemBody,responseDeclarationId);
  ResponseProcessing responseProcessing=createResponseProcessing(assessmentItem,responseDeclarationId);
  assessmentItem.getNodeGroups().getResponseProcessingGroup().setResponseProcessing(responseProcessing);
  return assessmentItem;
}","private static AssessmentItem createAssessmentItem(){
  AssessmentItem assessmentItem=AssessmentItemFactory.createAssessmentItem(QTI21QuestionType.kprim,""String_Node_Str"");
  NodeGroupList nodeGroups=assessmentItem.getNodeGroups();
  double maxScore=1.0d;
  Identifier responseDeclarationId=Identifier.assumedLegal(""String_Node_Str"");
  ResponseDeclaration responseDeclaration=createKPrimResponseDeclaration(assessmentItem,responseDeclarationId,new HashMap<>(),maxScore);
  nodeGroups.getResponseDeclarationGroup().getResponseDeclarations().add(responseDeclaration);
  appendDefaultOutcomeDeclarations(assessmentItem,maxScore);
  ItemBody itemBody=appendDefaultItemBody(assessmentItem);
  MatchInteraction matchInteraction=appendMatchInteractionForKPrim(itemBody,responseDeclarationId);
  SimpleMatchSet matchSet=matchInteraction.getSimpleMatchSets().get(0);
  Map<Identifier,Identifier> associations=new HashMap<>();
  for (  SimpleAssociableChoice choice : matchSet.getSimpleAssociableChoices()) {
    associations.put(choice.getIdentifier(),QTI21Constants.WRONG_IDENTIFIER);
  }
  appendAssociationKPrimResponseDeclaration(responseDeclaration,associations,1.0);
  ResponseProcessing responseProcessing=createResponseProcessing(assessmentItem,responseDeclarationId);
  assessmentItem.getNodeGroups().getResponseProcessingGroup().setResponseProcessing(responseProcessing);
  return assessmentItem;
}"
69395,"@Test public void filter(){
  String content=""String_Node_Str"";
  AssessmentItem item=new AssessmentItem();
  ItemBody helper=new ItemBody(item);
  new AssessmentHtmlBuilder().appendHtml(helper,content);
  List<Block> paragraphs=helper.getBlocks();
  Assert.assertNotNull(paragraphs);
  Assert.assertEquals(2,paragraphs.size());
  StringOutput sb=new StringOutput();
  QtiSerializer qtiSerializer=new QtiSerializer(new JqtiExtensionManager());
  qtiSerializer.serializeJqtiObject(helper,new StreamResult(sb));
  log.info(sb.toString());
}","@Test public void filter(){
  String content=""String_Node_Str"";
  AssessmentItem item=new AssessmentItem();
  ItemBody helper=new ItemBody(item);
  new AssessmentHtmlBuilder().appendHtml(helper,content);
  List<Block> paragraphs=helper.getBlocks();
  Assert.assertNotNull(paragraphs);
  Assert.assertEquals(2,paragraphs.size());
  StringOutput sb=new StringOutput();
  QtiSerializer qtiSerializer=new QtiSerializer(new JqtiExtensionManager());
  qtiSerializer.serializeJqtiObject(helper,new StreamResult(sb));
  String serializedQti=sb.toString();
  Assert.assertTrue(serializedQti.contains(""String_Node_Str""));
}"
69396,"@Test public void serializeVideo(){
  String content=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  AssessmentItem item=new AssessmentItem();
  ItemBody helper=new ItemBody(item);
  new AssessmentHtmlBuilder().appendHtml(helper,content);
  List<Block> paragraphs=helper.getBlocks();
  Assert.assertNotNull(paragraphs);
  Assert.assertEquals(1,paragraphs.size());
  StringOutput sb=new StringOutput();
  QtiSerializer qtiSerializer=new QtiSerializer(new JqtiExtensionManager());
  qtiSerializer.serializeJqtiObject(helper,new StreamResult(sb));
  System.out.println(""String_Node_Str"");
  System.out.println(sb.toString());
}","@Test public void serializeVideo(){
  String content=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  AssessmentItem item=new AssessmentItem();
  ItemBody helper=new ItemBody(item);
  new AssessmentHtmlBuilder().appendHtml(helper,content);
  List<Block> paragraphs=helper.getBlocks();
  Assert.assertNotNull(paragraphs);
  Assert.assertEquals(1,paragraphs.size());
  StringOutput sb=new StringOutput();
  QtiSerializer qtiSerializer=new QtiSerializer(new JqtiExtensionManager());
  qtiSerializer.serializeJqtiObject(helper,new StreamResult(sb));
  String serializedQti=sb.toString();
  Assert.assertNotNull(serializedQti);
  Assert.assertTrue(serializedQti.contains(""String_Node_Str""));
  Assert.assertFalse(serializedQti.contains(""String_Node_Str""));
  Assert.assertFalse(serializedQti.contains(""String_Node_Str""));
}"
69397,"@Test public void serializer(){
  AssessmentItem item=new AssessmentItem();
  SimpleChoice helper=new SimpleChoice(item);
  P p=new P(helper);
  TextRun text=new TextRun(p,""String_Node_Str"");
  p.getInlines().add(text);
  helper.getFlowStatics().add(p);
  String content=new AssessmentHtmlBuilder().flowStaticString(helper.getFlowStatics());
  System.out.println(content);
}","@Test public void serializer(){
  AssessmentItem item=new AssessmentItem();
  SimpleChoice helper=new SimpleChoice(item);
  P p=new P(helper);
  TextRun text=new TextRun(p,""String_Node_Str"");
  p.getInlines().add(text);
  helper.getFlowStatics().add(p);
  String content=new AssessmentHtmlBuilder().flowStaticString(helper.getFlowStatics());
  Assert.assertTrue(content.contains(""String_Node_Str""));
}"
69398,"@Test public void findFeedbacks() throws URISyntaxException {
  URL itemUrl=AssessmentItemPackageTest.class.getResource(""String_Node_Str"");
  AssessmentItem assessmentItem=loadAssessmentItem(itemUrl);
  SingleChoiceAssessmentItemBuilder itemBuilder=new SingleChoiceAssessmentItemBuilder(assessmentItem,qtiSerializer);
  ModalFeedbackBuilder correctFeedback=itemBuilder.getCorrectFeedback();
  Assert.assertNotNull(correctFeedback);
  Assert.assertTrue(correctFeedback.isCorrectRule());
  ModalFeedbackBuilder incorrectFeedback=itemBuilder.getIncorrectFeedback();
  Assert.assertNotNull(incorrectFeedback);
  Assert.assertTrue(incorrectFeedback.isIncorrectRule());
}","@Test public void findFeedbacks() throws URISyntaxException {
  URL itemUrl=AssessmentItemBuilderTest.class.getResource(""String_Node_Str"");
  AssessmentItem assessmentItem=loadAssessmentItem(itemUrl);
  SingleChoiceAssessmentItemBuilder itemBuilder=new SingleChoiceAssessmentItemBuilder(assessmentItem,qtiSerializer);
  ModalFeedbackBuilder correctFeedback=itemBuilder.getCorrectFeedback();
  Assert.assertNotNull(correctFeedback);
  Assert.assertTrue(correctFeedback.isCorrectRule());
  ModalFeedbackBuilder incorrectFeedback=itemBuilder.getIncorrectFeedback();
  Assert.assertNotNull(incorrectFeedback);
  Assert.assertTrue(incorrectFeedback.isIncorrectRule());
}"
69399,"protected Component getFormItemComponent(){
  return component;
}","@Override protected Component getFormItemComponent(){
  return component;
}"
69400,"/** 
 * @see org.olat.core.gui.components.form.flexible.FormItemImpl#evalFormRequest(org.olat.core.gui.UserRequest)
 */
@Override public void evalFormRequest(UserRequest ureq){
  String paramId=String.valueOf(component.getFormDispatchId());
  String value=getRootForm().getRequestParameter(paramId);
  if (value != null) {
    setValue(value);
    component.setDirty(true);
  }
}","/** 
 * @see org.olat.core.gui.components.form.flexible.FormItemImpl#evalFormRequest(org.olat.core.gui.UserRequest)
 */
@Override public void evalFormRequest(UserRequest ureq){
  String paramId=String.valueOf(component.getFormDispatchId());
  String val=getRootForm().getRequestParameter(paramId);
  if (val != null) {
    setValue(val);
    component.setDirty(true);
  }
}"
69401,"protected void appendConfigToTinyJSArray_4(StringOutput out,Translator translator){
  Map<String,String> copyValues=new HashMap<String,String>(quotedConfigValues);
  Map<String,String> copyNonValues=new HashMap<String,String>(nonQuotedConfigValues);
  String converter=copyNonValues.get(URLCONVERTER_CALLBACK);
  if (converter != null) {
    copyNonValues.put(CONVERT_URLS,""String_Node_Str"");
  }
  String contentCss=copyValues.remove(CONTENT_CSS);
  if (contentCss != null) {
    copyNonValues.put(IMPORTCSS_APPEND,""String_Node_Str"");
    copyValues.put(""String_Node_Str"",contentCss);
    copyNonValues.put(IMPORT_SELECTOR_CONVERTER,IMPORT_SELECTOR_CONVERTER_VALUE_REMOVE_EMOTICONS);
    copyNonValues.put(IMPORTCSS_GROUPS,IMPORTCSS_GROUPS_VALUE_MENU);
    String selectorFilter=Settings.getHtmlEditorContentCssClassPrefixes();
    if (selectorFilter != null) {
      if (selectorFilter.startsWith(""String_Node_Str"") && selectorFilter.endsWith(""String_Node_Str"")) {
        copyNonValues.put(IMPORTCSS_SELECTOR_FILTER,selectorFilter);
      }
 else {
        copyValues.put(IMPORTCSS_SELECTOR_FILTER,selectorFilter);
      }
    }
  }
  StringOutput tinyMenuSb=new StringOutput();
  tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getPlugins()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(isRelativeUrls()).append(""String_Node_Str"").append(""String_Node_Str"").append(isRemoveScriptHost()).append(""String_Node_Str"").append(""String_Node_Str"").append(isInline()).append(""String_Node_Str"").append(""String_Node_Str"").append(isStatusBar()).append(""String_Node_Str"").append(""String_Node_Str"").append(tinyConfig.hasMenu()).append(""String_Node_Str"");
  String leftAndClear=""String_Node_Str"";
  String rightAndClear=""String_Node_Str"";
  if (translator != null) {
    translator=Util.createPackageTranslator(RichTextConfiguration.class,translator.getLocale(),translator);
    leftAndClear=translator.translate(""String_Node_Str"");
    rightAndClear=translator.translate(""String_Node_Str"");
  }
  tinyMenuSb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(leftAndClear).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(rightAndClear).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  tinyMenuSb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  tinyMenuSb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (tinyConfig.getTool1() != null) {
    tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getTool1()).append(""String_Node_Str"");
  }
 else {
    tinyMenuSb.append(""String_Node_Str"");
  }
  if (tinyConfig.hasMenu()) {
    tinyMenuSb.append(""String_Node_Str"");
    boolean first=true;
    for (    String menuItem : tinyConfig.getMenu()) {
      if (!first)       tinyMenuSb.append(""String_Node_Str"");
      if (first)       first=false;
      tinyMenuSb.append(menuItem);
    }
    tinyMenuSb.append(""String_Node_Str"");
  }
 else {
    tinyMenuSb.append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyValues.entrySet()) {
    tinyMenuSb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyNonValues.entrySet()) {
    tinyMenuSb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  out.append(tinyMenuSb);
}","protected void appendConfigToTinyJSArray_4(StringOutput out,Translator translator){
  Map<String,String> copyValues=new HashMap<String,String>(quotedConfigValues);
  Map<String,String> copyNonValues=new HashMap<String,String>(nonQuotedConfigValues);
  String converter=copyNonValues.get(URLCONVERTER_CALLBACK);
  if (converter != null) {
    copyNonValues.put(CONVERT_URLS,""String_Node_Str"");
  }
  String contentCss=copyValues.remove(CONTENT_CSS);
  if (contentCss != null) {
    copyNonValues.put(IMPORTCSS_APPEND,""String_Node_Str"");
    copyValues.put(""String_Node_Str"",contentCss);
    copyNonValues.put(IMPORT_SELECTOR_CONVERTER,IMPORT_SELECTOR_CONVERTER_VALUE_REMOVE_EMOTICONS);
    copyNonValues.put(IMPORTCSS_GROUPS,IMPORTCSS_GROUPS_VALUE_MENU);
    String selectorFilter=Settings.getHtmlEditorContentCssClassPrefixes();
    if (selectorFilter != null) {
      if (selectorFilter.startsWith(""String_Node_Str"") && selectorFilter.endsWith(""String_Node_Str"")) {
        copyNonValues.put(IMPORTCSS_SELECTOR_FILTER,selectorFilter);
      }
 else {
        copyValues.put(IMPORTCSS_SELECTOR_FILTER,selectorFilter);
      }
    }
  }
  StringOutput tinyMenuSb=new StringOutput();
  tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getPlugins()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(isRelativeUrls()).append(""String_Node_Str"").append(""String_Node_Str"").append(isRemoveScriptHost()).append(""String_Node_Str"").append(""String_Node_Str"").append(isInline()).append(""String_Node_Str"").append(""String_Node_Str"").append(isStatusBar()).append(""String_Node_Str"").append(""String_Node_Str"").append(tinyConfig.hasMenu()).append(""String_Node_Str"");
  String leftAndClear=""String_Node_Str"";
  String rightAndClear=""String_Node_Str"";
  if (translator != null) {
    translator=Util.createPackageTranslator(RichTextConfiguration.class,translator.getLocale(),translator);
    leftAndClear=translator.translate(""String_Node_Str"");
    rightAndClear=translator.translate(""String_Node_Str"");
  }
  tinyMenuSb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(leftAndClear).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(rightAndClear).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  tinyMenuSb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  tinyMenuSb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (tinyConfig.getTool1() != null) {
    tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getTool1()).append(""String_Node_Str"");
  }
 else {
    tinyMenuSb.append(""String_Node_Str"");
  }
  if (tinyConfig.hasMenu()) {
    tinyMenuSb.append(""String_Node_Str"");
    boolean first=true;
    for (    String menuItem : tinyConfig.getMenu()) {
      if (!first)       tinyMenuSb.append(""String_Node_Str"");
      if (first)       first=false;
      tinyMenuSb.append(menuItem);
    }
    tinyMenuSb.append(""String_Node_Str"");
  }
 else {
    tinyMenuSb.append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyValues.entrySet()) {
    tinyMenuSb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyNonValues.entrySet()) {
    tinyMenuSb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  out.append(tinyMenuSb);
}"
69402,"/** 
 * Load the assessmentTest based on the imsmanifest.xml found in the resource directory.
 * @param resourceDirectory
 * @return
 */
public ResolvedAssessmentTest loadAndResolveAssessmentTest(File resourceDirectory,boolean debugInfo);","/** 
 * Load the assessmentTest based on the imsmanifest.xml found in the resource directory.
 * @param resourceDirectory
 * @return
 */
public ResolvedAssessmentTest loadAndResolveAssessmentTest(File resourceDirectory,boolean replace,boolean debugInfo);"
69403,"@Override public void run(){
  long start=System.nanoTime();
  FileResourceManager frm=FileResourceManager.getInstance();
  List<RepositoryEntry> entries=repositoryEntryDao.getLastUsedRepositoryEntries(ImsQTI21Resource.TYPE_NAME,0,20);
  for (  RepositoryEntry entry : entries) {
    try {
      File fUnzippedDirRoot=frm.unzipFileResource(entry.getOlatResource());
      qtiService.loadAndResolveAssessmentTest(fUnzippedDirRoot,false);
    }
 catch (    RuntimeException e) {
      log.error(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getDisplayname()+ ""String_Node_Str"",e);
    }
  }
  log.info(entries.size() + ""String_Node_Str"" + CodeHelper.nanoToMilliTime(start));
}","@Override public void run(){
  long start=System.nanoTime();
  FileResourceManager frm=FileResourceManager.getInstance();
  List<RepositoryEntry> entries=repositoryEntryDao.getLastUsedRepositoryEntries(ImsQTI21Resource.TYPE_NAME,0,20);
  for (  RepositoryEntry entry : entries) {
    try {
      File fUnzippedDirRoot=frm.unzipFileResource(entry.getOlatResource());
      qtiService.loadAndResolveAssessmentTest(fUnzippedDirRoot,false,false);
    }
 catch (    RuntimeException e) {
      log.error(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getDisplayname()+ ""String_Node_Str"",e);
    }
  }
  log.info(entries.size() + ""String_Node_Str"" + CodeHelper.nanoToMilliTime(start));
}"
69404,"@Override public ResolvedAssessmentTest loadAndResolveAssessmentTest(File resourceDirectory,boolean debugInfo){
  URI assessmentObjectSystemId=createAssessmentObjectUri(resourceDirectory);
  File resourceFile=new File(assessmentObjectSystemId);
  return assessmentTestsCache.computeIfAbsent(resourceFile,file -> {
    QtiXmlReader qtiXmlReader=new QtiXmlReader(jqtiExtensionManager());
    ResourceLocator fileResourceLocator=new PathResourceLocator(resourceDirectory.toPath());
    ResourceLocator inputResourceLocator=ImsQTI21Resource.createResolvingResourceLocator(fileResourceLocator);
    AssessmentObjectXmlLoader assessmentObjectXmlLoader=new AssessmentObjectXmlLoader(qtiXmlReader,inputResourceLocator);
    ResolvedAssessmentTest resolvedAssessmentTest=assessmentObjectXmlLoader.loadAndResolveAssessmentTest(assessmentObjectSystemId);
    return resolvedAssessmentTest;
  }
);
}","@Override public ResolvedAssessmentTest loadAndResolveAssessmentTest(File resourceDirectory,boolean replace,boolean debugInfo){
  URI assessmentObjectSystemId=createAssessmentObjectUri(resourceDirectory);
  File resourceFile=new File(assessmentObjectSystemId);
  if (replace) {
    ResolvedAssessmentTest resolvedAssessmentTest=internalLoadAndResolveAssessmentTest(resourceDirectory,assessmentObjectSystemId);
    assessmentTestsCache.replace(resourceFile,resolvedAssessmentTest);
    return resolvedAssessmentTest;
  }
  return assessmentTestsCache.computeIfAbsent(resourceFile,file -> {
    return internalLoadAndResolveAssessmentTest(resourceDirectory,assessmentObjectSystemId);
  }
);
}"
69405,"@Override public boolean needManualCorrection(RepositoryEntry testEntry){
  FileResourceManager frm=FileResourceManager.getInstance();
  File fUnzippedDirRoot=frm.unzipFileResource(testEntry.getOlatResource());
  ResolvedAssessmentTest resolvedAssessmentTest=loadAndResolveAssessmentTest(fUnzippedDirRoot,false);
  return AssessmentTestHelper.needManualCorrection(resolvedAssessmentTest);
}","@Override public boolean needManualCorrection(RepositoryEntry testEntry){
  FileResourceManager frm=FileResourceManager.getInstance();
  File fUnzippedDirRoot=frm.unzipFileResource(testEntry.getOlatResource());
  ResolvedAssessmentTest resolvedAssessmentTest=loadAndResolveAssessmentTest(fUnzippedDirRoot,false,false);
  return AssessmentTestHelper.needManualCorrection(resolvedAssessmentTest);
}"
69406,"public MediaResource export(RepositoryEntry courseEntry,String subIdent,RepositoryEntry testEntry){
  FileResourceManager frm=FileResourceManager.getInstance();
  File unzippedDirRoot=frm.unzipFileResource(testEntry.getOlatResource());
  resolvedAssessmentTest=qtiService.loadAndResolveAssessmentTest(unzippedDirRoot,false);
  ICourse course=CourseFactory.loadCourse(courseEntry);
  CourseNode courseNode=course.getRunStructure().getNode(subIdent);
  String label=courseNode.getType() + ""String_Node_Str"" + StringHelper.transformDisplayNameToFileSystemName(courseNode.getShortName())+ ""String_Node_Str""+ Formatter.formatDatetimeFilesystemSave(new Date(System.currentTimeMillis()))+ ""String_Node_Str"";
  if (""String_Node_Str"".equals(courseNode.getType())) {
    anonymizerCallback=course.getCourseEnvironment().getCoursePropertyManager();
  }
  final List<AssessmentResponse> responses=responseDao.getResponse(courseEntry,subIdent,testEntry,participants,allUsers,anonymUsers);
  return new OpenXMLWorkbookResource(label){
    @Override protected void generate(    OutputStream out){
      try (OpenXMLWorkbook workbook=new OpenXMLWorkbook(out,1)){
        OpenXMLWorksheet exportSheet=workbook.nextWorksheet();
        exportSheet.setHeaderRows(2);
        writeHeaders_1(exportSheet,workbook);
        writeHeaders_2(exportSheet,workbook);
        writeData(responses,exportSheet,workbook);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
;
}","public MediaResource export(RepositoryEntry courseEntry,String subIdent,RepositoryEntry testEntry){
  FileResourceManager frm=FileResourceManager.getInstance();
  File unzippedDirRoot=frm.unzipFileResource(testEntry.getOlatResource());
  resolvedAssessmentTest=qtiService.loadAndResolveAssessmentTest(unzippedDirRoot,false,false);
  ICourse course=CourseFactory.loadCourse(courseEntry);
  CourseNode courseNode=course.getRunStructure().getNode(subIdent);
  String label=courseNode.getType() + ""String_Node_Str"" + StringHelper.transformDisplayNameToFileSystemName(courseNode.getShortName())+ ""String_Node_Str""+ Formatter.formatDatetimeFilesystemSave(new Date(System.currentTimeMillis()))+ ""String_Node_Str"";
  if (""String_Node_Str"".equals(courseNode.getType())) {
    anonymizerCallback=course.getCourseEnvironment().getCoursePropertyManager();
  }
  final List<AssessmentResponse> responses=responseDao.getResponse(courseEntry,subIdent,testEntry,participants,allUsers,anonymUsers);
  return new OpenXMLWorkbookResource(label){
    @Override protected void generate(    OutputStream out){
      try (OpenXMLWorkbook workbook=new OpenXMLWorkbook(out,1)){
        OpenXMLWorksheet exportSheet=workbook.nextWorksheet();
        exportSheet.setHeaderRows(2);
        writeHeaders_1(exportSheet,workbook);
        writeHeaders_2(exportSheet,workbook);
        writeData(responses,exportSheet,workbook);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
;
}"
69407,"public AssessmentResultController(UserRequest ureq,WindowControl wControl,Identity assessedIdentity,boolean anonym,AssessmentTestSession candidateSession,ShowResultsOnFinish resultsOnfinish,File fUnzippedDirRoot,String mapperUri){
  super(ureq,wControl,""String_Node_Str"");
  this.anonym=anonym;
  this.mapperUri=mapperUri;
  this.resultsOnfinish=resultsOnfinish;
  ResourceLocator fileResourceLocator=new PathResourceLocator(fUnzippedDirRoot.toPath());
  inputResourceLocator=ImsQTI21Resource.createResolvingResourceLocator(fileResourceLocator);
  assessmentObjectUri=qtiService.createAssessmentObjectUri(fUnzippedDirRoot);
  if (!anonym && assessedIdentity != null) {
    assessedIdentityInfosCtrl=new UserShortDescription(ureq,getWindowControl(),assessedIdentity);
    listenTo(assessedIdentityInfosCtrl);
  }
  resolvedAssessmentTest=qtiService.loadAndResolveAssessmentTest(fUnzippedDirRoot,false);
  testSessionState=qtiService.loadTestSessionState(candidateSession);
  assessmentResult=qtiService.getAssessmentResult(candidateSession);
  candidateSessionContext=new TerminatedStaticCandidateSessionContext(candidateSession);
  initForm(ureq);
}","public AssessmentResultController(UserRequest ureq,WindowControl wControl,Identity assessedIdentity,boolean anonym,AssessmentTestSession candidateSession,ShowResultsOnFinish resultsOnfinish,File fUnzippedDirRoot,String mapperUri){
  super(ureq,wControl,""String_Node_Str"");
  this.anonym=anonym;
  this.mapperUri=mapperUri;
  this.resultsOnfinish=resultsOnfinish;
  ResourceLocator fileResourceLocator=new PathResourceLocator(fUnzippedDirRoot.toPath());
  inputResourceLocator=ImsQTI21Resource.createResolvingResourceLocator(fileResourceLocator);
  assessmentObjectUri=qtiService.createAssessmentObjectUri(fUnzippedDirRoot);
  if (!anonym && assessedIdentity != null) {
    assessedIdentityInfosCtrl=new UserShortDescription(ureq,getWindowControl(),assessedIdentity);
    listenTo(assessedIdentityInfosCtrl);
  }
  resolvedAssessmentTest=qtiService.loadAndResolveAssessmentTest(fUnzippedDirRoot,false,false);
  testSessionState=qtiService.loadTestSessionState(candidateSession);
  assessmentResult=qtiService.getAssessmentResult(candidateSession);
  candidateSessionContext=new TerminatedStaticCandidateSessionContext(candidateSession);
  initForm(ureq);
}"
69408,"/** 
 * @param ureq
 * @param wControl
 * @param listener If the listener is null, the controller will use the default listener which save the score and pass in assessment entry
 * @param testEntry
 * @param entry
 * @param subIdent
 * @param deliveryOptions
 * @param showCloseResults set to false prevent the close results button to appears (this booleandon't change the settings to show or not the results at the end of the test)
 * @param authorMode if true, the database objects are not counted and can be deleted without warning
 */
public AssessmentTestDisplayController(UserRequest ureq,WindowControl wControl,OutcomesListener listener,RepositoryEntry testEntry,RepositoryEntry entry,String subIdent,QTI21DeliveryOptions deliveryOptions,boolean showCloseResults,boolean authorMode,boolean anonym){
  super(ureq,wControl);
  this.entry=entry;
  this.subIdent=subIdent;
  this.testEntry=testEntry;
  this.outcomesListener=listener;
  this.deliveryOptions=deliveryOptions;
  this.showCloseResults=showCloseResults;
  UserSession usess=ureq.getUserSession();
  if (usess.getRoles().isGuestOnly() || anonym) {
    this.anonym=anonym;
    assessedIdentity=null;
    anonymousIdentifier=getAnonymousIdentifier(usess);
  }
 else {
    this.anonym=anonym;
    assessedIdentity=getIdentity();
    anonymousIdentifier=null;
  }
  FileResourceManager frm=FileResourceManager.getInstance();
  fUnzippedDirRoot=frm.unzipFileResource(testEntry.getOlatResource());
  resolvedAssessmentTest=qtiService.loadAndResolveAssessmentTest(fUnzippedDirRoot,false);
  URI assessmentObjectUri=qtiService.createAssessmentObjectUri(fUnzippedDirRoot);
  mapperUri=registerCacheableMapper(null,""String_Node_Str"" + testEntry.getKey(),new ResourcesMapper(assessmentObjectUri));
  currentRequestTimestamp=ureq.getRequestTimestamp();
  initMarks();
  initOrResumeAssessmentTestSession(ureq,authorMode);
  if (testSessionController.getTestSessionState() != null && testSessionController.getTestSessionState().isEnded()) {
    AssessmentResult assessmentResult=null;
    qtiService.finishTestSession(candidateSession,testSessionController.getTestSessionState(),assessmentResult,ureq.getRequestTimestamp());
    mainVC=createVelocityContainer(""String_Node_Str"");
  }
 else {
    mainVC=createVelocityContainer(""String_Node_Str"");
    initQtiWorks(ureq);
  }
  mainPanel=putInitialPanel(mainVC);
  OLATResourceable sessionOres=OresHelper.createOLATResourceableInstance(AssessmentTestSession.class,candidateSession.getKey());
  CoordinatorManager.getInstance().getCoordinator().getEventBus().registerFor(this,getIdentity(),sessionOres);
}","/** 
 * @param ureq
 * @param wControl
 * @param listener If the listener is null, the controller will use the default listener which save the score and pass in assessment entry
 * @param testEntry
 * @param entry
 * @param subIdent
 * @param deliveryOptions
 * @param showCloseResults set to false prevent the close results button to appears (this booleandon't change the settings to show or not the results at the end of the test)
 * @param authorMode if true, the database objects are not counted and can be deleted without warning
 */
public AssessmentTestDisplayController(UserRequest ureq,WindowControl wControl,OutcomesListener listener,RepositoryEntry testEntry,RepositoryEntry entry,String subIdent,QTI21DeliveryOptions deliveryOptions,boolean showCloseResults,boolean authorMode,boolean anonym){
  super(ureq,wControl);
  this.entry=entry;
  this.subIdent=subIdent;
  this.testEntry=testEntry;
  this.outcomesListener=listener;
  this.deliveryOptions=deliveryOptions;
  this.showCloseResults=showCloseResults;
  UserSession usess=ureq.getUserSession();
  if (usess.getRoles().isGuestOnly() || anonym) {
    this.anonym=anonym;
    assessedIdentity=null;
    anonymousIdentifier=getAnonymousIdentifier(usess);
  }
 else {
    this.anonym=anonym;
    assessedIdentity=getIdentity();
    anonymousIdentifier=null;
  }
  FileResourceManager frm=FileResourceManager.getInstance();
  fUnzippedDirRoot=frm.unzipFileResource(testEntry.getOlatResource());
  resolvedAssessmentTest=qtiService.loadAndResolveAssessmentTest(fUnzippedDirRoot,false,false);
  URI assessmentObjectUri=qtiService.createAssessmentObjectUri(fUnzippedDirRoot);
  mapperUri=registerCacheableMapper(null,""String_Node_Str"" + testEntry.getKey(),new ResourcesMapper(assessmentObjectUri));
  currentRequestTimestamp=ureq.getRequestTimestamp();
  initMarks();
  initOrResumeAssessmentTestSession(ureq,authorMode);
  if (testSessionController.getTestSessionState() != null && testSessionController.getTestSessionState().isEnded()) {
    AssessmentResult assessmentResult=null;
    qtiService.finishTestSession(candidateSession,testSessionController.getTestSessionState(),assessmentResult,ureq.getRequestTimestamp());
    mainVC=createVelocityContainer(""String_Node_Str"");
  }
 else {
    mainVC=createVelocityContainer(""String_Node_Str"");
    initQtiWorks(ureq);
  }
  mainPanel=putInitialPanel(mainVC);
  OLATResourceable sessionOres=OresHelper.createOLATResourceableInstance(AssessmentTestSession.class,candidateSession.getKey());
  CoordinatorManager.getInstance().getCoordinator().getEventBus().registerFor(this,getIdentity(),sessionOres);
}"
69409,"private AssessableResource getAssessableElement(RepositoryEntry testEntry){
  FileResourceManager frm=FileResourceManager.getInstance();
  File fUnzippedDirRoot=frm.unzipFileResource(testEntry.getOlatResource());
  ResolvedAssessmentTest resolvedAssessmentTest=qtiService.loadAndResolveAssessmentTest(fUnzippedDirRoot,false);
  AssessmentTest assessmentTest=resolvedAssessmentTest.getRootNodeLookup().extractIfSuccessful();
  Double maxScore=QtiNodesExtractor.extractMaxScore(assessmentTest);
  Double minScore=QtiNodesExtractor.extractMinScore(assessmentTest);
  boolean hasScore=assessmentTest.getOutcomeDeclaration(QTI21Constants.SCORE_IDENTIFIER) != null;
  boolean hasPassed=assessmentTest.getOutcomeDeclaration(QTI21Constants.PASS_IDENTIFIER) != null;
  return new AssessableResource(hasScore,hasPassed,true,true,minScore,maxScore,null);
}","private AssessableResource getAssessableElement(RepositoryEntry testEntry){
  FileResourceManager frm=FileResourceManager.getInstance();
  File fUnzippedDirRoot=frm.unzipFileResource(testEntry.getOlatResource());
  ResolvedAssessmentTest resolvedAssessmentTest=qtiService.loadAndResolveAssessmentTest(fUnzippedDirRoot,false,false);
  AssessmentTest assessmentTest=resolvedAssessmentTest.getRootNodeLookup().extractIfSuccessful();
  Double maxScore=QtiNodesExtractor.extractMaxScore(assessmentTest);
  Double minScore=QtiNodesExtractor.extractMinScore(assessmentTest);
  boolean hasScore=assessmentTest.getOutcomeDeclaration(QTI21Constants.SCORE_IDENTIFIER) != null;
  boolean hasPassed=assessmentTest.getOutcomeDeclaration(QTI21Constants.PASS_IDENTIFIER) != null;
  return new AssessableResource(hasScore,hasPassed,true,true,minScore,maxScore,null);
}"
69410,"@Override public Media createMedia(AbstractArtefact artefact){
  String title=artefact.getTitle();
  String description=artefact.getDescription();
  String xml=artefact.getFulltextContent();
  String businessPath=artefact.getBusinessPath();
  if (businessPath == null) {
    businessPath=""String_Node_Str"";
  }
  return mediaDao.createMedia(title,description,xml,EFF_MEDIA,businessPath,artefact.getSignature(),artefact.getAuthor());
}","@Override public Media createMedia(AbstractArtefact artefact){
  String title=artefact.getTitle();
  String description=artefact.getDescription();
  String xml=artefact.getFulltextContent();
  String businessPath=artefact.getBusinessPath();
  if (businessPath == null) {
    businessPath=""String_Node_Str"";
  }
  return mediaDao.createMedia(title,description,xml,EFF_MEDIA,businessPath,artefact.getKey().toString(),artefact.getSignature(),artefact.getAuthor());
}"
69411,"private boolean getUsersStatisticsInfos(SearchCoachedIdentityParams params,Map<Long,StudentStatEntry> map,List<UserPropertyHandler> userPropertyHandlers){
  NativeQueryBuilder sb=new NativeQueryBuilder(1024,dbInstance);
  Map<String,Object> queryParams=new HashMap<>();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  writeUserProperties(""String_Node_Str"",sb,userPropertyHandlers);
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(RepositoryEntry.ACC_OWNERS).append(""String_Node_Str"");
  appendUsersStatisticsSearchParams(params,queryParams,sb).append(""String_Node_Str"");
  Query query=dbInstance.getCurrentEntityManager().createNativeQuery(sb.toString());
  for (  Map.Entry<String,Object> entry : queryParams.entrySet()) {
    query.setParameter(entry.getKey(),entry.getValue());
  }
  List<?> rawList=query.getResultList();
  int numOfProperties=userPropertyHandlers.size();
  for (  Object rawObject : rawList) {
    Object[] rawStat=(Object[])rawObject;
    int pos=0;
    Long identityKey=((Number)rawStat[pos++]).longValue();
    String identityName=(String)rawStat[pos++];
    ((Number)rawStat[pos++]).longValue();
    String[] userProperties=new String[numOfProperties];
    for (int i=0; i < numOfProperties; i++) {
      userProperties[i]=(String)rawStat[pos++];
    }
    StudentStatEntry entry=new StudentStatEntry(identityKey,identityName,userProperties);
    entry.setCountRepo(((Number)rawStat[pos++]).intValue());
    entry.setInitialLaunch(((Number)rawStat[pos++]).intValue());
    map.put(identityKey,entry);
  }
  return rawList.size() > 0;
}","private boolean getUsersStatisticsInfos(SearchCoachedIdentityParams params,Map<Long,StudentStatEntry> map,List<UserPropertyHandler> userPropertyHandlers){
  NativeQueryBuilder sb=new NativeQueryBuilder(1024,dbInstance);
  Map<String,Object> queryParams=new HashMap<>();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  writeUserProperties(""String_Node_Str"",sb,userPropertyHandlers);
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(RepositoryEntry.ACC_OWNERS).append(""String_Node_Str"");
  appendUsersStatisticsSearchParams(params,queryParams,sb).append(""String_Node_Str"");
  if (dbInstance.isOracle()) {
    sb.append(""String_Node_Str"");
    writeUserPropertiesGroupBy(""String_Node_Str"",sb,userPropertyHandlers);
  }
  Query query=dbInstance.getCurrentEntityManager().createNativeQuery(sb.toString());
  for (  Map.Entry<String,Object> entry : queryParams.entrySet()) {
    query.setParameter(entry.getKey(),entry.getValue());
  }
  List<?> rawList=query.getResultList();
  int numOfProperties=userPropertyHandlers.size();
  for (  Object rawObject : rawList) {
    Object[] rawStat=(Object[])rawObject;
    int pos=0;
    Long identityKey=((Number)rawStat[pos++]).longValue();
    String identityName=(String)rawStat[pos++];
    ((Number)rawStat[pos++]).longValue();
    String[] userProperties=new String[numOfProperties];
    for (int i=0; i < numOfProperties; i++) {
      userProperties[i]=(String)rawStat[pos++];
    }
    StudentStatEntry entry=new StudentStatEntry(identityKey,identityName,userProperties);
    entry.setCountRepo(((Number)rawStat[pos++]).intValue());
    entry.setInitialLaunch(((Number)rawStat[pos++]).intValue());
    map.put(identityKey,entry);
  }
  return rawList.size() > 0;
}"
69412,"private boolean getStudentsStastisticInfosForOwner(IdentityRef coach,Map<Long,StudentStatEntry> map,List<UserPropertyHandler> userPropertyHandlers){
  NativeQueryBuilder sb=new NativeQueryBuilder(1024,dbInstance);
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  writeUserProperties(""String_Node_Str"",sb,userPropertyHandlers);
  sb.append(""String_Node_Str"").appendToArray(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").appendToArray(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").appendTrue().append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(RepositoryEntry.ACC_OWNERS).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  List<?> rawList=dbInstance.getCurrentEntityManager().createNativeQuery(sb.toString()).setParameter(""String_Node_Str"",coach.getKey()).getResultList();
  int numOfProperties=userPropertyHandlers.size();
  Map<Long,StudentStatEntry> stats=new HashMap<>();
  for (  Object rawObject : rawList) {
    Object[] rawStat=(Object[])rawObject;
    int pos=0;
    Long identityKey=((Number)rawStat[pos++]).longValue();
    String identityName=(String)rawStat[pos++];
    ((Number)rawStat[pos++]).longValue();
    StudentStatEntry entry;
    if (map.containsKey(identityKey)) {
      entry=map.get(identityKey);
      pos+=numOfProperties;
    }
 else {
      String[] userProperties=new String[numOfProperties];
      for (int i=0; i < numOfProperties; i++) {
        userProperties[i]=(String)rawStat[pos++];
      }
      entry=new StudentStatEntry(identityKey,identityName,userProperties);
      map.put(identityKey,entry);
    }
    appendArrayToSet(rawStat[pos++],entry.getRepoIds());
    appendArrayToSet(rawStat[pos++],entry.getLaunchIds());
    stats.put(entry.getIdentityKey(),entry);
  }
  return rawList.size() > 0;
}","private boolean getStudentsStastisticInfosForOwner(IdentityRef coach,Map<Long,StudentStatEntry> map,List<UserPropertyHandler> userPropertyHandlers){
  NativeQueryBuilder sb=new NativeQueryBuilder(1024,dbInstance);
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  writeUserProperties(""String_Node_Str"",sb,userPropertyHandlers);
  sb.append(""String_Node_Str"").appendToArray(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").appendToArray(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").appendTrue().append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(RepositoryEntry.ACC_OWNERS).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (dbInstance.isOracle()) {
    sb.append(""String_Node_Str"");
    writeUserPropertiesGroupBy(""String_Node_Str"",sb,userPropertyHandlers);
  }
  List<?> rawList=dbInstance.getCurrentEntityManager().createNativeQuery(sb.toString()).setParameter(""String_Node_Str"",coach.getKey()).getResultList();
  int numOfProperties=userPropertyHandlers.size();
  Map<Long,StudentStatEntry> stats=new HashMap<>();
  for (  Object rawObject : rawList) {
    Object[] rawStat=(Object[])rawObject;
    int pos=0;
    Long identityKey=((Number)rawStat[pos++]).longValue();
    String identityName=(String)rawStat[pos++];
    ((Number)rawStat[pos++]).longValue();
    StudentStatEntry entry;
    if (map.containsKey(identityKey)) {
      entry=map.get(identityKey);
      pos+=numOfProperties;
    }
 else {
      String[] userProperties=new String[numOfProperties];
      for (int i=0; i < numOfProperties; i++) {
        userProperties[i]=(String)rawStat[pos++];
      }
      entry=new StudentStatEntry(identityKey,identityName,userProperties);
      map.put(identityKey,entry);
    }
    appendArrayToSet(rawStat[pos++],entry.getRepoIds());
    appendArrayToSet(rawStat[pos++],entry.getLaunchIds());
    stats.put(entry.getIdentityKey(),entry);
  }
  return rawList.size() > 0;
}"
69413,"private boolean getStudentsStastisticInfosForCoach(IdentityRef coach,Map<Long,StudentStatEntry> map,List<UserPropertyHandler> userPropertyHandlers){
  NativeQueryBuilder sb=new NativeQueryBuilder(1024,dbInstance);
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  writeUserProperties(""String_Node_Str"",sb,userPropertyHandlers);
  sb.append(""String_Node_Str"").appendToArray(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").appendToArray(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(RepositoryEntry.ACC_USERS).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(RepositoryEntry.ACC_OWNERS).append(""String_Node_Str"").appendTrue().append(""String_Node_Str"").append(""String_Node_Str"");
  List<?> rawList=dbInstance.getCurrentEntityManager().createNativeQuery(sb.toString()).setParameter(""String_Node_Str"",coach.getKey()).getResultList();
  int numOfProperties=userPropertyHandlers.size();
  for (  Object rawObject : rawList) {
    Object[] rawStat=(Object[])rawObject;
    int pos=0;
    Long identityKey=((Number)rawStat[pos++]).longValue();
    String identityName=(String)rawStat[pos++];
    ((Number)rawStat[pos++]).longValue();
    String[] userProperties=new String[numOfProperties];
    for (int i=0; i < numOfProperties; i++) {
      userProperties[i]=(String)rawStat[pos++];
    }
    StudentStatEntry entry=new StudentStatEntry(identityKey,identityName,userProperties);
    appendArrayToSet(rawStat[pos++],entry.getRepoIds());
    appendArrayToSet(rawStat[pos++],entry.getLaunchIds());
    map.put(entry.getIdentityKey(),entry);
  }
  return rawList.size() > 0;
}","private boolean getStudentsStastisticInfosForCoach(IdentityRef coach,Map<Long,StudentStatEntry> map,List<UserPropertyHandler> userPropertyHandlers){
  NativeQueryBuilder sb=new NativeQueryBuilder(1024,dbInstance);
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  writeUserProperties(""String_Node_Str"",sb,userPropertyHandlers);
  sb.append(""String_Node_Str"").appendToArray(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").appendToArray(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(RepositoryEntry.ACC_USERS).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(RepositoryEntry.ACC_OWNERS).append(""String_Node_Str"").appendTrue().append(""String_Node_Str"").append(""String_Node_Str"");
  if (dbInstance.isOracle()) {
    sb.append(""String_Node_Str"");
    writeUserPropertiesGroupBy(""String_Node_Str"",sb,userPropertyHandlers);
  }
  List<?> rawList=dbInstance.getCurrentEntityManager().createNativeQuery(sb.toString()).setParameter(""String_Node_Str"",coach.getKey()).getResultList();
  int numOfProperties=userPropertyHandlers.size();
  for (  Object rawObject : rawList) {
    Object[] rawStat=(Object[])rawObject;
    int pos=0;
    Long identityKey=((Number)rawStat[pos++]).longValue();
    String identityName=(String)rawStat[pos++];
    ((Number)rawStat[pos++]).longValue();
    String[] userProperties=new String[numOfProperties];
    for (int i=0; i < numOfProperties; i++) {
      userProperties[i]=(String)rawStat[pos++];
    }
    StudentStatEntry entry=new StudentStatEntry(identityKey,identityName,userProperties);
    appendArrayToSet(rawStat[pos++],entry.getRepoIds());
    appendArrayToSet(rawStat[pos++],entry.getLaunchIds());
    map.put(entry.getIdentityKey(),entry);
  }
  return rawList.size() > 0;
}"
69414,"@Override public Media createMedia(AbstractArtefact artefact){
  VFSContainer artefactFolder=oldPortfolioManager.getArtefactContainer(artefact);
  String businessPath=artefact.getBusinessPath();
  if (businessPath == null) {
    businessPath=""String_Node_Str"";
  }
  Media media=mediaDao.createMedia(artefact.getTitle(),artefact.getDescription(),null,FORUM_HANDLER,businessPath,artefact.getSignature(),artefact.getAuthor());
  List<VFSItem> items=artefactFolder.getItems(new SystemItemFilter());
  if (items.size() > 0) {
    File mediaDir=fileStorage.generateMediaSubDirectory(media);
    String storagePath=fileStorage.getRelativePath(mediaDir);
    mediaDao.updateStoragePath(media,storagePath,null);
    VFSContainer mediaContainer=fileStorage.getMediaContainer(media);
    VFSManager.copyContent(artefactFolder,mediaContainer);
  }
  return media;
}","@Override public Media createMedia(AbstractArtefact artefact){
  VFSContainer artefactFolder=oldPortfolioManager.getArtefactContainer(artefact);
  String businessPath=artefact.getBusinessPath();
  if (businessPath == null) {
    businessPath=""String_Node_Str"";
  }
  Media media=mediaDao.createMedia(artefact.getTitle(),artefact.getDescription(),null,FORUM_HANDLER,businessPath,artefact.getKey().toString(),artefact.getSignature(),artefact.getAuthor());
  List<VFSItem> items=artefactFolder.getItems(new SystemItemFilter());
  if (items.size() > 0) {
    File mediaDir=fileStorage.generateMediaSubDirectory(media);
    String storagePath=fileStorage.getRelativePath(mediaDir);
    mediaDao.updateStoragePath(media,storagePath,null);
    VFSContainer mediaContainer=fileStorage.getMediaContainer(media);
    VFSManager.copyContent(artefactFolder,mediaContainer);
  }
  return media;
}"
69415,"@Override public Media createMedia(AbstractArtefact artefact){
  Media media=null;
  if (artefact instanceof FileArtefact) {
    VFSContainer artefactFolder=oldPortfolioManager.getArtefactContainer(artefact);
    String filename=((FileArtefact)artefact).getFilename();
    String extension=FileUtils.getFileSuffix(filename);
    String type=FILE_TYPE;
    if (""String_Node_Str"".equalsIgnoreCase(extension) || ""String_Node_Str"".equalsIgnoreCase(extension) || ""String_Node_Str"".equalsIgnoreCase(extension)|| ""String_Node_Str"".equalsIgnoreCase(extension)) {
      type=ImageHandler.IMAGE_TYPE;
    }
    String businessPath=artefact.getBusinessPath();
    if (businessPath == null) {
      businessPath=""String_Node_Str"";
    }
    media=mediaDao.createMedia(artefact.getTitle(),artefact.getDescription(),filename,type,businessPath,artefact.getSignature(),artefact.getAuthor());
    File mediaDir=fileStorage.generateMediaSubDirectory(media);
    String storagePath=fileStorage.getRelativePath(mediaDir);
    mediaDao.updateStoragePath(media,storagePath,filename);
    VFSContainer mediaContainer=fileStorage.getMediaContainer(media);
    VFSManager.copyContent(artefactFolder,mediaContainer);
  }
  return media;
}","@Override public Media createMedia(AbstractArtefact artefact){
  Media media=null;
  if (artefact instanceof FileArtefact) {
    VFSContainer artefactFolder=oldPortfolioManager.getArtefactContainer(artefact);
    String filename=((FileArtefact)artefact).getFilename();
    String extension=FileUtils.getFileSuffix(filename);
    String type=FILE_TYPE;
    if (""String_Node_Str"".equalsIgnoreCase(extension) || ""String_Node_Str"".equalsIgnoreCase(extension) || ""String_Node_Str"".equalsIgnoreCase(extension)|| ""String_Node_Str"".equalsIgnoreCase(extension)) {
      type=ImageHandler.IMAGE_TYPE;
    }
    String businessPath=artefact.getBusinessPath();
    if (businessPath == null) {
      businessPath=""String_Node_Str"";
    }
    media=mediaDao.createMedia(artefact.getTitle(),artefact.getDescription(),filename,type,businessPath,artefact.getKey().toString(),artefact.getSignature(),artefact.getAuthor());
    File mediaDir=fileStorage.generateMediaSubDirectory(media);
    String storagePath=fileStorage.getRelativePath(mediaDir);
    mediaDao.updateStoragePath(media,storagePath,filename);
    VFSContainer mediaContainer=fileStorage.getMediaContainer(media);
    VFSManager.copyContent(artefactFolder,mediaContainer);
  }
  return media;
}"
69416,"@Override public Media createMedia(AbstractArtefact artefact){
  String title=artefact.getTitle();
  String description=artefact.getDescription();
  String content=artefact.getFulltextContent();
  if (!StringHelper.containsNonWhitespace(content)) {
    content=oldPortfolioManager.getArtefactFullTextContent(artefact);
  }
  String businessPath=artefact.getBusinessPath();
  if (businessPath == null) {
    businessPath=""String_Node_Str"";
  }
  return mediaDao.createMedia(title,description,content,TEXT_MEDIA,businessPath,artefact.getSignature(),artefact.getAuthor());
}","@Override public Media createMedia(AbstractArtefact artefact){
  String title=artefact.getTitle();
  String description=artefact.getDescription();
  String content=artefact.getFulltextContent();
  if (!StringHelper.containsNonWhitespace(content)) {
    content=oldPortfolioManager.getArtefactFullTextContent(artefact);
  }
  String businessPath=artefact.getBusinessPath();
  if (businessPath == null) {
    businessPath=""String_Node_Str"";
  }
  return mediaDao.createMedia(title,description,content,TEXT_MEDIA,businessPath,artefact.getKey().toString(),artefact.getSignature(),artefact.getAuthor());
}"
69417,"public Media createMedia(String title,String description,String content,String type,String businessPath,int signature,Identity author){
  MediaImpl media=new MediaImpl();
  media.setCreationDate(new Date());
  media.setCollectionDate(media.getCreationDate());
  media.setType(type);
  media.setTitle(title);
  media.setDescription(description);
  media.setContent(content);
  media.setSignature(signature);
  media.setBusinessPath(businessPath);
  media.setAuthor(author);
  dbInstance.getCurrentEntityManager().persist(media);
  return media;
}","/** 
 * @param title
 * @param description
 * @param content
 * @param type
 * @param businessPath
 * @param referenceId Some external id
 * @param signature
 * @param author
 * @return
 */
public Media createMedia(String title,String description,String content,String type,String businessPath,String referenceId,int signature,Identity author){
  MediaImpl media=new MediaImpl();
  media.setCreationDate(new Date());
  media.setCollectionDate(media.getCreationDate());
  media.setType(type);
  media.setReferenceId(referenceId);
  media.setTitle(title);
  media.setDescription(description);
  media.setContent(content);
  media.setSignature(signature);
  media.setBusinessPath(businessPath);
  media.setAuthor(author);
  dbInstance.getCurrentEntityManager().persist(media);
  return media;
}"
69418,"/** 
 * @return
 */
float getActual(){
  return actual;
}","/** 
 * @return
 */
public float getActual(){
  return actual;
}"
69419,"String getInfo(){
  return info;
}","public String getInfo(){
  return info;
}"
69420,"/** 
 * @return
 */
float getMax(){
  return max;
}","/** 
 * @return
 */
public float getMax(){
  return max;
}"
69421,"/** 
 * @return
 */
String getUnitLabel(){
  return unitLabel;
}","/** 
 * @return
 */
public String getUnitLabel(){
  return unitLabel;
}"
69422,"/** 
 * @return
 */
int getWidth(){
  return width;
}","/** 
 * @return
 */
public int getWidth(){
  return width;
}"
69423,"/** 
 * @param i
 */
public void setWidth(int i){
  width=i;
}","/** 
 * @param i
 */
public void setWidth(int width){
  this.width=width;
}"
69424,"boolean getIsNoMax(){
  return isNoMax;
}","public boolean getIsNoMax(){
  return isNoMax;
}"
69425,"public ComponentRenderer getHTMLRendererSingleton(){
  return RENDERER;
}","@Override public ComponentRenderer getHTMLRendererSingleton(){
  return RENDERER;
}"
69426,"/** 
 * @see org.olat.core.gui.components.Component#dispatchRequest(org.olat.core.gui.UserRequest)
 */
protected void doDispatchRequest(UserRequest ureq){
}","/** 
 * @see org.olat.core.gui.components.Component#dispatchRequest(org.olat.core.gui.UserRequest)
 */
@Override protected void doDispatchRequest(UserRequest ureq){
}"
69427,"/** 
 * @see org.olat.core.gui.render.ui.ComponentRenderer#render(org.olat.core.gui.render.Renderer,org.olat.core.gui.render.StringOutput,org.olat.core.gui.components.Component,org.olat.core.gui.render.URLBuilder,org.olat.core.gui.translator.Translator,org.olat.core.gui.render.RenderResult,java.lang.String[])
 */
@Override public void render(Renderer renderer,StringOutput target,Component source,URLBuilder urlBuilder,Translator translator,RenderResult renderResult,String[] args){
  ProgressBar ubar=(ProgressBar)source;
  boolean renderLabels=(args == null) ? true : false;
  float percent=100;
  if (!ubar.getIsNoMax())   percent=100 * ubar.getActual() / ubar.getMax();
  if (percent < 0)   percent=0;
  if (percent > 100)   percent=100;
  target.append(""String_Node_Str"").append(ubar.getWidth()).append(""String_Node_Str"").append(Math.round(percent * ubar.getWidth() / 100)).append(""String_Node_Str"").append(Math.round(percent)).append(""String_Node_Str"");
  if (renderLabels) {
    if (ubar.isPercentagesEnabled()) {
      target.append(Math.round(percent));
      target.append(""String_Node_Str"");
    }
    target.append(Math.round(ubar.getActual()));
    target.append(""String_Node_Str"");
    if (ubar.getIsNoMax())     target.append(""String_Node_Str"");
 else     target.append(Math.round(ubar.getMax()));
    target.append(""String_Node_Str"");
    target.append(ubar.getUnitLabel());
    if (ubar.isPercentagesEnabled()) {
      target.append(""String_Node_Str"");
    }
  }
  String info=ubar.getInfo();
  if (StringHelper.containsNonWhitespace(info)) {
    target.append(info);
  }
  target.append(""String_Node_Str"");
}","/** 
 * @see org.olat.core.gui.render.ui.ComponentRenderer#render(org.olat.core.gui.render.Renderer,org.olat.core.gui.render.StringOutput,org.olat.core.gui.components.Component,org.olat.core.gui.render.URLBuilder,org.olat.core.gui.translator.Translator,org.olat.core.gui.render.RenderResult,java.lang.String[])
 */
@Override public void render(Renderer renderer,StringOutput target,Component source,URLBuilder urlBuilder,Translator translator,RenderResult renderResult,String[] args){
  ProgressBar ubar=(ProgressBar)source;
  boolean renderLabels=(args == null) ? true : false;
  float percent=100;
  if (!ubar.getIsNoMax()) {
    percent=100 * ubar.getActual() / ubar.getMax();
  }
  if (percent < 0) {
    percent=0;
  }
  if (percent > 100) {
    percent=100;
  }
  target.append(""String_Node_Str"").append(ubar.getWidth()).append(""String_Node_Str"",""String_Node_Str"",ubar.isWidthInPercent()).append(""String_Node_Str"").append(Math.round(percent * ubar.getWidth() / 100)).append(""String_Node_Str"").append(Math.round(percent)).append(""String_Node_Str"");
  if (renderLabels) {
    if (ubar.isPercentagesEnabled()) {
      target.append(Math.round(percent));
      target.append(""String_Node_Str"");
    }
    target.append(Math.round(ubar.getActual()));
    target.append(""String_Node_Str"");
    if (ubar.getIsNoMax())     target.append(""String_Node_Str"");
 else     target.append(Math.round(ubar.getMax()));
    target.append(""String_Node_Str"");
    target.append(ubar.getUnitLabel());
    if (ubar.isPercentagesEnabled()) {
      target.append(""String_Node_Str"");
    }
  }
  String info=ubar.getInfo();
  if (StringHelper.containsNonWhitespace(info)) {
    target.append(info);
  }
  target.append(""String_Node_Str"");
}"
69428,"private void render(StringOutput sb,AssessmentNodeData row){
  String type=row.getType();
  String title=row.getShortTitle();
  String altText=row.getLongTitle();
  String cssClass=CourseNodeFactory.getInstance().getCourseNodeConfigurationEvenForDisabledBB(type).getIconCSSClass();
  if (isIndentationEnabled()) {
    appendIndent(sb,row.getRecursionLevel());
  }
  sb.append(""String_Node_Str"").append(cssClass).append(""String_Node_Str"");
  if (altText != null) {
    sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(altText));
  }
  sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(title)).append(""String_Node_Str"");
}","private void render(StringOutput sb,AssessmentNodeData row){
  String type=row.getType();
  String title=row.getShortTitle();
  String altText=row.getLongTitle();
  String cssClass=CourseNodeFactory.getInstance().getCourseNodeConfigurationEvenForDisabledBB(type).getIconCSSClass();
  if (isIndentationEnabled()) {
    appendIndent(sb,row.getRecursionLevel());
  }
  sb.append(""String_Node_Str"").append(cssClass).append(""String_Node_Str"");
  if (altText != null) {
    sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(altText)).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(title)).append(""String_Node_Str"");
}"
69429,"/** 
 * @see org.olat.core.gui.components.table.CustomCellRenderer#render(org.olat.core.gui.render.StringOutput,org.olat.core.gui.render.Renderer,java.lang.Object,java.util.Locale,int,java.lang.String)
 */
public void render(StringOutput sb,Renderer renderer,Object val,Locale locale,int alignment,String action){
  int indent;
  String type;
  String title;
  String altText;
  if (val instanceof Map) {
    Map nodeData=(Map)val;
    Integer indentObj=(Integer)nodeData.get(AssessmentHelper.KEY_INDENT);
    indent=(indentObj == null ? 0 : indentObj.intValue());
    type=(String)nodeData.get(AssessmentHelper.KEY_TYPE);
    title=(String)nodeData.get(AssessmentHelper.KEY_TITLE_SHORT);
    altText=(String)nodeData.get(AssessmentHelper.KEY_TITLE_LONG);
  }
 else   if (val instanceof NodeTableRow) {
    NodeTableRow row=(NodeTableRow)val;
    indent=row.getIndent();
    type=row.getType();
    title=row.getShortTitle();
    altText=row.getLongTitle();
  }
 else {
    return;
  }
  String cssClass=CourseNodeFactory.getInstance().getCourseNodeConfigurationEvenForDisabledBB(type).getIconCSSClass();
  if (isIndentationEnabled()) {
    appendIndent(sb,indent);
  }
  sb.append(""String_Node_Str"").append(cssClass).append(""String_Node_Str"");
  if (altText != null) {
    sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(altText));
  }
  sb.append(""String_Node_Str"");
  sb.append(StringHelper.escapeHtml(title));
  sb.append(""String_Node_Str"");
}","/** 
 * @see org.olat.core.gui.components.table.CustomCellRenderer#render(org.olat.core.gui.render.StringOutput,org.olat.core.gui.render.Renderer,java.lang.Object,java.util.Locale,int,java.lang.String)
 */
public void render(StringOutput sb,Renderer renderer,Object val,Locale locale,int alignment,String action){
  int indent;
  String type;
  String title;
  String altText;
  if (val instanceof Map) {
    Map nodeData=(Map)val;
    Integer indentObj=(Integer)nodeData.get(AssessmentHelper.KEY_INDENT);
    indent=(indentObj == null ? 0 : indentObj.intValue());
    type=(String)nodeData.get(AssessmentHelper.KEY_TYPE);
    title=(String)nodeData.get(AssessmentHelper.KEY_TITLE_SHORT);
    altText=(String)nodeData.get(AssessmentHelper.KEY_TITLE_LONG);
  }
 else   if (val instanceof NodeTableRow) {
    NodeTableRow row=(NodeTableRow)val;
    indent=row.getIndent();
    type=row.getType();
    title=row.getShortTitle();
    altText=row.getLongTitle();
  }
 else {
    return;
  }
  String cssClass=CourseNodeFactory.getInstance().getCourseNodeConfigurationEvenForDisabledBB(type).getIconCSSClass();
  if (isIndentationEnabled()) {
    appendIndent(sb,indent);
  }
  sb.append(""String_Node_Str"").append(cssClass).append(""String_Node_Str"");
  if (altText != null) {
    sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(altText)).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(StringHelper.escapeHtml(title));
  sb.append(""String_Node_Str"");
}"
69430,"protected FormBasicController(UserRequest ureq,WindowControl wControl,int layout,String customLayoutPageName,Form externalMainForm){
  super(ureq,wControl);
  if (layout == LAYOUT_HORIZONTAL) {
    flc=FormLayoutContainer.createHorizontalFormLayout(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_VERTICAL) {
    flc=FormLayoutContainer.createVerticalFormLayout(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_BAREBONE) {
    flc=FormLayoutContainer.createBareBoneFormLayout(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_PANEL) {
    flc=FormLayoutContainer.createPanelFormLayout(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_DEFAULT_6_6) {
    flc=FormLayoutContainer.createDefaultFormLayout_6_6(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_DEFAULT_9_3) {
    flc=FormLayoutContainer.createDefaultFormLayout_9_3(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_CUSTOM && customLayoutPageName != null) {
    String vc_pageName=velocity_root + ""String_Node_Str"" + customLayoutPageName+ ""String_Node_Str"";
    flc=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"" + customLayoutPageName + this.hashCode(),getTranslator(),vc_pageName);
  }
 else {
    flc=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  }
  mainForm=externalMainForm;
  flc.setRootForm(externalMainForm);
  mainForm.addSubFormListener(this);
  initialPanel=putInitialPanel(flc.getComponent());
}","protected FormBasicController(UserRequest ureq,WindowControl wControl,int layout,String customLayoutPageName,Form externalMainForm){
  super(ureq,wControl);
  if (layout == LAYOUT_HORIZONTAL) {
    flc=FormLayoutContainer.createHorizontalFormLayout(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_VERTICAL) {
    flc=FormLayoutContainer.createVerticalFormLayout(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_BAREBONE) {
    flc=FormLayoutContainer.createBareBoneFormLayout(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_PANEL) {
    flc=FormLayoutContainer.createPanelFormLayout(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_DEFAULT_6_6) {
    flc=FormLayoutContainer.createDefaultFormLayout_6_6(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_DEFAULT_9_3) {
    flc=FormLayoutContainer.createDefaultFormLayout_9_3(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_DEFAULT_2_10) {
    flc=FormLayoutContainer.createDefaultFormLayout_2_10(""String_Node_Str"",getTranslator());
  }
 else   if (layout == LAYOUT_CUSTOM && customLayoutPageName != null) {
    String vc_pageName=velocity_root + ""String_Node_Str"" + customLayoutPageName+ ""String_Node_Str"";
    flc=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"" + customLayoutPageName + this.hashCode(),getTranslator(),vc_pageName);
  }
 else {
    flc=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  }
  mainForm=externalMainForm;
  flc.setRootForm(externalMainForm);
  mainForm.addSubFormListener(this);
  initialPanel=putInitialPanel(flc.getComponent());
}"
69431,"protected <X>ModulePropertyValue<X> valueOf(ModuleProperty<X> key){
  Class<X> klass=key.rawType();
  X val=null;
  String name=key.name();
  if (klass == Boolean.class) {
    Boolean b=(key.hasDefault() ? config.getBooleanSafe(key(name),(boolean)(key.getDefault())) : config.getBooleanEntry(key(name)));
    val=klass.cast(b);
  }
 else   if (klass == Float.class) {
    Float f=config.getFloatEntry(key(name));
    val=klass.cast(f);
  }
 else   if (klass == Integer.class) {
    if (!key.hasDefault()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    Integer i=config.getIntegerSafe(key(name),(int)key.getDefault());
    val=klass.cast(i);
  }
 else   if (klass == Date.class) {
    Date d=config.getDateValue(key(name));
    val=klass.cast(d);
  }
 else {
    val=klass.cast(get(name));
  }
  return new ModulePropertyValue<X>(val,key);
}","protected <X>ModulePropertyValue<X> valueOf(ModuleProperty<X> key){
  Class<X> klass=key.rawType();
  X val=null;
  String name=key.name();
  if (klass == Boolean.class) {
    Boolean b=(key.hasDefault() ? config.getBooleanSafe(key(name),(Boolean)(key.getDefault())) : config.getBooleanEntry(key(name)));
    val=klass.cast(b);
  }
 else   if (klass == Float.class) {
    Float f=config.getFloatEntry(key(name));
    val=klass.cast(f);
  }
 else   if (klass == Integer.class) {
    if (!key.hasDefault()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    Integer i=config.getIntegerSafe(key(name),(Integer)key.getDefault());
    val=klass.cast(i);
  }
 else   if (klass == Date.class) {
    Date d=config.getDateValue(key(name));
    val=klass.cast(d);
  }
 else {
    val=klass.cast(get(name));
  }
  return new ModulePropertyValue<X>(val,key);
}"
69432,"@Override protected void event(UserRequest ureq,Component source,Event event){
  if (source == mainVC) {
    String cmd=event.getCommand();
    if (StringHelper.containsNonWhitespace(cmd)) {
      String currentTime=ureq.getHttpReq().getParameter(""String_Node_Str"");
      String src=ureq.getHttpReq().getParameter(""String_Node_Str"");
      logDebug(cmd + ""String_Node_Str"" + currentTime+ ""String_Node_Str""+ src,null);
switch (cmd) {
case ""String_Node_Str"":
        fireEvent(ureq,new VideoEvent(VideoEvent.PLAY,currentTime));
case ""String_Node_Str"":
      fireEvent(ureq,new VideoEvent(VideoEvent.PAUSE,currentTime));
case ""String_Node_Str"":
    fireEvent(ureq,new VideoEvent(VideoEvent.SEEKED,currentTime));
case ""String_Node_Str"":
  fireEvent(ureq,new VideoEvent(VideoEvent.ENDED,currentTime));
}
updateGUIPreferences(ureq,src);
}
}
}","@Override protected void event(UserRequest ureq,Component source,Event event){
  if (source == mainVC) {
    String cmd=event.getCommand();
    if (StringHelper.containsNonWhitespace(cmd)) {
      String currentTime=ureq.getHttpReq().getParameter(""String_Node_Str"");
      String src=ureq.getHttpReq().getParameter(""String_Node_Str"");
      logDebug(cmd + ""String_Node_Str"" + currentTime+ ""String_Node_Str""+ src,null);
switch (cmd) {
case ""String_Node_Str"":
        fireEvent(ureq,new VideoEvent(VideoEvent.PLAY,currentTime));
      break;
case ""String_Node_Str"":
    fireEvent(ureq,new VideoEvent(VideoEvent.PAUSE,currentTime));
  break;
case ""String_Node_Str"":
fireEvent(ureq,new VideoEvent(VideoEvent.SEEKED,currentTime));
break;
case ""String_Node_Str"":
fireEvent(ureq,new VideoEvent(VideoEvent.ENDED,currentTime));
break;
}
updateGUIPreferences(ureq,src);
}
}
}"
69433,"/** 
 * @param moduleConfiguration
 * @return boolean
 */
public static boolean isModuleConfigValid(ModuleConfiguration moduleConfiguration){
  return (moduleConfiguration.get(CONFIG_KEY_REPOSITORY_SOFTKEY) != null);
}","/** 
 * @param moduleConfiguration
 * @return boolean
 */
public static boolean isModuleConfigValid(ModuleConfiguration moduleConfiguration){
  boolean isValid=moduleConfiguration.get(CONFIG_KEY_REPOSITORY_SOFTKEY) != null;
  if (isValid) {
    Object repoEntry=getVideoReference(moduleConfiguration,false);
    if (repoEntry == null) {
      isValid=false;
      removeVideoReference(moduleConfiguration);
    }
  }
  return isValid;
}"
69434,"private void renderEvent(StringBuilder sb,KalendarEventRenderWrapper eventWrapper,Date dayStart,Date dayEnd){
  KalendarEvent event=eventWrapper.getEvent();
  boolean hidden=eventWrapper.getCalendarAccess() == KalendarRenderWrapper.ACCESS_READ_ONLY && !eventWrapper.getKalendarRenderWrapper().isImported() && event.getClassification() != KalendarEvent.CLASS_PUBLIC;
  String escapedSubject=Formatter.escWithBR(event.getSubject()).toString();
  escapedSubject=escapedSubject.replace('\r',' ');
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + eventWrapper.getCssClass() + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (event.isAllDayEvent()) {
    sb.append(translator.translate(""String_Node_Str""));
  }
 else {
    Date begin=event.getBegin();
    Date end=event.getEnd();
    if (begin.before(dayStart)) {
      begin=dayStart;
    }
    if (end == null || end.after(dayEnd)) {
      end=dayEnd;
    }
    sb.append(StringHelper.formatLocaleTime(begin,translator.getLocale()));
    sb.append(""String_Node_Str"");
    sb.append(StringHelper.formatLocaleTime(end,translator.getLocale()));
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (hidden) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(escapedSubject.replace(""String_Node_Str"",""String_Node_Str""));
  }
  sb.append(""String_Node_Str"");
  if (StringHelper.containsNonWhitespace(event.getLocation())) {
    sb.append(""String_Node_Str"");
    sb.append(translator.translate(""String_Node_Str"") + ""String_Node_Str"");
    if (!hidden) {
      sb.append(StringHelper.escapeHtml(event.getLocation()));
    }
    sb.append(""String_Node_Str"");
  }
  if (StringHelper.containsNonWhitespace(event.getDescription())) {
    sb.append(""String_Node_Str"");
    sb.append(translator.translate(""String_Node_Str"") + ""String_Node_Str"");
    if (!hidden) {
      sb.append(StringHelper.escapeHtml(event.getDescription()));
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
}","private void renderEvent(StringBuilder sb,KalendarEventRenderWrapper eventWrapper,Date dayStart,Date dayEnd){
  KalendarEvent event=eventWrapper.getEvent();
  if (event.getClassification() == KalendarEvent.CLASS_PRIVATE && !eventWrapper.getKalendarRenderWrapper().isPrivateEventsVisible()) {
    return;
  }
  String escapedSubject=Formatter.escWithBR(event.getSubject()).toString();
  escapedSubject=escapedSubject.replace('\r',' ');
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + eventWrapper.getCssClass() + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (event.isAllDayEvent()) {
    sb.append(translator.translate(""String_Node_Str""));
  }
 else {
    Date begin=event.getBegin();
    Date end=event.getEnd();
    if (begin.before(dayStart)) {
      begin=dayStart;
    }
    if (end == null || end.after(dayEnd)) {
      end=dayEnd;
    }
    sb.append(StringHelper.formatLocaleTime(begin,translator.getLocale()));
    sb.append(""String_Node_Str"");
    sb.append(StringHelper.formatLocaleTime(end,translator.getLocale()));
  }
  sb.append(""String_Node_Str"");
  if (eventWrapper.getKalendarRenderWrapper().isPrivateEventsVisible() || event.getClassification() == KalendarEvent.CLASS_PUBLIC || eventWrapper.getKalendarRenderWrapper().isImported()) {
    sb.append(""String_Node_Str"");
    sb.append(escapedSubject.replace(""String_Node_Str"",""String_Node_Str""));
    sb.append(""String_Node_Str"");
    if (StringHelper.containsNonWhitespace(event.getLocation())) {
      sb.append(""String_Node_Str"");
      sb.append(translator.translate(""String_Node_Str"") + ""String_Node_Str"");
      sb.append(StringHelper.escapeHtml(event.getLocation()));
      sb.append(""String_Node_Str"");
    }
    if (StringHelper.containsNonWhitespace(event.getDescription())) {
      sb.append(""String_Node_Str"");
      sb.append(translator.translate(""String_Node_Str"") + ""String_Node_Str"");
      sb.append(StringHelper.escapeHtml(event.getDescription()));
      sb.append(""String_Node_Str"");
    }
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(translator.translate(""String_Node_Str""));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
}"
69435,"public final void build(){
  List<OutcomeDeclaration> outcomeDeclarations=assessmentItem.getOutcomeDeclarations();
  outcomeDeclarations.clear();
  ResponseProcessing responseProcessing=assessmentItem.getResponseProcessing();
  List<ResponseRule> responseRules=responseProcessing.getResponseRules();
  responseRules.clear();
  List<ResponseDeclaration> responseDeclarations=assessmentItem.getResponseDeclarations();
  responseDeclarations.clear();
  buildResponseDeclaration();
  buildItemBody();
  buildModalFeedback(outcomeDeclarations,responseRules);
  buildScores(outcomeDeclarations,responseRules);
  buildMainScoreRule(outcomeDeclarations,responseRules);
}","public final void build(){
  List<OutcomeDeclaration> outcomeDeclarations=assessmentItem.getOutcomeDeclarations();
  outcomeDeclarations.clear();
  ResponseProcessing responseProcessing=assessmentItem.getResponseProcessing();
  List<ResponseRule> responseRules=responseProcessing.getResponseRules();
  responseRules.clear();
  List<ResponseDeclaration> responseDeclarations=assessmentItem.getResponseDeclarations();
  responseDeclarations.clear();
  buildItemBody();
  buildResponseDeclaration();
  buildModalFeedback(outcomeDeclarations,responseRules);
  buildScores(outcomeDeclarations,responseRules);
  buildMainScoreRule(outcomeDeclarations,responseRules);
}"
69436,"public void clearSimpleChoices(){
  if (choices != null) {
    choices.clear();
    ;
  }
}","public void clearSimpleChoices(){
  if (choices != null) {
    choices.clear();
  }
}"
69437,"@Override protected void buildItemBody(){
  List<Block> blocks=assessmentItem.getItemBody().getBlocks();
  blocks.clear();
  getHtmlHelper().appendHtml(assessmentItem.getItemBody(),question);
  List<Interaction> interactions=assessmentItem.getItemBody().findInteractions();
  for (  Interaction interaction : interactions) {
    if (interaction instanceof TextEntryInteraction && interaction.getResponseIdentifier() != null) {
      TextEntryInteraction textEntryInteraction=(TextEntryInteraction)interaction;
      AbstractEntry entry=responseIdentifierToTextEntry.get(interaction.getResponseIdentifier().toString());
      textEntryInteraction.setPlaceholderText(entry.getPlaceholder());
      textEntryInteraction.setExpectedLength(entry.getExpectedLength());
    }
  }
}","@Override protected void buildItemBody(){
  List<Block> blocks=assessmentItem.getItemBody().getBlocks();
  blocks.clear();
  getHtmlHelper().appendHtml(assessmentItem.getItemBody(),question);
  List<Interaction> interactions=assessmentItem.getItemBody().findInteractions();
  List<String> usedResponseIdentifiers=new ArrayList<>(interactions.size());
  for (  Interaction interaction : interactions) {
    if (interaction instanceof TextEntryInteraction && interaction.getResponseIdentifier() != null) {
      TextEntryInteraction textEntryInteraction=(TextEntryInteraction)interaction;
      String responseIdentifier=interaction.getResponseIdentifier().toString();
      AbstractEntry entry=responseIdentifierToTextEntry.get(responseIdentifier);
      textEntryInteraction.setPlaceholderText(entry.getPlaceholder());
      textEntryInteraction.setExpectedLength(entry.getExpectedLength());
      usedResponseIdentifiers.add(responseIdentifier);
    }
  }
  List<String> mappedResponseIdentifiers=new ArrayList<>(responseIdentifierToTextEntry.keySet());
  mappedResponseIdentifiers.removeAll(usedResponseIdentifiers);
  for (  String mappedResponseIdentifier : mappedResponseIdentifiers) {
    responseIdentifierToTextEntry.remove(mappedResponseIdentifier);
  }
}"
69438,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  super.initForm(formLayout,listener,ureq);
  minScoreEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",8,""String_Node_Str"",formLayout);
  minScoreEl.setEnabled(false);
  ScoreBuilder maxScore=itemBuilder.getMaxScoreBuilder();
  String maxValue=maxScore == null ? ""String_Node_Str"" : (maxScore.getScore() == null ? ""String_Node_Str"" : maxScore.getScore().toString());
  maxScoreEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",8,maxValue,formLayout);
  String[] modeValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  assessmentModeEl=uifactory.addRadiosHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,modeKeys,modeValues);
  if (itemBuilder.getScoreEvaluationMode() == ScoreEvaluation.perAnswer) {
    assessmentModeEl.select(ScoreEvaluation.perAnswer.name(),true);
  }
 else {
    assessmentModeEl.select(ScoreEvaluation.allCorrectAnswers.name(),true);
  }
  String scorePage=velocity_root + ""String_Node_Str"";
  scoreCont=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),scorePage);
  formLayout.add(scoreCont);
  scoreCont.setLabel(null,null);
  for (  SimpleChoice choice : itemBuilder.getSimpleChoices()) {
    SimpleChoiceWrapper wrapper=createSimpleChoiceWrapper(choice);
    wrappers.add(wrapper);
  }
  scoreCont.contextPut(""String_Node_Str"",wrappers);
  scoreCont.setVisible(assessmentModeEl.isSelected(1));
  FormLayoutContainer buttonsContainer=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  buttonsContainer.setRootForm(mainForm);
  formLayout.add(buttonsContainer);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonsContainer);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  super.initForm(formLayout,listener,ureq);
  minScoreEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",8,""String_Node_Str"",formLayout);
  minScoreEl.setEnabled(false);
  ScoreBuilder maxScore=itemBuilder.getMaxScoreBuilder();
  String maxValue=maxScore == null ? ""String_Node_Str"" : (maxScore.getScore() == null ? ""String_Node_Str"" : maxScore.getScore().toString());
  maxScoreEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",8,maxValue,formLayout);
  String[] modeValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  assessmentModeEl=uifactory.addRadiosHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,modeKeys,modeValues);
  assessmentModeEl.addActionListener(FormEvent.ONCHANGE);
  if (itemBuilder.getScoreEvaluationMode() == ScoreEvaluation.perAnswer) {
    assessmentModeEl.select(ScoreEvaluation.perAnswer.name(),true);
  }
 else {
    assessmentModeEl.select(ScoreEvaluation.allCorrectAnswers.name(),true);
  }
  String scorePage=velocity_root + ""String_Node_Str"";
  scoreCont=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),scorePage);
  formLayout.add(scoreCont);
  scoreCont.setLabel(null,null);
  for (  SimpleChoice choice : itemBuilder.getSimpleChoices()) {
    SimpleChoiceWrapper wrapper=createSimpleChoiceWrapper(choice);
    wrappers.add(wrapper);
  }
  scoreCont.contextPut(""String_Node_Str"",wrappers);
  scoreCont.setVisible(assessmentModeEl.isSelected(1));
  FormLayoutContainer buttonsContainer=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  buttonsContainer.setRootForm(mainForm);
  formLayout.add(buttonsContainer);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonsContainer);
}"
69439,"@Override public void sync(UserRequest ureq,AssessmentItemBuilder assessmentItemBuilder){
  if (itemBuilder == assessmentItemBuilder) {
    for (    SimpleChoice choice : itemBuilder.getSimpleChoices()) {
      SimpleChoiceWrapper wrapper=getSimpleChoiceWrapper(choice);
      if (wrapper == null) {
        wrappers.add(createSimpleChoiceWrapper(choice));
      }
    }
  }
}","@Override public void sync(UserRequest ureq,AssessmentItemBuilder assessmentItemBuilder){
  if (itemBuilder == assessmentItemBuilder) {
    for (    SimpleChoice choice : itemBuilder.getSimpleChoices()) {
      SimpleChoiceWrapper wrapper=getSimpleChoiceWrapper(choice);
      if (wrapper == null) {
        wrappers.add(createSimpleChoiceWrapper(choice));
      }
    }
    for (Iterator<SimpleChoiceWrapper> wrapperIt=wrappers.iterator(); wrapperIt.hasNext(); ) {
      Identifier choiceIdentifier=wrapperIt.next().getChoice().getIdentifier();
      if (itemBuilder.getSimpleChoice(choiceIdentifier) == null) {
        wrapperIt.remove();
      }
    }
  }
}"
69440,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  super.initForm(formLayout,listener,ureq);
  minScoreEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",8,""String_Node_Str"",formLayout);
  minScoreEl.setEnabled(false);
  ScoreBuilder maxScore=itemBuilder.getMaxScoreBuilder();
  String maxValue=maxScore == null ? ""String_Node_Str"" : (maxScore.getScore() == null ? ""String_Node_Str"" : maxScore.getScore().toString());
  maxScoreEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",8,maxValue,formLayout);
  String[] modeValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  assessmentModeEl=uifactory.addRadiosHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,modeKeys,modeValues);
  assessmentModeEl.addActionListener(FormEvent.ONCHANGE);
  if (itemBuilder.getScoreEvaluationMode() == ScoreEvaluation.perAnswer) {
    assessmentModeEl.select(ScoreEvaluation.perAnswer.name(),true);
  }
 else {
    assessmentModeEl.select(ScoreEvaluation.allCorrectAnswers.name(),true);
  }
  String scorePage=velocity_root + ""String_Node_Str"";
  scoreCont=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),scorePage);
  formLayout.add(scoreCont);
  scoreCont.setLabel(null,null);
  for (  AbstractEntry entry : itemBuilder.getTextEntries()) {
    String points=""String_Node_Str"";
    Double score=entry.getScore();
    if (score != null) {
      points=score.toString();
    }
    String pointElId=""String_Node_Str"" + counter++;
    TextElement pointEl=uifactory.addTextElement(pointElId,null,5,points,scoreCont);
    pointEl.setDisplaySize(5);
    scoreCont.add(pointElId,pointEl);
    wrappers.add(new TextEntryWrapper(entry,pointEl));
  }
  scoreCont.contextPut(""String_Node_Str"",wrappers);
  scoreCont.setVisible(assessmentModeEl.isSelected(1));
  FormLayoutContainer buttonsContainer=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  buttonsContainer.setRootForm(mainForm);
  formLayout.add(buttonsContainer);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonsContainer);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  super.initForm(formLayout,listener,ureq);
  minScoreEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",8,""String_Node_Str"",formLayout);
  minScoreEl.setEnabled(false);
  ScoreBuilder maxScore=itemBuilder.getMaxScoreBuilder();
  String maxValue=maxScore == null ? ""String_Node_Str"" : (maxScore.getScore() == null ? ""String_Node_Str"" : maxScore.getScore().toString());
  maxScoreEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",8,maxValue,formLayout);
  String[] modeValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  assessmentModeEl=uifactory.addRadiosHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,modeKeys,modeValues);
  assessmentModeEl.addActionListener(FormEvent.ONCHANGE);
  if (itemBuilder.getScoreEvaluationMode() == ScoreEvaluation.perAnswer) {
    assessmentModeEl.select(ScoreEvaluation.perAnswer.name(),true);
  }
 else {
    assessmentModeEl.select(ScoreEvaluation.allCorrectAnswers.name(),true);
  }
  String scorePage=velocity_root + ""String_Node_Str"";
  scoreCont=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),scorePage);
  formLayout.add(scoreCont);
  scoreCont.setLabel(null,null);
  for (  AbstractEntry entry : itemBuilder.getTextEntries()) {
    wrappers.add(createTextEntryWrapper(entry));
  }
  scoreCont.contextPut(""String_Node_Str"",wrappers);
  scoreCont.setVisible(assessmentModeEl.isSelected(1));
  FormLayoutContainer buttonsContainer=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  buttonsContainer.setRootForm(mainForm);
  formLayout.add(buttonsContainer);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonsContainer);
}"
69441,"public QTI21AssessmentRunController(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,IQTESTCourseNode courseNode){
  super(ureq,wControl,Util.createPackageTranslator(CourseNode.class,ureq.getLocale()));
  setTranslator(Util.createPackageTranslator(AssessmentTestDisplayController.class,getLocale(),getTranslator()));
  this.courseNode=courseNode;
  this.userCourseEnv=userCourseEnv;
  userSession=ureq.getUserSession();
  config=courseNode.getModuleConfiguration();
  singleUserEventCenter=ureq.getUserSession().getSingleUserEventCenter();
  mainVC=createVelocityContainer(""String_Node_Str"");
  init();
  initAssessment(ureq);
  putInitialPanel(mainVC);
}","public QTI21AssessmentRunController(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,IQTESTCourseNode courseNode){
  super(ureq,wControl,Util.createPackageTranslator(CourseNode.class,ureq.getLocale()));
  setTranslator(Util.createPackageTranslator(AssessmentTestDisplayController.class,getLocale(),getTranslator()));
  this.courseNode=courseNode;
  this.userCourseEnv=userCourseEnv;
  userSession=ureq.getUserSession();
  config=courseNode.getModuleConfiguration();
  testEntry=courseNode.getReferencedRepositoryEntry();
  singleUserEventCenter=ureq.getUserSession().getSingleUserEventCenter();
  mainVC=createVelocityContainer(""String_Node_Str"");
  deliveryOptions=getDeliveryOptions();
  init();
  initAssessment(ureq);
  putInitialPanel(mainVC);
}"
69442,"private QTI21DeliveryOptions getDeliveryOptions(RepositoryEntry testEntry){
  QTI21DeliveryOptions testOptions=qtiService.getDeliveryOptions(testEntry);
  QTI21DeliveryOptions deliveryOptions=testOptions.clone();
  deliveryOptions.setShowTitles(mergeBoolean(config.getBooleanEntry(IQEditController.CONFIG_KEY_QUESTIONTITLE),testOptions.isShowTitles()));
  deliveryOptions.setPersonalNotes(mergeBoolean(config.getBooleanEntry(IQEditController.CONFIG_KEY_MEMO),testOptions.isPersonalNotes()));
  deliveryOptions.setEnableCancel(mergeBoolean(config.getBooleanEntry(IQEditController.CONFIG_KEY_ENABLECANCEL),testOptions.isEnableCancel()));
  deliveryOptions.setEnableSuspend(mergeBoolean(config.getBooleanEntry(IQEditController.CONFIG_KEY_ENABLESUSPEND),testOptions.isEnableSuspend()));
  deliveryOptions.setDisplayQuestionProgress(mergeBoolean(config.getBooleanEntry(IQEditController.CONFIG_KEY_QUESTIONPROGRESS),testOptions.isDisplayQuestionProgress()));
  deliveryOptions.setDisplayScoreProgress(mergeBoolean(config.getBooleanEntry(IQEditController.CONFIG_KEY_SCOREPROGRESS),testOptions.isDisplayScoreProgress()));
  return deliveryOptions;
}","private QTI21DeliveryOptions getDeliveryOptions(){
  QTI21DeliveryOptions testOptions=qtiService.getDeliveryOptions(testEntry);
  QTI21DeliveryOptions finalOptions=testOptions.clone();
  finalOptions.setMaxAttempts(config.getIntegerSafe(IQEditController.CONFIG_KEY_ATTEMPTS,testOptions.getMaxAttempts()));
  finalOptions.setBlockAfterSuccess(config.getBooleanSafe(IQEditController.CONFIG_KEY_QUESTIONTITLE,testOptions.isBlockAfterSuccess()));
  finalOptions.setShowTitles(config.getBooleanSafe(IQEditController.CONFIG_KEY_QUESTIONTITLE,testOptions.isShowTitles()));
  finalOptions.setPersonalNotes(config.getBooleanSafe(IQEditController.CONFIG_KEY_MEMO,testOptions.isPersonalNotes()));
  finalOptions.setEnableCancel(config.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLECANCEL,testOptions.isEnableCancel()));
  finalOptions.setEnableSuspend(config.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLESUSPEND,testOptions.isEnableSuspend()));
  finalOptions.setDisplayQuestionProgress(config.getBooleanSafe(IQEditController.CONFIG_KEY_QUESTIONPROGRESS,testOptions.isDisplayQuestionProgress()));
  finalOptions.setDisplayScoreProgress(config.getBooleanSafe(IQEditController.CONFIG_KEY_SCOREPROGRESS,testOptions.isDisplayScoreProgress()));
  return finalOptions;
}"
69443,"private void initAssessment(UserRequest ureq){
  boolean enableScoreInfo=config.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLESCOREINFO);
  mainVC.contextPut(""String_Node_Str"",new Boolean(enableScoreInfo));
  mainVC.contextPut(""String_Node_Str"",config.get(IQEditController.CONFIG_KEY_ATTEMPTS));
  ScoreEvaluation scoreEval=courseNode.getUserScoreEvaluation(userCourseEnv);
  boolean blockAfterSuccess=config.getBooleanSafe(IQEditController.CONFIG_KEY_BLOCK_AFTER_SUCCESS);
  Boolean blocked=Boolean.FALSE;
  if (blockAfterSuccess) {
    Boolean passed=scoreEval.getPassed();
    if (passed != null && passed.booleanValue()) {
      blocked=Boolean.TRUE;
    }
  }
  mainVC.contextPut(""String_Node_Str"",blocked);
  Identity identity=userCourseEnv.getIdentityEnvironment().getIdentity();
  mainVC.contextPut(""String_Node_Str"",AssessmentHelper.getRoundedScore(scoreEval.getScore()));
  mainVC.contextPut(""String_Node_Str"",(scoreEval.getPassed() == null ? Boolean.FALSE : Boolean.TRUE));
  mainVC.contextPut(""String_Node_Str"",scoreEval.getPassed());
  StringBuilder comment=Formatter.stripTabsAndReturns(courseNode.getUserUserComment(userCourseEnv));
  mainVC.contextPut(""String_Node_Str"",StringHelper.xssScan(comment));
  Integer attempts=courseNode.getUserAttempts(userCourseEnv);
  mainVC.contextPut(""String_Node_Str"",attempts == null ? new Integer(0) : attempts);
  UserNodeAuditManager am=userCourseEnv.getCourseEnvironment().getAuditManager();
  mainVC.contextPut(""String_Node_Str"",am.getUserNodeLog(courseNode,identity));
  exposeResults(ureq);
}","private void initAssessment(UserRequest ureq){
  boolean enableScoreInfo=config.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLESCOREINFO);
  mainVC.contextPut(""String_Node_Str"",new Boolean(enableScoreInfo));
  int maxAttempts=deliveryOptions.getMaxAttempts();
  if (maxAttempts > 0) {
    mainVC.contextPut(""String_Node_Str"",new Integer(maxAttempts));
  }
 else {
    mainVC.contextPut(""String_Node_Str"",Boolean.FALSE);
  }
  AssessmentEntry assessmentEntry=courseNode.getUserAssessmentEntry(userCourseEnv);
  if (assessmentEntry == null) {
    mainVC.contextPut(""String_Node_Str"",Boolean.FALSE);
    mainVC.contextPut(""String_Node_Str"",null);
    mainVC.contextPut(""String_Node_Str"",Boolean.FALSE);
    mainVC.contextPut(""String_Node_Str"",Boolean.FALSE);
    mainVC.contextPut(""String_Node_Str"",null);
    mainVC.contextPut(""String_Node_Str"",0);
  }
 else {
    Boolean passed=assessmentEntry.getPassed();
    Boolean blocked=Boolean.FALSE;
    boolean blockAfterSuccess=config.getBooleanSafe(IQEditController.CONFIG_KEY_BLOCK_AFTER_SUCCESS);
    if (blockAfterSuccess && passed != null && passed.booleanValue()) {
      blocked=Boolean.TRUE;
    }
    mainVC.contextPut(""String_Node_Str"",blocked);
    Identity identity=userCourseEnv.getIdentityEnvironment().getIdentity();
    mainVC.contextPut(""String_Node_Str"",AssessmentHelper.getRoundedScore(assessmentEntry.getScore()));
    mainVC.contextPut(""String_Node_Str"",(passed == null ? Boolean.FALSE : Boolean.TRUE));
    mainVC.contextPut(""String_Node_Str"",passed);
    StringBuilder comment=Formatter.stripTabsAndReturns(courseNode.getUserUserComment(userCourseEnv));
    mainVC.contextPut(""String_Node_Str"",StringHelper.xssScan(comment));
    Integer attempts=assessmentEntry.getAttempts();
    mainVC.contextPut(""String_Node_Str"",attempts == null ? new Integer(0) : attempts);
    UserNodeAuditManager am=userCourseEnv.getCourseEnvironment().getAuditManager();
    mainVC.contextPut(""String_Node_Str"",am.getUserNodeLog(courseNode,identity));
  }
  exposeResults(ureq);
}"
69444,"private void doStart(UserRequest ureq){
  removeAsListenerAndDispose(displayCtrl);
  OLATResourceable ores=OresHelper.createOLATResourceableTypeWithoutCheck(""String_Node_Str"");
  ThreadLocalUserActivityLogger.addLoggingResourceInfo(LoggingResourceable.wrapBusinessPath(ores));
  WindowControl bwControl=addToHistory(ureq,ores,null);
  RepositoryEntry testEntry=courseNode.getReferencedRepositoryEntry();
  RepositoryEntry courseRe=userCourseEnv.getCourseEnvironment().getCourseGroupManager().getCourseEntry();
  QTI21DeliveryOptions options=getDeliveryOptions(testEntry);
  displayCtrl=new AssessmentTestDisplayController(ureq,bwControl,this,testEntry,courseRe,courseNode.getIdent(),options);
  listenTo(displayCtrl);
  if (displayCtrl.isTerminated()) {
  }
 else {
    displayContainerController=new LayoutMain3ColsController(ureq,getWindowControl(),displayCtrl);
    listenTo(displayContainerController);
    Long courseResId=userCourseEnv.getCourseEnvironment().getCourseResourceableId();
    ICourse course=CourseFactory.loadCourse(courseResId);
    RepositoryEntry courseRepositoryEntry=course.getCourseEnvironment().getCourseGroupManager().getCourseEntry();
    Panel empty=new Panel(""String_Node_Str"");
    Controller courseCloser=new DisposedCourseRestartController(ureq,getWindowControl(),courseRepositoryEntry);
    Controller disposedRestartController=new LayoutMain3ColsController(ureq,getWindowControl(),empty,courseCloser.getInitialComponent(),""String_Node_Str"" + courseResId);
    displayContainerController.setDisposedMessageController(disposedRestartController);
    boolean fullWindow=config.getBooleanSafe(IQEditController.CONFIG_FULLWINDOW);
    if (fullWindow) {
      displayContainerController.setAsFullscreen(ureq);
    }
    displayContainerController.activate();
    assessmentStopped=false;
    singleUserEventCenter.registerFor(this,getIdentity(),assessmentInstanceOres);
    singleUserEventCenter.fireEventToListenersOf(new AssessmentEvent(AssessmentEvent.TYPE.STARTED,ureq.getUserSession()),assessmentEventOres);
  }
}","private void doStart(UserRequest ureq){
  removeAsListenerAndDispose(displayCtrl);
  OLATResourceable ores=OresHelper.createOLATResourceableTypeWithoutCheck(""String_Node_Str"");
  ThreadLocalUserActivityLogger.addLoggingResourceInfo(LoggingResourceable.wrapBusinessPath(ores));
  WindowControl bwControl=addToHistory(ureq,ores,null);
  RepositoryEntry courseRe=userCourseEnv.getCourseEnvironment().getCourseGroupManager().getCourseEntry();
  displayCtrl=new AssessmentTestDisplayController(ureq,bwControl,this,testEntry,courseRe,courseNode.getIdent(),deliveryOptions);
  listenTo(displayCtrl);
  if (displayCtrl.isTerminated()) {
  }
 else {
    displayContainerController=new LayoutMain3ColsController(ureq,getWindowControl(),displayCtrl);
    listenTo(displayContainerController);
    Panel empty=new Panel(""String_Node_Str"");
    Controller courseCloser=new DisposedCourseRestartController(ureq,getWindowControl(),courseRe);
    Controller disposedRestartController=new LayoutMain3ColsController(ureq,getWindowControl(),empty,courseCloser.getInitialComponent(),""String_Node_Str"");
    displayContainerController.setDisposedMessageController(disposedRestartController);
    boolean fullWindow=config.getBooleanSafe(IQEditController.CONFIG_FULLWINDOW);
    if (fullWindow) {
      displayContainerController.setAsFullscreen(ureq);
    }
    displayContainerController.activate();
    assessmentStopped=false;
    singleUserEventCenter.registerFor(this,getIdentity(),assessmentInstanceOres);
    singleUserEventCenter.fireEventToListenersOf(new AssessmentEvent(AssessmentEvent.TYPE.STARTED,ureq.getUserSession()),assessmentEventOres);
  }
}"
69445,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  String[] correctionModeValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  correctionModeEl=uifactory.addRadiosVertical(""String_Node_Str"",""String_Node_Str"",formLayout,correctionModeKeys,correctionModeValues);
  String mode=modConfig.getStringValue(IQEditController.CONFIG_CORRECTION_MODE);
  boolean selected=false;
  for (  String correctionModeKey : correctionModeKeys) {
    if (correctionModeKey.equals(mode)) {
      correctionModeEl.select(correctionModeKey,true);
      selected=true;
    }
  }
  if (!selected) {
    if (needManulCorrection) {
      correctionModeEl.select(correctionModeKeys[1],true);
    }
 else {
      correctionModeEl.select(correctionModeKeys[0],true);
    }
  }
  boolean fullWindow=modConfig.getBooleanSafe(IQEditController.CONFIG_FULLWINDOW);
  fullWindowEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  fullWindowEl.select(""String_Node_Str"",fullWindow);
  boolean showTitles=mergeBoolean(modConfig.getBooleanEntry(IQEditController.CONFIG_KEY_QUESTIONTITLE),deliveryOptions.isDisplayQuestionProgress());
  showTitlesEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (showTitles) {
    showTitlesEl.select(onKeys[0],true);
  }
  boolean personalNotes=mergeBoolean(modConfig.getBooleanEntry(IQEditController.CONFIG_KEY_MEMO),deliveryOptions.isDisplayQuestionProgress());
  personalNotesEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (personalNotes) {
    personalNotesEl.select(onKeys[0],true);
  }
  boolean questionProgress=mergeBoolean(modConfig.getBooleanEntry(IQEditController.CONFIG_KEY_QUESTIONPROGRESS),deliveryOptions.isDisplayQuestionProgress());
  displayQuestionProgressEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (questionProgress) {
    displayQuestionProgressEl.select(onKeys[0],true);
  }
  boolean questionScore=mergeBoolean(modConfig.getBooleanEntry(IQEditController.CONFIG_KEY_SCOREPROGRESS),deliveryOptions.isDisplayScoreProgress());
  displayScoreProgressEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (questionScore) {
    displayScoreProgressEl.select(onKeys[0],true);
  }
  boolean enableSuspend=mergeBoolean(modConfig.getBooleanEntry(IQEditController.CONFIG_KEY_ENABLESUSPEND),deliveryOptions.isEnableSuspend());
  enableSuspendEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (enableSuspend) {
    enableSuspendEl.select(onKeys[0],true);
  }
  boolean enableCancel=mergeBoolean(modConfig.getBooleanEntry(IQEditController.CONFIG_KEY_ENABLECANCEL),deliveryOptions.isEnableCancel());
  enableCancelEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (enableCancel) {
    enableCancelEl.select(onKeys[0],true);
  }
  uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  String[] correctionModeValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str"")};
  correctionModeEl=uifactory.addRadiosVertical(""String_Node_Str"",""String_Node_Str"",formLayout,correctionModeKeys,correctionModeValues);
  String mode=modConfig.getStringValue(IQEditController.CONFIG_CORRECTION_MODE);
  boolean selected=false;
  for (  String correctionModeKey : correctionModeKeys) {
    if (correctionModeKey.equals(mode)) {
      correctionModeEl.select(correctionModeKey,true);
      selected=true;
    }
  }
  if (!selected) {
    if (needManulCorrection) {
      correctionModeEl.select(correctionModeKeys[1],true);
    }
 else {
      correctionModeEl.select(correctionModeKeys[0],true);
    }
  }
  limitAttemptsEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  limitAttemptsEl.addActionListener(FormEvent.ONCLICK);
  String maxAttemptsValue=""String_Node_Str"";
  int maxAttempts=modConfig.getIntegerSafe(IQEditController.CONFIG_KEY_ATTEMPTS,deliveryOptions.getMaxAttempts());
  if (maxAttempts > 0) {
    limitAttemptsEl.select(onKeys[0],true);
  }
  maxAttemptsEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",8,maxAttemptsValue,formLayout);
  maxAttemptsEl.setDisplaySize(2);
  maxAttemptsEl.setVisible(maxAttempts > 0);
  boolean blockAfterSuccess=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_BLOCK_AFTER_SUCCESS,deliveryOptions.isBlockAfterSuccess());
  blockAfterSuccessEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (blockAfterSuccess) {
    blockAfterSuccessEl.select(onKeys[0],true);
  }
  boolean fullWindow=modConfig.getBooleanSafe(IQEditController.CONFIG_FULLWINDOW);
  fullWindowEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  fullWindowEl.select(""String_Node_Str"",fullWindow);
  boolean showTitles=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_QUESTIONTITLE,deliveryOptions.isDisplayQuestionProgress());
  showTitlesEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (showTitles) {
    showTitlesEl.select(onKeys[0],true);
  }
  boolean personalNotes=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_MEMO,deliveryOptions.isDisplayQuestionProgress());
  personalNotesEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (personalNotes) {
    personalNotesEl.select(onKeys[0],true);
  }
  boolean questionProgress=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_QUESTIONPROGRESS,deliveryOptions.isDisplayQuestionProgress());
  displayQuestionProgressEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (questionProgress) {
    displayQuestionProgressEl.select(onKeys[0],true);
  }
  boolean questionScore=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_SCOREPROGRESS,deliveryOptions.isDisplayScoreProgress());
  displayScoreProgressEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (questionScore) {
    displayScoreProgressEl.select(onKeys[0],true);
  }
  boolean enableSuspend=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLESUSPEND,deliveryOptions.isEnableSuspend());
  enableSuspendEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (enableSuspend) {
    enableSuspendEl.select(onKeys[0],true);
  }
  boolean enableCancel=modConfig.getBooleanSafe(IQEditController.CONFIG_KEY_ENABLECANCEL,deliveryOptions.isEnableCancel());
  enableCancelEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,onKeys,onValues);
  if (enableCancel) {
    enableCancelEl.select(onKeys[0],true);
  }
  uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
}"
69446,"@Override protected void formOK(UserRequest ureq){
  modConfig.setBooleanEntry(IQEditController.CONFIG_FULLWINDOW,fullWindowEl.isSelected(0));
  if (correctionModeEl.isOneSelected()) {
    modConfig.setStringValue(IQEditController.CONFIG_CORRECTION_MODE,correctionModeEl.getSelectedKey());
  }
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_QUESTIONTITLE,showTitlesEl.isSelected(0));
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_MEMO,personalNotesEl.isSelected(0));
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_ENABLECANCEL,enableCancelEl.isSelected(0));
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_ENABLESUSPEND,enableSuspendEl.isSelected(0));
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_QUESTIONPROGRESS,displayQuestionProgressEl.isSelected(0));
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_SCOREPROGRESS,displayScoreProgressEl.isSelected(0));
  fireEvent(ureq,Event.DONE_EVENT);
}","@Override protected void formOK(UserRequest ureq){
  modConfig.setBooleanEntry(IQEditController.CONFIG_FULLWINDOW,fullWindowEl.isSelected(0));
  if (correctionModeEl.isOneSelected()) {
    modConfig.setStringValue(IQEditController.CONFIG_CORRECTION_MODE,correctionModeEl.getSelectedKey());
  }
  if (limitAttemptsEl.isSelected(0)) {
    int maxAttempts=Integer.parseInt(maxAttemptsEl.getValue());
    modConfig.setIntValue(IQEditController.CONFIG_KEY_ATTEMPTS,maxAttempts);
  }
 else {
    modConfig.setIntValue(IQEditController.CONFIG_KEY_ATTEMPTS,0);
  }
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_BLOCK_AFTER_SUCCESS,blockAfterSuccessEl.isSelected(0));
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_QUESTIONTITLE,showTitlesEl.isSelected(0));
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_MEMO,personalNotesEl.isSelected(0));
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_ENABLECANCEL,enableCancelEl.isSelected(0));
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_ENABLESUSPEND,enableSuspendEl.isSelected(0));
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_QUESTIONPROGRESS,displayQuestionProgressEl.isSelected(0));
  modConfig.setBooleanEntry(IQEditController.CONFIG_KEY_SCOREPROGRESS,displayScoreProgressEl.isSelected(0));
  fireEvent(ureq,Event.DONE_EVENT);
}"
69447,"@Override public QTI21DeliveryOptions clone(){
  QTI21DeliveryOptions clone=new QTI21DeliveryOptions();
  clone.enableCancel=enableCancel;
  clone.enableSuspend=enableSuspend;
  clone.displayScoreProgress=displayScoreProgress;
  clone.displayQuestionProgress=displayQuestionProgress;
  clone.showTitles=showTitles;
  clone.personalNotes=personalNotes;
  return clone;
}","@Override public QTI21DeliveryOptions clone(){
  QTI21DeliveryOptions clone=new QTI21DeliveryOptions();
  clone.enableCancel=enableCancel;
  clone.enableSuspend=enableSuspend;
  clone.displayScoreProgress=displayScoreProgress;
  clone.displayQuestionProgress=displayQuestionProgress;
  clone.showTitles=showTitles;
  clone.personalNotes=personalNotes;
  clone.blockAfterSuccess=blockAfterSuccess;
  clone.maxAttempts=maxAttempts;
  return clone;
}"
69448,"public static final QTI21DeliveryOptions defaultSettings(){
  QTI21DeliveryOptions defaultSettings=new QTI21DeliveryOptions();
  defaultSettings.enableCancel=false;
  defaultSettings.enableSuspend=false;
  defaultSettings.displayScoreProgress=false;
  defaultSettings.displayQuestionProgress=false;
  defaultSettings.showTitles=true;
  defaultSettings.personalNotes=false;
  return defaultSettings;
}","public static final QTI21DeliveryOptions defaultSettings(){
  QTI21DeliveryOptions defaultSettings=new QTI21DeliveryOptions();
  defaultSettings.enableCancel=false;
  defaultSettings.enableSuspend=false;
  defaultSettings.displayScoreProgress=false;
  defaultSettings.displayQuestionProgress=false;
  defaultSettings.showTitles=true;
  defaultSettings.personalNotes=false;
  defaultSettings.blockAfterSuccess=false;
  defaultSettings.maxAttempts=0;
  return defaultSettings;
}"
69449,"public int getIndex(String qName){
  return attributes.getIndex(qName.toLowerCase());
}","@Override public int getIndex(String qName){
  return attributes.getIndex(qName.toLowerCase());
}"
69450,"private Document filter(String content){
  try {
    SAXParser parser=new SAXParser();
    parser.setProperty(""String_Node_Str"",""String_Node_Str"");
    parser.setFeature(""String_Node_Str"",true);
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document document=builder.newDocument();
    HtmlToDomBuilderHandler contentHandler=new HtmlToDomBuilderHandler(document);
    parser.setContentHandler(contentHandler);
    parser.parse(new InputSource(new ByteArrayInputStream(content.getBytes())));
    return document;
  }
 catch (  SAXException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
}","private Document filter(String content){
  try {
    SAXParser parser=new SAXParser();
    parser.setProperty(""String_Node_Str"",""String_Node_Str"");
    parser.setFeature(""String_Node_Str"",true);
    parser.setProperty(""String_Node_Str"",""String_Node_Str"");
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document document=builder.newDocument();
    HtmlToDomBuilderHandler contentHandler=new HtmlToDomBuilderHandler(document);
    parser.setContentHandler(contentHandler);
    parser.parse(new InputSource(new ByteArrayInputStream(content.getBytes())));
    return document;
  }
 catch (  SAXException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
}"
69451,"public String getValue(String qName){
  return attributes.getValue(qName);
}","@Override public String getValue(String qName){
  return attributes.getValue(qName);
}"
69452,"public void appendHtml(AbstractNode parent,String htmlFragment){
  if (StringHelper.containsNonWhitespace(htmlFragment)) {
    htmlFragment=htmlFragment.trim();
    if (StringHelper.isHtml(htmlFragment)) {
      if (htmlFragment.startsWith(""String_Node_Str"")) {
        htmlFragment=htmlFragment.replace(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      htmlFragment=""String_Node_Str"" + htmlFragment + ""String_Node_Str"";
    }
    Document document=filter(""String_Node_Str"" + htmlFragment + ""String_Node_Str"");
    Element docElement=document.getDocumentElement();
    Node pEl=docElement.getFirstChild();
    NamedNodeMap attrs=pEl.getAttributes();
    for (int i=0; i < attrs.getLength(); i++) {
      Node attr=attrs.item(i);
      System.out.println(attr);
    }
    parent.getNodeGroups().load(docElement,new HTMLLoadingContext());
  }
}","public void appendHtml(AbstractNode parent,String htmlFragment){
  if (StringHelper.containsNonWhitespace(htmlFragment)) {
    htmlFragment=htmlFragment.trim();
    if (StringHelper.isHtml(htmlFragment)) {
      if (htmlFragment.startsWith(""String_Node_Str"")) {
        htmlFragment=htmlFragment.replace(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      htmlFragment=""String_Node_Str"" + htmlFragment + ""String_Node_Str"";
    }
    Document document=filter(""String_Node_Str"" + htmlFragment + ""String_Node_Str"");
    Element docElement=document.getDocumentElement();
    cleanUpNamespaces(docElement);
    parent.getNodeGroups().load(docElement,new HTMLLoadingContext());
  }
}"
69453,"@Override public String getLocalName(int index){
  String localName=attributes.getLocalName(index);
  if (""String_Node_Str"".equals(localName)) {
    localName=""String_Node_Str"";
  }
  return localName;
}","@Override public String getLocalName(int index){
  String localName=attributes.getLocalName(index);
  return translateAttributeName(localName);
}"
69454,"public String getType(String qName){
  return attributes.getType(qName);
}","@Override public String getType(String qName){
  return attributes.getType(qName);
}"
69455,"private String cleanUpNamespaces(StringOutput sb){
  String content=sb.toString();
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  return content.trim();
}","private void cleanUpNamespaces(Element element){
  Attr xsiattr=element.getAttributeNode(""String_Node_Str"");
  if (xsiattr != null && ""String_Node_Str"".equals(xsiattr.getValue())) {
    element.removeAttribute(""String_Node_Str"");
  }
  Attr attr=element.getAttributeNode(""String_Node_Str"");
  if (attr != null && ""String_Node_Str"".equals(attr.getValue())) {
    element.removeAttribute(""String_Node_Str"");
  }
  for (Node child=element.getFirstChild(); child != null; child=child.getNextSibling()) {
    if (child instanceof Element) {
      cleanUpNamespaces((Element)child);
    }
  }
}"
69456,"public int getLength(){
  return attributes.getLength();
}","@Override public int getLength(){
  return attributes.getLength();
}"
69457,"public String getQName(int index){
  String qName=attributes.getQName(index);
  if (""String_Node_Str"".equals(qName)) {
    qName=""String_Node_Str"";
  }
  return qName;
}","@Override public String getQName(int index){
  String qName=attributes.getQName(index);
  return translateAttributeName(qName);
}"
69458,"public String getURI(int index){
  return attributes.getURI(index);
}","@Override public String getURI(int index){
  return attributes.getURI(index);
}"
69459,"private void extractTextEntrySettingsFromResponseDeclaration(){
  double mappedScore=0.0d;
  for (  Map.Entry<String,TextEntry> textEntryEntry : responseIdentifierToTextEntry.entrySet()) {
    TextEntry textEntry=textEntryEntry.getValue();
    ResponseDeclaration responseDeclaration=assessmentItem.getResponseDeclaration(textEntry.getResponseIdentifier());
    if (responseDeclaration != null) {
      String solution=null;
      CorrectResponse correctResponse=responseDeclaration.getCorrectResponse();
      if (correctResponse != null && correctResponse.getFieldValues().size() > 0) {
        List<FieldValue> fValues=correctResponse.getFieldValues();
        SingleValue sValue=fValues.get(0).getSingleValue();
        if (sValue instanceof StringValue) {
          solution=((StringValue)sValue).stringValue();
          textEntry.setSolution(solution);
        }
        if (correctResponse.getFieldValues().size() > 1) {
          List<TextEntryAlternative> alternatives=new ArrayList<>();
          for (int i=1; i < correctResponse.getFieldValues().size(); i++) {
            SingleValue aValue=fValues.get(i).getSingleValue();
            if (aValue instanceof StringValue) {
              TextEntryAlternative alternative=new TextEntryAlternative();
              alternative.setAlternative(((StringValue)aValue).stringValue());
              alternatives.add(alternative);
            }
          }
          textEntry.setAlternatives(alternatives);
        }
      }
      Mapping mapping=responseDeclaration.getMapping();
      if (mapping != null) {
        boolean caseSensitive=true;
        List<TextEntryAlternative> alternatives=new ArrayList<>();
        if (mapping != null) {
          List<MapEntry> mapEntries=mapping.getMapEntries();
          for (          MapEntry mapEntry : mapEntries) {
            TextEntryAlternative alternative=new TextEntryAlternative();
            SingleValue sValue=mapEntry.getMapKey();
            if (sValue instanceof StringValue) {
              String alt=((StringValue)sValue).stringValue();
              if (solution == null || !solution.equals(alt)) {
                alternative.setAlternative(alt);
                alternative.setScore(mapEntry.getMappedValue());
                alternatives.add(alternative);
                mappedScore+=mapEntry.getMappedValue();
              }
            }
            caseSensitive&=mapEntry.getCaseSensitive();
          }
        }
        textEntry.setCaseSensitive(caseSensitive);
        textEntry.setAlternatives(alternatives);
      }
    }
  }
  boolean hasMapping=mappedScore > (-1.0 * responseIdentifierToTextEntry.size());
  scoreEvaluation=hasMapping ? ScoreEvaluation.perAnswer : ScoreEvaluation.allCorrectAnswers;
}","private void extractTextEntrySettingsFromResponseDeclaration(){
  double mappedScore=0.0d;
  for (  Map.Entry<String,TextEntry> textEntryEntry : responseIdentifierToTextEntry.entrySet()) {
    TextEntry textEntry=textEntryEntry.getValue();
    ResponseDeclaration responseDeclaration=assessmentItem.getResponseDeclaration(textEntry.getResponseIdentifier());
    if (responseDeclaration != null) {
      String solution=null;
      CorrectResponse correctResponse=responseDeclaration.getCorrectResponse();
      if (correctResponse != null && correctResponse.getFieldValues().size() > 0) {
        List<FieldValue> fValues=correctResponse.getFieldValues();
        SingleValue sValue=fValues.get(0).getSingleValue();
        if (sValue instanceof StringValue) {
          solution=((StringValue)sValue).stringValue();
          textEntry.setSolution(solution);
        }
        if (correctResponse.getFieldValues().size() > 1) {
          List<TextEntryAlternative> alternatives=new ArrayList<>();
          for (int i=1; i < correctResponse.getFieldValues().size(); i++) {
            SingleValue aValue=fValues.get(i).getSingleValue();
            if (aValue instanceof StringValue) {
              TextEntryAlternative alternative=new TextEntryAlternative();
              alternative.setAlternative(((StringValue)aValue).stringValue());
              alternatives.add(alternative);
            }
          }
          textEntry.setAlternatives(alternatives);
        }
      }
      Mapping mapping=responseDeclaration.getMapping();
      if (mapping != null) {
        boolean caseSensitive=true;
        List<TextEntryAlternative> alternatives=new ArrayList<>();
        if (mapping != null) {
          List<MapEntry> mapEntries=mapping.getMapEntries();
          for (          MapEntry mapEntry : mapEntries) {
            TextEntryAlternative alternative=new TextEntryAlternative();
            SingleValue sValue=mapEntry.getMapKey();
            if (sValue instanceof StringValue) {
              String alt=((StringValue)sValue).stringValue();
              if (solution == null || !solution.equals(alt)) {
                alternative.setAlternative(alt);
                alternative.setScore(mapEntry.getMappedValue());
                alternatives.add(alternative);
                mappedScore+=mapEntry.getMappedValue();
              }
 else               if (alt.equals(solution)) {
                textEntry.setScore(mapEntry.getMappedValue());
              }
            }
            caseSensitive&=mapEntry.getCaseSensitive();
          }
        }
        textEntry.setCaseSensitive(caseSensitive);
        textEntry.setAlternatives(alternatives);
      }
    }
  }
  boolean hasMapping=mappedScore > (-1.0 * responseIdentifierToTextEntry.size());
  scoreEvaluation=hasMapping ? ScoreEvaluation.perAnswer : ScoreEvaluation.allCorrectAnswers;
}"
69460,"/** 
 * Lookup non-webdav, non-REST UserSession for identity key.
 * @param identityKey
 * @return user-session or null when no session was founded. 
 */
private UserSession getUserSessionForGui(Long identityKey){
  UserSession identitySession=null;
  if (identityKey != null) {
    identitySession=authUserSessions.stream().filter(userSession -> {
      Identity identity=userSession.getIdentity();
      if (identity != null && identityKey.equals(identity.getKey()) && userSession.getSessionInfo() != null && !userSession.getSessionInfo().isWebDAV() && !userSession.getSessionInfo().isREST()) {
        return true;
      }
      return false;
    }
).findFirst().get();
  }
  return identitySession;
}","/** 
 * Lookup non-webdav, non-REST UserSession for identity key.
 * @param identityKey
 * @return user-session or null when no session was founded. 
 */
private UserSession getUserSessionForGui(Long identityKey){
  UserSession identitySession=null;
  if (identityKey != null) {
    Optional<UserSession> optionalSession=authUserSessions.stream().filter(userSession -> {
      Identity identity=userSession.getIdentity();
      if (identity != null && identityKey.equals(identity.getKey()) && userSession.getSessionInfo() != null && !userSession.getSessionInfo().isWebDAV() && !userSession.getSessionInfo().isREST()) {
        return true;
      }
      return false;
    }
).findFirst();
    identitySession=optionalSession.isPresent() ? optionalSession.get() : null;
  }
  return identitySession;
}"
69461,"/** 
 * prior to calling this method, all instance vars must be set.
 */
public void signOn(UserSession usess){
  boolean isDebug=log.isDebug();
synchronized (usess) {
    if (isDebug)     log.debug(""String_Node_Str"");
    if (usess.isAuthenticated()) {
      throw new AssertException(""String_Node_Str"");
    }
    IdentityEnvironment identityEnvironment=usess.getIdentityEnvironment();
    Identity identity=identityEnvironment.getIdentity();
    if (identity == null) {
      throw new AssertException(""String_Node_Str"");
    }
    SessionInfo sessionInfo=usess.getSessionInfo();
    if (sessionInfo == null) {
      throw new AssertException(""String_Node_Str"" + identity);
    }
    usess.setAuthenticated(true);
    if (sessionInfo.isWebDAV()) {
      usess.reloadPreferences();
      authUserSessions.add(usess);
      log.audit(""String_Node_Str"" + sessionInfo.toString());
    }
 else {
      UserSession invalidatedSession=null;
      if (isDebug) {
        log.debug(""String_Node_Str"" + identity.getName() + ""String_Node_Str""+ authUsersNamesOtherNodes.contains(identity.getKey()));
      }
      if ((userNameToIdentity.contains(identity.getKey()) || userSessionCache.containsKey(identity.getKey())) && !sessionInfo.isWebDAV() && !sessionInfo.isREST()&& !usess.getRoles().isGuestOnly()) {
        log.info(""String_Node_Str"");
        invalidatedSession=getUserSessionForGui(identity.getKey());
        authUserSessions.remove(invalidatedSession);
      }
      authUserSessions.add(usess);
      if (isDebug)       log.debug(""String_Node_Str"" + identity.getName().toLowerCase());
      userNameToIdentity.add(identity.getKey());
      userSessionCache.put(identity.getKey(),new Integer(Settings.getNodeId()));
      usess.reloadPreferences();
      log.audit(""String_Node_Str"" + sessionInfo.toString());
      CoordinatorManager.getInstance().getCoordinator().getEventBus().fireEventToListenersOf(new SignOnOffEvent(identity,true),ORES_USERSESSION);
      if (invalidatedSession != null || authUsersNamesOtherNodes.contains(identity.getKey())) {
        usess.putEntry(STORE_KEY_KILLED_EXISTING_SESSION,Boolean.TRUE);
        if (isDebug)         log.debug(""String_Node_Str"" + identity.getName());
        authUsersNamesOtherNodes.remove(identity.getKey());
        if (invalidatedSession != null) {
          signOffAndClear(invalidatedSession);
        }
      }
      if (isDebug)       log.debug(""String_Node_Str"");
    }
    if (sessionInfo.isREST()) {
      sessionCountRest.incrementAndGet();
    }
 else     if (sessionInfo.isWebDAV()) {
      sessionCountDav.incrementAndGet();
    }
 else {
      sessionCountWeb.incrementAndGet();
    }
  }
}","/** 
 * prior to calling this method, all instance vars must be set.
 */
public void signOn(UserSession usess){
  boolean isDebug=log.isDebug();
synchronized (usess) {
    if (isDebug)     log.debug(""String_Node_Str"");
    if (usess.isAuthenticated()) {
      throw new AssertException(""String_Node_Str"");
    }
    IdentityEnvironment identityEnvironment=usess.getIdentityEnvironment();
    Identity identity=identityEnvironment.getIdentity();
    if (identity == null) {
      throw new AssertException(""String_Node_Str"");
    }
    SessionInfo sessionInfo=usess.getSessionInfo();
    if (sessionInfo == null) {
      throw new AssertException(""String_Node_Str"" + identity);
    }
    usess.setAuthenticated(true);
    if (sessionInfo.isWebDAV()) {
      usess.reloadPreferences();
      authUserSessions.add(usess);
      log.audit(""String_Node_Str"" + sessionInfo.toString());
    }
 else {
      UserSession invalidatedSession=null;
      if (isDebug) {
        log.debug(""String_Node_Str"" + identity.getName() + ""String_Node_Str""+ authUsersNamesOtherNodes.contains(identity.getKey()));
      }
      if ((userNameToIdentity.contains(identity.getKey()) || userSessionCache.containsKey(identity.getKey())) && !sessionInfo.isWebDAV() && !sessionInfo.isREST()&& !usess.getRoles().isGuestOnly()) {
        log.info(""String_Node_Str"");
        invalidatedSession=getUserSessionForGui(identity.getKey());
        if (invalidatedSession != null) {
          authUserSessions.remove(invalidatedSession);
        }
      }
      authUserSessions.add(usess);
      if (isDebug)       log.debug(""String_Node_Str"" + identity.getName().toLowerCase());
      userNameToIdentity.add(identity.getKey());
      userSessionCache.put(identity.getKey(),new Integer(Settings.getNodeId()));
      usess.reloadPreferences();
      log.audit(""String_Node_Str"" + sessionInfo.toString());
      CoordinatorManager.getInstance().getCoordinator().getEventBus().fireEventToListenersOf(new SignOnOffEvent(identity,true),ORES_USERSESSION);
      if (invalidatedSession != null || authUsersNamesOtherNodes.contains(identity.getKey())) {
        usess.putEntry(STORE_KEY_KILLED_EXISTING_SESSION,Boolean.TRUE);
        if (isDebug)         log.debug(""String_Node_Str"" + identity.getName());
        authUsersNamesOtherNodes.remove(identity.getKey());
        if (invalidatedSession != null) {
          signOffAndClear(invalidatedSession);
        }
      }
      if (isDebug)       log.debug(""String_Node_Str"");
    }
    if (sessionInfo.isREST()) {
      sessionCountRest.incrementAndGet();
    }
 else     if (sessionInfo.isWebDAV()) {
      sessionCountDav.incrementAndGet();
    }
 else {
      sessionCountWeb.incrementAndGet();
    }
  }
}"
69462,"/** 
 * called from signOffAndClear() called from event -> MUEvent the real work to do during sign off but without sending the multiuserevent this is used in case the user logs in to node1 and was logged in on node2 =>  node2 catches the sign on event and invalidates the user on node2 ""silently"", e.g. without firing an event.
 */
private void signOffAndClearWithout(final UserSession usess){
  boolean isDebug=log.isDebug();
  if (isDebug)   log.debug(""String_Node_Str"");
  final IdentityEnvironment identityEnvironment=usess.getIdentityEnvironment();
  final SessionInfo sessionInfo=usess.getSessionInfo();
  final Identity ident=identityEnvironment.getIdentity();
  if (isDebug)   log.debug(""String_Node_Str"" + sessionInfo);
  if (usess.isAuthenticated() && usess.getLastHistoryPoint() != null && !usess.getRoles().isGuestOnly()) {
    historyManager.persistHistoryPoint(ident,usess.getLastHistoryPoint());
  }
  Runnable run=new Runnable(){
    @Override public void run(){
      Object obj=null;
      try {
        if (ident != null) {
          ThreadLocalUserActivityLogger.log(OlatLoggingAction.OLAT_LOGOUT,UserSession.class,CoreLoggingResourceable.wrap(ident));
        }
 else {
        }
        List<Object> storeList=usess.getStoreValues();
        for (Iterator<Object> it_storevals=storeList.iterator(); it_storevals.hasNext(); ) {
          obj=it_storevals.next();
          if (obj instanceof Disposable) {
            ((Disposable)obj).dispose();
          }
        }
      }
 catch (      Exception e) {
        String objtostr=""String_Node_Str"";
        try {
          objtostr=obj.toString();
        }
 catch (        Exception ee) {
        }
        log.error(""String_Node_Str"" + objtostr,e);
      }
    }
  }
;
  ThreadLocalUserActivityLoggerInstaller.runWithUserActivityLogger(run,UserActivityLoggerImpl.newLoggerForValueUnbound(usess));
  if (authUserSessions.remove(usess)) {
    Identity previousSignedOn=identityEnvironment.getIdentity();
    if (previousSignedOn != null) {
      if (isDebug)       log.debug(""String_Node_Str"" + previousSignedOn.getName().toLowerCase());
      userNameToIdentity.remove(previousSignedOn.getKey());
      userSessionCache.remove(previousSignedOn.getKey());
    }
  }
 else   if (isDebug) {
    log.info(""String_Node_Str"" + ident + ""String_Node_Str"");
  }
  if (sessionInfo != null) {
    if (sessionInfo.isREST()) {
      sessionCountRest.decrementAndGet();
    }
 else     if (sessionInfo.isWebDAV()) {
      sessionCountDav.decrementAndGet();
    }
 else {
      sessionCountWeb.decrementAndGet();
    }
  }
  if (isDebug)   log.debug(""String_Node_Str"");
}","/** 
 * called from signOffAndClear() called from event -> MUEvent the real work to do during sign off but without sending the multiuserevent this is used in case the user logs in to node1 and was logged in on node2 =>  node2 catches the sign on event and invalidates the user on node2 ""silently"", e.g. without firing an event.
 */
private void signOffAndClearWithout(final UserSession usess){
  boolean isDebug=log.isDebug();
  if (isDebug)   log.debug(""String_Node_Str"");
  final IdentityEnvironment identityEnvironment=usess.getIdentityEnvironment();
  final SessionInfo sessionInfo=usess.getSessionInfo();
  final Identity ident=identityEnvironment.getIdentity();
  if (isDebug)   log.debug(""String_Node_Str"" + sessionInfo);
  if (usess.isAuthenticated() && usess.getLastHistoryPoint() != null && !usess.getRoles().isGuestOnly()) {
    historyManager.persistHistoryPoint(ident,usess.getLastHistoryPoint());
  }
  Runnable run=new Runnable(){
    @Override public void run(){
      Object obj=null;
      try {
        if (ident != null) {
          ThreadLocalUserActivityLogger.log(OlatLoggingAction.OLAT_LOGOUT,UserSession.class,CoreLoggingResourceable.wrap(ident));
        }
 else {
        }
        List<Object> storeList=usess.getStoreValues();
        for (Iterator<Object> it_storevals=storeList.iterator(); it_storevals.hasNext(); ) {
          obj=it_storevals.next();
          if (obj instanceof Disposable) {
            ((Disposable)obj).dispose();
          }
        }
      }
 catch (      Exception e) {
        String objtostr=""String_Node_Str"";
        try {
          objtostr=obj.toString();
        }
 catch (        Exception ee) {
        }
        log.error(""String_Node_Str"" + objtostr,e);
      }
    }
  }
;
  ThreadLocalUserActivityLoggerInstaller.runWithUserActivityLogger(run,UserActivityLoggerImpl.newLoggerForValueUnbound(usess));
  if (authUserSessions.remove(usess)) {
    Identity previousSignedOn=identityEnvironment.getIdentity();
    if (previousSignedOn != null && previousSignedOn.getKey() != null) {
      if (isDebug)       log.debug(""String_Node_Str"" + previousSignedOn.getName().toLowerCase());
      userNameToIdentity.remove(previousSignedOn.getKey());
      userSessionCache.remove(previousSignedOn.getKey());
    }
  }
 else   if (isDebug) {
    log.info(""String_Node_Str"" + ident + ""String_Node_Str"");
  }
  if (sessionInfo != null) {
    if (sessionInfo.isREST()) {
      sessionCountRest.decrementAndGet();
    }
 else     if (sessionInfo.isWebDAV()) {
      sessionCountDav.decrementAndGet();
    }
 else {
      sessionCountWeb.decrementAndGet();
    }
  }
  if (isDebug)   log.debug(""String_Node_Str"");
}"
69463,"/** 
 * only for SignOffEvents - Usersession keeps book about usernames - WindowManager responsible to dispose controller chain
 * @see org.olat.core.util.event.GenericEventListener#event(org.olat.core.gui.control.Event)
 */
public void event(Event event){
  if (event instanceof SignOnOffEvent) {
    SignOnOffEvent se=(SignOnOffEvent)event;
    processSignOnOffEvent(se);
  }
}","/** 
 * only for SignOffEvents - Usersession keeps book about usernames - WindowManager responsible to dispose controller chain
 * @see org.olat.core.util.event.GenericEventListener#event(org.olat.core.gui.control.Event)
 */
@Override public void event(Event event){
  if (event instanceof SignOnOffEvent) {
    SignOnOffEvent se=(SignOnOffEvent)event;
    processSignOnOffEvent(se);
  }
}"
69464,"public DisposedCourseRestartController(UserRequest ureq,WindowControl wControl,RepositoryEntry courseRepositoryEntry){
  super(ureq,wControl);
  initialContent=createVelocityContainer(""String_Node_Str"");
  restartLink=LinkFactory.createButton(""String_Node_Str"",initialContent,this);
  this.courseRepositoryEntry=courseRepositoryEntry;
  panel=putInitialPanel(initialContent);
}","public DisposedCourseRestartController(UserRequest ureq,WindowControl wControl,RepositoryEntry courseRepositoryEntry){
  super(ureq,wControl);
  initialContent=createVelocityContainer(""String_Node_Str"");
  restartLink=LinkFactory.createButton(""String_Node_Str"",initialContent,this);
  restartLink.setElementCssClass(""String_Node_Str"");
  this.courseRepositoryEntry=courseRepositoryEntry;
  panel=putInitialPanel(initialContent);
}"
69465,"/** 
 * An author create a course, publish it and add a participant. It set the certificate, create one for the participant.<br> The participant logs in and look at its wonderful certificate. 
 * @param authorLoginPage
 * @param reiBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void certificatesManuallyGenerated(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver reiBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,reiBrowser);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  UserVO rei=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  CoursePageFragment courseRuntime=CoursePageFragment.getCourse(browser).edit().createNode(""String_Node_Str"").autoPublish();
  MembersPage members=courseRuntime.members();
  members.addMember().searchMember(rei,true).next().next().next().finish();
  courseRuntime=members.clickToolbarBack().efficiencyStatementConfiguration().clickToolbarBack().efficiencyStatementConfiguration().enableCertificates(false).enableRecertification().save().clickToolbarBack();
  courseRuntime.assessmentTool().users().selectUser(rei).generateCertificate();
  LoginPage reiLoginPage=LoginPage.getLoginPage(reiBrowser,deploymentUrl);
  reiLoginPage.loginAs(rei.getLogin(),rei.getPassword()).resume();
  UserToolsPage reiUserTools=new UserToolsPage(reiBrowser);
  reiUserTools.openUserToolsMenu().openMyEfficiencyStatement().assertOnEfficiencyStatmentPage().assertOnCertificate(courseTitle);
}","/** 
 * An author create a course, publish it and add a participant. It set the certificate, create one for the participant.<br> The participant logs in and look at its wonderful certificate. 
 * @param authorLoginPage
 * @param reiBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void certificatesManuallyGenerated(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver reiBrowser) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  UserVO rei=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  CoursePageFragment courseRuntime=CoursePageFragment.getCourse(browser).edit().createNode(""String_Node_Str"").autoPublish();
  MembersPage members=courseRuntime.members();
  members.addMember().searchMember(rei,true).next().next().next().finish();
  courseRuntime=members.clickToolbarBack().efficiencyStatementConfiguration().clickToolbarBack().efficiencyStatementConfiguration().enableCertificates(false).enableRecertification().save().clickToolbarBack();
  courseRuntime.assessmentTool().users().selectUser(rei).generateCertificate();
  LoginPage reiLoginPage=LoginPage.getLoginPage(reiBrowser,deploymentUrl);
  reiLoginPage.loginAs(rei.getLogin(),rei.getPassword()).resume();
  UserToolsPage reiUserTools=new UserToolsPage(reiBrowser);
  reiUserTools.openUserToolsMenu().openMyEfficiencyStatement().assertOnEfficiencyStatmentPage().assertOnCertificate(courseTitle);
}"
69466,"/** 
 * Create an assessment course element, add two users to the course and assesses them with the bulk assessment tool. The 2 users log in and check their results.
 * @param loginPage
 * @param kanuBrowser
 * @param reiBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void bulkAssessment(@InitialPage LoginPage loginPage,@Drone @User WebDriver ryomouBrowser,@Drone @Participant WebDriver kanuBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,ryomouBrowser,kanuBrowser);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  loginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String assessmentNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit().createNode(""String_Node_Str"").nodeTitle(assessmentNodeTitle);
  AssessmentCEConfigurationPage assessmentConfig=new AssessmentCEConfigurationPage(browser);
  assessmentConfig.selectConfiguration().setScoreAuto(0.1f,10.0f,5.0f);
  courseEditor.selectRoot().selectTabScore().enableRootScoreByNodes().autoPublish().accessConfiguration().setUserAccess(UserAccess.registred);
  CoursePageFragment courseRuntime=courseEditor.clickToolbarBack();
  MembersPage members=courseRuntime.members();
  members.importMembers().setMembers(ryomou,kanu).next().next().next().finish();
  BulkAssessmentData[] data=new BulkAssessmentData[]{new BulkAssessmentData(ryomou,8.0f,null,""String_Node_Str""),new BulkAssessmentData(kanu,4.0f,null,""String_Node_Str"")};
  members.clickToolbarBack().assessmentTool().bulk().data(data).next().next().next().finish();
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou).resume();
  NavigationPage ryomouNavBar=new NavigationPage(ryomouBrowser);
  ryomouNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment ryomouCourse=new CoursePageFragment(ryomouBrowser);
  ryomouCourse.clickTree().selectWithTitle(assessmentNodeTitle);
  LoginPage kanuLoginPage=LoginPage.getLoginPage(kanuBrowser,deploymentUrl);
  kanuLoginPage.loginAs(kanu).resume();
  NavigationPage kanuNavBar=new NavigationPage(kanuBrowser);
  kanuNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment kanuCourse=new CoursePageFragment(kanuBrowser);
  kanuCourse.clickTree().selectWithTitle(assessmentNodeTitle);
  WebElement passedEl=ryomouBrowser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertTrue(passedEl.isDisplayed());
  WebElement failedEl=kanuBrowser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertTrue(failedEl.isDisplayed());
}","/** 
 * Create an assessment course element, add two users to the course and assesses them with the bulk assessment tool. The 2 users log in and check their results.
 * @param loginPage
 * @param kanuBrowser
 * @param reiBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void bulkAssessment(@InitialPage LoginPage loginPage,@Drone @User WebDriver ryomouBrowser,@Drone @Participant WebDriver kanuBrowser) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  loginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String assessmentNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit().createNode(""String_Node_Str"").nodeTitle(assessmentNodeTitle);
  AssessmentCEConfigurationPage assessmentConfig=new AssessmentCEConfigurationPage(browser);
  assessmentConfig.selectConfiguration().setScoreAuto(0.1f,10.0f,5.0f);
  courseEditor.selectRoot().selectTabScore().enableRootScoreByNodes().autoPublish().accessConfiguration().setUserAccess(UserAccess.registred);
  CoursePageFragment courseRuntime=courseEditor.clickToolbarBack();
  MembersPage members=courseRuntime.members();
  members.importMembers().setMembers(ryomou,kanu).next().next().next().finish();
  BulkAssessmentData[] data=new BulkAssessmentData[]{new BulkAssessmentData(ryomou,8.0f,null,""String_Node_Str""),new BulkAssessmentData(kanu,4.0f,null,""String_Node_Str"")};
  members.clickToolbarBack().assessmentTool().bulk().data(data).next().next().next().finish();
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou).resume();
  NavigationPage ryomouNavBar=new NavigationPage(ryomouBrowser);
  ryomouNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment ryomouCourse=new CoursePageFragment(ryomouBrowser);
  ryomouCourse.clickTree().selectWithTitle(assessmentNodeTitle);
  LoginPage kanuLoginPage=LoginPage.getLoginPage(kanuBrowser,deploymentUrl);
  kanuLoginPage.loginAs(kanu).resume();
  NavigationPage kanuNavBar=new NavigationPage(kanuBrowser);
  kanuNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment kanuCourse=new CoursePageFragment(kanuBrowser);
  kanuCourse.clickTree().selectWithTitle(assessmentNodeTitle);
  WebElement passedEl=ryomouBrowser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertTrue(passedEl.isDisplayed());
  WebElement failedEl=kanuBrowser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertTrue(failedEl.isDisplayed());
}"
69467,"/** 
 * An author create a course, set up the root node to make efficiency statement, add a test, publish it and add a participant. It set the certificate.<br> The participant logs in, make the test and look at its wonderful certificate and the details of its performance.
 * @param authorLoginPage
 * @param reiBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void certificatesGeneratedByTest(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver reiBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,reiBrowser);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO rei=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  URL testUrl=ArquillianDeployments.class.getResource(""String_Node_Str"");
  String testTitle=""String_Node_Str"" + UUID.randomUUID();
  new RepositoryRestClient(deploymentUrl,author).deployResource(new File(testUrl.toURI()),""String_Node_Str"",testTitle);
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String testNodeTitle=""String_Node_Str"";
  CoursePageFragment courseRuntime=CoursePageFragment.getCourse(browser);
  courseRuntime.edit().createNode(""String_Node_Str"").nodeTitle(testNodeTitle).selectTabLearnContent().chooseTest(testTitle).selectRoot().selectTabScore().enableRootScoreByNodes().autoPublish().accessConfiguration().setUserAccess(UserAccess.registred).clickToolbarBack();
  MembersPage members=courseRuntime.members();
  members.addMember().searchMember(rei,true).next().next().next().finish();
  courseRuntime=members.clickToolbarBack().efficiencyStatementConfiguration().enableCertificates(true).enableRecertification().save().clickToolbarBack();
  LoginPage reiLoginPage=LoginPage.getLoginPage(reiBrowser,deploymentUrl);
  reiLoginPage.loginAs(rei.getLogin(),rei.getPassword()).resume();
  NavigationPage reiNavBar=new NavigationPage(reiBrowser);
  reiNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment reiTestCourse=new CoursePageFragment(reiBrowser);
  reiTestCourse.clickTree().selectWithTitle(testNodeTitle);
  QTI12Page.getQTI12Page(reiBrowser).passE4(rei);
  UserToolsPage reiUserTools=new UserToolsPage(reiBrowser);
  reiUserTools.openUserToolsMenu().openMyEfficiencyStatement().assertOnEfficiencyStatmentPage().assertOnCertificateAndStatements(courseTitle).selectStatement(courseTitle).selectStatementSegment().assertOnCourseDetails(testNodeTitle,true);
}","/** 
 * An author create a course, set up the root node to make efficiency statement, add a test, publish it and add a participant. It set the certificate.<br> The participant logs in, make the test and look at its wonderful certificate and the details of its performance.
 * @param authorLoginPage
 * @param reiBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void certificatesGeneratedByTest(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver reiBrowser) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO rei=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  URL testUrl=ArquillianDeployments.class.getResource(""String_Node_Str"");
  String testTitle=""String_Node_Str"" + UUID.randomUUID();
  new RepositoryRestClient(deploymentUrl,author).deployResource(new File(testUrl.toURI()),""String_Node_Str"",testTitle);
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String testNodeTitle=""String_Node_Str"";
  CoursePageFragment courseRuntime=CoursePageFragment.getCourse(browser);
  courseRuntime.edit().createNode(""String_Node_Str"").nodeTitle(testNodeTitle).selectTabLearnContent().chooseTest(testTitle).selectRoot().selectTabScore().enableRootScoreByNodes().autoPublish().accessConfiguration().setUserAccess(UserAccess.registred).clickToolbarBack();
  MembersPage members=courseRuntime.members();
  members.addMember().searchMember(rei,true).next().next().next().finish();
  courseRuntime=members.clickToolbarBack().efficiencyStatementConfiguration().enableCertificates(true).enableRecertification().save().clickToolbarBack();
  LoginPage reiLoginPage=LoginPage.getLoginPage(reiBrowser,deploymentUrl);
  reiLoginPage.loginAs(rei.getLogin(),rei.getPassword()).resume();
  NavigationPage reiNavBar=new NavigationPage(reiBrowser);
  reiNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment reiTestCourse=new CoursePageFragment(reiBrowser);
  reiTestCourse.clickTree().selectWithTitle(testNodeTitle);
  QTI12Page.getQTI12Page(reiBrowser).passE4(rei);
  UserToolsPage reiUserTools=new UserToolsPage(reiBrowser);
  reiUserTools.openUserToolsMenu().openMyEfficiencyStatement().assertOnEfficiencyStatmentPage().assertOnCertificateAndStatements(courseTitle).selectStatement(courseTitle).selectStatementSegment().assertOnCourseDetails(testNodeTitle,true);
}"
69468,"/** 
 * An author upload a SCORM resource, create a course and use the SCORM within. It publish the course, add a participant to the course. The participant log in, select the course above, run the SCORM and finish it.<br> At the end, the author go to the assessment tool and chec that the participant has successfully passed the test.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void scormCourseWithAssessment(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,ryomouBrowser);
  Assume.assumeTrue(browser instanceof FirefoxDriver);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  String scormTitle=""String_Node_Str"" + UUID.randomUUID();
  URL scormUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File scormFile=new File(scormUrl.toURI());
  navBar.openAuthoringEnvironment().uploadResource(scormTitle,scormFile);
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String scormNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(scormNodeTitle).selectTabLearnContent().chooseScorm(scormTitle);
  courseEditor.autoPublish().accessConfiguration().setUserAccess(UserAccess.registred).clickToolbarBack();
  CoursePageFragment courseRuntime=new CoursePageFragment(browser);
  courseRuntime.members().addMember().searchMember(ryomou,true).next().next().next().finish();
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou.getLogin(),ryomou.getPassword()).resume();
  NavigationPage ryomouNavBar=new NavigationPage(ryomouBrowser);
  ryomouNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment ryomouCourse=new CoursePageFragment(ryomouBrowser);
  ryomouCourse.clickTree().selectWithTitle(scormNodeTitle);
  By scormH2By=By.cssSelector(""String_Node_Str"");
  WebElement scormH2=ryomouBrowser.findElement(scormH2By);
  Assert.assertEquals(scormNodeTitle,scormH2.getText().trim());
  ScormPage scorm=ScormPage.getScormPage(ryomouBrowser);
  scorm.start().passVerySimpleScorm().back();
  WebElement scormH2Back=ryomouBrowser.findElement(scormH2By);
  Assert.assertEquals(scormNodeTitle,scormH2Back.getText().trim());
  UserToolsPage roymouUserTools=new UserToolsPage(ryomouBrowser);
  roymouUserTools.logout();
  navBar.openMyCourses().select(courseTitle);
  AssessmentToolPage assessmentTool=new CoursePageFragment(browser).assessmentTool();
  assessmentTool.users().assertOnUsers(ryomou).selectUser(ryomou).assertPassed(ryomou);
}","/** 
 * An author upload a SCORM resource, create a course and use the SCORM within. It publish the course, add a participant to the course. The participant log in, select the course above, run the SCORM and finish it.<br> At the end, the author go to the assessment tool and chec that the participant has successfully passed the test.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void scormCourseWithAssessment(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser) throws IOException, URISyntaxException {
  Assume.assumeTrue(browser instanceof FirefoxDriver);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  String scormTitle=""String_Node_Str"" + UUID.randomUUID();
  URL scormUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File scormFile=new File(scormUrl.toURI());
  navBar.openAuthoringEnvironment().uploadResource(scormTitle,scormFile);
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String scormNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(scormNodeTitle).selectTabLearnContent().chooseScorm(scormTitle);
  courseEditor.autoPublish().accessConfiguration().setUserAccess(UserAccess.registred).clickToolbarBack();
  CoursePageFragment courseRuntime=new CoursePageFragment(browser);
  courseRuntime.members().addMember().searchMember(ryomou,true).next().next().next().finish();
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou.getLogin(),ryomou.getPassword()).resume();
  NavigationPage ryomouNavBar=new NavigationPage(ryomouBrowser);
  ryomouNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment ryomouCourse=new CoursePageFragment(ryomouBrowser);
  ryomouCourse.clickTree().selectWithTitle(scormNodeTitle);
  By scormH2By=By.cssSelector(""String_Node_Str"");
  WebElement scormH2=ryomouBrowser.findElement(scormH2By);
  Assert.assertEquals(scormNodeTitle,scormH2.getText().trim());
  ScormPage scorm=ScormPage.getScormPage(ryomouBrowser);
  scorm.start().passVerySimpleScorm().back();
  WebElement scormH2Back=ryomouBrowser.findElement(scormH2By);
  Assert.assertEquals(scormNodeTitle,scormH2Back.getText().trim());
  UserToolsPage roymouUserTools=new UserToolsPage(ryomouBrowser);
  roymouUserTools.logout();
  navBar.openMyCourses().select(courseTitle);
  AssessmentToolPage assessmentTool=new CoursePageFragment(browser).assessmentTool();
  assessmentTool.users().assertOnUsers(ryomou).selectUser(ryomou).assertPassed(ryomou);
}"
69469,"/** 
 * An author upload a test, create a course with a test course element, publish the course and do and pass the test.
 * @param authorLoginPage
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void qti12Test(@InitialPage LoginPage authorLoginPage) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser);
  Assume.assumeTrue(browser instanceof FirefoxDriver);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String qtiTestTitle=""String_Node_Str"" + UUID.randomUUID();
  URL qtiTestUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File qtiTestFile=new File(qtiTestUrl.toURI());
  navBar.openAuthoringEnvironment().uploadResource(qtiTestTitle,qtiTestFile);
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String testNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(testNodeTitle).selectTabLearnContent().chooseTest(qtiTestTitle);
  courseEditor.publish().quickPublish();
  courseEditor.clickToolbarBack().clickTree().selectWithTitle(testNodeTitle);
  WebElement testH2=browser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertEquals(testNodeTitle,testH2.getText().trim());
  QTI12Page testPage=QTI12Page.getQTI12Page(browser);
  testPage.start().selectItem(0).answerSingleChoice(0).saveAnswer().selectItem(1).answerMultipleChoice(0,2).saveAnswer().selectItem(2).answerKPrim(true,false,true,false).saveAnswer().selectItem(3).answerFillin(""String_Node_Str"").saveAnswer();
  testPage.endTest();
  By resultsBy=By.id(""String_Node_Str"");
  OOGraphene.waitElement(resultsBy,browser);
  WebElement resultsEl=browser.findElement(resultsBy);
  Assert.assertTrue(resultsEl.getText().contains(author.getFirstName()));
  testPage.closeTest();
  WebElement passedEl=browser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertTrue(passedEl.isDisplayed());
}","/** 
 * An author upload a test, create a course with a test course element, publish the course and do and pass the test.
 * @param authorLoginPage
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void qti12Test(@InitialPage LoginPage authorLoginPage) throws IOException, URISyntaxException {
  Assume.assumeTrue(browser instanceof FirefoxDriver);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String qtiTestTitle=""String_Node_Str"" + UUID.randomUUID();
  URL qtiTestUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File qtiTestFile=new File(qtiTestUrl.toURI());
  navBar.openAuthoringEnvironment().uploadResource(qtiTestTitle,qtiTestFile);
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String testNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(testNodeTitle).selectTabLearnContent().chooseTest(qtiTestTitle);
  courseEditor.publish().quickPublish();
  courseEditor.clickToolbarBack().clickTree().selectWithTitle(testNodeTitle);
  WebElement testH2=browser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertEquals(testNodeTitle,testH2.getText().trim());
  QTI12Page testPage=QTI12Page.getQTI12Page(browser);
  testPage.start().selectItem(0).answerSingleChoice(0).saveAnswer().selectItem(1).answerMultipleChoice(0,2).saveAnswer().selectItem(2).answerKPrim(true,false,true,false).saveAnswer().selectItem(3).answerFillin(""String_Node_Str"").saveAnswer();
  testPage.endTest();
  By resultsBy=By.id(""String_Node_Str"");
  OOGraphene.waitElement(resultsBy,browser);
  WebElement resultsEl=browser.findElement(resultsBy);
  Assert.assertTrue(resultsEl.getText().contains(author.getFirstName()));
  testPage.closeTest();
  WebElement passedEl=browser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertTrue(passedEl.isDisplayed());
}"
69470,"/** 
 * An author create a course with an assessment course element with min., max., cut value and so on. It add an user to the course, go to the assessment tool and set a score to the assessed user.<br> The user log in, go to the efficiency statements list and check it become its statement.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void assessmentCourseElement(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,ryomouBrowser);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String assessmentNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit().createNode(""String_Node_Str"").nodeTitle(assessmentNodeTitle);
  AssessmentCEConfigurationPage assessmentConfig=new AssessmentCEConfigurationPage(browser);
  assessmentConfig.selectConfiguration().setScoreAuto(0.1f,10.0f,5.0f);
  courseEditor.selectRoot().selectTabScore().enableRootScoreByNodes().autoPublish().accessConfiguration().setUserAccess(UserAccess.registred);
  CoursePageFragment courseRuntime=courseEditor.clickToolbarBack();
  MembersPage members=courseRuntime.members();
  members.addMember().searchMember(ryomou,true).next().next().next().finish();
  members.clickToolbarBack().assessmentTool().users().assertOnUsers(ryomou).selectUser(ryomou).selectCourseNode(assessmentNodeTitle).setAssessmentScore(8.0f).assertUserPassedCourseNode(assessmentNodeTitle);
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou.getLogin(),ryomou.getPassword()).resume();
  UserToolsPage ryomouUserTools=new UserToolsPage(ryomouBrowser);
  ryomouUserTools.openUserToolsMenu().openMyEfficiencyStatement().assertOnEfficiencyStatmentPage().assertOnStatement(courseTitle,true).selectStatement(courseTitle).assertOnCourseDetails(assessmentNodeTitle,true);
}","/** 
 * An author create a course with an assessment course element with min., max., cut value and so on. It add an user to the course, go to the assessment tool and set a score to the assessed user.<br> The user log in, go to the efficiency statements list and check it become its statement.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void assessmentCourseElement(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String assessmentNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit().createNode(""String_Node_Str"").nodeTitle(assessmentNodeTitle);
  AssessmentCEConfigurationPage assessmentConfig=new AssessmentCEConfigurationPage(browser);
  assessmentConfig.selectConfiguration().setScoreAuto(0.1f,10.0f,5.0f);
  courseEditor.selectRoot().selectTabScore().enableRootScoreByNodes().autoPublish().accessConfiguration().setUserAccess(UserAccess.registred);
  CoursePageFragment courseRuntime=courseEditor.clickToolbarBack();
  MembersPage members=courseRuntime.members();
  members.addMember().searchMember(ryomou,true).next().next().next().finish();
  members.clickToolbarBack().assessmentTool().users().assertOnUsers(ryomou).selectUser(ryomou).selectCourseNode(assessmentNodeTitle).setAssessmentScore(8.0f).assertUserPassedCourseNode(assessmentNodeTitle);
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou.getLogin(),ryomou.getPassword()).resume();
  UserToolsPage ryomouUserTools=new UserToolsPage(ryomouBrowser);
  ryomouUserTools.openUserToolsMenu().openMyEfficiencyStatement().assertOnEfficiencyStatmentPage().assertOnStatement(courseTitle,true).selectStatement(courseTitle).assertOnCourseDetails(assessmentNodeTitle,true);
}"
69471,"/** 
 * An author upload a test, create a course with a test course element, publish the course, add 2 students (Ryomou and Kanu) to the course, configure an assessment.<br /> A first student log in before the assessment is started by the author, the second log-in after the begin of the assessment. Both pass the test. The Author ends the assessment. The two students wait the end of the assessment and go back to normal activities. The author checks the students pass the test in the assessment tool.
 * @param authorLoginPage
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void assessmentMode_manual(@InitialPage LoginPage authorLoginPage,@Drone @Student WebDriver ryomouBrowser,@Drone @Participant WebDriver kanuBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,ryomouBrowser,kanuBrowser);
  Assume.assumeTrue(browser instanceof FirefoxDriver);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  String qtiTestTitle=""String_Node_Str"" + UUID.randomUUID();
  URL qtiTestUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File qtiTestFile=new File(qtiTestUrl.toURI());
  navBar.openAuthoringEnvironment().uploadResource(qtiTestTitle,qtiTestFile);
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String testNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(testNodeTitle).selectTabLearnContent().chooseTest(qtiTestTitle);
  courseEditor.publish().quickPublish();
  CoursePageFragment courseRuntime=courseEditor.clickToolbarBack();
  courseRuntime.clickTree().selectWithTitle(testNodeTitle);
  OOGraphene.closeBlueMessageWindow(browser);
  WebElement testH2=browser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertEquals(testNodeTitle,testH2.getText().trim());
  courseRuntime.members().quickAdd(ryomou);
  courseRuntime.members().quickAdd(kanu);
  LoginPage kanuLoginPage=LoginPage.getLoginPage(kanuBrowser,deploymentUrl);
  kanuLoginPage.loginAs(kanu.getLogin(),kanu.getPassword()).resume();
  Calendar cal=Calendar.getInstance();
  Date begin=cal.getTime();
  cal.add(Calendar.MINUTE,5);
  Date end=cal.getTime();
  String assessmentName=""String_Node_Str"" + UUID.randomUUID();
  courseRuntime.assessmentConfiguration().createAssessmentMode().editAssessment(assessmentName,begin,end,true).save().start(assessmentName).confirmStart();
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou.getLogin(),ryomou.getPassword());
  AssessmentModePage ryomouAssessment=new AssessmentModePage(ryomouBrowser).startAssessment(false);
  CoursePageFragment ryomouTestCourse=new CoursePageFragment(ryomouBrowser);
  ryomouTestCourse.clickTree().selectWithTitle(testNodeTitle);
  QTI12Page.getQTI12Page(ryomouBrowser).passE4(ryomou);
  AssessmentModePage kanuAssessment=new AssessmentModePage(kanuBrowser).startAssessment(true);
  CoursePageFragment kanuTestCourse=new CoursePageFragment(kanuBrowser);
  kanuTestCourse.clickTree().selectWithTitle(testNodeTitle);
  QTI12Page.getQTI12Page(kanuBrowser).passE4(kanu);
  courseRuntime.assessmentConfiguration().stop(assessmentName).confirmStop();
  By continueBy=By.className(""String_Node_Str"");
  OOGraphene.waitElement(continueBy,10,ryomouBrowser);
  OOGraphene.waitElement(continueBy,10,kanuBrowser);
  kanuAssessment.backToOpenOLAT();
  ryomouAssessment.backToOpenOLAT();
  navBar.openMyCourses().select(courseTitle);
  AssessmentToolPage assessmentTool=new CoursePageFragment(browser).assessmentTool();
  assessmentTool.users().assertOnUsers(ryomou).assertOnUsers(kanu).selectUser(ryomou).assertPassed(ryomou);
}","/** 
 * An author upload a test, create a course with a test course element, publish the course, add 2 students (Ryomou and Kanu) to the course, configure an assessment.<br /> A first student log in before the assessment is started by the author, the second log-in after the begin of the assessment. Both pass the test. The Author ends the assessment. The two students wait the end of the assessment and go back to normal activities. The author checks the students pass the test in the assessment tool.
 * @param authorLoginPage
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void assessmentMode_manual(@InitialPage LoginPage authorLoginPage,@Drone @Student WebDriver ryomouBrowser,@Drone @Participant WebDriver kanuBrowser) throws IOException, URISyntaxException {
  Assume.assumeTrue(browser instanceof FirefoxDriver);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  String qtiTestTitle=""String_Node_Str"" + UUID.randomUUID();
  URL qtiTestUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File qtiTestFile=new File(qtiTestUrl.toURI());
  navBar.openAuthoringEnvironment().uploadResource(qtiTestTitle,qtiTestFile);
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String testNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(testNodeTitle).selectTabLearnContent().chooseTest(qtiTestTitle);
  courseEditor.publish().quickPublish();
  CoursePageFragment courseRuntime=courseEditor.clickToolbarBack();
  courseRuntime.clickTree().selectWithTitle(testNodeTitle);
  OOGraphene.closeBlueMessageWindow(browser);
  WebElement testH2=browser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertEquals(testNodeTitle,testH2.getText().trim());
  courseRuntime.members().quickAdd(ryomou);
  courseRuntime.members().quickAdd(kanu);
  LoginPage kanuLoginPage=LoginPage.getLoginPage(kanuBrowser,deploymentUrl);
  kanuLoginPage.loginAs(kanu.getLogin(),kanu.getPassword()).resume();
  Calendar cal=Calendar.getInstance();
  Date begin=cal.getTime();
  cal.add(Calendar.MINUTE,5);
  Date end=cal.getTime();
  String assessmentName=""String_Node_Str"" + UUID.randomUUID();
  courseRuntime.assessmentConfiguration().createAssessmentMode().editAssessment(assessmentName,begin,end,true).save().start(assessmentName).confirmStart();
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou.getLogin(),ryomou.getPassword());
  AssessmentModePage ryomouAssessment=new AssessmentModePage(ryomouBrowser).startAssessment(false);
  CoursePageFragment ryomouTestCourse=new CoursePageFragment(ryomouBrowser);
  ryomouTestCourse.clickTree().selectWithTitle(testNodeTitle);
  QTI12Page.getQTI12Page(ryomouBrowser).passE4(ryomou);
  AssessmentModePage kanuAssessment=new AssessmentModePage(kanuBrowser).startAssessment(true);
  CoursePageFragment kanuTestCourse=new CoursePageFragment(kanuBrowser);
  kanuTestCourse.clickTree().selectWithTitle(testNodeTitle);
  QTI12Page.getQTI12Page(kanuBrowser).passE4(kanu);
  courseRuntime.assessmentConfiguration().stop(assessmentName).confirmStop();
  By continueBy=By.className(""String_Node_Str"");
  OOGraphene.waitElement(continueBy,10,ryomouBrowser);
  OOGraphene.waitElement(continueBy,10,kanuBrowser);
  kanuAssessment.backToOpenOLAT();
  ryomouAssessment.backToOpenOLAT();
  navBar.openMyCourses().select(courseTitle);
  AssessmentToolPage assessmentTool=new CoursePageFragment(browser).assessmentTool();
  assessmentTool.users().assertOnUsers(ryomou).assertOnUsers(kanu).selectUser(ryomou).assertPassed(ryomou);
}"
69472,"/** 
 * An author upload a test, create a course with a test course element, publish the course, assign the course to a student. The student come to pass the test, logout after passing it. The author check if the test of the student is passed in the assessment tool.
 * @param authorLoginPage
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void qti12CourseWithAssessment(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser);
  Assume.assumeTrue(browser instanceof FirefoxDriver);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  String qtiTestTitle=""String_Node_Str"" + UUID.randomUUID();
  URL qtiTestUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File qtiTestFile=new File(qtiTestUrl.toURI());
  navBar.openAuthoringEnvironment().uploadResource(qtiTestTitle,qtiTestFile);
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String testNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(testNodeTitle).selectTabLearnContent().chooseTest(qtiTestTitle);
  courseEditor.publish().quickPublish(Access.membersOnly);
  CoursePageFragment courseRuntime=courseEditor.clickToolbarBack();
  courseRuntime.clickTree().selectWithTitle(testNodeTitle);
  WebElement testH2=browser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertEquals(testNodeTitle,testH2.getText().trim());
  courseRuntime.members().addMember().searchMember(ryomou,true).next().next().next().finish();
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou.getLogin(),ryomou.getPassword()).resume();
  NavigationPage ryomouNavBar=new NavigationPage(ryomouBrowser);
  ryomouNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment ryomouTestCourse=new CoursePageFragment(ryomouBrowser);
  ryomouTestCourse.clickTree().selectWithTitle(testNodeTitle);
  QTI12Page testPage=QTI12Page.getQTI12Page(ryomouBrowser);
  testPage.start().selectItem(0).answerSingleChoice(0).saveAnswer().selectItem(1).answerMultipleChoice(0,2).saveAnswer().selectItem(2).answerKPrim(true,false,true,false).saveAnswer().selectItem(3).answerFillin(""String_Node_Str"").saveAnswer();
  testPage.endTest();
  By resultsBy=By.id(""String_Node_Str"");
  OOGraphene.waitElement(resultsBy,ryomouBrowser);
  WebElement resultsEl=ryomouBrowser.findElement(resultsBy);
  Assert.assertTrue(resultsEl.getText().contains(ryomou.getFirstName()));
  testPage.closeTest();
  WebElement passedEl=ryomouBrowser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertTrue(passedEl.isDisplayed());
  UserToolsPage roymouUserTools=new UserToolsPage(ryomouBrowser);
  roymouUserTools.logout();
  navBar.openMyCourses().select(courseTitle);
  AssessmentToolPage assessmentTool=new CoursePageFragment(browser).assessmentTool();
  assessmentTool.users().assertOnUsers(ryomou).selectUser(ryomou).assertPassed(ryomou);
}","/** 
 * An author upload a test, create a course with a test course element, publish the course, assign the course to a student. The student come to pass the test, logout after passing it. The author check if the test of the student is passed in the assessment tool.
 * @param authorLoginPage
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void qti12CourseWithAssessment(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser) throws IOException, URISyntaxException {
  Assume.assumeTrue(browser instanceof FirefoxDriver);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  String qtiTestTitle=""String_Node_Str"" + UUID.randomUUID();
  URL qtiTestUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File qtiTestFile=new File(qtiTestUrl.toURI());
  navBar.openAuthoringEnvironment().uploadResource(qtiTestTitle,qtiTestFile);
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String testNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(testNodeTitle).selectTabLearnContent().chooseTest(qtiTestTitle);
  courseEditor.publish().quickPublish(Access.membersOnly);
  CoursePageFragment courseRuntime=courseEditor.clickToolbarBack();
  courseRuntime.clickTree().selectWithTitle(testNodeTitle);
  WebElement testH2=browser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertEquals(testNodeTitle,testH2.getText().trim());
  courseRuntime.members().addMember().searchMember(ryomou,true).next().next().next().finish();
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou.getLogin(),ryomou.getPassword()).resume();
  NavigationPage ryomouNavBar=new NavigationPage(ryomouBrowser);
  ryomouNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment ryomouTestCourse=new CoursePageFragment(ryomouBrowser);
  ryomouTestCourse.clickTree().selectWithTitle(testNodeTitle);
  QTI12Page testPage=QTI12Page.getQTI12Page(ryomouBrowser);
  testPage.start().selectItem(0).answerSingleChoice(0).saveAnswer().selectItem(1).answerMultipleChoice(0,2).saveAnswer().selectItem(2).answerKPrim(true,false,true,false).saveAnswer().selectItem(3).answerFillin(""String_Node_Str"").saveAnswer();
  testPage.endTest();
  By resultsBy=By.id(""String_Node_Str"");
  OOGraphene.waitElement(resultsBy,ryomouBrowser);
  WebElement resultsEl=ryomouBrowser.findElement(resultsBy);
  Assert.assertTrue(resultsEl.getText().contains(ryomou.getFirstName()));
  testPage.closeTest();
  WebElement passedEl=ryomouBrowser.findElement(By.cssSelector(""String_Node_Str""));
  Assert.assertTrue(passedEl.isDisplayed());
  UserToolsPage roymouUserTools=new UserToolsPage(ryomouBrowser);
  roymouUserTools.logout();
  navBar.openMyCourses().select(courseTitle);
  AssessmentToolPage assessmentTool=new CoursePageFragment(browser).assessmentTool();
  assessmentTool.users().assertOnUsers(ryomou).selectUser(ryomou).assertPassed(ryomou);
}"
69473,"/** 
 * An author create a course for a group task with the default settings, all steps are selected, grading with only passed, 3 groups, 2 tasks, 1 solution...</br> A group has 2 participants, the first select a task, the second submit 2 documents, one with the embedded editor, one with the upload mechanism.</br> The author reviews the documents, use the assessment tool for group within the course element to set passed to the group.</br> The 2 participants check if they sucessfully passed the task.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @param kanuBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void taskWithGroupsAndStandardSettings(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser,@Drone @Participant WebDriver kanuBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,ryomouBrowser,kanuBrowser);
  Assume.assumeTrue(browser instanceof FirefoxDriver);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String gtaNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(gtaNodeTitle);
  GroupTaskConfigurationPage gtaConfig=new GroupTaskConfigurationPage(browser);
  gtaConfig.selectWorkflow().openBusinessGroupChooser().createBusinessGroup(""String_Node_Str"").createBusinessGroup(""String_Node_Str"").createBusinessGroup(""String_Node_Str"").confirmBusinessGroupsSelection().saveWorkflow().selectAssignment();
  URL task1Url=JunitTestHelper.class.getResource(""String_Node_Str"");
  File task1File=new File(task1Url.toURI());
  gtaConfig.uploadTask(""String_Node_Str"",task1File);
  URL task2Url=JunitTestHelper.class.getResource(""String_Node_Str"");
  File task2File=new File(task2Url.toURI());
  gtaConfig.uploadTask(""String_Node_Str"",task2File).saveTasks().selectSolution();
  URL solutionUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File solutionFile=new File(solutionUrl.toURI());
  gtaConfig.uploadSolution(""String_Node_Str"",solutionFile);
  courseEditor.publish().quickPublish(Access.guests);
  MembersPage membersPage=courseEditor.clickToolbarBack().members();
  GroupPage groupPage=membersPage.selectBusinessGroups().selectBusinessGroup(""String_Node_Str"").openAdministration().openAdminMembers();
  groupPage.addMember().searchMember(kanu,true).next().next().next().finish();
  groupPage.addMember().searchMember(ryomou,true).next().next().next().finish();
  groupPage.close();
  CoursePageFragment coursePage=membersPage.clickToolbarBack();
  coursePage.clickTree().selectWithTitle(gtaNodeTitle);
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou).resume();
  NavigationPage ryomouNavBar=new NavigationPage(ryomouBrowser);
  ryomouNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment ryomouTestCourse=new CoursePageFragment(ryomouBrowser);
  ryomouTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  GroupTaskPage ryomouTask=new GroupTaskPage(ryomouBrowser);
  ryomouTask.assertAssignmentAvailable().selectTask(1).assertSubmissionAvailable();
  LoginPage kanuLoginPage=LoginPage.getLoginPage(kanuBrowser,deploymentUrl);
  kanuLoginPage.loginAs(kanu).resume();
  NavigationPage kanuNavBar=new NavigationPage(kanuBrowser);
  kanuNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment kanuTestCourse=new CoursePageFragment(kanuBrowser);
  kanuTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  URL submit1Url=JunitTestHelper.class.getResource(""String_Node_Str"");
  File submit1File=new File(submit1Url.toURI());
  String submittedFilename=""String_Node_Str"";
  String submittedText=""String_Node_Str"";
  GroupTaskPage kanuTask=new GroupTaskPage(kanuBrowser);
  kanuTask.assertTask(""String_Node_Str"").assertSubmissionAvailable().submitFile(submit1File).submitText(submittedFilename,submittedText).submitDocuments();
  coursePage.clickTree().selectWithTitle(gtaNodeTitle);
  GroupTaskToCoachPage groupToCoach=new GroupTaskToCoachPage(browser);
  groupToCoach.selectBusinessGroupToCoach(""String_Node_Str"").assertSubmittedDocument(""String_Node_Str"").assertSubmittedDocument(""String_Node_Str"").reviewed().openGroupAssessment().groupAssessment(Boolean.TRUE,null);
  kanuTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  kanuTask.assertPassed();
  ryomouTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  ryomouTask.assertPassed();
}","/** 
 * An author create a course for a group task with the default settings, all steps are selected, grading with only passed, 3 groups, 2 tasks, 1 solution...</br> A group has 2 participants, the first select a task, the second submit 2 documents, one with the embedded editor, one with the upload mechanism.</br> The author reviews the documents, use the assessment tool for group within the course element to set passed to the group.</br> The 2 participants check if they sucessfully passed the task.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @param kanuBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void taskWithGroupsAndStandardSettings(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser,@Drone @Participant WebDriver kanuBrowser) throws IOException, URISyntaxException {
  Assume.assumeTrue(browser instanceof FirefoxDriver);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String gtaNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(gtaNodeTitle);
  GroupTaskConfigurationPage gtaConfig=new GroupTaskConfigurationPage(browser);
  gtaConfig.selectWorkflow().openBusinessGroupChooser().createBusinessGroup(""String_Node_Str"").createBusinessGroup(""String_Node_Str"").createBusinessGroup(""String_Node_Str"").confirmBusinessGroupsSelection().saveWorkflow().selectAssignment();
  URL task1Url=JunitTestHelper.class.getResource(""String_Node_Str"");
  File task1File=new File(task1Url.toURI());
  gtaConfig.uploadTask(""String_Node_Str"",task1File);
  URL task2Url=JunitTestHelper.class.getResource(""String_Node_Str"");
  File task2File=new File(task2Url.toURI());
  gtaConfig.uploadTask(""String_Node_Str"",task2File).saveTasks().selectSolution();
  URL solutionUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File solutionFile=new File(solutionUrl.toURI());
  gtaConfig.uploadSolution(""String_Node_Str"",solutionFile);
  courseEditor.publish().quickPublish(Access.guests);
  MembersPage membersPage=courseEditor.clickToolbarBack().members();
  GroupPage groupPage=membersPage.selectBusinessGroups().selectBusinessGroup(""String_Node_Str"").openAdministration().openAdminMembers();
  groupPage.addMember().searchMember(kanu,true).next().next().next().finish();
  groupPage.addMember().searchMember(ryomou,true).next().next().next().finish();
  groupPage.close();
  CoursePageFragment coursePage=membersPage.clickToolbarBack();
  coursePage.clickTree().selectWithTitle(gtaNodeTitle);
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou).resume();
  NavigationPage ryomouNavBar=new NavigationPage(ryomouBrowser);
  ryomouNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment ryomouTestCourse=new CoursePageFragment(ryomouBrowser);
  ryomouTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  GroupTaskPage ryomouTask=new GroupTaskPage(ryomouBrowser);
  ryomouTask.assertAssignmentAvailable().selectTask(1).assertSubmissionAvailable();
  LoginPage kanuLoginPage=LoginPage.getLoginPage(kanuBrowser,deploymentUrl);
  kanuLoginPage.loginAs(kanu).resume();
  NavigationPage kanuNavBar=new NavigationPage(kanuBrowser);
  kanuNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment kanuTestCourse=new CoursePageFragment(kanuBrowser);
  kanuTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  URL submit1Url=JunitTestHelper.class.getResource(""String_Node_Str"");
  File submit1File=new File(submit1Url.toURI());
  String submittedFilename=""String_Node_Str"";
  String submittedText=""String_Node_Str"";
  GroupTaskPage kanuTask=new GroupTaskPage(kanuBrowser);
  kanuTask.assertTask(""String_Node_Str"").assertSubmissionAvailable().submitFile(submit1File).submitText(submittedFilename,submittedText).submitDocuments();
  coursePage.clickTree().selectWithTitle(gtaNodeTitle);
  GroupTaskToCoachPage groupToCoach=new GroupTaskToCoachPage(browser);
  groupToCoach.selectBusinessGroupToCoach(""String_Node_Str"").assertSubmittedDocument(""String_Node_Str"").assertSubmittedDocument(""String_Node_Str"").reviewed().openGroupAssessment().groupAssessment(Boolean.TRUE,null);
  kanuTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  kanuTask.assertPassed();
  ryomouTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  ryomouTask.assertPassed();
}"
69474,"/** 
 * An author create a course for a task with the some custom settings, all steps are selected, grading with score and passed automatically calculated, 2 tasks, 1 solution...</br> It had 2 participants. One of them goes through the workflow, selects a task, submits 2 documents, one with the embedded editor, one with the upload mechanism.</br> The author reviews the documents, uploads a correction and want a revision.</br> The assessed participant upload a revised document.</br> The author sees it and close the revisions process, use the assessment tool to set the score.</br> The participant checks if she successfully passed the task.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void taskWithIndividuScoreAndRevision(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,ryomouBrowser);
  Assume.assumeTrue(browser instanceof FirefoxDriver);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String gtaNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(gtaNodeTitle);
  GroupTaskConfigurationPage gtaConfig=new GroupTaskConfigurationPage(browser);
  gtaConfig.selectAssignment();
  URL task1Url=JunitTestHelper.class.getResource(""String_Node_Str"");
  File task1File=new File(task1Url.toURI());
  gtaConfig.uploadTask(""String_Node_Str"",task1File);
  URL task2Url=JunitTestHelper.class.getResource(""String_Node_Str"");
  File task2File=new File(task2Url.toURI());
  gtaConfig.uploadTask(""String_Node_Str"",task2File).saveTasks().selectSolution();
  URL solutionUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File solutionFile=new File(solutionUrl.toURI());
  gtaConfig.uploadSolution(""String_Node_Str"",solutionFile);
  gtaConfig.selectAssessment().setAssessmentOptions(0.0f,6.0f,4.0f).saveAssessmentOptions();
  courseEditor.publish().quickPublish(Access.membersOnly);
  MembersPage membersPage=courseEditor.clickToolbarBack().members();
  membersPage.importMembers().setMembers(kanu,ryomou).next().next().next().finish();
  CoursePageFragment coursePage=membersPage.clickToolbarBack();
  coursePage.clickTree().selectWithTitle(gtaNodeTitle);
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou).resume();
  NavigationPage ryomouNavBar=new NavigationPage(ryomouBrowser);
  ryomouNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment ryomouTestCourse=new CoursePageFragment(ryomouBrowser);
  ryomouTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  GroupTaskPage ryomouTask=new GroupTaskPage(ryomouBrowser);
  ryomouTask.assertAssignmentAvailable().selectTask(1).assertTask(""String_Node_Str"").assertSubmissionAvailable();
  URL submit1Url=JunitTestHelper.class.getResource(""String_Node_Str"");
  File submit1File=new File(submit1Url.toURI());
  String submittedFilename=""String_Node_Str"";
  String submittedText=""String_Node_Str"";
  ryomouTask.submitFile(submit1File).submitText(submittedFilename,submittedText).submitDocuments();
  coursePage.clickTree().selectWithTitle(gtaNodeTitle);
  GroupTaskToCoachPage participantToCoach=new GroupTaskToCoachPage(browser);
  URL correctionUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File correctionFile=new File(correctionUrl.toURI());
  participantToCoach.selectIdentityToCoach(ryomou).assertSubmittedDocument(""String_Node_Str"").assertSubmittedDocument(""String_Node_Str"").uploadCorrection(correctionFile).needRevision();
  URL revisionUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File revisionFile=new File(revisionUrl.toURI());
  ryomouTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  ryomouTask.submitRevisedFile(revisionFile).submitRevision();
  coursePage.clickTree().selectWithTitle(gtaNodeTitle);
  participantToCoach.selectIdentityToCoach(ryomou).assertRevision(""String_Node_Str"").closeRevisions().openIndividualAssessment().individualAssessment(null,5.5f).assertPassed();
  ryomouTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  ryomouTask.assertPassed();
}","/** 
 * An author create a course for a task with the some custom settings, all steps are selected, grading with score and passed automatically calculated, 2 tasks, 1 solution...</br> It had 2 participants. One of them goes through the workflow, selects a task, submits 2 documents, one with the embedded editor, one with the upload mechanism.</br> The author reviews the documents, uploads a correction and want a revision.</br> The assessed participant upload a revised document.</br> The author sees it and close the revisions process, use the assessment tool to set the score.</br> The participant checks if she successfully passed the task.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void taskWithIndividuScoreAndRevision(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser) throws IOException, URISyntaxException {
  Assume.assumeTrue(browser instanceof FirefoxDriver);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String gtaNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(gtaNodeTitle);
  GroupTaskConfigurationPage gtaConfig=new GroupTaskConfigurationPage(browser);
  gtaConfig.selectAssignment();
  URL task1Url=JunitTestHelper.class.getResource(""String_Node_Str"");
  File task1File=new File(task1Url.toURI());
  gtaConfig.uploadTask(""String_Node_Str"",task1File);
  URL task2Url=JunitTestHelper.class.getResource(""String_Node_Str"");
  File task2File=new File(task2Url.toURI());
  gtaConfig.uploadTask(""String_Node_Str"",task2File).saveTasks().selectSolution();
  URL solutionUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File solutionFile=new File(solutionUrl.toURI());
  gtaConfig.uploadSolution(""String_Node_Str"",solutionFile);
  gtaConfig.selectAssessment().setAssessmentOptions(0.0f,6.0f,4.0f).saveAssessmentOptions();
  courseEditor.publish().quickPublish(Access.membersOnly);
  MembersPage membersPage=courseEditor.clickToolbarBack().members();
  membersPage.importMembers().setMembers(kanu,ryomou).next().next().next().finish();
  CoursePageFragment coursePage=membersPage.clickToolbarBack();
  coursePage.clickTree().selectWithTitle(gtaNodeTitle);
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou).resume();
  NavigationPage ryomouNavBar=new NavigationPage(ryomouBrowser);
  ryomouNavBar.openMyCourses().select(courseTitle);
  CoursePageFragment ryomouTestCourse=new CoursePageFragment(ryomouBrowser);
  ryomouTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  GroupTaskPage ryomouTask=new GroupTaskPage(ryomouBrowser);
  ryomouTask.assertAssignmentAvailable().selectTask(1).assertTask(""String_Node_Str"").assertSubmissionAvailable();
  URL submit1Url=JunitTestHelper.class.getResource(""String_Node_Str"");
  File submit1File=new File(submit1Url.toURI());
  String submittedFilename=""String_Node_Str"";
  String submittedText=""String_Node_Str"";
  ryomouTask.submitFile(submit1File).submitText(submittedFilename,submittedText).submitDocuments();
  coursePage.clickTree().selectWithTitle(gtaNodeTitle);
  GroupTaskToCoachPage participantToCoach=new GroupTaskToCoachPage(browser);
  URL correctionUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File correctionFile=new File(correctionUrl.toURI());
  participantToCoach.selectIdentityToCoach(ryomou).assertSubmittedDocument(""String_Node_Str"").assertSubmittedDocument(""String_Node_Str"").uploadCorrection(correctionFile).needRevision();
  URL revisionUrl=JunitTestHelper.class.getResource(""String_Node_Str"");
  File revisionFile=new File(revisionUrl.toURI());
  ryomouTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  ryomouTask.submitRevisedFile(revisionFile).submitRevision();
  coursePage.clickTree().selectWithTitle(gtaNodeTitle);
  participantToCoach.selectIdentityToCoach(ryomou).assertRevision(""String_Node_Str"").closeRevisions().openIndividualAssessment().individualAssessment(null,5.5f).assertPassed();
  ryomouTestCourse.clickTree().selectWithTitle(gtaNodeTitle);
  ryomouTask.assertPassed();
}"
69475,"/** 
 * Variant from the above test where the business group is not limited in size. This was a bug while development of the 10.3 release.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @param reiBrowser
 * @param kanuBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void enrollmentWithUnlimitedBusinessGroups(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser,@Drone @Participant WebDriver reiBrowser,@Drone @Student WebDriver kanuBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,ryomouBrowser,reiBrowser,kanuBrowser);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO rei=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  CoursePageFragment authorCourse=CoursePageFragment.getCourse(browser);
  MembersPage membersPage=authorCourse.members().selectBusinessGroups().createBusinessGroup(groupName,""String_Node_Str"",-1,false,false);
  navBar.openCourse(courseTitle);
  authorCourse=membersPage.clickToolbarBack();
  String enNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=authorCourse.edit().createNode(""String_Node_Str"").nodeTitle(enNodeTitle);
  EnrollmentConfigurationPage enrolmentConfig=new EnrollmentConfigurationPage(browser);
  enrolmentConfig.selectConfiguration().selectBusinessGroups();
  courseEditor.publish().quickPublish(Access.users);
  GroupPage authorGroup=navBar.openGroups(browser).selectGroup(groupName).openAdministration().openAdminMembers().setVisibility(false,true,false).openMembers().assertParticipantList();
  Enrollment[] participantDrivers=new Enrollment[]{new Enrollment(ryomou,ryomouBrowser),new Enrollment(rei,reiBrowser),new Enrollment(kanu,kanuBrowser)};
  for (  Enrollment enrollment : participantDrivers) {
    WebDriver driver=enrollment.getDriver();
    LoginPage.getLoginPage(driver,deploymentUrl).loginAs(enrollment.getUser()).resume();
    NavigationPage participantNavBar=new NavigationPage(driver);
    participantNavBar.openMyCourses().openSearch().extendedSearch(courseTitle).select(courseTitle).start();
    CoursePageFragment participantCourse=new CoursePageFragment(driver);
    participantCourse.clickTree().selectWithTitle(enNodeTitle);
    EnrollmentPage enrollmentPage=new EnrollmentPage(driver);
    enrollmentPage.assertOnEnrolmentPage();
    enrollment.setEnrollmentPage(enrollmentPage);
  }
  for (  Enrollment enrollment : participantDrivers) {
    enrollment.getEnrollmentPage().enrollNoWait();
  }
  int errors=0;
  for (  Enrollment enrollment : participantDrivers) {
    if (enrollment.getEnrollmentPage().hasError()) {
      errors++;
    }
  }
  authorGroup.openMembers();
  int participants=0;
  for (  Enrollment enrollment : participantDrivers) {
    if (authorGroup.isInMembersParticipantList(enrollment.getUser())) {
      participants++;
    }
  }
  Assert.assertEquals(3,participants);
  Assert.assertEquals(0,errors);
}","/** 
 * Variant from the above test where the business group is not limited in size. This was a bug while development of the 10.3 release.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @param reiBrowser
 * @param kanuBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void enrollmentWithUnlimitedBusinessGroups(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser,@Drone @Participant WebDriver reiBrowser,@Drone @Student WebDriver kanuBrowser) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO rei=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  CoursePageFragment authorCourse=CoursePageFragment.getCourse(browser);
  MembersPage membersPage=authorCourse.members().selectBusinessGroups().createBusinessGroup(groupName,""String_Node_Str"",-1,false,false);
  navBar.openCourse(courseTitle);
  authorCourse=membersPage.clickToolbarBack();
  String enNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=authorCourse.edit().createNode(""String_Node_Str"").nodeTitle(enNodeTitle);
  EnrollmentConfigurationPage enrolmentConfig=new EnrollmentConfigurationPage(browser);
  enrolmentConfig.selectConfiguration().selectBusinessGroups();
  courseEditor.publish().quickPublish(Access.users);
  GroupPage authorGroup=navBar.openGroups(browser).selectGroup(groupName).openAdministration().openAdminMembers().setVisibility(false,true,false).openMembers().assertParticipantList();
  Enrollment[] participantDrivers=new Enrollment[]{new Enrollment(ryomou,ryomouBrowser),new Enrollment(rei,reiBrowser),new Enrollment(kanu,kanuBrowser)};
  for (  Enrollment enrollment : participantDrivers) {
    WebDriver driver=enrollment.getDriver();
    LoginPage.getLoginPage(driver,deploymentUrl).loginAs(enrollment.getUser()).resume();
    NavigationPage participantNavBar=new NavigationPage(driver);
    participantNavBar.openMyCourses().openSearch().extendedSearch(courseTitle).select(courseTitle).start();
    CoursePageFragment participantCourse=new CoursePageFragment(driver);
    participantCourse.clickTree().selectWithTitle(enNodeTitle);
    EnrollmentPage enrollmentPage=new EnrollmentPage(driver);
    enrollmentPage.assertOnEnrolmentPage();
    enrollment.setEnrollmentPage(enrollmentPage);
  }
  for (  Enrollment enrollment : participantDrivers) {
    enrollment.getEnrollmentPage().enrollNoWait();
  }
  int errors=0;
  for (  Enrollment enrollment : participantDrivers) {
    if (enrollment.getEnrollmentPage().hasError()) {
      errors++;
    }
  }
  authorGroup.openMembers();
  int participants=0;
  for (  Enrollment enrollment : participantDrivers) {
    if (authorGroup.isInMembersParticipantList(enrollment.getUser())) {
      participants++;
    }
  }
  Assert.assertEquals(3,participants);
  Assert.assertEquals(0,errors);
}"
69476,"/** 
 * An author create a group, set the visibility to true for owners and participants, enable the tools and add 2 users to it. The 2 users joins the chat. All three send some messages and read them.
 * @param loginPage
 * @param kanuBrowser
 * @param ryomouBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void groupChat(@InitialPage LoginPage loginPage,@Drone @Participant WebDriver kanuBrowser,@Drone @User WebDriver ryomouBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,kanuBrowser,ryomouBrowser);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  loginPage.loginAs(author.getLogin(),author.getPassword()).resume();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  GroupPage group=navBar.openGroups(browser).createGroup(groupName,""String_Node_Str"");
  group.openAdministration().openAdminTools().enableTools().openAdminMembers().setVisibility(true,true,false);
  group.openAdminMembers().addMember().searchMember(kanu,true).next().next().next().finish();
  group.addMember().searchMember(ryomou,true).next().next().next().finish();
  LoginPage kanuLoginPage=LoginPage.getLoginPage(kanuBrowser,deploymentUrl);
  kanuLoginPage.loginAs(kanu.getLogin(),kanu.getPassword()).resume();
  NavigationPage kanuNavBar=new NavigationPage(kanuBrowser);
  GroupPage kanuGroup=kanuNavBar.openGroups(kanuBrowser).selectGroup(groupName);
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou.getLogin(),ryomou.getPassword()).resume();
  NavigationPage ryomouNavBar=new NavigationPage(ryomouBrowser);
  IMPage ryomouIM=ryomouNavBar.openGroups(ryomouBrowser).selectGroup(groupName).openChat().openGroupChat();
  String msg1=""String_Node_Str"" + UUID.randomUUID();
  IMPage authorIM=group.openChat().openGroupChat().sendMessage(msg1).assertOnMessage(msg1);
  String msg2=""String_Node_Str"" + UUID.randomUUID();
  IMPage kanuIM=kanuGroup.openChat().openGroupChat().assertOnMessage(msg1).sendMessage(msg2);
  String msg3=""String_Node_Str"" + UUID.randomUUID();
  ryomouIM.sendMessage(msg3).assertOnMessage(msg1).assertOnMessage(msg2);
  kanuIM.assertOnMessage(msg3);
  authorIM.assertOnMessage(msg2).assertOnMessage(msg3);
}","/** 
 * An author create a group, set the visibility to true for owners and participants, enable the tools and add 2 users to it. The 2 users joins the chat. All three send some messages and read them.
 * @param loginPage
 * @param kanuBrowser
 * @param ryomouBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void groupChat(@InitialPage LoginPage loginPage,@Drone @Participant WebDriver kanuBrowser,@Drone @User WebDriver ryomouBrowser) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  loginPage.loginAs(author.getLogin(),author.getPassword()).resume();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  GroupPage group=navBar.openGroups(browser).createGroup(groupName,""String_Node_Str"");
  group.openAdministration().openAdminTools().enableTools().openAdminMembers().setVisibility(true,true,false);
  group.openAdminMembers().addMember().searchMember(kanu,true).next().next().next().finish();
  group.addMember().searchMember(ryomou,true).next().next().next().finish();
  LoginPage kanuLoginPage=LoginPage.getLoginPage(kanuBrowser,deploymentUrl);
  kanuLoginPage.loginAs(kanu.getLogin(),kanu.getPassword()).resume();
  NavigationPage kanuNavBar=new NavigationPage(kanuBrowser);
  GroupPage kanuGroup=kanuNavBar.openGroups(kanuBrowser).selectGroup(groupName);
  LoginPage ryomouLoginPage=LoginPage.getLoginPage(ryomouBrowser,deploymentUrl);
  ryomouLoginPage.loginAs(ryomou.getLogin(),ryomou.getPassword()).resume();
  NavigationPage ryomouNavBar=new NavigationPage(ryomouBrowser);
  IMPage ryomouIM=ryomouNavBar.openGroups(ryomouBrowser).selectGroup(groupName).openChat().openGroupChat();
  String msg1=""String_Node_Str"" + UUID.randomUUID();
  IMPage authorIM=group.openChat().openGroupChat().sendMessage(msg1).assertOnMessage(msg1);
  String msg2=""String_Node_Str"" + UUID.randomUUID();
  IMPage kanuIM=kanuGroup.openChat().openGroupChat().assertOnMessage(msg1).sendMessage(msg2);
  String msg3=""String_Node_Str"" + UUID.randomUUID();
  ryomouIM.sendMessage(msg3).assertOnMessage(msg1).assertOnMessage(msg2);
  kanuIM.assertOnMessage(msg3);
  authorIM.assertOnMessage(msg2).assertOnMessage(msg3);
}"
69477,"/** 
 * An author creates a group, it opens the tab groups and then ""My groups"". It creates a group, enters a number of participants ""1"", enable the waiting list. In members visibility, it see coaches, participants and waiting list visible to members.<br> A participant and than a student come, book the group. The first enters the group, the second the waiting list.<br> The author go in the members list to check if it's in the coach list, the participant in the participants list and the student in the waiting list. Should show group starting page, with menu items Administration and Bookings visible
 * @param loginPage
 * @param participantBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void createGroupWithWaitingList(@InitialPage LoginPage loginPage,@Drone @Participant WebDriver participantBrowser,@Drone @Student WebDriver studentBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,participantBrowser,studentBrowser);
  UserVO author=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO participant=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO student=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  loginPage.loginAs(author.getLogin(),author.getPassword()).resume();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  GroupPage group=navBar.openGroups(browser).createGroup(groupName,""String_Node_Str"").openAdministration().openEditDetails().setMaxNumberOfParticipants(1).setWaitingList().saveDetails();
  String token=""String_Node_Str"";
  String description=""String_Node_Str"";
  group.openBookingConfig().openAddDropMenu().addTokenMethod().configureTokenMethod(token,description).assertOnToken(token).save();
  group=GroupPage.getGroup(browser).openAdminMembers().setVisibility(true,true,true).openMembers();
  LoginPage participantLoginPage=LoginPage.getLoginPage(participantBrowser,deploymentUrl);
  participantLoginPage.loginAs(participant.getLogin(),participant.getPassword()).resume();
  NavigationPage participantNavBar=new NavigationPage(participantBrowser);
  participantNavBar.openGroups(participantBrowser).publishedGroups().bookGroup(groupName).bookToken(token);
  GroupPage.getGroup(participantBrowser).assertOnInfosPage(groupName);
  LoginPage studentLoginPage=LoginPage.getLoginPage(studentBrowser,deploymentUrl);
  studentLoginPage.loginAs(student.getLogin(),student.getPassword()).resume();
  NavigationPage studentNavBar=new NavigationPage(studentBrowser);
  studentNavBar.openGroups(studentBrowser).publishedGroups().bookGroup(groupName).bookToken(token);
  GroupPage.getGroup(studentBrowser).assertOnWaitingList(groupName);
  group=GroupPage.getGroup(browser).openMembers().assertMembersInOwnerList(author).assertMembersInParticipantList(participant).assertMembersInWaitingList(student);
}","/** 
 * An author creates a group, it opens the tab groups and then ""My groups"". It creates a group, enters a number of participants ""1"", enable the waiting list. In members visibility, it see coaches, participants and waiting list visible to members.<br> A participant and than a student come, book the group. The first enters the group, the second the waiting list.<br> The author go in the members list to check if it's in the coach list, the participant in the participants list and the student in the waiting list. Should show group starting page, with menu items Administration and Bookings visible
 * @param loginPage
 * @param participantBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void createGroupWithWaitingList(@InitialPage LoginPage loginPage,@Drone @Participant WebDriver participantBrowser,@Drone @Student WebDriver studentBrowser) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO participant=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO student=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  loginPage.loginAs(author.getLogin(),author.getPassword()).resume();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  GroupPage group=navBar.openGroups(browser).createGroup(groupName,""String_Node_Str"").openAdministration().openEditDetails().setMaxNumberOfParticipants(1).setWaitingList().saveDetails();
  String token=""String_Node_Str"";
  String description=""String_Node_Str"";
  group.openBookingConfig().openAddDropMenu().addTokenMethod().configureTokenMethod(token,description).assertOnToken(token).save();
  group=GroupPage.getGroup(browser).openAdminMembers().setVisibility(true,true,true).openMembers();
  LoginPage participantLoginPage=LoginPage.getLoginPage(participantBrowser,deploymentUrl);
  participantLoginPage.loginAs(participant.getLogin(),participant.getPassword()).resume();
  NavigationPage participantNavBar=new NavigationPage(participantBrowser);
  participantNavBar.openGroups(participantBrowser).publishedGroups().bookGroup(groupName).bookToken(token);
  GroupPage.getGroup(participantBrowser).assertOnInfosPage(groupName);
  LoginPage studentLoginPage=LoginPage.getLoginPage(studentBrowser,deploymentUrl);
  studentLoginPage.loginAs(student.getLogin(),student.getPassword()).resume();
  NavigationPage studentNavBar=new NavigationPage(studentBrowser);
  studentNavBar.openGroups(studentBrowser).publishedGroups().bookGroup(groupName).bookToken(token);
  GroupPage.getGroup(studentBrowser).assertOnWaitingList(groupName);
  group=GroupPage.getGroup(browser).openMembers().assertMembersInOwnerList(author).assertMembersInParticipantList(participant).assertMembersInWaitingList(student);
}"
69478,"/** 
 * Create a group, search it and delete it.
 * @param loginPage
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void createDeleteBusinessGroup(@InitialPage LoginPage loginPage) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  loginPage.loginAs(author.getLogin(),author.getPassword()).resume();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  navBar.openGroups(browser).createGroup(groupName,""String_Node_Str"");
  navBar.openGroups(browser).deleteGroup(groupName).assertDeleted(groupName);
}","/** 
 * Create a group, search it and delete it.
 * @param loginPage
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void createDeleteBusinessGroup(@InitialPage LoginPage loginPage) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  loginPage.loginAs(author.getLogin(),author.getPassword()).resume();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  navBar.openGroups(browser).createGroup(groupName,""String_Node_Str"");
  navBar.openGroups(browser).deleteGroup(groupName).assertDeleted(groupName);
}"
69479,"/** 
 * An author create a course and a business group in the members management. It has max. participants set to 1 and no waiting list. Than it returns in the course editor to create an enrollment course element. It configure it and select the group created before.<br> Three users goes to the course and try to enroll. One will become a participant, the 2 others get an error message.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @param reiBrowser
 * @param kanuBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void enrollment(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser,@Drone @Participant WebDriver reiBrowser,@Drone @Student WebDriver kanuBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,ryomouBrowser,reiBrowser,kanuBrowser);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO rei=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  CoursePageFragment authorCourse=CoursePageFragment.getCourse(browser);
  MembersPage membersPage=authorCourse.members().selectBusinessGroups().createBusinessGroup(groupName,""String_Node_Str"",1,false,false);
  navBar.openCourse(courseTitle);
  authorCourse=membersPage.clickToolbarBack();
  String enNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=authorCourse.edit().createNode(""String_Node_Str"").nodeTitle(enNodeTitle);
  EnrollmentConfigurationPage enrolmentConfig=new EnrollmentConfigurationPage(browser);
  enrolmentConfig.selectConfiguration().selectBusinessGroups();
  courseEditor.publish().quickPublish(Access.users);
  GroupPage authorGroup=navBar.openGroups(browser).selectGroup(groupName).openAdministration().openAdminMembers().setVisibility(false,true,false).openMembers().assertParticipantList();
  Enrollment[] participantDrivers=new Enrollment[]{new Enrollment(ryomou,ryomouBrowser),new Enrollment(rei,reiBrowser),new Enrollment(kanu,kanuBrowser)};
  for (  Enrollment enrollment : participantDrivers) {
    WebDriver driver=enrollment.getDriver();
    LoginPage.getLoginPage(driver,deploymentUrl).loginAs(enrollment.getUser()).resume();
    NavigationPage participantNavBar=new NavigationPage(driver);
    participantNavBar.openMyCourses().openSearch().extendedSearch(courseTitle).select(courseTitle).start();
    CoursePageFragment participantCourse=new CoursePageFragment(driver);
    participantCourse.clickTree().selectWithTitle(enNodeTitle);
    EnrollmentPage enrollmentPage=new EnrollmentPage(driver);
    enrollmentPage.assertOnEnrolmentPage();
    enrollment.setEnrollmentPage(enrollmentPage);
  }
  for (  Enrollment enrollment : participantDrivers) {
    enrollment.getEnrollmentPage().enrollNoWait();
  }
  for (  Enrollment enrollment : participantDrivers) {
    OOGraphene.waitBusy(enrollment.getDriver());
  }
  int errors=0;
  for (  Enrollment enrollment : participantDrivers) {
    if (enrollment.getEnrollmentPage().hasError()) {
      errors++;
    }
  }
  authorGroup.openMembers();
  int participants=0;
  for (  Enrollment enrollment : participantDrivers) {
    if (authorGroup.isInMembersParticipantList(enrollment.getUser())) {
      participants++;
    }
  }
  Assert.assertEquals(1,participants);
  Assert.assertEquals(participantDrivers.length - 1,errors);
}","/** 
 * An author create a course and a business group in the members management. It has max. participants set to 1 and no waiting list. Than it returns in the course editor to create an enrollment course element. It configure it and select the group created before.<br> Three users goes to the course and try to enroll. One will become a participant, the 2 others get an error message.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @param reiBrowser
 * @param kanuBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void enrollment(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser,@Drone @Participant WebDriver reiBrowser,@Drone @Student WebDriver kanuBrowser) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  UserVO rei=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  CoursePageFragment authorCourse=CoursePageFragment.getCourse(browser);
  MembersPage membersPage=authorCourse.members().selectBusinessGroups().createBusinessGroup(groupName,""String_Node_Str"",1,false,false);
  navBar.openCourse(courseTitle);
  authorCourse=membersPage.clickToolbarBack();
  String enNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=authorCourse.edit().createNode(""String_Node_Str"").nodeTitle(enNodeTitle);
  EnrollmentConfigurationPage enrolmentConfig=new EnrollmentConfigurationPage(browser);
  enrolmentConfig.selectConfiguration().selectBusinessGroups();
  courseEditor.publish().quickPublish(Access.users);
  GroupPage authorGroup=navBar.openGroups(browser).selectGroup(groupName).openAdministration().openAdminMembers().setVisibility(false,true,false).openMembers().assertParticipantList();
  Enrollment[] participantDrivers=new Enrollment[]{new Enrollment(ryomou,ryomouBrowser),new Enrollment(rei,reiBrowser),new Enrollment(kanu,kanuBrowser)};
  for (  Enrollment enrollment : participantDrivers) {
    WebDriver driver=enrollment.getDriver();
    LoginPage.getLoginPage(driver,deploymentUrl).loginAs(enrollment.getUser()).resume();
    NavigationPage participantNavBar=new NavigationPage(driver);
    participantNavBar.openMyCourses().openSearch().extendedSearch(courseTitle).select(courseTitle).start();
    CoursePageFragment participantCourse=new CoursePageFragment(driver);
    participantCourse.clickTree().selectWithTitle(enNodeTitle);
    EnrollmentPage enrollmentPage=new EnrollmentPage(driver);
    enrollmentPage.assertOnEnrolmentPage();
    enrollment.setEnrollmentPage(enrollmentPage);
  }
  for (  Enrollment enrollment : participantDrivers) {
    enrollment.getEnrollmentPage().enrollNoWait();
  }
  for (  Enrollment enrollment : participantDrivers) {
    OOGraphene.waitBusy(enrollment.getDriver());
  }
  int errors=0;
  for (  Enrollment enrollment : participantDrivers) {
    if (enrollment.getEnrollmentPage().hasError()) {
      errors++;
    }
  }
  authorGroup.openMembers();
  int participants=0;
  for (  Enrollment enrollment : participantDrivers) {
    if (authorGroup.isInMembersParticipantList(enrollment.getUser())) {
      participants++;
    }
  }
  Assert.assertEquals(1,participants);
  Assert.assertEquals(participantDrivers.length - 1,errors);
}"
69480,"/** 
 * An author create a course, with an enrollment course element. It configure it and create 3 groups and set the maximum enrollment counter to 2<br> One user goes to the course and enrolls in 2 of the groups. It shouldent be possible enroll in the third<br>
 * @param authorLoginPage
 * @param ryomouBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void enrollmentWithMultiEnrollment(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,ryomouBrowser);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String enNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(enNodeTitle);
  List<String> groups=new ArrayList<String>();
  groups.add(""String_Node_Str"" + UUID.randomUUID());
  groups.add(""String_Node_Str"" + UUID.randomUUID());
  groups.add(""String_Node_Str"" + UUID.randomUUID());
  EnrollmentConfigurationPage enrolmentConfig=new EnrollmentConfigurationPage(browser);
  enrolmentConfig.selectConfiguration().createBusinessGroup(groups.get(0),""String_Node_Str"",4,false,false).createBusinessGroup(groups.get(1),""String_Node_Str"",4,false,false).createBusinessGroup(groups.get(2),""String_Node_Str"",4,false,false).selectMultipleEnrollments(2);
  courseEditor.publish().quickPublish(Access.users);
  courseEditor.clickToolbarBack();
  for (  String groupName : groups) {
    navBar.openGroups(browser).selectGroup(groupName).openAdministration().openAdminMembers().setVisibility(true,true,false).openMembers();
  }
  LoginPage.getLoginPage(ryomouBrowser,deploymentUrl).loginAs(ryomou).resume();
  NavigationPage participantNavBar=new NavigationPage(ryomouBrowser);
  participantNavBar.openMyCourses().openSearch().extendedSearch(courseTitle).select(courseTitle).start();
  OOGraphene.waitBusy(ryomouBrowser);
  CoursePageFragment participantCourse=new CoursePageFragment(ryomouBrowser);
  participantCourse.clickTree().selectWithTitle(enNodeTitle);
  EnrollmentPage enrollmentPage=new EnrollmentPage(ryomouBrowser);
  enrollmentPage.assertOnEnrolmentPage().multiEnroll(2);
  enrollmentPage.assertNoEnrollmentAllowed();
}","/** 
 * An author create a course, with an enrollment course element. It configure it and create 3 groups and set the maximum enrollment counter to 2<br> One user goes to the course and enrolls in 2 of the groups. It shouldent be possible enroll in the third<br>
 * @param authorLoginPage
 * @param ryomouBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void enrollmentWithMultiEnrollment(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String enNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(enNodeTitle);
  List<String> groups=new ArrayList<String>();
  groups.add(""String_Node_Str"" + UUID.randomUUID());
  groups.add(""String_Node_Str"" + UUID.randomUUID());
  groups.add(""String_Node_Str"" + UUID.randomUUID());
  EnrollmentConfigurationPage enrolmentConfig=new EnrollmentConfigurationPage(browser);
  enrolmentConfig.selectConfiguration().createBusinessGroup(groups.get(0),""String_Node_Str"",4,false,false).createBusinessGroup(groups.get(1),""String_Node_Str"",4,false,false).createBusinessGroup(groups.get(2),""String_Node_Str"",4,false,false).selectMultipleEnrollments(2);
  courseEditor.publish().quickPublish(Access.users);
  courseEditor.clickToolbarBack();
  for (  String groupName : groups) {
    navBar.openGroups(browser).selectGroup(groupName).openAdministration().openAdminMembers().setVisibility(true,true,false).openMembers();
  }
  LoginPage.getLoginPage(ryomouBrowser,deploymentUrl).loginAs(ryomou).resume();
  NavigationPage participantNavBar=new NavigationPage(ryomouBrowser);
  participantNavBar.openMyCourses().openSearch().extendedSearch(courseTitle).select(courseTitle).start();
  OOGraphene.waitBusy(ryomouBrowser);
  CoursePageFragment participantCourse=new CoursePageFragment(ryomouBrowser);
  participantCourse.clickTree().selectWithTitle(enNodeTitle);
  EnrollmentPage enrollmentPage=new EnrollmentPage(ryomouBrowser);
  enrollmentPage.assertOnEnrolmentPage().multiEnroll(2);
  enrollmentPage.assertNoEnrollmentAllowed();
}"
69481,"/** 
 * An author create a course, with an enrollment course element. It configure it and create a group with max. participant set to 1 and enables the waiting list.<br> Three users goes to the course and try to enroll. One will become a participant, the 2 others land in the waiting list.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @param reiBrowser
 * @param kanuBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void enrollmentWithWaitingList(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser,@Drone @Participant WebDriver reiBrowser,@Drone @Student WebDriver kanuBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,ryomouBrowser,reiBrowser,kanuBrowser);
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  UserVO rei=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String enNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(enNodeTitle);
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  EnrollmentConfigurationPage enrolmentConfig=new EnrollmentConfigurationPage(browser);
  enrolmentConfig.selectConfiguration().createBusinessGroup(groupName,""String_Node_Str"",1,true,false);
  courseEditor.publish().quickPublish(Access.users);
  courseEditor.clickToolbarBack();
  GroupPage authorGroup=navBar.openGroups(browser).selectGroup(groupName).openAdministration().openAdminMembers().setVisibility(true,true,true).openMembers().assertParticipantList();
  Enrollment[] participantDrivers=new Enrollment[]{new Enrollment(ryomou,ryomouBrowser),new Enrollment(rei,reiBrowser),new Enrollment(kanu,kanuBrowser)};
  for (  Enrollment enrollment : participantDrivers) {
    WebDriver driver=enrollment.getDriver();
    LoginPage.getLoginPage(driver,deploymentUrl).loginAs(enrollment.getUser()).resume();
    NavigationPage participantNavBar=new NavigationPage(driver);
    participantNavBar.openMyCourses().openSearch().extendedSearch(courseTitle).select(courseTitle).start();
    CoursePageFragment participantCourse=new CoursePageFragment(driver);
    participantCourse.clickTree().selectWithTitle(enNodeTitle);
    EnrollmentPage enrollmentPage=new EnrollmentPage(driver);
    enrollmentPage.assertOnEnrolmentPage();
    enrollment.setEnrollmentPage(enrollmentPage);
  }
  for (  Enrollment enrollment : participantDrivers) {
    enrollment.getEnrollmentPage().enrollNoWait();
  }
  for (  Enrollment enrollment : participantDrivers) {
    OOGraphene.waitBusy(enrollment.getDriver());
  }
  authorGroup.openMembers();
  int participants=0;
  int waitingList=0;
  for (  Enrollment enrollment : participantDrivers) {
    if (authorGroup.isInMembersParticipantList(enrollment.getUser()))     participants++;
    if (authorGroup.isInMembersInWaitingList(enrollment.getUser()))     waitingList++;
  }
  Assert.assertEquals(1,participants);
  Assert.assertEquals(2,waitingList);
}","/** 
 * An author create a course, with an enrollment course element. It configure it and create a group with max. participant set to 1 and enables the waiting list.<br> Three users goes to the course and try to enroll. One will become a participant, the 2 others land in the waiting list.
 * @param authorLoginPage
 * @param ryomouBrowser
 * @param reiBrowser
 * @param kanuBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void enrollmentWithWaitingList(@InitialPage LoginPage authorLoginPage,@Drone @User WebDriver ryomouBrowser,@Drone @Participant WebDriver reiBrowser,@Drone @Student WebDriver kanuBrowser) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createAuthor();
  authorLoginPage.loginAs(author.getLogin(),author.getPassword());
  UserVO rei=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO kanu=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO ryomou=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  String courseTitle=""String_Node_Str"" + UUID.randomUUID();
  navBar.openAuthoringEnvironment().createCourse(courseTitle).clickToolbarBack();
  String enNodeTitle=""String_Node_Str"";
  CourseEditorPageFragment courseEditor=CoursePageFragment.getCourse(browser).edit();
  courseEditor.createNode(""String_Node_Str"").nodeTitle(enNodeTitle);
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  EnrollmentConfigurationPage enrolmentConfig=new EnrollmentConfigurationPage(browser);
  enrolmentConfig.selectConfiguration().createBusinessGroup(groupName,""String_Node_Str"",1,true,false);
  courseEditor.publish().quickPublish(Access.users);
  courseEditor.clickToolbarBack();
  GroupPage authorGroup=navBar.openGroups(browser).selectGroup(groupName).openAdministration().openAdminMembers().setVisibility(true,true,true).openMembers().assertParticipantList();
  Enrollment[] participantDrivers=new Enrollment[]{new Enrollment(ryomou,ryomouBrowser),new Enrollment(rei,reiBrowser),new Enrollment(kanu,kanuBrowser)};
  for (  Enrollment enrollment : participantDrivers) {
    WebDriver driver=enrollment.getDriver();
    LoginPage.getLoginPage(driver,deploymentUrl).loginAs(enrollment.getUser()).resume();
    NavigationPage participantNavBar=new NavigationPage(driver);
    participantNavBar.openMyCourses().openSearch().extendedSearch(courseTitle).select(courseTitle).start();
    CoursePageFragment participantCourse=new CoursePageFragment(driver);
    participantCourse.clickTree().selectWithTitle(enNodeTitle);
    EnrollmentPage enrollmentPage=new EnrollmentPage(driver);
    enrollmentPage.assertOnEnrolmentPage();
    enrollment.setEnrollmentPage(enrollmentPage);
  }
  for (  Enrollment enrollment : participantDrivers) {
    enrollment.getEnrollmentPage().enrollNoWait();
  }
  for (  Enrollment enrollment : participantDrivers) {
    OOGraphene.waitBusy(enrollment.getDriver());
  }
  authorGroup.openMembers();
  int participants=0;
  int waitingList=0;
  for (  Enrollment enrollment : participantDrivers) {
    if (authorGroup.isInMembersParticipantList(enrollment.getUser()))     participants++;
    if (authorGroup.isInMembersInWaitingList(enrollment.getUser()))     waitingList++;
  }
  Assert.assertEquals(1,participants);
  Assert.assertEquals(2,waitingList);
}"
69482,"/** 
 * Configure group tools: create a group, go to administration > tools select the informations for members and write some message. Select all tools: contact, calendar, folder, forum, chat, wiki and portfolio.<br> Check that all these functions are available.
 * @param loginPage
 * @param participantBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void collaborativeTools(@InitialPage LoginPage loginPage) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser);
  UserVO author=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  loginPage.loginAs(author.getLogin(),author.getPassword()).resume();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  GroupPage group=navBar.openGroups(browser).createGroup(groupName,""String_Node_Str"");
  String news=""String_Node_Str"" + UUID.randomUUID() + ""String_Node_Str"";
  group.openAdministration().openAdminTools().enableTools().setMembersInfos(news);
  group.openNews().assertNews(news);
  group.openCalendar().assertOnCalendar();
  group.openContact().assertOnContact();
  String directoryName=""String_Node_Str"";
  group.openFolder().assertOnFolderCmp().createDirectory(directoryName).assertOnDirectory(directoryName).createHTMLFile(""String_Node_Str"",""String_Node_Str"").assertOnFile(""String_Node_Str"");
  String threadBodyMarker=UUID.randomUUID().toString();
  group.openForum().createThread(""String_Node_Str"",""String_Node_Str"" + threadBodyMarker,null).assertMessageBody(threadBodyMarker);
  String wikiMarker=UUID.randomUUID().toString();
  group.openWiki().createPage(""String_Node_Str"",""String_Node_Str"" + wikiMarker).assertOnContent(wikiMarker);
  String pageTitle=""String_Node_Str"" + UUID.randomUUID();
  String structureElementTitle=""String_Node_Str"" + UUID.randomUUID();
  group.openPortfolio().openEditor().selectMapInEditor().selectFirstPageInEditor().setPage(pageTitle,""String_Node_Str"").createStructureElement(structureElementTitle,""String_Node_Str"").closeEditor().assertStructure(structureElementTitle);
}","/** 
 * Configure group tools: create a group, go to administration > tools select the informations for members and write some message. Select all tools: contact, calendar, folder, forum, chat, wiki and portfolio.<br> Check that all these functions are available.
 * @param loginPage
 * @param participantBrowser
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void collaborativeTools(@InitialPage LoginPage loginPage) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  loginPage.loginAs(author.getLogin(),author.getPassword()).resume();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  GroupPage group=navBar.openGroups(browser).createGroup(groupName,""String_Node_Str"");
  String news=""String_Node_Str"" + UUID.randomUUID() + ""String_Node_Str"";
  group.openAdministration().openAdminTools().enableTools().setMembersInfos(news);
  group.openNews().assertNews(news);
  group.openCalendar().assertOnCalendar();
  group.openContact().assertOnContact();
  String directoryName=""String_Node_Str"";
  group.openFolder().assertOnFolderCmp().createDirectory(directoryName).assertOnDirectory(directoryName).createHTMLFile(""String_Node_Str"",""String_Node_Str"").assertOnFile(""String_Node_Str"");
  String threadBodyMarker=UUID.randomUUID().toString();
  group.openForum().createThread(""String_Node_Str"",""String_Node_Str"" + threadBodyMarker,null).assertMessageBody(threadBodyMarker);
  String wikiMarker=UUID.randomUUID().toString();
  group.openWiki().createPage(""String_Node_Str"",""String_Node_Str"" + wikiMarker).assertOnContent(wikiMarker);
  String pageTitle=""String_Node_Str"" + UUID.randomUUID();
  String structureElementTitle=""String_Node_Str"" + UUID.randomUUID();
  group.openPortfolio().openEditor().selectMapInEditor().selectFirstPageInEditor().setPage(pageTitle,""String_Node_Str"").createStructureElement(structureElementTitle,""String_Node_Str"").closeEditor().assertStructure(structureElementTitle);
}"
69483,"/** 
 * An author create a group, set the visibility to show owners and participants. Add a member to the group. The participant log in, search the group and open it.
 * @param loginPage
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void groupMembersVisibility(@InitialPage LoginPage loginPage,@Drone @Participant WebDriver participantBrowser) throws IOException, URISyntaxException {
  screenshotTestRule.setBrowsers(browser,participantBrowser);
  UserVO author=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO participant=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  loginPage.loginAs(author.getLogin(),author.getPassword()).resume();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  GroupPage group=navBar.openGroups(browser).createGroup(groupName,""String_Node_Str"");
  MembersWizardPage members=group.openAdministration().openAdminMembers().setVisibility(true,true,false).addMember();
  members.searchMember(participant,false).next().next().next().finish();
  LoginPage participantLoginPage=LoginPage.getLoginPage(participantBrowser,deploymentUrl);
  participantLoginPage.loginAs(participant.getLogin(),participant.getPassword()).resume();
  NavigationPage participantNavBar=new NavigationPage(participantBrowser);
  participantNavBar.openGroups(participantBrowser).selectGroup(groupName);
  WebElement contentEl=participantBrowser.findElement(By.id(""String_Node_Str""));
  String content=contentEl.getText();
  Assert.assertTrue(content.contains(groupName));
}","/** 
 * An author create a group, set the visibility to show owners and participants. Add a member to the group. The participant log in, search the group and open it.
 * @param loginPage
 * @throws IOException
 * @throws URISyntaxException
 */
@Test @RunAsClient public void groupMembersVisibility(@InitialPage LoginPage loginPage,@Drone @Participant WebDriver participantBrowser) throws IOException, URISyntaxException {
  UserVO author=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  UserVO participant=new UserRestClient(deploymentUrl).createRandomUser(""String_Node_Str"");
  loginPage.loginAs(author.getLogin(),author.getPassword()).resume();
  String groupName=""String_Node_Str"" + UUID.randomUUID();
  GroupPage group=navBar.openGroups(browser).createGroup(groupName,""String_Node_Str"");
  MembersWizardPage members=group.openAdministration().openAdminMembers().setVisibility(true,true,false).addMember();
  members.searchMember(participant,false).next().next().next().finish();
  LoginPage participantLoginPage=LoginPage.getLoginPage(participantBrowser,deploymentUrl);
  participantLoginPage.loginAs(participant.getLogin(),participant.getPassword()).resume();
  NavigationPage participantNavBar=new NavigationPage(participantBrowser);
  participantNavBar.openGroups(participantBrowser).selectGroup(groupName);
  WebElement contentEl=participantBrowser.findElement(By.id(""String_Node_Str""));
  String content=contentEl.getText();
  Assert.assertTrue(content.contains(groupName));
}"
69484,"/** 
 * Use the insert tool
 * @param showInsertTool
 */
public void enableInsertTool(boolean showInsertTool){
  this.showInsertTool=showInsertTool;
}","/** 
 * Use the insert tool
 * @param enableInsertTool
 */
public void enableInsertTool(boolean enableInsertTool){
  showInsertTool=enableInsertTool;
}"
69485,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnModel=initColumnModel();
  groupTableModel=initTableModel(columnModel);
  tableEl=uifactory.addTableElement(getWindowControl(),""String_Node_Str"",groupTableModel,20,false,getTranslator(),formLayout);
  FlexiTableSortOptions options=new FlexiTableSortOptions();
  options.setFromColumnModel(true);
  tableEl.setSortSettings(options);
  tableEl.setAndLoadPersistedPreferences(ureq,""String_Node_Str"" + prefsKey);
  searchCtrl=new BusinessGroupSearchController(ureq,getWindowControl(),isAdmin(),true,showAdminTools,isAdmin(),mainForm);
  searchCtrl.setEnabled(false);
  listenTo(searchCtrl);
  tableEl.setSearchEnabled(true);
  tableEl.setExtendedSearch(searchCtrl);
  if (startExtendedSearch) {
    tableEl.expandExtendedSearch(ureq);
  }
  initButtons(formLayout,ureq);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnModel=initColumnModel();
  groupTableModel=initTableModel(columnModel);
  tableEl=uifactory.addTableElement(getWindowControl(),""String_Node_Str"",groupTableModel,20,false,getTranslator(),formLayout);
  tableEl.setElementCssClass(""String_Node_Str"");
  FlexiTableSortOptions options=new FlexiTableSortOptions();
  options.setFromColumnModel(true);
  tableEl.setSortSettings(options);
  tableEl.setAndLoadPersistedPreferences(ureq,""String_Node_Str"" + prefsKey);
  searchCtrl=new BusinessGroupSearchController(ureq,getWindowControl(),isAdmin(),true,showAdminTools,isAdmin(),mainForm);
  searchCtrl.setEnabled(false);
  listenTo(searchCtrl);
  tableEl.setSearchEnabled(true);
  tableEl.setExtendedSearch(searchCtrl);
  if (startExtendedSearch) {
    tableEl.expandExtendedSearch(ureq);
  }
  initButtons(formLayout,ureq);
}"
69486,"/** 
 * Do not use this constructor! Use the BGControllerFactory instead!
 * @param ureq
 * @param control
 * @param currBusinessGroup
 * @param flags
 * @param initialViewIdentifier supported are null, ""toolforum"", ""toolfolder""
 */
public BusinessGroupMainRunController(UserRequest ureq,WindowControl control,BusinessGroup bGroup){
  super(ureq,control);
  assessmentEventOres=OresHelper.createOLATResourceableType(AssessmentEvent.class);
  nodeIdPrefix=""String_Node_Str"".concat(Long.toString(CodeHelper.getRAMUniqueID()));
  toolbarPanel=new TooledStackedPanel(""String_Node_Str"",getTranslator(),this);
  toolbarPanel.setInvisibleCrumb(0);
  toolbarPanel.setToolbarEnabled(false);
  toolbarPanel.setShowCloseLink(true,true);
  UserSession session=ureq.getUserSession();
  if (session != null && session.getHistoryStack() != null && session.getHistoryStack().size() >= 2) {
    List<HistoryPoint> stack=session.getHistoryStack();
    for (int i=stack.size() - 2; i-- > 0; ) {
      HistoryPoint point=stack.get(stack.size() - 2);
      if (point.getEntries().size() > 0) {
        OLATResourceable ores=point.getEntries().get(0).getOLATResourceable();
        if (!OresHelper.equals(bGroup,ores) && !OresHelper.equals(bGroup.getResource(),ores)) {
          launchedFromPoint=point;
          break;
        }
      }
    }
  }
  businessGroup=businessGroupService.setLastUsageFor(getIdentity(),bGroup);
  if (businessGroup == null) {
    VelocityContainer vc=createVelocityContainer(""String_Node_Str"");
    vc.contextPut(""String_Node_Str"",bGroup.getName());
    columnLayoutCtr=new LayoutMain3ColsController(ureq,getWindowControl(),null,vc,""String_Node_Str"");
    listenTo(columnLayoutCtr);
    putInitialPanel(columnLayoutCtr.getInitialComponent());
    chatAvailable=false;
    return;
  }
  List<BusinessGroupMembership> memberships=businessGroupService.getBusinessGroupMembership(Collections.singletonList(bGroup.getKey()),getIdentity());
  if (isOnWaitinglist(memberships)) {
    putInitialPanel(getOnWaitingListMessage(ureq,bGroup));
    chatAvailable=false;
    return;
  }
 else   if (ureq.getUserSession().getRoles().isGuestOnly()) {
    putInitialPanel(getNoAccessMessage(ureq,bGroup));
    chatAvailable=false;
    return;
  }
  addLoggingResourceable(LoggingResourceable.wrap(businessGroup));
  ThreadLocalUserActivityLogger.log(GroupLoggingAction.GROUP_OPEN,getClass());
  UserSession usess=ureq.getUserSession();
  Object wcard=usess.removeEntry(""String_Node_Str"" + businessGroup.getKey());
  isGroupsAdmin=usess.getRoles().isOLATAdmin() || usess.getRoles().isGroupManager();
  chatAvailable=isChatAvailable();
  isAdmin=(wcard != null && Boolean.TRUE.equals(wcard)) || isGroupsAdmin || businessGroupService.isIdentityInBusinessGroup(getIdentity(),businessGroup.getKey(),true,false,null);
  setTranslator(Util.createPackageTranslator(BGControllerFactory.class,getLocale(),getTranslator()));
  resourceTrans=Util.createPackageTranslator(RepositoryService.class,getLocale(),getTranslator());
  main=createVelocityContainer(""String_Node_Str"");
  exposeGroupDetailsToVC(businessGroup);
  mainPanel=new Panel(""String_Node_Str"");
  mainPanel.setContent(main);
  bgTree=new MenuTree(""String_Node_Str"");
  TreeModel trMdl=buildTreeModel();
  bgTree.setTreeModel(trMdl);
  bgTree.addListener(this);
  columnLayoutCtr=new LayoutMain3ColsController(ureq,getWindowControl(),bgTree,mainPanel,""String_Node_Str"");
  toolbarPanel.pushController(bGroup.getName(),columnLayoutCtr);
  listenTo(columnLayoutCtr);
  putInitialPanel(toolbarPanel);
  singleUserEventBus=ureq.getUserSession().getSingleUserEventCenter();
  singleUserEventBus.registerFor(this,ureq.getIdentity(),assessmentEventOres);
  Panel empty=new Panel(""String_Node_Str"");
  Controller disposedBusinessGroup=new DisposedBusinessGroup(ureq,getWindowControl());
  LayoutMain3ColsController disposedController=new LayoutMain3ColsController(ureq,getWindowControl(),empty,disposedBusinessGroup.getInitialComponent(),""String_Node_Str"");
  disposedController.addDisposableChildController(disposedBusinessGroup);
  setDisposedMsgController(disposedController);
  CoordinatorManager.getInstance().getCoordinator().getEventBus().registerFor(this,getIdentity(),businessGroup);
  if (AssessmentEvent.isAssessmentStarted(ureq.getUserSession())) {
    groupRunDisabled=true;
    showError(""String_Node_Str"");
  }
  if (wcard == null) {
    AccessResult acResult=acService.isAccessible(businessGroup,getIdentity(),false);
    if (acResult.isAccessible()) {
      needActivation=false;
    }
 else     if (businessGroup != null && acResult.getAvailableMethods().size() > 0) {
      accessController=new AccessListController(ureq,getWindowControl(),acResult.getAvailableMethods());
      listenTo(accessController);
      mainPanel.setContent(accessController.getInitialComponent());
      bgTree.setTreeModel(new GenericTreeModel());
      needActivation=true;
    }
 else {
      mainPanel.setContent(new Panel(""String_Node_Str""));
      bgTree.setTreeModel(new GenericTreeModel());
      needActivation=true;
    }
    wildcard=false;
  }
 else {
    needActivation=false;
    wildcard=true;
  }
}","/** 
 * Do not use this constructor! Use the BGControllerFactory instead!
 * @param ureq
 * @param control
 * @param currBusinessGroup
 * @param flags
 * @param initialViewIdentifier supported are null, ""toolforum"", ""toolfolder""
 */
public BusinessGroupMainRunController(UserRequest ureq,WindowControl control,BusinessGroup bGroup){
  super(ureq,control);
  assessmentEventOres=OresHelper.createOLATResourceableType(AssessmentEvent.class);
  nodeIdPrefix=""String_Node_Str"".concat(Long.toString(CodeHelper.getRAMUniqueID()));
  toolbarPanel=new TooledStackedPanel(""String_Node_Str"",getTranslator(),this);
  toolbarPanel.setInvisibleCrumb(0);
  toolbarPanel.setToolbarEnabled(false);
  toolbarPanel.setShowCloseLink(true,true);
  UserSession session=ureq.getUserSession();
  if (session != null && session.getHistoryStack() != null && session.getHistoryStack().size() >= 2) {
    List<HistoryPoint> stack=session.getHistoryStack();
    for (int i=stack.size() - 2; i-- > 0; ) {
      HistoryPoint point=stack.get(stack.size() - 2);
      if (point.getEntries().size() > 0) {
        OLATResourceable ores=point.getEntries().get(0).getOLATResourceable();
        if (!OresHelper.equals(bGroup,ores) && !OresHelper.equals(bGroup.getResource(),ores)) {
          launchedFromPoint=point;
          break;
        }
      }
    }
  }
  businessGroup=businessGroupService.setLastUsageFor(getIdentity(),bGroup);
  if (businessGroup == null) {
    VelocityContainer vc=createVelocityContainer(""String_Node_Str"");
    vc.contextPut(""String_Node_Str"",bGroup.getName());
    columnLayoutCtr=new LayoutMain3ColsController(ureq,getWindowControl(),null,vc,""String_Node_Str"");
    listenTo(columnLayoutCtr);
    putInitialPanel(columnLayoutCtr.getInitialComponent());
    chatAvailable=false;
    return;
  }
  List<BusinessGroupMembership> memberships=businessGroupService.getBusinessGroupMembership(Collections.singletonList(bGroup.getKey()),getIdentity());
  if (isOnWaitinglist(memberships)) {
    putInitialPanel(getOnWaitingListMessage(ureq,bGroup));
    chatAvailable=false;
    return;
  }
 else   if (ureq.getUserSession().getRoles().isGuestOnly()) {
    putInitialPanel(getNoAccessMessage(ureq,bGroup));
    chatAvailable=false;
    return;
  }
  addLoggingResourceable(LoggingResourceable.wrap(businessGroup));
  ThreadLocalUserActivityLogger.log(GroupLoggingAction.GROUP_OPEN,getClass());
  UserSession usess=ureq.getUserSession();
  Object wcard=usess.removeEntry(""String_Node_Str"" + businessGroup.getKey());
  isGroupsAdmin=usess.getRoles().isOLATAdmin() || usess.getRoles().isGroupManager();
  chatAvailable=isChatAvailable();
  isAdmin=(wcard != null && Boolean.TRUE.equals(wcard)) || isGroupsAdmin || businessGroupService.isIdentityInBusinessGroup(getIdentity(),businessGroup.getKey(),true,false,null);
  setTranslator(Util.createPackageTranslator(BGControllerFactory.class,getLocale(),getTranslator()));
  resourceTrans=Util.createPackageTranslator(RepositoryService.class,getLocale(),getTranslator());
  main=createVelocityContainer(""String_Node_Str"");
  exposeGroupDetailsToVC(businessGroup);
  mainPanel=new Panel(""String_Node_Str"");
  mainPanel.setContent(main);
  bgTree=new MenuTree(""String_Node_Str"",""String_Node_Str"");
  TreeModel trMdl=buildTreeModel();
  bgTree.setTreeModel(trMdl);
  bgTree.addListener(this);
  columnLayoutCtr=new LayoutMain3ColsController(ureq,getWindowControl(),bgTree,mainPanel,""String_Node_Str"");
  toolbarPanel.pushController(bGroup.getName(),columnLayoutCtr);
  listenTo(columnLayoutCtr);
  putInitialPanel(toolbarPanel);
  singleUserEventBus=ureq.getUserSession().getSingleUserEventCenter();
  singleUserEventBus.registerFor(this,ureq.getIdentity(),assessmentEventOres);
  Panel empty=new Panel(""String_Node_Str"");
  Controller disposedBusinessGroup=new DisposedBusinessGroup(ureq,getWindowControl());
  LayoutMain3ColsController disposedController=new LayoutMain3ColsController(ureq,getWindowControl(),empty,disposedBusinessGroup.getInitialComponent(),""String_Node_Str"");
  disposedController.addDisposableChildController(disposedBusinessGroup);
  setDisposedMsgController(disposedController);
  CoordinatorManager.getInstance().getCoordinator().getEventBus().registerFor(this,getIdentity(),businessGroup);
  if (AssessmentEvent.isAssessmentStarted(ureq.getUserSession())) {
    groupRunDisabled=true;
    showError(""String_Node_Str"");
  }
  if (wcard == null) {
    AccessResult acResult=acService.isAccessible(businessGroup,getIdentity(),false);
    if (acResult.isAccessible()) {
      needActivation=false;
    }
 else     if (businessGroup != null && acResult.getAvailableMethods().size() > 0) {
      accessController=new AccessListController(ureq,getWindowControl(),acResult.getAvailableMethods());
      listenTo(accessController);
      mainPanel.setContent(accessController.getInitialComponent());
      bgTree.setTreeModel(new GenericTreeModel());
      needActivation=true;
    }
 else {
      mainPanel.setContent(new Panel(""String_Node_Str""));
      bgTree.setTreeModel(new GenericTreeModel());
      needActivation=true;
    }
    wildcard=false;
  }
 else {
    needActivation=false;
    wildcard=true;
  }
}"
69487,"private <T>TypedQuery<T> createFindDBQuery(SearchBusinessGroupParams params,RepositoryEntryRef resource,Class<T> resultClass,BusinessGroupOrder... ordering){
  StringBuilder query=new StringBuilder();
  if (BusinessGroup.class.equals(resultClass)) {
    query.append(""String_Node_Str"");
  }
 else {
    query.append(""String_Node_Str"");
  }
  query.append(""String_Node_Str"");
  if (BusinessGroup.class.equals(resultClass)) {
    query.append(""String_Node_Str"");
  }
 else {
    query.append(""String_Node_Str"");
  }
  if (resource != null || params.isOwner() || params.isAttendee() || params.isWaiting()) {
    query.append(""String_Node_Str"");
  }
  boolean where=false;
  if (StringHelper.containsNonWhitespace(params.getExternalId())) {
    where=where(query,where);
    query.append(""String_Node_Str"");
  }
  Long id=null;
  if (StringHelper.containsNonWhitespace(params.getIdRef())) {
    if (StringHelper.isLong(params.getIdRef())) {
      try {
        id=new Long(params.getIdRef());
      }
 catch (      NumberFormatException e) {
      }
    }
    where=where(query,where);
    query.append(""String_Node_Str"");
    if (id != null) {
      query.append(""String_Node_Str"");
    }
    query.append(""String_Node_Str"");
  }
  if (params.getManaged() != null) {
    where=where(query,where);
    if (params.getManaged().booleanValue()) {
      query.append(""String_Node_Str"");
    }
 else {
      query.append(""String_Node_Str"");
    }
  }
  if (params.getGroupKeys() != null && !params.getGroupKeys().isEmpty()) {
    where=where(query,where);
    query.append(""String_Node_Str"");
  }
  if (resource != null) {
    where=where(query,where);
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
  if (StringHelper.containsNonWhitespace(params.getCourseTitle())) {
    where=where(query,where);
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
  }
  List<String> roles=null;
  if (params.isOwner() || params.isAttendee() || params.isWaiting()) {
    where=where(query,where);
    roles=new ArrayList<>();
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    if (params.isOwner()) {
      roles.add(GroupRoles.coach.name());
    }
    if (params.isAttendee()) {
      roles.add(GroupRoles.participant.name());
    }
    if (params.isWaiting()) {
      roles.add(GroupRoles.waiting.name());
    }
  }
  if (StringHelper.containsNonWhitespace(params.getNameOrDesc())) {
    where=where(query,where);
    query.append(""String_Node_Str"");
    searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
    searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
  }
 else {
    if (StringHelper.containsNonWhitespace(params.getExactName())) {
      where=where(query,where);
      query.append(""String_Node_Str"");
    }
    if (StringHelper.containsNonWhitespace(params.getName())) {
      where=where(query,where);
      searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    if (StringHelper.containsNonWhitespace(params.getDescription())) {
      where=where(query,where);
      searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (params.getTools() != null && !params.getTools().isEmpty()) {
    where=where(query,where);
    query.append(""String_Node_Str"").append(Property.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(CollaborationTools.PROP_CAT_BG_COLLABTOOLS).append(""String_Node_Str"").append(""String_Node_Str"");
  }
  if (BusinessGroup.class.equals(resultClass)) {
    query.append(""String_Node_Str"");
    if (ordering != null && ordering.length > 0) {
      for (      BusinessGroupOrder o : ordering) {
switch (o) {
case nameAsc:
          query.append(""String_Node_Str"");
        break;
case nameDesc:
      query.append(""String_Node_Str"");
    break;
case creationDateAsc:
  query.append(""String_Node_Str"");
break;
case creationDateDesc:
query.append(""String_Node_Str"");
break;
}
}
}
 else {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"");
}
TypedQuery<T> dbq=dbInstance.getCurrentEntityManager().createQuery(query.toString(),resultClass);
if (params.isOwner() || params.isAttendee() || params.isWaiting()) {
dbq.setParameter(""String_Node_Str"",params.getIdentity().getKey());
}
if (params.getGroupKeys() != null && !params.getGroupKeys().isEmpty()) {
dbq.setParameter(""String_Node_Str"",params.getGroupKeys());
}
if (StringHelper.containsNonWhitespace(params.getExternalId())) {
dbq.setParameter(""String_Node_Str"",params.getExternalId());
}
if (StringHelper.containsNonWhitespace(params.getIdRef())) {
dbq.setParameter(""String_Node_Str"",params.getIdRef());
if (id != null) {
dbq.setParameter(""String_Node_Str"",id);
}
}
if (resource != null) {
dbq.setParameter(""String_Node_Str"",resource.getKey());
}
if (params.getTools() != null && !params.getTools().isEmpty()) {
dbq.setParameter(""String_Node_Str"",params.getTools());
}
if (roles != null) {
dbq.setParameter(""String_Node_Str"",roles);
}
if (StringHelper.containsNonWhitespace(params.getNameOrDesc())) {
dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getNameOrDesc()));
}
 else {
if (StringHelper.containsNonWhitespace(params.getExactName())) {
dbq.setParameter(""String_Node_Str"",params.getExactName());
}
if (StringHelper.containsNonWhitespace(params.getName())) {
dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getName()));
}
if (StringHelper.containsNonWhitespace(params.getDescription())) {
dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getDescription()));
}
}
if (StringHelper.containsNonWhitespace(params.getCourseTitle())) {
dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getCourseTitle()));
}
return dbq;
}","private <T>TypedQuery<T> createFindDBQuery(SearchBusinessGroupParams params,RepositoryEntryRef resource,Class<T> resultClass,BusinessGroupOrder... ordering){
  StringBuilder query=new StringBuilder();
  if (BusinessGroup.class.equals(resultClass)) {
    query.append(""String_Node_Str"");
  }
 else {
    query.append(""String_Node_Str"");
  }
  query.append(""String_Node_Str"");
  if (BusinessGroup.class.equals(resultClass)) {
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"");
  }
 else {
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"");
  }
  boolean where=false;
  if (StringHelper.containsNonWhitespace(params.getExternalId())) {
    where=where(query,where);
    query.append(""String_Node_Str"");
  }
  Long id=null;
  if (StringHelper.containsNonWhitespace(params.getIdRef())) {
    if (StringHelper.isLong(params.getIdRef())) {
      try {
        id=new Long(params.getIdRef());
      }
 catch (      NumberFormatException e) {
      }
    }
    where=where(query,where);
    query.append(""String_Node_Str"");
    if (id != null) {
      query.append(""String_Node_Str"");
    }
    query.append(""String_Node_Str"");
  }
  if (params.getManaged() != null) {
    where=where(query,where);
    if (params.getManaged().booleanValue()) {
      query.append(""String_Node_Str"");
    }
 else {
      query.append(""String_Node_Str"");
    }
  }
  if (params.getGroupKeys() != null && !params.getGroupKeys().isEmpty()) {
    where=where(query,where);
    query.append(""String_Node_Str"");
  }
  if (resource != null) {
    where=where(query,where);
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
  if (StringHelper.containsNonWhitespace(params.getCourseTitle())) {
    where=where(query,where);
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
  }
  List<String> roles=null;
  if (params.isOwner() || params.isAttendee() || params.isWaiting()) {
    where=where(query,where);
    roles=new ArrayList<>();
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    if (params.isOwner()) {
      roles.add(GroupRoles.coach.name());
    }
    if (params.isAttendee()) {
      roles.add(GroupRoles.participant.name());
    }
    if (params.isWaiting()) {
      roles.add(GroupRoles.waiting.name());
    }
  }
  if (StringHelper.containsNonWhitespace(params.getNameOrDesc())) {
    where=where(query,where);
    query.append(""String_Node_Str"");
    searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
    searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
  }
 else {
    if (StringHelper.containsNonWhitespace(params.getExactName())) {
      where=where(query,where);
      query.append(""String_Node_Str"");
    }
    if (StringHelper.containsNonWhitespace(params.getName())) {
      where=where(query,where);
      searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    if (StringHelper.containsNonWhitespace(params.getDescription())) {
      where=where(query,where);
      searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (params.getTools() != null && !params.getTools().isEmpty()) {
    where=where(query,where);
    query.append(""String_Node_Str"").append(Property.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(CollaborationTools.PROP_CAT_BG_COLLABTOOLS).append(""String_Node_Str"").append(""String_Node_Str"");
  }
  if (BusinessGroup.class.equals(resultClass)) {
    query.append(""String_Node_Str"");
    if (ordering != null && ordering.length > 0) {
      for (      BusinessGroupOrder o : ordering) {
switch (o) {
case nameAsc:
          query.append(""String_Node_Str"");
        break;
case nameDesc:
      query.append(""String_Node_Str"");
    break;
case creationDateAsc:
  query.append(""String_Node_Str"");
break;
case creationDateDesc:
query.append(""String_Node_Str"");
break;
}
}
}
 else {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"");
}
TypedQuery<T> dbq=dbInstance.getCurrentEntityManager().createQuery(query.toString(),resultClass);
if (params.isOwner() || params.isAttendee() || params.isWaiting()) {
dbq.setParameter(""String_Node_Str"",params.getIdentity().getKey());
}
if (params.getGroupKeys() != null && !params.getGroupKeys().isEmpty()) {
dbq.setParameter(""String_Node_Str"",params.getGroupKeys());
}
if (StringHelper.containsNonWhitespace(params.getExternalId())) {
dbq.setParameter(""String_Node_Str"",params.getExternalId());
}
if (StringHelper.containsNonWhitespace(params.getIdRef())) {
dbq.setParameter(""String_Node_Str"",params.getIdRef());
if (id != null) {
dbq.setParameter(""String_Node_Str"",id);
}
}
if (resource != null) {
dbq.setParameter(""String_Node_Str"",resource.getKey());
}
if (params.getTools() != null && !params.getTools().isEmpty()) {
dbq.setParameter(""String_Node_Str"",params.getTools());
}
if (roles != null) {
dbq.setParameter(""String_Node_Str"",roles);
}
if (StringHelper.containsNonWhitespace(params.getNameOrDesc())) {
dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getNameOrDesc()));
}
 else {
if (StringHelper.containsNonWhitespace(params.getExactName())) {
dbq.setParameter(""String_Node_Str"",params.getExactName());
}
if (StringHelper.containsNonWhitespace(params.getName())) {
dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getName()));
}
if (StringHelper.containsNonWhitespace(params.getDescription())) {
dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getDescription()));
}
}
if (StringHelper.containsNonWhitespace(params.getCourseTitle())) {
dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getCourseTitle()));
}
return dbq;
}"
69488,"public static boolean validateImsManifest(QTI21ContentPackage cp,ResourceLocator resourceLocator){
  try {
    URI test=cp.getTest().toUri();
    ResourceLocator chainedResourceLocator=createResolvingResourceLocator(resourceLocator);
    XmlReadResult result=new QtiXmlReader().read(chainedResourceLocator,test,true);
    return result != null && result.isSchemaValid();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return false;
  }
}","public static boolean validateImsManifest(QTI21ContentPackage cp,ResourceLocator resourceLocator){
  try {
    if (cp.hasTest()) {
      URI test=cp.getTest().toUri();
      ResourceLocator chainedResourceLocator=createResolvingResourceLocator(resourceLocator);
      XmlReadResult result=new QtiXmlReader().read(chainedResourceLocator,test,true);
      return result != null && result.isSchemaValid();
    }
    return false;
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return false;
  }
}"
69489,"public Path getTest() throws IOException {
  NodeList list=null;
  for (  String s : TEST_EXPRESSION) {
    list=getNodeList(s);
    if (list.getLength() > 0)     break;
  }
  if (list == null) {
    throw new IOException(""String_Node_Str"");
  }
  return manifestFile.getParent().resolve(list.item(0).getNodeValue());
}","public Path getTest() throws IOException {
  NodeList list=null;
  for (  String s : TEST_EXPRESSION) {
    list=getNodeList(s);
    if (list.getLength() > 0)     break;
  }
  if (list == null || list.getLength() == 0) {
    throw new IOException(""String_Node_Str"");
  }
  return manifestFile.getParent().resolve(list.item(0).getNodeValue());
}"
69490,"public MyCoursesPage select(String title){
  By titleLinkBy=By.cssSelector(""String_Node_Str"");
  WebElement linkToSelect=null;
  List<WebElement> titleLinks=browser.findElements(titleLinkBy);
  for (  WebElement link : titleLinks) {
    if (link.getText().contains(title)) {
      linkToSelect=link;
    }
  }
  Assert.assertNotNull(linkToSelect);
  linkToSelect.click();
  OOGraphene.waitBusy(browser);
  return this;
}","public MyCoursesPage select(String title){
  By titleLinkBy=By.cssSelector(""String_Node_Str"");
  WebElement linkToSelect=null;
  List<WebElement> titleLinks=browser.findElements(titleLinkBy);
  for (  WebElement link : titleLinks) {
    if (link.getText().contains(title)) {
      linkToSelect=link;
    }
  }
  Assert.assertNotNull(""String_Node_Str"" + title + ""String_Node_Str""+ titleLinks.size()+ ""String_Node_Str"",linkToSelect);
  linkToSelect.click();
  OOGraphene.waitBusy(browser);
  return this;
}"
69491,"/** 
 * @see org.olat.basesecurity.Manager#loadIdentityByKey(java.lang.Long,boolean)
 */
@Override public Identity loadIdentityByKey(Long identityKey,boolean strict){
  if (strict)   return loadIdentityByKey(identityKey);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(IdentityShort.class.getName()).append(""String_Node_Str"");
  List<Identity> identities=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),Identity.class).setParameter(""String_Node_Str"",identityKey).getResultList();
  return identities.size() == 1 ? identities.get(0) : null;
}","/** 
 * @see org.olat.basesecurity.Manager#loadIdentityByKey(java.lang.Long,boolean)
 */
@Override public Identity loadIdentityByKey(Long identityKey,boolean strict){
  if (strict)   return loadIdentityByKey(identityKey);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(Identity.class.getName()).append(""String_Node_Str"");
  List<Identity> identities=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),Identity.class).setParameter(""String_Node_Str"",identityKey).getResultList();
  return identities.size() == 1 ? identities.get(0) : null;
}"
69492,"private void renderMovie(StringOutput sb,ImageComponent ic){
  int width=320;
  int height=240;
  Size size=ic.getScaledSize();
  if (size != null) {
    width=size.getWidth();
    height=size.getHeight() + 20;
  }
  String mapperUrl=ic.getMapperUrl();
  String name=ic.getMedia().getName();
  if (name.lastIndexOf('.') > 0) {
    mapperUrl+=""String_Node_Str"" + name;
  }
 else {
    mapperUrl+=""String_Node_Str"" + ic.getSuffix(ic.getMimeType());
  }
  String poster=null;
  if (ic.getPoster() != null) {
    poster=ic.getPosterMapperUrl() + ""String_Node_Str"" + ic.getPoster().getName();
  }
  String compId=""String_Node_Str"" + ic.getDispatchID();
  sb.append(""String_Node_Str"").append(compId).append(""String_Node_Str"");
  String imgId=""String_Node_Str"" + ic.getDispatchID();
  sb.append(""String_Node_Str"").append(imgId).append(""String_Node_Str"").append(imgId).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(Settings.createServerURI()).append(mapperUrl);
  sb.append(""String_Node_Str"").append(imgId).append(""String_Node_Str"").append(width).append(""String_Node_Str"").append(height).append(""String_Node_Str"");
  if (poster != null) {
    sb.append(""String_Node_Str"").append(poster).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
}","private void renderMovie(StringOutput sb,ImageComponent ic){
  int width=320;
  int height=240;
  Size size=ic.getScaledSize();
  if (size != null) {
    width=size.getWidth();
    height=size.getHeight() + 20;
  }
  String mapperUrl=ic.getMapperUrl();
  String name=ic.getMedia().getName();
  if (name.lastIndexOf('.') > 0) {
    mapperUrl+=""String_Node_Str"" + name;
  }
 else {
    mapperUrl+=""String_Node_Str"" + ic.getSuffix(ic.getMimeType());
  }
  String poster=null;
  if (ic.getPoster() != null) {
    poster=ic.getPosterMapperUrl() + ""String_Node_Str"" + ic.getPoster().getName();
  }
  String compId=""String_Node_Str"" + ic.getDispatchID();
  sb.append(""String_Node_Str"").append(compId).append(""String_Node_Str"");
  String imgId=""String_Node_Str"" + ic.getDispatchID();
  sb.append(""String_Node_Str"").append(imgId).append(""String_Node_Str"").append(imgId).append(""String_Node_Str"").append(width).append(""String_Node_Str"").append(height).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(Settings.createServerURI()).append(mapperUrl);
  sb.append(""String_Node_Str"").append(imgId).append(""String_Node_Str"").append(width).append(""String_Node_Str"").append(height).append(""String_Node_Str"");
  if (poster != null) {
    sb.append(""String_Node_Str"").append(poster).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
}"
69493,"private Activateable2 doAssessmentTool_v2(UserRequest ureq){
  if (delayedClose == Delayed.assessmentTool || requestForClose(ureq)) {
    OLATResourceable ores=OresHelper.createOLATResourceableType(""String_Node_Str"");
    ThreadLocalUserActivityLogger.addLoggingResourceInfo(LoggingResourceable.wrapBusinessPath(ores));
    WindowControl swControl=addToHistory(ureq,ores,null);
    if (reSecurity.isEntryAdmin() || hasCourseRight(CourseRights.RIGHT_ASSESSMENT)) {
      removeCustomCSS(ureq);
      AssessmentOverviewController ctrl=new AssessmentOverviewController(ureq,swControl,toolbarPanel,getRepositoryEntry(),new FullAccessAssessmentCallback(reSecurity.isEntryAdmin()));
      ctrl.activate(ureq,null,null);
      listenTo(ctrl);
      assessmentTool_v2_Ctr=pushController(ureq,translate(""String_Node_Str""),ctrl);
      currentToolCtr=assessmentTool_v2_Ctr;
      setActiveTool(assessmentLink);
      return assessmentToolCtr;
    }
    if (reSecurity.isCourseCoach() || reSecurity.isGroupCoach()) {
      removeCustomCSS(ureq);
      AssessmentOverviewController ctrl=new AssessmentOverviewController(ureq,swControl,toolbarPanel,getRepositoryEntry(),new CoachingGroupAccessAssessmentCallback());
      ctrl.activate(ureq,null,null);
      listenTo(ctrl);
      assessmentTool_v2_Ctr=pushController(ureq,translate(""String_Node_Str""),ctrl);
      currentToolCtr=assessmentTool_v2_Ctr;
      setActiveTool(assessmentLink);
      return assessmentToolCtr;
    }
  }
 else {
    delayedClose=Delayed.assessmentTool;
  }
  return null;
}","private Activateable2 doAssessmentTool_v2(UserRequest ureq){
  if (delayedClose == Delayed.assessmentTool || requestForClose(ureq)) {
    OLATResourceable ores=OresHelper.createOLATResourceableType(""String_Node_Str"");
    ThreadLocalUserActivityLogger.addLoggingResourceInfo(LoggingResourceable.wrapBusinessPath(ores));
    WindowControl swControl=addToHistory(ureq,ores,null);
    if (reSecurity.isEntryAdmin() || hasCourseRight(CourseRights.RIGHT_ASSESSMENT)) {
      removeCustomCSS();
      AssessmentOverviewController ctrl=new AssessmentOverviewController(ureq,swControl,toolbarPanel,getRepositoryEntry(),new FullAccessAssessmentCallback(reSecurity.isEntryAdmin()));
      ctrl.activate(ureq,null,null);
      listenTo(ctrl);
      assessmentTool_v2_Ctr=pushController(ureq,translate(""String_Node_Str""),ctrl);
      currentToolCtr=assessmentTool_v2_Ctr;
      setActiveTool(assessmentLink);
      return assessmentToolCtr;
    }
    if (reSecurity.isCourseCoach() || reSecurity.isGroupCoach()) {
      removeCustomCSS();
      AssessmentOverviewController ctrl=new AssessmentOverviewController(ureq,swControl,toolbarPanel,getRepositoryEntry(),new CoachingGroupAccessAssessmentCallback());
      ctrl.activate(ureq,null,null);
      listenTo(ctrl);
      assessmentTool_v2_Ctr=pushController(ureq,translate(""String_Node_Str""),ctrl);
      currentToolCtr=assessmentTool_v2_Ctr;
      setActiveTool(assessmentLink);
      return assessmentToolCtr;
    }
  }
 else {
    delayedClose=Delayed.assessmentTool;
  }
  return null;
}"
69494,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  mainForm.setStandaloneRendering(true);
  mainForm.setMultipartEnabled(true,Integer.MAX_VALUE);
  qtiEl=new AssessmentItemFormItem(""String_Node_Str"");
  formLayout.add(""String_Node_Str"",qtiEl);
  ResourceLocator fileResourceLocator=new PathResourceLocator(fUnzippedDirRoot.toPath());
  final ResourceLocator inputResourceLocator=ImsQTI21Resource.createResolvingResourceLocator(fileResourceLocator);
  qtiEl.setResourceLocator(inputResourceLocator);
  qtiEl.setItemSessionController(itemSessionController);
  File manifestPath=new File(fUnzippedDirRoot,filename);
  qtiEl.setAssessmentObjectUri(manifestPath.toURI());
  qtiEl.setCandidateSessionContext(AssessmentItemDisplayController.this);
  qtiEl.setMapperUri(mapperUri);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  mainForm.setStandaloneRendering(true);
  mainForm.setMultipartEnabled(true);
  qtiEl=new AssessmentItemFormItem(""String_Node_Str"");
  formLayout.add(""String_Node_Str"",qtiEl);
  ResourceLocator fileResourceLocator=new PathResourceLocator(fUnzippedDirRoot.toPath());
  final ResourceLocator inputResourceLocator=ImsQTI21Resource.createResolvingResourceLocator(fileResourceLocator);
  qtiEl.setResourceLocator(inputResourceLocator);
  qtiEl.setItemSessionController(itemSessionController);
  File manifestPath=new File(fUnzippedDirRoot,filename);
  qtiEl.setAssessmentObjectUri(manifestPath.toURI());
  qtiEl.setCandidateSessionContext(AssessmentItemDisplayController.this);
  qtiEl.setMapperUri(mapperUri);
}"
69495,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  mainForm.setStandaloneRendering(true);
  mainForm.setMultipartEnabled(true,Integer.MAX_VALUE);
  qtiEl=new AssessmentTestFormItem(""String_Node_Str"");
  formLayout.add(""String_Node_Str"",qtiEl);
  ResourceLocator fileResourceLocator=new PathResourceLocator(fUnzippedDirRoot.toPath());
  final ResourceLocator inputResourceLocator=ImsQTI21Resource.createResolvingResourceLocator(fileResourceLocator);
  qtiEl.setResourceLocator(inputResourceLocator);
  qtiEl.setTestSessionController(testSessionController);
  qtiEl.setAssessmentObjectUri(qtiService.createAssessmentObjectUri(fUnzippedDirRoot));
  qtiEl.setCandidateSessionContext(AssessmentTestDisplayController.this);
  qtiEl.setMapperUri(mapperUri);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  mainForm.setStandaloneRendering(true);
  mainForm.setMultipartEnabled(true);
  qtiEl=new AssessmentTestFormItem(""String_Node_Str"");
  formLayout.add(""String_Node_Str"",qtiEl);
  ResourceLocator fileResourceLocator=new PathResourceLocator(fUnzippedDirRoot.toPath());
  final ResourceLocator inputResourceLocator=ImsQTI21Resource.createResolvingResourceLocator(fileResourceLocator);
  qtiEl.setResourceLocator(inputResourceLocator);
  qtiEl.setTestSessionController(testSessionController);
  qtiEl.setAssessmentObjectUri(qtiService.createAssessmentObjectUri(fUnzippedDirRoot));
  qtiEl.setCandidateSessionContext(AssessmentTestDisplayController.this);
  qtiEl.setMapperUri(mapperUri);
}"
69496,"@Override public String getURL(Locale locale,String page){
  StringBuilder sb=new StringBuilder(64);
  sb.append(""String_Node_Str"");
  String version=Settings.getVersion();
  sb.append(generateSpace(version,locale));
  if (page != null) {
    int anchorPos=page.indexOf(""String_Node_Str"");
    if (anchorPos != -1) {
      String realPage=page.substring(0,anchorPos);
      String anchor=page.substring(anchorPos + 1);
      sb.append(realPage.replace(""String_Node_Str"",""String_Node_Str""));
      sb.append(""String_Node_Str"").append(realPage.replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"").append(anchor);
    }
 else {
      sb.append(page.replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
  return sb.toString();
}","@Override public String getURL(Locale locale,String page){
  StringBuilder sb=new StringBuilder(64);
  sb.append(""String_Node_Str"");
  String space=spaces.get(locale.toString());
  if (space == null) {
    String version=Settings.getVersion();
    space=generateSpace(version,locale);
    spaces.putIfAbsent(locale.toString(),space);
  }
  sb.append(space);
  if (page != null) {
    int anchorPos=page.indexOf(""String_Node_Str"");
    if (anchorPos != -1) {
      String realPage=page.substring(0,anchorPos);
      String anchor=page.substring(anchorPos + 1);
      if (!locale.getLanguage().equals(EN_Locale.getLanguage())) {
        String redirectedPage=getPageFromAlias(getURL(locale,realPage));
        if (redirectedPage != null) {
          realPage=redirectedPage;
        }
      }
      sb.append(realPage.replaceAll(""String_Node_Str"",""String_Node_Str""));
      sb.append(""String_Node_Str"").append(realPage.replaceAll(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"").append(anchor);
    }
 else {
      sb.append(page.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  return sb.toString();
}"
69497,"/** 
 * Convert 10.0 -> 100<br/> Convert 10.1.1 -> 101
 * @param version
 * @param locale
 * @return
 */
protected String generateSpace(String version,Locale locale){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  int firstPointIndex=version.indexOf('.');
  if (firstPointIndex > 0) {
    sb.append(version.substring(0,firstPointIndex));
    int secondPointIndex=version.indexOf('.',firstPointIndex + 1);
    if (secondPointIndex > firstPointIndex) {
      sb.append(version.substring(firstPointIndex + 1,secondPointIndex));
    }
 else     if (firstPointIndex + 1 < version.length()) {
      String subVersion=version.substring(firstPointIndex + 1);
      char[] subVersionArr=subVersion.toCharArray();
      for (int i=0; i < subVersionArr.length && Character.isDigit(subVersionArr[i]); i++) {
        sb.append(subVersionArr[i]);
      }
    }
 else {
      sb.append(""String_Node_Str"");
    }
  }
 else {
    char[] versionArr=version.toCharArray();
    for (int i=0; i < versionArr.length && Character.isDigit(versionArr[i]); i++) {
      sb.append(versionArr[i]);
    }
    sb.append(""String_Node_Str"");
  }
  if (locale.getLanguage().equals(new Locale(""String_Node_Str"").getLanguage())) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","/** 
 * Convert 10.0 -> 100<br/> Convert 10.1.1 -> 101
 * @param version
 * @param locale
 * @return
 */
protected String generateSpace(String version,Locale locale){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  int firstPointIndex=version.indexOf('.');
  if (firstPointIndex > 0) {
    sb.append(version.substring(0,firstPointIndex));
    int secondPointIndex=version.indexOf('.',firstPointIndex + 1);
    if (secondPointIndex > firstPointIndex) {
      sb.append(version.substring(firstPointIndex + 1,secondPointIndex));
    }
 else     if (firstPointIndex + 1 < version.length()) {
      String subVersion=version.substring(firstPointIndex + 1);
      char[] subVersionArr=subVersion.toCharArray();
      for (int i=0; i < subVersionArr.length && Character.isDigit(subVersionArr[i]); i++) {
        sb.append(subVersionArr[i]);
      }
    }
 else {
      sb.append(""String_Node_Str"");
    }
  }
 else {
    char[] versionArr=version.toCharArray();
    for (int i=0; i < versionArr.length && Character.isDigit(versionArr[i]); i++) {
      sb.append(versionArr[i]);
    }
    sb.append(""String_Node_Str"");
  }
  if (locale.getLanguage().equals(DE_Locale.getLanguage())) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}"
69498,"private static void setBuildIdFromBuildDate(){
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  buildIdentifier=formatter.format(buildDate);
}","private static void setBuildIdFromBuildDate(){
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  buildIdentifier=formatter.format(getBuildDate());
}"
69499,"private Settings createHttpDefaultPortSettings(){
  Settings settings=createCommonSettingsForPortTests(0,SettingsTest.httpDefaultPort);
  return settings;
}","public static Settings createHttpDefaultPortSettings(){
  Settings settings=createCommonSettingsForPortTests(0,SettingsTest.httpDefaultPort);
  return settings;
}"
69500,"private Settings createHttpsOtherPortSettings(){
  Settings settings=createCommonSettingsForPortTests(SettingsTest.httpsOtherPort,0);
  return settings;
}","public static Settings createHttpsOtherPortSettings(){
  Settings settings=createCommonSettingsForPortTests(SettingsTest.httpsOtherPort,0);
  return settings;
}"
69501,"private Settings createHttpOtherPortSettings(){
  Settings settings=createCommonSettingsForPortTests(0,SettingsTest.httpOtherPort);
  return settings;
}","public static Settings createHttpOtherPortSettings(){
  Settings settings=createCommonSettingsForPortTests(0,SettingsTest.httpOtherPort);
  return settings;
}"
69502,"private Settings createHttpsDefaultPortSettings(){
  Settings settings=createCommonSettingsForPortTests(SettingsTest.httpsDefaultPort,0);
  return settings;
}","public static Settings createHttpsDefaultPortSettings(){
  Settings settings=createCommonSettingsForPortTests(SettingsTest.httpsDefaultPort,0);
  return settings;
}"
69503,"private Settings createCommonSettingsForPortTests(int securePort,int insecurePort){
  Settings settings=new Settings();
  PersistedProperties persistedPropertiesHttp=new PersistedProperties(new DummyListener());
  Properties defaultPropertiesHttp=new Properties();
  defaultPropertiesHttp.setProperty(""String_Node_Str"",""String_Node_Str"");
  persistedPropertiesHttp.setDefaultProperties(defaultPropertiesHttp);
  settings.setPersistedProperties(persistedPropertiesHttp);
  settings.setServerSecurePort(securePort);
  settings.setServerInsecurePort(insecurePort);
  settings.setServerDomainName(SettingsTest.serverFqnd);
  WebappHelper.setServletContextPath(SettingsTest.contextPath);
  return settings;
}","public static Settings createCommonSettingsForPortTests(int securePort,int insecurePort){
  Settings settings=new Settings();
  PersistedProperties persistedPropertiesHttp=new PersistedProperties(new DummyListener());
  Properties defaultPropertiesHttp=new Properties();
  defaultPropertiesHttp.setProperty(""String_Node_Str"",""String_Node_Str"");
  persistedPropertiesHttp.setDefaultProperties(defaultPropertiesHttp);
  settings.setPersistedProperties(persistedPropertiesHttp);
  settings.setServerSecurePort(securePort);
  settings.setServerInsecurePort(insecurePort);
  settings.setServerDomainName(SettingsTest.serverFqnd);
  if (settings.getVersion() == null) {
    settings.setVersion(""String_Node_Str"");
  }
  settings.setApplicationName(""String_Node_Str"");
  WebappHelper.setServletContextPath(SettingsTest.contextPath);
  return settings;
}"
69504,"private void doCreateNode(String type){
  ICourse course=CourseFactory.getCourseEditSession(courseOres.getResourceableId());
  CourseNodeConfiguration newNodeConfig=CourseNodeFactory.getInstance().getCourseNodeConfiguration(type);
  createdNode=newNodeConfig.getInstance();
  String title=new String(newNodeConfig.getLinkText(getLocale()));
  createdNode.setShortTitle(title);
  String longTitle=new String(translate(""String_Node_Str"") + ""String_Node_Str"" + title);
  createdNode.setLongTitle(longTitle);
  createdNode.setNoAccessExplanation(translate(""String_Node_Str""));
  CourseEditorTreeModel editorTreeModel=course.getEditorTreeModel();
  if (editorTreeModel.getRootNode().equals(currentNode)) {
    int pos=currentNode.getChildCount();
    CourseNode selectedNode=currentNode.getCourseNode();
    editorTreeModel.insertCourseNodeAt(createdNode,selectedNode,pos);
  }
 else {
    CourseEditorTreeNode parentNode=(CourseEditorTreeNode)currentNode.getParent();
    CourseNode selectedNode=parentNode.getCourseNode();
    int pos=currentNode.getPosition();
    editorTreeModel.insertCourseNodeAt(createdNode,selectedNode,pos + 1);
  }
  CourseFactory.saveCourseEditorTreeModel(course.getResourceableId());
}","private void doCreateNode(String type){
  ICourse course=CourseFactory.getCourseEditSession(courseOres.getResourceableId());
  CourseNodeConfiguration newNodeConfig=CourseNodeFactory.getInstance().getCourseNodeConfiguration(type);
  createdNode=newNodeConfig.getInstance();
  String title=new String(newNodeConfig.getLinkText(getLocale()));
  createdNode.setShortTitle(title);
  createdNode.setNoAccessExplanation(translate(""String_Node_Str""));
  CourseEditorTreeModel editorTreeModel=course.getEditorTreeModel();
  if (editorTreeModel.getRootNode().equals(currentNode)) {
    int pos=currentNode.getChildCount();
    CourseNode selectedNode=currentNode.getCourseNode();
    editorTreeModel.insertCourseNodeAt(createdNode,selectedNode,pos);
  }
 else {
    CourseEditorTreeNode parentNode=(CourseEditorTreeNode)currentNode.getParent();
    CourseNode selectedNode=parentNode.getCourseNode();
    int pos=currentNode.getPosition();
    editorTreeModel.insertCourseNodeAt(createdNode,selectedNode,pos + 1);
  }
  CourseFactory.saveCourseEditorTreeModel(course.getResourceableId());
}"
69505,"/** 
 * Initializes the node edit tabbed pane and its controller for this particular node
 * @param ureq
 * @param chosenNode
 * @param groupMgr
 */
private void initNodeEditor(UserRequest ureq,CourseNode chosenNode){
  ICourse course=CourseFactory.getCourseEditSession(ores.getResourceableId());
  tabbedNodeConfig.removeAll();
  removeAsListenerAndDispose(nodeEditCntrllr);
  String type=chosenNode.getType();
  CourseNodeConfiguration cnConfig=CourseNodeFactory.getInstance().getCourseNodeConfigurationEvenForDisabledBB(type);
  if (cnConfig.isEnabled()) {
    nodeEditCntrllr=chosenNode.createEditController(ureq,getWindowControl(),stackPanel,course,euce);
    listenTo(nodeEditCntrllr);
    nodeEditCntrllr.addTabs(tabbedNodeConfig);
  }
  boolean disabled=!cnConfig.isEnabled();
  boolean deprecated=cnConfig.isDeprecated();
  main.contextPut(""String_Node_Str"",disabled);
  main.contextPut(""String_Node_Str"",deprecated);
  alternativeLink.setVisible((disabled || deprecated) && !cnConfig.getAlternativeCourseNodes().isEmpty());
  alternativeLink.setUserObject(chosenNode);
  String nodeCssClass=null;
  if (chosenNode.getParent() == null) {
    nodeCssClass=""String_Node_Str"";
  }
 else {
    nodeCssClass=cnConfig.getIconCSSClass();
  }
  main.contextPut(""String_Node_Str"",nodeCssClass);
  main.contextPut(""String_Node_Str"",chosenNode);
}","/** 
 * Initializes the node edit tabbed pane and its controller for this particular node
 * @param ureq
 * @param chosenNode
 * @param groupMgr
 */
private void initNodeEditor(UserRequest ureq,CourseNode chosenNode){
  ICourse course=CourseFactory.getCourseEditSession(ores.getResourceableId());
  tabbedNodeConfig.removeAll();
  removeAsListenerAndDispose(nodeEditCntrllr);
  String type=chosenNode.getType();
  CourseNodeConfiguration cnConfig=CourseNodeFactory.getInstance().getCourseNodeConfigurationEvenForDisabledBB(type);
  if (cnConfig.isEnabled()) {
    nodeEditCntrllr=chosenNode.createEditController(ureq,getWindowControl(),stackPanel,course,euce);
    listenTo(nodeEditCntrllr);
    nodeEditCntrllr.addTabs(tabbedNodeConfig);
  }
  boolean disabled=!cnConfig.isEnabled();
  boolean deprecated=cnConfig.isDeprecated();
  main.contextPut(""String_Node_Str"",disabled);
  main.contextPut(""String_Node_Str"",deprecated);
  alternativeLink.setVisible((disabled || deprecated) && !cnConfig.getAlternativeCourseNodes().isEmpty());
  alternativeLink.setUserObject(chosenNode);
  String nodeCssClass=null;
  if (this.cetm.getRootNode().getIdent().equals(chosenNode.getIdent())) {
    nodeCssClass=""String_Node_Str"";
  }
 else {
    nodeCssClass=cnConfig.getIconCSSClass();
  }
  main.contextPut(""String_Node_Str"",nodeCssClass);
  main.contextPut(""String_Node_Str"",chosenNode);
}"
69506,"private CourseNode createCourseNode(VFSItem item,String type){
  CourseNodeConfiguration newNodeConfig=CourseNodeFactory.getInstance().getCourseNodeConfiguration(type);
  CourseNode newNode=newNodeConfig.getInstance();
  newNode.setShortTitle(item.getName());
  newNode.setLongTitle(item.getName());
  newNode.setLearningObjectives(item.getName());
  newNode.setNoAccessExplanation(""String_Node_Str"");
  return newNode;
}","private CourseNode createCourseNode(VFSItem item,String type){
  CourseNodeConfiguration newNodeConfig=CourseNodeFactory.getInstance().getCourseNodeConfiguration(type);
  CourseNode newNode=newNodeConfig.getInstance();
  newNode.setShortTitle(item.getName());
  newNode.setLearningObjectives(item.getName());
  newNode.setNoAccessExplanation(""String_Node_Str"");
  return newNode;
}"
69507,"/** 
 * @see org.olat.core.gui.components.form.flexible.impl.FormBasicController#initForm(org.olat.core.gui.components.form.flexible.FormItemContainer,org.olat.core.gui.control.Controller,org.olat.core.gui.UserRequest)
 */
@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  shortTitle=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",SHORT_TITLE_MAX_LENGTH,(menuTitle == null ? ""String_Node_Str"" : menuTitle),formLayout);
  shortTitle.setElementCssClass(""String_Node_Str"");
  shortTitle.setMandatory(true);
  shortTitle.setCheckVisibleLength(true);
  title=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",255,(displayTitle == null ? ""String_Node_Str"" : displayTitle),formLayout);
  title.setElementCssClass(""String_Node_Str"");
  objectives=uifactory.addRichTextElementForStringData(""String_Node_Str"",""String_Node_Str"",(learningObjectives == null ? ""String_Node_Str"" : learningObjectives),10,-1,false,null,null,formLayout,ureq.getUserSession(),getWindowControl());
  objectives.setMaxLength(4000);
  String[] values=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
  displayOptions=uifactory.addDropdownSingleselect(""String_Node_Str"",""String_Node_Str"",formLayout,displayOptionsKeys,values,null);
  displayOptions.select(displayOption,true);
  final FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  formLayout.add(buttonLayout);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout).setElementCssClass(""String_Node_Str"");
}","/** 
 * @see org.olat.core.gui.components.form.flexible.impl.FormBasicController#initForm(org.olat.core.gui.components.form.flexible.FormItemContainer,org.olat.core.gui.control.Controller,org.olat.core.gui.UserRequest)
 */
@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  shortTitle=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",SHORT_TITLE_MAX_LENGTH,(menuTitle == null ? ""String_Node_Str"" : menuTitle),formLayout);
  shortTitle.setElementCssClass(""String_Node_Str"");
  shortTitle.setMandatory(true);
  shortTitle.setCheckVisibleLength(true);
  title=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",255,(displayTitle == null ? ""String_Node_Str"" : displayTitle),formLayout);
  String longTitle=new String(translate(""String_Node_Str"",new String[]{menuTitle}));
  title.setPlaceholderText(longTitle);
  title.setElementCssClass(""String_Node_Str"");
  objectives=uifactory.addRichTextElementForStringData(""String_Node_Str"",""String_Node_Str"",(learningObjectives == null ? ""String_Node_Str"" : learningObjectives),10,-1,false,null,null,formLayout,ureq.getUserSession(),getWindowControl());
  objectives.setMaxLength(4000);
  String[] values=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
  displayOptions=uifactory.addDropdownSingleselect(""String_Node_Str"",""String_Node_Str"",formLayout,displayOptionsKeys,values,null);
  displayOptions.select(displayOption,true);
  final FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  formLayout.add(buttonLayout);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout).setElementCssClass(""String_Node_Str"");
}"
69508,"@Override public List<Identity> getAssessedIdentities(SearchAssessedIdentityParams params){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(IdentityImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(GroupRoles.participant.name()).append(""String_Node_Str"").append(""String_Node_Str"");
  List<Identity> list=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),Identity.class).setParameter(""String_Node_Str"",params.getCourseEntry().getKey()).setParameter(""String_Node_Str"",params.getCourseEntry().getOlatResource().getKey()).getResultList();
  return list;
}","@Override public List<Identity> getAssessedIdentities(SearchAssessedIdentityParams params){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(IdentityImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(GroupRoles.participant.name()).append(""String_Node_Str"").append(""String_Node_Str"");
  List<Identity> list=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),Identity.class).setParameter(""String_Node_Str"",params.getCourseEntry().getKey()).getResultList();
  return list;
}"
69509,"@Override public void saveScoreEvaluation(CourseNode courseNode,Identity identity,Identity assessedIdentity,ScoreEvaluation scoreEvaluation,UserCourseEnvironment userCourseEnv,boolean incrementUserAttempts){
  ICourse course=CourseFactory.loadCourse(courseEntry.getOlatResource());
  Float score=scoreEvaluation.getScore();
  Boolean passed=scoreEvaluation.getPassed();
  Long assessmentId=scoreEvaluation.getAssessmentID();
  AssessmentEntry nodeAssessment=getOrCreate(assessedIdentity,courseNode);
  if (score == null) {
    nodeAssessment.setScore(null);
  }
 else {
    nodeAssessment.setScore(new BigDecimal(Float.toString(score)));
  }
  nodeAssessment.setPassed(passed);
  nodeAssessment.setFullyAssessed(scoreEvaluation.getFullyAssessed());
  nodeAssessment.setAssessmentId(assessmentId);
  if (incrementUserAttempts) {
    int attempts=nodeAssessment.getAttempts() == null ? 1 : nodeAssessment.getAttempts().intValue() + 1;
    nodeAssessment.setAttempts(attempts);
  }
  nodeAssessment=assessmentService.updateAssessmentEntry(nodeAssessment);
  if (courseNode instanceof AssessableCourseNode) {
    efficiencyStatementManager.updateUserEfficiencyStatement(userCourseEnv);
  }
  if (passed != null && passed.booleanValue() && course.getCourseConfig().isAutomaticCertificationEnabled()) {
    if (certificatesManager.isRecertificationAllowed(assessedIdentity,courseEntry)) {
      CertificateTemplate template=null;
      Long templateId=course.getCourseConfig().getCertificateTemplate();
      if (templateId != null) {
        template=certificatesManager.getTemplateById(templateId);
      }
      CertificateInfos certificateInfos=new CertificateInfos(assessedIdentity,score,passed);
      MailerResult result=new MailerResult();
      certificatesManager.generateCertificate(certificateInfos,courseEntry,template,result);
    }
  }
}","@Override public void saveScoreEvaluation(CourseNode courseNode,Identity identity,Identity assessedIdentity,ScoreEvaluation scoreEvaluation,UserCourseEnvironment userCourseEnv,boolean incrementUserAttempts){
  ICourse course=CourseFactory.loadCourse(courseEntry.getOlatResource());
  Float score=scoreEvaluation.getScore();
  Boolean passed=scoreEvaluation.getPassed();
  Long assessmentId=scoreEvaluation.getAssessmentID();
  AssessmentEntry assessmentEntry=getOrCreate(assessedIdentity,courseNode);
  if (score == null) {
    assessmentEntry.setScore(null);
  }
 else {
    assessmentEntry.setScore(new BigDecimal(Float.toString(score)));
  }
  assessmentEntry.setPassed(passed);
  assessmentEntry.setFullyAssessed(scoreEvaluation.getFullyAssessed());
  assessmentEntry.setAssessmentId(assessmentId);
  if (incrementUserAttempts) {
    int attempts=assessmentEntry.getAttempts() == null ? 1 : assessmentEntry.getAttempts().intValue() + 1;
    assessmentEntry.setAttempts(attempts);
  }
  assessmentEntry=assessmentService.updateAssessmentEntry(assessmentEntry);
  if (courseNode instanceof AssessableCourseNode) {
    userCourseEnv.getScoreAccounting().scoreInfoChanged((AssessableCourseNode)courseNode,scoreEvaluation);
    efficiencyStatementManager.updateUserEfficiencyStatement(userCourseEnv);
  }
  if (passed != null && passed.booleanValue() && course.getCourseConfig().isAutomaticCertificationEnabled()) {
    if (certificatesManager.isRecertificationAllowed(assessedIdentity,courseEntry)) {
      CertificateTemplate template=null;
      Long templateId=course.getCourseConfig().getCertificateTemplate();
      if (templateId != null) {
        template=certificatesManager.getTemplateById(templateId);
      }
      CertificateInfos certificateInfos=new CertificateInfos(assessedIdentity,score,passed);
      MailerResult result=new MailerResult();
      certificatesManager.generateCertificate(certificateInfos,courseEntry,template,result);
    }
  }
}"
69510,"public void recordTestAssessmentResult(UserTestSession candidateSession,AssessmentResult assessmentResult);","public UserTestSession recordTestAssessmentResult(UserTestSession candidateSession,AssessmentResult assessmentResult);"
69511,"@Override public void recordTestAssessmentResult(UserTestSession candidateSession,AssessmentResult assessmentResult){
  storeAssessmentResultFile(candidateSession,assessmentResult);
  recordOutcomeVariables(candidateSession,assessmentResult.getTestResult());
}","@Override public UserTestSession recordTestAssessmentResult(UserTestSession candidateSession,AssessmentResult assessmentResult){
  storeAssessmentResultFile(candidateSession,assessmentResult);
  recordOutcomeVariables(candidateSession,assessmentResult.getTestResult());
  return testSessionDao.update(candidateSession);
}"
69512,"private void recordOutcomeVariables(UserTestSession candidateSession,AbstractResult resultNode){
  for (  final ItemVariable itemVariable : resultNode.getItemVariables()) {
    if (itemVariable instanceof OutcomeVariable || QtiConstants.VARIABLE_DURATION_IDENTIFIER.equals(itemVariable.getIdentifier())) {
      log.audit(candidateSession.getKey() + ""String_Node_Str"" + itemVariable.getIdentifier()+ ""String_Node_Str""+ stringifyQtiValue(itemVariable.getComputedValue()));
    }
  }
}","private void recordOutcomeVariables(UserTestSession candidateSession,AbstractResult resultNode){
  for (  final ItemVariable itemVariable : resultNode.getItemVariables()) {
    if (itemVariable instanceof OutcomeVariable) {
      OutcomeVariable outcomeVariable=(OutcomeVariable)itemVariable;
      Identifier identifier=outcomeVariable.getIdentifier();
      if (QtiConstants.VARIABLE_DURATION_IDENTIFIER.equals(identifier)) {
        log.audit(candidateSession.getKey() + ""String_Node_Str"" + itemVariable.getIdentifier()+ ""String_Node_Str""+ stringifyQtiValue(itemVariable.getComputedValue()));
      }
 else       if (QTI21Constants.SCORE_IDENTIFIER.equals(identifier)) {
        Value value=itemVariable.getComputedValue();
        if (value instanceof NumberValue) {
          double score=((NumberValue)value).doubleValue();
          candidateSession.setScore(new BigDecimal(Double.toString(score)));
        }
      }
 else       if (QTI21Constants.PASS_IDENTIFIER.equals(identifier)) {
        Value value=itemVariable.getComputedValue();
        if (value instanceof BooleanValue) {
          boolean pass=((BooleanValue)value).booleanValue();
          candidateSession.setPassed(pass);
        }
      }
    }
  }
}"
69513,"@Override public RepositoryEntry importResource(Identity initialAuthor,String initialAuthorAlt,String displayname,String description,boolean withReferences,Locale locale,File file,String filename){
  ImsQTI21Resource ores=new ImsQTI21Resource();
  OLATResource resource=OLATResourceManager.getInstance().createAndPersistOLATResourceInstance(ores);
  File fResourceFileroot=FileResourceManager.getInstance().getFileResourceRootImpl(resource).getBasefile();
  File zipDir=new File(fResourceFileroot,FileResourceManager.ZIPDIR);
  FileResource.copyResource(file,filename,zipDir);
  RepositoryEntry re=CoreSpringFactory.getImpl(RepositoryService.class).create(initialAuthor,null,""String_Node_Str"",displayname,description,resource,RepositoryEntry.ACC_OWNERS);
  DBFactory.getInstance().commit();
  return re;
}","@Override public RepositoryEntry importResource(Identity initialAuthor,String initialAuthorAlt,String displayname,String description,boolean withReferences,Locale locale,File file,String filename){
  ImsQTI21Resource ores=new ImsQTI21Resource();
  OLATResource resource=OLATResourceManager.getInstance().createAndPersistOLATResourceInstance(ores);
  File fResourceFileroot=FileResourceManager.getInstance().getFileResourceRootImpl(resource).getBasefile();
  File zipDir=new File(fResourceFileroot,FileResourceManager.ZIPDIR);
  copyResource(file,filename,zipDir);
  RepositoryEntry re=CoreSpringFactory.getImpl(RepositoryService.class).create(initialAuthor,null,""String_Node_Str"",displayname,description,resource,RepositoryEntry.ACC_OWNERS);
  DBFactory.getInstance().commit();
  return re;
}"
69514,"/** 
 * @see org.olat.core.commons.modules.bc.meta.MetaInfo#getAuthorIdentity()
 */
public Identity getAuthorIdentity(){
  if (authorIdentKey == null) {
    return null;
  }
 else {
    return BaseSecurityManager.getInstance().loadIdentityByKey(authorIdentKey);
  }
}","/** 
 * @see org.olat.core.commons.modules.bc.meta.MetaInfo#getAuthorIdentity()
 */
@Override public Identity getAuthorIdentity(){
  if (authorIdentKey == null) {
    return null;
  }
 else {
    return BaseSecurityManager.getInstance().loadIdentityByKey(authorIdentKey);
  }
}"
69515,"/** 
 * @param pane
 * @param enabled
 */
public void setEnabled(int pane,boolean enabled){
  boolean wasEnabled=isEnabled();
  if (wasEnabled ^ enabled) {
    setDirty(true);
  }
  disabledPanes.set(pane,!enabled);
}","/** 
 * @param pane
 * @param enabled
 */
public void setEnabled(int pane,boolean enabled){
  boolean wasEnabled=isEnabled(pane);
  if (wasEnabled != enabled) {
    setDirty(true);
  }
  disabledPanes.set(pane,!enabled);
}"
69516,"private List<StatusDescription> validateInternalConfiguration(CourseEditorEnv cev){
  List<StatusDescription> sdList=new ArrayList<>(5);
  ModuleConfiguration config=getModuleConfiguration();
  boolean hasScoring=config.getBooleanSafe(GTASK_GRADING);
  if (hasScoring) {
    if (!config.getBooleanSafe(MSCourseNode.CONFIG_KEY_HAS_SCORE_FIELD) && !config.getBooleanSafe(MSCourseNode.CONFIG_KEY_HAS_PASSED_FIELD)) {
      addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_GRADING,sdList);
    }
  }
  if (GTAType.group.name().equals(config.getStringValue(GTACourseNode.GTASK_TYPE))) {
    List<Long> groupKeys=config.getList(GTACourseNode.GTASK_GROUPS,Long.class);
    List<Long> areaKeys=config.getList(GTACourseNode.GTASK_AREAS,Long.class);
    if (groupKeys.isEmpty() && areaKeys.isEmpty()) {
      addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_GRADING,sdList);
    }
  }
  if (!config.getBooleanSafe(GTACourseNode.GTASK_ASSIGNMENT) && !config.getBooleanSafe(GTACourseNode.GTASK_SUBMIT) && !config.getBooleanSafe(GTACourseNode.GTASK_REVIEW_AND_CORRECTION)&& !config.getBooleanSafe(GTACourseNode.GTASK_REVISION_PERIOD)&& !config.getBooleanSafe(GTACourseNode.GTASK_SAMPLE_SOLUTION)&& !config.getBooleanSafe(GTACourseNode.GTASK_GRADING)) {
    addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_WORKLOW,sdList);
  }
  if (cev != null) {
    GTAManager gtaManager=CoreSpringFactory.getImpl(GTAManager.class);
    OLATResource courseOres=cev.getCourseGroupManager().getCourseResource();
    ICourse course=CourseFactory.loadCourse(courseOres);
    if (config.getBooleanSafe(GTACourseNode.GTASK_ASSIGNMENT)) {
      File taskDirectory=gtaManager.getTasksDirectory(course.getCourseEnvironment(),this);
      if (!TaskHelper.hasDocuments(taskDirectory)) {
        addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_ASSIGNMENT,sdList);
      }
    }
    if (config.getBooleanSafe(GTACourseNode.GTASK_SAMPLE_SOLUTION)) {
      File solutionDirectory=gtaManager.getSolutionsDirectory(course.getCourseEnvironment(),this);
      if (!TaskHelper.hasDocuments(solutionDirectory)) {
        addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_SOLUTIONS,sdList);
      }
    }
    List<IdentityRef> participants=gtaManager.getDuplicatedMemberships(this);
    if (participants.size() > 0) {
      UserManager um=CoreSpringFactory.getImpl(UserManager.class);
      StringBuilder sb=new StringBuilder();
      for (      IdentityRef participant : participants) {
        String fullname=um.getUserDisplayName(participant.getKey());
        if (sb.length() > 0)         sb.append(""String_Node_Str"");
        sb.append(fullname);
      }
      String[] params=new String[]{getShortTitle(),sb.toString()};
      StatusDescription sd=new StatusDescription(StatusDescription.WARNING,""String_Node_Str"",""String_Node_Str"",params,PACKAGE_GTA);
      sd.setDescriptionForUnit(getIdent());
      sd.setActivateableViewIdentifier(GTAEditController.PANE_TAB_WORKLOW);
      sdList.add(sd);
    }
  }
  return sdList;
}","private List<StatusDescription> validateInternalConfiguration(CourseEditorEnv cev){
  List<StatusDescription> sdList=new ArrayList<>(5);
  ModuleConfiguration config=getModuleConfiguration();
  boolean hasScoring=config.getBooleanSafe(GTASK_GRADING);
  if (hasScoring) {
    if (!config.getBooleanSafe(MSCourseNode.CONFIG_KEY_HAS_SCORE_FIELD) && !config.getBooleanSafe(MSCourseNode.CONFIG_KEY_HAS_PASSED_FIELD) && !config.getBooleanSafe(MSCourseNode.CONFIG_KEY_HAS_COMMENT_FIELD)) {
      addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_GRADING,sdList);
    }
  }
  if (GTAType.group.name().equals(config.getStringValue(GTACourseNode.GTASK_TYPE))) {
    List<Long> groupKeys=config.getList(GTACourseNode.GTASK_GROUPS,Long.class);
    List<Long> areaKeys=config.getList(GTACourseNode.GTASK_AREAS,Long.class);
    if (groupKeys.isEmpty() && areaKeys.isEmpty()) {
      addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_GRADING,sdList);
    }
  }
  if (!config.getBooleanSafe(GTACourseNode.GTASK_ASSIGNMENT) && !config.getBooleanSafe(GTACourseNode.GTASK_SUBMIT) && !config.getBooleanSafe(GTACourseNode.GTASK_REVIEW_AND_CORRECTION)&& !config.getBooleanSafe(GTACourseNode.GTASK_REVISION_PERIOD)&& !config.getBooleanSafe(GTACourseNode.GTASK_SAMPLE_SOLUTION)&& !config.getBooleanSafe(GTACourseNode.GTASK_GRADING)) {
    addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_WORKLOW,sdList);
  }
  if (cev != null) {
    GTAManager gtaManager=CoreSpringFactory.getImpl(GTAManager.class);
    OLATResource courseOres=cev.getCourseGroupManager().getCourseResource();
    ICourse course=CourseFactory.loadCourse(courseOres);
    if (config.getBooleanSafe(GTACourseNode.GTASK_ASSIGNMENT)) {
      File taskDirectory=gtaManager.getTasksDirectory(course.getCourseEnvironment(),this);
      if (!TaskHelper.hasDocuments(taskDirectory)) {
        addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_ASSIGNMENT,sdList);
      }
    }
    if (config.getBooleanSafe(GTACourseNode.GTASK_SAMPLE_SOLUTION)) {
      File solutionDirectory=gtaManager.getSolutionsDirectory(course.getCourseEnvironment(),this);
      if (!TaskHelper.hasDocuments(solutionDirectory)) {
        addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_SOLUTIONS,sdList);
      }
    }
    List<IdentityRef> participants=gtaManager.getDuplicatedMemberships(this);
    if (participants.size() > 0) {
      UserManager um=CoreSpringFactory.getImpl(UserManager.class);
      StringBuilder sb=new StringBuilder();
      for (      IdentityRef participant : participants) {
        String fullname=um.getUserDisplayName(participant.getKey());
        if (sb.length() > 0)         sb.append(""String_Node_Str"");
        sb.append(fullname);
      }
      String[] params=new String[]{getShortTitle(),sb.toString()};
      StatusDescription sd=new StatusDescription(StatusDescription.WARNING,""String_Node_Str"",""String_Node_Str"",params,PACKAGE_GTA);
      sd.setDescriptionForUnit(getIdent());
      sd.setActivateableViewIdentifier(GTAEditController.PANE_TAB_WORKLOW);
      sdList.add(sd);
    }
  }
  return sdList;
}"
69517,"public DirectoryController(UserRequest ureq,WindowControl wControl,File documentsDir,String i18nDescription,String i18nBulkDownload,String zipName){
  super(ureq,wControl);
  this.zipName=zipName;
  this.documentsDir=documentsDir;
  VelocityContainer mainVC=createVelocityContainer(""String_Node_Str"");
  mainVC.contextPut(""String_Node_Str"",translate(i18nDescription));
  mainVC.contextPut(""String_Node_Str"",zipName + ""String_Node_Str"");
  if (StringHelper.containsNonWhitespace(i18nBulkDownload)) {
    bulkReviewLink=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",i18nBulkDownload,Link.BUTTON,mainVC,this);
    bulkReviewLink.setIconLeftCSS(""String_Node_Str"");
  }
  List<String> linkNames=new ArrayList<>();
  File[] documents=documentsDir.listFiles(SystemFileFilter.FILES_ONLY);
  for (  File document : documents) {
    Link link=LinkFactory.createLink(""String_Node_Str"" + CodeHelper.getRAMUniqueID(),""String_Node_Str"",getTranslator(),mainVC,this,Link.NONTRANSLATED);
    link.setCustomDisplayText(StringHelper.escapeHtml(document.getName()));
    String cssClass=CSSHelper.createFiletypeIconCssClassFor(document.getName());
    link.setIconLeftCSS(""String_Node_Str"" + cssClass);
    link.setUserObject(document);
    link.setTarget(""String_Node_Str"");
    linkNames.add(link.getComponentName());
  }
  mainVC.contextPut(""String_Node_Str"",linkNames);
  putInitialPanel(mainVC);
}","public DirectoryController(UserRequest ureq,WindowControl wControl,File documentsDir,VFSContainer documentsContainer,String i18nDescription,String i18nBulkDownload,String zipName){
  super(ureq,wControl);
  this.zipName=zipName;
  this.documentsDir=documentsDir;
  VelocityContainer mainVC=createVelocityContainer(""String_Node_Str"");
  mainVC.contextPut(""String_Node_Str"",translate(i18nDescription));
  mainVC.contextPut(""String_Node_Str"",zipName + ""String_Node_Str"");
  if (StringHelper.containsNonWhitespace(i18nBulkDownload)) {
    bulkReviewLink=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",i18nBulkDownload,Link.BUTTON,mainVC,this);
    bulkReviewLink.setIconLeftCSS(""String_Node_Str"");
  }
  List<DocumentInfos> linkNames=new ArrayList<>();
  File[] documents=documentsDir.listFiles(SystemFileFilter.FILES_ONLY);
  for (  File document : documents) {
    String linkId=""String_Node_Str"" + CodeHelper.getRAMUniqueID();
    Link link=LinkFactory.createLink(linkId,""String_Node_Str"",getTranslator(),mainVC,this,Link.NONTRANSLATED);
    link.setCustomDisplayText(StringHelper.escapeHtml(document.getName()));
    String cssClass=CSSHelper.createFiletypeIconCssClassFor(document.getName());
    link.setIconLeftCSS(""String_Node_Str"" + cssClass);
    link.setUserObject(document);
    link.setTarget(""String_Node_Str"");
    String uploadedBy=null;
    if (documentsContainer != null) {
      VFSItem item=documentsContainer.resolve(document.getName());
      if (item instanceof MetaTagged) {
        MetaInfo metaInfo=((MetaTagged)item).getMetaInfo();
        if (metaInfo != null && metaInfo.getAuthorIdentityKey() != null) {
          uploadedBy=userManager.getUserDisplayName(metaInfo.getAuthorIdentityKey());
        }
      }
    }
    linkNames.add(new DocumentInfos(link.getComponentName(),uploadedBy));
  }
  mainVC.contextPut(""String_Node_Str"",linkNames);
  putInitialPanel(mainVC);
}"
69518,"public EditSolutionController(UserRequest ureq,WindowControl wControl,Solution solution,File solutionContainer,boolean replaceFile){
  super(ureq,wControl);
  this.replaceFile=replaceFile;
  this.solution=solution;
  this.solutionContainer=solutionContainer;
  initForm(ureq);
}","private EditSolutionController(UserRequest ureq,WindowControl wControl,Solution solution,File solutionDir,VFSContainer solutionContainer,boolean replaceFile){
  super(ureq,wControl);
  this.replaceFile=replaceFile;
  this.solution=solution;
  this.solutionDir=solutionDir;
  this.solutionContainer=solutionContainer;
  initForm(ureq);
}"
69519,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  formLayout.setElementCssClass(""String_Node_Str"");
  String title=solution.getTitle() == null ? ""String_Node_Str"" : solution.getTitle();
  titleEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",128,title,formLayout);
  titleEl.setElementCssClass(""String_Node_Str"");
  titleEl.setMandatory(true);
  fileEl=uifactory.addFileElement(""String_Node_Str"",""String_Node_Str"",formLayout);
  fileEl.setMandatory(true);
  fileEl.addActionListener(FormEvent.ONCHANGE);
  if (StringHelper.containsNonWhitespace(solution.getFilename())) {
    File currentFile=new File(solutionContainer,solution.getFilename());
    if (currentFile.exists()) {
      fileEl.setInitialFile(currentFile);
    }
  }
  FormLayoutContainer buttonCont=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  buttonCont.setRootForm(mainForm);
  formLayout.add(buttonCont);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonCont);
  uifactory.addFormCancelButton(""String_Node_Str"",buttonCont,ureq,getWindowControl());
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  formLayout.setElementCssClass(""String_Node_Str"");
  String title=solution.getTitle() == null ? ""String_Node_Str"" : solution.getTitle();
  titleEl=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",128,title,formLayout);
  titleEl.setElementCssClass(""String_Node_Str"");
  titleEl.setMandatory(true);
  fileEl=uifactory.addFileElement(""String_Node_Str"",""String_Node_Str"",formLayout);
  fileEl.setMandatory(true);
  fileEl.addActionListener(FormEvent.ONCHANGE);
  if (StringHelper.containsNonWhitespace(solution.getFilename())) {
    File currentFile=new File(solutionDir,solution.getFilename());
    if (currentFile.exists()) {
      fileEl.setInitialFile(currentFile);
    }
  }
  FormLayoutContainer buttonCont=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  buttonCont.setRootForm(mainForm);
  formLayout.add(buttonCont);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonCont);
  uifactory.addFormCancelButton(""String_Node_Str"",buttonCont,ureq,getWindowControl());
}"
69520,"@Override protected void formOK(UserRequest ureq){
  solution.setTitle(titleEl.getValue());
  if (fileEl.getUploadFile() != null) {
    if (replaceFile && StringHelper.containsNonWhitespace(solution.getFilename())) {
      File currentFile=new File(solutionContainer,solution.getFilename());
      if (currentFile.exists()) {
        currentFile.delete();
      }
    }
    String filename=fileEl.getUploadFileName();
    solution.setFilename(filename);
    try {
      Path upload=fileEl.getUploadFile().toPath();
      File newFile=new File(solutionContainer,filename);
      Files.move(upload,newFile.toPath(),StandardCopyOption.REPLACE_EXISTING);
    }
 catch (    Exception ex) {
      logError(""String_Node_Str"",ex);
    }
  }
  fireEvent(ureq,Event.DONE_EVENT);
}","@Override protected void formOK(UserRequest ureq){
  solution.setTitle(titleEl.getValue());
  if (fileEl.getUploadFile() != null) {
    if (replaceFile && StringHelper.containsNonWhitespace(solution.getFilename())) {
      File currentFile=new File(solutionDir,solution.getFilename());
      if (currentFile.exists()) {
        currentFile.delete();
      }
    }
    String filename=fileEl.getUploadFileName();
    solution.setFilename(filename);
    try {
      Path upload=fileEl.getUploadFile().toPath();
      File newFile=new File(solutionDir,filename);
      Files.move(upload,newFile.toPath(),StandardCopyOption.REPLACE_EXISTING);
      VFSItem uploadedItem=solutionContainer.resolve(filename);
      if (uploadedItem instanceof MetaTagged) {
        MetaInfo metaInfo=((MetaTagged)uploadedItem).getMetaInfo();
        metaInfo.setAuthor(ureq.getIdentity());
        metaInfo.write();
      }
    }
 catch (    Exception ex) {
      logError(""String_Node_Str"",ex);
    }
  }
  fireEvent(ureq,Event.DONE_EVENT);
}"
69521,"private void appendSelectDeselectAllButtons(final StringOutput target,final Translator translator,Table table,String formName,int rows,int resultsPerPage){
  if (table.isMultiSelect()) {
    target.append(""String_Node_Str"");
    target.append(""String_Node_Str"");
    target.append(""String_Node_Str"").append(formName).append(""String_Node_Str"");
    target.append(""String_Node_Str"");
    target.append(translator.translate(""String_Node_Str""));
    target.append(""String_Node_Str"");
    target.append(""String_Node_Str"").append(formName).append(""String_Node_Str"");
    target.append(""String_Node_Str"");
    target.append(translator.translate(""String_Node_Str""));
    target.append(""String_Node_Str"");
    target.append(""String_Node_Str"");
  }
  if (table.isShowAllSelected() && (rows > resultsPerPage)) {
    target.append(""String_Node_Str"");
    target.append(A_CLASS).append(""String_Node_Str"").append(HREF_JAVA_SCRIPT_TABLE_FORM_INJECT_COMMAND_AND_SUBMIT);
    target.append(formName).append(SINGLE_COMMA_SINGLE).append(Table.COMMAND_PAGEACTION).append(SINGLE_COMMA_SINGLE).append(Table.COMMAND_SHOW_PAGES).append(CLOSE_AND_O2CLICK);
    target.append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"");
    target.append(""String_Node_Str"");
  }
}","private void appendSelectDeselectAllButtons(final StringOutput target,final Translator translator,Table table,String formName,int rows,int resultsPerPage){
  if (table.isMultiSelect()) {
    target.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(formName).append(""String_Node_Str"").append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"");
    target.append(""String_Node_Str"").append(formName).append(""String_Node_Str"").append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"");
  }
  if (table.isShowAllSelected() && (rows > resultsPerPage)) {
    target.append(""String_Node_Str"");
    target.append(A_CLASS).append(""String_Node_Str"").append(HREF_JAVA_SCRIPT_TABLE_FORM_INJECT_COMMAND_AND_SUBMIT);
    target.append(formName).append(SINGLE_COMMA_SINGLE).append(Table.COMMAND_PAGEACTION).append(SINGLE_COMMA_SINGLE).append(Table.COMMAND_SHOW_PAGES).append(CLOSE_AND_O2CLICK);
    target.append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"");
    target.append(""String_Node_Str"");
  }
}"
69522,"public void updateStatus(CourseEditorTreeModel cetm,StatusDescription[] courseStatus){
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  long lpTimeStamp=cetm.getLatestPublishTimestamp();
  if (lpTimeStamp == -1) {
    main.contextPut(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    Date d=new Date(lpTimeStamp);
    main.contextPut(""String_Node_Str"",translate(""String_Node_Str"",Formatter.getInstance(getLocale()).formatDateAndTime(d)));
  }
  if (courseStatus == null || courseStatus.length == 0) {
    main.contextPut(""String_Node_Str"",Boolean.FALSE);
    main.contextPut(""String_Node_Str"",Boolean.FALSE);
  }
 else {
    List<String> errorIsForNode=new ArrayList<String>();
    List<String> errorMessage=new ArrayList<String>();
    List<String> errorHelpWizardLink=new ArrayList<String>();
    List<String> warningIsForNode=new ArrayList<String>();
    List<String> warningMessage=new ArrayList<String>();
    List<String> warningHelpWizardLink=new ArrayList<String>();
    int errCnt=0;
    int warCnt=0;
    String helpWizardCmd;
    for (int i=0; i < courseStatus.length; i++) {
      StatusDescription description=courseStatus[i];
      String nodeId=courseStatus[i].getDescriptionForUnit();
      String nodeName=cetm.getCourseNode(nodeId).getShortName();
      helpWizardCmd=courseStatus[i].getActivateableViewIdentifier();
      if (helpWizardCmd != null) {
        helpWizardCmd=""String_Node_Str"" + courseStatus[i].getDescriptionForUnit() + ""String_Node_Str""+ courseStatus[i].getShortDescriptionKey();
      }
 else {
        helpWizardCmd=""String_Node_Str"";
      }
      if (description.isError()) {
        errCnt++;
        errorIsForNode.add(nodeName);
        errorMessage.add(description.getShortDescription(getLocale()));
        errorHelpWizardLink.add(helpWizardCmd);
      }
 else       if (description.isWarning()) {
        warCnt++;
        warningIsForNode.add(nodeName);
        warningMessage.add(description.getShortDescription(getLocale()));
        warningHelpWizardLink.add(helpWizardCmd);
      }
    }
    if (errCnt > 0 || warCnt > 0) {
      if (warCnt > 0) {
        main.contextPut(""String_Node_Str"",Boolean.TRUE);
        main.contextPut(""String_Node_Str"",warningIsForNode);
        main.contextPut(""String_Node_Str"",warningMessage);
        main.contextPut(""String_Node_Str"",warningHelpWizardLink);
        main.contextPut(""String_Node_Str"",new String[]{Integer.toString(warCnt)});
        main.contextPut(""String_Node_Str"",warningIsOpen);
      }
      if (errCnt > 0) {
        main.contextPut(""String_Node_Str"",Boolean.TRUE);
        main.contextPut(""String_Node_Str"",errorIsForNode);
        main.contextPut(""String_Node_Str"",errorMessage);
        main.contextPut(""String_Node_Str"",errorHelpWizardLink);
        main.contextPut(""String_Node_Str"",new String[]{Integer.toString(errCnt)});
        main.contextPut(""String_Node_Str"",errorIsOpen);
      }
    }
 else {
      main.contextPut(""String_Node_Str"",Boolean.FALSE);
      main.contextPut(""String_Node_Str"",Boolean.FALSE);
    }
  }
}","public void updateStatus(CourseEditorTreeModel cetm,StatusDescription[] courseStatus){
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  main.contextRemove(""String_Node_Str"");
  long lpTimeStamp=cetm.getLatestPublishTimestamp();
  if (lpTimeStamp == -1) {
    main.contextPut(""String_Node_Str"",translate(""String_Node_Str""));
  }
 else {
    Date d=new Date(lpTimeStamp);
    main.contextPut(""String_Node_Str"",translate(""String_Node_Str"",Formatter.getInstance(getLocale()).formatDateAndTime(d)));
  }
  if (courseStatus == null || courseStatus.length == 0) {
    main.contextPut(""String_Node_Str"",Boolean.FALSE);
    main.contextPut(""String_Node_Str"",Boolean.FALSE);
  }
 else {
    List<String> errorIsForNode=new ArrayList<String>();
    List<String> errorMessage=new ArrayList<String>();
    List<String> errorHelpWizardLink=new ArrayList<String>();
    List<String> warningIsForNode=new ArrayList<String>();
    List<String> warningMessage=new ArrayList<String>();
    List<String> warningHelpWizardLink=new ArrayList<String>();
    int errCnt=0;
    int warCnt=0;
    String helpWizardCmd;
    for (int i=0; i < courseStatus.length; i++) {
      StatusDescription description=courseStatus[i];
      String nodeId=courseStatus[i].getDescriptionForUnit();
      String nodeName=cetm.getCourseNode(nodeId).getShortName();
      helpWizardCmd=courseStatus[i].getActivateableViewIdentifier();
      if (helpWizardCmd != null) {
        helpWizardCmd=""String_Node_Str"" + courseStatus[i].getDescriptionForUnit() + ""String_Node_Str""+ courseStatus[i].getShortDescriptionKey();
      }
 else {
        helpWizardCmd=""String_Node_Str"";
      }
      if (description.isError()) {
        errCnt++;
        errorIsForNode.add(nodeName);
        errorMessage.add(description.getShortDescription(getLocale()));
        errorHelpWizardLink.add(helpWizardCmd);
      }
 else       if (description.isWarning()) {
        warCnt++;
        warningIsForNode.add(nodeName);
        warningMessage.add(description.getShortDescription(getLocale()));
        warningHelpWizardLink.add(helpWizardCmd);
      }
    }
    if (errCnt > 0 || warCnt > 0) {
      if (warCnt > 0) {
        main.contextPut(""String_Node_Str"",Boolean.TRUE);
        main.contextPut(""String_Node_Str"",warningIsForNode);
        main.contextPut(""String_Node_Str"",warningMessage);
        main.contextPut(""String_Node_Str"",warningHelpWizardLink);
        main.contextPut(""String_Node_Str"",new String[]{Integer.toString(warCnt)});
        main.contextPut(""String_Node_Str"",warningIsOpen);
      }
      if (errCnt > 0) {
        main.contextPut(""String_Node_Str"",Boolean.TRUE);
        main.contextPut(""String_Node_Str"",errorIsForNode);
        main.contextPut(""String_Node_Str"",errorMessage);
        main.contextPut(""String_Node_Str"",errorHelpWizardLink);
        main.contextPut(""String_Node_Str"",new String[]{Integer.toString(errCnt)});
        main.contextPut(""String_Node_Str"",errorIsOpen);
      }
    }
 else {
      main.contextPut(""String_Node_Str"",Boolean.FALSE);
      main.contextPut(""String_Node_Str"",Boolean.FALSE);
    }
  }
}"
69523,"private List<StatusDescription> validateInternalConfiguration(CourseEditorEnv cev){
  List<StatusDescription> sdList=new ArrayList<>(5);
  ModuleConfiguration config=getModuleConfiguration();
  boolean hasScoring=config.getBooleanSafe(GTASK_GRADING);
  if (hasScoring) {
    if (!config.getBooleanSafe(MSCourseNode.CONFIG_KEY_HAS_SCORE_FIELD) && !config.getBooleanSafe(MSCourseNode.CONFIG_KEY_HAS_SCORE_FIELD)) {
      addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_GRADING,sdList);
    }
  }
  if (GTAType.group.name().equals(config.getStringValue(GTACourseNode.GTASK_TYPE))) {
    List<Long> groupKeys=config.getList(GTACourseNode.GTASK_GROUPS,Long.class);
    List<Long> areaKeys=config.getList(GTACourseNode.GTASK_AREAS,Long.class);
    if (groupKeys.isEmpty() && areaKeys.isEmpty()) {
      addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_GRADING,sdList);
    }
  }
  if (!config.getBooleanSafe(GTACourseNode.GTASK_ASSIGNMENT) && !config.getBooleanSafe(GTACourseNode.GTASK_SUBMIT) && !config.getBooleanSafe(GTACourseNode.GTASK_REVIEW_AND_CORRECTION)&& !config.getBooleanSafe(GTACourseNode.GTASK_REVISION_PERIOD)&& !config.getBooleanSafe(GTACourseNode.GTASK_SAMPLE_SOLUTION)&& !config.getBooleanSafe(GTACourseNode.GTASK_GRADING)) {
    addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_WORKLOW,sdList);
  }
  if (cev != null) {
    GTAManager gtaManager=CoreSpringFactory.getImpl(GTAManager.class);
    OLATResource courseOres=cev.getCourseGroupManager().getCourseResource();
    ICourse course=CourseFactory.loadCourse(courseOres);
    if (config.getBooleanSafe(GTACourseNode.GTASK_ASSIGNMENT)) {
      File taskDirectory=gtaManager.getTasksDirectory(course.getCourseEnvironment(),this);
      if (!TaskHelper.hasDocuments(taskDirectory)) {
        addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_ASSIGNMENT,sdList);
      }
    }
    if (config.getBooleanSafe(GTACourseNode.GTASK_SAMPLE_SOLUTION)) {
      File solutionDirectory=gtaManager.getSolutionsDirectory(course.getCourseEnvironment(),this);
      if (!TaskHelper.hasDocuments(solutionDirectory)) {
        addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_SOLUTIONS,sdList);
      }
    }
    List<IdentityRef> participants=gtaManager.getDuplicatedMemberships(this);
    if (participants.size() > 0) {
      UserManager um=CoreSpringFactory.getImpl(UserManager.class);
      StringBuilder sb=new StringBuilder();
      for (      IdentityRef participant : participants) {
        String fullname=um.getUserDisplayName(participant.getKey());
        if (sb.length() > 0)         sb.append(""String_Node_Str"");
        sb.append(fullname);
      }
      String[] params=new String[]{getShortTitle(),sb.toString()};
      StatusDescription sd=new StatusDescription(StatusDescription.WARNING,""String_Node_Str"",""String_Node_Str"",params,PACKAGE_GTA);
      sd.setDescriptionForUnit(getIdent());
      sd.setActivateableViewIdentifier(GTAEditController.PANE_TAB_WORKLOW);
      sdList.add(sd);
    }
  }
  return sdList;
}","private List<StatusDescription> validateInternalConfiguration(CourseEditorEnv cev){
  List<StatusDescription> sdList=new ArrayList<>(5);
  ModuleConfiguration config=getModuleConfiguration();
  boolean hasScoring=config.getBooleanSafe(GTASK_GRADING);
  if (hasScoring) {
    if (!config.getBooleanSafe(MSCourseNode.CONFIG_KEY_HAS_SCORE_FIELD) && !config.getBooleanSafe(MSCourseNode.CONFIG_KEY_HAS_PASSED_FIELD)) {
      addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_GRADING,sdList);
    }
  }
  if (GTAType.group.name().equals(config.getStringValue(GTACourseNode.GTASK_TYPE))) {
    List<Long> groupKeys=config.getList(GTACourseNode.GTASK_GROUPS,Long.class);
    List<Long> areaKeys=config.getList(GTACourseNode.GTASK_AREAS,Long.class);
    if (groupKeys.isEmpty() && areaKeys.isEmpty()) {
      addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_GRADING,sdList);
    }
  }
  if (!config.getBooleanSafe(GTACourseNode.GTASK_ASSIGNMENT) && !config.getBooleanSafe(GTACourseNode.GTASK_SUBMIT) && !config.getBooleanSafe(GTACourseNode.GTASK_REVIEW_AND_CORRECTION)&& !config.getBooleanSafe(GTACourseNode.GTASK_REVISION_PERIOD)&& !config.getBooleanSafe(GTACourseNode.GTASK_SAMPLE_SOLUTION)&& !config.getBooleanSafe(GTACourseNode.GTASK_GRADING)) {
    addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_WORKLOW,sdList);
  }
  if (cev != null) {
    GTAManager gtaManager=CoreSpringFactory.getImpl(GTAManager.class);
    OLATResource courseOres=cev.getCourseGroupManager().getCourseResource();
    ICourse course=CourseFactory.loadCourse(courseOres);
    if (config.getBooleanSafe(GTACourseNode.GTASK_ASSIGNMENT)) {
      File taskDirectory=gtaManager.getTasksDirectory(course.getCourseEnvironment(),this);
      if (!TaskHelper.hasDocuments(taskDirectory)) {
        addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_ASSIGNMENT,sdList);
      }
    }
    if (config.getBooleanSafe(GTACourseNode.GTASK_SAMPLE_SOLUTION)) {
      File solutionDirectory=gtaManager.getSolutionsDirectory(course.getCourseEnvironment(),this);
      if (!TaskHelper.hasDocuments(solutionDirectory)) {
        addStatusErrorDescription(""String_Node_Str"",GTAEditController.PANE_TAB_SOLUTIONS,sdList);
      }
    }
    List<IdentityRef> participants=gtaManager.getDuplicatedMemberships(this);
    if (participants.size() > 0) {
      UserManager um=CoreSpringFactory.getImpl(UserManager.class);
      StringBuilder sb=new StringBuilder();
      for (      IdentityRef participant : participants) {
        String fullname=um.getUserDisplayName(participant.getKey());
        if (sb.length() > 0)         sb.append(""String_Node_Str"");
        sb.append(fullname);
      }
      String[] params=new String[]{getShortTitle(),sb.toString()};
      StatusDescription sd=new StatusDescription(StatusDescription.WARNING,""String_Node_Str"",""String_Node_Str"",params,PACKAGE_GTA);
      sd.setDescriptionForUnit(getIdent());
      sd.setActivateableViewIdentifier(GTAEditController.PANE_TAB_WORKLOW);
      sdList.add(sd);
    }
  }
  return sdList;
}"
69524,"private void setGroupHeaders(BusinessGroup group){
  mainVC.contextPut(""String_Node_Str"",group.getName());
  openGroupButton=LinkFactory.createButton(""String_Node_Str"",mainVC,this);
}","private void setGroupHeaders(BusinessGroup group){
  mainVC.contextPut(""String_Node_Str"",group.getName());
  openGroupButton=LinkFactory.createButton(""String_Node_Str"",mainVC,this);
  openGroupButton.setIconLeftCSS(""String_Node_Str"");
}"
69525,"@Override protected Task stepGrading(UserRequest ureq,Task assignedTask){
  assignedTask=super.stepGrading(ureq,assignedTask);
  if (businessGroupTask) {
    String userLog=courseEnv.getAuditManager().getUserNodeLog(gtaNode,getIdentity());
    if (StringHelper.containsNonWhitespace(userLog)) {
      mainVC.contextPut(""String_Node_Str"",userLog);
    }
 else {
      mainVC.contextRemove(""String_Node_Str"");
    }
  }
  if (config.getBooleanSafe(GTACourseNode.GTASK_ASSIGNMENT) || config.getBooleanSafe(GTACourseNode.GTASK_SUBMIT) || config.getBooleanSafe(GTACourseNode.GTASK_REVIEW_AND_CORRECTION)|| config.getBooleanSafe(GTACourseNode.GTASK_REVISION_PERIOD)|| config.getBooleanSafe(GTACourseNode.GTASK_GRADING)) {
    if (assignedTask == null || assignedTask.getTaskStatus() == TaskProcess.assignment || assignedTask.getTaskStatus() == TaskProcess.submit || assignedTask.getTaskStatus() == TaskProcess.review || assignedTask.getTaskStatus() == TaskProcess.correction || assignedTask.getTaskStatus() == TaskProcess.revision || assignedTask.getTaskStatus() == TaskProcess.solution) {
      mainVC.contextPut(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (assignedTask.getTaskStatus() == TaskProcess.graded || assignedTask.getTaskStatus() == TaskProcess.grading) {
      mainVC.contextPut(""String_Node_Str"",""String_Node_Str"");
      setGrading(ureq);
    }
  }
 else   if (assignedTask == null || assignedTask.getTaskStatus() == TaskProcess.graded || assignedTask.getTaskStatus() == TaskProcess.grading) {
    mainVC.contextPut(""String_Node_Str"",""String_Node_Str"");
    setGrading(ureq);
  }
  return assignedTask;
}","@Override protected Task stepGrading(UserRequest ureq,Task assignedTask){
  assignedTask=super.stepGrading(ureq,assignedTask);
  if (businessGroupTask) {
    String userLog=courseEnv.getAuditManager().getUserNodeLog(gtaNode,getIdentity());
    if (StringHelper.containsNonWhitespace(userLog)) {
      mainVC.contextPut(""String_Node_Str"",userLog);
    }
 else {
      mainVC.contextRemove(""String_Node_Str"");
    }
  }
  String infoTextUser=config.getStringValue(MSCourseNode.CONFIG_KEY_INFOTEXT_USER);
  if (StringHelper.containsNonWhitespace(infoTextUser)) {
    mainVC.contextPut(""String_Node_Str"",StringHelper.xssScan(infoTextUser));
  }
  if (config.getBooleanSafe(GTACourseNode.GTASK_ASSIGNMENT) || config.getBooleanSafe(GTACourseNode.GTASK_SUBMIT) || config.getBooleanSafe(GTACourseNode.GTASK_REVIEW_AND_CORRECTION)|| config.getBooleanSafe(GTACourseNode.GTASK_REVISION_PERIOD)|| config.getBooleanSafe(GTACourseNode.GTASK_GRADING)) {
    if (assignedTask == null || assignedTask.getTaskStatus() == TaskProcess.assignment || assignedTask.getTaskStatus() == TaskProcess.submit || assignedTask.getTaskStatus() == TaskProcess.review || assignedTask.getTaskStatus() == TaskProcess.correction || assignedTask.getTaskStatus() == TaskProcess.revision || assignedTask.getTaskStatus() == TaskProcess.solution) {
      mainVC.contextPut(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (assignedTask.getTaskStatus() == TaskProcess.graded || assignedTask.getTaskStatus() == TaskProcess.grading) {
      mainVC.contextPut(""String_Node_Str"",""String_Node_Str"");
      setGrading(ureq);
    }
  }
 else   if (assignedTask == null || assignedTask.getTaskStatus() == TaskProcess.graded || assignedTask.getTaskStatus() == TaskProcess.grading) {
    mainVC.contextPut(""String_Node_Str"",""String_Node_Str"");
    setGrading(ureq);
  }
  return assignedTask;
}"
69526,"@Override protected IndexSearcher refreshIfNeeded(IndexSearcher referenceToRefresh) throws IOException {
  final OOMultiReader r=(OOMultiReader)referenceToRefresh.getIndexReader();
  final IndexReader newReader=DirectoryReader.openIfChanged(r.getReader());
  final IndexReader newPermReader=DirectoryReader.openIfChanged(r.getPermanentReader());
  if (newReader == null && newPermReader == null) {
    return null;
  }
 else {
    return getSearcher(factory);
  }
}","@Override protected IndexSearcher refreshIfNeeded(IndexSearcher referenceToRefresh) throws IOException {
  final OOMultiReader r=(OOMultiReader)referenceToRefresh.getIndexReader();
  final IndexReader newReader=DirectoryReader.openIfChanged(r.getReader());
  final IndexReader newPermReader=DirectoryReader.openIfChanged(r.getPermanentReader());
  IndexSearcher searcher;
  if (refresh.getAndSet(false)) {
    searcher=getSearcher(factory);
  }
 else   if (newReader == null && newPermReader == null) {
    searcher=null;
  }
 else {
    searcher=getSearcher(factory);
  }
  return searcher;
}"
69527,"/** 
 * @param ureq
 * @param renderOnly
 */
public void dispatchRequest(UserRequest ureq,boolean renderOnly){
  final HttpServletRequest request=ureq.getHttpReq();
  final HttpServletResponse response=ureq.getHttpResp();
  final String timestampID=ureq.getTimestampID() == null ? ""String_Node_Str"" : ureq.getTimestampID();
  final String componentID=ureq.getComponentID();
  boolean inline=false;
  boolean validate=false;
  boolean checkNewWindow=false;
  boolean dispatch=false;
  boolean incTimestamp=false;
  MediaResource mr=null;
  final boolean isDebugLog=log.isDebug();
  StringBuilder debugMsg=null;
  long debug_start=0;
  if (isDebugLog) {
    debug_start=System.currentTimeMillis();
    debugMsg=new StringBuilder(""String_Node_Str"");
  }
synchronized (this) {
    GlobalSettings gsettings=wbackofficeImpl.getGlobalSettings();
    boolean bgEnab=gsettings.getAjaxFlags().isIframePostEnabled();
    if (bgEnab && (ureq.getMode() & 1) == 1) {
      if (ureq.getParameter(""String_Node_Str"") != null) {
        renderOnly=true;
      }
 else {
        try {
          String s_compID=ureq.getComponentID();
          if (s_compID == null) {
            throw new AssertException(""String_Node_Str"" + ureq.toString());
          }
          List<Component> foundPath=new ArrayList<Component>(10);
          Component target=ComponentHelper.findDescendantOrSelfByID(getContentPane(),s_compID,foundPath);
          final boolean validForDispatching;
          if (target != null) {
            String cTimest=target.getTimestamp();
            String urlCTimest=ureq.getComponentTimestamp();
            validForDispatching=cTimest.equals(urlCTimest);
            if (!validForDispatching && isDebugLog) {
              log.debug(""String_Node_Str"" + ureq.getComponentID() + ""String_Node_Str""+ ureq.getTimestampID()+ ""String_Node_Str""+ ureq.getComponentTimestamp()+ ""String_Node_Str""+ cTimest+ ""String_Node_Str""+ target);
            }
          }
 else {
            if (isDebugLog)             log.debug(""String_Node_Str"");
            validForDispatching=false;
          }
          boolean didDispatch=false;
          boolean forceReload=false;
          if (validForDispatching) {
            DispatchResult dispatchResult=doDispatchToComponent(ureq,null);
            didDispatch=dispatchResult.isDispatch();
            incTimestamp=dispatchResult.isIncTimestamp();
            forceReload=dispatchResult.isForceReload();
            if (isDebugLog) {
              long durationAfterDoDispatchToComponent=System.currentTimeMillis() - debug_start;
              log.debug(""String_Node_Str"" + durationAfterDoDispatchToComponent);
            }
          }
          MediaResource mmr=null;
          if (forceReload) {
            String reRenderUri=buildURIFor(this,timestampID,null);
            Command rmrcom=CommandFactory.createParentRedirectTo(reRenderUri);
            wbackofficeImpl.sendCommandTo(rmrcom);
          }
 else           if (didDispatch || !validForDispatching) {
            if (validForDispatching) {
              Window ww=ureq.getDispatchResult().getResultingWindow();
              if (ww != null) {
                throw new AssertException(""String_Node_Str"");
              }
              mmr=ureq.getDispatchResult().getResultingMediaResource();
              if (mmr == null) {
                inline=true;
              }
 else {
                inline=false;
              }
            }
            if (inline || !validForDispatching) {
              if (!validForDispatching) {
                fireEvent(ureq,OLDTIMESTAMPCALL);
              }
              ComponentCollection top=getContentPane();
              ValidatingVisitor vv=new ValidatingVisitor(gsettings,jsAndCssAdder);
              ComponentTraverser ct=new ComponentTraverser(vv,top,false);
              if (isDebugLog) {
                long durationBeforeVisitAll=System.currentTimeMillis() - debug_start;
                log.debug(""String_Node_Str"" + durationBeforeVisitAll);
              }
              ct.visitAll(ureq);
              if (isDebugLog) {
                long durationAfterVisitAll=System.currentTimeMillis() - debug_start;
                log.debug(""String_Node_Str"" + durationAfterVisitAll);
              }
              wbackofficeImpl.fireCycleEvent(Window.AFTER_VALIDATING);
              ValidationResult vr=vv.getValidationResult();
              boolean newJsCssAdded=vr.getJsAndCSSAdder().finishAndCheckChange();
              String newModUri=vr.getNewModuleURI();
              if (newJsCssAdded || newModUri != null) {
                String uri=buildURIForRedirect(newModUri);
                validatingCausedRerendering=true;
                Command rmrcom=CommandFactory.createParentRedirectTo(uri);
                wbackofficeImpl.sendCommandTo(rmrcom);
                setDirty(false);
              }
 else {
                wbackofficeImpl.fireCycleEvent(Window.BEFORE_INLINE_RENDERING);
                if (!this.isDirty()) {
                  wbackofficeImpl.sendCommandTo(CommandFactory.createPrepareClientCommand(null));
                }
                Command jscsscom=jsAndCssAdder.extractJSCSSCommand();
                wbackofficeImpl.sendCommandTo(jscsscom);
                if (this.isDirty()) {
                  String reRenderUri=buildURIFor(this,timestampID,null);
                  Command rmrcom=CommandFactory.createParentRedirectTo(reRenderUri);
                  wbackofficeImpl.sendCommandTo(rmrcom);
                  this.setDirty(false);
                }
 else {
                  if (isDebugLog) {
                    long durationBeforeHandleDirties=System.currentTimeMillis() - debug_start;
                    log.debug(""String_Node_Str"" + durationBeforeHandleDirties);
                  }
                  Command co;
                  try {
                    co=handleDirties();
                  }
 catch (                  CannotReplaceDOMFragmentException e) {
                    String reRenderUri=buildURIFor(this,timestampID,null);
                    co=CommandFactory.createParentRedirectTo(reRenderUri);
                  }
                  Command co2=handleBusinessPath(ureq);
                  if (isDebugLog) {
                    long durationAfterHandleDirties=System.currentTimeMillis() - debug_start;
                    log.debug(""String_Node_Str"" + durationAfterHandleDirties);
                  }
                  wbackofficeImpl.fireCycleEvent(AFTER_INLINE_RENDERING);
                  if (co != null) {
                    wbackofficeImpl.sendCommandTo(co);
                  }
                  if (co2 != null) {
                    wbackofficeImpl.sendCommandTo(co2);
                  }
                }
              }
            }
 else {
              if (!validForDispatching) {
                fireEvent(ureq,OLDTIMESTAMPCALL);
                throw new AssertException(""String_Node_Str"");
              }
              if (isDebugLog) {
                long durationBeforeCreateMediaResourceMapper=System.currentTimeMillis() - debug_start;
                log.debug(""String_Node_Str"" + durationBeforeCreateMediaResourceMapper);
              }
              MediaResourceMapper extMRM=new MediaResourceMapper();
              extMRM.setMediaResource(mmr);
              String res=CoreSpringFactory.getImpl(MapperService.class).register(ureq.getUserSession(),extMRM) + ""String_Node_Str"";
              Command rmrcom=CommandFactory.createParentRedirectForExternalResource(res);
              wbackofficeImpl.sendCommandTo(rmrcom);
              if (isDebugLog) {
                long durationAfterCreateMediaResourceMapper=System.currentTimeMillis() - debug_start;
                log.debug(""String_Node_Str"" + durationAfterCreateMediaResourceMapper);
              }
            }
          }
 else {
            if (isDebugLog) {
              long durationBeforeBuildURIFor=System.currentTimeMillis() - debug_start;
              log.debug(""String_Node_Str"" + durationBeforeBuildURIFor);
              log.debug(""String_Node_Str"" + ureq.getComponentID() + ""String_Node_Str""+ ureq.getTimestampID()+ ""String_Node_Str""+ ureq.getComponentTimestamp()+ ""String_Node_Str""+ target.getTimestamp()+ ""String_Node_Str""+ target);
            }
            String reRenderUri=buildURIFor(this,timestampID,null);
            Command rmrcom=CommandFactory.createParentRedirectTo(reRenderUri);
            wbackofficeImpl.sendCommandTo(rmrcom);
          }
          if (isDebugLog) {
            long durationBeforeServeResource=System.currentTimeMillis() - debug_start;
            log.debug(""String_Node_Str"" + durationBeforeServeResource);
          }
          wbackofficeImpl.pushCommands(request,response);
        }
 catch (        InvalidRequestParameterException e) {
          try {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST);
          }
 catch (          IOException e1) {
            log.error(""String_Node_Str"",e1);
          }
        }
catch (        Throwable th) {
          try {
            log.debug(""String_Node_Str"");
            DBFactory.getInstance().rollback();
            ChiefController msgcc=MsgFactory.createMessageChiefController(ureq,th);
            Window errWindow=msgcc.getWindow();
            errWindow.setUriPrefix(getUriPrefix());
            Windows.getWindows(ureq).registerWindow(errWindow);
            String newWinUri=buildRenderOnlyURIFor(errWindow);
            Command rmrcom=CommandFactory.createParentRedirectTo(newWinUri);
            wbackofficeImpl.sendCommandTo(rmrcom);
            MediaResource jsonmr=wbackofficeImpl.extractCommands(true);
            ServletUtil.serveResource(request,response,jsonmr);
          }
 catch (          Throwable anotherTh) {
            log.error(""String_Node_Str"",anotherTh);
          }
        }
        if (isDebugLog) {
          long durationDispatchRequest=System.currentTimeMillis() - debug_start;
          log.debug(""String_Node_Str"" + durationDispatchRequest);
        }
        return;
      }
    }
    if (renderOnly || timestampID == null) {
      inline=true;
      validate=true;
      wbackofficeImpl.fireCycleEvent(BEFORE_RENDER_ONLY);
    }
 else     if (validatingCausedRerendering && timestampID.equals(""String_Node_Str"")) {
      validatingCausedRerendering=false;
      inline=true;
      validate=false;
      checkNewWindow=false;
      dispatch=false;
    }
 else {
      if (latestTimestamp != null && !timestampID.equals(latestTimestamp)) {
        if (asyncMediaResponsible == null) {
          if ((componentID != null && componentID.equals(""String_Node_Str"")) || (ureq.getParameter(""String_Node_Str"") != null)) {
          }
 else {
            if (isDebugLog)             log.debug(""String_Node_Str"");
          }
          inline=true;
          incTimestamp=false;
        }
 else {
          mr=asyncMediaResponsible.getAsyncMediaResource(ureq);
          if (mr == null) {
            inline=true;
            checkNewWindow=true;
            validate=true;
          }
 else {
          }
        }
      }
 else {
        dispatch=true;
        checkNewWindow=true;
        validate=true;
      }
    }
    long dstart=0;
    if (isDebugLog) {
      dstart=System.currentTimeMillis();
      long syncIntroDiff=dstart - debug_start;
      debugMsg.append(""String_Node_Str"").append(syncIntroDiff).append(LOG_SEPARATOR);
    }
    boolean forceReload=false;
    if (dispatch) {
      DispatchResult dispatchResult=doDispatchToComponent(ureq,debugMsg);
      boolean didDispatch=dispatchResult.isDispatch();
      forceReload=dispatchResult.isForceReload();
      incTimestamp=dispatchResult.isIncTimestamp();
      if (isDebugLog) {
        long dstop=System.currentTimeMillis();
        long diff=dstop - dstart;
        debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
      }
      if (didDispatch) {
        mr=ureq.getDispatchResult().getResultingMediaResource();
        if (mr == null) {
          inline=true;
        }
 else {
          inline=false;
        }
      }
 else {
        inline=true;
        dispatch=false;
        checkNewWindow=false;
        validate=true;
      }
    }
    if (checkNewWindow) {
      Window resWindow=ureq.getDispatchResult().getResultingWindow();
      if (resWindow != null) {
        Windows ws=Windows.getWindows(ureq);
        if (!ws.isRegistered(resWindow)) {
          resWindow.setUriPrefix(uriPrefix);
          ws.registerWindow(resWindow);
        }
        URLBuilder ubu=new URLBuilder(uriPrefix,resWindow.getInstanceId(),String.valueOf(resWindow.timestamp),resWindow.wbackofficeImpl);
        StringOutput sout=new StringOutput(30);
        ubu.buildURI(sout,null,null);
        mr=new RedirectMediaResource(sout.toString());
        ServletUtil.serveResource(request,response,mr);
        if (isDebugLog) {
          long diff=System.currentTimeMillis() - debug_start;
          debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
          log.debug(debugMsg.toString());
          long durationDispatchRequest=System.currentTimeMillis() - debug_start;
          log.debug(""String_Node_Str"" + durationDispatchRequest);
        }
        return;
      }
    }
    if (forceReload) {
      String reRenderUri=buildURIFor(this,timestampID,null);
      String url=reRenderUri;
      DispatcherModule.redirectTo(response,url);
    }
 else     if (inline) {
      ComponentCollection top=getContentPane();
      if (validate) {
        ValidatingVisitor vv=new ValidatingVisitor(gsettings,jsAndCssAdder);
        ComponentTraverser ct=new ComponentTraverser(vv,top,false);
        ct.visitAll(ureq);
        wbackofficeImpl.fireCycleEvent(Window.AFTER_VALIDATING);
        ValidationResult vr=vv.getValidationResult();
        String newModUri=vr.getNewModuleURI();
        vr.getJsAndCSSAdder().finishAndCheckChange();
        if (newModUri != null) {
          String uri=buildURIForRedirect(newModUri);
          MediaResource mrr=new RedirectMediaResource(uri);
          validatingCausedRerendering=true;
          ServletUtil.serveResource(request,response,mrr);
          if (isDebugLog) {
            long diff=System.currentTimeMillis() - debug_start;
            debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
            log.debug(debugMsg.toString());
            long durationDispatchRequest=System.currentTimeMillis() - debug_start;
            log.debug(""String_Node_Str"" + durationDispatchRequest);
          }
          return;
        }
      }
      wbackofficeImpl.fireCycleEvent(BEFORE_INLINE_RENDERING);
      StringOutput result;
synchronized (render_mutex) {
        if (incTimestamp) {
          timestamp++;
        }
        final String newTimestamp=String.valueOf(timestamp);
        URLBuilder ubu=new URLBuilder(uriPrefix,getInstanceId(),newTimestamp,wbackofficeImpl);
        RenderResult renderResult=new RenderResult();
        InterceptHandler interceptHandler=wbackofficeImpl.getInterceptHandler();
        if (interceptHandler != null) {
          InterceptHandlerInstance dhri=interceptHandler.createInterceptHandlerInstance();
          renderResult.setInterceptHandlerRenderInstance(dhri);
        }
        Renderer fr=Renderer.getInstance(top,top.getTranslator(),ubu,renderResult,gsettings);
        long rstart=0;
        if (isDebugLog) {
          rstart=System.currentTimeMillis();
        }
        result=StringOutputPool.allocStringBuilder(100000);
        fr.render(top,result,null);
        if (isDebugLog) {
          long rstop=System.currentTimeMillis();
          long diff=rstop - rstart;
          debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
        }
        if (renderResult.getRenderException() != null) {
          throw new OLATRuntimeException(Window.class,renderResult.getLogMsg(),renderResult.getRenderException());
        }
        AsyncMediaResponsible amr=renderResult.getAsyncMediaResponsible();
        setAsyncMediaResponsible(amr);
        latestTimestamp=newTimestamp;
      }
      if (isDebugLog) {
        long diff=System.currentTimeMillis() - debug_start;
        debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
      }
      wbackofficeImpl.fireCycleEvent(AFTER_INLINE_RENDERING);
      ServletUtil.serveStringResource(response,result);
      StringOutputPool.free(result);
      if (isDebugLog) {
        long diff=System.currentTimeMillis() - debug_start;
        debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
      }
    }
  }
  if (!inline) {
    if (isDebugLog) {
      long diff=System.currentTimeMillis() - debug_start;
      debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
    }
    ServletUtil.serveResource(request,response,mr);
    if (isDebugLog) {
      long diff=System.currentTimeMillis() - debug_start;
      debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
    }
  }
  if (isDebugLog) {
    log.info(debugMsg.toString());
    long durationDispatchRequest=System.currentTimeMillis() - debug_start;
    log.debug(""String_Node_Str"" + durationDispatchRequest);
  }
}","/** 
 * @param ureq
 * @param renderOnly
 */
public void dispatchRequest(UserRequest ureq,boolean renderOnly){
  final HttpServletRequest request=ureq.getHttpReq();
  final HttpServletResponse response=ureq.getHttpResp();
  final String timestampID=ureq.getTimestampID() == null ? ""String_Node_Str"" : ureq.getTimestampID();
  final String componentID=ureq.getComponentID();
  boolean inline=false;
  boolean validate=false;
  boolean checkNewWindow=false;
  boolean dispatch=false;
  boolean incTimestamp=false;
  MediaResource mr=null;
  final boolean isDebugLog=log.isDebug();
  StringBuilder debugMsg=null;
  long debug_start=0;
  if (isDebugLog) {
    debug_start=System.currentTimeMillis();
    debugMsg=new StringBuilder(""String_Node_Str"");
  }
synchronized (this) {
    GlobalSettings gsettings=wbackofficeImpl.getGlobalSettings();
    boolean bgEnab=gsettings.getAjaxFlags().isIframePostEnabled();
    if (bgEnab && (ureq.getMode() & 1) == 1) {
      if (ureq.getParameter(""String_Node_Str"") != null) {
        renderOnly=true;
      }
 else {
        try {
          String s_compID=ureq.getComponentID();
          if (s_compID == null) {
            throw new AssertException(""String_Node_Str"" + ureq.toString());
          }
          List<Component> foundPath=new ArrayList<Component>(10);
          Component target=ComponentHelper.findDescendantOrSelfByID(getContentPane(),s_compID,foundPath);
          final boolean validForDispatching;
          if (target != null) {
            String cTimest=target.getTimestamp();
            String urlCTimest=ureq.getComponentTimestamp();
            validForDispatching=cTimest.equals(urlCTimest);
            if (!validForDispatching && isDebugLog) {
              log.debug(""String_Node_Str"" + ureq.getComponentID() + ""String_Node_Str""+ ureq.getTimestampID()+ ""String_Node_Str""+ ureq.getComponentTimestamp()+ ""String_Node_Str""+ cTimest+ ""String_Node_Str""+ target);
            }
          }
 else {
            if (isDebugLog)             log.debug(""String_Node_Str"");
            validForDispatching=false;
          }
          boolean didDispatch=false;
          boolean forceReload=false;
          if (validForDispatching) {
            DispatchResult dispatchResult=doDispatchToComponent(ureq,null);
            didDispatch=dispatchResult.isDispatch();
            incTimestamp=dispatchResult.isIncTimestamp();
            forceReload=dispatchResult.isForceReload();
            if (isDebugLog) {
              long durationAfterDoDispatchToComponent=System.currentTimeMillis() - debug_start;
              log.debug(""String_Node_Str"" + durationAfterDoDispatchToComponent);
            }
          }
          MediaResource mmr=null;
          if (forceReload) {
            String reRenderUri=buildURIFor(this,timestampID,null);
            Command rmrcom=CommandFactory.createParentRedirectTo(reRenderUri);
            wbackofficeImpl.sendCommandTo(rmrcom);
          }
 else           if (didDispatch || !validForDispatching) {
            if (validForDispatching) {
              Window ww=ureq.getDispatchResult().getResultingWindow();
              if (ww != null) {
                throw new AssertException(""String_Node_Str"");
              }
              mmr=ureq.getDispatchResult().getResultingMediaResource();
              if (mmr == null) {
                inline=true;
              }
 else {
                inline=false;
              }
            }
            if (inline || !validForDispatching) {
              if (!validForDispatching) {
                fireEvent(ureq,OLDTIMESTAMPCALL);
              }
              ComponentCollection top=getContentPane();
              ValidatingVisitor vv=new ValidatingVisitor(gsettings,jsAndCssAdder);
              ComponentTraverser ct=new ComponentTraverser(vv,top,false);
              if (isDebugLog) {
                long durationBeforeVisitAll=System.currentTimeMillis() - debug_start;
                log.debug(""String_Node_Str"" + durationBeforeVisitAll);
              }
              ct.visitAll(ureq);
              if (isDebugLog) {
                long durationAfterVisitAll=System.currentTimeMillis() - debug_start;
                log.debug(""String_Node_Str"" + durationAfterVisitAll);
              }
              wbackofficeImpl.fireCycleEvent(Window.AFTER_VALIDATING);
              ValidationResult vr=vv.getValidationResult();
              boolean newJsCssAdded=vr.getJsAndCSSAdder().finishAndCheckChange();
              String newModUri=vr.getNewModuleURI();
              if (newJsCssAdded || newModUri != null) {
                String uri=buildURIForRedirect(newModUri);
                validatingCausedRerendering=true;
                Command rmrcom=CommandFactory.createParentRedirectTo(uri);
                wbackofficeImpl.sendCommandTo(rmrcom);
                setDirty(false);
              }
 else {
                wbackofficeImpl.fireCycleEvent(Window.BEFORE_INLINE_RENDERING);
                if (!this.isDirty()) {
                  wbackofficeImpl.sendCommandTo(CommandFactory.createPrepareClientCommand(null));
                }
                Command jscsscom=jsAndCssAdder.extractJSCSSCommand();
                wbackofficeImpl.sendCommandTo(jscsscom);
                if (this.isDirty()) {
                  String reRenderUri=buildURIFor(this,timestampID,null);
                  Command rmrcom=CommandFactory.createParentRedirectTo(reRenderUri);
                  wbackofficeImpl.sendCommandTo(rmrcom);
                  this.setDirty(false);
                }
 else {
                  if (isDebugLog) {
                    long durationBeforeHandleDirties=System.currentTimeMillis() - debug_start;
                    log.debug(""String_Node_Str"" + durationBeforeHandleDirties);
                  }
                  Command co;
                  try {
                    co=handleDirties();
                  }
 catch (                  CannotReplaceDOMFragmentException e) {
                    String reRenderUri=buildURIFor(this,timestampID,null);
                    co=CommandFactory.createParentRedirectTo(reRenderUri);
                  }
                  Command co2=handleBusinessPath(ureq);
                  if (isDebugLog) {
                    long durationAfterHandleDirties=System.currentTimeMillis() - debug_start;
                    log.debug(""String_Node_Str"" + durationAfterHandleDirties);
                  }
                  wbackofficeImpl.fireCycleEvent(AFTER_INLINE_RENDERING);
                  if (co != null) {
                    wbackofficeImpl.sendCommandTo(co);
                  }
                  if (co2 != null) {
                    wbackofficeImpl.sendCommandTo(co2);
                  }
                }
              }
            }
 else {
              if (!validForDispatching) {
                fireEvent(ureq,OLDTIMESTAMPCALL);
                throw new AssertException(""String_Node_Str"");
              }
              if (isDebugLog) {
                long durationBeforeCreateMediaResourceMapper=System.currentTimeMillis() - debug_start;
                log.debug(""String_Node_Str"" + durationBeforeCreateMediaResourceMapper);
              }
              MediaResourceMapper extMRM=new MediaResourceMapper();
              extMRM.setMediaResource(mmr);
              MapperKey mapperKey=CoreSpringFactory.getImpl(MapperService.class).register(ureq.getUserSession(),extMRM);
              String resUrl=mapperKey.getUrl() + ""String_Node_Str"";
              Command rmrcom=CommandFactory.createParentRedirectForExternalResource(resUrl);
              wbackofficeImpl.sendCommandTo(rmrcom);
              if (isDebugLog) {
                long durationAfterCreateMediaResourceMapper=System.currentTimeMillis() - debug_start;
                log.debug(""String_Node_Str"" + durationAfterCreateMediaResourceMapper);
              }
            }
          }
 else {
            if (isDebugLog) {
              long durationBeforeBuildURIFor=System.currentTimeMillis() - debug_start;
              log.debug(""String_Node_Str"" + durationBeforeBuildURIFor);
              log.debug(""String_Node_Str"" + ureq.getComponentID() + ""String_Node_Str""+ ureq.getTimestampID()+ ""String_Node_Str""+ ureq.getComponentTimestamp()+ ""String_Node_Str""+ target.getTimestamp()+ ""String_Node_Str""+ target);
            }
            String reRenderUri=buildURIFor(this,timestampID,null);
            Command rmrcom=CommandFactory.createParentRedirectTo(reRenderUri);
            wbackofficeImpl.sendCommandTo(rmrcom);
          }
          if (isDebugLog) {
            long durationBeforeServeResource=System.currentTimeMillis() - debug_start;
            log.debug(""String_Node_Str"" + durationBeforeServeResource);
          }
          wbackofficeImpl.pushCommands(request,response);
        }
 catch (        InvalidRequestParameterException e) {
          try {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST);
          }
 catch (          IOException e1) {
            log.error(""String_Node_Str"",e1);
          }
        }
catch (        Throwable th) {
          try {
            log.debug(""String_Node_Str"");
            DBFactory.getInstance().rollback();
            ChiefController msgcc=MsgFactory.createMessageChiefController(ureq,th);
            Window errWindow=msgcc.getWindow();
            errWindow.setUriPrefix(getUriPrefix());
            Windows.getWindows(ureq).registerWindow(errWindow);
            String newWinUri=buildRenderOnlyURIFor(errWindow);
            Command rmrcom=CommandFactory.createParentRedirectTo(newWinUri);
            wbackofficeImpl.sendCommandTo(rmrcom);
            MediaResource jsonmr=wbackofficeImpl.extractCommands(true);
            ServletUtil.serveResource(request,response,jsonmr);
          }
 catch (          Throwable anotherTh) {
            log.error(""String_Node_Str"",anotherTh);
          }
        }
        if (isDebugLog) {
          long durationDispatchRequest=System.currentTimeMillis() - debug_start;
          log.debug(""String_Node_Str"" + durationDispatchRequest);
        }
        return;
      }
    }
    if (renderOnly || timestampID == null) {
      inline=true;
      validate=true;
      wbackofficeImpl.fireCycleEvent(BEFORE_RENDER_ONLY);
    }
 else     if (validatingCausedRerendering && timestampID.equals(""String_Node_Str"")) {
      validatingCausedRerendering=false;
      inline=true;
      validate=false;
      checkNewWindow=false;
      dispatch=false;
    }
 else {
      if (latestTimestamp != null && !timestampID.equals(latestTimestamp)) {
        if (asyncMediaResponsible == null) {
          if ((componentID != null && componentID.equals(""String_Node_Str"")) || (ureq.getParameter(""String_Node_Str"") != null)) {
          }
 else {
            if (isDebugLog)             log.debug(""String_Node_Str"");
          }
          inline=true;
          incTimestamp=false;
        }
 else {
          mr=asyncMediaResponsible.getAsyncMediaResource(ureq);
          if (mr == null) {
            inline=true;
            checkNewWindow=true;
            validate=true;
          }
 else {
          }
        }
      }
 else {
        dispatch=true;
        checkNewWindow=true;
        validate=true;
      }
    }
    long dstart=0;
    if (isDebugLog) {
      dstart=System.currentTimeMillis();
      long syncIntroDiff=dstart - debug_start;
      debugMsg.append(""String_Node_Str"").append(syncIntroDiff).append(LOG_SEPARATOR);
    }
    boolean forceReload=false;
    if (dispatch) {
      DispatchResult dispatchResult=doDispatchToComponent(ureq,debugMsg);
      boolean didDispatch=dispatchResult.isDispatch();
      forceReload=dispatchResult.isForceReload();
      incTimestamp=dispatchResult.isIncTimestamp();
      if (isDebugLog) {
        long dstop=System.currentTimeMillis();
        long diff=dstop - dstart;
        debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
      }
      if (didDispatch) {
        mr=ureq.getDispatchResult().getResultingMediaResource();
        if (mr == null) {
          inline=true;
        }
 else {
          inline=false;
        }
      }
 else {
        inline=true;
        dispatch=false;
        checkNewWindow=false;
        validate=true;
      }
    }
    if (checkNewWindow) {
      Window resWindow=ureq.getDispatchResult().getResultingWindow();
      if (resWindow != null) {
        Windows ws=Windows.getWindows(ureq);
        if (!ws.isRegistered(resWindow)) {
          resWindow.setUriPrefix(uriPrefix);
          ws.registerWindow(resWindow);
        }
        URLBuilder ubu=new URLBuilder(uriPrefix,resWindow.getInstanceId(),String.valueOf(resWindow.timestamp),resWindow.wbackofficeImpl);
        StringOutput sout=new StringOutput(30);
        ubu.buildURI(sout,null,null);
        mr=new RedirectMediaResource(sout.toString());
        ServletUtil.serveResource(request,response,mr);
        if (isDebugLog) {
          long diff=System.currentTimeMillis() - debug_start;
          debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
          log.debug(debugMsg.toString());
          long durationDispatchRequest=System.currentTimeMillis() - debug_start;
          log.debug(""String_Node_Str"" + durationDispatchRequest);
        }
        return;
      }
    }
    if (forceReload) {
      String reRenderUri=buildURIFor(this,timestampID,null);
      String url=reRenderUri;
      DispatcherModule.redirectTo(response,url);
    }
 else     if (inline) {
      ComponentCollection top=getContentPane();
      if (validate) {
        ValidatingVisitor vv=new ValidatingVisitor(gsettings,jsAndCssAdder);
        ComponentTraverser ct=new ComponentTraverser(vv,top,false);
        ct.visitAll(ureq);
        wbackofficeImpl.fireCycleEvent(Window.AFTER_VALIDATING);
        ValidationResult vr=vv.getValidationResult();
        String newModUri=vr.getNewModuleURI();
        vr.getJsAndCSSAdder().finishAndCheckChange();
        if (newModUri != null) {
          String uri=buildURIForRedirect(newModUri);
          MediaResource mrr=new RedirectMediaResource(uri);
          validatingCausedRerendering=true;
          ServletUtil.serveResource(request,response,mrr);
          if (isDebugLog) {
            long diff=System.currentTimeMillis() - debug_start;
            debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
            log.debug(debugMsg.toString());
            long durationDispatchRequest=System.currentTimeMillis() - debug_start;
            log.debug(""String_Node_Str"" + durationDispatchRequest);
          }
          return;
        }
      }
      wbackofficeImpl.fireCycleEvent(BEFORE_INLINE_RENDERING);
      StringOutput result;
synchronized (render_mutex) {
        if (incTimestamp) {
          timestamp++;
        }
        final String newTimestamp=String.valueOf(timestamp);
        URLBuilder ubu=new URLBuilder(uriPrefix,getInstanceId(),newTimestamp,wbackofficeImpl);
        RenderResult renderResult=new RenderResult();
        InterceptHandler interceptHandler=wbackofficeImpl.getInterceptHandler();
        if (interceptHandler != null) {
          InterceptHandlerInstance dhri=interceptHandler.createInterceptHandlerInstance();
          renderResult.setInterceptHandlerRenderInstance(dhri);
        }
        Renderer fr=Renderer.getInstance(top,top.getTranslator(),ubu,renderResult,gsettings);
        long rstart=0;
        if (isDebugLog) {
          rstart=System.currentTimeMillis();
        }
        result=StringOutputPool.allocStringBuilder(100000);
        fr.render(top,result,null);
        if (isDebugLog) {
          long rstop=System.currentTimeMillis();
          long diff=rstop - rstart;
          debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
        }
        if (renderResult.getRenderException() != null) {
          throw new OLATRuntimeException(Window.class,renderResult.getLogMsg(),renderResult.getRenderException());
        }
        AsyncMediaResponsible amr=renderResult.getAsyncMediaResponsible();
        setAsyncMediaResponsible(amr);
        latestTimestamp=newTimestamp;
      }
      if (isDebugLog) {
        long diff=System.currentTimeMillis() - debug_start;
        debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
      }
      wbackofficeImpl.fireCycleEvent(AFTER_INLINE_RENDERING);
      ServletUtil.serveStringResource(response,result);
      StringOutputPool.free(result);
      if (isDebugLog) {
        long diff=System.currentTimeMillis() - debug_start;
        debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
      }
    }
  }
  if (!inline) {
    if (isDebugLog) {
      long diff=System.currentTimeMillis() - debug_start;
      debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
    }
    ServletUtil.serveResource(request,response,mr);
    if (isDebugLog) {
      long diff=System.currentTimeMillis() - debug_start;
      debugMsg.append(""String_Node_Str"").append(diff).append(LOG_SEPARATOR);
    }
  }
  if (isDebugLog) {
    log.info(debugMsg.toString());
    long durationDispatchRequest=System.currentTimeMillis() - debug_start;
    log.debug(""String_Node_Str"" + durationDispatchRequest);
  }
}"
69528,"/** 
 * Internal helper - does all the magic
 * @param group
 * @param actor
 * @param subjectKey
 * @param bodyKey
 * @return
 */
private static MailTemplate createMailTemplate(BusinessGroupShort group,Identity actor,String subjectKey,String bodyKey){
  String[] bodyArgs=new String[]{actor.getUser().getProperty(UserConstants.FIRSTNAME,null),actor.getUser().getProperty(UserConstants.LASTNAME,null),actor.getUser().getProperty(UserConstants.EMAIL,null),actor.getUser().getProperty(UserConstants.EMAIL,null)};
  Locale locale=I18nManager.getInstance().getLocaleOrDefault(actor.getUser().getPreferences().getLanguage());
  Translator trans=Util.createPackageTranslator(BGMailHelper.class,locale,Util.createPackageTranslator(BusinessGroupListController.class,locale));
  String subject=trans.translate(subjectKey);
  String body=trans.translate(bodyKey,bodyArgs);
  final String courselist;
  final String groupname;
  final String groupdescription;
  StringBuilder learningResources=new StringBuilder();
  if (group != null) {
    BusinessGroupService businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
    List<RepositoryEntryShort> repoEntries=businessGroupService.findShortRepositoryEntries(Collections.singletonList(group),0,-1);
    for (    RepositoryEntryShort entry : repoEntries) {
      String title=entry.getDisplayname();
      String url=BusinessControlFactory.getInstance().getURLFromBusinessPathString(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"");
      learningResources.append(title);
      learningResources.append(""String_Node_Str"");
      learningResources.append(url);
      learningResources.append(""String_Node_Str"");
    }
    courselist=learningResources.toString();
    groupname=group.getName();
    groupdescription=(group instanceof BusinessGroup ? FilterFactory.getHtmlTagAndDescapingFilter().filter(((BusinessGroup)group).getDescription()) : ""String_Node_Str"");
    subject=subject.replaceAll(""String_Node_Str"",groupname == null ? ""String_Node_Str"" : groupname);
    body=body.replaceAll(""String_Node_Str"",groupname == null ? ""String_Node_Str"" : groupname);
    body=body.replaceAll(""String_Node_Str"",groupdescription == null ? ""String_Node_Str"" : groupdescription);
    body=body.replaceAll(""String_Node_Str"",courselist == null ? ""String_Node_Str"" : courselist);
  }
 else {
    courselist=""String_Node_Str"";
    groupname=""String_Node_Str"";
    groupdescription=""String_Node_Str"";
  }
  MailTemplate mailTempl=new MailTemplate(subject,body,null){
    @Override public void putVariablesInMailContext(    VelocityContext context,    Identity identity){
      User user=identity.getUser();
      context.put(""String_Node_Str"",user.getProperty(UserConstants.FIRSTNAME,null));
      context.put(""String_Node_Str"",user.getProperty(UserConstants.LASTNAME,null));
      context.put(""String_Node_Str"",user.getProperty(UserConstants.EMAIL,null));
      context.put(""String_Node_Str"",groupname);
      context.put(""String_Node_Str"",groupdescription);
      context.put(""String_Node_Str"",courselist);
    }
  }
;
  return mailTempl;
}","/** 
 * Internal helper - does all the magic
 * @param group
 * @param actor
 * @param subjectKey
 * @param bodyKey
 * @return
 */
private static MailTemplate createMailTemplate(BusinessGroupShort group,Identity actor,String subjectKey,String bodyKey){
  String[] bodyArgs=new String[]{actor.getUser().getProperty(UserConstants.FIRSTNAME,null),actor.getUser().getProperty(UserConstants.LASTNAME,null),actor.getUser().getProperty(UserConstants.EMAIL,null),actor.getUser().getProperty(UserConstants.EMAIL,null)};
  Locale locale=I18nManager.getInstance().getLocaleOrDefault(actor.getUser().getPreferences().getLanguage());
  Translator trans=Util.createPackageTranslator(BGMailHelper.class,locale,Util.createPackageTranslator(BusinessGroupListController.class,locale));
  String subject=trans.translate(subjectKey);
  String body=trans.translate(bodyKey,bodyArgs);
  final String courselist;
  final String groupname;
  final String groupdescription;
  StringBuilder learningResources=new StringBuilder();
  if (group != null) {
    BusinessGroupService businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
    List<RepositoryEntryShort> repoEntries=businessGroupService.findShortRepositoryEntries(Collections.singletonList(group),0,-1);
    for (    RepositoryEntryShort entry : repoEntries) {
      String title=entry.getDisplayname();
      String url=BusinessControlFactory.getInstance().getURLFromBusinessPathString(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"");
      learningResources.append(title);
      learningResources.append(""String_Node_Str"");
      learningResources.append(url);
      learningResources.append(""String_Node_Str"");
    }
    courselist=learningResources.toString();
    groupname=group.getName();
    groupdescription=(group instanceof BusinessGroup ? FilterFactory.getHtmlTagAndDescapingFilter().filter(((BusinessGroup)group).getDescription()) : ""String_Node_Str"");
    subject=subject.replace(""String_Node_Str"",groupname == null ? ""String_Node_Str"" : groupname);
    body=body.replace(""String_Node_Str"",groupname == null ? ""String_Node_Str"" : groupname);
    body=body.replace(""String_Node_Str"",groupdescription == null ? ""String_Node_Str"" : groupdescription);
    body=body.replace(""String_Node_Str"",courselist == null ? ""String_Node_Str"" : courselist);
  }
 else {
    courselist=""String_Node_Str"";
    groupname=""String_Node_Str"";
    groupdescription=""String_Node_Str"";
  }
  MailTemplate mailTempl=new MailTemplate(subject,body,null){
    @Override public void putVariablesInMailContext(    VelocityContext context,    Identity identity){
      User user=identity.getUser();
      context.put(""String_Node_Str"",user.getProperty(UserConstants.FIRSTNAME,null));
      context.put(""String_Node_Str"",user.getProperty(UserConstants.LASTNAME,null));
      context.put(""String_Node_Str"",user.getProperty(UserConstants.EMAIL,null));
      context.put(""String_Node_Str"",groupname);
      context.put(""String_Node_Str"",groupdescription);
      context.put(""String_Node_Str"",courselist);
    }
  }
;
  return mailTempl;
}"
69529,"private Identity doCreateAndPersistIdentity(){
  String lang=languageSingleSelection.getSelectedKey();
  String username=usernameTextElement.getValue();
  String pwd=null;
  if (showPasswordFields && authCheckbox.isSelected(0)) {
    pwd=psw1TextElement.getValue();
    if (!StringHelper.containsNonWhitespace(pwd)) {
      pwd=null;
    }
  }
  UserManager um=UserManager.getInstance();
  User newUser=um.createUser(null,null,null);
  for (  UserPropertyHandler userPropertyHandler : userPropertyHandlers) {
    FormItem propertyItem=this.flc.getFormComponent(userPropertyHandler.getName());
    userPropertyHandler.updateUserFromFormItem(newUser,propertyItem);
  }
  newUser.getPreferences().setLanguage(lang);
  newUser.getPreferences().setInformSessionTimeout(true);
  Identity ident=AuthHelper.createAndPersistIdentityAndUserWithUserGroup(username,null,pwd,newUser);
  return ident;
}","private Identity doCreateAndPersistIdentity(){
  String lang=languageSingleSelection.getSelectedKey();
  String username=usernameTextElement.getValue();
  String pwd=null;
  if (showPasswordFields && authCheckbox.isSelected(0)) {
    pwd=psw1TextElement.getValue();
    if (!StringHelper.containsNonWhitespace(pwd)) {
      pwd=null;
    }
  }
  UserManager um=UserManager.getInstance();
  User newUser=um.createUser(null,null,null);
  for (  UserPropertyHandler userPropertyHandler : userPropertyHandlers) {
    FormItem propertyItem=this.flc.getFormComponent(userPropertyHandler.getName());
    userPropertyHandler.updateUserFromFormItem(newUser,propertyItem);
  }
  newUser.getPreferences().setLanguage(lang);
  newUser.getPreferences().setInformSessionTimeout(true);
  Identity ident=securityManager.createAndPersistIdentityAndUserWithDefaultProviderAndUserGroup(username,null,pwd,newUser);
  return ident;
}"
69530,"@Override protected boolean validateFormLogic(UserRequest ureq){
  Object validatedInp=getFromRunContext(""String_Node_Str"");
  String inp=textAreaElement.getValue();
  if (validatedInp != null && validatedInp.equals(inp)) {
    return true;
  }
  String defaultlang=I18nModule.getDefaultLocale().toString();
  List<String> importedEmails=new ArrayList<String>();
  boolean importDataError=false;
  idents=new ArrayList<Identity>();
  newIdents=new ArrayList<TransientIdentity>();
  updateIdents=new ArrayList<UpdateIdentity>();
  Set<String> tempEmailsInUse=getTemporaryEmailInUse();
  Collection<String> languages=I18nModule.getEnabledLanguageKeys();
  String[] lines=inp.split(""String_Node_Str"");
  for (int i=0; i < lines.length; i++) {
    if (i % 25 == 0) {
      DBFactory.getInstance().commitAndCloseSession();
    }
    String line=lines[i];
    if (line.equals(""String_Node_Str""))     continue;
    String delimiter=""String_Node_Str"";
    if (line.indexOf(delimiter) == -1)     delimiter=""String_Node_Str"";
    String[] parts=line.split(delimiter);
    String login, pwd, lang;
    int columnId=0;
    if (parts.length > columnId) {
      login=parts[columnId].trim();
      if (!UserManager.getInstance().syntaxCheckOlatLogin(login)) {
        textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1),login});
        importDataError=true;
        break;
      }
    }
 else {
      textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1)});
      importDataError=true;
      break;
    }
    columnId++;
    if (canCreateOLATPassword) {
      if (parts.length > columnId) {
        pwd=parts[columnId].trim();
        if (StringHelper.containsNonWhitespace(pwd)) {
          if (pwd.startsWith(UserImportController.SHIBBOLETH_MARKER) && ShibbolethModule.isEnableShibbolethLogins()) {
          }
 else           if (!UserManager.getInstance().syntaxCheckOlatPassword(pwd)) {
            textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1),pwd});
            importDataError=true;
            break;
          }
        }
 else {
          pwd=null;
        }
      }
 else {
        textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1)});
        importDataError=true;
        break;
      }
    }
 else {
      pwd=null;
    }
    columnId++;
    if (parts.length > columnId) {
      lang=parts[columnId].trim();
      if (lang.equals(""String_Node_Str"")) {
        lang=defaultlang;
      }
 else       if (!languages.contains(lang)) {
        textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1),lang});
        importDataError=true;
        break;
      }
    }
 else {
      lang=defaultlang;
    }
    columnId++;
    Identity ident=BaseSecurityManager.getInstance().findIdentityByName(login);
    if (ident != null) {
      UpdateIdentity uIdentity=new UpdateIdentity(ident,pwd,lang);
      idents.add(uIdentity);
      updateIdents.add(uIdentity);
      importDataError=updateUserProperties(uIdentity,parts,i,columnId,tempEmailsInUse,importedEmails);
      if (importDataError)       break;
    }
 else {
      for (Iterator<TransientIdentity> it_news=newIdents.iterator(); it_news.hasNext(); ) {
        TransientIdentity singleUser=it_news.next();
        if (singleUser.getName().equalsIgnoreCase(login)) {
          textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1),login});
          importDataError=true;
          break;
        }
      }
      TransientIdentity ud=new TransientIdentity();
      ud.setName(login);
      ud.setPassword(pwd);
      ud.setLanguage(lang);
      importDataError=updateUserProperties(ud,parts,i,columnId,tempEmailsInUse,importedEmails);
      if (importDataError)       break;
      idents.add(ud);
      newIdents.add(ud);
    }
  }
  return !importDataError;
}","@Override protected boolean validateFormLogic(UserRequest ureq){
  Object validatedInp=getFromRunContext(""String_Node_Str"");
  String inp=textAreaElement.getValue();
  if (validatedInp != null && validatedInp.equals(inp)) {
    return true;
  }
  String defaultlang=I18nModule.getDefaultLocale().toString();
  List<String> importedEmails=new ArrayList<String>();
  boolean importDataError=false;
  idents=new ArrayList<Identity>();
  newIdents=new ArrayList<TransientIdentity>();
  updateIdents=new ArrayList<UpdateIdentity>();
  Set<String> tempEmailsInUse=getTemporaryEmailInUse();
  Collection<String> languages=I18nModule.getEnabledLanguageKeys();
  String[] lines=inp.split(""String_Node_Str"");
  for (int i=0; i < lines.length; i++) {
    if (i % 25 == 0) {
      DBFactory.getInstance().commitAndCloseSession();
    }
    String line=lines[i];
    if (line.equals(""String_Node_Str""))     continue;
    String delimiter=""String_Node_Str"";
    if (line.indexOf(delimiter) == -1)     delimiter=""String_Node_Str"";
    String[] parts=line.split(delimiter);
    String login, pwd, lang;
    int columnId=0;
    if (parts.length > columnId) {
      login=parts[columnId].trim();
      if (!UserManager.getInstance().syntaxCheckOlatLogin(login)) {
        textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1),login});
        importDataError=true;
        break;
      }
    }
 else {
      textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1)});
      importDataError=true;
      break;
    }
    columnId++;
    if (canCreateOLATPassword) {
      if (parts.length > columnId) {
        pwd=parts[columnId].trim();
        if (StringHelper.containsNonWhitespace(pwd)) {
          if (pwd.startsWith(UserImportController.SHIBBOLETH_MARKER) && ShibbolethModule.isEnableShibbolethLogins()) {
            String authusername=pwd.substring(UserImportController.SHIBBOLETH_MARKER.length());
            Authentication auth=securityManager.findAuthenticationByAuthusername(authusername,ShibbolethDispatcher.PROVIDER_SHIB);
            if (auth != null) {
              String authLogin=auth.getIdentity().getName();
              if (!login.equals(authLogin)) {
                textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1),authusername});
                importDataError=true;
                break;
              }
            }
          }
 else           if (!UserManager.getInstance().syntaxCheckOlatPassword(pwd)) {
            textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1),pwd});
            importDataError=true;
            break;
          }
        }
 else {
          pwd=null;
        }
      }
 else {
        textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1)});
        importDataError=true;
        break;
      }
    }
 else {
      pwd=null;
    }
    columnId++;
    if (parts.length > columnId) {
      lang=parts[columnId].trim();
      if (lang.equals(""String_Node_Str"")) {
        lang=defaultlang;
      }
 else       if (!languages.contains(lang)) {
        textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1),lang});
        importDataError=true;
        break;
      }
    }
 else {
      lang=defaultlang;
    }
    columnId++;
    Identity ident=BaseSecurityManager.getInstance().findIdentityByName(login);
    if (ident != null) {
      UpdateIdentity uIdentity=new UpdateIdentity(ident,pwd,lang);
      idents.add(uIdentity);
      updateIdents.add(uIdentity);
      importDataError=updateUserProperties(uIdentity,parts,i,columnId,tempEmailsInUse,importedEmails);
      if (importDataError)       break;
    }
 else {
      for (Iterator<TransientIdentity> it_news=newIdents.iterator(); it_news.hasNext(); ) {
        TransientIdentity singleUser=it_news.next();
        if (singleUser.getName().equalsIgnoreCase(login)) {
          textAreaElement.setErrorKey(""String_Node_Str"",new String[]{String.valueOf(i + 1),login});
          importDataError=true;
          break;
        }
      }
      TransientIdentity ud=new TransientIdentity();
      ud.setName(login);
      ud.setPassword(pwd);
      ud.setLanguage(lang);
      importDataError=updateUserProperties(ud,parts,i,columnId,tempEmailsInUse,importedEmails);
      if (importDataError)       break;
      idents.add(ud);
      newIdents.add(ud);
    }
  }
  return !importDataError;
}"
69531,"public ImportStepForm00(UserRequest ureq,WindowControl control,Form rootForm,StepsRunContext runContext){
  super(ureq,control,rootForm,runContext,LAYOUT_VERTICAL,null);
  flc.setTranslator(getTranslator());
  um=UserManager.getInstance();
  initForm(ureq);
}","public ImportStepForm00(UserRequest ureq,WindowControl control,Form rootForm,StepsRunContext runContext){
  super(ureq,control,rootForm,runContext,LAYOUT_VERTICAL,null);
  flc.setTranslator(getTranslator());
  initForm(ureq);
}"
69532,"public void addError(String error){
  errors.add(error);
}","public void addError(String error){
  if (StringHelper.containsNonWhitespace(error)) {
    errors.add(error);
    hasErrors=true;
  }
}"
69533,"private Identity doCreateAndPersistIdentity(TransientIdentity singleUser,ImportReport report){
  String login=singleUser.getName();
  String pwd=singleUser.getPassword();
  String lang=singleUser.getLanguage();
  if (canCreateOLATPassword) {
    if (!StringHelper.containsNonWhitespace(pwd)) {
      pwd=null;
    }
  }
  User newUser=um.createUser(null,null,null);
  List<UserPropertyHandler> userProperties=userPropertyHandlers;
  for (  UserPropertyHandler userPropertyHandler : userProperties) {
    String thisValue=singleUser.getProperty(userPropertyHandler.getName(),null);
    String stringValue=userPropertyHandler.getStringValue(thisValue,getLocale());
    userPropertyHandler.setUserProperty(newUser,stringValue);
  }
  newUser.getPreferences().setLanguage(lang);
  newUser.getPreferences().setInformSessionTimeout(true);
  Identity ident;
  if (pwd != null && pwd.startsWith(SHIBBOLETH_MARKER) && ShibbolethModule.isEnableShibbolethLogins()) {
    String uniqueID=pwd.substring(SHIBBOLETH_MARKER.length());
    ident=AuthHelper.createAndPersistIdentityAndUserWithUserGroup(login,ShibbolethDispatcher.PROVIDER_SHIB,uniqueID,newUser);
    report.incrementCreatedUser();
    report.incrementUpdatedShibboletAuthentication();
  }
 else {
    ident=AuthHelper.createAndPersistIdentityAndUserWithUserGroup(login,null,pwd,newUser);
    report.incrementCreatedUser();
  }
  return ident;
}","private Identity doCreateAndPersistIdentity(TransientIdentity singleUser,ImportReport report){
  String login=singleUser.getName();
  String pwd=singleUser.getPassword();
  String lang=singleUser.getLanguage();
  if (canCreateOLATPassword) {
    if (!StringHelper.containsNonWhitespace(pwd)) {
      pwd=null;
    }
  }
  User newUser=um.createUser(null,null,null);
  List<UserPropertyHandler> userProperties=userPropertyHandlers;
  for (  UserPropertyHandler userPropertyHandler : userProperties) {
    String thisValue=singleUser.getProperty(userPropertyHandler.getName(),null);
    String stringValue=userPropertyHandler.getStringValue(thisValue,getLocale());
    userPropertyHandler.setUserProperty(newUser,stringValue);
  }
  newUser.getPreferences().setLanguage(lang);
  newUser.getPreferences().setInformSessionTimeout(true);
  Identity ident;
  if (pwd != null && pwd.startsWith(SHIBBOLETH_MARKER) && ShibbolethModule.isEnableShibbolethLogins()) {
    String uniqueID=pwd.substring(SHIBBOLETH_MARKER.length());
    ident=securityManager.createAndPersistIdentityAndUserWithUserGroup(login,null,ShibbolethDispatcher.PROVIDER_SHIB,uniqueID,newUser);
    report.incrementCreatedUser();
    report.incrementUpdatedShibboletAuthentication();
  }
 else {
    ident=securityManager.createAndPersistIdentityAndUserWithDefaultProviderAndUserGroup(login,null,pwd,newUser);
    report.incrementCreatedUser();
  }
  return ident;
}"
69534,"public Step execute(UserRequest ureq1,WindowControl wControl1,StepsRunContext runContext){
  ImportReport report=new ImportReport();
  runContext.put(""String_Node_Str"",report);
  try {
    if (runContext.containsKey(""String_Node_Str"") && ((Boolean)runContext.get(""String_Node_Str"")).booleanValue()) {
      int count=0;
      @SuppressWarnings(""String_Node_Str"") List<TransientIdentity> newIdents=(List<TransientIdentity>)runContext.get(""String_Node_Str"");
      for (      TransientIdentity newIdent : newIdents) {
        doCreateAndPersistIdentity(newIdent,report);
        if (++count % 10 == 0) {
          dbInstance.commitAndCloseSession();
        }
      }
      dbInstance.commitAndCloseSession();
      Boolean updateUsers=(Boolean)runContext.get(""String_Node_Str"");
      Boolean updatePasswords=(Boolean)runContext.get(""String_Node_Str"");
      @SuppressWarnings(""String_Node_Str"") List<UpdateIdentity> updateIdents=(List<UpdateIdentity>)runContext.get(""String_Node_Str"");
      for (      UpdateIdentity updateIdent : updateIdents) {
        doUpdateIdentity(updateIdent,updateUsers,updatePasswords,report);
        if (++count % 10 == 0) {
          dbInstance.commitAndCloseSession();
        }
      }
      dbInstance.commitAndCloseSession();
      @SuppressWarnings(""String_Node_Str"") List<Long> ownGroups=(List<Long>)runContext.get(""String_Node_Str"");
      @SuppressWarnings(""String_Node_Str"") List<Long> partGroups=(List<Long>)runContext.get(""String_Node_Str"");
      if ((ownGroups != null && ownGroups.size() > 0) || (partGroups != null && partGroups.size() > 0)) {
        @SuppressWarnings(""String_Node_Str"") List<Identity> allIdents=(List<Identity>)runContext.get(""String_Node_Str"");
        Boolean sendMailObj=(Boolean)runContext.get(""String_Node_Str"");
        boolean sendmail=sendMailObj == null ? true : sendMailObj.booleanValue();
        processGroupAdditionForAllIdents(allIdents,ownGroups,partGroups,sendmail);
      }
      report.setHasChanges(true);
    }
  }
 catch (  Exception any) {
    logError(""String_Node_Str"",any);
    report.addError(""String_Node_Str"");
  }
  return report.isHasChanges() ? StepsMainRunController.DONE_MODIFIED : StepsMainRunController.DONE_UNCHANGED;
}","@Override public Step execute(UserRequest ureq1,WindowControl wControl1,StepsRunContext runContext){
  ImportReport report=new ImportReport();
  runContext.put(""String_Node_Str"",report);
  try {
    if (runContext.containsKey(""String_Node_Str"") && ((Boolean)runContext.get(""String_Node_Str"")).booleanValue()) {
      int count=0;
      @SuppressWarnings(""String_Node_Str"") List<TransientIdentity> newIdents=(List<TransientIdentity>)runContext.get(""String_Node_Str"");
      for (      TransientIdentity newIdent : newIdents) {
        doCreateAndPersistIdentity(newIdent,report);
        if (++count % 10 == 0) {
          dbInstance.commitAndCloseSession();
        }
      }
      dbInstance.commitAndCloseSession();
      Boolean updateUsers=(Boolean)runContext.get(""String_Node_Str"");
      Boolean updatePasswords=(Boolean)runContext.get(""String_Node_Str"");
      @SuppressWarnings(""String_Node_Str"") List<UpdateIdentity> updateIdents=(List<UpdateIdentity>)runContext.get(""String_Node_Str"");
      for (      UpdateIdentity updateIdent : updateIdents) {
        doUpdateIdentity(updateIdent,updateUsers,updatePasswords,report);
        if (++count % 10 == 0) {
          dbInstance.commitAndCloseSession();
        }
      }
      dbInstance.commitAndCloseSession();
      @SuppressWarnings(""String_Node_Str"") List<Long> ownGroups=(List<Long>)runContext.get(""String_Node_Str"");
      @SuppressWarnings(""String_Node_Str"") List<Long> partGroups=(List<Long>)runContext.get(""String_Node_Str"");
      if ((ownGroups != null && ownGroups.size() > 0) || (partGroups != null && partGroups.size() > 0)) {
        @SuppressWarnings(""String_Node_Str"") List<Identity> allIdents=(List<Identity>)runContext.get(""String_Node_Str"");
        Boolean sendMailObj=(Boolean)runContext.get(""String_Node_Str"");
        boolean sendmail=sendMailObj == null ? true : sendMailObj.booleanValue();
        processGroupAdditionForAllIdents(allIdents,ownGroups,partGroups,sendmail);
      }
      report.setHasChanges(true);
    }
  }
 catch (  Exception any) {
    logError(""String_Node_Str"",any);
    report.addError(""String_Node_Str"");
  }
  return report.isHasChanges() ? StepsMainRunController.DONE_MODIFIED : StepsMainRunController.DONE_UNCHANGED;
}"
69535,"/** 
 * @param ureq
 * @param wControl
 * @param canCreateOLATPassword true: workflow offers column to createpasswords; false: workflow does not offer pwd column
 */
public UserImportController(UserRequest ureq,WindowControl wControl,boolean canCreateOLATPassword){
  super(ureq,wControl);
  um=UserManager.getInstance();
  dbInstance=CoreSpringFactory.getImpl(DB.class);
  securityManager=CoreSpringFactory.getImpl(BaseSecurity.class);
  olatAuthManager=CoreSpringFactory.getImpl(OLATAuthManager.class);
  businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
  this.canCreateOLATPassword=canCreateOLATPassword;
  mainVC=createVelocityContainer(""String_Node_Str"");
  startLink=LinkFactory.createButton(""String_Node_Str"",mainVC,this);
  startLink.setPrimary(true);
  putInitialPanel(mainVC);
}","/** 
 * @param ureq
 * @param wControl
 * @param canCreateOLATPassword true: workflow offers column to createpasswords; false: workflow does not offer pwd column
 */
public UserImportController(UserRequest ureq,WindowControl wControl,boolean canCreateOLATPassword){
  super(ureq,wControl);
  this.canCreateOLATPassword=canCreateOLATPassword;
  mainVC=createVelocityContainer(""String_Node_Str"");
  startLink=LinkFactory.createButton(""String_Node_Str"",mainVC,this);
  startLink.setPrimary(true);
  putInitialPanel(mainVC);
}"
69536,"/** 
 * @see org.olat.core.gui.control.DefaultController#doDispose(boolean)
 */
protected void doDispose(){
}","@Override protected void doDispose(){
}"
69537,"@Override protected void event(UserRequest ureq,Component source,Event event){
  if (source == startLink) {
    setTranslator(um.getPropertyHandlerTranslator(getTranslator()));
    userPropertyHandlers=um.getUserPropertyHandlersFor(usageIdentifyer,true);
    Step start=new ImportStep00(ureq,canCreateOLATPassword);
    StepRunnerCallback finish=new StepRunnerCallback(){
      public Step execute(      UserRequest ureq1,      WindowControl wControl1,      StepsRunContext runContext){
        ImportReport report=new ImportReport();
        runContext.put(""String_Node_Str"",report);
        try {
          if (runContext.containsKey(""String_Node_Str"") && ((Boolean)runContext.get(""String_Node_Str"")).booleanValue()) {
            int count=0;
            @SuppressWarnings(""String_Node_Str"") List<TransientIdentity> newIdents=(List<TransientIdentity>)runContext.get(""String_Node_Str"");
            for (            TransientIdentity newIdent : newIdents) {
              doCreateAndPersistIdentity(newIdent,report);
              if (++count % 10 == 0) {
                dbInstance.commitAndCloseSession();
              }
            }
            dbInstance.commitAndCloseSession();
            Boolean updateUsers=(Boolean)runContext.get(""String_Node_Str"");
            Boolean updatePasswords=(Boolean)runContext.get(""String_Node_Str"");
            @SuppressWarnings(""String_Node_Str"") List<UpdateIdentity> updateIdents=(List<UpdateIdentity>)runContext.get(""String_Node_Str"");
            for (            UpdateIdentity updateIdent : updateIdents) {
              doUpdateIdentity(updateIdent,updateUsers,updatePasswords,report);
              if (++count % 10 == 0) {
                dbInstance.commitAndCloseSession();
              }
            }
            dbInstance.commitAndCloseSession();
            @SuppressWarnings(""String_Node_Str"") List<Long> ownGroups=(List<Long>)runContext.get(""String_Node_Str"");
            @SuppressWarnings(""String_Node_Str"") List<Long> partGroups=(List<Long>)runContext.get(""String_Node_Str"");
            if ((ownGroups != null && ownGroups.size() > 0) || (partGroups != null && partGroups.size() > 0)) {
              @SuppressWarnings(""String_Node_Str"") List<Identity> allIdents=(List<Identity>)runContext.get(""String_Node_Str"");
              Boolean sendMailObj=(Boolean)runContext.get(""String_Node_Str"");
              boolean sendmail=sendMailObj == null ? true : sendMailObj.booleanValue();
              processGroupAdditionForAllIdents(allIdents,ownGroups,partGroups,sendmail);
            }
            report.setHasChanges(true);
          }
        }
 catch (        Exception any) {
          logError(""String_Node_Str"",any);
          report.addError(""String_Node_Str"");
        }
        return report.isHasChanges() ? StepsMainRunController.DONE_MODIFIED : StepsMainRunController.DONE_UNCHANGED;
      }
    }
;
    importStepsController=new StepsMainRunController(ureq,getWindowControl(),start,finish,null,translate(""String_Node_Str""),""String_Node_Str"");
    listenTo(importStepsController);
    getWindowControl().pushAsModalDialog(importStepsController.getInitialComponent());
  }
}","@Override protected void event(UserRequest ureq,Component source,Event event){
  if (source == startLink) {
    doOpenImportWizard(ureq);
  }
}"
69538,"private boolean checkAssessmentGuard(UserRequest ureq,TransientAssessmentMode mode){
  boolean needUpdate;
  if (assessmentGuardCtrl == null) {
    if (lockStatus == LockStatus.need) {
      assessmentGuardCtrl=new AssessmentModeGuardController(ureq,getWindowControl(),Collections.singletonList(mode),true);
      listenTo(assessmentGuardCtrl);
      assessmentGuardCtrl.getInitialComponent();
      lockStatus=LockStatus.popup;
      needUpdate=true;
    }
 else {
      needUpdate=false;
    }
  }
 else {
    needUpdate=assessmentGuardCtrl.updateAssessmentMode(ureq);
  }
  return needUpdate;
}","private boolean checkAssessmentGuard(UserRequest ureq,TransientAssessmentMode mode){
  boolean needUpdate;
  if (this.getIdentity() != null) {
    System.out.println(getIdentity().getName() + ""String_Node_Str"" + lockStatus);
  }
  if (assessmentGuardCtrl == null) {
    if (lockStatus == LockStatus.need) {
      List<TransientAssessmentMode> modes=mode == null ? Collections.<TransientAssessmentMode>emptyList() : Collections.singletonList(mode);
      assessmentGuardCtrl=new AssessmentModeGuardController(ureq,getWindowControl(),modes,true);
      listenTo(assessmentGuardCtrl);
      assessmentGuardCtrl.getInitialComponent();
      lockStatus=LockStatus.popup;
      needUpdate=true;
    }
 else {
      needUpdate=false;
    }
  }
 else {
    needUpdate=assessmentGuardCtrl.updateAssessmentMode(ureq);
  }
  return needUpdate;
}"
69539,"private boolean asyncUnlockResource(TransientAssessmentMode mode){
  boolean unlock;
  if (lockResource != null && lockResource.getResourceableId().equals(mode.getResource().getResourceableId())) {
    logAudit(""String_Node_Str"" + getIdentity().getName() + ""String_Node_Str""+ mode.getResource()+ ""String_Node_Str"",null);
    unlockResource();
    lockMode=null;
    lockStatus=null;
    unlock=true;
  }
 else {
    unlock=false;
  }
  return unlock;
}","private boolean asyncUnlockResource(TransientAssessmentMode mode){
  boolean unlock;
  if (lockResource != null && lockResource.getResourceableId().equals(mode.getResource().getResourceableId())) {
    logAudit(""String_Node_Str"" + getIdentity().getName() + ""String_Node_Str""+ mode.getResource()+ ""String_Node_Str"",null);
    unlockResource();
    if (lockMode != null) {
      lockStatus=LockStatus.need;
    }
 else {
      lockStatus=null;
    }
    lockMode=null;
    unlock=true;
  }
 else {
    unlock=false;
  }
  return unlock;
}"
69540,"private void continueAfterAssessmentMode(UserRequest ureq,ResourceGuard selectedGuard){
  List<ResourceGuard> lastGuards=new ArrayList<ResourceGuard>();
  for (  ResourceGuard currentGuard : guards.getList()) {
    if (currentGuard != selectedGuard) {
      lastGuards.add(currentGuard);
    }
  }
  guards.setList(lastGuards);
  boolean canContinue=guards.getSize() == 0;
  if (canContinue) {
    fireEvent(ureq,new Event(""String_Node_Str""));
    String businessPath=""String_Node_Str"";
    NewControllerFactory.getInstance().launch(businessPath,ureq,getWindowControl());
  }
 else {
    mainVC.setDirty(true);
  }
}","private void continueAfterAssessmentMode(UserRequest ureq,ResourceGuard selectedGuard){
  List<ResourceGuard> lastGuards=new ArrayList<ResourceGuard>();
  for (  ResourceGuard currentGuard : guards.getList()) {
    if (currentGuard != selectedGuard) {
      lastGuards.add(currentGuard);
    }
  }
  guards.setList(lastGuards);
  boolean canContinue=guards.getSize() == 0;
  if (canContinue) {
    cmc.deactivate();
    fireEvent(ureq,new Event(""String_Node_Str""));
    String businessPath=""String_Node_Str"";
    NewControllerFactory.getInstance().launch(businessPath,ureq,getWindowControl());
  }
 else {
    mainVC.setDirty(true);
  }
}"
69541,"/** 
 * Remove the list of assessment modes and lock the chief controller.
 * @param ureq
 * @param mode
 */
private void launchAssessmentMode(UserRequest ureq,TransientAssessmentMode mode){
  ureq.getUserSession().setAssessmentModes(null);
  OLATResourceable resource=mode.getResource();
  ureq.getUserSession().setLockResource(resource,mode);
  Windows.getWindows(ureq).getChiefController().lockResource(resource);
  fireEvent(ureq,new ChooseAssessmentModeEvent(mode));
  String businessPath=""String_Node_Str"" + mode.getRepositoryEntryKey() + ""String_Node_Str"";
  if (StringHelper.containsNonWhitespace(mode.getStartElementKey())) {
    businessPath+=""String_Node_Str"" + mode.getStartElementKey() + ""String_Node_Str"";
  }
  NewControllerFactory.getInstance().launch(businessPath,ureq,getWindowControl());
}","/** 
 * Remove the list of assessment modes and lock the chief controller.
 * @param ureq
 * @param mode
 */
private void launchAssessmentMode(UserRequest ureq,TransientAssessmentMode mode){
  cmc.deactivate();
  ureq.getUserSession().setAssessmentModes(null);
  OLATResourceable resource=mode.getResource();
  ureq.getUserSession().setLockResource(resource,mode);
  Windows.getWindows(ureq).getChiefController().lockResource(resource);
  fireEvent(ureq,new ChooseAssessmentModeEvent(mode));
  String businessPath=""String_Node_Str"" + mode.getRepositoryEntryKey() + ""String_Node_Str"";
  if (StringHelper.containsNonWhitespace(mode.getStartElementKey())) {
    businessPath+=""String_Node_Str"" + mode.getStartElementKey() + ""String_Node_Str"";
  }
  NewControllerFactory.getInstance().launch(businessPath,ureq,getWindowControl());
}"
69542,"private ResourceGuard syncAssessmentMode(UserRequest ureq,TransientAssessmentMode mode){
  Date now=new Date();
  Date beginWithLeadTime=mode.getBeginWithLeadTime();
  if (!mode.isManual() && beginWithLeadTime.after(now)) {
    return null;
  }
 else   if (mode.isManual() && (Status.end.equals(mode.getStatus()) || Status.none.equals(mode.getStatus()))) {
    return null;
  }
  ResourceGuard guard=guards.getGuardFor(mode);
  if (guard == null) {
    guard=createGuard(mode);
  }
  StringBuilder sb=new StringBuilder();
  boolean allowed=true;
  if (mode.getIpList() != null) {
    boolean ipInRange=assessmentModeMgr.isIpAllowed(mode.getIpList(),address);
    if (!ipInRange) {
      sb.append(translate(""String_Node_Str""));
    }
    allowed&=ipInRange;
  }
  if (mode.getSafeExamBrowserKey() != null) {
    boolean safeExamCheck=assessmentModeMgr.isSafelyAllowed(ureq.getHttpReq(),mode.getSafeExamBrowserKey());
    if (!safeExamCheck) {
      if (sb.length() > 0)       sb.append(""String_Node_Str"");
      sb.append(translate(""String_Node_Str""));
    }
    allowed&=safeExamCheck;
  }
  guard.getCountDown().setDate(mode.getBegin());
  String state;
  if (allowed) {
    Link go=guard.getGo();
    Link cont=guard.getContinue();
    state=updateButtons(mode,now,go,cont);
  }
 else {
    state=""String_Node_Str"";
  }
  guard.sync(state,sb.toString(),mode,getLocale());
  return guard;
}","private ResourceGuard syncAssessmentMode(UserRequest ureq,TransientAssessmentMode mode){
  Date now=new Date();
  Date beginWithLeadTime=mode.getBeginWithLeadTime();
  Date endWithFollowupTime=mode.getEndWithFollowupTime();
  if (mode.isManual() && (Status.end.equals(mode.getStatus()) || Status.none.equals(mode.getStatus()))) {
    return null;
  }
 else   if (!mode.isManual() && (beginWithLeadTime.after(now) || now.after(endWithFollowupTime))) {
    return null;
  }
  ResourceGuard guard=guards.getGuardFor(mode);
  if (guard == null) {
    guard=createGuard(mode);
  }
  StringBuilder sb=new StringBuilder();
  boolean allowed=true;
  if (mode.getIpList() != null) {
    boolean ipInRange=assessmentModeMgr.isIpAllowed(mode.getIpList(),address);
    if (!ipInRange) {
      sb.append(translate(""String_Node_Str""));
    }
    allowed&=ipInRange;
  }
  if (mode.getSafeExamBrowserKey() != null) {
    boolean safeExamCheck=assessmentModeMgr.isSafelyAllowed(ureq.getHttpReq(),mode.getSafeExamBrowserKey());
    if (!safeExamCheck) {
      if (sb.length() > 0)       sb.append(""String_Node_Str"");
      sb.append(translate(""String_Node_Str""));
    }
    allowed&=safeExamCheck;
  }
  guard.getCountDown().setDate(mode.getBegin());
  String state;
  if (allowed) {
    Link go=guard.getGo();
    Link cont=guard.getContinue();
    state=updateButtons(mode,now,go,cont);
  }
 else {
    state=""String_Node_Str"";
  }
  guard.sync(state,sb.toString(),mode,getLocale());
  return guard;
}"
69543,"/** 
 * @param ureq
 * @param cpRoot
 * @param showMenu
 * @param showNavigation Show the next/previous link
 * @param activateFirstPage
 * @param identPrefix In a course, set a unique prefix per node, if someone set 2x the same CPs in the course, the node identifiersof the CP elements must be different but predictable
 */
public CPDisplayController(UserRequest ureq,WindowControl wControl,VFSContainer rootContainer,boolean showMenu,boolean showNavigation,boolean activateFirstPage,boolean showPrint,DeliveryOptions deliveryOptions,String initialUri,OLATResourceable ores,String identPrefix){
  super(ureq,wControl);
  this.rootContainer=rootContainer;
  myContent=createVelocityContainer(""String_Node_Str"");
  if (!ureq.getUserSession().getRoles().isGuestOnly()) {
    SearchServiceUIFactory searchServiceUIFactory=(SearchServiceUIFactory)CoreSpringFactory.getBean(SearchServiceUIFactory.class);
    searchCtrl=searchServiceUIFactory.createInputController(ureq,wControl,DisplayOption.BUTTON,null);
    myContent.put(""String_Node_Str"",searchCtrl.getInitialComponent());
    listenTo(searchCtrl);
  }
  cpContentCtr=new IFrameDisplayController(ureq,getWindowControl(),rootContainer,null,ores,deliveryOptions,false);
  cpContentCtr.setAllowDownload(true);
  listenTo(cpContentCtr);
  myContent.put(""String_Node_Str"",cpContentCtr.getInitialComponent());
  myContent.contextPut(""String_Node_Str"",Boolean.TRUE);
  VFSItem mani=rootContainer.resolve(""String_Node_Str"");
  if (mani == null || !(mani instanceof VFSLeaf)) {
    showError(""String_Node_Str"");
    return;
  }
  try {
    ctm=new CPManifestTreeModel((VFSLeaf)mani,identPrefix);
  }
 catch (  IOException e) {
    showError(""String_Node_Str"");
    return;
  }
  if (showMenu) {
    cpTree=new MenuTree(""String_Node_Str"");
    cpTree.setTreeModel(ctm);
    cpTree.addListener(this);
  }
  if (showPrint) {
    printLink=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",null,Link.LINK + Link.NONTRANSLATED,myContent,this);
    printLink.setCustomDisplayText(""String_Node_Str"");
    printLink.setIconLeftCSS(""String_Node_Str"");
    printLink.setCustomEnabledLinkCSS(""String_Node_Str"");
    printLink.setTitle(translate(""String_Node_Str""));
    String themeBaseUri=wControl.getWindowBackOffice().getWindow().getGuiTheme().getBaseURI();
    printMapper=new CPPrintMapper(ctm,rootContainer,themeBaseUri);
    mapperBaseURL=registerMapper(ureq,printMapper);
    printMapper.setBaseUri(mapperBaseURL);
  }
  if (showNavigation && ctm.getRootNode().getChildCount() > 0) {
    nextLink=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",null,Link.LINK + Link.NONTRANSLATED,myContent,this);
    nextLink.setCustomDisplayText(""String_Node_Str"");
    nextLink.setIconLeftCSS(""String_Node_Str"");
    nextLink.setCustomEnabledLinkCSS(""String_Node_Str"");
    nextLink.setTitle(translate(""String_Node_Str""));
    previousLink=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",null,Link.LINK + Link.NONTRANSLATED,myContent,this);
    previousLink.setCustomDisplayText(""String_Node_Str"");
    previousLink.setIconLeftCSS(""String_Node_Str"");
    previousLink.setCustomEnabledLinkCSS(""String_Node_Str"");
    previousLink.setTitle(translate(""String_Node_Str""));
    myContent.put(""String_Node_Str"",nextLink);
    myContent.put(""String_Node_Str"",previousLink);
  }
  LoggingResourceable nodeInfo=null;
  if (activateFirstPage) {
    TreeNode node=ctm.getRootNode();
    if (node == null)     throw new OLATRuntimeException(CPDisplayController.class,""String_Node_Str"" + rootContainer,null);
    while (node != null && !node.isAccessible()) {
      if (node.getChildCount() > 0) {
        node=(TreeNode)node.getChildAt(0);
      }
 else       node=null;
    }
    if (node != null) {
      String nodeUri=(String)node.getUserObject();
      if (cpContentCtr != null)       cpContentCtr.setCurrentURI(nodeUri);
      if (cpComponent != null)       cpComponent.setCurrentURI(nodeUri);
      if (showMenu)       cpTree.setSelectedNodeId(node.getIdent());
      selNodeId=node.getIdent();
      nodeInfo=LoggingResourceable.wrapCpNode(nodeUri);
      updateNextPreviousLink(node);
      if (node.getUserObject() != null) {
        String identifierRes=(String)node.getUserObject();
        OLATResourceable pOres=OresHelper.createOLATResourceableInstanceWithoutCheck(""String_Node_Str"" + identifierRes,0l);
        addToHistory(ureq,pOres,null);
      }
    }
  }
 else   if (initialUri != null) {
    if (cpContentCtr != null)     cpContentCtr.setCurrentURI(initialUri);
    if (cpComponent != null)     cpComponent.setCurrentURI(initialUri);
    TreeNode newNode=ctm.lookupTreeNodeByHref(initialUri);
    if (newNode != null) {
      if (cpTree != null) {
        cpTree.setSelectedNodeId(newNode.getIdent());
      }
 else {
        selNodeId=newNode.getIdent();
      }
      updateNextPreviousLink(newNode);
      if (newNode.getUserObject() != null) {
        String identifierRes=(String)newNode.getUserObject();
        Long id=Long.parseLong(newNode.getIdent());
        OLATResourceable pOres=OresHelper.createOLATResourceableInstanceWithoutCheck(""String_Node_Str"" + identifierRes,id);
        addToHistory(ureq,pOres,null);
      }
    }
    nodeInfo=LoggingResourceable.wrapCpNode(initialUri);
  }
  if (ores != null && nodeInfo != null && !OresHelper.calculateTypeName(ICourse.class).equals(ores.getResourceableTypeName())) {
    addLoggingResourceable(LoggingResourceable.wrap(ores,OlatResourceableType.cp));
    ThreadLocalUserActivityLogger.log(LearningResourceLoggingAction.LEARNING_RESOURCE_OPEN,getClass(),nodeInfo);
  }
  putInitialPanel(myContent);
}","/** 
 * @param ureq
 * @param cpRoot
 * @param showMenu
 * @param showNavigation Show the next/previous link
 * @param activateFirstPage
 * @param identPrefix In a course, set a unique prefix per node, if someone set 2x the same CPs in the course, the node identifiersof the CP elements must be different but predictable
 */
public CPDisplayController(UserRequest ureq,WindowControl wControl,VFSContainer rootContainer,boolean showMenu,boolean showNavigation,boolean activateFirstPage,boolean showPrint,DeliveryOptions deliveryOptions,String initialUri,OLATResourceable ores,String identPrefix){
  super(ureq,wControl);
  this.rootContainer=rootContainer;
  myContent=createVelocityContainer(""String_Node_Str"");
  if (!ureq.getUserSession().getRoles().isGuestOnly()) {
    SearchServiceUIFactory searchServiceUIFactory=(SearchServiceUIFactory)CoreSpringFactory.getBean(SearchServiceUIFactory.class);
    searchCtrl=searchServiceUIFactory.createInputController(ureq,wControl,DisplayOption.BUTTON,null);
    myContent.put(""String_Node_Str"",searchCtrl.getInitialComponent());
    listenTo(searchCtrl);
  }
  cpContentCtr=new IFrameDisplayController(ureq,getWindowControl(),rootContainer,null,ores,deliveryOptions,true);
  cpContentCtr.setAllowDownload(true);
  listenTo(cpContentCtr);
  myContent.put(""String_Node_Str"",cpContentCtr.getInitialComponent());
  myContent.contextPut(""String_Node_Str"",Boolean.TRUE);
  VFSItem mani=rootContainer.resolve(""String_Node_Str"");
  if (mani == null || !(mani instanceof VFSLeaf)) {
    showError(""String_Node_Str"");
    return;
  }
  try {
    ctm=new CPManifestTreeModel((VFSLeaf)mani,identPrefix);
  }
 catch (  IOException e) {
    showError(""String_Node_Str"");
    return;
  }
  if (showMenu) {
    cpTree=new MenuTree(""String_Node_Str"");
    cpTree.setTreeModel(ctm);
    cpTree.addListener(this);
  }
  if (showPrint) {
    printLink=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",null,Link.LINK + Link.NONTRANSLATED,myContent,this);
    printLink.setCustomDisplayText(""String_Node_Str"");
    printLink.setIconLeftCSS(""String_Node_Str"");
    printLink.setCustomEnabledLinkCSS(""String_Node_Str"");
    printLink.setTitle(translate(""String_Node_Str""));
    String themeBaseUri=wControl.getWindowBackOffice().getWindow().getGuiTheme().getBaseURI();
    printMapper=new CPPrintMapper(ctm,rootContainer,themeBaseUri);
    mapperBaseURL=registerMapper(ureq,printMapper);
    printMapper.setBaseUri(mapperBaseURL);
  }
  if (showNavigation && ctm.getRootNode().getChildCount() > 0) {
    nextLink=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",null,Link.LINK + Link.NONTRANSLATED,myContent,this);
    nextLink.setCustomDisplayText(""String_Node_Str"");
    nextLink.setIconLeftCSS(""String_Node_Str"");
    nextLink.setCustomEnabledLinkCSS(""String_Node_Str"");
    nextLink.setTitle(translate(""String_Node_Str""));
    previousLink=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",null,Link.LINK + Link.NONTRANSLATED,myContent,this);
    previousLink.setCustomDisplayText(""String_Node_Str"");
    previousLink.setIconLeftCSS(""String_Node_Str"");
    previousLink.setCustomEnabledLinkCSS(""String_Node_Str"");
    previousLink.setTitle(translate(""String_Node_Str""));
    myContent.put(""String_Node_Str"",nextLink);
    myContent.put(""String_Node_Str"",previousLink);
  }
  LoggingResourceable nodeInfo=null;
  if (activateFirstPage) {
    TreeNode node=ctm.getRootNode();
    if (node == null)     throw new OLATRuntimeException(CPDisplayController.class,""String_Node_Str"" + rootContainer,null);
    while (node != null && !node.isAccessible()) {
      if (node.getChildCount() > 0) {
        node=(TreeNode)node.getChildAt(0);
      }
 else       node=null;
    }
    if (node != null) {
      String nodeUri=(String)node.getUserObject();
      if (cpContentCtr != null)       cpContentCtr.setCurrentURI(nodeUri);
      if (cpComponent != null)       cpComponent.setCurrentURI(nodeUri);
      if (showMenu)       cpTree.setSelectedNodeId(node.getIdent());
      selNodeId=node.getIdent();
      nodeInfo=LoggingResourceable.wrapCpNode(nodeUri);
      updateNextPreviousLink(node);
      if (node.getUserObject() != null) {
        String identifierRes=(String)node.getUserObject();
        OLATResourceable pOres=OresHelper.createOLATResourceableInstanceWithoutCheck(""String_Node_Str"" + identifierRes,0l);
        addToHistory(ureq,pOres,null);
      }
    }
  }
 else   if (initialUri != null) {
    if (cpContentCtr != null)     cpContentCtr.setCurrentURI(initialUri);
    if (cpComponent != null)     cpComponent.setCurrentURI(initialUri);
    TreeNode newNode=ctm.lookupTreeNodeByHref(initialUri);
    if (newNode != null) {
      if (cpTree != null) {
        cpTree.setSelectedNodeId(newNode.getIdent());
      }
 else {
        selNodeId=newNode.getIdent();
      }
      updateNextPreviousLink(newNode);
      if (newNode.getUserObject() != null) {
        String identifierRes=(String)newNode.getUserObject();
        Long id=Long.parseLong(newNode.getIdent());
        OLATResourceable pOres=OresHelper.createOLATResourceableInstanceWithoutCheck(""String_Node_Str"" + identifierRes,id);
        addToHistory(ureq,pOres,null);
      }
    }
    nodeInfo=LoggingResourceable.wrapCpNode(initialUri);
  }
  if (ores != null && nodeInfo != null && !OresHelper.calculateTypeName(ICourse.class).equals(ores.getResourceableTypeName())) {
    addLoggingResourceable(LoggingResourceable.wrap(ores,OlatResourceableType.cp));
    ThreadLocalUserActivityLogger.log(LearningResourceLoggingAction.LEARNING_RESOURCE_OPEN,getClass(),nodeInfo);
  }
  putInitialPanel(myContent);
}"
69544,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  int cmpcount=0;
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    layoutCont.contextPut(""String_Node_Str"",entry);
    layoutCont.contextPut(""String_Node_Str"",new Boolean(guestOnly));
    String cssClass=RepositoyUIFactory.getIconCssClass(entry);
    layoutCont.contextPut(""String_Node_Str"",cssClass);
    RepositoryHandler handler=RepositoryHandlerFactory.getInstance().getRepositoryHandler(entry);
    VFSContainer mediaContainer=handler.getMediaContainer(entry);
    if (mediaContainer != null) {
      baseUrl=registerMapper(ureq,new VFSContainerMapper(mediaContainer.getParentContainer()));
    }
    setText(entry.getDescription(),""String_Node_Str"",layoutCont);
    setText(entry.getRequirements(),""String_Node_Str"",layoutCont);
    setText(entry.getObjectives(),""String_Node_Str"",layoutCont);
    setText(entry.getCredits(),""String_Node_Str"",layoutCont);
    VFSLeaf movie=repositoryService.getIntroductionMovie(entry);
    VFSLeaf image=repositoryService.getIntroductionImage(entry);
    if (image != null || movie != null) {
      ImageComponent ic=new ImageComponent(ureq.getUserSession(),""String_Node_Str"");
      if (movie != null) {
        ic.setMedia(movie);
        ic.setMaxWithAndHeightToFitWithin(500,300);
        if (image != null) {
          ic.setPoster(image);
        }
      }
 else {
        ic.setMedia(image);
        ic.setMaxWithAndHeightToFitWithin(500,300);
      }
      layoutCont.put(""String_Node_Str"",ic);
    }
    if (repositoryModule.isCatalogEnabled()) {
      List<CatalogEntry> categories=catalogManager.getCatalogEntriesReferencing(entry);
      List<String> categoriesLink=new ArrayList<>(categories.size());
      for (      CatalogEntry category : categories) {
        String id=""String_Node_Str"" + ++cmpcount;
        String title=category.getParent().getName();
        FormLink catLink=uifactory.addFormLink(id,""String_Node_Str"",title,null,layoutCont,Link.LINK | Link.NONTRANSLATED);
        catLink.setIconLeftCSS(""String_Node_Str"");
        catLink.setUserObject(category.getKey());
        categoriesLink.add(id);
      }
      layoutCont.contextPut(""String_Node_Str"",categoriesLink);
    }
    if (!guestOnly) {
      boolean marked;
      if (row == null) {
        marked=markManager.isMarked(entry,getIdentity(),null);
      }
 else {
        marked=row.isMarked();
      }
      markLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",marked ? ""String_Node_Str"" : ""String_Node_Str"",null,layoutCont,Link.LINK);
      markLink.setElementCssClass(""String_Node_Str"");
      markLink.setIconLeftCSS(marked ? Mark.MARK_CSS_LARGE : Mark.MARK_ADD_CSS_LARGE);
    }
    RepositoryEntryStatistics statistics=entry.getStatistics();
    if (repositoryModule.isRatingEnabled()) {
      Integer myRating;
      if (row == null) {
        myRating=userRatingsDao.getRatingValue(getIdentity(),entry,null);
      }
 else {
        myRating=row.getMyRating();
      }
      Double averageRating=statistics.getRating();
      long numOfRatings=statistics.getNumOfRatings();
      float ratingValue=myRating == null ? 0f : myRating.floatValue();
      float averageRatingValue=averageRating == null ? 0f : averageRating.floatValue();
      ratingEl=new RatingWithAverageFormItem(""String_Node_Str"",ratingValue,averageRatingValue,5,numOfRatings);
      ratingEl.setEnabled(!guestOnly);
      layoutCont.add(""String_Node_Str"",ratingEl);
    }
    if (repositoryModule.isCommentEnabled()) {
      long numOfComments=statistics.getNumOfComments();
      String title=""String_Node_Str"" + numOfComments + ""String_Node_Str"";
      commentsLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",title,null,layoutCont,Link.NONTRANSLATED);
      commentsLink.setCustomEnabledLinkCSS(""String_Node_Str"");
      String css=numOfComments > 0 ? ""String_Node_Str"" : ""String_Node_Str"";
      commentsLink.setIconLeftCSS(css);
    }
    boolean isMember=repositoryService.isMember(getIdentity(),entry);
    List<Long> authorKeys=repositoryService.getAuthors(entry);
    boolean isAuthor=false;
    if (isMember) {
      isAuthor=authorKeys.contains(getIdentity().getKey());
      layoutCont.contextPut(""String_Node_Str"",new Boolean(isAuthor));
    }
    Roles roles=ureq.getUserSession().getRoles();
    layoutCont.contextPut(""String_Node_Str"",roles);
    String accessI18n=null;
    List<PriceMethod> types=new ArrayList<PriceMethod>();
    if (entry.isMembersOnly()) {
      if (isMember) {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
        startLink.setIconRightCSS(""String_Node_Str"");
        startLink.setPrimary(true);
      }
      accessI18n=translate(""String_Node_Str"");
    }
 else {
      AccessResult acResult=acService.isAccessible(entry,getIdentity(),isMember,false);
      if (acResult.isAccessible()) {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
      }
 else       if (acResult.getAvailableMethods().size() > 0) {
        for (        OfferAccess access : acResult.getAvailableMethods()) {
          AccessMethod method=access.getMethod();
          String type=(method.getMethodCssClass() + ""String_Node_Str"").intern();
          Price p=access.getOffer().getPrice();
          String price=p == null || p.isEmpty() ? ""String_Node_Str"" : PriceFormat.fullFormat(p);
          AccessMethodHandler amh=acModule.getAccessMethodHandler(method.getType());
          String displayName=amh.getMethodName(getLocale());
          types.add(new PriceMethod(price,type,displayName));
        }
        String linkText=guestOnly ? translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName())) : translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setCustomEnabledLinkCSS(""String_Node_Str"");
        startLink.setElementCssClass(""String_Node_Str"");
        if (guestOnly) {
          if (entry.getAccess() == RepositoryEntry.ACC_USERS_GUESTS) {
            startLink.setVisible(true);
          }
 else {
            startLink.setVisible(false);
          }
        }
 else {
          startLink.setVisible(true);
        }
      }
 else {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setEnabled(false);
        startLink.setElementCssClass(""String_Node_Str"");
        startLink.setVisible(!guestOnly);
      }
      startLink.setIconRightCSS(""String_Node_Str"");
      startLink.setPrimary(true);
switch (entry.getAccess()) {
case 0:
        accessI18n=""String_Node_Str"";
      break;
case 1:
    accessI18n=translate(""String_Node_Str"");
  break;
case 2:
accessI18n=translate(""String_Node_Str"");
break;
case 3:
accessI18n=translate(""String_Node_Str"");
break;
case 4:
accessI18n=translate(""String_Node_Str"");
break;
}
}
layoutCont.contextPut(""String_Node_Str"",accessI18n);
if (!types.isEmpty()) {
layoutCont.contextPut(""String_Node_Str"",types);
}
if (isMember) {
SearchBusinessGroupParams params=new SearchBusinessGroupParams(getIdentity(),true,true);
List<BusinessGroup> groups=businessGroupService.findBusinessGroups(params,entry,0,-1);
List<String> groupLinkNames=new ArrayList<>(groups.size());
for (BusinessGroup group : groups) {
String groupLinkName=""String_Node_Str"" + ++cmpcount;
FormLink link=uifactory.addFormLink(groupLinkName,""String_Node_Str"",group.getName(),null,layoutCont,Link.LINK | Link.NONTRANSLATED);
link.setIconLeftCSS(""String_Node_Str"");
link.setUserObject(group.getKey());
groupLinkNames.add(groupLinkName);
}
layoutCont.contextPut(""String_Node_Str"",groupLinkNames);
}
boolean passed=false;
boolean failed=false;
String score=null;
if (row != null) {
passed=row.isPassed();
failed=row.isFailed();
score=row.getScore();
}
 else {
UserEfficiencyStatement statement=effManager.getUserEfficiencyStatementLight(entry.getKey(),getIdentity());
if (statement != null) {
Boolean p=statement.getPassed();
if (p != null) {
passed=p.booleanValue();
failed=!p.booleanValue();
}
Float scoreVal=statement.getScore();
if (scoreVal != null) {
score=AssessmentHelper.getRoundedScore(scoreVal);
}
}
}
layoutCont.contextPut(""String_Node_Str"",passed);
layoutCont.contextPut(""String_Node_Str"",failed);
layoutCont.contextPut(""String_Node_Str"",score);
Long courseResId=entry.getOlatResource().getResourceableId();
Date recentLaunch=userCourseInfosManager.getRecentLaunchDate(courseResId,getIdentity());
layoutCont.contextPut(""String_Node_Str"",recentLaunch);
String numUsers;
OLATResourceable ores=entry.getOlatResource();
int cnt=0;
OLATResourceable courseRunOres=OresHelper.createOLATResourceableInstance(RunMainController.ORES_TYPE_COURSE_RUN,courseResId);
if (ores != null) cnt=coordinatorManager.getCoordinator().getEventBus().getListeningIdentityCntFor(courseRunOres);
numUsers=String.valueOf(cnt);
layoutCont.contextPut(""String_Node_Str"",numUsers);
if (isAuthor || roles.isOLATAdmin() || roles.isInstitutionalResourceManager()) {
String referenceDetails=referenceManager.getReferencesToSummary(entry.getOlatResource(),getLocale());
if (referenceDetails != null) {
layoutCont.contextPut(""String_Node_Str"",referenceDetails);
}
}
String url=Settings.getServerContextPathURI() + ""String_Node_Str"" + entry.getKey();
layoutCont.contextPut(""String_Node_Str"",url);
Boolean guestAllowed=(entry.getAccess() >= RepositoryEntry.ACC_USERS_GUESTS && loginModule.isGuestLoginLinksEnabled()) ? Boolean.TRUE : Boolean.FALSE;
layoutCont.contextPut(""String_Node_Str"",guestAllowed);
List<String> authorLinkNames=new ArrayList<String>(authorKeys.size());
Map<Long,String> authorNames=userManager.getUserDisplayNamesByKey(authorKeys);
int counter=0;
for (Map.Entry<Long,String> author : authorNames.entrySet()) {
Long authorKey=author.getKey();
String authorName=author.getValue();
FormLink authorLink=uifactory.addFormLink(""String_Node_Str"" + ++counter,""String_Node_Str"",authorName,null,formLayout,Link.NONTRANSLATED | Link.LINK);
authorLink.setUserObject(authorKey);
authorLinkNames.add(authorLink.getComponent().getComponentName());
}
layoutCont.contextPut(""String_Node_Str"",authorLinkNames);
}
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  int cmpcount=0;
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    layoutCont.contextPut(""String_Node_Str"",entry);
    layoutCont.contextPut(""String_Node_Str"",new Boolean(guestOnly));
    String cssClass=RepositoyUIFactory.getIconCssClass(entry);
    layoutCont.contextPut(""String_Node_Str"",cssClass);
    RepositoryHandler handler=RepositoryHandlerFactory.getInstance().getRepositoryHandler(entry);
    VFSContainer mediaContainer=handler.getMediaContainer(entry);
    if (mediaContainer != null) {
      baseUrl=registerMapper(ureq,new VFSContainerMapper(mediaContainer.getParentContainer()));
    }
    setText(entry.getDescription(),""String_Node_Str"",layoutCont);
    setText(entry.getRequirements(),""String_Node_Str"",layoutCont);
    setText(entry.getObjectives(),""String_Node_Str"",layoutCont);
    setText(entry.getCredits(),""String_Node_Str"",layoutCont);
    VFSLeaf movie=repositoryService.getIntroductionMovie(entry);
    VFSLeaf image=repositoryService.getIntroductionImage(entry);
    if (image != null || movie != null) {
      ImageComponent ic=new ImageComponent(ureq.getUserSession(),""String_Node_Str"");
      if (movie != null) {
        ic.setMedia(movie);
        ic.setMaxWithAndHeightToFitWithin(500,300);
        if (image != null) {
          ic.setPoster(image);
        }
      }
 else {
        ic.setMedia(image);
        ic.setMaxWithAndHeightToFitWithin(500,300);
      }
      layoutCont.put(""String_Node_Str"",ic);
    }
    if (repositoryModule.isCatalogEnabled()) {
      List<CatalogEntry> categories=catalogManager.getCatalogEntriesReferencing(entry);
      List<String> categoriesLink=new ArrayList<>(categories.size());
      for (      CatalogEntry category : categories) {
        String id=""String_Node_Str"" + ++cmpcount;
        String title=category.getParent().getName();
        FormLink catLink=uifactory.addFormLink(id,""String_Node_Str"",title,null,layoutCont,Link.LINK | Link.NONTRANSLATED);
        catLink.setIconLeftCSS(""String_Node_Str"");
        catLink.setUserObject(category.getKey());
        categoriesLink.add(id);
      }
      layoutCont.contextPut(""String_Node_Str"",categoriesLink);
    }
    if (!guestOnly) {
      boolean marked;
      if (row == null) {
        marked=markManager.isMarked(entry,getIdentity(),null);
      }
 else {
        marked=row.isMarked();
      }
      markLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",marked ? ""String_Node_Str"" : ""String_Node_Str"",null,layoutCont,Link.LINK);
      markLink.setElementCssClass(""String_Node_Str"");
      markLink.setIconLeftCSS(marked ? Mark.MARK_CSS_LARGE : Mark.MARK_ADD_CSS_LARGE);
    }
    RepositoryEntryStatistics statistics=entry.getStatistics();
    if (repositoryModule.isRatingEnabled()) {
      Integer myRating;
      if (row == null) {
        myRating=userRatingsDao.getRatingValue(getIdentity(),entry,null);
      }
 else {
        myRating=row.getMyRating();
      }
      Double averageRating=statistics.getRating();
      long numOfRatings=statistics.getNumOfRatings();
      float ratingValue=myRating == null ? 0f : myRating.floatValue();
      float averageRatingValue=averageRating == null ? 0f : averageRating.floatValue();
      ratingEl=new RatingWithAverageFormItem(""String_Node_Str"",ratingValue,averageRatingValue,5,numOfRatings);
      ratingEl.setEnabled(!guestOnly);
      layoutCont.add(""String_Node_Str"",ratingEl);
    }
    if (repositoryModule.isCommentEnabled()) {
      long numOfComments=statistics.getNumOfComments();
      String title=""String_Node_Str"" + numOfComments + ""String_Node_Str"";
      commentsLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",title,null,layoutCont,Link.NONTRANSLATED);
      commentsLink.setCustomEnabledLinkCSS(""String_Node_Str"");
      String css=numOfComments > 0 ? ""String_Node_Str"" : ""String_Node_Str"";
      commentsLink.setIconLeftCSS(css);
    }
    boolean isMember=repositoryService.isMember(getIdentity(),entry);
    List<Long> authorKeys=repositoryService.getAuthors(entry);
    boolean isAuthor=false;
    if (isMember) {
      isAuthor=authorKeys.contains(getIdentity().getKey());
      layoutCont.contextPut(""String_Node_Str"",new Boolean(isAuthor));
    }
    Roles roles=ureq.getUserSession().getRoles();
    layoutCont.contextPut(""String_Node_Str"",roles);
    String accessI18n=null;
    List<PriceMethod> types=new ArrayList<PriceMethod>();
    if (entry.isMembersOnly()) {
      if (isMember) {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
        startLink.setIconRightCSS(""String_Node_Str"");
        startLink.setPrimary(true);
      }
      accessI18n=translate(""String_Node_Str"");
    }
 else {
      AccessResult acResult=acService.isAccessible(entry,getIdentity(),isMember,false);
      if (acResult.isAccessible()) {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
      }
 else       if (acResult.getAvailableMethods().size() > 0) {
        for (        OfferAccess access : acResult.getAvailableMethods()) {
          AccessMethod method=access.getMethod();
          String type=(method.getMethodCssClass() + ""String_Node_Str"").intern();
          Price p=access.getOffer().getPrice();
          String price=p == null || p.isEmpty() ? ""String_Node_Str"" : PriceFormat.fullFormat(p);
          AccessMethodHandler amh=acModule.getAccessMethodHandler(method.getType());
          String displayName=amh.getMethodName(getLocale());
          types.add(new PriceMethod(price,type,displayName));
        }
        String linkText=guestOnly ? translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName())) : translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setCustomEnabledLinkCSS(""String_Node_Str"");
        startLink.setElementCssClass(""String_Node_Str"");
        if (guestOnly) {
          if (entry.getAccess() == RepositoryEntry.ACC_USERS_GUESTS) {
            startLink.setVisible(true);
          }
 else {
            startLink.setVisible(false);
          }
        }
 else {
          startLink.setVisible(true);
        }
      }
 else {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
        startLink.setVisible(!guestOnly);
      }
      startLink.setIconRightCSS(""String_Node_Str"");
      startLink.setPrimary(true);
switch (entry.getAccess()) {
case 0:
        accessI18n=""String_Node_Str"";
      break;
case 1:
    accessI18n=translate(""String_Node_Str"");
  break;
case 2:
accessI18n=translate(""String_Node_Str"");
break;
case 3:
accessI18n=translate(""String_Node_Str"");
break;
case 4:
accessI18n=translate(""String_Node_Str"");
break;
}
}
layoutCont.contextPut(""String_Node_Str"",accessI18n);
if (!types.isEmpty()) {
layoutCont.contextPut(""String_Node_Str"",types);
}
if (isMember) {
SearchBusinessGroupParams params=new SearchBusinessGroupParams(getIdentity(),true,true);
List<BusinessGroup> groups=businessGroupService.findBusinessGroups(params,entry,0,-1);
List<String> groupLinkNames=new ArrayList<>(groups.size());
for (BusinessGroup group : groups) {
String groupLinkName=""String_Node_Str"" + ++cmpcount;
FormLink link=uifactory.addFormLink(groupLinkName,""String_Node_Str"",group.getName(),null,layoutCont,Link.LINK | Link.NONTRANSLATED);
link.setIconLeftCSS(""String_Node_Str"");
link.setUserObject(group.getKey());
groupLinkNames.add(groupLinkName);
}
layoutCont.contextPut(""String_Node_Str"",groupLinkNames);
}
boolean passed=false;
boolean failed=false;
String score=null;
if (row != null) {
passed=row.isPassed();
failed=row.isFailed();
score=row.getScore();
}
 else {
UserEfficiencyStatement statement=effManager.getUserEfficiencyStatementLight(entry.getKey(),getIdentity());
if (statement != null) {
Boolean p=statement.getPassed();
if (p != null) {
passed=p.booleanValue();
failed=!p.booleanValue();
}
Float scoreVal=statement.getScore();
if (scoreVal != null) {
score=AssessmentHelper.getRoundedScore(scoreVal);
}
}
}
layoutCont.contextPut(""String_Node_Str"",passed);
layoutCont.contextPut(""String_Node_Str"",failed);
layoutCont.contextPut(""String_Node_Str"",score);
Long courseResId=entry.getOlatResource().getResourceableId();
Date recentLaunch=userCourseInfosManager.getRecentLaunchDate(courseResId,getIdentity());
layoutCont.contextPut(""String_Node_Str"",recentLaunch);
String numUsers;
OLATResourceable ores=entry.getOlatResource();
int cnt=0;
OLATResourceable courseRunOres=OresHelper.createOLATResourceableInstance(RunMainController.ORES_TYPE_COURSE_RUN,courseResId);
if (ores != null) cnt=coordinatorManager.getCoordinator().getEventBus().getListeningIdentityCntFor(courseRunOres);
numUsers=String.valueOf(cnt);
layoutCont.contextPut(""String_Node_Str"",numUsers);
if (isAuthor || roles.isOLATAdmin() || roles.isInstitutionalResourceManager()) {
String referenceDetails=referenceManager.getReferencesToSummary(entry.getOlatResource(),getLocale());
if (referenceDetails != null) {
layoutCont.contextPut(""String_Node_Str"",referenceDetails);
}
}
String url=Settings.getServerContextPathURI() + ""String_Node_Str"" + entry.getKey();
layoutCont.contextPut(""String_Node_Str"",url);
Boolean guestAllowed=(entry.getAccess() >= RepositoryEntry.ACC_USERS_GUESTS && loginModule.isGuestLoginLinksEnabled()) ? Boolean.TRUE : Boolean.FALSE;
layoutCont.contextPut(""String_Node_Str"",guestAllowed);
List<String> authorLinkNames=new ArrayList<String>(authorKeys.size());
Map<Long,String> authorNames=userManager.getUserDisplayNamesByKey(authorKeys);
int counter=0;
for (Map.Entry<Long,String> author : authorNames.entrySet()) {
Long authorKey=author.getKey();
String authorName=author.getValue();
FormLink authorLink=uifactory.addFormLink(""String_Node_Str"" + ++counter,""String_Node_Str"",authorName,null,formLayout,Link.NONTRANSLATED | Link.LINK);
authorLink.setUserObject(authorKey);
authorLinkNames.add(authorLink.getComponent().getComponentName());
}
layoutCont.contextPut(""String_Node_Str"",authorLinkNames);
}
}"
69545,"public AccessRefusedController(UserRequest ureq,WindowControl wControl){
  super(ureq,wControl);
  VelocityContainer mainVC=createVelocityContainer(""String_Node_Str"");
  StackedPanel contentP=new SimpleStackedPanel(""String_Node_Str"");
  contentP.setContent(mainVC);
  wControl.setWarning(translate(""String_Node_Str""));
  putInitialPanel(contentP);
}","public AccessRefusedController(UserRequest ureq,WindowControl wControl){
  super(ureq,wControl);
  VelocityContainer mainVC=createVelocityContainer(""String_Node_Str"");
  StackedPanel contentP=new SimpleStackedPanel(""String_Node_Str"");
  contentP.setContent(mainVC);
  putInitialPanel(contentP);
}"
69546,"@SuppressWarnings(""String_Node_Str"") @Override protected boolean validateFormLogic(UserRequest ureq){
  boolean createPublishSet=true;
  if (containsRunContextKey(""String_Node_Str"")) {
    createPublishSet=getFromRunContext(""String_Node_Str"") != multiSelectTree.getSelectedKeys();
  }
  if (createPublishSet && publishManager2.hasPublishableChanges()) {
    List<String> selectedKeys=new ArrayList<>(multiSelectTree.getSelectedKeys());
    for (Iterator<String> selectionIt=selectedKeys.iterator(); selectionIt.hasNext(); ) {
      String ident=selectionIt.next();
      TreeNode node=publishManager2.getPublishTreeModel().getNodeById(ident);
      if (!publishManager2.getPublishTreeModel().isSelectable(node)) {
        selectionIt.remove();
      }
    }
    List<String> asList=new ArrayList<String>(selectedKeys);
    publishManager2.createPublishSetFor(asList);
    addToRunContext(""String_Node_Str"",selectedKeys);
    PublishSetInformations set=publishProcess.testPublishSet(getLocale());
    sds=set.getWarnings();
    updateNotes=set.getUpdateInfos();
    addToRunContext(""String_Node_Str"",updateNotes);
    boolean isValid=sds.length == 0;
    if (isValid) {
      return true;
    }
    sds=StatusDescriptionHelper.sort(sds);
    String generalErrorTxt=null;
    String errorTxt=getTranslator().translate(""String_Node_Str"");
    String warningTxt=getTranslator().translate(""String_Node_Str"");
    String errors=""String_Node_Str"";
    int errCnt=0;
    String warnings=""String_Node_Str"";
    for (int i=0; i < sds.length; i++) {
      StatusDescription description=sds[i];
      String nodeId=sds[i].getDescriptionForUnit();
      if (nodeId == null) {
        generalErrorTxt=sds[i].getShortDescription(ureq.getLocale());
        break;
      }
      String nodeName=publishProcess.getCourseEditorTreeModel().getCourseNode(nodeId).getShortName();
      String isFor=""String_Node_Str"" + nodeName + ""String_Node_Str"";
      if (description.isError()) {
        errors+=""String_Node_Str"" + isFor + description.getShortDescription(ureq.getLocale())+ ""String_Node_Str"";
        errCnt++;
      }
 else       if (description.isWarning()) {
        warnings+=""String_Node_Str"" + isFor + description.getShortDescription(ureq.getLocale())+ ""String_Node_Str"";
      }
    }
    warnings+=""String_Node_Str"";
    errors+=""String_Node_Str"";
    errorTxt+=""String_Node_Str"" + errors;
    warningTxt+=""String_Node_Str"" + warnings;
    if (errCnt > 0) {
      return false;
    }
    if (generalErrorTxt != null) {
      addToRunContext(""String_Node_Str"",generalErrorTxt);
      errorElement.setValue(generalErrorTxt);
      errorElement.setVisible(true);
      return false;
    }
 else     if (errCnt > 0) {
      addToRunContext(""String_Node_Str"",errorTxt);
      errorElement.setValue(errorTxt);
      errorElement.setVisible(true);
      return false;
    }
 else {
      addToRunContext(""String_Node_Str"",warningTxt);
      return true;
    }
  }
 else {
    boolean retVal=!containsRunContextKey(""String_Node_Str"");
    retVal=retVal && !containsRunContextKey(""String_Node_Str"");
    return retVal;
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected boolean validateFormLogic(UserRequest ureq){
  boolean createPublishSet=true;
  if (containsRunContextKey(""String_Node_Str"")) {
    createPublishSet=getFromRunContext(""String_Node_Str"") != multiSelectTree.getSelectedKeys();
  }
  if (createPublishSet && publishManager2.hasPublishableChanges()) {
    List<String> selectedKeys=new ArrayList<>(multiSelectTree.getSelectedKeys());
    for (Iterator<String> selectionIt=selectedKeys.iterator(); selectionIt.hasNext(); ) {
      String ident=selectionIt.next();
      TreeNode node=publishManager2.getPublishTreeModel().getNodeById(ident);
      if (!publishManager2.getPublishTreeModel().isSelectable(node)) {
        selectionIt.remove();
      }
    }
    List<String> asList=new ArrayList<String>(selectedKeys);
    publishManager2.createPublishSetFor(asList);
    addToRunContext(""String_Node_Str"",selectedKeys);
    PublishSetInformations set=publishProcess.testPublishSet(getLocale());
    sds=set.getWarnings();
    updateNotes=set.getUpdateInfos();
    addToRunContext(""String_Node_Str"",updateNotes);
    boolean isValid=sds.length == 0;
    if (isValid) {
      return true;
    }
    sds=StatusDescriptionHelper.sort(sds);
    String generalErrorTxt=null;
    String errorTxt=getTranslator().translate(""String_Node_Str"");
    String warningTxt=getTranslator().translate(""String_Node_Str"");
    String errors=""String_Node_Str"";
    int errCnt=0;
    String warnings=""String_Node_Str"";
    for (int i=0; i < sds.length; i++) {
      StatusDescription description=sds[i];
      String nodeId=sds[i].getDescriptionForUnit();
      if (nodeId == null) {
        generalErrorTxt=sds[i].getShortDescription(getLocale());
        break;
      }
      String nodeName=publishProcess.getCourseEditorTreeModel().getCourseNode(nodeId).getShortName();
      String isFor=""String_Node_Str"" + nodeName + ""String_Node_Str"";
      if (description.isError()) {
        errors+=""String_Node_Str"" + isFor + description.getShortDescription(getLocale())+ ""String_Node_Str"";
        errCnt++;
      }
 else       if (description.isWarning()) {
        warnings+=""String_Node_Str"" + isFor + description.getShortDescription(getLocale())+ ""String_Node_Str"";
      }
    }
    warnings+=""String_Node_Str"";
    errors+=""String_Node_Str"";
    errorTxt+=""String_Node_Str"" + errors;
    warningTxt+=""String_Node_Str"" + warnings;
    if (generalErrorTxt != null) {
      addToRunContext(""String_Node_Str"",generalErrorTxt);
      errorElement.setValue(generalErrorTxt);
      errorElement.setVisible(true);
      return false;
    }
 else     if (errCnt > 0) {
      addToRunContext(""String_Node_Str"",errorTxt);
      errorElement.setValue(errorTxt);
      errorElement.setVisible(true);
      return false;
    }
 else {
      addToRunContext(""String_Node_Str"",warningTxt);
      return true;
    }
  }
 else {
    boolean retVal=!containsRunContextKey(""String_Node_Str"");
    retVal=retVal && !containsRunContextKey(""String_Node_Str"");
    return retVal;
  }
}"
69547,"/** 
 * @see org.olat.course.assessment.AssessmentManager#saveScoreEvaluation(org.olat.course.nodes.CourseNode,org.olat.core.id.Identity,org.olat.core.id.Identity,org.olat.course.run.scoring.ScoreEvaluation)
 */
public void saveScoreEvaluation(final CourseNode courseNode,final Identity identity,final Identity assessedIdentity,final ScoreEvaluation scoreEvaluation,final UserCourseEnvironment userCourseEnv,final boolean incrementUserAttempts){
  final ICourse course=CourseFactory.loadCourse(ores);
  final CoursePropertyManager cpm=course.getCourseEnvironment().getCoursePropertyManager();
  final RepositoryEntry courseEntry=course.getCourseEnvironment().getCourseGroupManager().getCourseEntry();
  Long attempts=CoordinatorManager.getInstance().getCoordinator().getSyncer().doInSync(createOLATResourceableForLocking(assessedIdentity),new SyncerCallback<Long>(){
    public Long execute(){
      Long attempts=null;
      Float score=scoreEvaluation.getScore();
      Boolean passed=scoreEvaluation.getPassed();
      saveNodeScore(courseNode,assessedIdentity,score,cpm);
      saveNodePassed(courseNode,assessedIdentity,passed,cpm);
      saveAssessmentID(courseNode,assessedIdentity,scoreEvaluation.getAssessmentID(),cpm);
      if (incrementUserAttempts) {
        attempts=incrementNodeAttemptsProperty(courseNode,assessedIdentity,cpm);
      }
      if (courseNode instanceof AssessableCourseNode) {
        userCourseEnv.getScoreAccounting().scoreInfoChanged((AssessableCourseNode)courseNode,scoreEvaluation);
        EfficiencyStatementManager esm=EfficiencyStatementManager.getInstance();
        esm.updateUserEfficiencyStatement(userCourseEnv);
      }
      if (scoreEvaluation.getPassed() && course.getCourseConfig().isAutomaticCertificationEnabled()) {
        CertificatesManager certificatesManager=CoreSpringFactory.getImpl(CertificatesManager.class);
        if (certificatesManager.isRecertificationAllowed(assessedIdentity,courseEntry)) {
          CertificateTemplate template=null;
          Long templateId=course.getCourseConfig().getCertificateTemplate();
          if (templateId != null) {
            template=certificatesManager.getTemplateById(templateId);
          }
          CertificateInfos certificateInfos=new CertificateInfos(assessedIdentity,score,passed);
          MailerResult result=new MailerResult();
          certificatesManager.generateCertificate(certificateInfos,courseEntry,template,result);
        }
      }
      return attempts;
    }
  }
);
  UserNodeAuditManager am=course.getCourseEnvironment().getAuditManager();
  am.appendToUserNodeLog(courseNode,identity,assessedIdentity,SCORE + ""String_Node_Str"" + String.valueOf(scoreEvaluation.getScore()));
  if (scoreEvaluation.getPassed() != null) {
    am.appendToUserNodeLog(courseNode,identity,assessedIdentity,PASSED + ""String_Node_Str"" + scoreEvaluation.getPassed().toString());
  }
 else {
    am.appendToUserNodeLog(courseNode,identity,assessedIdentity,PASSED + ""String_Node_Str"");
  }
  if (scoreEvaluation.getAssessmentID() != null) {
    am.appendToUserNodeLog(courseNode,assessedIdentity,assessedIdentity,ASSESSMENT_ID + ""String_Node_Str"" + scoreEvaluation.getAssessmentID().toString());
  }
  AssessmentChangedEvent ace=new AssessmentChangedEvent(AssessmentChangedEvent.TYPE_SCORE_EVAL_CHANGED,assessedIdentity);
  CoordinatorManager.getInstance().getCoordinator().getEventBus().fireEventToListenersOf(ace,course);
  if (scoreEvaluation.getScore() != null) {
    ThreadLocalUserActivityLogger.log(AssessmentLoggingAction.ASSESSMENT_SCORE_UPDATED,getClass(),LoggingResourceable.wrap(assessedIdentity),LoggingResourceable.wrapNonOlatResource(StringResourceableType.qtiScore,""String_Node_Str"",String.valueOf(scoreEvaluation.getScore())));
  }
  if (scoreEvaluation.getPassed() != null) {
    ThreadLocalUserActivityLogger.log(AssessmentLoggingAction.ASSESSMENT_PASSED_UPDATED,getClass(),LoggingResourceable.wrap(assessedIdentity),LoggingResourceable.wrapNonOlatResource(StringResourceableType.qtiPassed,""String_Node_Str"",String.valueOf(scoreEvaluation.getPassed())));
  }
 else {
    ThreadLocalUserActivityLogger.log(AssessmentLoggingAction.ASSESSMENT_PASSED_UPDATED,getClass(),LoggingResourceable.wrap(assessedIdentity),LoggingResourceable.wrapNonOlatResource(StringResourceableType.qtiPassed,""String_Node_Str"",""String_Node_Str""));
  }
  if (incrementUserAttempts && attempts != null) {
    ThreadLocalUserActivityLogger.log(AssessmentLoggingAction.ASSESSMENT_ATTEMPTS_UPDATED,getClass(),LoggingResourceable.wrap(identity),LoggingResourceable.wrapNonOlatResource(StringResourceableType.qtiAttempts,""String_Node_Str"",String.valueOf(attempts)));
  }
}","/** 
 * @see org.olat.course.assessment.AssessmentManager#saveScoreEvaluation(org.olat.course.nodes.CourseNode,org.olat.core.id.Identity,org.olat.core.id.Identity,org.olat.course.run.scoring.ScoreEvaluation)
 */
public void saveScoreEvaluation(final CourseNode courseNode,final Identity identity,final Identity assessedIdentity,final ScoreEvaluation scoreEvaluation,final UserCourseEnvironment userCourseEnv,final boolean incrementUserAttempts){
  final ICourse course=CourseFactory.loadCourse(ores);
  final CoursePropertyManager cpm=course.getCourseEnvironment().getCoursePropertyManager();
  final RepositoryEntry courseEntry=course.getCourseEnvironment().getCourseGroupManager().getCourseEntry();
  Long attempts=CoordinatorManager.getInstance().getCoordinator().getSyncer().doInSync(createOLATResourceableForLocking(assessedIdentity),new SyncerCallback<Long>(){
    public Long execute(){
      Long attempts=null;
      Float score=scoreEvaluation.getScore();
      Boolean passed=scoreEvaluation.getPassed();
      saveNodeScore(courseNode,assessedIdentity,score,cpm);
      saveNodePassed(courseNode,assessedIdentity,passed,cpm);
      saveAssessmentID(courseNode,assessedIdentity,scoreEvaluation.getAssessmentID(),cpm);
      if (incrementUserAttempts) {
        attempts=incrementNodeAttemptsProperty(courseNode,assessedIdentity,cpm);
      }
      if (courseNode instanceof AssessableCourseNode) {
        userCourseEnv.getScoreAccounting().scoreInfoChanged((AssessableCourseNode)courseNode,scoreEvaluation);
        EfficiencyStatementManager esm=EfficiencyStatementManager.getInstance();
        esm.updateUserEfficiencyStatement(userCourseEnv);
      }
      if (passed != null && passed.booleanValue() && course.getCourseConfig().isAutomaticCertificationEnabled()) {
        CertificatesManager certificatesManager=CoreSpringFactory.getImpl(CertificatesManager.class);
        if (certificatesManager.isRecertificationAllowed(assessedIdentity,courseEntry)) {
          CertificateTemplate template=null;
          Long templateId=course.getCourseConfig().getCertificateTemplate();
          if (templateId != null) {
            template=certificatesManager.getTemplateById(templateId);
          }
          CertificateInfos certificateInfos=new CertificateInfos(assessedIdentity,score,passed);
          MailerResult result=new MailerResult();
          certificatesManager.generateCertificate(certificateInfos,courseEntry,template,result);
        }
      }
      return attempts;
    }
  }
);
  UserNodeAuditManager am=course.getCourseEnvironment().getAuditManager();
  am.appendToUserNodeLog(courseNode,identity,assessedIdentity,SCORE + ""String_Node_Str"" + String.valueOf(scoreEvaluation.getScore()));
  if (scoreEvaluation.getPassed() != null) {
    am.appendToUserNodeLog(courseNode,identity,assessedIdentity,PASSED + ""String_Node_Str"" + scoreEvaluation.getPassed().toString());
  }
 else {
    am.appendToUserNodeLog(courseNode,identity,assessedIdentity,PASSED + ""String_Node_Str"");
  }
  if (scoreEvaluation.getAssessmentID() != null) {
    am.appendToUserNodeLog(courseNode,assessedIdentity,assessedIdentity,ASSESSMENT_ID + ""String_Node_Str"" + scoreEvaluation.getAssessmentID().toString());
  }
  AssessmentChangedEvent ace=new AssessmentChangedEvent(AssessmentChangedEvent.TYPE_SCORE_EVAL_CHANGED,assessedIdentity);
  CoordinatorManager.getInstance().getCoordinator().getEventBus().fireEventToListenersOf(ace,course);
  if (scoreEvaluation.getScore() != null) {
    ThreadLocalUserActivityLogger.log(AssessmentLoggingAction.ASSESSMENT_SCORE_UPDATED,getClass(),LoggingResourceable.wrap(assessedIdentity),LoggingResourceable.wrapNonOlatResource(StringResourceableType.qtiScore,""String_Node_Str"",String.valueOf(scoreEvaluation.getScore())));
  }
  if (scoreEvaluation.getPassed() != null) {
    ThreadLocalUserActivityLogger.log(AssessmentLoggingAction.ASSESSMENT_PASSED_UPDATED,getClass(),LoggingResourceable.wrap(assessedIdentity),LoggingResourceable.wrapNonOlatResource(StringResourceableType.qtiPassed,""String_Node_Str"",String.valueOf(scoreEvaluation.getPassed())));
  }
 else {
    ThreadLocalUserActivityLogger.log(AssessmentLoggingAction.ASSESSMENT_PASSED_UPDATED,getClass(),LoggingResourceable.wrap(assessedIdentity),LoggingResourceable.wrapNonOlatResource(StringResourceableType.qtiPassed,""String_Node_Str"",""String_Node_Str""));
  }
  if (incrementUserAttempts && attempts != null) {
    ThreadLocalUserActivityLogger.log(AssessmentLoggingAction.ASSESSMENT_ATTEMPTS_UPDATED,getClass(),LoggingResourceable.wrap(identity),LoggingResourceable.wrapNonOlatResource(StringResourceableType.qtiAttempts,""String_Node_Str"",String.valueOf(attempts)));
  }
}"
69548,"public Long execute(){
  Long attempts=null;
  Float score=scoreEvaluation.getScore();
  Boolean passed=scoreEvaluation.getPassed();
  saveNodeScore(courseNode,assessedIdentity,score,cpm);
  saveNodePassed(courseNode,assessedIdentity,passed,cpm);
  saveAssessmentID(courseNode,assessedIdentity,scoreEvaluation.getAssessmentID(),cpm);
  if (incrementUserAttempts) {
    attempts=incrementNodeAttemptsProperty(courseNode,assessedIdentity,cpm);
  }
  if (courseNode instanceof AssessableCourseNode) {
    userCourseEnv.getScoreAccounting().scoreInfoChanged((AssessableCourseNode)courseNode,scoreEvaluation);
    EfficiencyStatementManager esm=EfficiencyStatementManager.getInstance();
    esm.updateUserEfficiencyStatement(userCourseEnv);
  }
  if (scoreEvaluation.getPassed() && course.getCourseConfig().isAutomaticCertificationEnabled()) {
    CertificatesManager certificatesManager=CoreSpringFactory.getImpl(CertificatesManager.class);
    if (certificatesManager.isRecertificationAllowed(assessedIdentity,courseEntry)) {
      CertificateTemplate template=null;
      Long templateId=course.getCourseConfig().getCertificateTemplate();
      if (templateId != null) {
        template=certificatesManager.getTemplateById(templateId);
      }
      CertificateInfos certificateInfos=new CertificateInfos(assessedIdentity,score,passed);
      MailerResult result=new MailerResult();
      certificatesManager.generateCertificate(certificateInfos,courseEntry,template,result);
    }
  }
  return attempts;
}","public Long execute(){
  Long attempts=null;
  Float score=scoreEvaluation.getScore();
  Boolean passed=scoreEvaluation.getPassed();
  saveNodeScore(courseNode,assessedIdentity,score,cpm);
  saveNodePassed(courseNode,assessedIdentity,passed,cpm);
  saveAssessmentID(courseNode,assessedIdentity,scoreEvaluation.getAssessmentID(),cpm);
  if (incrementUserAttempts) {
    attempts=incrementNodeAttemptsProperty(courseNode,assessedIdentity,cpm);
  }
  if (courseNode instanceof AssessableCourseNode) {
    userCourseEnv.getScoreAccounting().scoreInfoChanged((AssessableCourseNode)courseNode,scoreEvaluation);
    EfficiencyStatementManager esm=EfficiencyStatementManager.getInstance();
    esm.updateUserEfficiencyStatement(userCourseEnv);
  }
  if (passed != null && passed.booleanValue() && course.getCourseConfig().isAutomaticCertificationEnabled()) {
    CertificatesManager certificatesManager=CoreSpringFactory.getImpl(CertificatesManager.class);
    if (certificatesManager.isRecertificationAllowed(assessedIdentity,courseEntry)) {
      CertificateTemplate template=null;
      Long templateId=course.getCourseConfig().getCertificateTemplate();
      if (templateId != null) {
        template=certificatesManager.getTemplateById(templateId);
      }
      CertificateInfos certificateInfos=new CertificateInfos(assessedIdentity,score,passed);
      MailerResult result=new MailerResult();
      certificatesManager.generateCertificate(certificateInfos,courseEntry,template,result);
    }
  }
  return attempts;
}"
69549,"/** 
 * @return the meesage body
 */
protected String getMBody(){
  return teArElBody.getValue();
}","/** 
 * @return the message body
 */
protected String getMBody(){
  return teArElBody.getValue();
}"
69550,"private String getGroupNames(List<Long> keys){
  StringBuilder sb=new StringBuilder();
  List<BusinessGroupShort> groups=businessGroupService.loadShortBusinessGroups(keys);
  for (  BusinessGroupShort group : groups) {
    if (sb.length() > 0)     sb.append(""String_Node_Str"");
    sb.append(group.getName());
  }
  return sb.toString();
}","private String getGroupNames(List<Long> keys){
  StringBuilder sb=new StringBuilder();
  List<BusinessGroupShort> groups=businessGroupService.loadShortBusinessGroups(keys);
  for (  BusinessGroupShort group : groups) {
    if (sb.length() > 0)     sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(group.getName());
  }
  return sb.toString();
}"
69551,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  Boolean ownerSelection=config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOOWNERS);
  Boolean coacheSelection=config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOCOACHES_ALL) || config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOCOACHES_COURSE) || config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_GROUP) != null || config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_AREA) != null;
  setFormTitle(""String_Node_Str"",null);
  setFormContextHelp(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  recipentsContainer=FormLayoutContainer.createHorizontalFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(recipentsContainer);
  wantEmail=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  wantEmail.addActionListener(FormEvent.ONCLICK);
  eList=(List<String>)config.get(COEditController.CONFIG_KEY_EMAILTOADRESSES);
  String emailToAdresses=""String_Node_Str"";
  if (eList != null) {
    emailToAdresses=StringHelper.formatIdentitesAsEmailToString(eList,""String_Node_Str"");
    wantEmail.select(""String_Node_Str"",eList.size() > 0);
  }
  teArElEmailToAdresses=uifactory.addTextAreaElement(""String_Node_Str"",""String_Node_Str"",-1,3,60,true,emailToAdresses,formLayout);
  teArElEmailToAdresses.setMandatory(true);
  wantOwners=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  if (ownerSelection != null) {
    wantOwners.select(""String_Node_Str"",ownerSelection.booleanValue());
  }
  wantOwners.addActionListener(FormEvent.ONCLICK);
  wantCoaches=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  if (coacheSelection != null && coacheSelection)   wantCoaches.select(""String_Node_Str"",true);
  wantCoaches.addActionListener(FormEvent.ONCLICK);
  coachesChoice=uifactory.addRadiosVertical(""String_Node_Str"",null,formLayout,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")});
  if (config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOCOACHES_ALL))   coachesChoice.select(""String_Node_Str"",true);
  if (config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOCOACHES_COURSE))   coachesChoice.select(""String_Node_Str"",true);
  if (config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_GROUP) != null || config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_AREA) != null)   coachesChoice.select(""String_Node_Str"",true);
  coachesChoice.addActionListener(FormEvent.ONCLICK);
  coachesChoice.setVisible(false);
  String groupCoachesInitVal;
  @SuppressWarnings(""String_Node_Str"") List<Long> groupCoachesKeys=(List<Long>)config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_GROUP_ID);
  if (groupCoachesKeys == null) {
    groupCoachesInitVal=(String)config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_GROUP);
    groupCoachesKeys=businessGroupService.toGroupKeys(groupCoachesInitVal,cev.getCourseGroupManager().getCourseEntry());
  }
  groupCoachesInitVal=getGroupNames(groupCoachesKeys);
  easyGroupCoachSelectionList=uifactory.addStaticTextElement(""String_Node_Str"",""String_Node_Str"",groupCoachesInitVal,formLayout);
  easyGroupCoachSelectionList.setUserObject(groupCoachesKeys);
  easyGroupCoachSelectionList.setVisible(false);
  chooseGroupCoachesLink=uifactory.addFormLink(""String_Node_Str"",formLayout,""String_Node_Str"");
  chooseGroupCoachesLink.setVisible(false);
  String areaCoachesInitVal;
  @SuppressWarnings(""String_Node_Str"") List<Long> areaCoachesKeys=(List<Long>)config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_AREA_IDS);
  if (areaCoachesKeys == null) {
    areaCoachesInitVal=(String)config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_AREA);
    areaCoachesKeys=areaManager.toAreaKeys(areaCoachesInitVal,cev.getCourseGroupManager().getCourseResource());
  }
  areaCoachesInitVal=getAreaNames(areaCoachesKeys);
  easyAreaCoachSelectionList=uifactory.addStaticTextElement(""String_Node_Str"",""String_Node_Str"",areaCoachesInitVal,formLayout);
  easyAreaCoachSelectionList.setUserObject(areaCoachesKeys);
  easyAreaCoachSelectionList.setVisible(false);
  chooseAreasCoachesLink=uifactory.addFormLink(""String_Node_Str"",formLayout,""String_Node_Str"");
  Boolean particiapntSelection=config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_ALL) || config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_COURSE) || config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_GROUP) != null || config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_AREA) != null;
  wantParticipants=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  if (particiapntSelection != null && particiapntSelection)   wantParticipants.select(""String_Node_Str"",true);
  wantParticipants.addActionListener(FormEvent.ONCLICK);
  participantsChoice=uifactory.addRadiosVertical(""String_Node_Str"",null,formLayout,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")});
  if (config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_ALL))   participantsChoice.select(""String_Node_Str"",true);
  if (config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_COURSE))   participantsChoice.select(""String_Node_Str"",true);
  if (config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_GROUP) != null || config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_AREA) != null)   participantsChoice.select(""String_Node_Str"",true);
  participantsChoice.addActionListener(FormEvent.ONCLICK);
  participantsChoice.setVisible(false);
  String groupParticipantsInitVal;
  @SuppressWarnings(""String_Node_Str"") List<Long> groupParticipantsKeys=(List<Long>)config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_GROUP_ID);
  if (groupParticipantsKeys == null) {
    groupParticipantsInitVal=(String)config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_GROUP);
    groupParticipantsKeys=businessGroupService.toGroupKeys(groupParticipantsInitVal,cev.getCourseGroupManager().getCourseEntry());
  }
  groupParticipantsInitVal=getGroupNames(groupParticipantsKeys);
  easyGroupParticipantsSelectionList=uifactory.addStaticTextElement(""String_Node_Str"",""String_Node_Str"",groupParticipantsInitVal,formLayout);
  easyGroupParticipantsSelectionList.setUserObject(groupParticipantsKeys);
  easyGroupParticipantsSelectionList.setVisible(false);
  chooseGroupParticipantsLink=uifactory.addFormLink(""String_Node_Str"",formLayout,""String_Node_Str"");
  chooseGroupParticipantsLink.setVisible(false);
  String areaParticipantsInitVal;
  @SuppressWarnings(""String_Node_Str"") List<Long> areaParticipantsKeys=(List<Long>)config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_AREA_IDS);
  if (areaParticipantsKeys == null) {
    areaParticipantsInitVal=(String)config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_AREA);
    areaParticipantsKeys=areaManager.toAreaKeys(areaParticipantsInitVal,cev.getCourseGroupManager().getCourseResource());
  }
  areaParticipantsInitVal=getAreaNames(areaParticipantsKeys);
  easyAreaParticipantsSelectionList=uifactory.addStaticTextElement(""String_Node_Str"",""String_Node_Str"",areaParticipantsInitVal,formLayout);
  easyAreaParticipantsSelectionList.setUserObject(areaParticipantsKeys);
  easyAreaParticipantsSelectionList.setVisible(false);
  chooseAreasParticipantsLink=uifactory.addFormLink(""String_Node_Str"",formLayout,""String_Node_Str"");
  chooseAreasParticipantsLink.setVisible(false);
  coachesAndPartips=FormLayoutContainer.createHorizontalFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(coachesAndPartips);
  groupsAndAreasSubContainer=FormLayoutContainer.createHorizontalFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(groupsAndAreasSubContainer);
  uifactory.addSpacerElement(""String_Node_Str"",formLayout,false);
  String mS=(String)config.get(COEditController.CONFIG_KEY_MSUBJECT_DEFAULT);
  String mSubject=(mS != null) ? mS : ""String_Node_Str"";
  teElSubject=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",255,mSubject,formLayout);
  String mB=(String)config.get(COEditController.CONFIG_KEY_MBODY_DEFAULT);
  String mBody=(mB != null) ? mB : ""String_Node_Str"";
  teArElBody=uifactory.addTextAreaElement(""String_Node_Str"",""String_Node_Str"",10000,8,60,true,mBody,formLayout);
  subm=uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
  update();
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  Boolean ownerSelection=config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOOWNERS);
  Boolean coacheSelection=config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOCOACHES_ALL) || config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOCOACHES_COURSE) || config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_GROUP) != null || config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_AREA) != null;
  setFormTitle(""String_Node_Str"",null);
  setFormContextHelp(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  recipentsContainer=FormLayoutContainer.createHorizontalFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(recipentsContainer);
  wantEmail=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  wantEmail.addActionListener(FormEvent.ONCLICK);
  eList=(List<String>)config.get(COEditController.CONFIG_KEY_EMAILTOADRESSES);
  String emailToAdresses=""String_Node_Str"";
  if (eList != null) {
    emailToAdresses=StringHelper.formatIdentitesAsEmailToString(eList,""String_Node_Str"");
    wantEmail.select(""String_Node_Str"",eList.size() > 0);
  }
  teArElEmailToAdresses=uifactory.addTextAreaElement(""String_Node_Str"",""String_Node_Str"",-1,3,60,true,emailToAdresses,formLayout);
  teArElEmailToAdresses.setMandatory(true);
  wantOwners=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  if (ownerSelection != null) {
    wantOwners.select(""String_Node_Str"",ownerSelection.booleanValue());
  }
  wantOwners.addActionListener(FormEvent.ONCLICK);
  wantCoaches=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  if (coacheSelection != null && coacheSelection)   wantCoaches.select(""String_Node_Str"",true);
  wantCoaches.addActionListener(FormEvent.ONCLICK);
  coachesChoice=uifactory.addRadiosVertical(""String_Node_Str"",null,formLayout,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")});
  if (config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOCOACHES_ALL))   coachesChoice.select(""String_Node_Str"",true);
  if (config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOCOACHES_COURSE))   coachesChoice.select(""String_Node_Str"",true);
  if (config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_GROUP) != null || config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_AREA) != null)   coachesChoice.select(""String_Node_Str"",true);
  coachesChoice.addActionListener(FormEvent.ONCLICK);
  coachesChoice.setVisible(false);
  chooseGroupCoachesLink=uifactory.addFormLink(""String_Node_Str"",formLayout,""String_Node_Str"");
  chooseGroupCoachesLink.setIconLeftCSS(""String_Node_Str"");
  chooseGroupCoachesLink.setVisible(false);
  chooseGroupCoachesLink.setLabel(""String_Node_Str"",null);
  chooseGroupCoachesLink.setElementCssClass(""String_Node_Str"");
  String groupCoachesInitVal;
  @SuppressWarnings(""String_Node_Str"") List<Long> groupCoachesKeys=(List<Long>)config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_GROUP_ID);
  if (groupCoachesKeys == null) {
    groupCoachesInitVal=(String)config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_GROUP);
    groupCoachesKeys=businessGroupService.toGroupKeys(groupCoachesInitVal,cev.getCourseGroupManager().getCourseEntry());
  }
  groupCoachesInitVal=getGroupNames(groupCoachesKeys);
  easyGroupCoachSelectionList=uifactory.addStaticTextElement(""String_Node_Str"",null,groupCoachesInitVal,formLayout);
  easyGroupCoachSelectionList.setUserObject(groupCoachesKeys);
  easyGroupCoachSelectionList.setVisible(false);
  easyGroupCoachSelectionList.setElementCssClass(""String_Node_Str"");
  chooseAreasCoachesLink=uifactory.addFormLink(""String_Node_Str"",formLayout,""String_Node_Str"");
  chooseAreasCoachesLink.setIconLeftCSS(""String_Node_Str"");
  chooseAreasCoachesLink.setLabel(""String_Node_Str"",null);
  chooseAreasCoachesLink.setElementCssClass(""String_Node_Str"");
  String areaCoachesInitVal;
  @SuppressWarnings(""String_Node_Str"") List<Long> areaCoachesKeys=(List<Long>)config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_AREA_IDS);
  if (areaCoachesKeys == null) {
    areaCoachesInitVal=(String)config.get(COEditController.CONFIG_KEY_EMAILTOCOACHES_AREA);
    areaCoachesKeys=areaManager.toAreaKeys(areaCoachesInitVal,cev.getCourseGroupManager().getCourseResource());
  }
  areaCoachesInitVal=getAreaNames(areaCoachesKeys);
  easyAreaCoachSelectionList=uifactory.addStaticTextElement(""String_Node_Str"",null,areaCoachesInitVal,formLayout);
  easyAreaCoachSelectionList.setUserObject(areaCoachesKeys);
  easyAreaCoachSelectionList.setVisible(false);
  easyAreaCoachSelectionList.setElementCssClass(""String_Node_Str"");
  Boolean particiapntSelection=config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_ALL) || config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_COURSE) || config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_GROUP) != null || config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_AREA) != null;
  wantParticipants=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  if (particiapntSelection != null && particiapntSelection)   wantParticipants.select(""String_Node_Str"",true);
  wantParticipants.addActionListener(FormEvent.ONCLICK);
  participantsChoice=uifactory.addRadiosVertical(""String_Node_Str"",null,formLayout,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")});
  if (config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_ALL))   participantsChoice.select(""String_Node_Str"",true);
  if (config.getBooleanSafe(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_COURSE))   participantsChoice.select(""String_Node_Str"",true);
  if (config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_GROUP) != null || config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_AREA) != null)   participantsChoice.select(""String_Node_Str"",true);
  participantsChoice.addActionListener(FormEvent.ONCLICK);
  participantsChoice.setVisible(false);
  chooseGroupParticipantsLink=uifactory.addFormLink(""String_Node_Str"",formLayout,""String_Node_Str"");
  chooseGroupParticipantsLink.setIconLeftCSS(""String_Node_Str"");
  chooseGroupParticipantsLink.setVisible(false);
  chooseGroupParticipantsLink.setLabel(""String_Node_Str"",null);
  chooseGroupParticipantsLink.setElementCssClass(""String_Node_Str"");
  String groupParticipantsInitVal;
  @SuppressWarnings(""String_Node_Str"") List<Long> groupParticipantsKeys=(List<Long>)config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_GROUP_ID);
  if (groupParticipantsKeys == null) {
    groupParticipantsInitVal=(String)config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_GROUP);
    groupParticipantsKeys=businessGroupService.toGroupKeys(groupParticipantsInitVal,cev.getCourseGroupManager().getCourseEntry());
  }
  groupParticipantsInitVal=getGroupNames(groupParticipantsKeys);
  easyGroupParticipantsSelectionList=uifactory.addStaticTextElement(""String_Node_Str"",null,groupParticipantsInitVal,formLayout);
  easyGroupParticipantsSelectionList.setUserObject(groupParticipantsKeys);
  easyGroupParticipantsSelectionList.setVisible(false);
  easyGroupParticipantsSelectionList.setElementCssClass(""String_Node_Str"");
  chooseAreasParticipantsLink=uifactory.addFormLink(""String_Node_Str"",formLayout,""String_Node_Str"");
  chooseAreasParticipantsLink.setIconLeftCSS(""String_Node_Str"");
  chooseAreasParticipantsLink.setVisible(false);
  chooseAreasParticipantsLink.setLabel(""String_Node_Str"",null);
  chooseAreasParticipantsLink.setElementCssClass(""String_Node_Str"");
  String areaParticipantsInitVal;
  @SuppressWarnings(""String_Node_Str"") List<Long> areaParticipantsKeys=(List<Long>)config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_AREA_ID);
  if (areaParticipantsKeys == null) {
    areaParticipantsInitVal=(String)config.get(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS_AREA);
    areaParticipantsKeys=areaManager.toAreaKeys(areaParticipantsInitVal,cev.getCourseGroupManager().getCourseResource());
  }
  areaParticipantsInitVal=getAreaNames(areaParticipantsKeys);
  easyAreaParticipantsSelectionList=uifactory.addStaticTextElement(""String_Node_Str"",null,areaParticipantsInitVal,formLayout);
  easyAreaParticipantsSelectionList.setUserObject(areaParticipantsKeys);
  easyAreaParticipantsSelectionList.setVisible(false);
  easyAreaParticipantsSelectionList.setElementCssClass(""String_Node_Str"");
  uifactory.addSpacerElement(""String_Node_Str"",formLayout,false);
  String mS=(String)config.get(COEditController.CONFIG_KEY_MSUBJECT_DEFAULT);
  String mSubject=(mS != null) ? mS : ""String_Node_Str"";
  teElSubject=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",255,mSubject,formLayout);
  String mB=(String)config.get(COEditController.CONFIG_KEY_MBODY_DEFAULT);
  String mBody=(mB != null) ? mB : ""String_Node_Str"";
  teArElBody=uifactory.addTextAreaElement(""String_Node_Str"",""String_Node_Str"",10000,8,60,true,mBody,formLayout);
  subm=uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
  update();
}"
69552,"/** 
 * returns the choosen learning areas, or null if no ares were choosen.
 */
protected String getEmailCoachesAreas(){
  if (!isEmpty(easyAreaCoachSelectionList) && wantCoaches.isSelected(0) && coachesChoice.isSelected(2)) {
    return easyAreaCoachSelectionList.getValue();
  }
  return null;
}","/** 
 * returns the chosen learning areas, or null if no ares were chosen.
 */
protected String getEmailCoachesAreas(){
  if (!isEmpty(easyAreaCoachSelectionList) && wantCoaches.isSelected(0) && coachesChoice.isSelected(2)) {
    return easyAreaCoachSelectionList.getValue();
  }
  return null;
}"
69553,"@Override protected void event(UserRequest ureq,Controller source,Event event){
  subm.setEnabled(true);
  if (source == groupChooseCoaches) {
    if (event == Event.DONE_EVENT) {
      cmc.deactivate();
      easyGroupCoachSelectionList.setValue(StringHelper.formatAsSortUniqCSVString(groupChooseCoaches.getSelectedNames()));
      easyGroupCoachSelectionList.setUserObject(groupChooseCoaches.getSelectedKeys());
      easyGroupCoachSelectionList.getRootForm().submit(ureq);
    }
 else     if (Event.CANCELLED_EVENT == event) {
      cmc.deactivate();
    }
  }
 else   if (source == areaChooseCoaches) {
    if (event == Event.DONE_EVENT) {
      cmc.deactivate();
      easyAreaCoachSelectionList.setValue(StringHelper.formatAsSortUniqCSVString(areaChooseCoaches.getSelectedNames()));
      easyAreaCoachSelectionList.setUserObject(areaChooseCoaches.getSelectedKeys());
      easyAreaCoachSelectionList.getRootForm().submit(ureq);
    }
 else     if (event == Event.CANCELLED_EVENT) {
      cmc.deactivate();
    }
  }
 else   if (source == groupChooseParticipants) {
    if (event == Event.DONE_EVENT) {
      cmc.deactivate();
      easyGroupParticipantsSelectionList.setValue(StringHelper.formatAsSortUniqCSVString(groupChooseParticipants.getSelectedNames()));
      easyGroupParticipantsSelectionList.setUserObject(groupChooseParticipants.getSelectedKeys());
      easyGroupParticipantsSelectionList.getRootForm().submit(ureq);
    }
 else     if (Event.CANCELLED_EVENT == event) {
      cmc.deactivate();
    }
  }
 else   if (source == areaChooseParticipants) {
    if (event == Event.DONE_EVENT) {
      cmc.deactivate();
      easyAreaParticipantsSelectionList.setValue(StringHelper.formatAsSortUniqCSVString(areaChooseParticipants.getSelectedNames()));
      easyAreaParticipantsSelectionList.setUserObject(areaChooseParticipants.getSelectedKeys());
      easyAreaParticipantsSelectionList.getRootForm().submit(ureq);
    }
 else     if (event == Event.CANCELLED_EVENT) {
      cmc.deactivate();
    }
  }
}","@Override protected void event(UserRequest ureq,Controller source,Event event){
  subm.setEnabled(true);
  if (source == groupChooseCoaches) {
    if (event == Event.DONE_EVENT) {
      cmc.deactivate();
      easyGroupCoachSelectionList.setValue(getGroupNames(groupChooseCoaches.getSelectedKeys()));
      easyGroupCoachSelectionList.setUserObject(groupChooseCoaches.getSelectedKeys());
      easyGroupCoachSelectionList.getRootForm().submit(ureq);
    }
 else     if (Event.CANCELLED_EVENT == event) {
      cmc.deactivate();
    }
  }
 else   if (source == areaChooseCoaches) {
    if (event == Event.DONE_EVENT) {
      cmc.deactivate();
      easyAreaCoachSelectionList.setValue(getAreaNames(areaChooseCoaches.getSelectedKeys()));
      easyAreaCoachSelectionList.setUserObject(areaChooseCoaches.getSelectedKeys());
      easyAreaCoachSelectionList.getRootForm().submit(ureq);
    }
 else     if (event == Event.CANCELLED_EVENT) {
      cmc.deactivate();
    }
  }
 else   if (source == groupChooseParticipants) {
    if (event == Event.DONE_EVENT) {
      cmc.deactivate();
      easyGroupParticipantsSelectionList.setValue(getGroupNames(groupChooseParticipants.getSelectedKeys()));
      easyGroupParticipantsSelectionList.setUserObject(groupChooseParticipants.getSelectedKeys());
      easyGroupParticipantsSelectionList.getRootForm().submit(ureq);
    }
 else     if (Event.CANCELLED_EVENT == event) {
      cmc.deactivate();
    }
  }
 else   if (source == areaChooseParticipants) {
    if (event == Event.DONE_EVENT) {
      cmc.deactivate();
      easyAreaParticipantsSelectionList.setValue(getAreaNames(areaChooseParticipants.getSelectedKeys()));
      easyAreaParticipantsSelectionList.setUserObject(areaChooseParticipants.getSelectedKeys());
      easyAreaParticipantsSelectionList.getRootForm().submit(ureq);
    }
 else     if (event == Event.CANCELLED_EVENT) {
      cmc.deactivate();
    }
  }
}"
69554,"/** 
 * returns the choosen groups, or null if no groups were choosen.
 * @return
 */
protected String getEmailGroupCoaches(){
  if (!isEmpty(easyGroupCoachSelectionList) && wantCoaches.isSelected(0) && coachesChoice.isSelected(2)) {
    return easyGroupCoachSelectionList.getValue();
  }
  return null;
}","/** 
 * returns the chosen groups, or null if no groups were chosen.
 * @return
 */
protected String getEmailGroupCoaches(){
  if (!isEmpty(easyGroupCoachSelectionList) && wantCoaches.isSelected(0) && coachesChoice.isSelected(2)) {
    return easyGroupCoachSelectionList.getValue();
  }
  return null;
}"
69555,"private String getAreaNames(List<Long> keys){
  StringBuilder sb=new StringBuilder();
  List<BGArea> areas=areaManager.loadAreas(keys);
  for (  BGArea area : areas) {
    if (sb.length() > 0)     sb.append(""String_Node_Str"");
    sb.append(area.getName());
  }
  return sb.toString();
}","private String getAreaNames(List<Long> keys){
  StringBuilder sb=new StringBuilder();
  List<BGArea> areas=areaManager.loadAreas(keys);
  for (  BGArea area : areas) {
    if (sb.length() > 0)     sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(area.getName());
  }
  return sb.toString();
}"
69556,"/** 
 * @see org.olat.core.gui.components.Form#validate(org.olat.core.gui.UserRequest)
 */
@Override protected boolean validateFormLogic(UserRequest ureq){
  if (!wantCoaches.isSelected(0) && !wantParticipants.isSelected(0) && !wantEmail.isSelected(0)&& !wantOwners.isSelected(0)) {
    recipentsContainer.setErrorKey(""String_Node_Str"",null);
    return false;
  }
  recipentsContainer.clearError();
  coachesAndPartips.clearError();
  String emailToAdresses=teArElEmailToAdresses.getValue();
  String[] emailAdress=emailToAdresses.split(""String_Node_Str"");
  teArElEmailToAdresses.clearError();
  if (wantEmail.isSelected(0) && (emailAdress == null || emailAdress.length == 0 || ""String_Node_Str"".equals(emailAdress[0]))) {
    teArElEmailToAdresses.setErrorKey(""String_Node_Str"",null);
    return false;
  }
  if ((emailAdress != null) && (emailAdress.length > 0) && (!""String_Node_Str"".equals(emailAdress[0]))) {
    this.eList=new ArrayList<String>();
    for (int i=0; i < emailAdress.length; i++) {
      String eAd=emailAdress[i].trim();
      boolean emailok=MailHelper.isValidEmailAddress(eAd);
      if (emailok == false) {
        teArElEmailToAdresses.setErrorKey(""String_Node_Str"",null);
        return false;
      }
      eList.add(eAd);
    }
  }
  if (wantCoaches.isSelected(0)) {
    if (!coachesChoice.isOneSelected()) {
      coachesChoice.setErrorKey(""String_Node_Str"",null);
      return false;
    }
    if (coachesChoice.isSelected(2) && (isEmpty(easyAreaCoachSelectionList) || easyAreaCoachSelectionList == null)) {
      if (easyGroupCoachSelectionList.getValue() == null && isEmpty(easyGroupCoachSelectionList) || easyGroupCoachSelectionList.getValue().equals(""String_Node_Str"")) {
        easyAreaCoachSelectionList.setErrorKey(""String_Node_Str"",null);
        easyGroupCoachSelectionList.setErrorKey(""String_Node_Str"",null);
        return false;
      }
    }
  }
  if (wantParticipants.isSelected(0)) {
    if (!participantsChoice.isOneSelected()) {
      participantsChoice.setErrorKey(""String_Node_Str"",null);
      return false;
    }
    if (participantsChoice.isSelected(2) && (isEmpty(easyAreaParticipantsSelectionList) || easyAreaParticipantsSelectionList == null)) {
      if (easyGroupParticipantsSelectionList.getValue() == null && isEmpty(easyGroupParticipantsSelectionList) || easyGroupParticipantsSelectionList.getValue().equals(""String_Node_Str"")) {
        easyAreaParticipantsSelectionList.setErrorKey(""String_Node_Str"",null);
        easyGroupParticipantsSelectionList.setErrorKey(""String_Node_Str"",null);
        return false;
      }
    }
  }
  return true;
}","/** 
 * @see org.olat.core.gui.components.Form#validate(org.olat.core.gui.UserRequest)
 */
@Override protected boolean validateFormLogic(UserRequest ureq){
  if (!wantCoaches.isSelected(0) && !wantParticipants.isSelected(0) && !wantEmail.isSelected(0)&& !wantOwners.isSelected(0)) {
    recipentsContainer.setErrorKey(""String_Node_Str"",null);
    return false;
  }
  String emailToAdresses=teArElEmailToAdresses.getValue();
  String[] emailAdress=emailToAdresses.split(""String_Node_Str"");
  teArElEmailToAdresses.clearError();
  if (wantEmail.isSelected(0) && (emailAdress == null || emailAdress.length == 0 || ""String_Node_Str"".equals(emailAdress[0]))) {
    teArElEmailToAdresses.setErrorKey(""String_Node_Str"",null);
    return false;
  }
  if ((emailAdress != null) && (emailAdress.length > 0) && (!""String_Node_Str"".equals(emailAdress[0]))) {
    this.eList=new ArrayList<String>();
    for (int i=0; i < emailAdress.length; i++) {
      String eAd=emailAdress[i].trim();
      boolean emailok=MailHelper.isValidEmailAddress(eAd);
      if (emailok == false) {
        teArElEmailToAdresses.setErrorKey(""String_Node_Str"",null);
        return false;
      }
      eList.add(eAd);
    }
  }
  if (wantCoaches.isSelected(0)) {
    if (!coachesChoice.isOneSelected()) {
      coachesChoice.setErrorKey(""String_Node_Str"",null);
      return false;
    }
    if (coachesChoice.isSelected(2) && (isEmpty(easyAreaCoachSelectionList) || easyAreaCoachSelectionList == null)) {
      if (easyGroupCoachSelectionList.getValue() == null && isEmpty(easyGroupCoachSelectionList) || easyGroupCoachSelectionList.getValue().equals(""String_Node_Str"")) {
        easyAreaCoachSelectionList.setErrorKey(""String_Node_Str"",null);
        easyGroupCoachSelectionList.setErrorKey(""String_Node_Str"",null);
        return false;
      }
    }
  }
  if (wantParticipants.isSelected(0)) {
    if (!participantsChoice.isOneSelected()) {
      participantsChoice.setErrorKey(""String_Node_Str"",null);
      return false;
    }
    if (participantsChoice.isSelected(2) && (isEmpty(easyAreaParticipantsSelectionList) || easyAreaParticipantsSelectionList == null)) {
      if (easyGroupParticipantsSelectionList.getValue() == null && isEmpty(easyGroupParticipantsSelectionList) || easyGroupParticipantsSelectionList.getValue().equals(""String_Node_Str"")) {
        easyAreaParticipantsSelectionList.setErrorKey(""String_Node_Str"",null);
        easyGroupParticipantsSelectionList.setErrorKey(""String_Node_Str"",null);
        return false;
      }
    }
  }
  return true;
}"
69557,"/** 
 * Archive the current SCORM CMI Data, see ItemSequence.archiveScoData
 * @return
 */
public boolean archiveScoData(){
  boolean success=false;
  try {
    String itemId=scormManager.getSequence().findItemFromIndex(Integer.valueOf(olatScoId));
    ItemSequence item=scormManager.getSequence().getItem(itemId);
    if (item != null) {
      success=item.archiveScoData();
    }
  }
 catch (  Exception e) {
    if (isLogDebugEnabled()) {
      logWarn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  return success;
}","/** 
 * Archive the current SCORM CMI Data, see ItemSequence.archiveScoData
 * @return
 */
public boolean archiveScoData(){
  boolean success=false;
  try {
    String itemId=scormManager.getSequence().findItemFromIndex(Integer.valueOf(olatScoId));
    ItemSequence item=scormManager.getSequence().getItem(itemId);
    if (item != null) {
      success=item.archiveScoData();
    }
  }
 catch (  Exception e) {
    logError(""String_Node_Str"",e);
  }
  return success;
}"
69558,"private boolean validLimitationOnType(List<ResourceHandler> handlers){
  boolean allOk=true;
  if (limitTypes != null && handlers != null) {
    for (    ResourceHandler handler : handlers) {
      boolean match=false;
      for (      String limitType : limitTypes) {
        if (limitType.equals(handler.getHandler().getSupportedType())) {
          match=true;
        }
      }
      if (!match) {
        allOk=false;
        uploadFileEl.setErrorKey(""String_Node_Str"",new String[]{});
      }
    }
  }
  return allOk;
}","private boolean validLimitationOnType(List<ResourceHandler> handlers){
  boolean allOk=true;
  if (limitTypes != null && handlers != null) {
    for (Iterator<ResourceHandler> handlerIt=handlers.iterator(); handlerIt.hasNext(); ) {
      boolean match=false;
      ResourceHandler handler=handlerIt.next();
      for (      String limitType : limitTypes) {
        if (limitType.equals(handler.getHandler().getSupportedType())) {
          match=true;
        }
      }
      if (!match) {
        handlerIt.remove();
      }
    }
    if (handlers.isEmpty()) {
      allOk=false;
      uploadFileEl.setErrorKey(""String_Node_Str"",new String[]{});
    }
  }
  return allOk;
}"
69559,"private void renderMultiColumnsVertical(StringOutput sb,MultipleSelectionComponent stC,int columns){
  String columnCss;
  if (columns == 2) {
    columnCss=""String_Node_Str"";
  }
 else   if (columns == 3) {
    columnCss=""String_Node_Str"";
  }
 else {
    columns=4;
    columnCss=""String_Node_Str"";
  }
  sb.append(""String_Node_Str"");
  appendIdIfRequired(sb,stC).append(""String_Node_Str"");
  CheckboxElement[] checks=stC.getCheckComponents();
  for (int i=0; i < checks.length; ) {
    sb.append(""String_Node_Str"");
    for (int j=columns; j-- > 0; ) {
      if (i < checks.length) {
        CheckboxElement check=checks[i++];
        sb.append(""String_Node_Str"").append(columnCss).append(""String_Node_Str"").append(""String_Node_Str"");
        renderCheckbox(sb,check,stC,false);
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
}","private void renderMultiColumnsVertical(StringOutput sb,MultipleSelectionComponent stC,int columns){
  String columnCss;
  if (columns == 2) {
    columnCss=""String_Node_Str"";
  }
 else   if (columns == 3) {
    columnCss=""String_Node_Str"";
  }
 else {
    columns=4;
    columnCss=""String_Node_Str"";
  }
  sb.append(""String_Node_Str"");
  appendIdIfRequired(sb,stC).append(""String_Node_Str"");
  CheckboxElement[] checks=stC.getCheckComponents();
  for (int i=0; i < checks.length; ) {
    sb.append(""String_Node_Str"");
    for (int j=columns; j-- > 0; ) {
      if (i < checks.length) {
        CheckboxElement check=checks[i++];
        sb.append(""String_Node_Str"").append(columnCss).append(""String_Node_Str"");
        renderCheckbox(sb,check,stC,false);
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
}"
69560,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  passwordSwitch=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{translate(""String_Node_Str"")});
  passwordSwitch.addActionListener(FormEvent.ONCHANGE);
  passwordField=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",30,""String_Node_Str"",formLayout);
  passwordField.setExampleKey(""String_Node_Str"",null);
  passwordField.showError(false);
  if (condition != null && StringHelper.containsNonWhitespace(condition.getPassword())) {
    passwordSwitch.select(""String_Node_Str"",true);
    passwordField.setVisible(true);
    passwordField.setValue(condition.getPassword());
  }
 else {
    passwordField.setVisible(false);
    passwordSwitch.select(""String_Node_Str"",false);
    passwordField.setValue(""String_Node_Str"");
  }
  uifactory.addFormSubmitButton(""String_Node_Str"",""String_Node_Str"",formLayout);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  passwordSwitch=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  passwordSwitch.addActionListener(FormEvent.ONCHANGE);
  passwordField=uifactory.addTextElement(""String_Node_Str"",null,30,""String_Node_Str"",formLayout);
  passwordField.setExampleKey(""String_Node_Str"",null);
  passwordField.showError(false);
  if (condition != null && StringHelper.containsNonWhitespace(condition.getPassword())) {
    passwordSwitch.select(""String_Node_Str"",true);
    passwordField.setVisible(true);
    passwordField.setValue(condition.getPassword());
  }
 else {
    passwordField.setVisible(false);
    passwordSwitch.select(""String_Node_Str"",false);
    passwordField.setValue(""String_Node_Str"");
  }
  uifactory.addFormSubmitButton(""String_Node_Str"",""String_Node_Str"",formLayout);
}"
69561,"public PasswordConditionEditController(UserRequest ureq,WindowControl wControl,PasswordCondition condition){
  super(ureq,wControl,""String_Node_Str"");
  this.condition=condition;
  hasAlreadyPassword=StringHelper.containsNonWhitespace(condition.getPassword());
  initForm(ureq);
}","public PasswordConditionEditController(UserRequest ureq,WindowControl wControl,PasswordCondition condition){
  super(ureq,wControl);
  this.condition=condition;
  hasAlreadyPassword=StringHelper.containsNonWhitespace(condition.getPassword());
  initForm(ureq);
}"
69562,"/** 
 * @see org.olat.course.nodes.CourseNode#createEditController(org.olat.core.gui.UserRequest,org.olat.core.gui.control.WindowControl,org.olat.course.ICourse)
 */
@Override public TabbableController createEditController(UserRequest ureq,WindowControl wControl,BreadcrumbPanel stackPanel,ICourse course,UserCourseEnvironment euce){
  updateModuleConfigDefaults(false);
  STCourseNodeEditController childTabCntrllr=new STCourseNodeEditController(ureq,wControl,this,course.getCourseFolderContainer(),course.getCourseEnvironment().getCourseGroupManager(),course.getEditorTreeModel(),euce);
  CourseNode chosenNode=course.getEditorTreeModel().getCourseNode(euce.getCourseEditorEnv().getCurrentCourseNodeId());
  return new NodeEditController(ureq,wControl,course.getEditorTreeModel(),course,chosenNode,euce,childTabCntrllr);
}","/** 
 * @see org.olat.course.nodes.CourseNode#createEditController(org.olat.core.gui.UserRequest,org.olat.core.gui.control.WindowControl,org.olat.course.ICourse)
 */
@Override public TabbableController createEditController(UserRequest ureq,WindowControl wControl,BreadcrumbPanel stackPanel,ICourse course,UserCourseEnvironment euce){
  updateModuleConfigDefaults(false);
  STCourseNodeEditController childTabCntrllr=new STCourseNodeEditController(ureq,wControl,this,course.getCourseFolderContainer(),course.getEditorTreeModel(),euce);
  CourseNode chosenNode=course.getEditorTreeModel().getCourseNode(euce.getCourseEditorEnv().getCurrentCourseNodeId());
  return new NodeEditController(ureq,wControl,course.getEditorTreeModel(),course,chosenNode,euce,childTabCntrllr);
}"
69563,"/** 
 * @param ureq
 * @param wControl
 * @param stNode
 * @param courseFolderPath
 * @param groupMgr
 * @param editorModel
 */
public STCourseNodeEditController(UserRequest ureq,WindowControl wControl,STCourseNode stNode,VFSContainer courseFolderContainer,CourseGroupManager groupMgr,CourseEditorTreeModel editorModel,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.stNode=stNode;
  this.courseFolderContainer=courseFolderContainer;
  this.euce=euce;
  this.editorModel=editorModel;
  Translator fallback=Util.createPackageTranslator(Condition.class,getLocale());
  Translator newTranslator=Util.createPackageTranslator(STCourseNodeEditController.class,getLocale(),fallback);
  setTranslator(newTranslator);
  score=createVelocityContainer(""String_Node_Str"");
  activateEasyModeButton=LinkFactory.createButtonSmall(""String_Node_Str"",score,this);
  activateExpertModeButton=LinkFactory.createButtonSmall(""String_Node_Str"",score,this);
  configvc=createVelocityContainer(""String_Node_Str"");
  chosenFile=(String)stNode.getModuleConfiguration().get(CONFIG_KEY_FILE);
  editorEnabled=(CONFIG_VALUE_DISPLAY_FILE.equals(stNode.getModuleConfiguration().getStringValue(CONFIG_KEY_DISPLAY_TYPE)));
  allowRelativeLinks=stNode.getModuleConfiguration().getBooleanSafe(CONFIG_KEY_ALLOW_RELATIVE_LINKS);
  deliveryOptions=(DeliveryOptions)stNode.getModuleConfiguration().get(CONFIG_KEY_DELIVERYOPTIONS);
  nodeDisplayConfigFormController=new STCourseNodeDisplayConfigFormController(ureq,wControl,stNode.getModuleConfiguration(),editorModel.getCourseEditorNodeById(stNode.getIdent()));
  listenTo(nodeDisplayConfigFormController);
  configvc.put(""String_Node_Str"",nodeDisplayConfigFormController.getInitialComponent());
  if (editorEnabled) {
    configvc.contextPut(""String_Node_Str"",Boolean.valueOf(editorEnabled));
    addStartEditorToView(ureq);
  }
  deliveryOptionsCtrl=new DeliveryOptionsConfigurationController(ureq,getWindowControl(),deliveryOptions);
  listenTo(deliveryOptionsCtrl);
  assessableChildren=AssessmentHelper.getAssessableNodes(editorModel,stNode);
  Condition accessCondition=stNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),accessCondition,assessableChildren,euce,true);
  listenTo(accessibilityCondContr);
  ScoreCalculator scoreCalc=stNode.getScoreCalculator();
  if (scoreCalc != null) {
    if (scoreCalc.isExpertMode() && scoreCalc.getPassedExpression() == null && scoreCalc.getScoreExpression() == null) {
      scoreCalc=null;
    }
 else     if (!scoreCalc.isExpertMode() && scoreCalc.getPassedExpressionFromEasyModeConfiguration() == null && scoreCalc.getScoreExpressionFromEasyModeConfiguration() == null) {
      scoreCalc=null;
    }
  }
  if (assessableChildren.size() == 0 && scoreCalc == null) {
    score.contextPut(""String_Node_Str"",Boolean.TRUE);
  }
 else {
    score.contextPut(""String_Node_Str"",Boolean.FALSE);
  }
  if (scoreCalc != null && scoreCalc.isExpertMode()) {
    initScoreExpertForm(ureq);
  }
 else {
    initScoreEasyForm(ureq);
  }
}","/** 
 * @param ureq
 * @param wControl
 * @param stNode
 * @param courseFolderPath
 * @param groupMgr
 * @param editorModel
 */
public STCourseNodeEditController(UserRequest ureq,WindowControl wControl,STCourseNode stNode,VFSContainer courseFolderContainer,CourseEditorTreeModel editorModel,UserCourseEnvironment euce){
  super(ureq,wControl);
  this.stNode=stNode;
  this.courseFolderContainer=courseFolderContainer;
  this.euce=euce;
  this.editorModel=editorModel;
  Translator fallback=Util.createPackageTranslator(Condition.class,getLocale());
  Translator newTranslator=Util.createPackageTranslator(STCourseNodeEditController.class,getLocale(),fallback);
  setTranslator(newTranslator);
  score=createVelocityContainer(""String_Node_Str"");
  activateEasyModeButton=LinkFactory.createButtonSmall(""String_Node_Str"",score,this);
  activateExpertModeButton=LinkFactory.createButtonSmall(""String_Node_Str"",score,this);
  configvc=createVelocityContainer(""String_Node_Str"");
  chosenFile=(String)stNode.getModuleConfiguration().get(CONFIG_KEY_FILE);
  editorEnabled=(CONFIG_VALUE_DISPLAY_FILE.equals(stNode.getModuleConfiguration().getStringValue(CONFIG_KEY_DISPLAY_TYPE)));
  allowRelativeLinks=stNode.getModuleConfiguration().getBooleanSafe(CONFIG_KEY_ALLOW_RELATIVE_LINKS);
  deliveryOptions=(DeliveryOptions)stNode.getModuleConfiguration().get(CONFIG_KEY_DELIVERYOPTIONS);
  nodeDisplayConfigFormController=new STCourseNodeDisplayConfigFormController(ureq,wControl,stNode.getModuleConfiguration(),editorModel.getCourseEditorNodeById(stNode.getIdent()));
  listenTo(nodeDisplayConfigFormController);
  configvc.put(""String_Node_Str"",nodeDisplayConfigFormController.getInitialComponent());
  if (editorEnabled) {
    configvc.contextPut(""String_Node_Str"",Boolean.valueOf(editorEnabled));
    addStartEditorToView(ureq);
  }
  deliveryOptionsCtrl=new DeliveryOptionsConfigurationController(ureq,getWindowControl(),deliveryOptions);
  listenTo(deliveryOptionsCtrl);
  assessableChildren=AssessmentHelper.getAssessableNodes(editorModel,stNode);
  Condition accessCondition=stNode.getPreConditionAccess();
  accessibilityCondContr=new ConditionEditController(ureq,getWindowControl(),accessCondition,assessableChildren,euce,true);
  listenTo(accessibilityCondContr);
  ScoreCalculator scoreCalc=stNode.getScoreCalculator();
  if (scoreCalc != null) {
    if (scoreCalc.isExpertMode() && scoreCalc.getPassedExpression() == null && scoreCalc.getScoreExpression() == null) {
      scoreCalc=null;
    }
 else     if (!scoreCalc.isExpertMode() && scoreCalc.getPassedExpressionFromEasyModeConfiguration() == null && scoreCalc.getScoreExpressionFromEasyModeConfiguration() == null) {
      scoreCalc=null;
    }
  }
  if (assessableChildren.size() == 0 && scoreCalc == null) {
    score.contextPut(""String_Node_Str"",Boolean.TRUE);
  }
 else {
    score.contextPut(""String_Node_Str"",Boolean.FALSE);
  }
  if (scoreCalc != null && scoreCalc.isExpertMode()) {
    initScoreExpertForm(ureq);
  }
 else {
    initScoreEasyForm(ureq);
  }
}"
69564,"@Override public BusinessGroup updateDisplayMembers(BusinessGroup group,boolean ownersIntern,boolean participantsIntern,boolean waitingListIntern,boolean ownersPublic,boolean participantsPublic,boolean waitingListPublic,boolean download){
  BusinessGroup reloadedBusinessGroup=businessGroupDAO.loadForUpdate(group.getKey());
  BusinessGroup mergedGroup=null;
  if (reloadedBusinessGroup != null) {
    reloadedBusinessGroup.setOwnersVisibleIntern(ownersIntern);
    reloadedBusinessGroup.setOwnersVisiblePublic(ownersPublic);
    reloadedBusinessGroup.setParticipantsVisibleIntern(participantsIntern);
    reloadedBusinessGroup.setParticipantsVisiblePublic(participantsPublic);
    reloadedBusinessGroup.setWaitingListVisibleIntern(waitingListIntern);
    reloadedBusinessGroup.setWaitingListVisiblePublic(waitingListPublic);
    reloadedBusinessGroup.setDownloadMembersLists(download);
    mergedGroup=businessGroupDAO.merge(reloadedBusinessGroup);
  }
  dbInstance.commit();
  return mergedGroup;
}","@Override public BusinessGroup updateDisplayMembers(BusinessGroup group,boolean ownersIntern,boolean participantsIntern,boolean waitingListIntern,boolean ownersPublic,boolean participantsPublic,boolean waitingListPublic,boolean download){
  BusinessGroup reloadedBusinessGroup=businessGroupDAO.loadForUpdate(group.getKey());
  BusinessGroup mergedGroup=null;
  if (reloadedBusinessGroup != null) {
    reloadedBusinessGroup.setOwnersVisibleIntern(ownersIntern);
    reloadedBusinessGroup.setOwnersVisiblePublic(ownersPublic);
    reloadedBusinessGroup.setParticipantsVisibleIntern(participantsIntern);
    reloadedBusinessGroup.setParticipantsVisiblePublic(participantsPublic);
    reloadedBusinessGroup.setWaitingListVisibleIntern(waitingListIntern);
    reloadedBusinessGroup.setWaitingListVisiblePublic(waitingListPublic);
    reloadedBusinessGroup.setDownloadMembersLists(download);
    mergedGroup=businessGroupDAO.merge(reloadedBusinessGroup);
    mergedGroup.getBaseGroup().getKey();
  }
  dbInstance.commit();
  return mergedGroup;
}"
69565,"@Override public BusinessGroup updateBusinessGroup(Identity ureqIdentity,BusinessGroup group,String name,String description,Integer minParticipants,Integer maxParticipants,Boolean waitingList,Boolean autoCloseRanks){
  BusinessGroup bg=businessGroupDAO.loadForUpdate(group.getKey());
  Integer previousMaxParticipants=bg.getMaxParticipants();
  bg.setName(name);
  bg.setDescription(description);
  bg.setMaxParticipants(maxParticipants);
  bg.setMinParticipants(minParticipants);
  bg.setWaitingListEnabled(waitingList);
  bg.setAutoCloseRanksEnabled(autoCloseRanks);
  bg.setLastUsage(new Date(System.currentTimeMillis()));
  List<BusinessGroupModifiedEvent.Deferred> events=new ArrayList<BusinessGroupModifiedEvent.Deferred>();
  autoRankCheck(ureqIdentity,bg,previousMaxParticipants,events);
  BusinessGroup mergedGroup=businessGroupDAO.merge(bg);
  dbInstance.commit();
  BusinessGroupModifiedEvent.fireDeferredEvents(events);
  return mergedGroup;
}","@Override public BusinessGroup updateBusinessGroup(Identity ureqIdentity,BusinessGroup group,String name,String description,Integer minParticipants,Integer maxParticipants,Boolean waitingList,Boolean autoCloseRanks){
  BusinessGroup bg=businessGroupDAO.loadForUpdate(group.getKey());
  Integer previousMaxParticipants=bg.getMaxParticipants();
  bg.setName(name);
  bg.setDescription(description);
  bg.setMaxParticipants(maxParticipants);
  bg.setMinParticipants(minParticipants);
  bg.setWaitingListEnabled(waitingList);
  bg.setAutoCloseRanksEnabled(autoCloseRanks);
  bg.setLastUsage(new Date(System.currentTimeMillis()));
  List<BusinessGroupModifiedEvent.Deferred> events=new ArrayList<BusinessGroupModifiedEvent.Deferred>();
  autoRankCheck(ureqIdentity,bg,previousMaxParticipants,events);
  BusinessGroup mergedGroup=businessGroupDAO.merge(bg);
  mergedGroup.getBaseGroup().getKey();
  dbInstance.commit();
  BusinessGroupModifiedEvent.fireDeferredEvents(events);
  return mergedGroup;
}"
69566,"@Override protected void formInnerEvent(UserRequest ureq,FormItem source,FormEvent event){
  if (source == weeklyCalendar) {
    if (event instanceof KalendarGUIEditEvent) {
      KalendarGUIEditEvent guiEvent=(KalendarGUIEditEvent)event;
      KalendarEvent kalendarEvent=guiEvent.getKalendarEvent();
      if (kalendarEvent == null) {
        getWindowControl().setError(translate(""String_Node_Str""));
        return;
      }
      String recurrence=kalendarEvent.getRecurrenceRule();
      boolean isImported=false;
      KalendarRenderWrapper kalendarRenderWrapper=guiEvent.getKalendarRenderWrapper();
      if (kalendarRenderWrapper != null) {
        isImported=kalendarRenderWrapper.isImported();
      }
      if (!isImported && recurrence != null && !recurrence.equals(""String_Node_Str"")) {
        List<String> btnLabels=new ArrayList<String>();
        btnLabels.add(translate(""String_Node_Str""));
        btnLabels.add(translate(""String_Node_Str""));
        btnLabels.add(translate(""String_Node_Str""));
        if (dbcSequence != null)         dbcSequence.dispose();
        dbcSequence=DialogBoxUIFactory.createGenericDialog(ureq,getWindowControl(),translate(""String_Node_Str""),translate(""String_Node_Str""),btnLabels);
        dbcSequence.addControllerListener(this);
        dbcSequence.setUserObject(guiEvent);
        dbcSequence.activate();
        return;
      }
      KalendarRenderWrapper kalendarWrapper=guiEvent.getKalendarRenderWrapper();
      pushEditEventController(ureq,kalendarEvent,kalendarWrapper);
    }
 else     if (event instanceof KalendarGUIAddEvent) {
      pushAddEventController((KalendarGUIAddEvent)event,ureq);
    }
 else     if (event instanceof KalendarGUISelectEvent) {
      KalendarGUISelectEvent selectEvent=(KalendarGUISelectEvent)event;
      doOpenEventCallout(ureq,selectEvent.getKalendarEvent(),selectEvent.getKalendarRenderWrapper(),selectEvent.getTargetDomId());
    }
 else     if (event instanceof KalendarGUIMoveEvent) {
      KalendarGUIMoveEvent moveEvent=(KalendarGUIMoveEvent)event;
      doMove(moveEvent.getKalendarEvent(),moveEvent.getDayDelta(),moveEvent.getMinuteDelta(),moveEvent.getAllDay());
    }
  }
 else   if (source == subscribeButton || source == unsubscribeButton) {
    removeAsListenerAndDispose(subscriptionController);
    if (calendarSubscription.isSubscribed() == (source == unsubscribeButton)) {
      subscriptionController=calendarSubscription.triggerSubscribeAction();
    }
    if (subscriptionController != null) {
      listenTo(subscriptionController);
      flc.put(""String_Node_Str"",subscriptionController.getInitialComponent());
    }
 else {
      flc.contextPut(""String_Node_Str"",new Boolean(calendarSubscription.isSubscribed()));
      CoordinatorManager.getInstance().getCoordinator().getEventBus().fireEventToListenersOf(new KalendarModifiedEvent(),OresHelper.lookupType(CalendarManager.class));
    }
  }
 else   if (event instanceof KalendarGUIPrintEvent) {
    KalendarGUIPrintEvent printEvent=(KalendarGUIPrintEvent)event;
    if (printEvent.getFrom() != null && printEvent.getTo() != null) {
      doPrint(printEvent.getFrom(),printEvent.getTo());
    }
 else     if (printEvent.getTargetDomId() != null) {
      doPrintEventCallout(ureq,printEvent.getTargetDomId());
    }
  }
  super.formInnerEvent(ureq,source,event);
}","@Override protected void formInnerEvent(UserRequest ureq,FormItem source,FormEvent event){
  if (source == weeklyCalendar) {
    if (event instanceof KalendarGUIEditEvent) {
      KalendarGUIEditEvent guiEvent=(KalendarGUIEditEvent)event;
      KalendarEvent kalendarEvent=guiEvent.getKalendarEvent();
      if (kalendarEvent == null) {
        getWindowControl().setError(translate(""String_Node_Str""));
        return;
      }
      String recurrence=kalendarEvent.getRecurrenceRule();
      boolean isImported=false;
      KalendarRenderWrapper kalendarRenderWrapper=guiEvent.getKalendarRenderWrapper();
      if (kalendarRenderWrapper != null) {
        isImported=kalendarRenderWrapper.isImported();
      }
      if (!isImported && recurrence != null && !recurrence.equals(""String_Node_Str"")) {
        List<String> btnLabels=new ArrayList<String>();
        btnLabels.add(translate(""String_Node_Str""));
        btnLabels.add(translate(""String_Node_Str""));
        btnLabels.add(translate(""String_Node_Str""));
        if (dbcSequence != null)         dbcSequence.dispose();
        dbcSequence=DialogBoxUIFactory.createGenericDialog(ureq,getWindowControl(),translate(""String_Node_Str""),translate(""String_Node_Str""),btnLabels);
        dbcSequence.addControllerListener(this);
        dbcSequence.setUserObject(guiEvent);
        dbcSequence.activate();
        return;
      }
      KalendarRenderWrapper kalendarWrapper=guiEvent.getKalendarRenderWrapper();
      pushEditEventController(ureq,kalendarEvent,kalendarWrapper);
    }
 else     if (event instanceof KalendarGUIAddEvent) {
      pushAddEventController((KalendarGUIAddEvent)event,ureq);
    }
 else     if (event instanceof KalendarGUISelectEvent) {
      KalendarGUISelectEvent selectEvent=(KalendarGUISelectEvent)event;
      if (selectEvent.getKalendarEvent() != null) {
        doOpenEventCallout(ureq,selectEvent.getKalendarEvent(),selectEvent.getKalendarRenderWrapper(),selectEvent.getTargetDomId());
      }
    }
 else     if (event instanceof KalendarGUIMoveEvent) {
      KalendarGUIMoveEvent moveEvent=(KalendarGUIMoveEvent)event;
      doMove(moveEvent.getKalendarEvent(),moveEvent.getDayDelta(),moveEvent.getMinuteDelta(),moveEvent.getAllDay());
    }
  }
 else   if (source == subscribeButton || source == unsubscribeButton) {
    removeAsListenerAndDispose(subscriptionController);
    if (calendarSubscription.isSubscribed() == (source == unsubscribeButton)) {
      subscriptionController=calendarSubscription.triggerSubscribeAction();
    }
    if (subscriptionController != null) {
      listenTo(subscriptionController);
      flc.put(""String_Node_Str"",subscriptionController.getInitialComponent());
    }
 else {
      flc.contextPut(""String_Node_Str"",new Boolean(calendarSubscription.isSubscribed()));
      CoordinatorManager.getInstance().getCoordinator().getEventBus().fireEventToListenersOf(new KalendarModifiedEvent(),OresHelper.lookupType(CalendarManager.class));
    }
  }
 else   if (event instanceof KalendarGUIPrintEvent) {
    KalendarGUIPrintEvent printEvent=(KalendarGUIPrintEvent)event;
    if (printEvent.getFrom() != null && printEvent.getTo() != null) {
      doPrint(printEvent.getFrom(),printEvent.getTo());
    }
 else     if (printEvent.getTargetDomId() != null) {
      doPrintEventCallout(ureq,printEvent.getTargetDomId());
    }
  }
  super.formInnerEvent(ureq,source,event);
}"
69567,"/** 
 * @see org.olat.core.gui.components.ComponentRenderer#render(org.olat.core.gui.render.Renderer,org.olat.core.gui.render.StringOutput,org.olat.core.gui.components.Component,org.olat.core.gui.render.URLBuilder,org.olat.core.gui.translator.Translator,org.olat.core.gui.render.RenderResult,java.lang.String[])
 */
@Override public void render(Renderer renderer,StringOutput sb,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  RatingComponent rating=(RatingComponent)source;
  sb.append(""String_Node_Str"");
  if (rating.getCssClass() != null)   sb.append(rating.getCssClass());
  sb.append(""String_Node_Str"");
  String title=rating.getTitle();
  if (title != null) {
    sb.append(""String_Node_Str"");
    if (rating.isTranslateTitle()) {
      title=translator.translate(title);
    }
    sb.append(title);
    sb.append(""String_Node_Str"");
  }
  List<String> labels=rating.getRatingLabel();
  sb.append(""String_Node_Str"");
  if (rating.isAllowUserInput()) {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  boolean ajaxModeEnabled=renderer.getGlobalSettings().getAjaxFlags().isIframePostEnabled();
  for (int i=0; i < labels.size(); i++) {
    sb.append(""String_Node_Str"");
    if (rating.getCurrentRating() >= i + 1) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    if (rating.isAllowUserInput() && rating.isEnabled()) {
      if (rating.getForm() == null) {
        sb.append(""String_Node_Str"");
        ubu.buildURI(sb,new String[]{VelocityContainer.COMMAND_ID},new String[]{(i + 1) + ""String_Node_Str""},ajaxModeEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
        sb.append(""String_Node_Str"");
        if (ajaxModeEnabled) {
          ubu.appendTarget(sb);
        }
        sb.append(""String_Node_Str"");
      }
 else {
        Form theForm=rating.getForm();
        String elementId=FormBaseComponentIdProvider.DISPPREFIX + rating.getDispatchID();
        sb.append(""String_Node_Str"").append(FormJSHelper.getXHRFnCallFor(theForm,elementId,1,new NameValuePair(VelocityContainer.COMMAND_ID,Integer.toString(i + 1)))).append(""String_Node_Str"");
      }
    }
 else {
      sb.append(""String_Node_Str"");
    }
    String label=rating.getRatingLabel(i);
    if (label != null) {
      if (rating.isTranslateRatingLabels()) {
        label=translator.translate(label);
      }
      StringBuilder escapedLabel=new StringBuilder();
      escapedLabel.append(StringEscapeUtils.escapeHtml(label));
      sb.append(""String_Node_Str"").append(escapedLabel).append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  if (rating.isShowRatingAsText()) {
    sb.append(""String_Node_Str"");
    sb.append(Formatter.roundToString(rating.getCurrentRating(),1));
    sb.append(""String_Node_Str"");
    sb.append(labels.size());
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  String expl=rating.getExplanation();
  if (expl != null) {
    sb.append(""String_Node_Str"");
    if (rating.isTranslateExplanation()) {
      expl=translator.translate(expl);
    }
    sb.append(expl);
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
}","/** 
 * @see org.olat.core.gui.components.ComponentRenderer#render(org.olat.core.gui.render.Renderer,org.olat.core.gui.render.StringOutput,org.olat.core.gui.components.Component,org.olat.core.gui.render.URLBuilder,org.olat.core.gui.translator.Translator,org.olat.core.gui.render.RenderResult,java.lang.String[])
 */
@Override public void render(Renderer renderer,StringOutput sb,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  RatingComponent rating=(RatingComponent)source;
  sb.append(""String_Node_Str"");
  if (rating.getCssClass() != null)   sb.append(rating.getCssClass());
  sb.append(""String_Node_Str"");
  String title=rating.getTitle();
  if (title != null) {
    sb.append(""String_Node_Str"");
    if (rating.isTranslateTitle()) {
      title=translator.translate(title);
    }
    sb.append(title);
    sb.append(""String_Node_Str"");
  }
  List<String> labels=rating.getRatingLabel();
  sb.append(""String_Node_Str"");
  if (rating.isAllowUserInput()) {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  boolean ajaxModeEnabled=renderer.getGlobalSettings().getAjaxFlags().isIframePostEnabled();
  for (int i=0; i < labels.size(); i++) {
    sb.append(""String_Node_Str"");
    if (rating.getCurrentRating() >= i + 1) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    if (rating.isAllowUserInput() && rating.isEnabled()) {
      if (rating.getForm() == null) {
        sb.append(""String_Node_Str"");
        ubu.buildURI(sb,new String[]{VelocityContainer.COMMAND_ID},new String[]{(i + 1) + ""String_Node_Str""},ajaxModeEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
        sb.append(""String_Node_Str"");
        if (ajaxModeEnabled) {
          ubu.appendTarget(sb);
        }
        sb.append(""String_Node_Str"");
      }
 else {
        Form theForm=rating.getForm();
        String elementId=FormBaseComponentIdProvider.DISPPREFIX + rating.getDispatchID();
        sb.append(""String_Node_Str"").append(FormJSHelper.getXHRFnCallFor(theForm,elementId,1,new NameValuePair(VelocityContainer.COMMAND_ID,Integer.toString(i + 1)))).append(""String_Node_Str"");
      }
    }
 else {
      sb.append(""String_Node_Str"");
    }
    String label=rating.getRatingLabel(i);
    if (label != null) {
      if (rating.isTranslateRatingLabels()) {
        if (translator != null) {
          label=translator.translate(label);
        }
 else {
          label=""String_Node_Str"";
        }
      }
      StringBuilder escapedLabel=new StringBuilder();
      escapedLabel.append(StringEscapeUtils.escapeHtml(label));
      sb.append(""String_Node_Str"").append(escapedLabel).append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  if (rating.isShowRatingAsText()) {
    sb.append(""String_Node_Str"");
    sb.append(Formatter.roundToString(rating.getCurrentRating(),1));
    sb.append(""String_Node_Str"");
    sb.append(labels.size());
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  String expl=rating.getExplanation();
  if (expl != null) {
    sb.append(""String_Node_Str"");
    if (rating.isTranslateExplanation()) {
      expl=translator.translate(expl);
    }
    sb.append(expl);
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
}"
69568,"/** 
 * used by the renderer, and also by the panel and tabbedpane renderer to delegate rendering
 * @param sb
 * @param source
 * @param args
 */
public void render(StringOutput sb,Component source,String[] args){
  GlobalSettings gset=getGlobalSettings();
  boolean ajaxon=gset.getAjaxFlags().isIframePostEnabled();
  boolean domReplaceable=source.isDomReplaceable();
  boolean useSpan=source.getSpanAsDomReplaceable();
  boolean domReplacementWrapperRequired=source.isDomReplacementWrapperRequired();
  boolean forceDebugDivs=gset.isIdDivsForced();
  if (source.isVisible()) {
    int lev=renderResult.getNestedLevel();
    if (lev > 60)     throw new AssertException(""String_Node_Str"" + source.getComponentName());
    Translator componentTranslator=source.getTranslator();
    if (domReplaceable && domReplacementWrapperRequired && (ajaxon || forceDebugDivs)) {
      if (useSpan) {
        sb.append(""String_Node_Str"").append(source.getDispatchID());
      }
 else {
        sb.append(""String_Node_Str"").append(source.getDispatchID());
      }
      if (Settings.isDebuging()) {
      }
      sb.append(""String_Node_Str"");
    }
    ComponentRenderer cr=findComponentRenderer(source);
    URLBuilder cubu=urlBuilder.createCopyFor(source);
    renderResult.incNestedLevel();
    InterceptHandlerInstance dhi=renderResult.getInterceptHandlerInstance();
    if (dhi != null) {
      cr=dhi.createInterceptComponentRenderer(cr);
    }
    try {
      int preRenderLength=sb.length();
      if (cr == null) {
        System.out.println(cr);
      }
      cr.render(this,sb,source,cubu,componentTranslator,renderResult,args);
      if (preRenderLength == sb.length()) {
        sb.append(""String_Node_Str"");
      }
      source.setDirty(false);
    }
 catch (    Exception e) {
      renderResult.setRenderExceptionInfo(""String_Node_Str"" + source.getComponentName() + ""String_Node_Str""+ source.getClass().getName()+ ""String_Node_Str""+ source.getListenerInfo()+ ""String_Node_Str""+ e.getMessage(),e);
    }
    renderResult.decNestedLevel();
    if (ajaxon && domReplaceable && domReplacementWrapperRequired) {
      if (useSpan) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
  }
 else {
    if (domReplaceable && (ajaxon || forceDebugDivs)) {
      if (useSpan) {
        sb.append(""String_Node_Str"").append(source.getDispatchID()).append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"").append(source.getDispatchID()).append(""String_Node_Str"");
      }
    }
  }
}","/** 
 * used by the renderer, and also by the panel and tabbedpane renderer to delegate rendering
 * @param sb
 * @param source
 * @param args
 */
public void render(StringOutput sb,Component source,String[] args){
  GlobalSettings gset=getGlobalSettings();
  boolean ajaxon=gset.getAjaxFlags().isIframePostEnabled();
  boolean domReplaceable=source.isDomReplaceable();
  boolean useSpan=source.getSpanAsDomReplaceable();
  boolean domReplacementWrapperRequired=source.isDomReplacementWrapperRequired();
  boolean forceDebugDivs=gset.isIdDivsForced();
  if (source.isVisible()) {
    int lev=renderResult.getNestedLevel();
    if (lev > 60)     throw new AssertException(""String_Node_Str"" + source.getComponentName());
    Translator componentTranslator=source.getTranslator();
    if (domReplaceable && domReplacementWrapperRequired && (ajaxon || forceDebugDivs)) {
      if (useSpan) {
        sb.append(""String_Node_Str"").append(source.getDispatchID());
      }
 else {
        sb.append(""String_Node_Str"").append(source.getDispatchID());
      }
      if (Settings.isDebuging()) {
      }
      sb.append(""String_Node_Str"");
    }
    ComponentRenderer cr=findComponentRenderer(source);
    URLBuilder cubu=urlBuilder.createCopyFor(source);
    renderResult.incNestedLevel();
    InterceptHandlerInstance dhi=renderResult.getInterceptHandlerInstance();
    if (dhi != null) {
      cr=dhi.createInterceptComponentRenderer(cr);
    }
    try {
      int preRenderLength=sb.length();
      cr.render(this,sb,source,cubu,componentTranslator,renderResult,args);
      if (preRenderLength == sb.length()) {
        sb.append(""String_Node_Str"");
      }
      source.setDirty(false);
    }
 catch (    Exception e) {
      renderResult.setRenderExceptionInfo(""String_Node_Str"" + source.getComponentName() + ""String_Node_Str""+ source.getClass().getName()+ ""String_Node_Str""+ source.getListenerInfo()+ ""String_Node_Str""+ e.getMessage(),e);
    }
    renderResult.decNestedLevel();
    if (ajaxon && domReplaceable && domReplacementWrapperRequired) {
      if (useSpan) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
  }
 else {
    if (domReplaceable && (ajaxon || forceDebugDivs)) {
      if (useSpan) {
        sb.append(""String_Node_Str"").append(source.getDispatchID()).append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"").append(source.getDispatchID()).append(""String_Node_Str"");
      }
    }
  }
}"
69569,"@Test public void queryByEditor(){
  Identity id=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  RepositoryEntry re=JunitTestHelper.createAndPersistRepositoryEntry();
  dbInstance.commitAndCloseSession();
  repositoryEntryRelationDao.addRole(id,re,GroupRoles.owner.name());
  dbInstance.commitAndCloseSession();
  List<RepositoryEntry> entries=repositoryManager.queryByEditor(id);
  Assert.assertNotNull(entries);
  Assert.assertEquals(1,entries.size());
  Assert.assertTrue(entries.contains(re));
}","@Test public void queryByEditor(){
  Identity owner=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  Identity participant=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  RepositoryEntry re=JunitTestHelper.createAndPersistRepositoryEntry();
  dbInstance.commitAndCloseSession();
  repositoryEntryRelationDao.addRole(owner,re,GroupRoles.owner.name());
  repositoryEntryRelationDao.addRole(participant,re,GroupRoles.participant.name());
  dbInstance.commitAndCloseSession();
  List<RepositoryEntry> entries=repositoryManager.queryByEditor(owner);
  Assert.assertNotNull(entries);
  Assert.assertEquals(1,entries.size());
  Assert.assertTrue(entries.contains(re));
  List<RepositoryEntry> partEntries=repositoryManager.queryByEditor(participant);
  Assert.assertNotNull(partEntries);
  Assert.assertEquals(0,partEntries.size());
}"
69570,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  String currentGroup=null;
  User user=identityToModify.getUser();
  FormLayoutContainer groupContainer=null;
  for (  UserPropertyHandler userPropertyHandler : userPropertyHandlers) {
    if (userPropertyHandler == null) {
      continue;
    }
    String group=userPropertyHandler.getGroup();
    if (!group.equals(currentGroup)) {
      groupContainer=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"" + group,getTranslator());
      groupContainer.setFormTitle(translate(""String_Node_Str"" + group));
      formItems.put(""String_Node_Str"" + group,groupContainer);
      formLayout.add(groupContainer);
      if (currentGroup == null) {
        groupContainer.setFormContextHelp(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
      currentGroup=group;
    }
    FormItem formItem=userPropertyHandler.addFormItem(getLocale(),user,usageIdentifier,isAdministrativeUser,groupContainer);
    String propertyName=userPropertyHandler.getName();
    formItems.put(propertyName,formItem);
    if (formItem instanceof TextElement) {
      TextElement textElement=(TextElement)formItem;
      textElement.setValue(user.getProperty(propertyName,getLocale()));
    }
 else     if (formItem instanceof MultipleSelectionElement) {
      MultipleSelectionElement checkbox=(MultipleSelectionElement)formItem;
      String value=user.getProperty(propertyName,getLocale());
      if (value != null) {
        checkbox.select(propertyName,value.equals(""String_Node_Str""));
      }
 else {
        checkbox.select(propertyName,false);
      }
    }
    if (userPropertyHandler.getName().equals(""String_Node_Str"")) {
      RegistrationManager rm=RegistrationManager.getInstance();
      String key=user.getProperty(""String_Node_Str"",null);
      TemporaryKeyImpl tempKey=rm.loadTemporaryKeyByRegistrationKey(key);
      if (tempKey != null) {
        XStream xml=XStreamHelper.createXStreamInstance();
        @SuppressWarnings(""String_Node_Str"") HashMap<String,String> mails=(HashMap<String,String>)xml.fromXML(tempKey.getEmailAddress());
        formItem.setExampleKey(""String_Node_Str"",new String[]{mails.get(""String_Node_Str"")});
      }
    }
  }
  groupContainer=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  groupContainer.setFormTitle(translate(""String_Node_Str""));
  formLayout.add(groupContainer);
  HomePageConfig conf=hpcm.loadConfigFor(identityToModify.getName());
  textAboutMe=uifactory.addRichTextElementForStringData(""String_Node_Str"",""String_Node_Str"",conf.getTextAboutMe(),10,-1,false,null,null,groupContainer,ureq.getUserSession(),getWindowControl());
  textAboutMe.setMaxLength(10000);
  groupContainer=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  groupContainer.setFormTitle(translate(""String_Node_Str""));
  groupContainer.setFormContextHelp(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  formLayout.add(groupContainer);
  deletePortrait=uifactory.addFormLink(""String_Node_Str"",groupContainer,Link.BUTTON);
  File portraitFile=dps.getBigPortrait(identityToModify.getName());
  Set<String> mimeTypes=new HashSet<String>();
  mimeTypes.add(""String_Node_Str"");
  mimeTypes.add(""String_Node_Str"");
  mimeTypes.add(""String_Node_Str"");
  mimeTypes.add(""String_Node_Str"");
  portraitUpload=uifactory.addFileElement(""String_Node_Str"",""String_Node_Str"",groupContainer);
  portraitUpload.setMaxUploadSizeKB(10000,null,null);
  portraitUpload.setPreview(ureq.getUserSession(),true);
  portraitUpload.addActionListener(FormEvent.ONCHANGE);
  if (portraitFile != null) {
    portraitUpload.setInitialFile(portraitFile);
  }
  portraitUpload.limitToMimeType(mimeTypes,null,null);
  FormLayoutContainer buttonLayoutWrappper=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(buttonLayoutWrappper);
  FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  buttonLayoutWrappper.add(buttonLayout);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout);
  uifactory.addFormCancelButton(""String_Node_Str"",buttonLayout,ureq,getWindowControl());
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  User user=identityToModify.getUser();
  boolean first=true;
  for (  UserPropertyHandler userPropertyHandler : userPropertyHandlers) {
    if (userPropertyHandler == null) {
      continue;
    }
    String group=userPropertyHandler.getGroup();
    String formId=""String_Node_Str"" + group;
    FormLayoutContainer groupContainer=(FormLayoutContainer)formLayout.getFormComponent(formId);
    if (groupContainer == null) {
      groupContainer=FormLayoutContainer.createDefaultFormLayout(formId,getTranslator());
      groupContainer.setFormTitle(translate(""String_Node_Str"" + group));
      if (first) {
        groupContainer.setFormContextHelp(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        first=false;
      }
      formItems.put(formId,groupContainer);
      formLayout.add(groupContainer);
    }
    FormItem formItem=userPropertyHandler.addFormItem(getLocale(),user,usageIdentifier,isAdministrativeUser,groupContainer);
    String propertyName=userPropertyHandler.getName();
    formItems.put(propertyName,formItem);
    if (formItem instanceof TextElement) {
      TextElement textElement=(TextElement)formItem;
      textElement.setValue(user.getProperty(propertyName,getLocale()));
    }
 else     if (formItem instanceof MultipleSelectionElement) {
      MultipleSelectionElement checkbox=(MultipleSelectionElement)formItem;
      String value=user.getProperty(propertyName,getLocale());
      if (value != null) {
        checkbox.select(propertyName,value.equals(""String_Node_Str""));
      }
 else {
        checkbox.select(propertyName,false);
      }
    }
    if (userPropertyHandler.getName().equals(""String_Node_Str"")) {
      String key=user.getProperty(""String_Node_Str"",null);
      TemporaryKeyImpl tempKey=rm.loadTemporaryKeyByRegistrationKey(key);
      if (tempKey != null) {
        XStream xml=XStreamHelper.createXStreamInstance();
        @SuppressWarnings(""String_Node_Str"") HashMap<String,String> mails=(HashMap<String,String>)xml.fromXML(tempKey.getEmailAddress());
        formItem.setExampleKey(""String_Node_Str"",new String[]{mails.get(""String_Node_Str"")});
      }
    }
  }
  FormLayoutContainer groupContainer=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  groupContainer.setFormTitle(translate(""String_Node_Str""));
  formLayout.add(groupContainer);
  HomePageConfig conf=hpcm.loadConfigFor(identityToModify.getName());
  textAboutMe=uifactory.addRichTextElementForStringData(""String_Node_Str"",""String_Node_Str"",conf.getTextAboutMe(),10,-1,false,null,null,groupContainer,ureq.getUserSession(),getWindowControl());
  textAboutMe.setMaxLength(10000);
  groupContainer=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  groupContainer.setFormTitle(translate(""String_Node_Str""));
  groupContainer.setFormContextHelp(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  formLayout.add(groupContainer);
  deletePortrait=uifactory.addFormLink(""String_Node_Str"",groupContainer,Link.BUTTON);
  File portraitFile=dps.getBigPortrait(identityToModify.getName());
  Set<String> mimeTypes=new HashSet<String>();
  mimeTypes.add(""String_Node_Str"");
  mimeTypes.add(""String_Node_Str"");
  mimeTypes.add(""String_Node_Str"");
  mimeTypes.add(""String_Node_Str"");
  portraitUpload=uifactory.addFileElement(""String_Node_Str"",""String_Node_Str"",groupContainer);
  portraitUpload.setMaxUploadSizeKB(10000,null,null);
  portraitUpload.setPreview(ureq.getUserSession(),true);
  portraitUpload.addActionListener(FormEvent.ONCHANGE);
  if (portraitFile != null) {
    portraitUpload.setInitialFile(portraitFile);
  }
  portraitUpload.limitToMimeType(mimeTypes,null,null);
  FormLayoutContainer buttonLayoutWrappper=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(buttonLayoutWrappper);
  FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  buttonLayoutWrappper.add(buttonLayout);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout);
  uifactory.addFormCancelButton(""String_Node_Str"",buttonLayout,ureq,getWindowControl());
}"
69571,"public void setTaxonomyLevel(TaxonomyLevel taxonomyLevel){
  this.taxonomyLevel=taxonomyLevel;
  flc.setVisible(taxonomyLevel != null);
  if (taxonomyLevel != null) {
    String parentLine=null;
    if (this.taxonomyLevel != null) {
      parentLine=taxonomyLevel.getMaterializedPathNames();
    }
 else {
      parentLine=""String_Node_Str"";
    }
    pathEl.setValue(parentLine);
    fieldEl.setValue(taxonomyLevel.getField());
  }
}","public void setTaxonomyLevel(TaxonomyLevel taxonomyLevel){
  this.taxonomyLevel=taxonomyLevel;
  flc.setVisible(taxonomyLevel != null);
  if (taxonomyLevel != null) {
    String parentLine=null;
    if (this.taxonomyLevel != null) {
      parentLine=taxonomyLevel.getMaterializedPathNames();
    }
 else {
      parentLine=""String_Node_Str"";
    }
    pathEl.setValue(parentLine);
    fieldEl.setValue(taxonomyLevel.getField());
  }
  initialPanel.setDirty(true);
}"
69572,"/** 
 * @param res
 * @return Get resourceable as file.
 */
private File getFileResource(OLATResourceable res,String resourceFolderName){
  FileResource fr=getAsGenericFileResource(res);
  File f=getFile(fr,resourceFolderName);
  if (f == null)   throw new OLATRuntimeException(FileResourceManager.class,""String_Node_Str"" + res.getResourceableId() + ""String_Node_Str""+ res.getResourceableTypeName(),null);
  return f;
}","/** 
 * @param res
 * @return Get resourceable as file.
 */
private File getFileResource(OLATResourceable res,String resourceFolderName){
  FileResource fr=getAsGenericFileResource(res);
  File f=getFile(fr,resourceFolderName);
  if (f == null) {
    throw new OLATRuntimeException(FileResourceManager.class,""String_Node_Str"" + res.getResourceableId() + ""String_Node_Str""+ res.getResourceableTypeName(),null);
  }
  return f;
}"
69573,"public File execute(){
  File zipTargetDir=null;
  zipTargetDir=new File(dir,ZIPDIR);
  if (!zipTargetDir.exists()) {
    zipTargetDir.mkdir();
    File zipFile=getFileResource(res);
    if (!ZipUtil.unzip(zipFile,zipTargetDir))     return null;
  }
  return zipTargetDir;
}","public File execute(){
  File targetDir=null;
  targetDir=new File(dir,ZIPDIR);
  if (!targetDir.exists()) {
    targetDir.mkdir();
    File zipFile=getFileResource(res);
    if (!ZipUtil.unzip(zipFile,targetDir)) {
      return null;
    }
  }
  return targetDir;
}"
69574,"private final File unzipFileResource(final OLATResourceable res,final File dir){
  if (!dir.exists()) {
    return null;
  }
  File zipTargetDir=new File(dir,ZIPDIR);
  if (!zipTargetDir.exists()) {
    zipTargetDir=CoordinatorManager.getInstance().getCoordinator().getSyncer().doInSync(res,new SyncerCallback<File>(){
      public File execute(){
        File zipTargetDir=null;
        zipTargetDir=new File(dir,ZIPDIR);
        if (!zipTargetDir.exists()) {
          zipTargetDir.mkdir();
          File zipFile=getFileResource(res);
          if (!ZipUtil.unzip(zipFile,zipTargetDir))           return null;
        }
        return zipTargetDir;
      }
    }
);
  }
  return zipTargetDir;
}","private final File unzipFileResource(final OLATResourceable res,final File dir){
  if (!dir.exists()) {
    return null;
  }
  File zipTargetDir=new File(dir,ZIPDIR);
  if (!zipTargetDir.exists()) {
    zipTargetDir=CoordinatorManager.getInstance().getCoordinator().getSyncer().doInSync(res,new SyncerCallback<File>(){
      public File execute(){
        File targetDir=null;
        targetDir=new File(dir,ZIPDIR);
        if (!targetDir.exists()) {
          targetDir.mkdir();
          File zipFile=getFileResource(res);
          if (!ZipUtil.unzip(zipFile,targetDir)) {
            return null;
          }
        }
        return targetDir;
      }
    }
);
  }
  return zipTargetDir;
}"
69575,"protected void doEdit(UserRequest ureq){
  if (!reSecurity.isEntryAdmin())   return;
  Controller ctrl=handler.createEditorController(re,ureq,getWindowControl());
  listenTo(ctrl);
  editorCtrl=pushController(ureq,translate(""String_Node_Str""),ctrl);
  currentToolCtr=editorCtrl;
  setActiveTool(editLink);
}","protected void doEdit(UserRequest ureq){
  if (!reSecurity.isEntryAdmin())   return;
  Controller ctrl=handler.createEditorController(re,ureq,getWindowControl());
  if (ctrl != null) {
    listenTo(ctrl);
    editorCtrl=pushController(ureq,translate(""String_Node_Str""),ctrl);
    currentToolCtr=editorCtrl;
    setActiveTool(editLink);
  }
}"
69576,"/** 
 * @see org.olat.course.nodes.CourseNode#createNodeRunConstructionResult(org.olat.core.gui.UserRequest,org.olat.core.gui.control.WindowControl,org.olat.course.run.userview.UserCourseEnvironment,org.olat.course.run.userview.NodeEvaluation)
 */
public NodeRunConstructionResult createNodeRunConstructionResult(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,NodeEvaluation ne,String nodecmd){
  Controller controller;
  Roles roles=ureq.getUserSession().getRoles();
  if (roles.isGuestOnly()) {
    Translator trans=new PackageTranslator(PACKAGE,ureq.getLocale());
    String title=trans.translate(""String_Node_Str"");
    String message=trans.translate(""String_Node_Str"");
    controller=MessageUIFactory.createInfoMessage(ureq,wControl,title,message);
  }
 else {
    controller=new CORunController(getModuleConfiguration(),ureq,wControl,userCourseEnv,this);
  }
  Controller ctrl=TitledWrapperHelper.getWrapper(ureq,wControl,controller,this,""String_Node_Str"");
  return new NodeRunConstructionResult(ctrl);
}","/** 
 * @see org.olat.course.nodes.CourseNode#createNodeRunConstructionResult(org.olat.core.gui.UserRequest,org.olat.core.gui.control.WindowControl,org.olat.course.run.userview.UserCourseEnvironment,org.olat.course.run.userview.NodeEvaluation)
 */
public NodeRunConstructionResult createNodeRunConstructionResult(UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,NodeEvaluation ne,String nodecmd){
  Controller controller;
  Roles roles=ureq.getUserSession().getRoles();
  if (roles.isGuestOnly()) {
    Translator trans=new PackageTranslator(PACKAGE,ureq.getLocale());
    String title=trans.translate(""String_Node_Str"");
    String message=trans.translate(""String_Node_Str"");
    controller=MessageUIFactory.createInfoMessage(ureq,wControl,title,message);
  }
 else {
    controller=new CORunController(getModuleConfiguration(),ureq,wControl,userCourseEnv);
  }
  Controller ctrl=TitledWrapperHelper.getWrapper(ureq,wControl,controller,this,""String_Node_Str"");
  return new NodeRunConstructionResult(ctrl);
}"
69577,"/** 
 * Constructor for the contact form run controller
 * @param moduleConfiguration
 * @param ureq
 * @param wControl
 * @param coCourseNode
 */
public CORunController(ModuleConfiguration moduleConfiguration,UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,COCourseNode coCourseNode){
  super(ureq,wControl);
  cgm=userCourseEnv.getCourseEnvironment().getCourseGroupManager();
  areaManager=CoreSpringFactory.getImpl(BGAreaManager.class);
  businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
  Translator fallback=Util.createPackageTranslator(ContactFormController.class,ureq.getLocale());
  setTranslator(Util.createPackageTranslator(CORunController.class,ureq.getLocale(),fallback));
  @SuppressWarnings(""String_Node_Str"") List<String> emailListConfig=(List<String>)moduleConfiguration.get(COEditController.CONFIG_KEY_EMAILTOADRESSES);
  String mSubject=(String)moduleConfiguration.get(COEditController.CONFIG_KEY_MSUBJECT_DEFAULT);
  String mBody=(String)moduleConfiguration.get(COEditController.CONFIG_KEY_MBODY_DEFAULT);
  myContent=createVelocityContainer(""String_Node_Str"");
  myContent.contextPut(""String_Node_Str"",coCourseNode.getShortTitle());
  myContent.contextPut(""String_Node_Str"",coCourseNode.getLongTitle());
  String learningObj=coCourseNode.getLearningObjectives();
  Panel panel=new Panel(""String_Node_Str"");
  myContent.put(""String_Node_Str"",panel);
  if (learningObj != null) {
    Component learningObjectives=ObjectivesHelper.createLearningObjectivesComponent(learningObj,ureq);
    panel.setContent(learningObjectives);
  }
  Boolean partipsConfigured=moduleConfiguration.getBooleanEntry(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS);
  Boolean coachesConfigured=moduleConfiguration.getBooleanEntry(COEditController.CONFIG_KEY_EMAILTOCOACHES);
  Stack<ContactList> contactLists=new Stack<ContactList>();
  String grpNames=(String)moduleConfiguration.get(COEditController.CONFIG_KEY_EMAILTOGROUPS);
  @SuppressWarnings(""String_Node_Str"") List<Long> groupKeys=(List<Long>)moduleConfiguration.get(COEditController.CONFIG_KEY_EMAILTOGROUP_IDS);
  if (groupKeys == null && StringHelper.containsNonWhitespace(grpNames)) {
    groupKeys=businessGroupService.toGroupKeys(grpNames,cgm.getCourseEntry());
  }
  if (coachesConfigured != null && coachesConfigured.booleanValue()) {
    ContactList cl=retrieveCoachesFromGroups(groupKeys);
    contactLists.push(cl);
  }
  if (partipsConfigured != null && partipsConfigured.booleanValue()) {
    ContactList cl=retrieveParticipantsFromGroups(groupKeys);
    contactLists.push(cl);
  }
  String areaNames=(String)moduleConfiguration.get(COEditController.CONFIG_KEY_EMAILTOAREAS);
  @SuppressWarnings(""String_Node_Str"") List<Long> areaKeys=(List<Long>)moduleConfiguration.get(COEditController.CONFIG_KEY_EMAILTOAREA_IDS);
  if (areaKeys == null && StringHelper.containsNonWhitespace(areaNames)) {
    areaKeys=areaManager.toAreaKeys(areaNames,cgm.getCourseResource());
  }
  if (coachesConfigured != null && coachesConfigured.booleanValue()) {
    ContactList cl=retrieveCoachesFromAreas(areaKeys);
    contactLists.push(cl);
  }
  if (partipsConfigured != null && partipsConfigured.booleanValue()) {
    ContactList cl=retrieveParticipantsFromAreas(areaKeys);
    contactLists.push(cl);
  }
  if (emailListConfig != null) {
    ContactList emailList=new ContactList(translate(""String_Node_Str""));
    for (Iterator<String> iter=emailListConfig.iterator(); iter.hasNext(); ) {
      String email=iter.next();
      emailList.add(email);
    }
    contactLists.push(emailList);
  }
  if (contactLists.size() > 0) {
    ContactMessage cmsg=new ContactMessage(ureq.getIdentity());
    while (!contactLists.empty()) {
      ContactList cl=contactLists.pop();
      cmsg.addEmailTo(cl);
    }
    cmsg.setBodyText(mBody);
    cmsg.setSubject(mSubject);
    coFoCtr=new ContactFormController(ureq,getWindowControl(),false,false,false,cmsg);
    listenTo(coFoCtr);
    myContent.put(""String_Node_Str"",coFoCtr.getInitialComponent());
    putInitialPanel(myContent);
  }
 else {
    String message=translate(""String_Node_Str"");
    Controller mCtr=MessageUIFactory.createInfoMessage(ureq,getWindowControl(),null,message);
    listenTo(mCtr);
    putInitialPanel(mCtr.getInitialComponent());
  }
}","/** 
 * Constructor for the contact form run controller
 * @param moduleConfiguration
 * @param ureq
 * @param wControl
 * @param coCourseNode
 */
public CORunController(ModuleConfiguration moduleConfiguration,UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv){
  super(ureq,wControl);
  cgm=userCourseEnv.getCourseEnvironment().getCourseGroupManager();
  areaManager=CoreSpringFactory.getImpl(BGAreaManager.class);
  businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
  Translator fallback=Util.createPackageTranslator(ContactFormController.class,ureq.getLocale());
  setTranslator(Util.createPackageTranslator(CORunController.class,ureq.getLocale(),fallback));
  @SuppressWarnings(""String_Node_Str"") List<String> emailListConfig=(List<String>)moduleConfiguration.get(COEditController.CONFIG_KEY_EMAILTOADRESSES);
  String mSubject=(String)moduleConfiguration.get(COEditController.CONFIG_KEY_MSUBJECT_DEFAULT);
  String mBody=(String)moduleConfiguration.get(COEditController.CONFIG_KEY_MBODY_DEFAULT);
  Boolean partipsConfigured=moduleConfiguration.getBooleanEntry(COEditController.CONFIG_KEY_EMAILTOPARTICIPANTS);
  Boolean coachesConfigured=moduleConfiguration.getBooleanEntry(COEditController.CONFIG_KEY_EMAILTOCOACHES);
  Stack<ContactList> contactLists=new Stack<ContactList>();
  String grpNames=(String)moduleConfiguration.get(COEditController.CONFIG_KEY_EMAILTOGROUPS);
  @SuppressWarnings(""String_Node_Str"") List<Long> groupKeys=(List<Long>)moduleConfiguration.get(COEditController.CONFIG_KEY_EMAILTOGROUP_IDS);
  if (groupKeys == null && StringHelper.containsNonWhitespace(grpNames)) {
    groupKeys=businessGroupService.toGroupKeys(grpNames,cgm.getCourseEntry());
  }
  if (coachesConfigured != null && coachesConfigured.booleanValue()) {
    ContactList cl=retrieveCoachesFromGroups(groupKeys);
    contactLists.push(cl);
  }
  if (partipsConfigured != null && partipsConfigured.booleanValue()) {
    ContactList cl=retrieveParticipantsFromGroups(groupKeys);
    contactLists.push(cl);
  }
  String areaNames=(String)moduleConfiguration.get(COEditController.CONFIG_KEY_EMAILTOAREAS);
  @SuppressWarnings(""String_Node_Str"") List<Long> areaKeys=(List<Long>)moduleConfiguration.get(COEditController.CONFIG_KEY_EMAILTOAREA_IDS);
  if (areaKeys == null && StringHelper.containsNonWhitespace(areaNames)) {
    areaKeys=areaManager.toAreaKeys(areaNames,cgm.getCourseResource());
  }
  if (coachesConfigured != null && coachesConfigured.booleanValue()) {
    ContactList cl=retrieveCoachesFromAreas(areaKeys);
    contactLists.push(cl);
  }
  if (partipsConfigured != null && partipsConfigured.booleanValue()) {
    ContactList cl=retrieveParticipantsFromAreas(areaKeys);
    contactLists.push(cl);
  }
  if (emailListConfig != null) {
    ContactList emailList=new ContactList(translate(""String_Node_Str""));
    for (Iterator<String> iter=emailListConfig.iterator(); iter.hasNext(); ) {
      String email=iter.next();
      emailList.add(email);
    }
    contactLists.push(emailList);
  }
  if (contactLists.size() > 0) {
    ContactMessage cmsg=new ContactMessage(ureq.getIdentity());
    while (!contactLists.empty()) {
      ContactList cl=contactLists.pop();
      cmsg.addEmailTo(cl);
    }
    cmsg.setBodyText(mBody);
    cmsg.setSubject(mSubject);
    coFoCtr=new ContactFormController(ureq,getWindowControl(),false,false,false,cmsg);
    listenTo(coFoCtr);
    putInitialPanel(coFoCtr.getInitialComponent());
  }
 else {
    String message=translate(""String_Node_Str"");
    Controller mCtr=MessageUIFactory.createInfoMessage(ureq,getWindowControl(),null,message);
    listenTo(mCtr);
    putInitialPanel(mCtr.getInitialComponent());
  }
}"
69578,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  limitAttempts=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  Integer confAttempts=(Integer)modConfig.get(IQEditController.CONFIG_KEY_ATTEMPTS);
  if (confAttempts == null)   confAttempts=new Integer(0);
  attempts=uifactory.addIntegerElement(""String_Node_Str"",confAttempts,formLayout);
  attempts.setDisplaySize(2);
  attempts.setMinValueCheck(1,null);
  attempts.setMaxValueCheck(20,null);
  blockAfterSuccess=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  Boolean block=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_BLOCK_AFTER_SUCCESS);
  blockAfterSuccess.select(""String_Node_Str"",block == null ? false : block.booleanValue());
  uifactory.addSpacerElement(""String_Node_Str"",formLayout,true);
  if (isAssessment) {
    limitAttempts.select(""String_Node_Str"",confAttempts > 0);
    limitAttempts.addActionListener(FormEvent.ONCLICK);
  }
 else {
    limitAttempts.select(""String_Node_Str"",false);
    limitAttempts.setVisible(false);
    attempts.setVisible(false);
    blockAfterSuccess.select(""String_Node_Str"",false);
    blockAfterSuccess.setVisible(false);
  }
  Boolean fullWindow=(Boolean)modConfig.get(IQEditController.CONFIG_FULLWINDOW);
  fullWindowEl=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  fullWindowEl.select(""String_Node_Str"",fullWindow == null ? true : fullWindow.booleanValue());
  Boolean CdisplayMenu=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_DISPLAYMENU);
  displayMenu=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  displayMenu.select(""String_Node_Str"",CdisplayMenu == null ? true : CdisplayMenu);
  displayMenu.addActionListener(FormEvent.ONCLICK);
  Boolean CenableMenu=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLEMENU);
  enableMenu=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  enableMenu.select(""String_Node_Str"",CenableMenu == null ? true : CenableMenu);
  menuRenderOptions=uifactory.addRadiosVertical(""String_Node_Str"",""String_Node_Str"",formLayout,menuRenderOptKeys,menuRenderOptValues);
  menuRenderOptions.setVisible(displayMenu.isSelected(0));
  Boolean renderSectionsOnly;
  if (modConfig.get(IQEditController.CONFIG_KEY_RENDERMENUOPTION) == null) {
    modConfig.set(IQEditController.CONFIG_KEY_RENDERMENUOPTION,Boolean.FALSE);
    renderSectionsOnly=Boolean.FALSE;
  }
 else {
    renderSectionsOnly=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_RENDERMENUOPTION);
  }
  menuRenderOptions.select(renderSectionsOnly.toString(),true);
  menuRenderOptions.addActionListener(FormEvent.ONCLICK);
  sequence=uifactory.addRadiosVertical(""String_Node_Str"",""String_Node_Str"",formLayout,sequenceKeys,sequenceValues);
  String confSequence=(String)modConfig.get(IQEditController.CONFIG_KEY_SEQUENCE);
  if (confSequence == null)   confSequence=AssessmentInstance.QMD_ENTRY_SEQUENCE_ITEM;
  sequence.select(confSequence,true);
  sequence.addActionListener(FormEvent.ONCLICK);
  if (renderSectionsOnly)   confSequence=AssessmentInstance.QMD_ENTRY_SEQUENCE_SECTION;
  sequence.setEnabled(!renderSectionsOnly);
  Boolean bDisplayQuestionTitle=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_QUESTIONTITLE);
  boolean confDisplayQuestionTitle=(bDisplayQuestionTitle != null) ? bDisplayQuestionTitle.booleanValue() : true;
  displayQuestionTitle=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  displayQuestionTitle.select(""String_Node_Str"",confDisplayQuestionTitle);
  Boolean bAutoEnum=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_AUTOENUM_CHOICES);
  boolean confAutoEnum=(bAutoEnum != null) ? bAutoEnum.booleanValue() : false;
  autoEnumerateChoices=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  autoEnumerateChoices.select(""String_Node_Str"",confAutoEnum);
  Boolean bMemo=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_MEMO);
  boolean confMemo=(bMemo != null) ? bMemo.booleanValue() : false;
  provideMemoField=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  provideMemoField.select(""String_Node_Str"",confMemo);
  Boolean bEnableQuestionProgress=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_QUESTIONPROGRESS);
  boolean confEnableQuestionProgress=(bEnableQuestionProgress != null) ? bEnableQuestionProgress.booleanValue() : true;
  displayQuestionProgress=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  displayQuestionProgress.select(""String_Node_Str"",confEnableQuestionProgress);
  displayQuestionProgress.setVisible(!isSurvey);
  Boolean bEnableScoreProgress=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_SCOREPROGRESS);
  boolean confEnableScoreProgress=(bEnableScoreProgress != null) ? bEnableScoreProgress.booleanValue() : true;
  displayScoreProgress=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  if (isAssessment || isSelfTest) {
    displayScoreProgress.select(""String_Node_Str"",confEnableScoreProgress);
  }
 else {
    displayScoreProgress.select(""String_Node_Str"",false);
    displayScoreProgress.setEnabled(false);
    displayScoreProgress.setVisible(false);
  }
  Boolean bEnableCancel=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLECANCEL);
  boolean confEnableCancel=true;
  if (bEnableCancel != null) {
    confEnableCancel=bEnableCancel.booleanValue();
  }
 else {
    if (configKeyType != null && configKeyType.equals(AssessmentInstance.QMD_ENTRY_TYPE_ASSESS))     confEnableCancel=false;
  }
  enableCancel=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  enableCancel.select(""String_Node_Str"",confEnableCancel);
  if (isSelfTest) {
    enableCancel.select(""String_Node_Str"",true);
    enableCancel.setVisible(false);
    enableCancel.setEnabled(false);
  }
  Boolean bEnableSuspend=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLESUSPEND);
  boolean confEnableSuspend=(bEnableSuspend != null) ? bEnableSuspend.booleanValue() : false;
  enableSuspend=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  enableSuspend.select(""String_Node_Str"",confEnableSuspend);
  uifactory.addSpacerElement(""String_Node_Str"",formLayout,true);
  Boolean bEnableScoreInfos=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLESCOREINFO);
  boolean enableScoreInfos=(bEnableScoreInfos != null) ? bEnableScoreInfos.booleanValue() : true;
  scoreInfo=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  scoreInfo.select(""String_Node_Str"",enableScoreInfos);
  if (isAssessment || isSelfTest) {
    scoreInfo.select(""String_Node_Str"",enableScoreInfos);
    scoreInfo.addActionListener(FormEvent.ONCLICK);
  }
 else {
    scoreInfo.setVisible(false);
  }
  String configuredSummary=(String)modConfig.get(IQEditController.CONFIG_KEY_SUMMARY);
  boolean noSummary=configuredSummary != null && configuredSummary.equals(AssessmentInstance.QMD_ENTRY_SUMMARY_NONE) ? true : false;
  Boolean showResultOnHomePage=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_RESULT_ON_HOME_PAGE);
  boolean confEnableShowResultOnHomePage=(showResultOnHomePage != null) ? showResultOnHomePage.booleanValue() : false;
  confEnableShowResultOnHomePage=!noSummary && confEnableShowResultOnHomePage;
  showResultsOnHomePage=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  showResultsOnHomePage.select(""String_Node_Str"",confEnableShowResultOnHomePage);
  showResultsOnHomePage.addActionListener(FormEvent.ONCLICK);
  showResultsOnHomePage.setVisible(!isSurvey);
  Boolean showResultsActive=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_DATE_DEPENDENT_RESULTS);
  boolean showResultsDateDependent=false;
  if (showResultsActive != null) {
    showResultsDateDependent=showResultsActive.booleanValue();
  }
  showResultsDateDependentButton=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  if (isAssessment || isSelfTest) {
    showResultsDateDependentButton.select(""String_Node_Str"",showResultsDateDependent);
    showResultsDateDependentButton.addActionListener(FormEvent.ONCLICK);
  }
 else {
    showResultsDateDependentButton.setEnabled(false);
  }
  Date startDate=(Date)modConfig.get(IQEditController.CONFIG_KEY_RESULTS_START_DATE);
  startDateElement=uifactory.addDateChooser(""String_Node_Str"",""String_Node_Str"",null,formLayout);
  startDateElement.setDateChooserTimeEnabled(true);
  startDateElement.setDate(startDate);
  startDateElement.setMandatory(true);
  Date endDate=(Date)modConfig.get(IQEditController.CONFIG_KEY_RESULTS_END_DATE);
  endDateElement=uifactory.addDateChooser(""String_Node_Str"",""String_Node_Str"",null,formLayout);
  endDateElement.setDateChooserTimeEnabled(true);
  endDateElement.setDate(endDate);
  Boolean showResultOnFinish=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_RESULT_ON_FINISH);
  boolean confEnableShowResultOnFinish=(showResultOnFinish != null) ? showResultOnFinish.booleanValue() : true;
  confEnableShowResultOnFinish=!noSummary && confEnableShowResultOnFinish;
  showResultsAfterFinishTest=uifactory.addCheckboxesVertical(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null},1);
  showResultsAfterFinishTest.select(""String_Node_Str"",confEnableShowResultOnFinish);
  showResultsAfterFinishTest.addActionListener(FormEvent.ONCLICK);
  showResultsAfterFinishTest.setVisible(!isSurvey);
  String[] summaryKeys=new String[]{AssessmentInstance.QMD_ENTRY_SUMMARY_COMPACT,AssessmentInstance.QMD_ENTRY_SUMMARY_SECTION,AssessmentInstance.QMD_ENTRY_SUMMARY_DETAILED};
  String[] summaryValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
  summary=uifactory.addRadiosVertical(""String_Node_Str"",""String_Node_Str"",formLayout,summaryKeys,summaryValues);
  String confSummary=(String)modConfig.get(IQEditController.CONFIG_KEY_SUMMARY);
  uifactory.addSpacerElement(""String_Node_Str"",formLayout,true);
  if (confSummary == null || noSummary) {
    confSummary=AssessmentInstance.QMD_ENTRY_SUMMARY_COMPACT;
  }
  if (isAssessment || isSelfTest) {
    summary.select(confSummary,true);
  }
 else {
    summary.setEnabled(false);
  }
  uifactory.addSpacerElement(""String_Node_Str"",formLayout,true);
  uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
  update();
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  limitAttempts=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  Integer confAttempts=(Integer)modConfig.get(IQEditController.CONFIG_KEY_ATTEMPTS);
  if (confAttempts == null)   confAttempts=new Integer(0);
  attempts=uifactory.addIntegerElement(""String_Node_Str"",confAttempts,formLayout);
  attempts.setDisplaySize(2);
  attempts.setMinValueCheck(1,null);
  attempts.setMaxValueCheck(20,null);
  blockAfterSuccess=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  Boolean block=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_BLOCK_AFTER_SUCCESS);
  blockAfterSuccess.select(""String_Node_Str"",block == null ? false : block.booleanValue());
  uifactory.addSpacerElement(""String_Node_Str"",formLayout,true);
  if (isAssessment) {
    limitAttempts.select(""String_Node_Str"",confAttempts > 0);
    limitAttempts.addActionListener(FormEvent.ONCLICK);
  }
 else {
    limitAttempts.select(""String_Node_Str"",false);
    limitAttempts.setVisible(false);
    attempts.setVisible(false);
    blockAfterSuccess.select(""String_Node_Str"",false);
    blockAfterSuccess.setVisible(false);
  }
  Boolean fullWindow=(Boolean)modConfig.get(IQEditController.CONFIG_FULLWINDOW);
  fullWindowEl=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  fullWindowEl.select(""String_Node_Str"",fullWindow == null ? true : fullWindow.booleanValue());
  Boolean CdisplayMenu=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_DISPLAYMENU);
  displayMenu=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  displayMenu.select(""String_Node_Str"",CdisplayMenu == null ? true : CdisplayMenu);
  displayMenu.addActionListener(FormEvent.ONCLICK);
  Boolean CenableMenu=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLEMENU);
  enableMenu=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  enableMenu.select(""String_Node_Str"",CenableMenu == null ? true : CenableMenu);
  menuRenderOptions=uifactory.addRadiosVertical(""String_Node_Str"",""String_Node_Str"",formLayout,menuRenderOptKeys,menuRenderOptValues);
  menuRenderOptions.setVisible(displayMenu.isSelected(0));
  Boolean renderSectionsOnly;
  if (modConfig.get(IQEditController.CONFIG_KEY_RENDERMENUOPTION) == null) {
    modConfig.set(IQEditController.CONFIG_KEY_RENDERMENUOPTION,Boolean.FALSE);
    renderSectionsOnly=Boolean.FALSE;
  }
 else {
    renderSectionsOnly=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_RENDERMENUOPTION);
  }
  menuRenderOptions.select(renderSectionsOnly.toString(),true);
  menuRenderOptions.addActionListener(FormEvent.ONCLICK);
  sequence=uifactory.addRadiosVertical(""String_Node_Str"",""String_Node_Str"",formLayout,sequenceKeys,sequenceValues);
  String confSequence=(String)modConfig.get(IQEditController.CONFIG_KEY_SEQUENCE);
  if (confSequence == null)   confSequence=AssessmentInstance.QMD_ENTRY_SEQUENCE_ITEM;
  sequence.select(confSequence,true);
  sequence.addActionListener(FormEvent.ONCLICK);
  if (renderSectionsOnly)   confSequence=AssessmentInstance.QMD_ENTRY_SEQUENCE_SECTION;
  sequence.setEnabled(!renderSectionsOnly);
  Boolean bDisplayQuestionTitle=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_QUESTIONTITLE);
  boolean confDisplayQuestionTitle=(bDisplayQuestionTitle != null) ? bDisplayQuestionTitle.booleanValue() : true;
  displayQuestionTitle=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  displayQuestionTitle.select(""String_Node_Str"",confDisplayQuestionTitle);
  Boolean bAutoEnum=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_AUTOENUM_CHOICES);
  boolean confAutoEnum=(bAutoEnum != null) ? bAutoEnum.booleanValue() : false;
  autoEnumerateChoices=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  autoEnumerateChoices.select(""String_Node_Str"",confAutoEnum);
  Boolean bMemo=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_MEMO);
  boolean confMemo=(bMemo != null) ? bMemo.booleanValue() : false;
  provideMemoField=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  provideMemoField.select(""String_Node_Str"",confMemo);
  Boolean bEnableQuestionProgress=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_QUESTIONPROGRESS);
  boolean confEnableQuestionProgress=(bEnableQuestionProgress != null) ? bEnableQuestionProgress.booleanValue() : true;
  displayQuestionProgress=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  displayQuestionProgress.select(""String_Node_Str"",confEnableQuestionProgress);
  displayQuestionProgress.setVisible(!isSurvey);
  Boolean bEnableScoreProgress=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_SCOREPROGRESS);
  boolean confEnableScoreProgress=(bEnableScoreProgress != null) ? bEnableScoreProgress.booleanValue() : true;
  displayScoreProgress=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  if (isAssessment || isSelfTest) {
    displayScoreProgress.select(""String_Node_Str"",confEnableScoreProgress);
  }
 else {
    displayScoreProgress.select(""String_Node_Str"",false);
    displayScoreProgress.setEnabled(false);
    displayScoreProgress.setVisible(false);
  }
  Boolean bEnableCancel=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLECANCEL);
  boolean confEnableCancel=true;
  if (bEnableCancel != null) {
    confEnableCancel=bEnableCancel.booleanValue();
  }
 else {
    if (configKeyType != null && configKeyType.equals(AssessmentInstance.QMD_ENTRY_TYPE_ASSESS))     confEnableCancel=false;
  }
  enableCancel=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  enableCancel.select(""String_Node_Str"",confEnableCancel);
  if (isSelfTest) {
    enableCancel.select(""String_Node_Str"",true);
    enableCancel.setVisible(false);
    enableCancel.setEnabled(false);
  }
  Boolean bEnableSuspend=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLESUSPEND);
  boolean confEnableSuspend=(bEnableSuspend != null) ? bEnableSuspend.booleanValue() : false;
  enableSuspend=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  enableSuspend.select(""String_Node_Str"",confEnableSuspend);
  uifactory.addSpacerElement(""String_Node_Str"",formLayout,true);
  Boolean bEnableScoreInfos=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLESCOREINFO);
  boolean enableScoreInfos=(bEnableScoreInfos != null) ? bEnableScoreInfos.booleanValue() : true;
  scoreInfo=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  scoreInfo.select(""String_Node_Str"",enableScoreInfos);
  if (isAssessment || isSelfTest) {
    scoreInfo.select(""String_Node_Str"",enableScoreInfos);
    scoreInfo.addActionListener(FormEvent.ONCLICK);
  }
 else {
    scoreInfo.setVisible(false);
  }
  String configuredSummary=(String)modConfig.get(IQEditController.CONFIG_KEY_SUMMARY);
  boolean noSummary=configuredSummary != null && configuredSummary.equals(AssessmentInstance.QMD_ENTRY_SUMMARY_NONE) ? true : false;
  Boolean showResultOnHomePage=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_RESULT_ON_HOME_PAGE);
  boolean confEnableShowResultOnHomePage=(showResultOnHomePage != null) ? showResultOnHomePage.booleanValue() : false;
  confEnableShowResultOnHomePage=!noSummary && confEnableShowResultOnHomePage;
  showResultsOnHomePage=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  showResultsOnHomePage.select(""String_Node_Str"",confEnableShowResultOnHomePage);
  showResultsOnHomePage.addActionListener(FormEvent.ONCLICK);
  showResultsOnHomePage.setVisible(!isSurvey);
  Boolean showResultsActive=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_DATE_DEPENDENT_RESULTS);
  boolean showResultsDateDependent=false;
  if (showResultsActive != null) {
    showResultsDateDependent=showResultsActive.booleanValue();
  }
  showResultsDateDependentButton=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  if (isAssessment || isSelfTest) {
    showResultsDateDependentButton.select(""String_Node_Str"",showResultsDateDependent);
    showResultsDateDependentButton.addActionListener(FormEvent.ONCLICK);
  }
 else {
    showResultsDateDependentButton.setEnabled(false);
  }
  Date startDate=(Date)modConfig.get(IQEditController.CONFIG_KEY_RESULTS_START_DATE);
  startDateElement=uifactory.addDateChooser(""String_Node_Str"",""String_Node_Str"",null,formLayout);
  startDateElement.setDateChooserTimeEnabled(true);
  startDateElement.setDate(startDate);
  startDateElement.setMandatory(true);
  Date endDate=(Date)modConfig.get(IQEditController.CONFIG_KEY_RESULTS_END_DATE);
  endDateElement=uifactory.addDateChooser(""String_Node_Str"",""String_Node_Str"",null,formLayout);
  endDateElement.setDateChooserTimeEnabled(true);
  endDateElement.setDate(endDate);
  Boolean showResultOnFinish=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_RESULT_ON_FINISH);
  boolean confEnableShowResultOnFinish=(showResultOnFinish != null) ? showResultOnFinish.booleanValue() : true;
  confEnableShowResultOnFinish=!noSummary && confEnableShowResultOnFinish;
  showResultsAfterFinishTest=uifactory.addCheckboxesHorizontal(""String_Node_Str"",""String_Node_Str"",formLayout,new String[]{""String_Node_Str""},new String[]{null});
  showResultsAfterFinishTest.select(""String_Node_Str"",confEnableShowResultOnFinish);
  showResultsAfterFinishTest.addActionListener(FormEvent.ONCLICK);
  showResultsAfterFinishTest.setVisible(!isSurvey);
  String[] summaryKeys=new String[]{AssessmentInstance.QMD_ENTRY_SUMMARY_COMPACT,AssessmentInstance.QMD_ENTRY_SUMMARY_SECTION,AssessmentInstance.QMD_ENTRY_SUMMARY_DETAILED};
  String[] summaryValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
  summary=uifactory.addRadiosVertical(""String_Node_Str"",""String_Node_Str"",formLayout,summaryKeys,summaryValues);
  String confSummary=(String)modConfig.get(IQEditController.CONFIG_KEY_SUMMARY);
  uifactory.addSpacerElement(""String_Node_Str"",formLayout,true);
  if (confSummary == null || noSummary) {
    confSummary=AssessmentInstance.QMD_ENTRY_SUMMARY_COMPACT;
  }
  if (isAssessment || isSelfTest) {
    summary.select(confSummary,true);
  }
 else {
    summary.setEnabled(false);
  }
  uifactory.addSpacerElement(""String_Node_Str"",formLayout,true);
  uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
  update();
}"
69579,"/** 
 * Initializes the course tools according to the users rights (repository author group and course rights in course groupmanagement)
 * @param identity
 * @param ureq
 * @param ureq
 * @return ToolController
 */
private ToolController initToolController(Identity identity,UserRequest ureq){
  ToolController myTool=ToolFactory.createToolController(getWindowControl());
  CourseConfig cc=uce.getCourseEnvironment().getCourseConfig();
  if (isCourseAdmin || isCourseCoach || hasCourseRight(CourseRights.RIGHT_COURSEEDITOR)|| hasCourseRight(CourseRights.RIGHT_GROUPMANAGEMENT)|| hasCourseRight(CourseRights.RIGHT_ARCHIVING)|| hasCourseRight(CourseRights.RIGHT_STATISTICS)|| hasCourseRight(CourseRights.RIGHT_DB)|| hasCourseRight(CourseRights.RIGHT_ASSESSMENT)) {
    myTool.addHeader(translate(""String_Node_Str""));
    if (hasCourseRight(CourseRights.RIGHT_COURSEEDITOR) || isCourseAdmin) {
      boolean managed=RepositoryEntryManagedFlag.isManaged(courseRepositoryEntry,RepositoryEntryManagedFlag.editcontent);
      myTool.addLink(COMMAND_EDIT,translate(""String_Node_Str""),""String_Node_Str"",null,""String_Node_Str"",false);
      myTool.setEnabled(""String_Node_Str"",!managed);
    }
    if (hasCourseRight(CourseRights.RIGHT_GROUPMANAGEMENT) || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""),null,null,""String_Node_Str"",false);
    }
    if (hasCourseRight(CourseRights.RIGHT_ARCHIVING) || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
    if (hasCourseRight(CourseRights.RIGHT_ASSESSMENT) || isCourseCoach || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
    if (hasCourseRight(CourseRights.RIGHT_STATISTICS) || isCourseAdmin || isCourseCoach) {
      final AtomicInteger testNodes=new AtomicInteger();
      final AtomicInteger surveyNodes=new AtomicInteger();
      new TreeVisitor(new Visitor(){
        @Override public void visit(        INode node){
          if (((CourseNode)node).isStatisticNodeResultAvailable(uce,QTIType.test,QTIType.onyx)) {
            testNodes.incrementAndGet();
          }
 else           if (((CourseNode)node).isStatisticNodeResultAvailable(uce,QTIType.survey)) {
            surveyNodes.incrementAndGet();
          }
        }
      }
,course.getRunStructure().getRootNode(),true).visitAll();
      if (testNodes.intValue() > 0) {
        myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
      }
      if (surveyNodes.intValue() > 0) {
        myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
      }
    }
    if (hasCourseRight(CourseRights.RIGHT_STATISTICS) || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
    if (CourseDBManager.getInstance().isEnabled() && (hasCourseRight(CourseRights.RIGHT_DB) || isCourseAdmin)) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
  }
  if (uce.getCoachedGroups().size() > 0) {
    myTool.addHeader(translate(""String_Node_Str""));
    for (    BusinessGroup group : uce.getCoachedGroups()) {
      myTool.addLink(CMD_START_GROUP_PREFIX + group.getKey().toString(),StringHelper.escapeHtml(group.getName()));
    }
  }
  if (uce.getParticipatingGroups().size() > 0) {
    myTool.addHeader(translate(""String_Node_Str""));
    for (    BusinessGroup group : uce.getParticipatingGroups()) {
      myTool.addLink(CMD_START_GROUP_PREFIX + group.getKey().toString(),group.getName());
    }
  }
  if (uce.getWaitingLists().size() > 0) {
    myTool.addHeader(translate(""String_Node_Str""));
    for (    BusinessGroup group : uce.getWaitingLists()) {
      int pos=businessGroupService.getPositionInWaitingListFor(identity,group);
      myTool.addLink(CMD_START_GROUP_PREFIX + group.getKey().toString(),group.getName() + ""String_Node_Str"" + pos+ ""String_Node_Str"",group.getKey().toString(),null);
      myTool.setEnabled(group.getKey().toString(),false);
    }
  }
  myTool.addHeader(translate(""String_Node_Str""));
  if (cc.isCalendarEnabled() && !isGuest) {
    myTool.addPopUpLink(ACTION_CALENDAR,translate(""String_Node_Str""),null,null,""String_Node_Str"",""String_Node_Str"",false);
  }
  if (cc.hasGlossary()) {
    myTool.addComponent(glossaryToolCtr.getInitialComponent());
  }
  if (showCourseConfigLink) {
    ChiefController chief=(ChiefController)Windows.getWindows(ureq).getAttribute(""String_Node_Str"");
    if (chief != null && chief.hasStaticSite(RepositorySite.class)) {
      myTool.addLink(TOOLBOX_LINK_COURSECONFIG,translate(""String_Node_Str""));
    }
  }
  if (!isGuest) {
    myTool.addPopUpLink(""String_Node_Str"",translate(""String_Node_Str""),null,null,""String_Node_Str"",""String_Node_Str"",false);
  }
  if (offerBookmark && !isGuest) {
    boolean marked=markManager.isMarked(courseRepositoryEntry,getIdentity(),null);
    String css=marked ? ""String_Node_Str"" : ""String_Node_Str"";
    myTool.addLink(ACTION_BOOKMARK,translate(""String_Node_Str""),TOOL_BOOKMARK,css);
  }
  if (cc.isEfficencyStatementEnabled() && course.hasAssessableNodes() && !isGuest) {
    myTool.addPopUpLink(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",false);
    UserEfficiencyStatement es=efficiencyStatementManager.getUserEfficiencyStatementLight(courseRepositoryEntry.getKey(),identity);
    if (es == null) {
      myTool.setEnabled(""String_Node_Str"",false);
    }
  }
  InstantMessagingModule imModule=CoreSpringFactory.getImpl(InstantMessagingModule.class);
  boolean chatIsEnabled=!isGuest && imModule.isEnabled() && imModule.isCourseEnabled()&& CourseModule.isCourseChatEnabled()&& cc.isChatEnabled();
  if (chatIsEnabled) {
    myTool.addLink(ACTION_CHAT,translate(""String_Node_Str""),TOOL_CHAT,null);
  }
  if (CourseModule.displayParticipantsCount() && !isGuest) {
    addCurrentUserCount(myTool);
  }
  return myTool;
}","/** 
 * Initializes the course tools according to the users rights (repository author group and course rights in course groupmanagement)
 * @param identity
 * @param ureq
 * @param ureq
 * @return ToolController
 */
private ToolController initToolController(Identity identity,UserRequest ureq){
  ToolController myTool=ToolFactory.createToolController(getWindowControl());
  CourseConfig cc=uce.getCourseEnvironment().getCourseConfig();
  if (isCourseAdmin || isCourseCoach || hasCourseRight(CourseRights.RIGHT_COURSEEDITOR)|| hasCourseRight(CourseRights.RIGHT_GROUPMANAGEMENT)|| hasCourseRight(CourseRights.RIGHT_ARCHIVING)|| hasCourseRight(CourseRights.RIGHT_STATISTICS)|| hasCourseRight(CourseRights.RIGHT_DB)|| hasCourseRight(CourseRights.RIGHT_ASSESSMENT)) {
    myTool.addHeader(translate(""String_Node_Str""));
    if (hasCourseRight(CourseRights.RIGHT_COURSEEDITOR) || isCourseAdmin) {
      boolean managed=RepositoryEntryManagedFlag.isManaged(courseRepositoryEntry,RepositoryEntryManagedFlag.editcontent);
      myTool.addLink(COMMAND_EDIT,translate(""String_Node_Str""),""String_Node_Str"",null,""String_Node_Str"",false);
      myTool.setEnabled(""String_Node_Str"",!managed);
    }
    if (hasCourseRight(CourseRights.RIGHT_GROUPMANAGEMENT) || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""),null,null,""String_Node_Str"",false);
    }
    if (hasCourseRight(CourseRights.RIGHT_ARCHIVING) || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
    if (hasCourseRight(CourseRights.RIGHT_ASSESSMENT) || isCourseCoach || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
    if (hasCourseRight(CourseRights.RIGHT_STATISTICS) || isCourseAdmin || isCourseCoach) {
      final AtomicInteger testNodes=new AtomicInteger();
      final AtomicInteger surveyNodes=new AtomicInteger();
      new TreeVisitor(new Visitor(){
        @Override public void visit(        INode node){
          if (((CourseNode)node).isStatisticNodeResultAvailable(uce,QTIType.test,QTIType.onyx)) {
            testNodes.incrementAndGet();
          }
 else           if (((CourseNode)node).isStatisticNodeResultAvailable(uce,QTIType.survey)) {
            surveyNodes.incrementAndGet();
          }
        }
      }
,course.getRunStructure().getRootNode(),true).visitAll();
      if (testNodes.intValue() > 0) {
        myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
      }
      if (surveyNodes.intValue() > 0) {
        myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
      }
    }
    if (hasCourseRight(CourseRights.RIGHT_STATISTICS) || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
    if (CourseDBManager.getInstance().isEnabled() && (hasCourseRight(CourseRights.RIGHT_DB) || isCourseAdmin)) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
  }
  if (uce.getCoachedGroups().size() > 0) {
    myTool.addHeader(translate(""String_Node_Str""));
    for (    BusinessGroup group : uce.getCoachedGroups()) {
      myTool.addLink(CMD_START_GROUP_PREFIX + group.getKey().toString(),StringHelper.escapeHtml(group.getName()));
    }
  }
  if (uce.getParticipatingGroups().size() > 0) {
    myTool.addHeader(translate(""String_Node_Str""));
    for (    BusinessGroup group : uce.getParticipatingGroups()) {
      myTool.addLink(CMD_START_GROUP_PREFIX + group.getKey().toString(),group.getName());
    }
  }
  if (uce.getWaitingLists().size() > 0) {
    myTool.addHeader(translate(""String_Node_Str""));
    for (    BusinessGroup group : uce.getWaitingLists()) {
      int pos=businessGroupService.getPositionInWaitingListFor(identity,group);
      myTool.addLink(CMD_START_GROUP_PREFIX + group.getKey().toString(),group.getName() + ""String_Node_Str"" + pos+ ""String_Node_Str"",group.getKey().toString(),null);
      myTool.setEnabled(group.getKey().toString(),false);
    }
  }
  myTool.addHeader(translate(""String_Node_Str""));
  if (cc.isCalendarEnabled() && !isGuest) {
    myTool.addPopUpLink(ACTION_CALENDAR,translate(""String_Node_Str""),null,null,""String_Node_Str"",""String_Node_Str"",false);
  }
  if (cc.hasGlossary()) {
    myTool.addComponent(glossaryToolCtr.getInitialComponent());
  }
  if (showCourseConfigLink) {
    ChiefController chief=(ChiefController)Windows.getWindows(ureq).getAttribute(""String_Node_Str"");
    if (chief == null || chief.hasStaticSite(RepositorySite.class)) {
      myTool.addLink(TOOLBOX_LINK_COURSECONFIG,translate(""String_Node_Str""));
    }
  }
  if (!isGuest) {
    myTool.addPopUpLink(""String_Node_Str"",translate(""String_Node_Str""),null,null,""String_Node_Str"",""String_Node_Str"",false);
  }
  if (offerBookmark && !isGuest) {
    boolean marked=markManager.isMarked(courseRepositoryEntry,getIdentity(),null);
    String css=marked ? ""String_Node_Str"" : ""String_Node_Str"";
    myTool.addLink(ACTION_BOOKMARK,translate(""String_Node_Str""),TOOL_BOOKMARK,css);
  }
  if (cc.isEfficencyStatementEnabled() && course.hasAssessableNodes() && !isGuest) {
    myTool.addPopUpLink(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",false);
    UserEfficiencyStatement es=efficiencyStatementManager.getUserEfficiencyStatementLight(courseRepositoryEntry.getKey(),identity);
    if (es == null) {
      myTool.setEnabled(""String_Node_Str"",false);
    }
  }
  InstantMessagingModule imModule=CoreSpringFactory.getImpl(InstantMessagingModule.class);
  boolean chatIsEnabled=!isGuest && imModule.isEnabled() && imModule.isCourseEnabled()&& CourseModule.isCourseChatEnabled()&& cc.isChatEnabled();
  if (chatIsEnabled) {
    myTool.addLink(ACTION_CHAT,translate(""String_Node_Str""),TOOL_CHAT,null);
  }
  if (CourseModule.displayParticipantsCount() && !isGuest) {
    addCurrentUserCount(myTool);
  }
  return myTool;
}"
69580,"private void doHandleToolEvents(UserRequest ureq,String cmd){
  if (cmd.indexOf(CMD_START_GROUP_PREFIX) == 0) {
    String groupIdent=cmd.substring(CMD_START_GROUP_PREFIX.length());
    Long groupKey=new Long(Long.parseLong(groupIdent));
    BusinessGroup group=businessGroupService.loadBusinessGroup(groupKey);
    if (group != null && businessGroupService.isIdentityInBusinessGroup(ureq.getIdentity(),group)) {
      String bsuinessPath=""String_Node_Str"" + group.getKey() + ""String_Node_Str"";
      NewControllerFactory.getInstance().launch(bsuinessPath,ureq,getWindowControl());
    }
 else {
      getWindowControl().setError(translate(""String_Node_Str""));
      logAudit(""String_Node_Str"" + ""String_Node_Str"" + groupKey,null);
      reloadGroupMemberships(ureq.getIdentity());
      removeAsListenerAndDispose(toolC);
      toolC=initToolController(ureq.getIdentity(),ureq);
      listenTo(toolC);
      Component toolComp=(toolC == null ? null : toolC.getInitialComponent());
      columnLayoutCtr.setCol2(toolComp);
    }
  }
 else   if (cmd.equals(COMMAND_EDIT)) {
    doEdit(ureq);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    launchMembersManagement(ureq);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    if (hasCourseRight(CourseRights.RIGHT_STATISTICS) || isCourseAdmin) {
      currentToolCtr=new StatisticMainController(ureq,getWindowControl(),course);
      listenTo(currentToolCtr);
      all.pushController(translate(""String_Node_Str""),currentToolCtr);
    }
 else     throw new OLATSecurityException(""String_Node_Str"");
  }
 else   if (cmd.equals(TOOL_CHAT)) {
    boolean vip=isCourseCoach || isCourseAdmin;
    OpenInstantMessageEvent event=new OpenInstantMessageEvent(ureq,course,courseTitle,vip);
    ureq.getUserSession().getSingleUserEventCenter().fireEventToListenersOf(event,InstantMessagingService.TOWER_EVENT_ORES);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    launchAssessmentStatistics(ureq,""String_Node_Str"",""String_Node_Str"",QTIType.test,QTIType.onyx);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    launchAssessmentStatistics(ureq,""String_Node_Str"",""String_Node_Str"",QTIType.survey);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    if (hasCourseRight(CourseRights.RIGHT_DB) || isCourseAdmin) {
      currentToolCtr=new CustomDBMainController(ureq,getWindowControl(),course);
      listenTo(currentToolCtr);
      all.pushController(translate(""String_Node_Str""),currentToolCtr);
    }
 else     throw new OLATSecurityException(""String_Node_Str"");
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    if (hasCourseRight(CourseRights.RIGHT_ARCHIVING) || isCourseAdmin) {
      currentToolCtr=new ArchiverMainController(ureq,getWindowControl(),course,new IArchiverCallback(){
        public boolean mayArchiveQtiResults(){
          return true;
        }
        public boolean mayArchiveLogfiles(){
          return true;
        }
        public boolean mayArchiveCoursestructure(){
          return true;
        }
        public boolean mayArchiveProperties(){
          return true;
        }
        public boolean mayArchiveHandedInTasks(){
          return true;
        }
        public boolean mayArchiveForums(){
          return true;
        }
        public boolean mayArchiveDialogs(){
          return true;
        }
        public boolean mayArchiveWikis(){
          return true;
        }
        public boolean mayArchiveProjectBroker(){
          return true;
        }
        @Override public boolean mayArchiveScorm(){
          return true;
        }
        @Override public boolean mayArchiveChecklist(){
          return true;
        }
      }
);
      listenTo(currentToolCtr);
      all.pushController(translate(""String_Node_Str""),currentToolCtr);
    }
 else     throw new OLATSecurityException(""String_Node_Str"");
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    launchAssessmentTool(ureq,null);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    ControllerCreator ctrlCreator=new ControllerCreator(){
      public Controller createController(      UserRequest lureq,      WindowControl lwControl){
        EfficiencyStatementController efficiencyStatementController=new EfficiencyStatementController(lwControl,lureq,courseRepositoryEntry.getKey());
        LayoutMain3ColsController layoutCtr=new LayoutMain3ColsController(lureq,getWindowControl(),null,null,efficiencyStatementController.getInitialComponent(),null);
        layoutCtr.setCustomCSS(CourseFactory.getCustomCourseCss(lureq.getUserSession(),uce.getCourseEnvironment()));
        return layoutCtr;
      }
    }
;
    ControllerCreator layoutCtrlr=BaseFullWebappPopupLayoutFactory.createAuthMinimalPopupLayout(ureq,ctrlCreator);
    openInNewBrowserWindow(ureq,layoutCtrlr);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    ControllerCreator ctrlCreator=new ControllerCreator(){
      public Controller createController(      UserRequest lureq,      WindowControl lwControl){
        Controller notesCtr=new NoteController(lureq,course,getExtendedCourseTitle(lureq.getLocale()),lwControl);
        LayoutMain3ColsController layoutCtr=new LayoutMain3ColsController(lureq,lwControl,null,null,notesCtr.getInitialComponent(),null);
        layoutCtr.setCustomCSS(CourseFactory.getCustomCourseCss(lureq.getUserSession(),uce.getCourseEnvironment()));
        layoutCtr.addDisposableChildController(notesCtr);
        return layoutCtr;
      }
    }
;
    ControllerCreator popupLayoutCtr=BaseFullWebappPopupLayoutFactory.createAuthMinimalPopupLayout(ureq,ctrlCreator);
    openInNewBrowserWindow(ureq,popupLayoutCtr);
  }
 else   if (cmd.equals(TOOLBOX_LINK_COURSECONFIG)) {
    ChiefController chief=(ChiefController)Windows.getWindows(ureq).getAttribute(""String_Node_Str"");
    if (chief.hasStaticSite(RepositorySite.class)) {
      String businessPath=""String_Node_Str"" + courseRepositoryEntry.getKey() + ""String_Node_Str"";
      NewControllerFactory.getInstance().launch(businessPath,ureq,getWindowControl());
    }
  }
 else   if (cmd.equals(ACTION_BOOKMARK)) {
    boolean marked=markManager.isMarked(courseRepositoryEntry,getIdentity(),null);
    if (marked) {
      markManager.removeMark(courseRepositoryEntry,getIdentity(),null);
    }
 else {
      String businessPath=""String_Node_Str"" + courseRepositoryEntry.getKey() + ""String_Node_Str"";
      markManager.setMark(courseRepositoryEntry,getIdentity(),null,businessPath);
    }
    String css=marked ? ""String_Node_Str"" : ""String_Node_Str"";
    toolC.setCssClass(TOOL_BOOKMARK,css);
  }
 else   if (cmd.equals(ACTION_CALENDAR)) {
    ControllerCreator ctrlCreator=new ControllerCreator(){
      public Controller createController(      UserRequest lureq,      WindowControl lwControl){
        ContextEntry ce=BusinessControlFactory.getInstance().createContextEntry(courseRepositoryEntry);
        WindowControl llwControl=BusinessControlFactory.getInstance().createBusinessWindowControl(ce,lwControl);
        CourseCalendarController calendarController=new CourseCalendarController(lureq,llwControl,course);
        LayoutMain3ColsController layoutCtr=new LayoutMain3ColsController(lureq,llwControl,null,null,calendarController.getInitialComponent(),null);
        layoutCtr.setCustomCSS(CourseFactory.getCustomCourseCss(lureq.getUserSession(),uce.getCourseEnvironment()));
        layoutCtr.addDisposableChildController(calendarController);
        return layoutCtr;
      }
    }
;
    ControllerCreator layoutCtrlr=BaseFullWebappPopupLayoutFactory.createAuthMinimalPopupLayout(ureq,ctrlCreator);
    PopupBrowserWindow pbw=getWindowControl().getWindowBackOffice().getWindowManager().createNewPopupBrowserWindowFor(ureq,layoutCtrlr);
    pbw.open(ureq);
  }
}","private void doHandleToolEvents(UserRequest ureq,String cmd){
  if (cmd.indexOf(CMD_START_GROUP_PREFIX) == 0) {
    String groupIdent=cmd.substring(CMD_START_GROUP_PREFIX.length());
    Long groupKey=new Long(Long.parseLong(groupIdent));
    BusinessGroup group=businessGroupService.loadBusinessGroup(groupKey);
    if (group != null && businessGroupService.isIdentityInBusinessGroup(ureq.getIdentity(),group)) {
      String bsuinessPath=""String_Node_Str"" + group.getKey() + ""String_Node_Str"";
      NewControllerFactory.getInstance().launch(bsuinessPath,ureq,getWindowControl());
    }
 else {
      getWindowControl().setError(translate(""String_Node_Str""));
      logAudit(""String_Node_Str"" + ""String_Node_Str"" + groupKey,null);
      reloadGroupMemberships(ureq.getIdentity());
      removeAsListenerAndDispose(toolC);
      toolC=initToolController(ureq.getIdentity(),ureq);
      listenTo(toolC);
      Component toolComp=(toolC == null ? null : toolC.getInitialComponent());
      columnLayoutCtr.setCol2(toolComp);
    }
  }
 else   if (cmd.equals(COMMAND_EDIT)) {
    doEdit(ureq);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    launchMembersManagement(ureq);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    if (hasCourseRight(CourseRights.RIGHT_STATISTICS) || isCourseAdmin) {
      currentToolCtr=new StatisticMainController(ureq,getWindowControl(),course);
      listenTo(currentToolCtr);
      all.pushController(translate(""String_Node_Str""),currentToolCtr);
    }
 else     throw new OLATSecurityException(""String_Node_Str"");
  }
 else   if (cmd.equals(TOOL_CHAT)) {
    boolean vip=isCourseCoach || isCourseAdmin;
    OpenInstantMessageEvent event=new OpenInstantMessageEvent(ureq,course,courseTitle,vip);
    ureq.getUserSession().getSingleUserEventCenter().fireEventToListenersOf(event,InstantMessagingService.TOWER_EVENT_ORES);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    launchAssessmentStatistics(ureq,""String_Node_Str"",""String_Node_Str"",QTIType.test,QTIType.onyx);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    launchAssessmentStatistics(ureq,""String_Node_Str"",""String_Node_Str"",QTIType.survey);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    if (hasCourseRight(CourseRights.RIGHT_DB) || isCourseAdmin) {
      currentToolCtr=new CustomDBMainController(ureq,getWindowControl(),course);
      listenTo(currentToolCtr);
      all.pushController(translate(""String_Node_Str""),currentToolCtr);
    }
 else     throw new OLATSecurityException(""String_Node_Str"");
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    if (hasCourseRight(CourseRights.RIGHT_ARCHIVING) || isCourseAdmin) {
      currentToolCtr=new ArchiverMainController(ureq,getWindowControl(),course,new IArchiverCallback(){
        public boolean mayArchiveQtiResults(){
          return true;
        }
        public boolean mayArchiveLogfiles(){
          return true;
        }
        public boolean mayArchiveCoursestructure(){
          return true;
        }
        public boolean mayArchiveProperties(){
          return true;
        }
        public boolean mayArchiveHandedInTasks(){
          return true;
        }
        public boolean mayArchiveForums(){
          return true;
        }
        public boolean mayArchiveDialogs(){
          return true;
        }
        public boolean mayArchiveWikis(){
          return true;
        }
        public boolean mayArchiveProjectBroker(){
          return true;
        }
        @Override public boolean mayArchiveScorm(){
          return true;
        }
        @Override public boolean mayArchiveChecklist(){
          return true;
        }
      }
);
      listenTo(currentToolCtr);
      all.pushController(translate(""String_Node_Str""),currentToolCtr);
    }
 else     throw new OLATSecurityException(""String_Node_Str"");
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    launchAssessmentTool(ureq,null);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    ControllerCreator ctrlCreator=new ControllerCreator(){
      public Controller createController(      UserRequest lureq,      WindowControl lwControl){
        EfficiencyStatementController efficiencyStatementController=new EfficiencyStatementController(lwControl,lureq,courseRepositoryEntry.getKey());
        LayoutMain3ColsController layoutCtr=new LayoutMain3ColsController(lureq,getWindowControl(),null,null,efficiencyStatementController.getInitialComponent(),null);
        layoutCtr.setCustomCSS(CourseFactory.getCustomCourseCss(lureq.getUserSession(),uce.getCourseEnvironment()));
        return layoutCtr;
      }
    }
;
    ControllerCreator layoutCtrlr=BaseFullWebappPopupLayoutFactory.createAuthMinimalPopupLayout(ureq,ctrlCreator);
    openInNewBrowserWindow(ureq,layoutCtrlr);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    ControllerCreator ctrlCreator=new ControllerCreator(){
      public Controller createController(      UserRequest lureq,      WindowControl lwControl){
        Controller notesCtr=new NoteController(lureq,course,getExtendedCourseTitle(lureq.getLocale()),lwControl);
        LayoutMain3ColsController layoutCtr=new LayoutMain3ColsController(lureq,lwControl,null,null,notesCtr.getInitialComponent(),null);
        layoutCtr.setCustomCSS(CourseFactory.getCustomCourseCss(lureq.getUserSession(),uce.getCourseEnvironment()));
        layoutCtr.addDisposableChildController(notesCtr);
        return layoutCtr;
      }
    }
;
    ControllerCreator popupLayoutCtr=BaseFullWebappPopupLayoutFactory.createAuthMinimalPopupLayout(ureq,ctrlCreator);
    openInNewBrowserWindow(ureq,popupLayoutCtr);
  }
 else   if (cmd.equals(TOOLBOX_LINK_COURSECONFIG)) {
    ChiefController chief=(ChiefController)Windows.getWindows(ureq).getAttribute(""String_Node_Str"");
    if (chief != null && chief.hasStaticSite(RepositorySite.class)) {
      String businessPath=""String_Node_Str"" + courseRepositoryEntry.getKey() + ""String_Node_Str"";
      NewControllerFactory.getInstance().launch(businessPath,ureq,getWindowControl());
    }
  }
 else   if (cmd.equals(ACTION_BOOKMARK)) {
    boolean marked=markManager.isMarked(courseRepositoryEntry,getIdentity(),null);
    if (marked) {
      markManager.removeMark(courseRepositoryEntry,getIdentity(),null);
    }
 else {
      String businessPath=""String_Node_Str"" + courseRepositoryEntry.getKey() + ""String_Node_Str"";
      markManager.setMark(courseRepositoryEntry,getIdentity(),null,businessPath);
    }
    String css=marked ? ""String_Node_Str"" : ""String_Node_Str"";
    toolC.setCssClass(TOOL_BOOKMARK,css);
  }
 else   if (cmd.equals(ACTION_CALENDAR)) {
    ControllerCreator ctrlCreator=new ControllerCreator(){
      public Controller createController(      UserRequest lureq,      WindowControl lwControl){
        ContextEntry ce=BusinessControlFactory.getInstance().createContextEntry(courseRepositoryEntry);
        WindowControl llwControl=BusinessControlFactory.getInstance().createBusinessWindowControl(ce,lwControl);
        CourseCalendarController calendarController=new CourseCalendarController(lureq,llwControl,course);
        LayoutMain3ColsController layoutCtr=new LayoutMain3ColsController(lureq,llwControl,null,null,calendarController.getInitialComponent(),null);
        layoutCtr.setCustomCSS(CourseFactory.getCustomCourseCss(lureq.getUserSession(),uce.getCourseEnvironment()));
        layoutCtr.addDisposableChildController(calendarController);
        return layoutCtr;
      }
    }
;
    ControllerCreator layoutCtrlr=BaseFullWebappPopupLayoutFactory.createAuthMinimalPopupLayout(ureq,ctrlCreator);
    PopupBrowserWindow pbw=getWindowControl().getWindowBackOffice().getWindowManager().createNewPopupBrowserWindowFor(ureq,layoutCtrlr);
    pbw.open(ureq);
  }
}"
69581,"/** 
 * Initializes the course tools according to the users rights (repository author group and course rights in course groupmanagement)
 * @param identity
 * @param ureq
 * @param ureq
 * @return ToolController
 */
private ToolController initToolController(Identity identity,UserRequest ureq){
  ToolController myTool=ToolFactory.createToolController(getWindowControl());
  CourseConfig cc=uce.getCourseEnvironment().getCourseConfig();
  if (isCourseAdmin || isCourseCoach || hasCourseRight(CourseRights.RIGHT_COURSEEDITOR)|| hasCourseRight(CourseRights.RIGHT_GROUPMANAGEMENT)|| hasCourseRight(CourseRights.RIGHT_ARCHIVING)|| hasCourseRight(CourseRights.RIGHT_STATISTICS)|| hasCourseRight(CourseRights.RIGHT_DB)|| hasCourseRight(CourseRights.RIGHT_ASSESSMENT)) {
    myTool.addHeader(translate(""String_Node_Str""));
    if (hasCourseRight(CourseRights.RIGHT_COURSEEDITOR) || isCourseAdmin) {
      boolean managed=RepositoryEntryManagedFlag.isManaged(courseRepositoryEntry,RepositoryEntryManagedFlag.editcontent);
      myTool.addLink(COMMAND_EDIT,translate(""String_Node_Str""),""String_Node_Str"",null,""String_Node_Str"",false);
      myTool.setEnabled(""String_Node_Str"",!managed);
    }
    if (hasCourseRight(CourseRights.RIGHT_GROUPMANAGEMENT) || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""),null,null,""String_Node_Str"",false);
    }
    if (hasCourseRight(CourseRights.RIGHT_ARCHIVING) || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
    if (hasCourseRight(CourseRights.RIGHT_ASSESSMENT) || isCourseCoach || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
    if (hasCourseRight(CourseRights.RIGHT_STATISTICS) || isCourseAdmin || isCourseCoach) {
      final AtomicInteger testNodes=new AtomicInteger();
      final AtomicInteger surveyNodes=new AtomicInteger();
      new TreeVisitor(new Visitor(){
        @Override public void visit(        INode node){
          if (((CourseNode)node).isStatisticNodeResultAvailable(uce,QTIType.test,QTIType.onyx)) {
            testNodes.incrementAndGet();
          }
 else           if (((CourseNode)node).isStatisticNodeResultAvailable(uce,QTIType.survey)) {
            surveyNodes.incrementAndGet();
          }
        }
      }
,course.getRunStructure().getRootNode(),true).visitAll();
      if (testNodes.intValue() > 0) {
        myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
      }
      if (surveyNodes.intValue() > 0) {
        myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
      }
    }
    if (hasCourseRight(CourseRights.RIGHT_STATISTICS) || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
    if (CourseDBManager.getInstance().isEnabled() && (hasCourseRight(CourseRights.RIGHT_DB) || isCourseAdmin)) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
  }
  if (uce.getCoachedGroups().size() > 0) {
    myTool.addHeader(translate(""String_Node_Str""));
    for (    BusinessGroup group : uce.getCoachedGroups()) {
      myTool.addLink(CMD_START_GROUP_PREFIX + group.getKey().toString(),StringHelper.escapeHtml(group.getName()));
    }
  }
  if (uce.getParticipatingGroups().size() > 0) {
    myTool.addHeader(translate(""String_Node_Str""));
    for (    BusinessGroup group : uce.getParticipatingGroups()) {
      myTool.addLink(CMD_START_GROUP_PREFIX + group.getKey().toString(),group.getName());
    }
  }
  if (uce.getWaitingLists().size() > 0) {
    myTool.addHeader(translate(""String_Node_Str""));
    for (    BusinessGroup group : uce.getWaitingLists()) {
      int pos=businessGroupService.getPositionInWaitingListFor(identity,group);
      myTool.addLink(CMD_START_GROUP_PREFIX + group.getKey().toString(),group.getName() + ""String_Node_Str"" + pos+ ""String_Node_Str"",group.getKey().toString(),null);
      myTool.setEnabled(group.getKey().toString(),false);
    }
  }
  myTool.addHeader(translate(""String_Node_Str""));
  if (cc.isCalendarEnabled() && !isGuest) {
    myTool.addPopUpLink(ACTION_CALENDAR,translate(""String_Node_Str""),null,null,""String_Node_Str"",""String_Node_Str"",false);
  }
  if (cc.hasGlossary()) {
    myTool.addComponent(glossaryToolCtr.getInitialComponent());
  }
  if (showCourseConfigLink) {
    ChiefController chief=(ChiefController)Windows.getWindows(ureq).getAttribute(""String_Node_Str"");
    if (chief.hasStaticSite(RepositorySite.class)) {
      myTool.addLink(TOOLBOX_LINK_COURSECONFIG,translate(""String_Node_Str""));
    }
  }
  if (!isGuest) {
    myTool.addPopUpLink(""String_Node_Str"",translate(""String_Node_Str""),null,null,""String_Node_Str"",""String_Node_Str"",false);
  }
  if (offerBookmark && !isGuest) {
    boolean marked=markManager.isMarked(courseRepositoryEntry,getIdentity(),null);
    String css=marked ? ""String_Node_Str"" : ""String_Node_Str"";
    myTool.addLink(ACTION_BOOKMARK,translate(""String_Node_Str""),TOOL_BOOKMARK,css);
  }
  if (cc.isEfficencyStatementEnabled() && course.hasAssessableNodes() && !isGuest) {
    myTool.addPopUpLink(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",false);
    UserEfficiencyStatement es=efficiencyStatementManager.getUserEfficiencyStatementLight(courseRepositoryEntry.getKey(),identity);
    if (es == null) {
      myTool.setEnabled(""String_Node_Str"",false);
    }
  }
  InstantMessagingModule imModule=CoreSpringFactory.getImpl(InstantMessagingModule.class);
  boolean chatIsEnabled=!isGuest && imModule.isEnabled() && imModule.isCourseEnabled()&& CourseModule.isCourseChatEnabled()&& cc.isChatEnabled();
  if (chatIsEnabled) {
    myTool.addLink(ACTION_CHAT,translate(""String_Node_Str""),TOOL_CHAT,null);
  }
  if (CourseModule.displayParticipantsCount() && !isGuest) {
    addCurrentUserCount(myTool);
  }
  return myTool;
}","/** 
 * Initializes the course tools according to the users rights (repository author group and course rights in course groupmanagement)
 * @param identity
 * @param ureq
 * @param ureq
 * @return ToolController
 */
private ToolController initToolController(Identity identity,UserRequest ureq){
  ToolController myTool=ToolFactory.createToolController(getWindowControl());
  CourseConfig cc=uce.getCourseEnvironment().getCourseConfig();
  if (isCourseAdmin || isCourseCoach || hasCourseRight(CourseRights.RIGHT_COURSEEDITOR)|| hasCourseRight(CourseRights.RIGHT_GROUPMANAGEMENT)|| hasCourseRight(CourseRights.RIGHT_ARCHIVING)|| hasCourseRight(CourseRights.RIGHT_STATISTICS)|| hasCourseRight(CourseRights.RIGHT_DB)|| hasCourseRight(CourseRights.RIGHT_ASSESSMENT)) {
    myTool.addHeader(translate(""String_Node_Str""));
    if (hasCourseRight(CourseRights.RIGHT_COURSEEDITOR) || isCourseAdmin) {
      boolean managed=RepositoryEntryManagedFlag.isManaged(courseRepositoryEntry,RepositoryEntryManagedFlag.editcontent);
      myTool.addLink(COMMAND_EDIT,translate(""String_Node_Str""),""String_Node_Str"",null,""String_Node_Str"",false);
      myTool.setEnabled(""String_Node_Str"",!managed);
    }
    if (hasCourseRight(CourseRights.RIGHT_GROUPMANAGEMENT) || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""),null,null,""String_Node_Str"",false);
    }
    if (hasCourseRight(CourseRights.RIGHT_ARCHIVING) || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
    if (hasCourseRight(CourseRights.RIGHT_ASSESSMENT) || isCourseCoach || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
    if (hasCourseRight(CourseRights.RIGHT_STATISTICS) || isCourseAdmin || isCourseCoach) {
      final AtomicInteger testNodes=new AtomicInteger();
      final AtomicInteger surveyNodes=new AtomicInteger();
      new TreeVisitor(new Visitor(){
        @Override public void visit(        INode node){
          if (((CourseNode)node).isStatisticNodeResultAvailable(uce,QTIType.test,QTIType.onyx)) {
            testNodes.incrementAndGet();
          }
 else           if (((CourseNode)node).isStatisticNodeResultAvailable(uce,QTIType.survey)) {
            surveyNodes.incrementAndGet();
          }
        }
      }
,course.getRunStructure().getRootNode(),true).visitAll();
      if (testNodes.intValue() > 0) {
        myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
      }
      if (surveyNodes.intValue() > 0) {
        myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
      }
    }
    if (hasCourseRight(CourseRights.RIGHT_STATISTICS) || isCourseAdmin) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
    if (CourseDBManager.getInstance().isEnabled() && (hasCourseRight(CourseRights.RIGHT_DB) || isCourseAdmin)) {
      myTool.addLink(""String_Node_Str"",translate(""String_Node_Str""));
    }
  }
  if (uce.getCoachedGroups().size() > 0) {
    myTool.addHeader(translate(""String_Node_Str""));
    for (    BusinessGroup group : uce.getCoachedGroups()) {
      myTool.addLink(CMD_START_GROUP_PREFIX + group.getKey().toString(),StringHelper.escapeHtml(group.getName()));
    }
  }
  if (uce.getParticipatingGroups().size() > 0) {
    myTool.addHeader(translate(""String_Node_Str""));
    for (    BusinessGroup group : uce.getParticipatingGroups()) {
      myTool.addLink(CMD_START_GROUP_PREFIX + group.getKey().toString(),group.getName());
    }
  }
  if (uce.getWaitingLists().size() > 0) {
    myTool.addHeader(translate(""String_Node_Str""));
    for (    BusinessGroup group : uce.getWaitingLists()) {
      int pos=businessGroupService.getPositionInWaitingListFor(identity,group);
      myTool.addLink(CMD_START_GROUP_PREFIX + group.getKey().toString(),group.getName() + ""String_Node_Str"" + pos+ ""String_Node_Str"",group.getKey().toString(),null);
      myTool.setEnabled(group.getKey().toString(),false);
    }
  }
  myTool.addHeader(translate(""String_Node_Str""));
  if (cc.isCalendarEnabled() && !isGuest) {
    myTool.addPopUpLink(ACTION_CALENDAR,translate(""String_Node_Str""),null,null,""String_Node_Str"",""String_Node_Str"",false);
  }
  if (cc.hasGlossary()) {
    myTool.addComponent(glossaryToolCtr.getInitialComponent());
  }
  if (showCourseConfigLink) {
    ChiefController chief=(ChiefController)Windows.getWindows(ureq).getAttribute(""String_Node_Str"");
    if (chief != null && chief.hasStaticSite(RepositorySite.class)) {
      myTool.addLink(TOOLBOX_LINK_COURSECONFIG,translate(""String_Node_Str""));
    }
  }
  if (!isGuest) {
    myTool.addPopUpLink(""String_Node_Str"",translate(""String_Node_Str""),null,null,""String_Node_Str"",""String_Node_Str"",false);
  }
  if (offerBookmark && !isGuest) {
    boolean marked=markManager.isMarked(courseRepositoryEntry,getIdentity(),null);
    String css=marked ? ""String_Node_Str"" : ""String_Node_Str"";
    myTool.addLink(ACTION_BOOKMARK,translate(""String_Node_Str""),TOOL_BOOKMARK,css);
  }
  if (cc.isEfficencyStatementEnabled() && course.hasAssessableNodes() && !isGuest) {
    myTool.addPopUpLink(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",false);
    UserEfficiencyStatement es=efficiencyStatementManager.getUserEfficiencyStatementLight(courseRepositoryEntry.getKey(),identity);
    if (es == null) {
      myTool.setEnabled(""String_Node_Str"",false);
    }
  }
  InstantMessagingModule imModule=CoreSpringFactory.getImpl(InstantMessagingModule.class);
  boolean chatIsEnabled=!isGuest && imModule.isEnabled() && imModule.isCourseEnabled()&& CourseModule.isCourseChatEnabled()&& cc.isChatEnabled();
  if (chatIsEnabled) {
    myTool.addLink(ACTION_CHAT,translate(""String_Node_Str""),TOOL_CHAT,null);
  }
  if (CourseModule.displayParticipantsCount() && !isGuest) {
    addCurrentUserCount(myTool);
  }
  return myTool;
}"
69582,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  int cmpcount=0;
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    layoutCont.contextPut(""String_Node_Str"",entry);
    layoutCont.contextPut(""String_Node_Str"",new Boolean(guestOnly));
    String cssClass=RepositoyUIFactory.getIconCssClass(entry);
    layoutCont.contextPut(""String_Node_Str"",cssClass);
    RepositoryHandler handler=RepositoryHandlerFactory.getInstance().getRepositoryHandler(entry);
    VFSContainer mediaContainer=handler.getMediaContainer(entry);
    if (mediaContainer != null) {
      baseUrl=registerMapper(ureq,new VFSContainerMapper(mediaContainer.getParentContainer()));
    }
    setText(entry.getDescription(),""String_Node_Str"",layoutCont);
    setText(entry.getRequirements(),""String_Node_Str"",layoutCont);
    setText(entry.getObjectives(),""String_Node_Str"",layoutCont);
    setText(entry.getCredits(),""String_Node_Str"",layoutCont);
    VFSLeaf movie=repositoryService.getIntroductionMovie(entry);
    VFSLeaf image=repositoryService.getIntroductionImage(entry);
    if (image != null || movie != null) {
      ImageComponent ic=new ImageComponent(ureq.getUserSession(),""String_Node_Str"");
      if (movie != null) {
        ic.setMedia(movie);
        ic.setMaxWithAndHeightToFitWithin(500,300);
        if (image != null) {
          ic.setPoster(image);
        }
      }
 else {
        ic.setMedia(image);
        ic.setMaxWithAndHeightToFitWithin(500,300);
      }
      layoutCont.put(""String_Node_Str"",ic);
    }
    if (repositoryModule.isCatalogEnabled()) {
      List<CatalogEntry> categories=catalogManager.getCatalogEntriesReferencing(entry);
      List<String> categoriesLink=new ArrayList<>(categories.size());
      for (      CatalogEntry category : categories) {
        String id=""String_Node_Str"" + ++cmpcount;
        String title=category.getParent().getName();
        FormLink catLink=uifactory.addFormLink(id,""String_Node_Str"",title,null,layoutCont,Link.LINK | Link.NONTRANSLATED);
        catLink.setUserObject(category.getKey());
        categoriesLink.add(id);
      }
      layoutCont.contextPut(""String_Node_Str"",categoriesLink);
    }
    if (!guestOnly) {
      boolean marked;
      if (row == null) {
        marked=markManager.isMarked(entry,getIdentity(),null);
      }
 else {
        marked=row.isMarked();
      }
      markLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",marked ? ""String_Node_Str"" : ""String_Node_Str"",null,layoutCont,Link.LINK);
      markLink.setElementCssClass(""String_Node_Str"");
      markLink.setIconLeftCSS(marked ? Mark.MARK_CSS_LARGE : Mark.MARK_ADD_CSS_LARGE);
    }
    Integer myRating;
    if (row == null) {
      myRating=userRatingsDao.getRatingValue(getIdentity(),entry,null);
    }
 else {
      myRating=row.getMyRating();
    }
    RepositoryEntryStatistics statistics=entry.getStatistics();
    Double averageRating=statistics.getRating();
    long numOfRatings=statistics.getNumOfRatings();
    float ratingValue=myRating == null ? 0f : myRating.floatValue();
    float averageRatingValue=averageRating == null ? 0f : averageRating.floatValue();
    ratingEl=new RatingWithAverageFormItem(""String_Node_Str"",ratingValue,averageRatingValue,5,numOfRatings);
    ratingEl.setEnabled(!guestOnly);
    layoutCont.add(""String_Node_Str"",ratingEl);
    long numOfComments=statistics.getNumOfComments();
    String title=""String_Node_Str"" + numOfComments + ""String_Node_Str"";
    commentsLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",title,null,layoutCont,Link.NONTRANSLATED);
    commentsLink.setCustomEnabledLinkCSS(""String_Node_Str"");
    String css=numOfComments > 0 ? ""String_Node_Str"" : ""String_Node_Str"";
    commentsLink.setIconLeftCSS(css);
    List<String> roles=repositoryService.getRoles(getIdentity(),entry);
    boolean isMember=roles.contains(GroupRoles.owner.name()) || roles.contains(GroupRoles.coach.name()) || roles.contains(GroupRoles.participant.name());
    if (isMember) {
      Boolean isAuthor=Boolean.valueOf(roles.contains(GroupRoles.owner.name()));
      layoutCont.contextPut(""String_Node_Str"",isAuthor);
    }
    layoutCont.contextPut(""String_Node_Str"",ureq.getUserSession().getRoles());
    String accessI18n=null;
    List<PriceMethod> types=new ArrayList<PriceMethod>();
    if (entry.isMembersOnly()) {
      types.add(new PriceMethod(""String_Node_Str"",""String_Node_Str"",translate(""String_Node_Str"")));
      if (isMember) {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
        startLink.setIconRightCSS(""String_Node_Str"");
        startLink.setPrimary(true);
      }
      accessI18n=translate(""String_Node_Str"");
    }
 else {
      AccessResult acResult=acService.isAccessible(entry,getIdentity(),false);
      if (acResult.isAccessible()) {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
      }
 else       if (acResult.getAvailableMethods().size() > 0) {
        for (        OfferAccess access : acResult.getAvailableMethods()) {
          AccessMethod method=access.getMethod();
          String type=(method.getMethodCssClass() + ""String_Node_Str"").intern();
          Price p=access.getOffer().getPrice();
          String price=p == null || p.isEmpty() ? ""String_Node_Str"" : PriceFormat.fullFormat(p);
          AccessMethodHandler amh=acModule.getAccessMethodHandler(method.getType());
          String displayName=amh.getMethodName(getLocale());
          types.add(new PriceMethod(price,type,displayName));
        }
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setCustomEnabledLinkCSS(""String_Node_Str"");
        startLink.setElementCssClass(""String_Node_Str"");
      }
 else {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setEnabled(false);
        startLink.setElementCssClass(""String_Node_Str"");
      }
      startLink.setIconRightCSS(""String_Node_Str"");
      startLink.setPrimary(true);
switch (entry.getAccess()) {
case 0:
        accessI18n=""String_Node_Str"";
      break;
case 1:
    accessI18n=translate(""String_Node_Str"");
  break;
case 2:
accessI18n=translate(""String_Node_Str"");
break;
case 3:
accessI18n=translate(""String_Node_Str"");
break;
case 4:
accessI18n=translate(""String_Node_Str"");
break;
}
}
layoutCont.contextPut(""String_Node_Str"",accessI18n);
if (!types.isEmpty()) {
layoutCont.contextPut(""String_Node_Str"",types);
}
if (isMember) {
SearchBusinessGroupParams params=new SearchBusinessGroupParams(getIdentity(),true,true);
List<BusinessGroup> groups=businessGroupService.findBusinessGroups(params,entry,0,-1);
List<String> groupLinkNames=new ArrayList<>(groups.size());
for (BusinessGroup group : groups) {
String groupLinkName=""String_Node_Str"" + ++cmpcount;
FormLink link=uifactory.addFormLink(groupLinkName,""String_Node_Str"",group.getName(),null,layoutCont,Link.LINK | Link.NONTRANSLATED);
link.setUserObject(group.getKey());
groupLinkNames.add(groupLinkName);
}
layoutCont.contextPut(""String_Node_Str"",groupLinkNames);
}
boolean passed=false;
boolean failed=false;
String score=null;
if (row != null) {
passed=row.isPassed();
failed=row.isFailed();
score=row.getScore();
}
 else {
UserEfficiencyStatement statement=effManager.getUserEfficiencyStatementLight(entry.getKey(),getIdentity());
if (statement != null) {
Boolean p=statement.getPassed();
if (p != null) {
passed=p.booleanValue();
failed=!p.booleanValue();
}
Float scoreVal=statement.getScore();
if (scoreVal != null) {
score=AssessmentHelper.getRoundedScore(scoreVal);
}
}
}
layoutCont.contextPut(""String_Node_Str"",passed);
layoutCont.contextPut(""String_Node_Str"",failed);
layoutCont.contextPut(""String_Node_Str"",score);
Date recentLaunch=null;
if (row != null) {
recentLaunch=row.getRecentLaunch();
}
 else {
Long courseResId=entry.getOlatResource().getResourceableId();
UserCourseInformations infos=userCourseInfosManager.getUserCourseInformations(courseResId,getIdentity());
if (infos != null) {
recentLaunch=infos.getRecentLaunch();
}
}
layoutCont.contextPut(""String_Node_Str"",recentLaunch);
String numUsers;
OLATResourceable ores=entry.getOlatResource();
int cnt=0;
OLATResourceable courseRunOres=OresHelper.createOLATResourceableInstance(RunMainController.ORES_TYPE_COURSE_RUN,entry.getOlatResource().getResourceableId());
if (ores != null) cnt=coordinatorManager.getCoordinator().getEventBus().getListeningIdentityCntFor(courseRunOres);
numUsers=String.valueOf(cnt);
layoutCont.contextPut(""String_Node_Str"",numUsers);
String referenceDetails=referenceManager.getReferencesToSummary(entry.getOlatResource(),getLocale());
if (referenceDetails != null) {
layoutCont.contextPut(""String_Node_Str"",referenceDetails);
}
String url=Settings.getServerContextPathURI() + ""String_Node_Str"" + entry.getKey();
layoutCont.contextPut(""String_Node_Str"",url);
layoutCont.contextPut(""String_Node_Str"",(entry.getAccess() >= RepositoryEntry.ACC_USERS_GUESTS ? Boolean.TRUE : Boolean.FALSE));
List<Identity> authors=repositoryService.getMembers(entry,GroupRoles.owner.name());
List<String> authorLinkNames=new ArrayList<String>(authors.size());
int counter=0;
for (Identity author : authors) {
String authorName=userManager.getUserDisplayName(author);
FormLink authorLink=uifactory.addFormLink(""String_Node_Str"" + counter,""String_Node_Str"",authorName,null,formLayout,Link.NONTRANSLATED | Link.LINK);
authorLink.setUserObject(author.getKey());
authorLinkNames.add(authorLink.getComponent().getComponentName());
}
layoutCont.contextPut(""String_Node_Str"",authorLinkNames);
}
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  int cmpcount=0;
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    layoutCont.contextPut(""String_Node_Str"",entry);
    layoutCont.contextPut(""String_Node_Str"",new Boolean(guestOnly));
    String cssClass=RepositoyUIFactory.getIconCssClass(entry);
    layoutCont.contextPut(""String_Node_Str"",cssClass);
    RepositoryHandler handler=RepositoryHandlerFactory.getInstance().getRepositoryHandler(entry);
    VFSContainer mediaContainer=handler.getMediaContainer(entry);
    if (mediaContainer != null) {
      baseUrl=registerMapper(ureq,new VFSContainerMapper(mediaContainer.getParentContainer()));
    }
    setText(entry.getDescription(),""String_Node_Str"",layoutCont);
    setText(entry.getRequirements(),""String_Node_Str"",layoutCont);
    setText(entry.getObjectives(),""String_Node_Str"",layoutCont);
    setText(entry.getCredits(),""String_Node_Str"",layoutCont);
    VFSLeaf movie=repositoryService.getIntroductionMovie(entry);
    VFSLeaf image=repositoryService.getIntroductionImage(entry);
    if (image != null || movie != null) {
      ImageComponent ic=new ImageComponent(ureq.getUserSession(),""String_Node_Str"");
      if (movie != null) {
        ic.setMedia(movie);
        ic.setMaxWithAndHeightToFitWithin(500,300);
        if (image != null) {
          ic.setPoster(image);
        }
      }
 else {
        ic.setMedia(image);
        ic.setMaxWithAndHeightToFitWithin(500,300);
      }
      layoutCont.put(""String_Node_Str"",ic);
    }
    if (repositoryModule.isCatalogEnabled()) {
      List<CatalogEntry> categories=catalogManager.getCatalogEntriesReferencing(entry);
      List<String> categoriesLink=new ArrayList<>(categories.size());
      for (      CatalogEntry category : categories) {
        String id=""String_Node_Str"" + ++cmpcount;
        String title=category.getParent().getName();
        FormLink catLink=uifactory.addFormLink(id,""String_Node_Str"",title,null,layoutCont,Link.LINK | Link.NONTRANSLATED);
        catLink.setUserObject(category.getKey());
        categoriesLink.add(id);
      }
      layoutCont.contextPut(""String_Node_Str"",categoriesLink);
    }
    if (!guestOnly) {
      boolean marked;
      if (row == null) {
        marked=markManager.isMarked(entry,getIdentity(),null);
      }
 else {
        marked=row.isMarked();
      }
      markLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",marked ? ""String_Node_Str"" : ""String_Node_Str"",null,layoutCont,Link.LINK);
      markLink.setElementCssClass(""String_Node_Str"");
      markLink.setIconLeftCSS(marked ? Mark.MARK_CSS_LARGE : Mark.MARK_ADD_CSS_LARGE);
    }
    Integer myRating;
    if (row == null) {
      myRating=userRatingsDao.getRatingValue(getIdentity(),entry,null);
    }
 else {
      myRating=row.getMyRating();
    }
    RepositoryEntryStatistics statistics=entry.getStatistics();
    Double averageRating=statistics.getRating();
    long numOfRatings=statistics.getNumOfRatings();
    float ratingValue=myRating == null ? 0f : myRating.floatValue();
    float averageRatingValue=averageRating == null ? 0f : averageRating.floatValue();
    ratingEl=new RatingWithAverageFormItem(""String_Node_Str"",ratingValue,averageRatingValue,5,numOfRatings);
    ratingEl.setEnabled(!guestOnly);
    layoutCont.add(""String_Node_Str"",ratingEl);
    long numOfComments=statistics.getNumOfComments();
    String title=""String_Node_Str"" + numOfComments + ""String_Node_Str"";
    commentsLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",title,null,layoutCont,Link.NONTRANSLATED);
    commentsLink.setCustomEnabledLinkCSS(""String_Node_Str"");
    String css=numOfComments > 0 ? ""String_Node_Str"" : ""String_Node_Str"";
    commentsLink.setIconLeftCSS(css);
    List<String> roles=repositoryService.getRoles(getIdentity(),entry);
    boolean isMember=roles.contains(GroupRoles.owner.name()) || roles.contains(GroupRoles.coach.name()) || roles.contains(GroupRoles.participant.name());
    if (isMember) {
      Boolean isAuthor=Boolean.valueOf(roles.contains(GroupRoles.owner.name()));
      layoutCont.contextPut(""String_Node_Str"",isAuthor);
    }
    layoutCont.contextPut(""String_Node_Str"",ureq.getUserSession().getRoles());
    String accessI18n=null;
    List<PriceMethod> types=new ArrayList<PriceMethod>();
    if (entry.isMembersOnly()) {
      types.add(new PriceMethod(""String_Node_Str"",""String_Node_Str"",translate(""String_Node_Str"")));
      if (isMember) {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
        startLink.setIconRightCSS(""String_Node_Str"");
        startLink.setPrimary(true);
      }
      accessI18n=translate(""String_Node_Str"");
    }
 else {
      AccessResult acResult=acService.isAccessible(entry,getIdentity(),false);
      if (acResult.isAccessible()) {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
      }
 else       if (acResult.getAvailableMethods().size() > 0) {
        for (        OfferAccess access : acResult.getAvailableMethods()) {
          AccessMethod method=access.getMethod();
          String type=(method.getMethodCssClass() + ""String_Node_Str"").intern();
          Price p=access.getOffer().getPrice();
          String price=p == null || p.isEmpty() ? ""String_Node_Str"" : PriceFormat.fullFormat(p);
          AccessMethodHandler amh=acModule.getAccessMethodHandler(method.getType());
          String displayName=amh.getMethodName(getLocale());
          types.add(new PriceMethod(price,type,displayName));
        }
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setCustomEnabledLinkCSS(""String_Node_Str"");
        startLink.setElementCssClass(""String_Node_Str"");
      }
 else {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setEnabled(false);
        startLink.setElementCssClass(""String_Node_Str"");
      }
      startLink.setIconRightCSS(""String_Node_Str"");
      startLink.setPrimary(true);
switch (entry.getAccess()) {
case 0:
        accessI18n=""String_Node_Str"";
      break;
case 1:
    accessI18n=translate(""String_Node_Str"");
  break;
case 2:
accessI18n=translate(""String_Node_Str"");
break;
case 3:
accessI18n=translate(""String_Node_Str"");
break;
case 4:
accessI18n=translate(""String_Node_Str"");
break;
}
}
layoutCont.contextPut(""String_Node_Str"",accessI18n);
if (!types.isEmpty()) {
layoutCont.contextPut(""String_Node_Str"",types);
}
if (isMember) {
SearchBusinessGroupParams params=new SearchBusinessGroupParams(getIdentity(),true,true);
List<BusinessGroup> groups=businessGroupService.findBusinessGroups(params,entry,0,-1);
List<String> groupLinkNames=new ArrayList<>(groups.size());
for (BusinessGroup group : groups) {
String groupLinkName=""String_Node_Str"" + ++cmpcount;
FormLink link=uifactory.addFormLink(groupLinkName,""String_Node_Str"",group.getName(),null,layoutCont,Link.LINK | Link.NONTRANSLATED);
link.setUserObject(group.getKey());
groupLinkNames.add(groupLinkName);
}
layoutCont.contextPut(""String_Node_Str"",groupLinkNames);
}
boolean passed=false;
boolean failed=false;
String score=null;
if (row != null) {
passed=row.isPassed();
failed=row.isFailed();
score=row.getScore();
}
 else {
UserEfficiencyStatement statement=effManager.getUserEfficiencyStatementLight(entry.getKey(),getIdentity());
if (statement != null) {
Boolean p=statement.getPassed();
if (p != null) {
passed=p.booleanValue();
failed=!p.booleanValue();
}
Float scoreVal=statement.getScore();
if (scoreVal != null) {
score=AssessmentHelper.getRoundedScore(scoreVal);
}
}
}
layoutCont.contextPut(""String_Node_Str"",passed);
layoutCont.contextPut(""String_Node_Str"",failed);
layoutCont.contextPut(""String_Node_Str"",score);
Date recentLaunch=null;
if (row != null) {
recentLaunch=row.getRecentLaunch();
}
 else {
Long courseResId=entry.getOlatResource().getResourceableId();
UserCourseInformations infos=userCourseInfosManager.getUserCourseInformations(courseResId,getIdentity());
if (infos != null) {
recentLaunch=infos.getRecentLaunch();
}
}
layoutCont.contextPut(""String_Node_Str"",recentLaunch);
String numUsers;
OLATResourceable ores=entry.getOlatResource();
int cnt=0;
OLATResourceable courseRunOres=OresHelper.createOLATResourceableInstance(RunMainController.ORES_TYPE_COURSE_RUN,entry.getOlatResource().getResourceableId());
if (ores != null) cnt=coordinatorManager.getCoordinator().getEventBus().getListeningIdentityCntFor(courseRunOres);
numUsers=String.valueOf(cnt);
layoutCont.contextPut(""String_Node_Str"",numUsers);
String referenceDetails=referenceManager.getReferencesToSummary(entry.getOlatResource(),getLocale());
if (referenceDetails != null) {
layoutCont.contextPut(""String_Node_Str"",referenceDetails);
}
String url=Settings.getServerContextPathURI() + ""String_Node_Str"" + entry.getKey();
layoutCont.contextPut(""String_Node_Str"",url);
layoutCont.contextPut(""String_Node_Str"",(entry.getAccess() >= RepositoryEntry.ACC_USERS_GUESTS ? Boolean.TRUE : Boolean.FALSE));
List<Identity> authors=repositoryService.getMembers(entry,GroupRoles.owner.name());
List<String> authorLinkNames=new ArrayList<String>(authors.size());
Set<Long> duplicates=new HashSet<>(authors.size() * 2 + 1);
int counter=0;
for (Identity author : authors) {
if (!duplicates.contains(author.getKey())) {
String authorName=userManager.getUserDisplayName(author);
FormLink authorLink=uifactory.addFormLink(""String_Node_Str"" + ++counter,""String_Node_Str"",authorName,null,formLayout,Link.NONTRANSLATED | Link.LINK);
authorLink.setUserObject(author.getKey());
authorLinkNames.add(authorLink.getComponent().getComponentName());
duplicates.add(author.getKey());
}
}
layoutCont.contextPut(""String_Node_Str"",authorLinkNames);
}
}"
69583,"private void initializeBase(UserRequest ureq,WindowManager winman,ComponentCollection mainPanel){
  mainVc.contextPut(""String_Node_Str"",mainPanel.getDispatchID());
  BaseSecurityModule securityModule=CoreSpringFactory.getImpl(BaseSecurityModule.class);
  mainVc.contextPut(""String_Node_Str"",securityModule.isForceTopFrame());
  mainVc.contextPut(""String_Node_Str"",bodyCssClasses);
  Window w=wbo.getWindow();
  mainVc.put(""String_Node_Str"",w.getJsCssRawHtmlHeader());
  jsServerC=wbo.createAJAXController(ureq);
  mainVc.put(""String_Node_Str"",jsServerC.getInitialComponent());
  mainVc.contextPut(""String_Node_Str"",""String_Node_Str"");
  mainVc.contextPut(""String_Node_Str"",ureq.getLocale().toString());
  mainVc.contextPut(""String_Node_Str"",w.getGuiTheme());
  mainVc.contextPut(""String_Node_Str"",winman.getGlobalSettings());
  mainVc.contextPut(""String_Node_Str"",winman.isForScreenReader());
  contentPanel=new Panel(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",contentPanel);
  mainVc.contextPut(""String_Node_Str"",w.getDispatchID());
  mainVc.contextPut(""String_Node_Str"",Settings.getVersion());
  if (wbo.isDebuging()) {
    debugC=wbo.createDebugDispatcherController(ureq,getWindowControl());
    mainVc.put(""String_Node_Str"",debugC.getInitialComponent());
  }
  if (ureq.getUserSession().isAuthenticated() && (ureq.getUserSession().getRoles().isOLATAdmin() || ureq.getUserSession().getRoles().isUserManager()) && (I18nModule.isTransToolEnabled() || I18nModule.isOverlayEnabled())) {
    inlineTranslationC=wbo.createInlineTranslationDispatcherController(ureq,getWindowControl());
    Preferences guiPrefs=ureq.getUserSession().getGuiPreferences();
    Boolean isInlineTranslationEnabled=(Boolean)guiPrefs.get(I18nModule.class,I18nModule.GUI_PREFS_INLINE_TRANSLATION_ENABLED,Boolean.FALSE);
    I18nManager.getInstance().setMarkLocalizedStringsEnabled(ureq.getUserSession(),isInlineTranslationEnabled);
    mainVc.put(""String_Node_Str"",inlineTranslationC.getInitialComponent());
  }
  if (wbo.isDebuging()) {
    developmentC=wbo.createDevelopmentController(ureq,getWindowControl());
    mainVc.put(""String_Node_Str"",developmentC.getInitialComponent());
  }
  jsLoggerC=new JavaScriptTracingController(ureq,getWindowControl());
  mainVc.put(""String_Node_Str"",jsLoggerC.getInitialComponent());
  mainVc.contextPut(""String_Node_Str"",BaseChiefController.jsTranslationMapperPath);
  w.setContentPane(mainPanel);
}","private void initializeBase(UserRequest ureq,WindowManager winman,ComponentCollection mainPanel){
  mainVc.contextPut(""String_Node_Str"",mainPanel.getDispatchID());
  BaseSecurityModule securityModule=CoreSpringFactory.getImpl(BaseSecurityModule.class);
  mainVc.contextPut(""String_Node_Str"",securityModule.isForceTopFrame());
  mainVc.contextPut(""String_Node_Str"",bodyCssClasses);
  Window w=wbo.getWindow();
  mainVc.put(""String_Node_Str"",w.getJsCssRawHtmlHeader());
  jsServerC=wbo.createAJAXController(ureq);
  mainVc.put(""String_Node_Str"",jsServerC.getInitialComponent());
  mainVc.contextPut(""String_Node_Str"",""String_Node_Str"");
  mainVc.contextPut(""String_Node_Str"",ureq.getLocale().toString());
  mainVc.contextPut(""String_Node_Str"",w.getGuiTheme());
  mainVc.contextPut(""String_Node_Str"",winman.getGlobalSettings());
  mainVc.contextPut(""String_Node_Str"",winman.isForScreenReader());
  addThemeJS();
  contentPanel=new Panel(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",contentPanel);
  mainVc.contextPut(""String_Node_Str"",w.getDispatchID());
  mainVc.contextPut(""String_Node_Str"",Settings.getVersion());
  if (wbo.isDebuging()) {
    debugC=wbo.createDebugDispatcherController(ureq,getWindowControl());
    mainVc.put(""String_Node_Str"",debugC.getInitialComponent());
  }
  if (ureq.getUserSession().isAuthenticated() && (ureq.getUserSession().getRoles().isOLATAdmin() || ureq.getUserSession().getRoles().isUserManager()) && (I18nModule.isTransToolEnabled() || I18nModule.isOverlayEnabled())) {
    inlineTranslationC=wbo.createInlineTranslationDispatcherController(ureq,getWindowControl());
    Preferences guiPrefs=ureq.getUserSession().getGuiPreferences();
    Boolean isInlineTranslationEnabled=(Boolean)guiPrefs.get(I18nModule.class,I18nModule.GUI_PREFS_INLINE_TRANSLATION_ENABLED,Boolean.FALSE);
    I18nManager.getInstance().setMarkLocalizedStringsEnabled(ureq.getUserSession(),isInlineTranslationEnabled);
    mainVc.put(""String_Node_Str"",inlineTranslationC.getInitialComponent());
  }
  if (wbo.isDebuging()) {
    developmentC=wbo.createDevelopmentController(ureq,getWindowControl());
    mainVc.put(""String_Node_Str"",developmentC.getInitialComponent());
  }
  jsLoggerC=new JavaScriptTracingController(ureq,getWindowControl());
  mainVc.put(""String_Node_Str"",jsLoggerC.getInitialComponent());
  mainVc.contextPut(""String_Node_Str"",BaseChiefController.jsTranslationMapperPath);
  w.setContentPane(mainPanel);
}"
69584,"private void initialize(UserRequest ureq){
  mainVc=createVelocityContainer(""String_Node_Str"");
  mainVc.contextPut(""String_Node_Str"",screenMode);
  navSitesVc=createVelocityContainer(""String_Node_Str"");
  navSitesVc.setDomReplacementWrapperRequired(false);
  mainVc.put(""String_Node_Str"",navSitesVc);
  navTabsVc=createVelocityContainer(""String_Node_Str"");
  navTabsVc.setDomReplacementWrapperRequired(false);
  mainVc.put(""String_Node_Str"",navTabsVc);
  guimsgVc=createVelocityContainer(""String_Node_Str"");
  guimsgVc.contextPut(""String_Node_Str"",guiMessage);
  guimsgHolder=new Panel(""String_Node_Str"");
  guimsgHolder.setContent(guimsgPanel);
  currentMsgHolder=guimsgHolder;
  mainVc.put(""String_Node_Str"",guimsgHolder);
  cssHolder=new Panel(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",cssHolder);
  stickymsgVc=createVelocityContainer(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",stickymsgVc);
  updateStickyMessage();
  dtabs=new ArrayList<>();
  dtabsLinkNames=new ArrayList<>();
  dtabsControllers=new ArrayList<>();
  userTools=new HomeSite(null);
  sites=baseFullWebappControllerParts.getSiteInstances(ureq,getWindowControl());
  if (sites != null && sites.size() == 0) {
    sites=null;
  }
  List<String> siteLinks=new ArrayList<>();
  if (sites != null) {
    for (Iterator<SiteInstance> iterator=sites.iterator(); iterator.hasNext(); ) {
      SiteInstance si=iterator.next();
      NavElement navEl=si.getNavElement();
      if (navEl != null) {
        String linkName=""String_Node_Str"" + CodeHelper.getRAMUniqueID();
        siteLinks.add(linkName);
        Link link=LinkFactory.createCustomLink(linkName,""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,navSitesVc,this);
        link.setCustomDisplayText(navEl.getTitle());
        link.setTitle(navEl.getDescription());
        link.setUserObject(si);
        Character accessKey=navEl.getAccessKey();
        if (accessKey != null && StringHelper.containsNonWhitespace(accessKey.toString())) {
          link.setAccessKey(accessKey.toString());
        }
      }
    }
  }
  navSitesVc.contextPut(""String_Node_Str"",siteLinks);
  navSitesVc.contextPut(""String_Node_Str"",this);
  navTabsVc.contextPut(""String_Node_Str"",dtabs);
  navTabsVc.contextPut(""String_Node_Str"",dtabsLinkNames);
  navTabsVc.contextPut(""String_Node_Str"",this);
  Controller headerCtr=baseFullWebappControllerParts.createHeaderController(ureq,getWindowControl());
  if (headerCtr != null) {
    listenTo(headerCtr);
    Component headerCmp=headerCtr.getInitialComponent();
    mainVc.put(""String_Node_Str"",headerCmp);
  }
  topnavCtr=baseFullWebappControllerParts.createTopNavController(ureq,getWindowControl());
  if (topnavCtr != null) {
    listenTo(topnavCtr);
    Component topNavCmp=topnavCtr.getInitialComponent();
    mainVc.put(""String_Node_Str"",topNavCmp);
  }
  modalPanel=new Panel(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",modalPanel);
  main=new Panel(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",main);
  footerCtr=baseFullWebappControllerParts.createFooterController(ureq,getWindowControl());
  if (footerCtr != null) {
    listenTo(footerCtr);
    Component footerCmp=footerCtr.getInitialComponent();
    mainVc.put(""String_Node_Str"",footerCmp);
  }
  contentCtrl=baseFullWebappControllerParts.getContentController(ureq,getWindowControl());
  if (contentCtrl != null) {
    listenTo(contentCtrl);
    GuiStack gs=getWindowControl().getWindowBackOffice().createGuiStack(contentCtrl.getInitialComponent());
    setGuiStack(gs);
    main.setContent(contentCtrl.getInitialComponent());
  }
 else {
    main.setContent(TextFactory.createTextComponentFromString(""String_Node_Str"",""String_Node_Str"",null,false,null));
    GuiStack gs=getWindowControl().getWindowBackOffice().createGuiStack(new Panel(""String_Node_Str""));
    setGuiStack(gs);
  }
  setWindowSettings(getWindowControl().getWindowBackOffice().getWindowSettings());
  addCustomThemeJS();
}","private void initialize(UserRequest ureq){
  mainVc=createVelocityContainer(""String_Node_Str"");
  mainVc.contextPut(""String_Node_Str"",screenMode);
  navSitesVc=createVelocityContainer(""String_Node_Str"");
  navSitesVc.setDomReplacementWrapperRequired(false);
  mainVc.put(""String_Node_Str"",navSitesVc);
  navTabsVc=createVelocityContainer(""String_Node_Str"");
  navTabsVc.setDomReplacementWrapperRequired(false);
  mainVc.put(""String_Node_Str"",navTabsVc);
  guimsgVc=createVelocityContainer(""String_Node_Str"");
  guimsgVc.contextPut(""String_Node_Str"",guiMessage);
  guimsgHolder=new Panel(""String_Node_Str"");
  guimsgHolder.setContent(guimsgPanel);
  currentMsgHolder=guimsgHolder;
  mainVc.put(""String_Node_Str"",guimsgHolder);
  cssHolder=new Panel(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",cssHolder);
  stickymsgVc=createVelocityContainer(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",stickymsgVc);
  updateStickyMessage();
  dtabs=new ArrayList<>();
  dtabsLinkNames=new ArrayList<>();
  dtabsControllers=new ArrayList<>();
  userTools=new HomeSite(null);
  sites=baseFullWebappControllerParts.getSiteInstances(ureq,getWindowControl());
  if (sites != null && sites.size() == 0) {
    sites=null;
  }
  List<String> siteLinks=new ArrayList<>();
  if (sites != null) {
    for (Iterator<SiteInstance> iterator=sites.iterator(); iterator.hasNext(); ) {
      SiteInstance si=iterator.next();
      NavElement navEl=si.getNavElement();
      if (navEl != null) {
        String linkName=""String_Node_Str"" + CodeHelper.getRAMUniqueID();
        siteLinks.add(linkName);
        Link link=LinkFactory.createCustomLink(linkName,""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,navSitesVc,this);
        link.setCustomDisplayText(navEl.getTitle());
        link.setTitle(navEl.getDescription());
        link.setUserObject(si);
        Character accessKey=navEl.getAccessKey();
        if (accessKey != null && StringHelper.containsNonWhitespace(accessKey.toString())) {
          link.setAccessKey(accessKey.toString());
        }
      }
    }
  }
  navSitesVc.contextPut(""String_Node_Str"",siteLinks);
  navSitesVc.contextPut(""String_Node_Str"",this);
  navTabsVc.contextPut(""String_Node_Str"",dtabs);
  navTabsVc.contextPut(""String_Node_Str"",dtabsLinkNames);
  navTabsVc.contextPut(""String_Node_Str"",this);
  Controller headerCtr=baseFullWebappControllerParts.createHeaderController(ureq,getWindowControl());
  if (headerCtr != null) {
    listenTo(headerCtr);
    Component headerCmp=headerCtr.getInitialComponent();
    mainVc.put(""String_Node_Str"",headerCmp);
  }
  topnavCtr=baseFullWebappControllerParts.createTopNavController(ureq,getWindowControl());
  if (topnavCtr != null) {
    listenTo(topnavCtr);
    Component topNavCmp=topnavCtr.getInitialComponent();
    mainVc.put(""String_Node_Str"",topNavCmp);
  }
  modalPanel=new Panel(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",modalPanel);
  main=new Panel(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",main);
  footerCtr=baseFullWebappControllerParts.createFooterController(ureq,getWindowControl());
  if (footerCtr != null) {
    listenTo(footerCtr);
    Component footerCmp=footerCtr.getInitialComponent();
    mainVc.put(""String_Node_Str"",footerCmp);
  }
  contentCtrl=baseFullWebappControllerParts.getContentController(ureq,getWindowControl());
  if (contentCtrl != null) {
    listenTo(contentCtrl);
    GuiStack gs=getWindowControl().getWindowBackOffice().createGuiStack(contentCtrl.getInitialComponent());
    setGuiStack(gs);
    main.setContent(contentCtrl.getInitialComponent());
  }
 else {
    main.setContent(TextFactory.createTextComponentFromString(""String_Node_Str"",""String_Node_Str"",null,false,null));
    GuiStack gs=getWindowControl().getWindowBackOffice().createGuiStack(new Panel(""String_Node_Str""));
    setGuiStack(gs);
  }
  setWindowSettings(getWindowControl().getWindowBackOffice().getWindowSettings());
}"
69585,"/** 
 * Add a custom css to the view and mark it as the curent custom CSS.
 * @param customCSS
 */
@Override public void addCurrentCustomCSSToView(CustomCSS customCSS){
  if (customCSS == null)   return;
  Window myWindow=getWindowControl().getWindowBackOffice().getWindow();
  myWindow.setCustomCSS(customCSS);
  cssHolder.setContent(customCSS.getJSAndCSSComponent());
  addCustomThemeJS();
}","/** 
 * Add a custom css to the view and mark it as the current custom CSS.
 * @param customCSS
 */
@Override public void addCurrentCustomCSSToView(CustomCSS customCSS){
  if (customCSS == null)   return;
  Window myWindow=getWindowControl().getWindowBackOffice().getWindow();
  myWindow.setCustomCSS(customCSS);
  cssHolder.setContent(customCSS.getJSAndCSSComponent());
}"
69586,"private RuleWrapper initRuleWrapper(int pos,Rule rule,FormItemContainer formLayout){
  int i=counter.incrementAndGet();
  RuleWrapper wrapper=new RuleWrapper(rule);
  wrapper.setPosition(pos);
  SingleSelection roleEl=uifactory.addDropdownSingleselect(""String_Node_Str"" + i,null,formLayout,roleKeys,roleValues,null);
  String role=rule.getRole();
  for (int j=roleKeys.length; j-- > 0; ) {
    if (roleKeys[j].equals(role)) {
      roleEl.select(roleKeys[j],true);
    }
  }
  wrapper.setRoleEl(roleEl);
  SingleSelection attrNameEl=uifactory.addDropdownSingleselect(""String_Node_Str"" + i,null,formLayout,attrKeys,attrValues,null);
  String userAttributeKey=rule.getUserAttributeKey();
  for (int j=attrKeys.length; j-- > 0; ) {
    if (attrKeys[j].equals(userAttributeKey)) {
      attrNameEl.select(attrKeys[j],true);
    }
  }
  wrapper.setAttrNameEl(attrNameEl);
  TextElement valEl=uifactory.addTextElement(""String_Node_Str"" + i,null,256,""String_Node_Str"",formLayout);
  valEl.setValue(rule.getUserAttributeValue());
  wrapper.setAttrValueEl(valEl);
  TextElement landingPageEl=uifactory.addTextElement(""String_Node_Str"" + i,null,256,""String_Node_Str"",formLayout);
  landingPageEl.setValue(rule.getLandingPath());
  wrapper.setLandingPageEl(landingPageEl);
  formLayout.add(landingPageEl);
  DropdownItem chooser=new DropdownItem(""String_Node_Str"" + i,RCols.landingPageChooser.i18nKey(),getTranslator());
  chooser.setButton(true);
  chooser.setEmbbeded(true);
  fillChooser(wrapper,chooser,formLayout);
  wrapper.setLandingPageChooser(chooser);
  return wrapper;
}","private RuleWrapper initRuleWrapper(int pos,Rule rule,FormItemContainer formLayout){
  int i=counter.incrementAndGet();
  RuleWrapper wrapper=new RuleWrapper(rule);
  wrapper.setPosition(pos);
  SingleSelection roleEl=uifactory.addDropdownSingleselect(""String_Node_Str"" + i,null,formLayout,roleKeys,roleValues,null);
  String role=rule.getRole();
  for (int j=roleKeys.length; j-- > 0; ) {
    if (roleKeys[j].equals(role)) {
      roleEl.select(roleKeys[j],true);
    }
  }
  wrapper.setRoleEl(roleEl);
  SingleSelection attrNameEl=uifactory.addDropdownSingleselect(""String_Node_Str"" + i,null,formLayout,attrKeys,attrValues,null);
  String userAttributeKey=rule.getUserAttributeKey();
  for (int j=attrKeys.length; j-- > 0; ) {
    if (attrKeys[j].equals(userAttributeKey)) {
      attrNameEl.select(attrKeys[j],true);
    }
  }
  wrapper.setAttrNameEl(attrNameEl);
  TextElement valEl=uifactory.addTextElement(""String_Node_Str"" + i,null,256,""String_Node_Str"",formLayout);
  valEl.setValue(rule.getUserAttributeValue());
  wrapper.setAttrValueEl(valEl);
  TextElement landingPageEl=uifactory.addTextElement(""String_Node_Str"" + i,null,256,""String_Node_Str"",formLayout);
  landingPageEl.setValue(rule.getLandingPath());
  wrapper.setLandingPageEl(landingPageEl);
  formLayout.add(landingPageEl);
  FormLink chooser=uifactory.addFormLink(""String_Node_Str"" + i,""String_Node_Str"",RCols.landingPageChooser.i18nKey(),null,formLayout,Link.BUTTON);
  chooser.setIconRightCSS(""String_Node_Str"");
  chooser.setUserObject(wrapper);
  wrapper.setLandingPageChooser(chooser);
  return wrapper;
}"
69587,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormTitle(""String_Node_Str"");
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(RCols.position.i18nKey(),RCols.position.ordinal()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(RCols.role.i18nKey(),RCols.role.ordinal()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(RCols.userAttributeKey.i18nKey(),RCols.userAttributeKey.ordinal()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(RCols.userAttributeValue.i18nKey(),RCols.userAttributeValue.ordinal()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(RCols.landingPage.i18nKey(),RCols.landingPage.ordinal()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(RCols.landingPageChooser.i18nKey(),RCols.landingPageChooser.ordinal()));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",-1,""String_Node_Str"",new StaticFlexiCellRenderer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",-1,""String_Node_Str"",new StaticFlexiCellRenderer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str""));
  Rules rules=lpModule.getRules();
  List<Rule> ruleList=new ArrayList<>(rules.getRules());
  if (ruleList.isEmpty()) {
    ruleList.add(new Rule());
  }
  List<RuleWrapper> wrappers=new ArrayList<>();
  int i=0;
  for (  Rule rule : ruleList) {
    wrappers.add(initRuleWrapper(++i,rule,formLayout));
  }
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    layoutCont.contextPut(""String_Node_Str"",wrappers);
  }
  model=new RulesDataModel(columnsModel,wrappers);
  tableEl=uifactory.addTableElement(getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  tableEl.setCustomizeColumns(false);
  tableEl.setRendererType(FlexiTableRendererType.classic);
  FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  formLayout.add(""String_Node_Str"",buttonLayout);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormTitle(""String_Node_Str"");
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(RCols.position.i18nKey(),RCols.position.ordinal()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(RCols.role.i18nKey(),RCols.role.ordinal()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(RCols.userAttributeKey.i18nKey(),RCols.userAttributeKey.ordinal()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(RCols.userAttributeValue.i18nKey(),RCols.userAttributeValue.ordinal()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(RCols.landingPage.i18nKey(),RCols.landingPage.ordinal()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(RCols.landingPageChooser.i18nKey(),RCols.landingPageChooser.ordinal()));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",-1,""String_Node_Str"",new StaticFlexiCellRenderer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",-1,""String_Node_Str"",new StaticFlexiCellRenderer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str""));
  Rules rules=lpModule.getRules();
  List<Rule> ruleList=new ArrayList<>(rules.getRules());
  if (ruleList.isEmpty()) {
    ruleList.add(new Rule());
  }
  List<RuleWrapper> wrappers=new ArrayList<>();
  int i=0;
  for (  Rule rule : ruleList) {
    wrappers.add(initRuleWrapper(++i,rule,formLayout));
  }
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    layoutCont.contextPut(""String_Node_Str"",wrappers);
  }
  model=new RulesDataModel(columnsModel,wrappers);
  tableEl=uifactory.addTableElement(getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  tableEl.setCustomizeColumns(false);
  tableEl.setRendererType(FlexiTableRendererType.classic);
  FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  formLayout.add(""String_Node_Str"",buttonLayout);
  saveButton=uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout);
}"
69588,"@Override protected void formInnerEvent(UserRequest ureq,FormItem source,FormEvent event){
  if (source == tableEl) {
    if (event instanceof SelectionEvent) {
      SelectionEvent se=(SelectionEvent)event;
      RuleWrapper row=model.getObject(se.getIndex());
      if (""String_Node_Str"".equals(se.getCommand())) {
        moveUp(row);
      }
 else       if (""String_Node_Str"".equals(se.getCommand())) {
        moveDown(row);
      }
 else       if (""String_Node_Str"".equals(se.getCommand())) {
        addRow(row);
      }
 else       if (""String_Node_Str"".equals(se.getCommand())) {
        deleteRow(row);
      }
      tableEl.reset();
      tableEl.getComponent().setDirty(true);
    }
  }
 else   if (source instanceof FormLink && source.getUserObject() instanceof RuleWrapper) {
    RuleWrapper rule=(RuleWrapper)source.getUserObject();
    String cmd=((FormLink)source).getCmd();
    if (""String_Node_Str"".equals(cmd)) {
    }
 else     if (""String_Node_Str"".equals(cmd)) {
    }
 else {
      LandingPages lp=LandingPages.landingPageFromCmd(cmd);
      if (lp != null) {
        rule.getLandingPageEl().setValue(lp.businessPath());
      }
    }
  }
  super.formInnerEvent(ureq,source,event);
}","@Override protected void formInnerEvent(UserRequest ureq,FormItem source,FormEvent event){
  if (source == tableEl) {
    if (event instanceof SelectionEvent) {
      SelectionEvent se=(SelectionEvent)event;
      RuleWrapper row=model.getObject(se.getIndex());
      if (""String_Node_Str"".equals(se.getCommand())) {
        moveUp(row);
      }
 else       if (""String_Node_Str"".equals(se.getCommand())) {
        moveDown(row);
      }
 else       if (""String_Node_Str"".equals(se.getCommand())) {
        addRow(row);
      }
 else       if (""String_Node_Str"".equals(se.getCommand())) {
        deleteRow(row);
      }
      tableEl.reset();
      tableEl.getComponent().setDirty(true);
    }
  }
 else   if (source instanceof FormLink && source.getUserObject() instanceof RuleWrapper) {
    RuleWrapper rule=(RuleWrapper)source.getUserObject();
    String cmd=((FormLink)source).getCmd();
    if (""String_Node_Str"".equals(cmd)) {
      FormLink link=(FormLink)source;
      openChooser(ureq,rule,link);
    }
    saveButton.getComponent().setDirty(false);
    source.getComponent().setDirty(false);
    tableEl.getComponent().setDirty(false);
    flc.setDirty(false);
  }
  super.formInnerEvent(ureq,source,event);
}"
69589,"public DropdownItem getLandingPageChooser(){
  return landingPageChooser;
}","public FormLink getLandingPageChooser(){
  return landingPageChooser;
}"
69590,"public void setLandingPageChooser(DropdownItem landingPageChooser){
  this.landingPageChooser=landingPageChooser;
}","public void setLandingPageChooser(FormLink landingPageChooser){
  this.landingPageChooser=landingPageChooser;
}"
69591,"/** 
 * Render a single file or folder.
 * @param f			The file or folder to render
 * @param sb		StringOutput to append generated html code
 */
private void appendRenderedFile(FolderComponent fc,VFSItem child,String currentContainerPath,StringOutput sb,URLBuilder ubu,Translator translator,boolean iframePostEnabled,boolean canContainerVersion,int pos){
  boolean canWrite=child.getParentContainer().canWrite() == VFSConstants.YES;
  boolean canDelete=child.getParentContainer().canDelete() == VFSConstants.YES;
  boolean canMail=fc.isCanMail();
  boolean isAbstract=(child instanceof AbstractVirtualContainer);
  Versions versions=null;
  if (canContainerVersion && child instanceof Versionable) {
    Versionable versionable=(Versionable)child;
    if (versionable.getVersions().isVersioned()) {
      versions=versionable.getVersions();
    }
  }
  boolean canVersion=versions != null && !versions.getRevisions().isEmpty();
  boolean canAddToEPortfolio=FolderConfig.isEPortfolioAddEnabled();
  VFSLeaf leaf=null;
  if (child instanceof VFSLeaf) {
    leaf=(VFSLeaf)child;
  }
  boolean isContainer=(leaf == null);
  MetaInfo metaInfo=null;
  if (child instanceof MetaTagged) {
    metaInfo=((MetaTagged)child).getMetaInfo();
  }
  boolean lockedForUser=lockManager.isLockedForMe(child,fc.getIdentityEnvironnement().getIdentity(),fc.getIdentityEnvironnement().getRoles());
  String name=child.getName();
  String pathAndName=currentContainerPath;
  if (pathAndName.length() > 0 && !pathAndName.endsWith(""String_Node_Str""))   pathAndName=pathAndName + ""String_Node_Str"";
  pathAndName=pathAndName + name;
  sb.append(""String_Node_Str"");
  if (canWrite || canDelete || canMail) {
    sb.append(""String_Node_Str"");
    sb.append(FileSelection.FORM_ID);
    sb.append(""String_Node_Str"");
    sb.append(StringHelper.escapeHtml(name));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(pos).append(""String_Node_Str"");
  if (isContainer) {
    ubu.buildURI(sb,null,null,pathAndName,iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
    sb.append(""String_Node_Str"");
    if (iframePostEnabled) {
      StringOutput so=new StringOutput();
      ubu.appendTarget(so);
      sb.append(so.toString());
    }
  }
 else {
    ubu.buildURI(sb,new String[]{PARAM_SERV},new String[]{""String_Node_Str""},pathAndName,AJAXFlags.MODE_NORMAL);
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (isContainer)   sb.append(CSSHelper.CSS_CLASS_FILETYPE_FOLDER);
 else   sb.append(CSSHelper.createFiletypeIconCssClassFor(name));
  sb.append(""String_Node_Str"");
  if (isAbstract)   sb.append(""String_Node_Str"");
  sb.append(name);
  if (isAbstract)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (metaInfo != null) {
    boolean hasMeta=false;
    sb.append(""String_Node_Str"").append(pos).append(""String_Node_Str"");
    if (StringHelper.containsNonWhitespace(metaInfo.getTitle())) {
      String title=StringHelper.escapeHtml(metaInfo.getTitle());
      sb.append(""String_Node_Str"").append(Formatter.escapeDoubleQuotes(title)).append(""String_Node_Str"");
      hasMeta=true;
    }
    if (StringHelper.containsNonWhitespace(metaInfo.getComment())) {
      sb.append(""String_Node_Str"");
      String comment=StringHelper.escapeHtml(metaInfo.getComment());
      sb.append(Formatter.escapeDoubleQuotes(comment));
      sb.append(""String_Node_Str"");
      hasMeta=true;
    }
    if (metaInfo.isThumbnailAvailable()) {
      sb.append(""String_Node_Str"");
      ubu.buildURI(sb,new String[]{PARAM_SERV_THUMBNAIL},new String[]{""String_Node_Str""},pathAndName,AJAXFlags.MODE_NORMAL);
      sb.append(""String_Node_Str"");
      hasMeta=true;
    }
    String author=metaInfo.getCreator();
    if (StringHelper.containsNonWhitespace(author)) {
    }
 else {
      author=metaInfo.getAuthor();
      if (!""String_Node_Str"".equals(author)) {
        author=UserManager.getInstance().getUserDisplayName(author);
      }
 else {
        author=null;
      }
    }
    author=StringHelper.escapeHtml(author);
    if (StringHelper.containsNonWhitespace(author)) {
      sb.append(""String_Node_Str"").append(Formatter.escapeDoubleQuotes(translator.translate(""String_Node_Str"")));
      sb.append(""String_Node_Str"").append(Formatter.escapeDoubleQuotes(author)).append(""String_Node_Str"");
      hasMeta=true;
    }
    sb.append(""String_Node_Str"");
    if (hasMeta) {
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(pos).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(pos).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(pos).append(""String_Node_Str"").append(""String_Node_Str"").append(pos).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  if (!isContainer) {
    sb.append(""String_Node_Str"");
    sb.append(Formatter.formatBytes(leaf.getSize()));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  long lastModified=child.getLastModified();
  sb.append(""String_Node_Str"");
  if (lastModified != VFSConstants.UNDEFINED)   sb.append(DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,translator.getLocale()).format(new Date(lastModified)));
 else   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (canContainerVersion) {
    if (canVersion)     if (versions != null) {
      sb.append(""String_Node_Str"");
      sb.append(versions.getRevisionNr());
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  boolean locked=lockManager.isLocked(child);
  if (locked) {
    LockInfo lock=lockManager.getLock(child);
    sb.append(""String_Node_Str"");
    if (lock != null && lock.getLockedBy() != null) {
      String fullname=userManager.getUserDisplayName(lock.getLockedBy());
      String date=""String_Node_Str"";
      if (lock.getCreationDate() != null) {
        date=fc.getDateTimeFormat().format(lock.getCreationDate());
      }
      String msg=translator.translate(""String_Node_Str"",new String[]{fullname,date});
      if (lock.isWebDAVLock()) {
        msg+=""String_Node_Str"";
      }
      sb.append(msg);
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  if (canWrite) {
    int actionCount=0;
    if (canVersion)     actionCount++;
    String nameLowerCase=name.toLowerCase();
    boolean isLeaf=(child instanceof VFSLeaf);
    boolean isEditable=(isLeaf && !lockedForUser && (nameLowerCase.endsWith(""String_Node_Str"") || nameLowerCase.endsWith(""String_Node_Str"") || nameLowerCase.endsWith(""String_Node_Str"")|| nameLowerCase.endsWith(""String_Node_Str"")|| nameLowerCase.endsWith(""String_Node_Str"")));
    if (isEditable)     actionCount++;
    boolean canEP=canAddToEPortfolio && !isContainer;
    if (canEP)     actionCount++;
    boolean canMetaData=canMetaInfo(child);
    if (canMetaData)     actionCount++;
    if (actionCount == 1 && canMetaData) {
      sb.append(""String_Node_Str"");
      ubu.buildURI(sb,new String[]{PARAM_EDTID},new String[]{Integer.toString(pos)},iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
      sb.append(""String_Node_Str"");
      if (iframePostEnabled) {
        StringOutput so=new StringOutput();
        ubu.appendTarget(so);
        sb.append(so.toString());
      }
      sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
    }
 else     if (actionCount > 1) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      if (canMetaData) {
        sb.append(""String_Node_Str"");
        ubu.buildURI(sb,new String[]{PARAM_EDTID},new String[]{Integer.toString(pos)},iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
        sb.append(""String_Node_Str"");
        if (iframePostEnabled) {
          StringOutput so=new StringOutput();
          ubu.appendTarget(so);
          sb.append(so.toString());
        }
        sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
      }
      if (isEditable) {
        sb.append(""String_Node_Str"");
        ubu.buildURI(sb,new String[]{PARAM_CONTENTEDITID},new String[]{Integer.toString(pos)},iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
        sb.append(""String_Node_Str"");
        if (iframePostEnabled) {
          StringOutput so=new StringOutput();
          ubu.appendTarget(so);
          sb.append(so.toString());
        }
        sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
      }
      if (canVersion) {
        sb.append(""String_Node_Str"");
        ubu.buildURI(sb,new String[]{PARAM_VERID},new String[]{Integer.toString(pos)},iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
        sb.append(""String_Node_Str"");
        if (iframePostEnabled) {
          StringOutput so=new StringOutput();
          ubu.appendTarget(so);
          sb.append(so.toString());
        }
        sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
      }
      if (canEP) {
        if (metaInfo != null) {
          Identity author=metaInfo.getAuthorIdentity();
          if (author != null && fc.getIdentityEnvironnement().getIdentity().getKey().equals(author.getKey())) {
            sb.append(""String_Node_Str"");
            ubu.buildURI(sb,new String[]{PARAM_EPORT},new String[]{Integer.toString(pos)},iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
            sb.append(""String_Node_Str"");
            if (iframePostEnabled) {
              StringOutput so=new StringOutput();
              ubu.appendTarget(so);
              sb.append(so.toString());
            }
            sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
          }
        }
      }
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
}","/** 
 * Render a single file or folder.
 * @param f			The file or folder to render
 * @param sb		StringOutput to append generated html code
 */
private void appendRenderedFile(FolderComponent fc,VFSItem child,String currentContainerPath,StringOutput sb,URLBuilder ubu,Translator translator,boolean iframePostEnabled,boolean canContainerVersion,int pos){
  boolean canWrite=child.getParentContainer().canWrite() == VFSConstants.YES;
  boolean canDelete=child.getParentContainer().canDelete() == VFSConstants.YES;
  boolean canMail=fc.isCanMail();
  boolean isAbstract=(child instanceof AbstractVirtualContainer);
  Versions versions=null;
  if (canContainerVersion && child instanceof Versionable) {
    Versionable versionable=(Versionable)child;
    if (versionable.getVersions().isVersioned()) {
      versions=versionable.getVersions();
    }
  }
  boolean canVersion=versions != null && !versions.getRevisions().isEmpty();
  boolean canAddToEPortfolio=FolderConfig.isEPortfolioAddEnabled();
  VFSLeaf leaf=null;
  if (child instanceof VFSLeaf) {
    leaf=(VFSLeaf)child;
  }
  boolean isContainer=(leaf == null);
  MetaInfo metaInfo=null;
  if (child instanceof MetaTagged) {
    metaInfo=((MetaTagged)child).getMetaInfo();
  }
  boolean lockedForUser=lockManager.isLockedForMe(child,fc.getIdentityEnvironnement().getIdentity(),fc.getIdentityEnvironnement().getRoles());
  String name=child.getName();
  String pathAndName=currentContainerPath;
  if (pathAndName.length() > 0 && !pathAndName.endsWith(""String_Node_Str""))   pathAndName=pathAndName + ""String_Node_Str"";
  pathAndName=pathAndName + name;
  sb.append(""String_Node_Str"");
  if (canWrite || canDelete || canMail) {
    sb.append(""String_Node_Str"");
    sb.append(FileSelection.FORM_ID);
    sb.append(""String_Node_Str"");
    sb.append(StringHelper.escapeHtml(name));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(pos).append(""String_Node_Str"");
  if (isContainer) {
    ubu.buildURI(sb,null,null,pathAndName,iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
    sb.append(""String_Node_Str"");
    if (iframePostEnabled) {
      StringOutput so=new StringOutput();
      ubu.appendTarget(so);
      sb.append(so.toString());
    }
  }
 else {
    ubu.buildURI(sb,new String[]{PARAM_SERV},new String[]{""String_Node_Str""},pathAndName,AJAXFlags.MODE_NORMAL);
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (isContainer)   sb.append(CSSHelper.CSS_CLASS_FILETYPE_FOLDER);
 else   sb.append(CSSHelper.createFiletypeIconCssClassFor(name));
  sb.append(""String_Node_Str"");
  if (isAbstract)   sb.append(""String_Node_Str"");
  sb.append(name);
  if (isAbstract)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (metaInfo != null) {
    boolean hasMeta=false;
    sb.append(""String_Node_Str"").append(pos).append(""String_Node_Str"");
    if (StringHelper.containsNonWhitespace(metaInfo.getTitle())) {
      String title=StringHelper.escapeHtml(metaInfo.getTitle());
      sb.append(""String_Node_Str"").append(Formatter.escapeDoubleQuotes(title)).append(""String_Node_Str"");
      hasMeta=true;
    }
    if (StringHelper.containsNonWhitespace(metaInfo.getComment())) {
      sb.append(""String_Node_Str"");
      String comment=StringHelper.escapeHtml(metaInfo.getComment());
      sb.append(Formatter.escapeDoubleQuotes(comment));
      sb.append(""String_Node_Str"");
      hasMeta=true;
    }
    if (metaInfo.isThumbnailAvailable()) {
      sb.append(""String_Node_Str"");
      ubu.buildURI(sb,new String[]{PARAM_SERV_THUMBNAIL},new String[]{""String_Node_Str""},pathAndName,AJAXFlags.MODE_NORMAL);
      sb.append(""String_Node_Str"");
      hasMeta=true;
    }
    String author=metaInfo.getCreator();
    if (StringHelper.containsNonWhitespace(author)) {
    }
 else {
      author=metaInfo.getAuthor();
      if (!""String_Node_Str"".equals(author)) {
        author=UserManager.getInstance().getUserDisplayName(author);
      }
 else {
        author=null;
      }
    }
    author=StringHelper.escapeHtml(author);
    if (StringHelper.containsNonWhitespace(author)) {
      sb.append(""String_Node_Str"").append(Formatter.escapeDoubleQuotes(translator.translate(""String_Node_Str"")));
      sb.append(""String_Node_Str"").append(Formatter.escapeDoubleQuotes(author)).append(""String_Node_Str"");
      hasMeta=true;
    }
    sb.append(""String_Node_Str"");
    if (hasMeta) {
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(pos).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(pos).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(pos).append(""String_Node_Str"").append(""String_Node_Str"").append(pos).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  if (!isContainer) {
    sb.append(""String_Node_Str"");
    sb.append(Formatter.formatBytes(leaf.getSize()));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  long lastModified=child.getLastModified();
  sb.append(""String_Node_Str"");
  if (lastModified != VFSConstants.UNDEFINED)   sb.append(DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,translator.getLocale()).format(new Date(lastModified)));
 else   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (canContainerVersion) {
    if (canVersion)     if (versions != null) {
      sb.append(""String_Node_Str"");
      sb.append(versions.getRevisionNr());
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  boolean locked=lockManager.isLocked(child);
  if (locked) {
    LockInfo lock=lockManager.getLock(child);
    sb.append(""String_Node_Str"");
    if (lock != null && lock.getLockedBy() != null) {
      String fullname=userManager.getUserDisplayName(lock.getLockedBy());
      String date=""String_Node_Str"";
      if (lock.getCreationDate() != null) {
        date=fc.getDateTimeFormat().format(lock.getCreationDate());
      }
      String msg=translator.translate(""String_Node_Str"",new String[]{fullname,date});
      if (lock.isWebDAVLock()) {
        msg+=""String_Node_Str"";
      }
      sb.append(msg);
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  if (canWrite) {
    int actionCount=0;
    if (canVersion)     actionCount++;
    String nameLowerCase=name.toLowerCase();
    boolean isLeaf=(child instanceof VFSLeaf);
    boolean isEditable=(isLeaf && !lockedForUser && (nameLowerCase.endsWith(""String_Node_Str"") || nameLowerCase.endsWith(""String_Node_Str"") || nameLowerCase.endsWith(""String_Node_Str"")|| nameLowerCase.endsWith(""String_Node_Str"")|| nameLowerCase.endsWith(""String_Node_Str"")));
    if (isEditable)     actionCount++;
    boolean canEP=canAddToEPortfolio && !isContainer;
    if (canEP)     actionCount++;
    boolean canMetaData=canMetaInfo(child);
    if (canMetaData)     actionCount++;
    if (actionCount == 1 && canMetaData) {
      sb.append(""String_Node_Str"");
      ubu.buildURI(sb,new String[]{PARAM_EDTID},new String[]{Integer.toString(pos)},iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
      sb.append(""String_Node_Str"");
      if (iframePostEnabled) {
        StringOutput so=new StringOutput();
        ubu.appendTarget(so);
        sb.append(so.toString());
      }
      sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
    }
 else     if (actionCount > 1) {
      sb.append(""String_Node_Str"").append(pos).append(""String_Node_Str"").append(""String_Node_Str"").append(pos).append(""String_Node_Str"");
      if (canMetaData) {
        sb.append(""String_Node_Str"");
        ubu.buildURI(sb,new String[]{PARAM_EDTID},new String[]{Integer.toString(pos)},iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
        sb.append(""String_Node_Str"");
        if (iframePostEnabled) {
          StringOutput so=new StringOutput();
          ubu.appendTarget(so);
          sb.append(so.toString());
        }
        sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
      }
      if (isEditable) {
        sb.append(""String_Node_Str"");
        ubu.buildURI(sb,new String[]{PARAM_CONTENTEDITID},new String[]{Integer.toString(pos)},iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
        sb.append(""String_Node_Str"");
        if (iframePostEnabled) {
          StringOutput so=new StringOutput();
          ubu.appendTarget(so);
          sb.append(so.toString());
        }
        sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
      }
      if (canVersion) {
        sb.append(""String_Node_Str"");
        ubu.buildURI(sb,new String[]{PARAM_VERID},new String[]{Integer.toString(pos)},iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
        sb.append(""String_Node_Str"");
        if (iframePostEnabled) {
          StringOutput so=new StringOutput();
          ubu.appendTarget(so);
          sb.append(so.toString());
        }
        sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
      }
      if (canEP) {
        if (metaInfo != null) {
          Identity author=metaInfo.getAuthorIdentity();
          if (author != null && fc.getIdentityEnvironnement().getIdentity().getKey().equals(author.getKey())) {
            sb.append(""String_Node_Str"");
            ubu.buildURI(sb,new String[]{PARAM_EPORT},new String[]{Integer.toString(pos)},iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
            sb.append(""String_Node_Str"");
            if (iframePostEnabled) {
              StringOutput so=new StringOutput();
              ubu.appendTarget(so);
              sb.append(so.toString());
            }
            sb.append(""String_Node_Str"").append(StringHelper.escapeHtml(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
          }
        }
      }
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(pos).append(""String_Node_Str"").append(pos).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
}"
69592,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  int cmpcount=0;
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    layoutCont.contextPut(""String_Node_Str"",entry);
    layoutCont.contextPut(""String_Node_Str"",new Boolean(guestOnly));
    String cssClass=RepositoyUIFactory.getIconCssClass(entry);
    layoutCont.contextPut(""String_Node_Str"",cssClass);
    RepositoryHandler handler=RepositoryHandlerFactory.getInstance().getRepositoryHandler(entry);
    VFSContainer mediaContainer=handler.getMediaContainer(entry);
    if (mediaContainer != null) {
      baseUrl=registerMapper(ureq,new VFSContainerMapper(mediaContainer.getParentContainer()));
    }
    setText(entry.getDescription(),""String_Node_Str"",layoutCont);
    setText(entry.getRequirements(),""String_Node_Str"",layoutCont);
    setText(entry.getObjectives(),""String_Node_Str"",layoutCont);
    setText(entry.getCredits(),""String_Node_Str"",layoutCont);
    VFSLeaf movie=repositoryService.getIntroductionMovie(entry);
    VFSLeaf image=repositoryService.getIntroductionImage(entry);
    if (image != null || movie != null) {
      ImageComponent ic=new ImageComponent(ureq.getUserSession(),""String_Node_Str"");
      if (movie != null) {
        ic.setMedia(movie);
        ic.setMaxWithAndHeightToFitWithin(500,300);
        if (image != null) {
          ic.setPoster(image);
        }
      }
 else {
        ic.setMedia(image);
        ic.setMaxWithAndHeightToFitWithin(500,300);
      }
      layoutCont.put(""String_Node_Str"",ic);
    }
    if (repositoryModule.isCatalogEnabled()) {
      List<CatalogEntry> categories=catalogManager.getCatalogEntriesReferencing(entry);
      List<String> categoriesLink=new ArrayList<>(categories.size());
      for (      CatalogEntry category : categories) {
        String id=""String_Node_Str"" + ++cmpcount;
        String title=category.getParent().getName();
        FormLink catLink=uifactory.addFormLink(id,""String_Node_Str"",title,null,layoutCont,Link.LINK | Link.NONTRANSLATED);
        catLink.setUserObject(category.getKey());
        categoriesLink.add(id);
      }
      layoutCont.contextPut(""String_Node_Str"",categoriesLink);
    }
    if (!guestOnly) {
      boolean marked;
      if (row == null) {
        marked=markManager.isMarked(entry,getIdentity(),null);
      }
 else {
        marked=row.isMarked();
      }
      markLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",marked ? ""String_Node_Str"" : ""String_Node_Str"",null,layoutCont,Link.LINK);
      markLink.setElementCssClass(""String_Node_Str"");
      markLink.setIconLeftCSS(marked ? Mark.MARK_CSS_LARGE : Mark.MARK_ADD_CSS_LARGE);
    }
    Integer myRating;
    if (row == null) {
      myRating=userRatingsDao.getRatingValue(getIdentity(),entry,null);
    }
 else {
      myRating=row.getMyRating();
    }
    RepositoryEntryStatistics statistics=entry.getStatistics();
    Double averageRating=statistics.getRating();
    long numOfRatings=statistics.getNumOfRatings();
    float ratingValue=myRating == null ? 0f : myRating.floatValue();
    float averageRatingValue=averageRating == null ? 0f : averageRating.floatValue();
    ratingEl=new RatingWithAverageFormItem(""String_Node_Str"",ratingValue,averageRatingValue,5,numOfRatings);
    ratingEl.setEnabled(!guestOnly);
    layoutCont.add(""String_Node_Str"",ratingEl);
    long numOfComments=statistics.getNumOfComments();
    String title=""String_Node_Str"" + numOfComments + ""String_Node_Str"";
    commentsLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",title,null,layoutCont,Link.NONTRANSLATED);
    commentsLink.setCustomEnabledLinkCSS(""String_Node_Str"");
    String css=numOfComments > 0 ? ""String_Node_Str"" : ""String_Node_Str"";
    commentsLink.setIconLeftCSS(css);
    List<String> roles=repositoryService.getRoles(getIdentity(),entry);
    boolean isMember=roles.contains(GroupRoles.owner.name()) || roles.contains(GroupRoles.coach.name()) || roles.contains(GroupRoles.participant.name());
    if (isMember) {
      Boolean isAuthor=Boolean.valueOf(roles.contains(GroupRoles.owner));
      layoutCont.contextPut(""String_Node_Str"",isAuthor);
    }
    layoutCont.contextPut(""String_Node_Str"",ureq.getUserSession().getRoles());
    String accessI18n=null;
    List<PriceMethod> types=new ArrayList<PriceMethod>();
    if (entry.isMembersOnly()) {
      types.add(new PriceMethod(""String_Node_Str"",""String_Node_Str"",translate(""String_Node_Str"")));
      if (isMember) {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
        startLink.setIconRightCSS(""String_Node_Str"");
        startLink.setPrimary(true);
      }
      accessI18n=translate(""String_Node_Str"");
    }
 else {
      AccessResult acResult=acService.isAccessible(entry,getIdentity(),false);
      if (acResult.isAccessible()) {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
      }
 else       if (acResult.getAvailableMethods().size() > 0) {
        for (        OfferAccess access : acResult.getAvailableMethods()) {
          AccessMethod method=access.getMethod();
          String type=(method.getMethodCssClass() + ""String_Node_Str"").intern();
          Price p=access.getOffer().getPrice();
          String price=p == null || p.isEmpty() ? ""String_Node_Str"" : PriceFormat.fullFormat(p);
          AccessMethodHandler amh=acModule.getAccessMethodHandler(method.getType());
          String displayName=amh.getMethodName(getLocale());
          types.add(new PriceMethod(price,type,displayName));
        }
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setCustomEnabledLinkCSS(""String_Node_Str"");
        startLink.setElementCssClass(""String_Node_Str"");
      }
 else {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setEnabled(false);
        startLink.setElementCssClass(""String_Node_Str"");
      }
      startLink.setIconRightCSS(""String_Node_Str"");
      startLink.setPrimary(true);
switch (entry.getAccess()) {
case 0:
        accessI18n=""String_Node_Str"";
      break;
case 1:
    accessI18n=translate(""String_Node_Str"");
  break;
case 2:
accessI18n=translate(""String_Node_Str"");
break;
case 3:
accessI18n=translate(""String_Node_Str"");
break;
case 4:
accessI18n=translate(""String_Node_Str"");
break;
}
}
layoutCont.contextPut(""String_Node_Str"",accessI18n);
if (!types.isEmpty()) {
layoutCont.contextPut(""String_Node_Str"",types);
}
if (isMember) {
SearchBusinessGroupParams params=new SearchBusinessGroupParams(getIdentity(),true,true);
List<BusinessGroup> groups=businessGroupService.findBusinessGroups(params,entry,0,-1);
List<String> groupLinkNames=new ArrayList<>(groups.size());
for (BusinessGroup group : groups) {
String groupLinkName=""String_Node_Str"" + ++cmpcount;
FormLink link=uifactory.addFormLink(groupLinkName,""String_Node_Str"",group.getName(),null,layoutCont,Link.LINK | Link.NONTRANSLATED);
link.setUserObject(group.getKey());
groupLinkNames.add(groupLinkName);
}
layoutCont.contextPut(""String_Node_Str"",groupLinkNames);
}
boolean passed=false;
boolean failed=false;
String score=null;
if (row != null) {
passed=row.isPassed();
failed=row.isFailed();
score=row.getScore();
}
 else {
UserEfficiencyStatement statement=effManager.getUserEfficiencyStatementLight(entry.getKey(),getIdentity());
if (statement != null) {
Boolean p=statement.getPassed();
if (p != null) {
passed=p.booleanValue();
failed=!p.booleanValue();
}
Float scoreVal=statement.getScore();
if (scoreVal != null) {
score=AssessmentHelper.getRoundedScore(scoreVal);
}
}
}
layoutCont.contextPut(""String_Node_Str"",passed);
layoutCont.contextPut(""String_Node_Str"",failed);
layoutCont.contextPut(""String_Node_Str"",score);
Date recentLaunch=null;
if (row != null) {
recentLaunch=row.getRecentLaunch();
}
 else {
Long courseResId=entry.getOlatResource().getResourceableId();
UserCourseInformations infos=userCourseInfosManager.getUserCourseInformations(courseResId,getIdentity());
if (infos != null) {
recentLaunch=infos.getRecentLaunch();
}
}
layoutCont.contextPut(""String_Node_Str"",recentLaunch);
String numUsers;
OLATResourceable ores=entry.getOlatResource();
int cnt=0;
OLATResourceable courseRunOres=OresHelper.createOLATResourceableInstance(RunMainController.ORES_TYPE_COURSE_RUN,entry.getOlatResource().getResourceableId());
if (ores != null) cnt=coordinatorManager.getCoordinator().getEventBus().getListeningIdentityCntFor(courseRunOres);
numUsers=String.valueOf(cnt);
layoutCont.contextPut(""String_Node_Str"",numUsers);
String referenceDetails=referenceManager.getReferencesToSummary(entry.getOlatResource(),getLocale());
if (referenceDetails != null) {
layoutCont.contextPut(""String_Node_Str"",referenceDetails);
}
String url=Settings.getServerContextPathURI() + ""String_Node_Str"" + entry.getKey();
layoutCont.contextPut(""String_Node_Str"",url);
layoutCont.contextPut(""String_Node_Str"",(entry.getAccess() >= RepositoryEntry.ACC_USERS_GUESTS ? Boolean.TRUE : Boolean.FALSE));
List<Identity> authors=repositoryService.getMembers(entry,GroupRoles.owner.name());
List<String> authorLinkNames=new ArrayList<String>(authors.size());
int counter=0;
for (Identity author : authors) {
String authorName=userManager.getUserDisplayName(author);
FormLink authorLink=uifactory.addFormLink(""String_Node_Str"" + counter,""String_Node_Str"",authorName,null,formLayout,Link.NONTRANSLATED | Link.LINK);
authorLink.setUserObject(author.getKey());
authorLinkNames.add(authorLink.getComponent().getComponentName());
}
layoutCont.contextPut(""String_Node_Str"",authorLinkNames);
}
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  int cmpcount=0;
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    layoutCont.contextPut(""String_Node_Str"",entry);
    layoutCont.contextPut(""String_Node_Str"",new Boolean(guestOnly));
    String cssClass=RepositoyUIFactory.getIconCssClass(entry);
    layoutCont.contextPut(""String_Node_Str"",cssClass);
    RepositoryHandler handler=RepositoryHandlerFactory.getInstance().getRepositoryHandler(entry);
    VFSContainer mediaContainer=handler.getMediaContainer(entry);
    if (mediaContainer != null) {
      baseUrl=registerMapper(ureq,new VFSContainerMapper(mediaContainer.getParentContainer()));
    }
    setText(entry.getDescription(),""String_Node_Str"",layoutCont);
    setText(entry.getRequirements(),""String_Node_Str"",layoutCont);
    setText(entry.getObjectives(),""String_Node_Str"",layoutCont);
    setText(entry.getCredits(),""String_Node_Str"",layoutCont);
    VFSLeaf movie=repositoryService.getIntroductionMovie(entry);
    VFSLeaf image=repositoryService.getIntroductionImage(entry);
    if (image != null || movie != null) {
      ImageComponent ic=new ImageComponent(ureq.getUserSession(),""String_Node_Str"");
      if (movie != null) {
        ic.setMedia(movie);
        ic.setMaxWithAndHeightToFitWithin(500,300);
        if (image != null) {
          ic.setPoster(image);
        }
      }
 else {
        ic.setMedia(image);
        ic.setMaxWithAndHeightToFitWithin(500,300);
      }
      layoutCont.put(""String_Node_Str"",ic);
    }
    if (repositoryModule.isCatalogEnabled()) {
      List<CatalogEntry> categories=catalogManager.getCatalogEntriesReferencing(entry);
      List<String> categoriesLink=new ArrayList<>(categories.size());
      for (      CatalogEntry category : categories) {
        String id=""String_Node_Str"" + ++cmpcount;
        String title=category.getParent().getName();
        FormLink catLink=uifactory.addFormLink(id,""String_Node_Str"",title,null,layoutCont,Link.LINK | Link.NONTRANSLATED);
        catLink.setUserObject(category.getKey());
        categoriesLink.add(id);
      }
      layoutCont.contextPut(""String_Node_Str"",categoriesLink);
    }
    if (!guestOnly) {
      boolean marked;
      if (row == null) {
        marked=markManager.isMarked(entry,getIdentity(),null);
      }
 else {
        marked=row.isMarked();
      }
      markLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",marked ? ""String_Node_Str"" : ""String_Node_Str"",null,layoutCont,Link.LINK);
      markLink.setElementCssClass(""String_Node_Str"");
      markLink.setIconLeftCSS(marked ? Mark.MARK_CSS_LARGE : Mark.MARK_ADD_CSS_LARGE);
    }
    Integer myRating;
    if (row == null) {
      myRating=userRatingsDao.getRatingValue(getIdentity(),entry,null);
    }
 else {
      myRating=row.getMyRating();
    }
    RepositoryEntryStatistics statistics=entry.getStatistics();
    Double averageRating=statistics.getRating();
    long numOfRatings=statistics.getNumOfRatings();
    float ratingValue=myRating == null ? 0f : myRating.floatValue();
    float averageRatingValue=averageRating == null ? 0f : averageRating.floatValue();
    ratingEl=new RatingWithAverageFormItem(""String_Node_Str"",ratingValue,averageRatingValue,5,numOfRatings);
    ratingEl.setEnabled(!guestOnly);
    layoutCont.add(""String_Node_Str"",ratingEl);
    long numOfComments=statistics.getNumOfComments();
    String title=""String_Node_Str"" + numOfComments + ""String_Node_Str"";
    commentsLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",title,null,layoutCont,Link.NONTRANSLATED);
    commentsLink.setCustomEnabledLinkCSS(""String_Node_Str"");
    String css=numOfComments > 0 ? ""String_Node_Str"" : ""String_Node_Str"";
    commentsLink.setIconLeftCSS(css);
    List<String> roles=repositoryService.getRoles(getIdentity(),entry);
    boolean isMember=roles.contains(GroupRoles.owner.name()) || roles.contains(GroupRoles.coach.name()) || roles.contains(GroupRoles.participant.name());
    if (isMember) {
      Boolean isAuthor=Boolean.valueOf(roles.contains(GroupRoles.owner.name()));
      layoutCont.contextPut(""String_Node_Str"",isAuthor);
    }
    layoutCont.contextPut(""String_Node_Str"",ureq.getUserSession().getRoles());
    String accessI18n=null;
    List<PriceMethod> types=new ArrayList<PriceMethod>();
    if (entry.isMembersOnly()) {
      types.add(new PriceMethod(""String_Node_Str"",""String_Node_Str"",translate(""String_Node_Str"")));
      if (isMember) {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
        startLink.setIconRightCSS(""String_Node_Str"");
        startLink.setPrimary(true);
      }
      accessI18n=translate(""String_Node_Str"");
    }
 else {
      AccessResult acResult=acService.isAccessible(entry,getIdentity(),false);
      if (acResult.isAccessible()) {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setElementCssClass(""String_Node_Str"");
      }
 else       if (acResult.getAvailableMethods().size() > 0) {
        for (        OfferAccess access : acResult.getAvailableMethods()) {
          AccessMethod method=access.getMethod();
          String type=(method.getMethodCssClass() + ""String_Node_Str"").intern();
          Price p=access.getOffer().getPrice();
          String price=p == null || p.isEmpty() ? ""String_Node_Str"" : PriceFormat.fullFormat(p);
          AccessMethodHandler amh=acModule.getAccessMethodHandler(method.getType());
          String displayName=amh.getMethodName(getLocale());
          types.add(new PriceMethod(price,type,displayName));
        }
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setCustomEnabledLinkCSS(""String_Node_Str"");
        startLink.setElementCssClass(""String_Node_Str"");
      }
 else {
        String linkText=translate(""String_Node_Str"",translate(entry.getOlatResource().getResourceableTypeName()));
        startLink=uifactory.addFormLink(""String_Node_Str"",""String_Node_Str"",linkText,null,layoutCont,Link.BUTTON + Link.NONTRANSLATED);
        startLink.setEnabled(false);
        startLink.setElementCssClass(""String_Node_Str"");
      }
      startLink.setIconRightCSS(""String_Node_Str"");
      startLink.setPrimary(true);
switch (entry.getAccess()) {
case 0:
        accessI18n=""String_Node_Str"";
      break;
case 1:
    accessI18n=translate(""String_Node_Str"");
  break;
case 2:
accessI18n=translate(""String_Node_Str"");
break;
case 3:
accessI18n=translate(""String_Node_Str"");
break;
case 4:
accessI18n=translate(""String_Node_Str"");
break;
}
}
layoutCont.contextPut(""String_Node_Str"",accessI18n);
if (!types.isEmpty()) {
layoutCont.contextPut(""String_Node_Str"",types);
}
if (isMember) {
SearchBusinessGroupParams params=new SearchBusinessGroupParams(getIdentity(),true,true);
List<BusinessGroup> groups=businessGroupService.findBusinessGroups(params,entry,0,-1);
List<String> groupLinkNames=new ArrayList<>(groups.size());
for (BusinessGroup group : groups) {
String groupLinkName=""String_Node_Str"" + ++cmpcount;
FormLink link=uifactory.addFormLink(groupLinkName,""String_Node_Str"",group.getName(),null,layoutCont,Link.LINK | Link.NONTRANSLATED);
link.setUserObject(group.getKey());
groupLinkNames.add(groupLinkName);
}
layoutCont.contextPut(""String_Node_Str"",groupLinkNames);
}
boolean passed=false;
boolean failed=false;
String score=null;
if (row != null) {
passed=row.isPassed();
failed=row.isFailed();
score=row.getScore();
}
 else {
UserEfficiencyStatement statement=effManager.getUserEfficiencyStatementLight(entry.getKey(),getIdentity());
if (statement != null) {
Boolean p=statement.getPassed();
if (p != null) {
passed=p.booleanValue();
failed=!p.booleanValue();
}
Float scoreVal=statement.getScore();
if (scoreVal != null) {
score=AssessmentHelper.getRoundedScore(scoreVal);
}
}
}
layoutCont.contextPut(""String_Node_Str"",passed);
layoutCont.contextPut(""String_Node_Str"",failed);
layoutCont.contextPut(""String_Node_Str"",score);
Date recentLaunch=null;
if (row != null) {
recentLaunch=row.getRecentLaunch();
}
 else {
Long courseResId=entry.getOlatResource().getResourceableId();
UserCourseInformations infos=userCourseInfosManager.getUserCourseInformations(courseResId,getIdentity());
if (infos != null) {
recentLaunch=infos.getRecentLaunch();
}
}
layoutCont.contextPut(""String_Node_Str"",recentLaunch);
String numUsers;
OLATResourceable ores=entry.getOlatResource();
int cnt=0;
OLATResourceable courseRunOres=OresHelper.createOLATResourceableInstance(RunMainController.ORES_TYPE_COURSE_RUN,entry.getOlatResource().getResourceableId());
if (ores != null) cnt=coordinatorManager.getCoordinator().getEventBus().getListeningIdentityCntFor(courseRunOres);
numUsers=String.valueOf(cnt);
layoutCont.contextPut(""String_Node_Str"",numUsers);
String referenceDetails=referenceManager.getReferencesToSummary(entry.getOlatResource(),getLocale());
if (referenceDetails != null) {
layoutCont.contextPut(""String_Node_Str"",referenceDetails);
}
String url=Settings.getServerContextPathURI() + ""String_Node_Str"" + entry.getKey();
layoutCont.contextPut(""String_Node_Str"",url);
layoutCont.contextPut(""String_Node_Str"",(entry.getAccess() >= RepositoryEntry.ACC_USERS_GUESTS ? Boolean.TRUE : Boolean.FALSE));
List<Identity> authors=repositoryService.getMembers(entry,GroupRoles.owner.name());
List<String> authorLinkNames=new ArrayList<String>(authors.size());
int counter=0;
for (Identity author : authors) {
String authorName=userManager.getUserDisplayName(author);
FormLink authorLink=uifactory.addFormLink(""String_Node_Str"" + counter,""String_Node_Str"",authorName,null,formLayout,Link.NONTRANSLATED | Link.LINK);
authorLink.setUserObject(author.getKey());
authorLinkNames.add(authorLink.getComponent().getComponentName());
}
layoutCont.contextPut(""String_Node_Str"",authorLinkNames);
}
}"
69593,"@Override protected void sort(List<BGTableItem> rows){
  int columnIndex=getColumnIndex();
  Cols column=Cols.values()[columnIndex];
switch (column) {
case mark:
    Collections.sort(rows,new MarkComparator());
  break;
case resources:
Collections.sort(rows,new ResourcesComparator());
break;
case role:
Collections.sort(rows,new RoleComparator());
break;
default :
{
super.sort(rows);
}
}
}","@Override protected void sort(List<BGTableItem> rows){
  int columnIndex=getColumnIndex();
  Cols column=Cols.values()[columnIndex];
switch (column) {
case name:
    Collections.sort(rows,new BusinessGroupNameComparator());
  break;
case mark:
Collections.sort(rows,new MarkComparator());
break;
case resources:
Collections.sort(rows,new ResourcesComparator());
break;
case role:
Collections.sort(rows,new RoleComparator());
break;
default :
{
super.sort(rows);
}
}
}"
69594,"@Override public int compare(BusinessGroupMembership m1,BusinessGroupMembership m2){
  if (m1.isOwner()) {
    if (m2.isOwner()) {
      return 0;
    }
    return 1;
  }
 else   if (m2.isOwner()) {
    return -1;
  }
  if (m1.isParticipant() || m1.isParticipant()) {
    if (m2.isParticipant() || m2.isParticipant()) {
      return 0;
    }
    return 1;
  }
 else   if (m2.isParticipant() || m2.isParticipant()) {
    return -1;
  }
  if (m1.isWaiting()) {
    if (m2.isWaiting()) {
      return 0;
    }
    return 1;
  }
 else   if (m2.isWaiting()) {
    return -1;
  }
  return 0;
}","@Override public int compare(BusinessGroupMembership m1,BusinessGroupMembership m2){
  if (m1 == null) {
    if (m2 == null) {
      return 0;
    }
 else {
      return -1;
    }
  }
 else   if (m2 == null) {
    return 1;
  }
  if (m1.isOwner()) {
    if (m2.isOwner()) {
      return 0;
    }
    return 1;
  }
 else   if (m2.isOwner()) {
    return -1;
  }
  if (m1.isParticipant() || m1.isParticipant()) {
    if (m2.isParticipant() || m2.isParticipant()) {
      return 0;
    }
    return 1;
  }
 else   if (m2.isParticipant() || m2.isParticipant()) {
    return -1;
  }
  if (m1.isWaiting()) {
    if (m2.isWaiting()) {
      return 0;
    }
    return 1;
  }
 else   if (m2.isWaiting()) {
    return -1;
  }
  return 0;
}"
69595,"public static RepositoryEntry deployCourseFromZIP(File exportedCourseZIPFile,String softKey,int access){
  OLATResource newCourseResource=olatResourceManager.createOLATResourceInstance(CourseModule.class);
  ICourse course=CourseFactory.importCourseFromZip(newCourseResource,exportedCourseZIPFile);
  if (course == null) {
    log.error(""String_Node_Str"" + exportedCourseZIPFile.getAbsolutePath());
    return null;
  }
  File courseExportData=course.getCourseExportDataDir().getBasefile();
  RepositoryEntryImportExport importExport=new RepositoryEntryImportExport(courseExportData);
  if (!StringHelper.containsNonWhitespace(softKey)) {
    softKey=importExport.getSoftkey();
  }
  RepositoryEntry existingEntry=repositoryManager.lookupRepositoryEntryBySoftkey(softKey,false);
  if (existingEntry != null) {
    log.info(""String_Node_Str"" + softKey + ""String_Node_Str"");
    UserCourseInformationsManager userCourseInformationsManager=CoreSpringFactory.getImpl(UserCourseInformationsManager.class);
    userCourseInformationsManager.deleteUserCourseInformations(existingEntry);
    CourseFactory.deleteCourse(newCourseResource);
    return existingEntry;
  }
  newCourseResource=olatResourceManager.findOrPersistResourceable(newCourseResource);
  RepositoryEntry re=repositoryService.create(importExport.getInitialAuthor(),importExport.getResourceName(),importExport.getDisplayName(),importExport.getDescription(),newCourseResource);
  re.setOlatResource(newCourseResource);
  re.setSoftkey(softKey);
  re.setAccess(access);
  repositoryService.update(re);
  course=openCourseEditSession(course.getResourceableId());
  CourseGroupManager cgm=course.getCourseEnvironment().getCourseGroupManager();
  cgm.importCourseBusinessGroups(courseExportData);
  deployReferencedRepositoryEntries(courseExportData,course,(CourseEditorTreeNode)course.getEditorTreeModel().getRootNode());
  registerReferences(course,course.getRunStructure().getRootNode());
  deployReferencedSharedFolders(courseExportData,course);
  deployReferencedGlossary(courseExportData,course);
  closeCourseEditSession(course.getResourceableId(),true);
  FileUtils.deleteDirsAndFiles(courseExportData,true,true);
  log.info(""String_Node_Str"" + re.getDisplayname() + ""String_Node_Str""+ exportedCourseZIPFile.getAbsolutePath());
  return re;
}","public static RepositoryEntry deployCourseFromZIP(File exportedCourseZIPFile,String softKey,int access){
  OLATResource newCourseResource=olatResourceManager.createOLATResourceInstance(CourseModule.class);
  ICourse course=CourseFactory.importCourseFromZip(newCourseResource,exportedCourseZIPFile);
  if (course == null) {
    log.error(""String_Node_Str"" + exportedCourseZIPFile.getAbsolutePath());
    return null;
  }
  File courseExportData=course.getCourseExportDataDir().getBasefile();
  RepositoryEntryImportExport importExport=new RepositoryEntryImportExport(courseExportData);
  if (!StringHelper.containsNonWhitespace(softKey)) {
    softKey=importExport.getSoftkey();
  }
  RepositoryEntry existingEntry=repositoryManager.lookupRepositoryEntryBySoftkey(softKey,false);
  if (existingEntry != null) {
    log.info(""String_Node_Str"" + softKey + ""String_Node_Str"");
    UserCourseInformationsManager userCourseInformationsManager=CoreSpringFactory.getImpl(UserCourseInformationsManager.class);
    userCourseInformationsManager.deleteUserCourseInformations(existingEntry);
    CourseFactory.deleteCourse(newCourseResource);
    return existingEntry;
  }
  newCourseResource=olatResourceManager.findOrPersistResourceable(newCourseResource);
  RepositoryEntry re=repositoryService.create(importExport.getInitialAuthor(),importExport.getResourceName(),importExport.getDisplayName(),importExport.getDescription(),newCourseResource);
  re.setOlatResource(newCourseResource);
  re.setSoftkey(softKey);
  re.setAccess(access);
  repositoryService.update(re);
  course=openCourseEditSession(course.getResourceableId());
  CourseGroupManager cgm=course.getCourseEnvironment().getCourseGroupManager();
  cgm.importCourseBusinessGroups(courseExportData);
  deployReferencedRepositoryEntries(courseExportData,course,(CourseEditorTreeNode)course.getEditorTreeModel().getRootNode());
  registerReferences(course,(CourseEditorTreeNode)course.getEditorTreeModel().getRootNode());
  deployReferencedSharedFolders(courseExportData,course);
  deployReferencedGlossary(courseExportData,course);
  closeCourseEditSession(course.getResourceableId(),true);
  FileUtils.deleteDirsAndFiles(courseExportData,true,true);
  log.info(""String_Node_Str"" + re.getDisplayname() + ""String_Node_Str""+ exportedCourseZIPFile.getAbsolutePath());
  return re;
}"
69596,"/** 
 * Register any referenced repository entries.
 * @param course
 * @param currentNode
 */
private static void registerReferences(ICourse course,CourseNode currentNode){
  for (int i=0; i < currentNode.getChildCount(); i++) {
    CourseNode childNode=(CourseNode)currentNode.getChildAt(i);
    if (childNode.needsReferenceToARepositoryEntry()) {
      referenceManager.addReference(course,childNode.getReferencedRepositoryEntry().getOlatResource(),childNode.getIdent());
    }
    registerReferences(course,childNode);
  }
}","/** 
 * Register any referenced repository entries.
 * @param course
 * @param currentNode
 */
private static void registerReferences(ICourse course,CourseEditorTreeNode currentNode){
  for (int i=0; i < currentNode.getChildCount(); i++) {
    CourseEditorTreeNode childNode=(CourseEditorTreeNode)currentNode.getChildAt(i);
    CourseNode childCourseNode=childNode.getCourseNode();
    if (childCourseNode.needsReferenceToARepositoryEntry()) {
      RepositoryEntry re=childCourseNode.getReferencedRepositoryEntry();
      referenceManager.addReference(course,re.getOlatResource(),childNode.getIdent());
    }
    registerReferences(course,childNode);
  }
}"
69597,"public List<EfficiencyStatementEntry> getCourse(Identity coach,RepositoryEntry entry,int firstResult,int maxResults);","public List<EfficiencyStatementEntry> getCourse(Identity coach,RepositoryEntry entry);"
69598,"public List<Long> getStudents(Identity coach,RepositoryEntry entry,int firstResult,int maxResults){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  return dbInstance.getCurrentEntityManager().createQuery(sb.toString(),Long.class).setParameter(""String_Node_Str"",coach.getKey()).setParameter(""String_Node_Str"",entry.getKey()).getResultList();
}","public List<Long> getStudents(Identity coach,RepositoryEntry entry){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  return dbInstance.getCurrentEntityManager().createQuery(sb.toString(),Long.class).setParameter(""String_Node_Str"",coach.getKey()).setParameter(""String_Node_Str"",entry.getKey()).getResultList();
}"
69599,"public List<GroupStatEntry> getGroupsStatistics(Identity coach){
  return coachingDao.getGroupsStatistics(coach);
}","@Override public List<GroupStatEntry> getGroupsStatistics(Identity coach){
  return coachingDao.getGroupsStatistics(coach);
}"
69600,"public List<UserEfficiencyStatement> getEfficencyStatements(Identity student){
  return coachingDao.getEfficencyStatementEntries(student);
}","@Override public List<UserEfficiencyStatement> getEfficencyStatements(Identity student){
  return coachingDao.getEfficencyStatementEntries(student);
}"
69601,"public List<StudentStatEntry> getStudentsStatistics(Identity coach){
  return coachingDao.getStudentsStatistics(coach);
}","@Override public List<StudentStatEntry> getStudentsStatistics(Identity coach){
  return coachingDao.getStudentsStatistics(coach);
}"
69602,"public EfficiencyStatementEntry getEfficencyStatement(UserEfficiencyStatement statement){
  return coachingDao.getEfficencyStatementEntry(statement);
}","@Override public EfficiencyStatementEntry getEfficencyStatement(UserEfficiencyStatement statement){
  return coachingDao.getEfficencyStatementEntry(statement);
}"
69603,"public List<RepositoryEntry> getStudentsCourses(Identity coach,Identity student,int firstResult,int maxResults){
  return coachingDao.getStudentsCourses(coach,student,firstResult,maxResults);
}","@Override public List<RepositoryEntry> getStudentsCourses(Identity coach,Identity student,int firstResult,int maxResults){
  return coachingDao.getStudentsCourses(coach,student,firstResult,maxResults);
}"
69604,"public List<EfficiencyStatementEntry> getGroup(BusinessGroup group){
  List<Identity> students=businessGroupService.getMembers(group,GroupRoles.participant.name());
  List<RepositoryEntry> courses=businessGroupService.findRepositoryEntries(Collections.singletonList(group),0,-1);
  return coachingDao.getEfficencyStatementEntriesAlt(students,courses);
}","@Override public List<EfficiencyStatementEntry> getGroup(BusinessGroup group){
  List<Identity> students=businessGroupService.getMembers(group,GroupRoles.participant.name());
  List<RepositoryEntry> courses=businessGroupService.findRepositoryEntries(Collections.singletonList(group),0,-1);
  return coachingDao.getEfficencyStatementEntriesAlt(students,courses);
}"
69605,"public List<CourseStatEntry> getCoursesStatistics(Identity coach){
  return coachingDao.getCoursesStatistics(coach);
}","@Override public List<CourseStatEntry> getCoursesStatistics(Identity coach){
  return coachingDao.getCoursesStatistics(coach);
}"
69606,"public List<EfficiencyStatementEntry> getCourse(Identity coach,RepositoryEntry entry,int firstResult,int maxResults){
  List<Long> studentKeys=coachingDao.getStudents(coach,entry,firstResult,maxResults);
  List<IdentityShort> students=securityManager.findShortIdentitiesByKey(studentKeys);
  return coachingDao.getEfficencyStatementEntries(students,Collections.singletonList(entry));
}","@Override public List<EfficiencyStatementEntry> getCourse(Identity coach,RepositoryEntry entry){
  List<Long> studentKeys=coachingDao.getStudents(coach,entry);
  List<IdentityShort> students=securityManager.findShortIdentitiesByKey(studentKeys);
  return coachingDao.getEfficencyStatementEntries(students,Collections.singletonList(entry));
}"
69607,"public Map<Long,String> getIdentities(Collection<Long> identityNames){
  Map<Long,String> identityMap=new HashMap<Long,String>();
  List<IdentityShort> identities=securityManager.findShortIdentitiesByKey(identityNames);
  for (  IdentityShort identity : identities) {
    String fullName=identity.getFirstName() + ""String_Node_Str"" + identity.getLastName();
    identityMap.put(identity.getKey(),fullName);
  }
  return identityMap;
}","@Override public Map<Long,String> getIdentities(Collection<Long> identityNames){
  Map<Long,String> identityMap=new HashMap<Long,String>();
  List<IdentityShort> identities=securityManager.findShortIdentitiesByKey(identityNames);
  for (  IdentityShort identity : identities) {
    String fullName=identity.getFirstName() + ""String_Node_Str"" + identity.getLastName();
    identityMap.put(identity.getKey(),fullName);
  }
  return identityMap;
}"
69608,"public boolean isCoach(Identity coach){
  return coachingDao.isCoach(coach);
}","@Override public boolean isCoach(Identity coach){
  return coachingDao.isCoach(coach);
}"
69609,"public List<EfficiencyStatementEntry> loadModel(){
  List<EfficiencyStatementEntry> entries=coachingService.getCourse(getIdentity(),course,0,-1);
  TableDataModel<EfficiencyStatementEntry> model=new EfficiencyStatementEntryTableDataModel(entries);
  tableCtr.setTableDataModel(model);
  return entries;
}","public List<EfficiencyStatementEntry> loadModel(){
  List<EfficiencyStatementEntry> entries=coachingService.getCourse(getIdentity(),course);
  TableDataModel<EfficiencyStatementEntry> model=new EfficiencyStatementEntryTableDataModel(entries);
  tableCtr.setTableDataModel(model);
  return entries;
}"
69610,"public boolean hasRole(IdentityRef identity,RepositoryEntryRef re,String... roles){
  List<String> roleList=GroupRoles.toList(roles);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(RepositoryEntry.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (roleList.size() > 0) {
    sb.append(""String_Node_Str"");
  }
  TypedQuery<Number> query=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),Number.class).setParameter(""String_Node_Str"",identity.getKey()).setParameter(""String_Node_Str"",re.getKey());
  if (roleList.size() > 0) {
    query.setParameter(""String_Node_Str"",roleList);
  }
  Number count=query.getSingleResult();
  return count == null ? false : count.intValue() > 0;
}","/** 
 * Has role in the repository entry only (without business groups)
 * @param identity
 * @param re
 * @param roles
 * @return
 */
public boolean hasRole(IdentityRef identity,RepositoryEntryRef re,String... roles){
  List<String> roleList=GroupRoles.toList(roles);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(RepositoryEntry.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (roleList.size() > 0) {
    sb.append(""String_Node_Str"");
  }
  TypedQuery<Number> query=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),Number.class).setParameter(""String_Node_Str"",identity.getKey()).setParameter(""String_Node_Str"",re.getKey());
  if (roleList.size() > 0) {
    query.setParameter(""String_Node_Str"",roleList);
  }
  Number count=query.getSingleResult();
  return count == null ? false : count.intValue() > 0;
}"
69611,"public List<String> getRoles(IdentityRef identity,RepositoryEntryRef re){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(RepositoryEntry.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  return dbInstance.getCurrentEntityManager().createQuery(sb.toString(),String.class).setParameter(""String_Node_Str"",identity.getKey()).setParameter(""String_Node_Str"",re.getKey()).getResultList();
}","/** 
 * Get roles in the repository entry, with business groups too
 * @param identity
 * @param re
 * @return
 */
public List<String> getRoles(IdentityRef identity,RepositoryEntryRef re){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(RepositoryEntry.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  return dbInstance.getCurrentEntityManager().createQuery(sb.toString(),String.class).setParameter(""String_Node_Str"",identity.getKey()).setParameter(""String_Node_Str"",re.getKey()).getResultList();
}"
69612,"@Override public List<String> getRoles(Identity identity,RepositoryEntryRef re){
  return reToGroupDao.getRoles(identity,re);
}","/** 
 * Get the role in the specified resource, business group are included in the query.
 */
@Override public List<String> getRoles(Identity identity,RepositoryEntryRef re){
  return reToGroupDao.getRoles(identity,re);
}"
69613,"@Override public boolean hasRole(Identity identity,RepositoryEntryRef re,String... roles){
  return reToGroupDao.hasRole(identity,re,roles);
}","/** 
 * Has specific role in the specified resource WITHOUT business groups included in the query.
 */
@Override public boolean hasRole(Identity identity,RepositoryEntryRef re,String... roles){
  return reToGroupDao.hasRole(identity,re,roles);
}"
69614,"private void cleanUp(){
  if (catModificationLock != null && catModificationLock.isSuccess()) {
    CoordinatorManager.getInstance().getCoordinator().getLocker().releaseLock(catModificationLock);
    catModificationLock=null;
  }
  removeAsListenerAndDispose(cfc);
  removeAsListenerAndDispose(cmc);
  removeAsListenerAndDispose(addEntryForm);
  removeAsListenerAndDispose(editEntryForm);
  removeAsListenerAndDispose(groupController);
  cmc=null;
  cfc=null;
  addEntryForm=null;
  editEntryForm=null;
  groupController=null;
}","private void cleanUp(){
  if (catModificationLock != null && catModificationLock.isSuccess()) {
    CoordinatorManager.getInstance().getCoordinator().getLocker().releaseLock(catModificationLock);
    catModificationLock=null;
  }
  removeAsListenerAndDispose(cfc);
  removeAsListenerAndDispose(cmc);
  removeAsListenerAndDispose(addEntryForm);
  removeAsListenerAndDispose(editEntryForm);
  removeAsListenerAndDispose(groupController);
  removeAsListenerAndDispose(repositoryEntryDetailsCtrl);
  removeAsListenerAndDispose(repositoryEditDescriptionController);
  cmc=null;
  cfc=null;
  addEntryForm=null;
  editEntryForm=null;
  groupController=null;
  repositoryEntryDetailsCtrl=null;
  repositoryEditDescriptionController=null;
}"
69615,"private DueDateWrapper forgeRow(int i,FormLayoutContainer tableCont){
  String title=data.getNodePrefix() + ""String_Node_Str"" + (i + 1);
  TextElement titleEl=uifactory.addTextElement(""String_Node_Str"" + i,null,32,title,tableCont);
  titleEl.setDisplaySize(60);
  DateChooser dueDateEl=uifactory.addDateChooser(""String_Node_Str"" + i,""String_Node_Str"",null,tableCont);
  dueDateEl.setDateChooserTimeEnabled(true);
  DueDateWrapper wrapper=new DueDateWrapper(titleEl,dueDateEl);
  return wrapper;
}","private DueDateWrapper forgeRow(int i,FormLayoutContainer tableCont){
  String title=data.getNodePrefix() + ""String_Node_Str"" + (i + 1);
  TextElement titleEl=uifactory.addTextElement(""String_Node_Str"" + i,null,32,title,tableCont);
  titleEl.setDisplaySize(21);
  DateChooser dueDateEl=uifactory.addDateChooser(""String_Node_Str"" + i,""String_Node_Str"",null,tableCont);
  dueDateEl.setDateChooserTimeEnabled(true);
  DueDateWrapper wrapper=new DueDateWrapper(titleEl,dueDateEl);
  return wrapper;
}"
69616,"public void setLabel(String label,String[] params,boolean translate){
  if (label == null) {
    hasLabel=false;
  }
  hasLabel=true;
  translateLabel=translate;
  labelKey=label;
  labelParams=params;
  if (getTranslator() != null && labelKey != null) {
    labelC=new SimpleLabelText(label,getLabelText(),componentIsMandatory);
    labelC.setTranslator(getTranslator());
    labelPanel.setContent(labelC);
  }
 else   if (label == null) {
    labelC=null;
    labelPanel.setContent(labelC);
  }
}","public void setLabel(String label,String[] params,boolean translate){
  hasLabel=(label != null);
  translateLabel=translate;
  labelKey=label;
  labelParams=params;
  if (getTranslator() != null && labelKey != null) {
    labelC=new SimpleLabelText(label,getLabelText(),componentIsMandatory);
    labelC.setTranslator(getTranslator());
    labelPanel.setContent(labelC);
  }
 else   if (label == null) {
    labelC=null;
    labelPanel.setContent(labelC);
  }
}"
69617,"@Override public BusinessGroupEnvironment importGroups(RepositoryEntry re,File fGroupExportXML){
  return businessGroupImportExport.importGroups(re,fGroupExportXML);
}","@Override public BusinessGroupEnvironment importGroups(RepositoryEntry re,File fGroupExportXML){
  BusinessGroupImportExport importer=new BusinessGroupImportExport(dbInstance,areaManager,this,groupModule);
  return importer.importGroups(re,fGroupExportXML);
}"
69618,"@Override public void archiveGroups(List<BusinessGroup> groups,File exportFile){
  businessGroupArchiver.archiveGroups(groups,exportFile);
}","@Override public void archiveGroups(List<BusinessGroup> groups,File exportFile){
  BusinessGroupArchiver archiver=new BusinessGroupArchiver(dbInstance);
  archiver.archiveGroups(groups,exportFile);
}"
69619,"@Override public void exportGroups(List<BusinessGroup> groups,List<BGArea> areas,File fExportFile,BusinessGroupEnvironment env,boolean runtimeDatas,boolean backwardsCompatible){
  businessGroupImportExport.exportGroups(groups,areas,fExportFile,env,runtimeDatas,backwardsCompatible);
}","@Override public void exportGroups(List<BusinessGroup> groups,List<BGArea> areas,File fExportFile,BusinessGroupEnvironment env,boolean runtimeDatas,boolean backwardsCompatible){
  BusinessGroupImportExport exporter=new BusinessGroupImportExport(dbInstance,areaManager,this,groupModule);
  exporter.exportGroups(groups,areas,fExportFile,env,runtimeDatas,backwardsCompatible);
}"
69620,"public FilterForUserController(UserRequest ureq,WindowControl wControl,Forum forum){
  super(ureq,wControl);
  this.forum=forum;
  msgs=ForumManager.getInstance().getMessagesByForum(forum);
  forumOres=OresHelper.createOLATResourceableInstance(Forum.class,forum.getKey());
  mainVC=createVelocityContainer(""String_Node_Str"");
  List<UserInfo> userInfoList=getUserInfoList();
  userListProvider=new UserListProvider(userInfoList);
  boolean ajax=wControl.getWindowBackOffice().getWindowManager().getGlobalSettings().getAjaxFlags().isIframePostEnabled();
  mainVC.contextPut(""String_Node_Str"",new Boolean(ajax));
  userAutoCompleterCtr=new AutoCompleterController(ureq,wControl,userListProvider,null,true,60,3,null);
  listenTo(userAutoCompleterCtr);
  dateFormat=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,ureq.getLocale());
  TableGuiConfiguration tableConfig=new TableGuiConfiguration();
  tableConfig.setSortingEnabled(true);
  userListCtr=new TableController(tableConfig,ureq,wControl,getTranslator());
  DefaultColumnDescriptor lastNameDesc=new DefaultColumnDescriptor(""String_Node_Str"",0,CMD_HOMEPAGE,ureq.getLocale());
  lastNameDesc.setIsPopUpWindowAction(true,""String_Node_Str"");
  userListCtr.addColumnDescriptor(lastNameDesc);
  DefaultColumnDescriptor firstNameDesc=new DefaultColumnDescriptor(""String_Node_Str"",1,CMD_HOMEPAGE,ureq.getLocale());
  firstNameDesc.setIsPopUpWindowAction(true,""String_Node_Str"");
  userListCtr.addColumnDescriptor(firstNameDesc);
  userListCtr.addColumnDescriptor(new DefaultColumnDescriptor(""String_Node_Str"",2,null,ureq.getLocale()));
  userListCtr.addColumnDescriptor(new DefaultColumnDescriptor(""String_Node_Str"",3,null,ureq.getLocale()));
  userListCtr.addColumnDescriptor(new DefaultColumnDescriptor(""String_Node_Str"",4,null,ureq.getLocale()));
  userListCtr.addColumnDescriptor(new DefaultColumnDescriptor(""String_Node_Str"",5,null,ureq.getLocale()));
  userListCtr.addColumnDescriptor(new DefaultColumnDescriptor(""String_Node_Str"",6,null,ureq.getLocale()));
  userListCtr.addColumnDescriptor(new StaticColumnDescriptor(CMD_SHOW,""String_Node_Str"",getTranslator().translate(""String_Node_Str"")));
  usersTableModel=new UsersTableModel(userInfoList);
  userListCtr.setTableDataModel(usersTableModel);
  listenTo(userListCtr);
  mainVC.put(""String_Node_Str"",userAutoCompleterCtr.getInitialComponent());
  mainVC.put(""String_Node_Str"",userListCtr.getInitialComponent());
  vcThreadView=createVelocityContainer(""String_Node_Str"");
  searchPanel=putInitialPanel(mainVC);
}","public FilterForUserController(UserRequest ureq,WindowControl wControl,Forum forum){
  super(ureq,wControl);
  this.forum=forum;
  msgs=ForumManager.getInstance().getMessagesByForum(forum);
  forumOres=OresHelper.createOLATResourceableInstance(Forum.class,forum.getKey());
  mainVC=createVelocityContainer(""String_Node_Str"");
  List<UserInfo> userInfoList=getUserInfoList();
  userListProvider=new UserListProvider(userInfoList);
  boolean ajax=wControl.getWindowBackOffice().getWindowManager().getGlobalSettings().getAjaxFlags().isIframePostEnabled();
  mainVC.contextPut(""String_Node_Str"",new Boolean(ajax));
  userAutoCompleterCtr=new AutoCompleterController(ureq,wControl,userListProvider,null,true,60,3,null);
  listenTo(userAutoCompleterCtr);
  dateFormat=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,ureq.getLocale());
  TableGuiConfiguration tableConfig=new TableGuiConfiguration();
  tableConfig.setSortingEnabled(true);
  userListCtr=new TableController(tableConfig,ureq,wControl,getTranslator());
  DefaultColumnDescriptor lastNameDesc=new DefaultColumnDescriptor(""String_Node_Str"",0,CMD_HOMEPAGE,ureq.getLocale());
  lastNameDesc.setIsPopUpWindowAction(true,""String_Node_Str"");
  userListCtr.addColumnDescriptor(lastNameDesc);
  DefaultColumnDescriptor firstNameDesc=new DefaultColumnDescriptor(""String_Node_Str"",1,CMD_HOMEPAGE,ureq.getLocale());
  firstNameDesc.setIsPopUpWindowAction(true,""String_Node_Str"");
  userListCtr.addColumnDescriptor(firstNameDesc);
  userListCtr.addColumnDescriptor(new DefaultColumnDescriptor(""String_Node_Str"",2,null,ureq.getLocale()));
  userListCtr.addColumnDescriptor(new DefaultColumnDescriptor(""String_Node_Str"",3,null,ureq.getLocale()));
  userListCtr.addColumnDescriptor(new DefaultColumnDescriptor(""String_Node_Str"",4,null,ureq.getLocale()));
  userListCtr.addColumnDescriptor(new DefaultColumnDescriptor(""String_Node_Str"",5,null,ureq.getLocale()));
  userListCtr.addColumnDescriptor(new DefaultColumnDescriptor(""String_Node_Str"",6,null,ureq.getLocale()));
  userListCtr.addColumnDescriptor(new StaticColumnDescriptor(CMD_SHOW,""String_Node_Str"",getTranslator().translate(""String_Node_Str"")));
  usersTableModel=new UsersTableModel(userInfoList);
  userListCtr.setTableDataModel(usersTableModel);
  listenTo(userListCtr);
  mainVC.put(""String_Node_Str"",userAutoCompleterCtr.getInitialComponent());
  mainVC.put(""String_Node_Str"",userListCtr.getInitialComponent());
  vcThreadView=createVelocityContainer(""String_Node_Str"");
  thumbMapper=registerCacheableMapper(ureq,""String_Node_Str"" + forum.getKey(),new Mapper(){
    @Override public MediaResource handle(    String relPath,    HttpServletRequest request){
      String[] query=relPath.split(""String_Node_Str"");
      if (query.length == 4) {
        try {
          Long mId=Long.valueOf(Long.parseLong(query[1]));
          Map<String,Object> map=null;
          for (          Map<String,Object> m : currentMessagesMap) {
            if (m.get(""String_Node_Str"").equals(mId)) {
              map=m;
              break;
            }
          }
          if (map != null) {
            ArrayList<VFSItem> attachments=(ArrayList<VFSItem>)map.get(""String_Node_Str"");
            for (            VFSItem vfsItem : attachments) {
              MetaInfo meta=((MetaTagged)vfsItem).getMetaInfo();
              if (meta.getUUID().equals(query[2])) {
                if (meta.isThumbnailAvailable()) {
                  VFSLeaf thumb=meta.getThumbnail(200,200,false);
                  if (thumb != null) {
                    return new VFSMediaResource(thumb);
                  }
                }
                break;
              }
            }
          }
        }
 catch (        NumberFormatException e) {
          logDebug(""String_Node_Str"" + relPath,null);
        }
      }
      return new NotFoundMediaResource(request.getRequestURI());
    }
  }
);
  searchPanel=putInitialPanel(mainVC);
}"
69621,"protected void showMessages(UserRequest ureq,UserInfo selectedInfo){
  vcThreadView=createVelocityContainer(""String_Node_Str"");
  vcThreadView.contextPut(""String_Node_Str"",selectedInfo.getFirstName());
  vcThreadView.contextPut(""String_Node_Str"",selectedInfo.getLastName());
  vcThreadView.contextPut(""String_Node_Str"",Boolean.FALSE);
  vcThreadView.contextPut(""String_Node_Str"",Boolean.FALSE);
  vcThreadView.contextPut(""String_Node_Str"",Boolean.FALSE);
  vcThreadView.contextPut(""String_Node_Str"",Boolean.FALSE);
  vcThreadView.contextPut(""String_Node_Str"",null);
  threadMsgs=getMessages(selectedInfo.getIdentity());
  currentMessagesMap=new ArrayList<Map<String,Object>>(threadMsgs.size());
  MarkingService markingService=(MarkingService)CoreSpringFactory.getBean(MarkingService.class);
  List<String> markResSubPath=new ArrayList<String>();
  for (  Message threadMsg : threadMsgs) {
    markResSubPath.add(threadMsg.getKey().toString());
  }
  List<Mark> markList=markingService.getMarkManager().getMarks(forumOres,ureq.getIdentity(),markResSubPath);
  Map<String,Mark> marks=new HashMap<String,Mark>(markList.size() * 2 + 1);
  for (  Mark mark : markList) {
    marks.put(mark.getResSubPath(),mark);
  }
  List<MarkResourceStat> statList=markingService.getMarkManager().getStats(forumOres,markResSubPath,null);
  Map<String,MarkResourceStat> stats=new HashMap<String,MarkResourceStat>(statList.size() * 2 + 1);
  for (  MarkResourceStat stat : statList) {
    stats.put(stat.getSubPath(),stat);
  }
  List<Message> orderedMessages=new ArrayList<Message>();
  orderedMessages.addAll(threadMsgs);
  orderedMessages=threadMsgs;
  Collections.sort(orderedMessages,new MessageComparatorByDate());
  int msgNum=0;
  for (  Message msg : orderedMessages) {
    addMessageToCurrentMessagesAndVC(ureq,msg,vcThreadView,currentMessagesMap,msgNum++,marks,stats);
  }
  vcThreadView.contextPut(""String_Node_Str"",currentMessagesMap);
  vcThreadView.contextPut(""String_Node_Str"",new SearchForumCallback());
  searchPanel.setContent(vcThreadView);
}","protected void showMessages(UserRequest ureq,UserInfo selectedInfo){
  vcThreadView=createVelocityContainer(""String_Node_Str"");
  vcThreadView.contextPut(""String_Node_Str"",selectedInfo.getFirstName());
  vcThreadView.contextPut(""String_Node_Str"",selectedInfo.getLastName());
  vcThreadView.contextPut(""String_Node_Str"",Boolean.FALSE);
  vcThreadView.contextPut(""String_Node_Str"",Boolean.FALSE);
  vcThreadView.contextPut(""String_Node_Str"",Boolean.FALSE);
  vcThreadView.contextPut(""String_Node_Str"",Boolean.FALSE);
  vcThreadView.contextPut(""String_Node_Str"",null);
  threadMsgs=getMessages(selectedInfo.getIdentity());
  currentMessagesMap=new ArrayList<Map<String,Object>>(threadMsgs.size());
  MarkingService markingService=(MarkingService)CoreSpringFactory.getBean(MarkingService.class);
  List<String> markResSubPath=new ArrayList<String>();
  for (  Message threadMsg : threadMsgs) {
    markResSubPath.add(threadMsg.getKey().toString());
  }
  List<Mark> markList=markingService.getMarkManager().getMarks(forumOres,ureq.getIdentity(),markResSubPath);
  Map<String,Mark> marks=new HashMap<String,Mark>(markList.size() * 2 + 1);
  for (  Mark mark : markList) {
    marks.put(mark.getResSubPath(),mark);
  }
  List<MarkResourceStat> statList=markingService.getMarkManager().getStats(forumOres,markResSubPath,null);
  Map<String,MarkResourceStat> stats=new HashMap<String,MarkResourceStat>(statList.size() * 2 + 1);
  for (  MarkResourceStat stat : statList) {
    stats.put(stat.getSubPath(),stat);
  }
  List<Message> orderedMessages=new ArrayList<Message>();
  orderedMessages.addAll(threadMsgs);
  orderedMessages=threadMsgs;
  Collections.sort(orderedMessages,new MessageComparatorByDate());
  int msgNum=0;
  for (  Message msg : orderedMessages) {
    addMessageToCurrentMessagesAndVC(ureq,msg,vcThreadView,currentMessagesMap,msgNum++,marks,stats);
  }
  vcThreadView.contextPut(""String_Node_Str"",currentMessagesMap);
  vcThreadView.contextPut(""String_Node_Str"",thumbMapper);
  vcThreadView.contextPut(""String_Node_Str"",new SearchForumCallback());
  searchPanel.setContent(vcThreadView);
}"
69622,"private void addMessageToCurrentMessagesAndVC(UserRequest ureq,Message m,VelocityContainer vcContainer,List<Map<String,Object>> allList,int msgCount,Map<String,Mark> marks,Map<String,MarkResourceStat> stats){
  Map<String,Object> map=new HashMap<String,Object>();
  map.put(""String_Node_Str"",m.getKey());
  map.put(""String_Node_Str"",Boolean.FALSE);
  Date creationDate=m.getCreationDate();
  Identity modifier=m.getModifier();
  if (modifier != null) {
    map.put(""String_Node_Str"",Boolean.TRUE);
    map.put(""String_Node_Str"",modifier.getUser().getProperty(UserConstants.FIRSTNAME,ureq.getLocale()));
    map.put(""String_Node_Str"",modifier.getUser().getProperty(UserConstants.LASTNAME,ureq.getLocale()));
  }
 else {
    map.put(""String_Node_Str"",Boolean.FALSE);
  }
  map.put(""String_Node_Str"",m.getTitle());
  map.put(""String_Node_Str"",m.getBody());
  map.put(""String_Node_Str"",dateFormat.format(creationDate));
  Identity creator=m.getCreator();
  map.put(""String_Node_Str"",Formatter.truncate(creator.getUser().getProperty(UserConstants.FIRSTNAME,ureq.getLocale()),18));
  map.put(""String_Node_Str"",Formatter.truncate(creator.getUser().getProperty(UserConstants.LASTNAME,ureq.getLocale()),18));
  String subPath=m.getKey().toString();
  Mark currentMark=marks.get(subPath);
  MarkResourceStat stat=stats.get(subPath);
  MarkingService markingService=(MarkingService)CoreSpringFactory.getBean(MarkingService.class);
  if (!ureq.getUserSession().getRoles().isGuestOnly()) {
    String businessPath=currentMark == null ? getWindowControl().getBusinessControl().getAsString() + ""String_Node_Str"" + m.getKey()+ ""String_Node_Str"" : currentMark.getBusinessPath();
    Controller markCtrl=markingService.getMarkController(ureq,getWindowControl(),currentMark,stat,forumOres,subPath,businessPath);
    vcThreadView.put(""String_Node_Str"" + msgCount,markCtrl.getInitialComponent());
  }
  map.put(""String_Node_Str"",dateFormat.format(m.getLastModified()));
  ForumManager fm=ForumManager.getInstance();
  OlatRootFolderImpl msgContainer=fm.getMessageContainer(forum.getKey(),m.getKey());
  map.put(""String_Node_Str"",msgContainer);
  List<VFSItem> attachments=new ArrayList<VFSItem>(msgContainer.getItems(new VFSItemExcludePrefixFilter(MessageEditController.ATTACHMENT_EXCLUDE_PREFIXES)));
  map.put(""String_Node_Str"",attachments);
  if (attachments == null || attachments.size() == 0)   map.put(""String_Node_Str"",Boolean.FALSE);
 else   map.put(""String_Node_Str"",Boolean.TRUE);
  map.put(""String_Node_Str"",new Integer(1));
  boolean userIsMsgCreator=ureq.getIdentity().getKey().equals(creator.getKey());
  Boolean uIsMsgC=new Boolean(userIsMsgCreator);
  map.put(""String_Node_Str"",uIsMsgC);
  boolean isThreadtop=m.getThreadtop() == null;
  map.put(""String_Node_Str"",Boolean.valueOf(isThreadtop));
  boolean isThreadClosed=Status.getStatus(m.getStatusCode()).isClosed();
  if (!isThreadtop) {
    isThreadClosed=Status.getStatus(m.getThreadtop().getStatusCode()).isClosed();
  }
  map.put(""String_Node_Str"",isThreadClosed);
  DisplayPortraitController portrait=new DisplayPortraitController(ureq,getWindowControl(),m.getCreator(),true,true);
  map.put(""String_Node_Str"",portrait);
  String portraitComponentVCName=m.getKey().toString();
  map.put(""String_Node_Str"",portraitComponentVCName);
  vcContainer.put(portraitComponentVCName,portrait.getInitialComponent());
  allList.add(map);
  LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
}","private void addMessageToCurrentMessagesAndVC(UserRequest ureq,Message m,VelocityContainer vcContainer,List<Map<String,Object>> allList,int msgCount,Map<String,Mark> marks,Map<String,MarkResourceStat> stats){
  Map<String,Object> map=new HashMap<String,Object>();
  map.put(""String_Node_Str"",m.getKey());
  map.put(""String_Node_Str"",Boolean.FALSE);
  Date creationDate=m.getCreationDate();
  Identity modifier=m.getModifier();
  if (modifier != null) {
    map.put(""String_Node_Str"",Boolean.TRUE);
    map.put(""String_Node_Str"",modifier.getUser().getProperty(UserConstants.FIRSTNAME,ureq.getLocale()));
    map.put(""String_Node_Str"",modifier.getUser().getProperty(UserConstants.LASTNAME,ureq.getLocale()));
  }
 else {
    map.put(""String_Node_Str"",Boolean.FALSE);
  }
  map.put(""String_Node_Str"",m.getTitle());
  map.put(""String_Node_Str"",m.getBody());
  map.put(""String_Node_Str"",dateFormat.format(creationDate));
  Identity creator=m.getCreator();
  map.put(""String_Node_Str"",Formatter.truncate(creator.getUser().getProperty(UserConstants.FIRSTNAME,ureq.getLocale()),18));
  map.put(""String_Node_Str"",Formatter.truncate(creator.getUser().getProperty(UserConstants.LASTNAME,ureq.getLocale()),18));
  String subPath=m.getKey().toString();
  Mark currentMark=marks.get(subPath);
  MarkResourceStat stat=stats.get(subPath);
  MarkingService markingService=(MarkingService)CoreSpringFactory.getBean(MarkingService.class);
  if (!ureq.getUserSession().getRoles().isGuestOnly()) {
    String businessPath=currentMark == null ? getWindowControl().getBusinessControl().getAsString() + ""String_Node_Str"" + m.getKey()+ ""String_Node_Str"" : currentMark.getBusinessPath();
    Controller markCtrl=markingService.getMarkController(ureq,getWindowControl(),currentMark,stat,forumOres,subPath,businessPath);
    vcThreadView.put(""String_Node_Str"" + msgCount,markCtrl.getInitialComponent());
  }
  map.put(""String_Node_Str"",dateFormat.format(m.getLastModified()));
  ForumManager fm=ForumManager.getInstance();
  OlatRootFolderImpl msgContainer=fm.getMessageContainer(forum.getKey(),m.getKey());
  map.put(""String_Node_Str"",msgContainer);
  List<VFSItem> attachments=new ArrayList<VFSItem>(msgContainer.getItems(new VFSItemExcludePrefixFilter(MessageEditController.ATTACHMENT_EXCLUDE_PREFIXES)));
  map.put(""String_Node_Str"",attachments);
  if (attachments == null || attachments.size() == 0)   map.put(""String_Node_Str"",Boolean.FALSE);
 else   map.put(""String_Node_Str"",Boolean.TRUE);
  map.put(""String_Node_Str"",new Integer(1));
  boolean userIsMsgCreator=ureq.getIdentity().getKey().equals(creator.getKey());
  Boolean uIsMsgC=new Boolean(userIsMsgCreator);
  map.put(""String_Node_Str"",uIsMsgC);
  boolean isThreadtop=m.getThreadtop() == null;
  map.put(""String_Node_Str"",Boolean.valueOf(isThreadtop));
  boolean isThreadClosed=Status.getStatus(m.getStatusCode()).isClosed();
  if (!isThreadtop) {
    isThreadClosed=Status.getStatus(m.getThreadtop().getStatusCode()).isClosed();
  }
  map.put(""String_Node_Str"",isThreadClosed);
  DisplayPortraitController portrait=new DisplayPortraitController(ureq,getWindowControl(),m.getCreator(),true,true);
  map.put(""String_Node_Str"",portrait);
  String portraitComponentVCName=m.getKey().toString();
  map.put(""String_Node_Str"",portraitComponentVCName);
  vcContainer.put(portraitComponentVCName,portrait.getInitialComponent());
  Link vcLink=LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,UserManager.getInstance().getUserDisplayName(creator),Link.LINK_CUSTOM_CSS + Link.NONTRANSLATED,vcThreadView,this);
  vcLink.setUserObject(msgCount);
  LinkPopupSettings settings=new LinkPopupSettings(800,600,""String_Node_Str"");
  vcLink.setPopup(settings);
  allList.add(map);
  Link link=LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  link.setIconRightCSS(""String_Node_Str"");
}"
69623,"private void addMessageToCurrentMessagesAndVC(UserRequest ureq,Message m,VelocityContainer vcContainer,List<Map<String,Object>> allList,int msgCount,Map<String,Mark> marks,Map<String,MarkResourceStat> stats){
  Map<String,Object> map=new HashMap<String,Object>();
  map.put(""String_Node_Str"",m.getKey());
  if (rms.contains(m.getKey())) {
    map.put(""String_Node_Str"",Boolean.FALSE);
  }
 else {
    markRead(m,ureq.getIdentity());
    map.put(""String_Node_Str"",Boolean.TRUE);
  }
  Date creationDate=m.getCreationDate();
  Identity modifier=m.getModifier();
  if (modifier != null) {
    map.put(""String_Node_Str"",Boolean.TRUE);
    map.put(""String_Node_Str"",modifier.getUser().getProperty(UserConstants.FIRSTNAME,ureq.getLocale()));
    map.put(""String_Node_Str"",modifier.getUser().getProperty(UserConstants.LASTNAME,ureq.getLocale()));
  }
 else {
    map.put(""String_Node_Str"",Boolean.FALSE);
  }
  map.put(""String_Node_Str"",m.getTitle());
  map.put(""String_Node_Str"",m.getBody());
  map.put(""String_Node_Str"",f.formatDateAndTime(creationDate));
  Identity creator=m.getCreator();
  map.put(""String_Node_Str"",creator.getKey());
  map.put(""String_Node_Str"",Formatter.truncate(creator.getUser().getProperty(UserConstants.FIRSTNAME,ureq.getLocale()),18));
  map.put(""String_Node_Str"",Formatter.truncate(creator.getUser().getProperty(UserConstants.LASTNAME,ureq.getLocale()),18));
  map.put(""String_Node_Str"",f.formatDateAndTime(m.getLastModified()));
  OlatRootFolderImpl msgContainer=fm.getMessageContainer(forum.getKey(),m.getKey());
  map.put(""String_Node_Str"",msgContainer);
  final List<VFSItem> attachments=new ArrayList<VFSItem>(msgContainer.getItems(new VFSItemExcludePrefixFilter(MessageEditController.ATTACHMENT_EXCLUDE_PREFIXES)));
  map.put(""String_Node_Str"",attachments);
  if (attachments == null || attachments.size() == 0)   map.put(""String_Node_Str"",Boolean.FALSE);
 else   map.put(""String_Node_Str"",Boolean.TRUE);
  int numOfChildren;
  numOfChildren=countNumOfChildren(m,threadMsgs);
  Integer nOfCh=new Integer(numOfChildren);
  map.put(""String_Node_Str"",nOfCh);
  boolean userIsMsgCreator=ureq.getIdentity().getKey().equals(creator.getKey());
  Boolean uIsMsgC=new Boolean(userIsMsgCreator);
  map.put(""String_Node_Str"",uIsMsgC);
  boolean isThreadtop=m.getThreadtop() == null;
  map.put(""String_Node_Str"",Boolean.valueOf(isThreadtop));
  boolean isThreadClosed=Status.getStatus(m.getStatusCode()).isClosed();
  if (!isThreadtop) {
    isThreadClosed=Status.getStatus(m.getThreadtop().getStatusCode()).isClosed();
  }
  map.put(""String_Node_Str"",isThreadClosed);
  if (!isGuestOnly(ureq)) {
    DisplayPortraitController portrait=new DisplayPortraitController(ureq,getWindowControl(),m.getCreator(),true,true,false,true);
    map.put(""String_Node_Str"",portrait);
    String portraitComponentVCName=m.getKey().toString();
    map.put(""String_Node_Str"",portraitComponentVCName);
    vcContainer.put(portraitComponentVCName,portrait.getInitialComponent());
    Link vcLink=LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,UserManager.getInstance().getUserDisplayName(creator),Link.LINK_CUSTOM_CSS + Link.NONTRANSLATED,vcThreadView,this);
    vcLink.setUserObject(msgCount);
    LinkPopupSettings settings=new LinkPopupSettings(800,600,""String_Node_Str"");
    vcLink.setPopup(settings);
  }
  allList.add(map);
  LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  String subPath=m.getKey().toString();
  Mark currentMark=marks.get(subPath);
  MarkResourceStat stat=stats.get(subPath);
  MarkingService markingService=(MarkingService)CoreSpringFactory.getBean(MarkingService.class);
  if (!ureq.getUserSession().getRoles().isGuestOnly()) {
    String businessPath=currentMark == null ? getWindowControl().getBusinessControl().getAsString() + ""String_Node_Str"" + m.getKey()+ ""String_Node_Str"" : currentMark.getBusinessPath();
    Controller markCtrl=markingService.getMarkController(ureq,getWindowControl(),currentMark,stat,forumOres,subPath,businessPath);
    vcThreadView.put(""String_Node_Str"" + msgCount,markCtrl.getInitialComponent());
  }
  if (uIsMsgC) {
    OLATResourceable messageOres=OresHelper.createOLATResourceableInstance(""String_Node_Str"",m.getKey());
    String businessPath=BusinessControlFactory.getInstance().getAsString(getWindowControl().getBusinessControl()) + ""String_Node_Str"" + m.getKey()+ ""String_Node_Str"";
    Controller ePFCollCtrl=EPUIFactory.createArtefactCollectWizzardController(ureq,getWindowControl(),messageOres,businessPath);
    if (ePFCollCtrl != null) {
      String ePFAddComponentName=""String_Node_Str"" + msgCount;
      map.put(""String_Node_Str"",ePFCollCtrl);
      map.put(""String_Node_Str"",ePFAddComponentName);
      vcThreadView.put(ePFAddComponentName,ePFCollCtrl.getInitialComponent());
    }
  }
}","private void addMessageToCurrentMessagesAndVC(UserRequest ureq,Message m,VelocityContainer vcContainer,List<Map<String,Object>> allList,int msgCount,Map<String,Mark> marks,Map<String,MarkResourceStat> stats){
  Map<String,Object> map=new HashMap<String,Object>();
  map.put(""String_Node_Str"",m.getKey());
  if (rms.contains(m.getKey())) {
    map.put(""String_Node_Str"",Boolean.FALSE);
  }
 else {
    markRead(m,ureq.getIdentity());
    map.put(""String_Node_Str"",Boolean.TRUE);
  }
  Date creationDate=m.getCreationDate();
  Identity modifier=m.getModifier();
  if (modifier != null) {
    map.put(""String_Node_Str"",Boolean.TRUE);
    map.put(""String_Node_Str"",modifier.getUser().getProperty(UserConstants.FIRSTNAME,ureq.getLocale()));
    map.put(""String_Node_Str"",modifier.getUser().getProperty(UserConstants.LASTNAME,ureq.getLocale()));
  }
 else {
    map.put(""String_Node_Str"",Boolean.FALSE);
  }
  map.put(""String_Node_Str"",m.getTitle());
  map.put(""String_Node_Str"",m.getBody());
  map.put(""String_Node_Str"",f.formatDateAndTime(creationDate));
  Identity creator=m.getCreator();
  map.put(""String_Node_Str"",creator.getKey());
  map.put(""String_Node_Str"",Formatter.truncate(creator.getUser().getProperty(UserConstants.FIRSTNAME,ureq.getLocale()),18));
  map.put(""String_Node_Str"",Formatter.truncate(creator.getUser().getProperty(UserConstants.LASTNAME,ureq.getLocale()),18));
  map.put(""String_Node_Str"",f.formatDateAndTime(m.getLastModified()));
  OlatRootFolderImpl msgContainer=fm.getMessageContainer(forum.getKey(),m.getKey());
  map.put(""String_Node_Str"",msgContainer);
  final List<VFSItem> attachments=new ArrayList<VFSItem>(msgContainer.getItems(new VFSItemExcludePrefixFilter(MessageEditController.ATTACHMENT_EXCLUDE_PREFIXES)));
  map.put(""String_Node_Str"",attachments);
  if (attachments == null || attachments.size() == 0)   map.put(""String_Node_Str"",Boolean.FALSE);
 else   map.put(""String_Node_Str"",Boolean.TRUE);
  int numOfChildren;
  numOfChildren=countNumOfChildren(m,threadMsgs);
  Integer nOfCh=new Integer(numOfChildren);
  map.put(""String_Node_Str"",nOfCh);
  boolean userIsMsgCreator=ureq.getIdentity().getKey().equals(creator.getKey());
  Boolean uIsMsgC=new Boolean(userIsMsgCreator);
  map.put(""String_Node_Str"",uIsMsgC);
  boolean isThreadtop=m.getThreadtop() == null;
  map.put(""String_Node_Str"",Boolean.valueOf(isThreadtop));
  boolean isThreadClosed=Status.getStatus(m.getStatusCode()).isClosed();
  if (!isThreadtop) {
    isThreadClosed=Status.getStatus(m.getThreadtop().getStatusCode()).isClosed();
  }
  map.put(""String_Node_Str"",isThreadClosed);
  if (!isGuestOnly(ureq)) {
    DisplayPortraitController portrait=new DisplayPortraitController(ureq,getWindowControl(),m.getCreator(),true,true,false,true);
    map.put(""String_Node_Str"",portrait);
    String portraitComponentVCName=m.getKey().toString();
    map.put(""String_Node_Str"",portraitComponentVCName);
    vcContainer.put(portraitComponentVCName,portrait.getInitialComponent());
    Link vcLink=LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,UserManager.getInstance().getUserDisplayName(creator),Link.LINK_CUSTOM_CSS + Link.NONTRANSLATED,vcThreadView,this);
    vcLink.setUserObject(msgCount);
    LinkPopupSettings settings=new LinkPopupSettings(800,600,""String_Node_Str"");
    vcLink.setPopup(settings);
  }
  allList.add(map);
  Link dlLink=LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  dlLink.setIconLeftCSS(""String_Node_Str"");
  Link edLink=LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  edLink.setIconLeftCSS(""String_Node_Str"");
  Link qtLink=LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  qtLink.setIconLeftCSS(""String_Node_Str"");
  Link rpLink=LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.BUTTON_SMALL,vcThreadView,this);
  rpLink.setIconLeftCSS(""String_Node_Str"");
  Link splitLink=LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.LINK,vcThreadView,this);
  splitLink.setIconLeftCSS(""String_Node_Str"");
  Link moveLink=LinkFactory.createCustomLink(""String_Node_Str"" + msgCount,""String_Node_Str"" + msgCount,""String_Node_Str"",Link.LINK,vcThreadView,this);
  moveLink.setIconLeftCSS(""String_Node_Str"");
  String subPath=m.getKey().toString();
  Mark currentMark=marks.get(subPath);
  MarkResourceStat stat=stats.get(subPath);
  MarkingService markingService=(MarkingService)CoreSpringFactory.getBean(MarkingService.class);
  if (!ureq.getUserSession().getRoles().isGuestOnly()) {
    String businessPath=currentMark == null ? getWindowControl().getBusinessControl().getAsString() + ""String_Node_Str"" + m.getKey()+ ""String_Node_Str"" : currentMark.getBusinessPath();
    Controller markCtrl=markingService.getMarkController(ureq,getWindowControl(),currentMark,stat,forumOres,subPath,businessPath);
    vcThreadView.put(""String_Node_Str"" + msgCount,markCtrl.getInitialComponent());
  }
  if (uIsMsgC) {
    OLATResourceable messageOres=OresHelper.createOLATResourceableInstance(""String_Node_Str"",m.getKey());
    String businessPath=BusinessControlFactory.getInstance().getAsString(getWindowControl().getBusinessControl()) + ""String_Node_Str"" + m.getKey()+ ""String_Node_Str"";
    Controller ePFCollCtrl=EPUIFactory.createArtefactCollectWizzardController(ureq,getWindowControl(),messageOres,businessPath);
    if (ePFCollCtrl != null) {
      String ePFAddComponentName=""String_Node_Str"" + msgCount;
      map.put(""String_Node_Str"",ePFCollCtrl);
      map.put(""String_Node_Str"",ePFAddComponentName);
      vcThreadView.put(ePFAddComponentName,ePFCollCtrl.getInitialComponent());
    }
  }
}"
69624,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnModel=initColumnModel();
  groupTableModel=new BusinessGroupFlexiTableModel(getTranslator(),columnModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",groupTableModel,20,false,getTranslator(),formLayout);
  FlexiTableSortOptions options=new FlexiTableSortOptions();
  options.setFromColumnModel(true);
  tableEl.setSortSettings(options);
  searchCtrl=new BusinessGroupSearchController(ureq,getWindowControl(),isAdmin(),true,false,mainForm);
  listenTo(searchCtrl);
  tableEl.setSearchEnabled(true);
  tableEl.setExtendedSearch(searchCtrl);
  initButtons(formLayout,ureq);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnModel=initColumnModel();
  groupTableModel=new BusinessGroupFlexiTableModel(getTranslator(),columnModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",groupTableModel,20,false,getTranslator(),formLayout);
  FlexiTableSortOptions options=new FlexiTableSortOptions();
  options.setFromColumnModel(true);
  tableEl.setSortSettings(options);
  searchCtrl=new BusinessGroupSearchController(ureq,getWindowControl(),isAdmin(),true,false,mainForm);
  searchCtrl.setEnabled(false);
  listenTo(searchCtrl);
  tableEl.setSearchEnabled(true);
  tableEl.setExtendedSearch(searchCtrl);
  initButtons(formLayout,ureq);
}"
69625,"public AbstractItemListController(UserRequest ureq,WindowControl wControl,QuestionItemsSource source,String key){
  super(ureq,wControl,""String_Node_Str"");
  this.itemsSource=source;
  markManager=CoreSpringFactory.getImpl(MarkManager.class);
  qpoolService=CoreSpringFactory.getImpl(QPoolService.class);
  eventBus=ureq.getUserSession().getSingleUserEventCenter();
  eventBus.registerFor(this,getIdentity(),QuestionPoolMainEditorController.QITEM_MARKED);
  extendedSearchCtrl=new ExtendedSearchController(ureq,getWindowControl(),key,mainForm);
  listenTo(extendedSearchCtrl);
  initForm(ureq);
}","public AbstractItemListController(UserRequest ureq,WindowControl wControl,QuestionItemsSource source,String key){
  super(ureq,wControl,""String_Node_Str"");
  this.itemsSource=source;
  markManager=CoreSpringFactory.getImpl(MarkManager.class);
  qpoolService=CoreSpringFactory.getImpl(QPoolService.class);
  eventBus=ureq.getUserSession().getSingleUserEventCenter();
  eventBus.registerFor(this,getIdentity(),QuestionPoolMainEditorController.QITEM_MARKED);
  extendedSearchCtrl=new ExtendedSearchController(ureq,getWindowControl(),key,mainForm);
  extendedSearchCtrl.setEnabled(false);
  listenTo(extendedSearchCtrl);
  initForm(ureq);
}"
69626,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  searchCtrl=new AuthorSearchController(ureq,getWindowControl(),true,!startExtendedSearch,mainForm);
  listenTo(searchCtrl);
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.key.i18nKey(),Cols.key.ordinal(),true,OrderBy.key.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.mark.i18nKey(),Cols.mark.ordinal(),true,OrderBy.favorit.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.type.i18nKey(),Cols.type.ordinal(),true,OrderBy.type.name(),FlexiColumnModel.ALIGNMENT_LEFT,new TypeRenderer()));
  FlexiCellRenderer renderer=new StaticFlexiCellRenderer(""String_Node_Str"",new TextFlexiCellRenderer());
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(Cols.displayName.i18nKey(),Cols.displayName.ordinal(),""String_Node_Str"",true,OrderBy.displayname.name(),renderer));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.authors.i18nKey(),Cols.authors.ordinal(),true,OrderBy.authors.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.lifecycleLabel.i18nKey(),Cols.lifecycleLabel.ordinal(),true,OrderBy.lifecycleLabel.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.lifecycleSoftkey.i18nKey(),Cols.lifecycleSoftkey.ordinal(),true,OrderBy.lifecycleSoftkey.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.lifecycleStart.i18nKey(),Cols.lifecycleStart.ordinal(),true,OrderBy.lifecycleStart.name(),FlexiColumnModel.ALIGNMENT_LEFT,new DateFlexiCellRenderer(getLocale())));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.lifecycleEnd.i18nKey(),Cols.lifecycleEnd.ordinal(),true,OrderBy.lifecycleEnd.name(),FlexiColumnModel.ALIGNMENT_LEFT,new DateFlexiCellRenderer(getLocale())));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.author.i18nKey(),Cols.author.ordinal(),true,OrderBy.author.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.access.i18nKey(),Cols.access.ordinal(),true,OrderBy.ac.name(),FlexiColumnModel.ALIGNMENT_LEFT,new AccessRenderer()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.ac.i18nKey(),Cols.ac.ordinal(),true,OrderBy.ac.name(),FlexiColumnModel.ALIGNMENT_LEFT,new ACRenderer()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.creationDate.i18nKey(),Cols.creationDate.ordinal(),true,OrderBy.creationDate.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.lastUsage.i18nKey(),Cols.lastUsage.ordinal(),true,OrderBy.lastUsage.name()));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",-1,""String_Node_Str"",new StaticFlexiCellRenderer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",-1,""String_Node_Str"",new StaticFlexiCellRenderer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  model=new AuthoringEntryDataModel(dataSource,columnsModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,20,!startExtendedSearch,getTranslator(),formLayout);
  tableEl.setSearchEnabled(true);
  tableEl.setExportEnabled(true);
  tableEl.setExtendedSearch(searchCtrl);
  tableEl.setCustomizeColumns(true);
  tableEl.setElementCssClass(""String_Node_Str"");
  tableEl.setMultiSelect(true);
  tableEl.setSortSettings(new FlexiTableSortOptions(true));
  tableEl.setAndLoadPersistedPreferences(ureq,""String_Node_Str"" + i18nName);
  if (startExtendedSearch) {
    tableEl.expandExtendedSearch(ureq);
  }
 else {
    tableEl.setFilters(null,getFilters());
  }
  addOwnersButton=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  searchCtrl=new AuthorSearchController(ureq,getWindowControl(),true,!startExtendedSearch,mainForm);
  searchCtrl.setEnabled(false);
  listenTo(searchCtrl);
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.key.i18nKey(),Cols.key.ordinal(),true,OrderBy.key.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.mark.i18nKey(),Cols.mark.ordinal(),true,OrderBy.favorit.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.type.i18nKey(),Cols.type.ordinal(),true,OrderBy.type.name(),FlexiColumnModel.ALIGNMENT_LEFT,new TypeRenderer()));
  FlexiCellRenderer renderer=new StaticFlexiCellRenderer(""String_Node_Str"",new TextFlexiCellRenderer());
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(Cols.displayName.i18nKey(),Cols.displayName.ordinal(),""String_Node_Str"",true,OrderBy.displayname.name(),renderer));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.authors.i18nKey(),Cols.authors.ordinal(),true,OrderBy.authors.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.lifecycleLabel.i18nKey(),Cols.lifecycleLabel.ordinal(),true,OrderBy.lifecycleLabel.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.lifecycleSoftkey.i18nKey(),Cols.lifecycleSoftkey.ordinal(),true,OrderBy.lifecycleSoftkey.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.lifecycleStart.i18nKey(),Cols.lifecycleStart.ordinal(),true,OrderBy.lifecycleStart.name(),FlexiColumnModel.ALIGNMENT_LEFT,new DateFlexiCellRenderer(getLocale())));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.lifecycleEnd.i18nKey(),Cols.lifecycleEnd.ordinal(),true,OrderBy.lifecycleEnd.name(),FlexiColumnModel.ALIGNMENT_LEFT,new DateFlexiCellRenderer(getLocale())));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.author.i18nKey(),Cols.author.ordinal(),true,OrderBy.author.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.access.i18nKey(),Cols.access.ordinal(),true,OrderBy.ac.name(),FlexiColumnModel.ALIGNMENT_LEFT,new AccessRenderer()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.ac.i18nKey(),Cols.ac.ordinal(),true,OrderBy.ac.name(),FlexiColumnModel.ALIGNMENT_LEFT,new ACRenderer()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.creationDate.i18nKey(),Cols.creationDate.ordinal(),true,OrderBy.creationDate.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.lastUsage.i18nKey(),Cols.lastUsage.ordinal(),true,OrderBy.lastUsage.name()));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",-1,""String_Node_Str"",new StaticFlexiCellRenderer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",-1,""String_Node_Str"",new StaticFlexiCellRenderer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  model=new AuthoringEntryDataModel(dataSource,columnsModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,20,!startExtendedSearch,getTranslator(),formLayout);
  tableEl.setSearchEnabled(true);
  tableEl.setExportEnabled(true);
  tableEl.setExtendedSearch(searchCtrl);
  tableEl.setCustomizeColumns(true);
  tableEl.setElementCssClass(""String_Node_Str"");
  tableEl.setMultiSelect(true);
  tableEl.setSortSettings(new FlexiTableSortOptions(true));
  tableEl.setAndLoadPersistedPreferences(ureq,""String_Node_Str"" + i18nName);
  if (startExtendedSearch) {
    tableEl.expandExtendedSearch(ureq);
  }
 else {
    tableEl.setFilters(null,getFilters());
  }
  addOwnersButton=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}"
69627,"String getFormDispatchId(){
  return name;
}","String getFormDispatchId(){
  return selectionWrapper.getFormDispatchId() + ""String_Node_Str"" + which;
}"
69628,"RadioElementComponent(String name,SingleSelection selectionWrapper,int which){
  this.selectionWrapper=selectionWrapper;
  this.which=which;
  this.name=name;
}","RadioElementComponent(SingleSelection selectionWrapper,int which){
  this.selectionWrapper=selectionWrapper;
  this.which=which;
}"
69629,"private void initSelectionElements(){
  boolean createValues=(values == null) || (values.length == 0);
  if (createValues) {
    values=new String[keys.length];
    for (int i=0; i < keys.length; i++) {
      values[i]=translator.translate(keys[i]);
    }
  }
  if (layout == Layout.select) {
    String ssscId=getFormItemId() == null ? null : getFormItemId() + ""String_Node_Str"";
    component=new SelectboxComponent(ssscId,getName() + ""String_Node_Str"",translator,this,keys,values,cssClasses);
  }
 else {
    RadioElementComponent[] radios=new RadioElementComponent[keys.length];
    for (int i=0; i < keys.length; i++) {
      String radioName=getName() + ""String_Node_Str"" + keys[i];
      radios[i]=new RadioElementComponent(radioName,this,i);
    }
    String ssscId=getFormItemId() == null ? null : getFormItemId() + ""String_Node_Str"";
    SingleSelectionComponent ssc=new SingleSelectionComponent(ssscId,this);
    ssc.setRadioComponents(radios);
    component=ssc;
  }
}","private void initSelectionElements(){
  boolean createValues=(values == null) || (values.length == 0);
  if (createValues) {
    values=new String[keys.length];
    for (int i=0; i < keys.length; i++) {
      values[i]=translator.translate(keys[i]);
    }
  }
  if (layout == Layout.select) {
    String ssscId=getFormItemId() == null ? null : getFormItemId() + ""String_Node_Str"";
    component=new SelectboxComponent(ssscId,getName() + ""String_Node_Str"",translator,this,keys,values,cssClasses);
  }
 else {
    RadioElementComponent[] radios=new RadioElementComponent[keys.length];
    for (int i=0; i < keys.length; i++) {
      radios[i]=new RadioElementComponent(this,i);
    }
    String ssscId=getFormItemId() == null ? null : getFormItemId() + ""String_Node_Str"";
    SingleSelectionComponent ssc=new SingleSelectionComponent(ssscId,this);
    ssc.setRadioComponents(radios);
    component=ssc;
  }
}"
69630,"private void renderRadio(StringOutput sb,SingleSelectionComponent source,RadioElementComponent ssec,boolean inline){
  String subStrName=""String_Node_Str"" + ssec.getGroupingName() + ""String_Node_Str"";
  String key=ssec.getKey();
  String value=ssec.getValue();
  boolean selected=ssec.isSelected();
  sb.append(""String_Node_Str"").append(""String_Node_Str"",inline).append(""String_Node_Str"").append(ssec.getFormDispatchId()).append(""String_Node_Str"").append(""String_Node_Str"").append(ssec.getFormDispatchId()).append(""String_Node_Str"").append(""String_Node_Str"").append(subStrName).append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(""String_Node_Str"",selected);
  if (source.isEnabled()) {
    sb.append(FormJSHelper.getRawJSFor(ssec.getRootForm(),ssec.getSelectionElementFormDisId(),ssec.getAction()));
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(value).append(""String_Node_Str"");
  if (source.isEnabled()) {
    sb.append(FormJSHelper.getJSStartWithVarDeclaration(ssec.getFormDispatchId()));
    sb.append(FormJSHelper.getSetFlexiFormDirtyForCheckbox(ssec.getRootForm(),ssec.getFormDispatchId()));
    sb.append(FormJSHelper.getJSEnd());
  }
}","private void renderRadio(StringOutput sb,SingleSelectionComponent source,RadioElementComponent ssec,boolean inline){
  String subStrName=""String_Node_Str"" + ssec.getGroupingName() + ""String_Node_Str"";
  String key=ssec.getKey();
  String value=ssec.getValue();
  boolean selected=ssec.isSelected();
  String formDispatchId=ssec.getFormDispatchId();
  sb.append(""String_Node_Str"").append(""String_Node_Str"",inline).append(""String_Node_Str"").append(formDispatchId).append(""String_Node_Str"").append(""String_Node_Str"").append(formDispatchId).append(""String_Node_Str"").append(""String_Node_Str"").append(subStrName).append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(""String_Node_Str"",selected);
  if (source.isEnabled()) {
    sb.append(FormJSHelper.getRawJSFor(ssec.getRootForm(),ssec.getSelectionElementFormDisId(),ssec.getAction()));
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(value).append(""String_Node_Str"");
  if (source.isEnabled()) {
    sb.append(FormJSHelper.getJSStartWithVarDeclaration(formDispatchId)).append(FormJSHelper.getSetFlexiFormDirtyForCheckbox(ssec.getRootForm(),formDispatchId)).append(FormJSHelper.getJSEnd());
  }
}"
69631,"@Override public MediaResource handle(String relPath,HttpServletRequest request){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(themeBaseUri).append(""String_Node_Str"").append(""String_Node_Str"").append(themeBaseUri).append(""String_Node_Str"").append(""String_Node_Str"");
  List<KalendarEventRenderWrapper> sortedEventsWithin=new ArrayList<KalendarEventRenderWrapper>();
  collectEvents(sortedEventsWithin,calendarWrappers);
  collectEvents(sortedEventsWithin,importedCalendarWrappers);
  Collections.sort(sortedEventsWithin,KalendarEventDateComparator.getInstance());
  renderEvents(sb,sortedEventsWithin,from,to);
  renderCalendars(sb);
  sb.append(""String_Node_Str"");
  StringMediaResource smr=new StringMediaResource();
  smr.setContentType(""String_Node_Str"");
  smr.setEncoding(""String_Node_Str"");
  smr.setData(sb.toString());
  return smr;
}","@Override public MediaResource handle(String relPath,HttpServletRequest request){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(themeBaseUri).append(""String_Node_Str"").append(""String_Node_Str"").append(themeBaseUri).append(""String_Node_Str"").append(""String_Node_Str"");
  List<KalendarEventRenderWrapper> sortedEventsWithin=new ArrayList<KalendarEventRenderWrapper>();
  collectEvents(sortedEventsWithin,calendarWrappers);
  collectEvents(sortedEventsWithin,importedCalendarWrappers);
  Collections.sort(sortedEventsWithin,KalendarEventDateComparator.getInstance());
  renderEvents(sb,sortedEventsWithin,from,to);
  renderCalendars(sb);
  sb.append(""String_Node_Str"");
  StringMediaResource smr=new StringMediaResource();
  smr.setContentType(""String_Node_Str"");
  smr.setEncoding(""String_Node_Str"");
  smr.setData(sb.toString());
  return smr;
}"
69632,"@Override public void setSortSettings(FlexiTableSortOptions options){
  this.sortOptions=options;
}","@Override public void setSortSettings(FlexiTableSortOptions options){
  this.sortOptions=options;
  if (options.getDefaultOrderBy() != null) {
    orderBy=new SortKey[]{options.getDefaultOrderBy()};
  }
}"
69633,"@Override public void reloadData(){
  if (dataSource != null) {
    dataSource.clear();
    dataSource.load(getSearchText(),getConditionalQueries(),0,getPageSize());
  }
 else {
    if (dataModel instanceof FilterableFlexiTableModel) {
      if (isFilterEnabled()) {
        String filter=getSelectedFilterKey();
        ((FilterableFlexiTableModel)dataModel).filter(filter);
      }
    }
    if (dataModel instanceof SortableFlexiTableDataModel) {
      if (orderBy != null && orderBy.length > 0) {
        ((SortableFlexiTableDataModel<?>)dataModel).sort(orderBy[0]);
      }
    }
  }
  component.setDirty(true);
}","@Override public void reloadData(){
  if (dataSource != null) {
    dataSource.clear();
    dataSource.load(getSearchText(),getConditionalQueries(),0,getPageSize(),orderBy);
  }
 else {
    if (dataModel instanceof FilterableFlexiTableModel) {
      if (isFilterEnabled()) {
        String filter=getSelectedFilterKey();
        ((FilterableFlexiTableModel)dataModel).filter(filter);
      }
    }
    if (dataModel instanceof SortableFlexiTableDataModel) {
      if (orderBy != null && orderBy.length > 0) {
        ((SortableFlexiTableDataModel<?>)dataModel).sort(orderBy[0]);
      }
    }
  }
  component.setDirty(true);
}"
69634,"@Override public void collapseExtendedSearch(){
  extendedSearchExpanded=false;
  extendedSearchCtrl.setEnabled(false);
}","@Override public void collapseExtendedSearch(){
  extendedSearchExpanded=false;
  extendedSearchCtrl.setEnabled(false);
  if (searchFieldEl != null) {
    searchFieldEl.setVisible(true);
  }
}"
69635,"protected void evalSearchRequest(UserRequest ureq){
  if (searchFieldEl == null)   return;
  searchFieldEl.evalFormRequest(ureq);
  String search=searchFieldEl.getValue();
  if (StringHelper.containsNonWhitespace(search)) {
    doSearch(ureq,search,null);
  }
 else {
    doResetSearch();
  }
}","protected void evalSearchRequest(UserRequest ureq){
  if (searchFieldEl == null || !searchFieldEl.isEnabled() || !searchFieldEl.isVisible()) {
    return;
  }
  searchFieldEl.evalFormRequest(ureq);
  String search=searchFieldEl.getValue();
  if (StringHelper.containsNonWhitespace(search)) {
    doSearch(ureq,search,null);
  }
 else {
    doResetSearch();
  }
}"
69636,"@Override public void expandExtendedSearch(UserRequest ureq){
  component.setDirty(true);
  extendedSearchExpanded=true;
  extendedSearchCtrl.setEnabled(true);
}","@Override public void expandExtendedSearch(UserRequest ureq){
  component.setDirty(true);
  extendedSearchExpanded=true;
  extendedSearchCtrl.setEnabled(true);
  if (searchFieldEl != null) {
    searchFieldEl.setVisible(false);
  }
}"
69637,"protected void evalExtendedSearch(UserRequest ureq){
  String search=null;
  if (searchFieldEl != null) {
    searchFieldEl.evalFormRequest(ureq);
    search=searchFieldEl.getValue();
  }
  List<String> condQueries=extendedSearchCtrl.getConditionalQueries();
  doSearch(ureq,search,condQueries);
}","protected void evalExtendedSearch(UserRequest ureq){
  String search=null;
  if (searchFieldEl != null && searchFieldEl.isEnabled() && searchFieldEl.isVisible()) {
    searchFieldEl.evalFormRequest(ureq);
    search=searchFieldEl.getValue();
  }
  List<String> condQueries=extendedSearchCtrl.getConditionalQueries();
  doSearch(ureq,search,condQueries);
}"
69638,"public int countRelations(Group group){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(""String_Node_Str"");
  Number count=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),Number.class).setParameter(""String_Node_Str"",group.getKey()).getSingleResult();
  return count == null ? 0 : count.intValue();
}","/** 
 * Count the number of relation from a group to repository entries
 * @param group
 * @return The number of relations
 */
public int countRelations(Group group){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(""String_Node_Str"");
  Number count=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),Number.class).setParameter(""String_Node_Str"",group.getKey()).getSingleResult();
  return count == null ? 0 : count.intValue();
}"
69639,"public List<RepositoryEntryToGroupRelation> getRelations(List<Group> groups){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  return dbInstance.getCurrentEntityManager().createQuery(sb.toString(),RepositoryEntryToGroupRelation.class).setParameter(""String_Node_Str"",groups).getResultList();
}","/** 
 * Get the relation from a base group to the repository entries
 * @param groups
 * @return The list of relations
 */
public List<RepositoryEntryToGroupRelation> getRelations(List<Group> groups){
  if (groups == null || groups.isEmpty()) {
    return Collections.emptyList();
  }
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  return dbInstance.getCurrentEntityManager().createQuery(sb.toString(),RepositoryEntryToGroupRelation.class).setParameter(""String_Node_Str"",groups).getResultList();
}"
69640,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  searchCtrl=new AuthorSearchController(ureq,getWindowControl(),true,!startExtendedSearch,mainForm);
  searchCtrl.setEnabled(false);
  listenTo(searchCtrl);
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.key.i18nKey(),Cols.key.ordinal(),true,OrderBy.key.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.mark.i18nKey(),Cols.mark.ordinal(),true,OrderBy.favorit.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.type.i18nKey(),Cols.type.ordinal(),true,OrderBy.type.name(),FlexiColumnModel.ALIGNMENT_LEFT,new TypeRenderer()));
  FlexiCellRenderer renderer=new StaticFlexiCellRenderer(""String_Node_Str"",new TextFlexiCellRenderer());
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(Cols.displayName.i18nKey(),Cols.displayName.ordinal(),""String_Node_Str"",true,OrderBy.displayname.name(),renderer));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.authors.i18nKey(),Cols.authors.ordinal(),true,OrderBy.authors.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.lifecycleLabel.i18nKey(),Cols.lifecycleLabel.ordinal(),true,OrderBy.lifecycleLabel.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.lifecycleSoftkey.i18nKey(),Cols.lifecycleSoftkey.ordinal(),true,OrderBy.lifecycleSoftkey.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.lifecycleStart.i18nKey(),Cols.lifecycleStart.ordinal(),true,OrderBy.lifecycleStart.name(),FlexiColumnModel.ALIGNMENT_LEFT,new DateFlexiCellRenderer(getLocale())));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.lifecycleEnd.i18nKey(),Cols.lifecycleEnd.ordinal(),true,OrderBy.lifecycleEnd.name(),FlexiColumnModel.ALIGNMENT_LEFT,new DateFlexiCellRenderer(getLocale())));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.author.i18nKey(),Cols.author.ordinal(),true,OrderBy.author.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.access.i18nKey(),Cols.access.ordinal(),true,OrderBy.ac.name(),FlexiColumnModel.ALIGNMENT_LEFT,new AccessRenderer()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.ac.i18nKey(),Cols.ac.ordinal(),true,OrderBy.ac.name(),FlexiColumnModel.ALIGNMENT_LEFT,new ACRenderer()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.creationDate.i18nKey(),Cols.creationDate.ordinal(),true,OrderBy.creationDate.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.lastUsage.i18nKey(),Cols.lastUsage.ordinal(),true,OrderBy.lastUsage.name()));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",-1,""String_Node_Str"",new StaticFlexiCellRenderer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",-1,""String_Node_Str"",new StaticFlexiCellRenderer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  model=new AuthoringEntryDataModel(dataSource,columnsModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,20,!startExtendedSearch,getTranslator(),formLayout);
  tableEl.setSearchEnabled(true);
  tableEl.setExportEnabled(true);
  tableEl.setExtendedSearch(searchCtrl);
  tableEl.setCustomizeColumns(true);
  tableEl.setElementCssClass(""String_Node_Str"");
  tableEl.setMultiSelect(true);
  tableEl.setSortSettings(new FlexiTableSortOptions(true));
  tableEl.setAndLoadPersistedPreferences(ureq,""String_Node_Str"" + i18nName);
  if (startExtendedSearch) {
    tableEl.expandExtendedSearch(ureq);
  }
 else {
    tableEl.setFilters(null,getFilters());
  }
  addOwnersButton=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  searchCtrl=new AuthorSearchController(ureq,getWindowControl(),true,!startExtendedSearch,mainForm);
  searchCtrl.setEnabled(false);
  listenTo(searchCtrl);
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.key.i18nKey(),Cols.key.ordinal(),true,OrderBy.key.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.mark.i18nKey(),Cols.mark.ordinal(),true,OrderBy.favorit.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.type.i18nKey(),Cols.type.ordinal(),true,OrderBy.type.name(),FlexiColumnModel.ALIGNMENT_LEFT,new TypeRenderer()));
  FlexiCellRenderer renderer=new StaticFlexiCellRenderer(""String_Node_Str"",new TextFlexiCellRenderer());
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(Cols.displayName.i18nKey(),Cols.displayName.ordinal(),""String_Node_Str"",true,OrderBy.displayname.name(),renderer));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.authors.i18nKey(),Cols.authors.ordinal(),true,OrderBy.authors.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.lifecycleLabel.i18nKey(),Cols.lifecycleLabel.ordinal(),true,OrderBy.lifecycleLabel.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.lifecycleSoftkey.i18nKey(),Cols.lifecycleSoftkey.ordinal(),true,OrderBy.lifecycleSoftkey.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.lifecycleStart.i18nKey(),Cols.lifecycleStart.ordinal(),true,OrderBy.lifecycleStart.name(),FlexiColumnModel.ALIGNMENT_LEFT,new DateFlexiCellRenderer(getLocale())));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.lifecycleEnd.i18nKey(),Cols.lifecycleEnd.ordinal(),true,OrderBy.lifecycleEnd.name(),FlexiColumnModel.ALIGNMENT_LEFT,new DateFlexiCellRenderer(getLocale())));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.author.i18nKey(),Cols.author.ordinal(),true,OrderBy.author.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.access.i18nKey(),Cols.access.ordinal(),true,OrderBy.ac.name(),FlexiColumnModel.ALIGNMENT_LEFT,new AccessRenderer()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.ac.i18nKey(),Cols.ac.ordinal(),true,OrderBy.ac.name(),FlexiColumnModel.ALIGNMENT_LEFT,new ACRenderer()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.creationDate.i18nKey(),Cols.creationDate.ordinal(),true,OrderBy.creationDate.name()));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.lastUsage.i18nKey(),Cols.lastUsage.ordinal(),true,OrderBy.lastUsage.name()));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",-1,""String_Node_Str"",new StaticFlexiCellRenderer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",-1,""String_Node_Str"",new StaticFlexiCellRenderer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  model=new AuthoringEntryDataModel(dataSource,columnsModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,20,false,getTranslator(),formLayout);
  tableEl.setSearchEnabled(true);
  tableEl.setExportEnabled(true);
  tableEl.setExtendedSearch(searchCtrl);
  tableEl.setCustomizeColumns(true);
  tableEl.setElementCssClass(""String_Node_Str"");
  tableEl.setMultiSelect(true);
  tableEl.setSortSettings(new FlexiTableSortOptions(true,new SortKey(OrderBy.displayname.name(),true)));
  tableEl.setAndLoadPersistedPreferences(ureq,""String_Node_Str"" + i18nName);
  if (!startExtendedSearch) {
    tableEl.sort(OrderBy.displayname.name(),true);
  }
  if (startExtendedSearch) {
    tableEl.expandExtendedSearch(ureq);
  }
 else {
    tableEl.setFilters(null,getFilters());
  }
  addOwnersButton=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}"
69641,"@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (cmc == source) {
    cleanUp();
  }
 else   if (createCtrl == source) {
    cmc.deactivate();
    if (Event.DONE_EVENT.equals(event)) {
      doOpenDetailsSettings(ureq,createCtrl.getAddedEntry());
      cleanUp();
    }
 else     if (CreateRepositoryEntryController.CREATION_WIZARD.equals(event)) {
      doPostCreateWizard(ureq,createCtrl.getAddedEntry(),createCtrl.getHandler());
    }
 else {
      cleanUp();
    }
  }
 else   if (importCtrl == source) {
    cmc.deactivate();
    if (Event.DONE_EVENT.equals(event)) {
      doOpenDetailsSettings(ureq,importCtrl.getImportedEntry());
      cleanUp();
    }
 else {
      cleanUp();
    }
  }
 else   if (wizardCtrl == source) {
    if (event.equals(Event.CHANGED_EVENT) || event.equals(Event.CANCELLED_EVENT)) {
      getWindowControl().pop();
      RepositoryEntry newEntry=(RepositoryEntry)wizardCtrl.getRunContext().get(""String_Node_Str"");
      cleanUp();
      doOpenDetailsSettings(ureq,newEntry);
    }
  }
 else   if (searchCtrl == source) {
    if (event instanceof SearchEvent) {
      SearchEvent se=(SearchEvent)event;
      doSearch(se);
    }
  }
 else   if (detailsCtrl == source) {
    if (event instanceof OpenEvent) {
      OpenEvent oe=(OpenEvent)event;
      RepositoryEntryRef repoEntryKey=oe.getRepositoryEntry();
      doOpenDetails(ureq,repoEntryKey);
    }
  }
 else   if (userSearchCtr == source) {
    @SuppressWarnings(""String_Node_Str"") List<AuthoringEntryRow> rows=(List<AuthoringEntryRow>)userSearchCtr.getUserObject();
    if (event instanceof MultiIdentityChosenEvent) {
      MultiIdentityChosenEvent mice=(MultiIdentityChosenEvent)event;
      doAddOwners(mice.getChosenIdentities(),rows);
    }
 else     if (event instanceof SingleIdentityChosenEvent) {
      SingleIdentityChosenEvent sice=(SingleIdentityChosenEvent)event;
      List<Identity> futureOwners=Collections.singletonList(sice.getChosenIdentity());
      doAddOwners(futureOwners,rows);
    }
    cmc.deactivate();
    cleanUp();
  }
  super.event(ureq,source,event);
}","@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (cmc == source) {
    cleanUp();
  }
 else   if (createCtrl == source) {
    cmc.deactivate();
    if (Event.DONE_EVENT.equals(event)) {
      doOpenDetailsSettings(ureq,createCtrl.getAddedEntry());
      cleanUp();
    }
 else     if (CreateRepositoryEntryController.CREATION_WIZARD.equals(event)) {
      doPostCreateWizard(ureq,createCtrl.getAddedEntry(),createCtrl.getHandler());
    }
 else {
      cleanUp();
    }
  }
 else   if (importCtrl == source) {
    cmc.deactivate();
    if (Event.DONE_EVENT.equals(event)) {
      doOpenDetailsSettings(ureq,importCtrl.getImportedEntry());
      cleanUp();
    }
 else {
      cleanUp();
    }
  }
 else   if (wizardCtrl == source) {
    if (event.equals(Event.CHANGED_EVENT) || event.equals(Event.CANCELLED_EVENT)) {
      getWindowControl().pop();
      RepositoryEntry newEntry=(RepositoryEntry)wizardCtrl.getRunContext().get(""String_Node_Str"");
      cleanUp();
      doOpenDetailsSettings(ureq,newEntry);
    }
  }
 else   if (searchCtrl == source) {
    if (event instanceof SearchEvent) {
      SearchEvent se=(SearchEvent)event;
      doSearch(se);
    }
 else     if (event == Event.CANCELLED_EVENT) {
      System.out.println();
      searchParams.setResourceTypes(null);
      searchParams.setIdAndRefs(null);
      searchParams.setAuthor(null);
      searchParams.setDisplayname(null);
      searchParams.setDescription(null);
    }
  }
 else   if (detailsCtrl == source) {
    if (event instanceof OpenEvent) {
      OpenEvent oe=(OpenEvent)event;
      RepositoryEntryRef repoEntryKey=oe.getRepositoryEntry();
      doOpenDetails(ureq,repoEntryKey);
    }
  }
 else   if (userSearchCtr == source) {
    @SuppressWarnings(""String_Node_Str"") List<AuthoringEntryRow> rows=(List<AuthoringEntryRow>)userSearchCtr.getUserObject();
    if (event instanceof MultiIdentityChosenEvent) {
      MultiIdentityChosenEvent mice=(MultiIdentityChosenEvent)event;
      doAddOwners(mice.getChosenIdentities(),rows);
    }
 else     if (event instanceof SingleIdentityChosenEvent) {
      SingleIdentityChosenEvent sice=(SingleIdentityChosenEvent)event;
      List<Identity> futureOwners=Collections.singletonList(sice.getChosenIdentity());
      doAddOwners(futureOwners,rows);
    }
    cmc.deactivate();
    cleanUp();
  }
  super.event(ureq,source,event);
}"
69642,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FormLayoutContainer leftContainer=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  leftContainer.setRootForm(mainForm);
  formLayout.add(leftContainer);
  displayName=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",255,""String_Node_Str"",leftContainer);
  displayName.setElementCssClass(""String_Node_Str"");
  displayName.setFocus(true);
  description=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",255,""String_Node_Str"",leftContainer);
  description.setElementCssClass(""String_Node_Str"");
  List<String> typeList=getResources();
  String[] typeKeys=typeList.toArray(new String[typeList.size()]);
  String[] typeValues=getTranslatedResources(typeList);
  types=uifactory.addDropdownSingleselect(""String_Node_Str"",""String_Node_Str"",leftContainer,typeKeys,typeValues,null);
  FormLayoutContainer rightContainer=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  rightContainer.setRootForm(mainForm);
  formLayout.add(rightContainer);
  author=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",255,""String_Node_Str"",rightContainer);
  author.setElementCssClass(""String_Node_Str"");
  id=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",12,""String_Node_Str"",rightContainer);
  id.setElementCssClass(""String_Node_Str"");
  id.setVisible(isAdmin);
  id.setRegexMatchCheck(""String_Node_Str"",""String_Node_Str"");
  FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  formLayout.add(buttonLayout);
  searchButton=uifactory.addFormLink(""String_Node_Str"",buttonLayout,Link.BUTTON);
  if (cancelAllowed) {
    uifactory.addFormCancelButton(""String_Node_Str"",buttonLayout,ureq,getWindowControl());
  }
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FormLayoutContainer leftContainer=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  leftContainer.setRootForm(mainForm);
  formLayout.add(leftContainer);
  displayName=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",255,""String_Node_Str"",leftContainer);
  displayName.setElementCssClass(""String_Node_Str"");
  displayName.setFocus(true);
  description=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",255,""String_Node_Str"",leftContainer);
  description.setElementCssClass(""String_Node_Str"");
  List<String> typeList=getResources();
  String[] typeKeys=typeList.toArray(new String[typeList.size()]);
  String[] typeValues=getTranslatedResources(typeList);
  types=uifactory.addDropdownSingleselect(""String_Node_Str"",""String_Node_Str"",leftContainer,typeKeys,typeValues,null);
  FormLayoutContainer rightContainer=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  rightContainer.setRootForm(mainForm);
  formLayout.add(rightContainer);
  author=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",255,""String_Node_Str"",rightContainer);
  author.setElementCssClass(""String_Node_Str"");
  id=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",12,""String_Node_Str"",rightContainer);
  id.setElementCssClass(""String_Node_Str"");
  id.setVisible(isAdmin);
  id.setRegexMatchCheck(""String_Node_Str"",""String_Node_Str"");
  FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  formLayout.add(buttonLayout);
  searchButton=uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout);
  if (cancelAllowed) {
    uifactory.addFormCancelButton(""String_Node_Str"",buttonLayout,ureq,getWindowControl());
  }
}"
69643,"@Override protected void formInnerEvent(UserRequest ureq,FormItem source,FormEvent event){
  if (source == searchButton) {
    fireSearchEvent(ureq);
  }
}","@Override protected void formInnerEvent(UserRequest ureq,FormItem source,FormEvent event){
  if (enabled) {
    if (source == searchButton) {
      fireSearchEvent(ureq);
    }
  }
}"
69644,"@Override public void render(Renderer renderer,StringOutput sb,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  Link link=(Link)source;
  String command=link.getCommand();
  AJAXFlags flags=renderer.getGlobalSettings().getAjaxFlags();
  boolean iframePostEnabled=flags.isIframePostEnabled() && link.isAjaxEnabled() && link.getTarget() == null;
  int presentation=link.getPresentation();
  boolean flexiformlink=(presentation - Link.FLEXIBLEFORMLNK) >= 0;
  if (flexiformlink) {
    presentation=presentation - Link.FLEXIBLEFORMLNK;
  }
  boolean nontranslated=(presentation - Link.NONTRANSLATED) >= 0;
  if (nontranslated) {
    presentation=presentation - Link.NONTRANSLATED;
  }
  StringBuilder cssSb=new StringBuilder(""String_Node_Str"");
  cssSb.append(""String_Node_Str"");
  if (!link.isEnabled()) {
    cssSb.append(""String_Node_Str"");
  }
  if (link.isActive()) {
    cssSb.append(""String_Node_Str"");
  }
  if (presentation == Link.BUTTON_XSMALL) {
    cssSb.append(""String_Node_Str"");
    cssSb.append(link.isPrimary() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 else   if (presentation == Link.BUTTON_SMALL) {
    cssSb.append(""String_Node_Str"");
    cssSb.append(link.isPrimary() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 else   if (presentation == Link.BUTTON) {
    cssSb.append(""String_Node_Str"");
    cssSb.append(link.isPrimary() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 else   if (presentation == Link.BUTTON_LARGE) {
    cssSb.append(""String_Node_Str"");
    cssSb.append(link.isPrimary() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 else   if (presentation == Link.LINK_BACK) {
    cssSb.append(""String_Node_Str"");
  }
 else   if (presentation == Link.TOOLENTRY_DEFAULT) {
    cssSb.append(""String_Node_Str"");
  }
 else   if (presentation == Link.TOOLENTRY_CLOSE) {
    cssSb.append(""String_Node_Str"");
  }
 else   if (presentation == Link.LINK_CUSTOM_CSS) {
    String customCss=(link.isEnabled() ? link.getCustomEnabledLinkCSS() : link.getCustomDisabledLinkCSS());
    cssSb.append(customCss == null ? ""String_Node_Str"" : customCss);
  }
  if (StringHelper.containsNonWhitespace(link.getElementCssClass())) {
    cssSb.append(""String_Node_Str"").append(link.getElementCssClass());
  }
  cssSb.append(""String_Node_Str"");
  if (link.isEnabled()) {
    if (link.getTarget() != null) {
      cssSb.append(""String_Node_Str"" + link.getTarget() + ""String_Node_Str"");
    }
 else     if (iframePostEnabled && link.isEnabled() && !flexiformlink) {
      StringOutput so=new StringOutput();
      ubu.appendTarget(so);
      cssSb.append(so.toString());
    }
  }
  String elementId=link.getElementId();
  StringBuilder extJsSb=new StringBuilder(240);
  extJsSb.append(""String_Node_Str"");
  extJsSb.append(""String_Node_Str"");
  extJsSb.append(""String_Node_Str"");
  extJsSb.append(elementId);
  extJsSb.append(""String_Node_Str"").append(elementId).append(""String_Node_Str"");
  boolean hasExtJsSb=false;
  String i18n=link.getI18n();
  String title=link.getTitle();
  String customDisplayText=link.getCustomDisplayText();
  if (link.isEnabled()) {
    sb.append(""String_Node_Str"");
    sb.append(cssSb);
    if (elementId != null)     sb.append(""String_Node_Str"").append(elementId).append(""String_Node_Str"");
    String accessKey=link.getAccessKey();
    if (accessKey != null) {
      sb.append(""String_Node_Str"").append(accessKey).append(""String_Node_Str"");
    }
    if (flexiformlink) {
      Form theForm=(Form)link.getInternalAttachedObject();
      sb.append(""String_Node_Str"");
      sb.append(FormJSHelper.getJSFnCallFor(theForm,elementId,1));
      sb.append(""String_Node_Str"");
    }
 else     if (link.isPopup()) {
      StringOutput href=new StringOutput();
      LinkPopupSettings popup=link.getPopup();
      ubu.buildURI(href,new String[]{VelocityContainer.COMMAND_ID},new String[]{command},link.getModURI(),AJAXFlags.MODE_NORMAL);
      sb.append(""String_Node_Str"").append(href).append(""String_Node_Str"").append(popup.getTarget()).append(""String_Node_Str"").append(popup.getWidth()).append(""String_Node_Str"").append(popup.getHeight()).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      ubu.buildURI(sb,new String[]{VelocityContainer.COMMAND_ID},new String[]{command},link.getModURI(),iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
      sb.append(""String_Node_Str"");
    }
    if (title != null) {
      if (!link.isHasTooltip()) {
        sb.append(""String_Node_Str"");
        if (nontranslated) {
          sb.append(StringEscapeUtils.escapeHtml(title)).append(""String_Node_Str"");
        }
 else {
          sb.append(StringEscapeUtils.escapeHtml(translator.translate(title))).append(""String_Node_Str"");
        }
      }
      if (link.isHasTooltip()) {
        String text;
        if (nontranslated) {
          text=title;
        }
 else {
          text=translator.translate(title);
        }
        text=StringEscapeUtils.escapeJavaScript(text);
        sb.append(""String_Node_Str"");
        extJsSb.append(elementId).append(""String_Node_Str"").append(text).append(""String_Node_Str"");
        hasExtJsSb=true;
      }
    }
    if (!flexiformlink) {
      String clickCmd=(link.isSuppressDirtyFormWarning() ? ""String_Node_Str"" : ""String_Node_Str"");
      sb.append(""String_Node_Str"").append(clickCmd).append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    if (link.getIconLeftCSS() != null) {
      sb.append(""String_Node_Str"").append(link.getIconLeftCSS()).append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
 else     if (presentation == Link.LINK_BACK) {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    if (customDisplayText != null) {
      sb.append(customDisplayText);
    }
 else     if (nontranslated) {
      if (i18n != null) {
        sb.append(i18n);
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
 else {
      if (translator == null) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(translator.translate(i18n));
      }
    }
    sb.append(""String_Node_Str"");
    if (link.getIconRightCSS() != null) {
      sb.append(""String_Node_Str"").append(link.getIconRightCSS()).append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
    if (link.getBadge() != null) {
      renderer.render(link.getBadge(),sb,args);
    }
    sb.append(""String_Node_Str"");
    if (link.isRegisterForMousePositionEvent()) {
      extJsSb.append(""String_Node_Str"" + elementId + ""String_Node_Str"").append(""String_Node_Str"" + elementId + ""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
      hasExtJsSb=true;
    }
    if (link.getJavascriptHandlerFunction() != null) {
      extJsSb.append(""String_Node_Str"" + elementId + ""String_Node_Str""+ link.getMouseEvent()+ ""String_Node_Str""+ link.getJavascriptHandlerFunction()+ ""String_Node_Str"");
      hasExtJsSb=true;
    }
  }
 else {
    String text;
    if (customDisplayText != null) {
      text=customDisplayText;
    }
 else     if (nontranslated) {
      text=(i18n == null ? ""String_Node_Str"" : i18n);
    }
 else {
      text=translator.translate(i18n);
    }
    sb.append(""String_Node_Str"");
    if (elementId != null)     sb.append(""String_Node_Str"").append(elementId).append(""String_Node_Str"");
    String description=link.getTextReasonForDisabling();
    if (description == null)     description=link.getTitle();
    if (description != null) {
      Matcher msq=singleQuote.matcher(description);
      description=msq.replaceAll(""String_Node_Str"");
      Matcher mdq=doubleQutoe.matcher(description);
      description=mdq.replaceAll(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(description).append(""String_Node_Str"");
    }
    sb.append(cssSb).append(""String_Node_Str"");
    if (link.getIconLeftCSS() != null) {
      sb.append(""String_Node_Str"").append(link.getIconLeftCSS()).append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"").append(text).append(""String_Node_Str"");
    if (link.getIconRightCSS() != null) {
      sb.append(""String_Node_Str"").append(link.getIconRightCSS()).append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  if (link.getStartsDownload() || link.getTarget() != null) {
    hasExtJsSb=true;
    extJsSb.append(""String_Node_Str"").append(elementId).append(""String_Node_Str"").append(elementId).append(""String_Node_Str"");
  }
  if (hasExtJsSb) {
    extJsSb.append(""String_Node_Str"");
    extJsSb.append(""String_Node_Str"");
    sb.append(extJsSb);
  }
}","@Override public void render(Renderer renderer,StringOutput sb,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  Link link=(Link)source;
  String command=link.getCommand();
  AJAXFlags flags=renderer.getGlobalSettings().getAjaxFlags();
  boolean iframePostEnabled=flags.isIframePostEnabled() && link.isAjaxEnabled() && link.getTarget() == null;
  int presentation=link.getPresentation();
  boolean flexiformlink=(presentation - Link.FLEXIBLEFORMLNK) >= 0;
  if (flexiformlink) {
    presentation=presentation - Link.FLEXIBLEFORMLNK;
  }
  boolean nontranslated=(presentation - Link.NONTRANSLATED) >= 0;
  if (nontranslated) {
    presentation=presentation - Link.NONTRANSLATED;
  }
  StringBuilder cssSb=new StringBuilder(""String_Node_Str"");
  cssSb.append(""String_Node_Str"");
  if (!link.isEnabled()) {
    cssSb.append(""String_Node_Str"");
  }
  if (link.isActive()) {
    cssSb.append(""String_Node_Str"");
  }
  if (presentation == Link.BUTTON_XSMALL) {
    cssSb.append(""String_Node_Str"");
    cssSb.append(link.isPrimary() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 else   if (presentation == Link.BUTTON_SMALL) {
    cssSb.append(""String_Node_Str"");
    cssSb.append(link.isPrimary() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 else   if (presentation == Link.BUTTON) {
    cssSb.append(""String_Node_Str"");
    cssSb.append(link.isPrimary() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 else   if (presentation == Link.BUTTON_LARGE) {
    cssSb.append(""String_Node_Str"");
    cssSb.append(link.isPrimary() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 else   if (presentation == Link.LINK_BACK) {
    cssSb.append(""String_Node_Str"");
  }
 else   if (presentation == Link.TOOLENTRY_DEFAULT) {
    cssSb.append(""String_Node_Str"");
  }
 else   if (presentation == Link.TOOLENTRY_CLOSE) {
    cssSb.append(""String_Node_Str"");
  }
 else   if (presentation == Link.LINK_CUSTOM_CSS) {
    String customCss=(link.isEnabled() ? link.getCustomEnabledLinkCSS() : link.getCustomDisabledLinkCSS());
    cssSb.append(customCss == null ? ""String_Node_Str"" : customCss);
  }
  if (StringHelper.containsNonWhitespace(link.getElementCssClass())) {
    cssSb.append(""String_Node_Str"").append(link.getElementCssClass());
  }
  cssSb.append(""String_Node_Str"");
  if (link.isEnabled()) {
    if (link.getTarget() != null) {
      cssSb.append(""String_Node_Str"" + link.getTarget() + ""String_Node_Str"");
    }
 else     if (iframePostEnabled && link.isEnabled() && !flexiformlink) {
      StringOutput so=new StringOutput();
      ubu.appendTarget(so);
      cssSb.append(so.toString());
    }
  }
  String elementId=link.getElementId();
  StringBuilder extJsSb=new StringBuilder(240);
  extJsSb.append(""String_Node_Str"");
  extJsSb.append(""String_Node_Str"");
  extJsSb.append(""String_Node_Str"");
  extJsSb.append(elementId);
  extJsSb.append(""String_Node_Str"").append(elementId).append(""String_Node_Str"");
  boolean hasExtJsSb=false;
  String i18n=link.getI18n();
  String title=link.getTitle();
  String customDisplayText=link.getCustomDisplayText();
  if (link.isEnabled()) {
    sb.append(""String_Node_Str"");
    sb.append(cssSb);
    if (elementId != null)     sb.append(""String_Node_Str"").append(elementId).append(""String_Node_Str"");
    String accessKey=link.getAccessKey();
    if (accessKey != null) {
      sb.append(""String_Node_Str"").append(accessKey).append(""String_Node_Str"");
    }
    if (flexiformlink) {
      Form theForm=(Form)link.getInternalAttachedObject();
      sb.append(""String_Node_Str"");
      sb.append(FormJSHelper.getJSFnCallFor(theForm,elementId,1));
      sb.append(""String_Node_Str"");
    }
 else     if (link.isPopup()) {
      StringOutput href=new StringOutput();
      LinkPopupSettings popup=link.getPopup();
      ubu.buildURI(href,new String[]{VelocityContainer.COMMAND_ID},new String[]{command},link.getModURI(),AJAXFlags.MODE_NORMAL);
      sb.append(""String_Node_Str"").append(href).append(""String_Node_Str"").append(popup.getTarget()).append(""String_Node_Str"").append(popup.getWidth()).append(""String_Node_Str"").append(popup.getHeight()).append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      ubu.buildURI(sb,new String[]{VelocityContainer.COMMAND_ID},new String[]{command},link.getModURI(),iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
      sb.append(""String_Node_Str"");
    }
    if (title != null) {
      if (!link.isHasTooltip()) {
        sb.append(""String_Node_Str"");
        if (nontranslated) {
          sb.append(StringEscapeUtils.escapeHtml(title)).append(""String_Node_Str"");
        }
 else {
          sb.append(StringEscapeUtils.escapeHtml(translator.translate(title))).append(""String_Node_Str"");
        }
      }
      if (link.isHasTooltip()) {
        String text;
        if (nontranslated) {
          text=title;
        }
 else {
          text=translator.translate(title);
        }
        text=StringEscapeUtils.escapeJavaScript(text);
        sb.append(""String_Node_Str"");
        extJsSb.append(elementId).append(""String_Node_Str"").append(text).append(""String_Node_Str"");
        hasExtJsSb=true;
      }
    }
    if (!flexiformlink && (!link.isPopup() || link.getTarget() != null)) {
      String clickCmd=(link.isSuppressDirtyFormWarning() ? ""String_Node_Str"" : ""String_Node_Str"");
      sb.append(""String_Node_Str"").append(clickCmd).append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    if (link.getIconLeftCSS() != null) {
      sb.append(""String_Node_Str"").append(link.getIconLeftCSS()).append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
 else     if (presentation == Link.LINK_BACK) {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    if (customDisplayText != null) {
      sb.append(customDisplayText);
    }
 else     if (nontranslated) {
      if (i18n != null) {
        sb.append(i18n);
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
 else {
      if (translator == null) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(translator.translate(i18n));
      }
    }
    sb.append(""String_Node_Str"");
    if (link.getIconRightCSS() != null) {
      sb.append(""String_Node_Str"").append(link.getIconRightCSS()).append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
    if (link.getBadge() != null) {
      renderer.render(link.getBadge(),sb,args);
    }
    sb.append(""String_Node_Str"");
    if (link.isRegisterForMousePositionEvent()) {
      extJsSb.append(""String_Node_Str"" + elementId + ""String_Node_Str"").append(""String_Node_Str"" + elementId + ""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
      hasExtJsSb=true;
    }
    if (link.getJavascriptHandlerFunction() != null) {
      extJsSb.append(""String_Node_Str"" + elementId + ""String_Node_Str""+ link.getMouseEvent()+ ""String_Node_Str""+ link.getJavascriptHandlerFunction()+ ""String_Node_Str"");
      hasExtJsSb=true;
    }
  }
 else {
    String text;
    if (customDisplayText != null) {
      text=customDisplayText;
    }
 else     if (nontranslated) {
      text=(i18n == null ? ""String_Node_Str"" : i18n);
    }
 else {
      text=translator.translate(i18n);
    }
    sb.append(""String_Node_Str"");
    if (elementId != null)     sb.append(""String_Node_Str"").append(elementId).append(""String_Node_Str"");
    String description=link.getTextReasonForDisabling();
    if (description == null)     description=link.getTitle();
    if (description != null) {
      Matcher msq=singleQuote.matcher(description);
      description=msq.replaceAll(""String_Node_Str"");
      Matcher mdq=doubleQutoe.matcher(description);
      description=mdq.replaceAll(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(description).append(""String_Node_Str"");
    }
    sb.append(cssSb).append(""String_Node_Str"");
    if (link.getIconLeftCSS() != null) {
      sb.append(""String_Node_Str"").append(link.getIconLeftCSS()).append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"").append(text).append(""String_Node_Str"");
    if (link.getIconRightCSS() != null) {
      sb.append(""String_Node_Str"").append(link.getIconRightCSS()).append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  if (link.getStartsDownload() || link.getTarget() != null) {
    hasExtJsSb=true;
    extJsSb.append(""String_Node_Str"").append(elementId).append(""String_Node_Str"").append(elementId).append(""String_Node_Str"");
  }
  if (hasExtJsSb) {
    extJsSb.append(""String_Node_Str"");
    extJsSb.append(""String_Node_Str"");
    sb.append(extJsSb);
  }
}"
69645,"/** 
 * implementation of listener which listens to publish events
 * @see org.olat.core.util.event.GenericEventListener#event(org.olat.core.gui.control.Event)
 */
@Override public void event(Event event){
  if (event instanceof MultiUserEvent) {
    if (event.getCommand().equals(JOINED) || event.getCommand().equals(LEFT)) {
      updateCurrentUserCount();
    }
  }
 else   if (event instanceof PublishEvent) {
    PublishEvent pe=(PublishEvent)event;
    if (pe.getState() == PublishEvent.PRE_PUBLISH) {
      return;
    }
    if (!course.getResourceableId().equals(pe.getPublishedCourseResId()))     throw new AssertException(""String_Node_Str"");
    if (isInEditor) {
      needsRebuildAfterPublish=true;
    }
 else {
      doDisposeAfterEvent();
    }
  }
 else   if (event instanceof OLATResourceableJustBeforeDeletedEvent) {
    OLATResourceableJustBeforeDeletedEvent ojde=(OLATResourceableJustBeforeDeletedEvent)event;
    if (ojde.targetEquals(course,true)) {
      doDisposeAfterEvent();
    }
  }
 else   if (event instanceof AssessmentChangedEvent) {
    AssessmentChangedEvent ace=(AssessmentChangedEvent)event;
    Identity identity=uce.getIdentityEnvironment().getIdentity();
    if (ace.getIdentityKey().equals(identity.getKey())) {
      String assessmentChangeType=ace.getCommand();
      if (assessmentChangeType.equals(AssessmentChangedEvent.TYPE_SCORE_EVAL_CHANGED) || assessmentChangeType.equals(AssessmentChangedEvent.TYPE_ATTEMPTS_CHANGED)) {
        assessmentChangedEventReceived=true;
      }
 else       if (assessmentChangeType.equals(AssessmentChangedEvent.TYPE_EFFICIENCY_STATEMENT_CHANGED)) {
        UserEfficiencyStatement es=efficiencyStatementManager.getUserEfficiencyStatementLight(courseRepositoryEntry.getKey(),identity);
        efficiencyStatementsLink.setEnabled(es != null);
      }
      needsRebuildAfterRunDone=true;
    }
  }
 else   if (event instanceof BusinessGroupModifiedEvent) {
    processBusinessGroupModifiedEvent((BusinessGroupModifiedEvent)event);
  }
 else   if (event instanceof CourseConfigEvent) {
    processCourseConfigEvent((CourseConfigEvent)event);
  }
 else   if (event instanceof EntryChangedEvent && ((EntryChangedEvent)event).getChange() != EntryChangedEvent.MODIFIED_AT_PUBLISH) {
    EntryChangedEvent repoEvent=(EntryChangedEvent)event;
    if (courseRepositoryEntry.getKey().equals(repoEvent.getChangedEntryKey()) && repoEvent.getChange() == EntryChangedEvent.MODIFIED) {
      doDisposeAfterEvent();
    }
  }
}","/** 
 * implementation of listener which listens to publish events
 * @see org.olat.core.util.event.GenericEventListener#event(org.olat.core.gui.control.Event)
 */
@Override public void event(Event event){
  if (event instanceof MultiUserEvent) {
    if (event.getCommand().equals(JOINED) || event.getCommand().equals(LEFT)) {
      updateCurrentUserCount();
    }
  }
 else   if (event instanceof PublishEvent) {
    PublishEvent pe=(PublishEvent)event;
    if (pe.getState() == PublishEvent.PRE_PUBLISH) {
      return;
    }
    if (!course.getResourceableId().equals(pe.getPublishedCourseResId()))     throw new AssertException(""String_Node_Str"");
    if (isInEditor) {
      needsRebuildAfterPublish=true;
    }
 else {
      doDisposeAfterEvent();
    }
  }
 else   if (event instanceof OLATResourceableJustBeforeDeletedEvent) {
    OLATResourceableJustBeforeDeletedEvent ojde=(OLATResourceableJustBeforeDeletedEvent)event;
    if (ojde.targetEquals(course,true)) {
      doDisposeAfterEvent();
    }
  }
 else   if (event instanceof AssessmentChangedEvent) {
    AssessmentChangedEvent ace=(AssessmentChangedEvent)event;
    Identity identity=uce.getIdentityEnvironment().getIdentity();
    if (ace.getIdentityKey().equals(identity.getKey())) {
      String assessmentChangeType=ace.getCommand();
      if (assessmentChangeType.equals(AssessmentChangedEvent.TYPE_SCORE_EVAL_CHANGED) || assessmentChangeType.equals(AssessmentChangedEvent.TYPE_ATTEMPTS_CHANGED)) {
        assessmentChangedEventReceived=true;
      }
 else       if (assessmentChangeType.equals(AssessmentChangedEvent.TYPE_EFFICIENCY_STATEMENT_CHANGED)) {
        UserEfficiencyStatement es=efficiencyStatementManager.getUserEfficiencyStatementLight(courseRepositoryEntry.getKey(),identity);
        efficiencyStatementsLink.setEnabled(es != null);
        efficiencyStatementsLink.setPopup(true);
      }
      needsRebuildAfterRunDone=true;
    }
  }
 else   if (event instanceof BusinessGroupModifiedEvent) {
    processBusinessGroupModifiedEvent((BusinessGroupModifiedEvent)event);
  }
 else   if (event instanceof CourseConfigEvent) {
    processCourseConfigEvent((CourseConfigEvent)event);
  }
 else   if (event instanceof EntryChangedEvent && ((EntryChangedEvent)event).getChange() != EntryChangedEvent.MODIFIED_AT_PUBLISH) {
    EntryChangedEvent repoEvent=(EntryChangedEvent)event;
    if (courseRepositoryEntry.getKey().equals(repoEvent.getChangedEntryKey()) && repoEvent.getChange() == EntryChangedEvent.MODIFIED) {
      doDisposeAfterEvent();
    }
  }
}"
69646,"private void init(IQSecurityCallback secCallback,UserRequest ureq){
  this.iqsec=secCallback;
  this.translator=Util.createPackageTranslator(IQDisplayController.class,ureq.getLocale());
  this.ready=false;
  retrieveListenerOres=new IQRetrievedEvent(ureq.getIdentity(),callingResId,callingResDetail);
  CoordinatorManager.getInstance().getCoordinator().getEventBus().registerFor(this,ureq.getIdentity(),retrieveListenerOres);
  iqm=CoreSpringFactory.getImpl(IQManager.class);
  myContent=new VelocityContainer(""String_Node_Str"",VELOCITY_ROOT + ""String_Node_Str"",translator,this);
  Resolver autcompResolver=null;
  if (resolver == null) {
    RepositoryEntry re=RepositoryManager.getInstance().lookupRepositoryEntryBySoftkey(repositorySoftkey,true);
    autcompResolver=new ImsRepositoryResolver(re);
  }
 else {
    autcompResolver=this.resolver;
  }
  if (autcompResolver != null && autcompResolver.hasAutocompleteFiles()) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(autcompResolver.getStaticsBaseURI()).append(""String_Node_Str"").append(ImsRepositoryResolver.QTI_FIB_AUTOCOMPLETE_JS_FILE).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(autcompResolver.getStaticsBaseURI()).append(""String_Node_Str"").append(ImsRepositoryResolver.QTI_FIB_AUTOCOMPLETE_CSS_FILE).append(""String_Node_Str"");
    JSAndCSSComponent autoCompleteJsCss=new JSAndCSSComponent(""String_Node_Str"",this.getClass(),true,sb.toString());
    myContent.put(""String_Node_Str"",autoCompleteJsCss);
  }
  closeButton=LinkFactory.createButton(""String_Node_Str"",myContent,this);
  qtiscoreprogress=new ProgressBar(""String_Node_Str"",150,0,0,""String_Node_Str"");
  myContent.put(""String_Node_Str"",qtiscoreprogress);
  Boolean displayScoreProgress=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_SCOREPROGRESS);
  if (displayScoreProgress == null)   displayScoreProgress=Boolean.TRUE;
  if (!displayScoreProgress.booleanValue())   qtiscoreprogress.setVisible(false);
  myContent.contextPut(""String_Node_Str"",displayScoreProgress);
  qtiquestionprogress=new ProgressBar(""String_Node_Str"",150,0,0,""String_Node_Str"");
  myContent.put(""String_Node_Str"",qtiquestionprogress);
  Boolean displayQuestionProgress=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_QUESTIONPROGRESS);
  if (displayQuestionProgress == null)   displayQuestionProgress=Boolean.FALSE;
  if (!displayQuestionProgress.booleanValue())   qtiquestionprogress.setVisible(false);
  myContent.contextPut(""String_Node_Str"",displayQuestionProgress);
  Boolean displayMenu=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_DISPLAYMENU);
  if (displayMenu == null)   displayMenu=Boolean.TRUE;
  myContent.contextPut(""String_Node_Str"",displayMenu);
  Boolean enableCancel=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLECANCEL);
  if (enableCancel == null) {
    if (modConfig.get(IQEditController.CONFIG_KEY_TYPE).equals(AssessmentInstance.QMD_ENTRY_TYPE_ASSESS))     enableCancel=Boolean.FALSE;
 else     enableCancel=Boolean.TRUE;
  }
  myContent.contextPut(""String_Node_Str"",enableCancel);
  Boolean enableSuspend=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLESUSPEND);
  if (enableSuspend == null)   enableSuspend=Boolean.FALSE;
  myContent.contextPut(""String_Node_Str"",enableSuspend);
  qtistatus=new IQStatus(translator);
  qtistatus.setPreview(iqsec.isPreview());
  myContent.contextPut(""String_Node_Str"",qtistatus);
  setInitialComponent(myContent);
  AssessmentInstance ai=null;
  if (repositorySoftkey != null) {
    String resourcePathInfo=callingResId + File.separator + callingResDetail;
    ai=AssessmentFactory.createAssessmentInstance(ureq.getIdentity(),ureq.getHttpReq().getRemoteAddr(),modConfig,iqsec.isPreview(),callingResId,callingResDetail,resourcePathInfo,this);
  }
 else   if (resolver != null) {
    ai=AssessmentFactory.createAssessmentInstance(ureq.getIdentity(),ureq.getHttpReq().getRemoteAddr(),callingResId,callingResDetail,resolver,persister,modConfig,this);
  }
  if (ai == null || ai.getAssessmentContext().getSectionContext(0).getItemContextCount() == 0)   throw new AssertException(""String_Node_Str"");
  if (!iqsec.isAllowed(ai)) {
    getWindowControl().setError(translator.translate(""String_Node_Str""));
    return;
  }
  if (iqsec.attemptsLeft(ai) < 1) {
    getWindowControl().setInfo(translator.translate(ai.isSurvey() ? ""String_Node_Str"" : ""String_Node_Str""));
    return;
  }
  if (ai.isResuming()) {
    getWindowControl().setInfo(translator.translate(ai.isSurvey() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  ai.setPreview(iqsec.isPreview());
  Object tmp=modConfig.get(IQEditController.CONFIG_KEY_RENDERMENUOPTION);
  Boolean renderSectionsOnly;
  if (tmp == null) {
    modConfig.set(IQEditController.CONFIG_KEY_RENDERMENUOPTION,Boolean.FALSE);
    renderSectionsOnly=Boolean.FALSE;
  }
 else {
    renderSectionsOnly=(Boolean)tmp;
  }
  boolean enabledMenu=((Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLEMENU)).booleanValue();
  boolean itemPageSequence=((String)modConfig.get(IQEditController.CONFIG_KEY_SEQUENCE)).equals(AssessmentInstance.QMD_ENTRY_SEQUENCE_ITEM);
  IQMenuDisplayConf mdc=new IQMenuDisplayConf(renderSectionsOnly.booleanValue(),enabledMenu,itemPageSequence);
  tmp=modConfig.get(IQEditController.CONFIG_KEY_MEMO);
  boolean memo=tmp == null ? false : ((Boolean)tmp).booleanValue();
  qticomp=new IQComponent(""String_Node_Str"",translator,ai,mdc,memo);
  qticomp.addListener(this);
  myContent.put(""String_Node_Str"",qticomp);
  if (!ai.isResuming()) {
    Navigator navigator=ai.getNavigator();
    navigator.startAssessment();
  }
 else {
    AssessmentContext act=ai.getAssessmentContext();
    if (act.getCurrentSectionContextPos() >= 0) {
      int sectionPos=act.getCurrentSectionContextPos();
      OLATResourceable sres=OresHelper.createOLATResourceableInstance(""String_Node_Str"",new Long(sectionPos));
      WindowControl bwControl=addToHistory(ureq,sres,null,getWindowControl(),false);
      if (!ai.isSectionPage()) {
        SectionContext sct=act.getCurrentSectionContext();
        int itemPos=sct.getCurrentItemContextPos();
        if (itemPos >= 0) {
          OLATResourceable ires=OresHelper.createOLATResourceableInstance(""String_Node_Str"",new Long(itemPos));
          addToHistory(ureq,ires,null,bwControl,true);
        }
      }
    }
  }
  qtistatus.update(ai);
  if (!qtistatus.isSurvey()) {
    qtiscoreprogress.setMax(ai.getAssessmentContext().getMaxScore());
    qtiscoreprogress.setActual(ai.getAssessmentContext().getScore());
  }
  qtiquestionprogress.setMax(Integer.parseInt(qtistatus.getMaxQuestions()));
  updateQuestionProgressDisplay(ai);
  ready=true;
}","private void init(IQSecurityCallback secCallback,UserRequest ureq){
  this.iqsec=secCallback;
  this.translator=Util.createPackageTranslator(IQDisplayController.class,ureq.getLocale());
  this.ready=false;
  retrieveListenerOres=new IQRetrievedEvent(ureq.getIdentity(),callingResId,callingResDetail);
  CoordinatorManager.getInstance().getCoordinator().getEventBus().registerFor(this,ureq.getIdentity(),retrieveListenerOres);
  iqm=CoreSpringFactory.getImpl(IQManager.class);
  myContent=new VelocityContainer(""String_Node_Str"",VELOCITY_ROOT + ""String_Node_Str"",translator,this);
  Resolver autcompResolver=null;
  if (resolver == null) {
    RepositoryEntry re=RepositoryManager.getInstance().lookupRepositoryEntryBySoftkey(repositorySoftkey,true);
    autcompResolver=new ImsRepositoryResolver(re);
  }
 else {
    autcompResolver=this.resolver;
  }
  if (autcompResolver != null && autcompResolver.hasAutocompleteFiles()) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(autcompResolver.getStaticsBaseURI()).append(""String_Node_Str"").append(ImsRepositoryResolver.QTI_FIB_AUTOCOMPLETE_JS_FILE).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(autcompResolver.getStaticsBaseURI()).append(""String_Node_Str"").append(ImsRepositoryResolver.QTI_FIB_AUTOCOMPLETE_CSS_FILE).append(""String_Node_Str"");
    JSAndCSSComponent autoCompleteJsCss=new JSAndCSSComponent(""String_Node_Str"",this.getClass(),true,sb.toString());
    myContent.put(""String_Node_Str"",autoCompleteJsCss);
  }
  closeButton=LinkFactory.createButton(""String_Node_Str"",myContent,this);
  closeButton.setPrimary(true);
  qtiscoreprogress=new ProgressBar(""String_Node_Str"",150,0,0,""String_Node_Str"");
  myContent.put(""String_Node_Str"",qtiscoreprogress);
  Boolean displayScoreProgress=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_SCOREPROGRESS);
  if (displayScoreProgress == null)   displayScoreProgress=Boolean.TRUE;
  if (!displayScoreProgress.booleanValue())   qtiscoreprogress.setVisible(false);
  myContent.contextPut(""String_Node_Str"",displayScoreProgress);
  qtiquestionprogress=new ProgressBar(""String_Node_Str"",150,0,0,""String_Node_Str"");
  myContent.put(""String_Node_Str"",qtiquestionprogress);
  Boolean displayQuestionProgress=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_QUESTIONPROGRESS);
  if (displayQuestionProgress == null)   displayQuestionProgress=Boolean.FALSE;
  if (!displayQuestionProgress.booleanValue())   qtiquestionprogress.setVisible(false);
  myContent.contextPut(""String_Node_Str"",displayQuestionProgress);
  Boolean displayMenu=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_DISPLAYMENU);
  if (displayMenu == null)   displayMenu=Boolean.TRUE;
  myContent.contextPut(""String_Node_Str"",displayMenu);
  Boolean enableCancel=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLECANCEL);
  if (enableCancel == null) {
    if (modConfig.get(IQEditController.CONFIG_KEY_TYPE).equals(AssessmentInstance.QMD_ENTRY_TYPE_ASSESS))     enableCancel=Boolean.FALSE;
 else     enableCancel=Boolean.TRUE;
  }
  myContent.contextPut(""String_Node_Str"",enableCancel);
  Boolean enableSuspend=(Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLESUSPEND);
  if (enableSuspend == null)   enableSuspend=Boolean.FALSE;
  myContent.contextPut(""String_Node_Str"",enableSuspend);
  qtistatus=new IQStatus(translator);
  qtistatus.setPreview(iqsec.isPreview());
  myContent.contextPut(""String_Node_Str"",qtistatus);
  setInitialComponent(myContent);
  AssessmentInstance ai=null;
  if (repositorySoftkey != null) {
    String resourcePathInfo=callingResId + File.separator + callingResDetail;
    ai=AssessmentFactory.createAssessmentInstance(ureq.getIdentity(),ureq.getHttpReq().getRemoteAddr(),modConfig,iqsec.isPreview(),callingResId,callingResDetail,resourcePathInfo,this);
  }
 else   if (resolver != null) {
    ai=AssessmentFactory.createAssessmentInstance(ureq.getIdentity(),ureq.getHttpReq().getRemoteAddr(),callingResId,callingResDetail,resolver,persister,modConfig,this);
  }
  if (ai == null || ai.getAssessmentContext().getSectionContext(0).getItemContextCount() == 0)   throw new AssertException(""String_Node_Str"");
  if (!iqsec.isAllowed(ai)) {
    getWindowControl().setError(translator.translate(""String_Node_Str""));
    return;
  }
  if (iqsec.attemptsLeft(ai) < 1) {
    getWindowControl().setInfo(translator.translate(ai.isSurvey() ? ""String_Node_Str"" : ""String_Node_Str""));
    return;
  }
  if (ai.isResuming()) {
    getWindowControl().setInfo(translator.translate(ai.isSurvey() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  ai.setPreview(iqsec.isPreview());
  Object tmp=modConfig.get(IQEditController.CONFIG_KEY_RENDERMENUOPTION);
  Boolean renderSectionsOnly;
  if (tmp == null) {
    modConfig.set(IQEditController.CONFIG_KEY_RENDERMENUOPTION,Boolean.FALSE);
    renderSectionsOnly=Boolean.FALSE;
  }
 else {
    renderSectionsOnly=(Boolean)tmp;
  }
  boolean enabledMenu=((Boolean)modConfig.get(IQEditController.CONFIG_KEY_ENABLEMENU)).booleanValue();
  boolean itemPageSequence=((String)modConfig.get(IQEditController.CONFIG_KEY_SEQUENCE)).equals(AssessmentInstance.QMD_ENTRY_SEQUENCE_ITEM);
  IQMenuDisplayConf mdc=new IQMenuDisplayConf(renderSectionsOnly.booleanValue(),enabledMenu,itemPageSequence);
  tmp=modConfig.get(IQEditController.CONFIG_KEY_MEMO);
  boolean memo=tmp == null ? false : ((Boolean)tmp).booleanValue();
  qticomp=new IQComponent(""String_Node_Str"",translator,ai,mdc,memo);
  qticomp.addListener(this);
  myContent.put(""String_Node_Str"",qticomp);
  if (!ai.isResuming()) {
    Navigator navigator=ai.getNavigator();
    navigator.startAssessment();
  }
 else {
    AssessmentContext act=ai.getAssessmentContext();
    if (act.getCurrentSectionContextPos() >= 0) {
      int sectionPos=act.getCurrentSectionContextPos();
      OLATResourceable sres=OresHelper.createOLATResourceableInstance(""String_Node_Str"",new Long(sectionPos));
      WindowControl bwControl=addToHistory(ureq,sres,null,getWindowControl(),false);
      if (!ai.isSectionPage()) {
        SectionContext sct=act.getCurrentSectionContext();
        int itemPos=sct.getCurrentItemContextPos();
        if (itemPos >= 0) {
          OLATResourceable ires=OresHelper.createOLATResourceableInstance(""String_Node_Str"",new Long(itemPos));
          addToHistory(ureq,ires,null,bwControl,true);
        }
      }
    }
  }
  qtistatus.update(ai);
  if (!qtistatus.isSurvey()) {
    qtiscoreprogress.setMax(ai.getAssessmentContext().getMaxScore());
    qtiscoreprogress.setActual(ai.getAssessmentContext().getScore());
  }
  qtiquestionprogress.setMax(Integer.parseInt(qtistatus.getMaxQuestions()));
  updateQuestionProgressDisplay(ai);
  ready=true;
}"
69647,"private void renderPageNumberLinks(StringOutput sb,FlexiTableComponent ftC,int page,int maxPage){
  if (maxPage < 12) {
    for (int i=0; i < maxPage; i++) {
      appendPagenNumberLink(sb,ftC,page,i);
    }
  }
 else {
    int powerOf10=String.valueOf(maxPage).length() - 1;
    int maxStepSize=(int)Math.pow(10,powerOf10);
    int stepSize=(int)Math.pow(10,String.valueOf(page).length() - 1);
    boolean isStep=false;
    int useEveryStep=3;
    int stepCnt=0;
    boolean isNear=false;
    int nearleft=5;
    int nearright=5;
    if (page < nearleft) {
      nearleft=page;
      nearright+=(nearright - nearleft);
    }
 else     if (page > (maxPage - nearright)) {
      nearright=maxPage - page;
      nearleft+=(nearleft - nearright);
    }
    for (int i=1; i <= maxPage; i++) {
      stepSize=adaptStepIfNeeded(page,maxStepSize,stepSize,i);
      isStep=((i % stepSize) == 0);
      if (isStep) {
        stepCnt++;
        isStep=isStep && (stepCnt % useEveryStep == 0);
      }
      isNear=(i > (page - nearleft) && i < (page + nearright));
      if (i == 1 || i == maxPage || isStep || isNear) {
        appendPagenNumberLink(sb,ftC,page,i);
      }
    }
  }
}","private void renderPageNumberLinks(StringOutput sb,FlexiTableComponent ftC,int page,int maxPage){
  if (maxPage < 12) {
    for (int i=0; i < maxPage; i++) {
      appendPagenNumberLink(sb,ftC,page,i);
    }
  }
 else {
    int powerOf10=String.valueOf(maxPage).length() - 1;
    int maxStepSize=(int)Math.pow(10,powerOf10);
    int stepSize=(int)Math.pow(10,String.valueOf(page).length() - 1);
    boolean isStep=false;
    int useEveryStep=3;
    int stepCnt=0;
    boolean isNear=false;
    int nearleft=5;
    int nearright=5;
    if (page < nearleft) {
      nearleft=page;
      nearright+=(nearright - nearleft);
    }
 else     if (page > (maxPage - nearright)) {
      nearright=maxPage - page;
      nearleft+=(nearleft - nearright);
    }
    for (int i=0; i <= maxPage; i++) {
      stepSize=adaptStepIfNeeded(page,maxStepSize,stepSize,i);
      isStep=((i % stepSize) == 0);
      if (isStep) {
        stepCnt++;
        isStep=isStep && (stepCnt % useEveryStep == 0);
      }
      isNear=(i > (page - nearleft) && i < (page + nearright));
      if (i == 0 || i == maxPage || isStep || isNear) {
        appendPagenNumberLink(sb,ftC,page,i);
      }
    }
  }
}"
69648,"/** 
 * @see org.olat.core.gui.components.form.flexible.FormItemImpl#evalFormRequest(org.olat.core.gui.UserRequest)
 */
@Override public void evalFormRequest(UserRequest ureq){
  String[] selectedIndexArr=getRootForm().getRequestParameterValues(""String_Node_Str"");
  if (selectedIndexArr != null) {
    setMultiSelectIndex(selectedIndexArr);
  }
  Form form=getRootForm();
  String selectedIndex=form.getRequestParameter(""String_Node_Str"");
  String dispatchuri=form.getRequestParameter(""String_Node_Str"");
  String select=form.getRequestParameter(""String_Node_Str"");
  String page=form.getRequestParameter(""String_Node_Str"");
  String sort=form.getRequestParameter(""String_Node_Str"");
  String filter=form.getRequestParameter(""String_Node_Str"");
  if (""String_Node_Str"".equals(dispatchuri)) {
    evalSearchRequest(ureq);
  }
 else   if (StringHelper.containsNonWhitespace(page)) {
    int p=Integer.parseInt(page);
    setPage(p);
  }
 else   if (StringHelper.containsNonWhitespace(sort)) {
    String asc=form.getRequestParameter(""String_Node_Str"");
    sort(sort,""String_Node_Str"".equals(asc));
  }
 else   if (StringHelper.containsNonWhitespace(selectedIndex)) {
    int index=selectedIndex.lastIndexOf('-');
    if (index > 0 && index + 1 < selectedIndex.length()) {
      String pos=selectedIndex.substring(index + 1);
      int selectedPosition=Integer.parseInt(pos);
      selectedObj=dataModel.getObject(selectedPosition);
      doSelect(ureq,selectedPosition);
    }
  }
 else   if (searchButton != null && searchButton.getFormDispatchId().equals(dispatchuri)) {
    evalSearchRequest(ureq);
  }
 else   if (extendedSearchButton != null && extendedSearchButton.getFormDispatchId().equals(dispatchuri)) {
    expandExtendedSearch(ureq);
  }
 else   if (dispatchuri != null && StringHelper.containsNonWhitespace(filter)) {
    filter(filter);
  }
 else   if (exportButton != null && exportButton.getFormDispatchId().equals(dispatchuri)) {
    export(ureq);
  }
 else   if (dispatchuri != null && select != null && select.equals(""String_Node_Str"")) {
    doSelectAll();
  }
 else   if (dispatchuri != null && select != null && select.equals(""String_Node_Str"")) {
    doUnSelectAll();
  }
 else   if (customButton != null && customButton.getFormDispatchId().equals(dispatchuri)) {
    customizeCallout(ureq);
  }
 else   if (customTypeButton != null && customTypeButton.getFormDispatchId().equals(dispatchuri)) {
    setRendererType(FlexiTableRendererType.custom);
  }
 else   if (classicTypeButton != null && classicTypeButton.getFormDispatchId().equals(dispatchuri)) {
    setRendererType(FlexiTableRendererType.classic);
  }
 else   if (dataTablesTypeButton != null && dataTablesTypeButton.getFormDispatchId().equals(dispatchuri)) {
    setRendererType(FlexiTableRendererType.dataTables);
  }
 else {
    FlexiTableColumnModel colModel=dataModel.getTableColumnModel();
    for (int i=colModel.getColumnCount(); i-- > 0; ) {
      FlexiColumnModel col=colModel.getColumnModel(i);
      if (col.getAction() != null) {
        String selectedRowIndex=getRootForm().getRequestParameter(col.getAction());
        if (StringHelper.containsNonWhitespace(selectedRowIndex)) {
          doSelect(ureq,col.getAction(),Integer.parseInt(selectedRowIndex));
        }
      }
    }
  }
}","/** 
 * @see org.olat.core.gui.components.form.flexible.FormItemImpl#evalFormRequest(org.olat.core.gui.UserRequest)
 */
@Override public void evalFormRequest(UserRequest ureq){
  String[] selectedIndexArr=getRootForm().getRequestParameterValues(""String_Node_Str"");
  if (selectedIndexArr != null) {
    setMultiSelectIndex(selectedIndexArr);
  }
  Form form=getRootForm();
  String selectedIndex=form.getRequestParameter(""String_Node_Str"");
  String dispatchuri=form.getRequestParameter(""String_Node_Str"");
  String select=form.getRequestParameter(""String_Node_Str"");
  String page=form.getRequestParameter(""String_Node_Str"");
  String sort=form.getRequestParameter(""String_Node_Str"");
  String filter=form.getRequestParameter(""String_Node_Str"");
  if (""String_Node_Str"".equals(dispatchuri)) {
    evalSearchRequest(ureq);
  }
 else   if (StringHelper.containsNonWhitespace(page)) {
    int p=Integer.parseInt(page);
    setPage(p);
  }
 else   if (StringHelper.containsNonWhitespace(sort)) {
    String asc=form.getRequestParameter(""String_Node_Str"");
    sort(sort,""String_Node_Str"".equals(asc));
  }
 else   if (StringHelper.containsNonWhitespace(selectedIndex)) {
    int index=selectedIndex.lastIndexOf('-');
    if (index > 0 && index + 1 < selectedIndex.length()) {
      String pos=selectedIndex.substring(index + 1);
      int selectedPosition=Integer.parseInt(pos);
      selectedObj=dataModel.getObject(selectedPosition);
      doSelect(ureq,selectedPosition);
    }
  }
 else   if (searchButton != null && searchButton.getFormDispatchId().equals(dispatchuri)) {
    evalSearchRequest(ureq);
  }
 else   if (extendedSearchButton != null && extendedSearchButton.getFormDispatchId().equals(dispatchuri)) {
    expandExtendedSearch(ureq);
  }
 else   if (dispatchuri != null && StringHelper.containsNonWhitespace(filter)) {
    doFilter(filter);
  }
 else   if (exportButton != null && exportButton.getFormDispatchId().equals(dispatchuri)) {
    doExport(ureq);
  }
 else   if (dispatchuri != null && select != null && select.equals(""String_Node_Str"")) {
    doSelectAll();
  }
 else   if (dispatchuri != null && select != null && select.equals(""String_Node_Str"")) {
    doUnSelectAll();
  }
 else   if (customButton != null && customButton.getFormDispatchId().equals(dispatchuri)) {
    customizeCallout(ureq);
  }
 else   if (customTypeButton != null && customTypeButton.getFormDispatchId().equals(dispatchuri)) {
    setRendererType(FlexiTableRendererType.custom);
  }
 else   if (classicTypeButton != null && classicTypeButton.getFormDispatchId().equals(dispatchuri)) {
    setRendererType(FlexiTableRendererType.classic);
  }
 else   if (dataTablesTypeButton != null && dataTablesTypeButton.getFormDispatchId().equals(dispatchuri)) {
    setRendererType(FlexiTableRendererType.dataTables);
  }
 else {
    FlexiTableColumnModel colModel=dataModel.getTableColumnModel();
    for (int i=colModel.getColumnCount(); i-- > 0; ) {
      FlexiColumnModel col=colModel.getColumnModel(i);
      if (col.getAction() != null) {
        String selectedRowIndex=getRootForm().getRequestParameter(col.getAction());
        if (StringHelper.containsNonWhitespace(selectedRowIndex)) {
          doSelect(ureq,col.getAction(),Integer.parseInt(selectedRowIndex));
        }
      }
    }
  }
}"
69649,"@Override public final ResultInfos<AuthoringEntryRow> getRows(String query,List<String> condQueries,int firstResult,int maxResults,SortKey... orderBy){
  if (condQueries != null && condQueries.size() > 0) {
    String filter=condQueries.get(0);
    if (StringHelper.containsNonWhitespace(filter)) {
      searchParams.addResourceTypes(filter);
    }
 else {
      searchParams.setResourceTypes(null);
    }
  }
  if (StringHelper.containsNonWhitespace(query)) {
    try {
      List<Long> fullTextResults=searchClient.doSearch(query,null,searchParams.getIdentity(),searchParams.getRoles(),0,100);
      searchParams.setRepoEntryKeys(fullTextResults);
    }
 catch (    ServiceNotAvailableException|ParseException|QueryException e) {
      log.error(""String_Node_Str"",e);
    }
  }
  List<RepositoryEntryAuthorView> views=repositoryService.searchAuthorView(searchParams,firstResult,maxResults);
  List<AuthoringEntryRow> rows=processViewModel(views);
  ResultInfos<AuthoringEntryRow> results=new DefaultResultInfos<AuthoringEntryRow>(firstResult + rows.size(),-1,rows);
  if (firstResult == 0 && views.size() < maxResults) {
    count=new Integer(views.size());
  }
  return results;
}","@Override public final ResultInfos<AuthoringEntryRow> getRows(String query,List<String> condQueries,int firstResult,int maxResults,SortKey... orderBy){
  if (condQueries != null && condQueries.size() > 0) {
    String filter=condQueries.get(0);
    if (StringHelper.containsNonWhitespace(filter)) {
      searchParams.setResourceTypes(Collections.singletonList(filter));
    }
 else {
      searchParams.setResourceTypes(null);
    }
  }
  if (StringHelper.containsNonWhitespace(query)) {
    try {
      List<Long> fullTextResults=searchClient.doSearch(query,null,searchParams.getIdentity(),searchParams.getRoles(),0,100);
      searchParams.setRepoEntryKeys(fullTextResults);
    }
 catch (    ServiceNotAvailableException|ParseException|QueryException e) {
      log.error(""String_Node_Str"",e);
    }
  }
  List<RepositoryEntryAuthorView> views=repositoryService.searchAuthorView(searchParams,firstResult,maxResults);
  List<AuthoringEntryRow> rows=processViewModel(views);
  ResultInfos<AuthoringEntryRow> results=new DefaultResultInfos<AuthoringEntryRow>(firstResult + rows.size(),-1,rows);
  if (firstResult == 0 && views.size() < maxResults) {
    count=new Integer(views.size());
  }
  return results;
}"
69650,"@Override public boolean exists(){
  return delegate != null && delegate.exists();
}","@Override public boolean exists(){
  VFSContainer d=getDelegate();
  return d != null && d.exists();
}"
69651,"private void doUpdateAssessmentBySum(UserCourseEnvironment userCourseEnv,Identity assessedIdentity){
  OLATResourceable courseOres=OresHelper.createOLATResourceableInstance(""String_Node_Str"",userCourseEnv.getCourseEnvironment().getCourseResourceableId());
  ModuleConfiguration config=getModuleConfiguration();
  CheckboxManager checkboxManager=CoreSpringFactory.getImpl(CheckboxManager.class);
  int checkedBox=checkboxManager.countChecked(assessedIdentity,courseOres,getIdent());
  CheckboxList checkboxList=(CheckboxList)config.get(CONFIG_KEY_CHECKBOX);
  Integer cut=(Integer)config.get(CheckListCourseNode.CONFIG_KEY_PASSED_SUM_CUTVALUE);
  int minNumOfCheckbox=cut == null ? checkboxList.getNumOfCheckbox() : cut.intValue();
  boolean passed=checkedBox >= minNumOfCheckbox;
  Float score=null;
  if (passed) {
    Boolean scoreGrantedBool=(Boolean)config.get(MSCourseNode.CONFIG_KEY_HAS_SCORE_FIELD);
    if (scoreGrantedBool != null && scoreGrantedBool.booleanValue()) {
      score=(Float)config.get(MSCourseNode.CONFIG_KEY_SCORE_MAX);
    }
  }
  ScoreEvaluation sceval=new ScoreEvaluation(score,new Boolean(passed));
  AssessmentManager am=userCourseEnv.getCourseEnvironment().getAssessmentManager();
  Identity mySelf=userCourseEnv.getIdentityEnvironment().getIdentity();
  am.saveScoreEvaluation(this,mySelf,assessedIdentity,sceval,userCourseEnv,false);
  userCourseEnv.getScoreAccounting().scoreInfoChanged(this,sceval);
}","private void doUpdateAssessmentBySum(UserCourseEnvironment userCourseEnv,Identity assessedIdentity){
  OLATResourceable courseOres=OresHelper.createOLATResourceableInstance(""String_Node_Str"",userCourseEnv.getCourseEnvironment().getCourseResourceableId());
  ModuleConfiguration config=getModuleConfiguration();
  CheckboxManager checkboxManager=CoreSpringFactory.getImpl(CheckboxManager.class);
  int checkedBox=checkboxManager.countChecked(assessedIdentity,courseOres,getIdent());
  CheckboxList checkboxList=(CheckboxList)config.get(CONFIG_KEY_CHECKBOX);
  Integer cut=(Integer)config.get(CheckListCourseNode.CONFIG_KEY_PASSED_SUM_CUTVALUE);
  int minNumOfCheckbox=cut == null ? checkboxList.getNumOfCheckbox() : cut.intValue();
  boolean passed=checkedBox >= minNumOfCheckbox;
  Float score=null;
  if (passed) {
    Boolean scoreGrantedBool=(Boolean)config.get(MSCourseNode.CONFIG_KEY_HAS_SCORE_FIELD);
    if (scoreGrantedBool != null && scoreGrantedBool.booleanValue()) {
      score=checkboxManager.calculateScore(assessedIdentity,courseOres,getIdent());
      Float maxScore=(Float)config.get(MSCourseNode.CONFIG_KEY_SCORE_MAX);
      if (maxScore != null && maxScore.floatValue() < score) {
        score=maxScore.floatValue();
      }
    }
  }
  ScoreEvaluation sceval=new ScoreEvaluation(score,new Boolean(passed));
  AssessmentManager am=userCourseEnv.getCourseEnvironment().getAssessmentManager();
  Identity mySelf=userCourseEnv.getIdentityEnvironment().getIdentity();
  am.saveScoreEvaluation(this,mySelf,assessedIdentity,sceval,userCourseEnv,false);
  userCourseEnv.getScoreAccounting().scoreInfoChanged(this,sceval);
}"
69652,"public String getKey(int which){
  return keys[which];
}","public String getKey(int which){
  if (which >= 0 && which < keys.length) {
    return keys[which];
  }
  return null;
}"
69653,"public String getCheckboxId(){
  return checkboxId;
}","/** 
 * This is an UUID
 * @return
 */
public String getCheckboxId(){
  return checkboxId;
}"
69654,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormDescription(""String_Node_Str"");
  setFormContextHelp(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  if (isAdministrativeUser) {
    columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.username.i18nKey(),Cols.username.ordinal()));
  }
  int i=0;
  for (  UserPropertyHandler userPropertyHandler : userPropertyHandlers) {
    int colIndex=CheckListAssessmentDataModel.USER_PROPS_OFFSET + i++;
    if (userPropertyHandler == null)     continue;
    String propName=userPropertyHandler.getName();
    boolean visible=userManager.isMandatoryUserProperty(CheckListAssessmentController.USER_PROPS_ID,userPropertyHandler);
    if (visible) {
      FlexiColumnModel col;
      if (UserConstants.FIRSTNAME.equals(propName) || UserConstants.LASTNAME.equals(propName)) {
        col=new StaticFlexiColumnModel(userPropertyHandler.i18nColumnDescriptorLabelKey(),colIndex,userPropertyHandler.getName(),true,propName,new StaticFlexiCellRenderer(userPropertyHandler.getName(),new TextFlexiCellRenderer()));
      }
 else {
        col=new DefaultFlexiColumnModel(true,userPropertyHandler.i18nColumnDescriptorLabelKey(),colIndex,true,propName);
      }
      columnsModel.addFlexiColumnModel(col);
    }
  }
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.check.i18nKey(),Cols.check.ordinal()));
  if (withScore) {
    columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.points.i18nKey(),Cols.points.ordinal()));
  }
  int numOfCheckbox=checkboxList.getList().size();
  String[] keys=new String[numOfCheckbox];
  String[] values=new String[numOfCheckbox];
  List<Checkbox> checkbox=checkboxList.getList();
  for (int j=0; j < numOfCheckbox; j++) {
    keys[j]=checkbox.get(j).getCheckboxId();
    values[j]=checkbox.get(j).getTitle();
  }
  FormLayoutContainer selectCont=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(selectCont);
  checkboxEl=uifactory.addDropdownSingleselect(""String_Node_Str"",""String_Node_Str"",selectCont,keys,values,null);
  checkboxEl.addActionListener(this,FormEvent.ONCHANGE);
  checkboxEl.select(keys[0],true);
  Checkbox box=checkboxList.getList().get(currentCheckboxIndex);
  boolean hasPoints=box.getPoints() != null && box.getPoints().floatValue() > 0f;
  boxRows=new ArrayList<CheckboxAssessmentRow>(initialRows.size());
  for (  CheckListAssessmentRow initialRow : initialRows) {
    Boolean[] checked=new Boolean[numOfCheckbox];
    if (initialRow.getChecked() != null) {
      System.arraycopy(initialRow.getChecked(),0,checked,0,initialRow.getChecked().length);
    }
    Float[] scores=new Float[numOfCheckbox];
    if (initialRow.getScores() != null) {
      System.arraycopy(initialRow.getScores(),0,scores,0,initialRow.getScores().length);
    }
    CheckboxAssessmentRow row=new CheckboxAssessmentRow(initialRow,checked,scores);
    String name=""String_Node_Str"" + boxRows.size() + ""String_Node_Str"";
    String pointVal=""String_Node_Str"";
    if (scores != null && scores.length > currentCheckboxIndex && scores[currentCheckboxIndex] != null) {
      pointVal=AssessmentHelper.getRoundedScore(scores[currentCheckboxIndex]);
    }
    TextElement pointEl=uifactory.addTextElement(name + ""String_Node_Str"",null,5,pointVal,formLayout);
    pointEl.setDisplaySize(5);
    MultipleSelectionElement checkEl=uifactory.addCheckboxesHorizontal(name + ""String_Node_Str"",formLayout,onKeys,onValues,null);
    if (checked != null && checked.length > currentCheckboxIndex && checked[currentCheckboxIndex] != null && checked[currentCheckboxIndex].booleanValue()) {
      checkEl.select(onKeys[0],true);
    }
    pointEl.setVisible(hasPoints);
    row.setCheckedEl(checkEl);
    row.setPointEl(pointEl);
    boxRows.add(row);
  }
  model=new CheckboxAssessmentDataModel(boxRows,columnsModel);
  table=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  table.setEditMode(true);
  FormLayoutContainer buttonsCont=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  formLayout.add(buttonsCont);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonsCont);
  selectAllBoxButton=uifactory.addFormLink(""String_Node_Str"",buttonsCont,Link.BUTTON);
  uifactory.addFormCancelButton(""String_Node_Str"",buttonsCont,ureq,getWindowControl());
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormDescription(""String_Node_Str"");
  setFormContextHelp(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  if (isAdministrativeUser) {
    columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.username.i18nKey(),Cols.username.ordinal()));
  }
  int i=0;
  for (  UserPropertyHandler userPropertyHandler : userPropertyHandlers) {
    int colIndex=CheckListAssessmentDataModel.USER_PROPS_OFFSET + i++;
    if (userPropertyHandler == null)     continue;
    String propName=userPropertyHandler.getName();
    boolean visible=userManager.isMandatoryUserProperty(CheckListAssessmentController.USER_PROPS_ID,userPropertyHandler);
    if (visible) {
      FlexiColumnModel col;
      if (UserConstants.FIRSTNAME.equals(propName) || UserConstants.LASTNAME.equals(propName)) {
        col=new StaticFlexiColumnModel(userPropertyHandler.i18nColumnDescriptorLabelKey(),colIndex,userPropertyHandler.getName(),true,propName,new StaticFlexiCellRenderer(userPropertyHandler.getName(),new TextFlexiCellRenderer()));
      }
 else {
        col=new DefaultFlexiColumnModel(true,userPropertyHandler.i18nColumnDescriptorLabelKey(),colIndex,true,propName);
      }
      columnsModel.addFlexiColumnModel(col);
    }
  }
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.check.i18nKey(),Cols.check.ordinal()));
  if (withScore) {
    columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.points.i18nKey(),Cols.points.ordinal()));
  }
  int numOfCheckbox=checkboxList.getList().size();
  String[] keys=new String[numOfCheckbox];
  String[] values=new String[numOfCheckbox];
  List<Checkbox> checkbox=checkboxList.getList();
  for (int j=0; j < numOfCheckbox; j++) {
    keys[j]=checkbox.get(j).getCheckboxId();
    values[j]=checkbox.get(j).getTitle();
  }
  FormLayoutContainer selectCont=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(selectCont);
  checkboxEl=uifactory.addDropdownSingleselect(""String_Node_Str"",""String_Node_Str"",selectCont,keys,values,null);
  checkboxEl.addActionListener(this,FormEvent.ONCHANGE);
  checkboxEl.select(keys[0],true);
  Checkbox box=checkboxList.getList().get(currentCheckboxIndex);
  boolean hasPoints=box.getPoints() != null && box.getPoints().floatValue() > 0f;
  boxRows=new ArrayList<CheckboxAssessmentRow>(initialRows.size());
  for (  CheckListAssessmentRow initialRow : initialRows) {
    Boolean[] checked=new Boolean[numOfCheckbox];
    if (initialRow.getChecked() != null) {
      System.arraycopy(initialRow.getChecked(),0,checked,0,initialRow.getChecked().length);
    }
    Float[] scores=new Float[numOfCheckbox];
    if (initialRow.getScores() != null) {
      System.arraycopy(initialRow.getScores(),0,scores,0,initialRow.getScores().length);
    }
    CheckboxAssessmentRow row=new CheckboxAssessmentRow(initialRow,checked,scores);
    String name=""String_Node_Str"" + boxRows.size() + ""String_Node_Str"";
    String pointVal=""String_Node_Str"";
    if (scores != null && scores.length > currentCheckboxIndex && scores[currentCheckboxIndex] != null) {
      pointVal=AssessmentHelper.getRoundedScore(scores[currentCheckboxIndex]);
    }
    TextElement pointEl=uifactory.addTextElement(name + ""String_Node_Str"",null,5,pointVal,formLayout);
    pointEl.setDisplaySize(5);
    MultipleSelectionElement checkEl=uifactory.addCheckboxesHorizontal(name + ""String_Node_Str"",formLayout,onKeys,onValues,null);
    checkEl.addActionListener(this,FormEvent.ONCHANGE);
    checkEl.setUserObject(row);
    if (checked != null && checked.length > currentCheckboxIndex && checked[currentCheckboxIndex] != null && checked[currentCheckboxIndex].booleanValue()) {
      checkEl.select(onKeys[0],true);
    }
    pointEl.setVisible(hasPoints);
    row.setCheckedEl(checkEl);
    row.setPointEl(pointEl);
    boxRows.add(row);
  }
  model=new CheckboxAssessmentDataModel(boxRows,columnsModel);
  table=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  table.setEditMode(true);
  FormLayoutContainer buttonsCont=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  formLayout.add(buttonsCont);
  uifactory.addFormSubmitButton(""String_Node_Str"",buttonsCont);
  selectAllBoxButton=uifactory.addFormLink(""String_Node_Str"",buttonsCont,Link.BUTTON);
  uifactory.addFormCancelButton(""String_Node_Str"",buttonsCont,ureq,getWindowControl());
}"
69655,"@Override protected void formInnerEvent(UserRequest ureq,FormItem source,FormEvent event){
  if (checkboxEl == source) {
    int nextCheckboxIndex=checkboxEl.getSelected();
    saveCurrentSelectCheckbox();
    Checkbox box=checkboxList.getList().get(nextCheckboxIndex);
    boolean hasPoints=box.getPoints() != null && box.getPoints().floatValue() > 0f;
    List<CheckboxAssessmentRow> rows=model.getObjects();
    for (    CheckboxAssessmentRow row : rows) {
      Boolean[] checkedArr=row.getChecked();
      if (checkedArr[nextCheckboxIndex] != null && checkedArr[nextCheckboxIndex].booleanValue()) {
        row.getCheckedEl().select(onKeys[0],true);
      }
 else {
        row.getCheckedEl().select(onKeys[0],false);
      }
      Float[] scores=row.getScores();
      if (scores[nextCheckboxIndex] != null && scores[nextCheckboxIndex] != null) {
        row.getPointEl().setValue(AssessmentHelper.getRoundedScore(scores[nextCheckboxIndex]));
      }
 else {
        row.getPointEl().setValue(""String_Node_Str"");
      }
      row.getPointEl().setVisible(hasPoints);
    }
    currentCheckboxIndex=nextCheckboxIndex;
  }
 else   if (selectAllBoxButton == source) {
    doSelectAll();
  }
  super.formInnerEvent(ureq,source,event);
}","@Override protected void formInnerEvent(UserRequest ureq,FormItem source,FormEvent event){
  if (checkboxEl == source) {
    int nextCheckboxIndex=checkboxEl.getSelected();
    saveCurrentSelectCheckbox();
    Checkbox box=checkboxList.getList().get(nextCheckboxIndex);
    boolean hasPoints=box.getPoints() != null && box.getPoints().floatValue() > 0f;
    List<CheckboxAssessmentRow> rows=model.getObjects();
    for (    CheckboxAssessmentRow row : rows) {
      Boolean[] checkedArr=row.getChecked();
      if (checkedArr[nextCheckboxIndex] != null && checkedArr[nextCheckboxIndex].booleanValue()) {
        row.getCheckedEl().select(onKeys[0],true);
      }
 else {
        row.getCheckedEl().select(onKeys[0],false);
      }
      Float[] scores=row.getScores();
      if (scores[nextCheckboxIndex] != null && scores[nextCheckboxIndex] != null) {
        row.getPointEl().setValue(AssessmentHelper.getRoundedScore(scores[nextCheckboxIndex]));
      }
 else {
        row.getPointEl().setValue(""String_Node_Str"");
      }
      row.getPointEl().setVisible(hasPoints);
    }
    currentCheckboxIndex=nextCheckboxIndex;
  }
 else   if (source instanceof MultipleSelectionElement) {
    MultipleSelectionElement checkEl=(MultipleSelectionElement)source;
    if (checkEl.getUserObject() instanceof CheckboxAssessmentRow) {
      CheckboxAssessmentRow row=(CheckboxAssessmentRow)checkEl.getUserObject();
      if (row.getPointEl().isVisible()) {
        boolean checked=checkEl.isAtLeastSelected(1);
        if (checked) {
          int nextCheckboxIndex=checkboxEl.getSelected();
          Checkbox box=checkboxList.getList().get(nextCheckboxIndex);
          String pointVal=AssessmentHelper.getRoundedScore(box.getPoints());
          row.getPointEl().setValue(pointVal);
        }
 else {
          row.getPointEl().setValue(""String_Node_Str"");
        }
      }
    }
  }
 else   if (selectAllBoxButton == source) {
    doSelectAll();
  }
  super.formInnerEvent(ureq,source,event);
}"
69656,"private void doDownloadFile(UserRequest ureq){
  ICourse course=CourseFactory.loadCourse(courseOres);
  CourseEnvironment courseEnv=course.getCourseEnvironment();
  VFSContainer container=checkboxManager.getFileContainer(courseEnv,courseNode,checkbox);
  VFSItem item=container.resolve(checkbox.getFilename());
  if (item instanceof VFSLeaf) {
    VFSMediaResource rsrc=new VFSMediaResource((VFSLeaf)item);
    rsrc.setDownloadable(true);
    ureq.getDispatchResult().setResultingMediaResource(rsrc);
  }
}","private void doDownloadFile(UserRequest ureq){
  VFSContainer container=getFileContainer();
  VFSItem item=container.resolve(checkbox.getFilename());
  if (item instanceof VFSLeaf) {
    VFSMediaResource rsrc=new VFSMediaResource((VFSLeaf)item);
    rsrc.setDownloadable(true);
    ureq.getDispatchResult().setResultingMediaResource(rsrc);
  }
}"
69657,"@Override protected void formOK(UserRequest ureq){
  checkbox.setTitle(titleEl.getValue());
  String releaseKey=releaseEl.getSelectedKey();
  checkbox.setRelease(CheckboxReleaseEnum.valueOf(releaseKey));
  String labelKey=labelEl.getSelectedKey();
  checkbox.setLabel(CheckboxLabelEnum.valueOf(labelKey));
  if (awardPointEl.isAtLeastSelected(1)) {
    Float points=null;
    try {
      points=new Float(Float.parseFloat(pointsEl.getValue()));
    }
 catch (    NumberFormatException e) {
    }
    checkbox.setPoints(points);
  }
 else {
    checkbox.setPoints(null);
  }
  checkbox.setDescription(descriptionEl.getValue());
  if (Boolean.TRUE.equals(deleteFile)) {
    checkbox.setFilename(null);
    ICourse course=CourseFactory.loadCourse(courseOres);
    CourseEnvironment courseEnv=course.getCourseEnvironment();
    VFSContainer container=checkboxManager.getFileContainer(courseEnv,courseNode,checkbox);
    for (    VFSItem chd : container.getItems()) {
      chd.delete();
    }
  }
  File uploadedFile=fileEl.getUploadFile();
  if (uploadedFile != null) {
    String filename=fileEl.getUploadFileName();
    checkbox.setFilename(filename);
    try {
      ICourse course=CourseFactory.loadCourse(courseOres);
      CourseEnvironment courseEnv=course.getCourseEnvironment();
      VFSContainer container=checkboxManager.getFileContainer(courseEnv,courseNode,checkbox);
      VFSLeaf leaf=container.createChildLeaf(filename);
      InputStream inStream=new FileInputStream(uploadedFile);
      VFSManager.copyContent(inStream,leaf);
    }
 catch (    FileNotFoundException e) {
      logError(""String_Node_Str"",e);
    }
  }
  if (courseNode != null) {
    ILoggingAction action=newCheckbox ? CourseLoggingAction.CHECKLIST_CHECKBOX_CREATED : CourseLoggingAction.CHECKLIST_CHECKBOX_UPDATED;
    ThreadLocalUserActivityLogger.log(action,getClass(),LoggingResourceable.wrap(courseNode),LoggingResourceable.wrapNonOlatResource(StringResourceableType.checkbox,checkbox.getCheckboxId(),checkbox.getTitle()));
  }
  fireEvent(ureq,Event.CHANGED_EVENT);
}","@Override protected void formOK(UserRequest ureq){
  checkbox.setTitle(titleEl.getValue());
  String releaseKey=releaseEl.getSelectedKey();
  checkbox.setRelease(CheckboxReleaseEnum.valueOf(releaseKey));
  String labelKey=labelEl.getSelectedKey();
  checkbox.setLabel(CheckboxLabelEnum.valueOf(labelKey));
  if (awardPointEl.isAtLeastSelected(1)) {
    Float points=null;
    try {
      points=new Float(Float.parseFloat(pointsEl.getValue()));
    }
 catch (    NumberFormatException e) {
    }
    checkbox.setPoints(points);
  }
 else {
    checkbox.setPoints(null);
  }
  checkbox.setDescription(descriptionEl.getValue());
  if (Boolean.TRUE.equals(deleteFile)) {
    checkbox.setFilename(null);
    VFSContainer container=getFileContainer();
    for (    VFSItem chd : container.getItems()) {
      chd.delete();
    }
  }
  File uploadedFile=fileEl.getUploadFile();
  if (uploadedFile != null) {
    String filename=fileEl.getUploadFileName();
    checkbox.setFilename(filename);
    try {
      VFSContainer container=getFileContainer();
      VFSLeaf leaf=container.createChildLeaf(filename);
      InputStream inStream=new FileInputStream(uploadedFile);
      VFSManager.copyContent(inStream,leaf);
    }
 catch (    FileNotFoundException e) {
      logError(""String_Node_Str"",e);
    }
  }
  if (courseNode != null) {
    ILoggingAction action=newCheckbox ? CourseLoggingAction.CHECKLIST_CHECKBOX_CREATED : CourseLoggingAction.CHECKLIST_CHECKBOX_UPDATED;
    ThreadLocalUserActivityLogger.log(action,getClass(),LoggingResourceable.wrap(courseNode),LoggingResourceable.wrapNonOlatResource(StringResourceableType.checkbox,checkbox.getCheckboxId(),checkbox.getTitle()));
  }
  fireEvent(ureq,Event.CHANGED_EVENT);
}"
69658,"@Override public StatisticAssessment getAssessmentStatistics(QTIStatisticSearchParams searchParams){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(QTIStatisticResultSet.class.getName()).append(""String_Node_Str"");
  decorateRSet(sb,searchParams);
  sb.append(""String_Node_Str"");
  TypedQuery<Object[]> rawDataQuery=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),Object[].class);
  decorateRSetQuery(rawDataQuery,searchParams);
  List<Object[]> rawDatas=rawDataQuery.getResultList();
  int numOfPassed=0;
  int numOfFailed=0;
  double totalDuration=0.0;
  double maxScore=0.0;
  double minScore=Double.MAX_VALUE;
  double[] scores=new double[rawDatas.size()];
  long[] durationMinutes=new long[rawDatas.size()];
  long minDuration=Integer.MAX_VALUE;
  long maxDuration=0;
  int dataPos=0;
  for (  Object[] rawData : rawDatas) {
    Boolean passed=(Boolean)rawData[2];
    if (passed != null) {
      if (passed.booleanValue()) {
        numOfPassed++;
      }
 else {
        numOfFailed++;
      }
    }
    Float score=(Float)rawData[0];
    if (score != null) {
      double scored=score.doubleValue();
      scores[dataPos]=scored;
      maxScore=Math.max(maxScore,scored);
      minScore=Math.min(minScore,scored);
    }
    Long duration=(Long)rawData[1];
    if (duration != null) {
      double durationd=duration.doubleValue();
      long durationMinute=Math.round(durationd / 60000.0d);
      durationMinutes[dataPos]=durationMinute;
      totalDuration+=durationd;
      minDuration=Math.min(minDuration,durationMinute);
      maxDuration=Math.max(maxDuration,durationMinute);
    }
    dataPos++;
  }
  Statistics statisticsHelper=new Statistics(scores);
  int numOfParticipants=rawDatas.size();
  StatisticAssessment stats=new StatisticAssessment();
  stats.setNumOfParticipants(numOfParticipants);
  stats.setNumOfPassed(numOfPassed);
  stats.setNumOfFailed(numOfFailed);
  long averageDuration=Math.round(totalDuration / numOfParticipants);
  stats.setAverageDuration(averageDuration);
  stats.setAverage(statisticsHelper.getMean());
  double range=maxScore - minScore;
  stats.setRange(range);
  stats.setMaxScore(maxScore);
  stats.setMinScore(minScore);
  stats.setStandardDeviation(statisticsHelper.getStdDev());
  stats.setMedian(statisticsHelper.median());
  stats.setMode(statisticsHelper.mode());
  stats.setDurations(durationMinutes);
  stats.setScores(scores);
  return stats;
}","@Override public StatisticAssessment getAssessmentStatistics(QTIStatisticSearchParams searchParams){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(QTIStatisticResultSet.class.getName()).append(""String_Node_Str"");
  decorateRSet(sb,searchParams);
  sb.append(""String_Node_Str"");
  TypedQuery<Object[]> rawDataQuery=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),Object[].class);
  decorateRSetQuery(rawDataQuery,searchParams);
  List<Object[]> rawDatas=rawDataQuery.getResultList();
  int numOfPassed=0;
  int numOfFailed=0;
  double totalDuration=0.0;
  double maxScore=0.0;
  double minScore=Double.MAX_VALUE;
  double[] scores=new double[rawDatas.size()];
  long[] durationMinutes=new long[rawDatas.size()];
  long minDuration=Integer.MAX_VALUE;
  long maxDuration=0;
  int dataPos=0;
  for (  Object[] rawData : rawDatas) {
    Boolean passed=(Boolean)rawData[2];
    if (passed != null) {
      if (passed.booleanValue()) {
        numOfPassed++;
      }
 else {
        numOfFailed++;
      }
    }
    Float score=(Float)rawData[0];
    if (score != null) {
      double scored=score.doubleValue();
      scores[dataPos]=scored;
      maxScore=Math.max(maxScore,scored);
      minScore=Math.min(minScore,scored);
    }
    Long duration=(Long)rawData[1];
    if (duration != null) {
      double durationd=duration.doubleValue();
      long durationMinute=Math.round(durationd / 60000.0d);
      durationMinutes[dataPos]=durationMinute;
      totalDuration+=durationd;
      minDuration=Math.min(minDuration,durationMinute);
      maxDuration=Math.max(maxDuration,durationMinute);
    }
    dataPos++;
  }
  if (rawDatas.size() == 0) {
    minScore=0;
  }
  Statistics statisticsHelper=new Statistics(scores);
  int numOfParticipants=rawDatas.size();
  StatisticAssessment stats=new StatisticAssessment();
  stats.setNumOfParticipants(numOfParticipants);
  stats.setNumOfPassed(numOfPassed);
  stats.setNumOfFailed(numOfFailed);
  long averageDuration=Math.round(totalDuration / numOfParticipants);
  stats.setAverageDuration(averageDuration);
  stats.setAverage(statisticsHelper.getMean());
  double range=maxScore - minScore;
  stats.setRange(range);
  stats.setMaxScore(maxScore);
  stats.setMinScore(minScore);
  stats.setStandardDeviation(statisticsHelper.getStdDev());
  stats.setMedian(statisticsHelper.median());
  stats.setMode(statisticsHelper.mode());
  stats.setDurations(durationMinutes);
  stats.setScores(scores);
  return stats;
}"
69659,"private void initCourseNodeInformation(StatisticAssessment stats){
  mainVC.contextPut(""String_Node_Str"",stats.getNumOfParticipants());
  mainVC.contextPut(""String_Node_Str"",resourceResult.getType());
  if (QTIType.test.equals(type)) {
    mainVC.contextPut(""String_Node_Str"",stats.getNumOfPassed());
    mainVC.contextPut(""String_Node_Str"",stats.getNumOfFailed());
    if (cutValue != null) {
      mainVC.contextPut(""String_Node_Str"",format(cutValue));
    }
 else {
      mainVC.contextPut(""String_Node_Str"",""String_Node_Str"");
    }
    mainVC.contextPut(""String_Node_Str"",format(maxScore));
    mainVC.contextPut(""String_Node_Str"",format(stats.getAverage()));
    mainVC.contextPut(""String_Node_Str"",format(stats.getRange()));
    mainVC.contextPut(""String_Node_Str"",format(stats.getStandardDeviation()));
    mainVC.contextPut(""String_Node_Str"",getModeString(stats.getMode()));
    mainVC.contextPut(""String_Node_Str"",format(stats.getMedian()));
  }
  String duration=duration(stats.getAverageDuration());
  mainVC.contextPut(""String_Node_Str"",duration);
}","private void initCourseNodeInformation(StatisticAssessment stats){
  mainVC.contextPut(""String_Node_Str"",stats.getNumOfParticipants());
  mainVC.contextPut(""String_Node_Str"",resourceResult.getType());
  mainVC.contextPut(""String_Node_Str"",courseResourceID);
  mainVC.contextPut(""String_Node_Str"",repoEntryId);
  if (QTIType.test.equals(type)) {
    mainVC.contextPut(""String_Node_Str"",stats.getNumOfPassed());
    mainVC.contextPut(""String_Node_Str"",stats.getNumOfFailed());
    if (cutValue != null) {
      mainVC.contextPut(""String_Node_Str"",format(cutValue));
    }
 else {
      mainVC.contextPut(""String_Node_Str"",""String_Node_Str"");
    }
    mainVC.contextPut(""String_Node_Str"",format(maxScore));
    mainVC.contextPut(""String_Node_Str"",format(stats.getAverage()));
    mainVC.contextPut(""String_Node_Str"",format(stats.getRange()));
    mainVC.contextPut(""String_Node_Str"",format(stats.getStandardDeviation()));
    mainVC.contextPut(""String_Node_Str"",getModeString(stats.getMode()));
    mainVC.contextPut(""String_Node_Str"",format(stats.getMedian()));
  }
  String duration=duration(stats.getAverageDuration());
  mainVC.contextPut(""String_Node_Str"",duration);
}"
69660,"public QTI12AssessmentStatisticsController(UserRequest ureq,WindowControl wControl,QTIStatisticResourceResult resourceResult,boolean printMode){
  super(ureq,wControl);
  type=resourceResult.getType();
  this.resourceResult=resourceResult;
  mediaBaseURL=resourceResult.getMediaBaseURL();
  seriesfactory=new SeriesFactory(resourceResult);
  qtiStatisticsManager=CoreSpringFactory.getImpl(QTIStatisticsManager.class);
  mainVC=createVelocityContainer(""String_Node_Str"");
  mainVC.put(""String_Node_Str"",new StatisticsComponent(""String_Node_Str""));
  mainVC.contextPut(""String_Node_Str"",new Boolean(printMode));
  downloadRawLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
  downloadRawLink.setCustomEnabledLinkCSS(""String_Node_Str"");
  mainVC.put(""String_Node_Str"",downloadRawLink);
  QTICourseNode testNode=resourceResult.getTestCourseNode();
  StatisticAssessment stats=resourceResult.getQTIStatisticAssessment();
  List<Item> items=new ArrayList<>();
  QTIDocument qtiDocument=resourceResult.getQTIDocument();
  for (  Section section : qtiDocument.getAssessment().getSections()) {
    for (    Item item : section.getItems()) {
      items.add(item);
    }
  }
  cutValue=getCutValueSetting(testNode);
  maxScore=getMaxScoreSetting(testNode,items);
  initCourseNodeInformation(stats);
  initDurationHistogram(resourceResult.getQTIStatisticAssessment());
  if (QTIType.test.equals(type)) {
    initScoreHistogram(stats);
    initScoreStatisticPerItem(items,stats.getNumOfParticipants());
  }
 else {
    initItemsOverview(items);
  }
  putInitialPanel(mainVC);
}","public QTI12AssessmentStatisticsController(UserRequest ureq,WindowControl wControl,QTIStatisticResourceResult resourceResult,boolean printMode){
  super(ureq,wControl);
  type=resourceResult.getType();
  this.resourceResult=resourceResult;
  mediaBaseURL=resourceResult.getMediaBaseURL();
  seriesfactory=new SeriesFactory(resourceResult);
  qtiStatisticsManager=CoreSpringFactory.getImpl(QTIStatisticsManager.class);
  courseResourceID=RepositoryManager.getInstance().lookupRepositoryEntryKey(resourceResult.getCourseOres(),false);
  repoEntryId=resourceResult.getQTIRepositoryEntry().getResourceableId();
  mainVC=createVelocityContainer(""String_Node_Str"");
  mainVC.put(""String_Node_Str"",new StatisticsComponent(""String_Node_Str""));
  mainVC.contextPut(""String_Node_Str"",new Boolean(printMode));
  downloadRawLink=LinkFactory.createLink(""String_Node_Str"",mainVC,this);
  downloadRawLink.setCustomEnabledLinkCSS(""String_Node_Str"");
  mainVC.put(""String_Node_Str"",downloadRawLink);
  QTICourseNode testNode=resourceResult.getTestCourseNode();
  StatisticAssessment stats=resourceResult.getQTIStatisticAssessment();
  List<Item> items=new ArrayList<>();
  QTIDocument qtiDocument=resourceResult.getQTIDocument();
  for (  Section section : qtiDocument.getAssessment().getSections()) {
    for (    Item item : section.getItems()) {
      items.add(item);
    }
  }
  cutValue=getCutValueSetting(testNode);
  maxScore=getMaxScoreSetting(testNode,items);
  initCourseNodeInformation(stats);
  initDurationHistogram(resourceResult.getQTIStatisticAssessment());
  if (QTIType.test.equals(type)) {
    initScoreHistogram(stats);
    initScoreStatisticPerItem(items,stats.getNumOfParticipants());
  }
 else {
    initItemsOverview(items);
  }
  putInitialPanel(mainVC);
}"
69661,"public Series getSingleChoice(Item item){
  List<StatisticChoiceOption> statisticResponses=qtiStatisticsManager.getNumOfAnswersPerSingleChoiceAnswerOption(item,resourceResult.getSearchParams());
  String mediaBaseURL=resourceResult.getMediaBaseURL();
  boolean survey=QTIType.survey.equals(resourceResult.getType());
  int numOfParticipants=resourceResult.getQTIStatisticAssessment().getNumOfParticipants();
  int i=0;
  BarSeries d1=new BarSeries();
  List<ResponseInfos> responseInfos=new ArrayList<>();
  for (  StatisticChoiceOption statisticResponse : statisticResponses) {
    Response response=statisticResponse.getResponse();
    double ans_count=statisticResponse.getCount();
    Float points;
    String cssColor;
    if (survey) {
      points=null;
      cssColor=""String_Node_Str"";
    }
 else {
      points=response.getPoints();
      cssColor=response.isCorrect() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    String label=Integer.toString(++i);
    d1.add(ans_count,label,cssColor);
    String text=response.getContent().renderAsHtml(mediaBaseURL);
    responseInfos.add(new ResponseInfos(label,text,points,true,survey));
  }
  List<BarSeries> serieList=Collections.singletonList(d1);
  Series series=new Series(serieList,responseInfos,numOfParticipants);
  series.setChartType(BAR_CORRECT);
  series.setItemCss(getCssClass(item));
  return series;
}","public Series getSingleChoice(Item item){
  List<StatisticChoiceOption> statisticResponses=qtiStatisticsManager.getNumOfAnswersPerSingleChoiceAnswerOption(item,resourceResult.getSearchParams());
  String mediaBaseURL=resourceResult.getMediaBaseURL();
  boolean survey=QTIType.survey.equals(resourceResult.getType());
  int numOfParticipants=resourceResult.getQTIStatisticAssessment().getNumOfParticipants();
  int i=0;
  BarSeries d1=new BarSeries();
  List<ResponseInfos> responseInfos=new ArrayList<>();
  for (  StatisticChoiceOption statisticResponse : statisticResponses) {
    Response response=statisticResponse.getResponse();
    double ans_count=statisticResponse.getCount();
    Float points;
    String cssColor;
    if (survey) {
      points=null;
      cssColor=""String_Node_Str"";
    }
 else {
      points=response.getPoints();
      cssColor=response.isCorrect() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    String label=Integer.toString(++i);
    d1.add(ans_count,label,cssColor);
    String text=response.getContent().renderAsHtml(mediaBaseURL);
    responseInfos.add(new ResponseInfos(label,text,points,response.isCorrect(),survey));
  }
  List<BarSeries> serieList=Collections.singletonList(d1);
  Series series=new Series(serieList,responseInfos,numOfParticipants);
  series.setChartType(BAR_CORRECT);
  series.setItemCss(getCssClass(item));
  return series;
}"
69662,"public Series getMultipleChoice(Item item,StatisticsItem itemStats){
  List<StatisticChoiceOption> statisticResponses=qtiStatisticsManager.getNumOfRightAnsweredMultipleChoice(item,resourceResult.getSearchParams());
  BarSeries d1=new BarSeries(""String_Node_Str"");
  BarSeries d2=new BarSeries(""String_Node_Str"");
  BarSeries d3=new BarSeries(""String_Node_Str"");
  String mediaBaseURL=resourceResult.getMediaBaseURL();
  boolean survey=QTIType.survey.equals(resourceResult.getType());
  int numOfParticipants=resourceResult.getQTIStatisticAssessment().getNumOfParticipants();
  int notAnswered=numOfParticipants - (itemStats == null ? 0 : itemStats.getNumOfResults());
  int i=0;
  List<ResponseInfos> responseInfos=new ArrayList<>();
  for (  StatisticChoiceOption statisticResponse : statisticResponses) {
    Response response=statisticResponse.getResponse();
    float points=response.getPoints();
    double answersPerAnswerOption=statisticResponse.getCount();
    double rightA;
    double wrongA;
    if (points >= 0f) {
      rightA=answersPerAnswerOption;
      wrongA=numOfParticipants - notAnswered - answersPerAnswerOption;
    }
 else {
      rightA=numOfParticipants - notAnswered - answersPerAnswerOption;
      wrongA=answersPerAnswerOption;
    }
    String label=Integer.toString(++i);
    d1.add(rightA,label);
    d2.add(wrongA,label);
    d3.add(notAnswered,label);
    String text=response.getContent().renderAsHtml(mediaBaseURL);
    Float pointsObj=survey ? null : points;
    responseInfos.add(new ResponseInfos(label,text,pointsObj,true,survey));
  }
  List<BarSeries> serieList=new ArrayList<>(3);
  serieList.add(d1);
  if (!survey) {
    serieList.add(d2);
    serieList.add(d3);
  }
  Series series=new Series(serieList,responseInfos,numOfParticipants);
  series.setChartType(survey ? BAR_ANSWERED : BAR_CORRECT_WRONG_NOT);
  series.setItemCss(getCssClass(item));
  return series;
}","public Series getMultipleChoice(Item item,StatisticsItem itemStats){
  List<StatisticChoiceOption> statisticResponses=qtiStatisticsManager.getNumOfRightAnsweredMultipleChoice(item,resourceResult.getSearchParams());
  BarSeries d1=new BarSeries(""String_Node_Str"");
  BarSeries d2=new BarSeries(""String_Node_Str"");
  BarSeries d3=new BarSeries(""String_Node_Str"");
  String mediaBaseURL=resourceResult.getMediaBaseURL();
  boolean survey=QTIType.survey.equals(resourceResult.getType());
  int numOfParticipants=resourceResult.getQTIStatisticAssessment().getNumOfParticipants();
  int notAnswered=numOfParticipants - (itemStats == null ? 0 : itemStats.getNumOfResults());
  int i=0;
  List<ResponseInfos> responseInfos=new ArrayList<>();
  for (  StatisticChoiceOption statisticResponse : statisticResponses) {
    Response response=statisticResponse.getResponse();
    float points=response.getPoints();
    double answersPerAnswerOption=statisticResponse.getCount();
    double rightA;
    double wrongA;
    if (points >= 0f) {
      rightA=answersPerAnswerOption;
      wrongA=numOfParticipants - notAnswered - answersPerAnswerOption;
    }
 else {
      rightA=numOfParticipants - notAnswered - answersPerAnswerOption;
      wrongA=answersPerAnswerOption;
    }
    String label=Integer.toString(++i);
    d1.add(rightA,label);
    d2.add(wrongA,label);
    d3.add(notAnswered,label);
    String text=response.getContent().renderAsHtml(mediaBaseURL);
    Float pointsObj=survey ? null : points;
    responseInfos.add(new ResponseInfos(label,text,pointsObj,(points > 0f),survey));
  }
  List<BarSeries> serieList=new ArrayList<>(3);
  serieList.add(d1);
  if (!survey) {
    serieList.add(d2);
    serieList.add(d3);
  }
  Series series=new Series(serieList,responseInfos,numOfParticipants);
  series.setChartType(survey ? BAR_ANSWERED : BAR_CORRECT_WRONG_NOT);
  series.setItemCss(getCssClass(item));
  return series;
}"
69663,"public Series getKPrim(Item item){
  List<StatisticKPrimOption> statisticResponses=qtiStatisticsManager.getNumbersInKPrim(item,resourceResult.getSearchParams());
  String mediaBaseURL=resourceResult.getMediaBaseURL();
  boolean survey=QTIType.survey.equals(resourceResult.getType());
  int numOfParticipants=resourceResult.getQTIStatisticAssessment().getNumOfParticipants();
  int i=0;
  BarSeries d1=new BarSeries(""String_Node_Str"");
  BarSeries d2=new BarSeries(""String_Node_Str"");
  BarSeries d3=new BarSeries(""String_Node_Str"");
  List<ResponseInfos> responseInfos=new ArrayList<>();
  for (  StatisticKPrimOption statisticResponse : statisticResponses) {
    Response response=statisticResponse.getResponse();
    double right=statisticResponse.getNumOfCorrect();
    double wrong=statisticResponse.getNumOfIncorrect();
    double notanswered=numOfParticipants - right - wrong;
    String label=Integer.toString(++i);
    d1.add(right,label);
    d2.add(wrong,label);
    d3.add(notanswered,label);
    String text=response.getContent().renderAsHtml(mediaBaseURL);
    responseInfos.add(new ResponseInfos(label,text,null,true,survey));
  }
  List<BarSeries> serieList=new ArrayList<>(3);
  serieList.add(d1);
  serieList.add(d2);
  serieList.add(d3);
  Series series=new Series(serieList,responseInfos,numOfParticipants);
  series.setChartType(survey ? BAR_ANSWERED : BAR_CORRECT_WRONG_NOT);
  series.setItemCss(getCssClass(item));
  return series;
}","public Series getKPrim(Item item){
  List<StatisticKPrimOption> statisticResponses=qtiStatisticsManager.getNumbersInKPrim(item,resourceResult.getSearchParams());
  String mediaBaseURL=resourceResult.getMediaBaseURL();
  boolean survey=QTIType.survey.equals(resourceResult.getType());
  int numOfParticipants=resourceResult.getQTIStatisticAssessment().getNumOfParticipants();
  int i=0;
  BarSeries d1=new BarSeries(""String_Node_Str"");
  BarSeries d2=new BarSeries(""String_Node_Str"");
  BarSeries d3=new BarSeries(""String_Node_Str"");
  List<ResponseInfos> responseInfos=new ArrayList<>();
  for (  StatisticKPrimOption statisticResponse : statisticResponses) {
    Response response=statisticResponse.getResponse();
    double right=statisticResponse.getNumOfCorrect();
    double wrong=statisticResponse.getNumOfIncorrect();
    double notanswered=numOfParticipants - right - wrong;
    String label=Integer.toString(++i);
    d1.add(right,label);
    d2.add(wrong,label);
    d3.add(notanswered,label);
    String text=response.getContent().renderAsHtml(mediaBaseURL);
    responseInfos.add(new ResponseInfos(label,text,null,(right > 0f),survey));
  }
  List<BarSeries> serieList=new ArrayList<>(3);
  serieList.add(d1);
  serieList.add(d2);
  serieList.add(d3);
  Series series=new Series(serieList,responseInfos,numOfParticipants);
  series.setChartType(survey ? BAR_ANSWERED : BAR_CORRECT_WRONG_NOT);
  series.setItemCss(getCssClass(item));
  return series;
}"
69664,"/** 
 * check for valid email
 */
@Override public boolean isValidValue(User user,String value,ValidationError validationError,Locale locale){
  if (!super.isValidValue(user,value,validationError,locale)) {
    return false;
  }
  if (StringHelper.containsNonWhitespace(value)) {
    if (!MailHelper.isValidEmailAddress(value)) {
      validationError.setErrorKey(i18nFormElementLabelKey() + ""String_Node_Str"");
      return false;
    }
  }
  return true;
}","/** 
 * check for valid email
 */
@Override public boolean isValidValue(User user,String value,ValidationError validationError,Locale locale){
  if (!super.isValidValue(user,value,validationError,locale)) {
    return false;
  }
  if (StringHelper.containsNonWhitespace(value)) {
    value=value.toLowerCase().trim();
    if (!MailHelper.isValidEmailAddress(value)) {
      validationError.setErrorKey(i18nFormElementLabelKey() + ""String_Node_Str"");
      return false;
    }
  }
  return true;
}"
69665,"@Override public boolean isValid(User user,FormItem formItem,Map<String,String> formContext){
  if (!super.isValid(user,formItem,formContext)) {
    return false;
  }
  org.olat.core.gui.components.form.flexible.elements.TextElement textElement=(org.olat.core.gui.components.form.flexible.elements.TextElement)formItem;
  String value=textElement.getValue();
  if (StringHelper.containsNonWhitespace(value)) {
    if (!MailHelper.isValidEmailAddress(value)) {
      textElement.setErrorKey(i18nFormElementLabelKey() + ""String_Node_Str"",null);
      return false;
    }
    if (!isAddressAvailable(value,(formContext != null) ? (String)formContext.get(""String_Node_Str"") : null)) {
      textElement.setErrorKey(i18nFormElementLabelKey() + ""String_Node_Str"",null);
      return false;
    }
  }
  return true;
}","@Override public boolean isValid(User user,FormItem formItem,Map<String,String> formContext){
  if (!super.isValid(user,formItem,formContext)) {
    return false;
  }
  org.olat.core.gui.components.form.flexible.elements.TextElement textElement=(org.olat.core.gui.components.form.flexible.elements.TextElement)formItem;
  String value=textElement.getValue();
  if (StringHelper.containsNonWhitespace(value)) {
    value=value.toLowerCase().trim();
    if (!MailHelper.isValidEmailAddress(value)) {
      textElement.setErrorKey(i18nFormElementLabelKey() + ""String_Node_Str"",null);
      return false;
    }
    if (!isAddressAvailable(value,(formContext != null) ? (String)formContext.get(""String_Node_Str"") : null)) {
      textElement.setErrorKey(i18nFormElementLabelKey() + ""String_Node_Str"",null);
      return false;
    }
  }
  return true;
}"
69666,"@Override protected void setInternalValue(User user,String mail){
  if (mail != null) {
    super.setInternalValue(user,mail.toLowerCase());
  }
 else {
    super.setInternalValue(user,null);
  }
}","@Override protected void setInternalValue(User user,String mail){
  if (mail != null) {
    super.setInternalValue(user,mail.toLowerCase().trim());
  }
 else {
    super.setInternalValue(user,null);
  }
}"
69667,"@Override public void reloadData(){
  if (dataSource != null) {
    dataSource.clear();
    dataSource.load(getSearchText(),getConditionalQueries(),0,getPageSize());
  }
}","@Override public void reloadData(){
  if (dataSource != null) {
    dataSource.clear();
    dataSource.load(getSearchText(),getConditionalQueries(),0,getPageSize());
  }
 else {
    if (dataModel instanceof FilterableFlexiTableModel) {
      if (filterEl != null && filterEl.isOneSelected()) {
        String filter=filterEl.getSelectedKey();
        ((FilterableFlexiTableModel)dataModel).filter(filter);
      }
    }
    if (dataModel instanceof SortableFlexiTableDataModel) {
      if (orderBy != null && orderBy.length > 0) {
        ((SortableFlexiTableDataModel<?>)dataModel).sort(orderBy[0]);
      }
    }
  }
  component.setDirty(true);
}"
69668,"public void addPageNumbers() throws IOException {
  float footerFontSize=10.0f;
  @SuppressWarnings(""String_Node_Str"") List<PDPage> allPages=document.getDocumentCatalog().getAllPages();
  int numOfPages=allPages.size();
  for (int i=0; i < allPages.size(); i++) {
    PDPage page=allPages.get(i);
    PDRectangle pageSize=page.findMediaBox();
    String text=(i + 1) + ""String_Node_Str"" + numOfPages;
    float stringWidth=getStringWidth(text,footerFontSize);
    float pageWidth=pageSize.getWidth();
    double x=(pageWidth - stringWidth) / 2.0f;
    double y=(marginTopBottom / 2.0f);
    PDPageContentStream contentStream=new PDPageContentStream(document,page,true,true,true);
    contentStream.beginText();
    contentStream.setFont(font,footerFontSize);
    contentStream.setTextTranslation(x,y);
    contentStream.drawString(text);
    contentStream.endText();
    contentStream.close();
  }
}","public void addPageNumbers() throws IOException {
  float footerFontSize=10.0f;
  @SuppressWarnings(""String_Node_Str"") List<PDPage> allPages=document.getDocumentCatalog().getAllPages();
  int numOfPages=allPages.size();
  for (int i=0; i < allPages.size(); i++) {
    PDPage page=allPages.get(i);
    PDRectangle pageSize=page.findMediaBox();
    String text=(i + 1) + ""String_Node_Str"" + numOfPages;
    float stringWidth=getStringWidth(text,footerFontSize);
    float pageWidth=pageSize.getWidth();
    double x=(pageWidth - stringWidth) / 2.0f;
    double y=(marginTopBottom / 2.0f);
    PDPageContentStream contentStream=new PDPageContentStream(document,page,true,true,true);
    contentStream.beginText();
    contentStream.setFont(font,footerFontSize);
    contentStream.setTextTranslation(x,y);
    contentStream.drawString(text);
    contentStream.endText();
    contentStream.beginText();
    contentStream.setFont(font,footerFontSize);
    contentStream.setTextTranslation(marginLeftRight,y);
    contentStream.drawString(printDate);
    contentStream.endText();
    contentStream.close();
  }
}"
69669,"public PdfDocument() throws IOException {
  document=new PDDocument();
}","public PdfDocument(Locale locale) throws IOException {
  document=new PDDocument();
  printDate=Formatter.getInstance(locale).formatDate(new Date());
}"
69670,"/** 
 * Constructor for the identity assessment edit controller
 * @param ureq The user request
 * @param wControl The window control
 * @param course
 * @param courseNode The assessable course node
 * @param assessedIdentityWrapper The wrapped assessed identity
 */
public AssessmentEditController(UserRequest ureq,WindowControl wControl,StackedController stackPanel,ICourse course,AssessableCourseNode courseNode,AssessedIdentityWrapper assessedIdentityWrapper){
  super(ureq,wControl);
  this.assessedIdentityWrapper=assessedIdentityWrapper;
  this.courseNode=courseNode;
  addLoggingResourceable(LoggingResourceable.wrap(course));
  addLoggingResourceable(LoggingResourceable.wrap(courseNode));
  if (courseNode == null) {
    throw new OLATRuntimeException(AssessmentEditController.class,""String_Node_Str"",null);
  }
  if (assessedIdentityWrapper == null) {
    throw new OLATRuntimeException(AssessmentEditController.class,""String_Node_Str"",null);
  }
  String lockSubKey=""String_Node_Str"" + courseNode.getIdent() + ""String_Node_Str""+ assessedIdentityWrapper.getIdentity().getKey();
  lockEntry=CoordinatorManager.getInstance().getCoordinator().getLocker().acquireLock(course,ureq.getIdentity(),lockSubKey);
  if (lockEntry.isSuccess()) {
    detailView=createVelocityContainer(""String_Node_Str"");
    hideLogButton=LinkFactory.createButtonSmall(""String_Node_Str"",detailView,this);
    showLogButton=LinkFactory.createButtonSmall(""String_Node_Str"",detailView,this);
    backLink=LinkFactory.createLinkBack(detailView,this);
    Identity assessedIdentity=assessedIdentityWrapper.getIdentity();
    detailView.contextPut(""String_Node_Str"",assessedIdentity.getUser());
    ModuleConfiguration modConfig=courseNode.getModuleConfiguration();
    String infoCoach=(String)modConfig.get(MSCourseNode.CONFIG_KEY_INFOTEXT_COACH);
    infoCoach=Formatter.formatLatexFormulas(infoCoach);
    detailView.contextPut(""String_Node_Str"",infoCoach);
    assessmentForm=new AssessmentForm(ureq,wControl,courseNode,assessedIdentityWrapper);
    listenTo(assessmentForm);
    detailView.put(""String_Node_Str"",assessmentForm.getInitialComponent());
    UserCourseEnvironment uce=assessedIdentityWrapper.getUserCourseEnvironment();
    String nodeLog=courseNode.getUserLog(uce);
    detailView.contextPut(""String_Node_Str"",nodeLog);
    if (courseNode.hasDetails()) {
      detailView.contextPut(""String_Node_Str"",Boolean.TRUE);
      detailsEditController=courseNode.getDetailsEditController(ureq,wControl,stackPanel,uce);
      listenTo(detailsEditController);
      detailView.put(""String_Node_Str"",detailsEditController.getInitialComponent());
    }
 else {
      detailView.contextPut(""String_Node_Str"",Boolean.FALSE);
    }
    detailView.contextPut(""String_Node_Str"",courseNode);
    detailView.contextPut(""String_Node_Str"",CourseNodeFactory.getInstance().getCourseNodeConfigurationEvenForDisabledBB(courseNode.getType()).getIconCSSClass());
    List<BusinessGroup> participantGroups=course.getCourseEnvironment().getCourseGroupManager().getParticipatingBusinessGroups(assessedIdentity);
    final Collator collator=Collator.getInstance(ureq.getLocale());
    Collections.sort(participantGroups,new Comparator<BusinessGroup>(){
      public int compare(      BusinessGroup a,      BusinessGroup b){
        return collator.compare(a.getName(),b.getName());
      }
    }
);
    detailView.contextPut(""String_Node_Str"",participantGroups);
    detailView.contextPut(""String_Node_Str"",(participantGroups.size() > 0 ? Boolean.FALSE : Boolean.TRUE));
    detailView.contextPut(""String_Node_Str"",Boolean.TRUE);
    detailView.contextPut(""String_Node_Str"",Boolean.TRUE);
    detailView.contextPut(""String_Node_Str"",Boolean.TRUE);
    putInitialPanel(detailView);
  }
 else {
    alreadyLockedDialogController=DialogBoxUIFactory.createResourceLockedMessage(ureq,wControl,lockEntry,""String_Node_Str"",getTranslator());
    listenTo(alreadyLockedDialogController);
    alreadyLockedDialogController.activate();
  }
}","/** 
 * Constructor for the identity assessment edit controller
 * @param ureq The user request
 * @param wControl The window control
 * @param course
 * @param courseNode The assessable course node
 * @param assessedIdentityWrapper The wrapped assessed identity
 * @param showCourseNodeDetails show the details controller if one available
 */
public AssessmentEditController(UserRequest ureq,WindowControl wControl,StackedController stackPanel,ICourse course,AssessableCourseNode courseNode,AssessedIdentityWrapper assessedIdentityWrapper,boolean showCourseNodeDetails){
  super(ureq,wControl);
  this.assessedIdentityWrapper=assessedIdentityWrapper;
  this.courseNode=courseNode;
  addLoggingResourceable(LoggingResourceable.wrap(course));
  addLoggingResourceable(LoggingResourceable.wrap(courseNode));
  if (courseNode == null) {
    throw new OLATRuntimeException(AssessmentEditController.class,""String_Node_Str"",null);
  }
  if (assessedIdentityWrapper == null) {
    throw new OLATRuntimeException(AssessmentEditController.class,""String_Node_Str"",null);
  }
  String lockSubKey=""String_Node_Str"" + courseNode.getIdent() + ""String_Node_Str""+ assessedIdentityWrapper.getIdentity().getKey();
  lockEntry=CoordinatorManager.getInstance().getCoordinator().getLocker().acquireLock(course,ureq.getIdentity(),lockSubKey);
  if (lockEntry.isSuccess()) {
    detailView=createVelocityContainer(""String_Node_Str"");
    hideLogButton=LinkFactory.createButtonSmall(""String_Node_Str"",detailView,this);
    showLogButton=LinkFactory.createButtonSmall(""String_Node_Str"",detailView,this);
    backLink=LinkFactory.createLinkBack(detailView,this);
    Identity assessedIdentity=assessedIdentityWrapper.getIdentity();
    detailView.contextPut(""String_Node_Str"",assessedIdentity.getUser());
    ModuleConfiguration modConfig=courseNode.getModuleConfiguration();
    String infoCoach=(String)modConfig.get(MSCourseNode.CONFIG_KEY_INFOTEXT_COACH);
    infoCoach=Formatter.formatLatexFormulas(infoCoach);
    detailView.contextPut(""String_Node_Str"",infoCoach);
    assessmentForm=new AssessmentForm(ureq,wControl,courseNode,assessedIdentityWrapper);
    listenTo(assessmentForm);
    detailView.put(""String_Node_Str"",assessmentForm.getInitialComponent());
    UserCourseEnvironment uce=assessedIdentityWrapper.getUserCourseEnvironment();
    String nodeLog=courseNode.getUserLog(uce);
    detailView.contextPut(""String_Node_Str"",nodeLog);
    if (courseNode.hasDetails() && showCourseNodeDetails) {
      detailView.contextPut(""String_Node_Str"",Boolean.TRUE);
      detailsEditController=courseNode.getDetailsEditController(ureq,wControl,stackPanel,uce);
      listenTo(detailsEditController);
      detailView.put(""String_Node_Str"",detailsEditController.getInitialComponent());
    }
 else {
      detailView.contextPut(""String_Node_Str"",Boolean.FALSE);
    }
    detailView.contextPut(""String_Node_Str"",courseNode);
    detailView.contextPut(""String_Node_Str"",CourseNodeFactory.getInstance().getCourseNodeConfigurationEvenForDisabledBB(courseNode.getType()).getIconCSSClass());
    List<BusinessGroup> participantGroups=course.getCourseEnvironment().getCourseGroupManager().getParticipatingBusinessGroups(assessedIdentity);
    final Collator collator=Collator.getInstance(ureq.getLocale());
    Collections.sort(participantGroups,new Comparator<BusinessGroup>(){
      public int compare(      BusinessGroup a,      BusinessGroup b){
        return collator.compare(a.getName(),b.getName());
      }
    }
);
    detailView.contextPut(""String_Node_Str"",participantGroups);
    detailView.contextPut(""String_Node_Str"",(participantGroups.size() > 0 ? Boolean.FALSE : Boolean.TRUE));
    detailView.contextPut(""String_Node_Str"",Boolean.TRUE);
    detailView.contextPut(""String_Node_Str"",Boolean.TRUE);
    detailView.contextPut(""String_Node_Str"",Boolean.TRUE);
    putInitialPanel(detailView);
  }
 else {
    alreadyLockedDialogController=DialogBoxUIFactory.createResourceLockedMessage(ureq,wControl,lockEntry,""String_Node_Str"",getTranslator());
    listenTo(alreadyLockedDialogController);
    alreadyLockedDialogController.activate();
  }
}"
69671,"/** 
 * Init edit controller for this identity and this course node or use identity assessment overview if no course node is defined. (Rely on the instance variable currentCourseNode and assessedIdentityWrapper)
 * @param ureq
 * @param course
 */
private void initIdentityEditController(UserRequest ureq,ICourse course){
  if (currentCourseNode == null) {
    removeAsListenerAndDispose(identityAssessmentController);
    identityAssessmentController=new IdentityAssessmentEditController(getWindowControl(),ureq,stackPanel,assessedIdentityWrapper.getIdentity(),course,true);
    listenTo(identityAssessmentController);
    setContent(identityAssessmentController.getInitialComponent());
  }
 else {
    removeAsListenerAndDispose(assessmentEditController);
    assessmentEditController=new AssessmentEditController(ureq,getWindowControl(),stackPanel,course,currentCourseNode,assessedIdentityWrapper);
    listenTo(assessmentEditController);
    main.setContent(assessmentEditController.getInitialComponent());
  }
}","/** 
 * Init edit controller for this identity and this course node or use identity assessment overview if no course node is defined. (Rely on the instance variable currentCourseNode and assessedIdentityWrapper)
 * @param ureq
 * @param course
 */
private void initIdentityEditController(UserRequest ureq,ICourse course){
  if (currentCourseNode == null) {
    removeAsListenerAndDispose(identityAssessmentController);
    identityAssessmentController=new IdentityAssessmentEditController(getWindowControl(),ureq,stackPanel,assessedIdentityWrapper.getIdentity(),course,true);
    listenTo(identityAssessmentController);
    setContent(identityAssessmentController.getInitialComponent());
  }
 else {
    removeAsListenerAndDispose(assessmentEditController);
    assessmentEditController=new AssessmentEditController(ureq,getWindowControl(),stackPanel,course,currentCourseNode,assessedIdentityWrapper,true);
    listenTo(assessmentEditController);
    main.setContent(assessmentEditController.getInitialComponent());
  }
}"
69672,"private void doEditNodeAssessment(UserRequest ureq,AssessableCourseNode courseNode){
  if (mayEdit) {
    ICourse course=CourseFactory.loadCourse(ores);
    UserCourseInformationsManager userCourseInformationsManager=CoreSpringFactory.getImpl(UserCourseInformationsManager.class);
    Date initialLaunchDate=userCourseInformationsManager.getInitialLaunchDate(ores.getResourceableId(),assessedUserCourseEnvironment.getIdentityEnvironment().getIdentity());
    AssessedIdentityWrapper assessedIdentityWrapper=AssessmentHelper.wrapIdentity(assessedUserCourseEnvironment,initialLaunchDate,courseNode);
    assessmentEditCtr=new AssessmentEditController(ureq,getWindowControl(),stackPanel,course,courseNode,assessedIdentityWrapper);
    listenTo(assessmentEditCtr);
    main.setContent(assessmentEditCtr.getInitialComponent());
  }
 else {
    throw new OLATSecurityException(""String_Node_Str"");
  }
}","private void doEditNodeAssessment(UserRequest ureq,AssessableCourseNode courseNode){
  if (mayEdit) {
    ICourse course=CourseFactory.loadCourse(ores);
    UserCourseInformationsManager userCourseInformationsManager=CoreSpringFactory.getImpl(UserCourseInformationsManager.class);
    Date initialLaunchDate=userCourseInformationsManager.getInitialLaunchDate(ores.getResourceableId(),assessedUserCourseEnvironment.getIdentityEnvironment().getIdentity());
    AssessedIdentityWrapper assessedIdentityWrapper=AssessmentHelper.wrapIdentity(assessedUserCourseEnvironment,initialLaunchDate,courseNode);
    assessmentEditCtr=new AssessmentEditController(ureq,getWindowControl(),stackPanel,course,courseNode,assessedIdentityWrapper,true);
    listenTo(assessmentEditCtr);
    main.setContent(assessmentEditCtr.getInitialComponent());
  }
 else {
    throw new OLATSecurityException(""String_Node_Str"");
  }
}"
69673,"/** 
 * @see org.olat.course.nodes.CourseNode#createNodeRunConstructionResult(org.olat.core.gui.UserRequest,org.olat.core.gui.control.WindowControl,org.olat.course.run.userview.UserCourseEnvironment,org.olat.course.run.userview.NodeEvaluation)
 */
@Override public NodeRunConstructionResult createNodeRunConstructionResult(UserRequest ureq,WindowControl wControl,final UserCourseEnvironment userCourseEnv,NodeEvaluation ne,String nodecmd){
  updateModuleConfigDefaults(false);
  Controller ctrl;
  OLATResourceable ores=OresHelper.createOLATResourceableInstance(""String_Node_Str"",userCourseEnv.getCourseEnvironment().getCourseResourceableId());
  if (userCourseEnv.isCoach()) {
    ctrl=new CheckListRunForCoachController(ureq,wControl,userCourseEnv,ores,this);
  }
 else {
    ctrl=new CheckListRunController(ureq,wControl,userCourseEnv,ores,this);
  }
  Controller cont=TitledWrapperHelper.getWrapper(ureq,wControl,ctrl,this,ICON_CSS_CLASS);
  return new NodeRunConstructionResult(cont);
}","/** 
 * @see org.olat.course.nodes.CourseNode#createNodeRunConstructionResult(org.olat.core.gui.UserRequest,org.olat.core.gui.control.WindowControl,org.olat.course.run.userview.UserCourseEnvironment,org.olat.course.run.userview.NodeEvaluation)
 */
@Override public NodeRunConstructionResult createNodeRunConstructionResult(UserRequest ureq,WindowControl wControl,final UserCourseEnvironment userCourseEnv,NodeEvaluation ne,String nodecmd){
  updateModuleConfigDefaults(false);
  Controller ctrl;
  OLATResourceable ores=OresHelper.createOLATResourceableInstance(""String_Node_Str"",userCourseEnv.getCourseEnvironment().getCourseResourceableId());
  if (userCourseEnv.isCoach() || userCourseEnv.isAdmin()) {
    ctrl=new CheckListRunForCoachController(ureq,wControl,userCourseEnv,ores,this);
  }
 else {
    ctrl=new CheckListRunController(ureq,wControl,userCourseEnv,ores,this);
  }
  Controller cont=TitledWrapperHelper.getWrapper(ureq,wControl,ctrl,this,ICON_CSS_CLASS);
  return new NodeRunConstructionResult(cont);
}"
69674,"private CheckboxWrapper forgeCheckboxWrapper(Checkbox checkbox,DBCheck check,boolean readOnly,FormItemContainer formLayout){
  String[] values=new String[]{translate(checkbox.getLabel().i18nKey())};
  String boxId=""String_Node_Str"" + checkbox.getCheckboxId();
  MultipleSelectionElement boxEl=uifactory.addCheckboxesHorizontal(boxId,null,formLayout,onKeys,values,null);
  boxEl.setEnabled(!readOnly);
  boxEl.setLabel(checkbox.getTitle(),null,false);
  boxEl.showLabel(true);
  boxEl.addActionListener(this,FormEvent.ONCHANGE);
  TextElement pointEl=null;
  if (withScore) {
    String pointId=""String_Node_Str"" + checkbox.getCheckboxId();
    String points=AssessmentHelper.getRoundedScore(checkbox.getPoints());
    pointEl=uifactory.addTextElement(pointId,null,16,points,formLayout);
    pointEl.setDisplaySize(5);
    pointEl.setExampleKey(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  }
  CheckboxWrapper wrapper=new CheckboxWrapper(checkbox,check,boxEl,pointEl);
  boxEl.setUserObject(wrapper);
  if (check != null && check.getChecked() != null && check.getChecked().booleanValue()) {
    boxEl.select(onKeys[0],true);
    wrapper.setDbCheckbox(check.getCheckbox());
  }
  return wrapper;
}","private CheckboxWrapper forgeCheckboxWrapper(Checkbox checkbox,DBCheck check,boolean readOnly,FormItemContainer formLayout){
  String[] values=new String[]{translate(checkbox.getLabel().i18nKey())};
  String boxId=""String_Node_Str"" + checkbox.getCheckboxId();
  MultipleSelectionElement boxEl=uifactory.addCheckboxesHorizontal(boxId,null,formLayout,onKeys,values,null);
  boxEl.setEnabled(!readOnly);
  boxEl.setLabel(checkbox.getTitle(),null,false);
  boxEl.showLabel(true);
  boxEl.addActionListener(this,FormEvent.ONCHANGE);
  TextElement pointEl=null;
  if (withScore) {
    String pointId=""String_Node_Str"" + checkbox.getCheckboxId();
    String points=AssessmentHelper.getRoundedScore(check.getScore());
    pointEl=uifactory.addTextElement(pointId,null,16,points,formLayout);
    pointEl.setDisplaySize(5);
    pointEl.setExampleKey(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  }
  CheckboxWrapper wrapper=new CheckboxWrapper(checkbox,check,boxEl,pointEl);
  boxEl.setUserObject(wrapper);
  if (check != null && check.getChecked() != null && check.getChecked().booleanValue()) {
    boxEl.select(onKeys[0],true);
    wrapper.setDbCheckbox(check.getCheckbox());
  }
  return wrapper;
}"
69675,"private void doOpenAssessment(UserRequest ureq){
  if (assessmentCtrl == null) {
    ICourse course=CourseFactory.loadCourse(courseOres);
    UserCourseEnvironment uce=AssessmentHelper.createAndInitUserCourseEnvironment(assessedIdentity,course);
    AssessedIdentityWrapper idWrapper=AssessmentHelper.wrapIdentity(uce,null,courseNode);
    assessmentCtrl=new AssessmentEditController(ureq,getWindowControl(),null,course,courseNode,idWrapper);
    assessmentCtrl.setIdentityInfos(false);
    assessmentCtrl.setCourseNodeInfos(false);
    assessmentCtrl.setTitleInfos(false);
    listenTo(assessmentCtrl);
  }
  mainVC.put(""String_Node_Str"",assessmentCtrl.getInitialComponent());
}","private void doOpenAssessment(UserRequest ureq){
  if (assessmentCtrl == null) {
    ICourse course=CourseFactory.loadCourse(courseOres);
    UserCourseEnvironment uce=AssessmentHelper.createAndInitUserCourseEnvironment(assessedIdentity,course);
    AssessedIdentityWrapper idWrapper=AssessmentHelper.wrapIdentity(uce,null,courseNode);
    assessmentCtrl=new AssessmentEditController(ureq,getWindowControl(),null,course,courseNode,idWrapper,false);
    assessmentCtrl.setIdentityInfos(false);
    assessmentCtrl.setCourseNodeInfos(false);
    assessmentCtrl.setTitleInfos(false);
    listenTo(assessmentCtrl);
  }
  mainVC.put(""String_Node_Str"",assessmentCtrl.getInitialComponent());
}"
69676,"private void doOpenEdit(UserRequest ureq,CheckListAssessmentRow row){
  if (editCtrl != null)   return;
  Identity assessedIdentity=securityManager.loadIdentityByKey(row.getIdentityKey());
  editCtrl=new AssessedIdentityOverviewController(ureq,getWindowControl(),assessedIdentity,courseOres,userCourseEnv,courseNode);
  listenTo(editCtrl);
  String title=courseNode.getShortTitle();
  Component content=editCtrl.getInitialComponent();
  cmc=new CloseableModalController(getWindowControl(),""String_Node_Str"",content,true,title);
  listenTo(cmc);
  cmc.activate();
}","private void doOpenEdit(UserRequest ureq,CheckListAssessmentRow row){
  if (editCtrl != null)   return;
  Identity assessedIdentity=securityManager.loadIdentityByKey(row.getIdentityKey());
  editCtrl=new AssessedIdentityOverviewController(ureq,getWindowControl(),assessedIdentity,courseOres,userCourseEnv,courseNode);
  listenTo(editCtrl);
  String title=courseNode.getShortTitle();
  Component content=editCtrl.getInitialComponent();
  cmc=new CloseableModalController(getWindowControl(),translate(""String_Node_Str""),content,true,title);
  listenTo(cmc);
  cmc.activate();
}"
69677,"private void doOpenBoxAssessment(UserRequest ureq){
  if (boxAssessmentCtrl != null)   return;
  List<CheckListAssessmentRow> rows=model.getBackedUpRows();
  boxAssessmentCtrl=new CheckboxAssessmentController(ureq,getWindowControl(),checkboxList,rows,courseOres,userCourseEnv,courseNode);
  listenTo(boxAssessmentCtrl);
  String title=translate(""String_Node_Str"");
  Component content=boxAssessmentCtrl.getInitialComponent();
  cmc=new CloseableModalController(getWindowControl(),""String_Node_Str"",content,true,title);
  listenTo(cmc);
  cmc.activate();
}","private void doOpenBoxAssessment(UserRequest ureq){
  if (boxAssessmentCtrl != null)   return;
  List<CheckListAssessmentRow> rows=model.getObjects();
  boxAssessmentCtrl=new CheckboxAssessmentController(ureq,getWindowControl(),checkboxList,rows,courseOres,userCourseEnv,courseNode);
  listenTo(boxAssessmentCtrl);
  String title=translate(""String_Node_Str"");
  Component content=boxAssessmentCtrl.getInitialComponent();
  cmc=new CloseableModalController(getWindowControl(),translate(""String_Node_Str""),content,true,title);
  listenTo(cmc);
  cmc.activate();
}"
69678,"private void doCheckedExportPDF(UserRequest ureq){
  try {
    String name=courseNode.getShortTitle();
    CheckedPDFExport pdfExport=new CheckedPDFExport(name,getTranslator(),withScore,userPropertyHandlers);
    pdfExport.setAuthor(userManager.getUserDisplayName(getIdentity()));
    pdfExport.setTitle(courseNode.getShortTitle());
    pdfExport.setSubject(courseNode.getLongTitle());
    pdfExport.setObjectives(courseNode.getLearningObjectives());
    pdfExport.create(checkboxList,model);
    ureq.getDispatchResult().setResultingMediaResource(pdfExport);
  }
 catch (  IOException|COSVisitorException|TransformerException e) {
    logError(""String_Node_Str"",e);
  }
}","private void doCheckedExportPDF(UserRequest ureq){
  try {
    String name=courseNode.getShortTitle();
    CheckedPDFExport pdfExport=new CheckedPDFExport(name,getTranslator(),withScore,userPropertyHandlers);
    pdfExport.setAuthor(userManager.getUserDisplayName(getIdentity()));
    pdfExport.setCourseNodeTitle(courseNode.getShortTitle());
    pdfExport.setCourseTitle(courseNode.getLongTitle());
    pdfExport.create(checkboxList,model.getObjects());
    ureq.getDispatchResult().setResultingMediaResource(pdfExport);
  }
 catch (  IOException|COSVisitorException|TransformerException e) {
    logError(""String_Node_Str"",e);
  }
}"
69679,"private List<CheckListAssessmentRow> loadDatas(){
  if (!(userCourseEnv instanceof UserCourseEnvironmentImpl)) {
    return Collections.emptyList();
  }
  UserCourseEnvironmentImpl env=(UserCourseEnvironmentImpl)userCourseEnv;
  List<Checkbox> checkboxColl=checkboxList.getList();
  int numOfCheckbox=checkboxList.getNumOfCheckbox();
  List<SecurityGroup> secGroups=new ArrayList<SecurityGroup>();
  Map<Long,Long> groupToSecGroupKey=new HashMap<Long,Long>();
  RepositoryEntry re=env.getCourseRepositoryEntry();
  boolean courseTutor=securityManager.isIdentityInSecurityGroup(getIdentity(),re.getTutorGroup());
  Set<Long> missingIdentityKeys=new HashSet<>();
  if (courseTutor) {
    secGroups.add(re.getParticipantGroup());
    List<RepositoryEntryMembership> repoMemberships=repositoryManager.getRepositoryEntryMembership(re);
    for (    RepositoryEntryMembership repoMembership : repoMemberships) {
      if (repoMembership.getParticipantRepoKey() == null)       continue;
      missingIdentityKeys.add(repoMembership.getIdentityKey());
    }
  }
  List<BusinessGroup> coachedGroups=env.getCoachedGroups();
  for (  BusinessGroup group : coachedGroups) {
    secGroups.add(group.getPartipiciantGroup());
    groupToSecGroupKey.put(group.getKey(),group.getPartipiciantGroup().getKey());
  }
  List<AssessmentData> dataList=checkboxManager.getAssessmentDatas(courseOres,courseNode.getIdent(),secGroups);
  List<CheckListAssessmentRow> boxList=getAssessmentDataViews(dataList,checkboxColl);
  Map<Long,CheckListAssessmentRow> identityToView=new HashMap<>();
  for (  CheckListAssessmentRow box : boxList) {
    identityToView.put(box.getIdentityKey(),box);
    missingIdentityKeys.remove(box.getIdentityKey());
  }
  List<BusinessGroupMembership> memberships=businessGroupService.getBusinessGroupsMembership(coachedGroups);
  for (  BusinessGroupMembership membership : memberships) {
    if (!membership.isParticipant())     continue;
    Long identityKey=membership.getIdentityKey();
    if (!identityToView.containsKey(identityKey)) {
      missingIdentityKeys.add(identityKey);
    }
  }
  List<Identity> missingIdentities=securityManager.loadIdentityByKeys(missingIdentityKeys);
  for (  Identity missingIdentity : missingIdentities) {
    Boolean[] checked=new Boolean[numOfCheckbox];
    Float[] scores=new Float[numOfCheckbox];
    CheckListAssessmentRow view=new CheckListAssessmentRow(missingIdentity,checked,scores,null,userPropertyHandlers,getLocale());
    identityToView.put(missingIdentity.getKey(),view);
  }
  for (  BusinessGroupMembership membership : memberships) {
    if (!membership.isParticipant())     continue;
    CheckListAssessmentRow view=identityToView.get(membership.getIdentityKey());
    if (view != null) {
      view.addGroupKey(membership.getGroupKey());
    }
  }
  List<CheckListAssessmentRow> views=new ArrayList<>();
  views.addAll(identityToView.values());
  return views;
}","private List<CheckListAssessmentRow> loadDatas(){
  if (!(userCourseEnv instanceof UserCourseEnvironmentImpl)) {
    return Collections.emptyList();
  }
  UserCourseEnvironmentImpl env=(UserCourseEnvironmentImpl)userCourseEnv;
  List<Checkbox> checkboxColl=checkboxList.getList();
  int numOfCheckbox=checkboxList.getNumOfCheckbox();
  boolean courseAdmin=env.isAdmin();
  List<SecurityGroup> secGroups=new ArrayList<SecurityGroup>();
  Map<Long,Long> groupToSecGroupKey=new HashMap<Long,Long>();
  RepositoryEntry re=env.getCourseRepositoryEntry();
  boolean courseTutor=securityManager.isIdentityInSecurityGroup(getIdentity(),re.getTutorGroup());
  Set<Long> missingIdentityKeys=new HashSet<>();
  if (courseTutor || courseAdmin) {
    secGroups.add(re.getParticipantGroup());
    List<RepositoryEntryMembership> repoMemberships=repositoryManager.getRepositoryEntryMembership(re);
    for (    RepositoryEntryMembership repoMembership : repoMemberships) {
      if (repoMembership.getParticipantRepoKey() == null)       continue;
      missingIdentityKeys.add(repoMembership.getIdentityKey());
    }
  }
  List<BusinessGroup> coachedGroups=courseAdmin ? userCourseEnv.getCourseEnvironment().getCourseGroupManager().getAllBusinessGroups() : env.getCoachedGroups();
  for (  BusinessGroup group : coachedGroups) {
    secGroups.add(group.getPartipiciantGroup());
    groupToSecGroupKey.put(group.getKey(),group.getPartipiciantGroup().getKey());
  }
  List<AssessmentData> dataList=checkboxManager.getAssessmentDatas(courseOres,courseNode.getIdent(),secGroups);
  List<CheckListAssessmentRow> boxList=getAssessmentDataViews(dataList,checkboxColl);
  Map<Long,CheckListAssessmentRow> identityToView=new HashMap<>();
  for (  CheckListAssessmentRow box : boxList) {
    identityToView.put(box.getIdentityKey(),box);
    missingIdentityKeys.remove(box.getIdentityKey());
  }
  List<BusinessGroupMembership> memberships=businessGroupService.getBusinessGroupsMembership(coachedGroups);
  for (  BusinessGroupMembership membership : memberships) {
    if (!membership.isParticipant())     continue;
    Long identityKey=membership.getIdentityKey();
    if (!identityToView.containsKey(identityKey)) {
      missingIdentityKeys.add(identityKey);
    }
  }
  List<Identity> missingIdentities=securityManager.loadIdentityByKeys(missingIdentityKeys);
  for (  Identity missingIdentity : missingIdentities) {
    Boolean[] checked=new Boolean[numOfCheckbox];
    Float[] scores=new Float[numOfCheckbox];
    CheckListAssessmentRow view=new CheckListAssessmentRow(missingIdentity,checked,scores,null,userPropertyHandlers,getLocale());
    identityToView.put(missingIdentity.getKey(),view);
  }
  for (  BusinessGroupMembership membership : memberships) {
    if (!membership.isParticipant())     continue;
    CheckListAssessmentRow view=identityToView.get(membership.getIdentityKey());
    if (view != null) {
      view.addGroupKey(membership.getGroupKey());
    }
  }
  List<CheckListAssessmentRow> views=new ArrayList<>();
  views.addAll(identityToView.values());
  return views;
}"
69680,"@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (editCtrl == source) {
    cmc.deactivate();
    cleanUp();
  }
 else   if (boxAssessmentCtrl == source) {
    cmc.deactivate();
    cleanUp();
    if (event == Event.DONE_EVENT || event == Event.CHANGED_EVENT) {
      DBFactory.getInstance().commit();
      model.setObjects(loadDatas());
      table.reset();
      table.reloadData();
    }
  }
 else   if (cmc == source) {
    cleanUp();
  }
  super.event(ureq,source,event);
}","@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (editCtrl == source) {
    cmc.deactivate();
    cleanUp();
    if (event == Event.DONE_EVENT || event == Event.CHANGED_EVENT) {
      reloadTable();
    }
  }
 else   if (boxAssessmentCtrl == source) {
    cmc.deactivate();
    cleanUp();
    if (event == Event.DONE_EVENT || event == Event.CHANGED_EVENT) {
      reloadTable();
    }
  }
 else   if (cmc == source) {
    cleanUp();
  }
  super.event(ureq,source,event);
}"
69681,"private void doExportPDF(UserRequest ureq){
  try {
    String name=courseNode.getShortTitle();
    CheckboxPDFExport pdfExport=new CheckboxPDFExport(name,getTranslator(),userPropertyHandlers);
    pdfExport.setAuthor(userManager.getUserDisplayName(getIdentity()));
    pdfExport.setTitle(courseNode.getShortTitle());
    pdfExport.setSubject(courseNode.getLongTitle());
    pdfExport.setObjectives(courseNode.getLearningObjectives());
    pdfExport.create(checkboxList,model);
    ureq.getDispatchResult().setResultingMediaResource(pdfExport);
  }
 catch (  IOException|COSVisitorException|TransformerException e) {
    logError(""String_Node_Str"",e);
  }
}","private void doExportPDF(UserRequest ureq){
  try {
    String name=courseNode.getShortTitle();
    CheckboxPDFExport pdfExport=new CheckboxPDFExport(name,getTranslator(),userPropertyHandlers);
    pdfExport.setAuthor(userManager.getUserDisplayName(getIdentity()));
    pdfExport.setCourseNodeTitle(courseNode.getShortTitle());
    pdfExport.setCourseTitle(courseNode.getLongTitle());
    pdfExport.setCourseNodeTitle(courseNode.getShortTitle());
    String groupName=table.getSelectedFilterValue();
    pdfExport.setGroupName(groupName);
    pdfExport.create(checkboxList,model.getObjects());
    ureq.getDispatchResult().setResultingMediaResource(pdfExport);
  }
 catch (  IOException|COSVisitorException|TransformerException e) {
    logError(""String_Node_Str"",e);
  }
}"
69682,"protected void init(UserRequest ureq,boolean mayModifyMembers,boolean keepAtLeastOne,boolean enableTablePreferences,boolean enableUserSelection,boolean allowDownload,boolean mandatoryEmail,Group group,String role){
  this.group=group;
  this.mayModifyMembers=mayModifyMembers;
  this.keepAtLeastOne=keepAtLeastOne;
  this.mandatoryEmail=mandatoryEmail;
  securityManager=BaseSecurityManager.getInstance();
  imModule=CoreSpringFactory.getImpl(InstantMessagingModule.class);
  imService=CoreSpringFactory.getImpl(InstantMessagingService.class);
  userManager=CoreSpringFactory.getImpl(UserManager.class);
  sessionManager=CoreSpringFactory.getImpl(UserSessionManager.class);
  mailManager=CoreSpringFactory.getImpl(MailManager.class);
  Roles roles=ureq.getUserSession().getRoles();
  BaseSecurityModule securityModule=CoreSpringFactory.getImpl(BaseSecurityModule.class);
  isAdministrativeUser=securityModule.isUserAllowedAdminProps(roles);
  chatEnabled=imModule.isEnabled() && imModule.isPrivateEnabled();
  this.addUserMailDefaultTempl=null;
  this.removeUserMailDefaultTempl=null;
  groupmemberview=createVelocityContainer(""String_Node_Str"");
  addUsersButton=LinkFactory.createButtonSmall(""String_Node_Str"",groupmemberview,this);
  addUsersButton.setElementCssClass(""String_Node_Str"");
  addUserButton=LinkFactory.createButtonSmall(""String_Node_Str"",groupmemberview,this);
  addUserButton.setElementCssClass(""String_Node_Str"");
  if (mayModifyMembers) {
    groupmemberview.contextPut(""String_Node_Str"",Boolean.TRUE);
  }
  TableGuiConfiguration tableConfig=new TableGuiConfiguration();
  tableConfig.setDownloadOffered(allowDownload);
  if (enableTablePreferences) {
    if (mayModifyMembers) {
      tableConfig.setPreferencesOffered(true,""String_Node_Str"" + group.getKey());
    }
 else {
      tableConfig.setPreferencesOffered(true,""String_Node_Str"" + group.getKey());
    }
  }
  myTrans=userManager.getPropertyHandlerTranslator(getTranslator());
  tableCtr=new TableController(tableConfig,ureq,getWindowControl(),myTrans);
  listenTo(tableCtr);
  initGroupTable(tableCtr,ureq,enableTablePreferences,enableUserSelection);
  reloadData();
  groupmemberview.put(""String_Node_Str"",tableCtr.getInitialComponent());
  putInitialPanel(groupmemberview);
}","protected void init(UserRequest ureq,boolean mayModifyMembers,boolean keepAtLeastOne,boolean enableTablePreferences,boolean enableUserSelection,boolean allowDownload,boolean mandatoryEmail,Group group,String role){
  this.group=group;
  this.mayModifyMembers=mayModifyMembers;
  this.keepAtLeastOne=keepAtLeastOne;
  this.mandatoryEmail=mandatoryEmail;
  setTranslator(Util.createPackageTranslator(org.olat.admin.securitygroup.gui.GroupController.class,getLocale(),getTranslator()));
  Roles roles=ureq.getUserSession().getRoles();
  BaseSecurityModule securityModule=CoreSpringFactory.getImpl(BaseSecurityModule.class);
  isAdministrativeUser=securityModule.isUserAllowedAdminProps(roles);
  chatEnabled=imModule.isEnabled() && imModule.isPrivateEnabled();
  this.addUserMailDefaultTempl=null;
  this.removeUserMailDefaultTempl=null;
  groupmemberview=createVelocityContainer(""String_Node_Str"");
  addUsersButton=LinkFactory.createButtonSmall(""String_Node_Str"",groupmemberview,this);
  addUsersButton.setElementCssClass(""String_Node_Str"");
  addUserButton=LinkFactory.createButtonSmall(""String_Node_Str"",groupmemberview,this);
  addUserButton.setElementCssClass(""String_Node_Str"");
  if (mayModifyMembers) {
    groupmemberview.contextPut(""String_Node_Str"",Boolean.TRUE);
  }
  TableGuiConfiguration tableConfig=new TableGuiConfiguration();
  tableConfig.setDownloadOffered(allowDownload);
  if (enableTablePreferences) {
    if (mayModifyMembers) {
      tableConfig.setPreferencesOffered(true,""String_Node_Str"" + group.getKey());
    }
 else {
      tableConfig.setPreferencesOffered(true,""String_Node_Str"" + group.getKey());
    }
  }
  myTrans=userManager.getPropertyHandlerTranslator(getTranslator());
  tableCtr=new TableController(tableConfig,ureq,getWindowControl(),myTrans);
  listenTo(tableCtr);
  initGroupTable(tableCtr,ureq,enableTablePreferences,enableUserSelection);
  reloadData();
  groupmemberview.put(""String_Node_Str"",tableCtr.getInitialComponent());
  putInitialPanel(groupmemberview);
}"
69683,"/** 
 * @param ureq
 * @param wControl
 * @param mayModifyMembers
 * @param keepAtLeastOne
 * @param enableTablePreferences
 * @param aSecurityGroup
 * @param enableUserSelection
 */
public GroupController(UserRequest ureq,WindowControl wControl,boolean mayModifyMembers,boolean keepAtLeastOne,boolean enableTablePreferences,boolean enableUserSelection,boolean allowDownload,boolean mandatoryEmail,Group group,String role){
  super(ureq,wControl);
  init(ureq,mayModifyMembers,keepAtLeastOne,enableTablePreferences,enableUserSelection,allowDownload,mandatoryEmail,group,role);
}","/** 
 * @param ureq
 * @param wControl
 * @param mayModifyMembers
 * @param keepAtLeastOne
 * @param enableTablePreferences
 * @param aSecurityGroup
 * @param enableUserSelection
 */
public GroupController(UserRequest ureq,WindowControl wControl,boolean mayModifyMembers,boolean keepAtLeastOne,boolean enableTablePreferences,boolean enableUserSelection,boolean allowDownload,boolean mandatoryEmail,Group group,String role){
  super(ureq,wControl);
  securityManager=BaseSecurityManager.getInstance();
  imModule=CoreSpringFactory.getImpl(InstantMessagingModule.class);
  imService=CoreSpringFactory.getImpl(InstantMessagingService.class);
  userManager=CoreSpringFactory.getImpl(UserManager.class);
  sessionManager=CoreSpringFactory.getImpl(UserSessionManager.class);
  mailManager=CoreSpringFactory.getImpl(MailManager.class);
  groupDao=CoreSpringFactory.getImpl(GroupDAO.class);
  init(ureq,mayModifyMembers,keepAtLeastOne,enableTablePreferences,enableUserSelection,allowDownload,mandatoryEmail,group,role);
}"
69684,"public void deleteEntry(Identity identity,OLATResourceable ores){
  dbInstance.getCurrentEntityManager().createNamedQuery(""String_Node_Str"").setParameter(""String_Node_Str"",identity.getKey()).setParameter(""String_Node_Str"",ores.getResourceableId()).setParameter(""String_Node_Str"",ores.getResourceableTypeName()).executeUpdate();
}","public void deleteEntry(Identity identity,OLATResourceable ores){
  String del=""String_Node_Str"";
  dbInstance.getCurrentEntityManager().createQuery(del).setParameter(""String_Node_Str"",identity.getKey()).setParameter(""String_Node_Str"",ores.getResourceableId()).setParameter(""String_Node_Str"",ores.getResourceableTypeName()).executeUpdate();
}"
69685,"@Override public PrevNextFinishConfig getInitialPrevNextFinishConfig(){
  return new PrevNextFinishConfig(hasPreviousStep,true,false);
}","@Override public PrevNextFinishConfig getInitialPrevNextFinishConfig(){
  return new PrevNextFinishConfig(!hasPreviousStep,true,false);
}"
69686,"/** 
 * This constructor start the edit the bulk update.
 * @param ureq
 * @param courseNode
 * @param datas
 */
public BulkAssessment_2_DatasStep(UserRequest ureq,AssessableCourseNode courseNode,BulkAssessmentDatas datas,Task task){
  super(ureq);
  this.task=task;
  this.datas=datas;
  this.courseNode=courseNode;
  setI18nTitleAndDescr(""String_Node_Str"",""String_Node_Str"");
  setNextStep(new BulkAssessment_3_ValidationStep(ureq));
  hasPreviousStep=false;
}","/** 
 * This constructor start the edit the bulk update.
 * @param ureq
 * @param courseNode
 * @param datas
 */
public BulkAssessment_2_DatasStep(UserRequest ureq,AssessableCourseNode courseNode,BulkAssessmentDatas datas,Task task){
  super(ureq);
  this.task=task;
  this.datas=datas;
  this.courseNode=courseNode;
  setI18nTitleAndDescr(""String_Node_Str"",""String_Node_Str"");
  setNextStep(new BulkAssessment_3_ValidationStep(ureq));
  hasPreviousStep=(courseNode == null ? false : true);
}"
69687,"@After public void tearDown() throws Exception {
  try {
    JMSCodePointServerJunitHelper.stopServer();
    DBFactory.getInstance().closeSession();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","@After public void tearDown() throws Exception {
  try {
    JMSCodePointServerJunitHelper.stopServer();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}"
69688,"public void tearDown() throws Exception {
  CourseFactory.deleteCourse(course);
  try {
    DBFactory.getInstance().closeSession();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","public void tearDown() throws Exception {
  CourseFactory.deleteCourse(course);
}"
69689,"protected void appendConfigToTinyJSArray_4(StringOutput out){
  Map<String,String> copyValues=new HashMap<String,String>(quotedConfigValues);
  Map<String,String> copyNonValues=new HashMap<String,String>(nonQuotedConfigValues);
  String converter=copyNonValues.remove(URLCONVERTER_CALLBACK);
  if (converter != null) {
    copyNonValues.put(""String_Node_Str"",converter);
  }
  String contentCss=copyValues.remove(""String_Node_Str"");
  if (contentCss != null) {
    copyNonValues.put(""String_Node_Str"",""String_Node_Str"");
    copyValues.put(""String_Node_Str"",Settings.createServerURI() + contentCss);
  }
  StringOutput tinyMenuSb=new StringOutput();
  tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getPlugins()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(tinyConfig.hasMenu()).append(""String_Node_Str"");
  if (tinyConfig.getTool1() != null) {
    tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getTool1()).append(""String_Node_Str"");
  }
  if (tinyConfig.hasMenu()) {
    tinyMenuSb.append(""String_Node_Str"");
    boolean first=true;
    for (    String menuItem : tinyConfig.getMenu()) {
      if (!first)       tinyMenuSb.append(""String_Node_Str"");
      if (first)       first=false;
      tinyMenuSb.append(menuItem);
    }
    tinyMenuSb.append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyValues.entrySet()) {
    tinyMenuSb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyNonValues.entrySet()) {
    tinyMenuSb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  System.out.println(tinyMenuSb);
  out.append(tinyMenuSb);
}","protected void appendConfigToTinyJSArray_4(StringOutput out){
  Map<String,String> copyValues=new HashMap<String,String>(quotedConfigValues);
  Map<String,String> copyNonValues=new HashMap<String,String>(nonQuotedConfigValues);
  String converter=copyNonValues.remove(URLCONVERTER_CALLBACK);
  if (converter != null) {
    copyNonValues.put(""String_Node_Str"",converter);
  }
  String contentCss=copyValues.remove(""String_Node_Str"");
  if (contentCss != null) {
    copyNonValues.put(""String_Node_Str"",""String_Node_Str"");
    copyValues.put(""String_Node_Str"",Settings.createServerURI() + contentCss);
  }
  StringOutput tinyMenuSb=new StringOutput();
  tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getPlugins()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(tinyConfig.hasMenu()).append(""String_Node_Str"");
  if (tinyConfig.getTool1() != null) {
    tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getTool1()).append(""String_Node_Str"");
  }
  if (tinyConfig.hasMenu()) {
    tinyMenuSb.append(""String_Node_Str"");
    boolean first=true;
    for (    String menuItem : tinyConfig.getMenu()) {
      if (!first)       tinyMenuSb.append(""String_Node_Str"");
      if (first)       first=false;
      tinyMenuSb.append(menuItem);
    }
    tinyMenuSb.append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyValues.entrySet()) {
    tinyMenuSb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyNonValues.entrySet()) {
    tinyMenuSb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  out.append(tinyMenuSb);
}"
69690,"public String getHighlightTitle(){
  if (StringHelper.containsNonWhitespace(highlightTitle)) {
    return highlightTitle;
  }
  return getTitle();
}","public String getHighlightTitle(){
  return highlightTitle;
}"
69691,"/** 
 * Highlight (bold,color) query words in result-document. Set HighlightResult for content or description. 
 * @param query
 * @param analyzer
 * @param doc
 * @param resultDocument
 * @throws IOException
 */
private void doHighlight(Query query,Analyzer analyzer,Document doc,ResultDocument resultDocument) throws IOException {
  Highlighter highlighter=new Highlighter(new SimpleHTMLFormatter(HIGHLIGHT_PRE_TAG,HIGHLIGHT_POST_TAG),new SimpleHTMLEncoder(),new QueryScorer(query));
  try {
    String content=doc.get(AbstractOlatDocument.CONTENT_FIELD_NAME);
    TokenStream tokenStream=analyzer.tokenStream(AbstractOlatDocument.CONTENT_FIELD_NAME,new StringReader(content));
    String highlightResult=highlighter.getBestFragments(tokenStream,content,3,HIGHLIGHT_SEPARATOR);
    if (highlightResult.length() == 0) {
      String description=doc.get(AbstractOlatDocument.DESCRIPTION_FIELD_NAME);
      tokenStream=analyzer.tokenStream(AbstractOlatDocument.DESCRIPTION_FIELD_NAME,new StringReader(description));
      highlightResult=highlighter.getBestFragments(tokenStream,description,3,HIGHLIGHT_SEPARATOR);
      resultDocument.setHighlightingDescription(true);
    }
    resultDocument.setHighlightResult(highlightResult);
    String title=doc.get(AbstractOlatDocument.TITLE_FIELD_NAME);
    tokenStream=analyzer.tokenStream(AbstractOlatDocument.TITLE_FIELD_NAME,new StringReader(title));
    String highlightTitle=highlighter.getBestFragments(tokenStream,title,3,""String_Node_Str"");
    resultDocument.setHighlightTitle(highlightTitle);
  }
 catch (  InvalidTokenOffsetsException e) {
    log.warn(""String_Node_Str"",e);
  }
}","/** 
 * Highlight (bold,color) query words in result-document. Set HighlightResult for content or description. 
 * @param query
 * @param analyzer
 * @param doc
 * @param resultDocument
 * @throws IOException
 */
private void doHighlight(Query query,Analyzer analyzer,Document doc,ResultDocument resultDocument) throws IOException {
  Highlighter highlighter=new Highlighter(new SimpleHTMLFormatter(HIGHLIGHT_PRE_TAG,HIGHLIGHT_POST_TAG),new SimpleHTMLEncoder(),new QueryScorer(query));
  try {
    String content=doc.get(AbstractOlatDocument.CONTENT_FIELD_NAME);
    TokenStream tokenStream=analyzer.tokenStream(AbstractOlatDocument.CONTENT_FIELD_NAME,new StringReader(content));
    String highlightResult=highlighter.getBestFragments(tokenStream,content,3,HIGHLIGHT_SEPARATOR);
    if (highlightResult.length() == 0) {
      String description=doc.get(AbstractOlatDocument.DESCRIPTION_FIELD_NAME);
      tokenStream=analyzer.tokenStream(AbstractOlatDocument.DESCRIPTION_FIELD_NAME,new StringReader(description));
      highlightResult=highlighter.getBestFragments(tokenStream,description,3,HIGHLIGHT_SEPARATOR);
      resultDocument.setHighlightingDescription(true);
    }
    resultDocument.setHighlightResult(highlightResult);
    String title=doc.get(AbstractOlatDocument.TITLE_FIELD_NAME);
    title=title.trim();
    if (title.length() > 128) {
      title=FilterFactory.getHtmlTagsFilter().filter(title);
      title=Formatter.truncate(title,128);
    }
    tokenStream=analyzer.tokenStream(AbstractOlatDocument.TITLE_FIELD_NAME,new StringReader(title));
    String highlightTitle=highlighter.getBestFragments(tokenStream,title,3,""String_Node_Str"");
    resultDocument.setHighlightTitle(highlightTitle);
  }
 catch (  InvalidTokenOffsetsException e) {
    log.warn(""String_Node_Str"",e);
  }
}"
69692,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer formLayoutCont=(FormLayoutContainer)formLayout;
    formLayoutCont.contextPut(""String_Node_Str"",document);
    formLayoutCont.contextPut(""String_Node_Str"",hashCode());
    formLayoutCont.contextPut(""String_Node_Str"",Formatter.getInstance(getLocale()));
    String author=document.getAuthor();
    if (StringHelper.containsNonWhitespace(author)) {
      List<IdentityShort> identities=BaseSecurityManager.getInstance().findShortIdentitiesByName(Collections.singleton(author));
      if (identities.size() > 0) {
        author=UserManager.getInstance().getUserDisplayName(identities.get(0));
      }
    }
    formLayoutCont.contextPut(""String_Node_Str"",author);
  }
  String highlightLabel=document.getHighlightTitle();
  docHighlightLink=uifactory.addFormLink(""String_Node_Str"",highlightLabel,highlightLabel,formLayout,Link.NONTRANSLATED);
  String icon=document.getCssIcon();
  if (!StringHelper.containsNonWhitespace(icon)) {
    icon=""String_Node_Str"";
  }
  String cssClass=""String_Node_Str"" + icon;
  ((Link)docHighlightLink.getComponent()).setCustomEnabledLinkCSS(cssClass);
  ((Link)docHighlightLink.getComponent()).setCustomDisabledLinkCSS(cssClass);
  String label=document.getTitle();
  docLink=uifactory.addFormLink(""String_Node_Str"",label,label,formLayout,Link.NONTRANSLATED);
  ((Link)docLink.getComponent()).setCustomEnabledLinkCSS(cssClass);
  ((Link)docLink.getComponent()).setCustomDisabledLinkCSS(cssClass);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer formLayoutCont=(FormLayoutContainer)formLayout;
    formLayoutCont.contextPut(""String_Node_Str"",document);
    formLayoutCont.contextPut(""String_Node_Str"",hashCode());
    formLayoutCont.contextPut(""String_Node_Str"",Formatter.getInstance(getLocale()));
    String author=document.getAuthor();
    if (StringHelper.containsNonWhitespace(author)) {
      List<IdentityShort> identities=BaseSecurityManager.getInstance().findShortIdentitiesByName(Collections.singleton(author));
      if (identities.size() > 0) {
        author=UserManager.getInstance().getUserDisplayName(identities.get(0));
      }
    }
    formLayoutCont.contextPut(""String_Node_Str"",author);
  }
  String icon=document.getCssIcon();
  if (!StringHelper.containsNonWhitespace(icon)) {
    icon=""String_Node_Str"";
  }
  String cssClass=(""String_Node_Str"" + icon).intern();
  String label=document.getTitle();
  if (label != null) {
    label=label.trim();
  }
  if (label.length() > 128) {
    label=FilterFactory.getHtmlTagsFilter().filter(label);
    label=Formatter.truncate(label,128);
  }
  label=StringHelper.escapeHtml(label);
  docLink=uifactory.addFormLink(""String_Node_Str"",label,label,formLayout,Link.NONTRANSLATED);
  ((Link)docLink.getComponent()).setCustomEnabledLinkCSS(cssClass);
  ((Link)docLink.getComponent()).setCustomDisabledLinkCSS(cssClass);
  String highlightLabel=document.getHighlightTitle();
  if (!StringHelper.containsNonWhitespace(highlightLabel)) {
    highlightLabel=label;
  }
  docHighlightLink=uifactory.addFormLink(""String_Node_Str"",highlightLabel,highlightLabel,formLayout,Link.NONTRANSLATED);
  ((Link)docHighlightLink.getComponent()).setCustomEnabledLinkCSS(cssClass);
  ((Link)docHighlightLink.getComponent()).setCustomDisabledLinkCSS(cssClass);
}"
69693,"protected void appendConfigToTinyJSArray_4(StringOutput out){
  Set<String> plugins4=new HashSet<String>(plugins);
  plugins4.remove(""String_Node_Str"");
  plugins4.remove(""String_Node_Str"");
  plugins4.remove(""String_Node_Str"");
  plugins4.remove(""String_Node_Str"");
  plugins4.remove(""String_Node_Str"");
  if (plugins4.contains(""String_Node_Str"")) {
    plugins4.remove(""String_Node_Str"");
    plugins4.add(""String_Node_Str"");
  }
  if (plugins4.remove(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  if (plugins4.remove(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  if (plugins4.remove(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  if (plugins4.remove(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  if (plugins4.remove(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  plugins4.add(""String_Node_Str"");
  plugins4.add(""String_Node_Str"");
  plugins4.add(""String_Node_Str"");
  if (theme_advanced_buttons3.contains(CODE_BUTTON) || quotedConfigValues.containsKey(THEME_ADVANCED_BUTTONS3_ADD)) {
    plugins4.add(""String_Node_Str"");
  }
  if (quotedConfigValues.containsKey(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  if (theme_advanced_buttons1.contains(""String_Node_Str"") || theme_advanced_buttons1.contains(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  plugins4.add(""String_Node_Str"");
  List<String> buttons1=new ArrayList<String>(theme_advanced_buttons1);
  if (buttons1.contains(""String_Node_Str""))   buttons1.set(buttons1.indexOf(""String_Node_Str""),""String_Node_Str"");
  if (buttons1.contains(""String_Node_Str""))   buttons1.set(buttons1.indexOf(""String_Node_Str""),""String_Node_Str"");
  if (buttons1.contains(""String_Node_Str""))   buttons1.set(buttons1.indexOf(""String_Node_Str""),""String_Node_Str"");
  if (buttons1.contains(""String_Node_Str""))   buttons1.set(buttons1.indexOf(""String_Node_Str""),""String_Node_Str"");
  if (buttons1.contains(JUSTIFY_BUTTONGROUP)) {
    int index=buttons1.indexOf(JUSTIFY_BUTTONGROUP);
    buttons1.remove(index);
    buttons1.add(index,""String_Node_Str"");
    buttons1.add(index,""String_Node_Str"");
    buttons1.add(index,""String_Node_Str"");
    buttons1.add(index,""String_Node_Str"");
  }
  List<String> buttons2=new ArrayList<String>(theme_advanced_buttons2);
  if (buttons2.contains(PASTE_PLUGIN_BUTTONGROUP)) {
    buttons2.set(buttons2.indexOf(PASTE_PLUGIN_BUTTONGROUP),""String_Node_Str"");
  }
  List<String> buttons3=new ArrayList<String>(theme_advanced_buttons3);
  if (buttons3.contains(""String_Node_Str"")) {
    buttons3.set(buttons3.indexOf(""String_Node_Str""),""String_Node_Str"");
  }
  buttons3.remove(""String_Node_Str"");
  buttons3.remove(""String_Node_Str"");
  if (quotedConfigValues.containsKey(THEME_ADVANCED_BUTTONS3_ADD) && quotedConfigValues.get(THEME_ADVANCED_BUTTONS3_ADD).contains(""String_Node_Str"")) {
    buttons3.add(""String_Node_Str"");
  }
  Map<String,String> copyValues=new HashMap<String,String>(quotedConfigValues);
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  String tabfocus=copyValues.remove(""String_Node_Str"");
  if (tabfocus != null) {
    copyValues.put(""String_Node_Str"",tabfocus);
  }
  Map<String,String> copyNonValues=new HashMap<String,String>(nonQuotedConfigValues);
  copyNonValues.remove(""String_Node_Str"");
  copyNonValues.remove(""String_Node_Str"");
  String converter=copyNonValues.remove(URLCONVERTER_CALLBACK);
  if (converter != null) {
    copyNonValues.put(""String_Node_Str"",converter);
  }
  String dateFormat=copyValues.remove(INSERTDATETIME_DATEFORMAT);
  if (dateFormat != null) {
    copyValues.put(""String_Node_Str"",dateFormat);
    copyNonValues.put(""String_Node_Str"",""String_Node_Str"" + dateFormat + ""String_Node_Str"");
  }
  String contentCss=copyValues.remove(""String_Node_Str"");
  if (contentCss != null) {
    copyNonValues.put(""String_Node_Str"",""String_Node_Str"");
    copyValues.put(""String_Node_Str"",Settings.createServerURI() + contentCss);
  }
  StringOutput sb=new StringOutput();
  appendValuesFromList(sb,PLUGINS,plugins4);
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (buttons1.size() == 0) {
    sb.append(""String_Node_Str"").append(""String_Node_Str"");
  }
 else {
    listToString(sb,""String_Node_Str"",buttons1);
    sb.append(""String_Node_Str"");
  }
  if (buttons2.size() == 0) {
    sb.append(""String_Node_Str"").append(""String_Node_Str"");
  }
 else {
    listToString(sb,""String_Node_Str"",buttons2);
    sb.append(""String_Node_Str"");
  }
  if (buttons3.size() == 0) {
    sb.append(""String_Node_Str"").append(""String_Node_Str"");
  }
 else {
    listToString(sb,""String_Node_Str"",buttons3);
    sb.append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyValues.entrySet()) {
    sb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyNonValues.entrySet()) {
    sb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  StringOutput tinyMenuSb=new StringOutput();
  tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getPlugins()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(tinyConfig.hasMenu()).append(""String_Node_Str"");
  if (tinyConfig.getTool1() != null) {
    tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getTool1()).append(""String_Node_Str"");
    if (tinyConfig.getTool2() != null) {
      tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getTool2()).append(""String_Node_Str"");
    }
  }
  if (tinyConfig.hasMenu()) {
    tinyMenuSb.append(""String_Node_Str"");
    boolean first=true;
    for (    String menuItem : tinyConfig.getMenu()) {
      if (!first)       tinyMenuSb.append(""String_Node_Str"");
      if (first)       first=false;
      tinyMenuSb.append(menuItem);
    }
    tinyMenuSb.append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyValues.entrySet()) {
    tinyMenuSb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyNonValues.entrySet()) {
    tinyMenuSb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  out.append(tinyMenuSb);
}","protected void appendConfigToTinyJSArray_4(StringOutput out){
  Set<String> plugins4=new HashSet<String>(plugins);
  plugins4.remove(""String_Node_Str"");
  plugins4.remove(""String_Node_Str"");
  plugins4.remove(""String_Node_Str"");
  plugins4.remove(""String_Node_Str"");
  plugins4.remove(""String_Node_Str"");
  if (plugins4.contains(""String_Node_Str"")) {
    plugins4.remove(""String_Node_Str"");
    plugins4.add(""String_Node_Str"");
  }
  if (plugins4.remove(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  if (plugins4.remove(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  if (plugins4.remove(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  if (plugins4.remove(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  if (plugins4.remove(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  plugins4.add(""String_Node_Str"");
  plugins4.add(""String_Node_Str"");
  plugins4.add(""String_Node_Str"");
  if (theme_advanced_buttons3.contains(CODE_BUTTON) || quotedConfigValues.containsKey(THEME_ADVANCED_BUTTONS3_ADD)) {
    plugins4.add(""String_Node_Str"");
  }
  if (quotedConfigValues.containsKey(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  if (theme_advanced_buttons1.contains(""String_Node_Str"") || theme_advanced_buttons1.contains(""String_Node_Str"")) {
    plugins4.add(""String_Node_Str"");
  }
  plugins4.add(""String_Node_Str"");
  List<String> buttons1=new ArrayList<String>(theme_advanced_buttons1);
  if (buttons1.contains(""String_Node_Str""))   buttons1.set(buttons1.indexOf(""String_Node_Str""),""String_Node_Str"");
  if (buttons1.contains(""String_Node_Str""))   buttons1.set(buttons1.indexOf(""String_Node_Str""),""String_Node_Str"");
  if (buttons1.contains(""String_Node_Str""))   buttons1.set(buttons1.indexOf(""String_Node_Str""),""String_Node_Str"");
  if (buttons1.contains(""String_Node_Str""))   buttons1.set(buttons1.indexOf(""String_Node_Str""),""String_Node_Str"");
  if (buttons1.contains(JUSTIFY_BUTTONGROUP)) {
    int index=buttons1.indexOf(JUSTIFY_BUTTONGROUP);
    buttons1.remove(index);
    buttons1.add(index,""String_Node_Str"");
    buttons1.add(index,""String_Node_Str"");
    buttons1.add(index,""String_Node_Str"");
    buttons1.add(index,""String_Node_Str"");
  }
  List<String> buttons2=new ArrayList<String>(theme_advanced_buttons2);
  if (buttons2.contains(PASTE_PLUGIN_BUTTONGROUP)) {
    buttons2.set(buttons2.indexOf(PASTE_PLUGIN_BUTTONGROUP),""String_Node_Str"");
  }
  List<String> buttons3=new ArrayList<String>(theme_advanced_buttons3);
  if (buttons3.contains(""String_Node_Str"")) {
    buttons3.set(buttons3.indexOf(""String_Node_Str""),""String_Node_Str"");
  }
  buttons3.remove(""String_Node_Str"");
  buttons3.remove(""String_Node_Str"");
  if (quotedConfigValues.containsKey(THEME_ADVANCED_BUTTONS3_ADD) && quotedConfigValues.get(THEME_ADVANCED_BUTTONS3_ADD).contains(""String_Node_Str"")) {
    buttons3.add(""String_Node_Str"");
  }
  Map<String,String> copyValues=new HashMap<String,String>(quotedConfigValues);
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  copyValues.remove(""String_Node_Str"");
  String tabfocus=copyValues.remove(""String_Node_Str"");
  if (tabfocus != null) {
    copyValues.put(""String_Node_Str"",tabfocus);
  }
  Map<String,String> copyNonValues=new HashMap<String,String>(nonQuotedConfigValues);
  copyNonValues.remove(""String_Node_Str"");
  copyNonValues.remove(""String_Node_Str"");
  String converter=copyNonValues.remove(URLCONVERTER_CALLBACK);
  if (converter != null) {
    copyNonValues.put(""String_Node_Str"",converter);
  }
  String dateFormat=copyValues.remove(INSERTDATETIME_DATEFORMAT);
  if (dateFormat != null) {
    copyValues.put(""String_Node_Str"",dateFormat);
    copyNonValues.put(""String_Node_Str"",""String_Node_Str"" + dateFormat + ""String_Node_Str"");
  }
  String contentCss=copyValues.remove(""String_Node_Str"");
  if (contentCss != null) {
    copyNonValues.put(""String_Node_Str"",""String_Node_Str"");
    copyValues.put(""String_Node_Str"",Settings.createServerURI() + contentCss);
  }
  StringOutput tinyMenuSb=new StringOutput();
  tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getPlugins()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(tinyConfig.hasMenu()).append(""String_Node_Str"");
  if (tinyConfig.getTool1() != null) {
    tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getTool1()).append(""String_Node_Str"");
    if (tinyConfig.getTool2() != null) {
      tinyMenuSb.append(""String_Node_Str"").append(tinyConfig.getTool2()).append(""String_Node_Str"");
    }
  }
  if (tinyConfig.hasMenu()) {
    tinyMenuSb.append(""String_Node_Str"");
    boolean first=true;
    for (    String menuItem : tinyConfig.getMenu()) {
      if (!first)       tinyMenuSb.append(""String_Node_Str"");
      if (first)       first=false;
      tinyMenuSb.append(menuItem);
    }
    tinyMenuSb.append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyValues.entrySet()) {
    tinyMenuSb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  for (  Map.Entry<String,String> entry : copyNonValues.entrySet()) {
    tinyMenuSb.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  out.append(tinyMenuSb);
}"
69694,"/** 
 * Get an HTML summary of existing references or null if no references exist.
 * @param target
 * @param locale
 * @return HTML fragment or null if no references exist.
 */
public String getReferencesToSummary(OLATResourceable target,Locale locale){
  Translator translator=Util.createPackageTranslator(this.getClass(),locale);
  StringBuilder result=new StringBuilder(100);
  List<ReferenceImpl> refs=getReferencesTo(target);
  if (refs.size() == 0)   return null;
  for (  ReferenceImpl ref : refs) {
    OLATResourceImpl source=ref.getSource();
    if (source.getResourceableTypeName().equals(CourseModule.getCourseTypeName())) {
      try {
        ICourse course=CourseFactory.loadCourse(source);
        result.append(translator.translate(""String_Node_Str"",new String[]{course.getCourseTitle()}));
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
        result.append(translator.translate(""String_Node_Str"",new String[]{""String_Node_Str"" + source.getKey().toString() + ""String_Node_Str""}));
      }
    }
 else {
      result.append(translator.translate(""String_Node_Str"",new String[]{source.getKey().toString()}));
    }
    result.append(""String_Node_Str"");
  }
  return result.toString();
}","/** 
 * Get an HTML summary of existing references or null if no references exist.
 * @param target
 * @param locale
 * @return HTML fragment or null if no references exist.
 */
public String getReferencesToSummary(OLATResourceable target,Locale locale){
  Translator translator=Util.createPackageTranslator(this.getClass(),locale);
  StringBuilder result=new StringBuilder(100);
  List<ReferenceImpl> refs=getReferencesTo(target);
  if (refs.size() == 0)   return null;
  for (  ReferenceImpl ref : refs) {
    OLATResourceImpl source=ref.getSource();
    if (source.getResourceableTypeName().equals(CourseModule.getCourseTypeName())) {
      try {
        ICourse course=CourseFactory.loadCourse(source);
        result.append(translator.translate(""String_Node_Str"",new String[]{StringHelper.escapeHtml(course.getCourseTitle())}));
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
        result.append(translator.translate(""String_Node_Str"",new String[]{""String_Node_Str"" + source.getKey().toString() + ""String_Node_Str""}));
      }
    }
 else {
      result.append(translator.translate(""String_Node_Str"",new String[]{source.getKey().toString()}));
    }
    result.append(""String_Node_Str"");
  }
  return result.toString();
}"
69695,"@Test public void testDeletePersonalCalendarEvents() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(id2.getName(),""String_Node_Str""));
  CalendarManager calendarManager=CalendarManagerFactory.getInstance().getCalendarManager();
  KalendarRenderWrapper calendarWrapper=calendarManager.getPersonalCalendar(id2);
  KalendarEvent kalEvent=new KalendarEvent(UUID.randomUUID().toString(),""String_Node_Str"",new Date(),new Date());
  calendarManager.addEventTo(calendarWrapper.getKalendar(),kalEvent);
  URI eventUri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(id2.getKey().toString()).path(""String_Node_Str"").path(""String_Node_Str"" + calendarWrapper.getKalendar().getCalendarID()).path(""String_Node_Str"").path(kalEvent.getID()).build();
  HttpDelete delEventMethod=conn.createDelete(eventUri,MediaType.APPLICATION_JSON,true);
  HttpResponse delEventResponse=conn.execute(delEventMethod);
  assertEquals(200,delEventResponse.getStatusLine().getStatusCode());
  EntityUtils.consume(delEventResponse.getEntity());
  conn.shutdown();
  Collection<KalendarEvent> savedEvents=calendarWrapper.getKalendar().getEvents();
  for (  KalendarEvent savedEvent : savedEvents) {
    Assert.assertFalse(savedEvent.getID().equals(kalEvent.getID()));
  }
}","@Test public void testDeletePersonalCalendarEvents() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(id2.getName(),""String_Node_Str""));
  CalendarManager calendarManager=CalendarManagerFactory.getInstance().getCalendarManager();
  KalendarRenderWrapper calendarWrapper=calendarManager.getPersonalCalendar(id2);
  KalendarEvent kalEvent=new KalendarEvent(UUID.randomUUID().toString(),""String_Node_Str"",new Date(),new Date());
  calendarManager.addEventTo(calendarWrapper.getKalendar(),kalEvent);
  URI eventUri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(id2.getKey().toString()).path(""String_Node_Str"").path(""String_Node_Str"" + calendarWrapper.getKalendar().getCalendarID()).path(""String_Node_Str"").path(kalEvent.getID()).build();
  HttpDelete delEventMethod=conn.createDelete(eventUri,MediaType.APPLICATION_JSON);
  HttpResponse delEventResponse=conn.execute(delEventMethod);
  assertEquals(200,delEventResponse.getStatusLine().getStatusCode());
  EntityUtils.consume(delEventResponse.getEntity());
  conn.shutdown();
  Collection<KalendarEvent> savedEvents=calendarWrapper.getKalendar().getEvents();
  for (  KalendarEvent savedEvent : savedEvents) {
    Assert.assertFalse(savedEvent.getID().equals(kalEvent.getID()));
  }
}"
69696,"@Test public void testPostCalendarEvents() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(id2.getName(),""String_Node_Str""));
  URI calUri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(id2.getKey().toString()).path(""String_Node_Str"").build();
  HttpGet calMethod=conn.createGet(calUri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(calMethod);
  assertEquals(200,response.getStatusLine().getStatusCode());
  List<CalendarVO> vos=parseArray(response);
  assertTrue(vos != null && !vos.isEmpty());
  CalendarVO calendar=getCourseCalendar(vos,course2);
  Assert.assertNotNull(calendar);
  EventVO event=new EventVO();
  Calendar cal=Calendar.getInstance();
  event.setBegin(cal.getTime());
  cal.add(Calendar.HOUR_OF_DAY,1);
  event.setEnd(cal.getTime());
  String subject=UUID.randomUUID().toString();
  event.setSubject(subject);
  URI eventUri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(id2.getKey().toString()).path(""String_Node_Str"").path(calendar.getId()).path(""String_Node_Str"").build();
  HttpPost postEventMethod=conn.createPost(eventUri,MediaType.APPLICATION_JSON,true);
  conn.addJsonEntity(postEventMethod,event);
  HttpResponse postEventResponse=conn.execute(postEventMethod);
  assertEquals(200,postEventResponse.getStatusLine().getStatusCode());
  EventVO newEvent=conn.parse(postEventResponse,EventVO.class);
  Assert.assertNotNull(newEvent);
  CalendarManager calendarManager=CalendarManagerFactory.getInstance().getCalendarManager();
  KalendarRenderWrapper calendarWrapper=calendarManager.getCourseCalendar(course2);
  Collection<KalendarEvent> savedEvents=calendarWrapper.getKalendar().getEvents();
  boolean found=false;
  for (  KalendarEvent savedEvent : savedEvents) {
    if (subject.equals(savedEvent.getSubject())) {
      found=true;
    }
  }
  Assert.assertTrue(found);
  conn.shutdown();
}","@Test public void testPostCalendarEvents() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(id2.getName(),""String_Node_Str""));
  URI calUri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(id2.getKey().toString()).path(""String_Node_Str"").build();
  HttpGet calMethod=conn.createGet(calUri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(calMethod);
  assertEquals(200,response.getStatusLine().getStatusCode());
  List<CalendarVO> vos=parseArray(response);
  assertTrue(vos != null && !vos.isEmpty());
  CalendarVO calendar=getCourseCalendar(vos,course2);
  Assert.assertNotNull(calendar);
  EventVO event=new EventVO();
  Calendar cal=Calendar.getInstance();
  event.setBegin(cal.getTime());
  cal.add(Calendar.HOUR_OF_DAY,1);
  event.setEnd(cal.getTime());
  String subject=UUID.randomUUID().toString();
  event.setSubject(subject);
  URI eventUri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(id2.getKey().toString()).path(""String_Node_Str"").path(calendar.getId()).path(""String_Node_Str"").build();
  HttpPost postEventMethod=conn.createPost(eventUri,MediaType.APPLICATION_JSON);
  conn.addJsonEntity(postEventMethod,event);
  HttpResponse postEventResponse=conn.execute(postEventMethod);
  assertEquals(200,postEventResponse.getStatusLine().getStatusCode());
  EventVO newEvent=conn.parse(postEventResponse,EventVO.class);
  Assert.assertNotNull(newEvent);
  CalendarManager calendarManager=CalendarManagerFactory.getInstance().getCalendarManager();
  KalendarRenderWrapper calendarWrapper=calendarManager.getCourseCalendar(course2);
  Collection<KalendarEvent> savedEvents=calendarWrapper.getKalendar().getEvents();
  boolean found=false;
  for (  KalendarEvent savedEvent : savedEvents) {
    if (subject.equals(savedEvent.getSubject())) {
      found=true;
    }
  }
  Assert.assertTrue(found);
  conn.shutdown();
}"
69697,"@Test public void testDeleteCatalogEntry() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entry2.getKey().toString()).build();
  HttpDelete method=conn.createDelete(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogManager catalogManager=CatalogManager.getInstance();
  List<CatalogEntry> entries=catalogManager.getChildrenOf(root1);
  for (  CatalogEntry entry : entries) {
    assertFalse(entry.getKey().equals(entry2.getKey()));
  }
  conn.shutdown();
}","@Test public void testDeleteCatalogEntry() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entry2.getKey().toString()).build();
  HttpDelete method=conn.createDelete(uri,MediaType.APPLICATION_JSON);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogManager catalogManager=CatalogManager.getInstance();
  List<CatalogEntry> entries=catalogManager.getChildrenOf(root1);
  for (  CatalogEntry entry : entries) {
    assertFalse(entry.getKey().equals(entry2.getKey()));
  }
  conn.shutdown();
}"
69698,"@Test public void testRemoveOwner() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entry1.getKey().toString()).path(""String_Node_Str"").path(id1.getUser().getKey().toString()).build();
  HttpDelete method=conn.createDelete(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogManager catalogManager=CatalogManager.getInstance();
  CatalogEntry entry=catalogManager.loadCatalogEntry(entry1.getKey());
  List<Identity> identities=BaseSecurityManager.getInstance().getIdentitiesOfSecurityGroup(entry.getOwnerGroup());
  boolean found=false;
  for (  Identity identity : identities) {
    if (identity.getKey().equals(id1.getKey())) {
      found=true;
    }
  }
  assertFalse(found);
  conn.shutdown();
}","@Test public void testRemoveOwner() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entry1.getKey().toString()).path(""String_Node_Str"").path(id1.getUser().getKey().toString()).build();
  HttpDelete method=conn.createDelete(uri,MediaType.APPLICATION_JSON);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogManager catalogManager=CatalogManager.getInstance();
  CatalogEntry entry=catalogManager.loadCatalogEntry(entry1.getKey());
  List<Identity> identities=BaseSecurityManager.getInstance().getIdentitiesOfSecurityGroup(entry.getOwnerGroup());
  boolean found=false;
  for (  Identity identity : identities) {
    if (identity.getKey().equals(id1.getKey())) {
      found=true;
    }
  }
  assertFalse(found);
  conn.shutdown();
}"
69699,"@Test public void testMoveCatalogEntryForm() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entryToMove1.getKey().toString()).build();
  HttpPost method=conn.createPost(uri,MediaType.APPLICATION_JSON,true);
  conn.addEntity(method,new BasicNameValuePair(""String_Node_Str"",subEntry13move.getKey().toString()));
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogEntryVO vo=conn.parse(response,CatalogEntryVO.class);
  assertNotNull(vo);
  CatalogManager catalogManager=CatalogManager.getInstance();
  CatalogEntry updatedEntry=catalogManager.loadCatalogEntry(entryToMove1);
  assertEquals(""String_Node_Str"",updatedEntry.getName());
  assertEquals(""String_Node_Str"",updatedEntry.getDescription());
  assertNotNull(updatedEntry.getParent());
  assertTrue(updatedEntry.getParent().equalsByPersistableKey(subEntry13move));
  conn.shutdown();
}","@Test public void testMoveCatalogEntryForm() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entryToMove1.getKey().toString()).build();
  HttpPost method=conn.createPost(uri,MediaType.APPLICATION_JSON);
  conn.addEntity(method,new BasicNameValuePair(""String_Node_Str"",subEntry13move.getKey().toString()));
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogEntryVO vo=conn.parse(response,CatalogEntryVO.class);
  assertNotNull(vo);
  CatalogManager catalogManager=CatalogManager.getInstance();
  CatalogEntry updatedEntry=catalogManager.loadCatalogEntry(entryToMove1);
  assertEquals(""String_Node_Str"",updatedEntry.getName());
  assertEquals(""String_Node_Str"",updatedEntry.getDescription());
  assertNotNull(updatedEntry.getParent());
  assertTrue(updatedEntry.getParent().equalsByPersistableKey(subEntry13move));
  conn.shutdown();
}"
69700,"@Test public void testUpdateCatalogEntryJson() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  CatalogEntryVO entry=new CatalogEntryVO();
  entry.setName(""String_Node_Str"");
  entry.setDescription(""String_Node_Str"");
  entry.setType(CatalogEntry.TYPE_NODE);
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entry1.getKey().toString()).build();
  HttpPost method=conn.createPost(uri,MediaType.APPLICATION_JSON,true);
  method.addHeader(""String_Node_Str"",MediaType.APPLICATION_JSON);
  conn.addJsonEntity(method,entry);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogEntryVO vo=conn.parse(response,CatalogEntryVO.class);
  assertNotNull(vo);
  CatalogManager catalogManager=CatalogManager.getInstance();
  CatalogEntry updatedEntry=catalogManager.loadCatalogEntry(entry1);
  assertEquals(""String_Node_Str"",updatedEntry.getName());
  assertEquals(""String_Node_Str"",updatedEntry.getDescription());
  conn.shutdown();
}","@Test public void testUpdateCatalogEntryJson() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  CatalogEntryVO entry=new CatalogEntryVO();
  entry.setName(""String_Node_Str"");
  entry.setDescription(""String_Node_Str"");
  entry.setType(CatalogEntry.TYPE_NODE);
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entry1.getKey().toString()).build();
  HttpPost method=conn.createPost(uri,MediaType.APPLICATION_JSON);
  method.addHeader(""String_Node_Str"",MediaType.APPLICATION_JSON);
  conn.addJsonEntity(method,entry);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogEntryVO vo=conn.parse(response,CatalogEntryVO.class);
  assertNotNull(vo);
  CatalogManager catalogManager=CatalogManager.getInstance();
  CatalogEntry updatedEntry=catalogManager.loadCatalogEntry(entry1);
  assertEquals(""String_Node_Str"",updatedEntry.getName());
  assertEquals(""String_Node_Str"",updatedEntry.getDescription());
  conn.shutdown();
}"
69701,"@Test public void testUpdateAndMoveCatalogEntryJson() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  CatalogEntryVO entry=new CatalogEntryVO();
  entry.setName(""String_Node_Str"");
  entry.setDescription(""String_Node_Str"");
  entry.setType(CatalogEntry.TYPE_NODE);
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entryToMove2.getKey().toString()).queryParam(""String_Node_Str"",subEntry13move.getKey().toString()).build();
  HttpPost method=conn.createPost(uri,MediaType.APPLICATION_JSON,true);
  method.addHeader(""String_Node_Str"",MediaType.APPLICATION_JSON);
  conn.addJsonEntity(method,entry);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogEntryVO vo=conn.parse(response,CatalogEntryVO.class);
  assertNotNull(vo);
  CatalogManager catalogManager=CatalogManager.getInstance();
  CatalogEntry updatedEntry=catalogManager.loadCatalogEntry(entryToMove2);
  assertEquals(""String_Node_Str"",updatedEntry.getName());
  assertEquals(""String_Node_Str"",updatedEntry.getDescription());
  assertNotNull(updatedEntry.getParent());
  assertTrue(updatedEntry.getParent().equalsByPersistableKey(subEntry13move));
  conn.shutdown();
}","@Test public void testUpdateAndMoveCatalogEntryJson() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  CatalogEntryVO entry=new CatalogEntryVO();
  entry.setName(""String_Node_Str"");
  entry.setDescription(""String_Node_Str"");
  entry.setType(CatalogEntry.TYPE_NODE);
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entryToMove2.getKey().toString()).queryParam(""String_Node_Str"",subEntry13move.getKey().toString()).build();
  HttpPost method=conn.createPost(uri,MediaType.APPLICATION_JSON);
  method.addHeader(""String_Node_Str"",MediaType.APPLICATION_JSON);
  conn.addJsonEntity(method,entry);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogEntryVO vo=conn.parse(response,CatalogEntryVO.class);
  assertNotNull(vo);
  CatalogManager catalogManager=CatalogManager.getInstance();
  CatalogEntry updatedEntry=catalogManager.loadCatalogEntry(entryToMove2);
  assertEquals(""String_Node_Str"",updatedEntry.getName());
  assertEquals(""String_Node_Str"",updatedEntry.getDescription());
  assertNotNull(updatedEntry.getParent());
  assertTrue(updatedEntry.getParent().equalsByPersistableKey(subEntry13move));
  conn.shutdown();
}"
69702,"@Test public void testUpdateCatalogEntryQuery() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entry2.getKey().toString()).build();
  HttpPost method=conn.createPost(uri,MediaType.APPLICATION_JSON,true);
  conn.addEntity(method,new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",String.valueOf(CatalogEntry.TYPE_NODE)));
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogEntryVO vo=conn.parse(response,CatalogEntryVO.class);
  assertNotNull(vo);
  CatalogManager catalogManager=CatalogManager.getInstance();
  CatalogEntry updatedEntry=catalogManager.loadCatalogEntry(entry2);
  assertEquals(""String_Node_Str"",updatedEntry.getName());
  assertEquals(""String_Node_Str"",updatedEntry.getDescription());
  conn.shutdown();
}","@Test public void testUpdateCatalogEntryQuery() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entry2.getKey().toString()).build();
  HttpPost method=conn.createPost(uri,MediaType.APPLICATION_JSON);
  conn.addEntity(method,new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",String.valueOf(CatalogEntry.TYPE_NODE)));
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogEntryVO vo=conn.parse(response,CatalogEntryVO.class);
  assertNotNull(vo);
  CatalogManager catalogManager=CatalogManager.getInstance();
  CatalogEntry updatedEntry=catalogManager.loadCatalogEntry(entry2);
  assertEquals(""String_Node_Str"",updatedEntry.getName());
  assertEquals(""String_Node_Str"",updatedEntry.getDescription());
  conn.shutdown();
}"
69703,"@Test public void testUpdateCatalogEntryForm() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entry2.getKey().toString()).build();
  HttpPost method=conn.createPost(uri,MediaType.APPLICATION_JSON,true);
  conn.addEntity(method,new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",String.valueOf(CatalogEntry.TYPE_NODE)));
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogEntryVO vo=conn.parse(response,CatalogEntryVO.class);
  assertNotNull(vo);
  CatalogManager catalogManager=CatalogManager.getInstance();
  CatalogEntry updatedEntry=catalogManager.loadCatalogEntry(entry2);
  assertEquals(""String_Node_Str"",updatedEntry.getName());
  assertEquals(""String_Node_Str"",updatedEntry.getDescription());
  conn.shutdown();
}","@Test public void testUpdateCatalogEntryForm() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(entry2.getKey().toString()).build();
  HttpPost method=conn.createPost(uri,MediaType.APPLICATION_JSON);
  conn.addEntity(method,new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",String.valueOf(CatalogEntry.TYPE_NODE)));
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CatalogEntryVO vo=conn.parse(response,CatalogEntryVO.class);
  assertNotNull(vo);
  CatalogManager catalogManager=CatalogManager.getInstance();
  CatalogEntry updatedEntry=catalogManager.loadCatalogEntry(entry2);
  assertEquals(""String_Node_Str"",updatedEntry.getName());
  assertEquals(""String_Node_Str"",updatedEntry.getDescription());
  conn.shutdown();
}"
69704,"@Test public void testDeleteCalendarEvent() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(auth1.getName(),""String_Node_Str""));
  CalendarManager calendarManager=CalendarManagerFactory.getInstance().getCalendarManager();
  KalendarRenderWrapper calendarWrapper=calendarManager.getCourseCalendar(course1);
  Calendar cal=Calendar.getInstance();
  Date begin=cal.getTime();
  cal.add(Calendar.HOUR_OF_DAY,1);
  String id=UUID.randomUUID().toString();
  KalendarEvent kalEvent=new KalendarEvent(id,""String_Node_Str"" + UUID.randomUUID().toString(),begin,cal.getTime());
  calendarManager.addEventTo(calendarWrapper.getKalendar(),kalEvent);
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(""String_Node_Str"").path(course1.getResourceableId().toString()).path(""String_Node_Str"").path(""String_Node_Str"").build();
  HttpGet method=conn.createGet(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  List<EventVO> vos=parseEventArray(response.getEntity().getContent());
  assertNotNull(vos);
  boolean found=false;
  for (  EventVO vo : vos) {
    if (id.equals(vo.getId())) {
      found=true;
    }
  }
  assertTrue(found);
  URI eventUri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(""String_Node_Str"").path(course1.getResourceableId().toString()).path(""String_Node_Str"").path(""String_Node_Str"").path(kalEvent.getID()).build();
  HttpDelete delEventMethod=conn.createDelete(eventUri,MediaType.APPLICATION_JSON,true);
  HttpResponse delEventResponse=conn.execute(delEventMethod);
  assertEquals(200,delEventResponse.getStatusLine().getStatusCode());
  EntityUtils.consume(delEventResponse.getEntity());
  conn.shutdown();
  KalendarRenderWrapper reloadedCalendarWrapper=calendarManager.getCourseCalendar(course1);
  Collection<KalendarEvent> savedEvents=reloadedCalendarWrapper.getKalendar().getEvents();
  for (  KalendarEvent savedEvent : savedEvents) {
    Assert.assertFalse(savedEvent.getID().equals(kalEvent.getID()));
  }
}","@Test public void testDeleteCalendarEvent() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(auth1.getName(),""String_Node_Str""));
  CalendarManager calendarManager=CalendarManagerFactory.getInstance().getCalendarManager();
  KalendarRenderWrapper calendarWrapper=calendarManager.getCourseCalendar(course1);
  Calendar cal=Calendar.getInstance();
  Date begin=cal.getTime();
  cal.add(Calendar.HOUR_OF_DAY,1);
  String id=UUID.randomUUID().toString();
  KalendarEvent kalEvent=new KalendarEvent(id,""String_Node_Str"" + UUID.randomUUID().toString(),begin,cal.getTime());
  calendarManager.addEventTo(calendarWrapper.getKalendar(),kalEvent);
  URI uri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(""String_Node_Str"").path(course1.getResourceableId().toString()).path(""String_Node_Str"").path(""String_Node_Str"").build();
  HttpGet method=conn.createGet(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  List<EventVO> vos=parseEventArray(response.getEntity().getContent());
  assertNotNull(vos);
  boolean found=false;
  for (  EventVO vo : vos) {
    if (id.equals(vo.getId())) {
      found=true;
    }
  }
  assertTrue(found);
  URI eventUri=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").path(""String_Node_Str"").path(course1.getResourceableId().toString()).path(""String_Node_Str"").path(""String_Node_Str"").path(kalEvent.getID()).build();
  HttpDelete delEventMethod=conn.createDelete(eventUri,MediaType.APPLICATION_JSON);
  HttpResponse delEventResponse=conn.execute(delEventMethod);
  assertEquals(200,delEventResponse.getStatusLine().getStatusCode());
  EntityUtils.consume(delEventResponse.getEntity());
  conn.shutdown();
  KalendarRenderWrapper reloadedCalendarWrapper=calendarManager.getCourseCalendar(course1);
  Collection<KalendarEvent> savedEvents=reloadedCalendarWrapper.getKalendar().getEvents();
  for (  KalendarEvent savedEvent : savedEvents) {
    Assert.assertFalse(savedEvent.getID().equals(kalEvent.getID()));
  }
}"
69705,"@Test public void testUpdateCourseGroup() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  GroupVO vo=new GroupVO();
  vo.setKey(g1.getKey());
  vo.setName(""String_Node_Str"");
  vo.setDescription(""String_Node_Str"");
  vo.setMinParticipants(g1.getMinParticipants());
  vo.setMaxParticipants(g1.getMaxParticipants());
  vo.setType(g1.getType());
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getOlatResource().getResourceableId() + ""String_Node_Str""+ g1.getKey()).build();
  HttpPost method=conn.createPost(request,MediaType.APPLICATION_JSON,true);
  conn.addJsonEntity(method,vo);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertTrue(response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 201);
  BusinessGroup bg=businessGroupService.loadBusinessGroup(g1.getKey());
  assertNotNull(bg);
  assertEquals(bg.getKey(),vo.getKey());
  assertEquals(""String_Node_Str"",bg.getName());
  assertEquals(""String_Node_Str"",bg.getDescription());
}","@Test public void testUpdateCourseGroup() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  GroupVO vo=new GroupVO();
  vo.setKey(g1.getKey());
  vo.setName(""String_Node_Str"");
  vo.setDescription(""String_Node_Str"");
  vo.setMinParticipants(g1.getMinParticipants());
  vo.setMaxParticipants(g1.getMaxParticipants());
  vo.setType(g1.getType());
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getOlatResource().getResourceableId() + ""String_Node_Str""+ g1.getKey()).build();
  HttpPost method=conn.createPost(request,MediaType.APPLICATION_JSON);
  conn.addJsonEntity(method,vo);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertTrue(response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 201);
  BusinessGroup bg=businessGroupService.loadBusinessGroup(g1.getKey());
  assertNotNull(bg);
  assertEquals(bg.getKey(),vo.getKey());
  assertEquals(""String_Node_Str"",bg.getName());
  assertEquals(""String_Node_Str"",bg.getDescription());
}"
69706,"@Test public void testDeleteCourseGroup() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getOlatResource().getResourceableId() + ""String_Node_Str""+ g1.getKey()).build();
  HttpDelete method=conn.createDelete(request,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertEquals(200,response.getStatusLine().getStatusCode());
  BusinessGroup bg=businessGroupService.loadBusinessGroup(g1.getKey());
  assertNull(bg);
}","@Test public void testDeleteCourseGroup() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getOlatResource().getResourceableId() + ""String_Node_Str""+ g1.getKey()).build();
  HttpDelete method=conn.createDelete(request,MediaType.APPLICATION_JSON);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertEquals(200,response.getStatusLine().getStatusCode());
  BusinessGroup bg=businessGroupService.loadBusinessGroup(g1.getKey());
  assertNull(bg);
}"
69707,"@Test public void testBasicSecurityDeleteCall() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getOlatResource().getResourceableId() + ""String_Node_Str""+ g2.getKey()).build();
  HttpDelete method=conn.createDelete(request,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertEquals(401,response.getStatusLine().getStatusCode());
}","@Test public void testBasicSecurityDeleteCall() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getOlatResource().getResourceableId() + ""String_Node_Str""+ g2.getKey()).build();
  HttpDelete method=conn.createDelete(request,MediaType.APPLICATION_JSON);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertEquals(401,response.getStatusLine().getStatusCode());
}"
69708,"@Test public void testDeleteCourses() throws IOException, URISyntaxException {
  ICourse course=CoursesWebService.createEmptyCourse(admin,""String_Node_Str"",""String_Node_Str"",null);
  DBFactory.getInstance().intermediateCommit();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + course.getResourceableId()).build();
  HttpDelete method=conn.createDelete(request,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  List<String> courseType=new ArrayList<String>();
  courseType.add(CourseModule.getCourseTypeName());
  Roles roles=new Roles(true,true,true,true,false,true,false);
  List<RepositoryEntry> repoEntries=RepositoryManager.getInstance().genericANDQueryWithRolesRestriction(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",courseType,null,roles,""String_Node_Str"");
  assertNotNull(repoEntries);
  for (  RepositoryEntry entry : repoEntries) {
    assertNotSame(entry.getOlatResource().getResourceableId(),course.getResourceableId());
  }
}","@Test public void testDeleteCourses() throws IOException, URISyntaxException {
  ICourse course=CoursesWebService.createEmptyCourse(admin,""String_Node_Str"",""String_Node_Str"",null);
  DBFactory.getInstance().intermediateCommit();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + course.getResourceableId()).build();
  HttpDelete method=conn.createDelete(request,MediaType.APPLICATION_JSON);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  List<String> courseType=new ArrayList<String>();
  courseType.add(CourseModule.getCourseTypeName());
  Roles roles=new Roles(true,true,true,true,false,true,false);
  List<RepositoryEntry> repoEntries=RepositoryManager.getInstance().genericANDQueryWithRolesRestriction(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",courseType,null,roles,""String_Node_Str"");
  assertNotNull(repoEntries);
  for (  RepositoryEntry entry : repoEntries) {
    assertNotSame(entry.getOlatResource().getResourceableId(),course.getResourceableId());
  }
}"
69709,"@Test public void testRemoveAuthor() throws IOException, URISyntaxException {
  BaseSecurity securityManager=BaseSecurityManager.getInstance();
  SecurityGroup authorGroup=securityManager.findSecurityGroupByName(Constants.GROUP_AUTHORS);
  if (!securityManager.isIdentityInSecurityGroup(auth1,authorGroup)) {
    securityManager.addIdentityToSecurityGroup(auth1,authorGroup);
  }
  if (!securityManager.isIdentityInSecurityGroup(auth2,authorGroup)) {
    securityManager.addIdentityToSecurityGroup(auth2,authorGroup);
  }
  DBFactory.getInstance().intermediateCommit();
  RepositoryManager rm=RepositoryManager.getInstance();
  RepositoryEntry repositoryEntry=rm.lookupRepositoryEntry(course1,true);
  List<Identity> authors=new ArrayList<Identity>();
  authors.add(auth1);
  authors.add(auth2);
  IdentitiesAddEvent identitiesAddedEvent=new IdentitiesAddEvent(authors);
  rm.addOwners(admin,identitiesAddedEvent,repositoryEntry);
  DBFactory.getInstance().intermediateCommit();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + course1.getResourceableId() + ""String_Node_Str""+ auth1.getKey()).build();
  HttpDelete method=conn.createDelete(request,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  EntityUtils.consume(response.getEntity());
  URI request2=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + course1.getResourceableId() + ""String_Node_Str""+ auth2.getKey()).build();
  HttpDelete method2=conn.createDelete(request2,MediaType.APPLICATION_JSON,true);
  HttpResponse response2=conn.execute(method2);
  assertEquals(200,response2.getStatusLine().getStatusCode());
  EntityUtils.consume(response2.getEntity());
  repositoryEntry=rm.lookupRepositoryEntry(course1,true);
  SecurityGroup ownerGroup=repositoryEntry.getOwnerGroup();
  assertFalse(securityManager.isIdentityInSecurityGroup(auth1,ownerGroup));
  assertFalse(securityManager.isIdentityInSecurityGroup(auth2,ownerGroup));
  DBFactory.getInstance().intermediateCommit();
}","@Test public void testRemoveAuthor() throws IOException, URISyntaxException {
  BaseSecurity securityManager=BaseSecurityManager.getInstance();
  SecurityGroup authorGroup=securityManager.findSecurityGroupByName(Constants.GROUP_AUTHORS);
  if (!securityManager.isIdentityInSecurityGroup(auth1,authorGroup)) {
    securityManager.addIdentityToSecurityGroup(auth1,authorGroup);
  }
  if (!securityManager.isIdentityInSecurityGroup(auth2,authorGroup)) {
    securityManager.addIdentityToSecurityGroup(auth2,authorGroup);
  }
  DBFactory.getInstance().intermediateCommit();
  RepositoryManager rm=RepositoryManager.getInstance();
  RepositoryEntry repositoryEntry=rm.lookupRepositoryEntry(course1,true);
  List<Identity> authors=new ArrayList<Identity>();
  authors.add(auth1);
  authors.add(auth2);
  IdentitiesAddEvent identitiesAddedEvent=new IdentitiesAddEvent(authors);
  rm.addOwners(admin,identitiesAddedEvent,repositoryEntry);
  DBFactory.getInstance().intermediateCommit();
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + course1.getResourceableId() + ""String_Node_Str""+ auth1.getKey()).build();
  HttpDelete method=conn.createDelete(request,MediaType.APPLICATION_JSON);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  EntityUtils.consume(response.getEntity());
  URI request2=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + course1.getResourceableId() + ""String_Node_Str""+ auth2.getKey()).build();
  HttpDelete method2=conn.createDelete(request2,MediaType.APPLICATION_JSON);
  HttpResponse response2=conn.execute(method2);
  assertEquals(200,response2.getStatusLine().getStatusCode());
  EntityUtils.consume(response2.getEntity());
  repositoryEntry=rm.lookupRepositoryEntry(course1,true);
  SecurityGroup ownerGroup=repositoryEntry.getOwnerGroup();
  assertFalse(securityManager.isIdentityInSecurityGroup(auth1,ownerGroup));
  assertFalse(securityManager.isIdentityInSecurityGroup(auth2,ownerGroup));
  DBFactory.getInstance().intermediateCommit();
}"
69710,"@Test public void testUpdateRootNodeCoursePost() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=getCoursesUri().queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  HttpPut method=conn.createPut(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CourseVO course=conn.parse(response,CourseVO.class);
  assertNotNull(course);
  assertNotNull(course.getKey());
  assertNotNull(course.getEditorRootNodeId());
  URI rootUri=getElementsUri(course).path(""String_Node_Str"").path(course.getEditorRootNodeId()).build();
  HttpPost updateMethod=conn.createPost(rootUri,MediaType.APPLICATION_JSON,true);
  HttpEntity entity=MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE).addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").build();
  updateMethod.setEntity(entity);
  HttpResponse newStructureResponse=conn.execute(updateMethod);
  int newStructureCode=newStructureResponse.getStatusLine().getStatusCode();
  assertTrue(newStructureCode == 200 || newStructureCode == 201);
  CourseNodeVO structureNode=conn.parse(newStructureResponse,CourseNodeVO.class);
  assertNotNull(structureNode);
  assertNotNull(structureNode.getId());
  assertEquals(structureNode.getShortTitle(),""String_Node_Str"");
  assertEquals(structureNode.getLongTitle(),""String_Node_Str"");
  assertEquals(structureNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(structureNode.getId(),course.getEditorRootNodeId());
  ICourse realCourse=CourseFactory.loadCourse(course.getKey());
  CourseEditorTreeModel editorTreeModel=realCourse.getEditorTreeModel();
  CourseEditorTreeNode rootNode=(CourseEditorTreeNode)editorTreeModel.getRootNode();
  assertNotNull(rootNode);
  assertNotNull(rootNode.getIdent());
  assertNotNull(rootNode.getCourseNode());
  assertEquals(rootNode.getCourseNode().getShortTitle(),""String_Node_Str"");
  assertEquals(rootNode.getCourseNode().getLongTitle(),""String_Node_Str"");
  assertEquals(rootNode.getCourseNode().getLearningObjectives(),""String_Node_Str"");
}","@Test public void testUpdateRootNodeCoursePost() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=getCoursesUri().queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  HttpPut method=conn.createPut(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CourseVO course=conn.parse(response,CourseVO.class);
  assertNotNull(course);
  assertNotNull(course.getKey());
  assertNotNull(course.getEditorRootNodeId());
  URI rootUri=getElementsUri(course).path(""String_Node_Str"").path(course.getEditorRootNodeId()).build();
  HttpPost updateMethod=conn.createPost(rootUri,MediaType.APPLICATION_JSON);
  HttpEntity entity=MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE).addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").build();
  updateMethod.setEntity(entity);
  HttpResponse newStructureResponse=conn.execute(updateMethod);
  int newStructureCode=newStructureResponse.getStatusLine().getStatusCode();
  assertTrue(newStructureCode == 200 || newStructureCode == 201);
  CourseNodeVO structureNode=conn.parse(newStructureResponse,CourseNodeVO.class);
  assertNotNull(structureNode);
  assertNotNull(structureNode.getId());
  assertEquals(structureNode.getShortTitle(),""String_Node_Str"");
  assertEquals(structureNode.getLongTitle(),""String_Node_Str"");
  assertEquals(structureNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(structureNode.getId(),course.getEditorRootNodeId());
  ICourse realCourse=CourseFactory.loadCourse(course.getKey());
  CourseEditorTreeModel editorTreeModel=realCourse.getEditorTreeModel();
  CourseEditorTreeNode rootNode=(CourseEditorTreeNode)editorTreeModel.getRootNode();
  assertNotNull(rootNode);
  assertNotNull(rootNode.getIdent());
  assertNotNull(rootNode.getCourseNode());
  assertEquals(rootNode.getCourseNode().getShortTitle(),""String_Node_Str"");
  assertEquals(rootNode.getCourseNode().getLongTitle(),""String_Node_Str"");
  assertEquals(rootNode.getCourseNode().getLearningObjectives(),""String_Node_Str"");
}"
69711,"@Test public void testUpdateRootNodeCoursePostWithFile() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=getCoursesUri().queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  HttpPut method=conn.createPut(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CourseVO course=conn.parse(response,CourseVO.class);
  assertNotNull(course);
  assertNotNull(course.getKey());
  assertNotNull(course.getEditorRootNodeId());
  URL pageUrl=RepositoryEntriesTest.class.getResource(""String_Node_Str"");
  assertNotNull(pageUrl);
  File page=new File(pageUrl.toURI());
  URI rootUri=getElementsUri(course).path(""String_Node_Str"").path(course.getEditorRootNodeId()).build();
  HttpPost newStructureMethod=conn.createPost(rootUri,MediaType.APPLICATION_JSON,true);
  HttpEntity entity=MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE).addBinaryBody(""String_Node_Str"",page,ContentType.APPLICATION_OCTET_STREAM,page.getName()).addTextBody(""String_Node_Str"",page.getName()).addTextBody(""String_Node_Str"",course.getEditorRootNodeId()).addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").build();
  newStructureMethod.setEntity(entity);
  HttpResponse newStructureCode=conn.execute(newStructureMethod);
  assertTrue(newStructureCode.getStatusLine().getStatusCode() == 200 || newStructureCode.getStatusLine().getStatusCode() == 201);
  CourseNodeVO structureNode=conn.parse(newStructureCode,CourseNodeVO.class);
  assertNotNull(structureNode);
  assertNotNull(structureNode.getId());
  assertEquals(structureNode.getShortTitle(),""String_Node_Str"");
  assertEquals(structureNode.getLongTitle(),""String_Node_Str"");
  assertEquals(structureNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(structureNode.getId(),course.getEditorRootNodeId());
  ICourse realCourse=CourseFactory.loadCourse(course.getKey());
  CourseEditorTreeModel editorTreeModel=realCourse.getEditorTreeModel();
  CourseEditorTreeNode rootNode=(CourseEditorTreeNode)editorTreeModel.getRootNode();
  assertNotNull(rootNode);
  assertNotNull(rootNode.getIdent());
  assertNotNull(rootNode.getCourseNode());
  assertEquals(rootNode.getCourseNode().getShortTitle(),""String_Node_Str"");
  assertEquals(rootNode.getCourseNode().getLongTitle(),""String_Node_Str"");
  assertEquals(rootNode.getCourseNode().getLearningObjectives(),""String_Node_Str"");
}","@Test public void testUpdateRootNodeCoursePostWithFile() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=getCoursesUri().queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  HttpPut method=conn.createPut(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CourseVO course=conn.parse(response,CourseVO.class);
  assertNotNull(course);
  assertNotNull(course.getKey());
  assertNotNull(course.getEditorRootNodeId());
  URL pageUrl=RepositoryEntriesTest.class.getResource(""String_Node_Str"");
  assertNotNull(pageUrl);
  File page=new File(pageUrl.toURI());
  URI rootUri=getElementsUri(course).path(""String_Node_Str"").path(course.getEditorRootNodeId()).build();
  HttpPost newStructureMethod=conn.createPost(rootUri,MediaType.APPLICATION_JSON);
  HttpEntity entity=MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE).addBinaryBody(""String_Node_Str"",page,ContentType.APPLICATION_OCTET_STREAM,page.getName()).addTextBody(""String_Node_Str"",page.getName()).addTextBody(""String_Node_Str"",course.getEditorRootNodeId()).addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").build();
  newStructureMethod.setEntity(entity);
  HttpResponse newStructureCode=conn.execute(newStructureMethod);
  assertTrue(newStructureCode.getStatusLine().getStatusCode() == 200 || newStructureCode.getStatusLine().getStatusCode() == 201);
  CourseNodeVO structureNode=conn.parse(newStructureCode,CourseNodeVO.class);
  assertNotNull(structureNode);
  assertNotNull(structureNode.getId());
  assertEquals(structureNode.getShortTitle(),""String_Node_Str"");
  assertEquals(structureNode.getLongTitle(),""String_Node_Str"");
  assertEquals(structureNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(structureNode.getId(),course.getEditorRootNodeId());
  ICourse realCourse=CourseFactory.loadCourse(course.getKey());
  CourseEditorTreeModel editorTreeModel=realCourse.getEditorTreeModel();
  CourseEditorTreeNode rootNode=(CourseEditorTreeNode)editorTreeModel.getRootNode();
  assertNotNull(rootNode);
  assertNotNull(rootNode.getIdent());
  assertNotNull(rootNode.getCourseNode());
  assertEquals(rootNode.getCourseNode().getShortTitle(),""String_Node_Str"");
  assertEquals(rootNode.getCourseNode().getLongTitle(),""String_Node_Str"");
  assertEquals(rootNode.getCourseNode().getLearningObjectives(),""String_Node_Str"");
}"
69712,"@Test public void testCreateCoursePost() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=getCoursesUri().queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  HttpPut method=conn.createPut(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CourseVO course=conn.parse(response,CourseVO.class);
  assertNotNull(course);
  assertNotNull(course.getKey());
  assertNotNull(course.getEditorRootNodeId());
  URI newStructureUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newStructureMethod=conn.createPost(newStructureUri,MediaType.APPLICATION_JSON,true);
  HttpEntity newStructureEnttiy=MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE).addTextBody(""String_Node_Str"",course.getEditorRootNodeId()).addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").build();
  newStructureMethod.setEntity(newStructureEnttiy);
  HttpResponse newStructureResponse=conn.execute(newStructureMethod);
  int newStructureCode=newStructureResponse.getStatusLine().getStatusCode();
  assertTrue(newStructureCode == 200 || newStructureCode == 201);
  CourseNodeVO structureNode=conn.parse(newStructureResponse,CourseNodeVO.class);
  assertNotNull(structureNode);
  assertNotNull(structureNode.getId());
  assertEquals(structureNode.getShortTitle(),""String_Node_Str"");
  assertEquals(structureNode.getLongTitle(),""String_Node_Str"");
  assertEquals(structureNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(structureNode.getParentId(),course.getEditorRootNodeId());
  URL pageUrl=CoursesElementsTest.class.getResource(""String_Node_Str"");
  assertNotNull(pageUrl);
  File page=new File(pageUrl.toURI());
  URI newPageUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newPageMethod=conn.createPost(newPageUri,MediaType.APPLICATION_JSON,true);
  HttpEntity entity=MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE).addBinaryBody(""String_Node_Str"",page,ContentType.APPLICATION_OCTET_STREAM,page.getName()).addTextBody(""String_Node_Str"",page.getName()).addTextBody(""String_Node_Str"",course.getEditorRootNodeId()).addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").build();
  newPageMethod.setEntity(entity);
  HttpResponse newPageCode=conn.execute(newPageMethod);
  assertTrue(newPageCode.getStatusLine().getStatusCode() == 200 || newPageCode.getStatusLine().getStatusCode() == 201);
  CourseNodeVO pageNode=conn.parse(newPageCode,CourseNodeVO.class);
  assertNotNull(pageNode);
  assertNotNull(pageNode.getId());
  assertEquals(pageNode.getShortTitle(),""String_Node_Str"");
  assertEquals(pageNode.getLongTitle(),""String_Node_Str"");
  assertEquals(pageNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(structureNode.getParentId(),course.getEditorRootNodeId());
  URI newFolderUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newFolderMethod=conn.createPost(newFolderUri,MediaType.APPLICATION_JSON,true);
  String rule=""String_Node_Str"";
  conn.addEntity(newFolderMethod,new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",rule),new BasicNameValuePair(""String_Node_Str"",rule),new BasicNameValuePair(""String_Node_Str"",rule));
  HttpResponse newFolderCode=conn.execute(newFolderMethod);
  assertTrue(newFolderCode.getStatusLine().getStatusCode() == 200 || newFolderCode.getStatusLine().getStatusCode() == 201);
  CourseNodeVO folderNode=conn.parse(newFolderCode,CourseNodeVO.class);
  assertNotNull(folderNode);
  assertNotNull(folderNode.getId());
  assertEquals(folderNode.getShortTitle(),""String_Node_Str"");
  assertEquals(folderNode.getLongTitle(),""String_Node_Str"");
  assertEquals(folderNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(folderNode.getParentId(),course.getEditorRootNodeId());
  URI newForumUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newForumMethod=conn.createPost(newForumUri,MediaType.APPLICATION_JSON,true);
  conn.addEntity(newForumMethod,new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  HttpResponse newForumCode=conn.execute(newForumMethod);
  assertTrue(newForumCode.getStatusLine().getStatusCode() == 200 || newForumCode.getStatusLine().getStatusCode() == 201);
  CourseNodeVO forumNode=conn.parse(newForumCode,CourseNodeVO.class);
  assertNotNull(forumNode);
  assertNotNull(forumNode.getId());
  assertEquals(forumNode.getShortTitle(),""String_Node_Str"");
  assertEquals(forumNode.getLongTitle(),""String_Node_Str"");
  assertEquals(forumNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(forumNode.getParentId(),course.getEditorRootNodeId());
  URI newTaskUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newTaskMethod=conn.createPost(newTaskUri,MediaType.APPLICATION_JSON,true);
  conn.addEntity(newTaskMethod,new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  HttpResponse newTaskCode=conn.execute(newTaskMethod);
  assertTrue(newTaskCode.getStatusLine().getStatusCode() == 200 || newTaskCode.getStatusLine().getStatusCode() == 201);
  CourseNodeVO taskNode=conn.parse(newTaskCode,CourseNodeVO.class);
  assertNotNull(taskNode);
  assertNotNull(taskNode.getId());
  assertEquals(taskNode.getShortTitle(),""String_Node_Str"");
  assertEquals(taskNode.getLongTitle(),""String_Node_Str"");
  assertEquals(taskNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(taskNode.getParentId(),course.getEditorRootNodeId());
  URI newTestUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newTestMethod=conn.createPost(newTestUri,MediaType.APPLICATION_JSON,true);
  conn.addEntity(newTestMethod,new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  HttpResponse newTestCode=conn.execute(newTestMethod);
  assertTrue(newTestCode.getStatusLine().getStatusCode() == 404);
  EntityUtils.consume(newTestCode.getEntity());
  URI newAssessmentUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newAssessmentMethod=conn.createPost(newAssessmentUri,MediaType.APPLICATION_JSON,true);
  conn.addEntity(newAssessmentMethod,new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  HttpResponse newAssessmentCode=conn.execute(newAssessmentMethod);
  assertTrue(newAssessmentCode.getStatusLine().getStatusCode() == 200 || newAssessmentCode.getStatusLine().getStatusCode() == 201);
  CourseNodeVO assessmentNode=conn.parse(newAssessmentCode,CourseNodeVO.class);
  assertNotNull(assessmentNode);
  assertNotNull(assessmentNode.getId());
  assertEquals(assessmentNode.getShortTitle(),""String_Node_Str"");
  assertEquals(assessmentNode.getLongTitle(),""String_Node_Str"");
  assertEquals(assessmentNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(assessmentNode.getParentId(),course.getEditorRootNodeId());
  URI newContactUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newContactMethod=conn.createPost(newContactUri,MediaType.APPLICATION_JSON,true);
  conn.addEntity(newContactMethod,new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  HttpResponse newContactCode=conn.execute(newContactMethod);
  assertEquals(200,newContactCode.getStatusLine().getStatusCode());
  CourseNodeVO contactNode=conn.parse(newContactCode,CourseNodeVO.class);
  assertNotNull(contactNode);
  assertNotNull(contactNode.getId());
  assertEquals(contactNode.getShortTitle(),""String_Node_Str"");
  assertEquals(contactNode.getLongTitle(),""String_Node_Str"");
  assertEquals(contactNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(contactNode.getParentId(),course.getEditorRootNodeId());
}","@Test public void testCreateCoursePost() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=getCoursesUri().queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  HttpPut method=conn.createPut(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  CourseVO course=conn.parse(response,CourseVO.class);
  assertNotNull(course);
  assertNotNull(course.getKey());
  assertNotNull(course.getEditorRootNodeId());
  URI newStructureUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newStructureMethod=conn.createPost(newStructureUri,MediaType.APPLICATION_JSON);
  HttpEntity newStructureEnttiy=MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE).addTextBody(""String_Node_Str"",course.getEditorRootNodeId()).addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").build();
  newStructureMethod.setEntity(newStructureEnttiy);
  HttpResponse newStructureResponse=conn.execute(newStructureMethod);
  int newStructureCode=newStructureResponse.getStatusLine().getStatusCode();
  assertTrue(newStructureCode == 200 || newStructureCode == 201);
  CourseNodeVO structureNode=conn.parse(newStructureResponse,CourseNodeVO.class);
  assertNotNull(structureNode);
  assertNotNull(structureNode.getId());
  assertEquals(structureNode.getShortTitle(),""String_Node_Str"");
  assertEquals(structureNode.getLongTitle(),""String_Node_Str"");
  assertEquals(structureNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(structureNode.getParentId(),course.getEditorRootNodeId());
  URL pageUrl=CoursesElementsTest.class.getResource(""String_Node_Str"");
  assertNotNull(pageUrl);
  File page=new File(pageUrl.toURI());
  URI newPageUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newPageMethod=conn.createPost(newPageUri,MediaType.APPLICATION_JSON);
  HttpEntity entity=MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE).addBinaryBody(""String_Node_Str"",page,ContentType.APPLICATION_OCTET_STREAM,page.getName()).addTextBody(""String_Node_Str"",page.getName()).addTextBody(""String_Node_Str"",course.getEditorRootNodeId()).addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").build();
  newPageMethod.setEntity(entity);
  HttpResponse newPageCode=conn.execute(newPageMethod);
  assertTrue(newPageCode.getStatusLine().getStatusCode() == 200 || newPageCode.getStatusLine().getStatusCode() == 201);
  CourseNodeVO pageNode=conn.parse(newPageCode,CourseNodeVO.class);
  assertNotNull(pageNode);
  assertNotNull(pageNode.getId());
  assertEquals(pageNode.getShortTitle(),""String_Node_Str"");
  assertEquals(pageNode.getLongTitle(),""String_Node_Str"");
  assertEquals(pageNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(structureNode.getParentId(),course.getEditorRootNodeId());
  URI newFolderUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newFolderMethod=conn.createPost(newFolderUri,MediaType.APPLICATION_JSON);
  String rule=""String_Node_Str"";
  conn.addEntity(newFolderMethod,new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",rule),new BasicNameValuePair(""String_Node_Str"",rule),new BasicNameValuePair(""String_Node_Str"",rule));
  HttpResponse newFolderCode=conn.execute(newFolderMethod);
  assertTrue(newFolderCode.getStatusLine().getStatusCode() == 200 || newFolderCode.getStatusLine().getStatusCode() == 201);
  CourseNodeVO folderNode=conn.parse(newFolderCode,CourseNodeVO.class);
  assertNotNull(folderNode);
  assertNotNull(folderNode.getId());
  assertEquals(folderNode.getShortTitle(),""String_Node_Str"");
  assertEquals(folderNode.getLongTitle(),""String_Node_Str"");
  assertEquals(folderNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(folderNode.getParentId(),course.getEditorRootNodeId());
  URI newForumUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newForumMethod=conn.createPost(newForumUri,MediaType.APPLICATION_JSON);
  conn.addEntity(newForumMethod,new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  HttpResponse newForumCode=conn.execute(newForumMethod);
  assertTrue(newForumCode.getStatusLine().getStatusCode() == 200 || newForumCode.getStatusLine().getStatusCode() == 201);
  CourseNodeVO forumNode=conn.parse(newForumCode,CourseNodeVO.class);
  assertNotNull(forumNode);
  assertNotNull(forumNode.getId());
  assertEquals(forumNode.getShortTitle(),""String_Node_Str"");
  assertEquals(forumNode.getLongTitle(),""String_Node_Str"");
  assertEquals(forumNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(forumNode.getParentId(),course.getEditorRootNodeId());
  URI newTaskUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newTaskMethod=conn.createPost(newTaskUri,MediaType.APPLICATION_JSON);
  conn.addEntity(newTaskMethod,new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  HttpResponse newTaskCode=conn.execute(newTaskMethod);
  assertTrue(newTaskCode.getStatusLine().getStatusCode() == 200 || newTaskCode.getStatusLine().getStatusCode() == 201);
  CourseNodeVO taskNode=conn.parse(newTaskCode,CourseNodeVO.class);
  assertNotNull(taskNode);
  assertNotNull(taskNode.getId());
  assertEquals(taskNode.getShortTitle(),""String_Node_Str"");
  assertEquals(taskNode.getLongTitle(),""String_Node_Str"");
  assertEquals(taskNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(taskNode.getParentId(),course.getEditorRootNodeId());
  URI newTestUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newTestMethod=conn.createPost(newTestUri,MediaType.APPLICATION_JSON);
  conn.addEntity(newTestMethod,new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  HttpResponse newTestCode=conn.execute(newTestMethod);
  assertTrue(newTestCode.getStatusLine().getStatusCode() == 404);
  EntityUtils.consume(newTestCode.getEntity());
  URI newAssessmentUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newAssessmentMethod=conn.createPost(newAssessmentUri,MediaType.APPLICATION_JSON);
  conn.addEntity(newAssessmentMethod,new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  HttpResponse newAssessmentCode=conn.execute(newAssessmentMethod);
  assertTrue(newAssessmentCode.getStatusLine().getStatusCode() == 200 || newAssessmentCode.getStatusLine().getStatusCode() == 201);
  CourseNodeVO assessmentNode=conn.parse(newAssessmentCode,CourseNodeVO.class);
  assertNotNull(assessmentNode);
  assertNotNull(assessmentNode.getId());
  assertEquals(assessmentNode.getShortTitle(),""String_Node_Str"");
  assertEquals(assessmentNode.getLongTitle(),""String_Node_Str"");
  assertEquals(assessmentNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(assessmentNode.getParentId(),course.getEditorRootNodeId());
  URI newContactUri=getElementsUri(course).path(""String_Node_Str"").build();
  HttpPost newContactMethod=conn.createPost(newContactUri,MediaType.APPLICATION_JSON);
  conn.addEntity(newContactMethod,new BasicNameValuePair(""String_Node_Str"",course.getEditorRootNodeId()),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  HttpResponse newContactCode=conn.execute(newContactMethod);
  assertEquals(200,newContactCode.getStatusLine().getStatusCode());
  CourseNodeVO contactNode=conn.parse(newContactCode,CourseNodeVO.class);
  assertNotNull(contactNode);
  assertNotNull(contactNode.getId());
  assertEquals(contactNode.getShortTitle(),""String_Node_Str"");
  assertEquals(contactNode.getLongTitle(),""String_Node_Str"");
  assertEquals(contactNode.getLearningObjectives(),""String_Node_Str"");
  assertEquals(contactNode.getParentId(),course.getEditorRootNodeId());
}"
69713,"@Test public void deleteFolder() throws IOException, URISyntaxException {
  OlatNamedContainerImpl folder=BCCourseNode.getNodeFolderContainer((BCCourseNode)bcNode,course1.getCourseEnvironment());
  VFSItem item=folder.resolve(""String_Node_Str"");
  if (item == null) {
    folder.createChildContainer(""String_Node_Str"");
  }
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=UriBuilder.fromUri(getNodeURI()).path(""String_Node_Str"").path(""String_Node_Str"").build();
  HttpDelete method=conn.createDelete(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  VFSItem deletedItem=folder.resolve(""String_Node_Str"");
  assertNull(deletedItem);
}","@Test public void deleteFolder() throws IOException, URISyntaxException {
  OlatNamedContainerImpl folder=BCCourseNode.getNodeFolderContainer((BCCourseNode)bcNode,course1.getCourseEnvironment());
  VFSItem item=folder.resolve(""String_Node_Str"");
  if (item == null) {
    folder.createChildContainer(""String_Node_Str"");
  }
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI uri=UriBuilder.fromUri(getNodeURI()).path(""String_Node_Str"").path(""String_Node_Str"").build();
  HttpDelete method=conn.createDelete(uri,MediaType.APPLICATION_JSON);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  VFSItem deletedItem=folder.resolve(""String_Node_Str"");
  assertNull(deletedItem);
}"
69714,"@Test public void testImportCourse() throws IOException, URISyntaxException {
  URL cpUrl=CoursesTest.class.getResource(""String_Node_Str"");
  assertNotNull(cpUrl);
  File cp=new File(cpUrl.toURI());
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").build();
  HttpPost method=conn.createPost(request,MediaType.APPLICATION_JSON,true);
  String softKey=UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"").substring(0,30);
  HttpEntity entity=MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE).addBinaryBody(""String_Node_Str"",cp,ContentType.APPLICATION_OCTET_STREAM,cp.getName()).addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",softKey).build();
  method.setEntity(entity);
  HttpResponse response=conn.execute(method);
  assertTrue(response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 201);
  CourseVO vo=conn.parse(response,CourseVO.class);
  assertNotNull(vo);
  assertNotNull(vo.getRepoEntryKey());
  assertNotNull(vo.getKey());
  Long repoKey=vo.getRepoEntryKey();
  RepositoryEntry re=RepositoryManager.getInstance().lookupRepositoryEntry(repoKey);
  assertNotNull(re);
  assertNotNull(re.getOwnerGroup());
  assertNotNull(re.getOlatResource());
  assertEquals(""String_Node_Str"",re.getDisplayname());
  assertEquals(softKey,re.getSoftkey());
}","@Test public void testImportCourse() throws IOException, URISyntaxException {
  URL cpUrl=CoursesTest.class.getResource(""String_Node_Str"");
  assertNotNull(cpUrl);
  File cp=new File(cpUrl.toURI());
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"").build();
  HttpPost method=conn.createPost(request,MediaType.APPLICATION_JSON);
  String softKey=UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"").substring(0,30);
  HttpEntity entity=MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE).addBinaryBody(""String_Node_Str"",cp,ContentType.APPLICATION_OCTET_STREAM,cp.getName()).addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",""String_Node_Str"").addTextBody(""String_Node_Str"",softKey).build();
  method.setEntity(entity);
  HttpResponse response=conn.execute(method);
  assertTrue(response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 201);
  CourseVO vo=conn.parse(response,CourseVO.class);
  assertNotNull(vo);
  assertNotNull(vo.getRepoEntryKey());
  assertNotNull(vo.getKey());
  Long repoKey=vo.getRepoEntryKey();
  RepositoryEntry re=RepositoryManager.getInstance().lookupRepositoryEntry(repoKey);
  assertNotNull(re);
  assertNotNull(re.getOwnerGroup());
  assertNotNull(re.getOlatResource());
  assertEquals(""String_Node_Str"",re.getDisplayname());
  assertEquals(softKey,re.getSoftkey());
}"
69715,"@Test public void testUpload64Attachment() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(id1.getName(),""String_Node_Str""));
  URI uri=getForumUriBuilder().path(""String_Node_Str"").path(m1.getKey().toString()).queryParam(""String_Node_Str"",id1.getKey()).queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  HttpPut method=conn.createPut(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  MessageVO message=conn.parse(response,MessageVO.class);
  assertNotNull(message);
  InputStream portraitStream=CoursesElementsTest.class.getResourceAsStream(""String_Node_Str"");
  assertNotNull(portraitStream);
  URI attachUri=getForumUriBuilder().path(""String_Node_Str"").path(message.getKey().toString()).path(""String_Node_Str"").build();
  byte[] portraitBytes=IOUtils.toByteArray(portraitStream);
  byte[] portrait64=Base64.encodeBase64(portraitBytes,true);
  HttpPost attachMethod=conn.createPost(attachUri,MediaType.APPLICATION_JSON,true);
  attachMethod.addHeader(""String_Node_Str"",MediaType.APPLICATION_FORM_URLENCODED);
  conn.addEntity(attachMethod,new BasicNameValuePair(""String_Node_Str"",new String(portrait64)),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  HttpResponse attachCode=conn.execute(attachMethod);
  assertEquals(200,attachCode.getStatusLine().getStatusCode());
  ForumManager fm=ForumManager.getInstance();
  VFSContainer container=fm.getMessageContainer(message.getForumKey(),message.getKey());
  VFSItem uploadedFile=container.resolve(""String_Node_Str"");
  assertNotNull(uploadedFile);
  assertTrue(uploadedFile instanceof VFSLeaf);
  VFSLeaf uploadedImage=(VFSLeaf)uploadedFile;
  InputStream uploadedStream=uploadedImage.getInputStream();
  BufferedImage image=ImageIO.read(uploadedStream);
  FileUtils.closeSafely(uploadedStream);
  assertNotNull(image);
  conn.shutdown();
}","@Test public void testUpload64Attachment() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(id1.getName(),""String_Node_Str""));
  URI uri=getForumUriBuilder().path(""String_Node_Str"").path(m1.getKey().toString()).queryParam(""String_Node_Str"",id1.getKey()).queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  HttpPut method=conn.createPut(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  MessageVO message=conn.parse(response,MessageVO.class);
  assertNotNull(message);
  InputStream portraitStream=CoursesElementsTest.class.getResourceAsStream(""String_Node_Str"");
  assertNotNull(portraitStream);
  URI attachUri=getForumUriBuilder().path(""String_Node_Str"").path(message.getKey().toString()).path(""String_Node_Str"").build();
  byte[] portraitBytes=IOUtils.toByteArray(portraitStream);
  byte[] portrait64=Base64.encodeBase64(portraitBytes,true);
  HttpPost attachMethod=conn.createPost(attachUri,MediaType.APPLICATION_JSON);
  attachMethod.addHeader(""String_Node_Str"",MediaType.APPLICATION_FORM_URLENCODED);
  conn.addEntity(attachMethod,new BasicNameValuePair(""String_Node_Str"",new String(portrait64)),new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  HttpResponse attachCode=conn.execute(attachMethod);
  assertEquals(200,attachCode.getStatusLine().getStatusCode());
  ForumManager fm=ForumManager.getInstance();
  VFSContainer container=fm.getMessageContainer(message.getForumKey(),message.getKey());
  VFSItem uploadedFile=container.resolve(""String_Node_Str"");
  assertNotNull(uploadedFile);
  assertTrue(uploadedFile instanceof VFSLeaf);
  VFSLeaf uploadedImage=(VFSLeaf)uploadedFile;
  InputStream uploadedStream=uploadedImage.getInputStream();
  BufferedImage image=ImageIO.read(uploadedStream);
  FileUtils.closeSafely(uploadedStream);
  assertNotNull(image);
  conn.shutdown();
}"
69716,"@Test public void testUploadAttachmentAndRename() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(id1.getName(),""String_Node_Str""));
  URI uri=getForumUriBuilder().path(""String_Node_Str"").path(m1.getKey().toString()).queryParam(""String_Node_Str"",id1.getKey()).queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  HttpPut method=conn.createPut(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  MessageVO message=conn.parse(response,MessageVO.class);
  assertNotNull(message);
  URL portraitUrl=CoursesElementsTest.class.getResource(""String_Node_Str"");
  assertNotNull(portraitUrl);
  File portrait=new File(portraitUrl.toURI());
  URI attachUri=getForumUriBuilder().path(""String_Node_Str"").path(m1.getKey().toString()).path(""String_Node_Str"").build();
  HttpPost attachMethod=conn.createPost(attachUri,MediaType.APPLICATION_JSON,true);
  conn.addMultipart(attachMethod,""String_Node_Str"",portrait);
  HttpResponse attachCode=conn.execute(attachMethod);
  assertEquals(200,attachCode.getStatusLine().getStatusCode());
  EntityUtils.consume(attachCode.getEntity());
  URI attach2Uri=getForumUriBuilder().path(""String_Node_Str"").path(m1.getKey().toString()).path(""String_Node_Str"").build();
  HttpPost attach2Method=conn.createPost(attach2Uri,MediaType.APPLICATION_JSON,true);
  conn.addMultipart(attach2Method,""String_Node_Str"",portrait);
  HttpResponse attach2Code=conn.execute(attach2Method);
  assertEquals(200,attach2Code.getStatusLine().getStatusCode());
  EntityUtils.consume(attach2Code.getEntity());
  URI loadUri=getForumUriBuilder().path(""String_Node_Str"").path(m1.getKey().toString()).path(""String_Node_Str"").build();
  HttpGet loadMethod=conn.createGet(loadUri,MediaType.APPLICATION_JSON,true);
  HttpResponse loadResponse=conn.execute(loadMethod);
  assertEquals(200,loadResponse.getStatusLine().getStatusCode());
  InputStream loadBody=loadResponse.getEntity().getContent();
  List<FileVO> files=parseFileArray(loadBody);
  assertNotNull(files);
  assertEquals(2,files.size());
  conn.shutdown();
}","@Test public void testUploadAttachmentAndRename() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(id1.getName(),""String_Node_Str""));
  URI uri=getForumUriBuilder().path(""String_Node_Str"").path(m1.getKey().toString()).queryParam(""String_Node_Str"",id1.getKey()).queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  HttpPut method=conn.createPut(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  MessageVO message=conn.parse(response,MessageVO.class);
  assertNotNull(message);
  URL portraitUrl=CoursesElementsTest.class.getResource(""String_Node_Str"");
  assertNotNull(portraitUrl);
  File portrait=new File(portraitUrl.toURI());
  URI attachUri=getForumUriBuilder().path(""String_Node_Str"").path(m1.getKey().toString()).path(""String_Node_Str"").build();
  HttpPost attachMethod=conn.createPost(attachUri,MediaType.APPLICATION_JSON);
  conn.addMultipart(attachMethod,""String_Node_Str"",portrait);
  HttpResponse attachCode=conn.execute(attachMethod);
  assertEquals(200,attachCode.getStatusLine().getStatusCode());
  EntityUtils.consume(attachCode.getEntity());
  URI attach2Uri=getForumUriBuilder().path(""String_Node_Str"").path(m1.getKey().toString()).path(""String_Node_Str"").build();
  HttpPost attach2Method=conn.createPost(attach2Uri,MediaType.APPLICATION_JSON);
  conn.addMultipart(attach2Method,""String_Node_Str"",portrait);
  HttpResponse attach2Code=conn.execute(attach2Method);
  assertEquals(200,attach2Code.getStatusLine().getStatusCode());
  EntityUtils.consume(attach2Code.getEntity());
  URI loadUri=getForumUriBuilder().path(""String_Node_Str"").path(m1.getKey().toString()).path(""String_Node_Str"").build();
  HttpGet loadMethod=conn.createGet(loadUri,MediaType.APPLICATION_JSON,true);
  HttpResponse loadResponse=conn.execute(loadMethod);
  assertEquals(200,loadResponse.getStatusLine().getStatusCode());
  InputStream loadBody=loadResponse.getEntity().getContent();
  List<FileVO> files=parseFileArray(loadBody);
  assertNotNull(files);
  assertEquals(2,files.size());
  conn.shutdown();
}"
69717,"@Test public void testUploadAttachment() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(id1.getName(),""String_Node_Str""));
  URI uri=getForumUriBuilder().path(""String_Node_Str"").path(m1.getKey().toString()).queryParam(""String_Node_Str"",id1.getKey()).queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  HttpPut method=conn.createPut(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  MessageVO message=conn.parse(response,MessageVO.class);
  assertNotNull(message);
  URL portraitUrl=CoursesElementsTest.class.getResource(""String_Node_Str"");
  assertNotNull(portraitUrl);
  File portrait=new File(portraitUrl.toURI());
  URI attachUri=getForumUriBuilder().path(""String_Node_Str"").path(message.getKey().toString()).path(""String_Node_Str"").build();
  HttpPost attachMethod=conn.createPost(attachUri,MediaType.APPLICATION_JSON,true);
  conn.addMultipart(attachMethod,""String_Node_Str"",portrait);
  HttpResponse attachResponse=conn.execute(attachMethod);
  assertEquals(200,attachResponse.getStatusLine().getStatusCode());
  ForumManager fm=ForumManager.getInstance();
  VFSContainer container=fm.getMessageContainer(message.getForumKey(),message.getKey());
  VFSItem uploadedFile=container.resolve(""String_Node_Str"");
  assertNotNull(uploadedFile);
  assertTrue(uploadedFile instanceof VFSLeaf);
  VFSLeaf uploadedImage=(VFSLeaf)uploadedFile;
  InputStream uploadedStream=uploadedImage.getInputStream();
  BufferedImage image=ImageIO.read(uploadedStream);
  FileUtils.closeSafely(uploadedStream);
  assertNotNull(image);
  conn.shutdown();
}","@Test public void testUploadAttachment() throws IOException, URISyntaxException {
  RestConnection conn=new RestConnection();
  assertTrue(conn.login(id1.getName(),""String_Node_Str""));
  URI uri=getForumUriBuilder().path(""String_Node_Str"").path(m1.getKey().toString()).queryParam(""String_Node_Str"",id1.getKey()).queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  HttpPut method=conn.createPut(uri,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  assertEquals(200,response.getStatusLine().getStatusCode());
  MessageVO message=conn.parse(response,MessageVO.class);
  assertNotNull(message);
  URL portraitUrl=CoursesElementsTest.class.getResource(""String_Node_Str"");
  assertNotNull(portraitUrl);
  File portrait=new File(portraitUrl.toURI());
  URI attachUri=getForumUriBuilder().path(""String_Node_Str"").path(message.getKey().toString()).path(""String_Node_Str"").build();
  HttpPost attachMethod=conn.createPost(attachUri,MediaType.APPLICATION_JSON);
  conn.addMultipart(attachMethod,""String_Node_Str"",portrait);
  HttpResponse attachResponse=conn.execute(attachMethod);
  assertEquals(200,attachResponse.getStatusLine().getStatusCode());
  ForumManager fm=ForumManager.getInstance();
  VFSContainer container=fm.getMessageContainer(message.getForumKey(),message.getKey());
  VFSItem uploadedFile=container.resolve(""String_Node_Str"");
  assertNotNull(uploadedFile);
  assertTrue(uploadedFile instanceof VFSLeaf);
  VFSLeaf uploadedImage=(VFSLeaf)uploadedFile;
  InputStream uploadedStream=uploadedImage.getInputStream();
  BufferedImage image=ImageIO.read(uploadedStream);
  FileUtils.closeSafely(uploadedStream);
  assertNotNull(image);
  conn.shutdown();
}"
69718,"/** 
 * @see org.olat.core.gui.components.form.flexible.impl.FormBasicController#initForm(org.olat.core.gui.components.form.flexible.FormItemContainer,org.olat.core.gui.control.Controller,org.olat.core.gui.UserRequest)
 */
@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormDescription(""String_Node_Str"");
  search=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",100,""String_Node_Str"",formLayout);
  if (isUsedInStepWizzard()) {
    searchLink=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
  }
 else {
    searchButton=uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
    uifactory.addSpacerElement(""String_Node_Str"",formLayout,false);
  }
  errorComp=uifactory.createSimpleErrorText(""String_Node_Str"",""String_Node_Str"");
  formLayout.add(errorComp);
  tableCont=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),velocity_root + ""String_Node_Str"");
  tableCont.setRootForm(mainForm);
  formLayout.add(tableCont);
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.groupName.i18n(),Cols.groupName.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.description.i18n(),Cols.description.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.courses.i18n(),Cols.courses.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.tutor.i18n(),Cols.tutor.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.participant.i18n(),Cols.participant.ordinal()));
  tableDataModel=new GroupTableDataModel(Collections.<GroupWrapper>emptyList(),tableColumnModel);
  table=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",tableDataModel,tableCont);
  tableCont.add(""String_Node_Str"",table);
  if (!isUsedInStepWizzard()) {
    saveLink=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
  }
}","/** 
 * @see org.olat.core.gui.components.form.flexible.impl.FormBasicController#initForm(org.olat.core.gui.components.form.flexible.FormItemContainer,org.olat.core.gui.control.Controller,org.olat.core.gui.UserRequest)
 */
@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormDescription(""String_Node_Str"");
  search=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",100,""String_Node_Str"",formLayout);
  if (isUsedInStepWizzard()) {
    searchLink=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
  }
 else {
    searchButton=uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
    uifactory.addSpacerElement(""String_Node_Str"",formLayout,false);
  }
  errorComp=uifactory.createSimpleErrorText(""String_Node_Str"",""String_Node_Str"");
  formLayout.add(errorComp);
  tableCont=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),velocity_root + ""String_Node_Str"");
  tableCont.setRootForm(mainForm);
  formLayout.add(tableCont);
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.groupName.i18n(),Cols.groupName.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,Cols.description.i18n(),Cols.description.ordinal(),false,null,FlexiColumnModel.ALIGNMENT_LEFT,new TextFlexiCellRenderer(EscapeMode.antisamy)));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.courses.i18n(),Cols.courses.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.tutor.i18n(),Cols.tutor.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.participant.i18n(),Cols.participant.ordinal()));
  tableDataModel=new GroupTableDataModel(Collections.<GroupWrapper>emptyList(),tableColumnModel);
  table=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",tableDataModel,tableCont);
  tableCont.add(""String_Node_Str"",table);
  if (!isUsedInStepWizzard()) {
    saveLink=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
  }
}"
69719,"public TextFlexiCellRenderer(boolean escapeHtml){
  this.escapeHtml=escapeHtml;
}","public TextFlexiCellRenderer(EscapeMode escapeHtml){
  this.escapeHtml=escapeHtml;
}"
69720,"/** 
 * Render Date type with Formatter depending on locale. Render all other types with toString. 
 * @param target
 * @param cellValue
 * @param translator
 */
@Override public void render(StringOutput target,Object cellValue,int row,FlexiTableComponent source,URLBuilder ubu,Translator translator){
  if (cellValue instanceof Date) {
    Formatter formatter=Formatter.getInstance(translator.getLocale());
    target.append(formatter.formatDateAndTime((Date)cellValue));
  }
 else   if (cellValue instanceof String) {
    String str=(String)cellValue;
    if (escapeHtml) {
      StringHelper.escapeHtml(target,str);
    }
 else {
      target.append(str);
    }
  }
 else   if (cellValue != null) {
    target.append(cellValue.toString());
  }
}","/** 
 * Render Date type with Formatter depending on locale. Render all other types with toString. 
 * @param target
 * @param cellValue
 * @param translator
 */
@Override public void render(StringOutput target,Object cellValue,int row,FlexiTableComponent source,URLBuilder ubu,Translator translator){
  if (cellValue instanceof Date) {
    Formatter formatter=Formatter.getInstance(translator.getLocale());
    target.append(formatter.formatDateAndTime((Date)cellValue));
  }
 else   if (cellValue instanceof String) {
    String str=(String)cellValue;
    if (escapeHtml != null) {
switch (escapeHtml) {
case antisamy:
        target.append(new OWASPAntiSamyXSSFilter().filter(str));
      break;
case html:
    StringHelper.escapeHtml(target,str);
  break;
case none:
target.append(str);
break;
}
}
 else {
StringHelper.escapeHtml(target,str);
}
}
 else if (cellValue != null) {
target.append(cellValue.toString());
}
}"
69721,"private void renderString(StringOutput sb,String val){
switch (escapeHtml) {
case none:
    sb.append((String)val);
  break;
case html:
StringHelper.escapeHtml(sb,(String)val);
break;
case antisamy:
System.out.println(val);
sb.append(new OWASPAntiSamyXSSFilter().filter(val));
break;
default :
StringHelper.escapeHtml(sb,(String)val);
}
}","private void renderString(StringOutput sb,String val){
switch (escapeHtml) {
case none:
    sb.append((String)val);
  break;
case html:
StringHelper.escapeHtml(sb,(String)val);
break;
case antisamy:
sb.append(new OWASPAntiSamyXSSFilter().filter(val));
break;
default :
StringHelper.escapeHtml(sb,(String)val);
}
}"
69722,"@Override protected int initColumns(){
  RepositoryEntry re=(RepositoryEntry)getUserObject();
  boolean managed=RepositoryEntryManagedFlag.isManaged(re,RepositoryEntryManagedFlag.groups);
  groupListCtr.addColumnDescriptor(new BusinessGroupNameColumnDescriptor(TABLE_ACTION_LAUNCH,getLocale()));
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.key.i18n(),Cols.key.ordinal(),null,getLocale()));
  if (groupModule.isManagedBusinessGroups()) {
    groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.externalId.i18n(),Cols.externalId.ordinal(),null,getLocale()));
  }
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.description.i18n(),Cols.description.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new ResourcesColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.tutorsCount.i18n(),Cols.tutorsCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.participantsCount.i18n(),Cols.participantsCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.freePlaces.i18n(),Cols.freePlaces.ordinal(),TABLE_ACTION_LAUNCH,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.waitingListCount.i18n(),Cols.waitingListCount.ordinal(),null,getLocale()));
  CustomCellRenderer acRenderer=new BGAccessControlledCellRenderer();
  groupListCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Cols.accessTypes.i18n(),Cols.accessTypes.ordinal(),null,getLocale(),ColumnDescriptor.ALIGNMENT_LEFT,acRenderer));
  groupListCtr.addColumnDescriptor(new StaticColumnDescriptor(TABLE_ACTION_EDIT,""String_Node_Str"",translate(""String_Node_Str"")));
  if (!managed) {
    groupListCtr.addColumnDescriptor(new RemoveActionColumnDescriptor(""String_Node_Str"",Cols.wrapper.ordinal(),getTranslator()));
  }
  return 11;
}","@Override protected int initColumns(){
  RepositoryEntry re=(RepositoryEntry)getUserObject();
  boolean managed=RepositoryEntryManagedFlag.isManaged(re,RepositoryEntryManagedFlag.groups);
  groupListCtr.addColumnDescriptor(new BusinessGroupNameColumnDescriptor(TABLE_ACTION_LAUNCH,getLocale()));
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.key.i18n(),Cols.key.ordinal(),null,getLocale()));
  if (groupModule.isManagedBusinessGroups()) {
    groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.externalId.i18n(),Cols.externalId.ordinal(),null,getLocale()));
  }
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.description.i18n(),Cols.description.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new ResourcesColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.tutorsCount.i18n(),Cols.tutorsCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.participantsCount.i18n(),Cols.participantsCount.ordinal(),null,getLocale()));
  DefaultColumnDescriptor freeplacesCol=new DefaultColumnDescriptor(Cols.freePlaces.i18n(),Cols.freePlaces.ordinal(),TABLE_ACTION_LAUNCH,getLocale());
  freeplacesCol.setEscapeHtml(EscapeMode.none);
  groupListCtr.addColumnDescriptor(freeplacesCol);
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.waitingListCount.i18n(),Cols.waitingListCount.ordinal(),null,getLocale()));
  CustomCellRenderer acRenderer=new BGAccessControlledCellRenderer();
  groupListCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Cols.accessTypes.i18n(),Cols.accessTypes.ordinal(),null,getLocale(),ColumnDescriptor.ALIGNMENT_LEFT,acRenderer));
  groupListCtr.addColumnDescriptor(new StaticColumnDescriptor(TABLE_ACTION_EDIT,""String_Node_Str"",translate(""String_Node_Str"")));
  if (!managed) {
    groupListCtr.addColumnDescriptor(new RemoveActionColumnDescriptor(""String_Node_Str"",Cols.wrapper.ordinal(),getTranslator()));
  }
  return 11;
}"
69723,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    String name=repoEntry == null ? businessGroup.getName() : repoEntry.getDisplayname();
    String title=translate(""String_Node_Str"",new String[]{name});
    layoutCont.contextPut(""String_Node_Str"",title);
  }
  if (repoEntry != null) {
    String[] repoValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
    boolean managed=RepositoryEntryManagedFlag.isManaged(repoEntry,RepositoryEntryManagedFlag.membersmanagement);
    repoRightsEl=uifactory.addCheckboxesVertical(""String_Node_Str"",formLayout,repoRightsKeys,repoValues,null,1);
    repoRightsEl.setEnabled(!managed);
    if (member != null) {
      RepoPermission repoPermission=PermissionHelper.getPermission(repoEntry,member,memberships);
      repoRightsEl.select(""String_Node_Str"",repoPermission.isOwner());
      repoRightsEl.select(""String_Node_Str"",repoPermission.isTutor());
      repoRightsEl.select(""String_Node_Str"",repoPermission.isParticipant());
    }
  }
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",0));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",1));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",2));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,""String_Node_Str"",3,false,null,FlexiColumnModel.ALIGNMENT_LEFT,new TextFlexiCellRenderer(false)));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",4));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",5));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",6));
  tableDataModel=new EditMemberTableDataModel(Collections.<MemberOption>emptyList(),tableColumnModel);
  uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",tableDataModel,formLayout);
  if (withButtons) {
    FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
    formLayout.add(buttonLayout);
    buttonLayout.setRootForm(mainForm);
    uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout);
    uifactory.addFormCancelButton(""String_Node_Str"",buttonLayout,ureq,getWindowControl());
  }
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    String name=repoEntry == null ? businessGroup.getName() : repoEntry.getDisplayname();
    String title=translate(""String_Node_Str"",new String[]{name});
    layoutCont.contextPut(""String_Node_Str"",title);
  }
  if (repoEntry != null) {
    String[] repoValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
    boolean managed=RepositoryEntryManagedFlag.isManaged(repoEntry,RepositoryEntryManagedFlag.membersmanagement);
    repoRightsEl=uifactory.addCheckboxesVertical(""String_Node_Str"",formLayout,repoRightsKeys,repoValues,null,1);
    repoRightsEl.setEnabled(!managed);
    if (member != null) {
      RepoPermission repoPermission=PermissionHelper.getPermission(repoEntry,member,memberships);
      repoRightsEl.select(""String_Node_Str"",repoPermission.isOwner());
      repoRightsEl.select(""String_Node_Str"",repoPermission.isTutor());
      repoRightsEl.select(""String_Node_Str"",repoPermission.isParticipant());
    }
  }
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",0));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",1));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",2));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(true,""String_Node_Str"",3,false,null,FlexiColumnModel.ALIGNMENT_LEFT,new TextFlexiCellRenderer(EscapeMode.none)));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",4));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",5));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",6));
  tableDataModel=new EditMemberTableDataModel(Collections.<MemberOption>emptyList(),tableColumnModel);
  uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",tableDataModel,formLayout);
  if (withButtons) {
    FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
    formLayout.add(buttonLayout);
    buttonLayout.setRootForm(mainForm);
    uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout);
    uifactory.addFormCancelButton(""String_Node_Str"",buttonLayout,ureq,getWindowControl());
  }
}"
69724,"@Override protected int initColumns(){
  groupListCtr.addColumnDescriptor(new BusinessGroupNameColumnDescriptor(TABLE_ACTION_LAUNCH,getLocale()));
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.key.i18n(),Cols.key.ordinal(),null,getLocale()));
  if (groupModule.isManagedBusinessGroups()) {
    groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.externalId.i18n(),Cols.externalId.ordinal(),null,getLocale()));
  }
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.description.i18n(),Cols.description.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new ResourcesColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.freePlaces.i18n(),Cols.freePlaces.ordinal(),TABLE_ACTION_LAUNCH,getLocale()));
  CustomCellRenderer acRenderer=new BGAccessControlledCellRenderer();
  groupListCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Cols.accessTypes.i18n(),Cols.accessTypes.ordinal(),null,getLocale(),ColumnDescriptor.ALIGNMENT_LEFT,acRenderer));
  groupListCtr.addColumnDescriptor(new RoleColumnDescriptor(getLocale()));
  groupListCtr.addColumnDescriptor(new AccessActionColumnDescriptor(Cols.accessControlLaunch.i18n(),Cols.accessControlLaunch.ordinal(),getTranslator()));
  return 8;
}","@Override protected int initColumns(){
  groupListCtr.addColumnDescriptor(new BusinessGroupNameColumnDescriptor(TABLE_ACTION_LAUNCH,getLocale()));
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.key.i18n(),Cols.key.ordinal(),null,getLocale()));
  if (groupModule.isManagedBusinessGroups()) {
    groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.externalId.i18n(),Cols.externalId.ordinal(),null,getLocale()));
  }
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.description.i18n(),Cols.description.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new ResourcesColumnDescriptor(this,mainVC,getTranslator()));
  DefaultColumnDescriptor freePlacesCol=new DefaultColumnDescriptor(Cols.freePlaces.i18n(),Cols.freePlaces.ordinal(),TABLE_ACTION_LAUNCH,getLocale());
  freePlacesCol.setEscapeHtml(EscapeMode.none);
  groupListCtr.addColumnDescriptor(freePlacesCol);
  CustomCellRenderer acRenderer=new BGAccessControlledCellRenderer();
  groupListCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Cols.accessTypes.i18n(),Cols.accessTypes.ordinal(),null,getLocale(),ColumnDescriptor.ALIGNMENT_LEFT,acRenderer));
  groupListCtr.addColumnDescriptor(new RoleColumnDescriptor(getLocale()));
  groupListCtr.addColumnDescriptor(new AccessActionColumnDescriptor(Cols.accessControlLaunch.i18n(),Cols.accessControlLaunch.ordinal(),getTranslator()));
  return 8;
}"
69725,"@Override protected int initColumns(){
  groupListCtr.addColumnDescriptor(new MarkColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new BusinessGroupNameColumnDescriptor(TABLE_ACTION_LAUNCH,getLocale()));
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.key.i18n(),Cols.key.ordinal(),null,getLocale()));
  if (groupModule.isManagedBusinessGroups()) {
    groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.externalId.i18n(),Cols.externalId.ordinal(),null,getLocale()));
  }
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.description.i18n(),Cols.description.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new ResourcesColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.tutorsCount.i18n(),Cols.tutorsCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.participantsCount.i18n(),Cols.participantsCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.freePlaces.i18n(),Cols.freePlaces.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.waitingListCount.i18n(),Cols.waitingListCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new StaticColumnDescriptor(TABLE_ACTION_SELECT,""String_Node_Str"",translate(""String_Node_Str"")));
  return 10;
}","@Override protected int initColumns(){
  groupListCtr.addColumnDescriptor(new MarkColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new BusinessGroupNameColumnDescriptor(TABLE_ACTION_LAUNCH,getLocale()));
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.key.i18n(),Cols.key.ordinal(),null,getLocale()));
  if (groupModule.isManagedBusinessGroups()) {
    groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.externalId.i18n(),Cols.externalId.ordinal(),null,getLocale()));
  }
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.description.i18n(),Cols.description.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new ResourcesColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.tutorsCount.i18n(),Cols.tutorsCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.participantsCount.i18n(),Cols.participantsCount.ordinal(),null,getLocale()));
  DefaultColumnDescriptor freeplacesCol=new DefaultColumnDescriptor(Cols.freePlaces.i18n(),Cols.freePlaces.ordinal(),null,getLocale());
  freeplacesCol.setEscapeHtml(EscapeMode.none);
  groupListCtr.addColumnDescriptor(freeplacesCol);
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.waitingListCount.i18n(),Cols.waitingListCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new StaticColumnDescriptor(TABLE_ACTION_SELECT,""String_Node_Str"",translate(""String_Node_Str"")));
  return 10;
}"
69726,"@Override protected int initColumns(){
  groupListCtr.addColumnDescriptor(new BusinessGroupNameColumnDescriptor(TABLE_ACTION_LAUNCH,getLocale()));
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.key.i18n(),Cols.key.ordinal(),null,getLocale()));
  if (groupModule.isManagedBusinessGroups()) {
    groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.externalId.i18n(),Cols.externalId.ordinal(),null,getLocale()));
  }
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.description.i18n(),Cols.description.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new ResourcesColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.tutorsCount.i18n(),Cols.tutorsCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.participantsCount.i18n(),Cols.participantsCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.freePlaces.i18n(),Cols.freePlaces.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.waitingListCount.i18n(),Cols.waitingListCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new StaticColumnDescriptor(TABLE_ACTION_SELECT,""String_Node_Str"",translate(""String_Node_Str"")));
  return 9;
}","@Override protected int initColumns(){
  groupListCtr.addColumnDescriptor(new BusinessGroupNameColumnDescriptor(TABLE_ACTION_LAUNCH,getLocale()));
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.key.i18n(),Cols.key.ordinal(),null,getLocale()));
  if (groupModule.isManagedBusinessGroups()) {
    groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.externalId.i18n(),Cols.externalId.ordinal(),null,getLocale()));
  }
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.description.i18n(),Cols.description.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new ResourcesColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.tutorsCount.i18n(),Cols.tutorsCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.participantsCount.i18n(),Cols.participantsCount.ordinal(),null,getLocale()));
  DefaultColumnDescriptor freeplacesCol=new DefaultColumnDescriptor(Cols.freePlaces.i18n(),Cols.freePlaces.ordinal(),null,getLocale());
  freeplacesCol.setEscapeHtml(EscapeMode.none);
  groupListCtr.addColumnDescriptor(freeplacesCol);
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.waitingListCount.i18n(),Cols.waitingListCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new StaticColumnDescriptor(TABLE_ACTION_SELECT,""String_Node_Str"",translate(""String_Node_Str"")));
  return 9;
}"
69727,"@Override protected int initColumns(){
  groupListCtr.addColumnDescriptor(new MarkColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new BusinessGroupNameColumnDescriptor(TABLE_ACTION_LAUNCH,getLocale()));
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.key.i18n(),Cols.key.ordinal(),null,getLocale()));
  if (groupModule.isManagedBusinessGroups()) {
    groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.externalId.i18n(),Cols.externalId.ordinal(),null,getLocale()));
  }
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.description.i18n(),Cols.description.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new ResourcesColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.tutorsCount.i18n(),Cols.tutorsCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.participantsCount.i18n(),Cols.participantsCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.freePlaces.i18n(),Cols.freePlaces.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.waitingListCount.i18n(),Cols.waitingListCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new StaticColumnDescriptor(TABLE_ACTION_SELECT,""String_Node_Str"",translate(""String_Node_Str"")));
  return 10;
}","@Override protected int initColumns(){
  groupListCtr.addColumnDescriptor(new MarkColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new BusinessGroupNameColumnDescriptor(TABLE_ACTION_LAUNCH,getLocale()));
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.key.i18n(),Cols.key.ordinal(),null,getLocale()));
  if (groupModule.isManagedBusinessGroups()) {
    groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.externalId.i18n(),Cols.externalId.ordinal(),null,getLocale()));
  }
  groupListCtr.addColumnDescriptor(false,new DefaultColumnDescriptor(Cols.description.i18n(),Cols.description.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new ResourcesColumnDescriptor(this,mainVC,getTranslator()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.tutorsCount.i18n(),Cols.tutorsCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.participantsCount.i18n(),Cols.participantsCount.ordinal(),null,getLocale()));
  DefaultColumnDescriptor freeplacesCol=new DefaultColumnDescriptor(Cols.freePlaces.i18n(),Cols.freePlaces.ordinal(),null,getLocale());
  freeplacesCol.setEscapeHtml(EscapeMode.none);
  groupListCtr.addColumnDescriptor(freeplacesCol);
  groupListCtr.addColumnDescriptor(new DefaultColumnDescriptor(Cols.waitingListCount.i18n(),Cols.waitingListCount.ordinal(),null,getLocale()));
  groupListCtr.addColumnDescriptor(new StaticColumnDescriptor(TABLE_ACTION_SELECT,""String_Node_Str"",translate(""String_Node_Str"")));
  return 10;
}"
69728,"/** 
 * Build fail resprocessing: Adjust score to 0 (if single correct mode)  and set hints, solutions and fail feedback when any blank is answered  wrong
 * @param resprocessingXML
 * @param isSingleCorrect
 */
private void buildRespcondition_fail(Element resprocessingXML,boolean isSingleCorrect){
  Element respcondition_fail=resprocessingXML.addElement(""String_Node_Str"");
  respcondition_fail.addAttribute(""String_Node_Str"",""String_Node_Str"");
  respcondition_fail.addAttribute(""String_Node_Str"",""String_Node_Str"");
  Element conditionvar=respcondition_fail.addElement(""String_Node_Str"");
  Element or=conditionvar.addElement(""String_Node_Str"");
  for (Iterator i=getResponses().iterator(); i.hasNext(); ) {
    FIBResponse tmpResponse=(FIBResponse)i.next();
    if (!tmpResponse.getType().equals(FIBResponse.TYPE_BLANK)) {
      continue;
    }
    String[] correctFIBs=tmpResponse.getCorrectBlank().split(""String_Node_Str"");
    Element not=or.addElement(""String_Node_Str"");
    Element orVal=not.addElement(""String_Node_Str"");
    for (int j=0; j < correctFIBs.length; j++) {
      String correctFIB=correctFIBs[j];
      if (correctFIB.length() > 0) {
        Element varequal=orVal.addElement(""String_Node_Str"");
        varequal.addAttribute(""String_Node_Str"",tmpResponse.getIdent());
        varequal.addAttribute(""String_Node_Str"",tmpResponse.getCaseSensitive());
        varequal.addCDATA(correctFIB);
      }
    }
  }
  if (isSingleCorrect) {
    Element setvar=respcondition_fail.addElement(""String_Node_Str"");
    setvar.addAttribute(""String_Node_Str"",""String_Node_Str"");
    setvar.addAttribute(""String_Node_Str"",""String_Node_Str"");
    setvar.addText(""String_Node_Str"");
  }
  QTIEditHelper.addFeedbackFail(respcondition_fail);
  QTIEditHelper.addFeedbackHint(respcondition_fail);
  QTIEditHelper.addFeedbackSolution(respcondition_fail);
  if (or.element(""String_Node_Str"") == null)   resprocessingXML.remove(respcondition_fail);
}","/** 
 * Build fail resprocessing: Adjust score to 0 (if single correct mode)  and set hints, solutions and fail feedback when any blank is answered  wrong
 * @param resprocessingXML
 * @param isSingleCorrect
 */
private void buildRespcondition_fail(Element resprocessingXML,boolean isSingleCorrect){
  Element respcondition_fail=resprocessingXML.addElement(""String_Node_Str"");
  respcondition_fail.addAttribute(""String_Node_Str"",""String_Node_Str"");
  respcondition_fail.addAttribute(""String_Node_Str"",""String_Node_Str"");
  Element conditionvar=respcondition_fail.addElement(""String_Node_Str"");
  Element or=conditionvar.addElement(""String_Node_Str"");
  for (Iterator<Response> i=getResponses().iterator(); i.hasNext(); ) {
    FIBResponse tmpResponse=(FIBResponse)i.next();
    if (!tmpResponse.getType().equals(FIBResponse.TYPE_BLANK)) {
      continue;
    }
    String[] correctFIBs=tmpResponse.getCorrectBlank().split(""String_Node_Str"");
    if (correctFIBs.length > 1) {
      Element not=or.addElement(""String_Node_Str"");
      Element orVal=not.addElement(""String_Node_Str"");
      for (int j=0; j < correctFIBs.length; j++) {
        String correctFIB=correctFIBs[j];
        if (correctFIB.length() > 0) {
          Element varequal=orVal.addElement(""String_Node_Str"");
          varequal.addAttribute(""String_Node_Str"",tmpResponse.getIdent());
          varequal.addAttribute(""String_Node_Str"",tmpResponse.getCaseSensitive());
          varequal.addCDATA(correctFIB);
        }
      }
    }
  }
  if (isSingleCorrect) {
    Element setvar=respcondition_fail.addElement(""String_Node_Str"");
    setvar.addAttribute(""String_Node_Str"",""String_Node_Str"");
    setvar.addAttribute(""String_Node_Str"",""String_Node_Str"");
    setvar.addText(""String_Node_Str"");
  }
  QTIEditHelper.addFeedbackFail(respcondition_fail);
  QTIEditHelper.addFeedbackHint(respcondition_fail);
  QTIEditHelper.addFeedbackSolution(respcondition_fail);
  if (or.element(""String_Node_Str"") == null)   resprocessingXML.remove(respcondition_fail);
}"
69729,"private void update(){
  enableMenu.setVisible(displayMenu.isSelected(0));
  menuRenderOptions.setVisible(displayMenu.isSelected(0));
  if (!limitAttempts.isSelected(0)) {
    attempts.setIntValue(0);
  }
  attempts.setVisible(limitAttempts.isVisible() && limitAttempts.isSelected(0));
  attempts.setMandatory(attempts.isVisible());
  attempts.clearError();
  summary.setVisible(showResultsAfterFinishTest.isSelected(0) || showResultsOnHomePage.isSelected(0));
  showResultsDateDependentButton.setVisible(showResultsOnHomePage.isSelected(0));
  if (!startDateElement.isVisible()) {
    startDateElement.setValue(""String_Node_Str"");
  }
  startDateElement.clearError();
  startDateElement.setVisible(showResultsDateDependentButton.isVisible() && showResultsDateDependentButton.isSelected(0));
  endDateElement.clearError();
  if (!endDateElement.isVisible())   endDateElement.setValue(""String_Node_Str"");
  endDateElement.setVisible(startDateElement.isVisible());
}","private void update(){
  enableMenu.setVisible(displayMenu.isSelected(0));
  menuRenderOptions.setVisible(displayMenu.isSelected(0));
  if (!limitAttempts.isSelected(0)) {
    attempts.setIntValue(0);
  }
  attempts.setVisible(limitAttempts.isVisible() && limitAttempts.isSelected(0));
  attempts.setMandatory(attempts.isVisible());
  attempts.clearError();
  summary.setVisible(showResultsAfterFinishTest.isSelected(0) || showResultsOnHomePage.isSelected(0));
  showResultsDateDependentButton.setVisible(showResultsOnHomePage.isSelected(0));
  if (!startDateElement.isVisible()) {
    startDateElement.setValue(""String_Node_Str"");
  }
  startDateElement.clearError();
  startDateElement.setVisible(showResultsDateDependentButton.isVisible() && showResultsDateDependentButton.isSelected(0));
  endDateElement.clearError();
  if (!endDateElement.isVisible())   endDateElement.setValue(""String_Node_Str"");
  endDateElement.setVisible(startDateElement.isVisible());
  flc.setDirty(true);
}"
69730,"/** 
 * @see org.olat.core.gui.control.generic.dtabs.DTabs#addDTab(org.olat.core.gui.control.generic.dtabs.DTab)
 */
public boolean addDTab(UserRequest ureq,DTab dt){
  if (isDisposed()) {
    return false;
  }
  DTab old=getDTab(dt.getOLATResourceable());
  if (old != null) {
    return true;
  }
synchronized (dtabs) {
    dtabs.add(dt);
    dtabsLinkNames.add(Integer.toString(dtabCreateCounter));
    Link link=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    link.setCustomDisplayText(((DTabImpl)dt).getNavElement().getTitle());
    link.setTitle(dt.getTitle());
    link.setUserObject(dt);
    link.setAccessKey(""String_Node_Str"");
    Link calink=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    calink.setCustomEnabledLinkCSS(""String_Node_Str"");
    calink.setTitle(translate(""String_Node_Str""));
    calink.setUserObject(dt);
    Link cplink=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    cplink.setCustomEnabledLinkCSS(""String_Node_Str"");
    cplink.setTitle(translate(""String_Node_Str""));
    cplink.setUserObject(dt);
    Controller dtabCtr=dt.getController();
    dtabCtr.addControllerListener(this);
    updateBusinessPath(ureq,dt);
    dtabsControllers.add(dtabCtr);
    dtabCreateCounter++;
  }
  return true;
}","/** 
 * @see org.olat.core.gui.control.generic.dtabs.DTabs#addDTab(org.olat.core.gui.control.generic.dtabs.DTab)
 */
public boolean addDTab(UserRequest ureq,DTab dt){
  if (isDisposed()) {
    return false;
  }
  DTab old=getDTab(dt.getOLATResourceable());
  if (old != null) {
    return true;
  }
synchronized (dtabs) {
    dtabs.add(dt);
    dtabsLinkNames.add(Integer.toString(dtabCreateCounter));
    Link link=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    link.setCustomDisplayText(StringHelper.escapeHtml(dt.getNavElement().getTitle()));
    link.setTitle(dt.getTitle());
    link.setUserObject(dt);
    link.setAccessKey(""String_Node_Str"");
    Link calink=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    calink.setCustomEnabledLinkCSS(""String_Node_Str"");
    calink.setTitle(translate(""String_Node_Str""));
    calink.setUserObject(dt);
    Link cplink=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    cplink.setCustomEnabledLinkCSS(""String_Node_Str"");
    cplink.setTitle(translate(""String_Node_Str""));
    cplink.setUserObject(dt);
    Controller dtabCtr=dt.getController();
    dtabCtr.addControllerListener(this);
    updateBusinessPath(ureq,dt);
    dtabsControllers.add(dtabCtr);
    dtabCreateCounter++;
  }
  return true;
}"
69731,"/** 
 * @see org.olat.core.gui.control.generic.dtabs.DTabs#createDTab(org.olat.core.id.OLATResourceable
	 *      java.lang.String)
 */
public DTab createDTab(OLATResourceable ores,OLATResourceable repoOres,String title){
  if (dtabs.size() >= getMaxTabs()) {
    getWindowControl().setError(translate(""String_Node_Str""));
    return null;
  }
  DTabImpl dt=new DTabImpl(ores,repoOres,StringHelper.escapeHtml(title),getWindowControl());
  return dt;
}","/** 
 * @see org.olat.core.gui.control.generic.dtabs.DTabs#createDTab(org.olat.core.id.OLATResourceable
	 *      java.lang.String)
 */
public DTab createDTab(OLATResourceable ores,OLATResourceable repoOres,String title){
  if (dtabs.size() >= getMaxTabs()) {
    getWindowControl().setError(translate(""String_Node_Str""));
    return null;
  }
  DTabImpl dt=new DTabImpl(ores,repoOres,title,getWindowControl());
  return dt;
}"
69732,"private void renderTinyMCE_4(StringOutput sb,String domID,RichTextElementComponent teC,URLBuilder ubu){
  RichTextElementImpl te=teC.getRichTextElementImpl();
  RichTextConfiguration config=te.getEditorConfiguration();
  List<String> onInit=config.getOnInit();
  renderTextarea(sb,domID + ""String_Node_Str"",teC);
  StringOutput configurations=new StringOutput();
  config.appendConfigToTinyJSArray_4(configurations);
  StringOutput baseUrl=new StringOutput();
  StaticMediaDispatcher.renderStaticURI(baseUrl,""String_Node_Str"",false);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(domID).append(""String_Node_Str"");
  ubu.buildURI(sb,null,null);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(domID).append(""String_Node_Str"").append(""String_Node_Str"").append(domID).append(""String_Node_Str"").append(""String_Node_Str"").append(baseUrl.toString()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(onInit.get(0)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(domID).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(configurations).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
}","private void renderTinyMCE_4(StringOutput sb,String domID,RichTextElementComponent teC,URLBuilder ubu){
  RichTextElementImpl te=teC.getRichTextElementImpl();
  RichTextConfiguration config=te.getEditorConfiguration();
  List<String> onInit=config.getOnInit();
  renderTextarea(sb,domID,teC);
  StringOutput configurations=new StringOutput();
  config.appendConfigToTinyJSArray_4(configurations);
  StringOutput baseUrl=new StringOutput();
  StaticMediaDispatcher.renderStaticURI(baseUrl,""String_Node_Str"",false);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(domID).append(""String_Node_Str"");
  ubu.buildURI(sb,null,null);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + te.getRootForm().getDispatchFieldId() + ""String_Node_Str""+ domID+ ""String_Node_Str"");
  sb.append(""String_Node_Str"").append(domID).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(domID).append(""String_Node_Str"").append(""String_Node_Str"").append(domID).append(""String_Node_Str"").append(""String_Node_Str"").append(baseUrl.toString()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(onInit.get(0).replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(domID).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(configurations).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
}"
69733,"@Override protected void formOK(UserRequest ureq){
  String searchValue=getSearchValue(ureq);
  if (StringHelper.containsNonWhitespace(searchValue)) {
    if (StringHelper.isLong(searchValue)) {
      doSelect(ureq);
    }
 else     if (searchValue.length() >= 3) {
      Map<String,String> userProperties=new HashMap<String,String>();
      userProperties.put(UserConstants.FIRSTNAME,searchValue);
      userProperties.put(UserConstants.LASTNAME,searchValue);
      userProperties.put(UserConstants.EMAIL,searchValue);
      List<Identity> res=searchUsers(searchValue,userProperties,false);
      if (res.size() == 1) {
        Identity chosenIdent=res.get(0);
        fireEvent(ureq,new SingleIdentityChosenEvent(chosenIdent));
      }
 else       if (res.size() > 1) {
        tableEl.reset();
        userTableModel.setObjects(wrapIdentities(res));
      }
    }
  }
 else {
    if (validateForm(ureq)) {
      doSearch();
    }
  }
}","@Override protected void formOK(UserRequest ureq){
  String searchValue=getSearchValue(ureq);
  if (StringHelper.containsNonWhitespace(searchValue)) {
    if (StringHelper.isLong(searchValue)) {
      doFireSelection(ureq,Collections.singletonList(searchValue));
    }
 else     if (searchValue.length() >= 3) {
      Map<String,String> userProperties=new HashMap<String,String>();
      userProperties.put(UserConstants.FIRSTNAME,searchValue);
      userProperties.put(UserConstants.LASTNAME,searchValue);
      userProperties.put(UserConstants.EMAIL,searchValue);
      List<Identity> res=searchUsers(searchValue,userProperties,false);
      if (res.size() == 1) {
        Identity chosenIdent=res.get(0);
        fireEvent(ureq,new SingleIdentityChosenEvent(chosenIdent));
      }
 else       if (res.size() > 1) {
        tableEl.reset();
        userTableModel.setObjects(wrapIdentities(res));
      }
    }
  }
 else {
    if (validateForm(ureq)) {
      doSearch();
    }
  }
}"
69734,"@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (source == this.disclaimerFormController) {
    if (event == event.CANCELLED_EVENT) {
      fireEvent(ureq,Event.CANCELLED_EVENT);
    }
 else     if (event == Event.DONE_EVENT) {
      boolean acceptCheckboxChecked=(disclaimerFormController.acceptCheckbox != null) ? (disclaimerFormController.acceptCheckbox.isSelected(0)) : false;
      boolean additionalCheckboxConfigured=CoreSpringFactory.getImpl(RegistrationModule.class).isDisclaimerAdditionalCheckbox();
      boolean additionalCheckboxChecked=(disclaimerFormController.additionalCheckbox != null) ? (disclaimerFormController.additionalCheckbox.isSelected(0)) : false;
      if (!additionalCheckboxConfigured) {
        if (acceptCheckboxChecked) {
          fireEvent(ureq,Event.DONE_EVENT);
        }
 else {
          showError(SR_ERROR_DISCLAIMER_CHECKBOX);
        }
      }
 else {
        if (acceptCheckboxChecked && additionalCheckboxChecked) {
          fireEvent(ureq,Event.DONE_EVENT);
        }
 else {
          showError(SR_ERROR_DISCLAIMER_CHECKBOXES);
        }
      }
    }
  }
}","@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (source == this.disclaimerFormController) {
    if (event == Event.CANCELLED_EVENT) {
      fireEvent(ureq,Event.CANCELLED_EVENT);
    }
 else     if (event == Event.DONE_EVENT) {
      boolean acceptCheckboxChecked=(disclaimerFormController.acceptCheckbox != null) ? (disclaimerFormController.acceptCheckbox.isSelected(0)) : false;
      boolean additionalCheckboxConfigured=CoreSpringFactory.getImpl(RegistrationModule.class).isDisclaimerAdditionalCheckbox();
      boolean additionalCheckboxChecked=(disclaimerFormController.additionalCheckbox != null) ? (disclaimerFormController.additionalCheckbox.isSelected(0)) : false;
      if (!additionalCheckboxConfigured) {
        if (acceptCheckboxChecked) {
          fireEvent(ureq,Event.DONE_EVENT);
        }
 else {
          showError(SR_ERROR_DISCLAIMER_CHECKBOX);
        }
      }
 else {
        if (acceptCheckboxChecked && additionalCheckboxChecked) {
          fireEvent(ureq,Event.DONE_EVENT);
        }
 else {
          showError(SR_ERROR_DISCLAIMER_CHECKBOXES);
        }
      }
    }
  }
}"
69735,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  acceptCheckbox=uifactory.addCheckboxesVertical(ACKNOWLEDGE_CHECKBOX_NAME,null,formLayout,new String[]{DCL_CHECKBOX_KEY},new String[]{translate(NLS_DISCLAIMER_ACKNOWLEDGED)},null,1);
  acceptCheckbox.setMandatory(false);
  acceptCheckbox.select(DCL_CHECKBOX_KEY,readOnly);
  if (CoreSpringFactory.getImpl(RegistrationModule.class).isDisclaimerAdditionalCheckbox()) {
    String additionalCheckboxText=translate(""String_Node_Str"");
    if (additionalCheckboxText != null) {
      additionalCheckbox=uifactory.addCheckboxesVertical(ADDITIONAL_CHECKBOX_NAME,null,formLayout,new String[]{DCL_CHECKBOX_KEY2},new String[]{additionalCheckboxText},null,1);
      additionalCheckbox.select(DCL_CHECKBOX_KEY2,readOnly);
    }
  }
  if (readOnly) {
    formLayout.setEnabled(!readOnly);
  }
 else {
    final FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
    formLayout.add(buttonLayout);
    buttonLayout.setElementCssClass(""String_Node_Str"");
    uifactory.addFormSubmitButton(DCL_ACCEPT,NLS_DISCLAIMER_OK,buttonLayout);
    uifactory.addFormCancelButton(NLS_DISCLAIMER_NOK,buttonLayout,ureq,getWindowControl());
  }
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  acceptCheckbox=uifactory.addCheckboxesVertical(ACKNOWLEDGE_CHECKBOX_NAME,null,formLayout,new String[]{DCL_CHECKBOX_KEY},new String[]{translate(NLS_DISCLAIMER_ACKNOWLEDGED)},null,1);
  acceptCheckbox.setEscapeHtml(false);
  acceptCheckbox.setMandatory(false);
  acceptCheckbox.select(DCL_CHECKBOX_KEY,readOnly);
  if (CoreSpringFactory.getImpl(RegistrationModule.class).isDisclaimerAdditionalCheckbox()) {
    String additionalCheckboxText=translate(""String_Node_Str"");
    if (additionalCheckboxText != null) {
      additionalCheckbox=uifactory.addCheckboxesVertical(ADDITIONAL_CHECKBOX_NAME,null,formLayout,new String[]{DCL_CHECKBOX_KEY2},new String[]{additionalCheckboxText},null,1);
      additionalCheckbox.setEscapeHtml(false);
      additionalCheckbox.select(DCL_CHECKBOX_KEY2,readOnly);
    }
  }
  if (readOnly) {
    formLayout.setEnabled(!readOnly);
  }
 else {
    final FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
    formLayout.add(buttonLayout);
    buttonLayout.setElementCssClass(""String_Node_Str"");
    uifactory.addFormSubmitButton(DCL_ACCEPT,NLS_DISCLAIMER_OK,buttonLayout);
    uifactory.addFormCancelButton(NLS_DISCLAIMER_NOK,buttonLayout,ureq,getWindowControl());
  }
}"
69736,"public SystemAdminMainController(UserRequest ureq,WindowControl wControl){
  super(ureq,wControl);
  init(ureq);
  addCssClassToMain(""String_Node_Str"");
}","public SystemAdminMainController(UserRequest ureq,WindowControl wControl){
  super(ureq,wControl);
  init(ureq);
  getMenuTree().setExpandSelectedNode(false);
  addCssClassToMain(""String_Node_Str"");
}"
69737,"@Override protected void event(UserRequest ureq,Component source,Event event){
  if (source.equals(backLink)) {
    if (stack.size() > 1) {
      source=stack.get(stack.size() - 2);
    }
  }
  if (stack.contains(source)) {
    popController(source);
  }
 else   if (source == olatMenuTree) {
    if (event.getCommand().equals(MenuTree.COMMAND_TREENODE_CLICKED)) {
      TreeNode selTreeNode=olatMenuTree.getSelectedNode();
      removeAsListenerAndDispose(contentCtr);
      Object uobject=selTreeNode.getUserObject();
      TreeNode delegatee=selTreeNode.getDelegate();
      if (delegatee != null) {
        olatMenuTree.setSelectedNode(delegatee);
      }
      contentCtr=getContentCtr(uobject,ureq);
      listenTo(contentCtr);
      Component resComp=contentCtr.getInitialComponent();
      content.setContent(resComp);
      addToHistory(ureq,contentCtr);
    }
 else {
      content.setContent(null);
    }
  }
 else {
    logWarn(""String_Node_Str"" + event.getCommand(),null);
  }
}","@Override protected void event(UserRequest ureq,Component source,Event event){
  if (source.equals(backLink)) {
    if (stack.size() > 1) {
      source=stack.get(stack.size() - 2);
    }
  }
  if (stack.contains(source)) {
    popController(source);
  }
 else   if (source == olatMenuTree) {
    if (event instanceof TreeEvent && event.getCommand().equals(MenuTree.COMMAND_TREENODE_CLICKED)) {
      TreeEvent te=(TreeEvent)event;
      if (te.getSubCommand() != null) {
      }
 else {
        TreeNode selTreeNode=olatMenuTree.getSelectedNode();
        removeAsListenerAndDispose(contentCtr);
        Object uobject=selTreeNode.getUserObject();
        TreeNode delegatee=selTreeNode.getDelegate();
        if (delegatee != null) {
          olatMenuTree.setSelectedNode(delegatee);
        }
        contentCtr=getContentCtr(uobject,ureq);
        listenTo(contentCtr);
        Component resComp=contentCtr.getInitialComponent();
        content.setContent(resComp);
        addToHistory(ureq,contentCtr);
      }
    }
 else {
      content.setContent(null);
    }
  }
 else {
    logWarn(""String_Node_Str"" + event.getCommand(),null);
  }
}"
69738,"/** 
 * @see org.olat.core.gui.components.form.flexible.impl.FormBasicController#initForm(org.olat.core.gui.components.form.flexible.FormItemContainer,org.olat.core.gui.control.Controller,org.olat.core.gui.UserRequest)
 */
@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormDescription(""String_Node_Str"");
  search=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",100,""String_Node_Str"",formLayout);
  if (isUsedInStepWizzard()) {
    searchLink=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
  }
 else {
    searchButton=uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
    uifactory.addSpacerElement(""String_Node_Str"",formLayout,false);
  }
  errorComp=uifactory.createSimpleErrorText(""String_Node_Str"",""String_Node_Str"");
  formLayout.add(errorComp);
  tableCont=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),velocity_root + ""String_Node_Str"");
  tableCont.setRootForm(mainForm);
  formLayout.add(tableCont);
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.groupName.i18n(),Cols.groupName.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.description.i18n(),Cols.description.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.courses.i18n(),Cols.courses.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.tutor.i18n(),Cols.tutor.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.participant.i18n(),Cols.participant.ordinal()));
  tableDataModel=new GroupTableDataModel(Collections.<GroupWrapper>emptyList(),tableColumnModel);
  FlexiTableElement table=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",tableDataModel,tableCont);
  tableCont.add(""String_Node_Str"",table);
  if (!isUsedInStepWizzard()) {
    saveLink=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
  }
}","/** 
 * @see org.olat.core.gui.components.form.flexible.impl.FormBasicController#initForm(org.olat.core.gui.components.form.flexible.FormItemContainer,org.olat.core.gui.control.Controller,org.olat.core.gui.UserRequest)
 */
@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormDescription(""String_Node_Str"");
  search=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",100,""String_Node_Str"",formLayout);
  if (isUsedInStepWizzard()) {
    searchLink=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
  }
 else {
    searchButton=uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
    uifactory.addSpacerElement(""String_Node_Str"",formLayout,false);
  }
  errorComp=uifactory.createSimpleErrorText(""String_Node_Str"",""String_Node_Str"");
  formLayout.add(errorComp);
  tableCont=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),velocity_root + ""String_Node_Str"");
  tableCont.setRootForm(mainForm);
  formLayout.add(tableCont);
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.groupName.i18n(),Cols.groupName.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.description.i18n(),Cols.description.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.courses.i18n(),Cols.courses.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.tutor.i18n(),Cols.tutor.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.participant.i18n(),Cols.participant.ordinal()));
  tableDataModel=new GroupTableDataModel(Collections.<GroupWrapper>emptyList(),tableColumnModel);
  table=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",tableDataModel,tableCont);
  tableCont.add(""String_Node_Str"",table);
  if (!isUsedInStepWizzard()) {
    saveLink=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
  }
}"
69739,"/** 
 * Perform a search for the given search value in the search result providers and clear any GUI errors that might be on the page
 * @param searchValue
 * @param ureq
 */
private void doSearchGroups(String searchValue,UserRequest ureq){
  if (StringHelper.containsNonWhitespace(searchValue)) {
    SearchBusinessGroupParams param1s=new SearchBusinessGroupParams();
    param1s.setNameOrDesc(searchValue);
    List<BusinessGroup> group1s=businessGroupService.findBusinessGroups(param1s,null,0,-1);
    SearchBusinessGroupParams param2s=new SearchBusinessGroupParams();
    param2s.setCourseTitle(searchValue);
    List<BusinessGroup> group2s=businessGroupService.findBusinessGroups(param2s,null,0,-1);
    List<Long> groupKeysWithRelations=PersistenceHelper.toKeys(group1s);
    groupKeysWithRelations.addAll(PersistenceHelper.toKeys(group2s));
    List<BGRepositoryEntryRelation> resources=businessGroupService.findRelationToRepositoryEntries(groupKeysWithRelations,0,-1);
    List<GroupWrapper> groups=new ArrayList<GroupWrapper>();
    for (    BusinessGroup group : group1s) {
      StringBuilder sb=new StringBuilder();
      for (      BGRepositoryEntryRelation resource : resources) {
        if (resource.getGroupKey().equals(group.getKey())) {
          if (sb.length() > 0)           sb.append(""String_Node_Str"");
          sb.append(resource.getRepositoryEntryDisplayName());
        }
      }
      GroupWrapper wrapper=new GroupWrapper(group,sb.toString());
      wrapper.setTutor(createSelection(""String_Node_Str"" + group.getKey()));
      wrapper.setParticipant(createSelection(""String_Node_Str"" + group.getKey()));
      groups.add(wrapper);
    }
    tableDataModel.setObjects(groups);
    errorComp.clearError();
  }
}","/** 
 * Perform a search for the given search value in the search result providers and clear any GUI errors that might be on the page
 * @param searchValue
 * @param ureq
 */
private void doSearchGroups(String searchValue,UserRequest ureq){
  if (StringHelper.containsNonWhitespace(searchValue)) {
    SearchBusinessGroupParams param1s=new SearchBusinessGroupParams();
    param1s.setNameOrDesc(searchValue);
    List<BusinessGroup> group1s=businessGroupService.findBusinessGroups(param1s,null,0,-1);
    SearchBusinessGroupParams param2s=new SearchBusinessGroupParams();
    param2s.setCourseTitle(searchValue);
    List<BusinessGroup> group2s=businessGroupService.findBusinessGroups(param2s,null,0,-1);
    List<Long> groupKeysWithRelations=PersistenceHelper.toKeys(group1s);
    groupKeysWithRelations.addAll(PersistenceHelper.toKeys(group2s));
    List<BGRepositoryEntryRelation> resources=businessGroupService.findRelationToRepositoryEntries(groupKeysWithRelations,0,-1);
    List<GroupWrapper> groups=new ArrayList<GroupWrapper>();
    for (    BusinessGroup group : group1s) {
      StringBuilder sb=new StringBuilder();
      for (      BGRepositoryEntryRelation resource : resources) {
        if (resource.getGroupKey().equals(group.getKey())) {
          if (sb.length() > 0)           sb.append(""String_Node_Str"");
          sb.append(resource.getRepositoryEntryDisplayName());
        }
      }
      GroupWrapper wrapper=new GroupWrapper(group,sb.toString());
      wrapper.setTutor(createSelection(""String_Node_Str"" + group.getKey()));
      wrapper.setParticipant(createSelection(""String_Node_Str"" + group.getKey()));
      groups.add(wrapper);
    }
    table.reset();
    tableDataModel.setObjects(groups);
    errorComp.clearError();
  }
}"
69740,"/** 
 * Return the nodes
 * @param ce
 * @param firstResult
 * @param maxResults
 * @param orderBy
 * @param asc
 * @return
 */
public List<CatalogEntry> getChildrenOf(CatalogEntry ce,int firstResult,int maxResults,CatalogEntry.OrderBy orderBy,boolean asc){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(CatalogEntryImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (orderBy != null) {
    sb.append(""String_Node_Str"").append(orderBy.name()).append(asc ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  TypedQuery<CatalogEntry> dbQuery=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),CatalogEntry.class).setParameter(""String_Node_Str"",ce.getKey()).setFirstResult(0);
  if (maxResults > 0) {
    dbQuery.setMaxResults(maxResults);
  }
  List<CatalogEntry> entries=dbQuery.getResultList();
  return entries;
}","/** 
 * Return the nodes
 * @param ce
 * @param firstResult
 * @param maxResults
 * @param orderBy
 * @param asc
 * @return
 */
public List<CatalogEntry> getChildrenOf(CatalogEntry ce,int firstResult,int maxResults,CatalogEntry.OrderBy orderBy,boolean asc){
  if (ce == null) {
    return Collections.emptyList();
  }
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(CatalogEntryImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (orderBy != null) {
    sb.append(""String_Node_Str"").append(orderBy.name()).append(asc ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  TypedQuery<CatalogEntry> dbQuery=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),CatalogEntry.class).setParameter(""String_Node_Str"",ce.getKey()).setFirstResult(0);
  if (maxResults > 0) {
    dbQuery.setMaxResults(maxResults);
  }
  List<CatalogEntry> entries=dbQuery.getResultList();
  return entries;
}"
69741,"/** 
 * Create and add a node to the tree
 * @param entry
 * @return 
 */
private GenericTreeNode addNode(CatalogEntry entry){
  GenericTreeNode node=entryMap.get(entry.getKey());
  if (node == null && entry.getType() == CatalogEntry.TYPE_NODE) {
    if (entry.getParent() != null) {
      node=entryMap.get(entry.getParent().getKey());
      if (node != null) {
        GenericTreeNode build=buildNode(entry);
        node.addChild(build);
        build.setParent(node);
      }
 else {
        addMissingNodes(entry);
      }
    }
  }
  return node;
}","/** 
 * Create and add a node to the tree
 * @param entry
 * @return 
 */
private GenericTreeNode addNode(CatalogEntry entry){
  GenericTreeNode node=entryMap.get(entry.getKey());
  if (node == null && entry.getType() == CatalogEntry.TYPE_NODE) {
    if (entry.getParent() != null) {
      node=entryMap.get(entry.getParent().getKey());
      if (node != null) {
        GenericTreeNode build=buildNode(entry);
        node.addChild(build);
        build.setParent(node);
      }
 else {
        addMissingNodes(entry);
      }
    }
 else {
      node=buildNode(entry);
    }
  }
  return node;
}"
69742,"private void updateEnabled(){
  boolean inherit=(inheritEl.isVisible() && inheritEl.isSelected(0));
  encodingContentEl.setEnabled(!inherit);
  encodingJSEl.setEnabled(!inherit);
  standardModeEl.setEnabled(!inherit);
  if (inherit) {
    jsOptionEl.setEnabled(false);
    cssOptionEl.setEnabled(false);
    heightEl.setEnabled(false);
    glossarEl.setEnabled(false);
  }
 else {
    boolean standard=standardModeEl.isSelected(0);
    if (!standard) {
      jsOptionEl.select(jsKeys[1],true);
      cssOptionEl.select(cssKeys[1],true);
      heightEl.select(keys[0],true);
      glossarEl.select(""String_Node_Str"",true);
    }
    boolean jQueryEnabled=jsOptionEl.isSelected(1);
    jsOptionEl.setEnabled(!standard);
    cssOptionEl.setEnabled(!standard);
    heightEl.setEnabled(!standard);
    glossarEl.setEnabled(!standard && jQueryEnabled);
  }
}","private void updateEnabled(){
  boolean inherit=(inheritEl.isVisible() && inheritEl.isSelected(0));
  encodingContentEl.setEnabled(!inherit);
  encodingJSEl.setEnabled(!inherit);
  standardModeEl.setEnabled(!inherit);
  if (inherit) {
    jsOptionEl.setEnabled(false);
    cssOptionEl.setEnabled(false);
    heightEl.setEnabled(false);
    glossarEl.setEnabled(false);
  }
 else {
    boolean standard=standardModeEl.isSelected(0);
    boolean jQueryEnabled=jsOptionEl.isSelected(1);
    jsOptionEl.setEnabled(!standard);
    cssOptionEl.setEnabled(!standard);
    heightEl.setEnabled(!standard);
    glossarEl.setEnabled(!standard && jQueryEnabled);
  }
}"
69743,"/** 
 * Constructor for the item edit controller. Use the initialzeI18nitemAsCurrentItem() to set the current item from the given i18nItems list to a specific value after constructing the object
 * @param ureq
 * @param control
 * @param i18nItems List of i18n items that should be displayed. List can beempty but must NOT be NULL.
 * @param referenceLocale The locale used as reference
 * @param customizingMode true: edit overlay customization files and notlanguage files; false: edit language files
 */
public TranslationToolI18nItemEditCrumbController(UserRequest ureq,WindowControl control,List<I18nItem> i18nItems,Locale referenceLocale,boolean customizingMode){
  super(ureq,control,""String_Node_Str"");
  this.customizingMode=customizingMode;
  this.i18nItems=i18nItems;
  this.referenceLocale=referenceLocale;
  if (i18nItems.size() > 0) {
    currentItem=i18nItems.get(currentItemPosition);
    initForm(ureq);
  }
 else {
    showError(""String_Node_Str"");
    getInitialComponent().setVisible(false);
  }
}","/** 
 * Constructor for the item edit controller. Use the initialzeI18nitemAsCurrentItem() to set the current item from the given i18nItems list to a specific value after constructing the object
 * @param ureq
 * @param control
 * @param i18nItems List of i18n items that should be displayed. List can beempty but must NOT be NULL.
 * @param referenceLocale The locale used as reference
 * @param customizingMode true: edit overlay customization files and notlanguage files; false: edit language files
 */
public TranslationToolI18nItemEditCrumbController(UserRequest ureq,WindowControl control,List<I18nItem> i18nItems,Locale referenceLocale,boolean customizingMode){
  super(ureq,control,""String_Node_Str"");
  i18nMgr=I18nManager.getInstance();
  this.customizingMode=customizingMode;
  this.i18nItems=i18nItems;
  if (referenceLocale == null) {
    Preferences guiPrefs=ureq.getUserSession().getGuiPreferences();
    List<String> referenceLangs=I18nModule.getTransToolReferenceLanguages();
    String referencePrefs=(String)guiPrefs.get(I18nModule.class,I18nModule.GUI_PREFS_PREFERRED_REFERENCE_LANG,referenceLangs.get(0));
    this.referenceLocale=i18nMgr.getLocaleOrNull(referencePrefs);
    if (this.referenceLocale == null) {
      this.referenceLocale=i18nMgr.getLocaleOrDefault(""String_Node_Str"");
    }
  }
 else {
    this.referenceLocale=referenceLocale;
  }
  if (i18nItems.size() > 0) {
    currentItem=i18nItems.get(currentItemPosition);
    initForm(ureq);
  }
 else {
    showError(""String_Node_Str"");
    getInitialComponent().setVisible(false);
  }
}"
69744,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FormUIFactory formFactory=FormUIFactory.getInstance();
  I18nManager i18nMgr=I18nManager.getInstance();
  Preferences guiPrefs=ureq.getUserSession().getGuiPreferences();
  this.flc.contextPut(""String_Node_Str"",referenceLocale.toString());
  this.flc.contextPut(""String_Node_Str"",i18nMgr.getLanguageTranslated(referenceLocale.toString(),false));
  List<String> bundlesList=new ArrayList<String>();
  List<String> keysList=new ArrayList<String>();
  for (  I18nItem item : i18nItems) {
    if (!bundlesList.contains(item.getBundleName())) {
      bundlesList.add(item.getBundleName());
    }
    if (currentItem.getBundleName().equals(item.getBundleName())) {
      keysList.add(item.getKey());
    }
  }
  String[] bundlesListArray=ArrayHelper.toArray(bundlesList);
  String[] keysListArray=ArrayHelper.toArray(keysList);
  bundlesSelection=formFactory.addDropdownSingleselect(""String_Node_Str"",this.flc,bundlesListArray,bundlesListArray,null);
  bundlesSelection.addActionListener(this,FormEvent.ONCHANGE);
  bundlesSelection.select(currentItem.getBundleName(),true);
  keysSelection=formFactory.addDropdownSingleselect(""String_Node_Str"",this.flc,keysListArray,keysListArray,null);
  keysSelection.addActionListener(this,FormEvent.ONCHANGE);
  keysSelection.select(currentItem.getKey(),true);
  referenceArea=formFactory.addTextAreaElement(""String_Node_Str"",""String_Node_Str"",-1,1,-1,true,null,this.flc);
  referenceArea.setEnabled(false);
  Boolean compareEnabledPrefs=(Boolean)guiPrefs.get(I18nModule.class,I18nModule.GUI_PREFS_COMPARE_LANG_ENABLED,Boolean.FALSE);
  compareArea=formFactory.addTextAreaElement(""String_Node_Str"",""String_Node_Str"",-1,1,-1,true,null,this.flc);
  compareArea.setEnabled(false);
  compareArea.setVisible(compareEnabledPrefs.booleanValue());
  compareSwitch=formFactory.addCheckboxesHorizontal(""String_Node_Str"",null,this.flc,new String[]{KEYS_ENABLED},new String[]{KEYS_EMPTY},null);
  compareSwitch.select(KEYS_ENABLED,compareEnabledPrefs.booleanValue());
  compareSwitch.addActionListener(listener,FormEvent.ONCLICK);
  formLayout.add(compareSwitch);
  this.flc.contextPut(""String_Node_Str"",compareEnabledPrefs);
  Set<String> availableLangKeys=I18nModule.getAvailableLanguageKeys();
  String[] comparelangKeys=ArrayHelper.toArray(availableLangKeys);
  String[] compareLangValues=new String[comparelangKeys.length];
  for (int i=0; i < comparelangKeys.length; i++) {
    String key=comparelangKeys[i];
    String explLang=i18nMgr.getLanguageInEnglish(key,customizingMode);
    String all=explLang;
    if (explLang != null && !explLang.equals(key))     all+=""String_Node_Str"" + key + ""String_Node_Str"";
    compareLangValues[i]=all;
  }
  ArrayHelper.sort(comparelangKeys,compareLangValues,false,true,false);
  String[] compareLangCssClasses=i18nMgr.createLanguageFlagsCssClasses(comparelangKeys,""String_Node_Str"");
  String comparePrefs=(String)guiPrefs.get(I18nModule.class,I18nModule.GUI_PREFS_PREFERRED_COMPARE_LANG,I18nModule.getDefaultLocale().toString());
  compareLocale=i18nMgr.getLocaleOrNull(comparePrefs);
  if (compareLocale == null)   compareLocale=I18nModule.getDefaultLocale();
  compareLangSelection=formFactory.addDropdownSingleselect(""String_Node_Str"",this.flc,comparelangKeys,compareLangValues,compareLangCssClasses);
  compareLangSelection.select(i18nMgr.getLocaleKey(compareLocale),true);
  this.flc.contextPut(""String_Node_Str"",i18nMgr.getLocaleKey(compareLocale));
  compareLangSelection.addActionListener(this,FormEvent.ONCHANGE);
  compareLangSelection.setEnabled(compareEnabledPrefs.booleanValue());
  this.flc.contextPut(""String_Node_Str"",i18nMgr.getLocaleKey(currentItem.getLocale()));
  this.flc.contextPut(""String_Node_Str"",i18nMgr.getLanguageTranslated(i18nMgr.getLocaleKey(currentItem.getLocale()),false));
  targetArea=formFactory.addTextAreaElement(""String_Node_Str"",""String_Node_Str"",-1,1,-1,true,null,this.flc);
  annotationArea=formFactory.addTextAreaElement(""String_Node_Str"",""String_Node_Str"",-1,1,-1,true,null,this.flc);
  progressBarBundle=new ProgressBar(""String_Node_Str"",200,1,bundlesList.size(),translate(""String_Node_Str""));
  progressBarBundle.setPercentagesEnabled(false);
  this.flc.put(""String_Node_Str"",progressBarBundle);
  progressBarKey=new ProgressBar(""String_Node_Str"",200,1,keysList.size(),translate(""String_Node_Str""));
  progressBarKey.setPercentagesEnabled(false);
  this.flc.put(""String_Node_Str"",progressBarKey);
  previousLink=new FormLinkImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.BUTTON);
  formLayout.add(previousLink);
  saveLink=new FormLinkImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.BUTTON);
  formLayout.add(saveLink);
  saveNextLink=new FormLinkImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.BUTTON);
  formLayout.add(saveNextLink);
  nextLink=new FormLinkImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.BUTTON);
  formLayout.add(nextLink);
  initOrUpdateCurrentItem(ureq);
  if (customizingMode) {
    annotationArea.setEnabled(false);
    Locale origLocale=I18nModule.getAllLocales().get(i18nMgr.createOrigianlLocaleKeyForOverlay(currentItem.getLocale()));
    if (origLocale == null) {
      origLocale=currentItem.getLocale();
    }
    String localeKey=i18nMgr.getLocaleKey(origLocale);
    flc.contextPut(""String_Node_Str"",localeKey);
    flc.contextPut(""String_Node_Str"",i18nMgr.getLanguageTranslated(localeKey,true));
  }
  flc.contextPut(""String_Node_Str"",Boolean.valueOf(customizingMode));
  flc.contextPut(""String_Node_Str"",(customizingMode ? ""String_Node_Str"" : ""String_Node_Str""));
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FormUIFactory formFactory=FormUIFactory.getInstance();
  I18nManager i18nMgr=I18nManager.getInstance();
  Preferences guiPrefs=ureq.getUserSession().getGuiPreferences();
  flc.contextPut(""String_Node_Str"",referenceLocale.toString());
  flc.contextPut(""String_Node_Str"",i18nMgr.getLanguageTranslated(referenceLocale.toString(),false));
  List<String> bundlesList=new ArrayList<String>();
  List<String> keysList=new ArrayList<String>();
  for (  I18nItem item : i18nItems) {
    if (!bundlesList.contains(item.getBundleName())) {
      bundlesList.add(item.getBundleName());
    }
    if (currentItem.getBundleName().equals(item.getBundleName())) {
      keysList.add(item.getKey());
    }
  }
  String[] bundlesListArray=ArrayHelper.toArray(bundlesList);
  String[] keysListArray=ArrayHelper.toArray(keysList);
  bundlesSelection=formFactory.addDropdownSingleselect(""String_Node_Str"",this.flc,bundlesListArray,bundlesListArray,null);
  bundlesSelection.addActionListener(this,FormEvent.ONCHANGE);
  bundlesSelection.select(currentItem.getBundleName(),true);
  keysSelection=formFactory.addDropdownSingleselect(""String_Node_Str"",this.flc,keysListArray,keysListArray,null);
  keysSelection.addActionListener(this,FormEvent.ONCHANGE);
  keysSelection.select(currentItem.getKey(),true);
  referenceArea=formFactory.addTextAreaElement(""String_Node_Str"",""String_Node_Str"",-1,1,-1,true,null,this.flc);
  referenceArea.setEnabled(false);
  Boolean compareEnabledPrefs=(Boolean)guiPrefs.get(I18nModule.class,I18nModule.GUI_PREFS_COMPARE_LANG_ENABLED,Boolean.FALSE);
  compareArea=formFactory.addTextAreaElement(""String_Node_Str"",""String_Node_Str"",-1,1,-1,true,null,this.flc);
  compareArea.setEnabled(false);
  compareArea.setVisible(compareEnabledPrefs.booleanValue());
  compareSwitch=formFactory.addCheckboxesHorizontal(""String_Node_Str"",null,this.flc,new String[]{KEYS_ENABLED},new String[]{KEYS_EMPTY},null);
  compareSwitch.select(KEYS_ENABLED,compareEnabledPrefs.booleanValue());
  compareSwitch.addActionListener(listener,FormEvent.ONCLICK);
  formLayout.add(compareSwitch);
  this.flc.contextPut(""String_Node_Str"",compareEnabledPrefs);
  Set<String> availableLangKeys=I18nModule.getAvailableLanguageKeys();
  String[] comparelangKeys=ArrayHelper.toArray(availableLangKeys);
  String[] compareLangValues=new String[comparelangKeys.length];
  for (int i=0; i < comparelangKeys.length; i++) {
    String key=comparelangKeys[i];
    String explLang=i18nMgr.getLanguageInEnglish(key,customizingMode);
    String all=explLang;
    if (explLang != null && !explLang.equals(key))     all+=""String_Node_Str"" + key + ""String_Node_Str"";
    compareLangValues[i]=all;
  }
  ArrayHelper.sort(comparelangKeys,compareLangValues,false,true,false);
  String[] compareLangCssClasses=i18nMgr.createLanguageFlagsCssClasses(comparelangKeys,""String_Node_Str"");
  String comparePrefs=(String)guiPrefs.get(I18nModule.class,I18nModule.GUI_PREFS_PREFERRED_COMPARE_LANG,I18nModule.getDefaultLocale().toString());
  compareLocale=i18nMgr.getLocaleOrNull(comparePrefs);
  if (compareLocale == null)   compareLocale=I18nModule.getDefaultLocale();
  compareLangSelection=formFactory.addDropdownSingleselect(""String_Node_Str"",this.flc,comparelangKeys,compareLangValues,compareLangCssClasses);
  compareLangSelection.select(i18nMgr.getLocaleKey(compareLocale),true);
  this.flc.contextPut(""String_Node_Str"",i18nMgr.getLocaleKey(compareLocale));
  compareLangSelection.addActionListener(this,FormEvent.ONCHANGE);
  compareLangSelection.setEnabled(compareEnabledPrefs.booleanValue());
  this.flc.contextPut(""String_Node_Str"",i18nMgr.getLocaleKey(currentItem.getLocale()));
  this.flc.contextPut(""String_Node_Str"",i18nMgr.getLanguageTranslated(i18nMgr.getLocaleKey(currentItem.getLocale()),false));
  targetArea=formFactory.addTextAreaElement(""String_Node_Str"",""String_Node_Str"",-1,1,-1,true,null,this.flc);
  annotationArea=formFactory.addTextAreaElement(""String_Node_Str"",""String_Node_Str"",-1,1,-1,true,null,this.flc);
  progressBarBundle=new ProgressBar(""String_Node_Str"",200,1,bundlesList.size(),translate(""String_Node_Str""));
  progressBarBundle.setPercentagesEnabled(false);
  this.flc.put(""String_Node_Str"",progressBarBundle);
  progressBarKey=new ProgressBar(""String_Node_Str"",200,1,keysList.size(),translate(""String_Node_Str""));
  progressBarKey.setPercentagesEnabled(false);
  this.flc.put(""String_Node_Str"",progressBarKey);
  previousLink=new FormLinkImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.BUTTON);
  formLayout.add(previousLink);
  saveLink=new FormLinkImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.BUTTON);
  formLayout.add(saveLink);
  saveNextLink=new FormLinkImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.BUTTON);
  formLayout.add(saveNextLink);
  nextLink=new FormLinkImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.BUTTON);
  formLayout.add(nextLink);
  initOrUpdateCurrentItem(ureq);
  if (customizingMode) {
    annotationArea.setEnabled(false);
    Locale origLocale=I18nModule.getAllLocales().get(i18nMgr.createOrigianlLocaleKeyForOverlay(currentItem.getLocale()));
    if (origLocale == null) {
      origLocale=currentItem.getLocale();
    }
    String localeKey=i18nMgr.getLocaleKey(origLocale);
    flc.contextPut(""String_Node_Str"",localeKey);
    flc.contextPut(""String_Node_Str"",i18nMgr.getLanguageTranslated(localeKey,true));
  }
  flc.contextPut(""String_Node_Str"",Boolean.valueOf(customizingMode));
  flc.contextPut(""String_Node_Str"",(customizingMode ? ""String_Node_Str"" : ""String_Node_Str""));
}"
69745,"public ENEditGroupAreaFormController(UserRequest ureq,WindowControl wControl,ModuleConfiguration moduleConfig,CourseEditorEnv cev){
  super(ureq,wControl,null);
  Translator pT=Util.createPackageTranslator(Condition.class,ureq.getLocale(),getTranslator());
  this.setTranslator(pT);
  areaManager=CoreSpringFactory.getImpl(BGAreaManager.class);
  businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
  singleUserEventCenter=ureq.getUserSession().getSingleUserEventCenter();
  groupConfigChangeEventOres=OresHelper.createOLATResourceableType(MultiUserEvent.class);
  singleUserEventCenter.registerFor(this,ureq.getIdentity(),groupConfigChangeEventOres);
  this.moduleConfig=moduleConfig;
  this.cev=cev;
  hasAreas=areaManager.countBGAreasInContext(cev.getCourseGroupManager().getCourseResource()) > 0;
  hasGroups=businessGroupService.countBusinessGroups(null,cev.getCourseGroupManager().getCourseResource()) > 0;
  initForm(ureq);
}","public ENEditGroupAreaFormController(UserRequest ureq,WindowControl wControl,ModuleConfiguration moduleConfig,CourseEditorEnv cev){
  super(ureq,wControl);
  Translator pT=Util.createPackageTranslator(Condition.class,ureq.getLocale(),getTranslator());
  this.setTranslator(pT);
  areaManager=CoreSpringFactory.getImpl(BGAreaManager.class);
  businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
  singleUserEventCenter=ureq.getUserSession().getSingleUserEventCenter();
  groupConfigChangeEventOres=OresHelper.createOLATResourceableType(MultiUserEvent.class);
  singleUserEventCenter.registerFor(this,ureq.getIdentity(),groupConfigChangeEventOres);
  this.moduleConfig=moduleConfig;
  this.cev=cev;
  hasAreas=areaManager.countBGAreasInContext(cev.getCourseGroupManager().getCourseResource()) > 0;
  hasGroups=businessGroupService.countBusinessGroups(null,cev.getCourseGroupManager().getCourseResource()) > 0;
  initForm(ureq);
}"
69746,"private void doSelectControllerTreeNode(UserRequest ureq,TreeNode node,List<ContextEntry> entries,StateEntry state){
  Object uNode=node.getUserObject();
  if (""String_Node_Str"".equals(uNode)) {
    doSelectAdmin(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectAdminStudyFields(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectAdminPools(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectAdminTypes(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectAdminLevels(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectAdminLicenses(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectMyQuestions(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectMarkedQuestions(ureq,entries,state);
  }
 else   if (uNode instanceof Pool) {
    Pool pool=(Pool)uNode;
    doSelectPool(ureq,pool,node,entries,state);
  }
 else   if (uNode instanceof BusinessGroup) {
    BusinessGroup group=(BusinessGroup)uNode;
    doSelectGroup(ureq,group,node,entries,state);
  }
 else   if (uNode instanceof QuestionItemCollection) {
    QuestionItemCollection coll=(QuestionItemCollection)uNode;
    doSelectCollection(ureq,coll,node,entries,state);
  }
}","private void doSelectControllerTreeNode(UserRequest ureq,TreeNode node,List<ContextEntry> entries,StateEntry state){
  Object uNode=node.getUserObject();
  if (""String_Node_Str"".equals(uNode)) {
    doSelectPresentation(ureq);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectAdmin(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectAdminStudyFields(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectAdminPools(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectAdminTypes(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectAdminLevels(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectAdminLicenses(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectMyQuestions(ureq,entries,state);
  }
 else   if (""String_Node_Str"".equals(uNode)) {
    doSelectMarkedQuestions(ureq,entries,state);
  }
 else   if (uNode instanceof Pool) {
    Pool pool=(Pool)uNode;
    doSelectPool(ureq,pool,node,entries,state);
  }
 else   if (uNode instanceof BusinessGroup) {
    BusinessGroup group=(BusinessGroup)uNode;
    doSelectGroup(ureq,group,node,entries,state);
  }
 else   if (uNode instanceof QuestionItemCollection) {
    QuestionItemCollection coll=(QuestionItemCollection)uNode;
    doSelectCollection(ureq,coll,node,entries,state);
  }
}"
69747,"public QuestionPoolMainEditorController(UserRequest ureq,WindowControl wControl){
  super(ureq,wControl);
  roles=ureq.getUserSession().getRoles();
  markManager=CoreSpringFactory.getImpl(MarkManager.class);
  qpoolService=CoreSpringFactory.getImpl(QPoolService.class);
  businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
  menuTree=new MenuTree(""String_Node_Str"");
  menuTree.setTreeModel(buildTreeModel());
  menuTree.setSelectedNode(menuTree.getTreeModel().getRootNode());
  menuTree.setDragEnabled(false);
  menuTree.setDropEnabled(true);
  menuTree.setDropSiblingEnabled(false);
  menuTree.addListener(this);
  menuTree.setRootVisible(false);
  List<String> openNodeIds=new ArrayList<String>(2);
  openNodeIds.add(myNode.getIdent());
  openNodeIds.add(sharesNode.getIdent());
  menuTree.setOpenNodeIds(openNodeIds);
  content=new Panel(""String_Node_Str"");
  columnLayoutCtr=new LayoutMain3ColsController(ureq,getWindowControl(),menuTree,null,content,""String_Node_Str"");
  putInitialPanel(columnLayoutCtr.getInitialComponent());
}","public QuestionPoolMainEditorController(UserRequest ureq,WindowControl wControl){
  super(ureq,wControl);
  roles=ureq.getUserSession().getRoles();
  markManager=CoreSpringFactory.getImpl(MarkManager.class);
  qpoolService=CoreSpringFactory.getImpl(QPoolService.class);
  businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
  menuTree=new MenuTree(""String_Node_Str"");
  menuTree.setTreeModel(buildTreeModel());
  menuTree.setSelectedNode(menuTree.getTreeModel().getRootNode());
  menuTree.setDragEnabled(false);
  menuTree.setDropEnabled(true);
  menuTree.setDropSiblingEnabled(false);
  menuTree.addListener(this);
  menuTree.setRootVisible(false);
  List<String> openNodeIds=new ArrayList<String>(2);
  openNodeIds.add(myNode.getIdent());
  openNodeIds.add(sharesNode.getIdent());
  menuTree.setOpenNodeIds(openNodeIds);
  content=new Panel(""String_Node_Str"");
  columnLayoutCtr=new LayoutMain3ColsController(ureq,getWindowControl(),menuTree,null,content,""String_Node_Str"");
  doSelectPresentation(ureq);
  putInitialPanel(columnLayoutCtr.getInitialComponent());
}"
69748,"private ResultInfos<U> loadDatas(String query,List<String> addQueries,final boolean force,final int firstResult,final int maxResults,SortKey... orderBy){
  if (rows == null) {
    rows=new ArrayList<U>();
  }
  for (int i=rows.size(); i < firstResult; i++) {
    rows.add(null);
  }
  int correctedFirstResult=firstResult;
  int correctMaxResults=maxResults;
  if (!force && rows.size() > 0) {
    correctMaxResults=maxResults <= 0 ? rowCount : maxResults;
    int maxRowsResults=maxResults <= 0 ? rows.size() : maxResults;
    for (int i=firstResult; i < maxRowsResults && i < rows.size(); i++) {
      if (rows.get(i) == null) {
        break;
      }
 else {
        correctedFirstResult++;
        correctMaxResults--;
      }
    }
    if (correctMaxResults == 0) {
      return new DefaultResultInfos<U>(rowCount,rowCount,rows);
    }
  }
  ResultInfos<U> newRows=sourceDelegate.getRows(query,addQueries,correctedFirstResult,correctMaxResults,orderBy);
  if (firstResult == 0) {
    if (newRows.getObjects().size() < correctMaxResults) {
      rowCount=newRows.getObjects().size();
    }
 else {
      rowCount=sourceDelegate.getRowCount();
    }
  }
 else   if (newRows.getCorrectedRowCount() >= 0) {
    rowCount=newRows.getCorrectedRowCount();
  }
  for (int i=0; i < newRows.getObjects().size(); i++) {
    int rowIndex=i + firstResult;
    if (rowIndex < rows.size()) {
      rows.set(rowIndex,newRows.getObjects().get(i));
    }
 else {
      rows.add(newRows.getObjects().get(i));
    }
  }
  return new DefaultResultInfos<U>(newRows.getNextFirstResult(),newRows.getCorrectedRowCount(),rows);
}","private ResultInfos<U> loadDatas(String query,List<String> addQueries,final boolean force,final int firstResult,final int maxResults,SortKey... orderBy){
  if (rows == null) {
    rows=new ArrayList<U>();
  }
  for (int i=rows.size(); i < firstResult; i++) {
    rows.add(null);
  }
  int correctedFirstResult=firstResult;
  int correctMaxResults=maxResults;
  if (!force && rows.size() > 0) {
    correctMaxResults=maxResults <= 0 ? rowCount : maxResults;
    int maxRowsResults=maxResults <= 0 ? rows.size() : maxResults;
    for (int i=firstResult; i < maxRowsResults && i < rows.size(); i++) {
      if (rows.get(i) == null) {
        break;
      }
 else {
        correctedFirstResult++;
        correctMaxResults--;
      }
    }
    if (correctMaxResults == 0) {
      return new DefaultResultInfos<U>(rowCount,rowCount,rows);
    }
  }
  ResultInfos<U> newRows=sourceDelegate.getRows(query,addQueries,correctedFirstResult,correctMaxResults,orderBy);
  if (firstResult == 0) {
    if (newRows.getObjects().size() < correctMaxResults) {
      rowCount=newRows.getObjects().size();
    }
 else     if (newRows.getCorrectedRowCount() >= 0) {
      rowCount=newRows.getCorrectedRowCount();
    }
 else {
      rowCount=sourceDelegate.getRowCount();
    }
  }
 else   if (newRows.getCorrectedRowCount() >= 0) {
    rowCount=newRows.getCorrectedRowCount();
  }
  for (int i=0; i < newRows.getObjects().size(); i++) {
    int rowIndex=i + firstResult;
    if (rowIndex < rows.size()) {
      rows.set(rowIndex,newRows.getObjects().get(i));
    }
 else {
      rows.add(newRows.getObjects().get(i));
    }
  }
  return new DefaultResultInfos<U>(newRows.getNextFirstResult(),newRows.getCorrectedRowCount(),rows);
}"
69749,"/** 
 * @see org.olat.core.gui.components.ComponentRenderer#render(org.olat.core.gui.render.Renderer,org.olat.core.gui.render.StringOutput,org.olat.core.gui.components.Component,org.olat.core.gui.render.URLBuilder,org.olat.core.gui.translator.Translator,org.olat.core.gui.render.RenderResult,java.lang.String[])
 */
@Override public void render(Renderer renderer,StringOutput target,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  super.render(renderer,target,source,ubu,translator,renderResult,args);
  FlexiTableComponent ftC=(FlexiTableComponent)source;
  FlexiTableElementImpl ftE=ftC.getFlexiTableElement();
  FlexiTableDataModel<?> dataModel=ftE.getTableDataModel();
  FlexiTableColumnModel columnsModel=dataModel.getTableColumnModel();
  Form rootForm=ftE.getRootForm();
  String id=ftC.getFormDispatchId();
  int rows=dataModel.getRowCount();
  int selectPos=-1;
  Object selectedObject=ftE.getSelectedObj();
  if (selectedObject != null) {
    for (int i=0; i < dataModel.getRowCount(); i++) {
      if (dataModel.isRowLoaded(i) && selectedObject.equals(dataModel.getObject(i))) {
        selectPos=i;
        break;
      }
    }
  }
  target.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(selectPos).append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(ftE.getPageSize()).append(""String_Node_Str"").append(""String_Node_Str"").append(rows).append(""String_Node_Str"").append(""String_Node_Str"").append(ftE.getMapperUrl()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  int count=0;
  if (ftE.isMultiSelect()) {
    target.append(""String_Node_Str"");
    count++;
  }
  for (int i=0; i < columnsModel.getColumnCount(); i++) {
    FlexiColumnModel col=columnsModel.getColumnModel(i);
    if (ftE.isColumnModelVisible(col)) {
      if (count > 0)       target.append(""String_Node_Str"");
      count++;
      target.append(""String_Node_Str"").append(col.getColumnKey()).append(""String_Node_Str"").append(col.isSortable()).append(""String_Node_Str"");
    }
  }
  target.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormJSHelper.generateXHRFnCallVariables(rootForm,id,1)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
}","/** 
 * @see org.olat.core.gui.components.ComponentRenderer#render(org.olat.core.gui.render.Renderer,org.olat.core.gui.render.StringOutput,org.olat.core.gui.components.Component,org.olat.core.gui.render.URLBuilder,org.olat.core.gui.translator.Translator,org.olat.core.gui.render.RenderResult,java.lang.String[])
 */
@Override public void render(Renderer renderer,StringOutput target,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  super.render(renderer,target,source,ubu,translator,renderResult,args);
  FlexiTableComponent ftC=(FlexiTableComponent)source;
  FlexiTableElementImpl ftE=ftC.getFlexiTableElement();
  FlexiTableDataModel<?> dataModel=ftE.getTableDataModel();
  FlexiTableColumnModel columnsModel=dataModel.getTableColumnModel();
  Form rootForm=ftE.getRootForm();
  String id=ftC.getFormDispatchId();
  int loadedRows=dataModel.getRowCount();
  int selectPos=-1;
  Object selectedObject=ftE.getSelectedObj();
  if (selectedObject != null) {
    for (int i=0; i < dataModel.getRowCount(); i++) {
      if (dataModel.isRowLoaded(i) && selectedObject.equals(dataModel.getObject(i))) {
        selectPos=i;
        break;
      }
    }
  }
  target.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(selectPos).append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(ftE.getPageSize()).append(""String_Node_Str"").append(""String_Node_Str"").append(loadedRows).append(""String_Node_Str"").append(""String_Node_Str"").append(ftE.getMapperUrl()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  int count=0;
  if (ftE.isMultiSelect()) {
    target.append(""String_Node_Str"");
    count++;
  }
  for (int i=0; i < columnsModel.getColumnCount(); i++) {
    FlexiColumnModel col=columnsModel.getColumnModel(i);
    if (ftE.isColumnModelVisible(col)) {
      if (count > 0)       target.append(""String_Node_Str"");
      count++;
      target.append(""String_Node_Str"").append(col.getColumnKey()).append(""String_Node_Str"").append(col.isSortable()).append(""String_Node_Str"");
    }
  }
  target.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormJSHelper.generateXHRFnCallVariables(rootForm,id,1)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
}"
69750,"protected void doSearch(String search,List<String> condQueries){
  if (condQueries == null || condQueries.isEmpty()) {
    conditionalQueries=null;
  }
 else {
    conditionalQueries=new ArrayList<String>(condQueries);
  }
  if (dataSource != null) {
    resetInternComponents();
    dataSource.clear();
    ResultInfos<?> infos=dataSource.load(search,conditionalQueries,0,getPageSize(),orderBy);
    System.out.println(""String_Node_Str"" + infos.getObjects().size());
  }
}","protected void doSearch(String search,List<String> condQueries){
  if (condQueries == null || condQueries.isEmpty()) {
    conditionalQueries=null;
  }
 else {
    conditionalQueries=new ArrayList<String>(condQueries);
  }
  if (dataSource != null) {
    resetInternComponents();
    dataSource.clear();
    dataSource.load(search,conditionalQueries,0,getPageSize(),orderBy);
  }
}"
69751,"@Override public VFSLeaf getRootFile(QuestionItem item){
  QuestionItemImpl reloadedItem=questionItemDao.loadById(item.getKey());
  VFSContainer root=qpoolModule.getRootContainer();
  VFSItem dir=root.resolve(reloadedItem.getDirectory());
  if (dir instanceof VFSContainer) {
    VFSContainer itemContainer=(VFSContainer)dir;
    VFSItem rootLeaf=itemContainer.resolve(reloadedItem.getRootFilename());
    if (rootLeaf instanceof VFSLeaf) {
      return (VFSLeaf)rootLeaf;
    }
  }
  return null;
}","@Override public VFSLeaf getRootFile(QuestionItem item){
  QuestionItemImpl reloadedItem=questionItemDao.loadById(item.getKey());
  if (reloadedItem == null) {
    return null;
  }
  VFSContainer root=qpoolModule.getRootContainer();
  VFSItem dir=root.resolve(reloadedItem.getDirectory());
  if (dir instanceof VFSContainer) {
    VFSContainer itemContainer=(VFSContainer)dir;
    VFSItem rootLeaf=itemContainer.resolve(reloadedItem.getRootFilename());
    if (rootLeaf instanceof VFSLeaf) {
      return (VFSLeaf)rootLeaf;
    }
  }
  return null;
}"
69752,"public QuestionItem updateItem(QuestionItem item){
  QuestionItem mergedItem=questionItemDao.merge(item);
  dbInstance.commit();
  lifeIndexer.indexDocument(QItemDocument.TYPE,mergedItem.getKey());
  return mergedItem;
}","@Override public QuestionItem updateItem(QuestionItem item){
  QuestionItem mergedItem=questionItemDao.merge(item);
  dbInstance.commit();
  lifeIndexer.indexDocument(QItemDocument.TYPE,mergedItem.getKey());
  return mergedItem;
}"
69753,"@Override public void deleteItems(List<QuestionItemShort> items){
  if (items == null || items.isEmpty()) {
    return;
  }
  poolDao.removeFromPools(items);
  questionItemDao.removeFromShares(items);
  collectionDao.deleteItemFromCollections(items);
  questionItemDao.delete(items);
  for (  QuestionItemShort item : items) {
    lifeIndexer.deleteDocument(QItemDocument.TYPE,item.getKey());
  }
}","@Override public void deleteItems(List<QuestionItemShort> items){
  if (items == null || items.isEmpty()) {
    return;
  }
  poolDao.removeFromPools(items);
  questionItemDao.removeFromShares(items);
  collectionDao.deleteItemFromCollections(items);
  questionItemDao.delete(items);
  for (  QuestionItemShort item : items) {
    lifeIndexer.deleteDocument(QItemDocument.TYPE,item.getKey());
  }
  dbInstance.getCurrentEntityManager().flush();
}"
69754,"@Override public List<QuestionItem> copyItems(Identity owner,List<QuestionItemShort> itemsToCopy){
  List<QuestionItem> copies=new ArrayList<QuestionItem>();
  for (  QuestionItemShort itemToCopy : itemsToCopy) {
    QuestionItemImpl original=questionItemDao.loadById(itemToCopy.getKey());
    QuestionItemImpl copy=questionItemDao.copy(owner,original);
    QPoolSPI provider=qpoolModule.getQuestionPoolProvider(copy.getFormat());
    if (provider != null) {
      provider.copyItem(original,copy);
    }
    copies.add(copy);
  }
  return copies;
}","@Override public List<QuestionItem> copyItems(Identity owner,List<QuestionItemShort> itemsToCopy){
  List<QuestionItem> copies=new ArrayList<QuestionItem>();
  for (  QuestionItemShort itemToCopy : itemsToCopy) {
    QuestionItemImpl original=questionItemDao.loadById(itemToCopy.getKey());
    QuestionItemImpl copy=questionItemDao.copy(owner,original);
    QPoolSPI provider=qpoolModule.getQuestionPoolProvider(copy.getFormat());
    if (provider != null) {
      provider.copyItem(original,copy);
    }
    copies.add(copy);
  }
  if (copies.size() > 0) {
    dbInstance.getCurrentEntityManager().flush();
  }
  return copies;
}"
69755,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.id.i18nKey(),Cols.id.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.publicPool.i18nKey(),Cols.publicPool.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.name.i18nKey(),Cols.name.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str""));
  model=new PoolDataModel(columnsModel,getTranslator());
  poolTable=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  poolTable.setRendererType(FlexiTableRendererType.classic);
  reloadModel();
  createPool=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.id.i18nKey(),Cols.id.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.publicPool.i18nKey(),Cols.publicPool.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.name.i18nKey(),Cols.name.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",translate(""String_Node_Str""),""String_Node_Str""));
  model=new PoolDataModel(columnsModel,getTranslator());
  poolTable=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  poolTable.setRendererType(FlexiTableRendererType.classic);
  reloadModel();
  createPool=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}"
69756,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.id.i18nKey(),Cols.id.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.level.i18nKey(),Cols.level.ordinal(),true,""String_Node_Str""));
  FlexiCellRenderer renderer=new StaticFlexiCellRenderer(""String_Node_Str"",new TextFlexiCellRenderer());
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(Cols.levelI18n.i18nKey(),Cols.levelI18n.ordinal(),""String_Node_Str"",renderer));
  FlexiCellRenderer delRenderer=new BooleanCellRenderer(new StaticFlexiCellRenderer(translate(""String_Node_Str""),""String_Node_Str""),null);
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",Cols.deletable.ordinal(),""String_Node_Str"",delRenderer));
  model=new LevelDataModel(columnsModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  tableEl.setRendererType(FlexiTableRendererType.classic);
  createType=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.id.i18nKey(),Cols.id.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.level.i18nKey(),Cols.level.ordinal(),true,""String_Node_Str""));
  FlexiCellRenderer renderer=new StaticFlexiCellRenderer(""String_Node_Str"",new TextFlexiCellRenderer());
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(Cols.levelI18n.i18nKey(),Cols.levelI18n.ordinal(),""String_Node_Str"",renderer));
  FlexiCellRenderer delRenderer=new BooleanCellRenderer(new StaticFlexiCellRenderer(translate(""String_Node_Str""),""String_Node_Str""),null);
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",Cols.deletable.ordinal(),""String_Node_Str"",delRenderer));
  model=new LevelDataModel(columnsModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  tableEl.setRendererType(FlexiTableRendererType.classic);
  createType=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}"
69757,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.id.i18nKey(),Cols.id.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.type.i18nKey(),Cols.type.ordinal(),true,""String_Node_Str""));
  FlexiCellRenderer renderer=new StaticFlexiCellRenderer(""String_Node_Str"",new TextFlexiCellRenderer());
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(Cols.typeI18n.i18nKey(),Cols.typeI18n.ordinal(),""String_Node_Str"",renderer));
  FlexiCellRenderer delRenderer=new BooleanCellRenderer(new StaticFlexiCellRenderer(translate(""String_Node_Str""),""String_Node_Str""),null);
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",Cols.deletable.ordinal(),""String_Node_Str"",delRenderer));
  model=new QItemTypeDataModel(columnsModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  tableEl.setRendererType(FlexiTableRendererType.classic);
  createType=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.id.i18nKey(),Cols.id.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.type.i18nKey(),Cols.type.ordinal(),true,""String_Node_Str""));
  FlexiCellRenderer renderer=new StaticFlexiCellRenderer(""String_Node_Str"",new TextFlexiCellRenderer());
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(Cols.typeI18n.i18nKey(),Cols.typeI18n.ordinal(),""String_Node_Str"",renderer));
  FlexiCellRenderer delRenderer=new BooleanCellRenderer(new StaticFlexiCellRenderer(translate(""String_Node_Str""),""String_Node_Str""),null);
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",Cols.deletable.ordinal(),""String_Node_Str"",delRenderer));
  model=new QItemTypeDataModel(columnsModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  tableEl.setRendererType(FlexiTableRendererType.classic);
  createType=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}"
69758,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.id.i18nKey(),Cols.id.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.licenseKey.i18nKey(),Cols.licenseKey.ordinal(),true,""String_Node_Str""));
  FlexiCellRenderer delRenderer=new BooleanCellRenderer(new StaticFlexiCellRenderer(translate(""String_Node_Str""),""String_Node_Str""),null);
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",Cols.deletable.ordinal(),""String_Node_Str"",delRenderer));
  model=new QItemTypeDataModel(columnsModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  tableEl.setRendererType(FlexiTableRendererType.classic);
  createType=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(false,Cols.id.i18nKey(),Cols.id.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.licenseKey.i18nKey(),Cols.licenseKey.ordinal(),true,""String_Node_Str""));
  FlexiCellRenderer delRenderer=new BooleanCellRenderer(new StaticFlexiCellRenderer(translate(""String_Node_Str""),""String_Node_Str""),null);
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",Cols.deletable.ordinal(),""String_Node_Str"",delRenderer));
  model=new QItemTypeDataModel(columnsModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  tableEl.setRendererType(FlexiTableRendererType.classic);
  createType=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}"
69759,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormTitle(""String_Node_Str"");
  List<QEducationalContext> levels=qpoolService.getAllEducationlContexts();
  String[] contextKeys=new String[levels.size()];
  String[] contextValues=new String[levels.size()];
  int count=0;
  for (  QEducationalContext level : levels) {
    contextKeys[count]=level.getLevel();
    String translation=translate(""String_Node_Str"" + level.getLevel().toLowerCase());
    if (translation.length() > 128) {
      translation=level.getLevel();
    }
    contextValues[count++]=translation;
  }
  contextEl=uifactory.addDropdownSingleselect(""String_Node_Str"",""String_Node_Str"",formLayout,contextKeys,contextValues,null);
  String page=velocity_root + ""String_Node_Str"";
  learningTimeContainer=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),page);
  learningTimeContainer.setRootForm(mainForm);
  learningTimeContainer.setLabel(""String_Node_Str"",null);
  formLayout.add(learningTimeContainer);
  LOMDuration duration=MetadataConverterHelper.convertDuration(item.getEducationalLearningTime());
  learningTimeDayElement=uifactory.addIntegerElement(""String_Node_Str"",""String_Node_Str"",duration.getDay(),learningTimeContainer);
  learningTimeDayElement.setDisplaySize(3);
  learningTimeDayElement.setMandatory(true);
  learningTimeHourElement=uifactory.addIntegerElement(""String_Node_Str"",""String_Node_Str"",duration.getHour(),learningTimeContainer);
  learningTimeHourElement.setDisplaySize(3);
  learningTimeHourElement.setMandatory(true);
  learningTimeMinuteElement=uifactory.addIntegerElement(""String_Node_Str"",""String_Node_Str"",duration.getMinute(),learningTimeContainer);
  learningTimeMinuteElement.setDisplaySize(3);
  learningTimeMinuteElement.setMandatory(true);
  learningTimeSecondElement=uifactory.addIntegerElement(""String_Node_Str"",""String_Node_Str"",duration.getSeconds(),learningTimeContainer);
  learningTimeSecondElement.setDisplaySize(3);
  learningTimeSecondElement.setMandatory(true);
  FormLayoutContainer buttonsCont=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  buttonsCont.setRootForm(mainForm);
  formLayout.add(buttonsCont);
  uifactory.addFormSubmitButton(""String_Node_Str"",""String_Node_Str"",buttonsCont);
  uifactory.addFormCancelButton(""String_Node_Str"",buttonsCont,ureq,getWindowControl());
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormTitle(""String_Node_Str"");
  List<QEducationalContext> levels=qpoolService.getAllEducationlContexts();
  String[] contextKeys=new String[levels.size()];
  String[] contextValues=new String[levels.size()];
  int count=0;
  for (  QEducationalContext level : levels) {
    contextKeys[count]=level.getLevel();
    String translation=translate(""String_Node_Str"" + level.getLevel().toLowerCase());
    if (translation.length() > 128) {
      translation=level.getLevel();
    }
    contextValues[count++]=translation;
  }
  contextEl=uifactory.addDropdownSingleselect(""String_Node_Str"",""String_Node_Str"",formLayout,contextKeys,contextValues,null);
  contextEl.setEnabled(count > 0);
  String page=velocity_root + ""String_Node_Str"";
  learningTimeContainer=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),page);
  learningTimeContainer.setRootForm(mainForm);
  learningTimeContainer.setLabel(""String_Node_Str"",null);
  formLayout.add(learningTimeContainer);
  LOMDuration duration=MetadataConverterHelper.convertDuration(item.getEducationalLearningTime());
  learningTimeDayElement=uifactory.addIntegerElement(""String_Node_Str"",""String_Node_Str"",duration.getDay(),learningTimeContainer);
  learningTimeDayElement.setDisplaySize(3);
  learningTimeDayElement.setMandatory(true);
  learningTimeHourElement=uifactory.addIntegerElement(""String_Node_Str"",""String_Node_Str"",duration.getHour(),learningTimeContainer);
  learningTimeHourElement.setDisplaySize(3);
  learningTimeHourElement.setMandatory(true);
  learningTimeMinuteElement=uifactory.addIntegerElement(""String_Node_Str"",""String_Node_Str"",duration.getMinute(),learningTimeContainer);
  learningTimeMinuteElement.setDisplaySize(3);
  learningTimeMinuteElement.setMandatory(true);
  learningTimeSecondElement=uifactory.addIntegerElement(""String_Node_Str"",""String_Node_Str"",duration.getSeconds(),learningTimeContainer);
  learningTimeSecondElement.setDisplaySize(3);
  learningTimeSecondElement.setMandatory(true);
  FormLayoutContainer buttonsCont=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
  buttonsCont.setRootForm(mainForm);
  formLayout.add(buttonsCont);
  uifactory.addFormSubmitButton(""String_Node_Str"",""String_Node_Str"",buttonsCont);
  uifactory.addFormCancelButton(""String_Node_Str"",buttonsCont,ureq,getWindowControl());
}"
69760,"private void doEditQuestionMetadata(UserRequest ureq){
  questionEditCtrl=new QuestionMetadataEditController(ureq,getWindowControl(),item);
  listenTo(questionEditCtrl);
  mainVC.put(""String_Node_Str"",questionEditCtrl.getInitialComponent());
}","private void doEditQuestionMetadata(UserRequest ureq){
  removeAsListenerAndDispose(questionEditCtrl);
  questionEditCtrl=new QuestionMetadataEditController(ureq,getWindowControl(),item);
  listenTo(questionEditCtrl);
  mainVC.put(""String_Node_Str"",questionEditCtrl.getInitialComponent());
}"
69761,"private void doEditEducationalMetadata(UserRequest ureq){
  educationalEditCtrl=new EducationalMetadataEditController(ureq,getWindowControl(),item);
  listenTo(educationalEditCtrl);
  mainVC.put(""String_Node_Str"",educationalEditCtrl.getInitialComponent());
}","private void doEditEducationalMetadata(UserRequest ureq){
  removeAsListenerAndDispose(educationalEditCtrl);
  educationalEditCtrl=new EducationalMetadataEditController(ureq,getWindowControl(),item);
  listenTo(educationalEditCtrl);
  mainVC.put(""String_Node_Str"",educationalEditCtrl.getInitialComponent());
}"
69762,"@Override protected boolean validateFormLogic(UserRequest ureq){
  boolean allOk=true;
  allOk&=validateSelection(typeEl,true);
  allOk&=validateBigDecimal(difficultyEl,0.0d,1.0d,true);
  allOk&=validateBigDecimal(stdevDifficultyEl,0.0d,1.0d,true);
  allOk&=validateBigDecimal(differentiationEl,-1.0d,1.0d,true);
  allOk&=validateSelection(assessmentTypeEl,true);
  return allOk && super.validateFormLogic(ureq);
}","@Override protected boolean validateFormLogic(UserRequest ureq){
  boolean allOk=true;
  allOk&=validateSelection(typeEl,true);
  allOk&=validateBigDecimal(difficultyEl,0.0d,1.0d,true);
  allOk&=validateBigDecimal(stdevDifficultyEl,0.0d,1.0d,true);
  allOk&=validateBigDecimal(differentiationEl,-1.0d,1.0d,true);
  allOk&=validateInteger(numAnswerAltEl,0,Integer.MAX_VALUE,true);
  allOk&=validateSelection(assessmentTypeEl,true);
  return allOk && super.validateFormLogic(ureq);
}"
69763,"@Override public ResultInfos<U> load(final int firstResult,final int maxResults,SortKey... orderBy){
  return loadDatas(null,null,false,firstResult,maxResults,orderBy);
}","@Override public ResultInfos<U> load(String query,List<String> addQueries,int firstResult,int maxResults,SortKey... orderBy){
  return loadDatas(query,addQueries,false,firstResult,maxResults,orderBy);
}"
69764,"/** 
 * Load the rows needed for paging
 * @param firstResult
 * @param maxResults
 */
public ResultInfos<U> load(int firstResult,int maxResults,SortKey... orderBy);","/** 
 * @param firstResult
 * @param maxResults
 * @param orderBy
 */
public ResultInfos<U> load(String query,List<String> addQueries,int firstResult,int maxResults,SortKey... orderBy);"
69765,"public FlexiTableElementImpl(UserRequest ureq,WindowControl wControl,String name,Translator translator,FlexiTableDataModel<?> tableModel,int pageSize){
  super(name);
  this.wControl=wControl;
  this.dataModel=tableModel;
  this.dataSource=(tableModel instanceof FlexiTableDataSource) ? (FlexiTableDataSource<?>)dataModel : null;
  component=new FlexiTableComponent(this,translator);
  for (int i=dataModel.getTableColumnModel().getColumnCount(); i-- > 0; ) {
    FlexiColumnModel col=dataModel.getTableColumnModel().getColumnModel(i);
    if (col.isDefaultVisible()) {
      enabledColumnIndex.add(new Integer(col.getColumnIndex()));
    }
  }
  MapperService mapper=CoreSpringFactory.getImpl(MapperService.class);
  mapperUrl=mapper.register(ureq.getUserSession(),new FlexiTableModelMapper(component));
  String dispatchId=component.getDispatchID();
  customButton=new FormLinkImpl(dispatchId + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.BUTTON);
  customButton.setTranslator(translator);
  customButton.setCustomEnabledLinkCSS(""String_Node_Str"");
  components.put(""String_Node_Str"",customButton);
  this.pageSize=pageSize;
  if (pageSize > 0) {
    setPage(0);
  }
  if (dataSource != null) {
    dataSource.load(0,pageSize);
  }
}","public FlexiTableElementImpl(UserRequest ureq,WindowControl wControl,String name,Translator translator,FlexiTableDataModel<?> tableModel,int pageSize){
  super(name);
  this.wControl=wControl;
  this.dataModel=tableModel;
  this.dataSource=(tableModel instanceof FlexiTableDataSource) ? (FlexiTableDataSource<?>)dataModel : null;
  component=new FlexiTableComponent(this,translator);
  for (int i=dataModel.getTableColumnModel().getColumnCount(); i-- > 0; ) {
    FlexiColumnModel col=dataModel.getTableColumnModel().getColumnModel(i);
    if (col.isDefaultVisible()) {
      enabledColumnIndex.add(new Integer(col.getColumnIndex()));
    }
  }
  MapperService mapper=CoreSpringFactory.getImpl(MapperService.class);
  mapperUrl=mapper.register(ureq.getUserSession(),new FlexiTableModelMapper(component));
  String dispatchId=component.getDispatchID();
  customButton=new FormLinkImpl(dispatchId + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.BUTTON);
  customButton.setTranslator(translator);
  customButton.setCustomEnabledLinkCSS(""String_Node_Str"");
  components.put(""String_Node_Str"",customButton);
  this.pageSize=pageSize;
  if (pageSize > 0) {
    setPage(0);
  }
  if (dataSource != null) {
    dataSource.load(null,null,0,pageSize);
  }
}"
69766,"protected void doSearch(UserRequest ureq,String search,List<String> condQueries){
  if (dataSource != null) {
    resetInternComponents();
    dataSource.clear();
    dataSource.search(search,condQueries,0,getPageSize());
  }
}","protected void doSearch(String search,List<String> condQueries){
  if (condQueries == null || condQueries.isEmpty()) {
    conditionalQueries=null;
  }
 else {
    conditionalQueries=new ArrayList<String>(condQueries);
  }
  if (dataSource != null) {
    resetInternComponents();
    dataSource.clear();
    ResultInfos<?> infos=dataSource.load(search,conditionalQueries,0,getPageSize(),orderBy);
    System.out.println(""String_Node_Str"" + infos.getObjects().size());
  }
}"
69767,"@Override public void reloadData(){
  if (dataSource != null) {
    dataSource.load(0,getPageSize());
  }
}","@Override public void reloadData(){
  if (dataSource != null) {
    dataSource.clear();
    dataSource.load(getSearchText(),getConditionalQueries(),0,getPageSize());
  }
}"
69768,"protected void evalSearchRequest(UserRequest ureq){
  if (searchFieldEl == null)   return;
  searchFieldEl.evalFormRequest(ureq);
  String search=searchFieldEl.getValue();
  if (StringHelper.containsNonWhitespace(search)) {
    doSearch(ureq,search,null);
  }
 else {
    doResetSearch(ureq);
  }
}","protected void evalSearchRequest(UserRequest ureq){
  if (searchFieldEl == null)   return;
  searchFieldEl.evalFormRequest(ureq);
  String search=searchFieldEl.getValue();
  if (StringHelper.containsNonWhitespace(search)) {
    doSearch(search,null);
  }
 else {
    doResetSearch(ureq);
  }
}"
69769,"@Override public Set<Integer> getMultiSelectedIndex(){
  if (allSelectedIndex && dataSource != null) {
    dataSource.load(0,-1);
    Set<Integer> allIndex=new HashSet<Integer>();
    for (int i=dataModel.getRowCount(); i-- > 0; ) {
      allIndex.add(new Integer(i));
    }
    return allIndex;
  }
  return multiSelectedIndex == null ? Collections.<Integer>emptySet() : multiSelectedIndex;
}","@Override public Set<Integer> getMultiSelectedIndex(){
  if (allSelectedIndex && dataSource != null) {
    dataSource.load(getSearchText(),getConditionalQueries(),0,-1);
    Set<Integer> allIndex=new HashSet<Integer>();
    for (int i=dataModel.getRowCount(); i-- > 0; ) {
      allIndex.add(new Integer(i));
    }
    return allIndex;
  }
  return multiSelectedIndex == null ? Collections.<Integer>emptySet() : multiSelectedIndex;
}"
69770,"protected void evalExtendedSearch(UserRequest ureq){
  String search=null;
  if (searchFieldEl != null) {
    searchFieldEl.evalFormRequest(ureq);
    search=searchFieldEl.getValue();
  }
  List<String> condQueries=extendedSearchCtrl.getConditionalQueries();
  doSearch(ureq,search,condQueries);
}","protected void evalExtendedSearch(UserRequest ureq){
  String search=null;
  if (searchFieldEl != null) {
    searchFieldEl.evalFormRequest(ureq);
    search=searchFieldEl.getValue();
  }
  List<String> condQueries=extendedSearchCtrl.getConditionalQueries();
  doSearch(search,condQueries);
}"
69771,"protected void doResetSearch(UserRequest ureq){
  if (dataSource != null) {
    resetInternComponents();
    dataSource.clear();
    dataSource.load(0,getPageSize());
  }
}","protected void doResetSearch(UserRequest ureq){
  if (dataSource != null) {
    resetInternComponents();
    dataSource.clear();
    dataSource.load(null,null,0,getPageSize());
  }
}"
69772,"@Override public MediaResource handle(String relPath,HttpServletRequest request){
  String firstRowStr=request.getParameter(""String_Node_Str"");
  String maxRowStr=request.getParameter(""String_Node_Str"");
  String echo=request.getParameter(""String_Node_Str"");
  String sortCol=request.getParameter(""String_Node_Str"");
  String sortDir=request.getParameter(""String_Node_Str"");
  FlexiTableElementImpl ftE=ftC.getFlexiTableElement();
  URLBuilder ubu=getURLBuilder(request);
  int sortedColIndex=-1;
  if (StringHelper.containsNonWhitespace(sortCol)) {
    sortedColIndex=Integer.parseInt(sortCol);
    if (ftE.isMultiSelect()) {
      sortedColIndex--;
    }
  }
  if (StringHelper.isLong(firstRowStr) && StringHelper.isLong(maxRowStr)) {
    FlexiTableDataModel<?> dataModel=ftE.getTableDataModel();
    FlexiTableDataSource<?> dataSource=ftE.getTableDataSource();
    FlexiTableColumnModel columnsModel=dataModel.getTableColumnModel();
    SortKey orderBy=null;
    if (sortedColIndex >= 0 && sortedColIndex < columnsModel.getColumnCount()) {
      int count=0;
      for (int i=0; i < columnsModel.getColumnCount() && count <= sortedColIndex; i++) {
        FlexiColumnModel sortedColumn=columnsModel.getColumnModel(i);
        if (ftE.isColumnModelVisible(sortedColumn)) {
          if (count == sortedColIndex && StringHelper.containsNonWhitespace(sortedColumn.getSortKey())) {
            orderBy=new SortKey(sortedColumn.getSortKey(),""String_Node_Str"".equals(sortDir));
            break;
          }
          count++;
        }
      }
    }
    int rows=ftE.getTableDataModel().getRowCount();
    String dispatchId=ftE.getComponent().getDispatchID();
    String rowIdPrefix=""String_Node_Str"" + dispatchId + ""String_Node_Str"";
    try {
      JSONObject root=new JSONObject();
      root.put(""String_Node_Str"",Integer.parseInt(echo) + 1);
      root.put(""String_Node_Str"",rows);
      root.put(""String_Node_Str"",rows);
      JSONArray ja=new JSONArray();
      root.put(""String_Node_Str"",ja);
      int firstRow=Integer.parseInt(firstRowStr);
      int maxRows=Integer.parseInt(maxRowStr);
      int lastRow=Math.min(rows,firstRow + maxRows);
      ResultInfos<?> results;
      if (StringHelper.containsNonWhitespace(ftE.getSearchText())) {
        results=dataSource.search(ftE.getSearchText(),null,firstRow,maxRows,orderBy);
      }
 else {
        results=dataSource.load(firstRow,maxRows,orderBy);
      }
      ftE.setCurrentFirstResult(results.getNextFirstResult());
      for (int i=firstRow; i < lastRow; i++) {
        JSONObject row=new JSONObject();
        if (ftE.isMultiSelect()) {
          StringBuilder sb=new StringBuilder();
          sb.append(""String_Node_Str"").append(rowIdPrefix).append(i).append(""String_Node_Str"");
          if (ftE.isAllSelectedIndex() || ftE.isMultiSelectedIndex(i)) {
            sb.append(""String_Node_Str"");
          }
          sb.append(""String_Node_Str"");
          row.put(""String_Node_Str"",sb.toString());
        }
        for (int j=0; j < columnsModel.getColumnCount(); j++) {
          FlexiColumnModel col=columnsModel.getColumnModel(j);
          if (ftE.isColumnModelVisible(col)) {
            int columnIndex=col.getColumnIndex();
            Object value=columnIndex >= 0 ? dataModel.getValueAt(i,columnIndex) : null;
            String val;
            if (value instanceof FormItem) {
              FormItem item=(FormItem)value;
              if (ftE.getRootForm() != item.getRootForm()) {
                item.setRootForm(ftE.getRootForm());
              }
              ftE.addFormItem(item);
              val=renderFormItem(item,request,ftE.getTranslator());
            }
 else {
              val=renderColumnRenderer(col,value,i,ftC,ubu,ftE.getTranslator());
            }
            row.put(col.getColumnKey(),val);
          }
        }
        row.put(""String_Node_Str"",rowIdPrefix + Integer.toString(i));
        ja.put(row);
      }
      return new JSONMediaResource(root,""String_Node_Str"");
    }
 catch (    NumberFormatException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    JSONException e) {
      log.error(""String_Node_Str"",e);
    }
  }
  return null;
}","@Override public MediaResource handle(String relPath,HttpServletRequest request){
  String firstRowStr=request.getParameter(""String_Node_Str"");
  String maxRowStr=request.getParameter(""String_Node_Str"");
  String echo=request.getParameter(""String_Node_Str"");
  String sortCol=request.getParameter(""String_Node_Str"");
  String sortDir=request.getParameter(""String_Node_Str"");
  FlexiTableElementImpl ftE=ftC.getFlexiTableElement();
  URLBuilder ubu=getURLBuilder(request);
  int sortedColIndex=-1;
  if (StringHelper.containsNonWhitespace(sortCol)) {
    sortedColIndex=Integer.parseInt(sortCol);
    if (ftE.isMultiSelect()) {
      sortedColIndex--;
    }
  }
  if (StringHelper.isLong(firstRowStr) && StringHelper.isLong(maxRowStr)) {
    FlexiTableDataModel<?> dataModel=ftE.getTableDataModel();
    FlexiTableColumnModel columnsModel=dataModel.getTableColumnModel();
    SortKey orderBy=null;
    if (sortedColIndex >= 0 && sortedColIndex < columnsModel.getColumnCount()) {
      int count=0;
      for (int i=0; i < columnsModel.getColumnCount() && count <= sortedColIndex; i++) {
        FlexiColumnModel sortedColumn=columnsModel.getColumnModel(i);
        if (ftE.isColumnModelVisible(sortedColumn)) {
          if (count == sortedColIndex && StringHelper.containsNonWhitespace(sortedColumn.getSortKey())) {
            orderBy=new SortKey(sortedColumn.getSortKey(),""String_Node_Str"".equals(sortDir));
            break;
          }
          count++;
        }
      }
    }
    int rows=ftE.getTableDataModel().getRowCount();
    String dispatchId=ftE.getComponent().getDispatchID();
    String rowIdPrefix=""String_Node_Str"" + dispatchId + ""String_Node_Str"";
    try {
      JSONObject root=new JSONObject();
      root.put(""String_Node_Str"",Integer.parseInt(echo) + 1);
      root.put(""String_Node_Str"",rows);
      root.put(""String_Node_Str"",rows);
      JSONArray ja=new JSONArray();
      root.put(""String_Node_Str"",ja);
      int firstRow=Integer.parseInt(firstRowStr);
      int maxRows=Integer.parseInt(maxRowStr);
      int lastRow=Math.min(rows,firstRow + maxRows);
      ResultInfos<?> results=ftE.doScroll(firstRow,maxRows,orderBy);
      ftE.setCurrentFirstResult(results.getNextFirstResult());
      for (int i=firstRow; i < lastRow; i++) {
        JSONObject row=new JSONObject();
        if (ftE.isMultiSelect()) {
          StringBuilder sb=new StringBuilder();
          sb.append(""String_Node_Str"").append(rowIdPrefix).append(i).append(""String_Node_Str"");
          if (ftE.isAllSelectedIndex() || ftE.isMultiSelectedIndex(i)) {
            sb.append(""String_Node_Str"");
          }
          sb.append(""String_Node_Str"");
          row.put(""String_Node_Str"",sb.toString());
        }
        for (int j=0; j < columnsModel.getColumnCount(); j++) {
          FlexiColumnModel col=columnsModel.getColumnModel(j);
          if (ftE.isColumnModelVisible(col)) {
            int columnIndex=col.getColumnIndex();
            Object value=columnIndex >= 0 ? dataModel.getValueAt(i,columnIndex) : null;
            String val;
            if (value instanceof FormItem) {
              FormItem item=(FormItem)value;
              if (ftE.getRootForm() != item.getRootForm()) {
                item.setRootForm(ftE.getRootForm());
              }
              ftE.addFormItem(item);
              val=renderFormItem(item,request,ftE.getTranslator());
            }
 else {
              val=renderColumnRenderer(col,value,i,ftC,ubu,ftE.getTranslator());
            }
            row.put(col.getColumnKey(),val);
          }
        }
        row.put(""String_Node_Str"",rowIdPrefix + Integer.toString(i));
        ja.put(row);
      }
      return new JSONMediaResource(root,""String_Node_Str"");
    }
 catch (    NumberFormatException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    JSONException e) {
      log.error(""String_Node_Str"",e);
    }
  }
  return null;
}"
69773,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.id.i18nKey(),Cols.id.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.licenseKey.i18nKey(),Cols.licenseKey.ordinal(),true,""String_Node_Str""));
  FlexiCellRenderer delRenderer=new BooleanCellRenderer(new StaticFlexiCellRenderer(translate(""String_Node_Str""),""String_Node_Str""),null);
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",Cols.deletable.ordinal(),""String_Node_Str"",delRenderer));
  model=new QItemTypeDataModel(columnsModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  tableEl.setRendererType(FlexiTableRendererType.classic);
  createType=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FlexiTableColumnModel columnsModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.id.i18nKey(),Cols.id.ordinal(),true,""String_Node_Str""));
  columnsModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.licenseKey.i18nKey(),Cols.licenseKey.ordinal(),true,""String_Node_Str""));
  FlexiCellRenderer delRenderer=new BooleanCellRenderer(new StaticFlexiCellRenderer(translate(""String_Node_Str""),""String_Node_Str""),null);
  columnsModel.addFlexiColumnModel(new StaticFlexiColumnModel(""String_Node_Str"",Cols.deletable.ordinal(),""String_Node_Str"",delRenderer));
  model=new QItemTypeDataModel(columnsModel);
  tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",model,getTranslator(),formLayout);
  tableEl.setRendererType(FlexiTableRendererType.classic);
  createType=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
}"
69774,"@Before public void setInternalInbox(){
  inbox=mailModule.isInternSystem();
  if (!inbox) {
    mailModule.setInterSystem(true);
  }
}","@Before public void setInternalInbox(){
  inbox=mailModule.isInternSystem();
  if (!inbox) {
    mailModule.setInterSystem(true);
    sleep(500);
  }
}"
69775,"@Before public void printBanner(){
  if (started)   return;
  FrameworkStartupEventChannel.fireEvent();
  String dbVendor=DBFactory.getInstance().getDbVendor();
  postgresqlConfigured=dbVendor != null && dbVendor.startsWith(""String_Node_Str"");
  oracleConfigured=dbVendor != null && dbVendor.startsWith(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  printOlatLocalProperties();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  started=true;
}","@Before public void printBanner(){
  log.info(""String_Node_Str"" + name.getMethodName() + ""String_Node_Str""+ this.getClass().getCanonicalName()+ ""String_Node_Str"");
  if (started) {
    return;
  }
  FrameworkStartupEventChannel.fireEvent();
  String dbVendor=DBFactory.getInstance().getDbVendor();
  postgresqlConfigured=dbVendor != null && dbVendor.startsWith(""String_Node_Str"");
  oracleConfigured=dbVendor != null && dbVendor.startsWith(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  printOlatLocalProperties();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  started=true;
}"
69776,"@After public void closeConnectionAfter(){
  try {
    DBFactory.getInstance().commitAndCloseSession();
  }
 catch (  Exception e) {
    e.printStackTrace();
    try {
      DBFactory.getInstance().rollbackAndCloseSession();
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
}","@After public void closeConnectionAfter(){
  log.info(""String_Node_Str"" + name.getMethodName() + ""String_Node_Str""+ this.getClass().getCanonicalName()+ ""String_Node_Str"");
  try {
    DBFactory.getInstance().commitAndCloseSession();
  }
 catch (  Exception e) {
    e.printStackTrace();
    try {
      DBFactory.getInstance().rollbackAndCloseSession();
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
}"
69777,"/** 
 * @param item
 * @return The item description with media file paths that are dispatchable bythe FeedMediaDispatcher
 */
public String getItemDescriptionForBrowser(Item item){
  feed=feedManager.getFeed(feed);
  item=feedManager.getItem(feed,item.getGuid());
  String itemDescription=item.getDescription();
  if (itemDescription != null) {
    if (feed.isExternal()) {
      Filter xssFilter=FilterFactory.getXSSFilter(itemDescription.length() + 1);
      itemDescription=xssFilter.filter(itemDescription);
    }
 else {
      String basePath=baseUri + ""String_Node_Str"" + item.getGuid();
      Filter mediaUrlFilter=FilterFactory.getBaseURLToMediaRelativeURLFilter(basePath);
      itemDescription=mediaUrlFilter.filter(itemDescription);
    }
  }
  return itemDescription;
}","/** 
 * @param item
 * @return The item description with media file paths that are dispatchable bythe FeedMediaDispatcher
 */
public String getItemDescriptionForBrowser(Item item){
  feed=feedManager.getFeed(feed);
  item=feedManager.getItem(feed,item.getGuid());
  String itemDescription=item.getDescription();
  if (itemDescription != null) {
    if (feed.isExternal()) {
      Filter xssFilter=FilterFactory.getXSSFilter(itemDescription.length() + 1);
      itemDescription=xssFilter.filter(itemDescription);
    }
 else {
      String basePath=baseUri + ""String_Node_Str"" + item.getGuid();
      Filter mediaUrlFilter=FilterFactory.getBaseURLToMediaRelativeURLFilter(basePath);
      itemDescription=mediaUrlFilter.filter(itemDescription);
    }
  }
  itemDescription=Formatter.formatLatexFormulas(itemDescription);
  return itemDescription;
}"
69778,"private Properties LTIProperties(UserRequest ureq){
  final Identity ident=ureq.getIdentity();
  final Locale loc=ureq.getLocale();
  User u=ident.getUser();
  final String lastName=u.getProperty(UserConstants.LASTNAME,loc);
  final String firstName=u.getProperty(UserConstants.FIRSTNAME,loc);
  final String email=u.getProperty(UserConstants.EMAIL,loc);
  String custom=(String)config.get(LTIConfigForm.CONFIG_KEY_CUSTOM);
  boolean sendname=Boolean.valueOf((String)config.get(LTIConfigForm.CONFIG_KEY_SENDNAME));
  boolean sendemail=Boolean.valueOf((String)config.get(LTIConfigForm.CONFIG_KEY_SENDEMAIL));
  Properties props=new Properties();
  setProperty(props,""String_Node_Str"",courseNode.getIdent());
  setProperty(props,""String_Node_Str"",courseNode.getShortTitle());
  setProperty(props,""String_Node_Str"",courseNode.getLongTitle());
  setProperty(props,""String_Node_Str"",u.getKey() + ""String_Node_Str"");
  String personSourceId=(String)ureq.getUserSession().getEntry(""String_Node_Str"");
  if (!StringHelper.containsNonWhitespace(personSourceId)) {
    personSourceId=Settings.getServerconfig(""String_Node_Str"") + ""String_Node_Str"" + ident.getKey();
  }
  setProperty(props,""String_Node_Str"",personSourceId);
  setProperty(props,""String_Node_Str"",loc.toString());
  setProperty(props,""String_Node_Str"",""String_Node_Str"");
  if (sendname) {
    setProperty(props,""String_Node_Str"",firstName);
    setProperty(props,""String_Node_Str"",lastName);
    setProperty(props,""String_Node_Str"",firstName + ""String_Node_Str"" + lastName);
  }
  if (sendemail) {
    setProperty(props,""String_Node_Str"",email);
  }
  setProperty(props,""String_Node_Str"",setRoles(ureq.getUserSession().getRoles()));
  setProperty(props,""String_Node_Str"",courseEnv.getCourseResourceableId().toString());
  setProperty(props,""String_Node_Str"",courseEnv.getCourseTitle());
  setProperty(props,""String_Node_Str"",courseEnv.getCourseTitle());
  setProperty(props,""String_Node_Str"",""String_Node_Str"");
  if (custom != null) {
    String[] params=custom.split(""String_Node_Str"");
    for (int i=0; i < params.length; i++) {
      String param=params[i];
      if (param == null)       continue;
      if (param.length() < 1)       continue;
      int pos=param.indexOf(""String_Node_Str"");
      if (pos < 1)       continue;
      if (pos + 1 > param.length())       continue;
      String key=BasicLTIUtil.mapKeyName(param.substring(0,pos));
      if (key == null)       continue;
      String value=param.substring(pos + 1);
      value=value.trim();
      if (value.length() < 1)       continue;
      if (value == null)       continue;
      setProperty(props,""String_Node_Str"" + key,value);
    }
  }
  setProperty(props,""String_Node_Str"",Settings.getServerconfig(""String_Node_Str""));
  setProperty(props,""String_Node_Str"",WebappHelper.getInstanceId());
  setProperty(props,""String_Node_Str"",WebappHelper.getMailConfig(""String_Node_Str""));
  return props;
}","private Properties LTIProperties(UserRequest ureq){
  final Identity ident=ureq.getIdentity();
  final Locale loc=ureq.getLocale();
  User u=ident.getUser();
  final String lastName=u.getProperty(UserConstants.LASTNAME,loc);
  final String firstName=u.getProperty(UserConstants.FIRSTNAME,loc);
  final String email=u.getProperty(UserConstants.EMAIL,loc);
  String custom=(String)config.get(LTIConfigForm.CONFIG_KEY_CUSTOM);
  boolean sendname=Boolean.valueOf((String)config.get(LTIConfigForm.CONFIG_KEY_SENDNAME));
  boolean sendemail=Boolean.valueOf((String)config.get(LTIConfigForm.CONFIG_KEY_SENDEMAIL));
  Properties props=new Properties();
  setProperty(props,""String_Node_Str"",courseNode.getIdent());
  setProperty(props,""String_Node_Str"",courseNode.getShortTitle());
  setProperty(props,""String_Node_Str"",courseNode.getLongTitle());
  setProperty(props,""String_Node_Str"",u.getKey() + ""String_Node_Str"");
  setProperty(props,""String_Node_Str"",createPersonSourceId());
  setProperty(props,""String_Node_Str"",loc.toString());
  setProperty(props,""String_Node_Str"",""String_Node_Str"");
  if (sendname) {
    setProperty(props,""String_Node_Str"",firstName);
    setProperty(props,""String_Node_Str"",lastName);
    setProperty(props,""String_Node_Str"",firstName + ""String_Node_Str"" + lastName);
  }
  if (sendemail) {
    setProperty(props,""String_Node_Str"",email);
  }
  setProperty(props,""String_Node_Str"",setRoles(ureq.getUserSession().getRoles()));
  setProperty(props,""String_Node_Str"",courseEnv.getCourseResourceableId().toString());
  setProperty(props,""String_Node_Str"",courseEnv.getCourseTitle());
  setProperty(props,""String_Node_Str"",courseEnv.getCourseTitle());
  setProperty(props,""String_Node_Str"",""String_Node_Str"");
  if (custom != null) {
    String[] params=custom.split(""String_Node_Str"");
    for (int i=0; i < params.length; i++) {
      String param=params[i];
      if (param == null)       continue;
      if (param.length() < 1)       continue;
      int pos=param.indexOf(""String_Node_Str"");
      if (pos < 1)       continue;
      if (pos + 1 > param.length())       continue;
      String key=BasicLTIUtil.mapKeyName(param.substring(0,pos));
      if (key == null)       continue;
      String value=param.substring(pos + 1);
      value=value.trim();
      if (value.length() < 1)       continue;
      if (value == null)       continue;
      setProperty(props,""String_Node_Str"" + key,value);
    }
  }
  setProperty(props,""String_Node_Str"",Settings.getServerconfig(""String_Node_Str""));
  setProperty(props,""String_Node_Str"",WebappHelper.getInstanceId());
  setProperty(props,""String_Node_Str"",WebappHelper.getMailConfig(""String_Node_Str""));
  return props;
}"
69779,"private String getMonthShort(Translator translator){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"");
  return sb.toString();
}","private String getMonthShort(Translator translator){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
  return sb.toString();
}"
69780,"private String getMonthLong(Translator translator){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"");
  return sb.toString();
}","private String getMonthLong(Translator translator){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
  return sb.toString();
}"
69781,"@Override public void render(Renderer renderer,StringOutput sb,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  FullCalendarComponent fcC=(FullCalendarComponent)source;
  FullCalendarElement fcE=fcC.getCalendarElement();
  Form rootForm=fcE.getRootForm();
  String id=""String_Node_Str"" + fcC.getDispatchID();
  String formId=fcE.getFormDispatchId();
  Calendar cal=Calendar.getInstance(fcC.getTranslator().getLocale());
  int firstDay=cal.getFirstDayOfWeek() - 1;
  cal=Calendar.getInstance();
  cal.setTime(fcC.getCurrentDate());
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(getMonthLong(translator)).append(""String_Node_Str"").append(""String_Node_Str"").append(getMonthShort(translator)).append(""String_Node_Str"").append(""String_Node_Str"").append(getDayLong(translator)).append(""String_Node_Str"").append(""String_Node_Str"").append(getDayShort(translator)).append(""String_Node_Str"").append(""String_Node_Str"").append(cal.get(Calendar.YEAR)).append(""String_Node_Str"").append(""String_Node_Str"").append(cal.get(Calendar.MONTH)).append(""String_Node_Str"").append(""String_Node_Str"").append(cal.get(Calendar.DAY_OF_MONTH)).append(""String_Node_Str"").append(""String_Node_Str"").append(firstDay).append(""String_Node_Str"").append(""String_Node_Str"").append(fcC.getViewName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  int count=0;
  for (  KalendarRenderWrapper calWrapper : fcC.getKalendarRenderWrappers()) {
    if (calWrapper.getKalendarConfig().isVis()) {
      String calId=calWrapper.getKalendar().getCalendarID();
      String color=calWrapper.getKalendarConfig().getCss();
      if (StringHelper.containsNonWhitespace(color) && color.startsWith(""String_Node_Str"")) {
        color=color.substring(6,color.length());
      }
      if (count++ != 0)       sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(fcC.getMapperUrl()).append(""String_Node_Str"").append(calId).append(""String_Node_Str"").append(""String_Node_Str"").append(color).append(""String_Node_Str"").append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormJSHelper.generateXHRFnCallVariables(rootForm,formId,1)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormJSHelper.generateXHRFnCallVariables(rootForm,formId,1)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormJSHelper.generateXHRFnCallVariables(rootForm,formId,1)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormJSHelper.generateXHRFnCallVariables(rootForm,formId,1)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
}","@Override public void render(Renderer renderer,StringOutput sb,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  FullCalendarComponent fcC=(FullCalendarComponent)source;
  FullCalendarElement fcE=fcC.getCalendarElement();
  Form rootForm=fcE.getRootForm();
  String id=""String_Node_Str"" + fcC.getDispatchID();
  String formId=fcE.getFormDispatchId();
  Calendar cal=Calendar.getInstance(fcC.getTranslator().getLocale());
  int firstDay=cal.getFirstDayOfWeek() - 1;
  cal=Calendar.getInstance();
  cal.setTime(fcC.getCurrentDate());
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(getMonthLong(translator)).append(""String_Node_Str"").append(""String_Node_Str"").append(getMonthShort(translator)).append(""String_Node_Str"").append(""String_Node_Str"").append(getDayLong(translator)).append(""String_Node_Str"").append(""String_Node_Str"").append(getDayShort(translator)).append(""String_Node_Str"").append(""String_Node_Str"").append(cal.get(Calendar.YEAR)).append(""String_Node_Str"").append(""String_Node_Str"").append(cal.get(Calendar.MONTH)).append(""String_Node_Str"").append(""String_Node_Str"").append(cal.get(Calendar.DAY_OF_MONTH)).append(""String_Node_Str"").append(""String_Node_Str"").append(firstDay).append(""String_Node_Str"").append(""String_Node_Str"").append(fcC.getViewName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  int count=0;
  for (  KalendarRenderWrapper calWrapper : fcC.getKalendarRenderWrappers()) {
    if (calWrapper.getKalendarConfig().isVis()) {
      String calId=calWrapper.getKalendar().getCalendarID();
      String color=calWrapper.getKalendarConfig().getCss();
      if (StringHelper.containsNonWhitespace(color) && color.startsWith(""String_Node_Str"")) {
        color=color.substring(6,color.length());
      }
      if (count++ != 0)       sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(fcC.getMapperUrl()).append(""String_Node_Str"").append(calId).append(""String_Node_Str"").append(""String_Node_Str"").append(color).append(""String_Node_Str"").append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormJSHelper.generateXHRFnCallVariables(rootForm,formId,1)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormJSHelper.generateXHRFnCallVariables(rootForm,formId,1)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormJSHelper.generateXHRFnCallVariables(rootForm,formId,1)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormJSHelper.generateXHRFnCallVariables(rootForm,formId,1)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
}"
69782,"private String getDayLong(Translator translator){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"");
  return sb.toString();
}","private String getDayLong(Translator translator){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
  return sb.toString();
}"
69783,"private String getDayShort(Translator translator){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"").append(translator.translate(""String_Node_Str"")).append(""String_Node_Str"");
  return sb.toString();
}","private String getDayShort(Translator translator){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"").append(escapeJavaScript(translator.translate(""String_Node_Str""))).append(""String_Node_Str"");
  return sb.toString();
}"
69784,"/** 
 * Process the list of nodes to import. Call importNode on each node, starting at currentPos in the list of nodes. If a node provides a Controller, set the activeImportController to the Controller returned by the importNode(), active this controller and return false. The calling method should then just exit its event() method and yield control to the activeImportController. When the activeImportController is finished, it sends a Event.DONE_EVENT and this controller continues to process the nodes in the list.
 * @param ureq
 * @return True if the whole list is processed, false otherwise.
 */
private boolean processNodeList(UserRequest ureq){
  while (nodeListPos < nodeList.size()) {
    CourseEditorTreeNode nextNode=nodeList.get(nodeListPos);
    nodeListPos++;
    Controller ctrl=nextNode.getCourseNode().importNode(course.getCourseExportDataDir().getBasefile(),course,false,ureq,getWindowControl());
    if (ctrl != null) {
      removeAsListenerAndDispose(activeImportController);
      activeImportController=ctrl;
      listenTo(activeImportController);
      while (importYesMode) {
        if (ctrl instanceof ImportReferencesController) {
          ((ImportReferencesController)ctrl).importWithoutAsking(ureq);
          break;
        }
        if (ctrl instanceof ImportPortfolioReferencesController) {
          ((ImportPortfolioReferencesController)ctrl).importWithoutAsking(ureq);
          break;
        }
        break;
      }
      if (nodeListPos == nodeList.size()) {
        return true;
      }
      myPanel.setContent(activeImportController.getInitialComponent());
      return false;
    }
 else {
      if (nodeListPos == nodeList.size()) {
        return true;
      }
    }
  }
  return true;
}","/** 
 * Process the list of nodes to import. Call importNode on each node, starting at currentPos in the list of nodes. If a node provides a Controller, set the activeImportController to the Controller returned by the importNode(), active this controller and return false. The calling method should then just exit its event() method and yield control to the activeImportController. When the activeImportController is finished, it sends a Event.DONE_EVENT and this controller continues to process the nodes in the list.
 * @param ureq
 * @return True if the whole list is processed, false otherwise.
 */
private boolean processNodeList(UserRequest ureq){
  while (nodeListPos < nodeList.size()) {
    CourseEditorTreeNode nextNode=nodeList.get(nodeListPos);
    nodeListPos++;
    Controller ctrl=nextNode.getCourseNode().importNode(course.getCourseExportDataDir().getBasefile(),course,false,ureq,getWindowControl());
    if (ctrl != null) {
      removeAsListenerAndDispose(activeImportController);
      activeImportController=ctrl;
      listenTo(activeImportController);
      while (importYesMode) {
        if (ctrl instanceof ImportReferencesController) {
          ((ImportReferencesController)ctrl).importWithoutAsking(ureq);
          break;
        }
        if (ctrl instanceof ImportPortfolioReferencesController) {
          ((ImportPortfolioReferencesController)ctrl).importWithoutAsking(ureq);
          break;
        }
        break;
      }
      myPanel.setContent(activeImportController.getInitialComponent());
      return false;
    }
 else     if (nodeListPos == nodeList.size()) {
      return true;
    }
  }
  return true;
}"
69785,"public FlexiTableElementImpl(UserRequest ureq,String name,Translator translator,FlexiTableDataModel tableModel,FlexiTableDataSource<?> dataSource,int pageSize,boolean searchField){
  super(name);
  this.dataModel=tableModel;
  this.dataSource=dataSource;
  component=new FlexiTableComponent(this,translator);
  MapperService mapper=CoreSpringFactory.getImpl(MapperService.class);
  mapperUrl=mapper.register(ureq.getUserSession(),new FlexiTableModelMapper(component));
  this.searchField=searchField;
  if (searchField) {
    String dispatchId=component.getDispatchID();
    searchFieldEl=new TextElementImpl(dispatchId + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    searchFieldEl.showLabel(false);
    searchButton=new FormLinkImpl(dispatchId + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.BUTTON);
    searchButton.setTranslator(translator);
    components.put(""String_Node_Str"",searchFieldEl);
    components.put(""String_Node_Str"",searchButton);
  }
  this.pageSize=pageSize;
  if (pageSize > 0) {
    setPage(0);
  }
  if (dataSource != null) {
    dataSource.load(0,pageSize);
  }
}","public FlexiTableElementImpl(UserRequest ureq,String name,Translator translator,FlexiTableDataModel tableModel,FlexiTableDataSource<?> dataSource,int pageSize,boolean searchField){
  super(name);
  this.dataModel=tableModel;
  this.dataSource=dataSource;
  component=new FlexiTableComponent(this,translator);
  MapperService mapper=CoreSpringFactory.getImpl(MapperService.class);
  mapperUrl=mapper.register(ureq.getUserSession(),new FlexiTableModelMapper(component));
  this.searchField=searchField;
  if (searchField) {
    String dispatchId=component.getDispatchID();
    searchFieldEl=new TextElementImpl(dispatchId + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    searchFieldEl.showLabel(false);
    searchButton=new FormLinkImpl(dispatchId + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.BUTTON);
    searchButton.setTranslator(translator);
    searchButton.setCustomEnabledLinkCSS(""String_Node_Str"");
    components.put(""String_Node_Str"",searchFieldEl);
    components.put(""String_Node_Str"",searchButton);
  }
  this.pageSize=pageSize;
  if (pageSize > 0) {
    setPage(0);
  }
  if (dataSource != null) {
    dataSource.load(0,pageSize);
  }
}"
69786,"/** 
 * @see org.olat.core.gui.control.generic.dtabs.DTabs#addDTab(org.olat.core.gui.control.generic.dtabs.DTab)
 */
public boolean addDTab(UserRequest ureq,DTab dt){
  if (isDisposed()) {
    return false;
  }
  DTab old=getDTab(dt.getOLATResourceable());
  if (old != null) {
    return true;
  }
synchronized (dtabs) {
    dtabs.add(dt);
    dtabsLinkNames.add(Integer.toString(dtabCreateCounter));
    Link link=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    link.setCustomDisplayText(((DTabImpl)dt).getNavElement().getTitle());
    link.setTitle(dt.getTitle());
    link.setUserObject(dt);
    link.setAccessKey(""String_Node_Str"");
    Link calink=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    calink.setCustomEnabledLinkCSS(""String_Node_Str"");
    calink.setTitle(translate(""String_Node_Str""));
    calink.setTooltip(translate(""String_Node_Str""));
    calink.setUserObject(dt);
    Link cplink=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    cplink.setCustomEnabledLinkCSS(""String_Node_Str"");
    cplink.setTitle(translate(""String_Node_Str""));
    cplink.setTooltip(translate(""String_Node_Str""));
    cplink.setUserObject(dt);
    Controller dtabCtr=dt.getController();
    dtabCtr.addControllerListener(this);
    updateBusinessPath(ureq,dt);
    dtabsControllers.add(dtabCtr);
    dtabCreateCounter++;
  }
  return true;
}","/** 
 * @see org.olat.core.gui.control.generic.dtabs.DTabs#addDTab(org.olat.core.gui.control.generic.dtabs.DTab)
 */
public boolean addDTab(UserRequest ureq,DTab dt){
  if (isDisposed()) {
    return false;
  }
  DTab old=getDTab(dt.getOLATResourceable());
  if (old != null) {
    return true;
  }
synchronized (dtabs) {
    dtabs.add(dt);
    dtabsLinkNames.add(Integer.toString(dtabCreateCounter));
    Link link=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    link.setCustomDisplayText(((DTabImpl)dt).getNavElement().getTitle());
    link.setTitle(dt.getTitle());
    link.setUserObject(dt);
    link.setAccessKey(""String_Node_Str"");
    Link calink=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    calink.setCustomEnabledLinkCSS(""String_Node_Str"");
    calink.setTitle(translate(""String_Node_Str""));
    calink.setUserObject(dt);
    Link cplink=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    cplink.setCustomEnabledLinkCSS(""String_Node_Str"");
    cplink.setTitle(translate(""String_Node_Str""));
    cplink.setUserObject(dt);
    Controller dtabCtr=dt.getController();
    dtabCtr.addControllerListener(this);
    updateBusinessPath(ureq,dt);
    dtabsControllers.add(dtabCtr);
    dtabCreateCounter++;
  }
  return true;
}"
69787,"public QTI12PreviewController(UserRequest ureq,WindowControl wControl,QuestionItem qitem){
  super(ureq,wControl);
  qpoolService=CoreSpringFactory.getImpl(QPoolService.class);
  mainVC=createVelocityContainer(""String_Node_Str"");
  mainPanel=new Panel(""String_Node_Str"");
  VFSLeaf leaf=qpoolService.getRootFile(qitem);
  if (leaf == null) {
  }
 else {
    Item item=QTIEditHelper.readItemXml(leaf);
    if (item != null) {
      Translator translator=Util.createPackageTranslator(QTIEditorPackage.class,getLocale());
      VFSContainer directory=qpoolService.getRootDirectory(qitem);
      String mapperUrl=registerMapper(ureq,new VFSContainerMapper(directory));
      previewCtrl=new ItemPreviewController(wControl,item,mapperUrl,translator);
      listenTo(previewCtrl);
      mainPanel.setContent(previewCtrl.getInitialComponent());
      metadataCtrl=new QTI12MetadataController(ureq,getWindowControl(),item);
      listenTo(metadataCtrl);
      mainVC.put(""String_Node_Str"",metadataCtrl.getInitialComponent());
    }
  }
  mainVC.put(""String_Node_Str"",mainPanel);
  putInitialPanel(mainVC);
}","public QTI12PreviewController(UserRequest ureq,WindowControl wControl,QuestionItem qitem,boolean summary){
  super(ureq,wControl);
  qpoolService=CoreSpringFactory.getImpl(QPoolService.class);
  mainVC=createVelocityContainer(""String_Node_Str"");
  mainPanel=new Panel(""String_Node_Str"");
  VFSLeaf leaf=qpoolService.getRootFile(qitem);
  if (leaf == null) {
  }
 else {
    Item item=QTIEditHelper.readItemXml(leaf);
    if (item != null) {
      Translator translator=Util.createPackageTranslator(QTIEditorPackage.class,getLocale());
      VFSContainer directory=qpoolService.getRootDirectory(qitem);
      String mapperUrl=registerMapper(ureq,new VFSContainerMapper(directory));
      previewCtrl=new ItemPreviewController(wControl,item,mapperUrl,translator);
      listenTo(previewCtrl);
      mainPanel.setContent(previewCtrl.getInitialComponent());
      if (!summary) {
        metadataCtrl=new QTI12MetadataController(ureq,getWindowControl(),item);
        listenTo(metadataCtrl);
        mainVC.put(""String_Node_Str"",metadataCtrl.getInitialComponent());
      }
    }
  }
  mainVC.put(""String_Node_Str"",mainPanel);
  putInitialPanel(mainVC);
}"
69788,"/** 
 * @see org.olat.repository.controllers.IAddController#transactionFinishBeforeCreate()
 */
public boolean transactionFinishBeforeCreate(){
  File fTempQTI=new File(WebappHelper.getTmpDir(),CodeHelper.getUniqueID() + ""String_Node_Str"");
  tmpPackage=new QTIEditorPackageImpl(DUMMY_TITLE,type,locale);
  if (!tmpPackage.savePackageTo(fTempQTI))   return false;
  try {
    return (FileResourceManager.getInstance().addFileResource(fTempQTI,""String_Node_Str"",resource) != null);
  }
 catch (  AddingResourceException e) {
    Tracing.logWarn(""String_Node_Str"",e,AddNewQTIDocumentController.class);
    return false;
  }
}","/** 
 * @see org.olat.repository.controllers.IAddController#transactionFinishBeforeCreate()
 */
public boolean transactionFinishBeforeCreate(){
  File fTempQTI=new File(WebappHelper.getTmpDir(),CodeHelper.getUniqueID() + ""String_Node_Str"");
  tmpPackage=new QTIEditorPackageImpl(DUMMY_TITLE,type,locale);
  if (addCallback != null) {
    Object object=addCallback.getUserObject();
    if (object instanceof QItemList) {
      QItemList itemToImport=(QItemList)object;
      QTIQPoolServiceProvider provider=(QTIQPoolServiceProvider)CoreSpringFactory.getBean(""String_Node_Str"");
      provider.exportToEditorPackage(tmpPackage,itemToImport.getItems());
    }
  }
  if (!tmpPackage.savePackageTo(fTempQTI))   return false;
  try {
    return (FileResourceManager.getInstance().addFileResource(fTempQTI,""String_Node_Str"",resource) != null);
  }
 catch (  AddingResourceException e) {
    Tracing.logWarn(""String_Node_Str"",e,AddNewQTIDocumentController.class);
    return false;
  }
}"
69789,"/** 
 * @param type
 * @param addCallback
 * @param ureq
 * @param wControl
 */
public AddNewQTIDocumentController(String type,RepositoryAddCallback addCallback,UserRequest ureq,WindowControl wControl){
  super(wControl);
  this.type=type;
  this.translator=new PackageTranslator(PACKAGE_REPOSITORY,ureq.getLocale());
  this.locale=ureq.getLocale();
  if (type.equals(AssessmentInstance.QMD_ENTRY_TYPE_ASSESS)) {
    resource=new TestFileResource();
  }
 else   if (type.equals(AssessmentInstance.QMD_ENTRY_TYPE_SURVEY)) {
    resource=new SurveyFileResource();
  }
  if (addCallback != null) {
    addCallback.setResourceable(resource);
    addCallback.setDisplayName(translator.translate(resource.getResourceableTypeName()));
    addCallback.setResourceName(""String_Node_Str"");
    addCallback.finished(ureq);
  }
}","/** 
 * @param type
 * @param addCallback
 * @param ureq
 * @param wControl
 */
public AddNewQTIDocumentController(String type,RepositoryAddCallback addCallback,UserRequest ureq,WindowControl wControl){
  super(wControl);
  this.type=type;
  this.translator=new PackageTranslator(PACKAGE_REPOSITORY,ureq.getLocale());
  this.locale=ureq.getLocale();
  if (type.equals(AssessmentInstance.QMD_ENTRY_TYPE_ASSESS)) {
    resource=new TestFileResource();
  }
 else   if (type.equals(AssessmentInstance.QMD_ENTRY_TYPE_SURVEY)) {
    resource=new SurveyFileResource();
  }
  this.addCallback=addCallback;
  if (addCallback != null) {
    addCallback.setResourceable(resource);
    addCallback.setDisplayName(translator.translate(resource.getResourceableTypeName()));
    addCallback.setResourceName(""String_Node_Str"");
    addCallback.finished(ureq);
  }
}"
69790,"/** 
 * Package the package to the given file.
 * @param fOut
 * @return True upon success.
 */
public boolean savePackageTo(File fOut){
  saveQTIDocument(qtiDocument.getDocument());
  Set files=new HashSet(3);
  files.add(ImsRepositoryResolver.QTI_FILE);
  files.add(""String_Node_Str"");
  files.add(""String_Node_Str"");
  return ZipUtil.zip(files,packageDir,fOut,false);
}","/** 
 * Package the package to the given file.
 * @param fOut
 * @return True upon success.
 */
public boolean savePackageTo(File fOut){
  saveQTIDocument(qtiDocument.getDocument());
  Set<String> files=new HashSet<String>(3);
  files.add(ImsRepositoryResolver.QTI_FILE);
  files.add(""String_Node_Str"");
  files.add(""String_Node_Str"");
  return ZipUtil.zip(files,packageDir,fOut,false);
}"
69791,"/** 
 * Sets the sections.
 * @param sections The sections to set
 */
public void setSections(List sections){
  this.sections=sections;
}","/** 
 * Sets the sections.
 * @param sections The sections to set
 */
public void setSections(List<Section> sections){
  this.sections=sections;
}"
69792,"/** 
 * Returns the sections.
 * @return List
 */
public List getSections(){
  return sections;
}","/** 
 * Returns the sections.
 * @return List
 */
public List<Section> getSections(){
  return sections;
}"
69793,"/** 
 * Returns the items.
 * @return List
 */
public List getItems(){
  return items;
}","/** 
 * Returns the items.
 * @return List
 */
public List<Item> getItems(){
  return items;
}"
69794,"/** 
 * @see org.olat.ims.qti.editor.beecom.QTIObject#toXml()
 */
public void addToElement(Element root){
  Element section=root.addElement(""String_Node_Str"");
  section.addAttribute(""String_Node_Str"",this.ident);
  section.addAttribute(""String_Node_Str"",this.title);
  QTIObject obj_duration=this.getDuration();
  if (obj_duration != null) {
    obj_duration.addToElement(section);
  }
  QTIEditHelper.addObjectives(section,objectives);
  for (Iterator i=this.sectioncontrols.iterator(); i.hasNext(); ) {
    QTIObject obj=(QTIObject)i.next();
    if (obj != null) {
      obj.addToElement(section);
    }
  }
  QTIObject obj_outcomes_processing=this.getOutcomes_processing();
  if (obj_outcomes_processing != null) {
    obj_outcomes_processing.addToElement(section);
  }
  for (Iterator i=this.sectionfeedbacks.iterator(); i.hasNext(); ) {
    QTIObject obj=(QTIObject)i.next();
    if (obj != null) {
      obj.addToElement(section);
    }
  }
  SelectionOrdering selectionOrdering=this.getSelection_ordering();
  if (selectionOrdering != null) {
    selectionOrdering.addToElement(section);
  }
  for (Iterator i=this.items.iterator(); i.hasNext(); ) {
    QTIObject obj=(QTIObject)i.next();
    if (obj != null) {
      obj.addToElement(section);
    }
  }
}","/** 
 * @see org.olat.ims.qti.editor.beecom.QTIObject#toXml()
 */
public void addToElement(Element root){
  Element section=root.addElement(""String_Node_Str"");
  section.addAttribute(""String_Node_Str"",this.ident);
  section.addAttribute(""String_Node_Str"",this.title);
  QTIObject obj_duration=this.getDuration();
  if (obj_duration != null) {
    obj_duration.addToElement(section);
  }
  QTIEditHelper.addObjectives(section,objectives);
  for (Iterator i=this.sectioncontrols.iterator(); i.hasNext(); ) {
    QTIObject obj=(QTIObject)i.next();
    if (obj != null) {
      obj.addToElement(section);
    }
  }
  QTIObject obj_outcomes_processing=this.getOutcomes_processing();
  if (obj_outcomes_processing != null) {
    obj_outcomes_processing.addToElement(section);
  }
  for (Iterator i=this.sectionfeedbacks.iterator(); i.hasNext(); ) {
    QTIObject obj=(QTIObject)i.next();
    if (obj != null) {
      obj.addToElement(section);
    }
  }
  SelectionOrdering selectionOrdering=this.getSelection_ordering();
  if (selectionOrdering != null) {
    selectionOrdering.addToElement(section);
  }
  for (Iterator<Item> i=this.items.iterator(); i.hasNext(); ) {
    QTIObject obj=(QTIObject)i.next();
    if (obj != null) {
      obj.addToElement(section);
    }
  }
}"
69795,"public boolean checkAlienItems(){
  alienItems=false;
  for (Iterator iter=items.iterator(); iter.hasNext(); ) {
    Item element=(Item)iter.next();
    alienItems=alienItems || element.isAlient();
  }
  return alienItems;
}","public boolean checkAlienItems(){
  alienItems=false;
  for (Iterator<Item> iter=items.iterator(); iter.hasNext(); ) {
    Item element=(Item)iter.next();
    alienItems=alienItems || element.isAlient();
  }
  return alienItems;
}"
69796,"/** 
 * takes the assessment object tree and converts it to a QTIEditorTreeModel
 */
private void init(){
  Assessment ass=qtiPackage.getQTIDocument().getAssessment();
  GenericQtiNode rootNode=new AssessmentNode(ass,qtiPackage);
  this.setRootNode(rootNode);
  List sections=ass.getSections();
  for (int i=0; i < sections.size(); i++) {
    Section elem=(Section)sections.get(i);
    GenericQtiNode sectionNode=new SectionNode(elem,qtiPackage);
    List items=elem.getItems();
    for (int j=0; j < items.size(); j++) {
      Item elem2=(Item)items.get(j);
      GenericQtiNode itemNode=new ItemNode(elem2,qtiPackage);
      sectionNode.addChild(itemNode);
    }
    rootNode.addChild(sectionNode);
  }
}","/** 
 * takes the assessment object tree and converts it to a QTIEditorTreeModel
 */
private void init(){
  Assessment ass=qtiPackage.getQTIDocument().getAssessment();
  GenericQtiNode rootNode=new AssessmentNode(ass,qtiPackage);
  this.setRootNode(rootNode);
  List sections=ass.getSections();
  for (int i=0; i < sections.size(); i++) {
    Section elem=(Section)sections.get(i);
    GenericQtiNode sectionNode=new SectionNode(elem,qtiPackage);
    List<Item> items=elem.getItems();
    for (int j=0; j < items.size(); j++) {
      Item elem2=(Item)items.get(j);
      GenericQtiNode itemNode=new ItemNode(elem2,qtiPackage);
      sectionNode.addChild(itemNode);
    }
    rootNode.addChild(sectionNode);
  }
}"
69797,"protected void collectMaterials(QuestionItemFull fullItem,ItemsAndMaterials materials){
  String dir=fullItem.getDirectory();
  String rootFilename=fullItem.getRootFilename();
  VFSContainer container=qpoolFileStorage.getContainer(dir);
  VFSItem rootItem=container.resolve(rootFilename);
  if (rootItem instanceof VFSLeaf) {
    VFSLeaf rootLeaf=(VFSLeaf)rootItem;
    Element el=(Element)readItemXml(rootLeaf).clone();
    Element itemEl=(Element)el.clone();
    enrichScore(itemEl);
    enrichWithMetadata(fullItem,itemEl);
    collectResources(itemEl,container,materials);
    materials.addItemEl(itemEl);
  }
}","protected void collectMaterials(QuestionItemFull fullItem,ItemsAndMaterials materials){
  String dir=fullItem.getDirectory();
  String rootFilename=fullItem.getRootFilename();
  VFSContainer container=qpoolFileStorage.getContainer(dir);
  VFSItem rootItem=container.resolve(rootFilename);
  if (rootItem instanceof VFSLeaf) {
    VFSLeaf rootLeaf=(VFSLeaf)rootItem;
    Element el=(Element)readItemXml(rootLeaf).clone();
    Element itemEl=(Element)el.clone();
    enrichWithMetadata(fullItem,itemEl);
    collectResources(itemEl,container,materials);
    materials.addItemEl(itemEl);
  }
}"
69798,"@Override public MediaResource exportTest(List<QuestionItemShort> items,String format){
  return new QTIExportTestResource(""String_Node_Str"",items,this);
}","@Override public MediaResource exportTest(List<QuestionItemShort> items,ExportFormatOptions format){
  if (QTIConstants.QTI_12_FORMAT.equals(format.getFormat())) {
    return new QTIExportTestResource(""String_Node_Str"",items,this);
  }
  return null;
}"
69799,"@Override public Controller getPreviewController(UserRequest ureq,WindowControl wControl,QuestionItem item){
  QTI12PreviewController previewCtrl=new QTI12PreviewController(ureq,wControl,item);
  return previewCtrl;
}","@Override public Controller getPreviewController(UserRequest ureq,WindowControl wControl,QuestionItem item,boolean summary){
  QTI12PreviewController previewCtrl=new QTI12PreviewController(ureq,wControl,item,summary);
  return previewCtrl;
}"
69800,"@Override public List<String> getTestExportFormats(){
  List<String> formats=new ArrayList<String>(2);
  formats.add(QPoolService.ZIP_EXPORT_FORMAT);
  formats.add(QTIConstants.QTI_12_FORMAT);
  return formats;
}","@Override public List<ExportFormatOptions> getTestExportFormats(){
  return Collections.unmodifiableList(formats);
}"
69801,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    backLink=uifactory.addFormLink(""String_Node_Str"",formLayout);
    searchPanel=new Panel(""String_Node_Str"");
    layoutCont.put(""String_Node_Str"",searchPanel);
    Roles roles=ureq.getUserSession().getRoles();
    isAdministrativeUser=securityModule.isUserAllowedAdminProps(roles);
    searchform=new UserSearchForm(ureq,getWindowControl(),isAdministrativeUser,false,mainForm);
    listenTo(searchform);
    searchPanel.setContent(searchform.getInitialComponent());
    layoutCont.add(searchform.getInitialFormItem());
    layoutCont.contextPut(""String_Node_Str"",""String_Node_Str"");
    layoutCont.contextPut(""String_Node_Str"",""String_Node_Str"");
    boolean autoCompleteAllowed=securityModule.isUserAllowedAutoComplete(roles);
    boolean ajax=Windows.getWindows(ureq).getWindowManager().isAjaxEnabled();
    if (ajax && autoCompleteAllowed) {
      ListProvider provider=new UserSearchListProvider();
      autocompleterC=new FlexiAutoCompleterController(ureq,getWindowControl(),provider,null,isAdministrativeUser,60,3,null,mainForm);
      listenTo(autocompleterC);
      layoutCont.put(""String_Node_Str"",autocompleterC.getInitialComponent());
    }
    tableVC=createVelocityContainer(""String_Node_Str"");
    FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
    int colPos=0;
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
    if (isAdministrativeUser) {
      tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
    }
    List<UserPropertyHandler> userPropertyHandlers=userManager.getUserPropertyHandlersFor(usageIdentifyer,isAdministrativeUser);
    List<UserPropertyHandler> resultingPropertyHandlers=new ArrayList<UserPropertyHandler>();
    for (int i=0; i < userPropertyHandlers.size(); i++) {
      UserPropertyHandler userPropertyHandler=userPropertyHandlers.get(i);
      boolean visible=UserManager.getInstance().isMandatoryUserProperty(usageIdentifyer,userPropertyHandler);
      if (visible) {
        resultingPropertyHandlers.add(userPropertyHandler);
        tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(userPropertyHandler.i18nColumnDescriptorLabelKey(),colPos++));
      }
    }
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
    Translator myTrans=userManager.getPropertyHandlerTranslator(getTranslator());
    userTableModel=new UserSearchFlexiTableModel(Collections.<UserResultWrapper>emptyList(),resultingPropertyHandlers,isAdministrativeUser,getLocale(),tableColumnModel);
    tableEl=uifactory.addTableElement(ureq,""String_Node_Str"",userTableModel,myTrans,formLayout);
    selectAll=uifactory.addFormLink(""String_Node_Str"",formLayout);
    deselectAll=uifactory.addFormLink(""String_Node_Str"",formLayout);
    tableVC.put(""String_Node_Str"",tableEl.getComponent());
    tableVC.put(""String_Node_Str"",selectAll.getComponent());
    tableVC.put(""String_Node_Str"",deselectAll.getComponent());
  }
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    backLink=uifactory.addFormLink(""String_Node_Str"",formLayout);
    searchPanel=new Panel(""String_Node_Str"");
    layoutCont.put(""String_Node_Str"",searchPanel);
    Roles roles=ureq.getUserSession().getRoles();
    isAdministrativeUser=securityModule.isUserAllowedAdminProps(roles);
    searchform=new UserSearchForm(ureq,getWindowControl(),isAdministrativeUser,false,mainForm);
    listenTo(searchform);
    searchPanel.setContent(searchform.getInitialComponent());
    layoutCont.add(searchform.getInitialFormItem());
    layoutCont.contextPut(""String_Node_Str"",""String_Node_Str"");
    layoutCont.contextPut(""String_Node_Str"",""String_Node_Str"");
    boolean autoCompleteAllowed=securityModule.isUserAllowedAutoComplete(roles);
    boolean ajax=Windows.getWindows(ureq).getWindowManager().isAjaxEnabled();
    if (ajax && autoCompleteAllowed) {
      ListProvider provider=new UserSearchListProvider();
      autocompleterC=new FlexiAutoCompleterController(ureq,getWindowControl(),provider,null,isAdministrativeUser,60,3,null,mainForm);
      listenTo(autocompleterC);
      layoutCont.put(""String_Node_Str"",autocompleterC.getInitialComponent());
    }
    tableVC=createVelocityContainer(""String_Node_Str"");
    FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
    int colPos=0;
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
    if (isAdministrativeUser) {
      tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
    }
    List<UserPropertyHandler> userPropertyHandlers=userManager.getUserPropertyHandlersFor(usageIdentifyer,isAdministrativeUser);
    List<UserPropertyHandler> resultingPropertyHandlers=new ArrayList<UserPropertyHandler>();
    for (int i=0; i < userPropertyHandlers.size(); i++) {
      UserPropertyHandler userPropertyHandler=userPropertyHandlers.get(i);
      boolean visible=UserManager.getInstance().isMandatoryUserProperty(usageIdentifyer,userPropertyHandler);
      if (visible) {
        resultingPropertyHandlers.add(userPropertyHandler);
        tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(userPropertyHandler.i18nColumnDescriptorLabelKey(),colPos++));
      }
    }
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
    Translator myTrans=userManager.getPropertyHandlerTranslator(getTranslator());
    userTableModel=new UserSearchFlexiTableModel(Collections.<UserResultWrapper>emptyList(),resultingPropertyHandlers,isAdministrativeUser,getLocale(),tableColumnModel);
    tableEl=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",userTableModel,myTrans,formLayout);
    selectAll=uifactory.addFormLink(""String_Node_Str"",formLayout);
    deselectAll=uifactory.addFormLink(""String_Node_Str"",formLayout);
    tableVC.put(""String_Node_Str"",tableEl.getComponent());
    tableVC.put(""String_Node_Str"",selectAll.getComponent());
    tableVC.put(""String_Node_Str"",deselectAll.getComponent());
  }
}"
69802,"@SuppressWarnings(""String_Node_Str"") @Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FormLayoutContainer formLayoutVertical=FormLayoutContainer.createVerticalFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(formLayoutVertical);
  setFormTitle(""String_Node_Str"");
  List<List<String>> mergedDataChanges=new ArrayList<List<String>>();
  textContainer=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),this.velocity_root + ""String_Node_Str"");
  formLayoutVertical.add(textContainer);
  boolean validChange=(Boolean)getFromRunContext(""String_Node_Str"");
  textContainer.contextPut(""String_Node_Str"",validChange);
  if (!validChange)   return;
  List<Identity> selectedIdentities=(List<Identity>)getFromRunContext(""String_Node_Str"");
  HashMap<String,String> attributeChangeMap=(HashMap<String,String>)getFromRunContext(""String_Node_Str"");
  HashMap<String,String> roleChangeMap=(HashMap<String,String>)getFromRunContext(""String_Node_Str"");
  Roles roles=ureq.getUserSession().getRoles();
  boolean isAdministrativeUser=(roles.isAuthor() || roles.isGroupManager() || roles.isUserManager()|| roles.isOLATAdmin());
  userPropertyHandlers=UserManager.getInstance().getUserPropertyHandlersFor(usageIdentifyer,isAdministrativeUser);
  String[] securityGroups={Constants.GROUP_USERMANAGERS,Constants.GROUP_GROUPMANAGERS,Constants.GROUP_AUTHORS,Constants.GROUP_ADMIN};
  for (  Identity identity : selectedIdentities) {
    List<String> userDataArray=new ArrayList<String>();
    userDataArray.add(identity.getName());
    if (attributeChangeMap.containsKey(UserBulkChangeManager.PWD_IDENTIFYER)) {
      userDataArray.add(attributeChangeMap.get(UserBulkChangeManager.PWD_IDENTIFYER));
    }
 else     userDataArray.add(""String_Node_Str"");
    String userLanguage=identity.getUser().getPreferences().getLanguage();
    if (attributeChangeMap.containsKey(UserBulkChangeManager.LANG_IDENTIFYER)) {
      String inputLanguage=attributeChangeMap.get(UserBulkChangeManager.LANG_IDENTIFYER);
      if (userLanguage.equals(inputLanguage)) {
        userDataArray.add(userLanguage);
      }
 else {
        userDataArray.add(""String_Node_Str"" + inputLanguage + ""String_Node_Str"");
      }
    }
 else {
      userDataArray.add(userLanguage);
    }
    Context vcContext=new VelocityContext();
    ubcMan.setUserContext(identity,vcContext,isAdministrativeUser);
    for (int k=0; k < userPropertyHandlers.size(); k++) {
      String propertyName=userPropertyHandlers.get(k).getName();
      String userValue=identity.getUser().getProperty(propertyName,null);
      String inputFieldValue=""String_Node_Str"";
      if (attributeChangeMap.containsKey(propertyName)) {
        inputFieldValue=attributeChangeMap.get(propertyName);
        inputFieldValue=inputFieldValue.replace(""String_Node_Str"",""String_Node_Str"");
        String evaluatedInputFieldValue=ubcMan.evaluateValueWithUserContext(inputFieldValue,vcContext);
        if (evaluatedInputFieldValue.equals(userValue)) {
          userDataArray.add(userValue);
        }
 else {
          userDataArray.add(""String_Node_Str"" + evaluatedInputFieldValue + ""String_Node_Str"");
        }
      }
 else {
        userDataArray.add(userValue);
      }
    }
    for (    String securityGroup : securityGroups) {
      String roleStatus=getRoleStatusForIdentity(identity,securityGroup,roleChangeMap);
      userDataArray.add(roleStatus);
    }
    userDataArray.add(roleChangeMap.get(""String_Node_Str""));
    mergedDataChanges.add(userDataArray);
  }
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  int colPos=0;
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  for (int j=0; j < userPropertyHandlers.size(); j++) {
    UserPropertyHandler userPropertyHandler=userPropertyHandlers.get(j);
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(userPropertyHandler.i18nColumnDescriptorLabelKey(),colPos++));
  }
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  FlexiTableDataModel tableDataModel=new FlexiTableDataModelImpl<List<String>>(new OverviewModel(mergedDataChanges,colPos),tableColumnModel);
  uifactory.addTableElement(ureq,""String_Node_Str"",tableDataModel,formLayoutVertical);
  Set<Long> allGroups=new HashSet<Long>();
  List<Long> ownGroups=(List<Long>)getFromRunContext(""String_Node_Str"");
  List<Long> partGroups=(List<Long>)getFromRunContext(""String_Node_Str"");
  allGroups.addAll(ownGroups);
  allGroups.addAll(partGroups);
  List<Long> mailGroups=(List<Long>)getFromRunContext(""String_Node_Str"");
  if (allGroups.size() != 0) {
    uifactory.addSpacerElement(""String_Node_Str"",formLayout,true);
    uifactory.addStaticTextElement(""String_Node_Str"",""String_Node_Str"",formLayout);
    FlexiTableColumnModel groupColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
    groupColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",0));
    groupColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",1));
    groupColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",2));
    groupColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",3));
    List<BusinessGroup> groups=businessGroupService.loadBusinessGroups(allGroups);
    TableDataModel<BusinessGroup> model=new GroupAddOverviewModel(groups,ownGroups,partGroups,mailGroups,getTranslator());
    FlexiTableDataModel groupDataModel=new FlexiTableDataModelImpl<BusinessGroup>(model,groupColumnModel);
    uifactory.addTableElement(ureq,""String_Node_Str"",groupDataModel,formLayout);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FormLayoutContainer formLayoutVertical=FormLayoutContainer.createVerticalFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(formLayoutVertical);
  setFormTitle(""String_Node_Str"");
  List<List<String>> mergedDataChanges=new ArrayList<List<String>>();
  textContainer=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),this.velocity_root + ""String_Node_Str"");
  formLayoutVertical.add(textContainer);
  boolean validChange=(Boolean)getFromRunContext(""String_Node_Str"");
  textContainer.contextPut(""String_Node_Str"",validChange);
  if (!validChange)   return;
  List<Identity> selectedIdentities=(List<Identity>)getFromRunContext(""String_Node_Str"");
  HashMap<String,String> attributeChangeMap=(HashMap<String,String>)getFromRunContext(""String_Node_Str"");
  HashMap<String,String> roleChangeMap=(HashMap<String,String>)getFromRunContext(""String_Node_Str"");
  Roles roles=ureq.getUserSession().getRoles();
  boolean isAdministrativeUser=(roles.isAuthor() || roles.isGroupManager() || roles.isUserManager()|| roles.isOLATAdmin());
  userPropertyHandlers=UserManager.getInstance().getUserPropertyHandlersFor(usageIdentifyer,isAdministrativeUser);
  String[] securityGroups={Constants.GROUP_USERMANAGERS,Constants.GROUP_GROUPMANAGERS,Constants.GROUP_AUTHORS,Constants.GROUP_ADMIN};
  for (  Identity identity : selectedIdentities) {
    List<String> userDataArray=new ArrayList<String>();
    userDataArray.add(identity.getName());
    if (attributeChangeMap.containsKey(UserBulkChangeManager.PWD_IDENTIFYER)) {
      userDataArray.add(attributeChangeMap.get(UserBulkChangeManager.PWD_IDENTIFYER));
    }
 else     userDataArray.add(""String_Node_Str"");
    String userLanguage=identity.getUser().getPreferences().getLanguage();
    if (attributeChangeMap.containsKey(UserBulkChangeManager.LANG_IDENTIFYER)) {
      String inputLanguage=attributeChangeMap.get(UserBulkChangeManager.LANG_IDENTIFYER);
      if (userLanguage.equals(inputLanguage)) {
        userDataArray.add(userLanguage);
      }
 else {
        userDataArray.add(""String_Node_Str"" + inputLanguage + ""String_Node_Str"");
      }
    }
 else {
      userDataArray.add(userLanguage);
    }
    Context vcContext=new VelocityContext();
    ubcMan.setUserContext(identity,vcContext,isAdministrativeUser);
    for (int k=0; k < userPropertyHandlers.size(); k++) {
      String propertyName=userPropertyHandlers.get(k).getName();
      String userValue=identity.getUser().getProperty(propertyName,null);
      String inputFieldValue=""String_Node_Str"";
      if (attributeChangeMap.containsKey(propertyName)) {
        inputFieldValue=attributeChangeMap.get(propertyName);
        inputFieldValue=inputFieldValue.replace(""String_Node_Str"",""String_Node_Str"");
        String evaluatedInputFieldValue=ubcMan.evaluateValueWithUserContext(inputFieldValue,vcContext);
        if (evaluatedInputFieldValue.equals(userValue)) {
          userDataArray.add(userValue);
        }
 else {
          userDataArray.add(""String_Node_Str"" + evaluatedInputFieldValue + ""String_Node_Str"");
        }
      }
 else {
        userDataArray.add(userValue);
      }
    }
    for (    String securityGroup : securityGroups) {
      String roleStatus=getRoleStatusForIdentity(identity,securityGroup,roleChangeMap);
      userDataArray.add(roleStatus);
    }
    userDataArray.add(roleChangeMap.get(""String_Node_Str""));
    mergedDataChanges.add(userDataArray);
  }
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  int colPos=0;
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  for (int j=0; j < userPropertyHandlers.size(); j++) {
    UserPropertyHandler userPropertyHandler=userPropertyHandlers.get(j);
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(userPropertyHandler.i18nColumnDescriptorLabelKey(),colPos++));
  }
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  FlexiTableDataModel tableDataModel=new FlexiTableDataModelImpl<List<String>>(new OverviewModel(mergedDataChanges,colPos),tableColumnModel);
  uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",tableDataModel,formLayoutVertical);
  Set<Long> allGroups=new HashSet<Long>();
  List<Long> ownGroups=(List<Long>)getFromRunContext(""String_Node_Str"");
  List<Long> partGroups=(List<Long>)getFromRunContext(""String_Node_Str"");
  allGroups.addAll(ownGroups);
  allGroups.addAll(partGroups);
  List<Long> mailGroups=(List<Long>)getFromRunContext(""String_Node_Str"");
  if (allGroups.size() != 0) {
    uifactory.addSpacerElement(""String_Node_Str"",formLayout,true);
    uifactory.addStaticTextElement(""String_Node_Str"",""String_Node_Str"",formLayout);
    FlexiTableColumnModel groupColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
    groupColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",0));
    groupColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",1));
    groupColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",2));
    groupColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",3));
    List<BusinessGroup> groups=businessGroupService.loadBusinessGroups(allGroups);
    TableDataModel<BusinessGroup> model=new GroupAddOverviewModel(groups,ownGroups,partGroups,mailGroups,getTranslator());
    FlexiTableDataModel groupDataModel=new FlexiTableDataModelImpl<BusinessGroup>(model,groupColumnModel);
    uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",groupDataModel,formLayout);
  }
}"
69803,"/** 
 * @see org.olat.core.gui.components.form.flexible.impl.FormBasicController#initForm(org.olat.core.gui.components.form.flexible.FormItemContainer,org.olat.core.gui.control.Controller,org.olat.core.gui.UserRequest)
 */
@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormDescription(""String_Node_Str"");
  search=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",100,""String_Node_Str"",formLayout);
  if (isUsedInStepWizzard()) {
    searchLink=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
  }
 else {
    searchButton=uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
    uifactory.addSpacerElement(""String_Node_Str"",formLayout,false);
  }
  errorComp=uifactory.createSimpleErrorText(""String_Node_Str"",""String_Node_Str"");
  formLayout.add(errorComp);
  tableCont=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),velocity_root + ""String_Node_Str"");
  tableCont.setRootForm(mainForm);
  formLayout.add(tableCont);
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.groupName.i18n(),Cols.groupName.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.description.i18n(),Cols.description.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.courses.i18n(),Cols.courses.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.tutor.i18n(),Cols.tutor.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.participant.i18n(),Cols.participant.ordinal()));
  tableDataModel=new GroupTableDataModel(Collections.<GroupWrapper>emptyList(),tableColumnModel);
  FlexiTableElement table=uifactory.addTableElement(ureq,""String_Node_Str"",tableDataModel,tableCont);
  tableCont.add(""String_Node_Str"",table);
  if (!isUsedInStepWizzard()) {
    saveLink=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
  }
}","/** 
 * @see org.olat.core.gui.components.form.flexible.impl.FormBasicController#initForm(org.olat.core.gui.components.form.flexible.FormItemContainer,org.olat.core.gui.control.Controller,org.olat.core.gui.UserRequest)
 */
@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  setFormDescription(""String_Node_Str"");
  search=uifactory.addTextElement(""String_Node_Str"",""String_Node_Str"",100,""String_Node_Str"",formLayout);
  if (isUsedInStepWizzard()) {
    searchLink=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
  }
 else {
    searchButton=uifactory.addFormSubmitButton(""String_Node_Str"",formLayout);
    uifactory.addSpacerElement(""String_Node_Str"",formLayout,false);
  }
  errorComp=uifactory.createSimpleErrorText(""String_Node_Str"",""String_Node_Str"");
  formLayout.add(errorComp);
  tableCont=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),velocity_root + ""String_Node_Str"");
  tableCont.setRootForm(mainForm);
  formLayout.add(tableCont);
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.groupName.i18n(),Cols.groupName.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.description.i18n(),Cols.description.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.courses.i18n(),Cols.courses.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.tutor.i18n(),Cols.tutor.ordinal()));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(Cols.participant.i18n(),Cols.participant.ordinal()));
  tableDataModel=new GroupTableDataModel(Collections.<GroupWrapper>emptyList(),tableColumnModel);
  FlexiTableElement table=uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",tableDataModel,tableCont);
  tableCont.add(""String_Node_Str"",table);
  if (!isUsedInStepWizzard()) {
    saveLink=uifactory.addFormLink(""String_Node_Str"",formLayout,Link.BUTTON);
  }
}"
69804,"@SuppressWarnings(""String_Node_Str"") @Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FormLayoutContainer formLayoutVertical=FormLayoutContainer.createVerticalFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(formLayoutVertical);
  idents=(List<Object>)getFromRunContext(""String_Node_Str"");
  newIdents=(ArrayList<List<String>>)getFromRunContext(""String_Node_Str"");
  textContainer=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),this.velocity_root + ""String_Node_Str"");
  formLayoutVertical.add(textContainer);
  int cntall=idents.size();
  int cntNew=newIdents.size();
  int cntOld=cntall - cntNew;
  textContainer.contextPut(""String_Node_Str"",newUsers);
  String overview=getTranslator().translate(""String_Node_Str"",new String[]{""String_Node_Str"" + cntall,""String_Node_Str"" + cntNew,""String_Node_Str"" + cntOld});
  textContainer.contextPut(""String_Node_Str"",overview);
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  int colPos=0;
  FlexiColumnModel newUserCustomColumnModel=new DefaultFlexiColumnModel(""String_Node_Str"",colPos++);
  newUserCustomColumnModel.setCellRenderer(new UserNewOldCustomFlexiCellRenderer());
  newUserCustomColumnModel.setAlignment(FlexiColumnModel.ALIGNMENT_CENTER);
  tableColumnModel.addFlexiColumnModel(newUserCustomColumnModel);
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  if (canCreateOLATPassword) {
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  }
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  userPropertyHandlers=UserManager.getInstance().getUserPropertyHandlersFor(usageIdentifyer,true);
  for (int i=0; i < userPropertyHandlers.size(); i++) {
    UserPropertyHandler userPropertyHandler=userPropertyHandlers.get(i);
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(userPropertyHandler.i18nColumnDescriptorLabelKey(),colPos++));
  }
  FlexiTableDataModel tableDataModel=new FlexiTableDataModelImpl(new Model(idents,colPos),tableColumnModel);
  uifactory.addTableElement(ureq,""String_Node_Str"",tableDataModel,formLayoutVertical);
}","@SuppressWarnings(""String_Node_Str"") @Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  FormLayoutContainer formLayoutVertical=FormLayoutContainer.createVerticalFormLayout(""String_Node_Str"",getTranslator());
  formLayout.add(formLayoutVertical);
  idents=(List<Object>)getFromRunContext(""String_Node_Str"");
  newIdents=(ArrayList<List<String>>)getFromRunContext(""String_Node_Str"");
  textContainer=FormLayoutContainer.createCustomFormLayout(""String_Node_Str"",getTranslator(),this.velocity_root + ""String_Node_Str"");
  formLayoutVertical.add(textContainer);
  int cntall=idents.size();
  int cntNew=newIdents.size();
  int cntOld=cntall - cntNew;
  textContainer.contextPut(""String_Node_Str"",newUsers);
  String overview=getTranslator().translate(""String_Node_Str"",new String[]{""String_Node_Str"" + cntall,""String_Node_Str"" + cntNew,""String_Node_Str"" + cntOld});
  textContainer.contextPut(""String_Node_Str"",overview);
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  int colPos=0;
  FlexiColumnModel newUserCustomColumnModel=new DefaultFlexiColumnModel(""String_Node_Str"",colPos++);
  newUserCustomColumnModel.setCellRenderer(new UserNewOldCustomFlexiCellRenderer());
  newUserCustomColumnModel.setAlignment(FlexiColumnModel.ALIGNMENT_CENTER);
  tableColumnModel.addFlexiColumnModel(newUserCustomColumnModel);
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  if (canCreateOLATPassword) {
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  }
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str"",colPos++));
  userPropertyHandlers=UserManager.getInstance().getUserPropertyHandlersFor(usageIdentifyer,true);
  for (int i=0; i < userPropertyHandlers.size(); i++) {
    UserPropertyHandler userPropertyHandler=userPropertyHandlers.get(i);
    tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(userPropertyHandler.i18nColumnDescriptorLabelKey(),colPos++));
  }
  FlexiTableDataModel tableDataModel=new FlexiTableDataModelImpl(new Model(idents,colPos),tableColumnModel);
  uifactory.addTableElement(ureq,getWindowControl(),""String_Node_Str"",tableDataModel,formLayoutVertical);
}"
69805,"/** 
 * @see org.olat.core.util.component.ComponentVisitor#visit(org.olat.core.gui.components.Component,org.olat.core.gui.UserRequest)
 */
public boolean visit(Component comp,UserRequest ureq){
  if (comp.isVisible()) {
    comp.validate(ureq,validationResult);
    return true;
  }
  return false;
}","/** 
 * @see org.olat.core.util.component.ComponentVisitor#visit(org.olat.core.gui.components.Component,org.olat.core.gui.UserRequest)
 */
public boolean visit(Component comp,UserRequest ureq){
  if (comp != null && comp.isVisible()) {
    comp.validate(ureq,validationResult);
    return true;
  }
  return false;
}"
69806,"/** 
 * the tabledatamodel to represent the choice data. one row belongs to one checkbox/choice; the columns are merely for graphical reasons. <br> Important: the first column must return a Boolean object to indicate whether the according row is currently selected or not
 * @param model
 */
public void setTableDataModel(TableDataModel model){
  tableDataModel=model;
}","/** 
 * the tabledatamodel to represent the choice data. one row belongs to one checkbox/choice; the columns are merely for graphical reasons. <br> Important: the first column must return a Boolean object to indicate whether the according row is currently selected or not
 * @param model
 */
public void setTableDataModel(TableDataModel<?> model){
  tableDataModel=model;
}"
69807,"/** 
 * @return TableDataModel
 */
public TableDataModel getTableDataModel(){
  return tableDataModel;
}","/** 
 * @return TableDataModel
 */
public TableDataModel<?> getTableDataModel(){
  return tableDataModel;
}"
69808,"/** 
 * @see org.olat.core.gui.render.ui.ComponentRenderer#render(org.olat.core.gui.render.Renderer,org.olat.core.gui.render.StringOutput,org.olat.core.gui.components.Component,org.olat.core.gui.render.URLBuilder,org.olat.core.gui.translator.Translator,org.olat.core.gui.render.RenderResult,java.lang.String[])
 */
public void render(Renderer renderer,StringOutput target,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  Choice choice=(Choice)source;
  TableDataModel tdm=choice.getTableDataModel();
  boolean iframePostEnabled=renderer.getGlobalSettings().getAjaxFlags().isIframePostEnabled();
  String id=choice.getComponentName() + ""String_Node_Str"" + choice.hashCode();
  target.append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(id).append(""String_Node_Str"");
  ubu.buildURI(target,null,null,iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
  target.append(""String_Node_Str"");
  if (iframePostEnabled) {
    ubu.appendTarget(target);
  }
  target.append(""String_Node_Str"");
  target.append(""String_Node_Str"");
  int rows=tdm.getRowCount();
  int cols=tdm.getColumnCount();
  for (int i=0; i < rows; i++) {
    target.append(""String_Node_Str"");
    for (int j=0; j < cols; j++) {
      Object val=tdm.getValueAt(i,j);
      if (j == 0) {
        target.append(""String_Node_Str"");
        boolean selected=((Boolean)val).booleanValue();
        String keyN=""String_Node_Str"" + i;
        target.append(""String_Node_Str"");
        if (selected)         target.append(""String_Node_Str"");
        target.append(""String_Node_Str"").append(keyN).append(""String_Node_Str"").append(id).append(""String_Node_Str"");
      }
 else {
        target.append(""String_Node_Str"");
        String sVal=val.toString();
        target.append(StringEscapeUtils.escapeHtml(sVal));
      }
      target.append(""String_Node_Str"");
    }
    target.append(""String_Node_Str"");
  }
  target.append(""String_Node_Str"").append(cols).append(""String_Node_Str"");
  target.append(""String_Node_Str"");
  target.append(""String_Node_Str"" + id + ""String_Node_Str"");
  target.append(""String_Node_Str"");
  target.append(translator.translate(""String_Node_Str""));
  target.append(""String_Node_Str"" + id + ""String_Node_Str"");
  target.append(""String_Node_Str"");
  target.append(translator.translate(""String_Node_Str""));
  target.append(""String_Node_Str"");
  target.append(""String_Node_Str"");
  target.append(""String_Node_Str"").append(cols).append(""String_Node_Str"");
  target.append(""String_Node_Str"" + StringEscapeUtils.escapeHtml(translator.translate(choice.getSubmitKey())) + ""String_Node_Str"");
  String cancelKey=choice.getCancelKey();
  if (cancelKey != null) {
    target.append(""String_Node_Str"" + Choice.CANCEL_IDENTIFICATION + ""String_Node_Str""+ StringEscapeUtils.escapeHtml(translator.translate(cancelKey))+ ""String_Node_Str"");
  }
  target.append(""String_Node_Str"");
}","/** 
 * @see org.olat.core.gui.render.ui.ComponentRenderer#render(org.olat.core.gui.render.Renderer,org.olat.core.gui.render.StringOutput,org.olat.core.gui.components.Component,org.olat.core.gui.render.URLBuilder,org.olat.core.gui.translator.Translator,org.olat.core.gui.render.RenderResult,java.lang.String[])
 */
public void render(Renderer renderer,StringOutput target,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  Choice choice=(Choice)source;
  TableDataModel<?> tdm=choice.getTableDataModel();
  boolean iframePostEnabled=renderer.getGlobalSettings().getAjaxFlags().isIframePostEnabled();
  String id=choice.getComponentName() + ""String_Node_Str"" + choice.hashCode();
  target.append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(id).append(""String_Node_Str"");
  ubu.buildURI(target,null,null,iframePostEnabled ? AJAXFlags.MODE_TOBGIFRAME : AJAXFlags.MODE_NORMAL);
  target.append(""String_Node_Str"");
  if (iframePostEnabled) {
    ubu.appendTarget(target);
  }
  target.append(""String_Node_Str"");
  target.append(""String_Node_Str"");
  int rows=tdm.getRowCount();
  int cols=tdm.getColumnCount();
  for (int i=0; i < rows; i++) {
    target.append(""String_Node_Str"");
    for (int j=0; j < cols; j++) {
      Object val=tdm.getValueAt(i,j);
      if (j == 0) {
        target.append(""String_Node_Str"");
        boolean selected=((Boolean)val).booleanValue();
        String keyN=""String_Node_Str"" + i;
        target.append(""String_Node_Str"");
        if (selected)         target.append(""String_Node_Str"");
        target.append(""String_Node_Str"").append(keyN).append(""String_Node_Str"").append(id).append(""String_Node_Str"");
      }
 else {
        target.append(""String_Node_Str"");
        String sVal=val.toString();
        target.append(StringEscapeUtils.escapeHtml(sVal));
      }
      target.append(""String_Node_Str"");
    }
    target.append(""String_Node_Str"");
  }
  target.append(""String_Node_Str"").append(cols).append(""String_Node_Str"");
  target.append(""String_Node_Str"");
  target.append(""String_Node_Str"" + id + ""String_Node_Str"");
  target.append(""String_Node_Str"");
  target.append(translator.translate(""String_Node_Str""));
  target.append(""String_Node_Str"" + id + ""String_Node_Str"");
  target.append(""String_Node_Str"");
  target.append(translator.translate(""String_Node_Str""));
  target.append(""String_Node_Str"");
  target.append(""String_Node_Str"");
  target.append(""String_Node_Str"").append(cols).append(""String_Node_Str"");
  target.append(""String_Node_Str"" + StringEscapeUtils.escapeHtml(translator.translate(choice.getSubmitKey())) + ""String_Node_Str"");
  String cancelKey=choice.getCancelKey();
  if (cancelKey != null) {
    target.append(""String_Node_Str"" + Choice.CANCEL_IDENTIFICATION + ""String_Node_Str""+ StringEscapeUtils.escapeHtml(translator.translate(cancelKey))+ ""String_Node_Str"");
  }
  target.append(""String_Node_Str"");
}"
69809,"public FlexiTableElement addTableElement(UserRequest ureq,String name,FlexiTableDataModel tableModel,FlexiTableDataSource dataSource,int pageSize,boolean search,Translator translator,FormItemContainer formLayout){
  FlexiTableElementImpl fte=new FlexiTableElementImpl(ureq,name,translator,tableModel,dataSource,pageSize,search);
  formLayout.add(fte);
  return fte;
}","public FlexiTableElement addTableElement(UserRequest ureq,WindowControl wControl,String name,FlexiTableDataModel tableModel,FlexiTableDataSource dataSource,int pageSize,boolean search,Translator translator,FormItemContainer formLayout){
  FlexiTableElementImpl fte=new FlexiTableElementImpl(ureq,wControl,name,translator,tableModel,dataSource,pageSize,search);
  formLayout.add(fte);
  return fte;
}"
69810,"protected void renderRow(Renderer renderer,StringOutput target,FlexiTableComponent ftC,String rowIdPrefix,int row,int rows,URLBuilder ubu,Translator translator,RenderResult renderResult){
  FlexiTableElementImpl ftE=ftC.getFlexiTableElement();
  FlexiTableColumnModel columnsModel=ftE.getTableDataModel().getTableColumnModel();
  int numOfCols=columnsModel.getColumnCount();
  String cssClass;
  if (row % 2 == 0)   cssClass=""String_Node_Str"";
 else   cssClass=""String_Node_Str"";
  if (row == 0)   cssClass+=""String_Node_Str"";
  if (row == rows - 1)   cssClass+=""String_Node_Str"";
  target.append(""String_Node_Str"").append(rowIdPrefix).append(row).append(""String_Node_Str"").append(cssClass).append(""String_Node_Str"");
  int col=0;
  if (ftE.isMultiSelect()) {
    target.append(""String_Node_Str"").append(""String_Node_Str"").append(rowIdPrefix).append(row).append(""String_Node_Str"");
    if (ftE.isMultiSelectedIndex(row)) {
      target.append(""String_Node_Str"");
    }
    target.append(""String_Node_Str"");
    col++;
  }
  for (int j=0; j < numOfCols; j++) {
    FlexiColumnModel fcm=columnsModel.getColumnModel(j);
    renderCell(renderer,target,ftC,fcm,row,col,numOfCols,ubu,translator,renderResult);
    col++;
  }
  target.append(""String_Node_Str"");
}","protected void renderRow(Renderer renderer,StringOutput target,FlexiTableComponent ftC,String rowIdPrefix,int row,int rows,URLBuilder ubu,Translator translator,RenderResult renderResult){
  FlexiTableElementImpl ftE=ftC.getFlexiTableElement();
  FlexiTableColumnModel columnsModel=ftE.getTableDataModel().getTableColumnModel();
  int numOfCols=columnsModel.getColumnCount();
  String cssClass;
  if (row % 2 == 0)   cssClass=""String_Node_Str"";
 else   cssClass=""String_Node_Str"";
  if (row == 0)   cssClass+=""String_Node_Str"";
  if (row == rows - 1)   cssClass+=""String_Node_Str"";
  target.append(""String_Node_Str"").append(rowIdPrefix).append(row).append(""String_Node_Str"").append(cssClass).append(""String_Node_Str"");
  int col=0;
  if (ftE.isMultiSelect()) {
    target.append(""String_Node_Str"").append(""String_Node_Str"").append(rowIdPrefix).append(row).append(""String_Node_Str"");
    if (ftE.isMultiSelectedIndex(row)) {
      target.append(""String_Node_Str"");
    }
    target.append(""String_Node_Str"");
    col++;
  }
  for (int j=0; j < numOfCols; j++) {
    FlexiColumnModel fcm=columnsModel.getColumnModel(j);
    if (ftE.isColumnModelVisible(fcm)) {
      renderCell(renderer,target,ftC,fcm,row,col++,numOfCols,ubu,translator,renderResult);
    }
  }
  target.append(""String_Node_Str"");
}"
69811,"protected void renderHeaders(StringOutput target,FlexiTableElementImpl ftE,Translator translator){
  FlexiTableDataModel dataModel=ftE.getTableDataModel();
  FlexiTableColumnModel columnModel=dataModel.getTableColumnModel();
  target.append(""String_Node_Str"");
  int col=0;
  if (ftE.isMultiSelect()) {
    target.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    col++;
  }
  int cols=columnModel.getColumnCount();
  for (int i=0; i < cols; i++) {
    FlexiColumnModel fcm=columnModel.getColumnModel(i);
    renderHeader(target,fcm,col,cols,translator);
    col++;
  }
  target.append(""String_Node_Str"");
}","protected void renderHeaders(StringOutput target,FlexiTableElementImpl ftE,Translator translator){
  FlexiTableDataModel dataModel=ftE.getTableDataModel();
  FlexiTableColumnModel columnModel=dataModel.getTableColumnModel();
  target.append(""String_Node_Str"");
  int col=0;
  if (ftE.isMultiSelect()) {
    target.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    col++;
  }
  int cols=columnModel.getColumnCount();
  for (int i=0; i < cols; i++) {
    FlexiColumnModel fcm=columnModel.getColumnModel(i);
    if (ftE.isColumnModelVisible(fcm)) {
      renderHeader(target,fcm,col++,cols,translator);
    }
  }
  target.append(""String_Node_Str"");
}"
69812,"@Override public void render(Renderer renderer,StringOutput sb,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  FlexiTableComponent ftC=(FlexiTableComponent)source;
  FlexiTableElementImpl ftE=ftC.getFlexiTableElement();
  if (ftE.isSearch()) {
    renderSearchFields(renderer,sb,ftE,ubu,translator,renderResult,args);
  }
  String id=ftC.getFormDispatchId();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"");
  renderHeaders(sb,ftE,translator);
  renderBody(renderer,sb,ftC,ubu,translator,renderResult);
  sb.append(""String_Node_Str"");
  if (source.isEnabled()) {
    sb.append(FormJSHelper.getJSStartWithVarDeclaration(id));
    sb.append(FormJSHelper.getSetFlexiFormDirty(ftE.getRootForm(),id));
    sb.append(FormJSHelper.getJSEnd());
  }
}","@Override public void render(Renderer renderer,StringOutput sb,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  FlexiTableComponent ftC=(FlexiTableComponent)source;
  FlexiTableElementImpl ftE=ftC.getFlexiTableElement();
  String id=ftC.getFormDispatchId();
  sb.append(""String_Node_Str"");
  renderHeaderButtons(renderer,sb,ftE,ubu,translator,renderResult,args);
  sb.append(""String_Node_Str"").append(id).append(""String_Node_Str"");
  renderHeaders(sb,ftE,translator);
  renderBody(renderer,sb,ftC,ubu,translator,renderResult);
  sb.append(""String_Node_Str"");
  if (source.isEnabled()) {
    sb.append(FormJSHelper.getJSStartWithVarDeclaration(id));
    sb.append(FormJSHelper.getSetFlexiFormDirty(ftE.getRootForm(),id));
    sb.append(FormJSHelper.getJSEnd());
  }
}"
69813,"public DefaultFlexiColumnModel(String headerKey,int columnIndex,boolean sortable,String sortKey,int alignment,FlexiCellRenderer cellRenderer){
  this.sortable=sortable;
  this.sortedKey=sortKey;
  this.headerKey=headerKey;
  this.columnIndex=columnIndex;
  this.columnKey=headerKey.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
  this.alignment=alignment;
  this.cellRenderer=cellRenderer;
}","public DefaultFlexiColumnModel(boolean defVisible,String headerKey,int columnIndex,boolean sortable,String sortKey,int alignment,FlexiCellRenderer cellRenderer){
  this.defaultVisible=defVisible;
  this.sortable=sortable;
  this.sortedKey=sortKey;
  this.headerKey=headerKey;
  this.columnIndex=columnIndex;
  this.columnKey=headerKey.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
  this.alignment=alignment;
  this.cellRenderer=cellRenderer;
}"
69814,"/** 
 * @see org.olat.core.gui.components.ComponentRenderer#render(org.olat.core.gui.render.Renderer,org.olat.core.gui.render.StringOutput,org.olat.core.gui.components.Component,org.olat.core.gui.render.URLBuilder,org.olat.core.gui.translator.Translator,org.olat.core.gui.render.RenderResult,java.lang.String[])
 */
@Override public void render(Renderer renderer,StringOutput target,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  super.render(renderer,target,source,ubu,translator,renderResult,args);
  FlexiTableComponent ftC=(FlexiTableComponent)source;
  FlexiTableElementImpl ftE=ftC.getFlexiTableElement();
  FlexiTableDataModel dataModel=ftE.getTableDataModel();
  FlexiTableColumnModel columnsModel=dataModel.getTableColumnModel();
  Form rootForm=ftE.getRootForm();
  String id=ftC.getFormDispatchId();
  int rows=dataModel.getRowCount();
  target.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(rows).append(""String_Node_Str"").append(""String_Node_Str"").append(ftE.getMapperUrl()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (ftE.isMultiSelect()) {
    target.append(""String_Node_Str"");
  }
  for (int i=0; i < columnsModel.getColumnCount(); i++) {
    FlexiColumnModel col=columnsModel.getColumnModel(i);
    target.append(""String_Node_Str"").append(col.getColumnKey()).append(""String_Node_Str"").append(col.isSortable()).append(""String_Node_Str"");
  }
  target.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormJSHelper.generateXHRFnCallVariables(rootForm,id,1)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
}","/** 
 * @see org.olat.core.gui.components.ComponentRenderer#render(org.olat.core.gui.render.Renderer,org.olat.core.gui.render.StringOutput,org.olat.core.gui.components.Component,org.olat.core.gui.render.URLBuilder,org.olat.core.gui.translator.Translator,org.olat.core.gui.render.RenderResult,java.lang.String[])
 */
@Override public void render(Renderer renderer,StringOutput target,Component source,URLBuilder ubu,Translator translator,RenderResult renderResult,String[] args){
  super.render(renderer,target,source,ubu,translator,renderResult,args);
  FlexiTableComponent ftC=(FlexiTableComponent)source;
  FlexiTableElementImpl ftE=ftC.getFlexiTableElement();
  FlexiTableDataModel dataModel=ftE.getTableDataModel();
  FlexiTableColumnModel columnsModel=dataModel.getTableColumnModel();
  Form rootForm=ftE.getRootForm();
  String id=ftC.getFormDispatchId();
  int rows=dataModel.getRowCount();
  target.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(ftE.getPageSize()).append(""String_Node_Str"").append(""String_Node_Str"").append(rows).append(""String_Node_Str"").append(""String_Node_Str"").append(ftE.getMapperUrl()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  int count=0;
  if (ftE.isMultiSelect()) {
    target.append(""String_Node_Str"");
    count++;
  }
  for (int i=0; i < columnsModel.getColumnCount(); i++) {
    FlexiColumnModel col=columnsModel.getColumnModel(i);
    if (ftE.isColumnModelVisible(col)) {
      if (count > 0)       target.append(""String_Node_Str"");
      count++;
      target.append(""String_Node_Str"").append(col.getColumnKey()).append(""String_Node_Str"").append(col.isSortable()).append(""String_Node_Str"");
    }
  }
  target.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormJSHelper.generateXHRFnCallVariables(rootForm,id,1)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
}"
69815,"public QTIImportProcessor(Identity owner,String importedFilename,File importedFile,QuestionItemDAO questionItemDao,QItemTypeDAO qItemTypeDao,QEducationalContextDAO qEduContextDao,FileStorage qpoolFileStorage){
  this.owner=owner;
  this.importedFilename=importedFilename;
  this.importedFile=importedFile;
  this.qItemTypeDao=qItemTypeDao;
  this.questionItemDao=questionItemDao;
  this.qEduContextDao=qEduContextDao;
  this.qpoolFileStorage=qpoolFileStorage;
}","public QTIImportProcessor(Identity owner,Locale defaultLocale,String importedFilename,File importedFile,QuestionItemDAO questionItemDao,QItemTypeDAO qItemTypeDao,QEducationalContextDAO qEduContextDao,FileStorage qpoolFileStorage){
  this.owner=owner;
  this.defaultLocale=defaultLocale;
  this.importedFilename=importedFilename;
  this.importedFile=importedFile;
  this.qItemTypeDao=qItemTypeDao;
  this.questionItemDao=questionItemDao;
  this.qEduContextDao=qEduContextDao;
  this.qpoolFileStorage=qpoolFileStorage;
}"
69816,"protected QuestionItemImpl processItem(DocInfos docInfos,ItemInfos itemInfos){
  Element itemEl=itemInfos.getItemEl();
  String filename;
  String ident=getAttributeValue(itemEl,""String_Node_Str"");
  if (itemInfos.isOriginalItem()) {
    filename=docInfos.filename;
  }
 else   if (StringHelper.containsNonWhitespace(ident)) {
    filename=StringHelper.transformDisplayNameToFileSystemName(ident) + ""String_Node_Str"";
  }
 else {
    filename=""String_Node_Str"";
  }
  String dir=qpoolFileStorage.generateDir();
  String title=getAttributeValue(itemEl,""String_Node_Str"");
  if (!StringHelper.containsNonWhitespace(title)) {
    title=ident;
  }
  if (!StringHelper.containsNonWhitespace(title)) {
    title=importedFilename;
  }
  QuestionItemImpl poolItem=questionItemDao.create(title,QTIConstants.QTI_12_FORMAT,dir,filename);
  poolItem.setDescription(itemInfos.getComment());
  processItemQuestionType(poolItem,ident,itemEl);
  processItemMetadata(poolItem,itemEl);
  questionItemDao.persist(owner,poolItem);
  return poolItem;
}","protected QuestionItemImpl processItem(DocInfos docInfos,ItemInfos itemInfos){
  Element itemEl=itemInfos.getItemEl();
  String filename;
  String ident=getAttributeValue(itemEl,""String_Node_Str"");
  if (itemInfos.isOriginalItem()) {
    filename=docInfos.filename;
  }
 else   if (StringHelper.containsNonWhitespace(ident)) {
    filename=StringHelper.transformDisplayNameToFileSystemName(ident) + ""String_Node_Str"";
  }
 else {
    filename=""String_Node_Str"";
  }
  String dir=qpoolFileStorage.generateDir();
  String title=getAttributeValue(itemEl,""String_Node_Str"");
  if (!StringHelper.containsNonWhitespace(title)) {
    title=ident;
  }
  if (!StringHelper.containsNonWhitespace(title)) {
    title=importedFilename;
  }
  QuestionItemImpl poolItem=questionItemDao.create(title,QTIConstants.QTI_12_FORMAT,dir,filename);
  poolItem.setDescription(itemInfos.getComment());
  poolItem.setLanguage(defaultLocale.getLanguage());
  processItemQuestionType(poolItem,ident,itemEl);
  processItemMetadata(poolItem,itemEl);
  questionItemDao.persist(owner,poolItem);
  return poolItem;
}"
69817,"@Override public List<QuestionItem> importItems(Identity owner,String filename,File file){
  QTIImportProcessor processor=new QTIImportProcessor(owner,filename,file,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  return processor.process();
}","@Override public List<QuestionItem> importItems(Identity owner,Locale defaultLocale,String filename,File file){
  QTIImportProcessor processor=new QTIImportProcessor(owner,defaultLocale,filename,file,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  return processor.process();
}"
69818,"public List<QuestionItem> importItems(Identity owner,String filename,File file);","public List<QuestionItem> importItems(Identity owner,Locale defaultLocale,String filename,File file);"
69819,"public List<QuestionItem> importItems(Identity owner,String filename,File file);","public List<QuestionItem> importItems(Identity owner,Locale defaultLocale,String filename,File file);"
69820,"public QuestionItem importItem(Identity owner,String filename,File file){
  String dir=getFileStorage().generateDir();
  VFSContainer itemDir=getFileStorage().getContainer(dir);
  VFSLeaf leaf=itemDir.createChildLeaf(filename);
  OutputStream out=leaf.getOutputStream(false);
  InputStream in=null;
  try {
    in=new FileInputStream(file);
    IOUtils.copy(in,out);
  }
 catch (  FileNotFoundException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
  return CoreSpringFactory.getImpl(QPoolService.class).createAndPersistItem(owner,filename,getFormat(),""String_Node_Str"",null,dir,filename,null);
}","public QuestionItem importItem(Identity owner,Locale defaultLocale,String filename,File file){
  String dir=getFileStorage().generateDir();
  VFSContainer itemDir=getFileStorage().getContainer(dir);
  VFSLeaf leaf=itemDir.createChildLeaf(filename);
  OutputStream out=leaf.getOutputStream(false);
  InputStream in=null;
  try {
    in=new FileInputStream(file);
    IOUtils.copy(in,out);
  }
 catch (  FileNotFoundException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
  String language=defaultLocale.getLanguage();
  return CoreSpringFactory.getImpl(QPoolService.class).createAndPersistItem(owner,filename,getFormat(),language,null,dir,filename,null);
}"
69821,"@Override public List<QuestionItem> importItems(Identity owner,String filename,File file){
  List<QuestionItem> items=new ArrayList<QuestionItem>();
  QuestionItem item=importItem(owner,filename,file);
  if (item != null) {
    items.add(item);
  }
  return items;
}","@Override public List<QuestionItem> importItems(Identity owner,Locale defaultLocale,String filename,File file){
  List<QuestionItem> items=new ArrayList<QuestionItem>();
  QuestionItem item=importItem(owner,defaultLocale,filename,file);
  if (item != null) {
    items.add(item);
  }
  return items;
}"
69822,"@Override public List<QuestionItem> importItems(Identity owner,String filename,File file){
  List<QuestionItem> importedItem=null;
  List<QPoolSPI> providers=qpoolModule.getQuestionPoolProviders();
  for (  QPoolSPI provider : providers) {
    if (provider.isCompatible(filename,file)) {
      importedItem=provider.importItems(owner,filename,file);
    }
  }
  return importedItem;
}","@Override public List<QuestionItem> importItems(Identity owner,Locale defaultLocale,String filename,File file){
  List<QuestionItem> importedItem=null;
  List<QPoolSPI> providers=qpoolModule.getQuestionPoolProviders();
  for (  QPoolSPI provider : providers) {
    if (provider.isCompatible(filename,file)) {
      importedItem=provider.importItems(owner,defaultLocale,filename,file);
    }
  }
  return importedItem;
}"
69823,"@Override protected void formOK(UserRequest ureq){
  String filename=fileEl.getUploadFileName();
  File file=fileEl.getUploadFile();
  qpoolservice.importItems(getIdentity(),filename,file);
  fireEvent(ureq,Event.DONE_EVENT);
}","@Override protected void formOK(UserRequest ureq){
  String filename=fileEl.getUploadFileName();
  File file=fileEl.getUploadFile();
  qpoolservice.importItems(getIdentity(),getLocale(),filename,file);
  fireEvent(ureq,Event.DONE_EVENT);
}"
69824,"private void doUpdateDetails(UserRequest ureq,QuestionItemView itemView){
  deleteItem.setVisible(itemView.isEditable());
  QuestionItem item=qpoolService.loadItemById(itemView.getKey());
  detailsCtrl.updateItem(item,itemView.isEditable());
  previewCtrl.updateItem(ureq,item);
}","private void doUpdateDetails(UserRequest ureq,QuestionItemView itemView){
  deleteItem.setVisible(itemView.isEditable());
  QuestionItem item=qpoolService.loadItemById(itemView.getKey());
  detailsCtrl.updateItem(item,itemView.isEditable());
  previewCtrl.updateItem(ureq,item);
  selectItem.setEnabled(true);
  deleteItem.setEnabled(true);
}"
69825,"public QuestionsController(UserRequest ureq,WindowControl wControl,QuestionItemsSource source){
  super(ureq,wControl);
  qpoolService=CoreSpringFactory.getImpl(QPoolService.class);
  listCtrl=new QuestionListController(ureq,wControl,source);
  listenTo(listCtrl);
  detailsCtrl=new QuestionItemSummaryController(ureq,wControl);
  listenTo(detailsCtrl);
  previewCtrl=new QuestionItemPreviewController(ureq,wControl);
  listenTo(previewCtrl);
  mainVC=createVelocityContainer(""String_Node_Str"");
  mainVC.put(""String_Node_Str"",listCtrl.getInitialComponent());
  mainVC.put(""String_Node_Str"",detailsCtrl.getInitialComponent());
  mainVC.put(""String_Node_Str"",previewCtrl.getInitialComponent());
  deleteItem=LinkFactory.createButton(""String_Node_Str"",mainVC,this);
  selectItem=LinkFactory.createButton(""String_Node_Str"",mainVC,this);
  String[] js=new String[]{""String_Node_Str""};
  JSAndCSSComponent jsAndCssComp=new JSAndCSSComponent(""String_Node_Str"",js,null);
  mainVC.put(""String_Node_Str"",jsAndCssComp);
  putInitialPanel(mainVC);
}","public QuestionsController(UserRequest ureq,WindowControl wControl,QuestionItemsSource source){
  super(ureq,wControl);
  qpoolService=CoreSpringFactory.getImpl(QPoolService.class);
  listCtrl=new QuestionListController(ureq,wControl,source);
  listenTo(listCtrl);
  detailsCtrl=new QuestionItemSummaryController(ureq,wControl);
  listenTo(detailsCtrl);
  previewCtrl=new QuestionItemPreviewController(ureq,wControl);
  listenTo(previewCtrl);
  mainVC=createVelocityContainer(""String_Node_Str"");
  mainVC.put(""String_Node_Str"",listCtrl.getInitialComponent());
  mainVC.put(""String_Node_Str"",detailsCtrl.getInitialComponent());
  mainVC.put(""String_Node_Str"",previewCtrl.getInitialComponent());
  deleteItem=LinkFactory.createButton(""String_Node_Str"",mainVC,this);
  deleteItem.setEnabled(false);
  selectItem=LinkFactory.createButton(""String_Node_Str"",mainVC,this);
  selectItem.setEnabled(false);
  String[] js=new String[]{""String_Node_Str""};
  JSAndCSSComponent jsAndCssComp=new JSAndCSSComponent(""String_Node_Str"",js,null);
  mainVC.put(""String_Node_Str"",jsAndCssComp);
  putInitialPanel(mainVC);
}"
69826,"@Test public void testImport_QTI12_metadata() throws IOException, URISyntaxException {
  URL itemUrl=QTIExportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  List<QuestionItem> items=proc.process();
  Assert.assertNotNull(items);
  dbInstance.commitAndCloseSession();
  QTIExportProcessor exportProc=new QTIExportProcessor(qpoolFileStorage);
  List<QuestionItemFull> fullItems=questionItemDao.loadByIds(Collections.singletonList(items.get(0).getKey()));
  exportProc.assembleTest(fullItems);
}","@Test public void testImport_QTI12_metadata() throws IOException, URISyntaxException {
  URL itemUrl=QTIExportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,Locale.ENGLISH,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  List<QuestionItem> items=proc.process();
  Assert.assertNotNull(items);
  dbInstance.commitAndCloseSession();
  QTIExportProcessor exportProc=new QTIExportProcessor(qpoolFileStorage);
  List<QuestionItemFull> fullItems=questionItemDao.loadByIds(Collections.singletonList(items.get(0).getKey()));
  exportProc.assembleTest(fullItems);
}"
69827,"/** 
 * This test check every methods of the import process in details
 * @throws IOException
 * @throws URISyntaxException
 */
@Test public void testImport_SC() throws IOException, URISyntaxException {
  URL itemUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  DocInfos docInfos=proc.getDocInfos();
  Assert.assertNotNull(docInfos);
  Assert.assertNotNull(docInfos.getFilename());
  Assert.assertNotNull(docInfos.getDocument());
  Assert.assertEquals(""String_Node_Str"",docInfos.getFilename());
  List<ItemInfos> itemInfos=proc.getItemList(docInfos);
  Assert.assertNotNull(itemInfos);
  Assert.assertEquals(1,itemInfos.size());
  QuestionItemImpl item=proc.processItem(docInfos,itemInfos.get(0));
  Assert.assertNotNull(item);
  dbInstance.commitAndCloseSession();
  proc.processFiles(item,itemInfos.get(0));
  QuestionItemFull reloadItem=questionItemDao.loadById(item.getKey());
  Assert.assertNotNull(reloadItem);
  Assert.assertNotNull(reloadItem.getCreationDate());
  Assert.assertNotNull(reloadItem.getLastModified());
  Assert.assertEquals(QuestionStatus.draft,reloadItem.getQuestionStatus());
  Assert.assertEquals(QTIConstants.QTI_12_FORMAT,reloadItem.getFormat());
  Assert.assertEquals(""String_Node_Str"",reloadItem.getTitle());
  Assert.assertEquals(""String_Node_Str"",reloadItem.getDescription());
  Assert.assertNotNull(reloadItem.getType());
  Assert.assertEquals(QuestionType.SC.name(),reloadItem.getType().getType());
  VFSContainer itemDir=qpoolFileStorage.getContainer(reloadItem.getDirectory());
  Assert.assertNotNull(itemDir);
  VFSItem qtiLeaf=itemDir.resolve(reloadItem.getRootFilename());
  Assert.assertNotNull(qtiLeaf);
  Assert.assertTrue(qtiLeaf instanceof VFSLeaf);
  Assert.assertTrue(qtiLeaf.exists());
  Assert.assertEquals(itemFile.length(),((VFSLeaf)qtiLeaf).getSize());
}","/** 
 * This test check every methods of the import process in details
 * @throws IOException
 * @throws URISyntaxException
 */
@Test public void testImport_SC() throws IOException, URISyntaxException {
  URL itemUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,Locale.ENGLISH,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  DocInfos docInfos=proc.getDocInfos();
  Assert.assertNotNull(docInfos);
  Assert.assertNotNull(docInfos.getFilename());
  Assert.assertNotNull(docInfos.getDocument());
  Assert.assertEquals(""String_Node_Str"",docInfos.getFilename());
  List<ItemInfos> itemInfos=proc.getItemList(docInfos);
  Assert.assertNotNull(itemInfos);
  Assert.assertEquals(1,itemInfos.size());
  QuestionItemImpl item=proc.processItem(docInfos,itemInfos.get(0));
  Assert.assertNotNull(item);
  dbInstance.commitAndCloseSession();
  proc.processFiles(item,itemInfos.get(0));
  QuestionItemFull reloadItem=questionItemDao.loadById(item.getKey());
  Assert.assertNotNull(reloadItem);
  Assert.assertNotNull(reloadItem.getCreationDate());
  Assert.assertNotNull(reloadItem.getLastModified());
  Assert.assertEquals(QuestionStatus.draft,reloadItem.getQuestionStatus());
  Assert.assertEquals(QTIConstants.QTI_12_FORMAT,reloadItem.getFormat());
  Assert.assertEquals(""String_Node_Str"",reloadItem.getTitle());
  Assert.assertEquals(""String_Node_Str"",reloadItem.getDescription());
  Assert.assertNotNull(reloadItem.getType());
  Assert.assertEquals(QuestionType.SC.name(),reloadItem.getType().getType());
  VFSContainer itemDir=qpoolFileStorage.getContainer(reloadItem.getDirectory());
  Assert.assertNotNull(itemDir);
  VFSItem qtiLeaf=itemDir.resolve(reloadItem.getRootFilename());
  Assert.assertNotNull(qtiLeaf);
  Assert.assertTrue(qtiLeaf instanceof VFSLeaf);
  Assert.assertTrue(qtiLeaf.exists());
  Assert.assertEquals(itemFile.length(),((VFSLeaf)qtiLeaf).getSize());
}"
69828,"/** 
 * This test check every methods of the import process in details
 * @throws IOException
 * @throws URISyntaxException
 */
@Test public void testImport_OpenOLATTest_extractItems() throws IOException, URISyntaxException {
  URL testUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(testUrl);
  File testFile=new File(testUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,testFile.getName(),testFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  DocInfos docInfos=proc.getDocInfos();
  Assert.assertNotNull(docInfos);
  Assert.assertNotNull(docInfos.getFilename());
  Assert.assertNotNull(docInfos.getDocument());
  Assert.assertEquals(""String_Node_Str"",docInfos.getFilename());
  List<ItemInfos> itemElements=proc.getItemList(docInfos);
  Assert.assertNotNull(itemElements);
  Assert.assertEquals(4,itemElements.size());
}","/** 
 * This test check every methods of the import process in details
 * @throws IOException
 * @throws URISyntaxException
 */
@Test public void testImport_OpenOLATTest_extractItems() throws IOException, URISyntaxException {
  URL testUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(testUrl);
  File testFile=new File(testUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,Locale.ENGLISH,testFile.getName(),testFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  DocInfos docInfos=proc.getDocInfos();
  Assert.assertNotNull(docInfos);
  Assert.assertNotNull(docInfos.getFilename());
  Assert.assertNotNull(docInfos.getDocument());
  Assert.assertEquals(""String_Node_Str"",docInfos.getFilename());
  List<ItemInfos> itemElements=proc.getItemList(docInfos);
  Assert.assertNotNull(itemElements);
  Assert.assertEquals(4,itemElements.size());
}"
69829,"@Test public void testImport_OpenOLATTest_processAttachments_mattext() throws IOException, URISyntaxException {
  URL itemUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  List<QuestionItem> items=proc.process();
  Assert.assertNotNull(items);
  Assert.assertEquals(2,items.size());
  dbInstance.commitAndCloseSession();
  for (  QuestionItem item : items) {
    QuestionItemFull itemFull=(QuestionItemFull)item;
    String dir=itemFull.getDirectory();
    String file=itemFull.getRootFilename();
    VFSContainer itemContainer=qpoolFileStorage.getContainer(dir);
    Assert.assertNotNull(itemContainer);
    VFSItem itemLeaf=itemContainer.resolve(file);
    Assert.assertNotNull(itemLeaf);
    Assert.assertTrue(itemLeaf instanceof VFSLeaf);
    InputStream is=((VFSLeaf)itemLeaf).getInputStream();
    XMLParser xmlParser=new XMLParser(new IMSEntityResolver());
    Document doc=xmlParser.parse(is,false);
    Node itemNode=doc.selectSingleNode(""String_Node_Str"");
    Assert.assertNotNull(itemNode);
    if (itemFull.getType().getType().equals(QuestionType.SC.name())) {
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
    }
 else     if (itemFull.getType().getType().equals(QuestionType.MC.name())) {
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
    }
 else {
      Assert.fail();
    }
  }
}","@Test public void testImport_OpenOLATTest_processAttachments_mattext() throws IOException, URISyntaxException {
  URL itemUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,Locale.ENGLISH,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  List<QuestionItem> items=proc.process();
  Assert.assertNotNull(items);
  Assert.assertEquals(2,items.size());
  dbInstance.commitAndCloseSession();
  for (  QuestionItem item : items) {
    QuestionItemFull itemFull=(QuestionItemFull)item;
    String dir=itemFull.getDirectory();
    String file=itemFull.getRootFilename();
    VFSContainer itemContainer=qpoolFileStorage.getContainer(dir);
    Assert.assertNotNull(itemContainer);
    VFSItem itemLeaf=itemContainer.resolve(file);
    Assert.assertNotNull(itemLeaf);
    Assert.assertTrue(itemLeaf instanceof VFSLeaf);
    InputStream is=((VFSLeaf)itemLeaf).getInputStream();
    XMLParser xmlParser=new XMLParser(new IMSEntityResolver());
    Document doc=xmlParser.parse(is,false);
    Node itemNode=doc.selectSingleNode(""String_Node_Str"");
    Assert.assertNotNull(itemNode);
    if (itemFull.getType().getType().equals(QuestionType.SC.name())) {
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
    }
 else     if (itemFull.getType().getType().equals(QuestionType.MC.name())) {
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
    }
 else {
      Assert.fail();
    }
  }
}"
69830,"@Test public void testImport_FIB() throws IOException, URISyntaxException {
  URL itemUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  List<QuestionItem> items=proc.process();
  Assert.assertNotNull(items);
  Assert.assertEquals(1,items.size());
  dbInstance.commitAndCloseSession();
  QuestionItem reloadItem=questionItemDao.loadById(items.get(0).getKey());
  Assert.assertNotNull(reloadItem);
  Assert.assertNotNull(reloadItem.getCreationDate());
  Assert.assertNotNull(reloadItem.getLastModified());
  Assert.assertEquals(QuestionStatus.draft,reloadItem.getQuestionStatus());
  Assert.assertEquals(QTIConstants.QTI_12_FORMAT,reloadItem.getFormat());
  Assert.assertEquals(""String_Node_Str"",reloadItem.getTitle());
  Assert.assertEquals(""String_Node_Str"",reloadItem.getDescription());
  Assert.assertEquals(QuestionType.FIB.name(),reloadItem.getType().getType());
}","@Test public void testImport_FIB() throws IOException, URISyntaxException {
  URL itemUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,Locale.ENGLISH,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  List<QuestionItem> items=proc.process();
  Assert.assertNotNull(items);
  Assert.assertEquals(1,items.size());
  dbInstance.commitAndCloseSession();
  QuestionItem reloadItem=questionItemDao.loadById(items.get(0).getKey());
  Assert.assertNotNull(reloadItem);
  Assert.assertNotNull(reloadItem.getCreationDate());
  Assert.assertNotNull(reloadItem.getLastModified());
  Assert.assertEquals(QuestionStatus.draft,reloadItem.getQuestionStatus());
  Assert.assertEquals(QTIConstants.QTI_12_FORMAT,reloadItem.getFormat());
  Assert.assertEquals(""String_Node_Str"",reloadItem.getTitle());
  Assert.assertEquals(""String_Node_Str"",reloadItem.getDescription());
  Assert.assertEquals(QuestionType.FIB.name(),reloadItem.getType().getType());
}"
69831,"@Test public void testImport_OpenOLATTest_process() throws IOException, URISyntaxException {
  URL itemUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  List<QuestionItem> items=proc.process();
  Assert.assertNotNull(items);
  Assert.assertEquals(4,items.size());
  dbInstance.commitAndCloseSession();
  int sc=0;
  int mc=0;
  int kprim=0;
  int fib=0;
  for (  QuestionItem item : items) {
    Assert.assertEquals(QTIConstants.QTI_12_FORMAT,item.getFormat());
    QItemType itemType=item.getType();
    Assert.assertNotNull(itemType);
    QuestionType type=QuestionType.valueOf(itemType.getType());
    if (type != null) {
switch (type) {
case SC:
        sc++;
      break;
case MC:
    mc++;
  break;
case KPRIM:
kprim++;
break;
case FIB:
fib++;
break;
default :
{
Assert.fail(""String_Node_Str"");
}
}
}
}
Assert.assertEquals(""String_Node_Str"",1,sc);
Assert.assertEquals(""String_Node_Str"",1,mc);
Assert.assertEquals(""String_Node_Str"",1,kprim);
Assert.assertEquals(""String_Node_Str"",1,fib);
for (QuestionItem item : items) {
QuestionItemFull itemFull=(QuestionItemFull)item;
String dir=itemFull.getDirectory();
String file=itemFull.getRootFilename();
VFSContainer itemContainer=qpoolFileStorage.getContainer(dir);
Assert.assertNotNull(itemContainer);
VFSItem itemLeaf=itemContainer.resolve(file);
Assert.assertNotNull(itemLeaf);
Assert.assertTrue(itemLeaf instanceof VFSLeaf);
InputStream is=((VFSLeaf)itemLeaf).getInputStream();
XMLParser xmlParser=new XMLParser(new IMSEntityResolver());
Document doc=xmlParser.parse(is,false);
Node itemNode=doc.selectSingleNode(""String_Node_Str"");
Assert.assertNotNull(itemNode);
}
}","@Test public void testImport_OpenOLATTest_process() throws IOException, URISyntaxException {
  URL itemUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,Locale.ENGLISH,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  List<QuestionItem> items=proc.process();
  Assert.assertNotNull(items);
  Assert.assertEquals(4,items.size());
  dbInstance.commitAndCloseSession();
  int sc=0;
  int mc=0;
  int kprim=0;
  int fib=0;
  for (  QuestionItem item : items) {
    Assert.assertEquals(QTIConstants.QTI_12_FORMAT,item.getFormat());
    QItemType itemType=item.getType();
    Assert.assertNotNull(itemType);
    QuestionType type=QuestionType.valueOf(itemType.getType());
    if (type != null) {
switch (type) {
case SC:
        sc++;
      break;
case MC:
    mc++;
  break;
case KPRIM:
kprim++;
break;
case FIB:
fib++;
break;
default :
{
Assert.fail(""String_Node_Str"");
}
}
}
}
Assert.assertEquals(""String_Node_Str"",1,sc);
Assert.assertEquals(""String_Node_Str"",1,mc);
Assert.assertEquals(""String_Node_Str"",1,kprim);
Assert.assertEquals(""String_Node_Str"",1,fib);
for (QuestionItem item : items) {
QuestionItemFull itemFull=(QuestionItemFull)item;
String dir=itemFull.getDirectory();
String file=itemFull.getRootFilename();
VFSContainer itemContainer=qpoolFileStorage.getContainer(dir);
Assert.assertNotNull(itemContainer);
VFSItem itemLeaf=itemContainer.resolve(file);
Assert.assertNotNull(itemLeaf);
Assert.assertTrue(itemLeaf instanceof VFSLeaf);
InputStream is=((VFSLeaf)itemLeaf).getInputStream();
XMLParser xmlParser=new XMLParser(new IMSEntityResolver());
Document doc=xmlParser.parse(is,false);
Node itemNode=doc.selectSingleNode(""String_Node_Str"");
Assert.assertNotNull(itemNode);
}
}"
69832,"@Test public void testImport_QTI12_processAttachments_matimg() throws IOException, URISyntaxException {
  URL itemUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  List<QuestionItem> items=proc.process();
  Assert.assertNotNull(items);
  Assert.assertEquals(3,items.size());
  dbInstance.commitAndCloseSession();
  for (  QuestionItem item : items) {
    QuestionItemFull itemFull=(QuestionItemFull)item;
    String dir=itemFull.getDirectory();
    String file=itemFull.getRootFilename();
    VFSContainer itemContainer=qpoolFileStorage.getContainer(dir);
    Assert.assertNotNull(itemContainer);
    VFSItem itemLeaf=itemContainer.resolve(file);
    Assert.assertNotNull(itemLeaf);
    Assert.assertTrue(itemLeaf instanceof VFSLeaf);
    InputStream is=((VFSLeaf)itemLeaf).getInputStream();
    XMLParser xmlParser=new XMLParser(new IMSEntityResolver());
    Document doc=xmlParser.parse(is,false);
    Node itemNode=doc.selectSingleNode(""String_Node_Str"");
    Assert.assertNotNull(itemNode);
    if (""String_Node_Str"".equals(itemFull.getTitle())) {
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
    }
 else     if (""String_Node_Str"".equals(itemFull.getTitle())) {
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
    }
 else     if (""String_Node_Str"".equals(itemFull.getTitle())) {
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
    }
 else {
      Assert.fail();
    }
  }
}","@Test public void testImport_QTI12_processAttachments_matimg() throws IOException, URISyntaxException {
  URL itemUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,Locale.ENGLISH,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  List<QuestionItem> items=proc.process();
  Assert.assertNotNull(items);
  Assert.assertEquals(3,items.size());
  dbInstance.commitAndCloseSession();
  for (  QuestionItem item : items) {
    QuestionItemFull itemFull=(QuestionItemFull)item;
    String dir=itemFull.getDirectory();
    String file=itemFull.getRootFilename();
    VFSContainer itemContainer=qpoolFileStorage.getContainer(dir);
    Assert.assertNotNull(itemContainer);
    VFSItem itemLeaf=itemContainer.resolve(file);
    Assert.assertNotNull(itemLeaf);
    Assert.assertTrue(itemLeaf instanceof VFSLeaf);
    InputStream is=((VFSLeaf)itemLeaf).getInputStream();
    XMLParser xmlParser=new XMLParser(new IMSEntityResolver());
    Document doc=xmlParser.parse(is,false);
    Node itemNode=doc.selectSingleNode(""String_Node_Str"");
    Assert.assertNotNull(itemNode);
    if (""String_Node_Str"".equals(itemFull.getTitle())) {
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
    }
 else     if (""String_Node_Str"".equals(itemFull.getTitle())) {
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
    }
 else     if (""String_Node_Str"".equals(itemFull.getTitle())) {
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertTrue(exists(itemFull,""String_Node_Str""));
      Assert.assertFalse(exists(itemFull,""String_Node_Str""));
    }
 else {
      Assert.fail();
    }
  }
}"
69833,"@Test public void testImport_QTI12_metadata() throws IOException, URISyntaxException {
  URL itemUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  List<QuestionItem> items=proc.process();
  Assert.assertNotNull(items);
  Assert.assertEquals(1,items.size());
  dbInstance.commitAndCloseSession();
  QuestionItem item=items.get(0);
  Assert.assertEquals(""String_Node_Str"",item.getTitle());
  QEducationalContext level=item.getEducationalContext();
  Assert.assertNotNull(level);
  Assert.assertEquals(""String_Node_Str"",level.getLevel());
  Assert.assertEquals(""String_Node_Str"",item.getEditor());
}","@Test public void testImport_QTI12_metadata() throws IOException, URISyntaxException {
  URL itemUrl=QTIImportProcessorTest.class.getResource(""String_Node_Str"");
  Assert.assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  QTIImportProcessor proc=new QTIImportProcessor(owner,Locale.ENGLISH,itemFile.getName(),itemFile,questionItemDao,qItemTypeDao,qEduContextDao,qpoolFileStorage);
  List<QuestionItem> items=proc.process();
  Assert.assertNotNull(items);
  Assert.assertEquals(1,items.size());
  dbInstance.commitAndCloseSession();
  QuestionItem item=items.get(0);
  Assert.assertEquals(""String_Node_Str"",item.getTitle());
  QEducationalContext level=item.getEducationalContext();
  Assert.assertNotNull(level);
  Assert.assertEquals(""String_Node_Str"",level.getLevel());
  Assert.assertEquals(""String_Node_Str"",item.getEditor());
}"
69834,"@Test public void importItem_qti12_assessment() throws IOException, URISyntaxException {
  Identity owner=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  dbInstance.commit();
  URL itemUrl=QuestionPoolServiceTest.class.getResource(""String_Node_Str"");
  assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  qpoolService.importItems(owner,""String_Node_Str"",itemFile);
}","@Test public void importItem_qti12_assessment() throws IOException, URISyntaxException {
  Identity owner=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  dbInstance.commit();
  URL itemUrl=QuestionPoolServiceTest.class.getResource(""String_Node_Str"");
  assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  qpoolService.importItems(owner,Locale.ENGLISH,""String_Node_Str"",itemFile);
}"
69835,"@Test public void importItem_qti12_item() throws IOException, URISyntaxException {
  Identity owner=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  dbInstance.commit();
  URL itemUrl=QuestionPoolServiceTest.class.getResource(""String_Node_Str"");
  assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  qpoolService.importItems(owner,""String_Node_Str"",itemFile);
}","@Test public void importItem_qti12_item() throws IOException, URISyntaxException {
  Identity owner=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  dbInstance.commit();
  URL itemUrl=QuestionPoolServiceTest.class.getResource(""String_Node_Str"");
  assertNotNull(itemUrl);
  File itemFile=new File(itemUrl.toURI());
  qpoolService.importItems(owner,Locale.ENGLISH,""String_Node_Str"",itemFile);
}"
69836,"/** 
 * Register a cacheable mapper by giving a mapper path ID. When setting the same ID every time for the same usage context, the browser can use the last modified date to cache the resources. The mapper ID will be use as MD5 hash to make it URL save and shorter. In debug mode, all special characters are replaced with the '_' character. <p> Whenever possible use this method to improve the user experience. <p>
 * @param cacheableMapperID the ID of the mapper.
 * @param mapper
 * @return the path e.g. /olat/c/my.mapper.path without / at the end
 */
public String register(UserSession session,String mapperId,Mapper mapper);","/** 
 * Register a cacheable mapper by giving a mapper path ID. When setting the same ID every time for the same usage context, the browser can use the last modified date to cache the resources. The mapper ID will be use as MD5 hash to make it URL save and shorter. In debug mode, all special characters are replaced with the '_' character. <p> Whenever possible use this method to improve the user experience. <p>
 * @param cacheableMapperID the ID of the mapper.
 * @param mapper
 * @return the path e.g. /olat/c/my.mapper.path without / at the end
 */
public String register(String mapperId,Mapper mapper);"
69837,"/** 
 * Cacheable mapper, not session dependant
 */
@Override public String register(UserSession session,String mapperId,Mapper mapper){
  String encryptedMapId=Encoder.encrypt(mapperId);
  boolean alreadyLoaded=mapperIdToMapper.containsKey(encryptedMapId);
  if (mapper instanceof Serializable) {
    if (alreadyLoaded) {
      if (!mapperDao.updateConfiguration(encryptedMapId,(Serializable)mapper)) {
        mapperDao.persistMapper(null,encryptedMapId,(Serializable)mapper);
      }
    }
 else {
      PersistedMapper persistedMapper=mapperDao.loadByMapperId(encryptedMapId);
      if (persistedMapper == null) {
        mapperDao.persistMapper(null,encryptedMapId,(Serializable)mapper);
      }
 else {
        mapperDao.updateConfiguration(encryptedMapId,(Serializable)mapper);
      }
    }
  }
  mapperIdToMapper.put(encryptedMapId,mapper);
  mapperToMapperId.put(mapper,encryptedMapId);
  if (session.getSessionInfo() == null) {
    return WebappHelper.getServletContextPath() + DispatcherAction.PATH_MAPPED + encryptedMapId;
  }
  return WebappHelper.getServletContextPath() + DispatcherAction.PATH_MAPPED + encryptedMapId;
}","/** 
 * Cacheable mapper, not session dependant
 */
@Override public String register(String mapperId,Mapper mapper){
  String encryptedMapId=Encoder.encrypt(mapperId);
  boolean alreadyLoaded=mapperIdToMapper.containsKey(encryptedMapId);
  if (mapper instanceof Serializable) {
    if (alreadyLoaded) {
      if (!mapperDao.updateConfiguration(encryptedMapId,(Serializable)mapper)) {
        mapperDao.persistMapper(null,encryptedMapId,(Serializable)mapper);
      }
    }
 else {
      PersistedMapper persistedMapper=mapperDao.loadByMapperId(encryptedMapId);
      if (persistedMapper == null) {
        mapperDao.persistMapper(null,encryptedMapId,(Serializable)mapper);
      }
 else {
        mapperDao.updateConfiguration(encryptedMapId,(Serializable)mapper);
      }
    }
  }
  mapperIdToMapper.put(encryptedMapId,mapper);
  mapperToMapperId.put(mapper,encryptedMapId);
  return WebappHelper.getServletContextPath() + DispatcherAction.PATH_MAPPED + encryptedMapId;
}"
69838,"/** 
 * Set the documents media base that is used to deliver media files referenced by the content.
 * @param documentBaseContainer the vfs container that contains the media files
 * @param relFilePath The file path of the HTML file relative to the documentBaseContainer
 * @param usess The user session
 */
public void setDocumentMediaBase(final VFSContainer documentBaseContainer,String relFilePath,UserSession usess){
  linkBrowserRelativeFilePath=relFilePath;
  contentMapper=new Mapper(){
    public MediaResource handle(    String relPath,    HttpServletRequest request){
      VFSItem vfsItem=documentBaseContainer.resolve(relPath);
      MediaResource mr;
      if (vfsItem == null || !(vfsItem instanceof VFSLeaf))       mr=new NotFoundMediaResource(relPath);
 else       mr=new VFSMediaResource((VFSLeaf)vfsItem);
      return mr;
    }
  }
;
  String uri;
  String mapperID=VFSManager.getRealPath(documentBaseContainer);
  if (mapperID == null) {
    uri=CoreSpringFactory.getImpl(MapperService.class).register(usess,contentMapper);
  }
 else {
    mapperID=this.getClass().getSimpleName() + ""String_Node_Str"" + mapperID;
    uri=CoreSpringFactory.getImpl(MapperService.class).register(usess,mapperID,contentMapper);
  }
  if (relFilePath != null) {
    int lastSlash=relFilePath.lastIndexOf(""String_Node_Str"");
    if (lastSlash == -1) {
      relFilePath=""String_Node_Str"";
    }
 else     if (lastSlash + 1 < relFilePath.length()) {
      relFilePath=relFilePath.substring(0,lastSlash + 1);
    }
 else {
      String containerPath=documentBaseContainer.getName();
      if (documentBaseContainer instanceof LocalFolderImpl) {
        LocalFolderImpl folder=(LocalFolderImpl)documentBaseContainer;
        containerPath=folder.getBasefile().getAbsolutePath();
      }
      log.warn(""String_Node_Str"" + relFilePath + ""String_Node_Str""+ containerPath);
    }
  }
 else {
    relFilePath=""String_Node_Str"";
    linkBrowserRelativeFilePath=relFilePath;
  }
  String fulluri=uri + ""String_Node_Str"" + relFilePath;
  setQuotedConfigValue(DOCUMENT_BASE_URL,fulluri);
}","/** 
 * Set the documents media base that is used to deliver media files referenced by the content.
 * @param documentBaseContainer the vfs container that contains the media files
 * @param relFilePath The file path of the HTML file relative to the documentBaseContainer
 * @param usess The user session
 */
public void setDocumentMediaBase(final VFSContainer documentBaseContainer,String relFilePath,UserSession usess){
  linkBrowserRelativeFilePath=relFilePath;
  contentMapper=new Mapper(){
    public MediaResource handle(    String relPath,    HttpServletRequest request){
      VFSItem vfsItem=documentBaseContainer.resolve(relPath);
      MediaResource mr;
      if (vfsItem == null || !(vfsItem instanceof VFSLeaf))       mr=new NotFoundMediaResource(relPath);
 else       mr=new VFSMediaResource((VFSLeaf)vfsItem);
      return mr;
    }
  }
;
  String uri;
  String mapperID=VFSManager.getRealPath(documentBaseContainer);
  if (mapperID == null) {
    uri=CoreSpringFactory.getImpl(MapperService.class).register(usess,contentMapper);
  }
 else {
    mapperID=this.getClass().getSimpleName() + ""String_Node_Str"" + mapperID;
    uri=CoreSpringFactory.getImpl(MapperService.class).register(mapperID,contentMapper);
  }
  if (relFilePath != null) {
    int lastSlash=relFilePath.lastIndexOf(""String_Node_Str"");
    if (lastSlash == -1) {
      relFilePath=""String_Node_Str"";
    }
 else     if (lastSlash + 1 < relFilePath.length()) {
      relFilePath=relFilePath.substring(0,lastSlash + 1);
    }
 else {
      String containerPath=documentBaseContainer.getName();
      if (documentBaseContainer instanceof LocalFolderImpl) {
        LocalFolderImpl folder=(LocalFolderImpl)documentBaseContainer;
        containerPath=folder.getBasefile().getAbsolutePath();
      }
      log.warn(""String_Node_Str"" + relFilePath + ""String_Node_Str""+ containerPath);
    }
  }
 else {
    relFilePath=""String_Node_Str"";
    linkBrowserRelativeFilePath=relFilePath;
  }
  String fulluri=uri + ""String_Node_Str"" + relFilePath;
  setQuotedConfigValue(DOCUMENT_BASE_URL,fulluri);
}"
69839,"/** 
 * @param cssBaseContainer
 * @param uSess
 */
private void registerMapper(final VFSContainer cssBaseContainer,UserSession uSess){
  String mapperID=VFSManager.getRealPath(cssBaseContainer);
  if (mapperID == null) {
    mapperBaseURI=CoreSpringFactory.getImpl(MapperService.class).register(uSess,cssUriMapper);
  }
 else {
    mapperID=this.getClass().getSimpleName() + ""String_Node_Str"" + mapperID+ System.currentTimeMillis();
    mapperBaseURI=CoreSpringFactory.getImpl(MapperService.class).register(uSess,mapperID,cssUriMapper);
  }
}","/** 
 * @param cssBaseContainer
 * @param uSess
 */
private void registerMapper(final VFSContainer cssBaseContainer,UserSession uSess){
  String mapperID=VFSManager.getRealPath(cssBaseContainer);
  if (mapperID == null) {
    mapperBaseURI=CoreSpringFactory.getImpl(MapperService.class).register(uSess,cssUriMapper);
  }
 else {
    mapperID=this.getClass().getSimpleName() + ""String_Node_Str"" + mapperID+ System.currentTimeMillis();
    mapperBaseURI=CoreSpringFactory.getImpl(MapperService.class).register(mapperID,cssUriMapper);
  }
}"
69840,"/** 
 * @see org.olat.core.gui.media.AsyncMediaResponsible#getAsyncMediaResource(org.olat.core.gui.UserRequest)
 */
public MediaResource getAsyncMediaResource(UserRequest ureq){
  String moduleURI=ureq.getModuleURI();
  MediaResource mr=null;
  if (moduleURI != null) {
    if (moduleURI.startsWith(OLAT_CMD_PREFIX)) {
      String cmdAndSub=moduleURI.substring(OLAT_CMD_PREFIX.length());
      int slpos=cmdAndSub.indexOf('/');
      if (slpos != -1) {
        String cmd=cmdAndSub.substring(0,slpos);
        String subcmd=cmdAndSub.substring(slpos + 1);
        OlatCmdEvent aev=new OlatCmdEvent(cmd,subcmd);
        fireEvent(ureq,aev);
        if (aev.isAccepted())         return null;
      }
    }
    VFSItem sourceItem=rootContainer.resolve(moduleURI);
    if (sourceItem == null || (sourceItem instanceof VFSContainer)) {
      return new NotFoundMediaResource(moduleURI);
    }
    boolean checkRegular=true;
    if ((ureq.getParameter(""String_Node_Str"") != null) || ((moduleURI.endsWith(""String_Node_Str"") || moduleURI.endsWith(""String_Node_Str"")) && (ureq.getParameter(""String_Node_Str"") != null))) {
      Tracing.logDebug(""String_Node_Str"" + moduleURI,HtmlStaticPageComponent.class);
      ExternalSiteEvent ese=new ExternalSiteEvent(moduleURI);
      fireEvent(ureq,ese);
      if (ese.isAccepted()) {
        mr=ese.getResultingMediaResource();
        Tracing.logDebug(""String_Node_Str"",HtmlStaticPageComponent.class);
        checkRegular=false;
      }
 else {
        Mapper mapper=createMapper(rootContainer);
        String amapPath;
        String mapperID=VFSManager.getRealPath(rootContainer);
        if (mapperID == null) {
          amapPath=CoreSpringFactory.getImpl(MapperService.class).register(ureq.getUserSession(),mapper);
        }
 else {
          mapperID=this.getClass().getSimpleName() + ""String_Node_Str"" + mapperID;
          amapPath=CoreSpringFactory.getImpl(MapperService.class).register(ureq.getUserSession(),mapperID,mapper);
        }
        ese.setResultingMediaResource(new RedirectMediaResource(amapPath + ""String_Node_Str"" + moduleURI));
        Tracing.logDebug(""String_Node_Str"" + amapPath + ""String_Node_Str""+ moduleURI,HtmlStaticPageComponent.class);
        ese.accept();
        mr=ese.getResultingMediaResource();
        checkRegular=false;
      }
    }
    if (checkRegular) {
      if ((moduleURI.endsWith(""String_Node_Str"") || moduleURI.endsWith(""String_Node_Str"")) && (ureq.getParameter(""String_Node_Str"") == null)) {
        currentURI=moduleURI;
        getFileContent((VFSLeaf)sourceItem);
        fireEvent(ureq,new NewInlineUriEvent(currentURI));
      }
 else {
        mr=new VFSMediaResource((VFSLeaf)sourceItem);
      }
    }
  }
  return mr;
}","/** 
 * @see org.olat.core.gui.media.AsyncMediaResponsible#getAsyncMediaResource(org.olat.core.gui.UserRequest)
 */
public MediaResource getAsyncMediaResource(UserRequest ureq){
  String moduleURI=ureq.getModuleURI();
  MediaResource mr=null;
  if (moduleURI != null) {
    if (moduleURI.startsWith(OLAT_CMD_PREFIX)) {
      String cmdAndSub=moduleURI.substring(OLAT_CMD_PREFIX.length());
      int slpos=cmdAndSub.indexOf('/');
      if (slpos != -1) {
        String cmd=cmdAndSub.substring(0,slpos);
        String subcmd=cmdAndSub.substring(slpos + 1);
        OlatCmdEvent aev=new OlatCmdEvent(cmd,subcmd);
        fireEvent(ureq,aev);
        if (aev.isAccepted())         return null;
      }
    }
    VFSItem sourceItem=rootContainer.resolve(moduleURI);
    if (sourceItem == null || (sourceItem instanceof VFSContainer)) {
      return new NotFoundMediaResource(moduleURI);
    }
    boolean checkRegular=true;
    if ((ureq.getParameter(""String_Node_Str"") != null) || ((moduleURI.endsWith(""String_Node_Str"") || moduleURI.endsWith(""String_Node_Str"")) && (ureq.getParameter(""String_Node_Str"") != null))) {
      Tracing.logDebug(""String_Node_Str"" + moduleURI,HtmlStaticPageComponent.class);
      ExternalSiteEvent ese=new ExternalSiteEvent(moduleURI);
      fireEvent(ureq,ese);
      if (ese.isAccepted()) {
        mr=ese.getResultingMediaResource();
        Tracing.logDebug(""String_Node_Str"",HtmlStaticPageComponent.class);
        checkRegular=false;
      }
 else {
        Mapper mapper=createMapper(rootContainer);
        String amapPath;
        String mapperID=VFSManager.getRealPath(rootContainer);
        if (mapperID == null) {
          amapPath=CoreSpringFactory.getImpl(MapperService.class).register(ureq.getUserSession(),mapper);
        }
 else {
          mapperID=this.getClass().getSimpleName() + ""String_Node_Str"" + mapperID;
          amapPath=CoreSpringFactory.getImpl(MapperService.class).register(mapperID,mapper);
        }
        ese.setResultingMediaResource(new RedirectMediaResource(amapPath + ""String_Node_Str"" + moduleURI));
        Tracing.logDebug(""String_Node_Str"" + amapPath + ""String_Node_Str""+ moduleURI,HtmlStaticPageComponent.class);
        ese.accept();
        mr=ese.getResultingMediaResource();
        checkRegular=false;
      }
    }
    if (checkRegular) {
      if ((moduleURI.endsWith(""String_Node_Str"") || moduleURI.endsWith(""String_Node_Str"")) && (ureq.getParameter(""String_Node_Str"") == null)) {
        currentURI=moduleURI;
        getFileContent((VFSLeaf)sourceItem);
        fireEvent(ureq,new NewInlineUriEvent(currentURI));
      }
 else {
        mr=new VFSMediaResource((VFSLeaf)sourceItem);
      }
    }
  }
  return mr;
}"
69841,"/** 
 * convenience method: registers a cacheable mapper which will be automatically deregistered upon dispose of the controller
 * @param cacheableMapperID the mapper ID that is used in the url to identify this mapper. Should be something that is derived from the context or resource that is delivered by the mapper
 * @param m the mapper that delivers the resources
 * @return The mapper base URL
 */
protected String registerCacheableMapper(UserRequest ureq,String cacheableMapperID,Mapper m){
  if (mappers == null) {
    mappers=new ArrayList<Mapper>(2);
  }
  String mapperBaseURL;
  if (cacheableMapperID == null) {
    mapperBaseURL=CoreSpringFactory.getImpl(MapperService.class).register(ureq.getUserSession(),m);
  }
 else {
    mapperBaseURL=CoreSpringFactory.getImpl(MapperService.class).register(ureq.getUserSession(),cacheableMapperID,m);
  }
  mappers.add(m);
  return mapperBaseURL;
}","/** 
 * convenience method: registers a cacheable mapper which will be automatically deregistered upon dispose of the controller
 * @param cacheableMapperID the mapper ID that is used in the url to identify this mapper. Should be something that is derived from the context or resource that is delivered by the mapper
 * @param m the mapper that delivers the resources
 * @return The mapper base URL
 */
protected String registerCacheableMapper(UserRequest ureq,String cacheableMapperID,Mapper m){
  if (mappers == null) {
    mappers=new ArrayList<Mapper>(2);
  }
  String mapperBaseURL;
  if (cacheableMapperID == null) {
    mapperBaseURL=CoreSpringFactory.getImpl(MapperService.class).register(ureq.getUserSession(),m);
  }
 else {
    mapperBaseURL=CoreSpringFactory.getImpl(MapperService.class).register(cacheableMapperID,m);
  }
  mappers.add(m);
  return mapperBaseURL;
}"
69842,"/** 
 * @param event
 */
void fireEvent(final Event event){
  GenericEventListener[] liArr;
synchronized (listeners) {
    List<GenericEventListener> li=new ArrayList<GenericEventListener>(listeners.keySet());
    liArr=new GenericEventListener[li.size()];
    liArr=li.toArray(liArr);
  }
  for (int i=0; i < liArr.length; i++) {
    try {
      final GenericEventListener listener=liArr[i];
      if (listener instanceof Controller) {
        Controller dCtrl=(Controller)listener;
        if (!dCtrl.isDisposed()) {
          ThreadLocalUserActivityLoggerInstaller.runWithUserActivityLogger(new Runnable(){
            public void run(){
              listener.event(event);
            }
          }
,UserActivityLoggerImpl.newLoggerForEventBus(dCtrl));
        }
      }
 else {
        if (log.isDebug()) {
          log.debug(""String_Node_Str"" + listener);
        }
        ThreadLocalUserActivityLoggerInstaller.runWithUserActivityLogger(new Runnable(){
          public void run(){
            listener.event(event);
          }
        }
,ThreadLocalUserActivityLoggerInstaller.createEmptyUserActivityLogger());
      }
    }
 catch (    RuntimeException e) {
      log.error(""String_Node_Str"" + liArr[i],e);
      removeListener(liArr[i]);
    }
  }
}","/** 
 * @param event
 */
void fireEvent(final Event event){
  GenericEventListener[] liArr;
synchronized (listeners) {
    List<GenericEventListener> li=new ArrayList<GenericEventListener>(listeners.keySet());
    liArr=new GenericEventListener[li.size()];
    liArr=li.toArray(liArr);
  }
  for (int i=0; i < liArr.length; i++) {
    try {
      final GenericEventListener listener=liArr[i];
      if (listener instanceof Controller) {
        Controller dCtrl=(Controller)listener;
        if (!dCtrl.isDisposed()) {
          ThreadLocalUserActivityLoggerInstaller.runWithUserActivityLogger(new Runnable(){
            public void run(){
              listener.event(event);
            }
          }
,UserActivityLoggerImpl.newLoggerForEventBus(dCtrl));
        }
      }
 else {
        if (log.isDebug()) {
          log.debug(""String_Node_Str"" + listener);
        }
        ThreadLocalUserActivityLoggerInstaller.runWithUserActivityLogger(new Runnable(){
          public void run(){
            listener.event(event);
          }
        }
,ThreadLocalUserActivityLoggerInstaller.createEmptyUserActivityLogger());
      }
    }
 catch (    RuntimeException e) {
      log.error(""String_Node_Str"" + liArr[i],e);
    }
  }
}"
69843,"public Workbook log(OLATResourceable ores,Locale locale){
  Translator translator=Util.createPackageTranslator(ChatController.class,locale);
  Workbook wb=new HSSFWorkbook();
  String tableExportTitle=translator.translate(""String_Node_Str"");
  Sheet exportSheet=wb.createSheet(tableExportTitle);
  Row headerRow=exportSheet.createRow(0);
  CellStyle headerCellStyle=getHeaderCellStyle(wb);
  addHeader(headerRow,headerCellStyle,""String_Node_Str"",0);
  addHeader(headerRow,headerCellStyle,""String_Node_Str"",1);
  addHeader(headerRow,headerCellStyle,""String_Node_Str"",2);
  List<InstantMessage> messages=imDao.getMessages(ores,null,0,-1);
  int count=1;
  for (  InstantMessage message : messages) {
    Row dataRow=exportSheet.createRow(count);
    addCell(dataRow,message.getFromNickName(),0);
    addCell(dataRow,message.getCreationDate(),1);
    addCell(dataRow,message.getBody(),2);
  }
  return wb;
}","public Workbook log(OLATResourceable ores,Locale locale){
  Translator translator=Util.createPackageTranslator(ChatController.class,locale);
  Workbook wb=new HSSFWorkbook();
  String tableExportTitle=translator.translate(""String_Node_Str"");
  Sheet exportSheet=wb.createSheet(tableExportTitle);
  Row headerRow=exportSheet.createRow(0);
  CellStyle headerCellStyle=getHeaderCellStyle(wb);
  addHeader(headerRow,headerCellStyle,""String_Node_Str"",0);
  addHeader(headerRow,headerCellStyle,""String_Node_Str"",1);
  addHeader(headerRow,headerCellStyle,""String_Node_Str"",2);
  List<InstantMessage> messages=imDao.getMessages(ores,null,0,-1);
  int count=1;
  for (  InstantMessage message : messages) {
    Row dataRow=exportSheet.createRow(count++);
    addCell(dataRow,message.getFromNickName(),0);
    addCell(dataRow,message.getCreationDate(),1);
    addCell(dataRow,message.getBody(),2);
  }
  return wb;
}"
69844,"public List<RosterEntryView> getRosterView(OLATResourceable ores,int firstResult,int maxResults){
  TypedQuery<RosterEntryView> query=dbInstance.getCurrentEntityManager().createNamedQuery(""String_Node_Str"",RosterEntryView.class).setParameter(""String_Node_Str"",ores.getResourceableId()).setParameter(""String_Node_Str"",ores.getResourceableTypeName()).setFirstResult(firstResult).setHint(""String_Node_Str"",Boolean.TRUE);
  if (maxResults > 0) {
    query.setMaxResults(maxResults);
  }
  return query.getResultList();
}","public List<RosterEntryView> getRosterView(OLATResourceable ores,int firstResult,int maxResults){
  TypedQuery<RosterEntryView> query=dbInstance.getCurrentEntityManager().createNamedQuery(""String_Node_Str"",RosterEntryView.class).setParameter(""String_Node_Str"",ores.getResourceableId()).setParameter(""String_Node_Str"",ores.getResourceableTypeName()).setFirstResult(firstResult);
  if (maxResults > 0) {
    query.setMaxResults(maxResults);
  }
  return query.getResultList();
}"
69845,"/** 
 * gets called if either a new message or a presence change from one of the buddies happens or an Assessment starts or ends
 * @see org.olat.core.util.event.GenericEventListener#event(org.olat.core.gui.control.Event)
 */
public void event(Event event){
  if (event instanceof InstantMessagingEvent) {
    processInstantMessageEvent((InstantMessagingEvent)event);
  }
 else   if (event instanceof AssessmentEvent) {
    processAssessmentEvent((AssessmentEvent)event);
  }
 else   if (event instanceof OpenInstantMessageEvent) {
    processOpenInstantMessageEvent((OpenInstantMessageEvent)event);
  }
 else   if (event instanceof CloseInstantMessagingEvent) {
    processCloseInstantMessageEvent();
  }
}","/** 
 * gets called if either a new message or a presence change from one of the buddies happens or an Assessment starts or ends
 * @see org.olat.core.util.event.GenericEventListener#event(org.olat.core.gui.control.Event)
 */
public void event(Event event){
  if (event instanceof InstantMessagingEvent) {
    processInstantMessageEvent((InstantMessagingEvent)event);
  }
 else   if (event instanceof AssessmentEvent) {
    processAssessmentEvent((AssessmentEvent)event);
  }
 else   if (event instanceof OpenInstantMessageEvent) {
    processOpenInstantMessageEvent((OpenInstantMessageEvent)event);
  }
 else   if (event instanceof CloseInstantMessagingEvent) {
    processCloseInstantMessageEvent();
  }
 else   if (Window.BEFORE_INLINE_RENDERING.equals(event)) {
    if (++stateUpdateCounter % 25 == 0) {
      updateBuddyStats();
    }
  }
}"
69846,"public InstantMessagingMainController(UserRequest ureq,WindowControl wControl){
  super(ureq,wControl);
  imService=CoreSpringFactory.getImpl(InstantMessagingService.class);
  boolean ajaxOn=getWindowControl().getWindowBackOffice().getWindowManager().isAjaxEnabled();
  chatContent.contextPut(""String_Node_Str"",Boolean.valueOf(ajaxOn));
  jsc=new JSAndCSSComponent(""String_Node_Str"",this.getClass(),null,null,false,null,5000);
  main.put(""String_Node_Str"",jsc);
  newMsgIcon.contextPut(""String_Node_Str"",showNewMessageHolder);
  Theme guiTheme=getWindowControl().getWindowBackOffice().getWindow().getGuiTheme();
  String newMessageSoundURL=guiTheme.getBaseURI() + ""String_Node_Str"";
  File soundFile=new File(WebappHelper.getContextRoot() + ""String_Node_Str"" + guiTheme.getIdentifyer()+ ""String_Node_Str"");
  if (!soundFile.exists()) {
    newMessageSoundURL=newMessageSoundURL.replace(""String_Node_Str"" + guiTheme.getIdentifyer(),""String_Node_Str"");
  }
  newMsgIcon.contextPut(""String_Node_Str"",newMessageSoundURL);
  loadNotifications();
  statusChangerLink=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,null,this);
  statusChangerLink.registerForMousePositionEvent(true);
  statusChangerLink.setTooltip(getTranslator().translate(""String_Node_Str""),false);
  updateStatusCss(null);
  main.put(""String_Node_Str"",statusChangerLink);
  InstantMessagingModule imModule=CoreSpringFactory.getImpl(InstantMessagingModule.class);
  if (imModule.isGroupPeersEnabled()) {
    onlineOfflineCount=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,main,this);
    onlineOfflineCount.setTooltip(getTranslator().translate(""String_Node_Str""),false);
    onlineOfflineCount.registerForMousePositionEvent(true);
    updateBuddyStats();
    main.put(""String_Node_Str"",onlineOfflineCount);
  }
  main.put(""String_Node_Str"",newMsgIcon);
  rosterPanel=new Panel(""String_Node_Str"");
  main.put(""String_Node_Str"",rosterPanel);
  statusPanel=new Panel(""String_Node_Str"");
  main.put(""String_Node_Str"",statusPanel);
  chatMgrCtrl=new ChatManagerController(ureq,wControl);
  listenTo(chatMgrCtrl);
  newMsgIcon.put(""String_Node_Str"",chatMgrCtrl.getInitialComponent());
  imService.listenChat(getIdentity(),getPrivatListenToResourceable(),false,false,this);
  singleUserEventCenter=ureq.getUserSession().getSingleUserEventCenter();
  singleUserEventCenter.registerFor(this,getIdentity(),InstantMessagingService.ASSESSMENT_EVENT_ORES);
  singleUserEventCenter.registerFor(this,getIdentity(),InstantMessagingService.TOWER_EVENT_ORES);
  putInitialPanel(main);
}","public InstantMessagingMainController(UserRequest ureq,WindowControl wControl){
  super(ureq,wControl);
  imService=CoreSpringFactory.getImpl(InstantMessagingService.class);
  boolean ajaxOn=getWindowControl().getWindowBackOffice().getWindowManager().isAjaxEnabled();
  chatContent.contextPut(""String_Node_Str"",Boolean.valueOf(ajaxOn));
  jsc=new JSAndCSSComponent(""String_Node_Str"",this.getClass(),null,null,false,null,5000);
  main.put(""String_Node_Str"",jsc);
  newMsgIcon.contextPut(""String_Node_Str"",showNewMessageHolder);
  Theme guiTheme=getWindowControl().getWindowBackOffice().getWindow().getGuiTheme();
  String newMessageSoundURL=guiTheme.getBaseURI() + ""String_Node_Str"";
  File soundFile=new File(WebappHelper.getContextRoot() + ""String_Node_Str"" + guiTheme.getIdentifyer()+ ""String_Node_Str"");
  if (!soundFile.exists()) {
    newMessageSoundURL=newMessageSoundURL.replace(""String_Node_Str"" + guiTheme.getIdentifyer(),""String_Node_Str"");
  }
  newMsgIcon.contextPut(""String_Node_Str"",newMessageSoundURL);
  loadNotifications();
  statusChangerLink=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,null,this);
  statusChangerLink.registerForMousePositionEvent(true);
  statusChangerLink.setTooltip(getTranslator().translate(""String_Node_Str""),false);
  updateStatusCss(null);
  main.put(""String_Node_Str"",statusChangerLink);
  InstantMessagingModule imModule=CoreSpringFactory.getImpl(InstantMessagingModule.class);
  if (imModule.isGroupPeersEnabled()) {
    onlineOfflineCount=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,main,this);
    onlineOfflineCount.setTooltip(getTranslator().translate(""String_Node_Str""),false);
    onlineOfflineCount.registerForMousePositionEvent(true);
    updateBuddyStats();
    main.put(""String_Node_Str"",onlineOfflineCount);
    getWindowControl().getWindowBackOffice().addCycleListener(this);
  }
  main.put(""String_Node_Str"",newMsgIcon);
  rosterPanel=new Panel(""String_Node_Str"");
  main.put(""String_Node_Str"",rosterPanel);
  statusPanel=new Panel(""String_Node_Str"");
  main.put(""String_Node_Str"",statusPanel);
  chatMgrCtrl=new ChatManagerController(ureq,wControl);
  listenTo(chatMgrCtrl);
  newMsgIcon.put(""String_Node_Str"",chatMgrCtrl.getInitialComponent());
  imService.listenChat(getIdentity(),getPrivatListenToResourceable(),false,false,this);
  singleUserEventCenter=ureq.getUserSession().getSingleUserEventCenter();
  singleUserEventCenter.registerFor(this,getIdentity(),InstantMessagingService.ASSESSMENT_EVENT_ORES);
  singleUserEventCenter.registerFor(this,getIdentity(),InstantMessagingService.TOWER_EVENT_ORES);
  putInitialPanel(main);
}"
69847,"private String generateNickname(){
  String prefix=anonymPrefix[(int)(Math.random() * anonymPrefix.length)];
  String name=prefix + ""String_Node_Str"" + (int)(Math.random() * getIdentity().getKey());
  return name;
}","private String generateNickname(){
  String prefix=anonymPrefix[(int)(Math.random() * (anonymPrefix.length - 1))];
  String name=prefix + ""String_Node_Str"" + (int)(Math.random() * getIdentity().getKey());
  return name;
}"
69848,"/** 
 * if the wiki need to serve images you have to set the image mapper uri first! The mapper creates an user session based mapper for the media files which can be requested by calling @see getImageBaseUri()
 * @param ureq
 * @param wikiContainer
 */
public void setImageMapperUri(UserRequest ureq,final VFSContainer wikiContainer){
  Mapper contentMapper=new Mapper(){
    public MediaResource handle(    String relPath,    HttpServletRequest request){
      VFSItem vfsItem=wikiContainer.resolve(relPath);
      MediaResource mr;
      if (vfsItem == null || !(vfsItem instanceof VFSLeaf))       mr=new NotFoundMediaResource(relPath);
 else       mr=new VFSMediaResource((VFSLeaf)vfsItem);
      return mr;
    }
  }
;
  String mapperPath;
  String mapperID=VFSManager.getRealPath(wikiContainer);
  if (mapperID == null) {
    mapperPath=CoreSpringFactory.getImpl(MapperService.class).register(ureq.getUserSession(),contentMapper);
  }
 else {
    mapperID=this.getClass().getSimpleName() + ""String_Node_Str"" + mapperID;
    mapperPath=CoreSpringFactory.getImpl(MapperService.class).register(ureq.getUserSession(),mapperID,contentMapper);
  }
  imageBaseUri=mapperPath + ""String_Node_Str"" + WikiContainer.MEDIA_FOLDER_NAME+ ""String_Node_Str"";
}","/** 
 * if the wiki need to serve images you have to set the image mapper uri first! The mapper creates an user session based mapper for the media files which can be requested by calling @see getImageBaseUri()
 * @param ureq
 * @param wikiContainer
 */
public void setImageMapperUri(UserRequest ureq,final VFSContainer wikiContainer){
  Mapper contentMapper=new Mapper(){
    public MediaResource handle(    String relPath,    HttpServletRequest request){
      VFSItem vfsItem=wikiContainer.resolve(relPath);
      MediaResource mr;
      if (vfsItem == null || !(vfsItem instanceof VFSLeaf))       mr=new NotFoundMediaResource(relPath);
 else       mr=new VFSMediaResource((VFSLeaf)vfsItem);
      return mr;
    }
  }
;
  String mapperPath;
  String mapperID=VFSManager.getRealPath(wikiContainer);
  if (mapperID == null) {
    mapperPath=CoreSpringFactory.getImpl(MapperService.class).register(ureq.getUserSession(),contentMapper);
  }
 else {
    mapperID=this.getClass().getSimpleName() + ""String_Node_Str"" + mapperID;
    mapperPath=CoreSpringFactory.getImpl(MapperService.class).register(mapperID,contentMapper);
  }
  imageBaseUri=mapperPath + ""String_Node_Str"" + WikiContainer.MEDIA_FOLDER_NAME+ ""String_Node_Str"";
}"
69849,"/** 
 * Call this to commit a transaction opened by beginTransaction().
 */
@Override public void commit(){
  if (isLogDebugEnabled())   logDebug(""String_Node_Str"",null);
  try {
    if (hasTransaction() && !isError()) {
      if (isLogDebugEnabled())       logDebug(""String_Node_Str"",null);
      getData().incrementCommitCounter();
      if (isLogDebugEnabled()) {
        if ((maxCommitCounter != 0) && (getData().getCommitCounter() > maxCommitCounter)) {
          logInfo(""String_Node_Str"" + getData().getCommitCounter() + ""String_Node_Str"",null);
        }
      }
      EntityTransaction trx=getCurrentEntityManager().getTransaction();
      if (trx != null) {
        trx.commit();
      }
      if (isLogDebugEnabled())       logDebug(""String_Node_Str"" + hasTransaction(),null);
    }
 else {
      if (isLogDebugEnabled())       logDebug(""String_Node_Str"",null);
    }
  }
 catch (  Error er) {
    logError(""String_Node_Str"",er);
    throw er;
  }
catch (  Exception e) {
    if (!Thread.currentThread().getName().equals(""String_Node_Str"")) {
      logWarn(""String_Node_Str"",e);
    }
    try {
      if (hasTransaction()) {
        TransactionStatus status=txManager.getTransaction(null);
        txManager.rollback(status);
      }
    }
 catch (    Error er) {
      logError(""String_Node_Str"",er);
      throw er;
    }
catch (    Exception ex) {
      logWarn(""String_Node_Str"",ex);
      throw new DBRuntimeException(""String_Node_Str"",e);
    }
    throw new DBRuntimeException(""String_Node_Str"",e);
  }
}","/** 
 * Call this to commit a transaction opened by beginTransaction().
 */
@Override public void commit(){
  if (isLogDebugEnabled())   logDebug(""String_Node_Str"",null);
  try {
    if (hasTransaction() && !isError()) {
      if (isLogDebugEnabled())       logDebug(""String_Node_Str"",null);
      getData().incrementCommitCounter();
      if (isLogDebugEnabled()) {
        if ((maxCommitCounter != 0) && (getData().getCommitCounter() > maxCommitCounter)) {
          logInfo(""String_Node_Str"" + getData().getCommitCounter() + ""String_Node_Str"",null);
        }
      }
      EntityTransaction trx=getCurrentEntityManager().getTransaction();
      if (trx != null) {
        trx.commit();
      }
      if (isLogDebugEnabled())       logDebug(""String_Node_Str"" + hasTransaction(),null);
    }
 else {
      if (isLogDebugEnabled())       logDebug(""String_Node_Str"",null);
    }
  }
 catch (  Error er) {
    logError(""String_Node_Str"",er);
    throw er;
  }
catch (  Exception e) {
    if (!Thread.currentThread().getName().equals(""String_Node_Str"")) {
      logWarn(""String_Node_Str"",e);
    }
    try {
      if (hasTransaction()) {
        TransactionStatus status=txManager.getTransaction(null);
        txManager.rollback(status);
        EntityTransaction trx=getCurrentEntityManager().getTransaction();
        if (trx != null) {
          trx.rollback();
        }
      }
    }
 catch (    Error er) {
      logError(""String_Node_Str"",er);
      throw er;
    }
catch (    Exception ex) {
      logWarn(""String_Node_Str"",ex);
      throw new DBRuntimeException(""String_Node_Str"",e);
    }
    throw new DBRuntimeException(""String_Node_Str"",e);
  }
}"
69850,"/** 
 * Call this to rollback current changes.
 */
@Override public void rollback(){
  if (isLogDebugEnabled())   logDebug(""String_Node_Str"",null);
  try {
    TransactionStatus status=txManager.getTransaction(null);
    txManager.rollback(status);
  }
 catch (  Exception ex) {
    logWarn(""String_Node_Str"",ex);
    throw new DBRuntimeException(""String_Node_Str"",ex);
  }
}","/** 
 * Call this to rollback current changes.
 */
@Override public void rollback(){
  if (isLogDebugEnabled())   logDebug(""String_Node_Str"",null);
  try {
    TransactionStatus status=txManager.getTransaction(null);
    txManager.rollback(status);
    EntityTransaction trx=getCurrentEntityManager().getTransaction();
    if (trx != null) {
      trx.rollback();
    }
  }
 catch (  Exception ex) {
    logWarn(""String_Node_Str"",ex);
    throw new DBRuntimeException(""String_Node_Str"",ex);
  }
}"
69851,"private void addCell(Row dataRow,Date val,int position){
  Cell cell=dataRow.createCell(position);
  cell.setCellValue(val);
}","private void addCell(Row dataRow,Date val,int position,Formatter formatter){
  Cell cell=dataRow.createCell(position);
  cell.setCellValue(formatter.formatDateAndTime(val));
}"
69852,"public Workbook log(OLATResourceable ores,Locale locale){
  Translator translator=Util.createPackageTranslator(ChatController.class,locale);
  Workbook wb=new HSSFWorkbook();
  String tableExportTitle=translator.translate(""String_Node_Str"");
  Sheet exportSheet=wb.createSheet(tableExportTitle);
  Row headerRow=exportSheet.createRow(0);
  CellStyle headerCellStyle=getHeaderCellStyle(wb);
  addHeader(headerRow,headerCellStyle,""String_Node_Str"",0);
  addHeader(headerRow,headerCellStyle,""String_Node_Str"",1);
  addHeader(headerRow,headerCellStyle,""String_Node_Str"",2);
  List<InstantMessage> messages=imDao.getMessages(ores,null,0,-1);
  int count=1;
  for (  InstantMessage message : messages) {
    Row dataRow=exportSheet.createRow(count++);
    addCell(dataRow,message.getFromNickName(),0);
    addCell(dataRow,message.getCreationDate(),1);
    addCell(dataRow,message.getBody(),2);
  }
  return wb;
}","public Workbook log(OLATResourceable ores,Locale locale){
  Translator translator=Util.createPackageTranslator(ChatController.class,locale);
  Workbook wb=new HSSFWorkbook();
  String tableExportTitle=translator.translate(""String_Node_Str"");
  Sheet exportSheet=wb.createSheet(tableExportTitle);
  Formatter formatter=Formatter.getInstance(locale);
  Row headerRow=exportSheet.createRow(0);
  CellStyle headerCellStyle=getHeaderCellStyle(wb);
  addHeader(headerRow,headerCellStyle,""String_Node_Str"",0);
  addHeader(headerRow,headerCellStyle,""String_Node_Str"",1);
  addHeader(headerRow,headerCellStyle,""String_Node_Str"",2);
  List<InstantMessage> messages=imDao.getMessages(ores,null,0,-1);
  int count=1;
  for (  InstantMessage message : messages) {
    Row dataRow=exportSheet.createRow(count++);
    addCell(dataRow,message.getFromNickName(),0);
    addCell(dataRow,message.getCreationDate(),1,formatter);
    addCell(dataRow,message.getBody(),2);
  }
  return wb;
}"
69853,"/** 
 * Close the chats windows
 */
protected void closeAllChats(){
  List<Long> chatKeys=new ArrayList<Long>(chats.keySet());
  for (  Long chatKey : chatKeys) {
    Component p=container.getComponent(chatKey.toString());
    if (p != null) {
      container.remove(p);
    }
    ChatController ctrl=chats.get(chatKey);
    if (ctrl != null) {
      ctrl.closeChat();
    }
  }
  chats.clear();
}","/** 
 * Close the chats windows
 */
protected void closeAllChats(){
  List<Long> chatKeys=new ArrayList<Long>(chats.keySet());
  for (  Long chatKey : chatKeys) {
    closeChat(chatKey);
  }
  chats.clear();
}"
69854,"private String getStatusCss(Buddy buddy){
  StringBuilder sb=new StringBuilder(32);
  sb.append(""String_Node_Str"").append(buddy.getStatus()).append(""String_Node_Str"");
  if (buddy.isVip()) {
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","private String getStatusCss(Buddy buddy){
  StringBuilder sb=new StringBuilder(32);
  if (imModule.isOnlineStatusEnabled()) {
    sb.append(""String_Node_Str"").append(buddy.getStatus()).append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  if (buddy.isVip()) {
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}"
69855,"@Override protected void event(UserRequest ureq,Component source,Event event){
  if (source == toggleOffline) {
    if (viewMode == ViewMode.onlineUsers) {
      toggleOffline.setCustomDisplayText(translate(""String_Node_Str""));
      toggleOffline.setCustomEnabledLinkCSS(""String_Node_Str"");
      loadRoster(ViewMode.offlineUsers);
    }
 else {
      toggleOffline.setCustomDisplayText(translate(""String_Node_Str""));
      toggleOffline.setCustomEnabledLinkCSS(""String_Node_Str"");
      loadRoster(ViewMode.onlineUsers);
    }
  }
 else   if (source instanceof Link) {
    Link link=(Link)source;
    if (""String_Node_Str"".equals(link.getCommand())) {
      Buddy buddy=(Buddy)link.getUserObject();
      fireEvent(ureq,new OpenInstantMessageEvent(ureq,buddy));
    }
  }
}","@Override protected void event(UserRequest ureq,Component source,Event event){
  if (source == toggleOffline) {
    if (viewMode == ViewMode.onlineUsers) {
      toggleOffline.setCustomDisplayText(translate(""String_Node_Str""));
      toggleOffline.setCustomEnabledLinkCSS(""String_Node_Str"");
      loadRoster(ViewMode.offlineUsers);
    }
 else {
      toggleOffline.setCustomDisplayText(translate(""String_Node_Str""));
      toggleOffline.setCustomEnabledLinkCSS(""String_Node_Str"");
      loadRoster(ViewMode.onlineUsers);
    }
  }
 else   if (source == toggleGroup) {
    if (viewGroups) {
      toggleGroup.setCustomDisplayText(translate(""String_Node_Str""));
      toggleGroup.setCustomEnabledLinkCSS(""String_Node_Str"");
      buddiesListContent.contextPut(""String_Node_Str"",Boolean.FALSE);
      viewGroups=false;
    }
 else {
      toggleGroup.setCustomDisplayText(translate(""String_Node_Str""));
      toggleGroup.setCustomEnabledLinkCSS(""String_Node_Str"");
      buddiesListContent.contextPut(""String_Node_Str"",Boolean.TRUE);
      viewGroups=true;
    }
  }
 else   if (source instanceof Link) {
    Link link=(Link)source;
    if (""String_Node_Str"".equals(link.getCommand())) {
      Buddy buddy=(Buddy)link.getUserObject();
      fireEvent(ureq,new OpenInstantMessageEvent(ureq,buddy));
    }
  }
}"
69856,"public IMBuddyListController(UserRequest ureq,WindowControl wControl){
  super(ureq,wControl);
  imModule=CoreSpringFactory.getImpl(InstantMessagingModule.class);
  imService=CoreSpringFactory.getImpl(InstantMessagingService.class);
  mainVC=createVelocityContainer(""String_Node_Str"");
  buddiesListContent=createVelocityContainer(""String_Node_Str"");
  if (imModule.isOnlineStatusEnabled()) {
    toggleOffline=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,mainVC,this);
    toggleOffline.setCustomDisplayText(translate(""String_Node_Str""));
    toggleOffline.setCustomEnabledLinkCSS(""String_Node_Str"");
    viewMode=ViewMode.onlineUsers;
  }
 else {
    viewMode=ViewMode.offlineUsers;
  }
  buddyList=new Roster(getIdentity().getKey());
  mainVC.contextPut(""String_Node_Str"",buddyList);
  buddiesListContent.contextPut(""String_Node_Str"",buddyList);
  loadRoster(viewMode);
  mainVC.put(""String_Node_Str"",buddiesListContent);
  putInitialPanel(mainVC);
}","public IMBuddyListController(UserRequest ureq,WindowControl wControl){
  super(ureq,wControl);
  imModule=CoreSpringFactory.getImpl(InstantMessagingModule.class);
  imService=CoreSpringFactory.getImpl(InstantMessagingService.class);
  mainVC=createVelocityContainer(""String_Node_Str"");
  buddiesListContent=createVelocityContainer(""String_Node_Str"");
  if (imModule.isOnlineStatusEnabled()) {
    toggleOffline=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,mainVC,this);
    toggleOffline.setCustomDisplayText(translate(""String_Node_Str""));
    toggleOffline.setCustomEnabledLinkCSS(""String_Node_Str"");
    viewMode=ViewMode.onlineUsers;
  }
 else {
    viewMode=ViewMode.offlineUsers;
  }
  toggleGroup=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,mainVC,this);
  toggleGroup.setCustomDisplayText(translate(""String_Node_Str""));
  toggleGroup.setCustomEnabledLinkCSS(""String_Node_Str"");
  buddyList=new Roster(getIdentity().getKey());
  mainVC.contextPut(""String_Node_Str"",buddyList);
  buddiesListContent.contextPut(""String_Node_Str"",buddyList);
  buddiesListContent.contextPut(""String_Node_Str"",Boolean.TRUE);
  loadRoster(viewMode);
  mainVC.put(""String_Node_Str"",buddiesListContent);
  putInitialPanel(mainVC);
}"
69857,"private void forgeBuddyLink(BuddyGroup group,Buddy buddy){
  String linkId=""String_Node_Str"" + group.getGroupKey() + ""String_Node_Str""+ buddy.getIdentityKey();
  if (buddiesListContent.getComponent(linkId) == null) {
    Link buddyLink=LinkFactory.createCustomLink(linkId,""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,buddiesListContent,this);
    buddyLink.setCustomDisplayText(buddy.getName());
    String css=(imModule.isOnlineStatusEnabled() ? getStatusCss(buddy) : ""String_Node_Str"");
    buddyLink.setCustomEnabledLinkCSS(css);
    buddyLink.setUserObject(buddy);
  }
}","private void forgeBuddyLink(BuddyGroup group,Buddy buddy){
  String linkId=""String_Node_Str"" + group.getGroupKey() + ""String_Node_Str""+ buddy.getIdentityKey();
  if (buddiesListContent.getComponent(linkId) == null) {
    Link buddyLink=LinkFactory.createCustomLink(linkId,""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,buddiesListContent,this);
    buddyLink.setCustomDisplayText(buddy.getName());
    String css=getStatusCss(buddy);
    buddyLink.setCustomEnabledLinkCSS(css);
    buddyLink.setUserObject(buddy);
  }
  String linkIdAlt=""String_Node_Str"" + buddy.getIdentityKey();
  if (buddiesListContent.getComponent(linkIdAlt) == null) {
    Link buddyLink=LinkFactory.createCustomLink(linkIdAlt,""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,buddiesListContent,this);
    buddyLink.setCustomDisplayText(buddy.getName());
    String css=getStatusCss(buddy);
    buddyLink.setCustomEnabledLinkCSS(css);
    buddyLink.setUserObject(buddy);
  }
}"
69858,"/** 
 * gets called if either a new message or a presence change from one of the buddies happens or an Assessment starts or ends
 * @see org.olat.core.util.event.GenericEventListener#event(org.olat.core.gui.control.Event)
 */
public void event(Event event){
  if (event instanceof InstantMessagingEvent) {
    processInstantMessageEvent((InstantMessagingEvent)event);
  }
 else   if (event instanceof AssessmentEvent) {
    processAssessmentEvent((AssessmentEvent)event);
  }
 else   if (event instanceof OpenInstantMessageEvent) {
    processOpenInstantMessageEvent((OpenInstantMessageEvent)event);
  }
 else   if (event instanceof CloseInstantMessagingEvent) {
    processCloseInstantMessageEvent();
  }
 else   if (Window.BEFORE_INLINE_RENDERING.equals(event)) {
    if (++stateUpdateCounter % 25 == 0) {
      updateBuddyStats();
    }
  }
}","/** 
 * gets called if either a new message or a presence change from one of the buddies happens or an Assessment starts or ends
 * @see org.olat.core.util.event.GenericEventListener#event(org.olat.core.gui.control.Event)
 */
public void event(Event event){
  if (event instanceof InstantMessagingEvent) {
    processInstantMessageEvent((InstantMessagingEvent)event);
  }
 else   if (event instanceof AssessmentEvent) {
    processAssessmentEvent((AssessmentEvent)event);
  }
 else   if (event instanceof OpenInstantMessageEvent) {
    processOpenInstantMessageEvent((OpenInstantMessageEvent)event);
  }
 else   if (event instanceof CloseInstantMessagingEvent) {
    processCloseInstantMessageEvent((CloseInstantMessagingEvent)event);
  }
 else   if (Window.BEFORE_INLINE_RENDERING.equals(event)) {
    if (++stateUpdateCounter % 25 == 0) {
      updateBuddyStats();
    }
  }
}"
69859,"private void processCloseInstantMessageEvent(){
  if (statusChangerPanelCtr != null) {
    statusChangerPanelCtr.executeCloseCommand();
    removeAsListenerAndDispose(statusChangerPanelCtr);
    statusPanel.setContent(null);
  }
  if (rosterPanelCtr != null) {
    rosterPanelCtr.executeCloseCommand();
    removeAsListenerAndDispose(rosterPanelCtr);
    rosterPanel.setContent(null);
  }
  if (chatMgrCtrl != null) {
    chatMgrCtrl.closeAllChats();
  }
}","private void processCloseInstantMessageEvent(CloseInstantMessagingEvent event){
  if (event.getOres() == null) {
    close();
  }
 else {
    closeChat(event.getOres());
  }
}"
69860,"/** 
 * Removes the given <code>Item</code> from the <code>Feed</code>. Its content will be deleted.
 * @param item
 * @param feed
 */
public abstract void remove(Item item,Feed feed);","/** 
 * Removes the given <code>Item</code> from the <code>Feed</code>. Its content will be deleted.
 * @param item
 * @param feed
 */
public abstract Feed remove(Item item,Feed feed);"
69861,"/** 
 * Adds the given <code>Item</code> to the <code>Feed</code>.
 * @param item
 * @param feed
 */
public abstract void addItem(Item item,FileElement file,Feed feed);","/** 
 * Adds the given <code>Item</code> to the <code>Feed</code>.
 * @param item
 * @param feed
 */
public abstract Feed addItem(Item item,FileElement file,Feed feed);"
69862,"/** 
 * @param modifiedItem
 * @param feed
 */
public abstract void updateItem(Item modifiedItem,FileElement file,Feed feed);","/** 
 * @param modifiedItem
 * @param feed
 */
public abstract Feed updateItem(Item modifiedItem,FileElement file,Feed feed);"
69863,"/** 
 * @see org.olat.modules.webFeed.managers.FeedManager#updateItem(org.olat.modules.webFeed.models.Item,org.olat.core.gui.components.form.flexible.elements.FileElement,org.olat.modules.webFeed.models.Feed)
 */
@Override public void updateItem(final Item item,final FileElement file,final Feed feed){
  if (feed.isInternal()) {
    coordinator.getSyncer().doInSync(feed,new SyncerCallback<Object>(){
      @SuppressWarnings(""String_Node_Str"") public VFSLeaf execute(){
        Feed reloadedFeed=getFeed(feed,false);
        if (reloadedFeed.getItemIds().contains(item.getGuid())) {
          if (file != null) {
            setEnclosure(file,item,reloadedFeed);
          }
          updateItemFileWithoutDoInSync(item,reloadedFeed);
          update(feed,false);
        }
 else {
        }
        return null;
      }
    }
);
  }
}","/** 
 * @see org.olat.modules.webFeed.managers.FeedManager#updateItem(org.olat.modules.webFeed.models.Item,org.olat.core.gui.components.form.flexible.elements.FileElement,org.olat.modules.webFeed.models.Feed)
 */
@Override public Feed updateItem(final Item item,final FileElement file,final Feed feed){
  if (feed.isInternal()) {
    return coordinator.getSyncer().doInSync(feed,new SyncerCallback<Feed>(){
      @SuppressWarnings(""String_Node_Str"") public Feed execute(){
        Feed reloadedFeed=getFeed(feed,false);
        if (reloadedFeed.getItemIds().contains(item.getGuid())) {
          if (file != null) {
            setEnclosure(file,item,reloadedFeed);
          }
          updateItemFileWithoutDoInSync(item,reloadedFeed);
          update(feed,false);
        }
 else {
        }
        return reloadedFeed;
      }
    }
);
  }
  return null;
}"
69864,"/** 
 * @see org.olat.modules.webFeed.managers.FeedManager#remove(org.olat.modules.webFeed.models.Item,org.olat.modules.webFeed.models.Feed)
 */
@Override public void remove(final Item item,final Feed feed){
  coordinator.getSyncer().doInSync(feed,new SyncerCallback<Object>(){
    public VFSLeaf execute(){
      @SuppressWarnings(""String_Node_Str"") Feed reloadedFeed=getFeed(feed,false);
      reloadedFeed.remove(item);
      if (!reloadedFeed.hasItems()) {
        reloadedFeed.setExternal(null);
      }
      VFSContainer itemContainer=getItemContainer(item,reloadedFeed);
      if (itemContainer != null) {
        itemContainer.delete();
      }
      reloadedFeed.setLastModified(new Date());
      update(reloadedFeed,false);
      CommentAndRatingService commentAndRatingService=CoreSpringFactory.getImpl(CommentAndRatingService.class);
      if (commentAndRatingService != null) {
        commentAndRatingService.init(null,feed,item.getGuid(),true,false);
        commentAndRatingService.deleteAll();
      }
      return null;
    }
  }
);
}","/** 
 * @see org.olat.modules.webFeed.managers.FeedManager#remove(org.olat.modules.webFeed.models.Item,org.olat.modules.webFeed.models.Feed)
 */
@Override public Feed remove(final Item item,final Feed feed){
  return coordinator.getSyncer().doInSync(feed,new SyncerCallback<Feed>(){
    public Feed execute(){
      @SuppressWarnings(""String_Node_Str"") Feed reloadedFeed=getFeed(feed,false);
      reloadedFeed.remove(item);
      if (!reloadedFeed.hasItems()) {
        reloadedFeed.setExternal(null);
      }
      VFSContainer itemContainer=getItemContainer(item,reloadedFeed);
      if (itemContainer != null) {
        itemContainer.delete();
      }
      reloadedFeed.setLastModified(new Date());
      update(reloadedFeed,false);
      CommentAndRatingService commentAndRatingService=CoreSpringFactory.getImpl(CommentAndRatingService.class);
      if (commentAndRatingService != null) {
        commentAndRatingService.init(null,feed,item.getGuid(),true,false);
        commentAndRatingService.deleteAll();
      }
      return reloadedFeed;
    }
  }
);
}"
69865,"/** 
 * @see org.olat.modules.webFeed.managers.FeedManager#addItem(org.olat.modules.webFeed.models.Item,org.olat.core.gui.components.form.flexible.elements.FileElement,org.olat.modules.webFeed.models.Feed)
 */
@Override public void addItem(final Item item,final FileElement file,final Feed feed){
  if (feed.isInternal()) {
    coordinator.getSyncer().doInSync(feed,new SyncerCallback<Object>(){
      @SuppressWarnings(""String_Node_Str"") public VFSLeaf execute(){
        Feed reloadedFeed=getFeed(feed,false);
        if (item.getPublishDate() == null)         item.setPublishDate(new Date());
        setEnclosure(file,item,reloadedFeed);
        VFSContainer itemContainer=createItemContainer(feed,item);
        VFSLeaf itemFile=itemContainer.createChildLeaf(ITEM_FILE_NAME);
        XStreamHelper.writeObject(xstream,itemFile,item);
        reloadedFeed.add(item);
        reloadedFeed.setLastModified(item.getLastModified());
        update(reloadedFeed,false);
        return null;
      }
    }
);
  }
}","/** 
 * @see org.olat.modules.webFeed.managers.FeedManager#addItem(org.olat.modules.webFeed.models.Item,org.olat.core.gui.components.form.flexible.elements.FileElement,org.olat.modules.webFeed.models.Feed)
 */
@Override public Feed addItem(final Item item,final FileElement file,final Feed feed){
  if (feed.isInternal()) {
    return coordinator.getSyncer().doInSync(feed,new SyncerCallback<Feed>(){
      @SuppressWarnings(""String_Node_Str"") public Feed execute(){
        Feed reloadedFeed=getFeed(feed,false);
        if (item.getPublishDate() == null)         item.setPublishDate(new Date());
        setEnclosure(file,item,reloadedFeed);
        VFSContainer itemContainer=createItemContainer(feed,item);
        VFSLeaf itemFile=itemContainer.createChildLeaf(ITEM_FILE_NAME);
        XStreamHelper.writeObject(xstream,itemFile,item);
        reloadedFeed.add(item);
        reloadedFeed.setLastModified(item.getLastModified());
        update(reloadedFeed,false);
        return reloadedFeed;
      }
    }
);
  }
  return null;
}"
69866,"/** 
 * @param item
 * @param buttons
 * @return The Link in buttons which has the item attached as user object ornull
 */
private Link getButtonByUserObject(Item item,List<Link> buttons){
  Link result=null;
  if (buttons != null && item != null) {
    for (    Link button : buttons) {
      if (button.getUserObject() == item) {
        result=button;
        break;
      }
    }
  }
  return result;
}","/** 
 * @param item
 * @param buttons
 * @return The Link in buttons which has the item attached as user object ornull
 */
private Link getButtonByUserObject(Item item,List<Link> buttons){
  Link result=null;
  if (buttons != null && item != null) {
    for (    Link button : buttons) {
      if (item.equals(button.getUserObject())) {
        result=button;
        break;
      }
    }
  }
  return result;
}"
69867,"/** 
 * @see org.olat.core.gui.control.DefaultController#event(org.olat.core.gui.UserRequest,org.olat.core.gui.control.Controller,org.olat.core.gui.control.Event)
 */
protected void event(UserRequest ureq,Controller source,Event event){
  FeedManager feedManager=FeedManager.getInstance();
  Feed feed=feedManager.getFeed(feedResource);
  vcItems.contextPut(""String_Node_Str"",feed);
  if (source == cmc) {
    if (event.equals(CloseableModalController.CLOSE_MODAL_EVENT)) {
      removeAsListenerAndDispose(cmc);
      cmc=null;
      removeAsListenerAndDispose(itemFormCtr);
      itemFormCtr=null;
      cleanupTmpItemMediaDir(currentItem,feed,feedManager);
      if (!feed.hasItems()) {
        feedManager.updateFeedMode(null,feed);
        makeInternalAndExternalButtons();
      }
      feedManager.releaseLock(lock);
    }
  }
 else   if (source == confirmDialogCtr && DialogBoxUIFactory.isYesEvent(event)) {
    Item item=(Item)((DialogBoxController)source).getUserObject();
    lock=feedManager.acquireLock(feed,item,getIdentity());
    if (lock.isSuccess()) {
      naviCtr.remove(item);
      helper.removeItem(item);
      feedManager.remove(item,feed);
      deleteButtons.remove(source);
      for (      Link editButton : editButtons) {
        if (editButton.getUserObject() == item) {
          editButtons.remove(editButton);
          break;
        }
      }
      if (!feed.hasItems()) {
        makeInternalAndExternalButtons();
        fireEvent(ureq,ItemsController.FEED_INFO_IS_DIRTY_EVENT);
      }
 else {
        if (callback.mayEditItems() || callback.mayCreateItems()) {
          createEditButtons(ureq,feed);
        }
        createCommentsAndRatingsLinks(ureq,feed);
      }
      vcItems.setDirty(true);
      mainPanel.setContent(vcItems);
      feedManager.releaseLock(lock);
      lock=null;
      ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_DELETE,getClass(),LoggingResourceable.wrap(item));
    }
 else {
      showInfo(""String_Node_Str"",lock.getOwner().getName());
    }
  }
 else   if (source == itemFormCtr) {
    if (event.equals(Event.CHANGED_EVENT) || event.equals(Event.CANCELLED_EVENT)) {
      if (event.equals(Event.CHANGED_EVENT)) {
        FileElement mediaFile=currentItem.getMediaFile();
        if (feedManager.getItemContainer(currentItem,feed) == null) {
          naviCtr.remove(currentItem);
          helper.removeItem(currentItem);
        }
 else {
          if (!feed.getItems().contains(currentItem)) {
            feedManager.addItem(currentItem,mediaFile,feed);
            createButtonsForItem(ureq,currentItem);
            createItemLink(currentItem);
            String guid=currentItem.getGuid();
            if (currentItem.getDate() != null) {
              DateComponentFactory.createDateComponentWithYear(""String_Node_Str"" + guid,currentItem.getDate(),vcItems);
            }
            createCommentsAndRatingsLink(ureq,feed,currentItem);
            naviCtr.add(currentItem);
            helper.addItem(currentItem);
            if (feed.getItems().size() == 1) {
              fireEvent(ureq,ItemsController.FEED_INFO_IS_DIRTY_EVENT);
              helper.setURIs();
            }
            ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_CREATE,getClass(),LoggingResourceable.wrap(currentItem));
          }
 else {
            feedManager.updateItem(currentItem,mediaFile,feed);
            helper.updateItem(currentItem);
            ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_EDIT,getClass(),LoggingResourceable.wrap(currentItem));
          }
        }
        vcItems.setDirty(true);
        if (itemCtr != null) {
          itemCtr.getInitialComponent().setDirty(true);
        }
      }
 else       if (event.equals(Event.CANCELLED_EVENT)) {
        cleanupTmpItemMediaDir(currentItem,feed,feedManager);
        if (!feed.hasItems()) {
          feedManager.updateFeedMode(null,feed);
          makeInternalAndExternalButtons();
        }
      }
      feedManager.releaseLock(lock);
      cmc.deactivate();
      removeAsListenerAndDispose(cmc);
      cmc=null;
      removeAsListenerAndDispose(itemFormCtr);
      itemFormCtr=null;
    }
  }
 else   if (source == naviCtr && event instanceof NavigationEvent) {
    List<? extends Dated> selItems=((NavigationEvent)event).getSelectedItems();
    List<Item> items=new ArrayList<Item>();
    for (    Dated item : selItems) {
      if (item instanceof Item) {
        items.add((Item)item);
      }
    }
    Collections.sort(items,new ItemPublishDateComparator());
    helper.setSelectedItems(items);
    if (callback.mayEditItems() || callback.mayCreateItems()) {
      createEditButtons(ureq,feed);
    }
    createCommentsAndRatingsLinks(ureq,feed);
    vcItems.setDirty(true);
    mainPanel.setContent(vcItems);
  }
 else   if (source == itemCtr) {
    if (event == Event.BACK_EVENT) {
      mainPanel.setContent(vcItems);
    }
  }
 else   if (source instanceof UserCommentsAndRatingsController) {
    UserCommentsAndRatingsController commentsRatingsCtr=(UserCommentsAndRatingsController)source;
    if (event == UserCommentsAndRatingsController.EVENT_COMMENT_LINK_CLICKED) {
      Item item=(Item)commentsRatingsCtr.getUserObject();
      ItemController myItemCtr=displayItemController(ureq,item);
      List<ContextEntry> entries=BusinessControlFactory.getInstance().createCEListFromResourceType(ItemController.ACTIVATION_KEY_COMMENTS);
      myItemCtr.activate(ureq,entries,null);
    }
  }
  if (!isSameAllItems(feed.getFilteredItems(callback,ureq.getIdentity()))) {
    resetItems(ureq,feed);
  }
}","/** 
 * @see org.olat.core.gui.control.DefaultController#event(org.olat.core.gui.UserRequest,org.olat.core.gui.control.Controller,org.olat.core.gui.control.Event)
 */
protected void event(UserRequest ureq,Controller source,Event event){
  FeedManager feedManager=FeedManager.getInstance();
  Feed feed=feedManager.getFeed(feedResource);
  vcItems.contextPut(""String_Node_Str"",feed);
  if (source == cmc) {
    if (event.equals(CloseableModalController.CLOSE_MODAL_EVENT)) {
      removeAsListenerAndDispose(cmc);
      cmc=null;
      removeAsListenerAndDispose(itemFormCtr);
      itemFormCtr=null;
      cleanupTmpItemMediaDir(currentItem,feed,feedManager);
      if (!feed.hasItems()) {
        feedManager.updateFeedMode(null,feed);
        makeInternalAndExternalButtons();
      }
      feedManager.releaseLock(lock);
    }
  }
 else   if (source == confirmDialogCtr && DialogBoxUIFactory.isYesEvent(event)) {
    Item item=(Item)((DialogBoxController)source).getUserObject();
    lock=feedManager.acquireLock(feed,item,getIdentity());
    if (lock.isSuccess()) {
      naviCtr.remove(item);
      helper.removeItem(item);
      feed=feedManager.remove(item,feed);
      deleteButtons.remove(source);
      for (      Link editButton : editButtons) {
        if (item.equals(editButton.getUserObject())) {
          editButtons.remove(editButton);
          break;
        }
      }
      if (!feed.hasItems()) {
        makeInternalAndExternalButtons();
        fireEvent(ureq,ItemsController.FEED_INFO_IS_DIRTY_EVENT);
      }
 else {
        if (callback.mayEditItems() || callback.mayCreateItems()) {
          createEditButtons(ureq,feed);
        }
        createCommentsAndRatingsLinks(ureq,feed);
      }
      vcItems.setDirty(true);
      mainPanel.setContent(vcItems);
      feedManager.releaseLock(lock);
      lock=null;
      ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_DELETE,getClass(),LoggingResourceable.wrap(item));
    }
 else {
      showInfo(""String_Node_Str"",lock.getOwner().getName());
    }
  }
 else   if (source == itemFormCtr) {
    if (event.equals(Event.CHANGED_EVENT) || event.equals(Event.CANCELLED_EVENT)) {
      if (event.equals(Event.CHANGED_EVENT)) {
        FileElement mediaFile=currentItem.getMediaFile();
        if (feedManager.getItemContainer(currentItem,feed) == null) {
          naviCtr.remove(currentItem);
          helper.removeItem(currentItem);
        }
 else {
          if (!feed.getItems().contains(currentItem)) {
            feed=feedManager.addItem(currentItem,mediaFile,feed);
            createButtonsForItem(ureq,currentItem);
            createItemLink(currentItem);
            String guid=currentItem.getGuid();
            if (currentItem.getDate() != null) {
              DateComponentFactory.createDateComponentWithYear(""String_Node_Str"" + guid,currentItem.getDate(),vcItems);
            }
            createCommentsAndRatingsLink(ureq,feed,currentItem);
            naviCtr.add(currentItem);
            helper.addItem(currentItem);
            if (feed.getItems().size() == 1) {
              fireEvent(ureq,ItemsController.FEED_INFO_IS_DIRTY_EVENT);
              helper.setURIs();
            }
            ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_CREATE,getClass(),LoggingResourceable.wrap(currentItem));
          }
 else {
            feed=feedManager.updateItem(currentItem,mediaFile,feed);
            helper.updateItem(currentItem);
            ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_EDIT,getClass(),LoggingResourceable.wrap(currentItem));
          }
        }
        vcItems.setDirty(true);
        if (itemCtr != null) {
          itemCtr.getInitialComponent().setDirty(true);
        }
      }
 else       if (event.equals(Event.CANCELLED_EVENT)) {
        cleanupTmpItemMediaDir(currentItem,feed,feedManager);
        if (!feed.hasItems()) {
          feedManager.updateFeedMode(null,feed);
          makeInternalAndExternalButtons();
        }
      }
      feedManager.releaseLock(lock);
      cmc.deactivate();
      removeAsListenerAndDispose(cmc);
      cmc=null;
      removeAsListenerAndDispose(itemFormCtr);
      itemFormCtr=null;
    }
  }
 else   if (source == naviCtr && event instanceof NavigationEvent) {
    List<? extends Dated> selItems=((NavigationEvent)event).getSelectedItems();
    List<Item> items=new ArrayList<Item>();
    for (    Dated item : selItems) {
      if (item instanceof Item) {
        items.add((Item)item);
      }
    }
    Collections.sort(items,new ItemPublishDateComparator());
    helper.setSelectedItems(items);
    if (callback.mayEditItems() || callback.mayCreateItems()) {
      createEditButtons(ureq,feed);
    }
    createCommentsAndRatingsLinks(ureq,feed);
    vcItems.setDirty(true);
    mainPanel.setContent(vcItems);
  }
 else   if (source == itemCtr) {
    if (event == Event.BACK_EVENT) {
      mainPanel.setContent(vcItems);
    }
  }
 else   if (source instanceof UserCommentsAndRatingsController) {
    UserCommentsAndRatingsController commentsRatingsCtr=(UserCommentsAndRatingsController)source;
    if (event == UserCommentsAndRatingsController.EVENT_COMMENT_LINK_CLICKED) {
      Item item=(Item)commentsRatingsCtr.getUserObject();
      ItemController myItemCtr=displayItemController(ureq,item);
      List<ContextEntry> entries=BusinessControlFactory.getInstance().createCEListFromResourceType(ItemController.ACTIVATION_KEY_COMMENTS);
      myItemCtr.activate(ureq,entries,null);
    }
  }
  if (!isSameAllItems(feed.getFilteredItems(callback,ureq.getIdentity()))) {
    resetItems(ureq,feed);
  }
}"
69868,"/** 
 * @see org.olat.course.nodes.SelfAssessableCourseNode#getUserScoreEvaluation(org.olat.course.run.userview.UserCourseEnvironment)
 */
public ScoreEvaluation getUserScoreEvaluation(UserCourseEnvironment userCourseEnv){
  Identity identity=userCourseEnv.getIdentityEnvironment().getIdentity();
  long olatResourceId=userCourseEnv.getCourseEnvironment().getCourseResourceableId().longValue();
  QTIResultSet qTIResultSet=IQManager.getInstance().getLastResultSet(identity,olatResourceId,this.getIdent());
  if (qTIResultSet != null) {
    ScoreEvaluation scoreEvaluation=new ScoreEvaluation(new Float(qTIResultSet.getScore()),new Boolean(qTIResultSet.getIsPassed()),new Long(qTIResultSet.getAssessmentID()));
    return scoreEvaluation;
  }
  return null;
}","/** 
 * @see org.olat.course.nodes.SelfAssessableCourseNode#getUserScoreEvaluation(org.olat.course.run.userview.UserCourseEnvironment)
 */
public ScoreEvaluation getUserScoreEvaluation(UserCourseEnvironment userCourseEnv){
  Identity identity=userCourseEnv.getIdentityEnvironment().getIdentity();
  long olatResourceId=userCourseEnv.getCourseEnvironment().getCourseResourceableId().longValue();
  QTIResultSet qTIResultSet=IQManager.getInstance().getLastResultSet(identity,olatResourceId,this.getIdent());
  if (qTIResultSet != null) {
    ScoreEvaluation scoreEvaluation=new ScoreEvaluation(new Float(qTIResultSet.getScore()),qTIResultSet.getIsPassed(),new Long(qTIResultSet.getAssessmentID()));
    return scoreEvaluation;
  }
  return null;
}"
69869,"protected void resort(){
  if (isSortingEnabled()) {
    currentSortingCd=getColumnDescriptor(sortColumn);
    int cdcnt=getColumnCount();
    for (int i=0; i < cdcnt; i++) {
      ColumnDescriptor cd=getColumnDescriptor(i);
      if (cd != currentSortingCd) {
        cd.otherColumnDescriptorSorted();
      }
    }
    if (currentSortingCd == null) {
      throw new RuntimeException(""String_Node_Str"" + sortColumn + ""String_Node_Str"");
    }
    currentSortingCd.sortingAboutToStart();
    long start=0;
    boolean logDebug=Tracing.isDebugEnabled(Table.class);
    if (logDebug) {
      start=System.currentTimeMillis();
    }
    Collections.sort(sorter,this);
    if (logDebug) {
      long stop=System.currentTimeMillis();
      TableDataModel model=getTableDataModel();
      Tracing.logDebug(""String_Node_Str"" + (model == null ? ""String_Node_Str"" : model.getRowCount()) + ""String_Node_Str""+ (stop - start)+ ""String_Node_Str"",Table.class);
    }
  }
}","protected void resort(){
  if (isSortingEnabled()) {
    ColumnDescriptor currentSortingCd=getColumnDescriptor(sortColumn);
    int cdcnt=getColumnCount();
    for (int i=0; i < cdcnt; i++) {
      ColumnDescriptor cd=getColumnDescriptor(i);
      if (cd != currentSortingCd) {
        cd.otherColumnDescriptorSorted();
      }
    }
    if (currentSortingCd == null) {
      throw new RuntimeException(""String_Node_Str"" + sortColumn + ""String_Node_Str"");
    }
    currentSortingCd.sortingAboutToStart();
    Collections.sort(sorter,new TableComparator(currentSortingCd,sortAscending));
  }
}"
69870,"/** 
 * Sorts the selected table row indexes according with the table Comparator, and then retrieves the rows from the input defaultTableDataModel. It is assumed that the defaultTableDataModel IS THE MODEL for the table.
 * @param objectMarkers
 * @return the List with the sorted selected objects in this table.
 */
public List getSelectedSortedObjects(final BitSet objectMarkers,final DefaultTableDataModel defaultTableDataModel){
  List results=new ArrayList();
  List<Integer> sortedIndexes=new ArrayList<Integer>();
  if (objectMarkers.isEmpty()) {
    sortedIndexes.clear();
  }
  for (int i=objectMarkers.nextSetBit(0); i >= 0; i=objectMarkers.nextSetBit(i + 1)) {
    sortedIndexes.add(i);
  }
  Collections.sort(sortedIndexes,table);
  Iterator<Integer> indexesIterator=sortedIndexes.iterator();
  while (indexesIterator.hasNext()) {
    results.add(defaultTableDataModel.getObject(indexesIterator.next()));
  }
  return results;
}","/** 
 * Sorts the selected table row indexes according with the table Comparator, and then retrieves the rows from the input defaultTableDataModel. It is assumed that the defaultTableDataModel IS THE MODEL for the table.
 * @param objectMarkers
 * @return the List with the sorted selected objects in this table.
 */
public List getSelectedSortedObjects(final BitSet objectMarkers,final DefaultTableDataModel defaultTableDataModel){
  List results=new ArrayList();
  List<Integer> sortedIndexes=new ArrayList<Integer>();
  if (objectMarkers.isEmpty()) {
    sortedIndexes.clear();
  }
  for (int i=objectMarkers.nextSetBit(0); i >= 0; i=objectMarkers.nextSetBit(i + 1)) {
    sortedIndexes.add(i);
  }
  Collections.sort(sortedIndexes,table.getComparator());
  Iterator<Integer> indexesIterator=sortedIndexes.iterator();
  while (indexesIterator.hasNext()) {
    results.add(defaultTableDataModel.getObject(indexesIterator.next()));
  }
  return results;
}"
69871,"private IdentityImpl loadForUpdate(Long identityKey){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(IdentityImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  List<IdentityImpl> identity=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),IdentityImpl.class).setParameter(""String_Node_Str"",identityKey).setLockMode(LockModeType.PESSIMISTIC_WRITE).getResultList();
  if (identity.isEmpty()) {
    return null;
  }
  return identity.get(0);
}","/** 
 * Don't forget to commit/roolback the transaction as soon as possible
 * @param identityKey
 * @return
 */
private IdentityImpl loadForUpdate(Long identityKey){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(IdentityImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  List<IdentityImpl> identity=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),IdentityImpl.class).setParameter(""String_Node_Str"",identityKey).setLockMode(LockModeType.PESSIMISTIC_WRITE).getResultList();
  if (identity.isEmpty()) {
    return null;
  }
  return identity.get(0);
}"
69872,"/** 
 * @see org.olat.basesecurity.Manager#saveIdentityStatus(org.olat.core.id.Identity)
 */
@Override public Identity saveIdentityStatus(Identity identity,Integer status){
  Identity reloadedIdentity=loadForUpdate(identity.getKey());
  reloadedIdentity.setStatus(status);
  return dbInstance.getCurrentEntityManager().merge(reloadedIdentity);
}","/** 
 * @see org.olat.basesecurity.Manager#saveIdentityStatus(org.olat.core.id.Identity)
 */
@Override @Transactional public Identity saveIdentityStatus(Identity identity,Integer status){
  Identity reloadedIdentity=loadForUpdate(identity.getKey());
  reloadedIdentity.setStatus(status);
  reloadedIdentity=dbInstance.getCurrentEntityManager().merge(reloadedIdentity);
  return reloadedIdentity;
}"
69873,"@Override public Identity setIdentityLastLogin(Identity identity){
  Identity reloadedIdentity=loadForUpdate(identity.getKey());
  reloadedIdentity.setLastLogin(new Date());
  return dbInstance.getCurrentEntityManager().merge(reloadedIdentity);
}","@Override @Transactional public Identity setIdentityLastLogin(Identity identity){
  Identity reloadedIdentity=loadForUpdate(identity.getKey());
  reloadedIdentity.setLastLogin(new Date());
  reloadedIdentity=dbInstance.getCurrentEntityManager().merge(reloadedIdentity);
  return reloadedIdentity;
}"
69874,"public void cleanUpSession(){
  if (data.get() == null)   return;
  closeSession();
}","public void cleanUpSession(){
  EntityManager threadBoundedEm=EntityManagerFactoryUtils.getTransactionalEntityManager(emf);
  if (threadBoundedEm != null) {
    EntityManagerFactoryUtils.closeEntityManager(threadBoundedEm);
  }
  if (data.get() == null)   return;
  closeSession();
}"
69875,"@Override public EntityManager getCurrentEntityManager(){
  DBImpl current=getInstance(true);
  DBManager dbm=current.getData().getManager();
  if (dbm == null) {
    logDebug(""String_Node_Str"",null);
    return null;
  }
  beginTransaction(""String_Node_Str"");
  return dbm.getDbSession().getEntityManager();
}","@Override public EntityManager getCurrentEntityManager(){
  EntityManager threadBoundedEm=EntityManagerFactoryUtils.getTransactionalEntityManager(emf);
  if (threadBoundedEm != null) {
    return threadBoundedEm;
  }
  DBImpl current=getInstance(true);
  DBManager dbm=current.getData().getManager();
  if (dbm == null) {
    logDebug(""String_Node_Str"",null);
    return null;
  }
  beginTransaction(""String_Node_Str"");
  return dbm.getDbSession().getEntityManager();
}"
69876,"/** 
 * check if event in the same VM this is used only in ClusterLocker to check if Release All Locks or users should be executed. (release locks for a  use is a ""single node service"") FIXME:2008-11-27:pb == comparison to see if in the same VM. 
 * @return
 */
public boolean isEventOnThisNode(){
  return vm_marker == VM_MARKER;
}","/** 
 * check if event in the same VM this is used only in ClusterLocker to check if Release All Locks or users should be executed. (release locks for a  use is a ""single node service"") FIXME:2008-11-27:pb == comparison to see if in the same VM. 
 * @return
 */
public boolean isEventOnThisNode(){
  return vm_marker == WebappHelper.getNodeId();
}"
69877,"@Override public int hashCode(){
  int hc=3;
  int hcMul=7;
  hc=hc * hcMul + vm_marker.hashCode();
  return hc * hcMul + super.hashCode();
}","@Override public int hashCode(){
  int hc=3;
  int hcMul=7;
  hc=hc * hcMul + vm_marker;
  return hc * hcMul + super.hashCode();
}"
69878,"/** 
 * should be overridden by subclasses for debug info
 */
public String toString(){
  return ""String_Node_Str"" + getCommand();
}","/** 
 * should be overridden by subclasses for debug info
 */
@Override public String toString(){
  return ""String_Node_Str"" + getCommand();
}"
69879,"/** 
 * @param command
 */
public MultiUserEvent(String command){
  super(command);
  vm_marker=VM_MARKER;
}","/** 
 * @param command
 */
public MultiUserEvent(String command){
  super(command);
  vm_marker=WebappHelper.getNodeId();
}"
69880,"/** 
 * is called repeatedly caused by Collections.sort(...);
 * @see org.olat.core.gui.components.table.ColumnDescriptor#compareTo(int,int)
 */
@Override public int compareTo(final int rowa,final int rowb){
  Object a=table.getTableDataModel().getValueAt(rowa,dataColumn);
  Object b=table.getTableDataModel().getValueAt(rowb,dataColumn);
  if (a == null || b == null) {
    return compareNullObjects(a,b);
  }
  if (a instanceof String && b instanceof String) {
    return collator.compare(a,b);
  }
 else   if (a instanceof Comparable && b instanceof Comparable) {
    return compareComparablesAndTimestamps(a,b);
  }
 else   if (a instanceof Boolean && b instanceof Boolean) {
    return compareBooleans((Boolean)a,(Boolean)b);
  }
 else {
    return a.toString().compareTo(b.toString());
  }
}","/** 
 * is called repeatedly caused by Collections.sort(...);
 * @see org.olat.core.gui.components.table.ColumnDescriptor#compareTo(int,int)
 */
@Override public int compareTo(final int rowa,final int rowb){
  Object a=table.getTableDataModel().getValueAt(rowa,dataColumn);
  Object b=table.getTableDataModel().getValueAt(rowb,dataColumn);
  if (a == null || b == null) {
    return compareNullObjects(a,b);
  }
  if (a instanceof String && b instanceof String) {
    return collator.compare(a,b);
  }
  if (a instanceof Date && b instanceof Date) {
    return compareDateAndTimestamps((Date)a,(Date)b);
  }
  if (a instanceof Comparable && b instanceof Comparable) {
    return ((Comparable)a).compareTo((Comparable)b);
  }
  return a.toString().compareTo(b.toString());
}"
69881,"protected void resort(){
  if (isSortingEnabled()) {
    currentSortingCd=getColumnDescriptor(sortColumn);
    int cdcnt=getColumnCount();
    for (int i=0; i < cdcnt; i++) {
      ColumnDescriptor cd=getColumnDescriptor(i);
      if (cd != currentSortingCd) {
        cd.otherColumnDescriptorSorted();
      }
    }
    if (currentSortingCd == null) {
      throw new RuntimeException(""String_Node_Str"" + sortColumn + ""String_Node_Str"");
    }
    currentSortingCd.sortingAboutToStart();
    long start=0;
    long stop=0;
    boolean logDebug=Tracing.isDebugEnabled(Table.class);
    if (logDebug) {
      start=System.currentTimeMillis();
    }
    Collections.sort(sorter,this);
    if (logDebug) {
      stop=System.currentTimeMillis();
      TableDataModel model=getTableDataModel();
      Tracing.logDebug(""String_Node_Str"" + (model == null ? ""String_Node_Str"" : model.getRowCount()) + ""String_Node_Str""+ (stop - start)+ ""String_Node_Str"",Table.class);
    }
  }
}","protected void resort(){
  if (isSortingEnabled()) {
    currentSortingCd=getColumnDescriptor(sortColumn);
    int cdcnt=getColumnCount();
    for (int i=0; i < cdcnt; i++) {
      ColumnDescriptor cd=getColumnDescriptor(i);
      if (cd != currentSortingCd) {
        cd.otherColumnDescriptorSorted();
      }
    }
    if (currentSortingCd == null) {
      throw new RuntimeException(""String_Node_Str"" + sortColumn + ""String_Node_Str"");
    }
    currentSortingCd.sortingAboutToStart();
    long start=0;
    boolean logDebug=Tracing.isDebugEnabled(Table.class);
    if (logDebug) {
      start=System.currentTimeMillis();
    }
    Collections.sort(sorter,this);
    if (logDebug) {
      long stop=System.currentTimeMillis();
      TableDataModel model=getTableDataModel();
      Tracing.logDebug(""String_Node_Str"" + (model == null ? ""String_Node_Str"" : model.getRowCount()) + ""String_Node_Str""+ (stop - start)+ ""String_Node_Str"",Table.class);
    }
  }
}"
69882,"private MailListController(UserRequest ureq,WindowControl wControl,String metaId,boolean outbox,MailContextResolver resolver){
  super(ureq,wControl);
  setBasePackage(MailModule.class);
  this.outbox=outbox;
  this.metaId=metaId;
  this.contextResolver=resolver;
  mailManager=MailManager.getInstance();
  TableGuiConfiguration tableConfig=new TableGuiConfiguration();
  tableConfig.setDownloadOffered(true);
  tableConfig.setPreferencesOffered(true,""String_Node_Str"");
  tableConfig.setTableEmptyMessage(translate(""String_Node_Str""));
  tableConfig.setMultiSelect(true);
  mainVC=createVelocityContainer(""String_Node_Str"");
  tableVC=createVelocityContainer(""String_Node_Str"");
  String context=translate(""String_Node_Str"");
  tableCtr=new TableController(tableConfig,ureq,wControl,Collections.<ShortName>emptyList(),null,context,null,false,getTranslator());
  if (outbox) {
    tableCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Columns.context.i18nKey(),Columns.context.ordinal(),null,getLocale(),ColumnDescriptor.ALIGNMENT_LEFT,new MailContextCellRenderer(this,tableVC,getTranslator())));
    tableCtr.addColumnDescriptor(new DefaultColumnDescriptor(Columns.recipients.i18nKey(),Columns.recipients.ordinal(),null,getLocale()));
    tableCtr.addColumnDescriptor(new DefaultColumnDescriptor(Columns.subject.i18nKey(),Columns.subject.ordinal(),CMD_READ,getLocale()));
    tableCtr.addColumnDescriptor(new DefaultColumnDescriptor(Columns.sendDate.i18nKey(),Columns.sendDate.ordinal(),null,getLocale()));
  }
 else {
    CustomCellRenderer readRenderer=new BooleanCSSCellRenderer(getTranslator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    tableCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Columns.read.i18nKey(),Columns.read.ordinal(),CMD_READ_TOGGLE,getLocale(),ColumnDescriptor.ALIGNMENT_CENTER,readRenderer));
    CustomCellRenderer markRenderer=new BooleanCSSCellRenderer(getTranslator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    tableCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Columns.marked.i18nKey(),Columns.marked.ordinal(),CMD_MARK_TOGGLE,getLocale(),ColumnDescriptor.ALIGNMENT_CENTER,markRenderer));
    tableCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Columns.context.i18nKey(),Columns.context.ordinal(),null,getLocale(),ColumnDescriptor.ALIGNMENT_LEFT,new MailContextCellRenderer(this,tableVC,getTranslator())));
    tableCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Columns.from.i18nKey(),Columns.from.ordinal(),null,getLocale(),ColumnDescriptor.ALIGNMENT_LEFT,new MailFromCellRenderer(this,tableVC,getTranslator())));
    tableCtr.addColumnDescriptor(new DefaultColumnDescriptor(Columns.subject.i18nKey(),Columns.subject.ordinal(),CMD_READ,getLocale()));
    tableCtr.addColumnDescriptor(new DefaultColumnDescriptor(Columns.receivedDate.i18nKey(),Columns.receivedDate.ordinal(),null,getLocale()));
  }
  tableCtr.addColumnDescriptor(new StaticColumnDescriptor(CMD_READ,""String_Node_Str"",translate(""String_Node_Str"")));
  if (!outbox) {
    tableCtr.addMultiSelectAction(""String_Node_Str"",CMD_MARK_READ);
    tableCtr.addMultiSelectAction(""String_Node_Str"",CMD_MARK_UNREAD);
    tableCtr.addMultiSelectAction(""String_Node_Str"",CMD_MARK_MARKED);
    tableCtr.addMultiSelectAction(""String_Node_Str"",CMD_MARK_UNMARKED);
  }
  tableCtr.addMultiSelectAction(""String_Node_Str"",CMD_SEND_REAL_MAIL);
  tableCtr.addMultiSelectAction(""String_Node_Str"",CMD_DELETE);
  reloadModel();
  int dateSort=outbox ? 4 : 6;
  tableCtr.setSortColumn(dateSort,false);
  listenTo(tableCtr);
  tableVC.put(""String_Node_Str"",tableCtr.getInitialComponent());
  if (outbox) {
    if (StringHelper.containsNonWhitespace(metaId)) {
      tableVC.contextPut(""String_Node_Str"",translate(""String_Node_Str""));
      tableVC.contextPut(""String_Node_Str"",translate(""String_Node_Str""));
    }
 else {
      tableVC.contextPut(""String_Node_Str"",translate(""String_Node_Str""));
    }
  }
 else {
    tableVC.contextPut(""String_Node_Str"",translate(""String_Node_Str""));
  }
  mainVC.put(MAIN_CMP,tableVC);
  if (StringHelper.containsNonWhitespace(metaId)) {
    backLink=LinkFactory.createLinkBack(mainVC,this);
    mainVC.put(""String_Node_Str"",backLink);
  }
  putInitialPanel(mainVC);
}","private MailListController(UserRequest ureq,WindowControl wControl,String metaId,boolean outbox,MailContextResolver resolver){
  super(ureq,wControl);
  setBasePackage(MailModule.class);
  this.outbox=outbox;
  this.metaId=metaId;
  this.contextResolver=resolver;
  mailManager=MailManager.getInstance();
  TableGuiConfiguration tableConfig=new TableGuiConfiguration();
  tableConfig.setDownloadOffered(true);
  tableConfig.setPreferencesOffered(true,""String_Node_Str"");
  tableConfig.setTableEmptyMessage(translate(""String_Node_Str""));
  tableConfig.setMultiSelect(true);
  mainVC=createVelocityContainer(""String_Node_Str"");
  tableVC=createVelocityContainer(""String_Node_Str"");
  String context=translate(""String_Node_Str"");
  tableCtr=new TableController(tableConfig,ureq,wControl,Collections.<ShortName>emptyList(),null,context,null,false,getTranslator());
  if (outbox) {
    tableCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Columns.context.i18nKey(),Columns.context.ordinal(),null,getLocale(),ColumnDescriptor.ALIGNMENT_LEFT,new MailContextCellRenderer(this,tableVC,getTranslator())){
      @Override public int compareTo(      int rowa,      int rowb){
        Object a=table.getTableDataModel().getValueAt(rowa,dataColumn);
        Object b=table.getTableDataModel().getValueAt(rowb,dataColumn);
        if (a instanceof ContextPair && b instanceof ContextPair) {
          ContextPair p1=(ContextPair)a;
          ContextPair p2=(ContextPair)b;
          return super.compareString(p1.getName(),p2.getName());
        }
        return super.compareTo(rowa,rowb);
      }
    }
);
    tableCtr.addColumnDescriptor(new DefaultColumnDescriptor(Columns.recipients.i18nKey(),Columns.recipients.ordinal(),null,getLocale()));
    tableCtr.addColumnDescriptor(new DefaultColumnDescriptor(Columns.subject.i18nKey(),Columns.subject.ordinal(),CMD_READ,getLocale()));
    tableCtr.addColumnDescriptor(new DefaultColumnDescriptor(Columns.sendDate.i18nKey(),Columns.sendDate.ordinal(),null,getLocale()));
  }
 else {
    CustomCellRenderer readRenderer=new BooleanCSSCellRenderer(getTranslator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    tableCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Columns.read.i18nKey(),Columns.read.ordinal(),CMD_READ_TOGGLE,getLocale(),ColumnDescriptor.ALIGNMENT_CENTER,readRenderer));
    CustomCellRenderer markRenderer=new BooleanCSSCellRenderer(getTranslator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    tableCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Columns.marked.i18nKey(),Columns.marked.ordinal(),CMD_MARK_TOGGLE,getLocale(),ColumnDescriptor.ALIGNMENT_CENTER,markRenderer));
    tableCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Columns.context.i18nKey(),Columns.context.ordinal(),null,getLocale(),ColumnDescriptor.ALIGNMENT_LEFT,new MailContextCellRenderer(this,tableVC,getTranslator())){
      @Override public int compareTo(      int rowa,      int rowb){
        Object a=table.getTableDataModel().getValueAt(rowa,dataColumn);
        Object b=table.getTableDataModel().getValueAt(rowb,dataColumn);
        if (a instanceof ContextPair && b instanceof ContextPair) {
          ContextPair p1=(ContextPair)a;
          ContextPair p2=(ContextPair)b;
          return super.compareString(p1.getName(),p2.getName());
        }
        return super.compareTo(rowa,rowb);
      }
    }
);
    tableCtr.addColumnDescriptor(new CustomRenderColumnDescriptor(Columns.from.i18nKey(),Columns.from.ordinal(),null,getLocale(),ColumnDescriptor.ALIGNMENT_LEFT,new MailFromCellRenderer(this,tableVC,getTranslator())));
    tableCtr.addColumnDescriptor(new DefaultColumnDescriptor(Columns.subject.i18nKey(),Columns.subject.ordinal(),CMD_READ,getLocale()));
    tableCtr.addColumnDescriptor(new DefaultColumnDescriptor(Columns.receivedDate.i18nKey(),Columns.receivedDate.ordinal(),null,getLocale()));
  }
  tableCtr.addColumnDescriptor(new StaticColumnDescriptor(CMD_READ,""String_Node_Str"",translate(""String_Node_Str"")));
  if (!outbox) {
    tableCtr.addMultiSelectAction(""String_Node_Str"",CMD_MARK_READ);
    tableCtr.addMultiSelectAction(""String_Node_Str"",CMD_MARK_UNREAD);
    tableCtr.addMultiSelectAction(""String_Node_Str"",CMD_MARK_MARKED);
    tableCtr.addMultiSelectAction(""String_Node_Str"",CMD_MARK_UNMARKED);
  }
  tableCtr.addMultiSelectAction(""String_Node_Str"",CMD_SEND_REAL_MAIL);
  tableCtr.addMultiSelectAction(""String_Node_Str"",CMD_DELETE);
  reloadModel();
  int dateSort=outbox ? 4 : 6;
  tableCtr.setSortColumn(dateSort,false);
  listenTo(tableCtr);
  tableVC.put(""String_Node_Str"",tableCtr.getInitialComponent());
  if (outbox) {
    if (StringHelper.containsNonWhitespace(metaId)) {
      tableVC.contextPut(""String_Node_Str"",translate(""String_Node_Str""));
      tableVC.contextPut(""String_Node_Str"",translate(""String_Node_Str""));
    }
 else {
      tableVC.contextPut(""String_Node_Str"",translate(""String_Node_Str""));
    }
  }
 else {
    tableVC.contextPut(""String_Node_Str"",translate(""String_Node_Str""));
  }
  mainVC.put(MAIN_CMP,tableVC);
  if (StringHelper.containsNonWhitespace(metaId)) {
    backLink=LinkFactory.createLinkBack(mainVC,this);
    mainVC.put(""String_Node_Str"",backLink);
  }
  putInitialPanel(mainVC);
}"
69883,"private void generateEnvironment(){
  List<BGArea> tmpAreas=areaManager.loadAreas(psf.getAreaKeys());
  List<BusinessGroup> groups=businessGroupService.loadBusinessGroups(psf.getGroupKeys());
  Set<BGArea> areas=new HashSet<BGArea>();
  areas.addAll(tmpAreas);
  List<BGArea> areaByGroups=areaManager.findBGAreasOfBusinessGroups(groups);
  areas.addAll(areaByGroups);
  role=psf.getRole();
  ICourse course=CourseFactory.loadCourse(ores);
  isGlobalAuthor=false;
  isGuestOnly=false;
  isCoach=false;
  isCourseAdmin=false;
  if (role.equals(PreviewSettingsForm.ROLE_GUEST)) {
    isGuestOnly=true;
  }
 else   if (role.equals(PreviewSettingsForm.ROLE_COURSECOACH)) {
    isCoach=true;
  }
 else   if (role.equals(PreviewSettingsForm.ROLE_COURSEADMIN)) {
    isCourseAdmin=true;
  }
 else   if (role.equals(PreviewSettingsForm.ROLE_GLOBALAUTHOR)) {
    isGlobalAuthor=true;
  }
  final OLATResource courseResource=course.getCourseEnvironment().getCourseGroupManager().getCourseResource();
  final CourseGroupManager cgm=new PreviewCourseGroupManager(courseResource,new ArrayList<BusinessGroup>(groups),new ArrayList<BGArea>(areas),isCoach,isCourseAdmin);
  final UserNodeAuditManager auditman=new PreviewAuditManager();
  final AssessmentManager am=new PreviewAssessmentManager();
  final CoursePropertyManager cpm=new PreviewCoursePropertyManager();
  final Structure runStructure=course.getEditorTreeModel().createStructureForPreview();
  final String title=course.getCourseTitle();
  simCourseEnv=new PreviewCourseEnvironment(title,runStructure,psf.getDate(),course.getCourseFolderContainer(),course.getCourseBaseContainer(),course.getResourceableId(),cpm,cgm,auditman,am);
  simIdentEnv=new IdentityEnvironment();
  simIdentEnv.setRoles(new Roles(false,false,false,isGlobalAuthor,isGuestOnly,false,false));
  final Identity ident=new PreviewIdentity();
  simIdentEnv.setIdentity(ident);
  simIdentEnv.setAttributes(psf.getAttributesMap());
}","private void generateEnvironment(){
  List<BGArea> tmpAreas=areaManager.loadAreas(psf.getAreaKeys());
  List<BusinessGroup> groups=businessGroupService.loadBusinessGroups(psf.getGroupKeys());
  Set<BGArea> areas=new HashSet<BGArea>();
  areas.addAll(tmpAreas);
  List<BGArea> areaByGroups=areaManager.findBGAreasOfBusinessGroups(groups);
  areas.addAll(areaByGroups);
  role=psf.getRole();
  ICourse course=CourseFactory.loadCourse(ores);
  isGlobalAuthor=false;
  isGuestOnly=false;
  isCoach=false;
  isCourseAdmin=false;
  if (role.equals(PreviewSettingsForm.ROLE_GUEST)) {
    isGuestOnly=true;
  }
 else   if (role.equals(PreviewSettingsForm.ROLE_COURSECOACH)) {
    isCoach=true;
  }
 else   if (role.equals(PreviewSettingsForm.ROLE_COURSEADMIN)) {
    isCourseAdmin=true;
  }
 else   if (role.equals(PreviewSettingsForm.ROLE_GLOBALAUTHOR)) {
    isGlobalAuthor=true;
  }
  final OLATResource courseResource=course.getCourseEnvironment().getCourseGroupManager().getCourseResource();
  final CourseGroupManager cgm=new PreviewCourseGroupManager(courseResource,new ArrayList<BusinessGroup>(groups),new ArrayList<BGArea>(areas),isCoach,isCourseAdmin);
  final UserNodeAuditManager auditman=new PreviewAuditManager();
  final AssessmentManager am=new PreviewAssessmentManager();
  final CoursePropertyManager cpm=new PreviewCoursePropertyManager();
  final Structure runStructure=course.getEditorTreeModel().createStructureForPreview();
  final String title=course.getCourseTitle();
  final CourseConfig courseConfig=course.getCourseEnvironment().getCourseConfig();
  simCourseEnv=new PreviewCourseEnvironment(title,runStructure,psf.getDate(),course.getCourseFolderContainer(),course.getCourseBaseContainer(),course.getResourceableId(),cpm,cgm,auditman,am,courseConfig);
  simIdentEnv=new IdentityEnvironment();
  simIdentEnv.setRoles(new Roles(false,false,false,isGlobalAuthor,isGuestOnly,false,false));
  final Identity ident=new PreviewIdentity();
  simIdentEnv.setIdentity(ident);
  simIdentEnv.setAttributes(psf.getAttributesMap());
}"
69884,"public static CourseEnvironment getPreviewCourseEnvironment(boolean isCoach,boolean isCourseAdmin,ICourse course){
  final OLATResource courseResource=course.getCourseEnvironment().getCourseGroupManager().getCourseResource();
  final CourseGroupManager cgm=new PreviewCourseGroupManager(courseResource,new ArrayList<BusinessGroup>(),new ArrayList<BGArea>(),isCoach,isCourseAdmin);
  final UserNodeAuditManager auditman=new PreviewAuditManager();
  final AssessmentManager am=new PreviewAssessmentManager();
  final CoursePropertyManager cpm=new PreviewCoursePropertyManager();
  final Structure runStructure=course.getEditorTreeModel().createStructureForPreview();
  final String title=course.getCourseTitle();
  CourseEnvironment previewCourseEnvironment=new PreviewCourseEnvironment(title,runStructure,new Date(),course.getCourseFolderContainer(),course.getCourseBaseContainer(),course.getResourceableId(),cpm,cgm,auditman,am);
  return previewCourseEnvironment;
}","public static CourseEnvironment getPreviewCourseEnvironment(boolean isCoach,boolean isCourseAdmin,ICourse course){
  final OLATResource courseResource=course.getCourseEnvironment().getCourseGroupManager().getCourseResource();
  final CourseGroupManager cgm=new PreviewCourseGroupManager(courseResource,new ArrayList<BusinessGroup>(),new ArrayList<BGArea>(),isCoach,isCourseAdmin);
  final UserNodeAuditManager auditman=new PreviewAuditManager();
  final AssessmentManager am=new PreviewAssessmentManager();
  final CoursePropertyManager cpm=new PreviewCoursePropertyManager();
  final Structure runStructure=course.getEditorTreeModel().createStructureForPreview();
  final String title=course.getCourseTitle();
  final CourseConfig courseConfig=course.getCourseEnvironment().getCourseConfig();
  CourseEnvironment previewCourseEnvironment=new PreviewCourseEnvironment(title,runStructure,new Date(),course.getCourseFolderContainer(),course.getCourseBaseContainer(),course.getResourceableId(),cpm,cgm,auditman,am,courseConfig);
  return previewCourseEnvironment;
}"
69885,"public CourseConfig getCourseConfig(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public CourseConfig getCourseConfig(){
  return courseConfig;
}"
69886,"PreviewCourseEnvironment(String title,Structure runStructure,Date simulatedDateTime,VFSContainer courseFolderContainer,OlatRootFolderImpl courseBaseContainer,Long courseResourceableID,CoursePropertyManager cpm,CourseGroupManager cgm,UserNodeAuditManager auditman,AssessmentManager am){
  super();
  this.title=title;
  this.simulatedDateTime=simulatedDateTime.getTime();
  this.courseFolderContainer=courseFolderContainer;
  this.courseBaseContainer=courseBaseContainer;
  this.runStructure=runStructure;
  this.cpm=cpm;
  this.cgm=cgm;
  this.auditman=auditman;
  this.am=am;
  this.resourceablId=courseResourceableID;
}","PreviewCourseEnvironment(String title,Structure runStructure,Date simulatedDateTime,VFSContainer courseFolderContainer,OlatRootFolderImpl courseBaseContainer,Long courseResourceableID,CoursePropertyManager cpm,CourseGroupManager cgm,UserNodeAuditManager auditman,AssessmentManager am,CourseConfig courseConfig){
  super();
  this.title=title;
  this.simulatedDateTime=simulatedDateTime.getTime();
  this.courseFolderContainer=courseFolderContainer;
  this.courseBaseContainer=courseBaseContainer;
  this.runStructure=runStructure;
  this.cpm=cpm;
  this.cgm=cgm;
  this.auditman=auditman;
  this.am=am;
  this.resourceablId=courseResourceableID;
  this.courseConfig=courseConfig.clone();
}"
69887,"/** 
 * @see org.olat.course.run.environment.CourseEnvironment#setCourseConfig()
 */
public void setCourseConfig(CourseConfig cc){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * @see org.olat.course.run.environment.CourseEnvironment#setCourseConfig()
 */
public void setCourseConfig(CourseConfig cc){
  courseConfig=(cc == null ? null : cc.clone());
}"
69888,"@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (source == memberListCtr) {
    if (event.getCommand().equals(Table.COMMANDLINK_ROWACTION_CLICKED)) {
      TableEvent te=(TableEvent)event;
      String actionid=te.getActionId();
      MemberView member=(MemberView)memberListCtr.getTableDataModel().getObject(te.getRowId());
      if (TABLE_ACTION_EDIT.equals(actionid)) {
        openEdit(ureq,member);
      }
 else       if (TABLE_ACTION_REMOVE.equals(actionid)) {
        confirmDelete(ureq,Collections.singletonList(member));
      }
 else       if (TABLE_ACTION_GRADUATE.equals(actionid)) {
        doGraduate(ureq,Collections.singletonList(member));
      }
 else       if (TABLE_ACTION_IM.equals(actionid)) {
        doIm(ureq,member);
      }
    }
 else     if (event instanceof TableMultiSelectEvent) {
      TableMultiSelectEvent te=(TableMultiSelectEvent)event;
      @SuppressWarnings(""String_Node_Str"") List<MemberView> selectedItems=memberListCtr.getObjects(te.getSelection());
      if (TABLE_ACTION_REMOVE.equals(te.getAction())) {
        confirmDelete(ureq,selectedItems);
      }
 else       if (TABLE_ACTION_EDIT.equals(te.getAction())) {
        openEdit(ureq,selectedItems);
      }
 else       if (TABLE_ACTION_MAIL.equals(te.getAction())) {
        doSendMail(ureq,selectedItems);
      }
 else       if (TABLE_ACTION_GRADUATE.equals(te.getAction())) {
        doGraduate(ureq,selectedItems);
      }
    }
  }
 else   if (source == leaveDialogBox) {
    if (Event.DONE_EVENT == event) {
      List<Identity> members=leaveDialogBox.getIdentities();
      doLeave(members,leaveDialogBox.isSendMail());
      reloadModel();
    }
    cmc.deactivate();
    cleanUpPopups();
  }
 else   if (source == editMemberCtrl) {
    cmc.deactivate();
    if (event instanceof MemberPermissionChangeEvent) {
      MemberPermissionChangeEvent e=(MemberPermissionChangeEvent)event;
      if (e.getMember() != null) {
        doConfirmChangePermission(ureq,e,null);
      }
 else {
        doConfirmChangePermission(ureq,e,editMemberCtrl.getMembers());
      }
    }
  }
 else   if (confirmSendMailBox == source) {
    boolean sendMail=DialogBoxUIFactory.isYesEvent(event) || DialogBoxUIFactory.isOkEvent(event);
    MailConfirmation confirmation=(MailConfirmation)confirmSendMailBox.getUserObject();
    MemberPermissionChangeEvent e=confirmation.getE();
    if (e.getMember() != null) {
      doChangePermission(ureq,e,null,sendMail);
    }
 else {
      doChangePermission(ureq,e,confirmation.getMembers(),sendMail);
    }
  }
 else   if (source == contactCtrl) {
    cmc.deactivate();
    cleanUpPopups();
  }
 else   if (source == cmc) {
    cleanUpPopups();
  }
}","@Override protected void event(UserRequest ureq,Controller source,Event event){
  if (source == memberListCtr) {
    if (event.getCommand().equals(Table.COMMANDLINK_ROWACTION_CLICKED)) {
      TableEvent te=(TableEvent)event;
      String actionid=te.getActionId();
      MemberView member=(MemberView)memberListCtr.getTableDataModel().getObject(te.getRowId());
      if (TABLE_ACTION_EDIT.equals(actionid)) {
        openEdit(ureq,member);
      }
 else       if (TABLE_ACTION_REMOVE.equals(actionid)) {
        confirmDelete(ureq,Collections.singletonList(member));
      }
 else       if (TABLE_ACTION_GRADUATE.equals(actionid)) {
        doGraduate(ureq,Collections.singletonList(member));
      }
 else       if (TABLE_ACTION_IM.equals(actionid)) {
        doIm(ureq,member);
      }
    }
 else     if (event instanceof TableMultiSelectEvent) {
      TableMultiSelectEvent te=(TableMultiSelectEvent)event;
      @SuppressWarnings(""String_Node_Str"") List<MemberView> selectedItems=memberListCtr.getObjects(te.getSelection());
      if (TABLE_ACTION_REMOVE.equals(te.getAction())) {
        confirmDelete(ureq,selectedItems);
      }
 else       if (TABLE_ACTION_EDIT.equals(te.getAction())) {
        openEdit(ureq,selectedItems);
      }
 else       if (TABLE_ACTION_MAIL.equals(te.getAction())) {
        doSendMail(ureq,selectedItems);
      }
 else       if (TABLE_ACTION_GRADUATE.equals(te.getAction())) {
        doGraduate(ureq,selectedItems);
      }
    }
  }
 else   if (source == leaveDialogBox) {
    if (Event.DONE_EVENT == event) {
      List<Identity> members=leaveDialogBox.getIdentities();
      doLeave(members,leaveDialogBox.isSendMail());
      reloadModel();
    }
    cmc.deactivate();
    cleanUpPopups();
  }
 else   if (source == editMemberCtrl) {
    cmc.deactivate();
    if (event instanceof MemberPermissionChangeEvent) {
      MemberPermissionChangeEvent e=(MemberPermissionChangeEvent)event;
      if (e.getMember() != null) {
        doConfirmChangePermission(ureq,e,null);
      }
 else {
        doConfirmChangePermission(ureq,e,editMemberCtrl.getMembers());
      }
    }
  }
 else   if (confirmSendMailBox == source) {
    boolean sendMail=DialogBoxUIFactory.isYesEvent(event) || DialogBoxUIFactory.isOkEvent(event);
    MailConfirmation confirmation=(MailConfirmation)confirmSendMailBox.getUserObject();
    MemberPermissionChangeEvent e=confirmation.getE();
    if (e.getMember() != null) {
      doChangePermission(ureq,e,sendMail);
    }
 else {
      doChangePermission(ureq,e,confirmation.getMembers(),sendMail);
    }
  }
 else   if (source == contactCtrl) {
    cmc.deactivate();
    cleanUpPopups();
  }
 else   if (source == cmc) {
    cleanUpPopups();
  }
}"
69889,"protected void doChangePermission(UserRequest ureq,MemberPermissionChangeEvent changes,List<Identity> members,boolean sendMail){
  if (repoEntry != null) {
    List<RepositoryEntryPermissionChangeEvent> repoChanges=changes.generateRepositoryChanges(members);
    repositoryManager.updateRepositoryEntryMembership(getIdentity(),ureq.getUserSession().getRoles(),repoEntry,repoChanges,null);
  }
  List<BusinessGroupMembershipChange> allModifications=changes.generateBusinessGroupMembershipChange(members);
  businessGroupService.updateMemberships(getIdentity(),allModifications,null);
  DBFactory.getInstance().commitAndCloseSession();
  if (allModifications != null && !allModifications.isEmpty()) {
    for (    BusinessGroupMembershipChange mod : allModifications) {
      sendMailAfterChangePermission(mod);
    }
  }
  DBFactory.getInstance().commitAndCloseSession();
  reloadModel();
}","protected void doChangePermission(UserRequest ureq,MemberPermissionChangeEvent changes,List<Identity> members,boolean sendMail){
  MailPackage mailing=new MailPackage(sendMail);
  if (repoEntry != null) {
    List<RepositoryEntryPermissionChangeEvent> repoChanges=changes.generateRepositoryChanges(members);
    repositoryManager.updateRepositoryEntryMembership(getIdentity(),ureq.getUserSession().getRoles(),repoEntry,repoChanges,mailing);
  }
  List<BusinessGroupMembershipChange> allModifications=changes.generateBusinessGroupMembershipChange(members);
  businessGroupService.updateMemberships(getIdentity(),allModifications,mailing);
  DBFactory.getInstance().commitAndCloseSession();
  reloadModel();
}"
69890,"/** 
 * @see org.olat.login.auth.AuthenticationController#init(org.olat.core.gui.UserRequest,org.olat.core.gui.control.WindowControl)
 */
public OLATAuthenticationController(UserRequest ureq,WindowControl winControl){
  super(ureq,winControl,Util.createPackageTranslator(RegistrationManager.class,ureq.getLocale()));
  loginComp=createVelocityContainer(""String_Node_Str"",""String_Node_Str"");
  if (UserModule.isPwdchangeallowed(null)) {
    pwLink=LinkFactory.createLink(""String_Node_Str"",""String_Node_Str"",loginComp,this);
    pwLink.setCustomEnabledLinkCSS(""String_Node_Str"");
  }
  if (CoreSpringFactory.getImpl(RegistrationModule.class).isSelfRegistrationEnabled() && CoreSpringFactory.getImpl(RegistrationModule.class).isSelfRegistrationLoginEnabled()) {
    registerLink=LinkFactory.createLink(""String_Node_Str"",""String_Node_Str"",loginComp,this);
    registerLink.setCustomEnabledLinkCSS(""String_Node_Str"");
  }
  if (LoginModule.isGuestLoginLinksEnabled()) {
    anoLink=LinkFactory.createLink(""String_Node_Str"",""String_Node_Str"",loginComp,this);
    anoLink.setCustomEnabledLinkCSS(""String_Node_Str"");
  }
  loginForm=new OLATAuthentcationForm(ureq,winControl,""String_Node_Str"",getTranslator());
  listenTo(loginForm);
  loginComp.put(""String_Node_Str"",loginForm.getInitialComponent());
  if (ureq.getParameterSet().contains(PARAM_LOGINERROR)) {
    showError(translate(""String_Node_Str"",WebappHelper.getMailConfig(""String_Node_Str"")));
  }
  putInitialPanel(loginComp);
}","/** 
 * @see org.olat.login.auth.AuthenticationController#init(org.olat.core.gui.UserRequest,org.olat.core.gui.control.WindowControl)
 */
public OLATAuthenticationController(UserRequest ureq,WindowControl winControl){
  super(ureq,winControl,Util.createPackageTranslator(RegistrationManager.class,ureq.getLocale()));
  loginComp=createVelocityContainer(""String_Node_Str"",""String_Node_Str"");
  if (UserModule.isPwdchangeallowed(null)) {
    pwLink=LinkFactory.createLink(""String_Node_Str"",""String_Node_Str"",loginComp,this);
    pwLink.setCustomEnabledLinkCSS(""String_Node_Str"");
  }
  if (CoreSpringFactory.getImpl(RegistrationModule.class).isSelfRegistrationEnabled() && CoreSpringFactory.getImpl(RegistrationModule.class).isSelfRegistrationLoginEnabled()) {
    registerLink=LinkFactory.createLink(""String_Node_Str"",""String_Node_Str"",loginComp,this);
    registerLink.setCustomEnabledLinkCSS(""String_Node_Str"");
  }
  if (LoginModule.isGuestLoginLinksEnabled()) {
    anoLink=LinkFactory.createLink(""String_Node_Str"",""String_Node_Str"",loginComp,this);
    anoLink.setCustomEnabledLinkCSS(""String_Node_Str"");
    anoLink.setEnabled(!AuthHelper.isLoginBlocked());
  }
  loginForm=new OLATAuthentcationForm(ureq,winControl,""String_Node_Str"",getTranslator());
  listenTo(loginForm);
  loginComp.put(""String_Node_Str"",loginForm.getInitialComponent());
  if (ureq.getParameterSet().contains(PARAM_LOGINERROR)) {
    showError(translate(""String_Node_Str"",WebappHelper.getMailConfig(""String_Node_Str"")));
  }
  putInitialPanel(loginComp);
}"
69891,"/** 
 * Launch a controller in a tab or site in the given window from a user request url
 * @param ureq
 * @param wControl
 */
public boolean launch(UserRequest ureq,WindowControl wControl){
  BusinessControl bc=wControl.getBusinessControl();
  ContextEntry mainCe=bc.popLauncherContextEntry();
  OLATResourceable ores=mainCe.getOLATResourceable();
  boolean ceConsumed=false;
  RepositoryEntry re=null;
  if (ores.getResourceableTypeName().equals(OresHelper.calculateTypeName(RepositoryEntry.class))) {
    RepositoryManager repom=RepositoryManager.getInstance();
    re=repom.lookupRepositoryEntry(ores.getResourceableId());
    if (re != null) {
      ores=re.getOlatResource();
      ceConsumed=true;
    }
  }
  UserSession usess=ureq.getUserSession();
  Window window=Windows.getWindows(usess).getWindow(ureq);
  if (window == null) {
    logDebug(""String_Node_Str"",null);
    window=wControl.getWindowBackOffice().getWindow();
  }
  DTabs dts=(DTabs)window.getAttribute(""String_Node_Str"");
  DTab dt=dts.getDTab(ores);
  if (dt != null) {
    dts.removeDTab(ureq,dt);
  }
  String firstType=mainCe.getOLATResourceable().getResourceableTypeName();
  ContextEntryControllerCreator typeHandler=contextEntryControllerCreators.get(firstType);
  if (typeHandler == null) {
    logWarn(""String_Node_Str"" + mainCe,null);
    return false;
  }
  if (!typeHandler.validateContextEntryAndShowError(mainCe,ureq,wControl)) {
    return false;
  }
  String siteClassName=typeHandler.getSiteClassName(mainCe,ureq);
  if (siteClassName != null) {
    List<ContextEntry> entries=new ArrayList<ContextEntry>();
    if (bc.hasContextEntry()) {
      ContextEntry subContext=bc.popLauncherContextEntry();
      if (subContext != null) {
        entries.add(subContext);
        while (bc.hasContextEntry()) {
          entries.add(bc.popLauncherContextEntry());
        }
      }
    }
 else     if (!ceConsumed) {
      if (ores != null) {
        entries.add(BusinessControlFactory.getInstance().createContextEntry(ores));
      }
    }
    TabContext context=typeHandler.getTabContext(ureq,ores,mainCe,entries);
    dts.activateStatic(ureq,siteClassName,context.getContext());
    return true;
  }
 else {
    List<ContextEntry> entries=new ArrayList<ContextEntry>();
    while (bc.hasContextEntry()) {
      entries.add(bc.popLauncherContextEntry());
    }
    TabContext context=typeHandler.getTabContext(ureq,ores,mainCe,entries);
    dt=dts.createDTab(context.getTabResource(),re,context.getName());
    if (dt == null) {
      return false;
    }
 else {
      WindowControl bwControl=BusinessControlFactory.getInstance().createBusinessWindowControl(bc,dt.getWindowControl());
      usess.addToHistory(ureq,bc);
      Controller launchC=typeHandler.createController(mainCe,ureq,bwControl);
      if (launchC == null) {
        throw new AssertException(""String_Node_Str"" + bc.getAsString() + ""String_Node_Str""+ typeHandler.getClass().getName()+ ""String_Node_Str"");
      }
      dt.setController(launchC);
      dts.addDTab(ureq,dt);
      dts.activate(ureq,dt,context.getContext());
      return true;
    }
  }
}","/** 
 * Launch a controller in a tab or site in the given window from a user request url
 * @param ureq
 * @param wControl
 */
public boolean launch(UserRequest ureq,WindowControl wControl){
  BusinessControl bc=wControl.getBusinessControl();
  ContextEntry mainCe=bc.popLauncherContextEntry();
  OLATResourceable ores=mainCe.getOLATResourceable();
  boolean ceConsumed=false;
  RepositoryEntry re=null;
  if (ores.getResourceableTypeName().equals(OresHelper.calculateTypeName(RepositoryEntry.class))) {
    RepositoryManager repom=RepositoryManager.getInstance();
    re=repom.lookupRepositoryEntry(ores.getResourceableId());
    if (re != null) {
      ores=re.getOlatResource();
      ceConsumed=true;
    }
  }
  UserSession usess=ureq.getUserSession();
  Window window=Windows.getWindows(usess).getWindow(ureq);
  if (window == null) {
    logDebug(""String_Node_Str"",null);
    window=wControl.getWindowBackOffice().getWindow();
  }
  DTabs dts=(DTabs)window.getAttribute(""String_Node_Str"");
  DTab dt=dts.getDTab(ores);
  if (dt != null) {
    dts.removeDTab(ureq,dt);
  }
  String firstType=mainCe.getOLATResourceable().getResourceableTypeName();
  ContextEntryControllerCreator typeHandler=contextEntryControllerCreators.get(firstType);
  if (typeHandler == null) {
    logWarn(""String_Node_Str"" + mainCe,null);
    return false;
  }
  if (!typeHandler.validateContextEntryAndShowError(mainCe,ureq,wControl)) {
    return false;
  }
  String siteClassName=typeHandler.getSiteClassName(mainCe,ureq);
  if (siteClassName != null) {
    List<ContextEntry> entries=new ArrayList<ContextEntry>();
    if (bc.hasContextEntry()) {
      ContextEntry subContext=bc.popLauncherContextEntry();
      if (subContext != null) {
        entries.add(subContext);
        while (bc.hasContextEntry()) {
          entries.add(bc.popLauncherContextEntry());
        }
      }
    }
 else     if (!ceConsumed) {
      if (ores != null) {
        entries.add(BusinessControlFactory.getInstance().createContextEntry(ores));
      }
    }
    TabContext context=typeHandler.getTabContext(ureq,ores,mainCe,entries);
    dts.activateStatic(ureq,siteClassName,context.getContext());
    return true;
  }
 else {
    List<ContextEntry> entries=new ArrayList<ContextEntry>();
    while (bc.hasContextEntry()) {
      entries.add(bc.popLauncherContextEntry());
    }
    TabContext context=typeHandler.getTabContext(ureq,ores,mainCe,entries);
    dt=dts.createDTab(context.getTabResource(),re,context.getName());
    if (dt == null) {
      return false;
    }
 else {
      WindowControl bwControl=BusinessControlFactory.getInstance().createBusinessWindowControl(bc,dt.getWindowControl());
      usess.addToHistory(ureq,bc);
      Controller launchC=typeHandler.createController(mainCe,ureq,bwControl);
      if (launchC == null) {
        throw new AssertException(""String_Node_Str"" + bc.getAsString() + ""String_Node_Str""+ typeHandler.getClass().getName()+ ""String_Node_Str"");
      }
      dt.setController(launchC);
      if (dts.addDTab(ureq,dt)) {
        dts.activate(ureq,dt,context.getContext());
        return true;
      }
 else {
        return false;
      }
    }
  }
}"
69892,"/** 
 * @see org.olat.core.gui.control.generic.dtabs.DTabs#addDTab(org.olat.core.gui.control.generic.dtabs.DTab)
 */
public void addDTab(UserRequest ureq,DTab dt){
  DTab old=getDTab(dt.getOLATResourceable());
  if (old != null) {
    getWindowControl().getWindowBackOffice().getWindow().setAttribute(""String_Node_Str"",dt.getWindowControl());
    return;
  }
synchronized (dtabs) {
    dtabs.add(dt);
    dtabsLinkNames.add(Integer.toString(dtabCreateCounter));
    Link link=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    link.setCustomDisplayText(((DTabImpl)dt).getNavElement().getTitle());
    link.setTitle(dt.getTitle());
    link.setUserObject(dt);
    link.setAccessKey(""String_Node_Str"");
    Link calink=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    calink.setCustomEnabledLinkCSS(""String_Node_Str"");
    calink.setTitle(translate(""String_Node_Str""));
    calink.setTooltip(translate(""String_Node_Str""),false);
    calink.setUserObject(dt);
    Link cplink=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    cplink.setCustomEnabledLinkCSS(""String_Node_Str"");
    cplink.setTitle(translate(""String_Node_Str""));
    cplink.setTooltip(translate(""String_Node_Str""),false);
    cplink.setUserObject(dt);
    Controller dtabCtr=dt.getController();
    dtabCtr.addControllerListener(this);
    updateBusinessPath(ureq,dt);
    dtabsControllers.add(dtabCtr);
    dtabCreateCounter++;
  }
  getWindowControl().getWindowBackOffice().getWindow().setAttribute(""String_Node_Str"",dt.getWindowControl());
}","/** 
 * @see org.olat.core.gui.control.generic.dtabs.DTabs#addDTab(org.olat.core.gui.control.generic.dtabs.DTab)
 */
public boolean addDTab(UserRequest ureq,DTab dt){
  if (isDisposed()) {
    return false;
  }
  DTab old=getDTab(dt.getOLATResourceable());
  if (old != null) {
    getWindowControl().getWindowBackOffice().getWindow().setAttribute(""String_Node_Str"",dt.getWindowControl());
    return true;
  }
synchronized (dtabs) {
    dtabs.add(dt);
    dtabsLinkNames.add(Integer.toString(dtabCreateCounter));
    Link link=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    link.setCustomDisplayText(((DTabImpl)dt).getNavElement().getTitle());
    link.setTitle(dt.getTitle());
    link.setUserObject(dt);
    link.setAccessKey(""String_Node_Str"");
    Link calink=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    calink.setCustomEnabledLinkCSS(""String_Node_Str"");
    calink.setTitle(translate(""String_Node_Str""));
    calink.setTooltip(translate(""String_Node_Str""),false);
    calink.setUserObject(dt);
    Link cplink=LinkFactory.createCustomLink(""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"" + dtabCreateCounter,""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
    cplink.setCustomEnabledLinkCSS(""String_Node_Str"");
    cplink.setTitle(translate(""String_Node_Str""));
    cplink.setTooltip(translate(""String_Node_Str""),false);
    cplink.setUserObject(dt);
    Controller dtabCtr=dt.getController();
    dtabCtr.addControllerListener(this);
    updateBusinessPath(ureq,dt);
    dtabsControllers.add(dtabCtr);
    dtabCreateCounter++;
  }
  getWindowControl().getWindowBackOffice().getWindow().setAttribute(""String_Node_Str"",dt.getWindowControl());
  return true;
}"
69893,"public BaseFullWebappController(UserRequest ureq,WindowControl ouisc_wControl,BaseFullWebappControllerParts baseFullWebappControllerParts){
  super(ureq,null);
  this.baseFullWebappControllerParts=baseFullWebappControllerParts;
  guiMessage=new GUIMessage();
  guimsgPanel=new OncePanel(""String_Node_Str"");
  final WindowControl origWCo=ouisc_wControl;
  WindowControl myWControl=new WindowControl(){
    private WindowControlInfo wci;
{
      wci=new WindowControlInfoImpl(BaseFullWebappController.this,origWCo.getWindowControlInfo());
    }
    /** 
 * @see org.olat.core.gui.control.WindowControl#pushToMainArea(org.olat.core.gui.components.Component)
 */
    @SuppressWarnings(""String_Node_Str"") public void pushToMainArea(    Component newMainArea){
      currentGuiStack.pushContent(newMainArea);
    }
    /** 
 * @see org.olat.core.gui.control.WindowControl#pushAsModalDialog(java.lang.String,org.olat.core.gui.components.Component)
 */
    @SuppressWarnings(""String_Node_Str"") public void pushAsModalDialog(    Component newModalDialog){
      currentGuiStack.pushModalDialog(newModalDialog);
    }
    /** 
 * @see org.olat.core.gui.control.WindowControl#pop()
 */
    @SuppressWarnings(""String_Node_Str"") public void pop(){
      currentGuiStack.popContent();
    }
    /** 
 * @see org.olat.core.gui.control.WindowControl#setInfo(java.lang.String)
 */
    @SuppressWarnings(""String_Node_Str"") public void setInfo(    String info){
      guiMessage.setInfo(info);
      guimsgPanel.setContent(guimsgVc);
    }
    /** 
 * @see org.olat.core.gui.control.WindowControl#setError(java.lang.String)
 */
    @SuppressWarnings(""String_Node_Str"") public void setError(    String error){
      guiMessage.setError(error);
      guimsgPanel.setContent(guimsgVc);
    }
    /** 
 * @see org.olat.core.gui.control.WindowControl#setWarning(java.lang.String)
 */
    @SuppressWarnings(""String_Node_Str"") public void setWarning(    String warning){
      guiMessage.setWarn(warning);
      guimsgPanel.setContent(guimsgVc);
    }
    public WindowControlInfo getWindowControlInfo(){
      return wci;
    }
    public void makeFlat(){
      throw new AssertException(""String_Node_Str"");
    }
    public BusinessControl getBusinessControl(){
      return origWCo.getBusinessControl();
    }
    public WindowBackOffice getWindowBackOffice(){
      return origWCo.getWindowBackOffice();
    }
  }
;
  overrideWindowControl(myWControl);
  myDTabsImpl=new DTabs(){
    @Override public void activate(    UserRequest ureq,    DTab dTab,    List<ContextEntry> entries){
      BaseFullWebappController.this.activate(ureq,dTab,null,entries);
    }
    @Override public void activateStatic(    UserRequest ureq,    String className,    List<ContextEntry> entries){
      BaseFullWebappController.this.activateStatic(ureq,className,null,entries);
    }
    public void addDTab(    UserRequest ureq,    DTab dt){
      BaseFullWebappController.this.addDTab(ureq,dt);
    }
    public DTab createDTab(    OLATResourceable ores,    String title){
      return BaseFullWebappController.this.createDTab(ores,null,title);
    }
    public DTab createDTab(    OLATResourceable ores,    OLATResourceable initialOres,    String title){
      return BaseFullWebappController.this.createDTab(ores,initialOres,title);
    }
    public DTab getDTab(    OLATResourceable ores){
      return BaseFullWebappController.this.getDTab(ores);
    }
    public void removeDTab(    UserRequest ureq,    DTab dt){
      BaseFullWebappController.this.removeDTab(ureq,dt);
    }
  }
;
  Window myWindow=myWControl.getWindowBackOffice().getWindow();
  myWindow.setAttribute(""String_Node_Str"",myDTabsImpl);
  myWindow.addListener(this);
  initialize(ureq);
  initialPanel=putInitialPanel(mainVc);
  if (CoreSpringFactory.containsBean(""String_Node_Str"")) {
    Boolean alreadySeen=((Boolean)ureq.getUserSession().getEntry(PRESENTED_AFTER_LOGIN_WORKFLOW));
    if (ureq.getUserSession().isAuthenticated() && alreadySeen == null) {
      Controller aftLHookCtr=((ControllerCreator)CoreSpringFactory.getBean(""String_Node_Str"")).createController(ureq,getWindowControl());
      listenTo(aftLHookCtr);
      aftLHookCtr.getInitialComponent();
      ureq.getUserSession().putEntry(PRESENTED_AFTER_LOGIN_WORKFLOW,Boolean.TRUE);
    }
  }
  getWindowControl().getWindowBackOffice().addCycleListener(this);
  OLATResourceable wrappedLocale=OresHelper.createOLATResourceableType(Locale.class);
  ureq.getUserSession().getSingleUserEventCenter().registerFor(this,getIdentity(),wrappedLocale);
  GlobalStickyMessage.registerForGlobalStickyMessage(this,ureq.getIdentity());
}","public BaseFullWebappController(UserRequest ureq,WindowControl ouisc_wControl,BaseFullWebappControllerParts baseFullWebappControllerParts){
  super(ureq,null);
  this.baseFullWebappControllerParts=baseFullWebappControllerParts;
  guiMessage=new GUIMessage();
  guimsgPanel=new OncePanel(""String_Node_Str"");
  final WindowControl origWCo=ouisc_wControl;
  WindowControl myWControl=new WindowControl(){
    private WindowControlInfo wci;
{
      wci=new WindowControlInfoImpl(BaseFullWebappController.this,origWCo.getWindowControlInfo());
    }
    /** 
 * @see org.olat.core.gui.control.WindowControl#pushToMainArea(org.olat.core.gui.components.Component)
 */
    @SuppressWarnings(""String_Node_Str"") public void pushToMainArea(    Component newMainArea){
      currentGuiStack.pushContent(newMainArea);
    }
    /** 
 * @see org.olat.core.gui.control.WindowControl#pushAsModalDialog(java.lang.String,org.olat.core.gui.components.Component)
 */
    @SuppressWarnings(""String_Node_Str"") public void pushAsModalDialog(    Component newModalDialog){
      currentGuiStack.pushModalDialog(newModalDialog);
    }
    /** 
 * @see org.olat.core.gui.control.WindowControl#pop()
 */
    @SuppressWarnings(""String_Node_Str"") public void pop(){
      currentGuiStack.popContent();
    }
    /** 
 * @see org.olat.core.gui.control.WindowControl#setInfo(java.lang.String)
 */
    @SuppressWarnings(""String_Node_Str"") public void setInfo(    String info){
      guiMessage.setInfo(info);
      guimsgPanel.setContent(guimsgVc);
    }
    /** 
 * @see org.olat.core.gui.control.WindowControl#setError(java.lang.String)
 */
    @SuppressWarnings(""String_Node_Str"") public void setError(    String error){
      guiMessage.setError(error);
      guimsgPanel.setContent(guimsgVc);
    }
    /** 
 * @see org.olat.core.gui.control.WindowControl#setWarning(java.lang.String)
 */
    @SuppressWarnings(""String_Node_Str"") public void setWarning(    String warning){
      guiMessage.setWarn(warning);
      guimsgPanel.setContent(guimsgVc);
    }
    public WindowControlInfo getWindowControlInfo(){
      return wci;
    }
    public void makeFlat(){
      throw new AssertException(""String_Node_Str"");
    }
    public BusinessControl getBusinessControl(){
      return origWCo.getBusinessControl();
    }
    public WindowBackOffice getWindowBackOffice(){
      return origWCo.getWindowBackOffice();
    }
  }
;
  overrideWindowControl(myWControl);
  myDTabsImpl=new DTabs(){
    @Override public void activate(    UserRequest ureq,    DTab dTab,    List<ContextEntry> entries){
      BaseFullWebappController.this.activate(ureq,dTab,null,entries);
    }
    @Override public void activateStatic(    UserRequest ureq,    String className,    List<ContextEntry> entries){
      BaseFullWebappController.this.activateStatic(ureq,className,null,entries);
    }
    public boolean addDTab(    UserRequest ureq,    DTab dt){
      return BaseFullWebappController.this.addDTab(ureq,dt);
    }
    public DTab createDTab(    OLATResourceable ores,    String title){
      return BaseFullWebappController.this.createDTab(ores,null,title);
    }
    public DTab createDTab(    OLATResourceable ores,    OLATResourceable initialOres,    String title){
      return BaseFullWebappController.this.createDTab(ores,initialOres,title);
    }
    public DTab getDTab(    OLATResourceable ores){
      return BaseFullWebappController.this.getDTab(ores);
    }
    public void removeDTab(    UserRequest ureq,    DTab dt){
      BaseFullWebappController.this.removeDTab(ureq,dt);
    }
  }
;
  Window myWindow=myWControl.getWindowBackOffice().getWindow();
  myWindow.setAttribute(""String_Node_Str"",myDTabsImpl);
  myWindow.addListener(this);
  initialize(ureq);
  initialPanel=putInitialPanel(mainVc);
  if (CoreSpringFactory.containsBean(""String_Node_Str"")) {
    Boolean alreadySeen=((Boolean)ureq.getUserSession().getEntry(PRESENTED_AFTER_LOGIN_WORKFLOW));
    if (ureq.getUserSession().isAuthenticated() && alreadySeen == null) {
      Controller aftLHookCtr=((ControllerCreator)CoreSpringFactory.getBean(""String_Node_Str"")).createController(ureq,getWindowControl());
      listenTo(aftLHookCtr);
      aftLHookCtr.getInitialComponent();
      ureq.getUserSession().putEntry(PRESENTED_AFTER_LOGIN_WORKFLOW,Boolean.TRUE);
    }
  }
  getWindowControl().getWindowBackOffice().addCycleListener(this);
  OLATResourceable wrappedLocale=OresHelper.createOLATResourceableType(Locale.class);
  ureq.getUserSession().getSingleUserEventCenter().registerFor(this,getIdentity(),wrappedLocale);
  GlobalStickyMessage.registerForGlobalStickyMessage(this,ureq.getIdentity());
}"
69894,"/** 
 * adds the tab. (upon Event.DONE of the contained controller && if controller is DTabAware -> controller.dispose called by dtabs)
 * @param dt
 */
public void addDTab(UserRequest ureq,DTab dt);","/** 
 * adds the tab. (upon Event.DONE of the contained controller && if controller is DTabAware -> controller.dispose called by dtabs)
 * @param dt
 */
public boolean addDTab(UserRequest ureq,DTab dt);"
69895,"/** 
 * ConditionInterpreter interpretes course conditions.
 * @param userCourseEnv
 */
public ConditionInterpreter(UserCourseEnvironment userCourseEnv){
  uce=userCourseEnv;
  CourseEditorEnv cev=uce.getCourseEditorEnv();
  if (cev != null) {
    translator=new PackageTranslator(PACKAGE,cev.getEditorEnvLocale());
  }
  env=new Environment();
  env.addConstant(""String_Node_Str"",1);
  env.addConstant(""String_Node_Str"",0);
  env.addVariable(NowVariable.name,new NowVariable(userCourseEnv));
  env.addVariable(NeverVariable.name,new NeverVariable(userCourseEnv));
  env.addFunction(DateFunction.name,new DateFunction(userCourseEnv));
  env.addFunction(""String_Node_Str"",new InLearningGroupFunction(userCourseEnv,""String_Node_Str""));
  env.addFunction(""String_Node_Str"",new InLearningGroupFunction(userCourseEnv,""String_Node_Str""));
  env.addFunction(""String_Node_Str"",new IsLearningGroupFullFunction(userCourseEnv,""String_Node_Str""));
  env.addFunction(InRightGroupFunction.name,new InRightGroupFunction(userCourseEnv));
  env.addFunction(InLearningAreaFunction.name,new InLearningAreaFunction(userCourseEnv));
  env.addFunction(IsUserFunction.name,new IsUserFunction(userCourseEnv));
  env.addFunction(IsGuestFunction.name,new IsGuestFunction(userCourseEnv));
  env.addFunction(IsGlobalAuthorFunction.name,new IsGlobalAuthorFunction(userCourseEnv));
  EvalAttributeFunction eaf;
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_HAS_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_IS_IN_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_HAS_NOT_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_IS_NOT_IN_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_ATTRIBUTE_ENDS_WITH);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_ATTRIBUTE_STARTS_WITH);
  env.addFunction(eaf.name,eaf);
  env.addFunction(GetUserPropertyFunction.name,new GetUserPropertyFunction(userCourseEnv));
  env.addFunction(GetUserCourseDBFunction.name,new GetUserCourseDBFunction(userCourseEnv));
  env.addFunction(HasLanguageFunction.name,new HasLanguageFunction(userCourseEnv));
  env.addFunction(InInstitutionFunction.name,new InInstitutionFunction(userCourseEnv));
  env.addFunction(IsCourseCoachFunction.name,new IsCourseCoachFunction(userCourseEnv));
  env.addFunction(IsCourseParticipantFunction.name,new IsCourseParticipantFunction(userCourseEnv));
  env.addFunction(IsCourseAdministratorFunction.name,new IsCourseAdministratorFunction(userCourseEnv));
  env.addFunction(GetInitialCourseLaunchDateFunction.name,new GetInitialCourseLaunchDateFunction(userCourseEnv));
  env.addFunction(GetRecentCourseLaunchDateFunction.name,new GetRecentCourseLaunchDateFunction(userCourseEnv));
  env.addFunction(GetAttemptsFunction.name,new GetAttemptsFunction(userCourseEnv));
  env.addFunction(GetInitialEnrollmentDateFunction.name,new GetInitialEnrollmentDateFunction(userCourseEnv));
  env.addFunction(GetRecentEnrollmentDateFunction.name,new GetRecentEnrollmentDateFunction(userCourseEnv));
  env.addFunction(GetPassedFunction.name,new GetPassedFunction(userCourseEnv));
  env.addFunction(GetScoreFunction.name,new GetScoreFunction(userCourseEnv));
  env.addFunction(GetPassedWithCourseIdFunction.name,new GetPassedWithCourseIdFunction(userCourseEnv));
  env.addFunction(GetScoreWithCourseIdFunction.name,new GetScoreWithCourseIdFunction(userCourseEnv));
  env.addFunction(GetOnyxTestOutcomeNumFunction.name,new GetOnyxTestOutcomeNumFunction(userCourseEnv));
  env.addFunction(GetOnyxTestOutcomeAnumFunction.name,new GetOnyxTestOutcomeAnumFunction(userCourseEnv));
  env.addUnit(""String_Node_Str"",new MinuteUnit());
  env.addUnit(""String_Node_Str"",new HourUnit());
  env.addUnit(""String_Node_Str"",new DayUnit());
  env.addUnit(""String_Node_Str"",new WeekUnit());
  env.addUnit(""String_Node_Str"",new MonthUnit());
}","/** 
 * ConditionInterpreter interpretes course conditions.
 * @param userCourseEnv
 */
public ConditionInterpreter(UserCourseEnvironment userCourseEnv){
  uce=userCourseEnv;
  CourseEditorEnv cev=uce.getCourseEditorEnv();
  if (cev != null) {
    translator=new PackageTranslator(PACKAGE,cev.getEditorEnvLocale());
  }
  env=new Environment();
  env.addConstant(""String_Node_Str"",1);
  env.addConstant(""String_Node_Str"",0);
  env.addVariable(NowVariable.name,new NowVariable(userCourseEnv));
  env.addVariable(NeverVariable.name,new NeverVariable(userCourseEnv));
  env.addFunction(DateFunction.name,new DateFunction(userCourseEnv));
  env.addFunction(""String_Node_Str"",new InLearningGroupFunction(userCourseEnv,""String_Node_Str""));
  env.addFunction(""String_Node_Str"",new InLearningGroupFunction(userCourseEnv,""String_Node_Str""));
  env.addFunction(""String_Node_Str"",new IsLearningGroupFullFunction(userCourseEnv,""String_Node_Str""));
  env.addFunction(InRightGroupFunction.name,new InRightGroupFunction(userCourseEnv));
  env.addFunction(InLearningAreaFunction.name,new InLearningAreaFunction(userCourseEnv));
  env.addFunction(IsUserFunction.name,new IsUserFunction(userCourseEnv));
  env.addFunction(IsGuestFunction.name,new IsGuestFunction(userCourseEnv));
  env.addFunction(IsGlobalAuthorFunction.name,new IsGlobalAuthorFunction(userCourseEnv));
  env.addFunction(Sleep.name,new Sleep(userCourseEnv));
  EvalAttributeFunction eaf;
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_HAS_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_IS_IN_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_HAS_NOT_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_IS_NOT_IN_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_ATTRIBUTE_ENDS_WITH);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_ATTRIBUTE_STARTS_WITH);
  env.addFunction(eaf.name,eaf);
  env.addFunction(GetUserPropertyFunction.name,new GetUserPropertyFunction(userCourseEnv));
  env.addFunction(GetUserCourseDBFunction.name,new GetUserCourseDBFunction(userCourseEnv));
  env.addFunction(HasLanguageFunction.name,new HasLanguageFunction(userCourseEnv));
  env.addFunction(InInstitutionFunction.name,new InInstitutionFunction(userCourseEnv));
  env.addFunction(IsCourseCoachFunction.name,new IsCourseCoachFunction(userCourseEnv));
  env.addFunction(IsCourseParticipantFunction.name,new IsCourseParticipantFunction(userCourseEnv));
  env.addFunction(IsCourseAdministratorFunction.name,new IsCourseAdministratorFunction(userCourseEnv));
  env.addFunction(GetInitialCourseLaunchDateFunction.name,new GetInitialCourseLaunchDateFunction(userCourseEnv));
  env.addFunction(GetRecentCourseLaunchDateFunction.name,new GetRecentCourseLaunchDateFunction(userCourseEnv));
  env.addFunction(GetAttemptsFunction.name,new GetAttemptsFunction(userCourseEnv));
  env.addFunction(GetInitialEnrollmentDateFunction.name,new GetInitialEnrollmentDateFunction(userCourseEnv));
  env.addFunction(GetRecentEnrollmentDateFunction.name,new GetRecentEnrollmentDateFunction(userCourseEnv));
  env.addFunction(GetPassedFunction.name,new GetPassedFunction(userCourseEnv));
  env.addFunction(GetScoreFunction.name,new GetScoreFunction(userCourseEnv));
  env.addFunction(GetPassedWithCourseIdFunction.name,new GetPassedWithCourseIdFunction(userCourseEnv));
  env.addFunction(GetScoreWithCourseIdFunction.name,new GetScoreWithCourseIdFunction(userCourseEnv));
  env.addFunction(GetOnyxTestOutcomeNumFunction.name,new GetOnyxTestOutcomeNumFunction(userCourseEnv));
  env.addFunction(GetOnyxTestOutcomeAnumFunction.name,new GetOnyxTestOutcomeAnumFunction(userCourseEnv));
  env.addUnit(""String_Node_Str"",new MinuteUnit());
  env.addUnit(""String_Node_Str"",new HourUnit());
  env.addUnit(""String_Node_Str"",new DayUnit());
  env.addUnit(""String_Node_Str"",new WeekUnit());
  env.addUnit(""String_Node_Str"",new MonthUnit());
}"
69896,"/** 
 * ConditionInterpreter interpretes course conditions.
 * @param userCourseEnv
 */
public OnlyGroupConditionInterpreter(UserCourseEnvironment userCourseEnv){
  super();
  uce=userCourseEnv;
  CourseEditorEnv cev=uce.getCourseEditorEnv();
  if (cev != null) {
    translator=new PackageTranslator(PACKAGE,cev.getEditorEnvLocale());
  }
  env=new Environment();
  env.addConstant(""String_Node_Str"",1);
  env.addConstant(""String_Node_Str"",0);
  env.addVariable(NowVariable.name,new DummyVariable(userCourseEnv));
  env.addVariable(NeverVariable.name,new NeverVariable(userCourseEnv));
  env.addFunction(DateFunction.name,new DummyDateFunction(userCourseEnv));
  env.addFunction(""String_Node_Str"",new InLearningGroupFunction(userCourseEnv,""String_Node_Str""));
  env.addFunction(""String_Node_Str"",new InLearningGroupFunction(userCourseEnv,""String_Node_Str""));
  env.addFunction(InRightGroupFunction.name,new InRightGroupFunction(userCourseEnv));
  env.addFunction(InLearningAreaFunction.name,new InLearningAreaFunction(userCourseEnv));
  env.addFunction(IsUserFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(IsGuestFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(IsGlobalAuthorFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(""String_Node_Str"",new DummyBooleanFunction(userCourseEnv));
  env.addFunction(""String_Node_Str"",new DummyBooleanFunction(userCourseEnv));
  env.addFunction(GetUserPropertyFunction.name,new DummyStringFunction(userCourseEnv));
  env.addFunction(GetUserCourseDBFunction.name,new DummyStringFunction(userCourseEnv));
  env.addFunction(HasLanguageFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(InInstitutionFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(IsCourseCoachFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(IsCourseParticipantFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(IsCourseAdministratorFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(GetAttemptsFunction.name,new DummyIntegerFunction(userCourseEnv));
  env.addFunction(GetInitialCourseLaunchDateFunction.name,new GetInitialCourseLaunchDateFunction(userCourseEnv));
  env.addFunction(GetRecentCourseLaunchDateFunction.name,new GetRecentCourseLaunchDateFunction(userCourseEnv));
  EvalAttributeFunction eaf;
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_HAS_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_IS_IN_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_HAS_NOT_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_IS_NOT_IN_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_ATTRIBUTE_ENDS_WITH);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_ATTRIBUTE_STARTS_WITH);
  env.addFunction(eaf.name,eaf);
  env.addFunction(GetInitialEnrollmentDateFunction.name,new DummyDateFunction(userCourseEnv));
  env.addFunction(GetRecentEnrollmentDateFunction.name,new DummyDateFunction(userCourseEnv));
  env.addFunction(GetPassedFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(GetScoreFunction.name,new DummyDoubleFunction(userCourseEnv));
  env.addFunction(GetPassedWithCourseIdFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(GetScoreWithCourseIdFunction.name,new DummyDoubleFunction(userCourseEnv));
  env.addUnit(""String_Node_Str"",new MinuteUnit());
  env.addUnit(""String_Node_Str"",new HourUnit());
  env.addUnit(""String_Node_Str"",new DayUnit());
  env.addUnit(""String_Node_Str"",new WeekUnit());
  env.addUnit(""String_Node_Str"",new MonthUnit());
}","/** 
 * ConditionInterpreter interpretes course conditions.
 * @param userCourseEnv
 */
public OnlyGroupConditionInterpreter(UserCourseEnvironment userCourseEnv){
  super();
  uce=userCourseEnv;
  CourseEditorEnv cev=uce.getCourseEditorEnv();
  if (cev != null) {
    translator=new PackageTranslator(PACKAGE,cev.getEditorEnvLocale());
  }
  env=new Environment();
  env.addConstant(""String_Node_Str"",1);
  env.addConstant(""String_Node_Str"",0);
  env.addVariable(NowVariable.name,new DummyVariable(userCourseEnv));
  env.addVariable(NeverVariable.name,new NeverVariable(userCourseEnv));
  env.addFunction(DateFunction.name,new DummyDateFunction(userCourseEnv));
  env.addFunction(""String_Node_Str"",new InLearningGroupFunction(userCourseEnv,""String_Node_Str""));
  env.addFunction(""String_Node_Str"",new InLearningGroupFunction(userCourseEnv,""String_Node_Str""));
  env.addFunction(InRightGroupFunction.name,new InRightGroupFunction(userCourseEnv));
  env.addFunction(InLearningAreaFunction.name,new InLearningAreaFunction(userCourseEnv));
  env.addFunction(IsUserFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(IsGuestFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(IsGlobalAuthorFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(Sleep.name,new Sleep(userCourseEnv));
  env.addFunction(""String_Node_Str"",new DummyBooleanFunction(userCourseEnv));
  env.addFunction(""String_Node_Str"",new DummyBooleanFunction(userCourseEnv));
  env.addFunction(GetUserPropertyFunction.name,new DummyStringFunction(userCourseEnv));
  env.addFunction(GetUserCourseDBFunction.name,new DummyStringFunction(userCourseEnv));
  env.addFunction(HasLanguageFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(InInstitutionFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(IsCourseCoachFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(IsCourseParticipantFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(IsCourseAdministratorFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(GetAttemptsFunction.name,new DummyIntegerFunction(userCourseEnv));
  env.addFunction(GetInitialCourseLaunchDateFunction.name,new GetInitialCourseLaunchDateFunction(userCourseEnv));
  env.addFunction(GetRecentCourseLaunchDateFunction.name,new GetRecentCourseLaunchDateFunction(userCourseEnv));
  EvalAttributeFunction eaf;
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_HAS_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_IS_IN_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_HAS_NOT_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_IS_NOT_IN_ATTRIBUTE);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_ATTRIBUTE_ENDS_WITH);
  env.addFunction(eaf.name,eaf);
  eaf=new EvalAttributeFunction(userCourseEnv,EvalAttributeFunction.FUNCTION_TYPE_ATTRIBUTE_STARTS_WITH);
  env.addFunction(eaf.name,eaf);
  env.addFunction(GetInitialEnrollmentDateFunction.name,new DummyDateFunction(userCourseEnv));
  env.addFunction(GetRecentEnrollmentDateFunction.name,new DummyDateFunction(userCourseEnv));
  env.addFunction(GetPassedFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(GetScoreFunction.name,new DummyDoubleFunction(userCourseEnv));
  env.addFunction(GetPassedWithCourseIdFunction.name,new DummyBooleanFunction(userCourseEnv));
  env.addFunction(GetScoreWithCourseIdFunction.name,new DummyDoubleFunction(userCourseEnv));
  env.addUnit(""String_Node_Str"",new MinuteUnit());
  env.addUnit(""String_Node_Str"",new HourUnit());
  env.addUnit(""String_Node_Str"",new DayUnit());
  env.addUnit(""String_Node_Str"",new WeekUnit());
  env.addUnit(""String_Node_Str"",new MonthUnit());
}"
69897,"@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    if (needMemberInfoController) {
      infoController=new MemberInfoController(ureq,getWindowControl(),member,repoEntry,mainForm);
      listenTo(infoController);
      layoutCont.put(""String_Node_Str"",infoController.getInitialComponent());
    }
    String name=repoEntry == null ? businessGroup.getName() : repoEntry.getDisplayname();
    String title=translate(""String_Node_Str"",new String[]{name});
    layoutCont.contextPut(""String_Node_Str"",title);
  }
  if (repoEntry != null) {
    String[] repoValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
    repoRightsEl=uifactory.addCheckboxesVertical(""String_Node_Str"",formLayout,repoRightsKeys,repoValues,null,1);
    if (member != null) {
      RepoPermission repoPermission=PermissionHelper.getPermission(repoEntry,member,memberships);
      repoRightsEl.select(""String_Node_Str"",repoPermission.isOwner());
      repoRightsEl.select(""String_Node_Str"",repoPermission.isTutor());
      repoRightsEl.select(""String_Node_Str"",repoPermission.isParticipant());
    }
  }
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableDataModel=new EditMemberTableDataModel(Collections.<MemberOption>emptyList(),tableColumnModel);
  uifactory.addTableElement(""String_Node_Str"",tableDataModel,formLayout);
  if (withButtons) {
    FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
    formLayout.add(buttonLayout);
    buttonLayout.setRootForm(mainForm);
    uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout);
    uifactory.addFormCancelButton(""String_Node_Str"",buttonLayout,ureq,getWindowControl());
  }
}","@Override protected void initForm(FormItemContainer formLayout,Controller listener,UserRequest ureq){
  if (formLayout instanceof FormLayoutContainer) {
    FormLayoutContainer layoutCont=(FormLayoutContainer)formLayout;
    if (needMemberInfoController) {
      infoController=new MemberInfoController(ureq,getWindowControl(),member,repoEntry,mainForm);
      listenTo(infoController);
      layoutCont.add(infoController.getInitialFormItem());
      layoutCont.add(""String_Node_Str"",infoController.getInitialFormItem());
    }
    String name=repoEntry == null ? businessGroup.getName() : repoEntry.getDisplayname();
    String title=translate(""String_Node_Str"",new String[]{name});
    layoutCont.contextPut(""String_Node_Str"",title);
  }
  if (repoEntry != null) {
    String[] repoValues=new String[]{translate(""String_Node_Str""),translate(""String_Node_Str""),translate(""String_Node_Str"")};
    repoRightsEl=uifactory.addCheckboxesVertical(""String_Node_Str"",formLayout,repoRightsKeys,repoValues,null,1);
    if (member != null) {
      RepoPermission repoPermission=PermissionHelper.getPermission(repoEntry,member,memberships);
      repoRightsEl.select(""String_Node_Str"",repoPermission.isOwner());
      repoRightsEl.select(""String_Node_Str"",repoPermission.isTutor());
      repoRightsEl.select(""String_Node_Str"",repoPermission.isParticipant());
    }
  }
  FlexiTableColumnModel tableColumnModel=FlexiTableDataModelFactory.createFlexiTableColumnModel();
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableColumnModel.addFlexiColumnModel(new DefaultFlexiColumnModel(""String_Node_Str""));
  tableDataModel=new EditMemberTableDataModel(Collections.<MemberOption>emptyList(),tableColumnModel);
  uifactory.addTableElement(""String_Node_Str"",tableDataModel,formLayout);
  if (withButtons) {
    FormLayoutContainer buttonLayout=FormLayoutContainer.createButtonLayout(""String_Node_Str"",getTranslator());
    formLayout.add(buttonLayout);
    buttonLayout.setRootForm(mainForm);
    uifactory.addFormSubmitButton(""String_Node_Str"",buttonLayout);
    uifactory.addFormCancelButton(""String_Node_Str"",buttonLayout,ureq,getWindowControl());
  }
}"
69898,"/** 
 * loops over all PolicyWrappers and updates the datamodel according to the current form-values
 */
protected void secureListBox(){
  if (isLogDebugEnabled())   logDebug(""String_Node_Str"",null);
  for (  PolicyWrapper policyWrapper : policyWrappers) {
    TextBoxListElement userList=policyWrapper.getUserListBox();
    if (userList != null) {
      List<String> values=userList.getValueList();
      List<Identity> identities=new ArrayList<Identity>();
      for (      String value : values) {
        Identity id=getIdentityByLogin(value);
        if (id != null) {
          identities.add(id);
        }
      }
      policyWrapper.setIdentities(identities);
    }
    TextBoxListElement groupListBox=policyWrapper.getGroupListBox();
    if (groupListBox != null) {
      List<String> values=groupListBox.getValueList();
      List<BusinessGroup> selectedGroups=new ArrayList<BusinessGroup>();
      for (      BusinessGroup group : groupList) {
        if (values.contains(group.getKey().toString())) {
          selectedGroups.add(group);
        }
      }
      policyWrapper.setGroups(selectedGroups);
    }
    TextElement firstNameEl=policyWrapper.getFirstNameEl();
    if (firstNameEl != null) {
      policyWrapper.getInvitation().setFirstName(firstNameEl.getValue());
    }
    TextElement lastNameEl=policyWrapper.getLastNameEl();
    if (lastNameEl != null) {
      policyWrapper.getInvitation().setLastName(lastNameEl.getValue());
    }
    TextElement mailEl=policyWrapper.getMailEl();
    if (mailEl != null) {
      policyWrapper.getInvitation().setMail(mailEl.getValue());
    }
    policyWrapper.setFrom(policyWrapper.getFromChooser().getDate());
    policyWrapper.setTo(policyWrapper.getToChooser().getDate());
  }
}","/** 
 * loops over all PolicyWrappers and updates the datamodel according to the current form-values
 */
protected void secureListBox(){
  if (isLogDebugEnabled())   logDebug(""String_Node_Str"",null);
  for (  PolicyWrapper policyWrapper : policyWrappers) {
    TextBoxListElement userList=policyWrapper.getUserListBox();
    if (userList != null) {
      List<String> values=userList.getValueList();
      List<Identity> identities=new ArrayList<Identity>();
      for (      String value : values) {
        Identity id=getIdentityByLogin(value);
        if (id != null) {
          identities.add(id);
        }
      }
      policyWrapper.setIdentities(identities);
    }
    TextBoxListElement groupListBox=policyWrapper.getGroupListBox();
    if (groupListBox != null) {
      List<String> values=groupListBox.getValueList();
      List<BusinessGroup> selectedGroups=new ArrayList<BusinessGroup>();
      for (      BusinessGroup group : groupList) {
        if (values.contains(group.getKey().toString())) {
          selectedGroups.add(group);
        }
      }
      policyWrapper.setGroups(selectedGroups);
    }
    TextElement firstNameEl=policyWrapper.getFirstNameEl();
    if (firstNameEl != null) {
      policyWrapper.getInvitation().setFirstName(firstNameEl.getValue());
    }
    TextElement lastNameEl=policyWrapper.getLastNameEl();
    if (lastNameEl != null) {
      policyWrapper.getInvitation().setLastName(lastNameEl.getValue());
    }
    TextElement mailEl=policyWrapper.getMailEl();
    if (mailEl != null) {
      policyWrapper.getInvitation().setMail(mailEl.getValue());
    }
    if (policyWrapper.getFromChooser() != null) {
      policyWrapper.setFrom(policyWrapper.getFromChooser().getDate());
    }
    if (policyWrapper.getToChooser() != null) {
      policyWrapper.setTo(policyWrapper.getToChooser().getDate());
    }
  }
}"
69899,"/** 
 * creates the custom formLayoutContainer and adds a form-component for every PolicyWrapper, according to its type.
 */
protected void initPolicyUI(){
  String template=Util.getPackageVelocityRoot(this.getClass()) + ""String_Node_Str"";
  for (  PolicyWrapper policyWrapper : policyWrappers) {
    String cmpName=policyWrapper.getComponentName();
    if (cmpName != null && flc.getFormComponent(cmpName) != null) {
      flc.remove(cmpName);
    }
    cmpName=UUID.randomUUID().toString();
    policyWrapper.setComponentName(cmpName);
    FormLayoutContainer container=FormLayoutContainer.createCustomFormLayout(cmpName,getTranslator(),template);
    container.contextPut(""String_Node_Str"",policyWrapper);
    container.setRootForm(mainForm);
    SingleSelection type=uifactory.addDropdownSingleselect(""String_Node_Str"" + cmpName,""String_Node_Str"",container,targetKeys,targetValues,null);
    type.addActionListener(this,FormEvent.ONCHANGE);
    type.setUserObject(policyWrapper);
    if (policyWrapper.getType() != null) {
      type.select(policyWrapper.getType().name(),true);
switch (policyWrapper.getType()) {
case user:
        Map<String,String> initialUsers=policyWrapper.getIdentitiesValue();
      TextBoxListElement userListBox=uifactory.addTextBoxListElement(""String_Node_Str"" + cmpName,""String_Node_Str"",""String_Node_Str"",initialUsers,container,getTranslator());
    userListBox.setUserObject(policyWrapper);
  userListBox.setMapperProvider(new UserMapperProvider());
userListBox.setAllowNewValues(false);
userListBox.setAllowDuplicates(false);
userListBox.setMaxResults(15);
policyWrapper.setUserListBox(userListBox);
break;
case group:
Map<String,String> initialGroups=policyWrapper.getGroupsValues();
TextBoxListElement groupListBox=uifactory.addTextBoxListElement(""String_Node_Str"" + cmpName,""String_Node_Str"",""String_Node_Str"",initialGroups,container,getTranslator());
groupListBox.setUserObject(policyWrapper);
groupListBox.setMapperProvider(new GroupMapperProvider());
groupListBox.setAllowNewValues(false);
groupListBox.setAllowDuplicates(false);
groupListBox.setMaxResults(15);
policyWrapper.setGroupListBox(groupListBox);
break;
case invitation:
Invitation invitation=policyWrapper.getInvitation();
if (invitation == null) {
invitation=securityManager.createAndPersistInvitation();
policyWrapper.setInvitation(invitation);
}
FormLayoutContainer invitationContainer=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"" + cmpName,getTranslator());
invitationContainer.contextPut(""String_Node_Str"",policyWrapper);
invitationContainer.setRootForm(mainForm);
container.add(""String_Node_Str"" + cmpName,invitationContainer);
uifactory.addSpacerElement(""String_Node_Str"" + cmpName,invitationContainer,true);
TextElement firstNameEl=uifactory.addTextElement(""String_Node_Str"" + cmpName,""String_Node_Str"",64,invitation.getFirstName(),invitationContainer);
firstNameEl.setMandatory(true);
firstNameEl.setNotEmptyCheck(""String_Node_Str"");
TextElement lastNameEl=uifactory.addTextElement(""String_Node_Str"" + cmpName,""String_Node_Str"",64,invitation.getLastName(),invitationContainer);
lastNameEl.setMandatory(true);
lastNameEl.setNotEmptyCheck(""String_Node_Str"");
TextElement mailEl=uifactory.addTextElement(""String_Node_Str"" + cmpName,""String_Node_Str"",128,invitation.getMail(),invitationContainer);
mailEl.setMandatory(true);
mailEl.setNotEmptyCheck(""String_Node_Str"");
if (StringHelper.containsNonWhitespace(invitation.getMail()) && MailHelper.isValidEmailAddress(invitation.getMail())) {
SecurityGroup allUsers=securityManager.findSecurityGroupByName(Constants.GROUP_OLATUSERS);
Identity currentIdentity=userManager.findIdentityByEmail(invitation.getMail());
if (currentIdentity != null && securityManager.isIdentityInSecurityGroup(currentIdentity,allUsers)) {
mailEl.setErrorKey(""String_Node_Str"",new String[]{invitation.getMail()});
}
}
policyWrapper.setFirstNameEl(firstNameEl);
policyWrapper.setLastNameEl(lastNameEl);
policyWrapper.setMailEl(mailEl);
String link=getInvitationLink(invitation,map);
StaticTextElement linkEl=uifactory.addStaticTextElement(""String_Node_Str"" + cmpName,link,invitationContainer);
linkEl.setLabel(""String_Node_Str"",null);
break;
case allusers:
String text=translate(""String_Node_Str"");
uifactory.addStaticTextElement(""String_Node_Str"" + cmpName,text,container);
break;
}
}
if (policyWrapper instanceof TutorPolicyWrapper) {
String text=translate(""String_Node_Str"");
uifactory.addStaticTextElement(""String_Node_Str"" + cmpName,text,container);
}
 else {
DateChooser fromChooser=uifactory.addDateChooser(""String_Node_Str"" + cmpName,""String_Node_Str"",""String_Node_Str"",container);
fromChooser.setDate(policyWrapper.getFrom());
fromChooser.setValidDateCheck(""String_Node_Str"");
policyWrapper.setFromChooser(fromChooser);
DateChooser toChooser=uifactory.addDateChooser(""String_Node_Str"" + cmpName,""String_Node_Str"",""String_Node_Str"",container);
toChooser.setDate(policyWrapper.getTo());
toChooser.setValidDateCheck(""String_Node_Str"");
policyWrapper.setToChooser(toChooser);
FormLink addLink=uifactory.addFormLink(""String_Node_Str"" + cmpName,""String_Node_Str"",null,container,Link.BUTTON_SMALL);
addLink.setUserObject(policyWrapper);
FormLink removeLink=uifactory.addFormLink(""String_Node_Str"" + cmpName,""String_Node_Str"",null,container,Link.BUTTON_SMALL);
removeLink.setUserObject(policyWrapper);
if (!policyWrapper.getType().equals(EPMapPolicy.Type.allusers)) {
FormLink inviteLink=uifactory.addFormLink(""String_Node_Str"" + cmpName,""String_Node_Str"",null,container,Link.BUTTON_XSMALL);
inviteLink.setUserObject(policyWrapper);
inviteLink.setEnabled(!policyWrapper.isInvitationSend());
}
StaticTextElement genErrorPanel=uifactory.addStaticTextElement(""String_Node_Str"" + cmpName,""String_Node_Str"",container);
genErrorPanel.setUserObject(policyWrapper);
}
policyWrapper.setComponentName(cmpName);
flc.add(container);
flc.contextPut(""String_Node_Str"",policyWrapper);
}
flc.contextPut(""String_Node_Str"",policyWrappers);
}","/** 
 * creates the custom formLayoutContainer and adds a form-component for every PolicyWrapper, according to its type.
 */
protected void initPolicyUI(){
  String template=Util.getPackageVelocityRoot(this.getClass()) + ""String_Node_Str"";
  for (  PolicyWrapper policyWrapper : policyWrappers) {
    String cmpName=policyWrapper.getComponentName();
    if (cmpName != null && flc.getFormComponent(cmpName) != null) {
      flc.remove(cmpName);
    }
    cmpName=UUID.randomUUID().toString();
    policyWrapper.setComponentName(cmpName);
    FormLayoutContainer container=FormLayoutContainer.createCustomFormLayout(cmpName,getTranslator(),template);
    container.contextPut(""String_Node_Str"",policyWrapper);
    container.setRootForm(mainForm);
    if (policyWrapper.getType() != null) {
      SingleSelection type=uifactory.addDropdownSingleselect(""String_Node_Str"" + cmpName,""String_Node_Str"",container,targetKeys,targetValues,null);
      type.addActionListener(this,FormEvent.ONCHANGE);
      type.setUserObject(policyWrapper);
      type.select(policyWrapper.getType().name(),true);
switch (policyWrapper.getType()) {
case user:
        Map<String,String> initialUsers=policyWrapper.getIdentitiesValue();
      TextBoxListElement userListBox=uifactory.addTextBoxListElement(""String_Node_Str"" + cmpName,""String_Node_Str"",""String_Node_Str"",initialUsers,container,getTranslator());
    userListBox.setUserObject(policyWrapper);
  userListBox.setMapperProvider(new UserMapperProvider());
userListBox.setAllowNewValues(false);
userListBox.setAllowDuplicates(false);
userListBox.setMaxResults(15);
policyWrapper.setUserListBox(userListBox);
break;
case group:
Map<String,String> initialGroups=policyWrapper.getGroupsValues();
TextBoxListElement groupListBox=uifactory.addTextBoxListElement(""String_Node_Str"" + cmpName,""String_Node_Str"",""String_Node_Str"",initialGroups,container,getTranslator());
groupListBox.setUserObject(policyWrapper);
groupListBox.setMapperProvider(new GroupMapperProvider());
groupListBox.setAllowNewValues(false);
groupListBox.setAllowDuplicates(false);
groupListBox.setMaxResults(15);
policyWrapper.setGroupListBox(groupListBox);
break;
case invitation:
Invitation invitation=policyWrapper.getInvitation();
if (invitation == null) {
invitation=securityManager.createAndPersistInvitation();
policyWrapper.setInvitation(invitation);
}
FormLayoutContainer invitationContainer=FormLayoutContainer.createDefaultFormLayout(""String_Node_Str"" + cmpName,getTranslator());
invitationContainer.contextPut(""String_Node_Str"",policyWrapper);
invitationContainer.setRootForm(mainForm);
container.add(""String_Node_Str"" + cmpName,invitationContainer);
uifactory.addSpacerElement(""String_Node_Str"" + cmpName,invitationContainer,true);
TextElement firstNameEl=uifactory.addTextElement(""String_Node_Str"" + cmpName,""String_Node_Str"",64,invitation.getFirstName(),invitationContainer);
firstNameEl.setMandatory(true);
firstNameEl.setNotEmptyCheck(""String_Node_Str"");
TextElement lastNameEl=uifactory.addTextElement(""String_Node_Str"" + cmpName,""String_Node_Str"",64,invitation.getLastName(),invitationContainer);
lastNameEl.setMandatory(true);
lastNameEl.setNotEmptyCheck(""String_Node_Str"");
TextElement mailEl=uifactory.addTextElement(""String_Node_Str"" + cmpName,""String_Node_Str"",128,invitation.getMail(),invitationContainer);
mailEl.setMandatory(true);
mailEl.setNotEmptyCheck(""String_Node_Str"");
if (StringHelper.containsNonWhitespace(invitation.getMail()) && MailHelper.isValidEmailAddress(invitation.getMail())) {
SecurityGroup allUsers=securityManager.findSecurityGroupByName(Constants.GROUP_OLATUSERS);
Identity currentIdentity=userManager.findIdentityByEmail(invitation.getMail());
if (currentIdentity != null && securityManager.isIdentityInSecurityGroup(currentIdentity,allUsers)) {
mailEl.setErrorKey(""String_Node_Str"",new String[]{invitation.getMail()});
}
}
policyWrapper.setFirstNameEl(firstNameEl);
policyWrapper.setLastNameEl(lastNameEl);
policyWrapper.setMailEl(mailEl);
String link=getInvitationLink(invitation,map);
StaticTextElement linkEl=uifactory.addStaticTextElement(""String_Node_Str"" + cmpName,link,invitationContainer);
linkEl.setLabel(""String_Node_Str"",null);
break;
case allusers:
String text=translate(""String_Node_Str"");
uifactory.addStaticTextElement(""String_Node_Str"" + cmpName,text,container);
break;
}
}
if (policyWrapper instanceof TutorPolicyWrapper) {
String text=translate(""String_Node_Str"");
uifactory.addStaticTextElement(""String_Node_Str"" + cmpName,text,container);
}
 else {
DateChooser fromChooser=uifactory.addDateChooser(""String_Node_Str"" + cmpName,""String_Node_Str"",""String_Node_Str"",container);
fromChooser.setDate(policyWrapper.getFrom());
fromChooser.setValidDateCheck(""String_Node_Str"");
policyWrapper.setFromChooser(fromChooser);
DateChooser toChooser=uifactory.addDateChooser(""String_Node_Str"" + cmpName,""String_Node_Str"",""String_Node_Str"",container);
toChooser.setDate(policyWrapper.getTo());
toChooser.setValidDateCheck(""String_Node_Str"");
policyWrapper.setToChooser(toChooser);
FormLink addLink=uifactory.addFormLink(""String_Node_Str"" + cmpName,""String_Node_Str"",null,container,Link.BUTTON_SMALL);
addLink.setUserObject(policyWrapper);
FormLink removeLink=uifactory.addFormLink(""String_Node_Str"" + cmpName,""String_Node_Str"",null,container,Link.BUTTON_SMALL);
removeLink.setUserObject(policyWrapper);
if (!policyWrapper.getType().equals(EPMapPolicy.Type.allusers)) {
FormLink inviteLink=uifactory.addFormLink(""String_Node_Str"" + cmpName,""String_Node_Str"",null,container,Link.BUTTON_XSMALL);
inviteLink.setUserObject(policyWrapper);
inviteLink.setEnabled(!policyWrapper.isInvitationSend());
}
StaticTextElement genErrorPanel=uifactory.addStaticTextElement(""String_Node_Str"" + cmpName,""String_Node_Str"",container);
genErrorPanel.setUserObject(policyWrapper);
}
policyWrapper.setComponentName(cmpName);
flc.add(container);
flc.contextPut(""String_Node_Str"",policyWrapper);
}
flc.contextPut(""String_Node_Str"",policyWrappers);
}"
69900,"@Override public void getAutoCompleteContent(String searchValue,Map<String,String> resMap){
  if (StringHelper.containsNonWhitespace(searchValue)) {
    String searchValueLower=searchValue.toLowerCase();
    for (    BusinessGroup group : groupList) {
      if (group.getName().toLowerCase().indexOf(searchValueLower) >= 0) {
        resMap.put(group.getName(),group.getKey().toString());
      }
    }
  }
}","@Override public void getAutoCompleteContent(String searchValue,Map<String,String> resMap){
  if (StringHelper.containsNonWhitespace(searchValue)) {
    String searchValueLower=searchValue.toLowerCase();
    for (    BusinessGroup group : groupList) {
      if (group.getName() != null && group.getName().toLowerCase().indexOf(searchValueLower) >= 0) {
        resMap.put(group.getName(),group.getKey().toString());
      }
    }
  }
}"
69901,"@Override protected boolean validateFormLogic(UserRequest ureq){
  boolean allOk=true;
  secureListBox();
  String genericError=null;
  for (  PolicyWrapper policyWrapper : policyWrappers) {
    Type type=policyWrapper.getType();
    TextElement mailEl=policyWrapper.getMailEl();
    if (mailEl != null) {
      String mail=mailEl.getValue();
      if (StringHelper.containsNonWhitespace(mail)) {
        if (MailHelper.isValidEmailAddress(mail)) {
          SecurityGroup allUsers=securityManager.findSecurityGroupByName(Constants.GROUP_OLATUSERS);
          Identity currentIdentity=userManager.findIdentityByEmail(mail);
          if (currentIdentity != null && securityManager.isIdentityInSecurityGroup(currentIdentity,allUsers)) {
            mailEl.setErrorKey(""String_Node_Str"",new String[]{mail});
            allOk&=false;
          }
        }
 else {
          mailEl.setErrorKey(""String_Node_Str"",null);
          allOk&=false;
        }
      }
 else       if (type.equals(Type.invitation)) {
        genericError=translate(""String_Node_Str"");
        allOk&=false;
      }
    }
 else     if (type.equals(Type.group)) {
      List<BusinessGroup> groups=policyWrapper.getGroups();
      if (groups.size() == 0) {
        genericError=translate(""String_Node_Str"");
        allOk&=false;
      }
    }
 else     if (type.equals(Type.user)) {
      List<Identity> idents=policyWrapper.getIdentities();
      if (idents.size() == 0) {
        genericError=translate(""String_Node_Str"");
        allOk&=false;
      }
    }
    if (policyWrapper.getFromChooser().hasError() || policyWrapper.getToChooser().hasError()) {
      genericError=translate(""String_Node_Str"");
      allOk&=false;
    }
    if (policyWrapper.getFrom() != null && policyWrapper.getTo() != null && policyWrapper.getFrom().after(policyWrapper.getTo())) {
      policyWrapper.getFromChooser().setErrorKey(""String_Node_Str"",null);
      policyWrapper.getFromChooser().showError(true);
      genericError=translate(""String_Node_Str"");
      allOk&=false;
    }
    FormLayoutContainer cmp=(FormLayoutContainer)flc.getFormComponent(policyWrapper.getComponentName());
    String errorCompName=policyWrapper.calc(""String_Node_Str"");
    StaticTextElement errTextEl=(StaticTextElement)cmp.getFormComponent(errorCompName);
    if (genericError != null)     errTextEl.setValue(genericError);
  }
  return allOk && super.validateFormLogic(ureq);
}","@Override protected boolean validateFormLogic(UserRequest ureq){
  boolean allOk=true;
  secureListBox();
  String genericError=null;
  for (  PolicyWrapper policyWrapper : policyWrappers) {
    Type type=policyWrapper.getType();
    if (type == null) {
      continue;
    }
    TextElement mailEl=policyWrapper.getMailEl();
    if (mailEl != null) {
      String mail=mailEl.getValue();
      if (StringHelper.containsNonWhitespace(mail)) {
        if (MailHelper.isValidEmailAddress(mail)) {
          SecurityGroup allUsers=securityManager.findSecurityGroupByName(Constants.GROUP_OLATUSERS);
          Identity currentIdentity=userManager.findIdentityByEmail(mail);
          if (currentIdentity != null && securityManager.isIdentityInSecurityGroup(currentIdentity,allUsers)) {
            mailEl.setErrorKey(""String_Node_Str"",new String[]{mail});
            allOk&=false;
          }
        }
 else {
          mailEl.setErrorKey(""String_Node_Str"",null);
          allOk&=false;
        }
      }
 else       if (type.equals(Type.invitation)) {
        genericError=translate(""String_Node_Str"");
        allOk&=false;
      }
    }
 else     if (type.equals(Type.group)) {
      List<BusinessGroup> groups=policyWrapper.getGroups();
      if (groups.size() == 0) {
        genericError=translate(""String_Node_Str"");
        allOk&=false;
      }
    }
 else     if (type.equals(Type.user)) {
      List<Identity> idents=policyWrapper.getIdentities();
      if (idents.size() == 0) {
        genericError=translate(""String_Node_Str"");
        allOk&=false;
      }
    }
    if ((policyWrapper.getFromChooser() != null && policyWrapper.getFromChooser().hasError()) || (policyWrapper.getToChooser() != null && policyWrapper.getToChooser().hasError())) {
      genericError=translate(""String_Node_Str"");
      allOk&=false;
    }
    if (policyWrapper.getFrom() != null && policyWrapper.getTo() != null && policyWrapper.getFrom().after(policyWrapper.getTo())) {
      policyWrapper.getFromChooser().setErrorKey(""String_Node_Str"",null);
      policyWrapper.getFromChooser().showError(true);
      genericError=translate(""String_Node_Str"");
      allOk&=false;
    }
    FormLayoutContainer cmp=(FormLayoutContainer)flc.getFormComponent(policyWrapper.getComponentName());
    String errorCompName=policyWrapper.calc(""String_Node_Str"");
    StaticTextElement errTextEl=(StaticTextElement)cmp.getFormComponent(errorCompName);
    if (genericError != null && errTextEl != null) {
      errTextEl.setValue(genericError);
    }
  }
  return allOk && super.validateFormLogic(ureq);
}"
69902,"@Override protected void formOK(UserRequest ureq){
  secureListBox();
  List<EPMapPolicy> mapPolicies=new ArrayList<EPMapPolicy>();
  for (  PolicyWrapper wrapper : policyWrappers) {
    mapPolicies.add(wrapper.getMapPolicy());
    if (wrapper.getType().equals(EPMapPolicy.Type.invitation)) {
      sendInvitation(ureq,wrapper);
    }
  }
  ePFMgr.updateMapPolicies(map,mapPolicies);
  fireEvent(ureq,Event.DONE_EVENT);
}","@Override protected void formOK(UserRequest ureq){
  secureListBox();
  List<EPMapPolicy> mapPolicies=new ArrayList<EPMapPolicy>();
  for (  PolicyWrapper wrapper : policyWrappers) {
    if (wrapper.getType() == null)     continue;
    mapPolicies.add(wrapper.getMapPolicy());
    if (wrapper.getType().equals(EPMapPolicy.Type.invitation)) {
      sendInvitation(ureq,wrapper);
    }
  }
  ePFMgr.updateMapPolicies(map,mapPolicies);
  fireEvent(ureq,Event.DONE_EVENT);
}"
69903,"public static void redirectToServiceNotAvailable(HttpServletResponse response){
  String pathStaticDir=StaticMediaDispatcher.getStaticMapperPath();
  redirectTo(response,WebappHelper.getServletContextPath() + pathStaticDir + ""String_Node_Str"");
}","/** 
 * Sent to standard 503 if not available
 * @param response
 */
public static void redirectToServiceNotAvailable(HttpServletResponse response){
  try {
    response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}"
69904,"/** 
 * @param identity the identity for which to properties are to be loaded. if null, the properties of all identities (=all properties of this course) are loaded.
 * @return
 */
private List<Property> loadPropertiesFor(List<Identity> identities){
  ICourse course=CourseFactory.loadCourse(ores);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(ATTEMPTS).append(""String_Node_Str"").append(SCORE).append(""String_Node_Str"").append(PASSED).append(""String_Node_Str"").append(ASSESSMENT_ID).append(""String_Node_Str"").append(COMMENT).append(""String_Node_Str"").append(COACH_COMMENT).append(""String_Node_Str"");
  if (identities != null) {
    sb.append(""String_Node_Str"");
  }
  TypedQuery<Property> query=DBFactory.getInstance().getCurrentEntityManager().createQuery(sb.toString(),Property.class).setParameter(""String_Node_Str"",course.getResourceableTypeName()).setParameter(""String_Node_Str"",course.getResourceableId());
  if (identities != null) {
    query.setParameter(""String_Node_Str"",PersistenceHelper.toKeys(identities));
  }
  return query.getResultList();
}","/** 
 * @param identity the identity for which to properties are to be loaded. if null, the properties of all identities (=all properties of this course) are loaded.
 * @return
 */
private List<Property> loadPropertiesFor(List<Identity> identities){
  if (identities == null || identities.isEmpty())   return Collections.emptyList();
  ICourse course=CourseFactory.loadCourse(ores);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(ATTEMPTS).append(""String_Node_Str"").append(SCORE).append(""String_Node_Str"").append(PASSED).append(""String_Node_Str"").append(ASSESSMENT_ID).append(""String_Node_Str"").append(COMMENT).append(""String_Node_Str"").append(COACH_COMMENT).append(""String_Node_Str"");
  if (identities != null) {
    sb.append(""String_Node_Str"");
  }
  TypedQuery<Property> query=DBFactory.getInstance().getCurrentEntityManager().createQuery(sb.toString(),Property.class).setParameter(""String_Node_Str"",course.getResourceableTypeName()).setParameter(""String_Node_Str"",course.getResourceableId());
  if (identities != null) {
    query.setParameter(""String_Node_Str"",PersistenceHelper.toKeys(identities));
  }
  return query.getResultList();
}"
69905,"/** 
 * @param login
 * @param pass
 * @return Identity if authentication was successfull, null otherwise.
 * @deprecated should not be part of the controller
 */
public static Identity authenticate(String login,String pass){
  if (pass == null)   return null;
  Identity ident=BaseSecurityManager.getInstance().findIdentityByName(login);
  if (ident == null && LoginModule.allowLoginUsingEmail()) {
    if (MailHelper.isValidEmailAddress(login)) {
      ident=UserManager.getInstance().findIdentityByEmail(login);
    }
    if (ident == null) {
      ident=findIdentInChangingEmailWorkflow(login);
    }
  }
  ident.getUser().getPreferences().getLanguage();
  if (ident == null)   return null;
  Authentication auth=BaseSecurityManager.getInstance().findAuthentication(ident,BaseSecurityModule.getDefaultAuthProviderIdentifier());
  if (auth != null && auth.getCredential().equals(Encoder.encrypt(pass)))   return ident;
  Tracing.createLoggerFor(OLATAuthenticationController.class).audit(""String_Node_Str"" + login + ""String_Node_Str"",OLATAuthenticationController.class.getName());
  return null;
}","/** 
 * @param login
 * @param pass
 * @return Identity if authentication was successfull, null otherwise.
 * @deprecated should not be part of the controller
 */
public static Identity authenticate(String login,String pass){
  if (pass == null)   return null;
  Identity ident=BaseSecurityManager.getInstance().findIdentityByName(login);
  if (ident == null && LoginModule.allowLoginUsingEmail()) {
    if (MailHelper.isValidEmailAddress(login)) {
      ident=UserManager.getInstance().findIdentityByEmail(login);
    }
    if (ident == null) {
      ident=findIdentInChangingEmailWorkflow(login);
    }
  }
  if (ident == null) {
    return null;
  }
  Authentication auth=BaseSecurityManager.getInstance().findAuthentication(ident,BaseSecurityModule.getDefaultAuthProviderIdentifier());
  if (auth != null && auth.getCredential().equals(Encoder.encrypt(pass)))   return ident;
  Tracing.createLoggerFor(OLATAuthenticationController.class).audit(""String_Node_Str"" + login + ""String_Node_Str"",OLATAuthenticationController.class.getName());
  return null;
}"
69906,"/** 
 * @see org.olat.qti.process.Navigator#submitAssessment()
 */
public final void submitAssessment(){
  Output pendingOutput=null;
  boolean pendingFeedback=getInfo().isFeedback();
  boolean alreadyClosed=getAssessmentInstance().isClosed();
  if (pendingFeedback && getAssessmentInstance().getAssessmentContext().getCurrentSectionContext() != null) {
    ItemContext itc=getAssessmentInstance().getAssessmentContext().getCurrentSectionContext().getCurrentItemContext();
    pendingOutput=itc.getOutput();
  }
  getAssessmentInstance().close();
  if (!getAssessmentInstance().isPreview() && !alreadyClosed) {
    IQManager.getInstance().persistResults(getAssessmentInstance());
  }
  AssessmentContext ac=getAssessmentContext();
  info.clear();
  if (ac.isFeedbackavailable()) {
    Output outp=ac.getOutput();
    getInfo().setCurrentOutput(outp);
    getInfo().setFeedback(true);
  }
 else   if (pendingFeedback) {
    getInfo().setCurrentOutput(pendingOutput);
    getInfo().setFeedback(true);
  }
  info.setMessage(QTIConstants.MESSAGE_ASSESSMENT_SUBMITTED);
  info.setStatus(QTIConstants.ASSESSMENT_FINISHED);
  info.setRenderItems(false);
  if (delegate != null) {
    delegate.submitAssessment(assessmentInstance);
  }
}","/** 
 * @see org.olat.qti.process.Navigator#submitAssessment()
 */
public final void submitAssessment(){
  Output pendingOutput=null;
  boolean pendingFeedback=getInfo().isFeedback();
  boolean alreadyClosed=getAssessmentInstance().isClosed();
  if (pendingFeedback && getAssessmentInstance().getAssessmentContext().getCurrentSectionContext() != null) {
    ItemContext itc=getAssessmentInstance().getAssessmentContext().getCurrentSectionContext().getCurrentItemContext();
    pendingOutput=itc.getOutput();
  }
  getAssessmentInstance().close();
  if (!getAssessmentInstance().isPreview() && !alreadyClosed) {
    IQManager.getInstance().persistResults(getAssessmentInstance());
  }
  AssessmentContext ac=getAssessmentContext();
  info.clear();
  if (ac.isFeedbackavailable()) {
    Output outp=ac.getOutput();
    getInfo().setCurrentOutput(outp);
    getInfo().setFeedback(true);
  }
 else   if (pendingFeedback) {
    getInfo().setCurrentOutput(pendingOutput);
    getInfo().setFeedback(true);
  }
  info.setMessage(QTIConstants.MESSAGE_ASSESSMENT_SUBMITTED);
  info.setStatus(QTIConstants.ASSESSMENT_FINISHED);
  info.setRenderItems(false);
  if (delegate != null && !getAssessmentInstance().isPreview() && !alreadyClosed) {
    delegate.submitAssessment(assessmentInstance);
  }
}"
69907,"@Override public boolean deletePolicies(Collection<SecurityGroup> secGroups,Collection<OLATResource> resources){
  if (secGroups == null || secGroups.isEmpty() || resources == null || resources.isEmpty())   return false;
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(PolicyImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"");
  List<Long> secGroupKeys=PersistenceHelper.toKeys(secGroups);
  List<Long> resourceKeys=PersistenceHelper.toKeys(resources);
  int rows=DBFactory.getInstance().getCurrentEntityManager().createQuery(sb.toString()).setParameter(""String_Node_Str"",resourceKeys).setParameter(""String_Node_Str"",secGroupKeys).executeUpdate();
  return rows > 0;
}","@Override public void deletePolicies(OLATResource resource){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(PolicyImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"");
  int rowDeleted=DBFactory.getInstance().getCurrentEntityManager().createQuery(sb.toString()).setParameter(""String_Node_Str"",resource.getKey()).executeUpdate();
  if (isLogDebugEnabled()) {
    logDebug(rowDeleted + ""String_Node_Str"");
  }
}"
69908,"/** 
 * @see org.olat.course.groupsandrights.CourseGroupManager#deleteCourseGroupmanagement()
 */
public void deleteCourseGroupmanagement(){
  businessGroupService.removeResource(courseResource);
  logAudit(""String_Node_Str"" + courseResource.toString());
}","/** 
 * @see org.olat.course.groupsandrights.CourseGroupManager#deleteCourseGroupmanagement()
 */
public void deleteCourseGroupmanagement(){
  businessGroupService.removeResource(courseResource);
  List<BGArea> areas=getAllAreas();
  for (  BGArea area : areas) {
    areaManager.deleteBGArea(area);
  }
  logAudit(""String_Node_Str"" + courseResource.toString());
}"
69909,"/** 
 * clean up a repo entry with all children and associated data like bookmarks and user references to it
 * @param ureq
 * @param wControl
 * @param entry
 * @return FIXME: we need a delete method without ureq, wControl for manager use. In general, very bad idea to pass ureq and wControl down to the manger layer.
 */
public boolean deleteRepositoryEntryWithAllData(UserRequest ureq,WindowControl wControl,RepositoryEntry entry){
  logDebug(""String_Node_Str"" + entry);
  entry=(RepositoryEntry)DBFactory.getInstance().loadObject(entry,true);
  logDebug(""String_Node_Str"" + entry);
  logDebug(""String_Node_Str"" + entry.getOwnerGroup());
  RepositoryHandler handler=RepositoryHandlerFactory.getInstance().getRepositoryHandler(entry);
  OLATResource ores=entry.getOlatResource();
  if (!handler.readyToDelete(ores,ureq,wControl)) {
    return false;
  }
  deleteImage(entry);
  userCourseInformationsManager.deleteUserCourseInformations(entry);
  BookmarkManager.getInstance().deleteAllBookmarksFor(entry);
  CatalogManager.getInstance().resourceableDeleted(entry);
  entry=(RepositoryEntry)DBFactory.getInstance().loadObject(entry,true);
  logDebug(""String_Node_Str"" + entry);
  deleteRepositoryEntryAndBasesecurity(entry);
  handler.cleanupOnDelete(entry.getOlatResource());
  logDebug(""String_Node_Str"");
  return true;
}","/** 
 * clean up a repo entry with all children and associated data like bookmarks and user references to it
 * @param ureq
 * @param wControl
 * @param entry
 * @return FIXME: we need a delete method without ureq, wControl for manager use. In general, very bad idea to pass ureq and wControl down to the manger layer.
 */
public boolean deleteRepositoryEntryWithAllData(UserRequest ureq,WindowControl wControl,RepositoryEntry entry){
  logDebug(""String_Node_Str"" + entry);
  entry=(RepositoryEntry)DBFactory.getInstance().loadObject(entry,true);
  logDebug(""String_Node_Str"" + entry);
  logDebug(""String_Node_Str"" + entry.getOwnerGroup());
  RepositoryHandler handler=RepositoryHandlerFactory.getInstance().getRepositoryHandler(entry);
  OLATResource ores=entry.getOlatResource();
  deleteBGcontext(ores);
  if (!handler.readyToDelete(ores,ureq,wControl)) {
    return false;
  }
  deleteImage(entry);
  userCourseInformationsManager.deleteUserCourseInformations(entry);
  BookmarkManager.getInstance().deleteAllBookmarksFor(entry);
  CatalogManager.getInstance().resourceableDeleted(entry);
  entry=(RepositoryEntry)DBFactory.getInstance().loadObject(entry,true);
  handler.cleanupOnDelete(entry.getOlatResource());
  logDebug(""String_Node_Str"" + entry);
  deleteRepositoryEntryAndBasesecurity(entry);
  logDebug(""String_Node_Str"");
  return true;
}"
69910,"/** 
 * @param addedEntry
 */
public void deleteRepositoryEntryAndBasesecurity(RepositoryEntry entry){
  entry=(RepositoryEntry)DBFactory.getInstance().loadObject(entry,true);
  DBFactory.getInstance().deleteObject(entry);
  OLATResourceManager.getInstance().deleteOLATResourceable(entry);
  SecurityGroup ownerGroup=entry.getOwnerGroup();
  if (ownerGroup != null) {
    Tracing.logDebug(""String_Node_Str"" + ownerGroup,this.getClass());
    BaseSecurityManager.getInstance().deleteSecurityGroup(ownerGroup);
    OLATResourceManager.getInstance().deleteOLATResourceable(ownerGroup);
  }
  SecurityGroup participantGroup=entry.getParticipantGroup();
  if (participantGroup != null) {
    logDebug(""String_Node_Str"" + participantGroup);
    BaseSecurityManager.getInstance().deleteSecurityGroup(participantGroup);
    OLATResourceManager.getInstance().deleteOLATResourceable(participantGroup);
  }
  SecurityGroup tutorGroup=entry.getTutorGroup();
  if (tutorGroup != null) {
    logDebug(""String_Node_Str"" + tutorGroup);
    BaseSecurityManager.getInstance().deleteSecurityGroup(tutorGroup);
    OLATResourceManager.getInstance().deleteOLATResourceable(tutorGroup);
  }
  deleteImage(entry);
}","/** 
 * @param addedEntry
 */
public void deleteRepositoryEntryAndBasesecurity(RepositoryEntry entry){
  entry=(RepositoryEntry)DBFactory.getInstance().loadObject(entry,true);
  BaseSecurityManager.getInstance().deletePolicies(entry.getOlatResource());
  DBFactory.getInstance().deleteObject(entry);
  OLATResourceManager.getInstance().deleteOLATResourceable(entry);
  SecurityGroup ownerGroup=entry.getOwnerGroup();
  if (ownerGroup != null) {
    Tracing.logDebug(""String_Node_Str"" + ownerGroup,this.getClass());
    BaseSecurityManager.getInstance().deleteSecurityGroup(ownerGroup);
    OLATResourceManager.getInstance().deleteOLATResourceable(ownerGroup);
  }
  SecurityGroup participantGroup=entry.getParticipantGroup();
  if (participantGroup != null) {
    logDebug(""String_Node_Str"" + participantGroup);
    BaseSecurityManager.getInstance().deleteSecurityGroup(participantGroup);
    OLATResourceManager.getInstance().deleteOLATResourceable(participantGroup);
  }
  SecurityGroup tutorGroup=entry.getTutorGroup();
  if (tutorGroup != null) {
    logDebug(""String_Node_Str"" + tutorGroup);
    BaseSecurityManager.getInstance().deleteSecurityGroup(tutorGroup);
    OLATResourceManager.getInstance().deleteOLATResourceable(tutorGroup);
  }
  deleteImage(entry);
}"
69911,"@Test public void testBasicSecurityPutCall() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  GroupVO vo=new GroupVO();
  vo.setName(""String_Node_Str"");
  vo.setDescription(""String_Node_Str"");
  vo.setMinParticipants(new Integer(-1));
  vo.setMaxParticipants(new Integer(-1));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getResourceableId() + ""String_Node_Str"").build();
  HttpPut method=conn.createPut(request,MediaType.APPLICATION_JSON,true);
  conn.addJsonEntity(method,vo);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertEquals(401,response.getStatusLine().getStatusCode());
}","@Test public void testBasicSecurityPutCall() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  GroupVO vo=new GroupVO();
  vo.setName(""String_Node_Str"");
  vo.setDescription(""String_Node_Str"");
  vo.setMinParticipants(new Integer(-1));
  vo.setMaxParticipants(new Integer(-1));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getOlatResource().getResourceableId() + ""String_Node_Str"").build();
  HttpPut method=conn.createPut(request,MediaType.APPLICATION_JSON,true);
  conn.addJsonEntity(method,vo);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertEquals(401,response.getStatusLine().getStatusCode());
}"
69912,"@Test public void testUpdateCourseGroup() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  GroupVO vo=new GroupVO();
  vo.setKey(g1.getKey());
  vo.setName(""String_Node_Str"");
  vo.setDescription(""String_Node_Str"");
  vo.setMinParticipants(g1.getMinParticipants());
  vo.setMaxParticipants(g1.getMaxParticipants());
  vo.setType(g1.getType());
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getResourceableId() + ""String_Node_Str""+ g1.getKey()).build();
  HttpPost method=conn.createPost(request,MediaType.APPLICATION_JSON,true);
  conn.addJsonEntity(method,vo);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertTrue(response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 201);
  BusinessGroup bg=businessGroupService.loadBusinessGroup(g1.getKey());
  assertNotNull(bg);
  assertEquals(bg.getKey(),vo.getKey());
  assertEquals(""String_Node_Str"",bg.getName());
  assertEquals(""String_Node_Str"",bg.getDescription());
}","@Test public void testUpdateCourseGroup() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  GroupVO vo=new GroupVO();
  vo.setKey(g1.getKey());
  vo.setName(""String_Node_Str"");
  vo.setDescription(""String_Node_Str"");
  vo.setMinParticipants(g1.getMinParticipants());
  vo.setMaxParticipants(g1.getMaxParticipants());
  vo.setType(g1.getType());
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getOlatResource().getResourceableId() + ""String_Node_Str""+ g1.getKey()).build();
  HttpPost method=conn.createPost(request,MediaType.APPLICATION_JSON,true);
  conn.addJsonEntity(method,vo);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertTrue(response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 201);
  BusinessGroup bg=businessGroupService.loadBusinessGroup(g1.getKey());
  assertNotNull(bg);
  assertEquals(bg.getKey(),vo.getKey());
  assertEquals(""String_Node_Str"",bg.getName());
  assertEquals(""String_Node_Str"",bg.getDescription());
}"
69913,"@Test public void testDeleteCourseGroup() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getResourceableId() + ""String_Node_Str""+ g1.getKey()).build();
  HttpDelete method=conn.createDelete(request,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertEquals(200,response.getStatusLine().getStatusCode());
  BusinessGroup bg=businessGroupService.loadBusinessGroup(g1.getKey());
  assertNull(bg);
}","@Test public void testDeleteCourseGroup() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getOlatResource().getResourceableId() + ""String_Node_Str""+ g1.getKey()).build();
  HttpDelete method=conn.createDelete(request,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertEquals(200,response.getStatusLine().getStatusCode());
  BusinessGroup bg=businessGroupService.loadBusinessGroup(g1.getKey());
  assertNull(bg);
}"
69914,"@Test public void testBasicSecurityDeleteCall() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getResourceableId() + ""String_Node_Str""+ g2.getKey()).build();
  HttpDelete method=conn.createDelete(request,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertEquals(401,response.getStatusLine().getStatusCode());
}","@Test public void testBasicSecurityDeleteCall() throws IOException, URISyntaxException {
  assertTrue(conn.login(""String_Node_Str"",""String_Node_Str""));
  URI request=UriBuilder.fromUri(getContextURI()).path(""String_Node_Str"" + courseRepoEntry.getOlatResource().getResourceableId() + ""String_Node_Str""+ g2.getKey()).build();
  HttpDelete method=conn.createDelete(request,MediaType.APPLICATION_JSON,true);
  HttpResponse response=conn.execute(method);
  EntityUtils.consume(response.getEntity());
  assertEquals(401,response.getStatusLine().getStatusCode());
}"
69915,"/** 
 * Lists all learn groups of the specified course.
 * @response.representation.200.qname {http://www.example.com}groupVO
 * @response.representation.200.mediaType application/xml, application/json
 * @response.representation.200.doc The list of all learning group of the course200.example  {@link org.olat.restapi.support.vo.Examples#SAMPLE_GROUPVOes}
 * @response.representation.404.doc The context of the group not found
 * @param request The HTTP request
 * @return
 */
@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response getGroupList(@Context HttpServletRequest request){
  CourseGroupManager groupManager=PersistingCourseGroupManager.getInstance(course);
  List<BusinessGroup> groups=groupManager.getAllBusinessGroups();
  int count=0;
  GroupVO[] vos=new GroupVO[groups.size()];
  for (  BusinessGroup group : groups) {
    vos[count++]=ObjectFactory.get(group);
  }
  return Response.ok(vos).build();
}","/** 
 * Lists all learn groups of the specified course.
 * @response.representation.200.qname {http://www.example.com}groupVO
 * @response.representation.200.mediaType application/xml, application/json
 * @response.representation.200.doc The list of all learning group of the course200.example  {@link org.olat.restapi.support.vo.Examples#SAMPLE_GROUPVOes}
 * @response.representation.404.doc The context of the group not found
 * @param request The HTTP request
 * @return
 */
@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response getGroupList(@Context HttpServletRequest request){
  BusinessGroupService bgs=CoreSpringFactory.getImpl(BusinessGroupService.class);
  SearchBusinessGroupParams params=new SearchBusinessGroupParams();
  List<BusinessGroup> groups=bgs.findBusinessGroups(params,course,0,-1);
  int count=0;
  GroupVO[] vos=new GroupVO[groups.size()];
  for (  BusinessGroup group : groups) {
    vos[count++]=ObjectFactory.get(group);
  }
  return Response.ok(vos).build();
}"
69916,"@Path(""String_Node_Str"") public CourseGroupWebService getCourseGroupWebService(@PathParam(""String_Node_Str"") Long courseId){
  OLATResource ores=getCourseOLATResource(courseId);
  return new CourseGroupWebService(ores);
}","@Path(""String_Node_Str"") public CourseGroupWebService getCourseGroupWebService(@PathParam(""String_Node_Str"") Long courseId){
  OLATResource ores=getCourseOLATResource(courseId);
  if (ores != null) {
    return new CourseGroupWebService(ores);
  }
  return null;
}"
69917,"public void setDatedObjects(List<? extends Dated> datedObjects){
  model.setDatedObjects(datedObjects);
  createLinks();
}","/** 
 * Method to re-initialize the year navigation with other dated objects. The model, links etc are all discarded.
 * @param datedObjects the new objects for the navigation
 */
public void setDatedObjects(List<? extends Dated> datedObjects){
  mainVC=createVelocityContainer(""String_Node_Str"");
  next=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",null,Link.NONTRANSLATED,mainVC,this);
  next.setCustomEnabledLinkCSS(""String_Node_Str"");
  next.setCustomDisabledLinkCSS(""String_Node_Str"");
  next.setTooltip(translate(""String_Node_Str""),false);
  previous=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",null,Link.NONTRANSLATED,mainVC,this);
  previous.setCustomEnabledLinkCSS(""String_Node_Str"");
  previous.setCustomDisabledLinkCSS(""String_Node_Str"");
  previous.setTooltip(translate(""String_Node_Str""),false);
  if (mainPanel == null) {
    mainPanel=this.putInitialPanel(mainVC);
  }
 else {
    mainPanel.setContent(mainVC);
  }
  model=new YearNavigationModel(datedObjects,getLocale());
  allObjects=datedObjects;
  showAll=true;
  createLinks();
}"
69918,"/** 
 * Constructor based on a list of <code>Dated</code> objects.
 * @param ureq
 * @param control
 * @param fallBackTranslator
 * @param datedObjects
 */
public YearNavigationController(UserRequest ureq,WindowControl control,Translator fallBackTranslator,List<? extends Dated> datedObjects){
  super(ureq,control,fallBackTranslator);
  model=new YearNavigationModel(datedObjects,ureq.getLocale());
  allObjects=datedObjects;
  showAll=true;
  mainVC=createVelocityContainer(""String_Node_Str"");
  next=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",null,Link.NONTRANSLATED,mainVC,this);
  next.setCustomEnabledLinkCSS(""String_Node_Str"");
  next.setCustomDisabledLinkCSS(""String_Node_Str"");
  next.setTooltip(translate(""String_Node_Str""),false);
  previous=LinkFactory.createCustomLink(""String_Node_Str"",""String_Node_Str"",null,Link.NONTRANSLATED,mainVC,this);
  previous.setCustomEnabledLinkCSS(""String_Node_Str"");
  previous.setCustomDisabledLinkCSS(""String_Node_Str"");
  previous.setTooltip(translate(""String_Node_Str""),false);
  createLinks();
  this.putInitialPanel(mainVC);
}","/** 
 * Constructor based on a list of <code>Dated</code> objects.
 * @param ureq
 * @param control
 * @param fallBackTranslator
 * @param datedObjects
 */
public YearNavigationController(UserRequest ureq,WindowControl control,Translator fallBackTranslator,List<? extends Dated> datedObjects){
  super(ureq,control,fallBackTranslator);
  setDatedObjects(datedObjects);
}"
69919,"@Ignore @Test @RunAsClient public void checkCreateSubcategory() throws URISyntaxException, IOException {
  RepositoryEntryVO[] wikiVO=new RepositoryEntryVO[COURSES];
  for (int i=0; i < COURSES; i++) {
    wikiVO[i]=functionalVOUtil.importWiki(deploymentUrl);
  }
  CourseVO[] courseVO=new CourseVO[COURSES];
  for (int i=0; i < COURSES; i++) {
    courseVO[i]=functionalVOUtil.importEmptyCourse(deploymentUrl);
  }
  for (int i=0; i < SUBCATEGORY_PATHS.length; i++) {
    String currentPath=SUBCATEGORY_PATHS[i];
    String currentName=currentPath.substring(currentPath.lastIndexOf('/') + 1);
    String currentDescription=SUBCATEGORY_DESCRIPTIONS[i];
    Assert.assertTrue(functionalRepositorySiteUtil.createCatalogSubcategory(browser,currentPath,currentName,currentDescription));
  }
  for (int i=0; i < COURSES; i++) {
    Assert.assertTrue(functionalRepositorySiteUtil.openCourse(browser,courseVO[i].getRepoEntryKey()));
    Assert.assertTrue(functionalCourseUtil.openCourseEditor(browser));
    String currentPath=SUBCATEGORY_PATHS[i];
    String currentName=currentPath.substring(currentPath.lastIndexOf('/') + 1);
    Assert.assertTrue(functionalCourseUtil.createWiki(browser,currentName + ""String_Node_Str"",""String_Node_Str"" + currentName + ""String_Node_Str""));
    Assert.assertTrue(functionalCourseUtil.chooseWiki(browser,wikiVO[i].getKey()));
    Assert.assertTrue(functionalCourseUtil.publishEntireCourse(browser,null,SUBCATEGORY_PATHS[i]));
    Assert.assertTrue(functionalCourseUtil.closeActiveTab(browser));
  }
  Assert.assertTrue(functionalUtil.openSite(browser,FunctionalUtil.OlatSite.LEARNING_RESOURCES));
  Assert.assertTrue(functionalRepositorySiteUtil.openActionByMenuTree(browser,RepositorySiteAction.CATALOG));
  for (int i=0; i < COURSES; i++) {
    String[] selectors=functionalRepositorySiteUtil.createCatalogSelectors(SUBCATECORY_PATHS_INCLUDING_RESOURCE[i]);
    for (    String currentSelector : selectors) {
      StringBuffer selectorBuffer=new StringBuffer();
      selectorBuffer.append(""String_Node_Str"").append(functionalRepositorySiteUtil.getCourseModuleIconCss()).append(""String_Node_Str"");
      browser.click(selectorBuffer.toString());
      functionalUtil.waitForPageToLoad(browser);
      String businessPath0=functionalUtil.currentBusinessPath(browser);
      functionalRepositorySiteUtil.openCourse(browser,courseVO[i].getRepoEntryKey());
      String businessPath1=functionalUtil.currentBusinessPath(browser);
      Assert.assertEquals(businessPath1,businessPath0);
    }
  }
}","@Ignore @Test @RunAsClient public void checkCreateSubcategory() throws URISyntaxException, IOException {
  RepositoryEntryVO[] wikiVO=new RepositoryEntryVO[COURSES];
  for (int i=0; i < COURSES; i++) {
    wikiVO[i]=functionalVOUtil.importWiki(deploymentUrl);
  }
  CourseVO[] courseVO=new CourseVO[COURSES];
  for (int i=0; i < COURSES; i++) {
    courseVO[i]=functionalVOUtil.importEmptyCourse(deploymentUrl);
  }
  functionalUtil.login(browser);
  for (int i=0; i < SUBCATEGORY_PATHS.length; i++) {
    String currentPath=SUBCATEGORY_PATHS[i];
    String currentName=currentPath.substring(currentPath.lastIndexOf('/') + 1);
    String currentDescription=SUBCATEGORY_DESCRIPTIONS[i];
    Assert.assertTrue(functionalRepositorySiteUtil.createCatalogSubcategory(browser,currentPath.substring(0,currentPath.lastIndexOf('/')),currentName,currentDescription));
  }
  for (int i=0; i < COURSES; i++) {
    Assert.assertTrue(functionalRepositorySiteUtil.openCourse(browser,courseVO[i].getRepoEntryKey()));
    Assert.assertTrue(functionalCourseUtil.openCourseEditor(browser));
    String currentPath=SUBCATEGORY_PATHS[i];
    String currentName=currentPath.substring(currentPath.lastIndexOf('/') + 1);
    Assert.assertTrue(functionalCourseUtil.createCourseNode(browser,CourseNodeAlias.WIKI,""String_Node_Str"",currentName + ""String_Node_Str"",""String_Node_Str"" + currentName + ""String_Node_Str"",0));
    Assert.assertTrue(functionalCourseUtil.chooseWiki(browser,wikiVO[i].getKey()));
    Assert.assertTrue(functionalCourseUtil.publishEntireCourse(browser,null,SUBCATEGORY_PATHS[i]));
    Assert.assertTrue(functionalCourseUtil.closeActiveTab(browser));
  }
  Assert.assertTrue(functionalUtil.openSite(browser,FunctionalUtil.OlatSite.LEARNING_RESOURCES));
  Assert.assertTrue(functionalRepositorySiteUtil.openActionByMenuTree(browser,RepositorySiteAction.CATALOG));
  for (int i=0; i < COURSES; i++) {
    String[] selectors=functionalRepositorySiteUtil.createCatalogSelectors(SUBCATECORY_PATHS_INCLUDING_RESOURCE[i]);
    for (    String currentSelector : selectors) {
      StringBuffer selectorBuffer=new StringBuffer();
      selectorBuffer.append(""String_Node_Str"").append(functionalRepositorySiteUtil.getCourseModuleIconCss()).append(""String_Node_Str"");
      browser.click(selectorBuffer.toString());
      functionalUtil.waitForPageToLoad(browser);
      String businessPath0=functionalUtil.currentBusinessPath(browser);
      functionalRepositorySiteUtil.openCourse(browser,courseVO[i].getRepoEntryKey());
      String businessPath1=functionalUtil.currentBusinessPath(browser);
      Assert.assertEquals(businessPath1,businessPath0);
    }
  }
}"
69920,"/** 
 * @param browser
 * @param access
 * @param catalog
 * @return true on successPublishes the entire course.
 */
public boolean publishEntireCourse(Selenium browser,AccessSettings access,String catalog){
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCourseEditorPublishCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCourseEditorPublishWizardSelectAllCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  functionalUtil.clickWizardNext(browser);
  functionalUtil.waitForPageToLoadElement(browser,""String_Node_Str"" + getCourseEditorPublishWizardAccessId());
  if (access != null) {
    functionalUtil.selectOption(browser,getCourseEditorPublishWizardAccessId(),access.getAccessValue());
  }
  functionalUtil.clickWizardNext(browser);
  functionalUtil.waitForPageToLoadElement(browser,""String_Node_Str"" + getCourseEditorPublishWizardCatalogId());
  if (catalog != null) {
    functionalUtil.selectOption(browser,getCourseEditorPublishWizardCatalogId(),ADD_TO_CATALOG_YES_VALUE);
    String[] catalogSelectors=createCatalogSelectors(catalog);
    for (    String catalogSelector : catalogSelectors) {
      functionalUtil.waitForPageToLoadElement(browser,catalogSelector);
      browser.click(catalogSelector);
    }
  }
 else {
    functionalUtil.selectOption(browser,getCourseEditorPublishWizardCatalogId(),ADD_TO_CATALOG_NO_VALUE);
  }
  functionalUtil.clickWizardFinish(browser);
  functionalUtil.waitForPageToUnloadElement(browser,""String_Node_Str"" + getCourseEditorPublishWizardCatalogId());
  return (true);
}","/** 
 * @param browser
 * @param access
 * @param catalog
 * @return true on successPublishes the entire course.
 */
public boolean publishEntireCourse(Selenium browser,AccessSettings access,String catalog){
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCourseEditorPublishCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCourseEditorPublishWizardSelectAllCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  functionalUtil.clickWizardNext(browser);
  functionalUtil.waitForPageToLoadElement(browser,""String_Node_Str"" + getCourseEditorPublishWizardAccessId());
  if (access != null) {
    functionalUtil.selectOption(browser,getCourseEditorPublishWizardAccessId(),access.getAccessValue());
  }
  functionalUtil.clickWizardNext(browser);
  functionalUtil.waitForPageToLoadElement(browser,""String_Node_Str"" + getCourseEditorPublishWizardCatalogId());
  if (catalog != null) {
    functionalUtil.selectOption(browser,getCourseEditorPublishWizardCatalogId(),ADD_TO_CATALOG_YES_VALUE);
    selectorBuffer=new StringBuffer();
    selectorBuffer.append(""String_Node_Str"").append(getAddToCatalogCss()).append(""String_Node_Str"");
    browser.click(selectorBuffer.toString());
    String[] catalogSelectors=createCatalogSelectors(catalog);
    for (    String catalogSelector : catalogSelectors) {
      functionalUtil.waitForPageToLoadElement(browser,catalogSelector);
      browser.click(catalogSelector);
    }
    selectorBuffer=new StringBuffer();
    selectorBuffer.append(""String_Node_Str"").append(getCatalogCss()).append(""String_Node_Str"").append(functionalUtil.getButtonDirtyCss()).append(""String_Node_Str"");
    functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
    browser.click(selectorBuffer.toString());
    functionalUtil.waitForPageToUnloadElement(browser,selectorBuffer.toString());
  }
 else {
    functionalUtil.selectOption(browser,getCourseEditorPublishWizardCatalogId(),ADD_TO_CATALOG_NO_VALUE);
  }
  functionalUtil.clickWizardFinish(browser);
  functionalUtil.waitForPageToUnloadElement(browser,""String_Node_Str"" + getCourseEditorPublishWizardCatalogId());
  return (true);
}"
69921,"public FunctionalCourseUtil(FunctionalUtil functionalUtil,FunctionalRepositorySiteUtil functionalRepositorySiteUtil){
  this.functionalUtil=functionalUtil;
  this.functionalRepositorySiteUtil=functionalRepositorySiteUtil;
  setCourseRunCss(COURSE_RUN_CSS);
  setCourseOpenEditorCss(COURSE_OPEN_EDITOR_CSS);
  setCourseTabActiveCss(COURSE_TAB_ACTIVE_CSS);
  setCourseTabCloseCss(COURSE_TAB_CLOSE_CSS);
  setCourseEditorNodeLinksId(COURSE_EDITOR_NODE_LINKS_ID);
  setCourseEditorPublishCss(COURSE_EDITOR_PUBLISH_CSS);
  setCourseEditorPublishWizardSelectAllCss(COURSE_EDITOR_PUBLISH_WIZARD_SELECT_ALL_CSS);
  setCourseEditorPublishWizardAccessId(COURSE_EDITOR_PUBLISH_WIZARD_ACCESS_ID);
  setCourseEditorPublishWizardCatalogId(COURSE_EDITOR_PUBLISH_WIZARD_CATALOG_ID);
  setCatalogSubcategoryIconCss(CATALOG_SUBCATEGORY_ICON_CSS);
  setCourseEditorOverviewRadioGroupCss(COURSE_EDITOR_OVERVIEW_RADIO_GROUP_CSS);
  setCourseEditorInsertContentCss(COURSE_EDITOR_INSERT_CONTENT_CSS);
  setCreateCourseNodeTargetPositionItemCss(CREATE_COURSE_NODE_TARGET_POSITION_ITEM_CSS);
  setCourseEditorChooseOverviewFileCss(COURSE_EDITOR_CHOOSE_OVERVIEW_FILE_CSS);
  setCourseEditorUploadOverviewFileCss(COURSE_EDITOR_UPLOAD_OVERVIEW_FILE_CSS);
  setEportfolioAddCss(EPORTFOLIO_ADD_CSS);
  setStructureIconCss(STRUCTURE_ICON_CSS);
  setForumIconCss(FORUM_ICON_CSS);
  setBlogIconCss(BLOG_ICON_CSS);
  setForumToolbarCss(FORUM_TOOLBAR_CSS);
  setForumThreadNewCss(FORUM_THREAD_NEW_CSS);
  setForumArchiveCss(FORUM_ARCHIVE_CSS);
  setForumFilterCss(FORUM_FILTER_CSS);
  setWikiCreateArticleCss(WIKI_CREATE_ARTICLE_CSS);
  setWikiArticleBoxCss(WIKI_ARTICLE_BOX_CSS);
  setWikiEditFormWrapperCss(WIKI_EDIT_FORM_WRAPPER_CSS);
  setBlogCreateEntryCss(BLOG_CREATE_ENTRY_CSS);
  setBlogFormCss(BLOG_FORM_CSS);
  setTestChooseRepositoryFileCss(TEST_CHOOSE_REPOSITORY_FILE_CSS);
  setCpChooseRepositoryFileCss(CP_CHOOSE_REPOSITORY_FILE_CSS);
  setWikiChooseRepositoryFileCss(WIKI_CHOOSE_REPOSITORY_FILE_CSS);
  setFeedChooseRepositoryFileCss(FEED_CHOOSE_REPOSITORY_FILE_CSS);
  setMapChooseRepositoryFileCss(MAP_CHOOSE_REPOSITORY_FILE_CSS);
  setRepositoryPopupCss(REPOSITORY_POPUP_CSS);
  setRepositoryPopupCreateResourceCss(REPOSITORY_POPUP_CREATE_RESOURCE_CSS);
  setRepositoryPopupImportResourceCss(REPOSITORY_POPUP_IMPORT_RESOURCE_CSS);
  setRepositoryPopupAllResourcesCss(REPOSITORY_POPUP_ALL_RESOURCES_CSS);
  setRepositoryPopupMyResourcesCss(REPOSITORY_POPUP_MY_RESOURCES_CSS);
  setRepositoryPopupSearchResourcesCss(REPOSITORY_POPUP_SEARCH_RESOURCES_CSS);
  setMapEditCss(MAP_EDIT_CSS);
  setBlogNoPostsCss(BLOG_NO_POSTS_CSS);
  setPodcastNoEpisodesCss(PODCAST_NO_EPISODES_CSS);
}","public FunctionalCourseUtil(FunctionalUtil functionalUtil,FunctionalRepositorySiteUtil functionalRepositorySiteUtil){
  this.functionalUtil=functionalUtil;
  this.functionalRepositorySiteUtil=functionalRepositorySiteUtil;
  setCourseRunCss(COURSE_RUN_CSS);
  setCourseOpenEditorCss(COURSE_OPEN_EDITOR_CSS);
  setCourseTabActiveCss(COURSE_TAB_ACTIVE_CSS);
  setCourseTabCloseCss(COURSE_TAB_CLOSE_CSS);
  setCourseEditorNodeLinksId(COURSE_EDITOR_NODE_LINKS_ID);
  setCourseEditorPublishCss(COURSE_EDITOR_PUBLISH_CSS);
  setCourseEditorPublishWizardSelectAllCss(COURSE_EDITOR_PUBLISH_WIZARD_SELECT_ALL_CSS);
  setCourseEditorPublishWizardAccessId(COURSE_EDITOR_PUBLISH_WIZARD_ACCESS_ID);
  setCourseEditorPublishWizardCatalogId(COURSE_EDITOR_PUBLISH_WIZARD_CATALOG_ID);
  setCatalogSubcategoryIconCss(CATALOG_SUBCATEGORY_ICON_CSS);
  setAddToCatalogCss(ADD_TO_CATALOG_CSS);
  setCatalogCss(CATALOG_CSS);
  setCourseEditorOverviewRadioGroupCss(COURSE_EDITOR_OVERVIEW_RADIO_GROUP_CSS);
  setCourseEditorInsertContentCss(COURSE_EDITOR_INSERT_CONTENT_CSS);
  setCreateCourseNodeTargetPositionItemCss(CREATE_COURSE_NODE_TARGET_POSITION_ITEM_CSS);
  setCourseEditorChooseOverviewFileCss(COURSE_EDITOR_CHOOSE_OVERVIEW_FILE_CSS);
  setCourseEditorUploadOverviewFileCss(COURSE_EDITOR_UPLOAD_OVERVIEW_FILE_CSS);
  setEportfolioAddCss(EPORTFOLIO_ADD_CSS);
  setStructureIconCss(STRUCTURE_ICON_CSS);
  setForumIconCss(FORUM_ICON_CSS);
  setBlogIconCss(BLOG_ICON_CSS);
  setForumToolbarCss(FORUM_TOOLBAR_CSS);
  setForumThreadNewCss(FORUM_THREAD_NEW_CSS);
  setForumArchiveCss(FORUM_ARCHIVE_CSS);
  setForumFilterCss(FORUM_FILTER_CSS);
  setWikiCreateArticleCss(WIKI_CREATE_ARTICLE_CSS);
  setWikiArticleBoxCss(WIKI_ARTICLE_BOX_CSS);
  setWikiEditFormWrapperCss(WIKI_EDIT_FORM_WRAPPER_CSS);
  setBlogCreateEntryCss(BLOG_CREATE_ENTRY_CSS);
  setBlogFormCss(BLOG_FORM_CSS);
  setTestChooseRepositoryFileCss(TEST_CHOOSE_REPOSITORY_FILE_CSS);
  setCpChooseRepositoryFileCss(CP_CHOOSE_REPOSITORY_FILE_CSS);
  setWikiChooseRepositoryFileCss(WIKI_CHOOSE_REPOSITORY_FILE_CSS);
  setFeedChooseRepositoryFileCss(FEED_CHOOSE_REPOSITORY_FILE_CSS);
  setMapChooseRepositoryFileCss(MAP_CHOOSE_REPOSITORY_FILE_CSS);
  setRepositoryPopupCss(REPOSITORY_POPUP_CSS);
  setRepositoryPopupCreateResourceCss(REPOSITORY_POPUP_CREATE_RESOURCE_CSS);
  setRepositoryPopupImportResourceCss(REPOSITORY_POPUP_IMPORT_RESOURCE_CSS);
  setRepositoryPopupAllResourcesCss(REPOSITORY_POPUP_ALL_RESOURCES_CSS);
  setRepositoryPopupMyResourcesCss(REPOSITORY_POPUP_MY_RESOURCES_CSS);
  setRepositoryPopupSearchResourcesCss(REPOSITORY_POPUP_SEARCH_RESOURCES_CSS);
  setMapEditCss(MAP_EDIT_CSS);
  setBlogNoPostsCss(BLOG_NO_POSTS_CSS);
  setPodcastNoEpisodesCss(PODCAST_NO_EPISODES_CSS);
}"
69922,"private boolean chooseRepositoryResource(Selenium browser,String chooseRepositoryCss,long key){
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(chooseRepositoryCss).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  functionalUtil.waitForPageToLoad(browser);
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getRepositoryPopupSearchResourcesCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(FunctionalRepositorySiteUtil.SearchField.ID.getEntryCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.type(selectorBuffer.toString(),Long.toString(key));
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getRepositoryPopupCss()).append(""String_Node_Str"").append(functionalUtil.getButtonCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(FunctionalRepositorySiteUtil.SearchField.ID.getEntryCss()).append(""String_Node_Str"").append(functionalUtil.getTableFirstChildCss()).append(""String_Node_Str"").append(functionalUtil.getTableLastChildCss()).append(""String_Node_Str"").append(functionalUtil.getTableLastChildCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  return (true);
}","private boolean chooseRepositoryResource(Selenium browser,String chooseRepositoryCss,long key){
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(chooseRepositoryCss).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  functionalUtil.waitForPageToLoad(browser);
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getRepositoryPopupSearchResourcesCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(FunctionalRepositorySiteUtil.SearchField.ID.getEntryCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.type(selectorBuffer.toString(),Long.toString(key));
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getRepositoryPopupCss()).append(""String_Node_Str"").append(functionalUtil.getButtonCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getRepositoryPopupCss()).append(""String_Node_Str"").append(functionalUtil.getTableFirstChildCss()).append(""String_Node_Str"").append(functionalUtil.getTableLastChildCss()).append(""String_Node_Str"").append(functionalUtil.getTableLastChildCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  functionalUtil.waitForPageToUnloadElement(browser,selectorBuffer.toString());
  return (true);
}"
69923,"/** 
 * @param path
 * @return Creates xpath selectors to select catalog within the tree.
 */
public String[] createCatalogSelectors(String path){
  if (path == null || !path.startsWith(""String_Node_Str"")) {
    return (null);
  }
  Matcher categoryMatcher=categoryPattern.matcher(path);
  ArrayList<String> selectors=new ArrayList<String>();
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(functionalUtil.getTreeNodeAnchorCss()).append(""String_Node_Str"");
  selectors.add(selectorBuffer.toString());
  while (categoryMatcher.find()) {
    StringBuffer selector=new StringBuffer();
    selector.append(""String_Node_Str"").append(functionalUtil.getTreeNodeAnchorCss()).append(""String_Node_Str"").append(categoryMatcher.group(1)).append(""String_Node_Str"");
    selectors.add(selector.toString());
  }
  return ((String[])selectors.toArray());
}","/** 
 * @param path
 * @return Creates xpath selectors to select catalog within the tree.
 */
public String[] createCatalogSelectors(String path){
  if (path == null || !path.startsWith(""String_Node_Str"")) {
    return (null);
  }
  Matcher categoryMatcher=categoryPattern.matcher(path);
  ArrayList<String> selectors=new ArrayList<String>();
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(functionalUtil.getTreeNodeAnchorCss()).append(""String_Node_Str"");
  selectors.add(selectorBuffer.toString());
  while (categoryMatcher.find()) {
    StringBuffer selector=new StringBuffer();
    selector.append(""String_Node_Str"").append(functionalUtil.getTreeNodeAnchorCss()).append(""String_Node_Str"").append(categoryMatcher.group(1)).append(""String_Node_Str"");
    selectors.add(selector.toString());
  }
  return (selectors.toArray(new String[selectors.size()]));
}"
69924,"/** 
 * @param browser
 * @param path
 * @param name
 * @param description
 * @return Adds a subcategory to catalog on the specified path.
 */
public boolean createCatalogSubcategory(Selenium browser,String path,String name,String description){
  if (!functionalUtil.openSite(browser,FunctionalUtil.OlatSite.LEARNING_RESOURCES)) {
    return (false);
  }
  if (!openActionByMenuTree(browser,RepositorySiteAction.CATALOG)) {
    return (false);
  }
  String[] selectors=createCatalogSelectors(path);
  for (  String currentSelector : selectors) {
    functionalUtil.waitForPageToLoadElement(browser,currentSelector);
    browser.click(currentSelector);
  }
  functionalUtil.waitForPageToUnloadElement(browser,selectors[selectors.length - 1]);
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCatalogAddSubcategoryCss()).append(""String_Node_Str"");
  browser.click(selectorBuffer.toString());
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCatalogAddSubcategoryPopupCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.type(selectorBuffer.toString(),name);
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCatalogAddSubcategoryPopupCss()).append(""String_Node_Str"");
  browser.type(selectorBuffer.toString(),description);
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCatalogAddSubcategoryPopupCss()).append(""String_Node_Str"").append(functionalUtil.getButtonDirtyCss()).append(""String_Node_Str"");
  browser.click(selectorBuffer.toString());
  functionalUtil.waitForPageToUnloadElement(browser,selectorBuffer.toString());
  return (true);
}","/** 
 * @param browser
 * @param path
 * @param name
 * @param description
 * @return Adds a subcategory to catalog on the specified path.
 */
public boolean createCatalogSubcategory(Selenium browser,String path,String name,String description){
  if (!functionalUtil.openSite(browser,FunctionalUtil.OlatSite.LEARNING_RESOURCES)) {
    return (false);
  }
  if (!openActionByMenuTree(browser,RepositorySiteAction.CATALOG)) {
    return (false);
  }
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCatalogNavigationCss()).append(""String_Node_Str"");
  if (browser.isElementPresent(selectorBuffer.toString())) {
    browser.click(selectorBuffer.toString());
  }
  String[] selectors=createCatalogSelectors(path);
  if (selectors != null) {
    for (    String currentSelector : selectors) {
      functionalUtil.waitForPageToLoadElement(browser,currentSelector);
      browser.click(currentSelector);
    }
    functionalUtil.waitForPageToUnloadElement(browser,selectors[selectors.length - 1]);
  }
  String selector=createCatalogSelector(name);
  if (browser.isElementPresent(selector)) {
    return (true);
  }
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCatalogAddSubcategoryCss()).append(""String_Node_Str"");
  browser.click(selectorBuffer.toString());
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCatalogAddSubcategoryPopupCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.type(selectorBuffer.toString(),name);
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCatalogAddSubcategoryPopupCss()).append(""String_Node_Str"");
  browser.type(selectorBuffer.toString(),description);
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCatalogAddSubcategoryPopupCss()).append(""String_Node_Str"").append(functionalUtil.getButtonDirtyCss()).append(""String_Node_Str"");
  browser.click(selectorBuffer.toString());
  functionalUtil.waitForPageToUnloadElement(browser,selectorBuffer.toString());
  return (true);
}"
69925,"public FunctionalRepositorySiteUtil(FunctionalUtil functionalUtil){
  setRepositoryPopupCss(REPOSITORY_POPUP_CSS);
  setRepositorySaveDetailsCss(REPOSITORY_SAVE_DETAILS_CSS);
  setRepositoryAddForwardCss(REPOSITORY_ADD_FORWARD_CSS);
  setRepositoryAddTemplateForwardCss(REPOSITORY_ADD_TEMPLATE_FORWARD_CSS);
  setCourseWizardPublishCheckbox(COURSE_WIZARD_PUBLISH_CHECKBOX);
  setCourseWizardAccessOptionId(COURSE_WIZARD_ACCESS_OPTION_ID);
  setRepositorySiteMenuTreeSelectedCss(REPOSITORY_SITE_MENU_TREE_SELECTED_CSS);
  setRepositorySiteCatalogCss(REPOSITORY_SITE_CATALOG_CSS);
  setRepositorySiteSearchFormCss(REPOSITORY_SITE_SEARCH_FORM_CSS);
  setRepositorySiteMyEntriesCss(REPOSITORY_SITE_MY_ENTRIES_CSS);
  setRepositorySiteMyCoursesCss(REPOSITORY_SITE_MY_COURSES_CSS);
  setRepositorySiteMySupervisedCoursesCss(REPOSITORY_SITE_MY_SUPERVISED_COURSES_CSS);
  setRepositorySiteCoursesCss(REPOSITORY_SITE_COURSES_CSS);
  setRepositorySiteCPLearningContentCss(REPOSITORY_SITE_CP_LEARNING_CONTENT_CSS);
  setRepositorySiteScormLearningContentCss(REPOSITORY_SITE_SCORM_LEARNING_CONTENT_CSS);
  setRepositorySiteWikisCss(REPOSITORY_SITE_WIKIS_CSS);
  setRepositorySitePodcastsCss(REPOSITORY_SITE_PODCASTS_CSS);
  setRepositorySiteBlogsCss(REPOSITORY_SITE_BLOGS_CSS);
  setRepositorySitePortfolioTemplatesCss(REPOSITORY_SITE_PORTFOLIO_TEMPLATES_CSS);
  setRepositorySiteTestsCss(REPOSITORY_SITE_TESTS_CSS);
  setRepositorySiteQuestionairesCss(REPOSITORY_SITE_QUESTIONAIRES_CSS);
  setRepositorySiteResourceFolderCss(REPOSITORY_SITE_RESOURCE_FOLDER_CSS);
  setRepositorySiteGlossaryCss(REPOSITORY_SITE_GLOSSARY_CSS);
  setCatalogAddSubcategoryCss(CATALOG_ADD_SUBCATEGORY);
  setCatalogAddLearningResourceCss(CATALOG_ADD_LEARNING_RESOURCE);
  setCatalogAddSubcategoryPopupCss(CATALOG_ADD_SUBCATEGORY_POPUP_CSS);
  setCatalogSubcategoryListCss(CATALOG_SUBCATEGORY_LIST_CSS);
  setCatalogSubcategoryIconCss(CATALOG_SUBCATEGORY_ICON_CSS);
  setCourseModuleIconCss(COURSE_MODULE_ICON_CSS);
  setImportCourseCss(IMPORT_COURSE_CSS);
  setImportCPLearningContentCss(IMPORT_CP_LEARNING_CONTENT_CSS);
  setImportScormCss(IMPORT_SCORM_CSS);
  setImportWikiCss(IMPORT_WIKI_CSS);
  setImportPodcastCss(IMPORT_PODCAST_CSS);
  setImportBlogCss(IMPORT_BLOG_CSS);
  setImportTestCss(IMPORT_TEST_CSS);
  setImportQuestionaireCss(IMPORT_QUESTIONAIRE_CSS);
  setImportGlossaryCss(IMPORT_GLOSSARY_CSS);
  setImportOtherCss(IMPORT_OTHER_CSS);
  setCreateCourseCss(CREATE_COURSE_CSS);
  setCreateCPLearningContentCss(CREATE_CP_LEARNING_CONTENT_CSS);
  setCreateWikiCss(CREATE_WIKI_CSS);
  setCreatePodcastCss(CREATE_PODCAST_CSS);
  setCreateBlogCss(CREATE_BLOG_CSS);
  setCreatePortfolioCss(CREATE_PORTFOLIO_CSS);
  setCreateTestCss(CREATE_TEST_CSS);
  setCreateQuestionaireCss(CREATE_QUESTIONAIRE_CSS);
  setCreateFolderCss(CREATE_FOLDER_CSS);
  setCreateGlossaryCss(CREATE_GLOSSARY_CSS);
  setToolboxContentCss(TOOLBOX_CONTENT_CSS);
  setToolboxCourseCss(TOOLBOX_COURSE_CSS);
  setToolboxContentPackageCss(TOOLBOX_CONTENT_PACKAGE_CSS);
  setToolboxWikiCss(TOOLBOX_WIKI_CSS);
  setToolboxPodcastCss(TOOLBOX_PODCAST_CSS);
  setToolboxBlogCss(TOOLBOX_BLOG_CSS);
  setToolboxPortfolioCss(TOOLBOX_PORTFOLIO_CSS);
  setToolboxIQTestCss(TOOLBOX_IQTEST_CSS);
  setToolboxQuestionnaireCss(TOOLBOX_QUESTIONNAIRE_CSS);
  setToolboxSharedfolderCss(TOOLBOX_SHAREDFOLDER_CSS);
  setToolboxGlossaryCss(TOOLBOX_GLOSSARY_CSS);
  setFunctionalUtil(functionalUtil);
}","public FunctionalRepositorySiteUtil(FunctionalUtil functionalUtil){
  setRepositoryPopupCss(REPOSITORY_POPUP_CSS);
  setRepositorySaveDetailsCss(REPOSITORY_SAVE_DETAILS_CSS);
  setRepositoryAddForwardCss(REPOSITORY_ADD_FORWARD_CSS);
  setRepositoryAddTemplateForwardCss(REPOSITORY_ADD_TEMPLATE_FORWARD_CSS);
  setCourseWizardPublishCheckbox(COURSE_WIZARD_PUBLISH_CHECKBOX);
  setCourseWizardAccessOptionId(COURSE_WIZARD_ACCESS_OPTION_ID);
  setRepositorySiteMenuTreeSelectedCss(REPOSITORY_SITE_MENU_TREE_SELECTED_CSS);
  setRepositorySiteCatalogCss(REPOSITORY_SITE_CATALOG_CSS);
  setRepositorySiteSearchFormCss(REPOSITORY_SITE_SEARCH_FORM_CSS);
  setRepositorySiteMyEntriesCss(REPOSITORY_SITE_MY_ENTRIES_CSS);
  setRepositorySiteMyCoursesCss(REPOSITORY_SITE_MY_COURSES_CSS);
  setRepositorySiteMySupervisedCoursesCss(REPOSITORY_SITE_MY_SUPERVISED_COURSES_CSS);
  setRepositorySiteCoursesCss(REPOSITORY_SITE_COURSES_CSS);
  setRepositorySiteCPLearningContentCss(REPOSITORY_SITE_CP_LEARNING_CONTENT_CSS);
  setRepositorySiteScormLearningContentCss(REPOSITORY_SITE_SCORM_LEARNING_CONTENT_CSS);
  setRepositorySiteWikisCss(REPOSITORY_SITE_WIKIS_CSS);
  setRepositorySitePodcastsCss(REPOSITORY_SITE_PODCASTS_CSS);
  setRepositorySiteBlogsCss(REPOSITORY_SITE_BLOGS_CSS);
  setRepositorySitePortfolioTemplatesCss(REPOSITORY_SITE_PORTFOLIO_TEMPLATES_CSS);
  setRepositorySiteTestsCss(REPOSITORY_SITE_TESTS_CSS);
  setRepositorySiteQuestionairesCss(REPOSITORY_SITE_QUESTIONAIRES_CSS);
  setRepositorySiteResourceFolderCss(REPOSITORY_SITE_RESOURCE_FOLDER_CSS);
  setRepositorySiteGlossaryCss(REPOSITORY_SITE_GLOSSARY_CSS);
  setCatalogNavigationCss(CATALOG_NAVIGATION_CSS);
  setCatalogAddSubcategoryCss(CATALOG_ADD_SUBCATEGORY);
  setCatalogAddLearningResourceCss(CATALOG_ADD_LEARNING_RESOURCE);
  setCatalogAddSubcategoryPopupCss(CATALOG_ADD_SUBCATEGORY_POPUP_CSS);
  setCatalogSubcategoryListCss(CATALOG_SUBCATEGORY_LIST_CSS);
  setCatalogSubcategoryIconCss(CATALOG_SUBCATEGORY_ICON_CSS);
  setCourseModuleIconCss(COURSE_MODULE_ICON_CSS);
  setImportCourseCss(IMPORT_COURSE_CSS);
  setImportCPLearningContentCss(IMPORT_CP_LEARNING_CONTENT_CSS);
  setImportScormCss(IMPORT_SCORM_CSS);
  setImportWikiCss(IMPORT_WIKI_CSS);
  setImportPodcastCss(IMPORT_PODCAST_CSS);
  setImportBlogCss(IMPORT_BLOG_CSS);
  setImportTestCss(IMPORT_TEST_CSS);
  setImportQuestionaireCss(IMPORT_QUESTIONAIRE_CSS);
  setImportGlossaryCss(IMPORT_GLOSSARY_CSS);
  setImportOtherCss(IMPORT_OTHER_CSS);
  setCreateCourseCss(CREATE_COURSE_CSS);
  setCreateCPLearningContentCss(CREATE_CP_LEARNING_CONTENT_CSS);
  setCreateWikiCss(CREATE_WIKI_CSS);
  setCreatePodcastCss(CREATE_PODCAST_CSS);
  setCreateBlogCss(CREATE_BLOG_CSS);
  setCreatePortfolioCss(CREATE_PORTFOLIO_CSS);
  setCreateTestCss(CREATE_TEST_CSS);
  setCreateQuestionaireCss(CREATE_QUESTIONAIRE_CSS);
  setCreateFolderCss(CREATE_FOLDER_CSS);
  setCreateGlossaryCss(CREATE_GLOSSARY_CSS);
  setToolboxContentCss(TOOLBOX_CONTENT_CSS);
  setToolboxCourseCss(TOOLBOX_COURSE_CSS);
  setToolboxContentPackageCss(TOOLBOX_CONTENT_PACKAGE_CSS);
  setToolboxWikiCss(TOOLBOX_WIKI_CSS);
  setToolboxPodcastCss(TOOLBOX_PODCAST_CSS);
  setToolboxBlogCss(TOOLBOX_BLOG_CSS);
  setToolboxPortfolioCss(TOOLBOX_PORTFOLIO_CSS);
  setToolboxIQTestCss(TOOLBOX_IQTEST_CSS);
  setToolboxQuestionnaireCss(TOOLBOX_QUESTIONNAIRE_CSS);
  setToolboxSharedfolderCss(TOOLBOX_SHAREDFOLDER_CSS);
  setToolboxGlossaryCss(TOOLBOX_GLOSSARY_CSS);
  setFunctionalUtil(functionalUtil);
}"
69926,"/** 
 * @param path
 * @return Creates xpath selectors to select catalog within the tree.
 */
public String[] createCatalogSelectors(String path){
  if (path == null || !path.startsWith(""String_Node_Str"")) {
    return (null);
  }
  Matcher categoryMatcher=categoryPattern.matcher(path);
  ArrayList<String> selectors=new ArrayList<String>();
  while (categoryMatcher.find()) {
    StringBuffer selector=new StringBuffer();
    selector.append(""String_Node_Str"").append(getCatalogSubcategoryListCss()).append(""String_Node_Str"").append(getCatalogSubcategoryIconCss()).append(""String_Node_Str"").append(categoryMatcher.group(1)).append(""String_Node_Str"");
    selectors.add(selector.toString());
  }
  return ((String[])selectors.toArray());
}","/** 
 * @param path
 * @return Creates xpath selectors to select catalog within the tree.
 */
public String[] createCatalogSelectors(String path){
  if (path == null || !path.startsWith(""String_Node_Str"")) {
    return (null);
  }
  Matcher categoryMatcher=categoryPattern.matcher(path);
  ArrayList<String> selectors=new ArrayList<String>();
  while (categoryMatcher.find()) {
    selectors.add(createCatalogSelector(categoryMatcher.group(1)));
  }
  return (selectors.toArray(new String[selectors.size()]));
}"
69927,"@Ignore @Test @RunAsClient public void checkCreateSubcategory() throws URISyntaxException, IOException {
  RepositoryEntryVO[] wikiVO=new RepositoryEntryVO[COURSES];
  for (int i=0; i < COURSES; i++) {
    wikiVO[i]=functionalVOUtil.importWiki(deploymentUrl);
  }
  CourseVO[] courseVO=new CourseVO[COURSES];
  for (int i=0; i < COURSES; i++) {
    courseVO[i]=functionalVOUtil.importEmptyCourse(deploymentUrl);
  }
  functionalUtil.login(browser);
  for (int i=0; i < SUBCATEGORY_PATHS.length; i++) {
    String currentPath=SUBCATEGORY_PATHS[i];
    String currentName=currentPath.substring(currentPath.lastIndexOf('/') + 1);
    String currentDescription=SUBCATEGORY_DESCRIPTIONS[i];
    Assert.assertTrue(functionalRepositorySiteUtil.createCatalogSubcategory(browser,currentPath.substring(0,currentPath.lastIndexOf('/')),currentName,currentDescription));
  }
  for (int i=0; i < COURSES; i++) {
    Assert.assertTrue(functionalRepositorySiteUtil.openCourse(browser,courseVO[i].getRepoEntryKey()));
    Assert.assertTrue(functionalCourseUtil.openCourseEditor(browser));
    String currentPath=SUBCATEGORY_PATHS[i];
    String currentName=currentPath.substring(currentPath.lastIndexOf('/') + 1);
    Assert.assertTrue(functionalCourseUtil.createCourseNode(browser,CourseNodeAlias.WIKI,""String_Node_Str"",currentName + ""String_Node_Str"",""String_Node_Str"" + currentName + ""String_Node_Str"",0));
    Assert.assertTrue(functionalCourseUtil.chooseWiki(browser,wikiVO[i].getKey()));
    Assert.assertTrue(functionalCourseUtil.publishEntireCourse(browser,null,SUBCATEGORY_PATHS[i]));
    Assert.assertTrue(functionalCourseUtil.closeActiveTab(browser));
  }
  Assert.assertTrue(functionalUtil.openSite(browser,FunctionalUtil.OlatSite.LEARNING_RESOURCES));
  Assert.assertTrue(functionalRepositorySiteUtil.openActionByMenuTree(browser,RepositorySiteAction.CATALOG));
  for (int i=0; i < COURSES; i++) {
    String[] selectors=functionalRepositorySiteUtil.createCatalogSelectors(SUBCATECORY_PATHS_INCLUDING_RESOURCE[i]);
    for (    String currentSelector : selectors) {
      StringBuffer selectorBuffer=new StringBuffer();
      selectorBuffer.append(""String_Node_Str"").append(functionalRepositorySiteUtil.getCourseModuleIconCss()).append(""String_Node_Str"");
      browser.click(selectorBuffer.toString());
      functionalUtil.waitForPageToLoad(browser);
      String businessPath0=functionalUtil.currentBusinessPath(browser);
      functionalRepositorySiteUtil.openCourse(browser,courseVO[i].getRepoEntryKey());
      String businessPath1=functionalUtil.currentBusinessPath(browser);
      Assert.assertEquals(businessPath1,businessPath0);
    }
  }
}","@Test @RunAsClient public void checkCreateSubcategory() throws URISyntaxException, IOException {
  RepositoryEntryVO[] wikiVO=new RepositoryEntryVO[COURSES];
  for (int i=0; i < COURSES; i++) {
    wikiVO[i]=functionalVOUtil.importWiki(deploymentUrl);
  }
  CourseVO[] courseVO=new CourseVO[COURSES];
  for (int i=0; i < COURSES; i++) {
    courseVO[i]=functionalVOUtil.importEmptyCourse(deploymentUrl);
  }
  functionalUtil.login(browser);
  for (int i=0; i < SUBCATEGORY_PATHS.length; i++) {
    String currentPath=SUBCATEGORY_PATHS[i];
    String currentName=currentPath.substring(currentPath.lastIndexOf('/') + 1);
    String currentDescription=SUBCATEGORY_DESCRIPTIONS[i];
    Assert.assertTrue(functionalRepositorySiteUtil.createCatalogSubcategory(browser,currentPath.substring(0,currentPath.lastIndexOf('/')),currentName,currentDescription));
  }
  for (int i=0; i < COURSES; i++) {
    Assert.assertTrue(functionalRepositorySiteUtil.openCourse(browser,courseVO[i].getRepoEntryKey()));
    Assert.assertTrue(functionalCourseUtil.openCourseEditor(browser));
    String currentPath=SUBCATECORY_PATHS_INCLUDING_RESOURCE[i];
    String currentName=currentPath.substring(currentPath.lastIndexOf('/') + 1);
    Assert.assertTrue(functionalCourseUtil.createCourseNode(browser,CourseNodeAlias.WIKI,""String_Node_Str"",currentName + ""String_Node_Str"",""String_Node_Str"" + currentName + ""String_Node_Str"",0));
    Assert.assertTrue(functionalCourseUtil.chooseWiki(browser,wikiVO[i].getKey()));
    Assert.assertTrue(functionalCourseUtil.publishEntireCourse(browser,null,currentPath));
    Assert.assertTrue(functionalCourseUtil.closeActiveTab(browser));
  }
  Assert.assertTrue(functionalUtil.openSite(browser,FunctionalUtil.OlatSite.LEARNING_RESOURCES));
  Assert.assertTrue(functionalRepositorySiteUtil.openActionByMenuTree(browser,RepositorySiteAction.CATALOG));
  for (int i=0; i < COURSES; i++) {
    StringBuffer selectorBuffer=new StringBuffer();
    selectorBuffer.append(""String_Node_Str"").append(functionalRepositorySiteUtil.getCatalogNavigationCss()).append(""String_Node_Str"");
    if (browser.isElementPresent(selectorBuffer.toString())) {
      browser.click(selectorBuffer.toString());
    }
    String[] selectors=functionalRepositorySiteUtil.createCatalogSelectors(SUBCATECORY_PATHS_INCLUDING_RESOURCE[i]);
    for (    String currentSelector : selectors) {
      functionalUtil.waitForPageToLoadElement(browser,currentSelector.toString());
      browser.click(currentSelector);
    }
    functionalUtil.waitForPageToLoad(browser);
    selectorBuffer=new StringBuffer();
    selectorBuffer.append(""String_Node_Str"").append(functionalRepositorySiteUtil.getCourseModuleIconCss()).append(""String_Node_Str"");
    String businessPath0=functionalUtil.getDeploymentPath() + ""String_Node_Str"" + courseVO[i].getRepoEntryKey();
    boolean found=false;
    for (int j=0; j < browser.getXpathCount(selectorBuffer.toString().substring(6)).intValue(); j++) {
      functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
      browser.click(selectorBuffer.toString() + ""String_Node_Str"" + (j + 1)+ ""String_Node_Str"");
      functionalUtil.waitForPageToLoad(browser);
      String businessPath1=functionalUtil.currentBusinessPath(browser);
      functionalCourseUtil.closeActiveTab(browser);
      if (businessPath1.contains(businessPath0)) {
        found=true;
        break;
      }
    }
    Assert.assertTrue(found);
  }
}"
69928,"/** 
 * @param browser
 * @param access
 * @param catalog
 * @return true on successPublishes the entire course.
 */
public boolean publishEntireCourse(Selenium browser,AccessSettings access,String catalog){
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCourseEditorPublishCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCourseEditorPublishWizardSelectAllCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  functionalUtil.clickWizardNext(browser);
  functionalUtil.waitForPageToLoadElement(browser,""String_Node_Str"" + getCourseEditorPublishWizardAccessId());
  if (access != null) {
    functionalUtil.selectOption(browser,getCourseEditorPublishWizardAccessId(),access.getAccessValue());
  }
  functionalUtil.clickWizardNext(browser);
  functionalUtil.waitForPageToLoadElement(browser,""String_Node_Str"" + getCourseEditorPublishWizardCatalogId());
  if (catalog != null) {
    functionalUtil.selectOption(browser,getCourseEditorPublishWizardCatalogId(),ADD_TO_CATALOG_YES_VALUE);
    selectorBuffer=new StringBuffer();
    selectorBuffer.append(""String_Node_Str"").append(getAddToCatalogCss()).append(""String_Node_Str"");
    browser.click(selectorBuffer.toString());
    String[] catalogSelectors=createCatalogSelectors(catalog);
    for (    String catalogSelector : catalogSelectors) {
      functionalUtil.waitForPageToLoadElement(browser,catalogSelector);
      browser.click(catalogSelector);
    }
    selectorBuffer=new StringBuffer();
    selectorBuffer.append(""String_Node_Str"").append(getCatalogCss()).append(""String_Node_Str"").append(functionalUtil.getButtonDirtyCss()).append(""String_Node_Str"");
    functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
    browser.click(selectorBuffer.toString());
    functionalUtil.waitForPageToUnloadElement(browser,selectorBuffer.toString());
  }
 else {
    functionalUtil.selectOption(browser,getCourseEditorPublishWizardCatalogId(),ADD_TO_CATALOG_NO_VALUE);
  }
  functionalUtil.clickWizardFinish(browser);
  functionalUtil.waitForPageToUnloadElement(browser,""String_Node_Str"" + getCourseEditorPublishWizardCatalogId());
  return (true);
}","/** 
 * @param browser
 * @param access
 * @param catalog
 * @return true on successPublishes the entire course.
 */
public boolean publishEntireCourse(Selenium browser,AccessSettings access,String catalog){
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCourseEditorPublishCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getCourseEditorPublishWizardSelectAllCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  functionalUtil.waitForPageToLoad(browser);
  functionalUtil.clickWizardNext(browser);
  functionalUtil.waitForPageToLoadElement(browser,""String_Node_Str"" + getCourseEditorPublishWizardAccessId());
  if (access != null) {
    functionalUtil.selectOption(browser,getCourseEditorPublishWizardAccessId(),access.getAccessValue());
  }
  functionalUtil.clickWizardNext(browser);
  functionalUtil.waitForPageToLoadElement(browser,""String_Node_Str"" + getCourseEditorPublishWizardCatalogId());
  if (catalog != null) {
    functionalUtil.selectOption(browser,getCourseEditorPublishWizardCatalogId(),ADD_TO_CATALOG_YES_VALUE);
    selectorBuffer=new StringBuffer();
    selectorBuffer.append(""String_Node_Str"").append(getAddToCatalogCss()).append(""String_Node_Str"");
    browser.click(selectorBuffer.toString());
    String[] catalogSelectors=createCatalogSelectors(catalog);
    for (    String catalogSelector : catalogSelectors) {
      functionalUtil.waitForPageToLoadElement(browser,catalogSelector);
      if (browser.isElementPresent(catalogSelector + ""String_Node_Str"")) {
        browser.doubleClick(catalogSelector);
      }
 else {
        browser.click(catalogSelector);
      }
    }
    selectorBuffer=new StringBuffer();
    selectorBuffer.append(""String_Node_Str"").append(getCatalogCss()).append(""String_Node_Str"").append(functionalUtil.getButtonDirtyCss()).append(""String_Node_Str"");
    functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
    browser.click(selectorBuffer.toString());
    functionalUtil.waitForPageToUnloadElement(browser,selectorBuffer.toString());
  }
 else {
    functionalUtil.selectOption(browser,getCourseEditorPublishWizardCatalogId(),ADD_TO_CATALOG_NO_VALUE);
  }
  functionalUtil.clickWizardFinish(browser);
  functionalUtil.waitForPageToUnloadElement(browser,""String_Node_Str"" + getCourseEditorPublishWizardCatalogId());
  return (true);
}"
69929,"/** 
 * @param path
 * @return Creates xpath selectors to select catalog within the tree.
 */
public String[] createCatalogSelectors(String path){
  if (path == null || !path.startsWith(""String_Node_Str"")) {
    return (null);
  }
  Matcher categoryMatcher=categoryPattern.matcher(path);
  ArrayList<String> selectors=new ArrayList<String>();
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(functionalUtil.getTreeNodeAnchorCss()).append(""String_Node_Str"");
  selectors.add(selectorBuffer.toString());
  while (categoryMatcher.find()) {
    StringBuffer selector=new StringBuffer();
    selector.append(""String_Node_Str"").append(functionalUtil.getTreeNodeAnchorCss()).append(""String_Node_Str"").append(categoryMatcher.group(1)).append(""String_Node_Str"");
    selectors.add(selector.toString());
  }
  return (selectors.toArray(new String[selectors.size()]));
}","/** 
 * @param path
 * @return Creates xpath selectors to select catalog within the tree.
 */
public String[] createCatalogSelectors(String path){
  if (path == null || !path.startsWith(""String_Node_Str"")) {
    return (null);
  }
  Matcher categoryMatcher=categoryPattern.matcher(path);
  ArrayList<String> selectors=new ArrayList<String>();
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(functionalUtil.getTreeNodeAnchorCss()).append(""String_Node_Str"");
  selectors.add(selectorBuffer.toString());
  while (categoryMatcher.find()) {
    StringBuffer selector=new StringBuffer();
    selector.append(""String_Node_Str"").append(functionalUtil.getTreeNodeCss()).append(""String_Node_Str"").append(categoryMatcher.group(1)).append(""String_Node_Str"");
    selectors.add(selector.toString());
  }
  return (selectors.toArray(new String[selectors.size()]));
}"
69930,"boolean checkArtefact(Binder.Page.Artefact artefact){
  if (artefact.parent instanceof Binder.Page.Structure) {
    if (!functionalEportfolioUtil.openArtefact(browser,((Binder)((Binder.Page)((Binder.Page.Structure)artefact.parent).parent).parent).binderName,((Binder.Page)((Binder.Page.Structure)artefact.parent).parent).pageName,((Binder.Page.Structure)artefact.parent).structureName,artefact.artefactName)) {
      return (false);
    }
  }
 else {
    if (!functionalEportfolioUtil.openArtefact(browser,((Binder)((Binder.Page)((Binder.Page.Structure)artefact.parent).parent).parent).binderName,((Binder.Page)((Binder.Page.Structure)artefact.parent).parent).pageName,null,artefact.artefactName)) {
      return (false);
    }
  }
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(functionalEportfolioUtil.getArtefactCss()).append(""String_Node_Str"").append(functionalEportfolioUtil.getTagIconCss()).append(""String_Node_Str"");
  boolean hasPrev=false;
  for (  String currentTag : artefact.tags) {
    if (hasPrev) {
      selectorBuffer.append(""String_Node_Str"");
    }
 else {
      hasPrev=true;
    }
    selectorBuffer.append(""String_Node_Str"").append(currentTag).append(""String_Node_Str"");
  }
  selectorBuffer.append(""String_Node_Str"");
  if (!browser.isElementPresent(selectorBuffer.toString())) {
    return (false);
  }
  String currentContent=null;
  while ((currentContent=artefact.nextContent()) != null) {
    if (!browser.isTextPresent(currentContent)) {
      return (false);
    }
  }
  return (true);
}","boolean checkArtefact(Binder.Page.Artefact artefact){
  if (artefact instanceof Binder.Page.JournalArtefact)   return (true);
  if (artefact.parent instanceof Binder.Page.Structure) {
    if (!functionalEportfolioUtil.openArtefact(browser,((Binder)((Binder.Page)((Binder.Page.Structure)artefact.parent).parent).parent).binderName,((Binder.Page)((Binder.Page.Structure)artefact.parent).parent).pageName,((Binder.Page.Structure)artefact.parent).structureName,artefact.artefactName)) {
      return (false);
    }
  }
 else {
    if (!functionalEportfolioUtil.openArtefact(browser,((Binder)((Binder.Page)((Binder.Page.Structure)artefact.parent).parent).parent).binderName,((Binder.Page)((Binder.Page.Structure)artefact.parent).parent).pageName,null,artefact.artefactName)) {
      return (false);
    }
  }
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(functionalEportfolioUtil.getArtefactCss()).append(""String_Node_Str"").append(functionalEportfolioUtil.getTagIconCss()).append(""String_Node_Str"");
  boolean hasPrev=false;
  for (  String currentTag : artefact.tags) {
    if (hasPrev) {
      selectorBuffer.append(""String_Node_Str"");
    }
 else {
      hasPrev=true;
    }
    selectorBuffer.append(""String_Node_Str"").append(currentTag).append(""String_Node_Str"");
  }
  selectorBuffer.append(""String_Node_Str"");
  if (!browser.isElementPresent(selectorBuffer.toString())) {
    return (false);
  }
  if (!functionalEportfolioUtil.closeArtefact(browser)) {
    return (false);
  }
  artefact.open(browser,deploymentUrl);
  String currentContent=null;
  while ((currentContent=artefact.nextContent()) != null) {
    if (!browser.isTextPresent(currentContent)) {
      return (false);
    }
  }
  return (true);
}"
69931,"@Test @RunAsClient public void checkCollectForumPost() throws IOException, URISyntaxException {
  Object[] retval=prepareVerification(FORUM_BINDER,null,FORUM_PAGE,null,FORUM_STRUCTURE,null,ForumArtefact.class,FORUM_ARTEFACT_TITLE,FORUM_ARTEFACT_DESCRIPTION,FORUM_TAGS,null);
  Binder binder=(Binder)retval[0];
  Binder.Page page=(Binder.Page)retval[1];
  Binder.Page.Structure structure=(Binder.Page.Structure)retval[2];
  Binder.Page.Artefact artefact=(Binder.Page.Artefact)retval[3];
  CourseVO course=functionalVOUtil.importCourseIncludingForum(deploymentUrl);
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalEportfolioUtil.createElements(browser,FORUM_BINDER,FORUM_PAGE,FORUM_STRUCTURE));
  Assert.assertTrue(functionalCourseUtil.postForumMessage(browser,course.getRepoEntryKey(),0,FORUM_POST_TITLE,FORUM_POST_MESSAGE));
  artefact.businessPath=functionalUtil.currentBusinessPath(browser);
  Assert.assertTrue(functionalCourseUtil.addToEportfolio(browser,FORUM_BINDER,FORUM_PAGE,FORUM_STRUCTURE,FORUM_ARTEFACT_TITLE,FORUM_ARTEFACT_DESCRIPTION,FORUM_TAGS,functionalEportfolioUtil));
  binder.ignore=false;
  page.ignore=false;
  structure.ignore=false;
  artefact.ignore=false;
  Assert.assertTrue(checkArtefact(artefact));
  Assert.assertTrue(checkMap(binder));
}","@Test @RunAsClient public void checkCollectForumPost() throws IOException, URISyntaxException {
  Object[] retval=prepareVerification(FORUM_BINDER,null,FORUM_PAGE,null,FORUM_STRUCTURE,null,ForumArtefact.class,FORUM_ARTEFACT_TITLE,FORUM_ARTEFACT_DESCRIPTION,FORUM_TAGS,null);
  Binder binder=(Binder)retval[0];
  Binder.Page page=(Binder.Page)retval[1];
  Binder.Page.Structure structure=(Binder.Page.Structure)retval[2];
  Binder.Page.Artefact artefact=(Binder.Page.Artefact)retval[3];
  ((Binder.Page.ForumArtefact)artefact).postTitle=FORUM_POST_TITLE;
  ((Binder.Page.ForumArtefact)artefact).postContent=FORUM_POST_MESSAGE;
  CourseVO course=functionalVOUtil.importCourseIncludingForum(deploymentUrl);
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalEportfolioUtil.createElements(browser,FORUM_BINDER,FORUM_PAGE,FORUM_STRUCTURE));
  Assert.assertTrue(functionalCourseUtil.postForumMessage(browser,course.getRepoEntryKey(),0,FORUM_POST_TITLE,FORUM_POST_MESSAGE));
  artefact.businessPath=functionalUtil.currentBusinessPath(browser);
  Assert.assertTrue(functionalCourseUtil.addToEportfolio(browser,FORUM_BINDER,FORUM_PAGE,FORUM_STRUCTURE,FORUM_ARTEFACT_TITLE,FORUM_ARTEFACT_DESCRIPTION,FORUM_TAGS,functionalEportfolioUtil));
  binder.ignore=false;
  page.ignore=false;
  structure.ignore=false;
  artefact.ignore=false;
  Assert.assertTrue(checkArtefact(artefact));
  Assert.assertTrue(checkMap(binder));
}"
69932,"@Test @RunAsClient public void checkCreateLearningJournal(){
  Object[] retval=prepareVerification(FORUM_BINDER,null,FORUM_PAGE,null,FORUM_STRUCTURE,null,JournalArtefact.class,FORUM_ARTEFACT_TITLE,FORUM_ARTEFACT_DESCRIPTION,FORUM_TAGS,null);
  Binder binder=(Binder)retval[0];
  Binder.Page page=(Binder.Page)retval[1];
  Binder.Page.Structure structure=(Binder.Page.Structure)retval[2];
  Binder.Page.Artefact artefact=(Binder.Page.Artefact)retval[3];
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalEportfolioUtil.createLearningJournal(browser,LEARNING_JOURNAL_BINDER,LEARNING_JOURNAL_PAGE,LEARNING_JOURNAL_STRUCTURE,LEARNING_JOURNAL_TITLE,LEARNING_JOURNAL_DESCRIPTION,LEARNING_JOURNAL_TAGS));
  binder.ignore=false;
  page.ignore=false;
  structure.ignore=false;
  artefact.ignore=false;
  Assert.assertTrue(checkArtefact(artefact));
  Assert.assertTrue(checkMap(binder));
}","@Test @RunAsClient public void checkCreateLearningJournal(){
  Object[] retval=prepareVerification(LEARNING_JOURNAL_BINDER,null,LEARNING_JOURNAL_PAGE,null,LEARNING_JOURNAL_STRUCTURE,null,JournalArtefact.class,LEARNING_JOURNAL_TITLE,LEARNING_JOURNAL_DESCRIPTION,LEARNING_JOURNAL_TAGS,null);
  Binder binder=(Binder)retval[0];
  Binder.Page page=(Binder.Page)retval[1];
  Binder.Page.Structure structure=(Binder.Page.Structure)retval[2];
  Binder.Page.Artefact artefact=(Binder.Page.Artefact)retval[3];
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalEportfolioUtil.createLearningJournal(browser,LEARNING_JOURNAL_BINDER,LEARNING_JOURNAL_PAGE,LEARNING_JOURNAL_STRUCTURE,LEARNING_JOURNAL_TITLE,LEARNING_JOURNAL_DESCRIPTION,LEARNING_JOURNAL_TAGS));
  binder.ignore=false;
  page.ignore=false;
  structure.ignore=false;
  artefact.ignore=false;
  Assert.assertTrue(checkArtefact(artefact));
}"
69933,"@Test @RunAsClient public void checkAddTextArtefact(){
  Object[] retval=prepareVerification(FORUM_BINDER,null,FORUM_PAGE,null,FORUM_STRUCTURE,null,TextArtefact.class,FORUM_ARTEFACT_TITLE,FORUM_ARTEFACT_DESCRIPTION,FORUM_TAGS,null);
  Binder binder=(Binder)retval[0];
  Binder.Page page=(Binder.Page)retval[1];
  Binder.Page.Structure structure=(Binder.Page.Structure)retval[2];
  Binder.Page.Artefact artefact=(Binder.Page.Artefact)retval[3];
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalEportfolioUtil.addTextArtefact(browser,TEXT_ARTEFACT_BINDER,TEXT_ARTEFACT_PAGE,TEXT_ARTEFACT_STRUCTURE,TEXT_ARTEFACT_CONTENT,TEXT_ARTEFACT_TITLE,TEXT_ARTEFACT_DESCRIPTION,TEXT_ARTEFACT_TAGS));
  binder.ignore=false;
  page.ignore=false;
  structure.ignore=false;
  artefact.ignore=false;
  Assert.assertTrue(checkArtefact(artefact));
  Assert.assertTrue(checkMap(binder));
}","@Test @RunAsClient public void checkAddTextArtefact(){
  Object[] retval=prepareVerification(TEXT_ARTEFACT_BINDER,null,TEXT_ARTEFACT_PAGE,null,TEXT_ARTEFACT_STRUCTURE,null,TextArtefact.class,TEXT_ARTEFACT_TITLE,TEXT_ARTEFACT_DESCRIPTION,TEXT_ARTEFACT_TAGS,null);
  Binder binder=(Binder)retval[0];
  Binder.Page page=(Binder.Page)retval[1];
  Binder.Page.Structure structure=(Binder.Page.Structure)retval[2];
  Binder.Page.Artefact artefact=(Binder.Page.Artefact)retval[3];
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalEportfolioUtil.addTextArtefact(browser,TEXT_ARTEFACT_BINDER,TEXT_ARTEFACT_PAGE,TEXT_ARTEFACT_STRUCTURE,TEXT_ARTEFACT_CONTENT,TEXT_ARTEFACT_TITLE,TEXT_ARTEFACT_DESCRIPTION,TEXT_ARTEFACT_TAGS));
  binder.ignore=false;
  page.ignore=false;
  structure.ignore=false;
  artefact.ignore=false;
  Assert.assertTrue(checkArtefact(artefact));
  Assert.assertTrue(checkMap(binder));
}"
69934,"@Test @RunAsClient public void checkCollectWikiArticle() throws URISyntaxException, IOException {
  Object[] retval=prepareVerification(FORUM_BINDER,null,FORUM_PAGE,null,FORUM_STRUCTURE,null,WikiArtefact.class,FORUM_ARTEFACT_TITLE,FORUM_ARTEFACT_DESCRIPTION,FORUM_TAGS,null);
  Binder binder=(Binder)retval[0];
  Binder.Page page=(Binder.Page)retval[1];
  Binder.Page.Structure structure=(Binder.Page.Structure)retval[2];
  Binder.Page.Artefact artefact=(Binder.Page.Artefact)retval[3];
  RepositoryEntryVO vo=functionalVOUtil.importWiki(deploymentUrl);
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalEportfolioUtil.createElements(browser,WIKI_BINDER,WIKI_PAGE,WIKI_STRUCTURE));
  Assert.assertTrue(functionalCourseUtil.createWikiArticle(browser,vo.getKey(),WIKI_ARTICLE_PAGENAME,WIKI_ARTICLE_CONTENT));
  artefact.businessPath=functionalUtil.currentBusinessPath(browser);
  Assert.assertTrue(functionalCourseUtil.addToEportfolio(browser,WIKI_BINDER,WIKI_PAGE,WIKI_STRUCTURE,WIKI_ARTEFACT_TITLE,WIKI_ARTEFACT_DESCRIPTION,WIKI_TAGS,functionalEportfolioUtil));
  binder.ignore=false;
  page.ignore=false;
  structure.ignore=false;
  artefact.ignore=false;
  Assert.assertTrue(checkArtefact(artefact));
  Assert.assertTrue(checkMap(binder));
}","@Test @RunAsClient public void checkCollectWikiArticle() throws URISyntaxException, IOException {
  Object[] retval=prepareVerification(WIKI_BINDER,null,WIKI_PAGE,null,WIKI_STRUCTURE,null,WikiArtefact.class,WIKI_ARTEFACT_TITLE,WIKI_ARTEFACT_DESCRIPTION,WIKI_TAGS,null);
  Binder binder=(Binder)retval[0];
  Binder.Page page=(Binder.Page)retval[1];
  Binder.Page.Structure structure=(Binder.Page.Structure)retval[2];
  Binder.Page.Artefact artefact=(Binder.Page.Artefact)retval[3];
  ((Binder.Page.WikiArtefact)artefact).article=WIKI_ARTICLE_CONTENT;
  RepositoryEntryVO vo=functionalVOUtil.importWiki(deploymentUrl);
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalEportfolioUtil.createElements(browser,WIKI_BINDER,WIKI_PAGE,WIKI_STRUCTURE));
  Assert.assertTrue(functionalCourseUtil.createWikiArticle(browser,vo.getKey(),WIKI_ARTICLE_PAGENAME,WIKI_ARTICLE_CONTENT));
  artefact.businessPath=functionalUtil.currentBusinessPath(browser);
  Assert.assertTrue(functionalCourseUtil.addToEportfolio(browser,WIKI_BINDER,WIKI_PAGE,WIKI_STRUCTURE,WIKI_ARTEFACT_TITLE,WIKI_ARTEFACT_DESCRIPTION,WIKI_TAGS,functionalEportfolioUtil));
  binder.ignore=false;
  page.ignore=false;
  structure.ignore=false;
  artefact.ignore=false;
  Assert.assertTrue(checkArtefact(artefact));
  Assert.assertTrue(checkMap(binder));
}"
69935,"@Test @RunAsClient public void checkCollectBlogPost() throws URISyntaxException, IOException {
  Object[] retval=prepareVerification(FORUM_BINDER,null,FORUM_PAGE,null,FORUM_STRUCTURE,null,BlogArtefact.class,FORUM_ARTEFACT_TITLE,FORUM_ARTEFACT_DESCRIPTION,FORUM_TAGS,null);
  Binder binder=(Binder)retval[0];
  Binder.Page page=(Binder.Page)retval[1];
  Binder.Page.Structure structure=(Binder.Page.Structure)retval[2];
  Binder.Page.Artefact artefact=(Binder.Page.Artefact)retval[3];
  CourseVO course=functionalVOUtil.importCourseIncludingBlog(deploymentUrl);
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalEportfolioUtil.createElements(browser,BLOG_BINDER,BLOG_PAGE,BLOG_STRUCTURE));
  Assert.assertTrue(functionalCourseUtil.createBlogEntry(browser,course.getRepoEntryKey(),0,BLOG_POST_TITLE,BLOG_POST_DESCRIPTION,BLOG_POST_CONTENT));
  artefact.businessPath=functionalUtil.currentBusinessPath(browser);
  Assert.assertTrue(functionalCourseUtil.addToEportfolio(browser,BLOG_BINDER,BLOG_PAGE,BLOG_STRUCTURE,BLOG_ARTEFACT_TITLE,BLOG_ARTEFACT_DESCRIPTION,BLOG_TAGS,functionalEportfolioUtil));
  binder.ignore=false;
  page.ignore=false;
  structure.ignore=false;
  artefact.ignore=false;
  Assert.assertTrue(checkArtefact(artefact));
  Assert.assertTrue(checkMap(binder));
}","@Test @RunAsClient public void checkCollectBlogPost() throws URISyntaxException, IOException {
  Object[] retval=prepareVerification(BLOG_BINDER,null,BLOG_PAGE,null,BLOG_STRUCTURE,null,BlogArtefact.class,BLOG_ARTEFACT_TITLE,BLOG_ARTEFACT_DESCRIPTION,BLOG_TAGS,null);
  Binder binder=(Binder)retval[0];
  Binder.Page page=(Binder.Page)retval[1];
  Binder.Page.Structure structure=(Binder.Page.Structure)retval[2];
  Binder.Page.Artefact artefact=(Binder.Page.Artefact)retval[3];
  ((Binder.Page.BlogArtefact)artefact).postTitle=BLOG_POST_TITLE;
  ((Binder.Page.BlogArtefact)artefact).postContent=BLOG_POST_CONTENT;
  CourseVO course=functionalVOUtil.importCourseIncludingBlog(deploymentUrl);
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalEportfolioUtil.createElements(browser,BLOG_BINDER,BLOG_PAGE,BLOG_STRUCTURE));
  Assert.assertTrue(functionalCourseUtil.createBlogEntry(browser,course.getRepoEntryKey(),0,BLOG_POST_TITLE,BLOG_POST_DESCRIPTION,BLOG_POST_CONTENT));
  artefact.businessPath=functionalUtil.currentBusinessPath(browser);
  Assert.assertTrue(functionalCourseUtil.addToEportfolio(browser,BLOG_BINDER,BLOG_PAGE,BLOG_STRUCTURE,BLOG_ARTEFACT_TITLE,BLOG_ARTEFACT_DESCRIPTION,BLOG_TAGS,functionalEportfolioUtil));
  binder.ignore=false;
  page.ignore=false;
  structure.ignore=false;
  artefact.ignore=false;
  Assert.assertTrue(checkArtefact(artefact));
  Assert.assertTrue(checkMap(binder));
}"
69936,"@Test @RunAsClient public void checkUploadFileArtefact() throws URISyntaxException, MalformedURLException {
  Object[] retval=prepareVerification(FORUM_BINDER,null,FORUM_PAGE,null,FORUM_STRUCTURE,null,FileArtefact.class,FORUM_ARTEFACT_TITLE,FORUM_ARTEFACT_DESCRIPTION,FORUM_TAGS,null);
  Binder binder=(Binder)retval[0];
  Binder.Page page=(Binder.Page)retval[1];
  Binder.Page.Structure structure=(Binder.Page.Structure)retval[2];
  Binder.Page.Artefact artefact=(Binder.Page.Artefact)retval[3];
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalEportfolioUtil.uploadFileArtefact(browser,FILE_ARTEFACT_BINDER,FILE_ARTEFACT_PAGE,FILE_ARTEFACT_STRUCTURE,FunctionalArtefactTest.class.getResource(FILE_ARTEFACT_PATH).toURI(),FILE_ARTEFACT_TITLE,FILE_ARTEFACT_DESCRIPTION,FILE_ARTEFACT_TAGS));
  binder.ignore=false;
  page.ignore=false;
  structure.ignore=false;
  artefact.ignore=false;
  Assert.assertTrue(checkArtefact(artefact));
  Assert.assertTrue(checkMap(binder));
}","@Test @RunAsClient public void checkUploadFileArtefact() throws URISyntaxException, MalformedURLException {
  Object[] retval=prepareVerification(FILE_ARTEFACT_BINDER,null,FILE_ARTEFACT_PAGE,null,FILE_ARTEFACT_STRUCTURE,null,FileArtefact.class,FILE_ARTEFACT_TITLE,FILE_ARTEFACT_DESCRIPTION,FILE_ARTEFACT_TAGS,null);
  Binder binder=(Binder)retval[0];
  Binder.Page page=(Binder.Page)retval[1];
  Binder.Page.Structure structure=(Binder.Page.Structure)retval[2];
  Binder.Page.Artefact artefact=(Binder.Page.Artefact)retval[3];
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalEportfolioUtil.uploadFileArtefact(browser,FILE_ARTEFACT_BINDER,FILE_ARTEFACT_PAGE,FILE_ARTEFACT_STRUCTURE,FunctionalArtefactTest.class.getResource(FILE_ARTEFACT_PATH).toURI(),FILE_ARTEFACT_TITLE,FILE_ARTEFACT_DESCRIPTION,FILE_ARTEFACT_TAGS));
  binder.ignore=false;
  page.ignore=false;
  structure.ignore=false;
  artefact.ignore=false;
  Assert.assertTrue(checkArtefact(artefact));
  Assert.assertTrue(checkMap(binder));
}"
69937,"@Test @RunAsClient public void checkCreateUsingEditor() throws FileNotFoundException, IOException {
  Assert.assertTrue(functionalUtil.login(browser,functionalUtil.getUsername(),functionalUtil.getPassword(),true));
  Assert.assertTrue(functionalUtil.openSite(browser,OlatSite.LEARNING_RESOURCES));
  Assert.assertTrue(functionalRepositorySiteUtil.createCourseUsingEditor(browser,EDITOR_COURSE_TITLE,EDITOR_COURSE_DESCRIPTION));
  File overview=new File(EDITOR_COURSE_OVERVIEW_FILE);
  Assert.assertTrue(functionalCourseUtil.uploadOverviewPage(browser,overview.toURI()));
  Assert.assertTrue(functionalCourseUtil.publishEntireCourse(browser,null,null));
  Assert.assertTrue(functionalCourseUtil.openCourseEditorCourseTab(browser,CourseEditorCourseTab.TITLE_AND_DESCRIPTION));
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"");
  browser.type(selectorBuffer.toString(),EDITOR_COURSE_CHANGED_TITLE);
  Assert.assertTrue(functionalCourseUtil.publishEntireCourse(browser,null,null));
  String courseLink=null;
  Assert.assertNotNull(courseLink=functionalCourseUtil.readExternalLink(browser));
  Assert.assertTrue(functionalCourseUtil.closeActiveTab(browser));
  browser.open(courseLink);
  functionalUtil.waitForPageToLoad(browser);
  browser.isTextPresent(functionalHtmlUtil.stripTags(IOUtils.toString(new FileInputStream(overview))));
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(functionalCourseUtil.getStructureIconCss()).append(""String_Node_Str"").append(""String_Node_Str"").append(EDITOR_COURSE_CHANGED_TITLE).append(""String_Node_Str"");
  Assert.assertTrue(browser.isElementPresent(selectorBuffer.toString()));
}","@Test @RunAsClient public void checkCreateUsingEditor() throws FileNotFoundException, IOException, URISyntaxException {
  Assert.assertTrue(functionalUtil.login(browser,functionalUtil.getUsername(),functionalUtil.getPassword(),true));
  Assert.assertTrue(functionalUtil.openSite(browser,OlatSite.LEARNING_RESOURCES));
  Assert.assertTrue(functionalRepositorySiteUtil.createCourseUsingEditor(browser,EDITOR_COURSE_TITLE,EDITOR_COURSE_DESCRIPTION));
  Assert.assertTrue(functionalCourseUtil.uploadOverviewPage(browser,FunctionalCourseTest.class.getResource(EDITOR_COURSE_OVERVIEW_FILE).toURI()));
  Assert.assertTrue(functionalCourseUtil.publishEntireCourse(browser,null,null));
  Assert.assertTrue(functionalCourseUtil.openCourseEditorCourseTab(browser,CourseEditorCourseTab.TITLE_AND_DESCRIPTION));
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"");
  browser.type(selectorBuffer.toString(),EDITOR_COURSE_CHANGED_TITLE);
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(functionalUtil.getButtonDirtyCss()).append(""String_Node_Str"");
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  browser.click(selectorBuffer.toString());
  functionalUtil.waitForPageToUnloadElement(browser,selectorBuffer.toString());
  Assert.assertTrue(functionalCourseUtil.publishEntireCourse(browser,null,null));
  String courseLink=null;
  Assert.assertNotNull(courseLink=functionalCourseUtil.readExternalLink(browser));
  Assert.assertTrue(functionalCourseUtil.closeActiveTab(browser));
  browser.open(courseLink);
  functionalUtil.waitForPageToLoad(browser);
  String originalText=functionalHtmlUtil.stripTags(IOUtils.toString(FunctionalCourseTest.class.getResourceAsStream(EDITOR_COURSE_OVERVIEW_FILE)),true);
  browser.selectFrame(""String_Node_Str"");
  String source=browser.getHtmlSource();
  String currentText=functionalHtmlUtil.stripTags(source,true);
  browser.selectFrame(""String_Node_Str"");
  Assert.assertTrue(originalText.equals(currentText));
  selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(functionalCourseUtil.getStructureIconCss()).append(""String_Node_Str"").append(""String_Node_Str"").append(EDITOR_COURSE_CHANGED_TITLE).append(""String_Node_Str"");
  Assert.assertTrue(browser.isElementPresent(selectorBuffer.toString()));
}"
69938,"@Test @RunAsClient public void checkCreateUsingWizard(){
  Assert.assertTrue(functionalUtil.login(browser,functionalUtil.getUsername(),functionalUtil.getPassword(),true));
  Assert.assertTrue(functionalUtil.openSite(browser,OlatSite.LEARNING_RESOURCES));
  CourseWizardElement[] elementArray=new CourseWizardElement[]{CourseWizardElement.INFO_PAGE,CourseWizardElement.FORUM,CourseWizardElement.ENROLLMENT,CourseWizardElement.DOWNLOAD_FOLDER,CourseWizardElement.EMAIL};
  Assert.assertTrue(functionalRepositorySiteUtil.createCourseUsingWizard(browser,WIZARD_COURSE_TITLE,WIZARD_COURSE_DESCRIPTION,elementArray,null,true,CourseWizardAccess.USERS));
  for (int i=0; i < elementArray.length; i++) {
    functionalCourseUtil.open(browser,i);
  }
}","@Ignore @Test @RunAsClient public void checkCreateUsingWizard(){
  Assert.assertTrue(functionalUtil.login(browser,functionalUtil.getUsername(),functionalUtil.getPassword(),true));
  Assert.assertTrue(functionalUtil.openSite(browser,OlatSite.LEARNING_RESOURCES));
  CourseWizardElement[] elementArray=new CourseWizardElement[]{CourseWizardElement.INFO_PAGE,CourseWizardElement.FORUM,CourseWizardElement.ENROLLMENT,CourseWizardElement.DOWNLOAD_FOLDER,CourseWizardElement.EMAIL};
  Assert.assertTrue(functionalRepositorySiteUtil.createCourseUsingWizard(browser,WIZARD_COURSE_TITLE,WIZARD_COURSE_DESCRIPTION,elementArray,null,true,CourseWizardAccess.USERS));
  for (int i=0; i < elementArray.length; i++) {
    functionalCourseUtil.open(browser,i);
  }
}"
69939,"@Before public void setup() throws IOException, URISyntaxException {
  if (!initialized) {
    functionalUtil=new FunctionalUtil();
    functionalUtil.setDeploymentUrl(deploymentUrl.toString());
    functionalRepositorySiteUtil=new FunctionalRepositorySiteUtil(functionalUtil);
    functionalCourseUtil=new FunctionalCourseUtil(functionalUtil,functionalRepositorySiteUtil);
    initialized=true;
  }
}","@Before public void setup() throws IOException, URISyntaxException {
  if (!initialized) {
    functionalUtil=new FunctionalUtil();
    functionalUtil.setDeploymentUrl(deploymentUrl.toString());
    functionalHtmlUtil=new FunctionalHtmlUtil();
    functionalRepositorySiteUtil=new FunctionalRepositorySiteUtil(functionalUtil);
    functionalCourseUtil=new FunctionalCourseUtil(functionalUtil,functionalRepositorySiteUtil);
    initialized=true;
  }
}"
69940,"public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
 else   if (obj instanceof Item) {
    Item item=(Item)obj;
    return guid != null && guid.equals(item.guid);
  }
  return false;
}","/** 
 * Overwrite equals method so that different object in the vm that actually represent the same item are recognized as such. Eg in the remove method of the feed
 */
public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
 else   if (obj instanceof Item) {
    Item item=(Item)obj;
    return guid != null && guid.equals(item.guid);
  }
  return false;
}"
69941,"/** 
 * @see org.olat.core.gui.control.DefaultController#event(org.olat.core.gui.UserRequest,org.olat.core.gui.control.Controller,org.olat.core.gui.control.Event)
 */
protected void event(UserRequest ureq,Controller source,Event event){
  FeedManager feedManager=FeedManager.getInstance();
  Feed feed=feedManager.getFeed(feedResource);
  if (source == cmc) {
    if (event.equals(CloseableModalController.CLOSE_MODAL_EVENT)) {
      removeAsListenerAndDispose(cmc);
      cmc=null;
      removeAsListenerAndDispose(itemFormCtr);
      itemFormCtr=null;
      cleanupTmpItemMediaDir(currentItem,feed,feedManager);
      if (!feed.hasItems()) {
        feedManager.updateFeedMode(null,feed);
        makeInternalAndExternalButtons();
      }
      feedManager.releaseLock(lock);
    }
  }
 else   if (source == confirmDialogCtr && DialogBoxUIFactory.isYesEvent(event)) {
    Item item=(Item)((DialogBoxController)source).getUserObject();
    lock=feedManager.acquireLock(feed,item,getIdentity());
    if (lock.isSuccess()) {
      naviCtr.remove(item);
      helper.removeItem(item);
      feedManager.remove(item,feed);
      deleteButtons.remove(source);
      for (      Link editButton : editButtons) {
        if (editButton.getUserObject() == item) {
          editButtons.remove(editButton);
          break;
        }
      }
      if (!feed.hasItems()) {
        makeInternalAndExternalButtons();
        fireEvent(ureq,ItemsController.FEED_INFO_IS_DIRTY_EVENT);
      }
 else {
        if (callback.mayEditItems() || callback.mayCreateItems()) {
          createEditButtons(ureq,feed);
        }
        createCommentsAndRatingsLinks(ureq,feed);
      }
      vcItems.setDirty(true);
      mainPanel.setContent(vcItems);
      feedManager.releaseLock(lock);
      lock=null;
      ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_DELETE,getClass(),LoggingResourceable.wrap(item));
    }
 else {
      showInfo(""String_Node_Str"",lock.getOwner().getName());
    }
  }
 else   if (source == itemFormCtr) {
    if (event.equals(Event.CHANGED_EVENT) || event.equals(Event.CANCELLED_EVENT)) {
      if (event.equals(Event.CHANGED_EVENT)) {
        FileElement mediaFile=currentItem.getMediaFile();
        if (feedManager.getItemContainer(currentItem,feed) == null) {
          naviCtr.remove(currentItem);
          helper.removeItem(currentItem);
        }
 else {
          if (!feed.getItems().contains(currentItem)) {
            feedManager.addItem(currentItem,mediaFile,feed);
            createButtonsForItem(ureq,currentItem);
            createItemLink(currentItem);
            String guid=currentItem.getGuid();
            if (currentItem.getDate() != null) {
              DateComponentFactory.createDateComponentWithYear(""String_Node_Str"" + guid,currentItem.getDate(),vcItems);
            }
            createCommentsAndRatingsLink(ureq,feed,currentItem);
            naviCtr.add(currentItem);
            helper.addItem(currentItem);
            if (feed.getItems().size() == 1) {
              fireEvent(ureq,ItemsController.FEED_INFO_IS_DIRTY_EVENT);
              helper.setURIs();
            }
            ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_CREATE,getClass(),LoggingResourceable.wrap(currentItem));
          }
 else {
            feedManager.updateItem(currentItem,mediaFile,feed);
            helper.updateItem(currentItem);
            ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_EDIT,getClass(),LoggingResourceable.wrap(currentItem));
          }
        }
        vcItems.setDirty(true);
        if (itemCtr != null) {
          itemCtr.getInitialComponent().setDirty(true);
        }
      }
 else       if (event.equals(Event.CANCELLED_EVENT)) {
        cleanupTmpItemMediaDir(currentItem,feed,feedManager);
        if (!feed.hasItems()) {
          feedManager.updateFeedMode(null,feed);
          makeInternalAndExternalButtons();
        }
      }
      feedManager.releaseLock(lock);
      cmc.deactivate();
      removeAsListenerAndDispose(cmc);
      cmc=null;
      removeAsListenerAndDispose(itemFormCtr);
      itemFormCtr=null;
    }
  }
 else   if (source == naviCtr && event instanceof NavigationEvent) {
    List<? extends Dated> selItems=((NavigationEvent)event).getSelectedItems();
    List<Item> items=new ArrayList<Item>();
    for (    Dated item : selItems) {
      if (item instanceof Item) {
        items.add((Item)item);
      }
    }
    Collections.sort(items,new ItemPublishDateComparator());
    helper.setSelectedItems(items);
    if (callback.mayEditItems() || callback.mayCreateItems()) {
      createEditButtons(ureq,feed);
    }
    createCommentsAndRatingsLinks(ureq,feed);
    vcItems.setDirty(true);
    mainPanel.setContent(vcItems);
  }
 else   if (source == itemCtr) {
    if (event == Event.BACK_EVENT) {
      mainPanel.setContent(vcItems);
    }
  }
 else   if (source instanceof UserCommentsAndRatingsController) {
    UserCommentsAndRatingsController commentsRatingsCtr=(UserCommentsAndRatingsController)source;
    if (event == UserCommentsAndRatingsController.EVENT_COMMENT_LINK_CLICKED) {
      Item item=(Item)commentsRatingsCtr.getUserObject();
      ItemController myItemCtr=displayItemController(ureq,item);
      List<ContextEntry> entries=BusinessControlFactory.getInstance().createCEListFromResourceType(ItemController.ACTIVATION_KEY_COMMENTS);
      myItemCtr.activate(ureq,entries,null);
    }
  }
  if (!isSameAllItems(feed.getFilteredItems(callback,ureq.getIdentity()))) {
    resetItems(ureq,feed);
  }
}","/** 
 * @see org.olat.core.gui.control.DefaultController#event(org.olat.core.gui.UserRequest,org.olat.core.gui.control.Controller,org.olat.core.gui.control.Event)
 */
protected void event(UserRequest ureq,Controller source,Event event){
  FeedManager feedManager=FeedManager.getInstance();
  Feed feed=feedManager.getFeed(feedResource);
  vcItems.contextPut(""String_Node_Str"",feed);
  if (source == cmc) {
    if (event.equals(CloseableModalController.CLOSE_MODAL_EVENT)) {
      removeAsListenerAndDispose(cmc);
      cmc=null;
      removeAsListenerAndDispose(itemFormCtr);
      itemFormCtr=null;
      cleanupTmpItemMediaDir(currentItem,feed,feedManager);
      if (!feed.hasItems()) {
        feedManager.updateFeedMode(null,feed);
        makeInternalAndExternalButtons();
      }
      feedManager.releaseLock(lock);
    }
  }
 else   if (source == confirmDialogCtr && DialogBoxUIFactory.isYesEvent(event)) {
    Item item=(Item)((DialogBoxController)source).getUserObject();
    lock=feedManager.acquireLock(feed,item,getIdentity());
    if (lock.isSuccess()) {
      naviCtr.remove(item);
      helper.removeItem(item);
      feedManager.remove(item,feed);
      deleteButtons.remove(source);
      for (      Link editButton : editButtons) {
        if (editButton.getUserObject() == item) {
          editButtons.remove(editButton);
          break;
        }
      }
      if (!feed.hasItems()) {
        makeInternalAndExternalButtons();
        fireEvent(ureq,ItemsController.FEED_INFO_IS_DIRTY_EVENT);
      }
 else {
        if (callback.mayEditItems() || callback.mayCreateItems()) {
          createEditButtons(ureq,feed);
        }
        createCommentsAndRatingsLinks(ureq,feed);
      }
      vcItems.setDirty(true);
      mainPanel.setContent(vcItems);
      feedManager.releaseLock(lock);
      lock=null;
      ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_DELETE,getClass(),LoggingResourceable.wrap(item));
    }
 else {
      showInfo(""String_Node_Str"",lock.getOwner().getName());
    }
  }
 else   if (source == itemFormCtr) {
    if (event.equals(Event.CHANGED_EVENT) || event.equals(Event.CANCELLED_EVENT)) {
      if (event.equals(Event.CHANGED_EVENT)) {
        FileElement mediaFile=currentItem.getMediaFile();
        if (feedManager.getItemContainer(currentItem,feed) == null) {
          naviCtr.remove(currentItem);
          helper.removeItem(currentItem);
        }
 else {
          if (!feed.getItems().contains(currentItem)) {
            feedManager.addItem(currentItem,mediaFile,feed);
            createButtonsForItem(ureq,currentItem);
            createItemLink(currentItem);
            String guid=currentItem.getGuid();
            if (currentItem.getDate() != null) {
              DateComponentFactory.createDateComponentWithYear(""String_Node_Str"" + guid,currentItem.getDate(),vcItems);
            }
            createCommentsAndRatingsLink(ureq,feed,currentItem);
            naviCtr.add(currentItem);
            helper.addItem(currentItem);
            if (feed.getItems().size() == 1) {
              fireEvent(ureq,ItemsController.FEED_INFO_IS_DIRTY_EVENT);
              helper.setURIs();
            }
            ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_CREATE,getClass(),LoggingResourceable.wrap(currentItem));
          }
 else {
            feedManager.updateItem(currentItem,mediaFile,feed);
            helper.updateItem(currentItem);
            ThreadLocalUserActivityLogger.log(FeedLoggingAction.FEED_ITEM_EDIT,getClass(),LoggingResourceable.wrap(currentItem));
          }
        }
        vcItems.setDirty(true);
        if (itemCtr != null) {
          itemCtr.getInitialComponent().setDirty(true);
        }
      }
 else       if (event.equals(Event.CANCELLED_EVENT)) {
        cleanupTmpItemMediaDir(currentItem,feed,feedManager);
        if (!feed.hasItems()) {
          feedManager.updateFeedMode(null,feed);
          makeInternalAndExternalButtons();
        }
      }
      feedManager.releaseLock(lock);
      cmc.deactivate();
      removeAsListenerAndDispose(cmc);
      cmc=null;
      removeAsListenerAndDispose(itemFormCtr);
      itemFormCtr=null;
    }
  }
 else   if (source == naviCtr && event instanceof NavigationEvent) {
    List<? extends Dated> selItems=((NavigationEvent)event).getSelectedItems();
    List<Item> items=new ArrayList<Item>();
    for (    Dated item : selItems) {
      if (item instanceof Item) {
        items.add((Item)item);
      }
    }
    Collections.sort(items,new ItemPublishDateComparator());
    helper.setSelectedItems(items);
    if (callback.mayEditItems() || callback.mayCreateItems()) {
      createEditButtons(ureq,feed);
    }
    createCommentsAndRatingsLinks(ureq,feed);
    vcItems.setDirty(true);
    mainPanel.setContent(vcItems);
  }
 else   if (source == itemCtr) {
    if (event == Event.BACK_EVENT) {
      mainPanel.setContent(vcItems);
    }
  }
 else   if (source instanceof UserCommentsAndRatingsController) {
    UserCommentsAndRatingsController commentsRatingsCtr=(UserCommentsAndRatingsController)source;
    if (event == UserCommentsAndRatingsController.EVENT_COMMENT_LINK_CLICKED) {
      Item item=(Item)commentsRatingsCtr.getUserObject();
      ItemController myItemCtr=displayItemController(ureq,item);
      List<ContextEntry> entries=BusinessControlFactory.getInstance().createCEListFromResourceType(ItemController.ACTIVATION_KEY_COMMENTS);
      myItemCtr.activate(ureq,entries,null);
    }
  }
  if (!isSameAllItems(feed.getFilteredItems(callback,ureq.getIdentity()))) {
    resetItems(ureq,feed);
  }
}"
69942,"public boolean checkConnection(String url,String login,String password,int customerId) throws VmsNotAvailableException {
  try {
    LicenceServiceStub licenceWs=new LicenceServiceStub(url + ""String_Node_Str"");
    SecurityHeader.addAdminSecurityHeader(login,password,licenceWs);
    LicenceServiceStub.GetModulesForCustomerRequest licenceRequest=new LicenceServiceStub.GetModulesForCustomerRequest();
    licenceRequest.setCustomerid(viteroModule.getCustomerId());
    LicenceServiceStub.GetModulesForCustomerResponse response=licenceWs.getModulesForCustomer(licenceRequest);
    LicenceServiceStub.Modulestype modules=response.getGetModulesForCustomerResponse();
    LicenceServiceStub.Modules_type0 modulesType=modules.getModules();
    return modulesType != null;
  }
 catch (  AxisFault f) {
    ErrorCode code=handleAxisFault(f);
switch (code) {
case unsufficientRights:
      logError(""String_Node_Str"",f);
    break;
}
return false;
}
catch (Exception e) {
logWarn(""String_Node_Str"",e);
return false;
}
}","public boolean checkConnection(String url,String login,String password,int customerId) throws VmsNotAvailableException {
  try {
    LicenceServiceStub licenceWs=new LicenceServiceStub(url + ""String_Node_Str"");
    SecurityHeader.addAdminSecurityHeader(login,password,licenceWs);
    LicenceServiceStub.GetModulesForCustomerRequest licenceRequest=new LicenceServiceStub.GetModulesForCustomerRequest();
    licenceRequest.setCustomerid(viteroModule.getCustomerId());
    LicenceServiceStub.GetModulesForCustomerResponse response=licenceWs.getModulesForCustomer(licenceRequest);
    LicenceServiceStub.Modulestype modules=response.getGetModulesForCustomerResponse();
    LicenceServiceStub.Modules_type0 modulesType=modules.getModules();
    return modulesType != null;
  }
 catch (  AxisFault f) {
    ErrorCode code=handleAxisFault(f);
switch (code) {
case unsufficientRights:
      logError(""String_Node_Str"",f);
    break;
default :
  logAxisError(""String_Node_Str"",f);
}
return false;
}
catch (Exception e) {
logWarn(""String_Node_Str"",e);
return false;
}
}"
69943,"public boolean isUserOf(ViteroBooking booking,Identity identity) throws VmsNotAvailableException {
  boolean member=false;
  int userId=getVmsUserId(identity,false);
  if (userId > 0) {
    Usertype[] users=getVmsUsersByGroup(booking.getGroupId());
    if (users != null) {
      for (      Usertype user : users) {
        if (userId == user.getId()) {
          member=true;
        }
      }
    }
  }
  return member;
}","public boolean isUserOf(ViteroBooking booking,Identity identity) throws VmsNotAvailableException {
  boolean member=false;
  GetUserInfo userInfo=getVmsUserId(identity,false);
  int userId=userInfo.getUserId();
  if (userId > 0) {
    Usertype[] users=getVmsUsersByGroup(booking.getGroupId());
    if (users != null) {
      for (      Usertype user : users) {
        if (userId == user.getId()) {
          member=true;
        }
      }
    }
  }
  return member;
}"
69944,"protected int getVmsUserId(Identity identity,boolean create) throws VmsNotAvailableException {
  int userId;
  Authentication authentication=securityManager.findAuthentication(identity,VMS_PROVIDER);
  if (authentication == null) {
    if (create) {
      userId=createVmsUser(identity);
      if (userId > 0) {
        securityManager.createAndPersistAuthentication(identity,VMS_PROVIDER,Integer.toString(userId),""String_Node_Str"");
      }
    }
 else {
      userId=-1;
    }
  }
 else {
    userId=Integer.parseInt(authentication.getAuthusername());
  }
  return userId;
}","protected GetUserInfo getVmsUserId(Identity identity,boolean create) throws VmsNotAvailableException {
  int userId;
  boolean created=false;
  closeDBSessionSafely();
  Authentication authentication=securityManager.findAuthentication(identity,VMS_PROVIDER);
  if (authentication == null) {
    if (create) {
      created=true;
      userId=createVmsUser(identity);
      if (userId > 0) {
        securityManager.createAndPersistAuthentication(identity,VMS_PROVIDER,Integer.toString(userId),""String_Node_Str"");
      }
    }
 else {
      userId=-1;
    }
  }
 else {
    userId=Integer.parseInt(authentication.getAuthusername());
  }
  closeDBSessionSafely();
  return new GetUserInfo(created,userId);
}"
69945,"/** 
 * Create a session code with a one hour expiration date
 * @param identity
 * @param booking
 * @return
 */
protected String createVMSSessionCode(Identity identity) throws VmsNotAvailableException {
  try {
    int userId=getVmsUserId(identity,true);
    try {
      updateVmsUser(identity,userId);
      storePortrait(identity,userId);
    }
 catch (    Exception e) {
      logError(""String_Node_Str"" + identity.getName(),e);
    }
    SessionCodeServiceStub sessionCodeWs=getSessionCodeWebService();
    SessionCodeServiceStub.CreateVmsSessionCodeRequest codeRequest=new SessionCodeServiceStub.CreateVmsSessionCodeRequest();
    SessionCodeServiceStub.Sessioncode_type1 code=new SessionCodeServiceStub.Sessioncode_type1();
    code.setUserid(userId);
    code.setTimezone(viteroModule.getTimeZoneId());
    Calendar cal=Calendar.getInstance();
    cal.setTime(new Date());
    cal.add(Calendar.HOUR,1);
    code.setExpirationdate(format(cal.getTime()));
    codeRequest.setSessioncode(code);
    SessionCodeServiceStub.CreateVmsSessionCodeResponse response=sessionCodeWs.createVmsSessionCode(codeRequest);
    SessionCodeServiceStub.Codetype myCode=response.getCreateVmsSessionCodeResponse();
    return myCode.getCode();
  }
 catch (  AxisFault f) {
    ErrorCode code=handleAxisFault(f);
switch (code) {
case userDoesntExist:
      logError(""String_Node_Str"",f);
    break;
case userNotAssignedToGroup:
  logError(""String_Node_Str"",f);
break;
case invalidAttribut:
logError(""String_Node_Str"",f);
break;
case invalidTimezone:
logError(""String_Node_Str"",f);
break;
case bookingDoesntExist:
case bookingDoesntExistPrime:
logError(""String_Node_Str"",f);
break;
default :
logAxisError(""String_Node_Str"",f);
}
return null;
}
catch (RemoteException e) {
logError(""String_Node_Str"",e);
return null;
}
}","/** 
 * Create a session code with a one hour expiration date
 * @param identity
 * @param booking
 * @return
 */
protected String createVMSSessionCode(Identity identity) throws VmsNotAvailableException {
  try {
    GetUserInfo userInfo=getVmsUserId(identity,true);
    int userId=userInfo.getUserId();
    if (!userInfo.isCreated()) {
      try {
        updateVmsUser(identity,userId);
        storePortrait(identity,userId);
      }
 catch (      Exception e) {
        logError(""String_Node_Str"" + identity.getName(),e);
      }
    }
    SessionCodeServiceStub sessionCodeWs=getSessionCodeWebService();
    SessionCodeServiceStub.CreateVmsSessionCodeRequest codeRequest=new SessionCodeServiceStub.CreateVmsSessionCodeRequest();
    SessionCodeServiceStub.Sessioncode_type1 code=new SessionCodeServiceStub.Sessioncode_type1();
    code.setUserid(userId);
    code.setTimezone(viteroModule.getTimeZoneId());
    Calendar cal=Calendar.getInstance();
    cal.setTime(new Date());
    cal.add(Calendar.HOUR,1);
    code.setExpirationdate(format(cal.getTime()));
    codeRequest.setSessioncode(code);
    SessionCodeServiceStub.CreateVmsSessionCodeResponse response=sessionCodeWs.createVmsSessionCode(codeRequest);
    SessionCodeServiceStub.Codetype myCode=response.getCreateVmsSessionCodeResponse();
    return myCode.getCode();
  }
 catch (  AxisFault f) {
    ErrorCode code=handleAxisFault(f);
switch (code) {
case userDoesntExist:
      logError(""String_Node_Str"",f);
    break;
case userNotAssignedToGroup:
  logError(""String_Node_Str"",f);
break;
case invalidAttribut:
logError(""String_Node_Str"",f);
break;
case invalidTimezone:
logError(""String_Node_Str"",f);
break;
case bookingDoesntExist:
case bookingDoesntExistPrime:
logError(""String_Node_Str"",f);
break;
default :
logAxisError(""String_Node_Str"",f);
}
return null;
}
catch (RemoteException e) {
logError(""String_Node_Str"",e);
return null;
}
}"
69946,"public boolean addToRoom(ViteroBooking booking,Identity identity,GroupRole role) throws VmsNotAvailableException {
  try {
    int userId=getVmsUserId(identity,true);
    if (userId < 0) {
      return false;
    }
    try {
      updateVmsUser(identity,userId);
      storePortrait(identity,userId);
    }
 catch (    Exception e) {
      logError(""String_Node_Str"" + identity.getName(),e);
    }
    GroupServiceStub groupWs=getGroupWebService();
    GroupServiceStub.AddUserToGroupRequest addRequest=new GroupServiceStub.AddUserToGroupRequest();
    GroupServiceStub.Groupiduserid groupuserId=new GroupServiceStub.Groupiduserid();
    groupuserId.setGroupid(booking.getGroupId());
    groupuserId.setUserid(userId);
    addRequest.setAddUserToGroupRequest(groupuserId);
    groupWs.addUserToGroup(addRequest);
    if (role != null) {
      groupWs=getGroupWebService();
      GroupServiceStub.ChangeGroupRoleRequest roleRequest=new GroupServiceStub.ChangeGroupRoleRequest();
      roleRequest.setGroupid(booking.getGroupId());
      roleRequest.setUserid(userId);
      roleRequest.setRole(role.getVmsValue());
      groupWs.changeGroupRole(roleRequest);
    }
    return true;
  }
 catch (  AxisFault f) {
    ErrorCode code=handleAxisFault(f);
switch (code) {
case userDoesntExist:
      logError(""String_Node_Str"",f);
    break;
case userNotAttachedToCustomer:
  logError(""String_Node_Str"",f);
break;
case groupDoesntExist:
logError(""String_Node_Str"",f);
break;
case invalidAttribut:
logError(""String_Node_Str"",f);
break;
default :
logAxisError(""String_Node_Str"",f);
}
return false;
}
catch (RemoteException e) {
logError(""String_Node_Str"",e);
return false;
}
}","public boolean addToRoom(ViteroBooking booking,Identity identity,GroupRole role) throws VmsNotAvailableException {
  try {
    GetUserInfo userInfo=getVmsUserId(identity,true);
    int userId=userInfo.getUserId();
    if (userId < 0) {
      return false;
    }
    if (!userInfo.isCreated()) {
      try {
        updateVmsUser(identity,userId);
      }
 catch (      Exception e) {
        logError(""String_Node_Str"" + identity.getName(),e);
      }
    }
    GroupServiceStub groupWs=getGroupWebService();
    GroupServiceStub.AddUserToGroupRequest addRequest=new GroupServiceStub.AddUserToGroupRequest();
    GroupServiceStub.Groupiduserid groupuserId=new GroupServiceStub.Groupiduserid();
    groupuserId.setGroupid(booking.getGroupId());
    groupuserId.setUserid(userId);
    addRequest.setAddUserToGroupRequest(groupuserId);
    groupWs.addUserToGroup(addRequest);
    if (role != null) {
      groupWs=getGroupWebService();
      GroupServiceStub.ChangeGroupRoleRequest roleRequest=new GroupServiceStub.ChangeGroupRoleRequest();
      roleRequest.setGroupid(booking.getGroupId());
      roleRequest.setUserid(userId);
      roleRequest.setRole(role.getVmsValue());
      groupWs.changeGroupRole(roleRequest);
    }
    return true;
  }
 catch (  AxisFault f) {
    ErrorCode code=handleAxisFault(f);
switch (code) {
case userDoesntExist:
      logError(""String_Node_Str"",f);
    break;
case userNotAttachedToCustomer:
  logError(""String_Node_Str"",f);
break;
case groupDoesntExist:
logError(""String_Node_Str"",f);
break;
case invalidAttribut:
logError(""String_Node_Str"",f);
break;
default :
logAxisError(""String_Node_Str"",f);
}
return false;
}
catch (RemoteException e) {
logError(""String_Node_Str"",e);
return false;
}
}"
69947,"public List<ViteroBooking> getBookingInFutures(Identity identity) throws VmsNotAvailableException {
  int userId=getVmsUserId(identity,false);
  if (userId > 0) {
    Booking[] bookings=getBookingInFutureByUserId(userId);
    return convert(bookings);
  }
  return Collections.emptyList();
}","public List<ViteroBooking> getBookingInFutures(Identity identity) throws VmsNotAvailableException {
  GetUserInfo userInfo=getVmsUserId(identity,false);
  int userId=userInfo.getUserId();
  if (userId > 0) {
    Booking[] bookings=getBookingInFutureByUserId(userId);
    return convert(bookings);
  }
  return Collections.emptyList();
}"
69948,"/** 
 * Create a session code with a one hour expiration date
 * @param identity
 * @param booking
 * @return
 */
protected String createPersonalBookingSessionCode(Identity identity,ViteroBooking booking) throws VmsNotAvailableException {
  try {
    int userId=getVmsUserId(identity,true);
    try {
      updateVmsUser(identity,userId);
      storePortrait(identity,userId);
    }
 catch (    Exception e) {
      logError(""String_Node_Str"" + identity.getName(),e);
    }
    SessionCodeServiceStub sessionCodeWs=getSessionCodeWebService();
    SessionCodeServiceStub.CreatePersonalBookingSessionCodeRequest codeRequest=new SessionCodeServiceStub.CreatePersonalBookingSessionCodeRequest();
    SessionCodeServiceStub.Sessioncode_type2 code=new SessionCodeServiceStub.Sessioncode_type2();
    code.setBookingid(booking.getBookingId());
    code.setUserid(userId);
    code.setTimezone(viteroModule.getTimeZoneId());
    Calendar cal=Calendar.getInstance();
    cal.setTime(new Date());
    cal.add(Calendar.HOUR,1);
    code.setExpirationdate(format(cal.getTime()));
    codeRequest.setSessioncode(code);
    SessionCodeServiceStub.CreatePersonalBookingSessionCodeResponse response=sessionCodeWs.createPersonalBookingSessionCode(codeRequest);
    Codetype myCode=response.getCreatePersonalBookingSessionCodeResponse();
    return myCode.getCode();
  }
 catch (  AxisFault f) {
    ErrorCode code=handleAxisFault(f);
switch (code) {
case userDoesntExist:
      logError(""String_Node_Str"",f);
    break;
case userNotAssignedToGroup:
  logError(""String_Node_Str"",f);
break;
case invalidAttribut:
logError(""String_Node_Str"",f);
break;
case invalidTimezone:
logError(""String_Node_Str"",f);
break;
case bookingDoesntExist:
case bookingDoesntExistPrime:
logError(""String_Node_Str"",f);
break;
default :
logAxisError(""String_Node_Str"",f);
}
return null;
}
catch (RemoteException e) {
logError(""String_Node_Str"",e);
return null;
}
}","/** 
 * Create a session code with a one hour expiration date
 * @param identity
 * @param booking
 * @return
 */
protected String createPersonalBookingSessionCode(Identity identity,ViteroBooking booking) throws VmsNotAvailableException {
  try {
    GetUserInfo userInfo=getVmsUserId(identity,true);
    int userId=userInfo.getUserId();
    if (!userInfo.isCreated()) {
      try {
        updateVmsUser(identity,userId);
        storePortrait(identity,userId);
      }
 catch (      Exception e) {
        logError(""String_Node_Str"" + identity.getName(),e);
      }
    }
    SessionCodeServiceStub sessionCodeWs=getSessionCodeWebService();
    SessionCodeServiceStub.CreatePersonalBookingSessionCodeRequest codeRequest=new SessionCodeServiceStub.CreatePersonalBookingSessionCodeRequest();
    SessionCodeServiceStub.Sessioncode_type2 code=new SessionCodeServiceStub.Sessioncode_type2();
    code.setBookingid(booking.getBookingId());
    code.setUserid(userId);
    code.setTimezone(viteroModule.getTimeZoneId());
    Calendar cal=Calendar.getInstance();
    cal.setTime(new Date());
    cal.add(Calendar.HOUR,1);
    code.setExpirationdate(format(cal.getTime()));
    codeRequest.setSessioncode(code);
    SessionCodeServiceStub.CreatePersonalBookingSessionCodeResponse response=sessionCodeWs.createPersonalBookingSessionCode(codeRequest);
    Codetype myCode=response.getCreatePersonalBookingSessionCodeResponse();
    return myCode.getCode();
  }
 catch (  AxisFault f) {
    ErrorCode code=handleAxisFault(f);
switch (code) {
case userDoesntExist:
      logError(""String_Node_Str"",f);
    break;
case userNotAssignedToGroup:
  logError(""String_Node_Str"",f);
break;
case invalidAttribut:
logError(""String_Node_Str"",f);
break;
case invalidTimezone:
logError(""String_Node_Str"",f);
break;
case bookingDoesntExist:
case bookingDoesntExistPrime:
logError(""String_Node_Str"",f);
break;
default :
logAxisError(""String_Node_Str"",f);
}
return null;
}
catch (RemoteException e) {
logError(""String_Node_Str"",e);
return null;
}
}"
69949,"@Override public void deleteUserData(Identity identity,String newDeletedUserName){
  if (!viteroModule.isDeleteVmsUserOnUserDelete())   return;
  try {
    int userId=getVmsUserId(identity,false);
    if (userId > 0) {
      deleteVmsUser(userId);
    }
  }
 catch (  VmsNotAvailableException e) {
    logError(""String_Node_Str"",e);
  }
}","@Override public void deleteUserData(Identity identity,String newDeletedUserName){
  if (!viteroModule.isDeleteVmsUserOnUserDelete())   return;
  try {
    GetUserInfo userInfo=getVmsUserId(identity,false);
    int userId=userInfo.getUserId();
    if (userId > 0) {
      deleteVmsUser(userId);
    }
  }
 catch (  VmsNotAvailableException e) {
    logError(""String_Node_Str"",e);
  }
}"
69950,"protected int createVmsUser(Identity identity) throws VmsNotAvailableException {
  try {
    UserServiceStub userWs=getUserWebService();
    UserServiceStub.CreateUserRequest createRequest=new UserServiceStub.CreateUserRequest();
    UserServiceStub.Newusertype user=new UserServiceStub.Newusertype();
    User olatUser=identity.getUser();
    user.setUsername(""String_Node_Str"" + WebappHelper.getInstanceId() + ""String_Node_Str""+ identity.getName());
    user.setSurname(olatUser.getProperty(UserConstants.LASTNAME,null));
    user.setFirstname(olatUser.getProperty(UserConstants.FIRSTNAME,null));
    user.setEmail(olatUser.getProperty(UserConstants.EMAIL,null));
    user.setPassword(""String_Node_Str"");
    UserServiceStub.Idlist customerIds=new UserServiceStub.Idlist();
    customerIds.set_int(new int[]{viteroModule.getCustomerId()});
    user.setCustomeridlist(customerIds);
    String language=identity.getUser().getPreferences().getLanguage();
    if (StringHelper.containsNonWhitespace(language) && language.startsWith(""String_Node_Str"")) {
      user.setLocale(""String_Node_Str"");
    }
 else {
      user.setLocale(""String_Node_Str"");
    }
    user.setPcstate(""String_Node_Str"");
    user.setTimezone(viteroModule.getTimeZoneId());
    String street=olatUser.getProperty(UserConstants.STREET,null);
    if (StringHelper.containsNonWhitespace(street)) {
      user.setStreet(street);
    }
    String zip=olatUser.getProperty(UserConstants.ZIPCODE,null);
    if (StringHelper.containsNonWhitespace(zip)) {
      user.setZip(zip);
    }
    String city=olatUser.getProperty(UserConstants.CITY,null);
    if (StringHelper.containsNonWhitespace(city)) {
      user.setCity(city);
    }
    String country=olatUser.getProperty(UserConstants.COUNTRY,null);
    if (StringHelper.containsNonWhitespace(country)) {
      user.setCountry(country);
    }
    String mobile=olatUser.getProperty(UserConstants.TELMOBILE,null);
    if (StringHelper.containsNonWhitespace(mobile)) {
      user.setMobile(mobile);
    }
    String phonePrivate=olatUser.getProperty(UserConstants.TELPRIVATE,null);
    if (StringHelper.containsNonWhitespace(phonePrivate)) {
      user.setPhone(phonePrivate);
    }
    String phoneOffice=olatUser.getProperty(UserConstants.TELOFFICE,null);
    if (StringHelper.containsNonWhitespace(phoneOffice)) {
      user.setPhone(phoneOffice);
    }
    String institution=olatUser.getProperty(UserConstants.INSTITUTIONALNAME,null);
    if (StringHelper.containsNonWhitespace(institution)) {
      user.setCompany(institution);
    }
    user.setTechnicalnote(""String_Node_Str"");
    createRequest.setUser(user);
    UserServiceStub.CreateUserResponse response=userWs.createUser(createRequest);
    Userid userId=response.getCreateUserResponse();
    storePortrait(identity,userId.getUserid());
    return userId.getUserid();
  }
 catch (  AxisFault f) {
    ErrorCode code=handleAxisFault(f);
switch (code) {
default :
      logAxisError(""String_Node_Str"",f);
  }
  return -1;
}
catch (RemoteException e) {
  logError(""String_Node_Str"",e);
  return -1;
}
}","private final int createVmsUser(Identity identity) throws VmsNotAvailableException {
  String username=null;
  try {
    UserServiceStub userWs=getUserWebService();
    UserServiceStub.CreateUserRequest createRequest=new UserServiceStub.CreateUserRequest();
    UserServiceStub.Newusertype user=new UserServiceStub.Newusertype();
    User olatUser=identity.getUser();
    username=""String_Node_Str"" + WebappHelper.getInstanceId() + ""String_Node_Str""+ identity.getName();
    user.setUsername(username);
    user.setSurname(olatUser.getProperty(UserConstants.LASTNAME,null));
    user.setFirstname(olatUser.getProperty(UserConstants.FIRSTNAME,null));
    user.setEmail(olatUser.getProperty(UserConstants.EMAIL,null));
    user.setPassword(""String_Node_Str"");
    UserServiceStub.Idlist customerIds=new UserServiceStub.Idlist();
    customerIds.set_int(new int[]{viteroModule.getCustomerId()});
    user.setCustomeridlist(customerIds);
    String language=identity.getUser().getPreferences().getLanguage();
    if (StringHelper.containsNonWhitespace(language) && language.startsWith(""String_Node_Str"")) {
      user.setLocale(""String_Node_Str"");
    }
 else {
      user.setLocale(""String_Node_Str"");
    }
    user.setPcstate(""String_Node_Str"");
    user.setTimezone(viteroModule.getTimeZoneId());
    String street=olatUser.getProperty(UserConstants.STREET,null);
    if (StringHelper.containsNonWhitespace(street)) {
      user.setStreet(street);
    }
    String zip=olatUser.getProperty(UserConstants.ZIPCODE,null);
    if (StringHelper.containsNonWhitespace(zip)) {
      user.setZip(zip);
    }
    String city=olatUser.getProperty(UserConstants.CITY,null);
    if (StringHelper.containsNonWhitespace(city)) {
      user.setCity(city);
    }
    String country=olatUser.getProperty(UserConstants.COUNTRY,null);
    if (StringHelper.containsNonWhitespace(country)) {
      user.setCountry(country);
    }
    String mobile=olatUser.getProperty(UserConstants.TELMOBILE,null);
    if (StringHelper.containsNonWhitespace(mobile)) {
      user.setMobile(mobile);
    }
    String phonePrivate=olatUser.getProperty(UserConstants.TELPRIVATE,null);
    if (StringHelper.containsNonWhitespace(phonePrivate)) {
      user.setPhone(phonePrivate);
    }
    String phoneOffice=olatUser.getProperty(UserConstants.TELOFFICE,null);
    if (StringHelper.containsNonWhitespace(phoneOffice)) {
      user.setPhone(phoneOffice);
    }
    String institution=olatUser.getProperty(UserConstants.INSTITUTIONALNAME,null);
    if (StringHelper.containsNonWhitespace(institution)) {
      user.setCompany(institution);
    }
    user.setTechnicalnote(""String_Node_Str"");
    createRequest.setUser(user);
    UserServiceStub.CreateUserResponse response=userWs.createUser(createRequest);
    Userid userId=response.getCreateUserResponse();
    storePortrait(identity,userId.getUserid());
    return userId.getUserid();
  }
 catch (  AxisFault f) {
    ErrorCode code=handleAxisFault(f);
switch (code) {
default :
      logAxisError(""String_Node_Str"",f);
  }
  return -1;
}
catch (RemoteException e) {
  logError(""String_Node_Str"",e);
  return -1;
}
}"
69951,"private final void apache(HttpServletRequest request,long uploadLimit){
  ServletFileUpload uploadParser=new ServletFileUpload();
  uploadParser.setSizeMax((uploadLimit * 1024l) + 512000l);
  try {
    FileItemIterator iter=uploadParser.getItemIterator(request);
    while (iter.hasNext()) {
      FileItemStream item=iter.next();
      String itemName=item.getFieldName();
      InputStream itemStream=item.openStream();
      if (item.isFormField()) {
        String value=Streams.asString(itemStream,""String_Node_Str"");
        fields.put(itemName,value);
      }
 else {
        filename=item.getName();
        contentType=item.getContentType();
        if (filename != null) {
          filename=UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + filename;
        }
 else {
          filename=""String_Node_Str"" + UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"");
        }
        file=new File(System.getProperty(""String_Node_Str""),filename);
        try {
          save(itemStream,file);
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","private final void apache(HttpServletRequest request,long uploadLimit){
  ServletFileUpload uploadParser=new ServletFileUpload();
  uploadParser.setSizeMax((uploadLimit * 1024l) + 512000l);
  try {
    FileItemIterator iter=uploadParser.getItemIterator(request);
    while (iter.hasNext()) {
      FileItemStream item=iter.next();
      String itemName=item.getFieldName();
      InputStream itemStream=item.openStream();
      if (item.isFormField()) {
        String value=Streams.asString(itemStream,""String_Node_Str"");
        fields.put(itemName,value);
      }
 else {
        filename=item.getName();
        contentType=item.getContentType();
        if (filename != null) {
          filename=UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + filename;
        }
 else {
          filename=""String_Node_Str"" + UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"");
        }
        file=new File(System.getProperty(""String_Node_Str""),filename);
        try {
          save(itemStream,file);
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
        System.out.println(""String_Node_Str"" + file.length());
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}"
69952,"@Test @RunAsClient public void checkCollectForumPost() throws IOException, URISyntaxException {
  CourseVO course=functionalVOUtil.importAllElementsCourse(deploymentUrl);
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalCourseUtil.postForumMessage(browser,course.getRepoEntryKey(),0,FORUM_POST_TITLE,FORUM_POST_MESSAGE));
  Assert.assertTrue(functionalCourseUtil.addToEportfolio(browser,FORUM_BINDER,FORUM_PAGE,FORUM_STRUCTURE));
}","@Test @RunAsClient public void checkCollectForumPost() throws IOException, URISyntaxException {
  CourseVO course=functionalVOUtil.importAllElementsCourse(deploymentUrl);
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalCourseUtil.postForumMessage(browser,course.getRepoEntryKey(),0,FORUM_POST_TITLE,FORUM_POST_MESSAGE));
  Assert.assertTrue(functionalCourseUtil.addToEportfolio(browser,FORUM_BINDER,FORUM_PAGE,FORUM_STRUCTURE,FORUM_ARTEFACT_TITLE,FORUM_ARTEFACT_DESCRIPTION,FORUM_TAGS,functionalEportfolioUtil));
}"
69953,"@Test @RunAsClient public void checkCollectWikiArticle() throws URISyntaxException, IOException {
  RepositoryEntryVO vo=functionalVOUtil.importWiki(deploymentUrl);
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalCourseUtil.createWikiArticle(browser,vo.getKey(),WIKI_ARTICLE_PAGENAME,WIKI_ARTICLE_CONTENT));
  Assert.assertTrue(functionalCourseUtil.addToEportfolio(browser,WIKI_BINDER,WIKI_PAGE,WIKI_STRUCTURE));
}","@Test @RunAsClient public void checkCollectWikiArticle() throws URISyntaxException, IOException {
  RepositoryEntryVO vo=functionalVOUtil.importWiki(deploymentUrl);
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalCourseUtil.createWikiArticle(browser,vo.getKey(),WIKI_ARTICLE_PAGENAME,WIKI_ARTICLE_CONTENT));
  Assert.assertTrue(functionalCourseUtil.addToEportfolio(browser,WIKI_BINDER,WIKI_PAGE,WIKI_STRUCTURE,WIKI_ARTEFACT_TITLE,WIKI_ARTEFACT_DESCRIPTION,WIKI_TAGS,functionalEportfolioUtil));
}"
69954,"@Test @RunAsClient public void checkCollectBlogPost() throws URISyntaxException, IOException {
  long repoKey=functionalRepositorySiteUtil.createBlog(browser,BLOG_TITLE,BLOG_DESCRIPTION);
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalCourseUtil.createBlogEntry(browser,repoKey,BLOG_POST_TITLE,BLOG_POST_DESCRIPTION,BLOG_POST_CONTENT));
  Assert.assertTrue(functionalCourseUtil.addToEportfolio(browser,BLOG_BINDER,BLOG_PAGE,BLOG_STRUCTURE));
}","@Test @RunAsClient public void checkCollectBlogPost() throws URISyntaxException, IOException {
  long repoKey=functionalRepositorySiteUtil.createBlog(browser,BLOG_TITLE,BLOG_DESCRIPTION);
  Assert.assertTrue(functionalUtil.login(browser,user.getLogin(),user.getPassword(),true));
  Assert.assertTrue(functionalCourseUtil.createBlogEntry(browser,repoKey,BLOG_POST_TITLE,BLOG_POST_DESCRIPTION,BLOG_POST_CONTENT));
  Assert.assertTrue(functionalCourseUtil.addToEportfolio(browser,BLOG_BINDER,BLOG_PAGE,BLOG_STRUCTURE,BLOG_ARTEFACT_TITLE,BLOG_ARTEFACT_DESCRIPTION,BLOG_TAGS,functionalEportfolioUtil));
}"
69955,"/** 
 * @param browser
 * @return true on successAdds an artefact to eportfolio by clicking the appropriate button.
 */
public boolean addToEportfolio(Selenium browser,String binder,String page,String structure,FunctionalEPortfolioUtil functionalEPortfolioUtil){
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getEportfolioAddCss()).append(""String_Node_Str"");
  browser.click(selectorBuffer.toString());
  if (binder != null) {
  }
  return (true);
}","/** 
 * @param browser
 * @return true on successAdds an artefact to eportfolio by clicking the appropriate button.
 */
public boolean addToEportfolio(Selenium browser,String binder,String page,String structure,String title,String description,String tags,FunctionalEPortfolioUtil functionalEPortfolioUtil){
  if (!functionalEPortfolioUtil.createElements(browser,binder,page,structure))   return (false);
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"").append(getEportfolioAddCss()).append(""String_Node_Str"");
  browser.click(selectorBuffer.toString());
  if (binder != null) {
    functionalEPortfolioUtil.fillInTitleAndDescription(browser,title,description);
    functionalEPortfolioUtil.fillInTags(browser,tags);
    browser.click(functionalEPortfolioUtil.createSelector(binder,page,structure));
    functionalUtil.clickWizardFinish(browser);
  }
  return (true);
}"
69956,"/** 
 * @param browser
 * @param content
 * @param title
 * @param description
 * @param tags
 * @return Add a text artefact to a e-portfolio.
 */
public boolean addTextArtefact(Selenium browser,String binder,String page,String structure,String content,String title,String description,String tags){
  if (!functionalUtil.openSite(browser,OlatSite.HOME))   return (false);
  if (!functionalHomeSiteUtil.openActionByMenuTree(browser,EPortfolioAction.MY_ARTIFACTS))   return (false);
  openEditLink(browser);
  browser.waitForPageToLoad(functionalUtil.getWaitLimit());
  StringBuffer locatorBuffer=new StringBuffer();
  locatorBuffer.append(""String_Node_Str"").append(getAddTextArtefactCss()).append(""String_Node_Str"");
  browser.click(locatorBuffer.toString());
  browser.waitForPageToLoad(functionalUtil.getWaitLimit());
  functionalUtil.typeMCE(browser,content);
  functionalUtil.clickWizardNext(browser);
  fillInTitleAndDescription(browser,title,description);
  fillInTags(browser,tags);
  if (!createElements(browser,binder,page,structure))   return (false);
  browser.click(createSelector(binder,page,structure));
  functionalUtil.clickWizardFinish(browser);
  return (true);
}","/** 
 * @param browser
 * @param content
 * @param title
 * @param description
 * @param tags
 * @return Add a text artefact to a e-portfolio.
 */
public boolean addTextArtefact(Selenium browser,String binder,String page,String structure,String content,String title,String description,String tags){
  if (!createElements(browser,binder,page,structure))   return (false);
  if (!functionalUtil.openSite(browser,OlatSite.HOME))   return (false);
  if (!functionalHomeSiteUtil.openActionByMenuTree(browser,EPortfolioAction.MY_ARTIFACTS))   return (false);
  openEditLink(browser);
  browser.waitForPageToLoad(functionalUtil.getWaitLimit());
  StringBuffer locatorBuffer=new StringBuffer();
  locatorBuffer.append(""String_Node_Str"").append(getAddTextArtefactCss()).append(""String_Node_Str"");
  browser.click(locatorBuffer.toString());
  browser.waitForPageToLoad(functionalUtil.getWaitLimit());
  functionalUtil.typeMCE(browser,content);
  functionalUtil.clickWizardNext(browser);
  fillInTitleAndDescription(browser,title,description);
  fillInTags(browser,tags);
  browser.click(createSelector(binder,page,structure));
  functionalUtil.clickWizardFinish(browser);
  return (true);
}"
69957,"/** 
 * @param browser
 * @param binder
 * @param page
 * @param title
 * @return true if structural element exists otherwise falseChecks if structural element exists.
 */
public boolean structureExists(Selenium browser,String binder,String page,String title){
  StringBuffer selectorBuffer=new StringBuffer();
  if (browser.isElementPresent(selectorBuffer.toString())) {
    return (true);
  }
 else {
    return (false);
  }
}","/** 
 * @param browser
 * @param binder
 * @param page
 * @param title
 * @return true if structural element exists otherwise falseChecks if structural element exists.
 */
public boolean structureExists(Selenium browser,String binder,String page,String title){
  if (!openBinder(browser,binder))   return (false);
  StringBuffer selectorBuffer=new StringBuffer();
  if (browser.isElementPresent(selectorBuffer.toString())) {
    return (true);
  }
 else {
    return (false);
  }
}"
69958,"/** 
 * @param browser
 * @param title
 * @param description
 * @return true on successFills in the open wizard's title and description fields. 
 */
private boolean fillInTitleAndDescription(Selenium browser,String title,String description){
  StringBuffer locatorBuffer=new StringBuffer();
  locatorBuffer.append(""String_Node_Str"").append(functionalUtil.getWizardCss()).append(""String_Node_Str"");
  browser.type(locatorBuffer.toString(),title);
  functionalUtil.typeMCE(browser,description);
  functionalUtil.clickWizardNext(browser);
  return (true);
}","/** 
 * @param browser
 * @param title
 * @param description
 * @return true on successFills in the open wizard's title and description fields. 
 */
protected boolean fillInTitleAndDescription(Selenium browser,String title,String description){
  StringBuffer locatorBuffer=new StringBuffer();
  locatorBuffer.append(""String_Node_Str"").append(functionalUtil.getWizardCss()).append(""String_Node_Str"");
  browser.type(locatorBuffer.toString(),title);
  functionalUtil.typeMCE(browser,description);
  functionalUtil.clickWizardNext(browser);
  return (true);
}"
69959,"/** 
 * @param browser
 * @param tags
 * @return Fills in the open wizard's tags.
 */
private boolean fillInTags(Selenium browser,String tags){
  StringBuffer locatorBuffer=new StringBuffer();
  locatorBuffer.append(""String_Node_Str"").append(functionalUtil.getWizardCss()).append(""String_Node_Str"");
  browser.type(locatorBuffer.toString(),tags);
  functionalUtil.clickWizardNext(browser);
  return (true);
}","/** 
 * @param browser
 * @param tags
 * @return Fills in the open wizard's tags.
 */
protected boolean fillInTags(Selenium browser,String tags){
  StringBuffer locatorBuffer=new StringBuffer();
  locatorBuffer.append(""String_Node_Str"").append(functionalUtil.getWizardCss()).append(""String_Node_Str"");
  browser.type(locatorBuffer.toString(),tags);
  functionalUtil.clickWizardNext(browser);
  return (true);
}"
69960,"private UserSession(){
  init();
  CoordinatorManager.getInstance().getCoordinator().getEventBus().registerFor(this,null,ORES_USERSESSION);
  registeredWithBus=true;
  Logger.getLogger(getClass().getName()).debug(""String_Node_Str"");
}","private UserSession(){
  init();
  CoordinatorManager.getInstance().getCoordinator().getEventBus().registerFor(this,null,ORES_USERSESSION);
  registeredWithBus=true;
}"
69961,"private String getRedirectToURL(UserSession usess){
  ChiefController cc=(ChiefController)Windows.getWindows(usess).getAttribute(""String_Node_Str"");
  Window w=cc.getWindow();
  URLBuilder ubu=new URLBuilder(""String_Node_Str"",w.getInstanceId(),String.valueOf(w.getTimestamp()),null);
  StringOutput sout=new StringOutput(30);
  ubu.buildURI(sout,null,null);
  return WebappHelper.getServletContextPath() + DispatcherAction.PATH_AUTHENTICATED + sout.toString();
}","private String getRedirectToURL(UserSession usess){
  ChiefController cc=(ChiefController)Windows.getWindows(usess).getAttribute(""String_Node_Str"");
  Window w=cc.getWindow();
  URLBuilder ubu=new URLBuilder(WebappHelper.getServletContextPath() + DispatcherAction.PATH_AUTHENTICATED,w.getInstanceId(),String.valueOf(w.getTimestamp()),null);
  StringOutput sout=new StringOutput(30);
  ubu.buildURI(sout,null,null);
  return sout.toString();
}"
69962,"public void execute(HttpServletRequest request,HttpServletResponse response,String uriPrefix){
  final String origUri=request.getRequestURI();
  String restPart=origUri.substring(uriPrefix.length());
  try {
    restPart=URLDecoder.decode(restPart,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"",e);
  }
  String[] split=restPart.split(""String_Node_Str"");
  if (split.length % 2 != 0) {
    DispatcherAction.sendBadRequest(origUri,response);
    log.warn(""String_Node_Str"" + restPart);
    return;
  }
  String businessPath=""String_Node_Str"";
  for (int i=0; i < split.length; i=i + 2) {
    String key=split[i];
    if (key != null && key.startsWith(""String_Node_Str"")) {
      key=key.replace(""String_Node_Str"",""String_Node_Str"");
    }
    String value=split[i + 1];
    businessPath+=""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str"";
  }
  if (log.isDebug()) {
    log.debug(""String_Node_Str"" + origUri);
    log.debug(""String_Node_Str"" + restPart);
    log.debug(""String_Node_Str"" + businessPath);
  }
  try {
    BusinessControl bc=BusinessControlFactory.getInstance().createFromString(businessPath);
    if (!bc.hasContextEntry()) {
      DispatcherAction.sendBadRequest(origUri,response);
      return;
    }
  }
 catch (  Exception e) {
    DispatcherAction.sendBadRequest(origUri,response);
    log.warn(""String_Node_Str"" + origUri,e);
    return;
  }
  UserSession usess=UserSession.getUserSession(request);
  UserRequest ureq=null;
  try {
    ureq=new UserRequest(uriPrefix,request,response);
  }
 catch (  NumberFormatException nfe) {
    if (log.isDebug()) {
      log.debug(""String_Node_Str"" + request.getPathInfo());
    }
    DispatcherAction.sendBadRequest(request.getPathInfo(),response);
    return;
  }
  String xOlatToken=ureq.getParameter(RestSecurityHelper.SEC_TOKEN);
  if (xOlatToken != null) {
    RestSecurityBean securityBean=(RestSecurityBean)CoreSpringFactory.getBean(RestSecurityBean.class);
    Identity restIdentity=securityBean.getIdentity(xOlatToken);
    if (log.isDebug()) {
      if (restIdentity == null)       log.debug(""String_Node_Str"" + RestSecurityHelper.SEC_TOKEN + ""String_Node_Str"");
 else       log.debug(""String_Node_Str"" + RestSecurityHelper.SEC_TOKEN + ""String_Node_Str""+ restIdentity.getName());
    }
    if (restIdentity != null) {
      if (!usess.isAuthenticated() || !restIdentity.equalsByPersistableKey(usess.getIdentity())) {
        int loginStatus=AuthHelper.doLogin(restIdentity,RestSecurityHelper.SEC_TOKEN,ureq);
        if (loginStatus == AuthHelper.LOGIN_OK) {
          UserDeletionManager.getInstance().setIdentityAsActiv(restIdentity);
        }
 else {
          DispatcherAction.redirectToDefaultDispatcher(response);
        }
      }
 else       if (Windows.getWindows(usess).getAttribute(""String_Node_Str"") == null) {
        AuthHelper.createAuthHome(ureq);
      }
    }
  }
  boolean auth=usess.isAuthenticated();
  if (auth) {
    setBusinessPathInUserSession(usess,businessPath);
    if (Windows.getWindows(usess).getAttribute(""String_Node_Str"") == null) {
      AuthHelper.createAuthHome(ureq);
      String url=getRedirectToURL(usess) + ""String_Node_Str"" + usess.getSessionInfo().getSession().getId();
      DispatcherAction.redirectTo(response,url);
    }
 else {
      String url=getRedirectToURL(usess);
      DispatcherAction.redirectTo(response,url);
    }
  }
 else {
    setBusinessPathInUserSession(usess,businessPath);
    String invitationAccess=ureq.getParameter(AuthenticatedDispatcher.INVITATION);
    if (invitationAccess != null && LoginModule.isInvitationEnabled()) {
      Locale guestLoc=getLang(ureq);
      int loginStatus=AuthHelper.doInvitationLogin(invitationAccess,ureq,guestLoc);
      if (loginStatus == AuthHelper.LOGIN_OK) {
        Identity invite=usess.getIdentity();
        UserDeletionManager.getInstance().setIdentityAsActiv(invite);
        String url=getRedirectToURL(usess);
        DispatcherAction.redirectTo(response,url);
      }
 else       if (loginStatus == AuthHelper.LOGIN_NOTAVAILABLE) {
        DispatcherAction.redirectToServiceNotAvailable(response);
      }
 else {
        DispatcherAction.redirectToDefaultDispatcher(response);
      }
    }
 else {
      String guestAccess=ureq.getParameter(AuthenticatedDispatcher.GUEST);
      if (guestAccess == null || !LoginModule.isGuestLoginLinksEnabled()) {
        DispatcherAction.redirectToDefaultDispatcher(response);
        return;
      }
 else       if (guestAccess.equals(AuthenticatedDispatcher.TRUE)) {
        Locale guestLoc=getLang(ureq);
        int loginStatus=AuthHelper.doAnonymousLogin(ureq,guestLoc);
        if (loginStatus == AuthHelper.LOGIN_OK) {
          String url=getRedirectToURL(usess);
          DispatcherAction.redirectTo(response,url);
        }
 else         if (loginStatus == AuthHelper.LOGIN_NOTAVAILABLE) {
          DispatcherAction.redirectToServiceNotAvailable(response);
        }
 else {
          DispatcherAction.redirectToDefaultDispatcher(response);
        }
      }
    }
  }
}","public void execute(HttpServletRequest request,HttpServletResponse response,String uriPrefix){
  final String origUri=request.getRequestURI();
  String restPart=origUri.substring(uriPrefix.length());
  try {
    restPart=URLDecoder.decode(restPart,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"",e);
  }
  String[] split=restPart.split(""String_Node_Str"");
  if (split.length % 2 != 0) {
    DispatcherAction.sendBadRequest(origUri,response);
    log.warn(""String_Node_Str"" + restPart);
    return;
  }
  String businessPath=""String_Node_Str"";
  for (int i=0; i < split.length; i=i + 2) {
    String key=split[i];
    if (key != null && key.startsWith(""String_Node_Str"")) {
      key=key.replace(""String_Node_Str"",""String_Node_Str"");
    }
    String value=split[i + 1];
    businessPath+=""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str"";
  }
  if (log.isDebug()) {
    log.debug(""String_Node_Str"" + origUri);
    log.debug(""String_Node_Str"" + restPart);
    log.debug(""String_Node_Str"" + businessPath);
  }
  try {
    BusinessControl bc=BusinessControlFactory.getInstance().createFromString(businessPath);
    if (!bc.hasContextEntry()) {
      DispatcherAction.sendBadRequest(origUri,response);
      return;
    }
  }
 catch (  Exception e) {
    DispatcherAction.sendBadRequest(origUri,response);
    log.warn(""String_Node_Str"" + origUri,e);
    return;
  }
  UserSession usess=UserSession.getUserSession(request);
  UserRequest ureq=null;
  try {
    ureq=new UserRequest(uriPrefix,request,response);
  }
 catch (  NumberFormatException nfe) {
    if (log.isDebug()) {
      log.debug(""String_Node_Str"" + request.getPathInfo());
    }
    DispatcherAction.sendBadRequest(request.getPathInfo(),response);
    return;
  }
  String xOlatToken=ureq.getParameter(RestSecurityHelper.SEC_TOKEN);
  if (xOlatToken != null) {
    RestSecurityBean securityBean=(RestSecurityBean)CoreSpringFactory.getBean(RestSecurityBean.class);
    Identity restIdentity=securityBean.getIdentity(xOlatToken);
    if (log.isDebug()) {
      if (restIdentity == null)       log.debug(""String_Node_Str"" + RestSecurityHelper.SEC_TOKEN + ""String_Node_Str"");
 else       log.debug(""String_Node_Str"" + RestSecurityHelper.SEC_TOKEN + ""String_Node_Str""+ restIdentity.getName());
    }
    if (restIdentity != null) {
      if (!usess.isAuthenticated() || !restIdentity.equalsByPersistableKey(usess.getIdentity())) {
        int loginStatus=AuthHelper.doLogin(restIdentity,RestSecurityHelper.SEC_TOKEN,ureq);
        if (loginStatus == AuthHelper.LOGIN_OK) {
          UserDeletionManager.getInstance().setIdentityAsActiv(restIdentity);
        }
 else {
          DispatcherAction.redirectToDefaultDispatcher(response);
        }
      }
 else       if (Windows.getWindows(usess).getAttribute(""String_Node_Str"") == null) {
        Window currentWindow=AuthHelper.createAuthHome(ureq).getWindow();
        currentWindow.setUriPrefix(WebappHelper.getServletContextPath() + DispatcherAction.PATH_AUTHENTICATED);
        Windows ws=Windows.getWindows(ureq);
        ws.registerWindow(currentWindow);
      }
    }
  }
  boolean auth=usess.isAuthenticated();
  if (auth) {
    setBusinessPathInUserSession(usess,businessPath);
    if (Windows.getWindows(usess).getAttribute(""String_Node_Str"") == null) {
      AuthHelper.createAuthHome(ureq);
      String url=getRedirectToURL(usess) + ""String_Node_Str"" + usess.getSessionInfo().getSession().getId();
      DispatcherAction.redirectTo(response,url);
    }
 else {
      String url=getRedirectToURL(usess);
      DispatcherAction.redirectTo(response,url);
    }
  }
 else {
    setBusinessPathInUserSession(usess,businessPath);
    String invitationAccess=ureq.getParameter(AuthenticatedDispatcher.INVITATION);
    if (invitationAccess != null && LoginModule.isInvitationEnabled()) {
      Locale guestLoc=getLang(ureq);
      int loginStatus=AuthHelper.doInvitationLogin(invitationAccess,ureq,guestLoc);
      if (loginStatus == AuthHelper.LOGIN_OK) {
        Identity invite=usess.getIdentity();
        UserDeletionManager.getInstance().setIdentityAsActiv(invite);
        String url=getRedirectToURL(usess);
        DispatcherAction.redirectTo(response,url);
      }
 else       if (loginStatus == AuthHelper.LOGIN_NOTAVAILABLE) {
        DispatcherAction.redirectToServiceNotAvailable(response);
      }
 else {
        DispatcherAction.redirectToDefaultDispatcher(response);
      }
    }
 else {
      String guestAccess=ureq.getParameter(AuthenticatedDispatcher.GUEST);
      if (guestAccess == null || !LoginModule.isGuestLoginLinksEnabled()) {
        DispatcherAction.redirectToDefaultDispatcher(response);
        return;
      }
 else       if (guestAccess.equals(AuthenticatedDispatcher.TRUE)) {
        Locale guestLoc=getLang(ureq);
        int loginStatus=AuthHelper.doAnonymousLogin(ureq,guestLoc);
        if (loginStatus == AuthHelper.LOGIN_OK) {
          String url=getRedirectToURL(usess);
          DispatcherAction.redirectTo(response,url);
        }
 else         if (loginStatus == AuthHelper.LOGIN_NOTAVAILABLE) {
          DispatcherAction.redirectToServiceNotAvailable(response);
        }
 else {
          DispatcherAction.redirectToDefaultDispatcher(response);
        }
      }
    }
  }
}"
69963,"@Test @RunAsClient public void checkSettings() throws IOException, URISyntaxException, InterruptedException {
  List<UserVO> userVO=functionalVOUtil.createTestUsers(deploymentUrl,1);
  Assert.assertTrue(functionalUtil.login(browser));
  Assert.assertTrue(functionalHomeSiteUtil.resetSettings(browser));
  functionalHomeSiteUtil.selectLanguage(browser,FunctionalHomeSiteUtil.GERMAN_LANGUAGE_VALUE);
  functionalHomeSiteUtil.disableResume(browser);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser));
  functionalHomeSiteUtil.beginEditingPortal(browser);
  if (functionalHomeSiteUtil.deactivatePortlet(browser,functionalHomeSiteUtil.getPortletEffCss())) {
    Assert.assertFalse(functionalHomeSiteUtil.checkPortletActive(browser,functionalHomeSiteUtil.getPortletEffCss()));
  }
  if (functionalHomeSiteUtil.activatePortlet(browser,functionalHomeSiteUtil.getPortletNotesCss())) {
    Assert.assertTrue(functionalHomeSiteUtil.checkPortletActive(browser,functionalHomeSiteUtil.getPortletNotesCss()));
  }
  int oldPositionDyk[]=functionalHomeSiteUtil.findPortletPosition(browser,functionalHomeSiteUtil.getPortletDykCss(),portalColumnCount);
  if (functionalHomeSiteUtil.movePortlet(browser,functionalHomeSiteUtil.getPortletDykCss(),FunctionalHomeSiteUtil.Direction.UP)) {
    browser.refresh();
    int newPosition[]=functionalHomeSiteUtil.findPortletPosition(browser,functionalHomeSiteUtil.getPortletDykCss(),portalColumnCount);
    Assert.assertEquals(oldPositionDyk[1],newPosition[1] + 1);
  }
  int oldPositionNoti[]=functionalHomeSiteUtil.findPortletPosition(browser,functionalHomeSiteUtil.getPortletNotiCss(),portalColumnCount);
  if (functionalHomeSiteUtil.movePortlet(browser,functionalHomeSiteUtil.getPortletNotiCss(),FunctionalHomeSiteUtil.Direction.LEFT)) {
    int newPosition[]=functionalHomeSiteUtil.findPortletPosition(browser,functionalHomeSiteUtil.getPortletNotiCss(),portalColumnCount);
    Assert.assertEquals(oldPositionNoti[0] - 1,newPosition[0]);
  }
  functionalHomeSiteUtil.endEditingPortal(browser);
  functionalHomeSiteUtil.openActionByMenuTree(browser,FunctionalHomeSiteUtil.HomeSiteAction.SETTINGS);
  functionalUtil.openContentTab(browser,SettingsTab.SYSTEM.ordinal());
  functionalHomeSiteUtil.selectLanguage(browser,FunctionalHomeSiteUtil.ENGLISH_LANGUAGE_VALUE);
  functionalHomeSiteUtil.enableBack(browser);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser));
  HashMap<String,String> pages=new HashMap<String,String>();
  Iterator iter=pages.keySet().iterator();
  while (iter.hasNext()) {
    Map.Entry pairs=(Map.Entry)iter.next();
    browser.click((String)pairs.getKey());
  }
  String[] keys=(String[])pages.entrySet().toArray();
  for (int i=pages.size() - 1; i >= 0; i--) {
    browser.goBack();
    Assert.assertTrue(browser.isElementPresent(pages.get(keys[i])));
  }
  UserVO current=userVO.get(0);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser,current.getLogin(),current.getPassword(),true));
  functionalUtil.openSite(browser,FunctionalUtil.OlatSite.HOME);
  functionalHomeSiteUtil.openActionByMenuTree(browser,FunctionalHomeSiteUtil.HomeSiteAction.SETTINGS);
  String newPassword=""String_Node_Str"" + 0 + ""String_Node_Str""+ UUID.randomUUID().toString();
  functionalUtil.openContentTab(browser,SettingsTab.PASSWORD.ordinal());
  functionalUtil.typePassword(browser,functionalHomeSiteUtil.getOldPasswordCss(),functionalUtil.getPassword());
  functionalUtil.typePassword(browser,functionalHomeSiteUtil.getNewPasswordCss(),newPassword);
  functionalUtil.typePassword(browser,functionalHomeSiteUtil.getConfirmPasswordCss(),newPassword);
  functionalUtil.saveForm(browser,0);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser,current.getLogin(),newPassword,true));
  functionalHomeSiteUtil.endEditingPortal(browser);
}","@Test @RunAsClient public void checkSettings() throws IOException, URISyntaxException, InterruptedException {
  List<UserVO> userVO=functionalVOUtil.createTestUsers(deploymentUrl,1);
  Assert.assertTrue(functionalUtil.login(browser));
  Assert.assertTrue(functionalHomeSiteUtil.resetSettings(browser));
  Assert.assertTrue(functionalUtil.login(browser));
  functionalHomeSiteUtil.selectLanguage(browser,FunctionalHomeSiteUtil.GERMAN_LANGUAGE_VALUE);
  functionalHomeSiteUtil.disableResume(browser);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser));
  functionalHomeSiteUtil.beginEditingPortal(browser);
  if (functionalHomeSiteUtil.deactivatePortlet(browser,functionalHomeSiteUtil.getPortletEffCss())) {
    Assert.assertFalse(functionalHomeSiteUtil.checkPortletActive(browser,functionalHomeSiteUtil.getPortletEffCss()));
  }
  if (functionalHomeSiteUtil.activatePortlet(browser,functionalHomeSiteUtil.getPortletNotesCss())) {
    Assert.assertTrue(functionalHomeSiteUtil.checkPortletActive(browser,functionalHomeSiteUtil.getPortletNotesCss()));
  }
  int oldPositionDyk[]=functionalHomeSiteUtil.findPortletPosition(browser,functionalHomeSiteUtil.getPortletDykCss(),portalColumnCount);
  if (functionalHomeSiteUtil.movePortlet(browser,functionalHomeSiteUtil.getPortletDykCss(),FunctionalHomeSiteUtil.Direction.UP)) {
    browser.refresh();
    int newPosition[]=functionalHomeSiteUtil.findPortletPosition(browser,functionalHomeSiteUtil.getPortletDykCss(),portalColumnCount);
    Assert.assertEquals(oldPositionDyk[1],newPosition[1] + 1);
  }
  int oldPositionNoti[]=functionalHomeSiteUtil.findPortletPosition(browser,functionalHomeSiteUtil.getPortletNotiCss(),portalColumnCount);
  if (functionalHomeSiteUtil.movePortlet(browser,functionalHomeSiteUtil.getPortletNotiCss(),FunctionalHomeSiteUtil.Direction.LEFT)) {
    int newPosition[]=functionalHomeSiteUtil.findPortletPosition(browser,functionalHomeSiteUtil.getPortletNotiCss(),portalColumnCount);
    Assert.assertEquals(oldPositionNoti[0] - 1,newPosition[0]);
  }
  functionalHomeSiteUtil.endEditingPortal(browser);
  functionalHomeSiteUtil.openActionByMenuTree(browser,FunctionalHomeSiteUtil.HomeSiteAction.SETTINGS);
  functionalUtil.openContentTab(browser,SettingsTab.SYSTEM.ordinal());
  functionalHomeSiteUtil.selectLanguage(browser,FunctionalHomeSiteUtil.ENGLISH_LANGUAGE_VALUE);
  functionalHomeSiteUtil.enableBack(browser);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser));
  LinkedHashMap<String,String> pages=new LinkedHashMap<String,String>();
  FunctionalLocatorPairsFactory pairsFactory=new FunctionalLocatorPairsFactory(functionalUtil);
  pages.put(pairsFactory.getLocatorOfSite(functionalUtil.getOlatSiteHomeCss()),pairsFactory.getApprovalOfSite(functionalUtil.getOlatSiteHomeCss()));
  pages.put(pairsFactory.getLocatorOfSite(functionalUtil.getOlatSiteAdministrationCss()),pairsFactory.getApprovalOfSite(functionalUtil.getOlatSiteAdministrationCss()));
  pages.put(pairsFactory.getLocatorOfSite(functionalUtil.getOlatSiteGroupAdministrationCss()),pairsFactory.getApprovalOfSite(functionalUtil.getOlatSiteGroupAdministrationCss()));
  pages.put(pairsFactory.getLocatorOfSite(functionalUtil.getOlatSiteGroupsCss()),pairsFactory.getApprovalOfSite(functionalUtil.getOlatSiteGroupsCss()));
  pages.put(pairsFactory.getLocatorOfSite(functionalUtil.getOlatSiteLearningResourcesCss()),pairsFactory.getApprovalOfSite(functionalUtil.getOlatSiteLearningResourcesCss()));
  pages.put(pairsFactory.getLocatorOfSite(functionalUtil.getOlatSiteUserManagementCss()),pairsFactory.getApprovalOfSite(functionalUtil.getOlatSiteUserManagementCss()));
  String[] keys=pages.keySet().toArray(new String[0]);
  String[] values=(String[])pages.values().toArray(new String[0]);
  int i;
  for (i=0; i < pages.size(); i++) {
    browser.click(keys[i]);
    browser.waitForPageToLoad(functionalUtil.getWaitLimit());
    functionalUtil.waitForPageToLoadElement(browser,values[i]);
  }
  i=pages.size() - 1;
  Assert.assertTrue(browser.isElementPresent(values[i]));
  i--;
  for (; i >= 0; i--) {
    browser.goBack();
    browser.waitForPageToLoad(functionalUtil.getWaitLimit());
    functionalUtil.waitForPageToLoadElement(browser,values[i]);
    Assert.assertTrue(browser.isElementPresent(values[i]));
  }
  UserVO current=userVO.get(0);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser,current.getLogin(),current.getPassword(),true));
  functionalUtil.openSite(browser,FunctionalUtil.OlatSite.HOME);
  functionalHomeSiteUtil.openActionByMenuTree(browser,FunctionalHomeSiteUtil.HomeSiteAction.SETTINGS);
  String newPassword=(""String_Node_Str"" + 0 + ""String_Node_Str""+ UUID.randomUUID().toString()).substring(0,24);
  functionalUtil.openContentTab(browser,SettingsTab.PASSWORD.ordinal());
  functionalUtil.typePassword(browser,functionalHomeSiteUtil.getOldPasswordCss(),functionalUtil.getPassword());
  functionalUtil.typePassword(browser,functionalHomeSiteUtil.getNewPasswordCss(),newPassword);
  functionalUtil.typePassword(browser,functionalHomeSiteUtil.getConfirmPasswordCss(),newPassword);
  functionalUtil.saveForm(browser,0);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser,current.getLogin(),newPassword,true));
}"
69964,"/** 
 * @param browser
 * @return true on successResets portal settings to default.
 */
public boolean resetSettings(Selenium browser){
  log.info(""String_Node_Str"");
  functionalUtil.openSite(browser,OlatSite.HOME);
  log.info(""String_Node_Str"");
  if (!openActionByMenuTree(browser,HomeSiteAction.SETTINGS)) {
    return (false);
  }
  log.info(""String_Node_Str"");
  functionalUtil.openContentTab(browser,SettingsTab.SYSTEM.ordinal());
  log.info(""String_Node_Str"");
  functionalUtil.clickCheckbox(browser,CONFIGURATIONS_CSS,GUI_PREFERENCES_VALUE);
  functionalUtil.clickCheckbox(browser,CONFIGURATIONS_CSS,SYS_PREFERENCES_VALUE);
  functionalUtil.clickCheckbox(browser,CONFIGURATIONS_CSS,RESUME_VALUE);
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"");
  selectorBuffer.append(getSysprefsButtonsCss());
  selectorBuffer.append(""String_Node_Str"");
  selectorBuffer.append(""String_Node_Str"");
  log.info(""String_Node_Str"");
  browser.click(selectorBuffer.toString());
  browser.waitForPageToLoad(functionalUtil.getWaitLimit());
  functionalUtil.waitForPageToLoadElement(browser,selectorBuffer.toString());
  return (true);
}","/** 
 * @param browser
 * @return true on successResets portal settings to default.
 */
public boolean resetSettings(Selenium browser){
  log.info(""String_Node_Str"");
  functionalUtil.openSite(browser,OlatSite.HOME);
  log.info(""String_Node_Str"");
  if (!openActionByMenuTree(browser,HomeSiteAction.SETTINGS)) {
    return (false);
  }
  log.info(""String_Node_Str"");
  functionalUtil.openContentTab(browser,SettingsTab.SYSTEM.ordinal());
  log.info(""String_Node_Str"");
  functionalUtil.clickCheckbox(browser,CONFIGURATIONS_CSS,GUI_PREFERENCES_VALUE);
  functionalUtil.clickCheckbox(browser,CONFIGURATIONS_CSS,SYS_PREFERENCES_VALUE);
  functionalUtil.clickCheckbox(browser,CONFIGURATIONS_CSS,RESUME_VALUE);
  StringBuffer selectorBuffer=new StringBuffer();
  selectorBuffer.append(""String_Node_Str"");
  selectorBuffer.append(getSysprefsButtonsCss());
  selectorBuffer.append(""String_Node_Str"");
  selectorBuffer.append(""String_Node_Str"");
  log.info(""String_Node_Str"");
  browser.click(selectorBuffer.toString());
  browser.waitForPageToLoad(functionalUtil.getWaitLimit());
  return (true);
}"
69965,"/** 
 * @param browser
 * @param portletCss
 * @param columnCount the count of columns to scan for
 * @return the x and y position of the portlet, the result may be null ifthe portlet is inactive or doesn't exists. Find the position of the portlet within the portal.
 */
public int[] findPortletPosition(Selenium browser,String portletCss,int columnCount){
  for (int i=0; i < columnCount; i++) {
    StringBuffer selectorBuffer=new StringBuffer();
    selectorBuffer.append(""String_Node_Str"").append(getPortalCss()).append('.').append(getPortalSubcolumnsCss()).append(""String_Node_Str"").append(getPortalColumnCssPrefix()).append(i + 1).append(""String_Node_Str"").append(getPortletCss()).append('.').append(getPortletEditCss()).append('.').append(portletCss);
    if (browser.isElementPresent(selectorBuffer.toString())) {
      int position[]=new int[2];
      position[0]=i;
      selectorBuffer=new StringBuffer();
      selectorBuffer.append(""String_Node_Str"").append(getPortalCss()).append(""String_Node_Str"").append(getPortalColumnCssPrefix()).append(i + 1).append(""String_Node_Str"").append(getPortletCss());
      VelocityContext context=new VelocityContext();
      context.put(""String_Node_Str"",getPortalCss());
      context.put(""String_Node_Str"",getPortalSubcolumnsCss());
      context.put(""String_Node_Str"",getPortletCss());
      context.put(""String_Node_Str"",portletCss);
      context.put(""String_Node_Str"",i);
      context.put(""String_Node_Str"",browser.getCssCount(selectorBuffer.toString()).intValue());
      VelocityEngine engine=null;
      engine=new VelocityEngine();
      StringWriter sw=new StringWriter();
      try {
        engine.evaluate(context,sw,""String_Node_Str"",FunctionalHomeSiteUtil.class.getResourceAsStream(""String_Node_Str""));
        Integer j=new Integer(browser.getEval(sw.toString()));
        position[1]=j.intValue();
        return (position);
      }
 catch (      ParseErrorException e) {
        e.printStackTrace();
      }
catch (      MethodInvocationException e) {
        e.printStackTrace();
      }
catch (      ResourceNotFoundException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
      return (null);
    }
  }
  return (null);
}","/** 
 * @param browser
 * @param portletCss
 * @param columnCount the count of columns to scan for
 * @return the x and y position of the portlet, the result may be null ifthe portlet is inactive or doesn't exists. Find the position of the portlet within the portal.
 */
public int[] findPortletPosition(Selenium browser,String portletCss,int columnCount){
  for (int i=0; i < columnCount; i++) {
    StringBuffer selectorBuffer=new StringBuffer();
    selectorBuffer.append(""String_Node_Str"").append(getPortalCss()).append('.').append(getPortalSubcolumnsCss()).append(""String_Node_Str"").append(getPortalColumnCssPrefix()).append(i + 1).append(""String_Node_Str"").append(getPortletCss()).append('.').append(getPortletEditCss()).append('.').append(portletCss);
    if (browser.isElementPresent(selectorBuffer.toString())) {
      int position[]=new int[2];
      position[0]=i;
      selectorBuffer=new StringBuffer();
      selectorBuffer.append(""String_Node_Str"").append(getPortalCss()).append(""String_Node_Str"").append(getPortalColumnCssPrefix()).append(i + 1).append(""String_Node_Str"").append(getPortletCss());
      VelocityContext context=new VelocityContext();
      context.put(""String_Node_Str"",getPortalCss());
      context.put(""String_Node_Str"",getPortalSubcolumnsCss());
      context.put(""String_Node_Str"",getPortletCss());
      context.put(""String_Node_Str"",getPortalColumnCssPrefix());
      context.put(""String_Node_Str"",portletCss);
      context.put(""String_Node_Str"",i);
      context.put(""String_Node_Str"",browser.getCssCount(selectorBuffer.toString()).intValue());
      VelocityEngine engine=null;
      engine=new VelocityEngine();
      StringWriter sw=new StringWriter();
      try {
        engine.evaluate(context,sw,""String_Node_Str"",FunctionalHomeSiteUtil.class.getResourceAsStream(""String_Node_Str""));
        Integer j=new Integer(browser.getEval(sw.toString()));
        position[1]=j.intValue();
        return (position);
      }
 catch (      ParseErrorException e) {
        e.printStackTrace();
      }
catch (      MethodInvocationException e) {
        e.printStackTrace();
      }
catch (      ResourceNotFoundException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
      return (null);
    }
  }
  return (null);
}"
69966,"/** 
 * @param deploymentUrl
 * @param count
 * @throws IOException
 * @throws URISyntaxException Creates the selenium test users with random passwords and writes it to credentials.properties.
 */
public List<UserVO> createTestUsers(URL deploymentUrl,int count) throws IOException, URISyntaxException {
  RestConnection restConnection=new RestConnection(deploymentUrl);
  restConnection.login(getUsername(),getPassword());
  List<UserVO> user=new ArrayList<UserVO>();
  for (int i=0; i < count; i++) {
    UserVO vo=new UserVO();
    String username=""String_Node_Str"" + i + ""String_Node_Str""+ UUID.randomUUID().toString();
    vo.setLogin(username);
    String password=""String_Node_Str"" + i + ""String_Node_Str""+ UUID.randomUUID().toString();
    vo.setPassword(password);
    vo.setFirstName(""String_Node_Str"" + i);
    vo.setLastName(""String_Node_Str"");
    vo.setEmail(username + ""String_Node_Str"");
    vo.putProperty(""String_Node_Str"",""String_Node_Str"");
    vo.putProperty(""String_Node_Str"",""String_Node_Str"");
    vo.putProperty(""String_Node_Str"",""String_Node_Str"");
    vo.putProperty(""String_Node_Str"",""String_Node_Str"");
    vo.putProperty(""String_Node_Str"",""String_Node_Str"");
    URI request=UriBuilder.fromUri(deploymentUrl.toURI()).path(""String_Node_Str"").path(""String_Node_Str"").build();
    HttpPut method=restConnection.createPut(request,MediaType.APPLICATION_JSON,true);
    restConnection.addJsonEntity(method,vo);
    method.addHeader(""String_Node_Str"",""String_Node_Str"");
    HttpResponse response=restConnection.execute(method);
    assertTrue(response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 201);
    InputStream body=response.getEntity().getContent();
    UserVO current=restConnection.parse(body,UserVO.class);
    Assert.assertNotNull(current);
    user.add(current);
  }
  restConnection.shutdown();
  return (user);
}","/** 
 * @param deploymentUrl
 * @param count
 * @throws IOException
 * @throws URISyntaxException Creates the selenium test users with random passwords and writes it to credentials.properties.
 */
public List<UserVO> createTestUsers(URL deploymentUrl,int count) throws IOException, URISyntaxException {
  RestConnection restConnection=new RestConnection(deploymentUrl);
  restConnection.login(getUsername(),getPassword());
  List<UserVO> user=new ArrayList<UserVO>();
  for (int i=0; i < count; i++) {
    UserVO vo=new UserVO();
    String username=""String_Node_Str"" + i + ""String_Node_Str""+ UUID.randomUUID().toString();
    vo.setLogin(username);
    String password=(""String_Node_Str"" + i + ""String_Node_Str""+ UUID.randomUUID().toString()).substring(0,24);
    vo.setPassword(password);
    vo.setFirstName(""String_Node_Str"" + i);
    vo.setLastName(""String_Node_Str"");
    vo.setEmail(username + ""String_Node_Str"");
    vo.putProperty(""String_Node_Str"",""String_Node_Str"");
    vo.putProperty(""String_Node_Str"",""String_Node_Str"");
    vo.putProperty(""String_Node_Str"",""String_Node_Str"");
    vo.putProperty(""String_Node_Str"",""String_Node_Str"");
    vo.putProperty(""String_Node_Str"",""String_Node_Str"");
    URI request=UriBuilder.fromUri(deploymentUrl.toURI()).path(""String_Node_Str"").path(""String_Node_Str"").build();
    HttpPut method=restConnection.createPut(request,MediaType.APPLICATION_JSON,true);
    restConnection.addJsonEntity(method,vo);
    method.addHeader(""String_Node_Str"",""String_Node_Str"");
    HttpResponse response=restConnection.execute(method);
    assertTrue(response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 201);
    InputStream body=response.getEntity().getContent();
    UserVO current=restConnection.parse(body,UserVO.class);
    Assert.assertNotNull(current);
    user.add(vo);
  }
  restConnection.shutdown();
  return (user);
}"
69967,"@Override public void exportNode(File exportDirectory,ICourse course){
  XStream xstream=new XStream();
  ChecklistManager cm=ChecklistManager.getInstance();
  Checklist checklist=loadOrCreateChecklist(course.getCourseEnvironment().getCoursePropertyManager());
  Checklist copy=cm.copyChecklistInRAM(checklist);
  String exportContent=xstream.toXML(copy);
  ExportUtil.writeContentToFile(getExportFilename(),exportContent,exportDirectory,WebappHelper.getDefaultCharset());
}","@Override public void exportNode(File exportDirectory,ICourse course){
  XStream xstream=XStreamHelper.createXStreamInstance();
  ChecklistManager cm=ChecklistManager.getInstance();
  Checklist checklist=loadOrCreateChecklist(course.getCourseEnvironment().getCoursePropertyManager());
  Checklist copy=cm.copyChecklistInRAM(checklist);
  String exportContent=xstream.toXML(copy);
  ExportUtil.writeContentToFile(getExportFilename(),exportContent,exportDirectory,WebappHelper.getDefaultCharset());
}"
69968,"@Override public Controller importNode(File importDirectory,ICourse course,boolean unattendedImport,UserRequest ureq,WindowControl wControl){
  CoursePropertyManager cpm=course.getCourseEnvironment().getCoursePropertyManager();
  if (getChecklistKey(cpm) != null)   deleteChecklistKeyConf(cpm);
  File importFile=new File(importDirectory,getExportFilename());
  String importContent=FileUtils.load(importFile,WebappHelper.getDefaultCharset());
  if (importContent == null || importContent.isEmpty()) {
    return null;
  }
  XStream xstream=new XStream();
  Checklist checklist=(Checklist)xstream.fromXML(importContent);
  if (checklist != null) {
    checklist=ChecklistManager.getInstance().copyChecklist(checklist);
    setChecklistKey(cpm,checklist.getKey());
  }
  return null;
}","@Override public Controller importNode(File importDirectory,ICourse course,boolean unattendedImport,UserRequest ureq,WindowControl wControl){
  CoursePropertyManager cpm=course.getCourseEnvironment().getCoursePropertyManager();
  if (getChecklistKey(cpm) != null)   deleteChecklistKeyConf(cpm);
  File importFile=new File(importDirectory,getExportFilename());
  String importContent=FileUtils.load(importFile,WebappHelper.getDefaultCharset());
  if (importContent == null || importContent.isEmpty()) {
    return null;
  }
  XStream xstream=XStreamHelper.createXStreamInstance();
  Checklist checklist=(Checklist)xstream.fromXML(importContent);
  if (checklist != null) {
    checklist=ChecklistManager.getInstance().copyChecklist(checklist);
    setChecklistKey(cpm,checklist.getKey());
  }
  return null;
}"
69969,"/** 
 * Factory to create a fresh XStream instance. Use this when reading and writing to a configured XML mapping
 */
public static XStream createXStreamInstance(){
  return new XStream();
}","/** 
 * Factory to create a fresh XStream instance. Use this when reading and writing to a configured XML mapping
 */
public static XStream createXStreamInstance(){
  return new EnhancedXStream();
}"
69970,"@Override public void postExport(CourseEnvironmentMapper envMapper,boolean backwardsCompatible){
  super.postExport(envMapper,backwardsCompatible);
  ModuleConfiguration mc=getModuleConfiguration();
  @SuppressWarnings(""String_Node_Str"") List<Long> groupKeys=(List<Long>)mc.get(COEditController.CONFIG_KEY_EMAILTOGROUP_IDS);
  if (groupKeys != null) {
    String groupNames=envMapper.toOriginalGroupNames(groupKeys);
    mc.set(COEditController.CONFIG_KEY_EMAILTOGROUPS,groupNames);
  }
  @SuppressWarnings(""String_Node_Str"") List<Long> areaKeys=(List<Long>)mc.get(COEditController.CONFIG_KEY_EMAILTOAREA_IDS);
  if (areaKeys != null) {
    String areaNames=envMapper.toOriginalAreaNames(areaKeys);
    mc.set(COEditController.CONFIG_KEY_EMAILTOAREAS,areaNames);
  }
  if (backwardsCompatible) {
    mc.remove(COEditController.CONFIG_KEY_EMAILTOGROUP_IDS);
    mc.remove(COEditController.CONFIG_KEY_EMAILTOAREA_IDS);
  }
}","@Override public void postExport(CourseEnvironmentMapper envMapper,boolean backwardsCompatible){
  super.postExport(envMapper,backwardsCompatible);
  ModuleConfiguration mc=getModuleConfiguration();
  @SuppressWarnings(""String_Node_Str"") List<Long> groupKeys=(List<Long>)mc.get(COEditController.CONFIG_KEY_EMAILTOGROUP_IDS);
  if (groupKeys != null) {
    String groupNames=envMapper.toGroupNames(groupKeys);
    mc.set(COEditController.CONFIG_KEY_EMAILTOGROUPS,groupNames);
  }
  @SuppressWarnings(""String_Node_Str"") List<Long> areaKeys=(List<Long>)mc.get(COEditController.CONFIG_KEY_EMAILTOAREA_IDS);
  if (areaKeys != null) {
    String areaNames=envMapper.toAreaNames(areaKeys);
    mc.set(COEditController.CONFIG_KEY_EMAILTOAREAS,areaNames);
  }
  if (backwardsCompatible) {
    mc.remove(COEditController.CONFIG_KEY_EMAILTOGROUP_IDS);
    mc.remove(COEditController.CONFIG_KEY_EMAILTOAREA_IDS);
  }
}"
69971,"@Override public void postExport(CourseEnvironmentMapper envMapper,boolean backwardsCompatible){
  super.postExport(envMapper,backwardsCompatible);
  ModuleConfiguration mc=getModuleConfiguration();
  @SuppressWarnings(""String_Node_Str"") List<Long> groupKeys=(List<Long>)mc.get(ENCourseNode.CONFIG_GROUP_IDS);
  if (groupKeys != null) {
    String groupNames=envMapper.toOriginalGroupNames(groupKeys);
    mc.set(ENCourseNode.CONFIG_GROUPNAME,groupNames);
  }
  @SuppressWarnings(""String_Node_Str"") List<Long> areaKeys=(List<Long>)mc.get(ENCourseNode.CONFIG_AREA_IDS);
  if (areaKeys != null) {
    String areaNames=envMapper.toOriginalAreaNames(areaKeys);
    mc.set(ENCourseNode.CONFIG_AREANAME,areaNames);
  }
  if (backwardsCompatible) {
    mc.remove(ENCourseNode.CONFIG_GROUP_IDS);
    mc.remove(ENCourseNode.CONFIG_AREA_IDS);
  }
}","@Override public void postExport(CourseEnvironmentMapper envMapper,boolean backwardsCompatible){
  super.postExport(envMapper,backwardsCompatible);
  ModuleConfiguration mc=getModuleConfiguration();
  @SuppressWarnings(""String_Node_Str"") List<Long> groupKeys=(List<Long>)mc.get(ENCourseNode.CONFIG_GROUP_IDS);
  if (groupKeys != null) {
    String groupNames=envMapper.toGroupNames(groupKeys);
    mc.set(ENCourseNode.CONFIG_GROUPNAME,groupNames);
  }
  @SuppressWarnings(""String_Node_Str"") List<Long> areaKeys=(List<Long>)mc.get(ENCourseNode.CONFIG_AREA_IDS);
  if (areaKeys != null) {
    String areaNames=envMapper.toAreaNames(areaKeys);
    mc.set(ENCourseNode.CONFIG_AREANAME,areaNames);
  }
  if (backwardsCompatible) {
    mc.remove(ENCourseNode.CONFIG_GROUP_IDS);
    mc.remove(ENCourseNode.CONFIG_AREA_IDS);
  }
}"
69972,"protected void postExportCondition(Condition condition,CourseEnvironmentMapper envMapper,boolean backwardsCompatible){
  if (condition == null)   return;
  boolean easy=StringHelper.containsNonWhitespace(condition.getConditionFromEasyModeConfiguration());
  if (easy) {
    if (condition.getEasyModeGroupAccessIdList() != null || condition.getEasyModeGroupAreaAccessIdList() != null) {
      String groupNames=envMapper.toOriginalGroupNames(condition.getEasyModeGroupAccessIdList());
      condition.setEasyModeGroupAccess(groupNames);
      String areaNames=envMapper.toOriginalAreaNames(condition.getEasyModeGroupAreaAccessIdList());
      condition.setEasyModeGroupAreaAccess(areaNames);
      String condString=condition.getConditionFromEasyModeConfiguration();
      if (backwardsCompatible) {
        condString=convertExpressionKeyToName(condString,envMapper);
      }
      condition.setConditionExpression(condString);
    }
  }
 else   if (condition.isExpertMode() && backwardsCompatible) {
    String expression=condition.getConditionExpression();
    if (StringHelper.containsNonWhitespace(expression)) {
      String processExpression=convertExpressionKeyToName(expression,envMapper);
      if (!expression.equals(processExpression)) {
        condition.setConditionExpression(processExpression);
      }
    }
  }
  if (backwardsCompatible) {
    condition.setEasyModeGroupAreaAccessIds(null);
    condition.setEasyModeGroupAccessIds(null);
    condition.setConditionUpgraded(null);
  }
}","protected void postExportCondition(Condition condition,CourseEnvironmentMapper envMapper,boolean backwardsCompatible){
  if (condition == null)   return;
  boolean easy=StringHelper.containsNonWhitespace(condition.getConditionFromEasyModeConfiguration());
  if (easy) {
    if (condition.getEasyModeGroupAccessIdList() != null || condition.getEasyModeGroupAreaAccessIdList() != null) {
      String groupNames=envMapper.toGroupNames(condition.getEasyModeGroupAccessIdList());
      condition.setEasyModeGroupAccess(groupNames);
      String areaNames=envMapper.toAreaNames(condition.getEasyModeGroupAreaAccessIdList());
      condition.setEasyModeGroupAreaAccess(areaNames);
      String condString=condition.getConditionFromEasyModeConfiguration();
      if (backwardsCompatible) {
        condString=convertExpressionKeyToName(condString,envMapper);
      }
      condition.setConditionExpression(condString);
    }
  }
 else   if (condition.isExpertMode() && backwardsCompatible) {
    String expression=condition.getConditionExpression();
    if (StringHelper.containsNonWhitespace(expression)) {
      String processExpression=convertExpressionKeyToName(expression,envMapper);
      if (!expression.equals(processExpression)) {
        condition.setConditionExpression(processExpression);
      }
    }
  }
  if (backwardsCompatible) {
    condition.setEasyModeGroupAreaAccessIds(null);
    condition.setEasyModeGroupAccessIds(null);
    condition.setConditionUpgraded(null);
  }
}"
69973,"protected void postImportCondition(Condition condition,CourseEnvironmentMapper envMapper){
  if (condition == null)   return;
  boolean easy=StringHelper.containsNonWhitespace(condition.getConditionFromEasyModeConfiguration());
  if (easy) {
    List<Long> groupKeys=condition.getEasyModeGroupAccessIdList();
    if (groupKeys == null) {
      groupKeys=envMapper.toGroupKeyFromOriginalNames(condition.getEasyModeGroupAccess());
    }
 else {
      groupKeys=envMapper.toGroupKeyFromOriginalKeys(groupKeys);
    }
    condition.setEasyModeGroupAccessIdList(groupKeys);
    List<Long> areaKeys=condition.getEasyModeGroupAreaAccessIdList();
    if (areaKeys == null) {
      areaKeys=envMapper.toAreaKeyFromOriginalNames(condition.getEasyModeGroupAreaAccess());
    }
 else {
      areaKeys=envMapper.toAreaKeyFromOriginalKeys(areaKeys);
    }
    condition.setEasyModeGroupAreaAccessIdList(areaKeys);
    String condString=condition.getConditionFromEasyModeConfiguration();
    condition.setConditionExpression(condString);
  }
 else   if (condition.isExpertMode()) {
    String expression=condition.getConditionExpression();
    if (StringHelper.containsNonWhitespace(expression)) {
      String processExpression=convertExpressionNameToKey(expression,envMapper);
      processExpression=convertExpressionKeyToKey(expression,envMapper);
      if (!expression.equals(processExpression)) {
        condition.setConditionUpgraded(processExpression);
      }
    }
  }
}","protected void postImportCondition(Condition condition,CourseEnvironmentMapper envMapper){
  if (condition == null)   return;
  boolean easy=StringHelper.containsNonWhitespace(condition.getConditionFromEasyModeConfiguration());
  if (easy) {
    List<Long> groupKeys=condition.getEasyModeGroupAccessIdList();
    if (groupKeys == null || groupKeys.isEmpty()) {
      groupKeys=envMapper.toGroupKeyFromOriginalNames(condition.getEasyModeGroupAccess());
    }
 else {
      groupKeys=envMapper.toGroupKeyFromOriginalKeys(groupKeys);
    }
    condition.setEasyModeGroupAccessIdList(groupKeys);
    condition.setEasyModeGroupAccess(envMapper.toGroupNames(groupKeys));
    List<Long> areaKeys=condition.getEasyModeGroupAreaAccessIdList();
    if (areaKeys == null || areaKeys.isEmpty()) {
      areaKeys=envMapper.toAreaKeyFromOriginalNames(condition.getEasyModeGroupAreaAccess());
    }
 else {
      areaKeys=envMapper.toAreaKeyFromOriginalKeys(areaKeys);
    }
    condition.setEasyModeGroupAreaAccessIdList(areaKeys);
    condition.setEasyModeGroupAreaAccess(envMapper.toAreaNames(areaKeys));
    String condString=condition.getConditionFromEasyModeConfiguration();
    condition.setConditionExpression(condString);
  }
 else   if (condition.isExpertMode()) {
    String expression=condition.getConditionExpression();
    if (StringHelper.containsNonWhitespace(expression)) {
      String processExpression=convertExpressionNameToKey(expression,envMapper);
      processExpression=convertExpressionKeyToKey(expression,envMapper);
      if (!expression.equals(processExpression)) {
        condition.setConditionUpgraded(processExpression);
      }
    }
  }
}"
69974,"private boolean upgradeCourseConditions(UpgradeManager upgradeManager,UpgradeHistoryData uhd){
  if (!uhd.getBooleanDataValue(TASK_CONDITIONS)) {
    int counter=0;
    List<RepositoryEntry> entries;
    SearchRepositoryEntryParameters params=new SearchRepositoryEntryParameters();
    params.setRoles(new Roles(true,false,false,false,false,false,false));
    params.addResourceTypes(""String_Node_Str"");
    do {
      entries=repositoryManager.genericANDQueryWithRolesRestriction(params,counter,REPO_ENTRIES_BATCH_SIZE,true);
      for (      RepositoryEntry entry : entries) {
        ICourse course=CourseFactory.loadCourse(entry.getOlatResource());
        CourseEnvironmentMapper envMapper=getCourseEnvironmentMapper(entry.getOlatResource());
        course.postImport(envMapper);
      }
      counter+=entries.size();
      log.audit(""String_Node_Str"" + entries.size());
    }
 while (entries.size() == REPO_ENTRIES_BATCH_SIZE);
    uhd.setBooleanDataValue(TASK_CONDITIONS,false);
    upgradeManager.setUpgradesHistory(uhd,VERSION);
  }
  return true;
}","private boolean upgradeCourseConditions(UpgradeManager upgradeManager,UpgradeHistoryData uhd){
  if (!uhd.getBooleanDataValue(TASK_CONDITIONS)) {
    int counter=0;
    List<RepositoryEntry> entries;
    SearchRepositoryEntryParameters params=new SearchRepositoryEntryParameters();
    params.setRoles(new Roles(true,false,false,false,false,false,false));
    params.addResourceTypes(""String_Node_Str"");
    do {
      entries=repositoryManager.genericANDQueryWithRolesRestriction(params,counter,REPO_ENTRIES_BATCH_SIZE,true);
      for (      RepositoryEntry entry : entries) {
        try {
          ICourse course=CourseFactory.loadCourse(entry.getOlatResource());
          CourseEnvironmentMapper envMapper=getCourseEnvironmentMapper(entry.getOlatResource());
          course.postImport(envMapper);
        }
 catch (        CorruptedCourseException e) {
          log.error(""String_Node_Str"" + entry.getOlatResource().getResourceableId());
        }
      }
      counter+=entries.size();
      log.audit(""String_Node_Str"" + entries.size());
    }
 while (entries.size() == REPO_ENTRIES_BATCH_SIZE);
    uhd.setBooleanDataValue(TASK_CONDITIONS,false);
    upgradeManager.setUpgradesHistory(uhd,VERSION);
  }
  return true;
}"
69975,"@Override public boolean existGroup(String nameOrKey){
  SearchBusinessGroupParams params=new SearchBusinessGroupParams();
  if (StringHelper.isLong(nameOrKey)) {
    params.setKeys(Collections.singletonList(new Long(nameOrKey)));
  }
 else {
    params.setExactName(nameOrKey);
  }
  return businessGroupService.countBusinessGroups(params,courseResource) > 0;
}","@Override public boolean existGroup(String nameOrKey){
  SearchBusinessGroupParams params=new SearchBusinessGroupParams();
  if (StringHelper.isLong(nameOrKey)) {
    params.setGroupKeys(Collections.singletonList(new Long(nameOrKey)));
  }
 else {
    params.setExactName(nameOrKey);
  }
  return businessGroupService.countBusinessGroups(params,courseResource) > 0;
}"
69976,"private void doEnrollView(UserRequest ureq){
  if (enrolledGroup != null) {
    enrollVC.contextPut(""String_Node_Str"",Boolean.TRUE);
    enrollVC.contextPut(""String_Node_Str"",Boolean.FALSE);
    String desc=this.enrolledGroup.getDescription();
    enrollVC.contextPut(""String_Node_Str"",this.enrolledGroup.getName());
    enrollVC.contextPut(""String_Node_Str"",(desc == null) ? ""String_Node_Str"" : this.enrolledGroup.getDescription());
  }
 else   if (waitingListGroup != null) {
    enrollVC.contextPut(""String_Node_Str"",Boolean.TRUE);
    enrollVC.contextPut(""String_Node_Str"",Boolean.TRUE);
    String desc=this.waitingListGroup.getDescription();
    enrollVC.contextPut(""String_Node_Str"",this.waitingListGroup.getName());
    enrollVC.contextPut(""String_Node_Str"",(desc == null) ? ""String_Node_Str"" : this.waitingListGroup.getDescription());
  }
 else {
    enrollVC.contextPut(""String_Node_Str"",Boolean.FALSE);
  }
  doEnrollMultipleView(ureq);
}","private void doEnrollView(UserRequest ureq){
  if (enrolledGroup != null) {
    enrollVC.contextPut(""String_Node_Str"",Boolean.TRUE);
    enrollVC.contextPut(""String_Node_Str"",Boolean.FALSE);
    enrollVC.contextPut(""String_Node_Str"",enrolledGroup.getName());
    enrollVC.contextPut(""String_Node_Str"",(enrolledGroup.getDescription() == null) ? ""String_Node_Str"" : enrolledGroup.getDescription());
  }
 else   if (waitingListGroup != null) {
    enrollVC.contextPut(""String_Node_Str"",Boolean.TRUE);
    enrollVC.contextPut(""String_Node_Str"",Boolean.TRUE);
    String desc=this.waitingListGroup.getDescription();
    enrollVC.contextPut(""String_Node_Str"",this.waitingListGroup.getName());
    enrollVC.contextPut(""String_Node_Str"",(desc == null) ? ""String_Node_Str"" : this.waitingListGroup.getDescription());
  }
 else {
    enrollVC.contextPut(""String_Node_Str"",Boolean.FALSE);
  }
  doEnrollMultipleView(ureq);
}"
69977,"/** 
 * @param moduleConfiguration
 * @param ureq
 * @param wControl
 * @param userCourseEnv
 * @param enNode
 */
public ENRunController(ModuleConfiguration moduleConfiguration,UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,ENCourseNode enNode){
  super(ureq,wControl);
  this.moduleConfig=moduleConfiguration;
  this.enNode=enNode;
  addLoggingResourceable(LoggingResourceable.wrap(enNode));
  areaManager=CoreSpringFactory.getImpl(BGAreaManager.class);
  enrollmentManager=CoreSpringFactory.getImpl(EnrollmentManager.class);
  businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
  courseGroupManager=userCourseEnv.getCourseEnvironment().getCourseGroupManager();
  coursePropertyManager=userCourseEnv.getCourseEnvironment().getCoursePropertyManager();
  enrollableGroupKeys=(List<Long>)moduleConfig.get(ENCourseNode.CONFIG_GROUP_IDS);
  if (enrollableGroupKeys == null) {
    String groupNamesConfig=(String)moduleConfig.get(ENCourseNode.CONFIG_GROUPNAME);
    enrollableGroupKeys=businessGroupService.toGroupKeys(groupNamesConfig,courseGroupManager.getCourseResource());
  }
  enrollableAreaKeys=(List<Long>)moduleConfig.get(ENCourseNode.CONFIG_AREA_IDS);
  if (enrollableAreaKeys != null) {
    String areaInitVal=(String)moduleConfig.get(ENCourseNode.CONFIG_AREANAME);
    enrollableAreaKeys=areaManager.toAreaKeys(areaInitVal,courseGroupManager.getCourseResource());
  }
  cancelEnrollEnabled=((Boolean)moduleConfig.get(ENCourseNode.CONF_CANCEL_ENROLL_ENABLED)).booleanValue();
  Identity identity=userCourseEnv.getIdentityEnvironment().getIdentity();
  enrolledGroup=enrollmentManager.getBusinessGroupWhereEnrolled(identity,enrollableGroupKeys,enrollableAreaKeys,courseGroupManager);
  waitingListGroup=enrollmentManager.getBusinessGroupWhereInWaitingList(identity,enrollableGroupKeys,enrollableAreaKeys,courseGroupManager);
  registerGroupChangedEvents(enrollableGroupKeys,enrollableAreaKeys,ureq.getIdentity());
  enrollVC=createVelocityContainer(""String_Node_Str"");
  List<BusinessGroup> groups=enrollmentManager.loadGroupsFromNames(enrollableGroupKeys,enrollableAreaKeys,courseGroupManager);
  tableCtr=createTableController(ureq,enrollmentManager.hasAnyWaitingList(groups));
  doEnrollView(ureq);
  enrollVC.contextPut(""String_Node_Str"",enNode.getShortTitle());
  enrollVC.contextPut(""String_Node_Str"",enNode.getLongTitle());
  String learningObj=enNode.getLearningObjectives();
  if (learningObj != null) {
    Component learningObjectives=ObjectivesHelper.createLearningObjectivesComponent(learningObj,ureq);
    enrollVC.put(""String_Node_Str"",learningObjectives);
    enrollVC.contextPut(""String_Node_Str"",learningObj);
  }
  putInitialPanel(enrollVC);
}","/** 
 * @param moduleConfiguration
 * @param ureq
 * @param wControl
 * @param userCourseEnv
 * @param enNode
 */
public ENRunController(ModuleConfiguration moduleConfiguration,UserRequest ureq,WindowControl wControl,UserCourseEnvironment userCourseEnv,ENCourseNode enNode){
  super(ureq,wControl);
  this.moduleConfig=moduleConfiguration;
  this.enNode=enNode;
  addLoggingResourceable(LoggingResourceable.wrap(enNode));
  areaManager=CoreSpringFactory.getImpl(BGAreaManager.class);
  enrollmentManager=CoreSpringFactory.getImpl(EnrollmentManager.class);
  businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
  courseGroupManager=userCourseEnv.getCourseEnvironment().getCourseGroupManager();
  coursePropertyManager=userCourseEnv.getCourseEnvironment().getCoursePropertyManager();
  enrollableGroupKeys=(List<Long>)moduleConfig.get(ENCourseNode.CONFIG_GROUP_IDS);
  if (enrollableGroupKeys == null) {
    String groupNamesConfig=(String)moduleConfig.get(ENCourseNode.CONFIG_GROUPNAME);
    enrollableGroupKeys=businessGroupService.toGroupKeys(groupNamesConfig,courseGroupManager.getCourseResource());
  }
  enrollableAreaKeys=(List<Long>)moduleConfig.get(ENCourseNode.CONFIG_AREA_IDS);
  if (enrollableAreaKeys == null) {
    String areaInitVal=(String)moduleConfig.get(ENCourseNode.CONFIG_AREANAME);
    enrollableAreaKeys=areaManager.toAreaKeys(areaInitVal,courseGroupManager.getCourseResource());
  }
  cancelEnrollEnabled=((Boolean)moduleConfig.get(ENCourseNode.CONF_CANCEL_ENROLL_ENABLED)).booleanValue();
  Identity identity=userCourseEnv.getIdentityEnvironment().getIdentity();
  enrolledGroup=enrollmentManager.getBusinessGroupWhereEnrolled(identity,enrollableGroupKeys,enrollableAreaKeys,courseGroupManager.getCourseResource());
  waitingListGroup=enrollmentManager.getBusinessGroupWhereInWaitingList(identity,enrollableGroupKeys,enrollableAreaKeys,courseGroupManager);
  registerGroupChangedEvents(enrollableGroupKeys,enrollableAreaKeys,ureq.getIdentity());
  enrollVC=createVelocityContainer(""String_Node_Str"");
  List<BusinessGroup> groups=enrollmentManager.loadGroupsFromNames(enrollableGroupKeys,enrollableAreaKeys,courseGroupManager);
  tableCtr=createTableController(ureq,enrollmentManager.hasAnyWaitingList(groups));
  doEnrollView(ureq);
  enrollVC.contextPut(""String_Node_Str"",enNode.getShortTitle());
  enrollVC.contextPut(""String_Node_Str"",enNode.getLongTitle());
  String learningObj=enNode.getLearningObjectives();
  if (learningObj != null) {
    Component learningObjectives=ObjectivesHelper.createLearningObjectivesComponent(learningObj,ureq);
    enrollVC.put(""String_Node_Str"",learningObjectives);
    enrollVC.contextPut(""String_Node_Str"",learningObj);
  }
  putInitialPanel(enrollVC);
}"
69978,"private void registerGroupChangedEvents(List<Long> enrollableGroupNames,List<Long> enrollableAreaNames,Identity identity){
  List<BusinessGroup> groups=enrollmentManager.loadGroupsFromNames(enrollableGroupNames,enrollableAreaNames,courseGroupManager);
  for (  BusinessGroup group : groups) {
    CoordinatorManager.getInstance().getCoordinator().getEventBus().registerFor(this,identity,group);
  }
}","private void registerGroupChangedEvents(List<Long> enrollableGroupKeys,List<Long> enrollableAreaKeys,Identity identity){
  List<BusinessGroup> groups=enrollmentManager.loadGroupsFromNames(enrollableGroupKeys,enrollableAreaKeys,courseGroupManager);
  for (  BusinessGroup group : groups) {
    CoordinatorManager.getInstance().getCoordinator().getEventBus().registerFor(this,identity,group);
  }
}"
69979,"private void deregisterGroupChangedEvents(List<Long> enrollableGroupNames,List<Long> enrollableAreaNames){
  List<BusinessGroup> groups=enrollmentManager.loadGroupsFromNames(enrollableGroupNames,enrollableAreaNames,courseGroupManager);
  for (  BusinessGroup group : groups) {
    CoordinatorManager.getInstance().getCoordinator().getEventBus().deregisterFor(this,group);
  }
}","private void deregisterGroupChangedEvents(List<Long> enrollableGroupKeys,List<Long> enrollableAreaKeys){
  List<BusinessGroup> groups=enrollmentManager.loadGroupsFromNames(enrollableGroupKeys,enrollableAreaKeys,courseGroupManager);
  for (  BusinessGroup group : groups) {
    CoordinatorManager.getInstance().getCoordinator().getEventBus().deregisterFor(this,group);
  }
}"
69980,"/** 
 * @param identity
 * @param groupNames
 * @return BusinessGroup in which the identity is enrolled, null if identityis nowhere enrolled.
 */
protected BusinessGroup getBusinessGroupWhereEnrolled(Identity identity,List<Long> groupKeys,List<Long> areaKeys,CourseGroupManager cgm){
  if (groupKeys != null && !groupKeys.isEmpty()) {
    SearchBusinessGroupParams params=new SearchBusinessGroupParams();
    params.setAttendee(true);
    params.setIdentity(identity);
    params.setKeys(groupKeys);
    List<BusinessGroup> groups=businessGroupService.findBusinessGroups(params,cgm.getCourseResource(),0,1);
    if (groups.size() > 0) {
      return groups.get(0);
    }
  }
  if (areaKeys != null && !areaKeys.isEmpty()) {
    List<BGArea> areas=areaManager.loadAreas(areaKeys);
    for (    BGArea area : areas) {
      List<BusinessGroup> groups=areaManager.findBusinessGroupsOfArea(area);
      if (groups.size() > 0) {
        return groups.get(0);
      }
    }
  }
  return null;
}","/** 
 * @param identity
 * @param groupNames
 * @return BusinessGroup in which the identity is enrolled, null if identityis nowhere enrolled.
 */
protected BusinessGroup getBusinessGroupWhereEnrolled(Identity identity,List<Long> groupKeys,List<Long> areaKeys,OLATResource courseResource){
  if (groupKeys != null && !groupKeys.isEmpty()) {
    SearchBusinessGroupParams params=new SearchBusinessGroupParams();
    params.setAttendee(true);
    params.setIdentity(identity);
    params.setGroupKeys(groupKeys);
    List<BusinessGroup> groups=businessGroupService.findBusinessGroups(params,courseResource,0,1);
    if (groups.size() > 0) {
      return groups.get(0);
    }
  }
  if (areaKeys != null && !areaKeys.isEmpty()) {
    List<BusinessGroup> groups=areaManager.findBusinessGroupsOfAreaAttendedBy(identity,areaKeys,courseResource);
    if (groups.size() > 0) {
      return groups.get(0);
    }
  }
  return null;
}"
69981,"public EnrollStatus doEnroll(final Identity identity,final BusinessGroup group,final ENCourseNode enNode,final CoursePropertyManager coursePropertyManager,final WindowControl wControl,final Translator trans,List<Long> groupKeys,List<Long> areaKeys,CourseGroupManager cgm){
  final EnrollStatus enrollStatus=new EnrollStatus();
  if (isLogDebugEnabled())   logDebug(""String_Node_Str"");
  if ((getBusinessGroupWhereEnrolled(identity,groupKeys,areaKeys,cgm) == null) && (getBusinessGroupWhereInWaitingList(identity,groupKeys,areaKeys,cgm) == null)) {
    if (isLogDebugEnabled())     logDebug(""String_Node_Str"" + identity.getName() + ""String_Node_Str""+ group.getName());
    Codepoint.codepoint(EnrollmentManager.class,""String_Node_Str"");
    CoordinatorManager.getInstance().getCoordinator().getSyncer().doInSync(group,new SyncerExecutor(){
      public void execute(){
        logInfo(""String_Node_Str"" + OresHelper.createStringRepresenting(group),identity.getName());
        Codepoint.codepoint(EnrollmentManager.class,""String_Node_Str"");
        BusinessGroup reloadedGroup=businessGroupService.loadBusinessGroup(group);
        if (reloadedGroup.getMaxParticipants() != null && !reloadedGroup.getMaxParticipants().equals(""String_Node_Str"")) {
          int participantsCounter=securityManager.countIdentitiesOfSecurityGroup(reloadedGroup.getPartipiciantGroup());
          logInfo(""String_Node_Str"" + participantsCounter + ""String_Node_Str""+ reloadedGroup.getMaxParticipants().intValue(),identity.getName());
          if (participantsCounter >= reloadedGroup.getMaxParticipants().intValue()) {
            if (!reloadedGroup.getWaitingListEnabled().booleanValue()) {
              enrollStatus.setErrorMessage(trans.translate(""String_Node_Str""));
            }
 else {
              boolean done=addUserToWaitingList(identity,reloadedGroup,enNode,coursePropertyManager,wControl,trans);
              enrollStatus.setIsInWaitingList(done);
            }
          }
 else {
            boolean done=addUserToParticipantList(identity,reloadedGroup,enNode,coursePropertyManager,wControl,trans);
            Codepoint.codepoint(EnrollmentManager.class,""String_Node_Str"");
            enrollStatus.setIsEnrolled(done);
            logInfo(""String_Node_Str"",identity.getName());
          }
        }
 else {
          if (isLogDebugEnabled())           logDebug(""String_Node_Str"");
          boolean done=addUserToParticipantList(identity,reloadedGroup,enNode,coursePropertyManager,wControl,trans);
          enrollStatus.setIsEnrolled(done);
          if (isLogDebugEnabled())           logDebug(""String_Node_Str"");
        }
        logInfo(""String_Node_Str"",identity.getName());
      }
    }
);
    Codepoint.codepoint(EnrollmentManager.class,""String_Node_Str"");
  }
 else {
    enrollStatus.setErrorMessage(trans.translate(""String_Node_Str""));
  }
  if (isLogDebugEnabled())   logDebug(""String_Node_Str"");
  return enrollStatus;
}","public EnrollStatus doEnroll(final Identity identity,final BusinessGroup group,final ENCourseNode enNode,final CoursePropertyManager coursePropertyManager,final WindowControl wControl,final Translator trans,List<Long> groupKeys,List<Long> areaKeys,CourseGroupManager cgm){
  final EnrollStatus enrollStatus=new EnrollStatus();
  if (isLogDebugEnabled())   logDebug(""String_Node_Str"");
  if ((getBusinessGroupWhereEnrolled(identity,groupKeys,areaKeys,cgm.getCourseResource()) == null) && (getBusinessGroupWhereInWaitingList(identity,groupKeys,areaKeys,cgm) == null)) {
    if (isLogDebugEnabled())     logDebug(""String_Node_Str"" + identity.getName() + ""String_Node_Str""+ group.getName());
    Codepoint.codepoint(EnrollmentManager.class,""String_Node_Str"");
    CoordinatorManager.getInstance().getCoordinator().getSyncer().doInSync(group,new SyncerExecutor(){
      public void execute(){
        logInfo(""String_Node_Str"" + OresHelper.createStringRepresenting(group),identity.getName());
        Codepoint.codepoint(EnrollmentManager.class,""String_Node_Str"");
        BusinessGroup reloadedGroup=businessGroupService.loadBusinessGroup(group);
        if (reloadedGroup.getMaxParticipants() != null && !reloadedGroup.getMaxParticipants().equals(""String_Node_Str"")) {
          int participantsCounter=securityManager.countIdentitiesOfSecurityGroup(reloadedGroup.getPartipiciantGroup());
          logInfo(""String_Node_Str"" + participantsCounter + ""String_Node_Str""+ reloadedGroup.getMaxParticipants().intValue(),identity.getName());
          if (participantsCounter >= reloadedGroup.getMaxParticipants().intValue()) {
            if (!reloadedGroup.getWaitingListEnabled().booleanValue()) {
              enrollStatus.setErrorMessage(trans.translate(""String_Node_Str""));
            }
 else {
              boolean done=addUserToWaitingList(identity,reloadedGroup,enNode,coursePropertyManager,wControl,trans);
              enrollStatus.setIsInWaitingList(done);
            }
          }
 else {
            boolean done=addUserToParticipantList(identity,reloadedGroup,enNode,coursePropertyManager,wControl,trans);
            Codepoint.codepoint(EnrollmentManager.class,""String_Node_Str"");
            enrollStatus.setIsEnrolled(done);
            logInfo(""String_Node_Str"",identity.getName());
          }
        }
 else {
          if (isLogDebugEnabled())           logDebug(""String_Node_Str"");
          boolean done=addUserToParticipantList(identity,reloadedGroup,enNode,coursePropertyManager,wControl,trans);
          enrollStatus.setIsEnrolled(done);
          if (isLogDebugEnabled())           logDebug(""String_Node_Str"");
        }
        logInfo(""String_Node_Str"",identity.getName());
      }
    }
);
    Codepoint.codepoint(EnrollmentManager.class,""String_Node_Str"");
  }
 else {
    enrollStatus.setErrorMessage(trans.translate(""String_Node_Str""));
  }
  if (isLogDebugEnabled())   logDebug(""String_Node_Str"");
  return enrollStatus;
}"
69982,"/** 
 * Searches for all business groups that are associated with the given business group area where the given identity is in the participants group
 * @param identity
 * @param areaName
 * @param context
 * @return A list of business groups
 */
public List<BusinessGroup> findBusinessGroupsOfAreaAttendedBy(Identity identity,String areaName,OLATResource resource);","/** 
 * Searches for all business groups that are associated with the given business group area where the given identity is in the participants group
 * @param identity
 * @param areaName
 * @param context
 * @return A list of business groups
 */
public List<BusinessGroup> findBusinessGroupsOfAreaAttendedBy(Identity identity,List<Long> areaKeys,OLATResource resource);"
69983,"/** 
 * @see org.olat.group.area.BGAreaManager#findBusinessGroupsOfAreaAttendedBy(org.olat.core.id.Identity,java.lang.String,org.olat.group.context.BGContext)
 */
public List<BusinessGroup> findBusinessGroupsOfAreaAttendedBy(Identity identity,String areaName,OLATResource resource){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(BusinessGroupImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (StringHelper.containsNonWhitespace(areaName)) {
    sb.append(""String_Node_Str"");
  }
  if (resource != null) {
    sb.append(""String_Node_Str"");
  }
  TypedQuery<BusinessGroup> query=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),BusinessGroup.class).setParameter(""String_Node_Str"",identity.getKey());
  if (StringHelper.containsNonWhitespace(areaName)) {
    query.setParameter(""String_Node_Str"",areaName);
  }
  if (resource != null) {
    query.setParameter(""String_Node_Str"",resource.getKey());
  }
  List<BusinessGroup> groups=query.getResultList();
  return groups;
}","/** 
 * @see org.olat.group.area.BGAreaManager#findBusinessGroupsOfAreaAttendedBy(org.olat.core.id.Identity,java.lang.String,org.olat.group.context.BGContext)
 */
@Override public List<BusinessGroup> findBusinessGroupsOfAreaAttendedBy(Identity identity,List<Long> areaKeys,OLATResource resource){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(BusinessGroupImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (areaKeys != null && !areaKeys.isEmpty()) {
    sb.append(""String_Node_Str"");
  }
  if (resource != null) {
    sb.append(""String_Node_Str"");
  }
  TypedQuery<BusinessGroup> query=dbInstance.getCurrentEntityManager().createQuery(sb.toString(),BusinessGroup.class).setParameter(""String_Node_Str"",identity.getKey());
  if (areaKeys != null && !areaKeys.isEmpty()) {
    query.setParameter(""String_Node_Str"",areaKeys);
  }
  if (resource != null) {
    query.setParameter(""String_Node_Str"",resource.getKey());
  }
  List<BusinessGroup> groups=query.getResultList();
  return groups;
}"
69984,"@Override public List<BusinessGroup> findBusinessGroupsOfAreaKeys(List<Long> areaKeys){
  if (areaKeys == null || areaKeys.isEmpty())   return Collections.emptyList();
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(BGtoAreaRelationImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"");
  List<BusinessGroup> result=DBFactory.getInstance().getCurrentEntityManager().createQuery(sb.toString(),BusinessGroup.class).setParameter(""String_Node_Str"",areaKeys).getResultList();
  return result;
}","@Override public List<BusinessGroup> findBusinessGroupsOfAreaKeys(List<Long> areaKeys){
  if (areaKeys == null || areaKeys.isEmpty())   return Collections.emptyList();
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(BGtoAreaRelationImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  List<BusinessGroup> result=DBFactory.getInstance().getCurrentEntityManager().createQuery(sb.toString(),BusinessGroup.class).setParameter(""String_Node_Str"",areaKeys).getResultList();
  return result;
}"
69985,"private <T>TypedQuery<T> createFindDBQuery(SearchBusinessGroupParams params,OLATResource resource,Class<T> resultClass){
  StringBuilder query=new StringBuilder();
  if (BusinessGroup.class.equals(resultClass)) {
    query.append(""String_Node_Str"");
  }
 else {
    query.append(""String_Node_Str"");
  }
  query.append(org.olat.group.BusinessGroupImpl.class.getName()).append(""String_Node_Str"");
  if (StringHelper.containsNonWhitespace(params.getOwnerName())) {
    query.append(""String_Node_Str"").append(SecurityGroupMembershipImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(IdentityImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(UserImpl.class.getName()).append(""String_Node_Str"");
  }
  if (BusinessGroup.class.equals(resultClass)) {
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
 else {
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
  boolean where=false;
  if (StringHelper.containsNonWhitespace(params.getOwnerName())) {
    where=true;
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    searchLikeUserProperty(query,""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
    searchLikeUserProperty(query,""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
    searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
  }
  if (params.getKeys() != null && !params.getKeys().isEmpty()) {
    where=where(query,where);
    query.append(""String_Node_Str"");
  }
  if (resource != null) {
    where=where(query,where);
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(BGResourceRelation.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"");
  }
  if (params.getTypes() != null && !params.getTypes().isEmpty()) {
    where=where(query,where);
    query.append(""String_Node_Str"");
  }
  if (params.isOwner() || params.isAttendee() || params.isWaiting()) {
    where=where(query,where);
    boolean subOr=false;
    query.append('(');
    if (params.isOwner()) {
      subOr=or(query,subOr);
      query.append(""String_Node_Str"").append(SecurityGroupMembershipImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    }
    if (params.isAttendee()) {
      subOr=or(query,subOr);
      query.append(""String_Node_Str"").append(SecurityGroupMembershipImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    }
    if (params.isWaiting()) {
      subOr=or(query,subOr);
      query.append(""String_Node_Str"").append(SecurityGroupMembershipImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    }
    query.append(')');
  }
  if (params.isPublicGroup()) {
    where=where(query,where);
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(OfferImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
  if (StringHelper.containsNonWhitespace(params.getNameOrDesc())) {
    where=where(query,where);
    query.append(""String_Node_Str"");
    searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
    searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
  }
 else {
    if (StringHelper.containsNonWhitespace(params.getExactName())) {
      where=where(query,where);
      query.append(""String_Node_Str"");
    }
    if (StringHelper.containsNonWhitespace(params.getName())) {
      where=where(query,where);
      searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    if (StringHelper.containsNonWhitespace(params.getDescription())) {
      where=where(query,where);
      searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (params.getTools() != null && !params.getTools().isEmpty()) {
    where=where(query,where);
    query.append(""String_Node_Str"").append(Property.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(CollaborationTools.PROP_CAT_BG_COLLABTOOLS).append(""String_Node_Str"").append(""String_Node_Str"");
  }
  if (BusinessGroup.class.equals(resultClass)) {
    query.append(""String_Node_Str"");
  }
  TypedQuery<T> dbq=dbInstance.getCurrentEntityManager().createQuery(query.toString(),resultClass);
  if (params.isOwner() || params.isAttendee() || params.isWaiting()) {
    dbq.setParameter(""String_Node_Str"",params.getIdentity().getKey());
  }
  if (params.isPublicGroup()) {
    dbq.setParameter(""String_Node_Str"",new Date(),TemporalType.TIMESTAMP);
  }
  if (params.getKeys() != null && !params.getKeys().isEmpty()) {
    dbq.setParameter(""String_Node_Str"",params.getKeys());
  }
  if (resource != null) {
    dbq.setParameter(""String_Node_Str"",resource.getKey());
  }
  if (params.getTypes() != null && !params.getTypes().isEmpty()) {
    dbq.setParameter(""String_Node_Str"",params.getTypes());
  }
  if (params.getTools() != null && !params.getTools().isEmpty()) {
    dbq.setParameter(""String_Node_Str"",params.getTools());
  }
  if (StringHelper.containsNonWhitespace(params.getOwnerName())) {
    dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getOwnerName()));
  }
  if (StringHelper.containsNonWhitespace(params.getNameOrDesc())) {
    dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getNameOrDesc()));
  }
 else {
    if (StringHelper.containsNonWhitespace(params.getExactName())) {
      dbq.setParameter(""String_Node_Str"",params.getExactName());
    }
    if (StringHelper.containsNonWhitespace(params.getName())) {
      dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getName()));
    }
    if (StringHelper.containsNonWhitespace(params.getDescription())) {
      dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getDescription()));
    }
  }
  return dbq;
}","private <T>TypedQuery<T> createFindDBQuery(SearchBusinessGroupParams params,OLATResource resource,Class<T> resultClass){
  StringBuilder query=new StringBuilder();
  if (BusinessGroup.class.equals(resultClass)) {
    query.append(""String_Node_Str"");
  }
 else {
    query.append(""String_Node_Str"");
  }
  query.append(org.olat.group.BusinessGroupImpl.class.getName()).append(""String_Node_Str"");
  if (StringHelper.containsNonWhitespace(params.getOwnerName())) {
    query.append(""String_Node_Str"").append(SecurityGroupMembershipImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(IdentityImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(UserImpl.class.getName()).append(""String_Node_Str"");
  }
  if (BusinessGroup.class.equals(resultClass)) {
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
 else {
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
  boolean where=false;
  if (StringHelper.containsNonWhitespace(params.getOwnerName())) {
    where=true;
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    searchLikeUserProperty(query,""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
    searchLikeUserProperty(query,""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
    searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
  }
  if (params.getGroupKeys() != null && !params.getGroupKeys().isEmpty()) {
    where=where(query,where);
    query.append(""String_Node_Str"");
  }
  if (resource != null) {
    where=where(query,where);
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(BGResourceRelation.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"");
  }
  if (params.getTypes() != null && !params.getTypes().isEmpty()) {
    where=where(query,where);
    query.append(""String_Node_Str"");
  }
  if (params.isOwner() || params.isAttendee() || params.isWaiting()) {
    where=where(query,where);
    boolean subOr=false;
    query.append('(');
    if (params.isOwner()) {
      subOr=or(query,subOr);
      query.append(""String_Node_Str"").append(SecurityGroupMembershipImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    }
    if (params.isAttendee()) {
      subOr=or(query,subOr);
      query.append(""String_Node_Str"").append(SecurityGroupMembershipImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    }
    if (params.isWaiting()) {
      subOr=or(query,subOr);
      query.append(""String_Node_Str"").append(SecurityGroupMembershipImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    }
    query.append(')');
  }
  if (params.isPublicGroup()) {
    where=where(query,where);
    query.append(""String_Node_Str"").append(""String_Node_Str"").append(OfferImpl.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
  if (StringHelper.containsNonWhitespace(params.getNameOrDesc())) {
    where=where(query,where);
    query.append(""String_Node_Str"");
    searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
    searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    query.append(""String_Node_Str"");
  }
 else {
    if (StringHelper.containsNonWhitespace(params.getExactName())) {
      where=where(query,where);
      query.append(""String_Node_Str"");
    }
    if (StringHelper.containsNonWhitespace(params.getName())) {
      where=where(query,where);
      searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    if (StringHelper.containsNonWhitespace(params.getDescription())) {
      where=where(query,where);
      searchLikeAttribute(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (params.getTools() != null && !params.getTools().isEmpty()) {
    where=where(query,where);
    query.append(""String_Node_Str"").append(Property.class.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(CollaborationTools.PROP_CAT_BG_COLLABTOOLS).append(""String_Node_Str"").append(""String_Node_Str"");
  }
  if (BusinessGroup.class.equals(resultClass)) {
    query.append(""String_Node_Str"");
  }
  TypedQuery<T> dbq=dbInstance.getCurrentEntityManager().createQuery(query.toString(),resultClass);
  if (params.isOwner() || params.isAttendee() || params.isWaiting()) {
    dbq.setParameter(""String_Node_Str"",params.getIdentity().getKey());
  }
  if (params.isPublicGroup()) {
    dbq.setParameter(""String_Node_Str"",new Date(),TemporalType.TIMESTAMP);
  }
  if (params.getGroupKeys() != null && !params.getGroupKeys().isEmpty()) {
    dbq.setParameter(""String_Node_Str"",params.getGroupKeys());
  }
  if (resource != null) {
    dbq.setParameter(""String_Node_Str"",resource.getKey());
  }
  if (params.getTypes() != null && !params.getTypes().isEmpty()) {
    dbq.setParameter(""String_Node_Str"",params.getTypes());
  }
  if (params.getTools() != null && !params.getTools().isEmpty()) {
    dbq.setParameter(""String_Node_Str"",params.getTools());
  }
  if (StringHelper.containsNonWhitespace(params.getOwnerName())) {
    dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getOwnerName()));
  }
  if (StringHelper.containsNonWhitespace(params.getNameOrDesc())) {
    dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getNameOrDesc()));
  }
 else {
    if (StringHelper.containsNonWhitespace(params.getExactName())) {
      dbq.setParameter(""String_Node_Str"",params.getExactName());
    }
    if (StringHelper.containsNonWhitespace(params.getName())) {
      dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getName()));
    }
    if (StringHelper.containsNonWhitespace(params.getDescription())) {
      dbq.setParameter(""String_Node_Str"",makeFuzzyQueryString(params.getDescription()));
    }
  }
  return dbq;
}"
69986,"/** 
 * @see org.olat.core.gui.components.table.TableDataModel#getValueAt(int,int)
 */
public Object getValueAt(int row,int col){
  BusinessGroup businessGroup=(BusinessGroup)objects.get(row);
  Integer numbParts=(Integer)members.get(row);
  Integer max=businessGroup.getMaxParticipants();
switch (col) {
case 0:
    return businessGroup.getName();
case 1:
  String description=businessGroup.getDescription();
description=FilterFactory.getHtmlTagsFilter().filter(description);
description=Formatter.truncate(description,256);
return description;
case 2:
if (max == null) {
return numbParts;
}
StringBuilder buf=new StringBuilder();
buf.append(numbParts);
buf.append(trans.translate(""String_Node_Str""));
buf.append(businessGroup.getMaxParticipants());
if (numbParts > businessGroup.getMaxParticipants()) {
Tracing.logInfo(""String_Node_Str"" + businessGroup + ""String_Node_Str""+ numbParts+ ""String_Node_Str""+ businessGroup.getMaxParticipants(),BusinessGroupTableModelWithMaxSize.class);
}
return buf.toString();
case 3:
if (businessGroup.getWaitingListEnabled().booleanValue()) {
int intValue=securityManager.countIdentitiesOfSecurityGroup(businessGroup.getWaitingGroup());
return new Integer(intValue);
}
return trans.translate(""String_Node_Str"");
case 4:
if (securityManager.isIdentityInSecurityGroup(this.identity,businessGroup.getPartipiciantGroup())) {
return trans.translate(""String_Node_Str"");
}
 else if (securityManager.isIdentityInSecurityGroup(this.identity,businessGroup.getWaitingGroup())) {
int pos=businessGroupService.getPositionInWaitingListFor(identity,businessGroup);
String[] onWaitingListArgs=new String[]{Integer.toString(pos)};
return trans.translate(""String_Node_Str"",onWaitingListArgs);
}
 else if (max != null && !businessGroup.getWaitingListEnabled().booleanValue() && (numbParts.intValue() >= max.intValue())) {
return trans.translate(""String_Node_Str"");
}
 else if (max != null && businessGroup.getWaitingListEnabled().booleanValue() && (numbParts.intValue() >= max.intValue())) {
return trans.translate(""String_Node_Str"");
}
return trans.translate(""String_Node_Str"");
case 5:
if (isEnrolledInAnyGroup(identity)) {
return Boolean.FALSE;
}
if (max != null && !businessGroup.getWaitingListEnabled().booleanValue() && (numbParts.intValue() >= max.intValue())) {
return Boolean.FALSE;
}
return Boolean.TRUE;
case 6:
if (isEnrolledIn(businessGroup,identity)) {
if (securityManager.isIdentityInSecurityGroup(this.identity,businessGroup.getWaitingGroup())) {
return Boolean.TRUE;
}
if (cancelEnrollEnabled) {
return Boolean.TRUE;
}
}
return Boolean.FALSE;
default :
return ""String_Node_Str"";
}
}","/** 
 * @see org.olat.core.gui.components.table.TableDataModel#getValueAt(int,int)
 */
public Object getValueAt(int row,int col){
  BusinessGroup businessGroup=(BusinessGroup)objects.get(row);
  Integer numbParts=members.get(row);
  Integer max=businessGroup.getMaxParticipants();
switch (col) {
case 0:
    return businessGroup.getName();
case 1:
  String description=businessGroup.getDescription();
description=FilterFactory.getHtmlTagsFilter().filter(description);
description=Formatter.truncate(description,256);
return description;
case 2:
if (max == null) {
return numbParts;
}
StringBuilder buf=new StringBuilder();
buf.append(numbParts);
buf.append(trans.translate(""String_Node_Str""));
buf.append(businessGroup.getMaxParticipants());
if (numbParts > businessGroup.getMaxParticipants()) {
Tracing.logInfo(""String_Node_Str"" + businessGroup + ""String_Node_Str""+ numbParts+ ""String_Node_Str""+ businessGroup.getMaxParticipants(),BusinessGroupTableModelWithMaxSize.class);
}
return buf.toString();
case 3:
if (businessGroup.getWaitingListEnabled().booleanValue()) {
int intValue=securityManager.countIdentitiesOfSecurityGroup(businessGroup.getWaitingGroup());
return new Integer(intValue);
}
return trans.translate(""String_Node_Str"");
case 4:
if (securityManager.isIdentityInSecurityGroup(identity,businessGroup.getPartipiciantGroup())) {
return trans.translate(""String_Node_Str"");
}
 else if (securityManager.isIdentityInSecurityGroup(identity,businessGroup.getWaitingGroup())) {
int pos=businessGroupService.getPositionInWaitingListFor(identity,businessGroup);
String[] onWaitingListArgs=new String[]{Integer.toString(pos)};
return trans.translate(""String_Node_Str"",onWaitingListArgs);
}
 else if (max != null && !businessGroup.getWaitingListEnabled().booleanValue() && (numbParts.intValue() >= max.intValue())) {
return trans.translate(""String_Node_Str"");
}
 else if (max != null && businessGroup.getWaitingListEnabled().booleanValue() && (numbParts.intValue() >= max.intValue())) {
return trans.translate(""String_Node_Str"");
}
return trans.translate(""String_Node_Str"");
case 5:
if (isEnrolledInAnyGroup(identity)) {
return Boolean.FALSE;
}
if (max != null && !businessGroup.getWaitingListEnabled().booleanValue() && (numbParts.intValue() >= max.intValue())) {
return Boolean.FALSE;
}
return Boolean.TRUE;
case 6:
if (isEnrolledIn(businessGroup,identity)) {
if (securityManager.isIdentityInSecurityGroup(this.identity,businessGroup.getWaitingGroup())) {
return Boolean.TRUE;
}
if (cancelEnrollEnabled) {
return Boolean.TRUE;
}
}
return Boolean.FALSE;
default :
return ""String_Node_Str"";
}
}"
69987,"/** 
 * Check if an identity is in any security-group.
 * @param identity
 * @return true: Found identity in any security-group of this table model.
 */
private boolean isEnrolledInAnyGroup(Identity identity){
  BusinessGroup businessGroup;
  for (Iterator iter=objects.iterator(); iter.hasNext(); ) {
    businessGroup=(BusinessGroup)iter.next();
    if (isEnrolledIn(businessGroup,identity)) {
      return true;
    }
  }
  return false;
}","/** 
 * Check if an identity is in any security-group.
 * @param identity
 * @return true: Found identity in any security-group of this table model.
 */
private boolean isEnrolledInAnyGroup(Identity identity){
  for (  BusinessGroup businessGroup : objects) {
    if (isEnrolledIn(businessGroup,identity)) {
      return true;
    }
  }
  return false;
}"
69988,"/** 
 * @param groups List of business groups
 * @param members List containing the number of participants for each group.The index of the list corresponds with the index of the group list
 * @param trans
 */
public BusinessGroupTableModelWithMaxSize(List groups,List members,Translator trans,Identity identity,boolean cancelEnrollEnabled){
  super(groups);
  this.members=members;
  this.trans=trans;
  this.identity=identity;
  securityManager=BaseSecurityManager.getInstance();
  businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
  this.cancelEnrollEnabled=cancelEnrollEnabled;
}","/** 
 * @param groups List of business groups
 * @param members List containing the number of participants for each group.The index of the list corresponds with the index of the group list
 * @param trans
 */
public BusinessGroupTableModelWithMaxSize(List<BusinessGroup> groups,List<Integer> members,Translator trans,Identity identity,boolean cancelEnrollEnabled){
  super(groups);
  this.members=members;
  this.trans=trans;
  this.identity=identity;
  securityManager=BaseSecurityManager.getInstance();
  businessGroupService=CoreSpringFactory.getImpl(BusinessGroupService.class);
  this.cancelEnrollEnabled=cancelEnrollEnabled;
}"
69989,"/** 
 * @param owned
 */
public void setEntries(List owned){
  this.objects=owned;
}","/** 
 * @param owned
 */
public void setEntries(List<BusinessGroup> owned){
  this.objects=owned;
}"
69990,"private void updateSearchGroupList(){
  List<BusinessGroup> groups;
  if (searchController.isEmpty()) {
    groups=Collections.emptyList();
  }
 else {
    Long id=searchController.getId();
    String name=searchController.getName();
    String description=searchController.getDescription();
    String owner=searchController.getOwner();
    SearchBusinessGroupParams params=new SearchBusinessGroupParams();
    if (id != null) {
      params.setKeys(Collections.singletonList(id));
    }
    params.setName(name);
    params.setDescription(description);
    params.setOwnerName(owner);
    groups=businessGroupService.findBusinessGroups(params,null,0,-1);
  }
  List<BGTableItem> wrapped=new ArrayList<BGTableItem>();
  Set<Long> membership=new HashSet<Long>();
  Map<Long,Long> resourceKeys=new HashMap<Long,Long>();
  for (  BusinessGroup group : groups) {
    OLATResource ores=OLATResourceManager.getInstance().findResourceable(group);
    resourceKeys.put(group.getKey(),ores.getKey());
    if (businessGroupService.isIdentityInBusinessGroup(getIdentity(),group)) {
      membership.add(group.getKey());
    }
  }
  List<OLATResourceAccess> resourcesWithAC=acFrontendManager.getAccessMethodForResources(resourceKeys.values(),true,new Date());
  for (  BusinessGroup group : groups) {
    Long oresKey=resourceKeys.get(group.getKey());
    OLATResourceAccess bgAccess=null;
    for (    OLATResourceAccess access : resourcesWithAC) {
      if (oresKey.equals(access.getResource().getKey())) {
        bgAccess=access;
        break;
      }
    }
    if (bgAccess != null) {
      wrapped.add(wrapGroup(group,true,Boolean.TRUE,null,true,bgAccess.getMethods()));
    }
  }
  groupListModel.setEntries(wrapped);
  groupListCtr.modelChanged();
}","private void updateSearchGroupList(){
  List<BusinessGroup> groups;
  if (searchController.isEmpty()) {
    groups=Collections.emptyList();
  }
 else {
    Long id=searchController.getId();
    String name=searchController.getName();
    String description=searchController.getDescription();
    String owner=searchController.getOwner();
    SearchBusinessGroupParams params=new SearchBusinessGroupParams();
    if (id != null) {
      params.setGroupKeys(Collections.singletonList(id));
    }
    params.setName(name);
    params.setDescription(description);
    params.setOwnerName(owner);
    groups=businessGroupService.findBusinessGroups(params,null,0,-1);
  }
  List<BGTableItem> wrapped=new ArrayList<BGTableItem>();
  Set<Long> membership=new HashSet<Long>();
  Map<Long,Long> resourceKeys=new HashMap<Long,Long>();
  for (  BusinessGroup group : groups) {
    OLATResource ores=OLATResourceManager.getInstance().findResourceable(group);
    resourceKeys.put(group.getKey(),ores.getKey());
    if (businessGroupService.isIdentityInBusinessGroup(getIdentity(),group)) {
      membership.add(group.getKey());
    }
  }
  List<OLATResourceAccess> resourcesWithAC=acFrontendManager.getAccessMethodForResources(resourceKeys.values(),true,new Date());
  for (  BusinessGroup group : groups) {
    Long oresKey=resourceKeys.get(group.getKey());
    OLATResourceAccess bgAccess=null;
    for (    OLATResourceAccess access : resourcesWithAC) {
      if (oresKey.equals(access.getResource().getKey())) {
        bgAccess=access;
        break;
      }
    }
    if (bgAccess != null) {
      wrapped.add(wrapGroup(group,true,Boolean.TRUE,null,true,bgAccess.getMethods()));
    }
  }
  groupListModel.setEntries(wrapped);
  groupListCtr.modelChanged();
}"
69991,"private List<BGTableItem> search(SearchEvent event){
  Long id=event.getId();
  String name=event.getName();
  String description=event.getDescription();
  String ownerName=event.getOwnerName();
  SearchBusinessGroupParams params=new SearchBusinessGroupParams();
  if (id != null) {
    params.setKeys(Collections.singletonList(id));
  }
  params.setName(StringHelper.containsNonWhitespace(name) ? name : null);
  params.setDescription(StringHelper.containsNonWhitespace(description) ? description : null);
  params.setOwnerName(StringHelper.containsNonWhitespace(ownerName) ? ownerName : null);
  params.setOwner(event.isOwner());
  params.setAttendee(event.isAttendee());
  params.setWaiting(event.isWaiting());
  params.setPublicGroup(event.isPublicGroups());
  params.setIdentity(getIdentity());
  List<BusinessGroup> groups;
  if (admin) {
    if (event.isAttendee() || event.isOwner()) {
      params.setIdentity(getIdentity());
    }
    groups=businessGroupService.findBusinessGroups(params,null,0,-1);
  }
 else {
    if (!event.isAttendee() && !event.isOwner() && !event.isWaiting()&& !event.isPublicGroups()) {
      params.setPublicGroup(true);
    }
    groups=businessGroupService.findBusinessGroups(params,null,0,-1);
  }
  List<Long> groupsWithMembership=businessGroupService.isIdentityInBusinessGroups(getIdentity(),groups);
  Set<Long> memberships=new HashSet<Long>(groupsWithMembership);
  List<Long> resourceKeys=new ArrayList<Long>();
  for (  BusinessGroup group : groups) {
    resourceKeys.add(group.getResource().getKey());
  }
  List<BGRepositoryEntryRelation> resources=businessGroupService.findRelationToRepositoryEntries(groups,0,-1);
  List<OLATResourceAccess> resourcesWithAC=acFrontendManager.getAccessMethodForResources(resourceKeys,true,new Date());
  List<BGTableItem> items=new ArrayList<BGTableItem>();
  for (  BusinessGroup group : groups) {
    Long oresKey=group.getResource().getKey();
    List<PriceMethodBundle> accessMethods=null;
    for (    OLATResourceAccess access : resourcesWithAC) {
      if (oresKey.equals(access.getResource().getKey())) {
        accessMethods=access.getMethods();
        break;
      }
    }
    Boolean allowLeave=memberships.contains(group.getKey()) ? Boolean.TRUE : null;
    Boolean allowDelete=admin ? Boolean.TRUE : null;
    boolean accessControl=(accessMethods != null);
    boolean member=memberships.contains(group.getKey());
    List<BGRepositoryEntryRelation> relations=new ArrayList<BGRepositoryEntryRelation>();
    for (    BGRepositoryEntryRelation resource : resources) {
      if (group.getKey().equals(resource.getGroupKey())) {
        relations.add(resource);
        if (relations.size() >= 3) {
          break;
        }
      }
    }
    BGTableItem tableItem=new BGTableItem(group,member,allowLeave,allowDelete,accessControl,accessMethods);
    tableItem.setRelations(relations);
    items.add(tableItem);
  }
  return items;
}","private List<BGTableItem> search(SearchEvent event){
  Long id=event.getId();
  String name=event.getName();
  String description=event.getDescription();
  String ownerName=event.getOwnerName();
  SearchBusinessGroupParams params=new SearchBusinessGroupParams();
  if (id != null) {
    params.setGroupKeys(Collections.singletonList(id));
  }
  params.setName(StringHelper.containsNonWhitespace(name) ? name : null);
  params.setDescription(StringHelper.containsNonWhitespace(description) ? description : null);
  params.setOwnerName(StringHelper.containsNonWhitespace(ownerName) ? ownerName : null);
  params.setOwner(event.isOwner());
  params.setAttendee(event.isAttendee());
  params.setWaiting(event.isWaiting());
  params.setPublicGroup(event.isPublicGroups());
  params.setIdentity(getIdentity());
  List<BusinessGroup> groups;
  if (admin) {
    if (event.isAttendee() || event.isOwner()) {
      params.setIdentity(getIdentity());
    }
    groups=businessGroupService.findBusinessGroups(params,null,0,-1);
  }
 else {
    if (!event.isAttendee() && !event.isOwner() && !event.isWaiting()&& !event.isPublicGroups()) {
      params.setPublicGroup(true);
    }
    groups=businessGroupService.findBusinessGroups(params,null,0,-1);
  }
  List<Long> groupsWithMembership=businessGroupService.isIdentityInBusinessGroups(getIdentity(),groups);
  Set<Long> memberships=new HashSet<Long>(groupsWithMembership);
  List<Long> resourceKeys=new ArrayList<Long>();
  for (  BusinessGroup group : groups) {
    resourceKeys.add(group.getResource().getKey());
  }
  List<BGRepositoryEntryRelation> resources=businessGroupService.findRelationToRepositoryEntries(groups,0,-1);
  List<OLATResourceAccess> resourcesWithAC=acFrontendManager.getAccessMethodForResources(resourceKeys,true,new Date());
  List<BGTableItem> items=new ArrayList<BGTableItem>();
  for (  BusinessGroup group : groups) {
    Long oresKey=group.getResource().getKey();
    List<PriceMethodBundle> accessMethods=null;
    for (    OLATResourceAccess access : resourcesWithAC) {
      if (oresKey.equals(access.getResource().getKey())) {
        accessMethods=access.getMethods();
        break;
      }
    }
    Boolean allowLeave=memberships.contains(group.getKey()) ? Boolean.TRUE : null;
    Boolean allowDelete=admin ? Boolean.TRUE : null;
    boolean accessControl=(accessMethods != null);
    boolean member=memberships.contains(group.getKey());
    List<BGRepositoryEntryRelation> relations=new ArrayList<BGRepositoryEntryRelation>();
    for (    BGRepositoryEntryRelation resource : resources) {
      if (group.getKey().equals(resource.getGroupKey())) {
        relations.add(resource);
        if (relations.size() >= 3) {
          break;
        }
      }
    }
    BGTableItem tableItem=new BGTableItem(group,member,allowLeave,allowDelete,accessControl,accessMethods);
    tableItem.setRelations(relations);
    items.add(tableItem);
  }
  return items;
}"
69992,"@Test public void findBusinessGroupsOfAreaAttendedBy(){
  Identity id1=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  Identity id2=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  Identity id3=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  OLATResource resource=JunitTestHelper.createRandomResource();
  String areaName=UUID.randomUUID().toString();
  BGArea area1=areaManager.createAndPersistBGAreaIfNotExists(""String_Node_Str"" + areaName,""String_Node_Str"" + areaName,resource);
  BGArea area2=areaManager.createAndPersistBGAreaIfNotExists(""String_Node_Str"" + areaName,""String_Node_Str"" + areaName,resource);
  BusinessGroup group1=businessGroupService.createBusinessGroup(null,""String_Node_Str"",""String_Node_Str"",0,-1,false,false,resource);
  BusinessGroup group2=businessGroupService.createBusinessGroup(null,""String_Node_Str"",""String_Node_Str"",0,-1,false,false,resource);
  BusinessGroup group3=businessGroupService.createBusinessGroup(null,""String_Node_Str"",""String_Node_Str"",0,-1,false,false,resource);
  dbInstance.commitAndCloseSession();
  areaManager.addBGToBGArea(group1,area1);
  areaManager.addBGToBGArea(group2,area1);
  areaManager.addBGToBGArea(group2,area2);
  areaManager.addBGToBGArea(group3,area1);
  dbInstance.commitAndCloseSession();
  securityManager.addIdentityToSecurityGroup(id1,group1.getPartipiciantGroup());
  securityManager.addIdentityToSecurityGroup(id2,group2.getPartipiciantGroup());
  securityManager.addIdentityToSecurityGroup(id2,group3.getPartipiciantGroup());
  securityManager.addIdentityToSecurityGroup(id3,group3.getPartipiciantGroup());
  dbInstance.commitAndCloseSession();
  List<BusinessGroup> groupId1=areaManager.findBusinessGroupsOfAreaAttendedBy(id1,null,resource);
  Assert.assertNotNull(groupId1);
  Assert.assertEquals(1,groupId1.size());
  Assert.assertTrue(groupId1.contains(group1));
  List<BusinessGroup> groupId1Area2=areaManager.findBusinessGroupsOfAreaAttendedBy(id1,""String_Node_Str"" + areaName,resource);
  Assert.assertNotNull(groupId1Area2);
  Assert.assertEquals(0,groupId1Area2.size());
  List<BusinessGroup> groupId2Area1=areaManager.findBusinessGroupsOfAreaAttendedBy(id2,""String_Node_Str"" + areaName,resource);
  Assert.assertNotNull(groupId2Area1);
  Assert.assertEquals(2,groupId2Area1.size());
  Assert.assertTrue(groupId2Area1.contains(group2));
  Assert.assertTrue(groupId2Area1.contains(group3));
}","@Test public void findBusinessGroupsOfAreaAttendedBy(){
  Identity id1=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  Identity id2=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  Identity id3=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  OLATResource resource=JunitTestHelper.createRandomResource();
  String areaName=UUID.randomUUID().toString();
  BGArea area1=areaManager.createAndPersistBGAreaIfNotExists(""String_Node_Str"" + areaName,""String_Node_Str"" + areaName,resource);
  BGArea area2=areaManager.createAndPersistBGAreaIfNotExists(""String_Node_Str"" + areaName,""String_Node_Str"" + areaName,resource);
  BusinessGroup group1=businessGroupService.createBusinessGroup(null,""String_Node_Str"",""String_Node_Str"",0,-1,false,false,resource);
  BusinessGroup group2=businessGroupService.createBusinessGroup(null,""String_Node_Str"",""String_Node_Str"",0,-1,false,false,resource);
  BusinessGroup group3=businessGroupService.createBusinessGroup(null,""String_Node_Str"",""String_Node_Str"",0,-1,false,false,resource);
  dbInstance.commitAndCloseSession();
  areaManager.addBGToBGArea(group1,area1);
  areaManager.addBGToBGArea(group2,area1);
  areaManager.addBGToBGArea(group2,area2);
  areaManager.addBGToBGArea(group3,area1);
  dbInstance.commitAndCloseSession();
  securityManager.addIdentityToSecurityGroup(id1,group1.getPartipiciantGroup());
  securityManager.addIdentityToSecurityGroup(id2,group2.getPartipiciantGroup());
  securityManager.addIdentityToSecurityGroup(id2,group3.getPartipiciantGroup());
  securityManager.addIdentityToSecurityGroup(id3,group3.getPartipiciantGroup());
  dbInstance.commitAndCloseSession();
  List<BusinessGroup> groupId1=areaManager.findBusinessGroupsOfAreaAttendedBy(id1,null,resource);
  Assert.assertNotNull(groupId1);
  Assert.assertEquals(1,groupId1.size());
  Assert.assertTrue(groupId1.contains(group1));
  List<Long> area2Keys=Collections.singletonList(area2.getKey());
  List<BusinessGroup> groupId1Area2=areaManager.findBusinessGroupsOfAreaAttendedBy(id1,area2Keys,resource);
  Assert.assertNotNull(groupId1Area2);
  Assert.assertEquals(0,groupId1Area2.size());
  List<Long> area1Keys=Collections.singletonList(area1.getKey());
  List<BusinessGroup> groupId2Area1=areaManager.findBusinessGroupsOfAreaAttendedBy(id2,area1Keys,resource);
  Assert.assertNotNull(groupId2Area1);
  Assert.assertEquals(2,groupId2Area1.size());
  Assert.assertTrue(groupId2Area1.contains(group2));
  Assert.assertTrue(groupId2Area1.contains(group3));
}"
69993,"private void init(UserRequest ureq){
  startPage=createVelocityContainer(""String_Node_Str"");
  isAssessable=config.getBooleanSafe(ScormEditController.CONFIG_ISASSESSABLE,true);
  if (!maxAttemptsReached()) {
    chooseScormRunMode=new ChooseScormRunModeForm(ureq,getWindowControl(),!isAssessable);
    listenTo(chooseScormRunMode);
    startPage.put(""String_Node_Str"",chooseScormRunMode.getInitialComponent());
    startPage.contextPut(""String_Node_Str"",Boolean.FALSE);
  }
 else {
    startPage.contextPut(""String_Node_Str"",Boolean.TRUE);
  }
  main=new Panel(""String_Node_Str"");
  doStartPage();
  putInitialPanel(main);
  boolean doSkip=config.getBooleanSafe(ScormEditController.CONFIG_SKIPLAUNCHPAGE,true);
  if (isAssessable && doSkip && !maxAttemptsReached()) {
    doLaunch(ureq,true);
    getWindowControl().getWindowBackOffice().addCycleListener(this);
  }
}","private void init(UserRequest ureq){
  startPage=createVelocityContainer(""String_Node_Str"");
  isAssessable=config.getBooleanSafe(ScormEditController.CONFIG_ISASSESSABLE,true);
  if (!maxAttemptsReached()) {
    chooseScormRunMode=new ChooseScormRunModeForm(ureq,getWindowControl(),!isAssessable);
    listenTo(chooseScormRunMode);
    startPage.put(""String_Node_Str"",chooseScormRunMode.getInitialComponent());
    startPage.contextPut(""String_Node_Str"",Boolean.FALSE);
  }
 else {
    startPage.contextPut(""String_Node_Str"",Boolean.TRUE);
  }
  main=new Panel(""String_Node_Str"");
  doStartPage();
  putInitialPanel(main);
  boolean doSkip=config.getBooleanSafe(ScormEditController.CONFIG_SKIPLAUNCHPAGE,true);
  if (doSkip && !maxAttemptsReached()) {
    doLaunch(ureq,true);
    getWindowControl().getWindowBackOffice().addCycleListener(this);
  }
}"
69994,"@Test @RunAsClient public void checkSettings() throws IOException, URISyntaxException {
  List<UserVO> userVO=functionalVOUtil.createTestUsers(deploymentUrl,1);
  Assert.assertTrue(functionalUtil.login(browser));
  Assert.assertTrue(functionalHomeSiteUtil.resetSettings(browser));
  functionalHomeSiteUtil.selectLanguage(browser,FunctionalHomeSiteUtil.GERMAN_LANGUAGE_VALUE);
  functionalHomeSiteUtil.disableResume(browser);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser));
  functionalHomeSiteUtil.beginEditingPortal(browser);
  functionalHomeSiteUtil.deactivatePortlet(browser,functionalHomeSiteUtil.getPortletEffCss());
  functionalHomeSiteUtil.activatePortlet(browser,functionalHomeSiteUtil.getPortletNotesCss());
  functionalHomeSiteUtil.movePortlet(browser,functionalHomeSiteUtil.getPortletDykCss(),FunctionalHomeSiteUtil.Direction.UP);
  functionalHomeSiteUtil.movePortlet(browser,functionalHomeSiteUtil.getPortletNotiCss(),FunctionalHomeSiteUtil.Direction.LEFT);
  functionalHomeSiteUtil.endEditingPortal(browser);
  functionalHomeSiteUtil.openPageByNavigation(browser,FunctionalHomeSiteUtil.HomePage.SETTINGS);
  functionalUtil.openContentTab(browser,SettingsTab.SYSTEM.ordinal());
  functionalHomeSiteUtil.selectLanguage(browser,""String_Node_Str"");
  functionalHomeSiteUtil.enableBack(browser);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser));
  HashMap<String,String> pages=new HashMap<String,String>();
  Iterator iter=pages.keySet().iterator();
  while (iter.hasNext()) {
    Map.Entry pairs=(Map.Entry)iter.next();
    browser.click((String)pairs.getKey());
  }
  String[] keys=(String[])pages.entrySet().toArray();
  for (int i=pages.size() - 1; i >= 0; i--) {
    browser.goBack();
    Assert.assertTrue(browser.isElementPresent(pages.get(keys[i])));
  }
  UserVO current=userVO.get(0);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser,current.getLogin(),current.getPassword(),true));
  functionalUtil.openSite(browser,FunctionalUtil.OlatSite.HOME);
  functionalHomeSiteUtil.openPageByNavigation(browser,FunctionalHomeSiteUtil.HomePage.SETTINGS);
  String newPassword=""String_Node_Str"" + 0 + ""String_Node_Str""+ UUID.randomUUID().toString();
  functionalUtil.openContentTab(browser,SettingsTab.PASSWORD.ordinal());
  functionalUtil.typePassword(browser,functionalHomeSiteUtil.getOldPasswordCss(),functionalUtil.getPassword());
  functionalUtil.typePassword(browser,functionalHomeSiteUtil.getNewPasswordCss(),newPassword);
  functionalUtil.typePassword(browser,functionalHomeSiteUtil.getConfirmPasswordCss(),newPassword);
  functionalUtil.saveForm(browser,0);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser,current.getLogin(),newPassword,true));
  functionalHomeSiteUtil.endEditingPortal(browser);
}","@Test @RunAsClient public void checkSettings() throws IOException, URISyntaxException, InterruptedException {
  List<UserVO> userVO=functionalVOUtil.createTestUsers(deploymentUrl,1);
  Assert.assertTrue(functionalUtil.login(browser));
  Thread.sleep(5000);
  Assert.assertTrue(functionalHomeSiteUtil.resetSettings(browser));
  Thread.sleep(5000);
  functionalHomeSiteUtil.selectLanguage(browser,FunctionalHomeSiteUtil.GERMAN_LANGUAGE_VALUE);
  Thread.sleep(10000);
  functionalHomeSiteUtil.disableResume(browser);
  Assert.assertTrue(functionalUtil.logout(browser));
  Thread.sleep(5000);
  Assert.assertTrue(functionalUtil.login(browser));
  functionalHomeSiteUtil.beginEditingPortal(browser);
  Thread.sleep(5000);
  functionalHomeSiteUtil.deactivatePortlet(browser,functionalHomeSiteUtil.getPortletEffCss());
  functionalHomeSiteUtil.activatePortlet(browser,functionalHomeSiteUtil.getPortletNotesCss());
  functionalHomeSiteUtil.movePortlet(browser,functionalHomeSiteUtil.getPortletDykCss(),FunctionalHomeSiteUtil.Direction.UP);
  functionalHomeSiteUtil.movePortlet(browser,functionalHomeSiteUtil.getPortletNotiCss(),FunctionalHomeSiteUtil.Direction.LEFT);
  functionalHomeSiteUtil.endEditingPortal(browser);
  functionalHomeSiteUtil.openActionByMenuTree(browser,FunctionalHomeSiteUtil.HomeSiteAction.SETTINGS);
  functionalUtil.openContentTab(browser,SettingsTab.SYSTEM.ordinal());
  functionalHomeSiteUtil.selectLanguage(browser,FunctionalHomeSiteUtil.ENGLISH_LANGUAGE_VALUE);
  functionalHomeSiteUtil.enableBack(browser);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser));
  HashMap<String,String> pages=new HashMap<String,String>();
  Iterator iter=pages.keySet().iterator();
  while (iter.hasNext()) {
    Map.Entry pairs=(Map.Entry)iter.next();
    browser.click((String)pairs.getKey());
  }
  String[] keys=(String[])pages.entrySet().toArray();
  for (int i=pages.size() - 1; i >= 0; i--) {
    browser.goBack();
    Assert.assertTrue(browser.isElementPresent(pages.get(keys[i])));
  }
  UserVO current=userVO.get(0);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser,current.getLogin(),current.getPassword(),true));
  functionalUtil.openSite(browser,FunctionalUtil.OlatSite.HOME);
  functionalHomeSiteUtil.openActionByMenuTree(browser,FunctionalHomeSiteUtil.HomeSiteAction.SETTINGS);
  String newPassword=""String_Node_Str"" + 0 + ""String_Node_Str""+ UUID.randomUUID().toString();
  functionalUtil.openContentTab(browser,SettingsTab.PASSWORD.ordinal());
  functionalUtil.typePassword(browser,functionalHomeSiteUtil.getOldPasswordCss(),functionalUtil.getPassword());
  functionalUtil.typePassword(browser,functionalHomeSiteUtil.getNewPasswordCss(),newPassword);
  functionalUtil.typePassword(browser,functionalHomeSiteUtil.getConfirmPasswordCss(),newPassword);
  functionalUtil.saveForm(browser,0);
  Assert.assertTrue(functionalUtil.logout(browser));
  Assert.assertTrue(functionalUtil.login(browser,current.getLogin(),newPassword,true));
  functionalHomeSiteUtil.endEditingPortal(browser);
}"
69995,"/** 
 * FIXME:fj: change className to class
 * @see org.olat.core.gui.control.generic.dtabs.DTabs#activateStatic(org.olat.core.gui.UserRequest,java.lang.String,java.lang.String)
 */
public void activateStatic(UserRequest ureq,String className,String viewIdentifier,List<ContextEntry> entries){
  for (Iterator it_sites=sites.iterator(); it_sites.hasNext(); ) {
    SiteInstance site=(SiteInstance)it_sites.next();
    String cName=site.getClass().getName();
    if (cName.equals(className)) {
      activateSite(site,ureq,viewIdentifier,entries);
      return;
    }
  }
}","/** 
 * FIXME:fj: change className to class
 * @see org.olat.core.gui.control.generic.dtabs.DTabs#activateStatic(org.olat.core.gui.UserRequest,java.lang.String,java.lang.String)
 */
public void activateStatic(UserRequest ureq,String className,String viewIdentifier,List<ContextEntry> entries){
  for (Iterator<SiteInstance> it_sites=sites.iterator(); it_sites.hasNext(); ) {
    SiteInstance site=it_sites.next();
    String cName=site.getClass().getName();
    if (cName.equals(className)) {
      activateSite(site,ureq,viewIdentifier,entries);
      return;
    }
  }
}"
69996,"private void initialize(UserRequest ureq){
  mainVc=createVelocityContainer(""String_Node_Str"");
  navVc=createVelocityContainer(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",navVc);
  guimsgVc=createVelocityContainer(""String_Node_Str"");
  guimsgVc.contextPut(""String_Node_Str"",guiMessage);
  guimsgHolder=new Panel(""String_Node_Str"");
  guimsgHolder.setContent(guimsgPanel);
  currentMsgHolder=guimsgHolder;
  mainVc.put(""String_Node_Str"",guimsgHolder);
  dtabs=new ArrayList<DTab>();
  dtabsLinkNames=new ArrayList<String>();
  dtabsControllers=new ArrayList<Controller>();
  sites=baseFullWebappControllerParts.getSiteInstances(ureq,getWindowControl());
  if (sites != null && sites.size() == 0) {
    sites=null;
  }
  if (sites != null) {
    for (Iterator<SiteInstance> iterator=sites.iterator(); iterator.hasNext(); ) {
      SiteInstance si=iterator.next();
      Link link=LinkFactory.createCustomLink(""String_Node_Str"" + navLinkCounter,""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
      link.setCustomDisplayText(si.getNavElement().getTitle());
      link.setTitle(si.getNavElement().getDescription());
      link.setUserObject(si);
      Character accessKey=si.getNavElement().getAccessKey();
      if (accessKey != null && StringHelper.containsNonWhitespace(accessKey.toString())) {
        link.setAccessKey(accessKey.toString());
      }
      navLinkCounter++;
    }
  }
  navVc.contextPut(""String_Node_Str"",sites);
  navVc.contextPut(""String_Node_Str"",dtabs);
  navVc.contextPut(""String_Node_Str"",dtabsLinkNames);
  navVc.contextPut(""String_Node_Str"",this);
  headerCtr=baseFullWebappControllerParts.createHeaderController(ureq,getWindowControl());
  if (headerCtr != null) {
    listenTo(headerCtr);
    mainVc.put(""String_Node_Str"",headerCtr.getInitialComponent());
  }
  topnavCtr=baseFullWebappControllerParts.createTopNavController(ureq,getWindowControl());
  if (topnavCtr != null) {
    listenTo(topnavCtr);
    mainVc.put(""String_Node_Str"",topnavCtr.getInitialComponent());
  }
  modalPanel=new Panel(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",modalPanel);
  main=new Panel(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",main);
  footerCtr=baseFullWebappControllerParts.createFooterController(ureq,getWindowControl());
  if (footerCtr != null) {
    listenTo(footerCtr);
    mainVc.put(""String_Node_Str"",footerCtr.getInitialComponent());
  }
  contentCtrl=baseFullWebappControllerParts.getContentController(ureq,getWindowControl());
  if (contentCtrl != null) {
    listenTo(contentCtrl);
    GuiStack gs=getWindowControl().getWindowBackOffice().createGuiStack(contentCtrl.getInitialComponent());
    setGuiStack(gs);
    main.setContent(contentCtrl.getInitialComponent());
  }
  if (sites != null) {
    prevSite=sites.get(0);
    if (contentCtrl == null) {
      activateSite(sites.get(0),ureq,null,null);
    }
  }
  if (sites == null && contentCtrl == null) {
    main.setContent(TextFactory.createTextComponentFromString(""String_Node_Str"",""String_Node_Str"",null,false,null));
  }
  String stickyMessage=GlobalStickyMessage.getGlobalStickyMessage();
  this.mainVc.contextPut(""String_Node_Str"",(stickyMessage == null ? Boolean.FALSE : Boolean.TRUE));
  this.mainVc.contextPut(""String_Node_Str"",stickyMessage);
  addCustomThemeJS();
}","private void initialize(UserRequest ureq){
  mainVc=createVelocityContainer(""String_Node_Str"");
  navVc=createVelocityContainer(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",navVc);
  guimsgVc=createVelocityContainer(""String_Node_Str"");
  guimsgVc.contextPut(""String_Node_Str"",guiMessage);
  guimsgHolder=new Panel(""String_Node_Str"");
  guimsgHolder.setContent(guimsgPanel);
  currentMsgHolder=guimsgHolder;
  mainVc.put(""String_Node_Str"",guimsgHolder);
  dtabs=new ArrayList<DTab>();
  dtabsLinkNames=new ArrayList<String>();
  dtabsControllers=new ArrayList<Controller>();
  sites=baseFullWebappControllerParts.getSiteInstances(ureq,getWindowControl());
  if (sites != null && sites.size() == 0) {
    sites=null;
  }
  if (sites != null) {
    for (Iterator<SiteInstance> iterator=sites.iterator(); iterator.hasNext(); ) {
      SiteInstance si=iterator.next();
      Link link=LinkFactory.createCustomLink(""String_Node_Str"" + navLinkCounter,""String_Node_Str"",""String_Node_Str"",Link.NONTRANSLATED,navVc,this);
      link.setCustomDisplayText(si.getNavElement().getTitle());
      link.setTitle(si.getNavElement().getDescription());
      link.setUserObject(si);
      Character accessKey=si.getNavElement().getAccessKey();
      if (accessKey != null && StringHelper.containsNonWhitespace(accessKey.toString())) {
        link.setAccessKey(accessKey.toString());
      }
      navLinkCounter++;
    }
  }
  navVc.contextPut(""String_Node_Str"",sites);
  navVc.contextPut(""String_Node_Str"",dtabs);
  navVc.contextPut(""String_Node_Str"",dtabsLinkNames);
  navVc.contextPut(""String_Node_Str"",this);
  headerCtr=baseFullWebappControllerParts.createHeaderController(ureq,getWindowControl());
  if (headerCtr != null) {
    listenTo(headerCtr);
    mainVc.put(""String_Node_Str"",headerCtr.getInitialComponent());
  }
  topnavCtr=baseFullWebappControllerParts.createTopNavController(ureq,getWindowControl());
  if (topnavCtr != null) {
    listenTo(topnavCtr);
    mainVc.put(""String_Node_Str"",topnavCtr.getInitialComponent());
  }
  modalPanel=new Panel(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",modalPanel);
  main=new Panel(""String_Node_Str"");
  mainVc.put(""String_Node_Str"",main);
  footerCtr=baseFullWebappControllerParts.createFooterController(ureq,getWindowControl());
  if (footerCtr != null) {
    listenTo(footerCtr);
    mainVc.put(""String_Node_Str"",footerCtr.getInitialComponent());
  }
  contentCtrl=baseFullWebappControllerParts.getContentController(ureq,getWindowControl());
  if (contentCtrl != null) {
    listenTo(contentCtrl);
    GuiStack gs=getWindowControl().getWindowBackOffice().createGuiStack(contentCtrl.getInitialComponent());
    setGuiStack(gs);
    main.setContent(contentCtrl.getInitialComponent());
  }
  if (sites != null) {
    prevSite=sites.get(0);
    if (contentCtrl == null) {
      activateSite(prevSite,ureq,null,null);
      siteToBusinessPath.put(prevSite,ureq.getUserSession().getLastHistoryPoint());
    }
  }
  if (sites == null && contentCtrl == null) {
    main.setContent(TextFactory.createTextComponentFromString(""String_Node_Str"",""String_Node_Str"",null,false,null));
  }
  String stickyMessage=GlobalStickyMessage.getGlobalStickyMessage();
  this.mainVc.contextPut(""String_Node_Str"",(stickyMessage == null ? Boolean.FALSE : Boolean.TRUE));
  this.mainVc.contextPut(""String_Node_Str"",stickyMessage);
  addCustomThemeJS();
}"
69997,"public void execute(){
  PropertyManager pm=PropertyManager.getInstance();
  String props=XStreamHelper.toXML(toUpdate);
  Property imProperty=PropertyManager.getInstance().findProperty(identity,null,null,null,ImPreferences.USER_PROPERTY_KEY);
  if (imProperty == null) {
    throw new AssertException(""String_Node_Str"" + identity.getName() + ""String_Node_Str"");
  }
  imProperty.setTextValue(props);
  pm.updateProperty(imProperty);
}","public void execute(){
  PropertyManager.getInstance().deleteProperty(prefs.getDbProperty());
}"
69998,"/** 
 * @see java.lang.Runnable#run()
 */
public void run(){
  double j=Math.random() * 20;
  int z=Long.valueOf((Math.round(j))).intValue();
  try {
    Thread.sleep(z);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  ImPrefsManager mgr=ImPrefsManager.getInstance();
  ImPreferences prefs=mgr.loadOrCreatePropertiesFor(ident);
  prefs.setAwarenessVisible(false);
  prefs.setOnlineTimeVisible(false);
  prefs.setRosterDefaultStatus(Presence.Mode.away.toString());
  prefs.setVisibleToOthers(false);
  mgr.updatePropertiesFor(ident,prefs);
  double rand=Math.random() * 3;
  int i=Long.valueOf((Math.round(rand))).intValue();
  if (i == 1) {
    PropertyManager.getInstance().deleteProperty(prefs.getDbProperty());
    System.out.println(""String_Node_Str"" + ident.getName());
  }
  DBFactory.getInstance().closeSession();
  System.out.println(""String_Node_Str"" + ident.getName());
}","/** 
 * @see java.lang.Runnable#run()
 */
public void run(){
  double j=Math.random() * 20;
  int z=Long.valueOf((Math.round(j))).intValue();
  try {
    Thread.sleep(z);
  }
 catch (  InterruptedException e) {
    log.error(""String_Node_Str"",e);
  }
  ImPrefsManager mgr=ImPrefsManager.getInstance();
  ImPreferences prefs=mgr.loadOrCreatePropertiesFor(ident);
  prefs.setAwarenessVisible(false);
  prefs.setOnlineTimeVisible(false);
  prefs.setRosterDefaultStatus(Presence.Mode.away.toString());
  prefs.setVisibleToOthers(false);
  mgr.updatePropertiesFor(ident,prefs);
  double rand=Math.random() * 3;
  int i=Long.valueOf((Math.round(rand))).intValue();
  if (i == 1) {
    mgr.deleteProperties(ident,prefs);
    System.out.println(""String_Node_Str"" + ident.getName());
  }
  DBFactory.getInstance().commitAndCloseSession();
  System.out.println(""String_Node_Str"" + ident.getName());
}"
69999,"@Test public void testPrefs(){
  List<String> usernames=new ArrayList<String>();
  List<Identity> identities=new ArrayList<Identity>();
  usernames.add(testUserA);
  usernames.add(testUserB);
  usernames.add(testUserC);
  usernames.add(testUserD);
  for (Iterator<String> iterator=usernames.iterator(); iterator.hasNext(); ) {
    String name=iterator.next();
    Identity ident=securityManager.findIdentityByName(name);
    assertNotNull(ident);
    identities.add(ident);
  }
  long start=System.currentTimeMillis();
  int runs=0;
  while (runs < 100) {
    double rand=Math.random() * 3;
    int i=Long.valueOf((Math.round(rand))).intValue();
    ImPrefsManager mgr=ImPrefsManager.getInstance();
    Identity ident=identities.get(i);
    ImPreferences prefs=mgr.loadOrCreatePropertiesFor(ident);
    assertNotNull(prefs);
    assertNotNull(prefs.getDbProperty());
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e1) {
      log.error(""String_Node_Str"",e1);
    }
    for (Iterator<Identity> iterator=identities.iterator(); iterator.hasNext(); ) {
      ident=iterator.next();
      TaskExecutorManager.getInstance().runTask(new IMPrefsTask(ident));
      try {
        Thread.sleep(20);
      }
 catch (      InterruptedException e) {
        log.error(""String_Node_Str"",e);
      }
    }
    runs++;
  }
  long stop=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (stop - start) / 1000);
}","@Test public void testPrefs(){
  Identity id1=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  Identity id2=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  Identity id3=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  Identity id4=JunitTestHelper.createAndPersistIdentityAsUser(""String_Node_Str"" + UUID.randomUUID().toString());
  List<Identity> identities=new ArrayList<Identity>();
  identities.add(id1);
  identities.add(id2);
  identities.add(id3);
  identities.add(id4);
  dbInstance.commitAndCloseSession();
  long start=System.currentTimeMillis();
  for (int runs=0; runs < 100; runs++) {
    double rand=Math.random() * 3.0d;
    int i=Long.valueOf((Math.round(rand))).intValue();
    Identity randomIdentity=identities.get(i);
    ImPreferences prefs=imPrefsManager.loadOrCreatePropertiesFor(randomIdentity);
    assertNotNull(prefs);
    assertNotNull(prefs.getDbProperty());
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e1) {
      log.error(""String_Node_Str"",e1);
    }
    for (    Identity identity : identities) {
      TaskExecutorManager.getInstance().runTask(new IMPrefsTask(identity));
      try {
        Thread.sleep(20);
      }
 catch (      InterruptedException e) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
  long stop=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (stop - start) / 1000);
}"
70000,"/** 
 * TearDown is called after each test
 */
@After public void tearDown(){
  try {
    DBFactory.getInstance().closeSession();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e);
  }
}","@After public void tearDown(){
  try {
    DBFactory.getInstance().closeSession();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e);
  }
}"
