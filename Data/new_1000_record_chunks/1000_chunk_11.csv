record_number,buggy_code,fixed_code
10001,"/** 
 * Test of fast instance check algorithm on carcinogenesis data set.
 * @throws ComponentInitException 
 * @throws ParseException 
 */
public void fastInstanceCheckTest() throws ComponentInitException, ParseException {
  String file=""String_Node_Str"";
  ComponentManager cm=ComponentManager.getInstance();
  KnowledgeSource ks=cm.knowledgeSource(OWLFile.class);
  try {
    cm.applyConfigEntry(ks,""String_Node_Str"",new File(file).toURI().toURL());
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  ks.init();
  ReasonerComponent reasoner=cm.reasoner(OWLAPIReasoner.class,ks);
  reasoner.init();
  baseURI=reasoner.getBaseURI();
  List<Description> testDescriptions=new LinkedList<Description>();
  List<List<Individual>> posIndividuals=new LinkedList<List<Individual>>();
  List<List<Individual>> negIndividuals=new LinkedList<List<Individual>>();
  testDescriptions.add(KBParser.parseConcept(""String_Node_Str""));
  posIndividuals.add(getIndSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  negIndividuals.add(getIndSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  for (int i=0; i < testDescriptions.size(); i++) {
    Description description=testDescriptions.get(i);
    List<Individual> pos=posIndividuals.get(i);
    List<Individual> neg=negIndividuals.get(i);
    for (    Individual ind : pos) {
      assertTrue(reasoner.hasType(description,ind));
    }
    for (    Individual ind : neg) {
      assertTrue(!reasoner.hasType(description,ind));
    }
  }
}","/** 
 * Test of fast instance check algorithm on carcinogenesis data set.
 * @throws ComponentInitException 
 * @throws ParseException 
 */
@Test public void fastInstanceCheckTest() throws ComponentInitException, ParseException {
  String file=""String_Node_Str"";
  ComponentManager cm=ComponentManager.getInstance();
  KnowledgeSource ks=cm.knowledgeSource(OWLFile.class);
  try {
    cm.applyConfigEntry(ks,""String_Node_Str"",new File(file).toURI().toURL());
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  ks.init();
  ReasonerComponent reasoner=cm.reasoner(FastInstanceChecker.class,ks);
  reasoner.init();
  baseURI=reasoner.getBaseURI();
  List<Description> testDescriptions=new LinkedList<Description>();
  List<List<Individual>> posIndividuals=new LinkedList<List<Individual>>();
  List<List<Individual>> negIndividuals=new LinkedList<List<Individual>>();
  testDescriptions.add(KBParser.parseConcept(""String_Node_Str""));
  posIndividuals.add(getIndSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  negIndividuals.add(getIndSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  for (int i=0; i < testDescriptions.size(); i++) {
    Description description=testDescriptions.get(i);
    List<Individual> pos=posIndividuals.get(i);
    List<Individual> neg=negIndividuals.get(i);
    for (    Individual ind : pos) {
      System.out.println(""String_Node_Str"" + description.toString(baseURI,null) + ""String_Node_Str""+ ind.toString(baseURI,null));
      assertTrue(reasoner.hasType(description,ind));
    }
    for (    Individual ind : neg) {
      System.out.println(""String_Node_Str"" + description.toString(baseURI,null) + ""String_Node_Str""+ ind.toString(baseURI,null));
      assertTrue(!reasoner.hasType(description,ind));
    }
  }
}"
10002,"/** 
 * Performs an instance checks on all reasoner components to verify that they all return the correct result.
 */
public void instanceCheckTest(){
  try {
    ComponentManager cm=ComponentManager.getInstance();
    KB kb=getSimpleKnowledgeBase();
    KnowledgeSource ks=new KBFile(kb);
    ks.init();
    Description d;
    d=KBParser.parseConcept(""String_Node_Str"");
    Individual i=new Individual(KBParser.getInternalURI(""String_Node_Str""));
    List<Class<? extends ReasonerComponent>> reasonerClasses=cm.getReasonerComponents();
    for (    Class<? extends ReasonerComponent> reasonerClass : reasonerClasses) {
      ReasonerComponent reasoner=cm.reasoner(reasonerClass,ks);
      reasoner.init();
      boolean result=false;
      result=reasoner.hasType(d,i);
      logger.debug(""String_Node_Str"" + reasoner + ""String_Node_Str""+ d+ ""String_Node_Str""+ i+ ""String_Node_Str""+ result);
      assertTrue(result);
    }
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
catch (  ComponentInitException e) {
    e.printStackTrace();
  }
}","/** 
 * Performs an instance checks on all reasoner components to verify that they all return the correct result.
 */
@Test public void instanceCheckTest(){
  boolean excludeDIG=true;
  try {
    ComponentManager cm=ComponentManager.getInstance();
    KB kb=getSimpleKnowledgeBase();
    KnowledgeSource ks=new KBFile(kb);
    ks.init();
    Description d;
    d=KBParser.parseConcept(""String_Node_Str"");
    Individual i=new Individual(KBParser.getInternalURI(""String_Node_Str""));
    List<Class<? extends ReasonerComponent>> reasonerClasses=cm.getReasonerComponents();
    for (    Class<? extends ReasonerComponent> reasonerClass : reasonerClasses) {
      if (excludeDIG && reasonerClass.equals(DIGReasoner.class)) {
        continue;
      }
      ReasonerComponent reasoner=cm.reasoner(reasonerClass,ks);
      reasoner.init();
      boolean result=false;
      result=reasoner.hasType(d,i);
      logger.debug(""String_Node_Str"" + reasoner + ""String_Node_Str""+ d+ ""String_Node_Str""+ i+ ""String_Node_Str""+ result);
      assertTrue(result);
    }
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
catch (  ComponentInitException e) {
    e.printStackTrace();
  }
}"
10003,"public void fastInstanceCheck2() throws ComponentInitException, ParseException {
  String file=""String_Node_Str"";
  ComponentManager cm=ComponentManager.getInstance();
  KnowledgeSource ks=cm.knowledgeSource(OWLFile.class);
  try {
    cm.applyConfigEntry(ks,""String_Node_Str"",new File(file).toURI().toURL());
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  ks.init();
  ReasonerComponent reasoner=cm.reasoner(FastInstanceChecker.class,ks);
  reasoner.init();
  baseURI=reasoner.getBaseURI();
  Description description=KBParser.parseConcept(""String_Node_Str"");
  Individual ind=new Individual(""String_Node_Str"");
  boolean result=reasoner.hasType(description,ind);
  System.out.println(result);
}","@Test public void fastInstanceCheck2() throws ComponentInitException, ParseException {
  String file=""String_Node_Str"";
  ComponentManager cm=ComponentManager.getInstance();
  KnowledgeSource ks=cm.knowledgeSource(OWLFile.class);
  try {
    cm.applyConfigEntry(ks,""String_Node_Str"",new File(file).toURI().toURL());
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  ks.init();
  ReasonerComponent reasoner=cm.reasoner(FastInstanceChecker.class,ks);
  reasoner.init();
  baseURI=reasoner.getBaseURI();
  Description description=KBParser.parseConcept(""String_Node_Str"");
  Individual ind=new Individual(""String_Node_Str"");
  boolean result=reasoner.hasType(description,ind);
  System.out.println(result);
}"
10004,"private String uri(String name){
  return ""String_Node_Str"" + baseURI + name+ ""String_Node_Str"";
}","private String uri(String name){
  return baseURI + name;
}"
10005,"@Test public void rhoDRDownTest2() throws ParseException {
  ReasonerComponent reasoner=TestOntologies.getTestOntology(TestOntology.EPC_OE);
  baseURI=reasoner.getBaseURI();
  RhoDRDown op=new RhoDRDown(reasoner);
  Description concept=KBParser.parseConcept(""String_Node_Str"");
  Set<Description> results=op.refine(concept,6);
  for (  Description result : results) {
    System.out.println(result);
  }
  int desiredResultSize=141;
  if (results.size() != desiredResultSize) {
    System.out.println(results.size() + ""String_Node_Str"" + desiredResultSize+ ""String_Node_Str"");
  }
  assertTrue(results.size() == desiredResultSize);
}","@Test public void rhoDRDownTest2() throws ParseException {
  ReasonerComponent reasoner=TestOntologies.getTestOntology(TestOntology.EPC_OE);
  baseURI=reasoner.getBaseURI();
  RhoDRDown op=new RhoDRDown(reasoner);
  Description concept=KBParser.parseConcept(""String_Node_Str"");
  Set<Description> results=op.refine(concept,10);
  for (  Description result : results) {
    System.out.println(result.toString(""String_Node_Str"",null));
  }
  int desiredResultSize=116;
  if (results.size() != desiredResultSize) {
    System.out.println(results.size() + ""String_Node_Str"" + desiredResultSize+ ""String_Node_Str"");
  }
  assertTrue(results.size() == desiredResultSize);
}"
10006,"public static ReasonerComponent getTestOntology(TestOntology ont){
  String kbString=""String_Node_Str"";
  String owlFile=""String_Node_Str"";
  if (ont.equals(TestOntology.EMPTY)) {
  }
 else   if (ont.equals(TestOntology.SIMPLE)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.SIMPLE_NO_DR)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.SIMPLE_NO_DISJOINT)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.SIMPLE_NO_DR_DISJOINT)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.SIMPLE2)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.SIMPLE3)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.R1SUBR2)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.DATA1)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.FIVE_ROLES)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.FATHER_OE)) {
    owlFile=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.CARCINOGENESIS)) {
    owlFile=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.EPC_OE)) {
    owlFile=""String_Node_Str"";
  }
  try {
    ComponentManager cm=ComponentManager.getInstance();
    KnowledgeSource source;
    if (!kbString.isEmpty()) {
      KB kb=KBParser.parseKBFile(kbString);
      source=new KBFile(kb);
    }
 else {
      source=cm.knowledgeSource(OWLFile.class);
      try {
        cm.applyConfigEntry(source,""String_Node_Str"",new File(owlFile).toURI().toURL());
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
    }
    ReasonerComponent rc=cm.reasoner(FastInstanceChecker.class,source);
    source.init();
    rc.init();
    return rc;
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
catch (  ComponentInitException e) {
    e.printStackTrace();
  }
  throw new Error(""String_Node_Str"");
}","public static ReasonerComponent getTestOntology(TestOntology ont){
  String kbString=""String_Node_Str"";
  String owlFile=""String_Node_Str"";
  if (ont.equals(TestOntology.EMPTY)) {
  }
 else   if (ont.equals(TestOntology.SIMPLE)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.SIMPLE_NO_DR)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.SIMPLE_NO_DISJOINT)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.SIMPLE_NO_DR_DISJOINT)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.SIMPLE2)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.SIMPLE3)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.R1SUBR2)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.DATA1)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.FIVE_ROLES)) {
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
    kbString+=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.FATHER_OE)) {
    owlFile=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.CARCINOGENESIS)) {
    owlFile=""String_Node_Str"";
  }
 else   if (ont.equals(TestOntology.EPC_OE)) {
    owlFile=""String_Node_Str"";
  }
  try {
    ComponentManager cm=ComponentManager.getInstance();
    KnowledgeSource source;
    if (!kbString.isEmpty() || ont.equals(TestOntology.EMPTY)) {
      KB kb=KBParser.parseKBFile(kbString);
      source=new KBFile(kb);
    }
 else {
      source=cm.knowledgeSource(OWLFile.class);
      try {
        cm.applyConfigEntry(source,""String_Node_Str"",new File(owlFile).toURI().toURL());
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
    }
    ReasonerComponent rc=cm.reasoner(FastInstanceChecker.class,source);
    source.init();
    rc.init();
    return rc;
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
catch (  ComponentInitException e) {
    e.printStackTrace();
  }
  throw new Error(""String_Node_Str"");
}"
10007,"public static FlatABox createFlatABox(ReasonerComponent rs) throws ReasoningMethodUnsupportedException {
  long dematStartTime=System.currentTimeMillis();
  FlatABox aBox=new FlatABox();
  for (  NamedClass atomicConcept : rs.getNamedClasses()) {
    aBox.atomicConceptsPos.put(atomicConcept.getName(),getStringSet(rs.getIndividuals(atomicConcept)));
    Negation negatedAtomicConcept=new Negation(atomicConcept);
    aBox.atomicConceptsNeg.put(atomicConcept.getName(),getStringSet(rs.getIndividuals(negatedAtomicConcept)));
    aBox.concepts.add(atomicConcept.getName());
  }
  for (  ObjectProperty atomicRole : rs.getObjectProperties()) {
    aBox.rolesPos.put(atomicRole.getName(),getStringMap(rs.getPropertyMembers(atomicRole)));
    aBox.roles.add(atomicRole.getName());
  }
  aBox.domain=getStringSet(rs.getIndividuals());
  aBox.top=aBox.domain;
  long dematDuration=System.currentTimeMillis() - dematStartTime;
  System.out.println(""String_Node_Str"" + dematDuration + ""String_Node_Str"");
  return aBox;
}","public static FlatABox createFlatABox(ReasonerComponent rs) throws ReasoningMethodUnsupportedException {
  long dematStartTime=System.currentTimeMillis();
  FlatABox aBox=new FlatABox();
  if (!rs.getNamedClasses().isEmpty()) {
    for (    NamedClass atomicConcept : rs.getNamedClasses()) {
      aBox.atomicConceptsPos.put(atomicConcept.getName(),getStringSet(rs.getIndividuals(atomicConcept)));
      Negation negatedAtomicConcept=new Negation(atomicConcept);
      aBox.atomicConceptsNeg.put(atomicConcept.getName(),getStringSet(rs.getIndividuals(negatedAtomicConcept)));
      aBox.concepts.add(atomicConcept.getName());
    }
  }
  if (!rs.getObjectProperties().isEmpty()) {
    for (    ObjectProperty atomicRole : rs.getObjectProperties()) {
      aBox.rolesPos.put(atomicRole.getName(),getStringMap(rs.getPropertyMembers(atomicRole)));
      aBox.roles.add(atomicRole.getName());
    }
  }
  aBox.domain=getStringSet(rs.getIndividuals());
  aBox.top=aBox.domain;
  long dematDuration=System.currentTimeMillis() - dematStartTime;
  System.out.println(""String_Node_Str"" + dematDuration + ""String_Node_Str"");
  return aBox;
}"
10008,"@Override public Description getDomainImpl(DatatypeProperty datatypeProperty){
  OWLDataProperty prop=OWLAPIConverter.getOWLAPIDataProperty(datatypeProperty);
  try {
    Set<Set<OWLDescription>> set=reasoner.getDomains(prop);
    if (set.size() == 0)     return new Thing();
    OWLClass oc=(OWLClass)set.iterator().next().iterator().next();
    return new NamedClass(oc.getURI().toString());
  }
 catch (  OWLReasonerException e) {
    throw new Error(e);
  }
}","@Override public Description getDomainImpl(DatatypeProperty datatypeProperty){
  OWLDataProperty prop=OWLAPIConverter.getOWLAPIDataProperty(datatypeProperty);
  try {
    Set<Set<OWLDescription>> set=reasoner.getDomains(prop);
    if (set.size() == 0)     return new Thing();
    OWLClass oc=(OWLClass)set.iterator().next().iterator().next();
    String str=oc.getURI().toString();
    if (str.equals(""String_Node_Str"")) {
      return new Thing();
    }
 else {
      return new NamedClass(str);
    }
  }
 catch (  OWLReasonerException e) {
    throw new Error(e);
  }
}"
10009,"@SuppressWarnings({""String_Node_Str""}) public Set<Description> refine(Description description,int maxLength,List<Description> knownRefinements,Description currDomain){
  if (!(currDomain instanceof Thing) && !topARefinementsLength.containsKey(currDomain))   topARefinementsLength.put((NamedClass)currDomain,0);
  Set<Description> refinements=new TreeSet<Description>(conceptComparator);
  Set<Description> tmp=new HashSet<Description>();
  if (description instanceof Thing) {
    if (currDomain instanceof Thing) {
      if (maxLength > topRefinementsLength)       computeTopRefinements(maxLength);
      refinements=(TreeSet<Description>)topRefinementsCumulative.get(maxLength).clone();
    }
 else {
      if (maxLength > topARefinementsLength.get(currDomain))       computeTopRefinements(maxLength,(NamedClass)currDomain);
      refinements=(TreeSet<Description>)topARefinementsCumulative.get(currDomain).get(maxLength).clone();
    }
  }
 else   if (description instanceof Nothing) {
  }
 else   if (description instanceof NamedClass) {
    refinements.addAll(subHierarchy.getSubClasses(description));
    refinements.remove(new Nothing());
  }
 else   if (description instanceof Negation && description.getChild(0) instanceof NamedClass) {
    tmp=subHierarchy.getSuperClasses(description.getChild(0));
    for (    Description c : tmp) {
      if (!(c instanceof Thing))       refinements.add(new Negation(c));
    }
  }
 else   if (description instanceof Intersection) {
    for (    Description child : description.getChildren()) {
      tmp=refine(child,maxLength - description.getLength() + child.getLength(),null,currDomain);
      for (      Description c : tmp) {
        List<Description> newChildren=(List<Description>)((LinkedList)description.getChildren()).clone();
        newChildren.add(c);
        newChildren.remove(child);
        Intersection mc=new Intersection(newChildren);
        ConceptTransformation.cleanConceptNonRecursive(mc);
        ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(mc,conceptComparator);
        if (checkIntersection(mc))         refinements.add(mc);
      }
    }
  }
 else   if (description instanceof Union) {
    for (    Description child : description.getChildren()) {
      tmp=refine(child,maxLength - description.getLength() + child.getLength(),null,currDomain);
      for (      Description c : tmp) {
        List<Description> newChildren=new LinkedList<Description>(description.getChildren());
        newChildren.remove(child);
        newChildren.add(c);
        Union md=new Union(newChildren);
        ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(md,conceptComparator);
        refinements.add(md);
      }
    }
  }
 else   if (description instanceof ObjectSomeRestriction) {
    ObjectPropertyExpression role=((ObjectQuantorRestriction)description).getRole();
    Description range=opRanges.get(role);
    tmp=refine(description.getChild(0),maxLength - 2,null,range);
    for (    Description c : tmp)     refinements.add(new ObjectSomeRestriction(((ObjectQuantorRestriction)description).getRole(),c));
    ObjectProperty ar=(ObjectProperty)role;
    Set<ObjectProperty> moreSpecialRoles=rs.getSubProperties(ar);
    for (    ObjectProperty moreSpecialRole : moreSpecialRoles)     refinements.add(new ObjectSomeRestriction(moreSpecialRole,description.getChild(0)));
    if (useCardinalityRestrictions) {
      if (maxLength > description.getLength() && maxNrOfFillers.get(ar) > 1) {
        ObjectMinCardinalityRestriction min=new ObjectMinCardinalityRestriction(2,role,description.getChild(0));
        refinements.add(min);
      }
    }
    if (useHasValueConstructor && description.getChild(0) instanceof Thing) {
      Set<Individual> frequentInds=frequentValues.get(role);
      if (frequentInds != null) {
        for (        Individual ind : frequentInds) {
          ObjectValueRestriction ovr=new ObjectValueRestriction((ObjectProperty)role,ind);
          refinements.add(ovr);
        }
      }
    }
  }
 else   if (description instanceof ObjectAllRestriction) {
    ObjectPropertyExpression role=((ObjectQuantorRestriction)description).getRole();
    Description range=opRanges.get(role);
    tmp=refine(description.getChild(0),maxLength - 2,null,range);
    for (    Description c : tmp) {
      refinements.add(new ObjectAllRestriction(((ObjectQuantorRestriction)description).getRole(),c));
    }
    if (description.getChild(0) instanceof NamedClass && tmp.size() == 0) {
      refinements.add(new ObjectAllRestriction(((ObjectQuantorRestriction)description).getRole(),new Nothing()));
    }
    ObjectProperty ar=(ObjectProperty)role;
    Set<ObjectProperty> moreSpecialRoles=rs.getSubProperties(ar);
    for (    ObjectProperty moreSpecialRole : moreSpecialRoles) {
      refinements.add(new ObjectAllRestriction(moreSpecialRole,description.getChild(0)));
    }
  }
 else   if (description instanceof ObjectCardinalityRestriction) {
    ObjectPropertyExpression role=((ObjectCardinalityRestriction)description).getRole();
    Description range=opRanges.get(role);
    int number=((ObjectCardinalityRestriction)description).getCardinality();
    if (description instanceof ObjectMaxCardinalityRestriction) {
      tmp=refine(description.getChild(0),maxLength - 3,null,range);
      for (      Description d : tmp) {
        refinements.add(new ObjectMaxCardinalityRestriction(number,role,d));
      }
      ObjectMaxCardinalityRestriction max=(ObjectMaxCardinalityRestriction)description;
      if (number > 1)       refinements.add(new ObjectMaxCardinalityRestriction(number - 1,max.getRole(),max.getChild(0)));
    }
 else     if (description instanceof ObjectMinCardinalityRestriction) {
      tmp=refine(description.getChild(0),maxLength - 3,null,range);
      for (      Description d : tmp) {
        refinements.add(new ObjectMinCardinalityRestriction(number,role,d));
      }
      ObjectMinCardinalityRestriction min=(ObjectMinCardinalityRestriction)description;
      if (number < maxNrOfFillers.get(min.getRole()))       refinements.add(new ObjectMinCardinalityRestriction(number + 1,min.getRole(),min.getChild(0)));
    }
  }
 else   if (description instanceof DatatypeSomeRestriction) {
    DatatypeSomeRestriction dsr=(DatatypeSomeRestriction)description;
    DatatypeProperty dp=(DatatypeProperty)dsr.getRestrictedPropertyExpression();
    DataRange dr=dsr.getDataRange();
    if (dr instanceof DoubleMaxValue) {
      double value=((DoubleMaxValue)dr).getValue();
      int splitIndex=splits.get(dp).lastIndexOf(value);
      if (splitIndex == -1)       throw new Error(""String_Node_Str"");
      int newSplitIndex=splitIndex - 1;
      if (newSplitIndex >= 0) {
        DoubleMaxValue max=new DoubleMaxValue(splits.get(dp).get(newSplitIndex));
        DatatypeSomeRestriction newDSR=new DatatypeSomeRestriction(dp,max);
        refinements.add(newDSR);
      }
    }
 else     if (dr instanceof DoubleMinValue) {
      double value=((DoubleMinValue)dr).getValue();
      int splitIndex=splits.get(dp).lastIndexOf(value);
      if (splitIndex == -1)       throw new Error(""String_Node_Str"");
      int newSplitIndex=splitIndex + 1;
      if (newSplitIndex < splits.get(dp).size()) {
        DoubleMinValue min=new DoubleMinValue(splits.get(dp).get(newSplitIndex));
        DatatypeSomeRestriction newDSR=new DatatypeSomeRestriction(dp,min);
        refinements.add(newDSR);
      }
    }
  }
  if (!(description instanceof Thing) && !(description instanceof Nothing) && !(description instanceof ObjectAllRestriction && description.getChild(0) instanceof Nothing)) {
    int topRefLength=maxLength - description.getLength() - 1;
    if (currDomain instanceof Thing) {
      if (topRefLength > topRefinementsLength)       computeTopRefinements(topRefLength);
    }
 else     if (topRefLength > topARefinementsLength.get(currDomain))     computeTopRefinements(topRefLength,(NamedClass)currDomain);
    if (topRefLength > 0) {
      Set<Description> topRefs;
      if (currDomain instanceof Thing)       topRefs=topRefinementsCumulative.get(topRefLength);
 else       topRefs=topARefinementsCumulative.get(currDomain).get(topRefLength);
      for (      Description c : topRefs) {
        boolean skip=false;
        if (applyAllFilter) {
          if (c instanceof ObjectAllRestriction) {
            for (            Description child : description.getChildren()) {
              if (child instanceof ObjectAllRestriction) {
                ObjectPropertyExpression r1=((ObjectAllRestriction)c).getRole();
                ObjectPropertyExpression r2=((ObjectAllRestriction)child).getRole();
                if (r1.toString().equals(r2.toString()))                 skip=true;
              }
            }
          }
        }
        if (disjointChecks && c instanceof NamedClass && description instanceof NamedClass&& isDisjoint(description,c)) {
          skip=true;
        }
        if (!skip) {
          Intersection mc=new Intersection();
          mc.addChild(description);
          mc.addChild(c);
          ConceptTransformation.cleanConceptNonRecursive(mc);
          ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(mc,conceptComparator);
          if (checkIntersection(mc))           refinements.add(mc);
        }
      }
    }
  }
  return refinements;
}","@SuppressWarnings({""String_Node_Str""}) public Set<Description> refine(Description description,int maxLength,List<Description> knownRefinements,Description currDomain){
  if (!(currDomain instanceof Thing) && !topARefinementsLength.containsKey(currDomain))   topARefinementsLength.put((NamedClass)currDomain,0);
  Set<Description> refinements=new TreeSet<Description>(conceptComparator);
  Set<Description> tmp=new HashSet<Description>();
  if (description instanceof Thing) {
    if (currDomain instanceof Thing) {
      if (maxLength > topRefinementsLength)       computeTopRefinements(maxLength);
      refinements=(TreeSet<Description>)topRefinementsCumulative.get(maxLength).clone();
    }
 else {
      if (maxLength > topARefinementsLength.get(currDomain)) {
        computeTopRefinements(maxLength,(NamedClass)currDomain);
      }
      refinements=(TreeSet<Description>)topARefinementsCumulative.get(currDomain).get(maxLength).clone();
    }
  }
 else   if (description instanceof Nothing) {
  }
 else   if (description instanceof NamedClass) {
    refinements.addAll(subHierarchy.getSubClasses(description));
    refinements.remove(new Nothing());
  }
 else   if (description instanceof Negation && description.getChild(0) instanceof NamedClass) {
    tmp=subHierarchy.getSuperClasses(description.getChild(0));
    for (    Description c : tmp) {
      if (!(c instanceof Thing))       refinements.add(new Negation(c));
    }
  }
 else   if (description instanceof Intersection) {
    for (    Description child : description.getChildren()) {
      tmp=refine(child,maxLength - description.getLength() + child.getLength(),null,currDomain);
      for (      Description c : tmp) {
        List<Description> newChildren=(List<Description>)((LinkedList)description.getChildren()).clone();
        newChildren.add(c);
        newChildren.remove(child);
        Intersection mc=new Intersection(newChildren);
        ConceptTransformation.cleanConceptNonRecursive(mc);
        ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(mc,conceptComparator);
        if (checkIntersection(mc))         refinements.add(mc);
      }
    }
  }
 else   if (description instanceof Union) {
    for (    Description child : description.getChildren()) {
      tmp=refine(child,maxLength - description.getLength() + child.getLength(),null,currDomain);
      for (      Description c : tmp) {
        List<Description> newChildren=new LinkedList<Description>(description.getChildren());
        newChildren.remove(child);
        newChildren.add(c);
        Union md=new Union(newChildren);
        ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(md,conceptComparator);
        refinements.add(md);
      }
    }
  }
 else   if (description instanceof ObjectSomeRestriction) {
    ObjectPropertyExpression role=((ObjectQuantorRestriction)description).getRole();
    Description range=opRanges.get(role);
    tmp=refine(description.getChild(0),maxLength - 2,null,range);
    for (    Description c : tmp)     refinements.add(new ObjectSomeRestriction(((ObjectQuantorRestriction)description).getRole(),c));
    ObjectProperty ar=(ObjectProperty)role;
    Set<ObjectProperty> moreSpecialRoles=rs.getSubProperties(ar);
    for (    ObjectProperty moreSpecialRole : moreSpecialRoles)     refinements.add(new ObjectSomeRestriction(moreSpecialRole,description.getChild(0)));
    if (useCardinalityRestrictions) {
      if (maxLength > description.getLength() && maxNrOfFillers.get(ar) > 1) {
        ObjectMinCardinalityRestriction min=new ObjectMinCardinalityRestriction(2,role,description.getChild(0));
        refinements.add(min);
      }
    }
    if (useHasValueConstructor && description.getChild(0) instanceof Thing) {
      Set<Individual> frequentInds=frequentValues.get(role);
      if (frequentInds != null) {
        for (        Individual ind : frequentInds) {
          ObjectValueRestriction ovr=new ObjectValueRestriction((ObjectProperty)role,ind);
          refinements.add(ovr);
        }
      }
    }
  }
 else   if (description instanceof ObjectAllRestriction) {
    ObjectPropertyExpression role=((ObjectQuantorRestriction)description).getRole();
    Description range=opRanges.get(role);
    tmp=refine(description.getChild(0),maxLength - 2,null,range);
    for (    Description c : tmp) {
      refinements.add(new ObjectAllRestriction(((ObjectQuantorRestriction)description).getRole(),c));
    }
    if (description.getChild(0) instanceof NamedClass && tmp.size() == 0) {
      refinements.add(new ObjectAllRestriction(((ObjectQuantorRestriction)description).getRole(),new Nothing()));
    }
    ObjectProperty ar=(ObjectProperty)role;
    Set<ObjectProperty> moreSpecialRoles=rs.getSubProperties(ar);
    for (    ObjectProperty moreSpecialRole : moreSpecialRoles) {
      refinements.add(new ObjectAllRestriction(moreSpecialRole,description.getChild(0)));
    }
  }
 else   if (description instanceof ObjectCardinalityRestriction) {
    ObjectPropertyExpression role=((ObjectCardinalityRestriction)description).getRole();
    Description range=opRanges.get(role);
    int number=((ObjectCardinalityRestriction)description).getCardinality();
    if (description instanceof ObjectMaxCardinalityRestriction) {
      tmp=refine(description.getChild(0),maxLength - 3,null,range);
      for (      Description d : tmp) {
        refinements.add(new ObjectMaxCardinalityRestriction(number,role,d));
      }
      ObjectMaxCardinalityRestriction max=(ObjectMaxCardinalityRestriction)description;
      if (number > 1)       refinements.add(new ObjectMaxCardinalityRestriction(number - 1,max.getRole(),max.getChild(0)));
    }
 else     if (description instanceof ObjectMinCardinalityRestriction) {
      tmp=refine(description.getChild(0),maxLength - 3,null,range);
      for (      Description d : tmp) {
        refinements.add(new ObjectMinCardinalityRestriction(number,role,d));
      }
      ObjectMinCardinalityRestriction min=(ObjectMinCardinalityRestriction)description;
      if (number < maxNrOfFillers.get(min.getRole()))       refinements.add(new ObjectMinCardinalityRestriction(number + 1,min.getRole(),min.getChild(0)));
    }
  }
 else   if (description instanceof DatatypeSomeRestriction) {
    DatatypeSomeRestriction dsr=(DatatypeSomeRestriction)description;
    DatatypeProperty dp=(DatatypeProperty)dsr.getRestrictedPropertyExpression();
    DataRange dr=dsr.getDataRange();
    if (dr instanceof DoubleMaxValue) {
      double value=((DoubleMaxValue)dr).getValue();
      int splitIndex=splits.get(dp).lastIndexOf(value);
      if (splitIndex == -1)       throw new Error(""String_Node_Str"");
      int newSplitIndex=splitIndex - 1;
      if (newSplitIndex >= 0) {
        DoubleMaxValue max=new DoubleMaxValue(splits.get(dp).get(newSplitIndex));
        DatatypeSomeRestriction newDSR=new DatatypeSomeRestriction(dp,max);
        refinements.add(newDSR);
      }
    }
 else     if (dr instanceof DoubleMinValue) {
      double value=((DoubleMinValue)dr).getValue();
      int splitIndex=splits.get(dp).lastIndexOf(value);
      if (splitIndex == -1)       throw new Error(""String_Node_Str"");
      int newSplitIndex=splitIndex + 1;
      if (newSplitIndex < splits.get(dp).size()) {
        DoubleMinValue min=new DoubleMinValue(splits.get(dp).get(newSplitIndex));
        DatatypeSomeRestriction newDSR=new DatatypeSomeRestriction(dp,min);
        refinements.add(newDSR);
      }
    }
  }
  if (!(description instanceof Thing) && !(description instanceof Nothing) && !(description instanceof ObjectAllRestriction && description.getChild(0) instanceof Nothing)) {
    int topRefLength=maxLength - description.getLength() - 1;
    if (currDomain instanceof Thing) {
      if (topRefLength > topRefinementsLength)       computeTopRefinements(topRefLength);
    }
 else     if (topRefLength > topARefinementsLength.get(currDomain))     computeTopRefinements(topRefLength,(NamedClass)currDomain);
    if (topRefLength > 0) {
      Set<Description> topRefs;
      if (currDomain instanceof Thing)       topRefs=topRefinementsCumulative.get(topRefLength);
 else       topRefs=topARefinementsCumulative.get(currDomain).get(topRefLength);
      for (      Description c : topRefs) {
        boolean skip=false;
        if (applyAllFilter) {
          if (c instanceof ObjectAllRestriction) {
            for (            Description child : description.getChildren()) {
              if (child instanceof ObjectAllRestriction) {
                ObjectPropertyExpression r1=((ObjectAllRestriction)c).getRole();
                ObjectPropertyExpression r2=((ObjectAllRestriction)child).getRole();
                if (r1.toString().equals(r2.toString()))                 skip=true;
              }
            }
          }
        }
        if (disjointChecks && c instanceof NamedClass && description instanceof NamedClass&& isDisjoint(description,c)) {
          skip=true;
        }
        if (!skip) {
          Intersection mc=new Intersection();
          mc.addChild(description);
          mc.addChild(c);
          ConceptTransformation.cleanConceptNonRecursive(mc);
          ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(mc,conceptComparator);
          if (checkIntersection(mc))           refinements.add(mc);
        }
      }
    }
  }
  return refinements;
}"
10010,"public ActionHandler(ActionHandler a,DLLearnerModel m,DLLearnerView view,String i){
  this.view=view;
  this.id=i;
  this.model=m;
  toggled=false;
}","/** 
 * This is the constructor for the action handler.
 * @param a ActionHandler
 * @param m DLLearnerModel
 * @param view DLlearner tab
 * @param i id if it is a subclass or an equivalent class
 */
public ActionHandler(ActionHandler a,DLLearnerModel m,DLLearnerView view,String i){
  this.view=view;
  this.id=i;
  this.model=m;
  toggled=false;
}"
10011,"public DLLearnerModel(OWLEditorKit editorKit,String id,DLLearnerView view){
  editor=editorKit;
  this.id=id;
  this.view=view;
  ontologyConsistent=true;
  instancesCount=0;
  owlDescription=new HashSet<OWLDescription>();
  posListModel=new DefaultListModel();
  negListModel=new DefaultListModel();
  ComponentManager.setComponentClasses(componenten);
  individualVector=new Vector<IndividualObject>();
  cm=ComponentManager.getInstance();
  ds=new HashSet<OWLDescription>();
  suggestModel=new DefaultListModel();
  ontologieURI=new HashSet<String>();
  sources=new HashSet<KnowledgeSource>();
}","/** 
 * This is the constructor for DL-Learner model.
 * @param editorKit Editor Kit to get the currently loaded Ontology
 * @param id String if it learns a subclass or a superclass.
 * @param view current view of the DL-Learner tab
 */
public DLLearnerModel(OWLEditorKit editorKit,String id,DLLearnerView view){
  editor=editorKit;
  this.id=id;
  this.view=view;
  ontologyConsistent=true;
  instancesCount=0;
  owlDescription=new HashSet<OWLDescription>();
  posListModel=new DefaultListModel();
  negListModel=new DefaultListModel();
  ComponentManager.setComponentClasses(componenten);
  individualVector=new Vector<IndividualObject>();
  cm=ComponentManager.getInstance();
  ds=new HashSet<OWLDescription>();
  suggestModel=new DefaultListModel();
  ontologieURI=new HashSet<String>();
  sources=new HashSet<KnowledgeSource>();
}"
10012,"/** 
 * This Method renders the view of the plugin.
 */
public void makeView(){
  run.setEnabled(false);
  model.clearVector();
  hint.setText(""String_Node_Str"");
  isInconsistent=false;
  readThread=new ReadingOntologyThread(editorKit,null,this,model);
  readThread.start();
  hint.setVisible(true);
  advanced.setIcon(icon);
  accept.setEnabled(false);
  action.resetToggled();
  addButtonPanel.add(""String_Node_Str"",accept);
  sugPanel.setSuggestList(model.getSuggestList());
  sugPanel=sugPanel.updateSuggestClassList();
  advanced.setSelected(false);
  sugPanel.setBounds(10,35,490,110);
  adv.setBounds(40,200,200,20);
  wikiPane.setBounds(220,0,350,30);
  addButtonPanel.setBounds(510,40,80,110);
  run.setBounds(10,0,200,30);
  advanced.setBounds(10,200,20,20);
  sugPanel.setVisible(true);
  posPanel.setVisible(false);
  posPanel.setBounds(10,230,490,250);
  accept.setBounds(510,40,80,110);
  hint.setBounds(10,150,490,35);
  errorMessage.setBounds(10,180,490,20);
  learner.add(run);
  learner.add(wikiPane);
  learner.add(adv);
  learner.add(advanced);
  learner.add(sugPanel);
  learner.add(addButtonPanel);
  learner.add(hint);
  learner.add(errorMessage);
  learner.add(posPanel);
  detail=new MoreDetailForSuggestedConceptsPanel(model);
  add(learner);
}","/** 
 * This Method renders the view of the plugin.
 */
public void makeView(){
  run.setEnabled(false);
  model.clearVector();
  hint.setText(""String_Node_Str"");
  isInconsistent=false;
  readThread=new ReadingOntologyThread(editorKit,null,this,model);
  readThread.start();
  hint.setVisible(true);
  advanced.setIcon(icon);
  accept.setEnabled(false);
  action.resetToggled();
  addButtonPanel.add(""String_Node_Str"",accept);
  sugPanel.setSuggestList(model.getSuggestList());
  sugPanel=sugPanel.updateSuggestClassList();
  advanced.setSelected(false);
  sugPanel.setBounds(10,35,490,110);
  adv.setBounds(40,200,200,20);
  wikiPane.setBounds(220,0,350,30);
  addButtonPanel.setBounds(510,40,80,110);
  run.setBounds(10,0,200,30);
  advanced.setBounds(10,200,20,20);
  sugPanel.setVisible(true);
  posPanel.setVisible(false);
  posPanel.setBounds(10,230,490,250);
  accept.setBounds(510,40,80,110);
  hint.setBounds(10,150,490,35);
  errorMessage.setBounds(10,180,490,20);
  learner.add(run);
  learner.add(wikiPane);
  learner.add(adv);
  learner.add(advanced);
  learner.add(sugPanel);
  learner.add(addButtonPanel);
  learner.add(hint);
  learner.add(errorMessage);
  learner.add(posPanel);
  detail=new MoreDetailForSuggestedConceptsPanel(model);
}"
10013,"private void computeIndividualPoints(){
  Set<Individual> posInd=((EvaluatedDescriptionClass)eval).getCoveredInstances();
  int i=0;
  double x=20;
  double y=20;
  boolean flag=true;
  for (  Individual ind : posInd) {
    flag=true;
    if (i < MAX_NUMBER_OF_INDIVIDUAL_POINTS) {
      while (flag) {
        if (x >= oldConcept.getMaxX()) {
          x=(int)oldConcept.getMinX();
          y=y + GAP;
        }
        if (y >= oldConcept.getMaxY()) {
          y=(int)oldConcept.getMinY();
        }
        if (x >= newConcept.getMaxX()) {
          x=(int)newConcept.getMinX();
          y=y + GAP;
        }
        if (y >= newConcept.getMaxY()) {
          y=(int)newConcept.getMinY();
        }
        while (x < newConcept.getMaxX()) {
          if (newConcept.contains(x,y) && oldConcept.contains(x,y)) {
            posCovIndVector.add(new IndividualPoint(""String_Node_Str"",(int)x,(int)y,ind.toString()));
            i++;
            flag=false;
            x=x + GAP;
            break;
          }
 else {
            x=x + GAP;
          }
        }
      }
    }
  }
  Set<Individual> posNotCovInd=((EvaluatedDescriptionClass)eval).getAdditionalInstances();
  int j=0;
  x=20;
  y=20;
  for (  Individual ind : posNotCovInd) {
    flag=true;
    if (j < MAX_NUMBER_OF_INDIVIDUAL_POINTS) {
      while (flag) {
        if (x >= newConcept.getMaxX()) {
          x=(int)oldConcept.getMinX();
          y=y + GAP;
        }
        if (y >= newConcept.getMaxY()) {
          y=(int)oldConcept.getMinY();
        }
        while (x < newConcept.getMaxX()) {
          if (!oldConcept.contains(x,y) && newConcept.contains(x,y)) {
            posNotCovIndVector.add(new IndividualPoint(""String_Node_Str"",(int)x,(int)y,ind.toString()));
            j++;
            flag=false;
            x=x + GAP;
            break;
          }
 else {
            x=x + GAP;
          }
        }
      }
    }
  }
  Set<Individual> notCovInd=model.getReasoner().getIndividuals(model.getCurrentConcept());
  notCovInd.removeAll(posInd);
  int k=0;
  x=20;
  y=20;
  for (  Individual ind : notCovInd) {
    flag=true;
    if (k < MAX_NUMBER_OF_INDIVIDUAL_POINTS) {
      while (flag) {
        if (x >= oldConcept.getMaxX()) {
          x=(int)oldConcept.getMinX();
          y=y + GAP;
        }
        if (y >= oldConcept.getMaxY()) {
          y=(int)oldConcept.getMinY();
        }
        while (x < oldConcept.getMaxX()) {
          if (oldConcept.contains(x,y) && !newConcept.contains(x,y)) {
            posNotCovIndVector.add(new IndividualPoint(""String_Node_Str"",(int)x,(int)y,ind.toString()));
            k++;
            flag=false;
            x=x + GAP;
            break;
          }
 else {
            x=x + GAP;
          }
        }
      }
    }
  }
  points.addAll(posCovIndVector);
  points.addAll(posNotCovIndVector);
}","private void computeIndividualPoints(){
  Set<Individual> posInd=((EvaluatedDescriptionClass)eval).getCoveredInstances();
  int i=0;
  double x=20;
  double y=20;
  boolean flag=true;
  for (  Individual ind : posInd) {
    flag=true;
    if (i < MAX_NUMBER_OF_INDIVIDUAL_POINTS) {
      while (flag) {
        if (x >= oldConcept.getMaxX()) {
          x=(int)oldConcept.getMinX();
          y=y + GAP;
        }
        if (y >= oldConcept.getMaxY()) {
          y=(int)oldConcept.getMinY();
        }
        if (x >= newConcept.getMaxX()) {
          x=(int)newConcept.getMinX();
          y=y + GAP;
        }
        if (y >= newConcept.getMaxY()) {
          y=(int)newConcept.getMinY();
          break;
        }
        while (x < newConcept.getMaxX()) {
          if (newConcept.contains(x,y) && oldConcept.contains(x,y)) {
            posCovIndVector.add(new IndividualPoint(""String_Node_Str"",(int)x,(int)y,ind.toString()));
            i++;
            flag=false;
            x=x + GAP;
            break;
          }
 else {
            x=x + GAP;
          }
        }
      }
    }
  }
  Set<Individual> posNotCovInd=((EvaluatedDescriptionClass)eval).getAdditionalInstances();
  int j=0;
  x=20;
  y=20;
  for (  Individual ind : posNotCovInd) {
    flag=true;
    if (j < MAX_NUMBER_OF_INDIVIDUAL_POINTS) {
      while (flag) {
        if (x >= newConcept.getMaxX()) {
          x=(int)oldConcept.getMinX();
          y=y + GAP;
        }
        if (y >= newConcept.getMaxY()) {
          y=(int)oldConcept.getMinY();
          break;
        }
        while (x < newConcept.getMaxX()) {
          if (!oldConcept.contains(x,y) && newConcept.contains(x,y)) {
            posNotCovIndVector.add(new IndividualPoint(""String_Node_Str"",(int)x,(int)y,ind.toString()));
            j++;
            flag=false;
            x=x + GAP;
            break;
          }
 else {
            x=x + GAP;
          }
        }
      }
    }
  }
  Set<Individual> notCovInd=model.getReasoner().getIndividuals(model.getCurrentConcept());
  notCovInd.removeAll(posInd);
  int k=0;
  x=20;
  y=20;
  for (  Individual ind : notCovInd) {
    flag=true;
    if (k < MAX_NUMBER_OF_INDIVIDUAL_POINTS) {
      while (flag) {
        if (x >= oldConcept.getMaxX()) {
          x=(int)oldConcept.getMinX();
          y=y + GAP;
        }
        if (y >= oldConcept.getMaxY()) {
          y=(int)oldConcept.getMinY();
          break;
        }
        while (x < oldConcept.getMaxX()) {
          if (oldConcept.contains(x,y) && !newConcept.contains(x,y)) {
            posNotCovIndVector.add(new IndividualPoint(""String_Node_Str"",(int)x,(int)y,ind.toString()));
            k++;
            flag=false;
            x=x + GAP;
            break;
          }
 else {
            x=x + GAP;
          }
        }
      }
    }
  }
  points.addAll(posCovIndVector);
  points.addAll(posNotCovIndVector);
}"
10014,"/** 
 * This is the constructor for the action handler.
 * @param a ActionHandler
 * @param m DLLearnerModel
 * @param view DLlearner tab
 * @param i id if it is a subclass or an equivalent class
 */
public ActionHandler(ActionHandler a,DLLearnerModel m,DLLearnerView view,String i){
  this.view=view;
  this.id=i;
  this.model=m;
  toggled=false;
}","/** 
 * This is the constructor for the action handler.
 * @param a ActionHandler
 * @param m DLLearnerModel
 * @param view DLlearner tab
 * @param i id if it is a subclass or an equivalent class
 */
public ActionHandler(DLLearnerModel m,DLLearnerView view,String i){
  this.view=view;
  this.id=i;
  this.model=m;
  toggled=false;
}"
10015,"/** 
 * This is the constructor for DL-Learner model.
 * @param editorKit Editor Kit to get the currently loaded Ontology
 * @param id String if it learns a subclass or a superclass.
 * @param view current view of the DL-Learner tab
 */
public DLLearnerModel(OWLEditorKit editorKit,String id,DLLearnerView view){
  editor=editorKit;
  this.id=id;
  this.view=view;
  ontologyConsistent=true;
  instancesCount=0;
  owlDescription=new HashSet<OWLDescription>();
  ComponentManager.setComponentClasses(componenten);
  cm=ComponentManager.getInstance();
  ds=new HashSet<OWLDescription>();
  suggestModel=new DefaultListModel();
  ontologieURI=new HashSet<String>();
  sources=new HashSet<KnowledgeSource>();
}","/** 
 * This is the constructor for DL-Learner model.
 * @param editorKit Editor Kit to get the currently loaded Ontology
 * @param id String if it learns a subclass or a superclass.
 * @param view current view of the DL-Learner tab
 */
public DLLearnerModel(OWLEditorKit editorKit,DLLearnerView view){
  editor=editorKit;
  this.view=view;
  ontologyConsistent=true;
  instancesCount=0;
  owlDescription=new HashSet<OWLDescription>();
  ComponentManager.setComponentClasses(componenten);
  cm=ComponentManager.getInstance();
  ds=new HashSet<OWLDescription>();
  suggestModel=new DefaultListModel();
  ontologieURI=new HashSet<String>();
  sources=new HashSet<KnowledgeSource>();
}"
10016,"/** 
 * This method sets the Learning problem for the learning process. PosNegDefinitonLp for equivalent classes and PosNegInclusionLP for super classes.
 */
public void setLearningProblem(){
  lp=cm.learningProblem(ClassLearningProblem.class,reasoner);
  cm.applyConfigEntry(lp,""String_Node_Str"",currentConcept.toString());
  if (id.equals(EQUIVALENT_CLASS_AXIOM_STRING)) {
    cm.applyConfigEntry(lp,""String_Node_Str"",EQUIVALENT_CLASS_LEARNING);
  }
  if (id.equals(SUPER_CLASS_AXIOM_STRING)) {
    cm.applyConfigEntry(lp,""String_Node_Str"",SUPER_CLASS_LEARNING);
  }
  try {
    lp.init();
  }
 catch (  ComponentInitException e) {
    e.printStackTrace();
  }
}","/** 
 * This method sets the Learning problem for the learning process. PosNegDefinitonLp for equivalent classes and PosNegInclusionLP for super classes.
 */
public void setLearningProblem(){
  lp=cm.learningProblem(ClassLearningProblem.class,reasoner);
  cm.applyConfigEntry(lp,""String_Node_Str"",currentConcept.toString());
  System.out.println(""String_Node_Str"" + currentConcept);
  if (id.equals(EQUIVALENT_CLASS_AXIOM_STRING)) {
    cm.applyConfigEntry(lp,""String_Node_Str"",EQUIVALENT_CLASS_LEARNING);
  }
  if (id.equals(SUPER_CLASS_AXIOM_STRING)) {
    cm.applyConfigEntry(lp,""String_Node_Str"",SUPER_CLASS_LEARNING);
  }
  try {
    lp.init();
  }
 catch (  ComponentInitException e) {
    e.printStackTrace();
  }
}"
10017,"/** 
 * This Method renders the view of the plugin.
 */
public void makeView(){
  model=new DLLearnerModel(editorKit,label,this);
  sugPanel=new SuggestClassPanel();
  action=new ActionHandler(this.action,model,this,label);
  wikiPane=new JLabel(""String_Node_Str"");
  URL iconUrl=this.getClass().getResource(""String_Node_Str"");
  icon=new ImageIcon(iconUrl);
  URL toggledIconUrl=this.getClass().getResource(""String_Node_Str"");
  toggledIcon=new ImageIcon(toggledIconUrl);
  adv=new JLabel(""String_Node_Str"");
  advanced=new JToggleButton(icon);
  advanced.setVisible(true);
  run=new JButton(label);
  accept=new JButton(""String_Node_Str"");
  addButtonPanel=new JPanel(new BorderLayout());
  sugPanel.addSuggestPanelMouseListener(action);
  errorMessage=new JTextArea();
  errorMessage.setEditable(false);
  hint=new JTextArea();
  hint.setEditable(false);
  hint.setText(""String_Node_Str"");
  learner=new JPanel();
  advanced.setSize(20,20);
  learner.setLayout(null);
  learner.setPreferredSize(new Dimension(600,520));
  accept.setPreferredSize(new Dimension(290,50));
  advanced.setName(""String_Node_Str"");
  posPanel=new PosAndNegSelectPanel(model,action);
  addAcceptButtonListener(this.action);
  addRunButtonListener(this.action);
  addAdvancedButtonListener(this.action);
  run.setEnabled(false);
  hint.setText(""String_Node_Str"");
  isInconsistent=false;
  readThread=new ReadingOntologyThread(editorKit,this,model);
  readThread.start();
  hint.setVisible(true);
  advanced.setIcon(icon);
  accept.setEnabled(false);
  action.resetToggled();
  addButtonPanel.add(""String_Node_Str"",accept);
  sugPanel.setSuggestList(new DefaultListModel());
  sugPanel=sugPanel.updateSuggestClassList();
  advanced.setSelected(false);
  sugPanel.setBounds(10,35,490,110);
  adv.setBounds(40,200,200,20);
  wikiPane.setBounds(220,0,350,30);
  addButtonPanel.setBounds(510,40,80,110);
  run.setBounds(10,0,200,30);
  advanced.setBounds(10,200,20,20);
  sugPanel.setVisible(true);
  posPanel.setVisible(false);
  posPanel.setBounds(10,230,490,250);
  accept.setBounds(510,40,80,110);
  hint.setBounds(10,150,490,35);
  errorMessage.setBounds(10,180,490,20);
  learner.add(run);
  learner.add(wikiPane);
  learner.add(adv);
  learner.add(advanced);
  learner.add(sugPanel);
  learner.add(addButtonPanel);
  learner.add(hint);
  learner.add(errorMessage);
  learner.add(posPanel);
  detail=new MoreDetailForSuggestedConceptsPanel(model);
}","/** 
 * This Method renders the view of the plugin.
 */
public void makeView(){
  run.setEnabled(false);
  hint.setText(""String_Node_Str"");
  isInconsistent=false;
  readThread=new ReadingOntologyThread(editorKit,this,model);
  readThread.start();
  hint.setVisible(true);
  advanced.setIcon(icon);
  accept.setEnabled(false);
  action.resetToggled();
  addButtonPanel.add(""String_Node_Str"",accept);
  sugPanel.setSuggestList(new DefaultListModel());
  sugPanel=sugPanel.updateSuggestClassList();
  advanced.setSelected(false);
  sugPanel.setBounds(10,35,490,110);
  adv.setBounds(40,200,200,20);
  wikiPane.setBounds(220,0,350,30);
  addButtonPanel.setBounds(510,40,80,110);
  run.setBounds(10,0,200,30);
  advanced.setBounds(10,200,20,20);
  sugPanel.setVisible(true);
  posPanel.setVisible(false);
  posPanel.setBounds(10,230,490,250);
  posPanel.getOptionPanel().resetOptions();
  accept.setBounds(510,40,80,110);
  hint.setBounds(10,150,490,35);
  errorMessage.setBounds(10,180,490,20);
  learner.add(run);
  learner.add(wikiPane);
  learner.add(adv);
  learner.add(advanced);
  learner.add(sugPanel);
  learner.add(addButtonPanel);
  learner.add(hint);
  learner.add(errorMessage);
  learner.add(posPanel);
  this.renderErrorMessage(""String_Node_Str"");
  detail=new MoreDetailForSuggestedConceptsPanel(model);
}"
10018,"public void dispose(){
  this.unsetEverything();
  sugPanel.getSuggestList().removeAll();
  learner.removeAll();
  model.getSuggestModel().clear();
  model.getIndividual().clear();
}","public void dispose(){
  this.unsetEverything();
  sugPanel.getSuggestList().removeAll();
  learner.removeAll();
  sugPanel=null;
  model.getSuggestModel().clear();
  model.getIndividual().clear();
}"
10019,"/** 
 * The constructor for the DL-Learner tab in the class description editor.
 * @param editor OWLEditorKit
 * @param label String
 */
public DLLearnerView(String label,OWLEditorKit editor){
  this.label=label;
  editorKit=editor;
}","/** 
 * The constructor for the DL-Learner tab in the class description editor.
 * @param editor OWLEditorKit
 * @param label String
 */
public DLLearnerView(String label,OWLEditorKit editor){
  this.label=label;
  editorKit=editor;
  model=new DLLearnerModel(editorKit,this);
  model.setID(label);
  sugPanel=new SuggestClassPanel();
  action=new ActionHandler(model,this,label);
  wikiPane=new JLabel(""String_Node_Str"");
  URL iconUrl=this.getClass().getResource(""String_Node_Str"");
  icon=new ImageIcon(iconUrl);
  URL toggledIconUrl=this.getClass().getResource(""String_Node_Str"");
  toggledIcon=new ImageIcon(toggledIconUrl);
  adv=new JLabel(""String_Node_Str"");
  advanced=new JToggleButton(icon);
  advanced.setVisible(true);
  run=new JButton(label);
  accept=new JButton(""String_Node_Str"");
  addButtonPanel=new JPanel(new BorderLayout());
  sugPanel.addSuggestPanelMouseListener(action);
  errorMessage=new JTextArea();
  errorMessage.setEditable(false);
  hint=new JTextArea();
  hint.setEditable(false);
  hint.setText(""String_Node_Str"");
  learner=new JPanel();
  advanced.setSize(20,20);
  learner.setLayout(null);
  learner.setPreferredSize(new Dimension(600,520));
  accept.setPreferredSize(new Dimension(290,50));
  advanced.setName(""String_Node_Str"");
  posPanel=new PosAndNegSelectPanel(model,action);
  addAcceptButtonListener(this.action);
  addRunButtonListener(this.action);
  addAdvancedButtonListener(this.action);
}"
10020,"@Override public Set<OWLDescription> getDescriptions(){
  return view.getDLLearnerModel().getNewOWLDescription();
}","@Override public Set<OWLDescription> getDescriptions(){
  return view.getSolutions();
}"
10021,"@Override public boolean isValidInput(){
  System.out.println(""String_Node_Str"" + super.getOWLEditorKit().getOWLWorkspace().getOWLSelectionModel().getLastSelectedClass());
  view=new DLLearnerView(""String_Node_Str"",this.getOWLEditorKit());
  view.makeView();
  return true;
}","@Override public boolean isValidInput(){
  view.makeView();
  return true;
}"
10022,"@Override public void removeStatusChangedListener(InputVerificationStatusChangedListener arg0){
  view.dispose();
  view=null;
}","@Override public void removeStatusChangedListener(InputVerificationStatusChangedListener arg0){
}"
10023,"/** 
 * This method sets the individuals that belong to the concept which is chosen in protege.
 */
private void setPositiveConcept(){
  current=editor.getOWLWorkspace().getOWLSelectionModel().getLastSelectedClass();
  if (current != null) {
    SortedSet<Individual> individuals=null;
    hasIndividuals=false;
    if (!(current.toString().equals(""String_Node_Str""))) {
      List<NamedClass> classList=reasoner.getAtomicConceptsList();
      for (      NamedClass concept : classList) {
        if (individuals == null) {
          for (          String onto : ontologieURI) {
            if (concept.toString().contains(onto)) {
              if (concept.toString().equals(onto + current.toString())) {
                currentConcept=concept;
                if (reasoner.getIndividuals(concept) != null) {
                  if (reasoner.getIndividuals(concept).size() > 0) {
                    model.setInstancesCount(reasoner.getIndividuals(concept).size());
                    hasIndividuals=true;
                  }
                  individual=reasoner.getIndividuals(concept);
                  model.setIndividuals(individual);
                  model.setHasIndividuals(hasIndividuals);
                  model.setCurrentConcept(currentConcept);
                  view.getRunButton().setEnabled(true);
                  break;
                }
              }
            }
          }
        }
      }
    }
 else {
      System.out.println(""String_Node_Str"");
      if (reasoner.getIndividuals().size() > 0) {
        hasIndividuals=true;
      }
      individual=reasoner.getIndividuals();
      model.setIndividuals(individual);
      model.setHasIndividuals(hasIndividuals);
    }
  }
}","/** 
 * This method sets the individuals that belong to the concept which is chosen in protege.
 */
private void setPositiveConcept(){
  current=editor.getOWLWorkspace().getOWLSelectionModel().getLastSelectedClass();
  if (current != null) {
    SortedSet<Individual> individuals=null;
    hasIndividuals=false;
    if (!(current.toString().equals(""String_Node_Str""))) {
      List<NamedClass> classList=reasoner.getAtomicConceptsList();
      for (      NamedClass concept : classList) {
        if (individuals == null) {
          for (          String onto : ontologieURI) {
            if (concept.toString().contains(onto)) {
              if (concept.toString().equals(onto + current.toString())) {
                currentConcept=concept;
                if (reasoner.getIndividuals(concept) != null) {
                  if (reasoner.getIndividuals(concept).size() > 0) {
                    model.setInstancesCount(reasoner.getIndividuals(concept).size());
                    hasIndividuals=true;
                  }
                  individual=reasoner.getIndividuals(concept);
                  model.setIndividuals(individual);
                  model.setHasIndividuals(hasIndividuals);
                  System.out.println(""String_Node_Str"" + currentConcept);
                  model.setCurrentConcept(currentConcept);
                  view.getRunButton().setEnabled(true);
                  break;
                }
              }
            }
          }
        }
      }
    }
 else {
      System.out.println(""String_Node_Str"");
      if (reasoner.getIndividuals().size() > 0) {
        hasIndividuals=true;
      }
      individual=reasoner.getIndividuals();
      model.setIndividuals(individual);
      model.setHasIndividuals(hasIndividuals);
    }
  }
}"
10024,"/** 
 * this method adds an new Scroll Panel and returns the updated SuggestClassPanel.
 * @return updated SuggestClassPanel
 */
public SuggestClassPanel updateSuggestClassList(){
  suggestScroll=new JScrollPane();
  suggestScroll=new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  descriptions=new JList();
  descriptions.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  suggestPanel=new JPanel();
  descriptions.setVisible(true);
  suggestPanel.add(descriptions);
  suggestScroll.setPreferredSize(new Dimension(490,108));
  suggestScroll.setViewportView(descriptions);
  descriptions.setCellRenderer(new SuggestListCellRenderer());
  add(suggestScroll);
  return this;
}","/** 
 * this method adds an new Scroll Panel and returns the updated SuggestClassPanel.
 * @return updated SuggestClassPanel
 */
public SuggestClassPanel updateSuggestClassList(){
  add(suggestScroll);
  return this;
}"
10025,"/** 
 * The constructor for the DL-Learner tab in the class description editor.
 * @param editor OWLEditorKit
 * @param label String
 */
public DLLearnerView(String label,OWLEditorKit editor){
  editorKit=editor;
  wikiPane=new JLabel(""String_Node_Str"");
  URL iconUrl=this.getClass().getResource(""String_Node_Str"");
  icon=new ImageIcon(iconUrl);
  URL toggledIconUrl=this.getClass().getResource(""String_Node_Str"");
  toggledIcon=new ImageIcon(toggledIconUrl);
  model=new DLLearnerModel(editorKit,label,this);
  sugPanel=new SuggestClassPanel();
  action=new ActionHandler(this.action,model,this,label);
  adv=new JLabel(""String_Node_Str"");
  advanced=new JToggleButton(icon);
  advanced.setVisible(true);
  run=new JButton(label);
  accept=new JButton(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  addButtonPanel=new JPanel(new BorderLayout());
  sugPanel.addSuggestPanelMouseListener(action);
  errorMessage=new JTextArea();
  errorMessage.setEditable(false);
  hint=new JTextArea();
  hint.setEditable(false);
  hint.setText(""String_Node_Str"");
  learner=new JPanel();
  advanced.setSize(20,20);
  learner.setLayout(null);
  learner.setPreferredSize(new Dimension(600,520));
  accept.setPreferredSize(new Dimension(290,50));
  advanced.setName(""String_Node_Str"");
  posPanel=new PosAndNegSelectPanel(model,action);
  addAcceptButtonListener(this.action);
  addRunButtonListener(this.action);
  addAdvancedButtonListener(this.action);
  run.setEnabled(false);
  model.clearVector();
  hint.setText(""String_Node_Str"");
  isInconsistent=false;
  readThread=new ReadingOntologyThread(editorKit,null,this,model);
  readThread.start();
  hint.setVisible(true);
  advanced.setIcon(icon);
  accept.setEnabled(false);
  action.resetToggled();
  addButtonPanel.add(""String_Node_Str"",accept);
  sugPanel.setSuggestList(model.getSuggestList());
  sugPanel=sugPanel.updateSuggestClassList();
  advanced.setSelected(false);
  sugPanel.setBounds(10,35,490,110);
  adv.setBounds(40,200,200,20);
  wikiPane.setBounds(220,0,350,30);
  addButtonPanel.setBounds(510,40,80,110);
  run.setBounds(10,0,200,30);
  advanced.setBounds(10,200,20,20);
  sugPanel.setVisible(true);
  posPanel.setVisible(false);
  posPanel.setBounds(10,230,490,250);
  accept.setBounds(510,40,80,110);
  hint.setBounds(10,150,490,35);
  errorMessage.setBounds(10,180,490,20);
  learner.add(run);
  learner.add(wikiPane);
  learner.add(adv);
  learner.add(advanced);
  learner.add(sugPanel);
  learner.add(addButtonPanel);
  learner.add(hint);
  learner.add(errorMessage);
  learner.add(posPanel);
  detail=new MoreDetailForSuggestedConceptsPanel(model);
}","/** 
 * The constructor for the DL-Learner tab in the class description editor.
 * @param editor OWLEditorKit
 * @param label String
 */
public DLLearnerView(String label,OWLEditorKit editor){
  editorKit=editor;
  wikiPane=new JLabel(""String_Node_Str"");
  URL iconUrl=this.getClass().getResource(""String_Node_Str"");
  icon=new ImageIcon(iconUrl);
  URL toggledIconUrl=this.getClass().getResource(""String_Node_Str"");
  toggledIcon=new ImageIcon(toggledIconUrl);
  model=new DLLearnerModel(editorKit,label,this);
  sugPanel=new SuggestClassPanel();
  action=new ActionHandler(this.action,model,this,label);
  adv=new JLabel(""String_Node_Str"");
  advanced=new JToggleButton(icon);
  advanced.setVisible(true);
  run=new JButton(label);
  accept=new JButton(""String_Node_Str"");
  addButtonPanel=new JPanel(new BorderLayout());
  sugPanel.addSuggestPanelMouseListener(action);
  errorMessage=new JTextArea();
  errorMessage.setEditable(false);
  hint=new JTextArea();
  hint.setEditable(false);
  hint.setText(""String_Node_Str"");
  learner=new JPanel();
  advanced.setSize(20,20);
  learner.setLayout(null);
  learner.setPreferredSize(new Dimension(600,520));
  accept.setPreferredSize(new Dimension(290,50));
  advanced.setName(""String_Node_Str"");
  posPanel=new PosAndNegSelectPanel(model,action);
  addAcceptButtonListener(this.action);
  addRunButtonListener(this.action);
  addAdvancedButtonListener(this.action);
  run.setEnabled(false);
  model.clearVector();
  hint.setText(""String_Node_Str"");
  isInconsistent=false;
  readThread=new ReadingOntologyThread(editorKit,null,this,model);
  readThread.start();
  hint.setVisible(true);
  advanced.setIcon(icon);
  accept.setEnabled(false);
  action.resetToggled();
  addButtonPanel.add(""String_Node_Str"",accept);
  sugPanel.setSuggestList(model.getSuggestList());
  sugPanel=sugPanel.updateSuggestClassList();
  advanced.setSelected(false);
  sugPanel.setBounds(10,35,490,110);
  adv.setBounds(40,200,200,20);
  wikiPane.setBounds(220,0,350,30);
  addButtonPanel.setBounds(510,40,80,110);
  run.setBounds(10,0,200,30);
  advanced.setBounds(10,200,20,20);
  sugPanel.setVisible(true);
  posPanel.setVisible(false);
  posPanel.setBounds(10,230,490,250);
  accept.setBounds(510,40,80,110);
  hint.setBounds(10,150,490,35);
  errorMessage.setBounds(10,180,490,20);
  learner.add(run);
  learner.add(wikiPane);
  learner.add(adv);
  learner.add(advanced);
  learner.add(sugPanel);
  learner.add(addButtonPanel);
  learner.add(hint);
  learner.add(errorMessage);
  learner.add(posPanel);
  detail=new MoreDetailForSuggestedConceptsPanel(model);
}"
10026,"@Override public Set<OWLDescription> getDescriptions(){
  System.out.println(""String_Node_Str"");
  return null;
}","@Override public Set<OWLDescription> getDescriptions(){
  return view.getDLLearnerModel().getNewOWLDescription();
}"
10027,"@Override public void addStatusChangedListener(InputVerificationStatusChangedListener arg0){
  System.out.println(""String_Node_Str"");
}","@Override public void addStatusChangedListener(InputVerificationStatusChangedListener arg0){
}"
10028,"@Override public boolean isValidInput(){
  System.out.println(""String_Node_Str"");
  view=new DLLearnerView(""String_Node_Str"",this.getOWLEditorKit());
  return true;
}","@Override public boolean isValidInput(){
  System.out.println(""String_Node_Str"" + super.getOWLEditorKit().getOWLWorkspace().getOWLSelectionModel().getLastSelectedClass());
  System.out.println(""String_Node_Str"" + super.getOWLEditorKit().getWorkspace());
  view=new DLLearnerView(""String_Node_Str"",this.getOWLEditorKit());
  return true;
}"
10029,"@Override public void removeStatusChangedListener(InputVerificationStatusChangedListener arg0){
  System.out.println(""String_Node_Str"");
  view=null;
}","@Override public void removeStatusChangedListener(InputVerificationStatusChangedListener arg0){
  view=null;
}"
10030,"@Override public void dispose() throws Exception {
  System.out.println(""String_Node_Str"");
}","@Override public void dispose() throws Exception {
  view=null;
}"
10031,"@Override public JComponent getComponent(){
  System.out.println(""String_Node_Str"");
  return view.getLearnerView();
}","@Override public JComponent getComponent(){
  return view.getLearnerView();
}"
10032,"@Override public boolean setDescription(OWLDescription arg0){
  System.out.println(""String_Node_Str"");
  return true;
}","@Override public boolean setDescription(OWLDescription arg0){
  return true;
}"
10033,"@Override public void initialise() throws Exception {
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + this.getOWLEditorKit().getOWLWorkspace().getViewManager().getClass());
  view=new DLLearnerView(""String_Node_Str"",this.getOWLEditorKit());
}","@Override public void initialise() throws Exception {
  view=new DLLearnerView(""String_Node_Str"",super.getOWLEditorKit());
}"
10034,"/** 
 * This is the constructor of the ReadingOntologyThread.
 * @param editorKit OWLEditorKit
 * @param frame OWLFrame
 * @param v DL-Learner view
 * @param m DL-Learner model
 */
public ReadingOntologyThread(OWLEditorKit editorKit,OWLFrame<OWLClass> frame,DLLearnerView v,DLLearnerModel m){
  ontologieURI=new HashSet<String>();
  this.editor=editorKit;
  current=editor.getOWLWorkspace().getOWLComponentFactory().getOWLClassSelectorPanel().getSelectedObject();
  this.view=v;
  this.model=m;
}","/** 
 * This is the constructor of the ReadingOntologyThread.
 * @param editorKit OWLEditorKit
 * @param frame OWLFrame
 * @param v DL-Learner view
 * @param m DL-Learner model
 */
public ReadingOntologyThread(OWLEditorKit editorKit,OWLFrame<OWLClass> frame,DLLearnerView v,DLLearnerModel m){
  ontologieURI=new HashSet<String>();
  this.editor=editorKit;
  current=editor.getOWLWorkspace().getOWLSelectionModel().getLastSelectedClass();
  this.view=v;
  this.model=m;
}"
10035,"/** 
 * This is the constructor for DL-Learner model.
 * @param editorKit Editor Kit to get the currently loaded Ontology
 * @param id String if it learns a subclass or a superclass.
 * @param view current view of the DL-Learner tab
 */
public DLLearnerModel(OWLEditorKit editorKit,String id,DLLearnerView view){
  editor=editorKit;
  this.id=id;
  this.view=view;
  ontologyConsistent=true;
  instancesCount=0;
  owlDescription=new HashSet<OWLDescription>();
  posListModel=new DefaultListModel();
  negListModel=new DefaultListModel();
  ComponentManager.setComponentClasses(componenten);
  individualVector=new Vector<IndividualObject>();
  cm=ComponentManager.getInstance();
  ds=new HashSet<OWLDescription>();
  suggestModel=new DefaultListModel();
  ontologieURI=new HashSet<String>();
  sources=new HashSet<KnowledgeSource>();
}","/** 
 * This is the constructor for DL-Learner model.
 * @param editorKit Editor Kit to get the currently loaded Ontology
 * @param id String if it learns a subclass or a superclass.
 * @param view current view of the DL-Learner tab
 */
public DLLearnerModel(OWLEditorKit editorKit,String id,DLLearnerView view){
  editor=editorKit;
  this.id=id;
  this.view=view;
  ontologyConsistent=true;
  instancesCount=0;
  owlDescription=new HashSet<OWLDescription>();
  ComponentManager.setComponentClasses(componenten);
  cm=ComponentManager.getInstance();
  ds=new HashSet<OWLDescription>();
  suggestModel=new DefaultListModel();
  ontologieURI=new HashSet<String>();
  sources=new HashSet<KnowledgeSource>();
}"
10036,"private String getSolutionString(List<? extends EvaluatedDescription> solutions){
  String baseURI=config.getReasoner().getBaseURI();
  Map<String,String> prefixes=config.getReasoner().getPrefixes();
  String string=""String_Node_Str"";
  for (  EvaluatedDescription d : solutions) {
    string+=""String_Node_Str"" + (df.format(((EvaluatedDescriptionPosNeg)d).getAccuracy() * 100)) + ""String_Node_Str""+ d.getDescription().toManchesterSyntaxString(baseURI,prefixes)+ ""String_Node_Str"";
  }
  return string;
}","private String getSolutionString(List<? extends EvaluatedDescription> solutions){
  String baseURI=config.getReasoner().getBaseURI();
  Map<String,String> prefixes=config.getReasoner().getPrefixes();
  String string=""String_Node_Str"";
  for (  EvaluatedDescription d : solutions) {
    string+=""String_Node_Str"" + (df.format(d.getAccuracy() * 100)) + ""String_Node_Str""+ d.getDescription().toManchesterSyntaxString(baseURI,prefixes)+ ""String_Node_Str"";
  }
  return string;
}"
10037,"/** 
 * Gets a list describing the position of this node within the  tree. If the list is e.g. [2,5,1], then the node can be reached by picking the second child of the root node, then picking the 5th child of this node and finally selecting the first child of the previous node.
 * @return The position number of this node within the tree as described above.
 */
public int[] getCurrentPosition(){
  int[] position=new int[level - 1];
  ELDescriptionNode root=this;
  while (root.parent != null) {
    position[root.level - 2]=getChildNumber();
    root=root.parent;
  }
  return position;
}","/** 
 * Gets a list describing the position of this node within the  tree. If the list is e.g. [2,5,1], then the node can be reached by picking the second child of the root node, then picking the 5th child of this node and finally selecting the first child of the previous node.
 * @return The position number of this node within the tree as described above.
 */
public int[] getCurrentPosition(){
  int[] position=new int[level - 1];
  ELDescriptionNode root=this;
  while (root.parent != null) {
    position[root.level - 2]=root.getChildNumber();
    root=root.parent;
  }
  return position;
}"
10038,"private int getChildNumber(){
  int count=0;
  for (  ELDescriptionEdge edge : parent.edges) {
    if (edge.getNode() == this) {
      return count;
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}","private int getChildNumber(){
  int count=0;
  for (  ELDescriptionEdge edge : parent.edges) {
    if (edge.getNode() == this) {
      return count;
    }
    count++;
  }
  throw new RuntimeException(""String_Node_Str"");
}"
10039,"/** 
 * Performs downward refinement for the given tree. The operator works directly on EL description trees (which differ from the the tree structures build by descriptions).
 * @param tree Input EL description tree.
 * @return Set of refined EL description trees.
 */
public Set<ELDescriptionTree> refine(ELDescriptionTree tree){
  logger.trace(""String_Node_Str"" + tree.toDescriptionString());
  Set<ELDescriptionTree> refinements=new HashSet<ELDescriptionTree>();
  Set<ELDescriptionNode> nodes=new HashSet<ELDescriptionNode>(tree.getNodes());
  for (  ELDescriptionNode v : nodes) {
    logger.trace(""String_Node_Str"" + v);
    int[] position=v.getCurrentPosition();
    refinements.addAll(extendLabel(tree,v,position));
    refinements.addAll(refineLabel(tree,v,position));
    refinements.addAll(refineEdge(tree,v,position));
    refinements.addAll(attachSubtree(tree,v,position));
  }
  return refinements;
}","/** 
 * Performs downward refinement for the given tree. The operator works directly on EL description trees (which differ from the the tree structures build by descriptions).
 * @param tree Input EL description tree.
 * @return Set of refined EL description trees.
 */
public Set<ELDescriptionTree> refine(ELDescriptionTree tree){
  logger.trace(""String_Node_Str"" + tree.toDescriptionString());
  Set<ELDescriptionTree> refinements=new HashSet<ELDescriptionTree>();
  Set<ELDescriptionNode> nodes=new HashSet<ELDescriptionNode>(tree.getNodes());
  for (  ELDescriptionNode v : nodes) {
    logger.trace(""String_Node_Str"" + v);
    int[] position=v.getCurrentPosition();
    logger.trace(""String_Node_Str"" + Helper.arrayContent(position));
    refinements.addAll(extendLabel(tree,v,position));
    refinements.addAll(refineLabel(tree,v,position));
    refinements.addAll(refineEdge(tree,v,position));
    refinements.addAll(attachSubtree(tree,v,position));
  }
  return refinements;
}"
10040,"private static void testOntology(String ont) throws MalformedURLException, ComponentInitException {
  System.out.print(""String_Node_Str"" + ont + ""String_Node_Str"");
  ComponentManager cm=ComponentManager.getInstance();
  KnowledgeSource source=cm.knowledgeSource(OWLFile.class);
  cm.applyConfigEntry(source,""String_Node_Str"",new File(ont).toURI().toURL());
  source.init();
  ReasonerComponent reasoner=cm.reasoner(OWLAPIReasoner.class,source);
  reasoner.init();
  System.out.println(""String_Node_Str"");
  System.out.println();
  int outerLoops=10;
  for (int loop=0; loop < outerLoops; loop++) {
    int nrOfApplications=10;
    ELDescriptionTree currTree=new ELDescriptionTree(reasoner,Thing.instance);
    ELDown2 operator=new ELDown2(reasoner);
    Stat runtime=new Stat();
    Stat runtimePerRefinement=new Stat();
    System.out.println(""String_Node_Str"" + nrOfApplications + ""String_Node_Str"");
    for (int i=0; i < nrOfApplications; i++) {
      System.out.print(""String_Node_Str"" + currTree.transformToDescription().toString(reasoner.getBaseURI(),reasoner.getPrefixes()));
      long start=System.nanoTime();
      Set<ELDescriptionTree> refinements=operator.refine(currTree);
      long time=System.nanoTime() - start;
      runtime.addNumber(time / 1000000d);
      runtimePerRefinement.addNumber(time / 1000000d / refinements.size());
      System.out.println(""String_Node_Str"" + refinements.size() + ""String_Node_Str"");
      int index=rand.nextInt(refinements.size());
      currTree=new ArrayList<ELDescriptionTree>(refinements).get(index);
    }
    System.out.println(""String_Node_Str"" + runtime.prettyPrint(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + runtimePerRefinement.prettyPrint(""String_Node_Str""));
    System.out.println();
  }
}","private static void testOntology(String ont) throws MalformedURLException, ComponentInitException {
  System.out.print(""String_Node_Str"" + ont + ""String_Node_Str"");
  ComponentManager cm=ComponentManager.getInstance();
  KnowledgeSource source=cm.knowledgeSource(OWLFile.class);
  cm.applyConfigEntry(source,""String_Node_Str"",new File(ont).toURI().toURL());
  source.init();
  ReasonerComponent reasoner=cm.reasoner(OWLAPIReasoner.class,source);
  reasoner.init();
  System.out.println(""String_Node_Str"");
  System.out.println();
  int outerLoops=100;
  for (int loop=0; loop < outerLoops; loop++) {
    int nrOfApplications=10;
    ELDescriptionTree currTree=new ELDescriptionTree(reasoner,Thing.instance);
    ELDown2 operator=new ELDown2(reasoner);
    Stat runtime=new Stat();
    Stat runtimePerRefinement=new Stat();
    System.out.println(""String_Node_Str"" + nrOfApplications + ""String_Node_Str"");
    for (int i=0; i < nrOfApplications; i++) {
      System.out.print(""String_Node_Str"" + currTree.transformToDescription().toString(reasoner.getBaseURI(),reasoner.getPrefixes()));
      long start=System.nanoTime();
      Set<ELDescriptionTree> refinements=operator.refine(currTree);
      long time=System.nanoTime() - start;
      runtime.addNumber(time / 1000000d);
      runtimePerRefinement.addNumber(time / 1000000d / refinements.size());
      System.out.println(""String_Node_Str"" + refinements.size() + ""String_Node_Str"");
      int index=rand.nextInt(refinements.size());
      currTree=new ArrayList<ELDescriptionTree>(refinements).get(index);
    }
    System.out.println(""String_Node_Str"" + runtime.prettyPrint(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + runtimePerRefinement.prettyPrint(""String_Node_Str""));
    System.out.println();
  }
}"
10041,"public static void main(String[] args) throws MalformedURLException, ComponentInitException {
  String example=""String_Node_Str"";
  testOntology(example);
  System.exit(0);
}","public static void main(String[] args) throws ComponentInitException, IOException {
  String example=""String_Node_Str"";
  testOntology(example);
  System.exit(0);
}"
10042,"public String getShortDescriptionHTML(int nrOfPositiveExamples,int nrOfNegativeExamples,String baseURI){
  String ret=""String_Node_Str"" + concept.toString(baseURI,null) + ""String_Node_Str"";
  if (isTooWeak)   ret+=""String_Node_Str"";
 else {
    double accuracy=100 * (coveredPositives.size() + nrOfNegativeExamples - coveredNegatives.size()) / (double)(nrOfPositiveExamples + nrOfNegativeExamples);
    ret+=""String_Node_Str"" + df.format(accuracy) + ""String_Node_Str"";
    double heuristicScore=MultiHeuristic.getNodeScore(this,nrOfPositiveExamples,nrOfNegativeExamples,configurator);
    ret+=""String_Node_Str"" + df.format(heuristicScore) + ""String_Node_Str"";
    int wrongPositives=nrOfPositiveExamples - coveredPositives.size();
    ret+=""String_Node_Str"" + wrongPositives + ""String_Node_Str""+ coveredNegatives.size()+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"" + qualityEvaluationMethod + ""String_Node_Str""+ horizontalExpansion;
  ret+=""String_Node_Str"" + children.size() + ""String_Node_Str"";
  return ret + ""String_Node_Str"";
}","public String getShortDescriptionHTML(int nrOfPositiveExamples,int nrOfNegativeExamples,String baseURI){
  String ret=""String_Node_Str"" + concept.toManchesterSyntaxString(baseURI,null) + ""String_Node_Str"";
  if (isTooWeak)   ret+=""String_Node_Str"";
 else {
    double accuracy=100 * (coveredPositives.size() + nrOfNegativeExamples - coveredNegatives.size()) / (double)(nrOfPositiveExamples + nrOfNegativeExamples);
    ret+=""String_Node_Str"" + df.format(accuracy) + ""String_Node_Str"";
    double heuristicScore=MultiHeuristic.getNodeScore(this,nrOfPositiveExamples,nrOfNegativeExamples,configurator);
    ret+=""String_Node_Str"" + df.format(heuristicScore) + ""String_Node_Str"";
    int wrongPositives=nrOfPositiveExamples - coveredPositives.size();
    ret+=""String_Node_Str"" + wrongPositives + ""String_Node_Str""+ coveredNegatives.size()+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"" + qualityEvaluationMethod + ""String_Node_Str""+ horizontalExpansion;
  ret+=""String_Node_Str"" + children.size() + ""String_Node_Str"";
  return ret + ""String_Node_Str"";
}"
10043,"@SuppressWarnings(""String_Node_Str"") public TreeWindow(Config config){
  this.config=config;
  this.setTitle(""String_Node_Str"");
  this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  this.setSize(800,600);
  if (this.getClass().getResource(""String_Node_Str"") != null)   setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""String_Node_Str"")));
  if (config.getLearningAlgorithm() instanceof ExampleBasedROLComponent) {
    ExampleBasedROLComponent ebrol=(ExampleBasedROLComponent)config.getLearningAlgorithm();
    this.rootNode=ebrol.getStartNode();
    this.ebNodeModel=new EBNodeTreeModel(rootNode);
    PosNegDefinitionLP lp=(PosNegDefinitionLP)config.getLearningProblem();
    Set<String> posExamples=lp.getConfigurator().getPositiveExamples();
    Set<String> negExamples=lp.getConfigurator().getNegativeExamples();
    String baseURI=config.getReasoner().getBaseURI();
    int nrOfPositiveExamples=posExamples.size();
    int nrOfNegativeExamples=negExamples.size();
    tree=new SearchTree(ebNodeModel,nrOfPositiveExamples,nrOfNegativeExamples,baseURI);
    this.add(new JScrollPane(tree));
  }
  setVisible(true);
}","@SuppressWarnings(""String_Node_Str"") public TreeWindow(Config config){
  this.config=config;
  this.setTitle(""String_Node_Str"");
  this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  this.setSize(800,600);
  if (this.getClass().getResource(""String_Node_Str"") != null)   setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""String_Node_Str"")));
  if (config.getLearningAlgorithm() instanceof ExampleBasedROLComponent) {
    ExampleBasedROLComponent ebrol=(ExampleBasedROLComponent)config.getLearningAlgorithm();
    this.rootNode=ebrol.getStartNode();
    this.ebNodeModel=new EBNodeTreeModel(rootNode);
    PosNegDefinitionLP lp=(PosNegDefinitionLP)config.getLearningProblem();
    Set<String> posExamples=lp.getConfigurator().getPositiveExamples();
    Set<String> negExamples=lp.getConfigurator().getNegativeExamples();
    String baseURI=config.getReasoner().getBaseURI();
    int nrOfPositiveExamples=posExamples.size();
    int nrOfNegativeExamples=negExamples.size();
    tree=new SearchTree(ebNodeModel,nrOfPositiveExamples,nrOfNegativeExamples,baseURI);
    tree.updateUI();
    this.add(new JScrollPane(tree));
  }
  setVisible(true);
}"
10044,"public boolean isMinimal(){
  for (int i=1; i <= maxLevel; i++) {
    Set<ELDescriptionNode> nodes=levelNodeMapping.get(i);
    for (    ELDescriptionNode node : nodes) {
      List<ELDescriptionEdge> edges=node.getEdges();
      for (int j=0; j < edges.size(); j++) {
        for (int k=0; k < edges.size(); k++) {
          if (j != k) {
            ObjectProperty op1=edges.get(j).getLabel();
            ObjectProperty op2=edges.get(k).getLabel();
            if (rs.getObjectPropertyHierarchy().isSubpropertyOf(op1,op2)) {
              ELDescriptionNode node1=edges.get(j).getNode();
              ELDescriptionNode node2=edges.get(k).getNode();
              if (node1.in.contains(node2) || node2.in.contains(node1)) {
                return false;
              }
            }
          }
        }
      }
    }
  }
  return true;
}","public boolean isMinimal(){
  for (int i=1; i <= maxLevel; i++) {
    Set<ELDescriptionNode> nodes=levelNodeMapping.get(i);
    for (    ELDescriptionNode node : nodes) {
      List<ELDescriptionEdge> edges=node.getEdges();
      for (int j=0; j < edges.size(); j++) {
        for (int k=0; k < edges.size(); k++) {
          if (j != k) {
            ObjectProperty op1=edges.get(j).getLabel();
            ObjectProperty op2=edges.get(k).getLabel();
            if (rs.getObjectPropertyHierarchy().isSubpropertyOf(op1,op2)) {
              ELDescriptionNode node1=edges.get(j).getNode();
              ELDescriptionNode node2=edges.get(k).getNode();
              if (node1.in.contains(node2)) {
                return false;
              }
            }
          }
        }
      }
    }
  }
  return true;
}"
10045,"@Override @SuppressWarnings(""String_Node_Str"") public ELDescriptionTree clone(){
  ELDescriptionTree treeClone=new ELDescriptionTree(rs);
  Map<ELDescriptionNode,ELDescriptionNode> cloneMap=new HashMap<ELDescriptionNode,ELDescriptionNode>();
  for (int i=1; i <= maxLevel; i++) {
    Set<ELDescriptionNode> tmp=levelNodeMapping.get(i);
    for (    ELDescriptionNode node : tmp) {
      ELDescriptionNode nodeNew=new ELDescriptionNode();
      cloneMap.put(node,nodeNew);
    }
  }
  ELDescriptionNode newRoot=null;
  for (  Entry<ELDescriptionNode,ELDescriptionNode> entry : cloneMap.entrySet()) {
    ELDescriptionNode oldNode=entry.getKey();
    ELDescriptionNode newNode=entry.getValue();
    newNode.tree=treeClone;
    newNode.level=oldNode.level;
    newNode.label=(TreeSet<NamedClass>)oldNode.label.clone();
    if (oldNode.parent != null) {
      newNode.parent=cloneMap.get(oldNode.parent);
    }
 else {
      newRoot=newNode;
    }
    for (    ELDescriptionNode node : oldNode.in) {
      newNode.in.add(cloneMap.get(node));
    }
    for (    ELDescriptionNode node : oldNode.inSC1) {
      newNode.inSC1.add(cloneMap.get(node));
    }
    for (    ELDescriptionNode node : oldNode.inSC2) {
      newNode.inSC2.add(cloneMap.get(node));
    }
    for (    ELDescriptionNode node : oldNode.out) {
      newNode.out.add(cloneMap.get(node));
    }
    for (    ELDescriptionNode node : oldNode.outSC1) {
      newNode.outSC1.add(cloneMap.get(node));
    }
    for (    ELDescriptionNode node : oldNode.outSC2) {
      newNode.outSC2.add(cloneMap.get(node));
    }
    for (    ELDescriptionEdge edge : oldNode.edges) {
      newNode.edges.add(new ELDescriptionEdge(edge.getLabel(),cloneMap.get(edge.getNode())));
    }
  }
  treeClone.rootNode=newRoot;
  treeClone.maxLevel=maxLevel;
  treeClone.nodes=new HashSet<ELDescriptionNode>(nodes);
  for (int i=1; i <= maxLevel; i++) {
    Set<ELDescriptionNode> oldNodes=levelNodeMapping.get(i);
    Set<ELDescriptionNode> newNodes=new HashSet<ELDescriptionNode>();
    for (    ELDescriptionNode oldNode : oldNodes) {
      newNodes.add(cloneMap.get(oldNode));
    }
    treeClone.levelNodeMapping.put(i,newNodes);
  }
  return treeClone;
}","@Override @SuppressWarnings(""String_Node_Str"") public ELDescriptionTree clone(){
  ELDescriptionTree treeClone=new ELDescriptionTree(rs);
  Map<ELDescriptionNode,ELDescriptionNode> cloneMap=new HashMap<ELDescriptionNode,ELDescriptionNode>();
  for (int i=1; i <= maxLevel; i++) {
    Set<ELDescriptionNode> tmp=levelNodeMapping.get(i);
    for (    ELDescriptionNode node : tmp) {
      ELDescriptionNode nodeNew=new ELDescriptionNode();
      cloneMap.put(node,nodeNew);
    }
  }
  ELDescriptionNode newRoot=null;
  for (  Entry<ELDescriptionNode,ELDescriptionNode> entry : cloneMap.entrySet()) {
    ELDescriptionNode oldNode=entry.getKey();
    ELDescriptionNode newNode=entry.getValue();
    newNode.tree=treeClone;
    newNode.level=oldNode.level;
    newNode.label=(TreeSet<NamedClass>)oldNode.label.clone();
    if (oldNode.parent != null) {
      newNode.parent=cloneMap.get(oldNode.parent);
    }
 else {
      newRoot=newNode;
    }
    for (    ELDescriptionNode node : oldNode.in) {
      newNode.in.add(cloneMap.get(node));
    }
    for (    ELDescriptionNode node : oldNode.inSC1) {
      newNode.inSC1.add(cloneMap.get(node));
    }
    for (    ELDescriptionNode node : oldNode.inSC2) {
      newNode.inSC2.add(cloneMap.get(node));
    }
    for (    ELDescriptionNode node : oldNode.out) {
      newNode.out.add(cloneMap.get(node));
    }
    for (    ELDescriptionNode node : oldNode.outSC1) {
      newNode.outSC1.add(cloneMap.get(node));
    }
    for (    ELDescriptionNode node : oldNode.outSC2) {
      newNode.outSC2.add(cloneMap.get(node));
    }
    for (    ELDescriptionEdge edge : oldNode.edges) {
      newNode.edges.add(new ELDescriptionEdge(edge.getLabel(),cloneMap.get(edge.getNode())));
    }
  }
  treeClone.rootNode=newRoot;
  treeClone.maxLevel=maxLevel;
  treeClone.nodes=new HashSet<ELDescriptionNode>();
  for (  ELDescriptionNode oldNode : nodes) {
    treeClone.nodes.add(cloneMap.get(oldNode));
  }
  for (int i=1; i <= maxLevel; i++) {
    Set<ELDescriptionNode> oldNodes=levelNodeMapping.get(i);
    Set<ELDescriptionNode> newNodes=new HashSet<ELDescriptionNode>();
    for (    ELDescriptionNode oldNode : oldNodes) {
      newNodes.add(cloneMap.get(oldNode));
    }
    treeClone.levelNodeMapping.put(i,newNodes);
  }
  return treeClone;
}"
10046,"private ELDescriptionTree mergeTrees(ELDescriptionTree tree,ELDescriptionNode node,int[] position,ObjectProperty r,ELDescriptionTree newTree){
  ELDescriptionTree mergedTree=tree.clone();
  ELDescriptionNode clonedNode=mergedTree.getNode(position);
  LinkedList<ELDescriptionNode> toProcess=new LinkedList<ELDescriptionNode>();
  toProcess.add(newTree.getRootNode());
  Map<ELDescriptionNode,ELDescriptionNode> cloneMap=new HashMap<ELDescriptionNode,ELDescriptionNode>();
  while (!toProcess.isEmpty()) {
    ELDescriptionNode v=toProcess.pollFirst();
    ELDescriptionNode vp;
    if (v.isRoot()) {
      vp=new ELDescriptionNode(clonedNode,r);
    }
 else {
      ELDescriptionNode parent=cloneMap.get(v.getParent());
      ObjectProperty role=v.getParentEdge().getLabel();
      Set<NamedClass> label=v.getLabel();
      vp=new ELDescriptionNode(parent,role,label);
    }
    cloneMap.put(v,vp);
    for (    ELDescriptionEdge edge : v.getEdges()) {
      toProcess.add(edge.getNode());
    }
  }
  return mergedTree;
}","private ELDescriptionTree mergeTrees(ELDescriptionTree tree,ELDescriptionNode node,int[] position,ObjectProperty r,ELDescriptionTree newTree){
  ELDescriptionTree mergedTree=tree.clone();
  ELDescriptionNode clonedNode=mergedTree.getNode(position);
  LinkedList<ELDescriptionNode> toProcess=new LinkedList<ELDescriptionNode>();
  toProcess.add(newTree.getRootNode());
  Map<ELDescriptionNode,ELDescriptionNode> cloneMap=new HashMap<ELDescriptionNode,ELDescriptionNode>();
  while (!toProcess.isEmpty()) {
    ELDescriptionNode v=toProcess.pollFirst();
    ELDescriptionNode vp;
    if (v.isRoot()) {
      vp=new ELDescriptionNode(clonedNode,r,newTree.getRootNode().getLabel());
    }
 else {
      ELDescriptionNode parent=cloneMap.get(v.getParent());
      ObjectProperty role=v.getParentEdge().getLabel();
      Set<NamedClass> label=v.getLabel();
      vp=new ELDescriptionNode(parent,role,label);
    }
    cloneMap.put(v,vp);
    for (    ELDescriptionEdge edge : v.getEdges()) {
      toProcess.add(edge.getNode());
    }
  }
  return mergedTree;
}"
10047,"/** 
 * Performs downward refinement for the given tree. The operator works directly on EL description trees (which differ from the the tree structures build by descriptions).
 * @param tree Input EL description tree.
 * @return Set of refined EL description trees.
 */
public Set<ELDescriptionTree> refine(ELDescriptionTree tree){
  Set<ELDescriptionTree> refinements=new HashSet<ELDescriptionTree>();
  Set<ELDescriptionNode> nodes=new HashSet<ELDescriptionNode>(tree.getNodes());
  for (  ELDescriptionNode v : nodes) {
    int[] position=v.getCurrentPosition();
    refinements.addAll(extendLabel(tree,v,position));
    refinements.addAll(refineLabel(tree,v,position));
    refinements.addAll(refineEdge(tree,v,position));
    refinements.addAll(attachSubtree(tree,v,position));
  }
  return refinements;
}","/** 
 * Performs downward refinement for the given tree. The operator works directly on EL description trees (which differ from the the tree structures build by descriptions).
 * @param tree Input EL description tree.
 * @return Set of refined EL description trees.
 */
public Set<ELDescriptionTree> refine(ELDescriptionTree tree){
  System.out.println(""String_Node_Str"" + tree.toDescriptionString());
  Set<ELDescriptionTree> refinements=new HashSet<ELDescriptionTree>();
  Set<ELDescriptionNode> nodes=new HashSet<ELDescriptionNode>(tree.getNodes());
  for (  ELDescriptionNode v : nodes) {
    System.out.println(""String_Node_Str"" + v);
    int[] position=v.getCurrentPosition();
    refinements.addAll(extendLabel(tree,v,position));
    refinements.addAll(attachSubtree(tree,v,position));
  }
  return refinements;
}"
10048,"private Set<ELDescriptionTree> attachSubtree(ELDescriptionTree tree,ELDescriptionNode v,int[] position){
  Set<ELDescriptionTree> refinements=new HashSet<ELDescriptionTree>();
  Description index;
  if (v.isRoot()) {
    index=Thing.instance;
  }
 else {
    index=opRanges.get(v.getParentEdge().getLabel());
  }
  SortedSet<ObjectProperty> appOPs=utility.computeApplicableObjectProperties(index);
  Set<ObjectProperty> mgr=utility.computeMgr(appOPs);
  for (  ObjectProperty op : mgr) {
    LinkedList<ELDescriptionEdge> m=new LinkedList<ELDescriptionEdge>();
    ELDescriptionTree topTree=new ELDescriptionTree(rs,Thing.instance);
    m.add(new ELDescriptionEdge(op,topTree.getRootNode()));
    while (!m.isEmpty()) {
      ELDescriptionEdge edge=m.pollFirst();
      ObjectProperty r=edge.getLabel();
      ELDescriptionTree tp=edge.getNode().getTree();
      ELDescriptionTree mergedTree=mergeTrees(tree,v,position,r,tp);
      if (mergedTree.isMinimal()) {
        refinements.add(mergedTree);
      }
 else {
        boolean check=asCheck(v);
        if (check) {
          for (          ObjectProperty subRole : rs.getSubProperties(r)) {
            m.add(new ELDescriptionEdge(subRole,tp.getRootNode()));
          }
          Set<ELDescriptionTree> recRefs=refine(tp);
          for (          ELDescriptionTree tpp : recRefs) {
            m.add(new ELDescriptionEdge(r,tpp.getRootNode()));
          }
        }
      }
    }
  }
  return refinements;
}","private Set<ELDescriptionTree> attachSubtree(ELDescriptionTree tree,ELDescriptionNode v,int[] position){
  Set<ELDescriptionTree> refinements=new HashSet<ELDescriptionTree>();
  Description index;
  if (v.isRoot()) {
    index=Thing.instance;
  }
 else {
    index=opRanges.get(v.getParentEdge().getLabel());
  }
  SortedSet<ObjectProperty> appOPs=utility.computeApplicableObjectProperties(index);
  Set<ObjectProperty> mgr=utility.computeMgr(appOPs);
  for (  ObjectProperty op : mgr) {
    System.out.println(""String_Node_Str"" + op);
    LinkedList<ELDescriptionEdge> m=new LinkedList<ELDescriptionEdge>();
    ELDescriptionTree topTree=new ELDescriptionTree(rs,Thing.instance);
    m.add(new ELDescriptionEdge(op,topTree.getRootNode()));
    while (!m.isEmpty()) {
      ELDescriptionEdge edge=m.pollFirst();
      System.out.println(""String_Node_Str"" + edge);
      ObjectProperty r=edge.getLabel();
      ELDescriptionTree tp=edge.getNode().getTree();
      ELDescriptionTree mergedTree=mergeTrees(tree,v,position,r,tp);
      ELDescriptionNode vClone=mergedTree.getNode(position);
      System.out.println(""String_Node_Str"" + mergedTree);
      if (mergedTree.isMinimal()) {
        System.out.println(""String_Node_Str"");
        refinements.add(mergedTree);
      }
 else {
        System.out.println(""String_Node_Str"");
        boolean check=asCheck(vClone);
        System.out.println(""String_Node_Str"" + check);
        if (check) {
          for (          ObjectProperty subRole : rs.getSubProperties(r)) {
            m.add(new ELDescriptionEdge(subRole,tp.getRootNode()));
          }
          System.out.println(""String_Node_Str"");
          Set<ELDescriptionTree> recRefs=refine(tp);
          System.out.println(""String_Node_Str"");
          for (          ELDescriptionTree tpp : recRefs) {
            m.add(new ELDescriptionEdge(r,tpp.getRootNode()));
          }
        }
      }
      System.out.println(""String_Node_Str"" + m);
    }
  }
  return refinements;
}"
10049,"private boolean asCheck(ELDescriptionNode v){
  List<ELDescriptionEdge> piVEdges=new LinkedList<ELDescriptionEdge>();
  ELDescriptionNode tmp=v;
  while (!tmp.isRoot()) {
    piVEdges.add(tmp.getParentEdge());
    tmp=tmp.getParent();
  }
  for (  ELDescriptionEdge piVEdge : piVEdges) {
    ELDescriptionNode wp=piVEdge.getNode();
    ObjectProperty s=piVEdge.getLabel();
    ELDescriptionNode w=wp.getParent();
    for (    ELDescriptionEdge wEdge : w.getEdges()) {
      ObjectProperty sp=wEdge.getLabel();
      ELDescriptionNode wpp=wEdge.getNode();
      if (s.equals(sp) && wp != wpp) {
        if (wp.getIn().contains(wpp)) {
          return false;
        }
      }
    }
  }
  return true;
}","private boolean asCheck(ELDescriptionNode v){
  List<ELDescriptionEdge> piVEdges=new LinkedList<ELDescriptionEdge>();
  ELDescriptionNode tmp=v;
  while (!tmp.isRoot()) {
    piVEdges.add(tmp.getParentEdge());
    tmp=tmp.getParent();
  }
  for (  ELDescriptionEdge piVEdge : piVEdges) {
    ELDescriptionNode wp=piVEdge.getNode();
    ObjectProperty rp=piVEdge.getLabel();
    ELDescriptionNode w=wp.getParent();
    for (    ELDescriptionEdge wEdge : w.getEdges()) {
      ObjectProperty rpp=wEdge.getLabel();
      ELDescriptionNode wpp=wEdge.getNode();
      if (wp != wpp && opHierarchy.isSubpropertyOf(rp,rpp)) {
        if (wp.getIn().contains(wpp)) {
          return false;
        }
      }
    }
  }
  return true;
}"
10050,"private Set<NamedClass> getClassCandidatesRecursive(Description index,Set<NamedClass> existingClasses,Description upperClass){
  Set<NamedClass> candidates=new TreeSet<NamedClass>();
  for (  Description d : sh.getSubClasses(upperClass)) {
    if (!(d instanceof Nothing)) {
      NamedClass candidate=(NamedClass)d;
      if (!isDisjoint(candidate,index) || !checkSubClasses(existingClasses,candidate)) {
        if (!isDisjoint(new Negation(candidate),index) || !checkSuperClasses(existingClasses,candidate)) {
          candidates.add(candidate);
        }
 else {
          candidates.addAll(getClassCandidatesRecursive(index,existingClasses,candidate));
        }
      }
    }
  }
  return candidates;
}","private Set<NamedClass> getClassCandidatesRecursive(Description index,Set<NamedClass> existingClasses,Description upperClass){
  Set<NamedClass> candidates=new TreeSet<NamedClass>();
  for (  Description d : sh.getSubClasses(upperClass)) {
    if (!(d instanceof Nothing)) {
      NamedClass candidate=(NamedClass)d;
      if (!isDisjoint(candidate,index) && checkSubClasses(existingClasses,candidate)) {
        if (!isDisjoint(new Negation(candidate),index) && checkSuperClasses(existingClasses,candidate)) {
          candidates.add(candidate);
        }
 else {
          candidates.addAll(getClassCandidatesRecursive(index,existingClasses,candidate));
        }
      }
    }
  }
  return candidates;
}"
10051,"private boolean checkSubClasses(Set<NamedClass> existingClasses,NamedClass candidate){
  for (  NamedClass nc : existingClasses) {
    if (sh.isSubclassOf(candidate,nc))     return false;
  }
  return true;
}","private boolean checkSubClasses(Set<NamedClass> existingClasses,NamedClass candidate){
  for (  NamedClass nc : existingClasses) {
    if (sh.isSubclassOf(candidate,nc)) {
      return false;
    }
  }
  return true;
}"
10052,"@Test public void cloneTest() throws ParseException {
  ReasonerComponent rs=TestOntologies.getTestOntology(TestOntology.EMPTY);
  Description d=KBParser.parseConcept(""String_Node_Str"");
  ConceptTransformation.cleanConcept(d);
  ELDescriptionTree tree=new ELDescriptionTree(rs,d);
  boolean testPerformance=false;
  ELDescriptionTree treeCloned=null;
  if (testPerformance) {
    int runs=1000000;
    long startTime=System.nanoTime();
    for (int i=0; i < runs; i++) {
      treeCloned=tree.clone();
    }
    long runTime=System.nanoTime() - startTime;
    System.out.println(Helper.prettyPrintNanoSeconds(runTime / runs,true,true) + ""String_Node_Str"");
  }
 else {
    treeCloned=tree.clone();
  }
  ELDescriptionTreeComparator comparator=new ELDescriptionTreeComparator();
  assertTrue(comparator.compare(tree,treeCloned) == 0);
}","@Test public void cloneTest() throws ParseException {
  ReasonerComponent rs=TestOntologies.getTestOntology(TestOntology.EMPTY);
  Description d=KBParser.parseConcept(""String_Node_Str"");
  ConceptTransformation.cleanConcept(d);
  ELDescriptionTree tree=new ELDescriptionTree(rs,d);
  boolean testPerformance=true;
  ELDescriptionTree treeCloned=null;
  if (testPerformance) {
    int runs=1000000;
    long startTime=System.nanoTime();
    for (int i=0; i < runs; i++) {
      treeCloned=tree.clone();
    }
    long runTime=System.nanoTime() - startTime;
    System.out.println(Helper.prettyPrintNanoSeconds(runTime / runs,true,true) + ""String_Node_Str"");
  }
 else {
    treeCloned=tree.clone();
  }
  ELDescriptionTreeComparator comparator=new ELDescriptionTreeComparator();
  assertTrue(comparator.compare(tree,treeCloned) == 0);
}"
10053,"/** 
 * Implementation of test case created by Christoph Haase for  new operator.
 * @throws ParseException Thrown if concept syntax does not correspondto current KB syntax.
 * @throws ComponentInitException 
 */
@Test public void refinementTest() throws ParseException, ComponentInitException {
  ReasonerComponent rs=TestOntologies.getTestOntology(TestOntology.SIMPLE);
  Description input=KBParser.parseConcept(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + input);
  ELDown operator=new ELDown(rs);
  Set<String> desiredString=new TreeSet<String>();
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  ConceptComparator cc=new ConceptComparator();
  SortedSet<Description> desired=new TreeSet<Description>(cc);
  for (  String str : desiredString) {
    Description tmp=KBParser.parseConcept(str);
    ConceptTransformation.cleanConcept(tmp);
    desired.add(tmp);
    System.out.println(""String_Node_Str"" + tmp);
  }
  long startTime=System.nanoTime();
  Set<Description> refinements=operator.refine(input);
  long runTime=System.nanoTime() - startTime;
  System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(runTime,true,true) + ""String_Node_Str"");
  startTime=System.nanoTime();
  refinements=operator.refine(input);
  runTime=System.nanoTime() - startTime;
  System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(runTime,true,true) + ""String_Node_Str"");
  for (  Description refinement : refinements) {
    boolean ok=desired.contains(refinement);
    System.out.println(ok + ""String_Node_Str"" + refinement);
  }
}","/** 
 * Implementation of test case created by Christoph Haase for  new operator.
 * @throws ParseException Thrown if concept syntax does not correspondto current KB syntax.
 * @throws ComponentInitException 
 */
@Test public void refinementTest() throws ParseException, ComponentInitException {
  ReasonerComponent rs=TestOntologies.getTestOntology(TestOntology.SIMPLE);
  Description input=KBParser.parseConcept(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + input);
  ELDown2 operator=new ELDown2(rs);
  Set<String> desiredString=new TreeSet<String>();
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  ConceptComparator cc=new ConceptComparator();
  SortedSet<Description> desired=new TreeSet<Description>(cc);
  for (  String str : desiredString) {
    Description tmp=KBParser.parseConcept(str);
    ConceptTransformation.cleanConcept(tmp);
    desired.add(tmp);
    System.out.println(""String_Node_Str"" + tmp);
  }
  long startTime=System.nanoTime();
  Set<Description> refinements=operator.refine(input);
  long runTime=System.nanoTime() - startTime;
  System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(runTime,true,true) + ""String_Node_Str"");
  startTime=System.nanoTime();
  refinements=operator.refine(input);
  runTime=System.nanoTime() - startTime;
  System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(runTime,true,true) + ""String_Node_Str"");
  for (  Description refinement : refinements) {
    boolean ok=desired.contains(refinement);
    System.out.println(ok + ""String_Node_Str"" + refinement);
  }
}"
10054,"private void labelSimulationUpdate(){
  Set<ELDescriptionNode> update=new HashSet<ELDescriptionNode>();
  Set<ELDescriptionNode> tmp=tree.getNodesOnLevel(level);
  for (  ELDescriptionNode w : tmp) {
    if (w != this) {
      if (!inSC1.contains(w) && tree.checkSC1(this,w)) {
        tree.extendSimulationSC1(this,w);
        if (inSC2.contains(w)) {
          tree.extendSimulationSC12(this,w);
        }
        update.add(w.getParent());
      }
      if (outSC1.contains(w) && !tree.checkSC1(w,this)) {
        tree.shrinkSimulationSC1(w,this);
        if (outSC2.contains(w)) {
          tree.shrinkSimulationSC12(w,this);
        }
        if (!update.contains(w.getParent())) {
          update.add(w.getParent());
        }
      }
    }
  }
  if (parent != null) {
    update.add(parent);
  }
  tree.updateSimulation(update);
}","private void labelSimulationUpdate(){
  Set<ELDescriptionNode> update=new HashSet<ELDescriptionNode>();
  Set<ELDescriptionNode> tmp=tree.getNodesOnLevel(level);
  for (  ELDescriptionNode w : tmp) {
    if (w != this) {
      if (!inSC1.contains(w) && tree.checkSC1(this,w)) {
        tree.extendSimulationSC1(this,w);
        if (inSC2.contains(w)) {
          tree.extendSimulationSC12(this,w);
        }
        update.add(w.getParent());
      }
      if (outSC1.contains(w) && !tree.checkSC1(w,this)) {
        tree.shrinkSimulationSC1(w,this);
        if (outSC2.contains(w)) {
          tree.shrinkSimulationSC12(w,this);
        }
        update.add(w.getParent());
      }
    }
  }
  if (parent != null) {
    update.add(parent);
  }
  tree.updateSimulation(update);
}"
10055,"private String toString(Set<ELDescriptionNode> nodes,Map<ELDescriptionNode,String> nodeNames){
  String str=""String_Node_Str"";
  for (  ELDescriptionNode node : nodes) {
    str+=nodeNames.get(node) + ""String_Node_Str"";
  }
  if (str.length() > 0) {
    str=str.substring(0,str.length() - 1);
  }
  return str;
}","/** 
 * A convenience method (for debugging purposes) to get a comma separated list of nodes, where the nodes are given names (to make them readable).
 * @param nodes The node objects.
 * @param nodeNames A mapping to node names.
 * @return A comma separated list of the node names.
 */
public static String toString(Set<ELDescriptionNode> nodes,Map<ELDescriptionNode,String> nodeNames){
  String str=""String_Node_Str"";
  for (  ELDescriptionNode node : nodes) {
    str+=nodeNames.get(node) + ""String_Node_Str"";
  }
  if (str.length() > 0) {
    str=str.substring(0,str.length() - 1);
  }
  return str;
}"
10056,"private boolean checkSC2Edge(ELDescriptionEdge superEdge,List<ELDescriptionEdge> edges){
  ObjectProperty superOP=superEdge.getLabel();
  ELDescriptionNode node1=superEdge.getTree();
  for (  ELDescriptionEdge edge : edges) {
    ObjectProperty op=edge.getLabel();
    if (roleHierarchy.isSubpropertyOf(op,superOP)) {
      ELDescriptionNode node2=edge.getTree();
      if (node1.in.contains(node2) || node2.in.contains(node1)) {
        return true;
      }
    }
  }
  return false;
}","private boolean checkSC2Edge(ELDescriptionEdge superEdge,List<ELDescriptionEdge> edges){
  ObjectProperty superOP=superEdge.getLabel();
  ELDescriptionNode superNode=superEdge.getTree();
  for (  ELDescriptionEdge edge : edges) {
    ObjectProperty op=edge.getLabel();
    if (roleHierarchy.isSubpropertyOf(op,superOP)) {
      ELDescriptionNode node=edge.getTree();
      if (node.in.contains(superNode)) {
        return true;
      }
    }
  }
  return false;
}"
10057,"@Override public boolean isValidValue(Double value){
  if (value >= lowerLimit && value <= upperLimit)   return true;
 else   return false;
}","@Override public boolean isValidValue(Double value){
  double tolerance=0.0001;
  return ((value >= lowerLimit - tolerance) && (value <= upperLimit + tolerance));
}"
10058,"/** 
 * K: r2 \sqsubset r3; A2 \sqsubset A3 v1: {} /      \ r1        r1 /          \ v2:{A2,A3}    v3:{} /      |        | r1      r2        r3 /        |        | v4:{A1} v5:{A1,A2} v6:{A3} v1: - v2: in=inSC1=inSC2={v3}, out=outSC1=outSC2={} v3: in=inSC1=inSC2={}, out=outSC1=outSC2={v2} v4: out=outSC1={v5}, outSC2=inSC2={v5,v6}, in=inSC1={} v5: out=outSC1={}, in=inSC1=inSC2=outSC2={v4,v6} v6: out=outSC1={v5}, outSC2=inSC2={v4,v5}, in=inSC1={}
 */
@Test public void test4(){
  ReasonerComponent rs=TestOntologies.getTestOntology(TestOntology.SIMPLE2);
  ELDescriptionTree tree=new ELDescriptionTree(rs);
  Map<ELDescriptionNode,String> nodeNames=new LinkedHashMap<ELDescriptionNode,String>();
  ObjectProperty r1=new ObjectProperty(uri(""String_Node_Str""));
  ObjectProperty r2=new ObjectProperty(uri(""String_Node_Str""));
  ObjectProperty r3=new ObjectProperty(uri(""String_Node_Str""));
  NamedClass a1=new NamedClass(uri(""String_Node_Str""));
  NamedClass a2=new NamedClass(uri(""String_Node_Str""));
  NamedClass a3=new NamedClass(uri(""String_Node_Str""));
  ELDescriptionNode v1=new ELDescriptionNode(tree);
  nodeNames.put(v1,""String_Node_Str"");
  ELDescriptionNode v2=new ELDescriptionNode(v1,r1,a2,a3);
  nodeNames.put(v2,""String_Node_Str"");
  log(""String_Node_Str"",tree,nodeNames);
  ELDescriptionNode v3=new ELDescriptionNode(v1,r1);
  nodeNames.put(v3,""String_Node_Str"");
  log(""String_Node_Str"",tree,nodeNames);
  ELDescriptionNode v4=new ELDescriptionNode(v2,r1,a1);
  nodeNames.put(v4,""String_Node_Str"");
  log(""String_Node_Str"",tree,nodeNames);
  ELDescriptionNode v5=new ELDescriptionNode(v2,r3);
  nodeNames.put(v5,""String_Node_Str"");
  log(""String_Node_Str"",tree,nodeNames);
  v5.extendLabel(a1);
  log(""String_Node_Str"",tree,nodeNames);
  v5.extendLabel(a2);
  log(""String_Node_Str"",tree,nodeNames);
  v2.refineEdge(1,r2);
  log(""String_Node_Str"",tree,nodeNames);
  ELDescriptionNode v6=new ELDescriptionNode(v3,r3);
  nodeNames.put(v6,""String_Node_Str"");
  log(""String_Node_Str"",tree,nodeNames);
  v6.extendLabel(a3);
  log(""String_Node_Str"",tree,nodeNames);
  assertEmpty(v1);
  assertAllIn(v2,v3);
  assertAllOut(v2);
  assertAllIn(v3);
  assertAllOut(v2);
  assertSC2(v4,v5,v6);
  assertInSC1(v4);
  assertIn(v4);
  assertOut(v4,v5);
  assertOutSC1(v4,v5);
  assertAllIn(v5,v4,v6);
  assertOutSC2(v5,v4,v6);
  assertOutSC1(v5);
  assertOut(v5);
  assertSC2(v6,v4,v5);
  assertInSC1(v6);
  assertIn(v6);
  assertOut(v6,v5);
  assertOutSC1(v6,v5);
}","/** 
 * K: r2 \sqsubset r3; A2 \sqsubset A3 v1: {} /      \ r1        r1 /          \ v2:{A2,A3}    v3:{} /      |        | r1      r2        r3 /        |        | v4:{A1} v5:{A1,A2} v6:{A3} v1: - v2: in=inSC1=inSC2={v3}, out=outSC1=outSC2={} v3: in=inSC1=inSC2={}, out=outSC1=outSC2={v2} v4: out=outSC1={v5}, outSC2=inSC2={v5,v6}, in=inSC1={} v5: out=outSC1={}, in=inSC1=inSC2=outSC2={v4,v6} v6: out=outSC1={v5}, outSC2=inSC2={v4,v5}, in=inSC1={}
 */
@Test public void test4(){
  ReasonerComponent rs=TestOntologies.getTestOntology(TestOntology.SIMPLE2);
  ELDescriptionTree tree=new ELDescriptionTree(rs);
  Map<ELDescriptionNode,String> nodeNames=new LinkedHashMap<ELDescriptionNode,String>();
  ObjectProperty r1=new ObjectProperty(uri(""String_Node_Str""));
  ObjectProperty r2=new ObjectProperty(uri(""String_Node_Str""));
  ObjectProperty r3=new ObjectProperty(uri(""String_Node_Str""));
  NamedClass a1=new NamedClass(uri(""String_Node_Str""));
  NamedClass a2=new NamedClass(uri(""String_Node_Str""));
  NamedClass a3=new NamedClass(uri(""String_Node_Str""));
  ELDescriptionNode v1=new ELDescriptionNode(tree);
  nodeNames.put(v1,""String_Node_Str"");
  ELDescriptionNode v2=new ELDescriptionNode(v1,r1,a2,a3);
  nodeNames.put(v2,""String_Node_Str"");
  ELDescriptionNode v3=new ELDescriptionNode(v1,r1);
  nodeNames.put(v3,""String_Node_Str"");
  ELDescriptionNode v4=new ELDescriptionNode(v2,r1,a1);
  nodeNames.put(v4,""String_Node_Str"");
  ELDescriptionNode v5=new ELDescriptionNode(v2,r3);
  nodeNames.put(v5,""String_Node_Str"");
  v5.extendLabel(a1);
  v5.extendLabel(a2);
  v2.refineEdge(1,r2);
  ELDescriptionNode v6=new ELDescriptionNode(v3,r3);
  nodeNames.put(v6,""String_Node_Str"");
  v6.extendLabel(a3);
  assertEmpty(v1);
  assertAllIn(v2,v3);
  assertAllOut(v2);
  assertAllIn(v3);
  assertAllOut(v2);
  assertSC2(v4,v5,v6);
  assertInSC1(v4);
  assertIn(v4);
  assertOut(v4,v5);
  assertOutSC1(v4,v5);
  assertAllIn(v5,v4,v6);
  assertOutSC2(v5,v4,v6);
  assertOutSC1(v5);
  assertOut(v5);
  assertSC2(v6,v4,v5);
  assertInSC1(v6);
  assertIn(v6);
  assertOut(v6,v5);
  assertOutSC1(v6,v5);
}"
10059,"/** 
 * v_1 /     \ r_2    r_1 /         \ v_2         v_3 /  |        |  \ r_1 r_1      r_1 r_2 /    |        |    \ v_4   v_5      v_6   v_7 / |   |  \      |     | r_2 r_1 r_2 r_2  r_1   r_2 /   |   |    |    |     | v_8  v_9 v_10 v_11 v_12  v_13 A_1  A_2  A_2 A_1  A_2   A_2  inSC1: (v_8,{v_9,..,v_13}), (v_9,{v_10,v_12,v_13}),... (Pattern wiederholt sich dann fuer die A_1 bzw A_2 Blaetter), (v_4,{v_5,v_6,v_7}),... (selbiges hier) (v_2,{v_3}), (v_3,{v_2}) outSC1: (v_8,{v_11}), v_9,{v_8, v_10,...v_13}),... Pattern wiederholt sich fuer restliche Knoten gilt inSC1=outSC1 inSC2: {v_8,...,v_13}2, (v_4,{v_5, v_6, v_7}), (v_5,{v_7}), (v_6,{v_7}) (v_2,{v_3}) outSC2: {v_8,...,v_13}2, (v_5,{v_4}), (v_6,{v_4}), (v_7,{v_5, v_6}), (v_3,{v_2}) Baum ist nicht minimal. 
 */
@Test public void test5(){
  ReasonerComponent rs=TestOntologies.getTestOntology(TestOntology.SIMPLE3);
  ELDescriptionTree tree=new ELDescriptionTree(rs);
  Map<ELDescriptionNode,String> nodeNames=new LinkedHashMap<ELDescriptionNode,String>();
}","/** 
 * v_1 /     \ r_2    r_1 /         \ v_2         v_3 /  |        |  \ r_1 r_1      r_1 r_2 /    |        |    \ v_4   v_5      v_6   v_7 / |   |  \      |     | r_2 r_1 r_2 r_2  r_1   r_2 /   |   |    |    |     | v_8  v_9 v_10 v_11 v_12  v_13 A_1  A_2  A_2 A_1  A_2   A_2  Knowledge base: A_1\sqsubseteq A_2 r_1\sqsubseteq r_2    inSC1: (v_8,{v_9,..,v_13}), (v_9,{v_10,v_12,v_13}),... (Pattern wiederholt sich dann fuer die A_1 bzw A_2 Blaetter),  (v_4,{v_5,v_6,v_7}),... (selbiges hier) (v_2,{v_3}), (v_3,{v_2}) outSC1: (v_8,{v_11}), v_9,{v_8, v_10,...v_13}),... Pattern wiederholt sich fuer restliche Knoten gilt inSC1=outSC1 inSC2: {v_8,...,v_13}2, (v_4,{v_5, v_6, v_7}), (v_5,{v_7}), (v_6,{v_7}) (v_2,{v_3}) outSC2: {v_8,...,v_13}2, (v_5,{v_4}), (v_6,{v_4}), (v_7,{v_5, v_6}), (v_3,{v_2}) Baum ist nicht minimal. 
 */
@Test public void test5(){
  ReasonerComponent rs=TestOntologies.getTestOntology(TestOntology.SIMPLE3);
  ELDescriptionTree tree=new ELDescriptionTree(rs);
  Map<ELDescriptionNode,String> nodeNames=new LinkedHashMap<ELDescriptionNode,String>();
  ObjectProperty r1=new ObjectProperty(uri(""String_Node_Str""));
  ObjectProperty r2=new ObjectProperty(uri(""String_Node_Str""));
  NamedClass a1=new NamedClass(uri(""String_Node_Str""));
  NamedClass a2=new NamedClass(uri(""String_Node_Str""));
  ELDescriptionNode v1=new ELDescriptionNode(tree);
  nodeNames.put(v1,""String_Node_Str"");
  ELDescriptionNode v2=new ELDescriptionNode(v1,r2);
  nodeNames.put(v2,""String_Node_Str"");
  ELDescriptionNode v3=new ELDescriptionNode(v1,r1);
  nodeNames.put(v3,""String_Node_Str"");
  ELDescriptionNode v4=new ELDescriptionNode(v2,r1);
  nodeNames.put(v4,""String_Node_Str"");
  ELDescriptionNode v5=new ELDescriptionNode(v2,r1);
  nodeNames.put(v5,""String_Node_Str"");
  ELDescriptionNode v6=new ELDescriptionNode(v3,r1);
  nodeNames.put(v6,""String_Node_Str"");
  ELDescriptionNode v7=new ELDescriptionNode(v3,r2);
  nodeNames.put(v7,""String_Node_Str"");
  ELDescriptionNode v8=new ELDescriptionNode(v4,r2,a1);
  nodeNames.put(v8,""String_Node_Str"");
  ELDescriptionNode v9=new ELDescriptionNode(v4,r1,a2);
  nodeNames.put(v9,""String_Node_Str"");
  ELDescriptionNode v10=new ELDescriptionNode(v5,r2,a2);
  nodeNames.put(v10,""String_Node_Str"");
  ELDescriptionNode v11=new ELDescriptionNode(v5,r2,a1);
  nodeNames.put(v11,""String_Node_Str"");
  ELDescriptionNode v12=new ELDescriptionNode(v6,r1,a2);
  nodeNames.put(v12,""String_Node_Str"");
  ELDescriptionNode v13=new ELDescriptionNode(v7,r2,a2);
  nodeNames.put(v13,""String_Node_Str"");
  assertInSC1(v1);
  assertInSC2(v1);
  assertIn(v1);
  assertOutSC1(v1);
  assertOutSC2(v1);
  assertOut(v1);
  assertInSC1(v2,v3);
  assertInSC2(v2,v3);
  assertIn(v2,v3);
  assertOutSC1(v2,v3);
  assertOutSC2(v2);
  assertOut(v2);
  assertInSC1(v3,v2);
  assertInSC2(v3);
  assertIn(v3);
  assertOutSC1(v3,v2);
  assertOutSC2(v3,v2);
  assertOut(v3,v2);
  assertInSC1(v4,v6,v5,v7);
  assertInSC2(v4,v6,v5,v7);
  assertIn(v4,v6,v5,v7);
  assertOutSC1(v4,v6,v5,v7);
  assertOutSC2(v4);
  assertOut(v4);
  assertInSC1(v5,v4,v6,v7);
  assertInSC2(v5,v7);
  assertIn(v5,v7);
  assertOutSC1(v5,v4,v6,v7);
  assertOutSC2(v5,v4);
  assertOut(v5,v4);
  assertInSC1(v6,v4,v5,v7);
  assertInSC2(v6,v7);
  assertIn(v6,v7);
  assertOutSC1(v6,v4,v5,v7);
  assertOutSC2(v6,v4);
  assertOut(v6,v4);
  assertInSC1(v7,v4,v6,v5);
  assertInSC2(v7);
  assertIn(v7);
  assertOutSC1(v7,v4,v6,v5);
  assertOutSC2(v7,v4,v6,v5);
  assertOut(v7,v4,v6,v5);
  assertInSC1(v8,v10,v13,v11,v9,v12);
  assertInSC2(v8,v10,v13,v11,v9,v12);
  assertIn(v8,v10,v13,v11,v9,v12);
  assertOutSC1(v8,v11);
  assertOutSC2(v8,v10,v13,v11,v9,v12);
  assertOut(v8,v11);
  assertInSC1(v9,v10,v13,v12);
  assertInSC2(v9,v10,v13,v11,v12,v8);
  assertIn(v9,v10,v13,v12);
  assertOutSC1(v9,v10,v13,v11,v12,v8);
  assertOutSC2(v9,v10,v13,v11,v12,v8);
  assertOut(v9,v10,v13,v11,v12,v8);
  assertInSC1(v10,v13,v9,v12);
  assertInSC2(v10,v13,v11,v9,v12,v8);
  assertIn(v10,v13,v9,v12);
  assertOutSC1(v10,v13,v11,v9,v12,v8);
  assertOutSC2(v10,v13,v11,v9,v12,v8);
  assertOut(v10,v13,v11,v9,v12,v8);
  assertInSC1(v11,v10,v13,v9,v12,v8);
  assertInSC2(v11,v10,v13,v9,v12,v8);
  assertIn(v11,v10,v13,v9,v12,v8);
  assertOutSC1(v11,v8);
  assertOutSC2(v11,v10,v13,v9,v12,v8);
  assertOut(v11,v8);
  assertInSC1(v12,v10,v13,v9);
  assertInSC2(v12,v10,v13,v11,v9,v8);
  assertIn(v12,v10,v13,v9);
  assertOutSC1(v12,v10,v13,v11,v9,v8);
  assertOutSC2(v12,v10,v13,v11,v9,v8);
  assertOut(v12,v10,v13,v11,v9,v8);
  assertInSC1(v13,v10,v9,v12);
  assertInSC2(v13,v10,v11,v9,v8,v12);
  assertIn(v13,v10,v9,v12);
  assertOutSC1(v13,v10,v11,v9,v8,v12);
  assertOutSC2(v13,v10,v11,v9,v8,v12);
  assertOut(v13,v10,v11,v9,v8,v12);
}"
10060,"public void run(){
  System.out.println(""String_Node_Str"");
  model.setSuggestList(result);
  Iterator<EvaluatedDescription> it=result.iterator();
  int i=0;
  while (it.hasNext()) {
    Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
    EvaluatedDescription eval=it.next();
    while (ont.hasNext()) {
      String onto=ont.next().getURI().toString();
      if (eval.getDescription().toString().contains(onto)) {
        if (model.isConsistent(eval)) {
          dm.add(i,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
          i++;
          break;
        }
 else {
          dm.add(i,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
          i++;
          break;
        }
      }
    }
  }
  System.out.println(""String_Node_Str"");
  view.getSuggestClassPanel().setSuggestList(dm);
}","public void run(){
  System.out.println(""String_Node_Str"");
  model.setSuggestList(result);
  dm.clear();
  Iterator<EvaluatedDescription> it=result.iterator();
  int i=0;
  while (it.hasNext()) {
    Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
    EvaluatedDescription eval=it.next();
    while (ont.hasNext()) {
      String onto=ont.next().getURI().toString();
      if (eval.getDescription().toString().contains(onto)) {
        if (model.isConsistent(eval)) {
          dm.add(i,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
          i++;
          break;
        }
 else {
          dm.add(i,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
          i++;
          break;
        }
      }
    }
  }
  System.out.println(""String_Node_Str"");
  view.getSuggestClassPanel().setSuggestList(dm);
}"
10061,"private void updateList(final List<EvaluatedDescription> result){
  logger.debug(""String_Node_Str"" + result);
  Runnable doUpdateList=new Runnable(){
    public void run(){
      System.out.println(""String_Node_Str"");
      model.setSuggestList(result);
      Iterator<EvaluatedDescription> it=result.iterator();
      int i=0;
      while (it.hasNext()) {
        Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
        EvaluatedDescription eval=it.next();
        while (ont.hasNext()) {
          String onto=ont.next().getURI().toString();
          if (eval.getDescription().toString().contains(onto)) {
            if (model.isConsistent(eval)) {
              dm.add(i,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
              i++;
              break;
            }
 else {
              dm.add(i,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
              i++;
              break;
            }
          }
        }
      }
      System.out.println(""String_Node_Str"");
      view.getSuggestClassPanel().setSuggestList(dm);
    }
  }
;
  SwingUtilities.invokeLater(doUpdateList);
}","private void updateList(final List<EvaluatedDescription> result){
  logger.debug(""String_Node_Str"" + result);
  Runnable doUpdateList=new Runnable(){
    public void run(){
      System.out.println(""String_Node_Str"");
      model.setSuggestList(result);
      dm.clear();
      Iterator<EvaluatedDescription> it=result.iterator();
      int i=0;
      while (it.hasNext()) {
        Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
        EvaluatedDescription eval=it.next();
        while (ont.hasNext()) {
          String onto=ont.next().getURI().toString();
          if (eval.getDescription().toString().contains(onto)) {
            if (model.isConsistent(eval)) {
              dm.add(i,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
              i++;
              break;
            }
 else {
              dm.add(i,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
              i++;
              break;
            }
          }
        }
      }
      System.out.println(""String_Node_Str"");
      view.getSuggestClassPanel().setSuggestList(dm);
    }
  }
;
  SwingUtilities.invokeLater(doUpdateList);
}"
10062,"public void run(){
  model.setSuggestList(result);
  Iterator<EvaluatedDescription> it=result.iterator();
  while (it.hasNext()) {
    Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
    EvaluatedDescription eval=it.next();
    while (ont.hasNext()) {
      String onto=ont.next().getURI().toString();
      System.out.println(eval.getDescription());
      if (eval.getDescription().toString().contains(onto)) {
        if (model.isConsistent(eval)) {
          dm.add(0,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto + ""String_Node_Str"",null)));
        }
 else {
          dm.add(0,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto + ""String_Node_Str"",null)));
        }
      }
    }
  }
  view.getSuggestClassPanel().getSuggestList().setModel(dm);
}","public void run(){
  model.setSuggestList(result);
  Iterator<EvaluatedDescription> it=result.iterator();
  while (it.hasNext()) {
    Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
    EvaluatedDescription eval=it.next();
    while (ont.hasNext()) {
      String onto=ont.next().getURI().toString();
      if (eval.getDescription().toString().contains(onto)) {
        if (model.isConsistent(eval)) {
          dm.add(0,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
          break;
        }
 else {
          dm.add(0,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
          break;
        }
      }
    }
  }
  view.getSuggestClassPanel().getSuggestList().setModel(dm);
}"
10063,"/** 
 * Choses the right EvaluatedDescription object after a concept is chosen in the list.
 * @param m MouseEvent
 */
public void mouseClicked(MouseEvent m){
  EvaluatedDescription eDescription=null;
  if (view.getSuggestClassPanel().getSuggestList().getSelectedValue() != null) {
    SuggestListItem item=(SuggestListItem)view.getSuggestClassPanel().getSuggestList().getSelectedValue();
    String desc=item.getValue();
    if (model.getEvaluatedDescriptionList() != null) {
      for (Iterator<EvaluatedDescription> i=model.getEvaluatedDescriptionList().iterator(); i.hasNext(); ) {
        eDescription=i.next();
        if (desc.equals(eDescription.getDescription().toManchesterSyntaxString(editorKit.getModelManager().getActiveOntology().getURI() + ""String_Node_Str"",null))) {
          evaluatedDescription=eDescription;
          break;
        }
      }
    }
    if (m.getClickCount() == 2) {
      view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
    }
  }
}","/** 
 * Choses the right EvaluatedDescription object after a concept is chosen in the list.
 * @param m MouseEvent
 */
public void mouseClicked(MouseEvent m){
  EvaluatedDescription eDescription=null;
  if (view.getSuggestClassPanel().getSuggestList().getSelectedValue() != null) {
    SuggestListItem item=(SuggestListItem)view.getSuggestClassPanel().getSuggestList().getSelectedValue();
    String desc=item.getValue();
    if (model.getEvaluatedDescriptionList() != null) {
      for (Iterator<EvaluatedDescription> i=model.getEvaluatedDescriptionList().iterator(); i.hasNext(); ) {
        eDescription=i.next();
        if (desc.equals(eDescription.getDescription().toManchesterSyntaxString(editorKit.getModelManager().getActiveOntology().getURI().toString(),null))) {
          evaluatedDescription=eDescription;
          break;
        }
      }
    }
    if (m.getClickCount() == 2) {
      view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
    }
  }
}"
10064,"private void updateList(final List<EvaluatedDescription> result){
  Runnable doUpdateList=new Runnable(){
    DefaultListModel dm=new DefaultListModel();
    public void run(){
      model.setSuggestList(result);
      Iterator<EvaluatedDescription> it=result.iterator();
      while (it.hasNext()) {
        Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
        EvaluatedDescription eval=it.next();
        while (ont.hasNext()) {
          String onto=ont.next().getURI().toString();
          System.out.println(eval.getDescription());
          if (eval.getDescription().toString().contains(onto)) {
            if (model.isConsistent(eval)) {
              dm.add(0,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto + ""String_Node_Str"",null)));
            }
 else {
              dm.add(0,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto + ""String_Node_Str"",null)));
            }
          }
        }
      }
      view.getSuggestClassPanel().getSuggestList().setModel(dm);
    }
  }
;
  SwingUtilities.invokeLater(doUpdateList);
}","private void updateList(final List<EvaluatedDescription> result){
  Runnable doUpdateList=new Runnable(){
    DefaultListModel dm=new DefaultListModel();
    public void run(){
      model.setSuggestList(result);
      Iterator<EvaluatedDescription> it=result.iterator();
      while (it.hasNext()) {
        Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
        EvaluatedDescription eval=it.next();
        while (ont.hasNext()) {
          String onto=ont.next().getURI().toString();
          if (eval.getDescription().toString().contains(onto)) {
            if (model.isConsistent(eval)) {
              dm.add(0,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
              break;
            }
 else {
              dm.add(0,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
              break;
            }
          }
        }
      }
      view.getSuggestClassPanel().getSuggestList().setModel(dm);
    }
  }
;
  SwingUtilities.invokeLater(doUpdateList);
}"
10065,"public void run(){
  model.setSuggestList(result);
  Iterator<EvaluatedDescription> it=result.iterator();
  while (it.hasNext()) {
    Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
    EvaluatedDescription eval=it.next();
    while (ont.hasNext()) {
      String onto=ont.next().getURI().toString();
      if (eval.getDescription().toString().contains(onto)) {
        if (model.isConsistent(eval)) {
          dm.add(0,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
          break;
        }
 else {
          dm.add(0,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
          break;
        }
      }
    }
  }
  view.getSuggestClassPanel().getSuggestList().setModel(dm);
}","public void run(){
  System.out.println(""String_Node_Str"");
  model.setSuggestList(result);
  Iterator<EvaluatedDescription> it=result.iterator();
  int i=0;
  while (it.hasNext()) {
    Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
    EvaluatedDescription eval=it.next();
    while (ont.hasNext()) {
      String onto=ont.next().getURI().toString();
      if (eval.getDescription().toString().contains(onto)) {
        if (model.isConsistent(eval)) {
          dm.add(i,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
          i++;
          break;
        }
 else {
          dm.add(i,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
          i++;
          break;
        }
      }
    }
  }
  System.out.println(""String_Node_Str"");
  view.getSuggestClassPanel().setSuggestList(dm);
}"
10066,"@Override public void done(){
  timer.cancel();
  List<EvaluatedDescription> result=null;
  try {
    result=get();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  ExecutionException e) {
    e.printStackTrace();
  }
  view.getRunButton().setEnabled(true);
  updateList(result);
}","@Override public void done(){
  timer.cancel();
  List<EvaluatedDescription> result=null;
  try {
    result=get();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  ExecutionException e) {
    e.printStackTrace();
  }
  view.getRunButton().setEnabled(true);
  System.out.println(""String_Node_Str"");
  updateList(result);
}"
10067,"/** 
 * When a Button is pressed this method select the right.
 * @param z ActionEvent
 */
public void actionPerformed(ActionEvent z){
  if (z.getActionCommand().equals(""String_Node_Str"" + id)) {
    if (model.getAlreadyLearned()) {
      model.unsetListModel();
    }
    model.setKnowledgeSource();
    model.setReasoner();
    model.setPositiveAndNegativeExamples();
    model.setLearningProblem();
    model.setLearningAlgorithm();
    view.getRunButton().setEnabled(false);
    view.renderErrorMessage(""String_Node_Str"");
    view.getPosAndNegSelectPanel().setCheckBoxesEnable(false);
    retriever=new SuggestionRetriever();
    retriever.execute();
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (evaluatedDescription != null) {
      model.changeDLLearnerDescriptionsToOWLDescriptions(evaluatedDescription.getDescription());
    }
 else {
      model.changeDLLearnerDescriptionsToOWLDescriptions((Description)view.getSuggestClassPanel().getSuggestList().getSelectedValue());
    }
    String message=""String_Node_Str"";
    view.renderErrorMessage(message);
    view.updateWindow();
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (!toggled) {
      toggled=true;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
 else {
      toggled=false;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
  }
}","/** 
 * When a Button is pressed this method select the right.
 * @param z ActionEvent
 */
public void actionPerformed(ActionEvent z){
  if (z.getActionCommand().equals(id)) {
    if (model.getAlreadyLearned()) {
      model.unsetListModel();
    }
    model.setKnowledgeSource();
    model.setReasoner();
    model.setPositiveAndNegativeExamples();
    model.setLearningProblem();
    model.setLearningAlgorithm();
    view.getRunButton().setEnabled(false);
    view.renderErrorMessage(""String_Node_Str"");
    view.getPosAndNegSelectPanel().setCheckBoxesEnable(false);
    retriever=new SuggestionRetriever();
    retriever.execute();
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (evaluatedDescription != null) {
      model.changeDLLearnerDescriptionsToOWLDescriptions(evaluatedDescription.getDescription());
    }
 else {
      model.changeDLLearnerDescriptionsToOWLDescriptions((Description)view.getSuggestClassPanel().getSuggestList().getSelectedValue());
    }
    String message=""String_Node_Str"";
    view.renderErrorMessage(message);
    view.updateWindow();
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (!toggled) {
      toggled=true;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
 else {
      toggled=false;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
  }
}"
10068,"@SuppressWarnings(""String_Node_Str"") @Override protected List<EvaluatedDescription> doInBackground() throws Exception {
  la=model.getLearningAlgorithm();
  timer=new Timer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      if (la != null) {
        publish(la.getCurrentlyBestEvaluatedDescriptions(view.getPosAndNegSelectPanel().getOptionPanel().getNrOfConcepts(),view.getPosAndNegSelectPanel().getOptionPanel().getMinAccuracy(),true));
      }
    }
  }
,0,100);
  dlLearner=new Thread(new Runnable(){
    @Override public void run(){
      model.run();
    }
  }
);
  dlLearner.start();
  try {
    dlLearner.join();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  List<EvaluatedDescription> result=la.getCurrentlyBestEvaluatedDescriptions(view.getPosAndNegSelectPanel().getOptionPanel().getNrOfConcepts(),view.getPosAndNegSelectPanel().getOptionPanel().getMinAccuracy(),true);
  return result;
}","@SuppressWarnings(""String_Node_Str"") @Override protected List<EvaluatedDescription> doInBackground() throws Exception {
  la=model.getLearningAlgorithm();
  timer=new Timer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      System.out.println(""String_Node_Str"");
      if (la != null) {
        publish(la.getCurrentlyBestEvaluatedDescriptions(view.getPosAndNegSelectPanel().getOptionPanel().getNrOfConcepts(),view.getPosAndNegSelectPanel().getOptionPanel().getMinAccuracy(),true));
      }
    }
  }
,0,1000);
  dlLearner=new Thread(new Runnable(){
    @Override public void run(){
      try {
        model.run();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  dlLearner.start();
  try {
    dlLearner.join();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  List<EvaluatedDescription> result=la.getCurrentlyBestEvaluatedDescriptions(view.getPosAndNegSelectPanel().getOptionPanel().getNrOfConcepts(),view.getPosAndNegSelectPanel().getOptionPanel().getMinAccuracy(),true);
  return result;
}"
10069,"private void updateList(final List<EvaluatedDescription> result){
  Runnable doUpdateList=new Runnable(){
    DefaultListModel dm=new DefaultListModel();
    public void run(){
      model.setSuggestList(result);
      Iterator<EvaluatedDescription> it=result.iterator();
      while (it.hasNext()) {
        Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
        EvaluatedDescription eval=it.next();
        while (ont.hasNext()) {
          String onto=ont.next().getURI().toString();
          if (eval.getDescription().toString().contains(onto)) {
            if (model.isConsistent(eval)) {
              dm.add(0,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
              break;
            }
 else {
              dm.add(0,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
              break;
            }
          }
        }
      }
      view.getSuggestClassPanel().getSuggestList().setModel(dm);
    }
  }
;
  SwingUtilities.invokeLater(doUpdateList);
}","private void updateList(final List<EvaluatedDescription> result){
  Runnable doUpdateList=new Runnable(){
    public void run(){
      System.out.println(""String_Node_Str"");
      model.setSuggestList(result);
      Iterator<EvaluatedDescription> it=result.iterator();
      int i=0;
      while (it.hasNext()) {
        Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
        EvaluatedDescription eval=it.next();
        while (ont.hasNext()) {
          String onto=ont.next().getURI().toString();
          if (eval.getDescription().toString().contains(onto)) {
            if (model.isConsistent(eval)) {
              dm.add(i,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
              i++;
              break;
            }
 else {
              dm.add(i,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
              i++;
              break;
            }
          }
        }
      }
      System.out.println(""String_Node_Str"");
      view.getSuggestClassPanel().setSuggestList(dm);
    }
  }
;
  SwingUtilities.invokeLater(doUpdateList);
}"
10070,"/** 
 * This is the constructor for DL-Learner model.
 * @param editorKit Editor Kit to get the currently loaded Ontology
 * @param h OWLFrame(OWLClass) to get the base uri of the Ontology
 * @param id String if it learns a subclass or a superclass.
 * @param view current view of the DL-Learner tab
 */
public DLLearnerModel(OWLEditorKit editorKit,OWLFrame<OWLClass> h,String id,OWLClassDescriptionEditorWithDLLearnerTab.DLLearnerView view){
  editor=editorKit;
  current=h;
  this.id=id;
  this.view=view;
  owlDescription=new HashSet<OWLDescription>();
  posListModel=new DefaultListModel();
  negListModel=new DefaultListModel();
  ComponentManager.setComponentClasses(componenten);
  individualVector=new Vector<IndividualObject>();
  cm=ComponentManager.getInstance();
  ds=new HashSet<OWLDescription>();
  suggestModel=new DefaultListModel();
  detailPane=new JXTaskPane();
  detailPane.setTitle(""String_Node_Str"");
}","/** 
 * This is the constructor for DL-Learner model.
 * @param editorKit Editor Kit to get the currently loaded Ontology
 * @param h OWLFrame(OWLClass) to get the base uri of the Ontology
 * @param id String if it learns a subclass or a superclass.
 * @param view current view of the DL-Learner tab
 */
public DLLearnerModel(OWLEditorKit editorKit,OWLFrame<OWLClass> h,String id,OWLClassDescriptionEditorWithDLLearnerTab.DLLearnerView view){
  editor=editorKit;
  current=h;
  this.id=id;
  this.view=view;
  owlDescription=new HashSet<OWLDescription>();
  posListModel=new DefaultListModel();
  negListModel=new DefaultListModel();
  ComponentManager.setComponentClasses(componenten);
  individualVector=new Vector<IndividualObject>();
  cm=ComponentManager.getInstance();
  ds=new HashSet<OWLDescription>();
  suggestModel=new DefaultListModel();
  detailPane=new JXTaskPane();
  detailPane.setTitle(""String_Node_Str"");
  sources=new HashSet<KnowledgeSource>();
}"
10071,"/** 
 * This method sets the knowledge source for the learning process. Only OWLAPIOntology will be available.
 */
public void setKnowledgeSource(){
  this.source=new OWLAPIOntology(editor.getModelManager().getActiveOntology());
  source.setOWLOntologies(editor.getModelManager().getActiveOntologies());
}","/** 
 * This method sets the knowledge source for the learning process. Only OWLAPIOntology will be available.
 */
public void setKnowledgeSource(){
  Iterator<OWLOntology> it=editor.getModelManager().getActiveOntologies().iterator();
  while (it.hasNext()) {
    sources.add(new OWLAPIOntology(it.next()));
  }
}"
10072,"/** 
 * This method sets the individuals that belong to the concept which is chosen in protege.
 */
public void setPositiveConcept(){
  SortedSet<Individual> individuals=null;
  hasIndividuals=false;
  if (!current.getRootObject().toString().equals(""String_Node_Str"")) {
    for (Iterator<NamedClass> i=reasoner.getAtomicConceptsList().iterator(); i.hasNext(); ) {
      if (individuals == null) {
        NamedClass concept=i.next();
        if (concept.toString().endsWith(current.getRootObject().toString())) {
          currentConcept=concept;
          if (reasoner.getIndividuals(concept) != null) {
            if (reasoner.getIndividuals(concept).size() > 0) {
              hasIndividuals=true;
            }
            individual=reasoner.getIndividuals(concept);
            break;
          }
        }
      }
    }
  }
 else {
    if (reasoner.getIndividuals().size() > 0) {
      hasIndividuals=true;
    }
    individual=reasoner.getIndividuals();
  }
}","/** 
 * This method sets the individuals that belong to the concept which is chosen in protege.
 */
public void setPositiveConcept(){
  SortedSet<Individual> individuals=null;
  hasIndividuals=false;
  if (!current.getRootObject().toString().equals(""String_Node_Str"")) {
    for (Iterator<NamedClass> i=reasoner.getAtomicConceptsList().iterator(); i.hasNext(); ) {
      if (individuals == null) {
        NamedClass concept=i.next();
        if (concept.toString().contains(""String_Node_Str"")) {
          if (concept.toString().endsWith(""String_Node_Str"" + current.getRootObject().toString())) {
            currentConcept=concept;
            if (reasoner.getIndividuals(concept) != null) {
              if (reasoner.getIndividuals(concept).size() > 0) {
                hasIndividuals=true;
              }
              individual=reasoner.getIndividuals(concept);
              break;
            }
          }
        }
 else {
          if (concept.toString().endsWith(current.getRootObject().toString())) {
            currentConcept=concept;
            if (reasoner.getIndividuals(concept) != null) {
              if (reasoner.getIndividuals(concept).size() > 0) {
                hasIndividuals=true;
              }
              individual=reasoner.getIndividuals(concept);
              break;
            }
          }
        }
      }
    }
  }
 else {
    if (reasoner.getIndividuals().size() > 0) {
      hasIndividuals=true;
    }
    individual=reasoner.getIndividuals();
  }
}"
10073,"/** 
 * This method checks which positive and negative examples are checked and puts the checked examples into a tree set.
 */
public void setPositiveAndNegativeExamples(){
  positiveExamples=new TreeSet<String>();
  negativeExamples=new TreeSet<String>();
  for (int i=0; i < individualVector.size(); i++) {
    if (individualVector.get(i).isPositiveExample()) {
      positiveExamples.add(individualVector.get(i).getIndividualString());
    }
 else {
      negativeExamples.add(individualVector.get(i).getIndividualString());
    }
  }
  System.out.println(""String_Node_Str"" + positiveExamples);
}","/** 
 * This method checks which positive and negative examples are checked and puts the checked examples into a tree set.
 */
public void setPositiveAndNegativeExamples(){
  positiveExamples=new TreeSet<String>();
  negativeExamples=new TreeSet<String>();
  for (int i=0; i < individualVector.size(); i++) {
    if (individualVector.get(i).isPositiveExample()) {
      positiveExamples.add(individualVector.get(i).getIndividualString());
    }
 else {
      negativeExamples.add(individualVector.get(i).getIndividualString());
    }
  }
}"
10074,"/** 
 * This method sets the reasoner and the reasoning service Only OWLAPIReasoner is available.
 */
public void setReasoner(){
  this.reasoner=cm.reasoner(OWLAPIReasoner.class,source);
  try {
    reasoner.init();
  }
 catch (  ComponentInitException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","/** 
 * This method sets the reasoner and the reasoning service Only OWLAPIReasoner is available.
 */
public void setReasoner(){
  this.reasoner=cm.reasoner(OWLAPIReasoner.class,sources);
  try {
    reasoner.init();
  }
 catch (  ComponentInitException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}"
10075,"/** 
 * This method sets the learning algorithm for the learning process.
 */
public void setLearningAlgorithm(){
  try {
    this.la=cm.learningAlgorithm(ExampleBasedROLComponent.class,lp,reasoner);
  }
 catch (  LearningProblemUnsupportedException e) {
    e.printStackTrace();
  }
  cm.applyConfigEntry(la,""String_Node_Str"",view.getPosAndNegSelectPanel().getOptionPanel().getMaxExecutionTime());
  try {
    la.init();
  }
 catch (  ComponentInitException e) {
    e.printStackTrace();
  }
  alreadyLearned=true;
}","/** 
 * This method sets the learning algorithm for the learning process.
 */
public void setLearningAlgorithm(){
  try {
    this.la=cm.learningAlgorithm(ExampleBasedROLComponent.class,lp,reasoner);
  }
 catch (  LearningProblemUnsupportedException e) {
    e.printStackTrace();
  }
  Set<String> ignore=new TreeSet<String>();
  ignore.add(currentConcept.toString());
  cm.applyConfigEntry(la,""String_Node_Str"",ignore);
  cm.applyConfigEntry(la,""String_Node_Str"",view.getPosAndNegSelectPanel().getOptionPanel().getMaxExecutionTime());
  try {
    la.init();
  }
 catch (  ComponentInitException e) {
    e.printStackTrace();
  }
  alreadyLearned=true;
}"
10076,"/** 
 * Konstruktor of the Class Description Editor with integrated DL-Learner Tab.
 * @param editorKit OWLEditorKit
 * @param description OWLDescription
 * @param frame OWLFrame
 * @param label String 
 */
public OWLClassDescriptionEditorWithDLLearnerTab(OWLEditorKit editorKit,OWLDescription description,OWLFrame<OWLClass> frame,String label){
  this.editorKit=editorKit;
  editor=new ExpressionEditor<OWLDescription>(editorKit,editorKit.getModelManager().getOWLExpressionCheckerFactory().getOWLDescriptionChecker());
  editor.setExpressionObject(description);
  dllearner=new DLLearnerView(frame,label,this);
  action=new ActionHandler(this.action,null,dllearner,null,editorKit);
  tabbedPane=new JTabbedPane();
  tabbedPane.setFocusable(false);
  editingComponent=new JPanel(new BorderLayout());
  editingComponent.add(tabbedPane);
  editingComponent.setPreferredSize(new Dimension(600,520));
  if (label.equals(""String_Node_Str"")) {
    tabbedPane.add(SUGGEST_EQUIVALENT_CLASS_LABEL,dllearner);
  }
  if (label.equals(""String_Node_Str"")) {
    tabbedPane.add(SUGGEST_SUBCLASS_LABEL,dllearner);
  }
  tabbedPane.add(CLASS_EXPRESSION_EDITOR_LABEL,new JScrollPane(editor));
  if (description == null || !description.isAnonymous()) {
    classSelectorPanel=new OWLClassSelectorPanel(editorKit);
    tabbedPane.add(CLASS_TREE_LABEL,classSelectorPanel);
    if (description != null) {
      classSelectorPanel.setSelection(description.asOWLClass());
    }
    classSelectorPanel.addSelectionListener(changeListener);
    restrictionCreatorPanel=new ObjectRestrictionCreatorPanel();
    tabbedPane.add(RESTRICTION_CREATOR_LABEL,restrictionCreatorPanel);
    restrictionCreatorPanel.classSelectorPanel.addSelectionListener(changeListener);
    restrictionCreatorPanel.objectPropertySelectorPanel.addSelectionListener(changeListener);
    tabbedPane.addChangeListener(changeListener);
  }
}","/** 
 * Konstruktor of the Class Description Editor with integrated DL-Learner Tab.
 * @param editorKit OWLEditorKit
 * @param description OWLDescription
 * @param frame OWLFrame
 * @param label String 
 */
public OWLClassDescriptionEditorWithDLLearnerTab(OWLEditorKit editorKit,OWLDescription description,OWLFrame<OWLClass> frame,String label){
  this.editorKit=editorKit;
  editor=new ExpressionEditor<OWLDescription>(editorKit,editorKit.getModelManager().getOWLExpressionCheckerFactory().getOWLDescriptionChecker());
  editor.setExpressionObject(description);
  action=new ActionHandler(this.action,null,dllearner,null,editorKit);
  tabbedPane=new JTabbedPane();
  tabbedPane.setFocusable(false);
  editingComponent=new JPanel(new BorderLayout());
  editingComponent.add(tabbedPane);
  editingComponent.setPreferredSize(new Dimension(600,520));
  if (label.equals(""String_Node_Str"")) {
    dllearner=new DLLearnerView(frame,SUGGEST_EQUIVALENT_CLASS_LABEL,this);
    tabbedPane.add(SUGGEST_EQUIVALENT_CLASS_LABEL,dllearner);
  }
  if (label.equals(""String_Node_Str"")) {
    dllearner=new DLLearnerView(frame,SUGGEST_SUBCLASS_LABEL,this);
    tabbedPane.add(SUGGEST_SUBCLASS_LABEL,dllearner);
  }
  tabbedPane.add(CLASS_EXPRESSION_EDITOR_LABEL,new JScrollPane(editor));
  if (description == null || !description.isAnonymous()) {
    classSelectorPanel=new OWLClassSelectorPanel(editorKit);
    tabbedPane.add(CLASS_TREE_LABEL,classSelectorPanel);
    if (description != null) {
      classSelectorPanel.setSelection(description.asOWLClass());
    }
    classSelectorPanel.addSelectionListener(changeListener);
    restrictionCreatorPanel=new ObjectRestrictionCreatorPanel();
    tabbedPane.add(RESTRICTION_CREATOR_LABEL,restrictionCreatorPanel);
    restrictionCreatorPanel.classSelectorPanel.addSelectionListener(changeListener);
    restrictionCreatorPanel.objectPropertySelectorPanel.addSelectionListener(changeListener);
    tabbedPane.addChangeListener(changeListener);
  }
}"
10077,"/** 
 * The constructor for the DL-Learner tab in the class description editor.
 * @param current OWLFrame
 * @param label String
 * @param dlLearner OWLClassDescriptionEditorWithDLLearnerTab
 */
public DLLearnerView(OWLFrame<OWLClass> current,String label,OWLClassDescriptionEditorWithDLLearnerTab dlLearner){
  classSelectorPanel=new OWLClassSelectorPanel(editorKit);
  mainWindow=dlLearner;
  frame=current;
  wikiPane=new JLabel(""String_Node_Str"");
  classSelectorPanel.firePropertyChange(""String_Node_Str"",false,true);
  URL iconUrl=this.getClass().getResource(""String_Node_Str"");
  icon=new ImageIcon(iconUrl);
  URL toggledIconUrl=this.getClass().getResource(""String_Node_Str"");
  toggledIcon=new ImageIcon(toggledIconUrl);
  model=new DLLearnerModel(editorKit,current,label,this);
  sugPanel=new SuggestClassPanel();
  action=new ActionHandler(this.action,model,this,label,editorKit);
  adv=new JLabel(""String_Node_Str"");
  advanced=new JToggleButton(icon);
  advanced.setVisible(true);
  run=new JButton(""String_Node_Str"" + label);
  accept=new JButton(""String_Node_Str"");
  addButtonPanel=new JPanel(new BorderLayout());
  sugPanel.addSuggestPanelMouseListener(action);
  errorMessage=new JTextArea();
  errorMessage.setEditable(false);
  hint=new JTextArea();
  hint.setEditable(false);
  hint.setText(""String_Node_Str"");
  learner=new JPanel();
  advanced.setSize(20,20);
  learner.setLayout(null);
  learner.setPreferredSize(new Dimension(600,520));
  accept.setPreferredSize(new Dimension(290,50));
  advanced.setName(""String_Node_Str"");
  posPanel=new PosAndNegSelectPanel(model,action,this);
  addAcceptButtonListener(this.action);
  addRunButtonListener(this.action);
  addAdvancedButtonListener(this.action);
}","/** 
 * The constructor for the DL-Learner tab in the class description editor.
 * @param current OWLFrame
 * @param label String
 * @param dlLearner OWLClassDescriptionEditorWithDLLearnerTab
 */
public DLLearnerView(OWLFrame<OWLClass> current,String label,OWLClassDescriptionEditorWithDLLearnerTab dlLearner){
  classSelectorPanel=new OWLClassSelectorPanel(editorKit);
  mainWindow=dlLearner;
  frame=current;
  wikiPane=new JLabel(""String_Node_Str"");
  classSelectorPanel.firePropertyChange(""String_Node_Str"",false,true);
  URL iconUrl=this.getClass().getResource(""String_Node_Str"");
  icon=new ImageIcon(iconUrl);
  URL toggledIconUrl=this.getClass().getResource(""String_Node_Str"");
  toggledIcon=new ImageIcon(toggledIconUrl);
  model=new DLLearnerModel(editorKit,current,label,this);
  sugPanel=new SuggestClassPanel();
  action=new ActionHandler(this.action,model,this,label,editorKit);
  adv=new JLabel(""String_Node_Str"");
  advanced=new JToggleButton(icon);
  advanced.setVisible(true);
  run=new JButton(label);
  accept=new JButton(""String_Node_Str"");
  addButtonPanel=new JPanel(new BorderLayout());
  sugPanel.addSuggestPanelMouseListener(action);
  errorMessage=new JTextArea();
  errorMessage.setEditable(false);
  hint=new JTextArea();
  hint.setEditable(false);
  hint.setText(""String_Node_Str"");
  learner=new JPanel();
  advanced.setSize(20,20);
  learner.setLayout(null);
  learner.setPreferredSize(new Dimension(600,520));
  accept.setPreferredSize(new Dimension(290,50));
  advanced.setName(""String_Node_Str"");
  posPanel=new PosAndNegSelectPanel(model,action,this);
  addAcceptButtonListener(this.action);
  addRunButtonListener(this.action);
  addAdvancedButtonListener(this.action);
}"
10078,"/** 
 * Construktor for the Option Panel. 
 */
public OptionPanel(){
  setPreferredSize(new Dimension(490,120));
  setLayout(new GridLayout(0,1));
  optionPanel=new JPanel(new GridLayout(0,2));
  minAccuracyLabel=new JLabel(""String_Node_Str"");
  maxExecutionTimeLabel=new JLabel(""String_Node_Str"");
  nrOfConceptsLabel=new JLabel(""String_Node_Str"");
  minAccuracy=new JSlider(50,100,80);
  minAccuracy.setPaintTicks(true);
  minAccuracy.setMajorTickSpacing(10);
  minAccuracy.setMinorTickSpacing(1);
  minAccuracy.setPaintLabels(true);
  maxExecutionTime=new JSlider(5,20,10);
  maxExecutionTime.setPaintTicks(true);
  maxExecutionTime.setMajorTickSpacing(5);
  maxExecutionTime.setMinorTickSpacing(1);
  maxExecutionTime.setPaintLabels(true);
  nrOfConcepts=new JSlider(2,20,5);
  nrOfConcepts.setPaintTicks(true);
  nrOfConcepts.setMajorTickSpacing(2);
  nrOfConcepts.setMinorTickSpacing(1);
  nrOfConcepts.setPaintLabels(true);
  optionPanel.add(minAccuracyLabel);
  optionPanel.add(minAccuracy);
  optionPanel.add(maxExecutionTimeLabel);
  optionPanel.add(maxExecutionTime);
  optionPanel.add(nrOfConceptsLabel);
  optionPanel.add(nrOfConcepts);
  add(optionPanel);
}","/** 
 * Construktor for the Option Panel. 
 */
public OptionPanel(){
  setPreferredSize(new Dimension(490,120));
  setLayout(new GridLayout(0,1));
  optionPanel=new JPanel(new GridLayout(0,2));
  minAccuracyLabel=new JLabel(""String_Node_Str"");
  maxExecutionTimeLabel=new JLabel(""String_Node_Str"");
  nrOfConceptsLabel=new JLabel(""String_Node_Str"");
  minAccuracy=new JSlider(50,100,50);
  minAccuracy.setPaintTicks(true);
  minAccuracy.setMajorTickSpacing(10);
  minAccuracy.setMinorTickSpacing(1);
  minAccuracy.setPaintLabels(true);
  maxExecutionTime=new JSlider(5,20,10);
  maxExecutionTime.setPaintTicks(true);
  maxExecutionTime.setMajorTickSpacing(5);
  maxExecutionTime.setMinorTickSpacing(1);
  maxExecutionTime.setPaintLabels(true);
  nrOfConcepts=new JSlider(2,20,10);
  nrOfConcepts.setPaintTicks(true);
  nrOfConcepts.setMajorTickSpacing(2);
  nrOfConcepts.setMinorTickSpacing(1);
  nrOfConcepts.setPaintLabels(true);
  optionPanel.add(minAccuracyLabel);
  optionPanel.add(minAccuracy);
  optionPanel.add(maxExecutionTimeLabel);
  optionPanel.add(maxExecutionTime);
  optionPanel.add(nrOfConceptsLabel);
  optionPanel.add(nrOfConcepts);
  add(optionPanel);
}"
10079,"/** 
 * This method is called after the model for the suggest list is updated.
 * @param desc List model of descriptions made by the DL-Learner
 */
public void setSuggestList(DefaultListModel desc){
  descriptions.setModel(desc);
}","/** 
 * This method is called after the model for the suggest list is updated.
 * @param desc List model of descriptions made by the DL-Learner
 */
public void setSuggestList(DefaultListModel desc){
  System.out.println(""String_Node_Str"");
  descriptions.setModel(desc);
  repaint();
}"
10080,"/** 
 * select/deselect the Check boxes.
 * @param i ItemEvent
 */
public void itemStateChanged(ItemEvent i){
  if (i.getItem().toString().contains(""String_Node_Str"")) {
    for (int j=0; j < model.getPosVector().size(); j++) {
      if (i.getItem().toString().contains(model.getPosVector().get(j).getText().toString())) {
        if (!model.getPosVector().get(j).isSelected()) {
          model.getPosVector().get(j).setSelected(true);
          break;
        }
        if (model.getPosVector().get(j).isSelected()) {
          model.getPosVector().get(j).setSelected(false);
          break;
        }
      }
    }
  }
  if (i.getItem().toString().contains(""String_Node_Str"")) {
    for (int j=0; j < model.getNegVector().size(); j++) {
      if (i.getItem().toString().contains(model.getNegVector().get(j).getText().toString())) {
        if (!model.getNegVector().get(j).isSelected()) {
          model.getNegVector().get(j).setSelected(true);
          break;
        }
        if (model.getNegVector().get(j).isSelected()) {
          model.getNegVector().get(j).setSelected(false);
          break;
        }
      }
    }
  }
}","/** 
 * select/deselect the Check boxes.
 * @param i ItemEvent
 */
public void itemStateChanged(ItemEvent i){
}"
10081,"/** 
 * Nothing happens here.
 * @param e ListSelectionEvent 
 */
public void valueChanged(ListSelectionEvent e){
}","/** 
 * Nothing happens here.
 * @param e ListSelectionEvent
 */
public void valueChanged(ListSelectionEvent e){
}"
10082,"/** 
 * When a Button is pressed this method select the right.
 * @param z ActionEvent 
 */
public void actionPerformed(ActionEvent z){
  if (z.getActionCommand().equals(""String_Node_Str"" + id)) {
    if (model.getAlreadyLearned()) {
      model.unsetListModel();
    }
    view.getPosAndNegSelectPanel().setCheckBoxesEnable(false);
    model.setKnowledgeSource();
    model.setReasoner();
    model.setPositiveAndNegativeExamples();
    model.setLearningProblem();
    model.setLearningAlgorithm();
    this.dlLearner=new Thread(model);
    dlLearner.start();
    view.getRunButton().setEnabled(false);
    view.renderErrorMessage(""String_Node_Str"");
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (evaluatedDescription != null) {
      model.changeDLLearnerDescriptionsToOWLDescriptions(evaluatedDescription.getDescription());
    }
 else {
      model.changeDLLearnerDescriptionsToOWLDescriptions((Description)view.getSuggestClassPanel().getSuggestList().getSelectedValue());
    }
    String message=""String_Node_Str"";
    view.renderErrorMessage(message);
    view.updateWindow();
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (!toggled) {
      toggled=true;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
 else {
      toggled=false;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
  }
}","/** 
 * When a Button is pressed this method select the right.
 * @param z ActionEvent
 */
public void actionPerformed(ActionEvent z){
  if (z.getActionCommand().equals(""String_Node_Str"" + id)) {
    if (model.getAlreadyLearned()) {
      model.unsetListModel();
    }
    view.getRunButton().setEnabled(false);
    view.renderErrorMessage(""String_Node_Str"");
    view.getPosAndNegSelectPanel().setCheckBoxesEnable(false);
    final SuggestionRetriever retriever=new SuggestionRetriever();
    retriever.execute();
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (evaluatedDescription != null) {
      model.changeDLLearnerDescriptionsToOWLDescriptions(evaluatedDescription.getDescription());
    }
 else {
      model.changeDLLearnerDescriptionsToOWLDescriptions((Description)view.getSuggestClassPanel().getSuggestList().getSelectedValue());
    }
    String message=""String_Node_Str"";
    view.renderErrorMessage(message);
    view.updateWindow();
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (!toggled) {
      toggled=true;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
 else {
      toggled=false;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
  }
}"
10083,"/** 
 * Choses the right EvaluatedDescription object after a concept is chosen in the list.
 * @param m MouseEvent
 */
public void mouseClicked(MouseEvent m){
  EvaluatedDescription eDescription=null;
  if (view.getSuggestClassPanel().getSuggestList().getSelectedValue() != null) {
    SuggestListItem item=(SuggestListItem)view.getSuggestClassPanel().getSuggestList().getSelectedValue();
    String desc=item.getValue();
    if (model.getEvaluatedDescriptionList() != null) {
      for (Iterator<EvaluatedDescription> i=model.getEvaluatedDescriptionList().iterator(); i.hasNext(); ) {
        eDescription=i.next();
        if (desc.equals(eDescription.getDescription().toManchesterSyntaxString(editorKit.getModelManager().getActiveOntology().getURI() + ""String_Node_Str"",null))) {
          evaluatedDescription=eDescription;
          break;
        }
      }
    }
    if (m.getClickCount() == 2) {
      view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
    }
  }
 else {
  }
}","/** 
 * Choses the right EvaluatedDescription object after a concept is chosen in the list.
 * @param m MouseEvent
 */
public void mouseClicked(MouseEvent m){
  EvaluatedDescription eDescription=null;
  if (view.getSuggestClassPanel().getSuggestList().getSelectedValue() != null) {
    SuggestListItem item=(SuggestListItem)view.getSuggestClassPanel().getSuggestList().getSelectedValue();
    String desc=item.getValue();
    if (model.getEvaluatedDescriptionList() != null) {
      for (Iterator<EvaluatedDescription> i=model.getEvaluatedDescriptionList().iterator(); i.hasNext(); ) {
        eDescription=i.next();
        if (desc.equals(eDescription.getDescription().toManchesterSyntaxString(editorKit.getModelManager().getActiveOntology().getURI() + ""String_Node_Str"",null))) {
          evaluatedDescription=eDescription;
          break;
        }
      }
    }
    if (m.getClickCount() == 2) {
      view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
    }
  }
}"
10084,"/** 
 * This is the constructor for DL-Learner model.
 * @param editorKit Editor Kit to get the currently loaded Ontology
 * @param h OWLFrame(OWLClass) to get the base uri of the Ontology
 * @param id String if it learns a subclass or a superclass.
 * @param view current view of the DL-Learner tab
 */
public DLLearnerModel(OWLEditorKit editorKit,OWLFrame<OWLClass> h,String id,OWLClassDescriptionEditorWithDLLearnerTab.DLLearnerView view){
  editor=editorKit;
  current=h;
  this.id=id;
  this.view=view;
  ontologyURI=editor.getModelManager().getActiveOntology().getURI().toString() + ""String_Node_Str"";
  owlDescription=new HashSet<OWLDescription>();
  positiv=new Vector<JCheckBox>();
  posListModel=new DefaultListModel();
  negListModel=new DefaultListModel();
  negativ=new Vector<JCheckBox>();
  normalIndividuals=new Vector<String>();
  ComponentManager.setComponentClasses(componenten);
  individualVector=new Vector<IndividualObject>();
  cm=ComponentManager.getInstance();
  ds=new HashSet<OWLDescription>();
  suggestModel=new DefaultListModel();
  detailPane=new JXTaskPane();
  detailPane.setTitle(""String_Node_Str"");
}","/** 
 * This is the constructor for DL-Learner model.
 * @param editorKit Editor Kit to get the currently loaded Ontology
 * @param h OWLFrame(OWLClass) to get the base uri of the Ontology
 * @param id String if it learns a subclass or a superclass.
 * @param view current view of the DL-Learner tab
 */
public DLLearnerModel(OWLEditorKit editorKit,OWLFrame<OWLClass> h,String id,OWLClassDescriptionEditorWithDLLearnerTab.DLLearnerView view){
  editor=editorKit;
  current=h;
  this.id=id;
  this.view=view;
  ontologyURI=editor.getModelManager().getActiveOntology().getURI().toString() + ""String_Node_Str"";
  owlDescription=new HashSet<OWLDescription>();
  posListModel=new DefaultListModel();
  negListModel=new DefaultListModel();
  ComponentManager.setComponentClasses(componenten);
  individualVector=new Vector<IndividualObject>();
  cm=ComponentManager.getInstance();
  ds=new HashSet<OWLDescription>();
  suggestModel=new DefaultListModel();
  detailPane=new JXTaskPane();
  detailPane.setTitle(""String_Node_Str"");
}"
10085,"/** 
 * This method sets the individuals that belong to the concept which is chosen in protege.
 */
public void setPositiveConcept(){
  SortedSet<Individual> individuals=null;
  if (!current.getRootObject().toString().equals(""String_Node_Str"")) {
    for (Iterator<NamedClass> i=rs.getNamedClasses().iterator(); i.hasNext(); ) {
      if (individuals == null) {
        NamedClass concept=i.next();
        if (concept.toString().endsWith(""String_Node_Str"" + current.getRootObject().toString())) {
          if (rs.getIndividuals(concept) != null) {
            individual=rs.getIndividuals(concept);
            break;
          }
        }
      }
    }
  }
 else {
    individual=rs.getIndividuals();
  }
}","/** 
 * This method sets the individuals that belong to the concept which is chosen in protege.
 */
public void setPositiveConcept(){
  SortedSet<Individual> individuals=null;
  if (!current.getRootObject().toString().equals(""String_Node_Str"")) {
    for (Iterator<NamedClass> i=reasoner.getAtomicConceptsList().iterator(); i.hasNext(); ) {
      if (individuals == null) {
        NamedClass concept=i.next();
        if (concept.toString().endsWith(""String_Node_Str"" + current.getRootObject().toString())) {
          if (reasoner.getIndividuals(concept) != null) {
            individual=reasoner.getIndividuals(concept);
            break;
          }
        }
      }
    }
  }
 else {
    individual=reasoner.getIndividuals();
  }
}"
10086,"/** 
 * This method starts the learning process.
 */
public void run(){
  error=""String_Node_Str"";
  String message=""String_Node_Str"";
  la.start();
  description=new Description[la.getCurrentlyBestEvaluatedDescriptions(view.getPosAndNegSelectPanel().getOptionPanel().getNrOfConcepts()).size()];
  addToListModel();
  view.renderErrorMessage(error);
  view.setHintMessage(message);
  view.getRunButton().setEnabled(true);
  view.getPosAndNegSelectPanel().setCheckBoxesEnable(true);
  view.getSuggestClassPanel().setSuggestList(suggestModel);
}","/** 
 * This method starts the learning process.
 */
public void run(){
  error=""String_Node_Str"";
  setKnowledgeSource();
  setReasoner();
  setPositiveAndNegativeExamples();
  setLearningProblem();
  setLearningAlgorithm();
  String message=""String_Node_Str"";
  la.start();
  view.renderErrorMessage(error);
  view.setHintMessage(message);
}"
10087,"/** 
 * This method sets the check boxes for the positive check boxes checked if the individuals matches the concept that is chosen in protege.
 */
public void setPosVector(){
  setPositiveConcept();
  for (Iterator<Individual> j=rs.getIndividuals().iterator(); j.hasNext(); ) {
    Individual ind=j.next();
    normalIndividuals.add(ind.toString());
    String indiv=ind.toString();
    if (setPositivExamplesChecked(indiv)) {
      posListModel.add(0,ind.toManchesterSyntaxString(ontologyURI,prefixes));
      individualVector.add(new IndividualObject(indiv,ind.toManchesterSyntaxString(ontologyURI,prefixes),true));
    }
 else {
      negListModel.add(0,ind.toManchesterSyntaxString(ontologyURI,prefixes));
      individualVector.add(new IndividualObject(indiv,ind.toManchesterSyntaxString(ontologyURI,prefixes),false));
    }
  }
}","/** 
 * This method sets the check boxes for the positive check boxes checked if the individuals matches the concept that is chosen in protege.
 */
public void setPosVector(){
  setPositiveConcept();
  for (Iterator<Individual> j=reasoner.getIndividuals().iterator(); j.hasNext(); ) {
    Individual ind=j.next();
    String indiv=ind.toString();
    if (setPositivExamplesChecked(indiv)) {
      posListModel.add(0,ind.toManchesterSyntaxString(ontologyURI,prefixes));
      individualVector.add(new IndividualObject(indiv,ind.toManchesterSyntaxString(ontologyURI,prefixes),true));
    }
 else {
      negListModel.add(0,ind.toManchesterSyntaxString(ontologyURI,prefixes));
      individualVector.add(new IndividualObject(indiv,ind.toManchesterSyntaxString(ontologyURI,prefixes),false));
    }
  }
}"
10088,"/** 
 * This method gets the old concept from checking the positive examples.
 */
private void setOldConceptOWLAPI(){
  SortedSet<Individual> indi=rs.getIndividuals();
  for (Iterator<Individual> i=indi.iterator(); i.hasNext(); ) {
    Individual indi2=i.next();
    if (positiveExamples != null) {
      if (positiveExamples.toString().contains(indi2.toString())) {
        Set<NamedClass> concept=reasoner.getTypes(indi2);
        for (Iterator<NamedClass> k=concept.iterator(); k.hasNext(); ) {
          OWLDescription oldOWLAPI=OWLAPIDescriptionConvertVisitor.getOWLDescription(k.next());
          oldConceptOWLAPI=oldOWLAPI;
          ds.add(oldOWLAPI);
        }
      }
    }
  }
}","/** 
 * This method gets the old concept from checking the positive examples.
 */
private void setOldConceptOWLAPI(){
  SortedSet<Individual> indi=reasoner.getIndividuals();
  for (Iterator<Individual> i=indi.iterator(); i.hasNext(); ) {
    Individual indi2=i.next();
    if (positiveExamples != null) {
      if (positiveExamples.toString().contains(indi2.toString())) {
        Set<NamedClass> concept=reasoner.getTypes(indi2);
        for (Iterator<NamedClass> k=concept.iterator(); k.hasNext(); ) {
          OWLDescription oldOWLAPI=OWLAPIDescriptionConvertVisitor.getOWLDescription(k.next());
          oldConceptOWLAPI=oldOWLAPI;
          ds.add(oldOWLAPI);
        }
      }
    }
  }
}"
10089,"public Vector<IndividualObject> getIndividualVector(){
  return individualVector;
}","/** 
 * This method returns the Vector of IndividualObjects.
 * @return individualVector Vector
 */
public Vector<IndividualObject> getIndividualVector(){
  return individualVector;
}"
10090,"public DefaultListModel getPosListModel(){
  return posListModel;
}","/** 
 * This method returns the PosListModel.
 * @return DefaultListModel posListModel
 */
public DefaultListModel getPosListModel(){
  return posListModel;
}"
10091,"/** 
 * This method sets the Learning problem for the learning process. PosNegDefinitonLp for equivalent classes and PosNegInclusionLP for super classes.
 */
public void setLearningProblem(){
  if (id.equals(""String_Node_Str"")) {
    lp=cm.learningProblem(PosNegDefinitionLP.class,rs);
  }
  if (id.equals(""String_Node_Str"")) {
    lp=cm.learningProblem(PosNegInclusionLP.class,rs);
  }
  cm.applyConfigEntry(lp,""String_Node_Str"",positiveExamples);
  cm.applyConfigEntry(lp,""String_Node_Str"",negativeExamples);
  try {
    lp.init();
  }
 catch (  ComponentInitException e) {
    e.printStackTrace();
  }
}","/** 
 * This method sets the Learning problem for the learning process. PosNegDefinitonLp for equivalent classes and PosNegInclusionLP for super classes.
 */
public void setLearningProblem(){
  if (id.equals(""String_Node_Str"")) {
    lp=cm.learningProblem(PosNegDefinitionLP.class,reasoner);
  }
  if (id.equals(""String_Node_Str"")) {
    lp=cm.learningProblem(PosNegInclusionLP.class,reasoner);
  }
  cm.applyConfigEntry(lp,""String_Node_Str"",positiveExamples);
  cm.applyConfigEntry(lp,""String_Node_Str"",negativeExamples);
  try {
    lp.init();
  }
 catch (  ComponentInitException e) {
    e.printStackTrace();
  }
}"
10092,"/** 
 * This method sets the learning algorithm for the learning process.
 */
public void setLearningAlgorithm(){
  try {
    this.la=cm.learningAlgorithm(ExampleBasedROLComponent.class,lp,rs);
  }
 catch (  LearningProblemUnsupportedException e) {
    e.printStackTrace();
  }
  System.out.println(""String_Node_Str"" + view.getPosAndNegSelectPanel().getOptionPanel().getMaxExecutionTime());
  cm.applyConfigEntry(la,""String_Node_Str"",view.getPosAndNegSelectPanel().getOptionPanel().getMaxExecutionTime());
  try {
    la.init();
  }
 catch (  ComponentInitException e) {
    e.printStackTrace();
  }
  alreadyLearned=true;
}","/** 
 * This method sets the learning algorithm for the learning process.
 */
public void setLearningAlgorithm(){
  try {
    this.la=cm.learningAlgorithm(ExampleBasedROLComponent.class,lp,reasoner);
  }
 catch (  LearningProblemUnsupportedException e) {
    e.printStackTrace();
  }
  System.out.println(""String_Node_Str"" + view.getPosAndNegSelectPanel().getOptionPanel().getMaxExecutionTime());
  cm.applyConfigEntry(la,""String_Node_Str"",view.getPosAndNegSelectPanel().getOptionPanel().getMaxExecutionTime());
  try {
    la.init();
  }
 catch (  ComponentInitException e) {
    e.printStackTrace();
  }
  alreadyLearned=true;
}"
10093,"public boolean hasIndividuals(OWLClass OWLConcept){
  boolean hasIndividuals=false;
  NamedClass concept=null;
  NamedClass selectedConcept=null;
  Iterator<NamedClass> it=reasoner.getNamedClasses().iterator();
  while (it.hasNext()) {
    concept=it.next();
    if (concept.toManchesterSyntaxString(ontologyURI,prefixes).equals(OWLConcept.toString())) {
      selectedConcept=concept;
      break;
    }
  }
  System.out.println(""String_Node_Str"" + concept);
  System.out.println(""String_Node_Str"" + reasoner.getIndividuals(concept).size());
  if (reasoner.getIndividuals(selectedConcept).size() > 0) {
    hasIndividuals=true;
  }
  concept=null;
  selectedConcept=null;
  return hasIndividuals;
}","/** 
 * This Method checks if the selected class has any individuals.
 * @param owlConcept OWLClass
 * @return boolean hasIndividuals
 */
public boolean hasIndividuals(OWLClass owlConcept){
  boolean hasIndividuals=false;
  NamedClass concept=null;
  NamedClass selectedConcept=null;
  Iterator<NamedClass> it=reasoner.getNamedClasses().iterator();
  while (it.hasNext()) {
    concept=it.next();
    if (concept.toManchesterSyntaxString(ontologyURI,prefixes).equals(owlConcept.toString())) {
      selectedConcept=concept;
      break;
    }
  }
  if (reasoner.getIndividuals(selectedConcept).size() > 0) {
    hasIndividuals=true;
  }
  concept=null;
  selectedConcept=null;
  return hasIndividuals;
}"
10094,"/** 
 * This method resets the vectors where the check boxes for positive and negative Examples are stored. It is called when the DL-Learner View is closed.
 */
public void clearVector(){
  individualVector.removeAllElements();
  posListModel.removeAllElements();
  negListModel.removeAllElements();
  positiv.removeAllElements();
  negativ.removeAllElements();
}","/** 
 * This method resets the vectors where the check boxes for positive and negative Examples are stored. It is called when the DL-Learner View is closed.
 */
public void clearVector(){
  individualVector.removeAllElements();
  posListModel.removeAllElements();
  negListModel.removeAllElements();
}"
10095,"public DefaultListModel getNegListModel(){
  return negListModel;
}","/** 
 * This method returns the NegListModel.
 * @return DefaultListModel negListModel
 */
public DefaultListModel getNegListModel(){
  return negListModel;
}"
10096,"private boolean isConsistent(EvaluatedDescription eDescription){
  boolean isConsistent=false;
  if (eDescription.getNotCoveredPositives().isEmpty()) {
    isConsistent=true;
  }
 else {
    isConsistent=false;
  }
  return isConsistent;
}","public boolean isConsistent(EvaluatedDescription eDescription){
  boolean isConsistent=false;
  if (eDescription.getNotCoveredPositives().isEmpty()) {
    isConsistent=true;
  }
 else {
    isConsistent=false;
  }
  return isConsistent;
}"
10097,"public String getManchesterIndividual(){
  return manchesterIndividual;
}","/** 
 * This method returns the manchester String of the Individual.
 * @return String manchesterIndividual
 */
public String getManchesterIndividual(){
  return manchesterIndividual;
}"
10098,"public boolean isPositiveExample(){
  return isPos;
}","/** 
 * This method returns if the Example is a positive Example.
 * @return boolean isPos
 */
public boolean isPositiveExample(){
  return isPos;
}"
10099,"public IndividualObject(String normal,String manchester,boolean pos){
  normalIndividual=normal;
  manchesterIndividual=manchester;
  isPos=pos;
}","/** 
 * Constructor for the IndividualObject.
 * @param normal String
 * @param manchester String
 * @param pos boolean
 */
public IndividualObject(String normal,String manchester,boolean pos){
  normalIndividual=normal;
  manchesterIndividual=manchester;
  isPos=pos;
}"
10100,"public String getIndividualString(){
  return normalIndividual;
}","/** 
 * This method returns the String of the Individual.
 * @return String normalIndividual
 */
public String getIndividualString(){
  return normalIndividual;
}"
10101,"public void setExamplePositive(boolean pos){
  isPos=pos;
}","/** 
 * This method sets the example positive or negative if changed to the othe list.
 * @param pos boolean
 */
public void setExamplePositive(boolean pos){
  isPos=pos;
}"
10102,"public void run(){
  System.out.println(""String_Node_Str"");
  model.setSuggestList(result);
  dm.clear();
  Iterator<EvaluatedDescription> it=result.iterator();
  int i=0;
  while (it.hasNext()) {
    Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
    EvaluatedDescription eval=it.next();
    while (ont.hasNext()) {
      String onto=ont.next().getURI().toString();
      if (eval.getDescription().toString().contains(onto)) {
        if (model.isConsistent(eval)) {
          dm.add(i,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
          i++;
          break;
        }
 else {
          dm.add(i,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
          i++;
          break;
        }
      }
    }
  }
  System.out.println(""String_Node_Str"");
  view.getSuggestClassPanel().setSuggestList(dm);
}","public void run(){
  model.setSuggestList(result);
  dm.clear();
  Iterator<EvaluatedDescription> it=result.iterator();
  int i=0;
  while (it.hasNext()) {
    Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
    EvaluatedDescription eval=it.next();
    while (ont.hasNext()) {
      String onto=ont.next().getURI().toString();
      if (eval.getDescription().toString().contains(onto)) {
        if (model.isConsistent(eval)) {
          dm.add(i,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
          i++;
          break;
        }
 else {
          dm.add(i,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
          i++;
          break;
        }
      }
    }
  }
  view.getSuggestClassPanel().setSuggestList(dm);
}"
10103,"@Override public void done(){
  timer.cancel();
  List<EvaluatedDescription> result=null;
  try {
    result=get();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  ExecutionException e) {
    e.printStackTrace();
  }
  view.getRunButton().setEnabled(true);
  System.out.println(""String_Node_Str"");
  updateList(result);
}","@Override public void done(){
  timer.cancel();
  List<EvaluatedDescription> result=null;
  try {
    result=get();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  ExecutionException e) {
    e.printStackTrace();
  }
  view.algorithmTerminated();
  updateList(result);
}"
10104,"/** 
 * When a Button is pressed this method select the right.
 * @param z ActionEvent
 */
public void actionPerformed(ActionEvent z){
  if (z.getActionCommand().equals(id)) {
    if (model.getAlreadyLearned()) {
      model.unsetListModel();
    }
    model.setKnowledgeSource();
    model.setReasoner();
    model.setPositiveAndNegativeExamples();
    model.setLearningProblem();
    model.setLearningAlgorithm();
    view.getRunButton().setEnabled(false);
    view.renderErrorMessage(""String_Node_Str"");
    view.getPosAndNegSelectPanel().setCheckBoxesEnable(false);
    retriever=new SuggestionRetriever();
    retriever.execute();
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (evaluatedDescription != null) {
      model.changeDLLearnerDescriptionsToOWLDescriptions(evaluatedDescription.getDescription());
    }
 else {
      model.changeDLLearnerDescriptionsToOWLDescriptions((Description)view.getSuggestClassPanel().getSuggestList().getSelectedValue());
    }
    String message=""String_Node_Str"";
    view.renderErrorMessage(message);
    view.updateWindow();
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (!toggled) {
      toggled=true;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
 else {
      toggled=false;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
  }
}","/** 
 * When a Button is pressed this method select the right.
 * @param z ActionEvent
 */
public void actionPerformed(ActionEvent z){
  if (z.getActionCommand().equals(id)) {
    model.setKnowledgeSource();
    model.setReasoner();
    model.setPositiveAndNegativeExamples();
    model.setLearningProblem();
    model.setLearningAlgorithm();
    view.getRunButton().setEnabled(false);
    view.renderErrorMessage(""String_Node_Str"");
    view.getPosAndNegSelectPanel().setCheckBoxesEnable(false);
    retriever=new SuggestionRetriever();
    retriever.execute();
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (evaluatedDescription != null) {
      model.changeDLLearnerDescriptionsToOWLDescriptions(evaluatedDescription.getDescription());
    }
 else {
      model.changeDLLearnerDescriptionsToOWLDescriptions((Description)view.getSuggestClassPanel().getSuggestList().getSelectedValue());
    }
    String message=""String_Node_Str"";
    view.renderErrorMessage(message);
    view.updateWindow();
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (!toggled) {
      toggled=true;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
 else {
      toggled=false;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
  }
}"
10105,"@SuppressWarnings(""String_Node_Str"") @Override protected List<EvaluatedDescription> doInBackground() throws Exception {
  la=model.getLearningAlgorithm();
  timer=new Timer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      System.out.println(""String_Node_Str"");
      if (la != null) {
        publish(la.getCurrentlyBestEvaluatedDescriptions(view.getPosAndNegSelectPanel().getOptionPanel().getNrOfConcepts(),view.getPosAndNegSelectPanel().getOptionPanel().getMinAccuracy(),true));
      }
    }
  }
,0,1000);
  dlLearner=new Thread(new Runnable(){
    @Override public void run(){
      try {
        model.run();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  dlLearner.start();
  try {
    dlLearner.join();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  List<EvaluatedDescription> result=la.getCurrentlyBestEvaluatedDescriptions(view.getPosAndNegSelectPanel().getOptionPanel().getNrOfConcepts(),view.getPosAndNegSelectPanel().getOptionPanel().getMinAccuracy(),true);
  return result;
}","@SuppressWarnings(""String_Node_Str"") @Override protected List<EvaluatedDescription> doInBackground() throws Exception {
  la=model.getLearningAlgorithm();
  timer=new Timer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      if (la != null) {
        publish(la.getCurrentlyBestEvaluatedDescriptions(view.getPosAndNegSelectPanel().getOptionPanel().getNrOfConcepts(),view.getPosAndNegSelectPanel().getOptionPanel().getMinAccuracy(),true));
      }
    }
  }
,0,500);
  dlLearner=new Thread(new Runnable(){
    @Override public void run(){
      try {
        model.run();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  dlLearner.start();
  try {
    dlLearner.join();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  List<EvaluatedDescription> result=la.getCurrentlyBestEvaluatedDescriptions(view.getPosAndNegSelectPanel().getOptionPanel().getNrOfConcepts(),view.getPosAndNegSelectPanel().getOptionPanel().getMinAccuracy(),true);
  return result;
}"
10106,"private void updateList(final List<EvaluatedDescription> result){
  logger.debug(""String_Node_Str"" + result);
  Runnable doUpdateList=new Runnable(){
    public void run(){
      System.out.println(""String_Node_Str"");
      model.setSuggestList(result);
      dm.clear();
      Iterator<EvaluatedDescription> it=result.iterator();
      int i=0;
      while (it.hasNext()) {
        Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
        EvaluatedDescription eval=it.next();
        while (ont.hasNext()) {
          String onto=ont.next().getURI().toString();
          if (eval.getDescription().toString().contains(onto)) {
            if (model.isConsistent(eval)) {
              dm.add(i,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
              i++;
              break;
            }
 else {
              dm.add(i,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
              i++;
              break;
            }
          }
        }
      }
      System.out.println(""String_Node_Str"");
      view.getSuggestClassPanel().setSuggestList(dm);
    }
  }
;
  SwingUtilities.invokeLater(doUpdateList);
}","private void updateList(final List<EvaluatedDescription> result){
  logger.debug(""String_Node_Str"" + result);
  Runnable doUpdateList=new Runnable(){
    public void run(){
      model.setSuggestList(result);
      dm.clear();
      Iterator<EvaluatedDescription> it=result.iterator();
      int i=0;
      while (it.hasNext()) {
        Iterator<OWLOntology> ont=model.getOWLEditorKit().getModelManager().getActiveOntologies().iterator();
        EvaluatedDescription eval=it.next();
        while (ont.hasNext()) {
          String onto=ont.next().getURI().toString();
          if (eval.getDescription().toString().contains(onto)) {
            if (model.isConsistent(eval)) {
              dm.add(i,new SuggestListItem(Color.GREEN,eval.getDescription().toManchesterSyntaxString(onto,null)));
              i++;
              break;
            }
 else {
              dm.add(i,new SuggestListItem(Color.RED,eval.getDescription().toManchesterSyntaxString(onto,null)));
              i++;
              break;
            }
          }
        }
      }
      view.getSuggestClassPanel().setSuggestList(dm);
    }
  }
;
  SwingUtilities.invokeLater(doUpdateList);
}"
10107,"/** 
 * This method starts the learning process.
 */
public void run(){
  error=""String_Node_Str"";
  String message=""String_Node_Str"";
  la.start();
  view.renderErrorMessage(error);
  view.setHintMessage(message);
}","/** 
 * Starts the learning algorithm.
 */
public void run(){
  la.start();
}"
10108,"public Set<KnowledgeSource> getKnowledgeSources(){
  return sources;
}","/** 
 * This method returns the Knowledgesources currenty used. 
 * @return Set<KnowledgSource>
 */
public Set<KnowledgeSource> getKnowledgeSources(){
  return sources;
}"
10109,"/** 
 * This method sets the reasoner and the reasoning service Only OWLAPIReasoner is available.
 */
public void setReasoner(){
  this.reasoner=cm.reasoner(OWLAPIReasoner.class,sources);
  try {
    reasoner.init();
  }
 catch (  ComponentInitException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","/** 
 * This method sets the reasoner. Only FastInstanceChecker is available.
 */
public void setReasoner(){
  this.reasoner=cm.reasoner(FastInstanceChecker.class,sources);
  try {
    reasoner.init();
  }
 catch (  ComponentInitException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}"
10110,"public OWLEditorKit getOWLEditorKit(){
  return editor;
}","/** 
 * This method returns the OWLEditorKit.
 * @return OWLEditorKit
 */
public OWLEditorKit getOWLEditorKit(){
  return editor;
}"
10111,"/** 
 * This method stores the new concept learned by the DL-Learner in the Ontology.
 * @param descript Description learn by the DL-Learner
 */
public void changeDLLearnerDescriptionsToOWLDescriptions(Description descript){
  setNewConceptOWLAPI(descript);
  oldConceptOWLAPI=OWLAPIDescriptionConvertVisitor.getOWLDescription(currentConcept);
  ds.add(oldConceptOWLAPI);
  OWLOntologyManager manager=OWLManager.createOWLOntologyManager();
  OWLDataFactory factory=manager.getOWLDataFactory();
  if (id.equals(""String_Node_Str"")) {
    axiomOWLAPI=factory.getOWLEquivalentClassesAxiom(ds);
  }
 else {
    axiomOWLAPI=factory.getOWLSubClassAxiom(newConceptOWLAPI,oldConceptOWLAPI);
  }
  OWLOntology onto=editor.getModelManager().getActiveOntology();
  AddAxiom axiom=new AddAxiom(onto,axiomOWLAPI);
  try {
    manager.applyChange(axiom);
  }
 catch (  OWLOntologyChangeException e) {
    e.printStackTrace();
  }
}","/** 
 * This method stores the new concept learned by the DL-Learner in the Ontology.
 * @param descript Description learn by the DL-Learner
 */
public void changeDLLearnerDescriptionsToOWLDescriptions(Description descript){
  setNewConceptOWLAPI(descript);
  oldConceptOWLAPI=OWLAPIDescriptionConvertVisitor.getOWLDescription(currentConcept);
  ds.add(oldConceptOWLAPI);
  OWLOntologyManager manager=OWLManager.createOWLOntologyManager();
  OWLDataFactory factory=manager.getOWLDataFactory();
  if (id.equals(EQUIVALENT_CLASS_AXIOM_STRING)) {
    axiomOWLAPI=factory.getOWLEquivalentClassesAxiom(ds);
  }
 else {
    axiomOWLAPI=factory.getOWLSubClassAxiom(oldConceptOWLAPI,newConceptOWLAPI);
  }
  OWLOntology onto=editor.getModelManager().getActiveOntology();
  AddAxiom axiom=new AddAxiom(onto,axiomOWLAPI);
  try {
    manager.applyChange(axiom);
  }
 catch (  OWLOntologyChangeException e) {
    e.printStackTrace();
  }
}"
10112,"/** 
 * This method sets the Learning problem for the learning process. PosNegDefinitonLp for equivalent classes and PosNegInclusionLP for super classes.
 */
public void setLearningProblem(){
  if (id.equals(""String_Node_Str"")) {
    lp=cm.learningProblem(PosNegDefinitionLP.class,reasoner);
  }
  if (id.equals(""String_Node_Str"")) {
    lp=cm.learningProblem(PosNegInclusionLP.class,reasoner);
  }
  cm.applyConfigEntry(lp,""String_Node_Str"",positiveExamples);
  cm.applyConfigEntry(lp,""String_Node_Str"",negativeExamples);
  try {
    lp.init();
  }
 catch (  ComponentInitException e) {
    e.printStackTrace();
  }
}","/** 
 * This method sets the Learning problem for the learning process. PosNegDefinitonLp for equivalent classes and PosNegInclusionLP for super classes.
 */
public void setLearningProblem(){
  if (id.equals(EQUIVALENT_CLASS_AXIOM_STRING)) {
    lp=cm.learningProblem(PosNegDefinitionLP.class,reasoner);
  }
  if (id.equals(SUPER_CLASS_AXIOM_STRING)) {
    lp=cm.learningProblem(PosNegInclusionLP.class,reasoner);
  }
  cm.applyConfigEntry(lp,""String_Node_Str"",positiveExamples);
  cm.applyConfigEntry(lp,""String_Node_Str"",negativeExamples);
  try {
    lp.init();
  }
 catch (  ComponentInitException e) {
    e.printStackTrace();
  }
}"
10113,"/** 
 * This method sets the learning algorithm for the learning process.
 */
public void setLearningAlgorithm(){
  try {
    this.la=cm.learningAlgorithm(ExampleBasedROLComponent.class,lp,reasoner);
  }
 catch (  LearningProblemUnsupportedException e) {
    e.printStackTrace();
  }
  Set<String> ignore=new TreeSet<String>();
  ignore.add(currentConcept.toString());
  cm.applyConfigEntry(la,""String_Node_Str"",ignore);
  cm.applyConfigEntry(la,""String_Node_Str"",view.getPosAndNegSelectPanel().getOptionPanel().getMaxExecutionTime());
  try {
    la.init();
  }
 catch (  ComponentInitException e) {
    e.printStackTrace();
  }
  alreadyLearned=true;
}","/** 
 * This method sets the learning algorithm for the learning process.
 */
public void setLearningAlgorithm(){
  try {
    this.la=cm.learningAlgorithm(ExampleBasedROLComponent.class,lp,reasoner);
  }
 catch (  LearningProblemUnsupportedException e) {
    e.printStackTrace();
  }
  Set<String> ignore=new TreeSet<String>();
  ignore.add(currentConcept.toString());
  cm.applyConfigEntry(la,""String_Node_Str"",ignore);
  cm.applyConfigEntry(la,""String_Node_Str"",5);
  cm.applyConfigEntry(la,""String_Node_Str"",false);
  cm.applyConfigEntry(la,""String_Node_Str"",2);
  cm.applyConfigEntry(la,""String_Node_Str"",view.getPosAndNegSelectPanel().getOptionPanel().getMaxExecutionTime());
  try {
    la.init();
  }
 catch (  ComponentInitException e) {
    e.printStackTrace();
  }
  alreadyLearned=true;
}"
10114,"/** 
 * This Method checks if the selected class has any individuals.
 * @param owlConcept OWLClass
 * @return boolean hasIndividuals
 */
public boolean hasIndividuals(){
  return hasIndividuals;
}","/** 
 * This Method checks if the selected class has any individuals.
 * @return boolean hasIndividuals
 */
public boolean hasIndividuals(){
  return hasIndividuals;
}"
10115,"/** 
 * Constructor for the IndividualObject.
 * @param normal String
 * @param manchester String
 * @param pos boolean
 */
public IndividualObject(String normal,boolean pos){
  normalIndividual=normal;
  isPos=pos;
}","/** 
 * Constructor for the IndividualObject.
 * @param normal String
 * @param pos boolean
 */
public IndividualObject(String normal,boolean pos){
  normalIndividual=normal;
  isPos=pos;
}"
10116,"/** 
 * When a Button is pressed this method select the right.
 * @param z ActionEvent 
 */
public void actionPerformed(ActionEvent z){
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    view.getPosAndNegSelectPanel().setOptionSpinner();
  }
  if (z.getActionCommand().equals(""String_Node_Str"" + id)) {
    if (model.getAlreadyLearned()) {
      model.unsetListModel();
    }
    if (view.getPosAndNegSelectPanel().getPosAndNegSelectPanel().getComponentCount() <= 2) {
      view.renderErrorMessage(""String_Node_Str"");
    }
 else {
      model.setKnowledgeSource();
      model.setReasoner();
      model.setPositiveAndNegativeExamples();
      model.setLearningProblem();
      model.setLearningAlgorithm();
      this.dlLearner=new Thread(model);
      dlLearner.start();
      view.getRunButton().setEnabled(false);
      view.renderErrorMessage(""String_Node_Str"");
      view.getPosAndNegSelectPanel().unsetCheckBoxes();
    }
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (evaluatedDescription != null) {
      model.changeDLLearnerDescriptionsToOWLDescriptions(evaluatedDescription.getDescription());
    }
 else {
      model.changeDLLearnerDescriptionsToOWLDescriptions((Description)view.getSuggestClassPanel().getSuggestList().getSelectedValue());
    }
    String message=""String_Node_Str"";
    view.renderErrorMessage(message);
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (z.getSource().toString().contains(""String_Node_Str"")) {
      String help=""String_Node_Str"";
      view.getPosAndNegSelectPanel().renderHelpMessage(help);
    }
    if (z.getSource().toString().contains(""String_Node_Str"")) {
      String help=""String_Node_Str"";
      view.getPosAndNegSelectPanel().renderHelpMessage(help);
    }
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (!toggled) {
      toggled=true;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
 else {
      toggled=false;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
  }
}","/** 
 * When a Button is pressed this method select the right.
 * @param z ActionEvent 
 */
public void actionPerformed(ActionEvent z){
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    view.getPosAndNegSelectPanel().setOptionSpinner();
  }
  if (z.getActionCommand().equals(""String_Node_Str"" + id)) {
    if (model.getAlreadyLearned()) {
      model.unsetListModel();
    }
    if (view.getPosAndNegSelectPanel().getPosAndNegSelectPanel().getComponentCount() <= 2) {
      view.renderErrorMessage(""String_Node_Str"");
    }
 else {
      model.setKnowledgeSource();
      model.setReasoner();
      model.setPositiveAndNegativeExamples();
      model.setLearningProblem();
      model.setLearningAlgorithm();
      this.dlLearner=new Thread(model);
      dlLearner.start();
      view.getRunButton().setEnabled(false);
      view.renderErrorMessage(""String_Node_Str"");
      view.getPosAndNegSelectPanel().unsetCheckBoxes();
    }
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (evaluatedDescription != null) {
      model.changeDLLearnerDescriptionsToOWLDescriptions(evaluatedDescription.getDescription());
    }
 else {
      model.changeDLLearnerDescriptionsToOWLDescriptions((Description)view.getSuggestClassPanel().getSuggestList().getSelectedValue());
    }
    String message=""String_Node_Str"";
    view.renderErrorMessage(message);
    view.updateWindow();
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (z.getSource().toString().contains(""String_Node_Str"")) {
      String help=""String_Node_Str"";
      view.getPosAndNegSelectPanel().renderHelpMessage(help);
    }
    if (z.getSource().toString().contains(""String_Node_Str"")) {
      String help=""String_Node_Str"";
      view.getPosAndNegSelectPanel().renderHelpMessage(help);
    }
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    if (!toggled) {
      toggled=true;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
 else {
      toggled=false;
      view.setIconToggled(toggled);
      view.setExamplePanelVisible(toggled);
    }
  }
  if (z.getActionCommand().equals(""String_Node_Str"")) {
    view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
  }
}"
10117,"/** 
 * This method gets the old concept from checking the positive examples.
 */
private void setOldConceptOWLAPI(){
  SortedSet<Individual> indi=rs.getIndividuals();
  for (Iterator<Individual> i=indi.iterator(); i.hasNext(); ) {
    Individual indi2=i.next();
    if (positiveExamples != null) {
      if (positiveExamples.toString().contains(indi2.toString())) {
        Set<NamedClass> concept=reasoner.getConcepts(indi2);
        for (Iterator<NamedClass> k=concept.iterator(); k.hasNext(); ) {
          OWLDescription oldOWLAPI=OWLAPIDescriptionConvertVisitor.getOWLDescription(k.next());
          ds.add(oldOWLAPI);
        }
      }
    }
  }
}","/** 
 * This method gets the old concept from checking the positive examples.
 */
private void setOldConceptOWLAPI(){
  SortedSet<Individual> indi=rs.getIndividuals();
  for (Iterator<Individual> i=indi.iterator(); i.hasNext(); ) {
    Individual indi2=i.next();
    if (positiveExamples != null) {
      if (positiveExamples.toString().contains(indi2.toString())) {
        Set<NamedClass> concept=reasoner.getConcepts(indi2);
        for (Iterator<NamedClass> k=concept.iterator(); k.hasNext(); ) {
          OWLDescription oldOWLAPI=OWLAPIDescriptionConvertVisitor.getOWLDescription(k.next());
          oldConceptOWLAPI=oldOWLAPI;
          ds.add(oldOWLAPI);
        }
      }
    }
  }
}"
10118,"/** 
 * This method stores the new concept learned by the DL-Learner in the Ontology.
 * @param descript Description learn by the DL-Learner
 */
public void changeDLLearnerDescriptionsToOWLDescriptions(Description descript){
  setNewConceptOWLAPI(descript);
  setOldConceptOWLAPI();
  OWLOntologyManager manager=OWLManager.createOWLOntologyManager();
  OWLDataFactory factory=manager.getOWLDataFactory();
  if (id.equals(""String_Node_Str"")) {
    axiomOWLAPI=factory.getOWLEquivalentClassesAxiom(ds);
  }
 else {
    axiomOWLAPI=factory.getOWLSubClassAxiom(oldConceptOWLAPI,newConceptOWLAPI);
  }
  OWLOntology onto=editor.getModelManager().getActiveOntology();
  AddAxiom axiom=new AddAxiom(onto,axiomOWLAPI);
  try {
    manager.applyChange(axiom);
  }
 catch (  OWLOntologyChangeException e) {
    e.printStackTrace();
  }
}","/** 
 * This method stores the new concept learned by the DL-Learner in the Ontology.
 * @param descript Description learn by the DL-Learner
 */
public void changeDLLearnerDescriptionsToOWLDescriptions(Description descript){
  setNewConceptOWLAPI(descript);
  setOldConceptOWLAPI();
  OWLOntologyManager manager=OWLManager.createOWLOntologyManager();
  OWLDataFactory factory=manager.getOWLDataFactory();
  if (id.equals(""String_Node_Str"")) {
    axiomOWLAPI=factory.getOWLEquivalentClassesAxiom(ds);
  }
 else {
    axiomOWLAPI=factory.getOWLSubClassAxiom(newConceptOWLAPI,oldConceptOWLAPI);
  }
  OWLOntology onto=editor.getModelManager().getActiveOntology();
  AddAxiom axiom=new AddAxiom(onto,axiomOWLAPI);
  try {
    manager.applyChange(axiom);
  }
 catch (  OWLOntologyChangeException e) {
    e.printStackTrace();
  }
}"
10119,"/** 
 * This method adds the solutions from the DL-Learner to the List Model.
 */
private void addToListModel(){
  evalDescriptions=la.getCurrentlyBestEvaluatedDescriptions(view.getPosAndNegSelectPanel().getMaxNrOfResultsModelData(),view.getPosAndNegSelectPanel().getMinAccuracyModelData(),true);
  for (int j=0; j < evalDescriptions.size(); j++) {
    System.out.println(""String_Node_Str"" + evalDescriptions.get(j).getNotCoveredPositives());
    if (isConsistent(evalDescriptions.get(j))) {
      suggestModel.add(j,new SuggestListItem(Color.GREEN,evalDescriptions.get(j).getDescription().toManchesterSyntaxString(editor.getModelManager().getActiveOntology().getURI().toString() + ""String_Node_Str"",null)));
    }
 else {
      suggestModel.add(j,new SuggestListItem(Color.RED,evalDescriptions.get(j).getDescription().toManchesterSyntaxString(editor.getModelManager().getActiveOntology().getURI().toString() + ""String_Node_Str"",null)));
    }
  }
}","/** 
 * This method adds the solutions from the DL-Learner to the List Model.
 */
private void addToListModel(){
  evalDescriptions=la.getCurrentlyBestEvaluatedDescriptions(view.getPosAndNegSelectPanel().getMaxNrOfResultsModelData(),view.getPosAndNegSelectPanel().getMinAccuracyModelData(),true);
  for (int j=0; j < evalDescriptions.size(); j++) {
    if (isConsistent(evalDescriptions.get(j))) {
      suggestModel.add(j,new SuggestListItem(Color.GREEN,evalDescriptions.get(j).getDescription().toManchesterSyntaxString(editor.getModelManager().getActiveOntology().getURI().toString() + ""String_Node_Str"",null)));
    }
 else {
      suggestModel.add(j,new SuggestListItem(Color.RED,evalDescriptions.get(j).getDescription().toManchesterSyntaxString(editor.getModelManager().getActiveOntology().getURI().toString() + ""String_Node_Str"",null)));
    }
  }
}"
10120,"/** 
 * Konstruktor of the Class Description Editor with integrated DL-Learner Tab.
 * @param editorKit OWLEditorKit
 * @param description OWLDescription
 * @param frame OWLFrame
 * @param label String 
 */
public OWLClassDescriptionEditorWithDLLearnerTab(OWLEditorKit editorKit,OWLDescription description,OWLFrame<OWLClass> frame,String label){
  this.editorKit=editorKit;
  editor=new ExpressionEditor<OWLDescription>(editorKit,editorKit.getModelManager().getOWLExpressionCheckerFactory().getOWLDescriptionChecker());
  editor.setExpressionObject(description);
  dllearner=new DLLearnerView(frame,label);
  action=new ActionHandler(this.action,null,dllearner,null,editorKit);
  tabbedPane=new JTabbedPane();
  tabbedPane.setFocusable(false);
  editingComponent=new JPanel(new BorderLayout());
  editingComponent.add(tabbedPane);
  editingComponent.setPreferredSize(new Dimension(600,520));
  if (dllearner.getNrOfIndividuals() != 0) {
    if (label.equals(""String_Node_Str"")) {
      tabbedPane.add(SUGGEST_EQUIVALENT_CLASS_LABEL,dllearner);
    }
    if (label.equals(""String_Node_Str"")) {
      tabbedPane.add(SUGGEST_SUBCLASS_LABEL,dllearner);
    }
  }
  tabbedPane.add(CLASS_EXPRESSION_EDITOR_LABEL,new JScrollPane(editor));
  if (description == null || !description.isAnonymous()) {
    classSelectorPanel=new OWLClassSelectorPanel(editorKit);
    tabbedPane.add(CLASS_TREE_LABEL,classSelectorPanel);
    if (description != null) {
      classSelectorPanel.setSelection(description.asOWLClass());
    }
    classSelectorPanel.addSelectionListener(changeListener);
    restrictionCreatorPanel=new ObjectRestrictionCreatorPanel();
    tabbedPane.add(RESTRICTION_CREATOR_LABEL,restrictionCreatorPanel);
    restrictionCreatorPanel.classSelectorPanel.addSelectionListener(changeListener);
    restrictionCreatorPanel.objectPropertySelectorPanel.addSelectionListener(changeListener);
    tabbedPane.addChangeListener(changeListener);
  }
}","/** 
 * Konstruktor of the Class Description Editor with integrated DL-Learner Tab.
 * @param editorKit OWLEditorKit
 * @param description OWLDescription
 * @param frame OWLFrame
 * @param label String 
 */
public OWLClassDescriptionEditorWithDLLearnerTab(OWLEditorKit editorKit,OWLDescription description,OWLFrame<OWLClass> frame,String label){
  this.editorKit=editorKit;
  editor=new ExpressionEditor<OWLDescription>(editorKit,editorKit.getModelManager().getOWLExpressionCheckerFactory().getOWLDescriptionChecker());
  editor.setExpressionObject(description);
  dllearner=new DLLearnerView(frame,label,this);
  action=new ActionHandler(this.action,null,dllearner,null,editorKit);
  tabbedPane=new JTabbedPane();
  tabbedPane.setFocusable(false);
  editingComponent=new JPanel(new BorderLayout());
  editingComponent.add(tabbedPane);
  editingComponent.setPreferredSize(new Dimension(600,520));
  if (dllearner.getNrOfIndividuals() != 0) {
    if (label.equals(""String_Node_Str"")) {
      tabbedPane.add(SUGGEST_EQUIVALENT_CLASS_LABEL,dllearner);
    }
    if (label.equals(""String_Node_Str"")) {
      tabbedPane.add(SUGGEST_SUBCLASS_LABEL,dllearner);
    }
  }
  tabbedPane.add(CLASS_EXPRESSION_EDITOR_LABEL,new JScrollPane(editor));
  if (description == null || !description.isAnonymous()) {
    classSelectorPanel=new OWLClassSelectorPanel(editorKit);
    tabbedPane.add(CLASS_TREE_LABEL,classSelectorPanel);
    if (description != null) {
      classSelectorPanel.setSelection(description.asOWLClass());
    }
    classSelectorPanel.addSelectionListener(changeListener);
    restrictionCreatorPanel=new ObjectRestrictionCreatorPanel();
    tabbedPane.add(RESTRICTION_CREATOR_LABEL,restrictionCreatorPanel);
    restrictionCreatorPanel.classSelectorPanel.addSelectionListener(changeListener);
    restrictionCreatorPanel.objectPropertySelectorPanel.addSelectionListener(changeListener);
    tabbedPane.addChangeListener(changeListener);
  }
}"
10121,"/** 
 * The constructor for the DL-Learner tab in the class description editor.
 * @param current OWLFrame
 * @param label String
 */
public DLLearnerView(OWLFrame<OWLClass> current,String label){
  classSelectorPanel=new OWLClassSelectorPanel(editorKit);
  classSelectorPanel.firePropertyChange(""String_Node_Str"",false,true);
  URL iconUrl=this.getClass().getResource(""String_Node_Str"");
  icon=new ImageIcon(iconUrl);
  URL toggledIconUrl=this.getClass().getResource(""String_Node_Str"");
  toggledIcon=new ImageIcon(toggledIconUrl);
  model=new DLLearnerModel(editorKit,current,label,this);
  sugPanel=new SuggestClassPanel();
  action=new ActionHandler(this.action,model,this,label,editorKit);
  adv=new JLabel(""String_Node_Str"");
  advanced=new JToggleButton(icon);
  advanced.setVisible(true);
  run=new JButton(""String_Node_Str"" + label);
  accept=new JButton(""String_Node_Str"");
  addButtonPanel=new JPanel(new BorderLayout());
  sugPanel.addSuggestPanelMouseListener(action);
  errorMessage=new JTextArea();
  errorMessage.setEditable(false);
  hint=new JTextArea();
  hint.setEditable(false);
  hint.setText(""String_Node_Str"");
  learner=new JPanel();
  advanced.setSize(20,20);
  learner.setLayout(null);
  learner.setPreferredSize(new Dimension(600,520));
  accept.setPreferredSize(new Dimension(290,50));
  advanced.setName(""String_Node_Str"");
  posPanel=new PosAndNegSelectPanel(model,action);
  addAcceptButtonListener(this.action);
  addRunButtonListener(this.action);
  addAdvancedButtonListener(this.action);
}","/** 
 * The constructor for the DL-Learner tab in the class description editor.
 * @param current OWLFrame
 * @param label String
 * @param dlLearner OWLClassDescriptionEditorWithDLLearnerTab
 */
public DLLearnerView(OWLFrame<OWLClass> current,String label,OWLClassDescriptionEditorWithDLLearnerTab dlLearner){
  classSelectorPanel=new OWLClassSelectorPanel(editorKit);
  mainWindow=dlLearner;
  classSelectorPanel.firePropertyChange(""String_Node_Str"",false,true);
  URL iconUrl=this.getClass().getResource(""String_Node_Str"");
  icon=new ImageIcon(iconUrl);
  URL toggledIconUrl=this.getClass().getResource(""String_Node_Str"");
  toggledIcon=new ImageIcon(toggledIconUrl);
  model=new DLLearnerModel(editorKit,current,label,this);
  sugPanel=new SuggestClassPanel();
  action=new ActionHandler(this.action,model,this,label,editorKit);
  adv=new JLabel(""String_Node_Str"");
  advanced=new JToggleButton(icon);
  advanced.setVisible(true);
  run=new JButton(""String_Node_Str"" + label);
  accept=new JButton(""String_Node_Str"");
  addButtonPanel=new JPanel(new BorderLayout());
  sugPanel.addSuggestPanelMouseListener(action);
  errorMessage=new JTextArea();
  errorMessage.setEditable(false);
  hint=new JTextArea();
  hint.setEditable(false);
  hint.setText(""String_Node_Str"");
  learner=new JPanel();
  advanced.setSize(20,20);
  learner.setLayout(null);
  learner.setPreferredSize(new Dimension(600,520));
  accept.setPreferredSize(new Dimension(290,50));
  advanced.setName(""String_Node_Str"");
  posPanel=new PosAndNegSelectPanel(model,action);
  addAcceptButtonListener(this.action);
  addRunButtonListener(this.action);
  addAdvancedButtonListener(this.action);
}"
10122,"@Override protected void clear(){
}","@Override protected void clear(){
  added.clear();
}"
10123,"@Override public void initialiseClassView() throws Exception {
  list=new OWLFrameList2<OWLClass>(getOWLEditorKit(),new ButtonList(getOWLEditorKit()));
  setLayout(new BorderLayout());
  JScrollPane hallo=new JScrollPane(list);
  add(hallo);
}","@Override public void initialiseClassView() throws Exception {
  list=new OWLFrameList2<OWLClass>(getOWLEditorKit(),new ButtonList(getOWLEditorKit()));
  setLayout(new BorderLayout());
  JScrollPane dlLearner=new JScrollPane(list);
  add(dlLearner);
}"
10124,"/** 
 * Queries one of the standard endpoints defined in DL-Learner.
 * @param predefinedEndpoint A string describing the endpoint e.g. DBpedia.
 * @param query The SPARQL query.
 * @param useCache Specify whether to use a cache for queries.
 * @return The result of the SPARQL query in JSON format or null if the endpoint does not exist.
 * @see SPARQLEndpoint#getEndpointByName;
 */
public String sparqlQueryPredefinedEndpoint(String predefinedEndpoint,String query,boolean useCache){
  SparqlEndpoint endpoint=SparqlEndpoint.getEndpointByName(predefinedEndpoint);
  SPARQLTasks st;
  if (useCache) {
    st=new SPARQLTasks(endpoint);
  }
 else {
    st=new SPARQLTasks(Cache.getDefaultCache(),endpoint);
  }
  return st.query(query);
}","/** 
 * Queries one of the standard endpoints defined in DL-Learner.
 * @param predefinedEndpoint A string describing the endpoint e.g. DBpedia.
 * @param query The SPARQL query.
 * @param useCache Specify whether to use a cache for queries.
 * @return The result of the SPARQL query in JSON format or null if the endpoint does not exist.
 * @see SPARQLEndpoint#getEndpointByName;
 */
@WebMethod public String sparqlQueryPredefinedEndpoint(String predefinedEndpoint,String query,boolean useCache){
  SparqlEndpoint endpoint=SparqlEndpoint.getEndpointByName(predefinedEndpoint);
  SPARQLTasks st;
  if (useCache) {
    st=new SPARQLTasks(endpoint);
  }
 else {
    st=new SPARQLTasks(Cache.getDefaultCache(),endpoint);
  }
  return st.query(query);
}"
10125,"/** 
 * Sets the ADD button enable after a concept is chosen.
 * @param m MouseEvent
 */
public void mousePressed(MouseEvent m){
  if (!view.getAddButton().isEnabled()) {
    view.getAddButton().setEnabled(true);
  }
}","/** 
 * Sets the ADD button enable after a concept is chosen.
 * @param m MouseEvent
 */
public void mousePressed(MouseEvent m){
  if (view.getSuggestClassPanel().getSuggestList().getSelectedValue() != null) {
    if (!view.getAddButton().isEnabled()) {
      view.getAddButton().setEnabled(true);
    }
  }
}"
10126,"/** 
 * Choses the right EvaluatedDescription object after a concept is chosen in the list.
 * @param m MouseEvent
 */
public void mouseClicked(MouseEvent m){
  EvaluatedDescription eDescription=null;
  SuggestListItem item=(SuggestListItem)view.getSuggestClassPanel().getSuggestList().getSelectedValue();
  String desc=item.getValue();
  if (model.getEvaluatedDescriptionList() != null) {
    for (Iterator<EvaluatedDescription> i=model.getEvaluatedDescriptionList().iterator(); i.hasNext(); ) {
      eDescription=i.next();
      if (desc.equals(eDescription.getDescription().toManchesterSyntaxString(editorKit.getModelManager().getActiveOntology().getURI() + ""String_Node_Str"",null))) {
        evaluatedDescription=eDescription;
        break;
      }
    }
  }
  if (m.getClickCount() == 2) {
    view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
  }
}","/** 
 * Choses the right EvaluatedDescription object after a concept is chosen in the list.
 * @param m MouseEvent
 */
public void mouseClicked(MouseEvent m){
  EvaluatedDescription eDescription=null;
  if (view.getSuggestClassPanel().getSuggestList().getSelectedValue() != null) {
    SuggestListItem item=(SuggestListItem)view.getSuggestClassPanel().getSuggestList().getSelectedValue();
    String desc=item.getValue();
    if (model.getEvaluatedDescriptionList() != null) {
      for (Iterator<EvaluatedDescription> i=model.getEvaluatedDescriptionList().iterator(); i.hasNext(); ) {
        eDescription=i.next();
        if (desc.equals(eDescription.getDescription().toManchesterSyntaxString(editorKit.getModelManager().getActiveOntology().getURI() + ""String_Node_Str"",null))) {
          evaluatedDescription=eDescription;
          break;
        }
      }
    }
    if (m.getClickCount() == 2) {
      view.getMoreDetailForSuggestedConceptsPanel().renderDetailPanel(evaluatedDescription);
    }
  }
 else {
    String message=""String_Node_Str"";
    view.renderErrorMessage(message);
  }
}"
10127,"/** 
 * This Method updates the the view of protege after adding a new concept.
 */
public void updateWindow(){
  mainWindow.getHandler().handleEditingFinished(mainWindow.getEditedObjects());
}","/** 
 * This Method updates the the view of protege after adding a new concept.
 */
public void updateWindow(){
  mainWindow.getHandler().handleEditingFinished(mainWindow.getEditedObjects());
  mainWindow.dispose();
}"
10128,"public void makeNegativeExamplesFromNearbyClasses(SortedSet<String> positiveSet,int sparqlResultLimit){
  SortedSet<String> classes=new TreeSet<String>();
  Iterator<String> instanceIter=positiveSet.iterator();
  while (classes.isEmpty() && instanceIter.hasNext()) {
    classes.addAll(sparqltasks.getClassesForInstance(instanceIter.next(),100));
  }
  String concept=classes.first();
  if (filterClasses != null && filterClasses.size() > 0) {
    boolean br=false;
    for (    String oneClass : classes) {
      Iterator<String> iter=filterClasses.iterator();
      while (iter.hasNext()) {
        if (!oneClass.startsWith(iter.next())) {
          concept=oneClass;
          br=true;
          break;
        }
      }
      if (br)       break;
    }
  }
  concept=concept.replaceAll(""String_Node_Str"",""String_Node_Str"");
  SortedSet<String> superClasses=sparqltasks.getSuperClasses(concept,1);
  classes=new TreeSet<String>();
  for (  String oneSuperClass : superClasses) {
    classes.addAll(sparqltasks.getSubClasses(oneSuperClass,1));
  }
  classes.remove(concept);
  for (  String oneClass : classes) {
    fromNearbyClasses.addAll(sparqltasks.retrieveInstancesForClassDescription(""String_Node_Str"" + oneClass + ""String_Node_Str"",sparqlResultLimit));
  }
  this.fromNearbyClasses.removeAll(fullPositiveSet);
}","public void makeNegativeExamplesFromNearbyClasses(SortedSet<String> positiveSet,int sparqlResultLimit){
  SortedSet<String> classes=new TreeSet<String>();
  Iterator<String> instanceIter=positiveSet.iterator();
  while (classes.isEmpty() && instanceIter.hasNext()) {
    classes.addAll(sparqltasks.getClassesForInstance(instanceIter.next(),100));
  }
  String concept=classes.first();
  if (filterClasses != null && filterClasses.size() > 0) {
    boolean br=false;
    for (    String oneClass : classes) {
      Iterator<String> iter=filterClasses.iterator();
      while (iter.hasNext()) {
        if (oneClass.startsWith(iter.next())) {
          break;
        }
 else {
          concept=oneClass;
          br=true;
          break;
        }
      }
      if (br)       break;
    }
  }
  concept=concept.replaceAll(""String_Node_Str"",""String_Node_Str"");
  SortedSet<String> superClasses=sparqltasks.getSuperClasses(concept,1);
  classes=new TreeSet<String>();
  for (  String oneSuperClass : superClasses) {
    classes.addAll(sparqltasks.getSubClasses(oneSuperClass,1));
  }
  classes.remove(concept);
  for (  String oneClass : classes) {
    try {
      fromNearbyClasses.addAll(sparqltasks.retrieveInstancesForClassDescription(""String_Node_Str"" + oneClass + ""String_Node_Str"",sparqlResultLimit));
    }
 catch (    Exception e) {
    }
  }
  this.fromNearbyClasses.removeAll(fullPositiveSet);
}"
10129,"public static void main(String[] args) throws ClassNotFoundException, SQLException, BackingStoreException {
  CalculatePageRank cal=new CalculatePageRank();
  cal.calculateCategoriesNewOntology();
}","public static void main(String[] args) throws ClassNotFoundException, SQLException, BackingStoreException {
  CalculatePageRank cal=new CalculatePageRank();
  Class.forName(""String_Node_Str"");
  String url=""String_Node_Str"" + dbServer + ""String_Node_Str""+ dbName;
  con=DriverManager.getConnection(url,dbUser,dbPass);
  cal.calculateCategoriesNewOntology();
  con.close();
}"
10130,"private void calculateCategoriesNewOntology(){
  try {
    Statement stmt;
    stmt=con.createStatement();
    BufferedReader in=new BufferedReader(new FileReader(categoriesNewOntology));
    String line;
    String[] split;
    String name;
    String label;
    String pred;
    int i=0;
    boolean isClassLabel;
    String className;
    while ((line=in.readLine()) != null) {
      split=line.split(""String_Node_Str"");
      if (split.length < 3)       continue;
      name=split[0].substring(1);
      pred=split[1].substring(2);
      if (i > 100)       break;
      if (pred.equals(""String_Node_Str"")) {
        label=split[2].substring(split[2].indexOf(""String_Node_Str"") + 1,split[2].lastIndexOf(""String_Node_Str""));
        if (name.length() > name.lastIndexOf(""String_Node_Str"") + 1)         className=name.substring(name.lastIndexOf(""String_Node_Str"") + 1,name.lastIndexOf(""String_Node_Str"") + 2);
 else         className=""String_Node_Str"";
        if (className.toLowerCase().equals(className))         isClassLabel=false;
 else         isClassLabel=true;
      }
 else {
        label=split[2].substring(2);
        isClassLabel=false;
      }
      if (pred.equals(""String_Node_Str"") && isClassLabel) {
        try {
          stmt.executeUpdate(""String_Node_Str"" + name + ""String_Node_Str""+ label+ ""String_Node_Str"");
        }
 catch (        Exception e) {
        }
      }
 else {
        if (pred.equals(""String_Node_Str"")) {
          try {
            stmt.executeUpdate(""String_Node_Str"" + label + ""String_Node_Str""+ name+ ""String_Node_Str"");
          }
 catch (          Exception e) {
          }
        }
      }
      if (i % 100000 == 0)       System.out.println(i);
      i++;
    }
    in.close();
  }
 catch (  FileNotFoundException e) {
    System.out.println(""String_Node_Str"");
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"");
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","private void calculateCategoriesNewOntology(){
  try {
    Statement stmt;
    stmt=con.createStatement();
    BufferedReader in=new BufferedReader(new FileReader(categoriesNewOntology));
    String line;
    String[] split;
    String name;
    String label;
    String pred;
    int i=0;
    boolean isClassLabel;
    String className;
    while ((line=in.readLine()) != null) {
      split=line.split(""String_Node_Str"");
      if (split.length < 3)       continue;
      name=split[0].substring(1);
      pred=split[1].substring(2);
      if (pred.equals(""String_Node_Str"")) {
        label=split[2].substring(split[2].indexOf(""String_Node_Str"") + 1,split[2].lastIndexOf(""String_Node_Str""));
        if (name.length() > name.lastIndexOf(""String_Node_Str"") + 1)         className=name.substring(name.lastIndexOf(""String_Node_Str"") + 1,name.lastIndexOf(""String_Node_Str"") + 2);
 else         className=""String_Node_Str"";
        if (className.toLowerCase().equals(className))         isClassLabel=false;
 else         isClassLabel=true;
      }
 else {
        label=split[2].substring(2);
        isClassLabel=false;
      }
      if (pred.equals(""String_Node_Str"") && isClassLabel) {
        try {
          stmt.executeUpdate(""String_Node_Str"" + name + ""String_Node_Str""+ label+ ""String_Node_Str"");
        }
 catch (        Exception e) {
        }
      }
 else {
        if (pred.equals(""String_Node_Str"")) {
          try {
            stmt.executeUpdate(""String_Node_Str"" + label + ""String_Node_Str""+ name+ ""String_Node_Str"");
          }
 catch (          Exception e) {
          }
        }
      }
      if (i % 100000 == 0)       System.out.println(i);
      i++;
    }
    in.close();
  }
 catch (  FileNotFoundException e) {
    System.out.println(""String_Node_Str"");
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"");
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}"
10131,"@WebMethod public String[] getNegativeExamples(int sessionID,int componentID,String[] positives,int results,String namespace,String[] filterClasses) throws ClientNotKnownException {
  System.out.println(filterClasses.length);
  int sparqlResultSetLimit=500;
  SortedSet<String> positiveSet=new TreeSet<String>(Arrays.asList(positives));
  SortedSet<String> filterSet=new TreeSet<String>(Arrays.asList(filterClasses));
  ClientState state=getState(sessionID);
  Component component=state.getComponent(componentID);
  SparqlKnowledgeSource ks=(SparqlKnowledgeSource)component;
  SPARQLTasks task=ks.getSPARQLTasks();
  AutomaticNegativeExampleFinderSPARQL finder=new AutomaticNegativeExampleFinderSPARQL(positiveSet,task,filterSet);
  finder.makeNegativeExamplesFromNearbyClasses(positiveSet,sparqlResultSetLimit);
  SortedSet<String> negExamples=finder.getNegativeExamples(results);
  if (negExamples.isEmpty()) {
    finder.makeNegativeExamplesFromParallelClasses(positiveSet,sparqlResultSetLimit);
    negExamples=finder.getNegativeExamples(results);
    if (negExamples.isEmpty()) {
      finder.makeNegativeExamplesFromRelatedInstances(positiveSet,namespace);
      negExamples=finder.getNegativeExamples(results);
      if (negExamples.isEmpty()) {
        finder.makeNegativeExamplesFromSuperClassesOfInstances(positiveSet,sparqlResultSetLimit);
        negExamples=finder.getNegativeExamples(results);
        if (negExamples.isEmpty()) {
          finder.makeNegativeExamplesFromRandomInstances();
          negExamples=finder.getNegativeExamples(results);
        }
      }
    }
  }
  return negExamples.toArray(new String[negExamples.size()]);
}","@WebMethod public String[] getNegativeExamples(int sessionID,int componentID,String[] positives,int results,String namespace,String[] filterClasses) throws ClientNotKnownException {
  int sparqlResultSetLimit=500;
  SortedSet<String> positiveSet=new TreeSet<String>(Arrays.asList(positives));
  SortedSet<String> filterSet=new TreeSet<String>(Arrays.asList(filterClasses));
  ClientState state=getState(sessionID);
  Component component=state.getComponent(componentID);
  SparqlKnowledgeSource ks=(SparqlKnowledgeSource)component;
  SPARQLTasks task=ks.getSPARQLTasks();
  AutomaticNegativeExampleFinderSPARQL finder=new AutomaticNegativeExampleFinderSPARQL(positiveSet,task,filterSet);
  finder.makeNegativeExamplesFromNearbyClasses(positiveSet,sparqlResultSetLimit);
  SortedSet<String> negExamples=finder.getNegativeExamples(results);
  if (negExamples.isEmpty()) {
    finder.makeNegativeExamplesFromParallelClasses(positiveSet,sparqlResultSetLimit);
    negExamples=finder.getNegativeExamples(results);
    if (negExamples.isEmpty()) {
      finder.makeNegativeExamplesFromRelatedInstances(positiveSet,namespace);
      negExamples=finder.getNegativeExamples(results);
      if (negExamples.isEmpty()) {
        finder.makeNegativeExamplesFromSuperClassesOfInstances(positiveSet,sparqlResultSetLimit);
        negExamples=finder.getNegativeExamples(results);
        if (negExamples.isEmpty()) {
          finder.makeNegativeExamplesFromRandomInstances();
          negExamples=finder.getNegativeExamples(results);
        }
      }
    }
  }
  return negExamples.toArray(new String[negExamples.size()]);
}"
10132,"@WebMethod public String[] getNegativeExamples(int sessionID,int componentID,String[] positives,int results,String namespace,String[] filterClasses) throws ClientNotKnownException {
  int sparqlResultSetLimit=500;
  SortedSet<String> positiveSet=new TreeSet<String>(Arrays.asList(positives));
  SortedSet<String> filterSet=new TreeSet<String>(Arrays.asList(filterClasses));
  ClientState state=getState(sessionID);
  Component component=state.getComponent(componentID);
  SparqlKnowledgeSource ks=(SparqlKnowledgeSource)component;
  SPARQLTasks task=ks.getSPARQLTasks();
  AutomaticNegativeExampleFinderSPARQL finder=new AutomaticNegativeExampleFinderSPARQL(positiveSet,task,filterSet);
  finder.makeNegativeExamplesFromNearbyClasses(positiveSet,sparqlResultSetLimit);
  SortedSet<String> negExamples=finder.getNegativeExamples(results);
  if (negExamples.isEmpty()) {
    finder.makeNegativeExamplesFromParallelClasses(positiveSet,sparqlResultSetLimit);
    negExamples=finder.getNegativeExamples(results);
    if (negExamples.isEmpty()) {
      finder.makeNegativeExamplesFromRelatedInstances(positiveSet,namespace);
      negExamples=finder.getNegativeExamples(results);
      if (negExamples.isEmpty()) {
        finder.makeNegativeExamplesFromSuperClassesOfInstances(positiveSet,sparqlResultSetLimit);
        negExamples=finder.getNegativeExamples(results);
        if (negExamples.isEmpty()) {
          finder.makeNegativeExamplesFromRandomInstances();
          negExamples=finder.getNegativeExamples(results);
        }
      }
    }
  }
  return negExamples.toArray(new String[negExamples.size()]);
}","@WebMethod public String[] getNegativeExamples(int sessionID,int componentID,String[] positives,int results,String namespace,String[] filterClasses) throws ClientNotKnownException {
  System.out.println(filterClasses.length);
  int sparqlResultSetLimit=500;
  SortedSet<String> positiveSet=new TreeSet<String>(Arrays.asList(positives));
  SortedSet<String> filterSet=new TreeSet<String>(Arrays.asList(filterClasses));
  ClientState state=getState(sessionID);
  Component component=state.getComponent(componentID);
  SparqlKnowledgeSource ks=(SparqlKnowledgeSource)component;
  SPARQLTasks task=ks.getSPARQLTasks();
  AutomaticNegativeExampleFinderSPARQL finder=new AutomaticNegativeExampleFinderSPARQL(positiveSet,task,filterSet);
  finder.makeNegativeExamplesFromNearbyClasses(positiveSet,sparqlResultSetLimit);
  SortedSet<String> negExamples=finder.getNegativeExamples(results);
  if (negExamples.isEmpty()) {
    finder.makeNegativeExamplesFromParallelClasses(positiveSet,sparqlResultSetLimit);
    negExamples=finder.getNegativeExamples(results);
    if (negExamples.isEmpty()) {
      finder.makeNegativeExamplesFromRelatedInstances(positiveSet,namespace);
      negExamples=finder.getNegativeExamples(results);
      if (negExamples.isEmpty()) {
        finder.makeNegativeExamplesFromSuperClassesOfInstances(positiveSet,sparqlResultSetLimit);
        negExamples=finder.getNegativeExamples(results);
        if (negExamples.isEmpty()) {
          finder.makeNegativeExamplesFromRandomInstances();
          negExamples=finder.getNegativeExamples(results);
        }
      }
    }
  }
  return negExamples.toArray(new String[negExamples.size()]);
}"
10133,"private void calculateCategoriesNewOntology(){
  try {
    Statement stmt;
    stmt=con.createStatement();
    BufferedReader in=new BufferedReader(new FileReader(categoriesNewOntology));
    String line;
    String[] split;
    String name;
    String label;
    String pred;
    int i=0;
    boolean isClassLabel;
    String className;
    while ((line=in.readLine()) != null) {
      split=line.split(""String_Node_Str"");
      if (split.length < 3)       continue;
      name=split[0].substring(1);
      if (name.length() > name.lastIndexOf(""String_Node_Str"") + 1)       className=name.substring(name.lastIndexOf(""String_Node_Str"") + 1,name.lastIndexOf(""String_Node_Str"") + 1);
 else       className=""String_Node_Str"";
      if (className.toLowerCase().equals(className))       isClassLabel=false;
 else       isClassLabel=true;
      pred=split[1].substring(2);
      if (pred.equals(""String_Node_Str""))       label=split[2].substring(split[2].indexOf(""String_Node_Str"") + 1,split[2].lastIndexOf(""String_Node_Str""));
 else       label=split[2].substring(2);
      if (pred.equals(""String_Node_Str"") && isClassLabel) {
        try {
          stmt.executeUpdate(""String_Node_Str"" + name + ""String_Node_Str""+ label+ ""String_Node_Str"");
        }
 catch (        Exception e) {
        }
      }
 else {
        if (pred.equals(""String_Node_Str"")) {
          try {
            stmt.executeUpdate(""String_Node_Str"" + label + ""String_Node_Str""+ name+ ""String_Node_Str"");
          }
 catch (          Exception e) {
          }
        }
      }
      if (i % 100000 == 0)       System.out.println(i);
      i++;
    }
    in.close();
    in=new BufferedReader(new FileReader(categoriesNewOntology2));
    i=0;
    while ((line=in.readLine()) != null) {
      split=line.split(""String_Node_Str"");
      name=split[0].substring(1);
      label=split[2].substring(2);
      try {
        stmt.executeUpdate(""String_Node_Str"" + name + ""String_Node_Str""+ label+ ""String_Node_Str"");
      }
 catch (      Exception e) {
      }
      if (i % 100000 == 0)       System.out.println(i);
      i++;
    }
    in.close();
  }
 catch (  FileNotFoundException e) {
    System.out.println(""String_Node_Str"");
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"");
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","private void calculateCategoriesNewOntology(){
  try {
    Statement stmt;
    stmt=con.createStatement();
    BufferedReader in=new BufferedReader(new FileReader(categoriesNewOntology));
    String line;
    String[] split;
    String name;
    String label;
    String pred;
    int i=0;
    boolean isClassLabel;
    String className;
    while ((line=in.readLine()) != null) {
      split=line.split(""String_Node_Str"");
      if (split.length < 3)       continue;
      name=split[0].substring(1);
      pred=split[1].substring(2);
      if (i > 100)       break;
      if (pred.equals(""String_Node_Str"")) {
        label=split[2].substring(split[2].indexOf(""String_Node_Str"") + 1,split[2].lastIndexOf(""String_Node_Str""));
        if (name.length() > name.lastIndexOf(""String_Node_Str"") + 1)         className=name.substring(name.lastIndexOf(""String_Node_Str"") + 1,name.lastIndexOf(""String_Node_Str"") + 2);
 else         className=""String_Node_Str"";
        if (className.toLowerCase().equals(className))         isClassLabel=false;
 else         isClassLabel=true;
      }
 else {
        label=split[2].substring(2);
        isClassLabel=false;
      }
      if (pred.equals(""String_Node_Str"") && isClassLabel) {
        try {
          stmt.executeUpdate(""String_Node_Str"" + name + ""String_Node_Str""+ label+ ""String_Node_Str"");
        }
 catch (        Exception e) {
        }
      }
 else {
        if (pred.equals(""String_Node_Str"")) {
          try {
            stmt.executeUpdate(""String_Node_Str"" + label + ""String_Node_Str""+ name+ ""String_Node_Str"");
          }
 catch (          Exception e) {
          }
        }
      }
      if (i % 100000 == 0)       System.out.println(i);
      i++;
    }
    in.close();
  }
 catch (  FileNotFoundException e) {
    System.out.println(""String_Node_Str"");
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"");
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}"
10134,"public static void main(String[] args) throws ClassNotFoundException, SQLException, BackingStoreException {
  CalculatePageRank cal=new CalculatePageRank();
  Class.forName(""String_Node_Str"");
  String url=""String_Node_Str"" + dbServer + ""String_Node_Str""+ dbName;
  con=DriverManager.getConnection(url,dbUser,dbPass);
  cal.calculateCategoriesNewOntology();
  cal.copyNumbers();
  con.close();
}","public static void main(String[] args) throws ClassNotFoundException, SQLException, BackingStoreException {
  CalculatePageRank cal=new CalculatePageRank();
  cal.calculateCategoriesNewOntology();
}"
10135,"protected void updateSimulation(Set<ELDescriptionNode> nUpdate){
  Stack<ELDescriptionNode> stack=new Stack<ELDescriptionNode>();
  stack.addAll(nUpdate);
  while (stack.size() != 0) {
    ELDescriptionNode v=stack.peek();
    for (    ELDescriptionNode w : levelNodeMapping.get(v.getLevel())) {
      if (!v.out.contains(w) && v.outSC1.contains(w) && checkSC2(v,w)) {
        extendSimulation(v,w);
        stack.add(v.getParent());
        stack.add(w.getParent());
      }
      if (!w.out.contains(v) && w.outSC1.contains(v) && checkSC2(w,v)) {
        extendSimulation(w,v);
        stack.add(v.getParent());
        stack.add(w.getParent());
      }
    }
  }
}","protected void updateSimulation(Set<ELDescriptionNode> nUpdate){
  LinkedList<ELDescriptionNode> list=new LinkedList<ELDescriptionNode>();
  list.addAll(nUpdate);
  while (list.size() != 0) {
    ELDescriptionNode v=list.pollFirst();
    for (    ELDescriptionNode w : levelNodeMapping.get(v.getLevel())) {
      if (!v.out.contains(w) && v.outSC1.contains(w) && checkSC2(v,w)) {
        extendSimulation(v,w);
        list.add(v.getParent());
        list.add(w.getParent());
      }
      if (!w.out.contains(v) && w.outSC1.contains(v) && checkSC2(w,v)) {
        extendSimulation(w,v);
        list.add(v.getParent());
        list.add(w.getParent());
      }
    }
  }
}"
10136,"@Test public void simulationTest(){
  Simulation s=new Simulation();
  ELDescriptionTree tree1=null;
  ELDescriptionTree tree2=null;
  ELDescriptionNode t1=new ELDescriptionNode(tree1);
  ELDescriptionNode t2=new ELDescriptionNode(tree2);
  TreeTuple tuple1=new TreeTuple(t1,t2);
  s.addTuple(tuple1);
  assertTrue(s.in(t2).size() == 1);
  ObjectProperty p=new ObjectProperty(""String_Node_Str"");
  TreeSet<NamedClass> l3=new TreeSet<NamedClass>();
  ELDescriptionNode t3=new ELDescriptionNode(t1,p,l3);
  assertTrue(t3.getLevel() == 2);
  assertTrue(tree1.getMaxLevel() == 2);
}","@Test public void simulationTest(){
  ReasoningService rs=TestOntologies.getTestOntology(TestOntology.EMPTY);
  Simulation s=new Simulation();
  ELDescriptionTree tree1=new ELDescriptionTree(rs);
  ELDescriptionTree tree2=new ELDescriptionTree(rs);
  ELDescriptionNode t1=new ELDescriptionNode(tree1);
  ELDescriptionNode t2=new ELDescriptionNode(tree2);
  TreeTuple tuple1=new TreeTuple(t1,t2);
  s.addTuple(tuple1);
  assertTrue(s.in(t2).size() == 1);
  ObjectProperty p=new ObjectProperty(""String_Node_Str"");
  TreeSet<NamedClass> l3=new TreeSet<NamedClass>();
  ELDescriptionNode t3=new ELDescriptionNode(t1,p,l3);
  assertTrue(t3.getLevel() == 2);
  assertTrue(tree1.getMaxLevel() == 2);
}"
10137,"@Test public void cloneTest() throws ParseException {
  Description d=KBParser.parseConcept(""String_Node_Str"");
  ConceptTransformation.cleanConcept(d);
  ELDescriptionTree tree=null;
  ELDescriptionTree treeCloned=tree.clone();
  ELDescriptionTreeComparator comparator=new ELDescriptionTreeComparator();
  assertTrue(comparator.compare(tree,treeCloned) == 0);
}","@Test public void cloneTest() throws ParseException {
  ReasoningService rs=TestOntologies.getTestOntology(TestOntology.EMPTY);
  Description d=KBParser.parseConcept(""String_Node_Str"");
  ConceptTransformation.cleanConcept(d);
  ELDescriptionTree tree=new ELDescriptionTree(rs,d);
  ELDescriptionTree treeCloned=tree.clone();
  ELDescriptionTreeComparator comparator=new ELDescriptionTreeComparator();
  assertTrue(comparator.compare(tree,treeCloned) == 0);
}"
10138,"/** 
 * Implementation of test case created by Christoph Haase for  new operator.
 * @throws ParseException Thrown if concept syntax does not correspondto current KB syntax.
 * @throws ComponentInitException 
 */
@Test public void refinementTest() throws ParseException, ComponentInitException {
  ComponentManager cm=ComponentManager.getInstance();
  String kbString=""String_Node_Str"";
  kbString+=""String_Node_Str"";
  kbString+=""String_Node_Str"";
  kbString+=""String_Node_Str"";
  kbString+=""String_Node_Str"";
  kbString+=""String_Node_Str"";
  kbString+=""String_Node_Str"";
  kbString+=""String_Node_Str"";
  kbString+=""String_Node_Str"";
  kbString+=""String_Node_Str"";
  KB kb=KBParser.parseKBFile(kbString);
  Description input=KBParser.parseConcept(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + input);
  KBFile source=new KBFile(kb);
  ReasonerComponent rc=cm.reasoner(FastInstanceChecker.class,source);
  ReasoningService rs=cm.reasoningService(rc);
  source.init();
  rc.init();
  rs.prepareSubsumptionHierarchy();
  rs.prepareRoleHierarchy();
  ELDown operator=new ELDown(rs);
  Set<String> desiredString=new TreeSet<String>();
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  ConceptComparator cc=new ConceptComparator();
  SortedSet<Description> desired=new TreeSet<Description>(cc);
  for (  String str : desiredString) {
    Description tmp=KBParser.parseConcept(str);
    ConceptTransformation.cleanConcept(tmp);
    desired.add(tmp);
    System.out.println(""String_Node_Str"" + tmp);
  }
  long startTime=System.nanoTime();
  Set<Description> refinements=operator.refine(input);
  long runTime=System.nanoTime() - startTime;
  System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(runTime,true,true) + ""String_Node_Str"");
  startTime=System.nanoTime();
  refinements=operator.refine(input);
  runTime=System.nanoTime() - startTime;
  System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(runTime,true,true) + ""String_Node_Str"");
  for (  Description refinement : refinements) {
    System.out.println(refinement);
  }
}","/** 
 * Implementation of test case created by Christoph Haase for  new operator.
 * @throws ParseException Thrown if concept syntax does not correspondto current KB syntax.
 * @throws ComponentInitException 
 */
@Test public void refinementTest() throws ParseException, ComponentInitException {
  ReasoningService rs=TestOntologies.getTestOntology(TestOntology.SIMPLE);
  Description input=KBParser.parseConcept(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + input);
  ELDown operator=new ELDown(rs);
  Set<String> desiredString=new TreeSet<String>();
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  desiredString.add(""String_Node_Str"");
  ConceptComparator cc=new ConceptComparator();
  SortedSet<Description> desired=new TreeSet<Description>(cc);
  for (  String str : desiredString) {
    Description tmp=KBParser.parseConcept(str);
    ConceptTransformation.cleanConcept(tmp);
    desired.add(tmp);
    System.out.println(""String_Node_Str"" + tmp);
  }
  long startTime=System.nanoTime();
  Set<Description> refinements=operator.refine(input);
  long runTime=System.nanoTime() - startTime;
  System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(runTime,true,true) + ""String_Node_Str"");
  startTime=System.nanoTime();
  refinements=operator.refine(input);
  runTime=System.nanoTime() - startTime;
  System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(runTime,true,true) + ""String_Node_Str"");
  for (  Description refinement : refinements) {
    boolean ok=desired.contains(refinement);
    System.out.println(ok + ""String_Node_Str"" + refinement);
  }
}"
10139,"/** 
 * Sends a SPARQL query using the Jena library. main format is JSON, use method getasjson
 */
public void send(){
  wasExecuted=true;
  ResultSet rs;
  String service=sparqlEndpoint.getURL().toString();
  writeToSparqlLog(""String_Node_Str"");
  SparqlQuery.writeToSparqlLog(""String_Node_Str"" + sparqlEndpoint.getHTTPRequest());
  writeToSparqlLog(sparqlQueryString);
  logger.trace(""String_Node_Str"");
  queryExecution=new QueryEngineHTTP(service,sparqlQueryString);
  for (  String dgu : sparqlEndpoint.getDefaultGraphURIs()) {
    queryExecution.addDefaultGraph(dgu);
  }
  for (  String ngu : sparqlEndpoint.getNamedGraphURIs()) {
    queryExecution.addNamedGraph(ngu);
  }
  HttpQuery.urlLimit=3 * 1024;
  Monitor httpTime=JamonMonitorLogger.getTimeMonitor(SparqlQuery.class,""String_Node_Str"").start();
  try {
    logger.debug(""String_Node_Str"" + sparqlQueryString.length() + ""String_Node_Str""+ sparqlEndpoint.getURL().toString());
    rs=queryExecution.execSelect();
    logger.trace(""String_Node_Str"");
    json=SparqlQuery.convertResultSetToJSON(ResultSetFactory.makeRewindable(rs));
    logger.trace(json);
  }
 catch (  HTTPException e) {
    logger.debug(""String_Node_Str"" + e.toString());
    logger.debug(""String_Node_Str"" + sparqlQueryString);
    writeToSparqlLog(""String_Node_Str"" + e.toString());
    isRunning=false;
    throw e;
  }
catch (  RuntimeException e) {
    logger.debug(""String_Node_Str"" + e.toString());
    logger.debug(""String_Node_Str"" + sparqlQueryString.substring(0,300).replaceAll(""String_Node_Str"",""String_Node_Str""));
    writeToSparqlLog(""String_Node_Str"" + e.toString());
    isRunning=false;
    throw e;
  }
  httpTime.stop();
  isRunning=false;
}","/** 
 * Sends a SPARQL query using the Jena library. main format is JSON, use method getasjson
 */
public void send(){
  wasExecuted=true;
  ResultSet rs;
  String service=sparqlEndpoint.getURL().toString();
  writeToSparqlLog(""String_Node_Str"");
  SparqlQuery.writeToSparqlLog(""String_Node_Str"" + sparqlEndpoint.getHTTPRequest());
  writeToSparqlLog(sparqlQueryString);
  logger.trace(""String_Node_Str"");
  queryExecution=new QueryEngineHTTP(service,sparqlQueryString);
  for (  String dgu : sparqlEndpoint.getDefaultGraphURIs()) {
    queryExecution.addDefaultGraph(dgu);
  }
  for (  String ngu : sparqlEndpoint.getNamedGraphURIs()) {
    queryExecution.addNamedGraph(ngu);
  }
  HttpQuery.urlLimit=3 * 1024;
  Monitor httpTime=JamonMonitorLogger.getTimeMonitor(SparqlQuery.class,""String_Node_Str"").start();
  try {
    logger.debug(""String_Node_Str"" + sparqlQueryString.length() + ""String_Node_Str""+ sparqlEndpoint.getURL().toString());
    rs=queryExecution.execSelect();
    logger.trace(""String_Node_Str"");
    json=SparqlQuery.convertResultSetToJSON(ResultSetFactory.makeRewindable(rs));
    logger.trace(json);
  }
 catch (  HTTPException e) {
    logger.debug(""String_Node_Str"" + e.toString());
    logger.debug(""String_Node_Str"" + sparqlQueryString);
    writeToSparqlLog(""String_Node_Str"" + e.toString());
    isRunning=false;
    throw e;
  }
catch (  RuntimeException e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + e.toString());
      int length=Math.min(sparqlQueryString.length(),300);
      logger.debug(""String_Node_Str"" + sparqlQueryString.substring(0,length - 1).replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
    writeToSparqlLog(""String_Node_Str"" + e.toString());
    isRunning=false;
    throw e;
  }
  httpTime.stop();
  isRunning=false;
}"
10140,"/** 
 * Initialise all components based on conf file.
 * @param file Conf file to read.
 * @throws ComponentInitException
 * @throws ParseException 
 * @throws FileNotFoundException 
 */
public Start(File file) throws ComponentInitException, FileNotFoundException, ParseException {
  String baseDir=file.getParentFile().getPath();
  String message=""String_Node_Str"";
  long cmStartTime=System.nanoTime();
  ComponentManager cm=ComponentManager.getInstance();
  long cmTime=System.nanoTime() - cmStartTime;
  message+=""String_Node_Str"" + Helper.prettyPrintNanoSeconds(cmTime) + ""String_Node_Str"";
  logger.info(message);
  ConfParser parser=ConfParser.parseFile(file);
  Monitor ksMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  sources=new HashSet<KnowledgeSource>();
  Map<URL,Class<? extends KnowledgeSource>> importedFiles=getImportedFiles(parser,baseDir);
  for (  Map.Entry<URL,Class<? extends KnowledgeSource>> entry : importedFiles.entrySet()) {
    KnowledgeSource ks=cm.knowledgeSource(entry.getValue());
    cm.applyConfigEntry(ks,""String_Node_Str"",entry.getKey());
    sources.add(ks);
    configureComponent(cm,ks,parser);
    initComponent(cm,ks);
  }
  ksMonitor.stop();
  Monitor rsMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  ConfFileOption reasonerOption=parser.getConfOptionsByName(""String_Node_Str"");
  Class<? extends ReasonerComponent> rcClass;
  if (reasonerOption != null) {
    rcClass=confMapper.getReasonerComponentClass(reasonerOption.getStringValue());
    if (rcClass == null) {
      handleError(""String_Node_Str"" + reasonerOption.getStringValue() + ""String_Node_Str""+ reasonerOption+ ""String_Node_Str""+ confMapper.getReasoners()+ ""String_Node_Str"");
    }
  }
 else {
    rcClass=FastInstanceChecker.class;
  }
  rc=cm.reasoner(rcClass,sources);
  configureComponent(cm,rc,parser);
  initComponent(cm,rc);
  rs=cm.reasoningService(rc);
  rsMonitor.stop();
  Monitor lpMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  ConfFileOption problemOption=parser.getConfOptionsByName(""String_Node_Str"");
  Class<? extends LearningProblem> lpClass;
  if (problemOption != null) {
    lpClass=confMapper.getLearningProblemClass(problemOption.getStringValue());
    if (lpClass == null) {
      handleError(""String_Node_Str"" + problemOption.getStringValue() + ""String_Node_Str""+ problemOption+ ""String_Node_Str""+ confMapper.getLearningProblems()+ ""String_Node_Str"");
    }
  }
 else {
    lpClass=PosNegDefinitionLP.class;
  }
  lp=cm.learningProblem(lpClass,rs);
  SortedSet<String> posExamples=parser.getPositiveExamples();
  SortedSet<String> negExamples=parser.getNegativeExamples();
  cm.applyConfigEntry(lp,""String_Node_Str"",posExamples);
  if (lpClass != PosOnlyDefinitionLP.class)   cm.applyConfigEntry(lp,""String_Node_Str"",negExamples);
  configureComponent(cm,lp,parser);
  initComponent(cm,lp);
  lpMonitor.stop();
  Monitor laMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  ConfFileOption algorithmOption=parser.getConfOptionsByName(""String_Node_Str"");
  Class<? extends LearningAlgorithm> laClass;
  if (problemOption != null) {
    laClass=confMapper.getLearningAlgorithmClass(algorithmOption.getStringValue());
    if (laClass == null) {
      handleError(""String_Node_Str"" + algorithmOption.getStringValue() + ""String_Node_Str""+ algorithmOption+ ""String_Node_Str""+ confMapper.getLearningAlgorithms()+ ""String_Node_Str"");
    }
  }
 else {
    laClass=ExampleBasedROLComponent.class;
  }
  try {
    la=cm.learningAlgorithm(laClass,lp,rs);
  }
 catch (  LearningProblemUnsupportedException e) {
    e.printStackTrace();
  }
  configureComponent(cm,la,parser);
  initComponent(cm,la);
  laMonitor.stop();
  performExports(parser,baseDir,sources,rs);
  processCLIOptions(cm,parser,rs,lp);
}","/** 
 * Initialise all components based on conf file.
 * @param file Conf file to read.
 * @throws ComponentInitException
 * @throws ParseException 
 * @throws FileNotFoundException 
 */
public Start(File file) throws ComponentInitException, FileNotFoundException, ParseException {
  String baseDir=file.getParentFile().getPath();
  String message=""String_Node_Str"";
  long cmStartTime=System.nanoTime();
  ComponentManager cm=ComponentManager.getInstance();
  long cmTime=System.nanoTime() - cmStartTime;
  message+=""String_Node_Str"" + Helper.prettyPrintNanoSeconds(cmTime) + ""String_Node_Str"";
  logger.info(message);
  ConfParser parser=ConfParser.parseFile(file);
  Monitor ksMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  sources=new HashSet<KnowledgeSource>();
  Map<URL,Class<? extends KnowledgeSource>> importedFiles=getImportedFiles(parser,baseDir);
  for (  Map.Entry<URL,Class<? extends KnowledgeSource>> entry : importedFiles.entrySet()) {
    KnowledgeSource ks=cm.knowledgeSource(entry.getValue());
    cm.applyConfigEntry(ks,""String_Node_Str"",entry.getKey());
    sources.add(ks);
    configureComponent(cm,ks,parser);
    initComponent(cm,ks);
  }
  ksMonitor.stop();
  Monitor rsMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  ConfFileOption reasonerOption=parser.getConfOptionsByName(""String_Node_Str"");
  Class<? extends ReasonerComponent> rcClass;
  if (reasonerOption != null) {
    rcClass=confMapper.getReasonerComponentClass(reasonerOption.getStringValue());
    if (rcClass == null) {
      handleError(""String_Node_Str"" + reasonerOption.getStringValue() + ""String_Node_Str""+ reasonerOption+ ""String_Node_Str""+ confMapper.getReasoners()+ ""String_Node_Str"");
    }
  }
 else {
    rcClass=FastInstanceChecker.class;
  }
  rc=cm.reasoner(rcClass,sources);
  configureComponent(cm,rc,parser);
  initComponent(cm,rc);
  rs=cm.reasoningService(rc);
  rsMonitor.stop();
  Monitor lpMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  ConfFileOption problemOption=parser.getConfOptionsByName(""String_Node_Str"");
  Class<? extends LearningProblem> lpClass;
  if (problemOption != null) {
    lpClass=confMapper.getLearningProblemClass(problemOption.getStringValue());
    if (lpClass == null) {
      handleError(""String_Node_Str"" + problemOption.getStringValue() + ""String_Node_Str""+ problemOption+ ""String_Node_Str""+ confMapper.getLearningProblems()+ ""String_Node_Str"");
    }
  }
 else {
    lpClass=PosNegDefinitionLP.class;
  }
  lp=cm.learningProblem(lpClass,rs);
  SortedSet<String> posExamples=parser.getPositiveExamples();
  SortedSet<String> negExamples=parser.getNegativeExamples();
  cm.applyConfigEntry(lp,""String_Node_Str"",posExamples);
  if (lpClass != PosOnlyDefinitionLP.class)   cm.applyConfigEntry(lp,""String_Node_Str"",negExamples);
  configureComponent(cm,lp,parser);
  initComponent(cm,lp);
  lpMonitor.stop();
  Monitor laMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  ConfFileOption algorithmOption=parser.getConfOptionsByName(""String_Node_Str"");
  Class<? extends LearningAlgorithm> laClass;
  if (algorithmOption != null) {
    laClass=confMapper.getLearningAlgorithmClass(algorithmOption.getStringValue());
    if (laClass == null) {
      handleError(""String_Node_Str"" + algorithmOption.getStringValue() + ""String_Node_Str""+ algorithmOption+ ""String_Node_Str""+ confMapper.getLearningAlgorithms()+ ""String_Node_Str"");
    }
  }
 else {
    laClass=ExampleBasedROLComponent.class;
  }
  try {
    la=cm.learningAlgorithm(laClass,lp,rs);
  }
 catch (  LearningProblemUnsupportedException e) {
    e.printStackTrace();
  }
  configureComponent(cm,la,parser);
  initComponent(cm,la);
  laMonitor.stop();
  performExports(parser,baseDir,sources,rs);
  processCLIOptions(cm,parser,rs,lp);
}"
10141,"@Override public void toOWLOntology(OWLAPIOntologyCollector owlAPIOntologyCollector){
}","@Override public void toOWLOntology(OWLAPIOntologyCollector owlAPIOntologyCollector){
  logger.error(""String_Node_Str"");
}"
10142,"@Override public void toOWLOntology(OWLAPIOntologyCollector owlAPIOntologyCollector){
  OWLDataFactory factory=owlAPIOntologyCollector.getFactory();
  OWLIndividual me=factory.getOWLIndividual(getURI());
  for (  ClassNode one : classes) {
    OWLClass c=factory.getOWLClass(one.getURI());
    owlAPIOntologyCollector.addAxiom(factory.getOWLClassAssertionAxiom(me,c));
    one.toOWLOntology(owlAPIOntologyCollector);
  }
  for (  ObjectPropertyNode one : objectProperties) {
    OWLIndividual o=factory.getOWLIndividual(one.getBPart().getURI());
    OWLObjectProperty p=factory.getOWLObjectProperty(one.getURI());
    factory.getOWLObjectPropertyAssertionAxiom(me,p,o);
    one.toOWLOntology(owlAPIOntologyCollector);
    one.getBPart().toOWLOntology(owlAPIOntologyCollector);
  }
  for (  DatatypePropertyNode one : datatypeProperties) {
    OWLDataProperty p=factory.getOWLDataProperty(one.getURI());
    Literal ln=one.getBPart().getLiteral();
    try {
      if (one.getBPart().isString()) {
        owlAPIOntologyCollector.addAxiom(factory.getOWLDataPropertyAssertionAxiom(me,p,ln.getString()));
      }
 else       if (one.getBPart().isDouble()) {
        owlAPIOntologyCollector.addAxiom(factory.getOWLDataPropertyAssertionAxiom(me,p,ln.getDouble()));
      }
 else       if (one.getBPart().isFloat()) {
        owlAPIOntologyCollector.addAxiom(factory.getOWLDataPropertyAssertionAxiom(me,p,ln.getFloat()));
      }
 else       if (one.getBPart().isInt()) {
        owlAPIOntologyCollector.addAxiom(factory.getOWLDataPropertyAssertionAxiom(me,p,ln.getInt()));
      }
 else       if (one.getBPart().isBoolean()) {
        owlAPIOntologyCollector.addAxiom(factory.getOWLDataPropertyAssertionAxiom(me,p,ln.getBoolean()));
      }
 else {
        tail(getURIString() + ""String_Node_Str"" + one.getURIString());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.exit(0);
    }
  }
}","@Override public void toOWLOntology(OWLAPIOntologyCollector owlAPIOntologyCollector){
  OWLDataFactory factory=owlAPIOntologyCollector.getFactory();
  OWLIndividual me=factory.getOWLIndividual(getURI());
  for (  ClassNode one : classes) {
    OWLClass c=factory.getOWLClass(one.getURI());
    OWLAxiom ax=factory.getOWLClassAssertionAxiom(me,c);
    owlAPIOntologyCollector.addAxiom(ax);
    one.toOWLOntology(owlAPIOntologyCollector);
  }
  for (  ObjectPropertyNode one : objectProperties) {
    OWLIndividual o=factory.getOWLIndividual(one.getBPart().getURI());
    OWLObjectProperty p=factory.getOWLObjectProperty(one.getURI());
    OWLAxiom ax=factory.getOWLObjectPropertyAssertionAxiom(me,p,o);
    owlAPIOntologyCollector.addAxiom(ax);
    one.toOWLOntology(owlAPIOntologyCollector);
    one.getBPart().toOWLOntology(owlAPIOntologyCollector);
  }
  for (  DatatypePropertyNode one : datatypeProperties) {
    OWLDataProperty p=factory.getOWLDataProperty(one.getURI());
    Literal ln=one.getBPart().getLiteral();
    try {
      if (one.getBPart().isString()) {
        owlAPIOntologyCollector.addAxiom(factory.getOWLDataPropertyAssertionAxiom(me,p,ln.getString()));
      }
 else       if (one.getBPart().isDouble()) {
        owlAPIOntologyCollector.addAxiom(factory.getOWLDataPropertyAssertionAxiom(me,p,ln.getDouble()));
      }
 else       if (one.getBPart().isFloat()) {
        owlAPIOntologyCollector.addAxiom(factory.getOWLDataPropertyAssertionAxiom(me,p,ln.getFloat()));
      }
 else       if (one.getBPart().isInt()) {
        owlAPIOntologyCollector.addAxiom(factory.getOWLDataPropertyAssertionAxiom(me,p,ln.getInt()));
      }
 else       if (one.getBPart().isBoolean()) {
        owlAPIOntologyCollector.addAxiom(factory.getOWLDataPropertyAssertionAxiom(me,p,ln.getBoolean()));
      }
 else {
        tail(getURIString() + ""String_Node_Str"" + one.getURIString());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.exit(0);
    }
  }
}"
10143,"/** 
 * @param args
 */
public static void main(String[] args){
  SimpleClock total=new SimpleClock();
  initLogger();
  logger.warn(""String_Node_Str"");
  prepareTable();
  List<String> l=getFiles();
  analyzeFiles(l);
  if (onJensMachine) {
    conductExperiment(Experiments.NORMAL_10s);
    conductExperiment(Experiments.NORMAL_100s);
    conductExperiment(Experiments.NORMAL_1000_CTESTS);
    conductExperiment(Experiments.NORMAL_10000_CTESTS);
  }
 else {
    conductExperiment(Experiments.SPARQL_10000_CTESTS_SPECIAL_REC2_NOPROP);
    conductExperiment(Experiments.SPARQL_10000_CTESTS_SPECIAL_REC2_NOCLOSEAFTERRECURSION);
    conductExperiment(Experiments.SPARQL_10000_CTESTS_SPECIAL_REC1);
    conductExperiment(Experiments.SPARQL_10000_CTESTS_SPECIAL_REC3);
    conductExperiment(Experiments.NORMAL_10000_CTESTS_FASTINST);
  }
  logger.warn(total.getAndSet(""String_Node_Str""));
  if (flawInExperiment) {
    logger.error(""String_Node_Str"");
  }
 else {
    logger.warn(""String_Node_Str"");
  }
}","/** 
 * @param args
 */
public static void main(String[] args){
  SimpleClock total=new SimpleClock();
  initLogger();
  logger.warn(""String_Node_Str"");
  prepareTable();
  List<String> l=getFiles();
  analyzeFiles(l);
  if (onJensMachine) {
    conductExperiment(Experiments.NORMAL_10s);
    conductExperiment(Experiments.NORMAL_100s);
    conductExperiment(Experiments.NORMAL_1000_CTESTS);
    conductExperiment(Experiments.NORMAL_10000_CTESTS);
  }
 else {
    conductExperiment(Experiments.NORMAL_10000_CTESTS_FASTINST);
  }
  logger.warn(total.getAndSet(""String_Node_Str""));
  if (flawInExperiment) {
    logger.error(""String_Node_Str"");
  }
 else {
    logger.warn(""String_Node_Str"");
  }
}"
10144,"public static void fillTable(Experiments exp,int count){
  String[] columnString=new String[]{count + ""String_Node_Str"",StringFormatter.convertStatPercentageToLatex(accFragment,1,false,true),StringFormatter.convertStatPercentageToLatex(accOnOnto,1,false,true),StringFormatter.convertStatPercentageToLatex(accPosExOnOnto,1,false,true),StringFormatter.convertStatPercentageToLatex(accNegExOnOnto,1,false,true),StringFormatter.convertStatDoubleToLatex(ksinitializationTime,1,""String_Node_Str"",""String_Node_Str"",true),StringFormatter.convertStatDoubleToLatex(reasonerInitializationTime,1,""String_Node_Str"",""String_Node_Str"",true),StringFormatter.convertStatDoubleToLatex(learningTime,1,""String_Node_Str"",""String_Node_Str"",true),StringFormatter.convertStatDoubleToLatex(nrOfExtractedAxioms,0,""String_Node_Str"",""String_Node_Str"",true),StringFormatter.convertStatDoubleToLatex(descLength,1,""String_Node_Str"",""String_Node_Str"",true),StringFormatter.convertStatDoubleToLatex(descDepth,1,""String_Node_Str"",""String_Node_Str"",true)};
  t.removeColumn(exp.toString());
  t.addColumn(new TableColumn(exp.toString(),columnString));
  Table.serializeColumns(t,tableDir,tableFile + exp + count);
  Files.createFile(new File(tableLatex),t.getLatexString());
}","public static void fillTable(Experiments exp,int count){
  String[] columnString=new String[]{count + ""String_Node_Str"",StringFormatter.convertStatPercentageToLatex(accFragment,1,false,true),StringFormatter.convertStatPercentageToLatex(accOnOnto,1,false,true),StringFormatter.convertStatPercentageToLatex(accPosExOnOnto,1,false,true),StringFormatter.convertStatPercentageToLatex(accNegExOnOnto,1,false,true),StringFormatter.convertStatDoubleToLatex(ksinitializationTime,1,""String_Node_Str"",""String_Node_Str"",true),StringFormatter.convertStatDoubleToLatex(reasonerInitializationTime,1,""String_Node_Str"",""String_Node_Str"",true),StringFormatter.convertStatDoubleToLatex(learningTime,1,""String_Node_Str"",""String_Node_Str"",true),StringFormatter.convertStatDoubleToLatex(nrOfExtractedAxioms,0,""String_Node_Str"",""String_Node_Str"",true),StringFormatter.convertStatDoubleToLatex(descLength,1,""String_Node_Str"",""String_Node_Str"",true),StringFormatter.convertStatDoubleToLatex(descDepth,1,""String_Node_Str"",""String_Node_Str"",true)};
  t.removeColumn(exp.toString());
  t.addColumn(new TableColumn(exp.toString(),columnString));
  String expId=exp.toString() + count;
  Table.serializeColumns(t,tableDir + expId,tableDir + expId + File.separator+ ""String_Node_Str"");
  Files.createFile(new File(tableDir + expId + File.separator+ ""String_Node_Str""),t.getLatexString());
}"
10145,"public static void prepareTable(){
  t=new Table(""String_Node_Str"");
  String[] labString=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  TableColumn labels=new TableColumn(""String_Node_Str"",labString);
  t.addColumn(labels);
  Table.serializeColumns(t,tableDir,tableFile);
  Files.createFile(new File(tableLatex),t.getLatexString());
}","public static void prepareTable(){
  t=new Table(""String_Node_Str"");
  String[] labString=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  TableColumn labels=new TableColumn(""String_Node_Str"",labString);
  t.addColumn(labels);
  Files.mkdir(tableDir);
}"
10146,"public static void serializeColumns(Table t,String dir,String tableFile){
  String column=""String_Node_Str"";
  String content=""String_Node_Str"";
  dir=StringFormatter.checkIfDirEndsOnSlashAndRemove(dir);
  Files.mkdir(dir);
  String div=(System.currentTimeMillis() % 10000) + ""String_Node_Str"";
  try {
    int i=0;
    for (    TableColumn c : t.getColumns()) {
      String header=URLEncoder.encode(c.getHeader(),""String_Node_Str"");
      String columnFileName=dir + File.separator + t.getTableName()+ (i++)+ header+ div+ column;
      c.serialize(new File(columnFileName));
      content+=columnFileName + System.getProperty(""String_Node_Str"");
    }
    Files.createFile(new File(tableFile),content);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void serializeColumns(Table t,String dir,String tableFile){
  String column=""String_Node_Str"";
  String content=""String_Node_Str"";
  dir=StringFormatter.checkIfDirEndsOnSlashAndRemove(dir);
  Files.mkdir(dir);
  try {
    int i=0;
    for (    TableColumn c : t.getColumns()) {
      String header=URLEncoder.encode(c.getHeader(),""String_Node_Str"");
      String columnFileName=dir + File.separator + t.getTableName()+ (i++)+ header+ column;
      c.serialize(new File(columnFileName));
      content+=columnFileName + System.getProperty(""String_Node_Str"");
    }
    Files.createFile(new File(tableFile),content);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
10147,"public static String getNaturalLanguageDescription(String descriptionKBSyntax) throws ParseException {
  System.out.println(descriptionKBSyntax);
  Description d=KBParser.parseConcept(descriptionKBSyntax);
  NaturalLanguageDescriptionConvertVisitor visitor=new NaturalLanguageDescriptionConvertVisitor();
  d.accept(visitor);
  String ret=visitor.getDescription();
  return ret;
}","public static String getNaturalLanguageDescription(String descriptionKBSyntax) throws ParseException {
  Description d=KBParser.parseConcept(descriptionKBSyntax);
  NaturalLanguageDescriptionConvertVisitor visitor=new NaturalLanguageDescriptionConvertVisitor();
  d.accept(visitor);
  String ret=visitor.getDescription();
  return ret;
}"
10148,"private void extendNodeProper(ExampleBasedNode node,Description concept,int maxLength,int recDepth){
  if (stop)   return;
  if (recDepth > maxRecDepth)   maxRecDepth=recDepth;
  long refinementCalcTimeNsStart=System.nanoTime();
  Set<Description> refinements=operator.refine(concept,maxLength,null);
  refinementCalcTimeNs+=System.nanoTime() - refinementCalcTimeNsStart;
  if (refinements.size() > maxNrOfRefinements)   maxNrOfRefinements=refinements.size();
  long childConceptsDeletionTimeNsStart=System.nanoTime();
  refinements.removeAll(node.getChildConcepts());
  childConceptsDeletionTimeNs+=System.nanoTime() - childConceptsDeletionTimeNsStart;
  long evaluateSetCreationTimeNsStart=System.nanoTime();
  TreeSet<Description> toEvaluateConcepts=new TreeSet<Description>(conceptComparator);
  Iterator<Description> it=refinements.iterator();
  while (it.hasNext()) {
    Description refinement=it.next();
    if (refinement.getLength() > node.getHorizontalExpansion()) {
      boolean propernessDetected=false;
      if (useShortConceptConstruction) {
        Description shortConcept=ConceptTransformation.getShortConcept(refinement,conceptComparator);
        int n=conceptComparator.compare(shortConcept,concept);
        if (n == 0) {
          propernessTestsAvoidedByShortConceptConstruction++;
          propernessDetected=true;
        }
      }
      if (!propernessDetected && useTooWeakList) {
        if (refinement instanceof Intersection) {
          boolean tooWeakElement=containsTooWeakElement((Intersection)refinement);
          if (tooWeakElement) {
            propernessTestsAvoidedByTooWeakList++;
            conceptTestsTooWeakList++;
            propernessDetected=true;
            properRefinements.add(refinement);
            tooWeakList.add(refinement);
            ExampleBasedNode newNode=new ExampleBasedNode(refinement);
            newNode.setHorizontalExpansion(refinement.getLength() - 1);
            newNode.setTooWeak(true);
            newNode.setQualityEvaluationMethod(ExampleBasedNode.QualityEvaluationMethod.TOO_WEAK_LIST);
            node.addChild(newNode);
            it.remove();
          }
        }
      }
      if (!propernessDetected) {
        toEvaluateConcepts.add(refinement);
      }
    }
  }
  evaluateSetCreationTimeNs+=System.nanoTime() - evaluateSetCreationTimeNsStart;
  Set<Description> improperConcepts=null;
  if (toEvaluateConcepts.size() > 0) {
    if (usePropernessChecks) {
      long propCalcReasoningStart=System.nanoTime();
      improperConcepts=rs.subsumes(toEvaluateConcepts,concept);
      propernessTestsReasoner+=toEvaluateConcepts.size();
      propernessCalcReasoningTimeNs+=System.nanoTime() - propCalcReasoningStart;
    }
  }
  long improperConceptsRemovalTimeNsStart=System.nanoTime();
  if (improperConcepts != null)   toEvaluateConcepts.removeAll(improperConcepts);
  Set<Description> properConcepts=toEvaluateConcepts;
  refinements.removeAll(properConcepts);
  improperConceptsRemovalTimeNs+=System.nanoTime() - improperConceptsRemovalTimeNsStart;
  for (  Description refinement : properConcepts) {
    long redundancyCheckTimeNsStart=System.nanoTime();
    boolean nonRedundant=properRefinements.add(refinement);
    redundancyCheckTimeNs+=System.nanoTime() - redundancyCheckTimeNsStart;
    if (!nonRedundant)     redundantConcepts++;
    if (nonRedundant) {
      ExampleBasedNode newNode=new ExampleBasedNode(refinement);
      newNode.setHorizontalExpansion(refinement.getLength() - 1);
      boolean qualityKnown=false;
      int quality=-2;
      if (useOverlyGeneralList && refinement instanceof Union) {
        if (containsOverlyGeneralElement((Union)refinement)) {
          conceptTestsOverlyGeneralList++;
          quality=nrOfNegativeExamples;
          qualityKnown=true;
          newNode.setQualityEvaluationMethod(ExampleBasedNode.QualityEvaluationMethod.OVERLY_GENERAL_LIST);
          newNode.setCoveredExamples(positiveExamples,negativeExamples);
        }
      }
      if (!qualityKnown) {
        long propCalcReasoningStart2=System.nanoTime();
        conceptTestsReasoner++;
        Set<Individual> coveredPositives=node.getCoveredPositives();
        Set<Individual> newlyCoveredPositives=new HashSet<Individual>();
        int misclassifiedPositives=nrOfPositiveExamples - coveredPositives.size();
        for (        Individual i : coveredPositives) {
          if (quality != -1) {
            boolean covered=rs.instanceCheck(refinement,i);
            if (!covered)             misclassifiedPositives++;
 else             newlyCoveredPositives.add(i);
            if (misclassifiedPositives > allowedMisclassifications)             quality=-1;
          }
        }
        Set<Individual> newlyCoveredNegatives=null;
        if (quality != -1) {
          Set<Individual> coveredNegatives=node.getCoveredNegatives();
          newlyCoveredNegatives=new HashSet<Individual>();
          for (          Individual i : coveredNegatives) {
            boolean covered=rs.instanceCheck(refinement,i);
            if (covered)             newlyCoveredNegatives.add(i);
          }
        }
        propernessCalcReasoningTimeNs+=System.nanoTime() - propCalcReasoningStart2;
        newNode.setQualityEvaluationMethod(ExampleBasedNode.QualityEvaluationMethod.REASONER);
        if (quality != -1) {
          quality=(nrOfPositiveExamples - newlyCoveredPositives.size()) + newlyCoveredNegatives.size();
          newNode.setCoveredExamples(newlyCoveredPositives,newlyCoveredNegatives);
        }
      }
      if (quality == -1) {
        newNode.setTooWeak(true);
        tooWeakList.add(refinement);
      }
 else {
        if (quality >= 0 && quality <= allowedMisclassifications && !posOnly) {
          solutionFound=true;
          solutions.add(refinement);
        }
        newCandidates.add(newNode);
        if ((newNode.getCoveredPositives().size() == nrOfPositiveExamples) && quality == nrOfNegativeExamples)         overlyGeneralList.add(refinement);
      }
      node.addChild(newNode);
      if (forceRefinementLengthIncrease && !newNode.isTooWeak()) {
        if (node.getConcept().getLength() == newNode.getConcept().getLength()) {
          extendNodeProper(newNode,refinement,maxLength,recDepth + 1);
        }
      }
    }
  }
  for (  Description refinement : refinements) {
    long redundancyCheckTimeNsStart=System.nanoTime();
    boolean redundant=properRefinements.contains(refinement);
    redundancyCheckTimeNs+=System.nanoTime() - redundancyCheckTimeNsStart;
    if (!redundant)     extendNodeProper(node,refinement,maxLength,recDepth + 1);
  }
}","private void extendNodeProper(ExampleBasedNode node,Description concept,int maxLength,int recDepth){
  if (stop)   return;
  if (recDepth > maxRecDepth)   maxRecDepth=recDepth;
  long refinementCalcTimeNsStart=System.nanoTime();
  Set<Description> refinements=operator.refine(concept,maxLength,null);
  refinementCalcTimeNs+=System.nanoTime() - refinementCalcTimeNsStart;
  if (refinements.size() > maxNrOfRefinements)   maxNrOfRefinements=refinements.size();
  long childConceptsDeletionTimeNsStart=System.nanoTime();
  refinements.removeAll(node.getChildConcepts());
  childConceptsDeletionTimeNs+=System.nanoTime() - childConceptsDeletionTimeNsStart;
  long evaluateSetCreationTimeNsStart=System.nanoTime();
  TreeSet<Description> toEvaluateConcepts=new TreeSet<Description>(conceptComparator);
  Iterator<Description> it=refinements.iterator();
  while (it.hasNext()) {
    Description refinement=it.next();
    if (refinement.getLength() > node.getHorizontalExpansion()) {
      boolean propernessDetected=false;
      if (useShortConceptConstruction) {
        Description shortConcept=ConceptTransformation.getShortConcept(refinement,conceptComparator);
        int n=conceptComparator.compare(shortConcept,concept);
        if (n == 0) {
          propernessTestsAvoidedByShortConceptConstruction++;
          propernessDetected=true;
        }
      }
      if (!propernessDetected && useTooWeakList) {
        if (refinement instanceof Intersection) {
          boolean tooWeakElement=containsTooWeakElement((Intersection)refinement);
          if (tooWeakElement) {
            propernessTestsAvoidedByTooWeakList++;
            conceptTestsTooWeakList++;
            propernessDetected=true;
            properRefinements.add(refinement);
            tooWeakList.add(refinement);
            ExampleBasedNode newNode=new ExampleBasedNode(refinement);
            newNode.setHorizontalExpansion(refinement.getLength() - 1);
            newNode.setTooWeak(true);
            newNode.setQualityEvaluationMethod(ExampleBasedNode.QualityEvaluationMethod.TOO_WEAK_LIST);
            node.addChild(newNode);
            it.remove();
          }
        }
      }
      if (!propernessDetected) {
        toEvaluateConcepts.add(refinement);
      }
    }
  }
  evaluateSetCreationTimeNs+=System.nanoTime() - evaluateSetCreationTimeNsStart;
  Set<Description> improperConcepts=null;
  if (toEvaluateConcepts.size() > 0) {
    if (usePropernessChecks) {
      long propCalcReasoningStart=System.nanoTime();
      improperConcepts=rs.subsumes(toEvaluateConcepts,concept);
      propernessTestsReasoner+=toEvaluateConcepts.size();
      propernessCalcReasoningTimeNs+=System.nanoTime() - propCalcReasoningStart;
    }
  }
  long improperConceptsRemovalTimeNsStart=System.nanoTime();
  if (improperConcepts != null)   toEvaluateConcepts.removeAll(improperConcepts);
  Set<Description> properConcepts=toEvaluateConcepts;
  refinements.removeAll(properConcepts);
  improperConceptsRemovalTimeNs+=System.nanoTime() - improperConceptsRemovalTimeNsStart;
  for (  Description refinement : properConcepts) {
    long redundancyCheckTimeNsStart=System.nanoTime();
    boolean nonRedundant=properRefinements.add(refinement);
    redundancyCheckTimeNs+=System.nanoTime() - redundancyCheckTimeNsStart;
    if (!nonRedundant)     redundantConcepts++;
    if (nonRedundant) {
      ExampleBasedNode newNode=new ExampleBasedNode(refinement);
      newNode.setHorizontalExpansion(refinement.getLength() - 1);
      boolean qualityKnown=false;
      int quality=-2;
      if (useOverlyGeneralList && refinement instanceof Union) {
        if (containsOverlyGeneralElement((Union)refinement)) {
          conceptTestsOverlyGeneralList++;
          quality=nrOfNegativeExamples;
          qualityKnown=true;
          newNode.setQualityEvaluationMethod(ExampleBasedNode.QualityEvaluationMethod.OVERLY_GENERAL_LIST);
          newNode.setCoveredExamples(positiveExamples,negativeExamples);
        }
      }
      if (!qualityKnown) {
        long propCalcReasoningStart2=System.nanoTime();
        conceptTestsReasoner++;
        Set<Individual> coveredPositives=node.getCoveredPositives();
        Set<Individual> newlyCoveredPositives=new HashSet<Individual>();
        int misclassifiedPositives=nrOfPositiveExamples - coveredPositives.size();
        for (        Individual i : coveredPositives) {
          if (quality != -1) {
            boolean covered=rs.instanceCheck(refinement,i);
            if (!covered)             misclassifiedPositives++;
 else             newlyCoveredPositives.add(i);
            if (misclassifiedPositives > allowedMisclassifications)             quality=-1;
          }
        }
        Set<Individual> newlyCoveredNegatives=null;
        if (quality != -1) {
          Set<Individual> coveredNegatives=node.getCoveredNegatives();
          newlyCoveredNegatives=new HashSet<Individual>();
          for (          Individual i : coveredNegatives) {
            boolean covered=rs.instanceCheck(refinement,i);
            if (covered)             newlyCoveredNegatives.add(i);
          }
        }
        propernessCalcReasoningTimeNs+=System.nanoTime() - propCalcReasoningStart2;
        newNode.setQualityEvaluationMethod(ExampleBasedNode.QualityEvaluationMethod.REASONER);
        if (quality != -1) {
          quality=(nrOfPositiveExamples - newlyCoveredPositives.size()) + newlyCoveredNegatives.size();
          newNode.setCoveredExamples(newlyCoveredPositives,newlyCoveredNegatives);
        }
      }
      if (quality == -1) {
        newNode.setTooWeak(true);
        tooWeakList.add(refinement);
      }
 else {
        if (quality >= 0 && quality <= allowedMisclassifications && !posOnly) {
          solutionFound=true;
          solutions.add(refinement);
        }
        newCandidates.add(newNode);
        if ((newNode.getCoveredPositives().size() == nrOfPositiveExamples) && quality == nrOfNegativeExamples)         overlyGeneralList.add(refinement);
      }
      node.addChild(newNode);
      if (forceRefinementLengthIncrease && !newNode.isTooWeak()) {
        if (node.getConcept().getLength() == newNode.getConcept().getLength()) {
          extendNodeProper(newNode,refinement,maxLength,recDepth + 1);
        }
      }
    }
  }
  for (  Description refinement : refinements) {
    long redundancyCheckTimeNsStart=System.nanoTime();
    boolean redundant=properRefinements.contains(refinement);
    redundancyCheckTimeNs+=System.nanoTime() - redundancyCheckTimeNsStart;
    if (!redundant) {
      extendNodeProper(node,refinement,maxLength,recDepth + 1);
    }
  }
}"
10149,"public int compare(Description concept1,Description concept2){
  if (concept1 instanceof Nothing) {
    if (concept2 instanceof Nothing)     return 0;
 else     return -1;
  }
 else   if (concept1 instanceof NamedClass) {
    if (concept2 instanceof Nothing)     return 1;
 else     if (concept2 instanceof NamedClass)     return ((NamedClass)concept1).getName().compareTo(((NamedClass)concept2).getName());
 else     return -1;
  }
 else   if (concept1 instanceof BooleanValueRestriction) {
    if (concept2 instanceof Nothing || concept2 instanceof NamedClass) {
      return 1;
    }
 else     if (concept2 instanceof BooleanValueRestriction) {
      int cmp=rc.compare(((BooleanValueRestriction)concept1).getRestrictedPropertyExpresssion(),((BooleanValueRestriction)concept2).getRestrictedPropertyExpresssion());
      if (cmp == 0) {
        boolean val1=((BooleanValueRestriction)concept1).getBooleanValue();
        boolean val2=((BooleanValueRestriction)concept2).getBooleanValue();
        if (val1) {
          if (val2)           return 0;
 else           return 1;
        }
 else {
          if (val2)           return -1;
 else           return 0;
        }
      }
 else       return cmp;
    }
 else     return -1;
  }
 else   if (concept1 instanceof DatatypeSomeRestriction) {
    if (concept2 instanceof Nothing || concept2 instanceof NamedClass || concept2 instanceof BooleanValueRestriction) {
      return 1;
    }
 else     if (concept2 instanceof DatatypeSomeRestriction) {
      DatatypeSomeRestriction dsr=(DatatypeSomeRestriction)concept1;
      DatatypeProperty dp=(DatatypeProperty)dsr.getRestrictedPropertyExpression();
      DatatypeSomeRestriction dsr2=(DatatypeSomeRestriction)concept2;
      DatatypeProperty dp2=(DatatypeProperty)dsr2.getRestrictedPropertyExpression();
      int cmp=rc.compare(dp,dp2);
      if (cmp == 0) {
        SimpleDoubleDataRange dr=(SimpleDoubleDataRange)dsr.getDataRange();
        SimpleDoubleDataRange dr2=(SimpleDoubleDataRange)dsr2.getDataRange();
        if ((dr instanceof DoubleMaxValue && dr2 instanceof DoubleMaxValue) || (dr instanceof DoubleMinValue && dr2 instanceof DoubleMinValue)) {
          double val1=dr.getValue();
          double val2=dr2.getValue();
          if (val1 > val2)           return 1;
 else           if (val1 == val2)           return 0;
 else           return -1;
        }
 else         if (dr instanceof DoubleMaxValue)         return 1;
 else         return -1;
      }
 else       return cmp;
    }
 else     return -1;
  }
 else   if (concept1 instanceof Thing) {
    if (concept2 instanceof Nothing || concept2 instanceof NamedClass || concept2 instanceof BooleanValueRestriction|| concept2 instanceof DatatypeSomeRestriction)     return 1;
 else     if (concept2 instanceof Thing)     return 0;
 else     return -1;
  }
 else   if (concept1 instanceof Negation) {
    if (concept2.getChildren().size() < 1)     return 1;
 else     if (concept2 instanceof Negation)     return compare(concept1.getChild(0),concept2.getChild(0));
 else     return -1;
  }
 else   if (concept1 instanceof ObjectSomeRestriction) {
    if (concept2.getChildren().size() < 1 || concept2 instanceof Negation)     return 1;
 else     if (concept2 instanceof ObjectSomeRestriction) {
      int roleCompare=rc.compare(((ObjectQuantorRestriction)concept1).getRole(),((ObjectQuantorRestriction)concept2).getRole());
      if (roleCompare == 0)       return compare(concept1.getChild(0),concept2.getChild(0));
 else       return roleCompare;
    }
 else     return -1;
  }
 else   if (concept1 instanceof ObjectAllRestriction) {
    if (concept2.getChildren().size() < 1 || concept2 instanceof Negation || concept2 instanceof ObjectSomeRestriction)     return 1;
 else     if (concept2 instanceof ObjectAllRestriction) {
      int roleCompare=rc.compare(((ObjectQuantorRestriction)concept1).getRole(),((ObjectQuantorRestriction)concept2).getRole());
      if (roleCompare == 0)       return compare(concept1.getChild(0),concept2.getChild(0));
 else       return roleCompare;
    }
 else     return -1;
  }
 else   if (concept1 instanceof ObjectValueRestriction) {
    if (concept2.getChildren().size() < 1 || concept2 instanceof Negation || concept2 instanceof ObjectSomeRestriction || concept2 instanceof ObjectAllRestriction)     return 1;
 else     if (concept2 instanceof ObjectValueRestriction) {
      int roleCompare=rc.compare(((ObjectValueRestriction)concept1).getRestrictedPropertyExpression(),((ObjectQuantorRestriction)concept2).getRestrictedPropertyExpression());
      if (roleCompare == 0) {
        Individual value1=((ObjectValueRestriction)concept1).getIndividual();
        Individual value2=((ObjectValueRestriction)concept2).getIndividual();
        return value1.compareTo(value2);
      }
 else {
        return roleCompare;
      }
    }
 else     return -1;
  }
 else   if (concept1 instanceof ObjectMinCardinalityRestriction) {
    if (concept2.getChildren().size() < 1 || concept2 instanceof Negation || concept2 instanceof ObjectQuantorRestriction || concept2 instanceof ObjectValueRestriction)     return 1;
 else     if (concept2 instanceof ObjectMinCardinalityRestriction) {
      int roleCompare=rc.compare(((ObjectCardinalityRestriction)concept1).getRole(),((ObjectCardinalityRestriction)concept2).getRole());
      if (roleCompare == 0) {
        Integer number1=((ObjectCardinalityRestriction)concept1).getNumber();
        Integer number2=((ObjectCardinalityRestriction)concept2).getNumber();
        int numberCompare=number1.compareTo(number2);
        if (numberCompare == 0)         return compare(concept1.getChild(0),concept2.getChild(0));
 else         return numberCompare;
      }
 else       return roleCompare;
    }
 else     return -1;
  }
 else   if (concept1 instanceof ObjectMaxCardinalityRestriction) {
    if (concept2.getChildren().size() < 1 || concept2 instanceof Negation || concept2 instanceof ObjectQuantorRestriction || concept2 instanceof ObjectValueRestriction || concept2 instanceof ObjectMinCardinalityRestriction)     return 1;
 else     if (concept2 instanceof ObjectMaxCardinalityRestriction) {
      int roleCompare=rc.compare(((ObjectCardinalityRestriction)concept1).getRole(),((ObjectCardinalityRestriction)concept2).getRole());
      if (roleCompare == 0) {
        Integer number1=((ObjectCardinalityRestriction)concept1).getNumber();
        Integer number2=((ObjectCardinalityRestriction)concept2).getNumber();
        int numberCompare=number1.compareTo(number2);
        if (numberCompare == 0)         return compare(concept1.getChild(0),concept2.getChild(0));
 else         return numberCompare;
      }
 else       return roleCompare;
    }
 else     return -1;
  }
 else   if (concept1 instanceof Intersection) {
    if (concept2.getChildren().size() < 2)     return 1;
 else     if (concept2 instanceof Intersection) {
      int nrOfChildrenConcept1=concept1.getChildren().size();
      int nrOfChildrenConcept2=concept2.getChildren().size();
      if (nrOfChildrenConcept1 > nrOfChildrenConcept2)       return 1;
 else       if (nrOfChildrenConcept1 == nrOfChildrenConcept2) {
        for (int i=0; i < nrOfChildrenConcept1; i++) {
          int compareValue=compare(concept1.getChild(i),concept2.getChild(i));
          if (compareValue > 0)           return 1;
 else           if (compareValue < 0)           return -1;
        }
        return 0;
      }
 else       return -1;
    }
 else     return -1;
  }
 else   if (concept1 instanceof Union) {
    if (concept2.getChildren().size() < 2 || concept2 instanceof Intersection)     return 1;
 else     if (concept2 instanceof Union) {
      int nrOfChildrenConcept1=concept1.getChildren().size();
      int nrOfChildrenConcept2=concept2.getChildren().size();
      if (nrOfChildrenConcept1 > nrOfChildrenConcept2)       return 1;
 else       if (nrOfChildrenConcept1 == nrOfChildrenConcept2) {
        for (int i=0; i < nrOfChildrenConcept1; i++) {
          int compareValue=compare(concept1.getChild(i),concept2.getChild(i));
          if (compareValue > 0)           return 1;
 else           if (compareValue < 0)           return -1;
        }
        return 0;
      }
 else       return -1;
    }
 else     return -1;
  }
 else   throw new RuntimeException(concept1.toString());
}","public int compare(Description concept1,Description concept2){
  if (concept1 instanceof Nothing) {
    if (concept2 instanceof Nothing)     return 0;
 else     return -1;
  }
 else   if (concept1 instanceof NamedClass) {
    if (concept2 instanceof Nothing)     return 1;
 else     if (concept2 instanceof NamedClass)     return ((NamedClass)concept1).getName().compareTo(((NamedClass)concept2).getName());
 else     return -1;
  }
 else   if (concept1 instanceof BooleanValueRestriction) {
    if (concept2 instanceof Nothing || concept2 instanceof NamedClass) {
      return 1;
    }
 else     if (concept2 instanceof BooleanValueRestriction) {
      int cmp=rc.compare(((BooleanValueRestriction)concept1).getRestrictedPropertyExpresssion(),((BooleanValueRestriction)concept2).getRestrictedPropertyExpresssion());
      if (cmp == 0) {
        boolean val1=((BooleanValueRestriction)concept1).getBooleanValue();
        boolean val2=((BooleanValueRestriction)concept2).getBooleanValue();
        if (val1) {
          if (val2)           return 0;
 else           return 1;
        }
 else {
          if (val2)           return -1;
 else           return 0;
        }
      }
 else       return cmp;
    }
 else     return -1;
  }
 else   if (concept1 instanceof DatatypeSomeRestriction) {
    if (concept2 instanceof Nothing || concept2 instanceof NamedClass || concept2 instanceof BooleanValueRestriction) {
      return 1;
    }
 else     if (concept2 instanceof DatatypeSomeRestriction) {
      DatatypeSomeRestriction dsr=(DatatypeSomeRestriction)concept1;
      DatatypeProperty dp=(DatatypeProperty)dsr.getRestrictedPropertyExpression();
      DatatypeSomeRestriction dsr2=(DatatypeSomeRestriction)concept2;
      DatatypeProperty dp2=(DatatypeProperty)dsr2.getRestrictedPropertyExpression();
      int cmp=rc.compare(dp,dp2);
      if (cmp == 0) {
        SimpleDoubleDataRange dr=(SimpleDoubleDataRange)dsr.getDataRange();
        SimpleDoubleDataRange dr2=(SimpleDoubleDataRange)dsr2.getDataRange();
        if ((dr instanceof DoubleMaxValue && dr2 instanceof DoubleMaxValue) || (dr instanceof DoubleMinValue && dr2 instanceof DoubleMinValue)) {
          double val1=dr.getValue();
          double val2=dr2.getValue();
          if (val1 > val2)           return 1;
 else           if (val1 == val2)           return 0;
 else           return -1;
        }
 else         if (dr instanceof DoubleMaxValue)         return 1;
 else         return -1;
      }
 else       return cmp;
    }
 else     return -1;
  }
 else   if (concept1 instanceof ObjectValueRestriction) {
    if (concept2 instanceof Nothing || concept2 instanceof NamedClass || concept2 instanceof BooleanValueRestriction|| concept2 instanceof DatatypeSomeRestriction) {
      return 1;
    }
 else     if (concept2 instanceof ObjectValueRestriction) {
      int roleCompare=rc.compare(((ObjectValueRestriction)concept1).getRestrictedPropertyExpression(),((ObjectValueRestriction)concept2).getRestrictedPropertyExpression());
      if (roleCompare == 0) {
        Individual value1=((ObjectValueRestriction)concept1).getIndividual();
        Individual value2=((ObjectValueRestriction)concept2).getIndividual();
        return value1.compareTo(value2);
      }
 else {
        return roleCompare;
      }
    }
 else     return -1;
  }
 else   if (concept1 instanceof Thing) {
    if (concept2 instanceof Nothing || concept2 instanceof NamedClass || concept2 instanceof BooleanValueRestriction|| concept2 instanceof DatatypeSomeRestriction|| concept2 instanceof ObjectValueRestriction)     return 1;
 else     if (concept2 instanceof Thing)     return 0;
 else     return -1;
  }
 else   if (concept1 instanceof Negation) {
    if (concept2.getChildren().size() < 1)     return 1;
 else     if (concept2 instanceof Negation)     return compare(concept1.getChild(0),concept2.getChild(0));
 else     return -1;
  }
 else   if (concept1 instanceof ObjectSomeRestriction) {
    if (concept2.getChildren().size() < 1 || concept2 instanceof Negation)     return 1;
 else     if (concept2 instanceof ObjectSomeRestriction) {
      int roleCompare=rc.compare(((ObjectQuantorRestriction)concept1).getRole(),((ObjectQuantorRestriction)concept2).getRole());
      if (roleCompare == 0)       return compare(concept1.getChild(0),concept2.getChild(0));
 else       return roleCompare;
    }
 else     return -1;
  }
 else   if (concept1 instanceof ObjectAllRestriction) {
    if (concept2.getChildren().size() < 1 || concept2 instanceof Negation || concept2 instanceof ObjectSomeRestriction)     return 1;
 else     if (concept2 instanceof ObjectAllRestriction) {
      int roleCompare=rc.compare(((ObjectQuantorRestriction)concept1).getRole(),((ObjectQuantorRestriction)concept2).getRole());
      if (roleCompare == 0)       return compare(concept1.getChild(0),concept2.getChild(0));
 else       return roleCompare;
    }
 else     return -1;
  }
 else   if (concept1 instanceof ObjectMinCardinalityRestriction) {
    if (concept2.getChildren().size() < 1 || concept2 instanceof Negation || concept2 instanceof ObjectQuantorRestriction)     return 1;
 else     if (concept2 instanceof ObjectMinCardinalityRestriction) {
      int roleCompare=rc.compare(((ObjectCardinalityRestriction)concept1).getRole(),((ObjectCardinalityRestriction)concept2).getRole());
      if (roleCompare == 0) {
        Integer number1=((ObjectCardinalityRestriction)concept1).getNumber();
        Integer number2=((ObjectCardinalityRestriction)concept2).getNumber();
        int numberCompare=number1.compareTo(number2);
        if (numberCompare == 0)         return compare(concept1.getChild(0),concept2.getChild(0));
 else         return numberCompare;
      }
 else       return roleCompare;
    }
 else     return -1;
  }
 else   if (concept1 instanceof ObjectMaxCardinalityRestriction) {
    if (concept2.getChildren().size() < 1 || concept2 instanceof Negation || concept2 instanceof ObjectQuantorRestriction || concept2 instanceof ObjectMinCardinalityRestriction)     return 1;
 else     if (concept2 instanceof ObjectMaxCardinalityRestriction) {
      int roleCompare=rc.compare(((ObjectCardinalityRestriction)concept1).getRole(),((ObjectCardinalityRestriction)concept2).getRole());
      if (roleCompare == 0) {
        Integer number1=((ObjectCardinalityRestriction)concept1).getNumber();
        Integer number2=((ObjectCardinalityRestriction)concept2).getNumber();
        int numberCompare=number1.compareTo(number2);
        if (numberCompare == 0)         return compare(concept1.getChild(0),concept2.getChild(0));
 else         return numberCompare;
      }
 else       return roleCompare;
    }
 else     return -1;
  }
 else   if (concept1 instanceof Intersection) {
    if (concept2.getChildren().size() < 2)     return 1;
 else     if (concept2 instanceof Intersection) {
      int nrOfChildrenConcept1=concept1.getChildren().size();
      int nrOfChildrenConcept2=concept2.getChildren().size();
      if (nrOfChildrenConcept1 > nrOfChildrenConcept2)       return 1;
 else       if (nrOfChildrenConcept1 == nrOfChildrenConcept2) {
        for (int i=0; i < nrOfChildrenConcept1; i++) {
          int compareValue=compare(concept1.getChild(i),concept2.getChild(i));
          if (compareValue > 0)           return 1;
 else           if (compareValue < 0)           return -1;
        }
        return 0;
      }
 else       return -1;
    }
 else     return -1;
  }
 else   if (concept1 instanceof Union) {
    if (concept2.getChildren().size() < 2 || concept2 instanceof Intersection)     return 1;
 else     if (concept2 instanceof Union) {
      int nrOfChildrenConcept1=concept1.getChildren().size();
      int nrOfChildrenConcept2=concept2.getChildren().size();
      if (nrOfChildrenConcept1 > nrOfChildrenConcept2)       return 1;
 else       if (nrOfChildrenConcept1 == nrOfChildrenConcept2) {
        for (int i=0; i < nrOfChildrenConcept1; i++) {
          int compareValue=compare(concept1.getChild(i),concept2.getChild(i));
          if (compareValue > 0)           return 1;
 else           if (compareValue < 0)           return -1;
        }
        return 0;
      }
 else       return -1;
    }
 else     return -1;
  }
 else   throw new RuntimeException(concept1.toString());
}"
10150,"private void computeM(NamedClass nc){
  long mComputationTimeStartNs=System.nanoTime();
  mA.put(nc,new TreeMap<Integer,SortedSet<Description>>());
  for (int i=1; i <= mMaxLength; i++) {
    mA.get(nc).put(i,new TreeSet<Description>(conceptComparator));
  }
  SortedSet<Description> m1=rs.getMoreSpecialConcepts(nc);
  mA.get(nc).put(1,m1);
  SortedSet<Description> m2=new TreeSet<Description>(conceptComparator);
  if (useNegation) {
    SortedSet<Description> m2tmp=rs.getMoreGeneralConcepts(new Nothing());
    for (    Description c : m2tmp) {
      if (c instanceof Thing)       m2.add(c);
 else {
        NamedClass a=(NamedClass)c;
        if (!isNotADisjoint(a,nc) && isNotAMeaningful(a,nc))         m2.add(new Negation(a));
      }
    }
  }
  computeMg(nc);
  if (useBooleanDatatypes) {
    Set<DatatypeProperty> booleanDPs=mgbd.get(nc);
    for (    DatatypeProperty dp : booleanDPs) {
      m2.add(new BooleanValueRestriction(dp,true));
      m2.add(new BooleanValueRestriction(dp,false));
    }
  }
  mA.get(nc).put(2,m2);
  SortedSet<Description> m3=new TreeSet<Description>(conceptComparator);
  if (useExistsConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectSomeRestriction(r,new Thing()));
    }
  }
  if (useAllConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectAllRestriction(r,new Thing()));
    }
  }
  if (useDoubleDatatypes) {
    Set<DatatypeProperty> doubleDPs=mgdd.get(nc);
    for (    DatatypeProperty dp : doubleDPs) {
      DoubleMaxValue max=new DoubleMaxValue(splits.get(dp).get(splits.get(dp).size() - 1));
      DoubleMinValue min=new DoubleMinValue(splits.get(dp).get(0));
      m3.add(new DatatypeSomeRestriction(dp,max));
      m3.add(new DatatypeSomeRestriction(dp,min));
    }
  }
  mA.get(nc).put(3,m3);
  SortedSet<Description> m4=new TreeSet<Description>(conceptComparator);
  if (useCardinalityRestrictions) {
    for (    ObjectProperty r : mgr.get(nc)) {
      int maxFillers=maxNrOfFillers.get(r);
      if (maxFillers > 0)       m4.add(new ObjectMaxCardinalityRestriction(maxFillers - 1,r,new Thing()));
    }
  }
  mA.get(nc).put(4,m4);
  mComputationTimeNs+=System.nanoTime() - mComputationTimeStartNs;
}","private void computeM(NamedClass nc){
  long mComputationTimeStartNs=System.nanoTime();
  mA.put(nc,new TreeMap<Integer,SortedSet<Description>>());
  for (int i=1; i <= mMaxLength; i++) {
    mA.get(nc).put(i,new TreeSet<Description>(conceptComparator));
  }
  SortedSet<Description> m1=rs.getMoreSpecialConcepts(nc);
  mA.get(nc).put(1,m1);
  SortedSet<Description> m2=new TreeSet<Description>(conceptComparator);
  if (useNegation) {
    SortedSet<Description> m2tmp=rs.getMoreGeneralConcepts(new Nothing());
    for (    Description c : m2tmp) {
      if (c instanceof Thing)       m2.add(c);
 else {
        NamedClass a=(NamedClass)c;
        if (!isNotADisjoint(a,nc) && isNotAMeaningful(a,nc))         m2.add(new Negation(a));
      }
    }
  }
  computeMg(nc);
  if (useBooleanDatatypes) {
    Set<DatatypeProperty> booleanDPs=mgbd.get(nc);
    for (    DatatypeProperty dp : booleanDPs) {
      m2.add(new BooleanValueRestriction(dp,true));
      m2.add(new BooleanValueRestriction(dp,false));
    }
  }
  mA.get(nc).put(2,m2);
  SortedSet<Description> m3=new TreeSet<Description>(conceptComparator);
  if (useExistsConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectSomeRestriction(r,new Thing()));
    }
  }
  if (useAllConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectAllRestriction(r,new Thing()));
    }
  }
  if (useDoubleDatatypes) {
    Set<DatatypeProperty> doubleDPs=mgdd.get(nc);
    for (    DatatypeProperty dp : doubleDPs) {
      if (splits.get(dp).size() > 0) {
        DoubleMaxValue max=new DoubleMaxValue(splits.get(dp).get(splits.get(dp).size() - 1));
        DoubleMinValue min=new DoubleMinValue(splits.get(dp).get(0));
        m3.add(new DatatypeSomeRestriction(dp,max));
        m3.add(new DatatypeSomeRestriction(dp,min));
      }
    }
  }
  mA.get(nc).put(3,m3);
  SortedSet<Description> m4=new TreeSet<Description>(conceptComparator);
  if (useCardinalityRestrictions) {
    for (    ObjectProperty r : mgr.get(nc)) {
      int maxFillers=maxNrOfFillers.get(r);
      if (maxFillers > 0)       m4.add(new ObjectMaxCardinalityRestriction(maxFillers - 1,r,new Thing()));
    }
  }
  mA.get(nc).put(4,m4);
  mComputationTimeNs+=System.nanoTime() - mComputationTimeStartNs;
}"
10151,"public static Manipulator getDBpediaNavigatorManipulator(){
  Manipulator m=new Manipulator();
  m.addRule(new DBPediaNavigatorCityLocatorRule(Months.JANUARY));
  m.addRule(new DBpediaNavigatorOtherRule(Months.DECEMBER));
  return m;
}","public static Manipulator getDBpediaNavigatorManipulator(){
  Manipulator m=new Manipulator();
  m.addRule(new DBpediaNavigatorFilterRule(Months.JANUARY));
  return m;
}"
10152,"public Manipulator getManipulator(){
  if (configurator.getPredefinedManipulator() == null) {
    return Manipulator.getManipulatorByName(configurator.getPredefinedManipulator());
  }
 else {
    Manipulator m=Manipulator.getDefaultManipulator();
    for (    StringTuple st : configurator.getReplacePredicate()) {
      m.addRule(new PredicateReplacementRule(Months.MAY,st.a,st.b));
    }
    for (    StringTuple st : configurator.getReplaceObject()) {
      m.addRule(new ObjectReplacementRule(Months.MAY,st.a,st.b));
    }
    return m;
  }
}","public Manipulator getManipulator(){
  if (configurator.getPredefinedManipulator() != null) {
    return Manipulator.getManipulatorByName(configurator.getPredefinedManipulator());
  }
 else {
    Manipulator m=Manipulator.getDefaultManipulator();
    for (    StringTuple st : configurator.getReplacePredicate()) {
      m.addRule(new PredicateReplacementRule(Months.MAY,st.a,st.b));
    }
    for (    StringTuple st : configurator.getReplaceObject()) {
      m.addRule(new ObjectReplacementRule(Months.MAY,st.a,st.b));
    }
    return m;
  }
}"
10153,"@WebMethod public String getCurrentlyBestEvaluatedDescriptions(int id,int limit) throws ClientNotKnownException {
  ClientState state=getState(id);
  List<EvaluatedDescription> descriptions=state.getLearningAlgorithm().getCurrentlyBestEvaluatedDescriptions(limit);
  String json=""String_Node_Str"";
  int count=1;
  for (  EvaluatedDescription description : descriptions) {
    json+=""String_Node_Str"" + count + ""String_Node_Str""+ description.asJSON();
    count++;
  }
  json+=""String_Node_Str"";
  return json;
}","@WebMethod public String getCurrentlyBestEvaluatedDescriptions(int id,int limit) throws ClientNotKnownException {
  return currentlyBestEvaluatedDescriptions(id,limit,-1,false);
}"
10154,"public static String getSparqlQuery(Description description,int resultLimit){
  SparqlQueryDescriptionConvertVisitor visitor=new SparqlQueryDescriptionConvertVisitor();
  description.accept(visitor);
  String ret=visitor.getSparqlQuery(resultLimit);
  while (ret.contains(""String_Node_Str"")) {
    ret=ret.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return ret;
}","public static String getSparqlQuery(Description description,int resultLimit){
  SparqlQueryDescriptionConvertVisitor visitor=new SparqlQueryDescriptionConvertVisitor();
  description.accept(visitor);
  String ret=visitor.getSparqlQuery(resultLimit);
  return ret;
}"
10155,"/** 
 * Initialise all components based on conf file.
 * @param file Conf file to read.
 * @throws ComponentInitException
 */
public Start(File file) throws ComponentInitException {
  String baseDir=file.getParentFile().getPath();
  String message=""String_Node_Str"";
  long cmStartTime=System.nanoTime();
  ComponentManager cm=ComponentManager.getInstance();
  long cmTime=System.nanoTime() - cmStartTime;
  message+=""String_Node_Str"" + Helper.prettyPrintNanoSeconds(cmTime) + ""String_Node_Str"";
  logger.info(message);
  Map<Class<? extends Component>,String> componentPrefixMapping=createComponentPrefixMapping();
  ConfParser parser=ConfParser.parseFile(file);
  Monitor ksMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  Set<KnowledgeSource> sources=new HashSet<KnowledgeSource>();
  Map<URL,Class<? extends KnowledgeSource>> importedFiles=getImportedFiles(parser,baseDir);
  for (  Map.Entry<URL,Class<? extends KnowledgeSource>> entry : importedFiles.entrySet()) {
    KnowledgeSource ks=cm.knowledgeSource(entry.getValue());
    cm.applyConfigEntry(ks,""String_Node_Str"",entry.getKey().toString());
    sources.add(ks);
    configureComponent(cm,ks,componentPrefixMapping,parser);
    initComponent(cm,ks);
  }
  ksMonitor.stop();
  Monitor rsMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  ConfFileOption reasonerOption=parser.getConfOptionsByName(""String_Node_Str"");
  rc=cm.reasoner(getReasonerClass(reasonerOption),sources);
  configureComponent(cm,rc,componentPrefixMapping,parser);
  initComponent(cm,rc);
  rs=cm.reasoningService(rc);
  rsMonitor.stop();
  Monitor lpMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  ConfFileOption problemOption=parser.getConfOptionsByName(""String_Node_Str"");
  lp=cm.learningProblem(getLearningProblemClass(problemOption),rs);
  SortedSet<String> posExamples=parser.getPositiveExamples();
  SortedSet<String> negExamples=parser.getNegativeExamples();
  cm.applyConfigEntry(lp,""String_Node_Str"",posExamples);
  if (getLearningProblemClass(problemOption) != PosOnlyDefinitionLP.class)   cm.applyConfigEntry(lp,""String_Node_Str"",negExamples);
  configureComponent(cm,lp,componentPrefixMapping,parser);
  initComponent(cm,lp);
  lpMonitor.stop();
  Monitor laMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  ConfFileOption algorithmOption=parser.getConfOptionsByName(""String_Node_Str"");
  try {
    la=cm.learningAlgorithm(getLearningAlgorithm(algorithmOption),lp,rs);
  }
 catch (  LearningProblemUnsupportedException e) {
    e.printStackTrace();
  }
  configureComponent(cm,la,componentPrefixMapping,parser);
  initComponent(cm,la);
  laMonitor.stop();
  performExports(parser,baseDir,sources,rs);
  processCLIOptions(cm,parser,rs,lp);
}","/** 
 * Initialise all components based on conf file.
 * @param file Conf file to read.
 * @throws ComponentInitException
 */
public Start(File file) throws ComponentInitException {
  String baseDir=file.getParentFile().getPath();
  String message=""String_Node_Str"";
  long cmStartTime=System.nanoTime();
  ComponentManager cm=ComponentManager.getInstance();
  long cmTime=System.nanoTime() - cmStartTime;
  message+=""String_Node_Str"" + Helper.prettyPrintNanoSeconds(cmTime) + ""String_Node_Str"";
  logger.info(message);
  Map<Class<? extends Component>,String> componentPrefixMapping=createComponentPrefixMapping();
  ConfParser parser=ConfParser.parseFile(file);
  Monitor ksMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  Set<KnowledgeSource> sources=new HashSet<KnowledgeSource>();
  Map<URL,Class<? extends KnowledgeSource>> importedFiles=getImportedFiles(parser,baseDir);
  for (  Map.Entry<URL,Class<? extends KnowledgeSource>> entry : importedFiles.entrySet()) {
    KnowledgeSource ks=cm.knowledgeSource(entry.getValue());
    cm.applyConfigEntry(ks,""String_Node_Str"",entry.getKey());
    sources.add(ks);
    configureComponent(cm,ks,componentPrefixMapping,parser);
    initComponent(cm,ks);
  }
  ksMonitor.stop();
  Monitor rsMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  ConfFileOption reasonerOption=parser.getConfOptionsByName(""String_Node_Str"");
  rc=cm.reasoner(getReasonerClass(reasonerOption),sources);
  configureComponent(cm,rc,componentPrefixMapping,parser);
  initComponent(cm,rc);
  rs=cm.reasoningService(rc);
  rsMonitor.stop();
  Monitor lpMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  ConfFileOption problemOption=parser.getConfOptionsByName(""String_Node_Str"");
  lp=cm.learningProblem(getLearningProblemClass(problemOption),rs);
  SortedSet<String> posExamples=parser.getPositiveExamples();
  SortedSet<String> negExamples=parser.getNegativeExamples();
  cm.applyConfigEntry(lp,""String_Node_Str"",posExamples);
  if (getLearningProblemClass(problemOption) != PosOnlyDefinitionLP.class)   cm.applyConfigEntry(lp,""String_Node_Str"",negExamples);
  configureComponent(cm,lp,componentPrefixMapping,parser);
  initComponent(cm,lp);
  lpMonitor.stop();
  Monitor laMonitor=JamonMonitorLogger.getTimeMonitor(Start.class,""String_Node_Str"").start();
  ConfFileOption algorithmOption=parser.getConfOptionsByName(""String_Node_Str"");
  try {
    la=cm.learningAlgorithm(getLearningAlgorithm(algorithmOption),lp,rs);
  }
 catch (  LearningProblemUnsupportedException e) {
    e.printStackTrace();
  }
  configureComponent(cm,la,componentPrefixMapping,parser);
  initComponent(cm,la);
  laMonitor.stop();
  performExports(parser,baseDir,sources,rs);
  processCLIOptions(cm,parser,rs,lp);
}"
10156,"/** 
 * gets java imports
 * @return 
 */
public SortedSet<String> getJavaImports(){
  return new TreeSet<String>();
}","/** 
 * TODO Method should be removed and a mapping table in ConfigJavaGenerator  created instead. gets java imports
 * @return 
 */
public SortedSet<String> getJavaImports(){
  return new TreeSet<String>();
}"
10157,"public void init(int tabIndex){
  if (tabIndex == 0) {
    InitWorker worker=new InitWorker(source,gui);
    worker.execute();
  }
 else   if (tabIndex == 1) {
    InitWorker worker=new InitWorker(reasoner,gui);
    worker.execute();
  }
 else   if (tabIndex == 2) {
    InitWorker worker=new InitWorker(lp,gui);
    worker.execute();
  }
 else   if (tabIndex == 3) {
    InitWorker worker=new InitWorker(la,gui);
    worker.execute();
  }
  needsInit[tabIndex]=false;
  System.out.println(""String_Node_Str"" + tabIndex + ""String_Node_Str"");
}","public void init(List<Integer> tabIndex){
  List<Component> components=new LinkedList<Component>();
  for (  int i : tabIndex) {
switch (i) {
case 0:
      components.add(source);
    needsInit[i]=false;
  break;
case 1:
components.add(reasoner);
needsInit[i]=false;
break;
case 2:
components.add(lp);
needsInit[i]=false;
break;
case 3:
components.add(la);
needsInit[i]=false;
break;
}
}
InitWorker worker=new InitWorker(components,gui);
worker.execute();
if (tabIndex.size() == 1) {
logger.info(""String_Node_Str"" + tabIndex.get(0) + ""String_Node_Str"");
}
 else if (tabIndex.size() > 1) {
logger.info(""String_Node_Str"" + tabIndex + ""String_Node_Str"");
}
}"
10158,"public InitWorker(Component component,StartGUI gui){
  this.component=component;
  this.gui=gui;
  List<Class<? extends Component>> nonTimeIntensiveComponents=new LinkedList<Class<? extends Component>>();
  nonTimeIntensiveComponents.add(OWLFile.class);
  nonTimeIntensiveComponents.add(KBFile.class);
  if (nonTimeIntensiveComponents.contains(component.getClass())) {
    timeIntensive=false;
  }
}","public InitWorker(List<Component> components,StartGUI gui){
  this.components=components;
  this.gui=gui;
  List<Class<? extends Component>> nonTimeIntensiveComponents=new LinkedList<Class<? extends Component>>();
  nonTimeIntensiveComponents.add(OWLFile.class);
  nonTimeIntensiveComponents.add(KBFile.class);
  timeIntensive=false;
  for (  Component component : components) {
    if (!nonTimeIntensiveComponents.contains(component.getClass())) {
      timeIntensive=true;
    }
  }
}"
10159,"@Override protected Boolean doInBackground() throws Exception {
  JFrame waitFrame=null;
  if (timeIntensive) {
    gui.disableTabbedPane();
    gui.setEnabled(false);
    waitFrame=new JFrame();
    waitFrame.setUndecorated(true);
    waitFrame.setSize(160,100);
    waitFrame.getContentPane().setBackground(Color.WHITE);
    URL imgURL=Config.class.getResource(""String_Node_Str"");
    waitFrame.add(new JLabel(""String_Node_Str"" + imgURL + ""String_Node_Str""));
    waitFrame.setLocationRelativeTo(gui);
    waitFrame.setVisible(true);
  }
  try {
    component.init();
  }
 catch (  ComponentInitException e) {
    gui.getStatusPanel().setExceptionMessage(e.getMessage());
    e.printStackTrace();
  }
  if (timeIntensive) {
    gui.enableTabbedPane();
    gui.setEnabled(true);
    waitFrame.dispose();
  }
  if (component instanceof ReasonerComponent) {
    gui.panels[2].updateOptionPanel();
    gui.panels[3].updateOptionPanel();
  }
  return true;
}","@Override protected Boolean doInBackground() throws Exception {
  JFrame waitFrame=null;
  if (timeIntensive) {
    gui.disableTabbedPane();
    gui.setEnabled(false);
    waitFrame=new JFrame();
    waitFrame.setUndecorated(true);
    waitFrame.setSize(160,100);
    waitFrame.getContentPane().setBackground(Color.WHITE);
    URL imgURL=Config.class.getResource(""String_Node_Str"");
    waitFrame.add(new JLabel(""String_Node_Str"" + imgURL + ""String_Node_Str""));
    waitFrame.setLocationRelativeTo(gui);
    waitFrame.setVisible(true);
  }
  try {
    for (    Component component : components) {
      component.init();
    }
  }
 catch (  ComponentInitException e) {
    gui.getStatusPanel().setExceptionMessage(e.getMessage());
    e.printStackTrace();
  }
  if (timeIntensive) {
    gui.enableTabbedPane();
    gui.setEnabled(true);
    waitFrame.dispose();
  }
  if (components instanceof ReasonerComponent) {
    gui.panels[2].updateOptionPanel();
    gui.panels[3].updateOptionPanel();
  }
  return true;
}"
10160,"public static void main(String[] args){
  SimpleLayout layout=new SimpleLayout();
  ConsoleAppender consoleAppender=new ConsoleAppender(layout);
  Logger logger=Logger.getRootLogger();
  logger.removeAllAppenders();
  logger.addAppender(consoleAppender);
  logger.setLevel(Level.DEBUG);
  File file=null;
  if (args.length > 0)   file=new File(args[args.length - 1]);
  try {
    UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  UnsupportedLookAndFeelException e) {
    e.printStackTrace();
  }
  new StartGUI(file);
}","public static void main(String[] args){
  SimpleLayout layout=new SimpleLayout();
  ConsoleAppender consoleAppender=new ConsoleAppender(layout);
  Logger logger=Logger.getRootLogger();
  logger.removeAllAppenders();
  logger.addAppender(consoleAppender);
  logger.setLevel(Level.TRACE);
  File file=null;
  if (args.length > 0)   file=new File(args[args.length - 1]);
  try {
    UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  UnsupportedLookAndFeelException e) {
    e.printStackTrace();
  }
  new StartGUI(file);
}"
10161,"public void stateChanged(ChangeEvent evt){
  if (evt.getSource().equals(tabPane)) {
    int index=tabPane.getSelectedIndex();
    if (index != 0 && config.tabNeedsInit(index - 1)) {
      for (int i=0; i < index; i++) {
        if (config.tabNeedsInit(i)) {
          config.init(i);
        }
      }
    }
    updateTabs();
switch (index) {
case 0:
      panels[0].panelActivated();
    break;
case 1:
  panels[1].panelActivated();
break;
case 2:
panels[2].panelActivated();
break;
case 3:
panels[3].panelActivated();
break;
}
statusPanel.setTabInitMessage();
}
}","public void stateChanged(ChangeEvent evt){
  if (evt.getSource().equals(tabPane)) {
    int index=tabPane.getSelectedIndex();
    List<Integer> componentsToInit=new LinkedList<Integer>();
    if (index != 0 && config.tabNeedsInit(index - 1)) {
      for (int i=0; i < index; i++) {
        if (config.tabNeedsInit(i)) {
          componentsToInit.add(i);
        }
      }
    }
    config.init(componentsToInit);
    updateTabs();
switch (index) {
case 0:
      panels[0].panelActivated();
    break;
case 1:
  panels[1].panelActivated();
break;
case 2:
panels[2].panelActivated();
break;
case 3:
panels[3].panelActivated();
break;
}
statusPanel.setTabInitMessage();
}
}"
10162,"public StartGUI(File file){
  this.setTitle(""String_Node_Str"");
  this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  this.setSize(800,600);
  Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
  Dimension size=getSize();
  screenSize.height=screenSize.height / 2;
  screenSize.width=screenSize.width / 2;
  size.height=size.height / 2;
  size.width=size.width / 2;
  int y=screenSize.height - size.height;
  int x=screenSize.width - size.width;
  setLocation(x,y);
  if (this.getClass().getResource(""String_Node_Str"") != null)   setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""String_Node_Str"")));
  List<Class<? extends Component>> ignoredKnowledgeSources=new LinkedList<Class<? extends Component>>();
  ignoredKnowledgeSources.add(OWLAPIOntology.class);
  panels[0]=new ComponentPanel(config,this,KnowledgeSource.class,OWLFile.class,ignoredKnowledgeSources);
  panels[1]=new ComponentPanel(config,this,ReasonerComponent.class,FastInstanceChecker.class);
  panels[2]=new ComponentPanel(config,this,LearningProblem.class,PosNegDefinitionLP.class);
  panels[3]=new ComponentPanel(config,this,LearningAlgorithm.class,ExampleBasedROLComponent.class);
  runPanel=new RunPanel(config,this);
  tabPane.addTab(""String_Node_Str"",panels[0]);
  tabPane.addTab(""String_Node_Str"",panels[1]);
  tabPane.addTab(""String_Node_Str"",panels[2]);
  tabPane.addTab(""String_Node_Str"",panels[3]);
  tabPane.addTab(""String_Node_Str"",runPanel);
  setJMenuBar(menuBar);
  menuBar.add(menuFile);
  menuFile.add(openItem);
  openItem.addActionListener(this);
  menuFile.add(saveItem);
  saveItem.addActionListener(this);
  menuFile.add(exitItem);
  exitItem.addActionListener(this);
  menuBar.add(menuHelp);
  menuHelp.add(tutorialItem);
  tutorialItem.addActionListener(this);
  menuHelp.add(aboutItem);
  aboutItem.addActionListener(this);
  add(tabPane,BorderLayout.CENTER);
  add(statusPanel,BorderLayout.SOUTH);
  setVisible(true);
  updateTabs();
  tabPane.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent evt){
      if (evt.getSource().equals(tabPane)) {
        int index=tabPane.getSelectedIndex();
        if (index != 0 && config.tabNeedsInit(index - 1)) {
          for (int i=0; i < index; i++) {
            if (config.tabNeedsInit(i)) {
              config.init(i);
            }
          }
        }
        updateTabs();
switch (index) {
case 0:
          panels[0].panelActivated();
        break;
case 1:
      panels[1].panelActivated();
    break;
case 2:
  panels[2].panelActivated();
break;
case 3:
panels[3].panelActivated();
break;
}
statusPanel.setTabInitMessage();
}
}
}
);
if (file != null) {
configLoad.openFile(file);
configLoad.startParser();
}
}","public StartGUI(File file){
  this.setTitle(""String_Node_Str"");
  this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  this.setSize(800,600);
  Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
  Dimension size=getSize();
  screenSize.height=screenSize.height / 2;
  screenSize.width=screenSize.width / 2;
  size.height=size.height / 2;
  size.width=size.width / 2;
  int y=screenSize.height - size.height;
  int x=screenSize.width - size.width;
  setLocation(x,y);
  if (this.getClass().getResource(""String_Node_Str"") != null)   setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""String_Node_Str"")));
  List<Class<? extends Component>> ignoredKnowledgeSources=new LinkedList<Class<? extends Component>>();
  ignoredKnowledgeSources.add(OWLAPIOntology.class);
  panels[0]=new ComponentPanel(config,this,KnowledgeSource.class,OWLFile.class,ignoredKnowledgeSources);
  panels[1]=new ComponentPanel(config,this,ReasonerComponent.class,FastInstanceChecker.class);
  panels[2]=new ComponentPanel(config,this,LearningProblem.class,PosNegDefinitionLP.class);
  panels[3]=new ComponentPanel(config,this,LearningAlgorithm.class,ExampleBasedROLComponent.class);
  runPanel=new RunPanel(config,this);
  tabPane.addTab(""String_Node_Str"",panels[0]);
  tabPane.addTab(""String_Node_Str"",panels[1]);
  tabPane.addTab(""String_Node_Str"",panels[2]);
  tabPane.addTab(""String_Node_Str"",panels[3]);
  tabPane.addTab(""String_Node_Str"",runPanel);
  setJMenuBar(menuBar);
  menuBar.add(menuFile);
  menuFile.add(openItem);
  openItem.addActionListener(this);
  menuFile.add(saveItem);
  saveItem.addActionListener(this);
  menuFile.add(exitItem);
  exitItem.addActionListener(this);
  menuBar.add(menuHelp);
  menuHelp.add(tutorialItem);
  tutorialItem.addActionListener(this);
  menuHelp.add(aboutItem);
  aboutItem.addActionListener(this);
  add(tabPane,BorderLayout.CENTER);
  add(statusPanel,BorderLayout.SOUTH);
  setVisible(true);
  updateTabs();
  tabPane.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent evt){
      if (evt.getSource().equals(tabPane)) {
        int index=tabPane.getSelectedIndex();
        List<Integer> componentsToInit=new LinkedList<Integer>();
        if (index != 0 && config.tabNeedsInit(index - 1)) {
          for (int i=0; i < index; i++) {
            if (config.tabNeedsInit(i)) {
              componentsToInit.add(i);
            }
          }
        }
        config.init(componentsToInit);
        updateTabs();
switch (index) {
case 0:
          panels[0].panelActivated();
        break;
case 1:
      panels[1].panelActivated();
    break;
case 2:
  panels[2].panelActivated();
break;
case 3:
panels[3].panelActivated();
break;
}
statusPanel.setTabInitMessage();
}
}
}
);
if (file != null) {
configLoad.openFile(file);
configLoad.startParser();
}
}"
10163,"@Override public void init() throws ComponentInitException {
  try {
    String filename=configurator.getFilename();
    String urlString=configurator.getUrl().toString();
    if (filename != null) {
      url=new File(filename).toURI().toURL();
    }
 else     if (urlString != null) {
      url=new URL(urlString);
    }
    if (url != null) {
      kb=KBParser.parseKBFile(url);
    }
  }
 catch (  MalformedURLException e) {
    logger.error(e.getMessage());
  }
catch (  IOException e) {
    throw new ComponentInitException(""String_Node_Str"" + url + ""String_Node_Str"",e);
  }
catch (  ParseException e) {
    throw new ComponentInitException(""String_Node_Str"" + url + ""String_Node_Str"",e);
  }
}","@Override public void init() throws ComponentInitException {
  try {
    kb=KBParser.parseKBFile(configurator.getUrl());
  }
 catch (  MalformedURLException e) {
    logger.error(e.getMessage());
  }
catch (  IOException e) {
    throw new ComponentInitException(""String_Node_Str"" + configurator.getUrl() + ""String_Node_Str"",e);
  }
catch (  ParseException e) {
    throw new ComponentInitException(""String_Node_Str"" + configurator.getUrl() + ""String_Node_Str"",e);
  }
}"
10164,"public URL getURL(){
  return url;
}","public URL getURL(){
  return configurator.getUrl();
}"
10165,"public static Collection<ConfigOption<?>> createConfigOptions(){
  Collection<ConfigOption<?>> options=new LinkedList<ConfigOption<?>>();
  options.add(new StringConfigOption(""String_Node_Str"",""String_Node_Str"",null,true,true));
  options.add(new URLConfigOption(""String_Node_Str"",""String_Node_Str"",null,false,true));
  return options;
}","public static Collection<ConfigOption<?>> createConfigOptions(){
  Collection<ConfigOption<?>> options=new LinkedList<ConfigOption<?>>();
  URLConfigOption urlOption=new URLConfigOption(""String_Node_Str"",""String_Node_Str"",null,false,true);
  urlOption.setRefersToFile(true);
  options.add(urlOption);
  return options;
}"
10166,"public static Collection<ConfigOption<?>> createConfigOptions(){
  Collection<ConfigOption<?>> options=new LinkedList<ConfigOption<?>>();
  options.add(new URLConfigOption(""String_Node_Str"",""String_Node_Str"",null,true,true));
  return options;
}","public static Collection<ConfigOption<?>> createConfigOptions(){
  Collection<ConfigOption<?>> options=new LinkedList<ConfigOption<?>>();
  URLConfigOption urlOption=new URLConfigOption(""String_Node_Str"",""String_Node_Str"",null,true,true);
  urlOption.setRefersToFile(true);
  options.add(urlOption);
  return options;
}"
10167,"public SortedSet<EvaluatedDescription> getCurrentlyBestEvaluatedDescriptions(){
  int count=0;
  SortedSet<ExampleBasedNode> rev=candidatesStable.descendingSet();
  SortedSet<EvaluatedDescription> cbd=new TreeSet<EvaluatedDescription>(edComparator);
  for (  ExampleBasedNode eb : rev) {
    cbd.add(new EvaluatedDescription(eb.getConcept(),getScore(eb.getConcept())));
    if (count > 200)     return cbd;
    count++;
  }
  return cbd;
}","public SortedSet<EvaluatedDescription> getCurrentlyBestEvaluatedDescriptions(){
  Iterator<ExampleBasedNode> it=candidatesStable.descendingIterator();
  int count=0;
  SortedSet<EvaluatedDescription> cbd=new TreeSet<EvaluatedDescription>(edComparator);
  while (it.hasNext()) {
    ExampleBasedNode eb=it.next();
    cbd.add(new EvaluatedDescription(eb.getConcept(),getScore(eb.getConcept())));
    if (count > 200)     return cbd;
    count++;
  }
  return cbd;
}"
10168,"/** 
 * Show Statistics.
 */
public void showStats(){
  Long algorithmRunTime=null;
  Long overallReasoningTime=null;
  Long instanceCheckReasoningTime=null;
  Long retrievalReasoningTime=null;
  Long subsumptionReasoningTime=null;
  infoArea.setText(""String_Node_Str"");
  if (config.getLearningAlgorithm().getCurrentlyBestDescriptions() != null) {
    infoArea.append(""String_Node_Str"" + getSolutionString(config.getLearningAlgorithm().getCurrentlyBestEvaluatedDescriptions(10)) + ""String_Node_Str"");
  }
  if (config.getAlgorithmRunTime() != null) {
    algorithmRunTime=config.getAlgorithmRunTime();
    bar[0].update(1.0);
    time[0].setText(makeTime(algorithmRunTime));
    percent[0].setText(""String_Node_Str"");
  }
  if (config.getReasoningService() != null) {
    overallReasoningTime=config.getReasoningService().getOverallReasoningTimeNs();
    bar[1].update((double)overallReasoningTime / (double)algorithmRunTime);
    time[1].setText(makeTime(overallReasoningTime));
    percent[1].setText(Percent(overallReasoningTime,algorithmRunTime));
  }
  if (config.getReasoningService().getNrOfInstanceChecks() > 0) {
    instanceCheckReasoningTime=config.getReasoningService().getInstanceCheckReasoningTimeNs();
    name[2].setText(names[2] + ""String_Node_Str"" + config.getReasoningService().getNrOfInstanceChecks()+ ""String_Node_Str"");
    bar[2].update((double)instanceCheckReasoningTime / (double)algorithmRunTime);
    time[2].setText(makeTime(instanceCheckReasoningTime));
    percent[2].setText(Percent(instanceCheckReasoningTime,algorithmRunTime));
  }
  if (config.getReasoningService().getNrOfRetrievals() > 0) {
    retrievalReasoningTime=config.getReasoningService().getRetrievalReasoningTimeNs();
    name[3].setText(names[3] + ""String_Node_Str"" + config.getReasoningService().getNrOfRetrievals()+ ""String_Node_Str"");
    bar[3].update((double)retrievalReasoningTime / (double)algorithmRunTime);
    time[3].setText(makeTime(retrievalReasoningTime));
    percent[3].setText(Percent(retrievalReasoningTime,algorithmRunTime));
  }
  if (config.getReasoningService().getNrOfSubsumptionChecks() > 0) {
    subsumptionReasoningTime=config.getReasoningService().getSubsumptionReasoningTimeNs();
    name[4].setText(names[4] + ""String_Node_Str"" + config.getReasoningService().getNrOfSubsumptionChecks()+ ""String_Node_Str"");
    bar[4].update((double)subsumptionReasoningTime / (double)algorithmRunTime);
    time[4].setText(makeTime(subsumptionReasoningTime));
    percent[4].setText(Percent(subsumptionReasoningTime,algorithmRunTime));
  }
  repaint();
}","/** 
 * Show Statistics.
 */
public void showStats(){
  System.out.println(""String_Node_Str"" + System.currentTimeMillis());
  Long algorithmRunTime=null;
  Long overallReasoningTime=null;
  Long instanceCheckReasoningTime=null;
  Long retrievalReasoningTime=null;
  Long subsumptionReasoningTime=null;
  infoArea.setText(""String_Node_Str"");
  if (config.getLearningAlgorithm().getCurrentlyBestDescription() != null) {
    infoArea.append(""String_Node_Str"" + getSolutionString(config.getLearningAlgorithm().getCurrentlyBestEvaluatedDescriptions(10)) + ""String_Node_Str"");
  }
  if (config.getAlgorithmRunTime() != null) {
    algorithmRunTime=config.getAlgorithmRunTime();
    bar[0].update(1.0);
    time[0].setText(makeTime(algorithmRunTime));
    percent[0].setText(""String_Node_Str"");
  }
  if (config.getReasoningService() != null) {
    overallReasoningTime=config.getReasoningService().getOverallReasoningTimeNs();
    bar[1].update((double)overallReasoningTime / (double)algorithmRunTime);
    time[1].setText(makeTime(overallReasoningTime));
    percent[1].setText(Percent(overallReasoningTime,algorithmRunTime));
  }
  if (config.getReasoningService().getNrOfInstanceChecks() > 0) {
    instanceCheckReasoningTime=config.getReasoningService().getInstanceCheckReasoningTimeNs();
    name[2].setText(names[2] + ""String_Node_Str"" + config.getReasoningService().getNrOfInstanceChecks()+ ""String_Node_Str"");
    bar[2].update((double)instanceCheckReasoningTime / (double)algorithmRunTime);
    time[2].setText(makeTime(instanceCheckReasoningTime));
    percent[2].setText(Percent(instanceCheckReasoningTime,algorithmRunTime));
  }
  if (config.getReasoningService().getNrOfRetrievals() > 0) {
    retrievalReasoningTime=config.getReasoningService().getRetrievalReasoningTimeNs();
    name[3].setText(names[3] + ""String_Node_Str"" + config.getReasoningService().getNrOfRetrievals()+ ""String_Node_Str"");
    bar[3].update((double)retrievalReasoningTime / (double)algorithmRunTime);
    time[3].setText(makeTime(retrievalReasoningTime));
    percent[3].setText(Percent(retrievalReasoningTime,algorithmRunTime));
  }
  if (config.getReasoningService().getNrOfSubsumptionChecks() > 0) {
    subsumptionReasoningTime=config.getReasoningService().getSubsumptionReasoningTimeNs();
    name[4].setText(names[4] + ""String_Node_Str"" + config.getReasoningService().getNrOfSubsumptionChecks()+ ""String_Node_Str"");
    bar[4].update((double)subsumptionReasoningTime / (double)algorithmRunTime);
    time[4].setText(makeTime(subsumptionReasoningTime));
    percent[4].setText(Percent(subsumptionReasoningTime,algorithmRunTime));
  }
  repaint();
}"
10169,"public static void main(String[] args){
  SimpleLayout layout=new SimpleLayout();
  ConsoleAppender consoleAppender=new ConsoleAppender(layout);
  Logger logger=Logger.getRootLogger();
  logger.removeAllAppenders();
  logger.addAppender(consoleAppender);
  logger.setLevel(Level.TRACE);
  File file=null;
  if (args.length > 0)   file=new File(args[args.length - 1]);
  try {
    UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  UnsupportedLookAndFeelException e) {
    e.printStackTrace();
  }
  new StartGUI(file);
}","public static void main(String[] args){
  SimpleLayout layout=new SimpleLayout();
  ConsoleAppender consoleAppender=new ConsoleAppender(layout);
  Logger logger=Logger.getRootLogger();
  logger.removeAllAppenders();
  logger.addAppender(consoleAppender);
  logger.setLevel(Level.DEBUG);
  File file=null;
  if (args.length > 0)   file=new File(args[args.length - 1]);
  try {
    UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  UnsupportedLookAndFeelException e) {
    e.printStackTrace();
  }
  new StartGUI(file);
}"
10170,"public void fireValueChanged(T value){
}","public void fireValueChanged(T value){
  ConfigEntry<T> entry=null;
  try {
    entry=new ConfigEntry<T>(configOption,value);
  }
 catch (  InvalidConfigOptionValueException e) {
    e.printStackTrace();
  }
  config.applyConfigEntry(component,entry);
}"
10171,"public <T>void applyConfigEntry(Component component,ConfigEntry<T> entry){
  cm.applyConfigEntry(component,entry);
}","public <T>void applyConfigEntry(Component component,ConfigEntry<T> entry){
  cm.applyConfigEntry(component,entry);
  if (component instanceof KnowledgeSource) {
    needsInit[0]=true;
    needsInit[1]=true;
    needsInit[2]=true;
    needsInit[3]=true;
  }
 else   if (component instanceof ReasonerComponent) {
    needsInit[1]=true;
    needsInit[2]=true;
    needsInit[3]=true;
  }
 else   if (component instanceof LearningProblem) {
    needsInit[2]=true;
    needsInit[3]=true;
  }
 else   if (component instanceof LearningAlgorithm) {
    needsInit[3]=true;
  }
  gui.updateTabColors();
}"
10172,"/** 
 * It is necessary for init KnowledgeSource.
 * @return true, if url was set otherwise false
 */
public Boolean isSetURL(){
  if (cm.getConfigOptionValue(source,""String_Node_Str"") != null || cm.getConfigOptionValue(source,""String_Node_Str"") != null)   return true;
 else   return false;
}","/** 
 * It is necessary for init KnowledgeSource.
 * @return true, if url was set otherwise false
 */
public boolean isSetURL(){
  if (cm.getConfigOptionValue(source,""String_Node_Str"") != null || cm.getConfigOptionValue(source,""String_Node_Str"") != null)   return true;
 else   return false;
}"
10173,"/** 
 * Get KnowledgeSource.
 * @return KnowledgeSource
 */
public KnowledgeSource getKnowledgeSource(){
  return this.source;
}","/** 
 * Get KnowledgeSource.
 * @return KnowledgeSource
 */
public KnowledgeSource getKnowledgeSource(){
  return source;
}"
10174,"public void reInit(){
  cm=ComponentManager.getInstance();
  source=null;
  reasoner=null;
  rs=null;
  lp=null;
  la=null;
  isInit=new boolean[4];
  threadIsRunning=false;
  algorithmRunStartTime=null;
  algorithmRunStopTime=null;
}","public void reInit(){
  cm=ComponentManager.getInstance();
  source=null;
  reasoner=null;
  rs=null;
  lp=null;
  la=null;
  needsInit=new boolean[4];
  threadIsRunning=false;
  algorithmRunStartTime=null;
  algorithmRunStopTime=null;
}"
10175,"/** 
 * parse file
 */
public void startParser(){
  config.reInit();
  if (this.file.exists()) {
    ConfParser parser=ConfParser.parseFile(file);
    Map<Class<? extends Component>,String> componentPrefixMapping=Start.createComponentPrefixMapping();
    Map<URL,Class<? extends KnowledgeSource>> importedFiles=Start.getImportedFiles(parser,file.getParentFile().getPath());
    for (    Map.Entry<URL,Class<? extends KnowledgeSource>> entry : importedFiles.entrySet()) {
      config.setKnowledgeSource(config.getComponentManager().knowledgeSource(entry.getValue()));
      config.getComponentManager().applyConfigEntry(config.getKnowledgeSource(),""String_Node_Str"",entry.getKey().toString());
      config.setKnowledgeSource(config.getKnowledgeSource());
      Start.configureComponent(config.getComponentManager(),config.getKnowledgeSource(),componentPrefixMapping,parser);
      startGUI.updateTabColors();
      if (config.getKnowledgeSource() != null && config.isSetURL()) {
        try {
          config.getKnowledgeSource().init();
          config.setInitKnowledgeSource(true);
          System.out.println(""String_Node_Str"");
        }
 catch (        ComponentInitException e) {
          e.printStackTrace();
        }
      }
    }
    ConfFileOption reasonerOption=parser.getConfOptionsByName(""String_Node_Str"");
    config.setReasoner(config.getComponentManager().reasoner(Start.getReasonerClass(reasonerOption),config.getKnowledgeSource()));
    Start.configureComponent(config.getComponentManager(),config.getReasoner(),componentPrefixMapping,parser);
    if (config.getKnowledgeSource() != null && config.getReasoner() != null) {
      try {
        config.getReasoner().init();
        System.out.println(""String_Node_Str"");
        config.setReasoningService(config.getComponentManager().reasoningService(config.getReasoner()));
        System.out.println(""String_Node_Str"");
        config.setInitReasoner(true);
        startGUI.updateTabColors();
      }
 catch (      ComponentInitException e) {
        e.printStackTrace();
      }
    }
    ConfFileOption problemOption=parser.getConfOptionsByName(""String_Node_Str"");
    config.setLearningProblem(config.getComponentManager().learningProblem(Start.getLearningProblemClass(problemOption),config.getReasoningService()));
    SortedSet<String> posExamples=parser.getPositiveExamples();
    SortedSet<String> negExamples=parser.getNegativeExamples();
    config.getComponentManager().applyConfigEntry(config.getLearningProblem(),""String_Node_Str"",posExamples);
    if (Start.getLearningProblemClass(problemOption) != PosOnlyDefinitionLP.class)     config.getComponentManager().applyConfigEntry(config.getLearningProblem(),""String_Node_Str"",negExamples);
    Start.configureComponent(config.getComponentManager(),config.getLearningProblem(),componentPrefixMapping,parser);
    if (config.getReasoner() != null && config.getLearningProblem() != null) {
      try {
        config.getLearningProblem().init();
        config.setInitLearningProblem(true);
        System.out.println(""String_Node_Str"");
        startGUI.updateTabColors();
      }
 catch (      ComponentInitException e) {
        e.printStackTrace();
      }
    }
    ConfFileOption algorithmOption=parser.getConfOptionsByName(""String_Node_Str"");
    if (config.getLearningProblem() != null && config.getReasoningService() != null) {
      try {
        config.setLearningAlgorithm(config.getComponentManager().learningAlgorithm(Start.getLearningAlgorithm(algorithmOption),config.getLearningProblem(),config.getReasoningService()));
      }
 catch (      LearningProblemUnsupportedException e) {
        e.printStackTrace();
      }
    }
    Start.configureComponent(config.getComponentManager(),config.getLearningAlgorithm(),componentPrefixMapping,parser);
    if (config.getLearningProblem() != null) {
      try {
        config.getLearningAlgorithm().init();
        config.setInitLearningAlgorithm(true);
        System.out.println(""String_Node_Str"");
        startGUI.updateTabColors();
      }
 catch (      ComponentInitException e) {
        e.printStackTrace();
      }
    }
    startGUI.updateTabColors();
  }
}","/** 
 * parse file
 */
public void startParser(){
  config.reInit();
  if (this.file.exists()) {
    ConfParser parser=ConfParser.parseFile(file);
    Map<Class<? extends Component>,String> componentPrefixMapping=Start.createComponentPrefixMapping();
    Map<URL,Class<? extends KnowledgeSource>> importedFiles=Start.getImportedFiles(parser,file.getParentFile().getPath());
    for (    Map.Entry<URL,Class<? extends KnowledgeSource>> entry : importedFiles.entrySet()) {
      config.setKnowledgeSource(config.getComponentManager().knowledgeSource(entry.getValue()));
      config.getComponentManager().applyConfigEntry(config.getKnowledgeSource(),""String_Node_Str"",entry.getKey().toString());
      config.setKnowledgeSource(config.getKnowledgeSource());
      Start.configureComponent(config.getComponentManager(),config.getKnowledgeSource(),componentPrefixMapping,parser);
      startGUI.updateTabColors();
      if (config.getKnowledgeSource() != null && config.isSetURL()) {
        try {
          config.getKnowledgeSource().init();
          System.out.println(""String_Node_Str"");
        }
 catch (        ComponentInitException e) {
          e.printStackTrace();
        }
      }
    }
    ConfFileOption reasonerOption=parser.getConfOptionsByName(""String_Node_Str"");
    config.setReasoner(config.getComponentManager().reasoner(Start.getReasonerClass(reasonerOption),config.getKnowledgeSource()));
    Start.configureComponent(config.getComponentManager(),config.getReasoner(),componentPrefixMapping,parser);
    if (config.getKnowledgeSource() != null && config.getReasoner() != null) {
      try {
        config.getReasoner().init();
        System.out.println(""String_Node_Str"");
        config.setReasoningService(config.getComponentManager().reasoningService(config.getReasoner()));
        System.out.println(""String_Node_Str"");
        startGUI.updateTabColors();
      }
 catch (      ComponentInitException e) {
        e.printStackTrace();
      }
    }
    ConfFileOption problemOption=parser.getConfOptionsByName(""String_Node_Str"");
    config.setLearningProblem(config.getComponentManager().learningProblem(Start.getLearningProblemClass(problemOption),config.getReasoningService()));
    SortedSet<String> posExamples=parser.getPositiveExamples();
    SortedSet<String> negExamples=parser.getNegativeExamples();
    config.getComponentManager().applyConfigEntry(config.getLearningProblem(),""String_Node_Str"",posExamples);
    if (Start.getLearningProblemClass(problemOption) != PosOnlyDefinitionLP.class)     config.getComponentManager().applyConfigEntry(config.getLearningProblem(),""String_Node_Str"",negExamples);
    Start.configureComponent(config.getComponentManager(),config.getLearningProblem(),componentPrefixMapping,parser);
    if (config.getReasoner() != null && config.getLearningProblem() != null) {
      try {
        config.getLearningProblem().init();
        System.out.println(""String_Node_Str"");
        startGUI.updateTabColors();
      }
 catch (      ComponentInitException e) {
        e.printStackTrace();
      }
    }
    ConfFileOption algorithmOption=parser.getConfOptionsByName(""String_Node_Str"");
    if (config.getLearningProblem() != null && config.getReasoningService() != null) {
      try {
        config.setLearningAlgorithm(config.getComponentManager().learningAlgorithm(Start.getLearningAlgorithm(algorithmOption),config.getLearningProblem(),config.getReasoningService()));
      }
 catch (      LearningProblemUnsupportedException e) {
        e.printStackTrace();
      }
    }
    Start.configureComponent(config.getComponentManager(),config.getLearningAlgorithm(),componentPrefixMapping,parser);
    if (config.getLearningProblem() != null) {
      try {
        config.getLearningAlgorithm().init();
        System.out.println(""String_Node_Str"");
        startGUI.updateTabColors();
      }
 catch (      ComponentInitException e) {
        e.printStackTrace();
      }
    }
    startGUI.updateTabColors();
  }
}"
10176,"/** 
 * make init-button red if you have to click
 */
public void updateInitButtonColor(){
  if (!config.isInitKnowledgeSource()) {
    initButton.setForeground(Color.RED);
  }
 else   initButton.setForeground(Color.BLACK);
}","/** 
 * make init-button red if you have to click
 */
public void updateInitButtonColor(){
  if (!config.needsInitKnowledgeSource()) {
    initButton.setForeground(Color.RED);
  }
 else   initButton.setForeground(Color.BLACK);
}"
10177,"/** 
 * after this, you can change widgets
 */
public void setSource(){
  config.setKnowledgeSource(config.getComponentManager().knowledgeSource(selectableSources.get(choosenClassIndex)));
  config.setInitKnowledgeSource(false);
  updateAll();
}","/** 
 * after this, you can change widgets
 */
public void setSource(){
  config.setKnowledgeSource(config.getComponentManager().knowledgeSource(selectableSources.get(choosenClassIndex)));
  updateAll();
}"
10178,"/** 
 * after this, next tab can be used
 */
public void init(){
  setSource();
  if (config.getKnowledgeSource() != null && config.isSetURL()) {
    try {
      config.getKnowledgeSource().init();
      config.setInitKnowledgeSource(true);
      System.out.println(""String_Node_Str"");
      startGUI.updateTabColors();
    }
 catch (    ComponentInitException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * after this, next tab can be used
 */
public void init(){
  setSource();
  if (config.getKnowledgeSource() != null && config.isSetURL()) {
    try {
      config.getKnowledgeSource().init();
      System.out.println(""String_Node_Str"");
      startGUI.updateTabColors();
    }
 catch (    ComponentInitException e) {
      e.printStackTrace();
    }
  }
}"
10179,"/** 
 * make init-button red if you have to click
 */
public void updateInitButtonColor(){
  if (!config.isInitLearningAlgorithm()) {
    initButton.setForeground(Color.RED);
  }
 else   initButton.setForeground(Color.BLACK);
}","/** 
 * make init-button red if you have to click
 */
public void updateInitButtonColor(){
  if (!config.needsInitLearningAlgorithm()) {
    initButton.setForeground(Color.RED);
  }
 else   initButton.setForeground(Color.BLACK);
}"
10180,"public void actionPerformed(ActionEvent e){
  if (choosenClassIndex != cb.getSelectedIndex()) {
    choosenClassIndex=cb.getSelectedIndex();
    config.setInitLearningAlgorithm(false);
    init();
  }
  if (e.getSource() == autoInitButton)   setLearningAlgorithm();
  if (e.getSource() == initButton)   init();
}","public void actionPerformed(ActionEvent e){
  if (choosenClassIndex != cb.getSelectedIndex()) {
    choosenClassIndex=cb.getSelectedIndex();
  }
  if (e.getSource() == autoInitButton)   setLearningAlgorithm();
}"
10181,"/** 
 * update OptionPanel with new selection
 */
public void updateOptionPanel(){
}","/** 
 * update OptionPanel with new selection
 */
public void updateOptionPanel(){
  optionPanel.update(config.getLearningAlgorithm());
}"
10182,"@Override public void init() throws ComponentInitException {
  OWLOntologyManager manager=OWLManager.createOWLOntologyManager();
  Comparator<OWLNamedObject> namedObjectComparator=new Comparator<OWLNamedObject>(){
    public int compare(    OWLNamedObject o1,    OWLNamedObject o2){
      return o1.getURI().compareTo(o2.getURI());
    }
  }
;
  Set<OWLClass> classes=new TreeSet<OWLClass>(namedObjectComparator);
  Set<OWLObjectProperty> owlObjectProperties=new TreeSet<OWLObjectProperty>(namedObjectComparator);
  Set<OWLDataProperty> owlDatatypeProperties=new TreeSet<OWLDataProperty>(namedObjectComparator);
  Set<OWLIndividual> owlIndividuals=new TreeSet<OWLIndividual>(namedObjectComparator);
  Set<OWLOntology> allImports=new HashSet<OWLOntology>();
  for (  KnowledgeSource source : sources) {
    if (source instanceof OWLFile || source instanceof SparqlKnowledgeSource || source instanceof OWLAPIOntology) {
      URL url=null;
      if (source instanceof OWLFile) {
        url=((OWLFile)source).getURL();
      }
 else       if (source instanceof SparqlKnowledgeSource) {
        url=((SparqlKnowledgeSource)source).getNTripleURL();
      }
      try {
        if (source instanceof OWLAPIOntology) {
          OWLOntology ontology=((OWLAPIOntology)source).getOWLOntolgy();
          owlAPIOntologies.add(ontology);
          allImports.addAll(manager.getImportsClosure(ontology));
          classes.addAll(ontology.getReferencedClasses());
          owlObjectProperties.addAll(ontology.getReferencedObjectProperties());
          owlDatatypeProperties.addAll(ontology.getReferencedDataProperties());
          owlIndividuals.addAll(ontology.getReferencedIndividuals());
          OWLOntologyFormat format=manager.getOntologyFormat(ontology);
          if (format instanceof NamespaceOWLOntologyFormat) {
            prefixes=((NamespaceOWLOntologyFormat)format).getNamespacesByPrefixMap();
            baseURI=prefixes.get(""String_Node_Str"");
            prefixes.remove(""String_Node_Str"");
          }
        }
 else {
          OWLOntology ontology=manager.loadOntologyFromPhysicalURI(url.toURI());
          owlAPIOntologies.add(ontology);
          allImports.addAll(manager.getImportsClosure(ontology));
          classes.addAll(ontology.getReferencedClasses());
          owlObjectProperties.addAll(ontology.getReferencedObjectProperties());
          owlDatatypeProperties.addAll(ontology.getReferencedDataProperties());
          owlIndividuals.addAll(ontology.getReferencedIndividuals());
          OWLOntologyFormat format=manager.getOntologyFormat(ontology);
          if (format instanceof NamespaceOWLOntologyFormat) {
            prefixes=((NamespaceOWLOntologyFormat)format).getNamespacesByPrefixMap();
            baseURI=prefixes.get(""String_Node_Str"");
            prefixes.remove(""String_Node_Str"");
          }
        }
      }
 catch (      OWLOntologyCreationException e) {
        e.printStackTrace();
      }
catch (      URISyntaxException e) {
        e.printStackTrace();
      }
    }
 else {
      KB kb=source.toKB();
      URI ontologyURI=URI.create(""String_Node_Str"");
      OWLOntology ontology=null;
      try {
        ontology=manager.createOntology(ontologyURI);
      }
 catch (      OWLOntologyCreationException e) {
        e.printStackTrace();
      }
      OWLAPIAxiomConvertVisitor.fillOWLOntology(manager,ontology,kb);
      owlAPIOntologies.add(ontology);
      allImports.add(ontology);
      atomicConcepts.addAll(kb.findAllAtomicConcepts());
      atomicRoles.addAll(kb.findAllAtomicRoles());
      individuals.addAll(kb.findAllIndividuals());
    }
  }
  if (reasonerType.equals(""String_Node_Str"")) {
    try {
      reasoner=new uk.ac.manchester.cs.factplusplus.owlapi.Reasoner(manager);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    System.out.println(""String_Node_Str"");
  }
 else {
    reasoner=new org.mindswap.pellet.owlapi.Reasoner(manager);
    Logger pelletLogger=Logger.getLogger(""String_Node_Str"");
    pelletLogger.setLevel(Level.WARN);
  }
  boolean inconsistentOntology=false;
  try {
    reasoner.loadOntologies(allImports);
    for (    OWLOntology ont : owlAPIOntologies) {
      if (!reasoner.isConsistent(ont)) {
        inconsistentOntology=true;
        throw new ComponentInitException(""String_Node_Str"");
      }
    }
    if (!inconsistentOntology) {
      reasoner.classify();
      reasoner.realise();
    }
  }
 catch (  OWLReasonerException e) {
    e.printStackTrace();
  }
  factory=manager.getOWLDataFactory();
  for (  OWLClass owlClass : classes)   atomicConcepts.add(new NamedClass(owlClass.getURI().toString()));
  for (  OWLObjectProperty owlProperty : owlObjectProperties)   atomicRoles.add(new ObjectProperty(owlProperty.getURI().toString()));
  for (  OWLDataProperty owlProperty : owlDatatypeProperties) {
    DatatypeProperty dtp=new DatatypeProperty(owlProperty.getURI().toString());
    Set<OWLDataRange> ranges=owlProperty.getRanges(allImports);
    OWLDataRange range=ranges.iterator().next();
    if (range.isDataType()) {
      URI uri=((OWLDataType)range).getURI();
      if (uri.equals(Datatype.BOOLEAN.getURI()))       booleanDatatypeProperties.add(dtp);
 else       if (uri.equals(Datatype.DOUBLE.getURI()))       doubleDatatypeProperties.add(dtp);
 else       if (uri.equals(Datatype.INT.getURI()))       intDatatypeProperties.add(dtp);
    }
    datatypeProperties.add(dtp);
  }
  for (  OWLIndividual owlIndividual : owlIndividuals)   individuals.add(new Individual(owlIndividual.getURI().toString()));
}","@Override public void init() throws ComponentInitException {
  OWLOntologyManager manager=OWLManager.createOWLOntologyManager();
  Comparator<OWLNamedObject> namedObjectComparator=new Comparator<OWLNamedObject>(){
    public int compare(    OWLNamedObject o1,    OWLNamedObject o2){
      return o1.getURI().compareTo(o2.getURI());
    }
  }
;
  Set<OWLClass> classes=new TreeSet<OWLClass>(namedObjectComparator);
  Set<OWLObjectProperty> owlObjectProperties=new TreeSet<OWLObjectProperty>(namedObjectComparator);
  Set<OWLDataProperty> owlDatatypeProperties=new TreeSet<OWLDataProperty>(namedObjectComparator);
  Set<OWLIndividual> owlIndividuals=new TreeSet<OWLIndividual>(namedObjectComparator);
  Set<OWLOntology> allImports=new HashSet<OWLOntology>();
  for (  KnowledgeSource source : sources) {
    if (source instanceof OWLFile || source instanceof SparqlKnowledgeSource || source instanceof OWLAPIOntology) {
      URL url=null;
      if (source instanceof OWLFile) {
        url=((OWLFile)source).getURL();
      }
 else       if (source instanceof SparqlKnowledgeSource) {
        url=((SparqlKnowledgeSource)source).getNTripleURL();
      }
      try {
        if (source instanceof OWLAPIOntology) {
          OWLOntology ontology=((OWLAPIOntology)source).getOWLOntolgy();
          owlAPIOntologies.add(ontology);
          allImports.addAll(manager.getImportsClosure(ontology));
          classes.addAll(ontology.getReferencedClasses());
          owlObjectProperties.addAll(ontology.getReferencedObjectProperties());
          owlDatatypeProperties.addAll(ontology.getReferencedDataProperties());
          owlIndividuals.addAll(ontology.getReferencedIndividuals());
          OWLOntologyFormat format=manager.getOntologyFormat(ontology);
          if (format instanceof NamespaceOWLOntologyFormat) {
            prefixes=((NamespaceOWLOntologyFormat)format).getNamespacesByPrefixMap();
            baseURI=prefixes.get(""String_Node_Str"");
            prefixes.remove(""String_Node_Str"");
          }
        }
 else {
          OWLOntology ontology=manager.loadOntologyFromPhysicalURI(url.toURI());
          owlAPIOntologies.add(ontology);
          allImports.addAll(manager.getImportsClosure(ontology));
          classes.addAll(ontology.getReferencedClasses());
          owlObjectProperties.addAll(ontology.getReferencedObjectProperties());
          owlDatatypeProperties.addAll(ontology.getReferencedDataProperties());
          owlIndividuals.addAll(ontology.getReferencedIndividuals());
          OWLOntologyFormat format=manager.getOntologyFormat(ontology);
          if (format instanceof NamespaceOWLOntologyFormat) {
            prefixes=((NamespaceOWLOntologyFormat)format).getNamespacesByPrefixMap();
            baseURI=prefixes.get(""String_Node_Str"");
            prefixes.remove(""String_Node_Str"");
          }
        }
      }
 catch (      OWLOntologyCreationException e) {
        e.printStackTrace();
      }
catch (      URISyntaxException e) {
        e.printStackTrace();
      }
    }
 else {
      KB kb=source.toKB();
      URI ontologyURI=URI.create(""String_Node_Str"");
      OWLOntology ontology=null;
      try {
        ontology=manager.createOntology(ontologyURI);
      }
 catch (      OWLOntologyCreationException e) {
        e.printStackTrace();
      }
      OWLAPIAxiomConvertVisitor.fillOWLOntology(manager,ontology,kb);
      owlAPIOntologies.add(ontology);
      allImports.add(ontology);
      atomicConcepts.addAll(kb.findAllAtomicConcepts());
      atomicRoles.addAll(kb.findAllAtomicRoles());
      individuals.addAll(kb.findAllIndividuals());
    }
  }
  if (reasonerType.equals(""String_Node_Str"")) {
    try {
      reasoner=new uk.ac.manchester.cs.factplusplus.owlapi.Reasoner(manager);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    System.out.println(""String_Node_Str"");
  }
 else {
    reasoner=new org.mindswap.pellet.owlapi.Reasoner(manager);
    Logger pelletLogger=Logger.getLogger(""String_Node_Str"");
    pelletLogger.setLevel(Level.WARN);
  }
  boolean inconsistentOntology=false;
  try {
    reasoner.loadOntologies(allImports);
    for (    OWLOntology ont : owlAPIOntologies) {
      if (!reasoner.isConsistent(ont)) {
        inconsistentOntology=true;
        throw new ComponentInitException(""String_Node_Str"");
      }
    }
    if (!inconsistentOntology) {
      reasoner.classify();
      reasoner.realise();
    }
  }
 catch (  OWLReasonerException e) {
    e.printStackTrace();
  }
  factory=manager.getOWLDataFactory();
  for (  OWLClass owlClass : classes)   atomicConcepts.add(new NamedClass(owlClass.getURI().toString()));
  for (  OWLObjectProperty owlProperty : owlObjectProperties)   atomicRoles.add(new ObjectProperty(owlProperty.getURI().toString()));
  for (  OWLDataProperty owlProperty : owlDatatypeProperties) {
    DatatypeProperty dtp=new DatatypeProperty(owlProperty.getURI().toString());
    Set<OWLDataRange> ranges=owlProperty.getRanges(allImports);
    Iterator<OWLDataRange> it=ranges.iterator();
    if (it.hasNext()) {
      OWLDataRange range=it.next();
      if (range.isDataType()) {
        URI uri=((OWLDataType)range).getURI();
        if (uri.equals(Datatype.BOOLEAN.getURI()))         booleanDatatypeProperties.add(dtp);
 else         if (uri.equals(Datatype.DOUBLE.getURI()))         doubleDatatypeProperties.add(dtp);
 else         if (uri.equals(Datatype.INT.getURI()))         intDatatypeProperties.add(dtp);
      }
    }
    datatypeProperties.add(dtp);
  }
  for (  OWLIndividual owlIndividual : owlIndividuals)   individuals.add(new Individual(owlIndividual.getURI().toString()));
}"
10183,"public List<Description> learn(){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + posExamples.size());
  logger.info(""String_Node_Str"" + negExamples.size());
  ComponentManager cm=ComponentManager.getInstance();
  LearningAlgorithm la=null;
  ReasoningService rs=null;
  LearningProblem lp=null;
  KnowledgeSource ks=null;
  try {
    Set<KnowledgeSource> sources=new HashSet<KnowledgeSource>();
    ks=cm.knowledgeSource(OWLFile.class);
    File f=new File(this.owlfile);
    URL url=null;
    try {
      url=new URL(""String_Node_Str"" + f.getAbsolutePath());
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
    cm.applyConfigEntry(ks,""String_Node_Str"",url.toString());
    ReasonerComponent r=new FastInstanceChecker(sources);
    rs=new ReasoningService(r);
    lp=new PosNegDefinitionLP(rs);
    lp=new PosNegDefinitionLP(rs);
    ((PosNegLP)lp).setPositiveExamples(SetManipulation.stringToInd(this.posExamples));
    ((PosNegLP)lp).setNegativeExamples(SetManipulation.stringToInd(this.negExamples));
    la=cm.learningAlgorithm(ExampleBasedROLComponent.class,lp,rs);
    logger.debug(""String_Node_Str"");
    cm.applyConfigEntry(la,""String_Node_Str"",false);
    cm.applyConfigEntry(la,""String_Node_Str"",true);
    cm.applyConfigEntry(la,""String_Node_Str"",false);
    cm.applyConfigEntry(la,""String_Node_Str"",false);
    cm.applyConfigEntry(la,""String_Node_Str"",false);
    cm.applyConfigEntry(la,""String_Node_Str"",""String_Node_Str"");
    cm.applyConfigEntry(la,""String_Node_Str"",true);
    ks.init();
    sources.add(ks);
    r.init();
    lp.init();
    la.init();
    la.start();
    return la.getCurrentlyBestDescriptions();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","public static List<EvaluatedDescription> learn(String owlFile,SortedSet<String> posExamples,SortedSet<String> negExamples,int maxNrOfResults) throws ComponentInitException, LearningProblemUnsupportedException {
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + posExamples.size());
  logger.info(""String_Node_Str"" + negExamples.size());
  ComponentManager cm=ComponentManager.getInstance();
  KnowledgeSource ks=cm.knowledgeSource(OWLFile.class);
  String fileURL=new File(owlFile).toURI().toString();
  cm.applyConfigEntry(ks,""String_Node_Str"",fileURL);
  ReasonerComponent r=cm.reasoner(FastInstanceChecker.class,ks);
  ReasoningService rs=cm.reasoningService(r);
  LearningProblem lp=cm.learningProblem(PosNegDefinitionLP.class,rs);
  cm.applyConfigEntry(lp,""String_Node_Str"",posExamples);
  cm.applyConfigEntry(lp,""String_Node_Str"",negExamples);
  LearningAlgorithm la=cm.learningAlgorithm(ExampleBasedROLComponent.class,lp,rs);
  cm.applyConfigEntry(la,""String_Node_Str"",false);
  cm.applyConfigEntry(la,""String_Node_Str"",true);
  cm.applyConfigEntry(la,""String_Node_Str"",false);
  cm.applyConfigEntry(la,""String_Node_Str"",false);
  cm.applyConfigEntry(la,""String_Node_Str"",false);
  cm.applyConfigEntry(la,""String_Node_Str"",""String_Node_Str"");
  cm.applyConfigEntry(la,""String_Node_Str"",true);
  cm.applyConfigEntry(la,""String_Node_Str"",0.0);
  ks.init();
  r.init();
  lp.init();
  la.init();
  logger.debug(""String_Node_Str"");
  la.start();
  return la.getCurrentlyBestEvaluatedDescriptions(maxNrOfResults);
}"
10184,"/** 
 * @param args
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  SimpleLayout layout=new SimpleLayout();
  FileAppender fileAppender=null;
  ;
  try {
    fileAppender=new FileAppender(layout,""String_Node_Str"",false);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  ConsoleAppender consoleAppender=new ConsoleAppender(layout);
  logger.removeAllAppenders();
  logger.addAppender(consoleAppender);
  logger.addAppender(fileAppender);
  logger.setLevel(Level.DEBUG);
  Sample s=new Sample();
  s.owlfile=""String_Node_Str"";
  s.posExamples=new TreeSet<String>();
  s.negExamples=new TreeSet<String>();
  s.posExamples.add(""String_Node_Str"");
  s.posExamples.add(""String_Node_Str"");
  s.posExamples.add(""String_Node_Str"");
  s.posExamples.add(""String_Node_Str"");
  s.posExamples.add(""String_Node_Str"");
  s.negExamples.add(""String_Node_Str"");
  s.negExamples.add(""String_Node_Str"");
  s.negExamples.add(""String_Node_Str"");
  s.negExamples.add(""String_Node_Str"");
  s.negExamples.add(""String_Node_Str"");
  List<Description> conceptresults=s.learn();
  int x=0;
  for (  Description description : conceptresults) {
    if (x >= 5)     break;
    System.out.println(description.toManchesterSyntaxString(null,null));
    x++;
  }
  System.out.println(""String_Node_Str"");
  JamonMonitorLogger.printAllSortedByLabel();
}","public static void main(String[] args) throws IOException, ComponentInitException, LearningProblemUnsupportedException {
  SimpleLayout layout=new SimpleLayout();
  FileAppender fileAppender=new FileAppender(layout,""String_Node_Str"",false);
  ConsoleAppender consoleAppender=new ConsoleAppender(layout);
  logger.removeAllAppenders();
  logger.addAppender(consoleAppender);
  logger.addAppender(fileAppender);
  logger.setLevel(Level.DEBUG);
  String owlFile=""String_Node_Str"";
  SortedSet<String> posExamples=new TreeSet<String>();
  posExamples.add(""String_Node_Str"");
  posExamples.add(""String_Node_Str"");
  posExamples.add(""String_Node_Str"");
  posExamples.add(""String_Node_Str"");
  posExamples.add(""String_Node_Str"");
  SortedSet<String> negExamples=new TreeSet<String>();
  negExamples.add(""String_Node_Str"");
  negExamples.add(""String_Node_Str"");
  negExamples.add(""String_Node_Str"");
  negExamples.add(""String_Node_Str"");
  negExamples.add(""String_Node_Str"");
  List<EvaluatedDescription> results=learn(owlFile,posExamples,negExamples,5);
  int x=0;
  for (  EvaluatedDescription ed : results) {
    System.out.println(""String_Node_Str"" + x);
    System.out.println(""String_Node_Str"" + ed.getDescription().toManchesterSyntaxString(null,null));
    System.out.println(""String_Node_Str"" + df.format(ed.getAccuracy() * 100) + ""String_Node_Str"");
    System.out.println();
    x++;
  }
  Files.createFile(new File(""String_Node_Str""),MonitorFactory.getReport());
}"
10185,"@Override public int compare(EvaluatedDescription ed1,EvaluatedDescription ed2){
  double acc1=ed1.getAccuracy();
  double acc2=ed2.getAccuracy();
  if (acc1 > acc2)   return 1;
 else   if (acc1 < acc2)   return -1;
 else {
    int length1=ed1.getDescriptionLength();
    int length2=ed2.getDescriptionLength();
    if (length1 < length2)     return 1;
 else     if (length1 > length2)     return -1;
 else     return cc.compare(ed1.getDescription(),ed2.getDescription());
  }
}","@Override public int compare(EvaluatedDescription ed1,EvaluatedDescription ed2){
  double acc1=ed1.getAccuracy();
  double acc2=ed2.getAccuracy();
  if (acc1 > acc2)   return -1;
 else   if (acc1 < acc2)   return 1;
 else {
    int length1=ed1.getDescriptionLength();
    int length2=ed2.getDescriptionLength();
    if (length1 < length2)     return -1;
 else     if (length1 > length2)     return 1;
 else     return cc.compare(ed1.getDescription(),ed2.getDescription());
  }
}"
10186,"private void computeM(NamedClass nc){
  long mComputationTimeStartNs=System.nanoTime();
  mA.put(nc,new TreeMap<Integer,SortedSet<Description>>());
  for (int i=1; i <= mMaxLength; i++) {
    mA.get(nc).put(i,new TreeSet<Description>(conceptComparator));
  }
  SortedSet<Description> m1=rs.getMoreSpecialConcepts(nc);
  mA.get(nc).put(1,m1);
  SortedSet<Description> m2=new TreeSet<Description>(conceptComparator);
  if (useNegation) {
    SortedSet<Description> m2tmp=rs.getMoreGeneralConcepts(new Nothing());
    for (    Description c : m2tmp) {
      if (c instanceof Thing)       m2.add(c);
 else {
        NamedClass a=(NamedClass)c;
        if (!isNotADisjoint(a,nc) && isNotAMeaningful(a,nc))         m2.add(new Negation(a));
      }
    }
  }
  computeMg(nc);
  if (useBooleanDatatypes) {
    Set<DatatypeProperty> booleanDPs=mgbd.get(nc);
    for (    DatatypeProperty dp : booleanDPs) {
      m2.add(new BooleanValueRestriction(dp,true));
      m2.add(new BooleanValueRestriction(dp,false));
    }
  }
  mA.get(nc).put(2,m2);
  SortedSet<Description> m3=new TreeSet<Description>(conceptComparator);
  if (useExistsConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectSomeRestriction(r,new Thing()));
    }
  }
  if (useAllConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectAllRestriction(r,new Thing()));
    }
  }
  if (useDoubleDatatypes) {
    Set<DatatypeProperty> doubleDPs=mgdd.get(nc);
    for (    DatatypeProperty dp : doubleDPs) {
      DoubleMaxValue max=new DoubleMaxValue(splits.get(dp).get(splits.get(dp).size() - 1));
      DoubleMinValue min=new DoubleMinValue(splits.get(dp).get(0));
      m3.add(new DatatypeSomeRestriction(dp,max));
      m3.add(new DatatypeSomeRestriction(dp,min));
    }
  }
  mA.get(nc).put(3,m3);
  SortedSet<Description> m4=new TreeSet<Description>(conceptComparator);
  if (useCardinalityRestrictions) {
    for (    ObjectProperty r : mgr.get(nc)) {
      int maxFillers=maxNrOfFillers.get(r);
      m4.add(new ObjectMaxCardinalityRestriction(maxFillers - 1,r,new Thing()));
    }
  }
  mA.get(nc).put(4,m4);
  mComputationTimeNs+=System.nanoTime() - mComputationTimeStartNs;
}","private void computeM(NamedClass nc){
  long mComputationTimeStartNs=System.nanoTime();
  mA.put(nc,new TreeMap<Integer,SortedSet<Description>>());
  for (int i=1; i <= mMaxLength; i++) {
    mA.get(nc).put(i,new TreeSet<Description>(conceptComparator));
  }
  SortedSet<Description> m1=rs.getMoreSpecialConcepts(nc);
  mA.get(nc).put(1,m1);
  SortedSet<Description> m2=new TreeSet<Description>(conceptComparator);
  if (useNegation) {
    SortedSet<Description> m2tmp=rs.getMoreGeneralConcepts(new Nothing());
    for (    Description c : m2tmp) {
      if (c instanceof Thing)       m2.add(c);
 else {
        NamedClass a=(NamedClass)c;
        if (!isNotADisjoint(a,nc) && isNotAMeaningful(a,nc))         m2.add(new Negation(a));
      }
    }
  }
  computeMg(nc);
  if (useBooleanDatatypes) {
    Set<DatatypeProperty> booleanDPs=mgbd.get(nc);
    for (    DatatypeProperty dp : booleanDPs) {
      m2.add(new BooleanValueRestriction(dp,true));
      m2.add(new BooleanValueRestriction(dp,false));
    }
  }
  mA.get(nc).put(2,m2);
  SortedSet<Description> m3=new TreeSet<Description>(conceptComparator);
  if (useExistsConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectSomeRestriction(r,new Thing()));
    }
  }
  if (useAllConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectAllRestriction(r,new Thing()));
    }
  }
  if (useDoubleDatatypes) {
    Set<DatatypeProperty> doubleDPs=mgdd.get(nc);
    for (    DatatypeProperty dp : doubleDPs) {
      DoubleMaxValue max=new DoubleMaxValue(splits.get(dp).get(splits.get(dp).size() - 1));
      DoubleMinValue min=new DoubleMinValue(splits.get(dp).get(0));
      m3.add(new DatatypeSomeRestriction(dp,max));
      m3.add(new DatatypeSomeRestriction(dp,min));
    }
  }
  mA.get(nc).put(3,m3);
  SortedSet<Description> m4=new TreeSet<Description>(conceptComparator);
  if (useCardinalityRestrictions) {
    for (    ObjectProperty r : mgr.get(nc)) {
      int maxFillers=maxNrOfFillers.get(r);
      if (maxFillers > 0)       m4.add(new ObjectMaxCardinalityRestriction(maxFillers - 1,r,new Thing()));
    }
  }
  mA.get(nc).put(4,m4);
  mComputationTimeNs+=System.nanoTime() - mComputationTimeStartNs;
}"
10187,"/** 
 * this checks for consistency and manipulates the tuples, before they get triple
 * @param tuples tuples for the node
 * @param node
 * @return
 */
public Set<StringTuple> check(Set<StringTuple> tuples,Node node){
  Set<StringTuple> toRemove=new HashSet<StringTuple>();
  Iterator<StringTuple> it=tuples.iterator();
  while (it.hasNext()) {
    StringTuple t=(StringTuple)it.next();
    replacePredicate(t);
    replaceObject(t);
    if (t.a.equals(type) && t.b.equals(classns) && node instanceof ClassNode) {
      toRemove.add(t);
    }
    if (t.b.equals(classns) && node instanceof ClassNode) {
      toRemove.add(t);
    }
    if (t.a.equals(type) && t.b.equals(thing) && node instanceof InstanceNode) {
      toRemove.add(t);
    }
  }
  tuples.removeAll(toRemove);
  return tuples;
}","/** 
 * this checks for consistency and manipulates the tuples, before they get triple
 * @param tuples tuples for the node
 * @param node
 * @return
 */
public Set<StringTuple> check(Set<StringTuple> tuples,Node node){
  Set<StringTuple> toRemove=new HashSet<StringTuple>();
  Iterator<StringTuple> it=tuples.iterator();
  float lat=0;
  float lng=0;
  String clas=""String_Node_Str"";
  StringTuple typeTupel=null;
  if (node.uri.toString().equals(""String_Node_Str""))   tuples.add(new StringTuple(""String_Node_Str"",""String_Node_Str""));
  while (it.hasNext()) {
    StringTuple t=(StringTuple)it.next();
    if (t.a.equals(""String_Node_Str"")) {
      clas=t.b;
      typeTupel=t;
    }
    if (t.a.equals(""String_Node_Str""))     lat=Float.parseFloat(t.b.substring(0,t.b.indexOf(""String_Node_Str"")));
    if (t.a.equals(""String_Node_Str""))     lng=Float.parseFloat(t.b.substring(0,t.b.indexOf(""String_Node_Str"")));
  }
  if (clas.equals(""String_Node_Str"")) {
    if (lat > 50 && lat < 52 && lng > 12 && lng < 13) {
      tuples.add(new StringTuple(""String_Node_Str"",""String_Node_Str""));
      tuples.remove(typeTupel);
    }
  }
  return tuples;
}"
10188,"@Override public Vector<Node> expand(TypedSparqlQueryInterface tsq,Manipulators m){
  Set<StringTuple> s=tsq.getTupelForResource(uri);
  m.check(s,this);
  Vector<Node> Nodes=new Vector<Node>();
  Iterator<StringTuple> it=s.iterator();
  while (it.hasNext()) {
    StringTuple t=(StringTuple)it.next();
    if (!t.b.startsWith(""String_Node_Str""))     continue;
    try {
      if (t.a.equals(Manipulators.type)) {
        ClassNode tmp=new ClassNode(new URI(t.b));
        classes.add(tmp);
        Nodes.add(tmp);
      }
 else {
        InstanceNode tmp=new InstanceNode(new URI(t.b));
        properties.add(new PropertyNode(new URI(t.a),this,tmp));
        Nodes.add(tmp);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + t);
      e.printStackTrace();
    }
  }
  expanded=true;
  return Nodes;
}","@Override public Vector<Node> expand(TypedSparqlQueryInterface tsq,Manipulators m){
  Set<StringTuple> s=tsq.getTupelForResource(uri);
  s=m.check(s,this);
  Vector<Node> Nodes=new Vector<Node>();
  Iterator<StringTuple> it=s.iterator();
  while (it.hasNext()) {
    StringTuple t=(StringTuple)it.next();
    if (!t.b.startsWith(""String_Node_Str""))     continue;
    try {
      if (t.a.equals(Manipulators.type)) {
        ClassNode tmp=new ClassNode(new URI(t.b));
        classes.add(tmp);
        Nodes.add(tmp);
      }
 else {
        InstanceNode tmp=new InstanceNode(new URI(t.b));
        properties.add(new PropertyNode(new URI(t.a),this,tmp));
        Nodes.add(tmp);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + t);
      e.printStackTrace();
    }
  }
  expanded=true;
  return Nodes;
}"
10189,"private String internalFilterAssemblySubject(){
  String Filter=""String_Node_Str"";
  if (!this.sparqlQueryType.isLiterals())   Filter+=""String_Node_Str"";
  for (  String p : sparqlQueryType.getPredicatefilterlist()) {
    Filter+=lineend + filterPredicate(p);
  }
  for (  String o : sparqlQueryType.getObjectfilterlist()) {
    Filter+=lineend + filterObject(o);
  }
  return Filter;
}","private String internalFilterAssemblySubject(){
  String Filter=""String_Node_Str"";
  if (!this.sparqlQueryType.isLiterals()) {
    Filter+=""String_Node_Str"";
    if (sparqlQueryType.getPredicatefilterlist().size() > 0)     Filter+=""String_Node_Str"";
  }
 else   if (sparqlQueryType.getPredicatefilterlist().size() > 0)   Filter+=""String_Node_Str"";
  int i=1;
  for (  String p : sparqlQueryType.getPredicatefilterlist()) {
    if (this.sparqlQueryType.getMode() == ""String_Node_Str"")     if (!this.sparqlQueryType.isLiterals() || i != 1)     Filter+=lineend + filterPredicate(p);
 else     Filter+=lineend + filterPredicate(p).substring(2);
 else     if (this.sparqlQueryType.getMode() == ""String_Node_Str"")     if (!this.sparqlQueryType.isLiterals() || i != 1)     Filter+=lineend + allowPredicate(p);
 else     Filter+=lineend + allowPredicate(p).substring(2);
    i++;
  }
  if (sparqlQueryType.getPredicatefilterlist().size() > 0)   Filter+=""String_Node_Str"";
  if ((sparqlQueryType.getPredicatefilterlist().size() > 0 || !this.sparqlQueryType.isLiterals()) && sparqlQueryType.getObjectfilterlist().size() > 0)   Filter+=""String_Node_Str"";
 else   if (sparqlQueryType.getObjectfilterlist().size() > 0)   Filter+=""String_Node_Str"";
  i=1;
  for (  String o : sparqlQueryType.getObjectfilterlist()) {
    if (this.sparqlQueryType.getMode() == ""String_Node_Str"")     if (!this.sparqlQueryType.isLiterals() || i != 1)     Filter+=lineend + filterObject(o);
 else     Filter+=lineend + filterObject(o).substring(2);
 else     if (this.sparqlQueryType.getMode() == ""String_Node_Str"")     if (!this.sparqlQueryType.isLiterals() || i != 1)     Filter+=lineend + allowObject(o);
 else     Filter+=lineend + allowObject(o).substring(2);
    i++;
  }
  if (sparqlQueryType.getObjectfilterlist().size() > 0)   Filter+=""String_Node_Str"";
  return Filter;
}"
10190,"public String makeSubjectQueryUsingFilters(String subject){
  String Filter=internalFilterAssemblySubject();
  String ret=""String_Node_Str"" + lineend + ""String_Node_Str""+ subject+ ""String_Node_Str""+ lineend+ ""String_Node_Str""+ lineend+ ""String_Node_Str""+ Filter+ ""String_Node_Str"";
  return ret;
}","public String makeSubjectQueryUsingFilters(String subject){
  String Filter=internalFilterAssemblySubject();
  String ret=""String_Node_Str"";
  if (Filter.length() > 0)   ret=""String_Node_Str"" + lineend + ""String_Node_Str""+ subject+ ""String_Node_Str""+ lineend+ ""String_Node_Str""+ lineend+ Filter+ ""String_Node_Str"";
 else   ret=""String_Node_Str"" + lineend + ""String_Node_Str""+ subject+ ""String_Node_Str"";
  return ret;
}"
10191,"public static SparqlQueryType getFilterByName(String name){
  if (name.equals(""String_Node_Str""))   return YagoFilter();
  if (name.equals(""String_Node_Str""))   return SKOS();
  if (name.equals(""String_Node_Str""))   return YAGOSKOS();
  if (name.equals(""String_Node_Str""))   return YagoSpecialHierarchy();
  if (name.equals(""String_Node_Str""))   return test();
  return null;
}","public static SparqlQueryType getFilterByName(String name){
  if (name.equals(""String_Node_Str""))   return YagoFilter();
  if (name.equals(""String_Node_Str""))   return SKOS();
  if (name.equals(""String_Node_Str""))   return YAGOSKOS();
  if (name.equals(""String_Node_Str""))   return YagoSpecialHierarchy();
  if (name.equals(""String_Node_Str""))   return test();
  if (name.equals(""String_Node_Str""))   return DBpediaNavigatorFilter();
  return null;
}"
10192,"@WebMethod public String[] getNegativeExamples(int sessionID,int componentID,String[] positives,int results,String namespace) throws ClientNotKnownException {
  SortedSet<String> set=new TreeSet<String>(Arrays.asList(positives));
  ClientState state=getState(sessionID);
  Component component=state.getComponent(componentID);
  SparqlKnowledgeSource ks=(SparqlKnowledgeSource)component;
  SPARQLTasks task=ks.getSparqlTask();
  AutomaticNegativeExampleFinderSPARQL finder=new AutomaticNegativeExampleFinderSPARQL(set,task);
  finder.makeNegativeExamplesFromRelatedInstances(set,namespace);
  finder.makeNegativeExamplesFromParallelClasses(set,2);
  SortedSet<String> negExamples=finder.getNegativeExamples(results);
  return negExamples.toArray(new String[negExamples.size()]);
}","@WebMethod public String[] getNegativeExamples(int sessionID,int componentID,String[] positives,int results,String namespace) throws ClientNotKnownException {
  SortedSet<String> set=new TreeSet<String>(Arrays.asList(positives));
  ClientState state=getState(sessionID);
  Component component=state.getComponent(componentID);
  SparqlKnowledgeSource ks=(SparqlKnowledgeSource)component;
  SPARQLTasks task=ks.getSparqlTask();
  AutomaticNegativeExampleFinderSPARQL finder=new AutomaticNegativeExampleFinderSPARQL(set,task);
  finder.makeNegativeExamplesFromParallelClasses(set,5);
  SortedSet<String> negExamples=finder.getNegativeExamples(results);
  return negExamples.toArray(new String[negExamples.size()]);
}"
10193,"/** 
 * @see #getCurrentlyBestEvaluatedDescriptions(int,double,boolean)
 */
public synchronized List<Description> getCurrentlyBestDescriptions(int nrOfDescriptions,boolean filterNonMinimalDescriptions){
  List<Description> currentlyBest=getCurrentlyBestDescriptions();
  List<Description> returnList=new LinkedList<Description>();
  int count=0;
  for (  Description ed : currentlyBest) {
    if (count >= nrOfDescriptions)     return returnList;
    if (!filterNonMinimalDescriptions || ConceptTransformation.isDescriptionMinimal(ed))     returnList.add(ed);
    count++;
  }
  return returnList;
}","/** 
 * @see #getCurrentlyBestEvaluatedDescriptions(int,double,boolean)
 */
public synchronized List<Description> getCurrentlyBestDescriptions(int nrOfDescriptions,boolean filterNonMinimalDescriptions){
  List<Description> currentlyBest=getCurrentlyBestDescriptions();
  List<Description> returnList=new LinkedList<Description>();
  for (  Description ed : currentlyBest) {
    if (returnList.size() >= nrOfDescriptions)     return returnList;
    if (!filterNonMinimalDescriptions || ConceptTransformation.isDescriptionMinimal(ed))     returnList.add(ed);
  }
  return returnList;
}"
10194,"private String internalFilterAssemblySubject(){
  String Filter=""String_Node_Str"";
  if (!this.sparqlQueryType.isLiterals()) {
    Filter+=""String_Node_Str"";
    if (sparqlQueryType.getPredicatefilterlist().size() > 0)     Filter+=""String_Node_Str"";
  }
 else   if (sparqlQueryType.getPredicatefilterlist().size() > 0)   Filter+=""String_Node_Str"";
  int i=1;
  for (  String p : sparqlQueryType.getPredicatefilterlist()) {
    if (this.sparqlQueryType.getMode() == ""String_Node_Str"")     if (!this.sparqlQueryType.isLiterals() || i != 1)     Filter+=lineend + filterPredicate(p);
 else     Filter+=lineend + filterPredicate(p).substring(2);
 else     if (this.sparqlQueryType.getMode() == ""String_Node_Str"")     if (!this.sparqlQueryType.isLiterals() || i != 1)     Filter+=lineend + allowPredicate(p);
 else     Filter+=lineend + allowPredicate(p).substring(2);
    i++;
  }
  if (sparqlQueryType.getPredicatefilterlist().size() > 0)   Filter+=""String_Node_Str"";
  if ((sparqlQueryType.getPredicatefilterlist().size() > 0 || !this.sparqlQueryType.isLiterals()) && sparqlQueryType.getObjectfilterlist().size() > 0)   Filter+=""String_Node_Str"";
 else   if (sparqlQueryType.getObjectfilterlist().size() > 0)   Filter+=""String_Node_Str"";
  i=1;
  for (  String o : sparqlQueryType.getObjectfilterlist()) {
    if (this.sparqlQueryType.getMode() == ""String_Node_Str"")     if (!this.sparqlQueryType.isLiterals() || i != 1)     Filter+=lineend + filterObject(o);
 else     Filter+=lineend + filterObject(o).substring(2);
 else     if (this.sparqlQueryType.getMode() == ""String_Node_Str"")     if (!this.sparqlQueryType.isLiterals() || i != 1)     Filter+=lineend + allowObject(o);
 else     Filter+=lineend + allowObject(o).substring(2);
    i++;
  }
  if (sparqlQueryType.getObjectfilterlist().size() > 0)   Filter+=""String_Node_Str"";
  return Filter;
}","private String internalFilterAssemblySubject(){
  String Filter=""String_Node_Str"";
  if (!this.sparqlQueryType.isLiterals()) {
    Filter+=""String_Node_Str"";
    if (sparqlQueryType.getPredicatefilterlist().size() > 0)     Filter+=""String_Node_Str"";
  }
 else   if (sparqlQueryType.getPredicatefilterlist().size() > 0)   Filter+=""String_Node_Str"";
  int i=1;
  for (  String p : sparqlQueryType.getPredicatefilterlist()) {
    if (this.sparqlQueryType.getMode() == ""String_Node_Str"")     if (i != 1)     Filter+=lineend + filterPredicate(p);
 else     Filter+=lineend + filterPredicate(p).substring(2);
 else     if (this.sparqlQueryType.getMode() == ""String_Node_Str"")     if (i != 1)     Filter+=lineend + allowPredicate(p);
 else     Filter+=lineend + allowPredicate(p).substring(2);
    i++;
  }
  if (sparqlQueryType.getPredicatefilterlist().size() > 0)   Filter+=""String_Node_Str"";
  if ((sparqlQueryType.getPredicatefilterlist().size() > 0 || !this.sparqlQueryType.isLiterals()) && sparqlQueryType.getObjectfilterlist().size() > 0)   Filter+=""String_Node_Str"";
 else   if (sparqlQueryType.getObjectfilterlist().size() > 0)   Filter+=""String_Node_Str"";
  i=1;
  for (  String o : sparqlQueryType.getObjectfilterlist()) {
    if (this.sparqlQueryType.getMode() == ""String_Node_Str"")     if (i != 1)     Filter+=lineend + filterObject(o);
 else     Filter+=lineend + filterObject(o).substring(2);
 else     if (this.sparqlQueryType.getMode() == ""String_Node_Str"")     if (i != 1)     Filter+=lineend + allowObject(o);
 else     Filter+=lineend + allowObject(o).substring(2);
    i++;
  }
  if (sparqlQueryType.getObjectfilterlist().size() > 0)   Filter+=""String_Node_Str"";
  return Filter;
}"
10195,"public void init(){
  menu=new JPopupMenu();
  if (!(desc instanceof Negation)) {
    if (desc instanceof NamedClass) {
      menu.add(new DescriptionMenuItem(""String_Node_Str"" + desc.toString(),desc));
      JMenu dme=new JMenu(""String_Node_Str"" + desc.toString() + ""String_Node_Str"");
      for (      NamedClass nc : ore.getpossibleMoveClasses(ind))       dme.add(new MoveMenuItem((NamedClass)desc,nc));
      menu.add(dme);
    }
 else     if (desc instanceof ObjectSomeRestriction) {
      menu.add(new DescriptionMenuItem(""String_Node_Str"" + ((ObjectSomeRestriction)desc).getRole(),desc));
      System.out.println(desc.getChild(0).getClass());
      if (!(desc.getChild(0) instanceof Thing)) {
        JMenu dme=new JMenu(""String_Node_Str"" + ((ObjectSomeRestriction)desc).getRole() + ""String_Node_Str"");
        for (        Individual i : ore.getIndividualsNotOfPropertyRange((ObjectSomeRestriction)desc,ind))         dme.add(new DescriptionMenuItem(i.getName(),desc.getChild(0)));
        menu.add(dme);
      }
    }
  }
 else   if (desc instanceof Negation) {
    if (desc.getChild(0) instanceof NamedClass) {
      DescriptionMenuItem item=new DescriptionMenuItem(""String_Node_Str"" + desc.getChild(0).toString(),desc.getChild(0));
      menu.add(item);
      if (ore.hasComplement(desc,ind)) {
        item.setEnabled(false);
        item.setToolTipText(""String_Node_Str"");
      }
    }
 else     if (desc.getChild(0) instanceof ObjectSomeRestriction) {
      JMenu dme=new JMenu(""String_Node_Str"" + desc.toString() + ""String_Node_Str"");
      for (      Individual i : ore.getIndividualsOfPropertyRange((ObjectSomeRestriction)desc.getChild(0),ind))       dme.add(new DescriptionMenuItem(i.getName(),desc.getChild(0)));
      menu.add(dme);
    }
  }
}","public void init(){
  menu=new JPopupMenu();
  if (!(desc instanceof Negation)) {
    if (desc instanceof NamedClass) {
      menu.add(new DescriptionMenuItem(""String_Node_Str"" + desc.toString(),desc));
      JMenu dme=new JMenu(""String_Node_Str"" + desc.toString() + ""String_Node_Str"");
      for (      NamedClass nc : ore.getpossibleMoveClasses(ind)) {
        MoveMenuItem move=new MoveMenuItem((NamedClass)desc,nc);
        dme.add(move);
        Set<NamedClass> complements=ore.getComplements(nc,ind);
        System.out.println(""String_Node_Str"" + complements.size());
        if (!(complements.size() <= 1)) {
          move.setEnabled(false);
          StringBuffer strBuf=new StringBuffer();
          strBuf.append(""String_Node_Str"" + ""String_Node_Str"");
          for (          NamedClass n : complements)           strBuf.append(""String_Node_Str"" + n + ""String_Node_Str"");
          strBuf.append(""String_Node_Str"");
          move.setToolTipText(strBuf.toString());
        }
      }
      menu.add(dme);
    }
 else     if (desc instanceof ObjectSomeRestriction) {
      menu.add(new DescriptionMenuItem(""String_Node_Str"" + ((ObjectSomeRestriction)desc).getRole(),desc));
      if (!(desc.getChild(0) instanceof Thing))       menu.add(new DescriptionMenuItem(""String_Node_Str"" + ((ObjectSomeRestriction)desc).getChild(0),desc));
    }
 else     if (desc instanceof ObjectAllRestriction) {
      if (!(desc.getChild(0) instanceof Thing)) {
        JMenu dme=new JMenu(""String_Node_Str"" + ((ObjectAllRestriction)desc).getRole() + ""String_Node_Str"");
        for (        Individual i : ore.getIndividualsNotOfPropertyRange((ObjectAllRestriction)desc,ind))         dme.add(new DescriptionMenuItem(i.getName(),desc.getChild(0)));
        menu.add(dme);
      }
    }
  }
 else   if (desc instanceof Negation) {
    if (desc.getChild(0) instanceof NamedClass) {
      DescriptionMenuItem item=new DescriptionMenuItem(""String_Node_Str"" + desc.getChild(0).toString(),desc.getChild(0));
      menu.add(item);
      if (!ore.getComplements(desc,ind).isEmpty()) {
        item.setEnabled(false);
        item.setToolTipText(""String_Node_Str"");
      }
    }
 else     if (desc.getChild(0) instanceof ObjectSomeRestriction) {
      JMenu dme=new JMenu(""String_Node_Str"" + desc.toString() + ""String_Node_Str"");
      for (      Individual i : ore.getIndividualsOfPropertyRange((ObjectSomeRestriction)desc.getChild(0),ind))       dme.add(new DescriptionMenuItem(i.getName(),desc.getChild(0)));
      menu.add(dme);
    }
  }
}"
10196,"@Override public void done(){
  List<Description> result=null;
  try {
    result=get();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  ExecutionException e) {
    e.printStackTrace();
  }
  panel4.getStartButton().setEnabled(true);
  panel4.getStopButton().setEnabled(false);
  updateList(result);
  panel4.getLoadingLabel().setBusy(false);
  panel4.getStatusLabel().setText(""String_Node_Str"");
}","@Override public void done(){
  timer.cancel();
  List<Description> result=null;
  try {
    result=get();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  ExecutionException e) {
    e.printStackTrace();
  }
  panel4.getStartButton().setEnabled(true);
  panel4.getStopButton().setEnabled(false);
  updateList(result);
  panel4.getLoadingLabel().setBusy(false);
  panel4.getStatusLabel().setText(""String_Node_Str"");
}"
10197,"public void actionPerformed(ActionEvent event){
  if (event.getActionCommand().equals(""String_Node_Str"")) {
    panel4.getModel().clear();
    panel4.getStartButton().setEnabled(false);
    panel4.getStopButton().setEnabled(true);
    worker=new ResultSwingWorker();
    worker.execute();
  }
 else {
    canceled=true;
    panel4.getStopButton().setEnabled(false);
    getWizardModel().getOre().getLa().stop();
    timer.cancel();
    panel4.getStartButton().setEnabled(true);
    panel4.getStatusLabel().setText(""String_Node_Str"");
    panel4.getLoadingLabel().setBusy(false);
  }
}","public void actionPerformed(ActionEvent event){
  if (event.getActionCommand().equals(""String_Node_Str"")) {
    panel4.getModel().clear();
    panel4.getStartButton().setEnabled(false);
    panel4.getStopButton().setEnabled(true);
    worker=new ResultSwingWorker();
    worker.execute();
  }
 else {
    canceled=true;
    panel4.getStopButton().setEnabled(false);
    la.stop();
    timer.cancel();
    panel4.getStartButton().setEnabled(true);
    panel4.getStatusLabel().setText(""String_Node_Str"");
    panel4.getLoadingLabel().setBusy(false);
  }
}"
10198,"@SuppressWarnings(""String_Node_Str"") @Override public List<Description> doInBackground(){
  panel4.getResultList().setCellRenderer(new ColumnListCellRenderer(getWizardModel().getOre()));
  panel4.getLoadingLabel().setBusy(true);
  panel4.getStatusLabel().setText(""String_Node_Str"");
  getWizardModel().getOre().setNoise(panel4.getNoise());
  la=getWizardModel().getOre().getLa();
  timer=new Timer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      if (la != null) {
        System.out.println(scheduledExecutionTime() - System.currentTimeMillis());
        publish(la.getCurrentlyBestDescriptions(10,true));
      }
    }
  }
,1000,1000);
  t=new Thread(new Runnable(){
    @Override public void run(){
      la.start();
    }
  }
);
  t.setPriority(Thread.MIN_PRIORITY);
  t.start();
  try {
    t.join();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  List<Description> result=getWizardModel().getOre().getLearningResults(10);
  return result;
}","@SuppressWarnings(""String_Node_Str"") @Override public List<Description> doInBackground(){
  panel4.getResultList().setCellRenderer(new ColumnListCellRenderer(getWizardModel().getOre()));
  panel4.getLoadingLabel().setBusy(true);
  panel4.getStatusLabel().setText(""String_Node_Str"");
  getWizardModel().getOre().setNoise(panel4.getNoise());
  la=getWizardModel().getOre().getLa();
  timer=new Timer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      if (la != null) {
        publish(la.getCurrentlyBestDescriptions(30,true));
      }
    }
  }
,1000,1000);
  t=new Thread(new Runnable(){
    @Override public void run(){
      getWizardModel().getOre().start();
    }
  }
);
  t.setPriority(Thread.MIN_PRIORITY);
  t.start();
  try {
    t.join();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  List<Description> result=getWizardModel().getOre().getLearningResults(30);
  return result;
}"
10199,"public void init(){
  setSize(700,700);
  setLayout(new BorderLayout());
  descPanel=new DescriptionPanel(ore,ind,this);
  JScrollPane descScroll=new JScrollPane();
  descScroll.setViewportView(descPanel);
  statsPanel=new StatsPanel(ore,ind);
  statsPanel.init();
  JScrollPane statsScroll=new JScrollPane();
  statsScroll.setViewportView(statsPanel);
  changesPanel=new ChangesPanel();
  JScrollPane changesScroll=new JScrollPane();
  changesScroll.setViewportView(changesPanel);
  action_stats_Panel=new JPanel();
  GridBagLayout gbl=new GridBagLayout();
  gbl.rowWeights=new double[]{0.0,0.1,0.1};
  gbl.rowHeights=new int[]{34,7,7};
  gbl.columnWeights=new double[]{0.1};
  gbl.columnWidths=new int[]{7};
  action_stats_Panel.setLayout(gbl);
  action_stats_Panel.add(descScroll,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,5,5,5),0,0));
  action_stats_Panel.add(statsScroll,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,5,0,5),0,0));
  action_stats_Panel.add(changesScroll,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,5,0,5),0,0));
  JSeparator separator=new JSeparator();
  Box buttonBox=new Box(BoxLayout.X_AXIS);
  ok_cancelPanel=new JPanel();
  ok_cancelPanel.setLayout(new BorderLayout());
  ok_cancelPanel.add(separator,BorderLayout.NORTH);
  okButton=new JButton(""String_Node_Str"");
  okButton.addActionListener(this);
  cancelButton=new JButton(""String_Node_Str"");
  cancelButton.addActionListener(this);
  getContentPane().add(action_stats_Panel,java.awt.BorderLayout.CENTER);
  buttonBox.setBorder(new EmptyBorder(new Insets(5,10,5,10)));
  buttonBox.add(okButton);
  buttonBox.add(Box.createHorizontalStrut(10));
  buttonBox.add(cancelButton);
  ok_cancelPanel.add(buttonBox,BorderLayout.EAST);
  getContentPane().add(ok_cancelPanel,BorderLayout.SOUTH);
  setModal(true);
  setVisible(true);
}","public void init(){
  setSize(700,700);
  setLayout(new BorderLayout());
  descPanel=new DescriptionPanel(ore,ind,this);
  JScrollPane descScroll=new JScrollPane();
  descScroll.setViewportView(descPanel);
  statsPanel=new StatsPanel(ore,ind);
  statsPanel.init();
  JScrollPane statsScroll=new JScrollPane();
  statsScroll.setViewportView(statsPanel);
  changesPanel=new ChangesPanel();
  JScrollPane changesScroll=new JScrollPane();
  changesScroll.setViewportView(changesPanel);
  action_stats_Panel=new JPanel();
  GridBagLayout gbl=new GridBagLayout();
  gbl.rowWeights=new double[]{0.0,0.1,0.1};
  gbl.rowHeights=new int[]{64,7,7};
  gbl.columnWeights=new double[]{0.1};
  gbl.columnWidths=new int[]{7};
  action_stats_Panel.setLayout(gbl);
  action_stats_Panel.add(descScroll,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,5,5,5),0,0));
  action_stats_Panel.add(statsScroll,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,5,0,5),0,0));
  action_stats_Panel.add(changesScroll,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,5,0,5),0,0));
  JSeparator separator=new JSeparator();
  Box buttonBox=new Box(BoxLayout.X_AXIS);
  ok_cancelPanel=new JPanel();
  ok_cancelPanel.setLayout(new BorderLayout());
  ok_cancelPanel.add(separator,BorderLayout.NORTH);
  okButton=new JButton(""String_Node_Str"");
  okButton.addActionListener(this);
  cancelButton=new JButton(""String_Node_Str"");
  cancelButton.addActionListener(this);
  getContentPane().add(action_stats_Panel,java.awt.BorderLayout.CENTER);
  buttonBox.setBorder(new EmptyBorder(new Insets(5,10,5,10)));
  buttonBox.add(okButton);
  buttonBox.add(Box.createHorizontalStrut(10));
  buttonBox.add(cancelButton);
  ok_cancelPanel.add(buttonBox,BorderLayout.EAST);
  getContentPane().add(ok_cancelPanel,BorderLayout.SOUTH);
  setModal(true);
  setVisible(true);
}"
10200,"public void actionPerformed(ActionEvent e){
  if (e.getSource() instanceof DescriptionMenuItem) {
    actualDesc=((DescriptionMenuItem)e.getSource()).getDescription();
    System.out.println(e.getActionCommand());
    if (e.getActionCommand().startsWith(""String_Node_Str"")) {
      List<OWLOntologyChange> changes=ore.modi.removeClassAssertion(ind,actualDesc);
      allChanges.addAll(changes);
      descPanel.updatePanel();
      statsPanel.updatePanel(""String_Node_Str"",actualDesc);
      changesPanel.add(new ChangePanel(""String_Node_Str"" + actualDesc,changes,this));
    }
 else     if (e.getActionCommand().startsWith(""String_Node_Str"")) {
      List<OWLOntologyChange> changes=ore.modi.addClassAssertion(ind,actualDesc);
      allChanges.addAll(changes);
      descPanel.updatePanel();
      changesPanel.add(new ChangePanel(""String_Node_Str"" + actualDesc,changes,this));
    }
 else     if (e.getActionCommand().startsWith(""String_Node_Str"")) {
      Individual ind=new Individual(e.getActionCommand());
      List<OWLOntologyChange> changes=ore.modi.addObjectProperty(ind,(ObjectSomeRestriction)actualDesc,ind);
      System.out.println(""String_Node_Str"");
      allChanges.addAll(changes);
      descPanel.updatePanel();
      changesPanel.add(new ChangePanel(""String_Node_Str"" + ((ObjectSomeRestriction)actualDesc).getRole() + ""String_Node_Str""+ ind,changes,this));
    }
  }
 else   if (e.getSource() instanceof MoveMenuItem) {
    actualDesc=((MoveMenuItem)e.getSource()).getSource();
    newDesc=new NamedClass(e.getActionCommand());
    List<OWLOntologyChange> changes=ore.modi.moveIndividual(ind,actualDesc,newDesc);
    allChanges.addAll(changes);
    descPanel.updatePanel();
    statsPanel.updatePanel(""String_Node_Str"",actualDesc);
    changesPanel.add(new ChangePanel(""String_Node_Str"" + actualDesc + ""String_Node_Str""+ newDesc,changes,this));
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    List<OWLOntologyChange> changes=ore.modi.deleteIndividual(ind);
    allChanges.addAll(changes);
    for (    OWLOntologyChange ol : changes)     System.out.println(((RemoveAxiom)ol).getAxiom());
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    if (JOptionPane.showConfirmDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
      ore.modi.undoChanges(allChanges);
      allChanges.clear();
      setVisible(false);
      dispose();
    }
  }
}","public void actionPerformed(ActionEvent e){
  if (e.getSource() instanceof DescriptionMenuItem) {
    actualDesc=((DescriptionMenuItem)e.getSource()).getDescription();
    System.out.println(e.getActionCommand());
    if (e.getActionCommand().startsWith(""String_Node_Str"")) {
      List<OWLOntologyChange> changes=ore.modi.removeClassAssertion(ind,actualDesc);
      allChanges.addAll(changes);
      descPanel.updatePanel();
      statsPanel.updatePanel(""String_Node_Str"",actualDesc);
      changesPanel.add(new ChangePanel(""String_Node_Str"" + actualDesc,changes,this));
    }
 else     if (e.getActionCommand().startsWith(""String_Node_Str"")) {
      List<OWLOntologyChange> changes=ore.modi.addClassAssertion(ind,actualDesc);
      allChanges.addAll(changes);
      descPanel.updatePanel();
      changesPanel.add(new ChangePanel(""String_Node_Str"" + actualDesc,changes,this));
    }
 else     if (e.getActionCommand().startsWith(""String_Node_Str"")) {
      Individual ind=new Individual(e.getActionCommand());
      List<OWLOntologyChange> changes=ore.modi.addObjectProperty(ind,(ObjectSomeRestriction)actualDesc,ind);
      allChanges.addAll(changes);
      descPanel.updatePanel();
      changesPanel.add(new ChangePanel(""String_Node_Str"" + ((ObjectSomeRestriction)actualDesc).getRole() + ""String_Node_Str""+ ind,changes,this));
    }
 else     if (e.getActionCommand().startsWith(""String_Node_Str"")) {
      List<OWLOntologyChange> changes=ore.modi.deleteObjectProperty(ind,(ObjectSomeRestriction)actualDesc);
      allChanges.addAll(changes);
      descPanel.updatePanel();
      changesPanel.add(new ChangePanel(""String_Node_Str"" + ((ObjectSomeRestriction)actualDesc).getRole(),changes,this));
    }
 else     if (e.getActionCommand().startsWith(""String_Node_Str"")) {
      List<OWLOntologyChange> changes=ore.modi.deleteObjectPropertyAssertions(ind,(ObjectSomeRestriction)actualDesc);
      allChanges.addAll(changes);
      descPanel.updatePanel();
      changesPanel.add(new ChangePanel(""String_Node_Str"" + ((ObjectSomeRestriction)actualDesc).getRole() + ""String_Node_Str""+ ind,changes,this));
    }
  }
 else   if (e.getSource() instanceof MoveMenuItem) {
    actualDesc=((MoveMenuItem)e.getSource()).getSource();
    newDesc=new NamedClass(e.getActionCommand());
    List<OWLOntologyChange> changes=ore.modi.moveIndividual(ind,actualDesc,newDesc);
    allChanges.addAll(changes);
    descPanel.updatePanel();
    statsPanel.updatePanel(""String_Node_Str"",actualDesc);
    changesPanel.add(new ChangePanel(""String_Node_Str"" + actualDesc + ""String_Node_Str""+ newDesc,changes,this));
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    List<OWLOntologyChange> changes=ore.modi.deleteIndividual(ind);
    allChanges.addAll(changes);
    for (    OWLOntologyChange ol : changes)     System.out.println(((RemoveAxiom)ol).getAxiom());
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setVisible(false);
    dispose();
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    if (JOptionPane.showConfirmDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
      ore.modi.undoChanges(allChanges);
      allChanges.clear();
      setVisible(false);
      dispose();
    }
  }
}"
10201,"/** 
 * Starts the learning algorithm and returns the best concept found. This method will block until learning is completed.
 * @param id Session ID.
 * @param format The format of the result string: ""manchester"", ""kb"", ""dl"".
 * @return The best solution found.
 * @throws ClientNotKnownException
 */
@WebMethod public String learn(int id,String format) throws ClientNotKnownException {
  ClientState state=getState(id);
  state.getLearningAlgorithm().start();
  Description solution=state.getLearningAlgorithm().getBestSolution();
  if (format == ""String_Node_Str"")   return solution.toManchesterSyntaxString(state.getReasoningService().getBaseURI(),new HashMap<String,String>());
 else   if (format == ""String_Node_Str"")   return solution.toKBSyntaxString();
 else   return solution.toString();
}","/** 
 * Starts the learning algorithm and returns the best concept found. This method will block until learning is completed.
 * @param id Session ID.
 * @param format The format of the result string: ""manchester"", ""kb"", ""dl"".
 * @return The best solution found.
 * @throws ClientNotKnownException
 */
@WebMethod public String learn(int id,String format) throws ClientNotKnownException {
  ClientState state=getState(id);
  state.getLearningAlgorithm().start();
  Description solution=state.getLearningAlgorithm().getBestSolution();
  if (format.equals(""String_Node_Str""))   return solution.toManchesterSyntaxString(state.getReasoningService().getBaseURI(),new HashMap<String,String>());
 else   if (format.equals(""String_Node_Str""))   return solution.toKBSyntaxString();
 else   return solution.toString();
}"
10202,"public Set<Description> getSimpleSuggestions(ReasoningService rs,Set<Individual> indi){
  simpleSuggestions=new HashSet<Description>();
  List<ObjectProperty> test=rs.getAtomicRolesList();
  while (test.iterator().hasNext()) {
    test.iterator().next();
    Description d1=new ObjectSomeRestriction(test.iterator().next(),new Thing());
    test.remove(rs.getAtomicRolesList().iterator().next());
    System.out.println(""String_Node_Str"" + d1);
    simpleSuggestions.add(d1);
  }
  return simpleSuggestions;
}","public Set<Description> getSimpleSuggestions(ReasoningService rs,Set<Individual> indi){
  simpleSuggestions=new HashSet<Description>();
  List<ObjectProperty> test=rs.getAtomicRolesList();
  while (test.iterator().hasNext()) {
    test.iterator().next();
    Description d1=new ObjectSomeRestriction(test.iterator().next(),new Thing());
    test.remove(rs.getAtomicRolesList().iterator().next());
    simpleSuggestions.add(d1);
  }
  return simpleSuggestions;
}"
10203,"@Override public void init(){
  OWLOntologyManager manager=OWLManager.createOWLOntologyManager();
  Comparator<OWLNamedObject> namedObjectComparator=new Comparator<OWLNamedObject>(){
    public int compare(    OWLNamedObject o1,    OWLNamedObject o2){
      return o1.getURI().compareTo(o2.getURI());
    }
  }
;
  Set<OWLClass> classes=new TreeSet<OWLClass>(namedObjectComparator);
  Set<OWLObjectProperty> owlObjectProperties=new TreeSet<OWLObjectProperty>(namedObjectComparator);
  Set<OWLDataProperty> owlDatatypeProperties=new TreeSet<OWLDataProperty>(namedObjectComparator);
  Set<OWLIndividual> owlIndividuals=new TreeSet<OWLIndividual>(namedObjectComparator);
  Set<OWLOntology> allImports=new HashSet<OWLOntology>();
  for (  KnowledgeSource source : sources) {
    if (source instanceof OWLFile || source instanceof SparqlKnowledgeSource || source instanceof OWLAPIOntology) {
      URL url=null;
      if (source instanceof OWLFile) {
        url=((OWLFile)source).getURL();
      }
 else       if (source instanceof SparqlKnowledgeSource) {
        url=((SparqlKnowledgeSource)source).getNTripleURL();
      }
      try {
        if (source instanceof OWLAPIOntology) {
          System.out.println(source instanceof OWLAPIOntology);
          System.out.println(""String_Node_Str"");
          OWLOntology ontology=((OWLAPIOntology)source).getOWLOntolgy();
          owlAPIOntologies.add(ontology);
          allImports.addAll(manager.getImportsClosure(ontology));
          classes.addAll(ontology.getReferencedClasses());
          owlObjectProperties.addAll(ontology.getReferencedObjectProperties());
          owlDatatypeProperties.addAll(ontology.getReferencedDataProperties());
          owlIndividuals.addAll(ontology.getReferencedIndividuals());
          OWLOntologyFormat format=manager.getOntologyFormat(ontology);
          if (format instanceof NamespaceOWLOntologyFormat) {
            prefixes=((NamespaceOWLOntologyFormat)format).getNamespacesByPrefixMap();
            baseURI=prefixes.get(""String_Node_Str"");
            prefixes.remove(""String_Node_Str"");
          }
        }
 else {
          System.out.println(""String_Node_Str"");
          OWLOntology ontology=manager.loadOntologyFromPhysicalURI(url.toURI());
          owlAPIOntologies.add(ontology);
          allImports.addAll(manager.getImportsClosure(ontology));
          classes.addAll(ontology.getReferencedClasses());
          owlObjectProperties.addAll(ontology.getReferencedObjectProperties());
          owlDatatypeProperties.addAll(ontology.getReferencedDataProperties());
          owlIndividuals.addAll(ontology.getReferencedIndividuals());
          OWLOntologyFormat format=manager.getOntologyFormat(ontology);
          if (format instanceof NamespaceOWLOntologyFormat) {
            prefixes=((NamespaceOWLOntologyFormat)format).getNamespacesByPrefixMap();
            baseURI=prefixes.get(""String_Node_Str"");
            prefixes.remove(""String_Node_Str"");
          }
        }
      }
 catch (      OWLOntologyCreationException e) {
        e.printStackTrace();
      }
catch (      URISyntaxException e) {
        e.printStackTrace();
      }
    }
 else {
      KB kb=source.toKB();
      URI ontologyURI=URI.create(""String_Node_Str"");
      OWLOntology ontology=null;
      try {
        ontology=manager.createOntology(ontologyURI);
      }
 catch (      OWLOntologyCreationException e) {
        e.printStackTrace();
      }
      OWLAPIAxiomConvertVisitor.fillOWLOntology(manager,ontology,kb);
      owlAPIOntologies.add(ontology);
      allImports.add(ontology);
      atomicConcepts.addAll(kb.findAllAtomicConcepts());
      atomicRoles.addAll(kb.findAllAtomicRoles());
      individuals.addAll(kb.findAllIndividuals());
    }
  }
  if (reasonerType.equals(""String_Node_Str"")) {
    try {
      reasoner=new uk.ac.manchester.cs.factplusplus.owlapi.Reasoner(manager);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    System.out.println(""String_Node_Str"");
  }
 else {
    reasoner=new org.mindswap.pellet.owlapi.Reasoner(manager);
    Logger pelletLogger=Logger.getLogger(""String_Node_Str"");
    pelletLogger.setLevel(Level.WARN);
  }
  try {
    reasoner.loadOntologies(allImports);
    reasoner.classify();
    reasoner.realise();
  }
 catch (  OWLReasonerException e) {
    e.printStackTrace();
  }
  factory=manager.getOWLDataFactory();
  for (  OWLClass owlClass : classes)   atomicConcepts.add(new NamedClass(owlClass.getURI().toString()));
  for (  OWLObjectProperty owlProperty : owlObjectProperties)   atomicRoles.add(new ObjectProperty(owlProperty.getURI().toString()));
  for (  OWLDataProperty owlProperty : owlDatatypeProperties) {
    DatatypeProperty dtp=new DatatypeProperty(owlProperty.getURI().toString());
    Set<OWLDataRange> ranges=owlProperty.getRanges(allImports);
    OWLDataRange range=ranges.iterator().next();
    if (range.isDataType()) {
      URI uri=((OWLDataType)range).getURI();
      if (uri.equals(Datatype.BOOLEAN.getURI()))       booleanDatatypeProperties.add(dtp);
 else       if (uri.equals(Datatype.DOUBLE.getURI()))       doubleDatatypeProperties.add(dtp);
 else       if (uri.equals(Datatype.INT.getURI()))       intDatatypeProperties.add(dtp);
    }
    datatypeProperties.add(dtp);
  }
  for (  OWLIndividual owlIndividual : owlIndividuals)   individuals.add(new Individual(owlIndividual.getURI().toString()));
}","@Override public void init(){
  OWLOntologyManager manager=OWLManager.createOWLOntologyManager();
  Comparator<OWLNamedObject> namedObjectComparator=new Comparator<OWLNamedObject>(){
    public int compare(    OWLNamedObject o1,    OWLNamedObject o2){
      return o1.getURI().compareTo(o2.getURI());
    }
  }
;
  Set<OWLClass> classes=new TreeSet<OWLClass>(namedObjectComparator);
  Set<OWLObjectProperty> owlObjectProperties=new TreeSet<OWLObjectProperty>(namedObjectComparator);
  Set<OWLDataProperty> owlDatatypeProperties=new TreeSet<OWLDataProperty>(namedObjectComparator);
  Set<OWLIndividual> owlIndividuals=new TreeSet<OWLIndividual>(namedObjectComparator);
  Set<OWLOntology> allImports=new HashSet<OWLOntology>();
  for (  KnowledgeSource source : sources) {
    if (source instanceof OWLFile || source instanceof SparqlKnowledgeSource || source instanceof OWLAPIOntology) {
      URL url=null;
      if (source instanceof OWLFile) {
        url=((OWLFile)source).getURL();
      }
 else       if (source instanceof SparqlKnowledgeSource) {
        url=((SparqlKnowledgeSource)source).getNTripleURL();
      }
      try {
        if (source instanceof OWLAPIOntology) {
          OWLOntology ontology=((OWLAPIOntology)source).getOWLOntolgy();
          owlAPIOntologies.add(ontology);
          allImports.addAll(manager.getImportsClosure(ontology));
          classes.addAll(ontology.getReferencedClasses());
          owlObjectProperties.addAll(ontology.getReferencedObjectProperties());
          owlDatatypeProperties.addAll(ontology.getReferencedDataProperties());
          owlIndividuals.addAll(ontology.getReferencedIndividuals());
          OWLOntologyFormat format=manager.getOntologyFormat(ontology);
          if (format instanceof NamespaceOWLOntologyFormat) {
            prefixes=((NamespaceOWLOntologyFormat)format).getNamespacesByPrefixMap();
            baseURI=prefixes.get(""String_Node_Str"");
            prefixes.remove(""String_Node_Str"");
          }
        }
 else {
          OWLOntology ontology=manager.loadOntologyFromPhysicalURI(url.toURI());
          owlAPIOntologies.add(ontology);
          allImports.addAll(manager.getImportsClosure(ontology));
          classes.addAll(ontology.getReferencedClasses());
          owlObjectProperties.addAll(ontology.getReferencedObjectProperties());
          owlDatatypeProperties.addAll(ontology.getReferencedDataProperties());
          owlIndividuals.addAll(ontology.getReferencedIndividuals());
          OWLOntologyFormat format=manager.getOntologyFormat(ontology);
          if (format instanceof NamespaceOWLOntologyFormat) {
            prefixes=((NamespaceOWLOntologyFormat)format).getNamespacesByPrefixMap();
            baseURI=prefixes.get(""String_Node_Str"");
            prefixes.remove(""String_Node_Str"");
          }
        }
      }
 catch (      OWLOntologyCreationException e) {
        e.printStackTrace();
      }
catch (      URISyntaxException e) {
        e.printStackTrace();
      }
    }
 else {
      KB kb=source.toKB();
      URI ontologyURI=URI.create(""String_Node_Str"");
      OWLOntology ontology=null;
      try {
        ontology=manager.createOntology(ontologyURI);
      }
 catch (      OWLOntologyCreationException e) {
        e.printStackTrace();
      }
      OWLAPIAxiomConvertVisitor.fillOWLOntology(manager,ontology,kb);
      owlAPIOntologies.add(ontology);
      allImports.add(ontology);
      atomicConcepts.addAll(kb.findAllAtomicConcepts());
      atomicRoles.addAll(kb.findAllAtomicRoles());
      individuals.addAll(kb.findAllIndividuals());
    }
  }
  if (reasonerType.equals(""String_Node_Str"")) {
    try {
      reasoner=new uk.ac.manchester.cs.factplusplus.owlapi.Reasoner(manager);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    System.out.println(""String_Node_Str"");
  }
 else {
    reasoner=new org.mindswap.pellet.owlapi.Reasoner(manager);
    Logger pelletLogger=Logger.getLogger(""String_Node_Str"");
    pelletLogger.setLevel(Level.WARN);
  }
  try {
    reasoner.loadOntologies(allImports);
    reasoner.classify();
    reasoner.realise();
  }
 catch (  OWLReasonerException e) {
    e.printStackTrace();
  }
  factory=manager.getOWLDataFactory();
  for (  OWLClass owlClass : classes)   atomicConcepts.add(new NamedClass(owlClass.getURI().toString()));
  for (  OWLObjectProperty owlProperty : owlObjectProperties)   atomicRoles.add(new ObjectProperty(owlProperty.getURI().toString()));
  for (  OWLDataProperty owlProperty : owlDatatypeProperties) {
    DatatypeProperty dtp=new DatatypeProperty(owlProperty.getURI().toString());
    Set<OWLDataRange> ranges=owlProperty.getRanges(allImports);
    OWLDataRange range=ranges.iterator().next();
    if (range.isDataType()) {
      URI uri=((OWLDataType)range).getURI();
      if (uri.equals(Datatype.BOOLEAN.getURI()))       booleanDatatypeProperties.add(dtp);
 else       if (uri.equals(Datatype.DOUBLE.getURI()))       doubleDatatypeProperties.add(dtp);
 else       if (uri.equals(Datatype.INT.getURI()))       intDatatypeProperties.add(dtp);
    }
    datatypeProperties.add(dtp);
  }
  for (  OWLIndividual owlIndividual : owlIndividuals)   individuals.add(new Individual(owlIndividual.getURI().toString()));
}"
10204,"/** 
 * This method sets the individuals that belong to the concept which is chosen in protege.
 */
public void setPositiveConcept(){
  SortedSet<Individual> individuals=null;
  for (Iterator<NamedClass> i=rs.getAtomicConcepts().iterator(); i.hasNext(); ) {
    if (individuals == null) {
      NamedClass concept=i.next();
      if (concept.toString().endsWith(""String_Node_Str"" + aktuell.getRootObject().toString())) {
        if (rs.retrieval(concept) != null) {
          individual=rs.retrieval(concept);
          break;
        }
      }
    }
  }
}","/** 
 * This method sets the individuals that belong to the concept which is chosen in protege.
 */
public void setPositiveConcept(){
  SortedSet<Individual> individuals=null;
  if (!aktuell.getRootObject().toString().equals(""String_Node_Str"")) {
    for (Iterator<NamedClass> i=rs.getAtomicConcepts().iterator(); i.hasNext(); ) {
      if (individuals == null) {
        NamedClass concept=i.next();
        if (concept.toString().endsWith(""String_Node_Str"" + aktuell.getRootObject().toString())) {
          if (rs.retrieval(concept) != null) {
            individual=rs.retrieval(concept);
            break;
          }
        }
      }
    }
  }
 else {
    individual=rs.getIndividuals();
  }
}"
10205,"/** 
 * This method gets an Individual and checks if this individual belongs to the concept chosen in protege.
 * @param indi Individual to check if it belongs to the chosen concept 
 * @return is Individual belongs to the concept which is chosen in protege.
 */
public boolean setPositivExamplesChecked(String indi){
  boolean isChecked=false;
  if (individual.toString().contains(indi)) {
    isChecked=true;
  }
  return isChecked;
}","/** 
 * This method gets an Individual and checks if this individual belongs to the concept chosen in protege.
 * @param indi Individual to check if it belongs to the chosen concept 
 * @return is Individual belongs to the concept which is chosen in protege.
 */
public boolean setPositivExamplesChecked(String indi){
  boolean isChecked=false;
  if (individual != null) {
    if (individual.toString().contains(indi)) {
      isChecked=true;
    }
  }
  return isChecked;
}"
10206,"/** 
 * @return
 */
public OWLDescription getSollution(){
  System.out.println(model.getSolution());
  return model.getSolution();
}","/** 
 * @return
 */
public OWLDescription getSollution(){
  return model.getSolution();
}"
10207,"public void clear(){
  System.out.println(""String_Node_Str"");
  dllearner.unsetEverything();
  dllearner.makeView();
  handleVerifyEditorContents();
  initialDescription=null;
  editor.setText(""String_Node_Str"");
}","public void clear(){
  dllearner.unsetEverything();
  dllearner.makeView();
  handleVerifyEditorContents();
  initialDescription=null;
  editor.setText(""String_Node_Str"");
}"
10208,"@Override public Set<OWLDescription> getEditedObjects(){
  if (tabbedPane.getSelectedComponent() == classSelectorPanel) {
    return classSelectorPanel.getSelectedClasses();
  }
 else   if (tabbedPane.getSelectedComponent() == restrictionCreatorPanel) {
    return restrictionCreatorPanel.createRestrictions();
  }
 else   if (tabbedPane.getSelectedComponent() == dllearner) {
    System.out.println(""String_Node_Str"" + dllearner.getSollutions());
    return dllearner.getSollutions();
  }
  return super.getEditedObjects();
}","@Override public Set<OWLDescription> getEditedObjects(){
  if (tabbedPane.getSelectedComponent() == classSelectorPanel) {
    return classSelectorPanel.getSelectedClasses();
  }
 else   if (tabbedPane.getSelectedComponent() == restrictionCreatorPanel) {
    return restrictionCreatorPanel.createRestrictions();
  }
 else   if (tabbedPane.getSelectedComponent() == dllearner) {
    return dllearner.getSollutions();
  }
  return super.getEditedObjects();
}"
10209,"/** 
 * Entry point for CLI interface.
 * @param args
 */
public static void main(String[] args) throws ComponentInitException {
  File file=new File(args[args.length - 1]);
  boolean inQueryMode=false;
  if (args.length > 1 && args[0].equals(""String_Node_Str""))   inQueryMode=true;
  SimpleLayout layout=new SimpleLayout();
  ConsoleAppender consoleAppender=new ConsoleAppender(layout);
  FileAppender fileAppender=null;
  ;
  try {
    fileAppender=new FileAppender(layout,""String_Node_Str"",false);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  logger.removeAllAppenders();
  logger.addAppender(consoleAppender);
  logger.addAppender(fileAppender);
  logger.setLevel(Level.TRACE);
  Logger.getLogger(KnowledgeSource.class).setLevel(Level.WARN);
  Logger.getLogger(SparqlKnowledgeSource.class).setLevel(Level.WARN);
  Logger.getLogger(TypedSparqlQuery.class).setLevel(Level.WARN);
  Start start=null;
  start=new Start(file);
  start.start(inQueryMode);
}","/** 
 * Entry point for CLI interface.
 * @param args
 */
public static void main(String[] args) throws ComponentInitException {
  File file=new File(args[args.length - 1]);
  boolean inQueryMode=false;
  if (args.length > 1 && args[0].equals(""String_Node_Str""))   inQueryMode=true;
  SimpleLayout layout=new SimpleLayout();
  ConsoleAppender consoleAppender=new ConsoleAppender(layout);
  FileAppender fileAppender=null;
  ;
  try {
    fileAppender=new FileAppender(layout,""String_Node_Str"",false);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  logger.removeAllAppenders();
  logger.addAppender(consoleAppender);
  logger.addAppender(fileAppender);
  logger.setLevel(Level.TRACE);
  Logger.getLogger(KnowledgeSource.class).setLevel(Level.WARN);
  Logger.getLogger(SparqlKnowledgeSource.class).setLevel(Level.WARN);
  Logger.getLogger(TypedSparqlQuery.class).setLevel(Level.WARN);
  Start start=null;
  start=new Start(file);
  start.start(inQueryMode);
  JamonMonitorLogger.printAllSortedByLabel();
}"
10210,"/** 
 * Takes a SPARQL query (which has not been evaluated yet) as argument and returns a JSON result set. The result set is taken from this cache if the query is stored here. Otherwise the query is send and its result added to the cache and returned. Convenience method.
 * @param query The SPARQL query.
 * @return Jena result set.
 */
public String executeSparqlQuery(SparqlQuery query){
  JamonMonitorLogger.getTimeMonitor(Cache.class,""String_Node_Str"").start();
  JamonMonitorLogger.increaseCount(Cache.class,""String_Node_Str"");
  JamonMonitorLogger.getTimeMonitor(Cache.class,""String_Node_Str"").start();
  String result=getCacheEntry(query.getQueryString());
  JamonMonitorLogger.getTimeMonitor(Cache.class,""String_Node_Str"").stop();
  if (result != null) {
    logger.trace(""String_Node_Str"");
    JamonMonitorLogger.increaseCount(Cache.class,""String_Node_Str"");
  }
 else {
    query.send();
    String json=query.getResult();
    if (json != null) {
      addToCache(query.getQueryString(),json);
    }
 else     json=""String_Node_Str"";
    logger.warn(""String_Node_Str"" + query.getQueryString());
  }
  JamonMonitorLogger.getTimeMonitor(Cache.class,""String_Node_Str"").stop();
  return result;
}","/** 
 * Takes a SPARQL query (which has not been evaluated yet) as argument and returns a JSON result set. The result set is taken from this cache if the query is stored here. Otherwise the query is send and its result added to the cache and returned. Convenience method.
 * @param query The SPARQL query.
 * @return Jena result set.
 */
public String executeSparqlQuery(SparqlQuery query){
  JamonMonitorLogger.getTimeMonitor(Cache.class,""String_Node_Str"").start();
  JamonMonitorLogger.increaseCount(Cache.class,""String_Node_Str"");
  JamonMonitorLogger.getTimeMonitor(Cache.class,""String_Node_Str"").start();
  String result=getCacheEntry(query.getQueryString());
  JamonMonitorLogger.getTimeMonitor(Cache.class,""String_Node_Str"").stop();
  if (result != null) {
    logger.trace(""String_Node_Str"");
    JamonMonitorLogger.increaseCount(Cache.class,""String_Node_Str"");
  }
 else {
    query.send();
    String json=query.getResult();
    if (json != null) {
      addToCache(query.getQueryString(),json);
      result=json;
    }
 else {
      json=""String_Node_Str"";
      logger.warn(Cache.class.getSimpleName() + ""String_Node_Str"" + query.getQueryString());
    }
  }
  JamonMonitorLogger.getTimeMonitor(Cache.class,""String_Node_Str"").stop();
  return result;
}"
10211,"public static LinkedList<SparqlEndpoint> listEndpoints(){
  LinkedList<SparqlEndpoint> ll=new LinkedList<SparqlEndpoint>();
  ll.add(EndpointDBLP());
  ll.add(EndpointDBpedia());
  ll.add(EndpointDOAPspace());
  ll.add(EndpointGovTrack());
  ll.add(EndpointJamendo());
  ll.add(EndpointJohnPeel());
  ll.add(EndpointlocalJoseki());
  ll.add(EndpointMagnaTune());
  ll.add(EndpointMusicbrainz());
  ll.add(EndpointMyOpenlink());
  ll.add(EndpointRevyu());
  ll.add(EndpointSWConference());
  ll.add(EndpointUSCensus());
  ll.add(EndpointWorldFactBook());
  ll.add(EndpointRiese());
  ll.add(EndpointTalisBlogs());
  ll.add(EndpointSWSchool());
  ll.add(EndpointSparqlette());
  return ll;
}","public static LinkedList<SparqlEndpoint> listEndpoints(){
  LinkedList<SparqlEndpoint> ll=new LinkedList<SparqlEndpoint>();
  ll.add(EndpointDBLP());
  ll.add(EndpointDBpedia());
  ll.add(EndpointDOAPspace());
  ll.add(EndpointGovTrack());
  ll.add(EndpointJamendo());
  ll.add(EndpointJohnPeel());
  ll.add(EndpointlocalJoseki());
  ll.add(EndpointMagnaTune());
  ll.add(EndpointMusicbrainz());
  ll.add(EndpointMyOpenlink());
  ll.add(EndpointRevyu());
  ll.add(EndpointSWConference());
  ll.add(EndpointUSCensus());
  ll.add(EndpointWorldFactBook());
  ll.add(EndpointRiese());
  ll.add(EndpointTalisBlogs());
  ll.add(EndpointSWSchool());
  ll.add(EndpointSparqlette());
  ll.add(EndpointLOCALDBpedia());
  return ll;
}"
10212,"/** 
 * @param args
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  initLogger();
  if (local) {
    url=""String_Node_Str"";
    sparqlTasks=new SPARQLTasks(Cache.getPersistentCache(),SparqlEndpoint.EndpointLOCALDBpedia());
  }
 else {
    url=""String_Node_Str"";
    sparqlTasks=new SPARQLTasks(Cache.getPersistentCache(),SparqlEndpoint.EndpointDBpedia());
  }
  String prim=""String_Node_Str"";
  String award=(""String_Node_Str"");
  SKOS7030 s=new SKOS7030();
  s.makeExamples(prim,percentOfSKOSSet,negfactor,sparqlResultSize);
  List<Description> conceptresults=s.learn(s.posExamples,s.negExamples);
  logger.debug(""String_Node_Str"" + conceptresults.size());
  for (  Description oneConcept : conceptresults) {
  }
  System.out.println(""String_Node_Str"");
  JamonMonitorLogger.printAll();
}","/** 
 * @param args
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  initLogger();
  if (local) {
    url=""String_Node_Str"";
    sparqlTasks=new SPARQLTasks(Cache.getPersistentCache(),SparqlEndpoint.EndpointLOCALDBpedia());
  }
 else {
    url=""String_Node_Str"";
    sparqlTasks=new SPARQLTasks(Cache.getPersistentCache(),SparqlEndpoint.EndpointDBpedia());
  }
  String prim=""String_Node_Str"";
  String award=(""String_Node_Str"");
  SKOS7030 s=new SKOS7030();
  s.makeExamples(prim,percentOfSKOSSet,negfactor,sparqlResultSize);
  List<Description> conceptresults=s.learn(s.posExamples,s.negExamples);
  logger.debug(""String_Node_Str"" + conceptresults.size());
  for (  Description oneConcept : conceptresults) {
  }
  System.out.println(""String_Node_Str"");
  JamonMonitorLogger.printAllSortedByLabel();
}"
10213,"public static SortedSet<String> selectDBpediaConcepts(int number){
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + 1000 + ""String_Node_Str"";
  String JSON=(c.executeSparqlQuery(new SparqlQuery(query,se)));
  ResultSet rs=SparqlQuery.JSONtoResultSet(JSON);
  return null;
}","public static SortedSet<String> selectDBpediaConcepts(int number){
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + 1000 + ""String_Node_Str"";
  String JSON=(c.executeSparqlQuery(new SparqlQuery(query,se)));
  ResultSet rs=SparqlQuery.JSONtoResultSet(JSON);
  if (rs == null)   ;
  return null;
}"
10214,"static void DBpedia(){
  se=SparqlEndpoint.EndpointLOCALDBpedia();
  SortedSet<String> concepts=new TreeSet<String>();
  SortedSet<String> tmpSet=selectDBpediaConcepts(20);
  System.out.println(concepts.size());
  for (  String string : tmpSet) {
    concepts.add(""String_Node_Str"" + string + ""String_Node_Str"");
  }
  concepts.remove(concepts.first());
  concepts.remove(concepts.first());
  concepts.remove(concepts.first());
  concepts.remove(concepts.first());
  concepts.remove(concepts.first());
  concepts.remove(concepts.first());
  concepts.remove(concepts.first());
  SortedSet<String> posExamples=new TreeSet<String>();
  SortedSet<String> negExamples=new TreeSet<String>();
  String url=""String_Node_Str"";
  url=""String_Node_Str"";
  String concept=concepts.first();
  int i=0;
  Statistics.setCurrentLabel(""String_Node_Str"");
  int recursiondepth=0;
  boolean closeAfterRecursion=false;
  int numberOfTriples=0;
  for (  String oneConcept : concepts) {
    useRelated=true;
    useSuperClasses=true;
    useParallelClasses=false;
    poslimit=10;
    neglimit=10;
    LearnSparql ls=new LearnSparql();
    TreeSet<String> igno=new TreeSet<String>();
    System.out.println(oneConcept);
    ls.learnDBpedia(posExamples,negExamples,url,igno,recursiondepth,closeAfterRecursion,false);
  }
}","static void DBpedia(){
  se=SparqlEndpoint.EndpointLOCALDBpedia();
  SortedSet<String> concepts=new TreeSet<String>();
  SortedSet<String> tmpSet=selectDBpediaConcepts(20);
  System.out.println(concepts.size());
  for (  String string : tmpSet) {
    concepts.add(""String_Node_Str"" + string + ""String_Node_Str"");
  }
  concepts.remove(concepts.first());
  concepts.remove(concepts.first());
  concepts.remove(concepts.first());
  concepts.remove(concepts.first());
  concepts.remove(concepts.first());
  concepts.remove(concepts.first());
  concepts.remove(concepts.first());
  SortedSet<String> posExamples=new TreeSet<String>();
  SortedSet<String> negExamples=new TreeSet<String>();
  String url=""String_Node_Str"";
  url=""String_Node_Str"";
  Statistics.setCurrentLabel(""String_Node_Str"");
  int recursiondepth=0;
  boolean closeAfterRecursion=false;
  for (  String oneConcept : concepts) {
    useRelated=true;
    useSuperClasses=true;
    useParallelClasses=false;
    poslimit=10;
    neglimit=10;
    LearnSparql ls=new LearnSparql();
    TreeSet<String> igno=new TreeSet<String>();
    System.out.println(oneConcept);
    ls.learnDBpedia(posExamples,negExamples,url,igno,recursiondepth,closeAfterRecursion,false);
  }
}"
10215,"public static SortedSet<String> selectDBpediaConcepts(int number){
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  String JSON=(c.executeSparqlQuery(new SparqlQuery(query,se)));
  ResultSet rs=SparqlQuery.JSONtoResultSet(JSON);
  return null;
}","public static SortedSet<String> selectDBpediaConcepts(int number){
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  String JSON=(c.executeSparqlQuery(new SparqlQuery(query,se)));
  ResultSet rs=SparqlQuery.JSONtoResultSet(JSON);
  if (rs == null)   ;
  return null;
}"
10216,"private static double httpQuery(String query) throws Exception {
  char value[]={13,10};
  String cut=new String(value);
  String test=""String_Node_Str"" + URLEncoder.encode(query,""String_Node_Str"") + ""String_Node_Str""+ cut+ ""String_Node_Str""+ cut+ ""String_Node_Str""+ cut+ ""String_Node_Str""+ cut+ ""String_Node_Str""+ cut+ ""String_Node_Str""+ cut+ ""String_Node_Str""+ cut+ cut;
  String retval=""String_Node_Str"";
  double start=System.currentTimeMillis();
  byte resp[]=null;
  try {
    Socket SparqlServer=new Socket(InetAddress.getByName(""String_Node_Str""),8890);
    String request=test;
    (SparqlServer.getOutputStream()).write(request.getBytes());
    resp=readBuffer(new BufferedInputStream(SparqlServer.getInputStream()));
    retval=new String(resp);
    retval=retval.substring(retval.indexOf(cut + ""String_Node_Str"" + cut) + 4);
    SparqlServer.close();
  }
 catch (  Exception e) {
  }
  double end=System.currentTimeMillis();
  return (end - start) / 1000;
}","@Deprecated @SuppressWarnings(""String_Node_Str"") private static double httpQuery(String query) throws Exception {
  char value[]={13,10};
  String cut=new String(value);
  String test=""String_Node_Str"" + URLEncoder.encode(query,""String_Node_Str"") + ""String_Node_Str""+ cut+ ""String_Node_Str""+ cut+ ""String_Node_Str""+ cut+ ""String_Node_Str""+ cut+ ""String_Node_Str""+ cut+ ""String_Node_Str""+ cut+ ""String_Node_Str""+ cut+ cut;
  String retval=""String_Node_Str"";
  double start=System.currentTimeMillis();
  byte resp[]=null;
  try {
    Socket SparqlServer=new Socket(InetAddress.getByName(""String_Node_Str""),8890);
    String request=test;
    (SparqlServer.getOutputStream()).write(request.getBytes());
    resp=readBuffer(new BufferedInputStream(SparqlServer.getInputStream()));
    retval=new String(resp);
    retval=retval.substring(retval.indexOf(cut + ""String_Node_Str"" + cut) + 4);
    SparqlServer.close();
  }
 catch (  Exception e) {
  }
  double end=System.currentTimeMillis();
  return (end - start) / 1000;
}"
10217,"public static void main(String[] args){
  SimpleLayout layout=new SimpleLayout();
  ConsoleAppender consoleAppender=new ConsoleAppender(layout);
  FileAppender fileAppender=null;
  ;
  try {
    fileAppender=new FileAppender(layout,""String_Node_Str"",false);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  logger.removeAllAppenders();
  logger.addAppender(fileAppender);
  logger.addAppender(consoleAppender);
  logger.setLevel(Level.DEBUG);
  Logger.getLogger(SparqlKnowledgeSource.class).setLevel(Level.INFO);
  LinkedList<SparqlEndpoint> ll=SparqlEndpoint.listEndpoints();
  int i=1;
  for (int j=0; j < ll.size(); j++) {
    testEndPoint(ll.get(j));
    logger.info(""String_Node_Str"" + i + ""String_Node_Str""+ ll.size());
    i++;
  }
  logger.info(""String_Node_Str"");
  for (  String str : working) {
    logger.info(str);
  }
  for (  String str : notworking) {
    logger.info(str);
  }
}","public static void main(String[] args){
  SimpleLayout layout=new SimpleLayout();
  ConsoleAppender consoleAppender=new ConsoleAppender(layout);
  FileAppender fileAppender=null;
  ;
  try {
    fileAppender=new FileAppender(layout,""String_Node_Str"",false);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  logger.removeAllAppenders();
  logger.addAppender(fileAppender);
  logger.addAppender(consoleAppender);
  logger.setLevel(Level.TRACE);
  Logger.getLogger(SparqlKnowledgeSource.class).setLevel(Level.WARN);
  LinkedList<SparqlEndpoint> ll=SparqlEndpoint.listEndpoints();
  int i=1;
  for (int j=0; j < ll.size(); j++) {
    testEndPoint(ll.get(j));
    if (i == 3)     break;
    logger.info(""String_Node_Str"" + i + ""String_Node_Str""+ ll.size());
    i++;
  }
  logger.info(""String_Node_Str"");
  for (  String str : working) {
    logger.info(str);
  }
  for (  String str : notworking) {
    logger.info(str);
  }
  JamonMonitorLogger.printAllSortedByLabel();
}"
10218,"public static void testEndPoint(SparqlEndpoint se){
  SimpleClock sc=new SimpleClock();
  try {
    String SPARQLquery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
    SPARQLquery=""String_Node_Str"";
    int i=new SPARQLTasks(se).queryAsSet(SPARQLquery,""String_Node_Str"").size();
    working.add(sc.getAndSet(""String_Node_Str"" + se.getURL() + ""String_Node_Str""+ ((i == 100) ? ""String_Node_Str"" : ""String_Node_Str"" + i + ""String_Node_Str"")+ ""String_Node_Str""));
  }
 catch (  Exception e) {
    notworking.add(sc.getAndSet(""String_Node_Str"" + se.getURL()));
  }
}","public static void testEndPoint(SparqlEndpoint se){
  SimpleClock sc=new SimpleClock();
  try {
    String SPARQLquery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
    SPARQLquery=""String_Node_Str"";
    SortedSet<String> tmp=new SPARQLTasks(se).queryAsSet(SPARQLquery,""String_Node_Str"");
    int i=tmp.size();
    working.add(sc.getAndSet(""String_Node_Str"" + se.getURL() + ""String_Node_Str""+ ((i == 100) ? ""String_Node_Str"" : ""String_Node_Str"" + i + ""String_Node_Str"")+ ""String_Node_Str""));
  }
 catch (  Exception e) {
    notworking.add(sc.getAndSet(""String_Node_Str"" + se.getURL()));
  }
}"
10219,"public static void increaseCount(Class clazz,String label){
  MonitorFactory.getMonitor(getMonitorPrefix(clazz) + label,""String_Node_Str"").add(1.0);
}","@SuppressWarnings(""String_Node_Str"") public static void increaseCount(Class clazz,String label){
  Monitor m=MonitorFactory.getMonitor(getMonitorPrefix(clazz) + label,""String_Node_Str"");
  m.setHits(m.getHits() + 1);
}"
10220,"public static Monitor getTimeMonitor(Class clazz,String label){
  String labeltmp=getMonitorPrefix(clazz) + label;
  return MonitorFactory.getTimeMonitor(labeltmp);
}","@SuppressWarnings(""String_Node_Str"") public static Monitor getTimeMonitor(Class clazz,String label){
  String labeltmp=getMonitorPrefix(clazz) + label;
  return MonitorFactory.getTimeMonitor(labeltmp);
}"
10221,"public static String getMonitorPrefix(Class clazz){
  String retval=""String_Node_Str"";
  if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == Cache.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == Cache.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == ExampleBasedROLComponent.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else {
    retval=""String_Node_Str"";
  }
  return retval + clazz.getSimpleName() + ""String_Node_Str"";
}","@SuppressWarnings(""String_Node_Str"") public static String getMonitorPrefix(Class clazz){
  String retval=""String_Node_Str"";
  if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == Cache.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == Cache.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == ExampleBasedROLComponent.class) {
    retval=""String_Node_Str"";
  }
 else   if (clazz == SparqlQuery.class) {
    retval=""String_Node_Str"";
  }
 else {
    retval=""String_Node_Str"";
  }
  return retval + clazz.getSimpleName() + ""String_Node_Str"";
}"
10222,"@Deprecated public void initDBpediaSKOS(String concept,double percent,boolean useRelated,boolean useParallelClasses){
  SortedSet<String> keepForClean=new TreeSet<String>();
  keepForClean.addAll(this.posExamples);
  totalSKOSset.addAll(this.posExamples);
  rest.addAll(totalSKOSset);
  int poslimit=(int)Math.round(percent * totalSKOSset.size());
  int neglimit=(int)Math.round(poslimit);
  this.posExamples=SetManipulation.fuzzyShrink(this.posExamples,poslimit);
  rest.removeAll(this.posExamples);
  logger.debug(""String_Node_Str"" + posExamples.size());
  logger.debug(""String_Node_Str"" + totalSKOSset.size());
  logger.debug(""String_Node_Str"" + rest.size());
  if (useRelated) {
  }
  if (useParallelClasses) {
    int limit=this.posExamples.size();
  }
  negExamples.removeAll(keepForClean);
  logger.debug(""String_Node_Str"" + negExamples.size());
  this.negExamples=SetManipulation.fuzzyShrink(negExamples,neglimit);
  logger.debug(""String_Node_Str"" + posExamples.size());
  logger.debug(""String_Node_Str"" + negExamples.size());
  logger.debug(""String_Node_Str"" + concept);
}","@Deprecated public void initDBpediaSKOS(String concept,double percent,boolean useRelated,boolean useParallelClasses){
  SortedSet<String> keepForClean=new TreeSet<String>();
  keepForClean.addAll(this.posExamples);
  totalSKOSset.addAll(this.posExamples);
  rest.addAll(totalSKOSset);
  int poslimit=(int)Math.round(percent * totalSKOSset.size());
  int neglimit=(int)Math.round(poslimit);
  this.posExamples=SetManipulation.fuzzyShrink(this.posExamples,poslimit);
  rest.removeAll(this.posExamples);
  logger.debug(""String_Node_Str"" + posExamples.size());
  logger.debug(""String_Node_Str"" + totalSKOSset.size());
  logger.debug(""String_Node_Str"" + rest.size());
  if (useRelated) {
  }
  if (useParallelClasses) {
  }
  negExamples.removeAll(keepForClean);
  logger.debug(""String_Node_Str"" + negExamples.size());
  this.negExamples=SetManipulation.fuzzyShrink(negExamples,neglimit);
  logger.debug(""String_Node_Str"" + posExamples.size());
  logger.debug(""String_Node_Str"" + negExamples.size());
  logger.debug(""String_Node_Str"" + concept);
}"
10223,"public void printBestSolutions(int nrOfSolutions){
  if (!logger.getLevel().toString().equalsIgnoreCase(""String_Node_Str""))   return;
  if (nrOfSolutions == 0)   nrOfSolutions=candidatesStable.size();
  int i=0;
  for (  ExampleBasedNode n : candidatesStable.descendingSet()) {
    logger.trace(n.getShortDescription(nrOfPositiveExamples,nrOfNegativeExamples,baseURI));
    if (i == nrOfSolutions)     return;
    i++;
  }
}","public void printBestSolutions(int nrOfSolutions){
  if (!logger.isTraceEnabled())   return;
  if (nrOfSolutions == 0)   nrOfSolutions=candidatesStable.size();
  int i=0;
  for (  ExampleBasedNode n : candidatesStable.descendingSet()) {
    logger.trace(n.getShortDescription(nrOfPositiveExamples,nrOfNegativeExamples,baseURI));
    if (i == nrOfSolutions)     return;
    i++;
  }
}"
10224,"@Override public boolean instanceCheck(Description description,Individual individual) throws ReasoningMethodUnsupportedException {
  if (description instanceof NamedClass) {
    return classInstancesPos.get((NamedClass)description).contains(individual);
  }
 else   if (description instanceof Negation) {
    Description child=description.getChild(0);
    if (child instanceof NamedClass) {
      return classInstancesNeg.get((NamedClass)child).contains(individual);
    }
 else {
      throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    }
  }
 else   if (description instanceof Thing) {
    return true;
  }
 else   if (description instanceof Nothing) {
    return false;
  }
 else   if (description instanceof Union) {
    List<Description> children=description.getChildren();
    for (    Description child : children) {
      if (instanceCheck(child,individual))       return true;
    }
    return false;
  }
 else   if (description instanceof Intersection) {
    List<Description> children=description.getChildren();
    for (    Description child : children) {
      if (!instanceCheck(child,individual))       return false;
    }
    return true;
  }
 else   if (description instanceof ObjectSomeRestriction) {
    ObjectPropertyExpression ope=((ObjectSomeRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    ;
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return false;
    }
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null)     return false;
    for (    Individual roleFiller : roleFillers) {
      if (instanceCheck(child,roleFiller))       return true;
    }
    return false;
  }
 else   if (description instanceof ObjectAllRestriction) {
    ObjectPropertyExpression ope=((ObjectAllRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    ;
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return true;
    }
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null)     return true;
    for (    Individual roleFiller : roleFillers) {
      if (!instanceCheck(child,roleFiller))       return false;
    }
    return true;
  }
 else   if (description instanceof ObjectMinCardinalityRestriction) {
    ObjectPropertyExpression ope=((ObjectCardinalityRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return true;
    }
    int number=((ObjectCardinalityRestriction)description).getNumber();
    int nrOfFillers=0;
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null || roleFillers.size() < number)     return false;
    int index=0;
    for (    Individual roleFiller : roleFillers) {
      index++;
      if (instanceCheck(child,roleFiller)) {
        nrOfFillers++;
        if (nrOfFillers == number)         return true;
      }
 else {
        if (roleFillers.size() - index < number)         return false;
      }
    }
    return false;
  }
 else   if (description instanceof ObjectMaxCardinalityRestriction) {
    ObjectPropertyExpression ope=((ObjectCardinalityRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return true;
    }
    int number=((ObjectCardinalityRestriction)description).getNumber();
    int nrOfFillers=0;
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null || roleFillers.size() > number)     return true;
    int index=0;
    for (    Individual roleFiller : roleFillers) {
      index++;
      if (instanceCheck(child,roleFiller)) {
        nrOfFillers++;
        if (nrOfFillers == number)         return false;
      }
 else {
        if (roleFillers.size() - index <= number)         return true;
      }
    }
    return true;
  }
 else   if (description instanceof BooleanValueRestriction) {
    DatatypeProperty dp=((BooleanValueRestriction)description).getRestrictedPropertyExpresssion();
    boolean value=((BooleanValueRestriction)description).getBooleanValue();
    if (value) {
      return bdPos.get(dp).contains(individual);
    }
 else {
      return bdNeg.get(dp).contains(individual);
    }
  }
 else   if (description instanceof DatatypeSomeRestriction) {
    DatatypeSomeRestriction dsr=(DatatypeSomeRestriction)description;
    DatatypeProperty dp=(DatatypeProperty)dsr.getRestrictedPropertyExpression();
    DataRange dr=dsr.getDataRange();
    SortedSet<Double> values=dd.get(dp).get(individual);
    if (values == null)     return false;
    if (dr instanceof DoubleMaxValue) {
      if (values.first() <= ((DoubleMaxValue)dr).getValue())       return true;
 else       return false;
    }
 else     if (dr instanceof DoubleMinValue) {
      if (values.last() >= ((DoubleMinValue)dr).getValue())       return true;
 else       return false;
    }
  }
  throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
}","@Override public boolean instanceCheck(Description description,Individual individual) throws ReasoningMethodUnsupportedException {
  if (description instanceof NamedClass) {
    return classInstancesPos.get((NamedClass)description).contains(individual);
  }
 else   if (description instanceof Negation) {
    Description child=description.getChild(0);
    if (child instanceof NamedClass) {
      return classInstancesNeg.get((NamedClass)child).contains(individual);
    }
 else {
      throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    }
  }
 else   if (description instanceof Thing) {
    return true;
  }
 else   if (description instanceof Nothing) {
    return false;
  }
 else   if (description instanceof Union) {
    List<Description> children=description.getChildren();
    for (    Description child : children) {
      if (instanceCheck(child,individual))       return true;
    }
    return false;
  }
 else   if (description instanceof Intersection) {
    List<Description> children=description.getChildren();
    for (    Description child : children) {
      if (!instanceCheck(child,individual))       return false;
    }
    return true;
  }
 else   if (description instanceof ObjectSomeRestriction) {
    ObjectPropertyExpression ope=((ObjectSomeRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    ;
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return false;
    }
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null)     return false;
    for (    Individual roleFiller : roleFillers) {
      if (instanceCheck(child,roleFiller))       return true;
    }
    return false;
  }
 else   if (description instanceof ObjectAllRestriction) {
    ObjectPropertyExpression ope=((ObjectAllRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    ;
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return true;
    }
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null)     return true;
    for (    Individual roleFiller : roleFillers) {
      if (!instanceCheck(child,roleFiller))       return false;
    }
    return true;
  }
 else   if (description instanceof ObjectMinCardinalityRestriction) {
    ObjectPropertyExpression ope=((ObjectCardinalityRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return true;
    }
    int number=((ObjectCardinalityRestriction)description).getNumber();
    int nrOfFillers=0;
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (number == 0)     return true;
    if (roleFillers == null || roleFillers.size() < number)     return false;
    int index=0;
    for (    Individual roleFiller : roleFillers) {
      index++;
      if (instanceCheck(child,roleFiller)) {
        nrOfFillers++;
        if (nrOfFillers == number)         return true;
      }
 else {
        if (roleFillers.size() - index < number)         return false;
      }
    }
    return false;
  }
 else   if (description instanceof ObjectMaxCardinalityRestriction) {
    ObjectPropertyExpression ope=((ObjectCardinalityRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return true;
    }
    int number=((ObjectCardinalityRestriction)description).getNumber();
    int nrOfFillers=0;
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null || roleFillers.size() < number)     return true;
    int index=0;
    for (    Individual roleFiller : roleFillers) {
      index++;
      if (instanceCheck(child,roleFiller)) {
        nrOfFillers++;
        if (nrOfFillers > number)         return false;
      }
 else {
        if (roleFillers.size() - index <= number)         return true;
      }
    }
    return true;
  }
 else   if (description instanceof BooleanValueRestriction) {
    DatatypeProperty dp=((BooleanValueRestriction)description).getRestrictedPropertyExpresssion();
    boolean value=((BooleanValueRestriction)description).getBooleanValue();
    if (value) {
      return bdPos.get(dp).contains(individual);
    }
 else {
      return bdNeg.get(dp).contains(individual);
    }
  }
 else   if (description instanceof DatatypeSomeRestriction) {
    DatatypeSomeRestriction dsr=(DatatypeSomeRestriction)description;
    DatatypeProperty dp=(DatatypeProperty)dsr.getRestrictedPropertyExpression();
    DataRange dr=dsr.getDataRange();
    SortedSet<Double> values=dd.get(dp).get(individual);
    if (values == null)     return false;
    if (dr instanceof DoubleMaxValue) {
      if (values.first() <= ((DoubleMaxValue)dr).getValue())       return true;
 else       return false;
    }
 else     if (dr instanceof DoubleMinValue) {
      if (values.last() >= ((DoubleMinValue)dr).getValue())       return true;
 else       return false;
    }
  }
  throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
}"
10225,"private static void processQueryMode(LearningProblem lp,ReasoningService rs){
  System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  String queryStr=""String_Node_Str"";
  do {
    System.out.print(""String_Node_Str"");
    BufferedReader input=new BufferedReader(new InputStreamReader(System.in));
    try {
      queryStr=input.readLine();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (!queryStr.equals(""String_Node_Str"")) {
      Description concept=null;
      boolean parsedCorrectly=true;
      try {
        concept=KBParser.parseConcept(queryStr);
      }
 catch (      ParseException e1) {
        e1.printStackTrace();
        System.err.println(""String_Node_Str"");
        parsedCorrectly=false;
      }
catch (      TokenMgrError e) {
        e.printStackTrace();
        System.err.println(""String_Node_Str"");
        parsedCorrectly=false;
      }
      if (parsedCorrectly) {
        SortedSet<NamedClass> occurringConcepts=new TreeSet<NamedClass>(new ConceptComparator());
        occurringConcepts.addAll(Helper.getAtomicConcepts(concept));
        SortedSet<ObjectProperty> occurringRoles=new TreeSet<ObjectProperty>(new RoleComparator());
        occurringRoles.addAll(Helper.getAtomicRoles(concept));
        for (        NamedClass ac : rs.getAtomicConcepts())         occurringConcepts.remove(ac);
        for (        ObjectProperty ar : rs.getAtomicRoles())         occurringRoles.remove(ar);
        boolean nonExistingConstructs=false;
        if (occurringConcepts.size() != 0 || occurringRoles.size() != 0) {
          System.out.println(""String_Node_Str"");
          if (occurringConcepts.size() > 0)           System.out.println(""String_Node_Str"" + occurringConcepts);
          if (occurringRoles.size() > 0)           System.out.println(""String_Node_Str"" + occurringRoles);
          nonExistingConstructs=true;
        }
        if (!nonExistingConstructs) {
          if (!queryStr.startsWith(""String_Node_Str"") && (queryStr.contains(""String_Node_Str"") || queryStr.contains(""String_Node_Str""))) {
            System.out.println(""String_Node_Str"");
          }
          System.out.println(""String_Node_Str"" + concept + ""String_Node_Str"");
          Set<Individual> result=null;
          result=rs.retrieval(concept);
          System.out.println(""String_Node_Str"" + result.size() + ""String_Node_Str""+ result);
          Score score=lp.computeScore(concept);
          System.out.println(score);
        }
      }
    }
  }
 while (!queryStr.equals(""String_Node_Str""));
}","private static void processQueryMode(LearningProblem lp,ReasoningService rs){
  logger.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  String queryStr=""String_Node_Str"";
  do {
    logger.info(""String_Node_Str"");
    BufferedReader input=new BufferedReader(new InputStreamReader(System.in));
    try {
      queryStr=input.readLine();
      logger.debug(queryStr);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (!(queryStr.equalsIgnoreCase(""String_Node_Str"") || queryStr.equalsIgnoreCase(""String_Node_Str""))) {
      Description concept=null;
      boolean parsedCorrectly=true;
      try {
        concept=KBParser.parseConcept(queryStr);
      }
 catch (      ParseException e1) {
        e1.printStackTrace();
        System.err.println(""String_Node_Str"");
        parsedCorrectly=false;
      }
catch (      TokenMgrError e) {
        e.printStackTrace();
        System.err.println(""String_Node_Str"");
        parsedCorrectly=false;
      }
      if (parsedCorrectly) {
        SortedSet<NamedClass> occurringConcepts=new TreeSet<NamedClass>(new ConceptComparator());
        occurringConcepts.addAll(Helper.getAtomicConcepts(concept));
        SortedSet<ObjectProperty> occurringRoles=new TreeSet<ObjectProperty>(new RoleComparator());
        occurringRoles.addAll(Helper.getAtomicRoles(concept));
        for (        NamedClass ac : rs.getAtomicConcepts())         occurringConcepts.remove(ac);
        for (        ObjectProperty ar : rs.getAtomicRoles())         occurringRoles.remove(ar);
        boolean nonExistingConstructs=false;
        if (occurringConcepts.size() != 0 || occurringRoles.size() != 0) {
          logger.debug(""String_Node_Str"");
          if (occurringConcepts.size() > 0)           logger.debug(""String_Node_Str"" + occurringConcepts);
          if (occurringRoles.size() > 0)           logger.debug(""String_Node_Str"" + occurringRoles);
          nonExistingConstructs=true;
        }
        if (!nonExistingConstructs) {
          if (!queryStr.startsWith(""String_Node_Str"") && (queryStr.contains(""String_Node_Str"") || queryStr.contains(""String_Node_Str""))) {
            logger.info(""String_Node_Str"");
          }
          logger.info(""String_Node_Str"" + concept.toKBSyntaxString() + ""String_Node_Str"");
          Set<Individual> result=null;
          result=rs.retrieval(concept);
          logger.info(""String_Node_Str"" + result.size() + ""String_Node_Str""+ result);
          Score score=lp.computeScore(concept);
          logger.info(score);
        }
      }
    }
  }
 while (!(queryStr.equalsIgnoreCase(""String_Node_Str"") || queryStr.equalsIgnoreCase(""String_Node_Str"")));
}"
10226,"@Override public void valueChanged(ListSelectionEvent e){
  if (!e.getValueIsAdjusting())   System.out.println(panel4.getResultList().getSelectedValue());
}","public void valueChanged(ListSelectionEvent e){
  if (!e.getValueIsAdjusting())   System.out.println(panel4.getResultList().getSelectedValue());
}"
10227,"public void start(){
  allowedMisclassifications=(int)Math.round(noise * nrOfExamples);
  if (startDescription == null) {
    startNode=new ExampleBasedNode(Thing.instance);
    startNode.setCoveredExamples(learningProblem.getPositiveExamples(),learningProblem.getNegativeExamples());
  }
 else {
    startNode=new ExampleBasedNode(startDescription);
    Set<Individual> coveredNegatives=rs.instanceCheck(startDescription,learningProblem.getNegativeExamples());
    Set<Individual> coveredPositives=rs.instanceCheck(startDescription,learningProblem.getPositiveExamples());
    startNode.setCoveredExamples(coveredPositives,coveredNegatives);
  }
  candidates.add(startNode);
  candidatesStable.add(startNode);
  ExampleBasedNode bestNode=startNode;
  int loop=0;
  algorithmStartTime=System.nanoTime();
  long lastPrintTime=0;
  long lastTreeTraversalTime=System.nanoTime();
  long lastReductionTime=System.nanoTime();
  long traversalInterval=1000l * 1000000000l;
  long reductionInterval=300l * 1000000000l;
  long currentTime;
  while (!solutionFound && !stop) {
    currentTime=System.nanoTime();
    if (currentTime - lastPrintTime > 1000000000) {
      printStatistics(false);
      lastPrintTime=currentTime;
      logger.debug(""String_Node_Str"" + loop + ""String_Node_Str"");
    }
    if (useTreeTraversal && (currentTime - lastTreeTraversalTime > traversalInterval)) {
      traverseTree();
      lastTreeTraversalTime=System.nanoTime();
    }
    if (useCandidateReduction && (currentTime - lastReductionTime > reductionInterval)) {
      reduceCandidates();
      lastReductionTime=System.nanoTime();
    }
    System.out.println(""String_Node_Str"" + candidates.last().getShortDescription(nrOfPositiveExamples,nrOfNegativeExamples,baseURI));
    bestNode=candidates.last();
    newCandidates.clear();
    candidates.remove(bestNode);
    extendNodeProper(bestNode,bestNode.getHorizontalExpansion() + 1);
    candidates.add(bestNode);
    candidates.addAll(newCandidates);
    candidatesStable.addAll(newCandidates);
    if (writeSearchTree) {
      String treeString=""String_Node_Str"" + bestNode + ""String_Node_Str"";
      if (expandedNodes.size() > 1) {
        treeString+=""String_Node_Str"";
        for (        ExampleBasedNode n : expandedNodes) {
          treeString+=""String_Node_Str"" + n + ""String_Node_Str"";
        }
      }
      expandedNodes.clear();
      treeString+=startNode.getTreeString(nrOfPositiveExamples,nrOfNegativeExamples,baseURI);
      treeString+=""String_Node_Str"";
      if (replaceSearchTree)       Files.createFile(searchTreeFile,treeString);
 else       Files.appendFile(searchTreeFile,treeString);
    }
    loop++;
  }
  if (solutionFound) {
    logger.info(""String_Node_Str"" + candidatesStable.last().getShortDescription(nrOfPositiveExamples,nrOfNegativeExamples,baseURI));
    logger.info(""String_Node_Str"");
    for (    Description c : solutions) {
      logger.info(""String_Node_Str"" + c + ""String_Node_Str""+ c.getLength()+ ""String_Node_Str""+ c.getDepth()+ ""String_Node_Str"");
    }
  }
  logger.debug(""String_Node_Str"" + candidates.size());
  printStatistics(true);
  if (stop)   logger.info(""String_Node_Str"");
 else   logger.info(""String_Node_Str"");
}","public void start(){
  allowedMisclassifications=(int)Math.round(noise * nrOfExamples);
  if (startDescription == null) {
    startNode=new ExampleBasedNode(Thing.instance);
    startNode.setCoveredExamples(learningProblem.getPositiveExamples(),learningProblem.getNegativeExamples());
  }
 else {
    startNode=new ExampleBasedNode(startDescription);
    Set<Individual> coveredNegatives=rs.instanceCheck(startDescription,learningProblem.getNegativeExamples());
    Set<Individual> coveredPositives=rs.instanceCheck(startDescription,learningProblem.getPositiveExamples());
    startNode.setCoveredExamples(coveredPositives,coveredNegatives);
  }
  candidates.add(startNode);
  candidatesStable.add(startNode);
  ExampleBasedNode bestNode=startNode;
  int loop=0;
  algorithmStartTime=System.nanoTime();
  long lastPrintTime=0;
  long lastTreeTraversalTime=System.nanoTime();
  long lastReductionTime=System.nanoTime();
  long traversalInterval=1000l * 1000000000l;
  long reductionInterval=300l * 1000000000l;
  long currentTime;
  while (!solutionFound && !stop) {
    currentTime=System.nanoTime();
    if (currentTime - lastPrintTime > 3000000000l) {
      printStatistics(false);
      lastPrintTime=currentTime;
      logger.debug(""String_Node_Str"" + loop + ""String_Node_Str"");
    }
    if (useTreeTraversal && (currentTime - lastTreeTraversalTime > traversalInterval)) {
      traverseTree();
      lastTreeTraversalTime=System.nanoTime();
    }
    if (useCandidateReduction && (currentTime - lastReductionTime > reductionInterval)) {
      reduceCandidates();
      lastReductionTime=System.nanoTime();
    }
    bestNode=candidates.last();
    newCandidates.clear();
    candidates.remove(bestNode);
    extendNodeProper(bestNode,bestNode.getHorizontalExpansion() + 1);
    candidates.add(bestNode);
    candidates.addAll(newCandidates);
    candidatesStable.addAll(newCandidates);
    if (writeSearchTree) {
      String treeString=""String_Node_Str"" + bestNode + ""String_Node_Str"";
      if (expandedNodes.size() > 1) {
        treeString+=""String_Node_Str"";
        for (        ExampleBasedNode n : expandedNodes) {
          treeString+=""String_Node_Str"" + n + ""String_Node_Str"";
        }
      }
      expandedNodes.clear();
      treeString+=startNode.getTreeString(nrOfPositiveExamples,nrOfNegativeExamples,baseURI);
      treeString+=""String_Node_Str"";
      if (replaceSearchTree)       Files.createFile(searchTreeFile,treeString);
 else       Files.appendFile(searchTreeFile,treeString);
    }
    loop++;
  }
  if (solutionFound) {
    logger.info(""String_Node_Str"" + candidatesStable.last().getShortDescription(nrOfPositiveExamples,nrOfNegativeExamples,baseURI));
    logger.info(""String_Node_Str"");
    for (    Description c : solutions) {
      logger.info(""String_Node_Str"" + c + ""String_Node_Str""+ c.getLength()+ ""String_Node_Str""+ c.getDepth()+ ""String_Node_Str"");
    }
  }
  logger.debug(""String_Node_Str"" + candidates.size());
  printStatistics(true);
  if (stop)   logger.info(""String_Node_Str"");
 else   logger.info(""String_Node_Str"");
}"
10228,"private void extendNodeProper(ExampleBasedNode node,Description concept,int maxLength,int recDepth){
  if (stop)   return;
  if (recDepth > maxRecDepth)   maxRecDepth=recDepth;
  long refinementCalcTimeNsStart=System.nanoTime();
  Set<Description> refinements=operator.refine(concept,maxLength,null);
  refinementCalcTimeNs+=System.nanoTime() - refinementCalcTimeNsStart;
  if (refinements.size() > maxNrOfRefinements)   maxNrOfRefinements=refinements.size();
  long childConceptsDeletionTimeNsStart=System.nanoTime();
  refinements.removeAll(node.getChildConcepts());
  childConceptsDeletionTimeNs+=System.nanoTime() - childConceptsDeletionTimeNsStart;
  long evaluateSetCreationTimeNsStart=System.nanoTime();
  TreeSet<Description> toEvaluateConcepts=new TreeSet<Description>(conceptComparator);
  Iterator<Description> it=refinements.iterator();
  while (it.hasNext()) {
    Description refinement=it.next();
    if (refinement.getLength() > node.getHorizontalExpansion()) {
      boolean propernessDetected=false;
      if (useShortConceptConstruction) {
        Description shortConcept=ConceptTransformation.getShortConcept(refinement,conceptComparator);
        int n=conceptComparator.compare(shortConcept,concept);
        if (n == 0) {
          propernessTestsAvoidedByShortConceptConstruction++;
          propernessDetected=true;
          System.out.println(""String_Node_Str"" + refinement + ""String_Node_Str"");
        }
      }
      if (!propernessDetected && useTooWeakList) {
        if (refinement instanceof Intersection) {
          boolean tooWeakElement=containsTooWeakElement((Intersection)refinement);
          if (tooWeakElement) {
            propernessTestsAvoidedByTooWeakList++;
            conceptTestsTooWeakList++;
            propernessDetected=true;
            properRefinements.add(refinement);
            tooWeakList.add(refinement);
            ExampleBasedNode newNode=new ExampleBasedNode(refinement);
            newNode.setHorizontalExpansion(refinement.getLength() - 1);
            newNode.setTooWeak(true);
            newNode.setQualityEvaluationMethod(ExampleBasedNode.QualityEvaluationMethod.TOO_WEAK_LIST);
            node.addChild(newNode);
            it.remove();
          }
        }
      }
      if (!propernessDetected) {
        toEvaluateConcepts.add(refinement);
      }
    }
  }
  evaluateSetCreationTimeNs+=System.nanoTime() - evaluateSetCreationTimeNsStart;
  Set<Description> improperConcepts=null;
  if (toEvaluateConcepts.size() > 0) {
    if (testProperness) {
      long propCalcReasoningStart=System.nanoTime();
      improperConcepts=rs.subsumes(toEvaluateConcepts,concept);
      propernessTestsReasoner+=toEvaluateConcepts.size();
      propernessCalcReasoningTimeNs+=System.nanoTime() - propCalcReasoningStart;
    }
  }
  long improperConceptsRemovalTimeNsStart=System.nanoTime();
  if (improperConcepts != null)   toEvaluateConcepts.removeAll(improperConcepts);
  Set<Description> properConcepts=toEvaluateConcepts;
  refinements.removeAll(properConcepts);
  improperConceptsRemovalTimeNs+=System.nanoTime() - improperConceptsRemovalTimeNsStart;
  for (  Description refinement : properConcepts) {
    long redundancyCheckTimeNsStart=System.nanoTime();
    boolean nonRedundant=properRefinements.add(refinement);
    redundancyCheckTimeNs+=System.nanoTime() - redundancyCheckTimeNsStart;
    if (!nonRedundant)     redundantConcepts++;
    if (nonRedundant) {
      ExampleBasedNode newNode=new ExampleBasedNode(refinement);
      newNode.setHorizontalExpansion(refinement.getLength() - 1);
      boolean qualityKnown=false;
      int quality=-2;
      if (useOverlyGeneralList && refinement instanceof Union) {
        if (containsOverlyGeneralElement((Union)refinement)) {
          conceptTestsOverlyGeneralList++;
          quality=getNumberOfNegatives();
          qualityKnown=true;
          newNode.setQualityEvaluationMethod(ExampleBasedNode.QualityEvaluationMethod.OVERLY_GENERAL_LIST);
          newNode.setCoveredExamples(learningProblem.getPositiveExamples(),learningProblem.getNegativeExamples());
        }
      }
      if (!qualityKnown) {
        long propCalcReasoningStart2=System.nanoTime();
        conceptTestsReasoner++;
        Set<Individual> coveredPositives=node.getCoveredPositives();
        Set<Individual> newlyCoveredPositives=new HashSet<Individual>();
        int misclassifiedPositives=nrOfPositiveExamples - coveredPositives.size();
        for (        Individual i : coveredPositives) {
          if (quality != -1) {
            boolean covered=rs.instanceCheck(refinement,i);
            if (!covered)             misclassifiedPositives++;
 else             newlyCoveredPositives.add(i);
            if (misclassifiedPositives > allowedMisclassifications)             quality=-1;
          }
        }
        Set<Individual> newlyCoveredNegatives=null;
        if (quality != -1) {
          Set<Individual> coveredNegatives=node.getCoveredNegatives();
          newlyCoveredNegatives=new HashSet<Individual>();
          for (          Individual i : coveredNegatives) {
            boolean covered=rs.instanceCheck(refinement,i);
            if (covered)             newlyCoveredNegatives.add(i);
          }
        }
        propernessCalcReasoningTimeNs+=System.nanoTime() - propCalcReasoningStart2;
        newNode.setQualityEvaluationMethod(ExampleBasedNode.QualityEvaluationMethod.REASONER);
        if (quality != -1) {
          quality=(nrOfPositiveExamples - newlyCoveredPositives.size()) + newlyCoveredNegatives.size();
          newNode.setCoveredExamples(newlyCoveredPositives,newlyCoveredNegatives);
        }
      }
      if (quality == -1) {
        newNode.setTooWeak(true);
        tooWeakList.add(refinement);
      }
 else {
        if (quality >= 0 && quality <= allowedMisclassifications) {
          solutionFound=true;
          solutions.add(refinement);
        }
        newCandidates.add(newNode);
        if ((newNode.getCoveredPositives().size() == nrOfPositiveExamples) && quality == getNumberOfNegatives())         overlyGeneralList.add(refinement);
      }
      node.addChild(newNode);
    }
  }
  for (  Description refinement : refinements) {
    extendNodeProper(node,refinement,maxLength,recDepth + 1);
  }
}","private void extendNodeProper(ExampleBasedNode node,Description concept,int maxLength,int recDepth){
  if (stop)   return;
  if (recDepth > maxRecDepth)   maxRecDepth=recDepth;
  long refinementCalcTimeNsStart=System.nanoTime();
  Set<Description> refinements=operator.refine(concept,maxLength,null);
  refinementCalcTimeNs+=System.nanoTime() - refinementCalcTimeNsStart;
  if (refinements.size() > maxNrOfRefinements)   maxNrOfRefinements=refinements.size();
  long childConceptsDeletionTimeNsStart=System.nanoTime();
  refinements.removeAll(node.getChildConcepts());
  childConceptsDeletionTimeNs+=System.nanoTime() - childConceptsDeletionTimeNsStart;
  long evaluateSetCreationTimeNsStart=System.nanoTime();
  TreeSet<Description> toEvaluateConcepts=new TreeSet<Description>(conceptComparator);
  Iterator<Description> it=refinements.iterator();
  while (it.hasNext()) {
    Description refinement=it.next();
    if (refinement.getLength() > node.getHorizontalExpansion()) {
      boolean propernessDetected=false;
      if (useShortConceptConstruction) {
        Description shortConcept=ConceptTransformation.getShortConcept(refinement,conceptComparator);
        int n=conceptComparator.compare(shortConcept,concept);
        if (n == 0) {
          propernessTestsAvoidedByShortConceptConstruction++;
          propernessDetected=true;
        }
      }
      if (!propernessDetected && useTooWeakList) {
        if (refinement instanceof Intersection) {
          boolean tooWeakElement=containsTooWeakElement((Intersection)refinement);
          if (tooWeakElement) {
            propernessTestsAvoidedByTooWeakList++;
            conceptTestsTooWeakList++;
            propernessDetected=true;
            properRefinements.add(refinement);
            tooWeakList.add(refinement);
            ExampleBasedNode newNode=new ExampleBasedNode(refinement);
            newNode.setHorizontalExpansion(refinement.getLength() - 1);
            newNode.setTooWeak(true);
            newNode.setQualityEvaluationMethod(ExampleBasedNode.QualityEvaluationMethod.TOO_WEAK_LIST);
            node.addChild(newNode);
            it.remove();
          }
        }
      }
      if (!propernessDetected) {
        toEvaluateConcepts.add(refinement);
      }
    }
  }
  evaluateSetCreationTimeNs+=System.nanoTime() - evaluateSetCreationTimeNsStart;
  Set<Description> improperConcepts=null;
  if (toEvaluateConcepts.size() > 0) {
    if (testProperness) {
      long propCalcReasoningStart=System.nanoTime();
      improperConcepts=rs.subsumes(toEvaluateConcepts,concept);
      propernessTestsReasoner+=toEvaluateConcepts.size();
      propernessCalcReasoningTimeNs+=System.nanoTime() - propCalcReasoningStart;
    }
  }
  long improperConceptsRemovalTimeNsStart=System.nanoTime();
  if (improperConcepts != null)   toEvaluateConcepts.removeAll(improperConcepts);
  Set<Description> properConcepts=toEvaluateConcepts;
  refinements.removeAll(properConcepts);
  improperConceptsRemovalTimeNs+=System.nanoTime() - improperConceptsRemovalTimeNsStart;
  for (  Description refinement : properConcepts) {
    long redundancyCheckTimeNsStart=System.nanoTime();
    boolean nonRedundant=properRefinements.add(refinement);
    redundancyCheckTimeNs+=System.nanoTime() - redundancyCheckTimeNsStart;
    if (!nonRedundant)     redundantConcepts++;
    if (nonRedundant) {
      ExampleBasedNode newNode=new ExampleBasedNode(refinement);
      newNode.setHorizontalExpansion(refinement.getLength() - 1);
      boolean qualityKnown=false;
      int quality=-2;
      if (useOverlyGeneralList && refinement instanceof Union) {
        if (containsOverlyGeneralElement((Union)refinement)) {
          conceptTestsOverlyGeneralList++;
          quality=getNumberOfNegatives();
          qualityKnown=true;
          newNode.setQualityEvaluationMethod(ExampleBasedNode.QualityEvaluationMethod.OVERLY_GENERAL_LIST);
          newNode.setCoveredExamples(learningProblem.getPositiveExamples(),learningProblem.getNegativeExamples());
        }
      }
      if (!qualityKnown) {
        long propCalcReasoningStart2=System.nanoTime();
        conceptTestsReasoner++;
        Set<Individual> coveredPositives=node.getCoveredPositives();
        Set<Individual> newlyCoveredPositives=new HashSet<Individual>();
        int misclassifiedPositives=nrOfPositiveExamples - coveredPositives.size();
        for (        Individual i : coveredPositives) {
          if (quality != -1) {
            boolean covered=rs.instanceCheck(refinement,i);
            if (!covered)             misclassifiedPositives++;
 else             newlyCoveredPositives.add(i);
            if (misclassifiedPositives > allowedMisclassifications)             quality=-1;
          }
        }
        Set<Individual> newlyCoveredNegatives=null;
        if (quality != -1) {
          Set<Individual> coveredNegatives=node.getCoveredNegatives();
          newlyCoveredNegatives=new HashSet<Individual>();
          for (          Individual i : coveredNegatives) {
            boolean covered=rs.instanceCheck(refinement,i);
            if (covered)             newlyCoveredNegatives.add(i);
          }
        }
        propernessCalcReasoningTimeNs+=System.nanoTime() - propCalcReasoningStart2;
        newNode.setQualityEvaluationMethod(ExampleBasedNode.QualityEvaluationMethod.REASONER);
        if (quality != -1) {
          quality=(nrOfPositiveExamples - newlyCoveredPositives.size()) + newlyCoveredNegatives.size();
          newNode.setCoveredExamples(newlyCoveredPositives,newlyCoveredNegatives);
        }
      }
      if (quality == -1) {
        newNode.setTooWeak(true);
        tooWeakList.add(refinement);
      }
 else {
        if (quality >= 0 && quality <= allowedMisclassifications) {
          solutionFound=true;
          solutions.add(refinement);
        }
        newCandidates.add(newNode);
        if ((newNode.getCoveredPositives().size() == nrOfPositiveExamples) && quality == getNumberOfNegatives())         overlyGeneralList.add(refinement);
      }
      node.addChild(newNode);
    }
  }
  for (  Description refinement : refinements) {
    long redundancyCheckTimeNsStart=System.nanoTime();
    boolean redundant=properRefinements.contains(refinement);
    redundancyCheckTimeNs+=System.nanoTime() - redundancyCheckTimeNsStart;
    if (!redundant)     extendNodeProper(node,refinement,maxLength,recDepth + 1);
  }
}"
10229,"/** 
 * @param args No arguments supported.
 * @throws IOException
 * @throws FileNotFoundException
 * @throws ParseException
 */
public static void main(String[] args) throws FileNotFoundException, IOException, ParseException {
  String[] files=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  File owlFile=new File(""String_Node_Str"");
  Program program=null;
  long startTime, duration;
  String time;
  System.out.print(""String_Node_Str"");
  startTime=System.nanoTime();
  String content=""String_Node_Str"";
  for (  String file : files) {
    content+=Files.readFile(new File(prologDirectory + file));
  }
  duration=System.nanoTime() - startTime;
  time=Helper.prettyPrintNanoSeconds(duration,false,false);
  System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
  System.out.print(""String_Node_Str"");
  startTime=System.nanoTime();
  PrologParser pp=new PrologParser();
  program=pp.parseProgram(content);
  duration=System.nanoTime() - startTime;
  time=Helper.prettyPrintNanoSeconds(duration,false,false);
  System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
  KB kb=new KB();
  createChemElementsMapping();
  createNewGroups();
  NamedClass atomClass=getAtomicConcept(""String_Node_Str"");
  for (  String element : chemElements.values()) {
    NamedClass elClass=getAtomicConcept(element);
    SubClassAxiom sc=new SubClassAxiom(elClass,atomClass);
    kb.addAxiom(sc);
  }
  String kbString=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str"";
  if (!ignoreAmes) {
    kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
    kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str"";
  }
  if (includeMutagenesis) {
    kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
    kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str"";
  }
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=getURI2(""String_Node_Str"") + ""String_Node_Str"" + getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=getURI2(""String_Node_Str"") + ""String_Node_Str"" + getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=getURI2(""String_Node_Str"") + ""String_Node_Str"" + getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  KB kb2=KBParser.parseKBFile(kbString);
  kb.addKB(kb2);
  System.out.print(""String_Node_Str"");
  startTime=System.nanoTime();
  ArrayList<Clause> clauses=program.getClauses();
  for (  Clause clause : clauses) {
    List<Axiom> axioms=mapClause(clause);
    for (    Axiom axiom : axioms)     kb.addAxiom(axiom);
  }
  if (includeMutagenesis)   addMutagenesis(kb);
  for (  String compound : compounds) {
    if (!ignoreAmes && !compoundsAmes.contains(compound)) {
      BooleanDatatypePropertyAssertion ames=getBooleanDatatypePropertyAssertion(compound,""String_Node_Str"",false);
      kb.addAxiom(ames);
    }
  }
  String[] mainClasses=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Set<String> mainClassesSet=new HashSet<String>(Arrays.asList(mainClasses));
  DisjointClassesAxiom disjointAtomTypes=getDisjointClassesAxiom(mainClassesSet);
  kb.addAxiom(disjointAtomTypes);
  duration=System.nanoTime() - startTime;
  time=Helper.prettyPrintNanoSeconds(duration,false,false);
  System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
  System.out.print(""String_Node_Str"");
  startTime=System.nanoTime();
  OWLAPIReasoner.exportKBToOWL(owlFile,kb,ontologyURI);
  duration=System.nanoTime() - startTime;
  time=Helper.prettyPrintNanoSeconds(duration,false,false);
  System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
  File confTrainFile=new File(""String_Node_Str"");
  Files.clearFile(confTrainFile);
  String confHeader=""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  confHeader+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  Files.appendFile(confTrainFile,confHeader);
  File trainingFilePositives=new File(prologDirectory + ""String_Node_Str"");
  File trainingFileNegatives=new File(prologDirectory + ""String_Node_Str"");
  List<Individual> posTrainExamples=getExamples(trainingFilePositives);
  List<Individual> negTrainExamples=getExamples(trainingFileNegatives);
  appendPosExamples(confTrainFile,posTrainExamples);
  appendNegExamples(confTrainFile,negTrainExamples);
  File confPTE1File=new File(""String_Node_Str"");
  Files.clearFile(confPTE1File);
  File testPTE1Positives=new File(prologDirectory + ""String_Node_Str"");
  File testPTE1Negatives=new File(prologDirectory + ""String_Node_Str"");
  List<Individual> posPTE1Examples=getExamples(testPTE1Positives);
  List<Individual> negPTE1Examples=getExamples(testPTE1Negatives);
  appendPosExamples(confTrainFile,posPTE1Examples);
  appendNegExamples(confTrainFile,negPTE1Examples);
  Files.clearFile(confPTE1File);
  Files.appendFile(confPTE1File,""String_Node_Str"");
  appendPosExamples(confPTE1File,posPTE1Examples);
  appendNegExamples(confPTE1File,negPTE1Examples);
  File confPTE2File=new File(""String_Node_Str"");
  Files.clearFile(confPTE2File);
  Files.appendFile(confPTE2File,""String_Node_Str"");
  Files.appendFile(confPTE2File,getPTE2Examples());
}","/** 
 * @param args No arguments supported.
 * @throws IOException
 * @throws FileNotFoundException
 * @throws ParseException
 */
public static void main(String[] args) throws FileNotFoundException, IOException, ParseException {
  String[] files=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  File owlFile=new File(""String_Node_Str"");
  Program program=null;
  long startTime, duration;
  String time;
  System.out.print(""String_Node_Str"");
  startTime=System.nanoTime();
  String content=""String_Node_Str"";
  for (  String file : files) {
    content+=Files.readFile(new File(prologDirectory + file));
  }
  duration=System.nanoTime() - startTime;
  time=Helper.prettyPrintNanoSeconds(duration,false,false);
  System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
  System.out.print(""String_Node_Str"");
  startTime=System.nanoTime();
  PrologParser pp=new PrologParser();
  program=pp.parseProgram(content);
  duration=System.nanoTime() - startTime;
  time=Helper.prettyPrintNanoSeconds(duration,false,false);
  System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
  KB kb=new KB();
  createChemElementsMapping();
  createNewGroups();
  NamedClass atomClass=getAtomicConcept(""String_Node_Str"");
  for (  String element : chemElements.values()) {
    NamedClass elClass=getAtomicConcept(element);
    SubClassAxiom sc=new SubClassAxiom(elClass,atomClass);
    kb.addAxiom(sc);
  }
  String kbString=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str"";
  if (!ignoreAmes) {
    kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
    kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str"";
  }
  if (includeMutagenesis) {
    kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
    kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str"";
  }
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str""+ getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=getURI2(""String_Node_Str"") + ""String_Node_Str"" + getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=getURI2(""String_Node_Str"") + ""String_Node_Str"" + getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  kbString+=getURI2(""String_Node_Str"") + ""String_Node_Str"" + getURI2(""String_Node_Str"")+ ""String_Node_Str"";
  KB kb2=KBParser.parseKBFile(kbString);
  kb.addKB(kb2);
  System.out.print(""String_Node_Str"");
  startTime=System.nanoTime();
  ArrayList<Clause> clauses=program.getClauses();
  for (  Clause clause : clauses) {
    List<Axiom> axioms=mapClause(clause);
    for (    Axiom axiom : axioms)     kb.addAxiom(axiom);
  }
  if (includeMutagenesis)   addMutagenesis(kb);
  for (  String compound : compounds) {
    if (!ignoreAmes && !compoundsAmes.contains(compound)) {
      BooleanDatatypePropertyAssertion ames=getBooleanDatatypePropertyAssertion(compound,""String_Node_Str"",false);
      kb.addAxiom(ames);
    }
  }
  String[] mainClasses=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Set<String> mainClassesSet=new HashSet<String>(Arrays.asList(mainClasses));
  DisjointClassesAxiom disjointAtomTypes=getDisjointClassesAxiom(mainClassesSet);
  kb.addAxiom(disjointAtomTypes);
  duration=System.nanoTime() - startTime;
  time=Helper.prettyPrintNanoSeconds(duration,false,false);
  System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
  System.out.print(""String_Node_Str"");
  startTime=System.nanoTime();
  OWLAPIReasoner.exportKBToOWL(owlFile,kb,ontologyURI);
  duration=System.nanoTime() - startTime;
  time=Helper.prettyPrintNanoSeconds(duration,false,false);
  System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
  File confTrainFile=new File(""String_Node_Str"");
  Files.clearFile(confTrainFile);
  String confHeader=""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  confHeader+=""String_Node_Str"" + getURI2(""String_Node_Str"") + ""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  confHeader+=""String_Node_Str"";
  Files.appendFile(confTrainFile,confHeader);
  File trainingFilePositives=new File(prologDirectory + ""String_Node_Str"");
  File trainingFileNegatives=new File(prologDirectory + ""String_Node_Str"");
  List<Individual> posTrainExamples=getExamples(trainingFilePositives);
  List<Individual> negTrainExamples=getExamples(trainingFileNegatives);
  appendPosExamples(confTrainFile,posTrainExamples);
  appendNegExamples(confTrainFile,negTrainExamples);
  File confPTE1File=new File(""String_Node_Str"");
  File testPTE1Positives=new File(prologDirectory + ""String_Node_Str"");
  File testPTE1Negatives=new File(prologDirectory + ""String_Node_Str"");
  List<Individual> posPTE1Examples=getExamples(testPTE1Positives);
  List<Individual> negPTE1Examples=getExamples(testPTE1Negatives);
  appendPosExamples(confTrainFile,posPTE1Examples);
  appendNegExamples(confTrainFile,negPTE1Examples);
  if (createPTE1Conf) {
    Files.clearFile(confPTE1File);
    Files.appendFile(confPTE1File,""String_Node_Str"");
    appendPosExamples(confPTE1File,posPTE1Examples);
    appendNegExamples(confPTE1File,negPTE1Examples);
  }
  if (createPTE2Conf) {
    File confPTE2File=new File(""String_Node_Str"");
    Files.clearFile(confPTE2File);
    Files.appendFile(confPTE2File,""String_Node_Str"");
    Files.appendFile(confPTE2File,getPTE2Examples());
  }
}"
10230,"@Override public boolean instanceCheck(Description description,Individual individual) throws ReasoningMethodUnsupportedException {
  if (description instanceof NamedClass) {
    return classInstancesPos.get((NamedClass)description).contains(individual);
  }
 else   if (description instanceof Negation) {
    Description child=description.getChild(0);
    if (child instanceof NamedClass) {
      return classInstancesNeg.get((NamedClass)child).contains(individual);
    }
 else {
      throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    }
  }
 else   if (description instanceof Thing) {
    return true;
  }
 else   if (description instanceof Nothing) {
    return false;
  }
 else   if (description instanceof Union) {
    List<Description> children=description.getChildren();
    for (    Description child : children) {
      if (instanceCheck(child,individual))       return true;
    }
    return false;
  }
 else   if (description instanceof Intersection) {
    List<Description> children=description.getChildren();
    for (    Description child : children) {
      if (!instanceCheck(child,individual))       return false;
    }
    return true;
  }
 else   if (description instanceof ObjectSomeRestriction) {
    ObjectPropertyExpression ope=((ObjectSomeRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    ;
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return false;
    }
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null)     return false;
    for (    Individual roleFiller : roleFillers) {
      if (instanceCheck(child,roleFiller))       return true;
    }
    return false;
  }
 else   if (description instanceof ObjectAllRestriction) {
    ObjectPropertyExpression ope=((ObjectAllRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    ;
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return true;
    }
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null)     return true;
    for (    Individual roleFiller : roleFillers) {
      if (!instanceCheck(child,roleFiller))       return false;
    }
    return true;
  }
 else   if (description instanceof ObjectMinCardinalityRestriction) {
    ObjectPropertyExpression ope=((ObjectCardinalityRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return true;
    }
    int number=((ObjectCardinalityRestriction)description).getNumber();
    int nrOfFillers=0;
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null || roleFillers.size() < number)     return false;
    int index=0;
    for (    Individual roleFiller : roleFillers) {
      index++;
      if (instanceCheck(child,roleFiller)) {
        nrOfFillers++;
        if (nrOfFillers == number)         return true;
      }
    }
    return false;
  }
 else   if (description instanceof ObjectMaxCardinalityRestriction) {
    ObjectPropertyExpression ope=((ObjectCardinalityRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return true;
    }
    int number=((ObjectCardinalityRestriction)description).getNumber();
    int nrOfFillers=0;
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null || roleFillers.size() > number)     return true;
    int index=0;
    for (    Individual roleFiller : roleFillers) {
      index++;
      if (instanceCheck(child,roleFiller)) {
        nrOfFillers++;
        if (nrOfFillers == number)         return false;
      }
    }
    return true;
  }
 else   if (description instanceof BooleanValueRestriction) {
    DatatypeProperty dp=((BooleanValueRestriction)description).getRestrictedPropertyExpresssion();
    boolean value=((BooleanValueRestriction)description).getBooleanValue();
    if (value) {
      return bdPos.get(dp).contains(individual);
    }
 else {
      return bdNeg.get(dp).contains(individual);
    }
  }
 else   if (description instanceof DatatypeSomeRestriction) {
    DatatypeSomeRestriction dsr=(DatatypeSomeRestriction)description;
    DatatypeProperty dp=(DatatypeProperty)dsr.getRestrictedPropertyExpression();
    DataRange dr=dsr.getDataRange();
    SortedSet<Double> values=dd.get(dp).get(individual);
    if (values == null)     return false;
    if (dr instanceof DoubleMaxValue) {
      if (values.first() <= ((DoubleMaxValue)dr).getValue())       return true;
 else       return false;
    }
 else     if (dr instanceof DoubleMinValue) {
      if (values.last() >= ((DoubleMinValue)dr).getValue())       return true;
 else       return false;
    }
  }
  throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
}","@Override public boolean instanceCheck(Description description,Individual individual) throws ReasoningMethodUnsupportedException {
  if (description instanceof NamedClass) {
    return classInstancesPos.get((NamedClass)description).contains(individual);
  }
 else   if (description instanceof Negation) {
    Description child=description.getChild(0);
    if (child instanceof NamedClass) {
      return classInstancesNeg.get((NamedClass)child).contains(individual);
    }
 else {
      throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    }
  }
 else   if (description instanceof Thing) {
    return true;
  }
 else   if (description instanceof Nothing) {
    return false;
  }
 else   if (description instanceof Union) {
    List<Description> children=description.getChildren();
    for (    Description child : children) {
      if (instanceCheck(child,individual))       return true;
    }
    return false;
  }
 else   if (description instanceof Intersection) {
    List<Description> children=description.getChildren();
    for (    Description child : children) {
      if (!instanceCheck(child,individual))       return false;
    }
    return true;
  }
 else   if (description instanceof ObjectSomeRestriction) {
    ObjectPropertyExpression ope=((ObjectSomeRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    ;
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return false;
    }
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null)     return false;
    for (    Individual roleFiller : roleFillers) {
      if (instanceCheck(child,roleFiller))       return true;
    }
    return false;
  }
 else   if (description instanceof ObjectAllRestriction) {
    ObjectPropertyExpression ope=((ObjectAllRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    ;
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return true;
    }
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null)     return true;
    for (    Individual roleFiller : roleFillers) {
      if (!instanceCheck(child,roleFiller))       return false;
    }
    return true;
  }
 else   if (description instanceof ObjectMinCardinalityRestriction) {
    ObjectPropertyExpression ope=((ObjectCardinalityRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return true;
    }
    int number=((ObjectCardinalityRestriction)description).getNumber();
    int nrOfFillers=0;
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null || roleFillers.size() < number)     return false;
    int index=0;
    for (    Individual roleFiller : roleFillers) {
      index++;
      if (instanceCheck(child,roleFiller)) {
        nrOfFillers++;
        if (nrOfFillers == number)         return true;
      }
 else {
        if (roleFillers.size() - index < number)         return false;
      }
    }
    return false;
  }
 else   if (description instanceof ObjectMaxCardinalityRestriction) {
    ObjectPropertyExpression ope=((ObjectCardinalityRestriction)description).getRole();
    if (!(ope instanceof ObjectProperty))     throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
    ObjectProperty op=(ObjectProperty)ope;
    Description child=description.getChild(0);
    Map<Individual,SortedSet<Individual>> mapping=opPos.get(op);
    if (mapping == null) {
      logger.warn(""String_Node_Str"" + op + ""String_Node_Str"");
      return true;
    }
    int number=((ObjectCardinalityRestriction)description).getNumber();
    int nrOfFillers=0;
    SortedSet<Individual> roleFillers=opPos.get(op).get(individual);
    if (roleFillers == null || roleFillers.size() > number)     return true;
    int index=0;
    for (    Individual roleFiller : roleFillers) {
      index++;
      if (instanceCheck(child,roleFiller)) {
        nrOfFillers++;
        if (nrOfFillers == number)         return false;
      }
 else {
        if (roleFillers.size() - index <= number)         return true;
      }
    }
    return true;
  }
 else   if (description instanceof BooleanValueRestriction) {
    DatatypeProperty dp=((BooleanValueRestriction)description).getRestrictedPropertyExpresssion();
    boolean value=((BooleanValueRestriction)description).getBooleanValue();
    if (value) {
      return bdPos.get(dp).contains(individual);
    }
 else {
      return bdNeg.get(dp).contains(individual);
    }
  }
 else   if (description instanceof DatatypeSomeRestriction) {
    DatatypeSomeRestriction dsr=(DatatypeSomeRestriction)description;
    DatatypeProperty dp=(DatatypeProperty)dsr.getRestrictedPropertyExpression();
    DataRange dr=dsr.getDataRange();
    SortedSet<Double> values=dd.get(dp).get(individual);
    if (values == null)     return false;
    if (dr instanceof DoubleMaxValue) {
      if (values.first() <= ((DoubleMaxValue)dr).getValue())       return true;
 else       return false;
    }
 else     if (dr instanceof DoubleMinValue) {
      if (values.last() >= ((DoubleMinValue)dr).getValue())       return true;
 else       return false;
    }
  }
  throw new ReasoningMethodUnsupportedException(""String_Node_Str"" + description + ""String_Node_Str"");
}"
10231,"@SuppressWarnings({""String_Node_Str""}) public Set<Description> refine(Description description,int maxLength,List<Description> knownRefinements,Description currDomain){
  if (!(currDomain instanceof Thing) && !topARefinementsLength.containsKey(currDomain))   topARefinementsLength.put((NamedClass)currDomain,0);
  Set<Description> refinements=new TreeSet<Description>(conceptComparator);
  Set<Description> tmp=new HashSet<Description>();
  if (description instanceof Thing) {
    if (currDomain instanceof Thing) {
      if (maxLength > topRefinementsLength)       computeTopRefinements(maxLength);
      refinements=(TreeSet<Description>)topRefinementsCumulative.get(maxLength).clone();
    }
 else {
      if (maxLength > topARefinementsLength.get(currDomain))       computeTopRefinements(maxLength,(NamedClass)currDomain);
      refinements=(TreeSet<Description>)topARefinementsCumulative.get(currDomain).get(maxLength).clone();
    }
  }
 else   if (description instanceof Nothing) {
  }
 else   if (description instanceof NamedClass) {
    refinements.addAll(subHierarchy.getMoreSpecialConcepts(description));
    refinements.remove(new Nothing());
  }
 else   if (description instanceof Negation && description.getChild(0) instanceof NamedClass) {
    tmp=rs.getMoreGeneralConcepts(description.getChild(0));
    for (    Description c : tmp) {
      if (!(c instanceof Thing))       refinements.add(new Negation(c));
    }
  }
 else   if (description instanceof Intersection) {
    for (    Description child : description.getChildren()) {
      tmp=refine(child,maxLength - description.getLength() + child.getLength(),null,currDomain);
      for (      Description c : tmp) {
        List<Description> newChildren=(List<Description>)((LinkedList)description.getChildren()).clone();
        newChildren.add(c);
        newChildren.remove(child);
        Intersection mc=new Intersection(newChildren);
        ConceptTransformation.cleanConceptNonRecursive(mc);
        ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(mc,conceptComparator);
        if (checkIntersection(mc))         refinements.add(mc);
      }
    }
  }
 else   if (description instanceof Union) {
    for (    Description child : description.getChildren()) {
      tmp=refine(child,maxLength - description.getLength() + child.getLength(),null,currDomain);
      for (      Description c : tmp) {
        List<Description> newChildren=new LinkedList<Description>(description.getChildren());
        newChildren.remove(child);
        newChildren.add(c);
        Union md=new Union(newChildren);
        ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(md,conceptComparator);
        refinements.add(md);
      }
    }
  }
 else   if (description instanceof ObjectSomeRestriction) {
    ObjectPropertyExpression role=((ObjectQuantorRestriction)description).getRole();
    Description range=opRanges.get(role);
    tmp=refine(description.getChild(0),maxLength - 2,null,range);
    for (    Description c : tmp)     refinements.add(new ObjectSomeRestriction(((ObjectQuantorRestriction)description).getRole(),c));
    ObjectProperty ar=(ObjectProperty)role;
    Set<ObjectProperty> moreSpecialRoles=rs.getMoreSpecialRoles(ar);
    for (    ObjectProperty moreSpecialRole : moreSpecialRoles)     refinements.add(new ObjectSomeRestriction(moreSpecialRole,description.getChild(0)));
    if (useCardinalityRestrictions) {
      if (maxLength > description.getLength() && maxNrOfFillers.get(ar) > 1) {
        ObjectMinCardinalityRestriction min=new ObjectMinCardinalityRestriction(2,role,description.getChild(0));
        refinements.add(min);
      }
    }
  }
 else   if (description instanceof ObjectAllRestriction) {
    ObjectPropertyExpression role=((ObjectQuantorRestriction)description).getRole();
    Description range=opRanges.get(role);
    tmp=refine(description.getChild(0),maxLength - 2,null,range);
    for (    Description c : tmp) {
      refinements.add(new ObjectAllRestriction(((ObjectQuantorRestriction)description).getRole(),c));
    }
    if (description.getChild(0) instanceof NamedClass && tmp.size() == 0) {
      refinements.add(new ObjectAllRestriction(((ObjectQuantorRestriction)description).getRole(),new Nothing()));
    }
    ObjectProperty ar=(ObjectProperty)role;
    Set<ObjectProperty> moreSpecialRoles=rs.getMoreSpecialRoles(ar);
    for (    ObjectProperty moreSpecialRole : moreSpecialRoles) {
      refinements.add(new ObjectAllRestriction(moreSpecialRole,description.getChild(0)));
    }
    if (useCardinalityRestrictions) {
      if (maxLength > description.getLength() && maxNrOfFillers.get(ar) > 1) {
        ObjectMaxCardinalityRestriction max=new ObjectMaxCardinalityRestriction(maxNrOfFillers.get(ar) - 1,role,description.getChild(0));
        refinements.add(max);
      }
    }
  }
 else   if (description instanceof ObjectCardinalityRestriction) {
    if (description instanceof ObjectMaxCardinalityRestriction) {
      ObjectMaxCardinalityRestriction max=(ObjectMaxCardinalityRestriction)description;
      int number=max.getNumber();
      if (number > 0)       refinements.add(new ObjectMaxCardinalityRestriction(number - 1,max.getRole(),max.getChild(0)));
    }
 else     if (description instanceof ObjectMinCardinalityRestriction) {
      ObjectMinCardinalityRestriction min=(ObjectMinCardinalityRestriction)description;
      int number=min.getNumber();
      if (number < maxNrOfFillers.get(min.getRole()))       refinements.add(new ObjectMinCardinalityRestriction(number + 1,min.getRole(),min.getChild(0)));
    }
  }
 else   if (description instanceof DatatypeSomeRestriction) {
    DatatypeSomeRestriction dsr=(DatatypeSomeRestriction)description;
    DatatypeProperty dp=(DatatypeProperty)dsr.getRestrictedPropertyExpression();
    DataRange dr=dsr.getDataRange();
    if (dr instanceof DoubleMaxValue) {
      double value=((DoubleMaxValue)dr).getValue();
      int splitIndex=splits.get(dp).lastIndexOf(value);
      if (splitIndex == -1)       throw new Error(""String_Node_Str"");
      int newSplitIndex=splitIndex - 1;
      if (newSplitIndex >= 0) {
        DoubleMaxValue max=new DoubleMaxValue(splits.get(dp).get(newSplitIndex));
        DatatypeSomeRestriction newDSR=new DatatypeSomeRestriction(dp,max);
        refinements.add(newDSR);
      }
    }
 else     if (dr instanceof DoubleMinValue) {
      double value=((DoubleMinValue)dr).getValue();
      int splitIndex=splits.get(dp).lastIndexOf(value);
      if (splitIndex == -1)       throw new Error(""String_Node_Str"");
      int newSplitIndex=splitIndex + 1;
      if (newSplitIndex < splits.get(dp).size()) {
        DoubleMinValue min=new DoubleMinValue(splits.get(dp).get(newSplitIndex));
        DatatypeSomeRestriction newDSR=new DatatypeSomeRestriction(dp,min);
        refinements.add(newDSR);
      }
    }
  }
  if (!(description instanceof Thing) && !(description instanceof Nothing) && !(description instanceof ObjectAllRestriction && description.getChild(0) instanceof Nothing)) {
    int topRefLength=maxLength - description.getLength() - 1;
    if (currDomain instanceof Thing) {
      if (topRefLength > topRefinementsLength)       computeTopRefinements(topRefLength);
    }
 else     if (topRefLength > topARefinementsLength.get(currDomain))     computeTopRefinements(topRefLength,(NamedClass)currDomain);
    if (topRefLength > 0) {
      Set<Description> topRefs;
      if (currDomain instanceof Thing)       topRefs=topRefinementsCumulative.get(topRefLength);
 else       topRefs=topARefinementsCumulative.get(currDomain).get(topRefLength);
      for (      Description c : topRefs) {
        boolean skip=false;
        if (applyAllFilter) {
          if (c instanceof ObjectAllRestriction) {
            for (            Description child : description.getChildren()) {
              if (child instanceof ObjectAllRestriction) {
                ObjectPropertyExpression r1=((ObjectAllRestriction)c).getRole();
                ObjectPropertyExpression r2=((ObjectAllRestriction)child).getRole();
                if (r1.toString().equals(r2.toString()))                 skip=true;
              }
            }
          }
        }
        if (disjointChecks && c instanceof NamedClass && description instanceof NamedClass&& isDisjoint(description,c)) {
          skip=true;
        }
        if (!skip) {
          Intersection mc=new Intersection();
          mc.addChild(description);
          mc.addChild(c);
          ConceptTransformation.cleanConceptNonRecursive(mc);
          ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(mc,conceptComparator);
          if (checkIntersection(mc))           refinements.add(mc);
        }
      }
    }
  }
  return refinements;
}","@SuppressWarnings({""String_Node_Str""}) public Set<Description> refine(Description description,int maxLength,List<Description> knownRefinements,Description currDomain){
  if (!(currDomain instanceof Thing) && !topARefinementsLength.containsKey(currDomain))   topARefinementsLength.put((NamedClass)currDomain,0);
  Set<Description> refinements=new TreeSet<Description>(conceptComparator);
  Set<Description> tmp=new HashSet<Description>();
  if (description instanceof Thing) {
    if (currDomain instanceof Thing) {
      if (maxLength > topRefinementsLength)       computeTopRefinements(maxLength);
      refinements=(TreeSet<Description>)topRefinementsCumulative.get(maxLength).clone();
    }
 else {
      if (maxLength > topARefinementsLength.get(currDomain))       computeTopRefinements(maxLength,(NamedClass)currDomain);
      refinements=(TreeSet<Description>)topARefinementsCumulative.get(currDomain).get(maxLength).clone();
    }
  }
 else   if (description instanceof Nothing) {
  }
 else   if (description instanceof NamedClass) {
    refinements.addAll(subHierarchy.getMoreSpecialConcepts(description));
    refinements.remove(new Nothing());
  }
 else   if (description instanceof Negation && description.getChild(0) instanceof NamedClass) {
    tmp=rs.getMoreGeneralConcepts(description.getChild(0));
    for (    Description c : tmp) {
      if (!(c instanceof Thing))       refinements.add(new Negation(c));
    }
  }
 else   if (description instanceof Intersection) {
    for (    Description child : description.getChildren()) {
      tmp=refine(child,maxLength - description.getLength() + child.getLength(),null,currDomain);
      for (      Description c : tmp) {
        List<Description> newChildren=(List<Description>)((LinkedList)description.getChildren()).clone();
        newChildren.add(c);
        newChildren.remove(child);
        Intersection mc=new Intersection(newChildren);
        ConceptTransformation.cleanConceptNonRecursive(mc);
        ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(mc,conceptComparator);
        if (checkIntersection(mc))         refinements.add(mc);
      }
    }
  }
 else   if (description instanceof Union) {
    for (    Description child : description.getChildren()) {
      tmp=refine(child,maxLength - description.getLength() + child.getLength(),null,currDomain);
      for (      Description c : tmp) {
        List<Description> newChildren=new LinkedList<Description>(description.getChildren());
        newChildren.remove(child);
        newChildren.add(c);
        Union md=new Union(newChildren);
        ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(md,conceptComparator);
        refinements.add(md);
      }
    }
  }
 else   if (description instanceof ObjectSomeRestriction) {
    ObjectPropertyExpression role=((ObjectQuantorRestriction)description).getRole();
    Description range=opRanges.get(role);
    tmp=refine(description.getChild(0),maxLength - 2,null,range);
    for (    Description c : tmp)     refinements.add(new ObjectSomeRestriction(((ObjectQuantorRestriction)description).getRole(),c));
    ObjectProperty ar=(ObjectProperty)role;
    Set<ObjectProperty> moreSpecialRoles=rs.getMoreSpecialRoles(ar);
    for (    ObjectProperty moreSpecialRole : moreSpecialRoles)     refinements.add(new ObjectSomeRestriction(moreSpecialRole,description.getChild(0)));
    if (useCardinalityRestrictions) {
      if (maxLength > description.getLength() && maxNrOfFillers.get(ar) > 1) {
        ObjectMinCardinalityRestriction min=new ObjectMinCardinalityRestriction(2,role,description.getChild(0));
        refinements.add(min);
      }
    }
  }
 else   if (description instanceof ObjectAllRestriction) {
    ObjectPropertyExpression role=((ObjectQuantorRestriction)description).getRole();
    Description range=opRanges.get(role);
    tmp=refine(description.getChild(0),maxLength - 2,null,range);
    for (    Description c : tmp) {
      refinements.add(new ObjectAllRestriction(((ObjectQuantorRestriction)description).getRole(),c));
    }
    if (description.getChild(0) instanceof NamedClass && tmp.size() == 0) {
      refinements.add(new ObjectAllRestriction(((ObjectQuantorRestriction)description).getRole(),new Nothing()));
    }
    ObjectProperty ar=(ObjectProperty)role;
    Set<ObjectProperty> moreSpecialRoles=rs.getMoreSpecialRoles(ar);
    for (    ObjectProperty moreSpecialRole : moreSpecialRoles) {
      refinements.add(new ObjectAllRestriction(moreSpecialRole,description.getChild(0)));
    }
  }
 else   if (description instanceof ObjectCardinalityRestriction) {
    ObjectPropertyExpression role=((ObjectCardinalityRestriction)description).getRole();
    Description range=opRanges.get(role);
    int number=((ObjectCardinalityRestriction)description).getCardinality();
    if (description instanceof ObjectMaxCardinalityRestriction) {
      tmp=refine(description.getChild(0),maxLength - 3,null,range);
      for (      Description d : tmp) {
        refinements.add(new ObjectMaxCardinalityRestriction(number,role,d));
      }
      ObjectMaxCardinalityRestriction max=(ObjectMaxCardinalityRestriction)description;
      if (number > 1)       refinements.add(new ObjectMaxCardinalityRestriction(number - 1,max.getRole(),max.getChild(0)));
    }
 else     if (description instanceof ObjectMinCardinalityRestriction) {
      tmp=refine(description.getChild(0),maxLength - 3,null,range);
      for (      Description d : tmp) {
        refinements.add(new ObjectMinCardinalityRestriction(number,role,d));
      }
      ObjectMinCardinalityRestriction min=(ObjectMinCardinalityRestriction)description;
      if (number < maxNrOfFillers.get(min.getRole()))       refinements.add(new ObjectMinCardinalityRestriction(number + 1,min.getRole(),min.getChild(0)));
    }
  }
 else   if (description instanceof DatatypeSomeRestriction) {
    DatatypeSomeRestriction dsr=(DatatypeSomeRestriction)description;
    DatatypeProperty dp=(DatatypeProperty)dsr.getRestrictedPropertyExpression();
    DataRange dr=dsr.getDataRange();
    if (dr instanceof DoubleMaxValue) {
      double value=((DoubleMaxValue)dr).getValue();
      int splitIndex=splits.get(dp).lastIndexOf(value);
      if (splitIndex == -1)       throw new Error(""String_Node_Str"");
      int newSplitIndex=splitIndex - 1;
      if (newSplitIndex >= 0) {
        DoubleMaxValue max=new DoubleMaxValue(splits.get(dp).get(newSplitIndex));
        DatatypeSomeRestriction newDSR=new DatatypeSomeRestriction(dp,max);
        refinements.add(newDSR);
      }
    }
 else     if (dr instanceof DoubleMinValue) {
      double value=((DoubleMinValue)dr).getValue();
      int splitIndex=splits.get(dp).lastIndexOf(value);
      if (splitIndex == -1)       throw new Error(""String_Node_Str"");
      int newSplitIndex=splitIndex + 1;
      if (newSplitIndex < splits.get(dp).size()) {
        DoubleMinValue min=new DoubleMinValue(splits.get(dp).get(newSplitIndex));
        DatatypeSomeRestriction newDSR=new DatatypeSomeRestriction(dp,min);
        refinements.add(newDSR);
      }
    }
  }
  if (!(description instanceof Thing) && !(description instanceof Nothing) && !(description instanceof ObjectAllRestriction && description.getChild(0) instanceof Nothing)) {
    int topRefLength=maxLength - description.getLength() - 1;
    if (currDomain instanceof Thing) {
      if (topRefLength > topRefinementsLength)       computeTopRefinements(topRefLength);
    }
 else     if (topRefLength > topARefinementsLength.get(currDomain))     computeTopRefinements(topRefLength,(NamedClass)currDomain);
    if (topRefLength > 0) {
      Set<Description> topRefs;
      if (currDomain instanceof Thing)       topRefs=topRefinementsCumulative.get(topRefLength);
 else       topRefs=topARefinementsCumulative.get(currDomain).get(topRefLength);
      for (      Description c : topRefs) {
        boolean skip=false;
        if (applyAllFilter) {
          if (c instanceof ObjectAllRestriction) {
            for (            Description child : description.getChildren()) {
              if (child instanceof ObjectAllRestriction) {
                ObjectPropertyExpression r1=((ObjectAllRestriction)c).getRole();
                ObjectPropertyExpression r2=((ObjectAllRestriction)child).getRole();
                if (r1.toString().equals(r2.toString()))                 skip=true;
              }
            }
          }
        }
        if (disjointChecks && c instanceof NamedClass && description instanceof NamedClass&& isDisjoint(description,c)) {
          skip=true;
        }
        if (!skip) {
          Intersection mc=new Intersection();
          mc.addChild(description);
          mc.addChild(c);
          ConceptTransformation.cleanConceptNonRecursive(mc);
          ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(mc,conceptComparator);
          if (checkIntersection(mc))           refinements.add(mc);
        }
      }
    }
  }
  return refinements;
}"
10232,"public RhoDRDown(ReasoningService reasoningService,boolean applyAllFilter,boolean applyExistsFilter,boolean useAllConstructor,boolean useExistsConstructor,boolean useNegation,boolean useBooleanDatatypes,NamedClass startClass){
  this.rs=reasoningService;
  this.applyAllFilter=applyAllFilter;
  this.applyExistsFilter=applyExistsFilter;
  this.useAllConstructor=useAllConstructor;
  this.useExistsConstructor=useExistsConstructor;
  this.useNegation=useNegation;
  this.useBooleanDatatypes=useBooleanDatatypes;
  subHierarchy=rs.getSubsumptionHierarchy();
  for (  ObjectProperty op : rs.getAtomicRoles()) {
    opDomains.put(op,rs.getDomain(op));
    opRanges.put(op,rs.getRange(op));
  }
  for (  DatatypeProperty dp : rs.getDatatypeProperties()) {
    dpDomains.put(dp,rs.getDomain(dp));
  }
  for (  DatatypeProperty dp : rs.getDoubleDatatypeProperties()) {
    computeSplits(dp);
  }
  for (  ObjectProperty op : rs.getAtomicRoles()) {
    int maxFillers=0;
    Map<Individual,SortedSet<Individual>> opMembers=rs.getRoleMembers(op);
    for (    SortedSet<Individual> inds : opMembers.values()) {
      if (inds.size() > maxFillers)       maxFillers=inds.size();
    }
    maxNrOfFillers.put(op,maxFillers);
  }
  if (startClass != null)   this.startClass=startClass;
}","public RhoDRDown(ReasoningService reasoningService,boolean applyAllFilter,boolean applyExistsFilter,boolean useAllConstructor,boolean useExistsConstructor,boolean useNegation,boolean useBooleanDatatypes,NamedClass startClass){
  this.rs=reasoningService;
  this.applyAllFilter=applyAllFilter;
  this.applyExistsFilter=applyExistsFilter;
  this.useAllConstructor=useAllConstructor;
  this.useExistsConstructor=useExistsConstructor;
  this.useNegation=useNegation;
  this.useBooleanDatatypes=useBooleanDatatypes;
  subHierarchy=rs.getSubsumptionHierarchy();
  for (  ObjectProperty op : rs.getAtomicRoles()) {
    opDomains.put(op,rs.getDomain(op));
    opRanges.put(op,rs.getRange(op));
  }
  for (  DatatypeProperty dp : rs.getDatatypeProperties()) {
    dpDomains.put(dp,rs.getDomain(dp));
  }
  for (  DatatypeProperty dp : rs.getDoubleDatatypeProperties()) {
    computeSplits(dp);
  }
  if (useCardinalityRestrictions) {
    for (    ObjectProperty op : rs.getAtomicRoles()) {
      int maxFillers=0;
      Map<Individual,SortedSet<Individual>> opMembers=rs.getRoleMembers(op);
      for (      SortedSet<Individual> inds : opMembers.values()) {
        if (inds.size() > maxFillers)         maxFillers=inds.size();
        if (maxFillers >= cardinalityLimit) {
          maxFillers=cardinalityLimit;
          break;
        }
      }
      maxNrOfFillers.put(op,maxFillers);
    }
  }
  if (startClass != null)   this.startClass=startClass;
}"
10233,"private void computeM(NamedClass nc){
  long mComputationTimeStartNs=System.nanoTime();
  mA.put(nc,new TreeMap<Integer,SortedSet<Description>>());
  for (int i=1; i <= mMaxLength; i++) {
    mA.get(nc).put(i,new TreeSet<Description>(conceptComparator));
  }
  SortedSet<Description> m1=rs.getMoreSpecialConcepts(nc);
  mA.get(nc).put(1,m1);
  SortedSet<Description> m2=new TreeSet<Description>(conceptComparator);
  if (useNegation) {
    SortedSet<Description> m2tmp=rs.getMoreGeneralConcepts(new Nothing());
    for (    Description c : m2tmp) {
      if (c instanceof Thing)       m2.add(c);
 else {
        NamedClass a=(NamedClass)c;
        if (!isNotADisjoint(a,nc) && isNotAMeaningful(a,nc))         m2.add(new Negation(a));
      }
    }
  }
  computeMg(nc);
  if (useBooleanDatatypes) {
    Set<DatatypeProperty> booleanDPs=mgbd.get(nc);
    for (    DatatypeProperty dp : booleanDPs) {
      m2.add(new BooleanValueRestriction(dp,true));
      m2.add(new BooleanValueRestriction(dp,false));
    }
  }
  mA.get(nc).put(2,m2);
  SortedSet<Description> m3=new TreeSet<Description>(conceptComparator);
  if (useExistsConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectSomeRestriction(r,new Thing()));
    }
  }
  if (useAllConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectAllRestriction(r,new Thing()));
    }
  }
  if (useDoubleDatatypes) {
    Set<DatatypeProperty> doubleDPs=mgdd.get(nc);
    for (    DatatypeProperty dp : doubleDPs) {
      DoubleMaxValue max=new DoubleMaxValue(splits.get(dp).get(splits.get(dp).size() - 1));
      DoubleMinValue min=new DoubleMinValue(splits.get(dp).get(0));
      m3.add(new DatatypeSomeRestriction(dp,max));
      m3.add(new DatatypeSomeRestriction(dp,min));
    }
  }
  mA.get(nc).put(3,m3);
  mComputationTimeNs+=System.nanoTime() - mComputationTimeStartNs;
}","private void computeM(NamedClass nc){
  long mComputationTimeStartNs=System.nanoTime();
  mA.put(nc,new TreeMap<Integer,SortedSet<Description>>());
  for (int i=1; i <= mMaxLength; i++) {
    mA.get(nc).put(i,new TreeSet<Description>(conceptComparator));
  }
  SortedSet<Description> m1=rs.getMoreSpecialConcepts(nc);
  mA.get(nc).put(1,m1);
  SortedSet<Description> m2=new TreeSet<Description>(conceptComparator);
  if (useNegation) {
    SortedSet<Description> m2tmp=rs.getMoreGeneralConcepts(new Nothing());
    for (    Description c : m2tmp) {
      if (c instanceof Thing)       m2.add(c);
 else {
        NamedClass a=(NamedClass)c;
        if (!isNotADisjoint(a,nc) && isNotAMeaningful(a,nc))         m2.add(new Negation(a));
      }
    }
  }
  computeMg(nc);
  if (useBooleanDatatypes) {
    Set<DatatypeProperty> booleanDPs=mgbd.get(nc);
    for (    DatatypeProperty dp : booleanDPs) {
      m2.add(new BooleanValueRestriction(dp,true));
      m2.add(new BooleanValueRestriction(dp,false));
    }
  }
  mA.get(nc).put(2,m2);
  SortedSet<Description> m3=new TreeSet<Description>(conceptComparator);
  if (useExistsConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectSomeRestriction(r,new Thing()));
    }
  }
  if (useAllConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectAllRestriction(r,new Thing()));
    }
  }
  if (useDoubleDatatypes) {
    Set<DatatypeProperty> doubleDPs=mgdd.get(nc);
    for (    DatatypeProperty dp : doubleDPs) {
      DoubleMaxValue max=new DoubleMaxValue(splits.get(dp).get(splits.get(dp).size() - 1));
      DoubleMinValue min=new DoubleMinValue(splits.get(dp).get(0));
      m3.add(new DatatypeSomeRestriction(dp,max));
      m3.add(new DatatypeSomeRestriction(dp,min));
    }
  }
  mA.get(nc).put(3,m3);
  SortedSet<Description> m4=new TreeSet<Description>(conceptComparator);
  if (useCardinalityRestrictions) {
    for (    ObjectProperty r : mgr.get(nc)) {
      int maxFillers=maxNrOfFillers.get(r);
      m4.add(new ObjectMaxCardinalityRestriction(maxFillers - 1,r,new Thing()));
    }
  }
  mA.get(nc).put(4,m4);
  mComputationTimeNs+=System.nanoTime() - mComputationTimeStartNs;
}"
10234,"private void printStatistics(boolean finalStats){
  long algorithmRuntime=System.nanoTime() - algorithmStartTime;
  if (!finalStats) {
    ExampleBasedNode bestNode=candidatesStable.last();
    String bestNodeString=""String_Node_Str"" + bestNode.getShortDescription(nrOfPositiveExamples,nrOfNegativeExamples,baseURI);
    System.out.println(bestNodeString);
    String expandedNodeString=""String_Node_Str"" + candidates.last().getShortDescription(nrOfPositiveExamples,nrOfNegativeExamples,baseURI);
    System.out.println(expandedNodeString);
    System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(algorithmRuntime));
    System.out.println(""String_Node_Str"" + candidates.size());
    System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(rs.getSubsumptionReasoningTimeNs()));
    System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(rs.getInstanceCheckReasoningTimeNs()));
  }
  if (computeBenchmarkInformation) {
    long reasoningTime=rs.getOverallReasoningTimeNs();
    double reasoningPercentage=100 * reasoningTime / (double)algorithmRuntime;
    long propWithoutReasoning=propernessCalcTimeNs - propernessCalcReasoningTimeNs;
    double propPercentage=100 * propWithoutReasoning / (double)algorithmRuntime;
    double deletionPercentage=100 * childConceptsDeletionTimeNs / (double)algorithmRuntime;
    long subTime=rs.getSubsumptionReasoningTimeNs();
    double subPercentage=100 * subTime / (double)algorithmRuntime;
    double refinementPercentage=100 * refinementCalcTimeNs / (double)algorithmRuntime;
    double redundancyCheckPercentage=100 * redundancyCheckTimeNs / (double)algorithmRuntime;
    double evaluateSetCreationTimePercentage=100 * evaluateSetCreationTimeNs / (double)algorithmRuntime;
    double improperConceptsRemovalTimePercentage=100 * improperConceptsRemovalTimeNs / (double)algorithmRuntime;
    double mComputationTimePercentage=100 * operator.mComputationTimeNs / (double)algorithmRuntime;
    double topComputationTimePercentage=100 * operator.topComputationTimeNs / (double)algorithmRuntime;
    double cleanTimePercentage=100 * ConceptTransformation.cleaningTimeNs / (double)algorithmRuntime;
    double onnfTimePercentage=100 * ConceptTransformation.onnfTimeNs / (double)algorithmRuntime;
    double shorteningTimePercentage=100 * ConceptTransformation.shorteningTimeNs / (double)algorithmRuntime;
    System.out.println(""String_Node_Str"" + df.format(reasoningPercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(subPercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(propPercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(deletionPercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(refinementPercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(mComputationTimePercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(topComputationTimePercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(redundancyCheckPercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(evaluateSetCreationTimePercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(improperConceptsRemovalTimePercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(cleanTimePercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(onnfTimePercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(shorteningTimePercentage) + ""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + propernessTestsReasoner + ""String_Node_Str""+ propernessTestsAvoidedByShortConceptConstruction+ ""String_Node_Str""+ propernessTestsAvoidedByTooWeakList);
  System.out.println(""String_Node_Str"" + conceptTestsReasoner + ""String_Node_Str""+ conceptTestsTooWeakList+ ""String_Node_Str""+ conceptTestsOverlyGeneralList+ ""String_Node_Str""+ redundantConcepts);
}","private void printStatistics(boolean finalStats){
  long algorithmRuntime=System.nanoTime() - algorithmStartTime;
  if (!finalStats) {
    ExampleBasedNode bestNode=candidatesStable.last();
    System.out.println(""String_Node_Str"" + startNode.getShortDescription(nrOfPositiveExamples,nrOfNegativeExamples,baseURI));
    String bestNodeString=""String_Node_Str"" + bestNode.getShortDescription(nrOfPositiveExamples,nrOfNegativeExamples,baseURI);
    System.out.println(bestNodeString);
    String expandedNodeString=""String_Node_Str"" + candidates.last().getShortDescription(nrOfPositiveExamples,nrOfNegativeExamples,baseURI);
    System.out.println(expandedNodeString);
    System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(algorithmRuntime));
    System.out.println(""String_Node_Str"" + candidates.size());
    System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(rs.getSubsumptionReasoningTimeNs()));
    System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(rs.getInstanceCheckReasoningTimeNs()));
    System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(rs.getRetrievalReasoningTimeNs()));
  }
  if (computeBenchmarkInformation) {
    long reasoningTime=rs.getOverallReasoningTimeNs();
    double reasoningPercentage=100 * reasoningTime / (double)algorithmRuntime;
    long propWithoutReasoning=propernessCalcTimeNs - propernessCalcReasoningTimeNs;
    double propPercentage=100 * propWithoutReasoning / (double)algorithmRuntime;
    double deletionPercentage=100 * childConceptsDeletionTimeNs / (double)algorithmRuntime;
    long subTime=rs.getSubsumptionReasoningTimeNs();
    double subPercentage=100 * subTime / (double)algorithmRuntime;
    double refinementPercentage=100 * refinementCalcTimeNs / (double)algorithmRuntime;
    double redundancyCheckPercentage=100 * redundancyCheckTimeNs / (double)algorithmRuntime;
    double evaluateSetCreationTimePercentage=100 * evaluateSetCreationTimeNs / (double)algorithmRuntime;
    double improperConceptsRemovalTimePercentage=100 * improperConceptsRemovalTimeNs / (double)algorithmRuntime;
    double mComputationTimePercentage=100 * operator.mComputationTimeNs / (double)algorithmRuntime;
    double topComputationTimePercentage=100 * operator.topComputationTimeNs / (double)algorithmRuntime;
    double cleanTimePercentage=100 * ConceptTransformation.cleaningTimeNs / (double)algorithmRuntime;
    double onnfTimePercentage=100 * ConceptTransformation.onnfTimeNs / (double)algorithmRuntime;
    double shorteningTimePercentage=100 * ConceptTransformation.shorteningTimeNs / (double)algorithmRuntime;
    System.out.println(""String_Node_Str"" + df.format(reasoningPercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(subPercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(propPercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(deletionPercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(refinementPercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(mComputationTimePercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(topComputationTimePercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(redundancyCheckPercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(evaluateSetCreationTimePercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(improperConceptsRemovalTimePercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(cleanTimePercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(onnfTimePercentage) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + df.format(shorteningTimePercentage) + ""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + propernessTestsReasoner + ""String_Node_Str""+ propernessTestsAvoidedByShortConceptConstruction+ ""String_Node_Str""+ propernessTestsAvoidedByTooWeakList);
  System.out.println(""String_Node_Str"" + conceptTestsReasoner + ""String_Node_Str""+ conceptTestsTooWeakList+ ""String_Node_Str""+ conceptTestsOverlyGeneralList+ ""String_Node_Str""+ redundantConcepts);
}"
10235,"@SuppressWarnings({""String_Node_Str""}) public Set<Description> refine(Description description,int maxLength,List<Description> knownRefinements,Description currDomain){
  if (!(currDomain instanceof Thing) && !topARefinementsLength.containsKey(currDomain))   topARefinementsLength.put((NamedClass)currDomain,0);
  Set<Description> refinements=new TreeSet<Description>(conceptComparator);
  Set<Description> tmp=new HashSet<Description>();
  if (description instanceof Thing) {
    if (currDomain instanceof Thing) {
      if (maxLength > topRefinementsLength)       computeTopRefinements(maxLength);
      refinements=(TreeSet<Description>)topRefinementsCumulative.get(maxLength).clone();
    }
 else {
      if (maxLength > topARefinementsLength.get(currDomain))       computeTopRefinements(maxLength,(NamedClass)currDomain);
      refinements=(TreeSet<Description>)topARefinementsCumulative.get(currDomain).get(maxLength).clone();
    }
  }
 else   if (description instanceof Nothing) {
  }
 else   if (description instanceof NamedClass) {
    refinements.addAll(subHierarchy.getMoreSpecialConcepts(description));
    refinements.remove(new Nothing());
  }
 else   if (description instanceof Negation && description.getChild(0) instanceof NamedClass) {
    tmp=rs.getMoreGeneralConcepts(description.getChild(0));
    for (    Description c : tmp) {
      if (!(c instanceof Thing))       refinements.add(new Negation(c));
    }
  }
 else   if (description instanceof Intersection) {
    for (    Description child : description.getChildren()) {
      tmp=refine(child,maxLength - description.getLength() + child.getLength(),null,currDomain);
      for (      Description c : tmp) {
        List<Description> newChildren=(List<Description>)((LinkedList)description.getChildren()).clone();
        newChildren.add(c);
        newChildren.remove(child);
        Intersection mc=new Intersection(newChildren);
        ConceptTransformation.cleanConceptNonRecursive(mc);
        ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(mc,conceptComparator);
      }
    }
  }
 else   if (description instanceof Union) {
    for (    Description child : description.getChildren()) {
      tmp=refine(child,maxLength - description.getLength() + child.getLength(),null,currDomain);
      for (      Description c : tmp) {
        List<Description> newChildren=new LinkedList<Description>(description.getChildren());
        newChildren.remove(child);
        newChildren.add(c);
        Union md=new Union(newChildren);
        ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(md,conceptComparator);
        refinements.add(md);
      }
    }
  }
 else   if (description instanceof ObjectSomeRestriction) {
    ObjectPropertyExpression role=((ObjectQuantorRestriction)description).getRole();
    Description range=opRanges.get(role);
    tmp=refine(description.getChild(0),maxLength - 2,null,range);
    for (    Description c : tmp)     refinements.add(new ObjectSomeRestriction(((ObjectQuantorRestriction)description).getRole(),c));
    ObjectProperty ar=(ObjectProperty)role;
    Set<ObjectProperty> moreSpecialRoles=rs.getMoreSpecialRoles(ar);
    for (    ObjectProperty moreSpecialRole : moreSpecialRoles)     refinements.add(new ObjectSomeRestriction(moreSpecialRole,description.getChild(0)));
  }
 else   if (description instanceof ObjectAllRestriction) {
    ObjectPropertyExpression role=((ObjectQuantorRestriction)description).getRole();
    Description range=opRanges.get(role);
    tmp=refine(description.getChild(0),maxLength - 2,null,range);
    for (    Description c : tmp) {
      refinements.add(new ObjectAllRestriction(((ObjectQuantorRestriction)description).getRole(),c));
    }
    if (description.getChild(0) instanceof NamedClass && tmp.size() == 0) {
      refinements.add(new ObjectAllRestriction(((ObjectQuantorRestriction)description).getRole(),new Nothing()));
    }
    ObjectProperty ar=(ObjectProperty)role;
    Set<ObjectProperty> moreSpecialRoles=rs.getMoreSpecialRoles(ar);
    for (    ObjectProperty moreSpecialRole : moreSpecialRoles) {
      refinements.add(new ObjectAllRestriction(moreSpecialRole,description.getChild(0)));
    }
  }
  if (!(description instanceof Thing) && !(description instanceof Nothing) && !(description instanceof ObjectAllRestriction && description.getChild(0) instanceof Nothing)) {
    int topRefLength=maxLength - description.getLength() - 1;
    if (currDomain instanceof Thing) {
      if (topRefLength > topRefinementsLength)       computeTopRefinements(topRefLength);
    }
 else     if (topRefLength > topARefinementsLength.get(currDomain))     computeTopRefinements(topRefLength,(NamedClass)currDomain);
    if (topRefLength > 0) {
      Set<Description> topRefs;
      if (currDomain instanceof Thing)       topRefs=topRefinementsCumulative.get(topRefLength);
 else       topRefs=topARefinementsCumulative.get(currDomain).get(topRefLength);
      for (      Description c : topRefs) {
        boolean skip=false;
        if (applyAllFilter) {
          if (c instanceof ObjectAllRestriction) {
            for (            Description child : description.getChildren()) {
              if (child instanceof ObjectAllRestriction) {
                ObjectPropertyExpression r1=((ObjectAllRestriction)c).getRole();
                ObjectPropertyExpression r2=((ObjectAllRestriction)child).getRole();
                if (r1.toString().equals(r2.toString()))                 skip=true;
              }
            }
          }
        }
        if (c instanceof NamedClass && isDisjoint(description,c))         skip=true;
        if (!skip) {
          Intersection mc=new Intersection();
          mc.addChild(description);
          mc.addChild(c);
          ConceptTransformation.cleanConceptNonRecursive(mc);
          ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(mc,conceptComparator);
          refinements.add(mc);
        }
      }
    }
  }
  return refinements;
}","@SuppressWarnings({""String_Node_Str""}) public Set<Description> refine(Description description,int maxLength,List<Description> knownRefinements,Description currDomain){
  if (!(currDomain instanceof Thing) && !topARefinementsLength.containsKey(currDomain))   topARefinementsLength.put((NamedClass)currDomain,0);
  Set<Description> refinements=new TreeSet<Description>(conceptComparator);
  Set<Description> tmp=new HashSet<Description>();
  if (description instanceof Thing) {
    if (currDomain instanceof Thing) {
      if (maxLength > topRefinementsLength)       computeTopRefinements(maxLength);
      refinements=(TreeSet<Description>)topRefinementsCumulative.get(maxLength).clone();
    }
 else {
      if (maxLength > topARefinementsLength.get(currDomain))       computeTopRefinements(maxLength,(NamedClass)currDomain);
      refinements=(TreeSet<Description>)topARefinementsCumulative.get(currDomain).get(maxLength).clone();
    }
  }
 else   if (description instanceof Nothing) {
  }
 else   if (description instanceof NamedClass) {
    refinements.addAll(subHierarchy.getMoreSpecialConcepts(description));
    refinements.remove(new Nothing());
  }
 else   if (description instanceof Negation && description.getChild(0) instanceof NamedClass) {
    tmp=rs.getMoreGeneralConcepts(description.getChild(0));
    for (    Description c : tmp) {
      if (!(c instanceof Thing))       refinements.add(new Negation(c));
    }
  }
 else   if (description instanceof Intersection) {
    for (    Description child : description.getChildren()) {
      tmp=refine(child,maxLength - description.getLength() + child.getLength(),null,currDomain);
      for (      Description c : tmp) {
        List<Description> newChildren=(List<Description>)((LinkedList)description.getChildren()).clone();
        newChildren.add(c);
        newChildren.remove(child);
        Intersection mc=new Intersection(newChildren);
        ConceptTransformation.cleanConceptNonRecursive(mc);
        ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(mc,conceptComparator);
        refinements.add(mc);
      }
    }
  }
 else   if (description instanceof Union) {
    for (    Description child : description.getChildren()) {
      tmp=refine(child,maxLength - description.getLength() + child.getLength(),null,currDomain);
      for (      Description c : tmp) {
        List<Description> newChildren=new LinkedList<Description>(description.getChildren());
        newChildren.remove(child);
        newChildren.add(c);
        Union md=new Union(newChildren);
        ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(md,conceptComparator);
        refinements.add(md);
      }
    }
  }
 else   if (description instanceof ObjectSomeRestriction) {
    ObjectPropertyExpression role=((ObjectQuantorRestriction)description).getRole();
    Description range=opRanges.get(role);
    tmp=refine(description.getChild(0),maxLength - 2,null,range);
    for (    Description c : tmp)     refinements.add(new ObjectSomeRestriction(((ObjectQuantorRestriction)description).getRole(),c));
    ObjectProperty ar=(ObjectProperty)role;
    Set<ObjectProperty> moreSpecialRoles=rs.getMoreSpecialRoles(ar);
    for (    ObjectProperty moreSpecialRole : moreSpecialRoles)     refinements.add(new ObjectSomeRestriction(moreSpecialRole,description.getChild(0)));
  }
 else   if (description instanceof ObjectAllRestriction) {
    ObjectPropertyExpression role=((ObjectQuantorRestriction)description).getRole();
    Description range=opRanges.get(role);
    tmp=refine(description.getChild(0),maxLength - 2,null,range);
    for (    Description c : tmp) {
      refinements.add(new ObjectAllRestriction(((ObjectQuantorRestriction)description).getRole(),c));
    }
    if (description.getChild(0) instanceof NamedClass && tmp.size() == 0) {
      refinements.add(new ObjectAllRestriction(((ObjectQuantorRestriction)description).getRole(),new Nothing()));
    }
    ObjectProperty ar=(ObjectProperty)role;
    Set<ObjectProperty> moreSpecialRoles=rs.getMoreSpecialRoles(ar);
    for (    ObjectProperty moreSpecialRole : moreSpecialRoles) {
      refinements.add(new ObjectAllRestriction(moreSpecialRole,description.getChild(0)));
    }
  }
  if (!(description instanceof Thing) && !(description instanceof Nothing) && !(description instanceof ObjectAllRestriction && description.getChild(0) instanceof Nothing)) {
    int topRefLength=maxLength - description.getLength() - 1;
    if (currDomain instanceof Thing) {
      if (topRefLength > topRefinementsLength)       computeTopRefinements(topRefLength);
    }
 else     if (topRefLength > topARefinementsLength.get(currDomain))     computeTopRefinements(topRefLength,(NamedClass)currDomain);
    if (topRefLength > 0) {
      Set<Description> topRefs;
      if (currDomain instanceof Thing)       topRefs=topRefinementsCumulative.get(topRefLength);
 else       topRefs=topARefinementsCumulative.get(currDomain).get(topRefLength);
      for (      Description c : topRefs) {
        boolean skip=false;
        if (applyAllFilter) {
          if (c instanceof ObjectAllRestriction) {
            for (            Description child : description.getChildren()) {
              if (child instanceof ObjectAllRestriction) {
                ObjectPropertyExpression r1=((ObjectAllRestriction)c).getRole();
                ObjectPropertyExpression r2=((ObjectAllRestriction)child).getRole();
                if (r1.toString().equals(r2.toString()))                 skip=true;
              }
            }
          }
        }
        if (disjointChecks && c instanceof NamedClass && description instanceof NamedClass&& isDisjoint(description,c)) {
          skip=true;
        }
        if (!skip) {
          Intersection mc=new Intersection();
          mc.addChild(description);
          mc.addChild(c);
          ConceptTransformation.cleanConceptNonRecursive(mc);
          ConceptTransformation.transformToOrderedNegationNormalFormNonRecursive(mc,conceptComparator);
          refinements.add(mc);
        }
      }
    }
  }
  return refinements;
}"
10236,"private void computeM(NamedClass nc){
  long mComputationTimeStartNs=System.nanoTime();
  mA.put(nc,new TreeMap<Integer,SortedSet<Description>>());
  for (int i=1; i <= mMaxLength; i++) {
    mA.get(nc).put(i,new TreeSet<Description>(conceptComparator));
  }
  SortedSet<Description> m1=rs.getMoreSpecialConcepts(nc);
  mA.get(nc).put(1,m1);
  if (useNegation) {
    SortedSet<Description> m2tmp=rs.getMoreGeneralConcepts(new Nothing());
    SortedSet<Description> m2=new TreeSet<Description>(conceptComparator);
    for (    Description c : m2tmp) {
      if (c instanceof Thing)       m2.add(c);
 else {
        NamedClass a=(NamedClass)c;
        if (!isNotADisjoint(a,nc) && isNotAMeaningful(a,nc))         m2.add(new Negation(a));
      }
    }
    mA.get(nc).put(2,m2);
  }
  computeMg(nc);
  SortedSet<Description> m3=new TreeSet<Description>(conceptComparator);
  if (useExistsConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectSomeRestriction(r,new Thing()));
    }
  }
  if (useAllConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectAllRestriction(r,new Thing()));
    }
  }
  if (useBooleanDatatypes) {
    Set<DatatypeProperty> booleanDPs=mgbd.get(nc);
    for (    DatatypeProperty dp : booleanDPs) {
      m3.add(new BooleanValueRestriction(dp,true));
      m3.add(new BooleanValueRestriction(dp,false));
    }
  }
  mA.get(nc).put(3,m3);
  mComputationTimeNs+=System.nanoTime() - mComputationTimeStartNs;
}","private void computeM(NamedClass nc){
  long mComputationTimeStartNs=System.nanoTime();
  mA.put(nc,new TreeMap<Integer,SortedSet<Description>>());
  for (int i=1; i <= mMaxLength; i++) {
    mA.get(nc).put(i,new TreeSet<Description>(conceptComparator));
  }
  SortedSet<Description> m1=rs.getMoreSpecialConcepts(nc);
  mA.get(nc).put(1,m1);
  SortedSet<Description> m2=new TreeSet<Description>(conceptComparator);
  if (useNegation) {
    SortedSet<Description> m2tmp=rs.getMoreGeneralConcepts(new Nothing());
    for (    Description c : m2tmp) {
      if (c instanceof Thing)       m2.add(c);
 else {
        NamedClass a=(NamedClass)c;
        if (!isNotADisjoint(a,nc) && isNotAMeaningful(a,nc))         m2.add(new Negation(a));
      }
    }
  }
  computeMg(nc);
  if (useBooleanDatatypes) {
    Set<DatatypeProperty> booleanDPs=mgbd.get(nc);
    for (    DatatypeProperty dp : booleanDPs) {
      m2.add(new BooleanValueRestriction(dp,true));
      m2.add(new BooleanValueRestriction(dp,false));
    }
  }
  mA.get(nc).put(2,m2);
  SortedSet<Description> m3=new TreeSet<Description>(conceptComparator);
  if (useExistsConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectSomeRestriction(r,new Thing()));
    }
  }
  if (useAllConstructor) {
    for (    ObjectProperty r : mgr.get(nc)) {
      m3.add(new ObjectAllRestriction(r,new Thing()));
    }
  }
  mA.get(nc).put(3,m3);
  mComputationTimeNs+=System.nanoTime() - mComputationTimeStartNs;
}"
10237,"/** 
 * Takes a SPARQL query (which has not been evaluated yet) as argument and returns a result set. The result set is taken from this cache if the query is stored here. Otherwise the query is send and its result added to the cache and returned. Convenience method.
 * @param query The SPARQL query.
 * @return Jena result set.
 */
public ResultSet executeSparqlQuery(SparqlQuery query){
  String result=getCacheEntry(query.getQueryString());
  if (result != null) {
    return SparqlQuery.JSONtoResultSet(result);
  }
 else {
    query.send();
    ResultSet rs=query.getResultSet();
    if (rs != null) {
      String json=SparqlQuery.getAsJSON(rs);
      addToCache(query.getQueryString(),json);
      return SparqlQuery.JSONtoResultSet(json);
    }
    return rs;
  }
}","/** 
 * Takes a SPARQL query (which has not been evaluated yet) as argument and returns a result set. The result set is taken from this cache if the query is stored here. Otherwise the query is send and its result added to the cache and returned. Convenience method.
 * @param query The SPARQL query.
 * @return Jena result set.
 */
public String executeSparqlQuery(SparqlQuery query){
  String result=getCacheEntry(query.getQueryString());
  if (result != null) {
    return result;
  }
 else {
    query.send();
    String json=query.getResult();
    if (json != null) {
      addToCache(query.getQueryString(),json);
    }
 else     json=""String_Node_Str"";
    return json;
  }
}"
10238,"public boolean hasCompleted(){
  return (rs != null);
}","public boolean hasCompleted(){
  return (json != null);
}"
10239,"/** 
 * Sends a SPARQL query using the Jena library.
 */
public ResultSet send(){
  isRunning=true;
  logger.info(queryString);
  String service=endpoint.getURL().toString();
  logger.info(endpoint.getURL().toString());
  queryExecution=new QueryEngineHTTP(service,queryString);
  for (  String dgu : endpoint.getDefaultGraphURIs()) {
    queryExecution.addDefaultGraph(dgu);
  }
  for (  String ngu : endpoint.getNamedGraphURIs()) {
    queryExecution.addNamedGraph(ngu);
  }
  logger.info(""String_Node_Str"");
  try {
    HttpQuery.urlLimit=3 * 1024;
    rs=queryExecution.execSelect();
    logger.info(rs.getResultVars().toString());
  }
 catch (  Exception e) {
    sendException=new SparqlQueryException(e.getMessage());
    logger.info(""String_Node_Str"");
  }
  isRunning=false;
  return rs;
}","/** 
 * Sends a SPARQL query using the Jena library.
 */
public ResultSet send(){
  isRunning=true;
  ResultSet rs=null;
  logger.info(queryString);
  String service=endpoint.getURL().toString();
  logger.info(endpoint.getURL().toString());
  queryExecution=new QueryEngineHTTP(service,queryString);
  for (  String dgu : endpoint.getDefaultGraphURIs()) {
    queryExecution.addDefaultGraph(dgu);
  }
  for (  String ngu : endpoint.getNamedGraphURIs()) {
    queryExecution.addNamedGraph(ngu);
  }
  logger.info(""String_Node_Str"");
  try {
    HttpQuery.urlLimit=3 * 1024;
    rs=queryExecution.execSelect();
    json=SparqlQuery.getAsJSON(rs);
    logger.info(rs.getResultVars().toString());
  }
 catch (  Exception e) {
    sendException=new SparqlQueryException(e.getMessage());
    logger.info(""String_Node_Str"");
  }
  isRunning=false;
  return rs;
}"
10240,"public SparqlQueryThreaded(Cache cache,SparqlQuery query){
  this.cache=cache;
  this.query=query;
}","public SparqlQueryThreaded(Cache cache,SparqlQuery query){
  this.cache=cache;
  this.query=query;
  this.result=null;
}"
10241,"public void stop(){
  query.getExecution().abort();
  isRunning=false;
}","public void stop(){
  query.getExecution().abort();
  result=null;
}"
10242,"public boolean isRunning(){
  return isRunning;
}","public boolean isRunning(){
  return result == null;
}"
10243,"public ResultSet getResult(){
  return result;
}","public String getResult(){
  return result;
}"
10244,"public void send(){
  isRunning=true;
  result=cache.executeSparqlQuery(query);
  isRunning=false;
}","public void send(){
  result=cache.executeSparqlQuery(query);
}"
10245,"/** 
 * uses a cache and gets the result tuples for a resource u
 * @param uri the resource
 * @param sparqlQueryString
 * @param a the name of the first bound variable for xml parsing, normally predicate
 * @param b the name of the second bound variable for xml parsing, normally object
 * @return
 */
@SuppressWarnings({""String_Node_Str""}) public Set<StringTuple> getTupelForResource(URI uri){
  Set<StringTuple> s=new HashSet<StringTuple>();
  String a=""String_Node_Str"";
  String b=""String_Node_Str"";
  String sparqlQueryString=sparqlQueryMaker.makeSubjectQueryUsingFilters(uri.toString());
  SparqlQuery query=new SparqlQuery(sparqlQueryString,configuration.getSparqlEndpoint());
  ResultSet rs=cache.executeSparqlQuery(query);
  List<ResultBinding> l=ResultSetFormatter.toList(rs);
  p(l.toString());
  for (  ResultBinding resultBinding : l) {
    s.add(new StringTuple(resultBinding.get(a).toString(),resultBinding.get(b).toString()));
  }
  return s;
}","/** 
 * uses a cache and gets the result tuples for a resource u
 * @param uri the resource
 * @param sparqlQueryString
 * @param a the name of the first bound variable for xml parsing, normally predicate
 * @param b the name of the second bound variable for xml parsing, normally object
 * @return
 */
@SuppressWarnings({""String_Node_Str""}) public Set<StringTuple> getTupelForResource(URI uri){
  Set<StringTuple> s=new HashSet<StringTuple>();
  String a=""String_Node_Str"";
  String b=""String_Node_Str"";
  String sparqlQueryString=sparqlQueryMaker.makeSubjectQueryUsingFilters(uri.toString());
  SparqlQuery query=new SparqlQuery(sparqlQueryString,configuration.getSparqlEndpoint());
  ResultSet rs=SparqlQuery.JSONtoResultSet(cache.executeSparqlQuery(query));
  List<ResultBinding> l=ResultSetFormatter.toList(rs);
  p(l.toString());
  for (  ResultBinding resultBinding : l) {
    s.add(new StringTuple(resultBinding.get(a).toString(),resultBinding.get(b).toString()));
  }
  return s;
}"
10246,"@Override @SuppressWarnings({""String_Node_Str""}) public Set<StringTuple> getTupelForResource(URI uri){
  Set<StringTuple> s=new HashSet<StringTuple>();
  String a=""String_Node_Str"";
  String b=""String_Node_Str"";
  String sparqlQueryString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  SparqlQuery query=new SparqlQuery(sparqlQueryString,configuration.getSparqlEndpoint());
  ResultSet rs=cache.executeSparqlQuery(query);
  List<ResultBinding> l=ResultSetFormatter.toList(rs);
  for (  ResultBinding resultBinding : l) {
    s.add(new StringTuple(resultBinding.get(a).toString(),resultBinding.get(b).toString()));
  }
  return s;
}","@Override @SuppressWarnings({""String_Node_Str""}) public Set<StringTuple> getTupelForResource(URI uri){
  Set<StringTuple> s=new HashSet<StringTuple>();
  String a=""String_Node_Str"";
  String b=""String_Node_Str"";
  String sparqlQueryString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  SparqlQuery query=new SparqlQuery(sparqlQueryString,configuration.getSparqlEndpoint());
  ResultSet rs=SparqlQuery.JSONtoResultSet(cache.executeSparqlQuery(query));
  List<ResultBinding> l=ResultSetFormatter.toList(rs);
  for (  ResultBinding resultBinding : l) {
    s.add(new StringTuple(resultBinding.get(a).toString(),resultBinding.get(b).toString()));
  }
  return s;
}"
10247,"@WebMethod public String getAsJSON(int sessionID,int queryID) throws ClientNotKnownException, SparqlQueryException {
  ClientState state=getState(sessionID);
  SparqlQueryException exception=null;
  if ((exception=state.getQuery(queryID).getSparqlQuery().getException()) != null)   throw exception;
  return SparqlQuery.getAsJSON(state.getQuery(queryID).getResult());
}","@WebMethod public String getAsJSON(int sessionID,int queryID) throws ClientNotKnownException, SparqlQueryException {
  ClientState state=getState(sessionID);
  SparqlQueryException exception=null;
  if ((exception=state.getQuery(queryID).getSparqlQuery().getException()) != null)   throw exception;
  return state.getQuery(queryID).getResult();
}"
10248,"@WebMethod public String getAsXMLString(int sessionID,int queryID) throws ClientNotKnownException {
  ClientState state=getState(sessionID);
  ResultSet resultSet=state.getQuery(queryID).getResult();
  return SparqlQuery.getAsXMLString(resultSet);
}","@WebMethod public String getAsXMLString(int sessionID,int queryID) throws ClientNotKnownException {
  ClientState state=getState(sessionID);
  ResultSet resultSet=SparqlQuery.JSONtoResultSet(state.getQuery(queryID).getResult());
  return SparqlQuery.getAsXMLString(resultSet);
}"
10249,"public static Description parseConcept(String string) throws ParseException {
  KBParser parser=new KBParser(new StringReader(string));
  return parser.Concept();
}","public static Description parseConcept(String string) throws ParseException {
  String eq=""String_Node_Str"" + string + ""String_Node_Str"";
  KBParser parser=new KBParser(new StringReader(eq));
  EquivalentClassesAxiom eqAxiom=parser.TBoxEquiv();
  return eqAxiom.getConcept2();
}"
10250,"/** 
 * Takes a SPARQL query (which has not been evaluated yet) as argument and returns a result set. The result set is taken from this cache if the query is stored here. Otherwise the query is send and its result added to the cache and returned. Convenience method.
 * @param query The SPARQL query.
 * @return Jena result set.
 */
public ResultSet executeSparqlQuery(SparqlQuery query){
  String result=getCacheEntry(query.getQueryString());
  if (result != null) {
    return SparqlQuery.JSONtoResultSet(result);
  }
 else {
    ResultSet rs=query.send();
    if (rs != null) {
      String json=SparqlQuery.getAsJSON(rs);
      addToCache(query.getQueryString(),json);
      return SparqlQuery.JSONtoResultSet(json);
    }
 else     return rs;
  }
}","/** 
 * Takes a SPARQL query (which has not been evaluated yet) as argument and returns a result set. The result set is taken from this cache if the query is stored here. Otherwise the query is send and its result added to the cache and returned. Convenience method.
 * @param query The SPARQL query.
 * @return Jena result set.
 */
public ResultSet executeSparqlQuery(SparqlQuery query){
  String result=getCacheEntry(query.getQueryString());
  if (result != null) {
    return SparqlQuery.JSONtoResultSet(result);
  }
 else {
    query.send();
    ResultSet rs=query.getResultSet();
    if (rs != null) {
      String json=SparqlQuery.getAsJSON(rs);
      addToCache(query.getQueryString(),json);
      return SparqlQuery.JSONtoResultSet(json);
    }
    return rs;
  }
}"
10251,"/** 
 * Converts Jena result set to JSON.
 * @param resultSet The result set to transform.
 * @return JSON representation of the result set.
 */
public static String getAsJSON(ResultSet resultSet){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ResultSetFormatter.outputAsJSON(baos,resultSet);
  try {
    return baos.toString(""String_Node_Str"");
  }
 catch (  Exception e) {
    return baos.toString();
  }
}","/** 
 * Converts Jena result set to JSON.
 * @param resultSet The result set to transform.
 * @return JSON representation of the result set.
 */
public static String getAsJSON(ResultSet resultSet){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ResultSetFormatter.outputAsJSON(baos,resultSet);
  resultSet=JSONtoResultSet(baos.toString());
  try {
    return baos.toString(""String_Node_Str"");
  }
 catch (  Exception e) {
    return baos.toString();
  }
}"
10252,"/** 
 * set ComboBox to selected class
 */
public void updateComboBox(){
  if (config.getReasoner() != null)   for (int i=0; i < reasoner.size(); i++)   if (config.getKnowledgeSource().getClass().equals(config.getComponentManager().getKnowledgeSources().get(i))) {
    cb.setSelectedIndex(i);
  }
  this.choosenClassIndex=cb.getSelectedIndex();
}","/** 
 * set ComboBox to selected class
 */
public void updateComboBox(){
  if (config.getReasoner() != null)   for (int i=0; i < reasoner.size(); i++)   if (config.getReasoner().getClass().equals(config.getComponentManager().getReasonerComponents().get(i))) {
    cb.setSelectedIndex(i);
  }
  this.choosenClassIndex=cb.getSelectedIndex();
}"
10253,"@Override public void init(){
  OWLOntologyManager manager=OWLManager.createOWLOntologyManager();
  Comparator<OWLNamedObject> namedObjectComparator=new Comparator<OWLNamedObject>(){
    public int compare(    OWLNamedObject o1,    OWLNamedObject o2){
      return o1.getURI().compareTo(o2.getURI());
    }
  }
;
  Set<OWLClass> classes=new TreeSet<OWLClass>(namedObjectComparator);
  Set<OWLObjectProperty> properties=new TreeSet<OWLObjectProperty>(namedObjectComparator);
  Set<OWLIndividual> owlIndividuals=new TreeSet<OWLIndividual>(namedObjectComparator);
  Set<OWLOntology> allImports=new HashSet<OWLOntology>();
  for (  KnowledgeSource source : sources) {
    if (source instanceof OWLFile) {
      URL url=((OWLFile)source).getURL();
      try {
        OWLOntology ontology=manager.loadOntologyFromPhysicalURI(url.toURI());
        allImports.addAll(manager.getImportsClosure(ontology));
        classes.addAll(ontology.getReferencedClasses());
        properties.addAll(ontology.getReferencedObjectProperties());
        owlIndividuals.addAll(ontology.getReferencedIndividuals());
      }
 catch (      OWLOntologyCreationException e) {
        e.printStackTrace();
      }
catch (      URISyntaxException e) {
        e.printStackTrace();
      }
    }
 else {
      KB kb=source.toKB();
      URI ontologyURI=URI.create(""String_Node_Str"");
      OWLOntology ontology=null;
      try {
        ontology=manager.createOntology(ontologyURI);
      }
 catch (      OWLOntologyCreationException e) {
        e.printStackTrace();
      }
      OWLAPIAxiomConvertVisitor.fillOWLOntology(manager,ontology,kb);
    }
  }
  if (reasonerType.equals(""String_Node_Str"")) {
    try {
      reasoner=new uk.ac.manchester.cs.factplusplus.owlapi.Reasoner(manager);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    reasoner=new org.mindswap.pellet.owlapi.Reasoner(manager);
    Logger pelletLogger=Logger.getLogger(""String_Node_Str"");
    pelletLogger.setLevel(Level.WARN);
  }
  try {
    reasoner.loadOntologies(allImports);
    reasoner.classify();
    reasoner.realise();
  }
 catch (  OWLReasonerException e) {
    e.printStackTrace();
  }
  factory=manager.getOWLDataFactory();
  atomicConcepts=new TreeSet<NamedClass>(conceptComparator);
  for (  OWLClass owlClass : classes)   atomicConcepts.add(new NamedClass(owlClass.getURI().toString()));
  atomicRoles=new TreeSet<ObjectProperty>(roleComparator);
  for (  OWLObjectProperty owlProperty : properties)   atomicRoles.add(new ObjectProperty(owlProperty.getURI().toString()));
  individuals=new TreeSet<Individual>();
  for (  OWLIndividual owlIndividual : owlIndividuals)   individuals.add(new Individual(owlIndividual.getURI().toString()));
}","@Override public void init(){
  OWLOntologyManager manager=OWLManager.createOWLOntologyManager();
  Comparator<OWLNamedObject> namedObjectComparator=new Comparator<OWLNamedObject>(){
    public int compare(    OWLNamedObject o1,    OWLNamedObject o2){
      return o1.getURI().compareTo(o2.getURI());
    }
  }
;
  Set<OWLClass> classes=new TreeSet<OWLClass>(namedObjectComparator);
  Set<OWLObjectProperty> properties=new TreeSet<OWLObjectProperty>(namedObjectComparator);
  Set<OWLIndividual> owlIndividuals=new TreeSet<OWLIndividual>(namedObjectComparator);
  Set<OWLOntology> allImports=new HashSet<OWLOntology>();
  for (  KnowledgeSource source : sources) {
    if (source instanceof OWLFile) {
      URL url=((OWLFile)source).getURL();
      try {
        OWLOntology ontology=manager.loadOntologyFromPhysicalURI(url.toURI());
        allImports.addAll(manager.getImportsClosure(ontology));
        classes.addAll(ontology.getReferencedClasses());
        properties.addAll(ontology.getReferencedObjectProperties());
        owlIndividuals.addAll(ontology.getReferencedIndividuals());
      }
 catch (      OWLOntologyCreationException e) {
        e.printStackTrace();
      }
catch (      URISyntaxException e) {
        e.printStackTrace();
      }
    }
 else {
      KB kb=source.toKB();
      URI ontologyURI=URI.create(""String_Node_Str"");
      OWLOntology ontology=null;
      try {
        ontology=manager.createOntology(ontologyURI);
      }
 catch (      OWLOntologyCreationException e) {
        e.printStackTrace();
      }
      OWLAPIAxiomConvertVisitor.fillOWLOntology(manager,ontology,kb);
      allImports.add(ontology);
      atomicConcepts.addAll(kb.findAllAtomicConcepts());
      atomicRoles.addAll(kb.findAllAtomicRoles());
      individuals.addAll(kb.findAllIndividuals());
    }
  }
  if (reasonerType.equals(""String_Node_Str"")) {
    try {
      reasoner=new uk.ac.manchester.cs.factplusplus.owlapi.Reasoner(manager);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    reasoner=new org.mindswap.pellet.owlapi.Reasoner(manager);
    Logger pelletLogger=Logger.getLogger(""String_Node_Str"");
    pelletLogger.setLevel(Level.WARN);
  }
  try {
    reasoner.loadOntologies(allImports);
    reasoner.classify();
    reasoner.realise();
  }
 catch (  OWLReasonerException e) {
    e.printStackTrace();
  }
  factory=manager.getOWLDataFactory();
  for (  OWLClass owlClass : classes)   atomicConcepts.add(new NamedClass(owlClass.getURI().toString()));
  for (  OWLObjectProperty owlProperty : properties)   atomicRoles.add(new ObjectProperty(owlProperty.getURI().toString()));
  for (  OWLIndividual owlIndividual : owlIndividuals)   individuals.add(new Individual(owlIndividual.getURI().toString()));
}"
10254,"public static void main(String[] args){
  JUnitCore.main(""String_Node_Str"",""String_Node_Str"");
}","public static void main(String[] args){
  SimpleLayout layout=new SimpleLayout();
  ConsoleAppender consoleAppender=new ConsoleAppender(layout);
  Logger logger=Logger.getRootLogger();
  logger.removeAllAppenders();
  logger.addAppender(consoleAppender);
  logger.setLevel(Level.INFO);
  JUnitCore.main(""String_Node_Str"",""String_Node_Str"");
}"
10255,"private KB getSimpleKnowledgeBase(){
  String kb=""String_Node_Str"";
  kb+=""String_Node_Str"";
  kb+=""String_Node_Str"";
  KB kbObject=null;
  try {
    kbObject=KBParser.parseKBFile(kb);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ParseException e) {
    e.printStackTrace();
  }
  return kbObject;
}","private KB getSimpleKnowledgeBase(){
  String kb=""String_Node_Str"";
  kb+=""String_Node_Str"";
  kb+=""String_Node_Str"";
  kb+=""String_Node_Str"";
  kb+=""String_Node_Str"";
  kb+=""String_Node_Str"";
  kb+=""String_Node_Str"";
  kb+=""String_Node_Str"";
  kb+=""String_Node_Str"";
  KB kbObject=null;
  try {
    kbObject=KBParser.parseKBFile(kb);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ParseException e) {
    e.printStackTrace();
  }
  return kbObject;
}"
10256,"@Test public void instanceCheckTest(){
  try {
    ComponentManager cm=ComponentManager.getInstance();
    KB kb=getSimpleKnowledgeBase();
    KnowledgeSource ks=new KBFile(kb);
    ks.init();
    ReasonerComponent reasoner=cm.reasoner(OWLAPIReasoner.class,ks);
    reasoner.init();
    Description d;
    d=KBParser.parseConcept(""String_Node_Str"");
    Individual i=new Individual(""String_Node_Str"");
    boolean result=reasoner.instanceCheck(d,i);
    assertFalse(result);
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
catch (  ReasoningMethodUnsupportedException e) {
    e.printStackTrace();
  }
catch (  ComponentInitException e) {
    e.printStackTrace();
  }
}","/** 
 * Performs an instance checks on all reasoner components to verify that they all return the correct result.
 */
@Test public void instanceCheckTest(){
  try {
    ComponentManager cm=ComponentManager.getInstance();
    KB kb=getSimpleKnowledgeBase();
    KnowledgeSource ks=new KBFile(kb);
    ks.init();
    Description d;
    d=KBParser.parseConcept(""String_Node_Str"");
    Individual i=new Individual(KBParser.getInternalURI(""String_Node_Str""));
    List<Class<? extends ReasonerComponent>> reasonerClasses=cm.getReasonerComponents();
    for (    Class<? extends ReasonerComponent> reasonerClass : reasonerClasses) {
      ReasonerComponent reasoner=cm.reasoner(reasonerClass,ks);
      reasoner.init();
      boolean result=reasoner.instanceCheck(d,i);
      logger.debug(""String_Node_Str"" + reasoner + ""String_Node_Str""+ d+ ""String_Node_Str""+ i+ ""String_Node_Str""+ result);
      assertTrue(result);
    }
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
catch (  ReasoningMethodUnsupportedException e) {
    e.printStackTrace();
  }
catch (  ComponentInitException e) {
    e.printStackTrace();
  }
}"
10257,"/** 
 * It is necessary for init KnowledgeSource.
 * @return true, if url was set otherwise false
 */
public Boolean isSetURL(){
  if (cm.getConfigOptionValue(source,""String_Node_Str"") != null)   return true;
 else   return false;
}","/** 
 * It is necessary for init KnowledgeSource.
 * @return true, if url was set otherwise false
 */
public Boolean isSetURL(){
  if (cm.getConfigOptionValue(source,""String_Node_Str"") != null || cm.getConfigOptionValue(source,""String_Node_Str"") != null)   return true;
 else   return false;
}"
10258,"/** 
 * after this, you can change widgets
 */
public void setSource(){
  System.out.println(""String_Node_Str"" + config.getComponentManager());
  System.out.println(""String_Node_Str"" + sources.get(choosenClassIndex));
  config.setKnowledgeSource(config.getComponentManager().knowledgeSource(sources.get(choosenClassIndex)));
  System.out.println(""String_Node_Str"" + config.getKnowledgeSource());
  System.out.println(""String_Node_Str"" + config.getComponentManager().getComponentName(sources.get(0)));
  config.setInitKnowledgeSource(false);
  updateAll();
}","/** 
 * after this, you can change widgets
 */
public void setSource(){
  config.setKnowledgeSource(config.getComponentManager().knowledgeSource(sources.get(choosenClassIndex)));
  config.setInitKnowledgeSource(false);
  updateAll();
}"
10259,"/** 
 * after this, next tab can be used
 */
public void init(){
  System.out.println(""String_Node_Str"" + config.getKnowledgeSource());
  System.out.println(""String_Node_Str"" + config.isSetURL());
  if (config.getKnowledgeSource() != null && config.isSetURL()) {
    try {
      config.getKnowledgeSource().init();
      config.setInitKnowledgeSource(true);
      System.out.println(""String_Node_Str"");
      startGUI.updateTabColors();
    }
 catch (    ComponentInitException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * after this, next tab can be used
 */
public void init(){
  if (config.getKnowledgeSource() != null && config.isSetURL()) {
    try {
      config.getKnowledgeSource().init();
      config.setInitKnowledgeSource(true);
      System.out.println(""String_Node_Str"");
      startGUI.updateTabColors();
    }
 catch (    ComponentInitException e) {
      e.printStackTrace();
    }
  }
}"
10260,"KnowledgeSourcePanel(final Config config,StartGUI startGUI){
  super(new BorderLayout());
  this.config=config;
  this.startGUI=startGUI;
  sources=config.getComponentManager().getKnowledgeSources();
  System.out.println(""String_Node_Str"" + sources);
  setButton=new JButton(""String_Node_Str"");
  setButton.addActionListener(this);
  initButton=new JButton(""String_Node_Str"");
  initButton.addActionListener(this);
  initButton.setEnabled(true);
  for (int i=0; i < sources.size(); i++) {
    cb.addItem(config.getComponentManager().getComponentName(sources.get(i)));
  }
  cb.addActionListener(this);
  choosePanel.add(cb);
  choosePanel.add(setButton);
  choosenClassIndex=cb.getSelectedIndex();
  optionPanel=new OptionPanel(config,config.getKnowledgeSource(),config.getOldKnowledgeSource(),sources.get(choosenClassIndex));
  initPanel.add(initButton);
  add(choosePanel,BorderLayout.PAGE_START);
  add(optionPanel,BorderLayout.CENTER);
  add(initPanel,BorderLayout.PAGE_END);
  updateAll();
}","KnowledgeSourcePanel(final Config config,StartGUI startGUI){
  super(new BorderLayout());
  this.config=config;
  this.startGUI=startGUI;
  sources=config.getComponentManager().getKnowledgeSources();
  setButton=new JButton(""String_Node_Str"");
  setButton.addActionListener(this);
  initButton=new JButton(""String_Node_Str"");
  initButton.addActionListener(this);
  initButton.setEnabled(true);
  for (int i=0; i < sources.size(); i++) {
    cb.addItem(config.getComponentManager().getComponentName(sources.get(i)));
  }
  cb.addActionListener(this);
  choosePanel.add(cb);
  choosePanel.add(setButton);
  choosenClassIndex=cb.getSelectedIndex();
  optionPanel=new OptionPanel(config,config.getKnowledgeSource(),config.getOldKnowledgeSource(),sources.get(choosenClassIndex));
  initPanel.add(initButton);
  add(choosePanel,BorderLayout.PAGE_START);
  add(optionPanel,BorderLayout.CENTER);
  add(initPanel,BorderLayout.PAGE_END);
  setSource();
  updateAll();
}"
10261,"/** 
 * Takes a SPARQL query (which has not been evaluated yet) as argument and returns a result set. The result set is taken from this cache if the query is stored here. Otherwise the query is send and its result added to the cache and returned. Convenience method.
 * @param query The SPARQL query.
 * @return Jena result set.
 */
public ResultSet executeSparqlQuery(SparqlQuery query){
  String result=getCacheEntry(query.getQueryString());
  if (result != null) {
    return SparqlQuery.JSONtoResultSet(result);
  }
 else {
    query.send();
    ResultSet rs=query.getResultSet();
    if (rs != null) {
      String json=SparqlQuery.getAsJSON(rs);
      addToCache(query.getQueryString(),json);
      return SparqlQuery.JSONtoResultSet(json);
    }
 else     return rs;
  }
}","/** 
 * Takes a SPARQL query (which has not been evaluated yet) as argument and returns a result set. The result set is taken from this cache if the query is stored here. Otherwise the query is send and its result added to the cache and returned. Convenience method.
 * @param query The SPARQL query.
 * @return Jena result set.
 */
public ResultSet executeSparqlQuery(SparqlQuery query){
  String result=getCacheEntry(query.getQueryString());
  if (result != null) {
    return SparqlQuery.JSONtoResultSet(result);
  }
 else {
    ResultSet rs=query.send();
    if (rs != null) {
      String json=SparqlQuery.getAsJSON(rs);
      addToCache(query.getQueryString(),json);
      return SparqlQuery.JSONtoResultSet(json);
    }
 else     return rs;
  }
}"
10262,"/** 
 * Initialise all components based on conf file.
 * @param file Conf file to read. 
 */
public Start(File file){
  String baseDir=file.getParentFile().getPath();
  System.out.print(""String_Node_Str"");
  long cmStartTime=System.nanoTime();
  ComponentManager cm=ComponentManager.getInstance();
  long cmTime=System.nanoTime() - cmStartTime;
  System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(cmTime) + ""String_Node_Str"");
  Map<Class<? extends Component>,String> componentPrefixMapping=createComponentPrefixMapping();
  ConfParser parser=ConfParser.parseFile(file);
  Set<KnowledgeSource> sources=new HashSet<KnowledgeSource>();
  Map<URL,Class<? extends KnowledgeSource>> importedFiles=getImportedFiles(parser,baseDir);
  for (  Map.Entry<URL,Class<? extends KnowledgeSource>> entry : importedFiles.entrySet()) {
    KnowledgeSource ks=cm.knowledgeSource(entry.getValue());
    cm.applyConfigEntry(ks,""String_Node_Str"",entry.getKey().toString());
    sources.add(ks);
    configureComponent(cm,ks,componentPrefixMapping,parser);
    initComponent(cm,ks);
  }
  ConfFileOption reasonerOption=parser.getConfOptionsByName(""String_Node_Str"");
  Class<? extends ReasonerComponent> reasonerClass=null;
  if (reasonerOption == null || reasonerOption.getStringValue().equals(""String_Node_Str""))   reasonerClass=DIGReasoner.class;
 else   if (reasonerOption.getStringValue().equals(""String_Node_Str""))   reasonerClass=OWLAPIReasoner.class;
 else   if (reasonerOption.getStringValue().equals(""String_Node_Str""))   reasonerClass=FastRetrievalReasoner.class;
 else {
    handleError(""String_Node_Str"" + reasonerOption.getStringValue() + ""String_Node_Str"");
  }
  ReasonerComponent reasoner=cm.reasoner(reasonerClass,sources);
  configureComponent(cm,reasoner,componentPrefixMapping,parser);
  initComponent(cm,reasoner);
  rs=cm.reasoningService(reasoner);
  ConfFileOption problemOption=parser.getConfOptionsByName(""String_Node_Str"");
  Class<? extends LearningProblem> lpClass=null;
  if (problemOption == null || problemOption.getStringValue().equals(""String_Node_Str""))   lpClass=PosNegDefinitionLP.class;
 else   if (problemOption.getStringValue().equals(""String_Node_Str""))   lpClass=PosNegInclusionLP.class;
 else   if (problemOption.getStringValue().equals(""String_Node_Str""))   lpClass=PosOnlyDefinitionLP.class;
 else   handleError(""String_Node_Str"" + problemOption.getValue() + ""String_Node_Str"");
  lp=cm.learningProblem(lpClass,rs);
  SortedSet<String> posExamples=parser.getPositiveExamples();
  SortedSet<String> negExamples=parser.getNegativeExamples();
  cm.applyConfigEntry(lp,""String_Node_Str"",posExamples);
  if (lpClass != PosOnlyDefinitionLP.class)   cm.applyConfigEntry(lp,""String_Node_Str"",negExamples);
  configureComponent(cm,lp,componentPrefixMapping,parser);
  initComponent(cm,lp);
  ConfFileOption algorithmOption=parser.getConfOptionsByName(""String_Node_Str"");
  Class<? extends LearningAlgorithm> laClass=null;
  if (algorithmOption == null || algorithmOption.getStringValue().equals(""String_Node_Str""))   laClass=ROLearner.class;
 else   if (algorithmOption.getStringValue().equals(""String_Node_Str""))   laClass=ExampleBasedROLComponent.class;
 else   if (algorithmOption.getStringValue().equals(""String_Node_Str""))   laClass=GP.class;
 else   if (algorithmOption.getStringValue().equals(""String_Node_Str""))   laClass=BruteForceLearner.class;
 else   if (algorithmOption.getStringValue().equals(""String_Node_Str""))   laClass=RandomGuesser.class;
 else   handleError(""String_Node_Str"" + algorithmOption);
  la=cm.learningAlgorithm(laClass,lp,rs);
  configureComponent(cm,la,componentPrefixMapping,parser);
  initComponent(cm,la);
  performExports(parser,baseDir,sources,rs);
  boolean oneLineExampleInfo=true;
  int maxExampleStringLength=Math.max(posExamples.toString().length(),negExamples.toString().length());
  if (maxExampleStringLength > 100)   oneLineExampleInfo=false;
  if (oneLineExampleInfo) {
    System.out.println(""String_Node_Str"" + posExamples.size() + ""String_Node_Str""+ posExamples);
    System.out.println(""String_Node_Str"" + negExamples.size() + ""String_Node_Str""+ negExamples);
  }
 else {
    System.out.println(""String_Node_Str"" + posExamples.size() + ""String_Node_Str"");
    for (    String ex : posExamples)     System.out.println(""String_Node_Str"" + ex);
    System.out.println(""String_Node_Str"" + negExamples.size() + ""String_Node_Str"");
    for (    String ex : negExamples)     System.out.println(""String_Node_Str"" + ex);
  }
  processCLIOptions(cm,parser,rs);
}","/** 
 * Initialise all components based on conf file.
 * @param file Conf file to read. 
 */
public Start(File file){
  String baseDir=file.getParentFile().getPath();
  String message=""String_Node_Str"";
  long cmStartTime=System.nanoTime();
  ComponentManager cm=ComponentManager.getInstance();
  long cmTime=System.nanoTime() - cmStartTime;
  message+=""String_Node_Str"" + Helper.prettyPrintNanoSeconds(cmTime) + ""String_Node_Str"";
  logger.info(message);
  Map<Class<? extends Component>,String> componentPrefixMapping=createComponentPrefixMapping();
  ConfParser parser=ConfParser.parseFile(file);
  Set<KnowledgeSource> sources=new HashSet<KnowledgeSource>();
  Map<URL,Class<? extends KnowledgeSource>> importedFiles=getImportedFiles(parser,baseDir);
  for (  Map.Entry<URL,Class<? extends KnowledgeSource>> entry : importedFiles.entrySet()) {
    KnowledgeSource ks=cm.knowledgeSource(entry.getValue());
    cm.applyConfigEntry(ks,""String_Node_Str"",entry.getKey().toString());
    sources.add(ks);
    configureComponent(cm,ks,componentPrefixMapping,parser);
    initComponent(cm,ks);
  }
  ConfFileOption reasonerOption=parser.getConfOptionsByName(""String_Node_Str"");
  Class<? extends ReasonerComponent> reasonerClass=null;
  if (reasonerOption == null || reasonerOption.getStringValue().equals(""String_Node_Str""))   reasonerClass=DIGReasoner.class;
 else   if (reasonerOption.getStringValue().equals(""String_Node_Str""))   reasonerClass=OWLAPIReasoner.class;
 else   if (reasonerOption.getStringValue().equals(""String_Node_Str""))   reasonerClass=FastRetrievalReasoner.class;
 else {
    handleError(""String_Node_Str"" + reasonerOption.getStringValue() + ""String_Node_Str"");
  }
  ReasonerComponent reasoner=cm.reasoner(reasonerClass,sources);
  configureComponent(cm,reasoner,componentPrefixMapping,parser);
  initComponent(cm,reasoner);
  rs=cm.reasoningService(reasoner);
  ConfFileOption problemOption=parser.getConfOptionsByName(""String_Node_Str"");
  Class<? extends LearningProblem> lpClass=null;
  if (problemOption == null || problemOption.getStringValue().equals(""String_Node_Str""))   lpClass=PosNegDefinitionLP.class;
 else   if (problemOption.getStringValue().equals(""String_Node_Str""))   lpClass=PosNegInclusionLP.class;
 else   if (problemOption.getStringValue().equals(""String_Node_Str""))   lpClass=PosOnlyDefinitionLP.class;
 else   handleError(""String_Node_Str"" + problemOption.getValue() + ""String_Node_Str"");
  lp=cm.learningProblem(lpClass,rs);
  SortedSet<String> posExamples=parser.getPositiveExamples();
  SortedSet<String> negExamples=parser.getNegativeExamples();
  cm.applyConfigEntry(lp,""String_Node_Str"",posExamples);
  if (lpClass != PosOnlyDefinitionLP.class)   cm.applyConfigEntry(lp,""String_Node_Str"",negExamples);
  configureComponent(cm,lp,componentPrefixMapping,parser);
  initComponent(cm,lp);
  ConfFileOption algorithmOption=parser.getConfOptionsByName(""String_Node_Str"");
  Class<? extends LearningAlgorithm> laClass=null;
  if (algorithmOption == null || algorithmOption.getStringValue().equals(""String_Node_Str""))   laClass=ROLearner.class;
 else   if (algorithmOption.getStringValue().equals(""String_Node_Str""))   laClass=ExampleBasedROLComponent.class;
 else   if (algorithmOption.getStringValue().equals(""String_Node_Str""))   laClass=GP.class;
 else   if (algorithmOption.getStringValue().equals(""String_Node_Str""))   laClass=BruteForceLearner.class;
 else   if (algorithmOption.getStringValue().equals(""String_Node_Str""))   laClass=RandomGuesser.class;
 else   handleError(""String_Node_Str"" + algorithmOption);
  la=cm.learningAlgorithm(laClass,lp,rs);
  configureComponent(cm,la,componentPrefixMapping,parser);
  initComponent(cm,la);
  performExports(parser,baseDir,sources,rs);
  boolean oneLineExampleInfo=true;
  int maxExampleStringLength=Math.max(posExamples.toString().length(),negExamples.toString().length());
  if (maxExampleStringLength > 100)   oneLineExampleInfo=false;
  if (oneLineExampleInfo) {
    System.out.println(""String_Node_Str"" + posExamples.size() + ""String_Node_Str""+ posExamples);
    System.out.println(""String_Node_Str"" + negExamples.size() + ""String_Node_Str""+ negExamples);
  }
 else {
    System.out.println(""String_Node_Str"" + posExamples.size() + ""String_Node_Str"");
    for (    String ex : posExamples)     System.out.println(""String_Node_Str"" + ex);
    System.out.println(""String_Node_Str"" + negExamples.size() + ""String_Node_Str"");
    for (    String ex : negExamples)     System.out.println(""String_Node_Str"" + ex);
  }
  processCLIOptions(cm,parser,rs);
}"
10263,"private static void applyConfFileOption(ComponentManager cm,Component component,ConfFileOption option){
  String optionName=option.getSubOption();
  ConfigOption<?> configOption=cm.getConfigOption(component.getClass(),optionName);
  if (configOption != null) {
    try {
      if (configOption instanceof StringConfigOption && option.isStringOption()) {
        ConfigEntry<String> entry=new ConfigEntry<String>((StringConfigOption)configOption,option.getStringValue());
        cm.applyConfigEntry(component,entry);
      }
 else       if (configOption instanceof IntegerConfigOption && option.isIntegerOption()) {
        ConfigEntry<Integer> entry=new ConfigEntry<Integer>((IntegerConfigOption)configOption,option.getIntValue());
        cm.applyConfigEntry(component,entry);
      }
 else       if (configOption instanceof DoubleConfigOption && (option.isIntegerOption() || option.isDoubleOption())) {
        double value;
        if (option.isIntegerOption())         value=option.getIntValue();
 else         value=option.getDoubleValue();
        ConfigEntry<Double> entry=new ConfigEntry<Double>((DoubleConfigOption)configOption,value);
        cm.applyConfigEntry(component,entry);
      }
 else       if (configOption instanceof BooleanConfigOption && option.isStringOption()) {
        ConfigEntry<Boolean> entry=new ConfigEntry<Boolean>((BooleanConfigOption)configOption,Datastructures.strToBool(option.getStringValue()));
        cm.applyConfigEntry(component,entry);
      }
 else       if (configOption instanceof StringSetConfigOption && option.isSetOption()) {
        ConfigEntry<Set<String>> entry=new ConfigEntry<Set<String>>((StringSetConfigOption)configOption,option.getSetValues());
        cm.applyConfigEntry(component,entry);
      }
 else       if (configOption instanceof StringTupleListConfigOption && option.isListOption()) {
        ConfigEntry<List<StringTuple>> entry=new ConfigEntry<List<StringTuple>>((StringTupleListConfigOption)configOption,option.getListTuples());
        cm.applyConfigEntry(component,entry);
      }
 else {
        handleError(""String_Node_Str"" + option + ""String_Node_Str"");
      }
    }
 catch (    InvalidConfigOptionValueException e) {
      System.exit(0);
    }
  }
 else   handleError(""String_Node_Str"" + option + ""String_Node_Str"");
}","private static void applyConfFileOption(ComponentManager cm,Component component,ConfFileOption option){
  String optionName=option.getSubOption();
  ConfigOption<?> configOption=cm.getConfigOption(component.getClass(),optionName);
  if (configOption != null) {
    try {
      if (configOption instanceof StringConfigOption && option.isStringOption()) {
        ConfigEntry<String> entry=new ConfigEntry<String>((StringConfigOption)configOption,option.getStringValue());
        cm.applyConfigEntry(component,entry);
      }
 else       if (configOption instanceof IntegerConfigOption && option.isIntegerOption()) {
        ConfigEntry<Integer> entry=new ConfigEntry<Integer>((IntegerConfigOption)configOption,option.getIntValue());
        cm.applyConfigEntry(component,entry);
      }
 else       if (configOption instanceof DoubleConfigOption && (option.isIntegerOption() || option.isDoubleOption())) {
        double value;
        if (option.isIntegerOption())         value=option.getIntValue();
 else         value=option.getDoubleValue();
        ConfigEntry<Double> entry=new ConfigEntry<Double>((DoubleConfigOption)configOption,value);
        cm.applyConfigEntry(component,entry);
      }
 else       if (configOption instanceof BooleanConfigOption && option.isStringOption()) {
        ConfigEntry<Boolean> entry=new ConfigEntry<Boolean>((BooleanConfigOption)configOption,Datastructures.strToBool(option.getStringValue()));
        cm.applyConfigEntry(component,entry);
      }
 else       if (configOption instanceof StringSetConfigOption && option.isSetOption()) {
        ConfigEntry<Set<String>> entry=new ConfigEntry<Set<String>>((StringSetConfigOption)configOption,option.getSetValues());
        cm.applyConfigEntry(component,entry);
      }
 else       if (configOption instanceof StringTupleListConfigOption && option.isListOption()) {
        ConfigEntry<List<StringTuple>> entry=new ConfigEntry<List<StringTuple>>((StringTupleListConfigOption)configOption,option.getListTuples());
        cm.applyConfigEntry(component,entry);
      }
 else {
        handleError(""String_Node_Str"" + option.getFullName() + ""String_Node_Str""+ option.getValue()+ ""String_Node_Str""+ configOption.getClass().getName()+ ""String_Node_Str"");
      }
    }
 catch (    InvalidConfigOptionValueException e) {
      System.exit(0);
    }
  }
 else   handleError(""String_Node_Str"" + option + ""String_Node_Str"");
}"
10264,"private static void handleError(String message){
  System.err.println(message);
  System.exit(0);
}","private static void handleError(String message){
  logger.error(message);
  System.exit(0);
}"
10265,"/** 
 * set true if you run LearningAlgorithm.init
 */
protected void setLearningAlgorithm(Boolean is){
  isInit[3]=is;
}","protected void setLearningAlgorithm(LearningAlgorithm input){
  la=input;
}"
10266,"/** 
 * after this, next tab can be used
 */
public void init(){
  if (config.getLearningProblem() != null) {
    config.getLearningAlgorithm().init();
    config.setLearningAlgorithm(true);
    System.out.println(""String_Node_Str"");
    startGUI.updateTabColors();
  }
}","/** 
 * after this, next tab can be used
 */
public void init(){
  if (config.getLearningProblem() != null) {
    config.getLearningAlgorithm().init();
    config.setInitLearningAlgorithm(true);
    System.out.println(""String_Node_Str"");
    startGUI.updateTabColors();
  }
}"
10267,"public void actionPerformed(ActionEvent e){
  if (choosenClassIndex != cb.getSelectedIndex()) {
    choosenClassIndex=cb.getSelectedIndex();
    config.setInitLearningProblem(false);
    setLearningAlgorithm();
  }
  if (e.getSource() == autoInitButton)   setLearningAlgorithm();
  if (e.getSource() == initButton)   init();
}","public void actionPerformed(ActionEvent e){
  if (choosenClassIndex != cb.getSelectedIndex()) {
    choosenClassIndex=cb.getSelectedIndex();
    config.setInitLearningAlgorithm(false);
    setLearningAlgorithm();
  }
  if (e.getSource() == autoInitButton)   setLearningAlgorithm();
  if (e.getSource() == initButton)   init();
}"
10268,"@Override protected void showThingToChange(){
  if (component != null) {
    if (configOption.getClass().toString().contains(""String_Node_Str"")) {
      if (configOption.getDefaultValue() != null) {
        value=(Boolean)configOption.getDefaultValue();
      }
 else {
        value=false;
      }
      if (value == false)       cb.setSelectedIndex(0);
 else       cb.setSelectedIndex(1);
      cb.addActionListener(this);
      widgetPanel.add(cb);
    }
 else {
      JLabel notImplementedLabel=new JLabel(""String_Node_Str"");
      notImplementedLabel.setForeground(Color.RED);
      widgetPanel.add(notImplementedLabel);
    }
  }
 else {
    JLabel noConfigOptionLabel=new JLabel(""String_Node_Str"");
    noConfigOptionLabel.setForeground(Color.MAGENTA);
    widgetPanel.add(noConfigOptionLabel);
  }
}","@Override protected void showThingToChange(){
  if (component != null) {
    if (configOption.getClass().toString().contains(""String_Node_Str"")) {
      if (configOption.getDefaultValue() != null) {
        value=(Boolean)configOption.getDefaultValue();
        System.out.println(""String_Node_Str"" + configOption.getDefaultValue());
      }
 else {
        value=false;
      }
      if (value == false)       cb.setSelectedIndex(0);
 else       cb.setSelectedIndex(1);
      cb.addActionListener(this);
      widgetPanel.add(cb);
    }
 else {
      JLabel notImplementedLabel=new JLabel(""String_Node_Str"");
      notImplementedLabel.setForeground(Color.RED);
      widgetPanel.add(notImplementedLabel);
    }
  }
 else {
    JLabel noConfigOptionLabel=new JLabel(""String_Node_Str"");
    noConfigOptionLabel.setForeground(Color.MAGENTA);
    widgetPanel.add(noConfigOptionLabel);
  }
}"
10269,"@Override protected void setEntry(){
  BooleanConfigOption specialOption;
  if (cb.getSelectedIndex() == 0)   value=true;
 else   value=false;
  specialOption=(BooleanConfigOption)config.getComponentManager().getConfigOption(componentOption,configOption.getName());
  try {
    ConfigEntry<Boolean> specialEntry=new ConfigEntry<Boolean>(specialOption,value);
    config.getComponentManager().applyConfigEntry(component,specialEntry);
    System.out.println(""String_Node_Str"" + configOption.getName() + ""String_Node_Str""+ value);
  }
 catch (  InvalidConfigOptionValueException s) {
    s.printStackTrace();
  }
}","@Override protected void setEntry(){
  BooleanConfigOption specialOption;
  if (cb.getSelectedIndex() == 0)   value=false;
 else   value=true;
  specialOption=(BooleanConfigOption)config.getComponentManager().getConfigOption(componentOption,configOption.getName());
  try {
    ConfigEntry<Boolean> specialEntry=new ConfigEntry<Boolean>(specialOption,value);
    config.getComponentManager().applyConfigEntry(component,specialEntry);
    System.out.println(""String_Node_Str"" + configOption.getName() + ""String_Node_Str""+ value);
  }
 catch (  InvalidConfigOptionValueException s) {
    s.printStackTrace();
  }
}"
10270,"protected void setLearningAlgorithm(LearningAlgorithm input){
  la=input;
}","protected void setLearningAlgorithm(Boolean is){
  isInit[3]=is;
}"
10271,"public void init(){
  config.getKnowledgeSource().init();
  System.out.println(""String_Node_Str"" + sources.get(choosenClassIndex) + ""String_Node_Str""+ config.getURI()+ ""String_Node_Str"");
}","public void init(){
  config.getKnowledgeSource().init();
  config.setInitKnowledgeSource(true);
  System.out.println(""String_Node_Str"" + sources.get(choosenClassIndex) + ""String_Node_Str""+ config.getURI()+ ""String_Node_Str"");
}"
10272,"LearningAlgorithmPanel(Config config){
  super(new BorderLayout());
  this.config=config;
  initButton=new JButton(""String_Node_Str"");
  initButton.addActionListener(this);
  initPanel.add(initButton);
  choosePanel.add(cb);
  learners=config.getComponentManager().getLearningAlgorithms();
  for (int i=0; i < learners.size(); i++) {
    cb.addItem(config.getComponentManager().getComponentName(learners.get(i)));
  }
  cb.addActionListener(this);
  optionPanel=new OptionPanel(config,config.getLearningAlgorithm(),learners.get(choosenClassIndex));
  add(choosePanel,BorderLayout.PAGE_START);
  add(initPanel,BorderLayout.CENTER);
  add(optionPanel,BorderLayout.PAGE_END);
}","LearningAlgorithmPanel(Config config){
  super(new BorderLayout());
  this.config=config;
  learners=config.getComponentManager().getLearningAlgorithms();
  initButton=new JButton(""String_Node_Str"");
  initButton.addActionListener(this);
  initPanel.add(initButton);
  getInstancesButton=new JButton(""String_Node_Str"");
  getInstancesButton.addActionListener(this);
  for (int i=0; i < learners.size(); i++) {
    cb.addItem(config.getComponentManager().getComponentName(learners.get(i)));
  }
  choosePanel.add(cb);
  choosePanel.add(getInstancesButton);
  cb.addActionListener(this);
  optionPanel=new OptionPanel(config,config.getLearningAlgorithm(),learners.get(choosenClassIndex));
  add(choosePanel,BorderLayout.PAGE_START);
  add(optionPanel,BorderLayout.CENTER);
  add(initPanel,BorderLayout.PAGE_END);
}"
10273,"public void actionPerformed(ActionEvent e){
  choosenClassIndex=cb.getSelectedIndex();
  if (e.getSource() == initButton && config.getLearningProblem() != null) {
    config.setLearningAlgorithm(config.getComponentManager().learningAlgorithm(learners.get(choosenClassIndex),config.getLearningProblem(),config.getReasoningService()));
    System.out.println(""String_Node_Str"");
    config.getLearningAlgorithm().init();
    updateOptionPanel();
  }
}","public void actionPerformed(ActionEvent e){
  choosenClassIndex=cb.getSelectedIndex();
  if (e.getSource() == getInstancesButton)   getInstances();
  if (e.getSource() == initButton && config.getURI() != null)   init();
}"
10274,"public void getInstances(){
  config.setReasoner(config.getComponentManager().reasoner(reasoners.get(choosenClassIndex),config.getKnowledgeSource()));
  updateOptionPanel();
}","public void getInstances(){
  if (config.isInitKnowledgeSource()) {
    config.setReasoner(config.getComponentManager().reasoner(reasoners.get(choosenClassIndex),config.getKnowledgeSource()));
    updateOptionPanel();
  }
}"
10275,"public void init(){
  config.getReasoner().init();
  System.out.println(""String_Node_Str"");
  config.setReasoningService(config.getComponentManager().reasoningService(config.getReasoner()));
  System.out.println(""String_Node_Str"");
}","public void init(){
  config.getReasoner().init();
  System.out.println(""String_Node_Str"");
  config.setReasoningService(config.getComponentManager().reasoningService(config.getReasoner()));
  System.out.println(""String_Node_Str"");
  config.setInitReasoner(true);
}"
10276,"@WebMethod public String[] getCurrentlyBestConcepts(int id,int nrOfConcepts) throws ClientNotKnownException {
  ClientState state=getState(id);
  List<Concept> bestConcepts=state.getLearningAlgorithm().getBestSolutions(nrOfConcepts);
  return bestConcepts.toArray(new String[bestConcepts.size()]);
}","@WebMethod public String[] getCurrentlyBestConcepts(int id,int nrOfConcepts) throws ClientNotKnownException {
  ClientState state=getState(id);
  List<Concept> bestConcepts=state.getLearningAlgorithm().getBestSolutions(nrOfConcepts);
  List<String> conc=new LinkedList<String>();
  Iterator<Concept> iter=bestConcepts.iterator();
  while (iter.hasNext())   conc.add(iter.next().toString());
  return conc.toArray(new String[conc.size()]);
}"
10277,"/** 
 * Takes a SPARQL query (which has not been evaluated yet) as argument and returns a result set. The result set is taken from this cache if the query is stored here. Otherwise the query is send and its result added to the cache and returned. Convenience method.
 * @param query The SPARQL query.
 * @return Jena result set.
 */
public ResultSet executeSparqlQuery(SparqlQuery query){
  String result=getCacheEntry(query.getQueryString());
  if (result != null) {
    return SparqlQuery.JSONtoResultSet(result);
  }
 else {
    query.send();
    ResultSet rs=query.getResultSet();
    if (rs != null) {
      String json=SparqlQuery.getAsJSON(rs);
      addToCache(query.getQueryString(),json);
    }
    return rs;
  }
}","/** 
 * Takes a SPARQL query (which has not been evaluated yet) as argument and returns a result set. The result set is taken from this cache if the query is stored here. Otherwise the query is send and its result added to the cache and returned. Convenience method.
 * @param query The SPARQL query.
 * @return Jena result set.
 */
public ResultSet executeSparqlQuery(SparqlQuery query){
  String result=getCacheEntry(query.getQueryString());
  if (result != null) {
    return SparqlQuery.JSONtoResultSet(result);
  }
 else {
    query.send();
    ResultSet rs=query.getResultSet();
    if (rs != null) {
      String json=SparqlQuery.getAsJSON(rs);
      addToCache(query.getQueryString(),json);
      return SparqlQuery.JSONtoResultSet(json);
    }
 else     return rs;
  }
}"
10278,"/** 
 * sends a query and returns JSON
 * @return a String representation of the Resultset as JSON
 */
public String getAsJSON(){
  if (rs == null)   this.send();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ResultSetFormatter.outputAsJSON(baos,rs);
  return baos.toString();
}","/** 
 * sends a query and returns JSON
 * @return a String representation of the Resultset as JSON
 */
public String getAsJSON(){
  if (rs == null)   this.send();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ResultSetFormatter.outputAsJSON(baos,rs);
  rs=JSONtoResultSet(baos.toString());
  return baos.toString();
}"
10279,"/** 
 * TODO can further be optimized
 * @return a jena ResultSet
 */
public ResultSet getAsResultSet(){
  return SparqlQuery.JSONtoResultSet(getAsJSON());
}","public ResultSet getAsResultSet(){
  return this.sparqlQuery.send();
}"
10280,"/** 
 * TODO define the format
 * @return
 */
@SuppressWarnings({""String_Node_Str""}) public String[][] getAsStringArray(){
  System.out.println(""String_Node_Str"");
  ResultSet rs=send();
  System.out.println(""String_Node_Str"");
  List<ResultBinding> l=ResultSetFormatter.toList(rs);
  List<String> resultVars=rs.getResultVars();
  String[][] array=new String[l.size()][resultVars.size()];
  Iterator<String> iter=resultVars.iterator();
  int i=0, j=0;
  for (  ResultBinding resultBinding : l) {
    while (iter.hasNext()) {
      String varName=(String)iter.next();
      array[i][j]=resultBinding.get(varName).toString();
      j++;
    }
    iter=resultVars.iterator();
    i++;
    j=0;
  }
  System.out.println(""String_Node_Str"");
  return array;
}","/** 
 * TODO define the format
 * @return
 */
@SuppressWarnings({""String_Node_Str""}) public String[][] getAsStringArray(){
  System.out.println(""String_Node_Str"");
  ResultSet rs=send();
  List<ResultBinding> l=ResultSetFormatter.toList(rs);
  List<String> resultVars=rs.getResultVars();
  String[][] array=new String[l.size()][resultVars.size()];
  Iterator<String> iter=resultVars.iterator();
  int i=0, j=0;
  for (  ResultBinding resultBinding : l) {
    while (iter.hasNext()) {
      String varName=(String)iter.next();
      array[i][j]=resultBinding.get(varName).toString();
      j++;
    }
    iter=resultVars.iterator();
    i++;
    j=0;
  }
  System.out.println(""String_Node_Str"");
  return array;
}"
10281,"@WebMethod public String[] getFromSparql(int id,int componentID,String option) throws ClientNotKnownException {
  ClientState state=getState(id);
  Component component=state.getComponent(componentID);
  if (option.equals(""String_Node_Str""))   return ((SparqlEndpoint)component).getSubjects();
 else   if (option.equals(""String_Node_Str""))   return ((SparqlEndpoint)component).getTriples();
 else   if (option.equals(""String_Node_Str""))   return ((SparqlEndpoint)component).getConceptSubjects();
  return new String[0];
}","@WebMethod public String[] getFromSparql(int id,int componentID,String option) throws ClientNotKnownException {
  ClientState state=getState(id);
  Component component=state.getComponent(componentID);
  if (option.equals(""String_Node_Str""))   return ((SparqlKnowledgeSource)component).getSubjects();
 else   if (option.equals(""String_Node_Str""))   return ((SparqlKnowledgeSource)component).getTriples();
 else   if (option.equals(""String_Node_Str""))   return ((SparqlKnowledgeSource)component).getConceptSubjects();
  return new String[0];
}"
10282,"@Override public void run(){
  ((SparqlEndpoint)component).setConceptThread(this);
  ((SparqlEndpoint)component).setConceptThreadRunning(true);
  ((SparqlEndpoint)component).calculateConceptSubjects(concept);
  ((SparqlEndpoint)component).setConceptThreadRunning(false);
}","@Override public void run(){
  ((SparqlKnowledgeSource)component).setConceptThread(this);
  ((SparqlKnowledgeSource)component).setConceptThreadRunning(true);
  ((SparqlKnowledgeSource)component).calculateConceptSubjects(concept);
  ((SparqlKnowledgeSource)component).setConceptThreadRunning(false);
}"
10283,"public DLLearnerWS(){
  knowledgeSourceMapping.put(""String_Node_Str"",OWLFile.class);
  knowledgeSourceMapping.put(""String_Node_Str"",SparqlEndpoint.class);
  reasonerMapping.put(""String_Node_Str"",DIGReasoner.class);
  learningProblemMapping.put(""String_Node_Str"",PosNegDefinitionLP.class);
  learningProblemMapping.put(""String_Node_Str"",PosNegInclusionLP.class);
  learningProblemMapping.put(""String_Node_Str"",PosOnlyDefinitionLP.class);
  learningAlgorithmMapping.put(""String_Node_Str"",ROLearner.class);
  components=Helper.union(knowledgeSourceMapping.keySet(),reasonerMapping.keySet());
  components=Helper.union(components,learningProblemMapping.keySet());
  components=Helper.union(components,learningAlgorithmMapping.keySet());
}","public DLLearnerWS(){
  knowledgeSourceMapping.put(""String_Node_Str"",OWLFile.class);
  knowledgeSourceMapping.put(""String_Node_Str"",SparqlKnowledgeSource.class);
  reasonerMapping.put(""String_Node_Str"",DIGReasoner.class);
  learningProblemMapping.put(""String_Node_Str"",PosNegDefinitionLP.class);
  learningProblemMapping.put(""String_Node_Str"",PosNegInclusionLP.class);
  learningProblemMapping.put(""String_Node_Str"",PosOnlyDefinitionLP.class);
  learningAlgorithmMapping.put(""String_Node_Str"",ROLearner.class);
  components=Helper.union(knowledgeSourceMapping.keySet(),reasonerMapping.keySet());
  components=Helper.union(components,learningProblemMapping.keySet());
  components=Helper.union(components,learningAlgorithmMapping.keySet());
}"
10284,"@WebMethod public void stopSparqlThread(int id,int componentID,String option) throws ClientNotKnownException {
  ClientState state=getState(id);
  Component component=state.getComponent(componentID);
  if (option.equals(""String_Node_Str""))   ((SparqlEndpoint)component).getSubjectThread().stop();
 else   if (option.equals(""String_Node_Str""))   ((SparqlEndpoint)component).getTriplesThread().stop();
 else   if (option.equals(""String_Node_Str""))   ((SparqlEndpoint)component).getConceptThread().stop();
}","@WebMethod public void stopSparqlThread(int id,int componentID,String option) throws ClientNotKnownException {
  ClientState state=getState(id);
  Component component=state.getComponent(componentID);
  if (option.equals(""String_Node_Str""))   ((SparqlKnowledgeSource)component).getSubjectThread().stop();
 else   if (option.equals(""String_Node_Str""))   ((SparqlKnowledgeSource)component).getTriplesThread().stop();
 else   if (option.equals(""String_Node_Str""))   ((SparqlKnowledgeSource)component).getConceptThread().stop();
}"
10285,"@WebMethod public void startThread(int id,int componentID,String[] options) throws ClientNotKnownException {
  final ClientState state=getState(id);
  final Component component=state.getComponent(componentID);
  String method=options[0];
  Thread thread=null;
  if (method.equals(""String_Node_Str"")) {
    final String label=options[1];
    final int limit=Integer.parseInt(options[2]);
    thread=new Thread(){
      @Override public void run(){
        ((SparqlEndpoint)component).setSubjectThread(this);
        ((SparqlEndpoint)component).setSubjectThreadRunning(true);
        ((SparqlEndpoint)component).calculateSubjects(label,limit);
        ((SparqlEndpoint)component).setSubjectThreadRunning(false);
      }
    }
;
  }
 else   if (method.equals(""String_Node_Str"")) {
    final String subject=options[1];
    thread=new Thread(){
      @Override public void run(){
        ((SparqlEndpoint)component).setTriplesThread(this);
        ((SparqlEndpoint)component).setTriplesThreadRunning(true);
        ((SparqlEndpoint)component).calculateTriples(subject);
        ((SparqlEndpoint)component).setTriplesThreadRunning(false);
      }
    }
;
  }
 else   if (method.equals(""String_Node_Str"")) {
    final String concept=options[1];
    thread=new Thread(){
      @Override public void run(){
        ((SparqlEndpoint)component).setConceptThread(this);
        ((SparqlEndpoint)component).setConceptThreadRunning(true);
        ((SparqlEndpoint)component).calculateConceptSubjects(concept);
        ((SparqlEndpoint)component).setConceptThreadRunning(false);
      }
    }
;
  }
  thread.start();
}","@WebMethod public void startThread(int id,int componentID,String[] options) throws ClientNotKnownException {
  final ClientState state=getState(id);
  final Component component=state.getComponent(componentID);
  String method=options[0];
  Thread thread=null;
  if (method.equals(""String_Node_Str"")) {
    final String label=options[1];
    final int limit=Integer.parseInt(options[2]);
    thread=new Thread(){
      @Override public void run(){
        ((SparqlKnowledgeSource)component).setSubjectThread(this);
        ((SparqlKnowledgeSource)component).setSubjectThreadRunning(true);
        ((SparqlKnowledgeSource)component).calculateSubjects(label,limit);
        ((SparqlKnowledgeSource)component).setSubjectThreadRunning(false);
      }
    }
;
  }
 else   if (method.equals(""String_Node_Str"")) {
    final String subject=options[1];
    thread=new Thread(){
      @Override public void run(){
        ((SparqlKnowledgeSource)component).setTriplesThread(this);
        ((SparqlKnowledgeSource)component).setTriplesThreadRunning(true);
        ((SparqlKnowledgeSource)component).calculateTriples(subject);
        ((SparqlKnowledgeSource)component).setTriplesThreadRunning(false);
      }
    }
;
  }
 else   if (method.equals(""String_Node_Str"")) {
    final String concept=options[1];
    thread=new Thread(){
      @Override public void run(){
        ((SparqlKnowledgeSource)component).setConceptThread(this);
        ((SparqlKnowledgeSource)component).setConceptThreadRunning(true);
        ((SparqlKnowledgeSource)component).calculateConceptSubjects(concept);
        ((SparqlKnowledgeSource)component).setConceptThreadRunning(false);
      }
    }
;
  }
  thread.start();
}"
10286,"@WebMethod public boolean isThreadRunning(int id,int componentID,String option) throws ClientNotKnownException {
  ClientState state=getState(id);
  Component component=state.getComponent(componentID);
  if (option.equals(""String_Node_Str""))   return ((SparqlEndpoint)component).subjectThreadIsRunning();
 else   if (option.equals(""String_Node_Str""))   return ((SparqlEndpoint)component).triplesThreadIsRunning();
 else   if (option.equals(""String_Node_Str""))   return ((SparqlEndpoint)component).conceptThreadIsRunning();
  return true;
}","@WebMethod public boolean isThreadRunning(int id,int componentID,String option) throws ClientNotKnownException {
  ClientState state=getState(id);
  Component component=state.getComponent(componentID);
  if (option.equals(""String_Node_Str""))   return ((SparqlKnowledgeSource)component).subjectThreadIsRunning();
 else   if (option.equals(""String_Node_Str""))   return ((SparqlKnowledgeSource)component).triplesThreadIsRunning();
 else   if (option.equals(""String_Node_Str""))   return ((SparqlKnowledgeSource)component).conceptThreadIsRunning();
  return true;
}"
10287,"public static Map<URL,Class<? extends KnowledgeSource>> getImportedFiles(ConfParser parser,String baseDir){
  List<List<String>> imports=parser.getFunctionCalls().get(""String_Node_Str"");
  Map<URL,Class<? extends KnowledgeSource>> importedFiles=new HashMap<URL,Class<? extends KnowledgeSource>>();
  if (imports != null) {
    for (    List<String> arguments : imports) {
      URL url=null;
      try {
        String fileString=arguments.get(0);
        if (fileString.startsWith(""String_Node_Str"")) {
          url=new URL(fileString);
        }
 else {
          File f=new File(baseDir,arguments.get(0));
          url=f.toURI().toURL();
        }
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
      Class<? extends KnowledgeSource> ksClass;
      if (arguments.size() == 1) {
        String filename=url.getPath();
        String ending=filename.substring(filename.lastIndexOf(""String_Node_Str"") + 1);
        if (ending.equals(""String_Node_Str"") || ending.equals(""String_Node_Str""))         ksClass=OWLFile.class;
 else         if (ending.equals(""String_Node_Str""))         ksClass=OWLFile.class;
 else         if (ending.equals(""String_Node_Str""))         ksClass=KBFile.class;
 else {
          System.err.println(""String_Node_Str"" + arguments.get(0) + ""String_Node_Str"");
          ksClass=OWLFile.class;
        }
        importedFiles.put(url,ksClass);
      }
 else {
        String formatString=arguments.get(1);
        if (formatString.equals(""String_Node_Str""))         ksClass=OWLFile.class;
 else         if (formatString.equals(""String_Node_Str""))         ksClass=KBFile.class;
 else         if (formatString.equals(""String_Node_Str""))         ksClass=SparqlEndpoint.class;
 else         if (formatString.equals(""String_Node_Str""))         ksClass=OWLFile.class;
 else {
          throw new RuntimeException(""String_Node_Str"" + formatString + ""String_Node_Str"");
        }
        importedFiles.put(url,ksClass);
      }
    }
  }
  return importedFiles;
}","public static Map<URL,Class<? extends KnowledgeSource>> getImportedFiles(ConfParser parser,String baseDir){
  List<List<String>> imports=parser.getFunctionCalls().get(""String_Node_Str"");
  Map<URL,Class<? extends KnowledgeSource>> importedFiles=new HashMap<URL,Class<? extends KnowledgeSource>>();
  if (imports != null) {
    for (    List<String> arguments : imports) {
      URL url=null;
      try {
        String fileString=arguments.get(0);
        if (fileString.startsWith(""String_Node_Str"")) {
          url=new URL(fileString);
        }
 else {
          File f=new File(baseDir,arguments.get(0));
          url=f.toURI().toURL();
        }
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
      Class<? extends KnowledgeSource> ksClass;
      if (arguments.size() == 1) {
        String filename=url.getPath();
        String ending=filename.substring(filename.lastIndexOf(""String_Node_Str"") + 1);
        if (ending.equals(""String_Node_Str"") || ending.equals(""String_Node_Str""))         ksClass=OWLFile.class;
 else         if (ending.equals(""String_Node_Str""))         ksClass=OWLFile.class;
 else         if (ending.equals(""String_Node_Str""))         ksClass=KBFile.class;
 else {
          System.err.println(""String_Node_Str"" + arguments.get(0) + ""String_Node_Str"");
          ksClass=OWLFile.class;
        }
        importedFiles.put(url,ksClass);
      }
 else {
        String formatString=arguments.get(1);
        if (formatString.equals(""String_Node_Str""))         ksClass=OWLFile.class;
 else         if (formatString.equals(""String_Node_Str""))         ksClass=KBFile.class;
 else         if (formatString.equals(""String_Node_Str""))         ksClass=SparqlKnowledgeSource.class;
 else         if (formatString.equals(""String_Node_Str""))         ksClass=OWLFile.class;
 else {
          throw new RuntimeException(""String_Node_Str"" + formatString + ""String_Node_Str"");
        }
        importedFiles.put(url,ksClass);
      }
    }
  }
  return importedFiles;
}"
10288,"private static Map<Class<? extends Component>,String> createComponentPrefixMapping(){
  Map<Class<? extends Component>,String> componentPrefixMapping=new HashMap<Class<? extends Component>,String>();
  componentPrefixMapping.put(SparqlEndpoint.class,""String_Node_Str"");
  componentPrefixMapping.put(DIGReasoner.class,""String_Node_Str"");
  componentPrefixMapping.put(OWLAPIReasoner.class,""String_Node_Str"");
  componentPrefixMapping.put(PosNegDefinitionLP.class,""String_Node_Str"");
  componentPrefixMapping.put(ROLearner.class,""String_Node_Str"");
  componentPrefixMapping.put(GP.class,""String_Node_Str"");
  return componentPrefixMapping;
}","private static Map<Class<? extends Component>,String> createComponentPrefixMapping(){
  Map<Class<? extends Component>,String> componentPrefixMapping=new HashMap<Class<? extends Component>,String>();
  componentPrefixMapping.put(SparqlKnowledgeSource.class,""String_Node_Str"");
  componentPrefixMapping.put(DIGReasoner.class,""String_Node_Str"");
  componentPrefixMapping.put(OWLAPIReasoner.class,""String_Node_Str"");
  componentPrefixMapping.put(PosNegDefinitionLP.class,""String_Node_Str"");
  componentPrefixMapping.put(ROLearner.class,""String_Node_Str"");
  componentPrefixMapping.put(GP.class,""String_Node_Str"");
  return componentPrefixMapping;
}"
10289,"ReasonerPanel(Config config){
  super(new BorderLayout());
  this.config=config;
  digButton=new JButton(""String_Node_Str"");
  digButton.addActionListener(this);
  digList=new JList();
  digList.setLayoutOrientation(JList.VERTICAL);
  digList.setVisibleRowCount(-1);
  JScrollPane listScroller=new JScrollPane(digList);
  listScroller.setPreferredSize(new Dimension(550,350));
  digPanel.add(digButton);
  add(digPanel,BorderLayout.PAGE_START);
  centerPanel.add(listScroller);
  add(centerPanel,BorderLayout.CENTER);
  digList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent evt){
      if (evt.getValueIsAdjusting())       return;
      Set<String> exampleSet=new HashSet<String>();
      int[] selectedIndices=digList.getSelectedIndices();
      for (      int i : selectedIndices)       exampleSet.add(individuals.get(i).toString());
    }
  }
);
}","ReasonerPanel(final Config config){
  super(new BorderLayout());
  this.config=config;
  digButton=new JButton(""String_Node_Str"");
  digButton.addActionListener(this);
  digList=new JList();
  digList.setLayoutOrientation(JList.VERTICAL);
  digList.setVisibleRowCount(-1);
  JScrollPane listScroller=new JScrollPane(digList);
  listScroller.setPreferredSize(new Dimension(550,350));
  digPanel.add(digButton);
  add(digPanel,BorderLayout.PAGE_START);
  centerPanel.add(listScroller);
  add(centerPanel,BorderLayout.CENTER);
  digList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent evt){
      if (evt.getValueIsAdjusting())       return;
      Set<String> exampleSet=new HashSet<String>();
      int[] selectedIndices=digList.getSelectedIndices();
      for (      int i : selectedIndices)       exampleSet.add(individuals.get(i).toString());
      config.setExampleSet(exampleSet);
      System.out.println(""String_Node_Str"" + config.getExampleSet());
    }
  }
);
}"
10290,"public int compareTo(Node n){
  return super.compareTo(n);
}","@Override public int compareTo(Node n){
  return super.compareTo(n);
}"
10291,"@Override public void export(File file,org.dllearner.core.OntologyFormat format){
  Reasoner kaon2Reasoner=KAON2Reasoner.getKAON2Reasoner(kb);
  OntologyFileFormat kaon2Format=null;
  if (format.equals(org.dllearner.core.OntologyFormat.RDF_XML))   kaon2Format=OntologyFileFormat.OWL_RDF;
 else {
    System.err.println(""String_Node_Str"" + format + ""String_Node_Str"");
    System.exit(0);
  }
  try {
    kaon2Reasoner.getOntology().saveOntology(kaon2Format,file,""String_Node_Str"");
  }
 catch (  KAON2Exception e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","@Override public void export(File file,org.dllearner.core.OntologyFormat format){
  Reasoner kaon2Reasoner=KAON2Reasoner.getKAON2Reasoner(kb);
  String kaon2Format=null;
  if (format.equals(org.dllearner.core.OntologyFormat.RDF_XML))   kaon2Format=OntologyFileFormat.OWL_RDF;
 else {
    System.err.println(""String_Node_Str"" + format + ""String_Node_Str"");
    System.exit(0);
  }
  try {
    kaon2Reasoner.getOntology().saveOntology(kaon2Format,file,""String_Node_Str"");
  }
 catch (  KAON2Exception e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
}"
10292,"public void saveOntology(File file,org.dllearner.core.OntologyFormat format){
  OntologyFileFormat kaon2Format=null;
  if (format.equals(org.dllearner.core.OntologyFormat.RDF_XML))   kaon2Format=OntologyFileFormat.OWL_RDF;
 else {
    System.err.println(""String_Node_Str"" + format + ""String_Node_Str"");
    System.exit(0);
  }
  try {
    kaon2Reasoner.getOntology().saveOntology(kaon2Format,file,""String_Node_Str"");
  }
 catch (  KAON2Exception e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","public void saveOntology(File file,org.dllearner.core.OntologyFormat format){
  String kaon2Format=null;
  if (format.equals(org.dllearner.core.OntologyFormat.RDF_XML))   kaon2Format=OntologyFileFormat.OWL_RDF;
 else {
    System.err.println(""String_Node_Str"" + format + ""String_Node_Str"");
    System.exit(0);
  }
  try {
    kaon2Reasoner.getOntology().saveOntology(kaon2Format,file,""String_Node_Str"");
  }
 catch (  KAON2Exception e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
}"
10293,"public KAON2Reasoner(KB kb,Map<URL,org.dllearner.core.OntologyFormat> imports){
  if (imports.size() > 1)   System.out.println(""String_Node_Str"");
  kaon2Connection=KAON2Manager.newConnection();
  DefaultOntologyResolver resolver=new DefaultOntologyResolver();
  String ontologyURI=""String_Node_Str"";
  URL importFile=null;
  if (!imports.isEmpty()) {
    importFile=imports.keySet().iterator().next();
    try {
      ontologyURI=resolver.registerOntology(importFile.toString());
    }
 catch (    KAON2Exception e) {
      e.printStackTrace();
    }
  }
 else {
    resolver.registerReplacement(""String_Node_Str"",""String_Node_Str"");
  }
  kaon2Connection.setOntologyResolver(resolver);
  Ontology ontology=null;
  if (!imports.isEmpty()) {
    System.out.print(""String_Node_Str"" + importFile.toString() + ""String_Node_Str"");
    ontology=importKB(ontologyURI,imports.get(importFile),kaon2Connection);
  }
 else {
    try {
      ontology=kaon2Connection.createOntology(""String_Node_Str"",new HashMap<String,Object>());
    }
 catch (    KAON2Exception e1) {
      e1.printStackTrace();
    }
  }
  kaon2Reasoner=getKAON2Reasoner(kb,ontology);
  Request<ObjectProperty> requestRoles=ontology.createEntityRequest(ObjectProperty.class);
  Request<OWLClass> requestConcepts=ontology.createEntityRequest(OWLClass.class);
  Request<org.semanticweb.kaon2.api.owl.elements.Individual> requestIndividuals=ontology.createEntityRequest(org.semanticweb.kaon2.api.owl.elements.Individual.class);
  atomicConcepts=new HashSet<AtomicConcept>();
  atomicRoles=new HashSet<AtomicRole>();
  individuals=new TreeSet<Individual>();
  try {
    for (    ObjectProperty role : requestRoles.get()) {
      atomicRoles.add(new AtomicRole(role.toString()));
    }
    for (    OWLClass concept : requestConcepts.get()) {
      if (!concept.equals(KAON2Manager.factory().thing()) && !concept.equals(KAON2Manager.factory().nothing()))       atomicConcepts.add(new AtomicConcept(concept.toString()));
    }
    for (    org.semanticweb.kaon2.api.owl.elements.Individual ind : requestIndividuals.get()) {
      individuals.add(new Individual(ind.toString()));
    }
    if (una) {
      Set<org.semanticweb.kaon2.api.owl.elements.Individual> individualsSet=new HashSet<org.semanticweb.kaon2.api.owl.elements.Individual>();
      for (      Individual individual : individuals)       individualsSet.add(KAON2Manager.factory().individual(individual.getName()));
      ontology.addAxiom(KAON2Manager.factory().differentIndividuals(individualsSet));
    }
  }
 catch (  KAON2Exception e) {
    e.printStackTrace();
  }
}","public KAON2Reasoner(KB kb,Map<URL,org.dllearner.core.OntologyFormat> imports){
  if (imports.size() > 1)   System.out.println(""String_Node_Str"");
  try {
    kaon2Connection=KAON2Manager.newConnection();
  }
 catch (  KAON2Exception e2) {
    e2.printStackTrace();
  }
  DefaultOntologyResolver resolver=new DefaultOntologyResolver();
  String ontologyURI=""String_Node_Str"";
  URL importFile=null;
  if (!imports.isEmpty()) {
    importFile=imports.keySet().iterator().next();
    try {
      ontologyURI=resolver.registerOntology(importFile.toString());
    }
 catch (    KAON2Exception e) {
      e.printStackTrace();
    }
  }
 else {
    resolver.registerReplacement(""String_Node_Str"",""String_Node_Str"");
  }
  kaon2Connection.setOntologyResolver(resolver);
  Ontology ontology=null;
  if (!imports.isEmpty()) {
    System.out.print(""String_Node_Str"" + importFile.toString() + ""String_Node_Str"");
    ontology=importKB(ontologyURI,imports.get(importFile),kaon2Connection);
  }
 else {
    try {
      ontology=kaon2Connection.createOntology(""String_Node_Str"",new HashMap<String,Object>());
    }
 catch (    KAON2Exception e1) {
      e1.printStackTrace();
    }
  }
  kaon2Reasoner=getKAON2Reasoner(kb,ontology);
  Request<ObjectProperty> requestRoles=ontology.createEntityRequest(ObjectProperty.class);
  Request<OWLClass> requestConcepts=ontology.createEntityRequest(OWLClass.class);
  Request<org.semanticweb.kaon2.api.owl.elements.Individual> requestIndividuals=ontology.createEntityRequest(org.semanticweb.kaon2.api.owl.elements.Individual.class);
  atomicConcepts=new HashSet<AtomicConcept>();
  atomicRoles=new HashSet<AtomicRole>();
  individuals=new TreeSet<Individual>();
  try {
    for (    ObjectProperty role : requestRoles.get()) {
      atomicRoles.add(new AtomicRole(role.toString()));
    }
    for (    OWLClass concept : requestConcepts.get()) {
      if (!concept.equals(KAON2Manager.factory().thing()) && !concept.equals(KAON2Manager.factory().nothing()))       atomicConcepts.add(new AtomicConcept(concept.toString()));
    }
    for (    org.semanticweb.kaon2.api.owl.elements.Individual ind : requestIndividuals.get()) {
      individuals.add(new Individual(ind.toString()));
    }
    if (una) {
      Set<org.semanticweb.kaon2.api.owl.elements.Individual> individualsSet=new HashSet<org.semanticweb.kaon2.api.owl.elements.Individual>();
      for (      Individual individual : individuals)       individualsSet.add(KAON2Manager.factory().individual(individual.getName()));
      ontology.addAxiom(KAON2Manager.factory().differentIndividuals(individualsSet));
    }
  }
 catch (  KAON2Exception e) {
    e.printStackTrace();
  }
}"
10294,"public void actionPerformed(ActionEvent e){
  if (e.getSource() == openButton) {
    int returnVal=fc.showOpenDialog(KnowledgeSourcePanel.this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      StartGUI.myconfig.setFile(fc.getSelectedFile());
      fileDisplay.setText(StartGUI.myconfig.getFile().toString());
      System.out.println(""String_Node_Str"");
      StartGUI.myconfig.getComponentManager().applyConfigEntry(StartGUI.myconfig.getKnowledgeSource(),""String_Node_Str"",StartGUI.myconfig.getFile().toURI().toString());
      StartGUI.myconfig.getKnowledgeSource().init();
    }
  }
  if (cb.getSelectedItem().toString() == kbBoxItems[0]) {
    System.out.println(""String_Node_Str"" + cb.getSelectedItem());
    makeCenterClean();
  }
  if (cb.getSelectedItem().toString() == kbBoxItems[1]) {
    System.out.println(""String_Node_Str"" + cb.getSelectedItem());
    makeCenterClean();
  }
  if (cb.getSelectedItem().toString() == kbBoxItems[2]) {
    System.out.println(""String_Node_Str"" + cb.getSelectedItem());
    makeCenterClean();
    openPanel.add(fileDisplay);
    openPanel.add(openButton);
    openPanel.repaint();
    StartGUI.myconfig.setKnowledgeSource(StartGUI.myconfig.getComponentManager().knowledgeSource(OWLFile.class));
  }
  if (cb.getSelectedItem().toString() == kbBoxItems[3]) {
    System.out.println(""String_Node_Str"" + cb.getSelectedItem());
    makeCenterClean();
  }
}","public void actionPerformed(ActionEvent e){
  if (e.getSource() == openButton) {
    int returnVal=fc.showOpenDialog(KnowledgeSourcePanel.this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      StartGUI.myconfig.setFile(fc.getSelectedFile());
      fileDisplay.setText(StartGUI.myconfig.getFile().toString());
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + StartGUI.myconfig.getFile().toURI().toString());
      StartGUI.myconfig.getComponentManager().applyConfigEntry(StartGUI.myconfig.getKnowledgeSource(),""String_Node_Str"",StartGUI.myconfig.getFile().toURI().toString());
      StartGUI.myconfig.getKnowledgeSource().init();
    }
    return;
  }
  if (cb.getSelectedItem().toString() == kbBoxItems[0]) {
    System.out.println(""String_Node_Str"" + cb.getSelectedItem());
    makeCenterClean();
  }
  if (cb.getSelectedItem().toString() == kbBoxItems[1]) {
    System.out.println(""String_Node_Str"" + cb.getSelectedItem());
    makeCenterClean();
  }
  if (cb.getSelectedItem().toString() == kbBoxItems[2]) {
    System.out.println(""String_Node_Str"" + cb.getSelectedItem());
    makeCenterClean();
    openPanel.add(fileDisplay);
    openPanel.add(openButton);
    openPanel.repaint();
    StartGUI.myconfig.setKnowledgeSource(StartGUI.myconfig.getComponentManager().knowledgeSource(OWLFile.class));
  }
  if (cb.getSelectedItem().toString() == kbBoxItems[3]) {
    System.out.println(""String_Node_Str"" + cb.getSelectedItem());
    makeCenterClean();
  }
}"
10295,"public void actionPerformed(ActionEvent e){
  if (e.getSource() == digButton) {
    StartGUI.myconfig.setReasoner(StartGUI.myconfig.getComponentManager().reasoner(DIGReasoner.class,StartGUI.myconfig.getKnowledgeSource()));
    StartGUI.myconfig.getReasoner().init();
    System.out.println(""String_Node_Str"");
  }
}","public void actionPerformed(ActionEvent e){
  if (e.getSource() == digButton) {
    StartGUI.myconfig.setReasoner(StartGUI.myconfig.getComponentManager().reasoner(DIGReasoner.class,StartGUI.myconfig.getKnowledgeSource()));
    System.out.println(StartGUI.myconfig.getKnowledgeSource());
    StartGUI.myconfig.getReasoner().init();
    System.out.println(""String_Node_Str"");
  }
}"
10296,"public Node expandNode(URI u,TypedSparqlQuery tsp){
  Node n=getFirstNode(u);
  Vector<Node> v=new Vector<Node>();
  v.add(n);
  System.out.println(""String_Node_Str"" + v);
  for (int x=1; x <= this.recursionDepth; x++) {
    Vector<Node> tmp=new Vector<Node>();
    while (v.size() > 0) {
      Node tmpNode=v.remove(0);
      System.out.println(""String_Node_Str"" + tmpNode);
      Vector<Node> tmpVec=tmpNode.expand(tsp,this.manipulator);
      tmp.addAll(tmpVec);
    }
    v=tmp;
    System.out.println(""String_Node_Str"" + x + ""String_Node_Str""+ v);
  }
  if (this.getAllBackground) {
    Vector<Node> classes=new Vector<Node>();
    for (    Node one : v) {
      if (one.isClass()) {
        classes.add(one);
      }
    }
    while (classes.size() > 0) {
      System.out.println(classes.size());
      Node next=classes.remove(0);
      System.out.println(next);
      classes.addAll(next.expand(tsp,this.manipulator));
    }
  }
  return n;
}","public Node expandNode(URI u,TypedSparqlQuery tsp){
  Node n=getFirstNode(u);
  Vector<Node> v=new Vector<Node>();
  v.add(n);
  System.out.println(""String_Node_Str"" + v);
  for (int x=1; x <= recursionDepth; x++) {
    Vector<Node> tmp=new Vector<Node>();
    while (v.size() > 0) {
      Node tmpNode=v.remove(0);
      System.out.println(""String_Node_Str"" + tmpNode);
      Vector<Node> tmpVec=tmpNode.expand(tsp,manipulator);
      tmp.addAll(tmpVec);
    }
    v=tmp;
    System.out.println(""String_Node_Str"" + x + ""String_Node_Str""+ v);
  }
  if (this.getAllBackground) {
    Vector<Node> classes=new Vector<Node>();
    for (    Node one : v) {
      if (one.isClass()) {
        classes.add(one);
      }
    }
    while (classes.size() > 0) {
      System.out.println(classes.size());
      Node next=classes.remove(0);
      System.out.println(next);
      classes.addAll(next.expand(tsp,manipulator));
    }
  }
  return n;
}"
10297,"@Override public Vector<Node> expand(TypedSparqlQuery tsq,Manipulator m){
  Set<Tupel> s=tsq.query(this.uri);
  m.check(s,this);
  Vector<Node> Nodes=new Vector<Node>();
  Iterator<Tupel> it=s.iterator();
  while (it.hasNext()) {
    Tupel t=(Tupel)it.next();
    try {
      if (t.a.equals(m.type)) {
        ClassNode tmp=new ClassNode(new URI(t.b));
        classes.add(tmp);
        Nodes.add(tmp);
      }
 else {
        InstanceNode tmp=new InstanceNode(new URI(t.b));
        properties.add(new PropertyNode(new URI(t.a),this,tmp));
        Nodes.add(tmp);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + t);
      e.printStackTrace();
    }
  }
  this.expanded=true;
  return Nodes;
}","@Override public Vector<Node> expand(TypedSparqlQuery tsq,Manipulator m){
  Set<Tupel> s=tsq.query(uri);
  m.check(s,this);
  Vector<Node> Nodes=new Vector<Node>();
  Iterator<Tupel> it=s.iterator();
  while (it.hasNext()) {
    Tupel t=(Tupel)it.next();
    try {
      if (t.a.equals(m.type)) {
        ClassNode tmp=new ClassNode(new URI(t.b));
        classes.add(tmp);
        Nodes.add(tmp);
      }
 else {
        InstanceNode tmp=new InstanceNode(new URI(t.b));
        properties.add(new PropertyNode(new URI(t.a),this,tmp));
        Nodes.add(tmp);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + t);
      e.printStackTrace();
    }
  }
  expanded=true;
  return Nodes;
}"
10298,"@Override public Set<String> toNTriple(){
  Set<String> s=new HashSet<String>();
  s.add(""String_Node_Str"" + this.uri + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  for (  ClassNode one : classes) {
    s.add(""String_Node_Str"" + this.uri + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ one.getURI()+ ""String_Node_Str"");
    s.addAll(one.toNTriple());
  }
  for (  PropertyNode one : properties) {
    s.add(""String_Node_Str"" + this.uri + ""String_Node_Str""+ one.getURI()+ ""String_Node_Str""+ one.getB().getURI()+ ""String_Node_Str"");
    s.addAll(one.toNTriple());
    s.addAll(one.getB().toNTriple());
  }
  return s;
}","@Override public Set<String> toNTriple(){
  Set<String> s=new HashSet<String>();
  s.add(""String_Node_Str"" + uri + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  for (  ClassNode one : classes) {
    s.add(""String_Node_Str"" + uri + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ one.getURI()+ ""String_Node_Str"");
    s.addAll(one.toNTriple());
  }
  for (  PropertyNode one : properties) {
    s.add(""String_Node_Str"" + uri + ""String_Node_Str""+ one.getURI()+ ""String_Node_Str""+ one.getB().getURI()+ ""String_Node_Str"");
    s.addAll(one.toNTriple());
    s.addAll(one.getB().toNTriple());
  }
  return s;
}"
10299,"public String extract(Set<String> instances){
  System.out.println(""String_Node_Str"");
  Set<String> ret=new HashSet<String>();
  for (  String one : instances) {
    try {
      Node n=this.extractionAlgorithm.expandNode(new URI(one),this.typedSparqlQuery);
      ret.addAll(n.toNTriple());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String nt=""String_Node_Str"";
  for (  String str : ret) {
    nt+=str + ""String_Node_Str"";
  }
  return nt;
}","public String extract(Set<String> instances){
  System.out.println(""String_Node_Str"");
  Set<String> ret=new HashSet<String>();
  for (  String one : instances) {
    try {
      Node n=extractionAlgorithm.expandNode(new URI(one),typedSparqlQuery);
      ret.addAll(n.toNTriple());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String nt=""String_Node_Str"";
  for (  String str : ret) {
    nt+=str + ""String_Node_Str"";
  }
  return nt;
}"
10300,"public Set<Tupel> check(Set<Tupel> s,Node node){
  Set<Tupel> toRemove=new HashSet<Tupel>();
  Iterator<Tupel> it=s.iterator();
  while (it.hasNext()) {
    Tupel t=(Tupel)it.next();
    if (t.a.equals(this.type) && t.b.equals(this.classns) && node.isClass()) {
      toRemove.add(t);
    }
    ;
    if (t.b.equals(this.classns) && node.isClass()) {
      toRemove.add(t);
    }
    ;
    if (t.a.equals(this.type) && t.b.equals(this.thing) && node.isInstance()) {
      toRemove.add(t);
    }
    ;
  }
  s.removeAll(toRemove);
  return s;
}","public Set<Tupel> check(Set<Tupel> s,Node node){
  Set<Tupel> toRemove=new HashSet<Tupel>();
  Iterator<Tupel> it=s.iterator();
  while (it.hasNext()) {
    Tupel t=(Tupel)it.next();
    if (t.a.equals(type) && t.b.equals(classns) && node.isClass()) {
      toRemove.add(t);
    }
    if (t.b.equals(classns) && node.isClass()) {
      toRemove.add(t);
    }
    if (t.a.equals(type) && t.b.equals(thing) && node.isInstance()) {
      toRemove.add(t);
    }
  }
  s.removeAll(toRemove);
  return s;
}"
10301,"@Override public Vector<Node> expand(TypedSparqlQuery tsq,Manipulator m){
  Set<Tupel> s=tsq.query(this.uri);
  Vector<Node> Nodes=new Vector<Node>();
  Iterator<Tupel> it=s.iterator();
  while (it.hasNext()) {
    Tupel t=(Tupel)it.next();
    try {
      if (t.a.equals(m.type)) {
        specialTypes.add(t.b);
      }
    }
 catch (    Exception e) {
      System.out.println(t);
      e.printStackTrace();
    }
  }
  return Nodes;
}","@Override public Vector<Node> expand(TypedSparqlQuery tsq,Manipulator m){
  Set<Tupel> s=tsq.query(uri);
  Vector<Node> Nodes=new Vector<Node>();
  Iterator<Tupel> it=s.iterator();
  while (it.hasNext()) {
    Tupel t=(Tupel)it.next();
    try {
      if (t.a.equals(m.type)) {
        specialTypes.add(t.b);
      }
    }
 catch (    Exception e) {
      System.out.println(t);
      e.printStackTrace();
    }
  }
  return Nodes;
}"
10302,"@Override public Set<String> toNTriple(){
  Set<String> s=new HashSet<String>();
  s.add(""String_Node_Str"" + this.uri + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  for (  String one : specialTypes) {
    s.add(""String_Node_Str"" + this.uri + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ one+ ""String_Node_Str"");
  }
  return s;
}","@Override public Set<String> toNTriple(){
  Set<String> s=new HashSet<String>();
  s.add(""String_Node_Str"" + uri + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  for (  String one : specialTypes) {
    s.add(""String_Node_Str"" + uri + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ one+ ""String_Node_Str"");
  }
  return s;
}"
10303,"public Node getB(){
  return this.b;
}","public Node getB(){
  return b;
}"
10304,"public String makeQueryUsingFilters(String subject){
  String lineend=""String_Node_Str"";
  String Filter=""String_Node_Str"";
  if (!this.sparqlQueryType.isLiterals())   Filter+=""String_Node_Str"";
  for (  String p : this.sparqlQueryType.getPredicatefilterlist()) {
    Filter+=lineend + filterPredicate(p);
  }
  for (  String o : this.sparqlQueryType.getObjectfilterlist()) {
    Filter+=lineend + filterObject(o);
  }
  String ret=""String_Node_Str"" + lineend + ""String_Node_Str""+ subject+ ""String_Node_Str""+ lineend+ ""String_Node_Str""+ lineend+ ""String_Node_Str""+ Filter+ ""String_Node_Str"";
  return ret;
}","public String makeQueryUsingFilters(String subject){
  String lineend=""String_Node_Str"";
  String Filter=""String_Node_Str"";
  if (!this.sparqlQueryType.isLiterals())   Filter+=""String_Node_Str"";
  for (  String p : sparqlQueryType.getPredicatefilterlist()) {
    Filter+=lineend + filterPredicate(p);
  }
  for (  String o : sparqlQueryType.getObjectfilterlist()) {
    Filter+=lineend + filterObject(o);
  }
  String ret=""String_Node_Str"" + lineend + ""String_Node_Str""+ subject+ ""String_Node_Str""+ lineend+ ""String_Node_Str""+ lineend+ ""String_Node_Str""+ Filter+ ""String_Node_Str"";
  return ret;
}"
10305,"public boolean equals(Tupel t){
  if (this.a.equals(t.a) && this.b.equals(t.b))   return true;
 else   return false;
}","public boolean equals(Tupel t){
  if (a.equals(t.a) && b.equals(t.b))   return true;
 else   return false;
}"
10306,"private String sendAndReceiveSPARQL(String sparql) throws IOException {
  StringBuilder answer=new StringBuilder();
  HttpURLConnection connection;
  SpecificSparqlEndpoint se=configuration.getSparqlEndpoint();
  connection=(HttpURLConnection)se.getURL().openConnection();
  connection.setDoOutput(true);
  connection.addRequestProperty(""String_Node_Str"",se.getHost());
  connection.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
  connection.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
  connection.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
  connection.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
  connection.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
  OutputStream os=connection.getOutputStream();
  OutputStreamWriter osw=new OutputStreamWriter(os);
  Set<String> s=se.getParameters().keySet();
  Iterator<String> it=s.iterator();
  String FullURI=""String_Node_Str"";
  while (it.hasNext()) {
    String element=(String)it.next();
    FullURI+=""String_Node_Str"" + URLEncoder.encode(element,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(se.getParameters().get(element),""String_Node_Str"")+ ""String_Node_Str"";
  }
  FullURI+=""String_Node_Str"" + se.getHasQueryParameter() + ""String_Node_Str""+ URLEncoder.encode(sparql,""String_Node_Str"");
  osw.write(FullURI);
  osw.close();
  InputStream is=connection.getInputStream();
  InputStreamReader isr=new InputStreamReader(is,""String_Node_Str"");
  BufferedReader br=new BufferedReader(isr);
  String line;
  do {
    line=br.readLine();
    if (line != null)     answer.append(line);
  }
 while (line != null);
  br.close();
  return answer.toString();
}","private String sendAndReceiveSPARQL(String sparql) throws IOException {
  StringBuilder answer=new StringBuilder();
  HttpURLConnection connection;
  SpecificSparqlEndpoint se=configuration.getSparqlEndpoint();
  connection=(HttpURLConnection)se.getURL().openConnection();
  connection.setDoOutput(true);
  connection.addRequestProperty(""String_Node_Str"",se.getHost());
  connection.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
  connection.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
  connection.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
  connection.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
  connection.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
  OutputStream os=connection.getOutputStream();
  OutputStreamWriter osw=new OutputStreamWriter(os);
  Set<String> s=se.getParameters().keySet();
  Iterator<String> it=s.iterator();
  String FullURI=""String_Node_Str"";
  while (it.hasNext()) {
    String element=it.next();
    FullURI+=""String_Node_Str"" + URLEncoder.encode(element,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(se.getParameters().get(element),""String_Node_Str"")+ ""String_Node_Str"";
  }
  FullURI+=""String_Node_Str"" + se.getHasQueryParameter() + ""String_Node_Str""+ URLEncoder.encode(sparql,""String_Node_Str"");
  osw.write(FullURI);
  osw.close();
  InputStream is=connection.getInputStream();
  InputStreamReader isr=new InputStreamReader(is,""String_Node_Str"");
  BufferedReader br=new BufferedReader(isr);
  String line;
  do {
    line=br.readLine();
    if (line != null)     answer.append(line);
  }
 while (line != null);
  br.close();
  return answer.toString();
}"
10307,"public TypedSparqlQuery(Configuration Configuration){
  this.configuration=Configuration;
  this.sparqlQueryMaker=new SparqlQueryMaker(Configuration.getSparqlQueryType());
  this.Cache=new Cache(""String_Node_Str"");
}","public TypedSparqlQuery(Configuration Configuration){
  this.configuration=Configuration;
  this.sparqlQueryMaker=new SparqlQueryMaker(Configuration.getSparqlQueryType());
  this.cache=new Cache(""String_Node_Str"");
}"
10308,"public Set<Tupel> query(URI u){
  String sparql=sparqlQueryMaker.makeQueryUsingFilters(u.toString());
  String FromCache=this.Cache.get(u.toString(),sparql);
  String xml=null;
  if (FromCache == null) {
    try {
      xml=sendAndReceiveSPARQL(sparql);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    this.Cache.put(u.toString(),xml,sparql);
    System.out.print(""String_Node_Str"");
  }
 else {
    xml=FromCache;
    System.out.println(""String_Node_Str"");
  }
  Set<Tupel> s=this.processResult(xml);
  try {
    System.out.println(""String_Node_Str"" + s.size() + ""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  return s;
}","public Set<Tupel> query(URI u){
  String sparql=sparqlQueryMaker.makeQueryUsingFilters(u.toString());
  String FromCache=cache.get(u.toString(),sparql);
  String xml=null;
  if (FromCache == null) {
    try {
      xml=sendAndReceiveSPARQL(sparql);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    cache.put(u.toString(),xml,sparql);
    System.out.print(""String_Node_Str"");
  }
 else {
    xml=FromCache;
    System.out.println(""String_Node_Str"");
  }
  Set<Tupel> s=processResult(xml);
  try {
    System.out.println(""String_Node_Str"" + s.size() + ""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  return s;
}"
10309,"@Override public void init(){
  if (searchTreeFile == null)   searchTreeFile=new File(defaultSearchTreeFile);
  if (heuristic == Heuristic.LEXICOGRAPHIC)   nodeComparator=new NodeComparator();
 else {
    if (posOnly) {
      throw new RuntimeException(""String_Node_Str"");
    }
    nodeComparator=new NodeComparator2(learningProblem.getNegativeExamples().size(),learningProblem.getPercentPerLengthUnit());
  }
  operator=new RhoDown(rs);
  candidates=new TreeSet<Node>(nodeComparator);
  if (allowedConcepts != null) {
    Helper.checkConcepts(rs,allowedConcepts);
    usedConcepts=allowedConcepts;
  }
 else   if (ignoredConcepts != null) {
    usedConcepts=Helper.computeConceptsUsingIgnoreList(rs,ignoredConcepts);
  }
 else {
    usedConcepts=Helper.computeConcepts(rs);
  }
  if (allowedRoles != null) {
    Helper.checkRoles(rs,allowedRoles);
    usedRoles=allowedRoles;
  }
 else   if (ignoredRoles != null) {
    Helper.checkRoles(rs,ignoredRoles);
    usedRoles=Helper.difference(rs.getAtomicRoles(),ignoredRoles);
  }
  rs.prepareSubsumptionHierarchy(usedConcepts);
  rs.getSubsumptionHierarchy().improveSubsumptionHierarchy();
  rs.prepareRoleHierarchy(usedRoles);
}","@Override public void init(){
  if (searchTreeFile == null)   searchTreeFile=new File(defaultSearchTreeFile);
  if (heuristic == Heuristic.LEXICOGRAPHIC)   nodeComparator=new NodeComparator();
 else {
    if (posOnly) {
      throw new RuntimeException(""String_Node_Str"");
    }
    nodeComparator=new NodeComparator2(learningProblem.getNegativeExamples().size(),learningProblem.getPercentPerLengthUnit());
  }
  operator=new RhoDown(rs);
  candidates=new TreeSet<Node>(nodeComparator);
  if (allowedConcepts != null) {
    Helper.checkConcepts(rs,allowedConcepts);
    usedConcepts=allowedConcepts;
  }
 else   if (ignoredConcepts != null) {
    usedConcepts=Helper.computeConceptsUsingIgnoreList(rs,ignoredConcepts);
  }
 else {
    usedConcepts=Helper.computeConcepts(rs);
  }
  if (allowedRoles != null) {
    Helper.checkRoles(rs,allowedRoles);
    usedRoles=allowedRoles;
  }
 else   if (ignoredRoles != null) {
    Helper.checkRoles(rs,ignoredRoles);
    usedRoles=Helper.difference(rs.getAtomicRoles(),ignoredRoles);
  }
 else {
    usedRoles=rs.getAtomicRoles();
  }
  rs.prepareSubsumptionHierarchy(usedConcepts);
  rs.getSubsumptionHierarchy().improveSubsumptionHierarchy();
  rs.prepareRoleHierarchy(usedRoles);
}"
10310,"public void start(){
  psi=new Psi(learningProblem);
  System.out.println();
  System.out.println(""String_Node_Str"");
  System.out.println();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + algorithmType);
  System.out.print(""String_Node_Str"" + selectionType);
  if (elitism)   System.out.println(""String_Node_Str"");
 else   System.out.println();
  System.out.println(""String_Node_Str"" + numberOfIndividuals);
  if (algorithmType == AlgorithmType.STEADY_STATE)   System.out.println(""String_Node_Str"" + numberOfSelectedIndividuals);
  System.out.println(""String_Node_Str"" + df.format(crossoverProbability * 100) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + df.format(mutationProbability * 100) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + df.format(hillClimbingProbability * 100) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + df.format(refinementProbability * 100) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + postConvergenceGenerations);
  System.out.println();
  individuals=new Program[numberOfIndividuals];
  if (algorithmType == AlgorithmType.GENERATIONAL) {
    if (elitism) {
      numberOfSelectedIndividuals=numberOfIndividuals - 1;
      if (numberOfSelectedIndividuals % 2 == 1)       error(""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      numberOfSelectedIndividuals=numberOfIndividuals;
      if (numberOfSelectedIndividuals % 2 == 1)       error(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  int numberOfNewIndividuals;
  if (elitism)   numberOfNewIndividuals=numberOfSelectedIndividuals + 1;
 else   numberOfNewIndividuals=numberOfSelectedIndividuals;
  if (numberOfIndividuals < 2)   error(""String_Node_Str"");
  if (numberOfSelectedIndividuals % 2 == 1)   error(""String_Node_Str"");
  if ((numberOfSelectedIndividuals < 2) || (numberOfSelectedIndividuals > numberOfIndividuals))   error(""String_Node_Str"" + numberOfIndividuals);
  fitnessComparator=new Comparator<Program>(){
    public int compare(    Program p1,    Program p2){
      double diff=p1.getFitness() - p2.getFitness();
      if (diff > 0)       return 1;
 else       if (diff < 0)       return -1;
 else       return 0;
    }
  }
;
  createIndividuals();
  fittestIndividual=getFittestIndividual();
  fittestIndividualGeneration=0;
  System.out.println(""String_Node_Str"");
  printStatistics(fittestIndividual);
  int[] selectedIndividuals=new int[numberOfSelectedIndividuals];
  Program[] newIndividuals=new Program[numberOfNewIndividuals];
  Program[] tmp=new Program[2];
  long startTime=System.currentTimeMillis();
  int generation=0;
  do {
    if (selectionType == SelectionType.RANK_SELECTION || algorithmType == AlgorithmType.STEADY_STATE)     Arrays.sort(individuals,fitnessComparator);
    boolean showIndividuals=false;
    if (showIndividuals) {
      System.out.println(""String_Node_Str"" + generation);
      for (      Program p : individuals) {
        System.out.println(p.getFitness() + ""String_Node_Str"" + p.getTree());
      }
      System.out.println(""String_Node_Str"");
    }
    selectedIndividuals=selectIndividuals(generation);
    for (int i=0; i < numberOfSelectedIndividuals; i++) {
      double rand=Math.random();
      double crossoverBoundary=crossoverProbability;
      double mutationBoundary=crossoverBoundary + mutationProbability;
      double hillClimbingBoundary=mutationBoundary + hillClimbingProbability;
      double refinementBoundary=hillClimbingBoundary + refinementProbability;
      if (rand < crossoverBoundary && i + 1 != numberOfSelectedIndividuals) {
        tmp=GPUtilities.crossover(learningProblem,individuals[selectedIndividuals[i]],individuals[selectedIndividuals[i + 1]]);
        newIndividuals[i]=tmp[0];
        newIndividuals[i + 1]=tmp[1];
      }
 else       if (rand >= crossoverBoundary && rand < mutationBoundary) {
        newIndividuals[i]=GPUtilities.mutation(learningProblem,individuals[selectedIndividuals[i]]);
      }
 else       if (rand >= mutationBoundary && rand < hillClimbingBoundary) {
        newIndividuals[i]=GPUtilities.hillClimbing(learningProblem,individuals[selectedIndividuals[i]]);
      }
 else       if (rand >= hillClimbingBoundary && rand < refinementBoundary) {
        newIndividuals[i]=psi.applyOperator(individuals[selectedIndividuals[i]]);
      }
 else {
        newIndividuals[i]=individuals[selectedIndividuals[i]];
      }
    }
    Program chr=getFittestIndividual();
    if (chr.getFitness() > fittestIndividual.getFitness()) {
      fittestIndividual=chr;
      fittestIndividualGeneration=generation;
    }
    if (elitism)     newIndividuals[numberOfNewIndividuals - 1]=fittestIndividual;
    if (algorithmType == AlgorithmType.STEADY_STATE)     System.arraycopy(newIndividuals,0,individuals,0,numberOfNewIndividuals);
 else     System.arraycopy(newIndividuals,0,individuals,0,numberOfIndividuals);
    if (generation % 5 == 0) {
      System.out.println(""String_Node_Str"" + generation);
      printStatistics(fittestIndividual);
    }
    for (int i=0; i < numberOfIndividuals; i++) {
      if (individuals[i].getTree().getLength() > Config.GP.maxConceptLength) {
        System.out.println(""String_Node_Str"" + Config.GP.maxConceptLength + ""String_Node_Str"");
        individuals[i]=GPUtilities.createProgram(learningProblem,new Top());
      }
    }
    generation++;
  }
 while ((useFixedNumberOfGenerations && generation < generations) || (!useFixedNumberOfGenerations && (generation - fittestIndividualGeneration < postConvergenceGenerations)));
  long endTime=System.currentTimeMillis();
  bestScore=fittestIndividual.getScore();
  bestConcept=fittestIndividual.getTree();
  boolean betterValueFoundInPsiCache=false;
  double bestValue=bestScore.getScore();
  if (Config.algorithm == Config.Algorithm.HYBRID_GP) {
    Set<Entry<Concept,Score>> entrySet=psi.evalCache.entrySet();
    for (    Entry<Concept,Score> entry : entrySet) {
      Score tmpScore=entry.getValue();
      Concept c=entry.getKey();
      tmpScore=tmpScore.getModifiedLengthScore(c.getLength());
      double tmpScoreValue=tmpScore.getScore();
      if (tmpScoreValue > bestValue) {
        bestValue=tmpScoreValue;
        betterValueFoundInPsiCache=true;
        bestScore=tmpScore;
        bestConcept=c;
      }
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + generation);
  System.out.println(""String_Node_Str"" + fittestIndividualGeneration + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (endTime - startTime));
  System.out.println(""String_Node_Str"" + GPUtilities.fitnessEvaluations);
  if (Config.algorithm == Config.Algorithm.HYBRID_GP) {
    System.out.println(""String_Node_Str"" + psi.getNrOfRequests() + ""String_Node_Str""+ GPUtilities.crossover+ ""String_Node_Str""+ GPUtilities.mutation+ ""String_Node_Str""+ GPUtilities.hillClimbing+ ""String_Node_Str"");
  }
  System.out.println();
  printStatistics(fittestIndividual);
  System.out.println(fittestIndividual.getScore());
  if (betterValueFoundInPsiCache) {
    System.out.println(""String_Node_Str"");
    System.out.println(bestConcept);
    int misClassifications=bestScore.getNotCoveredPositives().size() + bestScore.getCoveredNegatives().size();
    System.out.println(""String_Node_Str"" + misClassifications + ""String_Node_Str""+ bestConcept.getLength());
  }
}","public void start(){
  psi=new Psi(learningProblem);
  System.out.println();
  System.out.println(""String_Node_Str"");
  System.out.println();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + algorithmType);
  System.out.print(""String_Node_Str"" + selectionType);
  if (elitism)   System.out.println(""String_Node_Str"");
 else   System.out.println();
  System.out.println(""String_Node_Str"" + numberOfIndividuals);
  if (algorithmType == AlgorithmType.STEADY_STATE)   System.out.println(""String_Node_Str"" + numberOfSelectedIndividuals);
  System.out.println(""String_Node_Str"" + df.format(crossoverProbability * 100) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + df.format(mutationProbability * 100) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + df.format(hillClimbingProbability * 100) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + df.format(refinementProbability * 100) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + postConvergenceGenerations);
  System.out.println();
  individuals=new Program[numberOfIndividuals];
  if (algorithmType == AlgorithmType.GENERATIONAL) {
    if (elitism) {
      numberOfSelectedIndividuals=numberOfIndividuals - 1;
      if (numberOfSelectedIndividuals % 2 == 1)       error(""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      numberOfSelectedIndividuals=numberOfIndividuals;
      if (numberOfSelectedIndividuals % 2 == 1)       error(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  int numberOfNewIndividuals;
  if (elitism)   numberOfNewIndividuals=numberOfSelectedIndividuals + 1;
 else   numberOfNewIndividuals=numberOfSelectedIndividuals;
  if (numberOfIndividuals < 2)   error(""String_Node_Str"");
  if (numberOfSelectedIndividuals % 2 == 1)   error(""String_Node_Str"");
  if ((numberOfSelectedIndividuals < 2) || (numberOfSelectedIndividuals > numberOfIndividuals))   error(""String_Node_Str"" + numberOfIndividuals);
  fitnessComparator=new Comparator<Program>(){
    public int compare(    Program p1,    Program p2){
      double diff=p1.getFitness() - p2.getFitness();
      if (diff > 0)       return 1;
 else       if (diff < 0)       return -1;
 else       return 0;
    }
  }
;
  startTime=System.nanoTime();
  createIndividuals();
  fittestIndividual=getFittestIndividual();
  fittestIndividualGeneration=0;
  System.out.println(""String_Node_Str"");
  printStatistics(fittestIndividual);
  int[] selectedIndividuals=new int[numberOfSelectedIndividuals];
  Program[] newIndividuals=new Program[numberOfNewIndividuals];
  Program[] tmp=new Program[2];
  int generation=0;
  do {
    if (selectionType == SelectionType.RANK_SELECTION || algorithmType == AlgorithmType.STEADY_STATE)     Arrays.sort(individuals,fitnessComparator);
    boolean showIndividuals=false;
    if (showIndividuals) {
      System.out.println(""String_Node_Str"" + generation);
      for (      Program p : individuals) {
        System.out.println(p.getFitness() + ""String_Node_Str"" + p.getTree());
      }
      System.out.println(""String_Node_Str"");
    }
    selectedIndividuals=selectIndividuals(generation);
    for (int i=0; i < numberOfSelectedIndividuals; i++) {
      double rand=Math.random();
      double crossoverBoundary=crossoverProbability;
      double mutationBoundary=crossoverBoundary + mutationProbability;
      double hillClimbingBoundary=mutationBoundary + hillClimbingProbability;
      double refinementBoundary=hillClimbingBoundary + refinementProbability;
      if (rand < crossoverBoundary && i + 1 != numberOfSelectedIndividuals) {
        tmp=GPUtilities.crossover(learningProblem,individuals[selectedIndividuals[i]],individuals[selectedIndividuals[i + 1]]);
        newIndividuals[i]=tmp[0];
        newIndividuals[i + 1]=tmp[1];
        i++;
      }
 else       if (rand >= crossoverBoundary && rand < mutationBoundary) {
        newIndividuals[i]=GPUtilities.mutation(learningProblem,individuals[selectedIndividuals[i]]);
      }
 else       if (rand >= mutationBoundary && rand < hillClimbingBoundary) {
        newIndividuals[i]=GPUtilities.hillClimbing(learningProblem,individuals[selectedIndividuals[i]]);
      }
 else       if (rand >= hillClimbingBoundary && rand < refinementBoundary) {
        newIndividuals[i]=psi.applyOperator(individuals[selectedIndividuals[i]]);
      }
 else {
        newIndividuals[i]=individuals[selectedIndividuals[i]];
      }
    }
    Program chr=getFittestIndividual();
    if (chr.getFitness() > fittestIndividual.getFitness()) {
      fittestIndividual=chr;
      fittestIndividualGeneration=generation;
    }
    if (elitism)     newIndividuals[numberOfNewIndividuals - 1]=fittestIndividual;
    if (algorithmType == AlgorithmType.STEADY_STATE)     System.arraycopy(newIndividuals,0,individuals,0,numberOfNewIndividuals);
 else     System.arraycopy(newIndividuals,0,individuals,0,numberOfIndividuals);
    if (generation % 5 == 0) {
      System.out.println(""String_Node_Str"" + generation);
      printStatistics(fittestIndividual);
    }
    for (int i=0; i < numberOfIndividuals; i++) {
      if (individuals[i].getTree().getLength() > Config.GP.maxConceptLength) {
        System.out.println(""String_Node_Str"" + Config.GP.maxConceptLength + ""String_Node_Str"");
        individuals[i]=GPUtilities.createProgram(learningProblem,new Top());
      }
    }
    generation++;
  }
 while ((useFixedNumberOfGenerations && generation < generations) || (!useFixedNumberOfGenerations && (generation - fittestIndividualGeneration < postConvergenceGenerations)));
  long endTime=System.nanoTime();
  bestScore=fittestIndividual.getScore();
  bestConcept=fittestIndividual.getTree();
  boolean betterValueFoundInPsiCache=false;
  double bestValue=bestScore.getScore();
  if (Config.algorithm == Config.Algorithm.HYBRID_GP) {
    Set<Entry<Concept,Score>> entrySet=psi.evalCache.entrySet();
    for (    Entry<Concept,Score> entry : entrySet) {
      Score tmpScore=entry.getValue();
      Concept c=entry.getKey();
      tmpScore=tmpScore.getModifiedLengthScore(c.getLength());
      double tmpScoreValue=tmpScore.getScore();
      if (tmpScoreValue > bestValue) {
        bestValue=tmpScoreValue;
        betterValueFoundInPsiCache=true;
        bestScore=tmpScore;
        bestConcept=c;
      }
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + generation);
  System.out.println(""String_Node_Str"" + fittestIndividualGeneration + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(endTime - startTime));
  System.out.println(""String_Node_Str"" + GPUtilities.fitnessEvaluations);
  if (Config.algorithm == Config.Algorithm.HYBRID_GP) {
    System.out.println(""String_Node_Str"" + psi.getNrOfRequests() + ""String_Node_Str""+ GPUtilities.crossover+ ""String_Node_Str""+ GPUtilities.mutation+ ""String_Node_Str""+ GPUtilities.hillClimbing+ ""String_Node_Str"");
  }
  System.out.println();
  printStatistics(fittestIndividual);
  System.out.println(fittestIndividual.getScore());
  if (betterValueFoundInPsiCache) {
    System.out.println(""String_Node_Str"");
    System.out.println(bestConcept);
    int misClassifications=bestScore.getNotCoveredPositives().size() + bestScore.getCoveredNegatives().size();
    System.out.println(""String_Node_Str"" + misClassifications + ""String_Node_Str""+ bestConcept.getLength());
  }
}"
10311,"private void printStatistics(Program fittestIndividual){
  double averageFitness=getFitnessSum() / numberOfIndividuals;
  Concept n=fittestIndividual.getTree();
  int misClassifications=fittestIndividual.getScore().getNotCoveredPositives().size() + fittestIndividual.getScore().getCoveredNegatives().size();
  System.out.println(""String_Node_Str"" + averageFitness);
  System.out.println(""String_Node_Str"" + fittestIndividual.getFitness() + ""String_Node_Str""+ misClassifications+ ""String_Node_Str""+ n.getLength()+ ""String_Node_Str"");
  int conceptLengthSum=0;
  for (  Program p : individuals)   conceptLengthSum+=p.getTree().getLength();
  double conceptLengthAverage=conceptLengthSum / (double)individuals.length;
  System.out.println(""String_Node_Str"" + df.format(conceptLengthAverage));
  long algorithmTime=System.nanoTime() - Main.getAlgorithmStartTime();
  System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(algorithmTime));
  System.out.println(""String_Node_Str"" + n);
  if (Config.algorithm == Config.Algorithm.HYBRID_GP) {
    double cacheHitRate=0;
    double pdCacheHitRate=0, puCacheHitRate=0;
    if (psi.getNrOfRequests() > 0) {
      cacheHitRate=100 * (psi.getConceptCacheHits() / (double)psi.getNrOfRequests());
      pdCacheHitRate=100 * (psi.getPdCacheHits() / (double)psi.getPdRequests());
      puCacheHitRate=100 * (psi.getPuCacheHits() / (double)psi.getPuRequests());
    }
    System.out.println(""String_Node_Str"" + psi.getPdCache().size() + ""String_Node_Str""+ psi.getPdRequests()+ ""String_Node_Str""+ df.format(pdCacheHitRate)+ ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + psi.getPuCache().size() + ""String_Node_Str""+ psi.getPuRequests()+ ""String_Node_Str""+ df.format(puCacheHitRate)+ ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + psi.getCacheSize() + ""String_Node_Str""+ psi.getNrOfRequests()+ ""String_Node_Str""+ df.format(cacheHitRate)+ ""String_Node_Str"");
    double psiTimePercent=100 * psi.getPsiApplicationTimeNs() / (double)algorithmTime;
    double psiWOReasoningTimePercent=100 * (psi.getPsiApplicationTimeNs() - psi.getPsiReasoningTimeNs()) / (double)algorithmTime;
    System.out.println(""String_Node_Str"" + df.format(psiTimePercent) + ""String_Node_Str""+ df.format(psiWOReasoningTimePercent)+ ""String_Node_Str"");
  }
  if (Config.GP.adc)   System.out.println(""String_Node_Str"" + fittestIndividual.getAdc());
  System.out.println();
}","private void printStatistics(Program fittestIndividual){
  double averageFitness=getFitnessSum() / numberOfIndividuals;
  Concept n=fittestIndividual.getTree();
  int misClassifications=fittestIndividual.getScore().getNotCoveredPositives().size() + fittestIndividual.getScore().getCoveredNegatives().size();
  System.out.println(""String_Node_Str"" + averageFitness);
  System.out.println(""String_Node_Str"" + fittestIndividual.getFitness() + ""String_Node_Str""+ misClassifications+ ""String_Node_Str""+ n.getLength()+ ""String_Node_Str"");
  int conceptLengthSum=0;
  for (  Program p : individuals)   conceptLengthSum+=p.getTree().getLength();
  double conceptLengthAverage=conceptLengthSum / (double)individuals.length;
  System.out.println(""String_Node_Str"" + df.format(conceptLengthAverage));
  long algorithmTime=System.nanoTime() - startTime;
  System.out.println(""String_Node_Str"" + Helper.prettyPrintNanoSeconds(algorithmTime));
  System.out.println(""String_Node_Str"" + n);
  if (Config.algorithm == Config.Algorithm.HYBRID_GP) {
    double cacheHitRate=0;
    double pdCacheHitRate=0, puCacheHitRate=0;
    if (psi.getNrOfRequests() > 0) {
      cacheHitRate=100 * (psi.getConceptCacheHits() / (double)psi.getNrOfRequests());
      pdCacheHitRate=100 * (psi.getPdCacheHits() / (double)psi.getPdRequests());
      puCacheHitRate=100 * (psi.getPuCacheHits() / (double)psi.getPuRequests());
    }
    System.out.println(""String_Node_Str"" + psi.getPdCache().size() + ""String_Node_Str""+ psi.getPdRequests()+ ""String_Node_Str""+ df.format(pdCacheHitRate)+ ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + psi.getPuCache().size() + ""String_Node_Str""+ psi.getPuRequests()+ ""String_Node_Str""+ df.format(puCacheHitRate)+ ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + psi.getCacheSize() + ""String_Node_Str""+ psi.getNrOfRequests()+ ""String_Node_Str""+ df.format(cacheHitRate)+ ""String_Node_Str"");
    double psiTimePercent=100 * psi.getPsiApplicationTimeNs() / (double)algorithmTime;
    double psiWOReasoningTimePercent=100 * (psi.getPsiApplicationTimeNs() - psi.getPsiReasoningTimeNs()) / (double)algorithmTime;
    System.out.println(""String_Node_Str"" + df.format(psiTimePercent) + ""String_Node_Str""+ df.format(psiWOReasoningTimePercent)+ ""String_Node_Str"");
  }
  if (Config.GP.adc)   System.out.println(""String_Node_Str"" + fittestIndividual.getAdc());
  System.out.println();
}"
10312,"/** 
 * Specifies the URI of the ontology containing the background  knowledge and its format. Reads the ontology and sends it to the reasoner.
 * @param ontologyURI The URI of the ontology to use.
 * @param format ""RDF/XML"" or ""N-TRIPLES"".
 */
public void readOntology(String ontologyURL,String format) throws OntologyURLNotValid {
  this.currentOntologyURL=ontologyURL;
  p(""String_Node_Str"" + ontologyURL + ""String_Node_Str""+ format);
  try {
    URL ontology=null;
    try {
      ontology=new URL(ontologyURL);
    }
 catch (    MalformedURLException e1) {
      this.removeOntology();
      throw new OntologyURLNotValid(""String_Node_Str"",""String_Node_Str"");
    }
    OntologyFileFormat ofFormat;
    if (format.equals(""String_Node_Str""))     ofFormat=OntologyFileFormat.RDF_XML;
 else     ofFormat=OntologyFileFormat.N_TRIPLES;
    Map<URL,OntologyFileFormat> m=new HashMap<URL,OntologyFileFormat>();
    m.put(ontology,ofFormat);
    try {
      Config.digReasonerURL=new URL(reasonerURL);
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
    reasoner=Main.createReasoner(new KB(),m);
    rs=new ReasoningService(reasoner);
    Main.autoDetectConceptsAndRoles(rs);
    reasoner.prepareSubsumptionHierarchy();
    if (Config.Refinement.improveSubsumptionHierarchy) {
      try {
        reasoner.getSubsumptionHierarchy().improveSubsumptionHierarchy();
      }
 catch (      ReasoningMethodUnsupportedException e) {
        e.printStackTrace();
      }
    }
    p(rs.getSubsumptionHierarchy().toString());
  }
 catch (  Exception e) {
    this.removeOntology();
    throw new OntologyURLNotValid(""String_Node_Str"",""String_Node_Str"");
  }
  p(""String_Node_Str"" + currentOntologyURL);
}","/** 
 * Specifies the URI of the ontology containing the background  knowledge and its format. Reads the ontology and sends it to the reasoner.
 * @param ontologyURI The URI of the ontology to use.
 * @param format ""RDF/XML"" or ""N-TRIPLES"".
 */
public void readOntology(String ontologyURL,String format) throws OntologyURLNotValid {
  this.currentOntologyURL=ontologyURL;
  p(""String_Node_Str"" + ontologyURL + ""String_Node_Str""+ format);
  try {
    URL ontology=null;
    try {
      ontology=new URL(ontologyURL);
    }
 catch (    MalformedURLException e1) {
      this.removeOntology();
      throw new OntologyURLNotValid(""String_Node_Str"",""String_Node_Str"");
    }
    OntologyFileFormat ofFormat;
    if (format.equals(""String_Node_Str""))     ofFormat=OntologyFileFormat.RDF_XML;
 else     ofFormat=OntologyFileFormat.N_TRIPLES;
    Map<URL,OntologyFileFormat> m=new HashMap<URL,OntologyFileFormat>();
    m.put(ontology,ofFormat);
    try {
      Config.digReasonerURL=new URL(reasonerURL);
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
    reasoner=Main.createReasoner(new KB(),m);
    rs=new ReasoningService(reasoner);
    Main.autoDetectConceptsAndRoles(rs);
    reasoner.prepareSubsumptionHierarchy();
    if (Config.Refinement.improveSubsumptionHierarchy) {
      try {
        reasoner.prepareRoleHierarchy();
        reasoner.getSubsumptionHierarchy().improveSubsumptionHierarchy();
      }
 catch (      ReasoningMethodUnsupportedException e) {
        e.printStackTrace();
      }
    }
    p(rs.getSubsumptionHierarchy().toString());
  }
 catch (  Exception e) {
    this.removeOntology();
    throw new OntologyURLNotValid(""String_Node_Str"",""String_Node_Str"");
  }
  p(""String_Node_Str"" + currentOntologyURL);
}"
10313,"@Override public void onReceive(Context context,Intent intent){
  if (!Common.PACKAGE_DIR.exists()) {
    Common.PACKAGE_DIR.mkdir();
  }
  ctx=context;
  resources=ctx.getResources();
  String action=intent.getAction();
  Bundle extras=intent.getExtras();
  boolean hasExtras=extras != null;
  if (Common.ACTION_BACKUP_APK_FILE.equals(action)) {
    if (hasExtras) {
      String apkFile=extras.getString(Common.FILE);
      backupApkFile(apkFile);
    }
  }
 else   if (Common.ACTION_DELETE_APK_FILE.equals(action)) {
    if (hasExtras) {
      String apkFile=extras.getString(Common.FILE);
      deleteApkFile(apkFile);
    }
  }
 else   if (Common.ACTION_UNINSTALL_SYSTEM_APP.equals(action)) {
    if (hasExtras) {
      String packageName=extras.getString(Common.PACKAGE);
      uninstallSystemApp(packageName);
    }
  }
 else   if (Common.ACTION_BACKUP_PREFERENCES.equals(action)) {
    backupPreferences();
  }
 else   if (Common.ACTION_RESTORE_PREFERENCES.equals(action)) {
    restorePreferences();
  }
 else   if (Common.ACTION_RESET_PREFERENCES.equals(action)) {
    resetPreferences();
  }
 else   if (Common.ACTION_CONFIRM_CHECK_SIGNATURE.equals(action)) {
    confirmCheckSignatures();
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (!PACKAGE_DIR.exists()) {
    PACKAGE_DIR.mkdir();
  }
  ctx=context;
  resources=ctx.getResources();
  String action=intent.getAction();
  Bundle extras=intent.getExtras();
  boolean hasExtras=extras != null;
  if (Common.ACTION_BACKUP_APK_FILE.equals(action)) {
    if (hasExtras) {
      String apkFile=extras.getString(Common.FILE);
      backupApkFile(apkFile);
    }
  }
 else   if (Common.ACTION_DELETE_APK_FILE.equals(action)) {
    if (hasExtras) {
      String apkFile=extras.getString(Common.FILE);
      deleteApkFile(apkFile);
    }
  }
 else   if (Common.ACTION_UNINSTALL_SYSTEM_APP.equals(action)) {
    if (hasExtras) {
      String packageName=extras.getString(Common.PACKAGE);
      uninstallSystemApp(packageName);
    }
  }
 else   if (Common.ACTION_BACKUP_PREFERENCES.equals(action)) {
    backupPreferences();
  }
 else   if (Common.ACTION_RESTORE_PREFERENCES.equals(action)) {
    restorePreferences();
  }
 else   if (Common.ACTION_RESET_PREFERENCES.equals(action)) {
    resetPreferences();
  }
 else   if (Common.ACTION_CONFIRM_CHECK_SIGNATURE.equals(action)) {
    confirmCheckSignatures();
  }
}"
10314,"public void backupPreferences(){
  if (!Common.PREFERENCES_BACKUP_FILE.exists()) {
    try {
      Common.PREFERENCES_BACKUP_FILE.createNewFile();
    }
 catch (    Exception e) {
    }
  }
  ObjectOutputStream output=null;
  try {
    output=new ObjectOutputStream(new FileOutputStream(Common.PREFERENCES_BACKUP_FILE));
    SharedPreferences prefs=ctx.getSharedPreferences(Common.PACKAGE_PREFERENCES,Context.MODE_WORLD_READABLE);
    output.writeObject(prefs.getAll());
  }
 catch (  Exception e) {
  }
 finally {
    try {
      if (output != null) {
        output.flush();
        output.close();
      }
    }
 catch (    Exception e) {
    }
  }
  Toast.makeText(ctx,resources.getString(R.string.preferences_backed_up),Toast.LENGTH_LONG).show();
}","public void backupPreferences(){
  if (!PREFERENCES_BACKUP_FILE.exists()) {
    try {
      PREFERENCES_BACKUP_FILE.createNewFile();
    }
 catch (    Exception e) {
    }
  }
  ObjectOutputStream output=null;
  try {
    output=new ObjectOutputStream(new FileOutputStream(PREFERENCES_BACKUP_FILE));
    SharedPreferences prefs=ctx.getSharedPreferences(Common.PACKAGE_PREFERENCES,Context.MODE_WORLD_READABLE);
    output.writeObject(prefs.getAll());
  }
 catch (  Exception e) {
  }
 finally {
    try {
      if (output != null) {
        output.flush();
        output.close();
      }
    }
 catch (    Exception e) {
    }
  }
  Toast.makeText(ctx,resources.getString(R.string.preferences_backed_up),Toast.LENGTH_LONG).show();
}"
10315,"/** 
 * Adds information to the given crash report.
 * @param report The report to add sections to.
 */
public static void addInfoToCrash(CrashReport report){
  int stSize;
  try {
    stSize=Thread.currentThread().getStackTrace().length - 1;
  }
 catch (  Exception e) {
    stSize=0;
  }
  CrashReportCategory core=report.makeCategoryDepth(""String_Node_Str"",stSize);
  core.addCrashSection(""String_Node_Str"",VersionConstants.getModVersion());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getMinecraftVersionInfo());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getExpectedVersion());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getProtocolVersion());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getDataVersion());
  core.addDetail(""String_Node_Str"",() -> {
    String path=new File(WDL.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
    String username=System.getProperty(""String_Node_Str"");
    path=path.replace(username,""String_Node_Str"");
    return path;
  }
);
  CrashReportCategory ext=report.makeCategoryDepth(""String_Node_Str"",stSize);
  Map<String,ModInfo<?>> extensions=WDLApi.getWDLMods();
  ext.addCrashSection(""String_Node_Str"",extensions.size());
  for (  Map.Entry<String,ModInfo<?>> e : extensions.entrySet()) {
    ext.addDetail(e.getKey(),e.getValue()::getInfo);
  }
  CrashReportCategory state=report.makeCategoryDepth(""String_Node_Str"",stSize);
  state.addCrashSection(""String_Node_Str"",minecraft);
  state.addCrashSection(""String_Node_Str"",worldClient);
  state.addCrashSection(""String_Node_Str"",networkManager);
  state.addCrashSection(""String_Node_Str"",thePlayer);
  state.addCrashSection(""String_Node_Str"",windowContainer);
  state.addCrashSection(""String_Node_Str"",lastClickedBlock);
  state.addCrashSection(""String_Node_Str"",lastEntity);
  state.addCrashSection(""String_Node_Str"",saveHandler);
  state.addCrashSection(""String_Node_Str"",chunkLoader);
  state.addCrashSection(""String_Node_Str"",newTileEntities);
  state.addCrashSection(""String_Node_Str"",newEntities);
  state.addCrashSection(""String_Node_Str"",newMapDatas);
  state.addCrashSection(""String_Node_Str"",downloading);
  state.addCrashSection(""String_Node_Str"",isMultiworld);
  state.addCrashSection(""String_Node_Str"",propsFound);
  state.addCrashSection(""String_Node_Str"",startOnChange);
  state.addCrashSection(""String_Node_Str"",overrideLastModifiedCheck);
  state.addCrashSection(""String_Node_Str"",saving);
  state.addCrashSection(""String_Node_Str"",worldLoadingDeferred);
  state.addCrashSection(""String_Node_Str"",worldName);
  state.addCrashSection(""String_Node_Str"",baseFolderName);
  CrashReportCategory base=report.makeCategoryDepth(""String_Node_Str"",stSize);
  if (baseProps != null) {
    baseProps.addToCrashReport(base,""String_Node_Str"");
  }
 else {
    base.addCrashSection(""String_Node_Str"",""String_Node_Str"");
  }
  CrashReportCategory world=report.makeCategoryDepth(""String_Node_Str"",stSize);
  if (worldProps != null) {
    baseProps.addToCrashReport(base,""String_Node_Str"");
  }
 else {
    world.addCrashSection(""String_Node_Str"",""String_Node_Str"");
  }
  CrashReportCategory global=report.makeCategoryDepth(""String_Node_Str"",stSize);
  if (globalProps != null) {
    baseProps.addToCrashReport(base,""String_Node_Str"");
  }
 else {
    global.addCrashSection(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Adds information to the given crash report.
 * @param report The report to add sections to.
 */
public static void addInfoToCrash(CrashReport report){
  int stSize;
  try {
    stSize=Thread.currentThread().getStackTrace().length - 1;
  }
 catch (  Exception e) {
    stSize=0;
  }
  CrashReportCategory core=report.makeCategoryDepth(""String_Node_Str"",stSize);
  core.addCrashSection(""String_Node_Str"",VersionConstants.getModVersion());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getMinecraftVersionInfo());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getExpectedVersion());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getProtocolVersion());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getDataVersion());
  core.addDetail(""String_Node_Str"",() -> {
    String path=new File(WDL.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
    String username=System.getProperty(""String_Node_Str"");
    path=path.replace(username,""String_Node_Str"");
    return path;
  }
);
  CrashReportCategory ext=report.makeCategoryDepth(""String_Node_Str"",stSize);
  Map<String,ModInfo<?>> extensions=WDLApi.getWDLMods();
  ext.addCrashSection(""String_Node_Str"",extensions.size());
  for (  Map.Entry<String,ModInfo<?>> e : extensions.entrySet()) {
    ext.addDetail(e.getKey(),e.getValue()::getInfo);
  }
  CrashReportCategory state=report.makeCategoryDepth(""String_Node_Str"",stSize);
  state.addCrashSection(""String_Node_Str"",minecraft);
  state.addCrashSection(""String_Node_Str"",worldClient);
  state.addCrashSection(""String_Node_Str"",networkManager);
  state.addCrashSection(""String_Node_Str"",thePlayer);
  state.addCrashSection(""String_Node_Str"",windowContainer);
  state.addCrashSection(""String_Node_Str"",lastClickedBlock);
  state.addCrashSection(""String_Node_Str"",lastEntity);
  state.addCrashSection(""String_Node_Str"",saveHandler);
  state.addCrashSection(""String_Node_Str"",chunkLoader);
  state.addCrashSection(""String_Node_Str"",newTileEntities);
  state.addCrashSection(""String_Node_Str"",newEntities);
  state.addCrashSection(""String_Node_Str"",newMapDatas);
  state.addCrashSection(""String_Node_Str"",downloading);
  state.addCrashSection(""String_Node_Str"",isMultiworld);
  state.addCrashSection(""String_Node_Str"",propsFound);
  state.addCrashSection(""String_Node_Str"",startOnChange);
  state.addCrashSection(""String_Node_Str"",overrideLastModifiedCheck);
  state.addCrashSection(""String_Node_Str"",saving);
  state.addCrashSection(""String_Node_Str"",worldLoadingDeferred);
  state.addCrashSection(""String_Node_Str"",worldName);
  state.addCrashSection(""String_Node_Str"",baseFolderName);
  state.addCrashSection(""String_Node_Str"",baseProps);
  state.addCrashSection(""String_Node_Str"",worldProps);
  state.addCrashSection(""String_Node_Str"",globalProps);
  state.addCrashSection(""String_Node_Str"",defaultProps);
  CrashReportCategory base=report.makeCategoryDepth(""String_Node_Str"",stSize);
  if (baseProps != null) {
    baseProps.addToCrashReport(base,""String_Node_Str"");
  }
 else {
    base.addCrashSection(""String_Node_Str"",""String_Node_Str"");
  }
  CrashReportCategory world=report.makeCategoryDepth(""String_Node_Str"",stSize);
  if (worldProps != null) {
    worldProps.addToCrashReport(world,""String_Node_Str"");
  }
 else {
    world.addCrashSection(""String_Node_Str"",""String_Node_Str"");
  }
  CrashReportCategory global=report.makeCategoryDepth(""String_Node_Str"",stSize);
  if (globalProps != null) {
    globalProps.addToCrashReport(global,""String_Node_Str"");
  }
 else {
    global.addCrashSection(""String_Node_Str"",""String_Node_Str"");
  }
}"
10316,"/** 
 * Called when   {@link WorldClient#tick()} is called.<br/> Should be at end of the method.
 */
public static void onWorldClientTick(WorldClient sender){
  try {
    PROFILER.startSection(""String_Node_Str"");
    List<EntityPlayer> players=ImmutableList.copyOf(sender.playerEntities);
    if (sender != WDL.worldClient) {
      PROFILER.startSection(""String_Node_Str"");
      if (WDL.worldLoadingDeferred) {
        return;
      }
      WDLEvents.onWorldLoad(sender);
      PROFILER.endSection();
    }
 else {
      PROFILER.startSection(""String_Node_Str"");
      if (WDL.downloading && WDL.thePlayer != null) {
        if (WDL.thePlayer.openContainer != WDL.windowContainer) {
          if (WDL.thePlayer.openContainer == WDL.thePlayer.inventoryContainer) {
            boolean handled;
            PROFILER.startSection(""String_Node_Str"");
            PROFILER.startSection(""String_Node_Str"");
            handled=WDLEvents.onItemGuiClosed();
            PROFILER.endSection();
            Container container=WDL.thePlayer.openContainer;
            if (WDL.lastEntity != null) {
              Entity entity=WDL.lastEntity;
              for (              ModInfo<IGuiHooksListener> info : WDLApi.getImplementingExtensions(IGuiHooksListener.class)) {
                if (handled) {
                  break;
                }
                PROFILER.startSection(info.id);
                handled=info.mod.onEntityGuiClosed(sender,entity,container);
                PROFILER.endSection();
              }
              if (!handled) {
                WDLMessages.chatMessageTranslated(WDLMessageTypes.ON_GUI_CLOSED_WARNING,""String_Node_Str"",entity);
              }
            }
 else {
              BlockPos pos=WDL.lastClickedBlock;
              for (              ModInfo<IGuiHooksListener> info : WDLApi.getImplementingExtensions(IGuiHooksListener.class)) {
                if (handled) {
                  break;
                }
                PROFILER.startSection(info.id);
                handled=info.mod.onBlockGuiClosed(sender,pos,container);
                PROFILER.endSection();
              }
              if (!handled) {
                WDLMessages.chatMessageTranslated(WDLMessageTypes.ON_GUI_CLOSED_WARNING,""String_Node_Str"",pos,sender.getTileEntity(pos));
              }
            }
            PROFILER.endSection();
          }
 else {
            PROFILER.startSection(""String_Node_Str"");
            PROFILER.startSection(""String_Node_Str"");
            WDLEvents.onItemGuiOpened();
            PROFILER.endSection();
            PROFILER.endSection();
          }
          WDL.windowContainer=WDL.thePlayer.openContainer;
        }
      }
      PROFILER.endSection();
    }
    PROFILER.startSection(""String_Node_Str"");
    CapeHandler.onWorldTick(players);
    PROFILER.endSection();
    PROFILER.endSection();
  }
 catch (  Throwable e) {
    WDL.crashed(e,""String_Node_Str"");
  }
}","/** 
 * Called when   {@link WorldClient#tick()} is called.<br/> Should be at end of the method.
 */
public static void onWorldClientTick(WorldClient sender){
  try {
    PROFILER.startSection(""String_Node_Str"");
    List<EntityPlayer> players=ImmutableList.copyOf(sender.playerEntities);
    if (sender != WDL.worldClient) {
      PROFILER.startSection(""String_Node_Str"");
      if (WDL.worldLoadingDeferred) {
        return;
      }
      WDLEvents.onWorldLoad(sender);
      PROFILER.endSection();
    }
 else {
      PROFILER.startSection(""String_Node_Str"");
      if (WDL.downloading && WDL.thePlayer != null) {
        if (WDL.thePlayer.openContainer != WDL.windowContainer) {
          if (WDL.thePlayer.openContainer == WDL.thePlayer.inventoryContainer) {
            boolean handled;
            PROFILER.startSection(""String_Node_Str"");
            PROFILER.startSection(""String_Node_Str"");
            handled=WDLEvents.onItemGuiClosed();
            PROFILER.endSection();
            Container container=WDL.thePlayer.openContainer;
            if (WDL.lastEntity != null) {
              Entity entity=WDL.lastEntity;
              for (              ModInfo<IGuiHooksListener> info : WDLApi.getImplementingExtensions(IGuiHooksListener.class)) {
                if (handled) {
                  break;
                }
                PROFILER.startSection(info.id);
                handled=info.mod.onEntityGuiClosed(sender,entity,container);
                PROFILER.endSection();
              }
              if (!handled) {
                WDLMessages.chatMessageTranslated(WDLMessageTypes.ON_GUI_CLOSED_WARNING,""String_Node_Str"",entity);
              }
            }
 else {
              BlockPos pos=WDL.lastClickedBlock;
              for (              ModInfo<IGuiHooksListener> info : WDLApi.getImplementingExtensions(IGuiHooksListener.class)) {
                if (handled) {
                  break;
                }
                PROFILER.startSection(info.id);
                handled=info.mod.onBlockGuiClosed(sender,pos,container);
                PROFILER.endSection();
              }
              if (!handled) {
                WDLMessages.chatMessageTranslated(WDLMessageTypes.ON_GUI_CLOSED_WARNING,""String_Node_Str"",pos,sender.getTileEntity(pos));
              }
            }
            PROFILER.endSection();
          }
 else {
            PROFILER.startSection(""String_Node_Str"");
            PROFILER.startSection(""String_Node_Str"");
            WDLEvents.onItemGuiOpened();
            PROFILER.endSection();
            PROFILER.endSection();
          }
          WDL.windowContainer=WDL.thePlayer.openContainer;
        }
      }
      PROFILER.endSection();
    }
    PROFILER.startSection(""String_Node_Str"");
    CapeHandler.onWorldTick(players);
    PROFILER.endSection();
    PROFILER.startSection(""String_Node_Str"");
    GuiTurningCameraBase.onWorldTick();
    PROFILER.endSection();
    PROFILER.endSection();
  }
 catch (  Throwable e) {
    WDL.crashed(e,""String_Node_Str"");
  }
}"
10317,"/** 
 * Increment yaw to the yaw for the next tick.
 */
@Override public void updateScreen(){
  if (mc.world != null) {
    this.cam.prevRotationPitch=this.cam.rotationPitch=0.0F;
    this.cam.prevRotationYaw=this.yaw;
    this.cam.lastTickPosY=this.cam.prevPosY=this.cam.posY;
    this.cam.lastTickPosX=this.cam.prevPosX=this.cam.posX;
    this.cam.lastTickPosZ=this.cam.prevPosZ=this.cam.posZ;
    this.yaw=(this.yaw + ROTATION_SPEED * (float)(1 + ROTATION_VARIANCE * Math.cos((this.yaw + 45) / 45.0 * Math.PI)));
    this.cam.rotationYaw=this.yaw;
    double x=Math.cos(yaw / 180.0D * Math.PI);
    double z=Math.sin((yaw - 90) / 180.0D * Math.PI);
    double distance=truncateDistanceIfBlockInWay(x,z,.5);
    this.cam.posY=WDL.thePlayer.posY;
    this.cam.posX=WDL.thePlayer.posX - distance * x;
    this.cam.posZ=WDL.thePlayer.posZ + distance * z;
  }
  super.updateScreen();
}","/** 
 * Increment yaw to the yaw for the next tick.
 */
@Override public void updateScreen(){
  if (mc.world != null && this.initializedCamera) {
    this.cam.prevRotationPitch=this.cam.rotationPitch=0.0F;
    this.cam.prevRotationYaw=this.yaw;
    this.cam.lastTickPosY=this.cam.prevPosY=this.cam.posY;
    this.cam.lastTickPosX=this.cam.prevPosX=this.cam.posX;
    this.cam.lastTickPosZ=this.cam.prevPosZ=this.cam.posZ;
    this.yaw=(this.yaw + ROTATION_SPEED * (float)(1 + ROTATION_VARIANCE * Math.cos((this.yaw + 45) / 45.0 * Math.PI)));
    this.cam.rotationYaw=this.yaw;
    double x=Math.cos(yaw / 180.0D * Math.PI);
    double z=Math.sin((yaw - 90) / 180.0D * Math.PI);
    double distance=truncateDistanceIfBlockInWay(x,z,.5);
    this.cam.posY=WDL.thePlayer.posY;
    this.cam.posX=WDL.thePlayer.posX - distance * x;
    this.cam.posZ=WDL.thePlayer.posZ + distance * z;
  }
  this.deactivateRenderViewEntity();
  super.updateScreen();
}"
10318,"/** 
 * Adds the buttons (and other controls) to the screen in question.
 */
@Override public void initGui(){
  if (!initializedCamera) {
    this.cam=LocalUtils.makePlayer();
    this.cam.setLocationAndAngles(WDL.thePlayer.posX,WDL.thePlayer.posY,WDL.thePlayer.posZ,WDL.thePlayer.rotationYaw,0.0F);
    this.yaw=WDL.thePlayer.rotationYaw;
    this.oldCameraMode=WDL.minecraft.gameSettings.thirdPersonView;
    this.oldHideHud=WDL.minecraft.gameSettings.hideGUI;
    this.oldShowDebug=WDL.minecraft.gameSettings.showDebugInfo;
    this.oldChatVisibility=WDL.minecraft.gameSettings.chatVisibility;
    WDL.minecraft.gameSettings.thirdPersonView=0;
    WDL.minecraft.gameSettings.hideGUI=true;
    WDL.minecraft.gameSettings.showDebugInfo=false;
    WDL.minecraft.gameSettings.chatVisibility=EnumChatVisibility.HIDDEN;
    this.oldRenderViewEntity=WDL.minecraft.getRenderViewEntity();
    initializedCamera=true;
  }
  WDL.minecraft.setRenderViewEntity(this.cam);
}","/** 
 * Adds the buttons (and other controls) to the screen in question.
 */
@Override public void initGui(){
  if (!initializedCamera) {
    this.cam=LocalUtils.makePlayer();
    this.cam.setLocationAndAngles(WDL.thePlayer.posX,WDL.thePlayer.posY,WDL.thePlayer.posZ,WDL.thePlayer.rotationYaw,0.0F);
    this.yaw=WDL.thePlayer.rotationYaw;
    this.oldCameraMode=WDL.minecraft.gameSettings.thirdPersonView;
    this.oldHideHud=WDL.minecraft.gameSettings.hideGUI;
    this.oldShowDebug=WDL.minecraft.gameSettings.showDebugInfo;
    this.oldChatVisibility=WDL.minecraft.gameSettings.chatVisibility;
    this.oldRenderViewEntity=WDL.minecraft.getRenderViewEntity();
    initializedCamera=true;
  }
}"
10319,"@Override public void onGuiClosed(){
  super.onGuiClosed();
  WDL.minecraft.gameSettings.thirdPersonView=this.oldCameraMode;
  WDL.minecraft.gameSettings.hideGUI=oldHideHud;
  WDL.minecraft.gameSettings.showDebugInfo=oldShowDebug;
  WDL.minecraft.gameSettings.chatVisibility=oldChatVisibility;
  WDL.minecraft.setRenderViewEntity(this.oldRenderViewEntity);
}","@Override public void onGuiClosed(){
  super.onGuiClosed();
  this.deactivateRenderViewEntity();
}"
10320,"/** 
 * Draws the given button (for multi-version compatability, this is needed for lists)
 * @param button The button to draw.  Should already have been positioned.
 */
public static void drawButton(GuiButton button,Minecraft mc,int mouseX,int mouseY){
  button.drawButton(mc,mouseX,mouseY);
}","@Override public void drawButton(Minecraft mc,int mouseX,int mouseY){
  beforeDraw();
  super.drawButton(mc,mouseX,mouseY);
  afterDraw();
}"
10321,"/** 
 * Draws the given button (for multi-version compatability, this is needed for lists)
 * @param button The button to draw.  Should already have been positioned.
 */
public static void drawButton(GuiButton button,Minecraft mc,int mouseX,int mouseY){
  button.drawButton(mc,mouseX,mouseY);
}","@Override public void drawButton(Minecraft mc,int mouseX,int mouseY){
  beforeDraw();
  super.drawButton(mc,mouseX,mouseY);
  afterDraw();
}"
10322,"/** 
 * Draws the given button (for multi-version compatability, this is needed for lists)
 * @param button The button to draw.  Should already have been positioned.
 */
public static void drawButton(GuiButton button,Minecraft mc,int mouseX,int mouseY){
  button.drawButton(mc,mouseX,mouseY);
}","@Override public void drawButton(Minecraft mc,int mouseX,int mouseY){
  beforeDraw();
  super.drawButton(mc,mouseX,mouseY);
  afterDraw();
}"
10323,"/** 
 * Draws the given button (for multi-version compatability, this is needed for lists)
 * @param button The button to draw.  Should already have been positioned.
 */
public static void drawButton(GuiButton button,Minecraft mc,int mouseX,int mouseY){
  button.drawButton(mc,mouseX,mouseY);
}","@Override public void drawButton(Minecraft mc,int mouseX,int mouseY){
  beforeDraw();
  super.drawButton(mc,mouseX,mouseY);
  afterDraw();
}"
10324,"/** 
 * Returns true if the given world has skylight data.
 * @return a boolean
 */
public static boolean hasSkyLight(World world){
  return !world.provider.hasNoSky();
}","/** 
 * Returns true if the given world has skylight data.
 * @return a boolean
 */
public static boolean hasSkyLight(World world){
  return !world.provider.isNether();
}"
10325,"/** 
 * Returns true if the given world has skylight data.
 * @return a boolean
 */
public static boolean hasSkyLight(World world){
  return !world.provider.hasNoSky();
}","/** 
 * Returns true if the given world has skylight data.
 * @return a boolean
 */
public static boolean hasSkyLight(World world){
  return !world.provider.isNether();
}"
10326,"/** 
 * Calls saveChunk for all currently loaded chunks
 * @throws IllegalAccessException
 * @throws IllegalArgumentException
 */
public static void saveChunks(GuiWDLSaveProgress progressScreen) throws IllegalArgumentException, IllegalAccessException {
  if (!WDLPluginChannels.canDownloadAtAll()) {
    return;
  }
  WDLMessages.chatMessageTranslated(WDLMessageTypes.SAVING,""String_Node_Str"");
  ChunkProviderClient chunkProvider=(ChunkProviderClient)worldClient.getChunkProvider();
  @SuppressWarnings(""String_Node_Str"") Long2ObjectMap<Chunk> chunkMap=(Long2ObjectMap<Chunk>)ReflectionUtils.findAndGetPrivateField(chunkProvider,Long2ObjectMap.class);
  List<Chunk> chunks=new ArrayList<Chunk>(chunkMap.values());
  progressScreen.startMajorTask(I18n.format(""String_Node_Str""),chunks.size());
  for (int currentChunk=0; currentChunk < chunks.size(); currentChunk++) {
    Chunk c=(Chunk)chunks.get(currentChunk);
    if (c != null) {
      if (!WDLPluginChannels.canSaveChunk(c)) {
        continue;
      }
      progressScreen.setMinorTaskProgress(I18n.format(""String_Node_Str"",c.xPosition,c.zPosition),currentChunk);
      saveChunk(c);
    }
  }
  WDLMessages.chatMessageTranslated(WDLMessageTypes.SAVING,""String_Node_Str"");
}","/** 
 * Calls saveChunk for all currently loaded chunks
 * @throws IllegalAccessException
 * @throws IllegalArgumentException
 */
public static void saveChunks(GuiWDLSaveProgress progressScreen) throws IllegalArgumentException, IllegalAccessException {
  if (!WDLPluginChannels.canDownloadAtAll()) {
    return;
  }
  WDLMessages.chatMessageTranslated(WDLMessageTypes.SAVING,""String_Node_Str"");
  ChunkProviderClient chunkProvider=(ChunkProviderClient)worldClient.getChunkProvider();
  @SuppressWarnings(""String_Node_Str"") Long2ObjectMap<Chunk> chunkMap=(Long2ObjectMap<Chunk>)ReflectionUtils.findAndGetPrivateField(chunkProvider,Long2ObjectMap.class);
  List<Chunk> chunks=new ArrayList<Chunk>(chunkMap.values());
  progressScreen.startMajorTask(I18n.format(""String_Node_Str""),chunks.size());
  for (int currentChunk=0; currentChunk < chunks.size(); currentChunk++) {
    Chunk c=(Chunk)chunks.get(currentChunk);
    if (c != null) {
      if (!WDLPluginChannels.canSaveChunk(c)) {
        continue;
      }
      progressScreen.setMinorTaskProgress(I18n.format(""String_Node_Str"",c.x,c.z),currentChunk);
      saveChunk(c);
    }
  }
  WDLMessages.chatMessageTranslated(WDLMessageTypes.SAVING,""String_Node_Str"");
}"
10327,"/** 
 * Import all non-overwritten TileEntities, then save the chunk
 */
public static void saveChunk(Chunk c){
  if (!WDLPluginChannels.canDownloadAtAll()) {
    return;
  }
  if (!WDLPluginChannels.canSaveChunk(c)) {
    return;
  }
  try {
    if (isEmpty(c)) {
      logger.warn(""String_Node_Str"" + c + ""String_Node_Str""+ c.xPosition+ ""String_Node_Str""+ c.zPosition+ ""String_Node_Str"");
      return;
    }
    chunkLoader.saveChunk(worldClient,c);
  }
 catch (  Exception e) {
    WDLMessages.chatMessageTranslated(WDLMessageTypes.ERROR,""String_Node_Str"",c.xPosition,c.zPosition,e);
  }
}","/** 
 * Import all non-overwritten TileEntities, then save the chunk
 */
public static void saveChunk(Chunk c){
  if (!WDLPluginChannels.canDownloadAtAll()) {
    return;
  }
  if (!WDLPluginChannels.canSaveChunk(c)) {
    return;
  }
  try {
    if (isEmpty(c)) {
      logger.warn(""String_Node_Str"" + c + ""String_Node_Str""+ c.x+ ""String_Node_Str""+ c.z+ ""String_Node_Str"");
      return;
    }
    chunkLoader.saveChunk(worldClient,c);
  }
 catch (  Exception e) {
    WDLMessages.chatMessageTranslated(WDLMessageTypes.ERROR,""String_Node_Str"",c.x,c.z,e);
  }
}"
10328,"/** 
 * Adds information to the given crash report.
 * @param report The report to add sections to.
 */
public static void addInfoToCrash(CrashReport report){
  int stSize;
  try {
    stSize=Thread.currentThread().getStackTrace().length - 1;
  }
 catch (  Exception e) {
    stSize=0;
  }
  CrashReportCategory core=report.makeCategoryDepth(""String_Node_Str"",stSize);
  core.addCrashSection(""String_Node_Str"",VersionConstants.getModVersion());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getMinecraftVersionInfo());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getExpectedVersion());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getProtocolVersion());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getDataVersion());
  core.setDetail(""String_Node_Str"",new ICrashReportDetail<String>(){
    @Override public String call() throws Exception {
      String path=new File(WDL.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
      String username=System.getProperty(""String_Node_Str"");
      path=path.replace(username,""String_Node_Str"");
      return path;
    }
  }
);
  CrashReportCategory state=report.makeCategoryDepth(""String_Node_Str"",stSize);
  state.addCrashSection(""String_Node_Str"",minecraft);
  state.addCrashSection(""String_Node_Str"",worldClient);
  state.addCrashSection(""String_Node_Str"",networkManager);
  state.addCrashSection(""String_Node_Str"",thePlayer);
  state.addCrashSection(""String_Node_Str"",windowContainer);
  state.addCrashSection(""String_Node_Str"",lastClickedBlock);
  state.addCrashSection(""String_Node_Str"",lastEntity);
  state.addCrashSection(""String_Node_Str"",saveHandler);
  state.addCrashSection(""String_Node_Str"",chunkLoader);
  state.addCrashSection(""String_Node_Str"",newTileEntities);
  state.addCrashSection(""String_Node_Str"",newEntities);
  state.addCrashSection(""String_Node_Str"",newMapDatas);
  state.addCrashSection(""String_Node_Str"",downloading);
  state.addCrashSection(""String_Node_Str"",isMultiworld);
  state.addCrashSection(""String_Node_Str"",propsFound);
  state.addCrashSection(""String_Node_Str"",startOnChange);
  state.addCrashSection(""String_Node_Str"",overrideLastModifiedCheck);
  state.addCrashSection(""String_Node_Str"",saving);
  state.addCrashSection(""String_Node_Str"",worldLoadingDeferred);
  state.addCrashSection(""String_Node_Str"",worldName);
  state.addCrashSection(""String_Node_Str"",baseFolderName);
  CrashReportCategory base=report.makeCategoryDepth(""String_Node_Str"",stSize);
  if (baseProps != null) {
    if (!baseProps.isEmpty()) {
      for (      Map.Entry<Object,Object> e : baseProps.entrySet()) {
        if (!(e.getKey() instanceof String)) {
          logger.warn(""String_Node_Str"" + e.getKey() + ""String_Node_Str"");
          continue;
        }
        base.addCrashSection((String)e.getKey(),e.getValue());
      }
    }
 else {
      base.addCrashSection(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    base.addCrashSection(""String_Node_Str"",""String_Node_Str"");
  }
  CrashReportCategory world=report.makeCategoryDepth(""String_Node_Str"",stSize);
  if (worldProps != null) {
    if (!worldProps.isEmpty()) {
      for (      Map.Entry<Object,Object> e : worldProps.entrySet()) {
        if (!(e.getKey() instanceof String)) {
          logger.warn(""String_Node_Str"" + e.getKey() + ""String_Node_Str"");
          continue;
        }
        world.addCrashSection((String)e.getKey(),e.getValue());
      }
    }
 else {
      world.addCrashSection(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    world.addCrashSection(""String_Node_Str"",""String_Node_Str"");
  }
  CrashReportCategory global=report.makeCategoryDepth(""String_Node_Str"",stSize);
  if (globalProps != null) {
    if (!globalProps.isEmpty()) {
      for (      Map.Entry<Object,Object> e : globalProps.entrySet()) {
        if (!(e.getKey() instanceof String)) {
          logger.warn(""String_Node_Str"" + e.getKey() + ""String_Node_Str"");
          continue;
        }
        global.addCrashSection((String)e.getKey(),e.getValue());
      }
    }
 else {
      global.addCrashSection(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    global.addCrashSection(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Adds information to the given crash report.
 * @param report The report to add sections to.
 */
public static void addInfoToCrash(CrashReport report){
  int stSize;
  try {
    stSize=Thread.currentThread().getStackTrace().length - 1;
  }
 catch (  Exception e) {
    stSize=0;
  }
  CrashReportCategory core=report.makeCategoryDepth(""String_Node_Str"",stSize);
  core.addCrashSection(""String_Node_Str"",VersionConstants.getModVersion());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getMinecraftVersionInfo());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getExpectedVersion());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getProtocolVersion());
  core.addCrashSection(""String_Node_Str"",VersionConstants.getDataVersion());
  core.addDetail(""String_Node_Str"",new ICrashReportDetail<String>(){
    @Override public String call() throws Exception {
      String path=new File(WDL.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
      String username=System.getProperty(""String_Node_Str"");
      path=path.replace(username,""String_Node_Str"");
      return path;
    }
  }
);
  CrashReportCategory state=report.makeCategoryDepth(""String_Node_Str"",stSize);
  state.addCrashSection(""String_Node_Str"",minecraft);
  state.addCrashSection(""String_Node_Str"",worldClient);
  state.addCrashSection(""String_Node_Str"",networkManager);
  state.addCrashSection(""String_Node_Str"",thePlayer);
  state.addCrashSection(""String_Node_Str"",windowContainer);
  state.addCrashSection(""String_Node_Str"",lastClickedBlock);
  state.addCrashSection(""String_Node_Str"",lastEntity);
  state.addCrashSection(""String_Node_Str"",saveHandler);
  state.addCrashSection(""String_Node_Str"",chunkLoader);
  state.addCrashSection(""String_Node_Str"",newTileEntities);
  state.addCrashSection(""String_Node_Str"",newEntities);
  state.addCrashSection(""String_Node_Str"",newMapDatas);
  state.addCrashSection(""String_Node_Str"",downloading);
  state.addCrashSection(""String_Node_Str"",isMultiworld);
  state.addCrashSection(""String_Node_Str"",propsFound);
  state.addCrashSection(""String_Node_Str"",startOnChange);
  state.addCrashSection(""String_Node_Str"",overrideLastModifiedCheck);
  state.addCrashSection(""String_Node_Str"",saving);
  state.addCrashSection(""String_Node_Str"",worldLoadingDeferred);
  state.addCrashSection(""String_Node_Str"",worldName);
  state.addCrashSection(""String_Node_Str"",baseFolderName);
  CrashReportCategory base=report.makeCategoryDepth(""String_Node_Str"",stSize);
  if (baseProps != null) {
    if (!baseProps.isEmpty()) {
      for (      Map.Entry<Object,Object> e : baseProps.entrySet()) {
        if (!(e.getKey() instanceof String)) {
          logger.warn(""String_Node_Str"" + e.getKey() + ""String_Node_Str"");
          continue;
        }
        base.addCrashSection((String)e.getKey(),e.getValue());
      }
    }
 else {
      base.addCrashSection(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    base.addCrashSection(""String_Node_Str"",""String_Node_Str"");
  }
  CrashReportCategory world=report.makeCategoryDepth(""String_Node_Str"",stSize);
  if (worldProps != null) {
    if (!worldProps.isEmpty()) {
      for (      Map.Entry<Object,Object> e : worldProps.entrySet()) {
        if (!(e.getKey() instanceof String)) {
          logger.warn(""String_Node_Str"" + e.getKey() + ""String_Node_Str"");
          continue;
        }
        world.addCrashSection((String)e.getKey(),e.getValue());
      }
    }
 else {
      world.addCrashSection(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    world.addCrashSection(""String_Node_Str"",""String_Node_Str"");
  }
  CrashReportCategory global=report.makeCategoryDepth(""String_Node_Str"",stSize);
  if (globalProps != null) {
    if (!globalProps.isEmpty()) {
      for (      Map.Entry<Object,Object> e : globalProps.entrySet()) {
        if (!(e.getKey() instanceof String)) {
          logger.warn(""String_Node_Str"" + e.getKey() + ""String_Node_Str"");
          continue;
        }
        global.addCrashSection((String)e.getKey(),e.getValue());
      }
    }
 else {
      global.addCrashSection(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    global.addCrashSection(""String_Node_Str"",""String_Node_Str"");
  }
}"
10329,"private static boolean isEmpty(Chunk c){
  if (c.isEmpty() || c instanceof EmptyChunk) {
    return true;
  }
  ExtendedBlockStorage[] array=c.getBlockStorageArray();
  for (int i=1; i < array.length; i++) {
    if (array[i] != Chunk.NULL_BLOCK_STORAGE) {
      return false;
    }
  }
  if (array[0] != Chunk.NULL_BLOCK_STORAGE) {
    for (int y=0; y < 16; y++) {
      for (int z=0; z < 16; z++) {
        for (int x=0; x < 16; x++) {
          int id=Block.getStateId(array[0].get(x,y,z));
          id=(id & 0xFFF) << 4 | (id & 0xF000) >> 12;
          if ((id > 0x00F) && (id < 0x1A0 || id > 0x1AF)) {
            return false;
          }
        }
      }
    }
    logger.warn(""String_Node_Str"" + c.xPosition + ""String_Node_Str""+ c.zPosition);
  }
 else {
    logger.warn(""String_Node_Str"" + c.xPosition + ""String_Node_Str""+ c.zPosition);
  }
  return true;
}","private static boolean isEmpty(Chunk c){
  if (c.isEmpty() || c instanceof EmptyChunk) {
    return true;
  }
  ExtendedBlockStorage[] array=c.getBlockStorageArray();
  for (int i=1; i < array.length; i++) {
    if (array[i] != Chunk.NULL_BLOCK_STORAGE) {
      return false;
    }
  }
  if (array[0] != Chunk.NULL_BLOCK_STORAGE) {
    for (int y=0; y < 16; y++) {
      for (int z=0; z < 16; z++) {
        for (int x=0; x < 16; x++) {
          int id=Block.getStateId(array[0].get(x,y,z));
          id=(id & 0xFFF) << 4 | (id & 0xF000) >> 12;
          if ((id > 0x00F) && (id < 0x1A0 || id > 0x1AF)) {
            return false;
          }
        }
      }
    }
    logger.warn(""String_Node_Str"" + c.x + ""String_Node_Str""+ c.z);
  }
 else {
    logger.warn(""String_Node_Str"" + c.x + ""String_Node_Str""+ c.z);
  }
  return true;
}"
10330,"/** 
 * Gets a map of all tile entities in the previous version of that chunk. Only ""problematic"" tile entities (those that require manual opening) will be imported, and the tile entity must be in the correct position (IE, the block at the tile entity's position must match the block normally used with that tile entity). See  {@link #shouldImportTileEntity(String,BlockPos)} for details.
 * @param chunk The chunk to import tile entities from.
 * @return A map of positions to tile entities.
 */
public Map<BlockPos,NBTTagCompound> getOldTileEntities(Chunk chunk){
  DataInputStream dis=null;
  Map<BlockPos,NBTTagCompound> returned=new HashMap<BlockPos,NBTTagCompound>();
  try {
    dis=RegionFileCache.getChunkInputStream(chunkSaveLocation,chunk.xPosition,chunk.zPosition);
    if (dis == null) {
      return returned;
    }
    NBTTagCompound chunkNBT=CompressedStreamTools.read(dis);
    NBTTagCompound levelNBT=chunkNBT.getCompoundTag(""String_Node_Str"");
    NBTTagList oldList=levelNBT.getTagList(""String_Node_Str"",10);
    if (oldList != null) {
      for (int i=0; i < oldList.tagCount(); i++) {
        NBTTagCompound oldNBT=oldList.getCompoundTagAt(i);
        String entityID=oldNBT.getString(""String_Node_Str"");
        BlockPos pos=new BlockPos(oldNBT.getInteger(""String_Node_Str""),oldNBT.getInteger(""String_Node_Str""),oldNBT.getInteger(""String_Node_Str""));
        Block block=chunk.getBlockState(pos).getBlock();
        if (shouldImportTileEntity(entityID,pos,block,oldNBT,chunk)) {
          returned.put(pos,oldNBT);
        }
 else {
          WDLMessages.chatMessageTranslated(WDLMessageTypes.LOAD_TILE_ENTITY,""String_Node_Str"",entityID,pos);
        }
      }
    }
  }
 catch (  Exception e) {
    WDLMessages.chatMessageTranslated(WDLMessageTypes.ERROR,""String_Node_Str"",chunk.xPosition,chunk.zPosition,e);
  }
 finally {
    if (dis != null) {
      try {
        dis.close();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
  return returned;
}","/** 
 * Gets a map of all tile entities in the previous version of that chunk. Only ""problematic"" tile entities (those that require manual opening) will be imported, and the tile entity must be in the correct position (IE, the block at the tile entity's position must match the block normally used with that tile entity). See  {@link #shouldImportTileEntity(String,BlockPos)} for details.
 * @param chunk The chunk to import tile entities from.
 * @return A map of positions to tile entities.
 */
public Map<BlockPos,NBTTagCompound> getOldTileEntities(Chunk chunk){
  DataInputStream dis=null;
  Map<BlockPos,NBTTagCompound> returned=new HashMap<BlockPos,NBTTagCompound>();
  try {
    dis=RegionFileCache.getChunkInputStream(chunkSaveLocation,chunk.x,chunk.z);
    if (dis == null) {
      return returned;
    }
    NBTTagCompound chunkNBT=CompressedStreamTools.read(dis);
    NBTTagCompound levelNBT=chunkNBT.getCompoundTag(""String_Node_Str"");
    NBTTagList oldList=levelNBT.getTagList(""String_Node_Str"",10);
    if (oldList != null) {
      for (int i=0; i < oldList.tagCount(); i++) {
        NBTTagCompound oldNBT=oldList.getCompoundTagAt(i);
        String entityID=oldNBT.getString(""String_Node_Str"");
        BlockPos pos=new BlockPos(oldNBT.getInteger(""String_Node_Str""),oldNBT.getInteger(""String_Node_Str""),oldNBT.getInteger(""String_Node_Str""));
        Block block=chunk.getBlockState(pos).getBlock();
        if (shouldImportTileEntity(entityID,pos,block,oldNBT,chunk)) {
          returned.put(pos,oldNBT);
        }
 else {
          WDLMessages.chatMessageTranslated(WDLMessageTypes.LOAD_TILE_ENTITY,""String_Node_Str"",entityID,pos);
        }
      }
    }
  }
 catch (  Exception e) {
    WDLMessages.chatMessageTranslated(WDLMessageTypes.ERROR,""String_Node_Str"",chunk.x,chunk.z,e);
  }
 finally {
    if (dis != null) {
      try {
        dis.close();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
  return returned;
}"
10331,"/** 
 * Writes the given chunk, creating an NBT compound tag. Note that this does <b>not</b> override the private method  {@link AnvilChunkLoader#writeChunkToNBT(Chunk,World,NBTCompoundTag)}. That method is private and cannot be overridden; plus, this version returns a tag rather than modifying the one passed as an argument. However, that method
 * @param chunk The chunk to write
 * @param world The world the chunk is in, used to determine the modified time.
 * @return A new NBTTagCompound
 */
private NBTTagCompound writeChunkToNBT(Chunk chunk,World world){
  NBTTagCompound compound=new NBTTagCompound();
  compound.setByte(""String_Node_Str"",(byte)1);
  compound.setInteger(""String_Node_Str"",chunk.xPosition);
  compound.setInteger(""String_Node_Str"",chunk.zPosition);
  compound.setLong(""String_Node_Str"",world.getTotalWorldTime());
  compound.setIntArray(""String_Node_Str"",chunk.getHeightMap());
  compound.setBoolean(""String_Node_Str"",true);
  compound.setBoolean(""String_Node_Str"",chunk.isLightPopulated());
  compound.setLong(""String_Node_Str"",chunk.getInhabitedTime());
  ExtendedBlockStorage[] blockStorageArray=chunk.getBlockStorageArray();
  NBTTagList blockStorageList=new NBTTagList();
  boolean hasSky=VersionedProperties.hasSkyLight(world);
  for (  ExtendedBlockStorage blockStorage : blockStorageArray) {
    if (blockStorage != null) {
      for (int y=0; y < 16; y++) {
        for (int z=0; z < 16; z++) {
          for (int x=0; x < 16; x++) {
            IBlockState state=blockStorage.get(x,y,z);
            int id=Block.getStateId(state);
            id=(id & 0xFFF) << 4 | (id & 0xF000) >> 12;
            if (state.getBlock() instanceof BlockTripWire) {
              logger.info(String.format(""String_Node_Str"",chunk.xPosition,chunk.zPosition,blockStorage.getYLocation(),x,y,z,state,id));
            }
          }
        }
      }
      NBTTagCompound blockData=new NBTTagCompound();
      blockData.setByte(""String_Node_Str"",(byte)(blockStorage.getYLocation() >> 4 & 255));
      byte[] buffer=new byte[4096];
      NibbleArray nibblearray=new NibbleArray();
      NibbleArray nibblearray1=blockStorage.getData().getDataForNBT(buffer,nibblearray);
      blockData.setByteArray(""String_Node_Str"",buffer);
      blockData.setByteArray(""String_Node_Str"",nibblearray.getData());
      if (nibblearray1 != null) {
        blockData.setByteArray(""String_Node_Str"",nibblearray1.getData());
      }
      NibbleArray blocklightArray=blockStorage.getBlocklightArray();
      int lightArrayLen=blocklightArray.getData().length;
      blockData.setByteArray(""String_Node_Str"",blocklightArray.getData());
      if (hasSky) {
        NibbleArray skylightArray=blockStorage.getSkylightArray();
        if (skylightArray != null) {
          blockData.setByteArray(""String_Node_Str"",skylightArray.getData());
        }
 else {
          logger.error(""String_Node_Str"" + chunk.xPosition + ""String_Node_Str""+ chunk.zPosition+ ""String_Node_Str""+ ""String_Node_Str"");
          blockData.setByteArray(""String_Node_Str"",new byte[lightArrayLen]);
        }
      }
 else {
        blockData.setByteArray(""String_Node_Str"",new byte[lightArrayLen]);
      }
      blockStorageList.appendTag(blockData);
    }
  }
  compound.setTag(""String_Node_Str"",blockStorageList);
  compound.setByteArray(""String_Node_Str"",chunk.getBiomeArray());
  chunk.setHasEntities(false);
  NBTTagList entityList=getEntityList(chunk);
  compound.setTag(""String_Node_Str"",entityList);
  NBTTagList tileEntityList=getTileEntityList(chunk);
  compound.setTag(""String_Node_Str"",tileEntityList);
  List<NextTickListEntry> updateList=world.getPendingBlockUpdates(chunk,false);
  if (updateList != null) {
    long worldTime=world.getTotalWorldTime();
    NBTTagList entries=new NBTTagList();
    for (    NextTickListEntry entry : updateList) {
      NBTTagCompound entryTag=new NBTTagCompound();
      ResourceLocation location=(ResourceLocation)Block.REGISTRY.getNameForObject(entry.getBlock());
      entryTag.setString(""String_Node_Str"",location == null ? ""String_Node_Str"" : location.toString());
      entryTag.setInteger(""String_Node_Str"",entry.position.getX());
      entryTag.setInteger(""String_Node_Str"",entry.position.getY());
      entryTag.setInteger(""String_Node_Str"",entry.position.getZ());
      entryTag.setInteger(""String_Node_Str"",(int)(entry.scheduledTime - worldTime));
      entryTag.setInteger(""String_Node_Str"",entry.priority);
      entries.appendTag(entryTag);
    }
    compound.setTag(""String_Node_Str"",entries);
  }
  return compound;
}","/** 
 * Writes the given chunk, creating an NBT compound tag. Note that this does <b>not</b> override the private method  {@link AnvilChunkLoader#writeChunkToNBT(Chunk,World,NBTCompoundTag)}. That method is private and cannot be overridden; plus, this version returns a tag rather than modifying the one passed as an argument. However, that method
 * @param chunk The chunk to write
 * @param world The world the chunk is in, used to determine the modified time.
 * @return A new NBTTagCompound
 */
private NBTTagCompound writeChunkToNBT(Chunk chunk,World world){
  NBTTagCompound compound=new NBTTagCompound();
  compound.setByte(""String_Node_Str"",(byte)1);
  compound.setInteger(""String_Node_Str"",chunk.x);
  compound.setInteger(""String_Node_Str"",chunk.z);
  compound.setLong(""String_Node_Str"",world.getTotalWorldTime());
  compound.setIntArray(""String_Node_Str"",chunk.getHeightMap());
  compound.setBoolean(""String_Node_Str"",true);
  compound.setBoolean(""String_Node_Str"",chunk.isLightPopulated());
  compound.setLong(""String_Node_Str"",chunk.getInhabitedTime());
  ExtendedBlockStorage[] blockStorageArray=chunk.getBlockStorageArray();
  NBTTagList blockStorageList=new NBTTagList();
  boolean hasSky=VersionedProperties.hasSkyLight(world);
  for (  ExtendedBlockStorage blockStorage : blockStorageArray) {
    if (blockStorage != null) {
      for (int y=0; y < 16; y++) {
        for (int z=0; z < 16; z++) {
          for (int x=0; x < 16; x++) {
            IBlockState state=blockStorage.get(x,y,z);
            int id=Block.getStateId(state);
            id=(id & 0xFFF) << 4 | (id & 0xF000) >> 12;
            if (state.getBlock() instanceof BlockTripWire) {
              logger.info(String.format(""String_Node_Str"",chunk.x,chunk.z,blockStorage.getYLocation(),x,y,z,state,id));
            }
          }
        }
      }
      NBTTagCompound blockData=new NBTTagCompound();
      blockData.setByte(""String_Node_Str"",(byte)(blockStorage.getYLocation() >> 4 & 255));
      byte[] buffer=new byte[4096];
      NibbleArray nibblearray=new NibbleArray();
      NibbleArray nibblearray1=blockStorage.getData().getDataForNBT(buffer,nibblearray);
      blockData.setByteArray(""String_Node_Str"",buffer);
      blockData.setByteArray(""String_Node_Str"",nibblearray.getData());
      if (nibblearray1 != null) {
        blockData.setByteArray(""String_Node_Str"",nibblearray1.getData());
      }
      NibbleArray blocklightArray=blockStorage.getBlockLight();
      int lightArrayLen=blocklightArray.getData().length;
      blockData.setByteArray(""String_Node_Str"",blocklightArray.getData());
      if (hasSky) {
        NibbleArray skylightArray=blockStorage.getSkyLight();
        if (skylightArray != null) {
          blockData.setByteArray(""String_Node_Str"",skylightArray.getData());
        }
 else {
          logger.error(""String_Node_Str"" + chunk.x + ""String_Node_Str""+ chunk.z+ ""String_Node_Str""+ ""String_Node_Str"");
          blockData.setByteArray(""String_Node_Str"",new byte[lightArrayLen]);
        }
      }
 else {
        blockData.setByteArray(""String_Node_Str"",new byte[lightArrayLen]);
      }
      blockStorageList.appendTag(blockData);
    }
  }
  compound.setTag(""String_Node_Str"",blockStorageList);
  compound.setByteArray(""String_Node_Str"",chunk.getBiomeArray());
  chunk.setHasEntities(false);
  NBTTagList entityList=getEntityList(chunk);
  compound.setTag(""String_Node_Str"",entityList);
  NBTTagList tileEntityList=getTileEntityList(chunk);
  compound.setTag(""String_Node_Str"",tileEntityList);
  List<NextTickListEntry> updateList=world.getPendingBlockUpdates(chunk,false);
  if (updateList != null) {
    long worldTime=world.getTotalWorldTime();
    NBTTagList entries=new NBTTagList();
    for (    NextTickListEntry entry : updateList) {
      NBTTagCompound entryTag=new NBTTagCompound();
      ResourceLocation location=(ResourceLocation)Block.REGISTRY.getNameForObject(entry.getBlock());
      entryTag.setString(""String_Node_Str"",location == null ? ""String_Node_Str"" : location.toString());
      entryTag.setInteger(""String_Node_Str"",entry.position.getX());
      entryTag.setInteger(""String_Node_Str"",entry.position.getY());
      entryTag.setInteger(""String_Node_Str"",entry.position.getZ());
      entryTag.setInteger(""String_Node_Str"",(int)(entry.scheduledTime - worldTime));
      entryTag.setInteger(""String_Node_Str"",entry.priority);
      entries.appendTag(entryTag);
    }
    compound.setTag(""String_Node_Str"",entries);
  }
  return compound;
}"
10332,"/** 
 * Creates an NBT list of all entities in this chunk, adding in custom entities.
 * @param chunk
 * @return
 */
public NBTTagList getEntityList(Chunk chunk){
  NBTTagList entityList=new NBTTagList();
  if (!WDLPluginChannels.canSaveEntities(chunk)) {
    return entityList;
  }
  List<Entity> entities=new ArrayList<Entity>();
  for (  ClassInheritanceMultiMap<Entity> map : chunk.getEntityLists()) {
    entities.addAll(map);
  }
  for (  Entity e : WDL.newEntities.get(chunk.getPos())) {
    e.isDead=false;
    entities.add(e);
  }
  for (  Entity entity : entities) {
    if (entity == null) {
      logger.warn(""String_Node_Str"" + chunk.getPos());
      continue;
    }
    if (!shouldSaveEntity(entity)) {
      continue;
    }
    for (    ModInfo<IEntityEditor> info : WDLApi.getImplementingExtensions(IEntityEditor.class)) {
      try {
        if (info.mod.shouldEdit(entity)) {
          info.mod.editEntity(entity);
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(""String_Node_Str"" + entity + ""String_Node_Str""+ chunk.getPos()+ ""String_Node_Str""+ info,ex);
      }
    }
    NBTTagCompound entityData=new NBTTagCompound();
    try {
      if (entity.writeToNBTOptional(entityData)) {
        chunk.setHasEntities(true);
        entityList.appendTag(entityData);
      }
    }
 catch (    Exception e) {
      WDLMessages.chatMessageTranslated(WDLMessageTypes.ERROR,""String_Node_Str"",entity,chunk.xPosition,chunk.zPosition,e);
      logger.warn(""String_Node_Str"" + entityData);
      logger.warn(""String_Node_Str"");
      try {
        List<EntityDataManager.DataEntry<?>> objects=entity.getDataManager().getAll();
        if (objects == null) {
          logger.warn(""String_Node_Str"");
        }
 else {
          logger.warn(objects);
          for (          EntityDataManager.DataEntry<?> obj : objects) {
            if (obj != null) {
              logger.warn(""String_Node_Str"" + obj.getValue() + ""String_Node_Str""+ obj.isDirty()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ obj.getKey().getId()+ ""String_Node_Str""+ obj.getKey().getSerializer()+ ""String_Node_Str"");
            }
          }
        }
      }
 catch (      Exception e2) {
        logger.warn(""String_Node_Str"",e);
      }
      logger.warn(""String_Node_Str"");
      continue;
    }
  }
  return entityList;
}","/** 
 * Creates an NBT list of all entities in this chunk, adding in custom entities.
 * @param chunk
 * @return
 */
public NBTTagList getEntityList(Chunk chunk){
  NBTTagList entityList=new NBTTagList();
  if (!WDLPluginChannels.canSaveEntities(chunk)) {
    return entityList;
  }
  List<Entity> entities=new ArrayList<Entity>();
  for (  ClassInheritanceMultiMap<Entity> map : chunk.getEntityLists()) {
    entities.addAll(map);
  }
  for (  Entity e : WDL.newEntities.get(chunk.getPos())) {
    e.isDead=false;
    entities.add(e);
  }
  for (  Entity entity : entities) {
    if (entity == null) {
      logger.warn(""String_Node_Str"" + chunk.getPos());
      continue;
    }
    if (!shouldSaveEntity(entity)) {
      continue;
    }
    for (    ModInfo<IEntityEditor> info : WDLApi.getImplementingExtensions(IEntityEditor.class)) {
      try {
        if (info.mod.shouldEdit(entity)) {
          info.mod.editEntity(entity);
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(""String_Node_Str"" + entity + ""String_Node_Str""+ chunk.getPos()+ ""String_Node_Str""+ info,ex);
      }
    }
    NBTTagCompound entityData=new NBTTagCompound();
    try {
      if (entity.writeToNBTOptional(entityData)) {
        chunk.setHasEntities(true);
        entityList.appendTag(entityData);
      }
    }
 catch (    Exception e) {
      WDLMessages.chatMessageTranslated(WDLMessageTypes.ERROR,""String_Node_Str"",entity,chunk.x,chunk.z,e);
      logger.warn(""String_Node_Str"" + entityData);
      logger.warn(""String_Node_Str"");
      try {
        List<EntityDataManager.DataEntry<?>> objects=entity.getDataManager().getAll();
        if (objects == null) {
          logger.warn(""String_Node_Str"");
        }
 else {
          logger.warn(objects);
          for (          EntityDataManager.DataEntry<?> obj : objects) {
            if (obj != null) {
              logger.warn(""String_Node_Str"" + obj.getValue() + ""String_Node_Str""+ obj.isDirty()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ obj.getKey().getId()+ ""String_Node_Str""+ obj.getKey().getSerializer()+ ""String_Node_Str"");
            }
          }
        }
      }
 catch (      Exception e2) {
        logger.warn(""String_Node_Str"",e);
      }
      logger.warn(""String_Node_Str"");
      continue;
    }
  }
  return entityList;
}"
10333,"/** 
 * Creates an NBT list of all tile entities in this chunk, importing tile entities as needed.
 */
public NBTTagList getTileEntityList(Chunk chunk){
  NBTTagList tileEntityList=new NBTTagList();
  if (!WDLPluginChannels.canSaveTileEntities(chunk)) {
    return tileEntityList;
  }
  Map<BlockPos,TileEntity> chunkTEMap=chunk.getTileEntityMap();
  Map<BlockPos,NBTTagCompound> oldTEMap=getOldTileEntities(chunk);
  Map<BlockPos,TileEntity> newTEMap=WDL.newTileEntities.get(chunk.getPos());
  if (newTEMap == null) {
    newTEMap=new HashMap<BlockPos,TileEntity>();
  }
  Set<BlockPos> allTELocations=new HashSet<BlockPos>();
  allTELocations.addAll(chunkTEMap.keySet());
  allTELocations.addAll(oldTEMap.keySet());
  allTELocations.addAll(newTEMap.keySet());
  for (  BlockPos pos : allTELocations) {
    if (newTEMap.containsKey(pos)) {
      NBTTagCompound compound=new NBTTagCompound();
      TileEntity te=newTEMap.get(pos);
      try {
        te.writeToNBT(compound);
      }
 catch (      Exception e) {
        WDLMessages.chatMessageTranslated(WDLMessageTypes.ERROR,""String_Node_Str"",te,pos,chunk.xPosition,chunk.zPosition,e);
        logger.warn(""String_Node_Str"" + compound);
        continue;
      }
      String entityType=compound.getString(""String_Node_Str"") + ""String_Node_Str"" + te.getClass().getCanonicalName()+ ""String_Node_Str"";
      WDLMessages.chatMessageTranslated(WDLMessageTypes.LOAD_TILE_ENTITY,""String_Node_Str"",entityType,pos);
      editTileEntity(pos,compound,TileEntityCreationMode.NEW);
      tileEntityList.appendTag(compound);
    }
 else     if (oldTEMap.containsKey(pos)) {
      NBTTagCompound compound=oldTEMap.get(pos);
      String entityType=compound.getString(""String_Node_Str"");
      WDLMessages.chatMessageTranslated(WDLMessageTypes.LOAD_TILE_ENTITY,""String_Node_Str"",entityType,pos);
      editTileEntity(pos,compound,TileEntityCreationMode.IMPORTED);
      tileEntityList.appendTag(compound);
    }
 else     if (chunkTEMap.containsKey(pos)) {
      TileEntity te=chunkTEMap.get(pos);
      NBTTagCompound compound=new NBTTagCompound();
      try {
        te.writeToNBT(compound);
      }
 catch (      Exception e) {
        WDLMessages.chatMessageTranslated(WDLMessageTypes.ERROR,""String_Node_Str"",te,pos,chunk.xPosition,chunk.zPosition,e);
        logger.warn(""String_Node_Str"" + compound);
        continue;
      }
      editTileEntity(pos,compound,TileEntityCreationMode.EXISTING);
      tileEntityList.appendTag(compound);
    }
  }
  return tileEntityList;
}","/** 
 * Creates an NBT list of all tile entities in this chunk, importing tile entities as needed.
 */
public NBTTagList getTileEntityList(Chunk chunk){
  NBTTagList tileEntityList=new NBTTagList();
  if (!WDLPluginChannels.canSaveTileEntities(chunk)) {
    return tileEntityList;
  }
  Map<BlockPos,TileEntity> chunkTEMap=chunk.getTileEntityMap();
  Map<BlockPos,NBTTagCompound> oldTEMap=getOldTileEntities(chunk);
  Map<BlockPos,TileEntity> newTEMap=WDL.newTileEntities.get(chunk.getPos());
  if (newTEMap == null) {
    newTEMap=new HashMap<BlockPos,TileEntity>();
  }
  Set<BlockPos> allTELocations=new HashSet<BlockPos>();
  allTELocations.addAll(chunkTEMap.keySet());
  allTELocations.addAll(oldTEMap.keySet());
  allTELocations.addAll(newTEMap.keySet());
  for (  BlockPos pos : allTELocations) {
    if (newTEMap.containsKey(pos)) {
      NBTTagCompound compound=new NBTTagCompound();
      TileEntity te=newTEMap.get(pos);
      try {
        te.writeToNBT(compound);
      }
 catch (      Exception e) {
        WDLMessages.chatMessageTranslated(WDLMessageTypes.ERROR,""String_Node_Str"",te,pos,chunk.x,chunk.z,e);
        logger.warn(""String_Node_Str"" + compound);
        continue;
      }
      String entityType=compound.getString(""String_Node_Str"") + ""String_Node_Str"" + te.getClass().getCanonicalName()+ ""String_Node_Str"";
      WDLMessages.chatMessageTranslated(WDLMessageTypes.LOAD_TILE_ENTITY,""String_Node_Str"",entityType,pos);
      editTileEntity(pos,compound,TileEntityCreationMode.NEW);
      tileEntityList.appendTag(compound);
    }
 else     if (oldTEMap.containsKey(pos)) {
      NBTTagCompound compound=oldTEMap.get(pos);
      String entityType=compound.getString(""String_Node_Str"");
      WDLMessages.chatMessageTranslated(WDLMessageTypes.LOAD_TILE_ENTITY,""String_Node_Str"",entityType,pos);
      editTileEntity(pos,compound,TileEntityCreationMode.IMPORTED);
      tileEntityList.appendTag(compound);
    }
 else     if (chunkTEMap.containsKey(pos)) {
      TileEntity te=chunkTEMap.get(pos);
      NBTTagCompound compound=new NBTTagCompound();
      try {
        te.writeToNBT(compound);
      }
 catch (      Exception e) {
        WDLMessages.chatMessageTranslated(WDLMessageTypes.ERROR,""String_Node_Str"",te,pos,chunk.x,chunk.z,e);
        logger.warn(""String_Node_Str"" + compound);
        continue;
      }
      editTileEntity(pos,compound,TileEntityCreationMode.EXISTING);
      tileEntityList.appendTag(compound);
    }
  }
  return tileEntityList;
}"
10334,"/** 
 * Must be called when a chunk is no longer needed and is about to be removed.
 */
public static void onChunkNoLongerNeeded(Chunk unneededChunk){
  if (!WDL.downloading) {
    return;
  }
  if (unneededChunk == null) {
    return;
  }
  if (WDLPluginChannels.canSaveChunk(unneededChunk)) {
    WDLMessages.chatMessageTranslated(WDLMessageTypes.ON_CHUNK_NO_LONGER_NEEDED,""String_Node_Str"",unneededChunk.xPosition,unneededChunk.zPosition);
    WDL.saveChunk(unneededChunk);
  }
 else {
    WDLMessages.chatMessageTranslated(WDLMessageTypes.ON_CHUNK_NO_LONGER_NEEDED,""String_Node_Str"",unneededChunk.xPosition,unneededChunk.zPosition);
  }
}","/** 
 * Must be called when a chunk is no longer needed and is about to be removed.
 */
public static void onChunkNoLongerNeeded(Chunk unneededChunk){
  if (!WDL.downloading) {
    return;
  }
  if (unneededChunk == null) {
    return;
  }
  if (WDLPluginChannels.canSaveChunk(unneededChunk)) {
    WDLMessages.chatMessageTranslated(WDLMessageTypes.ON_CHUNK_NO_LONGER_NEEDED,""String_Node_Str"",unneededChunk.x,unneededChunk.z);
    WDL.saveChunk(unneededChunk);
  }
 else {
    WDLMessages.chatMessageTranslated(WDLMessageTypes.ON_CHUNK_NO_LONGER_NEEDED,""String_Node_Str"",unneededChunk.x,unneededChunk.z);
  }
}"
10335,"/** 
 * Adds the ""Download this world"" button to the ingame pause GUI.
 * @param gui
 * @param buttonList
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void injectWDLButtons(GuiIngameMenu gui,List buttonList){
  int insertAtYPos=0;
  for (  Object obj : buttonList) {
    GuiButton btn=(GuiButton)obj;
    if (btn.id == 5) {
      insertAtYPos=btn.yPosition + 24;
      break;
    }
  }
  for (  Object obj : buttonList) {
    GuiButton btn=(GuiButton)obj;
    if (btn.yPosition >= insertAtYPos) {
      btn.yPosition+=24;
    }
  }
  GuiButton wdlDownload=new GuiButton(WDLs,gui.width / 2 - 100,insertAtYPos,170,20,null);
  GuiButton wdlOptions=new GuiButton(WDLo,gui.width / 2 + 71,insertAtYPos,28,20,I18n.format(""String_Node_Str""));
  if (WDL.minecraft.isIntegratedServerRunning()) {
    wdlDownload.displayString=I18n.format(""String_Node_Str"");
    wdlDownload.enabled=false;
  }
 else   if (!WDLPluginChannels.canDownloadAtAll()) {
    if (WDLPluginChannels.canRequestPermissions()) {
      wdlDownload.displayString=I18n.format(""String_Node_Str"");
    }
 else {
      wdlDownload.displayString=I18n.format(""String_Node_Str"");
      wdlDownload.enabled=false;
    }
  }
 else   if (WDL.saving) {
    wdlDownload.displayString=I18n.format(""String_Node_Str"");
    wdlDownload.enabled=false;
    wdlOptions.enabled=false;
  }
 else   if (WDL.downloading) {
    wdlDownload.displayString=I18n.format(""String_Node_Str"");
  }
 else {
    wdlDownload.displayString=I18n.format(""String_Node_Str"");
  }
  buttonList.add(wdlDownload);
  buttonList.add(wdlOptions);
}","/** 
 * Adds the ""Download this world"" button to the ingame pause GUI.
 * @param gui
 * @param buttonList
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void injectWDLButtons(GuiIngameMenu gui,List buttonList){
  int insertAtYPos=0;
  for (  Object obj : buttonList) {
    GuiButton btn=(GuiButton)obj;
    if (btn.id == 5) {
      insertAtYPos=btn.y + 24;
      break;
    }
  }
  for (  Object obj : buttonList) {
    GuiButton btn=(GuiButton)obj;
    if (btn.y >= insertAtYPos) {
      btn.y+=24;
    }
  }
  GuiButton wdlDownload=new GuiButton(WDLs,gui.width / 2 - 100,insertAtYPos,170,20,null);
  GuiButton wdlOptions=new GuiButton(WDLo,gui.width / 2 + 71,insertAtYPos,28,20,I18n.format(""String_Node_Str""));
  if (WDL.minecraft.isIntegratedServerRunning()) {
    wdlDownload.displayString=I18n.format(""String_Node_Str"");
    wdlDownload.enabled=false;
  }
 else   if (!WDLPluginChannels.canDownloadAtAll()) {
    if (WDLPluginChannels.canRequestPermissions()) {
      wdlDownload.displayString=I18n.format(""String_Node_Str"");
    }
 else {
      wdlDownload.displayString=I18n.format(""String_Node_Str"");
      wdlDownload.enabled=false;
    }
  }
 else   if (WDL.saving) {
    wdlDownload.displayString=I18n.format(""String_Node_Str"");
    wdlDownload.enabled=false;
    wdlOptions.enabled=false;
  }
 else   if (WDL.downloading) {
    wdlDownload.displayString=I18n.format(""String_Node_Str"");
  }
 else {
    wdlDownload.displayString=I18n.format(""String_Node_Str"");
  }
  buttonList.add(wdlDownload);
  buttonList.add(wdlOptions);
}"
10336,"/** 
 * Checks if a chunk is within the saveRadius  (and chunk caching is disabled).
 */
public static boolean canSaveChunk(Chunk chunk){
  if (isChunkOverridden(chunk)) {
    return true;
  }
  if (!canDownloadInGeneral()) {
    return false;
  }
  if (receivedPackets.contains(1)) {
    if (!canCacheChunks && saveRadius >= 0) {
      int distanceX=chunk.xPosition - WDL.thePlayer.chunkCoordX;
      int distanceZ=chunk.zPosition - WDL.thePlayer.chunkCoordZ;
      if (Math.abs(distanceX) > saveRadius || Math.abs(distanceZ) > saveRadius) {
        return false;
      }
    }
    return true;
  }
 else {
    return canUseFunctionsUnknownToServer();
  }
}","/** 
 * Checks if a chunk is within the saveRadius  (and chunk caching is disabled).
 */
public static boolean canSaveChunk(Chunk chunk){
  if (isChunkOverridden(chunk)) {
    return true;
  }
  if (!canDownloadInGeneral()) {
    return false;
  }
  if (receivedPackets.contains(1)) {
    if (!canCacheChunks && saveRadius >= 0) {
      int distanceX=chunk.x - WDL.thePlayer.chunkCoordX;
      int distanceZ=chunk.z - WDL.thePlayer.chunkCoordZ;
      if (Math.abs(distanceX) > saveRadius || Math.abs(distanceZ) > saveRadius) {
        return false;
      }
    }
    return true;
  }
 else {
    return canUseFunctionsUnknownToServer();
  }
}"
10337,"@Override public void drawEntry(int slotIndex,int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY,boolean isSelected){
  button.xPosition=GuiWDL.this.width / 2 - 100;
  button.yPosition=y;
  button.drawButton(mc,mouseX,mouseY);
  if (button.isMouseOver()) {
    displayedTooltip=tooltip;
  }
}","@Override public void drawEntry(int slotIndex,int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY,boolean isSelected){
  button.x=GuiWDL.this.width / 2 - 100;
  button.y=y;
  button.drawButton(mc,mouseX,mouseY);
  if (button.isMouseOver()) {
    displayedTooltip=tooltip;
  }
}"
10338,"/** 
 * Draws the screen and all the components in it.
 */
@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  this.drawDefaultBackground();
  displayedTooltip=null;
  this.list.drawScreen(mouseX,mouseY,partialTicks);
  this.drawCenteredString(this.fontRenderer,this.title,this.width / 2,8,0xFFFFFF);
  String name=I18n.format(""String_Node_Str"");
  this.drawString(this.fontRenderer,name,this.worldname.xPosition - this.fontRenderer.getStringWidth(name + ""String_Node_Str""),26,0xFFFFFF);
  this.worldname.drawTextBox();
  super.drawScreen(mouseX,mouseY,partialTicks);
  Utils.drawGuiInfoBox(displayedTooltip,width,height,48);
}","/** 
 * Draws the screen and all the components in it.
 */
@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  this.drawDefaultBackground();
  displayedTooltip=null;
  this.list.drawScreen(mouseX,mouseY,partialTicks);
  this.drawCenteredString(this.fontRenderer,this.title,this.width / 2,8,0xFFFFFF);
  String name=I18n.format(""String_Node_Str"");
  this.drawString(this.fontRenderer,name,this.worldname.x - this.fontRenderer.getStringWidth(name + ""String_Node_Str""),26,0xFFFFFF);
  this.worldname.drawTextBox();
  super.drawScreen(mouseX,mouseY,partialTicks);
  Utils.drawGuiInfoBox(displayedTooltip,width,height,48);
}"
10339,"@Override public void drawButton(Minecraft mc,int mouseX,int mouseY){
  if (GuiWDLChunkOverrides.this.mode == this.mode) {
    drawRect(this.xPosition - 2,this.yPosition - 2,this.xPosition + width + 2,this.yPosition + height + 2,0xFF007F00);
  }
  super.drawButton(mc,mouseX,mouseY);
  GlStateManager.color(1.0f,1.0f,1.0f);
  mc.getTextureManager().bindTexture(WIDGET_TEXTURES);
  this.drawTexturedModalRect(this.xPosition + 2,this.yPosition + 2,mode.overlayU,mode.overlayV,16,16);
}","@Override public void drawButton(Minecraft mc,int mouseX,int mouseY){
  if (GuiWDLChunkOverrides.this.mode == this.mode) {
    drawRect(this.x - 2,this.y - 2,this.x + width + 2,this.y + height + 2,0xFF007F00);
  }
  super.drawButton(mc,mouseX,mouseY);
  GlStateManager.color(1.0f,1.0f,1.0f);
  mc.getTextureManager().bindTexture(WIDGET_TEXTURES);
  this.drawTexturedModalRect(this.x + 2,this.y + 2,mode.overlayU,mode.overlayV,16,16);
}"
10340,"@Override public void drawEntry(int slotIndex,int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY,boolean isSelected){
  int center=(GuiWDLEntities.this.width / 2) - (totalWidth / 2) + largestWidth + 10;
  mc.fontRenderer.drawString(this.displayEntity,center - largestWidth - 10,y + slotHeight / 2 - mc.fontRenderer.FONT_HEIGHT / 2,0xFFFFFF);
  this.onOffButton.xPosition=center;
  this.onOffButton.yPosition=y;
  this.onOffButton.enabled=category.isGroupEnabled();
  this.onOffButton.displayString=getButtonText();
  this.rangeSlider.xPosition=center + 85;
  this.rangeSlider.yPosition=y;
  if (!this.cachedMode.equals(mode)) {
    cachedMode=mode;
    rangeSlider.enabled=(cachedMode.equals(""String_Node_Str""));
    rangeSlider.setValue(EntityUtils.getEntityTrackDistance(entity));
  }
  this.onOffButton.drawButton(mc,mouseX,mouseY);
  this.rangeSlider.drawButton(mc,mouseX,mouseY);
}","@Override public void drawEntry(int slotIndex,int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY,boolean isSelected){
  int center=(GuiWDLEntities.this.width / 2) - (totalWidth / 2) + largestWidth + 10;
  mc.fontRenderer.drawString(this.displayEntity,center - largestWidth - 10,y + slotHeight / 2 - mc.fontRenderer.FONT_HEIGHT / 2,0xFFFFFF);
  this.onOffButton.x=center;
  this.onOffButton.y=y;
  this.onOffButton.enabled=category.isGroupEnabled();
  this.onOffButton.displayString=getButtonText();
  this.rangeSlider.x=center + 85;
  this.rangeSlider.y=y;
  if (!this.cachedMode.equals(mode)) {
    cachedMode=mode;
    rangeSlider.enabled=(cachedMode.equals(""String_Node_Str""));
    rangeSlider.setValue(EntityUtils.getEntityTrackDistance(entity));
  }
  this.onOffButton.drawButton(mc,mouseX,mouseY);
  this.rangeSlider.drawButton(mc,mouseX,mouseY);
}"
10341,"@Override public void drawEntry(int slotIndex,int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY,boolean isSelected){
  if (button != null) {
    button.xPosition=GuiWDLExtensions.this.width - 180;
    button.yPosition=y - 1;
    button.drawButton(mc,mouseX,mouseY);
  }
  disableButton.xPosition=GuiWDLExtensions.this.width - 92;
  disableButton.yPosition=y - 1;
  disableButton.drawButton(mc,mouseX,mouseY);
  int centerY=y + slotHeight / 2 - fontRenderer.FONT_HEIGHT / 2;
  fontRenderer.drawString(label,x,centerY,0xFFFFFF);
}","@Override public void drawEntry(int slotIndex,int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY,boolean isSelected){
  if (button != null) {
    button.x=GuiWDLExtensions.this.width - 180;
    button.y=y - 1;
    button.drawButton(mc,mouseX,mouseY);
  }
  disableButton.x=GuiWDLExtensions.this.width - 92;
  disableButton.y=y - 1;
  disableButton.drawButton(mc,mouseX,mouseY);
  int centerY=y + slotHeight / 2 - fontRenderer.FONT_HEIGHT / 2;
  fontRenderer.drawString(label,x,centerY,0xFFFFFF);
}"
10342,"@Override public final void drawEntry(int slotIndex,int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY,boolean isSelected){
  drawString(fontRenderer,this.ruleName,x,y + 6,0xFFFFFFFF);
  this.resetButton.xPosition=x + listWidth / 2 + 110;
  this.resetButton.yPosition=y;
  this.resetButton.enabled=isRuleSet(this.ruleName);
  this.resetButton.drawButton(mc,mouseX,mouseY);
  this.draw(x,y,listWidth,slotHeight,mouseX,mouseY);
  if (this.isMouseOverControl(mouseX,mouseY)) {
    String key=""String_Node_Str"" + ruleName;
    if (I18n.hasKey(key)) {
      hoveredToolTip=I18n.format(key);
    }
  }
}","@Override public final void drawEntry(int slotIndex,int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY,boolean isSelected){
  drawString(fontRenderer,this.ruleName,x,y + 6,0xFFFFFFFF);
  this.resetButton.x=x + listWidth / 2 + 110;
  this.resetButton.y=y;
  this.resetButton.enabled=isRuleSet(this.ruleName);
  this.resetButton.drawButton(mc,mouseX,mouseY);
  this.draw(x,y,listWidth,slotHeight,mouseX,mouseY);
  if (this.isMouseOverControl(mouseX,mouseY)) {
    String key=""String_Node_Str"" + ruleName;
    if (I18n.hasKey(key)) {
      hoveredToolTip=I18n.format(key);
    }
  }
}"
10343,"@Override public void draw(int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY){
  if (!this.isFocused()) {
    field.setFocused(false);
  }
  field.xPosition=x + listWidth / 2;
  field.yPosition=y;
  field.drawTextBox();
}","@Override public void draw(int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY){
  if (!this.isFocused()) {
    field.setFocused(false);
  }
  field.x=x + listWidth / 2;
  field.y=y;
  field.drawTextBox();
}"
10344,"@Override public void drawEntry(int slotIndex,int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY,boolean isSelected){
  button.xPosition=GuiWDLMessages.this.width / 2 - 100;
  button.yPosition=y;
  button.displayString=I18n.format(""String_Node_Str"" + WDLMessages.isEnabled(type),type.getDisplayName());
  button.enabled=WDLMessages.enableAllMessages && WDLMessages.isGroupEnabled(category);
  button.drawButton(mc,mouseX,mouseY);
  if (button.isMouseOver()) {
    hoveredButtonDescription=type.getDescription();
  }
}","@Override public void drawEntry(int slotIndex,int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY,boolean isSelected){
  button.x=GuiWDLMessages.this.width / 2 - 100;
  button.y=y;
  button.displayString=I18n.format(""String_Node_Str"" + WDLMessages.isEnabled(type),type.getDisplayName());
  button.enabled=WDLMessages.enableAllMessages && WDLMessages.isGroupEnabled(category);
  button.drawButton(mc,mouseX,mouseY);
  if (button.isMouseOver()) {
    hoveredButtonDescription=type.getDescription();
  }
}"
10345,"/** 
 * Returns true if the given world has skylight data.
 * @return a boolean
 */
public static boolean hasSkyLight(World world){
  return world.provider.hasSkylight();
}","/** 
 * Returns true if the given world has skylight data.
 * @return a boolean
 */
public static boolean hasSkyLight(World world){
  return world.provider.hasSkyLight();
}"
10346,"@Override public void channelRead0(ChannelHandlerContext ctx,Request request) throws Exception {
  logger.debug(""String_Node_Str"",request);
  Response.Builder builder=Response.newBuilder();
  builder.setId(request.getId());
  boolean result=false;
switch (request.getType()) {
case LOOKUP:
    logger.debug(""String_Node_Str"");
  try {
    byte[] res=handler.lookup(request.getId().toByteArray(),request.getPartition());
    builder.setSucceeded(true);
    logger.debug(""String_Node_Str"",res);
    if (res != null) {
      logger.debug(""String_Node_Str"");
      builder.setData(ByteString.copyFrom(res));
    }
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e);
    builder.setSucceeded(false);
  }
break;
case STORE:
logger.debug(""String_Node_Str"");
result=handler.store(request.getId().toByteArray(),request.getPartition(),request.getData().toByteArray(),request.getCallback());
builder.setSucceeded(result);
break;
case PROCESS_EVENT:
logger.debug(""String_Node_Str"");
result=handler.processBatch(request.getId().toByteArray(),request.getPartition(),Lists.transform(request.getEventsList(),new Function<ByteString,byte[]>(){
public byte[] apply(ByteString from){
return from.toByteArray();
}
}
));
builder.setSucceeded(result);
break;
case GETNEXT:
logger.debug(""String_Node_Str"");
try {
byte[] returnData=handler.getNext(request.getPartition(),request.getVersionid());
logger.debug(""String_Node_Str"",returnData,request.getPartition());
if (returnData == null) {
builder.setData(null);
builder.setSucceeded(true);
}
 else {
builder.setData(ByteString.copyFrom(returnData));
builder.setSucceeded(true);
}
}
 catch (Exception e) {
logger.info(""String_Node_Str"",e);
builder.setSucceeded(false);
}
break;
case JUMP:
logger.debug(""String_Node_Str"");
handler.jump(request.getId().toByteArray(),request.getPartition(),request.getVersionid());
builder.setSucceeded(true);
break;
case MULTI_LOOKUP:
logger.debug(""String_Node_Str"");
for (Request req : request.getRequestsList()) {
long partitionId=req.getPartition();
for (ByteString id : req.getIdsList()) {
try {
byte[] res=handler.lookup(id.toByteArray(),partitionId);
builder.addResponses(Response.newBuilder().setId(id).setSucceeded(true).setData(ByteString.copyFrom(res)).build());
}
 catch (Exception e) {
builder.addResponses(Response.newBuilder().setId(id).setSucceeded(false).build());
}
}
}
break;
case MULTI_PROCESS_EVENT:
logger.debug(""String_Node_Str"");
for (Request req : request.getRequestsList()) {
long partitionId=req.getPartition();
int n=req.getIdsCount();
for (int i=0; i < n; i++) {
boolean ret=false;
try {
ret=handler.processBatch(req.getIds(i).toByteArray(),partitionId,Collections.singletonList(req.getEvents(i).toByteArray()));
}
 catch (Exception e) {
ret=false;
}
builder.addResponses(Response.newBuilder().setId(req.getIds(i)).setSucceeded(ret).build());
}
}
case DELETE:
logger.debug(""String_Node_Str"");
result=handler.delete(request.getId().toByteArray(),request.getPartition());
builder.setSucceeded(result);
break;
default :
logger.debug(""String_Node_Str"");
break;
}
if (request.hasThreadId()) builder.setThreadId(request.getThreadId());
builder.setRequestId(request.getRequestId());
Response response=builder.build();
logger.debug(""String_Node_Str"",response);
ctx.write(response);
}","@Override public void channelRead0(ChannelHandlerContext ctx,Request request) throws Exception {
  logger.debug(""String_Node_Str"",request);
  Response.Builder builder=Response.newBuilder();
  builder.setId(request.getId());
  boolean result=false;
switch (request.getType()) {
case LOOKUP:
    logger.debug(""String_Node_Str"");
  try {
    byte[] res=handler.lookup(request.getId().toByteArray(),request.getPartition());
    builder.setSucceeded(true);
    logger.debug(""String_Node_Str"",res);
    if (res != null) {
      logger.debug(""String_Node_Str"");
      builder.setData(ByteString.copyFrom(res));
    }
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e);
    builder.setSucceeded(false);
  }
break;
case STORE:
logger.debug(""String_Node_Str"");
result=handler.store(request.getId().toByteArray(),request.getPartition(),request.getData().toByteArray(),request.getCallback());
builder.setSucceeded(result);
break;
case PROCESS_EVENT:
logger.debug(""String_Node_Str"");
result=handler.processBatch(request.getId().toByteArray(),request.getPartition(),Lists.transform(request.getEventsList(),new Function<ByteString,byte[]>(){
public byte[] apply(ByteString from){
return from.toByteArray();
}
}
));
builder.setSucceeded(result);
break;
case GETNEXT:
logger.debug(""String_Node_Str"");
try {
byte[] returnData=handler.getNext(request.getPartition(),request.getVersionid());
logger.debug(""String_Node_Str"",returnData,request.getPartition());
if (returnData == null) {
builder.setSucceeded(false);
}
 else {
builder.setData(ByteString.copyFrom(returnData));
builder.setSucceeded(true);
}
}
 catch (Exception e) {
logger.info(""String_Node_Str"",e);
builder.setSucceeded(false);
}
break;
case JUMP:
logger.debug(""String_Node_Str"");
handler.jump(request.getId().toByteArray(),request.getPartition(),request.getVersionid());
builder.setSucceeded(true);
break;
case MULTI_LOOKUP:
logger.debug(""String_Node_Str"");
for (Request req : request.getRequestsList()) {
long partitionId=req.getPartition();
for (ByteString id : req.getIdsList()) {
try {
byte[] res=handler.lookup(id.toByteArray(),partitionId);
builder.addResponses(Response.newBuilder().setId(id).setSucceeded(true).setData(ByteString.copyFrom(res)).build());
}
 catch (Exception e) {
builder.addResponses(Response.newBuilder().setId(id).setSucceeded(false).build());
}
}
}
break;
case MULTI_PROCESS_EVENT:
logger.debug(""String_Node_Str"");
for (Request req : request.getRequestsList()) {
long partitionId=req.getPartition();
int n=req.getIdsCount();
for (int i=0; i < n; i++) {
boolean ret=false;
try {
ret=handler.processBatch(req.getIds(i).toByteArray(),partitionId,Collections.singletonList(req.getEvents(i).toByteArray()));
}
 catch (Exception e) {
ret=false;
}
builder.addResponses(Response.newBuilder().setId(req.getIds(i)).setSucceeded(ret).build());
}
}
case DELETE:
logger.debug(""String_Node_Str"");
result=handler.delete(request.getId().toByteArray(),request.getPartition());
builder.setSucceeded(result);
break;
default :
logger.debug(""String_Node_Str"");
break;
}
if (request.hasThreadId()) builder.setThreadId(request.getThreadId());
builder.setRequestId(request.getRequestId());
Response response=builder.build();
logger.debug(""String_Node_Str"",response);
ctx.write(response);
}"
10347,"@Override public Object next(){
  byte[] key=cursor.get_key(false);
  logger.info(""String_Node_Str"",new String(key));
  if (key == null) {
    return null;
  }
  byte[] value=cursor.get_value(true);
  logger.info(""String_Node_Str"",new String(value));
  KeyValue keyValue=new KeyValue();
  keyValue.key=key;
  keyValue.value=value;
  threadByteBuffer.get().clear();
  kryo.writeObject(threadByteBuffer.get(),keyValue);
  return threadByteBuffer.get().toBytes();
}","@Override public Object next(){
  byte[] key=cursor.get_key(false);
  if (key == null) {
    return null;
  }
  byte[] value=cursor.get_value(true);
  KeyValue keyValue=new KeyValue();
  keyValue.key=key;
  keyValue.value=value;
  threadByteBuffer.get().clear();
  kryo.writeObject(threadByteBuffer.get(),keyValue);
  return threadByteBuffer.get().toBytes();
}"
10348,"@Override public Object next(){
  if (cursor.step()) {
    byte[] key=cursor.get_key(false);
    byte[] value=cursor.get_value(false);
    KeyValue keyValue=new KeyValue();
    keyValue.key=key;
    keyValue.value=value;
    threadByteBuffer.get().clear();
    kryo.writeObject(threadByteBuffer.get(),keyValue);
    return threadByteBuffer.get().toBytes();
  }
  return null;
}","@Override public Object next(){
  byte[] key=cursor.get_key(false);
  byte[] value=cursor.get_value(false);
  KeyValue keyValue=new KeyValue();
  keyValue.key=key;
  keyValue.value=value;
  threadByteBuffer.get().clear();
  kryo.writeObject(threadByteBuffer.get(),keyValue);
  cursor.step();
  return threadByteBuffer.get().toBytes();
}"
10349,"public static void main(String[] args){
  PistachiosClient client=null;
  try {
    client=new PistachiosClient();
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e);
    if (client != null)     client.close();
    return;
  }
  try {
    String id=""String_Node_Str"";
    boolean store=false;
    String value=""String_Node_Str"";
    if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
      id=args[1];
      System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ new String(client.lookup(id.getBytes())));
    }
 else     if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      id=args[1];
      store=true;
      value=args[2];
      client.store(id.getBytes(),value.getBytes());
    }
 else     if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      id=(args[1]);
      store=true;
      value=args[2];
      List list=new java.util.ArrayList();
      list.add(value.getBytes());
      client.processBatch(id.getBytes(),list);
    }
 else     if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + id);
      try {
        id=args[1];
      }
 catch (      Exception e) {
      }
      client.delete(id.getBytes());
    }
 else {
      System.out.println(""String_Node_Str"");
      System.exit(0);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e);
  }
 finally {
    client.close();
  }
}","public static void main(String[] args){
  PistachiosClient client=null;
  try {
    client=new PistachiosClient();
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e);
    if (client != null)     client.close();
    return;
  }
  try {
    String id=""String_Node_Str"";
    boolean store=false;
    String value=""String_Node_Str"";
    if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
      id=args[1];
      System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ new String(client.lookup(id.getBytes())));
    }
 else     if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      id=args[1];
      store=true;
      value=args[2];
      client.store(id.getBytes(),value.getBytes());
    }
 else     if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      id=(args[1]);
      store=true;
      value=args[2];
      List list=new java.util.ArrayList();
      list.add(value.getBytes());
      client.processBatch(id.getBytes(),list);
    }
 else     if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + id);
      try {
        id=args[1];
      }
 catch (      Exception e) {
      }
      client.delete(id.getBytes());
    }
 else     if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
      String partition=args[1];
      client.iterator(Long.parseLong(partition));
      System.out.println(""String_Node_Str"" + id);
    }
 else {
      System.out.println(""String_Node_Str"");
      System.exit(0);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e);
  }
 finally {
    client.close();
  }
}"
10350,"public void jump(byte[] key,long itId){
  PistachiosTkIterator pit=PistachiosTkIterator.getPistachiosTkIterator(itId);
  if (!pit.isCursorSet()) {
synchronized (pit) {
      if (!pit.isCursorSet()) {
        pit.setCursor(hDb.cursor());
      }
    }
  }
  pit.jump(key);
}","public void jump(byte[] key,long itId){
  PistachiosTkIterator pit=PistachiosTkIterator.getPistachiosTkIterator(itId);
  if (!pit.isCursorSet()) {
synchronized (pit) {
      if (!pit.isCursorSet()) {
        pit.setCursor(hDb.cursor());
      }
    }
  }
  pit.jump(key);
  pit.next();
}"
10351,"public byte[] lookup(byte[] id,long partitionId,boolean callback) throws Exception {
  lookupRequests.mark();
  final Timer.Context context=lookupTimer.time();
  try {
    if (doNothing)     return null;
    StorePartition storePartition=PistachiosServer.storePartitionMap.get(partitionId);
    if (storePartition == null) {
      logger.info(""String_Node_Str"",partitionId,Joiner.on(',').withKeyValueSeparator(""String_Node_Str"").join(PistachiosServer.storePartitionMap));
      throw new Exception(""String_Node_Str"");
    }
    KeyValue toRetrun=storePartition.getFromWriteCache(id);
    if (toRetrun != null && toRetrun.op != Operator.DELETE) {
      logger.debug(""String_Node_Str"");
      return null;
    }
 else     if (toRetrun != null) {
      logger.debug(""String_Node_Str"");
      if (callback) {
        LookupCallback lookupCallback=LookupCallbackRegistry.getInstance().getLookupCallback();
        return lookupCallback.onLookup(toRetrun.key,toRetrun.value);
      }
      return toRetrun.value;
    }
    byte[] toRet=PistachiosServer.getInstance().getLocalStorageEngine().get(id,(int)partitionId);
    if (null != toRet) {
      Input input=new Input(toRet);
      ValueOffset valueOffset=kryo.readObject(input,ValueOffset.class);
      input.close();
      logger.debug(""String_Node_Str"",toRet,valueOffset.value,valueOffset.offset);
      if (callback) {
        LookupCallback lookupCallback=LookupCallbackRegistry.getInstance().getLookupCallback();
        return lookupCallback.onLookup(toRetrun.key,valueOffset.value);
      }
      return valueOffset.value;
    }
    logger.info(""String_Node_Str"",id);
    return null;
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",DefaultDataInterpreter.getDataInterpreter().interpretId(id),e);
    lookupFailureRequests.mark();
    throw e;
  }
 finally {
    context.stop();
  }
}","public byte[] lookup(byte[] id,long partitionId,boolean callback) throws Exception {
  lookupRequests.mark();
  final Timer.Context context=lookupTimer.time();
  try {
    if (doNothing)     return null;
    StorePartition storePartition=PistachiosServer.storePartitionMap.get(partitionId);
    if (storePartition == null) {
      logger.info(""String_Node_Str"",partitionId,Joiner.on(',').withKeyValueSeparator(""String_Node_Str"").join(PistachiosServer.storePartitionMap));
      throw new Exception(""String_Node_Str"");
    }
    KeyValue toRetrun=storePartition.getFromWriteCache(id);
    if (toRetrun != null && toRetrun.op != Operator.DELETE) {
      logger.debug(""String_Node_Str"");
      return null;
    }
 else     if (toRetrun != null) {
      logger.debug(""String_Node_Str"");
      if (callback) {
        LookupCallback lookupCallback=LookupCallbackRegistry.getInstance().getLookupCallback();
        return lookupCallback.onLookup(toRetrun.key,toRetrun.value);
      }
      return toRetrun.value;
    }
    byte[] toRet=PistachiosServer.getInstance().getLocalStorageEngine().get(id,(int)partitionId);
    if (null != toRet) {
      Input input=new Input(toRet);
      ValueOffset valueOffset=kryo.readObject(input,ValueOffset.class);
      input.close();
      logger.debug(""String_Node_Str"",toRet,valueOffset.value,valueOffset.offset);
      if (callback) {
        LookupCallback lookupCallback=LookupCallbackRegistry.getInstance().getLookupCallback();
        return lookupCallback.onLookup(id,valueOffset.value);
      }
      return valueOffset.value;
    }
    logger.info(""String_Node_Str"",id);
    return null;
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",DefaultDataInterpreter.getDataInterpreter().interpretId(id),e);
    lookupFailureRequests.mark();
    throw e;
  }
 finally {
    context.stop();
  }
}"
10352,"public boolean init(){
  boolean initialized=false;
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"",doNothing);
  try {
    Configuration conf=ConfigurationManager.getConfiguration();
    ZKHelixAdmin admin=new ZKHelixAdmin(conf.getString(ZOOKEEPER_SERVER));
    IdealState idealState=admin.getResourceIdealState(""String_Node_Str"",""String_Node_Str"");
    long totalParition=(long)idealState.getNumPartitions();
    profileStore=new LocalStorageEngine(conf.getString(PROFILE_BASE_DIR),(int)totalParition,8,conf.getInt(""String_Node_Str""),conf.getLong(""String_Node_Str""));
    ProcessorRegistry.getInstance().init();
    logger.info(""String_Node_Str"",conf.getString(ZOOKEEPER_SERVER,""String_Node_Str""),""String_Node_Str"",conf.getString(PROFILE_HELIX_INSTANCE_ID,""String_Node_Str""));
    helixPartitionSpectator=HelixPartitionSpectator.getInstance(conf.getString(ZOOKEEPER_SERVER),""String_Node_Str"",InetAddress.getLocalHost().getHostName());
    manager=new HelixPartitionManager<>(conf.getString(ZOOKEEPER_SERVER),""String_Node_Str"",InetAddress.getLocalHost().getHostName());
    manager.start(""String_Node_Str"",new BootstrapOnlineOfflineStateModelFactory(new StorePartitionHandlerFactory()));
    initialized=true;
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  logger.info(""String_Node_Str"");
  return initialized;
}","public boolean init(){
  boolean initialized=false;
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"",doNothing);
  try {
    Configuration conf=ConfigurationManager.getConfiguration();
    ZKHelixAdmin admin=new ZKHelixAdmin(conf.getString(ZOOKEEPER_SERVER));
    IdealState idealState=admin.getResourceIdealState(""String_Node_Str"",""String_Node_Str"");
    long totalParition=(long)idealState.getNumPartitions();
    profileStore=new LocalStorageEngine(conf.getString(PROFILE_BASE_DIR),(int)totalParition,8,conf.getInt(""String_Node_Str""),conf.getLong(""String_Node_Str""));
    ProcessorRegistry.getInstance().init();
    logger.info(""String_Node_Str"",conf.getString(ZOOKEEPER_SERVER,""String_Node_Str""),""String_Node_Str"",conf.getString(PROFILE_HELIX_INSTANCE_ID,""String_Node_Str""));
    helixPartitionSpectator=HelixPartitionSpectator.getInstance(conf.getString(ZOOKEEPER_SERVER),""String_Node_Str"",NativeUtils.getHostname());
    manager=new HelixPartitionManager<>(conf.getString(ZOOKEEPER_SERVER),""String_Node_Str"",NativeUtils.getHostname());
    manager.start(""String_Node_Str"",new BootstrapOnlineOfflineStateModelFactory(new StorePartitionHandlerFactory()));
    initialized=true;
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  logger.info(""String_Node_Str"");
  return initialized;
}"
10353,"public static void main(String[] args){
  try {
    reporter.start();
    Configuration conf=ConfigurationManager.getConfiguration();
    logger.info(""String_Node_Str"",conf.getString(ZOOKEEPER_SERVER));
    helixManager=HelixManagerFactory.getZKHelixManager(""String_Node_Str"",InetAddress.getLocalHost().getHostName(),InstanceType.CONTROLLER,conf.getString(ZOOKEEPER_SERVER));
    helixManager.connect();
    controller=new GenericHelixController();
    helixManager.addConfigChangeListener(controller);
    helixManager.addLiveInstanceChangeListener(controller);
    helixManager.addIdealStateChangeListener(controller);
    helixManager.addExternalViewChangeListener(controller);
    helixManager.addControllerListener(controller);
    instance=new PistachiosServer();
    instance.init();
    handler=new DefaultPistachiosHandler();
    Runnable simple=new Runnable(){
      public void run(){
        NettyPistachioServer.startServer(handler);
      }
    }
;
    new Thread(simple).start();
  }
 catch (  Exception x) {
    x.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    reporter.start();
    Configuration conf=ConfigurationManager.getConfiguration();
    logger.info(""String_Node_Str"",conf.getString(ZOOKEEPER_SERVER));
    helixManager=HelixManagerFactory.getZKHelixManager(""String_Node_Str"",NativeUtils.getHostname(),InstanceType.CONTROLLER,conf.getString(ZOOKEEPER_SERVER));
    helixManager.connect();
    controller=new GenericHelixController();
    helixManager.addConfigChangeListener(controller);
    helixManager.addLiveInstanceChangeListener(controller);
    helixManager.addIdealStateChangeListener(controller);
    helixManager.addExternalViewChangeListener(controller);
    helixManager.addControllerListener(controller);
    instance=new PistachiosServer();
    instance.init();
    handler=new DefaultPistachiosHandler();
    Runnable simple=new Runnable(){
      public void run(){
        NettyPistachioServer.startServer(handler);
      }
    }
;
    new Thread(simple).start();
  }
 catch (  Exception x) {
    x.printStackTrace();
  }
}"
10354,"public NettyPistachioClient() throws Exception {
  localHostAddress=InetAddress.getLocalHost().getHostAddress();
  if (helixPartitionSpectator == null) {
synchronized (this) {
      if (helixPartitionSpectator == null) {
        try {
          helixPartitionSpectator=HelixPartitionSpectator.getInstance(conf.getString(ZOOKEEPER_SERVER),""String_Node_Str"",InetAddress.getLocalHost().getHostName());
        }
 catch (        Exception e) {
          logger.error(""String_Node_Str"",e);
          throw e;
        }
      }
    }
  }
}","public NettyPistachioClient() throws Exception {
  localHostAddress=InetAddress.getLocalHost().getHostAddress();
  if (helixPartitionSpectator == null) {
synchronized (this) {
      if (helixPartitionSpectator == null) {
        try {
          helixPartitionSpectator=HelixPartitionSpectator.getInstance(conf.getString(ZOOKEEPER_SERVER),""String_Node_Str"",NativeUtils.getHostname());
        }
 catch (        Exception e) {
          logger.error(""String_Node_Str"",e);
          throw e;
        }
      }
    }
  }
}"
10355,"/** 
 * Loads library from current JAR archive The file from JAR is copied into system temporary directory and then loaded. The temporary file is deleted after exiting. Method uses String as filename because the pathname is ""abstract"", not system-dependent.
 * @param filename The filename inside JAR as absolute path (beginning with '/'), e.g. /package/File.ext
 * @throws IOException If temporary file creation or read/write operation fails
 * @throws IllegalArgumentException If source file (param path) does not exist
 * @throws IllegalArgumentException If the path is not absolute or if the filename is shorter than three characters (restriction of {@see File#createTempFile(java.lang.String, java.lang.String)}).
 */
public static void loadLibraryFromJar(String path) throws IOException {
  if (!path.startsWith(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String[] parts=path.split(""String_Node_Str"");
  String filename=(parts.length > 1) ? parts[parts.length - 1] : null;
  String prefix=""String_Node_Str"";
  String suffix=null;
  if (filename != null) {
    parts=filename.split(""String_Node_Str"",2);
    prefix=parts[0];
    suffix=(parts.length > 1) ? ""String_Node_Str"" + parts[parts.length - 1] : null;
  }
  logger.debug(""String_Node_Str"",prefix,suffix);
  if (filename == null || prefix.length() < 3) {
    throw new IllegalArgumentException(""String_Node_Str"" + filename);
  }
  File temp=File.createTempFile(prefix,suffix);
  temp.deleteOnExit();
  if (!temp.exists()) {
    throw new FileNotFoundException(""String_Node_Str"" + temp.getAbsolutePath() + ""String_Node_Str"");
  }
  byte[] buffer=new byte[1024];
  int readBytes;
  InputStream is=NativeUtils.class.getResourceAsStream(path);
  if (is == null) {
    throw new FileNotFoundException(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  OutputStream os=new FileOutputStream(temp);
  try {
    while ((readBytes=is.read(buffer)) != -1) {
      os.write(buffer,0,readBytes);
    }
  }
  finally {
    os.close();
    is.close();
  }
  System.load(temp.getAbsolutePath());
}","/** 
 * Loads library from current JAR archive The file from JAR is copied into system temporary directory and then loaded. The temporary file is deleted after exiting. Method uses String as filename because the pathname is ""abstract"", not system-dependent.
 * @param filename The filename inside JAR as absolute path (beginning with '/'), e.g. /package/File.ext
 * @throws IOException If temporary file creation or read/write operation fails
 * @throws IllegalArgumentException If source file (param path) does not exist
 * @throws IllegalArgumentException If the path is not absolute or if the filename is shorter than three characters (restriction of {@see File#createTempFile(java.lang.String, java.lang.String)}).
 */
public static void loadLibraryFromJar(String path) throws IOException {
  if (!path.startsWith(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String[] parts=path.split(""String_Node_Str"");
  String filename=(parts.length > 1) ? parts[parts.length - 1] : null;
  String prefix=""String_Node_Str"";
  String suffix=null;
  if (filename != null) {
    parts=filename.split(""String_Node_Str"",2);
    prefix=parts[0];
    suffix=(parts.length > 1) ? ""String_Node_Str"" + parts[parts.length - 1] : null;
  }
  logger.debug(""String_Node_Str"",prefix,suffix);
  if (filename == null || prefix.length() < 3) {
    throw new IllegalArgumentException(""String_Node_Str"" + filename);
  }
  logger.debug(""String_Node_Str"",System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + filename);
  File temp=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + filename);
  temp.createNewFile();
  temp.deleteOnExit();
  if (!temp.exists()) {
    throw new FileNotFoundException(""String_Node_Str"" + temp.getAbsolutePath() + ""String_Node_Str"");
  }
  byte[] buffer=new byte[1024];
  int readBytes;
  InputStream is=NativeUtils.class.getResourceAsStream(path);
  if (is == null) {
    throw new FileNotFoundException(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  OutputStream os=new FileOutputStream(temp);
  try {
    while ((readBytes=is.read(buffer)) != -1) {
      os.write(buffer,0,readBytes);
    }
  }
  finally {
    os.close();
    is.close();
  }
  System.load(temp.getAbsolutePath());
}"
10356,"public static void main(String[] args){
  PistachiosClient client;
  try {
    client=new PistachiosClient();
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e);
    return;
  }
  Random rand=new Random();
  while (true) {
    try {
      long id=rand.nextLong();
      String value=InetAddress.getLocalHost().getHostName() + rand.nextInt();
      client.store(com.google.common.primitives.Longs.toByteArray(id),value.getBytes());
      for (int i=0; i < 30; i++) {
        byte[] clientValue=client.lookup(com.google.common.primitives.Longs.toByteArray(id),true);
        String remoteValue=new String(clientValue);
        if (Arrays.equals(value.getBytes(),clientValue) || !remoteValue.contains(InetAddress.getLocalHost().getHostName())) {
          logger.debug(""String_Node_Str"",id,value);
        }
 else {
          logger.error(""String_Node_Str"",id,value,new String(clientValue));
          System.exit(0);
        }
        Thread.sleep(100);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e);
      System.exit(0);
    }
  }
}","public static void main(String[] args){
  PistachiosClient client;
  try {
    client=new PistachiosClient();
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e);
    return;
  }
  Random rand=new Random();
  while (true) {
    try {
      long id=rand.nextLong();
      String value=NativeUtils.getHostname() + rand.nextInt();
      client.store(com.google.common.primitives.Longs.toByteArray(id),value.getBytes());
      for (int i=0; i < 30; i++) {
        byte[] clientValue=client.lookup(com.google.common.primitives.Longs.toByteArray(id),true);
        String remoteValue=new String(clientValue);
        if (Arrays.equals(value.getBytes(),clientValue) || !remoteValue.contains(NativeUtils.getHostname())) {
          logger.debug(""String_Node_Str"",id,value);
        }
 else {
          logger.error(""String_Node_Str"",id,value,new String(clientValue));
          System.exit(0);
        }
        Thread.sleep(100);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e);
      System.exit(0);
    }
  }
}"
10357,"public static void main(String[] args){
  PistachiosClient client=null;
  try {
    client=new PistachiosClient();
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e);
    if (client != null)     client.close();
    return;
  }
  try {
    String id=""String_Node_Str"";
    boolean store=false;
    String value=""String_Node_Str"";
    if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
      id=args[1];
      System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ new String(client.lookup(id.getBytes())));
    }
 else     if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      id=args[1];
      store=true;
      value=args[2];
      client.store(id.getBytes(),value.getBytes());
    }
 else     if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      id=(args[1]);
      store=true;
      value=args[2];
      List list=new java.util.ArrayList();
      list.add(value.getBytes());
      client.processBatch(id.getBytes(),list);
    }
 else {
      System.out.println(""String_Node_Str"");
      System.exit(0);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e);
  }
 finally {
    client.close();
  }
}","public static void main(String[] args){
  PistachiosClient client=null;
  try {
    client=new PistachiosClient();
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e);
    if (client != null)     client.close();
    return;
  }
  try {
    String id=""String_Node_Str"";
    boolean store=false;
    String value=""String_Node_Str"";
    if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
      id=args[1];
      System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ new String(client.lookup(id.getBytes())));
    }
 else     if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      id=args[1];
      store=true;
      value=args[2];
      client.store(id.getBytes(),value.getBytes(),true);
    }
 else     if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      id=(args[1]);
      store=true;
      value=args[2];
      List list=new java.util.ArrayList();
      list.add(value.getBytes());
      client.processBatch(id.getBytes(),list);
    }
 else {
      System.out.println(""String_Node_Str"");
      System.exit(0);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e);
  }
 finally {
    client.close();
  }
}"
10358,"private static void setZkRegistryData(String jarPath,String className,String zkPath,ZooKeeper zk){
  try {
    if (jarPath != null && className != null) {
      zk.create(zkPath,(jarPath + ""String_Node_Str"" + className).getBytes(),null,org.apache.zookeeper.CreateMode.PERSISTENT);
      zk.setData(zkPath,(jarPath + ""String_Node_Str"" + className).getBytes(),-1);
    }
  }
 catch (  Exception e) {
  }
}","private static void setZkRegistryData(String jarPath,String className,String zkPath,ZooKeeper zk){
  try {
    if (jarPath != null && className != null) {
      String value=(jarPath + ""String_Node_Str"" + className);
      logger.info(""String_Node_Str"",zkPath,value);
      String currentPath=""String_Node_Str"";
      for (      String path : zkPath.split(""String_Node_Str"")) {
        if (path.isEmpty())         continue;
        currentPath=currentPath + ""String_Node_Str"" + path;
        try {
          logger.info(""String_Node_Str"",currentPath);
          zk.create(currentPath,value.getBytes(),org.apache.zookeeper.ZooDefs.Ids.OPEN_ACL_UNSAFE,org.apache.zookeeper.CreateMode.PERSISTENT);
        }
 catch (        NodeExistsException e0) {
        }
catch (        Exception e) {
          logger.info(""String_Node_Str"",path,e);
          break;
        }
      }
      zk.setData(zkPath,value.getBytes(),-1);
      logger.info(""String_Node_Str"",zkPath,value);
    }
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e);
  }
}"
10359,"public boolean store(byte[] id,long partitionId,byte[] value,boolean callback){
  storeRequests.mark();
  final Timer.Context context=storeTimer.time();
  try {
    if (doNothing)     return true;
    long nextSeqId=-1;
    StorePartition storePartition=PistachiosServer.storePartitionMap.get(partitionId);
    if (storePartition == null) {
      logger.info(""String_Node_Str"",partitionId);
      return false;
    }
    if ((nextSeqId=storePartition.getNextSeqId()) == -1) {
      return false;
    }
    String partitionTopic=KAFKA_TOPIC_PREFIX + partitionId;
    KeyValue kv=new KeyValue();
    kv.key=id;
    kv.seqId=nextSeqId;
    kv.value=value;
    kv.callback=callback;
    long lockKey=(id.hashCode() * 7 + 11) % 1024;
    lockKey=lockKey >= 0 ? lockKey : lockKey + 1024;
    if (kv.callback && StoreCallbackRegistry.getInstance().getStoreCallback().needCallback()) {
synchronized (storePartition.getKeyLock((int)lockKey)) {
        logger.debug(""String_Node_Str"",kv.key,kv.value,kv.seqId,storePartition.getSeqId());
        byte[] currentValue=(storePartition.getFromWriteCache(id) != null) ? storePartition.getFromWriteCache(id).value : null;
        kv.value=StoreCallbackRegistry.getInstance().getStoreCallback().onStore(id,currentValue,value);
        if (kv.value != null) {
          PistachiosServer.storePartitionMap.get(partitionId).getWriteCache().putIfAbsent(new ByteArrayWrapper(id,id.length),kv);
        }
        KeyedMessage<String,KeyValue> message=new KeyedMessage<String,KeyValue>(partitionTopic,kv);
        getKafkaProducerInstance(partitionId).send(message);
      }
    }
 else {
      logger.debug(""String_Node_Str"",kv.key,kv.value,kv.seqId,PistachiosServer.storePartitionMap.get(partitionId).getSeqId());
      PistachiosServer.storePartitionMap.get(partitionId).getWriteCache().put(new ByteArrayWrapper(id,id.length),kv);
      KeyedMessage<String,KeyValue> message=new KeyedMessage<String,KeyValue>(partitionTopic,kv);
      getKafkaProducerInstance(partitionId).send(message);
    }
    logger.debug(""String_Node_Str"",PistachiosServer.storePartitionMap.get(partitionId).getSeqId(),kv.seqId);
    while (kv.seqId - PistachiosServer.storePartitionMap.get(partitionId).getSeqId() > 20000000) {
      logger.debug(""String_Node_Str"",PistachiosServer.storePartitionMap.get(partitionId).getSeqId(),kv.seqId);
      Thread.sleep(30);
    }
    return true;
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",DefaultDataInterpreter.getDataInterpreter().interpretId(id),DefaultDataInterpreter.getDataInterpreter().interpretData(value),e);
    storeFailureRequests.mark();
    return false;
  }
 finally {
    context.stop();
  }
}","public boolean store(byte[] id,long partitionId,byte[] value,boolean callback){
  storeRequests.mark();
  final Timer.Context context=storeTimer.time();
  try {
    if (doNothing)     return true;
    long nextSeqId=-1;
    StorePartition storePartition=PistachiosServer.storePartitionMap.get(partitionId);
    if (storePartition == null) {
      logger.info(""String_Node_Str"",partitionId);
      return false;
    }
    if ((nextSeqId=storePartition.getNextSeqId()) == -1) {
      return false;
    }
    String partitionTopic=KAFKA_TOPIC_PREFIX + partitionId;
    KeyValue kv=new KeyValue();
    kv.key=id;
    kv.seqId=nextSeqId;
    kv.value=value;
    kv.callback=callback;
    long lockKey=(id.hashCode() * 7 + 11) % 1024;
    lockKey=lockKey >= 0 ? lockKey : lockKey + 1024;
    if (kv.callback && StoreCallbackRegistry.getInstance().getStoreCallback().needCallback()) {
synchronized (storePartition.getKeyLock((int)lockKey)) {
        logger.debug(""String_Node_Str"",kv.key,kv.value,kv.seqId,storePartition.getSeqId());
        byte[] currentValue=(storePartition.getFromWriteCache(id) != null) ? storePartition.getFromWriteCache(id).value : null;
        if (currentValue == null) {
          byte[] toRet=PistachiosServer.getInstance().getLocalStorageEngine().get(id,(int)partitionId);
          if (null != toRet) {
            Input input=new Input(toRet);
            ValueOffset valueOffset=kryo.readObject(input,ValueOffset.class);
            input.close();
            logger.debug(""String_Node_Str"",toRet,valueOffset);
            currentValue=valueOffset.value;
          }
        }
        kv.value=StoreCallbackRegistry.getInstance().getStoreCallback().onStore(id,currentValue,value);
        if (kv.value != null) {
          PistachiosServer.storePartitionMap.get(partitionId).getWriteCache().putIfAbsent(new ByteArrayWrapper(id,id.length),kv);
        }
        kv.value=value;
        KeyedMessage<String,KeyValue> message=new KeyedMessage<String,KeyValue>(partitionTopic,kv);
        getKafkaProducerInstance(partitionId).send(message);
      }
    }
 else {
      logger.debug(""String_Node_Str"",kv.key,kv.value,kv.seqId,PistachiosServer.storePartitionMap.get(partitionId).getSeqId());
      PistachiosServer.storePartitionMap.get(partitionId).getWriteCache().put(new ByteArrayWrapper(id,id.length),kv);
      KeyedMessage<String,KeyValue> message=new KeyedMessage<String,KeyValue>(partitionTopic,kv);
      getKafkaProducerInstance(partitionId).send(message);
    }
    logger.debug(""String_Node_Str"",PistachiosServer.storePartitionMap.get(partitionId).getSeqId(),kv.seqId);
    while (kv.seqId - PistachiosServer.storePartitionMap.get(partitionId).getSeqId() > 20000000) {
      logger.debug(""String_Node_Str"",PistachiosServer.storePartitionMap.get(partitionId).getSeqId(),kv.seqId);
      Thread.sleep(30);
    }
    return true;
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",DefaultDataInterpreter.getDataInterpreter().interpretId(id),DefaultDataInterpreter.getDataInterpreter().interpretData(value),e);
    storeFailureRequests.mark();
    return false;
  }
 finally {
    context.stop();
  }
}"
10360,"public void init(){
  try {
    logger.info(""String_Node_Str"");
    client=CuratorFrameworkFactory.newClient(ConfigurationManager.getConfiguration().getString(ZOOKEEPER_SERVER),new ExponentialBackoffRetry(1000,3));
    client.start();
    cache=new NodeCache(client,PATH);
    cache.start();
    cache.getListenable().addListener(this);
    nodeChanged();
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e);
  }
}","public void init(){
  try {
    logger.info(""String_Node_Str"");
    client=CuratorFrameworkFactory.newClient(ConfigurationManager.getConfiguration().getString(ZOOKEEPER_SERVER),new ExponentialBackoffRetry(1000,3));
    client.start();
    cache=new NodeCache(client,getZKPath());
    cache.start();
    cache.getListenable().addListener(this);
    nodeChanged();
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e);
  }
}"
10361,"public static synchronized StoreCallbackRegistry getInstance(){
  if (instance == null) {
    instance=new StoreCallbackRegistry();
    instance.processor=new DefaultStoreCallback();
  }
  return instance;
}","public static synchronized StoreCallbackRegistry getInstance(){
  if (instance == null) {
    instance=new StoreCallbackRegistry();
    instance.init();
    if (instance.processor == null)     instance.processor=new DefaultStoreCallback();
  }
  return instance;
}"
10362,"public LocalStorageEngine(String baseDir,int numStores,int recordSizeAlignment,int totalRecords,long mappedMemorySize,boolean isReadOnly){
  this.baseDir=baseDir;
  this.recordSizeAlignment=recordSizeAlignment;
  this.totalRecords=totalRecords;
  this.mappedMemorySize=mappedMemorySize;
  this.isReadOnly=isReadOnly;
  this.numStores=numStores;
}","public LocalStorageEngine(String baseDir,int numStores,int recordSizeAlignment,int totalRecords,long mappedMemorySize,boolean isReadOnly){
  this.baseDir=baseDir;
  this.recordSizeAlignment=recordSizeAlignment;
  this.totalRecords=totalRecords;
  this.mappedMemorySize=mappedMemorySize;
  this.isReadOnly=isReadOnly;
  this.numStores=numStores;
  stores=new StoreEngine[numStores];
}"
10363,"@Override public boolean close(){
  for (  Thread t : comsumerThreads) {
    t.interrupt();
  }
  for (int i=0; i < threadNum; i++) {
    metrics.remove((MetricRegistry.name(TKStore.class,""String_Node_Str"" + partitionId + ""String_Node_Str""+ i,""String_Node_Str"")));
  }
  return true;
}","@Override public boolean close(){
  for (  Thread t : comsumerThreads) {
    t.interrupt();
  }
  for (int i=0; i < threadNum; i++) {
synchronized (metrics) {
      metrics.remove((MetricRegistry.name(TKStore.class,""String_Node_Str"" + partitionId + ""String_Node_Str""+ i,""String_Node_Str"")));
    }
  }
  return true;
}"
10364,"@Override public boolean open(int partitionId){
  this.partitionId=partitionId;
  profileStore=PistachiosServer.getInstance().getLocalStorageEngine();
  try {
    logger.debug(""String_Node_Str"",partitionId);
    profileStore.open(partitionId);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return false;
  }
  if (incomequeues == null)   incomequeues=new ArrayBlockingQueue[threadNum];
  comsumerThreads=new Thread[threadNum];
  for (int i=0; i < threadNum; i++) {
    try {
      if (incomequeues[i] == null)       incomequeues[i]=new ArrayBlockingQueue<DataOffset>(QUEUE_SIZE);
      comsumerThreads[i]=new Consumer(i);
      comsumerThreads[i].start();
      metrics.register(MetricRegistry.name(TKStore.class,""String_Node_Str"" + partitionId + ""String_Node_Str""+ i,""String_Node_Str""),new incomequeueSizeGauge(incomequeues[i]));
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  try {
    reporter.start();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return true;
}","@Override public boolean open(int partitionId){
  this.partitionId=partitionId;
  profileStore=PistachiosServer.getInstance().getLocalStorageEngine();
  try {
    logger.debug(""String_Node_Str"",partitionId);
    profileStore.open(partitionId);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return false;
  }
  if (incomequeues == null)   incomequeues=new ArrayBlockingQueue[threadNum];
  comsumerThreads=new Thread[threadNum];
  for (int i=0; i < threadNum; i++) {
    try {
      if (incomequeues[i] == null)       incomequeues[i]=new ArrayBlockingQueue<DataOffset>(QUEUE_SIZE);
      comsumerThreads[i]=new Consumer(i);
      comsumerThreads[i].start();
synchronized (metrics) {
        metrics.register(MetricRegistry.name(TKStore.class,""String_Node_Str"" + partitionId + ""String_Node_Str""+ i,""String_Node_Str""),new incomequeueSizeGauge(incomequeues[i]));
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  try {
    reporter.start();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return true;
}"
10365,"public LocalStorageEngine(String baseDir,int numStores,int recordSizeAlignment,int totalRecords,long mappedMemorySize,boolean isReadOnly){
  this.baseDir=baseDir;
  this.recordSizeAlignment=recordSizeAlignment;
  this.totalRecords=totalRecords;
  this.mappedMemorySize=mappedMemorySize;
  this.isReadOnly=isReadOnly;
  this.numStores=numStores;
}","public LocalStorageEngine(String baseDir,int numStores,int recordSizeAlignment,int totalRecords,long mappedMemorySize,boolean isReadOnly){
  this.baseDir=baseDir;
  this.recordSizeAlignment=recordSizeAlignment;
  this.totalRecords=totalRecords;
  this.mappedMemorySize=mappedMemorySize;
  this.isReadOnly=isReadOnly;
  this.numStores=numStores;
  stores=new StoreEngine[numStores];
}"
10366,"public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!(obj instanceof KeyValue))   return false;
  KeyValue that=(KeyValue)obj;
  return Arrays.equals(key,that.key) && (seqId == that.seqId) && Arrays.equals(value,that.value)&& (callback == that.callback);
}","public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!(obj instanceof KeyValue))   return false;
  KeyValue that=(KeyValue)obj;
  return Arrays.equals(key,that.key) && (seqId == that.seqId) && Arrays.equals(value,that.value)&& (callback == that.callback)&& (op == that.op);
}"
10367,"public byte[] lookup(byte[] id,long partitionId) throws Exception {
  lookupRequests.mark();
  final Timer.Context context=lookupTimer.time();
  try {
    if (doNothing)     return null;
    StorePartition storePartition=PistachiosServer.storePartitionMap.get(partitionId);
    if (storePartition == null) {
      logger.info(""String_Node_Str"",partitionId,Joiner.on(',').withKeyValueSeparator(""String_Node_Str"").join(PistachiosServer.storePartitionMap));
      throw new Exception(""String_Node_Str"");
    }
    KeyValue toRetrun=storePartition.getFromWriteCache(id);
    if (toRetrun.op != Operator.DELETE) {
      logger.debug(""String_Node_Str"");
      return null;
    }
    if (toRetrun != null) {
      logger.debug(""String_Node_Str"");
      return toRetrun.value;
    }
    byte[] toRet=PistachiosServer.getInstance().getLocalStorageEngine().get(id,(int)partitionId);
    if (null != toRet) {
      Input input=new Input(toRet);
      ValueOffset valueOffset=kryo.readObject(input,ValueOffset.class);
      input.close();
      logger.debug(""String_Node_Str"",toRet,valueOffset);
      return valueOffset.value;
    }
    logger.info(""String_Node_Str"",id);
    return null;
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",DefaultDataInterpreter.getDataInterpreter().interpretId(id),e);
    lookupFailureRequests.mark();
    throw e;
  }
 finally {
    context.stop();
  }
}","public byte[] lookup(byte[] id,long partitionId) throws Exception {
  lookupRequests.mark();
  final Timer.Context context=lookupTimer.time();
  try {
    if (doNothing)     return null;
    StorePartition storePartition=PistachiosServer.storePartitionMap.get(partitionId);
    if (storePartition == null) {
      logger.info(""String_Node_Str"",partitionId,Joiner.on(',').withKeyValueSeparator(""String_Node_Str"").join(PistachiosServer.storePartitionMap));
      throw new Exception(""String_Node_Str"");
    }
    KeyValue toRetrun=storePartition.getFromWriteCache(id);
    if (toRetrun != null && toRetrun.op != Operator.DELETE) {
      logger.debug(""String_Node_Str"");
      return null;
    }
 else     if (toRetrun != null) {
      logger.debug(""String_Node_Str"");
      return toRetrun.value;
    }
    byte[] toRet=PistachiosServer.getInstance().getLocalStorageEngine().get(id,(int)partitionId);
    if (null != toRet) {
      Input input=new Input(toRet);
      ValueOffset valueOffset=kryo.readObject(input,ValueOffset.class);
      input.close();
      logger.debug(""String_Node_Str"",toRet,valueOffset);
      return valueOffset.value;
    }
    logger.info(""String_Node_Str"",id);
    return null;
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",DefaultDataInterpreter.getDataInterpreter().interpretId(id),e);
    lookupFailureRequests.mark();
    throw e;
  }
 finally {
    context.stop();
  }
}"
10368,"/** 
 * Visits an annotation and adds a corresponding node to the specified Element. Despite the name, this method is not inherited through any visitor interface. It is not intended for external calls.
 * @param parent the target of the annotation
 * @param annotation the annotation
 * @param primary whether this is a primary contract annotation
 * @param owner the owner of this annotation
 * @param p the element to add the created annotation to
 * @see ContractAnnotationModel
 */
@Requires({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) protected void visitAnnotation(Element parent,AnnotationMirror annotation,boolean primary,ClassName owner,ElementModel p){
  if (utils.isContractAnnotation(annotation)) {
    ContractAnnotationModel model=createContractModel(parent,annotation,primary,owner);
    p.addEnclosedElement(model);
  }
}","/** 
 * Visits an annotation and adds a corresponding node to the specified Element. Despite the name, this method is not inherited through any visitor interface. It is not intended for external calls.
 * @param parent the target of the annotation
 * @param annotation the annotation
 * @param primary whether this is a primary contract annotation
 * @param owner the owner of this annotation
 * @param p the element to add the created annotation to
 * @see ContractAnnotationModel
 */
@Requires({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) protected void visitAnnotation(Element parent,AnnotationMirror annotation,boolean primary,ClassName owner,ElementModel p){
  if (utils.isContractAnnotation(annotation)) {
    ContractAnnotationModel model=createContractModel(parent,annotation,primary,owner);
    if (model != null) {
      p.addEnclosedElement(model);
    }
  }
}"
10369,"/** 
 * Creates a   {@code ContractAnnotationModel} froman  {@code AnnotationMirror}.
 * @param parent the target of the annotation
 * @param annotation the annotation
 * @param primary whether this is a primary contract annotation
 * @param owner the owner of this annotation
 * @return the contract model of this annotation
 */
@Requires({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) @Ensures(""String_Node_Str"") protected ContractAnnotationModel createContractModel(Element parent,AnnotationMirror annotation,boolean primary,ClassName owner){
  ContractAnnotationModel model=createBlankContractModel(parent,annotation,primary,owner);
  List<Long> lineNumbers=null;
  if (rootLineNumberIterator == null) {
    lineNumbers=getLineNumbers(parent,annotation);
  }
  AnnotationValue lastAnnotationValue=null;
  for (  AnnotationValue annotationValue : annotation.getElementValues().values()) {
    @SuppressWarnings(""String_Node_Str"") List<? extends AnnotationValue> values=(List<? extends AnnotationValue>)annotationValue.getValue();
    Iterator<? extends AnnotationValue> iterValue=values.iterator();
    Iterator<Long> iterLineNumber;
    if (rootLineNumberIterator != null) {
      iterLineNumber=rootLineNumberIterator;
    }
 else {
      iterLineNumber=lineNumbers.iterator();
    }
    while (iterValue.hasNext()) {
      String value=(String)iterValue.next().getValue();
      Long lineNumber=iterLineNumber.hasNext() ? iterLineNumber.next() : null;
      model.addValue(value,lineNumber);
    }
    lastAnnotationValue=annotationValue;
  }
  AnnotationSourceInfo sourceInfo=new AnnotationSourceInfo(parent,annotation,lastAnnotationValue,model.getValues());
  model.setSourceInfo(sourceInfo);
  return model;
}","/** 
 * Creates a   {@code ContractAnnotationModel} froman  {@code AnnotationMirror}.
 * @param parent the target of the annotation
 * @param annotation the annotation
 * @param primary whether this is a primary contract annotation
 * @param owner the owner of this annotation
 * @return the contract model of this annotation, or {@code null} ifthe annotation contains no contract (no or empty value)
 */
@Requires({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) protected ContractAnnotationModel createContractModel(Element parent,AnnotationMirror annotation,boolean primary,ClassName owner){
  ContractAnnotationModel model=createBlankContractModel(parent,annotation,primary,owner);
  List<Long> lineNumbers=null;
  if (rootLineNumberIterator == null) {
    lineNumbers=getLineNumbers(parent,annotation);
  }
  AnnotationValue lastAnnotationValue=null;
  for (  AnnotationValue annotationValue : annotation.getElementValues().values()) {
    @SuppressWarnings(""String_Node_Str"") List<? extends AnnotationValue> values=(List<? extends AnnotationValue>)annotationValue.getValue();
    Iterator<? extends AnnotationValue> iterValue=values.iterator();
    Iterator<Long> iterLineNumber;
    if (rootLineNumberIterator != null) {
      iterLineNumber=rootLineNumberIterator;
    }
 else {
      iterLineNumber=lineNumbers.iterator();
    }
    while (iterValue.hasNext()) {
      String value=(String)iterValue.next().getValue();
      Long lineNumber=iterLineNumber.hasNext() ? iterLineNumber.next() : null;
      model.addValue(value,lineNumber);
    }
    lastAnnotationValue=annotationValue;
  }
  if (model.getValues().isEmpty()) {
    diagnosticManager.warning(""String_Node_Str"",null,0,0,0,parent,annotation,lastAnnotationValue);
    return null;
  }
  AnnotationSourceInfo sourceInfo=new AnnotationSourceInfo(parent,annotation,lastAnnotationValue,model.getValues());
  model.setSourceInfo(sourceInfo);
  return model;
}"
10370,"@Override protected void visitAnnotation(Element parent,AnnotationMirror annotation,boolean primary,ClassName owner,ElementModel p){
  if (utils.isContractAnnotation(annotation)) {
    ContractAnnotationModel model=createContractModel(parent,annotation,primary,owner);
    if (type.getKind() == ElementKind.ANNOTATION_TYPE) {
      AnnotationSourceInfo asi=(AnnotationSourceInfo)model.getSourceInfo();
      diagnosticManager.warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ type.toString(),asi.getAnnotationValue().toString(),0,0,0,asi);
    }
 else {
      p.addEnclosedElement(model);
    }
  }
}","@Override protected void visitAnnotation(Element parent,AnnotationMirror annotation,boolean primary,ClassName owner,ElementModel p){
  if (utils.isContractAnnotation(annotation)) {
    ContractAnnotationModel model=createContractModel(parent,annotation,primary,owner);
    if (model == null) {
      return;
    }
    if (type.getKind() == ElementKind.ANNOTATION_TYPE) {
      AnnotationSourceInfo asi=(AnnotationSourceInfo)model.getSourceInfo();
      diagnosticManager.warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ type.toString(),asi.getAnnotationValue().toString(),0,0,0,asi);
    }
 else {
      p.addEnclosedElement(model);
    }
  }
}"
10371,"@Requires({""String_Node_Str"",""String_Node_Str""}) public static void err(String facility,String message,Throwable cause){
  System.err.println(""String_Node_Str"" + facility + ""String_Node_Str""+ message+ (cause != null ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  cause.printStackTrace();
  System.exit(1);
}","@Requires({""String_Node_Str"",""String_Node_Str""}) public static void err(String facility,String message,Throwable cause){
  System.err.println(""String_Node_Str"" + facility + ""String_Node_Str""+ message+ (cause != null ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  if (cause != null) {
    cause.printStackTrace();
  }
 else {
    new Exception().printStackTrace();
  }
  System.exit(1);
}"
10372,"/** 
 * Checks and transforms   {@code code}. If successful, results are stored in this instance and can be queried using the appropriate methods.
 * @param code the list of contract expressions to parse
 * @param lineNumbers line numbers associated with {@code code}
 * @param sourceInfo optional source information
 * @return {@code true} if there was no errors
 */
@Requires({""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) @Ensures({""String_Node_Str"",""String_Node_Str""}) @SuppressWarnings(""String_Node_Str"") public boolean transform(List<String> code,List<Long> lineNumbers,Object sourceInfo){
  oldParameters=new ArrayList<VariableModel>();
  oldParametersCode=new ArrayList<String>();
  oldParametersLineNumbers=new ArrayList<Long>();
  newCode=new ArrayList<String>();
  parsed=true;
  Iterator<Long> iterLineNumber=lineNumbers.iterator();
  code:   for (  String expr : code) {
    Long lineNumber=iterLineNumber.hasNext() ? iterLineNumber.next() : null;
    BalancedTokenizer tokenizer=new BalancedTokenizer(new StringReader(expr));
    int currentLevel=0;
    int newLevel=0;
    StringBuilder buffer=new StringBuilder();
    StringBuilder oldBuffer=null;
    String oldName=null;
    int oldContext=-1;
    ArrayDeque<Integer> impliesContext=new ArrayDeque<Integer>();
    int impliesCount=0;
    while (tokenizer.hasNext()) {
      Token token=tokenizer.next();
      newLevel=tokenizer.getCurrentLevel();
      StringBuilder currentBuffer=oldBuffer != null ? oldBuffer : buffer;
      if (newLevel == 0 && token.text.equals(""String_Node_Str"")) {
        diagnosticManager.error(""String_Node_Str"",expr,token.offset,token.offset,token.offset,sourceInfo);
        parsed=false;
        continue code;
      }
      if (newLevel < currentLevel) {
        appendImpliesTrail(currentBuffer,impliesCount);
        impliesCount=impliesContext.pop();
      }
 else       if (newLevel > currentLevel) {
        impliesContext.push(impliesCount);
        impliesCount=0;
      }
      if (oldBuffer != null) {
        if (newLevel == oldContext) {
          String oldExpr=oldBuffer.toString();
          oldParameters.add(new VariableModel(ElementKind.PARAMETER,oldName,new ClassName(""String_Node_Str"")));
          oldParametersCode.add(oldExpr);
          oldParametersLineNumbers.add(lineNumber);
          buffer.append(""String_Node_Str"");
          buffer.append(JavaUtils.BEGIN_GENERATED_CODE);
          buffer.append(MAGIC_CAST_METHOD);
          buffer.append(""String_Node_Str"");
          buffer.append(oldName);
          buffer.append(""String_Node_Str"");
          buffer.append(""String_Node_Str"");
          buffer.append(JavaUtils.END_GENERATED_CODE);
          buffer.append(oldExpr);
          buffer.append(JavaUtils.BEGIN_GENERATED_CODE);
          buffer.append(""String_Node_Str"");
          buffer.append(JavaUtils.END_GENERATED_CODE);
          buffer.append(""String_Node_Str"");
          oldBuffer=null;
          oldContext=-1;
        }
 else {
switch (token.kind) {
case WORD:
            if (token.text.equals(""String_Node_Str"")) {
              diagnosticManager.error(""String_Node_Str"",expr,token.offset,token.offset,token.offset,sourceInfo);
              parsed=false;
              continue code;
            }
          oldBuffer.append(token.text);
        break;
default :
      impliesCount+=transformCommon(oldBuffer,tokenizer,token);
  }
}
}
 else {
switch (token.kind) {
case WORD:
  if (acceptOld && token.text.equals(""String_Node_Str"")) {
    if (!tokenizer.hasNext() || !tokenizer.next().text.equals(""String_Node_Str"")) {
      int errorPos=tokenizer.getCurrentOffset();
      diagnosticManager.error(""String_Node_Str"",expr,errorPos,errorPos,errorPos,sourceInfo);
      parsed=false;
      continue code;
    }
    oldName=JavaUtils.OLD_VARIABLE_PREFIX + oldId++;
    oldBuffer=new StringBuilder();
    oldContext=currentLevel;
    break;
  }
default :
impliesCount+=transformCommon(buffer,tokenizer,token);
}
}
currentLevel=newLevel;
}
appendImpliesTrail(buffer,impliesCount);
if (tokenizer.hasErrors()) {
int errorPos=tokenizer.getCurrentOffset();
diagnosticManager.error(tokenizer.getErrorMessage(),expr,errorPos,errorPos,errorPos,sourceInfo);
parsed=false;
continue code;
}
newCode.add(buffer.toString());
}
return parsed;
}","/** 
 * Checks and transforms   {@code code}. If successful, results are stored in this instance and can be queried using the appropriate methods.
 * @param code the list of contract expressions to parse
 * @param lineNumbers line numbers associated with {@code code}
 * @param sourceInfo optional source information
 * @return {@code true} if there was no errors
 */
@Requires({""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) @Ensures({""String_Node_Str"",""String_Node_Str""}) @SuppressWarnings(""String_Node_Str"") public boolean transform(List<String> code,List<Long> lineNumbers,Object sourceInfo){
  oldParameters=new ArrayList<VariableModel>();
  oldParametersCode=new ArrayList<String>();
  oldParametersLineNumbers=new ArrayList<Long>();
  newCode=new ArrayList<String>();
  parsed=true;
  Iterator<Long> iterLineNumber=lineNumbers.iterator();
  code:   for (  String expr : code) {
    Long lineNumber=iterLineNumber.hasNext() ? iterLineNumber.next() : null;
    BalancedTokenizer tokenizer=new BalancedTokenizer(new StringReader(expr));
    int currentLevel=0;
    int newLevel=0;
    StringBuilder buffer=new StringBuilder();
    StringBuilder oldBuffer=null;
    String oldName=null;
    int oldContext=-1;
    ArrayDeque<Integer> impliesContext=new ArrayDeque<Integer>();
    int impliesCount=0;
    while (tokenizer.hasNext()) {
      Token token=tokenizer.next();
      newLevel=tokenizer.getCurrentLevel();
      StringBuilder currentBuffer=oldBuffer != null ? oldBuffer : buffer;
      if (newLevel == 0 && token.text.equals(""String_Node_Str"")) {
        diagnosticManager.error(""String_Node_Str"",expr,token.offset,token.offset,token.offset,sourceInfo);
        parsed=false;
        continue code;
      }
      if (newLevel < currentLevel) {
        appendImpliesTrail(currentBuffer,impliesCount);
        impliesCount=impliesContext.pop();
      }
 else       if (newLevel > currentLevel) {
        impliesContext.push(impliesCount);
        impliesCount=0;
      }
      if (oldBuffer != null) {
        if (newLevel == oldContext) {
          String oldExpr=oldBuffer.toString();
          oldParameters.add(new VariableModel(ElementKind.PARAMETER,oldName,new ClassName(""String_Node_Str"")));
          oldParametersCode.add(oldExpr);
          oldParametersLineNumbers.add(lineNumber);
          buffer.append(""String_Node_Str"");
          buffer.append(JavaUtils.BEGIN_GENERATED_CODE);
          buffer.append(MAGIC_CAST_METHOD);
          buffer.append(""String_Node_Str"");
          buffer.append(oldName);
          buffer.append(""String_Node_Str"");
          buffer.append(""String_Node_Str"");
          buffer.append(JavaUtils.END_GENERATED_CODE);
          buffer.append(oldExpr);
          buffer.append(JavaUtils.BEGIN_GENERATED_CODE);
          buffer.append(""String_Node_Str"");
          buffer.append(JavaUtils.END_GENERATED_CODE);
          buffer.append(""String_Node_Str"");
          oldBuffer=null;
          oldContext=-1;
        }
 else {
switch (token.kind) {
case WORD:
            if (token.text.equals(""String_Node_Str"")) {
              diagnosticManager.error(""String_Node_Str"",expr,token.offset,token.offset,token.offset,sourceInfo);
              parsed=false;
              continue code;
            }
          oldBuffer.append(token.text);
        break;
default :
      impliesCount+=transformCommon(oldBuffer,tokenizer,token);
  }
}
}
 else {
switch (token.kind) {
case WORD:
  if (acceptOld && token.text.equals(""String_Node_Str"")) {
    Token afterOld=null;
    if (!tokenizer.hasNext() || !((afterOld=tokenizer.next()).text.equals(""String_Node_Str"") || (afterOld.kind == TokenKind.SPACE && tokenizer.hasNext() && tokenizer.next().text.equals(""String_Node_Str"")))) {
      int errorPos=afterOld != null ? afterOld.offset : tokenizer.getCurrentOffset();
      diagnosticManager.error(""String_Node_Str"",expr,errorPos,errorPos,errorPos,sourceInfo);
      parsed=false;
      continue code;
    }
    oldName=JavaUtils.OLD_VARIABLE_PREFIX + oldId++;
    if (afterOld.kind == TokenKind.SPACE) {
      oldBuffer=new StringBuilder(afterOld.text);
    }
 else {
      oldBuffer=new StringBuilder();
    }
    oldContext=currentLevel;
    break;
  }
default :
impliesCount+=transformCommon(buffer,tokenizer,token);
}
}
currentLevel=newLevel;
}
appendImpliesTrail(buffer,impliesCount);
if (tokenizer.hasErrors()) {
int errorPos=tokenizer.getCurrentOffset();
diagnosticManager.error(tokenizer.getErrorMessage(),expr,errorPos,errorPos,errorPos,sourceInfo);
parsed=false;
continue code;
}
newCode.add(buffer.toString());
}
return parsed;
}"
10373,"@Requires(""String_Node_Str"") private void appendMethodDeclaration(MethodModel method){
  EnumSet<ElementModifier> modifiers=method.getModifiers();
  if (type.getKind() == ElementKind.INTERFACE) {
    modifiers.remove(ElementModifier.ABSTRACT);
  }
  appendModifiers(modifiers);
  append(""String_Node_Str"");
  appendGenericSignature(method.getTypeParameters());
  if (method.isConstructor()) {
    append(""String_Node_Str"");
    append(method.getEnclosingElement().getSimpleName());
  }
 else {
    append(""String_Node_Str"");
    append(method.getReturnType().getDeclaredName());
    append(""String_Node_Str"");
    append(method.getSimpleName());
  }
  append(""String_Node_Str"");
  Iterator<? extends VariableModel> it=method.getParameters().iterator();
  if (it.hasNext()) {
    for (; ; ) {
      VariableModel param=it.next();
      appendVariableDeclaration(param);
      if (!it.hasNext()) {
        break;
      }
      append(""String_Node_Str"");
    }
  }
  append(""String_Node_Str"");
  Set<? extends ClassName> exceptions=method.getExceptions();
  if (exceptions.size() != 0) {
    append(""String_Node_Str"");
    appendJoin(exceptions,""String_Node_Str"");
  }
}","@Requires(""String_Node_Str"") private void appendMethodDeclaration(MethodModel method){
  EnumSet<ElementModifier> modifiers=method.getModifiers();
  if (type.getKind() == ElementKind.INTERFACE) {
    modifiers.remove(ElementModifier.ABSTRACT);
  }
  appendModifiers(modifiers);
  append(""String_Node_Str"");
  appendGenericSignature(method.getTypeParameters());
  if (method.isConstructor()) {
    append(""String_Node_Str"");
    append(method.getEnclosingElement().getSimpleName());
  }
 else {
    append(""String_Node_Str"");
    append(method.getReturnType().getDeclaredName());
    append(""String_Node_Str"");
    append(method.getSimpleName());
  }
  append(""String_Node_Str"");
  Iterator<? extends VariableModel> it=method.getParameters().iterator();
  if (it.hasNext()) {
    for (; ; ) {
      VariableModel param=it.next();
      appendVariableDeclaration(param);
      if (!it.hasNext()) {
        break;
      }
      append(""String_Node_Str"");
    }
  }
  append(""String_Node_Str"");
  Set<? extends TypeName> exceptions=method.getExceptions();
  if (exceptions.size() != 0) {
    append(""String_Node_Str"");
    appendJoin(exceptions,""String_Node_Str"");
  }
}"
10374,"@Override public Void visitExecutable(ExecutableElement e,ElementModel p){
  MethodModel exec=null;
  String name=e.getSimpleName().toString();
  if (p.getKind() == ElementKind.ENUM) {
    ExecutableType t=(ExecutableType)e.asType();
    if (name.equals(""String_Node_Str"")) {
      if (t.getParameterTypes().isEmpty()) {
        return null;
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      List<TypeMirror> valueOfParameterTypes=Collections.singletonList(elementUtils.getTypeElement(""String_Node_Str"").asType());
      if (t.getParameterTypes().equals(valueOfParameterTypes)) {
        return null;
      }
    }
  }
  if (name.toString().equals(""String_Node_Str"")) {
    exec=new MethodModel();
  }
 else {
    exec=new MethodModel(ElementKind.METHOD,name,getTypeNameForType(e.getReturnType()));
  }
  copyModifiers(e,exec);
  List<? extends TypeParameterElement> genericTypes=e.getTypeParameters();
  for (  TypeParameterElement tp : genericTypes) {
    exec.addTypeParameter(getGenericTypeName(tp));
  }
  scan(e.getParameters(),exec);
  for (  TypeMirror tt : e.getThrownTypes()) {
    exec.addException(getClassNameForType(tt));
  }
  scanAnnotations(e,e.getAnnotationMirrors(),true,type.getKind() != ElementKind.INTERFACE,type.getName(),exec);
  p.addEnclosedElement(exec);
  addMethod(name,e,exec);
  return null;
}","@Override public Void visitExecutable(ExecutableElement e,ElementModel p){
  MethodModel exec=null;
  String name=e.getSimpleName().toString();
  if (p.getKind() == ElementKind.ENUM) {
    ExecutableType t=(ExecutableType)e.asType();
    if (name.equals(""String_Node_Str"")) {
      if (t.getParameterTypes().isEmpty()) {
        return null;
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      List<TypeMirror> valueOfParameterTypes=Collections.singletonList(elementUtils.getTypeElement(""String_Node_Str"").asType());
      if (t.getParameterTypes().equals(valueOfParameterTypes)) {
        return null;
      }
    }
  }
  if (name.toString().equals(""String_Node_Str"")) {
    exec=new MethodModel();
  }
 else {
    exec=new MethodModel(ElementKind.METHOD,name,getTypeNameForType(e.getReturnType()));
  }
  copyModifiers(e,exec);
  List<? extends TypeParameterElement> genericTypes=e.getTypeParameters();
  for (  TypeParameterElement tp : genericTypes) {
    exec.addTypeParameter(getGenericTypeName(tp));
  }
  scan(e.getParameters(),exec);
  for (  TypeMirror tt : e.getThrownTypes()) {
    exec.addException(getTypeNameForType(tt));
  }
  scanAnnotations(e,e.getAnnotationMirrors(),true,type.getKind() != ElementKind.INTERFACE,type.getName(),exec);
  p.addEnclosedElement(exec);
  addMethod(name,e,exec);
  return null;
}"
10375,"/** 
 * Constructs a new constructor model.
 */
public MethodModel(){
  super(ElementKind.CONSTRUCTOR,""String_Node_Str"");
  exceptions=new HashSet<ClassName>();
  returnType=null;
}","/** 
 * Constructs a new constructor model.
 */
public MethodModel(){
  super(ElementKind.CONSTRUCTOR,""String_Node_Str"");
  exceptions=new HashSet<TypeName>();
  returnType=null;
}"
10376,"@Requires(""String_Node_Str"") @Ensures(""String_Node_Str"") public void removeException(ClassName exception){
  exceptions.remove(exception);
}","@Requires(""String_Node_Str"") @Ensures(""String_Node_Str"") public void removeException(TypeName exception){
  exceptions.remove(exception);
}"
10377,"@Ensures(""String_Node_Str"") public Set<? extends ClassName> getExceptions(){
  return Collections.unmodifiableSet(exceptions);
}","@Ensures(""String_Node_Str"") public Set<? extends TypeName> getExceptions(){
  return Collections.unmodifiableSet(exceptions);
}"
10378,"@Requires(""String_Node_Str"") @Ensures(""String_Node_Str"") public void addException(ClassName exception){
  exceptions.add(exception);
}","@Requires(""String_Node_Str"") @Ensures(""String_Node_Str"") public void addException(TypeName exception){
  exceptions.add(exception);
}"
10379,"/** 
 * Returns a default value string of the specified type.
 */
@Requires(""String_Node_Str"") @Ensures(""String_Node_Str"") protected static String getDefaultValue(TypeName type){
  String name=type.getDeclaredName();
  if (name.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (numericTypes.contains(name)) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + name + ""String_Node_Str"";
  }
}","/** 
 * Returns a default value string of the specified type.
 */
@Requires(""String_Node_Str"") @Ensures(""String_Node_Str"") protected static String getDefaultValue(TypeName type){
  String name=type.getDeclaredName();
  if (name.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (numericTypes.contains(name)) {
    return ""String_Node_Str"" + name + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + name + ""String_Node_Str"";
  }
}"
10380,"@Override public UICollectionViewCell getCellForItem(UICollectionView collectionView,NSIndexPath indexPath){
  final AAPLGridViewCell cell=(AAPLGridViewCell)collectionView.dequeueReusableCell(CellReuseIdentifier,indexPath);
  final long currentTag=cell.getTag() + 1;
  cell.setTag(currentTag);
  PHAsset asset=assetsFetchResults.get(indexPath.getItem());
  imageManager.requestImageForAsset(asset,assetGridThumbnailSize,PHImageContentMode.AspectFill,null,new VoidBlock2<UIImage,NSDictionary<NSString,NSObject>>(){
    @Override public void invoke(    UIImage result,    NSDictionary<NSString,NSObject> b){
      if (cell.getTag() == currentTag) {
        cell.setThumbnailImage(result);
      }
    }
  }
);
  return cell;
}","@Override public UICollectionViewCell getCellForItem(UICollectionView collectionView,NSIndexPath indexPath){
  final AAPLGridViewCell cell=(AAPLGridViewCell)collectionView.dequeueReusableCell(CellReuseIdentifier,indexPath);
  final long currentTag=cell.getTag() + 1;
  cell.setTag(currentTag);
  PHAsset asset=assetsFetchResults.get(indexPath.getItem());
  imageManager.requestImageForAsset(asset,assetGridThumbnailSize,PHImageContentMode.AspectFill,null,(image,result) -> {
    if (cell.getTag() == currentTag) {
      cell.setThumbnailImage(image);
    }
  }
);
  return cell;
}"
10381,"@Override public void run(){
  PHAssetChangeRequest assetChangeRequest=PHAssetChangeRequest.createImageAssetCreationRequest(image);
  if (assetCollection != null) {
    PHAssetCollectionChangeRequest assetCollectionChangeRequest=new PHAssetCollectionChangeRequest(assetCollection);
    assetCollectionChangeRequest.addAssets(new NSArray<>(assetChangeRequest.getPlaceholderForCreatedAsset()));
  }
}","@Override public void run(){
  NSIndexSet removedIndexes=collectionChanges.getRemovedIndexes();
  if (removedIndexes != null && removedIndexes.size() > 0) {
    collectionView.deleteItems(getIndexPathsFromIndexesWithSection(removedIndexes,0));
  }
  NSIndexSet insertedIndexes=collectionChanges.getInsertedIndexes();
  if (insertedIndexes != null && insertedIndexes.size() > 0) {
    collectionView.insertItems(getIndexPathsFromIndexesWithSection(insertedIndexes,0));
  }
  NSIndexSet changedIndexes=collectionChanges.getChangedIndexes();
  if (changedIndexes != null && changedIndexes.size() > 0) {
    collectionView.reloadItems(getIndexPathsFromIndexesWithSection(changedIndexes,0));
  }
}"
10382,"@IBAction private void handleAddButtonItem(NSObject sender){
  CGRect rect=Math.random() % 2 == 0 ? new CGRect(0,0,400,300) : new CGRect(0,0,300,400);
  UIGraphics.beginImageContext(rect.getSize(),false,1.0);
  UIColor.fromHSBA(Math.random() % 100 / 100,1,1,1).setFill();
  UIGraphics.rectFill(rect,CGBlendMode.Normal);
  final UIImage image=UIGraphics.getImageFromCurrentImageContext();
  UIGraphics.endImageContext();
  PHPhotoLibrary.getSharedPhotoLibrary().performChanges(new Runnable(){
    @Override public void run(){
      PHAssetChangeRequest assetChangeRequest=PHAssetChangeRequest.createImageAssetCreationRequest(image);
      if (assetCollection != null) {
        PHAssetCollectionChangeRequest assetCollectionChangeRequest=new PHAssetCollectionChangeRequest(assetCollection);
        assetCollectionChangeRequest.addAssets(new NSArray<>(assetChangeRequest.getPlaceholderForCreatedAsset()));
      }
    }
  }
,new VoidBlock2<Boolean,NSError>(){
    @Override public void invoke(    Boolean success,    NSError error){
      if (!success) {
        System.err.println(""String_Node_Str"" + error);
      }
    }
  }
);
}","@IBAction private void handleAddButtonItem(NSObject sender){
  CGRect rect=Math.random() % 2 == 0 ? new CGRect(0,0,400,300) : new CGRect(0,0,300,400);
  UIGraphics.beginImageContext(rect.getSize(),false,1.0);
  UIColor.fromHSBA(Math.random() % 100 / 100,1,1,1).setFill();
  UIGraphics.rectFill(rect,CGBlendMode.Normal);
  final UIImage image=UIGraphics.getImageFromCurrentImageContext();
  UIGraphics.endImageContext();
  PHPhotoLibrary.getSharedPhotoLibrary().performChanges(() -> {
    PHAssetChangeRequest assetChangeRequest=PHAssetChangeRequest.createImageAssetCreationRequest(image);
    if (assetCollection != null) {
      PHAssetCollectionChangeRequest assetCollectionChangeRequest=new PHAssetCollectionChangeRequest(assetCollection);
      assetCollectionChangeRequest.addAssets(new NSArray<>(assetChangeRequest.getPlaceholderForCreatedAsset()));
    }
  }
,(success,error) -> {
    if (!success) {
      System.err.println(""String_Node_Str"" + error);
    }
  }
);
}"
10383,"@Override public void didChange(final PHChange changeInstance){
  DispatchQueue.getMainQueue().async(new Runnable(){
    @Override public void run(){
      final PHFetchResultChangeDetails<PHAsset> collectionChanges=changeInstance.getChangeDetailsForFetchResult(assetsFetchResults);
      if (collectionChanges != null) {
        assetsFetchResults=collectionChanges.getFetchResultAfterChanges();
        final UICollectionView collectionView=getCollectionView();
        if (!collectionChanges.hasIncrementalChanges() || collectionChanges.hasMoves()) {
          collectionView.reloadData();
        }
 else {
          collectionView.performBatchUpdates(new Runnable(){
            @Override public void run(){
              NSIndexSet removedIndexes=collectionChanges.getRemovedIndexes();
              if (removedIndexes != null && removedIndexes.size() > 0) {
                collectionView.deleteItems(getIndexPathsFromIndexesWithSection(removedIndexes,0));
              }
              NSIndexSet insertedIndexes=collectionChanges.getInsertedIndexes();
              if (insertedIndexes != null && insertedIndexes.size() > 0) {
                collectionView.insertItems(getIndexPathsFromIndexesWithSection(insertedIndexes,0));
              }
              NSIndexSet changedIndexes=collectionChanges.getChangedIndexes();
              if (changedIndexes != null && changedIndexes.size() > 0) {
                collectionView.reloadItems(getIndexPathsFromIndexesWithSection(changedIndexes,0));
              }
            }
          }
,null);
        }
      }
      resetCachedAssets();
    }
  }
);
}","@Override public void didChange(final PHChange changeInstance){
  DispatchQueue.getMainQueue().async(() -> {
    final PHFetchResultChangeDetails<PHAsset> collectionChanges=changeInstance.getChangeDetailsForFetchResult(assetsFetchResults);
    if (collectionChanges != null) {
      assetsFetchResults=collectionChanges.getFetchResultAfterChanges();
      final UICollectionView collectionView=getCollectionView();
      if (!collectionChanges.hasIncrementalChanges() || collectionChanges.hasMoves()) {
        collectionView.reloadData();
      }
 else {
        collectionView.performBatchUpdates(new Runnable(){
          @Override public void run(){
            NSIndexSet removedIndexes=collectionChanges.getRemovedIndexes();
            if (removedIndexes != null && removedIndexes.size() > 0) {
              collectionView.deleteItems(getIndexPathsFromIndexesWithSection(removedIndexes,0));
            }
            NSIndexSet insertedIndexes=collectionChanges.getInsertedIndexes();
            if (insertedIndexes != null && insertedIndexes.size() > 0) {
              collectionView.insertItems(getIndexPathsFromIndexesWithSection(insertedIndexes,0));
            }
            NSIndexSet changedIndexes=collectionChanges.getChangedIndexes();
            if (changedIndexes != null && changedIndexes.size() > 0) {
              collectionView.reloadItems(getIndexPathsFromIndexesWithSection(changedIndexes,0));
            }
          }
        }
,null);
      }
    }
    resetCachedAssets();
  }
);
}"
10384,"private void updateCachedAssets(){
  boolean isViewVisible=isViewLoaded() && getView().getWindow() != null;
  if (!isViewVisible)   return;
  CGRect preheatRect=getCollectionView().getBounds();
  preheatRect=preheatRect.inset(0.0,-0.5 * preheatRect.getHeight());
  double delta=Math.abs(preheatRect.getMidY() - previousPreheatRect.getMidY());
  if (delta > getCollectionView().getBounds().getHeight() / 3.0) {
    final NSArray<NSIndexPath> addedIndexPaths=new NSMutableArray<>();
    final NSArray<NSIndexPath> removedIndexPaths=new NSMutableArray<>();
    computeDifferenceBetweenRects(previousPreheatRect,preheatRect,new VoidBlock1<CGRect>(){
      @Override public void invoke(      CGRect removedRect){
        NSArray<NSIndexPath> indexPaths=getIndexPathsForElementsInRect(removedRect);
        if (indexPaths != null) {
          removedIndexPaths.addAll(indexPaths);
        }
      }
    }
,new VoidBlock1<CGRect>(){
      @Override public void invoke(      CGRect addedRect){
        NSArray<NSIndexPath> indexPaths=getIndexPathsForElementsInRect(addedRect);
        if (indexPaths != null) {
          addedIndexPaths.addAll(indexPaths);
        }
      }
    }
);
    NSArray<PHAsset> assetsToStartCaching=getAssetsAtIndexPaths(addedIndexPaths);
    NSArray<PHAsset> assetsToStopCaching=getAssetsAtIndexPaths(removedIndexPaths);
    imageManager.startCachingImagesForAssets(assetsToStartCaching,assetGridThumbnailSize,PHImageContentMode.AspectFill,null);
    imageManager.stopCachingImagesForAssets(assetsToStopCaching,assetGridThumbnailSize,PHImageContentMode.AspectFill,null);
    previousPreheatRect=preheatRect;
  }
}","private void updateCachedAssets(){
  boolean isViewVisible=isViewLoaded() && getView().getWindow() != null;
  if (!isViewVisible)   return;
  CGRect preheatRect=getCollectionView().getBounds();
  preheatRect=preheatRect.inset(0.0,-0.5 * preheatRect.getHeight());
  double delta=Math.abs(preheatRect.getMidY() - previousPreheatRect.getMidY());
  if (delta > getCollectionView().getBounds().getHeight() / 3.0) {
    final NSArray<NSIndexPath> addedIndexPaths=new NSMutableArray<>();
    final NSArray<NSIndexPath> removedIndexPaths=new NSMutableArray<>();
    computeDifferenceBetweenRects(previousPreheatRect,preheatRect,(removedRect) -> {
      NSArray<NSIndexPath> indexPaths=getIndexPathsForElementsInRect(removedRect);
      if (indexPaths != null) {
        removedIndexPaths.addAll(indexPaths);
      }
    }
,(addedRect) -> {
      NSArray<NSIndexPath> indexPaths=getIndexPathsForElementsInRect(addedRect);
      if (indexPaths != null) {
        addedIndexPaths.addAll(indexPaths);
      }
    }
);
    NSArray<PHAsset> assetsToStartCaching=getAssetsAtIndexPaths(addedIndexPaths);
    NSArray<PHAsset> assetsToStopCaching=getAssetsAtIndexPaths(removedIndexPaths);
    imageManager.startCachingImagesForAssets(assetsToStartCaching,assetGridThumbnailSize,PHImageContentMode.AspectFill,null);
    imageManager.stopCachingImagesForAssets(assetsToStopCaching,assetGridThumbnailSize,PHImageContentMode.AspectFill,null);
    previousPreheatRect=preheatRect;
  }
}"
10385,"private NSArray<NSIndexPath> getIndexPathsFromIndexesWithSection(NSIndexSet indexSet,final long section){
  final NSArray<NSIndexPath> indexPaths=new NSMutableArray<>(indexSet.size());
  indexSet.enumerateIndexes(new VoidBlock2<Long,BooleanPtr>(){
    @Override public void invoke(    Long idx,    BooleanPtr stop){
      indexPaths.add(NSIndexPath.item(idx,section));
    }
  }
);
  return indexPaths;
}","private NSArray<NSIndexPath> getIndexPathsFromIndexesWithSection(NSIndexSet indexSet,final long section){
  final NSArray<NSIndexPath> indexPaths=new NSMutableArray<>(indexSet.size());
  indexSet.enumerateIndexes((idx,stop) -> {
    indexPaths.add(NSIndexPath.item(idx,section));
  }
);
  return indexPaths;
}"
10386,"@Override public UITableViewCell getCellForRow(UITableView tableView,NSIndexPath indexPath){
  final String cellIdentifier=""String_Node_Str"";
  GTLPlusPerson personToShow=myPeeps.get(indexPath.getRow());
  UITableViewCell cell=tableView.dequeueReusableCell(cellIdentifier);
  if (cell == null) {
    cell=new UITableViewCell(UITableViewCellStyle.Default,cellIdentifier);
  }
  if (personToShow.getImage() != null) {
    cell.getImageView().setImage(UIImage.create(NSData.read(new NSURL(personToShow.getImage().getUrl()))));
  }
  Log.d(""String_Node_Str"",personToShow.getImage().getUrl());
  cell.getTextLabel().setText(personToShow.getDisplayName());
  return cell;
}","@Override public UITableViewCell getCellForRow(UITableView tableView,NSIndexPath indexPath){
  final String cellIdentifier=""String_Node_Str"";
  GTLPlusPerson personToShow=myPeeps.get(indexPath.getRow());
  UITableViewCell cell=tableView.dequeueReusableCell(cellIdentifier);
  if (cell == null) {
    cell=new UITableViewCell(UITableViewCellStyle.Default,cellIdentifier);
  }
  if (personToShow.getImage() != null) {
    cell.getImageView().setImage(new UIImage(NSData.read(new NSURL(personToShow.getImage().getUrl()))));
  }
  Log.d(""String_Node_Str"",personToShow.getImage().getUrl());
  cell.getTextLabel().setText(personToShow.getDisplayName());
  return cell;
}"
10387,"public APAViewController(){
  UIView view=getView();
  view.setBackgroundColor(UIColor.white());
  skView=new SKView();
  skView.setFrame(UIScreen.getMainScreen().getApplicationFrame());
  view.addSubview(skView);
  gameLogo=new UIImageView(new CGRect(97,-10,375,220));
  gameLogo.setImage(UIImage.create(""String_Node_Str""));
  skView.addSubview(gameLogo);
  archerButton=new UIButton(new CGRect(29,238,186,38));
  archerButton.setImage(UIImage.create(""String_Node_Str""),UIControlState.Normal);
  archerButton.setTitleColor(UIColor.fromRGBA(0.196,0.309,0.521,1),UIControlState.Normal);
  archerButton.setTitleShadowColor(UIColor.fromWhiteAlpha(0.5,1),UIControlState.Normal);
  archerButton.setTitleColor(UIColor.white(),UIControlState.Highlighted);
  archerButton.addOnTouchUpInsideListener(new UIControl.OnTouchUpInsideListener(){
    @Override public void onTouchUpInside(    UIControl control,    UIEvent event){
      startGame(APAHeroType.Archer);
    }
  }
);
  skView.addSubview(archerButton);
  warriorButton=new UIButton(new CGRect(353,238,186,38));
  warriorButton.setImage(UIImage.create(""String_Node_Str""),UIControlState.Normal);
  warriorButton.setTitleColor(UIColor.fromRGBA(0.196,0.31,0.522,1),UIControlState.Normal);
  warriorButton.setTitleShadowColor(UIColor.fromWhiteAlpha(0.5,1),UIControlState.Normal);
  warriorButton.setTitleColor(UIColor.white(),UIControlState.Highlighted);
  warriorButton.addOnTouchUpInsideListener(new UIControl.OnTouchUpInsideListener(){
    @Override public void onTouchUpInside(    UIControl control,    UIEvent event){
      startGame(APAHeroType.Warrior);
    }
  }
);
  skView.addSubview(warriorButton);
  loadingProgressIndicator=new UIActivityIndicatorView(UIActivityIndicatorViewStyle.Gray);
  loadingProgressIndicator.setFrame(new CGRect(274,195,20,20));
  skView.addSubview(loadingProgressIndicator);
}","public APAViewController(){
  UIView view=getView();
  view.setBackgroundColor(UIColor.white());
  skView=new SKView();
  skView.setFrame(UIScreen.getMainScreen().getBounds());
  view.addSubview(skView);
  gameLogo=new UIImageView(new CGRect(97,-10,375,220));
  gameLogo.setImage(UIImage.getImage(""String_Node_Str""));
  skView.addSubview(gameLogo);
  archerButton=new UIButton(new CGRect(29,238,186,38));
  archerButton.setImage(UIImage.getImage(""String_Node_Str""),UIControlState.Normal);
  archerButton.setTitleColor(UIColor.fromRGBA(0.196,0.309,0.521,1),UIControlState.Normal);
  archerButton.setTitleShadowColor(UIColor.fromWhiteAlpha(0.5,1),UIControlState.Normal);
  archerButton.setTitleColor(UIColor.white(),UIControlState.Highlighted);
  archerButton.addOnTouchUpInsideListener(new UIControl.OnTouchUpInsideListener(){
    @Override public void onTouchUpInside(    UIControl control,    UIEvent event){
      startGame(APAHeroType.Archer);
    }
  }
);
  skView.addSubview(archerButton);
  warriorButton=new UIButton(new CGRect(353,238,186,38));
  warriorButton.setImage(UIImage.getImage(""String_Node_Str""),UIControlState.Normal);
  warriorButton.setTitleColor(UIColor.fromRGBA(0.196,0.31,0.522,1),UIControlState.Normal);
  warriorButton.setTitleShadowColor(UIColor.fromWhiteAlpha(0.5,1),UIControlState.Normal);
  warriorButton.setTitleColor(UIColor.white(),UIControlState.Highlighted);
  warriorButton.addOnTouchUpInsideListener(new UIControl.OnTouchUpInsideListener(){
    @Override public void onTouchUpInside(    UIControl control,    UIEvent event){
      startGame(APAHeroType.Warrior);
    }
  }
);
  skView.addSubview(warriorButton);
  loadingProgressIndicator=new UIActivityIndicatorView(UIActivityIndicatorViewStyle.Gray);
  loadingProgressIndicator.setFrame(new CGRect(274,195,20,20));
  skView.addSubview(loadingProgressIndicator);
}"
10388,"private void loadWorldTiles(){
  System.out.println(""String_Node_Str"");
  NSDate startDate=new NSDate();
  SKTextureAtlas tileAtlas=SKTextureAtlas.create(""String_Node_Str"");
  sharedBackgroundTiles=new NSMutableArray<>(1024);
  System.out.println(""String_Node_Str"");
  for (int y=0; y < WORLD_TILE_DIVISOR; y++) {
    for (int x=0; x < WORLD_TILE_DIVISOR; x++) {
      int tileNumber=(y * WORLD_TILE_DIVISOR) + x;
      SKSpriteNode tileNode=SKSpriteNode.create(tileAtlas.getTexture(String.format(""String_Node_Str"",tileNumber)));
      CGPoint position=new CGPoint((x * WORLD_TILE_SIZE) - WORLD_CENTER,(WORLD_SIZE - (y * WORLD_TILE_SIZE)) - WORLD_CENTER);
      tileNode.setPosition(position);
      tileNode.setZPosition(-1.0);
      tileNode.setBlendMode(SKBlendMode.Replace);
      sharedBackgroundTiles.add(tileNode);
    }
  }
  System.out.println(String.format(""String_Node_Str"",new NSDate().getTimeIntervalSince(startDate)));
}","private void loadWorldTiles(){
  System.out.println(""String_Node_Str"");
  NSDate startDate=new NSDate();
  SKTextureAtlas tileAtlas=new SKTextureAtlas(""String_Node_Str"");
  sharedBackgroundTiles=new NSMutableArray<>(1024);
  System.out.println(""String_Node_Str"");
  for (int y=0; y < WORLD_TILE_DIVISOR; y++) {
    for (int x=0; x < WORLD_TILE_DIVISOR; x++) {
      int tileNumber=(y * WORLD_TILE_DIVISOR) + x;
      SKSpriteNode tileNode=new SKSpriteNode(tileAtlas.getTexture(String.format(""String_Node_Str"",tileNumber)));
      CGPoint position=new CGPoint((x * WORLD_TILE_SIZE) - WORLD_CENTER,(WORLD_SIZE - (y * WORLD_TILE_SIZE)) - WORLD_CENTER);
      tileNode.setPosition(position);
      tileNode.setZPosition(-1.0);
      tileNode.setBlendMode(SKBlendMode.Replace);
      sharedBackgroundTiles.add(tileNode);
    }
  }
  System.out.println(String.format(""String_Node_Str"",new NSDate().getTimeIntervalSince(startDate)));
}"
10389,"@Override void loadSceneAssets(){
  SKTextureAtlas atlas=SKTextureAtlas.create(""String_Node_Str"");
  sharedProjectileSparkEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
  sharedSpawnEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
  sharedSmallTree=new APATree(new NSArray<SKSpriteNode>(SKSpriteNode.create(atlas.getTexture(""String_Node_Str"")),SKSpriteNode.create(atlas.getTexture(""String_Node_Str"")),SKSpriteNode.create(atlas.getTexture(""String_Node_Str""))),25.0);
  sharedBigTree=new APATree(new NSArray<SKSpriteNode>(SKSpriteNode.create(atlas.getTexture(""String_Node_Str"")),SKSpriteNode.create(atlas.getTexture(""String_Node_Str"")),SKSpriteNode.create(atlas.getTexture(""String_Node_Str""))),150.0);
  sharedBigTree.setFadesAlpha(true);
  sharedLeafEmitterA=APAUtils.getEmitterNodeByName(""String_Node_Str"");
  sharedLeafEmitterB=APAUtils.getEmitterNodeByName(""String_Node_Str"");
  loadWorldTiles();
  APAArcher.loadSharedAssets();
  APABoss.loadSharedAssets();
  APACave.loadSharedAssets();
  APAGoblin.loadSharedAssets();
  APAHeroCharacter.loadSharedAssets();
  APAWarrior.loadSharedAssets();
}","@Override void loadSceneAssets(){
  SKTextureAtlas atlas=new SKTextureAtlas(""String_Node_Str"");
  sharedProjectileSparkEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
  sharedSpawnEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
  sharedSmallTree=new APATree(new NSArray<SKSpriteNode>(new SKSpriteNode(atlas.getTexture(""String_Node_Str"")),new SKSpriteNode(atlas.getTexture(""String_Node_Str"")),new SKSpriteNode(atlas.getTexture(""String_Node_Str""))),25.0);
  sharedBigTree=new APATree(new NSArray<SKSpriteNode>(new SKSpriteNode(atlas.getTexture(""String_Node_Str"")),new SKSpriteNode(atlas.getTexture(""String_Node_Str"")),new SKSpriteNode(atlas.getTexture(""String_Node_Str""))),150.0);
  sharedBigTree.setFadesAlpha(true);
  sharedLeafEmitterA=APAUtils.getEmitterNodeByName(""String_Node_Str"");
  sharedLeafEmitterB=APAUtils.getEmitterNodeByName(""String_Node_Str"");
  loadWorldTiles();
  APAArcher.loadSharedAssets();
  APABoss.loadSharedAssets();
  APACave.loadSharedAssets();
  APAGoblin.loadSharedAssets();
  APAHeroCharacter.loadSharedAssets();
  APAWarrior.loadSharedAssets();
}"
10390,"private void buildHUD(){
  String iconNames[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  UIColor colors[]=new UIColor[]{UIColor.green(),UIColor.blue(),UIColor.yellow(),UIColor.red()};
  double hudX=30;
  double hudY=getFrame().getSize().getHeight() - 30;
  double hudD=getFrame().getSize().getWidth() / NUM_PLAYERS;
  SKNode hud=new SKNode();
  for (int i=0; i < NUM_PLAYERS; i++) {
    SKSpriteNode avatar=SKSpriteNode.create(iconNames[i]);
    avatar.setScale(0.5);
    avatar.setAlpha(0.5);
    avatar.setPosition(new CGPoint(hudX + i * hudD + (avatar.getSize().getWidth() * 0.5),getFrame().getSize().getHeight() - avatar.getSize().getHeight() * 0.5 - 8));
    hudAvatars.add(avatar);
    hud.addChild(avatar);
    SKLabelNode label=SKLabelNode.createWithFont(""String_Node_Str"");
    label.setText(""String_Node_Str"");
    label.setFontColor(colors[i]);
    label.setFontSize(16);
    label.setHorizontalAlignmentMode(SKLabelHorizontalAlignmentMode.Left);
    label.setPosition(new CGPoint(hudX + i * hudD + (avatar.getSize().getWidth() * 1.0),hudY + 10));
    hudLabels.add(label);
    hud.addChild(label);
    SKLabelNode score=SKLabelNode.createWithFont(""String_Node_Str"");
    score.setText(""String_Node_Str"");
    score.setFontColor(colors[i]);
    score.setFontSize(16);
    score.setHorizontalAlignmentMode(SKLabelHorizontalAlignmentMode.Left);
    score.setPosition(new CGPoint(hudX + i * hudD + (avatar.getSize().getWidth() * 1.0),hudY - 40));
    hudScores.add(score);
    hud.addChild(score);
    hudLifeHeartArrays.add(new NSMutableArray<SKSpriteNode>(APAPlayer.START_LIVES));
    for (int j=0; j < APAPlayer.START_LIVES; j++) {
      SKSpriteNode heart=SKSpriteNode.create(""String_Node_Str"");
      heart.setScale(0.4);
      heart.setPosition(new CGPoint(hudX + i * hudD + (avatar.getSize().getWidth() * 1.0) + 18 + ((heart.getSize().getWidth() + 5) * j),hudY - 10));
      heart.setAlpha(0.1);
      hudLifeHeartArrays.get(i).add(heart);
      hud.addChild(heart);
    }
  }
  addChild(hud);
}","private void buildHUD(){
  String iconNames[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  UIColor colors[]=new UIColor[]{UIColor.green(),UIColor.blue(),UIColor.yellow(),UIColor.red()};
  double hudX=30;
  double hudY=getFrame().getSize().getHeight() - 30;
  double hudD=getFrame().getSize().getWidth() / NUM_PLAYERS;
  SKNode hud=new SKNode();
  for (int i=0; i < NUM_PLAYERS; i++) {
    SKSpriteNode avatar=new SKSpriteNode(iconNames[i]);
    avatar.setScale(0.5);
    avatar.setAlpha(0.5);
    avatar.setPosition(new CGPoint(hudX + i * hudD + (avatar.getSize().getWidth() * 0.5),getFrame().getSize().getHeight() - avatar.getSize().getHeight() * 0.5 - 8));
    hudAvatars.add(avatar);
    hud.addChild(avatar);
    SKLabelNode label=new SKLabelNode(""String_Node_Str"",""String_Node_Str"");
    label.setFontColor(colors[i]);
    label.setFontSize(16);
    label.setHorizontalAlignmentMode(SKLabelHorizontalAlignmentMode.Left);
    label.setPosition(new CGPoint(hudX + i * hudD + (avatar.getSize().getWidth() * 1.0),hudY + 10));
    hudLabels.add(label);
    hud.addChild(label);
    SKLabelNode score=new SKLabelNode(""String_Node_Str"",""String_Node_Str"");
    score.setFontColor(colors[i]);
    score.setFontSize(16);
    score.setHorizontalAlignmentMode(SKLabelHorizontalAlignmentMode.Left);
    score.setPosition(new CGPoint(hudX + i * hudD + (avatar.getSize().getWidth() * 1.0),hudY - 40));
    hudScores.add(score);
    hud.addChild(score);
    hudLifeHeartArrays.add(new NSMutableArray<SKSpriteNode>(APAPlayer.START_LIVES));
    for (int j=0; j < APAPlayer.START_LIVES; j++) {
      SKSpriteNode heart=new SKSpriteNode(""String_Node_Str"");
      heart.setScale(0.4);
      heart.setPosition(new CGPoint(hudX + i * hudD + (avatar.getSize().getWidth() * 1.0) + 18 + ((heart.getSize().getWidth() + 5) * j),hudY - 10));
      heart.setAlpha(0.1);
      hudLifeHeartArrays.get(i).add(heart);
      hud.addChild(heart);
    }
  }
  addChild(hud);
}"
10391,"private void assignUnknownController(GCController controller){
  for (int playerIndex=0; playerIndex < NUM_PLAYERS; playerIndex++) {
    APAPlayer player=players.get(playerIndex);
    if (player == null) {
      player=new APAPlayer();
      players.set(playerIndex,player);
      updateHUD(player,APAHUDState.Connected,""String_Node_Str"");
    }
    if (player.controller != null) {
      continue;
    }
    controller.setPlayerIndex(playerIndex);
    configureController(controller,player);
    return;
  }
}","private void assignUnknownController(GCController controller){
  for (int playerIndex=0; playerIndex < NUM_PLAYERS; playerIndex++) {
    APAPlayer player=players.get(playerIndex);
    if (player == null) {
      player=new APAPlayer();
      players.set(playerIndex,player);
      updateHUD(player,APAHUDState.Connected,""String_Node_Str"");
    }
    if (player.controller != null) {
      continue;
    }
    controller.setPlayerIndex(GCControllerPlayerIndex.valueOf(playerIndex));
    configureController(controller,player);
    return;
  }
}"
10392,"private void configureConnectedGameControllers(){
  for (  GCController controller : GCController.getControllers()) {
    int playerIndex=(int)controller.getPlayerIndex();
    if (playerIndex == -1) {
      continue;
    }
    assignPresetController(controller,playerIndex);
  }
  for (  GCController controller : GCController.getControllers()) {
    long playerIndex=controller.getPlayerIndex();
    if (playerIndex == -1) {
      continue;
    }
    assignUnknownController(controller);
  }
}","private void configureConnectedGameControllers(){
  for (  GCController controller : GCController.getControllers()) {
    GCControllerPlayerIndex playerIndex=controller.getPlayerIndex();
    if (playerIndex == GCControllerPlayerIndex.Unset) {
      continue;
    }
    assignPresetController(controller,playerIndex);
  }
  for (  GCController controller : GCController.getControllers()) {
    GCControllerPlayerIndex playerIndex=controller.getPlayerIndex();
    if (playerIndex == GCControllerPlayerIndex.Unset) {
      continue;
    }
    assignUnknownController(controller);
  }
}"
10393,"/** 
 * This method should be called when the level is loaded to set up currently-connected game controllers, and register for the relevant notifications to deal with new connections/disconnections.
 */
public void configureGameControllers(){
  controllerDidConnect=GCController.Notifications.observeDidConnect(new VoidBlock1<GCController>(){
    @Override public void invoke(    GCController controller){
      System.out.println(""String_Node_Str"" + controller);
      int playerIndex=(int)controller.getPlayerIndex();
      if (playerIndex == -1) {
        assignUnknownController(controller);
      }
 else {
        assignPresetController(controller,playerIndex);
      }
    }
  }
);
  controllerDidDisconnect=GCController.Notifications.observeDidDisconnect(new VoidBlock1<GCController>(){
    @Override public void invoke(    GCController controller){
      for (      APAPlayer player : players) {
        if (player == null) {
          continue;
        }
        if (player.controller == controller) {
          player.controller=null;
        }
      }
      System.out.println(""String_Node_Str"" + controller);
    }
  }
);
  configureConnectedGameControllers();
  GCController.startWirelessControllerDiscovery(new Runnable(){
    @Override public void run(){
      System.out.println(""String_Node_Str"");
    }
  }
);
}","/** 
 * This method should be called when the level is loaded to set up currently-connected game controllers, and register for the relevant notifications to deal with new connections/disconnections.
 */
public void configureGameControllers(){
  controllerDidConnect=GCController.Notifications.observeDidConnect(new VoidBlock1<GCController>(){
    @Override public void invoke(    GCController controller){
      System.out.println(""String_Node_Str"" + controller);
      GCControllerPlayerIndex playerIndex=controller.getPlayerIndex();
      if (playerIndex == GCControllerPlayerIndex.Unset) {
        assignUnknownController(controller);
      }
 else {
        assignPresetController(controller,playerIndex);
      }
    }
  }
);
  controllerDidDisconnect=GCController.Notifications.observeDidDisconnect(new VoidBlock1<GCController>(){
    @Override public void invoke(    GCController controller){
      for (      APAPlayer player : players) {
        if (player == null) {
          continue;
        }
        if (player.controller == controller) {
          player.controller=null;
        }
      }
      System.out.println(""String_Node_Str"" + controller);
    }
  }
);
  configureConnectedGameControllers();
  GCController.startWirelessControllerDiscovery(new Runnable(){
    @Override public void run(){
      System.out.println(""String_Node_Str"");
    }
  }
);
}"
10394,"private void assignPresetController(GCController controller,int playerIndex){
  APAPlayer player=players.get(playerIndex);
  if (player == null) {
    player=new APAPlayer();
    players.set(playerIndex,player);
    updateHUD(player,APAHUDState.Connected,""String_Node_Str"");
  }
  if (player.controller != null && player.controller != controller) {
    assignUnknownController(controller);
    return;
  }
  configureController(controller,player);
}","private void assignPresetController(GCController controller,GCControllerPlayerIndex playerIndex){
  int pi=(int)playerIndex.value();
  APAPlayer player=players.get(pi);
  if (player == null) {
    player=new APAPlayer();
    players.set(pi,player);
    updateHUD(player,APAHUDState.Connected,""String_Node_Str"");
  }
  if (player.controller != null && player.controller != controller) {
    assignUnknownController(controller);
    return;
  }
  configureController(controller,player);
}"
10395,"public static void loadSharedAssets(){
  if (sharedProjectile == null) {
    sharedProjectile=SKSpriteNode.create(UIColor.white(),new CGSize(2.0,24.0));
    sharedProjectile.setPhysicsBody(SKPhysicsBody.createCircle(PROJECTILE_COLLISION_RADIUS));
    sharedProjectile.setName(""String_Node_Str"");
    sharedProjectile.getPhysicsBody().setCategoryBitMask(APAColliderType.Projectile);
    sharedProjectile.getPhysicsBody().setCollisionBitMask(APAColliderType.Wall);
    sharedProjectile.getPhysicsBody().setContactTestBitMask(sharedProjectile.getPhysicsBody().getCollisionBitMask());
    sharedProjectileEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    sharedWalkAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEFAULT_NUMBER_OF_IDLE_FRAMES);
    sharedWalkAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEFAULT_NUMBER_OF_WALK_FRAMES);
    sharedAttackAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",ATTACK_FRAMES);
    sharedGetHitAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",GET_HIT_FRAMES);
    sharedDeathAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEATH_FRAMES);
    sharedDamageAction=SKAction.sequence(new NSArray<SKAction>(SKAction.colorize(UIColor.white(),10.0,0.0),SKAction.wait(0.75),SKAction.colorize(0.0,0.25)));
  }
}","public static void loadSharedAssets(){
  if (sharedProjectile == null) {
    sharedProjectile=new SKSpriteNode(UIColor.white(),new CGSize(2.0,24.0));
    sharedProjectile.setPhysicsBody(SKPhysicsBody.createCircle(PROJECTILE_COLLISION_RADIUS));
    sharedProjectile.setName(""String_Node_Str"");
    sharedProjectile.getPhysicsBody().setCategoryBitMask(APAColliderType.Projectile);
    sharedProjectile.getPhysicsBody().setCollisionBitMask(APAColliderType.Wall);
    sharedProjectile.getPhysicsBody().setContactTestBitMask(sharedProjectile.getPhysicsBody().getCollisionBitMask());
    sharedProjectileEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    sharedWalkAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEFAULT_NUMBER_OF_IDLE_FRAMES);
    sharedWalkAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEFAULT_NUMBER_OF_WALK_FRAMES);
    sharedAttackAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",ATTACK_FRAMES);
    sharedGetHitAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",GET_HIT_FRAMES);
    sharedDeathAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEATH_FRAMES);
    sharedDamageAction=SKAction.sequence(new NSArray<SKAction>(SKAction.colorize(UIColor.white(),10.0,0.0),SKAction.wait(0.75),SKAction.colorize(0.0,0.25)));
  }
}"
10396,"public APAArcher(CGPoint position,APAPlayer player){
  super(SKTextureAtlas.create(""String_Node_Str"").getTexture(""String_Node_Str""),position,player);
}","public APAArcher(CGPoint position,APAPlayer player){
  super(new SKTextureAtlas(""String_Node_Str"").getTexture(""String_Node_Str""),position,player);
}"
10397,"public APABoss(CGPoint position){
  super(SKTextureAtlas.create(""String_Node_Str"").getTexture(""String_Node_Str""),position);
  movementSpeed=MOVEMENT_SPEED * 0.35f;
  animationSpeed=1.0 / 35.0;
  setZPosition(-0.25);
  setName(""String_Node_Str"");
  attacking=false;
  APAChaseAI intelligence=new APAChaseAI(this,null);
  intelligence.setChaseRadius(CHASE_RADIUS);
  intelligence.setMaxAlertRadius(CHASE_RADIUS * 4.0);
  this.intelligence=intelligence;
}","public APABoss(CGPoint position){
  super(new SKTextureAtlas(""String_Node_Str"").getTexture(""String_Node_Str""),position);
  movementSpeed=MOVEMENT_SPEED * 0.35f;
  animationSpeed=1.0 / 35.0;
  setZPosition(-0.25);
  setName(""String_Node_Str"");
  attacking=false;
  APAChaseAI intelligence=new APAChaseAI(this,null);
  intelligence.setChaseRadius(CHASE_RADIUS);
  intelligence.setMaxAlertRadius(CHASE_RADIUS * 4.0);
  this.intelligence=intelligence;
}"
10398,"public static void loadSharedAssets(){
  if (sharedCaveBase == null) {
    SKTextureAtlas atlas=SKTextureAtlas.create(""String_Node_Str"");
    SKEmitterNode fire=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    fire.setZPosition(1);
    SKEmitterNode smoke=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    SKNode torch=new SKNode();
    torch.addChild(fire);
    torch.addChild(smoke);
    sharedCaveBase=SKSpriteNode.create(atlas.getTexture(""String_Node_Str""));
    torch.setPosition(new CGPoint(83,83));
    sharedCaveBase.addChild(torch);
    SKNode torchB=(SKNode)torch.copy();
    torchB.setPosition(new CGPoint(-83,83));
    sharedCaveBase.addChild(torchB);
    sharedCaveTop=SKSpriteNode.create(atlas.getTexture(""String_Node_Str""));
    sharedDeathSplort=SKSpriteNode.create(atlas.getTexture(""String_Node_Str""));
    sharedDamageEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    sharedDeathEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    sharedDamageAction=SKAction.sequence(new NSArray<SKAction>(SKAction.colorize(UIColor.red(),1.0,0.0),SKAction.wait(0.25),SKAction.colorize(0.0,0.1)));
  }
}","public static void loadSharedAssets(){
  if (sharedCaveBase == null) {
    SKTextureAtlas atlas=new SKTextureAtlas(""String_Node_Str"");
    SKEmitterNode fire=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    fire.setZPosition(1);
    SKEmitterNode smoke=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    SKNode torch=new SKNode();
    torch.addChild(fire);
    torch.addChild(smoke);
    sharedCaveBase=new SKSpriteNode(atlas.getTexture(""String_Node_Str""));
    torch.setPosition(new CGPoint(83,83));
    sharedCaveBase.addChild(torch);
    SKNode torchB=(SKNode)torch.copy();
    torchB.setPosition(new CGPoint(-83,83));
    sharedCaveBase.addChild(torchB);
    sharedCaveTop=new SKSpriteNode(atlas.getTexture(""String_Node_Str""));
    sharedDeathSplort=new SKSpriteNode(atlas.getTexture(""String_Node_Str""));
    sharedDamageEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    sharedDeathEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    sharedDamageAction=SKAction.sequence(new NSArray<SKAction>(SKAction.colorize(UIColor.red(),1.0,0.0),SKAction.wait(0.25),SKAction.colorize(0.0,0.1)));
  }
}"
10399,"private void fireAnimation(final APAAnimationState animationState,NSArray<SKTexture> frames,String key){
  SKAction animAction=getAction(key);
  if (animAction != null | frames.size() < 1) {
    return;
  }
  activeAnimationKey=key;
  runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.animate(frames,animationSpeed,true,false),SKAction.run(new Runnable(){
    @Override public void run(){
      animationHasCompleted(animationState);
    }
  }
))),key);
}","private void fireAnimation(final APAAnimationState animationState,NSArray<SKTexture> frames,String key){
  SKAction animAction=getAction(key);
  if (animAction != null | frames.size() < 1) {
    return;
  }
  activeAnimationKey=key;
  runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.animateFrames(frames,animationSpeed,true,false),SKAction.run(new Runnable(){
    @Override public void run(){
      animationHasCompleted(animationState);
    }
  }
))),key);
}"
10400,"private void init(CGPoint position){
  SKTextureAtlas atlas=SKTextureAtlas.create(""String_Node_Str"");
  shadowBlob=SKSpriteNode.create(atlas.getTexture(""String_Node_Str""));
  shadowBlob.setZPosition(-1.0);
  setPosition(position);
  health=100.0;
  movementSpeed=MOVEMENT_SPEED;
  animated=true;
  animationSpeed=1 / 28.0;
  configurePhysicsBody();
}","private void init(CGPoint position){
  SKTextureAtlas atlas=new SKTextureAtlas(""String_Node_Str"");
  shadowBlob=new SKSpriteNode(atlas.getTexture(""String_Node_Str""));
  shadowBlob.setZPosition(-1.0);
  setPosition(position);
  health=100.0;
  movementSpeed=MOVEMENT_SPEED;
  animated=true;
  animationSpeed=1 / 28.0;
  configurePhysicsBody();
}"
10401,"public static void loadSharedAssets(){
  if (sharedDamageEmitter == null) {
    SKTextureAtlas atlas=SKTextureAtlas.create(""String_Node_Str"");
    sharedIdleAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEFAULT_NUMBER_OF_IDLE_FRAMES);
    sharedWalkAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEFAULT_NUMBER_OF_WALK_FRAMES);
    sharedAttackAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",ATTACK_FRAMES);
    sharedGetHitAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",GET_HIT_FRAMES);
    sharedDeathAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEATH_FRAMES);
    sharedDamageEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    sharedDeathSplort=SKSpriteNode.create(atlas.getTexture(""String_Node_Str""));
    sharedDamageAction=SKAction.sequence(new NSArray<SKAction>(SKAction.colorize(UIColor.white(),1.0,0.0),SKAction.wait(0.75),SKAction.colorize(0.0,0.1)));
  }
}","public static void loadSharedAssets(){
  if (sharedDamageEmitter == null) {
    SKTextureAtlas atlas=new SKTextureAtlas(""String_Node_Str"");
    sharedIdleAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEFAULT_NUMBER_OF_IDLE_FRAMES);
    sharedWalkAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEFAULT_NUMBER_OF_WALK_FRAMES);
    sharedAttackAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",ATTACK_FRAMES);
    sharedGetHitAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",GET_HIT_FRAMES);
    sharedDeathAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEATH_FRAMES);
    sharedDamageEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    sharedDeathSplort=new SKSpriteNode(atlas.getTexture(""String_Node_Str""));
    sharedDamageAction=SKAction.sequence(new NSArray<SKAction>(SKAction.colorize(UIColor.white(),1.0,0.0),SKAction.wait(0.75),SKAction.colorize(0.0,0.1)));
  }
}"
10402,"public APAGoblin(CGPoint position){
  super(SKTextureAtlas.create(""String_Node_Str"").getTexture(""String_Node_Str""),position);
  movementSpeed=MOVEMENT_SPEED * Math.random();
  setScale(MINIMUM_SIZE + (Math.random() * SIZE_VARIANCE));
  setZPosition(-0.25);
  setName(""String_Node_Str"");
  intelligence=new APAChaseAI(this,null);
}","public APAGoblin(CGPoint position){
  super(new SKTextureAtlas(""String_Node_Str"").getTexture(""String_Node_Str""),position);
  movementSpeed=MOVEMENT_SPEED * Math.random();
  setScale(MINIMUM_SIZE + (Math.random() * SIZE_VARIANCE));
  setZPosition(-0.25);
  setName(""String_Node_Str"");
  intelligence=new APAChaseAI(this,null);
}"
10403,"public static void loadSharedAssets(){
  if (sharedProjectile == null) {
    SKTextureAtlas atlas=SKTextureAtlas.create(""String_Node_Str"");
    sharedProjectile=SKSpriteNode.create(atlas.getTexture(""String_Node_Str""));
    sharedProjectile.setPhysicsBody(SKPhysicsBody.createCircle(PROJECTILE_COLLISION_RADIUS));
    sharedProjectile.setName(""String_Node_Str"");
    sharedProjectile.getPhysicsBody().setCategoryBitMask(APAColliderType.Projectile);
    sharedProjectile.getPhysicsBody().setCollisionBitMask(APAColliderType.Wall);
    sharedProjectile.getPhysicsBody().setContactTestBitMask(sharedProjectile.getPhysicsBody().getCollisionBitMask());
    sharedProjectileEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    sharedIdleAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",IDLE_FRAMES);
    sharedWalkAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEFAULT_NUMBER_OF_WALK_FRAMES);
    sharedAttackAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",THROW_FRAMES);
    sharedGetHitAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",GET_HIT_FRAMES);
    sharedDeathAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEATH_FRAMES);
    sharedDamageAction=SKAction.sequence(new NSArray<SKAction>(SKAction.colorize(UIColor.red(),10,0),SKAction.wait(0.5),SKAction.colorize(0.0,0.25)));
  }
}","public static void loadSharedAssets(){
  if (sharedProjectile == null) {
    SKTextureAtlas atlas=new SKTextureAtlas(""String_Node_Str"");
    sharedProjectile=new SKSpriteNode(atlas.getTexture(""String_Node_Str""));
    sharedProjectile.setPhysicsBody(SKPhysicsBody.createCircle(PROJECTILE_COLLISION_RADIUS));
    sharedProjectile.setName(""String_Node_Str"");
    sharedProjectile.getPhysicsBody().setCategoryBitMask(APAColliderType.Projectile);
    sharedProjectile.getPhysicsBody().setCollisionBitMask(APAColliderType.Wall);
    sharedProjectile.getPhysicsBody().setContactTestBitMask(sharedProjectile.getPhysicsBody().getCollisionBitMask());
    sharedProjectileEmitter=APAUtils.getEmitterNodeByName(""String_Node_Str"");
    sharedIdleAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",IDLE_FRAMES);
    sharedWalkAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEFAULT_NUMBER_OF_WALK_FRAMES);
    sharedAttackAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",THROW_FRAMES);
    sharedGetHitAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",GET_HIT_FRAMES);
    sharedDeathAnimationFrames=APAUtils.loadFramesFromAtlas(""String_Node_Str"",""String_Node_Str"",DEATH_FRAMES);
    sharedDamageAction=SKAction.sequence(new NSArray<SKAction>(SKAction.colorize(UIColor.red(),10,0),SKAction.wait(0.5),SKAction.colorize(0.0,0.25)));
  }
}"
10404,"public APAWarrior(CGPoint position,APAPlayer player){
  super(SKTextureAtlas.create(""String_Node_Str"").getTexture(""String_Node_Str""),position,player);
}","public APAWarrior(CGPoint position,APAPlayer player){
  super(new SKTextureAtlas(""String_Node_Str"").getTexture(""String_Node_Str""),position,player);
}"
10405,"public static NSArray<SKTexture> loadFramesFromAtlas(String atlasName,String baseFileName,int numberOfFrames){
  NSArray<SKTexture> frames=new NSMutableArray<>(numberOfFrames);
  SKTextureAtlas atlas=SKTextureAtlas.create(atlasName);
  for (int i=1; i <= numberOfFrames; i++) {
    String fileName=String.format(""String_Node_Str"",baseFileName,i);
    SKTexture texture=atlas.getTexture(fileName);
    frames.add(texture);
  }
  return frames;
}","public static NSArray<SKTexture> loadFramesFromAtlas(String atlasName,String baseFileName,int numberOfFrames){
  NSArray<SKTexture> frames=new NSMutableArray<>(numberOfFrames);
  SKTextureAtlas atlas=new SKTextureAtlas(atlasName);
  for (int i=1; i <= numberOfFrames; i++) {
    String fileName=String.format(""String_Node_Str"",baseFileName,i);
    SKTexture texture=atlas.getTexture(fileName);
    frames.add(texture);
  }
  return frames;
}"
10406,"private static CGImage getCGImage(String name){
  int ix=name.lastIndexOf('/');
  if (ix != -1)   name=name.substring(ix);
  UIImage uiImage=UIImage.create(name);
  return uiImage.getCGImage();
}","private static CGImage getCGImage(String name){
  int ix=name.lastIndexOf('/');
  if (ix != -1)   name=name.substring(ix);
  UIImage uiImage=UIImage.getImage(name);
  return uiImage.getCGImage();
}"
10407,"/** 
 * Helper function that parses a Settings page file, extracts each preference defined within along with its default value. If the page contains a 'Child Pane Element', this method will recurs on the referenced page file.
 * @param plistName
 * @param settingsBundleURL
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private NSDictionary<?,?> loadDefaults(String plistName,NSURL settingsBundleURL){
  NSDictionary<NSString,NSObject> settingsDict=(NSDictionary<NSString,NSObject>)NSDictionary.read(settingsBundleURL.newURLByAppendingPathComponent(plistName));
  NSArray<NSDictionary<NSString,NSObject>> prefSpecifierArray=(NSArray<NSDictionary<NSString,NSObject>>)settingsDict.get(new NSString(""String_Node_Str""));
  if (prefSpecifierArray == null)   return null;
  NSMutableDictionary<NSString,NSObject> keyValuePairs=new NSMutableDictionary<>();
  for (  NSDictionary<NSString,NSObject> prefItem : prefSpecifierArray) {
    NSString prefItemType=(NSString)prefItem.get(new NSString(""String_Node_Str""));
    NSString prefItemKey=(NSString)prefItem.get(new NSString(""String_Node_Str""));
    NSObject prefItemDefaultValue=prefItem.get(new NSString(""String_Node_Str""));
    if (prefItemType.equals(new NSString(""String_Node_Str""))) {
      NSString prefItemFile=(NSString)prefItem.get(new NSString(""String_Node_Str""));
      NSDictionary<NSString,NSObject> childPageKeyValuePairs=(NSDictionary<NSString,NSObject>)loadDefaults(prefItemFile.toString(),settingsBundleURL);
      keyValuePairs.putAll(childPageKeyValuePairs);
    }
 else     if (prefItemKey != null && prefItemDefaultValue != null) {
      keyValuePairs.put(prefItemKey,prefItemDefaultValue);
    }
  }
  return keyValuePairs;
}","/** 
 * Helper function that parses a Settings page file, extracts each preference defined within along with its default value. If the page contains a 'Child Pane Element', this method will recurs on the referenced page file.
 * @param plistName
 * @param settingsBundleURL
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private NSDictionary<NSString,?> loadDefaults(String plistName,NSURL settingsBundleURL){
  NSDictionary<NSString,NSObject> settingsDict=(NSDictionary<NSString,NSObject>)NSDictionary.read(settingsBundleURL.newURLByAppendingPathComponent(plistName));
  NSArray<NSDictionary<NSString,NSObject>> prefSpecifierArray=(NSArray<NSDictionary<NSString,NSObject>>)settingsDict.get(new NSString(""String_Node_Str""));
  if (prefSpecifierArray == null)   return null;
  NSMutableDictionary<NSString,NSObject> keyValuePairs=new NSMutableDictionary<>();
  for (  NSDictionary<NSString,NSObject> prefItem : prefSpecifierArray) {
    NSString prefItemType=(NSString)prefItem.get(new NSString(""String_Node_Str""));
    NSString prefItemKey=(NSString)prefItem.get(new NSString(""String_Node_Str""));
    NSObject prefItemDefaultValue=prefItem.get(new NSString(""String_Node_Str""));
    if (prefItemType.equals(new NSString(""String_Node_Str""))) {
      NSString prefItemFile=(NSString)prefItem.get(new NSString(""String_Node_Str""));
      NSDictionary<NSString,NSObject> childPageKeyValuePairs=(NSDictionary<NSString,NSObject>)loadDefaults(prefItemFile.toString(),settingsBundleURL);
      keyValuePairs.putAll(childPageKeyValuePairs);
    }
 else     if (prefItemKey != null && prefItemDefaultValue != null) {
      keyValuePairs.put(prefItemKey,prefItemDefaultValue);
    }
  }
  return keyValuePairs;
}"
10408,"/** 
 * Locates the file representing the root page of the settings for this app, invokes loadDefaults:fromSettingsPage:inSettingsBundleAtURL: on it, and registers the loaded values as the app's defaults.
 */
private void populateRegistrationDomain(){
  NSURL settingsBundleURL=NSBundle.getMainBundle().findResourceURL(""String_Node_Str"",""String_Node_Str"");
  NSDictionary<?,?> appDefaults=loadDefaults(""String_Node_Str"",settingsBundleURL);
  NSUserDefaults.getStandardUserDefaults().registerDefaults(appDefaults);
  NSUserDefaults.getStandardUserDefaults().synchronize();
}","/** 
 * Locates the file representing the root page of the settings for this app, invokes loadDefaults:fromSettingsPage:inSettingsBundleAtURL: on it, and registers the loaded values as the app's defaults.
 */
private void populateRegistrationDomain(){
  NSURL settingsBundleURL=NSBundle.getMainBundle().findResourceURL(""String_Node_Str"",""String_Node_Str"");
  NSDictionary<NSString,?> appDefaults=loadDefaults(""String_Node_Str"",settingsBundleURL);
  NSUserDefaults.getStandardUserDefaults().registerDefaults(appDefaults);
  NSUserDefaults.getStandardUserDefaults().synchronize();
}"
10409,"@Override public void draw(CGRect rect){
  CGContext context=UIGraphics.getCurrentContext();
  context.saveGState();
  UIBezierPath bezierPath=UIBezierPath.createFromRoundedRect(rect,5);
  bezierPath.setLineWidth(5);
  UIColor.black().setStroke();
  UIColor fillColor=UIColor.fromRGBA(0.529,0.808,0.922,1);
  fillColor.setFill();
  bezierPath.stroke();
  bezierPath.fill();
  context.restoreGState();
}","@Override public void draw(CGRect rect){
  CGContext context=UIGraphics.getCurrentContext();
  context.saveGState();
  UIBezierPath bezierPath=UIBezierPath.newRoundedRect(rect,5);
  bezierPath.setLineWidth(5);
  UIColor.black().setStroke();
  UIColor fillColor=UIColor.fromRGBA(0.529,0.808,0.922,1);
  fillColor.setFill();
  bezierPath.stroke();
  bezierPath.fill();
  context.restoreGState();
}"
10410,"@Override public UICollectionViewCell getCellForItem(UICollectionView collectionView,NSIndexPath indexPath){
  Cell cell=(Cell)collectionView.dequeueReusableCell(CELL_ID,indexPath);
  cell.getLabel().setText(String.format(""String_Node_Str"",indexPath.getRow(),indexPath.getSection()));
  cell.getImage().setImage(UIImage.create(String.valueOf(indexPath.getRow()) + ""String_Node_Str""));
  return cell;
}","@Override public UICollectionViewCell getCellForItem(UICollectionView collectionView,NSIndexPath indexPath){
  Cell cell=(Cell)collectionView.dequeueReusableCell(CELL_ID,indexPath);
  cell.getLabel().setText(String.format(""String_Node_Str"",indexPath.getRow(),indexPath.getSection()));
  cell.getImage().setImage(UIImage.getImage(String.valueOf(indexPath.getRow()) + ""String_Node_Str""));
  return cell;
}"
10411,"@Override public void didSelectItem(UICollectionView collectionView,NSIndexPath indexPath){
  UIImage image=UIImage.create(String.format(""String_Node_Str"",indexPath.getRow()));
  detailViewController.setImage(image);
  getNavigationController().pushViewController(detailViewController,true);
}","@Override public void didSelectItem(UICollectionView collectionView,NSIndexPath indexPath){
  UIImage image=UIImage.getImage(String.format(""String_Node_Str"",indexPath.getRow()));
  detailViewController.setImage(image);
  getNavigationController().pushViewController(detailViewController,true);
}"
10412,"/** 
 * This method is invoked when the user hits ""Done"" in the setup view controller. The options chosen by the user are passed in as a map. The keys for this map are declared in SetupViewController.
 */
@Override public void didFinishSetup(SetupViewController viewController,Map<String,Double> setupInfo){
  startButton.setAlpha(0);
  descriptionLabel.setAlpha(0);
  tableView.setAlpha(1);
  locationManager=new CLLocationManager();
  locationManager.setDelegate(new CLLocationManagerDelegateAdapter(){
    /** 
 * We want to get and store a location measurement that meets the desired accuracy. For this example, we are going to use horizontal accuracy as the deciding factor. In other cases, you may wish to use vertical accuracy, or both together.
 */
    @Override public void didUpdateToLocation(    CLLocationManager manager,    CLLocation newLocation,    CLLocation oldLocation){
      locationMeasurements.add(newLocation);
      double locationAge=-newLocation.getTimestamp().getTimeIntervalSinceNow();
      if (locationAge > 5)       return;
      if (newLocation.getHorizontalAccuracy() < 0)       return;
      if (bestEffortAtLocation == null || bestEffortAtLocation.getHorizontalAccuracy() > newLocation.getHorizontalAccuracy()) {
        bestEffortAtLocation=newLocation;
        if (newLocation.getHorizontalAccuracy() <= locationManager.getDesiredAccuracy()) {
          stopUpdatingLocation(Str.getLocalizedString(""String_Node_Str""));
          noTimeout=true;
        }
      }
      tableView.reloadData();
    }
    @Override public void didFail(    CLLocationManager manager,    NSError error){
      if (error.getErrorCode() != CLErrorCode.LocationUnknown) {
        stopUpdatingLocation(Str.getLocalizedString(""String_Node_Str""));
      }
    }
  }
);
  locationManager.setDesiredAccuracy(setupInfo.get(SetupViewController.SETUP_INFO_KEY_ACCURACY));
  if (Foundation.getMajorSystemVersion() >= 8) {
    locationManager.requestWhenInUseAuthorization();
  }
  locationManager.startUpdatingLocation();
  noTimeout=false;
  DispatchQueue.getMainQueue().after(Math.round(setupInfo.get(SetupViewController.SETUP_INFO_KEY_TIMEOUT)),TimeUnit.SECONDS,new Runnable(){
    @Override public void run(){
      if (!noTimeout) {
        stopUpdatingLocation(""String_Node_Str"");
      }
    }
  }
);
  stateString=Str.getLocalizedString(""String_Node_Str"");
  tableView.reloadData();
}","/** 
 * This method is invoked when the user hits ""Done"" in the setup view controller. The options chosen by the user are passed in as a map. The keys for this map are declared in SetupViewController.
 */
@Override public void didFinishSetup(SetupViewController viewController,Map<String,Double> setupInfo){
  startButton.setAlpha(0);
  descriptionLabel.setAlpha(0);
  tableView.setAlpha(1);
  locationManager=new CLLocationManager();
  locationManager.setDelegate(new CLLocationManagerDelegateAdapter(){
    /** 
 * We want to get and store a location measurement that meets the desired accuracy. For this example, we are going to use horizontal accuracy as the deciding factor. In other cases, you may wish to use vertical accuracy, or both together.
 */
    @Override public void didUpdateLocations(    CLLocationManager manager,    NSArray<CLLocation> locations){
      CLLocation newLocation=locations.last();
      locationMeasurements.add(newLocation);
      double locationAge=-newLocation.getTimestamp().getTimeIntervalSinceNow();
      if (locationAge > 5)       return;
      if (newLocation.getHorizontalAccuracy() < 0)       return;
      if (bestEffortAtLocation == null || bestEffortAtLocation.getHorizontalAccuracy() > newLocation.getHorizontalAccuracy()) {
        bestEffortAtLocation=newLocation;
        if (newLocation.getHorizontalAccuracy() <= locationManager.getDesiredAccuracy()) {
          stopUpdatingLocation(Str.getLocalizedString(""String_Node_Str""));
          noTimeout=true;
        }
      }
      tableView.reloadData();
    }
    @Override public void didFail(    CLLocationManager manager,    NSError error){
      if (error.getErrorCode() != CLErrorCode.LocationUnknown) {
        stopUpdatingLocation(Str.getLocalizedString(""String_Node_Str""));
      }
    }
  }
);
  locationManager.setDesiredAccuracy(setupInfo.get(SetupViewController.SETUP_INFO_KEY_ACCURACY));
  if (Foundation.getMajorSystemVersion() >= 8) {
    locationManager.requestWhenInUseAuthorization();
  }
  locationManager.startUpdatingLocation();
  noTimeout=false;
  DispatchQueue.getMainQueue().after(Math.round(setupInfo.get(SetupViewController.SETUP_INFO_KEY_TIMEOUT)),TimeUnit.SECONDS,new Runnable(){
    @Override public void run(){
      if (!noTimeout) {
        stopUpdatingLocation(""String_Node_Str"");
      }
    }
  }
);
  stateString=Str.getLocalizedString(""String_Node_Str"");
  tableView.reloadData();
}"
10413,"/** 
 * This method is invoked when the user hits ""Done"" in the setup view controller. The options chosen by the user are passed in as a map. The keys for this map are declared in SetupViewController.
 */
@Override public void didFinishSetup(SetupViewController viewController,Map<String,Double> setupInfo){
  startButton.setAlpha(0);
  descriptionLabel.setAlpha(0);
  tableView.setAlpha(1);
  locationManager=new CLLocationManager();
  locationManager.setDelegate(new CLLocationManagerDelegateAdapter(){
    /** 
 * We want to get and store a location measurement that meets the desired accuracy. For this example, we are going to use horizontal accuracy as the deciding factor. In other cases, you may wish to use vertical accuracy, or both together.
 */
    @Override public void didUpdateToLocation(    CLLocationManager manager,    CLLocation newLocation,    CLLocation oldLocation){
      if (newLocation.getHorizontalAccuracy() < 0)       return;
      double locationAge=-newLocation.getTimestamp().getTimeIntervalSinceNow();
      if (locationAge > 5.0)       return;
      locationMeasurements.add(newLocation);
      tableView.reloadData();
    }
    @Override public void didFail(    CLLocationManager manager,    NSError error){
      if (error.getErrorCode() != CLErrorCode.LocationUnknown) {
        stopUpdatingLocation(Str.getLocalizedString(""String_Node_Str""));
      }
    }
  }
);
  locationManager.setDesiredAccuracy(setupInfo.get(SetupViewController.SETUP_INFO_KEY_ACCURACY));
  locationManager.setDistanceFilter(setupInfo.get(SetupViewController.SETUP_INFO_KEY_DISTANCE_FILTER));
  if (Foundation.getMajorSystemVersion() >= 8) {
    locationManager.requestWhenInUseAuthorization();
  }
  locationManager.startUpdatingLocation();
  stateString=Str.getLocalizedString(""String_Node_Str"");
  tableView.reloadData();
  UIBarButtonItem resetItem=new UIBarButtonItem(Str.getLocalizedString(""String_Node_Str""),UIBarButtonItemStyle.Plain,new UIBarButtonItem.OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      reset();
    }
  }
);
  getNavigationItem().setLeftBarButtonItem(resetItem,true);
}","/** 
 * This method is invoked when the user hits ""Done"" in the setup view controller. The options chosen by the user are passed in as a map. The keys for this map are declared in SetupViewController.
 */
@Override public void didFinishSetup(SetupViewController viewController,Map<String,Double> setupInfo){
  startButton.setAlpha(0);
  descriptionLabel.setAlpha(0);
  tableView.setAlpha(1);
  locationManager=new CLLocationManager();
  locationManager.setDelegate(new CLLocationManagerDelegateAdapter(){
    /** 
 * We want to get and store a location measurement that meets the desired accuracy. For this example, we are going to use horizontal accuracy as the deciding factor. In other cases, you may wish to use vertical accuracy, or both together.
 */
    @Override public void didUpdateLocations(    CLLocationManager manager,    NSArray<CLLocation> locations){
      CLLocation newLocation=locations.last();
      if (newLocation.getHorizontalAccuracy() < 0)       return;
      double locationAge=-newLocation.getTimestamp().getTimeIntervalSinceNow();
      if (locationAge > 5.0)       return;
      locationMeasurements.add(newLocation);
      tableView.reloadData();
    }
    @Override public void didFail(    CLLocationManager manager,    NSError error){
      if (error.getErrorCode() != CLErrorCode.LocationUnknown) {
        stopUpdatingLocation(Str.getLocalizedString(""String_Node_Str""));
      }
    }
  }
);
  locationManager.setDesiredAccuracy(setupInfo.get(SetupViewController.SETUP_INFO_KEY_ACCURACY));
  locationManager.setDistanceFilter(setupInfo.get(SetupViewController.SETUP_INFO_KEY_DISTANCE_FILTER));
  if (Foundation.getMajorSystemVersion() >= 8) {
    locationManager.requestWhenInUseAuthorization();
  }
  locationManager.startUpdatingLocation();
  stateString=Str.getLocalizedString(""String_Node_Str"");
  tableView.reloadData();
  UIBarButtonItem resetItem=new UIBarButtonItem(Str.getLocalizedString(""String_Node_Str""),UIBarButtonItemStyle.Plain,new UIBarButtonItem.OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      reset();
    }
  }
);
  getNavigationItem().setLeftBarButtonItem(resetItem,true);
}"
10414,"private void addRegion(){
  if (CLLocationManager.isRegionMonitoringAvailable()) {
    CLLocationCoordinate2D coord=new CLLocationCoordinate2D(regionsMapView.getCenterCoordinate().getLatitude(),regionsMapView.getCenterCoordinate().getLongitude());
    CLRegion newRegion=new CLRegion(coord,1000,String.format(""String_Node_Str"",regionsMapView.getCenterCoordinate().getLatitude(),regionsMapView.getCenterCoordinate().getLongitude()));
    RegionAnnotation regionAnnotation=new RegionAnnotation(newRegion);
    regionAnnotation.setCoordinate(newRegion.getCenter());
    regionAnnotation.setRadius(newRegion.getRadius());
    regionsMapView.addAnnotation(regionAnnotation);
    locationManager.startMonitoring(newRegion,CLLocationAccuracy.Best);
    newRegion.release();
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}","private void addRegion(){
  if (CLLocationManager.isRegionMonitoringAvailable()) {
    CLLocationCoordinate2D coord=new CLLocationCoordinate2D(regionsMapView.getCenterCoordinate().getLatitude(),regionsMapView.getCenterCoordinate().getLongitude());
    CLRegion newRegion=new CLRegion(coord,1000,String.format(""String_Node_Str"",regionsMapView.getCenterCoordinate().getLatitude(),regionsMapView.getCenterCoordinate().getLongitude()));
    RegionAnnotation regionAnnotation=new RegionAnnotation(newRegion);
    regionAnnotation.setCoordinate(newRegion.getCenter());
    regionAnnotation.setRadius(newRegion.getRadius());
    regionsMapView.addAnnotation(regionAnnotation);
    locationManager.startMonitoring(newRegion);
    newRegion.release();
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}"
10415,"@Override public void viewDidLoad(){
  super.viewDidLoad();
  locationManager=new CLLocationManager();
  if (Foundation.getMajorSystemVersion() >= 8) {
    locationManager.requestAlwaysAuthorization();
  }
  locationManager.setDelegate(new CLLocationManagerDelegateAdapter(){
    @Override public void didFail(    CLLocationManager manager,    NSError error){
      System.err.println(""String_Node_Str"" + error);
    }
    @Override public void didUpdateToLocation(    CLLocationManager manager,    CLLocation newLocation,    CLLocation oldLocation){
      System.err.println(String.format(""String_Node_Str"",newLocation,oldLocation));
      if (oldLocation == null) {
        MKCoordinateRegion userLocation=new MKCoordinateRegion(newLocation.getCoordinate(),1500,1500);
        regionsMapView.setRegion(userLocation,true);
      }
    }
    @Override public void didEnterRegion(    CLLocationManager manager,    CLRegion region){
      String event=String.format(""String_Node_Str"",region.getIdentifier(),NSDate.now());
      update(event);
    }
    @Override public void didExitRegion(    CLLocationManager manager,    CLRegion region){
      String event=String.format(""String_Node_Str"",region.getIdentifier(),NSDate.now());
      update(event);
    }
    @Override public void monitoringDidFail(    CLLocationManager manager,    CLRegion region,    NSError error){
      String event=String.format(""String_Node_Str"",region.getIdentifier(),error);
      update(event);
    }
  }
);
  locationManager.setDistanceFilter(CLLocationAccuracy.HundredMeters);
  locationManager.setDesiredAccuracy(CLLocationAccuracy.Best);
  locationManager.startUpdatingLocation();
}","@Override public void viewDidLoad(){
  super.viewDidLoad();
  locationManager=new CLLocationManager();
  if (Foundation.getMajorSystemVersion() >= 8) {
    locationManager.requestAlwaysAuthorization();
  }
  locationManager.setDelegate(new CLLocationManagerDelegateAdapter(){
    private CLLocation oldLocation;
    @Override public void didFail(    CLLocationManager manager,    NSError error){
      System.err.println(""String_Node_Str"" + error);
    }
    @Override public void didUpdateLocations(    CLLocationManager manager,    NSArray<CLLocation> locations){
      CLLocation newLocation=locations.last();
      System.err.println(String.format(""String_Node_Str"",newLocation,oldLocation));
      if (oldLocation == null) {
        MKCoordinateRegion userLocation=new MKCoordinateRegion(newLocation.getCoordinate(),1500,1500);
        regionsMapView.setRegion(userLocation,true);
      }
    }
    @Override public void didEnterRegion(    CLLocationManager manager,    CLRegion region){
      String event=String.format(""String_Node_Str"",region.getIdentifier(),NSDate.now());
      update(event);
    }
    @Override public void didExitRegion(    CLLocationManager manager,    CLRegion region){
      String event=String.format(""String_Node_Str"",region.getIdentifier(),NSDate.now());
      update(event);
    }
    @Override public void monitoringDidFail(    CLLocationManager manager,    CLRegion region,    NSError error){
      String event=String.format(""String_Node_Str"",region.getIdentifier(),error);
      update(event);
    }
  }
);
  locationManager.setDistanceFilter(CLLocationAccuracy.HundredMeters);
  locationManager.setDesiredAccuracy(CLLocationAccuracy.Best);
  locationManager.startUpdatingLocation();
}"
10416,"@Override public void didChangeDragState(MKMapView mapView,MKAnnotationView view,MKAnnotationViewDragState newState,MKAnnotationViewDragState oldState){
  if (view instanceof RegionAnnotationView) {
    RegionAnnotationView regionView=(RegionAnnotationView)view;
    RegionAnnotation regionAnnotation=(RegionAnnotation)regionView.getAnnotation();
    if (newState == MKAnnotationViewDragState.Starting) {
      regionView.removeRadiusOverlay();
      locationManager.stopMonitoring(regionAnnotation.getRegion());
    }
    if (oldState == MKAnnotationViewDragState.Dragging && newState == MKAnnotationViewDragState.Ending) {
      regionView.updateRadiusOverlay();
      CLRegion newRegion=new CLRegion(regionAnnotation.getCoordinate(),1000,String.format(""String_Node_Str"",regionAnnotation.getCoordinate().getLatitude(),regionAnnotation.getCoordinate().getLongitude()));
      regionAnnotation.setRegion(newRegion);
      newRegion.release();
      locationManager.startMonitoring(regionAnnotation.getRegion(),CLLocationAccuracy.Best);
    }
  }
}","@Override public void didChangeDragState(MKMapView mapView,MKAnnotationView view,MKAnnotationViewDragState newState,MKAnnotationViewDragState oldState){
  if (view instanceof RegionAnnotationView) {
    RegionAnnotationView regionView=(RegionAnnotationView)view;
    RegionAnnotation regionAnnotation=(RegionAnnotation)regionView.getAnnotation();
    if (newState == MKAnnotationViewDragState.Starting) {
      regionView.removeRadiusOverlay();
      locationManager.stopMonitoring(regionAnnotation.getRegion());
    }
    if (oldState == MKAnnotationViewDragState.Dragging && newState == MKAnnotationViewDragState.Ending) {
      regionView.updateRadiusOverlay();
      CLRegion newRegion=new CLRegion(regionAnnotation.getCoordinate(),1000,String.format(""String_Node_Str"",regionAnnotation.getCoordinate().getLatitude(),regionAnnotation.getCoordinate().getLongitude()));
      regionAnnotation.setRegion(newRegion);
      newRegion.release();
      locationManager.startMonitoring(regionAnnotation.getRegion());
    }
  }
}"
10417,"public RegionsViewController(){
  UISegmentedControl switchButton=new UISegmentedControl(new CGRect(96,7,128,30));
  switchButton.insertSegment(""String_Node_Str"",0,false);
  switchButton.insertSegment(""String_Node_Str"",1,false);
  switchButton.setSelectedSegment(0);
  switchButton.addOnValueChangedListener(new UIControl.OnValueChangedListener(){
    @Override public void onValueChanged(    UIControl control){
      switchViews();
    }
  }
);
  getNavigationItem().setTitleView(switchButton);
  UIBarButtonItem addButton=new UIBarButtonItem(UIBarButtonSystemItem.Add,new UIBarButtonItem.OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      addRegion();
    }
  }
);
  getNavigationItem().setRightBarButtonItem(addButton);
  UIView view=getView();
  updatesTableView=new UITableView(UIScreen.getMainScreen().getBounds());
  updatesTableView.setAutoresizingMask(UIViewAutoresizing.with(UIViewAutoresizing.FlexibleWidth,UIViewAutoresizing.FlexibleHeight));
  updatesTableView.setHidden(true);
  updatesTableView.setDataSource(new UITableViewDataSourceAdapter(){
    @Override public long getNumberOfSections(    UITableView tableView){
      return 1;
    }
    @Override public long getNumberOfRowsInSection(    UITableView tableView,    long section){
      return updateEvents.size();
    }
    @Override public UITableViewCell getCellForRow(    UITableView tableView,    NSIndexPath indexPath){
      final String cellIdentifier=""String_Node_Str"";
      UITableViewCell cell=tableView.dequeueReusableCell(cellIdentifier);
      if (cell == null) {
        cell=new UITableViewCell(UITableViewCellStyle.Default,cellIdentifier);
      }
      cell.getTextLabel().setFont(UIFont.getSystemFont(12));
      cell.getTextLabel().setText(updateEvents.get(indexPath.getRow()));
      cell.getTextLabel().setNumberOfLines(4);
      return cell;
    }
  }
);
  updatesTableView.setDelegate(new UITableViewDelegateAdapter(){
    @Override public double getHeightForRow(    UITableView tableView,    NSIndexPath indexPath){
      return 60;
    }
  }
);
  view.addSubview(updatesTableView);
  regionsMapView=new MKMapView(UIScreen.getMainScreen().getBounds());
  regionsMapView.setAutoresizingMask(UIViewAutoresizing.with(UIViewAutoresizing.FlexibleWidth,UIViewAutoresizing.FlexibleHeight));
  regionsMapView.setShowsUserLocation(true);
  regionsMapView.setDelegate(new MKMapViewDelegateAdapter(){
    @Override public MKAnnotationView getAnnotationView(    MKMapView mapView,    MKAnnotation annotation){
      if (annotation instanceof RegionAnnotation) {
        RegionAnnotation currentAnnotation=(RegionAnnotation)annotation;
        String annotationIdentifier=currentAnnotation.getTitle();
        RegionAnnotationView regionView=(RegionAnnotationView)regionsMapView.dequeueReusableAnnotationView(annotationIdentifier);
        if (regionView == null) {
          if (currentAnnotation.getCoordinate() != null) {
            regionView=new RegionAnnotationView(currentAnnotation);
            regionView.setMap(regionsMapView);
            UIButton removeRegionButton=new UIButton(UIButtonType.Custom);
            removeRegionButton.setFrame(new CGRect(0,0,25,25));
            removeRegionButton.setImage(UIImage.getImage(""String_Node_Str""),UIControlState.Normal);
            regionView.setLeftCalloutAccessoryView(removeRegionButton);
            regionView.updateRadiusOverlay();
          }
        }
 else {
          regionView.setAnnotation(annotation);
          regionView.updateRadiusOverlay();
        }
        return regionView;
      }
      return null;
    }
    @Override public MKOverlayView getOverlayView(    MKMapView mapView,    MKOverlay overlay){
      if (overlay instanceof MKCircle) {
        MKCircleView circleView=new MKCircleView((MKCircle)overlay);
        circleView.setStrokeColor(UIColor.purple());
        circleView.setFillColor(UIColor.purple().addAlpha(0.4));
        return circleView;
      }
      return null;
    }
    @Override public void didChangeDragState(    MKMapView mapView,    MKAnnotationView view,    MKAnnotationViewDragState newState,    MKAnnotationViewDragState oldState){
      if (view instanceof RegionAnnotationView) {
        RegionAnnotationView regionView=(RegionAnnotationView)view;
        RegionAnnotation regionAnnotation=(RegionAnnotation)regionView.getAnnotation();
        if (newState == MKAnnotationViewDragState.Starting) {
          regionView.removeRadiusOverlay();
          locationManager.stopMonitoring(regionAnnotation.getRegion());
        }
        if (oldState == MKAnnotationViewDragState.Dragging && newState == MKAnnotationViewDragState.Ending) {
          regionView.updateRadiusOverlay();
          CLRegion newRegion=new CLRegion(regionAnnotation.getCoordinate(),1000,String.format(""String_Node_Str"",regionAnnotation.getCoordinate().getLatitude(),regionAnnotation.getCoordinate().getLongitude()));
          regionAnnotation.setRegion(newRegion);
          newRegion.release();
          locationManager.startMonitoring(regionAnnotation.getRegion(),CLLocationAccuracy.Best);
        }
      }
    }
    @Override public void calloutAccessoryControlTapped(    MKMapView mapView,    final MKAnnotationView view,    UIControl control){
      NSOperationQueue.getMainQueue().addOperation(new Runnable(){
        @Override public void run(){
          RegionAnnotationView regionView=(RegionAnnotationView)view;
          RegionAnnotation regionAnnotation=(RegionAnnotation)regionView.getAnnotation();
          locationManager.stopMonitoring(regionAnnotation.getRegion());
          regionView.removeRadiusOverlay();
          regionsMapView.removeAnnotation(regionAnnotation);
        }
      }
);
    }
  }
);
  view.addSubview(regionsMapView);
}","public RegionsViewController(){
  UISegmentedControl switchButton=new UISegmentedControl(new CGRect(96,7,128,30));
  switchButton.insertSegment(""String_Node_Str"",0,false);
  switchButton.insertSegment(""String_Node_Str"",1,false);
  switchButton.setSelectedSegment(0);
  switchButton.addOnValueChangedListener(new UIControl.OnValueChangedListener(){
    @Override public void onValueChanged(    UIControl control){
      switchViews();
    }
  }
);
  getNavigationItem().setTitleView(switchButton);
  UIBarButtonItem addButton=new UIBarButtonItem(UIBarButtonSystemItem.Add,new UIBarButtonItem.OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      addRegion();
    }
  }
);
  getNavigationItem().setRightBarButtonItem(addButton);
  UIView view=getView();
  updatesTableView=new UITableView(UIScreen.getMainScreen().getBounds());
  updatesTableView.setAutoresizingMask(UIViewAutoresizing.with(UIViewAutoresizing.FlexibleWidth,UIViewAutoresizing.FlexibleHeight));
  updatesTableView.setHidden(true);
  updatesTableView.setDataSource(new UITableViewDataSourceAdapter(){
    @Override public long getNumberOfSections(    UITableView tableView){
      return 1;
    }
    @Override public long getNumberOfRowsInSection(    UITableView tableView,    long section){
      return updateEvents.size();
    }
    @Override public UITableViewCell getCellForRow(    UITableView tableView,    NSIndexPath indexPath){
      final String cellIdentifier=""String_Node_Str"";
      UITableViewCell cell=tableView.dequeueReusableCell(cellIdentifier);
      if (cell == null) {
        cell=new UITableViewCell(UITableViewCellStyle.Default,cellIdentifier);
      }
      cell.getTextLabel().setFont(UIFont.getSystemFont(12));
      cell.getTextLabel().setText(updateEvents.get(indexPath.getRow()));
      cell.getTextLabel().setNumberOfLines(4);
      return cell;
    }
  }
);
  updatesTableView.setDelegate(new UITableViewDelegateAdapter(){
    @Override public double getHeightForRow(    UITableView tableView,    NSIndexPath indexPath){
      return 60;
    }
  }
);
  view.addSubview(updatesTableView);
  regionsMapView=new MKMapView(UIScreen.getMainScreen().getBounds());
  regionsMapView.setAutoresizingMask(UIViewAutoresizing.with(UIViewAutoresizing.FlexibleWidth,UIViewAutoresizing.FlexibleHeight));
  regionsMapView.setShowsUserLocation(true);
  regionsMapView.setDelegate(new MKMapViewDelegateAdapter(){
    @Override public MKAnnotationView getAnnotationView(    MKMapView mapView,    MKAnnotation annotation){
      if (annotation instanceof RegionAnnotation) {
        RegionAnnotation currentAnnotation=(RegionAnnotation)annotation;
        String annotationIdentifier=currentAnnotation.getTitle();
        RegionAnnotationView regionView=(RegionAnnotationView)regionsMapView.dequeueReusableAnnotationView(annotationIdentifier);
        if (regionView == null) {
          if (currentAnnotation.getCoordinate() != null) {
            regionView=new RegionAnnotationView(currentAnnotation);
            regionView.setMap(regionsMapView);
            UIButton removeRegionButton=new UIButton(UIButtonType.Custom);
            removeRegionButton.setFrame(new CGRect(0,0,25,25));
            removeRegionButton.setImage(UIImage.getImage(""String_Node_Str""),UIControlState.Normal);
            regionView.setLeftCalloutAccessoryView(removeRegionButton);
            regionView.updateRadiusOverlay();
          }
        }
 else {
          regionView.setAnnotation(annotation);
          regionView.updateRadiusOverlay();
        }
        return regionView;
      }
      return null;
    }
    @Override public MKOverlayView getOverlayView(    MKMapView mapView,    MKOverlay overlay){
      if (overlay instanceof MKCircle) {
        MKCircleView circleView=new MKCircleView((MKCircle)overlay);
        circleView.setStrokeColor(UIColor.purple());
        circleView.setFillColor(UIColor.purple().addAlpha(0.4));
        return circleView;
      }
      return null;
    }
    @Override public void didChangeDragState(    MKMapView mapView,    MKAnnotationView view,    MKAnnotationViewDragState newState,    MKAnnotationViewDragState oldState){
      if (view instanceof RegionAnnotationView) {
        RegionAnnotationView regionView=(RegionAnnotationView)view;
        RegionAnnotation regionAnnotation=(RegionAnnotation)regionView.getAnnotation();
        if (newState == MKAnnotationViewDragState.Starting) {
          regionView.removeRadiusOverlay();
          locationManager.stopMonitoring(regionAnnotation.getRegion());
        }
        if (oldState == MKAnnotationViewDragState.Dragging && newState == MKAnnotationViewDragState.Ending) {
          regionView.updateRadiusOverlay();
          CLRegion newRegion=new CLRegion(regionAnnotation.getCoordinate(),1000,String.format(""String_Node_Str"",regionAnnotation.getCoordinate().getLatitude(),regionAnnotation.getCoordinate().getLongitude()));
          regionAnnotation.setRegion(newRegion);
          newRegion.release();
          locationManager.startMonitoring(regionAnnotation.getRegion());
        }
      }
    }
    @Override public void calloutAccessoryControlTapped(    MKMapView mapView,    final MKAnnotationView view,    UIControl control){
      NSOperationQueue.getMainQueue().addOperation(new Runnable(){
        @Override public void run(){
          RegionAnnotationView regionView=(RegionAnnotationView)view;
          RegionAnnotation regionAnnotation=(RegionAnnotation)regionView.getAnnotation();
          locationManager.stopMonitoring(regionAnnotation.getRegion());
          regionView.removeRadiusOverlay();
          regionsMapView.removeAnnotation(regionAnnotation);
        }
      }
);
    }
  }
);
  view.addSubview(regionsMapView);
}"
10418,"private void applyFilter(final String filterName){
  PHContentEditingInputRequestOptions options=new PHContentEditingInputRequestOptions();
  options.setCanHandleAdjustmentData(new Block1<PHAdjustmentData,Boolean>(){
    @Override public Boolean invoke(    PHAdjustmentData adjustmentData){
      return adjustmentData.getFormatIdentifier().equals(AdjustmentFormatIdentifier) && adjustmentData.getFormatVersion().equals(""String_Node_Str"");
    }
  }
);
  asset.requestContentEditingInput(options,new VoidBlock2<PHContentEditingInput,NSDictionary<NSString,NSObject>>(){
    @Override public void invoke(    PHContentEditingInput contentEditingInput,    NSDictionary<NSString,NSObject> info){
      NSURL url=contentEditingInput.getFullSizeImageURL();
      CGImagePropertyOrientation orientation=contentEditingInput.getFullSizeImageOrientation();
      CIImage inputImage=new CIImage(url,null);
      inputImage=inputImage.newImageByApplyingOrientation(orientation);
      CIFilterInputParameters inputParameters=new CIFilterInputParameters().setInputImage(inputImage);
      CIFilter filter=CIFilter.create(filterName,inputParameters);
      filter.setDefaults();
      CIImage outputImage=filter.getOutputImage();
      NSData jpegData=getJPEGRepresentationWithCompressionQuality(outputImage,0.9);
      PHAdjustmentData adjustmentData=null;
      adjustmentData=new PHAdjustmentData(AdjustmentFormatIdentifier,""String_Node_Str"",NSString.toData(filterName,NSStringEncoding.UTF8));
      final PHContentEditingOutput contentEditingOutput=new PHContentEditingOutput(contentEditingInput);
      jpegData.write(contentEditingOutput.getRenderedContentURL(),true);
      contentEditingOutput.setAdjustmentData(adjustmentData);
      PHPhotoLibrary.getSharedPhotoLibrary().performChanges(new Runnable(){
        @Override public void run(){
          PHAssetChangeRequest request=new PHAssetChangeRequest(asset);
          request.setContentEditingOutput(contentEditingOutput);
        }
      }
,new VoidBlock2<Boolean,NSError>(){
        @Override public void invoke(        Boolean success,        NSError error){
          if (!success) {
            System.err.println(""String_Node_Str"" + error);
          }
        }
      }
);
    }
  }
);
}","private void applyFilter(final String filterName){
  PHContentEditingInputRequestOptions options=new PHContentEditingInputRequestOptions();
  options.setCanHandleAdjustmentData(new Block1<PHAdjustmentData,Boolean>(){
    @Override public Boolean invoke(    PHAdjustmentData adjustmentData){
      return adjustmentData.getFormatIdentifier().equals(AdjustmentFormatIdentifier) && adjustmentData.getFormatVersion().equals(""String_Node_Str"");
    }
  }
);
  asset.requestContentEditingInput(options,new VoidBlock2<PHContentEditingInput,NSDictionary<NSString,NSObject>>(){
    @Override public void invoke(    PHContentEditingInput contentEditingInput,    NSDictionary<NSString,NSObject> info){
      NSURL url=contentEditingInput.getFullSizeImageURL();
      CGImagePropertyOrientation orientation=contentEditingInput.getFullSizeImageOrientation();
      CIImage inputImage=new CIImage(url,null);
      inputImage=inputImage.newImageByApplyingOrientation(orientation);
      CIFilterInputParameters inputParameters=new CIFilterInputParameters().setInputImage(inputImage);
      CIFilter filter=new CIFilter(filterName,inputParameters);
      filter.setDefaults();
      CIImage outputImage=filter.getOutputImage();
      NSData jpegData=getJPEGRepresentationWithCompressionQuality(outputImage,0.9);
      PHAdjustmentData adjustmentData=null;
      adjustmentData=new PHAdjustmentData(AdjustmentFormatIdentifier,""String_Node_Str"",NSString.toData(filterName,NSStringEncoding.UTF8));
      final PHContentEditingOutput contentEditingOutput=new PHContentEditingOutput(contentEditingInput);
      jpegData.write(contentEditingOutput.getRenderedContentURL(),true);
      contentEditingOutput.setAdjustmentData(adjustmentData);
      PHPhotoLibrary.getSharedPhotoLibrary().performChanges(new Runnable(){
        @Override public void run(){
          PHAssetChangeRequest request=new PHAssetChangeRequest(asset);
          request.setContentEditingOutput(contentEditingOutput);
        }
      }
,new VoidBlock2<Boolean,NSError>(){
        @Override public void invoke(        Boolean success,        NSError error){
          if (!success) {
            System.err.println(""String_Node_Str"" + error);
          }
        }
      }
);
    }
  }
);
}"
10419,"@Override public void didFinish(MFMessageComposeViewController controller,MessageComposeResult result){
  dismissViewController(true,null);
}","@Override public void didFinish(MFMessageComposeViewController controller,MFMessageComposeResult result){
  dismissViewController(true,null);
}"
10420,"private void updateImage(){
  lastImageViewSize=imageView.getBounds().getSize();
  double scale=UIScreen.getMainScreen().getScale();
  CGSize targetSize=new CGSize(imageView.getBounds().getWidth() * scale,imageView.getBounds().getHeight() * scale);
  PHImageRequestOptions options=new PHImageRequestOptions();
  options.setNetworkAccessAllowed(true);
  options.setProgressHandler(new VoidBlock4<Double,NSError,BooleanPtr,NSDictionary<NSString,NSObject>>(){
    @Override public void invoke(    final Double progress,    NSError error,    BooleanPtr c,    NSDictionary<NSString,NSObject> d){
      DispatchQueue.getMainQueue().async(new Runnable(){
        @Override public void run(){
          progressView.setProgress(progress.floatValue());
          progressView.setHidden(progress <= 0 || progress >= 1);
        }
      }
);
    }
  }
);
  PHImageManager.getDefaultManager().requestImageForAsset(asset,targetSize,PHImageContentMode.AspectFill,options,new VoidBlock2<UIImage,NSDictionary<NSString,NSObject>>(){
    @Override public void invoke(    final UIImage result,    NSDictionary<NSString,NSObject> info){
      if (result != null) {
        imageView.setImage(result);
      }
    }
  }
);
}","private void updateImage(){
  lastImageViewSize=imageView.getBounds().getSize();
  double scale=UIScreen.getMainScreen().getScale();
  CGSize targetSize=new CGSize(imageView.getBounds().getWidth() * scale,imageView.getBounds().getHeight() * scale);
  PHImageRequestOptions options=new PHImageRequestOptions();
  options.setNetworkAccessAllowed(true);
  options.setProgressHandler(new VoidBlock4<Double,NSError,BooleanPtr,NSDictionary<?,?>>(){
    @Override public void invoke(    final Double progress,    NSError error,    BooleanPtr c,    NSDictionary<?,?> d){
      DispatchQueue.getMainQueue().async(new Runnable(){
        @Override public void run(){
          progressView.setProgress(progress.floatValue());
          progressView.setHidden(progress <= 0 || progress >= 1);
        }
      }
);
    }
  }
);
  PHImageManager.getDefaultManager().requestImageForAsset(asset,targetSize,PHImageContentMode.AspectFill,options,new VoidBlock2<UIImage,NSDictionary<NSString,NSObject>>(){
    @Override public void invoke(    final UIImage result,    NSDictionary<NSString,NSObject> info){
      if (result != null) {
        imageView.setImage(result);
      }
    }
  }
);
}"
10421,"@Override public void performDeath(){
  super.performDeath();
  SKNode splort=(SKNode)sharedDeathSplort.copy();
  splort.setZPosition(-1.0);
  splort.setZPosition(-1.0);
  splort.setZRotation(virtualZRotation);
  splort.setPosition(getPosition());
  splort.setAlpha(0.1);
  splort.runAction(SKAction.fadeAlphaTo(1.0,0.5));
  APAMultiplayerLayeredCharacterScene scene=getCharacterScene();
  scene.addNode(splort,APAWorldLayer.BelowCharacter);
  runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.fadeAlphaTo(0.0,0.5),SKAction.removeFromParent())));
  smokeEmitter.runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.wait(2.0),SKAction.runBlock(new Runnable(){
    @Override public void run(){
      smokeEmitter.setParticleBirthRate(2.0);
    }
  }
),SKAction.wait(2.0),SKAction.runBlock(new Runnable(){
    @Override public void run(){
      smokeEmitter.setParticleBirthRate(0.0);
    }
  }
),SKAction.wait(10.0),SKAction.fadeAlphaTo(0.0,0.5),SKAction.removeFromParent())));
  inactiveGoblins.clear();
}","@Override public void performDeath(){
  super.performDeath();
  SKNode splort=(SKNode)sharedDeathSplort.copy();
  splort.setZPosition(-1.0);
  splort.setZPosition(-1.0);
  splort.setZRotation(virtualZRotation);
  splort.setPosition(getPosition());
  splort.setAlpha(0.1);
  splort.runAction(SKAction.fadeAlphaTo(1.0,0.5));
  APAMultiplayerLayeredCharacterScene scene=getCharacterScene();
  scene.addNode(splort,APAWorldLayer.BelowCharacter);
  runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.fadeAlphaTo(0.0,0.5),SKAction.removeFromParent())));
  smokeEmitter.runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.wait(2.0),SKAction.run(new Runnable(){
    @Override public void run(){
      smokeEmitter.setParticleBirthRate(2.0);
    }
  }
),SKAction.wait(2.0),SKAction.run(new Runnable(){
    @Override public void run(){
      smokeEmitter.setParticleBirthRate(0.0);
    }
  }
),SKAction.wait(10.0),SKAction.fadeAlphaTo(0.0,0.5),SKAction.removeFromParent())));
  inactiveGoblins.clear();
}"
10422,"private void fireAnimation(final APAAnimationState animationState,NSArray<SKTexture> frames,String key){
  SKAction animAction=getAction(key);
  if (animAction != null | frames.size() < 1) {
    return;
  }
  activeAnimationKey=key;
  runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.animate(frames,animationSpeed,true,false),SKAction.runBlock(new Runnable(){
    @Override public void run(){
      animationHasCompleted(animationState);
    }
  }
))),key);
}","private void fireAnimation(final APAAnimationState animationState,NSArray<SKTexture> frames,String key){
  SKAction animAction=getAction(key);
  if (animAction != null | frames.size() < 1) {
    return;
  }
  activeAnimationKey=key;
  runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.animate(frames,animationSpeed,true,false),SKAction.run(new Runnable(){
    @Override public void run(){
      animationHasCompleted(animationState);
    }
  }
))),key);
}"
10423,"@Override void animationDidComplete(APAAnimationState animationState){
  super.animationDidComplete(animationState);
switch (animationState) {
case Death:
    removeAllActions();
  runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.wait(0.75),SKAction.fadeOut(1.0),SKAction.runBlock(new Runnable(){
    @Override public void run(){
      removeFromParent();
      cave.recycle(APAGoblin.this);
    }
  }
))));
break;
default :
break;
}
}","@Override void animationDidComplete(APAAnimationState animationState){
  super.animationDidComplete(animationState);
switch (animationState) {
case Death:
    removeAllActions();
  runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.wait(0.75),SKAction.fadeOut(1.0),SKAction.run(new Runnable(){
    @Override public void run(){
      removeFromParent();
      cave.recycle(APAGoblin.this);
    }
  }
))));
break;
default :
break;
}
}"
10424,"@Override void animationDidComplete(APAAnimationState animationState){
switch (animationState) {
case Death:
    final APAMultiplayerLayeredCharacterScene scene=getCharacterScene();
  SKEmitterNode emitter=(SKEmitterNode)sharedDeathEmitter.copy();
emitter.setZPosition(-0.8);
addChild(emitter);
APAUtils.runOneShotEmitter(emitter,4.5);
runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.wait(4.0),SKAction.runBlock(new Runnable(){
@Override public void run(){
scene.heroWasKilled(APAHeroCharacter.this);
}
}
),SKAction.removeFromParent())));
break;
case Attack:
fireProjectile();
break;
default :
break;
}
}","@Override void animationDidComplete(APAAnimationState animationState){
switch (animationState) {
case Death:
    final APAMultiplayerLayeredCharacterScene scene=getCharacterScene();
  SKEmitterNode emitter=(SKEmitterNode)sharedDeathEmitter.copy();
emitter.setZPosition(-0.8);
addChild(emitter);
APAUtils.runOneShotEmitter(emitter,4.5);
runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.wait(4.0),SKAction.run(new Runnable(){
@Override public void run(){
scene.heroWasKilled(APAHeroCharacter.this);
}
}
),SKAction.removeFromParent())));
break;
case Attack:
fireProjectile();
break;
default :
break;
}
}"
10425,"public static void runOneShotEmitter(final SKEmitterNode emitter,double duration){
  emitter.runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.wait(duration),SKAction.runBlock(new Runnable(){
    @Override public void run(){
      emitter.setParticleBirthRate(0);
    }
  }
),SKAction.wait(emitter.getParticleLifetime() + emitter.getParticleLifetimeRange()),SKAction.removeFromParent())));
}","public static void runOneShotEmitter(final SKEmitterNode emitter,double duration){
  emitter.runAction(SKAction.sequence(new NSArray<SKAction>(SKAction.wait(duration),SKAction.run(new Runnable(){
    @Override public void run(){
      emitter.setParticleBirthRate(0);
    }
  }
),SKAction.wait(emitter.getParticleLifetime() + emitter.getParticleLifetimeRange()),SKAction.removeFromParent())));
}"
10426,"/** 
 * Handler for the NSUserDefaultsDidChangeNotification. Loads the preferences from the defaults database into the holding properies, then asks the tableView to reload itself.
 */
private void onDefaultsChanged(){
  NSUserDefaults standardDefaults=NSUserDefaults.getStandardUserDefaults();
  firstName=standardDefaults.getString(FIRST_NAME_KEY);
  lastName=standardDefaults.getString(LAST_NAME_KEY);
  int textColor=(int)standardDefaults.getInteger(NAME_COLOR_KEY);
switch (textColor) {
case 1:
    nameColor=UIColor.blue();
  break;
case 2:
nameColor=UIColor.red();
break;
case 3:
nameColor=UIColor.green();
break;
default :
throw new RuntimeException(""String_Node_Str"" + textColor + ""String_Node_Str""+ NAME_COLOR_KEY);
}
getTableView().reloadData();
}","/** 
 * Handler for the NSUserDefaultsDidChangeNotification. Loads the preferences from the defaults database into the holding properies, then asks the tableView to reload itself.
 */
private void onDefaultsChanged(){
  NSUserDefaults standardDefaults=NSUserDefaults.getStandardUserDefaults();
  firstName=standardDefaults.getString(FIRST_NAME_KEY);
  lastName=standardDefaults.getString(LAST_NAME_KEY);
  int textColor=standardDefaults.getInt(NAME_COLOR_KEY);
switch (textColor) {
case 1:
    nameColor=UIColor.blue();
  break;
case 2:
nameColor=UIColor.red();
break;
case 3:
nameColor=UIColor.green();
break;
default :
throw new RuntimeException(""String_Node_Str"" + textColor + ""String_Node_Str""+ NAME_COLOR_KEY);
}
getTableView().reloadData();
}"
10427,"public static boolean useMovieBackground(){
  registerDefaults();
  return NSUserDefaults.getStandardUserDefaults().getInteger(MOVIE_BACKGROUND_IMAGE_KEY) != 0;
}","public static boolean useMovieBackground(){
  registerDefaults();
  return NSUserDefaults.getStandardUserDefaults().getInt(MOVIE_BACKGROUND_IMAGE_KEY) != 0;
}"
10428,"/** 
 * The color of the background area behind the movie can be any UIColor value. 
 */
public static UIColor getBackgroundColor(){
  registerDefaults();
  UIColor[] colors=new UIColor[]{UIColor.black(),UIColor.darkGray(),UIColor.lightGray(),UIColor.white(),UIColor.gray(),UIColor.red(),UIColor.green(),UIColor.blue(),UIColor.cyan(),UIColor.yellow(),UIColor.magenta(),UIColor.orange(),UIColor.purple(),UIColor.brown(),UIColor.clear()};
  return colors[(int)NSUserDefaults.getStandardUserDefaults().getInteger(BACKGROUND_COLOR_KEY)];
}","/** 
 * The color of the background area behind the movie can be any UIColor value.
 */
public static UIColor getBackgroundColor(){
  registerDefaults();
  UIColor[] colors=new UIColor[]{UIColor.black(),UIColor.darkGray(),UIColor.lightGray(),UIColor.white(),UIColor.gray(),UIColor.red(),UIColor.green(),UIColor.blue(),UIColor.cyan(),UIColor.yellow(),UIColor.magenta(),UIColor.orange(),UIColor.purple(),UIColor.brown(),UIColor.clear()};
  return colors[NSUserDefaults.getStandardUserDefaults().getInt(BACKGROUND_COLOR_KEY)];
}"
10429,"/** 
 * Movie control style can be one of: MPMovieControlStyleNone, MPMovieControlStyleEmbedded, MPMovieControlStyleFullscreen. Movie control style describes the style of the playback controls. It can be one of: MPMovieControlStyleNone, MPMovieControlStyleEmbedded, MPMovieControlStyleFullscreen, MPMovieControlStyleDefault, MPMovieControlStyleFullscreen 
 */
public static MPMovieControlStyle getControlStyle(){
  registerDefaults();
  return MPMovieControlStyle.valueOf(NSUserDefaults.getStandardUserDefaults().getInteger(CONTROL_STYLE_KEY));
}","/** 
 * Movie control style can be one of: MPMovieControlStyleNone, MPMovieControlStyleEmbedded, MPMovieControlStyleFullscreen. Movie control style describes the style of the playback controls. It can be one of: MPMovieControlStyleNone, MPMovieControlStyleEmbedded, MPMovieControlStyleFullscreen, MPMovieControlStyleDefault, MPMovieControlStyleFullscreen
 */
public static MPMovieControlStyle getControlStyle(){
  registerDefaults();
  return MPMovieControlStyle.valueOf(NSUserDefaults.getStandardUserDefaults().getInt(CONTROL_STYLE_KEY));
}"
10430,"/** 
 * Movie scaling mode can be one of: MPMovieScalingModeNone, MPMovieScalingModeAspectFit, MPMovieScalingModeAspectFill, MPMovieScalingModeFill. Movie scaling mode describes how the movie content is scaled to fit the frame of its view. It may be one of: MPMovieScalingModeNone, MPMovieScalingModeAspectFit, MPMovieScalingModeAspectFill, MPMovieScalingModeFill. 
 */
public static MPMovieScalingMode getScalingMode(){
  registerDefaults();
  return MPMovieScalingMode.valueOf(NSUserDefaults.getStandardUserDefaults().getInteger(SCALING_MODE_KEY));
}","/** 
 * Movie scaling mode can be one of: MPMovieScalingModeNone, MPMovieScalingModeAspectFit, MPMovieScalingModeAspectFill, MPMovieScalingModeFill. Movie scaling mode describes how the movie content is scaled to fit the frame of its view. It may be one of: MPMovieScalingModeNone, MPMovieScalingModeAspectFit, MPMovieScalingModeAspectFill, MPMovieScalingModeFill.
 */
public static MPMovieScalingMode getScalingMode(){
  registerDefaults();
  return MPMovieScalingMode.valueOf(NSUserDefaults.getStandardUserDefaults().getInt(SCALING_MODE_KEY));
}"
10431,"/** 
 * Movie repeat mode describes how the movie player repeats content at the end of playback. Movie repeat mode can be one of: MPMovieRepeatModeNone, MPMovieRepeatModeOne. 
 */
public static MPMovieRepeatMode getRepeatMode(){
  registerDefaults();
  return MPMovieRepeatMode.valueOf(NSUserDefaults.getStandardUserDefaults().getInteger(REPEAT_MODE_KEY));
}","/** 
 * Movie repeat mode describes how the movie player repeats content at the end of playback. Movie repeat mode can be one of: MPMovieRepeatModeNone, MPMovieRepeatModeOne.
 */
public static MPMovieRepeatMode getRepeatMode(){
  registerDefaults();
  return MPMovieRepeatMode.valueOf(NSUserDefaults.getStandardUserDefaults().getInt(REPEAT_MODE_KEY));
}"
10432,"@Override public void viewDidLoad(){
  super.viewDidLoad();
  long globalLevel=NSUserDefaults.getStandardUserDefaults().getInteger(PIA_GLOBAL_LEVEL_NUMBER_KEY);
  if (globalLevel <= 0) {
    NSUserDefaults.getStandardUserDefaults().put(PIA_GLOBAL_LEVEL_NUMBER_KEY,0);
    NSUserDefaults.getStandardUserDefaults().synchronize();
  }
}","@Override public void viewDidLoad(){
  super.viewDidLoad();
  long globalLevel=NSUserDefaults.getStandardUserDefaults().getInt(PIA_GLOBAL_LEVEL_NUMBER_KEY);
  if (globalLevel <= 0) {
    NSUserDefaults.getStandardUserDefaults().put(PIA_GLOBAL_LEVEL_NUMBER_KEY,0);
    NSUserDefaults.getStandardUserDefaults().synchronize();
  }
}"
10433,"@IBAction private void sendPIALevelTracking(UIResponder sender){
  System.out.println(""String_Node_Str"");
  long highestLevel=NSUserDefaults.getStandardUserDefaults().getInteger(PIA_GLOBAL_LEVEL_NUMBER_KEY);
  CBLevelType levelType=CBLevelType.HIGHEST_LEVEL_REACHED;
  String eventLabel=""String_Node_Str"";
  String eventDescription=""String_Node_Str"";
  long subLevel=0;
  CBAnalytics.trackLevelInfo(eventLabel,levelType,highestLevel,subLevel,eventDescription);
  renderPIALevelTrackingAlert(eventLabel,levelType,highestLevel,subLevel,eventDescription);
  NSUserDefaults.getStandardUserDefaults().put(PIA_GLOBAL_LEVEL_NUMBER_KEY,highestLevel + 1);
  NSUserDefaults.getStandardUserDefaults().synchronize();
}","@IBAction private void sendPIALevelTracking(UIResponder sender){
  System.out.println(""String_Node_Str"");
  long highestLevel=NSUserDefaults.getStandardUserDefaults().getInt(PIA_GLOBAL_LEVEL_NUMBER_KEY);
  CBLevelType levelType=CBLevelType.HIGHEST_LEVEL_REACHED;
  String eventLabel=""String_Node_Str"";
  String eventDescription=""String_Node_Str"";
  long subLevel=0;
  CBAnalytics.trackLevelInfo(eventLabel,levelType,highestLevel,subLevel,eventDescription);
  renderPIALevelTrackingAlert(eventLabel,levelType,highestLevel,subLevel,eventDescription);
  NSUserDefaults.getStandardUserDefaults().put(PIA_GLOBAL_LEVEL_NUMBER_KEY,highestLevel + 1);
  NSUserDefaults.getStandardUserDefaults().synchronize();
}"
10434,"private void readDirectory(){
  documentURLs.clear();
  String documentsDirectoryPath=getApplicationDocumentsDirectory();
  NSArray<NSURL> documentsDirectoryContents=NSFileManager.getDefaultManager().getContentsOfDirectoryAtPath(documentsDirectoryPath);
  for (  NSURL url : documentsDirectoryContents) {
    String filePath=documentsDirectoryPath + ""String_Node_Str"" + url.getLastPathComponent();
    NSURL fileURL=new NSURL(new File(filePath));
    boolean isDirectory=NSFileManager.getDefaultManager().isDirectoryAtPath(filePath);
    if (!(isDirectory && url.getLastPathComponent().equals(""String_Node_Str""))) {
      documentURLs.add(fileURL);
    }
  }
  getTableView().reloadData();
}","private void readDirectory(){
  documentURLs.clear();
  String documentsDirectoryPath=getApplicationDocumentsDirectory();
  NSArray<NSURL> documentsDirectoryContents;
  try {
    documentsDirectoryContents=NSFileManager.getDefaultManager().getContentsOfDirectoryAtPath(documentsDirectoryPath);
    for (    NSURL url : documentsDirectoryContents) {
      String filePath=documentsDirectoryPath + ""String_Node_Str"" + url.getLastPathComponent();
      NSURL fileURL=new NSURL(new File(filePath));
      boolean isDirectory=NSFileManager.getDefaultManager().isDirectoryAtPath(filePath);
      if (!(isDirectory && url.getLastPathComponent().equals(""String_Node_Str""))) {
        documentURLs.add(fileURL);
      }
    }
  }
 catch (  NSErrorException e) {
    throw new Error(e);
  }
  getTableView().reloadData();
}"
10435,"/** 
 * Used to get the App Store's response to your request and notifies your observer 
 */
@Override public void didReceiveResponse(SKProductsRequest request,SKProductsResponse response){
  if (response.getProducts().size() > 0) {
    availableProducts.addAll(response.getProducts());
    status=IAPProductRequestStatus.ProductsFound;
    NSNotificationCenter.getDefaultCenter().postNotification(IAPProductRequestNotification,this);
  }
  if (response.getInvalidProductIdentifiers().size() > 0) {
    invalidProductIds.addAll(response.getInvalidProductIdentifiers());
    status=IAPProductRequestStatus.IdentifiersNotFound;
    NSNotificationCenter.getDefaultCenter().postNotification(IAPProductRequestNotification,this);
  }
}","/** 
 * Used to get the App Store's response to your request and notifies your observer
 */
@Override public void didReceiveResponse(SKProductsRequest request,SKProductsResponse response){
  if (response.getProducts().size() > 0) {
    availableProducts.addAll(response.getProducts());
    status=IAPProductRequestStatus.ProductsFound;
    NSNotificationCenter.getDefaultCenter().postNotification(IAPProductRequestNotification,this);
  }
  if (response.getInvalidProductIdentifiers().size() > 0) {
    invalidProductIds.addAll(response.getInvalidProductIdentifiers());
    status=IAPProductRequestStatus.IdentifiersNotFound;
    NSNotificationCenter.getDefaultCenter().postNotification(IAPProductRequestNotification,this);
  }
}"
10436,"/** 
 * @param identifier
 * @return the product's title matching a given product identifier 
 */
public String getTitleForId(String identifier){
  for (  SKProduct product : availableProducts) {
    if (product.getProductIdentifier().equals(identifier)) {
      return product.getLocalizedTitle();
    }
  }
  return null;
}","/** 
 * @param identifier
 * @return the product's title matching a given product identifier
 */
public String getTitleForId(String identifier){
  for (  SKProduct product : availableProducts) {
    if (product.getProductIdentifier().equals(identifier)) {
      return product.getLocalizedTitle();
    }
  }
  return null;
}"
10437,"/** 
 * Query the App Store about the given product identifiers
 * @param productIds 
 */
public void fetchProductInformationForIds(List<String> productIds){
  SKProductsRequest request=new SKProductsRequest(new HashSet<String>(productIds));
  request.setDelegate(this);
  request.start();
}","/** 
 * Query the App Store about the given product identifiers
 * @param productIds
 */
public void fetchProductInformationForIds(List<String> productIds){
  SKProductsRequest request=new SKProductsRequest(new HashSet<String>(productIds));
  request.setDelegate(this);
  request.start();
}"
10438,"private NSArray<UIGestureRecognizer> createGestureRecognizers(){
  UIGestureRecognizerDelegate gestureRecognizerDelegate=new UIGestureRecognizerDelegateAdapter(){
    /** 
 * Ensure that the pinch, pan and rotate gesture recognizers on a particular view can all recognize simultaneously. Prevent other gesture recognizers from recognizing simultaneously. 
 */
    @Override public boolean shouldRecognizeSimultaneously(    UIGestureRecognizer gestureRecognizer,    UIGestureRecognizer otherGestureRecognizer){
      if (gestureRecognizer.getView() != firstPieceView && gestureRecognizer.getView() != secondPieceView && gestureRecognizer.getView() != thirdPieceView) {
        return false;
      }
      if (gestureRecognizer.getView() != otherGestureRecognizer.getView()) {
        return false;
      }
      if (gestureRecognizer instanceof UILongPressGestureRecognizer || otherGestureRecognizer instanceof UILongPressGestureRecognizer) {
        return false;
      }
      return true;
    }
  }
;
  UIRotationGestureRecognizer rotationGestureRecognizer=new UIRotationGestureRecognizer(new UIGestureRecognizer.GestureListener(){
    @Override public void handleGesture(    UIGestureRecognizer gestureRecognizer){
      rotatePiece((UIRotationGestureRecognizer)gestureRecognizer);
    }
  }
);
  UIPinchGestureRecognizer pinchGestureRecognizer=new UIPinchGestureRecognizer(new UIGestureRecognizer.GestureListener(){
    @Override public void handleGesture(    UIGestureRecognizer gestureRecognizer){
      scalePiece((UIPinchGestureRecognizer)gestureRecognizer);
    }
  }
);
  UIPanGestureRecognizer panGestureRecognizer=new UIPanGestureRecognizer(new UIGestureRecognizer.GestureListener(){
    @Override public void handleGesture(    UIGestureRecognizer gestureRecognizer){
      panPiece((UIPanGestureRecognizer)gestureRecognizer);
    }
  }
);
  UILongPressGestureRecognizer longPressGestureRecognizer=new UILongPressGestureRecognizer(new UIGestureRecognizer.GestureListener(){
    @Override public void handleGesture(    UIGestureRecognizer gestureRecognizer){
      showResetMenu((UILongPressGestureRecognizer)gestureRecognizer);
    }
  }
);
  NSArray<UIGestureRecognizer> gestureRecognizers=new NSArray<>(rotationGestureRecognizer,pinchGestureRecognizer,panGestureRecognizer,longPressGestureRecognizer);
  for (  UIGestureRecognizer gestureRecognizer : gestureRecognizers) {
    gestureRecognizer.setDelegate(gestureRecognizerDelegate);
  }
  return gestureRecognizers;
}","private NSArray<UIGestureRecognizer> createGestureRecognizers(){
  UIGestureRecognizerDelegate gestureRecognizerDelegate=new UIGestureRecognizerDelegateAdapter(){
    /** 
 * Ensure that the pinch, pan and rotate gesture recognizers on a particular view can all recognize simultaneously. Prevent other gesture recognizers from recognizing simultaneously. 
 */
    @Override public boolean shouldRecognizeSimultaneously(    UIGestureRecognizer gestureRecognizer,    UIGestureRecognizer otherGestureRecognizer){
      if (gestureRecognizer.getView() != firstPieceView && gestureRecognizer.getView() != secondPieceView && gestureRecognizer.getView() != thirdPieceView) {
        return false;
      }
      if (gestureRecognizer.getView() != otherGestureRecognizer.getView()) {
        return false;
      }
      if (gestureRecognizer instanceof UILongPressGestureRecognizer || otherGestureRecognizer instanceof UILongPressGestureRecognizer) {
        return false;
      }
      return true;
    }
  }
;
  UIRotationGestureRecognizer rotationGestureRecognizer=new UIRotationGestureRecognizer(new UIGestureRecognizer.OnGestureListener(){
    @Override public void onGesture(    UIGestureRecognizer gestureRecognizer){
      rotatePiece((UIRotationGestureRecognizer)gestureRecognizer);
    }
  }
);
  UIPinchGestureRecognizer pinchGestureRecognizer=new UIPinchGestureRecognizer(new UIGestureRecognizer.OnGestureListener(){
    @Override public void onGesture(    UIGestureRecognizer gestureRecognizer){
      scalePiece((UIPinchGestureRecognizer)gestureRecognizer);
    }
  }
);
  UIPanGestureRecognizer panGestureRecognizer=new UIPanGestureRecognizer(new UIGestureRecognizer.OnGestureListener(){
    @Override public void onGesture(    UIGestureRecognizer gestureRecognizer){
      panPiece((UIPanGestureRecognizer)gestureRecognizer);
    }
  }
);
  UILongPressGestureRecognizer longPressGestureRecognizer=new UILongPressGestureRecognizer(new UIGestureRecognizer.OnGestureListener(){
    @Override public void onGesture(    UIGestureRecognizer gestureRecognizer){
      showResetMenu((UILongPressGestureRecognizer)gestureRecognizer);
    }
  }
);
  NSArray<UIGestureRecognizer> gestureRecognizers=new NSArray<>(rotationGestureRecognizer,pinchGestureRecognizer,panGestureRecognizer,longPressGestureRecognizer);
  for (  UIGestureRecognizer gestureRecognizer : gestureRecognizers) {
    gestureRecognizer.setDelegate(gestureRecognizerDelegate);
  }
  return gestureRecognizers;
}"
10439,"public ImageScrollView(){
  setShowsHorizontalScrollIndicator(false);
  setShowsHorizontalScrollIndicator(false);
  setBouncesZoom(true);
  setDecelerationRate(UIScrollView.DecelerationRateFast());
  setDelegate(new UIScrollViewDelegateAdapter(){
    @Override public UIView getViewForZooming(    UIScrollView scrollView){
      return zoomView;
    }
  }
);
}","public ImageScrollView(){
  setShowsHorizontalScrollIndicator(false);
  setShowsHorizontalScrollIndicator(false);
  setBouncesZoom(true);
  setDecelerationRate(UIScrollView.getFastDecelerationRate());
  setDelegate(new UIScrollViewDelegateAdapter(){
    @Override public UIView getViewForZooming(    UIScrollView scrollView){
      return zoomView;
    }
  }
);
}"
10440,"@Override public void didChange(final PHChange changeInstance){
  DispatchQueue.getMainQueue().async(new Runnable(){
    @Override public void run(){
      final PHFetchResultChangeDetails collectionChanges=changeInstance.getChangeDetailsForFetchResult(assetsFetchResults);
      if (collectionChanges != null) {
        assetsFetchResults=collectionChanges.getFetchResultAfterChanges();
        final UICollectionView collectionView=getCollectionView();
        if (!collectionChanges.hasIncrementalChanges() || collectionChanges.hasMoves()) {
          collectionView.reloadData();
        }
 else {
          collectionView.performBatchUpdates(new Runnable(){
            @Override public void run(){
              NSIndexSet removedIndexes=collectionChanges.getRemovedIndexes();
              if (removedIndexes != null && removedIndexes.getCount() > 0) {
                collectionView.deleteItems(getIndexPathsFromIndexesWithSection(removedIndexes,0));
              }
              NSIndexSet insertedIndexes=collectionChanges.getInsertedIndexes();
              if (insertedIndexes != null && insertedIndexes.getCount() > 0) {
                collectionView.insertItems(getIndexPathsFromIndexesWithSection(insertedIndexes,0));
              }
              NSIndexSet changedIndexes=collectionChanges.getChangedIndexes();
              if (changedIndexes != null && changedIndexes.getCount() > 0) {
                collectionView.reloadItems(getIndexPathsFromIndexesWithSection(changedIndexes,0));
              }
            }
          }
,null);
        }
      }
      resetCachedAssets();
    }
  }
);
}","@Override public void didChange(final PHChange changeInstance){
  DispatchQueue.getMainQueue().async(new Runnable(){
    @Override public void run(){
      final PHFetchResultChangeDetails collectionChanges=changeInstance.getChangeDetailsForFetchResult(assetsFetchResults);
      if (collectionChanges != null) {
        assetsFetchResults=collectionChanges.getFetchResultAfterChanges();
        final UICollectionView collectionView=getCollectionView();
        if (!collectionChanges.hasIncrementalChanges() || collectionChanges.hasMoves()) {
          collectionView.reloadData();
        }
 else {
          collectionView.performBatchUpdates(new Runnable(){
            @Override public void run(){
              NSIndexSet removedIndexes=collectionChanges.getRemovedIndexes();
              if (removedIndexes != null && removedIndexes.size() > 0) {
                collectionView.deleteItems(getIndexPathsFromIndexesWithSection(removedIndexes,0));
              }
              NSIndexSet insertedIndexes=collectionChanges.getInsertedIndexes();
              if (insertedIndexes != null && insertedIndexes.size() > 0) {
                collectionView.insertItems(getIndexPathsFromIndexesWithSection(insertedIndexes,0));
              }
              NSIndexSet changedIndexes=collectionChanges.getChangedIndexes();
              if (changedIndexes != null && changedIndexes.size() > 0) {
                collectionView.reloadItems(getIndexPathsFromIndexesWithSection(changedIndexes,0));
              }
            }
          }
,null);
        }
      }
      resetCachedAssets();
    }
  }
);
}"
10441,"private NSArray<NSIndexPath> getIndexPathsFromIndexesWithSection(NSIndexSet indexSet,final long section){
  final NSArray<NSIndexPath> indexPaths=new NSMutableArray<>(indexSet.getCount());
  indexSet.enumerateIndexes(new VoidBlock2<Long,BooleanPtr>(){
    @Override public void invoke(    Long idx,    BooleanPtr stop){
      indexPaths.add(NSIndexPath.createWithItem(idx,section));
    }
  }
);
  return indexPaths;
}","private NSArray<NSIndexPath> getIndexPathsFromIndexesWithSection(NSIndexSet indexSet,final long section){
  final NSArray<NSIndexPath> indexPaths=new NSMutableArray<>(indexSet.size());
  indexSet.enumerateIndexes(new VoidBlock2<Long,BooleanPtr>(){
    @Override public void invoke(    Long idx,    BooleanPtr stop){
      indexPaths.add(NSIndexPath.createWithItem(idx,section));
    }
  }
);
  return indexPaths;
}"
10442,"private void updateImage(){
  lastImageViewSize=imageView.getBounds().getSize();
  double scale=UIScreen.getMainScreen().getScale();
  CGSize targetSize=new CGSize(imageView.getBounds().getWidth() * scale,imageView.getBounds().getHeight() * scale);
  PHImageRequestOptions options=new PHImageRequestOptions();
  options.setNetworkAccessAllowed(true);
  options.setProgressHandler(new VoidBlock4<Boolean,Double,NSError,BooleanPtr>(){
    @Override public void invoke(    Boolean a,    final Double progress,    NSError c,    BooleanPtr d){
      DispatchQueue.getMainQueue().async(new Runnable(){
        @Override public void run(){
          progressView.setProgress(progress.floatValue());
          progressView.setHidden(progress <= 0 || progress >= 1);
        }
      }
);
    }
  }
);
  PHImageManager.getDefaultManager().requestImageForAsset(asset,targetSize,PHImageContentMode.AspectFill,options,new VoidBlock2<UIImage,NSDictionary<NSString,NSObject>>(){
    @Override public void invoke(    UIImage result,    NSDictionary<NSString,NSObject> info){
      if (result != null) {
        imageView.setImage(result);
      }
    }
  }
);
}","private void updateImage(){
  lastImageViewSize=imageView.getBounds().getSize();
  double scale=UIScreen.getMainScreen().getScale();
  CGSize targetSize=new CGSize(imageView.getBounds().getWidth() * scale,imageView.getBounds().getHeight() * scale);
  PHImageRequestOptions options=new PHImageRequestOptions();
  options.setNetworkAccessAllowed(true);
  options.setProgressHandler(new VoidBlock4<Double,NSError,BooleanPtr,NSDictionary<NSString,NSObject>>(){
    @Override public void invoke(    final Double progress,    NSError error,    BooleanPtr c,    NSDictionary<NSString,NSObject> d){
      DispatchQueue.getMainQueue().async(new Runnable(){
        @Override public void run(){
          progressView.setProgress(progress.floatValue());
          progressView.setHidden(progress <= 0 || progress >= 1);
        }
      }
);
    }
  }
);
  PHImageManager.getDefaultManager().requestImageForAsset(asset,targetSize,PHImageContentMode.AspectFill,options,new VoidBlock2<UIImage,NSDictionary<NSString,NSObject>>(){
    @Override public void invoke(    UIImage result,    NSDictionary<NSString,NSObject> info){
      if (result != null) {
        imageView.setImage(result);
      }
    }
  }
);
}"
10443,"private void applyFilter(final String filterName){
  PHContentEditingInputRequestOptions options=new PHContentEditingInputRequestOptions();
  options.setCanHandleAdjustmentData(new Block1<PHAdjustmentData,Boolean>(){
    @Override public Boolean invoke(    PHAdjustmentData adjustmentData){
      return adjustmentData.getFormatIdentifier().equals(AdjustmentFormatIdentifier) && adjustmentData.getFormatVersion().equals(""String_Node_Str"");
    }
  }
);
  asset.requestContentEditingInput(options,new VoidBlock2<PHContentEditingInput,NSDictionary<NSString,NSObject>>(){
    @Override public void invoke(    PHContentEditingInput contentEditingInput,    NSDictionary<NSString,NSObject> info){
      NSURL url=contentEditingInput.getFullSizeImageURL();
      int orientation=contentEditingInput.getFullSizeImageOrientation();
      CIImage inputImage=new CIImage(url,null);
      inputImage=inputImage.newImageByApplyingOrientation(CGImagePropertyOrientation.valueOf(orientation));
      CIFilterInputParameters inputParameters=new CIFilterInputParameters().setImage(inputImage);
      CIFilter filter=CIFilter.create(filterName,inputParameters);
      filter.setDefaults();
      CIImage outputImage=filter.getOutputImage();
      NSData jpegData=getJPEGRepresentationWithCompressionQuality(outputImage,0.9);
      PHAdjustmentData adjustmentData=null;
      try {
        adjustmentData=new PHAdjustmentData(AdjustmentFormatIdentifier,""String_Node_Str"",new NSData(filterName.getBytes(""String_Node_Str"")));
      }
 catch (      UnsupportedEncodingException e) {
        e.printStackTrace();
      }
      final PHContentEditingOutput contentEditingOutput=new PHContentEditingOutput(contentEditingInput);
      jpegData.write(new File(contentEditingOutput.getRenderedContentURL().getAbsoluteString()),true);
      contentEditingOutput.setAdjustmentData(adjustmentData);
      PHPhotoLibrary.getSharedPhotoLibrary().performChanges(new Runnable(){
        @Override public void run(){
          PHAssetChangeRequest request=PHAssetChangeRequest.create(asset);
          request.setContentEditingOutput(contentEditingOutput);
        }
      }
,new VoidBlock2<Boolean,NSError>(){
        @Override public void invoke(        Boolean success,        NSError error){
          if (!success) {
            System.err.println(""String_Node_Str"" + error);
          }
        }
      }
);
    }
  }
);
}","private void applyFilter(final String filterName){
  PHContentEditingInputRequestOptions options=new PHContentEditingInputRequestOptions();
  options.setCanHandleAdjustmentData(new Block1<PHAdjustmentData,Boolean>(){
    @Override public Boolean invoke(    PHAdjustmentData adjustmentData){
      return adjustmentData.getFormatIdentifier().equals(AdjustmentFormatIdentifier) && adjustmentData.getFormatVersion().equals(""String_Node_Str"");
    }
  }
);
  asset.requestContentEditingInput(options,new VoidBlock2<PHContentEditingInput,NSDictionary<NSString,NSObject>>(){
    @Override public void invoke(    PHContentEditingInput contentEditingInput,    NSDictionary<NSString,NSObject> info){
      NSURL url=contentEditingInput.getFullSizeImageURL();
      CGImagePropertyOrientation orientation=contentEditingInput.getFullSizeImageOrientation();
      CIImage inputImage=new CIImage(url,null);
      inputImage=inputImage.newImageByApplyingOrientation(orientation);
      CIFilterInputParameters inputParameters=new CIFilterInputParameters().setImage(inputImage);
      CIFilter filter=CIFilter.create(filterName,inputParameters);
      filter.setDefaults();
      CIImage outputImage=filter.getOutputImage();
      NSData jpegData=getJPEGRepresentationWithCompressionQuality(outputImage,0.9);
      PHAdjustmentData adjustmentData=null;
      try {
        adjustmentData=new PHAdjustmentData(AdjustmentFormatIdentifier,""String_Node_Str"",new NSData(filterName.getBytes(""String_Node_Str"")));
      }
 catch (      UnsupportedEncodingException e) {
        e.printStackTrace();
      }
      final PHContentEditingOutput contentEditingOutput=new PHContentEditingOutput(contentEditingInput);
      jpegData.write(new File(contentEditingOutput.getRenderedContentURL().getAbsoluteString()),true);
      contentEditingOutput.setAdjustmentData(adjustmentData);
      PHPhotoLibrary.getSharedPhotoLibrary().performChanges(new Runnable(){
        @Override public void run(){
          PHAssetChangeRequest request=PHAssetChangeRequest.create(asset);
          request.setContentEditingOutput(contentEditingOutput);
        }
      }
,new VoidBlock2<Boolean,NSError>(){
        @Override public void invoke(        Boolean success,        NSError error){
          if (!success) {
            System.err.println(""String_Node_Str"" + error);
          }
        }
      }
);
    }
  }
);
}"
10444,"@Override public void viewDidLoad(){
  super.viewDidLoad();
  locationManager=new CLLocationManager();
  if (!CLLocationManager.isHeadingAvailable()) {
    locationManager=null;
    UIAlertView noCompassAlert=new UIAlertView(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"");
    noCompassAlert.show();
  }
 else {
    locationManager.setHeadingFilter(CLLocationManager.HeadingFilterNone());
    locationManager.setDelegate(new CLLocationManagerDelegateAdapter(){
      /** 
 * This delegate method is invoked when the location manager has heading data. 
 */
      @Override public void didUpdateHeading(      CLLocationManager manager,      CLHeading newHeading){
        double x=newHeading.getX();
        double y=newHeading.getY();
        double z=newHeading.getZ();
        xLabel.setText(String.format(""String_Node_Str"",x));
        yLabel.setText(String.format(""String_Node_Str"",y));
        zLabel.setText(String.format(""String_Node_Str"",z));
        double magnitute=Math.sqrt(x * x + y * y + z * z);
        magnitudeLabel.setText(String.format(""String_Node_Str"",magnitute));
        graphView.updateHistory(x,y,z);
      }
      /** 
 * This delegate method is invoked when the location managed encounters an error condition. 
 */
      @Override public void didFail(      CLLocationManager manager,      NSError error){
        if (error.getErrorCode() == CLErrorCode.Denied) {
          manager.stopUpdatingHeading();
        }
 else         if (error.getErrorCode() == CLErrorCode.HeadingFailure) {
        }
      }
    }
);
    locationManager.startUpdatingHeading();
  }
}","@Override public void viewDidLoad(){
  super.viewDidLoad();
  locationManager=new CLLocationManager();
  if (!CLLocationManager.isHeadingAvailable()) {
    locationManager=null;
    UIAlertView noCompassAlert=new UIAlertView(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"");
    noCompassAlert.show();
  }
 else {
    locationManager.setHeadingFilter(CLLocationManager.getHeadingFilterNone());
    locationManager.setDelegate(new CLLocationManagerDelegateAdapter(){
      /** 
 * This delegate method is invoked when the location manager has heading data. 
 */
      @Override public void didUpdateHeading(      CLLocationManager manager,      CLHeading newHeading){
        double x=newHeading.getX();
        double y=newHeading.getY();
        double z=newHeading.getZ();
        xLabel.setText(String.format(""String_Node_Str"",x));
        yLabel.setText(String.format(""String_Node_Str"",y));
        zLabel.setText(String.format(""String_Node_Str"",z));
        double magnitute=Math.sqrt(x * x + y * y + z * z);
        magnitudeLabel.setText(String.format(""String_Node_Str"",magnitute));
        graphView.updateHistory(x,y,z);
      }
      /** 
 * This delegate method is invoked when the location managed encounters an error condition. 
 */
      @Override public void didFail(      CLLocationManager manager,      NSError error){
        if (error.getErrorCode() == CLErrorCode.Denied) {
          manager.stopUpdatingHeading();
        }
 else         if (error.getErrorCode() == CLErrorCode.HeadingFailure) {
        }
      }
    }
);
    locationManager.startUpdatingHeading();
  }
}"
10445,"/** 
 * Locates the file representing the root page of the settings for this app, invokes loadDefaults:fromSettingsPage:inSettingsBundleAtURL: on it, and registers the loaded values as the app's defaults. 
 */
private void populateRegistrationDomain(){
  NSURL settingsBundleURL=NSBundle.getMainBundle().findResourceURLInSubPath(""String_Node_Str"",""String_Node_Str"");
  NSDictionary<?,?> appDefaults=loadDefaults(""String_Node_Str"",settingsBundleURL);
  NSUserDefaults.getStandardUserDefaults().registerDefaults(appDefaults);
  NSUserDefaults.getStandardUserDefaults().synchronize();
}","/** 
 * Locates the file representing the root page of the settings for this app, invokes loadDefaults:fromSettingsPage:inSettingsBundleAtURL: on it, and registers the loaded values as the app's defaults. 
 */
private void populateRegistrationDomain(){
  NSURL settingsBundleURL=NSBundle.getMainBundle().findResourceURL(""String_Node_Str"",""String_Node_Str"");
  NSDictionary<?,?> appDefaults=loadDefaults(""String_Node_Str"",settingsBundleURL);
  NSUserDefaults.getStandardUserDefaults().registerDefaults(appDefaults);
  NSUserDefaults.getStandardUserDefaults().synchronize();
}"
10446,"@Override public void didUpdateUserLocation(final MKMapView mapView,final MKUserLocation userLocation){
  final MachineSizedSIntPtr centerMapFirstTime=new MachineSizedSIntPtr();
  if ((userLocation.getCoordinate().getLatitude() != 0.0) && (userLocation.getCoordinate().getLongitude() != 0.0)) {
    Dispatch.once(centerMapFirstTime,new Runnable(){
      @Override public void run(){
        mapView.setCenterCoordinate(userLocation.getCoordinate(),true);
      }
    }
);
  }
  geocoder.reverseGeocodeLocation(mapView.getUserLocation().getLocation(),new VoidBlock2<NSArray<CLPlacemark>,NSError>(){
    @Override public void invoke(    NSArray<CLPlacemark> placemarks,    NSError error){
      if (placemarks != null && placemarks.size() > 0) {
        placemark=placemarks.get(0);
        getAddressButton.setEnabled(true);
      }
 else {
      }
    }
  }
);
}","@Override public void didUpdateUserLocation(final MKMapView mapView,final MKUserLocation userLocation){
  if ((userLocation.getCoordinate().getLatitude() != 0.0) && (userLocation.getCoordinate().getLongitude() != 0.0)) {
    Dispatch.once(new Runnable(){
      @Override public void run(){
        mapView.setCenterCoordinate(userLocation.getCoordinate(),true);
      }
    }
);
  }
  geocoder.reverseGeocodeLocation(mapView.getUserLocation().getLocation(),new VoidBlock2<NSArray<CLPlacemark>,NSError>(){
    @Override public void invoke(    NSArray<CLPlacemark> placemarks,    NSError error){
      if (placemarks != null && placemarks.size() > 0) {
        placemark=placemarks.get(0);
        getAddressButton.setEnabled(true);
      }
 else {
      }
    }
  }
);
}"
10447,"public MapViewController(){
  getNavigationItem().setTitle(""String_Node_Str"");
  locationManager=new CLLocationManager();
  UIView view=getView();
  view.setBackgroundColor(UIColor.fromWhiteAlpha(0.75,1));
  mapView=new MKMapView();
  mapView.setMultipleTouchEnabled(true);
  mapView.setShowsUserLocation(true);
  mapView.setTranslatesAutoresizingMaskIntoConstraints(false);
  view.addSubview(mapView);
  UIToolbar toolbar=new UIToolbar();
  toolbar.setBarStyle(UIBarStyle.Black);
  toolbar.setTranslatesAutoresizingMaskIntoConstraints(false);
  getAddressButton=new UIBarButtonItem(""String_Node_Str"",UIBarButtonItemStyle.Plain,new UIBarButtonItem.OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      placeMarkViewController.setPlacemark(placemark);
      getNavigationController().pushViewController(placeMarkViewController,true);
    }
  }
);
  getAddressButton.setEnabled(false);
  toolbar.setItems(new NSArray<>(new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace,null),getAddressButton,new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace,null)));
  view.addSubview(toolbar);
  Map<String,NSObjectProtocol> views=new HashMap<>();
  views.put(""String_Node_Str"",getTopLayoutGuide());
  views.put(""String_Node_Str"",mapView);
  views.put(""String_Node_Str"",toolbar);
  view.addConstraints(NSLayoutConstraint.create(""String_Node_Str"",NSLayoutFormatOptions.None,null,views));
  view.addConstraints(NSLayoutConstraint.create(""String_Node_Str"",NSLayoutFormatOptions.None,null,views));
  view.addConstraints(NSLayoutConstraint.create(""String_Node_Str"",NSLayoutFormatOptions.None,null,views));
  mapView.setDelegate(new MKMapViewDelegateAdapter(){
    @Override public void didUpdateUserLocation(    final MKMapView mapView,    final MKUserLocation userLocation){
      final MachineSizedSIntPtr centerMapFirstTime=new MachineSizedSIntPtr();
      if ((userLocation.getCoordinate().getLatitude() != 0.0) && (userLocation.getCoordinate().getLongitude() != 0.0)) {
        Dispatch.once(centerMapFirstTime,new Runnable(){
          @Override public void run(){
            mapView.setCenterCoordinate(userLocation.getCoordinate(),true);
          }
        }
);
      }
      geocoder.reverseGeocodeLocation(mapView.getUserLocation().getLocation(),new VoidBlock2<NSArray<CLPlacemark>,NSError>(){
        @Override public void invoke(        NSArray<CLPlacemark> placemarks,        NSError error){
          if (placemarks != null && placemarks.size() > 0) {
            placemark=placemarks.get(0);
            getAddressButton.setEnabled(true);
          }
 else {
          }
        }
      }
);
    }
  }
);
  placeMarkViewController=new PlaceMarkViewController();
  geocoder=new CLGeocoder();
}","public MapViewController(){
  getNavigationItem().setTitle(""String_Node_Str"");
  locationManager=new CLLocationManager();
  UIView view=getView();
  view.setBackgroundColor(UIColor.fromWhiteAlpha(0.75,1));
  mapView=new MKMapView();
  mapView.setMultipleTouchEnabled(true);
  mapView.setShowsUserLocation(true);
  mapView.setTranslatesAutoresizingMaskIntoConstraints(false);
  view.addSubview(mapView);
  UIToolbar toolbar=new UIToolbar();
  toolbar.setBarStyle(UIBarStyle.Black);
  toolbar.setTranslatesAutoresizingMaskIntoConstraints(false);
  getAddressButton=new UIBarButtonItem(""String_Node_Str"",UIBarButtonItemStyle.Plain,new UIBarButtonItem.OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      placeMarkViewController.setPlacemark(placemark);
      getNavigationController().pushViewController(placeMarkViewController,true);
    }
  }
);
  getAddressButton.setEnabled(false);
  toolbar.setItems(new NSArray<>(new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace,null),getAddressButton,new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace,null)));
  view.addSubview(toolbar);
  Map<String,NSObjectProtocol> views=new HashMap<>();
  views.put(""String_Node_Str"",getTopLayoutGuide());
  views.put(""String_Node_Str"",mapView);
  views.put(""String_Node_Str"",toolbar);
  view.addConstraints(NSLayoutConstraint.create(""String_Node_Str"",NSLayoutFormatOptions.None,null,views));
  view.addConstraints(NSLayoutConstraint.create(""String_Node_Str"",NSLayoutFormatOptions.None,null,views));
  view.addConstraints(NSLayoutConstraint.create(""String_Node_Str"",NSLayoutFormatOptions.None,null,views));
  mapView.setDelegate(new MKMapViewDelegateAdapter(){
    @Override public void didUpdateUserLocation(    final MKMapView mapView,    final MKUserLocation userLocation){
      if ((userLocation.getCoordinate().getLatitude() != 0.0) && (userLocation.getCoordinate().getLongitude() != 0.0)) {
        Dispatch.once(new Runnable(){
          @Override public void run(){
            mapView.setCenterCoordinate(userLocation.getCoordinate(),true);
          }
        }
);
      }
      geocoder.reverseGeocodeLocation(mapView.getUserLocation().getLocation(),new VoidBlock2<NSArray<CLPlacemark>,NSError>(){
        @Override public void invoke(        NSArray<CLPlacemark> placemarks,        NSError error){
          if (placemarks != null && placemarks.size() > 0) {
            placemark=placemarks.get(0);
            getAddressButton.setEnabled(true);
          }
 else {
          }
        }
      }
);
    }
  }
);
  placeMarkViewController=new PlaceMarkViewController();
  geocoder=new CLGeocoder();
}"
10448,"@Override public UITableViewCell getCellForRow(UITableView tableView,NSIndexPath indexPath){
  final String cellIdentifier=""String_Node_Str"";
  UITableViewCell cell=tableView.dequeueReusableCell(cellIdentifier);
  if (cell == null) {
    cell=new UITableViewCell(UITableViewCellStyle.Subtitle,cellIdentifier);
    cell.setAccessoryType(UITableViewCellAccessoryType.DisclosureIndicator);
  }
  NSURL fileURL;
  if (indexPath.getSection() == 0) {
    fileURL=new NSURL(new File(NSBundle.getMainBundle().findResourcePath(documents[(int)indexPath.getRow()],null)));
  }
 else {
    fileURL=documentURLs.get((int)indexPath.getRow());
  }
  setupDocumentController(fileURL);
  cell.getTextLabel().setText(fileURL.getLastPathComponent());
  int iconCount=docInteractionController.getIcons().size();
  if (iconCount > 0) {
    cell.getImageView().setImage(docInteractionController.getIcons().get(iconCount - 1));
  }
  try {
    String fileURLString=docInteractionController.getURL().getPath();
    NSFileAttributes fileAttributes=NSFileManager.getDefaultManager().getAttributesOfItemAtPath(fileURLString);
    long fileSize=fileAttributes.getSize();
    String fileSizeStr=NSByteCountFormatter.format(fileSize,NSByteCountFormatterCountStyle.File);
    cell.getDetailTextLabel().setText(String.format(""String_Node_Str"",fileSizeStr,docInteractionController.getUTI()));
    UILongPressGestureRecognizer longPressGesture=new UILongPressGestureRecognizer(new UIGestureRecognizer.GestureListener(){
      @Override public void handleGesture(      UIGestureRecognizer gestureRecognizer){
        UILongPressGestureRecognizer longPressGesture=(UILongPressGestureRecognizer)gestureRecognizer;
        if (longPressGesture.getState() == UIGestureRecognizerState.Began) {
          NSIndexPath cellIndexPath=getTableView().getIndexPathForRow(longPressGesture.getLocationInView(getTableView()));
          NSURL fileURL;
          if (cellIndexPath.getSection() == 0) {
            fileURL=new NSURL(new File(NSBundle.getMainBundle().findResourcePath(documents[(int)cellIndexPath.getRow()],null)));
          }
 else {
            fileURL=documentURLs.get((int)cellIndexPath.getRow());
          }
          docInteractionController.setURL(fileURL);
          docInteractionController.presentOptionsMenu(longPressGesture.getView().getFrame(),longPressGesture.getView(),true);
        }
      }
    }
);
    cell.getImageView().addGestureRecognizer(longPressGesture);
    cell.getImageView().setUserInteractionEnabled(true);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return cell;
}","@Override public UITableViewCell getCellForRow(UITableView tableView,NSIndexPath indexPath){
  final String cellIdentifier=""String_Node_Str"";
  UITableViewCell cell=tableView.dequeueReusableCell(cellIdentifier);
  if (cell == null) {
    cell=new UITableViewCell(UITableViewCellStyle.Subtitle,cellIdentifier);
    cell.setAccessoryType(UITableViewCellAccessoryType.DisclosureIndicator);
  }
  NSURL fileURL;
  if (indexPath.getSection() == 0) {
    fileURL=new NSURL(new File(NSBundle.getMainBundle().findResourcePath(documents[(int)indexPath.getRow()],null)));
  }
 else {
    fileURL=documentURLs.get((int)indexPath.getRow());
  }
  setupDocumentController(fileURL);
  cell.getTextLabel().setText(fileURL.getLastPathComponent());
  int iconCount=docInteractionController.getIcons().size();
  if (iconCount > 0) {
    cell.getImageView().setImage(docInteractionController.getIcons().get(iconCount - 1));
  }
  try {
    String fileURLString=docInteractionController.getURL().getPath();
    NSFileAttributes fileAttributes=NSFileManager.getDefaultManager().getAttributesOfItemAtPath(fileURLString);
    long fileSize=fileAttributes.getSize();
    String fileSizeStr=NSByteCountFormatter.format(fileSize,NSByteCountFormatterCountStyle.File);
    cell.getDetailTextLabel().setText(String.format(""String_Node_Str"",fileSizeStr,docInteractionController.getUTI()));
    UILongPressGestureRecognizer longPressGesture=new UILongPressGestureRecognizer(new UIGestureRecognizer.OnGestureListener(){
      @Override public void onGesture(      UIGestureRecognizer gestureRecognizer){
        UILongPressGestureRecognizer longPressGesture=(UILongPressGestureRecognizer)gestureRecognizer;
        if (longPressGesture.getState() == UIGestureRecognizerState.Began) {
          NSIndexPath cellIndexPath=getTableView().getIndexPathForRow(longPressGesture.getLocationInView(getTableView()));
          NSURL fileURL;
          if (cellIndexPath.getSection() == 0) {
            fileURL=new NSURL(new File(NSBundle.getMainBundle().findResourcePath(documents[(int)cellIndexPath.getRow()],null)));
          }
 else {
            fileURL=documentURLs.get((int)cellIndexPath.getRow());
          }
          docInteractionController.setURL(fileURL);
          docInteractionController.presentOptionsMenu(longPressGesture.getView().getFrame(),longPressGesture.getView(),true);
        }
      }
    }
);
    cell.getImageView().addGestureRecognizer(longPressGesture);
    cell.getImageView().setUserInteractionEnabled(true);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return cell;
}"
10449,"public RootViewController(){
  UIView view=getView();
  view.setBackgroundColor(UIColor.white());
  UILabel redLabel=new UILabel(new CGRect(22,278,59,21));
  redLabel.setText(""String_Node_Str"");
  redLabel.setTextAlignment(NSTextAlignment.Right);
  redLabel.setContentMode(UIViewContentMode.Left);
  redLabel.setFont(UIFont.getSystemFont(17));
  redLabel.setTextColor(UIColor.darkText());
  view.addSubview(redLabel);
  UILabel greenLabel=new UILabel(new CGRect(22,318,59,21));
  greenLabel.setText(""String_Node_Str"");
  greenLabel.setTextAlignment(NSTextAlignment.Right);
  greenLabel.setContentMode(UIViewContentMode.Left);
  greenLabel.setFont(UIFont.getSystemFont(17));
  greenLabel.setTextColor(UIColor.darkText());
  view.addSubview(greenLabel);
  UILabel blueLabel=new UILabel(new CGRect(22,357,59,21));
  blueLabel.setText(""String_Node_Str"");
  blueLabel.setTextAlignment(NSTextAlignment.Right);
  blueLabel.setContentMode(UIViewContentMode.Left);
  blueLabel.setFont(UIFont.getSystemFont(17));
  blueLabel.setTextColor(UIColor.darkText());
  view.addSubview(blueLabel);
  UIControl.OnValueChangedListener sliderListener=new UIControl.OnValueChangedListener(){
    @Override public void onValueChanged(    UIControl control){
      sliderValueChanged();
    }
  }
;
  redSlider=new UISlider(new CGRect(87,279,200,23));
  redSlider.setMinimumValue(0);
  redSlider.setMaximumValue(1);
  redSlider.addOnValueChangedListener(sliderListener);
  view.addSubview(redSlider);
  greenSlider=new UISlider(new CGRect(87,319,200,23));
  greenSlider.setMinimumValue(0);
  greenSlider.setMaximumValue(1);
  greenSlider.addOnValueChangedListener(sliderListener);
  view.addSubview(greenSlider);
  blueSlider=new UISlider(new CGRect(87,358,200,23));
  blueSlider.setMinimumValue(0);
  greenSlider.setMaximumValue(1);
  blueSlider.addOnValueChangedListener(sliderListener);
  view.addSubview(blueSlider);
  colorView=new UIView(new CGRect(110,166,100,100));
  colorView.setBackgroundColor(UIColor.darkText());
  view.addSubview(colorView);
  urlField=new UITextView(new CGRect(101,127,199,36));
  urlField.setText(""String_Node_Str"");
  urlField.setEditable(false);
  urlField.setScrollEnabled(false);
  urlField.setShowsHorizontalScrollIndicator(false);
  urlField.setShowsVerticalScrollIndicator(false);
  urlField.setMultipleTouchEnabled(true);
  urlField.setBackgroundColor(UIColor.white());
  urlField.setFont(UIFont.getSystemFont(17));
  urlField.setAutocapitalizationType(UITextAutocapitalizationType.Sentences);
  urlField.addGestureRecognizer(new UITapGestureRecognizer(new UIGestureRecognizer.GestureListener(){
    @Override public void handleGesture(    UIGestureRecognizer gestureRecognizer){
      urlField.setSelectedRange(new NSRange(0,urlField.getText().length()));
      UIMenuController.getSharedMenuController().setTargetRect(urlField.getBounds(),urlField);
      UIMenuController.getSharedMenuController().setMenuVisible(true,true);
    }
  }
));
  view.addSubview(urlField);
  UILabel urlLabel=new UILabel(new CGRect(20,127,85,36));
  urlLabel.setText(""String_Node_Str"");
  urlLabel.setTextAlignment(NSTextAlignment.Right);
  urlLabel.setFont(UIFont.getSystemFont(17));
  urlLabel.setTextColor(UIColor.darkText());
  view.addSubview(urlLabel);
  urlFieldHeader=new UILabel(new CGRect(20,117,280,22));
  urlFieldHeader.setText(""String_Node_Str"");
  urlFieldHeader.setTextAlignment(NSTextAlignment.Center);
  urlFieldHeader.setFont(UIFont.getSystemFont(10));
  urlFieldHeader.setTextColor(UIColor.darkText());
  view.addSubview(urlFieldHeader);
  UILabel descriptionLabel=new UILabel(new CGRect(20,13,280,101));
  descriptionLabel.setText(""String_Node_Str"");
  descriptionLabel.setTextAlignment(NSTextAlignment.Center);
  descriptionLabel.setLineBreakMode(NSLineBreakMode.TruncatingTail);
  descriptionLabel.setNumberOfLines(6);
  descriptionLabel.setFont(UIFont.getSystemFont(12));
  descriptionLabel.setTextColor(UIColor.darkText());
  view.addSubview(descriptionLabel);
  UIButton startSafariButton=UIButton.create(UIButtonType.RoundedRect);
  startSafariButton.setFrame(new CGRect(20,396,280,44));
  startSafariButton.getTitleLabel().setFont(UIFont.getBoldSystemFont(15));
  startSafariButton.setTitle(""String_Node_Str"",UIControlState.Normal);
  startSafariButton.setTintColor(UIColor.fromRGBA(0.196,0.309,0.521,1));
  startSafariButton.setTitleShadowColor(UIColor.fromWhiteAlpha(0.5,1),UIControlState.Normal);
  startSafariButton.setTitleColor(UIColor.white(),UIControlState.Highlighted);
  startSafariButton.addOnTouchUpInsideListener(new UIControl.OnTouchUpInsideListener(){
    @Override public void onTouchUpInside(    UIControl control,    UIEvent event){
      UIApplication.getSharedApplication().openURL(new NSURL(""String_Node_Str""));
    }
  }
);
  view.addSubview(startSafariButton);
}","public RootViewController(){
  UIView view=getView();
  view.setBackgroundColor(UIColor.white());
  UILabel redLabel=new UILabel(new CGRect(22,278,59,21));
  redLabel.setText(""String_Node_Str"");
  redLabel.setTextAlignment(NSTextAlignment.Right);
  redLabel.setContentMode(UIViewContentMode.Left);
  redLabel.setFont(UIFont.getSystemFont(17));
  redLabel.setTextColor(UIColor.darkText());
  view.addSubview(redLabel);
  UILabel greenLabel=new UILabel(new CGRect(22,318,59,21));
  greenLabel.setText(""String_Node_Str"");
  greenLabel.setTextAlignment(NSTextAlignment.Right);
  greenLabel.setContentMode(UIViewContentMode.Left);
  greenLabel.setFont(UIFont.getSystemFont(17));
  greenLabel.setTextColor(UIColor.darkText());
  view.addSubview(greenLabel);
  UILabel blueLabel=new UILabel(new CGRect(22,357,59,21));
  blueLabel.setText(""String_Node_Str"");
  blueLabel.setTextAlignment(NSTextAlignment.Right);
  blueLabel.setContentMode(UIViewContentMode.Left);
  blueLabel.setFont(UIFont.getSystemFont(17));
  blueLabel.setTextColor(UIColor.darkText());
  view.addSubview(blueLabel);
  UIControl.OnValueChangedListener sliderListener=new UIControl.OnValueChangedListener(){
    @Override public void onValueChanged(    UIControl control){
      sliderValueChanged();
    }
  }
;
  redSlider=new UISlider(new CGRect(87,279,200,23));
  redSlider.setMinimumValue(0);
  redSlider.setMaximumValue(1);
  redSlider.addOnValueChangedListener(sliderListener);
  view.addSubview(redSlider);
  greenSlider=new UISlider(new CGRect(87,319,200,23));
  greenSlider.setMinimumValue(0);
  greenSlider.setMaximumValue(1);
  greenSlider.addOnValueChangedListener(sliderListener);
  view.addSubview(greenSlider);
  blueSlider=new UISlider(new CGRect(87,358,200,23));
  blueSlider.setMinimumValue(0);
  greenSlider.setMaximumValue(1);
  blueSlider.addOnValueChangedListener(sliderListener);
  view.addSubview(blueSlider);
  colorView=new UIView(new CGRect(110,166,100,100));
  colorView.setBackgroundColor(UIColor.darkText());
  view.addSubview(colorView);
  urlField=new UITextView(new CGRect(101,127,199,36));
  urlField.setText(""String_Node_Str"");
  urlField.setEditable(false);
  urlField.setScrollEnabled(false);
  urlField.setShowsHorizontalScrollIndicator(false);
  urlField.setShowsVerticalScrollIndicator(false);
  urlField.setMultipleTouchEnabled(true);
  urlField.setBackgroundColor(UIColor.white());
  urlField.setFont(UIFont.getSystemFont(17));
  urlField.setAutocapitalizationType(UITextAutocapitalizationType.Sentences);
  urlField.addGestureRecognizer(new UITapGestureRecognizer(new UIGestureRecognizer.OnGestureListener(){
    @Override public void onGesture(    UIGestureRecognizer gestureRecognizer){
      urlField.setSelectedRange(new NSRange(0,urlField.getText().length()));
      UIMenuController.getSharedMenuController().setTargetRect(urlField.getBounds(),urlField);
      UIMenuController.getSharedMenuController().setMenuVisible(true,true);
    }
  }
));
  view.addSubview(urlField);
  UILabel urlLabel=new UILabel(new CGRect(20,127,85,36));
  urlLabel.setText(""String_Node_Str"");
  urlLabel.setTextAlignment(NSTextAlignment.Right);
  urlLabel.setFont(UIFont.getSystemFont(17));
  urlLabel.setTextColor(UIColor.darkText());
  view.addSubview(urlLabel);
  urlFieldHeader=new UILabel(new CGRect(20,117,280,22));
  urlFieldHeader.setText(""String_Node_Str"");
  urlFieldHeader.setTextAlignment(NSTextAlignment.Center);
  urlFieldHeader.setFont(UIFont.getSystemFont(10));
  urlFieldHeader.setTextColor(UIColor.darkText());
  view.addSubview(urlFieldHeader);
  UILabel descriptionLabel=new UILabel(new CGRect(20,13,280,101));
  descriptionLabel.setText(""String_Node_Str"");
  descriptionLabel.setTextAlignment(NSTextAlignment.Center);
  descriptionLabel.setLineBreakMode(NSLineBreakMode.TruncatingTail);
  descriptionLabel.setNumberOfLines(6);
  descriptionLabel.setFont(UIFont.getSystemFont(12));
  descriptionLabel.setTextColor(UIColor.darkText());
  view.addSubview(descriptionLabel);
  UIButton startSafariButton=UIButton.create(UIButtonType.RoundedRect);
  startSafariButton.setFrame(new CGRect(20,396,280,44));
  startSafariButton.getTitleLabel().setFont(UIFont.getBoldSystemFont(15));
  startSafariButton.setTitle(""String_Node_Str"",UIControlState.Normal);
  startSafariButton.setTintColor(UIColor.fromRGBA(0.196,0.309,0.521,1));
  startSafariButton.setTitleShadowColor(UIColor.fromWhiteAlpha(0.5,1),UIControlState.Normal);
  startSafariButton.setTitleColor(UIColor.white(),UIControlState.Highlighted);
  startSafariButton.addOnTouchUpInsideListener(new UIControl.OnTouchUpInsideListener(){
    @Override public void onTouchUpInside(    UIControl control,    UIEvent event){
      UIApplication.getSharedApplication().openURL(new NSURL(""String_Node_Str""));
    }
  }
);
  view.addSubview(startSafariButton);
}"
10450,"private List<MKAnnotation> loadPhotoSet(String path){
  final List<MKAnnotation> photos=new ArrayList<>();
  NSOperationQueue queue=new NSOperationQueue();
  queue.setMaxConcurrentOperationCount(8);
  List<String> photoPaths=NSBundle.getMainBundle().findResourcesPathsInSubPath(""String_Node_Str"",path);
  for (  final String photoPath : photoPaths) {
    queue.addOperation(new Runnable(){
      @Override public void run(){
        File file=new File(photoPath);
        NSData imageData=NSData.read(file);
        CGDataProvider dataProvider=CGDataProvider.create(imageData);
        CGImageSource imageSource=CGImageSource.create(dataProvider,null);
        CGImageProperties imageProperties=imageSource.getProperties(0,null);
        CGImagePropertyGPSData gpsInfo=imageProperties.getGPSData();
        if (gpsInfo != null) {
          CLLocationCoordinate2D coord=new CLLocationCoordinate2D();
          coord.setLatitude(gpsInfo.getNumber(CGImagePropertyGPS.Latitude));
          coord.setLongitude(gpsInfo.getNumber(CGImagePropertyGPS.Longitude));
          if (gpsInfo.getString(CGImagePropertyGPS.LatitudeRef).equals(""String_Node_Str"")) {
            coord.setLatitude(coord.getLatitude() * -1);
          }
          if (gpsInfo.getString(CGImagePropertyGPS.LongitudeRef).equals(""String_Node_Str"")) {
            coord.setLongitude(coord.getLongitude() * -1);
          }
          String fileName=file.getName();
          PhotoAnnotation photo=new PhotoAnnotation(photoPath,fileName,coord);
synchronized (photos) {
            photos.add(photo);
          }
        }
      }
    }
);
  }
  queue.waitUntilAllOperationsAreFinished();
  return photos;
}","private List<MKAnnotation> loadPhotoSet(String path){
  final List<MKAnnotation> photos=new ArrayList<>();
  NSOperationQueue queue=new NSOperationQueue();
  queue.setMaxConcurrentOperationCount(8);
  List<String> photoPaths=NSBundle.getMainBundle().findResourcesPaths(""String_Node_Str"",path);
  for (  final String photoPath : photoPaths) {
    queue.addOperation(new Runnable(){
      @Override public void run(){
        File file=new File(photoPath);
        NSData imageData=NSData.read(file);
        CGDataProvider dataProvider=CGDataProvider.create(imageData);
        CGImageSource imageSource=CGImageSource.create(dataProvider,null);
        CGImageProperties imageProperties=imageSource.getProperties(0,null);
        CGImagePropertyGPSData gpsInfo=imageProperties.getGPSData();
        if (gpsInfo != null) {
          CLLocationCoordinate2D coord=new CLLocationCoordinate2D();
          coord.setLatitude(gpsInfo.getNumber(CGImagePropertyGPS.Latitude));
          coord.setLongitude(gpsInfo.getNumber(CGImagePropertyGPS.Longitude));
          if (gpsInfo.getString(CGImagePropertyGPS.LatitudeRef).equals(""String_Node_Str"")) {
            coord.setLatitude(coord.getLatitude() * -1);
          }
          if (gpsInfo.getString(CGImagePropertyGPS.LongitudeRef).equals(""String_Node_Str"")) {
            coord.setLongitude(coord.getLongitude() * -1);
          }
          String fileName=file.getName();
          PhotoAnnotation photo=new PhotoAnnotation(photoPath,fileName,coord);
synchronized (photos) {
            photos.add(photo);
          }
        }
      }
    }
);
  }
  queue.waitUntilAllOperationsAreFinished();
  return photos;
}"
10451,"public void startRecording() throws Exception {
  AudioStreamBasicDescription asbd=new AudioStreamBasicDescription(mSampleRate,mFormatID,mFormatFlags,mBytesPerPacket,mFramesPerPacket,mBytesPerFrame,mChannelsPerFrame,mBitsPerChannel,0);
  AudioQueuePtr mQueuePtr=new AudioQueuePtr();
  AudioQueueBufferPtr mBuffers=Struct.allocate(AudioQueueBufferPtr.class,kNumberBuffers);
  AQRecorderState aqData=new AQRecorderState(this);
  mStateID=aqData.mID();
  Method callbackMethod=null;
  Method[] methods=this.getClass().getMethods();
  int i=methods.length;
  while (i-- > 0)   if (methods[i].getName().equals(""String_Node_Str"")) {
    callbackMethod=methods[i];
    break;
  }
  FunctionPtr fp=new FunctionPtr(callbackMethod);
  VoidPtr vp=aqData.as(VoidPtr.class);
  AudioQueueError aqe=AudioQueue.newInput(asbd,fp,vp,null,null,0,mQueuePtr);
  System.out.println(CFRunLoopMode.Common.value());
  System.out.println(aqe.name());
  mQueue=mQueuePtr.get();
  int bufferByteSize=deriveBufferSize(mQueue,asbd,0.5);
  System.out.println(""String_Node_Str"" + bufferByteSize);
  AudioQueueBufferPtr[] buffers=mBuffers.toArray(kNumberBuffers);
  for (i=0; i < kNumberBuffers; ++i) {
    mQueue.allocateBuffer(bufferByteSize,buffers[i]);
    mQueue.enqueueBuffer(buffers[i].get(),0,null);
  }
  mRunning=true;
  mQueue.start(null);
}","public void startRecording() throws Exception {
  AudioStreamBasicDescription asbd=new AudioStreamBasicDescription(mSampleRate,mFormatID,mFormatFlags,mBytesPerPacket,mFramesPerPacket,mBytesPerFrame,mChannelsPerFrame,mBitsPerChannel,0);
  AudioQueuePtr mQueuePtr=new AudioQueuePtr();
  AudioQueueBufferPtr mBuffers=Struct.allocate(AudioQueueBufferPtr.class,kNumberBuffers);
  AQRecorderState aqData=new AQRecorderState(this);
  mStateID=aqData.mID();
  Method callbackMethod=null;
  Method[] methods=this.getClass().getMethods();
  int i=methods.length;
  while (i-- > 0)   if (methods[i].getName().equals(""String_Node_Str"")) {
    callbackMethod=methods[i];
    break;
  }
  FunctionPtr fp=new FunctionPtr(callbackMethod);
  VoidPtr vp=aqData.as(VoidPtr.class);
  OSStatus aqe=AudioQueue.newInput(asbd,fp,vp,null,null,0,mQueuePtr);
  System.out.println(CFRunLoopMode.Common.value());
  System.out.println(AudioQueueError.valueOf(aqe.getStatusCode()));
  mQueue=mQueuePtr.get();
  int bufferByteSize=deriveBufferSize(mQueue,asbd,0.5);
  System.out.println(""String_Node_Str"" + bufferByteSize);
  AudioQueueBufferPtr[] buffers=mBuffers.toArray(kNumberBuffers);
  for (i=0; i < kNumberBuffers; ++i) {
    mQueue.allocateBuffer(bufferByteSize,buffers[i]);
    mQueue.enqueueBuffer(buffers[i].get(),0,null);
  }
  mRunning=true;
  mQueue.start(null);
}"
10452,"public void play(){
  final AudioTrack me=this;
  Runnable r=new Runnable(){
    public void run(){
      AudioStreamBasicDescription asbd=new AudioStreamBasicDescription(mSampleRate,mFormatID,mFormatFlags,mBytesPerPacket,mFramesPerPacket,mBytesPerFrame,mChannelsPerFrame,mBitsPerChannel,0);
      AudioQueuePtr mQueuePtr=new AudioQueuePtr();
      Method callbackMethod=null;
      Method[] methods=me.getClass().getMethods();
      int i=methods.length;
      while (i-- > 0)       if (methods[i].getName().equals(""String_Node_Str"")) {
        callbackMethod=methods[i];
        break;
      }
      FunctionPtr fp=new FunctionPtr(callbackMethod);
      AQPlayerState aqData=new AQPlayerState(me);
      mStateID=aqData.mID();
      VoidPtr vp=aqData.as(VoidPtr.class);
      AudioQueueError aqe=AudioQueue.newOutput(asbd,fp,vp,null,null,0,mQueuePtr);
      System.out.println(aqe.name());
      mQueue=mQueuePtr.get();
      int bufferByteSize=deriveBufferSize(asbd,2,0.5);
      System.out.println(""String_Node_Str"" + bufferByteSize);
      System.out.println(""String_Node_Str"" + (int)AudioQueueParam.Volume.value());
      mQueue.setParameter((int)AudioQueueParam.Volume.value(),1.0f);
      mRunning=true;
      AudioQueueBufferPtr mBuffers=Struct.allocate(AudioQueueBufferPtr.class,kNumberBuffers);
      AudioQueueBufferPtr[] buffers=mBuffers.toArray(kNumberBuffers);
      for (i=0; i < kNumberBuffers; ++i) {
        mQueue.allocateBuffer(bufferByteSize,buffers[i]);
        nextChunk(mQueue,buffers[i].get());
      }
      System.out.println(""String_Node_Str"");
      mQueue.start(null);
      System.out.println(""String_Node_Str"");
    }
  }
;
  new Thread(r).start();
}","public void play(){
  final AudioTrack me=this;
  Runnable r=new Runnable(){
    @Override public void run(){
      AudioStreamBasicDescription asbd=new AudioStreamBasicDescription(mSampleRate,mFormatID,mFormatFlags,mBytesPerPacket,mFramesPerPacket,mBytesPerFrame,mChannelsPerFrame,mBitsPerChannel,0);
      AudioQueuePtr mQueuePtr=new AudioQueuePtr();
      Method callbackMethod=null;
      Method[] methods=me.getClass().getMethods();
      int i=methods.length;
      while (i-- > 0)       if (methods[i].getName().equals(""String_Node_Str"")) {
        callbackMethod=methods[i];
        break;
      }
      FunctionPtr fp=new FunctionPtr(callbackMethod);
      AQPlayerState aqData=new AQPlayerState(me);
      mStateID=aqData.mID();
      VoidPtr vp=aqData.as(VoidPtr.class);
      OSStatus aqe=AudioQueue.newOutput(asbd,fp,vp,null,null,0,mQueuePtr);
      System.out.println(AudioQueueError.valueOf(aqe.getStatusCode()));
      mQueue=mQueuePtr.get();
      int bufferByteSize=deriveBufferSize(asbd,2,0.5);
      System.out.println(""String_Node_Str"" + bufferByteSize);
      System.out.println(""String_Node_Str"" + (int)AudioQueueParam.Volume.value());
      mQueue.setParameter((int)AudioQueueParam.Volume.value(),1.0f);
      mRunning=true;
      AudioQueueBufferPtr mBuffers=Struct.allocate(AudioQueueBufferPtr.class,kNumberBuffers);
      AudioQueueBufferPtr[] buffers=mBuffers.toArray(kNumberBuffers);
      for (i=0; i < kNumberBuffers; ++i) {
        mQueue.allocateBuffer(bufferByteSize,buffers[i]);
        nextChunk(mQueue,buffers[i].get());
      }
      System.out.println(""String_Node_Str"");
      mQueue.start(null);
      System.out.println(""String_Node_Str"");
    }
  }
;
  new Thread(r).start();
}"
10453,"public void run(){
  AudioStreamBasicDescription asbd=new AudioStreamBasicDescription(mSampleRate,mFormatID,mFormatFlags,mBytesPerPacket,mFramesPerPacket,mBytesPerFrame,mChannelsPerFrame,mBitsPerChannel,0);
  AudioQueuePtr mQueuePtr=new AudioQueuePtr();
  Method callbackMethod=null;
  Method[] methods=me.getClass().getMethods();
  int i=methods.length;
  while (i-- > 0)   if (methods[i].getName().equals(""String_Node_Str"")) {
    callbackMethod=methods[i];
    break;
  }
  FunctionPtr fp=new FunctionPtr(callbackMethod);
  AQPlayerState aqData=new AQPlayerState(me);
  mStateID=aqData.mID();
  VoidPtr vp=aqData.as(VoidPtr.class);
  AudioQueueError aqe=AudioQueue.newOutput(asbd,fp,vp,null,null,0,mQueuePtr);
  System.out.println(aqe.name());
  mQueue=mQueuePtr.get();
  int bufferByteSize=deriveBufferSize(asbd,2,0.5);
  System.out.println(""String_Node_Str"" + bufferByteSize);
  System.out.println(""String_Node_Str"" + (int)AudioQueueParam.Volume.value());
  mQueue.setParameter((int)AudioQueueParam.Volume.value(),1.0f);
  mRunning=true;
  AudioQueueBufferPtr mBuffers=Struct.allocate(AudioQueueBufferPtr.class,kNumberBuffers);
  AudioQueueBufferPtr[] buffers=mBuffers.toArray(kNumberBuffers);
  for (i=0; i < kNumberBuffers; ++i) {
    mQueue.allocateBuffer(bufferByteSize,buffers[i]);
    nextChunk(mQueue,buffers[i].get());
  }
  System.out.println(""String_Node_Str"");
  mQueue.start(null);
  System.out.println(""String_Node_Str"");
}","@Override public void run(){
  AudioStreamBasicDescription asbd=new AudioStreamBasicDescription(mSampleRate,mFormatID,mFormatFlags,mBytesPerPacket,mFramesPerPacket,mBytesPerFrame,mChannelsPerFrame,mBitsPerChannel,0);
  AudioQueuePtr mQueuePtr=new AudioQueuePtr();
  Method callbackMethod=null;
  Method[] methods=me.getClass().getMethods();
  int i=methods.length;
  while (i-- > 0)   if (methods[i].getName().equals(""String_Node_Str"")) {
    callbackMethod=methods[i];
    break;
  }
  FunctionPtr fp=new FunctionPtr(callbackMethod);
  AQPlayerState aqData=new AQPlayerState(me);
  mStateID=aqData.mID();
  VoidPtr vp=aqData.as(VoidPtr.class);
  OSStatus aqe=AudioQueue.newOutput(asbd,fp,vp,null,null,0,mQueuePtr);
  System.out.println(AudioQueueError.valueOf(aqe.getStatusCode()));
  mQueue=mQueuePtr.get();
  int bufferByteSize=deriveBufferSize(asbd,2,0.5);
  System.out.println(""String_Node_Str"" + bufferByteSize);
  System.out.println(""String_Node_Str"" + (int)AudioQueueParam.Volume.value());
  mQueue.setParameter((int)AudioQueueParam.Volume.value(),1.0f);
  mRunning=true;
  AudioQueueBufferPtr mBuffers=Struct.allocate(AudioQueueBufferPtr.class,kNumberBuffers);
  AudioQueueBufferPtr[] buffers=mBuffers.toArray(kNumberBuffers);
  for (i=0; i < kNumberBuffers; ++i) {
    mQueue.allocateBuffer(bufferByteSize,buffers[i]);
    nextChunk(mQueue,buffers[i].get());
  }
  System.out.println(""String_Node_Str"");
  mQueue.start(null);
  System.out.println(""String_Node_Str"");
}"
10454,"public AtomicElementView(CGRect frame){
  super(frame);
  setBackgroundColor(UIColor.clear());
  UITapGestureRecognizer tapGestureRecognizer=new UITapGestureRecognizer(new UIGestureRecognizer.GestureListener(){
    @Override public void handleGesture(    UIGestureRecognizer gestureRecognizer){
      viewController.flipCurrentView();
    }
  }
);
  addGestureRecognizer(tapGestureRecognizer);
}","public AtomicElementView(CGRect frame){
  super(frame);
  setBackgroundColor(UIColor.clear());
  UITapGestureRecognizer tapGestureRecognizer=new UITapGestureRecognizer(new UIGestureRecognizer.OnGestureListener(){
    @Override public void onGesture(    UIGestureRecognizer gestureRecognizer){
      viewController.flipCurrentView();
    }
  }
);
  addGestureRecognizer(tapGestureRecognizer);
}"
10455,"/** 
 * Bounce the placard back to the center. 
 */
private void animatePlacardViewToCenter(){
  CALayer welcomeLayer=placardView.getLayer();
  CAKeyframeAnimation bounceAnimation=CAKeyframeAnimation.create(""String_Node_Str"");
  bounceAnimation.setRemovedOnCompletion(false);
  double animationDuration=1.5;
  UIBezierPath bouncePath=new UIBezierPath();
  CGPoint centerPoint=getCenter();
  double midX=centerPoint.getX();
  double midY=centerPoint.getY();
  double originalOffsetX=placardView.getCenter().getX() - midX;
  double originalOffsetY=placardView.getCenter().getY() - midY;
  double offsetDivider=4;
  boolean stopBouncing=false;
  bouncePath.move(new CGPoint(placardView.getCenter().getX(),placardView.getCenter().getY()));
  bouncePath.addLine(new CGPoint(midX,midY));
  while (!stopBouncing) {
    CGPoint excursion=new CGPoint(midX + originalOffsetX / offsetDivider,midY + originalOffsetY / offsetDivider);
    bouncePath.addLine(excursion);
    bouncePath.addLine(centerPoint);
    offsetDivider+=4;
    animationDuration+=1 / offsetDivider;
    if (Math.abs(originalOffsetX / offsetDivider) < 6 && Math.abs(originalOffsetY / offsetDivider) < 6) {
      stopBouncing=true;
    }
  }
  bounceAnimation.setPath(bouncePath.getCGPath());
  bounceAnimation.setDuration(animationDuration);
  CABasicAnimation transformAnimation=CABasicAnimation.create(""String_Node_Str"");
  transformAnimation.setRemovedOnCompletion(true);
  transformAnimation.setDuration(animationDuration);
  transformAnimation.setToValue(NSValue.valueOf(CoreAnimation.Transform3DIdentity()));
  CAAnimationGroup group=new CAAnimationGroup();
  group.setDelegate(new CAAnimationDelegateAdapter(){
    /** 
 * Animation delegate method called when the animation's finished: restore the transform and reenable user interaction. 
 */
    @Override public void didStop(    CAAnimation anim,    boolean flag){
      placardView.setTransform(CGAffineTransform.Identity());
      setUserInteractionEnabled(true);
    }
  }
);
  group.setDuration(animationDuration);
  group.setTimingFunction(CAMediaTimingFunction.create(CoreAnimation.MediaTimingFunctionEaseIn()));
  group.setAnimations(new NSArray<CAAnimation>(bounceAnimation,transformAnimation));
  welcomeLayer.addAnimation(group,""String_Node_Str"");
  placardView.setCenter(centerPoint);
  placardView.setTransform(CGAffineTransform.Identity());
}","/** 
 * Bounce the placard back to the center. 
 */
private void animatePlacardViewToCenter(){
  CALayer welcomeLayer=placardView.getLayer();
  CAKeyframeAnimation bounceAnimation=CAKeyframeAnimation.create(""String_Node_Str"");
  bounceAnimation.setRemovedOnCompletion(false);
  double animationDuration=1.5;
  UIBezierPath bouncePath=new UIBezierPath();
  CGPoint centerPoint=getCenter();
  double midX=centerPoint.getX();
  double midY=centerPoint.getY();
  double originalOffsetX=placardView.getCenter().getX() - midX;
  double originalOffsetY=placardView.getCenter().getY() - midY;
  double offsetDivider=4;
  boolean stopBouncing=false;
  bouncePath.move(new CGPoint(placardView.getCenter().getX(),placardView.getCenter().getY()));
  bouncePath.addLine(new CGPoint(midX,midY));
  while (!stopBouncing) {
    CGPoint excursion=new CGPoint(midX + originalOffsetX / offsetDivider,midY + originalOffsetY / offsetDivider);
    bouncePath.addLine(excursion);
    bouncePath.addLine(centerPoint);
    offsetDivider+=4;
    animationDuration+=1 / offsetDivider;
    if (Math.abs(originalOffsetX / offsetDivider) < 6 && Math.abs(originalOffsetY / offsetDivider) < 6) {
      stopBouncing=true;
    }
  }
  bounceAnimation.setPath(bouncePath.getCGPath());
  bounceAnimation.setDuration(animationDuration);
  CABasicAnimation transformAnimation=CABasicAnimation.create(""String_Node_Str"");
  transformAnimation.setRemovedOnCompletion(true);
  transformAnimation.setDuration(animationDuration);
  transformAnimation.setToValue(NSValue.valueOf(CATransform3D.Identity()));
  CAAnimationGroup group=new CAAnimationGroup();
  group.setDelegate(new CAAnimationDelegateAdapter(){
    /** 
 * Animation delegate method called when the animation's finished: restore the transform and reenable user interaction. 
 */
    @Override public void didStop(    CAAnimation anim,    boolean flag){
      placardView.setTransform(CGAffineTransform.Identity());
      setUserInteractionEnabled(true);
    }
  }
);
  group.setDuration(animationDuration);
  group.setTimingFunction(CAMediaTimingFunction.create(CAMediaTimingFunctionName.EaseIn));
  group.setAnimations(new NSArray<CAAnimation>(bounceAnimation,transformAnimation));
  welcomeLayer.addAnimation(group,""String_Node_Str"");
  placardView.setCenter(centerPoint);
  placardView.setTransform(CGAffineTransform.Identity());
}"
10456,"private PhotoAnnotation getAnnotationInGrid(MKMapRect gridMapRect,List<PhotoAnnotation> annotations){
  NSSet<NSObject> visibleAnnotationsInBucket=mapView.getAnnotations(gridMapRect);
  for (  MKAnnotation annotation : annotations) {
    if (visibleAnnotationsInBucket.contains(annotation)) {
      return annotations.get(0);
    }
  }
  final MKMapPoint centerMapPoint=new MKMapPoint(gridMapRect.getOrigin().getX() + gridMapRect.getSize().getWidth() / 2,gridMapRect.getOrigin().getY() + gridMapRect.getSize().getHeight() / 2);
  Comparator<MKAnnotation> comparator=new Comparator<MKAnnotation>(){
    @Override public int compare(    MKAnnotation lhs,    MKAnnotation rhs){
      MKMapPoint mapPoint1=MKMapPoint.create(lhs.getCoordinate());
      MKMapPoint mapPoint2=MKMapPoint.create(rhs.getCoordinate());
      double distance1=MKMapPoint.getMetersBetween(mapPoint1,centerMapPoint);
      double distance2=MKMapPoint.getMetersBetween(mapPoint2,centerMapPoint);
      if (distance1 < distance2) {
        return -1;
      }
      if (distance1 > distance2) {
        return 1;
      }
      return 0;
    }
  }
;
  Collections.sort(annotations,comparator);
  return annotations.get(0);
}","private PhotoAnnotation getAnnotationInGrid(MKMapRect gridMapRect,List<PhotoAnnotation> annotations){
  Set<MKAnnotation> visibleAnnotationsInBucket=mapView.getAnnotations(gridMapRect);
  for (  MKAnnotation annotation : annotations) {
    if (visibleAnnotationsInBucket.contains(annotation)) {
      return annotations.get(0);
    }
  }
  final MKMapPoint centerMapPoint=new MKMapPoint(gridMapRect.getOrigin().getX() + gridMapRect.getSize().getWidth() / 2,gridMapRect.getOrigin().getY() + gridMapRect.getSize().getHeight() / 2);
  Comparator<MKAnnotation> comparator=new Comparator<MKAnnotation>(){
    @Override public int compare(    MKAnnotation lhs,    MKAnnotation rhs){
      MKMapPoint mapPoint1=MKMapPoint.create(lhs.getCoordinate());
      MKMapPoint mapPoint2=MKMapPoint.create(rhs.getCoordinate());
      double distance1=MKMapPoint.getMetersBetween(mapPoint1,centerMapPoint);
      double distance2=MKMapPoint.getMetersBetween(mapPoint2,centerMapPoint);
      if (distance1 < distance2) {
        return -1;
      }
      if (distance1 > distance2) {
        return 1;
      }
      return 0;
    }
  }
;
  Collections.sort(annotations,comparator);
  return annotations.get(0);
}"
10457,"private void populateWorldWithAllPhotoAnnotations(){
  final LoadingStatus loadingStatus=LoadingStatus.getDefaultLoadingStatus(getView().getFrame().getWidth());
  getView().addSubview(loadingStatus);
  DispatchQueue.getGlobalQueue(DispatchQueue.PRIORITY_DEFAULT,0).async(new Runnable(){
    @Override public void run(){
      System.out.println(""String_Node_Str"");
      List<PhotoAnnotation> photos=loadPhotoSet(""String_Node_Str"");
      if (photos == null)       throw new UnsupportedOperationException(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      PhotoMapViewController.this.photos=photos;
      DispatchQueue.getMainQueue().async(new Runnable(){
        @Override public void run(){
          NSArray<?> p=new NSArray<>(PhotoMapViewController.this.photos);
          allAnnotationsMapView.addAnnotations((NSArray<NSObject>)p);
          updateVisibleAnnotations();
          loadingStatus.removeFromSuperviewWithFade();
        }
      }
);
    }
  }
);
}","private void populateWorldWithAllPhotoAnnotations(){
  final LoadingStatus loadingStatus=LoadingStatus.getDefaultLoadingStatus(getView().getFrame().getWidth());
  getView().addSubview(loadingStatus);
  DispatchQueue.getGlobalQueue(DispatchQueue.PRIORITY_DEFAULT,0).async(new Runnable(){
    @Override public void run(){
      System.out.println(""String_Node_Str"");
      List<MKAnnotation> photos=loadPhotoSet(""String_Node_Str"");
      if (photos == null)       throw new UnsupportedOperationException(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      PhotoMapViewController.this.photos=photos;
      DispatchQueue.getMainQueue().async(new Runnable(){
        @Override public void run(){
          allAnnotationsMapView.addAnnotations(PhotoMapViewController.this.photos);
          updateVisibleAnnotations();
          loadingStatus.removeFromSuperviewWithFade();
        }
      }
);
    }
  }
);
}"
10458,"private List<PhotoAnnotation> loadPhotoSet(String path){
  final List<PhotoAnnotation> photos=new ArrayList<>();
  NSOperationQueue queue=new NSOperationQueue();
  queue.setMaxConcurrentOperationCount(8);
  List<String> photoPaths=NSBundle.getMainBundle().findResourcesPathsInSubPath(""String_Node_Str"",path);
  for (  final String photoPath : photoPaths) {
    queue.addOperation(new Runnable(){
      @Override public void run(){
        File file=new File(photoPath);
        NSData imageData=NSData.read(file);
        CGDataProvider dataProvider=CGDataProvider.create(imageData);
        CGImageSource imageSource=CGImageSource.create(dataProvider,null);
        CGImageProperties imageProperties=imageSource.getProperties(0,null);
        CGImagePropertyGPSData gpsInfo=imageProperties.getGPSData();
        if (gpsInfo != null) {
          CLLocationCoordinate2D coord=new CLLocationCoordinate2D();
          coord.setLatitude(gpsInfo.getNumber(CGImagePropertyGPS.Latitude));
          coord.setLongitude(gpsInfo.getNumber(CGImagePropertyGPS.Longitude));
          if (gpsInfo.getString(CGImagePropertyGPS.LatitudeRef).equals(""String_Node_Str"")) {
            coord.setLatitude(coord.getLatitude() * -1);
          }
          if (gpsInfo.getString(CGImagePropertyGPS.LongitudeRef).equals(""String_Node_Str"")) {
            coord.setLongitude(coord.getLongitude() * -1);
          }
          String fileName=file.getName();
          PhotoAnnotation photo=new PhotoAnnotation(photoPath,fileName,coord);
synchronized (photos) {
            photos.add(photo);
          }
        }
      }
    }
);
  }
  queue.waitUntilAllOperationsAreFinished();
  return photos;
}","private List<MKAnnotation> loadPhotoSet(String path){
  final List<MKAnnotation> photos=new ArrayList<>();
  NSOperationQueue queue=new NSOperationQueue();
  queue.setMaxConcurrentOperationCount(8);
  List<String> photoPaths=NSBundle.getMainBundle().findResourcesPathsInSubPath(""String_Node_Str"",path);
  for (  final String photoPath : photoPaths) {
    queue.addOperation(new Runnable(){
      @Override public void run(){
        File file=new File(photoPath);
        NSData imageData=NSData.read(file);
        CGDataProvider dataProvider=CGDataProvider.create(imageData);
        CGImageSource imageSource=CGImageSource.create(dataProvider,null);
        CGImageProperties imageProperties=imageSource.getProperties(0,null);
        CGImagePropertyGPSData gpsInfo=imageProperties.getGPSData();
        if (gpsInfo != null) {
          CLLocationCoordinate2D coord=new CLLocationCoordinate2D();
          coord.setLatitude(gpsInfo.getNumber(CGImagePropertyGPS.Latitude));
          coord.setLongitude(gpsInfo.getNumber(CGImagePropertyGPS.Longitude));
          if (gpsInfo.getString(CGImagePropertyGPS.LatitudeRef).equals(""String_Node_Str"")) {
            coord.setLatitude(coord.getLatitude() * -1);
          }
          if (gpsInfo.getString(CGImagePropertyGPS.LongitudeRef).equals(""String_Node_Str"")) {
            coord.setLongitude(coord.getLongitude() * -1);
          }
          String fileName=file.getName();
          PhotoAnnotation photo=new PhotoAnnotation(photoPath,fileName,coord);
synchronized (photos) {
            photos.add(photo);
          }
        }
      }
    }
);
  }
  queue.waitUntilAllOperationsAreFinished();
  return photos;
}"
10459,"private void updateVisibleAnnotations(){
  System.out.println(""String_Node_Str"");
  final float marginFactor=2.0f;
  final float bucketSize=60.0f;
  MKMapRect visibleMapRect=mapView.getVisibleMapRect();
  MKMapRect adjustedVisibleMapRect=visibleMapRect.inset(-marginFactor * visibleMapRect.getSize().getWidth(),-marginFactor * visibleMapRect.getSize().getHeight());
  CLLocationCoordinate2D leftCoordinate=mapView.convertPointToCoordinateFromView(CGPoint.Zero(),getView());
  CLLocationCoordinate2D rightCoordinate=mapView.convertPointToCoordinateFromView(new CGPoint(bucketSize,0),getView());
  double gridSize=MKMapPoint.create(rightCoordinate).getX() - MKMapPoint.create(leftCoordinate).getX();
  MKMapRect gridMapRect=new MKMapRect();
  gridMapRect.setSize(new MKMapSize(gridSize,gridSize));
  double startX=Math.floor(adjustedVisibleMapRect.getOrigin().getX() / gridSize) * gridSize;
  double startY=Math.floor(adjustedVisibleMapRect.getOrigin().getY() / gridSize) * gridSize;
  double endX=Math.floor((adjustedVisibleMapRect.getOrigin().getX() + adjustedVisibleMapRect.getSize().getWidth()) / gridSize) * gridSize;
  double endY=Math.floor((adjustedVisibleMapRect.getOrigin().getY() + adjustedVisibleMapRect.getSize().getHeight()) / gridSize) * gridSize;
  gridMapRect.getOrigin().setY(startY);
  while (gridMapRect.getOrigin().getY() <= endY) {
    gridMapRect.getOrigin().setX(startX);
    while (gridMapRect.getOrigin().getX() <= endX) {
      NSSet<NSObject> allAnnotationsInBucket=allAnnotationsMapView.getAnnotations(gridMapRect);
      NSSet<NSObject> visibleAnnotationsInBucket=mapView.getAnnotations(gridMapRect);
      if (allAnnotationsInBucket == null || visibleAnnotationsInBucket == null)       continue;
      List<PhotoAnnotation> filteredAnnotationsInBucket=new ArrayList<>();
      for (      NSObject annotation : allAnnotationsInBucket) {
        if (annotation instanceof PhotoAnnotation) {
          filteredAnnotationsInBucket.add((PhotoAnnotation)annotation);
        }
      }
      if (filteredAnnotationsInBucket.size() > 0) {
        PhotoAnnotation annotationForGrid=getAnnotationInGrid(gridMapRect,filteredAnnotationsInBucket);
        filteredAnnotationsInBucket.remove(annotationForGrid);
        annotationForGrid.setContainedAnnotations(filteredAnnotationsInBucket);
        mapView.addAnnotation(annotationForGrid);
        for (        final PhotoAnnotation annotation : filteredAnnotationsInBucket) {
          annotation.setClusterAnnotation(annotationForGrid);
          annotation.setContainedAnnotations(null);
          if (visibleAnnotationsInBucket.contains(annotation)) {
            final CLLocationCoordinate2D actualCoordinate=annotation.getCoordinate();
            UIView.animate(0.3,new Runnable(){
              @Override public void run(){
                annotation.setCoordinate(annotation.getClusterAnnotation().getCoordinate());
              }
            }
,new VoidBooleanBlock(){
              @Override public void invoke(              boolean v){
                annotation.setCoordinate(actualCoordinate);
                mapView.removeAnnotation(annotation);
              }
            }
);
          }
        }
      }
      gridMapRect.getOrigin().setX(gridMapRect.getOrigin().getX() + gridSize);
    }
    gridMapRect.getOrigin().setY(gridMapRect.getOrigin().getY() + gridSize);
  }
  System.out.println(""String_Node_Str"");
}","private void updateVisibleAnnotations(){
  System.out.println(""String_Node_Str"");
  final float marginFactor=2.0f;
  final float bucketSize=60.0f;
  MKMapRect visibleMapRect=mapView.getVisibleMapRect();
  MKMapRect adjustedVisibleMapRect=visibleMapRect.inset(-marginFactor * visibleMapRect.getSize().getWidth(),-marginFactor * visibleMapRect.getSize().getHeight());
  CLLocationCoordinate2D leftCoordinate=mapView.convertPointToCoordinateFromView(CGPoint.Zero(),getView());
  CLLocationCoordinate2D rightCoordinate=mapView.convertPointToCoordinateFromView(new CGPoint(bucketSize,0),getView());
  double gridSize=MKMapPoint.create(rightCoordinate).getX() - MKMapPoint.create(leftCoordinate).getX();
  MKMapRect gridMapRect=new MKMapRect();
  gridMapRect.setSize(new MKMapSize(gridSize,gridSize));
  double startX=Math.floor(adjustedVisibleMapRect.getOrigin().getX() / gridSize) * gridSize;
  double startY=Math.floor(adjustedVisibleMapRect.getOrigin().getY() / gridSize) * gridSize;
  double endX=Math.floor((adjustedVisibleMapRect.getOrigin().getX() + adjustedVisibleMapRect.getSize().getWidth()) / gridSize) * gridSize;
  double endY=Math.floor((adjustedVisibleMapRect.getOrigin().getY() + adjustedVisibleMapRect.getSize().getHeight()) / gridSize) * gridSize;
  gridMapRect.getOrigin().setY(startY);
  while (gridMapRect.getOrigin().getY() <= endY) {
    gridMapRect.getOrigin().setX(startX);
    while (gridMapRect.getOrigin().getX() <= endX) {
      Set<MKAnnotation> allAnnotationsInBucket=allAnnotationsMapView.getAnnotations(gridMapRect);
      Set<MKAnnotation> visibleAnnotationsInBucket=mapView.getAnnotations(gridMapRect);
      if (allAnnotationsInBucket == null || visibleAnnotationsInBucket == null)       continue;
      List<PhotoAnnotation> filteredAnnotationsInBucket=new ArrayList<>();
      for (      MKAnnotation annotation : allAnnotationsInBucket) {
        if (annotation instanceof PhotoAnnotation) {
          filteredAnnotationsInBucket.add((PhotoAnnotation)annotation);
        }
      }
      if (filteredAnnotationsInBucket.size() > 0) {
        PhotoAnnotation annotationForGrid=getAnnotationInGrid(gridMapRect,filteredAnnotationsInBucket);
        filteredAnnotationsInBucket.remove(annotationForGrid);
        annotationForGrid.setContainedAnnotations(filteredAnnotationsInBucket);
        mapView.addAnnotation(annotationForGrid);
        for (        final PhotoAnnotation annotation : filteredAnnotationsInBucket) {
          annotation.setClusterAnnotation(annotationForGrid);
          annotation.setContainedAnnotations(null);
          if (visibleAnnotationsInBucket.contains(annotation)) {
            final CLLocationCoordinate2D actualCoordinate=annotation.getCoordinate();
            UIView.animate(0.3,new Runnable(){
              @Override public void run(){
                annotation.setCoordinate(annotation.getClusterAnnotation().getCoordinate());
              }
            }
,new VoidBooleanBlock(){
              @Override public void invoke(              boolean v){
                annotation.setCoordinate(actualCoordinate);
                mapView.removeAnnotation(annotation);
              }
            }
);
          }
        }
      }
      gridMapRect.getOrigin().setX(gridMapRect.getOrigin().getX() + gridSize);
    }
    gridMapRect.getOrigin().setY(gridMapRect.getOrigin().getY() + gridSize);
  }
  System.out.println(""String_Node_Str"");
}"
10460,"@Override public MKAnnotationView getAnnotationView(MKMapView mapView,MKAnnotation annotation){
  final String annotationIdentifier=""String_Node_Str"";
  if (mapView != PhotoMapViewController.this.mapView) {
    return null;
  }
  if (annotation instanceof PhotoAnnotation) {
    MKPinAnnotationView annotationView=(MKPinAnnotationView)mapView.dequeueReusableAnnotationView(annotationIdentifier);
    if (annotationView == null) {
      annotationView=new MKPinAnnotationView();
      annotationView.setAnnotation(annotation);
      annotationView.setCanShowCallout(true);
      annotationView.setPinColor(MKPinAnnotationColor.Red);
      annotationView.setAnimatesDrop(true);
      UIButton disclosureButton=UIButton.create(UIButtonType.DetailDisclosure);
      annotationView.setRightCalloutAccessoryView(disclosureButton);
    }
 else {
      annotationView.setAnnotation(annotation);
    }
    return annotationView;
  }
  return null;
}","@Override public MKAnnotationView getAnnotationView(MKMapView mapView,MKAnnotation annotation){
  final String annotationIdentifier=""String_Node_Str"";
  if (mapView != PhotoMapViewController.this.mapView) {
    return null;
  }
  if (annotation instanceof PhotoAnnotation) {
    MKPinAnnotationView annotationView=(MKPinAnnotationView)mapView.dequeueReusableAnnotationView(annotationIdentifier);
    if (annotationView == null) {
      annotationView=new MKPinAnnotationView(annotation,annotationIdentifier);
      annotationView.setCanShowCallout(true);
      annotationView.setPinColor(MKPinAnnotationColor.Red);
      annotationView.setAnimatesDrop(true);
      UIButton disclosureButton=UIButton.create(UIButtonType.DetailDisclosure);
      annotationView.setRightCalloutAccessoryView(disclosureButton);
    }
 else {
      annotationView.setAnnotation(annotation);
    }
    return annotationView;
  }
  return null;
}"
10461,"public PhotoMapViewController(){
  setTitle(""String_Node_Str"");
  getNavigationItem().setRightBarButtonItem(new UIBarButtonItem(""String_Node_Str"",UIBarButtonItemStyle.Plain,new UIBarButtonItem.OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      zoomToCherryLake();
    }
  }
));
  photosViewController=new PhotosViewController();
  allAnnotationsMapView=new MKMapView(CGRect.Zero());
  mapView=new MKMapView(getView().getBounds());
  mapView.setDelegate(new MKMapViewDelegateAdapter(){
    @Override public void didChangeRegion(    MKMapView mapView,    boolean animated){
      updateVisibleAnnotations();
    }
    @Override public void didAddAnnotationViews(    MKMapView mapView,    NSArray<MKAnnotationView> views){
      for (      MKAnnotationView annotationView : views) {
        if (!(annotationView.getAnnotation() instanceof PhotoAnnotation)) {
          continue;
        }
        final PhotoAnnotation annotation=(PhotoAnnotation)annotationView.getAnnotation();
        if (annotation.getClusterAnnotation() != null) {
          final CLLocationCoordinate2D actualCoordinate=annotation.getCoordinate();
          CLLocationCoordinate2D containerCoordinate=annotation.getClusterAnnotation().getCoordinate();
          annotation.setClusterAnnotation(null);
          annotation.setCoordinate(containerCoordinate);
          UIView.animate(0.3,new Runnable(){
            @Override public void run(){
              annotation.setCoordinate(actualCoordinate);
            }
          }
);
        }
      }
    }
    @Override public MKAnnotationView getAnnotationView(    MKMapView mapView,    MKAnnotation annotation){
      final String annotationIdentifier=""String_Node_Str"";
      if (mapView != PhotoMapViewController.this.mapView) {
        return null;
      }
      if (annotation instanceof PhotoAnnotation) {
        MKPinAnnotationView annotationView=(MKPinAnnotationView)mapView.dequeueReusableAnnotationView(annotationIdentifier);
        if (annotationView == null) {
          annotationView=new MKPinAnnotationView();
          annotationView.setAnnotation(annotation);
          annotationView.setCanShowCallout(true);
          annotationView.setPinColor(MKPinAnnotationColor.Red);
          annotationView.setAnimatesDrop(true);
          UIButton disclosureButton=UIButton.create(UIButtonType.DetailDisclosure);
          annotationView.setRightCalloutAccessoryView(disclosureButton);
        }
 else {
          annotationView.setAnnotation(annotation);
        }
        return annotationView;
      }
      return null;
    }
    /** 
 * User tapped the call out accessory 'i' button.
 * @param mapView
 * @param view
 * @param control 
 */
    @Override public void calloutAccessoryControlTapped(    MKMapView mapView,    MKAnnotationView view,    UIControl control){
      PhotoAnnotation annotation=(PhotoAnnotation)view.getAnnotation();
      List<PhotoAnnotation> photosToShow=new ArrayList<>();
      photosToShow.add(annotation);
      photosToShow.addAll(annotation.getContainedAnnotations());
      photosViewController.setPhotosToShow(photosToShow);
      getNavigationController().pushViewController(photosViewController,true);
    }
    @Override public void didSelectAnnotationView(    MKMapView mapView,    MKAnnotationView view){
      if (view.getAnnotation() instanceof PhotoAnnotation) {
        PhotoAnnotation annotation=(PhotoAnnotation)view.getAnnotation();
        annotation.updateSubtitleIfNeeded();
      }
    }
  }
);
  getView().addSubview(mapView);
  MKCoordinateRegion newRegion=new MKCoordinateRegion(CherryLakeLocation,new MKCoordinateSpan(5.0,5.0));
  mapView.setRegion(newRegion);
  populateWorldWithAllPhotoAnnotations();
}","public PhotoMapViewController(){
  setTitle(""String_Node_Str"");
  getNavigationItem().setRightBarButtonItem(new UIBarButtonItem(""String_Node_Str"",UIBarButtonItemStyle.Plain,new UIBarButtonItem.OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      zoomToCherryLake();
    }
  }
));
  photosViewController=new PhotosViewController();
  allAnnotationsMapView=new MKMapView(CGRect.Zero());
  mapView=new MKMapView(getView().getBounds());
  mapView.setDelegate(new MKMapViewDelegateAdapter(){
    @Override public void didChangeRegion(    MKMapView mapView,    boolean animated){
      updateVisibleAnnotations();
    }
    @Override public void didAddAnnotationViews(    MKMapView mapView,    NSArray<MKAnnotationView> views){
      for (      MKAnnotationView annotationView : views) {
        if (!(annotationView.getAnnotation() instanceof PhotoAnnotation)) {
          continue;
        }
        final PhotoAnnotation annotation=(PhotoAnnotation)annotationView.getAnnotation();
        if (annotation.getClusterAnnotation() != null) {
          final CLLocationCoordinate2D actualCoordinate=annotation.getCoordinate();
          CLLocationCoordinate2D containerCoordinate=annotation.getClusterAnnotation().getCoordinate();
          annotation.setClusterAnnotation(null);
          annotation.setCoordinate(containerCoordinate);
          UIView.animate(0.3,new Runnable(){
            @Override public void run(){
              annotation.setCoordinate(actualCoordinate);
            }
          }
);
        }
      }
    }
    @Override public MKAnnotationView getAnnotationView(    MKMapView mapView,    MKAnnotation annotation){
      final String annotationIdentifier=""String_Node_Str"";
      if (mapView != PhotoMapViewController.this.mapView) {
        return null;
      }
      if (annotation instanceof PhotoAnnotation) {
        MKPinAnnotationView annotationView=(MKPinAnnotationView)mapView.dequeueReusableAnnotationView(annotationIdentifier);
        if (annotationView == null) {
          annotationView=new MKPinAnnotationView(annotation,annotationIdentifier);
          annotationView.setCanShowCallout(true);
          annotationView.setPinColor(MKPinAnnotationColor.Red);
          annotationView.setAnimatesDrop(true);
          UIButton disclosureButton=UIButton.create(UIButtonType.DetailDisclosure);
          annotationView.setRightCalloutAccessoryView(disclosureButton);
        }
 else {
          annotationView.setAnnotation(annotation);
        }
        return annotationView;
      }
      return null;
    }
    /** 
 * User tapped the call out accessory 'i' button.
 * @param mapView
 * @param view
 * @param control 
 */
    @Override public void calloutAccessoryControlTapped(    MKMapView mapView,    MKAnnotationView view,    UIControl control){
      PhotoAnnotation annotation=(PhotoAnnotation)view.getAnnotation();
      List<PhotoAnnotation> photosToShow=new ArrayList<>();
      photosToShow.add(annotation);
      photosToShow.addAll(annotation.getContainedAnnotations());
      photosViewController.setPhotosToShow(photosToShow);
      getNavigationController().pushViewController(photosViewController,true);
    }
    @Override public void didSelectAnnotationView(    MKMapView mapView,    MKAnnotationView view){
      if (view.getAnnotation() instanceof PhotoAnnotation) {
        PhotoAnnotation annotation=(PhotoAnnotation)view.getAnnotation();
        annotation.updateSubtitleIfNeeded();
      }
    }
  }
);
  getView().addSubview(mapView);
  MKCoordinateRegion newRegion=new MKCoordinateRegion(CherryLakeLocation,new MKCoordinateSpan(5.0,5.0));
  mapView.setRegion(newRegion);
  populateWorldWithAllPhotoAnnotations();
}"
10462,"private static NSArray<?> getImageData(){
  if (imageData == null) {
    String path=NSBundle.getMainBundle().findResourcePath(""String_Node_Str"",""String_Node_Str"");
    NSData plistData=NSData.read(new File(path));
    try {
      imageData=(NSArray<?>)NSPropertyListSerialization.getPropertyListFromData(plistData,0);
    }
 catch (    NSErrorException e) {
      System.err.println(""String_Node_Str"" + e.getError());
    }
  }
  return imageData;
}","private static NSArray<?> getImageData(){
  if (imageData == null) {
    String path=NSBundle.getMainBundle().findResourcePath(""String_Node_Str"",""String_Node_Str"");
    NSData plistData=NSData.read(new File(path));
    try {
      imageData=(NSArray<?>)NSPropertyListSerialization.getPropertyListFromData(plistData,NSPropertyListMutabilityOptions.None);
    }
 catch (    NSErrorException e) {
      System.err.println(""String_Node_Str"" + e.getError());
    }
  }
  return imageData;
}"
10463,"@Override public void setFrame(CGRect frame){
  boolean sizeChanging=!frame.getSize().equalToSize(getFrame().getSize());
  if (sizeChanging) {
    prepareToResize();
  }
  super.setFrame(frame);
  if (sizeChanging) {
    recoverFromResizing();
  }
}","@Override public void setFrame(CGRect frame){
  boolean sizeChanging=!frame.getSize().equalsTo(getFrame().getSize());
  if (sizeChanging) {
    prepareToResize();
  }
  super.setFrame(frame);
  if (sizeChanging) {
    recoverFromResizing();
  }
}"
10464,"@Method(selector=""String_Node_Str"") public static Class<?> getLayerClass(){
  return CATiledLayer.class;
}","@Method(selector=""String_Node_Str"") public static Class<? extends CALayer> getLayerClass(){
  return CATiledLayer.class;
}"
10465,"public BatStatViewController(){
  super();
  getNavigationItem().setTitle(""String_Node_Str"");
  UITableView tableView=new UITableView(new CGRect(0,0,320,568),UITableViewStyle.Grouped);
  tableView.setAlwaysBounceVertical(true);
  tableView.setSeparatorStyle(UITableViewCellSeparatorStyle.SingleLineEtched);
  tableView.setRowHeight(44);
  tableView.setSectionHeaderHeight(20);
  tableView.setSectionFooterHeight(10);
  tableView.setBackgroundColor(UIColor.groupTableViewBackground());
  tableView.setDataSource(new UITableViewDataSourceAdapter(){
    @Override public long getNumberOfSections(    UITableView tableView){
      return 3;
    }
    @Override public long getNumberOfRowsInSection(    UITableView tableView,    long section){
switch ((int)section) {
case 0:
case 1:
        return 1;
default :
      return 4;
  }
}
@Override public UITableViewCell getRowCell(UITableView tableView,NSIndexPath indexPath){
  UIView contentView;
switch ((int)NSIndexPathExtensions.getSection(indexPath)) {
case 0:
    UITableViewCell switchCell=new UITableViewCell(new CGRect(0,99,320,44));
  contentView=switchCell.getContentView();
UILabel monitoringLabel=new UILabel(new CGRect(20,11,83,21));
monitoringLabel.setText(""String_Node_Str"");
monitoringLabel.setFont(UIFont.getSystemFont(17));
monitoringLabel.setTextColor(UIColor.darkText());
contentView.addSubview(monitoringLabel);
monitorSwitch=new UISwitch(new CGRect(251,6,51,31));
monitorSwitch.setOn(true);
monitorSwitch.addOnValueChangedListener(switchAction);
contentView.addSubview(monitorSwitch);
return switchCell;
case 1:
UITableViewCell levelCell=new UITableViewCell(new CGRect(0,173,320,44));
contentView=levelCell.getContentView();
UILabel levelCaptionLabel=new UILabel(new CGRect(20,11,42,21));
levelCaptionLabel.setText(""String_Node_Str"");
levelCaptionLabel.setFont(UIFont.getSystemFont(17));
levelCaptionLabel.setTextColor(UIColor.darkText());
contentView.addSubview(levelCaptionLabel);
levelLabel=new UILabel(new CGRect(220,11,80,21));
levelLabel.setFont(UIFont.getSystemFont(17));
levelLabel.setTextColor(UIColor.darkText());
contentView.addSubview(levelLabel);
return levelCell;
default :
switch ((int)NSIndexPathExtensions.getRow(indexPath)) {
case 0:
unknownCell=new UITableViewCell(new CGRect(0,265,320,44));
contentView=unknownCell.getContentView();
UILabel unknownLabel=new UILabel(new CGRect(20,11,80,21));
unknownLabel.setText(""String_Node_Str"");
unknownLabel.setFont(UIFont.getSystemFont(17));
contentView.addSubview(unknownLabel);
return unknownCell;
case 1:
unpluggedCell=new UITableViewCell(new CGRect(0,309,320,44));
contentView=unpluggedCell.getContentView();
UILabel unpluggedLabel=new UILabel(new CGRect(20,11,90,21));
unpluggedLabel.setText(""String_Node_Str"");
unpluggedLabel.setFont(UIFont.getSystemFont(17));
contentView.addSubview(unpluggedLabel);
return unpluggedCell;
case 2:
chargingCell=new UITableViewCell(new CGRect(0,353,320,44));
contentView=chargingCell.getContentView();
UILabel chargingLabel=new UILabel(new CGRect(20,11,74,21));
chargingLabel.setText(""String_Node_Str"");
chargingLabel.setFont(UIFont.getSystemFont(17));
contentView.addSubview(chargingLabel);
return chargingCell;
default :
fullCell=new UITableViewCell(new CGRect(0,397,320,44));
contentView=fullCell.getContentView();
UILabel fullLabel=new UILabel(new CGRect(20,11,42,21));
fullLabel.setText(""String_Node_Str"");
fullLabel.setFont(UIFont.getSystemFont(17));
contentView.addSubview(fullLabel);
return fullCell;
}
}
}
@Override public String getSectionHeaderTitle(UITableView tableView,long section){
switch ((int)section) {
case 2:
return ""String_Node_Str"";
default :
return null;
}
}
}
);
switchAction=new UIControl.OnValueChangedListener(){
@Override public void onValueChanged(UIControl control){
if (((UISwitch)control).isOn()) {
UIDevice.getCurrentDevice().setBatteryMonitoringEnabled(true);
}
 else {
UIDevice.getCurrentDevice().setBatteryMonitoringEnabled(false);
updateBatteryLevel();
updateBatteryState();
}
}
}
;
setTableView(tableView);
}","public BatStatViewController(){
  super();
  getNavigationItem().setTitle(""String_Node_Str"");
  UITableView tableView=new UITableView(new CGRect(0,0,320,568),UITableViewStyle.Grouped);
  tableView.setAlwaysBounceVertical(true);
  tableView.setSeparatorStyle(UITableViewCellSeparatorStyle.SingleLineEtched);
  tableView.setRowHeight(44);
  tableView.setSectionHeaderHeight(20);
  tableView.setSectionFooterHeight(10);
  tableView.setBackgroundColor(UIColor.groupTableViewBackground());
  tableView.setDataSource(new UITableViewDataSourceAdapter(){
    @Override public long getNumberOfSections(    UITableView tableView){
      return 3;
    }
    @Override public long getNumberOfRowsInSection(    UITableView tableView,    long section){
switch ((int)section) {
case 0:
case 1:
        return 1;
default :
      return 4;
  }
}
@Override public UITableViewCell getCellForRow(UITableView tableView,NSIndexPath indexPath){
  UIView contentView;
switch ((int)indexPath.getSection()) {
case 0:
    UITableViewCell switchCell=new UITableViewCell(new CGRect(0,99,320,44));
  contentView=switchCell.getContentView();
UILabel monitoringLabel=new UILabel(new CGRect(20,11,83,21));
monitoringLabel.setText(""String_Node_Str"");
monitoringLabel.setFont(UIFont.getSystemFont(17));
monitoringLabel.setTextColor(UIColor.darkText());
contentView.addSubview(monitoringLabel);
monitorSwitch=new UISwitch(new CGRect(251,6,51,31));
monitorSwitch.setOn(true);
monitorSwitch.addOnValueChangedListener(switchAction);
contentView.addSubview(monitorSwitch);
return switchCell;
case 1:
UITableViewCell levelCell=new UITableViewCell(new CGRect(0,173,320,44));
contentView=levelCell.getContentView();
UILabel levelCaptionLabel=new UILabel(new CGRect(20,11,42,21));
levelCaptionLabel.setText(""String_Node_Str"");
levelCaptionLabel.setFont(UIFont.getSystemFont(17));
levelCaptionLabel.setTextColor(UIColor.darkText());
contentView.addSubview(levelCaptionLabel);
levelLabel=new UILabel(new CGRect(220,11,80,21));
levelLabel.setFont(UIFont.getSystemFont(17));
levelLabel.setTextColor(UIColor.darkText());
contentView.addSubview(levelLabel);
return levelCell;
default :
switch ((int)indexPath.getRow()) {
case 0:
unknownCell=new UITableViewCell(new CGRect(0,265,320,44));
contentView=unknownCell.getContentView();
UILabel unknownLabel=new UILabel(new CGRect(20,11,80,21));
unknownLabel.setText(""String_Node_Str"");
unknownLabel.setFont(UIFont.getSystemFont(17));
contentView.addSubview(unknownLabel);
return unknownCell;
case 1:
unpluggedCell=new UITableViewCell(new CGRect(0,309,320,44));
contentView=unpluggedCell.getContentView();
UILabel unpluggedLabel=new UILabel(new CGRect(20,11,90,21));
unpluggedLabel.setText(""String_Node_Str"");
unpluggedLabel.setFont(UIFont.getSystemFont(17));
contentView.addSubview(unpluggedLabel);
return unpluggedCell;
case 2:
chargingCell=new UITableViewCell(new CGRect(0,353,320,44));
contentView=chargingCell.getContentView();
UILabel chargingLabel=new UILabel(new CGRect(20,11,74,21));
chargingLabel.setText(""String_Node_Str"");
chargingLabel.setFont(UIFont.getSystemFont(17));
contentView.addSubview(chargingLabel);
return chargingCell;
default :
fullCell=new UITableViewCell(new CGRect(0,397,320,44));
contentView=fullCell.getContentView();
UILabel fullLabel=new UILabel(new CGRect(20,11,42,21));
fullLabel.setText(""String_Node_Str"");
fullLabel.setFont(UIFont.getSystemFont(17));
contentView.addSubview(fullLabel);
return fullCell;
}
}
}
@Override public String getTitleForHeader(UITableView tableView,long section){
switch ((int)section) {
case 2:
return ""String_Node_Str"";
default :
return null;
}
}
}
);
switchAction=new UIControl.OnValueChangedListener(){
@Override public void onValueChanged(UIControl control){
if (((UISwitch)control).isOn()) {
UIDevice.getCurrentDevice().setBatteryMonitoringEnabled(true);
}
 else {
UIDevice.getCurrentDevice().setBatteryMonitoringEnabled(false);
updateBatteryLevel();
updateBatteryState();
}
}
}
;
setTableView(tableView);
}"
10466,"public void onClick(UIBarButtonItem barButtonItem){
  onSave();
}","@Override public void onClick(UIBarButtonItem barButtonItem){
  onSave();
}"
10467,"@Override public void viewDidLoad(){
  super.viewDidLoad();
  getNavigationItem().setRightBarButtonItem(new UIBarButtonItem(UIBarButtonSystemItem.Done,new OnClickListener(){
    public void onClick(    UIBarButtonItem barButtonItem){
      onSave();
    }
  }
));
}","@Override public void viewDidLoad(){
  super.viewDidLoad();
  getNavigationItem().setRightBarButtonItem(new UIBarButtonItem(UIBarButtonSystemItem.Done,new OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      onSave();
    }
  }
));
}"
10468,"public void onClick(UIBarButtonItem barButtonItem){
  setEditing(false,true);
}","@Override public void onClick(UIBarButtonItem barButtonItem){
  setEditing(false,true);
}"
10469,"@Override public void viewDidLoad(){
  super.viewDidLoad();
  getNavigationItem().setRightBarButtonItem(new UIBarButtonItem(UIBarButtonSystemItem.Add,new OnClickListener(){
    public void onClick(    UIBarButtonItem barButtonItem){
      onAdd();
    }
  }
));
  editBarButtonItem=new UIBarButtonItem(UIBarButtonSystemItem.Edit,new OnClickListener(){
    public void onClick(    UIBarButtonItem barButtonItem){
      setEditing(true,true);
    }
  }
);
  doneBarButtonItem=new UIBarButtonItem(UIBarButtonSystemItem.Done,new OnClickListener(){
    public void onClick(    UIBarButtonItem barButtonItem){
      setEditing(false,true);
    }
  }
);
  getNavigationItem().setLeftBarButtonItem(editBarButtonItem);
}","@Override public void viewDidLoad(){
  super.viewDidLoad();
  getNavigationItem().setRightBarButtonItem(new UIBarButtonItem(UIBarButtonSystemItem.Add,new OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      onAdd();
    }
  }
));
  editBarButtonItem=new UIBarButtonItem(UIBarButtonSystemItem.Edit,new OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      setEditing(true,true);
    }
  }
);
  doneBarButtonItem=new UIBarButtonItem(UIBarButtonSystemItem.Done,new OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      setEditing(false,true);
    }
  }
);
  getNavigationItem().setLeftBarButtonItem(editBarButtonItem);
}"
10470,"public void onClick(UIBarButtonItem barButtonItem){
  selectedTask=null;
  dismissViewController(true,null);
}","@Override public void onClick(UIBarButtonItem barButtonItem){
  selectedTask=null;
  dismissViewController(true,null);
}"
10471,"@Override public void viewDidLoad(){
  super.viewDidLoad();
  getNavigationItem().setLeftBarButtonItem(new UIBarButtonItem(UIBarButtonSystemItem.Cancel,new OnClickListener(){
    public void onClick(    UIBarButtonItem barButtonItem){
      selectedTask=null;
      dismissViewController(true,null);
    }
  }
));
}","@Override public void viewDidLoad(){
  super.viewDidLoad();
  getNavigationItem().setLeftBarButtonItem(new UIBarButtonItem(UIBarButtonSystemItem.Cancel,new OnClickListener(){
    @Override public void onClick(    UIBarButtonItem barButtonItem){
      selectedTask=null;
      dismissViewController(true,null);
    }
  }
));
}"
10472,"/** 
 * Create button with provided parameters
 * @param title title of button
 * @param frame frame of button
 * @param image image in button
 * @param imagePressed state to show when image is pressed
 * @param darkTextColor should text of dark color be displayed
 * @return a new UIButton 
 */
private static UIButton newButton(String title,CGRect frame,UIImage image,UIImage imagePressed,boolean darkTextColor){
  UIButton button=new UIButton(frame);
  button.setContentVerticalAlignment(UIControlContentVerticalAlignment.Center);
  button.setContentHorizontalAlignment(UIControlContentHorizontalAlignment.Center);
  button.setTitle(title,UIControlState.Normal);
  if (darkTextColor) {
    button.setTitleColor(UIColor.black(),UIControlState.Normal);
  }
 else {
    button.setTitleColor(UIColor.white(),UIControlState.Normal);
  }
  UIImage newImage=image.newStretchable(12,0);
  button.setBackgroundImage(newImage,UIControlState.Normal);
  UIImage newPressedImage=imagePressed.newStretchable(12,0);
  button.setBackgroundImage(newPressedImage,UIControlState.Highlighted);
  button.setBackgroundColor(UIColor.clear());
  return button;
}","/** 
 * Create button with provided parameters
 * @param title title of button
 * @param frame frame of button
 * @param image image in button
 * @param imagePressed state to show when image is pressed
 * @param darkTextColor should text of dark color be displayed
 * @return a new UIButton 
 */
private static UIButton newButton(String title,CGRect frame,UIImage image,UIImage imagePressed,boolean darkTextColor){
  UIButton button=new UIButton(frame);
  button.setContentVerticalAlignment(UIControlContentVerticalAlignment.Center);
  button.setContentHorizontalAlignment(UIControlContentHorizontalAlignment.Center);
  button.setTitle(title,UIControlState.Normal);
  if (darkTextColor) {
    button.setTitleColor(UIColor.black(),UIControlState.Normal);
  }
 else {
    button.setTitleColor(UIColor.white(),UIControlState.Normal);
  }
  UIImage newImage=image.createStretchable(12,0);
  button.setBackgroundImage(newImage,UIControlState.Normal);
  UIImage newPressedImage=imagePressed.createStretchable(12,0);
  button.setBackgroundImage(newPressedImage,UIControlState.Highlighted);
  button.setBackgroundColor(UIColor.clear());
  return button;
}"
10473,"/** 
 * gets custom slider
 * @return slider 
 */
private UISlider getCustomSlider(){
  if (customSlider == null) {
    CGRect frame=new CGRect(0.0,12.0,130.0,SLIDER_HEIGHT);
    customSlider=new UISlider(frame);
    customSlider.addOnValueChangedListener(new UIControl.OnValueChangedListener(){
      @Override public void onValueChanged(      UIControl control){
        System.err.println(""String_Node_Str"" + customSlider.getValue());
      }
    }
);
    customSlider.setBackgroundColor(UIColor.clear());
    UIImage stetchLeftTrack=UIImage.createFromBundle(""String_Node_Str"");
    stetchLeftTrack=stetchLeftTrack.newStretchable(10l,0l);
    UIImage stetchRightTrack=UIImage.createFromBundle(""String_Node_Str"");
    stetchRightTrack=stetchRightTrack.newStretchable(10l,0l);
    customSlider.setThumbImage(UIImage.createFromBundle(""String_Node_Str""),UIControlState.Normal);
    customSlider.setMinimumTrackImage(stetchLeftTrack,UIControlState.Normal);
    customSlider.setMaximumTrackImage(stetchRightTrack,UIControlState.Normal);
    customSlider.setMinimumValue(0.0f);
    customSlider.setMaximumValue(100.0f);
    customSlider.setContinuous(true);
    customSlider.setValue(50.0f);
  }
  return customSlider;
}","/** 
 * gets custom slider
 * @return slider 
 */
private UISlider getCustomSlider(){
  if (customSlider == null) {
    CGRect frame=new CGRect(0.0,12.0,130.0,SLIDER_HEIGHT);
    customSlider=new UISlider(frame);
    customSlider.addOnValueChangedListener(new UIControl.OnValueChangedListener(){
      @Override public void onValueChanged(      UIControl control){
        System.err.println(""String_Node_Str"" + customSlider.getValue());
      }
    }
);
    customSlider.setBackgroundColor(UIColor.clear());
    UIImage stetchLeftTrack=UIImage.createFromBundle(""String_Node_Str"");
    stetchLeftTrack=stetchLeftTrack.createStretchable(10l,0l);
    UIImage stetchRightTrack=UIImage.createFromBundle(""String_Node_Str"");
    stetchRightTrack=stetchRightTrack.createStretchable(10l,0l);
    customSlider.setThumbImage(UIImage.createFromBundle(""String_Node_Str""),UIControlState.Normal);
    customSlider.setMinimumTrackImage(stetchLeftTrack,UIControlState.Normal);
    customSlider.setMaximumTrackImage(stetchRightTrack,UIControlState.Normal);
    customSlider.setMinimumValue(0.0f);
    customSlider.setMaximumValue(100.0f);
    customSlider.setContinuous(true);
    customSlider.setValue(50.0f);
  }
  return customSlider;
}"
10474,"@Override public void viewWillAppear(boolean animated){
  super.viewWillAppear(animated);
  Selector willShow=Selector.register(""String_Node_Str"");
  Selector willHide=Selector.register(""String_Node_Str"");
  NSNotificationCenter center=NSNotificationCenter.getDefaultCenter();
  center.addObserver(this,willShow,UIKit.KeyboardWillShowNotification(),null);
  center.addObserver(this,willHide,UIKit.KeyboardWillHideNotification(),null);
}","@Override public void viewWillAppear(boolean animated){
  super.viewWillAppear(animated);
  keyboardWillShowObserver=UIWindow.Notifications.observeKeyboardWillShow(new VoidBlock1<UIKeyboardAnimation>(){
    @Override public void invoke(    UIKeyboardAnimation a){
      adjustViewForKeyboardReveal(true,a);
    }
  }
);
  keyboardWillHideObserver=UIWindow.Notifications.observeKeyboardWillHide(new VoidBlock1<UIKeyboardAnimation>(){
    @Override public void invoke(    UIKeyboardAnimation a){
      adjustViewForKeyboardReveal(false,a);
    }
  }
);
}"
10475,"@Override public void viewDidDisappear(boolean animated){
  super.viewDidDisappear(animated);
  NSNotificationCenter.getDefaultCenter().removeObserver(UIKit.KeyboardWillShowNotification());
  NSNotificationCenter.getDefaultCenter().removeObserver(UIKit.KeyboardWillHideNotification());
}","@Override public void viewDidDisappear(boolean animated){
  super.viewDidDisappear(animated);
  NSNotificationCenter.getDefaultCenter().removeObserver(keyboardWillShowObserver);
  NSNotificationCenter.getDefaultCenter().removeObserver(keyboardWillHideObserver);
}"
10476,"/** 
 * Modifies keyboards size to fit screen
 * @param showKeyboard
 * @param notificationInfo 
 */
private void adjustViewForKeyboardReveal(boolean showKeyboard,NSDictionary<NSString,?> notificationInfo){
  CGRect keyboardRect=NSValueExtensions.getRectValue((NSValue)notificationInfo.get(UIKit.KeyboardFrameEndUserInfoKey()));
  double animationDuration=((NSNumber)notificationInfo.get(UIKit.KeyboardAnimationDurationUserInfoKey())).doubleValue();
  CGRect frame=this.textView.getFrame();
  double adjustDelta=isPortrait(this.getInterfaceOrientation()) ? keyboardRect.getHeight() : keyboardRect.getWidth();
  if (showKeyboard) {
    frame.size().height(frame.size().height() - adjustDelta);
  }
 else {
    frame.size().height(frame.size().height() + adjustDelta);
  }
  UIView.beginAnimations(""String_Node_Str"",null);
  UIView.setDurationForAnimation(animationDuration);
  this.textView.setFrame(frame);
  UIView.commitAnimations();
}","/** 
 * Modifies keyboards size to fit screen.
 * @param showKeyboard
 * @param notificationInfo 
 */
private void adjustViewForKeyboardReveal(boolean showKeyboard,UIKeyboardAnimation animation){
  CGRect keyboardRect=animation.getEndFrame();
  double animationDuration=animation.getAnimationDuration();
  CGRect frame=this.textView.getFrame();
  double adjustDelta=isPortrait(this.getInterfaceOrientation()) ? keyboardRect.getHeight() : keyboardRect.getWidth();
  if (showKeyboard) {
    frame.size().height(frame.size().height() - adjustDelta);
  }
 else {
    frame.size().height(frame.size().height() + adjustDelta);
  }
  UIView.beginAnimations(""String_Node_Str"",null);
  UIView.setDurationForAnimation(animationDuration);
  this.textView.setFrame(frame);
  UIView.commitAnimations();
}"
10477,"/** 
 * Creates toolbar with associated buttons 
 */
private void createToolbarItems(){
  this.scrollView.addSubview(this.buttonItemStyleSegControl);
  UIBarButtonItemStyle style=UIBarButtonItemStyle.valueOf(this.buttonItemStyleSegControl.getSelectedSegment());
  UIBarButtonItem systemItem=new UIBarButtonItem(this.currentSystemItem,null,Selector.register(""String_Node_Str""));
  systemItem.setTarget(ToolbarViewController.this);
  systemItem.setStyle(style);
  UIBarButtonItem flexItem=new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace,null,null);
  UIBarButtonItem infoItem=new UIBarButtonItem(UIImage.createFromBundle(""String_Node_Str""),style,null,Selector.register(""String_Node_Str""));
  UIBarButtonItem customItem1=new UIBarButtonItem(""String_Node_Str"",UIBarButtonItemStyle.Bordered,null,Selector.register(""String_Node_Str""));
  customItem1.setTarget(ToolbarViewController.this);
  UIImage baseImage=UIImage.createFromBundle(""String_Node_Str"");
  UIImage backroundImage=baseImage.newStretchable(12,0);
  customItem1.setBackgroundImage(backroundImage,UIControlState.Normal,UIBarMetrics.Default);
  NSMutableDictionary<NSString,UIColor> textAttributes=new NSMutableDictionary<NSString,UIColor>();
  textAttributes.put(UIKit.ForegroundColorAttributeName(),UIColor.black());
  customItem1.setTitleTextAttributes(textAttributes,UIControlState.Normal);
  UIBarButtonItem customItem2=new UIBarButtonItem(""String_Node_Str"",style,null,Selector.register(""String_Node_Str""));
  List<UIBarButtonItem> buttonSet=new LinkedList<UIBarButtonItem>();
  buttonSet.add(systemItem);
  buttonSet.add(flexItem);
  buttonSet.add(customItem1);
  buttonSet.add(customItem2);
  buttonSet.add(infoItem);
  NSMutableArray<UIBarButtonItem> array=new NSMutableArray<UIBarButtonItem>(buttonSet);
  toolbar.setItems(array,false);
}","/** 
 * Creates toolbar with associated buttons 
 */
private void createToolbarItems(){
  this.scrollView.addSubview(this.buttonItemStyleSegControl);
  UIBarButtonItemStyle style=UIBarButtonItemStyle.valueOf(this.buttonItemStyleSegControl.getSelectedSegment());
  UIBarButtonItem systemItem=new UIBarButtonItem(this.currentSystemItem,null,Selector.register(""String_Node_Str""));
  systemItem.setTarget(ToolbarViewController.this);
  systemItem.setStyle(style);
  UIBarButtonItem flexItem=new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace,null,null);
  UIBarButtonItem infoItem=new UIBarButtonItem(UIImage.createFromBundle(""String_Node_Str""),style,null,Selector.register(""String_Node_Str""));
  UIBarButtonItem customItem1=new UIBarButtonItem(""String_Node_Str"",UIBarButtonItemStyle.Bordered,null,Selector.register(""String_Node_Str""));
  customItem1.setTarget(ToolbarViewController.this);
  UIImage baseImage=UIImage.createFromBundle(""String_Node_Str"");
  UIImage backroundImage=baseImage.createStretchable(12,0);
  customItem1.setBackgroundImage(backroundImage,UIControlState.Normal,UIBarMetrics.Default);
  NSMutableDictionary<NSString,UIColor> textAttributes=new NSMutableDictionary<NSString,UIColor>();
  textAttributes.put(UIKit.ForegroundColorAttributeName(),UIColor.black());
  customItem1.setTitleTextAttributes(textAttributes,UIControlState.Normal);
  UIBarButtonItem customItem2=new UIBarButtonItem(""String_Node_Str"",style,null,Selector.register(""String_Node_Str""));
  List<UIBarButtonItem> buttonSet=new LinkedList<UIBarButtonItem>();
  buttonSet.add(systemItem);
  buttonSet.add(flexItem);
  buttonSet.add(customItem1);
  buttonSet.add(customItem2);
  buttonSet.add(infoItem);
  NSMutableArray<UIBarButtonItem> array=new NSMutableArray<UIBarButtonItem>(buttonSet);
  toolbar.setItems(array,false);
}"
10478,"private void setupViews(){
  UIImageView background=new UIImageView(UIImage.createFromBundle(""String_Node_Str""));
  background.setFrame(new CGRect(0,0,320,480));
  background.setContentMode(UIViewContentMode.Center);
  background.setUserInteractionEnabled(false);
  getView().addSubview(background);
  textField=new UITextField(new CGRect(44,32,232,31));
  textField.setContentVerticalAlignment(UIControlContentVerticalAlignment.Center);
  textField.setBorderStyle(UITextBorderStyle.RoundedRect);
  textField.setPlaceholder(""String_Node_Str"");
  textField.setFont(UIFont.getFont(""String_Node_Str"",17));
  textField.setClearsOnBeginEditing(true);
  textField.setAdjustsFontSizeToFitWidth(true);
  textField.setMinimumFontSize(17);
  textField.setAutocapitalizationType(UITextAutocapitalizationType.Words);
  textField.setKeyboardType(UIKeyboardType.ASCIICapable);
  textField.setReturnKeyType(UIReturnKeyType.Done);
  textField.setClearButtonMode(UITextFieldViewMode.WhileEditing);
  textField.setDelegate(new UITextFieldDelegateAdapter(){
    @Override public boolean shouldReturn(    UITextField theTextField){
      if (theTextField == textField) {
        textField.resignFirstResponder();
        updateString();
      }
      return true;
    }
  }
);
  getView().addSubview(textField);
  label=new UILabel(new CGRect(20,104,280,44));
  label.setFont(UIFont.getFont(""String_Node_Str"",24));
  label.setTextColor(UIColor.white());
  label.setBaselineAdjustment(UIBaselineAdjustment.AlignCenters);
  label.setTextAlignment(NSTextAlignment.Center);
  label.setText(textField.getPlaceholder());
  getView().addSubview(label);
}","private void setupViews(){
  UIImageView background=new UIImageView(UIImage.create(""String_Node_Str""));
  background.setFrame(new CGRect(0,0,320,480));
  background.setContentMode(UIViewContentMode.Center);
  background.setUserInteractionEnabled(false);
  getView().addSubview(background);
  textField=new UITextField(new CGRect(44,32,232,31));
  textField.setContentVerticalAlignment(UIControlContentVerticalAlignment.Center);
  textField.setBorderStyle(UITextBorderStyle.RoundedRect);
  textField.setPlaceholder(""String_Node_Str"");
  textField.setFont(UIFont.getFont(""String_Node_Str"",17));
  textField.setClearsOnBeginEditing(true);
  textField.setAdjustsFontSizeToFitWidth(true);
  textField.setMinimumFontSize(17);
  textField.setAutocapitalizationType(UITextAutocapitalizationType.Words);
  textField.setKeyboardType(UIKeyboardType.ASCIICapable);
  textField.setReturnKeyType(UIReturnKeyType.Done);
  textField.setClearButtonMode(UITextFieldViewMode.WhileEditing);
  textField.setDelegate(new UITextFieldDelegateAdapter(){
    @Override public boolean shouldReturn(    UITextField theTextField){
      if (theTextField == textField) {
        textField.resignFirstResponder();
        updateString();
      }
      return true;
    }
  }
);
  getView().addSubview(textField);
  label=new UILabel(new CGRect(20,104,280,44));
  label.setFont(UIFont.getFont(""String_Node_Str"",24));
  label.setTextColor(UIColor.white());
  label.setBaselineAdjustment(UIBaselineAdjustment.AlignCenters);
  label.setTextAlignment(NSTextAlignment.Center);
  label.setText(textField.getPlaceholder());
  getView().addSubview(label);
}"
10479,"@Override public boolean didFinishLaunching(UIApplication application,UIApplicationLaunchOptions launchOptions){
  tabBarController=new UITabBarController();
  getLocationViewController=new GetLocationViewController();
  UINavigationController getLocationController=new UINavigationController(getLocationViewController);
  getLocationController.getTabBarItem().setTitle(""String_Node_Str"");
  getLocationController.getTabBarItem().setImage(UIImage.createFromBundle(""String_Node_Str""));
  tabBarController.addChildViewController(getLocationController);
  trackLocationViewController=new TrackLocationViewController();
  UINavigationController trackLocationController=new UINavigationController(trackLocationViewController);
  trackLocationController.getTabBarItem().setTitle(""String_Node_Str"");
  trackLocationController.getTabBarItem().setImage(UIImage.createFromBundle(""String_Node_Str""));
  tabBarController.addChildViewController(trackLocationController);
  window=new UIWindow(UIScreen.getMainScreen().getBounds());
  window.setRootViewController(tabBarController);
  window.makeKeyAndVisible();
  if (!CLLocationManager.isLocationServicesEnabled()) {
    UIAlertView servicesDisabledAlert=new UIAlertView(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"");
    servicesDisabledAlert.show();
  }
  addStrongRef(window);
  return true;
}","@Override public boolean didFinishLaunching(UIApplication application,UIApplicationLaunchOptions launchOptions){
  tabBarController=new UITabBarController();
  getLocationViewController=new GetLocationViewController();
  UINavigationController getLocationController=new UINavigationController(getLocationViewController);
  getLocationController.getTabBarItem().setTitle(""String_Node_Str"");
  getLocationController.getTabBarItem().setImage(UIImage.create(""String_Node_Str""));
  tabBarController.addChildViewController(getLocationController);
  trackLocationViewController=new TrackLocationViewController();
  UINavigationController trackLocationController=new UINavigationController(trackLocationViewController);
  trackLocationController.getTabBarItem().setTitle(""String_Node_Str"");
  trackLocationController.getTabBarItem().setImage(UIImage.create(""String_Node_Str""));
  tabBarController.addChildViewController(trackLocationController);
  window=new UIWindow(UIScreen.getMainScreen().getBounds());
  window.setRootViewController(tabBarController);
  window.makeKeyAndVisible();
  if (!CLLocationManager.isLocationServicesEnabled()) {
    UIAlertView servicesDisabledAlert=new UIAlertView(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"");
    servicesDisabledAlert.show();
  }
  addStrongRef(window);
  return true;
}"
10480,"/** 
 * This method is invoked when the user hits ""Done"" in the setup view controller. The options chosen by the user are passed in as a map. The keys for this map are declared in SetupViewController. 
 */
private void finishSetup(SetupViewController controller,Map<String,Double> setupInfo){
  startButton.setAlpha(0);
  descriptionLabel.setAlpha(0);
  tableView.setAlpha(1);
  locationManager=new CLLocationManager();
  locationManager.setDelegate(new CLLocationManagerDelegateAdapter(){
    /** 
 * We want to get and store a location measurement that meets the desired accuracy. For this example, we are going to use horizontal accuracy as the deciding factor. In other cases, you may wish to use vertical accuracy, or both together. 
 */
    @Override public void didUpdateToLocation(    CLLocationManager manager,    CLLocation newLocation,    CLLocation oldLocation){
      locationMeasurements.add(newLocation);
      double locationAge=-newLocation.getTimestamp().getTimeIntervalSinceNow();
      if (locationAge > 5)       return;
      if (newLocation.getHorizontalAccuracy() < 0)       return;
      if (bestEffortAtLocation == null || bestEffortAtLocation.getHorizontalAccuracy() > newLocation.getHorizontalAccuracy()) {
        bestEffortAtLocation=newLocation;
        if (newLocation.getHorizontalAccuracy() <= locationManager.getDesiredAccuracy()) {
          stopUpdatingLocation(Str.getLocalizedString(""String_Node_Str""));
        }
      }
      tableView.reloadData();
      canTimeOut=false;
    }
    @Override public void didFail(    CLLocationManager manager,    NSError error){
      if (error.getCode() != CLError.LocationUnknown.value()) {
        stopUpdatingLocation(Str.getLocalizedString(""String_Node_Str""));
      }
    }
  }
);
  locationManager.setDesiredAccuracy(setupInfo.get(SetupViewController.SETUP_INFO_KEY_ACCURACY));
  locationManager.startUpdatingLocation();
  canTimeOut=true;
  DispatchQueue.after(Dispatch.time(Dispatch.TIME_NOW,(long)(setupInfo.get(SetupViewController.SETUP_INFO_KEY_TIMEOUT) * 1000000000)),DispatchQueue.getMainQueue(),new Runnable(){
    @Override public void run(){
      if (canTimeOut) {
        stopUpdatingLocation(""String_Node_Str"");
      }
    }
  }
);
  stateString=Str.getLocalizedString(""String_Node_Str"");
  tableView.reloadData();
}","/** 
 * This method is invoked when the user hits ""Done"" in the setup view controller. The options chosen by the user are passed in as a map. The keys for this map are declared in SetupViewController. 
 */
private void finishSetup(SetupViewController controller,Map<String,Double> setupInfo){
  startButton.setAlpha(0);
  descriptionLabel.setAlpha(0);
  tableView.setAlpha(1);
  locationManager=new CLLocationManager();
  locationManager.setDelegate(new CLLocationManagerDelegateAdapter(){
    /** 
 * We want to get and store a location measurement that meets the desired accuracy. For this example, we are going to use horizontal accuracy as the deciding factor. In other cases, you may wish to use vertical accuracy, or both together. 
 */
    @Override public void didUpdateToLocation(    CLLocationManager manager,    CLLocation newLocation,    CLLocation oldLocation){
      locationMeasurements.add(newLocation);
      double locationAge=-newLocation.getTimestamp().getTimeIntervalSinceNow();
      if (locationAge > 5)       return;
      if (newLocation.getHorizontalAccuracy() < 0)       return;
      if (bestEffortAtLocation == null || bestEffortAtLocation.getHorizontalAccuracy() > newLocation.getHorizontalAccuracy()) {
        bestEffortAtLocation=newLocation;
        if (newLocation.getHorizontalAccuracy() <= locationManager.getDesiredAccuracy()) {
          stopUpdatingLocation(Str.getLocalizedString(""String_Node_Str""));
        }
      }
      tableView.reloadData();
      canTimeOut=false;
    }
    @Override public void didFail(    CLLocationManager manager,    NSError error){
      if (error.getCode() != CLError.LocationUnknown.value()) {
        stopUpdatingLocation(Str.getLocalizedString(""String_Node_Str""));
      }
    }
  }
);
  locationManager.setDesiredAccuracy(setupInfo.get(SetupViewController.SETUP_INFO_KEY_ACCURACY));
  locationManager.startUpdatingLocation();
  canTimeOut=true;
  DispatchQueue.getMainQueue().after(Math.round(setupInfo.get(SetupViewController.SETUP_INFO_KEY_TIMEOUT)),TimeUnit.SECONDS,new Runnable(){
    @Override public void run(){
      if (canTimeOut) {
        stopUpdatingLocation(""String_Node_Str"");
      }
    }
  }
);
  stateString=Str.getLocalizedString(""String_Node_Str"");
  tableView.reloadData();
}"
10481,"public MyLocalMovieViewController(){
  super();
  UIView view=getView();
  view.setBackgroundColor(UIColor.fromWhiteAlpha(0.66,1));
  imageView=new MyImageView(new CGRect(57,59,205,135));
  imageView.setMovieViewController(this);
  imageView.setUserInteractionEnabled(true);
  imageView.setImage(UIImage.createFromBundle(""String_Node_Str""));
  imageView.setContentMode(UIViewContentMode.ScaleAspectFit);
  view.addSubview(imageView);
  playButton=UIButton.create(UIButtonType.RoundedRect);
  playButton.setFrame(new CGRect(106,201,108,44));
  playButton.setBackgroundColor(UIColor.fromWhiteAlpha(0.66,0.5));
  playButton.setTitle(""String_Node_Str"",UIControlState.Normal);
  playButton.getTitleLabel().setFont(UIFont.getSystemFont(18));
  playButton.addOnTouchUpInsideListener(new UIControl.OnTouchUpInsideListener(){
    @Override public void onTouchUpInside(    UIControl control,    UIEvent event){
      playLocalMovieFile();
    }
  }
);
  view.addSubview(playButton);
  setTabBarItem(new UITabBarItem(""String_Node_Str"",UIImage.createFromBundle(""String_Node_Str""),0));
}","public MyLocalMovieViewController(){
  super();
  UIView view=getView();
  view.setBackgroundColor(UIColor.fromWhiteAlpha(0.66,1));
  imageView=new MyImageView(new CGRect(57,59,205,135));
  imageView.setMovieViewController(this);
  imageView.setUserInteractionEnabled(true);
  imageView.setImage(UIImage.create(""String_Node_Str""));
  imageView.setContentMode(UIViewContentMode.ScaleAspectFit);
  view.addSubview(imageView);
  playButton=UIButton.create(UIButtonType.RoundedRect);
  playButton.setFrame(new CGRect(106,201,108,44));
  playButton.setBackgroundColor(UIColor.fromWhiteAlpha(0.66,0.5));
  playButton.setTitle(""String_Node_Str"",UIControlState.Normal);
  playButton.getTitleLabel().setFont(UIFont.getSystemFont(18));
  playButton.addOnTouchUpInsideListener(new UIControl.OnTouchUpInsideListener(){
    @Override public void onTouchUpInside(    UIControl control,    UIEvent event){
      playLocalMovieFile();
    }
  }
);
  view.addSubview(playButton);
  setTabBarItem(new UITabBarItem(""String_Node_Str"",UIImage.create(""String_Node_Str""),0));
}"
10482,"public MyMovieViewController(){
  super();
  movieBackgroundImageView=new UIImageView(UIImage.createFromBundle(""String_Node_Str""));
  movieBackgroundImageView.setFrame(new CGRect(0,0,240,128));
  backgroundView=new UIView(new CGRect(0,0,320,460));
  backgroundView.setBackgroundColor(UIColor.fromWhiteAlpha(0.66,1));
  overlayController=new MyOverlayViewController(this);
  if (Integer.valueOf(UIDevice.getCurrentDevice().getSystemVersion().substring(0,1)) >= 7) {
    setEdgesForExtendedLayout(UIRectEdge.None);
  }
}","public MyMovieViewController(){
  super();
  movieBackgroundImageView=new UIImageView(UIImage.create(""String_Node_Str""));
  movieBackgroundImageView.setFrame(new CGRect(0,0,240,128));
  backgroundView=new UIView(new CGRect(0,0,320,460));
  backgroundView.setBackgroundColor(UIColor.fromWhiteAlpha(0.66,1));
  overlayController=new MyOverlayViewController(this);
  if (Integer.valueOf(UIDevice.getCurrentDevice().getSystemVersion().substring(0,1)) >= 7) {
    setEdgesForExtendedLayout(UIRectEdge.None);
  }
}"
10483,"public MyStreamingMovieViewController(){
  super();
  UIView view=getView();
  view.setBackgroundColor(UIColor.fromWhiteAlpha(0.66,1));
  enterURLLabel=new UILabel(new CGRect(63,93,195,29));
  enterURLLabel.setUserInteractionEnabled(false);
  enterURLLabel.setText(""String_Node_Str"");
  enterURLLabel.setFont(UIFont.getSystemFont(14));
  enterURLLabel.setNumberOfLines(5);
  view.addSubview(enterURLLabel);
  playButton=UIButton.create(UIButtonType.RoundedRect);
  playButton.setFrame(new CGRect(106,194,108,44));
  playButton.setBackgroundColor(UIColor.fromWhiteAlpha(0.66,0.5));
  playButton.setTitle(""String_Node_Str"",UIControlState.Normal);
  playButton.getTitleLabel().setFont(UIFont.getSystemFont(18));
  playButton.addOnTouchUpInsideListener(new UIControl.OnTouchUpInsideListener(){
    @Override public void onTouchUpInside(    UIControl control,    UIEvent event){
      playStreamingMovie();
    }
  }
);
  view.addSubview(playButton);
  movieURLTextField=new UITextField(new CGRect(21,133,279,35));
  movieURLTextField.setKeyboardType(UIKeyboardType.URL);
  movieURLTextField.setContentHorizontalAlignment(UIControlContentHorizontalAlignment.Left);
  movieURLTextField.setContentVerticalAlignment(UIControlContentVerticalAlignment.Center);
  movieURLTextField.setBackgroundColor(UIColor.white());
  movieURLTextField.setBorderStyle(UITextBorderStyle.Bezel);
  movieURLTextField.setClearButtonMode(UITextFieldViewMode.Always);
  movieURLTextField.setTextAlignment(NSTextAlignment.Center);
  movieURLTextField.setMinimumFontSize(17);
  movieURLTextField.setText(""String_Node_Str"");
  movieURLTextField.setDelegate(new UITextFieldDelegateAdapter(){
    @Override public boolean shouldReturn(    UITextField textField){
      if (textField == movieURLTextField) {
        movieURLTextField.resignFirstResponder();
      }
      return true;
    }
  }
);
  view.addSubview(movieURLTextField);
  setTabBarItem(new UITabBarItem(""String_Node_Str"",UIImage.createFromBundle(""String_Node_Str""),0));
}","public MyStreamingMovieViewController(){
  super();
  UIView view=getView();
  view.setBackgroundColor(UIColor.fromWhiteAlpha(0.66,1));
  enterURLLabel=new UILabel(new CGRect(63,93,195,29));
  enterURLLabel.setUserInteractionEnabled(false);
  enterURLLabel.setText(""String_Node_Str"");
  enterURLLabel.setFont(UIFont.getSystemFont(14));
  enterURLLabel.setNumberOfLines(5);
  view.addSubview(enterURLLabel);
  playButton=UIButton.create(UIButtonType.RoundedRect);
  playButton.setFrame(new CGRect(106,194,108,44));
  playButton.setBackgroundColor(UIColor.fromWhiteAlpha(0.66,0.5));
  playButton.setTitle(""String_Node_Str"",UIControlState.Normal);
  playButton.getTitleLabel().setFont(UIFont.getSystemFont(18));
  playButton.addOnTouchUpInsideListener(new UIControl.OnTouchUpInsideListener(){
    @Override public void onTouchUpInside(    UIControl control,    UIEvent event){
      playStreamingMovie();
    }
  }
);
  view.addSubview(playButton);
  movieURLTextField=new UITextField(new CGRect(21,133,279,35));
  movieURLTextField.setKeyboardType(UIKeyboardType.URL);
  movieURLTextField.setContentHorizontalAlignment(UIControlContentHorizontalAlignment.Left);
  movieURLTextField.setContentVerticalAlignment(UIControlContentVerticalAlignment.Center);
  movieURLTextField.setBackgroundColor(UIColor.white());
  movieURLTextField.setBorderStyle(UITextBorderStyle.Bezel);
  movieURLTextField.setClearButtonMode(UITextFieldViewMode.Always);
  movieURLTextField.setTextAlignment(NSTextAlignment.Center);
  movieURLTextField.setMinimumFontSize(17);
  movieURLTextField.setText(""String_Node_Str"");
  movieURLTextField.setDelegate(new UITextFieldDelegateAdapter(){
    @Override public boolean shouldReturn(    UITextField textField){
      if (textField == movieURLTextField) {
        movieURLTextField.resignFirstResponder();
      }
      return true;
    }
  }
);
  view.addSubview(movieURLTextField);
  setTabBarItem(new UITabBarItem(""String_Node_Str"",UIImage.create(""String_Node_Str""),0));
}"
10484,"public TeslameterViewController(){
  super();
  UIView view=getView();
  view.setBackgroundColor(UIColor.fromRGBA(0.01,0.01,0.01,1));
  UIImageView backgroundImageView=new UIImageView(UIImage.createFromBundle(""String_Node_Str""));
  backgroundImageView.setFrame(new CGRect(0,-20,320,480));
  backgroundImageView.setContentMode(UIViewContentMode.Center);
  view.addSubview(backgroundImageView);
  magnitudeLabel=new UILabel(new CGRect(20,20,280,124));
  magnitudeLabel.setAlpha(0.7);
  magnitudeLabel.setText(""String_Node_Str"");
  magnitudeLabel.setTextAlignment(NSTextAlignment.Right);
  magnitudeLabel.setLineBreakMode(NSLineBreakMode.TruncatingTail);
  magnitudeLabel.setFont(UIFont.getSystemFont(96));
  magnitudeLabel.setTextColor(UIColor.black());
  view.addSubview(magnitudeLabel);
  xLabel=new UILabel(new CGRect(20,386,71,33));
  xLabel.setText(""String_Node_Str"");
  xLabel.setTextAlignment(NSTextAlignment.Right);
  xLabel.setLineBreakMode(NSLineBreakMode.TruncatingTail);
  xLabel.setFont(UIFont.getFont(""String_Node_Str"",18));
  xLabel.setTextColor(UIColor.fromRGBA(1,0,0,1));
  view.addSubview(xLabel);
  yLabel=new UILabel(new CGRect(120,386,74,33));
  yLabel.setText(""String_Node_Str"");
  yLabel.setTextAlignment(NSTextAlignment.Right);
  yLabel.setLineBreakMode(NSLineBreakMode.TruncatingTail);
  yLabel.setFont(UIFont.getFont(""String_Node_Str"",18));
  yLabel.setTextColor(UIColor.fromRGBA(0.14,0.77,0.012,1));
  view.addSubview(yLabel);
  zLabel=new UILabel(new CGRect(224,386,75,32));
  zLabel.setText(""String_Node_Str"");
  zLabel.setTextAlignment(NSTextAlignment.Right);
  zLabel.setLineBreakMode(NSLineBreakMode.TruncatingTail);
  zLabel.setFont(UIFont.getFont(""String_Node_Str"",18));
  zLabel.setTextColor(UIColor.fromRGBA(0.077,0.065,1,1));
  view.addSubview(zLabel);
  graphView=new GraphView(new CGRect(17,199,286,134));
  view.addSubview(graphView);
}","public TeslameterViewController(){
  super();
  UIView view=getView();
  view.setBackgroundColor(UIColor.fromRGBA(0.01,0.01,0.01,1));
  UIImageView backgroundImageView=new UIImageView(UIImage.create(""String_Node_Str""));
  backgroundImageView.setFrame(new CGRect(0,-20,320,480));
  backgroundImageView.setContentMode(UIViewContentMode.Center);
  view.addSubview(backgroundImageView);
  magnitudeLabel=new UILabel(new CGRect(20,20,280,124));
  magnitudeLabel.setAlpha(0.7);
  magnitudeLabel.setText(""String_Node_Str"");
  magnitudeLabel.setTextAlignment(NSTextAlignment.Right);
  magnitudeLabel.setLineBreakMode(NSLineBreakMode.TruncatingTail);
  magnitudeLabel.setFont(UIFont.getSystemFont(96));
  magnitudeLabel.setTextColor(UIColor.black());
  view.addSubview(magnitudeLabel);
  xLabel=new UILabel(new CGRect(20,386,71,33));
  xLabel.setText(""String_Node_Str"");
  xLabel.setTextAlignment(NSTextAlignment.Right);
  xLabel.setLineBreakMode(NSLineBreakMode.TruncatingTail);
  xLabel.setFont(UIFont.getFont(""String_Node_Str"",18));
  xLabel.setTextColor(UIColor.fromRGBA(1,0,0,1));
  view.addSubview(xLabel);
  yLabel=new UILabel(new CGRect(120,386,74,33));
  yLabel.setText(""String_Node_Str"");
  yLabel.setTextAlignment(NSTextAlignment.Right);
  yLabel.setLineBreakMode(NSLineBreakMode.TruncatingTail);
  yLabel.setFont(UIFont.getFont(""String_Node_Str"",18));
  yLabel.setTextColor(UIColor.fromRGBA(0.14,0.77,0.012,1));
  view.addSubview(yLabel);
  zLabel=new UILabel(new CGRect(224,386,75,32));
  zLabel.setText(""String_Node_Str"");
  zLabel.setTextAlignment(NSTextAlignment.Right);
  zLabel.setLineBreakMode(NSLineBreakMode.TruncatingTail);
  zLabel.setFont(UIFont.getFont(""String_Node_Str"",18));
  zLabel.setTextColor(UIColor.fromRGBA(0.077,0.065,1,1));
  view.addSubview(zLabel);
  graphView=new GraphView(new CGRect(17,199,286,134));
  view.addSubview(graphView);
}"
10485,"/** 
 * Called when users tap ""Display and Edit Contact"" in the application. Searches for a contact named ""Appleseed"" in in the address book. Displays and allows editing of all information associated with that contact if the search is successful. Shows an alert, otherwise. 
 */
private void showPersonViewController(){
  NSArray<?> people=this.addressBook.getPeople(""String_Node_Str"");
  if ((people != null) && !people.isEmpty()) {
    ABPerson person=people.get(0).as(ABPerson.class);
    ABPersonViewController picker=new ABPersonViewController();
    picker.setPersonViewDelegate(this);
    picker.setDisplayedPerson(person);
    picker.setAllowsEditing(true);
    this.getNavigationController().pushViewController(picker,true);
  }
 else {
    UIAlertView alert=new UIAlertView(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new String[0]);
    alert.show();
  }
}","/** 
 * Called when users tap ""Display and Edit Contact"" in the application. Searches for a contact named ""Appleseed"" in in the address book. Displays and allows editing of all information associated with that contact if the search is successful. Shows an alert, otherwise. 
 */
private void showPersonViewController(){
  List<ABPerson> people=this.addressBook.getPeople(""String_Node_Str"");
  if ((people != null) && !people.isEmpty()) {
    ABPerson person=people.get(0).as(ABPerson.class);
    ABPersonViewController picker=new ABPersonViewController();
    picker.setPersonViewDelegate(this);
    picker.setDisplayedPerson(person);
    picker.setAllowsEditing(true);
    this.getNavigationController().pushViewController(picker,true);
  }
 else {
    UIAlertView alert=new UIAlertView(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new String[0]);
    alert.show();
  }
}"
10486,"@Override public void viewWillDisappear(boolean animated){
  this.currentPicker.setHidden(animated);
}","@Override public void viewWillDisappear(boolean animated){
  super.viewWillDisappear(animated);
  this.currentPicker.setHidden(true);
}"
10487,"@Override public void onActivityResumed(Activity activity){
  new LoadFrontCameraAsyncTask(this).load();
}","@Override public void onActivityResumed(){
  cameraStrategy.loadCamera(this);
}"
10488,"public static void retrieve(Context context,Listener listener){
  Application application=(Application)context.getApplicationContext();
  FrontCameraRetriever frontCameraRetriever=new FrontCameraRetriever(listener);
  application.registerActivityLifecycleCallbacks(frontCameraRetriever);
}","public static void retrieve(Activity activity,Listener listener){
  Application application=(Application)activity.getApplicationContext();
  FrontCameraRetriever frontCameraRetriever=new FrontCameraRetriever(listener);
  UniqueActivityLifecycleCallbacks callbacks=UniqueActivityLifecycleCallbacks.newInstance(activity,frontCameraRetriever);
  application.registerActivityLifecycleCallbacks(callbacks);
  frontCameraRetriever.cameraStrategy=new ActuallyGetCameraStrategy();
  if (!RETRIEVERS.isEmpty()) {
    FrontCameraRetriever latestRetriever=RETRIEVERS.get(RETRIEVERS.size() - 1);
    if (latestRetriever != null) {
      latestRetriever.cameraStrategy=new DontGetCameraStrategy();
    }
  }
  RETRIEVERS.add(frontCameraRetriever);
}"
10489,"@Override public void onActivityPaused(Activity activity){
  if (camera != null) {
    camera.recycle();
  }
}","@Override public void onActivityPaused(){
  if (camera != null) {
    cameraStrategy.disposeCamera(camera);
  }
}"
10490,"@Override public void onActivityDestroyed(Activity activity){
  activity.getApplication().unregisterActivityLifecycleCallbacks(this);
}","@Override public void onActivityDestroyed(){
  RETRIEVERS.remove(RETRIEVERS.size() - 1);
  if (!RETRIEVERS.isEmpty()) {
    FrontCameraRetriever latestRetriever=RETRIEVERS.get(RETRIEVERS.size() - 1);
    if (latestRetriever != null) {
      latestRetriever.cameraStrategy=new ActuallyGetCameraStrategy();
    }
  }
}"
10491,"private void measureVertical(int widthMeasureSpec,int heightMeasureSpec){
  int hSize=MeasureSpec.getSize(heightMeasureSpec) - (getPaddingTop() + getPaddingBottom());
  int count=getChildCount();
  int columnHeight=0;
  int totalWidth=0, maxColumnHeight=0;
  int columnMaxWidth=0;
  int childWidth;
  int childHeight;
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=Integer.MAX_VALUE;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      columnMaxWidth=Math.max(columnMaxWidth,childWidth);
      if (childHeight + columnHeight > hSize) {
        totalWidth+=columnMaxWidth;
        maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
        columnHeight=childHeight;
        columnMaxWidth=childWidth;
      }
 else {
        columnHeight+=childHeight;
      }
    }
  }
  if (columnHeight != 0) {
    maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
    totalWidth+=columnMaxWidth;
  }
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=maxColumnHeight - (getPaddingTop() + getPaddingBottom());
  setMeasuredDimension(resolveSize(totalWidth + getPaddingRight() + getPaddingLeft(),widthMeasureSpec),resolveSize(hSize,heightMeasureSpec));
}","private void measureVertical(int widthMeasureSpec,int heightMeasureSpec){
  int hSize=MeasureSpec.getSize(heightMeasureSpec) - (getPaddingTop() + getPaddingBottom());
  int count=getChildCount();
  int columnHeight=0;
  int totalWidth=0, maxColumnHeight=0;
  int columnMaxWidth=0;
  int childWidth;
  int childHeight;
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=Integer.MAX_VALUE;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      columnMaxWidth=Math.max(columnMaxWidth,childWidth);
      if (childHeight + columnHeight > hSize) {
        totalWidth+=columnMaxWidth;
        maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
        columnHeight=childHeight;
        columnMaxWidth=childWidth;
      }
 else {
        columnHeight+=childHeight;
      }
    }
  }
  if (columnHeight != 0) {
    maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
    totalWidth+=columnMaxWidth;
  }
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=maxColumnHeight + (getPaddingTop() + getPaddingBottom());
  setMeasuredDimension(resolveSize(totalWidth + getPaddingRight() + getPaddingLeft(),widthMeasureSpec),resolveSize(hSize,heightMeasureSpec));
}"
10492,"private void measureHorizontal(int widthMeasureSpec,int heightMeasureSpec){
  int wSize=MeasureSpec.getSize(widthMeasureSpec) - (getPaddingLeft() + getPaddingRight());
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=Integer.MAX_VALUE;
  int count=getChildCount();
  int rowWidth=0;
  int totalHeight=0;
  int rowMaxHeight=0;
  int childWidth;
  int childHeight;
  int maxRowHeight=getPaddingTop() + getPaddingBottom();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      rowMaxHeight=Math.max(rowMaxHeight,childHeight);
      if (childWidth + rowWidth > wSize) {
        totalHeight+=rowMaxHeight;
        maxRowHeight=Math.max(maxRowHeight,rowWidth);
        rowWidth=childWidth;
        rowMaxHeight=childHeight;
      }
 else {
        rowWidth+=childWidth;
      }
    }
  }
  if (rowWidth != 0) {
    maxRowHeight=Math.max(maxRowHeight,rowWidth);
    totalHeight+=rowMaxHeight;
  }
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=maxRowHeight - (getPaddingLeft() + getPaddingRight());
  setMeasuredDimension(resolveSize(wSize,widthMeasureSpec),resolveSize(totalHeight + getPaddingTop() + getPaddingBottom(),heightMeasureSpec));
}","private void measureHorizontal(int widthMeasureSpec,int heightMeasureSpec){
  int wSize=MeasureSpec.getSize(widthMeasureSpec) - (getPaddingLeft() + getPaddingRight());
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=Integer.MAX_VALUE;
  int count=getChildCount();
  int rowWidth=0;
  int totalHeight=0;
  int rowMaxHeight=0;
  int childWidth;
  int childHeight;
  int maxRowWidth=getPaddingLeft() + getPaddingRight();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      rowMaxHeight=Math.max(rowMaxHeight,childHeight);
      if (childWidth + rowWidth > wSize) {
        totalHeight+=rowMaxHeight;
        maxRowWidth=Math.max(maxRowWidth,rowWidth);
        rowWidth=childWidth;
        rowMaxHeight=childHeight;
      }
 else {
        rowWidth+=childWidth;
      }
    }
  }
  if (rowWidth != 0) {
    maxRowWidth=Math.max(maxRowWidth,rowWidth);
    totalHeight+=rowMaxHeight;
  }
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=maxRowWidth + (getPaddingLeft() + getPaddingRight());
  setMeasuredDimension(resolveSize(wSize,widthMeasureSpec),resolveSize(totalHeight + getPaddingTop() + getPaddingBottom(),heightMeasureSpec));
}"
10493,"/** 
 * Updates children positions. Takes cares about gravity and layout gravity. Finally layout children to parent if needed. Analog to vertical.
 * @param width parent width
 * @param totalSize total horizontal size used by children in a row
 * @param row row number
 * @param maxChildHeight the biggest child height
 */
private void updateChildPositionHorizontal(int width,int totalSize,int row,int maxChildHeight){
  for (int i=0; i < mListPositions.size(); i++) {
    ViewPosition pos=mListPositions.get(i);
    final View child=getChildAt(i);
    if (mOrientation == VERTICAL || pos.position == row) {
      updateLeftPositionByGravity(pos,width - totalSize,mGravity);
    }
    if (mOrientation == HORIZONTAL && pos.position == row) {
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int size=maxChildHeight - child.getMeasuredHeight() - lp.topMargin- lp.bottomMargin;
      updateTopPositionByGravity(pos,size,lp.gravity);
    }
    if (mOrientation == VERTICAL)     layout(child,pos);
  }
}","/** 
 * Updates children positions. Takes cares about gravity and layout gravity. Finally layout children to parent if needed. Analog to vertical.
 * @param parentWidth parent parentWidth
 * @param totalSize total horizontal size used by children in a row
 * @param row row number
 * @param maxChildHeight the biggest child height
 */
private void updateChildPositionHorizontal(int parentWidth,int totalSize,int row,int maxChildHeight){
  for (int i=0; i < mListPositions.size(); i++) {
    ViewPosition pos=mListPositions.get(i);
    final View child=getChildAt(i);
    if (mOrientation == VERTICAL || pos.position == row) {
      updateLeftPositionByGravity(pos,parentWidth - totalSize,mGravity);
    }
    if (mOrientation == HORIZONTAL && pos.position == row) {
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int size=maxChildHeight - child.getMeasuredHeight() - lp.topMargin- lp.bottomMargin;
      updateTopPositionByGravity(pos,size,lp.gravity);
    }
    if (mOrientation == VERTICAL)     layout(child,pos);
  }
}"
10494,"/** 
 * Updates children positions. Takes cares about gravity and layout gravity. Finally layout children to parent if needed.
 * @param height parent height
 * @param totalSize total vertical size used by children in a column
 * @param column column number
 * @param maxChildWidth the biggest child width
 */
private void updateChildPositionVertical(int height,int totalSize,int column,int maxChildWidth){
  for (int i=0; i < mListPositions.size(); i++) {
    ViewPosition pos=mListPositions.get(i);
    final View child=getChildAt(i);
    if (mOrientation == HORIZONTAL || pos.position == column) {
      updateTopPositionByGravity(pos,height - totalSize,mGravity);
    }
    if (mOrientation == VERTICAL && pos.position == column) {
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int size=maxChildWidth - child.getMeasuredWidth() - lp.leftMargin- lp.rightMargin;
      updateLeftPositionByGravity(pos,size,lp.gravity);
    }
    if (mOrientation == HORIZONTAL)     layout(child,pos);
  }
}","/** 
 * Updates children positions. Takes cares about gravity and layout gravity. Finally layout children to parent if needed.
 * @param parentHeight parent parentHeight
 * @param totalSize total vertical size used by children in a column
 * @param column column number
 * @param maxChildWidth the biggest child width
 */
private void updateChildPositionVertical(int parentHeight,int totalSize,int column,int maxChildWidth){
  for (int i=0; i < mListPositions.size(); i++) {
    ViewPosition pos=mListPositions.get(i);
    final View child=getChildAt(i);
    if (mOrientation == HORIZONTAL || pos.position == column) {
      updateTopPositionByGravity(pos,parentHeight - totalSize,mGravity);
    }
    if (mOrientation == VERTICAL && pos.position == column) {
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int size=maxChildWidth - child.getMeasuredWidth() - lp.leftMargin- lp.rightMargin;
      updateLeftPositionByGravity(pos,size,lp.gravity);
    }
    if (mOrientation == HORIZONTAL)     layout(child,pos);
  }
}"
10495,"/** 
 * Arranges the children in rows. Takes care about child margin, padding, gravity and child layout gravity. Analog to vertical.
 * @param left parent left
 * @param top parent top
 * @param right parent right
 * @param bottom parent bottom
 */
void layoutHorizontal(int left,int top,int right,int bottom){
  final int count=getChildCount();
  if (count == 0)   return;
  final int width=right - getPaddingLeft() - left- getPaddingRight();
  final int height=bottom - getPaddingTop() - top- getPaddingBottom();
  int childTop=getPaddingTop();
  int childLeft=getPaddingLeft();
  int totalHorizontal=0;
  int totalVertical=getPaddingTop() + getPaddingBottom();
  int row=0;
  int maxChildHeight=0;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child != null && child.getVisibility() != View.GONE) {
      if (child.getMeasuredHeight() == 0 || child.getMeasuredWidth() == 0)       child.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST));
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      final int childWidth=child.getMeasuredWidth();
      final int childHeight=child.getMeasuredHeight();
      if (childLeft + childWidth + lp.leftMargin+ lp.rightMargin > width + getPaddingLeft()) {
        updateChildPositionHorizontal(width,totalHorizontal,row,maxChildHeight);
        childLeft=getPaddingLeft();
        childTop+=maxChildHeight;
        maxChildHeight=0;
        row++;
        totalHorizontal=0;
      }
      childLeft+=lp.leftMargin;
      mListPositions.add(new ViewPosition(childLeft,childTop,row));
      int currentHeight=childHeight + lp.topMargin + lp.bottomMargin;
      if (maxChildHeight < currentHeight)       maxChildHeight=currentHeight;
      childLeft+=childWidth + lp.rightMargin;
      totalHorizontal+=childWidth + lp.rightMargin + lp.leftMargin;
    }
  }
  updateChildPositionHorizontal(width,totalHorizontal,row,maxChildHeight);
  totalVertical+=childTop + maxChildHeight;
  updateChildPositionVertical(height,totalVertical,row,0);
}","/** 
 * Arranges the children in rows. Takes care about child margin, padding, gravity and child layout gravity. Analog to vertical.
 * @param left parent left
 * @param top parent top
 * @param right parent right
 * @param bottom parent bottom
 */
void layoutHorizontal(int left,int top,int right,int bottom){
  final int count=getChildCount();
  if (count == 0)   return;
  final int pWidth=right - getPaddingLeft() - left- getPaddingRight();
  final int pHeight=bottom - getPaddingTop() - top- getPaddingBottom();
  int childTop=getPaddingTop();
  int childLeft=getPaddingLeft();
  int totalHorizontal=0;
  int totalVertical=getPaddingTop() + getPaddingBottom();
  int row=0;
  int maxChildHeight=0;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child != null && child.getVisibility() != View.GONE) {
      if (child.getMeasuredHeight() == 0 || child.getMeasuredWidth() == 0)       child.measure(MeasureSpec.makeMeasureSpec(pWidth,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(pHeight,MeasureSpec.AT_MOST));
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      final int childWidth=child.getMeasuredWidth();
      final int childHeight=child.getMeasuredHeight();
      if (childLeft + childWidth + lp.leftMargin+ lp.rightMargin > pWidth + getPaddingLeft()) {
        updateChildPositionHorizontal(pWidth,totalHorizontal,row,maxChildHeight);
        childLeft=getPaddingLeft();
        childTop+=maxChildHeight;
        maxChildHeight=0;
        row++;
        totalHorizontal=0;
      }
      childLeft+=lp.leftMargin;
      mListPositions.add(new ViewPosition(childLeft,childTop,row));
      int currentHeight=childHeight + lp.topMargin + lp.bottomMargin;
      if (maxChildHeight < currentHeight)       maxChildHeight=currentHeight;
      childLeft+=childWidth + lp.rightMargin;
      totalHorizontal+=childWidth + lp.rightMargin + lp.leftMargin;
    }
  }
  updateChildPositionHorizontal(pWidth,totalHorizontal,row,maxChildHeight);
  totalVertical+=childTop + maxChildHeight;
  updateChildPositionVertical(pHeight,totalVertical,row,0);
}"
10496,"private void measureVertical(int widthMeasureSpec,int heightMeasureSpec){
  int hSize=MeasureSpec.getSize(heightMeasureSpec) - (getPaddingTop() + getPaddingBottom());
  int count=getChildCount();
  int columnHeight=0;
  int totalWidth=0, maxColumnHeight=0;
  int columnMaxWidth=0;
  int childWidth;
  int childHeight;
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=Integer.MAX_VALUE;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      columnMaxWidth=Math.max(columnMaxWidth,childWidth);
      if (childHeight + columnHeight > hSize) {
        totalWidth+=columnMaxWidth;
        maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
        columnHeight=childHeight;
        columnMaxWidth=childWidth;
      }
 else {
        columnHeight+=childHeight;
      }
    }
  }
  if (columnHeight != 0) {
    maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
    totalWidth+=columnMaxWidth;
  }
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=maxColumnHeight - (getPaddingTop() + getPaddingBottom());
  setMeasuredDimension(resolveSize(totalWidth + getPaddingRight() + getPaddingLeft(),widthMeasureSpec),resolveSize(hSize,heightMeasureSpec));
}","private void measureVertical(int widthMeasureSpec,int heightMeasureSpec){
  int hSize=MeasureSpec.getSize(heightMeasureSpec) - (getPaddingTop() + getPaddingBottom());
  int count=getChildCount();
  int columnHeight=0;
  int totalWidth=0, maxColumnHeight=0;
  int columnMaxWidth=0;
  int childWidth;
  int childHeight;
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=Integer.MAX_VALUE;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      columnMaxWidth=Math.max(columnMaxWidth,childWidth);
      if (childHeight + columnHeight > hSize) {
        totalWidth+=columnMaxWidth;
        maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
        columnHeight=childHeight;
        columnMaxWidth=childWidth;
      }
 else {
        columnHeight+=childHeight;
      }
    }
  }
  if (columnHeight != 0) {
    maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
    totalWidth+=columnMaxWidth;
  }
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=maxColumnHeight + (getPaddingTop() + getPaddingBottom());
  setMeasuredDimension(resolveSize(totalWidth + getPaddingRight() + getPaddingLeft(),widthMeasureSpec),resolveSize(hSize,heightMeasureSpec));
}"
10497,"private void measureHorizontal(int widthMeasureSpec,int heightMeasureSpec){
  int wSize=MeasureSpec.getSize(widthMeasureSpec) - (getPaddingLeft() + getPaddingRight());
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=Integer.MAX_VALUE;
  int count=getChildCount();
  int rowWidth=0;
  int totalHeight=0;
  int rowMaxHeight=0;
  int childWidth;
  int childHeight;
  int maxRowHeight=getPaddingTop() + getPaddingBottom();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      rowMaxHeight=Math.max(rowMaxHeight,childHeight);
      if (childWidth + rowWidth > wSize) {
        totalHeight+=rowMaxHeight;
        maxRowHeight=Math.max(maxRowHeight,rowWidth);
        rowWidth=childWidth;
        rowMaxHeight=childHeight;
      }
 else {
        rowWidth+=childWidth;
      }
    }
  }
  if (rowWidth != 0) {
    maxRowHeight=Math.max(maxRowHeight,rowWidth);
    totalHeight+=rowMaxHeight;
  }
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=maxRowHeight - (getPaddingLeft() + getPaddingRight());
  setMeasuredDimension(resolveSize(wSize,widthMeasureSpec),resolveSize(totalHeight + getPaddingTop() + getPaddingBottom(),heightMeasureSpec));
}","private void measureHorizontal(int widthMeasureSpec,int heightMeasureSpec){
  int wSize=MeasureSpec.getSize(widthMeasureSpec) - (getPaddingLeft() + getPaddingRight());
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=Integer.MAX_VALUE;
  int count=getChildCount();
  int rowWidth=0;
  int totalHeight=0;
  int rowMaxHeight=0;
  int childWidth;
  int childHeight;
  int maxRowWidth=getPaddingLeft() + getPaddingRight();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      rowMaxHeight=Math.max(rowMaxHeight,childHeight);
      if (childWidth + rowWidth > wSize) {
        totalHeight+=rowMaxHeight;
        maxRowWidth=Math.max(maxRowWidth,rowWidth);
        rowWidth=childWidth;
        rowMaxHeight=childHeight;
      }
 else {
        rowWidth+=childWidth;
      }
    }
  }
  if (rowWidth != 0) {
    maxRowWidth=Math.max(maxRowWidth,rowWidth);
    totalHeight+=rowMaxHeight;
  }
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=maxRowWidth + (getPaddingLeft() + getPaddingRight());
  setMeasuredDimension(resolveSize(wSize,widthMeasureSpec),resolveSize(totalHeight + getPaddingTop() + getPaddingBottom(),heightMeasureSpec));
}"
10498,"/** 
 * Updates children positions. Takes cares about gravity and layout gravity. Finally layout children to parent if needed. Analog to vertical.
 * @param width parent width
 * @param totalSize total horizontal size used by children in a row
 * @param row row number
 * @param maxChildHeight the biggest child height
 */
private void updateChildPositionHorizontal(int width,int totalSize,int row,int maxChildHeight){
  for (int i=0; i < mListPositions.size(); i++) {
    ViewPosition pos=mListPositions.get(i);
    final View child=getChildAt(i);
    if (mOrientation == VERTICAL || pos.position == row) {
      updateLeftPositionByGravity(pos,width - totalSize,mGravity);
    }
    if (mOrientation == HORIZONTAL && pos.position == row) {
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int size=maxChildHeight - child.getMeasuredHeight() - lp.topMargin- lp.bottomMargin;
      updateTopPositionByGravity(pos,size,lp.gravity);
    }
    if (mOrientation == VERTICAL)     layout(child,pos);
  }
}","/** 
 * Updates children positions. Takes cares about gravity and layout gravity. Finally layout children to parent if needed. Analog to vertical.
 * @param parentWidth parent parentWidth
 * @param totalSize total horizontal size used by children in a row
 * @param row row number
 * @param maxChildHeight the biggest child height
 */
private void updateChildPositionHorizontal(int parentWidth,int totalSize,int row,int maxChildHeight){
  for (int i=0; i < mListPositions.size(); i++) {
    ViewPosition pos=mListPositions.get(i);
    final View child=getChildAt(i);
    if (mOrientation == VERTICAL || pos.position == row) {
      updateLeftPositionByGravity(pos,parentWidth - totalSize,mGravity);
    }
    if (mOrientation == HORIZONTAL && pos.position == row) {
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int size=maxChildHeight - child.getMeasuredHeight() - lp.topMargin- lp.bottomMargin;
      updateTopPositionByGravity(pos,size,lp.gravity);
    }
    if (mOrientation == VERTICAL)     layout(child,pos);
  }
}"
10499,"/** 
 * Updates children positions. Takes cares about gravity and layout gravity. Finally layout children to parent if needed.
 * @param height parent height
 * @param totalSize total vertical size used by children in a column
 * @param column column number
 * @param maxChildWidth the biggest child width
 */
private void updateChildPositionVertical(int height,int totalSize,int column,int maxChildWidth){
  for (int i=0; i < mListPositions.size(); i++) {
    ViewPosition pos=mListPositions.get(i);
    final View child=getChildAt(i);
    if (mOrientation == HORIZONTAL || pos.position == column) {
      updateTopPositionByGravity(pos,height - totalSize,mGravity);
    }
    if (mOrientation == VERTICAL && pos.position == column) {
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int size=maxChildWidth - child.getMeasuredWidth() - lp.leftMargin- lp.rightMargin;
      updateLeftPositionByGravity(pos,size,lp.gravity);
    }
    if (mOrientation == HORIZONTAL)     layout(child,pos);
  }
}","/** 
 * Updates children positions. Takes cares about gravity and layout gravity. Finally layout children to parent if needed.
 * @param parentHeight parent parentHeight
 * @param totalSize total vertical size used by children in a column
 * @param column column number
 * @param maxChildWidth the biggest child width
 */
private void updateChildPositionVertical(int parentHeight,int totalSize,int column,int maxChildWidth){
  for (int i=0; i < mListPositions.size(); i++) {
    ViewPosition pos=mListPositions.get(i);
    final View child=getChildAt(i);
    if (mOrientation == HORIZONTAL || pos.position == column) {
      updateTopPositionByGravity(pos,parentHeight - totalSize,mGravity);
    }
    if (mOrientation == VERTICAL && pos.position == column) {
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int size=maxChildWidth - child.getMeasuredWidth() - lp.leftMargin- lp.rightMargin;
      updateLeftPositionByGravity(pos,size,lp.gravity);
    }
    if (mOrientation == HORIZONTAL)     layout(child,pos);
  }
}"
10500,"private void measureVertical(int widthMeasureSpec,int heightMeasureSpec){
  int hSize=MeasureSpec.getSize(heightMeasureSpec) - (getPaddingTop() + getPaddingBottom());
  int count=getChildCount();
  int columnHeight=0;
  int totalWidth=0, maxColumnHeight=0;
  int columnMaxWidth=0;
  int childWidth;
  int childHeight;
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=Integer.MAX_VALUE;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      columnMaxWidth=Math.max(columnMaxWidth,childWidth);
      if (childHeight + columnHeight > hSize) {
        totalWidth+=columnMaxWidth;
        maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
        columnHeight=childHeight;
        columnMaxWidth=childWidth;
      }
 else {
        columnHeight+=childHeight;
      }
    }
  }
  if (columnHeight != 0) {
    maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
    totalWidth+=columnMaxWidth;
  }
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=maxColumnHeight - (getPaddingTop() + getPaddingBottom());
  setMeasuredDimension(resolveSize(totalWidth + getPaddingRight() + getPaddingLeft(),widthMeasureSpec),resolveSize(hSize,heightMeasureSpec));
}","private void measureVertical(int widthMeasureSpec,int heightMeasureSpec){
  int hSize=MeasureSpec.getSize(heightMeasureSpec) - (getPaddingTop() + getPaddingBottom());
  int count=getChildCount();
  int columnHeight=0;
  int totalWidth=0, maxColumnHeight=0;
  int columnMaxWidth=0;
  int childWidth;
  int childHeight;
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=Integer.MAX_VALUE;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      columnMaxWidth=Math.max(columnMaxWidth,childWidth);
      if (childHeight + columnHeight > hSize) {
        totalWidth+=columnMaxWidth;
        maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
        columnHeight=childHeight;
        columnMaxWidth=childWidth;
      }
 else {
        columnHeight+=childHeight;
      }
    }
  }
  if (columnHeight != 0) {
    maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
    totalWidth+=columnMaxWidth;
  }
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=maxColumnHeight + (getPaddingTop() + getPaddingBottom());
  setMeasuredDimension(resolveSize(totalWidth + getPaddingRight() + getPaddingLeft(),widthMeasureSpec),resolveSize(hSize,heightMeasureSpec));
}"
10501,"private void measureHorizontal(int widthMeasureSpec,int heightMeasureSpec){
  int wSize=MeasureSpec.getSize(widthMeasureSpec) - (getPaddingLeft() + getPaddingRight());
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=Integer.MAX_VALUE;
  int count=getChildCount();
  int rowWidth=0;
  int totalHeight=0;
  int rowMaxHeight=0;
  int childWidth;
  int childHeight;
  int maxRowHeight=getPaddingTop() + getPaddingBottom();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      rowMaxHeight=Math.max(rowMaxHeight,childHeight);
      if (childWidth + rowWidth > wSize) {
        totalHeight+=rowMaxHeight;
        maxRowHeight=Math.max(maxRowHeight,rowWidth);
        rowWidth=childWidth;
        rowMaxHeight=childHeight;
      }
 else {
        rowWidth+=childWidth;
      }
    }
  }
  if (rowWidth != 0) {
    maxRowHeight=Math.max(maxRowHeight,rowWidth);
    totalHeight+=rowMaxHeight;
  }
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=maxRowHeight - (getPaddingLeft() + getPaddingRight());
  setMeasuredDimension(resolveSize(wSize,widthMeasureSpec),resolveSize(totalHeight + getPaddingTop() + getPaddingBottom(),heightMeasureSpec));
}","private void measureHorizontal(int widthMeasureSpec,int heightMeasureSpec){
  int wSize=MeasureSpec.getSize(widthMeasureSpec) - (getPaddingLeft() + getPaddingRight());
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=Integer.MAX_VALUE;
  int count=getChildCount();
  int rowWidth=0;
  int totalHeight=0;
  int rowMaxHeight=0;
  int childWidth;
  int childHeight;
  int maxRowWidth=getPaddingLeft() + getPaddingRight();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      rowMaxHeight=Math.max(rowMaxHeight,childHeight);
      if (childWidth + rowWidth > wSize) {
        totalHeight+=rowMaxHeight;
        maxRowWidth=Math.max(maxRowWidth,rowWidth);
        rowWidth=childWidth;
        rowMaxHeight=childHeight;
      }
 else {
        rowWidth+=childWidth;
      }
    }
  }
  if (rowWidth != 0) {
    maxRowWidth=Math.max(maxRowWidth,rowWidth);
    totalHeight+=rowMaxHeight;
  }
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=maxRowWidth + (getPaddingLeft() + getPaddingRight());
  setMeasuredDimension(resolveSize(wSize,widthMeasureSpec),resolveSize(totalHeight + getPaddingTop() + getPaddingBottom(),heightMeasureSpec));
}"
10502,"/** 
 * Arranges the children in rows. Takes care about child margin, padding, gravity and child layout gravity. Analog to vertical.
 * @param left parent left
 * @param top parent top
 * @param right parent right
 * @param bottom parent bottom
 */
void layoutHorizontal(int left,int top,int right,int bottom){
  final int count=getChildCount();
  if (count == 0)   return;
  final int width=right - getPaddingLeft() - left- getPaddingRight();
  final int height=bottom - getPaddingTop() - top- getPaddingBottom();
  int childTop=getPaddingTop();
  int childLeft=getPaddingLeft();
  int totalHorizontal=0;
  int totalVertical=getPaddingTop() + getPaddingBottom();
  int row=0;
  int maxChildHeight=0;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child != null && child.getVisibility() != View.GONE) {
      if (child.getMeasuredHeight() == 0 || child.getMeasuredWidth() == 0)       child.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST));
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      final int childWidth=child.getMeasuredWidth();
      final int childHeight=child.getMeasuredHeight();
      if (childLeft + childWidth + lp.leftMargin+ lp.rightMargin > width + getPaddingLeft()) {
        updateChildPositionHorizontal(width,totalHorizontal,row,maxChildHeight);
        childLeft=getPaddingLeft();
        childTop+=maxChildHeight;
        maxChildHeight=0;
        row++;
        totalHorizontal=0;
      }
      childLeft+=lp.leftMargin;
      mListPositions.add(new ViewPosition(childLeft,childTop,row));
      int currentHeight=childHeight + lp.topMargin + lp.bottomMargin;
      if (maxChildHeight < currentHeight)       maxChildHeight=currentHeight;
      childLeft+=childWidth + lp.rightMargin;
      totalHorizontal+=childWidth + lp.rightMargin + lp.leftMargin;
    }
  }
  updateChildPositionHorizontal(width,totalHorizontal,row,maxChildHeight);
  totalVertical+=childTop + maxChildHeight;
  updateChildPositionVertical(height,totalVertical,row,0);
}","/** 
 * Arranges the children in rows. Takes care about child margin, padding, gravity and child layout gravity. Analog to vertical.
 * @param left parent left
 * @param top parent top
 * @param right parent right
 * @param bottom parent bottom
 */
void layoutHorizontal(int left,int top,int right,int bottom){
  final int count=getChildCount();
  if (count == 0)   return;
  final int pWidth=right - getPaddingLeft() - left- getPaddingRight();
  final int pHeight=bottom - getPaddingTop() - top- getPaddingBottom();
  int childTop=getPaddingTop();
  int childLeft=getPaddingLeft();
  int totalHorizontal=0;
  int totalVertical=getPaddingTop() + getPaddingBottom();
  int row=0;
  int maxChildHeight=0;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child != null && child.getVisibility() != View.GONE) {
      if (child.getMeasuredHeight() == 0 || child.getMeasuredWidth() == 0)       child.measure(MeasureSpec.makeMeasureSpec(pWidth,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(pHeight,MeasureSpec.AT_MOST));
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      final int childWidth=child.getMeasuredWidth();
      final int childHeight=child.getMeasuredHeight();
      if (childLeft + childWidth + lp.leftMargin+ lp.rightMargin > pWidth + getPaddingLeft()) {
        updateChildPositionHorizontal(pWidth,totalHorizontal,row,maxChildHeight);
        childLeft=getPaddingLeft();
        childTop+=maxChildHeight;
        maxChildHeight=0;
        row++;
        totalHorizontal=0;
      }
      childLeft+=lp.leftMargin;
      mListPositions.add(new ViewPosition(childLeft,childTop,row));
      int currentHeight=childHeight + lp.topMargin + lp.bottomMargin;
      if (maxChildHeight < currentHeight)       maxChildHeight=currentHeight;
      childLeft+=childWidth + lp.rightMargin;
      totalHorizontal+=childWidth + lp.rightMargin + lp.leftMargin;
    }
  }
  updateChildPositionHorizontal(pWidth,totalHorizontal,row,maxChildHeight);
  totalVertical+=childTop + maxChildHeight;
  updateChildPositionVertical(pHeight,totalVertical,row,0);
}"
10503,"/** 
 * Updates children positions. Takes cares about gravity and layout gravity. Finally layout children to parent if needed. Analog to vertical.
 * @param width parent width
 * @param totalSize total horizontal size used by children in a row
 * @param row row number
 * @param maxChildHeight the biggest child height
 */
private void updateChildPositionHorizontal(int width,int totalSize,int row,int maxChildHeight){
  for (int i=0; i < mListPositions.size(); i++) {
    ViewPosition pos=mListPositions.get(i);
    final View child=getChildAt(i);
    if (mOrientation == VERTICAL || pos.position == row) {
      updateLeftPositionByGravity(pos,width - totalSize,mGravity);
    }
    if (mOrientation == HORIZONTAL && pos.position == row) {
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int size=maxChildHeight - child.getMeasuredHeight() - lp.topMargin- lp.bottomMargin;
      updateTopPositionByGravity(pos,size,lp.gravity);
    }
    if (mOrientation == VERTICAL)     layout(child,pos);
  }
}","/** 
 * Updates children positions. Takes cares about gravity and layout gravity. Finally layout children to parent if needed. Analog to vertical.
 * @param parentWidth parent parentWidth
 * @param totalSize total horizontal size used by children in a row
 * @param row row number
 * @param maxChildHeight the biggest child height
 */
private void updateChildPositionHorizontal(int parentWidth,int totalSize,int row,int maxChildHeight){
  for (int i=0; i < mListPositions.size(); i++) {
    ViewPosition pos=mListPositions.get(i);
    final View child=getChildAt(i);
    if (mOrientation == VERTICAL || pos.position == row) {
      updateLeftPositionByGravity(pos,parentWidth - totalSize,mGravity);
    }
    if (mOrientation == HORIZONTAL && pos.position == row) {
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int size=maxChildHeight - child.getMeasuredHeight() - lp.topMargin- lp.bottomMargin;
      updateTopPositionByGravity(pos,size,lp.gravity);
    }
    if (mOrientation == VERTICAL)     layout(child,pos);
  }
}"
10504,"/** 
 * Updates children positions. Takes cares about gravity and layout gravity. Finally layout children to parent if needed.
 * @param height parent height
 * @param totalSize total vertical size used by children in a column
 * @param column column number
 * @param maxChildWidth the biggest child width
 */
private void updateChildPositionVertical(int height,int totalSize,int column,int maxChildWidth){
  for (int i=0; i < mListPositions.size(); i++) {
    ViewPosition pos=mListPositions.get(i);
    final View child=getChildAt(i);
    if (mOrientation == HORIZONTAL || pos.position == column) {
      updateTopPositionByGravity(pos,height - totalSize,mGravity);
    }
    if (mOrientation == VERTICAL && pos.position == column) {
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int size=maxChildWidth - child.getMeasuredWidth() - lp.leftMargin- lp.rightMargin;
      updateLeftPositionByGravity(pos,size,lp.gravity);
    }
    if (mOrientation == HORIZONTAL)     layout(child,pos);
  }
}","/** 
 * Updates children positions. Takes cares about gravity and layout gravity. Finally layout children to parent if needed.
 * @param parentHeight parent parentHeight
 * @param totalSize total vertical size used by children in a column
 * @param column column number
 * @param maxChildWidth the biggest child width
 */
private void updateChildPositionVertical(int parentHeight,int totalSize,int column,int maxChildWidth){
  for (int i=0; i < mListPositions.size(); i++) {
    ViewPosition pos=mListPositions.get(i);
    final View child=getChildAt(i);
    if (mOrientation == HORIZONTAL || pos.position == column) {
      updateTopPositionByGravity(pos,parentHeight - totalSize,mGravity);
    }
    if (mOrientation == VERTICAL && pos.position == column) {
      LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int size=maxChildWidth - child.getMeasuredWidth() - lp.leftMargin- lp.rightMargin;
      updateLeftPositionByGravity(pos,size,lp.gravity);
    }
    if (mOrientation == HORIZONTAL)     layout(child,pos);
  }
}"
10505,"private void measureVertical(int widthMeasureSpec,int heightMeasureSpec){
  int hSize=MeasureSpec.getSize(heightMeasureSpec) - (getPaddingTop() + getPaddingBottom());
  int count=getChildCount();
  int columnHeight=0;
  int totalWidth=0, maxColumnHeight=0;
  int columnMaxWidth=0;
  int childHeight;
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=Integer.MAX_VALUE;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      columnMaxWidth=Math.max(columnMaxWidth,child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);
      if (childHeight + columnHeight > hSize) {
        totalWidth+=columnMaxWidth;
        maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
        columnHeight=childHeight;
        columnMaxWidth=0;
      }
 else {
        columnHeight+=childHeight;
      }
    }
  }
  if (columnHeight != 0) {
    maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
    totalWidth+=columnMaxWidth;
  }
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=maxColumnHeight - (getPaddingTop() + getPaddingBottom());
  setMeasuredDimension(resolveSize(totalWidth + getPaddingRight() + getPaddingLeft(),widthMeasureSpec),resolveSize(hSize,heightMeasureSpec));
}","private void measureVertical(int widthMeasureSpec,int heightMeasureSpec){
  int hSize=MeasureSpec.getSize(heightMeasureSpec) - (getPaddingTop() + getPaddingBottom());
  int count=getChildCount();
  int columnHeight=0;
  int totalWidth=0, maxColumnHeight=0;
  int columnMaxWidth=0;
  int childWidth;
  int childHeight;
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=Integer.MAX_VALUE;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      columnMaxWidth=Math.max(columnMaxWidth,childWidth);
      if (childHeight + columnHeight > hSize) {
        totalWidth+=columnMaxWidth;
        maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
        columnHeight=childHeight;
        columnMaxWidth=childWidth;
      }
 else {
        columnHeight+=childHeight;
      }
    }
  }
  if (columnHeight != 0) {
    maxColumnHeight=Math.max(maxColumnHeight,columnHeight);
    totalWidth+=columnMaxWidth;
  }
  if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED)   hSize=maxColumnHeight - (getPaddingTop() + getPaddingBottom());
  setMeasuredDimension(resolveSize(totalWidth + getPaddingRight() + getPaddingLeft(),widthMeasureSpec),resolveSize(hSize,heightMeasureSpec));
}"
10506,"private void measureHorizontal(int widthMeasureSpec,int heightMeasureSpec){
  int wSize=MeasureSpec.getSize(widthMeasureSpec) - (getPaddingLeft() + getPaddingRight());
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=Integer.MAX_VALUE;
  int count=getChildCount();
  int rowWidth=0;
  int totalHeight=0;
  int rowMaxHeight=0;
  int childWidth;
  int maxRowHeight=getPaddingTop() + getPaddingBottom();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      rowMaxHeight=Math.max(rowMaxHeight,child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);
      if (childWidth + rowWidth > wSize) {
        totalHeight+=rowMaxHeight;
        maxRowHeight=Math.max(maxRowHeight,rowWidth);
        rowWidth=childWidth;
        rowMaxHeight=0;
      }
 else {
        rowWidth+=childWidth;
      }
    }
  }
  if (rowWidth != 0) {
    maxRowHeight=Math.max(maxRowHeight,rowWidth);
    totalHeight+=rowMaxHeight;
  }
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=maxRowHeight - (getPaddingLeft() + getPaddingRight());
  setMeasuredDimension(resolveSize(wSize,widthMeasureSpec),resolveSize(totalHeight + getPaddingTop() + getPaddingBottom(),heightMeasureSpec));
}","private void measureHorizontal(int widthMeasureSpec,int heightMeasureSpec){
  int wSize=MeasureSpec.getSize(widthMeasureSpec) - (getPaddingLeft() + getPaddingRight());
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=Integer.MAX_VALUE;
  int count=getChildCount();
  int rowWidth=0;
  int totalHeight=0;
  int rowMaxHeight=0;
  int childWidth;
  int childHeight;
  int maxRowHeight=getPaddingTop() + getPaddingBottom();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
      childHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
      rowMaxHeight=Math.max(rowMaxHeight,childHeight);
      if (childWidth + rowWidth > wSize) {
        totalHeight+=rowMaxHeight;
        maxRowHeight=Math.max(maxRowHeight,rowWidth);
        rowWidth=childWidth;
        rowMaxHeight=childHeight;
      }
 else {
        rowWidth+=childWidth;
      }
    }
  }
  if (rowWidth != 0) {
    maxRowHeight=Math.max(maxRowHeight,rowWidth);
    totalHeight+=rowMaxHeight;
  }
  if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED)   wSize=maxRowHeight - (getPaddingLeft() + getPaddingRight());
  setMeasuredDimension(resolveSize(wSize,widthMeasureSpec),resolveSize(totalHeight + getPaddingTop() + getPaddingBottom(),heightMeasureSpec));
}"
10507,"@Test public void testTheCoreWithoutNettyBufferStack(){
  System.setProperty(""String_Node_Str"",new VersionCommand().getVersion());
  Stack stack=Stack.fromDescriptor(new File(""String_Node_Str""));
  StackResolution resolution=new StackResolution(stack,root,new StackResolutionOptions().setFailOnConflicts(true));
  Map<String,File> resolved=resolution.resolve();
  assertThat(resolved).isNotEmpty().doesNotContainKey(""String_Node_Str"");
}","@Test public void testTheCoreWithoutNettyBufferStack(){
  Stack stack=Stack.fromDescriptor(new File(""String_Node_Str""));
  StackResolution resolution=new StackResolution(stack,root,new StackResolutionOptions().setFailOnConflicts(true));
  Map<String,File> resolved=resolution.resolve();
  assertThat(resolved).isNotEmpty().doesNotContainKey(""String_Node_Str"");
}"
10508,"@Before public void setUp(){
  FileUtils.delete(root);
}","@Before public void setUp(){
  FileUtils.delete(root);
  vertxVersion=new VersionCommand().getVersion();
  assertThat(vertxVersion).isNotEmpty();
  System.setProperty(""String_Node_Str"",vertxVersion);
}"
10509,"/** 
 * This tests checks that all our dependencies converge to the same version.
 */
@Test public void testConvergence(){
  System.setProperty(""String_Node_Str"",new VersionCommand().getVersion());
  Stack stack=Stack.fromDescriptor(new File(""String_Node_Str""));
  StackResolution resolution=new StackResolution(stack,root,new StackResolutionOptions().setFailOnConflicts(true));
  Map<String,File> resolved=resolution.resolve();
  assertThat(resolved).isNotEmpty();
}","/** 
 * This tests checks that all our dependencies converge to the same version.
 */
@Test public void testConvergence(){
  Stack stack=Stack.fromDescriptor(new File(""String_Node_Str""));
  StackResolution resolution=new StackResolution(stack,root,new StackResolutionOptions().setFailOnConflicts(true));
  Map<String,File> resolved=resolution.resolve();
  assertThat(resolved).isNotEmpty();
}"
10510,"@Test public void testTheResolutionOfTheWebStack(){
  System.setProperty(""String_Node_Str"",new VersionCommand().getVersion());
  Stack stack=Stack.fromDescriptor(new File(""String_Node_Str""));
  StackResolution resolution=new StackResolution(stack,root,new StackResolutionOptions().setFailOnConflicts(true));
  Map<String,File> resolved=resolution.resolve();
  assertThat(resolved).isNotEmpty();
}","@Test public void testTheResolutionOfTheWebStack(){
  Stack stack=Stack.fromDescriptor(new File(""String_Node_Str""));
  StackResolution resolution=new StackResolution(stack,root,new StackResolutionOptions().setFailOnConflicts(true));
  Map<String,File> resolved=resolution.resolve();
  assertThat(resolved).isNotEmpty();
}"
10511,"/** 
 * Process data with Sequitur. Populate and broadcast ChartData object.
 * @param algorithm the algorithm, 0 Sequitur, 1 RE-PAIR.
 * @param useSlidingWindow The use sliding window parameter.
 * @param numerosityReductionStrategy The numerosity reduction strategy.
 * @param windowSize The SAX sliding window size.
 * @param paaSize The SAX PAA size.
 * @param alphabetSize The SAX alphabet size.
 * @param normalizationThreshold The normalization threshold.
 * @param grammarOutputFileName The file name to where save the grammar.
 * @throws IOException
 */
public synchronized void processData(GIAlgorithm algorithm,boolean useSlidingWindow,NumerosityReductionStrategy numerosityReductionStrategy,int windowSize,int paaSize,int alphabetSize,double normalizationThreshold,String grammarOutputFileName) throws IOException {
  if (null == this.ts || this.ts.length == 0) {
    this.log(""String_Node_Str"");
  }
 else {
    StringBuffer sb=new StringBuffer(""String_Node_Str"");
    if (GIAlgorithm.SEQUITUR.equals(algorithm)) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"").append(useSlidingWindow);
    sb.append(""String_Node_Str"").append(numerosityReductionStrategy.toString());
    sb.append(""String_Node_Str"").append(windowSize);
    sb.append(""String_Node_Str"").append(paaSize);
    sb.append(""String_Node_Str"").append(alphabetSize);
    LOGGER.info(sb.toString());
    this.log(sb.toString());
    LOGGER.debug(""String_Node_Str"");
    this.chartData=new GrammarVizChartData(this.dataFileName,this.ts,useSlidingWindow,numerosityReductionStrategy,windowSize,paaSize,alphabetSize,normalizationThreshold);
    NormalAlphabet na=new NormalAlphabet();
    try {
      if (GIAlgorithm.SEQUITUR.equals(algorithm)) {
        SAXProcessor sp=new SAXProcessor();
        SAXRecords saxFrequencyData=new SAXRecords();
        if (useSlidingWindow) {
          saxFrequencyData=sp.ts2saxViaWindow(ts,windowSize,paaSize,na.getCuts(alphabetSize),numerosityReductionStrategy,normalizationThreshold);
        }
 else {
          saxFrequencyData=sp.ts2saxByChunking(ts,paaSize,na.getCuts(alphabetSize),normalizationThreshold);
        }
        LOGGER.trace(""String_Node_Str"" + saxFrequencyData.getSAXString(SPACE));
        LOGGER.debug(""String_Node_Str"");
        SAXRule sequiturGrammar=SequiturFactory.runSequitur(saxFrequencyData.getSAXString(SPACE));
        LOGGER.debug(""String_Node_Str"");
        GrammarRules rules=sequiturGrammar.toGrammarRulesData();
        LOGGER.debug(""String_Node_Str"");
        SequiturFactory.updateRuleIntervals(rules,saxFrequencyData,useSlidingWindow,this.ts,windowSize,paaSize);
        LOGGER.debug(""String_Node_Str"");
        this.chartData.setGrammarRules(rules);
      }
 else {
        ParallelSAXImplementation ps=new ParallelSAXImplementation();
        SAXRecords parallelRes=ps.process(ts,2,windowSize,paaSize,alphabetSize,numerosityReductionStrategy,normalizationThreshold);
        RePairGrammar rePairGrammar=RePairFactory.buildGrammar(parallelRes);
        rePairGrammar.expandRules();
        rePairGrammar.buildIntervals(parallelRes,ts,windowSize);
        GrammarRules rules=rePairGrammar.toGrammarRulesData();
        this.chartData.setGrammarRules(rules);
      }
    }
 catch (    Exception e) {
      this.log(""String_Node_Str"" + StackTrace.toString(e));
      e.printStackTrace();
    }
    this.log(""String_Node_Str"");
    LOGGER.info(""String_Node_Str"");
    setChanged();
    notifyObservers(new GrammarVizMessage(GrammarVizMessage.CHART_MESSAGE,this.chartData));
  }
}","/** 
 * Process data with GI algorithm. Instantiate, populate, and broadcast the ChartData object.
 * @param algorithm the algorithm, 0 Sequitur, 1 RE-PAIR.
 * @param useSlidingWindow The use sliding window parameter.
 * @param numerosityReductionStrategy The numerosity reduction strategy.
 * @param windowSize The SAX sliding window size.
 * @param paaSize The SAX PAA size.
 * @param alphabetSize The SAX alphabet size.
 * @param normalizationThreshold The normalization threshold.
 * @param grammarOutputFileName The file name to where save the grammar.
 * @throws IOException
 */
public synchronized void processData(GIAlgorithm algorithm,boolean useSlidingWindow,NumerosityReductionStrategy numerosityReductionStrategy,int windowSize,int paaSize,int alphabetSize,double normalizationThreshold,String grammarOutputFileName) throws IOException {
  if (null == this.ts || this.ts.length == 0) {
    this.log(""String_Node_Str"");
  }
 else {
    StringBuffer sb=new StringBuffer(""String_Node_Str"");
    if (GIAlgorithm.SEQUITUR.equals(algorithm)) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"").append(useSlidingWindow);
    sb.append(""String_Node_Str"").append(numerosityReductionStrategy.toString());
    sb.append(""String_Node_Str"").append(windowSize);
    sb.append(""String_Node_Str"").append(paaSize);
    sb.append(""String_Node_Str"").append(alphabetSize);
    LOGGER.info(sb.toString());
    this.log(sb.toString());
    LOGGER.debug(""String_Node_Str"");
    this.chartData=new GrammarVizChartData(this.dataFileName,this.ts,useSlidingWindow,numerosityReductionStrategy,windowSize,paaSize,alphabetSize,normalizationThreshold);
    NormalAlphabet na=new NormalAlphabet();
    try {
      if (GIAlgorithm.SEQUITUR.equals(algorithm)) {
        SAXProcessor sp=new SAXProcessor();
        SAXRecords saxFrequencyData=new SAXRecords();
        if (useSlidingWindow) {
          saxFrequencyData=sp.ts2saxViaWindow(ts,windowSize,paaSize,na.getCuts(alphabetSize),numerosityReductionStrategy,normalizationThreshold);
        }
 else {
          saxFrequencyData=sp.ts2saxByChunking(ts,paaSize,na.getCuts(alphabetSize),normalizationThreshold);
        }
        LOGGER.trace(""String_Node_Str"" + saxFrequencyData.getSAXString(SPACE));
        LOGGER.debug(""String_Node_Str"");
        SAXRule sequiturGrammar=SequiturFactory.runSequitur(saxFrequencyData.getSAXString(SPACE));
        LOGGER.debug(""String_Node_Str"");
        GrammarRules rules=sequiturGrammar.toGrammarRulesData();
        LOGGER.debug(""String_Node_Str"");
        SequiturFactory.updateRuleIntervals(rules,saxFrequencyData,useSlidingWindow,this.ts,windowSize,paaSize);
        LOGGER.debug(""String_Node_Str"");
        this.chartData.setGrammarRules(rules);
      }
 else {
        ParallelSAXImplementation ps=new ParallelSAXImplementation();
        SAXRecords parallelRes=ps.process(ts,2,windowSize,paaSize,alphabetSize,numerosityReductionStrategy,normalizationThreshold);
        RePairGrammar rePairGrammar=RePairFactory.buildGrammar(parallelRes);
        rePairGrammar.expandRules();
        rePairGrammar.buildIntervals(parallelRes,ts,windowSize);
        GrammarRules rules=rePairGrammar.toGrammarRulesData();
        this.chartData.setGrammarRules(rules);
      }
    }
 catch (    Exception e) {
      this.log(""String_Node_Str"" + StackTrace.toString(e));
      e.printStackTrace();
    }
    this.log(""String_Node_Str"");
    LOGGER.info(""String_Node_Str"");
    setChanged();
    notifyObservers(new GrammarVizMessage(GrammarVizMessage.CHART_MESSAGE,this.chartData));
  }
}"
10512,"/** 
 * Shortcut to disable all buttons.
 */
private void disableAllButtons(){
  this.selectFileButton.setEnabled(false);
  this.dataLoadButton.setEnabled(false);
  this.guessParametersButton.setEnabled(false);
  this.discretizeButton.setEnabled(false);
  this.findAnomaliesButton.setEnabled(false);
  this.displayChartButton.setEnabled(false);
  this.clusterRulesButton.setEnabled(false);
  this.rankRulesButton.setEnabled(false);
  this.displayRulesDensityButton.setEnabled(false);
  this.displayRulesLenHistogramButton.setEnabled(false);
  this.saveChartButton.setEnabled(false);
}","/** 
 * Shortcut to disable all buttons.
 */
private void disableAllButtons(){
  this.selectFileButton.setEnabled(true);
  this.dataLoadButton.setEnabled(false);
  this.guessParametersButton.setEnabled(false);
  this.discretizeButton.setEnabled(false);
  this.findAnomaliesButton.setEnabled(false);
  this.displayChartButton.setEnabled(false);
  this.clusterRulesButton.setEnabled(false);
  this.rankRulesButton.setEnabled(false);
  this.displayRulesDensityButton.setEnabled(false);
  this.displayRulesLenHistogramButton.setEnabled(false);
  this.saveChartButton.setEnabled(false);
}"
10513,"public void bindToTheFrameSize(){
  this.getTopLevelAncestor().addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      if (null != chartPanel) {
        System.err.println(""String_Node_Str"");
        chartPanel.setMaximumDrawHeight(e.getComponent().getHeight());
        chartPanel.setMaximumDrawWidth(e.getComponent().getWidth());
        chartPanel.setMinimumDrawWidth(0);
        chartPanel.setMinimumDrawHeight(0);
        chartPanel.revalidate();
      }
    }
  }
);
}","public void bindToTheFrameSize(){
  this.getTopLevelAncestor().addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      if (null != chartPanel) {
        chartPanel.setMaximumDrawHeight(e.getComponent().getHeight());
        chartPanel.setMaximumDrawWidth(e.getComponent().getWidth());
        chartPanel.setMinimumDrawWidth(0);
        chartPanel.setMinimumDrawHeight(0);
        chartPanel.revalidate();
      }
    }
  }
);
}"
10514,"/** 
 * Puts rules density on show.
 */
private void displayRuleDensity(){
  paintTheChart(this.session.chartData.getOriginalTimeseries());
  chartPanel=new ChartPanel(this.chart);
  chartPanel.setMaximumDrawHeight(this.getParent().getHeight());
  chartPanel.setMaximumDrawWidth(this.getParent().getWidth());
  chartPanel.setMinimumDrawWidth(0);
  chartPanel.setMinimumDrawHeight(0);
  chartPanel.revalidate();
  this.removeAll();
  this.add(chartPanel);
  int maxObservedCoverage=Integer.MIN_VALUE;
  int minObservedCoverage=Integer.MAX_VALUE;
  int[] coverageArray=new int[this.session.chartData.getOriginalTimeseries().length];
  for (  GrammarRuleRecord r : this.session.chartData.getGrammarRules()) {
    if (0 == r.ruleNumber()) {
      continue;
    }
    ArrayList<RuleInterval> occurrences=this.session.chartData.getRulePositionsByRuleNum(r.ruleNumber());
    for (    RuleInterval i : occurrences) {
      int start=i.getStart();
      int end=i.getEnd();
      for (int j=start; j < end; j++) {
        if (CoverageCountStrategy.COUNT.equals(this.session.countStrategy)) {
          coverageArray[j]=coverageArray[j] + 1;
        }
 else         if (CoverageCountStrategy.LEVEL.equals(this.session.countStrategy)) {
          coverageArray[j]=coverageArray[j] + r.getRuleLevel();
        }
 else         if (CoverageCountStrategy.OCCURRENCE.equals(this.session.countStrategy)) {
          coverageArray[j]=coverageArray[j] + r.getOccurrences().size();
        }
 else         if (CoverageCountStrategy.YIELD.equals(this.session.countStrategy)) {
          coverageArray[j]=coverageArray[j] + r.getRuleYield();
        }
 else         if (CoverageCountStrategy.PRODUCT.equals(this.session.countStrategy)) {
          coverageArray[j]=coverageArray[j] + r.getRuleLevel() * r.getOccurrences().size();
        }
        if (maxObservedCoverage < coverageArray[j]) {
          maxObservedCoverage=coverageArray[j];
        }
        if (minObservedCoverage > coverageArray[j]) {
          minObservedCoverage=coverageArray[j];
        }
      }
    }
  }
  double covIncrement=1.0 / (double)maxObservedCoverage;
  for (  GrammarRuleRecord r : this.session.chartData.getGrammarRules()) {
    if (0 == r.ruleNumber()) {
      continue;
    }
    ArrayList<RuleInterval> occurrences=r.getRuleIntervals();
    for (    RuleInterval i : occurrences) {
      IntervalMarker marker=new IntervalMarker(i.getStart(),i.getEnd());
      marker.setLabelOffsetType(LengthAdjustmentType.EXPAND);
      marker.setPaint(Color.BLUE);
      if (CoverageCountStrategy.COUNT.equals(this.session.countStrategy)) {
        marker.setAlpha((float)covIncrement);
      }
 else       if (CoverageCountStrategy.LEVEL.equals(this.session.countStrategy)) {
        marker.setAlpha((float)covIncrement * r.getRuleLevel());
      }
 else       if (CoverageCountStrategy.OCCURRENCE.equals(this.session.countStrategy)) {
        marker.setAlpha((float)covIncrement * r.getOccurrences().size());
      }
 else       if (CoverageCountStrategy.YIELD.equals(this.session.countStrategy)) {
        marker.setAlpha((float)covIncrement * r.getRuleYield());
      }
 else       if (CoverageCountStrategy.PRODUCT.equals(this.session.countStrategy)) {
        marker.setAlpha((float)covIncrement * (r.getRuleLevel() * r.getOccurrences().size()));
      }
      marker.setLabelFont(new Font(""String_Node_Str"",Font.PLAIN,12));
      marker.setLabelPaint(Color.green);
      marker.setLabelAnchor(RectangleAnchor.TOP_LEFT);
      marker.setLabelTextAnchor(TextAnchor.TOP_LEFT);
      timeseriesPlot.addDomainMarker(marker,Layer.BACKGROUND);
    }
  }
  int sum=0;
  for (  int d : coverageArray)   sum+=d;
  double meanCoverage=1.0d * sum / coverageArray.length;
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  String annotationString=""String_Node_Str"" + minObservedCoverage + ""String_Node_Str""+ maxObservedCoverage+ ""String_Node_Str""+ df.format(meanCoverage);
  NumberAxis domain=(NumberAxis)this.timeseriesPlot.getDomainAxis();
  Range domainRange=domain.getRange();
  NumberAxis range=(NumberAxis)this.timeseriesPlot.getRangeAxis();
  Range rangeRange=range.getRange();
  XYTextAnnotation a=new XYTextAnnotation(annotationString,domainRange.getLowerBound() + domainRange.getLength() / 100,rangeRange.getLowerBound() + 0.5);
  a.setTextAnchor(TextAnchor.BOTTOM_LEFT);
  a.setPaint(Color.RED);
  a.setOutlinePaint(Color.BLACK);
  a.setOutlineVisible(true);
  a.setFont(new java.awt.Font(""String_Node_Str"",java.awt.Font.BOLD,14));
  this.timeseriesPlot.addAnnotation(a);
  revalidate();
  repaint();
  this.saveRuleDensityCurve(coverageArray);
}","/** 
 * Puts rules density on show.
 */
private void displayRuleDensity(){
  this.removeAll();
  this.add(chartPanel);
  int maxObservedCoverage=Integer.MIN_VALUE;
  int minObservedCoverage=Integer.MAX_VALUE;
  int[] coverageArray=new int[this.session.chartData.getOriginalTimeseries().length];
  for (  GrammarRuleRecord r : this.session.chartData.getGrammarRules()) {
    if (0 == r.ruleNumber()) {
      continue;
    }
    ArrayList<RuleInterval> occurrences=this.session.chartData.getRulePositionsByRuleNum(r.ruleNumber());
    for (    RuleInterval i : occurrences) {
      int start=i.getStart();
      int end=i.getEnd();
      for (int j=start; j < end; j++) {
        if (CoverageCountStrategy.COUNT.equals(this.session.countStrategy)) {
          coverageArray[j]=coverageArray[j] + 1;
        }
 else         if (CoverageCountStrategy.LEVEL.equals(this.session.countStrategy)) {
          coverageArray[j]=coverageArray[j] + r.getRuleLevel();
        }
 else         if (CoverageCountStrategy.OCCURRENCE.equals(this.session.countStrategy)) {
          coverageArray[j]=coverageArray[j] + r.getOccurrences().size();
        }
 else         if (CoverageCountStrategy.YIELD.equals(this.session.countStrategy)) {
          coverageArray[j]=coverageArray[j] + r.getRuleYield();
        }
 else         if (CoverageCountStrategy.PRODUCT.equals(this.session.countStrategy)) {
          coverageArray[j]=coverageArray[j] + r.getRuleLevel() * r.getOccurrences().size();
        }
        if (maxObservedCoverage < coverageArray[j]) {
          maxObservedCoverage=coverageArray[j];
        }
        if (minObservedCoverage > coverageArray[j]) {
          minObservedCoverage=coverageArray[j];
        }
      }
    }
  }
  double covIncrement=1.0 / (double)maxObservedCoverage;
  for (  GrammarRuleRecord r : this.session.chartData.getGrammarRules()) {
    if (0 == r.ruleNumber()) {
      continue;
    }
    ArrayList<RuleInterval> occurrences=r.getRuleIntervals();
    for (    RuleInterval i : occurrences) {
      IntervalMarker marker=new IntervalMarker(i.getStart(),i.getEnd());
      marker.setLabelOffsetType(LengthAdjustmentType.EXPAND);
      marker.setPaint(Color.BLUE);
      if (CoverageCountStrategy.COUNT.equals(this.session.countStrategy)) {
        marker.setAlpha((float)covIncrement);
      }
 else       if (CoverageCountStrategy.LEVEL.equals(this.session.countStrategy)) {
        marker.setAlpha((float)covIncrement * r.getRuleLevel());
      }
 else       if (CoverageCountStrategy.OCCURRENCE.equals(this.session.countStrategy)) {
        marker.setAlpha((float)covIncrement * r.getOccurrences().size());
      }
 else       if (CoverageCountStrategy.YIELD.equals(this.session.countStrategy)) {
        marker.setAlpha((float)covIncrement * r.getRuleYield());
      }
 else       if (CoverageCountStrategy.PRODUCT.equals(this.session.countStrategy)) {
        marker.setAlpha((float)covIncrement * (r.getRuleLevel() * r.getOccurrences().size()));
      }
      marker.setLabelFont(new Font(""String_Node_Str"",Font.PLAIN,12));
      marker.setLabelPaint(Color.green);
      marker.setLabelAnchor(RectangleAnchor.TOP_LEFT);
      marker.setLabelTextAnchor(TextAnchor.TOP_LEFT);
      timeseriesPlot.addDomainMarker(marker,Layer.BACKGROUND);
    }
  }
  int sum=0;
  for (  int d : coverageArray)   sum+=d;
  double meanCoverage=1.0d * sum / coverageArray.length;
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  String annotationString=""String_Node_Str"" + minObservedCoverage + ""String_Node_Str""+ maxObservedCoverage+ ""String_Node_Str""+ df.format(meanCoverage);
  NumberAxis domain=(NumberAxis)this.timeseriesPlot.getDomainAxis();
  Range domainRange=domain.getRange();
  NumberAxis range=(NumberAxis)this.timeseriesPlot.getRangeAxis();
  Range rangeRange=range.getRange();
  XYTextAnnotation a=new XYTextAnnotation(annotationString,domainRange.getLowerBound() + domainRange.getLength() / 100,rangeRange.getLowerBound() + 0.5);
  a.setTextAnchor(TextAnchor.BOTTOM_LEFT);
  a.setPaint(Color.RED);
  a.setOutlinePaint(Color.BLACK);
  a.setOutlineVisible(true);
  a.setFont(new java.awt.Font(""String_Node_Str"",java.awt.Font.BOLD,14));
  this.timeseriesPlot.addAnnotation(a);
  revalidate();
  repaint();
  this.saveRuleDensityCurve(coverageArray);
}"
10515,"@Override public void componentResized(ComponentEvent e){
  if (null != chartPanel) {
    System.err.println(""String_Node_Str"");
    chartPanel.setMaximumDrawHeight(e.getComponent().getHeight());
    chartPanel.setMaximumDrawWidth(e.getComponent().getWidth());
    chartPanel.setMinimumDrawWidth(0);
    chartPanel.setMinimumDrawHeight(0);
    chartPanel.revalidate();
  }
}","@Override public void componentResized(ComponentEvent e){
  if (null != chartPanel) {
    chartPanel.setMaximumDrawHeight(e.getComponent().getHeight());
    chartPanel.setMaximumDrawWidth(e.getComponent().getWidth());
    chartPanel.setMinimumDrawWidth(0);
    chartPanel.setMinimumDrawHeight(0);
    chartPanel.revalidate();
  }
}"
10516,"/** 
 * Creates the chart panel, puts it on display.
 */
public void resetChartPanel(){
  if (null == this.session.chartData && null != this.tsData) {
    paintTheChart(this.tsData);
  }
 else {
    paintTheChart(this.session.chartData.getOriginalTimeseries());
  }
  chartPanel=new ChartPanel(this.chart);
  chartPanel.setMaximumDrawHeight(this.getParent().getHeight());
  chartPanel.setMaximumDrawWidth(this.getParent().getWidth());
  chartPanel.setMinimumDrawWidth(0);
  chartPanel.setMinimumDrawHeight(0);
  chartPanel.setMouseWheelEnabled(true);
  this.removeAll();
  this.add(chartPanel);
  this.validate();
  chartPanel.validate();
}","/** 
 * Creates the chart panel, puts it on display.
 */
public void resetChartPanel(){
  if (null == this.session.chartData && null != this.tsData) {
    paintTheChart(this.tsData);
  }
 else {
    paintTheChart(this.session.chartData.getOriginalTimeseries());
  }
  chartPanel=new ChartPanel(this.chart);
  chartPanel.setMaximumDrawHeight(this.getParent().getHeight());
  chartPanel.setMaximumDrawWidth(this.getParent().getWidth());
  chartPanel.setMinimumDrawWidth(0);
  chartPanel.setMinimumDrawHeight(0);
  chartPanel.setMouseWheelEnabled(true);
  this.removeAll();
  this.add(chartPanel);
  this.revalidate();
}"
10517,"private ArrayList<String[]> findCluster(Cluster cluster,double cutDist,int minPatternPerCls){
  ArrayList<String[]> clusterTSIdx=new ArrayList<String[]>();
  if (cluster.getDistance() != null) {
    if (cluster.getDistanceValue() > cutDist) {
      if (cluster.getChildren().size() > 0) {
        clusterTSIdx.addAll(findCluster(cluster.getChildren().get(0),cutDist,minPatternPerCls));
        clusterTSIdx.addAll(findCluster(cluster.getChildren().get(1),cutDist,minPatternPerCls));
      }
    }
 else {
      String[] idxes=cluster.getName().split(""String_Node_Str"");
      if (idxes.length > minPatternPerCls) {
        clusterTSIdx.add(idxes);
      }
    }
  }
  return clusterTSIdx;
}","private ArrayList<String[]> findCluster(Cluster cluster,double cutDist,int minPatternPerCls){
  ArrayList<String[]> clusterTSIdx=new ArrayList<String[]>();
  if (cluster.getDistance() != null) {
    if (cluster.getDistanceValue() > cutDist) {
      if (cluster.getChildren().size() > 0) {
        clusterTSIdx.addAll(findCluster(cluster.getChildren().get(0),cutDist,minPatternPerCls));
        clusterTSIdx.addAll(findCluster(cluster.getChildren().get(1),cutDist,minPatternPerCls));
      }
    }
 else {
      ArrayList<String> itemsInCluster=getNameInCluster(cluster);
      String[] idxes=itemsInCluster.toArray(new String[itemsInCluster.size()]);
      if (idxes.length > minPatternPerCls) {
        clusterTSIdx.add(idxes);
      }
    }
  }
  return clusterTSIdx;
}"
10518,"protected void refinePatternsByClustering(){
  double[] origTS=originalTimeSeries;
  ArrayList<SameLengthMotifs> newAllClassifiedMotifs=new ArrayList<SameLengthMotifs>();
  for (  SameLengthMotifs sameLenMotifs : allClassifiedMotifs) {
    ArrayList<RuleInterval> arrPos=new ArrayList<RuleInterval>();
    ArrayList<SAXMotif> subsequences=sameLenMotifs.getSameLenMotifs();
    for (    SAXMotif ss : subsequences) {
      arrPos.add(ss.getPos());
    }
    int patternNum=arrPos.size();
    double dt[][]=new double[patternNum][patternNum];
    for (int i=0; i < patternNum; i++) {
      RuleInterval saxPos=arrPos.get(i);
      int start1=saxPos.getStart();
      int end1=saxPos.getEnd();
      double[] ts1=Arrays.copyOfRange(origTS,start1,end1);
      for (int j=0; j < arrPos.size(); j++) {
        RuleInterval saxPos2=arrPos.get(j);
        if (dt[i][j] > 0) {
          continue;
        }
        double d=0;
        dt[i][j]=d;
        if (i == j) {
          continue;
        }
        int start2=saxPos2.getStart();
        int end2=saxPos2.getEnd();
        double[] ts2=Arrays.copyOfRange(origTS,start2,end2);
        if (ts1.length > ts2.length)         d=calcDistTSAndPattern(ts1,ts2);
 else         d=calcDistTSAndPattern(ts2,ts1);
        dt[i][j]=d;
      }
    }
    String[] patternsName=new String[patternNum];
    for (int i=0; i < patternNum; i++) {
      patternsName[i]=String.valueOf(i);
    }
    ClusteringAlgorithm alg=new DefaultClusteringAlgorithm();
    Cluster cluster=alg.performClustering(dt,patternsName,new AverageLinkageStrategy());
    int minPatternPerCls=1;
    if (cluster.getDistance() == null) {
      continue;
    }
    double cutDist=cluster.getDistanceValue() * 0.67;
    ArrayList<String[]> clusterTSIdx=findCluster(cluster,cutDist,minPatternPerCls);
    while (clusterTSIdx.size() <= 0) {
      cutDist+=cutDist / 2;
      clusterTSIdx=findCluster(cluster,cutDist,minPatternPerCls);
    }
    newAllClassifiedMotifs.addAll(SeparateMotifsByClustering(clusterTSIdx,sameLenMotifs));
  }
  allClassifiedMotifs=newAllClassifiedMotifs;
}","protected void refinePatternsByClustering(){
  double[] origTS=originalTimeSeries;
  ArrayList<SameLengthMotifs> newAllClassifiedMotifs=new ArrayList<SameLengthMotifs>();
  for (  SameLengthMotifs sameLenMotifs : allClassifiedMotifs) {
    ArrayList<RuleInterval> arrPos=new ArrayList<RuleInterval>();
    ArrayList<SAXMotif> subsequences=sameLenMotifs.getSameLenMotifs();
    for (    SAXMotif ss : subsequences) {
      arrPos.add(ss.getPos());
    }
    int patternNum=arrPos.size();
    if (patternNum < 2) {
      continue;
    }
    double dt[][]=new double[patternNum][patternNum];
    for (int i=0; i < patternNum; i++) {
      RuleInterval saxPos=arrPos.get(i);
      int start1=saxPos.getStart();
      int end1=saxPos.getEnd();
      double[] ts1=Arrays.copyOfRange(origTS,start1,end1);
      for (int j=0; j < arrPos.size(); j++) {
        RuleInterval saxPos2=arrPos.get(j);
        if (dt[i][j] > 0) {
          continue;
        }
        double d=0;
        dt[i][j]=d;
        if (i == j) {
          continue;
        }
        int start2=saxPos2.getStart();
        int end2=saxPos2.getEnd();
        double[] ts2=Arrays.copyOfRange(origTS,start2,end2);
        if (ts1.length > ts2.length)         d=calcDistTSAndPattern(ts1,ts2);
 else         d=calcDistTSAndPattern(ts2,ts1);
        dt[i][j]=d;
      }
    }
    String[] patternsName=new String[patternNum];
    for (int i=0; i < patternNum; i++) {
      patternsName[i]=String.valueOf(i);
    }
    ClusteringAlgorithm alg=new DefaultClusteringAlgorithm();
    Cluster cluster=alg.performClustering(dt,patternsName,new AverageLinkageStrategy());
    int minPatternPerCls=1;
    if (cluster.getDistance() == null) {
      continue;
    }
    double cutDist=cluster.getDistanceValue() * 0.67;
    ArrayList<String[]> clusterTSIdx=findCluster(cluster,cutDist,minPatternPerCls);
    while (clusterTSIdx.size() <= 0) {
      cutDist+=cutDist / 2;
      clusterTSIdx=findCluster(cluster,cutDist,minPatternPerCls);
    }
    newAllClassifiedMotifs.addAll(SeparateMotifsByClustering(clusterTSIdx,sameLenMotifs));
  }
  allClassifiedMotifs=newAllClassifiedMotifs;
}"
10519,"private double getCoverDelta(boolean[] range,GrammarRuleRecord rule){
  int cover=0;
  int overlap=0;
  for (  RuleInterval i : rule.getRuleIntervals()) {
    int start=i.getStartPos();
    int end=i.getEndPos();
    for (int j=start; j <= end; j++) {
      if (false == range[j]) {
        cover++;
      }
 else {
        overlap++;
      }
    }
  }
  if (0 == cover) {
    return 0.0;
  }
  if (0 == overlap) {
    return (double)cover / (double)(rule.getExpandedRuleString().length() + rule.getRuleIntervals().size());
  }
  return ((double)cover / (double)overlap) / (double)(rule.getExpandedRuleString().length() + rule.getRuleIntervals().size());
}","private double getCoverDelta(boolean[] range,GrammarRuleRecord rule){
  int cover=0;
  int overlap=0;
  for (  RuleInterval i : rule.getRuleIntervals()) {
    int start=i.getStartPos();
    int end=i.getEndPos();
    for (int j=start; j <= end; j++) {
      if (false == range[j]) {
        cover++;
      }
 else {
        overlap++;
      }
    }
  }
  if (0 == cover) {
    return 0.0;
  }
  if (0 == overlap) {
    return (double)cover / (double)(rule.getExpandedRuleString().length() + rule.getRuleIntervals().size());
  }
  return ((double)cover / (double)(cover + overlap)) / (double)(rule.getExpandedRuleString().length() + rule.getRuleIntervals().size());
}"
10520,"public void performRanking(){
  boolean[] range=new boolean[this.originalTimeSeries.length];
  HashSet<Integer> usedRules=new HashSet<Integer>();
  usedRules.add(0);
  while (hasEmptyRanges(range)) {
    GrammarRuleRecord bestRule=null;
    double bestDelta=Integer.MIN_VALUE;
    for (    GrammarRuleRecord rule : grammarRules) {
      int id=rule.getRuleNumber();
      if (usedRules.contains(id)) {
        continue;
      }
 else {
        double delta=getCoverDelta(range,rule);
        if (delta > bestDelta) {
          bestDelta=delta;
          bestRule=rule;
        }
      }
    }
    if (0.0 == bestDelta) {
      break;
    }
    ArrayList<Integer> rulesToRemove=new ArrayList<Integer>();
    for (    int rid : usedRules) {
      if (0 != rid) {
        ArrayList<RuleInterval> intervalsA=grammarRules.get(rid).getRuleIntervals();
        ArrayList<RuleInterval> intervalsB=bestRule.getRuleIntervals();
        if (isCompletlyCovered(intervalsB,intervalsA)) {
          rulesToRemove.add(rid);
        }
      }
    }
    if (!(rulesToRemove.isEmpty())) {
      System.out.println(""String_Node_Str"" + rulesToRemove.toString());
    }
    usedRules.removeAll(rulesToRemove);
    System.out.println(""String_Node_Str"" + bestRule.getRuleNumber());
    usedRules.add(bestRule.getRuleNumber());
    range=updateRanges(range,bestRule.getRuleIntervals());
  }
  System.out.println(""String_Node_Str"" + Arrays.toString(usedRules.toArray(new Integer[usedRules.size()])));
  GrammarRules prunedRules=new GrammarRules();
  prunedRules.addRule(grammarRules.get(0));
  for (  Integer rId : usedRules) {
    prunedRules.addRule(grammarRules.get(rId));
  }
  this.grammarRules=prunedRules;
}","public void performRanking(){
  boolean[] range=new boolean[this.originalTimeSeries.length];
  HashSet<Integer> usedRules=new HashSet<Integer>();
  usedRules.add(0);
  while (hasEmptyRanges(range)) {
    GrammarRuleRecord bestRule=null;
    double bestDelta=Integer.MIN_VALUE;
    for (    GrammarRuleRecord rule : grammarRules) {
      int id=rule.getRuleNumber();
      if (usedRules.contains(id)) {
        continue;
      }
 else {
        double delta=getCoverDelta(range,rule);
        if (delta > bestDelta) {
          bestDelta=delta;
          bestRule=rule;
        }
      }
    }
    if (0.0 == bestDelta) {
      break;
    }
    System.out.println(""String_Node_Str"" + bestRule.getRuleNumber());
    usedRules.add(bestRule.getRuleNumber());
    System.out.println(""String_Node_Str"");
    boolean continueSearch=true;
    while (continueSearch) {
      continueSearch=false;
      for (      int rid : usedRules) {
        if (0 == rid) {
          continue;
        }
        ArrayList<RuleInterval> intervalsA=grammarRules.get(rid).getRuleIntervals();
        ArrayList<RuleInterval> intervalsB=new ArrayList<RuleInterval>();
        for (        int ridB : usedRules) {
          if (0 == ridB || rid == ridB) {
            continue;
          }
          intervalsB.addAll(grammarRules.get(ridB).getRuleIntervals());
        }
        if (intervalsB.isEmpty()) {
          break;
        }
 else         if (isCompletlyCovered(intervalsB,intervalsA)) {
          System.out.println(""String_Node_Str"" + grammarRules.get(rid).getRuleName());
          usedRules.remove(rid);
          continueSearch=true;
          break;
        }
      }
    }
    range=updateRanges(range,bestRule.getRuleIntervals());
  }
  System.out.println(""String_Node_Str"" + Arrays.toString(usedRules.toArray(new Integer[usedRules.size()])));
  GrammarRules prunedRules=new GrammarRules();
  prunedRules.addRule(grammarRules.get(0));
  for (  Integer rId : usedRules) {
    prunedRules.addRule(grammarRules.get(rId));
  }
  this.grammarRules=prunedRules;
}"
10521,"/** 
 * The main executable.
 * @param args The command-line params.
 * @throws Exception If error occurs.
 */
public static void main(String[] args) throws Exception {
  argsString=Arrays.toString(args);
  consoleLogger.info(""String_Node_Str"" + Arrays.toString(args) + ""String_Node_Str"");
  if (args.length != 6) {
    if (args.length == 4) {
      try {
        algorithm=Integer.valueOf(args[0]);
        dataFName=args[1];
        ts=loadData(dataFName);
        windowSize=Integer.valueOf(args[2]);
        consoleLogger.info(""String_Node_Str"" + discordsToReport + ""String_Node_Str""+ algorithm+ ""String_Node_Str""+ dataFName+ ""String_Node_Str""+ ""String_Node_Str""+ windowSize);
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + StackTrace.toString(e));
        System.exit(-1);
      }
    }
 else     if ((args.length == 7 && 3 == Integer.valueOf(args[0])) || (args.length == 6 && 3 == Integer.valueOf(args[0]))) {
      try {
        setParameters(args);
        outputRRAresults=false;
        if (args.length == 7) {
          String yesNoParam=args[6];
          if (yesNoParam.equalsIgnoreCase(""String_Node_Str"") || yesNoParam.equalsIgnoreCase(""String_Node_Str"")) {
            outputRRAresults=true;
          }
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + StackTrace.toString(e));
        System.exit(-1);
      }
    }
 else {
      System.err.println(getHelp());
      System.exit(-1);
    }
  }
 else {
    setParameters(args);
  }
  if (1 == algorithm) {
    findBruteForce();
  }
 else   if (2 == algorithm) {
    findHotSax();
  }
 else   if (3 == algorithm) {
    findSaxSequitur(null);
  }
 else   if (4 == algorithm) {
    findHotSaxWithHash();
  }
}","/** 
 * The main executable.
 * @param args The command-line params.
 * @throws Exception If error occurs.
 */
public static void main(String[] args) throws Exception {
  argsString=Arrays.toString(args);
  consoleLogger.info(""String_Node_Str"" + Arrays.toString(args) + ""String_Node_Str"");
  if (args.length != 6) {
    if (args.length == 4) {
      try {
        algorithm=Integer.valueOf(args[0]);
        dataFName=args[1];
        ts=loadData(dataFName);
        windowSize=Integer.valueOf(args[2]);
        consoleLogger.info(""String_Node_Str"" + discordsToReport + ""String_Node_Str""+ algorithm+ ""String_Node_Str""+ dataFName+ ""String_Node_Str""+ ""String_Node_Str""+ windowSize);
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + StackTrace.toString(e));
        System.exit(-1);
      }
    }
 else     if ((args.length == 7 && 3 == Integer.valueOf(args[0])) || (args.length == 6 && 3 == Integer.valueOf(args[0]))) {
      try {
        setParameters(args);
        outputRRAresults=false;
        if (args.length == 7) {
          String yesNoParam=args[6];
          if (yesNoParam.equalsIgnoreCase(""String_Node_Str"") || yesNoParam.equalsIgnoreCase(""String_Node_Str"") || yesNoParam.equalsIgnoreCase(""String_Node_Str"")|| yesNoParam.equalsIgnoreCase(""String_Node_Str"")) {
            outputRRAresults=true;
          }
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + StackTrace.toString(e));
        System.exit(-1);
      }
    }
 else {
      System.err.println(getHelp());
      System.exit(-1);
    }
  }
 else {
    setParameters(args);
  }
  if (1 == algorithm) {
    findBruteForce();
  }
 else   if (2 == algorithm) {
    findHotSax();
  }
 else   if (3 == algorithm) {
    findSaxSequitur(null);
  }
 else   if (4 == algorithm) {
    findHotSaxWithHash();
  }
}"
10522,"public GrammarVizAnomalyFinder(MotifChartData motifChartData){
  super();
  this.chartData=motifChartData;
}","/** 
 * Constructor.
 * @param motifChartData The chartdata object -- i.e., info about the input and parameters.
 */
public GrammarVizAnomalyFinder(MotifChartData motifChartData){
  super();
  this.chartData=motifChartData;
}"
10523,"@Override public void run(){
  Date start=new Date();
  this.setChanged();
  notifyObservers(""String_Node_Str"");
  int[] coverageCurve=new int[this.chartData.originalTimeSeries.length];
  for (  GrammarRuleRecord ruleEntry : this.chartData.getGrammarRules()) {
    if (0 == ruleEntry.ruleNumber()) {
      continue;
    }
    ArrayList<RuleInterval> intervals=getRulePositionsByRuleNum(ruleEntry.ruleNumber());
    for (    RuleInterval interval : intervals) {
      for (int j=interval.getStartPos(); j < interval.getEndPos(); j++) {
        coverageCurve[j]++;
      }
    }
  }
  HashMap<RuleDescriptor,ArrayList<RuleInterval>> rules=new HashMap<RuleDescriptor,ArrayList<RuleInterval>>();
  for (  GrammarRuleRecord r : this.chartData.getGrammarRules()) {
    if (0 == r.ruleNumber()) {
      continue;
    }
    ArrayList<RuleInterval> intervals=getRulePositionsByRuleNum(r.ruleNumber());
    rules.put(new RuleDescriptor(r.ruleNumber(),r.getRuleName(),r.getRuleString(),r.getMeanLength(),r.getRuleUseFrequency()),intervals);
  }
  ArrayList<RuleInterval> intervals=new ArrayList<RuleInterval>();
  for (  Entry<RuleDescriptor,ArrayList<RuleInterval>> e : rules.entrySet()) {
    for (    RuleInterval ri : e.getValue()) {
      ri.setCoverage(e.getKey().getRuleFrequency());
      ri.setId(e.getKey().getRuleIndex());
      intervals.add(ri);
    }
  }
  for (int i=0; i < coverageCurve.length; i++) {
    if (0 == coverageCurve[i]) {
      int j=i;
      while ((j < coverageCurve.length) && (0 == coverageCurve[j])) {
        j++;
      }
      if (Math.abs(i - j) > 1) {
        intervals.add(new RuleInterval(0,i,j,0.0d));
      }
      i=j;
    }
  }
  log(""String_Node_Str"");
  this.chartData.discords=new DiscordRecords();
  VisitRegistry globalTrackVisitRegistry=new VisitRegistry(this.chartData.originalTimeSeries.length);
  while (this.chartData.discords.getSize() < 10) {
    start=new Date();
    DiscordRecord bestDiscord;
    try {
      bestDiscord=SAXFactory.findBestDiscordForIntervals(this.chartData.originalTimeSeries,intervals,globalTrackVisitRegistry);
      Date end=new Date();
      if (bestDiscord.getNNDistance() == 0.0D || bestDiscord.getPosition() == -1) {
        log(""String_Node_Str"" + this.chartData.discords.getSize() + ""String_Node_Str""+ bestDiscord.toString());
        break;
      }
      log(""String_Node_Str"" + bestDiscord.getPosition() + ""String_Node_Str""+ bestDiscord.getLength()+ ""String_Node_Str""+ bestDiscord.getNNDistance()+ ""String_Node_Str""+ SAXFactory.timeToString(start.getTime(),end.getTime())+ ""String_Node_Str""+ bestDiscord.getInfo());
      this.chartData.discords.add(bestDiscord);
      LargeWindowAlgorithm marker=new LargeWindowAlgorithm();
      marker.markVisited(globalTrackVisitRegistry,bestDiscord.getPosition(),bestDiscord.getLength());
    }
 catch (    TSException e) {
      log(StackTrace.toString(e));
      e.printStackTrace();
    }
  }
  Date end=new Date();
  log(""String_Node_Str"" + SAXFactory.timeToString(start.getTime(),end.getTime()));
}","@Override public void run(){
  Date start=new Date();
  this.setChanged();
  notifyObservers(""String_Node_Str"");
  int[] coverageCurve=new int[this.chartData.originalTimeSeries.length];
  for (  GrammarRuleRecord ruleEntry : this.chartData.getGrammarRules()) {
    if (0 == ruleEntry.ruleNumber()) {
      continue;
    }
    ArrayList<RuleInterval> intervals=getRulePositionsByRuleNum(ruleEntry.ruleNumber());
    for (    RuleInterval interval : intervals) {
      for (int j=interval.getStartPos(); j < interval.getEndPos(); j++) {
        coverageCurve[j]++;
      }
    }
  }
  HashMap<RuleDescriptor,ArrayList<RuleInterval>> rules=new HashMap<RuleDescriptor,ArrayList<RuleInterval>>();
  for (  GrammarRuleRecord r : this.chartData.getGrammarRules()) {
    if (0 == r.ruleNumber()) {
      continue;
    }
    ArrayList<RuleInterval> intervals=getRulePositionsByRuleNum(r.ruleNumber());
    rules.put(new RuleDescriptor(r.ruleNumber(),r.getRuleName(),r.getRuleString(),r.getMeanLength(),r.getRuleUseFrequency()),intervals);
  }
  ArrayList<RuleInterval> intervals=new ArrayList<RuleInterval>();
  for (  Entry<RuleDescriptor,ArrayList<RuleInterval>> e : rules.entrySet()) {
    for (    RuleInterval ri : e.getValue()) {
      ri.setCoverage(e.getKey().getRuleFrequency());
      ri.setId(e.getKey().getRuleIndex());
      intervals.add(ri);
    }
  }
  for (int i=0; i < coverageCurve.length; i++) {
    if (0 == coverageCurve[i]) {
      int j=i;
      while ((j < coverageCurve.length - 1) && (0 == coverageCurve[j])) {
        j++;
      }
      if (Math.abs(i - j) > 1) {
        intervals.add(new RuleInterval(0,i,j,0.0d));
      }
      i=j;
    }
  }
  log(""String_Node_Str"");
  this.chartData.discords=new DiscordRecords();
  VisitRegistry globalTrackVisitRegistry=new VisitRegistry(this.chartData.originalTimeSeries.length);
  while (this.chartData.discords.getSize() < 10) {
    start=new Date();
    DiscordRecord bestDiscord;
    try {
      bestDiscord=SAXFactory.findBestDiscordForIntervals(this.chartData.originalTimeSeries,intervals,globalTrackVisitRegistry);
      Date end=new Date();
      if (bestDiscord.getNNDistance() == 0.0D || bestDiscord.getPosition() == -1) {
        log(""String_Node_Str"" + this.chartData.discords.getSize() + ""String_Node_Str""+ bestDiscord.toString());
        break;
      }
      log(""String_Node_Str"" + bestDiscord.getPosition() + ""String_Node_Str""+ bestDiscord.getLength()+ ""String_Node_Str""+ bestDiscord.getNNDistance()+ ""String_Node_Str""+ SAXFactory.timeToString(start.getTime(),end.getTime())+ ""String_Node_Str""+ bestDiscord.getInfo());
      this.chartData.discords.add(bestDiscord);
      LargeWindowAlgorithm marker=new LargeWindowAlgorithm();
      marker.markVisited(globalTrackVisitRegistry,bestDiscord.getPosition(),bestDiscord.getLength());
    }
 catch (    TSException e) {
      log(StackTrace.toString(e));
      e.printStackTrace();
    }
  }
  Date end=new Date();
  log(""String_Node_Str"" + SAXFactory.timeToString(start.getTime(),end.getTime()));
}"
10524,"/** 
 * Reads timeseries from a file. Assumes that file has a single double value on every line. Assigned timestamps are the line numbers.
 * @param filename The file to read from.
 * @param columnIdx The column index.
 * @param sizeLimit The number of lines to read, 0 == all.
 * @return data.
 * @throws NumberFormatException if error occurs.
 * @throws IOException if error occurs.
 * @throws TSException if error occurs.
 */
public static double[] readFileColumn(String filename,int columnIdx,int sizeLimit) throws NumberFormatException, IOException, TSException {
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(filename),""String_Node_Str""));
  ArrayList<Double> preRes=new ArrayList<Double>();
  int lineCounter=0;
  String line=null;
  while ((line=br.readLine()) != null) {
    line=line.trim();
    String[] split=line.split(""String_Node_Str"");
    if (split.length < columnIdx) {
      String message=""String_Node_Str"" + columnIdx + ""String_Node_Str""+ filename;
      br.close();
      throw new TSException(message);
    }
    preRes.add(Double.valueOf(split[columnIdx]));
    lineCounter++;
    if ((0 != sizeLimit || -1 != sizeLimit) && (lineCounter >= sizeLimit)) {
      break;
    }
  }
  br.close();
  double[] res=new double[preRes.size()];
  for (int i=0; i < preRes.size(); i++) {
    res[i]=preRes.get(i);
  }
  return res;
}","/** 
 * Reads timeseries from a file. Assumes that file has a single double value on every line. Assigned timestamps are the line numbers.
 * @param filename The file to read from.
 * @param columnIdx The column index.
 * @param sizeLimit The number of lines to read, 0 == all.
 * @return data.
 * @throws NumberFormatException if error occurs.
 * @throws IOException if error occurs.
 * @throws TSException if error occurs.
 */
public static double[] readFileColumn(String filename,int columnIdx,int sizeLimit) throws NumberFormatException, IOException, TSException {
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(filename),""String_Node_Str""));
  ArrayList<Double> preRes=new ArrayList<Double>();
  int lineCounter=0;
  String line=null;
  while ((line=br.readLine()) != null) {
    line=line.trim();
    String[] split=line.split(""String_Node_Str"");
    if (split.length < columnIdx) {
      String message=""String_Node_Str"" + columnIdx + ""String_Node_Str""+ filename;
      br.close();
      throw new TSException(message);
    }
    preRes.add(Double.valueOf(split[columnIdx]));
    lineCounter++;
    if (!(0 == sizeLimit || -1 == sizeLimit) && (lineCounter >= sizeLimit)) {
      break;
    }
  }
  br.close();
  double[] res=new double[preRes.size()];
  for (int i=0; i < preRes.size(); i++) {
    res[i]=preRes.get(i);
  }
  return res;
}"
10525,"public DigramFrequencies(){
  super();
  digramsToEntries=new HashMap<String,DigramFrequencyEntry>();
  bucketsToEntries=new TreeMap<Integer,ArrayList<DigramFrequencyEntry>>();
}","/** 
 * Constructor. Inits data structures.
 */
public DigramFrequencies(){
  super();
  digramsToEntries=new HashMap<String,DigramFrequencyEntry>();
  bucketsToEntries=new TreeMap<Integer,ArrayList<DigramFrequencyEntry>>();
}"
10526,"public DigramFrequencyEntry get(String string){
  return this.digramsToEntries.get(string);
}","/** 
 * get the frequency entry by the digram string key.
 * @param string the string key.
 * @return the digram frequency entry if exists.
 */
public DigramFrequencyEntry get(String string){
  return this.digramsToEntries.get(string);
}"
10527,"public DigramFrequencyEntry getTop(){
  if (bucketsToEntries.keySet().isEmpty()) {
    return null;
  }
 else {
    Integer maxBucket=Collections.max(bucketsToEntries.keySet());
    return bucketsToEntries.get(maxBucket).get(0);
  }
}","/** 
 * Gets the most frequent entry.
 * @return the most frequent entry.
 */
public DigramFrequencyEntry getTop(){
  if (bucketsToEntries.keySet().isEmpty()) {
    return null;
  }
 else {
    Integer maxBucket=Collections.max(bucketsToEntries.keySet());
    return bucketsToEntries.get(maxBucket).get(0);
  }
}"
10528,"public void put(DigramFrequencyEntry digramFrequencyEntry){
  this.digramsToEntries.put(digramFrequencyEntry.getDigram(),digramFrequencyEntry);
  Integer freq=digramFrequencyEntry.getFrequency();
  ArrayList<DigramFrequencyEntry> bucket=this.bucketsToEntries.get(freq);
  if (null == bucket) {
    bucket=new ArrayList<DigramFrequencyEntry>();
    this.bucketsToEntries.put(freq,bucket);
  }
  bucket.add(digramFrequencyEntry);
}","/** 
 * Puts the digram into collection, it overrides the old entry.
 * @param digramFrequencyEntry The digram entry.
 */
public void put(DigramFrequencyEntry digramFrequencyEntry){
  this.digramsToEntries.put(digramFrequencyEntry.getDigram(),digramFrequencyEntry);
  Integer freq=digramFrequencyEntry.getFrequency();
  ArrayList<DigramFrequencyEntry> bucket=this.bucketsToEntries.get(freq);
  if (null == bucket) {
    bucket=new ArrayList<DigramFrequencyEntry>();
    this.bucketsToEntries.put(freq,bucket);
  }
  bucket.add(digramFrequencyEntry);
}"
10529,"public void incrementFrequency(DigramFrequencyEntry entry,int index){
  ArrayList<DigramFrequencyEntry> oldBucket=this.bucketsToEntries.get(entry.getFrequency());
  oldBucket.remove(entry);
  if (0 == oldBucket.size() || oldBucket.isEmpty()) {
    this.bucketsToEntries.remove(entry.getFrequency());
  }
  int newFreq=entry.getFrequency() + index;
  entry.setFrequency(newFreq);
  ArrayList<DigramFrequencyEntry> bucket=this.bucketsToEntries.get(newFreq);
  if (null == bucket) {
    bucket=new ArrayList<DigramFrequencyEntry>();
    this.bucketsToEntries.put(newFreq,bucket);
  }
  bucket.add(entry);
}","/** 
 * Increments a frequency counter for a digram.
 * @param entry the entry.
 * @param increment the increment value.
 */
public void incrementFrequency(DigramFrequencyEntry entry,int increment){
  ArrayList<DigramFrequencyEntry> oldBucket=this.bucketsToEntries.get(entry.getFrequency());
  oldBucket.remove(entry);
  if (0 == oldBucket.size() || oldBucket.isEmpty()) {
    this.bucketsToEntries.remove(entry.getFrequency());
  }
  int newFreq=entry.getFrequency() + increment;
  entry.setFrequency(newFreq);
  ArrayList<DigramFrequencyEntry> bucket=this.bucketsToEntries.get(newFreq);
  if (null == bucket) {
    bucket=new ArrayList<DigramFrequencyEntry>();
    this.bucketsToEntries.put(newFreq,bucket);
  }
  bucket.add(entry);
}"
10530,"public void remove(String digram){
  DigramFrequencyEntry entry=this.digramsToEntries.get(digram);
  int freq=entry.getFrequency();
  ArrayList<DigramFrequencyEntry> bucket=this.bucketsToEntries.get(freq);
  if (!bucket.remove(entry)) {
    throw (new RuntimeException(""String_Node_Str""));
  }
  if (0 == bucket.size() || bucket.isEmpty()) {
    this.bucketsToEntries.remove(entry.getFrequency());
  }
  this.digramsToEntries.remove(entry);
  entry=null;
}","/** 
 * Removes the digram frequency entry from the collection.
 * @param digramStr the digram string.
 */
public void remove(String digramStr){
  DigramFrequencyEntry entry=this.digramsToEntries.get(digramStr);
  if (null == entry) {
    return;
  }
 else {
    int freq=entry.getFrequency();
    ArrayList<DigramFrequencyEntry> bucket=this.bucketsToEntries.get(freq);
    if (!bucket.remove(entry)) {
      throw (new RuntimeException(""String_Node_Str""));
    }
    if (bucket.isEmpty()) {
      this.bucketsToEntries.remove(freq);
    }
    this.digramsToEntries.remove(digramStr);
  }
  entry=null;
}"
10531,"public DigramFrequencyEntry(String digram,int frequency,int firstOccurrence){
  super();
  this.digram=digram;
  this.frequency=frequency;
  this.firstOccurrence=firstOccurrence;
}","/** 
 * Constructor.
 * @param digram the digram string.
 * @param frequency the digram frequency.
 * @param firstOccurrence the digram first occurrence.
 */
public DigramFrequencyEntry(String digram,int frequency,int firstOccurrence){
  super();
  this.digram=digram;
  this.frequency=frequency;
  this.firstOccurrence=firstOccurrence;
}"
10532,"public String getDigram(){
  return digram;
}","/** 
 * Get the payload.
 * @return the digram string.
 */
public String getDigram(){
  return digram;
}"
10533,"public int getFirstOccurrence(){
  return firstOccurrence;
}","/** 
 * Get the first occurrence.
 * @return the first occurrence.
 */
public int getFirstOccurrence(){
  return firstOccurrence;
}"
10534,"public int getFrequency(){
  return frequency;
}","/** 
 * Frequency getter.
 * @return the frequency value.
 */
public int getFrequency(){
  return frequency;
}"
10535,"public void setDigram(String digram){
  this.digram=digram;
}","/** 
 * Set the digram string.
 * @param digram the string.
 */
public void setDigram(String digram){
  this.digram=digram;
}"
10536,"public void setFrequency(int frequency){
  this.frequency=frequency;
}","/** 
 * Frequency setter.
 * @param frequency the new frequency value.
 */
public void setFrequency(int frequency){
  this.frequency=frequency;
}"
10537,"public void setFirstOccurrence(int firstOccurrence){
  this.firstOccurrence=firstOccurrence;
}","/** 
 * Set the first occurrence.
 * @param firstOccurrence the new value.
 */
public void setFirstOccurrence(int firstOccurrence){
  this.firstOccurrence=firstOccurrence;
}"
10538,"/** 
 * Set a string payload.
 * @param str the string payload.
 */
public void setStr(char[] str){
  int i=0;
  while (i < str.length && i < this.payload.length) {
    this.payload[i]=str[i];
    i++;
  }
}","/** 
 * Set a string payload.
 * @param str the string payload.
 */
public void setStr(char[] str){
  this.payload=str.clone();
}"
10539,"/** 
 * Build the actual trie.
 * @param root The root of the current tree.
 * @param alphabetSize The alphabet size.
 * @param depth2Go The depth of the tree left.
 */
private void buildTrie(TrieAbstractNode root,Integer alphabetSize,Integer depth2Go){
  if (depth2Go > 1) {
    for (int i=0; i < alphabetSize; i++) {
      char curChar=(char)(i + aStart);
      TrieInnerNode node=new TrieInnerNode(String.valueOf(curChar));
      ((TrieInnerNode)root).addNext(node);
      buildTrie(node,alphabetSize,depth2Go - 1);
    }
  }
 else {
    for (int i=0; i < alphabetSize; i++) {
      char curChar=(char)(i + aStart);
      TrieLeafNode node=new TrieLeafNode(String.valueOf(curChar));
      ((TrieInnerNode)root).addNext(node);
    }
  }
}","/** 
 * Build the actual trie.
 * @param root The root of the current tree.
 * @param alphabetSize The alphabet size.
 * @param depth2Go The depth of the tree left.
 */
private void buildTrie(TrieAbstractNode root,Integer alphabetSize,Integer depth2Go){
  if (depth2Go > 1) {
    for (int i=0; i < alphabetSize; i++) {
      char curChar=(char)(i + ALPHABET_CODE_START);
      TrieInnerNode node=new TrieInnerNode(String.valueOf(curChar));
      ((TrieInnerNode)root).addNext(node);
      buildTrie(node,alphabetSize,depth2Go - 1);
    }
  }
 else {
    for (int i=0; i < alphabetSize; i++) {
      char curChar=(char)(i + ALPHABET_CODE_START);
      TrieLeafNode node=new TrieLeafNode(String.valueOf(curChar));
      ((TrieInnerNode)root).addNext(node);
    }
  }
}"
10540,"/** 
 * The string validator - check if string has only proper letters.
 * @param str The string to check.
 * @return True if string contains only acceptable (valid) symbols.
 */
private boolean containsWrongSymbols(String str){
  int maxSymbol=aStart + alphabetSize;
  for (int i=0; i < str.length(); i++) {
    if (((int)str.charAt(i)) >= maxSymbol) {
      return true;
    }
  }
  return false;
}","/** 
 * The string validator - check if string has only proper letters.
 * @param str The string to check.
 * @return True if string contains only acceptable (valid) symbols.
 */
private boolean containsWrongSymbols(String str){
  int maxSymbol=ALPHABET_CODE_START + alphabetSize;
  for (int i=0; i < str.length(); i++) {
    if (((int)str.charAt(i)) >= maxSymbol) {
      return true;
    }
  }
  return false;
}"
10541,"/** 
 * Constructor.
 * @param alphabetSize The alphabet size.
 * @throws TrieException If wrong parameters specified.
 */
public SAXTrieTree(Integer alphabetSize) throws TrieException {
  if ((null != alphabetSize) && (alphabetSize > 0) && (alphabetSize < (aEnd - aStart))) {
    this.alphabetSize=alphabetSize;
    root=new TrieInnerNode(""String_Node_Str"");
    buildTrie(root,alphabetSize,alphabetSize);
  }
 else {
    throw new TrieException(""String_Node_Str"" + alphabetSize);
  }
}","/** 
 * Constructor.
 * @param alphabetSize The alphabet size.
 * @throws TrieException If wrong parameters specified.
 */
public SAXTrieTree(Integer alphabetSize) throws TrieException {
  if ((null != alphabetSize) && (alphabetSize > 0) && (alphabetSize < (ALPHABET_CODE_END - ALPHABET_CODE_START))) {
    this.alphabetSize=alphabetSize;
    root=new TrieInnerNode(""String_Node_Str"");
    buildTrie(root,alphabetSize,alphabetSize);
  }
 else {
    throw new TrieException(""String_Node_Str"" + alphabetSize);
  }
}"
10542,"/** 
 * Builds a SAX representation.
 * @param timeseries
 * @param threadsNum
 * @param slidingWindowSize
 * @param paaSize
 * @param alphabetSize
 * @param nrStrategy
 * @param normalizationThreshold
 * @return
 * @throws TSException
 */
public SAXRecords process(double[] timeseries,int threadsNum,int slidingWindowSize,int paaSize,int alphabetSize,NumerosityReductionStrategy nrStrategy,double normalizationThreshold) throws TSException {
  consoleLogger.debug(""String_Node_Str"");
  NormalAlphabet alphabet=new NormalAlphabet();
  SAXRecords res=new SAXRecords(0);
  ExecutorService executorService=Executors.newFixedThreadPool(threadsNum);
  consoleLogger.debug(""String_Node_Str"" + threadsNum + ""String_Node_Str"");
  CompletionService<SAXRecords> completionService=new ExecutorCompletionService<SAXRecords>(executorService);
  int totalTaskCounter=0;
  long tstamp=System.currentTimeMillis();
  int evenIncrement=timeseries.length / threadsNum;
  int reminder=timeseries.length % threadsNum;
  int firstChunkSize=evenIncrement + reminder;
  consoleLogger.debug(""String_Node_Str"" + timeseries.length + ""String_Node_Str""+ evenIncrement+ ""String_Node_Str""+ reminder+ ""String_Node_Str""+ firstChunkSize);
{
    int firstChunkStart=0;
    int firstChunkEnd=firstChunkSize + slidingWindowSize - 1;
    final SAXWorker job0=new SAXWorker(tstamp + totalTaskCounter,timeseries,firstChunkStart,firstChunkEnd,slidingWindowSize,paaSize,alphabetSize,nrStrategy,normalizationThreshold);
    completionService.submit(job0);
    consoleLogger.debug(""String_Node_Str"" + tstamp);
    totalTaskCounter++;
  }
  while (totalTaskCounter < threadsNum - 1) {
    int intermediateChunkStart=firstChunkSize + (totalTaskCounter - 1) * evenIncrement;
    int intermediateChunkEnd=firstChunkSize + (totalTaskCounter * evenIncrement) + slidingWindowSize - 1;
    final SAXWorker job=new SAXWorker(tstamp + totalTaskCounter,timeseries,intermediateChunkStart,intermediateChunkEnd,slidingWindowSize,paaSize,alphabetSize,nrStrategy,normalizationThreshold);
    completionService.submit(job);
    consoleLogger.debug(""String_Node_Str"" + Long.valueOf(tstamp + totalTaskCounter));
    totalTaskCounter++;
  }
{
    int lastChunkStart=timeseries.length - evenIncrement;
    int lastChunkEnd=timeseries.length;
    final SAXWorker jobN=new SAXWorker(tstamp + totalTaskCounter,timeseries,lastChunkStart,lastChunkEnd,slidingWindowSize,paaSize,alphabetSize,nrStrategy,normalizationThreshold);
    completionService.submit(jobN);
    consoleLogger.debug(""String_Node_Str"" + Long.valueOf(tstamp + totalTaskCounter));
    totalTaskCounter++;
  }
  executorService.shutdown();
  try {
    while (totalTaskCounter > 0) {
      Future<SAXRecords> finished=completionService.poll(128,TimeUnit.HOURS);
      if (null == finished) {
        System.err.println(""String_Node_Str"");
        break;
      }
 else {
        SAXRecords chunkRes=finished.get();
        int idx=(int)(chunkRes.getId() - tstamp);
        consoleLogger.debug(""String_Node_Str"" + chunkRes.getId() + ""String_Node_Str""+ idx+ ""String_Node_Str"");
        if (0 == res.size()) {
          res.addAll(chunkRes);
          consoleLogger.debug(""String_Node_Str"");
        }
 else {
          consoleLogger.debug(""String_Node_Str"" + idx + ""String_Node_Str"");
          if (0 == idx) {
            consoleLogger.debug(""String_Node_Str"");
            int tailIndex=chunkRes.getMaxIndex();
            SaxRecord chunkTail=chunkRes.getByIndex(tailIndex);
            int resHeadIndex=firstChunkSize - 1;
            while ((null == res.getByIndex(resHeadIndex)) && (resHeadIndex < (firstChunkSize + evenIncrement))) {
              resHeadIndex++;
            }
            if (resHeadIndex < (firstChunkSize + evenIncrement - 1)) {
              SaxRecord resHead=res.getByIndex(resHeadIndex);
              consoleLogger.debug(""String_Node_Str"" + resHeadIndex + ""String_Node_Str""+ String.valueOf(resHead.getPayload())+ ""String_Node_Str""+ tailIndex+ ""String_Node_Str""+ String.valueOf(chunkTail.getPayload()));
              if (nrStrategy.equals(NumerosityReductionStrategy.EXACT) && Arrays.equals(chunkTail.getPayload(),res.getByIndex(resHeadIndex).getPayload())) {
                consoleLogger.debug(""String_Node_Str"" + String.valueOf(res.getByIndex(resHeadIndex).getPayload()) + ""String_Node_Str""+ resHeadIndex+ ""String_Node_Str""+ String.valueOf(chunkTail.getPayload())+ ""String_Node_Str""+ tailIndex);
                res.dropByIndex(resHeadIndex);
              }
 else               if (nrStrategy.equals(NumerosityReductionStrategy.MINDIST) && (0.0 == SAXFactory.saxMinDist(chunkTail.getPayload(),res.getByIndex(resHeadIndex).getPayload(),alphabet.getDistanceMatrix(alphabetSize)))) {
                consoleLogger.debug(""String_Node_Str"" + String.valueOf(res.getByIndex(resHeadIndex).getPayload()) + ""String_Node_Str""+ resHeadIndex+ ""String_Node_Str""+ String.valueOf(chunkTail.getPayload())+ ""String_Node_Str""+ tailIndex);
                res.dropByIndex(resHeadIndex);
              }
 else {
                consoleLogger.debug(""String_Node_Str"");
              }
            }
            res.addAll(chunkRes);
          }
 else {
            consoleLogger.debug(""String_Node_Str"" + idx);
{
              int resLeftmostIndex=res.getMinIndex();
              int chunkLeftmostIndex=chunkRes.getMinIndex();
              SaxRecord chunkLeftmostEntry=chunkRes.getByIndex(chunkLeftmostIndex);
              consoleLogger.debug(""String_Node_Str"" + resLeftmostIndex + ""String_Node_Str""+ chunkLeftmostIndex);
              if (resLeftmostIndex < chunkLeftmostIndex) {
                consoleLogger.debug(""String_Node_Str"");
                int leftOfChunkIndex=chunkLeftmostIndex;
                while ((null == res.getByIndex(leftOfChunkIndex)) && (leftOfChunkIndex >= resLeftmostIndex) && (leftOfChunkIndex >= chunkLeftmostIndex - evenIncrement)) {
                  leftOfChunkIndex--;
                }
                if (leftOfChunkIndex >= chunkLeftmostIndex - evenIncrement) {
                  SaxRecord resLeftEntry=res.getByIndex(leftOfChunkIndex);
                  consoleLogger.debug(""String_Node_Str"" + leftOfChunkIndex + ""String_Node_Str""+ String.valueOf(resLeftEntry.getPayload())+ ""String_Node_Str""+ chunkLeftmostIndex+ ""String_Node_Str""+ String.valueOf(chunkLeftmostEntry.getPayload()));
                  if (nrStrategy.equals(NumerosityReductionStrategy.EXACT) && Arrays.equals(resLeftEntry.getPayload(),chunkLeftmostEntry.getPayload())) {
                    consoleLogger.debug(""String_Node_Str"" + String.valueOf(resLeftEntry.getPayload()) + ""String_Node_Str""+ leftOfChunkIndex+ ""String_Node_Str""+ String.valueOf(chunkLeftmostEntry.getPayload())+ ""String_Node_Str""+ chunkLeftmostIndex);
                    res.dropByIndex(leftOfChunkIndex);
                  }
 else                   if (nrStrategy.equals(NumerosityReductionStrategy.MINDIST) && (0.0 == SAXFactory.saxMinDist(resLeftEntry.getPayload(),chunkLeftmostEntry.getPayload(),alphabet.getDistanceMatrix(alphabetSize)))) {
                    consoleLogger.debug(""String_Node_Str"" + String.valueOf(resLeftEntry.getPayload()) + ""String_Node_Str""+ leftOfChunkIndex+ ""String_Node_Str""+ String.valueOf(chunkLeftmostEntry.getPayload())+ ""String_Node_Str""+ chunkLeftmostIndex);
                    res.dropByIndex(leftOfChunkIndex);
                  }
                }
              }
            }
{
              int resRightmostIndex=res.getMaxIndex();
              int chunkRightmostIndex=chunkRes.getMaxIndex();
              SaxRecord chunkRightmostEntry=chunkRes.getByIndex(chunkRightmostIndex);
              consoleLogger.debug(""String_Node_Str"" + resRightmostIndex + ""String_Node_Str""+ chunkRightmostIndex);
              if (resRightmostIndex > chunkRightmostIndex) {
                int rightOfChunkIndex=chunkRightmostIndex;
                while ((null == res.getByIndex(rightOfChunkIndex)) && (rightOfChunkIndex <= resRightmostIndex) && (rightOfChunkIndex <= chunkRightmostIndex + evenIncrement)) {
                  rightOfChunkIndex++;
                }
                if (rightOfChunkIndex <= chunkRightmostIndex + evenIncrement) {
                  SaxRecord resRightEntry=res.getByIndex(rightOfChunkIndex);
                  consoleLogger.debug(""String_Node_Str"" + rightOfChunkIndex + ""String_Node_Str""+ String.valueOf(resRightEntry.getPayload())+ ""String_Node_Str""+ chunkRightmostIndex+ ""String_Node_Str""+ String.valueOf(chunkRightmostEntry.getPayload()));
                  if (nrStrategy.equals(NumerosityReductionStrategy.EXACT) && Arrays.equals(resRightEntry.getPayload(),chunkRightmostEntry.getPayload())) {
                    consoleLogger.debug(""String_Node_Str"" + String.valueOf(resRightEntry.getPayload()) + ""String_Node_Str""+ rightOfChunkIndex+ ""String_Node_Str""+ String.valueOf(chunkRightmostEntry.getPayload())+ ""String_Node_Str""+ chunkRightmostIndex);
                    res.dropByIndex(rightOfChunkIndex);
                  }
 else                   if (nrStrategy.equals(NumerosityReductionStrategy.MINDIST) && (0.0 == SAXFactory.saxMinDist(resRightEntry.getPayload(),chunkRightmostEntry.getPayload(),alphabet.getDistanceMatrix(alphabetSize)))) {
                    consoleLogger.debug(""String_Node_Str"" + String.valueOf(resRightEntry.getPayload()) + ""String_Node_Str""+ rightOfChunkIndex+ ""String_Node_Str""+ String.valueOf(chunkRightmostEntry.getPayload())+ ""String_Node_Str""+ chunkRightmostIndex);
                    res.dropByIndex(rightOfChunkIndex);
                  }
                }
              }
            }
            res.addAll(chunkRes);
          }
        }
      }
      totalTaskCounter--;
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + StackTrace.toString(e));
  }
 finally {
    try {
      if (!executorService.awaitTermination(4,TimeUnit.HOURS)) {
        executorService.shutdownNow();
        if (!executorService.awaitTermination(30,TimeUnit.MINUTES))         System.err.println(""String_Node_Str"");
      }
    }
 catch (    InterruptedException ie) {
      System.err.println(""String_Node_Str"" + StackTrace.toString(ie));
      executorService.shutdownNow();
      Thread.currentThread().interrupt();
    }
  }
  return res;
}","/** 
 * Builds a SAX representation.
 * @param timeseries
 * @param threadsNum
 * @param slidingWindowSize
 * @param paaSize
 * @param alphabetSize
 * @param nrStrategy
 * @param normalizationThreshold
 * @return
 * @throws TSException
 */
public SAXRecords process(double[] timeseries,int threadsNum,int slidingWindowSize,int paaSize,int alphabetSize,NumerosityReductionStrategy nrStrategy,double normalizationThreshold) throws TSException {
  consoleLogger.debug(""String_Node_Str"");
  NormalAlphabet alphabet=new NormalAlphabet();
  SAXRecords res=new SAXRecords(0);
  ExecutorService executorService=Executors.newFixedThreadPool(threadsNum);
  consoleLogger.debug(""String_Node_Str"" + threadsNum + ""String_Node_Str"");
  CompletionService<SAXRecords> completionService=new ExecutorCompletionService<SAXRecords>(executorService);
  int totalTaskCounter=0;
  long tstamp=System.currentTimeMillis();
  int evenIncrement=timeseries.length / threadsNum;
  int reminder=timeseries.length % threadsNum;
  int firstChunkSize=evenIncrement + reminder;
  consoleLogger.debug(""String_Node_Str"" + timeseries.length + ""String_Node_Str""+ evenIncrement+ ""String_Node_Str""+ reminder+ ""String_Node_Str""+ firstChunkSize);
{
    int firstChunkStart=0;
    int firstChunkEnd=firstChunkSize + slidingWindowSize - 1;
    final SAXWorker job0=new SAXWorker(tstamp + totalTaskCounter,timeseries,firstChunkStart,firstChunkEnd,slidingWindowSize,paaSize,alphabetSize,nrStrategy,normalizationThreshold);
    completionService.submit(job0);
    consoleLogger.debug(""String_Node_Str"" + tstamp);
    totalTaskCounter++;
  }
  while (totalTaskCounter < threadsNum - 1) {
    int intermediateChunkStart=firstChunkSize + (totalTaskCounter - 1) * evenIncrement;
    int intermediateChunkEnd=firstChunkSize + (totalTaskCounter * evenIncrement) + slidingWindowSize - 1;
    final SAXWorker job=new SAXWorker(tstamp + totalTaskCounter,timeseries,intermediateChunkStart,intermediateChunkEnd,slidingWindowSize,paaSize,alphabetSize,nrStrategy,normalizationThreshold);
    completionService.submit(job);
    consoleLogger.debug(""String_Node_Str"" + Long.valueOf(tstamp + totalTaskCounter));
    totalTaskCounter++;
  }
{
    int lastChunkStart=timeseries.length - evenIncrement;
    int lastChunkEnd=timeseries.length;
    final SAXWorker jobN=new SAXWorker(tstamp + totalTaskCounter,timeseries,lastChunkStart,lastChunkEnd,slidingWindowSize,paaSize,alphabetSize,nrStrategy,normalizationThreshold);
    completionService.submit(jobN);
    consoleLogger.debug(""String_Node_Str"" + Long.valueOf(tstamp + totalTaskCounter));
    totalTaskCounter++;
  }
  executorService.shutdown();
  try {
    while (totalTaskCounter > 0) {
      Future<SAXRecords> finished=completionService.poll(128,TimeUnit.HOURS);
      if (null == finished) {
        System.err.println(""String_Node_Str"");
        break;
      }
 else {
        SAXRecords chunkRes=finished.get();
        int idx=(int)(chunkRes.getId() - tstamp);
        consoleLogger.debug(""String_Node_Str"" + chunkRes.getId() + ""String_Node_Str""+ idx+ ""String_Node_Str"");
        if (0 == res.size()) {
          res.addAll(chunkRes);
          consoleLogger.debug(""String_Node_Str"");
        }
 else {
          consoleLogger.debug(""String_Node_Str"" + idx + ""String_Node_Str"");
          if (0 == idx) {
            consoleLogger.debug(""String_Node_Str"");
            int chunkTailIndex=chunkRes.getMaxIndex();
            SaxRecord chunkTail=chunkRes.getByIndex(chunkTailIndex);
            int resultHeadIndex=firstChunkSize - 1;
            while ((null == res.getByIndex(resultHeadIndex)) && (resultHeadIndex < (firstChunkSize + evenIncrement))) {
              resultHeadIndex++;
            }
            if (resultHeadIndex < (firstChunkSize + evenIncrement - 1)) {
              SaxRecord resHead=res.getByIndex(resultHeadIndex);
              consoleLogger.debug(""String_Node_Str"" + resultHeadIndex + ""String_Node_Str""+ String.valueOf(resHead.getPayload())+ ""String_Node_Str""+ chunkTailIndex+ ""String_Node_Str""+ String.valueOf(chunkTail.getPayload()));
              if (nrStrategy.equals(NumerosityReductionStrategy.EXACT) && Arrays.equals(chunkTail.getPayload(),res.getByIndex(resultHeadIndex).getPayload())) {
                consoleLogger.debug(""String_Node_Str"" + String.valueOf(res.getByIndex(resultHeadIndex).getPayload()) + ""String_Node_Str""+ resultHeadIndex+ ""String_Node_Str""+ String.valueOf(chunkTail.getPayload())+ ""String_Node_Str""+ chunkTailIndex);
                res.dropByIndex(resultHeadIndex);
              }
 else               if (nrStrategy.equals(NumerosityReductionStrategy.MINDIST) && (0.0 == SAXFactory.saxMinDist(chunkTail.getPayload(),res.getByIndex(resultHeadIndex).getPayload(),alphabet.getDistanceMatrix(alphabetSize)))) {
                consoleLogger.debug(""String_Node_Str"" + String.valueOf(res.getByIndex(resultHeadIndex).getPayload()) + ""String_Node_Str""+ resultHeadIndex+ ""String_Node_Str""+ String.valueOf(chunkTail.getPayload())+ ""String_Node_Str""+ chunkTailIndex);
                res.dropByIndex(resultHeadIndex);
              }
 else {
                consoleLogger.debug(""String_Node_Str"");
              }
            }
            res.addAll(chunkRes);
          }
 else {
            consoleLogger.debug(""String_Node_Str"" + idx);
{
              int resLeftmostIndex=res.getMinIndex();
              int chunkLeftmostIndex=chunkRes.getMinIndex();
              SaxRecord chunkLeftmostEntry=chunkRes.getByIndex(chunkLeftmostIndex);
              consoleLogger.debug(""String_Node_Str"" + resLeftmostIndex + ""String_Node_Str""+ chunkLeftmostIndex);
              if (resLeftmostIndex < chunkLeftmostIndex) {
                consoleLogger.debug(""String_Node_Str"");
                int leftOfChunkIndex=chunkLeftmostIndex;
                while ((null == res.getByIndex(leftOfChunkIndex)) && (leftOfChunkIndex >= resLeftmostIndex) && (leftOfChunkIndex >= chunkLeftmostIndex - evenIncrement)) {
                  leftOfChunkIndex--;
                }
                if (leftOfChunkIndex >= chunkLeftmostIndex - evenIncrement) {
                  SaxRecord resLeftEntry=res.getByIndex(leftOfChunkIndex);
                  consoleLogger.debug(""String_Node_Str"" + leftOfChunkIndex + ""String_Node_Str""+ String.valueOf(resLeftEntry.getPayload())+ ""String_Node_Str""+ chunkLeftmostIndex+ ""String_Node_Str""+ String.valueOf(chunkLeftmostEntry.getPayload()));
                  if (nrStrategy.equals(NumerosityReductionStrategy.EXACT) && Arrays.equals(resLeftEntry.getPayload(),chunkLeftmostEntry.getPayload())) {
                    consoleLogger.debug(""String_Node_Str"" + String.valueOf(chunkLeftmostEntry.getPayload()) + ""String_Node_Str""+ chunkLeftmostIndex+ ""String_Node_Str""+ String.valueOf(resLeftEntry.getPayload())+ ""String_Node_Str""+ leftOfChunkIndex);
                    chunkRes.dropByIndex(chunkLeftmostIndex);
                  }
 else                   if (nrStrategy.equals(NumerosityReductionStrategy.MINDIST) && (0.0 == SAXFactory.saxMinDist(resLeftEntry.getPayload(),chunkLeftmostEntry.getPayload(),alphabet.getDistanceMatrix(alphabetSize)))) {
                    consoleLogger.debug(""String_Node_Str"" + String.valueOf(resLeftEntry.getPayload()) + ""String_Node_Str""+ leftOfChunkIndex+ ""String_Node_Str""+ String.valueOf(chunkLeftmostEntry.getPayload())+ ""String_Node_Str""+ chunkLeftmostIndex);
                    res.dropByIndex(leftOfChunkIndex);
                  }
                }
              }
            }
{
              int resRightmostIndex=res.getMaxIndex();
              int chunkRightmostIndex=chunkRes.getMaxIndex();
              SaxRecord chunkRightmostEntry=chunkRes.getByIndex(chunkRightmostIndex);
              consoleLogger.debug(""String_Node_Str"" + resRightmostIndex + ""String_Node_Str""+ chunkRightmostIndex);
              if (resRightmostIndex > chunkRightmostIndex) {
                int rightOfChunkIndex=chunkRightmostIndex;
                while ((null == res.getByIndex(rightOfChunkIndex)) && (rightOfChunkIndex <= resRightmostIndex) && (rightOfChunkIndex <= chunkRightmostIndex + evenIncrement)) {
                  rightOfChunkIndex++;
                }
                if (rightOfChunkIndex <= chunkRightmostIndex + evenIncrement) {
                  SaxRecord resRightEntry=res.getByIndex(rightOfChunkIndex);
                  consoleLogger.debug(""String_Node_Str"" + rightOfChunkIndex + ""String_Node_Str""+ String.valueOf(resRightEntry.getPayload())+ ""String_Node_Str""+ chunkRightmostIndex+ ""String_Node_Str""+ String.valueOf(chunkRightmostEntry.getPayload()));
                  if (nrStrategy.equals(NumerosityReductionStrategy.EXACT) && Arrays.equals(resRightEntry.getPayload(),chunkRightmostEntry.getPayload())) {
                    consoleLogger.debug(""String_Node_Str"" + String.valueOf(resRightEntry.getPayload()) + ""String_Node_Str""+ rightOfChunkIndex+ ""String_Node_Str""+ String.valueOf(chunkRightmostEntry.getPayload())+ ""String_Node_Str""+ chunkRightmostIndex);
                    res.dropByIndex(rightOfChunkIndex);
                  }
 else                   if (nrStrategy.equals(NumerosityReductionStrategy.MINDIST) && (0.0 == SAXFactory.saxMinDist(resRightEntry.getPayload(),chunkRightmostEntry.getPayload(),alphabet.getDistanceMatrix(alphabetSize)))) {
                    consoleLogger.debug(""String_Node_Str"" + String.valueOf(resRightEntry.getPayload()) + ""String_Node_Str""+ rightOfChunkIndex+ ""String_Node_Str""+ String.valueOf(chunkRightmostEntry.getPayload())+ ""String_Node_Str""+ chunkRightmostIndex);
                    res.dropByIndex(rightOfChunkIndex);
                  }
                }
              }
            }
            res.addAll(chunkRes);
          }
        }
      }
      totalTaskCounter--;
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + StackTrace.toString(e));
  }
 finally {
    try {
      if (!executorService.awaitTermination(4,TimeUnit.HOURS)) {
        executorService.shutdownNow();
        if (!executorService.awaitTermination(30,TimeUnit.MINUTES))         System.err.println(""String_Node_Str"");
      }
    }
 catch (    InterruptedException ie) {
      System.err.println(""String_Node_Str"" + StackTrace.toString(ie));
      executorService.shutdownNow();
      Thread.currentThread().interrupt();
    }
  }
  return res;
}"
10543,"/** 
 * Test parallel SAX conversion.
 * @throws Exception if error occurs.
 */
@Test public void testParallelSAX() throws Exception {
  double[] ts=TSUtils.readFileColumn(filenameTEK14,0,0);
  SAXFrequencyData sequentialRes=SAXFactory.ts2saxZNorm(new Timeseries(ts),128,7,new NormalAlphabet(),7);
  String sequentialString=sequentialRes.getSAXString(""String_Node_Str"");
  ParallelSAXImplementation ps1=new ParallelSAXImplementation();
  SAXRecords parallelRes=ps1.process(ts,THREADS_NUM,128,7,7,NumerosityReductionStrategy.EXACT,0.005);
  assertTrue(sequentialString.equalsIgnoreCase(parallelRes.getSAXString(""String_Node_Str"")));
  SAXFrequencyData sequentialRes2=SAXFactory.data2sax(ts,100,8,4);
  String sequentialString2=sequentialRes2.getSAXString(""String_Node_Str"");
  ParallelSAXImplementation ps2=new ParallelSAXImplementation();
  SAXRecords parallelRes2=ps2.process(ts,THREADS_NUM,100,8,4,NumerosityReductionStrategy.EXACT,0.005);
  assertTrue(sequentialString2.equalsIgnoreCase(parallelRes2.getSAXString(""String_Node_Str"")));
}","/** 
 * Test parallel SAX conversion.
 * @throws Exception if error occurs.
 */
@Test public void testParallelSAX() throws Exception {
  double[] ts=TSUtils.readFileColumn(filenameTEK14,0,0);
  SAXFrequencyData sequentialRes=SAXFactory.ts2saxZNorm(new Timeseries(ts),128,7,new NormalAlphabet(),7);
  String sequentialString=sequentialRes.getSAXString(""String_Node_Str"");
  ParallelSAXImplementation ps1=new ParallelSAXImplementation();
  SAXRecords parallelRes=ps1.process(ts,THREADS_NUM,128,7,7,NumerosityReductionStrategy.EXACT,0.005);
  assertTrue(sequentialString.equalsIgnoreCase(parallelRes.getSAXString(""String_Node_Str"")));
  for (  int i : parallelRes.getIndexes()) {
    String entrySerial=sequentialRes.getPositionsAndWords().get(i);
    String entryParallel=String.valueOf(parallelRes.getByIndex(i).getPayload());
    assertTrue(entrySerial.equalsIgnoreCase(entryParallel));
  }
  SAXFrequencyData sequentialRes2=SAXFactory.data2sax(ts,100,8,4);
  String sequentialString2=sequentialRes2.getSAXString(""String_Node_Str"");
  ParallelSAXImplementation ps2=new ParallelSAXImplementation();
  SAXRecords parallelRes2=ps2.process(ts,THREADS_NUM,100,8,4,NumerosityReductionStrategy.EXACT,0.005);
  assertTrue(sequentialString2.equalsIgnoreCase(parallelRes2.getSAXString(""String_Node_Str"")));
  for (  int i : parallelRes2.getIndexes()) {
    String entrySerial=sequentialRes2.getPositionsAndWords().get(i);
    String entryParallel=String.valueOf(parallelRes2.getByIndex(i).getPayload());
    assertTrue(entrySerial.equalsIgnoreCase(entryParallel));
  }
}"
10544,"private File getReleaseApkFile(AndroidPublisherExtension publisherExtension){
  String variantName=publisherExtension.getVariantName();
  DefaultDomainObjectSet<ApplicationVariant> variants=getProject().getExtensions().getByType(AppExtension.class).getApplicationVariants();
  ApplicationVariant releaseVariant=null;
  for (  ApplicationVariant variant : variants) {
    if (variant.getName().equals(variantName)) {
      releaseVariant=variant;
      break;
    }
  }
  if (releaseVariant == null) {
    throw new InvalidUserDataException(String.format(""String_Node_Str"",variantName));
  }
  for (  BaseVariantOutput output : releaseVariant.getOutputs()) {
    if (output != null) {
      getLogger().info(""String_Node_Str"" + output.getName());
      if (output.getName().endsWith(""String_Node_Str""))       return output.getOutputFile();
    }
  }
  throw new InvalidUserDataException(String.format(""String_Node_Str"",variantName));
}","private File getReleaseApkFile(AndroidPublisherExtension publisherExtension){
  String variantName=publisherExtension.getVariantName();
  DefaultDomainObjectSet<ApplicationVariant> variants=getProject().getExtensions().getByType(AppExtension.class).getApplicationVariants();
  ApplicationVariant releaseVariant=null;
  for (  ApplicationVariant variant : variants) {
    if (variant.getName().equals(variantName)) {
      releaseVariant=variant;
      break;
    }
  }
  if (releaseVariant == null) {
    throw new InvalidUserDataException(String.format(""String_Node_Str"",variantName));
  }
  for (  BaseVariantOutput output : releaseVariant.getOutputs()) {
    if (output != null) {
      return output.getOutputFile();
    }
  }
  throw new InvalidUserDataException(String.format(""String_Node_Str"",variantName));
}"
10545,"private AndroidPublisherExtension getAndVerifyExtension(){
  AndroidPublisherExtension publisherExtension=getProject().getExtensions().getByType(AndroidPublisherExtension.class);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(publisherExtension.getApplicationName()),""String_Node_Str"");
  Preconditions.checkArgument(!Strings.isNullOrEmpty(publisherExtension.getTrack()),""String_Node_Str"");
  Preconditions.checkArgument(!Strings.isNullOrEmpty(publisherExtension.getTrack()),""String_Node_Str"");
  Preconditions.checkArgument(!Strings.isNullOrEmpty(publisherExtension.getPackageName()),""String_Node_Str"");
  Preconditions.checkArgument(!Strings.isNullOrEmpty(publisherExtension.getServiceAccountEmail()),""String_Node_Str"");
  Preconditions.checkArgument(publisherExtension.getServiceAccountKeyFile() != null,""String_Node_Str"");
  return publisherExtension;
}","private AndroidPublisherExtension getAndVerifyExtension(){
  AndroidPublisherExtension publisherExtension=getProject().getExtensions().getByType(AndroidPublisherExtension.class);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(publisherExtension.getApplicationName()),""String_Node_Str"");
  Preconditions.checkArgument(!Strings.isNullOrEmpty(publisherExtension.getTrack()),""String_Node_Str"");
  Preconditions.checkArgument(!Strings.isNullOrEmpty(publisherExtension.getPromotionTrack()),""String_Node_Str"");
  Preconditions.checkArgument(!publisherExtension.getTrack().equals(publisherExtension.getPromotionTrack()),""String_Node_Str"");
  Preconditions.checkArgument(!Strings.isNullOrEmpty(publisherExtension.getPackageName()),""String_Node_Str"");
  Preconditions.checkArgument(!Strings.isNullOrEmpty(publisherExtension.getServiceAccountEmail()),""String_Node_Str"");
  Preconditions.checkArgument(publisherExtension.getServiceAccountKeyFile() != null,""String_Node_Str"");
  return publisherExtension;
}"
10546,"private void promoteApk(AndroidPublisherExtension publisherExtension){
  try {
    AndroidPublisher service=AndroidPublisherHelper.init(publisherExtension.getApplicationName(),publisherExtension.getServiceAccountEmail(),publisherExtension.getServiceAccountKeyFile());
    final Edits edits=service.edits();
    Insert editRequest=edits.insert(publisherExtension.getPackageName(),null);
    AppEdit edit=editRequest.execute();
    final String editId=edit.getId();
    getLogger().info(String.format(""String_Node_Str"",editId));
    Tracks.List list=edits.tracks().list(publisherExtension.getPackageName(),editId);
    List<Track> tracks=list.execute().getTracks();
    Track sourceTrack=null;
    Track destinationTrack=null;
    for (    Track track : tracks) {
      if (track.getTrack().equals(publisherExtension.getTrack()))       sourceTrack=track;
 else       if (track.getTrack().equals(publisherExtension.getPromotionTrack()))       destinationTrack=track;
    }
    if (sourceTrack == null || destinationTrack == null) {
      throw new InvalidUserDataException(String.format(""String_Node_Str"",publisherExtension.getTrack(),publisherExtension.getPromotionTrack()));
    }
    if (sourceTrack.getVersionCodes().size() == 0) {
      throw new InvalidUserDataException(String.format(""String_Node_Str"",sourceTrack.getVersionCodes()));
    }
    getLogger().info(""String_Node_Str"",sourceTrack.getTrack(),sourceTrack.getVersionCodes());
    getLogger().info(""String_Node_Str"",destinationTrack.getTrack(),destinationTrack.getVersionCodes());
    Integer versionCode=Collections.max(sourceTrack.getVersionCodes());
    List<Integer> sourceVersionCodes=sourceTrack.getVersionCodes();
    sourceVersionCodes.remove(versionCode);
    sourceTrack.setVersionCodes(sourceVersionCodes);
    List<Integer> destinationVersionCodes=new ArrayList<Integer>();
    destinationVersionCodes.add(versionCode);
    destinationTrack.setVersionCodes(destinationVersionCodes);
    getLogger().info(""String_Node_Str"",versionCode);
    Update sourceUpdateRequest=edits.tracks().update(publisherExtension.getPackageName(),editId,sourceTrack.getTrack(),sourceTrack);
    sourceUpdateRequest.execute();
    getLogger().info(String.format(""String_Node_Str"",sourceTrack.getTrack()));
    Update destinationUpdateRequest=edits.tracks().update(publisherExtension.getPackageName(),editId,destinationTrack.getTrack(),destinationTrack);
    getLogger().info(String.format(""String_Node_Str"",destinationTrack.getTrack()));
    destinationUpdateRequest.execute();
    Commit commitRequest=edits.commit(publisherExtension.getPackageName(),editId);
    AppEdit appEdit=commitRequest.execute();
    getLogger().info(String.format(""String_Node_Str"",appEdit.getId()));
    getLogger().lifecycle(""String_Node_Str"",versionCode,sourceTrack.getTrack(),destinationTrack.getTrack());
  }
 catch (  IOException e) {
    throw new InvalidUserDataException(String.format(""String_Node_Str"",publisherExtension.getTrack(),publisherExtension.getPromotionTrack(),e.getMessage()),e);
  }
catch (  GeneralSecurityException e) {
    throw new InvalidUserDataException(String.format(""String_Node_Str"",publisherExtension.getTrack(),publisherExtension.getPromotionTrack(),e.getMessage()),e);
  }
}","private void promoteApk(AndroidPublisherExtension publisherExtension){
  try {
    AndroidPublisher service=AndroidPublisherHelper.init(publisherExtension.getApplicationName(),publisherExtension.getServiceAccountEmail(),publisherExtension.getServiceAccountKeyFile());
    final Edits edits=service.edits();
    Insert editRequest=edits.insert(publisherExtension.getPackageName(),null);
    AppEdit edit=editRequest.execute();
    final String editId=edit.getId();
    getLogger().info(""String_Node_Str"",editId);
    Tracks.Get get=edits.tracks().get(publisherExtension.getPackageName(),editId,publisherExtension.getTrack());
    Track sourceTrack=get.execute();
    if (sourceTrack == null) {
      throw new InvalidUserDataException(String.format(""String_Node_Str"",publisherExtension.getTrack()));
    }
    if (sourceTrack.getVersionCodes().size() == 0) {
      throw new InvalidUserDataException(String.format(""String_Node_Str"",sourceTrack.getVersionCodes()));
    }
    getLogger().info(""String_Node_Str"",sourceTrack.getTrack(),sourceTrack.getVersionCodes());
    getLogger().info(""String_Node_Str"",publisherExtension.getPromotionTrack());
    Integer versionCode=Collections.max(sourceTrack.getVersionCodes());
    List<Integer> sourceVersionCodes=sourceTrack.getVersionCodes();
    sourceVersionCodes.remove((Object)versionCode);
    sourceTrack.setVersionCodes(sourceVersionCodes);
    List<Integer> destinationVersionCodes=new ArrayList<Integer>();
    destinationVersionCodes.add(versionCode);
    Track destinationTrack=new Track();
    destinationTrack.setTrack(publisherExtension.getPromotionTrack());
    destinationTrack.setVersionCodes(destinationVersionCodes);
    getLogger().info(""String_Node_Str"",versionCode);
    Update sourceUpdateRequest=edits.tracks().update(publisherExtension.getPackageName(),editId,sourceTrack.getTrack(),sourceTrack);
    sourceUpdateRequest.execute();
    getLogger().info(""String_Node_Str"",sourceTrack.getTrack());
    Update destinationUpdateRequest=edits.tracks().update(publisherExtension.getPackageName(),editId,destinationTrack.getTrack(),destinationTrack);
    getLogger().info(""String_Node_Str"",destinationTrack.getTrack());
    destinationUpdateRequest.execute();
    Commit commitRequest=edits.commit(publisherExtension.getPackageName(),editId);
    AppEdit appEdit=commitRequest.execute();
    getLogger().info(""String_Node_Str"",appEdit.getId());
    getLogger().lifecycle(""String_Node_Str"",versionCode,sourceTrack.getTrack(),destinationTrack.getTrack());
  }
 catch (  IOException e) {
    throw new InvalidUserDataException(String.format(""String_Node_Str"",publisherExtension.getTrack(),publisherExtension.getPromotionTrack(),e.getMessage()),e);
  }
catch (  GeneralSecurityException e) {
    throw new InvalidUserDataException(String.format(""String_Node_Str"",publisherExtension.getTrack(),publisherExtension.getPromotionTrack(),e.getMessage()),e);
  }
}"
10547,"public static Object parseToObject(String type,List<String> values){
  if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    return values.get(0);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return values;
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Integer(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toIntArray(values);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Short(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toShortArray(values);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Byte(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toByteArray(values);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Long(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toLongArray(values);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Float(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toFloatArray(values);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return Boolean.valueOf(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toBooleanArray(values);
  }
 else   if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    return DatatypeConverter.parseTime(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Double(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toDoubleArray(values);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + type + values.get(0));
  }
}","public static Object parseToObject(String type,List<String> values){
  if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    return values.get(0);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return values.toArray(new String[values.size()]);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Integer(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toIntArray(values);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Short(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toShortArray(values);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Byte(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toByteArray(values);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Long(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toLongArray(values);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Float(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toFloatArray(values);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return Boolean.valueOf(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toBooleanArray(values);
  }
 else   if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    return DatatypeConverter.parseTime(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Double(values.get(0));
  }
 else   if (""String_Node_Str"".equals(type)) {
    return toDoubleArray(values);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + type + values.get(0));
  }
}"
10548,"/** 
 * Create an alarm against the given managed entity using the alarm specification
 * @param me The  {@link ManagedEntity} to alarm against.
 * @param as The  {@link AlarmSpec} used to generate the alarm.
 * @return The new {@link ALarm} created
 * @throws InvalidName if the alarm name exceeds the max length or is empty.
 * @throws DuplicateName if an alarm with the same name already exists.
 * @throws RuntimeFault if any unhandled runtime fault occurs
 * @throws RemoteException
 */
public Alarm createAlarm(ManagedEntity me,AlarmSpec as) throws InvalidName, DuplicateName, RuntimeFault, RemoteException {
  if (me == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ManagedObjectReference mor=getVimService().createAlarm(getMOR(),me.getMOR(),as);
  return new Alarm(getServerConnection(),mor);
}","/** 
 * Create an alarm against the given managed entity using the alarm specification
 * @param me The  {@link ManagedEntity} to alarm against.
 * @param as The  {@link AlarmSpec} used to generate the alarm.
 * @return The new {@link Alarm} created
 * @throws InvalidName if the alarm name exceeds the max length or is empty.
 * @throws DuplicateName if an alarm with the same name already exists.
 * @throws RuntimeFault if any unhandled runtime fault occurs
 * @throws RemoteException
 */
public Alarm createAlarm(ManagedEntity me,AlarmSpec as) throws InvalidName, DuplicateName, RuntimeFault, RemoteException {
  if (me == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ManagedObjectReference mor=getVimService().createAlarm(getMOR(),me.getMOR(),as);
  return new Alarm(getServerConnection(),mor);
}"
10549,"/** 
 * @param propertyName The property name of current managed object
 * @return it will return either an array of related data objects, or an data object itself.ManagedObjectReference objects are data objects!!!
 * @throws RemoteException
 * @throws RuntimeFault
 * @throws InvalidProperty
 */
protected Object getCurrentProperty(String propertyName){
  ObjectContent objContent=retrieveObjectProperties(new String[]{propertyName});
  Object propertyValue=null;
  if (objContent != null) {
    DynamicProperty[] dynaProps=objContent.getPropSet();
    if ((dynaProps != null) && (dynaProps[0] != null)) {
      propertyValue=PropertyCollectorUtil.convertProperty(dynaProps[0].getVal());
    }
  }
  return propertyValue;
}","/** 
 * @param propertyName The property name of current managed object
 * @return it will return either an array of related data objects, or an data object itself.ManagedObjectReference objects are data objects!!!
 */
protected Object getCurrentProperty(String propertyName){
  ObjectContent objContent=retrieveObjectProperties(new String[]{propertyName});
  Object propertyValue=null;
  if (objContent != null) {
    DynamicProperty[] dynaProps=objContent.getPropSet();
    if ((dynaProps != null) && (dynaProps[0] != null)) {
      propertyValue=PropertyCollectorUtil.convertProperty(dynaProps[0].getVal());
    }
  }
  return propertyValue;
}"
10550,"private static byte[] toByteArray(List<String> values){
  byte[] bs=new byte[values.size()];
  for (int i=0; i < bs.length; i++) {
    bs[i]=Byte.parseByte(values.get(i));
  }
  return bs;
}","protected static byte[] toByteArray(List<String> values){
  byte[] bs=new byte[values.size()];
  try {
    for (int i=0; i < bs.length; i++) {
      bs[i]=Byte.parseByte(values.get(i));
    }
    return bs;
  }
 catch (  NumberFormatException ignore) {
    String tempStr=""String_Node_Str"";
    for (    String s : values) {
      tempStr+=s;
    }
    return DatatypeConverter.parseBase64Binary(tempStr);
  }
}"
10551,"/** 
 * Retrieves properties from multiple managed objects.
 * @param mos       the array of managed objects which could be of single type or mixed types. When they are mix-typed,the moType must be super type of all these managed objects.
 * @param moType    the type of the managed object. This managed object type must have all the properties defined asin propPaths.
 * @param propPaths the array of property path which has dot as separator, for example, ""name"", ""guest.toolsStatus"".
 * @return an array of Hashtable whose order is the same as the mos array. Each Hashtable has the properties forone managed object. Note: some of the properties you want to retrieve might not be set, and therefore you don't have an entry in the Hashtable at all. In other words, it's possible for you to get null for a property from the resulted Hashtable.
 * @throws InvalidProperty
 * @throws RuntimeFault
 * @throws RemoteException
 */
public static Hashtable[] retrieveProperties(ManagedObject[] mos,String moType,String[] propPaths) throws InvalidProperty, RuntimeFault, RemoteException {
  if (mos == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mos.length == 0 || mos[0] == null) {
    return new Hashtable[]{};
  }
  PropertyCollector pc=mos[0].getServerConnection().getServiceInstance().getPropertyCollector();
  ObjectSpec[] oss=new ObjectSpec[mos.length];
  for (int i=0; i < oss.length; i++) {
    oss[i]=new ObjectSpec();
    oss[i].setObj(mos[i].getMOR());
  }
  PropertySpec pSpec=createPropertySpec(moType,false,propPaths);
  PropertyFilterSpec pfs=new PropertyFilterSpec();
  pfs.setObjectSet(oss);
  pfs.setPropSet(new PropertySpec[]{pSpec});
  ObjectContent[] objs=pc.retrieveProperties(new PropertyFilterSpec[]{pfs});
  Hashtable[] pTables=new Hashtable[mos.length];
  for (int i=0; objs != null && i < objs.length && objs[i] != null; i++) {
    DynamicProperty[] props=objs[i].getPropSet();
    ManagedObjectReference mor=objs[i].getObj();
    int index;
    if (mor.getType().equals(mos[i].getMOR().getType()) && mor.get_value().equals(mos[i].getMOR().get_value())) {
      index=i;
    }
 else {
      index=findIndex(mos,mor);
      if (index == -1) {
        throw new RuntimeException(""String_Node_Str"" + mor.getType() + ""String_Node_Str""+ mor.get_value());
      }
    }
    pTables[index]=new Hashtable();
    for (int j=0; props != null && j < props.length; j++) {
      Object obj=convertProperty(props[j].getVal());
      if (obj == null) {
        obj=NULL;
      }
      pTables[index].put(props[j].getName(),obj);
    }
  }
  return pTables;
}","/** 
 * Retrieves properties from multiple managed objects.
 * @param mos       the array of managed objects which could be of single type or mixed types. When they are mix-typed,the moType must be super type of all these managed objects.
 * @param moType    the type of the managed object. This managed object type must have all the properties defined asin propPaths.
 * @param propPaths the array of property path which has dot as separator, for example, ""name"", ""guest.toolsStatus"".
 * @return an array of Hashtable whose order is the same as the mos array. Each Hashtable has the properties forone managed object. Note: some of the properties you want to retrieve might not be set, and therefore you don't have an entry in the Hashtable at all. In other words, it's possible for you to get null for a property from the resulted Hashtable.
 * @throws InvalidProperty
 * @throws RuntimeFault
 * @throws RemoteException
 */
public static Hashtable[] retrieveProperties(ManagedObject[] mos,String moType,String[] propPaths) throws InvalidProperty, RuntimeFault, RemoteException {
  if (mos == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mos.length == 0 || mos[0] == null) {
    return new Hashtable[]{};
  }
  PropertyCollector pc=getPropertyCollector(mos[0]);
  ObjectSpec[] oss=new ObjectSpec[mos.length];
  for (int i=0; i < oss.length; i++) {
    oss[i]=new ObjectSpec();
    oss[i].setObj(mos[i].getMOR());
  }
  PropertySpec pSpec=createPropertySpec(moType,false,propPaths);
  PropertyFilterSpec pfs=new PropertyFilterSpec();
  pfs.setObjectSet(oss);
  pfs.setPropSet(new PropertySpec[]{pSpec});
  ObjectContent[] objs=pc.retrieveProperties(new PropertyFilterSpec[]{pfs});
  Hashtable[] pTables=new Hashtable[mos.length];
  for (int i=0; objs != null && i < objs.length && objs[i] != null; i++) {
    DynamicProperty[] props=objs[i].getPropSet();
    ManagedObjectReference mor=objs[i].getObj();
    int index;
    if (mor.getType().equals(mos[i].getMOR().getType()) && mor.get_value().equals(mos[i].getMOR().get_value())) {
      index=i;
    }
 else {
      index=findIndex(mos,mor);
      if (index == -1) {
        throw new RuntimeException(""String_Node_Str"" + mor.getType() + ""String_Node_Str""+ mor.get_value());
      }
    }
    pTables[index]=new Hashtable();
    for (int j=0; props != null && j < props.length; j++) {
      Object obj=convertProperty(props[j].getVal());
      if (obj == null) {
        obj=NULL;
      }
      pTables[index].put(props[j].getName(),obj);
    }
  }
  return pTables;
}"
10552,"public static Object convertProperty(Object dynaPropVal){
  Object propertyValue=null;
  Class<?> propClass=dynaPropVal.getClass();
  String propName=propClass.getName();
  if (propName.contains(""String_Node_Str"")) {
    String methodName=propName.substring(propName.indexOf(""String_Node_Str"") + ""String_Node_Str"".length());
    try {
      Method getMethod;
      try {
        getMethod=propClass.getMethod(""String_Node_Str"" + methodName,(Class[])null);
      }
 catch (      NoSuchMethodException nsme) {
        getMethod=propClass.getMethod(""String_Node_Str"" + methodName.toLowerCase(),(Class[])null);
      }
      propertyValue=getMethod.invoke(dynaPropVal,(Object[])null);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
    }
  }
 else   if (dynaPropVal.getClass().isArray()) {
    propertyValue=dynaPropVal;
  }
 else {
    propertyValue=dynaPropVal;
  }
  return propertyValue;
}","public static Object convertProperty(Object dynaPropVal){
  Object propertyValue=null;
  Class<?> propClass=dynaPropVal.getClass();
  String propName=propClass.getName();
  if (propName.contains(""String_Node_Str"")) {
    String methodName=propName.substring(propName.indexOf(""String_Node_Str"") + ""String_Node_Str"".length());
    try {
      Method getMethod;
      try {
        getMethod=propClass.getMethod(""String_Node_Str"" + methodName,(Class[])null);
      }
 catch (      NoSuchMethodException ignore) {
        getMethod=propClass.getMethod(""String_Node_Str"" + methodName.toLowerCase(),(Class[])null);
      }
      propertyValue=getMethod.invoke(dynaPropVal,(Object[])null);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
    }
  }
 else   if (dynaPropVal.getClass().isArray()) {
    propertyValue=dynaPropVal;
  }
 else {
    propertyValue=dynaPropVal;
  }
  return propertyValue;
}"
10553,"private InputStream post(String payload){
  CloseableHttpClient httpclient;
  RequestConfig requestConfig=RequestConfig.custom().setConnectTimeout(this.connectTimeout).setSocketTimeout(this.readTimeout).build();
  if (trustAllSSL) {
    httpclient=HttpClients.custom().setSSLSocketFactory(ApacheTrustSelfSigned.trust()).build();
  }
 else {
    httpclient=HttpClients.createDefault();
  }
  HttpPost httpPost;
  StringEntity stringEntity;
  try {
    stringEntity=new StringEntity(payload);
    log.trace(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"" + payload,e);
    return null;
  }
  try {
    httpPost=new HttpPost(this.baseUrl.toURI());
  }
 catch (  URISyntaxException e) {
    log.error(""String_Node_Str"" + this.baseUrl.toString(),e);
    return null;
  }
  httpPost.setConfig(requestConfig);
  httpPost.setHeader(SoapAction.SOAP_ACTION_HEADER.toString(),soapAction);
  httpPost.setHeader(""String_Node_Str"",""String_Node_Str"");
  if (cookie != null) {
    log.trace(""String_Node_Str"");
    httpPost.setHeader(""String_Node_Str"",cookie);
  }
  httpPost.setEntity(stringEntity);
  try {
    CloseableHttpResponse response=httpclient.execute(httpPost);
    InputStream inputStream=response.getEntity().getContent();
    if (cookie == null) {
      Header cookieHeader=(Header)response.headerIterator(""String_Node_Str"");
      cookie=cookieHeader.getValue();
    }
    return inputStream;
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
  return null;
}","private InputStream post(String payload){
  CloseableHttpClient httpclient;
  RequestConfig requestConfig=RequestConfig.custom().setConnectTimeout(this.connectTimeout).setSocketTimeout(this.readTimeout).build();
  if (trustAllSSL) {
    httpclient=HttpClients.custom().setSSLSocketFactory(ApacheTrustSelfSigned.trust()).build();
  }
 else {
    httpclient=HttpClients.createDefault();
  }
  HttpPost httpPost;
  StringEntity stringEntity;
  try {
    stringEntity=new StringEntity(payload);
    log.trace(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"" + payload,e);
    return null;
  }
  try {
    httpPost=new HttpPost(this.baseUrl.toURI());
  }
 catch (  URISyntaxException e) {
    log.error(""String_Node_Str"" + this.baseUrl.toString(),e);
    return null;
  }
  httpPost.setConfig(requestConfig);
  httpPost.setHeader(SoapAction.SOAP_ACTION_HEADER.toString(),soapAction);
  httpPost.setHeader(""String_Node_Str"",""String_Node_Str"");
  if (cookie != null) {
    log.trace(""String_Node_Str"");
    httpPost.setHeader(""String_Node_Str"",cookie);
  }
  httpPost.setEntity(stringEntity);
  try {
    CloseableHttpResponse response=httpclient.execute(httpPost);
    InputStream inputStream=response.getEntity().getContent();
    if (cookie == null) {
      Header[] headers=response.getAllHeaders();
      for (      Header header : headers) {
        if (header.getName().equals(""String_Node_Str"")) {
          cookie=header.getValue();
          break;
        }
      }
    }
    return inputStream;
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
  return null;
}"
10554,"public static SSLConnectionSocketFactory trust(){
  SSLContextBuilder builder=new SSLContextBuilder();
  log.trace(""String_Node_Str"");
  try {
    builder.loadTrustMaterial(null,new TrustSelfSignedStrategy());
    log.trace(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
catch (  KeyStoreException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
  SSLConnectionSocketFactory sslConnectionSocketFactory;
  try {
    sslConnectionSocketFactory=new SSLConnectionSocketFactory(builder.build());
    log.trace(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
catch (  KeyManagementException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
  log.trace(""String_Node_Str"");
  return sslConnectionSocketFactory;
}","public static SSLConnectionSocketFactory trust(){
  SSLContextBuilder builder=new SSLContextBuilder();
  log.trace(""String_Node_Str"");
  try {
    builder.loadTrustMaterial(null,new TrustSelfSignedStrategy());
    log.trace(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
catch (  KeyStoreException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
  SSLConnectionSocketFactory sslConnectionSocketFactory;
  try {
    sslConnectionSocketFactory=new SSLConnectionSocketFactory(builder.build(),new AllowAllHostnameVerifier());
    log.trace(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
catch (  KeyManagementException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
  log.trace(""String_Node_Str"");
  return sslConnectionSocketFactory;
}"
10555,"/** 
 * Copyright 2009 NetApp, contribution by Eric Forgette Modified by Steve Jin (sjin@vmware.com) This constructor builds a new ServiceInstance based on a ServiceInstance. The new ServiceInstance is effectively a clone of the first.  This clone will NOT become invalid when the first is logged out.
 * @author Eric Forgette (forgette@netapp.com)
 * @throws RemoteException 
 * @throws RuntimeFault 
 * @throws InvalidLogin 
 * @throws MalformedURLException 
 */
public ServiceInstance cloneSession(boolean ignoreCert) throws InvalidLogin, RuntimeFault, RemoteException, MalformedURLException {
  ServiceInstance oldsi=getServerConnection().getServiceInstance();
  ServerConnection oldsc=oldsi.getServerConnection();
  String ticket=oldsi.getSessionManager().acquireCloneTicket();
  VimPortType vimService=new VimPortType(oldsc.getUrl().toString(),ignoreCert);
  vimService.getWsc().setVimNameSpace(oldsc.getVimService().getWsc().getVimNameSpace());
  ServerConnection newsc=new ServerConnection(oldsc.getUrl(),vimService,null);
  ServiceInstance newsi=new ServiceInstance(newsc);
  newsc.setServiceInstance(newsi);
  UserSession userSession=newsi.getSessionManager().cloneSession(ticket);
  newsc.setUserSession(userSession);
  return newsi;
}","/** 
 * Copyright 2009 NetApp, contribution by Eric Forgette Modified by Steve Jin (sjin@vmware.com) This constructor builds a new ServiceInstance based on a ServiceInstance. The new ServiceInstance is effectively a clone of the first.  This clone will NOT become invalid when the first is logged out.
 * @author Eric Forgette (forgette@netapp.com)
 * @throws RemoteException 
 * @throws RuntimeFault 
 * @throws InvalidLogin 
 * @throws MalformedURLException 
 */
public ServiceInstance cloneSession(boolean ignoreCert) throws InvalidLogin, RuntimeFault, RemoteException, MalformedURLException {
  ServiceInstance oldsi=getServerConnection().getServiceInstance();
  ServerConnection oldsc=oldsi.getServerConnection();
  String ticket=oldsi.getSessionManager().acquireCloneTicket();
  VimPortType vimService=new VimPortType(oldsc.getUrl().toString(),ignoreCert);
  vimService.getWsc().setVimNameSpace(oldsc.getVimService().getWsc().getVimNameSpace());
  vimService.getWsc().setSoapActionOnApiVersion(oldsi.getAboutInfo().getApiVersion());
  ServerConnection newsc=new ServerConnection(oldsc.getUrl(),vimService,null);
  ServiceInstance newsi=new ServiceInstance(newsc);
  newsc.setServiceInstance(newsi);
  UserSession userSession=newsi.getSessionManager().cloneSession(ticket);
  newsc.setUserSession(userSession);
  return newsi;
}"
10556,"private static void toXML(StringBuffer sb,String tagName,Class type,Object obj){
  Class<?> clazz=obj.getClass();
  if (clazz.isArray()) {
    if (obj.getClass() == INT_ARRAY_CLASS) {
      int[] objs=(int[])obj;
      for (int i=0; i < objs.length; i++) {
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
        sb.append(objs[i]);
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
      }
    }
 else     if (obj.getClass() == BYTE_ARRAY_CLASS) {
      byte[] objs=(byte[])obj;
      for (int i=0; i < objs.length; i++) {
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
        sb.append(objs[i]);
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
      }
    }
 else {
      Object[] objs=(Object[])obj;
      for (int i=0; i < objs.length; i++) {
        toXML(sb,tagName,type.getComponentType(),objs[i]);
      }
    }
  }
 else   if (clazz == ManagedObjectReference.class) {
    ManagedObjectReference mor=(ManagedObjectReference)obj;
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ mor.type+ ""String_Node_Str"");
    sb.append(mor.val);
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
 else   if (clazz.getCanonicalName().startsWith(""String_Node_Str"")) {
    if (clazz != type) {
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ getXSIType(obj)+ ""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
    }
    sb.append(obj);
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
 else   if (clazz.isEnum()) {
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ obj+ ""String_Node_Str""+ tagName+ ""String_Node_Str"");
  }
 else   if (obj instanceof Calendar) {
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ DatatypeConverter.printDateTime((Calendar)obj)+ ""String_Node_Str""+ tagName+ ""String_Node_Str"");
  }
 else {
    if (clazz == type) {
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
    }
 else {
      String nameSpaceType=clazz.getSimpleName();
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ nameSpaceType+ ""String_Node_Str"");
    }
    Field[] fields=getAllFields(clazz);
    for (int i=0; i < fields.length; i++) {
      Field f=fields[i];
      String fName=f.getName();
      Object value=null;
      try {
        value=f.get(obj);
      }
 catch (      IllegalAccessException iae) {
        iae.printStackTrace();
      }
      if (value == null) {
        continue;
      }
      Class<?> fType=f.getType();
      toXML(sb,fName,fType,value);
    }
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
}","private static void toXML(StringBuffer sb,String tagName,Class type,Object obj){
  Class<?> clazz=obj.getClass();
  if (clazz.isArray()) {
    if (obj.getClass() == INT_ARRAY_CLASS) {
      int[] objs=(int[])obj;
      for (int i=0; i < objs.length; i++) {
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
        sb.append(objs[i]);
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
      }
    }
 else     if (obj.getClass() == BYTE_ARRAY_CLASS) {
      byte[] objs=(byte[])obj;
      for (int i=0; i < objs.length; i++) {
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
        sb.append(objs[i]);
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
      }
    }
 else     if (obj.getClass() == LONG_ARRAY_CLASS) {
      long[] objs=(long[])obj;
      for (int i=0; i < objs.length; i++) {
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
        sb.append(objs[i]);
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
      }
    }
 else {
      Object[] objs=(Object[])obj;
      for (int i=0; i < objs.length; i++) {
        toXML(sb,tagName,type.getComponentType(),objs[i]);
      }
    }
  }
 else   if (clazz == ManagedObjectReference.class) {
    ManagedObjectReference mor=(ManagedObjectReference)obj;
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ mor.type+ ""String_Node_Str"");
    sb.append(mor.val);
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
 else   if (clazz.getCanonicalName().startsWith(""String_Node_Str"")) {
    if (clazz != type) {
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ getXSIType(obj)+ ""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
    }
    sb.append(obj);
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
 else   if (clazz.isEnum()) {
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ obj+ ""String_Node_Str""+ tagName+ ""String_Node_Str"");
  }
 else   if (obj instanceof Calendar) {
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ DatatypeConverter.printDateTime((Calendar)obj)+ ""String_Node_Str""+ tagName+ ""String_Node_Str"");
  }
 else {
    if (clazz == type) {
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
    }
 else {
      String nameSpaceType=clazz.getSimpleName();
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ nameSpaceType+ ""String_Node_Str"");
    }
    Field[] fields=getAllFields(clazz);
    for (int i=0; i < fields.length; i++) {
      Field f=fields[i];
      String fName=f.getName();
      Object value=null;
      try {
        value=f.get(obj);
      }
 catch (      IllegalAccessException iae) {
        iae.printStackTrace();
      }
      if (value == null) {
        continue;
      }
      Class<?> fType=f.getType();
      toXML(sb,fName,fType,value);
    }
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
}"
10557,"public InputStream post(String soapMsg) throws IOException {
  HttpURLConnection postCon=(HttpURLConnection)baseUrl.openConnection();
  if (connectTimeout > 0)   postCon.setConnectTimeout(connectTimeout);
  if (readTimeout > 0)   postCon.setReadTimeout(readTimeout);
  try {
    postCon.setRequestMethod(""String_Node_Str"");
  }
 catch (  ProtocolException e) {
    e.printStackTrace();
  }
  postCon.setDoOutput(true);
  postCon.setDoInput(true);
  postCon.setRequestProperty(SOAP_ACTION_HEADER,soapAction);
  if (cookie != null) {
    postCon.setRequestProperty(""String_Node_Str"",cookie);
  }
  OutputStream os=postCon.getOutputStream();
  OutputStreamWriter out=new OutputStreamWriter(os);
  out.write(soapMsg);
  out.close();
  InputStream is;
  try {
    is=postCon.getInputStream();
  }
 catch (  IOException ioe) {
    is=postCon.getErrorStream();
  }
  if (cookie == null) {
    cookie=postCon.getHeaderField(""String_Node_Str"");
  }
  return is;
}","public InputStream post(String soapMsg) throws IOException {
  HttpURLConnection postCon=(HttpURLConnection)baseUrl.openConnection();
  if (connectTimeout > 0)   postCon.setConnectTimeout(connectTimeout);
  if (readTimeout > 0)   postCon.setReadTimeout(readTimeout);
  try {
    postCon.setRequestMethod(""String_Node_Str"");
  }
 catch (  ProtocolException e) {
    e.printStackTrace();
  }
  postCon.setDoOutput(true);
  postCon.setDoInput(true);
  postCon.setRequestProperty(SOAP_ACTION_HEADER,soapAction);
  postCon.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  if (cookie != null) {
    postCon.setRequestProperty(""String_Node_Str"",cookie);
  }
  OutputStream os=postCon.getOutputStream();
  OutputStreamWriter out=new OutputStreamWriter(os,""String_Node_Str"");
  out.write(soapMsg);
  out.close();
  InputStream is;
  try {
    is=postCon.getInputStream();
  }
 catch (  IOException ioe) {
    is=postCon.getErrorStream();
  }
  if (cookie == null) {
    cookie=postCon.getHeaderField(""String_Node_Str"");
  }
  return is;
}"
10558,"public Profile[] findAssociatedProfile(ManagedEntity entity) throws RuntimeFault, RemoteException {
  ManagedObjectReference[] mors=getVimService().findAssociatedProfile(getMOR(),entity.getMOR());
  Profile[] pfs=new Profile[mors.length];
  for (int i=0; i < mors.length; i++) {
    pfs[i]=new Profile(getServerConnection(),mors[i]);
  }
  return pfs;
}","public Profile[] findAssociatedProfile(ManagedEntity entity) throws RuntimeFault, RemoteException {
  ManagedObjectReference[] mors=getVimService().findAssociatedProfile(getMOR(),entity.getMOR());
  return convert2Profiles(mors);
}"
10559,"public Profile[] getProfile(){
  return (Profile[])getCurrentProperty(""String_Node_Str"");
}","public Profile[] getProfile(){
  ManagedObjectReference[] mors=(ManagedObjectReference[])getCurrentProperty(""String_Node_Str"");
  return convert2Profiles(mors);
}"
10560,"public String post(String urlStr,Map<String,String> para) throws Exception {
  urlStr=preProcessUrl(urlStr);
  HttpURLConnection getCon=(HttpURLConnection)new URL(urlStr).openConnection();
  getCon.connect();
  String cookie=getCon.getHeaderField(""String_Node_Str"");
  cookie=cookie.substring(0,cookie.indexOf(""String_Node_Str""));
  HttpURLConnection postCon=(HttpURLConnection)new URL(urlStr).openConnection();
  postCon.setRequestMethod(""String_Node_Str"");
  postCon.setDoOutput(true);
  postCon.setDoInput(true);
  postCon.setRequestProperty(""String_Node_Str"",cookie);
  OutputStream os=postCon.getOutputStream();
  OutputStreamWriter out=new OutputStreamWriter(os);
  Iterator<String> keys=para.keySet().iterator();
  while (keys.hasNext()) {
    String key=keys.next();
    String value=para.get(key);
    key=URLEncoder.encode(key,""String_Node_Str"");
    value=URLEncoder.encode(value,""String_Node_Str"");
    out.write(key + ""String_Node_Str"" + value);
  }
  out.close();
  InputStream is=postCon.getInputStream();
  StringBuffer sb=readStream(is);
  String resultFlag=""String_Node_Str"";
  int start=sb.indexOf(resultFlag);
  String result=sb.substring(start + resultFlag.length());
  return ResultConverter.convert2Xml(result);
}","public String post(String urlStr,Map<String,String> para) throws Exception {
  urlStr=preProcessUrl(urlStr);
  HttpURLConnection getCon=(HttpURLConnection)new URL(urlStr).openConnection();
  getCon.connect();
  String cookie=getCon.getHeaderField(""String_Node_Str"");
  cookie=cookie.substring(0,cookie.indexOf(""String_Node_Str""));
  String nonceStr=findVMwareSessionNonce(getCon.getInputStream());
  HttpURLConnection postCon=(HttpURLConnection)new URL(urlStr).openConnection();
  postCon.setRequestMethod(""String_Node_Str"");
  postCon.setDoOutput(true);
  postCon.setDoInput(true);
  postCon.setRequestProperty(""String_Node_Str"",cookie);
  OutputStream os=postCon.getOutputStream();
  OutputStreamWriter out=new OutputStreamWriter(os);
  if (nonceStr != null) {
    out.write(NONCE + ""String_Node_Str"" + nonceStr);
  }
  Iterator<String> keys=para.keySet().iterator();
  while (keys.hasNext()) {
    String key=keys.next();
    String value=para.get(key);
    key=URLEncoder.encode(key,""String_Node_Str"");
    value=URLEncoder.encode(value,""String_Node_Str"");
    out.write(key + ""String_Node_Str"" + value);
  }
  out.close();
  InputStream is=postCon.getInputStream();
  StringBuffer sb=readStream(is);
  String resultFlag=""String_Node_Str"";
  int start=sb.indexOf(resultFlag);
  String result=sb.substring(start + resultFlag.length());
  return ResultConverter.convert2Xml(result);
}"
10561,"private static void toXML(StringBuffer sb,String tagName,Class type,Object obj){
  Class<?> clazz=obj.getClass();
  if (clazz.isArray()) {
    if (obj.getClass() == INT_ARRAY_CLASS) {
      int[] objs=(int[])obj;
      for (int i=0; i < objs.length; i++) {
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
        sb.append(objs[i]);
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
      }
    }
 else     if (obj.getClass() == BYTE_ARRAY_CLASS) {
      byte[] objs=(byte[])obj;
      for (int i=0; i < objs.length; i++) {
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
        sb.append(objs[i]);
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
      }
    }
 else {
      Object[] objs=(Object[])obj;
      for (int i=0; i < objs.length; i++) {
        toXML(sb,tagName,type.getComponentType(),objs[i]);
      }
    }
  }
 else   if (clazz == ManagedObjectReference.class) {
    ManagedObjectReference mor=(ManagedObjectReference)obj;
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ mor.type+ ""String_Node_Str"");
    sb.append(mor.val);
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
 else   if (clazz.getCanonicalName().startsWith(""String_Node_Str"")) {
    if (clazz != type) {
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ getXSIType(obj)+ ""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
    }
    sb.append(obj);
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
 else   if (clazz.isEnum()) {
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ obj+ ""String_Node_Str""+ tagName+ ""String_Node_Str"");
  }
 else   if (obj instanceof Calendar) {
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ DatatypeConverter.printDateTime((Calendar)obj)+ ""String_Node_Str""+ tagName+ ""String_Node_Str"");
  }
 else {
    if (clazz == type) {
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
    }
 else {
      String nameSpaceType=clazz.getSimpleName();
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ nameSpaceType+ ""String_Node_Str"");
    }
    Field[] fields=getAllFields(clazz);
    for (int i=0; i < fields.length; i++) {
      Field f=fields[i];
      String fName=f.getName();
      Object value=null;
      try {
        value=f.get(obj);
      }
 catch (      IllegalAccessException iae) {
        iae.printStackTrace();
      }
      if (value == null) {
        continue;
      }
      Class<?> fType=f.getType();
      toXML(sb,fName,fType,value);
    }
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
}","private static void toXML(StringBuffer sb,String tagName,Class type,Object obj){
  Class<?> clazz=obj.getClass();
  if (clazz.isArray()) {
    if (obj.getClass() == INT_ARRAY_CLASS) {
      int[] objs=(int[])obj;
      for (int i=0; i < objs.length; i++) {
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
        sb.append(objs[i]);
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
      }
    }
 else     if (obj.getClass() == BYTE_ARRAY_CLASS) {
      byte[] objs=(byte[])obj;
      for (int i=0; i < objs.length; i++) {
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
        sb.append(objs[i]);
        sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
      }
    }
 else {
      Object[] objs=(Object[])obj;
      for (int i=0; i < objs.length; i++) {
        toXML(sb,tagName,type.getComponentType(),objs[i]);
      }
    }
  }
 else   if (clazz == ManagedObjectReference.class) {
    ManagedObjectReference mor=(ManagedObjectReference)obj;
    sb.append(""String_Node_Str"" + tagName);
    if (clazz != type) {
      sb.append(""String_Node_Str"" + mor.type + ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"" + mor.type + ""String_Node_Str"");
    sb.append(mor.val);
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
 else   if (clazz.getCanonicalName().startsWith(""String_Node_Str"")) {
    if (clazz != type) {
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ getXSIType(obj)+ ""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
    }
    sb.append(obj);
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
 else   if (clazz.isEnum()) {
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ obj+ ""String_Node_Str""+ tagName+ ""String_Node_Str"");
  }
 else   if (obj instanceof Calendar) {
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ DatatypeConverter.printDateTime((Calendar)obj)+ ""String_Node_Str""+ tagName+ ""String_Node_Str"");
  }
 else {
    if (clazz == type) {
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
    }
 else {
      String nameSpaceType=clazz.getSimpleName();
      sb.append(""String_Node_Str"" + tagName + ""String_Node_Str""+ nameSpaceType+ ""String_Node_Str"");
    }
    Field[] fields=getAllFields(clazz);
    for (int i=0; i < fields.length; i++) {
      Field f=fields[i];
      String fName=f.getName();
      Object value=null;
      try {
        value=f.get(obj);
      }
 catch (      IllegalAccessException iae) {
        iae.printStackTrace();
      }
      if (value == null) {
        continue;
      }
      Class<?> fType=f.getType();
      toXML(sb,fName,fType,value);
    }
    sb.append(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
}"
10562,"public void watch(PropertyFilterSpec pfs){
  mom.watch(pfs);
}","/** 
 * Add PropertyFilterSpec for advanced settings
 * @param pfs the property filter spec which specifiesthe managed objects and properties to watch.
 */
public void watch(PropertyFilterSpec pfs){
  mom.watch(pfs);
}"
10563,"public Object getCopy(ManagedObjectReference mor,String propName){
  return getCopy(mor,propName);
}","/** 
 * Get a copy of the cached property. You can change the returned object as you like
 * @param mor Managed object reference
 * @param propName property name
 * @return the data object identified by the propName.NullObject.NULL if the data object is really null
 */
public Object getCopy(ManagedObjectReference mor,String propName){
  return getCopy(mor,propName);
}"
10564,"public Object get(ManagedObjectReference mor,String propName){
  Map<ManagedObjectReference,Map<String,Object>> items=cache.getCachedItems();
  Map<String,Object> moMap=items.get(mor);
  if (moMap != null) {
    return moMap.get(propName);
  }
  return null;
}","/** 
 * Get the value of cached property whose name is propName. You should NEVER change the returned data object.
 * @param mor Managed object reference pointing to the managed object
 * @param propName Property name
 * @return the data object identified by the propName.NullObject.NULL if the data object is really null
 */
public Object get(ManagedObjectReference mor,String propName){
  Map<ManagedObjectReference,Map<String,Object>> items=cache.getCachedItems();
  Map<String,Object> moMap=items.get(mor);
  if (moMap != null) {
    return moMap.get(propName);
  }
  return null;
}"
10565,"public ServiceInstance getServiceInstance(){
  return si;
}","/** 
 * Get the corresponding ServiceInstance
 * @return ServiceInstance object
 */
public ServiceInstance getServiceInstance(){
  return si;
}"
10566,"public boolean isReady(){
  return cache.isReady();
}","/** 
 * Check if the CacheInstance is ready for retrieval
 * @return true if ready; false otherwise
 */
public boolean isReady(){
  return cache.isReady();
}"
10567,"public void start(){
  mThread=new Thread(mom);
  mThread.setName(""String_Node_Str"" + si.getServerConnection().getUrl());
  mThread.start();
}","/** 
 * Start the caching service. Called after specifying the managed objects and their properties to watch.
 */
public void start(){
  mThread=new Thread(mom);
  mThread.setName(""String_Node_Str"" + si.getServerConnection().getUrl());
  mThread.start();
}"
10568,"public void destroy(){
  mom.cleanUp();
  mThread.stop();
  si=null;
  mom=null;
  cache=null;
  mThread=null;
}","/** 
 * Destrory the caching service when no longer needed.
 */
public void destroy(){
  mom.cleanUp();
  mThread.stop();
  si=null;
  mom=null;
  cache=null;
  mThread=null;
}"
10569,"public void update(Observable obj,Object arg){
  if (arg instanceof PropertyFilterUpdate[]) {
    PropertyFilterUpdate[] pfus=(PropertyFilterUpdate[])arg;
    for (int i=0; pfus != null && i < pfus.length; i++) {
      ObjectUpdate[] ous=pfus[i].getObjectSet();
      for (int j=0; j < ous.length; j++) {
        ManagedObjectReference mor=ous[j].getObj();
        if (!items.containsKey(mor)) {
          items.put(mor,new ConcurrentHashMap<String,Object>());
        }
        Map<String,Object> moMap=items.get(mor);
        PropertyChange[] pcs=ous[j].getChangeSet();
        for (int k=0; k < pcs.length; k++) {
          moMap.put(pcs[k].getName(),pcs[k].getVal());
        }
      }
    }
  }
  isReady=true;
}","public void update(Observable obj,Object arg){
  if (arg instanceof PropertyFilterUpdate[]) {
    PropertyFilterUpdate[] pfus=(PropertyFilterUpdate[])arg;
    for (int i=0; pfus != null && i < pfus.length; i++) {
      ObjectUpdate[] ous=pfus[i].getObjectSet();
      for (int j=0; j < ous.length; j++) {
        ManagedObjectReference mor=ous[j].getObj();
        if (!items.containsKey(mor)) {
          items.put(mor,new ConcurrentHashMap<String,Object>());
        }
        Map<String,Object> moMap=items.get(mor);
        PropertyChange[] pcs=ous[j].getChangeSet();
        for (int k=0; k < pcs.length; k++) {
          Object value=pcs[k].getVal();
          value=value == null ? NULL : value;
          moMap.put(pcs[k].getName(),value);
        }
      }
    }
  }
  isReady=true;
}"
10570,"public static Object fromXML(String type,Element root) throws Exception {
  List<Element> subNodes=root.elements();
  if (subNodes.size() == 0) {
    return null;
  }
  if (type.startsWith(""String_Node_Str"")) {
    if (!type.endsWith(""String_Node_Str"")) {
      Element e=subNodes.get(0);
      return createMOR(e.attributeValue(""String_Node_Str""),e.getText());
    }
 else {
      ManagedObjectReference[] mos=new ManagedObjectReference[subNodes.size()];
      for (int i=0; i < subNodes.size(); i++) {
        Element elem=(Element)subNodes.get(i);
        mos[i]=XmlGen.createMOR(elem.attributeValue(""String_Node_Str""),elem.getText());
      }
      return mos;
    }
  }
 else   if (isBasicType(type)) {
    String[] vals=new String[subNodes.size()];
    for (int i=0; i < vals.length; i++) {
      vals[i]=subNodes.get(i).getText();
    }
    return parseValue(type,vals);
  }
 else   if (type.endsWith(""String_Node_Str"")) {
    String singleTypeName=type.substring(0,type.length() - 2);
    Element e=subNodes.get(0);
    String xsiType=e.attributeValue(XSI_TYPE);
    if (xsiType != null) {
      singleTypeName=xsiType;
    }
    Class clazz=getVimClass(singleTypeName);
    Object ao=Array.newInstance(clazz,subNodes.size());
    for (int i=0; i < subNodes.size(); i++) {
      Object o=fromXml(getVimClass(singleTypeName),subNodes.get(i));
      Array.set(ao,i,o);
    }
    return ao;
  }
 else {
    return fromXml(getVimClass(type),subNodes.get(0));
  }
}","public static Object fromXML(String type,Element root) throws Exception {
  List<Element> subNodes=root.elements();
  if (subNodes.size() == 0) {
    return null;
  }
  if (type.startsWith(""String_Node_Str"")) {
    if (!type.endsWith(""String_Node_Str"")) {
      Element e=subNodes.get(0);
      return createMOR(e.attributeValue(""String_Node_Str""),e.getText());
    }
 else {
      ManagedObjectReference[] mos=new ManagedObjectReference[subNodes.size()];
      for (int i=0; i < subNodes.size(); i++) {
        Element elem=(Element)subNodes.get(i);
        mos[i]=XmlGen.createMOR(elem.attributeValue(""String_Node_Str""),elem.getText());
      }
      return mos;
    }
  }
 else   if (isBasicType(type)) {
    String[] vals=new String[subNodes.size()];
    for (int i=0; i < vals.length; i++) {
      vals[i]=subNodes.get(i).getText();
    }
    return parseValue(type,vals);
  }
 else   if (type.endsWith(""String_Node_Str"")) {
    String arrayItemTypeName=type.substring(0,type.length() - 2);
    Class clazz=getVimClass(arrayItemTypeName);
    Object ao=Array.newInstance(clazz,subNodes.size());
    for (int i=0; i < subNodes.size(); i++) {
      Element e=subNodes.get(i);
      String xsiType=e.attributeValue(XSI_TYPE);
      Object o=fromXml(getVimClass(xsiType == null ? arrayItemTypeName : xsiType),subNodes.get(i));
      Array.set(ao,i,o);
    }
    return ao;
  }
 else {
    return fromXml(getVimClass(type),subNodes.get(0));
  }
}"
10571,"public OptionManager getOvfManager(){
  return (OptionManager)createMO(getServiceContent().getOvfManager());
}","public OvfManager getOvfManager(){
  return (OvfManager)createMO(getServiceContent().getOvfManager());
}"
10572,"private static void fieldToXML(StringBuffer sb,String fName,String typeName,Object obj){
  if (typeName.endsWith(""String_Node_Str"")) {
    ManagedObjectReference mor=(ManagedObjectReference)obj;
    sb.append(""String_Node_Str"" + fName + ""String_Node_Str""+ mor.type+ ""String_Node_Str"");
    sb.append(mor.val);
    sb.append(""String_Node_Str"" + fName + ""String_Node_Str"");
    return;
  }
  boolean isComplexType=typeName.startsWith(PACKAGE_NAME);
  if (!isComplexType) {
    sb.append(""String_Node_Str"" + fName + ""String_Node_Str"");
    sb.append(obj);
    sb.append(""String_Node_Str"" + fName + ""String_Node_Str"");
  }
 else {
    String realFieldType=obj.getClass().getCanonicalName();
    if (realFieldType.equals(typeName)) {
      sb.append(toXML(fName,obj,null));
    }
 else {
      int lastDot=realFieldType.lastIndexOf(""String_Node_Str"");
      String nameSpaceType=realFieldType.substring(lastDot + 1);
      sb.append(toXML(fName,obj,nameSpaceType));
    }
  }
}","private static void fieldToXML(StringBuffer sb,String fName,String typeName,Object obj){
  if (typeName.endsWith(""String_Node_Str"")) {
    ManagedObjectReference mor=(ManagedObjectReference)obj;
    sb.append(""String_Node_Str"" + fName + ""String_Node_Str""+ mor.type+ ""String_Node_Str"");
    sb.append(mor.val);
    sb.append(""String_Node_Str"" + fName + ""String_Node_Str"");
    return;
  }
  boolean isComplexType=typeName.startsWith(PACKAGE_NAME);
  if (!isComplexType) {
    sb.append(""String_Node_Str"" + fName + ""String_Node_Str"");
    if (typeName.endsWith(""String_Node_Str"")) {
      sb.append(DatatypeConverter.printDateTime((Calendar)obj));
    }
 else {
      sb.append(obj);
    }
    sb.append(""String_Node_Str"" + fName + ""String_Node_Str"");
  }
 else {
    String realFieldType=obj.getClass().getCanonicalName();
    if (realFieldType.equals(typeName)) {
      sb.append(toXML(fName,obj,null));
    }
 else {
      int lastDot=realFieldType.lastIndexOf(""String_Node_Str"");
      String nameSpaceType=realFieldType.substring(lastDot + 1);
      sb.append(toXML(fName,obj,nameSpaceType));
    }
  }
}"
10573,"public static String toXML(String tag,Object obj,String nameSpaceType){
  if (obj == null) {
    return ""String_Node_Str"";
  }
  Class<?> c=obj.getClass();
  if (c.isArray()) {
    StringBuffer sb=new StringBuffer();
    Object[] objs=(Object[])obj;
    for (int i=0; i < objs.length; i++) {
      sb.append(toXML(tag,objs[i],nameSpaceType));
    }
    return sb.toString();
  }
  if (c.getSimpleName().equals(""String_Node_Str"")) {
    ManagedObjectReference mor=(ManagedObjectReference)obj;
    StringBuffer sb=new StringBuffer(""String_Node_Str"" + tag + ""String_Node_Str""+ mor.type+ ""String_Node_Str"");
    sb.append(mor.val);
    sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    return sb.toString();
  }
 else   if (c.getCanonicalName().startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"" + tag + ""String_Node_Str""+ obj+ ""String_Node_Str""+ tag+ ""String_Node_Str"";
  }
 else   if (c.getSimpleName().equals(""String_Node_Str"")) {
    String dateStr=DatatypeConverter.printTime((Calendar)obj);
    return ""String_Node_Str"" + tag + ""String_Node_Str""+ dateStr+ ""String_Node_Str""+ tag+ ""String_Node_Str"";
  }
 else {
    StringBuffer sb=new StringBuffer();
    if (nameSpaceType == null) {
      sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"" + tag + ""String_Node_Str""+ nameSpaceType+ ""String_Node_Str"");
    }
    Field[] fields=getAllFields(c);
    for (int i=0; i < fields.length; i++) {
      Field f=fields[i];
      String fName=f.getName();
      Object value=null;
      try {
        value=f.get(obj);
      }
 catch (      IllegalAccessException iae) {
        iae.printStackTrace();
      }
      if (value == null) {
        continue;
      }
      String typeName=f.getType().getCanonicalName();
      Class<?> clazz=f.getType();
      if (clazz.isArray()) {
        Object[] values=(Object[])value;
        for (int j=0; values != null && j < values.length; j++) {
          fieldToXML(sb,fName,typeName,values[j]);
        }
      }
 else {
        fieldToXML(sb,fName,typeName,value);
      }
    }
    sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    return sb.toString();
  }
}","public static String toXML(String tag,Object obj,String nameSpaceType){
  if (obj == null) {
    return ""String_Node_Str"";
  }
  Class<?> c=obj.getClass();
  if (c.isArray()) {
    StringBuffer sb=new StringBuffer();
    Object[] objs=(Object[])obj;
    for (int i=0; i < objs.length; i++) {
      sb.append(toXML(tag,objs[i],nameSpaceType));
    }
    return sb.toString();
  }
  if (c.getSimpleName().equals(""String_Node_Str"")) {
    ManagedObjectReference mor=(ManagedObjectReference)obj;
    StringBuffer sb=new StringBuffer(""String_Node_Str"" + tag + ""String_Node_Str""+ mor.type+ ""String_Node_Str"");
    sb.append(mor.val);
    sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    return sb.toString();
  }
 else   if (c.getCanonicalName().startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"" + tag + ""String_Node_Str""+ obj+ ""String_Node_Str""+ tag+ ""String_Node_Str"";
  }
 else {
    StringBuffer sb=new StringBuffer();
    if (nameSpaceType == null) {
      sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"" + tag + ""String_Node_Str""+ nameSpaceType+ ""String_Node_Str"");
    }
    Field[] fields=getAllFields(c);
    for (int i=0; i < fields.length; i++) {
      Field f=fields[i];
      String fName=f.getName();
      Object value=null;
      try {
        value=f.get(obj);
      }
 catch (      IllegalAccessException iae) {
        iae.printStackTrace();
      }
      if (value == null) {
        continue;
      }
      String typeName=f.getType().getCanonicalName();
      Class<?> clazz=f.getType();
      if (clazz.isArray()) {
        Object[] values=(Object[])value;
        for (int j=0; values != null && j < values.length; j++) {
          fieldToXML(sb,fName,typeName,values[j]);
        }
      }
 else {
        fieldToXML(sb,fName,typeName,value);
      }
    }
    sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    return sb.toString();
  }
}"
10574,"private static void setFieldValue(Field f,Object obj,String type,String[] values) throws IllegalArgumentException, IllegalAccessException {
  String fType=type == null ? f.getType().getSimpleName() : type;
  if (""String_Node_Str"".equals(fType) || ""String_Node_Str"".equals(fType)) {
    f.set(obj,values[0]);
  }
 else   if (""String_Node_Str"".equals(fType) || ""String_Node_Str"".equals(fType)) {
    f.set(obj,values);
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,Integer.parseInt(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,new Integer(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    int[] is=new int[values.length];
    for (int i=0; i < is.length; i++) {
      is[i]=Integer.parseInt(values[i]);
    }
    f.set(obj,is);
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,Short.parseShort(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,new Short(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    short[] ss=new short[values.length];
    for (int i=0; i < ss.length; i++) {
      ss[i]=Short.parseShort(values[i]);
    }
    f.set(obj,ss);
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,Byte.parseByte(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,new Byte(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    byte[] bs=new byte[values.length];
    for (int i=0; i < bs.length; i++) {
      bs[i]=Byte.parseByte(values[i]);
    }
    f.set(obj,bs);
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,Long.parseLong(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,new Long(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    long[] ls=new long[values.length];
    for (int i=0; i < ls.length; i++) {
      ls[i]=Long.parseLong(values[i]);
    }
    f.set(obj,ls);
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,Boolean.parseBoolean(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,new Boolean(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    boolean[] bs=new boolean[values.length];
    for (int i=0; i < bs.length; i++) {
      bs[i]=Boolean.parseBoolean(values[i]);
    }
    f.set(obj,bs);
  }
 else   if (""String_Node_Str"".equals(fType)) {
    DatatypeConverter.setDatatypeConverter(DatatypeConverterImpl.theInstance);
    Calendar cal=DatatypeConverter.parseTime(values[0]);
    f.set(obj,cal);
  }
 else {
    System.out.println(""String_Node_Str"" + f.getType().getCanonicalName() + type+ fType);
    throw new RuntimeException(""String_Node_Str"" + f.getType().getCanonicalName() + f.getName());
  }
}","private static void setFieldValue(Field f,Object obj,String type,String[] values) throws IllegalArgumentException, IllegalAccessException {
  String fType=type == null ? f.getType().getSimpleName() : type;
  if (""String_Node_Str"".equals(fType) || ""String_Node_Str"".equals(fType)) {
    f.set(obj,values[0]);
  }
 else   if (""String_Node_Str"".equals(fType) || ""String_Node_Str"".equals(fType)) {
    f.set(obj,values);
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,Integer.parseInt(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,new Integer(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    int[] is=new int[values.length];
    for (int i=0; i < is.length; i++) {
      is[i]=Integer.parseInt(values[i]);
    }
    f.set(obj,is);
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,Short.parseShort(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,new Short(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    short[] ss=new short[values.length];
    for (int i=0; i < ss.length; i++) {
      ss[i]=Short.parseShort(values[i]);
    }
    f.set(obj,ss);
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,Byte.parseByte(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,new Byte(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    byte[] bs=new byte[values.length];
    for (int i=0; i < bs.length; i++) {
      bs[i]=Byte.parseByte(values[i]);
    }
    f.set(obj,bs);
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,Long.parseLong(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,new Long(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    long[] ls=new long[values.length];
    for (int i=0; i < ls.length; i++) {
      ls[i]=Long.parseLong(values[i]);
    }
    f.set(obj,ls);
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,Boolean.parseBoolean(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    f.set(obj,new Boolean(values[0]));
  }
 else   if (""String_Node_Str"".equals(fType)) {
    boolean[] bs=new boolean[values.length];
    for (int i=0; i < bs.length; i++) {
      bs[i]=Boolean.parseBoolean(values[i]);
    }
    f.set(obj,bs);
  }
 else   if (""String_Node_Str"".equals(fType)) {
    Calendar cal=DatatypeConverter.parseTime(values[0]);
    f.set(obj,cal);
  }
 else {
    System.out.println(""String_Node_Str"" + f.getType().getCanonicalName() + type+ fType);
    throw new RuntimeException(""String_Node_Str"" + f.getType().getCanonicalName() + f.getName());
  }
}"
10575,"public static String toXML(String tag,Object obj,String nameSpaceType){
  if (obj == null) {
    return ""String_Node_Str"";
  }
  Class<?> c=obj.getClass();
  if (c.isArray()) {
    StringBuffer sb=new StringBuffer();
    Object[] objs=(Object[])obj;
    for (int i=0; i < objs.length; i++) {
      sb.append(toXML(tag,objs[i],nameSpaceType));
    }
    return sb.toString();
  }
  if (c.getSimpleName().equals(""String_Node_Str"")) {
    ManagedObjectReference mor=(ManagedObjectReference)obj;
    StringBuffer sb=new StringBuffer(""String_Node_Str"" + tag + ""String_Node_Str""+ mor.type+ ""String_Node_Str"");
    sb.append(mor.val);
    sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    return sb.toString();
  }
 else   if (c.getCanonicalName().startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"" + tag + ""String_Node_Str""+ obj+ ""String_Node_Str""+ tag+ ""String_Node_Str"";
  }
 else {
    StringBuffer sb=new StringBuffer();
    if (nameSpaceType == null) {
      sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"" + tag + ""String_Node_Str""+ nameSpaceType+ ""String_Node_Str"");
    }
    Field[] fields=getAllFields(c);
    for (int i=0; i < fields.length; i++) {
      Field f=fields[i];
      String fName=f.getName();
      Object value=null;
      try {
        value=f.get(obj);
      }
 catch (      IllegalAccessException iae) {
        iae.printStackTrace();
      }
      if (value == null) {
        continue;
      }
      String typeName=f.getType().getCanonicalName();
      Class<?> clazz=f.getType();
      if (clazz.isArray()) {
        Object[] values=(Object[])value;
        for (int j=0; values != null && j < values.length; j++) {
          fieldToXML(sb,fName,typeName,values[j]);
        }
      }
 else {
        fieldToXML(sb,fName,typeName,value);
      }
    }
    sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    return sb.toString();
  }
}","public static String toXML(String tag,Object obj,String nameSpaceType){
  if (obj == null) {
    return ""String_Node_Str"";
  }
  Class<?> c=obj.getClass();
  if (c.isArray()) {
    StringBuffer sb=new StringBuffer();
    Object[] objs=(Object[])obj;
    for (int i=0; i < objs.length; i++) {
      sb.append(toXML(tag,objs[i],nameSpaceType));
    }
    return sb.toString();
  }
  if (c.getSimpleName().equals(""String_Node_Str"")) {
    ManagedObjectReference mor=(ManagedObjectReference)obj;
    StringBuffer sb=new StringBuffer(""String_Node_Str"" + tag + ""String_Node_Str""+ mor.type+ ""String_Node_Str"");
    sb.append(mor.val);
    sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    return sb.toString();
  }
 else   if (c.getCanonicalName().startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"" + tag + ""String_Node_Str""+ obj+ ""String_Node_Str""+ tag+ ""String_Node_Str"";
  }
 else   if (c.getSimpleName().equals(""String_Node_Str"")) {
    String dateStr=DatatypeConverter.printTime((Calendar)obj);
    return ""String_Node_Str"" + tag + ""String_Node_Str""+ dateStr+ ""String_Node_Str""+ tag+ ""String_Node_Str"";
  }
 else {
    StringBuffer sb=new StringBuffer();
    if (nameSpaceType == null) {
      sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"" + tag + ""String_Node_Str""+ nameSpaceType+ ""String_Node_Str"");
    }
    Field[] fields=getAllFields(c);
    for (int i=0; i < fields.length; i++) {
      Field f=fields[i];
      String fName=f.getName();
      Object value=null;
      try {
        value=f.get(obj);
      }
 catch (      IllegalAccessException iae) {
        iae.printStackTrace();
      }
      if (value == null) {
        continue;
      }
      String typeName=f.getType().getCanonicalName();
      Class<?> clazz=f.getType();
      if (clazz.isArray()) {
        Object[] values=(Object[])value;
        for (int j=0; values != null && j < values.length; j++) {
          fieldToXML(sb,fName,typeName,values[j]);
        }
      }
 else {
        fieldToXML(sb,fName,typeName,value);
      }
    }
    sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    return sb.toString();
  }
}"
10576,"private static Object parseValue(String type,String[] values){
  if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    return values[0];
  }
 else   if (""String_Node_Str"".equals(type)) {
    return values;
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Integer(values[0]);
  }
 else   if (""String_Node_Str"".equals(type)) {
    int[] is=new int[values.length];
    for (int i=0; i < is.length; i++) {
      is[i]=Integer.parseInt(values[i]);
    }
    return is;
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Short(values[0]);
  }
 else   if (""String_Node_Str"".equals(type)) {
    short[] ss=new short[values.length];
    for (int i=0; i < ss.length; i++) {
      ss[i]=Short.parseShort(values[i]);
    }
    return ss;
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Byte(values[0]);
  }
 else   if (""String_Node_Str"".equals(type)) {
    byte[] bs=new byte[values.length];
    for (int i=0; i < bs.length; i++) {
      bs[i]=Byte.parseByte(values[i]);
    }
    return bs;
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Long(values[0]);
  }
 else   if (""String_Node_Str"".equals(type)) {
    long[] ls=new long[values.length];
    for (int i=0; i < ls.length; i++) {
      ls[i]=Long.parseLong(values[i]);
    }
    return ls;
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Boolean(values[0]);
  }
 else   if (""String_Node_Str"".equals(type)) {
    boolean[] bs=new boolean[values.length];
    for (int i=0; i < bs.length; i++) {
      bs[i]=Boolean.getBoolean(values[i]);
    }
    return bs;
  }
 else   if (""String_Node_Str"".equals(type)) {
    DatatypeConverter.setDatatypeConverter(DatatypeConverterImpl.theInstance);
    Calendar cal=DatatypeConverter.parseTime(values[0]);
    return cal;
  }
 else {
    System.out.println(""String_Node_Str"" + type);
  }
  return null;
}","private static Object parseValue(String type,String[] values){
  if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    return values[0];
  }
 else   if (""String_Node_Str"".equals(type)) {
    return values;
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Integer(values[0]);
  }
 else   if (""String_Node_Str"".equals(type)) {
    int[] is=new int[values.length];
    for (int i=0; i < is.length; i++) {
      is[i]=Integer.parseInt(values[i]);
    }
    return is;
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Short(values[0]);
  }
 else   if (""String_Node_Str"".equals(type)) {
    short[] ss=new short[values.length];
    for (int i=0; i < ss.length; i++) {
      ss[i]=Short.parseShort(values[i]);
    }
    return ss;
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Byte(values[0]);
  }
 else   if (""String_Node_Str"".equals(type)) {
    byte[] bs=new byte[values.length];
    for (int i=0; i < bs.length; i++) {
      bs[i]=Byte.parseByte(values[i]);
    }
    return bs;
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Long(values[0]);
  }
 else   if (""String_Node_Str"".equals(type)) {
    long[] ls=new long[values.length];
    for (int i=0; i < ls.length; i++) {
      ls[i]=Long.parseLong(values[i]);
    }
    return ls;
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new Boolean(values[0]);
  }
 else   if (""String_Node_Str"".equals(type)) {
    boolean[] bs=new boolean[values.length];
    for (int i=0; i < bs.length; i++) {
      bs[i]=Boolean.getBoolean(values[i]);
    }
    return bs;
  }
 else   if (""String_Node_Str"".equals(type)) {
    Calendar cal=DatatypeConverter.parseTime(values[0]);
    return cal;
  }
 else {
    System.out.println(""String_Node_Str"" + type);
  }
  return null;
}"
10577,"public static String toXML(String tag,Object obj,String nameSpaceType){
  if (obj == null) {
    return ""String_Node_Str"";
  }
  Class<?> c=obj.getClass();
  if (c.isArray()) {
    StringBuffer sb=new StringBuffer();
    Object[] objs=(Object[])obj;
    for (int i=0; i < objs.length; i++) {
      sb.append(toXML(tag,objs[i],nameSpaceType));
    }
    return sb.toString();
  }
  if (c.getSimpleName().equals(""String_Node_Str"")) {
    ManagedObjectReference mor=(ManagedObjectReference)obj;
    StringBuffer sb=new StringBuffer(""String_Node_Str"" + tag + ""String_Node_Str""+ mor.type+ ""String_Node_Str"");
    sb.append(mor.val);
    sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    return sb.toString();
  }
 else   if (c.getCanonicalName().startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"" + tag + ""String_Node_Str""+ obj+ ""String_Node_Str""+ tag+ ""String_Node_Str"";
  }
 else {
    StringBuffer sb=new StringBuffer();
    if (nameSpaceType == null) {
      sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"" + tag + ""String_Node_Str""+ nameSpaceType+ ""String_Node_Str"");
    }
    Field[] fields=getAllFields(c);
    for (int i=0; i < fields.length; i++) {
      Field f=fields[i];
      String fName=f.getName();
      Object value=null;
      try {
        value=f.get(obj);
      }
 catch (      IllegalAccessException iae) {
        iae.printStackTrace();
      }
      if (value == null) {
        continue;
      }
      String typeName=f.getType().getCanonicalName();
      Class<?> clazz=f.getType();
      if (clazz.isArray()) {
        Object[] values=(Object[])value;
        for (int j=0; values != null && j < values.length; j++) {
          fieldToXML(sb,fName,typeName,values[j]);
        }
      }
 else {
        fieldToXML(sb,fName,typeName,value);
      }
    }
    sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    return sb.toString();
  }
}","public static String toXML(String tag,Object obj,String nameSpaceType){
  if (obj == null) {
    return ""String_Node_Str"";
  }
  Class<?> c=obj.getClass();
  if (c.isArray()) {
    StringBuffer sb=new StringBuffer();
    Object[] objs=(Object[])obj;
    for (int i=0; i < objs.length; i++) {
      sb.append(toXML(tag,objs[i],nameSpaceType));
    }
    return sb.toString();
  }
  if (c.getSimpleName().equals(""String_Node_Str"")) {
    ManagedObjectReference mor=(ManagedObjectReference)obj;
    StringBuffer sb=new StringBuffer(""String_Node_Str"" + tag + ""String_Node_Str""+ mor.type+ ""String_Node_Str"");
    sb.append(mor.val);
    sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    return sb.toString();
  }
 else   if (c.getCanonicalName().startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"" + tag + ""String_Node_Str""+ obj+ ""String_Node_Str""+ tag+ ""String_Node_Str"";
  }
 else   if (c.isEnum()) {
    return ""String_Node_Str"" + tag + ""String_Node_Str""+ obj+ ""String_Node_Str""+ tag+ ""String_Node_Str"";
  }
 else {
    StringBuffer sb=new StringBuffer();
    if (nameSpaceType == null) {
      sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"" + tag + ""String_Node_Str""+ nameSpaceType+ ""String_Node_Str"");
    }
    Field[] fields=getAllFields(c);
    for (int i=0; i < fields.length; i++) {
      Field f=fields[i];
      String fName=f.getName();
      Object value=null;
      try {
        value=f.get(obj);
      }
 catch (      IllegalAccessException iae) {
        iae.printStackTrace();
      }
      if (value == null) {
        continue;
      }
      String typeName=f.getType().getCanonicalName();
      Class<?> clazz=f.getType();
      if (clazz.isArray()) {
        Object[] values=(Object[])value;
        for (int j=0; values != null && j < values.length; j++) {
          fieldToXML(sb,fName,typeName,values[j]);
        }
      }
 else {
        fieldToXML(sb,fName,typeName,value);
      }
    }
    sb.append(""String_Node_Str"" + tag + ""String_Node_Str"");
    return sb.toString();
  }
}"
10578,"/** 
 * Handle single VIM Data Object 
 */
private static Object fromXML(String type,Element node) throws Exception {
  Class<?> clazz=Class.forName(PACKAGE_NAME + ""String_Node_Str"" + type);
  Object obj=clazz.newInstance();
  List<?> subNodes=node.elements();
  for (int i=0; i < subNodes.size(); i++) {
    Element e=(Element)subNodes.get(i);
    String tagName=e.getName();
    Field field=null;
    if (tagName.equals(""String_Node_Str"") || tagName.equals(""String_Node_Str"") || tagName.equals(""String_Node_Str"")|| tagName.equals(""String_Node_Str"")|| tagName.equals(""String_Node_Str"")) {
      field=clazz.getField(""String_Node_Str"" + tagName);
    }
 else {
      field=clazz.getField(tagName);
    }
    Class<?> fType=field.getType();
    boolean isFieldArray=fType.isArray();
    String arrayTypeName=fType.getSimpleName();
    String xsiType=e.attributeValue(XSI_TYPE);
    if (xsiType != null && (!xsiType.startsWith(""String_Node_Str""))) {
      fType=Class.forName(PACKAGE_NAME + ""String_Node_Str"" + xsiType);
    }
    String fTypeFullName=fType.getCanonicalName();
    String fTypeSimpleName=fType.getSimpleName();
    if (fTypeSimpleName.startsWith(""String_Node_Str"")) {
      if (isFieldArray) {
        List<?> al=getAllArrayElements(subNodes,tagName,i,subNodes.size());
        i=i + al.size();
        ManagedObjectReference[] mos=new ManagedObjectReference[al.size()];
        for (int j=0; j < mos.length; j++) {
          Element elem=(Element)al.get(j);
          mos[j]=XmlGen.createMOR(elem.attributeValue(""String_Node_Str""),elem.getText());
        }
        field.set(obj,mos);
      }
 else {
        field.set(obj,createMOR(e.attributeValue(""String_Node_Str""),e.getText()));
      }
    }
 else     if (fType.isEnum()) {
      String enumStr=e.getText();
      Class enumClass=Class.forName(fTypeFullName);
      Object fo=Enum.valueOf(enumClass,enumStr);
      field.set(obj,fo);
    }
 else     if (((xsiType != null) && (!xsiType.startsWith(""String_Node_Str""))) || fTypeFullName.startsWith(PACKAGE_NAME)) {
      if (isFieldArray) {
        ArrayList<?> al=getAllArrayElements(subNodes,tagName,i,subNodes.size());
        i=i + al.size();
        arrayTypeName=arrayTypeName.substring(0,arrayTypeName.length() - 2);
        Object ao=Array.newInstance(Class.forName(PACKAGE_NAME + ""String_Node_Str"" + arrayTypeName),al.size());
        for (int j=0; j < al.size(); j++) {
          Element elem=(Element)al.get(j);
          String elemType=arrayTypeName;
          if (elem.attributeValue(XSI_TYPE) != null) {
            elemType=elem.attributeValue(XSI_TYPE);
          }
          Object o=fromXML(elemType,elem);
          Array.set(ao,j,o);
        }
        field.set(obj,ao);
      }
 else {
        Object o=null;
        if (xsiType != null) {
          o=fromXML(xsiType,e);
        }
 else {
          o=fromXML(fType.getSimpleName(),e);
        }
        field.set(obj,o);
      }
    }
 else {
      if (isFieldArray) {
        ArrayList<?> al=getAllArrayElements(subNodes,tagName,i,subNodes.size());
        i=i + al.size();
        String[] values=new String[al.size()];
        for (int j=0; j < values.length; j++) {
          values[j]=((Element)al.get(j)).getText();
        }
        String fTrueType=null;
        if (xsiType != null) {
          fTrueType=xsiType.substring(""String_Node_Str"".length()) + ""String_Node_Str"";
        }
 else {
          fTrueType=fTypeSimpleName;
          if (!fTrueType.endsWith(""String_Node_Str"")) {
            fTrueType=fTrueType + ""String_Node_Str"";
          }
        }
        setFieldValue(field,obj,fTrueType,values);
      }
 else {
        if (xsiType != null && xsiType.startsWith(""String_Node_Str"")) {
          xsiType=xsiType.substring(""String_Node_Str"".length());
          setFieldValue(field,obj,xsiType,new String[]{e.getText()});
        }
 else {
          setFieldValue(field,obj,xsiType,new String[]{e.getText()});
        }
      }
    }
  }
  return obj;
}","/** 
 * Handle single VIM Data Object 
 */
private static Object fromXML(String type,Element node) throws Exception {
  Class<?> clazz=Class.forName(PACKAGE_NAME + ""String_Node_Str"" + type);
  Object obj=clazz.newInstance();
  List<?> subNodes=node.elements();
  for (int i=0; i < subNodes.size(); i++) {
    Element e=(Element)subNodes.get(i);
    String tagName=e.getName();
    Field field=null;
    if (tagName.equals(""String_Node_Str"") || tagName.equals(""String_Node_Str"") || tagName.equals(""String_Node_Str"")|| tagName.equals(""String_Node_Str"")|| tagName.equals(""String_Node_Str"")) {
      field=clazz.getField(""String_Node_Str"" + tagName);
    }
 else {
      field=clazz.getField(tagName);
    }
    Class<?> fType=field.getType();
    boolean isFieldArray=fType.isArray();
    String arrayTypeName=fType.getSimpleName();
    String xsiType=e.attributeValue(XSI_TYPE);
    if (xsiType != null && (!xsiType.startsWith(""String_Node_Str""))) {
      fType=Class.forName(PACKAGE_NAME + ""String_Node_Str"" + xsiType);
    }
    String fTypeFullName=fType.getCanonicalName();
    String fTypeSimpleName=fType.getSimpleName();
    if (fTypeSimpleName.startsWith(""String_Node_Str"")) {
      if (isFieldArray) {
        List<?> al=getAllArrayElements(subNodes,tagName,i,subNodes.size());
        i=i + al.size() - 1;
        ManagedObjectReference[] mos=new ManagedObjectReference[al.size()];
        for (int j=0; j < mos.length; j++) {
          Element elem=(Element)al.get(j);
          mos[j]=XmlGen.createMOR(elem.attributeValue(""String_Node_Str""),elem.getText());
        }
        field.set(obj,mos);
      }
 else {
        field.set(obj,createMOR(e.attributeValue(""String_Node_Str""),e.getText()));
      }
    }
 else     if (fType.isEnum()) {
      String enumStr=e.getText();
      Class enumClass=Class.forName(fTypeFullName);
      Object fo=Enum.valueOf(enumClass,enumStr);
      field.set(obj,fo);
    }
 else     if (((xsiType != null) && (!xsiType.startsWith(""String_Node_Str""))) || fTypeFullName.startsWith(PACKAGE_NAME)) {
      if (isFieldArray) {
        ArrayList<?> al=getAllArrayElements(subNodes,tagName,i,subNodes.size());
        i=i + al.size() - 1;
        arrayTypeName=arrayTypeName.substring(0,arrayTypeName.length() - 2);
        Object ao=Array.newInstance(Class.forName(PACKAGE_NAME + ""String_Node_Str"" + arrayTypeName),al.size());
        for (int j=0; j < al.size(); j++) {
          Element elem=(Element)al.get(j);
          String elemType=arrayTypeName;
          if (elem.attributeValue(XSI_TYPE) != null) {
            elemType=elem.attributeValue(XSI_TYPE);
          }
          Object o=fromXML(elemType,elem);
          Array.set(ao,j,o);
        }
        field.set(obj,ao);
      }
 else {
        Object o=null;
        if (xsiType != null) {
          o=fromXML(xsiType,e);
        }
 else {
          o=fromXML(fType.getSimpleName(),e);
        }
        field.set(obj,o);
      }
    }
 else {
      if (isFieldArray) {
        ArrayList<?> al=getAllArrayElements(subNodes,tagName,i,subNodes.size());
        i=i + al.size() - 1;
        String[] values=new String[al.size()];
        for (int j=0; j < values.length; j++) {
          values[j]=((Element)al.get(j)).getText();
        }
        String fTrueType=null;
        if (xsiType != null) {
          fTrueType=xsiType.substring(""String_Node_Str"".length()) + ""String_Node_Str"";
        }
 else {
          fTrueType=fTypeSimpleName;
          if (!fTrueType.endsWith(""String_Node_Str"")) {
            fTrueType=fTrueType + ""String_Node_Str"";
          }
        }
        setFieldValue(field,obj,fTrueType,values);
      }
 else {
        if (xsiType != null && xsiType.startsWith(""String_Node_Str"")) {
          xsiType=xsiType.substring(""String_Node_Str"".length());
          setFieldValue(field,obj,xsiType,new String[]{e.getText()});
        }
 else {
          setFieldValue(field,obj,xsiType,new String[]{e.getText()});
        }
      }
    }
  }
  return obj;
}"
10579,"/** 
 * Retrieves properties from multiple managed objects.
 * @param mos the array of managed objects which could be of single type or mixed types. When they are mix-typed,the moType must be super type of all these managed objects.
 * @param moType the type of the managed object. This managed object type must have all the properties defined asin propPaths. 
 * @param propPaths the array of property path which has dot as separator, for example, ""name"", ""guest.toolsStatus"".
 * @return an array of Hashtable whose order is the same as the mos array. Each Hashtable has the properties forone managed object. Note: some of the properties you want to retrieve might not be set, and therefore you don't have an entry in the Hashtable at all. In other words, it's possible for you to get null for a property from the  resulted Hashtable.
 * @throws InvalidProperty
 * @throws RuntimeFault
 * @throws RemoteException
 */
public static Hashtable[] retrieveProperties(ManagedObject[] mos,String moType,String[] propPaths) throws InvalidProperty, RuntimeFault, RemoteException {
  if (mos == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (mos.length == 0 || mos[0] == null)   return new Hashtable[]{};
  PropertyCollector pc=mos[0].getServerConnection().getServiceInstance().getPropertyCollector();
  ObjectSpec[] oss=new ObjectSpec[mos.length];
  for (int i=0; i < oss.length; i++) {
    oss[i]=new ObjectSpec();
    oss[i].setObj(mos[i].getMOR());
  }
  PropertySpec pSpec=createPropertySpec(moType,false,propPaths);
  PropertyFilterSpec pfs=new PropertyFilterSpec(null,null,new PropertySpec[]{pSpec},oss);
  ObjectContent[] objs=pc.retrieveProperties(new PropertyFilterSpec[]{pfs});
  Hashtable[] pTables=new Hashtable[mos.length];
  for (int i=0; objs != null && i < objs.length && objs[i] != null; i++) {
    DynamicProperty[] props=objs[i].getPropSet();
    ManagedObjectReference mor=objs[i].getObj();
    int index=-1;
    if (mor.getType().equals(mos[i].getMOR().getType()) && mor.get_value().equals(mos[i].getMOR().get_value())) {
      index=i;
    }
 else {
      index=findIndex(mos,mor);
      if (index == -1)       throw new RuntimeException(""String_Node_Str"" + mor.getType() + ""String_Node_Str""+ mor.get_value());
    }
    pTables[index]=new Hashtable();
    for (int j=0; props != null && j < props.length; j++) {
      pTables[index].put(props[j].getName(),convertProperty(props[j].getVal()));
    }
  }
  return pTables;
}","/** 
 * Retrieves properties from multiple managed objects.
 * @param mos the array of managed objects which could be of single type or mixed types. When they are mix-typed,the moType must be super type of all these managed objects.
 * @param moType the type of the managed object. This managed object type must have all the properties defined asin propPaths. 
 * @param propPaths the array of property path which has dot as separator, for example, ""name"", ""guest.toolsStatus"".
 * @return an array of Hashtable whose order is the same as the mos array. Each Hashtable has the properties forone managed object. Note: some of the properties you want to retrieve might not be set, and therefore you don't have an entry in the Hashtable at all. In other words, it's possible for you to get null for a property from the  resulted Hashtable.
 * @throws InvalidProperty
 * @throws RuntimeFault
 * @throws RemoteException
 */
public static Hashtable[] retrieveProperties(ManagedObject[] mos,String moType,String[] propPaths) throws InvalidProperty, RuntimeFault, RemoteException {
  if (mos == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (mos.length == 0 || mos[0] == null)   return new Hashtable[]{};
  PropertyCollector pc=mos[0].getServerConnection().getServiceInstance().getPropertyCollector();
  ObjectSpec[] oss=new ObjectSpec[mos.length];
  for (int i=0; i < oss.length; i++) {
    oss[i]=new ObjectSpec();
    oss[i].setObj(mos[i].getMOR());
  }
  PropertySpec pSpec=createPropertySpec(moType,false,propPaths);
  PropertyFilterSpec pfs=new PropertyFilterSpec(null,null,new PropertySpec[]{pSpec},oss);
  ObjectContent[] objs=pc.retrieveProperties(new PropertyFilterSpec[]{pfs});
  Hashtable[] pTables=new Hashtable[mos.length];
  for (int i=0; objs != null && i < objs.length && objs[i] != null; i++) {
    DynamicProperty[] props=objs[i].getPropSet();
    ManagedObjectReference mor=objs[i].getObj();
    int index=-1;
    if (mor.getType().equals(mos[i].getMOR().getType()) && mor.get_value().equals(mos[i].getMOR().get_value())) {
      index=i;
    }
 else {
      index=findIndex(mos,mor);
      if (index == -1)       throw new RuntimeException(""String_Node_Str"" + mor.getType() + ""String_Node_Str""+ mor.get_value());
    }
    pTables[index]=new Hashtable();
    for (int j=0; props != null && j < props.length; j++) {
      Object obj=convertProperty(props[j].getVal());
      if (obj == null) {
        obj=NULL;
      }
      pTables[index].put(props[j].getName(),obj);
    }
  }
  return pTables;
}"
10580,"public static Object convertProperty(Object dynaPropVal){
  Object propertyValue=null;
  Class propClass=dynaPropVal.getClass();
  String propName=propClass.getName();
  if (propName.indexOf(""String_Node_Str"") != -1) {
    String methodName=propName.substring(propName.indexOf(""String_Node_Str"") + ""String_Node_Str"".length());
    try {
      Method getMethod=propClass.getMethod(""String_Node_Str"" + methodName,(Class[])null);
      if (getMethod == null) {
        getMethod=propClass.getMethod(""String_Node_Str"" + methodName.toLowerCase(),(Class[])null);
      }
      propertyValue=getMethod.invoke(dynaPropVal,(Object[])null);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (dynaPropVal.getClass().isArray()) {
    propertyValue=dynaPropVal;
  }
 else {
    propertyValue=dynaPropVal;
  }
  return propertyValue;
}","public static Object convertProperty(Object dynaPropVal){
  Object propertyValue=null;
  Class propClass=dynaPropVal.getClass();
  String propName=propClass.getName();
  if (propName.indexOf(""String_Node_Str"") != -1) {
    String methodName=propName.substring(propName.indexOf(""String_Node_Str"") + ""String_Node_Str"".length());
    try {
      Method getMethod=null;
      try {
        getMethod=propClass.getMethod(""String_Node_Str"" + methodName,(Class[])null);
      }
 catch (      NoSuchMethodException nsme) {
        getMethod=propClass.getMethod(""String_Node_Str"" + methodName.toLowerCase(),(Class[])null);
      }
      propertyValue=getMethod.invoke(dynaPropVal,(Object[])null);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (dynaPropVal.getClass().isArray()) {
    propertyValue=dynaPropVal;
  }
 else {
    propertyValue=dynaPropVal;
  }
  return propertyValue;
}"
10581,"/** 
 * Find a VM by its location on a datastore
 * @param datacenter The datacenter within which it searches.
 * @param dPath The datastore path, for example, ""[storage1] WinXP/WinXP.vmx"".
 * @return A VirtualMachine that pointed by the dPath
 * @throws RemoteException 
 * @throws RuntimeFault 
 * @throws InvalidDatastore 
 */
public VirtualMachine findByDatastorePath(Datacenter datacenter,String dPath) throws InvalidDatastore, RuntimeFault, RemoteException {
  if (datacenter == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ManagedObjectReference mor=getVimService().findByDatastorePath(getMOR(),datacenter.getMOR(),dPath);
  return new VirtualMachine(getServerConnection(),mor);
}","/** 
 * Find a VM by its location on a datastore
 * @param datacenter The datacenter within which it searches.
 * @param dPath The datastore path, for example, ""[storage1] WinXP/WinXP.vmx"".
 * @return A VirtualMachine that pointed by the dPath
 * @throws RemoteException 
 * @throws RuntimeFault 
 * @throws InvalidDatastore 
 */
public VirtualMachine findByDatastorePath(Datacenter datacenter,String dPath) throws InvalidDatastore, RuntimeFault, RemoteException {
  if (datacenter == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ManagedObjectReference mor=getVimService().findByDatastorePath(getMOR(),datacenter.getMOR(),dPath);
  return (VirtualMachine)MorUtil.createExactManagedEntity(getServerConnection(),mor);
}"
10582,"protected int adjustStoredItemCount(int amount,boolean notify){
  if (protoStack.isEmpty() || amount == 0)   return amount;
  if (amount > 0) {
    if (attrs.isUnlimitedVending())     return 0;
    int originalCount=count;
    count=Math.min(count + amount,getMaxCapacity());
    if (count != originalCount && notify)     onAmountChanged();
    if (attrs.isVoid())     return 0;
    return amount - (count - originalCount);
  }
 else {
    int originalCount=count;
    setStoredItemCount(originalCount + amount,notify);
    return amount - (count - originalCount);
  }
}","protected int adjustStoredItemCount(int amount,boolean notify){
  if (protoStack.isEmpty() || amount == 0)   return amount;
  if (amount > 0) {
    if (attrs.isUnlimitedVending())     return 0;
    int originalCount=count;
    count=Math.min(count + amount,getMaxCapacity());
    if (count != originalCount && notify)     onAmountChanged();
    if (attrs.isVoid())     return 0;
    return amount - (count - originalCount);
  }
 else {
    int originalCount=count;
    setStoredItemCount(originalCount + amount,notify);
    return -amount - (originalCount - count);
  }
}"
10583,"@Override public TileEntityDrawers createNewTileEntity(World world,int meta){
  IBlockState state=getStateFromMeta(meta);
  EnumBasicDrawer type=state.getValue(BLOCK);
  return new TileEntityDrawersStandard(type.getDrawerCount());
}","@Override public TileEntityDrawers createNewTileEntity(World world,int meta){
  IBlockState state=getStateFromMeta(meta);
  EnumBasicDrawer type=state.getValue(BLOCK);
  return TileEntityDrawersStandard.createEntity(type.getDrawerCount());
}"
10584,"public int putItemsIntoSlot(int slot,@Nonnull ItemStack stack,int count){
  IDrawer drawer=getGroup().getDrawer(slot);
  if (!drawer.isEnabled())   return 0;
  if (drawer.isEmpty())   drawer.setStoredItem(stack);
  if (!drawer.canItemBeStored(stack))   return 0;
  int countAdded=Math.min(count,stack.getCount());
  if (!drawerAttributes.isVoid())   countAdded=Math.min(countAdded,drawer.getRemainingCapacity());
  drawer.setStoredItemCount(drawer.getStoredItemCount() + countAdded);
  stack.shrink(countAdded);
  return countAdded;
}","public int putItemsIntoSlot(int slot,@Nonnull ItemStack stack,int count){
  IDrawer drawer=getGroup().getDrawer(slot);
  if (!drawer.isEnabled())   return 0;
  if (drawer.isEmpty())   drawer=drawer.setStoredItem(stack);
  if (!drawer.canItemBeStored(stack))   return 0;
  int countAdded=Math.min(count,stack.getCount());
  if (!drawerAttributes.isVoid())   countAdded=Math.min(countAdded,drawer.getRemainingCapacity());
  drawer.setStoredItemCount(drawer.getStoredItemCount() + countAdded);
  stack.shrink(countAdded);
  return countAdded;
}"
10585,"@SideOnly(Side.CLIENT) private void clientUpdateCountAsync(int slot,int count){
  IDrawer drawer=getDrawer(slot);
  if (!drawer.isEnabled() && drawer.getStoredItemCount() != count)   drawer.setStoredItemCount(count);
}","@SideOnly(Side.CLIENT) private void clientUpdateCountAsync(int slot,int count){
  IDrawer drawer=getDrawer(slot);
  if (drawer.isEnabled() && drawer.getStoredItemCount() != count)   drawer.setStoredItemCount(count);
}"
10586,"@Override protected IDrawerGroup getGroup(){
  return groupData;
}","@Override protected IDrawerGroup getGroup(){
  return null;
}"
10587,"private void populateSlots(@Nonnull ItemStack itemPrototype){
  World world=group.getWorld();
  if (world == null) {
    protoStack[0]=itemPrototype;
    convRate[0]=1;
    return;
  }
  CompactingHelper compacting=new CompactingHelper(world);
  Stack<CompactingHelper.Result> resultStack=new Stack<>();
  @Nonnull ItemStack lookupTarget=itemPrototype;
  for (int i=0; i < slotCount; i++) {
    CompactingHelper.Result lookup=compacting.findHigherTier(lookupTarget);
    if (lookup.getStack().isEmpty())     break;
    resultStack.push(lookup);
    lookupTarget=lookup.getStack();
  }
  int index=0;
  for (int n=resultStack.size(); index < n; index++) {
    CompactingHelper.Result result=resultStack.pop();
    populateRawSlot(index,result.getStack(),result.getSize());
    group.log(""String_Node_Str"" + result.getStack().toString() + ""String_Node_Str""+ result.getSize());
    for (int i=0; i < index - 1; i++)     convRate[i]*=result.getSize();
  }
  if (index == slotCount)   return;
  populateRawSlot(index,itemPrototype,1);
  lookupTarget=itemPrototype;
  for (; index < slotCount; index++) {
    CompactingHelper.Result lookup=compacting.findLowerTier(lookupTarget);
    if (lookup.getStack().isEmpty())     break;
    populateRawSlot(index,lookup.getStack(),lookup.getSize());
    group.log(""String_Node_Str"" + lookup.getStack().toString() + ""String_Node_Str""+ lookup.getSize());
    for (int i=0; i < index - 1; i++)     convRate[i]*=lookup.getSize();
    lookupTarget=lookup.getStack();
  }
}","private void populateSlots(@Nonnull ItemStack itemPrototype){
  World world=group.getWorld();
  if (world == null) {
    protoStack[0]=itemPrototype;
    convRate[0]=1;
    return;
  }
  CompactingHelper compacting=new CompactingHelper(world);
  Stack<CompactingHelper.Result> resultStack=new Stack<>();
  @Nonnull ItemStack lookupTarget=itemPrototype;
  for (int i=0; i < slotCount; i++) {
    CompactingHelper.Result lookup=compacting.findHigherTier(lookupTarget);
    if (lookup.getStack().isEmpty())     break;
    resultStack.push(lookup);
    lookupTarget=lookup.getStack();
  }
  int index=0;
  for (int n=resultStack.size(); index < n; index++) {
    CompactingHelper.Result result=resultStack.pop();
    populateRawSlot(index,result.getStack(),result.getSize());
    group.log(""String_Node_Str"" + result.getStack().toString() + ""String_Node_Str""+ result.getSize());
    for (int i=0; i < index - 1; i++)     convRate[i]*=result.getSize();
  }
  if (index == slotCount)   return;
  populateRawSlot(index++,itemPrototype,1);
  lookupTarget=itemPrototype;
  for (; index < slotCount; index++) {
    CompactingHelper.Result lookup=compacting.findLowerTier(lookupTarget);
    if (lookup.getStack().isEmpty())     break;
    populateRawSlot(index,lookup.getStack(),1);
    group.log(""String_Node_Str"" + lookup.getStack().toString() + ""String_Node_Str""+ lookup.getSize());
    for (int i=0; i < index; i++)     convRate[i]*=lookup.getSize();
    lookupTarget=lookup.getStack();
  }
}"
10588,"@Override public NBTTagCompound writeToNBT(NBTTagCompound tag){
  NBTTagList itemList=new NBTTagList();
  for (  DrawerData slot : slots)   itemList.appendTag(slot.serializeNBT());
  tag.setTag(""String_Node_Str"",itemList);
  return tag;
}","@Override public NBTTagCompound writeToNBT(NBTTagCompound tag){
  if (slots == null)   return tag;
  NBTTagList itemList=new NBTTagList();
  for (  DrawerData slot : slots)   itemList.appendTag(slot.serializeNBT());
  tag.setTag(""String_Node_Str"",itemList);
  return tag;
}"
10589,"@Override public void readFromNBT(NBTTagCompound tag){
  deserializeNBT(tag);
}","@Override public void readFromNBT(NBTTagCompound tag){
  for (int i=0; i < upgrades.length; i++)   upgrades[i]=ItemStack.EMPTY;
  if (!tag.hasKey(""String_Node_Str""))   return;
  NBTTagList tagList=tag.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < tagList.tagCount(); i++) {
    NBTTagCompound upgradeTag=tagList.getCompoundTagAt(i);
    int slot=upgradeTag.getByte(""String_Node_Str"");
    upgrades[slot]=new ItemStack(upgradeTag);
  }
  syncUpgrades();
}"
10590,"@Override public NBTTagCompound writeToNBT(NBTTagCompound tag){
  NBTTagCompound stag=serializeNBT();
  tag.setTag(""String_Node_Str"",stag.getCompoundTag(""String_Node_Str""));
  return tag;
}","@Override public NBTTagCompound writeToNBT(NBTTagCompound tag){
  NBTTagList tagList=new NBTTagList();
  for (int i=0; i < upgrades.length; i++) {
    if (!upgrades[i].isEmpty()) {
      NBTTagCompound upgradeTag=upgrades[i].writeToNBT(new NBTTagCompound());
      upgradeTag.setByte(""String_Node_Str"",(byte)i);
      tagList.appendTag(upgradeTag);
    }
  }
  tag.setTag(""String_Node_Str"",tagList);
  return tag;
}"
10591,"@SubscribeEvent public static void registerBlocks(RegistryEvent.Register<Block> event){
  IForgeRegistry<Block> registry=event.getRegistry();
  ConfigManager config=StorageDrawers.config;
  registry.registerAll(new BlockVariantDrawers(""String_Node_Str"",""String_Node_Str""),new BlockKeyButton(""String_Node_Str"",""String_Node_Str""));
  GameRegistry.registerTileEntity(TileEntityDrawersStandard.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityKeyButton.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  if (config.isBlockEnabled(""String_Node_Str"")) {
    registry.register(new BlockCompDrawers(""String_Node_Str"",""String_Node_Str""));
    GameRegistry.registerTileEntity(TileEntityDrawersComp.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  }
  if (config.isBlockEnabled(""String_Node_Str"")) {
    registry.register(new BlockController(""String_Node_Str""));
    GameRegistry.registerTileEntity(TileEntityController.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  }
  if (config.isBlockEnabled(""String_Node_Str"")) {
    registry.register(new BlockSlave(""String_Node_Str"",""String_Node_Str""));
    GameRegistry.registerTileEntity(TileEntitySlave.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  }
  if (config.isBlockEnabled(""String_Node_Str"")) {
    registry.register(new BlockTrim(""String_Node_Str"",""String_Node_Str""));
  }
  if (config.cache.enableFramedDrawers) {
    registry.registerAll(new BlockFramingTable(""String_Node_Str"",""String_Node_Str""),new BlockDrawersCustom(""String_Node_Str"",""String_Node_Str""),new BlockTrimCustom(""String_Node_Str"",""String_Node_Str""));
    GameRegistry.registerTileEntity(TileEntityFramingTable.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
    GameRegistry.registerTileEntity(TileEntityTrim.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  }
}","@SubscribeEvent public static void registerBlocks(RegistryEvent.Register<Block> event){
  IForgeRegistry<Block> registry=event.getRegistry();
  ConfigManager config=StorageDrawers.config;
  registry.registerAll(new BlockVariantDrawers(""String_Node_Str"",""String_Node_Str""),new BlockKeyButton(""String_Node_Str"",""String_Node_Str""));
  GameRegistry.registerTileEntity(TileEntityDrawersStandard.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityDrawersStandard.Slot1.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityDrawersStandard.Slot2.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityDrawersStandard.Slot4.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityKeyButton.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  if (config.isBlockEnabled(""String_Node_Str"")) {
    registry.register(new BlockCompDrawers(""String_Node_Str"",""String_Node_Str""));
    GameRegistry.registerTileEntity(TileEntityDrawersComp.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  }
  if (config.isBlockEnabled(""String_Node_Str"")) {
    registry.register(new BlockController(""String_Node_Str""));
    GameRegistry.registerTileEntity(TileEntityController.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  }
  if (config.isBlockEnabled(""String_Node_Str"")) {
    registry.register(new BlockSlave(""String_Node_Str"",""String_Node_Str""));
    GameRegistry.registerTileEntity(TileEntitySlave.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  }
  if (config.isBlockEnabled(""String_Node_Str"")) {
    registry.register(new BlockTrim(""String_Node_Str"",""String_Node_Str""));
  }
  if (config.cache.enableFramedDrawers) {
    registry.registerAll(new BlockFramingTable(""String_Node_Str"",""String_Node_Str""),new BlockDrawersCustom(""String_Node_Str"",""String_Node_Str""),new BlockTrimCustom(""String_Node_Str"",""String_Node_Str""));
    GameRegistry.registerTileEntity(TileEntityFramingTable.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
    GameRegistry.registerTileEntity(TileEntityTrim.class,StorageDrawers.MOD_ID + ""String_Node_Str"");
  }
}"
10592,"@Nonnull private ItemStack insertItemInternal(int slot,@Nonnull ItemStack stack,boolean simulate){
  IDrawer drawer=group.getDrawer(slot);
  if (!drawer.isEnabled() || !drawer.canItemBeStored(stack))   return stack;
  int availableCount=drawer.isEmpty() ? drawer.getMaxCapacity(stack) : drawer.getRemainingCapacity();
  IDrawerAttributes attrs=capProvider.getCapability(DRAWER_ATTRIBUTES_CAPABILITY,null);
  if (attrs != null && attrs.isVoid())   availableCount=Integer.MAX_VALUE;
  int stackSize=stack.getCount();
  int insertCount=Math.min(stackSize,availableCount);
  int remainder=stackSize - insertCount;
  if (remainder == stackSize)   return stack;
  if (!simulate) {
    if (drawer.isEmpty())     drawer.setStoredItem(stack);
    drawer.setStoredItemCount(drawer.getStoredItemCount() + insertCount);
  }
  if (remainder == 0)   return ItemStack.EMPTY;
  ItemStack returnStack=stack.copy();
  returnStack.setCount(remainder);
  return returnStack;
}","@Nonnull private ItemStack insertItemInternal(int slot,@Nonnull ItemStack stack,boolean simulate){
  IDrawer drawer=group.getDrawer(slot);
  if (!drawer.isEnabled() || !drawer.canItemBeStored(stack))   return stack;
  int availableCount=drawer.isEmpty() ? drawer.getMaxCapacity(stack) : drawer.getRemainingCapacity();
  IDrawerAttributes attrs=capProvider.getCapability(DRAWER_ATTRIBUTES_CAPABILITY,null);
  if (attrs != null && attrs.isVoid())   availableCount=Integer.MAX_VALUE;
  int stackSize=stack.getCount();
  int insertCount=Math.min(stackSize,availableCount);
  int remainder=stackSize - insertCount;
  if (remainder == stackSize)   return stack;
  if (!simulate) {
    if (drawer.isEmpty())     drawer=drawer.setStoredItem(stack);
    drawer.setStoredItemCount(drawer.getStoredItemCount() + insertCount);
  }
  if (remainder == 0)   return ItemStack.EMPTY;
  ItemStack returnStack=stack.copy();
  returnStack.setCount(remainder);
  return returnStack;
}"
10593,"@Override public void putStack(@Nonnull ItemStack stack){
  drawer.setStoredItem(stack);
  if (!ItemStackHelper.isStackEncoded(stack))   drawer.setStoredItemCount(stack.getCount());
}","@Override public void putStack(@Nonnull ItemStack stack){
  IDrawer target=drawer.setStoredItem(stack);
  if (!ItemStackHelper.isStackEncoded(stack))   target.setStoredItemCount(stack.getCount());
}"
10594,"@Override public NBTTagCompound writeToPortableNBT(NBTTagCompound tag){
  tag=super.writeToPortableNBT(tag);
  tag.setInteger(""String_Node_Str"",drawerCapacity);
  if (material != null)   tag.setString(""String_Node_Str"",material);
  NBTTagList upgradeList=new NBTTagList();
  for (int i=0; i < upgrades.length; i++) {
    if (upgrades[i] != null) {
      NBTTagCompound upgradeTag=upgrades[i].writeToNBT(new NBTTagCompound());
      upgradeTag.setByte(""String_Node_Str"",(byte)i);
      upgradeList.appendTag(upgradeTag);
    }
  }
  if (upgradeList.tagCount() > 0)   tag.setTag(""String_Node_Str"",upgradeList);
  if (lockAttributes != null)   tag.setByte(""String_Node_Str"",(byte)LockAttribute.getBitfield(lockAttributes));
  if (shrouded)   tag.setBoolean(""String_Node_Str"",shrouded);
  if (quantified)   tag.setBoolean(""String_Node_Str"",true);
  if (owner != null)   tag.setString(""String_Node_Str"",owner.toString());
  if (securityKey != null)   tag.setString(""String_Node_Str"",securityKey);
  if (hideUpgrade)   tag.setBoolean(""String_Node_Str"",hideUpgrade);
  NBTTagList slots=new NBTTagList();
  for (  IDrawer drawer : drawers) {
    NBTTagCompound slot=new NBTTagCompound();
    drawer.writeToNBT(slot);
    slots.appendTag(slot);
  }
  tag.setTag(""String_Node_Str"",slots);
  if (materialSide != null) {
    NBTTagCompound itag=new NBTTagCompound();
    materialSide.writeToNBT(itag);
    tag.setTag(""String_Node_Str"",itag);
  }
  if (materialFront != null) {
    NBTTagCompound itag=new NBTTagCompound();
    materialFront.writeToNBT(itag);
    tag.setTag(""String_Node_Str"",itag);
  }
  if (materialTrim != null) {
    NBTTagCompound itag=new NBTTagCompound();
    materialTrim.writeToNBT(itag);
    tag.setTag(""String_Node_Str"",itag);
  }
  return tag;
}","@Override public NBTTagCompound writeToPortableNBT(NBTTagCompound tag){
  tag=super.writeToPortableNBT(tag);
  tag.setInteger(""String_Node_Str"",getDrawerCapacity());
  if (material != null)   tag.setString(""String_Node_Str"",material);
  NBTTagList upgradeList=new NBTTagList();
  for (int i=0; i < upgrades.length; i++) {
    if (upgrades[i] != null) {
      NBTTagCompound upgradeTag=upgrades[i].writeToNBT(new NBTTagCompound());
      upgradeTag.setByte(""String_Node_Str"",(byte)i);
      upgradeList.appendTag(upgradeTag);
    }
  }
  if (upgradeList.tagCount() > 0)   tag.setTag(""String_Node_Str"",upgradeList);
  if (lockAttributes != null)   tag.setByte(""String_Node_Str"",(byte)LockAttribute.getBitfield(lockAttributes));
  if (shrouded)   tag.setBoolean(""String_Node_Str"",shrouded);
  if (quantified)   tag.setBoolean(""String_Node_Str"",true);
  if (owner != null)   tag.setString(""String_Node_Str"",owner.toString());
  if (securityKey != null)   tag.setString(""String_Node_Str"",securityKey);
  if (hideUpgrade)   tag.setBoolean(""String_Node_Str"",hideUpgrade);
  NBTTagList slots=new NBTTagList();
  for (  IDrawer drawer : drawers) {
    NBTTagCompound slot=new NBTTagCompound();
    drawer.writeToNBT(slot);
    slots.appendTag(slot);
  }
  tag.setTag(""String_Node_Str"",slots);
  if (materialSide != null) {
    NBTTagCompound itag=new NBTTagCompound();
    materialSide.writeToNBT(itag);
    tag.setTag(""String_Node_Str"",itag);
  }
  if (materialFront != null) {
    NBTTagCompound itag=new NBTTagCompound();
    materialFront.writeToNBT(itag);
    tag.setTag(""String_Node_Str"",itag);
  }
  if (materialTrim != null) {
    NBTTagCompound itag=new NBTTagCompound();
    materialTrim.writeToNBT(itag);
    tag.setTag(""String_Node_Str"",itag);
  }
  return tag;
}"
10595,"@Override public int getDrawerCapacity(){
  if (capacity == 0) {
    ConfigManager config=StorageDrawers.config;
    capacity=config.getBlockBaseStorage(""String_Node_Str"");
    if (capacity <= 0)     capacity=1;
    attributeChanged();
  }
  return capacity;
}","@Override public int getDrawerCapacity(){
  if (world == null || world.isRemote)   return super.getDrawerCapacity();
  if (capacity == 0) {
    ConfigManager config=StorageDrawers.config;
    capacity=config.getBlockBaseStorage(""String_Node_Str"");
    if (capacity <= 0)     capacity=1;
    attributeChanged();
  }
  return capacity;
}"
10596,"@Override public int getDrawerCapacity(){
  if (capacity == 0) {
    if (world == null)     return 1;
    IBlockState blockState=world.getBlockState(this.pos);
    if (!blockState.getPropertyKeys().contains(BlockStandardDrawers.BLOCK))     return 1;
    EnumBasicDrawer type=blockState.getValue(BlockStandardDrawers.BLOCK);
    ConfigManager config=StorageDrawers.config;
switch (type) {
case FULL1:
      capacity=config.getBlockBaseStorage(""String_Node_Str"");
    break;
case FULL2:
  capacity=config.getBlockBaseStorage(""String_Node_Str"");
break;
case FULL4:
capacity=config.getBlockBaseStorage(""String_Node_Str"");
break;
case HALF2:
capacity=config.getBlockBaseStorage(""String_Node_Str"");
break;
case HALF4:
capacity=config.getBlockBaseStorage(""String_Node_Str"");
break;
default :
capacity=1;
}
if (capacity <= 0) capacity=1;
attributeChanged();
}
return capacity;
}","@Override public int getDrawerCapacity(){
  if (world == null || world.isRemote)   return super.getDrawerCapacity();
  if (capacity == 0) {
    IBlockState blockState=world.getBlockState(this.pos);
    if (!blockState.getPropertyKeys().contains(BlockStandardDrawers.BLOCK))     return 1;
    EnumBasicDrawer type=blockState.getValue(BlockStandardDrawers.BLOCK);
    ConfigManager config=StorageDrawers.config;
switch (type) {
case FULL1:
      capacity=config.getBlockBaseStorage(""String_Node_Str"");
    break;
case FULL2:
  capacity=config.getBlockBaseStorage(""String_Node_Str"");
break;
case FULL4:
capacity=config.getBlockBaseStorage(""String_Node_Str"");
break;
case HALF2:
capacity=config.getBlockBaseStorage(""String_Node_Str"");
break;
case HALF4:
capacity=config.getBlockBaseStorage(""String_Node_Str"");
break;
default :
capacity=1;
}
if (capacity <= 0) capacity=1;
attributeChanged();
}
return capacity;
}"
10597,"@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,EnumFacing side,float hitX,float hitY,float hitZ){
  ItemStack item=player.getHeldItem(hand);
  if (hand == EnumHand.OFF_HAND)   return false;
  if (world.isRemote && Minecraft.getSystemTime() == ignoreEventTime) {
    ignoreEventTime=0;
    return false;
  }
  TileEntityDrawers tileDrawers=getTileEntitySafe(world,pos);
  if (!SecurityManager.hasAccess(player.getGameProfile(),tileDrawers))   return false;
  if (StorageDrawers.config.cache.debugTrace) {
    FMLLog.log(StorageDrawers.MOD_ID,Level.INFO,""String_Node_Str"");
    FMLLog.log(StorageDrawers.MOD_ID,Level.INFO,(item.isEmpty()) ? ""String_Node_Str"" : ""String_Node_Str"" + item.toString());
  }
  if (!item.isEmpty()) {
    if (item.getItem() instanceof ItemTrim && player.isSneaking()) {
      if (!retrimBlock(world,pos,item))       return false;
      if (!player.capabilities.isCreativeMode) {
        item.shrink(1);
        if (item.getCount() <= 0)         player.inventory.setInventorySlotContents(player.inventory.currentItem,ItemStack.EMPTY);
      }
      return true;
    }
 else     if (item.getItem() instanceof ItemUpgrade) {
      if (item.getItem() == ModItems.upgradeOneStack && !tileDrawers.canAddOneStackUpgrade()) {
        if (!world.isRemote)         player.sendStatusMessage(new TextComponentTranslation(""String_Node_Str""));
        return false;
      }
      if (!tileDrawers.canAddUpgrade(item))       return false;
      if (!tileDrawers.addUpgrade(item)) {
        if (!world.isRemote)         player.sendStatusMessage(new TextComponentTranslation(""String_Node_Str""),true);
        return false;
      }
      world.notifyBlockUpdate(pos,state,state,3);
      if (!player.capabilities.isCreativeMode) {
        item.shrink(1);
        if (item.getCount() <= 0)         player.inventory.setInventorySlotContents(player.inventory.currentItem,ItemStack.EMPTY);
      }
      return true;
    }
 else     if (item.getItem() == ModItems.drawerKey) {
      boolean locked=tileDrawers.isItemLocked(LockAttribute.LOCK_POPULATED);
      tileDrawers.setItemLocked(LockAttribute.LOCK_POPULATED,!locked);
      tileDrawers.setItemLocked(LockAttribute.LOCK_EMPTY,!locked);
      return true;
    }
 else     if (item.getItem() == ModItems.shroudKey) {
      tileDrawers.setIsShrouded(!tileDrawers.isShrouded());
      return true;
    }
 else     if (item.getItem() == ModItems.quantifyKey) {
      tileDrawers.setIsShowingQuantity(!tileDrawers.isShowingQuantity());
      return true;
    }
 else     if (item.getItem() instanceof ItemPersonalKey) {
      String securityKey=((ItemPersonalKey)item.getItem()).getSecurityProviderKey(item.getItemDamage());
      ISecurityProvider provider=StorageDrawers.securityRegistry.getProvider(securityKey);
      if (tileDrawers.getOwner() == null) {
        tileDrawers.setOwner(player.getPersistentID());
        tileDrawers.setSecurityProvider(provider);
      }
 else       if (SecurityManager.hasOwnership(player.getGameProfile(),tileDrawers)) {
        tileDrawers.setOwner(null);
        tileDrawers.setSecurityProvider(null);
      }
 else       return false;
      return true;
    }
 else     if (item.getItem() == ModItems.tape)     return false;
  }
 else   if (item.isEmpty() && player.isSneaking()) {
    if (tileDrawers.isSealed()) {
      tileDrawers.setIsSealed(false);
      return true;
    }
 else     if (StorageDrawers.config.cache.enableDrawerUI) {
      player.openGui(StorageDrawers.instance,GuiHandler.drawersGuiID,world,pos.getX(),pos.getY(),pos.getZ());
      return true;
    }
  }
  if (tileDrawers.getDirection() != side.ordinal())   return false;
  if (tileDrawers.isSealed())   return false;
  int slot=getDrawerSlot(getDrawerCount(state),side.ordinal(),hitX,hitY,hitZ);
  tileDrawers.interactPutItemsIntoSlot(slot,player);
  if (item.isEmpty())   player.setHeldItem(hand,ItemStack.EMPTY);
  return true;
}","@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,EnumFacing side,float hitX,float hitY,float hitZ){
  ItemStack item=player.getHeldItem(hand);
  if (hand == EnumHand.OFF_HAND)   return false;
  if (world.isRemote && Minecraft.getSystemTime() == ignoreEventTime) {
    ignoreEventTime=0;
    return false;
  }
  TileEntityDrawers tileDrawers=getTileEntitySafe(world,pos);
  if (!SecurityManager.hasAccess(player.getGameProfile(),tileDrawers))   return false;
  if (StorageDrawers.config.cache.debugTrace) {
    FMLLog.log(StorageDrawers.MOD_ID,Level.INFO,""String_Node_Str"");
    FMLLog.log(StorageDrawers.MOD_ID,Level.INFO,(item.isEmpty()) ? ""String_Node_Str"" : ""String_Node_Str"" + item.toString());
  }
  if (!item.isEmpty()) {
    if (item.getItem() instanceof ItemTrim && player.isSneaking()) {
      if (!retrimBlock(world,pos,item))       return false;
      if (!player.capabilities.isCreativeMode) {
        item.shrink(1);
        if (item.getCount() <= 0)         player.inventory.setInventorySlotContents(player.inventory.currentItem,ItemStack.EMPTY);
      }
      return true;
    }
 else     if (item.getItem() instanceof ItemUpgrade) {
      if (item.getItem() == ModItems.upgradeOneStack && !tileDrawers.canAddOneStackUpgrade()) {
        if (!world.isRemote)         player.sendStatusMessage(new TextComponentTranslation(""String_Node_Str""),true);
        return false;
      }
      if (!tileDrawers.canAddUpgrade(item))       return false;
      if (!tileDrawers.addUpgrade(item)) {
        if (!world.isRemote)         player.sendStatusMessage(new TextComponentTranslation(""String_Node_Str""),true);
        return false;
      }
      world.notifyBlockUpdate(pos,state,state,3);
      if (!player.capabilities.isCreativeMode) {
        item.shrink(1);
        if (item.getCount() <= 0)         player.inventory.setInventorySlotContents(player.inventory.currentItem,ItemStack.EMPTY);
      }
      return true;
    }
 else     if (item.getItem() == ModItems.drawerKey) {
      boolean locked=tileDrawers.isItemLocked(LockAttribute.LOCK_POPULATED);
      tileDrawers.setItemLocked(LockAttribute.LOCK_POPULATED,!locked);
      tileDrawers.setItemLocked(LockAttribute.LOCK_EMPTY,!locked);
      return true;
    }
 else     if (item.getItem() == ModItems.shroudKey) {
      tileDrawers.setIsShrouded(!tileDrawers.isShrouded());
      return true;
    }
 else     if (item.getItem() == ModItems.quantifyKey) {
      tileDrawers.setIsShowingQuantity(!tileDrawers.isShowingQuantity());
      return true;
    }
 else     if (item.getItem() instanceof ItemPersonalKey) {
      String securityKey=((ItemPersonalKey)item.getItem()).getSecurityProviderKey(item.getItemDamage());
      ISecurityProvider provider=StorageDrawers.securityRegistry.getProvider(securityKey);
      if (tileDrawers.getOwner() == null) {
        tileDrawers.setOwner(player.getPersistentID());
        tileDrawers.setSecurityProvider(provider);
      }
 else       if (SecurityManager.hasOwnership(player.getGameProfile(),tileDrawers)) {
        tileDrawers.setOwner(null);
        tileDrawers.setSecurityProvider(null);
      }
 else       return false;
      return true;
    }
 else     if (item.getItem() == ModItems.tape)     return false;
  }
 else   if (item.isEmpty() && player.isSneaking()) {
    if (tileDrawers.isSealed()) {
      tileDrawers.setIsSealed(false);
      return true;
    }
 else     if (StorageDrawers.config.cache.enableDrawerUI) {
      player.openGui(StorageDrawers.instance,GuiHandler.drawersGuiID,world,pos.getX(),pos.getY(),pos.getZ());
      return true;
    }
  }
  if (tileDrawers.getDirection() != side.ordinal())   return false;
  if (tileDrawers.isSealed())   return false;
  int slot=getDrawerSlot(getDrawerCount(state),side.ordinal(),hitX,hitY,hitZ);
  tileDrawers.interactPutItemsIntoSlot(slot,player);
  if (item.isEmpty())   player.setHeldItem(hand,ItemStack.EMPTY);
  return true;
}"
10598,"@Nullable @Override @SuppressWarnings(""String_Node_Str"") public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState,World worldIn,BlockPos pos){
  return NULL_AABB;
}","@Nullable @Override @SuppressWarnings(""String_Node_Str"") public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState,IBlockAccess worldIn,BlockPos pos){
  return NULL_AABB;
}"
10599,"@Override public boolean onBlockActivated(World worldIn,BlockPos pos,IBlockState state,EntityPlayer playerIn,EnumHand hand,@Nullable ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  state=getActualState(state,worldIn,pos);
  if (state.getValue(POWERED))   return true;
  TileEntityKeyButton tile=getTileEntity(worldIn,pos);
  if (tile != null)   tile.setPowered(true);
  worldIn.setBlockState(pos,state.withProperty(POWERED,true),3);
  worldIn.markBlockRangeForRenderUpdate(pos,pos);
  worldIn.playSound(playerIn,pos,SoundEvents.BLOCK_STONE_BUTTON_CLICK_ON,SoundCategory.BLOCKS,0.3F,0.6F);
  notifyNeighbors(worldIn,pos,state.getValue(FACING));
  worldIn.scheduleUpdate(pos,this,tickRate(worldIn));
  BlockPos targetPos=pos.offset(state.getValue(FACING).getOpposite());
  Block target=worldIn.getBlockState(targetPos).getBlock();
  if (target instanceof BlockController) {
    BlockController controller=(BlockController)target;
    controller.toggle(worldIn,targetPos,playerIn,state.getValue(VARIANT));
  }
 else   if (target instanceof BlockSlave) {
    BlockSlave slave=(BlockSlave)target;
    slave.toggle(worldIn,targetPos,playerIn,state.getValue(VARIANT));
  }
  return super.onBlockActivated(worldIn,pos,state,playerIn,hand,heldItem,side,hitX,hitY,hitZ);
}","@Override public boolean onBlockActivated(World worldIn,BlockPos pos,IBlockState state,EntityPlayer playerIn,EnumHand hand,EnumFacing side,float hitX,float hitY,float hitZ){
  state=getActualState(state,worldIn,pos);
  if (state.getValue(POWERED))   return true;
  TileEntityKeyButton tile=getTileEntity(worldIn,pos);
  if (tile != null)   tile.setPowered(true);
  worldIn.setBlockState(pos,state.withProperty(POWERED,true),3);
  worldIn.markBlockRangeForRenderUpdate(pos,pos);
  worldIn.playSound(playerIn,pos,SoundEvents.BLOCK_STONE_BUTTON_CLICK_ON,SoundCategory.BLOCKS,0.3F,0.6F);
  notifyNeighbors(worldIn,pos,state.getValue(FACING));
  worldIn.scheduleUpdate(pos,this,tickRate(worldIn));
  BlockPos targetPos=pos.offset(state.getValue(FACING).getOpposite());
  Block target=worldIn.getBlockState(targetPos).getBlock();
  if (target instanceof BlockController) {
    BlockController controller=(BlockController)target;
    controller.toggle(worldIn,targetPos,playerIn,state.getValue(VARIANT));
  }
 else   if (target instanceof BlockSlave) {
    BlockSlave slave=(BlockSlave)target;
    slave.toggle(worldIn,targetPos,playerIn,state.getValue(VARIANT));
  }
  return super.onBlockActivated(worldIn,pos,state,playerIn,hand,side,hitX,hitY,hitZ);
}"
10600,"@Override public void getSubBlocks(Item item,CreativeTabs tab,List<ItemStack> list){
  for (  EnumKeyType type : EnumKeyType.values()) {
    list.add(new ItemStack(item,1,type.getMetadata()));
  }
}","@Override public void getSubBlocks(Item item,CreativeTabs tab,NonNullList<ItemStack> list){
  for (  EnumKeyType type : EnumKeyType.values()) {
    list.add(new ItemStack(item,1,type.getMetadata()));
  }
}"
10601,"@Override @SuppressWarnings(""String_Node_Str"") public void neighborChanged(IBlockState state,World worldIn,BlockPos pos,Block blockIn){
  state=getActualState(state,worldIn,pos);
  if (checkForDrop(worldIn,pos,state) && !canPlaceBlock(worldIn,pos,state.getValue(FACING).getOpposite())) {
    dropBlockAsItem(worldIn,pos,state,0);
    worldIn.setBlockToAir(pos);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public void neighborChanged(IBlockState state,World worldIn,BlockPos pos,Block blockIn,BlockPos fromPos){
  state=getActualState(state,worldIn,pos);
  if (checkForDrop(worldIn,pos,state) && !canPlaceBlock(worldIn,pos,state.getValue(FACING).getOpposite())) {
    dropBlockAsItem(worldIn,pos,state,0);
    worldIn.setBlockToAir(pos);
  }
}"
10602,"public BlockKeyButton(String blockName){
  super(Material.CIRCUITS);
  setHardness(5);
  setUnlocalizedName(blockName);
  setRegistryName(blockName);
  setSoundType(SoundType.STONE);
  setCreativeTab(ModCreativeTabs.tabStorageDrawers);
  setTickRandomly(true);
  setDefaultState(blockState.getBaseState().withProperty(FACING,EnumFacing.NORTH).withProperty(POWERED,false).withProperty(VARIANT,EnumKeyType.DRAWER));
}","public BlockKeyButton(String registryName,String blockName){
  super(Material.CIRCUITS);
  setHardness(5);
  setUnlocalizedName(blockName);
  setRegistryName(registryName);
  setSoundType(SoundType.STONE);
  setCreativeTab(ModCreativeTabs.tabStorageDrawers);
  setTickRandomly(true);
  setDefaultState(blockState.getBaseState().withProperty(FACING,EnumFacing.NORTH).withProperty(POWERED,false).withProperty(VARIANT,EnumKeyType.DRAWER));
}"
10603,"@Override public IBlockState getStateForPlacement(World world,BlockPos pos,EnumFacing facing,float hitX,float hitY,float hitZ,int meta,EntityLivingBase placer,ItemStack stack){
  if (canPlaceBlock(world,pos,facing.getOpposite()))   return getStateFromMeta(meta).withProperty(FACING,facing).withProperty(POWERED,false);
  return getStateFromMeta(meta).withProperty(FACING,EnumFacing.DOWN).withProperty(POWERED,false);
}","@Override @SuppressWarnings(""String_Node_Str"") public IBlockState getStateForPlacement(World world,BlockPos pos,EnumFacing facing,float hitX,float hitY,float hitZ,int meta,EntityLivingBase placer){
  if (canPlaceBlock(world,pos,facing.getOpposite()))   return getStateFromMeta(meta).withProperty(FACING,facing).withProperty(POWERED,false);
  return getStateFromMeta(meta).withProperty(FACING,EnumFacing.DOWN).withProperty(POWERED,false);
}"
10604,"private void notifyNeighbors(World worldIn,BlockPos pos,EnumFacing facing){
  worldIn.notifyNeighborsOfStateChange(pos,this);
  worldIn.notifyNeighborsOfStateChange(pos.offset(facing.getOpposite()),this);
}","private void notifyNeighbors(World worldIn,BlockPos pos,EnumFacing facing){
  worldIn.notifyNeighborsOfStateChange(pos,this,false);
  worldIn.notifyNeighborsOfStateChange(pos.offset(facing.getOpposite()),this,false);
}"
10605,"@Override public void onBlockPlacedBy(World worldIn,BlockPos pos,IBlockState state,EntityLivingBase placer,ItemStack stack){
  TileEntityKeyButton tile=getTileEntity(worldIn,pos);
  if (tile != null)   tile.setDirection(state.getValue(FACING));
  super.onBlockPlacedBy(worldIn,pos,state,placer,stack);
}","@Override public void onBlockPlacedBy(World worldIn,BlockPos pos,IBlockState state,EntityLivingBase placer,@Nonnull ItemStack stack){
  TileEntityKeyButton tile=getTileEntity(worldIn,pos);
  if (tile != null)   tile.setDirection(state.getValue(FACING));
  super.onBlockPlacedBy(worldIn,pos,state,placer,stack);
}"
10606,"public boolean canAddUpgrade(ItemStack upgrade){
  if (upgrade == null)   return false;
  if (!(upgrade.getItem() instanceof ItemUpgrade))   return false;
  ItemUpgrade candidate=(ItemUpgrade)upgrade.getItem();
  if (candidate.getAllowMultiple())   return true;
  for (  ItemStack stack : upgrades) {
    if (stack == null)     continue;
    if (!(stack.getItem() instanceof ItemUpgrade))     continue;
    ItemUpgrade reference=(ItemUpgrade)stack.getItem();
    if (candidate == reference)     return false;
  }
  return true;
}","public boolean canAddUpgrade(@Nonnull ItemStack upgrade){
  if (upgrade.isEmpty())   return false;
  if (!(upgrade.getItem() instanceof ItemUpgrade))   return false;
  ItemUpgrade candidate=(ItemUpgrade)upgrade.getItem();
  if (candidate.getAllowMultiple())   return true;
  for (  ItemStack stack : upgrades) {
    if (stack.isEmpty())     continue;
    if (!(stack.getItem() instanceof ItemUpgrade))     continue;
    ItemUpgrade reference=(ItemUpgrade)stack.getItem();
    if (candidate == reference)     return false;
  }
  return true;
}"
10607,"public int getEffectiveDrawerCapacity(){
  for (  ItemStack upgrade : upgrades) {
    if (upgrade != null && upgrade.getItem() == ModItems.upgradeOneStack)     return 1;
  }
  return getDrawerCapacity();
}","public int getEffectiveDrawerCapacity(){
  for (  ItemStack upgrade : upgrades) {
    if (!upgrade.isEmpty() && upgrade.getItem() == ModItems.upgradeOneStack)     return 1;
  }
  return getDrawerCapacity();
}"
10608,"@Override public boolean isItemValid(ItemStack stack){
  if (stack == null)   return false;
  if (inventory instanceof InventoryUpgrade) {
    if (!((InventoryUpgrade)inventory).canAddUpgrade(stack))     return false;
    if (stack.getItem() == ModItems.upgradeOneStack)     return ((InventoryUpgrade)inventory).canAddOneStackUpgrade();
    return true;
  }
  return false;
}","@Override public boolean isItemValid(@Nonnull ItemStack stack){
  if (stack.isEmpty())   return false;
  if (inventory instanceof InventoryUpgrade) {
    if (!((InventoryUpgrade)inventory).canAddUpgrade(stack))     return false;
    if (stack.getItem() == ModItems.upgradeOneStack)     return ((InventoryUpgrade)inventory).canAddOneStackUpgrade();
    return true;
  }
  return false;
}"
10609,"@Nullable @Override public Object apply(@Nullable Object input){
  ItemStack stack=(ItemStack)input;
  return EnumKeyType.byMetadata(stack.getMetadata()).getName();
}","@Override @Nonnull public String apply(@Nonnull ItemStack input){
  return EnumKeyType.byMetadata(input.getMetadata()).getName();
}"
10610,"public ItemKeyButton(Block block){
  super(block,block,new Function(){
    @Nullable @Override public Object apply(    @Nullable Object input){
      ItemStack stack=(ItemStack)input;
      return EnumKeyType.byMetadata(stack.getMetadata()).getName();
    }
  }
);
  setHasSubtypes(true);
}","public ItemKeyButton(Block block){
  super(block,block,new Mapper(){
    @Override @Nonnull public String apply(    @Nonnull ItemStack input){
      return EnumKeyType.byMetadata(input.getMetadata()).getName();
    }
  }
);
  setHasSubtypes(true);
}"
10611,"@Override public String getUnlocalizedName(ItemStack itemStack){
  return super.getUnlocalizedName() + ""String_Node_Str"" + EnumKeyType.byMetadata(itemStack.getMetadata()).getName();
}","@Override public String getUnlocalizedName(@Nonnull ItemStack itemStack){
  return super.getUnlocalizedName() + ""String_Node_Str"" + EnumKeyType.byMetadata(itemStack.getMetadata()).getName();
}"
10612,"@Override public boolean doesSideBlockRendering(IBlockState state,IBlockAccess world,BlockPos pos,EnumFacing face){
  TileEntityDrawers tile=getTileEntity(world,pos);
  if (tile != null && tile.getEffectiveMaterialSide() == null)   return false;
  return super.doesSideBlockRendering(state,world,pos,face);
}","@Override public boolean doesSideBlockRendering(IBlockState state,IBlockAccess world,BlockPos pos,EnumFacing face){
  TileEntityDrawers tile=getTileEntity(world,pos);
  if (tile != null && tile.getEffectiveMaterialSide().isEmpty())   return false;
  return super.doesSideBlockRendering(state,world,pos,face);
}"
10613,"@Override @Nonnull protected ItemStack getMainDrop(IBlockAccess world,BlockPos pos,IBlockState state){
  TileEntityDrawers tile=getTileEntity(world,pos);
  if (tile == null)   return ItemCustomDrawers.makeItemStack(state,1,ItemStack.EMPTY,ItemStack.EMPTY,ItemStack.EMPTY);
  ItemStack drop=ItemCustomDrawers.makeItemStack(state,1,tile.getMaterialSide(),tile.getMaterialTrim(),tile.getMaterialFront());
  if (drop == null)   return null;
  NBTTagCompound data=drop.getTagCompound();
  if (data == null)   data=new NBTTagCompound();
  if (tile.isSealed()) {
    NBTTagCompound tiledata=new NBTTagCompound();
    tile.writeToNBT(tiledata);
    data.setTag(""String_Node_Str"",tiledata);
  }
  drop.setTagCompound(data);
  return drop;
}","@Override @Nonnull protected ItemStack getMainDrop(IBlockAccess world,BlockPos pos,IBlockState state){
  TileEntityDrawers tile=getTileEntity(world,pos);
  if (tile == null)   return ItemCustomDrawers.makeItemStack(state,1,ItemStack.EMPTY,ItemStack.EMPTY,ItemStack.EMPTY);
  ItemStack drop=ItemCustomDrawers.makeItemStack(state,1,tile.getMaterialSide(),tile.getMaterialTrim(),tile.getMaterialFront());
  if (drop.isEmpty())   return ItemStack.EMPTY;
  NBTTagCompound data=drop.getTagCompound();
  if (data == null)   data=new NBTTagCompound();
  if (tile.isSealed()) {
    NBTTagCompound tiledata=new NBTTagCompound();
    tile.writeToNBT(tiledata);
    data.setTag(""String_Node_Str"",tiledata);
  }
  drop.setTagCompound(data);
  return drop;
}"
10614,"public BlockPos getControllerPos(){
  return controllerCoord;
}","public BlockPos getControllerPos(){
  return controllerData.getCoord();
}"
10615,"private static void spawnItemStack(World world,double x,double y,double z,ItemStack stack){
  float xOff=RANDOM.nextFloat() * 0.8F + 0.1F;
  float yOff=RANDOM.nextFloat() * 0.8F + 0.1F;
  float zOff=RANDOM.nextFloat() * 0.8F + 0.1F;
  int stackSize=stack.getCount();
  while (stackSize > 0) {
    int dropAmt=RANDOM.nextInt(21) + 10;
    if (dropAmt > stackSize)     dropAmt=stackSize;
    stack.shrink(dropAmt);
    stackSize=stack.getCount();
    EntityItem entityitem=new EntityItem(world,x + (double)xOff,y + (double)yOff,z + (double)zOff,new ItemStack(stack.getItem(),dropAmt,stack.getMetadata()));
    if (stack.hasTagCompound())     entityitem.getEntityItem().setTagCompound(stack.getTagCompound().copy());
    float velocity=0.05F;
    entityitem.motionX=RANDOM.nextGaussian() * (double)velocity;
    entityitem.motionY=RANDOM.nextGaussian() * (double)velocity + 0.20000000298023224D;
    entityitem.motionZ=RANDOM.nextGaussian() * (double)velocity;
    world.spawnEntity(entityitem);
  }
}","private static void spawnItemStack(World world,double x,double y,double z,ItemStack stack){
  float xOff=RANDOM.nextFloat() * 0.8F + 0.1F;
  float yOff=RANDOM.nextFloat() * 0.8F + 0.1F;
  float zOff=RANDOM.nextFloat() * 0.8F + 0.1F;
  while (!stack.isEmpty()) {
    EntityItem entityitem=new EntityItem(world,x + xOff,y + yOff,z + zOff,stack.splitStack(RANDOM.nextInt(21) + 10));
    float velocity=0.05F;
    entityitem.motionX=RANDOM.nextGaussian() * (double)velocity;
    entityitem.motionY=RANDOM.nextGaussian() * (double)velocity + 0.20000000298023224D;
    entityitem.motionZ=RANDOM.nextGaussian() * (double)velocity;
    world.spawnEntity(entityitem);
  }
}"
10616,"public static void dropInventoryItems(World world,BlockPos pos,IDrawerGroup group){
  for (int i=0; i < group.getDrawerCount(); i++) {
    IDrawer drawer=group.getDrawerIfEnabled(i);
    if (drawer == null)     continue;
    while (drawer.getStoredItemCount() > 0) {
      ItemStack stack=drawer.getStoredItemPrototype().copy();
      stack.setCount(drawer.getStoredItemCount());
      if (!stack.isEmpty())       break;
      spawnItemStack(world,pos.getX(),pos.getY(),pos.getZ(),stack);
      drawer.setStoredItemCount(0);
    }
  }
}","public static void dropInventoryItems(World world,BlockPos pos,IDrawerGroup group){
  for (int i=0; i < group.getDrawerCount(); i++) {
    IDrawer drawer=group.getDrawerIfEnabled(i);
    if (drawer == null)     continue;
    while (drawer.getStoredItemCount() > 0) {
      ItemStack stack=drawer.getStoredItemPrototype().copy();
      stack.setCount(drawer.getStoredItemCount());
      if (stack.isEmpty())       break;
      spawnItemStack(world,pos.getX(),pos.getY(),pos.getZ(),stack);
      drawer.setStoredItemCount(0);
    }
  }
}"
10617,"public boolean isLocked(int slot,LockAttribute attr);","boolean isLocked(int slot,LockAttribute attr);"
10618,public boolean isStorageUnlimited(int slot);,boolean isStorageUnlimited(int slot);
10619,"private void populateSlot(int slot,ItemStack stack,int conversion){
  convRate[slot]=conversion;
  protoStack[slot]=stack.copy();
}","private void populateSlot(int slot,ItemStack stack,int conversion){
  convRate[slot]=conversion;
  protoStack[slot]=stack.copy();
  if (worldObj != null && !worldObj.isRemote) {
    IBlockState state=worldObj.getBlockState(getPos());
    worldObj.notifyBlockUpdate(getPos(),state,state,3);
  }
}"
10620,"@Override public AxisAlignedBB getBoundingBox(IBlockState state,IBlockAccess blockAccess,BlockPos pos){
  if (isHalfDepth(state)) {
switch (state.getValue(FACING)) {
case NORTH:
      return AABB_NORTH_HALF;
case SOUTH:
    return AABB_SOUTH_HALF;
case WEST:
  return AABB_WEST_HALF;
case EAST:
return AABB_EAST_HALF;
}
}
return FULL_BLOCK_AABB;
}","@Override public AxisAlignedBB getBoundingBox(IBlockState state,IBlockAccess blockAccess,BlockPos pos){
  TileEntityDrawers tile=getTileEntity(blockAccess,pos);
  if (tile != null && isHalfDepth(state)) {
switch (EnumFacing.getFront(tile.getDirection())) {
case NORTH:
      return AABB_NORTH_HALF;
case SOUTH:
    return AABB_SOUTH_HALF;
case WEST:
  return AABB_WEST_HALF;
case EAST:
return AABB_EAST_HALF;
}
}
return FULL_BLOCK_AABB;
}"
10621,"@Override public boolean removedByPlayer(IBlockState state,World world,BlockPos pos,EntityPlayer player,boolean willHarvest){
  if (world.isRemote && player.capabilities.isCreativeMode) {
    RayTraceResult ray=Minecraft.getMinecraft().objectMouseOver;
    if (state.getValue(FACING) == ray.sideHit) {
      onBlockClicked(world,pos,player);
      return false;
    }
  }
  return willHarvest || super.removedByPlayer(state,world,pos,player,false);
}","@Override public boolean removedByPlayer(IBlockState state,World world,BlockPos pos,EntityPlayer player,boolean willHarvest){
  if (world.isRemote && player.capabilities.isCreativeMode) {
    RayTraceResult ray=Minecraft.getMinecraft().objectMouseOver;
    if (getDirection(world,pos) == ray.sideHit) {
      onBlockClicked(world,pos,player);
      return false;
    }
  }
  return willHarvest || super.removedByPlayer(state,world,pos,player,false);
}"
10622,"@Override @SideOnly(Side.CLIENT) public boolean addHitEffects(IBlockState state,World worldObj,RayTraceResult target,EffectRenderer effectRenderer){
  if (state.getValue(FACING) == target.sideHit)   return true;
  return super.addHitEffects(state,worldObj,target,effectRenderer);
}","@Override @SideOnly(Side.CLIENT) public boolean addHitEffects(IBlockState state,World worldObj,RayTraceResult target,EffectRenderer effectRenderer){
  if (getDirection(worldObj,target.getBlockPos()) == target.sideHit)   return true;
  return super.addHitEffects(state,worldObj,target,effectRenderer);
}"
10623,"@Override public ItemStack decrStackSize(int slot,int count){
  if (tableItemStacks[slot] != null) {
    if (tableItemStacks[slot].stackSize <= count) {
      ItemStack stack=tableItemStacks[slot];
      tableItemStacks[slot]=null;
      markDirty();
      return stack;
    }
 else {
      ItemStack stack=tableItemStacks[slot].splitStack(slot);
      if (tableItemStacks[slot].stackSize == 0)       tableItemStacks[slot]=null;
      markDirty();
      return stack;
    }
  }
 else   return null;
}","@Override public ItemStack decrStackSize(int slot,int count){
  if (tableItemStacks[slot] != null) {
    if (tableItemStacks[slot].stackSize <= count) {
      ItemStack stack=tableItemStacks[slot];
      tableItemStacks[slot]=null;
      markDirty();
      return stack;
    }
 else {
      ItemStack stack=tableItemStacks[slot].splitStack(count);
      if (tableItemStacks[slot].stackSize == 0)       tableItemStacks[slot]=null;
      markDirty();
      return stack;
    }
  }
 else   return null;
}"
10624,"@Override public void toBytes(ByteBuf buf){
  buf.writeInt(x);
  buf.writeShort(y);
  buf.writeInt(z);
  buf.writeByte(side);
  buf.writeByte((int)(hitX * 16));
  buf.writeByte((int)(hitY * 16));
  buf.writeByte((int)(hitZ * 16));
  buf.writeBoolean(invertShift);
}","@Override public void toBytes(ByteBuf buf){
  buf.writeInt(x);
  buf.writeShort(y);
  buf.writeInt(z);
  buf.writeByte(side);
  buf.writeFloat(hitX);
  buf.writeFloat(hitY);
  buf.writeFloat(hitZ);
  buf.writeBoolean(invertShift);
}"
10625,"@Override public void fromBytes(ByteBuf buf){
  x=buf.readInt();
  y=buf.readShort();
  z=buf.readInt();
  side=buf.readByte();
  hitX=buf.readByte() / 16f;
  hitY=buf.readByte() / 16f;
  hitZ=buf.readByte() / 16f;
  invertShift=buf.readBoolean();
}","@Override public void fromBytes(ByteBuf buf){
  x=buf.readInt();
  y=buf.readShort();
  z=buf.readInt();
  side=buf.readByte();
  hitX=buf.readFloat();
  hitY=buf.readFloat();
  hitZ=buf.readFloat();
  invertShift=buf.readBoolean();
}"
10626,"public void setInStack(ItemStack stack){
  if (stack != null) {
    if (inStack == null)     applyDiff(stack.stackSize);
 else     applyDiff(stack.stackSize - inCount);
  }
  inStack=stack;
  syncInStack();
  syncOutStack();
}","public void setInStack(ItemStack stack){
  if (stack != null) {
    if (inStack == null)     applyDiff(stack.stackSize);
 else     applyDiff(stack.stackSize - inCount);
  }
  inStack=null;
  syncInStack();
  setOutStack(outStack);
}"
10627,"public BlockController(String blockName){
  super(Material.rock);
  setCreativeTab(ModCreativeTabs.tabStorageDrawers);
  setHardness(5f);
  setBlockName(blockName);
  setStepSound(Block.soundTypeStone);
  setLightOpacity(255);
  setBlockBounds(0,0,0,1,1,1);
  setTickRandomly(true);
}","public BlockController(String blockName){
  super(Material.rock);
  this.useNeighborBrightness=true;
  setCreativeTab(ModCreativeTabs.tabStorageDrawers);
  setHardness(5f);
  setBlockName(blockName);
  setStepSound(Block.soundTypeStone);
  setLightOpacity(255);
  setBlockBounds(0,0,0,1,1,1);
  setTickRandomly(true);
}"
10628,"protected BlockDrawers(Material material,String blockName,int drawerCount,boolean halfDepth){
  super(material);
  this.drawerCount=drawerCount;
  this.halfDepth=halfDepth;
  setCreativeTab(ModCreativeTabs.tabStorageDrawers);
  setHardness(5f);
  setStepSound(Block.soundTypeWood);
  setBlockName(blockName);
  if (!halfDepth)   setLightOpacity(255);
}","protected BlockDrawers(Material material,String blockName,int drawerCount,boolean halfDepth){
  super(material);
  this.drawerCount=drawerCount;
  this.halfDepth=halfDepth;
  this.useNeighborBrightness=true;
  setCreativeTab(ModCreativeTabs.tabStorageDrawers);
  setHardness(5f);
  setStepSound(Block.soundTypeWood);
  setBlockName(blockName);
  setLightOpacity(255);
}"
10629,"@Override public ItemStack decrStackSize(int slot,int count){
  if (slot < 0 || slot >= getSizeInventory())   return null;
  IDrawer drawer=group.getDrawer(getDrawerSlot(slot));
  if (drawer == null)   return null;
  if (!(drawer instanceof IInventoryAdapter))   return null;
  IInventoryAdapter adapter=(IInventoryAdapter)drawer;
  adapter.syncInventory();
  ItemStack stack=drawer.getStoredItemCopy();
  if (stack.stackSize <= count) {
    drawer.setStoredItemCount(0);
  }
 else {
    stack.stackSize=count;
    drawer.setStoredItemCount(drawer.getStoredItemCount() - count);
  }
  return stack;
}","@Override public ItemStack decrStackSize(int slot,int count){
  if (slot < 0 || slot >= getSizeInventory())   return null;
  IDrawer drawer=group.getDrawer(getDrawerSlot(slot));
  if (drawer == null)   return null;
  if (!(drawer instanceof IInventoryAdapter))   return null;
  IInventoryAdapter adapter=(IInventoryAdapter)drawer;
  adapter.syncInventory();
  ItemStack stack=adapter.getInventoryStack(SlotType.OUTPUT).copy();
  stack.stackSize=Math.min(stack.stackSize,drawer.getStoredItemCount());
  adapter.getInventoryStack(SlotType.OUTPUT).stackSize-=stack.stackSize;
  return stack;
}"
10630,"protected BlockDrawers(Material material,String blockName){
  super(material);
  this.useNeighborBrightness=true;
  setCreativeTab(ModCreativeTabs.tabStorageDrawers);
  setHardness(5f);
  setStepSound(Block.soundTypeWood);
  setUnlocalizedName(blockName);
  initDefaultState();
}","protected BlockDrawers(Material material,String blockName){
  super(material);
  this.useNeighborBrightness=true;
  setCreativeTab(ModCreativeTabs.tabStorageDrawers);
  setHardness(5f);
  setStepSound(Block.soundTypeWood);
  setUnlocalizedName(blockName);
  setLightOpacity(255);
  initDefaultState();
}"
10631,"@Override public boolean isValidMetaValue(int meta){
  if (meta < 0 || meta >= 16)   return false;
  return unlocalizedNames != null && unlocalizedNames[meta] != null;
}","@Override public boolean isValidMetaValue(int meta){
  if (meta < 0 || meta >= unlocalizedNames.length)   return false;
  return unlocalizedNames != null && unlocalizedNames[meta] != null;
}"
10632,"public StandardDataResolver(String modID,String[] unlocalizedNames){
  this.modID=modID;
  this.unlocalizedNames=unlocalizedNames;
}","public StandardDataResolver(String modID,String[] unlocalizedNames,CreativeTabs creativeTab){
  this(modID,unlocalizedNames);
  this.creativeTab=creativeTab;
}"
10633,"@Override public CreativeTabs getCreativeTabs(BlockType type){
  return null;
}","@Override public CreativeTabs getCreativeTabs(BlockType type){
  return creativeTab;
}"
10634,"public ItemDrawersPack(Block block){
  super(block,getUnlocalizedNames(block));
}","protected ItemDrawersPack(Block block,String[] unlocalizedNames){
  super(block,unlocalizedNames);
}"
10635,"public ItemSortingDrawersPack(Block block){
  super(block);
}","public ItemSortingDrawersPack(Block block){
  super(block,getUnlocalizedNames(block));
}"
10636,"@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  TileEntityDrawers tile=getTileEntity(world,x,y,z);
  if (tile != null) {
    if (tile.getStorageLevel() > 1)     dropBlockAsItem(world,x,y,z,new ItemStack(ModItems.upgrade,1,tile.getStorageLevel()));
    if (tile.getStatusLevel() > 0)     dropBlockAsItem(world,x,y,z,new ItemStack(ModItems.upgradeStatus,1,tile.getStatusLevel()));
    if (tile.isLocked())     dropBlockAsItem(world,x,y,z,new ItemStack(ModItems.upgradeLock));
    for (int i=0; i < tile.getDrawerCount(); i++) {
      if (!tile.isDrawerEnabled(i))       continue;
      IDrawer drawer=tile.getDrawer(i);
      while (drawer.getStoredItemCount() > 0) {
        ItemStack stack=tile.takeItemsFromSlot(i,drawer.getStoredItemStackSize());
        if (stack == null || stack.stackSize == 0)         break;
        dropStackInBatches(world,x,y,z,stack);
      }
    }
    world.func_147453_f(x,y,z,block);
  }
  super.breakBlock(world,x,y,z,block,meta);
}","@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  TileEntityDrawers tile=getTileEntity(world,x,y,z);
  if (tile != null) {
    if (tile.getStorageLevel() > 1)     dropBlockAsItem(world,x,y,z,new ItemStack(ModItems.upgrade,1,tile.getStorageLevel()));
    if (tile.getStatusLevel() > 0)     dropBlockAsItem(world,x,y,z,new ItemStack(ModItems.upgradeStatus,1,tile.getStatusLevel()));
    for (int i=0; i < tile.getDrawerCount(); i++) {
      if (!tile.isDrawerEnabled(i))       continue;
      IDrawer drawer=tile.getDrawer(i);
      while (drawer.getStoredItemCount() > 0) {
        ItemStack stack=tile.takeItemsFromSlot(i,drawer.getStoredItemStackSize());
        if (stack == null || stack.stackSize == 0)         break;
        dropStackInBatches(world,x,y,z,stack);
      }
    }
    world.func_147453_f(x,y,z,block);
  }
  super.breakBlock(world,x,y,z,block,meta);
}"
10637,"public TileEntityController getController(){
  if (controllerCoord == null)   return null;
  TileEntity te=worldObj.getTileEntity(controllerCoord.x(),controllerCoord.y(),controllerCoord.z());
  if (!(te instanceof TileEntityController)) {
    controllerCoord=null;
    markDirty();
    return null;
  }
  return (TileEntityController)te;
}","public TileEntityController getController(){
  if (controllerCoord == null)   return null;
  ensureInitialized();
  TileEntity te=worldObj.getTileEntity(controllerCoord.x(),controllerCoord.y(),controllerCoord.z());
  if (!(te instanceof TileEntityController)) {
    controllerCoord=null;
    markDirty();
    return null;
  }
  return (TileEntityController)te;
}"
10638,"private void syncClient(){
  IMessage message=new ControllerUpdateMessage(xCoord,yCoord,zCoord,inventorySlots);
  NetworkRegistry.TargetPoint targetPoint=new NetworkRegistry.TargetPoint(worldObj.provider.dimensionId,xCoord,yCoord,zCoord,500);
  StorageDrawers.network.sendToAllAround(message,targetPoint);
}","private void syncClient(){
  IMessage message=new ControllerUpdateMessage(xCoord,yCoord,zCoord,inventorySlots);
  NetworkRegistry.TargetPoint targetPoint=new NetworkRegistry.TargetPoint(worldObj.provider.dimensionId,xCoord,yCoord,zCoord,500);
  StorageDrawers.network.sendToAllAround(message,targetPoint);
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord));
}"
10639,"@Override public void markDirty(){
  for (int i=0; i < drawerCount; i++) {
    if (snapshotItems[i] != null && snapshotItems[i].stackSize != snapshotCounts[i]) {
      int diff=snapshotItems[i].stackSize - snapshotCounts[i];
      if (diff > 0)       putItemsIntoSlot(i,snapshotItems[i],diff);
 else       takeItemsFromSlot(i,-diff);
      snapshotItems[i].stackSize=64 - Math.min(63,data[i].remainingCapacity());
      snapshotCounts[i]=snapshotItems[i].stackSize;
    }
  }
  super.markDirty();
}","@Override public void markDirty(){
  for (int i=0; i < drawerCount; i++) {
    if (snapshotItems[i] != null && snapshotItems[i].stackSize != snapshotCounts[i]) {
      int diff=snapshotItems[i].stackSize - snapshotCounts[i];
      if (diff > 0)       putItemsIntoSlot(i,snapshotItems[i],diff);
 else       takeItemsFromSlot(i,-diff);
      snapshotItems[i].stackSize=64 - Math.min(64,data[i].remainingCapacity());
      snapshotCounts[i]=snapshotItems[i].stackSize;
    }
  }
  super.markDirty();
}"
10640,"@Override public void setInventorySlotContents(int slot,ItemStack itemStack){
  if (slot >= getSizeInventory())   return;
  int count=putItemsIntoSlot(slot,itemStack,itemStack.stackSize);
  if (count > 0 && !worldObj.isRemote)   worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}","@Override public void setInventorySlotContents(int slot,ItemStack itemStack){
  if (slot >= getSizeInventory())   return;
  int insertCount=itemStack.stackSize;
  if (snapshotItems[slot] != null)   insertCount=itemStack.stackSize - snapshotCounts[slot];
  if (insertCount > 0) {
    int count=putItemsIntoSlot(slot,itemStack,insertCount);
    if (count > 0 && !worldObj.isRemote)     worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  }
 else   if (insertCount < 0) {
    ItemStack rmStack=takeItemsFromSlot(slot,-insertCount);
    if (rmStack != null && rmStack.stackSize > 0 && !worldObj.isRemote)     worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  }
  if (snapshotItems[slot] != null) {
    snapshotItems[slot].stackSize=64 - Math.min(64,data[slot].remainingCapacity());
    snapshotCounts[slot]=snapshotItems[slot].stackSize;
  }
}"
10641,"@Override public ItemStack getStackInSlot(int slot){
  if (slot >= getSizeInventory())   return null;
  ItemStack stack=getItemsFromSlot(slot,getStackSize(slot));
  if (stack != null) {
    stack.stackSize=64 - Math.min(63,data[slot].remainingCapacity());
    snapshotItems[slot]=stack;
    snapshotCounts[slot]=stack.stackSize;
  }
 else {
    snapshotItems[slot]=null;
    snapshotCounts[slot]=0;
  }
  return stack;
}","@Override public ItemStack getStackInSlot(int slot){
  if (slot >= getSizeInventory())   return null;
  ItemStack stack=getItemsFromSlot(slot,getStackSize(slot));
  if (stack != null) {
    stack.stackSize=64 - Math.min(64,data[slot].remainingCapacity());
    snapshotItems[slot]=stack;
    snapshotCounts[slot]=stack.stackSize;
  }
 else {
    snapshotItems[slot]=null;
    snapshotCounts[slot]=0;
  }
  return stack;
}"
10642,"@Override public void renderTileEntityAt(TileEntity tile,double x,double y,double z,float partialTickTime){
  TileEntityDrawers tileDrawers=(TileEntityDrawers)tile;
  if (tileDrawers == null)   return;
  GL11.glPushMatrix();
  GL11.glTranslated(x,y,z);
  int drawerCount=tileDrawers.getDrawerCount();
  float depth=1;
  float unit=.0625f;
  Block block=tile.getWorldObj().getBlock(tile.xCoord,tile.yCoord,tile.zCoord);
  if (block instanceof BlockDrawers)   depth=((BlockDrawers)block).halfDepth ? .5f : 1;
 else   return;
  itemRenderer.setRenderManager(RenderManager.instance);
  for (int i=0; i < drawerCount; i++) {
    ItemStack itemStack=tileDrawers.getSingleItemStack(i);
    if (itemStack != null) {
      GL11.glPushMatrix();
      boolean blockType=itemStack.getItemSpriteNumber() == 0 && itemStack.getItem() instanceof ItemBlock && RenderBlocks.renderItemIn3d(Block.getBlockFromItem(itemStack.getItem()).getRenderType());
      float xunit=(drawerCount == 2) ? itemOffset2X[i] : itemOffset4X[i];
      float yunit=(drawerCount == 2) ? itemOffset2Y[i] : itemOffset4Y[i];
      float zunit=blockType ? 1.95f * unit : unit;
      float xc=0, zc=0;
      float itemDepth=depth + .001f;
      if (blockType) {
        Block itemBlock=Block.getBlockFromItem(itemStack.getItem());
        itemBlock.setBlockBoundsForItemRender();
        double zDepth=1 - itemBlock.getBlockBoundsMaxZ();
        itemDepth+=zDepth * zunit;
      }
switch (tileDrawers.getDirection()) {
case 3:
        xc=xunit;
      zc=itemDepth - zunit;
    break;
case 2:
  xc=1 - xunit;
zc=1 - itemDepth + zunit;
break;
case 5:
xc=itemDepth - zunit;
zc=xunit;
break;
case 4:
xc=1 - itemDepth + zunit;
zc=1 - xunit;
break;
}
Minecraft mc=Minecraft.getMinecraft();
boolean cache=mc.gameSettings.fancyGraphics;
mc.gameSettings.fancyGraphics=true;
ForgeDirection side=ForgeDirection.getOrientation(tileDrawers.getDirection());
if (StorageDrawers.config.isFancyItemRenderEnabled()) {
if (blockType) {
GL11.glTranslatef(xc,unit * (yunit + 1.25f),zc);
GL11.glScalef(1,1,1);
GL11.glRotatef(getRotationYForSide(side,side) - 90.0F,0.0F,1.0F,0.0F);
}
 else {
GL11.glTranslatef(xc,unit * yunit,zc);
GL11.glScalef(.6f,.6f,.6f);
GL11.glRotatef(getRotationYForSide(side,side),0.0F,1.0F,0.0F);
}
EntityItem itemEnt=new EntityItem(null,0,0,0,itemStack);
itemEnt.hoverStart=0;
itemRenderer.doRender(itemEnt,0,0,0,0,0);
}
 else {
alignRendering(side,side);
moveRendering(.25f,xunit * 16 - 2,yunit,.999f - depth + unit);
itemRenderer.renderItemAndEffectIntoGUI(mc.fontRenderer,mc.renderEngine,itemStack,0,0);
}
mc.gameSettings.fancyGraphics=cache;
GL11.glPopMatrix();
}
}
GL11.glPopMatrix();
}","@Override public void renderTileEntityAt(TileEntity tile,double x,double y,double z,float partialTickTime){
  TileEntityDrawers tileDrawers=(TileEntityDrawers)tile;
  if (tileDrawers == null)   return;
  saveGLState();
  GL11.glPushMatrix();
  GL11.glTranslated(x,y,z);
  int drawerCount=tileDrawers.getDrawerCount();
  float depth=1;
  float unit=.0625f;
  Block block=tile.getWorldObj().getBlock(tile.xCoord,tile.yCoord,tile.zCoord);
  if (block instanceof BlockDrawers)   depth=((BlockDrawers)block).halfDepth ? .5f : 1;
 else   return;
  itemRenderer.setRenderManager(RenderManager.instance);
  ForgeDirection side=ForgeDirection.getOrientation(tileDrawers.getDirection());
  int ambLight=tile.getWorldObj().getLightBrightnessForSkyBlocks(tile.xCoord + side.offsetX,tile.yCoord + side.offsetY,tile.zCoord + side.offsetZ,0);
  int lu=ambLight % 65536;
  int lv=ambLight / 65536;
  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,lu,lv);
  for (int i=0; i < drawerCount; i++) {
    GL11.glDisable(GL11.GL_BLEND);
    GL11.glDisable(GL11.GL_LIGHTING);
    ItemStack itemStack=tileDrawers.getSingleItemStack(i);
    if (itemStack != null) {
      GL11.glPushMatrix();
      boolean blockType=itemStack.getItemSpriteNumber() == 0 && itemStack.getItem() instanceof ItemBlock && RenderBlocks.renderItemIn3d(Block.getBlockFromItem(itemStack.getItem()).getRenderType());
      float xunit=(drawerCount == 2) ? itemOffset2X[i] : itemOffset4X[i];
      float yunit=(drawerCount == 2) ? itemOffset2Y[i] : itemOffset4Y[i];
      float zunit=blockType ? 1.95f * unit : unit;
      float xc=0, zc=0;
      float itemDepth=depth + .001f;
      if (blockType) {
        Block itemBlock=Block.getBlockFromItem(itemStack.getItem());
        itemBlock.setBlockBoundsForItemRender();
        double zDepth=1 - itemBlock.getBlockBoundsMaxZ();
        itemDepth+=zDepth * zunit;
      }
switch (tileDrawers.getDirection()) {
case 3:
        xc=xunit;
      zc=itemDepth - zunit;
    break;
case 2:
  xc=1 - xunit;
zc=1 - itemDepth + zunit;
break;
case 5:
xc=itemDepth - zunit;
zc=xunit;
break;
case 4:
xc=1 - itemDepth + zunit;
zc=1 - xunit;
break;
}
Minecraft mc=Minecraft.getMinecraft();
boolean cache=mc.gameSettings.fancyGraphics;
mc.gameSettings.fancyGraphics=true;
if (StorageDrawers.config.isFancyItemRenderEnabled()) {
if (blockType) {
GL11.glTranslatef(xc,unit * (yunit + 1.25f),zc);
GL11.glScalef(1,1,1);
GL11.glRotatef(getRotationYForSide(side) - 90.0F,0.0F,1.0F,0.0F);
}
 else {
GL11.glTranslatef(xc,unit * yunit,zc);
GL11.glScalef(.6f,.6f,.6f);
GL11.glRotatef(getRotationYForSide(side),0.0F,1.0F,0.0F);
}
EntityItem itemEnt=new EntityItem(null,0,0,0,itemStack);
itemEnt.hoverStart=0;
itemRenderer.doRender(itemEnt,0,0,0,0,0);
}
 else {
alignRendering(side);
moveRendering(.25f,getOffsetXForSide(side,xunit) * 16 - 2,12.5f - yunit,.999f - depth + unit);
if (!ForgeHooksClient.renderInventoryItem(this.renderBlocks,mc.renderEngine,itemStack,true,0,0,0)) itemRenderer.renderItemIntoGUI(mc.fontRenderer,mc.renderEngine,itemStack,0,0,true);
}
mc.gameSettings.fancyGraphics=cache;
GL11.glPopMatrix();
}
}
GL11.glPopMatrix();
loadGLState();
}"
10643,"private float getRotationYForSide(ForgeDirection side,ForgeDirection orientation){
  return sideRotationY[side.ordinal()] * 90;
}","private float getRotationYForSide(ForgeDirection side){
  return sideRotationY[side.ordinal()] * 90;
}"
10644,"private void alignRendering(ForgeDirection side,ForgeDirection orientation){
  GL11.glTranslatef(.5f,.5f,.5f);
  GL11.glRotatef(180f,0,0,1f);
  GL11.glRotatef(getRotationYForSide(side,orientation),0,1,0);
  GL11.glTranslatef(-.5f,-.5f,-.5f);
}","private void alignRendering(ForgeDirection side){
  GL11.glTranslatef(.5f,.5f,.5f);
  GL11.glRotatef(180f,0,0,1f);
  GL11.glRotatef(getRotationYForSide(side),0,1,0);
  GL11.glTranslatef(-.5f,-.5f,-.5f);
}"
10645,"@Ignore @Test public void testRecorderPlayerDisconnectMp4() throws Exception {
  doTest(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}","@Test public void testRecorderPlayerDisconnectMp4() throws Exception {
  doTest(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}"
10646,"@Ignore public void testRecorderSwitchFrameSizeDifferentPlayerMp4() throws Exception {
  doTestFrameSizeDifferent(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}","@Test public void testRecorderSwitchFrameSizeDifferentPlayerMp4() throws Exception {
  doTestFrameSizeDifferent(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}"
10647,"@Ignore public void testRecorderSwitchFrameRateFrameSizeDifferentPlayerMp4() throws Exception {
  doTestFrameRateAndFrameSizeDifferent(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}","@Test public void testRecorderSwitchFrameRateFrameSizeDifferentPlayerMp4() throws Exception {
  doTestFrameRateAndFrameSizeDifferent(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}"
10648,"@Ignore public void testRecorderSwitchFrameRateDifferentPlayerMp4() throws Exception {
  doTestFrameRateDifferent(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}","@Test public void testRecorderSwitchFrameRateDifferentPlayerMp4() throws Exception {
  doTestFrameRateDifferent(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}"
10649,"@Ignore public void testRecorderSwitchFrameRateFrameSizeDifferentPlayerWithPassThroughMp4() throws Exception {
  doTestFrameRateAndFrameSizeDifferent(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}","@Test public void testRecorderSwitchFrameRateFrameSizeDifferentPlayerWithPassThroughMp4() throws Exception {
  doTestFrameRateAndFrameSizeDifferent(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}"
10650,"@Ignore public void testRecorderSwitchFrameSizeDifferentPlayerWithPassThroughMp4() throws Exception {
  doTestFrameSizeDifferent(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}","@Test public void testRecorderSwitchFrameSizeDifferentPlayerWithPassThroughMp4() throws Exception {
  doTestFrameSizeDifferent(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}"
10651,"@Ignore public void testRecorderSwitchFrameRateDifferentPlayerWithPassThroughMp4() throws Exception {
  doTestFrameRateDifferent(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}","@Test public void testRecorderSwitchFrameRateDifferentPlayerWithPassThroughMp4() throws Exception {
  doTestFrameRateDifferent(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}"
10652,"@Ignore @Test public void testRecorderSwitchWebRtcMp4() throws Exception {
  doTest(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}","@Test public void testRecorderSwitchWebRtcMp4() throws Exception {
  doTest(MP4,EXPECTED_VIDEO_CODEC_MP4,EXPECTED_AUDIO_CODEC_MP4,EXTENSION_MP4);
}"
10653,"@Test public void agnosticRtpEndpointToWebRtcWithFfmpeg() throws Exception {
  final CountDownLatch proccessOfferLatch=new CountDownLatch(1);
  MediaPipeline mp=kurentoClient.createMediaPipeline();
  SDES sdes=new SDES();
  sdes.setCrypto(CryptoSuite.AES_128_CM_HMAC_SHA1_80);
  RtpEndpoint rtpEp=new RtpEndpoint.Builder(mp).withCrypto(sdes).build();
  WebRtcEndpoint webRtcEp=new WebRtcEndpoint.Builder(mp).build();
  rtpEp.connect(webRtcEp);
  getPage().subscribeEvents(""String_Node_Str"");
  getPage().initWebRtc(webRtcEp,WebRtcChannel.AUDIO_AND_VIDEO,WebRtcMode.RCV_ONLY);
  String sdp=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  rtpEp.processOffer(sdp,new Continuation<String>(){
    @Override public void onSuccess(    String result) throws Exception {
      String[] parse=result.split(""String_Node_Str"");
      String port_=parse[1].split(""String_Node_Str"")[1];
      port=port_;
      proccessOfferLatch.countDown();
    }
    @Override public void onError(    Throwable cause) throws Exception {
      log.info(""String_Node_Str"",cause.getMessage());
    }
  }
);
  proccessOfferLatch.await(getPage().getTimeout(),TimeUnit.SECONDS);
  String[] kmsUriParse=kms.getWsUri().split(""String_Node_Str"");
  String kmsIp=kmsUriParse[1].split(""String_Node_Str"")[0];
  String mediaPath=FILE + ""String_Node_Str"" + getTestFilesDiskPath()+ ""String_Node_Str"";
  String ffmpegCmd=""String_Node_Str"" + mediaPath + ""String_Node_Str""+ kmsIp+ ""String_Node_Str""+ port;
  log.debug(""String_Node_Str"",mediaPath);
  log.debug(""String_Node_Str"",kmsIp,port);
  log.debug(""String_Node_Str"",ffmpegCmd);
  Shell.runAndWaitString(ffmpegCmd);
  Assert.assertTrue(""String_Node_Str"",getPage().waitForEvent(""String_Node_Str""));
  Color[] expectedColors={Color.RED,Color.GREEN,Color.BLUE};
  for (  Color expectedColor : expectedColors) {
    Assert.assertTrue(""String_Node_Str"" + expectedColor,getPage().similarColor(expectedColor));
  }
  mp.release();
}","@Test public void agnosticRtpEndpointToWebRtcWithFfmpeg() throws Exception {
  final CountDownLatch proccessOfferLatch=new CountDownLatch(1);
  MediaPipeline mp=kurentoClient.createMediaPipeline();
  SDES sdes=new SDES();
  sdes.setCrypto(CryptoSuite.AES_128_CM_HMAC_SHA1_80);
  RtpEndpoint rtpEp=new RtpEndpoint.Builder(mp).withCrypto(sdes).build();
  WebRtcEndpoint webRtcEp=new WebRtcEndpoint.Builder(mp).build();
  final CountDownLatch flowingInLatch=new CountDownLatch(1);
  webRtcEp.addMediaFlowInStateChangeListener(new EventListener<MediaFlowInStateChangeEvent>(){
    @Override public void onEvent(    MediaFlowInStateChangeEvent event){
      flowingInLatch.countDown();
    }
  }
);
  rtpEp.connect(webRtcEp);
  getPage().subscribeEvents(""String_Node_Str"");
  getPage().initWebRtc(webRtcEp,WebRtcChannel.AUDIO_AND_VIDEO,WebRtcMode.RCV_ONLY);
  String sdp=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  rtpEp.processOffer(sdp,new Continuation<String>(){
    @Override public void onSuccess(    String result) throws Exception {
      String[] parse=result.split(""String_Node_Str"");
      String port_=parse[1].split(""String_Node_Str"")[1];
      port=port_;
      proccessOfferLatch.countDown();
    }
    @Override public void onError(    Throwable cause) throws Exception {
      log.info(""String_Node_Str"",cause.getMessage());
    }
  }
);
  proccessOfferLatch.await(getPage().getTimeout(),TimeUnit.SECONDS);
  String[] kmsUriParse=kms.getWsUri().split(""String_Node_Str"");
  String kmsIp=kmsUriParse[1].split(""String_Node_Str"")[0];
  String mediaPath=FILE + ""String_Node_Str"" + getTestFilesDiskPath()+ ""String_Node_Str"";
  String ffmpegCmd=""String_Node_Str"" + mediaPath + ""String_Node_Str""+ kmsIp+ ""String_Node_Str""+ port;
  log.debug(""String_Node_Str"",mediaPath);
  log.debug(""String_Node_Str"",kmsIp,port);
  log.debug(""String_Node_Str"",ffmpegCmd);
  Shell.run(ffmpegCmd.split(""String_Node_Str""));
  Assert.assertTrue(""String_Node_Str"",flowingInLatch.await(getPage().getTimeout(),TimeUnit.SECONDS));
  Assert.assertTrue(""String_Node_Str"",getPage().waitForEvent(""String_Node_Str""));
  Color[] expectedColors={Color.RED,Color.GREEN,Color.BLUE};
  for (  Color expectedColor : expectedColors) {
    Assert.assertTrue(""String_Node_Str"" + expectedColor,getPage().similarColor(expectedColor));
  }
  mp.release();
}"
10654,"public URL getUrl(){
  String ip=this.getHost();
  int port=this.getServerPort();
  String protocol=this.getProtocol().toString();
  String path=this.getWebPageType().toString();
  URL url=null;
  try {
    url=new URL(protocol,ip,port,path);
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
  return url;
}","public URL getUrl(){
  URL url=null;
  try {
    if (this.url != null) {
      url=this.url.toURL();
    }
 else {
      String ip=this.getHost();
      int port=this.getServerPort();
      String protocol=this.getProtocol().toString();
      String path=this.getWebPageType().toString();
      url=new URL(protocol,ip,port,path);
    }
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
  return url;
}"
10655,"/** 
 * Flatten param to be sent to remote server. The rules to flatten objects are: <ul> <li>If param is primitive (String, Boolean, Float or Integer) is not modified</li> <li>If param is enum value, is transformed to its String representation</li> <li>If param is an RemoteObject, is sent is reference String</li> <li>If param is a complex object, a Props object is created for it. The Props object has an entry for each property with its name and value. The value of the property is also flatten. Endpoint </li> </ul>
 * @param param the param
 * @return the flattened param
 */
@SuppressWarnings(""String_Node_Str"") private Object flattenParam(Object param,boolean inTx){
  if (param == null) {
    return null;
  }
  Object processedParam;
  if (param instanceof RemoteObject) {
    processedParam=flattenRemoteObject((RemoteObject)param,inTx);
  }
 else   if (param instanceof Proxy) {
    InvocationHandler handler=Proxy.getInvocationHandler(param);
    if (handler instanceof RemoteObjectInvocationHandler) {
      RemoteObjectInvocationHandler roHandler=(RemoteObjectInvocationHandler)handler;
      processedParam=flattenRemoteObject(roHandler.getRemoteObject(),inTx);
    }
 else {
      throw new ProtocolException(""String_Node_Str"" + handler);
    }
  }
 else   if (param instanceof Enum<?>) {
    processedParam=param.toString();
  }
 else   if (isPrimitive(param)) {
    processedParam=param;
  }
 else   if (param instanceof List<?>) {
    processedParam=flattenParamsList((List<?>)param,inTx);
  }
 else   if (param instanceof Map<?,?>) {
    processedParam=flattenParamsMap((Map<String,?>)param,inTx);
  }
 else   if (param instanceof Props) {
    processedParam=flattenParams((Props)param,inTx);
  }
 else {
    processedParam=extractParamAsProps(param,inTx);
  }
  return processedParam;
}","/** 
 * Flatten param to be sent to remote server. The rules to flatten objects are: <ul> <li>If param is primitive (String, Boolean, Float or Integer) is not modified</li> <li>If param is enum value, is transformed to its String representation</li> <li>If param is an RemoteObject, is sent is reference String</li> <li>If param is a complex object, a Props object is created for it. The Props object has an entry for each property with its name and value. The value of the property is also flatten. Endpoint</li> </ul>
 * @param param the param
 * @return the flattened param
 */
@SuppressWarnings(""String_Node_Str"") private Object flattenParam(Object param,boolean inTx){
  if (param == null) {
    return null;
  }
  Object processedParam;
  if (param instanceof RemoteObject) {
    processedParam=flattenRemoteObject((RemoteObject)param,inTx);
  }
 else   if (param instanceof Proxy) {
    InvocationHandler handler=Proxy.getInvocationHandler(param);
    if (handler instanceof RemoteObjectInvocationHandler) {
      RemoteObjectInvocationHandler roHandler=(RemoteObjectInvocationHandler)handler;
      processedParam=flattenRemoteObject(roHandler.getRemoteObject(),inTx);
    }
 else {
      throw new ProtocolException(""String_Node_Str"" + handler);
    }
  }
 else   if (param instanceof Enum<?>) {
    processedParam=param.toString();
  }
 else   if (isPrimitive(param)) {
    processedParam=param;
  }
 else   if (param instanceof List<?>) {
    processedParam=flattenParamsList((List<?>)param,inTx);
  }
 else   if (param instanceof Map<?,?>) {
    processedParam=flattenParamsMap((Map<String,?>)param,inTx);
  }
 else   if (param instanceof Props) {
    processedParam=flattenParams((Props)param,inTx);
  }
 else {
    processedParam=extractParamAsProps(param,inTx);
  }
  return processedParam;
}"
10656,"private static MediaInfo getInfoByPath(String pathToMedia){
  MediaInfo info=new MediaInfo();
  String pathToMedia_[]=pathToMedia.split(""String_Node_Str"");
  String protocol=""String_Node_Str"";
  String path=""String_Node_Str"";
  if (pathToMedia_.length > 1) {
    protocol=pathToMedia_[0];
    path=pathToMedia_[1];
  }
 else {
    String recordDefaultPath=KurentoTest.getRecordDefaultPath();
    if (recordDefaultPath != null) {
      String defaultPathToMedia_[]=recordDefaultPath.split(""String_Node_Str"");
      protocol=defaultPathToMedia_[0];
      String pathStart=defaultPathToMedia_[1];
      path=pathStart + pathToMedia_[0];
    }
  }
  if (Protocol.FILE.toString().equals(protocol)) {
    info.open(new File(path));
    return info;
  }
 else   if (Protocol.HTTP.toString().equals(protocol) || Protocol.HTTPS.toString().equals(protocol)) {
  }
 else   if (Protocol.S3.toString().equals(protocol)) {
    String pathDownload=KurentoTest.getDefaultOutputFolder().getAbsolutePath() + File.separator + path;
    String pathOut=KurentoTest.getDefaultOutputFolder().getAbsolutePath() + File.separator + path.replace(""String_Node_Str"",""String_Node_Str"");
    Shell.runAndWaitString(""String_Node_Str"" + pathToMedia + ""String_Node_Str""+ pathDownload);
    Shell.runAndWaitString(""String_Node_Str"" + pathDownload + ""String_Node_Str""+ pathOut);
    info.open(new File(pathOut));
    return info;
  }
 else   if (Protocol.MONGODB.toString().equals(protocol)) {
  }
  return info;
}","private static MediaInfo getInfoByPath(String pathToMedia){
  MediaInfo info=new MediaInfo();
  String pathToMedia_[]=pathToMedia.split(""String_Node_Str"");
  String protocol=""String_Node_Str"";
  String path=""String_Node_Str"";
  if (pathToMedia_.length > 1) {
    protocol=pathToMedia_[0];
    path=pathToMedia_[1];
  }
 else {
    String recordDefaultPath=KurentoTest.getRecordDefaultPath();
    if (recordDefaultPath != null) {
      String defaultPathToMedia_[]=recordDefaultPath.split(""String_Node_Str"");
      protocol=defaultPathToMedia_[0];
      String pathStart=defaultPathToMedia_[1];
      path=pathStart + pathToMedia_[0];
    }
  }
  if (Protocol.FILE.toString().equals(protocol)) {
    info.open(new File(path));
    return info;
  }
 else   if (Protocol.HTTP.toString().equals(protocol) || Protocol.HTTPS.toString().equals(protocol)) {
  }
 else   if (Protocol.S3.toString().equals(protocol)) {
    pathToMedia=protocol + ""String_Node_Str"" + path;
    String pathDownload=KurentoTest.getDefaultOutputFolder().getAbsolutePath() + File.separator + path;
    String pathOut=KurentoTest.getDefaultOutputFolder().getAbsolutePath() + File.separator + path.replace(""String_Node_Str"",""String_Node_Str"");
    Shell.runAndWaitString(""String_Node_Str"" + pathToMedia + ""String_Node_Str""+ pathDownload);
    Shell.runAndWaitString(""String_Node_Str"" + pathDownload + ""String_Node_Str""+ pathOut);
    info.open(new File(pathOut));
    return info;
  }
 else   if (Protocol.MONGODB.toString().equals(protocol)) {
  }
  return info;
}"
10657,"protected void waitForFileExists(String recordingFile){
  boolean exists=false;
  String pathToMedia_[]=recordingFile.split(""String_Node_Str"");
  String protocol=pathToMedia_[0];
  String path=pathToMedia_[1];
  log.debug(""String_Node_Str"",recordingFile);
  long timeoutMs=System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(WAIT_POLL_TIME);
  do {
    if (Protocol.FILE.toString().equals(protocol)) {
      String output=Shell.runAndWaitString(""String_Node_Str"" + path);
      if (!output.contains(""String_Node_Str"")) {
        exists=true;
      }
    }
 else     if (Protocol.HTTP.toString().equals(protocol) || Protocol.HTTPS.toString().equals(protocol)) {
      exists=true;
    }
 else     if (Protocol.S3.toString().equals(protocol)) {
      String output=Shell.runAndWaitString(""String_Node_Str"" + recordingFile);
      if (!output.equals(""String_Node_Str"")) {
        exists=true;
      }
    }
 else     if (Protocol.MONGODB.toString().equals(protocol)) {
    }
    if (!exists) {
      if (System.currentTimeMillis() > timeoutMs) {
        throw new KurentoException(""String_Node_Str"" + WAIT_POLL_TIME + ""String_Node_Str""+ recordingFile);
      }
      try {
        log.debug(""String_Node_Str"",recordingFile,WAIT_POLL_TIME);
        Thread.sleep(WAIT_POLL_TIME);
      }
 catch (      InterruptedException e) {
        log.error(""String_Node_Str"");
      }
    }
  }
 while (!exists);
}","protected void waitForFileExists(String recordingFile){
  boolean exists=false;
  String pathToMedia_[]=recordingFile.split(""String_Node_Str"");
  String protocol=""String_Node_Str"";
  String path=""String_Node_Str"";
  if (pathToMedia_.length > 1) {
    protocol=pathToMedia_[0];
    path=pathToMedia_[1];
  }
 else {
    String recordDefaultPath=KurentoTest.getRecordDefaultPath();
    if (recordDefaultPath != null) {
      String defaultPathToMedia_[]=recordDefaultPath.split(""String_Node_Str"");
      protocol=defaultPathToMedia_[0];
      String pathStart=defaultPathToMedia_[1];
      path=pathStart + pathToMedia_[0];
    }
  }
  log.debug(""String_Node_Str"",recordingFile);
  long timeoutMs=System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(WAIT_POLL_TIME);
  do {
    if (Protocol.FILE.toString().equals(protocol)) {
      String output=Shell.runAndWaitString(""String_Node_Str"" + path);
      if (!output.contains(""String_Node_Str"")) {
        exists=true;
      }
    }
 else     if (Protocol.HTTP.toString().equals(protocol) || Protocol.HTTPS.toString().equals(protocol)) {
      exists=true;
    }
 else     if (Protocol.S3.toString().equals(protocol)) {
      recordingFile=protocol + ""String_Node_Str"" + path;
      String output=Shell.runAndWaitString(""String_Node_Str"" + recordingFile);
      if (!output.equals(""String_Node_Str"")) {
        exists=true;
      }
    }
 else     if (Protocol.MONGODB.toString().equals(protocol)) {
    }
    if (!exists) {
      if (System.currentTimeMillis() > timeoutMs) {
        throw new KurentoException(""String_Node_Str"" + WAIT_POLL_TIME + ""String_Node_Str""+ recordingFile);
      }
      try {
        log.debug(""String_Node_Str"",recordingFile,WAIT_POLL_TIME);
        Thread.sleep(WAIT_POLL_TIME);
      }
 catch (      InterruptedException e) {
        log.error(""String_Node_Str"");
      }
    }
  }
 while (!exists);
}"
10658,"protected void addCandidates(NewCandidatePairSelectedEvent event){
  Candidate lCandidate=new Candidate(getCandidateType(event.getCandidatePair().getLocalCandidate()),getTransportMode(event.getCandidatePair().getLocalCandidate()));
  Candidate rCandidate=new Candidate(getCandidateType(event.getCandidatePair().getRemoteCandidate()),getTransportMode(event.getCandidatePair().getRemoteCandidate()));
  if (WebRtcCandidateType.PRFLX.equals(lCandidate)) {
    lCandidate.setWebRtcCandidateType(WebRtcCandidateType.SRFLX);
  }
  if (WebRtcCandidateType.PRFLX.equals(rCandidate)) {
    rCandidate.setWebRtcCandidateType(WebRtcCandidateType.SRFLX);
  }
  localCandidate.add(lCandidate);
  remoteCandidate.add(rCandidate);
  if (getProperty(TEST_ICE_CANDIDATE_KMS_TYPE) != null) {
    kmsCandidateType.add(new Candidate(WebRtcCandidateType.find(getProperty(TEST_ICE_CANDIDATE_KMS_TYPE).toLowerCase()),TransportMode.find(getProperty(TEST_KMS_TRANSPORT))));
  }
  if (getProperty(TEST_ICE_CANDIDATE_SELENIUM_TYPE) != null) {
    seleniumCandidateType.add(new Candidate(WebRtcCandidateType.find(getProperty(TEST_ICE_CANDIDATE_SELENIUM_TYPE).toLowerCase()),TransportMode.find(getProperty(TEST_SELENIUM_TRANSPORT))));
  }
}","protected void addCandidates(NewCandidatePairSelectedEvent event){
  Candidate lCandidate=new Candidate(getCandidateType(event.getCandidatePair().getLocalCandidate()),getTransportMode(event.getCandidatePair().getLocalCandidate()));
  Candidate rCandidate=new Candidate(getCandidateType(event.getCandidatePair().getRemoteCandidate()),getTransportMode(event.getCandidatePair().getRemoteCandidate()));
  if (WebRtcCandidateType.PRFLX.equals(lCandidate.getWebRtcCandidateType())) {
    lCandidate.setWebRtcCandidateType(WebRtcCandidateType.SRFLX);
  }
  if (WebRtcCandidateType.PRFLX.equals(rCandidate.getWebRtcCandidateType())) {
    rCandidate.setWebRtcCandidateType(WebRtcCandidateType.SRFLX);
  }
  localCandidate.add(lCandidate);
  remoteCandidate.add(rCandidate);
  if (getProperty(TEST_ICE_CANDIDATE_KMS_TYPE) != null) {
    kmsCandidateType.add(new Candidate(WebRtcCandidateType.find(getProperty(TEST_ICE_CANDIDATE_KMS_TYPE).toLowerCase()),TransportMode.find(getProperty(TEST_KMS_TRANSPORT))));
  }
  if (getProperty(TEST_ICE_CANDIDATE_SELENIUM_TYPE) != null) {
    seleniumCandidateType.add(new Candidate(WebRtcCandidateType.find(getProperty(TEST_ICE_CANDIDATE_SELENIUM_TYPE).toLowerCase()),TransportMode.find(getProperty(TEST_SELENIUM_TRANSPORT))));
  }
}"
10659,"@Parameters(name=""String_Node_Str"") public static Collection<Object[]> data(){
  return TestScenario.localChromeAndFirefox();
}","@Parameters(name=""String_Node_Str"") public static Collection<Object[]> data(){
  return TestScenario.localChromesAndFirefoxs(2);
}"
10660,"@Ignore public void testIceHostIpv4SendOnlyAudioOnly() throws InterruptedException {
  initTestSendOnly(WebRtcChannel.AUDIO_ONLY,WebRtcIpvMode.IPV4,WebRtcCandidateType.HOST);
}","@Test public void testIceHostIpv4SendOnlyAudioOnly() throws InterruptedException {
  initTestSendOnly(WebRtcChannel.AUDIO_ONLY,WebRtcIpvMode.IPV4,WebRtcCandidateType.HOST);
}"
10661,"@Ignore public void testIceHostIpv4SendOnlyAudioVideo() throws InterruptedException {
  initTestSendOnly(WebRtcChannel.AUDIO_AND_VIDEO,WebRtcIpvMode.IPV4,WebRtcCandidateType.HOST);
}","@Test public void testIceHostIpv4SendOnlyAudioVideo() throws InterruptedException {
  initTestSendOnly(WebRtcChannel.AUDIO_AND_VIDEO,WebRtcIpvMode.IPV4,WebRtcCandidateType.HOST);
}"
10662,"@Ignore public void testIceHostIpv4SendOnlyVideoOnly() throws InterruptedException {
  initTestSendOnly(WebRtcChannel.VIDEO_ONLY,WebRtcIpvMode.IPV4,WebRtcCandidateType.HOST);
}","@Test public void testIceHostIpv4SendOnlyVideoOnly() throws InterruptedException {
  initTestSendOnly(WebRtcChannel.VIDEO_ONLY,WebRtcIpvMode.IPV4,WebRtcCandidateType.HOST);
}"
10663,"@Ignore public void testIceHostIpv6SendOnlyVideoOnly() throws InterruptedException {
  initTestSendOnly(WebRtcChannel.VIDEO_ONLY,WebRtcIpvMode.IPV6,WebRtcCandidateType.HOST);
}","@Test public void testIceHostIpv6SendOnlyVideoOnly() throws InterruptedException {
  initTestSendOnly(WebRtcChannel.VIDEO_ONLY,WebRtcIpvMode.IPV6,WebRtcCandidateType.HOST);
}"
10664,"@Parameters(name=""String_Node_Str"") public static Collection<Object[]> data(){
  return TestScenario.localChromeAndFirefox();
}","@Parameters(name=""String_Node_Str"") public static Collection<Object[]> data(){
  return TestScenario.localChromesAndFirefoxs(2);
}"
10665,"@Ignore public void testIceHostIpv6SendOnlyAudioOnly() throws InterruptedException {
  initTestSendOnly(WebRtcChannel.AUDIO_ONLY,WebRtcIpvMode.IPV6,WebRtcCandidateType.HOST);
}","@Test public void testIceHostIpv6SendOnlyAudioOnly() throws InterruptedException {
  initTestSendOnly(WebRtcChannel.AUDIO_ONLY,WebRtcIpvMode.IPV6,WebRtcCandidateType.HOST);
}"
10666,"@Ignore public void testIceHostIpv6SendOnlyAudioVideo() throws InterruptedException {
  initTestSendOnly(WebRtcChannel.AUDIO_AND_VIDEO,WebRtcIpvMode.IPV6,WebRtcCandidateType.HOST);
}","@Test public void testIceHostIpv6SendOnlyAudioVideo() throws InterruptedException {
  initTestSendOnly(WebRtcChannel.AUDIO_AND_VIDEO,WebRtcIpvMode.IPV6,WebRtcCandidateType.HOST);
}"
10667,"public void initTestRcvOnly(WebRtcChannel webRtcChannel,WebRtcIpvMode webRtcIpvMode,WebRtcCandidateType webRtcCandidateType,String nameMedia) throws InterruptedException {
  String mediaUrl=getMediaUrl(Protocol.HTTP,nameMedia);
  MediaPipeline mp=kurentoClient.createMediaPipeline();
  PlayerEndpoint playerEp=new PlayerEndpoint.Builder(mp,mediaUrl).build();
  WebRtcEndpoint webRtcEp=new WebRtcEndpoint.Builder(mp).build();
  playerEp.connect(webRtcEp);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  webRtcEp.addMediaFlowInStateChangeListener(new EventListener<MediaFlowInStateChangeEvent>(){
    @Override public void onEvent(    MediaFlowInStateChangeEvent event){
      if (event.getState().equals(MediaFlowState.FLOWING)) {
        eosLatch.countDown();
      }
    }
  }
);
  getPage().subscribeEvents(""String_Node_Str"");
  getPage().initWebRtc(webRtcEp,webRtcChannel,WebRtcMode.RCV_ONLY,webRtcIpvMode,webRtcCandidateType);
  playerEp.play();
  Assert.assertTrue(""String_Node_Str"" + mediaUrl + ""String_Node_Str""+ webRtcChannel,getPage().waitForEvent(""String_Node_Str""));
  Assert.assertTrue(""String_Node_Str"" + mediaUrl + ""String_Node_Str""+ webRtcChannel,eosLatch.await(getPage().getTimeout(),TimeUnit.SECONDS));
  mp.release();
}","public void initTestRcvOnly(WebRtcChannel webRtcChannel,WebRtcIpvMode webRtcIpvMode,WebRtcCandidateType webRtcCandidateType,String nameMedia) throws InterruptedException {
  String mediaUrl=getMediaUrl(Protocol.HTTP,nameMedia);
  MediaPipeline mp=kurentoClient.createMediaPipeline();
  PlayerEndpoint playerEp=new PlayerEndpoint.Builder(mp,mediaUrl).build();
  WebRtcEndpoint webRtcEp=new WebRtcEndpoint.Builder(mp).build();
  playerEp.connect(webRtcEp);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  webRtcEp.addMediaFlowInStateChangeListener(new EventListener<MediaFlowInStateChangeEvent>(){
    @Override public void onEvent(    MediaFlowInStateChangeEvent event){
      if (event.getState().equals(MediaFlowState.FLOWING)) {
        eosLatch.countDown();
      }
    }
  }
);
  getPage(0).subscribeEvents(""String_Node_Str"");
  getPage(0).initWebRtc(webRtcEp,webRtcChannel,WebRtcMode.RCV_ONLY,webRtcIpvMode,webRtcCandidateType);
  playerEp.play();
  Assert.assertTrue(""String_Node_Str"" + mediaUrl + ""String_Node_Str""+ webRtcChannel,getPage(0).waitForEvent(""String_Node_Str""));
  Assert.assertTrue(""String_Node_Str"" + mediaUrl + ""String_Node_Str""+ webRtcChannel,eosLatch.await(getPage(0).getTimeout(),TimeUnit.SECONDS));
  mp.release();
}"
10668,"public void initTestSendRecv(WebRtcChannel webRtcChannel,WebRtcIpvMode webRtcIpvMode,WebRtcCandidateType webRtcCandidateType) throws InterruptedException {
  MediaPipeline mp=kurentoClient.createMediaPipeline();
  WebRtcEndpoint webRtcEndpoint=new WebRtcEndpoint.Builder(mp).build();
  webRtcEndpoint.connect(webRtcEndpoint);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  webRtcEndpoint.addMediaFlowOutStateChangeListener(new EventListener<MediaFlowOutStateChangeEvent>(){
    @Override public void onEvent(    MediaFlowOutStateChangeEvent event){
      if (event.getState().equals(MediaFlowState.FLOWING)) {
        eosLatch.countDown();
      }
    }
  }
);
  getPage().subscribeEvents(""String_Node_Str"");
  getPage().initWebRtc(webRtcEndpoint,webRtcChannel,WebRtcMode.SEND_RCV,webRtcIpvMode,webRtcCandidateType);
  Assert.assertTrue(""String_Node_Str"",getPage().waitForEvent(""String_Node_Str""));
  Assert.assertTrue(""String_Node_Str"" + webRtcChannel,eosLatch.await(getPage().getTimeout(),TimeUnit.SECONDS));
  mp.release();
}","public void initTestSendRecv(WebRtcChannel webRtcChannel,WebRtcIpvMode webRtcIpvMode,WebRtcCandidateType webRtcCandidateType) throws InterruptedException {
  MediaPipeline mp=kurentoClient.createMediaPipeline();
  WebRtcEndpoint webRtcEndpoint=new WebRtcEndpoint.Builder(mp).build();
  webRtcEndpoint.connect(webRtcEndpoint);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  webRtcEndpoint.addMediaFlowOutStateChangeListener(new EventListener<MediaFlowOutStateChangeEvent>(){
    @Override public void onEvent(    MediaFlowOutStateChangeEvent event){
      if (event.getState().equals(MediaFlowState.FLOWING)) {
        eosLatch.countDown();
      }
    }
  }
);
  getPage(0).subscribeEvents(""String_Node_Str"");
  getPage(0).initWebRtc(webRtcEndpoint,webRtcChannel,WebRtcMode.SEND_RCV,webRtcIpvMode,webRtcCandidateType);
  Assert.assertTrue(""String_Node_Str"",getPage(0).waitForEvent(""String_Node_Str""));
  Assert.assertTrue(""String_Node_Str"" + webRtcChannel,eosLatch.await(getPage(0).getTimeout(),TimeUnit.SECONDS));
  mp.release();
}"
10669,"public void initTestSendOnly(WebRtcChannel webRtcChannel,WebRtcIpvMode webRtcIpvMode,WebRtcCandidateType webRtcCandidateType) throws InterruptedException {
  MediaPipeline mp=kurentoClient.createMediaPipeline();
  WebRtcEndpoint webRtcEpSendOnly=new WebRtcEndpoint.Builder(mp).build();
  WebRtcEndpoint webRtcEpRcvOnly=new WebRtcEndpoint.Builder(mp).build();
  webRtcEpSendOnly.connect(webRtcEpRcvOnly);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  webRtcEpRcvOnly.addMediaFlowInStateChangeListener(new EventListener<MediaFlowInStateChangeEvent>(){
    @Override public void onEvent(    MediaFlowInStateChangeEvent event){
      if (event.getState().equals(MediaFlowState.FLOWING)) {
        eosLatch.countDown();
      }
    }
  }
);
  getPage().subscribeEvents(""String_Node_Str"");
  getPage().initWebRtc(webRtcEpSendOnly,webRtcChannel,WebRtcMode.SEND_ONLY,webRtcIpvMode,webRtcCandidateType);
  getPage().initWebRtc(webRtcEpRcvOnly,webRtcChannel,WebRtcMode.RCV_ONLY,webRtcIpvMode,webRtcCandidateType);
  Assert.assertTrue(""String_Node_Str"",getPage().waitForEvent(""String_Node_Str""));
  Assert.assertTrue(""String_Node_Str"" + webRtcChannel,eosLatch.await(getPage().getTimeout(),TimeUnit.SECONDS));
  mp.release();
}","public void initTestSendOnly(WebRtcChannel webRtcChannel,WebRtcIpvMode webRtcIpvMode,WebRtcCandidateType webRtcCandidateType) throws InterruptedException {
  MediaPipeline mp=kurentoClient.createMediaPipeline();
  WebRtcEndpoint webRtcEpSendOnly=new WebRtcEndpoint.Builder(mp).build();
  WebRtcEndpoint webRtcEpRcvOnly=new WebRtcEndpoint.Builder(mp).build();
  webRtcEpSendOnly.connect(webRtcEpRcvOnly);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  webRtcEpRcvOnly.addMediaFlowInStateChangeListener(new EventListener<MediaFlowInStateChangeEvent>(){
    @Override public void onEvent(    MediaFlowInStateChangeEvent event){
      if (event.getState().equals(MediaFlowState.FLOWING)) {
        eosLatch.countDown();
      }
    }
  }
);
  getPage(1).subscribeEvents(""String_Node_Str"");
  getPage(0).initWebRtc(webRtcEpSendOnly,webRtcChannel,WebRtcMode.SEND_ONLY,webRtcIpvMode,webRtcCandidateType);
  getPage(1).initWebRtc(webRtcEpRcvOnly,webRtcChannel,WebRtcMode.RCV_ONLY,webRtcIpvMode,webRtcCandidateType);
  Assert.assertTrue(""String_Node_Str"",getPage(1).waitForEvent(""String_Node_Str""));
  Assert.assertTrue(""String_Node_Str"" + webRtcChannel,eosLatch.await(getPage(1).getTimeout(),TimeUnit.SECONDS));
  mp.release();
}"
10670,"public static KurentoClient create(String websocketUrl,KurentoConnectionListener listener,Properties properties){
  log.info(""String_Node_Str"",websocketUrl);
  JsonRpcClientWebSocket client=new JsonRpcClientWebSocket(websocketUrl,JsonRpcConnectionListenerKurento.create(listener));
  configureJsonRpcClient(client);
  return new KurentoClient(client);
}","public static KurentoClient create(String websocketUrl,KurentoConnectionListener listener,Properties properties){
  log.info(""String_Node_Str"",websocketUrl);
  JsonRpcClientWebSocket client=new JsonRpcClientWebSocket(websocketUrl,JsonRpcConnectionListenerKurento.create(listener),new SslContextFactory());
  configureJsonRpcClient(client);
  return new KurentoClient(client);
}"
10671,"@Bean public RepositoryApiConfiguration repositoryApiConfiguration() throws UnknownHostException {
  log.info(""String_Node_Str"");
  RepositoryApiConfiguration config=new RepositoryApiConfiguration();
  config.setWebappPublicUrl(""String_Node_Str"" + InetAddress.getLocalHost().getHostAddress() + ""String_Node_Str""+ WebServerService.getAppHttpsPort()+ ""String_Node_Str"");
  config.setMongoDatabaseName(""String_Node_Str"");
  config.setMongoUrlConnection(Protocol.MONGODB + ""String_Node_Str"" + getTestFilesMongoPath());
  config.setRepositoryType(RepoType.MONGODB);
  return config;
}","@Bean public RepositoryApiConfiguration repositoryApiConfiguration() throws UnknownHostException {
  log.info(""String_Node_Str"");
  RepositoryApiConfiguration config=new RepositoryApiConfiguration();
  config.setWebappPublicUrl(""String_Node_Str"" + InetAddress.getLocalHost().getHostAddress() + ""String_Node_Str""+ WebServerService.getAppHttpPort()+ ""String_Node_Str"");
  config.setMongoDatabaseName(""String_Node_Str"");
  config.setMongoUrlConnection(Protocol.MONGODB + ""String_Node_Str"" + getTestFilesMongoPath());
  config.setRepositoryType(RepoType.MONGODB);
  return config;
}"
10672,"@Bean public EmbeddedServletContainerFactory servletContainer(){
  TomcatEmbeddedServletContainerFactory tomcat=new TomcatEmbeddedServletContainerFactory();
  Connector connector=new Connector(""String_Node_Str"");
  connector.setScheme(""String_Node_Str"");
  connector.setPort(getAppHttpPort());
  tomcat.addAdditionalTomcatConnectors(connector);
  return tomcat;
}","@Bean @ConditionalOnMissingBean public EmbeddedServletContainerFactory servletContainer(){
  TomcatEmbeddedServletContainerFactory tomcat=new TomcatEmbeddedServletContainerFactory();
  Connector connector=new Connector(""String_Node_Str"");
  connector.setScheme(""String_Node_Str"");
  connector.setPort(getAppHttpPort());
  tomcat.addAdditionalTomcatConnectors(connector);
  return tomcat;
}"
10673,"public void testPlayerMultipleSeek(String mediaUrl,WebRtcChannel webRtcChannel,int pauseTimeSeconds,int numSeeks,Map<Integer,Color> expectedPositionAndColor) throws Exception {
  MediaPipeline mp=kurentoClient.createMediaPipeline();
  PlayerEndpoint playerEP=new PlayerEndpoint.Builder(mp,mediaUrl).build();
  WebRtcEndpoint webRtcEP=new WebRtcEndpoint.Builder(mp).build();
  playerEP.connect(webRtcEP);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  playerEP.addEndOfStreamListener(new EventListener<EndOfStreamEvent>(){
    @Override public void onEvent(    EndOfStreamEvent event){
      log.debug(""String_Node_Str"");
      eosLatch.countDown();
    }
  }
);
  getPage().subscribeEvents(""String_Node_Str"");
  getPage().initWebRtc(webRtcEP,webRtcChannel,WebRtcMode.RCV_ONLY);
  playerEP.play();
  Thread.sleep(TimeUnit.SECONDS.toMillis(pauseTimeSeconds));
  Integer executions=-1;
  for (int i=0; i < numSeeks; i++) {
    executions++;
    log.debug(""String_Node_Str"");
    playerEP.setPosition(0);
    for (    Integer position : expectedPositionAndColor.keySet()) {
      executions++;
      log.debug(""String_Node_Str"",position);
      playerEP.setPosition(position);
      if (webRtcChannel != WebRtcChannel.AUDIO_ONLY) {
        Assert.assertTrue(""String_Node_Str"" + position + ""String_Node_Str""+ expectedPositionAndColor.get(position),getPage().similarColor(expectedPositionAndColor.get(position)));
      }
    }
  }
  Integer executionsExpected=(numSeeks * expectedPositionAndColor.size()) + numSeeks - 1;
  log.info(""String_Node_Str"",executionsExpected,executions);
  Assert.assertTrue(""String_Node_Str"" + executionsExpected + ""String_Node_Str""+ executions,(executionsExpected.equals(executions)));
  Assert.assertTrue(""String_Node_Str"" + mediaUrl + ""String_Node_Str""+ webRtcChannel,getPage().waitForEvent(""String_Node_Str""));
  Assert.assertTrue(""String_Node_Str"" + mediaUrl + ""String_Node_Str""+ webRtcChannel,eosLatch.await(getPage().getTimeout(),TimeUnit.SECONDS));
  mp.release();
}","public void testPlayerMultipleSeek(String mediaUrl,WebRtcChannel webRtcChannel,int pauseTimeSeconds,int numSeeks,Map<Integer,Color> expectedPositionAndColor) throws Exception {
  MediaPipeline mp=kurentoClient.createMediaPipeline();
  PlayerEndpoint playerEP=new PlayerEndpoint.Builder(mp,mediaUrl).build();
  WebRtcEndpoint webRtcEP=new WebRtcEndpoint.Builder(mp).build();
  playerEP.connect(webRtcEP);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  playerEP.addEndOfStreamListener(new EventListener<EndOfStreamEvent>(){
    @Override public void onEvent(    EndOfStreamEvent event){
      log.debug(""String_Node_Str"");
      eosLatch.countDown();
    }
  }
);
  getPage().subscribeEvents(""String_Node_Str"");
  getPage().initWebRtc(webRtcEP,webRtcChannel,WebRtcMode.RCV_ONLY);
  playerEP.play();
  Assert.assertTrue(""String_Node_Str"" + mediaUrl + ""String_Node_Str""+ webRtcChannel,getPage().waitForEvent(""String_Node_Str""));
  Thread.sleep(TimeUnit.SECONDS.toMillis(pauseTimeSeconds));
  Integer executions=-1;
  for (int i=0; i < numSeeks; i++) {
    executions++;
    log.debug(""String_Node_Str"");
    playerEP.setPosition(0);
    for (    Integer position : expectedPositionAndColor.keySet()) {
      executions++;
      log.debug(""String_Node_Str"",position);
      playerEP.setPosition(position);
      if (webRtcChannel != WebRtcChannel.AUDIO_ONLY) {
        Assert.assertTrue(""String_Node_Str"" + position + ""String_Node_Str""+ expectedPositionAndColor.get(position),getPage().similarColor(expectedPositionAndColor.get(position)));
      }
    }
  }
  Integer executionsExpected=(numSeeks * expectedPositionAndColor.size()) + numSeeks - 1;
  log.info(""String_Node_Str"",executionsExpected,executions);
  Assert.assertTrue(""String_Node_Str"" + executionsExpected + ""String_Node_Str""+ executions,(executionsExpected.equals(executions)));
  Assert.assertTrue(""String_Node_Str"" + mediaUrl + ""String_Node_Str""+ webRtcChannel,eosLatch.await(getPage().getTimeout(),TimeUnit.SECONDS));
  mp.release();
}"
10674,"KurentoClient(JsonRpcClient client){
  this.manager=new RomManager(new RomClientJsonRpcClient(client));
  client.setRequestTimeout(requesTimeout);
  if (client instanceof JsonRpcClientWebSocket) {
    ((JsonRpcClientWebSocket)client).enableHeartbeat(KEEPALIVE_TIME);
  }
  try {
    client.connect();
    sessionId=client.getSession().getSessionId();
  }
 catch (  IOException e) {
    throw new KurentoException(""String_Node_Str"",e);
  }
}","KurentoClient(JsonRpcClient client){
  this.client=client;
  this.manager=new RomManager(new RomClientJsonRpcClient(client));
  client.setRequestTimeout(requesTimeout);
  if (client instanceof JsonRpcClientWebSocket) {
    ((JsonRpcClientWebSocket)client).enableHeartbeat(KEEPALIVE_TIME);
  }
  try {
    client.connect();
  }
 catch (  IOException e) {
    throw new KurentoException(""String_Node_Str"",e);
  }
}"
10675,"public String getSessionId(){
  return sessionId;
}","public String getSessionId(){
  return client.getSession().getSessionId();
}"
10676,"public KurentoClient getKurentoClient(){
  if (kurentoClient == null && isKmsStarted) {
    kurentoClient=createKurentoClient();
  }
  return kurentoClient;
}","public KurentoClient getKurentoClient(){
  if (kurentoClient == null) {
    kurentoClient=createKurentoClient();
  }
  return kurentoClient;
}"
10677,"public KurentoClient getKurentoClient(){
  if (kurentoClient == null && isKmsStarted) {
    kurentoClient=createKurentoClient();
  }
  return kurentoClient;
}","public KurentoClient getKurentoClient(){
  if (kurentoClient == null) {
    kurentoClient=createKurentoClient();
  }
  return kurentoClient;
}"
10678,"public KurentoClient getKurentoClient(){
  if (kurentoClient == null) {
    kurentoClient=createKurentoClient();
  }
  return kurentoClient;
}","public KurentoClient getKurentoClient(){
  if (kurentoClient == null && isKmsStarted) {
    kurentoClient=createKurentoClient();
  }
  return kurentoClient;
}"
10679,"@Override public void start(){
  super.start();
  isKmsRemote=!wsUri.contains(""String_Node_Str"") && !wsUri.contains(""String_Node_Str"") && !isKmsDocker;
  isKmsDocker=KMS_SCOPE_DOCKER.equals(getProperty(KMS_SCOPE_PROP,KMS_SCOPE_DEFAULT));
  String kmsLogin=getProperty(kmsLoginProp);
  String kmsPasswd=getProperty(kmsPasswdProp);
  String kmsPem=getProperty(kmsPemProp);
  if (isKmsRemote && kmsLogin == null && (kmsPem == null || kmsPasswd == null)) {
    String kmsAutoStart=getProperty(kmsAutostartProp,kmsAutostartDefault);
    throw new KurentoException(""String_Node_Str"" + kmsAutostartProp + ""String_Node_Str""+ kmsAutoStart+ ""String_Node_Str""+ kmsWsUriProp+ ""String_Node_Str""+ wsUri+ ""String_Node_Str""+ kmsLoginProp+ ""String_Node_Str""+ kmsLogin+ ""String_Node_Str""+ kmsPasswdProp+ ""String_Node_Str""+ kmsPasswd+ ""String_Node_Str""+ kmsPemProp+ ""String_Node_Str""+ kmsPem);
  }
  if (!isKmsDocker && !isKmsRemote && !isFreePort(wsUri)) {
    throw new KurentoException(""String_Node_Str"" + wsUri + ""String_Node_Str"");
  }
  if (isKmsDocker) {
    log.info(""String_Node_Str"");
    Docker dockerClient=Docker.getSingleton();
    if (dockerClient.isRunningInContainer()) {
      setDockerContainerName(dockerClient.getContainerName() + ""String_Node_Str"");
    }
  }
 else {
    log.info(""String_Node_Str"",wsUri);
    try {
      workspace=Files.createTempDirectory(""String_Node_Str"");
    }
 catch (    IOException e) {
      throw new KurentoException(""String_Node_Str"",e);
    }
    log.trace(""String_Node_Str"",workspace);
    createKurentoConf();
  }
  if (isKmsRemote) {
    String remoteKmsStr=wsUri.substring(wsUri.indexOf(""String_Node_Str"") + 2,wsUri.lastIndexOf(""String_Node_Str""));
    log.info(""String_Node_Str"",remoteKmsStr);
    remoteKmsSshConnection=new SshConnection(remoteKmsStr,kmsLogin,kmsPasswd,kmsPem);
    if (kmsPem != null) {
      remoteKmsSshConnection.setPem(kmsPem);
    }
    remoteKmsSshConnection.start();
    remoteKmsSshConnection.createTmpFolder();
    String[] filesToBeCopied={""String_Node_Str"",""String_Node_Str""};
    for (    String s : filesToBeCopied) {
      remoteKmsSshConnection.scp(workspace + File.separator + s,remoteKmsSshConnection.getTmpFolder() + File.separator + s);
    }
    remoteKmsSshConnection.runAndWaitCommand(""String_Node_Str"",""String_Node_Str"",remoteKmsSshConnection.getTmpFolder() + File.separator + ""String_Node_Str"");
  }
  startKms();
  waitForKms();
}","@Override public void start(){
  super.start();
  if (wsUri == null) {
    isKmsStarted=false;
    return;
  }
  isKmsRemote=!wsUri.contains(""String_Node_Str"") && !wsUri.contains(""String_Node_Str"") && !isKmsDocker;
  isKmsDocker=KMS_SCOPE_DOCKER.equals(getProperty(KMS_SCOPE_PROP,KMS_SCOPE_DEFAULT));
  String kmsLogin=getProperty(kmsLoginProp);
  String kmsPasswd=getProperty(kmsPasswdProp);
  String kmsPem=getProperty(kmsPemProp);
  if (isKmsRemote && kmsLogin == null && (kmsPem == null || kmsPasswd == null)) {
    String kmsAutoStart=getProperty(kmsAutostartProp,kmsAutostartDefault);
    throw new KurentoException(""String_Node_Str"" + kmsAutostartProp + ""String_Node_Str""+ kmsAutoStart+ ""String_Node_Str""+ kmsWsUriProp+ ""String_Node_Str""+ wsUri+ ""String_Node_Str""+ kmsLoginProp+ ""String_Node_Str""+ kmsLogin+ ""String_Node_Str""+ kmsPasswdProp+ ""String_Node_Str""+ kmsPasswd+ ""String_Node_Str""+ kmsPemProp+ ""String_Node_Str""+ kmsPem);
  }
  if (!isKmsDocker && !isKmsRemote && !isFreePort(wsUri)) {
    throw new KurentoException(""String_Node_Str"" + wsUri + ""String_Node_Str"");
  }
  if (isKmsDocker) {
    log.info(""String_Node_Str"");
    Docker dockerClient=Docker.getSingleton();
    if (dockerClient.isRunningInContainer()) {
      setDockerContainerName(dockerClient.getContainerName() + ""String_Node_Str"");
    }
  }
 else {
    log.info(""String_Node_Str"",wsUri);
    try {
      workspace=Files.createTempDirectory(""String_Node_Str"");
    }
 catch (    IOException e) {
      throw new KurentoException(""String_Node_Str"",e);
    }
    log.trace(""String_Node_Str"",workspace);
    createKurentoConf();
  }
  if (isKmsRemote) {
    String remoteKmsStr=wsUri.substring(wsUri.indexOf(""String_Node_Str"") + 2,wsUri.lastIndexOf(""String_Node_Str""));
    log.info(""String_Node_Str"",remoteKmsStr);
    remoteKmsSshConnection=new SshConnection(remoteKmsStr,kmsLogin,kmsPasswd,kmsPem);
    if (kmsPem != null) {
      remoteKmsSshConnection.setPem(kmsPem);
    }
    remoteKmsSshConnection.start();
    remoteKmsSshConnection.createTmpFolder();
    String[] filesToBeCopied={""String_Node_Str"",""String_Node_Str""};
    for (    String s : filesToBeCopied) {
      remoteKmsSshConnection.scp(workspace + File.separator + s,remoteKmsSshConnection.getTmpFolder() + File.separator + s);
    }
    remoteKmsSshConnection.runAndWaitCommand(""String_Node_Str"",""String_Node_Str"",remoteKmsSshConnection.getTmpFolder() + File.separator + ""String_Node_Str"");
  }
  startKms();
  waitForKms();
}"
10680,"public void setWsUri(String wsUri){
  System.setProperty(KMS_WS_URI_PROP_EXPORT,wsUri);
  this.wsUri=wsUri;
}","public void setWsUri(String wsUri){
  if (wsUri != null) {
    System.setProperty(KMS_WS_URI_PROP_EXPORT,wsUri);
  }
  this.wsUri=wsUri;
}"
10681,"public FakeKmsService(){
  this.kmsLoginProp=FAKE_KMS_LOGIN_PROP;
  this.kmsPasswdProp=FAKE_KMS_PASSWD_PROP;
  this.kmsPemProp=FAKE_KMS_PEM_PROP;
  this.kmsAutostartProp=FAKE_KMS_AUTOSTART_PROP;
  this.kmsAutostartDefault=FAKE_KMS_AUTOSTART_DEFAULT;
  this.kmsWsUriProp=FAKE_KMS_WS_URI_PROP;
}","public FakeKmsService(){
  this.kmsLoginProp=FAKE_KMS_LOGIN_PROP;
  this.kmsPasswdProp=FAKE_KMS_PASSWD_PROP;
  this.kmsPemProp=FAKE_KMS_PEM_PROP;
  this.kmsAutostartProp=FAKE_KMS_AUTOSTART_PROP;
  this.kmsAutostartDefault=FAKE_KMS_AUTOSTART_DEFAULT;
  this.kmsWsUriProp=FAKE_KMS_WS_URI_PROP;
  setWsUri(getProperty(kmsWsUriProp));
}"
10682,"public FakeKmsService(){
  this.kmsLoginProp=FAKE_KMS_LOGIN_PROP;
  this.kmsPasswdProp=FAKE_KMS_PASSWD_PROP;
  this.kmsPemProp=FAKE_KMS_PEM_PROP;
  this.kmsAutostartProp=FAKE_KMS_AUTOSTART_PROP;
  this.kmsAutostartDefault=FAKE_KMS_AUTOSTART_DEFAULT;
  this.kmsWsUriProp=FAKE_KMS_WS_URI_PROP;
  setWsUri(getProperty(kmsWsUriProp));
}","public FakeKmsService(){
  this.kmsLoginProp=FAKE_KMS_LOGIN_PROP;
  this.kmsPasswdProp=FAKE_KMS_PASSWD_PROP;
  this.kmsPemProp=FAKE_KMS_PEM_PROP;
  this.kmsAutostartProp=FAKE_KMS_AUTOSTART_PROP;
  this.kmsAutostartDefault=FAKE_KMS_AUTOSTART_DEFAULT;
  this.kmsWsUriProp=FAKE_KMS_WS_URI_PROP;
  this.kmsWsUriExportProp=FAKE_KMS_WS_URI_PROP_EXPORT;
  setWsUri(getProperty(kmsWsUriProp));
}"
10683,"public void setWsUri(String wsUri){
  if (wsUri != null) {
    System.setProperty(KMS_WS_URI_PROP_EXPORT,wsUri);
  }
  this.wsUri=wsUri;
}","public void setWsUri(String wsUri){
  if (wsUri != null) {
    System.setProperty(kmsWsUriExportProp,wsUri);
  }
  this.wsUri=wsUri;
}"
10684,"public KurentoClient getKurentoClient(){
  if (kurentoClient == null) {
    kurentoClient=createKurentoClient();
  }
  return kurentoClient;
}","public KurentoClient getKurentoClient(){
  if (kurentoClient == null && wsUri != null) {
    kurentoClient=createKurentoClient();
  }
  return kurentoClient;
}"
10685,"public KmsService(String kmsLoginProp,String kmsPasswdProp,String kmsPemProp,String kmsAutostartProp,String kmsWsUriProp){
  this.kmsLoginProp=kmsLoginProp;
  this.kmsPasswdProp=kmsPasswdProp;
  this.kmsPemProp=kmsPemProp;
  this.kmsAutostartProp=kmsAutostartProp;
  this.kmsWsUriProp=kmsWsUriProp;
  setWsUri(getProperty(kmsWsUriProp,KMS_WS_URI_DEFAULT));
}","public KmsService(String kmsLoginProp,String kmsPasswdProp,String kmsPemProp,String kmsAutostartProp,String kmsWsUriProp,String kmsWsUriExportProp){
  this.kmsLoginProp=kmsLoginProp;
  this.kmsPasswdProp=kmsPasswdProp;
  this.kmsPemProp=kmsPemProp;
  this.kmsAutostartProp=kmsAutostartProp;
  this.kmsWsUriProp=kmsWsUriProp;
  this.kmsWsUriExportProp=kmsWsUriExportProp;
  setWsUri(getProperty(kmsWsUriProp,KMS_WS_URI_DEFAULT));
}"
10686,"private void stopContext(){
  if (context != null && context.isRunning()) {
    context.close();
    context.close();
  }
}","private void stopContext(){
  if (context != null && context.isRunning()) {
    context.stop();
    context.close();
  }
}"
10687,"@PreDestroy public void destroy(){
  log.info(""String_Node_Str"");
  manager.destroy();
  if (id != null) {
    kmsUrlLoader.clientDestroyed(id);
  }
}","@PreDestroy public void destroy(){
  log.info(""String_Node_Str"");
  manager.destroy();
  if (kmsUrlLoader != null) {
    kmsUrlLoader.clientDestroyed(id);
  }
}"
10688,"public void clientDestroyed(String id){
  getServiceProvider().releaseKms(id);
}","public void clientDestroyed(String id){
  if (getUrl() == null) {
    getServiceProvider().releaseKms(id);
  }
}"
10689,"@Before public void setupMonitor(){
  monitor=new SystemMonitorManager();
  monitor.startMonitoring();
}","@Before public void setupMonitor(){
  monitorResultPath=getDefaultOutputFile(""String_Node_Str"");
  monitor=new SystemMonitorManager();
  monitor.startMonitoring();
}"
10690,"public void writeResults(String csvFile) throws IOException {
  try (PrintWriter pw=new PrintWriter(new FileWriter(csvFile))){
    printKmsProcessHeaders(pw);
    Map<String,List<String>> headers=printWebRtcHeaders(pw);
    pw.println(""String_Node_Str"");
    SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
    for (    long time : samples.keySet()) {
      MonitorSample sample=samples.get(time);
      pw.print(simpleDateFormat.format(time) + ""String_Node_Str"");
      printKmsProcessStats(pw,sample);
      printWebRtcStats(pw,headers,sample);
      pw.println(""String_Node_Str"");
    }
  }
 }","public void writeResults(String csvFile) throws IOException {
  Path path=Paths.get(csvFile);
  if (!Files.exists(path.getParent())) {
    Files.createDirectories(path.getParent());
  }
  try (PrintWriter pw=new PrintWriter(new FileWriter(csvFile))){
    printKmsProcessHeaders(pw);
    Map<String,List<String>> headers=printWebRtcHeaders(pw);
    pw.println(""String_Node_Str"");
    SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
    for (    long time : samples.keySet()) {
      MonitorSample sample=samples.get(time);
      pw.print(simpleDateFormat.format(time) + ""String_Node_Str"");
      printKmsProcessStats(pw,sample);
      printWebRtcStats(pw,headers,sample);
      pw.println(""String_Node_Str"");
    }
  }
 }"
10691,"private void processReconnectMessage(ServerSessionFactory factory,Request<JsonElement> request,ResponseSender responseSender,String transportId) throws IOException {
  String sessionId=request.getSessionId();
  if (sessionId == null) {
    ServerSession session=getSession(factory,transportId,request);
    responseSender.sendResponse(new Response<>(session.getSessionId(),request.getId(),""String_Node_Str""));
  }
 else {
    ServerSession session=sessionsManager.get(sessionId);
    if (session != null) {
      String oldTransportId=session.getTransportId();
      session.setTransportId(transportId);
      factory.updateSessionOnReconnection(session);
      pingWachdogManager.updateTransportId(transportId,oldTransportId);
      sessionsManager.updateTransportId(session,oldTransportId);
      cancelCloseTimer(session);
      responseSender.sendResponse(new Response<>(sessionId,request.getId(),RECONNECTION_SUCCESSFUL));
    }
 else {
      responseSender.sendResponse(new Response<>(request.getId(),new ResponseError(99999,RECONNECTION_ERROR)));
    }
  }
}","private void processReconnectMessage(ServerSessionFactory factory,Request<JsonElement> request,ResponseSender responseSender,String transportId) throws IOException {
  String sessionId=request.getSessionId();
  if (sessionId == null) {
    ServerSession session=getSession(factory,transportId,request);
    responseSender.sendResponse(new Response<>(session.getSessionId(),request.getId(),""String_Node_Str""));
  }
 else {
    ServerSession session=sessionsManager.get(sessionId);
    if (session != null) {
      String oldTransportId=session.getTransportId();
      session.setTransportId(transportId);
      factory.updateSessionOnReconnection(session);
      pingWachdogManager.updateTransportId(transportId,oldTransportId);
      sessionsManager.updateTransportId(session,oldTransportId);
      cancelCloseTimer(session);
      responseSender.sendResponse(new Response<>(sessionId,request.getId(),RECONNECTION_SUCCESSFUL));
    }
 else {
      responseSender.sendResponse(new Response<>(request.getId(),new ResponseError(40007,RECONNECTION_ERROR)));
    }
  }
}"
10692,"KurentoClient(JsonRpcClient client){
  this.manager=new RomManager(new RomClientJsonRpcClient(client));
  client.setRequestTimeout(requesTimeout);
  try {
    client.connect();
  }
 catch (  IOException e) {
    throw new KurentoException(""String_Node_Str"",e);
  }
}","KurentoClient(JsonRpcClient client){
  this.manager=new RomManager(new RomClientJsonRpcClient(client));
  client.setRequestTimeout(requesTimeout);
  if (client instanceof JsonRpcClientWebSocket) {
    ((JsonRpcClientWebSocket)client).setKeepAliveTime(KEEPALIVE_TIME);
  }
  try {
    client.connect();
  }
 catch (  IOException e) {
    throw new KurentoException(""String_Node_Str"",e);
  }
}"
10693,"public static KurentoClient create(String websocketUrl,KurentoConnectionListener listener,Properties properties){
  log.info(""String_Node_Str"",websocketUrl);
  JsonRpcClientWebSocket client=new JsonRpcClientWebSocket(websocketUrl,JsonRpcConnectionListenerKurento.create(listener));
  client.setLabel(""String_Node_Str"");
  return new KurentoClient(client);
}","public static KurentoClient create(String websocketUrl,KurentoConnectionListener listener,Properties properties){
  log.info(""String_Node_Str"",websocketUrl);
  JsonRpcClientWebSocket client=new JsonRpcClientWebSocket(websocketUrl,JsonRpcConnectionListenerKurento.create(listener));
  client.setKeepAliveTime(KEEPALIVE_TIME);
  client.setLabel(""String_Node_Str"");
  return new KurentoClient(client);
}"
10694,"public void connectIfNecessary() throws IOException {
  lock.tryLockTimeout(""String_Node_Str"");
  try {
    if (((wsSession == null) || !wsSession.isOpen()) && !isClosed()) {
      log.debug(""String_Node_Str"",label,url);
      try {
        if (client == null) {
          client=new WebSocketClient(sslContextFactory);
          client.setConnectTimeout(this.connectionTimeout);
          WebSocketPolicy policy=client.getPolicy();
          policy.setMaxBinaryMessageBufferSize(MAX_PACKET_SIZE);
          policy.setMaxTextMessageBufferSize(MAX_PACKET_SIZE);
          policy.setMaxBinaryMessageSize(MAX_PACKET_SIZE);
          policy.setMaxTextMessageSize(MAX_PACKET_SIZE);
          client.start();
        }
 else {
          log.debug(""String_Node_Str"",label);
        }
        if (heartbeating) {
          enableHeartbeat();
        }
        WebSocketClientSocket socket=new WebSocketClientSocket();
        ClientUpgradeRequest request=new ClientUpgradeRequest();
        wsSession=client.connect(socket,new URI(url),request).get(this.connectionTimeout,TimeUnit.MILLISECONDS);
        wsSession.setIdleTimeout(this.idleTimeout);
      }
 catch (      TimeoutException e) {
        fireConnectionFailed();
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
catch (      Exception e) {
        fireConnectionFailed();
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + url,e);
      }
      try {
        if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
          fireConnectionFailed();
          this.closeClient();
          throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
        }
        if (session == null) {
          session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
          handlerManager.afterConnectionEstablished(session);
        }
 else {
          try {
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
            fireReconnectedSameServer();
          }
 catch (          JsonRpcErrorException e) {
            if (e.getCode() == 40007) {
              rsHelper.setSessionId(null);
              rsHelper.sendRequest(METHOD_RECONNECT,String.class);
              pendingRequests.closeAllPendingRequests();
              log.info(""String_Node_Str"",label,url);
              fireReconnectedNewServer();
            }
 else {
              log.warn(""String_Node_Str"",label,url,e);
            }
          }
        }
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
 catch (  TimeoutRuntimeException e) {
    log.error(""String_Node_Str"",label,url,e);
    this.closeClient();
  }
 finally {
    lock.unlock();
  }
}","public void connectIfNecessary() throws IOException {
  lock.tryLockTimeout(""String_Node_Str"");
  try {
    if (((wsSession == null) || !wsSession.isOpen()) && !isClosed()) {
      log.debug(""String_Node_Str"",label,url);
      try {
        if (client == null) {
          client=new WebSocketClient(sslContextFactory);
          client.setConnectTimeout(this.connectionTimeout);
          WebSocketPolicy policy=client.getPolicy();
          policy.setMaxBinaryMessageBufferSize(MAX_PACKET_SIZE);
          policy.setMaxTextMessageBufferSize(MAX_PACKET_SIZE);
          policy.setMaxBinaryMessageSize(MAX_PACKET_SIZE);
          policy.setMaxTextMessageSize(MAX_PACKET_SIZE);
          client.start();
          if (keepAliveManager == null && keepAliveTime != 0) {
synchronized (this) {
              if (keepAliveManager == null) {
                keepAliveManager=new KeepAliveManager(this,keepAliveTime,KeepAliveManager.Mode.PER_CLIENT);
                keepAliveManager.start();
              }
            }
          }
        }
 else {
          log.debug(""String_Node_Str"",label);
        }
        if (heartbeating) {
          enableHeartbeat();
        }
        WebSocketClientSocket socket=new WebSocketClientSocket();
        ClientUpgradeRequest request=new ClientUpgradeRequest();
        wsSession=client.connect(socket,new URI(url),request).get(this.connectionTimeout,TimeUnit.MILLISECONDS);
        wsSession.setIdleTimeout(this.idleTimeout);
      }
 catch (      TimeoutException e) {
        fireConnectionFailed();
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
catch (      Exception e) {
        fireConnectionFailed();
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + url,e);
      }
      try {
        if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
          fireConnectionFailed();
          this.closeClient();
          throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
        }
        if (session == null) {
          session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
          handlerManager.afterConnectionEstablished(session);
        }
 else {
          try {
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
            fireReconnectedSameServer();
          }
 catch (          JsonRpcErrorException e) {
            if (e.getCode() == 40007) {
              rsHelper.setSessionId(null);
              rsHelper.sendRequest(METHOD_RECONNECT,String.class);
              pendingRequests.closeAllPendingRequests();
              log.info(""String_Node_Str"",label,url);
              fireReconnectedNewServer();
            }
 else {
              log.warn(""String_Node_Str"",label,url,e);
            }
          }
        }
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
 catch (  TimeoutRuntimeException e) {
    log.error(""String_Node_Str"",label,url,e);
    this.closeClient();
  }
 finally {
    lock.unlock();
  }
}"
10695,"private void closeClient(){
  if (client != null) {
    log.debug(""String_Node_Str"",label);
    try {
      client.stop();
      client.destroy();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    client=null;
  }
  if (execService != null) {
    try {
      execService.shutdown();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    execService=null;
  }
  if (disconnectExecService != null) {
    try {
      disconnectExecService.shutdown();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    disconnectExecService=null;
  }
}","private synchronized void closeClient(){
  if (client != null) {
    log.debug(""String_Node_Str"",label);
    try {
      client.stop();
      client.destroy();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    client=null;
  }
  if (keepAliveManager != null) {
    keepAliveManager.stop();
    keepAliveManager=null;
  }
  if (execService != null) {
    try {
      execService.shutdown();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    execService=null;
  }
  if (disconnectExecService != null) {
    try {
      disconnectExecService.shutdown();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    disconnectExecService=null;
  }
}"
10696,"@OnWebSocketClose public void onClose(int statusCode,String closeReason){
  handleReconnectDisconnection(statusCode,closeReason);
}","@OnWebSocketClose public void onClose(int statusCode,String closeReason){
  log.debug(""String_Node_Str"",closeReason,statusCode);
  handleReconnectDisconnection(statusCode,closeReason);
}"
10697,"private DockerBrowserManager getDockerManager(){
  if (dockerManager == null) {
synchronized (Browser.class) {
      if (dockerManager == null) {
        dockerManager=new DockerBrowserManager();
        Path logFile=Paths.get(KurentoClientWebPageTest.getDefaultOutputFile(""String_Node_Str""));
        try {
          if (!Files.exists(logFile)) {
            Files.createDirectories(logFile);
          }
          dockerManager.setDownloadLogsPath(logFile);
        }
 catch (        IOException e) {
          log.warn(""String_Node_Str"",logFile);
        }
      }
    }
  }
  return dockerManager;
}","private DockerBrowserManager getDockerManager(){
  if (dockerManager == null) {
synchronized (Browser.class) {
      if (dockerManager == null) {
        dockerManager=new DockerBrowserManager();
      }
    }
  }
  return dockerManager;
}"
10698,"private void createChromeBrowser(DesiredCapabilities capabilities) throws MalformedURLException {
  ChromeDriverManager.getInstance().setup();
  ChromeOptions options=new ChromeOptions();
  if (extensions != null && !extensions.isEmpty()) {
    for (    Map<String,String> extension : extensions) {
      InputStream is=getExtensionAsInputStream(extension.values().iterator().next());
      if (is != null) {
        try {
          File crx=File.createTempFile(extension.keySet().iterator().next(),""String_Node_Str"");
          FileUtils.copyInputStreamToFile(is,crx);
          options.addExtensions(crx);
        }
 catch (        Throwable t) {
          log.error(""String_Node_Str"",extension,t.getClass(),t.getMessage());
        }
      }
    }
  }
  if (enableScreenCapture) {
    options.addArguments(""String_Node_Str"");
    String windowTitle=TEST_SCREEN_SHARE_TITLE_DEFAULT;
    if (platform != null && (platform == Platform.WINDOWS || platform == Platform.XP || platform == Platform.VISTA || platform == Platform.WIN8 || platform == Platform.WIN8_1)) {
      windowTitle=TEST_SCREEN_SHARE_TITLE_DEFAULT_WIN;
    }
    options.addArguments(""String_Node_Str"" + getProperty(TEST_SCREEN_SHARE_TITLE_PROPERTY,windowTitle));
  }
 else {
    options.addArguments(""String_Node_Str"");
  }
  options.addArguments(""String_Node_Str"");
  if (protocol == Protocol.FILE) {
    options.addArguments(""String_Node_Str"");
  }
  if (!usePhysicalCam) {
    options.addArguments(""String_Node_Str"");
    if (video != null && (isLocal() || isDocker())) {
      if (!Files.exists(Paths.get(video))) {
        throw new RuntimeException(""String_Node_Str"" + video + ""String_Node_Str"");
      }
      log.debug(""String_Node_Str"",video,id);
      options.addArguments(""String_Node_Str"" + video);
    }
  }
  capabilities.setCapability(ChromeOptions.CAPABILITY,options);
  capabilities.setBrowserName(DesiredCapabilities.chrome().getBrowserName());
  if (scope == BrowserScope.DOCKER) {
    capabilities.setCapability(""String_Node_Str"",id);
  }
  createDriver(capabilities,options);
}","private void createChromeBrowser(DesiredCapabilities capabilities) throws MalformedURLException {
  ChromeDriverManager.getInstance().setup();
  ChromeOptions options=new ChromeOptions();
  if (extensions != null && !extensions.isEmpty()) {
    for (    Map<String,String> extension : extensions) {
      InputStream is=getExtensionAsInputStream(extension.values().iterator().next());
      if (is != null) {
        try {
          File crx=File.createTempFile(extension.keySet().iterator().next(),""String_Node_Str"");
          FileUtils.copyInputStreamToFile(is,crx);
          options.addExtensions(crx);
        }
 catch (        Throwable t) {
          log.error(""String_Node_Str"",extension,t.getClass(),t.getMessage());
        }
      }
    }
  }
  if (enableScreenCapture) {
    options.addArguments(""String_Node_Str"");
    String windowTitle=TEST_SCREEN_SHARE_TITLE_DEFAULT;
    if (platform != null && (platform == Platform.WINDOWS || platform == Platform.XP || platform == Platform.VISTA || platform == Platform.WIN8 || platform == Platform.WIN8_1)) {
      windowTitle=TEST_SCREEN_SHARE_TITLE_DEFAULT_WIN;
    }
    options.addArguments(""String_Node_Str"" + getProperty(TEST_SCREEN_SHARE_TITLE_PROPERTY,windowTitle));
  }
 else {
    options.addArguments(""String_Node_Str"");
  }
  options.addArguments(""String_Node_Str"");
  if (protocol == Protocol.FILE) {
    options.addArguments(""String_Node_Str"");
  }
  if (!usePhysicalCam) {
    options.addArguments(""String_Node_Str"");
    if (video != null && (isLocal() || isDocker())) {
      if (!Files.exists(Paths.get(video))) {
        throw new RuntimeException(""String_Node_Str"" + video + ""String_Node_Str"");
      }
      log.debug(""String_Node_Str"",video,id);
      options.addArguments(""String_Node_Str"" + video);
    }
  }
  capabilities.setCapability(ChromeOptions.CAPABILITY,options);
  capabilities.setBrowserName(DesiredCapabilities.chrome().getBrowserName());
  createDriver(capabilities,options);
}"
10699,"@Override public void close(){
  if (driver != null) {
    try {
      log.debug(""String_Node_Str"",id);
      driver.quit();
      driver=null;
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t.getClass(),t.getMessage());
    }
  }
  if (GridHandler.getInstance().useRemoteNodes()) {
    log.debug(""String_Node_Str"",id);
    GridHandler.getInstance().stopGrid();
  }
  if (scope == BrowserScope.DOCKER) {
    getDockerManager().closeDriver(id);
  }
}","@Override public void close(){
  if (driver != null) {
    try {
      log.debug(""String_Node_Str"",id);
      driver.quit();
      driver=null;
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t.getClass(),t.getMessage());
    }
  }
  if (GridHandler.getInstance().useRemoteNodes()) {
    log.debug(""String_Node_Str"",id);
    GridHandler.getInstance().stopGrid();
  }
  if (scope == BrowserScope.DOCKER) {
    Path logFile=Paths.get(KurentoClientWebPageTest.getDefaultOutputFile(""String_Node_Str""));
    try {
      if (!Files.exists(logFile)) {
        Files.createDirectories(logFile);
      }
      getDockerManager().setDownloadLogsPath(logFile);
    }
 catch (    IOException e) {
      log.warn(""String_Node_Str"",logFile);
    }
    getDockerManager().closeDriver(id);
  }
}"
10700,"public DockerBrowser(String id,DesiredCapabilities capabilities){
  this.id=id;
  this.capabilities=capabilities;
  calculateContainerNames();
}","public DockerBrowser(String id,DesiredCapabilities capabilities){
  this.id=id;
  this.capabilities=capabilities;
  calculateContainerNames();
  capabilities.setCapability(""String_Node_Str"",browserContainerName);
}"
10701,"@Test public void testSerialBrowser() throws InterruptedException, IOException {
  initTestFolder(""String_Node_Str"");
  for (int i=0; i < NUM_ITERATIONS; i++) {
    for (int j=0; j < NUM_BROWSERS; j++) {
      log.info(""String_Node_Str"",i,j);
      Browser browser=new Browser.Builder().scope(BrowserScope.DOCKER).build();
      browser.setId(""String_Node_Str"" + i + ""String_Node_Str""+ j);
      browser.init();
      browser.close();
    }
  }
}","@Test public void testSerialBrowser() throws InterruptedException, IOException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  initTestFolder(""String_Node_Str"");
  for (int i=0; i < NUM_ITERATIONS; i++) {
    for (int j=0; j < NUM_BROWSERS; j++) {
      log.info(""String_Node_Str"",i,j);
      Browser browser=new Browser.Builder().scope(BrowserScope.DOCKER).build();
      browser.setId(""String_Node_Str"" + i + ""String_Node_Str""+ j);
      browser.init();
      browser.close();
    }
  }
}"
10702,"private void initTestFolder(String testName) throws IOException {
  KurentoServicesTestHelper.setTestCaseName(""String_Node_Str"");
  KurentoServicesTestHelper.setTestName(testName);
  log.info(""String_Node_Str"",KurentoServicesTestHelper.getTestDir());
  Path testFolder=Paths.get(KurentoServicesTestHelper.getTestDir(),""String_Node_Str"");
  if (Files.exists(testFolder)) {
    FileUtils.forceDelete(testFolder.toFile());
  }
  Files.deleteIfExists(testFolder);
  Files.createDirectories(testFolder);
}","private void initTestFolder(String testName) throws IOException {
  KurentoServicesTestHelper.setTestCaseName(this.getClass().getSimpleName());
  KurentoServicesTestHelper.setTestName(testName);
  log.info(""String_Node_Str"",KurentoServicesTestHelper.getTestDir());
  Path testFolder=Paths.get(KurentoServicesTestHelper.getTestDir(),""String_Node_Str"");
  if (Files.exists(testFolder)) {
    log.debug(""String_Node_Str"",testFolder);
    FileUtils.forceDelete(testFolder.toFile());
  }
  log.debug(""String_Node_Str"",testFolder);
  Files.createDirectories(testFolder);
}"
10703,"@SuppressWarnings(""String_Node_Str"") public void initWebRtc(final WebRtcEndpoint webRtcEndpoint,final WebRtcChannel channel,final WebRtcMode mode) throws InterruptedException {
  webRtcEndpoint.addOnIceCandidateListener(new EventListener<OnIceCandidateEvent>(){
    @Override public void onEvent(    OnIceCandidateEvent event){
      browser.executeScript(""String_Node_Str"" + JsonUtils.toJsonObject(event.getCandidate()) + ""String_Node_Str"");
    }
  }
);
  final List<Boolean> searchCandidates=new ArrayList<Boolean>();
  searchCandidates.add(true);
  Thread t1=new Thread(){
    public void run(){
      JsonParser parser=new JsonParser();
      int numCandidate=0;
      while (!searchCandidates.isEmpty()) {
        ArrayList<Object> iceCandidates=(ArrayList<Object>)browser.executeScriptAndWaitOutput(""String_Node_Str"");
        for (int i=numCandidate; i < iceCandidates.size(); i++) {
          JsonObject jsonCandidate=(JsonObject)parser.parse(iceCandidates.get(i).toString());
          IceCandidate candidate=new IceCandidate(jsonCandidate.get(""String_Node_Str"").getAsString(),jsonCandidate.get(""String_Node_Str"").getAsString(),jsonCandidate.get(""String_Node_Str"").getAsInt());
          log.debug(""String_Node_Str"",i,jsonCandidate);
          webRtcEndpoint.addIceCandidate(candidate);
          numCandidate++;
        }
        try {
          Thread.sleep(300);
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
;
  t1.start();
  addTestName(KurentoServicesTestHelper.getTestCaseName() + ""String_Node_Str"" + KurentoServicesTestHelper.getTestName());
  appendStringToTitle(mode.toString());
  appendStringToTitle(channel.toString());
  String audio=browser.getAudio();
  if (audio != null) {
    browser.executeScript(""String_Node_Str"" + audio + ""String_Node_Str"");
  }
  String channelJsFunction=channel.getJsFunction();
  if (channelJsFunction != null) {
    browser.executeScript(channelJsFunction);
  }
  browser.executeScript(mode.getJsFunction());
  final CountDownLatch latch=new CountDownLatch(1);
  Thread t2=new Thread(){
    public void run(){
      String sdpOffer=(String)browser.executeScriptAndWaitOutput(""String_Node_Str"");
      String sdpAnswer=webRtcEndpoint.processOffer(sdpOffer);
      log.trace(""String_Node_Str"",sdpOffer);
      log.trace(""String_Node_Str"",sdpAnswer);
      sdpAnswer=new String(Base64.encodeBase64(sdpAnswer.getBytes()));
      browser.executeScript(""String_Node_Str"" + sdpAnswer + ""String_Node_Str"");
      latch.countDown();
    }
  }
;
  t2.start();
  if (!latch.await(browser.getTimeout(),TimeUnit.SECONDS)) {
    throw new KurentoException(""String_Node_Str"" + browser.getTimeout() + ""String_Node_Str"");
  }
  searchCandidates.clear();
  t1.interrupt();
  t2.interrupt();
  webRtcEndpoint.gatherCandidates();
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void initWebRtc(final WebRtcEndpoint webRtcEndpoint,final WebRtcChannel channel,final WebRtcMode mode) throws InterruptedException {
  webRtcEndpoint.addOnIceCandidateListener(new EventListener<OnIceCandidateEvent>(){
    @Override public void onEvent(    OnIceCandidateEvent event){
      browser.executeScript(""String_Node_Str"" + JsonUtils.toJsonObject(event.getCandidate()) + ""String_Node_Str"");
    }
  }
);
  Thread t1=new Thread(){
    public void run(){
      JsonParser parser=new JsonParser();
      int numCandidate=0;
      while (true) {
        try {
          ArrayList<Object> iceCandidates=(ArrayList<Object>)browser.executeScript(""String_Node_Str"");
          for (int i=numCandidate; i < iceCandidates.size(); i++) {
            JsonObject jsonCandidate=(JsonObject)parser.parse(iceCandidates.get(i).toString());
            IceCandidate candidate=new IceCandidate(jsonCandidate.get(""String_Node_Str"").getAsString(),jsonCandidate.get(""String_Node_Str"").getAsString(),jsonCandidate.get(""String_Node_Str"").getAsInt());
            log.debug(""String_Node_Str"",i,jsonCandidate);
            webRtcEndpoint.addIceCandidate(candidate);
            numCandidate++;
          }
          Thread.sleep(300);
        }
 catch (        Throwable e) {
          log.debug(""String_Node_Str"");
          break;
        }
      }
    }
  }
;
  t1.start();
  addTestName(KurentoServicesTestHelper.getTestCaseName() + ""String_Node_Str"" + KurentoServicesTestHelper.getTestName());
  appendStringToTitle(mode.toString());
  appendStringToTitle(channel.toString());
  String audio=browser.getAudio();
  if (audio != null) {
    browser.executeScript(""String_Node_Str"" + audio + ""String_Node_Str"");
  }
  String channelJsFunction=channel.getJsFunction();
  if (channelJsFunction != null) {
    browser.executeScript(channelJsFunction);
  }
  browser.executeScript(mode.getJsFunction());
  final CountDownLatch latch=new CountDownLatch(1);
  Thread t2=new Thread(){
    public void run(){
      String sdpOffer=(String)browser.executeScriptAndWaitOutput(""String_Node_Str"");
      String sdpAnswer=webRtcEndpoint.processOffer(sdpOffer);
      log.trace(""String_Node_Str"",sdpOffer);
      log.trace(""String_Node_Str"",sdpAnswer);
      sdpAnswer=new String(Base64.encodeBase64(sdpAnswer.getBytes()));
      browser.executeScript(""String_Node_Str"" + sdpAnswer + ""String_Node_Str"");
      latch.countDown();
    }
  }
;
  t2.start();
  if (!latch.await(browser.getTimeout(),TimeUnit.SECONDS)) {
    t1.interrupt();
    t1.stop();
    t2.interrupt();
    t2.stop();
    throw new KurentoException(""String_Node_Str"" + browser.getTimeout() + ""String_Node_Str"");
  }
  webRtcEndpoint.gatherCandidates();
}"
10704,"@Override public void close(){
  if (driver != null) {
    try {
      log.info(""String_Node_Str"",id);
      driver.quit();
      driver=null;
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t.getClass(),t.getMessage());
    }
  }
  if (GridHandler.getInstance().useRemoteNodes()) {
    log.info(""String_Node_Str"",id);
    GridHandler.getInstance().stopGrid();
  }
  if (scope == BrowserScope.DOCKER) {
    downloadLogsForContainers(hubContainerName,browserContainerName,vncrecorderContainerName);
    docker.stopAndRemoveContainers(hubContainerName,browserContainerName,vncrecorderContainerName);
  }
}","@Override public void close(){
  if (driver != null) {
    try {
      log.info(""String_Node_Str"",id);
      driver.quit();
      driver=null;
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t.getClass(),t.getMessage());
    }
  }
  if (GridHandler.getInstance().useRemoteNodes()) {
    log.info(""String_Node_Str"",id);
    GridHandler.getInstance().stopGrid();
  }
  if (scope == BrowserScope.DOCKER) {
    downloadLogsForContainer(hubContainerName,""String_Node_Str"");
    downloadLogsForContainer(browserContainerName,id);
    downloadLogsForContainer(vncrecorderContainerName,id + ""String_Node_Str"");
    docker.stopAndRemoveContainers(hubContainerName,browserContainerName,vncrecorderContainerName);
  }
}"
10705,"private void createVncRecorderContainer(){
  try {
    String vncrecordImageId=getProperty(DOCKER_VNCRECORDER_IMAGE_PROPERTY,DOCKER_VNCRECORDER_IMAGE_DEFAULT);
    if (!docker.existsContainer(vncrecorderContainerName)) {
      String secretFile=createSecretFile();
      docker.pullImageIfNecessary(vncrecordImageId);
      String browserIp=docker.inspectContainer(browserContainerName).getNetworkSettings().getIpAddress();
      String videoFile=Paths.get(KurentoClientWebPageTest.getDefaultOutputFile(""String_Node_Str"")).toAbsolutePath().toString();
      log.debug(""String_Node_Str"",vncrecorderContainerName,browserContainerName,videoFile);
      CreateContainerCmd createContainerCmd=docker.getClient().createContainerCmd(vncrecordImageId).withName(vncrecorderContainerName).withCmd(""String_Node_Str"",videoFile,""String_Node_Str"",secretFile,browserIp,""String_Node_Str"");
      docker.mountDefaultFolders(createContainerCmd);
      createContainerCmd.exec();
      docker.startContainer(vncrecorderContainerName);
      log.debug(""String_Node_Str"",vncrecorderContainerName);
    }
 else {
      log.debug(""String_Node_Str"",vncrecorderContainerName);
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"");
  }
}","private void createVncRecorderContainer(){
  try {
    String vncrecordImageId=getProperty(DOCKER_VNCRECORDER_IMAGE_PROPERTY,DOCKER_VNCRECORDER_IMAGE_DEFAULT);
    if (!docker.existsContainer(vncrecorderContainerName)) {
      String secretFile=createSecretFile();
      docker.pullImageIfNecessary(vncrecordImageId);
      String browserIp=docker.inspectContainer(browserContainerName).getNetworkSettings().getIpAddress();
      String videoFile=Paths.get(KurentoClientWebPageTest.getDefaultOutputFile(""String_Node_Str"" + id + ""String_Node_Str"")).toAbsolutePath().toString();
      log.debug(""String_Node_Str"",vncrecorderContainerName,browserContainerName,videoFile);
      CreateContainerCmd createContainerCmd=docker.getClient().createContainerCmd(vncrecordImageId).withName(vncrecorderContainerName).withCmd(""String_Node_Str"",videoFile,""String_Node_Str"",secretFile,browserIp,""String_Node_Str"");
      docker.mountDefaultFolders(createContainerCmd);
      createContainerCmd.exec();
      docker.startContainer(vncrecorderContainerName);
      log.debug(""String_Node_Str"",vncrecorderContainerName);
    }
 else {
      log.debug(""String_Node_Str"",vncrecorderContainerName);
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"");
  }
}"
10706,"public void start(boolean isFake) throws IOException {
  String kmsLoginProp=isFake ? FAKE_KMS_LOGIN_PROP : KURENTO_KMS_LOGIN_PROP;
  String kmsPasswdProp=isFake ? FAKE_KMS_PASSWD_PROP : KURENTO_KMS_PASSWD_PROP;
  String kmsPemProp=isFake ? FAKE_KMS_PEM_PROP : KURENTO_KMS_PASSWD_PROP;
  String kmsAutostartProp=isFake ? FAKE_KMS_AUTOSTART_PROP : KMS_AUTOSTART_PROP;
  String kmsAutostartDefaultProp=isFake ? FAKE_KMS_AUTOSTART_DEFAULT : KMS_AUTOSTART_DEFAULT;
  String kmsWsUriProp=isFake ? FAKE_KMS_WS_URI_PROP : KMS_WS_URI_PROP;
  String kmsLogin=getProperty(kmsLoginProp);
  String kmsPasswd=getProperty(kmsPasswdProp);
  String kmsPem=getProperty(kmsPemProp);
  String wsUri;
  if (this.wsUri != null) {
    wsUri=this.wsUri;
  }
 else {
    wsUri=getProperty(kmsWsUriProp,this.wsUri);
  }
  isKmsRemote=!wsUri.contains(""String_Node_Str"") && !wsUri.contains(""String_Node_Str"") && !docker;
  if (isKmsRemote && kmsLogin == null && (kmsPem == null || kmsPasswd == null)) {
    String kmsAutoStart=getProperty(kmsAutostartProp,kmsAutostartDefaultProp);
    throw new RuntimeException(""String_Node_Str"" + kmsAutostartProp + ""String_Node_Str""+ kmsAutoStart+ ""String_Node_Str""+ kmsWsUriProp+ ""String_Node_Str""+ wsUri+ ""String_Node_Str""+ kmsLoginProp+ ""String_Node_Str""+ kmsLogin+ ""String_Node_Str""+ kmsPasswdProp+ ""String_Node_Str""+ kmsPasswd+ ""String_Node_Str""+ kmsPemProp+ ""String_Node_Str""+ kmsPem);
  }
  serverCommand=PropertiesManager.getProperty(KURENTO_SERVER_COMMAND_PROP,KURENTO_SERVER_COMMAND_DEFAULT);
  gstPlugins=PropertiesManager.getProperty(KURENTO_GST_PLUGINS_PROP,KURENTO_GST_PLUGINS_DEFAULT);
  try {
    workspace=Files.createTempDirectory(""String_Node_Str"").toString();
    lastWorkspace=workspace;
  }
 catch (  IOException e) {
    workspace=PropertiesManager.getProperty(KURENTO_WORKSPACE_PROP,KURENTO_WORKSPACE_DEFAULT);
    log.error(""String_Node_Str"",workspace,e);
  }
  debugOptions=PropertiesManager.getProperty(KURENTO_SERVER_DEBUG_PROP,KURENTO_SERVER_DEBUG_DEFAULT);
  if (!workspace.endsWith(""String_Node_Str"")) {
    workspace+=""String_Node_Str"";
  }
  log.debug(""String_Node_Str"",workspace);
  if (rabbitMqAddress != null) {
    log.info(""String_Node_Str"" + ""String_Node_Str"",rabbitMqAddress,serverCommand,gstPlugins,workspace);
  }
 else {
    if (docker) {
      log.info(""String_Node_Str"" + ""String_Node_Str"",serverCommand,gstPlugins,workspace);
    }
 else {
      log.info(""String_Node_Str"" + ""String_Node_Str"",wsUri,serverCommand,gstPlugins,workspace);
    }
    if (!docker && !isKmsRemote && !isFreePort(wsUri)) {
      throw new RuntimeException(""String_Node_Str"" + wsUri + ""String_Node_Str"");
    }
  }
  if (isKmsRemote) {
    String remoteKmsStr=wsUri.substring(wsUri.indexOf(""String_Node_Str"") + 2,wsUri.lastIndexOf(""String_Node_Str""));
    log.info(""String_Node_Str"",remoteKmsStr);
    remoteKms=new SshConnection(remoteKmsStr,kmsLogin,kmsPasswd,kmsPem);
    if (kmsPem != null) {
      remoteKms.setPem(kmsPem);
    }
    remoteKms.start();
    remoteKms.createTmpFolder();
  }
  createKurentoConf();
  if (isKmsRemote) {
    String[] filesToBeCopied={""String_Node_Str"",""String_Node_Str""};
    for (    String s : filesToBeCopied) {
      remoteKms.scp(workspace + s,remoteKms.getTmpFolder() + ""String_Node_Str"" + s);
    }
    remoteKms.runAndWaitCommand(""String_Node_Str"",""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"");
  }
  startKms(wsUri);
  waitForKurentoMediaServer(this.wsUri);
}","public void start(boolean isFake) throws IOException {
  String kmsLoginProp=isFake ? FAKE_KMS_LOGIN_PROP : KURENTO_KMS_LOGIN_PROP;
  String kmsPasswdProp=isFake ? FAKE_KMS_PASSWD_PROP : KURENTO_KMS_PASSWD_PROP;
  String kmsPemProp=isFake ? FAKE_KMS_PEM_PROP : KURENTO_KMS_PEM_PROP;
  String kmsAutostartProp=isFake ? FAKE_KMS_AUTOSTART_PROP : KMS_AUTOSTART_PROP;
  String kmsAutostartDefaultProp=isFake ? FAKE_KMS_AUTOSTART_DEFAULT : KMS_AUTOSTART_DEFAULT;
  String kmsWsUriProp=isFake ? FAKE_KMS_WS_URI_PROP : KMS_WS_URI_PROP;
  String kmsLogin=getProperty(kmsLoginProp);
  String kmsPasswd=getProperty(kmsPasswdProp);
  String kmsPem=getProperty(kmsPemProp);
  String wsUri;
  if (this.wsUri != null) {
    wsUri=this.wsUri;
  }
 else {
    wsUri=getProperty(kmsWsUriProp,this.wsUri);
  }
  isKmsRemote=!wsUri.contains(""String_Node_Str"") && !wsUri.contains(""String_Node_Str"") && !docker;
  if (isKmsRemote && kmsLogin == null && (kmsPem == null || kmsPasswd == null)) {
    String kmsAutoStart=getProperty(kmsAutostartProp,kmsAutostartDefaultProp);
    throw new RuntimeException(""String_Node_Str"" + kmsAutostartProp + ""String_Node_Str""+ kmsAutoStart+ ""String_Node_Str""+ kmsWsUriProp+ ""String_Node_Str""+ wsUri+ ""String_Node_Str""+ kmsLoginProp+ ""String_Node_Str""+ kmsLogin+ ""String_Node_Str""+ kmsPasswdProp+ ""String_Node_Str""+ kmsPasswd+ ""String_Node_Str""+ kmsPemProp+ ""String_Node_Str""+ kmsPem);
  }
  serverCommand=PropertiesManager.getProperty(KURENTO_SERVER_COMMAND_PROP,KURENTO_SERVER_COMMAND_DEFAULT);
  gstPlugins=PropertiesManager.getProperty(KURENTO_GST_PLUGINS_PROP,KURENTO_GST_PLUGINS_DEFAULT);
  try {
    workspace=Files.createTempDirectory(""String_Node_Str"").toString();
    lastWorkspace=workspace;
  }
 catch (  IOException e) {
    workspace=PropertiesManager.getProperty(KURENTO_WORKSPACE_PROP,KURENTO_WORKSPACE_DEFAULT);
    log.error(""String_Node_Str"",workspace,e);
  }
  debugOptions=PropertiesManager.getProperty(KURENTO_SERVER_DEBUG_PROP,KURENTO_SERVER_DEBUG_DEFAULT);
  if (!workspace.endsWith(""String_Node_Str"")) {
    workspace+=""String_Node_Str"";
  }
  log.debug(""String_Node_Str"",workspace);
  if (rabbitMqAddress != null) {
    log.info(""String_Node_Str"" + ""String_Node_Str"",rabbitMqAddress,serverCommand,gstPlugins,workspace);
  }
 else {
    if (docker) {
      log.info(""String_Node_Str"" + ""String_Node_Str"",serverCommand,gstPlugins,workspace);
    }
 else {
      log.info(""String_Node_Str"" + ""String_Node_Str"",wsUri,serverCommand,gstPlugins,workspace);
    }
    if (!docker && !isKmsRemote && !isFreePort(wsUri)) {
      throw new RuntimeException(""String_Node_Str"" + wsUri + ""String_Node_Str"");
    }
  }
  if (isKmsRemote) {
    String remoteKmsStr=wsUri.substring(wsUri.indexOf(""String_Node_Str"") + 2,wsUri.lastIndexOf(""String_Node_Str""));
    log.info(""String_Node_Str"",remoteKmsStr);
    remoteKms=new SshConnection(remoteKmsStr,kmsLogin,kmsPasswd,kmsPem);
    if (kmsPem != null) {
      remoteKms.setPem(kmsPem);
    }
    remoteKms.start();
    remoteKms.createTmpFolder();
  }
  createKurentoConf();
  if (isKmsRemote) {
    String[] filesToBeCopied={""String_Node_Str"",""String_Node_Str""};
    for (    String s : filesToBeCopied) {
      remoteKms.scp(workspace + s,remoteKms.getTmpFolder() + ""String_Node_Str"" + s);
    }
    remoteKms.runAndWaitCommand(""String_Node_Str"",""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"");
  }
  startKms(wsUri);
  waitForKurentoMediaServer(this.wsUri);
}"
10707,"@Override public void close(){
  if (driver != null) {
    try {
      log.info(""String_Node_Str"",id);
      driver.quit();
      driver=null;
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t.getClass(),t.getMessage());
    }
  }
  if (GridHandler.getInstance().useRemoteNodes()) {
    log.info(""String_Node_Str"",id);
    GridHandler.getInstance().stopGrid();
  }
  if (scope == BrowserScope.DOCKER) {
    downloadLogsForContainer(browserContainerName,id);
    downloadLogsForContainer(vncrecorderContainerName,id + ""String_Node_Str"");
    docker.stopAndRemoveContainers(hubContainerName,vncrecorderContainerName,browserContainerName);
    if (numBrowsers.decrementAndGet() == 0) {
      downloadLogsForContainer(hubContainerName,""String_Node_Str"");
      docker.stopAndRemoveContainers(hubContainerName);
    }
  }
}","@Override public void close(){
  if (driver != null) {
    try {
      log.info(""String_Node_Str"",id);
      driver.quit();
      driver=null;
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t.getClass(),t.getMessage());
    }
  }
  if (GridHandler.getInstance().useRemoteNodes()) {
    log.info(""String_Node_Str"",id);
    GridHandler.getInstance().stopGrid();
  }
  if (scope == BrowserScope.DOCKER) {
    downloadLogsForContainer(browserContainerName,id);
    downloadLogsForContainer(vncrecorderContainerName,id + ""String_Node_Str"");
    docker.stopAndRemoveContainers(vncrecorderContainerName,browserContainerName);
    if (numBrowsers.decrementAndGet() == 0) {
      downloadLogsForContainer(hubContainerName,""String_Node_Str"");
      docker.stopAndRemoveContainers(hubContainerName);
    }
  }
}"
10708,"private void createChromeBrowser(DesiredCapabilities capabilities) throws MalformedURLException {
  log.info(""String_Node_Str"");
  ChromeDriverManager.getInstance().setup();
  log.info(""String_Node_Str"");
  ChromeOptions options=new ChromeOptions();
  if (extensions != null && !extensions.isEmpty()) {
    for (    Map<String,String> extension : extensions) {
      InputStream is=getExtensionAsInputStream(extension.values().iterator().next());
      if (is != null) {
        try {
          File crx=File.createTempFile(extension.keySet().iterator().next(),""String_Node_Str"");
          FileUtils.copyInputStreamToFile(is,crx);
          options.addExtensions(crx);
        }
 catch (        Throwable t) {
          log.error(""String_Node_Str"",extension,t.getClass(),t.getMessage());
        }
      }
    }
  }
  if (enableScreenCapture) {
    options.addArguments(""String_Node_Str"");
    String windowTitle=TEST_SCREEN_SHARE_TITLE_DEFAULT;
    if (platform != null && (platform == Platform.WINDOWS || platform == Platform.XP || platform == Platform.VISTA || platform == Platform.WIN8 || platform == Platform.WIN8_1)) {
      windowTitle=TEST_SCREEN_SHARE_TITLE_DEFAULT_WIN;
    }
    options.addArguments(""String_Node_Str"" + getProperty(TEST_SCREEN_SHARE_TITLE_PROPERTY,windowTitle));
  }
 else {
    options.addArguments(""String_Node_Str"");
  }
  options.addArguments(""String_Node_Str"");
  if (protocol == Protocol.FILE) {
    options.addArguments(""String_Node_Str"");
  }
  if (!usePhysicalCam) {
    options.addArguments(""String_Node_Str"");
    if (video != null && isLocal()) {
      options.addArguments(""String_Node_Str"" + video);
    }
  }
  capabilities.setCapability(ChromeOptions.CAPABILITY,options);
  capabilities.setBrowserName(DesiredCapabilities.chrome().getBrowserName());
  createDriver(capabilities,options);
}","private void createChromeBrowser(DesiredCapabilities capabilities) throws MalformedURLException {
  log.info(""String_Node_Str"");
  ChromeDriverManager.getInstance().setup();
  log.info(""String_Node_Str"");
  ChromeOptions options=new ChromeOptions();
  if (extensions != null && !extensions.isEmpty()) {
    for (    Map<String,String> extension : extensions) {
      InputStream is=getExtensionAsInputStream(extension.values().iterator().next());
      if (is != null) {
        try {
          File crx=File.createTempFile(extension.keySet().iterator().next(),""String_Node_Str"");
          FileUtils.copyInputStreamToFile(is,crx);
          options.addExtensions(crx);
        }
 catch (        Throwable t) {
          log.error(""String_Node_Str"",extension,t.getClass(),t.getMessage());
        }
      }
    }
  }
  if (enableScreenCapture) {
    options.addArguments(""String_Node_Str"");
    String windowTitle=TEST_SCREEN_SHARE_TITLE_DEFAULT;
    if (platform != null && (platform == Platform.WINDOWS || platform == Platform.XP || platform == Platform.VISTA || platform == Platform.WIN8 || platform == Platform.WIN8_1)) {
      windowTitle=TEST_SCREEN_SHARE_TITLE_DEFAULT_WIN;
    }
    options.addArguments(""String_Node_Str"" + getProperty(TEST_SCREEN_SHARE_TITLE_PROPERTY,windowTitle));
  }
 else {
    options.addArguments(""String_Node_Str"");
  }
  options.addArguments(""String_Node_Str"");
  if (protocol == Protocol.FILE) {
    options.addArguments(""String_Node_Str"");
  }
  if (!usePhysicalCam) {
    options.addArguments(""String_Node_Str"");
    if (video != null && (isLocal() || isDocker())) {
      options.addArguments(""String_Node_Str"" + video);
    }
  }
  capabilities.setCapability(ChromeOptions.CAPABILITY,options);
  capabilities.setBrowserName(DesiredCapabilities.chrome().getBrowserName());
  createDriver(capabilities,options);
}"
10709,"public void mountDefaultFolders(CreateContainerCmd createContainerCmd){
  if (isRunningInContainer()) {
    createContainerCmd.withVolumesFrom(new VolumesFrom(getContainerId()));
  }
 else {
    String testFilesPath=KurentoServicesTestHelper.getTestFilesPath();
    Volume testFilesVolume=new Volume(testFilesPath);
    String workspacePath=Paths.get(KurentoServicesTestHelper.getTestDir()).toAbsolutePath().toString();
    Volume workspaceVolume=new Volume(workspacePath);
    createContainerCmd.withVolumes(testFilesVolume).withBinds(new Bind(testFilesPath,testFilesVolume,AccessMode.ro)).withVolumes(workspaceVolume).withBinds(new Bind(workspacePath,workspaceVolume,AccessMode.rw));
  }
}","public void mountDefaultFolders(CreateContainerCmd createContainerCmd){
  if (isRunningInContainer()) {
    createContainerCmd.withVolumesFrom(new VolumesFrom(getContainerId()));
  }
 else {
    String testFilesPath=KurentoServicesTestHelper.getTestFilesPath();
    Volume testFilesVolume=new Volume(testFilesPath);
    String workspacePath=Paths.get(KurentoServicesTestHelper.getTestDir()).toAbsolutePath().toString();
    Volume workspaceVolume=new Volume(workspacePath);
    createContainerCmd.withVolumes(testFilesVolume,workspaceVolume).withBinds(new Bind(testFilesPath,testFilesVolume,AccessMode.ro),new Bind(workspacePath,workspaceVolume,AccessMode.rw));
  }
}"
10710,"public static void configurePropertiesFromConfigFile(Path configFilePath) throws JsonSyntaxException, JsonIOException, IOException {
  Preconditions.checkNotNull(configFilePath,""String_Node_Str"");
  log.debug(""String_Node_Str"" + configFilePath + ""String_Node_Str""+ configFilePath.getClass().getCanonicalName()+ ""String_Node_Str"");
  JsonReader reader=new JsonReader(Files.newBufferedReader(configFilePath,StandardCharsets.UTF_8));
  reader.setLenient(true);
  JsonObject configFile=gson.fromJson(reader,JsonObject.class);
  traceConfigContent(configFile);
  PropertiesManager.setPropertyHolder(new ConfigFilePropertyHolder(configFile));
}","public static synchronized void configurePropertiesFromConfigFile(Path configFilePath) throws JsonSyntaxException, JsonIOException, IOException {
  if (lastLoadedconfigFilePath != null) {
    if (lastLoadedconfigFilePath.equals(configFilePath)) {
      log.info(""String_Node_Str"",configFilePath.toAbsolutePath());
    }
 else {
      log.warn(""String_Node_Str"" + ""String_Node_Str"",lastLoadedconfigFilePath,configFilePath);
    }
    return;
  }
  lastLoadedconfigFilePath=configFilePath;
  Preconditions.checkNotNull(configFilePath,""String_Node_Str"");
  log.debug(""String_Node_Str"" + configFilePath + ""String_Node_Str""+ configFilePath.getClass().getCanonicalName()+ ""String_Node_Str"");
  JsonReader reader=new JsonReader(Files.newBufferedReader(configFilePath,StandardCharsets.UTF_8));
  reader.setLenient(true);
  JsonObject configFile=gson.fromJson(reader,JsonObject.class);
  traceConfigContent(configFile);
  PropertiesManager.setPropertyHolder(new ConfigFilePropertyHolder(configFile));
}"
10711,"@Parameters public static Collection<Object[]> data(){
  return Arrays.asList(new Object[][]{{}});
}","@Parameters public static Collection<Object[]> data(){
  return TestScenario.from(""String_Node_Str"");
}"
10712,"public static Properties of(Object... params){
  if (params.length % 2 != 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + params);
  }
  Properties p=new Properties();
  for (int i=0; i < params.length; i++) {
    if (!(params[i] instanceof String)) {
      throw new IllegalArgumentException(""String_Node_Str"" + i + ""String_Node_Str""+ params[i]);
    }
    p.add((String)params[i],params[i + 1]);
  }
  return p;
}","public static Properties of(Object... params){
  if (params.length % 2 != 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + params);
  }
  Properties p=new Properties();
  for (int i=0; i < params.length; i+=2) {
    if (!(params[i] instanceof String)) {
      throw new IllegalArgumentException(""String_Node_Str"" + i + ""String_Node_Str""+ params[i]);
    }
    p.add((String)params[i],params[i + 1]);
  }
  return p;
}"
10713,"@Override public void close(){
  if (driver != null) {
    try {
      log.info(""String_Node_Str"",id);
      driver.quit();
      driver=null;
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t.getClass(),t.getMessage());
    }
  }
  if (GridHandler.getInstance().useRemoteNodes()) {
    log.info(""String_Node_Str"",id);
    GridHandler.getInstance().stopGrid();
  }
  if (docker != null) {
    String hubContainerName=getProperty(DOCKER_HUB_CONTAINER_NAME_PROPERTY,DOCKER_HUB_CONTAINER_NAME_DEFAULT);
    docker.stopAndRemoveContainers(hubContainerName,getId());
  }
}","@Override public void close(){
  if (driver != null) {
    try {
      log.info(""String_Node_Str"",id);
      driver.quit();
      driver=null;
    }
 catch (    Throwable t) {
      log.warn(""String_Node_Str"",t.getClass(),t.getMessage());
    }
  }
  if (GridHandler.getInstance().useRemoteNodes()) {
    log.info(""String_Node_Str"",id);
    GridHandler.getInstance().stopGrid();
  }
  if (scope == BrowserScope.DOCKER) {
    String hubContainerName=getProperty(DOCKER_HUB_CONTAINER_NAME_PROPERTY,DOCKER_HUB_CONTAINER_NAME_DEFAULT);
    docker.stopAndRemoveContainers(hubContainerName,getId());
  }
}"
10714,"public Collection<Object[]> getTestScenario(){
  Collection<Object[]> tests=new ArrayList<>();
  for (  Map<String,BrowserInstance> browser : executions) {
    TestScenario test=new TestScenario();
    for (    String key : browser.keySet()) {
      Browser browserClient=null;
      BrowserInstance instance=browser.get(key);
      Browser.Builder builder=new Browser.Builder().browserType(instance.getBrowserType());
      if (instance.getVideo() != null) {
        builder=builder.video(instance.getVideo());
      }
      if (instance.getInstances() > 0) {
        builder=builder.numInstances(instance.getInstances());
      }
      if (instance.getBrowserPerInstance() > 0) {
        builder=builder.browserPerInstance(instance.getBrowserPerInstance());
      }
      if (instance.getNode() != null) {
        builder=builder.node(instance.getNode());
      }
      if (instance.getLogin() != null) {
        builder=builder.login(instance.getLogin());
      }
      if (instance.getPasswd() != null) {
        builder=builder.passwd(instance.getPasswd());
      }
      if (instance.getKey() != null) {
        builder=builder.pem(instance.getKey());
      }
      if (instance.getPort() > 0) {
        builder=builder.serverPort(instance.getPort());
      }
      if (instance.isEnableScreenCapture()) {
        builder=builder.enableScreenCapture();
      }
      if (instance.getProtocol() != null) {
        builder=builder.protocol(Protocol.valueOf(instance.getProtocol().toUpperCase()));
      }
      if (instance.getPath() != null) {
        builder=builder.webPageType(WebPageType.value2WebPageType(instance.getPath()));
      }
      if (instance.getHost() != null) {
        builder=builder.host(instance.getHost());
      }
      if (instance.getParentTunnel() != null) {
        builder=builder.parentTunnel(instance.getParentTunnel());
      }
      if (instance.isAvoidProxy()) {
        builder.avoidProxy();
      }
      if (instance.getExtensions() != null) {
        builder=builder.extensions(instance.getExtensions());
      }
      if (instance.getSaucelabsUser() != null) {
        System.setProperty(SAUCELAB_USER_PROPERTY,instance.getSaucelabsUser());
      }
      if (instance.getSaucelabsKey() != null) {
        System.setProperty(SAUCELAB_KEY_PROPERTY,instance.getSaucelabsKey());
      }
      if (instance.getSeleniumVersion() != null) {
        System.setProperty(SELENIUM_VERSION,instance.getSeleniumVersion());
      }
      if (instance.isLocal()) {
        browserClient=builder.scope(BrowserScope.LOCAL).build();
      }
 else       if (instance.isRemote()) {
        browserClient=builder.scope(BrowserScope.REMOTE).build();
      }
 else       if (instance.isSauceLabs()) {
        if (instance.getVersion() == null || instance.getPlatformType() == null) {
          throw new RuntimeException(""String_Node_Str"");
        }
        browserClient=builder.scope(BrowserScope.SAUCELABS).browserVersion(instance.getVersion()).platform(instance.getPlatformType()).build();
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + instance.getScope());
      }
      test.addBrowser(key,browserClient);
    }
    tests.add(new Object[]{test});
  }
  return tests;
}","public Collection<Object[]> getTestScenario(){
  Collection<Object[]> tests=new ArrayList<>();
  for (  Map<String,BrowserInstance> browser : executions) {
    TestScenario test=new TestScenario();
    for (    String key : browser.keySet()) {
      Browser browserClient=null;
      BrowserInstance instance=browser.get(key);
      Browser.Builder builder=new Browser.Builder().browserType(instance.getBrowserType());
      if (instance.getVideo() != null) {
        builder=builder.video(instance.getVideo());
      }
      if (instance.getInstances() > 0) {
        builder=builder.numInstances(instance.getInstances());
      }
      if (instance.getBrowserPerInstance() > 0) {
        builder=builder.browserPerInstance(instance.getBrowserPerInstance());
      }
      if (instance.getNode() != null) {
        builder=builder.node(instance.getNode());
      }
      if (instance.getLogin() != null) {
        builder=builder.login(instance.getLogin());
      }
      if (instance.getPasswd() != null) {
        builder=builder.passwd(instance.getPasswd());
      }
      if (instance.getKey() != null) {
        builder=builder.pem(instance.getKey());
      }
      if (instance.getPort() > 0) {
        builder=builder.serverPort(instance.getPort());
      }
      if (instance.isEnableScreenCapture()) {
        builder=builder.enableScreenCapture();
      }
      if (instance.getProtocol() != null) {
        builder=builder.protocol(Protocol.valueOf(instance.getProtocol().toUpperCase()));
      }
      if (instance.getPath() != null) {
        builder=builder.webPageType(WebPageType.value2WebPageType(instance.getPath()));
      }
      if (instance.getHost() != null) {
        builder=builder.host(instance.getHost());
      }
      if (instance.getParentTunnel() != null) {
        builder=builder.parentTunnel(instance.getParentTunnel());
      }
      if (instance.isAvoidProxy()) {
        builder.avoidProxy();
      }
      if (instance.getExtensions() != null) {
        builder=builder.extensions(instance.getExtensions());
      }
      if (instance.getSaucelabsUser() != null) {
        System.setProperty(SAUCELAB_USER_PROPERTY,instance.getSaucelabsUser());
      }
      if (instance.getSaucelabsKey() != null) {
        System.setProperty(SAUCELAB_KEY_PROPERTY,instance.getSaucelabsKey());
      }
      if (instance.getSeleniumVersion() != null) {
        System.setProperty(SELENIUM_VERSION,instance.getSeleniumVersion());
      }
      if (instance.isLocal()) {
        browserClient=builder.scope(BrowserScope.LOCAL).build();
      }
 else       if (instance.isRemote()) {
        browserClient=builder.scope(BrowserScope.REMOTE).build();
      }
 else       if (instance.isDocker()) {
        browserClient=builder.scope(BrowserScope.DOCKER).build();
      }
 else       if (instance.isSauceLabs()) {
        if (instance.getVersion() == null || instance.getPlatformType() == null) {
          throw new RuntimeException(""String_Node_Str"");
        }
        browserClient=builder.scope(BrowserScope.SAUCELABS).browserVersion(instance.getVersion()).platform(instance.getPlatformType()).build();
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + instance.getScope());
      }
      test.addBrowser(key,browserClient);
    }
    tests.add(new Object[]{test});
  }
  return tests;
}"
10715,"public static void loadConfigFile(String configFileName){
  try {
    String configFilePath=System.getProperty(CONFIG_FILE_PATH_PROPERTY);
    if (configFilePath == null) {
      configFilePath=System.getProperty(CONFIG_FILE_PATH_PROPERTY2);
    }
    if (configFilePath == null) {
      configFilePath=System.getProperty(CONFIG_FILE_PATH_PROPERTY3);
    }
    Path configFile=null;
    if (configFilePath != null) {
      configFile=Paths.get(configFilePath);
      if (!Files.exists(configFile)) {
        log.warn(""String_Node_Str"",CONFIG_FILE_PATH_PROPERTY,configFilePath,configFileName);
        configFile=ConfigFileFinder.searchConfigFileInDefaultPlaces(configFileName);
      }
 else {
        log.info(""String_Node_Str"",CONFIG_FILE_PATH_PROPERTY,configFilePath);
      }
    }
 else {
      configFile=ConfigFileFinder.searchConfigFileInDefaultPlaces(configFileName);
    }
    if (configFile != null && Files.exists(configFile)) {
      ConfigFilePropertyHolder.configurePropertiesFromConfigFile(configFile);
    }
 else {
      log.warn(""String_Node_Str"",configFileName);
    }
  }
 catch (  IOException e) {
    log.warn(""String_Node_Str"",e);
  }
}","public static void loadConfigFile(String configFileName){
  try {
    String property=CONFIG_FILE_PATH_PROPERTY;
    String configFilePath=System.getProperty(CONFIG_FILE_PATH_PROPERTY);
    if (configFilePath == null) {
      configFilePath=System.getProperty(CONFIG_FILE_PATH_PROPERTY2);
      property=CONFIG_FILE_PATH_PROPERTY2;
    }
    if (configFilePath == null) {
      configFilePath=System.getProperty(CONFIG_FILE_PATH_PROPERTY3);
      property=CONFIG_FILE_PATH_PROPERTY3;
    }
    Path configFile=null;
    if (configFilePath != null) {
      configFile=Paths.get(configFilePath);
      if (!Files.exists(configFile)) {
        log.warn(""String_Node_Str"",property,configFilePath,configFileName);
        configFile=ConfigFileFinder.searchConfigFileInDefaultPlaces(configFileName);
      }
 else {
        log.info(""String_Node_Str"",property,configFilePath);
      }
    }
 else {
      configFile=ConfigFileFinder.searchConfigFileInDefaultPlaces(configFileName);
    }
    if (configFile != null && Files.exists(configFile)) {
      ConfigFilePropertyHolder.configurePropertiesFromConfigFile(configFile);
    }
 else {
      log.warn(""String_Node_Str"",configFileName);
    }
  }
 catch (  IOException e) {
    log.warn(""String_Node_Str"",e);
  }
}"
10716,"public void start(boolean isFake) throws IOException {
  String kmsLoginProp=isFake ? FAKE_KMS_LOGIN_PROP : KURENTO_KMS_LOGIN_PROP;
  String kmsPasswdProp=isFake ? FAKE_KMS_PASSWD_PROP : KURENTO_KMS_PASSWD_PROP;
  String kmsPemProp=isFake ? FAKE_KMS_PEM_PROP : KURENTO_KMS_PASSWD_PROP;
  String kmsAutostartProp=isFake ? FAKE_KMS_AUTOSTART_PROP : KMS_AUTOSTART_PROP;
  String kmsAutostartDefaultProp=isFake ? FAKE_KMS_AUTOSTART_DEFAULT : KMS_AUTOSTART_DEFAULT;
  String kmsWsUri=isFake ? FAKE_KMS_WS_URI_PROP : KMS_WS_URI_PROP;
  String kmsLogin=getProperty(kmsLoginProp);
  String kmsPasswd=getProperty(kmsPasswdProp);
  String kmsPem=getProperty(kmsPemProp);
  String wsUri=getProperty(kmsWsUri,KMS_WS_URI_DEFAULT);
  isKmsRemote=!wsUri.contains(""String_Node_Str"") && !wsUri.contains(""String_Node_Str"");
  if (isKmsRemote && kmsLogin == null && (kmsPem == null || kmsPasswd == null)) {
    String kmsAutoStart=getProperty(kmsAutostartProp,kmsAutostartDefaultProp);
    throw new RuntimeException(""String_Node_Str"" + kmsAutostartProp + ""String_Node_Str""+ kmsAutoStart+ ""String_Node_Str""+ kmsWsUri+ ""String_Node_Str""+ wsUri+ ""String_Node_Str""+ kmsLoginProp+ ""String_Node_Str""+ kmsLogin+ ""String_Node_Str""+ kmsPasswdProp+ ""String_Node_Str""+ kmsPasswd+ ""String_Node_Str""+ kmsPemProp+ ""String_Node_Str""+ kmsPem);
  }
  serverCommand=PropertiesManager.getProperty(KURENTO_SERVER_COMMAND_PROP,KURENTO_SERVER_COMMAND_DEFAULT);
  gstPlugins=PropertiesManager.getProperty(KURENTO_GST_PLUGINS_PROP,KURENTO_GST_PLUGINS_DEFAULT);
  try {
    workspace=Files.createTempDirectory(""String_Node_Str"").toString();
    lastWorkspace=workspace;
  }
 catch (  IOException e) {
    workspace=PropertiesManager.getProperty(KURENTO_WORKSPACE_PROP,KURENTO_WORKSPACE_DEFAULT);
    log.error(""String_Node_Str"",workspace,e);
  }
  debugOptions=PropertiesManager.getProperty(KURENTO_SERVER_DEBUG_PROP,KURENTO_SERVER_DEBUG_DEFAULT);
  if (!workspace.endsWith(""String_Node_Str"")) {
    workspace+=""String_Node_Str"";
  }
  log.debug(""String_Node_Str"",workspace);
  if (rabbitMqAddress != null) {
    log.info(""String_Node_Str"" + ""String_Node_Str"",rabbitMqAddress,serverCommand,gstPlugins,workspace);
  }
 else {
    log.info(""String_Node_Str"" + ""String_Node_Str"",wsUri,serverCommand,gstPlugins,workspace);
    if (!isKmsRemote && !isFreePort(wsUri)) {
      throw new RuntimeException(""String_Node_Str"" + wsUri + ""String_Node_Str"");
    }
  }
  if (isKmsRemote) {
    String remoteKmsStr=wsUri.substring(wsUri.indexOf(""String_Node_Str"") + 2,wsUri.lastIndexOf(""String_Node_Str""));
    log.info(""String_Node_Str"",remoteKmsStr);
    remoteKms=new SshConnection(remoteKmsStr,kmsLogin,kmsPasswd,kmsPem);
    if (kmsPem != null) {
      remoteKms.setPem(kmsPem);
    }
    remoteKms.start();
    remoteKms.createTmpFolder();
  }
  createKurentoConf();
  if (isKmsRemote) {
    String[] filesToBeCopied={""String_Node_Str"",""String_Node_Str""};
    for (    String s : filesToBeCopied) {
      remoteKms.scp(workspace + s,remoteKms.getTmpFolder() + ""String_Node_Str"" + s);
    }
    remoteKms.runAndWaitCommand(""String_Node_Str"",""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"");
  }
  startKms(wsUri);
  waitForKurentoMediaServer(wsUri);
}","public void start(boolean isFake) throws IOException {
  String kmsLoginProp=isFake ? FAKE_KMS_LOGIN_PROP : KURENTO_KMS_LOGIN_PROP;
  String kmsPasswdProp=isFake ? FAKE_KMS_PASSWD_PROP : KURENTO_KMS_PASSWD_PROP;
  String kmsPemProp=isFake ? FAKE_KMS_PEM_PROP : KURENTO_KMS_PASSWD_PROP;
  String kmsAutostartProp=isFake ? FAKE_KMS_AUTOSTART_PROP : KMS_AUTOSTART_PROP;
  String kmsAutostartDefaultProp=isFake ? FAKE_KMS_AUTOSTART_DEFAULT : KMS_AUTOSTART_DEFAULT;
  String kmsWsUri=isFake ? FAKE_KMS_WS_URI_PROP : KMS_WS_URI_PROP;
  String kmsLogin=getProperty(kmsLoginProp);
  String kmsPasswd=getProperty(kmsPasswdProp);
  String kmsPem=getProperty(kmsPemProp);
  String wsUri;
  if (this.wsUri != null) {
    wsUri=this.wsUri;
  }
 else {
    wsUri=getProperty(kmsWsUri,this.wsUri);
  }
  isKmsRemote=!wsUri.contains(""String_Node_Str"") && !wsUri.contains(""String_Node_Str"");
  if (isKmsRemote && kmsLogin == null && (kmsPem == null || kmsPasswd == null)) {
    String kmsAutoStart=getProperty(kmsAutostartProp,kmsAutostartDefaultProp);
    throw new RuntimeException(""String_Node_Str"" + kmsAutostartProp + ""String_Node_Str""+ kmsAutoStart+ ""String_Node_Str""+ kmsWsUri+ ""String_Node_Str""+ wsUri+ ""String_Node_Str""+ kmsLoginProp+ ""String_Node_Str""+ kmsLogin+ ""String_Node_Str""+ kmsPasswdProp+ ""String_Node_Str""+ kmsPasswd+ ""String_Node_Str""+ kmsPemProp+ ""String_Node_Str""+ kmsPem);
  }
  serverCommand=PropertiesManager.getProperty(KURENTO_SERVER_COMMAND_PROP,KURENTO_SERVER_COMMAND_DEFAULT);
  gstPlugins=PropertiesManager.getProperty(KURENTO_GST_PLUGINS_PROP,KURENTO_GST_PLUGINS_DEFAULT);
  try {
    workspace=Files.createTempDirectory(""String_Node_Str"").toString();
    lastWorkspace=workspace;
  }
 catch (  IOException e) {
    workspace=PropertiesManager.getProperty(KURENTO_WORKSPACE_PROP,KURENTO_WORKSPACE_DEFAULT);
    log.error(""String_Node_Str"",workspace,e);
  }
  debugOptions=PropertiesManager.getProperty(KURENTO_SERVER_DEBUG_PROP,KURENTO_SERVER_DEBUG_DEFAULT);
  if (!workspace.endsWith(""String_Node_Str"")) {
    workspace+=""String_Node_Str"";
  }
  log.debug(""String_Node_Str"",workspace);
  if (rabbitMqAddress != null) {
    log.info(""String_Node_Str"" + ""String_Node_Str"",rabbitMqAddress,serverCommand,gstPlugins,workspace);
  }
 else {
    log.info(""String_Node_Str"" + ""String_Node_Str"",wsUri,serverCommand,gstPlugins,workspace);
    if (!isKmsRemote && !isFreePort(wsUri)) {
      throw new RuntimeException(""String_Node_Str"" + wsUri + ""String_Node_Str"");
    }
  }
  if (isKmsRemote) {
    String remoteKmsStr=wsUri.substring(wsUri.indexOf(""String_Node_Str"") + 2,wsUri.lastIndexOf(""String_Node_Str""));
    log.info(""String_Node_Str"",remoteKmsStr);
    remoteKms=new SshConnection(remoteKmsStr,kmsLogin,kmsPasswd,kmsPem);
    if (kmsPem != null) {
      remoteKms.setPem(kmsPem);
    }
    remoteKms.start();
    remoteKms.createTmpFolder();
  }
  createKurentoConf();
  if (isKmsRemote) {
    String[] filesToBeCopied={""String_Node_Str"",""String_Node_Str""};
    for (    String s : filesToBeCopied) {
      remoteKms.scp(workspace + s,remoteKms.getTmpFolder() + ""String_Node_Str"" + s);
    }
    remoteKms.runAndWaitCommand(""String_Node_Str"",""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"");
  }
  startKms(wsUri);
  waitForKurentoMediaServer(wsUri);
}"
10717,"@Test public void test() throws Exception {
  String id=""String_Node_Str"";
  RepositoryItem item;
  try {
    item=getRepository().findRepositoryItemById(id);
  }
 catch (  NoSuchElementException e) {
    item=getRepository().createRepositoryItem(id);
    uploadFile(new File(""String_Node_Str"" + id),item);
  }
  RepositoryHttpPlayer player=item.createRepositoryHttpPlayer();
  String url=player.getURL();
  player.setAutoTerminationTimeout(100000);
  RestTemplate httpClient=getRestTemplate();
{
    HttpHeaders requestHeaders=new HttpHeaders();
    MultiValueMap<String,String> postParameters=new LinkedMultiValueMap<String,String>();
    HttpEntity<MultiValueMap<String,String>> requestEntity=new HttpEntity<MultiValueMap<String,String>>(postParameters,requestHeaders);
    ResponseEntity<byte[]> response=httpClient.exchange(url,HttpMethod.GET,requestEntity,byte[].class);
    System.out.println(response);
    assertTrue(""String_Node_Str"",response.getHeaders().containsKey(""String_Node_Str""));
    assertTrue(""String_Node_Str"",response.getHeaders().get(""String_Node_Str"").contains(""String_Node_Str""));
  }
  long fileLength=0;
{
    HttpHeaders requestHeaders=new HttpHeaders();
    requestHeaders.set(""String_Node_Str"",""String_Node_Str"");
    MultiValueMap<String,String> postParameters=new LinkedMultiValueMap<String,String>();
    HttpEntity<MultiValueMap<String,String>> requestEntity=new HttpEntity<MultiValueMap<String,String>>(postParameters,requestHeaders);
    ResponseEntity<byte[]> response=httpClient.exchange(url,HttpMethod.GET,requestEntity,byte[].class);
    System.out.println(response);
    assertEquals(""String_Node_Str"",HttpStatus.PARTIAL_CONTENT,response.getStatusCode());
    fileLength=Long.parseLong(response.getHeaders().get(""String_Node_Str"").get(0));
  }
{
    HttpHeaders requestHeaders=new HttpHeaders();
    long firstByte=fileLength - 3000;
    long lastByte=fileLength - 1;
    long numBytes=lastByte - firstByte + 1;
    requestHeaders.set(""String_Node_Str"",""String_Node_Str"" + firstByte + ""String_Node_Str""+ lastByte);
    MultiValueMap<String,String> postParameters=new LinkedMultiValueMap<String,String>();
    HttpEntity<MultiValueMap<String,String>> requestEntity=new HttpEntity<MultiValueMap<String,String>>(postParameters,requestHeaders);
    ResponseEntity<byte[]> response=httpClient.exchange(url,HttpMethod.GET,requestEntity,byte[].class);
    System.out.println(response);
    assertEquals(""String_Node_Str"",response.getStatusCode(),HttpStatus.PARTIAL_CONTENT);
    long responseContentLength=Long.parseLong(response.getHeaders().get(""String_Node_Str"").get(0));
    assertEquals(""String_Node_Str"",numBytes,responseContentLength);
    assertEquals(""String_Node_Str"",responseContentLength,response.getBody().length);
  }
}","@Test public void test() throws Exception {
  String id=""String_Node_Str"";
  RepositoryItem item;
  try {
    item=getRepository().findRepositoryItemById(id);
  }
 catch (  NoSuchElementException e) {
    item=getRepository().createRepositoryItem(id);
    uploadFile(new File(""String_Node_Str"" + id),item);
  }
  RepositoryHttpPlayer player=item.createRepositoryHttpPlayer();
  String url=player.getURL();
  player.setAutoTerminationTimeout(10000);
  RestTemplate httpClient=getRestTemplate();
  acceptRanges(url,httpClient);
  log.info(""String_Node_Str"");
  long fileLength=rangeFrom0(url,httpClient);
  log.info(""String_Node_Str"");
  randomRange(url,httpClient,fileLength);
  log.info(""String_Node_Str"");
}"
10718,"@Ignore @Test public void testFileUploadWithSeqPUTs() throws Exception {
  RepositoryItem repositoryItem=getRepository().createRepositoryItem();
  String id=repositoryItem.getId();
  File fileToUpload=new File(""String_Node_Str"");
  uploadFileWithSeqPUTs(repositoryItem.createRepositoryHttpRecorder(),fileToUpload,repositoryItem);
  RepositoryItem newRepositoryItem=getRepository().findRepositoryItemById(id);
  File downloadedFile=new File(""String_Node_Str"" + id);
  downloadFromURL(newRepositoryItem.createRepositoryHttpPlayer().getURL(),downloadedFile);
  assertTrue(""String_Node_Str"",TestUtils.equalFiles(fileToUpload,downloadedFile));
}","@Test public void testFileUploadWithSeqPUTs() throws Exception {
  RepositoryItem repositoryItem=getRepository().createRepositoryItem();
  String id=repositoryItem.getId();
  File fileToUpload=new File(""String_Node_Str"");
  uploadFileWithSeqPUTs(repositoryItem.createRepositoryHttpRecorder(),fileToUpload,repositoryItem);
  RepositoryItem newRepositoryItem=getRepository().findRepositoryItemById(id);
  File downloadedFile=new File(""String_Node_Str"" + id);
  downloadFromURL(newRepositoryItem.createRepositoryHttpPlayer().getURL(),downloadedFile);
  assertTrue(""String_Node_Str"",TestUtils.equalFiles(fileToUpload,downloadedFile));
}"
10719,"@Override public RepositoryItem createRepositoryItem(String id){
  if (!gridFS.find(idQuery(id)).isEmpty()) {
    throw new DuplicateItemException(id);
  }
  GridFSInputFile dbFile=gridFS.createFile(id);
  dbFile.setId(id);
  return createRepositoryItem(dbFile);
}","@Override public RepositoryItem createRepositoryItem(String id){
  if (!gridFS.find(id).isEmpty()) {
    throw new DuplicateItemException(id);
  }
  GridFSInputFile dbFile=gridFS.createFile(id);
  dbFile.setId(id);
  return createRepositoryItem(dbFile);
}"
10720,"@Override public RepositoryItem findRepositoryItemById(String id){
  List<GridFSDBFile> dbFiles=gridFS.find(idQuery(id));
  if (dbFiles.size() > 0) {
    if (dbFiles.size() > 1) {
      log.warn(""String_Node_Str"" + ""String_Node_Str"");
    }
    return createRepositoryItem(dbFiles.get(0));
  }
  throw new NoSuchElementException(""String_Node_Str"" + id + ""String_Node_Str"");
}","@Override public RepositoryItem findRepositoryItemById(String id){
  List<GridFSDBFile> dbFiles=gridFS.find(id);
  if (dbFiles.size() > 0) {
    if (dbFiles.size() > 1) {
      log.warn(""String_Node_Str"" + ""String_Node_Str"");
    }
    return createRepositoryItem(dbFiles.get(0));
  }
  throw new NoSuchElementException(""String_Node_Str"" + id + ""String_Node_Str"");
}"
10721,"@Override public void remove(RepositoryItem item){
  httpManager.disposeHttpRepoItemElemByItemId(item,""String_Node_Str"");
  gridFS.remove(idQuery(item.getId()));
}","@Override public void remove(RepositoryItem item){
  httpManager.disposeHttpRepoItemElemByItemId(item,""String_Node_Str"");
  gridFS.remove(item.getId());
}"
10722,"protected void refreshAttributesOnClose(){
  BasicDBObject query=new BasicDBObject(""String_Node_Str"",new ObjectId(getId()));
  dbFile=((MongoRepository)repository).getGridFS().findOne(query);
  if (dbFile == null)   throw new KurentoException(""String_Node_Str"" + getId());
  state=State.STORED;
  attributes.setContentLength(dbFile.getLength());
}","protected void refreshAttributesOnClose(){
  dbFile=((MongoRepository)repository).getGridFS().findOne(getId());
  if (dbFile == null)   throw new KurentoException(""String_Node_Str"" + getId());
  state=State.STORED;
  attributes.setContentLength(dbFile.getLength());
}"
10723,"private void processResponseMessage(JsonObject messagetJsonObject,String internalSessionId){
  Response<JsonElement> response=JsonUtils.fromJsonResponse(messagetJsonObject,JsonElement.class);
  ServerSession session=sessionsManager.getByTransportId(internalSessionId);
  session.handleResponse(response);
}","private void processResponseMessage(JsonObject messagetJsonObject,String internalSessionId){
  Response<JsonElement> response=JsonUtils.fromJsonResponse(messagetJsonObject,JsonElement.class);
  ServerSession session=sessionsManager.getByTransportId(internalSessionId);
  if (session != null) {
    session.handleResponse(response);
  }
 else {
    log.debug(""String_Node_Str"",response.toString(),internalSessionId);
  }
}"
10724,"private void processPingMessage(ServerSessionFactory factory,Request<JsonElement> request,ResponseSender responseSender,String transportId) throws IOException {
  if (maxHeartbeats == 0 || maxHeartbeats > ++heartbeats) {
    long interval=-1;
    if (request.getParams() != null) {
      JsonObject element=(JsonObject)request.getParams();
      if (element.has(INTERVAL_PROPERTY)) {
        interval=element.get(INTERVAL_PROPERTY).getAsLong();
      }
    }
    pingWachdogManager.pingReceived(transportId,interval);
    String sessionId=request.getSessionId();
    JsonObject pongPayload=new JsonObject();
    pongPayload.add(PONG_PAYLOAD,new JsonPrimitive(PONG));
    responseSender.sendPingResponse(new Response<>(sessionId,request.getId(),pongPayload));
  }
}","private void processPingMessage(ServerSessionFactory factory,Request<JsonElement> request,ResponseSender responseSender,String transportId) throws IOException {
  if ((maxHeartbeats == 0) || (maxHeartbeats > ++heartbeats)) {
    long interval=-1;
    if (request.getParams() != null) {
      JsonObject element=(JsonObject)request.getParams();
      if (element.has(INTERVAL_PROPERTY)) {
        interval=element.get(INTERVAL_PROPERTY).getAsLong();
      }
    }
    pingWachdogManager.pingReceived(transportId,interval);
    String sessionId=request.getSessionId();
    JsonObject pongPayload=new JsonObject();
    pongPayload.add(PONG_PAYLOAD,new JsonPrimitive(PONG));
    responseSender.sendPingResponse(new Response<>(sessionId,request.getId(),pongPayload));
  }
}"
10725,"private void closeClient(){
  if (client != null) {
    log.debug(""String_Node_Str"",label);
    try {
      client.stop();
      client.destroy();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    client=null;
  }
 else {
    if (connectionListener != null) {
      connectionListener.disconnected();
    }
  }
  if (execService != null) {
    try {
      execService.shutdown();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    execService=null;
  }
  if (disconnectExecService != null) {
    try {
      disconnectExecService.shutdown();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    disconnectExecService=null;
  }
}","private void closeClient(){
  if (client != null) {
    log.debug(""String_Node_Str"",label);
    try {
      client.stop();
      client.destroy();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    client=null;
  }
  if (execService != null) {
    try {
      execService.shutdown();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    execService=null;
  }
  if (disconnectExecService != null) {
    try {
      disconnectExecService.shutdown();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    disconnectExecService=null;
  }
}"
10726,"public void closeWithReconnection() throws IOException {
  this.close();
}","protected void closeWithReconnection() throws IOException {
  this.close();
}"
10727,"private <P,R>Response<R> internalSendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  if (request.getMethod().equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
  }
  connectIfNecessary();
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  boolean isPing=false;
  String jsonMessage=request.toString();
  if (METHOD_PING.equals(request.getMethod())) {
    isPing=true;
    log.trace(""String_Node_Str"",label,jsonMessage.trim());
  }
 else {
    log.debug(""String_Node_Str"",label,jsonMessage.trim());
  }
  if (wsSession == null) {
    throw new IllegalStateException(""String_Node_Str"" + this.url + ""String_Node_Str"");
  }
synchronized (wsSession) {
    wsSession.getRemote().sendString(jsonMessage);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJson;
  try {
    responseJson=responseFuture.get(requestTimeout,TimeUnit.MILLISECONDS);
    if (isPing) {
      log.trace(""String_Node_Str"",label,responseJson.toString());
    }
 else {
      log.debug(""String_Node_Str"",label,responseJson.toString());
    }
    Response<R> response=MessageUtils.convertResponse(responseJson,resultClass);
    if (response.getSessionId() != null) {
      session.setSessionId(response.getSessionId());
    }
    return response;
  }
 catch (  InterruptedException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(label + ""String_Node_Str"" + requestTimeout+ ""String_Node_Str""+ request.getId(),e);
  }
}","private <P,R>Response<R> internalSendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  if (request.getMethod().equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
  }
  connectIfNecessary();
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  boolean isPing=false;
  String jsonMessage=request.toString();
  if (METHOD_PING.equals(request.getMethod())) {
    isPing=true;
    log.trace(""String_Node_Str"",label,jsonMessage.trim());
  }
 else {
    log.debug(""String_Node_Str"",label,jsonMessage.trim());
  }
  if (wsSession == null) {
    throw new IllegalStateException(""String_Node_Str"" + this.url + ""String_Node_Str"");
  }
synchronized (wsSession) {
    wsSession.getRemote().sendString(jsonMessage);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJson;
  try {
    responseJson=responseFuture.get(requestTimeout,TimeUnit.MILLISECONDS);
    if (isPing) {
      log.trace(""String_Node_Str"",label,responseJson.toString());
    }
 else {
      log.debug(""String_Node_Str"",label,responseJson.toString());
    }
    Response<R> response=MessageUtils.convertResponse(responseJson,resultClass);
    if (response.getSessionId() != null) {
      session.setSessionId(response.getSessionId());
    }
    return response;
  }
 catch (  InterruptedException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(label + ""String_Node_Str"" + requestTimeout+ ""String_Node_Str""+ jsonMessage.trim(),e);
  }
}"
10728,"@Override public void closeWithReconnection(){
  log.info(""String_Node_Str"",label);
  this.wsSession.close();
  this.closeClient();
}","@Override protected void closeWithReconnection(){
  log.info(""String_Node_Str"",label);
  this.wsSession.close();
  handleReconnectDisconnection(999,""String_Node_Str"");
}"
10729,"public void connectIfNecessary() throws IOException {
  lock.tryLockTimeout(""String_Node_Str"");
  try {
    if ((wsSession == null || !wsSession.isOpen()) && !clientClose) {
      log.debug(""String_Node_Str"",label,url);
      try {
        if (client == null) {
          client=new WebSocketClient(sslContextFactory);
          client.setConnectTimeout(this.connectionTimeout);
          client.start();
        }
 else {
          log.debug(""String_Node_Str"",label);
        }
        if (heartbeating) {
          enableHeartbeat();
        }
        WebSocketClientSocket socket=new WebSocketClientSocket();
        ClientUpgradeRequest request=new ClientUpgradeRequest();
        wsSession=client.connect(socket,new URI(url),request).get(this.connectionTimeout,TimeUnit.MILLISECONDS);
        wsSession.setIdleTimeout(this.idleTimeout);
      }
 catch (      TimeoutException e) {
        fireConnectionFailed();
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
catch (      Exception e) {
        fireConnectionFailed();
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + url,e);
      }
      try {
        if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
          fireConnectionFailed();
          this.closeClient();
          throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
        }
        if (session == null) {
          session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
          handlerManager.afterConnectionEstablished(session);
        }
 else {
          try {
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
            fireReconnectedSameServer();
          }
 catch (          JsonRpcErrorException e) {
            if (e.getCode() == 40007) {
              rsHelper.setSessionId(null);
              rsHelper.sendRequest(METHOD_RECONNECT,String.class);
              pendingRequests.closeAllPendingRequests();
              log.info(""String_Node_Str"",label,url);
              fireReconnectedNewServer();
            }
 else {
              log.warn(""String_Node_Str"",label,url,e);
            }
          }
        }
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
    log.debug(""String_Node_Str"",label,url);
  }
 catch (  TimeoutRuntimeException e) {
    log.error(""String_Node_Str"",url,e);
    this.closeClient();
  }
 finally {
    lock.unlock();
  }
}","public void connectIfNecessary() throws IOException {
  lock.tryLockTimeout(""String_Node_Str"");
  try {
    if ((wsSession == null || !wsSession.isOpen()) && !clientClose) {
      log.debug(""String_Node_Str"",label,url);
      try {
        if (client == null) {
          client=new WebSocketClient(sslContextFactory);
          client.setConnectTimeout(this.connectionTimeout);
          client.start();
        }
 else {
          log.debug(""String_Node_Str"",label);
        }
        if (heartbeating) {
          enableHeartbeat();
        }
        WebSocketClientSocket socket=new WebSocketClientSocket();
        ClientUpgradeRequest request=new ClientUpgradeRequest();
        wsSession=client.connect(socket,new URI(url),request).get(this.connectionTimeout,TimeUnit.MILLISECONDS);
        wsSession.setIdleTimeout(this.idleTimeout);
      }
 catch (      TimeoutException e) {
        fireConnectionFailed();
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
catch (      Exception e) {
        fireConnectionFailed();
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + url,e);
      }
      try {
        if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
          fireConnectionFailed();
          this.closeClient();
          throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
        }
        if (session == null) {
          session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
          handlerManager.afterConnectionEstablished(session);
        }
 else {
          try {
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
            fireReconnectedSameServer();
          }
 catch (          JsonRpcErrorException e) {
            if (e.getCode() == 40007) {
              rsHelper.setSessionId(null);
              rsHelper.sendRequest(METHOD_RECONNECT,String.class);
              pendingRequests.closeAllPendingRequests();
              log.info(""String_Node_Str"",label,url);
              fireReconnectedNewServer();
            }
 else {
              log.warn(""String_Node_Str"",label,url,e);
            }
          }
        }
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
 catch (  TimeoutRuntimeException e) {
    log.error(""String_Node_Str"",url,e);
    this.closeClient();
  }
 finally {
    lock.unlock();
  }
}"
10730,"private void fireConnectionFailed(){
  if (connectionListener != null) {
    execService.submit(new Runnable(){
      @Override public void run(){
        connectionListener.connectionFailed();
      }
    }
);
  }
}","private void fireConnectionFailed(){
  if (connectionListener != null) {
    createExecServiceIfNecessary();
    execService.submit(new Runnable(){
      @Override public void run(){
        connectionListener.connectionFailed();
      }
    }
);
  }
}"
10731,"@Test public void disconnectionEventTest() throws InterruptedException, IOException {
  KurentoMediaServerManager kms=KurentoServicesTestHelper.startKurentoMediaServer();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  String kmsUrl=kms.getLocalhostWsUrl();
  log.info(""String_Node_Str"" + kmsUrl);
  KurentoClient kurentoClient=KurentoClient.create(kmsUrl,new KurentoConnectionListener(){
    @Override public void disconnected(){
      log.info(""String_Node_Str"");
      disconnectedLatch.countDown();
    }
    @Override public void connectionFailed(){
    }
    @Override public void connected(){
    }
  }
);
  MediaPipeline pipeline=kurentoClient.createMediaPipeline();
  PlayerEndpoint player=new PlayerEndpoint.Builder(pipeline,""String_Node_Str"").build();
  HttpPostEndpoint httpEndpoint=new HttpPostEndpoint.Builder(pipeline).build();
  player.connect(httpEndpoint);
  try {
    kms.destroy();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + e);
  }
  log.debug(""String_Node_Str"");
  if (!disconnectedLatch.await(60,TimeUnit.SECONDS)) {
    fail(""String_Node_Str"");
  }
  log.debug(""String_Node_Str"");
}","@Test public void disconnectionEventTest() throws InterruptedException, IOException {
  KurentoMediaServerManager kms=KurentoServicesTestHelper.startKurentoMediaServer();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  String kmsUrl=kms.getLocalhostWsUrl();
  log.info(""String_Node_Str"" + kmsUrl);
  KurentoClient kurentoClient=KurentoClient.create(kmsUrl,new KurentoConnectionListener(){
    @Override public void disconnected(){
      log.info(""String_Node_Str"");
      disconnectedLatch.countDown();
    }
    @Override public void connectionFailed(){
    }
    @Override public void connected(){
    }
    @Override public void reconnected(    boolean sameServer){
    }
  }
);
  MediaPipeline pipeline=kurentoClient.createMediaPipeline();
  PlayerEndpoint player=new PlayerEndpoint.Builder(pipeline,""String_Node_Str"").build();
  HttpPostEndpoint httpEndpoint=new HttpPostEndpoint.Builder(pipeline).build();
  player.connect(httpEndpoint);
  try {
    kms.destroy();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + e);
  }
  log.debug(""String_Node_Str"");
  if (!disconnectedLatch.await(60,TimeUnit.SECONDS)) {
    fail(""String_Node_Str"");
  }
  log.debug(""String_Node_Str"");
}"
10732,"@Test public void serverDisconnectedTest() throws IOException, InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  JsonRpcClient client=new JsonRpcClientWebSocket(""String_Node_Str"" + getPort() + ""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void disconnected(){
      log.info(""String_Node_Str"");
      latch.countDown();
    }
    @Override public void connectionFailed(){
    }
    @Override public void connected(){
    }
  }
);
  client.sendRequest(""String_Node_Str"",String.class);
  context.close();
  if (!latch.await(20,TimeUnit.SECONDS)) {
    fail(""String_Node_Str"");
  }
  client.close();
}","@Test public void serverDisconnectedTest() throws IOException, InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  JsonRpcClient client=new JsonRpcClientWebSocket(""String_Node_Str"" + getPort() + ""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void disconnected(){
      log.info(""String_Node_Str"");
      latch.countDown();
    }
    @Override public void connectionFailed(){
    }
    @Override public void connected(){
    }
    @Override public void reconnected(    boolean sameServer){
    }
  }
);
  client.sendRequest(""String_Node_Str"",String.class);
  context.close();
  if (!latch.await(20,TimeUnit.SECONDS)) {
    fail(""String_Node_Str"");
  }
  client.close();
}"
10733,"@Test public void connectionTimeoutTest() throws IOException, InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  JsonRpcClient client=new JsonRpcClientWebSocket(""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void disconnected(){
    }
    @Override public void connected(){
    }
    @Override public void connectionFailed(){
      latch.countDown();
    }
  }
);
  try {
    client.sendRequest(""String_Node_Str"",String.class);
    if (!latch.await(20,TimeUnit.SECONDS)) {
      fail(""String_Node_Str"");
    }
  }
 catch (  KurentoException e) {
    assertTrue(e.getMessage().contains(""String_Node_Str""));
  }
  client.close();
}","@Test public void connectionTimeoutTest() throws IOException, InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  JsonRpcClient client=new JsonRpcClientWebSocket(""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void disconnected(){
    }
    @Override public void connected(){
    }
    @Override public void connectionFailed(){
      latch.countDown();
    }
    @Override public void reconnected(    boolean sameServer){
    }
  }
);
  try {
    client.sendRequest(""String_Node_Str"",String.class);
    if (!latch.await(20,TimeUnit.SECONDS)) {
      fail(""String_Node_Str"");
    }
  }
 catch (  KurentoException e) {
    assertTrue(e.getMessage().contains(""String_Node_Str""));
  }
  client.close();
}"
10734,"@Test public void connectedTest() throws IOException, InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  JsonRpcClient client=new JsonRpcClientWebSocket(""String_Node_Str"" + getPort() + ""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void disconnected(){
    }
    @Override public void connected(){
      log.info(""String_Node_Str"");
      latch.countDown();
    }
    @Override public void connectionFailed(){
    }
  }
);
  client.sendRequest(""String_Node_Str"",String.class);
  if (!latch.await(20,TimeUnit.SECONDS)) {
    fail(""String_Node_Str"");
  }
  client.close();
}","@Test public void connectedTest() throws IOException, InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  JsonRpcClient client=new JsonRpcClientWebSocket(""String_Node_Str"" + getPort() + ""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void disconnected(){
    }
    @Override public void connected(){
      log.info(""String_Node_Str"");
      latch.countDown();
    }
    @Override public void connectionFailed(){
    }
    @Override public void reconnected(    boolean sameServer){
    }
  }
);
  client.sendRequest(""String_Node_Str"",String.class);
  if (!latch.await(20,TimeUnit.SECONDS)) {
    fail(""String_Node_Str"");
  }
  client.close();
}"
10735,"@Test public void clientDisconnectedTest() throws IOException, InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  JsonRpcClient client=new JsonRpcClientWebSocket(""String_Node_Str"" + getPort() + ""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void disconnected(){
      log.info(""String_Node_Str"");
      latch.countDown();
    }
    @Override public void connected(){
    }
    @Override public void connectionFailed(){
    }
  }
);
  client.sendRequest(""String_Node_Str"",String.class);
  client.close();
  if (!latch.await(20,TimeUnit.SECONDS)) {
    fail(""String_Node_Str"");
  }
  client.close();
}","@Test public void clientDisconnectedTest() throws IOException, InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  JsonRpcClient client=new JsonRpcClientWebSocket(""String_Node_Str"" + getPort() + ""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void disconnected(){
      log.info(""String_Node_Str"");
      latch.countDown();
    }
    @Override public void connected(){
    }
    @Override public void connectionFailed(){
    }
    @Override public void reconnected(    boolean sameServer){
    }
  }
);
  client.sendRequest(""String_Node_Str"",String.class);
  client.close();
  if (!latch.await(20,TimeUnit.SECONDS)) {
    fail(""String_Node_Str"");
  }
  client.close();
}"
10736,"@Test public void communicationFailureDisconnectionTest() throws IOException, InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  JsonRpcClient client=new JsonRpcClientWebSocket(""String_Node_Str"" + getPort() + ""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void disconnected(){
      System.out.println(""String_Node_Str"");
      latch.countDown();
    }
    @Override public void connected(){
    }
    @Override public void connectionFailed(){
    }
  }
);
  client.sendRequest(""String_Node_Str"",String.class);
  JsonRpcClientWebSocket webSocketClient=(JsonRpcClientWebSocket)client;
  webSocketClient.closeNativeSession();
  if (latch.await(20,TimeUnit.SECONDS)) {
    fail(""String_Node_Str"" + ""String_Node_Str"");
  }
  client.close();
}","@Test public void communicationFailureDisconnectionTest() throws IOException, InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  JsonRpcClient client=new JsonRpcClientWebSocket(""String_Node_Str"" + getPort() + ""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void disconnected(){
      System.out.println(""String_Node_Str"");
      latch.countDown();
    }
    @Override public void connected(){
    }
    @Override public void connectionFailed(){
    }
    @Override public void reconnected(    boolean sameServer){
    }
  }
);
  client.sendRequest(""String_Node_Str"",String.class);
  JsonRpcClientWebSocket webSocketClient=(JsonRpcClientWebSocket)client;
  webSocketClient.closeNativeSession();
  if (latch.await(20,TimeUnit.SECONDS)) {
    fail(""String_Node_Str"" + ""String_Node_Str"");
  }
  client.close();
}"
10737,"@Test public void test() throws IOException, InterruptedException {
  log.info(""String_Node_Str"");
  JsonRpcClient client=createJsonRpcClient(""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void connected(){
    }
    @Override public void connectionFailed(){
      System.out.println(""String_Node_Str"");
    }
    @Override public void disconnected(){
      System.out.println(""String_Node_Str"");
    }
  }
);
  client.setHeartbeatInterval(500);
  client.enableHeartbeat();
  String result=client.sendRequest(""String_Node_Str"",""String_Node_Str"",String.class);
  log.info(""String_Node_Str"" + result);
  Assert.assertEquals(result,""String_Node_Str"");
  Thread.sleep(20000);
  log.info(""String_Node_Str"");
  client.disableHeartbeat();
  Thread.sleep(30000);
  log.info(""String_Node_Str"");
  client.enableHeartbeat();
  Thread.sleep(30000);
  log.info(""String_Node_Str"");
}","@Test public void test() throws IOException, InterruptedException {
  log.info(""String_Node_Str"");
  JsonRpcClient client=createJsonRpcClient(""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void connected(){
    }
    @Override public void connectionFailed(){
      System.out.println(""String_Node_Str"");
    }
    @Override public void disconnected(){
      System.out.println(""String_Node_Str"");
    }
    @Override public void reconnected(    boolean sameServer){
    }
  }
);
  client.setHeartbeatInterval(500);
  client.enableHeartbeat();
  String result=client.sendRequest(""String_Node_Str"",""String_Node_Str"",String.class);
  log.info(""String_Node_Str"" + result);
  Assert.assertEquals(result,""String_Node_Str"");
  Thread.sleep(20000);
  log.info(""String_Node_Str"");
  client.disableHeartbeat();
  Thread.sleep(30000);
  log.info(""String_Node_Str"");
  client.enableHeartbeat();
  Thread.sleep(30000);
  log.info(""String_Node_Str"");
}"
10738,"protected void handleReconnectDisconnection(final int statusCode,final String closeReason){
  if (!clientClose) {
    reconnecting=true;
    if (execService == null || execService.isShutdown() || execService.isTerminated()) {
      execService=Executors.newFixedThreadPool(10,threadFactory);
    }
    execService.execute(new Runnable(){
      @Override public void run(){
        try {
          connectIfNecessary();
          reconnecting=false;
        }
 catch (        KurentoException e) {
          pendingRequests.closeAllPendingRequests();
          handlerManager.afterConnectionClosed(session,closeReason);
          log.debug(""String_Node_Str"",label,closeReason);
          wsSession=null;
          if (connectionListener != null) {
            connectionListener.disconnected();
          }
        }
catch (        IOException e) {
          log.warn(""String_Node_Str"",label,url,e);
        }
      }
    }
);
  }
 else {
    pendingRequests.closeAllPendingRequests();
    handlerManager.afterConnectionClosed(session,closeReason);
    if (connectionListener != null) {
      connectionListener.disconnected();
    }
  }
}","protected void handleReconnectDisconnection(final int statusCode,final String closeReason){
  if (!clientClose) {
    reconnecting=true;
    createExecServiceIfNecessary();
    execService.execute(new Runnable(){
      @Override public void run(){
        try {
          connectIfNecessary();
          reconnecting=false;
        }
 catch (        KurentoException e) {
          pendingRequests.closeAllPendingRequests();
          handlerManager.afterConnectionClosed(session,closeReason);
          log.debug(""String_Node_Str"",label,closeReason);
          wsSession=null;
          if (connectionListener != null) {
            connectionListener.disconnected();
          }
        }
catch (        IOException e) {
          log.warn(""String_Node_Str"",label,url,e);
        }
      }
    }
);
  }
 else {
    pendingRequests.closeAllPendingRequests();
    handlerManager.afterConnectionClosed(session,closeReason);
    if (connectionListener != null) {
      connectionListener.disconnected();
    }
  }
}"
10739,"private void handleRequestFromServer(final JsonObject message){
  execService.submit(new Runnable(){
    @Override public void run(){
      try {
        handlerManager.handleRequest(session,fromJsonRequest(message,JsonElement.class),rs);
      }
 catch (      IOException e) {
        log.warn(""String_Node_Str"",label,message,e);
      }
    }
  }
);
}","private void handleRequestFromServer(final JsonObject message){
  createExecServiceIfNecessary();
  execService.submit(new Runnable(){
    @Override public void run(){
      try {
        handlerManager.handleRequest(session,fromJsonRequest(message,JsonElement.class),rs);
      }
 catch (      IOException e) {
        log.warn(""String_Node_Str"",label,message,e);
      }
    }
  }
);
}"
10740,"private void createKurentoConf(boolean isKmsRemote){
  Configuration cfg=new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);
  Map<String,Object> data=new HashMap<String,Object>();
  if (rabbitMqAddress != null) {
    data.put(""String_Node_Str"",""String_Node_Str"");
    data.put(""String_Node_Str"",rabbitMqAddress.getHost());
    data.put(""String_Node_Str"",String.valueOf(rabbitMqAddress.getPort()));
  }
 else {
    URI wsAsUri;
    try {
      wsAsUri=new URI(wsUri);
      int port=wsAsUri.getPort();
      String path=wsAsUri.getPath();
      data.put(""String_Node_Str"",""String_Node_Str"");
      data.put(""String_Node_Str"",String.valueOf(port));
      data.put(""String_Node_Str"",path.substring(1));
      data.put(""String_Node_Str"",registrarUri);
    }
 catch (    URISyntaxException e) {
      throw new KurentoException(""String_Node_Str"" + wsUri);
    }
  }
  data.put(""String_Node_Str"",gstPlugins);
  data.put(""String_Node_Str"",debugOptions);
  data.put(""String_Node_Str"",serverCommand);
  if (isKmsRemote) {
    data.put(""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"");
  }
 else {
    data.put(""String_Node_Str"",workspace);
  }
  data.put(""String_Node_Str"",String.valueOf(httpPort));
  cfg.setClassForTemplateLoading(KurentoMediaServerManager.class,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  Shell.runAndWait(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"");
}","private void createKurentoConf(boolean isKmsRemote){
  Configuration cfg=new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);
  Map<String,Object> data=new HashMap<String,Object>();
  if (rabbitMqAddress != null) {
    data.put(""String_Node_Str"",""String_Node_Str"");
    data.put(""String_Node_Str"",rabbitMqAddress.getHost());
    data.put(""String_Node_Str"",String.valueOf(rabbitMqAddress.getPort()));
  }
 else {
    URI wsAsUri;
    try {
      wsAsUri=new URI(wsUri);
      int port=wsAsUri.getPort();
      String path=wsAsUri.getPath();
      data.put(""String_Node_Str"",""String_Node_Str"");
      data.put(""String_Node_Str"",String.valueOf(port));
      data.put(""String_Node_Str"",path.substring(1));
      data.put(""String_Node_Str"",registrarUri);
      data.put(""String_Node_Str"",registrarLocalAddress);
    }
 catch (    URISyntaxException e) {
      throw new KurentoException(""String_Node_Str"" + wsUri);
    }
  }
  data.put(""String_Node_Str"",gstPlugins);
  data.put(""String_Node_Str"",debugOptions);
  data.put(""String_Node_Str"",serverCommand);
  if (isKmsRemote) {
    data.put(""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"");
  }
 else {
    data.put(""String_Node_Str"",workspace);
  }
  data.put(""String_Node_Str"",String.valueOf(httpPort));
  cfg.setClassForTemplateLoading(KurentoMediaServerManager.class,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  Shell.runAndWait(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"");
}"
10741,"public void start() throws IOException {
  String kmsLogin=getProperty(KURENTO_KMS_LOGIN_PROP);
  String kmsPasswd=getProperty(KURENTO_KMS_PASSWD_PROP);
  String kmsPem=getProperty(KURENTO_KMS_PEM_PROP);
  boolean isKmsRemote=!wsUri.contains(""String_Node_Str"") && !wsUri.contains(""String_Node_Str"");
  if (isKmsRemote && kmsLogin == null && (kmsPem == null || kmsPasswd == null)) {
    String kmsAutoStart=getProperty(KMS_AUTOSTART_PROP,KMS_AUTOSTART_DEFAULT);
    throw new RuntimeException(""String_Node_Str"" + KMS_AUTOSTART_PROP + ""String_Node_Str""+ kmsAutoStart+ ""String_Node_Str""+ KMS_WS_URI_PROP+ ""String_Node_Str""+ wsUri+ ""String_Node_Str""+ KURENTO_KMS_LOGIN_PROP+ ""String_Node_Str""+ kmsLogin+ ""String_Node_Str""+ KURENTO_KMS_PASSWD_PROP+ ""String_Node_Str""+ kmsPasswd+ ""String_Node_Str""+ KURENTO_KMS_PEM_PROP+ ""String_Node_Str""+ kmsPem);
  }
  serverCommand=PropertiesManager.getProperty(KURENTO_SERVER_COMMAND_PROP,KURENTO_SERVER_COMMAND_DEFAULT);
  gstPlugins=PropertiesManager.getProperty(KURENTO_GST_PLUGINS_PROP,KURENTO_GST_PLUGINS_DEFAULT);
  try {
    workspace=Files.createTempDirectory(""String_Node_Str"").toString();
    lastWorkspace=workspace;
  }
 catch (  IOException e) {
    workspace=PropertiesManager.getProperty(KURENTO_WORKSPACE_PROP,KURENTO_WORKSPACE_DEFAULT);
    log.error(""String_Node_Str"",workspace,e);
  }
  debugOptions=PropertiesManager.getProperty(KURENTO_SERVER_DEBUG_PROP,KURENTO_SERVER_DEBUG_DEFAULT);
  if (!workspace.endsWith(""String_Node_Str"")) {
    workspace+=""String_Node_Str"";
  }
  log.debug(""String_Node_Str"",workspace);
  if (rabbitMqAddress != null) {
    log.info(""String_Node_Str"" + ""String_Node_Str"",rabbitMqAddress,serverCommand,gstPlugins,workspace);
  }
 else {
    log.info(""String_Node_Str"" + ""String_Node_Str"",wsUri,serverCommand,gstPlugins,workspace);
    if (!isFreePort(wsUri)) {
      throw new RuntimeException(""String_Node_Str"" + wsUri + ""String_Node_Str"");
    }
  }
  if (isKmsRemote) {
    String remoteKmsStr=wsUri.substring(wsUri.indexOf(""String_Node_Str"") + 2,wsUri.lastIndexOf(""String_Node_Str""));
    log.info(""String_Node_Str"",remoteKmsStr);
    remoteKms=new SshConnection(remoteKmsStr,kmsLogin,kmsPasswd,kmsPem);
    if (kmsPem != null) {
      remoteKms.setPem(kmsPem);
    }
    remoteKms.start();
    remoteKms.createTmpFolder();
  }
  createKurentoConf(isKmsRemote);
  if (isKmsRemote) {
    String[] filesToBeCopied={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    for (    String s : filesToBeCopied) {
      remoteKms.scp(workspace + s,remoteKms.getTmpFolder() + ""String_Node_Str"" + s);
    }
    remoteKms.runAndWaitCommand(""String_Node_Str"",""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"");
  }
  if (testDir != null) {
    File logFile=new File(testDir + testClassName,testMethodName + ""String_Node_Str"");
    KurentoServicesTestHelper.setServerLogFilePath(logFile);
    log.debug(""String_Node_Str"",logFile.getAbsolutePath());
    if (isKmsRemote) {
      remoteKms.runAndWaitCommand(""String_Node_Str"",""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"" + ""String_Node_Str""+ remoteKms.getTmpFolder()+ ""String_Node_Str"");
    }
 else {
      Shell.runAndWait(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"" + logFile.getAbsolutePath()+ ""String_Node_Str"");
    }
  }
 else {
    if (isKmsRemote) {
      remoteKms.runAndWaitCommand(""String_Node_Str"",""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      Shell.run(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"");
    }
  }
  waitForKurentoMediaServer(wsUri);
}","public void start() throws IOException {
  String kmsLogin=getProperty(KURENTO_KMS_LOGIN_PROP);
  String kmsPasswd=getProperty(KURENTO_KMS_PASSWD_PROP);
  String kmsPem=getProperty(KURENTO_KMS_PEM_PROP);
  isKmsRemote=!wsUri.contains(""String_Node_Str"") && !wsUri.contains(""String_Node_Str"");
  if (isKmsRemote && kmsLogin == null && (kmsPem == null || kmsPasswd == null)) {
    String kmsAutoStart=getProperty(KMS_AUTOSTART_PROP,KMS_AUTOSTART_DEFAULT);
    throw new RuntimeException(""String_Node_Str"" + KMS_AUTOSTART_PROP + ""String_Node_Str""+ kmsAutoStart+ ""String_Node_Str""+ KMS_WS_URI_PROP+ ""String_Node_Str""+ wsUri+ ""String_Node_Str""+ KURENTO_KMS_LOGIN_PROP+ ""String_Node_Str""+ kmsLogin+ ""String_Node_Str""+ KURENTO_KMS_PASSWD_PROP+ ""String_Node_Str""+ kmsPasswd+ ""String_Node_Str""+ KURENTO_KMS_PEM_PROP+ ""String_Node_Str""+ kmsPem);
  }
  serverCommand=PropertiesManager.getProperty(KURENTO_SERVER_COMMAND_PROP,KURENTO_SERVER_COMMAND_DEFAULT);
  gstPlugins=PropertiesManager.getProperty(KURENTO_GST_PLUGINS_PROP,KURENTO_GST_PLUGINS_DEFAULT);
  try {
    workspace=Files.createTempDirectory(""String_Node_Str"").toString();
    lastWorkspace=workspace;
  }
 catch (  IOException e) {
    workspace=PropertiesManager.getProperty(KURENTO_WORKSPACE_PROP,KURENTO_WORKSPACE_DEFAULT);
    log.error(""String_Node_Str"",workspace,e);
  }
  debugOptions=PropertiesManager.getProperty(KURENTO_SERVER_DEBUG_PROP,KURENTO_SERVER_DEBUG_DEFAULT);
  if (!workspace.endsWith(""String_Node_Str"")) {
    workspace+=""String_Node_Str"";
  }
  log.debug(""String_Node_Str"",workspace);
  if (rabbitMqAddress != null) {
    log.info(""String_Node_Str"" + ""String_Node_Str"",rabbitMqAddress,serverCommand,gstPlugins,workspace);
  }
 else {
    log.info(""String_Node_Str"" + ""String_Node_Str"",wsUri,serverCommand,gstPlugins,workspace);
    if (!isKmsRemote && !isFreePort(wsUri)) {
      throw new RuntimeException(""String_Node_Str"" + wsUri + ""String_Node_Str"");
    }
  }
  if (isKmsRemote) {
    String remoteKmsStr=wsUri.substring(wsUri.indexOf(""String_Node_Str"") + 2,wsUri.lastIndexOf(""String_Node_Str""));
    log.info(""String_Node_Str"",remoteKmsStr);
    remoteKms=new SshConnection(remoteKmsStr,kmsLogin,kmsPasswd,kmsPem);
    if (kmsPem != null) {
      remoteKms.setPem(kmsPem);
    }
    remoteKms.start();
    remoteKms.createTmpFolder();
  }
  createKurentoConf(isKmsRemote);
  if (isKmsRemote) {
    String[] filesToBeCopied={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    for (    String s : filesToBeCopied) {
      remoteKms.scp(workspace + s,remoteKms.getTmpFolder() + ""String_Node_Str"" + s);
    }
    remoteKms.runAndWaitCommand(""String_Node_Str"",""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"");
  }
  startKms();
  waitForKurentoMediaServer(wsUri);
}"
10742,"public void destroy() throws IOException {
  int numKmsProcesses=0;
  long timeout=System.currentTimeMillis() + 5000;
  do {
    if (System.currentTimeMillis() > timeout) {
      break;
    }
    kmsSigTerm();
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    numKmsProcesses=countKmsProcesses();
  }
 while (numKmsProcesses > 0);
  if (numKmsProcesses > 0) {
    kmsSigKill();
  }
  if (remoteKms != null) {
    SshConnection kms=KurentoMediaServerManager.remoteKms;
    String targetFile=KurentoServicesTestHelper.getServerLogFile().getAbsolutePath();
    String origFile=kms.getTmpFolder() + ""String_Node_Str"";
    KurentoMediaServerManager.remoteKms.getFile(targetFile,origFile);
    remoteKms.stop();
  }
}","public void destroy() throws IOException {
  int numKmsProcesses=0;
  long timeout=System.currentTimeMillis() + 5000;
  do {
    if (System.currentTimeMillis() > timeout) {
      break;
    }
    kmsSigTerm();
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    numKmsProcesses=countKmsProcesses();
  }
 while (numKmsProcesses > 0);
  if (numKmsProcesses > 0) {
    kmsSigKill();
  }
  if (remoteKms != null) {
    SshConnection kms=KurentoMediaServerManager.remoteKms;
    File serverLogFile=KurentoServicesTestHelper.getServerLogFile();
    if (serverLogFile != null) {
      String targetFile=serverLogFile.getAbsolutePath();
      String origFile=kms.getTmpFolder() + ""String_Node_Str"";
      KurentoMediaServerManager.remoteKms.getFile(targetFile,origFile);
    }
    remoteKms.stop();
  }
}"
10743,"public static boolean ping(final String ipAddress,int timeout){
  final CountDownLatch latch=new CountDownLatch(1);
  Thread t=new Thread(){
    public void run(){
      try {
        String[] command={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ipAddress};
        Process p=new ProcessBuilder(command).redirectErrorStream(true).start();
        CharStreams.toString(new InputStreamReader(p.getInputStream(),""String_Node_Str""));
        latch.countDown();
      }
 catch (      Exception e) {
      }
    }
  }
;
  t.setDaemon(true);
  t.start();
  boolean ping=false;
  try {
    ping=latch.await(timeout,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    log.error(""String_Node_Str"",ipAddress,e.getClass());
  }
  if (!ping) {
    t.interrupt();
  }
  return ping;
}","public static boolean ping(final String ipAddress,int timeout){
  final CountDownLatch latch=new CountDownLatch(1);
  Thread t=new Thread(){
    @Override public void run(){
      try {
        String[] command={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ipAddress};
        Process p=new ProcessBuilder(command).redirectErrorStream(true).start();
        CharStreams.toString(new InputStreamReader(p.getInputStream(),""String_Node_Str""));
        latch.countDown();
      }
 catch (      Exception e) {
      }
    }
  }
;
  t.setDaemon(true);
  t.start();
  boolean ping=false;
  try {
    ping=latch.await(timeout,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    log.error(""String_Node_Str"",ipAddress,e.getClass());
  }
  if (!ping) {
    t.interrupt();
  }
  return ping;
}"
10744,"public void run(){
  try {
    String[] command={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ipAddress};
    Process p=new ProcessBuilder(command).redirectErrorStream(true).start();
    CharStreams.toString(new InputStreamReader(p.getInputStream(),""String_Node_Str""));
    latch.countDown();
  }
 catch (  Exception e) {
  }
}","@Override public void run(){
  try {
    String[] command={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ipAddress};
    Process p=new ProcessBuilder(command).redirectErrorStream(true).start();
    CharStreams.toString(new InputStreamReader(p.getInputStream(),""String_Node_Str""));
    latch.countDown();
  }
 catch (  Exception e) {
  }
}"
10745,"public String execAndWaitCommand(String... command) throws IOException {
  log.info(""String_Node_Str"",Arrays.toString(command));
  CmdLine cmdLine=new CmdLine();
  for (  String c : command) {
    cmdLine.addRaw(c);
  }
  OverthereProcess process=connection.startProcess(cmdLine);
  return CharStreams.toString(new InputStreamReader(process.getStdout(),""String_Node_Str""));
}","public String execAndWaitCommand(String... command) throws IOException {
  log.info(""String_Node_Str"",Arrays.toString(command));
  CmdLine cmdLine=new CmdLine();
  for (  String c : command) {
    cmdLine.addRaw(c);
  }
  OverthereProcess process=connection.startProcess(cmdLine);
  BufferedReader r=new BufferedReader(new InputStreamReader(process.getStdout(),""String_Node_Str""));
  StringBuilder sb=new StringBuilder();
  String line=null;
  while ((line=r.readLine()) != null) {
    System.out.println(line);
    sb.append(line).append(""String_Node_Str"");
  }
  return sb.toString();
}"
10746,"private void startKms() throws IOException {
  if (testDir != null) {
    File logFile=new File(testDir + testClassName,testMethodName + ""String_Node_Str"");
    KurentoServicesTestHelper.setServerLogFilePath(logFile);
    log.debug(""String_Node_Str"",logFile.getAbsolutePath());
    if (isKmsRemote) {
      remoteKms.runAndWaitCommand(""String_Node_Str"",""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"" + ""String_Node_Str""+ remoteKms.getTmpFolder()+ ""String_Node_Str"");
    }
 else {
      Shell.runAndWait(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"" + logFile.getAbsolutePath()+ ""String_Node_Str"");
    }
  }
 else {
    if (isKmsRemote) {
      remoteKms.execCommand(""String_Node_Str"",""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      Shell.run(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"");
    }
  }
  log.info(""String_Node_Str"" + this.wsUri);
}","private void startKms() throws IOException {
  if (testDir != null) {
    File logFile=new File(testDir + testClassName,testMethodName + ""String_Node_Str"");
    KurentoServicesTestHelper.setServerLogFilePath(logFile);
    log.debug(""String_Node_Str"",logFile.getAbsolutePath());
    if (isKmsRemote) {
      remoteKms.runAndWaitCommand(""String_Node_Str"",""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"" + ""String_Node_Str""+ remoteKms.getTmpFolder()+ ""String_Node_Str"");
    }
 else {
      Shell.runAndWait(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"" + logFile.getAbsolutePath()+ ""String_Node_Str"");
    }
  }
 else {
    if (isKmsRemote) {
      remoteKms.execCommand(""String_Node_Str"",""String_Node_Str"",remoteKms.getTmpFolder() + ""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      Shell.run(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"" + workspace+ ""String_Node_Str"");
    }
  }
  log.info(""String_Node_Str"" + this.wsUri);
}"
10747,"public void addBrowser(String id,BrowserClient browser){
  if (browser.getNumInstances() > 0) {
    for (int i=0; i < browser.getNumInstances(); i++) {
      if (browser.getBrowserPerInstance() > 1) {
        for (int j=0; j < browser.getBrowserPerInstance(); j++) {
          String browserId=(browser.getNumInstances() == 1) ? id + j : id + i + ""String_Node_Str""+ j;
          addBrowserInstance(browserId,new BrowserClient(browser.getBuilder()));
        }
      }
 else {
        addBrowserInstance(id + i,new BrowserClient(browser.getBuilder()));
      }
    }
  }
 else {
    addBrowserInstance(id,browser);
  }
}","public void addBrowser(String id,BrowserClient browser){
  if (browser.getNumInstances() > 0) {
    for (int i=0; i < browser.getNumInstances(); i++) {
      if (browser.getBrowserPerInstance() > 1) {
        for (int j=0; j < browser.getBrowserPerInstance(); j++) {
          String browserId=id + i + ""String_Node_Str""+ j;
          addBrowserInstance(browserId,new BrowserClient(browser.getBuilder()));
        }
      }
 else {
        addBrowserInstance(id + i,new BrowserClient(browser.getBuilder()));
      }
    }
  }
 else {
    addBrowserInstance(id,browser);
  }
}"
10748,"public void stopGrid(){
  try {
    if (hub != null) {
      hub.stop();
      hubStarted=false;
    }
    if (nodes != null) {
      for (      GridNode node : nodes.values()) {
        stopNode(node);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public void stopGrid(){
  try {
    if (hub != null) {
      hub.stop();
      hubStarted=false;
    }
    if (nodes != null) {
      for (      GridNode node : nodes.values()) {
        stopNode(node);
      }
    }
    nodes.clear();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}"
10749,"public void init(){
  Class<? extends WebDriver> driverClass=browserType.getDriverClass();
  try {
    DesiredCapabilities capabilities=new DesiredCapabilities();
    if (driverClass.equals(FirefoxDriver.class)) {
      FirefoxProfile profile=new FirefoxProfile();
      profile.setPreference(""String_Node_Str"",true);
      capabilities.setCapability(FirefoxDriver.PROFILE,profile);
      capabilities.setBrowserName(DesiredCapabilities.firefox().getBrowserName());
      if (scope == BrowserScope.SAUCELABS) {
        createSaucelabsDriver(capabilities);
      }
 else       if (scope == BrowserScope.REMOTE) {
        createRemoteDriver(capabilities);
      }
 else {
        driver=new FirefoxDriver(profile);
      }
    }
 else     if (driverClass.equals(ChromeDriver.class)) {
      String chromedriver=null;
      if (SystemUtils.IS_OS_MAC || SystemUtils.IS_OS_LINUX) {
        chromedriver=""String_Node_Str"";
      }
 else       if (SystemUtils.IS_OS_WINDOWS) {
        chromedriver=""String_Node_Str"";
      }
      System.setProperty(""String_Node_Str"",new File(""String_Node_Str"" + chromedriver).getAbsolutePath());
      ChromeOptions options=new ChromeOptions();
      if (enableScreenCapture) {
        options.addArguments(""String_Node_Str"");
      }
 else {
        options.addArguments(""String_Node_Str"");
      }
      options.addArguments(""String_Node_Str"");
      if (protocol == Protocol.FILE) {
        options.addArguments(""String_Node_Str"");
      }
      if (!usePhysicalCam) {
        options.addArguments(""String_Node_Str"");
        if ((video != null) && isLocal()) {
          options.addArguments(""String_Node_Str"" + video);
        }
      }
      capabilities.setCapability(ChromeOptions.CAPABILITY,options);
      capabilities.setBrowserName(DesiredCapabilities.chrome().getBrowserName());
      if (scope == BrowserScope.SAUCELABS) {
        createSaucelabsDriver(capabilities);
      }
 else       if (scope == BrowserScope.REMOTE) {
        createRemoteDriver(capabilities);
      }
 else {
        driver=new ChromeDriver(options);
      }
    }
 else     if (driverClass.equals(InternetExplorerDriver.class)) {
      if (scope == BrowserScope.SAUCELABS) {
        capabilities.setBrowserName(DesiredCapabilities.internetExplorer().getBrowserName());
        capabilities.setCapability(""String_Node_Str"",true);
        createSaucelabsDriver(capabilities);
      }
    }
 else     if (driverClass.equals(SafariDriver.class)) {
      if (scope == BrowserScope.SAUCELABS) {
        capabilities.setBrowserName(DesiredCapabilities.safari().getBrowserName());
        createSaucelabsDriver(capabilities);
      }
    }
    changeTimeout(timeout);
    String url;
    if (protocol == Protocol.FILE) {
      String clientPage=client.toString();
      File clientPageFile=new File(this.getClass().getClassLoader().getResource(""String_Node_Str"" + clientPage).getFile());
      url=protocol.toString() + clientPageFile.getAbsolutePath();
    }
 else {
      String hostName=host != null ? host : node;
      url=protocol.toString() + hostName + ""String_Node_Str""+ serverPort+ client.toString();
    }
    log.info(""String_Node_Str"",url);
    driver.get(url);
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"",e);
  }
}","public void init(){
  Class<? extends WebDriver> driverClass=browserType.getDriverClass();
  try {
    DesiredCapabilities capabilities=new DesiredCapabilities();
    if (driverClass.equals(FirefoxDriver.class)) {
      FirefoxProfile profile=new FirefoxProfile();
      profile.setPreference(""String_Node_Str"",true);
      capabilities.setCapability(FirefoxDriver.PROFILE,profile);
      capabilities.setBrowserName(DesiredCapabilities.firefox().getBrowserName());
      if (scope == BrowserScope.SAUCELABS) {
        createSaucelabsDriver(capabilities);
      }
 else       if (scope == BrowserScope.REMOTE) {
        createRemoteDriver(capabilities);
      }
 else {
        driver=new FirefoxDriver(profile);
      }
    }
 else     if (driverClass.equals(ChromeDriver.class)) {
      String chromedriver=null;
      if (SystemUtils.IS_OS_MAC || SystemUtils.IS_OS_LINUX) {
        chromedriver=""String_Node_Str"";
      }
 else       if (SystemUtils.IS_OS_WINDOWS) {
        chromedriver=""String_Node_Str"";
      }
      System.setProperty(""String_Node_Str"",new File(""String_Node_Str"" + chromedriver).getAbsolutePath());
      ChromeOptions options=new ChromeOptions();
      if (enableScreenCapture) {
        options.addArguments(""String_Node_Str"");
        try {
          InputStream is=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
          File crx=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
          FileUtils.copyInputStreamToFile(is,crx);
          options.addExtensions(crx);
          options.addArguments(""String_Node_Str"");
        }
 catch (        Exception e) {
          log.error(e.getMessage());
        }
      }
 else {
        options.addArguments(""String_Node_Str"");
      }
      options.addArguments(""String_Node_Str"");
      if (protocol == Protocol.FILE) {
        options.addArguments(""String_Node_Str"");
      }
      if (!usePhysicalCam) {
        options.addArguments(""String_Node_Str"");
        if ((video != null) && isLocal()) {
          options.addArguments(""String_Node_Str"" + video);
        }
      }
      capabilities.setCapability(ChromeOptions.CAPABILITY,options);
      capabilities.setBrowserName(DesiredCapabilities.chrome().getBrowserName());
      if (scope == BrowserScope.SAUCELABS) {
        createSaucelabsDriver(capabilities);
      }
 else       if (scope == BrowserScope.REMOTE) {
        createRemoteDriver(capabilities);
      }
 else {
        driver=new ChromeDriver(options);
      }
    }
 else     if (driverClass.equals(InternetExplorerDriver.class)) {
      if (scope == BrowserScope.SAUCELABS) {
        capabilities.setBrowserName(DesiredCapabilities.internetExplorer().getBrowserName());
        capabilities.setCapability(""String_Node_Str"",true);
        createSaucelabsDriver(capabilities);
      }
    }
 else     if (driverClass.equals(SafariDriver.class)) {
      if (scope == BrowserScope.SAUCELABS) {
        capabilities.setBrowserName(DesiredCapabilities.safari().getBrowserName());
        createSaucelabsDriver(capabilities);
      }
    }
    changeTimeout(timeout);
    String url;
    if (protocol == Protocol.FILE) {
      String clientPage=client.toString();
      File clientPageFile=new File(this.getClass().getClassLoader().getResource(""String_Node_Str"" + clientPage).getFile());
      url=protocol.toString() + clientPageFile.getAbsolutePath();
    }
 else {
      String hostName=host != null ? host : node;
      url=protocol.toString() + hostName + ""String_Node_Str""+ serverPort+ client.toString();
    }
    log.info(""String_Node_Str"",url);
    driver.get(url);
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"",e);
  }
}"
10750,"public void setTransportId(String transportId){
  this.transportId=transportId;
  disablePrevPingWatchdog();
  if (pingWachdog) {
    log.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",transportId,sessionId,NUM_NO_PINGS_TO_CLOSE * pingInterval);
    activateSessionCloser();
  }
}","public void setTransportId(String transportId){
  this.transportId=transportId;
  disablePrevPingWatchdog();
  if (pingWachdog) {
    if (pingInterval != -1) {
      log.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",transportId,sessionId,NUM_NO_PINGS_TO_CLOSE * pingInterval);
      activateSessionCloser();
    }
  }
}"
10751,"private <P,R>Response<R> internalSendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  if (request.getMethod().equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
  }
  connectIfNecessary();
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  boolean isPing=false;
  String jsonMessage=request.toString();
  if (METHOD_PING.equals(request.getMethod())) {
    isPing=true;
    log.trace(""String_Node_Str"",label,jsonMessage.trim());
  }
 else {
    log.debug(""String_Node_Str"",label,jsonMessage.trim());
  }
  if (wsSession == null) {
    throw new CloseException(1011,""String_Node_Str"" + this.url + ""String_Node_Str"");
  }
synchronized (wsSession) {
    wsSession.getRemote().sendString(jsonMessage);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJson;
  try {
    responseJson=responseFuture.get(TIMEOUT,TimeUnit.MILLISECONDS);
    if (isPing) {
      log.trace(""String_Node_Str"",label,responseJson.toString());
    }
 else {
      log.debug(""String_Node_Str"",label,responseJson.toString());
    }
    Response<R> response=MessageUtils.convertResponse(responseJson,resultClass);
    if (response.getSessionId() != null) {
      session.setSessionId(response.getSessionId());
    }
    return response;
  }
 catch (  InterruptedException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(label + ""String_Node_Str"" + TIMEOUT+ ""String_Node_Str""+ request.getId(),e);
  }
}","private <P,R>Response<R> internalSendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  if (request.getMethod().equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
  }
  connectIfNecessary();
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  boolean isPing=false;
  String jsonMessage=request.toString();
  if (METHOD_PING.equals(request.getMethod())) {
    isPing=true;
    log.trace(""String_Node_Str"",label,jsonMessage.trim());
  }
 else {
    log.debug(""String_Node_Str"",label,jsonMessage.trim());
  }
  if (wsSession == null) {
    throw new IllegalStateException(""String_Node_Str"" + this.url + ""String_Node_Str"");
  }
synchronized (wsSession) {
    wsSession.getRemote().sendString(jsonMessage);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJson;
  try {
    responseJson=responseFuture.get(TIMEOUT,TimeUnit.MILLISECONDS);
    if (isPing) {
      log.trace(""String_Node_Str"",label,responseJson.toString());
    }
 else {
      log.debug(""String_Node_Str"",label,responseJson.toString());
    }
    Response<R> response=MessageUtils.convertResponse(responseJson,resultClass);
    if (response.getSessionId() != null) {
      session.setSessionId(response.getSessionId());
    }
    return response;
  }
 catch (  InterruptedException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(label + ""String_Node_Str"" + TIMEOUT+ ""String_Node_Str""+ request.getId(),e);
  }
}"
10752,"private void closeClient(){
  if (client != null) {
    log.debug(""String_Node_Str"",label);
    try {
      client.stop();
      client.destroy();
      execService.shutdown();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e);
    }
    execService=null;
    client=null;
  }
}","private void closeClient(){
  if (client != null) {
    log.debug(""String_Node_Str"",label);
    try {
      client.stop();
      client.destroy();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    client=null;
  }
  if (execService != null) {
    try {
      execService.shutdown();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e.getMessage());
    }
    execService=null;
  }
}"
10753,"private void publishWebSocketEndpoint(WebSocketHandlerRegistry wsHandlerRegistry,JsonRpcHandler<?> handler,List<String> paths){
  ProtocolManager protocolManager=(ProtocolManager)ctx.getBean(""String_Node_Str"",handler);
  JsonRpcWebSocketHandler wsHandler=new JsonRpcWebSocketHandler(protocolManager);
  protocolManager.setPingWachdog(handler.isPingWachdog());
  for (  String path : paths) {
    WebSocketHandlerRegistration registration=wsHandlerRegistry.addHandler(wsHandler,path);
    if (handler.isSockJSEnabled()) {
      registration.withSockJS();
    }
    if (handler.getLabel() != null) {
      wsHandler.setLabel(handler.getLabel());
    }
  }
}","private void publishWebSocketEndpoint(WebSocketHandlerRegistry wsHandlerRegistry,JsonRpcHandler<?> handler,List<String> paths){
  ProtocolManager protocolManager=(ProtocolManager)ctx.getBean(""String_Node_Str"",handler);
  JsonRpcWebSocketHandler wsHandler=new JsonRpcWebSocketHandler(protocolManager);
  protocolManager.setPingWachdog(handler.isPingWatchdog());
  for (  String path : paths) {
    WebSocketHandlerRegistration registration=wsHandlerRegistry.addHandler(wsHandler,path);
    if (handler.isSockJSEnabled()) {
      registration.withSockJS();
    }
    if (handler.getLabel() != null) {
      wsHandler.setLabel(handler.getLabel());
    }
  }
}"
10754,"@Override public String toString(){
  String out=""String_Node_Str"";
  Map<String,Integer> browsers=new HashMap<>();
  for (  String key : browserMap.keySet()) {
    String browser=getBrowserType(key).toString();
    String version=getBrowserVersion(key);
    String platform=getPlatform(key).toString();
    if (version != null) {
      browser+=version;
    }
    if (platform != null) {
      browser+=platform;
    }
    if (browsers.containsKey(browser)) {
      int newCount=browsers.get(browser) + 1;
      browsers.put(browser,newCount);
    }
 else {
      browsers.put(browser,1);
    }
  }
  for (  String browser : browsers.keySet()) {
    int count=browsers.get(browser);
    if (!out.isEmpty()) {
      out+=""String_Node_Str"";
    }
    if (count > 1) {
      out+=count + ""String_Node_Str"";
    }
    out+=browser;
  }
  return out;
}","@Override public String toString(){
  String out=""String_Node_Str"";
  Map<String,Integer> browsers=new HashMap<>();
  for (  String key : browserMap.keySet()) {
    String browser=getBrowserType(key).toString();
    String version=getBrowserVersion(key);
    Platform platform=getPlatform(key);
    if (version != null) {
      browser+=version;
    }
    if (platform != null) {
      browser+=platform;
    }
    if (browsers.containsKey(browser)) {
      int newCount=browsers.get(browser) + 1;
      browsers.put(browser,newCount);
    }
 else {
      browsers.put(browser,1);
    }
  }
  for (  String browser : browsers.keySet()) {
    int count=browsers.get(browser);
    if (!out.isEmpty()) {
      out+=""String_Node_Str"";
    }
    if (count > 1) {
      out+=count + ""String_Node_Str"";
    }
    out+=browser;
  }
  return out;
}"
10755,"protected void handleReconnectDisconnection(final int statusCode,final String closeReason){
  if (!clientClose) {
    reconnecting=true;
    execService.execute(new Runnable(){
      @Override public void run(){
        try {
          connectIfNecessary();
          reconnecting=false;
        }
 catch (        KurentoException e) {
          handlerManager.afterConnectionClosed(session,closeReason);
          log.debug(""String_Node_Str"",label,closeReason);
          wsSession=null;
          if (connectionListener != null) {
            connectionListener.disconnected();
          }
        }
catch (        IOException e) {
          log.warn(""String_Node_Str"",label,url,e);
        }
      }
    }
);
  }
 else {
    handlerManager.afterConnectionClosed(session,closeReason);
    if (connectionListener != null) {
      connectionListener.disconnected();
    }
  }
}","protected void handleReconnectDisconnection(final int statusCode,final String closeReason){
  if (!clientClose) {
    reconnecting=true;
    if (execService == null || execService.isShutdown() || execService.isTerminated()) {
      execService=Executors.newFixedThreadPool(10,threadFactory);
    }
    execService.execute(new Runnable(){
      @Override public void run(){
        try {
          connectIfNecessary();
          reconnecting=false;
        }
 catch (        KurentoException e) {
          handlerManager.afterConnectionClosed(session,closeReason);
          log.debug(""String_Node_Str"",label,closeReason);
          wsSession=null;
          if (connectionListener != null) {
            connectionListener.disconnected();
          }
        }
catch (        IOException e) {
          log.warn(""String_Node_Str"",label,url,e);
        }
      }
    }
);
  }
 else {
    handlerManager.afterConnectionClosed(session,closeReason);
    if (connectionListener != null) {
      connectionListener.disconnected();
    }
  }
}"
10756,"private void closeClient(){
  if (client != null) {
    log.debug(""String_Node_Str"",label);
    try {
      client.stop();
      client.destroy();
      execService.shutdown();
    }
 catch (    Exception e1) {
      log.debug(""String_Node_Str"",label);
    }
    client=null;
  }
}","private void closeClient(){
  if (client != null) {
    log.debug(""String_Node_Str"",label);
    try {
      client.stop();
      client.destroy();
      execService.shutdown();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",label,e);
    }
    execService=null;
    client=null;
  }
}"
10757,"@Test public void test() throws IOException, InterruptedException {
  log.info(""String_Node_Str"");
  JsonRpcClient client=createJsonRpcClient(""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void connected(){
    }
    @Override public void connectionFailed(){
      System.out.println(""String_Node_Str"");
    }
    @Override public void disconnected(){
      System.out.println(""String_Node_Str"");
    }
  }
);
  client.setHeartbeatInterval(500);
  client.enableHeartbeat();
  String result=client.sendRequest(""String_Node_Str"",""String_Node_Str"",String.class);
  log.info(""String_Node_Str"" + result);
  Assert.assertEquals(result,""String_Node_Str"");
  Thread.sleep(2000);
  log.info(""String_Node_Str"");
  client.disableHeartbeat();
  Thread.sleep(50000);
  log.info(""String_Node_Str"");
}","@Test public void test() throws IOException, InterruptedException {
  log.info(""String_Node_Str"");
  JsonRpcClient client=createJsonRpcClient(""String_Node_Str"",new JsonRpcWSConnectionListener(){
    @Override public void connected(){
    }
    @Override public void connectionFailed(){
      System.out.println(""String_Node_Str"");
    }
    @Override public void disconnected(){
      System.out.println(""String_Node_Str"");
    }
  }
);
  client.setHeartbeatInterval(500);
  client.enableHeartbeat();
  String result=client.sendRequest(""String_Node_Str"",""String_Node_Str"",String.class);
  log.info(""String_Node_Str"" + result);
  Assert.assertEquals(result,""String_Node_Str"");
  Thread.sleep(20000);
  log.info(""String_Node_Str"");
  client.disableHeartbeat();
  Thread.sleep(30000);
  log.info(""String_Node_Str"");
  client.enableHeartbeat();
  Thread.sleep(30000);
  log.info(""String_Node_Str"");
}"
10758,"@Override public void closeNativeSession(){
  throw new UnsupportedOperationException();
}","@Override public void closeNativeSession(String reason){
  throw new UnsupportedOperationException();
}"
10759,"public void removeSession(ServerSession session){
  sessions.remove(session.getSessionId());
}","public void removeSession(ServerSession session){
  log.info(""String_Node_Str"",session.getTransportId());
  sessions.remove(session.getTransportId());
}"
10760,"private void activateSessionCloser(){
  if (lastTask != null) {
    lastTask.cancel(false);
  }
  lastTask=taskScheduler.schedule(closeSessionTask,new Date(System.currentTimeMillis() + (NUM_NO_PINGS_TO_CLOSE * pingInterval)));
}","private void activateSessionCloser(){
  disablePingWatchdog();
  lastTask=taskScheduler.schedule(closeSessionTask,new Date(System.currentTimeMillis() + (NUM_NO_PINGS_TO_CLOSE * pingInterval)));
}"
10761,"private PingWatchdogSession getOrCreatePingSession(String transportId){
  PingWatchdogSession session=sessions.get(transportId);
  if (session == null) {
    session=new PingWatchdogSession(transportId);
    sessions.put(transportId,session);
  }
  return session;
}","private synchronized PingWatchdogSession getOrCreatePingSession(String transportId){
  PingWatchdogSession session=sessions.get(transportId);
  if (session == null) {
    log.info(""String_Node_Str"",transportId);
    session=new PingWatchdogSession(transportId);
    sessions.put(transportId,session);
  }
  return session;
}"
10762,"public void closeSessionIfTimeout(final String transportId,final String reason){
  final ServerSession session=sessionsManager.getByTransportId(transportId);
  if (session != null) {
    log.info(label + ""String_Node_Str"",session.getSessionId(),transportId);
    try {
      ScheduledFuture<?> lastStartedTimerFuture=taskScheduler.schedule(new Runnable(){
        @Override public void run(){
          closeSession(session,reason);
        }
      }
,new Date(System.currentTimeMillis() + session.getReconnectionTimeoutInMillis()));
      session.setCloseTimerTask(lastStartedTimerFuture);
    }
 catch (    TaskRejectedException e) {
      log.warn(label + ""String_Node_Str"" + ""String_Node_Str"",session.getSessionId(),transportId);
    }
  }
}","public void closeSessionIfTimeout(final String transportId,final String reason){
  final ServerSession session=sessionsManager.getByTransportId(transportId);
  if (session == null) {
    log.warn(""String_Node_Str"",label,transportId);
  }
 else {
    try {
      Date closeTime=new Date(System.currentTimeMillis() + session.getReconnectionTimeoutInMillis());
      log.info(label + ""String_Node_Str"",session.getSessionId(),transportId,format.format(closeTime));
      ScheduledFuture<?> lastStartedTimerFuture=taskScheduler.schedule(new Runnable(){
        @Override public void run(){
          closeSession(session,reason);
        }
      }
,closeTime);
      session.setCloseTimerTask(lastStartedTimerFuture);
      pingWachdogManager.disablePingWatchdogForSession(transportId);
    }
 catch (    TaskRejectedException e) {
      log.warn(label + ""String_Node_Str"" + ""String_Node_Str"",session.getSessionId(),transportId);
    }
  }
}"
10763,"private void processReconnectMessage(ServerSessionFactory factory,Request<JsonElement> request,ResponseSender responseSender,String transportId) throws IOException {
  String sessionId=request.getSessionId();
  if (sessionId == null) {
    responseSender.sendResponse(new Response<>(request.getId(),new ResponseError(99999,""String_Node_Str"")));
  }
 else {
    ServerSession session=sessionsManager.get(sessionId);
    if (session != null) {
      String oldTransportId=session.getTransportId();
      session.setTransportId(transportId);
      factory.updateSessionOnReconnection(session);
      sessionsManager.updateTransportId(session,oldTransportId);
      cancelCloseTimer(session);
      responseSender.sendResponse(new Response<>(sessionId,request.getId(),RECONNECTION_SUCCESSFUL));
    }
 else {
      responseSender.sendResponse(new Response<>(request.getId(),new ResponseError(99999,RECONNECTION_ERROR)));
    }
  }
}","private void processReconnectMessage(ServerSessionFactory factory,Request<JsonElement> request,ResponseSender responseSender,String transportId) throws IOException {
  String sessionId=request.getSessionId();
  if (sessionId == null) {
    ServerSession session=getSession(factory,transportId,request);
    responseSender.sendResponse(new Response<String>(session.getSessionId(),request.getId(),""String_Node_Str""));
  }
 else {
    ServerSession session=sessionsManager.get(sessionId);
    if (session != null) {
      String oldTransportId=session.getTransportId();
      session.setTransportId(transportId);
      factory.updateSessionOnReconnection(session);
      pingWachdogManager.updateTransportId(transportId,oldTransportId);
      sessionsManager.updateTransportId(session,oldTransportId);
      cancelCloseTimer(session);
      responseSender.sendResponse(new Response<>(sessionId,request.getId(),RECONNECTION_SUCCESSFUL));
    }
 else {
      responseSender.sendResponse(new Response<>(request.getId(),new ResponseError(99999,RECONNECTION_ERROR)));
    }
  }
}"
10764,"@PostConstruct private void postConstruct(){
  NativeSessionCloser nativeSessionCloser=new NativeSessionCloser(){
    @Override public void closeSession(    String transportId){
      ServerSession serverSession=sessionsManager.getByTransportId(transportId);
      if (serverSession != null) {
        serverSession.closeNativeSession();
      }
 else {
        log.warn(""String_Node_Str"");
      }
    }
  }
;
  this.pingWachdogManager=new PingWatchdogManager(taskScheduler,nativeSessionCloser);
}","@PostConstruct private void postConstruct(){
  NativeSessionCloser nativeSessionCloser=new NativeSessionCloser(){
    @Override public void closeSession(    String transportId){
      ServerSession serverSession=sessionsManager.getByTransportId(transportId);
      if (serverSession != null) {
        serverSession.closeNativeSession(""String_Node_Str"");
      }
 else {
        log.warn(""String_Node_Str"");
      }
    }
  }
;
  this.pingWachdogManager=new PingWatchdogManager(taskScheduler,nativeSessionCloser);
}"
10765,public abstract void closeNativeSession();,public abstract void closeNativeSession(String reason);
10766,"@SuppressWarnings(""String_Node_Str"") public synchronized <T>T getById(String objectRef,Class<T> clazz){
  RemoteObject remoteObject=(RemoteObject)this.getObject(objectRef);
  if (remoteObject == null) {
    remoteObject=new RemoteObject(objectRef,clazz.getSimpleName(),this);
    RemoteObjectInvocationHandler.newProxy(remoteObject,this,clazz);
  }
  return (T)remoteObject.getKurentoObject();
}","@SuppressWarnings(""String_Node_Str"") public synchronized <T>T getById(String objectRef,Class<T> clazz){
  RemoteObject remoteObject=(RemoteObject)this.getObject(objectRef);
  if (remoteObject == null) {
    clazz=obtainConcreteClass(objectRef,clazz);
    remoteObject=new RemoteObject(objectRef,clazz.getSimpleName(),this);
    RemoteObjectInvocationHandler.newProxy(remoteObject,this,clazz);
  }
  return (T)remoteObject.getKurentoObject();
}"
10767,"@SuppressWarnings(""String_Node_Str"") public T build(Transaction transaction){
  RemoteObject remoteObject=manager.create(clazz.getSimpleName(),props,transaction);
  return (T)RemoteObjectInvocationHandler.newProxy(remoteObject,manager,clazz);
}","@SuppressWarnings(""String_Node_Str"") public T build(Transaction transaction){
  RemoteObject remoteObject=manager.createWithKurentoObject(clazz,props,transaction);
  return (T)remoteObject.getKurentoObject();
}"
10768,"public ServerManager getServerManager(){
  return manager.getOrCreateObject(""String_Node_Str"",ServerManager.class);
}","public ServerManager getServerManager(){
  return getById(""String_Node_Str"",ServerManager.class);
}"
10769,"private Object unflattenRemoteObject(Type type,String value,ObjectRefsManager manager){
  Object remoteObject=manager.getObject(value);
  if (remoteObject == null) {
    if (manager instanceof RomManager) {
      RomManager clientManager=(RomManager)manager;
      RemoteObject newRemoteObject=new RemoteObject(value,((Class<?>)type).getSimpleName(),clientManager);
      clientManager.registerObject(value,newRemoteObject);
      return newRemoteObject;
    }
    throw new ProtocolException(""String_Node_Str"" + value + ""String_Node_Str"");
  }
 else   if (remoteObject instanceof RemoteObject) {
    Object wrapper=((RemoteObject)remoteObject).getKurentoObject();
    return (wrapper != null) ? wrapper : remoteObject;
  }
 else {
    return remoteObject;
  }
}","private Object unflattenRemoteObject(Type type,String id,ObjectRefsManager manager){
  Object remoteObject=manager.getObject(id);
  if (remoteObject == null) {
    if (manager instanceof RomManager) {
      RomManager clientManager=(RomManager)manager;
      return clientManager.getById(id,(Class<?>)type);
    }
    throw new ProtocolException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
 else   if (remoteObject instanceof RemoteObject) {
    Object wrapper=((RemoteObject)remoteObject).getKurentoObject();
    return wrapper != null ? wrapper : remoteObject;
  }
 else {
    return remoteObject;
  }
}"
10770,"private Class<?> getOrCreateClass(Props props){
  Class<?> clazz=null;
  String complexTypeName=(String)props.getProp(""String_Node_Str"");
  String moduleName=(String)props.getProp(""String_Node_Str"");
  String moduleNameInit=moduleName.substring(0,1).toUpperCase();
  String moduleNameEnd=moduleName.substring(1,moduleName.length());
  if (complexTypeName != null) {
    try {
      String classPackageName=(MODULE_INFO_PACKAGE + ""String_Node_Str"" + moduleNameInit+ moduleNameEnd+ ""String_Node_Str"");
      String packageName=packageNames.get(classPackageName);
      if (packageName == null) {
        Class<?> clazzPackage=Class.forName(classPackageName);
        Method method=clazzPackage.getMethod(""String_Node_Str"");
        packageName=(String)method.invoke(clazzPackage);
        packageNames.put(classPackageName,packageName);
      }
      String className=(packageName + ""String_Node_Str"" + complexTypeName);
      clazz=usedClasses.get(className);
      if (clazz == null) {
        clazz=Class.forName(className);
        usedClasses.put(className,clazz);
      }
    }
 catch (    ClassNotFoundException e) {
      throw new ProtocolException(""String_Node_Str"" + complexTypeName + ""String_Node_Str"",e);
    }
catch (    NoSuchMethodException e) {
      throw new ProtocolException(""String_Node_Str"",e);
    }
catch (    SecurityException e) {
      throw new ProtocolException(""String_Node_Str"",e);
    }
catch (    IllegalAccessException e) {
      throw new ProtocolException(""String_Node_Str"",e);
    }
catch (    IllegalArgumentException e) {
      throw new ProtocolException(""String_Node_Str"",e);
    }
catch (    InvocationTargetException e) {
      throw new ProtocolException(""String_Node_Str"",e);
    }
  }
  return clazz;
}","private Class<?> getOrCreateClass(Props props){
  Class<?> clazz=null;
  String complexTypeName=(String)props.getProp(""String_Node_Str"");
  String moduleName=(String)props.getProp(""String_Node_Str"");
  String moduleNameInit=moduleName.substring(0,1).toUpperCase();
  String moduleNameEnd=moduleName.substring(1,moduleName.length());
  if (complexTypeName != null) {
    try {
      String classPackageName=MODULE_INFO_PACKAGE + ""String_Node_Str"" + moduleNameInit+ moduleNameEnd+ ""String_Node_Str"";
      String packageName=packageNames.get(classPackageName);
      if (packageName == null) {
        Class<?> clazzPackage=Class.forName(classPackageName);
        Method method=clazzPackage.getMethod(""String_Node_Str"");
        packageName=(String)method.invoke(clazzPackage);
        packageNames.put(classPackageName,packageName);
      }
      String className=packageName + ""String_Node_Str"" + complexTypeName;
      clazz=usedClasses.get(className);
      if (clazz == null) {
        clazz=Class.forName(className);
        usedClasses.put(className,clazz);
      }
    }
 catch (    ClassNotFoundException e) {
      throw new ProtocolException(""String_Node_Str"" + complexTypeName + ""String_Node_Str"",e);
    }
catch (    NoSuchMethodException e) {
      throw new ProtocolException(""String_Node_Str"",e);
    }
catch (    SecurityException e) {
      throw new ProtocolException(""String_Node_Str"",e);
    }
catch (    IllegalAccessException e) {
      throw new ProtocolException(""String_Node_Str"",e);
    }
catch (    IllegalArgumentException e) {
      throw new ProtocolException(""String_Node_Str"",e);
    }
catch (    InvocationTargetException e) {
      throw new ProtocolException(""String_Node_Str"",e);
    }
  }
  return clazz;
}"
10771,"@Test public void testObjectCreationEvents() throws InterruptedException {
  ServerManager server=kurentoClient.getServerManager();
  final Exchanger<MediaObject> exchanger=new Exchanger<>();
  server.addObjectCreatedListener(new EventListener<ObjectCreatedEvent>(){
    @Override public void onEvent(    ObjectCreatedEvent event){
      try {
        exchanger.exchange(event.getObject());
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
);
  MediaPipeline pipeline=kurentoClient.createMediaPipeline();
  try {
    MediaObject eventObject=exchanger.exchange(null,500,TimeUnit.SECONDS);
    System.out.println(""String_Node_Str"" + pipeline);
    System.out.println(""String_Node_Str"" + eventObject);
    assertThat(pipeline,IsSame.sameInstance(eventObject));
  }
 catch (  TimeoutException e) {
    fail(ObjectCreatedEvent.class.getName() + ""String_Node_Str"");
  }
}","@Test public void testObjectCreationEvents() throws InterruptedException {
  ServerManager server=kurentoClient.getServerManager();
  final Exchanger<MediaObject> exchanger=new Exchanger<>();
  server.addObjectCreatedListener(new EventListener<ObjectCreatedEvent>(){
    @Override public void onEvent(    ObjectCreatedEvent event){
      try {
        exchanger.exchange(event.getObject());
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
);
  MediaPipeline pipeline=kurentoClient.createMediaPipeline();
  try {
    MediaObject eventObject=exchanger.exchange(null,10,TimeUnit.SECONDS);
    System.out.println(""String_Node_Str"" + pipeline);
    System.out.println(""String_Node_Str"" + eventObject);
    assertThat(pipeline,IsSame.sameInstance(eventObject));
  }
 catch (  TimeoutException e) {
    fail(ObjectCreatedEvent.class.getName() + ""String_Node_Str"");
  }
}"
10772,"public synchronized void connectIfNecessary() throws IOException {
  if (((wsSession == null) || !wsSession.isOpen()) && !clientClose) {
    try {
      if (client == null) {
        client=new WebSocketClient();
        client.setConnectTimeout(this.connectionTimeout);
        client.start();
      }
 else {
        log.debug(""String_Node_Str"",label);
      }
      if (heartbeating) {
        enableHeartbeat();
      }
      Thread.sleep(100);
      SimpleEchoSocket socket=new SimpleEchoSocket();
      ClientUpgradeRequest request=new ClientUpgradeRequest();
      wsSession=client.connect(socket,new URI(url),request).get(this.connectionTimeout,TimeUnit.MILLISECONDS);
      wsSession.setIdleTimeout(this.idleTimeout);
    }
 catch (    TimeoutException e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      this.closeClient();
      throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
    }
catch (    Exception e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      this.closeClient();
      throw new KurentoException(label + ""String_Node_Str"" + url,e);
    }
    try {
      if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
        if (connectionListener != null) {
          connectionListener.connectionFailed();
        }
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
      if (session == null) {
        session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
        handlerManager.afterConnectionEstablished(session);
      }
 else {
        try {
          rsHelper.sendRequest(METHOD_RECONNECT,String.class);
          log.info(""String_Node_Str"",label,url);
        }
 catch (        JsonRpcErrorException e) {
          if (e.getCode() == 40007) {
            rsHelper.setSessionId(null);
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
          }
 else {
            log.warn(""String_Node_Str"",label,url,e);
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}","public synchronized void connectIfNecessary() throws IOException {
  if ((wsSession == null || !wsSession.isOpen()) && !clientClose) {
    try {
      if (client == null) {
        client=new WebSocketClient();
        client.setConnectTimeout(this.connectionTimeout);
        client.start();
      }
 else {
        log.debug(""String_Node_Str"",label);
      }
      if (heartbeating) {
        enableHeartbeat();
      }
      Thread.sleep(100);
      SimpleEchoSocket socket=new SimpleEchoSocket();
      ClientUpgradeRequest request=new ClientUpgradeRequest();
      wsSession=client.connect(socket,new URI(url),request).get(this.connectionTimeout,TimeUnit.MILLISECONDS);
      wsSession.setIdleTimeout(this.idleTimeout);
    }
 catch (    TimeoutException e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      this.closeClient();
      throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
    }
catch (    Exception e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      this.closeClient();
      throw new KurentoException(label + ""String_Node_Str"" + url,e);
    }
    try {
      if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
        if (connectionListener != null) {
          connectionListener.connectionFailed();
        }
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
      if (session == null) {
        session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
        handlerManager.afterConnectionEstablished(session);
      }
 else {
        try {
          rsHelper.sendRequest(METHOD_RECONNECT,String.class);
          log.info(""String_Node_Str"",label,url);
        }
 catch (        JsonRpcErrorException e) {
          if (e.getCode() == 40007) {
            rsHelper.setSessionId(null);
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
          }
 else {
            log.warn(""String_Node_Str"",label,url,e);
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}"
10773,"private <P,R>Response<R> internalSendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  connectIfNecessary();
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  boolean isPing=false;
  String jsonMessage=request.toString();
  if (METHOD_PING.equals(request.getMethod())) {
    isPing=true;
    log.trace(""String_Node_Str"",label,jsonMessage.trim());
  }
 else {
    log.debug(""String_Node_Str"",label,jsonMessage.trim());
  }
  if (wsSession == null) {
    throw new CloseException(1011,""String_Node_Str"" + this.url + ""String_Node_Str"");
  }
synchronized (wsSession) {
    wsSession.getRemote().sendString(jsonMessage);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJson;
  try {
    responseJson=responseFuture.get(TIMEOUT,TimeUnit.MILLISECONDS);
    if (isPing) {
      log.trace(""String_Node_Str"",label,responseJson.toString());
    }
 else {
      log.debug(""String_Node_Str"",label,responseJson.toString());
    }
    Response<R> response=MessageUtils.convertResponse(responseJson,resultClass);
    if (response.getSessionId() != null) {
      session.setSessionId(response.getSessionId());
    }
    return response;
  }
 catch (  InterruptedException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(label + ""String_Node_Str"" + TIMEOUT+ ""String_Node_Str""+ request.getId(),e);
  }
}","private <P,R>Response<R> internalSendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  if (request.getMethod().equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
  }
  connectIfNecessary();
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  boolean isPing=false;
  String jsonMessage=request.toString();
  if (METHOD_PING.equals(request.getMethod())) {
    isPing=true;
    log.trace(""String_Node_Str"",label,jsonMessage.trim());
  }
 else {
    log.debug(""String_Node_Str"",label,jsonMessage.trim());
  }
  if (wsSession == null) {
    throw new CloseException(1011,""String_Node_Str"" + this.url + ""String_Node_Str"");
  }
synchronized (wsSession) {
    wsSession.getRemote().sendString(jsonMessage);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJson;
  try {
    responseJson=responseFuture.get(TIMEOUT,TimeUnit.MILLISECONDS);
    if (isPing) {
      log.trace(""String_Node_Str"",label,responseJson.toString());
    }
 else {
      log.debug(""String_Node_Str"",label,responseJson.toString());
    }
    Response<R> response=MessageUtils.convertResponse(responseJson,resultClass);
    if (response.getSessionId() != null) {
      session.setSessionId(response.getSessionId());
    }
    return response;
  }
 catch (  InterruptedException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(label + ""String_Node_Str"" + TIMEOUT+ ""String_Node_Str""+ request.getId(),e);
  }
}"
10774,"private <P,R>Response<R> sendRequestWebSocket(Request<P> request,Class<R> resultClass){
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  try {
synchronized (wsSession) {
      wsSession.sendMessage(new TextMessage(JsonUtils.toJson(request)));
    }
  }
 catch (  Exception e) {
    throw new KurentoException(""String_Node_Str"" + JsonUtils.toJson(request) + ""String_Node_Str""+ wsSession.getId()+ ""String_Node_Str"",e);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJsonObject;
  try {
    responseJsonObject=responseFuture.get();
  }
 catch (  InterruptedException e) {
    throw new JsonRpcException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new JsonRpcException(""String_Node_Str"",e);
  }
  return MessageUtils.convertResponse(responseJsonObject,resultClass);
}","private <P,R>Response<R> sendRequestWebSocket(Request<P> request,Class<R> resultClass){
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  try {
synchronized (wsSession) {
      wsSession.sendMessage(new TextMessage(JsonUtils.toJson(request)));
    }
  }
 catch (  Exception e) {
    throw new KurentoException(""String_Node_Str"" + JsonUtils.toJson(request) + ""String_Node_Str""+ wsSession.getId()+ ""String_Node_Str"",e);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJsonObject;
  try {
    responseJsonObject=responseFuture.get(JsonRpcClientWebSocket.TIMEOUT,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
    throw new JsonRpcException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new JsonRpcException(""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(""String_Node_Str"" + JsonRpcClientWebSocket.TIMEOUT + ""String_Node_Str""+ request.getId(),e);
  }
  return MessageUtils.convertResponse(responseJsonObject,resultClass);
}"
10775,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void propagateEventTo(Object object,Class<? extends Event> eventClass,Props data,EventListener<?> listener){
  try {
    Constructor<?> constructor=eventClass.getConstructors()[0];
    data.add(""String_Node_Str"",object);
    Object[] params=ParamsFlattener.getInstance().unflattenParams(constructor.getParameterAnnotations(),constructor.getGenericParameterTypes(),data,manager);
    Event e=(Event)constructor.newInstance(params);
    ((EventListener)listener).onEvent(e);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + eventClass.getSimpleName() + ""String_Node_Str""+ data+ ""String_Node_Str"",e);
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void propagateEventTo(Object object,Class<? extends Event> eventClass,Props data,EventListener<?> listener){
  try {
    Constructor<?> constructor=eventClass.getConstructors()[0];
    data.add(""String_Node_Str"",((KurentoObject)object).getId());
    Object[] params=ParamsFlattener.getInstance().unflattenParams(constructor.getParameterAnnotations(),constructor.getGenericParameterTypes(),data,manager);
    Event e=(Event)constructor.newInstance(params);
    ((EventListener)listener).onEvent(e);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + eventClass.getSimpleName() + ""String_Node_Str""+ data+ ""String_Node_Str"",e);
  }
}"
10776,"private void closeClient(){
  if (client != null) {
    log.debug(""String_Node_Str"",label);
    try {
      client.stop();
      client.destroy();
    }
 catch (    Exception e1) {
      log.debug(""String_Node_Str"",label);
    }
    client=null;
  }
}","private void closeClient(){
  if (client != null) {
    log.debug(""String_Node_Str"",label);
    try {
      client.stop();
      client.destroy();
      execService.shutdown();
    }
 catch (    Exception e1) {
      log.debug(""String_Node_Str"",label);
    }
    client=null;
  }
}"
10777,"public Object flattenResult(Object result,RemoteObjectManager manager){
  if (result == null) {
    return null;
  }
 else   if (result instanceof Enum<?>) {
    return result.toString();
  }
 else   if (isPrimitive(result)) {
    return result;
  }
 else   if (result instanceof List<?>) {
    return flattenResultList((List<?>)result,manager);
  }
 else   if (result.getClass().getAnnotation(RemoteClass.class) != null) {
    return extractObjectRefFromRemoteClass(result,manager);
  }
 else {
    return extractResultAsProps(result,manager);
  }
}","public Object flattenResult(Object result,RemoteObjectManager manager){
  if (result == null) {
    return null;
  }
 else   if (result instanceof Enum<?>) {
    return result.toString();
  }
 else   if (isPrimitive(result)) {
    return result;
  }
 else   if (result instanceof List<?>) {
    return flattenResultList((List<?>)result,manager);
  }
 else   if (result instanceof Map<?,?>) {
    return flattenParamsMap((Map<String,?>)result,false);
  }
 else   if (result.getClass().getAnnotation(RemoteClass.class) != null) {
    return extractObjectRefFromRemoteClass(result,manager);
  }
 else {
    return extractResultAsProps(result,manager);
  }
}"
10778,"public Object unflattenValue(String paramName,Type type,Object value,ObjectRefsManager manager){
  if (type instanceof Class) {
    Class<?> clazz=(Class<?>)type;
    if (isPrimitiveClass(clazz)) {
      return value;
    }
 else     if (clazz.isEnum()) {
      return unflattenEnumConstant(type,value,clazz);
    }
 else {
      if (value instanceof String) {
        return unflattenRemoteObject(type,(String)value,manager);
      }
 else       if (value instanceof Props) {
        Props props=(Props)value;
        Class<?> newClazz=getOrCreateClass(props);
        if (newClazz != null) {
          clazz=newClazz;
        }
        return unflattedComplexType(clazz,props,manager);
      }
 else {
        throw new ProtocolException(""String_Node_Str"" + type + ""String_Node_Str"");
      }
    }
  }
 else   if (type instanceof ParameterizedType) {
    ParameterizedType pType=(ParameterizedType)type;
    if (((Class<?>)pType.getRawType()).isAssignableFrom(List.class)) {
      return unflattenList(paramName,(List<?>)value,pType.getActualTypeArguments()[0],manager);
    }
    if (((Class<?>)pType.getRawType()).isAssignableFrom(Map.class)) {
      return unflattenMap(paramName,(Props)value,pType.getActualTypeArguments()[0],manager);
    }
  }
  throw new ProtocolException(""String_Node_Str"" + type + ""String_Node_Str"");
}","public Object unflattenValue(String paramName,Type type,Object value,ObjectRefsManager manager){
  if (type instanceof Class) {
    Class<?> clazz=(Class<?>)type;
    if (isPrimitiveClass(clazz)) {
      return value;
    }
 else     if (clazz.isEnum()) {
      return unflattenEnumConstant(type,value,clazz);
    }
 else {
      if (value instanceof String) {
        return unflattenRemoteObject(type,(String)value,manager);
      }
 else       if (value instanceof Props) {
        Props props=(Props)value;
        Class<?> newClazz=getOrCreateClass(props);
        if (newClazz != null) {
          clazz=newClazz;
        }
        return unflattedComplexType(clazz,props,manager);
      }
 else {
        throw new ProtocolException(""String_Node_Str"" + type + ""String_Node_Str"");
      }
    }
  }
 else   if (type instanceof ParameterizedType) {
    ParameterizedType pType=(ParameterizedType)type;
    if (((Class<?>)pType.getRawType()).isAssignableFrom(List.class)) {
      return unflattenList(paramName,(List<?>)value,pType.getActualTypeArguments()[0],manager);
    }
    if (((Class<?>)pType.getRawType()).isAssignableFrom(Map.class)) {
      return unflattenMap(paramName,(Props)value,pType.getActualTypeArguments()[1],manager);
    }
  }
  throw new ProtocolException(""String_Node_Str"" + type + ""String_Node_Str"");
}"
10779,"private Object unflattenMap(String paramName,Props value,Type type,ObjectRefsManager manager){
  Map<String,Object> map=new HashMap<String,Object>();
  if (value != null) {
    for (    Prop p : value) {
      map.put(p.getName(),p.getValue());
    }
  }
  return map;
}","private Object unflattenMap(String paramName,Props value,Type type,ObjectRefsManager manager){
  Map<String,Object> map=new HashMap<String,Object>();
  if (value != null) {
    for (    Prop p : value) {
      map.put(p.getName(),unflattenValue(paramName + ""String_Node_Str"" + p.getName()+ ""String_Node_Str"",type,p.getValue(),manager));
    }
  }
  return map;
}"
10780,"public synchronized void connectIfNecessary() throws IOException {
  if (((wsSession == null) || !wsSession.isOpen()) && !clientClose) {
    try {
      if (client == null) {
        client=new WebSocketClient();
        client.setConnectTimeout(this.connectionTimeout);
        client.start();
      }
 else {
        log.debug(""String_Node_Str"",label);
      }
      if (heartbeating) {
        enableHeartbeat();
      }
      Thread.sleep(100);
      SimpleEchoSocket socket=new SimpleEchoSocket();
      ClientUpgradeRequest request=new ClientUpgradeRequest();
      wsSession=client.connect(socket,new URI(url),request).get();
      wsSession.setIdleTimeout(this.idleTimeout);
    }
 catch (    Exception e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      this.closeClient();
      throw new KurentoException(label + ""String_Node_Str"" + url,e);
    }
    try {
      if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
        if (connectionListener != null) {
          connectionListener.connectionFailed();
        }
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
      if (session == null) {
        session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
        handlerManager.afterConnectionEstablished(session);
      }
 else {
        try {
          rsHelper.sendRequest(METHOD_RECONNECT,String.class);
          log.info(""String_Node_Str"",label,url);
        }
 catch (        JsonRpcErrorException e) {
          if (e.getCode() == 40007) {
            rsHelper.setSessionId(null);
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}","public synchronized void connectIfNecessary() throws IOException {
  if (((wsSession == null) || !wsSession.isOpen()) && !clientClose) {
    try {
      if (client == null) {
        client=new WebSocketClient();
        client.setConnectTimeout(this.connectionTimeout);
        client.start();
      }
 else {
        log.debug(""String_Node_Str"",label);
      }
      if (heartbeating) {
        enableHeartbeat();
      }
      Thread.sleep(100);
      SimpleEchoSocket socket=new SimpleEchoSocket();
      ClientUpgradeRequest request=new ClientUpgradeRequest();
      wsSession=client.connect(socket,new URI(url),request).get(this.connectionTimeout,TimeUnit.MILLISECONDS);
      wsSession.setIdleTimeout(this.idleTimeout);
    }
 catch (    TimeoutException e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      this.closeClient();
      throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
    }
catch (    Exception e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      this.closeClient();
      throw new KurentoException(label + ""String_Node_Str"" + url,e);
    }
    try {
      if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
        if (connectionListener != null) {
          connectionListener.connectionFailed();
        }
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
      if (session == null) {
        session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
        handlerManager.afterConnectionEstablished(session);
      }
 else {
        try {
          rsHelper.sendRequest(METHOD_RECONNECT,String.class);
          log.info(""String_Node_Str"",label,url);
        }
 catch (        JsonRpcErrorException e) {
          if (e.getCode() == 40007) {
            rsHelper.setSessionId(null);
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}"
10781,"@Override public void run(){
  try {
    JsonObject response=sendRequest(METHOD_PING).getAsJsonObject();
    if (!PONG.equals(response.get(PONG_PAYLOAD).getAsString())) {
      stopHeartbeatOnFailure();
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",label,e);
    stopHeartbeatOnFailure();
  }
}","@Override public void run(){
  try {
    JsonObject response=sendRequest(METHOD_PING).getAsJsonObject();
    if (!PONG.equals(response.get(PONG_PAYLOAD).getAsString())) {
      closeHeartbeatOnFailure();
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",label);
    closeHeartbeatOnFailure();
  }
}"
10782,"public void disableHeartbeat(){
  this.heartbeating=false;
  heartbeat.cancel(false);
}","public void disableHeartbeat(){
  if (heartbeating) {
    this.heartbeating=false;
    heartbeat.cancel(true);
    scheduler.shutdownNow();
  }
}"
10783,"public void enableHeartbeat(int interval){
  this.heartbeatInterval=interval;
  heartbeat=scheduler.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      try {
        JsonObject response=sendRequest(METHOD_PING).getAsJsonObject();
        if (!PONG.equals(response.get(PONG_PAYLOAD).getAsString())) {
          stopHeartbeatOnFailure();
        }
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"",label,e);
        stopHeartbeatOnFailure();
      }
    }
  }
,0,heartbeatInterval,MILLISECONDS);
}","public void enableHeartbeat(int interval){
  this.heartbeating=true;
  this.heartbeatInterval=interval;
  if (scheduler.isShutdown()) {
    scheduler=Executors.newSingleThreadScheduledExecutor();
  }
  heartbeat=scheduler.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      try {
        JsonObject response=sendRequest(METHOD_PING).getAsJsonObject();
        if (!PONG.equals(response.get(PONG_PAYLOAD).getAsString())) {
          closeHeartbeatOnFailure();
        }
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"",label);
        closeHeartbeatOnFailure();
      }
    }
  }
,0,heartbeatInterval,MILLISECONDS);
}"
10784,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private <R,P>Response<R> localSendRequest(Request<P> request,Class<R> resultClass){
  String jsonRequest=request.toString();
  log.debug(""String_Node_Str"",jsonRequest);
  Request<JsonObject> newRequest=JsonUtils.fromJsonRequest(jsonRequest,JsonObject.class);
  final Response<JsonObject>[] response=new Response[1];
  ClientSession clientSession=new ClientSession(""String_Node_Str"",null,new JsonRpcRequestSenderHelper(){
    @Override protected void internalSendRequest(    Request<? extends Object> request,    Class<JsonElement> clazz,    final Continuation<Response<JsonElement>> continuation){
      try {
        handlerManager.handleRequest(session,(Request<JsonElement>)request,new ResponseSender(){
          @Override public void sendResponse(          Message message) throws IOException {
            continuation.onSuccess((Response<JsonElement>)message);
          }
        }
);
      }
 catch (      IOException e) {
        continuation.onError(e);
      }
    }
    @Override protected <P2,R2>Response<R2> internalSendRequest(    Request<P2> request,    Class<R2> resultClass) throws IOException {
      final Object[] response=new Object[1];
      try {
        handlerManager.handleRequest(session,(Request<JsonElement>)request,new ResponseSender(){
          @Override public void sendResponse(          Message message) throws IOException {
            response[0]=message;
          }
        }
);
        Response<R2> response2=(Response<R2>)response[0];
        Object result=response2.getResult();
        if (result == null || resultClass.isAssignableFrom(result.getClass())) {
          return response2;
        }
 else         if (resultClass == JsonElement.class) {
          response2.setResult((R2)JsonUtils.toJsonElement(result));
          return response2;
        }
 else {
          throw new ClassCastException(""String_Node_Str"" + result + ""String_Node_Str""+ resultClass);
        }
      }
 catch (      IOException e) {
        return new Response<R2>(request.getId(),ResponseError.newFromException(e));
      }
    }
  }
);
  TransactionImpl t=new TransactionImpl(clientSession,newRequest,new ResponseSender(){
    @Override public void sendResponse(    Message message) throws IOException {
      response[0]=(Response<JsonObject>)message;
    }
  }
);
  try {
    remoteHandler.handleRequest(t,(Request)request);
  }
 catch (  Exception e) {
    ResponseError error=ResponseError.newFromException(e);
    return new Response<>(request.getId(),error);
  }
  if (response[0] != null) {
    Response<R> responseObj=(Response<R>)response[0];
    if (responseObj.getId() == null) {
      responseObj.setId(request.getId());
    }
    String jsonResponse=responseObj.toString();
    Response<R> newResponse=JsonUtils.fromJsonResponse(jsonResponse,resultClass);
    newResponse.setId(request.getId());
    return newResponse;
  }
  return new Response<>(request.getId());
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private <R,P>Response<R> localSendRequest(Request<P> request,Class<R> resultClass){
  String jsonRequest=request.toString();
  log.debug(""String_Node_Str"",jsonRequest);
  Request<JsonObject> newRequest=JsonUtils.fromJsonRequest(jsonRequest,JsonObject.class);
  final Response<JsonObject>[] response=new Response[1];
  ClientSession clientSession=new ClientSession(""String_Node_Str"",null,new JsonRpcRequestSenderHelper(){
    @Override protected void internalSendRequest(    Request<? extends Object> request,    Class<JsonElement> clazz,    final Continuation<Response<JsonElement>> continuation){
      try {
        handlerManager.handleRequest(session,(Request<JsonElement>)request,new ResponseSender(){
          @Override public void sendResponse(          Message message) throws IOException {
            continuation.onSuccess((Response<JsonElement>)message);
          }
          @Override public void sendPingResponse(          Message message) throws IOException {
            sendResponse(message);
          }
        }
);
      }
 catch (      IOException e) {
        continuation.onError(e);
      }
    }
    @Override protected <P2,R2>Response<R2> internalSendRequest(    Request<P2> request,    Class<R2> resultClass) throws IOException {
      final Object[] response=new Object[1];
      try {
        handlerManager.handleRequest(session,(Request<JsonElement>)request,new ResponseSender(){
          @Override public void sendResponse(          Message message) throws IOException {
            response[0]=message;
          }
          @Override public void sendPingResponse(          Message message) throws IOException {
            sendResponse(message);
          }
        }
);
        Response<R2> response2=(Response<R2>)response[0];
        Object result=response2.getResult();
        if (result == null || resultClass.isAssignableFrom(result.getClass())) {
          return response2;
        }
 else         if (resultClass == JsonElement.class) {
          response2.setResult((R2)JsonUtils.toJsonElement(result));
          return response2;
        }
 else {
          throw new ClassCastException(""String_Node_Str"" + result + ""String_Node_Str""+ resultClass);
        }
      }
 catch (      IOException e) {
        return new Response<R2>(request.getId(),ResponseError.newFromException(e));
      }
    }
  }
);
  TransactionImpl t=new TransactionImpl(clientSession,newRequest,new ResponseSender(){
    @Override public void sendResponse(    Message message) throws IOException {
      response[0]=(Response<JsonObject>)message;
    }
    @Override public void sendPingResponse(    Message message) throws IOException {
      sendResponse(message);
    }
  }
);
  try {
    remoteHandler.handleRequest(t,(Request)request);
  }
 catch (  Exception e) {
    ResponseError error=ResponseError.newFromException(e);
    return new Response<>(request.getId(),error);
  }
  if (response[0] != null) {
    Response<R> responseObj=(Response<R>)response[0];
    if (responseObj.getId() == null) {
      responseObj.setId(request.getId());
    }
    String jsonResponse=responseObj.toString();
    Response<R> newResponse=JsonUtils.fromJsonResponse(jsonResponse,resultClass);
    newResponse.setId(request.getId());
    return newResponse;
  }
  return new Response<>(request.getId());
}"
10785,"@Override protected <P2,R2>Response<R2> internalSendRequest(Request<P2> request,Class<R2> resultClass) throws IOException {
  final Object[] response=new Object[1];
  try {
    handlerManager.handleRequest(session,(Request<JsonElement>)request,new ResponseSender(){
      @Override public void sendResponse(      Message message) throws IOException {
        response[0]=message;
      }
    }
);
    Response<R2> response2=(Response<R2>)response[0];
    Object result=response2.getResult();
    if (result == null || resultClass.isAssignableFrom(result.getClass())) {
      return response2;
    }
 else     if (resultClass == JsonElement.class) {
      response2.setResult((R2)JsonUtils.toJsonElement(result));
      return response2;
    }
 else {
      throw new ClassCastException(""String_Node_Str"" + result + ""String_Node_Str""+ resultClass);
    }
  }
 catch (  IOException e) {
    return new Response<R2>(request.getId(),ResponseError.newFromException(e));
  }
}","@Override protected <P2,R2>Response<R2> internalSendRequest(Request<P2> request,Class<R2> resultClass) throws IOException {
  final Object[] response=new Object[1];
  try {
    handlerManager.handleRequest(session,(Request<JsonElement>)request,new ResponseSender(){
      @Override public void sendResponse(      Message message) throws IOException {
        response[0]=message;
      }
      @Override public void sendPingResponse(      Message message) throws IOException {
        sendResponse(message);
      }
    }
);
    Response<R2> response2=(Response<R2>)response[0];
    Object result=response2.getResult();
    if (result == null || resultClass.isAssignableFrom(result.getClass())) {
      return response2;
    }
 else     if (resultClass == JsonElement.class) {
      response2.setResult((R2)JsonUtils.toJsonElement(result));
      return response2;
    }
 else {
      throw new ClassCastException(""String_Node_Str"" + result + ""String_Node_Str""+ resultClass);
    }
  }
 catch (  IOException e) {
    return new Response<R2>(request.getId(),ResponseError.newFromException(e));
  }
}"
10786,"public synchronized void connectIfNecessary() throws IOException {
  if ((wsSession == null) || !wsSession.isOpen()) {
    try {
      if (client == null) {
        client=new WebSocketClient();
        client.setConnectTimeout(this.connectionTimeout);
        client.start();
      }
 else {
        log.debug(""String_Node_Str"",label);
      }
      Thread.sleep(100);
      SimpleEchoSocket socket=new SimpleEchoSocket();
      ClientUpgradeRequest request=new ClientUpgradeRequest();
      wsSession=client.connect(socket,new URI(url),request).get();
      wsSession.setIdleTimeout(this.idleTimeout);
    }
 catch (    Exception e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      this.closeClient();
      throw new KurentoException(label + ""String_Node_Str"" + url,e);
    }
    try {
      if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
        if (connectionListener != null) {
          connectionListener.connectionFailed();
        }
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
      if (session == null) {
        session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
        handlerManager.afterConnectionEstablished(session);
      }
 else {
        try {
          rsHelper.sendRequest(METHOD_RECONNECT,String.class);
          log.info(""String_Node_Str"",label,url);
        }
 catch (        JsonRpcErrorException e) {
          if (e.getCode() == 40007) {
            rsHelper.setSessionId(null);
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}","public synchronized void connectIfNecessary() throws IOException {
  if (((wsSession == null) || !wsSession.isOpen()) && !clientClose) {
    try {
      if (client == null) {
        client=new WebSocketClient();
        client.setConnectTimeout(this.connectionTimeout);
        client.start();
      }
 else {
        log.debug(""String_Node_Str"",label);
      }
      if (heartbeating) {
        enableHeartbeat();
      }
      Thread.sleep(100);
      SimpleEchoSocket socket=new SimpleEchoSocket();
      ClientUpgradeRequest request=new ClientUpgradeRequest();
      wsSession=client.connect(socket,new URI(url),request).get();
      wsSession.setIdleTimeout(this.idleTimeout);
    }
 catch (    Exception e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      this.closeClient();
      throw new KurentoException(label + ""String_Node_Str"" + url,e);
    }
    try {
      if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
        if (connectionListener != null) {
          connectionListener.connectionFailed();
        }
        this.closeClient();
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
      if (session == null) {
        session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
        handlerManager.afterConnectionEstablished(session);
      }
 else {
        try {
          rsHelper.sendRequest(METHOD_RECONNECT,String.class);
          log.info(""String_Node_Str"",label,url);
        }
 catch (        JsonRpcErrorException e) {
          if (e.getCode() == 40007) {
            rsHelper.setSessionId(null);
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}"
10787,"private <P,R>Response<R> internalSendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  connectIfNecessary();
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  String jsonMessage=request.toString();
  log.debug(""String_Node_Str"",label,jsonMessage.trim());
synchronized (wsSession) {
    wsSession.getRemote().sendString(jsonMessage);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJson;
  try {
    responseJson=responseFuture.get(TIMEOUT,TimeUnit.MILLISECONDS);
    log.debug(""String_Node_Str"",label,responseJson.toString());
    Response<R> response=MessageUtils.convertResponse(responseJson,resultClass);
    if (response.getSessionId() != null) {
      session.setSessionId(response.getSessionId());
    }
    return response;
  }
 catch (  InterruptedException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(label + ""String_Node_Str"" + TIMEOUT+ ""String_Node_Str""+ request.getId(),e);
  }
}","private <P,R>Response<R> internalSendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  connectIfNecessary();
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  boolean isPing=false;
  String jsonMessage=request.toString();
  if (METHOD_PING.equals(request.getMethod())) {
    isPing=true;
    log.trace(""String_Node_Str"",label,jsonMessage.trim());
  }
 else {
    log.debug(""String_Node_Str"",label,jsonMessage.trim());
  }
synchronized (wsSession) {
    wsSession.getRemote().sendString(jsonMessage);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJson;
  try {
    responseJson=responseFuture.get(TIMEOUT,TimeUnit.MILLISECONDS);
    if (isPing) {
      log.trace(""String_Node_Str"",label,responseJson.toString());
    }
 else {
      log.debug(""String_Node_Str"",label,responseJson.toString());
    }
    Response<R> response=MessageUtils.convertResponse(responseJson,resultClass);
    if (response.getSessionId() != null) {
      session.setSessionId(response.getSessionId());
    }
    return response;
  }
 catch (  InterruptedException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new KurentoException(label + ""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(label + ""String_Node_Str"" + TIMEOUT+ ""String_Node_Str""+ request.getId(),e);
  }
}"
10788,"@OnWebSocketConnect public void onConnect(Session session){
  wsSession=session;
  rs=new ResponseSender(){
    @Override public void sendResponse(    Message message) throws IOException {
      String jsonMessage=message.toString();
      log.debug(""String_Node_Str"",label,jsonMessage);
synchronized (wsSession) {
        wsSession.getRemote().sendString(jsonMessage);
      }
    }
  }
;
  latch.countDown();
  if (connectionListener != null && !reconnecting) {
    connectionListener.connected();
  }
}","@OnWebSocketConnect public void onConnect(Session session){
  wsSession=session;
  rs=new ResponseSender(){
    @Override public void sendResponse(    Message message) throws IOException {
      String jsonMessage=message.toString();
      log.debug(""String_Node_Str"",label,jsonMessage);
synchronized (wsSession) {
        wsSession.getRemote().sendString(jsonMessage);
      }
    }
    @Override public void sendPingResponse(    Message message) throws IOException {
      String jsonMessage=message.toString();
      log.trace(""String_Node_Str"",label,jsonMessage);
synchronized (wsSession) {
        wsSession.getRemote().sendString(jsonMessage);
      }
    }
  }
;
  latch.countDown();
  if (connectionListener != null && !reconnecting) {
    connectionListener.connected();
  }
}"
10789,"@Override public void close() throws IOException {
  if (wsSession != null) {
    clientClose=true;
    wsSession.close();
    client.destroy();
  }
}","@Override public void close() throws IOException {
  if (wsSession != null) {
    log.debug(""String_Node_Str"",label);
    this.disableHeartbeat();
    clientClose=true;
    wsSession.close();
    this.closeClient();
  }
}"
10790,"@Override public void handleRequest(HttpServletRequest servletRequest,final HttpServletResponse servletResponse) throws ServletException, IOException {
  String messageJson=getBodyAsString(servletRequest);
  ServerSessionFactory factory=new ServerSessionFactory(){
    @Override public ServerSession createSession(    String sessionId,    Object registerInfo,    SessionsManager sessionsManager){
      return new HttpRequestServerSession(sessionId,registerInfo,sessionsManager,null);
    }
    @Override public void updateSessionOnReconnection(    ServerSession session){
      throw new UnsupportedOperationException();
    }
  }
;
  ResponseSender responseSender=new ResponseSender(){
    @Override public void sendResponse(    Message message) throws IOException {
      servletResponse.getWriter().println(message);
    }
  }
;
  String internalSessionId=null;
  HttpSession session=servletRequest.getSession(false);
  if (session != null) {
    internalSessionId=session.getId();
  }
  protocolManager.processMessage(messageJson,factory,responseSender,internalSessionId);
}","@Override public void handleRequest(HttpServletRequest servletRequest,final HttpServletResponse servletResponse) throws ServletException, IOException {
  String messageJson=getBodyAsString(servletRequest);
  ServerSessionFactory factory=new ServerSessionFactory(){
    @Override public ServerSession createSession(    String sessionId,    Object registerInfo,    SessionsManager sessionsManager){
      return new HttpRequestServerSession(sessionId,registerInfo,sessionsManager,null);
    }
    @Override public void updateSessionOnReconnection(    ServerSession session){
      throw new UnsupportedOperationException();
    }
  }
;
  ResponseSender responseSender=new ResponseSender(){
    @Override public void sendResponse(    Message message) throws IOException {
      servletResponse.getWriter().println(message);
    }
    @Override public void sendPingResponse(    Message message) throws IOException {
      sendResponse(message);
    }
  }
;
  String internalSessionId=null;
  HttpSession session=servletRequest.getSession(false);
  if (session != null) {
    internalSessionId=session.getId();
  }
  protocolManager.processMessage(messageJson,factory,responseSender,internalSessionId);
}"
10791,"protected void playFileAsLocal(BrowserType browserType,String recordingFile,int playtime,int x,int y,Color... expectedColors) throws InterruptedException {
  BrowserClient browserClient=new BrowserClient.Builder().browserType(browserType).client(Client.WEBRTC).protocol(Protocol.FILE).build();
  browserClient.init();
  String browserkey=""String_Node_Str"";
  addBrowserClient(browserkey,browserClient);
  getBrowser(browserkey).subscribeEvents(""String_Node_Str"");
  browserClient.executeScript(""String_Node_Str"" + VideoTagType.REMOTE.getId() + ""String_Node_Str""+ recordingFile+ ""String_Node_Str"");
  browserClient.executeScript(""String_Node_Str"" + VideoTagType.REMOTE.getId() + ""String_Node_Str"");
  makeAssertions(browserkey,""String_Node_Str"",browserClient,playtime,x,y,null,expectedColors);
}","protected void playFileAsLocal(BrowserType browserType,String recordingFile,int playtime,int x,int y,Color... expectedColors) throws InterruptedException {
  BrowserClient browserClient=new BrowserClient.Builder().browserType(browserType).client(Client.WEBRTC).protocol(Protocol.FILE).build();
  String browserkey=""String_Node_Str"";
  addBrowserClient(browserkey,browserClient);
  getBrowser(browserkey).subscribeEvents(""String_Node_Str"");
  browserClient.executeScript(""String_Node_Str"" + VideoTagType.REMOTE.getId() + ""String_Node_Str""+ recordingFile+ ""String_Node_Str"");
  browserClient.executeScript(""String_Node_Str"" + VideoTagType.REMOTE.getId() + ""String_Node_Str"");
  makeAssertions(browserkey,""String_Node_Str"",browserClient,playtime,x,y,null,expectedColors);
}"
10792,"protected void playFileWithPipeline(BrowserType browserType,String recordingFile,int playtime,int x,int y,Color... expectedColors) throws InterruptedException {
  MediaPipeline mp=kurentoClient.createMediaPipeline();
  PlayerEndpoint playerEP=new PlayerEndpoint.Builder(mp,recordingFile).build();
  WebRtcEndpoint webRtcEP=new WebRtcEndpoint.Builder(mp).build();
  playerEP.connect(webRtcEP);
  BrowserClient browserClient=new BrowserClient.Builder().browserType(browserType).client(Client.WEBRTC).build();
  browserClient.init();
  String browserkey=""String_Node_Str"";
  addBrowserClient(browserkey,browserClient);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  playerEP.addEndOfStreamListener(new EventListener<EndOfStreamEvent>(){
    @Override public void onEvent(    EndOfStreamEvent event){
      eosLatch.countDown();
    }
  }
);
  getBrowser(browserkey).subscribeEvents(""String_Node_Str"");
  getBrowser(browserkey).initWebRtc(webRtcEP,WebRtcChannel.AUDIO_AND_VIDEO,WebRtcMode.RCV_ONLY);
  playerEP.play();
  makeAssertions(browserkey,""String_Node_Str"",browserClient,playtime,x,y,eosLatch,expectedColors);
  if (mp != null) {
    mp.release();
  }
}","protected void playFileWithPipeline(BrowserType browserType,String recordingFile,int playtime,int x,int y,Color... expectedColors) throws InterruptedException {
  MediaPipeline mp=kurentoClient.createMediaPipeline();
  PlayerEndpoint playerEP=new PlayerEndpoint.Builder(mp,recordingFile).build();
  WebRtcEndpoint webRtcEP=new WebRtcEndpoint.Builder(mp).build();
  playerEP.connect(webRtcEP);
  BrowserClient browserClient=new BrowserClient.Builder().browserType(browserType).client(Client.WEBRTC).build();
  String browserkey=""String_Node_Str"";
  addBrowserClient(browserkey,browserClient);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  playerEP.addEndOfStreamListener(new EventListener<EndOfStreamEvent>(){
    @Override public void onEvent(    EndOfStreamEvent event){
      eosLatch.countDown();
    }
  }
);
  getBrowser(browserkey).subscribeEvents(""String_Node_Str"");
  getBrowser(browserkey).initWebRtc(webRtcEP,WebRtcChannel.AUDIO_AND_VIDEO,WebRtcMode.RCV_ONLY);
  playerEP.play();
  makeAssertions(browserkey,""String_Node_Str"",browserClient,playtime,x,y,eosLatch,expectedColors);
  if (mp != null) {
    mp.release();
  }
}"
10793,"public void addBrowserClient(String browserkey,BrowserClient browserClient){
  testScenario.getBrowserMap().put(browserkey,browserClient);
}","public void addBrowserClient(String browserKey,BrowserClient browserClient){
  testScenario.getBrowserMap().put(browserKey,browserClient);
  initBrowserClient(browserKey,browserClient);
}"
10794,"@Before public void setupKurentoTest(){
  if (testScenario != null) {
    for (    String browserKey : testScenario.getBrowserMap().keySet()) {
      BrowserClient browserClient=testScenario.getBrowserMap().get(browserKey);
      browserClient.setId(browserKey);
      browserClient.setName(testName.getMethodName());
      browserClient.init();
      String kurentoTestJs=""String_Node_Str"";
      kurentoTestJs+=""String_Node_Str"";
      kurentoTestJs+=""String_Node_Str"";
      kurentoTestJs+=""String_Node_Str"";
      browserClient.executeScript(kurentoTestJs);
    }
  }
}","@Before public void setupKurentoTest(){
  if (testScenario != null) {
    for (    String browserKey : testScenario.getBrowserMap().keySet()) {
      BrowserClient browserClient=testScenario.getBrowserMap().get(browserKey);
      initBrowserClient(browserKey,browserClient);
    }
  }
}"
10795,"public void waitForHostIsReachable(URL url,int timeout){
  log.debug(""String_Node_Str"",url);
  long timeoutMillis=TimeUnit.MILLISECONDS.convert(timeout,TimeUnit.SECONDS);
  long endTimeMillis=System.currentTimeMillis() + timeoutMillis;
  try {
    TrustManager[] trustAllCerts=new TrustManager[]{new X509TrustManager(){
      public java.security.cert.X509Certificate[] getAcceptedIssuers(){
        return null;
      }
      public void checkClientTrusted(      X509Certificate[] certs,      String authType){
      }
      public void checkServerTrusted(      X509Certificate[] certs,      String authType){
      }
    }
};
    SSLContext sc=SSLContext.getInstance(""String_Node_Str"");
    sc.init(null,trustAllCerts,new java.security.SecureRandom());
    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
    HostnameVerifier allHostsValid=new HostnameVerifier(){
      public boolean verify(      String hostname,      SSLSession session){
        return true;
      }
    }
;
    HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
    HttpURLConnection connection=(HttpURLConnection)url.openConnection();
    connection.setConnectTimeout((int)timeoutMillis);
    connection.setReadTimeout((int)timeoutMillis);
    connection.setRequestMethod(""String_Node_Str"");
    int responseCode=0;
    while (true) {
      try {
        responseCode=connection.getResponseCode();
        break;
      }
 catch (      SSLHandshakeException ssl) {
        log.warn(""String_Node_Str"",ssl.getMessage());
        Thread.sleep(1000);
      }
      if (System.currentTimeMillis() > endTimeMillis) {
        break;
      }
    }
    if (responseCode != HttpURLConnection.HTTP_OK) {
      Assert.fail(""String_Node_Str"" + url + ""String_Node_Str""+ responseCode);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(""String_Node_Str"" + url + ""String_Node_Str""+ timeout+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
  }
  log.debug(""String_Node_Str"",url);
}","public void waitForHostIsReachable(URL url,int timeout){
  log.debug(""String_Node_Str"",url);
  long timeoutMillis=TimeUnit.MILLISECONDS.convert(timeout,TimeUnit.SECONDS);
  long endTimeMillis=System.currentTimeMillis() + timeoutMillis;
  try {
    TrustManager[] trustAllCerts=new TrustManager[]{new X509TrustManager(){
      public java.security.cert.X509Certificate[] getAcceptedIssuers(){
        return null;
      }
      public void checkClientTrusted(      X509Certificate[] certs,      String authType){
      }
      public void checkServerTrusted(      X509Certificate[] certs,      String authType){
      }
    }
};
    SSLContext sc=SSLContext.getInstance(""String_Node_Str"");
    sc.init(null,trustAllCerts,new java.security.SecureRandom());
    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
    HostnameVerifier allHostsValid=new HostnameVerifier(){
      public boolean verify(      String hostname,      SSLSession session){
        return true;
      }
    }
;
    HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
    int responseCode=0;
    while (true) {
      try {
        HttpURLConnection connection=(HttpURLConnection)url.openConnection();
        connection.setConnectTimeout((int)timeoutMillis);
        connection.setReadTimeout((int)timeoutMillis);
        connection.setRequestMethod(""String_Node_Str"");
        responseCode=connection.getResponseCode();
        break;
      }
 catch (      SSLHandshakeException ssl) {
        log.warn(""String_Node_Str"",ssl.getMessage());
        Thread.sleep(1000);
      }
      if (System.currentTimeMillis() > endTimeMillis) {
        break;
      }
    }
    if (responseCode != HttpURLConnection.HTTP_OK) {
      Assert.fail(""String_Node_Str"" + url + ""String_Node_Str""+ responseCode);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(""String_Node_Str"" + url + ""String_Node_Str""+ timeout+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
  }
  log.debug(""String_Node_Str"",url);
}"
10796,"public static String getSimpleTestName(){
  String out=testName;
  if (out.indexOf(""String_Node_Str"") != -1) {
    out=out.substring(0,out.indexOf(""String_Node_Str"")) + ""String_Node_Str"";
  }
  return out;
}","public static String getSimpleTestName(){
  String out=testName;
  if (testName != null && out.indexOf(""String_Node_Str"") != -1) {
    out=out.substring(0,out.indexOf(""String_Node_Str"")) + ""String_Node_Str"";
  }
  return out;
}"
10797,"public Object unflattenValue(String paramName,Type type,Object value,ObjectRefsManager manager){
  if (type instanceof Class) {
    Class<?> clazz=(Class<?>)type;
    if (isPrimitiveClass(clazz)) {
      return value;
    }
 else     if (clazz.isEnum()) {
      return unflattenEnumConstant(type,value,clazz);
    }
 else {
      if (value instanceof String) {
        return unflattenRemoteObject(type,(String)value,manager);
      }
 else       if (value instanceof Props) {
        return unflattedComplexType(clazz,(Props)value,manager);
      }
 else {
        throw new ProtocolException(""String_Node_Str"" + type + ""String_Node_Str"");
      }
    }
  }
 else   if (type instanceof ParameterizedType) {
    ParameterizedType pType=(ParameterizedType)type;
    if (((Class<?>)pType.getRawType()).isAssignableFrom(List.class)) {
      return unflattenList(paramName,(List<?>)value,pType.getActualTypeArguments()[0],manager);
    }
  }
  throw new ProtocolException(""String_Node_Str"" + type + ""String_Node_Str"");
}","public Object unflattenValue(String paramName,Type type,Object value,ObjectRefsManager manager){
  if (type instanceof Class) {
    Class<?> clazz=(Class<?>)type;
    if (isPrimitiveClass(clazz)) {
      return value;
    }
 else     if (clazz.isEnum()) {
      return unflattenEnumConstant(type,value,clazz);
    }
 else {
      if (value instanceof String) {
        return unflattenRemoteObject(type,(String)value,manager);
      }
 else       if (value instanceof Props) {
        return unflattedComplexType(clazz,(Props)value,manager);
      }
 else       if (value instanceof KurentoObject) {
        return value;
      }
 else {
        throw new ProtocolException(""String_Node_Str"" + type + ""String_Node_Str"");
      }
    }
  }
 else   if (type instanceof ParameterizedType) {
    ParameterizedType pType=(ParameterizedType)type;
    if (((Class<?>)pType.getRawType()).isAssignableFrom(List.class)) {
      return unflattenList(paramName,(List<?>)value,pType.getActualTypeArguments()[0],manager);
    }
  }
  throw new ProtocolException(""String_Node_Str"" + type + ""String_Node_Str"");
}"
10798,"protected void sendKeepAlives(){
  if (mode == Mode.PER_ID_AS_SESSION) {
    for (    String id : ids.keySet()) {
      JsonObject params=new JsonObject();
      params.addProperty(""String_Node_Str"",id);
      try {
        client.sendRequest(""String_Node_Str"",params);
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"" + id,e);
      }
    }
  }
 else   if (mode == Mode.PER_ID_AS_MEDIAPIPELINE) {
    for (    String id : ids.keySet()) {
      JsonObject params=new JsonObject();
      params.addProperty(""String_Node_Str"",id);
      try {
        client.sendRequest(new Request<JsonObject>(id,null,""String_Node_Str"",params));
      }
 catch (      JsonRpcErrorException e) {
        log.warn(""String_Node_Str"" + ""String_Node_Str"",id,e.getMessage());
      }
catch (      IOException e) {
        log.error(""String_Node_Str"" + id,e);
      }
    }
  }
 else   if (mode == Mode.PER_CLIENT) {
    try {
      client.sendRequest(""String_Node_Str"",null);
    }
 catch (    IOException e) {
      throw new KurentoException(""String_Node_Str"" + client.getSession().getSessionId());
    }
  }
 else {
    throw new KurentoException(""String_Node_Str"" + mode);
  }
  log.debug(""String_Node_Str"");
}","protected void sendKeepAlives(){
  if (mode == Mode.PER_ID_AS_SESSION) {
    for (    String id : ids.keySet()) {
      JsonObject params=new JsonObject();
      params.addProperty(""String_Node_Str"",id);
      try {
        client.sendRequest(""String_Node_Str"",params);
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"" + id,e);
      }
    }
  }
 else   if (mode == Mode.PER_ID_AS_MEDIAPIPELINE) {
    for (    String id : ids.keySet()) {
      JsonObject params=new JsonObject();
      params.addProperty(""String_Node_Str"",id);
      try {
        client.sendRequest(new Request<>(id,null,""String_Node_Str"",params));
      }
 catch (      JsonRpcErrorException e) {
        log.warn(""String_Node_Str"" + ""String_Node_Str"",id,e.getMessage());
      }
catch (      IOException e) {
        log.error(""String_Node_Str"" + id,e);
      }
    }
  }
 else   if (mode == Mode.PER_CLIENT) {
    try {
      client.sendRequest(""String_Node_Str"",null);
    }
 catch (    IOException e) {
      throw new KurentoException(""String_Node_Str"" + client.getSession().getSessionId());
    }
  }
 else {
    throw new KurentoException(""String_Node_Str"" + mode);
  }
  log.debug(""String_Node_Str"");
}"
10799,"public synchronized void connectIfNecessary() throws IOException {
  if ((wsSession == null) || !wsSession.isOpen()) {
    try {
      client=new WebSocketClient();
      SimpleEchoSocket socket=new SimpleEchoSocket();
      client.start();
      ClientUpgradeRequest request=new ClientUpgradeRequest();
      Thread.sleep(100);
      wsSession=client.connect(socket,new URI(url),request).get();
    }
 catch (    Exception e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      if (client != null) {
        log.debug(""String_Node_Str"",label);
        try {
          client.stop();
        }
 catch (        Exception e1) {
          log.debug(""String_Node_Str"",label);
        }
        client=null;
      }
      throw new KurentoException(label + ""String_Node_Str"" + url,e);
    }
    try {
      if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
        if (connectionListener != null) {
          connectionListener.connectionFailed();
        }
        if (client != null) {
          log.debug(""String_Node_Str"",label);
          try {
            client.stop();
          }
 catch (          Exception e1) {
            log.debug(""String_Node_Str"",label);
          }
          client=null;
        }
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
      if (session == null) {
        session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
        handlerManager.afterConnectionEstablished(session);
      }
 else {
        try {
          rsHelper.sendRequest(METHOD_RECONNECT,String.class);
          log.info(""String_Node_Str"",label,url);
        }
 catch (        JsonRpcErrorException e) {
          if (e.getCode() == 40007) {
            rsHelper.setSessionId(null);
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}","public synchronized void connectIfNecessary() throws IOException {
  if ((wsSession == null) || !wsSession.isOpen()) {
    try {
      if (client == null) {
        client=new WebSocketClient();
        client.setConnectTimeout(this.connectionTimeout);
        client.start();
        Thread.sleep(100);
      }
      SimpleEchoSocket socket=new SimpleEchoSocket();
      ClientUpgradeRequest request=new ClientUpgradeRequest();
      wsSession=client.connect(socket,new URI(url),request).get();
      wsSession.setIdleTimeout(this.idleTimeout);
    }
 catch (    Exception e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      if (client != null) {
        log.debug(""String_Node_Str"",label);
        try {
          client.stop();
        }
 catch (        Exception e1) {
          log.debug(""String_Node_Str"",label);
        }
        client=null;
      }
      throw new KurentoException(label + ""String_Node_Str"" + url,e);
    }
    try {
      if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
        if (connectionListener != null) {
          connectionListener.connectionFailed();
        }
        if (client != null) {
          log.debug(""String_Node_Str"",label);
          try {
            client.stop();
          }
 catch (          Exception e1) {
            log.debug(""String_Node_Str"",label);
          }
          client=null;
        }
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
      if (session == null) {
        session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
        handlerManager.afterConnectionEstablished(session);
      }
 else {
        try {
          rsHelper.sendRequest(METHOD_RECONNECT,String.class);
          log.info(""String_Node_Str"",label,url);
        }
 catch (        JsonRpcErrorException e) {
          if (e.getCode() == 40007) {
            rsHelper.setSessionId(null);
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}"
10800,"public void updateWebSocketSession(WebSocketSession wsSession){
synchronized (this) {
    this.wsSession=wsSession;
  }
}","public void updateWebSocketSession(WebSocketSession wsSession){
synchronized (wsSession) {
    this.wsSession=wsSession;
  }
}"
10801,"private <P,R>Response<R> sendRequestWebSocket(Request<P> request,Class<R> resultClass){
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  try {
synchronized (this) {
      wsSession.sendMessage(new TextMessage(JsonUtils.toJson(request)));
    }
  }
 catch (  Exception e) {
    throw new KurentoException(""String_Node_Str"" + JsonUtils.toJson(request) + ""String_Node_Str""+ wsSession.getId()+ ""String_Node_Str"",e);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJsonObject;
  try {
    responseJsonObject=responseFuture.get();
  }
 catch (  InterruptedException e) {
    throw new JsonRpcException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new JsonRpcException(""String_Node_Str"",e);
  }
  return MessageUtils.convertResponse(responseJsonObject,resultClass);
}","private <P,R>Response<R> sendRequestWebSocket(Request<P> request,Class<R> resultClass){
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  try {
synchronized (wsSession) {
      wsSession.sendMessage(new TextMessage(JsonUtils.toJson(request)));
    }
  }
 catch (  Exception e) {
    throw new KurentoException(""String_Node_Str"" + JsonUtils.toJson(request) + ""String_Node_Str""+ wsSession.getId()+ ""String_Node_Str"",e);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJsonObject;
  try {
    responseJsonObject=responseFuture.get();
  }
 catch (  InterruptedException e) {
    throw new JsonRpcException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new JsonRpcException(""String_Node_Str"",e);
  }
  return MessageUtils.convertResponse(responseJsonObject,resultClass);
}"
10802,"public void init(){
  Class<? extends WebDriver> driverClass=browserType.getDriverClass();
  try {
    DesiredCapabilities capabilities=new DesiredCapabilities();
    if (driverClass.equals(FirefoxDriver.class)) {
      FirefoxProfile profile=new FirefoxProfile();
      profile.setPreference(""String_Node_Str"",true);
      capabilities.setCapability(FirefoxDriver.PROFILE,profile);
      capabilities.setBrowserName(DesiredCapabilities.firefox().getBrowserName());
      if (scope == BrowserScope.SAUCELABS) {
        createSaucelabsDriver(capabilities);
      }
 else       if (scope == BrowserScope.REMOTE) {
        createRemoteDriver(capabilities);
      }
 else {
        driver=new FirefoxDriver(profile);
      }
    }
 else     if (driverClass.equals(ChromeDriver.class)) {
      String chromedriver=null;
      if (SystemUtils.IS_OS_MAC || SystemUtils.IS_OS_LINUX) {
        chromedriver=""String_Node_Str"";
      }
 else       if (SystemUtils.IS_OS_WINDOWS) {
        chromedriver=""String_Node_Str"";
      }
      System.setProperty(""String_Node_Str"",new File(""String_Node_Str"" + chromedriver).getAbsolutePath());
      ChromeOptions options=new ChromeOptions();
      if (enableScreenCapture) {
        options.addArguments(""String_Node_Str"");
      }
 else {
        options.addArguments(""String_Node_Str"");
      }
      options.addArguments(""String_Node_Str"");
      if (protocol == Protocol.FILE) {
        options.addArguments(""String_Node_Str"");
      }
      if (!usePhysicalCam) {
        options.addArguments(""String_Node_Str"");
        if (video != null && isLocal()) {
          options.addArguments(""String_Node_Str"" + video);
        }
      }
      capabilities.setCapability(ChromeOptions.CAPABILITY,options);
      capabilities.setBrowserName(DesiredCapabilities.chrome().getBrowserName());
      if (scope == BrowserScope.SAUCELABS) {
        createSaucelabsDriver(capabilities);
      }
 else       if (scope == BrowserScope.REMOTE) {
        createRemoteDriver(capabilities);
      }
 else {
        driver=new ChromeDriver(options);
      }
    }
 else     if (driverClass.equals(InternetExplorerDriver.class)) {
      if (scope == BrowserScope.SAUCELABS) {
        capabilities.setBrowserName(DesiredCapabilities.internetExplorer().getBrowserName());
        createSaucelabsDriver(capabilities);
      }
    }
    driver.manage().timeouts();
    driver.manage().timeouts().implicitlyWait(timeout,TimeUnit.SECONDS);
    driver.manage().timeouts().setScriptTimeout(timeout,TimeUnit.SECONDS);
    String url;
    if (protocol == Protocol.FILE) {
      String clientPage=client.toString();
      File clientPageFile=new File(this.getClass().getClassLoader().getResource(""String_Node_Str"" + clientPage).getFile());
      url=protocol.toString() + clientPageFile.getAbsolutePath();
    }
 else {
      url=protocol.toString() + hostAddress + ""String_Node_Str""+ serverPort+ client.toString();
    }
    log.info(""String_Node_Str"",url);
    driver.get(url);
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"",e);
  }
}","public void init(){
  Class<? extends WebDriver> driverClass=browserType.getDriverClass();
  try {
    DesiredCapabilities capabilities=new DesiredCapabilities();
    if (driverClass.equals(FirefoxDriver.class)) {
      FirefoxProfile profile=new FirefoxProfile();
      profile.setPreference(""String_Node_Str"",true);
      capabilities.setCapability(FirefoxDriver.PROFILE,profile);
      capabilities.setBrowserName(DesiredCapabilities.firefox().getBrowserName());
      if (scope == BrowserScope.SAUCELABS) {
        createSaucelabsDriver(capabilities);
      }
 else       if (scope == BrowserScope.REMOTE) {
        createRemoteDriver(capabilities);
      }
 else {
        driver=new FirefoxDriver(profile);
      }
    }
 else     if (driverClass.equals(ChromeDriver.class)) {
      String chromedriver=null;
      if (SystemUtils.IS_OS_MAC || SystemUtils.IS_OS_LINUX) {
        chromedriver=""String_Node_Str"";
      }
 else       if (SystemUtils.IS_OS_WINDOWS) {
        chromedriver=""String_Node_Str"";
      }
      System.setProperty(""String_Node_Str"",new File(""String_Node_Str"" + chromedriver).getAbsolutePath());
      ChromeOptions options=new ChromeOptions();
      if (enableScreenCapture) {
        options.addArguments(""String_Node_Str"");
      }
 else {
        options.addArguments(""String_Node_Str"");
      }
      options.addArguments(""String_Node_Str"");
      if (protocol == Protocol.FILE) {
        options.addArguments(""String_Node_Str"");
      }
      if (!usePhysicalCam) {
        options.addArguments(""String_Node_Str"");
        if (video != null && isLocal()) {
          options.addArguments(""String_Node_Str"" + video);
        }
      }
      capabilities.setCapability(ChromeOptions.CAPABILITY,options);
      capabilities.setBrowserName(DesiredCapabilities.chrome().getBrowserName());
      if (scope == BrowserScope.SAUCELABS) {
        createSaucelabsDriver(capabilities);
      }
 else       if (scope == BrowserScope.REMOTE) {
        createRemoteDriver(capabilities);
      }
 else {
        driver=new ChromeDriver(options);
      }
    }
 else     if (driverClass.equals(InternetExplorerDriver.class)) {
      if (scope == BrowserScope.SAUCELABS) {
        capabilities.setBrowserName(DesiredCapabilities.internetExplorer().getBrowserName());
        createSaucelabsDriver(capabilities);
      }
    }
    driver.manage().timeouts();
    driver.manage().timeouts().implicitlyWait(timeout,TimeUnit.SECONDS);
    driver.manage().timeouts().setScriptTimeout(timeout,TimeUnit.SECONDS);
    String url;
    if (protocol == Protocol.FILE) {
      String clientPage=client.toString();
      File clientPageFile=new File(this.getClass().getClassLoader().getResource(""String_Node_Str"" + clientPage).getFile());
      url=protocol.toString() + clientPageFile.getAbsolutePath();
    }
 else {
      String host=publicIp != null ? publicIp : hostAddress;
      url=protocol.toString() + host + ""String_Node_Str""+ serverPort+ client.toString();
    }
    log.info(""String_Node_Str"",url);
    driver.get(url);
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"",e);
  }
}"
10803,"public BrowserClient(Builder builder){
  this.builder=builder;
  this.scope=builder.scope;
  this.video=builder.video;
  this.audio=builder.audio;
  this.serverPort=builder.serverPort;
  this.client=builder.client;
  this.browserType=builder.browserType;
  this.usePhysicalCam=builder.usePhysicalCam;
  this.enableScreenCapture=builder.enableScreenCapture;
  this.recordAudio=builder.recordAudio;
  this.audioSampleRate=builder.audioSampleRate;
  this.audioChannel=builder.audioChannel;
  this.browserVersion=builder.browserVersion;
  this.platform=builder.platform;
  this.timeout=builder.timeout;
  this.colorDistance=builder.colorDistance;
  this.thresholdTime=builder.thresholdTime;
  this.hostAddress=builder.hostAddress;
  this.protocol=builder.protocol;
  this.numInstances=builder.numInstances;
  this.browserPerInstance=builder.browserPerInstance;
  this.login=builder.login;
  this.passwd=builder.passwd;
  this.pem=builder.pem;
}","public BrowserClient(Builder builder){
  this.builder=builder;
  this.scope=builder.scope;
  this.video=builder.video;
  this.audio=builder.audio;
  this.serverPort=builder.serverPort;
  this.client=builder.client;
  this.browserType=builder.browserType;
  this.usePhysicalCam=builder.usePhysicalCam;
  this.enableScreenCapture=builder.enableScreenCapture;
  this.recordAudio=builder.recordAudio;
  this.audioSampleRate=builder.audioSampleRate;
  this.audioChannel=builder.audioChannel;
  this.browserVersion=builder.browserVersion;
  this.platform=builder.platform;
  this.timeout=builder.timeout;
  this.colorDistance=builder.colorDistance;
  this.thresholdTime=builder.thresholdTime;
  this.hostAddress=builder.hostAddress;
  this.protocol=builder.protocol;
  this.numInstances=builder.numInstances;
  this.browserPerInstance=builder.browserPerInstance;
  this.login=builder.login;
  this.passwd=builder.passwd;
  this.pem=builder.pem;
  this.publicIp=builder.publicIp;
}"
10804,"public void createSaucelabsDriver(DesiredCapabilities capabilities) throws MalformedURLException {
  String sauceLabsUser=getProperty(SAUCELAB_USER_PROPERTY);
  String sauceLabsKey=getProperty(SAUCELAB_KEY_PROPERTY);
  capabilities.setCapability(""String_Node_Str"",browserVersion);
  capabilities.setCapability(""String_Node_Str"",platform);
  if (name != null) {
    capabilities.setCapability(""String_Node_Str"",name);
  }
  driver=new RemoteWebDriver(new URL(""String_Node_Str"" + sauceLabsUser + ""String_Node_Str""+ sauceLabsKey+ ""String_Node_Str""),capabilities);
}","public void createSaucelabsDriver(DesiredCapabilities capabilities) throws MalformedURLException {
  assertPublicIpNotNull();
  String sauceLabsUser=getProperty(SAUCELAB_USER_PROPERTY);
  String sauceLabsKey=getProperty(SAUCELAB_KEY_PROPERTY);
  if (sauceLabsUser == null || sauceLabsKey == null) {
    throw new RuntimeException(""String_Node_Str"" + SAUCELAB_USER_PROPERTY + ""String_Node_Str""+ sauceLabsUser+ ""String_Node_Str""+ SAUCELAB_KEY_PROPERTY+ ""String_Node_Str""+ sauceLabsKey);
  }
  capabilities.setCapability(""String_Node_Str"",browserVersion);
  capabilities.setCapability(""String_Node_Str"",platform);
  if (name != null) {
    capabilities.setCapability(""String_Node_Str"",name);
  }
  driver=new RemoteWebDriver(new URL(""String_Node_Str"" + sauceLabsUser + ""String_Node_Str""+ sauceLabsKey+ ""String_Node_Str""),capabilities);
}"
10805,"public void createRemoteDriver(DesiredCapabilities capabilities) throws MalformedURLException {
  if (!GridHandler.getInstance().containsSimilarBrowserKey(id)) {
    GridNode node=null;
    if (login != null) {
      System.setProperty(SshConnection.TEST_NODE_LOGIN_PROPERTY,login);
    }
    if (passwd != null) {
      System.setProperty(SshConnection.TEST_NODE_PASSWD_PROPERTY,passwd);
    }
    if (pem != null) {
      System.setProperty(SshConnection.TEST_NODE_PEM_PROPERTY,pem);
    }
    if (!hostAddress.equals(TEST_PUBLIC_IP_DEFAULT) && login != null && !login.isEmpty() && ((passwd != null && !passwd.isEmpty()) || (pem != null && !pem.isEmpty()))) {
      node=new GridNode(hostAddress,browserType,browserPerInstance,login,passwd,pem);
      GridHandler.getInstance().addNode(id,node);
    }
 else {
      node=GridHandler.getInstance().getRandomNodeFromList(id,browserType,browserPerInstance);
    }
    GridHandler.getInstance().startHub();
    GridHandler.getInstance().startNode(node);
    if (video != null && browserType == BrowserType.CHROME) {
      GridHandler.getInstance().copyRemoteVideo(node,video);
    }
  }
  if (video != null && browserType == BrowserType.CHROME) {
    ChromeOptions options=(ChromeOptions)capabilities.getCapability(ChromeOptions.CAPABILITY);
    options.addArguments(""String_Node_Str"" + GridHandler.getInstance().getFirstNode(id).getRemoteVideo(video));
    capabilities.setCapability(ChromeOptions.CAPABILITY,options);
  }
  hostAddress=GridHandler.getInstance().getHubHost();
  int hubPort=GridHandler.getInstance().getHubPort();
  driver=new RemoteWebDriver(new URL(""String_Node_Str"" + hostAddress + ""String_Node_Str""+ hubPort+ ""String_Node_Str""),capabilities);
}","public void createRemoteDriver(DesiredCapabilities capabilities) throws MalformedURLException {
  assertPublicIpNotNull();
  if (!GridHandler.getInstance().containsSimilarBrowserKey(id)) {
    GridNode node=null;
    if (login != null) {
      System.setProperty(SshConnection.TEST_NODE_LOGIN_PROPERTY,login);
    }
    if (passwd != null) {
      System.setProperty(SshConnection.TEST_NODE_PASSWD_PROPERTY,passwd);
    }
    if (pem != null) {
      System.setProperty(SshConnection.TEST_NODE_PEM_PROPERTY,pem);
    }
    if (!hostAddress.equals(publicIp) && login != null && !login.isEmpty() && ((passwd != null && !passwd.isEmpty()) || (pem != null && !pem.isEmpty()))) {
      node=new GridNode(hostAddress,browserType,browserPerInstance,login,passwd,pem);
      GridHandler.getInstance().addNode(id,node);
    }
 else {
      node=GridHandler.getInstance().getRandomNodeFromList(id,browserType,browserPerInstance);
    }
    GridHandler.getInstance().setHubAddress(publicIp);
    GridHandler.getInstance().startHub();
    GridHandler.getInstance().startNode(node);
    if (video != null && browserType == BrowserType.CHROME) {
      GridHandler.getInstance().copyRemoteVideo(node,video);
    }
  }
  if (video != null && browserType == BrowserType.CHROME) {
    ChromeOptions options=(ChromeOptions)capabilities.getCapability(ChromeOptions.CAPABILITY);
    options.addArguments(""String_Node_Str"" + GridHandler.getInstance().getFirstNode(id).getRemoteVideo(video));
    capabilities.setCapability(ChromeOptions.CAPABILITY,options);
  }
  int hubPort=GridHandler.getInstance().getHubPort();
  driver=new RemoteWebDriver(new URL(""String_Node_Str"" + publicIp + ""String_Node_Str""+ hubPort+ ""String_Node_Str""),capabilities);
}"
10806,"public BrowserClient build(){
  hostAddress=getProperty(TEST_PUBLIC_IP_PROPERTY,TEST_PUBLIC_IP_DEFAULT);
  return new BrowserClient(this);
}","public BrowserClient build(){
  return new BrowserClient(this);
}"
10807,"public Collection<Object[]> getTestScenario(){
  Collection<Object[]> tests=new ArrayList<>();
  for (  Map<String,BrowserInstance> browser : executions) {
    TestScenario test=new TestScenario();
    for (    String key : browser.keySet()) {
      BrowserClient browserClient=null;
      BrowserInstance instance=browser.get(key);
      BrowserClient.Builder builder=new BrowserClient.Builder().browserType(instance.getBrowserType());
      if (instance.getInstances() > 0) {
        builder=builder.numInstances(instance.getInstances());
      }
      if (instance.getBrowserPerInstance() > 0) {
        builder=builder.browserPerInstance(instance.getBrowserPerInstance());
      }
      if (instance.getHostAddress() != null) {
        builder=builder.hostAddress(instance.getHostAddress());
      }
      if (instance.getLogin() != null) {
        builder=builder.login(instance.getLogin());
      }
      if (instance.getPasswd() != null) {
        builder=builder.passwd(instance.getPasswd());
      }
      if (instance.getKey() != null) {
        builder=builder.pem(instance.getKey());
      }
      if (instance.getPort() > 0) {
        builder=builder.serverPort(instance.getPort());
      }
      if (instance.isEnableScreenCapture()) {
        builder=builder.enableScreenCapture();
      }
      if (instance.getProtocol() != null) {
        builder=builder.protocol(Protocol.valueOf(instance.getProtocol().toUpperCase()));
      }
      if (instance.getClient() != null) {
        builder=builder.client(Client.value2Client(instance.getClient()));
      }
      if (instance.getPublicIP() != null) {
        System.setProperty(BrowserClient.TEST_PUBLIC_IP_PROPERTY,instance.getPublicIP());
      }
      if (instance.getSaucelabsUser() != null) {
        System.setProperty(BrowserClient.SAUCELAB_USER_PROPERTY,instance.getSaucelabsUser());
      }
      if (instance.getSaucelabsKey() != null) {
        System.setProperty(BrowserClient.SAUCELAB_KEY_PROPERTY,instance.getSaucelabsKey());
      }
      if (instance.isLocal()) {
        browserClient=builder.scope(BrowserScope.LOCAL).build();
      }
 else       if (instance.isRemote()) {
        browserClient=builder.scope(BrowserScope.REMOTE).build();
      }
 else       if (instance.isSauceLabs()) {
        browserClient=builder.scope(BrowserScope.SAUCELABS).browserVersion(instance.getVersion()).platform(instance.getPlatformType()).build();
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + instance.getScope());
      }
      test.addBrowser(key,browserClient);
    }
    tests.add(new Object[]{test});
  }
  return tests;
}","public Collection<Object[]> getTestScenario(){
  Collection<Object[]> tests=new ArrayList<>();
  for (  Map<String,BrowserInstance> browser : executions) {
    TestScenario test=new TestScenario();
    for (    String key : browser.keySet()) {
      BrowserClient browserClient=null;
      BrowserInstance instance=browser.get(key);
      BrowserClient.Builder builder=new BrowserClient.Builder().browserType(instance.getBrowserType());
      if (instance.getInstances() > 0) {
        builder=builder.numInstances(instance.getInstances());
      }
      if (instance.getBrowserPerInstance() > 0) {
        builder=builder.browserPerInstance(instance.getBrowserPerInstance());
      }
      if (instance.getHostAddress() != null) {
        builder=builder.hostAddress(instance.getHostAddress());
      }
      if (instance.getLogin() != null) {
        builder=builder.login(instance.getLogin());
      }
      if (instance.getPasswd() != null) {
        builder=builder.passwd(instance.getPasswd());
      }
      if (instance.getKey() != null) {
        builder=builder.pem(instance.getKey());
      }
      if (instance.getPort() > 0) {
        builder=builder.serverPort(instance.getPort());
      }
      if (instance.isEnableScreenCapture()) {
        builder=builder.enableScreenCapture();
      }
      if (instance.getProtocol() != null) {
        builder=builder.protocol(Protocol.valueOf(instance.getProtocol().toUpperCase()));
      }
      if (instance.getClient() != null) {
        builder=builder.client(Client.value2Client(instance.getClient()));
      }
      if (instance.getPublicIP() != null) {
        builder=builder.publicIp(instance.getPublicIP());
      }
      if (instance.getSaucelabsUser() != null) {
        System.setProperty(BrowserClient.SAUCELAB_USER_PROPERTY,instance.getSaucelabsUser());
      }
      if (instance.getSaucelabsKey() != null) {
        System.setProperty(BrowserClient.SAUCELAB_KEY_PROPERTY,instance.getSaucelabsKey());
      }
      if (instance.isLocal()) {
        browserClient=builder.scope(BrowserScope.LOCAL).build();
      }
 else       if (instance.isRemote()) {
        browserClient=builder.scope(BrowserScope.REMOTE).build();
      }
 else       if (instance.isSauceLabs()) {
        if (instance.getVersion() == null || instance.getPlatformType() == null) {
          throw new RuntimeException(""String_Node_Str"");
        }
        browserClient=builder.scope(BrowserScope.SAUCELABS).browserVersion(instance.getVersion()).platform(instance.getPlatformType()).build();
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + instance.getScope());
      }
      test.addBrowser(key,browserClient);
    }
    tests.add(new Object[]{test});
  }
  return tests;
}"
10808,"public synchronized void connectIfNecessary() throws IOException {
  if ((wsSession == null) || !wsSession.isOpen()) {
    try {
      client=new WebSocketClient();
      SimpleEchoSocket socket=new SimpleEchoSocket();
      client.start();
      ClientUpgradeRequest request=new ClientUpgradeRequest();
      Thread.sleep(100);
      wsSession=client.connect(socket,new URI(url),request).get();
    }
 catch (    Exception e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      if (client != null) {
        log.debug(""String_Node_Str"",label);
        client.destroy();
        log.debug(""String_Node_Str"",label);
      }
      throw new KurentoException(label + ""String_Node_Str"" + url,e);
    }
    try {
      if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
        if (connectionListener != null) {
          connectionListener.connectionFailed();
        }
        if (client != null) {
          log.debug(""String_Node_Str"",label);
          client.destroy();
          log.debug(""String_Node_Str"",label);
        }
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
      if (session == null) {
        session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
        handlerManager.afterConnectionEstablished(session);
      }
 else {
        try {
          rsHelper.sendRequest(METHOD_RECONNECT,String.class);
          log.info(""String_Node_Str"",label,url);
        }
 catch (        JsonRpcErrorException e) {
          if (e.getCode() == 40007) {
            rsHelper.setSessionId(null);
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}","public synchronized void connectIfNecessary() throws IOException {
  if ((wsSession == null) || !wsSession.isOpen()) {
    try {
      client=new WebSocketClient();
      SimpleEchoSocket socket=new SimpleEchoSocket();
      client.start();
      ClientUpgradeRequest request=new ClientUpgradeRequest();
      Thread.sleep(100);
      wsSession=client.connect(socket,new URI(url),request).get();
    }
 catch (    Exception e) {
      if (connectionListener != null) {
        connectionListener.connectionFailed();
      }
      if (client != null) {
        log.debug(""String_Node_Str"",label);
        try {
          client.stop();
        }
 catch (        Exception e1) {
          log.debug(""String_Node_Str"",label);
        }
        client=null;
      }
      throw new KurentoException(label + ""String_Node_Str"" + url,e);
    }
    try {
      if (!latch.await(this.connectionTimeout,TimeUnit.MILLISECONDS)) {
        if (connectionListener != null) {
          connectionListener.connectionFailed();
        }
        if (client != null) {
          log.debug(""String_Node_Str"",label);
          try {
            client.stop();
          }
 catch (          Exception e1) {
            log.debug(""String_Node_Str"",label);
          }
          client=null;
        }
        throw new KurentoException(label + ""String_Node_Str"" + this.connectionTimeout+ ""String_Node_Str""+ url);
      }
      if (session == null) {
        session=new ClientSession(null,null,JsonRpcClientWebSocket.this);
        handlerManager.afterConnectionEstablished(session);
      }
 else {
        try {
          rsHelper.sendRequest(METHOD_RECONNECT,String.class);
          log.info(""String_Node_Str"",label,url);
        }
 catch (        JsonRpcErrorException e) {
          if (e.getCode() == 40007) {
            rsHelper.setSessionId(null);
            rsHelper.sendRequest(METHOD_RECONNECT,String.class);
            log.info(""String_Node_Str"",label,url);
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}"
10809,"private void createHtmlPages(){
  try {
    final String outputFolder=new ClassPathResource(""String_Node_Str"").getFile().getAbsolutePath() + File.separator;
    Configuration cfg=new Configuration();
    cfg.setClassForTemplateLoading(KurentoJsBase.class,""String_Node_Str"");
    Template template=cfg.getTemplate(""String_Node_Str"");
    Map<String,Object> data=new HashMap<String,Object>();
    data.put(""String_Node_Str"",kurentoUrl);
    for (    String lib : kurentoLibs) {
      Writer writer=new FileWriter(new File(outputFolder + lib + ""String_Node_Str""));
      data.put(""String_Node_Str"",lib);
      if (lib.contains(""String_Node_Str"")) {
        data.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        data.put(""String_Node_Str"",""String_Node_Str"");
      }
      template.process(data,writer);
      writer.flush();
      writer.close();
    }
  }
 catch (  Exception e) {
    Assert.fail(""String_Node_Str"" + e.getMessage());
  }
}","private void createHtmlPages(){
  try {
    final String outputFolder=new ClassPathResource(""String_Node_Str"").getFile().getAbsolutePath() + File.separator;
    Configuration cfg=new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);
    cfg.setClassForTemplateLoading(KurentoJsBase.class,""String_Node_Str"");
    Template template=cfg.getTemplate(""String_Node_Str"");
    Map<String,Object> data=new HashMap<String,Object>();
    data.put(""String_Node_Str"",kurentoUrl);
    for (    String lib : kurentoLibs) {
      Writer writer=new FileWriter(new File(outputFolder + lib + ""String_Node_Str""));
      data.put(""String_Node_Str"",lib);
      if (lib.contains(""String_Node_Str"")) {
        data.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        data.put(""String_Node_Str"",""String_Node_Str"");
      }
      template.process(data,writer);
      writer.flush();
      writer.close();
    }
  }
 catch (  Exception e) {
    Assert.fail(""String_Node_Str"" + e.getMessage());
  }
}"
10810,"public KurentoJsBowerTest(){
  kurentoUrl=""String_Node_Str"";
}","public KurentoJsBowerTest(){
  super(new TestScenario());
  kurentoUrl=""String_Node_Str"";
}"
10811,"public KurentoJsReleaseTest(){
  kurentoUrl=getProperty(""String_Node_Str"",DEFAULT_KURENTO_JS_URL);
  log.debug(""String_Node_Str"",kurentoUrl);
  if (!kurentoUrl.endsWith(""String_Node_Str"")) {
    kurentoUrl+=""String_Node_Str"";
  }
}","public KurentoJsReleaseTest(){
  super(new TestScenario());
  kurentoUrl=getProperty(""String_Node_Str"",DEFAULT_KURENTO_JS_URL);
  log.debug(""String_Node_Str"",kurentoUrl);
  if (!kurentoUrl.endsWith(""String_Node_Str"")) {
    kurentoUrl+=""String_Node_Str"";
  }
}"
10812,"@Override public void registerJsonRpcHandlers(JsonRpcHandlerRegistry registry){
  registry.addHandler(echoJsonRpcHandler(),""String_Node_Str"");
  registry.addHandler(new BidirectionalTest.Handler(),""String_Node_Str"");
  registry.addHandler(new BidirectionalMultiTest.Handler(),""String_Node_Str"");
  registry.addHandler(new ServerEventsTest.Handler(),""String_Node_Str"");
  registry.addHandler(new AsyncServerTest.Handler(),""String_Node_Str"");
  registry.addHandler(new ErrorServerTest.Handler(),""String_Node_Str"");
  registry.addPerSessionHandler(MultipleSessionsTest.Handler.class,""String_Node_Str"");
  registry.addPerSessionHandler(""String_Node_Str"",""String_Node_Str"");
  registry.addHandler(new NewSessionTest.Handler(),""String_Node_Str"");
  registry.addHandler(new CloseSessionTest.Handler(),""String_Node_Str"");
  registry.addHandler(new ReconnectionTest.Handler(),""String_Node_Str"");
  registry.addHandler(new ConnectionListenerTest.Handler(),""String_Node_Str"");
  registry.addHandler(new NotificationTest.Handler(),""String_Node_Str"");
}","@Override public void registerJsonRpcHandlers(JsonRpcHandlerRegistry registry){
  registry.addHandler(echoJsonRpcHandler(),""String_Node_Str"");
  registry.addHandler(new BidirectionalTest.Handler(),""String_Node_Str"");
  registry.addHandler(new BidirectionalMultiTest.Handler(),""String_Node_Str"");
  registry.addHandler(new ServerEventsTest.Handler(),""String_Node_Str"");
  registry.addHandler(new AsyncServerTest.Handler(),""String_Node_Str"");
  registry.addHandler(new ErrorServerTest.Handler(),""String_Node_Str"");
  registry.addPerSessionHandler(MultipleSessionsTest.Handler.class,""String_Node_Str"");
  registry.addPerSessionHandler(""String_Node_Str"",""String_Node_Str"");
  registry.addHandler(new NewSessionTest.Handler(),""String_Node_Str"");
  registry.addHandler(new CloseSessionTest.Handler(),""String_Node_Str"");
  registry.addHandler(new ReconnectionTest.Handler(),""String_Node_Str"");
  registry.addHandler(new ReconnectionServerTest.Handler(),""String_Node_Str"");
  registry.addHandler(new ConnectionListenerTest.Handler(),""String_Node_Str"");
  registry.addHandler(new NotificationTest.Handler(),""String_Node_Str"");
}"
10813,"@Override public void handleRequest(HttpServletRequest servletRequest,final HttpServletResponse servletResponse) throws ServletException, IOException {
  String messageJson=getBodyAsString(servletRequest);
  ServerSessionFactory factory=new ServerSessionFactory(){
    @Override public ServerSession createSession(    String sessionId,    Object registerInfo,    SessionsManager sessionsManager){
      return new HttpRequestServerSession(sessionId,registerInfo,sessionsManager,null);
    }
  }
;
  ResponseSender responseSender=new ResponseSender(){
    @Override public void sendResponse(    Message message) throws IOException {
      servletResponse.getWriter().println(message);
    }
  }
;
  String internalSessionId=null;
  HttpSession session=servletRequest.getSession(false);
  if (session != null) {
    internalSessionId=session.getId();
  }
  protocolManager.processMessage(messageJson,factory,responseSender,internalSessionId);
}","@Override public void handleRequest(HttpServletRequest servletRequest,final HttpServletResponse servletResponse) throws ServletException, IOException {
  String messageJson=getBodyAsString(servletRequest);
  ServerSessionFactory factory=new ServerSessionFactory(){
    @Override public ServerSession createSession(    String sessionId,    Object registerInfo,    SessionsManager sessionsManager){
      return new HttpRequestServerSession(sessionId,registerInfo,sessionsManager,null);
    }
    @Override public void updateSessionOnReconnection(    ServerSession session){
      throw new UnsupportedOperationException();
    }
  }
;
  ResponseSender responseSender=new ResponseSender(){
    @Override public void sendResponse(    Message message) throws IOException {
      servletResponse.getWriter().println(message);
    }
  }
;
  String internalSessionId=null;
  HttpSession session=servletRequest.getSession(false);
  if (session != null) {
    internalSessionId=session.getId();
  }
  protocolManager.processMessage(messageJson,factory,responseSender,internalSessionId);
}"
10814,"private void processReconnectMessage(ServerSessionFactory factory,Request<JsonElement> request,ResponseSender responseSender,String transportId) throws IOException {
  String sessionId=request.getSessionId();
  if (sessionId == null) {
    responseSender.sendResponse(new Response<>(request.getId(),new ResponseError(99999,""String_Node_Str"")));
  }
 else {
    ServerSession session=sessionsManager.get(sessionId);
    if (session != null) {
      String oldTransportId=session.getTransportId();
      session.setTransportId(transportId);
      sessionsManager.updateTransportId(session,oldTransportId);
      cancelCloseTimer(session);
      responseSender.sendResponse(new Response<>(sessionId,request.getId(),RECONNECTION_SUCCESSFUL));
    }
 else {
      responseSender.sendResponse(new Response<>(request.getId(),new ResponseError(99999,RECONNECTION_ERROR)));
    }
  }
}","private void processReconnectMessage(ServerSessionFactory factory,Request<JsonElement> request,ResponseSender responseSender,String transportId) throws IOException {
  String sessionId=request.getSessionId();
  if (sessionId == null) {
    responseSender.sendResponse(new Response<>(request.getId(),new ResponseError(99999,""String_Node_Str"")));
  }
 else {
    ServerSession session=sessionsManager.get(sessionId);
    if (session != null) {
      String oldTransportId=session.getTransportId();
      session.setTransportId(transportId);
      factory.updateSessionOnReconnection(session);
      sessionsManager.updateTransportId(session,oldTransportId);
      cancelCloseTimer(session);
      responseSender.sendResponse(new Response<>(sessionId,request.getId(),RECONNECTION_SUCCESSFUL));
    }
 else {
      responseSender.sendResponse(new Response<>(request.getId(),new ResponseError(99999,RECONNECTION_ERROR)));
    }
  }
}"
10815,"@Override public void handleTextMessage(final WebSocketSession wsSession,TextMessage message) throws Exception {
  try {
    String messageJson=message.getPayload();
    log.debug(""String_Node_Str"",messageJson);
    ServerSessionFactory factory=new ServerSessionFactory(){
      @Override public ServerSession createSession(      String sessionId,      Object registerInfo,      SessionsManager sessionsManager){
        return new WebSocketServerSession(sessionId,registerInfo,sessionsManager,wsSession);
      }
    }
;
    protocolManager.processMessage(messageJson,factory,new WebSocketResponseSender(wsSession),wsSession.getId());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","@Override public void handleTextMessage(final WebSocketSession wsSession,TextMessage message) throws Exception {
  try {
    String messageJson=message.getPayload();
    log.debug(""String_Node_Str"",messageJson);
    ServerSessionFactory factory=new ServerSessionFactory(){
      @Override public ServerSession createSession(      String sessionId,      Object registerInfo,      SessionsManager sessionsManager){
        return new WebSocketServerSession(sessionId,registerInfo,sessionsManager,wsSession);
      }
      @Override public void updateSessionOnReconnection(      ServerSession session){
        ((WebSocketServerSession)session).updateWebSocketSession(wsSession);
      }
    }
;
    protocolManager.processMessage(messageJson,factory,new WebSocketResponseSender(wsSession),wsSession.getId());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}"
10816,"private <P,R>Response<R> sendRequestWebSocket(Request<P> request,Class<R> resultClass){
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  try {
synchronized (wsSession) {
      wsSession.sendMessage(new TextMessage(JsonUtils.toJson(request)));
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",JsonUtils.toJson(request),wsSession.getId(),e);
    return null;
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJsonObject;
  try {
    responseJsonObject=responseFuture.get();
  }
 catch (  InterruptedException e) {
    throw new JsonRpcException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new JsonRpcException(""String_Node_Str"",e);
  }
  return MessageUtils.convertResponse(responseJsonObject,resultClass);
}","private <P,R>Response<R> sendRequestWebSocket(Request<P> request,Class<R> resultClass){
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  try {
synchronized (this) {
      wsSession.sendMessage(new TextMessage(JsonUtils.toJson(request)));
    }
  }
 catch (  Exception e) {
    throw new KurentoException(""String_Node_Str"" + JsonUtils.toJson(request) + ""String_Node_Str""+ wsSession.getId()+ ""String_Node_Str"",e);
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJsonObject;
  try {
    responseJsonObject=responseFuture.get();
  }
 catch (  InterruptedException e) {
    throw new JsonRpcException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new JsonRpcException(""String_Node_Str"",e);
  }
  return MessageUtils.convertResponse(responseJsonObject,resultClass);
}"
10817,"private void makeAssertions(String messageAppend,BrowserClient browser,int playtime,int x,int y,CountDownLatch eosLatch,Color... expectedColors) throws InterruptedException {
  Assert.assertTrue(""String_Node_Str"" + messageAppend,browser.waitForEvent(""String_Node_Str""));
  for (  Color color : expectedColors) {
    Assert.assertTrue(""String_Node_Str"" + color + ""String_Node_Str""+ messageAppend,browser.similarColorAt(color,x,y));
  }
  if (eosLatch != null) {
    Assert.assertTrue(""String_Node_Str"",eosLatch.await(TIMEOUT_EOS,TimeUnit.SECONDS));
  }
 else {
    Assert.assertTrue(""String_Node_Str"",browser.waitForEvent(""String_Node_Str""));
  }
  double currentTime=browser.getCurrentTime();
  Assert.assertTrue(""String_Node_Str"" + playtime + ""String_Node_Str""+ currentTime+ ""String_Node_Str""+ messageAppend,compare(playtime,currentTime));
}","private void makeAssertions(String messageAppend,BrowserClient browser,int playtime,int x,int y,CountDownLatch eosLatch,Color... expectedColors) throws InterruptedException {
  Assert.assertTrue(""String_Node_Str"" + messageAppend,browser.waitForEvent(""String_Node_Str""));
  for (  Color color : expectedColors) {
    Assert.assertTrue(""String_Node_Str"" + color + ""String_Node_Str""+ messageAppend,browser.similarColorAt(color,x,y));
  }
  if (eosLatch != null) {
    Assert.assertTrue(""String_Node_Str"",eosLatch.await(TIMEOUT_EOS,TimeUnit.SECONDS));
  }
 else {
    Thread.sleep(playtime * 1000);
  }
  double currentTime=browser.getCurrentTime();
  Assert.assertTrue(""String_Node_Str"" + playtime + ""String_Node_Str""+ currentTime+ ""String_Node_Str""+ messageAppend,compare(playtime,currentTime));
}"
10818,"private void internalSendResponse(Response<? extends Object> response) throws IOException {
  boolean notResponded=setRespondedIfNot();
  if (notResponded) {
    if (response.getSessionId() == null && INJECT_SESSION_ID) {
      response.setSessionId(session.getSessionId());
    }
    responseSender.sendResponse(response);
  }
 else {
    throw new RequestAlreadyRespondedException(""String_Node_Str"");
  }
}","private void internalSendResponse(Response<? extends Object> response) throws IOException {
  boolean notResponded=setRespondedIfNot();
  if (notResponded) {
    if (response.getSessionId() == null && INJECT_SESSION_ID) {
      response.setSessionId(session.getSessionId());
    }
    if (response.getId() == null) {
      response.setId(request.getId());
    }
    responseSender.sendResponse(response);
  }
 else {
    throw new RequestAlreadyRespondedException(""String_Node_Str"");
  }
}"
10819,"public WebSocketServerSession(String sessionId,Object registerInfo,SessionsManager sessionsManager,WebSocketSession wsSession){
  super(sessionId,registerInfo,sessionsManager,wsSession.getId());
  this.wsSession=wsSession;
  this.setRsHelper(new JsonRpcRequestSenderHelper(sessionId){
    @Override public <P,R>Response<R> internalSendRequest(    Request<P> request,    Class<R> resultClass) throws IOException {
      return sendRequestWebSocket(request,resultClass);
    }
    @Override protected void internalSendRequest(    Request<? extends Object> request,    Class<JsonElement> class1,    Continuation<Response<JsonElement>> continuation){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
  }
);
}","public WebSocketServerSession(String sessionId,Object registerInfo,SessionsManager sessionsManager,WebSocketSession wsSession){
  super(sessionId,registerInfo,sessionsManager,wsSession.getId());
  this.wsSession=wsSession;
  this.setRsHelper(new JsonRpcRequestSenderHelper(sessionId){
    @Override public <P,R>Response<R> internalSendRequest(    Request<P> request,    Class<R> resultClass) throws IOException {
      return sendRequestWebSocket(request,resultClass);
    }
    @Override protected void internalSendRequest(    Request<? extends Object> request,    Class<JsonElement> resultClass,    Continuation<Response<JsonElement>> continuation){
      sendRequestWebSocket(request,resultClass,continuation);
    }
  }
);
}"
10820,"@Override protected void internalSendRequest(Request<? extends Object> request,Class<JsonElement> class1,Continuation<Response<JsonElement>> continuation){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override protected void internalSendRequest(Request<? extends Object> request,Class<JsonElement> resultClass,Continuation<Response<JsonElement>> continuation){
  sendRequestWebSocket(request,resultClass,continuation);
}"
10821,"@Override public void close() throws IOException {
  try {
    wsSession.close();
  }
  finally {
    super.close();
  }
}","@Override public void close() throws IOException {
  try {
    execService.shutdown();
    wsSession.close();
  }
  finally {
    super.close();
  }
}"
10822,"public void subscribeEvents(String... eventType){
  for (  final String e : eventType) {
    CountDownLatch latch=new CountDownLatch(1);
    countDownLatchEvents.put(e,latch);
    this.addEventListener(e,new BrowserEventListener(){
      @Override public void onEvent(      String event){
        consoleLog(ConsoleLogLevel.info,""String_Node_Str"" + event);
        countDownLatchEvents.get(e).countDown();
      }
    }
);
  }
}","public void subscribeEvents(String... eventType){
  subscribeEventsToVideoTag(""String_Node_Str"",eventType);
}"
10823,"@Override public void onEvent(String event){
  consoleLog(ConsoleLogLevel.info,""String_Node_Str"" + event);
  countDownLatchEvents.get(e).countDown();
}","@Override public void onEvent(String event){
  consoleLog(ConsoleLogLevel.info,""String_Node_Str"" + videoTag + ""String_Node_Str""+ event);
  countDownLatchEvents.get(e).countDown();
}"
10824,"@SuppressWarnings(""String_Node_Str"") public void addEventListener(final String eventType,final BrowserEventListener eventListener){
  Thread t=new Thread(){
    public void run(){
      js.executeScript(""String_Node_Str"" + eventType + ""String_Node_Str"");
      try {
        (new WebDriverWait(driver,timeout)).until(new ExpectedCondition<Boolean>(){
          public Boolean apply(          WebDriver d){
            return d.findElement(By.id(""String_Node_Str"")).getAttribute(""String_Node_Str"").equalsIgnoreCase(eventType);
          }
        }
);
        eventListener.onEvent(eventType);
      }
 catch (      Throwable t) {
        log.error(""String_Node_Str"",t.getMessage());
        this.interrupt();
        this.stop();
      }
    }
  }
;
  callbackThreads.add(t);
  t.setDaemon(true);
  t.start();
}","@SuppressWarnings(""String_Node_Str"") public void addEventListener(final String videoTag,final String eventType,final BrowserEventListener eventListener){
  Thread t=new Thread(){
    public void run(){
      js.executeScript(videoTag + ""String_Node_Str"" + eventType+ ""String_Node_Str"");
      try {
        (new WebDriverWait(driver,timeout)).until(new ExpectedCondition<Boolean>(){
          public Boolean apply(          WebDriver d){
            return d.findElement(By.id(""String_Node_Str"")).getAttribute(""String_Node_Str"").equalsIgnoreCase(eventType);
          }
        }
);
        eventListener.onEvent(eventType);
      }
 catch (      Throwable t) {
        log.error(""String_Node_Str"",t.getMessage());
        this.interrupt();
        this.stop();
      }
    }
  }
;
  callbackThreads.add(t);
  t.setDaemon(true);
  t.start();
}"
10825,"public void checkRemoteLatency(final long testTime,final TimeUnit testTimeUnit,SystemMonitorManager monitor){
  String msgName=(name != null) ? ""String_Node_Str"" + name + ""String_Node_Str"" : ""String_Node_Str"";
  if (localChangeColor == null || remoteChangeColor == null) {
    throw new RuntimeException(msgName + ""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    final Thread waitingThread=Thread.currentThread();
    Thread t=new Thread(){
      public void run(){
        try {
          testTimeUnit.sleep(testTime);
          waitingThread.interrupt();
        }
 catch (        InterruptedException e) {
        }
      }
    }
;
    t.setDaemon(true);
    t.start();
    boolean firstTime=true;
    while (true) {
      if (!localEventLatch.tryAcquire(timeout,timeoutTimeUnit)) {
        t.interrupt();
        throw new RuntimeException(msgName + ""String_Node_Str"" + timeout+ ""String_Node_Str""+ timeoutTimeUnit);
      }
      if (!remoteEventLatch.tryAcquire(timeout,timeoutTimeUnit)) {
        t.interrupt();
        throw new RuntimeException(msgName + ""String_Node_Str"" + timeout+ ""String_Node_Str""+ timeoutTimeUnit);
      }
      if (firstTime) {
        firstTime=false;
      }
 else {
        long latencyMilis=lastRemoteColorChangeTime - lastLocalColorChangeTime;
        if (monitor != null) {
          monitor.addCurrentLatency(latencyMilis);
        }
        String parsedLocaltime=new SimpleDateFormat(""String_Node_Str"").format(lastLocalColorChangeTime);
        String parsedRemotetime=new SimpleDateFormat(""String_Node_Str"").format(lastRemoteColorChangeTime);
        if (lastLocalColor.equals(lastRemoteColor)) {
          LatencyRegistry LatencyRegistry=new LatencyRegistry(rgba2Color(lastRemoteColor),latencyMilis);
          if (latencyMilis > getLatencyThreshold(TimeUnit.MILLISECONDS)) {
            LatencyException latencyException=new LatencyException(latencyMilis,testTimeUnit,parsedLocaltime,parsedRemotetime,testTime,latencyMilis);
            LatencyRegistry.setLatencyException(latencyException);
            if (failIfLatencyProblem) {
              t.interrupt();
              throw latencyException;
            }
 else {
              log.warn(latencyException.getMessage());
            }
            if (monitor != null) {
              monitor.incrementLatencyErrors();
            }
          }
          latencyMap.put(lastRemoteColorChangeTime,LatencyRegistry);
        }
      }
    }
  }
 catch (  IOException e) {
    log.debug(""String_Node_Str"");
  }
catch (  InterruptedException e) {
    log.debug(""String_Node_Str"");
  }
  localColorTrigger.interrupt();
  remoteColorTrigger.interrupt();
}","public void checkRemoteLatency(final long testTime,final TimeUnit testTimeUnit,SystemMonitorManager monitor){
  String msgName=(name != null) ? ""String_Node_Str"" + name + ""String_Node_Str"" : ""String_Node_Str"";
  if (localChangeColor == null || remoteChangeColor == null) {
    throw new RuntimeException(msgName + ""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    final Thread waitingThread=Thread.currentThread();
    Thread t=new Thread(){
      public void run(){
        try {
          testTimeUnit.sleep(testTime);
          waitingThread.interrupt();
        }
 catch (        InterruptedException e) {
        }
      }
    }
;
    t.setDaemon(true);
    t.start();
    do {
      waitForLocalColor(msgName,t);
    }
 while (!similarColor(lastLocalColor,""String_Node_Str""));
    do {
      waitForRemoteColor(msgName,t);
    }
 while (!similarColor(lastLocalColor,""String_Node_Str""));
    while (true) {
      waitForLocalColor(msgName,t);
      waitForRemoteColor(msgName,t);
      long latencyMilis=Math.abs(lastRemoteColorChangeTimeAbsolute - lastLocalColorChangeTimeAbsolute);
      if (monitor != null) {
        monitor.addCurrentLatency(latencyMilis);
      }
      SimpleDateFormat formater=new SimpleDateFormat(""String_Node_Str"");
      String parsedLocaltime=formater.format(lastLocalColorChangeTimeAbsolute);
      String parsedRemotetime=formater.format(lastRemoteColorChangeTimeAbsolute);
      log.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",latencyMilis,lastLocalColor,lastRemoteColor,formater.format(lastLocalColorChangeTime),formater.format(lastRemoteColorChangeTime),parsedLocaltime,parsedRemotetime);
      if (similarColor(lastLocalColor,lastRemoteColor)) {
        log.info(""String_Node_Str"",latencyMilis);
        LatencyRegistry LatencyRegistry=new LatencyRegistry(rgba2Color(lastRemoteColor),latencyMilis);
        if (latencyMilis > getLatencyThreshold(TimeUnit.MILLISECONDS)) {
          LatencyException latencyException=new LatencyException(latencyMilis,testTimeUnit,parsedLocaltime,parsedRemotetime,testTime,latencyMilis);
          LatencyRegistry.setLatencyException(latencyException);
          if (failIfLatencyProblem) {
            t.interrupt();
            throw latencyException;
          }
 else {
            log.warn(latencyException.getMessage());
          }
          if (monitor != null) {
            monitor.incrementLatencyErrors();
          }
        }
        latencyMap.put(lastRemoteColorChangeTime,LatencyRegistry);
      }
    }
  }
 catch (  IOException e) {
    log.debug(""String_Node_Str"");
  }
catch (  InterruptedException e) {
    log.debug(""String_Node_Str"");
  }
  localColorTrigger.interrupt();
  remoteColorTrigger.interrupt();
}"
10826,"@Override public synchronized void onEvent(ChangeColorEvent e){
  if (e.getVideoTag() == VideoTag.LOCAL) {
    lastLocalColorChangeTime=e.getTime();
    lastLocalColor=e.getColor();
    localEventLatch.release();
  }
 else   if (e.getVideoTag() == VideoTag.REMOTE) {
    lastRemoteColorChangeTime=e.getTime();
    lastRemoteColor=e.getColor();
    remoteEventLatch.release();
  }
}","@Override public synchronized void onEvent(ChangeColorEvent e){
  if (e.getVideoTag() == VideoTag.LOCAL) {
    lastLocalColorChangeTimeAbsolute=new Date().getTime();
    lastLocalColorChangeTime=e.getTime();
    lastLocalColor=e.getColor();
    localEventLatch.release();
  }
 else   if (e.getVideoTag() == VideoTag.REMOTE) {
    lastRemoteColorChangeTimeAbsolute=new Date().getTime();
    lastRemoteColorChangeTime=e.getTime();
    lastRemoteColor=e.getColor();
    remoteEventLatch.release();
  }
}"
10827,"@Override public void afterConnectionClosed(WebSocketSession wsSession,org.springframework.web.socket.CloseStatus status) throws Exception {
  log.info(""String_Node_Str"" + status);
  if (status.equals(CloseStatus.GOING_AWAY)) {
    log.info(""String_Node_Str"");
  }
 else   if (!status.equals(CloseStatus.NORMAL)) {
    log.error(""String_Node_Str"" + status.getCode());
  }
 else {
    log.info(""String_Node_Str"");
  }
  protocolManager.closeSessionIfTimeout(wsSession.getId(),status.getReason());
}","@Override public void afterConnectionClosed(WebSocketSession wsSession,org.springframework.web.socket.CloseStatus status) throws Exception {
  log.info(""String_Node_Str"" + status);
  if (status.getCode() == CloseStatus.GOING_AWAY.getCode()) {
    log.info(""String_Node_Str"");
  }
 else   if (!status.equals(CloseStatus.NORMAL)) {
    log.error(""String_Node_Str"" + status.getCode());
  }
 else {
    log.info(""String_Node_Str"");
  }
  protocolManager.closeSessionIfTimeout(wsSession.getId(),status.getReason());
}"
10828,"@Override public void handleTransportError(Session session,Throwable exception) throws Exception {
}","@Override public void handleTransportError(Session session,Throwable exception) throws Exception {
  log.warn(""String_Node_Str"",exception);
}"
10829,"@Override public void handleTransportError(WebSocketSession session,Throwable exception) throws Exception {
  log.warn(""String_Node_Str"",exception);
}","@Override public void handleTransportError(WebSocketSession session,Throwable exception) throws Exception {
  protocolManager.processTransportError(session.getId(),exception);
}"
10830,"@Override public void afterConnectionClosed(WebSocketSession wsSession,org.springframework.web.socket.CloseStatus status) throws Exception {
  log.info(""String_Node_Str"" + status);
  if (!status.equals(CloseStatus.NORMAL)) {
    log.error(""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"");
  }
  protocolManager.closeSessionIfTimeout(wsSession.getId(),status.getReason());
}","@Override public void afterConnectionClosed(WebSocketSession wsSession,org.springframework.web.socket.CloseStatus status) throws Exception {
  log.info(""String_Node_Str"" + status);
  if (status.equals(CloseStatus.GOING_AWAY)) {
    log.info(""String_Node_Str"");
  }
 else   if (!status.equals(CloseStatus.NORMAL)) {
    log.error(""String_Node_Str"" + status.getCode());
  }
 else {
    log.info(""String_Node_Str"");
  }
  protocolManager.closeSessionIfTimeout(wsSession.getId(),status.getReason());
}"
10831,"public void setSamplingTime(long samplingTime) throws IOException {
  if (remoteKms != null) {
    sendMessage(""String_Node_Str"" + samplingTime);
  }
 else {
    monitor.incrementLatencyErrors();
  }
}","public void setSamplingTime(long samplingTime) throws IOException {
  if (remoteKms != null) {
    sendMessage(""String_Node_Str"" + samplingTime);
  }
 else {
    monitor.setSamplingTime(samplingTime);
  }
}"
10832,"@Override public void handleTransportError(WebSocketSession session,Throwable exception) throws Exception {
  RoomParticipant user=(RoomParticipant)session.getAttributes().get(USER);
  if (!user.isClosed()) {
    log.warn(""String_Node_Str"",exception);
  }
}","@Override public void handleTransportError(WebSocketSession session,Throwable exception) throws Exception {
  RoomParticipant user=(RoomParticipant)session.getAttributes().get(USER);
  if (user != null && !user.isClosed()) {
    log.warn(""String_Node_Str"",exception);
  }
}"
10833,"@Test public void test() throws Exception {
  String port=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(KurentoServicesTestHelper.APP_HTTP_PORT_PROP,port);
  KurentoServicesTestHelper.startKurentoServicesIfNeccessary();
  startKurentoTreeServer();
  final KurentoTreeClient kurentoTree=new KurentoTreeClient(""String_Node_Str"" + port + ""String_Node_Str"");
  final String treeId=kurentoTree.createTree();
  ExecutorService exec=Executors.newFixedThreadPool(NUM_VIEWERS + 1);
  Future<BrowserClient> masterBrowserFuture=exec.submit(new Callable<BrowserClient>(){
    @Override public BrowserClient call() throws Exception {
      return createMaster(kurentoTree,treeId);
    }
  }
);
  BrowserClient masterBrowser=masterBrowserFuture.get();
  List<Future<TreeViewer>> viewers=new ArrayList<>();
  for (int i=0; i < 3; i++) {
    viewers.add(exec.submit(new Callable<TreeViewer>(){
      @Override public TreeViewer call() throws Exception {
        return createViewer(kurentoTree,treeId);
      }
    }
));
  }
  for (  Future<TreeViewer> viewer : viewers) {
    viewer.get();
  }
  log.info(""String_Node_Str"");
  log.info(""String_Node_Str"");
  for (  Future<TreeViewer> viewer : viewers) {
    viewer.get().getBrowser().waitForEvent(""String_Node_Str"");
  }
  log.info(""String_Node_Str"");
  log.info(""String_Node_Str"");
  masterBrowser.close();
  for (  Future<TreeViewer> viewer : viewers) {
    TreeViewer treeViewer=viewer.get();
    treeViewer.getBrowser().close();
    String sinkId=treeViewer.getSinkId();
    System.out.println(""String_Node_Str"" + sinkId);
    kurentoTree.removeTreeSink(treeId,sinkId);
  }
  kurentoTree.releaseTree(treeId);
  KurentoServicesTestHelper.teardownServices();
}","@Test public void test() throws Exception {
  int port=KurentoServicesTestHelper.getAppHttpPort();
  KurentoServicesTestHelper.startKurentoServicesIfNeccessary();
  startKurentoTreeServer();
  final KurentoTreeClient kurentoTree=new KurentoTreeClient(""String_Node_Str"" + port + ""String_Node_Str"");
  final String treeId=kurentoTree.createTree();
  ExecutorService exec=Executors.newFixedThreadPool(NUM_VIEWERS + 1);
  Future<BrowserClient> masterBrowserFuture=exec.submit(new Callable<BrowserClient>(){
    @Override public BrowserClient call() throws Exception {
      return createMaster(kurentoTree,treeId);
    }
  }
);
  BrowserClient masterBrowser=masterBrowserFuture.get();
  List<Future<TreeViewer>> viewers=new ArrayList<>();
  for (int i=0; i < 3; i++) {
    viewers.add(exec.submit(new Callable<TreeViewer>(){
      @Override public TreeViewer call() throws Exception {
        return createViewer(kurentoTree,treeId);
      }
    }
));
  }
  for (  Future<TreeViewer> viewer : viewers) {
    viewer.get();
  }
  log.info(""String_Node_Str"");
  log.info(""String_Node_Str"");
  for (  Future<TreeViewer> viewer : viewers) {
    viewer.get().getBrowser().waitForEvent(""String_Node_Str"");
  }
  log.info(""String_Node_Str"");
  log.info(""String_Node_Str"");
  masterBrowser.close();
  for (  Future<TreeViewer> viewer : viewers) {
    TreeViewer treeViewer=viewer.get();
    treeViewer.getBrowser().close();
    String sinkId=treeViewer.getSinkId();
    System.out.println(""String_Node_Str"" + sinkId);
    kurentoTree.removeTreeSink(treeId,sinkId);
  }
  kurentoTree.releaseTree(treeId);
  KurentoServicesTestHelper.teardownServices();
}"
10834,"private void startKurentoTreeServer(){
  System.setProperty(""String_Node_Str"",System.getProperty(""String_Node_Str"",""String_Node_Str""));
  String kmsUri=PropertiesManager.getProperty(KurentoServicesTestHelper.KMS_WS_URI_PROP,KurentoServicesTestHelper.KMS_WS_URI_DEFAULT);
  System.setProperty(KurentoTreeServerApp.KMSS_URIS_PROPERTY,""String_Node_Str"" + kmsUri + ""String_Node_Str""+ kmsUri+ ""String_Node_Str"");
  KurentoTreeServerApp.start();
}","private void startKurentoTreeServer(){
  String kmsUri=PropertiesManager.getProperty(KurentoServicesTestHelper.KMS_WS_URI_PROP,KurentoServicesTestHelper.KMS_WS_URI_DEFAULT);
  System.setProperty(KurentoTreeServerApp.KMSS_URIS_PROPERTY,""String_Node_Str"" + kmsUri + ""String_Node_Str""+ kmsUri+ ""String_Node_Str"");
  System.setProperty(KurentoTreeServerApp.WEBSOCKET_PORT_PROPERTY,Integer.toString(KurentoServicesTestHelper.getAppHttpPort()));
  KurentoTreeServerApp.start();
}"
10835,"@Test public void registrarTest() throws IOException, InterruptedException {
  String port=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(KurentoTreeServerApp.KMSS_URIS_PROPERTY,""String_Node_Str"");
  ConfigurableApplicationContext context=SpringApplication.run(TestConfiguration.class,""String_Node_Str"" + port);
  context.start();
  JsonRpcClientWebSocket client=new JsonRpcClientWebSocket(""String_Node_Str"" + port + ""String_Node_Str"");
  String wsUri=""String_Node_Str"";
  JsonObject params=new JsonObject();
  params.addProperty(""String_Node_Str"",wsUri);
  client.sendRequest(""String_Node_Str"",params);
  assertThat(registeredKmss.poll(),is(wsUri));
  client.close();
  context.close();
}","@Test public void registrarTest() throws IOException, InterruptedException {
  int port=KurentoServicesTestHelper.getAppHttpPort();
  System.setProperty(KurentoTreeServerApp.KMSS_URIS_PROPERTY,""String_Node_Str"");
  ConfigurableApplicationContext context=SpringApplication.run(TestConfiguration.class,""String_Node_Str"" + port);
  context.start();
  JsonRpcClientWebSocket client=new JsonRpcClientWebSocket(""String_Node_Str"" + port + ""String_Node_Str"");
  String wsUri=""String_Node_Str"";
  JsonObject params=new JsonObject();
  params.addProperty(""String_Node_Str"",wsUri);
  client.sendRequest(""String_Node_Str"",params);
  assertThat(registeredKmss.poll(),is(wsUri));
  client.close();
  context.close();
}"
10836,"public static JsonRpcClient createJsonRpcClient(){
  String rabbitMqHost=getProperty(RABBITMQ_HOST_PROPERTY);
  if (rabbitMqHost != null) {
    String port=getProperty(RABBITMQ_PORT_PROPERTY,RABBITMQ_PORT_DEFAULT);
    String host=getProperty(RABBITMQ_HOST_PROPERTY,RABBITMQ_HOST_DEFAULT);
    String username=getProperty(RABBITMQ_USERNAME_PROPERTY,RABBITMQ_USERNAME_DEFAULT);
    String password=getProperty(RABBITMQ_PASSWORD_PROPERTY,RABBITMQ_PASSWORD_DEFAULT);
    String vhost=getProperty(RABBITMQ_VHOST_PROPERTY,RABBITMQ_VHOST_DEFAULT);
    log.info(""String_Node_Str"");
    return newJsonRpcClientRabbitMq(host,port,username,password,vhost);
  }
  String wsUri=getProperty(MEDIA_SERVER_WS_URI_PROPERTY,MEDIA_SERVER_WS_URI_DEFAULT);
  log.info(""String_Node_Str"");
  log.info(""String_Node_Str"" + wsUri);
  return new JsonRpcClientWebSocket(wsUri);
}","public static JsonRpcClient createJsonRpcClient(){
  String rabbitMqHost=getProperty(RABBITMQ_HOST_PROPERTY);
  if (rabbitMqHost != null) {
    String port=getProperty(RABBITMQ_PORT_PROPERTY,RABBITMQ_PORT_DEFAULT);
    String host=getProperty(RABBITMQ_HOST_PROPERTY,RABBITMQ_HOST_DEFAULT);
    String username=getProperty(RABBITMQ_USERNAME_PROPERTY,RABBITMQ_USERNAME_DEFAULT);
    String password=getProperty(RABBITMQ_PASSWORD_PROPERTY,RABBITMQ_PASSWORD_DEFAULT);
    String vhost=getProperty(RABBITMQ_VHOST_PROPERTY,RABBITMQ_VHOST_DEFAULT);
    log.info(""String_Node_Str"");
    return newJsonRpcClientRabbitMq(host,port,username,password,vhost);
  }
  String host=getProperty(KMS_WEBSOCKETS_HOST_PROPERTY,KMS_WEBSOCKETS_HOST_DEFAULT);
  String port=getProperty(KMS_WEBSOCKETS_PORT_PROPERTY,KMS_WEBSOCKETS_PORT_DEFAULT);
  String path=getProperty(KMS_WEBSOCKETS_PATH_PROPERTY,KMS_WEBSOCKETS_PATH_DEFAULT);
  String wsUri=""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ path;
  log.info(""String_Node_Str"");
  log.info(""String_Node_Str"" + wsUri);
  return new JsonRpcClientWebSocket(wsUri);
}"
10837,"@Override public String getProperty(String property){
  String systemProperty=System.getProperty(property);
  if (systemProperty != null) {
    return systemProperty;
  }
  String[] tokens=property.split(""String_Node_Str"");
  int lastTokenNumber=tokens.length - 1;
  JsonObject currentObject=configFile;
  for (int i=0; i < tokens.length; i++) {
    JsonElement element=currentObject.get(tokens[i]);
    if (element == null) {
      return null;
    }
    if (i == lastTokenNumber) {
      return element.getAsString();
    }
    try {
      currentObject=(JsonObject)element;
    }
 catch (    ClassCastException e) {
      return null;
    }
  }
  return null;
}","@Override public String getProperty(String property){
  String systemProperty=System.getProperty(property);
  if (systemProperty != null) {
    return systemProperty;
  }
  String[] tokens=property.split(""String_Node_Str"");
  int lastTokenNumber=tokens.length - 1;
  JsonObject currentObject=configFile;
  for (int i=0; i < tokens.length; i++) {
    JsonElement element=currentObject.get(tokens[i]);
    if (element == null) {
      return null;
    }
    if (i == lastTokenNumber) {
      if (element instanceof JsonPrimitive) {
        return element.getAsString();
      }
 else {
        return element.toString();
      }
    }
    try {
      currentObject=(JsonObject)element;
    }
 catch (    ClassCastException e) {
      return null;
    }
  }
  return null;
}"
10838,"/** 
 * Copy the contents of the specified input stream to the specified output stream, and ensure that both streams are closed before returning (even in the face of an exception).
 * @param istream The input stream to read from
 * @param ostream The output stream to write to
 * @return Exception which occurred during processing
 */
protected IOException copyStreams(InputStream istream,OutputStream ostream){
  IOException exception=null;
  byte buffer[]=new byte[INPUT_BUFFER_SIZE];
  int len=buffer.length;
  while (true) {
    try {
      len=istream.read(buffer);
      if (len == -1) {
        break;
      }
      ostream.write(buffer,0,len);
      log.debug(""String_Node_Str"" + len);
    }
 catch (    IOException e) {
      exception=e;
      len=-1;
      break;
    }
  }
  return exception;
}","/** 
 * Copy the contents of the specified input stream to the specified output stream, and ensure that both streams are closed before returning (even in the face of an exception).
 * @param istream The input stream to read from
 * @param ostream The output stream to write to
 * @return Exception which occurred during processing
 */
protected IOException copyStreams(InputStream istream,OutputStream ostream){
  IOException exception=null;
  byte buffer[]=new byte[INPUT_BUFFER_SIZE];
  int len=buffer.length;
  while (true) {
    try {
      len=istream.read(buffer);
      if (len == -1) {
        break;
      }
      ostream.write(buffer,0,len);
      log.debug(""String_Node_Str"",len);
    }
 catch (    IOException e) {
      exception=e;
      len=-1;
      break;
    }
  }
  return exception;
}"
10839,"protected void uploadContent(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String sessionId=extractSessionId(req);
  RepositoryHttpEndpointImpl elem=repoHttpManager.getHttpRepoItemElem(sessionId);
  if (elem == null) {
    resp.setStatus(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  elem.stopCurrentTimer();
  elem.fireStartedEventIfFirstTime();
  try (InputStream requestInputStream=req.getInputStream()){
    try (OutputStream repoItemOutputStream=elem.getRepoItemOutputStream()){
      Range range=parseContentRange(req,resp);
      if (range != null) {
        if (range.start > elem.getWrittenBytes()) {
          resp.setStatus(HttpServletResponse.SC_NOT_IMPLEMENTED);
          resp.getOutputStream().println(""String_Node_Str"" + ""String_Node_Str"");
        }
 else         if (range.end == elem.getWrittenBytes()) {
          resp.setStatus(SC_OK);
          resp.getOutputStream().println(""String_Node_Str"" + ""String_Node_Str"");
        }
 else         if (range.start < elem.getWrittenBytes() && range.end > elem.getWrittenBytes()) {
          Range copyRange=new Range();
          copyRange.start=elem.getWrittenBytes() - range.start;
          copyRange.end=range.end - range.start;
          copyStreamsRange(requestInputStream,repoItemOutputStream,copyRange);
          resp.setStatus(SC_OK);
        }
 else         if (range.start == elem.getWrittenBytes()) {
          IOUtils.copy(requestInputStream,repoItemOutputStream);
          resp.setStatus(SC_OK);
        }
      }
 else {
        boolean isMultipart=ServletFileUpload.isMultipartContent(req);
        if (isMultipart) {
          uploadMultipart(req,resp,repoItemOutputStream);
        }
 else {
          try {
            log.info(""String_Node_Str"" + req.getContentLength() + ""String_Node_Str"");
            int bytes=IOUtils.copy(requestInputStream,repoItemOutputStream);
            resp.setStatus(SC_OK);
            log.info(""String_Node_Str"" + bytes);
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"",e);
            elem.fireSessionErrorEvent(e);
            resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
          }
        }
      }
    }
   }
  finally {
    elem.stopInTimeout();
  }
}","protected void uploadContent(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String sessionId=extractSessionId(req);
  RepositoryHttpEndpointImpl elem=repoHttpManager.getHttpRepoItemElem(sessionId);
  if (elem == null) {
    resp.setStatus(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  elem.stopCurrentTimer();
  elem.fireStartedEventIfFirstTime();
  try (InputStream requestInputStream=req.getInputStream()){
    OutputStream repoItemOutputStream=elem.getRepoItemOutputStream();
    Range range=parseContentRange(req,resp);
    if (range != null) {
      if (range.start > elem.getWrittenBytes()) {
        resp.setStatus(HttpServletResponse.SC_NOT_IMPLEMENTED);
        resp.getOutputStream().println(""String_Node_Str"" + ""String_Node_Str"");
      }
 else       if (range.end == elem.getWrittenBytes()) {
        resp.setStatus(SC_OK);
        resp.getOutputStream().println(""String_Node_Str"" + ""String_Node_Str"");
      }
 else       if (range.start < elem.getWrittenBytes() && range.end > elem.getWrittenBytes()) {
        Range copyRange=new Range();
        copyRange.start=elem.getWrittenBytes() - range.start;
        copyRange.end=range.end - range.start;
        copyStreamsRange(requestInputStream,repoItemOutputStream,copyRange);
        resp.setStatus(SC_OK);
      }
 else       if (range.start == elem.getWrittenBytes()) {
        IOUtils.copy(requestInputStream,repoItemOutputStream);
        resp.setStatus(SC_OK);
      }
    }
 else {
      boolean isMultipart=ServletFileUpload.isMultipartContent(req);
      if (isMultipart) {
        uploadMultipart(req,resp,repoItemOutputStream);
      }
 else {
        try {
          log.info(""String_Node_Str"" + req.getContentLength() + ""String_Node_Str"");
          int bytes=IOUtils.copy(requestInputStream,repoItemOutputStream);
          resp.setStatus(SC_OK);
          log.info(""String_Node_Str"" + bytes);
        }
 catch (        Exception e) {
          log.warn(""String_Node_Str"",e);
          elem.fireSessionErrorEvent(e);
          resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        }
      }
    }
  }
  finally {
    elem.stopInTimeout();
  }
}"
10840,"public void start(){
  serverCommand=PropertiesManager.getProperty(KURENTO_SERVER_COMMAND_PROP,KURENTO_SERVER_COMMAND_DEFAULT);
  gstPlugins=PropertiesManager.getProperty(KURENTO_GST_PLUGINS_PROP,KURENTO_GST_PLUGINS_DEFAULT);
  try {
    workspace=Files.createTempDirectory(""String_Node_Str"").toString();
  }
 catch (  IOException e) {
    workspace=PropertiesManager.getProperty(KURENTO_WORKSPACE_PROP,KURENTO_WORKSPACE_DEFAULT);
    log.error(""String_Node_Str"",workspace,e);
  }
  debugOptions=PropertiesManager.getProperty(KURENTO_SERVER_DEBUG_PROP,KURENTO_SERVER_DEBUG_DEFAULT);
  testDir=PropertiesManager.getProperty(PROJECT_PATH_PROP,PROJECT_PATH_DEFAULT) + ""String_Node_Str"";
  if (!workspace.endsWith(""String_Node_Str"")) {
    workspace+=""String_Node_Str"";
  }
  log.debug(""String_Node_Str"",workspace);
  KurentoServicesTestHelper.setTestDir(testDir);
  if (rabbitMqAddress != null) {
    log.info(""String_Node_Str"" + ""String_Node_Str"",rabbitMqAddress,serverCommand,gstPlugins,workspace);
  }
 else {
    log.info(""String_Node_Str"" + ""String_Node_Str"",thriftAddress,serverCommand,gstPlugins,workspace);
  }
  createKurentoConf();
  File logFile=new File(workspace,""String_Node_Str"");
  KurentoServicesTestHelper.setServerLogFilePath(logFile);
  log.debug(""String_Node_Str"",logFile.getAbsolutePath());
  Shell.runAndWait(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"" + logFile.getAbsolutePath()+ ""String_Node_Str"");
  waitForKurentoMediaServer();
}","public void start(){
  serverCommand=PropertiesManager.getProperty(KURENTO_SERVER_COMMAND_PROP,KURENTO_SERVER_COMMAND_DEFAULT);
  gstPlugins=PropertiesManager.getProperty(KURENTO_GST_PLUGINS_PROP,KURENTO_GST_PLUGINS_DEFAULT);
  try {
    workspace=Files.createTempDirectory(""String_Node_Str"").toString();
  }
 catch (  IOException e) {
    workspace=PropertiesManager.getProperty(KURENTO_WORKSPACE_PROP,KURENTO_WORKSPACE_DEFAULT);
    log.error(""String_Node_Str"",workspace,e);
  }
  debugOptions=PropertiesManager.getProperty(KURENTO_SERVER_DEBUG_PROP,KURENTO_SERVER_DEBUG_DEFAULT);
  if (!workspace.endsWith(""String_Node_Str"")) {
    workspace+=""String_Node_Str"";
  }
  log.debug(""String_Node_Str"",workspace);
  if (rabbitMqAddress != null) {
    log.info(""String_Node_Str"" + ""String_Node_Str"",rabbitMqAddress,serverCommand,gstPlugins,workspace);
  }
 else {
    log.info(""String_Node_Str"" + ""String_Node_Str"",thriftAddress,serverCommand,gstPlugins,workspace);
  }
  createKurentoConf();
  File logFile=new File(testDir + testClassName,testMethodName + ""String_Node_Str"");
  KurentoServicesTestHelper.setServerLogFilePath(logFile);
  log.debug(""String_Node_Str"",logFile.getAbsolutePath());
  Shell.runAndWait(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"" + logFile.getAbsolutePath()+ ""String_Node_Str"");
  waitForKurentoMediaServer();
}"
10841,"public static void startKurentoMediaServer(){
  String transport=PropertiesManager.getProperty(KMS_TRANSPORT_PROP,KMS_TRANSPORT_DEFAULT);
  int httpPort=getKmsHttpPort();
switch (transport) {
case KMS_TRANSPORT_THRIFT_VALUE:
    kms=KurentoMediaServerManager.createWithThriftTransport(getThriftKmsAddress(),httpPort);
  break;
case KMS_TRANSPORT_RABBITMQ_VALUE:
kms=KurentoMediaServerManager.createWithRabbitMqTransport(getRabbitMqAddress(),httpPort);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + transport + ""String_Node_Str""+ KMS_TRANSPORT_PROP);
}
kms.setTestClassName(testCaseName);
kms.setTestMethodName(testName);
kms.start();
}","public static void startKurentoMediaServer(){
  String transport=PropertiesManager.getProperty(KMS_TRANSPORT_PROP,KMS_TRANSPORT_DEFAULT);
  int httpPort=getKmsHttpPort();
switch (transport) {
case KMS_TRANSPORT_THRIFT_VALUE:
    kms=KurentoMediaServerManager.createWithThriftTransport(getThriftKmsAddress(),httpPort);
  break;
case KMS_TRANSPORT_RABBITMQ_VALUE:
kms=KurentoMediaServerManager.createWithRabbitMqTransport(getRabbitMqAddress(),httpPort);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + transport + ""String_Node_Str""+ KMS_TRANSPORT_PROP);
}
kms.setTestClassName(testCaseName);
kms.setTestMethodName(testName);
kms.setTestDir(testDir);
kms.start();
}"
10842,"private static void startKurentoMediaServerIfNecessary(){
  kmsAutostart=getProperty(KMS_AUTOSTART_PROP,KMS_AUTOSTART_DEFAULT);
  kmsPrintLog=getProperty(KMS_PRINT_LOG_PROP,KMS_PRINT_LOG_DEFAULT);
switch (kmsAutostart) {
case AUTOSTART_FALSE_VALUE:
    break;
case AUTOSTART_TEST_VALUE:
  startKurentoMediaServer();
break;
case AUTOSTART_TEST_SUITE_VALUE:
if (mediaConnector == null) {
startKurentoMediaServer();
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + kmsAutostart + ""String_Node_Str""+ KMS_AUTOSTART_PROP);
}
}","private static void startKurentoMediaServerIfNecessary(){
  kmsAutostart=getProperty(KMS_AUTOSTART_PROP,KMS_AUTOSTART_DEFAULT);
  kmsPrintLog=getProperty(KMS_PRINT_LOG_PROP,KMS_PRINT_LOG_DEFAULT);
  testDir=getProperty(PROJECT_PATH_PROP,PROJECT_PATH_DEFAULT) + ""String_Node_Str"";
  String logFolder=testDir + testCaseName;
  createFolder(logFolder);
switch (kmsAutostart) {
case AUTOSTART_FALSE_VALUE:
    break;
case AUTOSTART_TEST_VALUE:
  startKurentoMediaServer();
break;
case AUTOSTART_TEST_SUITE_VALUE:
if (mediaConnector == null) {
startKurentoMediaServer();
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + kmsAutostart + ""String_Node_Str""+ KMS_AUTOSTART_PROP);
}
}"
10843,"protected void internalSendRequestThrift(Request<Object> request,final Class<JsonElement> resultClass,final Continuation<Response<JsonElement>> continuation){
  log.debug(""String_Node_Str"",request);
  if (request.getMethod().equals(""String_Node_Str"")) {
    JsonObject params=(JsonObject)request.getParams();
    params.addProperty(""String_Node_Str"",localHandlerAddress.getHostString());
    params.addProperty(""String_Node_Str"",Integer.valueOf(localHandlerAddress.getPort()));
  }
  sendRequest(request,resultClass,continuation,true);
}","protected void internalSendRequestThrift(Request<Object> request,final Class<JsonElement> resultClass,final Continuation<Response<JsonElement>> continuation){
  log.debug(""String_Node_Str"",request);
  processRequest(request);
  sendRequest(request,resultClass,continuation,true);
}"
10844,"@Override public void onComplete(invokeJsonRpc_call thriftResponse){
  clientPool.release(client);
  try {
    String response=thriftResponse.getResult();
    log.debug(""String_Node_Str"",response.trim());
    continuation.onSuccess(JsonUtils.fromJsonResponse(response,resultClass));
  }
 catch (  TException e) {
    continuation.onError(e);
  }
}","@Override public void onComplete(invokeJsonRpc_call thriftResponse){
  clientPool.release(client);
  try {
    String responseStr=thriftResponse.getResult();
    log.debug(""String_Node_Str"",responseStr.trim());
    Response<JsonElement> response=JsonUtils.fromJsonResponse(responseStr,resultClass);
    processResponse(response);
    continuation.onSuccess(response);
  }
 catch (  TException e) {
    continuation.onError(e);
  }
}"
10845,"@Override public void run(){
  while (true) {
    try {
      Thread.sleep(KEEP_ALIVE_TIME);
    }
 catch (    InterruptedException e) {
      return;
    }
synchronized (keepAliveThread) {
      if (stopKeepAlive) {
        return;
      }
    }
    Set<String> copiedSessions;
synchronized (sessions) {
      copiedSessions=new HashSet<>(sessions);
    }
    for (    String copiedSession : copiedSessions) {
      int id=new Random().nextInt();
      Request<Void> request=new Request<>(copiedSession,Integer.valueOf(id),""String_Node_Str"",null);
      log.info(""String_Node_Str"",copiedSession);
      try {
        Response<Void> response=internalSendRequestThrift(request,Void.class);
        if (response.isError()) {
          log.error(""String_Node_Str"",copiedSession);
synchronized (sessions) {
            sessions.remove(copiedSession);
          }
        }
      }
 catch (      TransportException e) {
        log.warn(""String_Node_Str"",copiedSession,e);
      }
    }
  }
}","@Override public void run(){
  log.debug(""String_Node_Str"");
  while (true) {
    try {
      Thread.sleep(KEEP_ALIVE_TIME);
    }
 catch (    InterruptedException e) {
      return;
    }
    log.debug(""String_Node_Str"");
synchronized (keepAliveThread) {
      if (stopKeepAlive) {
        return;
      }
    }
    Set<String> copiedSessions;
synchronized (sessions) {
      copiedSessions=new HashSet<>(sessions);
    }
    for (    String copiedSession : copiedSessions) {
      int id=new Random().nextInt();
      Request<Void> request=new Request<>(copiedSession,Integer.valueOf(id),""String_Node_Str"",null);
      log.info(""String_Node_Str"",copiedSession);
      try {
        Response<Void> response=internalSendRequestThrift(request,Void.class);
        if (response.isError()) {
          log.error(""String_Node_Str"",copiedSession);
synchronized (sessions) {
            sessions.remove(copiedSession);
          }
        }
      }
 catch (      TransportException e) {
        log.warn(""String_Node_Str"",copiedSession,e);
      }
    }
  }
}"
10846,"private void sendRequest(final Request<Object> request,final Class<JsonElement> resultClass,final Continuation<Response<JsonElement>> continuation,final boolean retry){
  final AsyncClient client=clientPool.acquireAsync();
  try {
    client.invokeJsonRpc(request.toString(),new AsyncMethodCallback<AsyncClient.invokeJsonRpc_call>(){
      @Override public void onError(      Exception exception){
        clientPool.release(client);
        log.error(""String_Node_Str"",exception);
        if (retry && exception instanceof ConnectException) {
          sendRequest(request,resultClass,continuation,false);
        }
 else {
          continuation.onError(exception);
        }
      }
      @Override public void onComplete(      invokeJsonRpc_call thriftResponse){
        clientPool.release(client);
        try {
          String response=thriftResponse.getResult();
          log.debug(""String_Node_Str"",response.trim());
          continuation.onSuccess(JsonUtils.fromJsonResponse(response,resultClass));
        }
 catch (        TException e) {
          continuation.onError(e);
        }
      }
    }
);
  }
 catch (  TException e) {
    log.error(""String_Node_Str"",e);
    continuation.onError(e);
  }
}","private void sendRequest(final Request<Object> request,final Class<JsonElement> resultClass,final Continuation<Response<JsonElement>> continuation,final boolean retry){
  final AsyncClient client=clientPool.acquireAsync();
  try {
    client.invokeJsonRpc(request.toString(),new AsyncMethodCallback<AsyncClient.invokeJsonRpc_call>(){
      @Override public void onError(      Exception exception){
        clientPool.release(client);
        log.error(""String_Node_Str"",exception);
        if (retry && exception instanceof ConnectException) {
          sendRequest(request,resultClass,continuation,false);
        }
 else {
          continuation.onError(exception);
        }
      }
      @Override public void onComplete(      invokeJsonRpc_call thriftResponse){
        clientPool.release(client);
        try {
          String responseStr=thriftResponse.getResult();
          log.debug(""String_Node_Str"",responseStr.trim());
          Response<JsonElement> response=JsonUtils.fromJsonResponse(responseStr,resultClass);
          processResponse(response);
          continuation.onSuccess(response);
        }
 catch (        TException e) {
          continuation.onError(e);
        }
      }
    }
);
  }
 catch (  TException e) {
    log.error(""String_Node_Str"",e);
    continuation.onError(e);
  }
}"
10847,"private <P,R>Response<R> internalSendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  connectIfNecessary();
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  String jsonMessage=request.toString();
synchronized (wsSession) {
    wsSession.sendMessage(new TextMessage(jsonMessage));
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJson;
  try {
    responseJson=responseFuture.get(TIMEOUT,TimeUnit.MILLISECONDS);
    Response<R> response=MessageUtils.convertResponse(responseJson,resultClass);
    if (response.getSessionId() != null) {
      session.setSessionId(response.getSessionId());
    }
    return response;
  }
 catch (  InterruptedException e) {
    throw new KurentoException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new KurentoException(""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(""String_Node_Str"" + TIMEOUT + ""String_Node_Str"",e);
  }
}","private <P,R>Response<R> internalSendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  connectIfNecessary();
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  String jsonMessage=request.toString();
  log.debug(""String_Node_Str"",jsonMessage.trim());
synchronized (wsSession) {
    wsSession.sendMessage(new TextMessage(jsonMessage));
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJson;
  try {
    responseJson=responseFuture.get(TIMEOUT,TimeUnit.MILLISECONDS);
    log.debug(""String_Node_Str"",responseJson.toString());
    Response<R> response=MessageUtils.convertResponse(responseJson,resultClass);
    if (response.getSessionId() != null) {
      session.setSessionId(response.getSessionId());
    }
    return response;
  }
 catch (  InterruptedException e) {
    throw new KurentoException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new KurentoException(""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(""String_Node_Str"" + TIMEOUT + ""String_Node_Str"",e);
  }
}"
10848,"@Override public void run(){
  try {
    Response<JsonElement> result=internalSendRequestWebSocket(request,resultClass);
    try {
      continuation.onSuccess(result);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    continuation.onError(e);
  }
}","@Override public void run(){
  try {
    handlerManager.handleRequest(session,fromJsonRequest(message,JsonElement.class),rs);
  }
 catch (  IOException e) {
    log.warn(""String_Node_Str"" + message,e);
  }
}"
10849,"private void handleRequestFromServer(JsonObject message) throws IOException {
  handlerManager.handleRequest(session,fromJsonRequest(message,JsonElement.class),rs);
}","private void handleRequestFromServer(final JsonObject message) throws IOException {
  execService.submit(new Runnable(){
    @Override public void run(){
      try {
        handlerManager.handleRequest(session,fromJsonRequest(message,JsonElement.class),rs);
      }
 catch (      IOException e) {
        log.warn(""String_Node_Str"" + message,e);
      }
    }
  }
);
}"
10850,"@Bean public ThriftConnectorJsonRpcHandler thriftConnectorJsonRpcHandler(){
  return new ThriftConnectorJsonRpcHandler();
}","@Bean public MediaConnectorJsonRpcHandler thriftConnectorJsonRpcHandler(){
  return new MediaConnectorJsonRpcHandler();
}"
10851,"public KwsBowerTest(){
  kwsUrl=getProperty(""String_Node_Str"",""String_Node_Str"");
}","public KwsBowerTest(){
  kwsUrl=""String_Node_Str"";
}"
10852,"@Before public void setupMediaElements() throws InterruptedException {
  pipeline.newWebRtcEndpoint().buildAsync(cont);
  pipeline.newWebRtcEndpoint().buildAsync(cont);
  sdp=creationResults.poll(1,SECONDS);
  sdp2=creationResults.poll(1,SECONDS);
  Assert.assertNotNull(sdp);
  Assert.assertNotNull(sdp2);
}","@Before public void setupMediaElements() throws InterruptedException {
  pipeline.newWebRtcEndpoint().buildAsync(cont);
  pipeline.newWebRtcEndpoint().buildAsync(cont);
  sdp=creationResults.poll(2,SECONDS);
  sdp2=creationResults.poll(2,SECONDS);
  Assert.assertNotNull(sdp);
  Assert.assertNotNull(sdp2);
}"
10853,"@Bean public ThriftConnectorJsonRpcHandler2 thriftConnectorJsonRpcHandler(){
  return new ThriftConnectorJsonRpcHandler2();
}","@Bean public ThriftConnectorJsonRpcHandler thriftConnectorJsonRpcHandler(){
  return new ThriftConnectorJsonRpcHandler();
}"
10854,"/** 
 * Test for   {@link MediaSessionStartedEvent}
 * @throws InterruptedException
 */
@Test public void testEventMediaSessionStarted() throws InterruptedException {
  final PlayerEndpoint player=pipeline.newPlayerEndpoint(URL_SMALL).build();
  player.connect(httpEp);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  player.addEndOfStreamListener(new MediaEventListener<EndOfStreamEvent>(){
    @Override public void onEvent(    EndOfStreamEvent event){
      eosLatch.countDown();
    }
  }
);
  final BlockingQueue<ListenerRegistration> events=new ArrayBlockingQueue<>(1);
  httpEp.addMediaSessionStartedListener(new MediaEventListener<MediaSessionStartedEvent>(){
    @Override public void onEvent(    MediaSessionStartedEvent event){
      player.play();
    }
  }
,new Continuation<ListenerRegistration>(){
    @Override public void onSuccess(    ListenerRegistration result){
      events.add(result);
    }
    @Override public void onError(    Throwable cause){
      throw new KurentoMediaFrameworkException(cause);
    }
  }
);
  ListenerRegistration reg=events.poll(500,MILLISECONDS);
  Assert.assertNotNull(reg);
  try (CloseableHttpClient httpclient=HttpClientBuilder.create().build()){
    httpclient.execute(new HttpGet(httpEp.getUrl()));
  }
 catch (  ClientProtocolException e) {
    throw new KurentoMediaFrameworkException();
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException();
  }
  try {
    eosLatch.await(500,MILLISECONDS);
  }
 catch (  InterruptedException e) {
    player.release();
    throw new KurentoMediaFrameworkException(e);
  }
}","/** 
 * Test for   {@link MediaSessionStartedEvent}
 * @throws InterruptedException
 */
@Test public void testEventMediaSessionStarted() throws InterruptedException {
  final PlayerEndpoint player=pipeline.newPlayerEndpoint(URL_SMALL).build();
  player.connect(httpEp);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  player.addEndOfStreamListener(new MediaEventListener<EndOfStreamEvent>(){
    @Override public void onEvent(    EndOfStreamEvent event){
      eosLatch.countDown();
    }
  }
);
  final BlockingQueue<ListenerRegistration> events=new ArrayBlockingQueue<>(1);
  httpEp.addMediaSessionStartedListener(new MediaEventListener<MediaSessionStartedEvent>(){
    @Override public void onEvent(    MediaSessionStartedEvent event){
      player.play();
    }
  }
,new Continuation<ListenerRegistration>(){
    @Override public void onSuccess(    ListenerRegistration result){
      events.add(result);
    }
    @Override public void onError(    Throwable cause){
      throw new KurentoMediaFrameworkException(cause);
    }
  }
);
  ListenerRegistration reg=events.poll(500,MILLISECONDS);
  Assert.assertNotNull(reg);
  try (CloseableHttpClient httpclient=HttpClientBuilder.create().build()){
    httpclient.execute(new HttpGet(httpEp.getUrl()));
  }
 catch (  ClientProtocolException e) {
    throw new KurentoMediaFrameworkException();
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException();
  }
  try {
    eosLatch.await(500,MILLISECONDS);
  }
  finally {
    player.release();
  }
}"
10855,"@Override public void onEvent(MediaSessionStartedEvent event){
  player.play();
}","@Override public void onEvent(MediaSessionTerminatedEvent event){
  latch.countDown();
}"
10856,"/** 
 * Test for   {@link MediaSessionTerminatedEvent}
 */
@Ignore @Test public void testEventMediaSessionTerminated(){
}","/** 
 * Test for   {@link MediaSessionTerminatedEvent}
 * @throws InterruptedException
 */
@Ignore @Test public void testEventMediaSessionTerminated() throws InterruptedException {
  final PlayerEndpoint player=pipeline.newPlayerEndpoint(URL_SMALL).build();
  player.connect(httpEp);
  httpEp.addMediaSessionStartedListener(new MediaEventListener<MediaSessionStartedEvent>(){
    @Override public void onEvent(    MediaSessionStartedEvent event){
      player.play();
    }
  }
);
  final CountDownLatch latch=new CountDownLatch(1);
  final BlockingQueue<ListenerRegistration> events=new ArrayBlockingQueue<>(1);
  httpEp.addMediaSessionTerminatedListener(new MediaEventListener<MediaSessionTerminatedEvent>(){
    @Override public void onEvent(    MediaSessionTerminatedEvent event){
      latch.countDown();
    }
  }
,new Continuation<ListenerRegistration>(){
    @Override public void onSuccess(    ListenerRegistration result){
      events.add(result);
    }
    @Override public void onError(    Throwable cause){
      throw new KurentoMediaFrameworkException(cause);
    }
  }
);
  ListenerRegistration reg=events.poll(500,MILLISECONDS);
  Assert.assertNotNull(reg);
  try (CloseableHttpClient httpclient=HttpClientBuilder.create().build()){
    httpclient.execute(new HttpGet(httpEp.getUrl()));
  }
 catch (  ClientProtocolException e) {
    throw new KurentoMediaFrameworkException();
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException();
  }
  try {
    latch.await(500,MILLISECONDS);
  }
  finally {
    player.release();
  }
}"
10857,"@Override public void onEvent(MediaSessionTerminatedEvent event){
  sem.release();
}","@Override public void onEvent(MediaSessionTerminatedEvent event){
  events.add(event);
}"
10858,"/** 
 * Test for   {@link MediaSessionTerminatedEvent}
 * @throws InterruptedException
 */
@Ignore @Test public void testEventMediaSessionTerminated() throws InterruptedException {
  HttpGetEndpoint httpEP=pipeline.newHttpGetEndpoint().build();
  final Semaphore sem=new Semaphore(0);
  httpEP.addMediaSessionTerminatedListener(new MediaEventListener<MediaSessionTerminatedEvent>(){
    @Override public void onEvent(    MediaSessionTerminatedEvent event){
      sem.release();
    }
  }
);
  try (CloseableHttpClient httpclient=HttpClientBuilder.create().build()){
    httpclient.execute(new HttpGet(httpEP.getUrl()));
  }
 catch (  ClientProtocolException e) {
    throw new KurentoMediaFrameworkException();
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException();
  }
  Assert.assertTrue(sem.tryAcquire(50,SECONDS));
  httpEP.release();
}","/** 
 * Test for   {@link MediaSessionTerminatedEvent}
 * @throws InterruptedException
 */
@Test public void testEventMediaSessionTerminated() throws InterruptedException {
  final PlayerEndpoint player=pipeline.newPlayerEndpoint(URL_SMALL).build();
  HttpGetEndpoint httpEP=pipeline.newHttpGetEndpoint().terminateOnEOS().build();
  player.connect(httpEP);
  httpEP.addMediaSessionStartedListener(new MediaEventListener<MediaSessionStartedEvent>(){
    @Override public void onEvent(    MediaSessionStartedEvent event){
      player.play();
    }
  }
);
  final BlockingQueue<MediaSessionTerminatedEvent> events=new ArrayBlockingQueue<>(1);
  httpEP.addMediaSessionTerminatedListener(new MediaEventListener<MediaSessionTerminatedEvent>(){
    @Override public void onEvent(    MediaSessionTerminatedEvent event){
      events.add(event);
    }
  }
);
  try (CloseableHttpClient httpclient=HttpClientBuilder.create().build()){
    httpclient.execute(new HttpGet(httpEP.getUrl()));
  }
 catch (  ClientProtocolException e) {
    throw new KurentoMediaFrameworkException();
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException();
  }
  Assert.assertNotNull(events.poll(20,SECONDS));
  httpEP.release();
  player.release();
}"
10859,"@Override public void onEvent(MediaSessionTerminatedEvent event){
  sem.release();
}","@Override public void onEvent(MediaSessionStartedEvent event){
  player.play();
}"
10860,"@Override protected void failed(Throwable e,Description description){
  if (KurentoServicesTestHelper.printKmsLog()) {
    String testDir=KurentoServicesTestHelper.getTestDir();
    String testCaseName=KurentoServicesTestHelper.getTestCaseName();
    String testName=KurentoServicesTestHelper.getTestName();
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"",description.getClassName(),testName);
    log.info(""String_Node_Str"",e.getClass().getCanonicalName(),e.getMessage());
    log.info(""String_Node_Str"");
    try {
      BufferedReader br=new BufferedReader(new FileReader(testDir + ""String_Node_Str"" + testCaseName+ ""String_Node_Str""+ testName+ ""String_Node_Str""));
      String line;
      while ((line=br.readLine()) != null) {
        log.info(line);
      }
      br.close();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
    log.info(""String_Node_Str"");
  }
}","@Override protected void failed(Throwable e,Description description){
  if (KurentoServicesTestHelper.printKmsLog()) {
    String testDir=KurentoServicesTestHelper.getTestDir();
    String testCaseName=KurentoServicesTestHelper.getTestCaseName();
    String testName=KurentoServicesTestHelper.getTestName();
    File file=new File(testDir + ""String_Node_Str"" + testCaseName+ ""String_Node_Str""+ testName+ ""String_Node_Str"");
    if (file.exists()) {
      log.info(""String_Node_Str"");
      log.info(""String_Node_Str"",description.getClassName(),testName);
      log.info(""String_Node_Str"",e.getClass().getCanonicalName(),e.getMessage());
      log.info(""String_Node_Str"");
      try {
        for (        String line : FileUtils.readLines(file)) {
          log.info(line);
        }
      }
 catch (      IOException e1) {
        log.warn(""String_Node_Str"",e1);
      }
      log.info(""String_Node_Str"");
    }
  }
}"
10861,"public int countKmsProcesses(){
  int result=0;
  try {
    String[] command={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + workspace + ""String_Node_Str""};
    Process countKms=Runtime.getRuntime().exec(command);
    BufferedReader br=new BufferedReader(new InputStreamReader(countKms.getInputStream()));
    StringBuilder builder=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      builder.append(line);
    }
    result=Integer.parseInt(builder.toString());
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
  return result;
}","public int countKmsProcesses(){
  int result=0;
  try {
    String[] command={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + workspace + ""String_Node_Str""};
    Process countKms=Runtime.getRuntime().exec(command);
    String stringFromStream=CharStreams.toString(new InputStreamReader(countKms.getInputStream(),""String_Node_Str""));
    result=Integer.parseInt(stringFromStream.trim());
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
  return result;
}"
10862,"private void createKurentoConf(){
  Configuration cfg=new Configuration();
  Map<String,Object> data=new HashMap<String,Object>();
  if (rabbitMqAddress != null) {
    data.put(""String_Node_Str"",""String_Node_Str"");
    data.put(""String_Node_Str"",rabbitMqAddress.getHost());
    data.put(""String_Node_Str"",rabbitMqAddress.getPort());
  }
 else {
    data.put(""String_Node_Str"",""String_Node_Str"");
    data.put(""String_Node_Str"",thriftAddress.getHost());
    data.put(""String_Node_Str"",thriftAddress.getPort());
  }
  data.put(""String_Node_Str"",gstPlugins);
  data.put(""String_Node_Str"",debugOptions);
  data.put(""String_Node_Str"",serverCommand);
  data.put(""String_Node_Str"",workspace);
  data.put(""String_Node_Str"",httpPort);
  cfg.setClassForTemplateLoading(KurentoMediaServerManager.class,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  Shell.run(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"");
}","private void createKurentoConf(){
  Configuration cfg=new Configuration();
  Map<String,Object> data=new HashMap<String,Object>();
  if (rabbitMqAddress != null) {
    data.put(""String_Node_Str"",""String_Node_Str"");
    data.put(""String_Node_Str"",rabbitMqAddress.getHost());
    data.put(""String_Node_Str"",String.valueOf(rabbitMqAddress.getPort()));
  }
 else {
    data.put(""String_Node_Str"",""String_Node_Str"");
    data.put(""String_Node_Str"",thriftAddress.getHost());
    data.put(""String_Node_Str"",String.valueOf(thriftAddress.getPort()));
  }
  data.put(""String_Node_Str"",gstPlugins);
  data.put(""String_Node_Str"",debugOptions);
  data.put(""String_Node_Str"",serverCommand);
  data.put(""String_Node_Str"",workspace);
  data.put(""String_Node_Str"",String.valueOf(httpPort));
  cfg.setClassForTemplateLoading(KurentoMediaServerManager.class,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  Shell.run(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"");
}"
10863,"public static <P>Request<P> convertRequest(Request<? extends Object> request,Class<P> paramsClass){
  P paramsP;
  if (paramsClass.isAssignableFrom(request.getParams().getClass())) {
    paramsP=(P)request.getParams();
  }
 else   if (request.getParams() instanceof JsonElement) {
    paramsP=convertJsonTo((JsonElement)request.getParams(),paramsClass);
  }
 else {
    throw new ClassCastException();
  }
  @SuppressWarnings(""String_Node_Str"") Request<P> requestP=(Request<P>)request;
  requestP.setParams(paramsP);
  return requestP;
}","@SuppressWarnings(""String_Node_Str"") public static <P>Request<P> convertRequest(Request<? extends Object> request,Class<P> paramsClass){
  P paramsP=null;
  Object params=request.getParams();
  if (params != null) {
    if (paramsClass.isAssignableFrom(params.getClass())) {
      paramsP=(P)params;
    }
 else     if (params instanceof JsonElement) {
      paramsP=convertJsonTo((JsonElement)request.getParams(),paramsClass);
    }
 else {
      throw new ClassCastException();
    }
  }
  @SuppressWarnings(""String_Node_Str"") Request<P> requestP=(Request<P>)request;
  requestP.setParams(paramsP);
  return requestP;
}"
10864,"@Bean public ThriftInterfaceConfiguration thriftInterfaceConfiguration(){
  ThriftInterfaceConfigurationOverload config=new ThriftInterfaceConfigurationOverload();
  return config;
}","@Bean public ThriftInterfaceConfiguration thriftInterfaceConfiguration(){
  ThriftInterfaceConfiguration config=new ThriftInterfaceConfiguration();
  config.setServerAddress(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  config.setServerPort(Integer.parseInt(PropertiesManager.getSystemProperty(""String_Node_Str"",""String_Node_Str"")));
  log.info(""String_Node_Str"" + config.getServerAddress() + ""String_Node_Str"");
  log.info(""String_Node_Str"" + config.getServerPort() + ""String_Node_Str"");
  return config;
}"
10865,"@Bean public MediaApiConfiguration mediaApiConfiguration(){
  MediaApiConfigurationOverload config=new MediaApiConfigurationOverload();
  return config;
}","@Bean public MediaApiConfiguration mediaApiConfiguration(){
  MediaApiConfiguration config=new MediaApiConfiguration();
  config.setHandlerAddress(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  config.setHandlerPort(Integer.parseInt(PropertiesManager.getSystemProperty(""String_Node_Str"",""String_Node_Str"")));
  log.info(""String_Node_Str"" + config.getHandlerAddress() + ""String_Node_Str"");
  log.info(""String_Node_Str"" + config.getHandlerPort() + ""String_Node_Str"");
  return config;
}"
10866,"/** 
 * Sender method for error messages in JSON throw a request.
 * @param asyncCtx Asynchronous context
 * @param message JSON error message (as a Java class)
 * @throws IOException Exception while parsing operating with asynchronous context
 */
public void sendJsonError(AsyncContext asyncCtx,JsonRpcResponse message){
  try {
    internalSendJsonAnswer(asyncCtx,message);
  }
 catch (  Throwable e) {
    log.info(""String_Node_Str"",e);
  }
 finally {
    if (asyncCtx != null) {
      asyncCtx.complete();
    }
  }
}","/** 
 * Sender method for error messages in JSON throw a request.
 * @param asyncCtx Asynchronous context
 * @param message JSON error message (as a Java class)
 * @throws IOException Exception while parsing operating with asynchronous context
 */
public void sendJsonError(AsyncContext asyncCtx,JsonRpcResponse message){
  try {
    internalSendJsonAnswer(asyncCtx,message);
  }
 catch (  Throwable e) {
    log.info(""String_Node_Str"",e);
  }
 finally {
    if (asyncCtx != null) {
      try {
        asyncCtx.complete();
      }
 catch (      IllegalStateException e) {
        log.warn(""String_Node_Str"",e.getClass().getName());
      }
    }
  }
}"
10867,"protected synchronized void destroy(){
  registered=false;
  if (initialAsyncCtx != null) {
    initialAsyncCtx.complete();
    initialAsyncCtx=null;
  }
  if (manager != null) {
    manager.remove(this.sessionId);
  }
  if (eventQueue.isEmpty() && currentPollingThread != null) {
    currentPollingThread.interrupt();
  }
  try {
    releaseOwnMediaServerResources();
  }
 catch (  Throwable e) {
    getLogger().error(e.getMessage(),e);
  }
}","protected synchronized void destroy(){
  registered=false;
  if (initialAsyncCtx != null) {
    try {
      initialAsyncCtx.complete();
    }
 catch (    IllegalStateException e) {
      log.warn(""String_Node_Str"",e.getClass().getName());
    }
    initialAsyncCtx=null;
  }
  if (manager != null) {
    manager.remove(this.sessionId);
  }
  if (eventQueue.isEmpty() && currentPollingThread != null) {
    currentPollingThread.interrupt();
  }
  try {
    releaseOwnMediaServerResources();
  }
 catch (  Throwable e) {
    getLogger().error(e.getMessage(),e);
  }
}"
10868,"public void callOnUncaughtExceptionThrown(Throwable t){
  try {
    internalRawCallToOnUncaughtExceptionThrown(t);
  }
 catch (  Throwable tw) {
    callOnUncaughtExceptionThrown(tw);
  }
}","public void callOnUncaughtExceptionThrown(Throwable t){
  try {
    internalRawCallToOnUncaughtExceptionThrown(t);
  }
 catch (  Throwable tw) {
    log.error(""String_Node_Str"",t);
    log.error(""String_Node_Str"",tw);
  }
}"
10869,"protected void internalSendRequestThrift(Request<Object> request,final Class<JsonElement> resultClass,final Continuation<Response<JsonElement>> continuation){
  LOG.info(""String_Node_Str"",request);
  if (request.getMethod().equals(""String_Node_Str"")) {
    JsonObject params=(JsonObject)request.getParams();
    params.addProperty(""String_Node_Str"",localHandlerAddress.getHostName());
    params.addProperty(""String_Node_Str"",localHandlerAddress.getPort());
  }
  sendRequest(request,resultClass,continuation,true);
}","protected void internalSendRequestThrift(Request<Object> request,final Class<JsonElement> resultClass,final Continuation<Response<JsonElement>> continuation){
  LOG.info(""String_Node_Str"",request);
  if (request.getMethod().equals(""String_Node_Str"")) {
    JsonObject params=(JsonObject)request.getParams();
    params.addProperty(""String_Node_Str"",localHandlerAddress.getHostString());
    params.addProperty(""String_Node_Str"",localHandlerAddress.getPort());
  }
  sendRequest(request,resultClass,continuation,true);
}"
10870,"private void internalEventJsonRpc(String request){
  try {
    LOG.debug(""String_Node_Str"",request.trim());
    Request<JsonObject> requestObj=JsonUtils.fromJsonRequest(request,JsonObject.class);
    JsonElement subsJsonElem=requestObj.getParams().get(""String_Node_Str"");
    if (subsJsonElem == null) {
      LOG.error(""String_Node_Str"",request);
      return;
    }
    String subscription=subsJsonElem.getAsString().trim();
    Session session=subscriptions.get(subscription);
    if (session == null) {
      LOG.error(""String_Node_Str"",subscriptions);
      LOG.info(""String_Node_Str"");
      return;
    }
    try {
      session.sendNotification(""String_Node_Str"",requestObj.getParams());
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}","private void internalEventJsonRpc(String request){
  try {
    LOG.debug(""String_Node_Str"",request.trim());
    Request<JsonObject> requestObj=JsonUtils.fromJsonRequest(request,JsonObject.class);
    JsonElement subsJsonElem=requestObj.getParams().get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"");
    if (subsJsonElem == null) {
      LOG.error(""String_Node_Str"",request);
      return;
    }
    String subscription=subsJsonElem.getAsString().trim();
    Session session=subscriptions.get(subscription);
    if (session == null) {
      LOG.error(""String_Node_Str"",subscriptions);
      LOG.info(""String_Node_Str"");
      return;
    }
    try {
      session.sendNotification(""String_Node_Str"",requestObj.getParams());
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}"
10871,"protected void requestOnComplete(invokeJsonRpc_call mediaServerResponse,Transaction transaction,boolean subscribeResponse){
  try {
    String result=mediaServerResponse.getResult();
    Response<JsonElement> response=JsonUtils.fromJsonResponse(result,JsonElement.class);
    if (response.isError()) {
      ResponseError error=response.getError();
      transaction.sendError(error.getCode(),error.getMessage(),error.getData());
    }
 else {
      if (subscribeResponse) {
        String subscription=response.getResult().getAsString().trim();
        subscriptions.put(subscription,transaction.getSession());
      }
      transaction.sendResponse(response.getResult());
    }
  }
 catch (  TException e) {
    try {
      transaction.sendError(e);
    }
 catch (    IOException e1) {
      throw new KurentoMediaFrameworkException(""String_Node_Str"");
    }
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException(""String_Node_Str"");
  }
}","protected void requestOnComplete(invokeJsonRpc_call mediaServerResponse,Transaction transaction,boolean subscribeResponse){
  try {
    String result=mediaServerResponse.getResult();
    Response<JsonElement> response=JsonUtils.fromJsonResponse(result,JsonElement.class);
    if (response.isError()) {
      ResponseError error=response.getError();
      transaction.sendError(error.getCode(),error.getMessage(),error.getData());
    }
 else {
      if (subscribeResponse) {
        try {
          String subscription=((JsonObject)response.getResult()).get(""String_Node_Str"").getAsString().trim();
          subscriptions.put(subscription,transaction.getSession());
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"" + response + ""String_Node_Str"",e);
        }
      }
      transaction.sendResponse(response.getResult());
    }
  }
 catch (  TException e) {
    try {
      transaction.sendError(e);
    }
 catch (    IOException e1) {
      throw new KurentoMediaFrameworkException(""String_Node_Str"");
    }
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException(""String_Node_Str"");
  }
}"
10872,"private <P,R>Response<R> sendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  try {
    wsSession.sendMessage(new TextMessage(JsonUtils.toJson(request)));
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",JsonUtils.toJson(request),wsSession.getId(),e);
    return null;
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJsonObject;
  try {
    responseJsonObject=responseFuture.get();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  return MessageUtils.convertResponse(responseJsonObject,resultClass);
}","private <P,R>Response<R> sendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  try {
synchronized (wsSession) {
      wsSession.sendMessage(new TextMessage(JsonUtils.toJson(request)));
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",JsonUtils.toJson(request),wsSession.getId(),e);
    return null;
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJsonObject;
  try {
    responseJsonObject=responseFuture.get();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  return MessageUtils.convertResponse(responseJsonObject,resultClass);
}"
10873,"@PostConstruct private void init(){
  ctx.getBean(""String_Node_Str"",this.processor,new InetSocketAddress(config.getHandlerAddress(),config.getHandlerPort()));
}","@PostConstruct private void init(){
  LOG.info(""String_Node_Str"" + config.getHandlerAddress());
  LOG.info(""String_Node_Str"" + config.getHandlerPort());
  ThriftServer server=(ThriftServer)ctx.getBean(""String_Node_Str"",this.processor,new InetSocketAddress(config.getHandlerAddress(),config.getHandlerPort()));
  server.start();
}"
10874,"@Override protected void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException {
  String fullUrl=request.getRequestURL().append('?').append(request.getQueryString()).toString();
  log.info(""String_Node_Str"",fullUrl);
  if (!Strings.isNullOrEmpty(props.getKeystoneHost())) {
    String accessToken=parseAccessToken(request);
    if (Strings.isNullOrEmpty(accessToken)) {
      log.warn(""String_Node_Str"",request.getRemoteAddr());
      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
 else     if (isTokenValid(accessToken)) {
      log.info(""String_Node_Str"",request.getRemoteAddr());
      filterChain.doFilter(request,response);
    }
 else {
      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
  }
}","@Override protected void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException {
  String fullUrl=request.getRequestURL().append('?').append(request.getQueryString()).toString();
  log.info(""String_Node_Str"",fullUrl);
  if (!Strings.isNullOrEmpty(props.getKeystoneHost())) {
    String accessToken=parseAccessToken(request);
    if (Strings.isNullOrEmpty(accessToken)) {
      log.warn(""String_Node_Str"",request.getRemoteAddr());
      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
 else     if (isTokenValid(accessToken)) {
      log.info(""String_Node_Str"",request.getRemoteAddr());
      filterChain.doFilter(request,response);
    }
 else {
      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
  }
 else {
    log.info(""String_Node_Str"" + ""String_Node_Str"",request.getRemoteAddr());
    filterChain.doFilter(request,response);
  }
}"
10875,"@PostConstruct private void init(){
  LOG.info(""String_Node_Str"" + config.getHandlerAddress());
  LOG.info(""String_Node_Str"" + config.getHandlerPort());
  ThriftServer server=(ThriftServer)ctx.getBean(""String_Node_Str"",this.processor,new InetSocketAddress(config.getHandlerAddress(),config.getHandlerPort()));
  server.start();
}","@PostConstruct private void init(){
  LOG.info(""String_Node_Str"",config.getHandlerAddress());
  LOG.info(""String_Node_Str"",config.getHandlerPort());
  server=(ThriftServer)ctx.getBean(""String_Node_Str"",this.processor,new InetSocketAddress(config.getHandlerAddress(),config.getHandlerPort()));
  server.start();
}"
10876,"@Override public void eventJsonRpc(String request) throws TException {
  try {
    Request<JsonObject> requestObj=JsonUtils.fromJsonRequest(request,JsonObject.class);
    try {
      session.sendNotification(""String_Node_Str"",requestObj.getParams());
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    throw new KurentoMediaFrameworkException(""String_Node_Str"",e);
  }
}","@Override public void eventJsonRpc(String request) throws TException {
  try {
    LOG.debug(""String_Node_Str"",request.trim());
    Request<JsonObject> requestObj=JsonUtils.fromJsonRequest(request,JsonObject.class);
    try {
      session.sendNotification(""String_Node_Str"",requestObj.getParams());
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    throw new KurentoMediaFrameworkException(""String_Node_Str"",e);
  }
}"
10877,"@Override public void handleRequest(final Transaction transaction,final Request<JsonObject> request) throws Exception {
  final AsyncClient client=clientPool.acquireAsync();
  transaction.startAsync();
  if (request.getMethod().equals(""String_Node_Str"")) {
    request.getParams().addProperty(""String_Node_Str"",config.getHandlerAddress());
    request.getParams().addProperty(""String_Node_Str"",config.getHandlerPort());
  }
  client.invokeJsonRpc(request.toString(),new AsyncMethodCallback<invokeJsonRpc_call>(){
    @Override public void onComplete(    invokeJsonRpc_call response){
      clientPool.release(client);
      if (request.getId() != null)       requestOnComplete(response,transaction);
    }
    @Override public void onError(    Exception exception){
      clientPool.release(client);
      requestOnError(exception,transaction);
    }
  }
);
}","@Override public void handleRequest(final Transaction transaction,final Request<JsonObject> request) throws Exception {
  final AsyncClient client=clientPool.acquireAsync();
  transaction.startAsync();
  if (request.getMethod().equals(""String_Node_Str"")) {
    request.getParams().addProperty(""String_Node_Str"",config.getHandlerAddress());
    request.getParams().addProperty(""String_Node_Str"",config.getHandlerPort());
  }
  try {
    client.invokeJsonRpc(request.toString(),new AsyncMethodCallback<invokeJsonRpc_call>(){
      @Override public void onComplete(      invokeJsonRpc_call response){
        clientPool.release(client);
        if (request.getId() != null)         requestOnComplete(response,transaction);
      }
      @Override public void onError(      Exception exception){
        clientPool.release(client);
        requestOnError(exception,transaction);
      }
    }
);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + ""String_Node_Str"",e);
  }
}"
10878,"@Override public synchronized void onSessionTerminated(WebRtcContentSession session,int code,String reason) throws Exception {
  DispatcherParticipant participant=(DispatcherParticipant)session.getAttribute(""String_Node_Str"");
  participants.remove(participant.getId());
  participant.endpoint.release();
  participant.port.release();
  notifyUnjoined(participant);
  if (participants.isEmpty()) {
    getLogger().info(""String_Node_Str"");
    mp.release();
    mp=null;
    participants.clear();
  }
  super.onSessionTerminated(session,code,reason);
}","@Override public synchronized void onSessionTerminated(WebRtcContentSession session,int code,String reason) throws Exception {
  DispatcherParticipant participant=(DispatcherParticipant)session.getAttribute(""String_Node_Str"");
  participants.remove(participant.getId());
  notifyUnjoined(participant);
  if (participants.isEmpty()) {
    getLogger().info(""String_Node_Str"");
    mp.release();
    mp=null;
    participants.clear();
  }
  super.onSessionTerminated(session,code,reason);
}"
10879,"private boolean selectParticipant(WebRtcContentSession session,String partId){
  DispatcherParticipant partSelected=participants.get(partId);
  if (partSelected == null) {
    getLogger().error(""String_Node_Str"",partId);
    return false;
  }
  partSelected.endpoint.connect(((DispatcherParticipant)session.getAttribute(""String_Node_Str"")).endpoint);
  return true;
}","private boolean selectParticipant(WebRtcContentSession session,String partId){
  DispatcherParticipant partSelected=participants.get(partId);
  if (partSelected == null) {
    getLogger().error(""String_Node_Str"",partId);
    return false;
  }
  dispatcher.connect(partSelected.port,((DispatcherParticipant)session.getAttribute(""String_Node_Str"")).port);
  return true;
}"
10880,"@Override public void onContentRequest(HttpPlayerSession session) throws Exception {
  MediaPipelineFactory mpf=session.getMediaPipelineFactory();
  MediaPipeline mp=mpf.create();
  session.releaseOnTerminate(mp);
  PlayerEndpoint playerEndpoint=mp.newPlayerEndpoint(""String_Node_Str"").build();
  session.setAttribute(""String_Node_Str"",playerEndpoint);
  HttpEndpoint httpEndpoint=session.getMediaPipelineFactory().create().newHttpGetEndpoint().terminateOnEOS().build();
  playerEndpoint.connect(httpEndpoint);
  session.start(httpEndpoint);
}","@Override public void onContentRequest(HttpPlayerSession session) throws Exception {
  MediaPipelineFactory mpf=session.getMediaPipelineFactory();
  MediaPipeline mp=mpf.create();
  session.releaseOnTerminate(mp);
  PlayerEndpoint playerEndpoint=mp.newPlayerEndpoint(""String_Node_Str"").build();
  session.setAttribute(""String_Node_Str"",playerEndpoint);
  HttpEndpoint httpEndpoint=mp.newHttpGetEndpoint().terminateOnEOS().build();
  playerEndpoint.connect(httpEndpoint);
  session.start(httpEndpoint);
}"
10881,"@Override public void onContentRequest(HttpPlayerSession session) throws Exception {
  MediaPipelineFactory mpf=session.getMediaPipelineFactory();
  MediaPipeline mp=mpf.create();
  session.releaseOnTerminate(mp);
  PlayerEndpoint playerEndPoint=mp.newPlayerEndpoint(""String_Node_Str"").build();
  JackVaderFilter filter=mp.newJackVaderFilter().build();
  playerEndPoint.connect(filter);
  session.setAttribute(""String_Node_Str"",playerEndPoint);
  HttpEndpoint httpEndpoint=session.getMediaPipelineFactory().create().newHttpGetEndpoint().terminateOnEOS().build();
  filter.connect(httpEndpoint);
  session.start(httpEndpoint);
}","@Override public void onContentRequest(HttpPlayerSession session) throws Exception {
  MediaPipelineFactory mpf=session.getMediaPipelineFactory();
  MediaPipeline mp=mpf.create();
  session.releaseOnTerminate(mp);
  PlayerEndpoint playerEndPoint=mp.newPlayerEndpoint(""String_Node_Str"").build();
  JackVaderFilter filter=mp.newJackVaderFilter().build();
  playerEndPoint.connect(filter);
  session.setAttribute(""String_Node_Str"",playerEndPoint);
  HttpEndpoint httpEndpoint=mp.newHttpGetEndpoint().terminateOnEOS().build();
  filter.connect(httpEndpoint);
  session.start(httpEndpoint);
}"
10882,"@Override public void onContentRequest(HttpPlayerSession session) throws Exception {
  if (CpRtcRtpJackHandler.sharedFilterReference == null) {
    session.terminate(500,""String_Node_Str"");
  }
 else {
    HttpEndpoint httpEndpoint=session.getMediaPipelineFactory().create().newHttpGetEndpoint().terminateOnEOS().build();
    CpRtcRtpJackHandler.sharedFilterReference.connect(httpEndpoint);
    session.start(httpEndpoint);
  }
}","@Override public void onContentRequest(HttpPlayerSession session) throws Exception {
  if (CpRtcRtpJackHandler.sharedFilterReference == null) {
    session.terminate(500,""String_Node_Str"");
  }
 else {
    HttpEndpoint httpEndpoint=CpRtcRtpJackHandler.sharedFilterReference.getMediaPipeline().newHttpGetEndpoint().terminateOnEOS().build();
    CpRtcRtpJackHandler.sharedFilterReference.connect(httpEndpoint);
    session.start(httpEndpoint);
  }
}"
10883,"@Override public void onContentRequest(final HttpPlayerSession session) throws Exception {
  if (CpRtcRtpZbarHandler.sharedFilterReference == null) {
    session.terminate(500,""String_Node_Str"");
    return;
  }
  CpRtcRtpZbarHandler.sharedFilterReference.addCodeFoundListener(new MediaEventListener<CodeFoundEvent>(){
    @Override public void onEvent(    CodeFoundEvent event){
      session.publishEvent(new ContentEvent(event.getType(),event.getValue()));
    }
  }
);
  HttpEndpoint httpEndpoint=session.getMediaPipelineFactory().create().newHttpGetEndpoint().terminateOnEOS().build();
  CpRtcRtpZbarHandler.sharedFilterReference.connect(httpEndpoint);
  session.start(httpEndpoint);
}","@Override public void onContentRequest(final HttpPlayerSession session) throws Exception {
  if (CpRtcRtpZbarHandler.sharedFilterReference == null) {
    session.terminate(500,""String_Node_Str"");
    return;
  }
  CpRtcRtpZbarHandler.sharedFilterReference.addCodeFoundListener(new MediaEventListener<CodeFoundEvent>(){
    @Override public void onEvent(    CodeFoundEvent event){
      session.publishEvent(new ContentEvent(event.getType(),event.getValue()));
    }
  }
);
  HttpEndpoint httpEndpoint=CpRtcRtpZbarHandler.sharedFilterReference.getMediaPipeline().newHttpGetEndpoint().terminateOnEOS().build();
  CpRtcRtpZbarHandler.sharedFilterReference.connect(httpEndpoint);
  session.start(httpEndpoint);
}"
10884,"@Bean public ServletRegistrationBean repositoryServletRegistrationBean(){
  return new ServletRegistrationBean(new RepositoryHttpServlet(),""String_Node_Str"");
}","@Bean public ServletRegistrationBean repositoryServletRegistrationBean(){
  ServletRegistrationBean servletRegistrationBean=new ServletRegistrationBean(new RepositoryHttpServlet(),""String_Node_Str"");
  servletRegistrationBean.setLoadOnStartup(1);
  return servletRegistrationBean;
}"
10885,"public static Object[] extractEventParams(Annotation[][] parameterAnnotations,Props data){
  List<String> names=getParamNames(parameterAnnotations);
  Object[] params=new Object[names.size()];
  for (int i=0; i < names.size(); i++) {
    String name=names.get(i);
    if (name.equals(""String_Node_Str"")) {
      params[i]=data.getProp(name);
    }
  }
  return params;
}","public static Object[] extractEventParams(Annotation[][] parameterAnnotations,Props data){
  List<String> names=getParamNames(parameterAnnotations);
  Object[] params=new Object[names.size()];
  for (int i=0; i < names.size(); i++) {
    String name=names.get(i);
    params[i]=data.getProp(name);
  }
  return params;
}"
10886,"public static ResponseError newFromException(Exception e){
  StringWriter writer=new StringWriter();
  e.printStackTrace(new PrintWriter(writer));
  return new ResponseError(1,e.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),writer.toString());
}","public static ResponseError newFromException(Exception e){
  StringWriter writer=new StringWriter();
  e.printStackTrace(new PrintWriter(writer));
  return new ResponseError(-1,e.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),writer.toString());
}"
10887,"@Test public void test() throws IOException, InterruptedException {
  JsonRpcClient client=createJsonRpcClient(""String_Node_Str"");
  try {
    client.sendRequest(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  JsonRpcErrorException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
    Assert.assertEquals(""String_Node_Str"",e.getData());
    Assert.assertEquals(-1,e.getCode());
  }
  try {
    client.sendRequest(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  JsonRpcErrorException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
    Assert.assertEquals(""String_Node_Str"",e.getData());
    Assert.assertEquals(-1,e.getCode());
  }
  try {
    client.sendRequest(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    String expected=""String_Node_Str"";
    Assert.assertEquals(expected,e.getMessage().substring(0,expected.length()));
  }
  client.close();
}","@Test public void test() throws IOException, InterruptedException {
  JsonRpcClient client=createJsonRpcClient(""String_Node_Str"");
  try {
    client.sendRequest(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  JsonRpcErrorException e) {
    checkException(e,""String_Node_Str"",""String_Node_Str"");
  }
  try {
    client.sendRequest(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  JsonRpcErrorException e) {
    checkException(e,""String_Node_Str"",""String_Node_Str"");
  }
  try {
    client.sendRequest(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  JsonRpcErrorException e) {
    checkException(e,""String_Node_Str"",""String_Node_Str"");
  }
  client.close();
}"
10888,"@Override public void addWindow(PointerDetectorWindowMediaParam window,Continuation<Void> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  PointerDetectorWindowMediaParam param=new PointerDetectorWindowMediaParamBuilder(window.getId(),window.getHeight(),window.getWidth(),window.getUpperRightX(),window.getUpperRightY()).build();
  params.put(ADD_NEW_WINDOW_PARAM_WINDOW,param);
  invoke(ADD_NEW_WINDOW,params,new VoidContinuationWrapper(cont));
}","@Override public void addWindow(PointerDetectorWindowMediaParam window,Continuation<Void> cont){
  Map<String,MediaParam> params=newHashMapWithExpectedSize(1);
  params.put(ADD_NEW_WINDOW_PARAM_WINDOW,window);
  invoke(ADD_NEW_WINDOW,params,new VoidContinuationWrapper(cont));
}"
10889,"@Override public void removeWindow(String windowId,Continuation<Void> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(windowId);
  params.put(REMOVE_WINDOW_PARAM_WINDOW_ID,param);
  invoke(REMOVE_WINDOW,params,new VoidContinuationWrapper(cont));
}","@Override public void removeWindow(String windowId,Continuation<Void> cont){
  Map<String,MediaParam> params=newHashMapWithExpectedSize(1);
  StringMediaParam param=new StringMediaParam();
  param.setString(windowId);
  params.put(REMOVE_WINDOW_PARAM_WINDOW_ID,param);
  invoke(REMOVE_WINDOW,params,new VoidContinuationWrapper(cont));
}"
10890,"/** 
 * Adds a new detector window, represented by a simple square or rectangle in the image.
 * @param id
 * @param height
 * @param width
 * @param upperRightX
 * @param upperRightY
 * @return an adder object to add created windows to the set of windows
 */
public void addDetectorWindow(PointerDetectorWindowMediaParam window){
  KmsMediaPointerDetectorWindow kmsWindow=new KmsMediaPointerDetectorWindow(window.getUpperRightX(),window.getUpperRightY(),window.getWidth(),window.getHeight(),window.getId());
  windows.add(kmsWindow);
}","/** 
 * Adds a new detector window, represented by a simple square or rectangle in the image.
 * @param id
 * @param height
 * @param width
 * @param upperRightX
 * @param upperRightY
 * @return an adder object to add created windows to the set of windows
 */
public void addDetectorWindow(PointerDetectorWindowMediaParam window){
  KmsMediaPointerDetectorWindow kmsWindow=new KmsMediaPointerDetectorWindow(window.getUpperRightX(),window.getUpperRightY(),window.getWidth(),window.getHeight(),window.getId());
  kmsWindow.setActiveOverlayImageUri(window.getActiveImageUri().toString());
  kmsWindow.setInactiveOverlayImageUri(window.getInactiveImageUri().toString());
  kmsWindow.setOverlayTransparency(window.getImageTransparency());
  windows.add(kmsWindow);
}"
10891,"/** 
 * Constructor for the builder, with the minimum set of attributes to build a window. If no further configuration is don, the window will appear outlined as a box.
 * @param id id of the window
 * @param height of the window
 * @param width of the window
 * @param upperRightX x coordinate of the upper right corner
 * @param upperRightY y coordinate of the upper right corner
 */
public PointerDetectorWindowMediaParamBuilder(final String id,final int height,final int width,final int upperRightX,final int upperRightY){
  window=new KmsMediaPointerDetectorWindow(height,height,width,height,id);
}","/** 
 * Constructor for the builder, with the minimum set of attributes to build a window. If no further configuration is don, the window will appear outlined as a box.
 * @param id id of the window
 * @param height of the window
 * @param width of the window
 * @param upperRightX x coordinate of the upper right corner
 * @param upperRightY y coordinate of the upper right corner
 */
public PointerDetectorWindowMediaParamBuilder(final String id,final int height,final int width,final int upperRightX,final int upperRightY){
  window=new KmsMediaPointerDetectorWindow(upperRightX,upperRightY,width,height,id);
}"
10892,"protected Map<String,KmsMediaParam> transformMediaParamsMap(Map<String,MediaParam> params){
  int mapSize=1 + (int)(params.size() / 0.75);
  Map<String,KmsMediaParam> kmsParams=new HashMap<String,KmsMediaParam>(mapSize);
  for (  Entry<String,MediaParam> entry : params.entrySet()) {
    kmsParams.put(entry.getKey(),((AbstractMediaParam)entry.getValue()).getThriftParams());
  }
  return kmsParams;
}","protected Map<String,KmsMediaParam> transformMediaParamsMap(Map<String,MediaParam> params){
  Map<String,KmsMediaParam> kmsParams=newHashMapWithExpectedSize(params.size());
  for (  Entry<String,MediaParam> entry : params.entrySet()) {
    kmsParams.put(entry.getKey(),((AbstractMediaParam)entry.getValue()).getThriftParams());
  }
  return kmsParams;
}"
10893,"@Override public T withWindow(PointerDetectorWindowMediaParam window){
  param.addDetectorWindow(window);
  return self();
}","@Override public T withWindow(PointerDetectorWindowMediaParam window){
  initialiseMediaParam();
  param.addDetectorWindow(window);
  return self();
}"
10894,"@Override public void addWindow(PointerDetectorWindowMediaParam window,Continuation<Void> cont){
}","@Override public void addWindow(PointerDetectorWindowMediaParam window,Continuation<Void> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  PointerDetectorWindowMediaParam param=new PointerDetectorWindowMediaParamBuilder(window.getId(),window.getHeight(),window.getWidth(),window.getUpperRightX(),window.getUpperRightY()).build();
  params.put(ADD_NEW_WINDOW_PARAM_WINDOW,param);
  invoke(ADD_NEW_WINDOW,params,new VoidContinuationWrapper(cont));
}"
10895,"@Override public void removeWindow(String windowId,Continuation<Void> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(windowId);
  params.put(REMOVE_WINDOW_PARAM_WINDOW_ID,param);
  invoke(REMOVE_WINDOW,params);
}","@Override public void removeWindow(String windowId,Continuation<Void> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(windowId);
  params.put(REMOVE_WINDOW_PARAM_WINDOW_ID,param);
  invoke(REMOVE_WINDOW,params,new VoidContinuationWrapper(cont));
}"
10896,"/** 
 * Adds a new detector window, represented by a simple square or rectangle in the image.
 * @param id
 * @param height
 * @param width
 * @param upperRightX
 * @param upperRightY
 * @return an adder object to add created windows to the set of windows
 */
public void addDetectorWindow(PointerDetectorWindowMediaParam window){
}","/** 
 * Adds a new detector window, represented by a simple square or rectangle in the image.
 * @param id
 * @param height
 * @param width
 * @param upperRightX
 * @param upperRightY
 * @return an adder object to add created windows to the set of windows
 */
public void addDetectorWindow(PointerDetectorWindowMediaParam window){
  KmsMediaPointerDetectorWindow kmsWindow=new KmsMediaPointerDetectorWindow(window.getUpperRightX(),window.getUpperRightY(),window.getWidth(),window.getHeight(),window.getId());
  windows.add(kmsWindow);
}"
10897,"@Override public List<RepositoryItem> findRepositoryItemsByAttValue(String attributeName,String value){
  return createItemsForIds(metadata.findRepositoryItemsByAttValue(attributeName,value));
}","@Override public List<RepositoryItem> findRepositoryItemsByAttValue(String attributeName,String value){
  return createItemsForIds(metadata.findByAttValue(attributeName,value));
}"
10898,"@Override public List<RepositoryItem> findRepositoryItemsByAttRegex(String attributeName,String regex){
  return createItemsForIds(metadata.findRepositoryItemsByAttRegex(attributeName,regex));
}","@Override public List<RepositoryItem> findRepositoryItemsByAttRegex(String attributeName,String regex){
  return createItemsForIds(metadata.findByAttRegex(attributeName,regex));
}"
10899,"private String loadFileAsString() throws IOException {
  StringBuilder sb=new StringBuilder();
  BufferedReader br=new BufferedReader(new FileReader(itemsMetadataFile));
  String line;
  while ((line=br.readLine()) != null) {
    sb.append(line).append(""String_Node_Str"");
  }
  br.close();
  return sb.toString();
}","private String loadFileAsString() throws IOException {
  if (!itemsMetadataFile.exists()) {
    return ""String_Node_Str"";
  }
  StringBuilder sb=new StringBuilder();
  FileReader metadataFile=new FileReader(itemsMetadataFile);
  BufferedReader br=new BufferedReader(metadataFile);
  String line;
  while ((line=br.readLine()) != null) {
    sb.append(line).append(""String_Node_Str"");
  }
  br.close();
  return sb.toString();
}"
10900,"public void save(){
  try {
    PrintWriter writer=new PrintWriter(itemsMetadataFile);
    String content=JSON.serialize(itemsMetadata);
    writer.print(content);
    writer.close();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}","public void save(){
  try {
    if (!itemsMetadataFile.exists()) {
      itemsMetadataFile.getParentFile().mkdirs();
      itemsMetadataFile.createNewFile();
    }
    PrintWriter writer=new PrintWriter(itemsMetadataFile);
    String content=JSON.serialize(itemsMetadata);
    writer.print(content);
    writer.close();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}"
10901,"private void loadItemsMetadata() throws IOException {
  DBObject contents=(DBObject)JSON.parse(loadFileAsString());
  itemsMetadata=new ConcurrentHashMap<String,Map<String,String>>();
  for (  String key : contents.keySet()) {
    try {
      DBObject metadata=(DBObject)contents.get(key);
      Map<String,String> map=new HashMap<String,String>();
      for (      String metadataKey : metadata.keySet()) {
        map.put(key,metadata.get(metadataKey).toString());
      }
    }
 catch (    ClassCastException e) {
      log.warn(""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
}","private void loadItemsMetadata() throws IOException {
  itemsMetadata=new ConcurrentHashMap<String,Map<String,String>>();
  DBObject contents=(DBObject)JSON.parse(loadFileAsString());
  if (contents != null) {
    for (    String key : contents.keySet()) {
      try {
        DBObject metadata=(DBObject)contents.get(key);
        Map<String,String> map=new HashMap<String,String>();
        for (        String metadataKey : metadata.keySet()) {
          map.put(metadataKey,metadata.get(metadataKey).toString());
        }
        itemsMetadata.put(key,map);
      }
 catch (      ClassCastException e) {
        log.warn(""String_Node_Str"" + key + ""String_Node_Str"");
      }
    }
  }
}"
10902,"private SdpEndPoint buildAndConnectSdpEndPoint(MediaElement sourceElement,MediaElement[] sinkElements){
  getLogger().info(""String_Node_Str"");
  if (sinkElements != null && sinkElements.length > 0) {
    for (    MediaElement e : sinkElements) {
      Assert.notNull(e,""String_Node_Str"",10023);
    }
  }
  MediaElement candidate=null;
  if (sinkElements == null || sinkElements.length == 0) {
    candidate=sourceElement;
  }
 else {
    candidate=sinkElements[0];
  }
  getLogger().info(""String_Node_Str"" + candidate);
  MediaPipeline mediaPipeline=null;
  if (candidate != null) {
    mediaPipeline=candidate.getMediaPipeline();
  }
 else {
    mediaPipeline=mediaPipelineFactory.create();
    releaseOnTerminate(mediaPipeline);
  }
  getLogger().info(""String_Node_Str"");
  SdpEndPoint sdpEndPoint=buildSdpEndPoint(mediaPipeline);
  releaseOnTerminate(sdpEndPoint);
  if (sourceElement == null) {
    sourceElement=sdpEndPoint;
  }
  getLogger().info(""String_Node_Str"");
  if (sinkElements != null) {
    connect(sdpEndPoint,sinkElements);
  }
  if (sourceElement != null) {
    sourceElement.connect(sdpEndPoint);
  }
  return sdpEndPoint;
}","private SdpEndPoint buildAndConnectSdpEndPoint(MediaElement sourceElement,MediaElement[] sinkElements){
  getLogger().info(""String_Node_Str"");
  if (sinkElements != null && sinkElements.length > 0) {
    for (    MediaElement e : sinkElements) {
      Assert.notNull(e,""String_Node_Str"",10023);
    }
  }
  MediaElement candidate=null;
  if (sinkElements == null || sinkElements.length == 0) {
    candidate=sourceElement;
  }
 else {
    candidate=sinkElements[0];
  }
  getLogger().info(""String_Node_Str"" + candidate);
  MediaPipeline mediaPipeline=null;
  if (candidate != null) {
    mediaPipeline=candidate.getMediaPipeline();
  }
 else {
    mediaPipeline=mediaPipelineFactory.create();
    releaseOnTerminate(mediaPipeline);
  }
  getLogger().info(""String_Node_Str"");
  SdpEndPoint sdpEndPoint=buildSdpEndPoint(mediaPipeline);
  releaseOnTerminate(sdpEndPoint);
  if (sourceElement == null) {
    sourceElement=sdpEndPoint;
  }
  getLogger().info(""String_Node_Str"");
  if (sinkElements != null && sinkElements.length > 0) {
    connect(sdpEndPoint,sinkElements);
  }
  if (sourceElement != null) {
    sourceElement.connect(sdpEndPoint);
  }
  return sdpEndPoint;
}"
10903,"public void testCampusPartySimulatedPipeline() throws InterruptedException, KurentoMediaFrameworkException {
  log.info(""String_Node_Str"");
  RtpEndPoint rtpEndPoint=mediaPipeline.createRtpEndPoint();
  String requestSdp=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  log.info(""String_Node_Str"" + requestSdp);
  String answerSdp=rtpEndPoint.processOffer(requestSdp);
  log.info(""String_Node_Str"");
  rtpEndPoint.getMediaSrcs(KmsMediaType.VIDEO).iterator().next().connect(rtpEndPoint.getMediaSinks(KmsMediaType.VIDEO).iterator().next());
  Thread.sleep(1000);
  log.info(""String_Node_Str"");
  HttpEndPoint httpEndPoint=mediaPipeline.createHttpEndPoint(0,0);
  log.info(""String_Node_Str"");
  rtpEndPoint.getMediaSrcs(KmsMediaType.VIDEO).iterator().next().connect(httpEndPoint.getMediaSinks(KmsMediaType.VIDEO).iterator().next());
  log.info(""String_Node_Str"" + httpEndPoint.getUrl());
}","public void testCampusPartySimulatedPipeline() throws InterruptedException, KurentoMediaFrameworkException {
  log.info(""String_Node_Str"");
  RtpEndPoint rtpEndPoint=mediaPipeline.createRtpEndPoint();
  String requestSdp=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  log.info(""String_Node_Str"" + requestSdp);
  String answerSdp=rtpEndPoint.processOffer(requestSdp);
  log.info(""String_Node_Str"" + answerSdp);
  log.info(""String_Node_Str"");
  rtpEndPoint.getMediaSrcs(KmsMediaType.VIDEO).iterator().next().connect(rtpEndPoint.getMediaSinks(KmsMediaType.VIDEO).iterator().next());
  Thread.sleep(1000);
  log.info(""String_Node_Str"");
  HttpEndPoint httpEndPoint=mediaPipeline.createHttpEndPoint(0,0);
  log.info(""String_Node_Str"");
  rtpEndPoint.getMediaSrcs(KmsMediaType.VIDEO).iterator().next().connect(httpEndPoint.getMediaSinks(KmsMediaType.VIDEO).iterator().next());
  log.info(""String_Node_Str"" + httpEndPoint.getUrl());
}"
10904,"@Override public void processOffer(String offer,final Continuation<String> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(offer);
  params.put(PROCESS_SDP_OFFER_PARAM_OFFER_STR,param);
  invoke(PROCESS_SDP_OFFER,new StringContinuationWrapper(cont));
}","@Override public void processOffer(String offer,final Continuation<String> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(offer);
  params.put(PROCESS_SDP_OFFER_PARAM_OFFER_STR,param);
  invoke(PROCESS_SDP_OFFER,params,new StringContinuationWrapper(cont));
}"
10905,"@Override public void processAnswer(String answer,final Continuation<String> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(answer);
  params.put(PROCESS_SDP_ANSWER_PARAM_ANSWER_STR,param);
  invoke(PROCESS_SDP_ANSWER,new StringContinuationWrapper(cont));
}","@Override public void processAnswer(String answer,final Continuation<String> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(answer);
  params.put(PROCESS_SDP_ANSWER_PARAM_ANSWER_STR,param);
  invoke(PROCESS_SDP_ANSWER,params,new StringContinuationWrapper(cont));
}"
10906,"@Test public void testStream() throws InterruptedException {
  final Semaphore sem=new Semaphore(0);
  mediaPipeline.createRtpEndPoint(new Continuation<RtpEndPoint>(){
    @Override public void onSuccess(    RtpEndPoint result){
      System.out.println(""String_Node_Str"");
      RtpEndPoint stream=result;
      final Semaphore semCont=new Semaphore(0);
      try {
        stream.generateOffer(new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.processOffer(""String_Node_Str"",new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.processAnswer(""String_Node_Str"",new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.getLocalSessionDescriptor(new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.getRemoteSessionDescriptor(new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
    }
    @Override public void onError(    Throwable cause){
      System.out.println(""String_Node_Str"");
    }
  }
);
  Assert.assertTrue(sem.tryAcquire(500,TimeUnit.MILLISECONDS));
}","@Ignore @Test public void testStream() throws InterruptedException {
  final Semaphore sem=new Semaphore(0);
  mediaPipeline.createRtpEndPoint(new Continuation<RtpEndPoint>(){
    @Override public void onSuccess(    RtpEndPoint result){
      System.out.println(""String_Node_Str"");
      RtpEndPoint stream=result;
      final Semaphore semCont=new Semaphore(0);
      try {
        stream.generateOffer(new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(5000,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.processOffer(""String_Node_Str"",new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.processAnswer(""String_Node_Str"",new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.getLocalSessionDescriptor(new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.getRemoteSessionDescriptor(new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
    }
    @Override public void onError(    Throwable cause){
      System.out.println(""String_Node_Str"");
    }
  }
);
  Assert.assertTrue(sem.tryAcquire(50000,TimeUnit.MILLISECONDS));
}"
10907,"@Test public void testMixer() throws KurentoMediaFrameworkException {
  MainMixer mixer=(MainMixer)mediaPipeline.createMediaMixer(MainMixerImpl.TYPE);
  mixer.release();
}","@Ignore @Test public void testMixer() throws KurentoMediaFrameworkException {
  MainMixer mixer=(MainMixer)mediaPipeline.createMediaMixer(MainMixerImpl.TYPE);
  mixer.release();
}"
10908,"@Test public void testRtpEndPointSimulatingAndroidSdp() throws KurentoMediaFrameworkException, InterruptedException {
  log.info(""String_Node_Str"");
  PlayerEndPoint player=mediaPipeline.createPlayerEndPoint(""String_Node_Str"");
  log.info(""String_Node_Str"");
  RtpEndPoint rtpEndPoint=mediaPipeline.createRtpEndPoint();
  String requestSdp=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  log.info(""String_Node_Str"" + requestSdp);
  String answerSdp=rtpEndPoint.processOffer(requestSdp);
  log.info(""String_Node_Str"" + answerSdp);
  log.info(""String_Node_Str"");
  MediaSink videoSink=rtpEndPoint.getMediaSinks(KmsMediaType.VIDEO).iterator().next();
  player.getMediaSrcs(KmsMediaType.VIDEO).iterator().next().connect(videoSink);
  log.info(""String_Node_Str"");
  player.play();
  Thread.sleep(2000);
}","@Test public void testRtpEndPointSimulatingAndroidSdp() throws KurentoMediaFrameworkException, InterruptedException {
  log.info(""String_Node_Str"");
  PlayerEndPoint player=mediaPipeline.createPlayerEndPoint(""String_Node_Str"");
  log.info(""String_Node_Str"");
  RtpEndPoint rtpEndPoint=mediaPipeline.createRtpEndPoint();
  String requestSdp=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  log.info(""String_Node_Str"" + requestSdp);
  String answerSdp=rtpEndPoint.processOffer(requestSdp);
  log.info(""String_Node_Str"" + answerSdp);
  log.info(""String_Node_Str"");
  player.connect(rtpEndPoint,KmsMediaType.VIDEO);
  log.info(""String_Node_Str"");
  Thread.sleep(2000);
}"
10909,"@Test public void testHttpEndPoint() throws KurentoMediaFrameworkException, InterruptedException {
  final PlayerEndPoint player=mediaPipeline.createPlayerEndPoint(""String_Node_Str"");
  HttpEndPoint httpEndPoint=mediaPipeline.createHttpEndPoint(0,0);
  MediaSink videoSink=httpEndPoint.getMediaSinks(KmsMediaType.VIDEO).iterator().next();
  MediaSource videoSrc=player.getMediaSrcs(KmsMediaType.VIDEO).iterator().next();
  videoSrc.connect(videoSink);
  final Semaphore sem=new Semaphore(0);
  player.addEndOfStreamListener(new AbstractEndOfStreamEventListener(){
    @Override public void onEvent(    EndOfStreamEvent event){
      sem.release();
    }
  }
);
  httpEndPoint.addMediaSessionStartListener(new AbstractMediaSessionStartedEventListener(){
    @Override public void onEvent(    MediaSessionStartedEvent event){
      log.info(""String_Node_Str"" + event);
      player.play();
    }
  }
);
  log.info(""String_Node_Str"" + httpEndPoint.getUrl());
  DefaultHttpClient httpclient=new DefaultHttpClient();
  try {
    httpclient.execute(new HttpGet(httpEndPoint.getUrl()));
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  sem.acquire();
  player.release();
  httpEndPoint.release();
}","@Test public void testHttpEndPoint() throws KurentoMediaFrameworkException, InterruptedException {
  final PlayerEndPoint player=mediaPipeline.createPlayerEndPoint(""String_Node_Str"");
  HttpEndPoint httpEndPoint=mediaPipeline.createHttpEndPoint(0,0);
  player.connect(httpEndPoint,KmsMediaType.VIDEO);
  final Semaphore sem=new Semaphore(0);
  player.addEndOfStreamListener(new AbstractEndOfStreamEventListener(){
    @Override public void onEvent(    EndOfStreamEvent event){
      sem.release();
    }
  }
);
  httpEndPoint.addMediaSessionStartListener(new AbstractMediaSessionStartedEventListener(){
    @Override public void onEvent(    MediaSessionStartedEvent event){
      log.info(""String_Node_Str"" + event);
      player.play();
    }
  }
);
  log.info(""String_Node_Str"" + httpEndPoint.getUrl());
  DefaultHttpClient httpclient=new DefaultHttpClient();
  try {
    httpclient.execute(new HttpGet(httpEndPoint.getUrl()));
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  sem.acquire();
  player.release();
  httpEndPoint.release();
}"
10910,"@Test public void testZBar() throws KurentoMediaFrameworkException, InterruptedException {
  PlayerEndPoint player=mediaPipeline.createPlayerEndPoint(""String_Node_Str"");
  ZBarFilter zbar=mediaPipeline.createZBarFilter();
  MediaSink videoSink=zbar.getMediaSinks(KmsMediaType.VIDEO).iterator().next();
  MediaSource videoSrc=player.getMediaSrcs(KmsMediaType.VIDEO).iterator().next();
  videoSrc.connect(videoSink);
  final Semaphore sem=new Semaphore(0);
  zbar.addCodeFoundDataListener(new AbstractCodeFoundEventListener(){
    @Override public void onEvent(    CodeFoundEvent event){
      log.info(""String_Node_Str"" + event);
      sem.release();
    }
  }
);
  player.play();
  Assert.assertTrue(sem.tryAcquire(10,TimeUnit.SECONDS));
  player.stop();
  zbar.release();
  player.release();
}","@Test public void testZBar() throws KurentoMediaFrameworkException, InterruptedException {
  PlayerEndPoint player=mediaPipeline.createPlayerEndPoint(""String_Node_Str"");
  ZBarFilter zbar=mediaPipeline.createZBarFilter();
  player.connect(zbar,KmsMediaType.VIDEO);
  final Semaphore sem=new Semaphore(0);
  zbar.addCodeFoundDataListener(new AbstractCodeFoundEventListener(){
    @Override public void onEvent(    CodeFoundEvent event){
      log.info(""String_Node_Str"" + event);
      sem.release();
    }
  }
);
  player.play();
  Assert.assertTrue(sem.tryAcquire(10,TimeUnit.SECONDS));
  player.stop();
  zbar.release();
  player.release();
}"
10911,"/** 
 * Serialize Java object to JSON (as String).
 * @param obj Java Object representing a JSON message to be serialized
 * @return Serialized JSON message (as String)
 */
public static String toString(Object obj){
  return gson.toJson(obj);
}","/** 
 * Serialize Java object to JSON (as String).
 * @param obj Java Object representing a JSON message to be serialized
 * @return Serialized JSON message (as String)
 */
public static String toString(Object obj){
  return GsonUtils.getGson().toJson(obj);
}"
10912,"protected void activateMedia(String contentPath,MediaElement... mediaElements){
synchronized (this) {
    Assert.isTrue(state == STATE.HANDLING,""String_Node_Str"" + state + ""String_Node_Str"",10001);
    state=STATE.STARTING;
  }
  boolean mediaElementProvided=mediaElements != null & mediaElements.length > 0;
  Assert.isTrue(mediaElementProvided || contentPath == null,""String_Node_Str"",10002);
  Assert.isTrue(mediaElementProvided || contentPath != null,""String_Node_Str"",10003);
  getLogger().info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ contentPath);
  if (contentPath != null) {
    mediaElements=new MediaElement[1];
    mediaElements[0]=buildRepositoryBasedMediaElement(contentPath);
  }
  HttpEndPoint httpEndPoint=buildAndConnectHttpEndPointMediaElement(mediaElements);
  boolean terminate=false;
synchronized (this) {
    if (state == STATE.TERMINATED) {
      terminate=true;
    }
 else     if (state == STATE.STARTING) {
      state=STATE.ACTIVE;
    }
  }
  if (terminate) {
    getLogger().info(""String_Node_Str"");
    return;
  }
  String answerUrl=null;
  try {
    answerUrl=httpEndPoint.getUrl();
    getLogger().info(""String_Node_Str"" + answerUrl);
  }
 catch (  IOException ioe) {
    throw new KurentoMediaFrameworkException(""String_Node_Str"" + ioe.getMessage(),ioe,20006);
  }
  Assert.notNull(answerUrl,""String_Node_Str"",20012);
  Assert.isTrue(answerUrl.length() > 0,""String_Node_Str"",20012);
  getLogger().info(""String_Node_Str"" + answerUrl);
  httpEndPoint.addListener(new MediaEventListener<HttpEndPointEvent>(){
    @Override public void onEvent(    HttpEndPointEvent event){
    }
  }
);
  if (useControlProtocol) {
    answerActivateMediaRequest4JsonControlProtocolConfiguration(answerUrl);
  }
 else {
    answerActivateMediaRequest4SimpleHttpConfiguration(answerUrl);
  }
}","protected void activateMedia(String contentPath,MediaElement... mediaElements){
synchronized (this) {
    Assert.isTrue(state == STATE.HANDLING,""String_Node_Str"" + state + ""String_Node_Str"",10001);
    state=STATE.STARTING;
  }
  final boolean mediaElementProvided=mediaElements != null && mediaElements.length > 0;
  final boolean contentPathProvided=contentPath != null;
  Assert.isTrue(mediaElementProvided || contentPathProvided,""String_Node_Str"",10002);
  Assert.isTrue(!(mediaElementProvided && contentPathProvided),""String_Node_Str"",10003);
  getLogger().info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ contentPath);
  if (contentPath != null) {
    mediaElements=new MediaElement[1];
    mediaElements[0]=buildRepositoryBasedMediaElement(contentPath);
  }
  HttpEndPoint httpEndPoint=buildAndConnectHttpEndPointMediaElement(mediaElements);
  boolean terminate=false;
synchronized (this) {
    if (state == STATE.TERMINATED) {
      terminate=true;
    }
 else     if (state == STATE.STARTING) {
      state=STATE.ACTIVE;
    }
  }
  if (terminate) {
    getLogger().info(""String_Node_Str"");
    return;
  }
  String answerUrl=null;
  try {
    answerUrl=httpEndPoint.getUrl();
    getLogger().info(""String_Node_Str"" + answerUrl);
  }
 catch (  IOException ioe) {
    throw new KurentoMediaFrameworkException(""String_Node_Str"" + ioe.getMessage(),ioe,20006);
  }
  Assert.notNull(answerUrl,""String_Node_Str"",20012);
  Assert.isTrue(answerUrl.length() > 0,""String_Node_Str"",20012);
  getLogger().info(""String_Node_Str"" + answerUrl);
  httpEndPoint.addListener(new MediaEventListener<HttpEndPointEvent>(){
    @Override public void onEvent(    HttpEndPointEvent event){
    }
  }
);
  if (useControlProtocol) {
    answerActivateMediaRequest4JsonControlProtocolConfiguration(answerUrl);
  }
 else {
    answerActivateMediaRequest4SimpleHttpConfiguration(answerUrl);
  }
}"
10913,"@Override protected void sendOnTerminateErrorMessageInInitialContext(int code,String description) throws IOException {
  if (useControlProtocol) {
    protocolManager.sendJsonError(initialAsyncCtx,JsonRpcResponse.newError(code,description,initialJsonRequest.getId()));
  }
 else {
    ((HttpServletResponse)initialAsyncCtx.getResponse()).sendError(code,description);
  }
}","@Override protected void sendOnTerminateErrorMessageInInitialContext(int code,String description) throws IOException {
  if (useControlProtocol) {
    protocolManager.sendJsonError(initialAsyncCtx,JsonRpcResponse.newError(code,description,initialJsonRequest.getId()));
  }
 else {
    ((HttpServletResponse)initialAsyncCtx.getResponse()).sendError(500,description);
  }
}"
10914,"/** 
 * Terminates this object, completing initialAsyncCtx if necessary and sending an answer to the initial request if necessary.
 * @param code
 * @param description
 */
protected void terminate(int code,String description){
  STATE localState;
synchronized (this) {
    if (state == STATE.TERMINATED)     return;
    localState=state;
    state=STATE.TERMINATED;
  }
  try {
    if (localState == STATE.IDLE || state == STATE.HANDLING || state == STATE.STARTING) {
      sendOnTerminateErrorMessageInInitialContext(code,description);
    }
 else     if (localState == STATE.ACTIVE) {
      cancelMediaTransmission();
    }
  }
 catch (  Throwable t) {
    getLogger().error(t.getMessage(),t);
  }
 finally {
    destroy();
  }
}","/** 
 * Terminates this object, completing initialAsyncCtx if necessary and sending an answer to the initial request if necessary.
 * @param code
 * @param description
 */
protected void terminate(int code,String description){
  STATE localState;
synchronized (this) {
    if (state == STATE.TERMINATED)     return;
    localState=state;
    state=STATE.TERMINATED;
  }
  try {
    if (localState == STATE.IDLE || localState == STATE.HANDLING || localState == STATE.STARTING) {
      sendOnTerminateErrorMessageInInitialContext(code,description);
    }
 else     if (localState == STATE.ACTIVE) {
      cancelMediaTransmission();
    }
  }
 catch (  Throwable t) {
    getLogger().error(t.getMessage(),t);
  }
 finally {
    destroy();
  }
}"
10915,"public static void registerKurentoServletContextListener(ServletContext ctx){
  if (ctx.getAttribute(KURENTO_SERVLET_CONTEXT_LISTENER_ATTRIBUTE_NAME) == null) {
    return;
  }
  ctx.setAttribute(KURENTO_SERVLET_CONTEXT_LISTENER_ATTRIBUTE_NAME,""String_Node_Str"");
  ctx.addListener(KurentoServletContextListener.class);
}","public static void registerKurentoServletContextListener(ServletContext ctx){
  if (ctx.getAttribute(KURENTO_SERVLET_CONTEXT_LISTENER_ATTRIBUTE_NAME) != null) {
    log.info(""String_Node_Str"");
    return;
  }
  log.info(""String_Node_Str"");
  ctx.setAttribute(KURENTO_SERVLET_CONTEXT_LISTENER_ATTRIBUTE_NAME,""String_Node_Str"");
  ctx.addListener(KurentoServletContextListener.class);
}"
10916,"public static void closeAllKurentoApplicationContexts(ServletContext ctx){
  Assert.notNull(ctx,""String_Node_Str"");
  if (childContexts != null) {
    for (    AnnotationConfigApplicationContext childContext : childContexts.values()) {
      childContext.close();
    }
  }
  childContexts=null;
  if (kurentoApplicationContextInternalReference != null) {
    kurentoApplicationContextInternalReference.close();
  }
  kurentoApplicationContextInternalReference=null;
}","public static void closeAllKurentoApplicationContexts(ServletContext ctx){
  Assert.notNull(ctx,""String_Node_Str"");
  if (childContexts != null) {
    for (    AnnotationConfigApplicationContext childContext : childContexts.values()) {
      log.info(""String_Node_Str"" + childContext);
      childContext.close();
    }
  }
  childContexts=null;
  if (kurentoApplicationContextInternalReference != null) {
    log.info(""String_Node_Str"" + kurentoApplicationContextInternalReference);
    kurentoApplicationContextInternalReference.close();
  }
  kurentoApplicationContextInternalReference=null;
}"
10917,"void startMedia(MediaElement upStream,MediaElement downStream) throws ContentException ;","void startMedia(MediaElement sinkElement,MediaElement sourceElement) throws ContentException ;"
10918,"void startMedia(MediaElement upStream,MediaElement downStream) throws ContentException ;","void startMedia(MediaElement sinkElement,MediaElement sourceElement) throws ContentException ;"
10919,"public JsonRpcRequest receiveJsonRequest(AsyncContext asyncCtx) throws IOException {
  HttpServletRequest request=(HttpServletRequest)asyncCtx.getRequest();
  InputStream inputStream=request.getInputStream();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  byte[] buffer=new byte[BUFF];
  int len;
  while ((len=inputStream.read(buffer)) > -1) {
    baos.write(buffer,0,len);
  }
  baos.flush();
  String encoding=detectJsonEncoding(new ByteArrayInputStream(baos.toByteArray()));
  log.debug(""String_Node_Str"" + encoding);
  if (encoding == null || !encoding.equalsIgnoreCase(UTF8)) {
    throw new IOException(""String_Node_Str"");
  }
  InputStreamReader isr=new InputStreamReader(new ByteArrayInputStream(baos.toByteArray()),UTF8);
  JsonRpcRequest jsonRequest=gson.fromJson(isr,JsonRpcRequest.class);
  Assert.notNull(jsonRequest.getMethod());
  return jsonRequest;
}","public JsonRpcRequest receiveJsonRequest(AsyncContext asyncCtx) throws IOException {
  HttpServletRequest request=(HttpServletRequest)asyncCtx.getRequest();
  InputStream inputStream=request.getInputStream();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  byte[] buffer=new byte[BUFF];
  int len;
  while ((len=inputStream.read(buffer)) > -1) {
    baos.write(buffer,0,len);
  }
  baos.flush();
  String encoding=detectJsonEncoding(new ByteArrayInputStream(baos.toByteArray()));
  log.debug(""String_Node_Str"" + encoding);
  if (encoding == null || !encoding.equalsIgnoreCase(UTF8)) {
    throw new IOException(""String_Node_Str"");
  }
  InputStreamReader isr=new InputStreamReader(new ByteArrayInputStream(baos.toByteArray()),UTF8);
  JsonRpcRequest jsonRequest=gson.fromJson(isr,JsonRpcRequest.class);
  Assert.notNull(jsonRequest.getMethod());
  log.info(""String_Node_Str"" + jsonRequest.toString());
  return jsonRequest;
}"
10920,"private void internalSendJsonAnswer(AsyncContext asyncCtx,JsonRpcResponse message) throws IOException {
  if (asyncCtx == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (!asyncCtx.getRequest().isAsyncStarted()) {
    return;
  }
synchronized (asyncCtx) {
    HttpServletResponse response=(HttpServletResponse)asyncCtx.getResponse();
    response.setContentType(""String_Node_Str"");
    OutputStreamWriter osw=new OutputStreamWriter(response.getOutputStream(),UTF8);
    osw.write(gson.toJson(message));
    osw.flush();
    asyncCtx.complete();
  }
}","private void internalSendJsonAnswer(AsyncContext asyncCtx,JsonRpcResponse message) throws IOException {
  if (asyncCtx == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (!asyncCtx.getRequest().isAsyncStarted()) {
    return;
  }
synchronized (asyncCtx) {
    HttpServletResponse response=(HttpServletResponse)asyncCtx.getResponse();
    response.setContentType(""String_Node_Str"");
    OutputStreamWriter osw=new OutputStreamWriter(response.getOutputStream(),UTF8);
    osw.write(gson.toJson(message));
    osw.flush();
    log.info(""String_Node_Str"" + message);
    asyncCtx.complete();
  }
}"
10921,"@Override protected final void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (!useControlProtocol) {
    resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  getLogger().debug(""String_Node_Str"" + req.getRequestURI());
  if (!req.isAsyncSupported()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    return;
  }
  if (isHandlerNull()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,getHandlerSimpleClassName() + ""String_Node_Str"" + ""String_Node_Str""+ getHandlerSimpleClassName());
    return;
  }
  String contentId=req.getPathInfo();
  if (contentId != null) {
    contentId=contentId.substring(1);
  }
  AsyncContext asyncCtx=req.startAsync();
  asyncCtx.addListener(new ContentAsyncListener());
  JsonRpcRequest message=null;
  try {
    message=protocolManager.receiveJsonRequest(asyncCtx);
  }
 catch (  JsonSyntaxException jse) {
    protocolManager.sendJsonError(asyncCtx,JsonRpcResponse.newError(ERROR_PARSE_ERROR,""String_Node_Str"" + jse.getMessage(),0));
    return;
  }
catch (  JsonIOException jie) {
    protocolManager.sendJsonError(asyncCtx,JsonRpcResponse.newError(ERROR_INTERNAL_ERROR,""String_Node_Str"" + jie.getMessage(),0));
    return;
  }
  if (message == null) {
    protocolManager.sendJsonError(asyncCtx,JsonRpcResponse.newError(ERROR_INTERNAL_ERROR,""String_Node_Str"",0));
    return;
  }
  AbstractContentRequest contentRequest=null;
  if (message.getMethod().equals(METHOD_START)) {
    contentRequest=createContentRequest(asyncCtx,contentId);
    contentRequestManager.put(contentRequest);
  }
 else   if (message.getSessionId() != null) {
    contentRequest=contentRequestManager.get(message.getSessionId());
    if (contentRequest == null) {
      protocolManager.sendJsonError(asyncCtx,JsonRpcResponse.newError(ERROR_INVALID_REQUEST,""String_Node_Str"" + message.getSessionId(),message.getId()));
      return;
    }
  }
 else {
    protocolManager.sendJsonError(asyncCtx,JsonRpcResponse.newError(ERROR_INVALID_REQUEST,""String_Node_Str"",message.getId()));
    return;
  }
  Future<?> future=executor.getExecutor().submit(createAsyncRequestProcessor(contentRequest,message,asyncCtx));
  req.setAttribute(ContentAsyncListener.FUTURE_REQUEST_PROCESSOR_ATT_NAME,future);
  req.setAttribute(ContentAsyncListener.CONTENT_REQUEST_ATT_NAME,contentRequest);
  req.setAttribute(ContentAsyncListener.CONTROL_PROTOCOL_REQUEST_MESSAGE_ATT_NAME,message);
}","@Override protected final void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  getLogger().debug(""String_Node_Str"" + req.getRequestURI());
  if (!req.isAsyncSupported()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    return;
  }
  if (isHandlerNull()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,getHandlerSimpleClassName() + ""String_Node_Str"" + ""String_Node_Str""+ getHandlerSimpleClassName());
    return;
  }
  String contentId=req.getPathInfo();
  if (contentId != null) {
    contentId=contentId.substring(1);
  }
  AsyncContext asyncCtx=req.startAsync();
  asyncCtx.addListener(new ContentAsyncListener());
  if (useControlProtocol) {
    doRequest4JsonControlProtocol(asyncCtx,contentId,resp);
  }
 else {
    doRequest4SimpleHttpProtocol(asyncCtx,contentId,resp);
  }
}"
10922,"@Override protected final void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (useControlProtocol) {
    resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  getLogger().debug(""String_Node_Str"" + req.getRequestURI());
  if (!req.isAsyncSupported()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    return;
  }
  if (isHandlerNull()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,getHandlerSimpleClassName() + ""String_Node_Str"" + ""String_Node_Str""+ getHandlerSimpleClassName());
    return;
  }
  String contentId=req.getPathInfo();
  if (contentId != null) {
    contentId=contentId.substring(1);
  }
  AsyncContext asyncCtx=req.startAsync();
  asyncCtx.addListener(new ContentAsyncListener());
  AbstractContentRequest contentRequest=createContentRequest(asyncCtx,contentId);
  Future<?> future=executor.getExecutor().submit(createAsyncRequestProcessor(contentRequest,null,asyncCtx));
  req.setAttribute(ContentAsyncListener.FUTURE_REQUEST_PROCESSOR_ATT_NAME,future);
  req.setAttribute(ContentAsyncListener.CONTENT_REQUEST_ATT_NAME,contentRequest);
}","@Override protected final void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (useControlProtocol) {
    resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  getLogger().debug(""String_Node_Str"" + req.getRequestURI());
  if (!req.isAsyncSupported()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    return;
  }
  if (isHandlerNull()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,getHandlerSimpleClassName() + ""String_Node_Str"" + ""String_Node_Str""+ getHandlerSimpleClassName());
    return;
  }
  String contentId=req.getPathInfo();
  if (contentId != null) {
    contentId=contentId.substring(1);
  }
  AsyncContext asyncCtx=req.startAsync();
  asyncCtx.addListener(new ContentAsyncListener());
}"
10923,"@Override public boolean equals(Object obj){
  if (obj.getClass().equals(this.getClass())) {
    return false;
  }
 else {
    MediaObject mo=(MediaObject)obj;
    return mo.mediaObjectId.getId() == this.mediaObjectId.getId();
  }
}","@Override public boolean equals(Object obj){
  if (!obj.getClass().equals(this.getClass())) {
    return false;
  }
 else {
    MediaObject mo=(MediaObject)obj;
    return mo.mediaObjectId.getId() == this.mediaObjectId.getId();
  }
}"
10924,"void onEvent(KmsEvent event){
  if (event.getSource() instanceof MediaPipeline) {
    fireEvent(mediaPipelineMap.get(event.getSource()),event);
  }
 else   if (event.getSource() instanceof MediaElement) {
    fireEvent(mediaPipelineMap.get(event.getSource()),event);
  }
 else {
    IllegalArgumentException iae=new IllegalArgumentException(""String_Node_Str"" + event.getSource().getClass());
    log.error(iae.getMessage());
    throw iae;
  }
}","void onEvent(KmsEvent event){
  if (event.getSource() instanceof MediaPipeline) {
    fireEvent(mediaPipelineMap.get(event.getSource()),event);
  }
 else   if (event.getSource() instanceof MediaElement) {
    fireEvent(mediaElementMap.get(event.getSource()),event);
  }
 else {
    IllegalArgumentException iae=new IllegalArgumentException(""String_Node_Str"" + event.getSource().getClass());
    log.error(iae.getMessage());
    throw iae;
  }
}"
10925,"/** 
 * This class returns the Spring KurentoApplicationContext, which is the parent context for all specific Kurento Servlet contexts. In case a pre-exiting Spring root WebApplicationContext if found, the returned KurentoApplicationContext will be made child of this root context. When necessary, this method creates the KurentoApplicationContext, so it should never return null. This method MUST NOT be called in ServletContextListeners, given that at that stage there might not be information about the presence of a root Spring root WebApplicationConext.
 * @param ctx
 * @return
 */
public static AnnotationConfigApplicationContext createKurentoApplicationContext(ServletContext ctx){
  Assert.notNull(ctx,""String_Node_Str"");
  Assert.isNull(kurentoApplicationContextInternalReference,""String_Node_Str"");
  kurentoApplicationContextInternalReference=new AnnotationConfigApplicationContext();
  kurentoApplicationContextInternalReference.scan(""String_Node_Str"");
  WebApplicationContext rootContext=WebApplicationContextUtils.getWebApplicationContext(ctx);
  if (rootContext != null) {
    kurentoApplicationContextInternalReference.setParent(rootContext);
  }
  kurentoApplicationContextInternalReference.refresh();
  return kurentoApplicationContextInternalReference;
}","/** 
 * This class returns the Spring KurentoApplicationContext, which is the parent context for all specific Kurento Servlet contexts. In case a pre-exiting Spring root WebApplicationContext if found, the returned KurentoApplicationContext will be made child of this root context. When necessary, this method creates the KurentoApplicationContext, so it should never return null. This method MUST NOT be called in ServletContextListeners, given that at that stage there might not be information about the presence of a root Spring root WebApplicationConext.
 * @param ctx
 * @return
 */
public static AnnotationConfigApplicationContext createKurentoApplicationContext(ServletContext ctx){
  Assert.notNull(ctx,""String_Node_Str"");
  Assert.isNull(kurentoApplicationContextInternalReference,""String_Node_Str"");
  kurentoApplicationContextInternalReference=new AnnotationConfigApplicationContext();
  kurentoApplicationContextInternalReference.scan(""String_Node_Str"");
  WebApplicationContext rootContext=WebApplicationContextUtils.getWebApplicationContext(ctx);
  if (rootContext != null) {
    kurentoApplicationContextInternalReference.setParent(rootContext);
  }
  ServletContextResource servletContextResource=new ServletContextResource(ctx,""String_Node_Str"");
  if (servletContextResource.exists()) {
    log.info(""String_Node_Str"");
    Properties properties=new Properties();
    try {
      properties.load(servletContextResource.getInputStream());
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"",e);
      throw new RuntimeException(e);
    }
    PropertyOverrideConfigurer propertyOverrideConfigurer=new PropertyOverrideConfigurer();
    propertyOverrideConfigurer.setProperties(properties);
    kurentoApplicationContextInternalReference.addBeanFactoryPostProcessor(propertyOverrideConfigurer);
  }
  kurentoApplicationContextInternalReference.refresh();
  return kurentoApplicationContextInternalReference;
}"
10926,"public static void processInjectionBasedOnApplicationContext(Object bean,AnnotationConfigApplicationContext appContext){
  AutowiredAnnotationBeanPostProcessor bpp=new AutowiredAnnotationBeanPostProcessor();
  bpp.setBeanFactory(appContext.getAutowireCapableBeanFactory());
  bpp.processInjection(bean);
}","public static void processInjectionBasedOnApplicationContext(Object bean,AnnotationConfigApplicationContext appContext){
  Assert.notNull(appContext,""String_Node_Str"");
  Assert.notNull(bean,""String_Node_Str"");
  AutowiredAnnotationBeanPostProcessor bpp=new AutowiredAnnotationBeanPostProcessor();
  bpp.setBeanFactory(appContext.getAutowireCapableBeanFactory());
  bpp.processInjection(bean);
}"
10927,"public static void processInjectionBasedOnKurentoApplicationContext(Object bean){
  AutowiredAnnotationBeanPostProcessor bpp=new AutowiredAnnotationBeanPostProcessor();
  bpp.setBeanFactory(kurentoApplicationContextInternalReference.getAutowireCapableBeanFactory());
  bpp.processInjection(bean);
}","public static void processInjectionBasedOnKurentoApplicationContext(Object bean){
  Assert.notNull(kurentoApplicationContextInternalReference,""String_Node_Str"");
  Assert.notNull(bean,""String_Node_Str"");
  AutowiredAnnotationBeanPostProcessor bpp=new AutowiredAnnotationBeanPostProcessor();
  bpp.setBeanFactory(kurentoApplicationContextInternalReference.getAutowireCapableBeanFactory());
  bpp.processInjection(bean);
}"
10928,"public byte[] isIdentify(Tx tx){
  HashSet<String> result=new HashSet<String>();
  for (  In in : tx.getIns()) {
    String queryPrevTxHashSql=""String_Node_Str"";
    final HashSet<String> each=new HashSet<String>();
    this.execQueryOneRecord(this.getReadDb(),queryPrevTxHashSql,new String[]{Base58.encode(in.getPrevTxHash()),Integer.toString(in.getInSn())},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        each.add(c.getString(0));
        return null;
      }
    }
);
    each.remove(Base58.encode(tx.getTxHash()));
    result.retainAll(each);
    if (result.size() == 0) {
      break;
    }
  }
  if (result.size() == 0) {
    return new byte[0];
  }
 else {
    try {
      return Base58.decode((String)result.toArray()[0]);
    }
 catch (    AddressFormatException e) {
      e.printStackTrace();
      return new byte[0];
    }
  }
}","public byte[] isIdentify(Tx tx){
  HashSet<String> result=new HashSet<String>();
  for (  In in : tx.getIns()) {
    String queryPrevTxHashSql=""String_Node_Str"";
    final HashSet<String> each=new HashSet<String>();
    this.execQueryOneRecord(this.getReadDb(),queryPrevTxHashSql,new String[]{Base58.encode(in.getPrevTxHash()),Integer.toString(in.getPrevOutSn())},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        each.add(c.getString(0));
        return null;
      }
    }
);
    each.remove(Base58.encode(tx.getTxHash()));
    result.retainAll(each);
    if (result.size() == 0) {
      break;
    }
  }
  if (result.size() == 0) {
    return new byte[0];
  }
 else {
    try {
      return Base58.decode((String)result.toArray()[0]);
    }
 catch (    AddressFormatException e) {
      e.printStackTrace();
      return new byte[0];
    }
  }
}"
10929,"public void addElementsForBloomFilter(BloomFilter filter){
  List<byte[]> pubs=AbstractDb.hdAccountAddressProvider.getPubs(this.hdSeedId,AbstractHD.PathType.EXTERNAL_ROOT_PATH);
  for (  byte[] pub : pubs) {
    filter.insert(pub);
    filter.insert(Utils.sha256hash160(pub));
  }
  List<Out> outs=AbstractDb.hdAccountAddressProvider.getUnspendOutByHDAccountWithPath(getHdSeedId(),AbstractHD.PathType.INTERNAL_ROOT_PATH);
  for (  Out out : outs) {
    filter.insert(out.getOutpointData());
  }
}","public void addElementsForBloomFilter(BloomFilter filter){
  List<byte[]> pubs=AbstractDb.hdAccountAddressProvider.getPubs(this.hdSeedId,AbstractHD.PathType.EXTERNAL_ROOT_PATH);
  for (  byte[] pub : pubs) {
    filter.insert(pub);
    filter.insert(Utils.sha256hash160(pub));
  }
  List<Out> outs=AbstractDb.hdAccountAddressProvider.getUnspendOutByHDAccountWithPath(getHdSeedId(),AbstractHD.PathType.INTERNAL_ROOT_PATH);
  for (  Out out : outs) {
    filter.insert(out.getOutpointData());
  }
  outs=AbstractDb.hdAccountAddressProvider.getUnconfirmedSpentOutByHDAccountWithPath(getHdSeedId(),AbstractHD.PathType.INTERNAL_ROOT_PATH);
  for (  Out out : outs) {
    filter.insert(out.getOutpointData());
  }
}"
10930,"public int elementCountForBloomFilter(){
  return allGeneratedExternalAddressCount() * 2 + AbstractDb.hdAccountAddressProvider.getUnspendOutCountByHDAccountWithPath(getHdSeedId(),AbstractHD.PathType.INTERNAL_ROOT_PATH);
}","public int elementCountForBloomFilter(){
  return allGeneratedExternalAddressCount() * 2 + AbstractDb.hdAccountAddressProvider.getUnspendOutCountByHDAccountWithPath(getHdSeedId(),AbstractHD.PathType.INTERNAL_ROOT_PATH) + AbstractDb.hdAccountAddressProvider.getUnconfirmedSpentOutCountByHDAccountWithPath(getHdSeedId(),AbstractHD.PathType.INTERNAL_ROOT_PATH);
}"
10931,"@Override public boolean requestNewReceivingAddress(int hdAccountId){
  int issuedIndex=this.issuedIndex(hdAccountId,AbstractHD.PathType.EXTERNAL_ROOT_PATH);
  final boolean[] result={false};
  if (issuedIndex > HDAccount.MaxUnusedNewAddressCount) {
    String sql=""String_Node_Str"" + ""String_Node_Str"";
    this.execQueryOneRecord(sql,new String[]{Integer.toString(hdAccountId),Integer.toString(issuedIndex - HDAccount.MaxUnusedNewAddressCount - 1),""String_Node_Str""},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        result[0]=c.getInt(0) > 0;
        return null;
      }
    }
);
  }
 else {
    result[0]=true;
  }
  if (result[0]) {
    this.updateIssuedIndex(hdAccountId,AbstractHD.PathType.EXTERNAL_ROOT_PATH,issuedIndex + 1);
  }
  return result[0];
}","@Override public boolean requestNewReceivingAddress(int hdAccountId){
  int issuedIndex=this.issuedIndex(hdAccountId,AbstractHD.PathType.EXTERNAL_ROOT_PATH);
  final boolean[] result={false};
  if (issuedIndex >= HDAccount.MaxUnusedNewAddressCount) {
    String sql=""String_Node_Str"" + ""String_Node_Str"";
    this.execQueryOneRecord(sql,new String[]{Integer.toString(hdAccountId),Integer.toString(issuedIndex - HDAccount.MaxUnusedNewAddressCount + 1),""String_Node_Str""},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        result[0]=c.getInt(0) > 0;
        return null;
      }
    }
);
  }
 else {
    result[0]=true;
  }
  if (result[0]) {
    this.updateIssuedIndex(hdAccountId,AbstractHD.PathType.EXTERNAL_ROOT_PATH,issuedIndex + 1);
  }
  return result[0];
}"
10932,"@Override public boolean requestNewReceivingAddress(int hdAccountId){
  int issuedIndex=this.issuedIndex(hdAccountId,AbstractHD.PathType.EXTERNAL_ROOT_PATH);
  final boolean[] result={false};
  if (issuedIndex >= HDAccount.MaxUnusedNewAddressCount) {
    String sql=""String_Node_Str"" + ""String_Node_Str"";
    this.execQueryOneRecord(sql,new String[]{Integer.toString(hdAccountId),Integer.toString(issuedIndex - HDAccount.MaxUnusedNewAddressCount + 1),""String_Node_Str""},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        result[0]=c.getInt(0) > 0;
        return null;
      }
    }
);
  }
 else {
    result[0]=true;
  }
  if (result[0]) {
    this.updateIssuedIndex(hdAccountId,AbstractHD.PathType.EXTERNAL_ROOT_PATH,issuedIndex + 1);
  }
  return result[0];
}","@Override public boolean requestNewReceivingAddress(int hdAccountId){
  int issuedIndex=this.issuedIndex(hdAccountId,AbstractHD.PathType.EXTERNAL_ROOT_PATH);
  final boolean[] result={false};
  if (issuedIndex >= HDAccount.MaxUnusedNewAddressCount - 2) {
    String sql=""String_Node_Str"" + ""String_Node_Str"";
    this.execQueryOneRecord(sql,new String[]{Integer.toString(hdAccountId),Integer.toString(issuedIndex - HDAccount.MaxUnusedNewAddressCount + 1),""String_Node_Str""},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        result[0]=c.getInt(0) > 0;
        return null;
      }
    }
);
  }
 else {
    result[0]=true;
  }
  if (result[0]) {
    this.updateIssuedIndex(hdAccountId,AbstractHD.PathType.EXTERNAL_ROOT_PATH,issuedIndex + 1);
  }
  return result[0];
}"
10933,"public List<AddressTx> insertOut(IDb db,Tx txItem){
  String existSql=""String_Node_Str"";
  String updateHDAccountIdSql=""String_Node_Str"";
  String queryHDAddressSql=""String_Node_Str"";
  String updateHDAddressIssuedSql=""String_Node_Str"";
  String queryPrevTxHashSql=""String_Node_Str"";
  String updateOutStatusSql=""String_Node_Str"";
  final List<AddressTx> addressTxes=new ArrayList<AddressTx>();
  for (  final Out outItem : txItem.getOuts()) {
    final int[] cnt={0};
    this.execQueryOneRecord(db,existSql,new String[]{Base58.encode(outItem.getTxHash()),Integer.toString(outItem.getOutSn())},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        int idColumn=c.getColumnIndex(""String_Node_Str"");
        if (idColumn != -1) {
          cnt[0]=c.getInt(idColumn);
        }
        return null;
      }
    }
);
    if (cnt[0] == 0) {
      this.insertOutToDb(db,outItem);
    }
 else {
      if (outItem.getHDAccountId() > -1) {
        this.execUpdate(db,updateHDAccountIdSql,new String[]{Integer.toString(outItem.getHDAccountId()),Base58.encode(txItem.getTxHash()),Integer.toString(outItem.getOutSn())});
        final int[] tmpHDAccountId={-1};
        final int[] tmpPathType={0};
        final int[] tmpAddressIndex={0};
        this.execQueryOneRecord(db,queryHDAddressSql,new String[]{outItem.getOutAddress()},new Function<ICursor,Void>(){
          @Nullable @Override public Void apply(          @Nullable ICursor c){
            tmpHDAccountId[0]=c.getInt(0);
            tmpPathType[0]=c.getInt(1);
            tmpAddressIndex[0]=c.getInt(2);
            return null;
          }
        }
);
        if (tmpHDAccountId[0] > 0) {
          this.execUpdate(db,updateHDAddressIssuedSql,new String[]{""String_Node_Str"",Integer.toString(tmpPathType[0]),Integer.toString(tmpAddressIndex[0]),Integer.toString(tmpHDAccountId[0])});
        }
      }
    }
    if (!Utils.isEmpty(outItem.getOutAddress())) {
      addressTxes.add(new AddressTx(outItem.getOutAddress(),Base58.encode(txItem.getTxHash())));
    }
    final boolean[] isSpentByExistTx={false};
    this.execQueryOneRecord(db,queryPrevTxHashSql,new String[]{Base58.encode(txItem.getTxHash()),Integer.toString(outItem.getOutSn())},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        int idColumn=c.getColumnIndex(""String_Node_Str"");
        if (idColumn != -1) {
          addressTxes.add(new AddressTx(outItem.getOutAddress(),c.getString(idColumn)));
        }
        isSpentByExistTx[0]=true;
        return null;
      }
    }
);
    if (isSpentByExistTx[0]) {
      this.execUpdate(db,updateOutStatusSql,new String[]{Integer.toString(Out.OutStatus.spent.getValue()),Base58.encode(txItem.getTxHash()),Integer.toString(outItem.getOutSn())});
    }
  }
  return addressTxes;
}","public List<AddressTx> insertOut(IDb db,Tx txItem){
  String existSql=""String_Node_Str"";
  String updateHDAccountIdSql=""String_Node_Str"";
  String queryHDAddressSql=""String_Node_Str"";
  String updateHDAddressIssuedSql=""String_Node_Str"";
  String queryPrevTxHashSql=""String_Node_Str"";
  String updateOutStatusSql=""String_Node_Str"";
  final List<AddressTx> addressTxes=new ArrayList<AddressTx>();
  for (  final Out outItem : txItem.getOuts()) {
    final int[] cnt={0};
    this.execQueryOneRecord(db,existSql,new String[]{Base58.encode(outItem.getTxHash()),Integer.toString(outItem.getOutSn())},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        int idColumn=c.getColumnIndex(""String_Node_Str"");
        if (idColumn != -1) {
          cnt[0]=c.getInt(idColumn);
        }
        return null;
      }
    }
);
    if (cnt[0] == 0) {
      this.insertOutToDb(db,outItem);
    }
 else {
      if (outItem.getHDAccountId() > -1) {
        this.execUpdate(db,updateHDAccountIdSql,new String[]{Integer.toString(outItem.getHDAccountId()),Base58.encode(txItem.getTxHash()),Integer.toString(outItem.getOutSn())});
      }
    }
    if (outItem.getHDAccountId() > -1) {
      final int[] tmpHDAccountId={-1};
      final int[] tmpPathType={0};
      final int[] tmpAddressIndex={0};
      this.execQueryOneRecord(db,queryHDAddressSql,new String[]{outItem.getOutAddress()},new Function<ICursor,Void>(){
        @Nullable @Override public Void apply(        @Nullable ICursor c){
          tmpHDAccountId[0]=c.getInt(0);
          tmpPathType[0]=c.getInt(1);
          tmpAddressIndex[0]=c.getInt(2);
          return null;
        }
      }
);
      if (tmpHDAccountId[0] > 0) {
        this.execUpdate(db,updateHDAddressIssuedSql,new String[]{""String_Node_Str"",Integer.toString(tmpPathType[0]),Integer.toString(tmpAddressIndex[0]),Integer.toString(tmpHDAccountId[0])});
      }
    }
    if (!Utils.isEmpty(outItem.getOutAddress())) {
      addressTxes.add(new AddressTx(outItem.getOutAddress(),Base58.encode(txItem.getTxHash())));
    }
    final boolean[] isSpentByExistTx={false};
    this.execQueryOneRecord(db,queryPrevTxHashSql,new String[]{Base58.encode(txItem.getTxHash()),Integer.toString(outItem.getOutSn())},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        int idColumn=c.getColumnIndex(""String_Node_Str"");
        if (idColumn != -1) {
          addressTxes.add(new AddressTx(outItem.getOutAddress(),c.getString(idColumn)));
        }
        isSpentByExistTx[0]=true;
        return null;
      }
    }
);
    if (isSpentByExistTx[0]) {
      this.execUpdate(db,updateOutStatusSql,new String[]{Integer.toString(Out.OutStatus.spent.getValue()),Base58.encode(txItem.getTxHash()),Integer.toString(outItem.getOutSn())});
    }
  }
  return addressTxes;
}"
10934,"public List<AddressTx> insertOut(IDb db,Tx txItem){
  String existSql=""String_Node_Str"";
  String updateHDAccountIdSql=""String_Node_Str"";
  String queryHDAddressSql=""String_Node_Str"";
  String updateHDAddressIssuedSql=""String_Node_Str"";
  String queryPrevTxHashSql=""String_Node_Str"";
  String updateOutStatusSql=""String_Node_Str"";
  final List<AddressTx> addressTxes=new ArrayList<AddressTx>();
  for (  final Out outItem : txItem.getOuts()) {
    final int[] cnt={0};
    this.execQueryOneRecord(db,existSql,new String[]{Base58.encode(outItem.getTxHash()),Integer.toString(outItem.getOutSn())},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        int idColumn=c.getColumnIndex(""String_Node_Str"");
        if (idColumn != -1) {
          cnt[0]=c.getInt(idColumn);
        }
        return null;
      }
    }
);
    if (cnt[0] == 0) {
      this.insertOutToDb(db,outItem);
    }
 else {
      if (outItem.getHDAccountId() > -1) {
      }
      if (outItem.getHDAccountId() > -1) {
        this.execUpdate(db,updateHDAccountIdSql,new String[]{Base58.encode(txItem.getTxHash()),Integer.toString(outItem.getOutSn())});
        final int[] tmpHDAccountId={-1};
        final int[] tmpPathType={0};
        final int[] tmpAddressIndex={0};
        this.execQueryOneRecord(db,queryHDAddressSql,new String[]{outItem.getOutAddress()},new Function<ICursor,Void>(){
          @Nullable @Override public Void apply(          @Nullable ICursor c){
            tmpHDAccountId[0]=c.getInt(0);
            tmpPathType[0]=c.getInt(1);
            tmpAddressIndex[0]=c.getInt(2);
            return null;
          }
        }
);
        if (tmpHDAccountId[0] > 0) {
          this.execUpdate(db,updateHDAddressIssuedSql,new String[]{""String_Node_Str"",Integer.toString(tmpPathType[0]),Integer.toString(tmpAddressIndex[0]),Integer.toString(tmpHDAccountId[0])});
        }
      }
    }
    if (!Utils.isEmpty(outItem.getOutAddress())) {
      addressTxes.add(new AddressTx(outItem.getOutAddress(),Base58.encode(txItem.getTxHash())));
    }
    final boolean[] isSpentByExistTx={false};
    this.execQueryOneRecord(db,queryPrevTxHashSql,new String[]{Base58.encode(txItem.getTxHash()),Integer.toString(outItem.getOutSn())},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        int idColumn=c.getColumnIndex(""String_Node_Str"");
        if (idColumn != -1) {
          addressTxes.add(new AddressTx(outItem.getOutAddress(),c.getString(idColumn)));
        }
        isSpentByExistTx[0]=true;
        return null;
      }
    }
);
    if (isSpentByExistTx[0]) {
      this.execUpdate(db,updateOutStatusSql,new String[]{Integer.toString(Out.OutStatus.spent.getValue()),Base58.encode(txItem.getTxHash()),Integer.toString(outItem.getOutSn())});
    }
  }
  return addressTxes;
}","public List<AddressTx> insertOut(IDb db,Tx txItem){
  String existSql=""String_Node_Str"";
  String updateHDAccountIdSql=""String_Node_Str"";
  String queryHDAddressSql=""String_Node_Str"";
  String updateHDAddressIssuedSql=""String_Node_Str"";
  String queryPrevTxHashSql=""String_Node_Str"";
  String updateOutStatusSql=""String_Node_Str"";
  final List<AddressTx> addressTxes=new ArrayList<AddressTx>();
  for (  final Out outItem : txItem.getOuts()) {
    final int[] cnt={0};
    this.execQueryOneRecord(db,existSql,new String[]{Base58.encode(outItem.getTxHash()),Integer.toString(outItem.getOutSn())},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        int idColumn=c.getColumnIndex(""String_Node_Str"");
        if (idColumn != -1) {
          cnt[0]=c.getInt(idColumn);
        }
        return null;
      }
    }
);
    if (cnt[0] == 0) {
      this.insertOutToDb(db,outItem);
    }
 else {
      if (outItem.getHDAccountId() > -1) {
        this.execUpdate(db,updateHDAccountIdSql,new String[]{Integer.toString(outItem.getHDAccountId()),Base58.encode(txItem.getTxHash()),Integer.toString(outItem.getOutSn())});
        final int[] tmpHDAccountId={-1};
        final int[] tmpPathType={0};
        final int[] tmpAddressIndex={0};
        this.execQueryOneRecord(db,queryHDAddressSql,new String[]{outItem.getOutAddress()},new Function<ICursor,Void>(){
          @Nullable @Override public Void apply(          @Nullable ICursor c){
            tmpHDAccountId[0]=c.getInt(0);
            tmpPathType[0]=c.getInt(1);
            tmpAddressIndex[0]=c.getInt(2);
            return null;
          }
        }
);
        if (tmpHDAccountId[0] > 0) {
          this.execUpdate(db,updateHDAddressIssuedSql,new String[]{""String_Node_Str"",Integer.toString(tmpPathType[0]),Integer.toString(tmpAddressIndex[0]),Integer.toString(tmpHDAccountId[0])});
        }
      }
    }
    if (!Utils.isEmpty(outItem.getOutAddress())) {
      addressTxes.add(new AddressTx(outItem.getOutAddress(),Base58.encode(txItem.getTxHash())));
    }
    final boolean[] isSpentByExistTx={false};
    this.execQueryOneRecord(db,queryPrevTxHashSql,new String[]{Base58.encode(txItem.getTxHash()),Integer.toString(outItem.getOutSn())},new Function<ICursor,Void>(){
      @Nullable @Override public Void apply(      @Nullable ICursor c){
        int idColumn=c.getColumnIndex(""String_Node_Str"");
        if (idColumn != -1) {
          addressTxes.add(new AddressTx(outItem.getOutAddress(),c.getString(idColumn)));
        }
        isSpentByExistTx[0]=true;
        return null;
      }
    }
);
    if (isSpentByExistTx[0]) {
      this.execUpdate(db,updateOutStatusSql,new String[]{Integer.toString(Out.OutStatus.spent.getValue()),Base58.encode(txItem.getTxHash()),Integer.toString(outItem.getOutSn())});
    }
  }
  return addressTxes;
}"
10935,"public List<Tx> compressTxsForHDAccount(List<Tx> txList){
  Map<Sha256Hash,Tx> txHashList=new HashMap<Sha256Hash,Tx>();
  for (  Tx tx : txList) {
    txHashList.put(new Sha256Hash(tx.getTxHash()),tx);
  }
  for (  Tx tx : txList) {
    if (!isSendFromHDAccount(tx,txHashList) && tx.getOuts().size() > BitherjSettings.COMPRESS_OUT_NUM) {
      List<Out> outList=new ArrayList<Out>();
      HashSet<String> addressHashSet=AbstractDb.hdAccountAddressProvider.getBelongAccountAddresses(tx.getOutAddressList());
      for (      Out out : tx.getOuts()) {
        if (addressHashSet.contains(out.getOutAddress())) {
          outList.add(out);
        }
      }
      tx.setOuts(outList);
    }
  }
  return txList;
}","public List<Tx> compressTxsForHDAccount(List<Tx> txList){
  Map<Sha256Hash,Tx> txHashList=new HashMap<Sha256Hash,Tx>();
  for (  Tx tx : txList) {
    txHashList.put(new Sha256Hash(tx.getTxHash()),tx);
    AbstractDb.hdAccountAddressProvider.updateOutHDAccountId(tx);
  }
  for (  Tx tx : txList) {
    if (!isSendFromHDAccount(tx,txHashList) && tx.getOuts().size() > BitherjSettings.COMPRESS_OUT_NUM) {
      List<Out> outList=new ArrayList<Out>();
      HashSet<String> addressHashSet=AbstractDb.hdAccountAddressProvider.getBelongAccountAddresses(tx.getOutAddressList());
      for (      Out out : tx.getOuts()) {
        if (addressHashSet.contains(out.getOutAddress())) {
          outList.add(out);
        }
      }
      tx.setOuts(outList);
    }
  }
  return txList;
}"
10936,"private static void getTxForHDAccountMoitored(int hdSeedId) throws Exception {
  for (  AbstractHD.PathType pathType : AbstractHD.PathType.values()) {
    HDAccount.HDAccountAddress hdAccountAddress;
    boolean hasTx=true;
    int addressIndex=0;
    while (hasTx) {
      Block storedBlock=BlockChain.getInstance().getLastBlock();
      int storeBlockHeight=storedBlock.getBlockNo();
      hdAccountAddress=AbstractDb.hdAccountAddressProvider.addressForPath(hdSeedId,pathType,addressIndex);
      if (hdAccountAddress == null) {
        hasTx=false;
        log.warn(""String_Node_Str"",""String_Node_Str"",pathType,addressIndex);
        continue;
      }
      if (hdAccountAddress.isSyncedComplete()) {
        addressIndex++;
        continue;
      }
      List<Tx> transactions=new ArrayList<Tx>();
      int apiBlockCount=0;
      int txSum=0;
      boolean needGetTxs=true;
      int page=1;
      while (needGetTxs) {
        BitherMytransactionsApi bitherMytransactionsApi=new BitherMytransactionsApi(hdAccountAddress.getAddress(),page);
        bitherMytransactionsApi.handleHttpGet();
        String txResult=bitherMytransactionsApi.getResult();
        JSONObject jsonObject=new JSONObject(txResult);
        if (!jsonObject.isNull(BLOCK_COUNT)) {
          apiBlockCount=jsonObject.getInt(BLOCK_COUNT);
        }
        int txCnt=jsonObject.getInt(TX_CNT);
        List<Tx> temp=TransactionsUtil.getTransactionsFromBither(jsonObject,storeBlockHeight);
        transactions.addAll(temp);
        txSum=txSum + transactions.size();
        needGetTxs=txSum < txCnt;
        page++;
      }
      if (apiBlockCount < storeBlockHeight && storeBlockHeight - apiBlockCount < 100) {
        BlockChain.getInstance().rollbackBlock(apiBlockCount);
      }
      transactions=AddressManager.getInstance().compressTxsForHDAccountMoitored(transactions);
      Collections.sort(transactions,new ComparatorTx());
      AddressManager.getInstance().getHDAccountMonitored().initTxs(transactions);
      hdAccountAddress.setSyncedComplete(true);
      AddressManager.getInstance().getHDAccountMonitored().updateSyncComplete(hdAccountAddress);
      if (transactions.size() > 0) {
        if (pathType == AbstractHD.PathType.EXTERNAL_ROOT_PATH) {
          AddressManager.getInstance().getHDAccountMonitored().updateIssuedExternalIndex(addressIndex);
        }
 else {
          AddressManager.getInstance().getHDAccountMonitored().updateIssuedInternalIndex(addressIndex);
        }
        AddressManager.getInstance().getHDAccountMonitored().supplyEnoughKeys(false);
        hasTx=true;
      }
 else {
        hasTx=false;
        AbstractDb.hdAccountAddressProvider.updateSyncedForIndex(hdSeedId,pathType,addressIndex);
      }
    }
    addressIndex++;
  }
}","private static void getTxForHDAccountMoitored(int hdSeedId) throws Exception {
  for (  AbstractHD.PathType pathType : AbstractHD.PathType.values()) {
    HDAccount.HDAccountAddress hdAccountAddress;
    boolean hasTx=true;
    int addressIndex=0;
    while (hasTx) {
      Block storedBlock=BlockChain.getInstance().getLastBlock();
      int storeBlockHeight=storedBlock.getBlockNo();
      hdAccountAddress=AbstractDb.hdAccountAddressProvider.addressForPath(hdSeedId,pathType,addressIndex);
      if (hdAccountAddress == null) {
        hasTx=false;
        log.warn(""String_Node_Str"",""String_Node_Str"",pathType,addressIndex);
        continue;
      }
      if (hdAccountAddress.isSyncedComplete()) {
        addressIndex++;
        continue;
      }
      List<Tx> transactions=new ArrayList<Tx>();
      int apiBlockCount=0;
      int txSum=0;
      boolean needGetTxs=true;
      int page=1;
      while (needGetTxs) {
        BitherMytransactionsApi bitherMytransactionsApi=new BitherMytransactionsApi(hdAccountAddress.getAddress(),page);
        bitherMytransactionsApi.handleHttpGet();
        String txResult=bitherMytransactionsApi.getResult();
        JSONObject jsonObject=new JSONObject(txResult);
        if (!jsonObject.isNull(BLOCK_COUNT)) {
          apiBlockCount=jsonObject.getInt(BLOCK_COUNT);
        }
        int txCnt=jsonObject.getInt(TX_CNT);
        List<Tx> temp=TransactionsUtil.getTransactionsFromBither(jsonObject,storeBlockHeight);
        transactions.addAll(temp);
        txSum=txSum + transactions.size();
        needGetTxs=txSum < txCnt;
        page++;
      }
      if (apiBlockCount < storeBlockHeight && storeBlockHeight - apiBlockCount < 100) {
        BlockChain.getInstance().rollbackBlock(apiBlockCount);
      }
      transactions=AddressManager.getInstance().compressTxsForHDAccount(transactions);
      Collections.sort(transactions,new ComparatorTx());
      AddressManager.getInstance().getHDAccountMonitored().initTxs(transactions);
      hdAccountAddress.setSyncedComplete(true);
      AddressManager.getInstance().getHDAccountMonitored().updateSyncComplete(hdAccountAddress);
      if (transactions.size() > 0) {
        if (pathType == AbstractHD.PathType.EXTERNAL_ROOT_PATH) {
          AddressManager.getInstance().getHDAccountMonitored().updateIssuedExternalIndex(addressIndex);
        }
 else {
          AddressManager.getInstance().getHDAccountMonitored().updateIssuedInternalIndex(addressIndex);
        }
        AddressManager.getInstance().getHDAccountMonitored().supplyEnoughKeys(false);
        hasTx=true;
      }
 else {
        hasTx=false;
        AbstractDb.hdAccountAddressProvider.updateSyncedForIndex(hdSeedId,pathType,addressIndex);
      }
    }
    addressIndex++;
  }
}"
10937,"private boolean isSendFromHDAccount(Tx tx,Map<Sha256Hash,Tx> txHashList){
  List<String> inAddressList=new ArrayList<String>();
  for (  In in : tx.getIns()) {
    Sha256Hash prevTxHahs=new Sha256Hash(in.getPrevTxHash());
    if (txHashList.containsKey(prevTxHahs)) {
      Tx preTx=txHashList.get(prevTxHahs);
      for (      Out out : preTx.getOuts()) {
        if (out.getOutSn() == in.getPrevOutSn()) {
          inAddressList.add(out.getOutAddress());
        }
      }
    }
  }
  List<HDAccount.HDAccountAddress> hdAccountAddressList=AbstractDb.hdAccountAddressProvider.belongAccount(this.hdAccountHot.hdSeedId,inAddressList);
  return hdAccountAddressList.size() > 0;
}","private boolean isSendFromHDAccount(Tx tx,Map<Sha256Hash,Tx> txHashList){
  List<String> inAddressList=new ArrayList<String>();
  for (  In in : tx.getIns()) {
    Sha256Hash prevTxHahs=new Sha256Hash(in.getPrevTxHash());
    if (txHashList.containsKey(prevTxHahs)) {
      Tx preTx=txHashList.get(prevTxHahs);
      for (      Out out : preTx.getOuts()) {
        if (out.getOutSn() == in.getPrevOutSn()) {
          inAddressList.add(out.getOutAddress());
        }
      }
    }
  }
  return AbstractDb.hdAccountAddressProvider.getRelatedAddressCnt(inAddressList) > 0;
}"
10938,"private void initHDAccount(DeterministicKey master,EncryptedData encryptedMnemonicSeed,EncryptedData encryptedHDSeed,boolean isSyncedComplete,HDAccountGenerationDelegate generationDelegate){
  double progress=0;
  if (generationDelegate != null) {
    generationDelegate.onHDAccountGenerationProgress(progress);
  }
  String firstAddress;
  ECKey k=new ECKey(mnemonicSeed,null);
  String address=k.toAddress();
  k.clearPrivateKey();
  DeterministicKey accountKey=getAccount(master);
  DeterministicKey internalKey=getChainRootKey(accountKey,AbstractHD.PathType.INTERNAL_ROOT_PATH);
  DeterministicKey externalKey=getChainRootKey(accountKey,AbstractHD.PathType.EXTERNAL_ROOT_PATH);
  DeterministicKey key=externalKey.deriveSoftened(0);
  firstAddress=key.toAddress();
  accountKey.wipe();
  master.wipe();
  progress+=GenerationPreStartProgress;
  if (generationDelegate != null) {
    generationDelegate.onHDAccountGenerationProgress(progress);
  }
  double itemProgress=(1.0 - GenerationPreStartProgress) / (LOOK_AHEAD_SIZE * 2);
  List<HDAccountAddress> externalAddresses=new ArrayList<HDAccountAddress>();
  List<HDAccountAddress> internalAddresses=new ArrayList<HDAccountAddress>();
  for (int i=0; i < LOOK_AHEAD_SIZE; i++) {
    byte[] subExternalPub=externalKey.deriveSoftened(i).getPubKey();
    HDAccountAddress externalAddress=new HDAccountAddress(subExternalPub,AbstractHD.PathType.EXTERNAL_ROOT_PATH,i,isSyncedComplete,hdSeedId);
    externalAddresses.add(externalAddress);
    progress+=itemProgress;
    if (generationDelegate != null) {
      generationDelegate.onHDAccountGenerationProgress(progress);
    }
    byte[] subInternalPub=internalKey.deriveSoftened(i).getPubKey();
    HDAccountAddress internalAddress=new HDAccountAddress(subInternalPub,AbstractHD.PathType.INTERNAL_ROOT_PATH,i,isSyncedComplete,hdSeedId);
    internalAddresses.add(internalAddress);
    progress+=itemProgress;
    if (generationDelegate != null) {
      generationDelegate.onHDAccountGenerationProgress(progress);
    }
  }
  wipeHDSeed();
  wipeMnemonicSeed();
  AbstractDb.hdAccountProvider.addAddress(externalAddresses);
  AbstractDb.hdAccountProvider.addAddress(internalAddresses);
  hdSeedId=AbstractDb.addressProvider.addHDAccount(encryptedMnemonicSeed.toEncryptedString(),encryptedHDSeed.toEncryptedString(),firstAddress,isFromXRandom,address,externalKey.getPubKeyExtended(),internalKey.getPubKeyExtended());
  internalKey.wipe();
  externalKey.wipe();
}","private void initHDAccount(DeterministicKey master,EncryptedData encryptedMnemonicSeed,EncryptedData encryptedHDSeed,boolean isSyncedComplete,HDAccountGenerationDelegate generationDelegate){
  double progress=0;
  if (generationDelegate != null) {
    generationDelegate.onHDAccountGenerationProgress(progress);
  }
  String firstAddress;
  ECKey k=new ECKey(mnemonicSeed,null);
  String address=k.toAddress();
  k.clearPrivateKey();
  DeterministicKey accountKey=getAccount(master);
  DeterministicKey internalKey=getChainRootKey(accountKey,AbstractHD.PathType.INTERNAL_ROOT_PATH);
  DeterministicKey externalKey=getChainRootKey(accountKey,AbstractHD.PathType.EXTERNAL_ROOT_PATH);
  DeterministicKey key=externalKey.deriveSoftened(0);
  firstAddress=key.toAddress();
  accountKey.wipe();
  master.wipe();
  progress+=GenerationPreStartProgress;
  if (generationDelegate != null) {
    generationDelegate.onHDAccountGenerationProgress(progress);
  }
  double itemProgress=(1.0 - GenerationPreStartProgress) / (LOOK_AHEAD_SIZE * 2);
  List<HDAccountAddress> externalAddresses=new ArrayList<HDAccountAddress>();
  List<HDAccountAddress> internalAddresses=new ArrayList<HDAccountAddress>();
  for (int i=0; i < LOOK_AHEAD_SIZE; i++) {
    byte[] subExternalPub=externalKey.deriveSoftened(i).getPubKey();
    HDAccountAddress externalAddress=new HDAccountAddress(subExternalPub,AbstractHD.PathType.EXTERNAL_ROOT_PATH,i,isSyncedComplete,hdSeedId);
    externalAddresses.add(externalAddress);
    progress+=itemProgress;
    if (generationDelegate != null) {
      generationDelegate.onHDAccountGenerationProgress(progress);
    }
    byte[] subInternalPub=internalKey.deriveSoftened(i).getPubKey();
    HDAccountAddress internalAddress=new HDAccountAddress(subInternalPub,AbstractHD.PathType.INTERNAL_ROOT_PATH,i,isSyncedComplete,hdSeedId);
    internalAddresses.add(internalAddress);
    progress+=itemProgress;
    if (generationDelegate != null) {
      generationDelegate.onHDAccountGenerationProgress(progress);
    }
  }
  wipeHDSeed();
  wipeMnemonicSeed();
  hdSeedId=AbstractDb.addressProvider.addHDAccount(encryptedMnemonicSeed.toEncryptedString(),encryptedHDSeed.toEncryptedString(),firstAddress,isFromXRandom,address,externalKey.getPubKeyExtended(),internalKey.getPubKeyExtended());
  for (  HDAccountAddress addr : externalAddresses) {
    addr.setHdAccountId(hdSeedId);
  }
  for (  HDAccountAddress addr : internalAddresses) {
    addr.setHdAccountId(hdSeedId);
  }
  AbstractDb.hdAccountProvider.addAddress(externalAddresses);
  AbstractDb.hdAccountProvider.addAddress(internalAddresses);
  internalKey.wipe();
  externalKey.wipe();
}"
10939,"private void initHDAccounts(){
  List<Integer> seeds=AbstractDb.addressProvider.getHDAccountSeeds();
  if (AbstractApp.bitherjSetting.getAppMode() == BitherjSettings.AppMode.COLD) {
    for (    int seedId : seeds) {
      if (hdAccountCold == null && AbstractDb.addressProvider.hasMnemonicSeed(seedId)) {
        hdAccountCold=new HDAccountCold(seedId);
      }
    }
  }
 else {
    for (    int seedId : seeds) {
      if (hdAccountHot == null && AbstractDb.addressProvider.hasMnemonicSeed(seedId)) {
        hdAccountHot=new HDAccount(seedId);
      }
 else       if (hdAccountMonitored == null && !AbstractDb.addressProvider.hasMnemonicSeed(seedId)) {
        hdAccountMonitored=new HDAccountMonitored(seedId);
      }
    }
  }
}","private void initHDAccounts(){
  if (AbstractApp.bitherjSetting.getAppMode() == BitherjSettings.AppMode.HOT) {
    List<Integer> seeds=AbstractDb.addressProvider.getHDAccountSeeds();
    for (    int seedId : seeds) {
      if (hdAccountHot == null && AbstractDb.addressProvider.hasMnemonicSeed(seedId)) {
        hdAccountHot=new HDAccount(seedId);
      }
 else       if (hdAccountMonitored == null && !AbstractDb.addressProvider.hasMnemonicSeed(seedId)) {
        hdAccountMonitored=new HDAccountMonitored(seedId);
      }
    }
  }
}"
10940,"public boolean hasHDAccountCold(){
synchronized (lock) {
    return hdAccountCold != null;
  }
}","public boolean hasHDAccountCold(){
synchronized (lock) {
    if (AbstractApp.bitherjSetting.getAppMode() == BitherjSettings.AppMode.COLD) {
      List<Integer> seeds=AbstractDb.addressProvider.getHDAccountSeeds();
      for (      int seedId : seeds) {
        if (AbstractDb.addressProvider.hasMnemonicSeed(seedId)) {
          return true;
        }
      }
    }
    return false;
  }
}"
10941,"public HDAccountCold getHDAccountCold(){
synchronized (lock) {
    return hdAccountCold;
  }
}","public HDAccountCold getHDAccountCold(){
synchronized (lock) {
    if (AbstractApp.bitherjSetting.getAppMode() == BitherjSettings.AppMode.COLD) {
      List<Integer> seeds=AbstractDb.addressProvider.getHDAccountSeeds();
      for (      int seedId : seeds) {
        if (AbstractDb.addressProvider.hasMnemonicSeed(seedId)) {
          return new HDAccountCold(seedId);
        }
      }
    }
    return null;
  }
}"
10942,"private void initHDAccount(DeterministicKey accountKey,boolean isFromXRandom,boolean isSyncedComplete,HDAccount.HDAccountGenerationDelegate generationDelegate){
  double progress=0;
  if (generationDelegate != null) {
    generationDelegate.onHDAccountGenerationProgress(progress);
  }
  DeterministicKey internalKey=getChainRootKey(accountKey,AbstractHD.PathType.INTERNAL_ROOT_PATH);
  DeterministicKey externalKey=getChainRootKey(accountKey,AbstractHD.PathType.EXTERNAL_ROOT_PATH);
  accountKey.wipe();
  progress+=GenerationPreStartProgress;
  if (generationDelegate != null) {
    generationDelegate.onHDAccountGenerationProgress(progress);
  }
  double itemProgress=(1.0 - GenerationPreStartProgress) / (LOOK_AHEAD_SIZE * 2);
  List<HDAccount.HDAccountAddress> externalAddresses=new ArrayList<HDAccount.HDAccountAddress>();
  List<HDAccount.HDAccountAddress> internalAddresses=new ArrayList<HDAccount.HDAccountAddress>();
  for (int i=0; i < LOOK_AHEAD_SIZE; i++) {
    byte[] subExternalPub=externalKey.deriveSoftened(i).getPubKey();
    HDAccount.HDAccountAddress externalAddress=new HDAccount.HDAccountAddress(subExternalPub,AbstractHD.PathType.EXTERNAL_ROOT_PATH,i,isSyncedComplete,hdSeedId);
    externalAddresses.add(externalAddress);
    progress+=itemProgress;
    if (generationDelegate != null) {
      generationDelegate.onHDAccountGenerationProgress(progress);
    }
    byte[] subInternalPub=internalKey.deriveSoftened(i).getPubKey();
    HDAccount.HDAccountAddress internalAddress=new HDAccount.HDAccountAddress(subInternalPub,AbstractHD.PathType.INTERNAL_ROOT_PATH,i,isSyncedComplete,hdSeedId);
    internalAddresses.add(internalAddress);
    progress+=itemProgress;
    if (generationDelegate != null) {
      generationDelegate.onHDAccountGenerationProgress(progress);
    }
  }
  AbstractDb.hdAccountProvider.addAddress(externalAddresses);
  AbstractDb.hdAccountProvider.addAddress(internalAddresses);
  hdSeedId=AbstractDb.addressProvider.addMonitoredHDAccount(isFromXRandom,internalKey.getPubKeyExtended(),externalKey.getPubKeyExtended());
  internalKey.wipe();
  externalKey.wipe();
}","private void initHDAccount(DeterministicKey accountKey,boolean isFromXRandom,boolean isSyncedComplete,HDAccount.HDAccountGenerationDelegate generationDelegate){
  double progress=0;
  if (generationDelegate != null) {
    generationDelegate.onHDAccountGenerationProgress(progress);
  }
  DeterministicKey internalKey=getChainRootKey(accountKey,AbstractHD.PathType.INTERNAL_ROOT_PATH);
  DeterministicKey externalKey=getChainRootKey(accountKey,AbstractHD.PathType.EXTERNAL_ROOT_PATH);
  DeterministicKey key=externalKey.deriveSoftened(0);
  String firstAddress=key.toAddress();
  accountKey.wipe();
  progress+=GenerationPreStartProgress;
  if (generationDelegate != null) {
    generationDelegate.onHDAccountGenerationProgress(progress);
  }
  double itemProgress=(1.0 - GenerationPreStartProgress) / (LOOK_AHEAD_SIZE * 2);
  List<HDAccount.HDAccountAddress> externalAddresses=new ArrayList<HDAccount.HDAccountAddress>();
  List<HDAccount.HDAccountAddress> internalAddresses=new ArrayList<HDAccount.HDAccountAddress>();
  for (int i=0; i < LOOK_AHEAD_SIZE; i++) {
    byte[] subExternalPub=externalKey.deriveSoftened(i).getPubKey();
    HDAccount.HDAccountAddress externalAddress=new HDAccount.HDAccountAddress(subExternalPub,AbstractHD.PathType.EXTERNAL_ROOT_PATH,i,isSyncedComplete,hdSeedId);
    externalAddresses.add(externalAddress);
    progress+=itemProgress;
    if (generationDelegate != null) {
      generationDelegate.onHDAccountGenerationProgress(progress);
    }
    byte[] subInternalPub=internalKey.deriveSoftened(i).getPubKey();
    HDAccount.HDAccountAddress internalAddress=new HDAccount.HDAccountAddress(subInternalPub,AbstractHD.PathType.INTERNAL_ROOT_PATH,i,isSyncedComplete,hdSeedId);
    internalAddresses.add(internalAddress);
    progress+=itemProgress;
    if (generationDelegate != null) {
      generationDelegate.onHDAccountGenerationProgress(progress);
    }
  }
  hdSeedId=AbstractDb.addressProvider.addMonitoredHDAccount(firstAddress,isFromXRandom,internalKey.getPubKeyExtended(),externalKey.getPubKeyExtended());
  for (  HDAccount.HDAccountAddress addr : externalAddresses) {
    addr.setHdAccountId(hdSeedId);
  }
  for (  HDAccount.HDAccountAddress addr : internalAddresses) {
    addr.setHdAccountId(hdSeedId);
  }
  AbstractDb.hdAccountProvider.addAddress(externalAddresses);
  AbstractDb.hdAccountProvider.addAddress(internalAddresses);
  internalKey.wipe();
  externalKey.wipe();
}"
10943,"public void onNewTx(Tx tx,List<HDAccount.HDAccountAddress> relatedAddresses,Tx.TxNotificationType txNotificationType){
  if (relatedAddresses == null || relatedAddresses.size() == 0) {
    return;
  }
  int maxInternal=-1, maxExternal=-1;
  for (  HDAccount.HDAccountAddress a : relatedAddresses) {
    if (a.getPathType() == AbstractHD.PathType.EXTERNAL_ROOT_PATH) {
      if (a.getIndex() > maxExternal) {
        maxExternal=a.getIndex();
      }
    }
 else {
      if (a.getIndex() > maxInternal) {
        maxInternal=a.getIndex();
      }
    }
  }
  log.info(""String_Node_Str"",maxExternal,maxInternal);
  if (maxExternal >= 0 && maxExternal > issuedExternalIndex()) {
    updateIssuedExternalIndex(maxExternal);
  }
  if (maxInternal >= 0 && maxInternal > issuedInternalIndex()) {
    updateIssuedInternalIndex(maxInternal);
  }
  supplyEnoughKeys(true);
  long deltaBalance=getDeltaBalance();
  AbstractApp.notificationService.notificatTx(HDAccountMonitoredPlaceHolder,tx,txNotificationType,deltaBalance);
}","public void onNewTx(Tx tx,List<HDAccount.HDAccountAddress> relatedAddresses,Tx.TxNotificationType txNotificationType){
  supplyEnoughKeys(true);
  long deltaBalance=getDeltaBalance();
  AbstractApp.notificationService.notificatTx(HDAccountMonitoredPlaceHolder,tx,txNotificationType,deltaBalance);
}"
10944,"int addMonitoredHDAccount(boolean isXrandom,byte[] externalPub,byte[] internalPub);","int addMonitoredHDAccount(String firstAddress,boolean isXrandom,byte[] externalPub,byte[] internalPub);"
10945,"private void initFromDb(){
synchronized (addresses) {
    List<EnterpriseHDMAddress> temp=AbstractDb.enterpriseHDMProvider.getEnterpriseHDMAddress(EnterpriseHDMKeychain.this);
    if (temp != null) {
      addresses.addAll(temp);
    }
  }
}","private void initFromDb(){
  pubCount=AbstractDb.enterpriseHDMProvider.getPubCount();
  threshold=AbstractDb.enterpriseHDMProvider.getThreshold();
synchronized (addresses) {
    List<EnterpriseHDMAddress> temp=AbstractDb.enterpriseHDMProvider.getEnterpriseHDMAddress(EnterpriseHDMKeychain.this);
    if (temp != null) {
      addresses.addAll(temp);
    }
  }
}"
10946,"private void initAlias(){
  Map<String,String> addressAlias=AbstractDb.addressProvider.getAliases();
  if (addressAlias.size() == 0) {
    return;
  }
  for (  Address address : privKeyAddresses) {
    String alias=addressAlias.get(address.getAddress());
    address.setAlias(alias);
  }
  for (  Address address : watchOnlyAddresses) {
    String alias=addressAlias.get(address.getAddress());
    address.setAlias(alias);
  }
  for (  HDMAddress address : hdmKeychain.getAllCompletedAddresses()) {
    String alias=addressAlias.get(address.getAddress());
    address.setAlias(alias);
  }
}","private void initAlias(){
  Map<String,String> addressAlias=AbstractDb.addressProvider.getAliases();
  if (addressAlias.size() == 0) {
    return;
  }
  for (  Address address : privKeyAddresses) {
    if (addressAlias.containsKey(address.getAddress())) {
      String alias=addressAlias.get(address.getAddress());
      address.setAlias(alias);
    }
  }
  for (  Address address : watchOnlyAddresses) {
    if (addressAlias.containsKey(address.getAddress())) {
      String alias=addressAlias.get(address.getAddress());
      address.setAlias(alias);
    }
  }
  if (hdmKeychain != null) {
    for (    HDMAddress address : hdmKeychain.getAllCompletedAddresses()) {
      if (addressAlias.containsKey(address.getAddress())) {
        String alias=addressAlias.get(address.getAddress());
        address.setAlias(alias);
      }
    }
  }
}"
10947,"public Tx buildTx(Address address,String changeAddress,List<Tx> unspendTxs,Tx tx){
  List<Out> outs=TxBuilder.getUnspendOuts(unspendTxs);
  Collections.sort(outs,new Comparator<Out>(){
    public int compare(    Out out1,    Out out2){
      int depth1=0;
      int depth2=0;
      long coinDepth1=BlockChain.getInstance().lastBlock.getBlockNo() * out1.getOutValue() - out1.getCoinDepth() + out1.getOutValue();
      long coinDepth2=BlockChain.getInstance().lastBlock.getBlockNo() * out2.getOutValue() - out2.getCoinDepth() + out2.getOutValue();
      if (coinDepth1 != coinDepth2) {
        if (coinDepth2 > coinDepth1)         return 1;
 else         return -1;
      }
 else       if (out1.getOutValue() != out2.getOutValue()) {
        if (out2.getOutValue() > out1.getOutValue())         return 1;
 else         return -1;
      }
 else {
        BigInteger hash1=new BigInteger(1,out1.getTxHash());
        BigInteger hash2=new BigInteger(1,out2.getTxHash());
        int result=hash1.compareTo(hash2);
        if (result != 0) {
          return result;
        }
 else {
          return out1.getOutSn() - out2.getOutSn();
        }
      }
    }
  }
);
  long additionalValueForNextCategory=0;
  List<Out> selection3=null;
  List<Out> selection2=null;
  Out selection2Change=null;
  List<Out> selection1=null;
  Out selection1Change=null;
  int lastCalculatedSize=0;
  long valueNeeded;
  long value=0;
  for (  Out out : tx.getOuts()) {
    value+=out.getOutValue();
  }
  boolean needAtLeastReferenceFee=TxBuilder.needMinFee(tx.getOuts());
  List<Out> bestCoinSelection=null;
  Out bestChangeOutput=null;
  while (true) {
    long fees=0;
    if (lastCalculatedSize >= 1000) {
      fees+=(lastCalculatedSize / 1000 + 1) * Utils.getFeeBase();
    }
    if (needAtLeastReferenceFee && fees < Utils.getFeeBase())     fees=Utils.getFeeBase();
    valueNeeded=value + fees;
    if (additionalValueForNextCategory > 0)     valueNeeded+=additionalValueForNextCategory;
    long additionalValueSelected=additionalValueForNextCategory;
    List<Out> selectedOuts=this.selectOuts(outs,valueNeeded);
    if (TxBuilder.getAmount(selectedOuts) < valueNeeded)     break;
    if (!needAtLeastReferenceFee) {
      long total=TxBuilder.getAmount(selectedOuts);
      if (total - value < Utils.CENT && total - value >= Utils.getFeeBase()) {
        needAtLeastReferenceFee=true;
        continue;
      }
      int s=TxBuilder.estimationTxSize(selectedOuts.size(),new Script(address.getPubKey()),tx.getOuts(),address.isCompressed());
      if (total - value > Utils.CENT)       s+=34;
      if (TxBuilder.getCoinDepth(selectedOuts) <= TxBuilder.TX_FREE_MIN_PRIORITY * s) {
        needAtLeastReferenceFee=true;
        continue;
      }
    }
    boolean eitherCategory2Or3=false;
    boolean isCategory3=false;
    long change=TxBuilder.getAmount(selectedOuts) - valueNeeded;
    if (additionalValueSelected > 0)     change+=additionalValueSelected;
    if (BitherjSettings.ensureMinRequiredFee && change != 0 && change < Utils.CENT && fees < Utils.getFeeBase()) {
      eitherCategory2Or3=true;
      additionalValueForNextCategory=Utils.CENT;
      change-=Utils.getFeeBase() - fees;
    }
    int size=0;
    Out changeOutput=null;
    if (change > 0) {
      changeOutput=new Out();
      changeOutput.setOutValue(change);
      changeOutput.setOutAddress(changeAddress);
      if (BitherjSettings.ensureMinRequiredFee && Tx.MIN_NONDUST_OUTPUT >= change) {
        isCategory3=true;
        additionalValueForNextCategory=Utils.getFeeBase() + Tx.MIN_NONDUST_OUTPUT + 1;
      }
 else {
        size+=34;
        if (!eitherCategory2Or3)         additionalValueForNextCategory=0;
      }
    }
 else {
      if (eitherCategory2Or3) {
        isCategory3=true;
        additionalValueForNextCategory=Utils.getFeeBase() + 1;
      }
    }
    size+=TxBuilder.estimationTxSize(selectedOuts.size(),new Script(address.getPubKey()),tx.getOuts(),address.isCompressed());
    if (size / 1000 > lastCalculatedSize / 1000 && Utils.getFeeBase() > 0) {
      lastCalculatedSize=size;
      additionalValueForNextCategory=additionalValueSelected;
      continue;
    }
    if (isCategory3) {
      if (selection3 == null)       selection3=selectedOuts;
    }
 else     if (eitherCategory2Or3) {
      if (selection2 != null) {
        long oldFee=TxBuilder.getAmount(selection2) - selection2Change.getOutValue() - value;
        long newFee=TxBuilder.getAmount(selectedOuts) - changeOutput.getOutValue() - value;
        if (newFee <= oldFee) {
          selection2=selectedOuts;
          selection2Change=changeOutput;
        }
      }
 else {
        selection2=selectedOuts;
        selection2Change=changeOutput;
      }
    }
 else {
      if (selection1 != null) {
        long oldFee=TxBuilder.getAmount(selection1) - value;
        if (selection1Change != null) {
          oldFee-=selection1Change.getOutValue();
        }
        long newFee=TxBuilder.getAmount(selectedOuts) - value;
        if (changeOutput != null) {
          newFee-=changeOutput.getOutValue();
        }
        if (newFee <= oldFee) {
          selection1=selectedOuts;
          selection1Change=changeOutput;
        }
      }
 else {
        selection1=selectedOuts;
        selection1Change=changeOutput;
      }
    }
    if (additionalValueForNextCategory > 0) {
      continue;
    }
    break;
  }
  if (selection3 == null && selection2 == null && selection1 == null) {
    return null;
  }
  long lowestFee=0;
  if (selection1 != null) {
    if (selection1Change != null)     lowestFee=TxBuilder.getAmount(selection1) - selection1Change.getOutValue() - value;
 else     lowestFee=TxBuilder.getAmount(selection1) - value;
    bestCoinSelection=selection1;
    bestChangeOutput=selection1Change;
  }
  if (selection2 != null) {
    long fee=TxBuilder.getAmount(selection2) - selection2Change.getOutValue() - value;
    if (lowestFee == 0 || fee < lowestFee) {
      lowestFee=fee;
      bestCoinSelection=selection2;
      bestChangeOutput=selection2Change;
    }
  }
  if (selection3 != null) {
    if (lowestFee == 0 || TxBuilder.getAmount(selection3) - value < lowestFee) {
      bestCoinSelection=selection3;
      bestChangeOutput=null;
    }
  }
  if (bestChangeOutput != null) {
    tx.addOutput(bestChangeOutput.getOutValue(),bestChangeOutput.getOutAddress());
  }
  for (  Out out : bestCoinSelection) {
    tx.addInput(out);
  }
  tx.setSource(Tx.SourceType.self.getValue());
  return tx;
}","public Tx buildTx(Address address,String changeAddress,List<Tx> unspendTxs,Tx tx){
  Script scriptPubKey=null;
  if (address.isHDM()) {
    scriptPubKey=new Script(address.getPubKey());
  }
 else {
    scriptPubKey=ScriptBuilder.createOutputScript(address.address);
  }
  List<Out> outs=TxBuilder.getUnspendOuts(unspendTxs);
  Collections.sort(outs,new Comparator<Out>(){
    public int compare(    Out out1,    Out out2){
      int depth1=0;
      int depth2=0;
      long coinDepth1=BlockChain.getInstance().lastBlock.getBlockNo() * out1.getOutValue() - out1.getCoinDepth() + out1.getOutValue();
      long coinDepth2=BlockChain.getInstance().lastBlock.getBlockNo() * out2.getOutValue() - out2.getCoinDepth() + out2.getOutValue();
      if (coinDepth1 != coinDepth2) {
        if (coinDepth2 > coinDepth1)         return 1;
 else         return -1;
      }
 else       if (out1.getOutValue() != out2.getOutValue()) {
        if (out2.getOutValue() > out1.getOutValue())         return 1;
 else         return -1;
      }
 else {
        BigInteger hash1=new BigInteger(1,out1.getTxHash());
        BigInteger hash2=new BigInteger(1,out2.getTxHash());
        int result=hash1.compareTo(hash2);
        if (result != 0) {
          return result;
        }
 else {
          return out1.getOutSn() - out2.getOutSn();
        }
      }
    }
  }
);
  long additionalValueForNextCategory=0;
  List<Out> selection3=null;
  List<Out> selection2=null;
  Out selection2Change=null;
  List<Out> selection1=null;
  Out selection1Change=null;
  int lastCalculatedSize=0;
  long valueNeeded;
  long value=0;
  for (  Out out : tx.getOuts()) {
    value+=out.getOutValue();
  }
  boolean needAtLeastReferenceFee=TxBuilder.needMinFee(tx.getOuts());
  List<Out> bestCoinSelection=null;
  Out bestChangeOutput=null;
  while (true) {
    long fees=0;
    if (lastCalculatedSize >= 1000) {
      fees+=(lastCalculatedSize / 1000 + 1) * Utils.getFeeBase();
    }
    if (needAtLeastReferenceFee && fees < Utils.getFeeBase())     fees=Utils.getFeeBase();
    valueNeeded=value + fees;
    if (additionalValueForNextCategory > 0)     valueNeeded+=additionalValueForNextCategory;
    long additionalValueSelected=additionalValueForNextCategory;
    List<Out> selectedOuts=this.selectOuts(outs,valueNeeded);
    if (TxBuilder.getAmount(selectedOuts) < valueNeeded)     break;
    if (!needAtLeastReferenceFee) {
      long total=TxBuilder.getAmount(selectedOuts);
      if (total - value < Utils.CENT && total - value >= Utils.getFeeBase()) {
        needAtLeastReferenceFee=true;
        continue;
      }
      int s=TxBuilder.estimationTxSize(selectedOuts.size(),scriptPubKey,tx.getOuts(),address.isCompressed());
      if (total - value > Utils.CENT)       s+=34;
      if (TxBuilder.getCoinDepth(selectedOuts) <= TxBuilder.TX_FREE_MIN_PRIORITY * s) {
        needAtLeastReferenceFee=true;
        continue;
      }
    }
    boolean eitherCategory2Or3=false;
    boolean isCategory3=false;
    long change=TxBuilder.getAmount(selectedOuts) - valueNeeded;
    if (additionalValueSelected > 0)     change+=additionalValueSelected;
    if (BitherjSettings.ensureMinRequiredFee && change != 0 && change < Utils.CENT && fees < Utils.getFeeBase()) {
      eitherCategory2Or3=true;
      additionalValueForNextCategory=Utils.CENT;
      change-=Utils.getFeeBase() - fees;
    }
    int size=0;
    Out changeOutput=null;
    if (change > 0) {
      changeOutput=new Out();
      changeOutput.setOutValue(change);
      changeOutput.setOutAddress(changeAddress);
      if (BitherjSettings.ensureMinRequiredFee && Tx.MIN_NONDUST_OUTPUT >= change) {
        isCategory3=true;
        additionalValueForNextCategory=Utils.getFeeBase() + Tx.MIN_NONDUST_OUTPUT + 1;
      }
 else {
        size+=34;
        if (!eitherCategory2Or3)         additionalValueForNextCategory=0;
      }
    }
 else {
      if (eitherCategory2Or3) {
        isCategory3=true;
        additionalValueForNextCategory=Utils.getFeeBase() + 1;
      }
    }
    size+=TxBuilder.estimationTxSize(selectedOuts.size(),scriptPubKey,tx.getOuts(),address.isCompressed());
    if (size / 1000 > lastCalculatedSize / 1000 && Utils.getFeeBase() > 0) {
      lastCalculatedSize=size;
      additionalValueForNextCategory=additionalValueSelected;
      continue;
    }
    if (isCategory3) {
      if (selection3 == null)       selection3=selectedOuts;
    }
 else     if (eitherCategory2Or3) {
      if (selection2 != null) {
        long oldFee=TxBuilder.getAmount(selection2) - selection2Change.getOutValue() - value;
        long newFee=TxBuilder.getAmount(selectedOuts) - changeOutput.getOutValue() - value;
        if (newFee <= oldFee) {
          selection2=selectedOuts;
          selection2Change=changeOutput;
        }
      }
 else {
        selection2=selectedOuts;
        selection2Change=changeOutput;
      }
    }
 else {
      if (selection1 != null) {
        long oldFee=TxBuilder.getAmount(selection1) - value;
        if (selection1Change != null) {
          oldFee-=selection1Change.getOutValue();
        }
        long newFee=TxBuilder.getAmount(selectedOuts) - value;
        if (changeOutput != null) {
          newFee-=changeOutput.getOutValue();
        }
        if (newFee <= oldFee) {
          selection1=selectedOuts;
          selection1Change=changeOutput;
        }
      }
 else {
        selection1=selectedOuts;
        selection1Change=changeOutput;
      }
    }
    if (additionalValueForNextCategory > 0) {
      continue;
    }
    break;
  }
  if (selection3 == null && selection2 == null && selection1 == null) {
    return null;
  }
  long lowestFee=0;
  if (selection1 != null) {
    if (selection1Change != null)     lowestFee=TxBuilder.getAmount(selection1) - selection1Change.getOutValue() - value;
 else     lowestFee=TxBuilder.getAmount(selection1) - value;
    bestCoinSelection=selection1;
    bestChangeOutput=selection1Change;
  }
  if (selection2 != null) {
    long fee=TxBuilder.getAmount(selection2) - selection2Change.getOutValue() - value;
    if (lowestFee == 0 || fee < lowestFee) {
      lowestFee=fee;
      bestCoinSelection=selection2;
      bestChangeOutput=selection2Change;
    }
  }
  if (selection3 != null) {
    if (lowestFee == 0 || TxBuilder.getAmount(selection3) - value < lowestFee) {
      bestCoinSelection=selection3;
      bestChangeOutput=null;
    }
  }
  if (bestChangeOutput != null) {
    tx.addOutput(bestChangeOutput.getOutValue(),bestChangeOutput.getOutAddress());
  }
  for (  Out out : bestCoinSelection) {
    tx.addInput(out);
  }
  tx.setSource(Tx.SourceType.self.getValue());
  return tx;
}"
10948,"public boolean checkRValuesForTx(Tx tx){
  HashSet<BigInteger> rs=new HashSet<BigInteger>();
  for (  In in : AbstractDb.txProvider.getRelatedIn(this.address)) {
    if (in.getInSignature() != null) {
      Script script=new Script(in.getInSignature());
      if (script.getFromAddress().equals(this.address)) {
        for (        byte[] data : script.getSigs()) {
          TransactionSignature signature=TransactionSignature.decodeFromBitcoin(data,false);
          rs.add(new BigInteger(signature.r.toByteArray()));
        }
      }
    }
  }
  for (  In in : tx.getIns()) {
    Script script=new Script(in.getInSignature());
    for (    byte[] data : script.getSigs()) {
      TransactionSignature signature=TransactionSignature.decodeFromBitcoin(data,false);
      BigInteger i=new BigInteger(signature.r.toByteArray());
      if (rs.contains(i))       return false;
      rs.add(i);
    }
  }
  return true;
}","public boolean checkRValuesForTx(Tx tx){
  HashSet<BigInteger> rs=new HashSet<BigInteger>();
  for (  In in : AbstractDb.txProvider.getRelatedIn(this.address)) {
    if (in.getInSignature() != null && !in.isCoinBase()) {
      Script script=new Script(in.getInSignature());
      if (script.getFromAddress().equals(this.address)) {
        for (        byte[] data : script.getSigs()) {
          TransactionSignature signature=TransactionSignature.decodeFromBitcoin(data,false);
          rs.add(new BigInteger(signature.r.toByteArray()));
        }
      }
    }
  }
  for (  In in : tx.getIns()) {
    Script script=new Script(in.getInSignature());
    for (    byte[] data : script.getSigs()) {
      TransactionSignature signature=TransactionSignature.decodeFromBitcoin(data,false);
      BigInteger i=new BigInteger(signature.r.toByteArray());
      if (rs.contains(i))       return false;
      rs.add(i);
    }
  }
  return true;
}"
10949,"public boolean checkRValues(){
  HashSet<BigInteger> rs=new HashSet<BigInteger>();
  for (  In in : AbstractDb.txProvider.getRelatedIn(this.address)) {
    if (in.getInSignature() != null) {
      Script script=new Script(in.getInSignature());
      if (script.getFromAddress().equals(this.address)) {
        for (        byte[] data : script.getSigs()) {
          TransactionSignature signature=TransactionSignature.decodeFromBitcoin(data,false);
          BigInteger i=new BigInteger(signature.r.toByteArray());
          if (rs.contains(i))           return false;
          rs.add(i);
        }
      }
    }
  }
  return true;
}","public boolean checkRValues(){
  HashSet<BigInteger> rs=new HashSet<BigInteger>();
  for (  In in : AbstractDb.txProvider.getRelatedIn(this.address)) {
    if (in.getInSignature() != null && !in.isCoinBase()) {
      Script script=new Script(in.getInSignature());
      if (script.getFromAddress().equals(this.address)) {
        for (        byte[] data : script.getSigs()) {
          TransactionSignature signature=TransactionSignature.decodeFromBitcoin(data,false);
          BigInteger i=new BigInteger(signature.r.toByteArray());
          if (rs.contains(i))           return false;
          rs.add(i);
        }
      }
    }
  }
  return true;
}"
10950,"public String getFromAddress(){
  if (getConnectedOut() != null) {
    return getConnectedOut().getOutAddress();
  }
 else   if (this.getInSignature() != null) {
    Script script=new Script(this.getInSignature());
    return script.getFromAddress();
  }
  return null;
}","public String getFromAddress(){
  if (getConnectedOut() != null) {
    return getConnectedOut().getOutAddress();
  }
 else   if (this.getInSignature() != null && !this.isCoinBase()) {
    Script script=new Script(this.getInSignature());
    return script.getFromAddress();
  }
  return null;
}"
10951,"private byte[] getSignPubs(byte[] messageHash,ECKey.ECDSASignature sig,List<byte[]> pubs){
  for (int i=0; i < 4; i++) {
    ECPoint point=ECKey.recoverECPointFromSignature(i,sig,messageHash);
    ECKey ecKeyCompress=new ECKey(null,point.getEncoded(true));
    ECKey ecKeyUnCompress=new ECKey(null,point.getEncoded(false));
    for (int j=0; j < pubs.size(); i++) {
      if (Arrays.equals(ecKeyCompress.getPubKey(),pubs.get(j))) {
        return ecKeyCompress.getPubKey();
      }
      if (Arrays.equals(ecKeyUnCompress.getPubKey(),pubs.get(j))) {
        return ecKeyUnCompress.getPubKey();
      }
    }
  }
  return null;
}","private byte[] getSignPubs(byte[] messageHash,ECKey.ECDSASignature sig,List<byte[]> pubs){
  for (int i=0; i < 4; i++) {
    ECPoint point=ECKey.recoverECPointFromSignature(i,sig,messageHash);
    ECKey ecKeyCompress=new ECKey(null,point.getEncoded(true));
    ECKey ecKeyUnCompress=new ECKey(null,point.getEncoded(false));
    for (int j=0; j < pubs.size(); j++) {
      if (Arrays.equals(ecKeyCompress.getPubKey(),pubs.get(j))) {
        return ecKeyCompress.getPubKey();
      }
      if (Arrays.equals(ecKeyUnCompress.getPubKey(),pubs.get(j))) {
        return ecKeyUnCompress.getPubKey();
      }
    }
  }
  return null;
}"
10952,"public List<Tx> compressTxsForApi(List<Tx> txList,Address address){
  List<Sha256Hash> txHashList=new ArrayList<Sha256Hash>();
  for (  Tx tx : txList) {
    txHashList.add(new Sha256Hash(tx.getTxHash()));
  }
  for (  Tx tx : txList) {
    if (!isSendFromMe(tx,txHashList) && tx.getOuts().size() > BitherjSettings.COMPRESS_OUT_NUM) {
      List<Out> outList=new ArrayList<Out>();
      for (      Out out : tx.getOuts()) {
        if (Utils.compareString(address.getAddress(),out.getOutAddress())) {
          outList.add(out);
        }
      }
      tx.setOuts(outList);
    }
  }
  return txList;
}","public List<Tx> compressTxsForApi(List<Tx> txList,Address address){
  Map<Sha256Hash,Tx> txHashList=new HashMap<Sha256Hash,Tx>();
  for (  Tx tx : txList) {
    txHashList.put(new Sha256Hash(tx.getTxHash()),tx);
  }
  for (  Tx tx : txList) {
    if (!isSendFromMe(tx,txHashList,address) && tx.getOuts().size() > BitherjSettings.COMPRESS_OUT_NUM) {
      List<Out> outList=new ArrayList<Out>();
      for (      Out out : tx.getOuts()) {
        if (Utils.compareString(address.getAddress(),out.getOutAddress())) {
          outList.add(out);
        }
      }
      tx.setOuts(outList);
    }
  }
  return txList;
}"
10953,"public long deltaAmountFrom(Address address){
  long receive=0;
  long sent=0;
  for (  Out out : this.outs) {
    if (Utils.compareString(address.getAddress(),out.getOutAddress())) {
      receive+=out.getOutValue();
    }
  }
  for (  In in : this.ins) {
    Tx tx=AbstractDb.txProvider.getTxDetailByTxHash(in.getPrevTxHash());
    if (tx != null) {
      int n=in.getPrevOutSn();
      if (n < tx.outs.size()) {
        if (Utils.compareString(address.getAddress(),tx.outs.get(n).getOutAddress())) {
          sent+=tx.outs.get(n).getOutValue();
        }
      }
 else {
        for (        Out out : tx.outs) {
          if (Utils.compareString(address.getAddress(),out.getOutAddress())) {
            sent+=out.getOutValue();
          }
        }
      }
    }
  }
  return receive - sent;
}","public long deltaAmountFrom(Address address){
  long receive=0;
  long sent=0;
  for (  Out out : this.outs) {
    if (Utils.compareString(address.getAddress(),out.getOutAddress())) {
      receive+=out.getOutValue();
    }
  }
  for (  In in : this.ins) {
    Tx tx=AbstractDb.txProvider.getTxDetailByTxHash(in.getPrevTxHash());
    if (tx != null) {
      int n=in.getPrevOutSn();
      for (      Out out : tx.outs) {
        if (Utils.compareString(address.getAddress(),out.getOutAddress()) && n == out.getOutSn()) {
          sent+=out.getOutValue();
        }
      }
    }
  }
  return receive - sent;
}"
10954,"@Test public void testCreateHDAddress(){
  try {
    ConnectHttps.trustAllCerts();
    TestImplAbstractApp appAndroid=new TestImplAbstractApp();
    appAndroid.construct();
    ECKey ecKey=new DumpedPrivateKey(""String_Node_Str"").getKey();
    String address=ecKey.toAddress();
    GetHDMBIdRandomApi getHDMBIdRandomApi=new GetHDMBIdRandomApi(address);
    getHDMBIdRandomApi.handleHttpGet();
    long randomKey=getHDMBIdRandomApi.getResult();
    byte[] decryptedPassword=new byte[32];
    for (int i=0; i < decryptedPassword.length; i++) {
      decryptedPassword[i]=0;
    }
    String message=Utils.format(HDMBId.BITID_STRING,address,Utils.bytesToHexString(decryptedPassword),randomKey);
    byte[] hash=Utils.getPreSignMessage(message);
    byte[] signBytes=ecKey.signHash(hash,null);
    UploadHDMBidApi uploadHDMBidApi=new UploadHDMBidApi(address,address,signBytes,decryptedPassword);
    uploadHDMBidApi.handleHttpPost();
    String str=uploadHDMBidApi.getResult();
    HDMAddress.Pubs pubs=new HDMAddress.Pubs(ecKey.getPubKey(),ecKey.getPubKey(),null,0);
    List<HDMAddress.Pubs> pubsList=new ArrayList<HDMAddress.Pubs>();
    pubsList.add(pubs);
    CreateHDMAddressApi createHDMAddressApi=new CreateHDMAddressApi(address,pubsList,decryptedPassword);
    createHDMAddressApi.handleHttpPost();
    List<byte[]> pubList=createHDMAddressApi.getResult();
    for (    byte[] bytes : pubList) {
      log.info(Utils.bytesToHexString(bytes));
    }
    List<byte[]> unsigns=new ArrayList<byte[]>();
    unsigns.add(Utils.doubleDigest(decryptedPassword));
    SignatureHDMApi signatureHDMApi=new SignatureHDMApi(address,0,decryptedPassword,unsigns);
    signatureHDMApi.handleHttpPost();
    List<byte[]> bytesList=signatureHDMApi.getResult();
    for (    byte[] bytes : bytesList) {
      log.info(Utils.bytesToHexString(bytes));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Test public void testCreateHDAddress(){
  try {
    ConnectHttps.trustAllCerts();
    TestImplAbstractApp appAndroid=new TestImplAbstractApp();
    appAndroid.construct();
    ECKey ecKey=new DumpedPrivateKey(""String_Node_Str"").getKey();
    String address=ecKey.toAddress();
    GetHDMBIdRandomApi getHDMBIdRandomApi=new GetHDMBIdRandomApi(address);
    getHDMBIdRandomApi.handleHttpGet();
    long randomKey=getHDMBIdRandomApi.getResult();
    byte[] decryptedPassword=new byte[32];
    for (int i=0; i < decryptedPassword.length; i++) {
      decryptedPassword[i]=0;
    }
    String message=Utils.format(HDMBId.BITID_STRING,address,Utils.bytesToHexString(decryptedPassword),randomKey);
    byte[] hash=Utils.getPreSignMessage(message);
    byte[] signBytes=ecKey.signHash(hash,null);
    UploadHDMBidApi uploadHDMBidApi=new UploadHDMBidApi(address,address,signBytes,decryptedPassword);
    uploadHDMBidApi.handleHttpPost();
    boolean str=uploadHDMBidApi.getResult();
    HDMAddress.Pubs pubs=new HDMAddress.Pubs(ecKey.getPubKey(),ecKey.getPubKey(),null,0);
    List<HDMAddress.Pubs> pubsList=new ArrayList<HDMAddress.Pubs>();
    pubsList.add(pubs);
    CreateHDMAddressApi createHDMAddressApi=new CreateHDMAddressApi(address,pubsList,decryptedPassword);
    createHDMAddressApi.handleHttpPost();
    List<byte[]> pubList=createHDMAddressApi.getResult();
    for (    byte[] bytes : pubList) {
      log.info(Utils.bytesToHexString(bytes));
    }
    List<byte[]> unsigns=new ArrayList<byte[]>();
    unsigns.add(Utils.doubleDigest(decryptedPassword));
    SignatureHDMApi signatureHDMApi=new SignatureHDMApi(address,0,decryptedPassword,unsigns);
    signatureHDMApi.handleHttpPost();
    List<byte[]> bytesList=signatureHDMApi.getResult();
    for (    byte[] bytes : bytesList) {
      log.info(Utils.bytesToHexString(bytes));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
10955,"public Tx compressTx(Tx tx){
  List<Out> outList=new ArrayList<Out>();
  if (!isSendFromMe(tx) && tx.getOuts().size() > BitherjSettings.COMPRESS_OUT_NUM) {
    for (    Out out : tx.getOuts()) {
      String outAddress=out.getOutAddress();
      if (addressHashSet.contains(outAddress)) {
        outList.add(out);
      }
    }
  }
  tx.setOuts(outList);
  return tx;
}","public Tx compressTx(Tx tx){
  if (!isSendFromMe(tx) && tx.getOuts().size() > BitherjSettings.COMPRESS_OUT_NUM) {
    List<Out> outList=new ArrayList<Out>();
    for (    Out out : tx.getOuts()) {
      String outAddress=out.getOutAddress();
      if (addressHashSet.contains(outAddress)) {
        outList.add(out);
      }
    }
    tx.setOuts(outList);
  }
  return tx;
}"
10956,"public long getFee(){
  long amount=0;
  for (  In in : getIns()) {
    Tx preTx=AbstractDb.txProvider.getTxDetailByTxHash(in.getPrevTxHash());
    boolean hasOut=false;
    for (    Out out : preTx.getOuts()) {
      if (in.getPrevOutSn() == out.getOutSn()) {
        amount+=preTx.getOuts().get(in.getPrevOutSn()).getOutValue();
        hasOut=true;
      }
    }
    if (!hasOut) {
      return Long.MAX_VALUE;
    }
  }
  for (  Out out : getOuts()) {
    amount-=out.getOutValue();
  }
  return amount;
}","public long getFee(){
  long amount=0;
  for (  In in : getIns()) {
    Tx preTx=AbstractDb.txProvider.getTxDetailByTxHash(in.getPrevTxHash());
    boolean hasOut=false;
    for (    Out out : preTx.getOuts()) {
      if (in.getPrevOutSn() == out.getOutSn()) {
        amount+=out.getOutValue();
        hasOut=true;
      }
    }
    if (!hasOut) {
      return Long.MAX_VALUE;
    }
  }
  for (  Out out : getOuts()) {
    amount-=out.getOutValue();
  }
  return amount;
}"
10957,"public int compare(Out out1,Out out2){
  int depth1=0;
  int depth2=0;
  long coinDepth1=BlockChain.getInstance().lastBlock.getBlockNo() * out1.getOutValue() - out1.getCoinDepth() + out1.getOutValue();
  long coinDepth2=BlockChain.getInstance().lastBlock.getBlockNo() * out2.getOutValue() - out2.getCoinDepth() + out2.getOutValue();
  if (coinDepth1 != coinDepth2) {
    return (int)(coinDepth1 - coinDepth2);
  }
 else {
    BigInteger hash1=new BigInteger(1,out1.getTxHash());
    BigInteger hash2=new BigInteger(1,out2.getTxHash());
    int result=hash1.compareTo(hash2);
    if (result != 0) {
      return result;
    }
 else {
      return out1.getOutSn() - out2.getOutSn();
    }
  }
}","public int compare(Out out1,Out out2){
  int depth1=0;
  int depth2=0;
  long coinDepth1=BlockChain.getInstance().lastBlock.getBlockNo() * out1.getOutValue() - out1.getCoinDepth() + out1.getOutValue();
  long coinDepth2=BlockChain.getInstance().lastBlock.getBlockNo() * out2.getOutValue() - out2.getCoinDepth() + out2.getOutValue();
  if (coinDepth1 != coinDepth2) {
    if (coinDepth2 > coinDepth1)     return 1;
 else     return -1;
  }
 else   if (out1.getOutValue() != out2.getOutValue()) {
    if (out2.getOutValue() > out1.getOutValue())     return 1;
 else     return -1;
  }
 else {
    BigInteger hash1=new BigInteger(1,out1.getTxHash());
    BigInteger hash2=new BigInteger(1,out2.getTxHash());
    int result=hash1.compareTo(hash2);
    if (result != 0) {
      return result;
    }
 else {
      return out1.getOutSn() - out2.getOutSn();
    }
  }
}"
10958,"public Tx buildTx(Address address,String changeAddress,List<Tx> unspendTxs,Tx tx){
  List<Out> outs=TxBuilder.getUnspendOuts(unspendTxs);
  Collections.sort(outs,new Comparator<Out>(){
    public int compare(    Out out1,    Out out2){
      int depth1=0;
      int depth2=0;
      long coinDepth1=BlockChain.getInstance().lastBlock.getBlockNo() * out1.getOutValue() - out1.getCoinDepth() + out1.getOutValue();
      long coinDepth2=BlockChain.getInstance().lastBlock.getBlockNo() * out2.getOutValue() - out2.getCoinDepth() + out2.getOutValue();
      if (coinDepth1 != coinDepth2) {
        return (int)(coinDepth1 - coinDepth2);
      }
 else {
        BigInteger hash1=new BigInteger(1,out1.getTxHash());
        BigInteger hash2=new BigInteger(1,out2.getTxHash());
        int result=hash1.compareTo(hash2);
        if (result != 0) {
          return result;
        }
 else {
          return out1.getOutSn() - out2.getOutSn();
        }
      }
    }
  }
);
  long additionalValueForNextCategory=0;
  List<Out> selection3=null;
  List<Out> selection2=null;
  Out selection2Change=null;
  List<Out> selection1=null;
  Out selection1Change=null;
  int lastCalculatedSize=0;
  long valueNeeded;
  long value=0;
  for (  Out out : tx.getOuts()) {
    value+=out.getOutValue();
  }
  boolean needAtLeastReferenceFee=TxBuilder.needMinFee(tx.getOuts());
  List<Out> bestCoinSelection=null;
  Out bestChangeOutput=null;
  while (true) {
    long fees=0;
    if (lastCalculatedSize >= 1000) {
      fees+=(lastCalculatedSize / 1000 + 1) * Utils.getFeeBase();
    }
    if (needAtLeastReferenceFee && fees < Utils.getFeeBase())     fees=Utils.getFeeBase();
    valueNeeded=value + fees;
    if (additionalValueForNextCategory > 0)     valueNeeded+=additionalValueForNextCategory;
    long additionalValueSelected=additionalValueForNextCategory;
    List<Out> selectedOuts=this.selectOuts(outs,valueNeeded);
    if (TxBuilder.getAmount(selectedOuts) < valueNeeded)     break;
    if (!needAtLeastReferenceFee) {
      long total=TxBuilder.getAmount(selectedOuts);
      if (total - value < Utils.CENT && total - value >= Utils.getFeeBase()) {
        needAtLeastReferenceFee=true;
        continue;
      }
      int s=TxBuilder.estimationTxSize(selectedOuts.size(),tx.getOuts().size());
      if (total - value > Utils.CENT)       s+=34;
      if (TxBuilder.getCoinDepth(selectedOuts) <= TxBuilder.TX_FREE_MIN_PRIORITY * s) {
        needAtLeastReferenceFee=true;
        continue;
      }
    }
    boolean eitherCategory2Or3=false;
    boolean isCategory3=false;
    long change=TxBuilder.getAmount(selectedOuts) - valueNeeded;
    if (additionalValueSelected > 0)     change+=additionalValueSelected;
    if (BitherjSettings.ensureMinRequiredFee && change != 0 && change < Utils.CENT && fees < Utils.getFeeBase()) {
      eitherCategory2Or3=true;
      additionalValueForNextCategory=Utils.CENT;
      change-=Utils.getFeeBase() - fees;
    }
    int size=0;
    Out changeOutput=null;
    if (change > 0) {
      changeOutput=new Out();
      changeOutput.setOutValue(change);
      changeOutput.setOutAddress(changeAddress);
      if (BitherjSettings.ensureMinRequiredFee && Tx.MIN_NONDUST_OUTPUT >= change) {
        isCategory3=true;
        additionalValueForNextCategory=Utils.getFeeBase() + Tx.MIN_NONDUST_OUTPUT + 1;
      }
 else {
        size+=34;
        if (!eitherCategory2Or3)         additionalValueForNextCategory=0;
      }
    }
 else {
      if (eitherCategory2Or3) {
        isCategory3=true;
        additionalValueForNextCategory=Utils.getFeeBase() + 1;
      }
    }
    size+=TxBuilder.estimationTxSize(selectedOuts.size(),tx.getOuts().size());
    if (size / 1000 > lastCalculatedSize / 1000 && Utils.getFeeBase() > 0) {
      lastCalculatedSize=size;
      additionalValueForNextCategory=additionalValueSelected;
      continue;
    }
    if (isCategory3) {
      if (selection3 == null)       selection3=selectedOuts;
    }
 else     if (eitherCategory2Or3) {
      if (selection2 != null) {
        long oldFee=TxBuilder.getAmount(selection2) - selection2Change.getOutValue() - value;
        long newFee=TxBuilder.getAmount(selectedOuts) - changeOutput.getOutValue() - value;
        if (newFee <= oldFee) {
          selection2=selectedOuts;
          selection2Change=changeOutput;
        }
      }
 else {
        selection2=selectedOuts;
        selection2Change=changeOutput;
      }
    }
 else {
      if (selection1 != null) {
        long oldFee=TxBuilder.getAmount(selection1) - value;
        if (selection1Change != null) {
          oldFee-=selection1Change.getOutValue();
        }
        long newFee=TxBuilder.getAmount(selectedOuts) - value;
        if (changeOutput != null) {
          newFee-=changeOutput.getOutValue();
        }
        if (newFee <= oldFee) {
          selection1=selectedOuts;
          selection1Change=changeOutput;
        }
      }
 else {
        selection1=selectedOuts;
        selection1Change=changeOutput;
      }
    }
    if (additionalValueForNextCategory > 0) {
      continue;
    }
    break;
  }
  if (selection3 == null && selection2 == null && selection1 == null) {
    return null;
  }
  long lowestFee=0;
  if (selection1 != null) {
    if (selection1Change != null)     lowestFee=TxBuilder.getAmount(selection1) - selection1Change.getOutValue() - value;
 else     lowestFee=TxBuilder.getAmount(selection1) - value;
    bestCoinSelection=selection1;
    bestChangeOutput=selection1Change;
  }
  if (selection2 != null) {
    long fee=TxBuilder.getAmount(selection2) - selection2Change.getOutValue() - value;
    if (lowestFee == 0 || fee < lowestFee) {
      lowestFee=fee;
      bestCoinSelection=selection2;
      bestChangeOutput=selection2Change;
    }
  }
  if (selection3 != null) {
    if (lowestFee == 0 || TxBuilder.getAmount(selection3) - value < lowestFee) {
      bestCoinSelection=selection3;
      bestChangeOutput=null;
    }
  }
  if (bestChangeOutput != null) {
    tx.addOutput(bestChangeOutput.getOutValue(),bestChangeOutput.getOutAddress());
  }
  for (  Out out : bestCoinSelection) {
    tx.addInput(out);
  }
  tx.setSource(Tx.SourceType.self.getValue());
  return tx;
}","public Tx buildTx(Address address,String changeAddress,List<Tx> unspendTxs,Tx tx){
  List<Out> outs=TxBuilder.getUnspendOuts(unspendTxs);
  Collections.sort(outs,new Comparator<Out>(){
    public int compare(    Out out1,    Out out2){
      int depth1=0;
      int depth2=0;
      long coinDepth1=BlockChain.getInstance().lastBlock.getBlockNo() * out1.getOutValue() - out1.getCoinDepth() + out1.getOutValue();
      long coinDepth2=BlockChain.getInstance().lastBlock.getBlockNo() * out2.getOutValue() - out2.getCoinDepth() + out2.getOutValue();
      if (coinDepth1 != coinDepth2) {
        if (coinDepth2 > coinDepth1)         return 1;
 else         return -1;
      }
 else       if (out1.getOutValue() != out2.getOutValue()) {
        if (out2.getOutValue() > out1.getOutValue())         return 1;
 else         return -1;
      }
 else {
        BigInteger hash1=new BigInteger(1,out1.getTxHash());
        BigInteger hash2=new BigInteger(1,out2.getTxHash());
        int result=hash1.compareTo(hash2);
        if (result != 0) {
          return result;
        }
 else {
          return out1.getOutSn() - out2.getOutSn();
        }
      }
    }
  }
);
  long additionalValueForNextCategory=0;
  List<Out> selection3=null;
  List<Out> selection2=null;
  Out selection2Change=null;
  List<Out> selection1=null;
  Out selection1Change=null;
  int lastCalculatedSize=0;
  long valueNeeded;
  long value=0;
  for (  Out out : tx.getOuts()) {
    value+=out.getOutValue();
  }
  boolean needAtLeastReferenceFee=TxBuilder.needMinFee(tx.getOuts());
  List<Out> bestCoinSelection=null;
  Out bestChangeOutput=null;
  while (true) {
    long fees=0;
    if (lastCalculatedSize >= 1000) {
      fees+=(lastCalculatedSize / 1000 + 1) * Utils.getFeeBase();
    }
    if (needAtLeastReferenceFee && fees < Utils.getFeeBase())     fees=Utils.getFeeBase();
    valueNeeded=value + fees;
    if (additionalValueForNextCategory > 0)     valueNeeded+=additionalValueForNextCategory;
    long additionalValueSelected=additionalValueForNextCategory;
    List<Out> selectedOuts=this.selectOuts(outs,valueNeeded);
    if (TxBuilder.getAmount(selectedOuts) < valueNeeded)     break;
    if (!needAtLeastReferenceFee) {
      long total=TxBuilder.getAmount(selectedOuts);
      if (total - value < Utils.CENT && total - value >= Utils.getFeeBase()) {
        needAtLeastReferenceFee=true;
        continue;
      }
      int s=TxBuilder.estimationTxSize(selectedOuts.size(),tx.getOuts().size());
      if (total - value > Utils.CENT)       s+=34;
      if (TxBuilder.getCoinDepth(selectedOuts) <= TxBuilder.TX_FREE_MIN_PRIORITY * s) {
        needAtLeastReferenceFee=true;
        continue;
      }
    }
    boolean eitherCategory2Or3=false;
    boolean isCategory3=false;
    long change=TxBuilder.getAmount(selectedOuts) - valueNeeded;
    if (additionalValueSelected > 0)     change+=additionalValueSelected;
    if (BitherjSettings.ensureMinRequiredFee && change != 0 && change < Utils.CENT && fees < Utils.getFeeBase()) {
      eitherCategory2Or3=true;
      additionalValueForNextCategory=Utils.CENT;
      change-=Utils.getFeeBase() - fees;
    }
    int size=0;
    Out changeOutput=null;
    if (change > 0) {
      changeOutput=new Out();
      changeOutput.setOutValue(change);
      changeOutput.setOutAddress(changeAddress);
      if (BitherjSettings.ensureMinRequiredFee && Tx.MIN_NONDUST_OUTPUT >= change) {
        isCategory3=true;
        additionalValueForNextCategory=Utils.getFeeBase() + Tx.MIN_NONDUST_OUTPUT + 1;
      }
 else {
        size+=34;
        if (!eitherCategory2Or3)         additionalValueForNextCategory=0;
      }
    }
 else {
      if (eitherCategory2Or3) {
        isCategory3=true;
        additionalValueForNextCategory=Utils.getFeeBase() + 1;
      }
    }
    size+=TxBuilder.estimationTxSize(selectedOuts.size(),tx.getOuts().size());
    if (size / 1000 > lastCalculatedSize / 1000 && Utils.getFeeBase() > 0) {
      lastCalculatedSize=size;
      additionalValueForNextCategory=additionalValueSelected;
      continue;
    }
    if (isCategory3) {
      if (selection3 == null)       selection3=selectedOuts;
    }
 else     if (eitherCategory2Or3) {
      if (selection2 != null) {
        long oldFee=TxBuilder.getAmount(selection2) - selection2Change.getOutValue() - value;
        long newFee=TxBuilder.getAmount(selectedOuts) - changeOutput.getOutValue() - value;
        if (newFee <= oldFee) {
          selection2=selectedOuts;
          selection2Change=changeOutput;
        }
      }
 else {
        selection2=selectedOuts;
        selection2Change=changeOutput;
      }
    }
 else {
      if (selection1 != null) {
        long oldFee=TxBuilder.getAmount(selection1) - value;
        if (selection1Change != null) {
          oldFee-=selection1Change.getOutValue();
        }
        long newFee=TxBuilder.getAmount(selectedOuts) - value;
        if (changeOutput != null) {
          newFee-=changeOutput.getOutValue();
        }
        if (newFee <= oldFee) {
          selection1=selectedOuts;
          selection1Change=changeOutput;
        }
      }
 else {
        selection1=selectedOuts;
        selection1Change=changeOutput;
      }
    }
    if (additionalValueForNextCategory > 0) {
      continue;
    }
    break;
  }
  if (selection3 == null && selection2 == null && selection1 == null) {
    return null;
  }
  long lowestFee=0;
  if (selection1 != null) {
    if (selection1Change != null)     lowestFee=TxBuilder.getAmount(selection1) - selection1Change.getOutValue() - value;
 else     lowestFee=TxBuilder.getAmount(selection1) - value;
    bestCoinSelection=selection1;
    bestChangeOutput=selection1Change;
  }
  if (selection2 != null) {
    long fee=TxBuilder.getAmount(selection2) - selection2Change.getOutValue() - value;
    if (lowestFee == 0 || fee < lowestFee) {
      lowestFee=fee;
      bestCoinSelection=selection2;
      bestChangeOutput=selection2Change;
    }
  }
  if (selection3 != null) {
    if (lowestFee == 0 || TxBuilder.getAmount(selection3) - value < lowestFee) {
      bestCoinSelection=selection3;
      bestChangeOutput=null;
    }
  }
  if (bestChangeOutput != null) {
    tx.addOutput(bestChangeOutput.getOutValue(),bestChangeOutput.getOutAddress());
  }
  for (  Out out : bestCoinSelection) {
    tx.addInput(out);
  }
  tx.setSource(Tx.SourceType.self.getValue());
  return tx;
}"
10959,"public void verifyDifficultyFromPreviousBlock(Block prev){
  if ((prev.getBlockNo() + 1) % BitherjSettings.BLOCK_DIFFICULTY_INTERVAL != 0) {
    if (this.getBlockBits() != prev.getBlockBits())     throw new VerificationException(""String_Node_Str"" + prev.getBlockNo() + ""String_Node_Str""+ Long.toHexString(this.getBlockBits())+ ""String_Node_Str""+ Long.toHexString(prev.getBlockBits()));
    return;
  }
  long now=System.currentTimeMillis();
  Block cursor=get(prev.getBlockHash());
  for (int i=0; i < BitherjSettings.BLOCK_DIFFICULTY_INTERVAL - 1; i++) {
    if (cursor == null) {
      throw new VerificationException(""String_Node_Str"");
    }
    cursor=get(cursor.getBlockPrev());
  }
  long elapsed=System.currentTimeMillis() - now;
  if (elapsed > 50)   log.info(""String_Node_Str"",elapsed);
  Block blockIntervalAgo=cursor;
  int timespan=(int)(prev.getBlockTime() - blockIntervalAgo.getBlockTime());
  final int targetTimespan=BitherjSettings.TARGET_TIMESPAN;
  if (timespan < targetTimespan / 4)   timespan=targetTimespan / 4;
  if (timespan > targetTimespan * 4)   timespan=targetTimespan * 4;
  BigInteger newDifficulty=Utils.decodeCompactBits(prev.getBlockBits());
  newDifficulty=newDifficulty.multiply(BigInteger.valueOf(timespan));
  newDifficulty=newDifficulty.divide(BigInteger.valueOf(targetTimespan));
  if (newDifficulty.compareTo(BitherjSettings.proofOfWorkLimit) > 0) {
    newDifficulty=BitherjSettings.proofOfWorkLimit;
  }
  int accuracyBytes=(int)(this.getBlockBits() >>> 24) - 3;
  BigInteger receivedDifficulty=this.getDifficultyTargetAsInteger();
  BigInteger mask=BigInteger.valueOf(0xFFFFFFL).shiftLeft(accuracyBytes * 8);
  newDifficulty=newDifficulty.and(mask);
  if (newDifficulty.compareTo(receivedDifficulty) != 0)   throw new VerificationException(""String_Node_Str"" + receivedDifficulty.toString(16) + ""String_Node_Str""+ newDifficulty.toString(16));
}","public void verifyDifficultyFromPreviousBlock(Block prev,int transitionTime){
  if ((prev.getBlockNo() + 1) % BitherjSettings.BLOCK_DIFFICULTY_INTERVAL != 0) {
    if (this.getBlockBits() != prev.getBlockBits())     throw new VerificationException(""String_Node_Str"" + prev.getBlockNo() + ""String_Node_Str""+ Long.toHexString(this.getBlockBits())+ ""String_Node_Str""+ Long.toHexString(prev.getBlockBits()));
    return;
  }
  int timespan=(int)(prev.getBlockTime() - transitionTime);
  final int targetTimespan=BitherjSettings.TARGET_TIMESPAN;
  if (timespan < targetTimespan / 4)   timespan=targetTimespan / 4;
  if (timespan > targetTimespan * 4)   timespan=targetTimespan * 4;
  BigInteger newDifficulty=Utils.decodeCompactBits(prev.getBlockBits());
  newDifficulty=newDifficulty.multiply(BigInteger.valueOf(timespan));
  newDifficulty=newDifficulty.divide(BigInteger.valueOf(targetTimespan));
  if (newDifficulty.compareTo(BitherjSettings.proofOfWorkLimit) > 0) {
    newDifficulty=BitherjSettings.proofOfWorkLimit;
  }
  int accuracyBytes=(int)(this.getBlockBits() >>> 24) - 3;
  BigInteger receivedDifficulty=this.getDifficultyTargetAsInteger();
  BigInteger mask=BigInteger.valueOf(0xFFFFFFL).shiftLeft(accuracyBytes * 8);
  newDifficulty=newDifficulty.and(mask);
  if (newDifficulty.compareTo(receivedDifficulty) != 0)   throw new VerificationException(""String_Node_Str"" + receivedDifficulty.toString(16) + ""String_Node_Str""+ newDifficulty.toString(16));
}"
10960,"public int relayedBlocks(List<Block> blocks) throws VerificationException {
  if (blocks == null || blocks.size() == 0) {
    return 0;
  }
  Block prev=null;
  Block first=blocks.get(0);
  int rollbackBlockNo=0;
  if (Arrays.equals(first.getBlockPrev(),this.getLastBlock().getBlockHash())) {
    prev=this.getLastBlock();
  }
 else   if (BlockProvider.getInstance().getMainChainBlock(first.getBlockPrev()) != null) {
    prev=this.getSameParent(first,this.getLastBlock());
    rollbackBlockNo=prev.getBlockNo();
  }
  if (prev == null) {
    return 0;
  }
  for (  Block block : blocks) {
    if (!Arrays.equals(block.getBlockPrev(),prev.getBlockHash())) {
      return 0;
    }
    block.setBlockNo(prev.getBlockNo() + 1);
    try {
      block.verifyDifficultyFromPreviousBlock(prev);
    }
 catch (    Exception e) {
      e.printStackTrace();
      break;
    }
    block.setMain(true);
    prev=block;
  }
  if (rollbackBlockNo > 0) {
    this.rollbackBlock(rollbackBlockNo);
  }
  this.addBlocks(blocks);
  for (  Block block : blocks) {
    TxProvider.getInstance().confirmTx(block.getBlockNo(),block.getTxHashes());
  }
  this.lastBlock=blocks.get(blocks.size() - 1);
  return blocks.size();
}","public int relayedBlocks(List<Block> blocks) throws VerificationException {
  if (blocks == null || blocks.size() == 0) {
    return 0;
  }
  Block prev=null;
  Block first=blocks.get(0);
  int rollbackBlockNo=0;
  if (Arrays.equals(first.getBlockPrev(),this.getLastBlock().getBlockHash())) {
    prev=this.getLastBlock();
  }
 else   if (BlockProvider.getInstance().getMainChainBlock(first.getBlockPrev()) != null) {
    prev=this.getSameParent(first,this.getLastBlock());
    rollbackBlockNo=prev.getBlockNo();
  }
  if (prev == null) {
    return 0;
  }
  for (  Block block : blocks) {
    if (!Arrays.equals(block.getBlockPrev(),prev.getBlockHash())) {
      return 0;
    }
    block.setBlockNo(prev.getBlockNo() + 1);
    try {
      int transitionTime=0;
      if (block.getBlockNo() % BitherjSettings.BLOCK_DIFFICULTY_INTERVAL == 0) {
        long now=System.currentTimeMillis();
        Block cursor=first;
        for (int i=0; i < BitherjSettings.BLOCK_DIFFICULTY_INTERVAL - block.getBlockNo() + first.getBlockNo(); i++) {
          if (cursor == null) {
            throw new VerificationException(""String_Node_Str"");
          }
          cursor=getBlock(cursor.getBlockPrev());
        }
        long elapsed=System.currentTimeMillis() - now;
        if (elapsed > 50)         log.info(""String_Node_Str"",elapsed);
        transitionTime=cursor.getBlockTime();
      }
      block.verifyDifficultyFromPreviousBlock(prev,transitionTime);
    }
 catch (    Exception e) {
      e.printStackTrace();
      return 0;
    }
    block.setMain(true);
    prev=block;
  }
  if (rollbackBlockNo > 0) {
    this.rollbackBlock(rollbackBlockNo);
  }
  this.addBlocks(blocks);
  for (  Block block : blocks) {
    TxProvider.getInstance().confirmTx(block.getBlockNo(),block.getTxHashes());
  }
  this.lastBlock=blocks.get(blocks.size() - 1);
  return blocks.size();
}"
10961,"public int relayedBlocks(List<Block> blocks) throws VerificationException {
  if (blocks == null || blocks.size() == 0) {
    return 0;
  }
  Block prev=null;
  Block first=blocks.get(0);
  int rollbackBlockNo=0;
  if (Arrays.equals(first.getBlockPrev(),this.getLastBlock().getBlockHash())) {
    prev=this.getLastBlock();
  }
 else   if (BlockProvider.getInstance().getMainChainBlock(first.getBlockPrev()) != null) {
    prev=this.getSameParent(this.getLastBlock(),first);
    rollbackBlockNo=prev.getBlockNo();
  }
  if (prev == null) {
    return 0;
  }
  for (  Block block : blocks) {
    if (!Arrays.equals(block.getBlockPrev(),prev.getBlockHash())) {
      return 0;
    }
    block.setBlockNo(prev.getBlockNo() + 1);
    try {
      block.verifyDifficultyFromPreviousBlock(prev);
    }
 catch (    Exception e) {
      e.printStackTrace();
      break;
    }
    block.setMain(true);
    prev=block;
  }
  if (rollbackBlockNo > 0) {
    this.rollbackBlock(rollbackBlockNo);
  }
  this.addBlocks(blocks);
  for (  Block block : blocks) {
    TxProvider.getInstance().confirmTx(block.getBlockNo(),block.getTxHashes());
  }
  this.lastBlock=blocks.get(blocks.size() - 1);
  return blocks.size();
}","public int relayedBlocks(List<Block> blocks) throws VerificationException {
  if (blocks == null || blocks.size() == 0) {
    return 0;
  }
  Block prev=null;
  Block first=blocks.get(0);
  int rollbackBlockNo=0;
  if (Arrays.equals(first.getBlockPrev(),this.getLastBlock().getBlockHash())) {
    prev=this.getLastBlock();
  }
 else   if (BlockProvider.getInstance().getMainChainBlock(first.getBlockPrev()) != null) {
    prev=this.getSameParent(first,this.getLastBlock());
    rollbackBlockNo=prev.getBlockNo();
  }
  if (prev == null) {
    return 0;
  }
  for (  Block block : blocks) {
    if (!Arrays.equals(block.getBlockPrev(),prev.getBlockHash())) {
      return 0;
    }
    block.setBlockNo(prev.getBlockNo() + 1);
    try {
      block.verifyDifficultyFromPreviousBlock(prev);
    }
 catch (    Exception e) {
      e.printStackTrace();
      break;
    }
    block.setMain(true);
    prev=block;
  }
  if (rollbackBlockNo > 0) {
    this.rollbackBlock(rollbackBlockNo);
  }
  this.addBlocks(blocks);
  for (  Block block : blocks) {
    TxProvider.getInstance().confirmTx(block.getBlockNo(),block.getTxHashes());
  }
  this.lastBlock=blocks.get(blocks.size() - 1);
  return blocks.size();
}"
10962,"public int relayedBlocks(List<Block> blocks) throws VerificationException {
  if (blocks == null || blocks.size() == 0) {
    return 0;
  }
  Block prev=null;
  Block first=blocks.get(0);
  int rollbackBlockNo=0;
  if (Arrays.equals(first.getBlockPrev(),this.getLastBlock().getBlockHash())) {
    prev=this.getLastBlock();
  }
 else   if (BlockProvider.getInstance().getMainChainBlock(first.getBlockHash()) != null) {
    prev=this.getSameParent(this.getLastBlock(),first);
    rollbackBlockNo=prev.getBlockNo();
  }
  if (prev == null) {
    return 0;
  }
  for (  Block block : blocks) {
    if (!Arrays.equals(block.getBlockPrev(),prev.getBlockHash())) {
      return 0;
    }
    block.setBlockNo(prev.getBlockNo() + 1);
    try {
      block.verifyDifficultyFromPreviousBlock(prev);
    }
 catch (    Exception e) {
      e.printStackTrace();
      break;
    }
    block.setMain(true);
    prev=block;
  }
  if (rollbackBlockNo > 0) {
    this.rollbackBlock(rollbackBlockNo);
  }
  this.addBlocks(blocks);
  for (  Block block : blocks) {
    TxProvider.getInstance().confirmTx(block.getBlockNo(),block.getTxHashes());
  }
  this.lastBlock=blocks.get(blocks.size() - 1);
  return blocks.size();
}","public int relayedBlocks(List<Block> blocks) throws VerificationException {
  if (blocks == null || blocks.size() == 0) {
    return 0;
  }
  Block prev=null;
  Block first=blocks.get(0);
  int rollbackBlockNo=0;
  if (Arrays.equals(first.getBlockPrev(),this.getLastBlock().getBlockHash())) {
    prev=this.getLastBlock();
  }
 else   if (BlockProvider.getInstance().getMainChainBlock(first.getBlockPrev()) != null) {
    prev=this.getSameParent(this.getLastBlock(),first);
    rollbackBlockNo=prev.getBlockNo();
  }
  if (prev == null) {
    return 0;
  }
  for (  Block block : blocks) {
    if (!Arrays.equals(block.getBlockPrev(),prev.getBlockHash())) {
      return 0;
    }
    block.setBlockNo(prev.getBlockNo() + 1);
    try {
      block.verifyDifficultyFromPreviousBlock(prev);
    }
 catch (    Exception e) {
      e.printStackTrace();
      break;
    }
    block.setMain(true);
    prev=block;
  }
  if (rollbackBlockNo > 0) {
    this.rollbackBlock(rollbackBlockNo);
  }
  this.addBlocks(blocks);
  for (  Block block : blocks) {
    TxProvider.getInstance().confirmTx(block.getBlockNo(),block.getTxHashes());
  }
  this.lastBlock=blocks.get(blocks.size() - 1);
  return blocks.size();
}"
10963,"private Block getSameParent(Block block1,Block block2){
  Block b1=block1;
  Block b2=block2;
  while (b1 != null && b2 != null && b1.getBlockHash() != b2.getBlockHash()) {
    b1=BlockProvider.getInstance().getBlock(b1.getBlockPrev());
    if (b1.getBlockNo() < b2.getBlockNo()) {
      b2=BlockProvider.getInstance().getBlock(b2.getBlockPrev());
    }
  }
  return b1;
}","private Block getSameParent(Block block1,Block block2){
  Block b1=block1;
  Block b2=block2;
  while (b1 != null && b2 != null && !Arrays.equals(b1.getBlockHash(),b2.getBlockHash())) {
    b1=BlockProvider.getInstance().getBlock(b1.getBlockPrev());
    if (b1.getBlockNo() < b2.getBlockNo()) {
      b2=BlockProvider.getInstance().getBlock(b2.getBlockPrev());
    }
  }
  return b1;
}"
10964,"private void checkMerkleRoot() throws VerificationException {
  byte[] calculatedRoot=calculateMerkleRoot();
  if (calculatedRoot != blockRoot) {
    log.error(""String_Node_Str"");
    throw new VerificationException(""String_Node_Str"" + Utils.bytesToHexString(calculatedRoot) + ""String_Node_Str""+ Utils.bytesToHexString(blockRoot));
  }
}","private void checkMerkleRoot() throws VerificationException {
  byte[] calculatedRoot=calculateMerkleRoot();
  if (!Arrays.equals(calculatedRoot,blockRoot)) {
    log.error(""String_Node_Str"");
    throw new VerificationException(""String_Node_Str"" + Utils.bytesToHexString(calculatedRoot) + ""String_Node_Str""+ Utils.bytesToHexString(blockRoot));
  }
}"
10965,"private void forkMainChain(Block forkStartBlock,Block lastBlock){
  Block b=this.lastBlock;
  Block next=lastBlock;
  while (b.getBlockHash() != forkStartBlock.getBlockHash()) {
    next=BlockProvider.getInstance().getOrphanBlockByPrevHash(b.getBlockPrev());
    BlockProvider.getInstance().updateBlock(b.getBlockHash(),false);
    b=BlockProvider.getInstance().getMainChainBlock(b.getBlockPrev());
    this.lastBlock=b;
  }
  b=next;
  BlockProvider.getInstance().updateBlock(next.getBlockHash(),true);
  this.lastBlock=next;
  while (b.getBlockHash() != lastBlock.getBlockPrev()) {
    BlockProvider.getInstance().updateBlock(b.getBlockHash(),true);
    this.lastBlock=b;
    b=BlockProvider.getInstance().getOrphanBlockByPrevHash(b.getBlockHash());
  }
  lastBlock.setMain(true);
  this.addBlock(lastBlock);
  this.lastBlock=lastBlock;
}","private void forkMainChain(Block forkStartBlock,Block lastBlock){
  Block b=this.lastBlock;
  Block next=lastBlock;
  while (!Arrays.equals(b.getBlockHash(),forkStartBlock.getBlockHash())) {
    next=BlockProvider.getInstance().getOrphanBlockByPrevHash(b.getBlockPrev());
    BlockProvider.getInstance().updateBlock(b.getBlockHash(),false);
    b=BlockProvider.getInstance().getMainChainBlock(b.getBlockPrev());
    this.lastBlock=b;
  }
  b=next;
  BlockProvider.getInstance().updateBlock(next.getBlockHash(),true);
  this.lastBlock=next;
  while (!Arrays.equals(b.getBlockHash(),lastBlock.getBlockPrev())) {
    BlockProvider.getInstance().updateBlock(b.getBlockHash(),true);
    this.lastBlock=b;
    b=BlockProvider.getInstance().getOrphanBlockByPrevHash(b.getBlockHash());
  }
  lastBlock.setMain(true);
  this.addBlock(lastBlock);
  this.lastBlock=lastBlock;
}"
10966,"/** 
 * Handle a single   {@link StreamingRecognitionResult} by creatinga  {@link TranscriptionResult} based on the result and notifying allall registered  {@link TranscriptionListener}s
 * @param result the result to handle
 */
private void handleResult(StreamingRecognitionResult result){
  List<SpeechRecognitionAlternative> alternatives=result.getAlternativesList();
  if (alternatives.isEmpty()) {
    return;
  }
  TranscriptionResult transcriptionResult=new TranscriptionResult(null,requestManager.getCurrentMessageID(),!result.getIsFinal(),requestManager.getLanguageTag(),result.getStability());
  for (  SpeechRecognitionAlternative alternative : alternatives) {
    transcriptionResult.addAlternative(new TranscriptionAlternative(alternative.getTranscript(),alternative.getConfidence()));
  }
  sent(transcriptionResult);
}","/** 
 * Handle a single   {@link StreamingRecognitionResult} by creatinga  {@link TranscriptionResult} based on the result and notifying allall registered  {@link TranscriptionListener}s
 * @param result the result to handle
 */
private void handleResult(StreamingRecognitionResult result){
  List<SpeechRecognitionAlternative> alternatives=result.getAlternativesList();
  if (alternatives.isEmpty()) {
    return;
  }
  TranscriptionResult transcriptionResult=new TranscriptionResult(null,this.messageID,!result.getIsFinal(),this.languageTag,result.getStability());
  for (  SpeechRecognitionAlternative alternative : alternatives) {
    transcriptionResult.addAlternative(new TranscriptionAlternative(alternative.getTranscript(),alternative.getConfidence()));
  }
  sent(transcriptionResult);
}"
10967,"@Override public void addTranscriptionListener(TranscriptionListener listener){
  requestManager.getResponseObserver().addListener(listener);
}","@Override public void addTranscriptionListener(TranscriptionListener listener){
  requestManager.addListener(listener);
}"
10968,"/** 
 * Create a ResponseApiStreamingObserver which listens for transcription results
 * @param manager the manager of requests
 */
ResponseApiStreamingObserver(RequestApiStreamObserverManager manager){
  requestManager=manager;
}","/** 
 * Create a ResponseApiStreamingObserver which listens for transcription results
 * @param manager the manager of requests
 */
ResponseApiStreamingObserver(RequestApiStreamObserverManager manager,String languageTag){
  this.requestManager=manager;
  this.languageTag=languageTag;
  messageID=UUID.randomUUID();
}"
10969,"/** 
 * Create a new RequestApiStreamObserverManager, which will try to mimic a streaming session of indefinite lenth
 * @param client the SpeechClient with which to open new sessions
 */
RequestApiStreamObserverManager(SpeechClient client){
  this.client=client;
  this.responseObserver=new ResponseApiStreamingObserver<>(this);
}","/** 
 * Create a new RequestApiStreamObserverManager, which will try to mimic a streaming session of indefinite lenth
 * @param client the SpeechClient with which to open new sessions
 */
RequestApiStreamObserverManager(SpeechClient client){
  this.client=client;
}"
10970,"@Override public void onCompleted(){
  for (  TranscriptionListener listener : listeners) {
    listener.completed();
  }
}","@Override public void onCompleted(){
  for (  TranscriptionListener listener : requestManager.getListeners()) {
    listener.completed();
  }
}"
10971,"/** 
 * Send a TranscriptionResult to each TranscriptionListener
 * @param result the result to sent
 */
private void sent(TranscriptionResult result){
  for (  TranscriptionListener listener : listeners) {
    listener.notify(result);
  }
  if (!result.isInterim()) {
    ActionServicesHandler.getInstance().notifyActionServices(result);
  }
}","/** 
 * Send a TranscriptionResult to each TranscriptionListener
 * @param result the result to sent
 */
private void sent(TranscriptionResult result){
  for (  TranscriptionListener listener : requestManager.getListeners()) {
    listener.notify(result);
  }
  if (!result.isInterim()) {
    ActionServicesHandler.getInstance().notifyActionServices(result);
  }
}"
10972,"@Override public void onNext(StreamingRecognizeResponse message){
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"");
  if (message.hasError()) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + message.getError().getMessage());
    requestManager.terminateCurrentSession();
    return;
  }
  if (message.getResultsCount() == 0) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    requestManager.terminateCurrentSession();
    return;
  }
  List<StreamingRecognitionResult> results=message.getResultsList();
  StreamingRecognitionResult finalResult=results.get(0);
  if (!finalResult.getIsFinal()) {
    for (    StreamingRecognitionResult interimResult : results) {
      handleResult(interimResult);
    }
    return;
  }
  List<SpeechRecognitionAlternative> alternatives=finalResult.getAlternativesList();
  if (alternatives.isEmpty()) {
    logger.warn(""String_Node_Str"" + ""String_Node_Str"");
    requestManager.terminateCurrentSession();
    return;
  }
  handleResult(finalResult);
  requestManager.terminateCurrentSession();
}","@Override public void onNext(StreamingRecognizeResponse message){
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"");
  if (message.hasError()) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + message.getError().getMessage());
    requestManager.terminateCurrentSession();
    return;
  }
  if (isEndOfSingleUtteranceMessage(message) || message.getResultsCount() == 0) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    requestManager.terminateCurrentSession();
    return;
  }
  List<StreamingRecognitionResult> results=message.getResultsList();
  StreamingRecognitionResult finalResult=results.get(0);
  if (!finalResult.getIsFinal()) {
    for (    StreamingRecognitionResult interimResult : results) {
      handleResult(interimResult);
    }
    return;
  }
  List<SpeechRecognitionAlternative> alternatives=finalResult.getAlternativesList();
  if (alternatives.isEmpty()) {
    logger.warn(""String_Node_Str"" + ""String_Node_Str"");
    requestManager.terminateCurrentSession();
    return;
  }
  handleResult(finalResult);
  requestManager.terminateCurrentSession();
}"
10973,"/** 
 * Create a new ApiStreamObserver by instantiating it and sending the first request, which contains the configuration
 * @param config the configuration of the session
 * @return the ApiStreamObserver
 */
private ApiStreamObserver<StreamingRecognizeRequest> createObserver(RecognitionConfig config){
  this.messageID=UUID.randomUUID();
  this.languageTag=config.getLanguageCode();
  StreamingRecognitionConfig streamingRecognitionConfig=StreamingRecognitionConfig.newBuilder().setConfig(config).setInterimResults(RETRIEVE_INTERIM_RESULTS).setSingleUtterance(SINGLE_UTTERANCE_ONLY).build();
  StreamingCallable<StreamingRecognizeRequest,StreamingRecognizeResponse> callable=client.streamingRecognizeCallable();
  ApiStreamObserver<StreamingRecognizeRequest> requestObserver=callable.bidiStreamingCall(responseObserver);
  requestObserver.onNext(StreamingRecognizeRequest.newBuilder().setStreamingConfig(streamingRecognitionConfig).build());
  terminatingSessionThread=new TerminatingSessionThread(this,STREAMING_SESSION_TIMEOUT_MS);
  terminatingSessionThread.start();
  return requestObserver;
}","/** 
 * Create a new ApiStreamObserver by instantiating it and sending the first request, which contains the configuration
 * @param config the configuration of the session
 * @return the ApiStreamObserver
 */
private ApiStreamObserver<StreamingRecognizeRequest> createObserver(RecognitionConfig config){
  ResponseApiStreamingObserver<StreamingRecognizeResponse> responseObserver=new ResponseApiStreamingObserver<StreamingRecognizeResponse>(this,config.getLanguageCode());
  StreamingRecognitionConfig streamingRecognitionConfig=StreamingRecognitionConfig.newBuilder().setConfig(config).setInterimResults(RETRIEVE_INTERIM_RESULTS).setSingleUtterance(SINGLE_UTTERANCE_ONLY).build();
  StreamingCallable<StreamingRecognizeRequest,StreamingRecognizeResponse> callable=client.streamingRecognizeCallable();
  ApiStreamObserver<StreamingRecognizeRequest> requestObserver=callable.bidiStreamingCall(responseObserver);
  requestObserver.onNext(StreamingRecognizeRequest.newBuilder().setStreamingConfig(streamingRecognitionConfig).build());
  terminatingSessionThread=new TerminatingSessionThread(this,STREAMING_SESSION_TIMEOUT_MS);
  terminatingSessionThread.start();
  return requestObserver;
}"
10974,"/** 
 * The transcriber can be used as a   {@link ReceiveStreamBufferListener}to listen for new audio packets coming in through a MediaDevice. It will try to filter them based on the SSRC of the packet. If the SSRC does not match a participant added to the transcribed, an exception will be thrown <p> Note that this code is run in a Thread doing audio mixing and only has 20 ms for each frame
 * @param receiveStream the stream from which the audio was received
 * @param buffer the containing the audio as well as meta-data
 */
@Override public void bufferReceived(ReceiveStream receiveStream,Buffer buffer){
  if (!isTranscribing()) {
    return;
  }
  long ssrc=receiveStream.getSSRC() & 0xffffffffL;
  Participant p=participants.get(ssrc);
  if (p != null) {
    p.giveBuffer(buffer);
  }
 else {
    logger.warn(""String_Node_Str"" + ssrc + ""String_Node_Str""+ ""String_Node_Str"");
  }
}","/** 
 * The transcriber can be used as a   {@link ReceiveStreamBufferListener}to listen for new audio packets coming in through a MediaDevice. It will try to filter them based on the SSRC of the packet. If the SSRC does not match a participant added to the transcribed, an exception will be thrown <p> Note that this code is run in a Thread doing audio mixing and only has 20 ms for each frame
 * @param receiveStream the stream from which the audio was received
 * @param buffer the containing the audio as well as meta-data
 */
@Override public void bufferReceived(ReceiveStream receiveStream,Buffer buffer){
  if (!isTranscribing()) {
    logger.trace(""String_Node_Str"");
    return;
  }
  long ssrc=receiveStream.getSSRC() & 0xffffffffL;
  Participant p=participants.get(ssrc);
  if (p != null) {
    logger.trace(""String_Node_Str"");
    p.giveBuffer(buffer);
  }
 else {
    logger.warn(""String_Node_Str"" + ssrc + ""String_Node_Str""+ ""String_Node_Str"");
  }
}"
10975,"@Override protected String formatSpeechEvent(Transcript.SpeechEvent e){
  String name=e.getName();
  String timeStamp=e.getTimeString();
  String transcription=e.getResult().getTranscription();
  String base=String.format(UNFORMATTED_EVENT_BASE,timeStamp,name);
  String speech=String.format(UNFORMATTED_SPEECH,transcription);
  String formatted=base + String.format(UNFORMATTED_SPEECH,transcription);
  return formatToMaximumLineLength(formatted,MAX_LINE_WIDTH,base.length() + (speech.length() - transcription.length())) + NEW_LINE;
}","@Override protected String formatSpeechEvent(Transcript.SpeechEvent e){
  String name=e.getName();
  String timeStamp=e.getTimeString();
  String transcription=e.getResult().getAlternatives().iterator().next().getTranscription();
  String base=String.format(UNFORMATTED_EVENT_BASE,timeStamp,name);
  String speech=String.format(UNFORMATTED_SPEECH,transcription);
  String formatted=base + String.format(UNFORMATTED_SPEECH,transcription);
  return formatToMaximumLineLength(formatted,MAX_LINE_WIDTH,base.length() + (speech.length() - transcription.length())) + NEW_LINE;
}"
10976,"@After public void tearDown() throws InterruptedException, TimeoutException {
  focus.tearDown();
  CallManager.restartPool();
  BundleContext ctx=JigasiBundleActivator.osgiContext;
  ServiceReference[] refs=ServiceUtils.getServiceReferences(ctx,ProtocolProviderService.class);
  for (  ServiceReference ref : refs) {
    ProtocolProviderService protoService=(ProtocolProviderService)ctx.getService(ref);
    if (ProtocolNames.JABBER.equals(protoService.getProtocolName())) {
      throw new RuntimeException(protoService + ""String_Node_Str"");
    }
  }
}","@After public void tearDown() throws InterruptedException, TimeoutException {
  focus.tearDown();
  CallManager.restartPool();
  BundleContext ctx=JigasiBundleActivator.osgiContext;
  Collection<ServiceReference<ProtocolProviderService>> refs=ServiceUtils.getServiceReferences(ctx,ProtocolProviderService.class);
  for (  ServiceReference ref : refs) {
    ProtocolProviderService protoService=(ProtocolProviderService)ctx.getService(ref);
    if (ProtocolNames.JABBER.equals(protoService.getProtocolName())) {
      throw new RuntimeException(protoService + ""String_Node_Str"");
    }
  }
}"
10977,"public boolean compatibleWith(Version that){
  if (that == null)   return false;
  String[] thisParts=this.version.split(""String_Node_Str"");
  String[] thatParts=that.version.split(""String_Node_Str"");
  int length=Math.max(thisParts.length,thatParts.length);
  for (int i=0; i < length; i++) {
    int thisPart=i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;
    int thatPart=i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;
switch (i) {
case 0:
{
        if (thisPart != thatPart)         return false;
      }
case 1:
{
      if (thisPart < thatPart)       return false;
    }
case 2:
{
  }
}
}
return true;
}","public boolean compatibleWith(Version that){
  if (that == null)   return false;
  String[] thisParts=this.version.split(""String_Node_Str"");
  String[] thatParts=that.version.split(""String_Node_Str"");
  int length=Math.max(thisParts.length,thatParts.length);
  for (int i=0; i < length; i++) {
    int thisPart=i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;
    int thatPart=i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;
switch (i) {
case 0:
{
        if (thisPart != thatPart)         return false;
      }
    break;
case 1:
{
    if (thisPart < thatPart)     return false;
  }
break;
case 2:
{
}
break;
}
}
return true;
}"
10978,"private static void setup(){
  modelManager=new ModelManager();
  libraryManager=new LibraryManager(modelManager);
  libraryManager.getLibrarySourceLoader().registerProvider(new TestLibrarySourceProvider());
  try {
    ucumService=new UcumEssenceService(UcumEssenceService.class.getResourceAsStream(""String_Node_Str""));
  }
 catch (  UcumException e) {
    e.printStackTrace();
  }
}","private static void setup(){
  modelManager=new ModelManager();
  libraryManager=new LibraryManager(modelManager);
  libraryManager.getLibrarySourceLoader().registerProvider(new TestLibrarySourceProvider());
  try {
    ucumService=new UcumEssenceService(UcumEssenceService.class.getResourceAsStream(""String_Node_Str""));
    XmlPullParserFactory factory=XmlPullParserFactory.newInstance(System.getProperty(XmlPullParserFactory.PROPERTY_NAME),null);
    factory.setNamespaceAware(true);
  }
 catch (  UcumException e) {
    e.printStackTrace();
  }
catch (  XmlPullParserException e) {
    e.printStackTrace();
  }
}"
10979,"@Override public Object visitWithClause(@NotNull cqlParser.WithClauseContext ctx){
  AliasedQuerySource aqs=(AliasedQuerySource)visit(ctx.aliasedQuerySource());
  libraryBuilder.peekQueryContext().addQuerySource(aqs);
  try {
    Expression expression=(Expression)visit(ctx.expression());
    DataTypes.verifyType(expression.getResultType(),libraryBuilder.resolveTypeName(""String_Node_Str"",""String_Node_Str""));
    RelationshipClause result=of.createWith();
    result.withExpression(aqs.getExpression()).withAlias(aqs.getAlias()).withSuchThat(expression);
    result.setResultType(aqs.getResultType());
    return result;
  }
  finally {
    libraryBuilder.peekQueryContext().removeQuerySource(aqs);
  }
}","@Override public Object visitWithClause(@NotNull cqlParser.WithClauseContext ctx){
  AliasedQuerySource aqs=(AliasedQuerySource)visit(ctx.aliasedQuerySource());
  libraryBuilder.peekQueryContext().addRelatedQuerySource(aqs);
  try {
    Expression expression=(Expression)visit(ctx.expression());
    DataTypes.verifyType(expression.getResultType(),libraryBuilder.resolveTypeName(""String_Node_Str"",""String_Node_Str""));
    RelationshipClause result=of.createWith();
    result.withExpression(aqs.getExpression()).withAlias(aqs.getAlias()).withSuchThat(expression);
    result.setResultType(aqs.getResultType());
    return result;
  }
  finally {
    libraryBuilder.peekQueryContext().removeQuerySource(aqs);
  }
}"
10980,"@Override public Object visitQuery(@NotNull cqlParser.QueryContext ctx){
  QueryContext queryContext=new QueryContext();
  libraryBuilder.pushQueryContext(queryContext);
  try {
    List<AliasedQuerySource> sources;
    queryContext.enterSourceClause();
    try {
      sources=(List<AliasedQuerySource>)visit(ctx.sourceClause());
    }
  finally {
      queryContext.exitSourceClause();
    }
    queryContext.addQuerySources(sources);
    boolean expressionContextPushed=false;
    if (libraryBuilder.inPopulationContext() && queryContext.referencesPatientContext()) {
      libraryBuilder.pushExpressionContext(""String_Node_Str"");
      expressionContextPushed=true;
    }
    try {
      List<LetClause> dfcx=ctx.letClause() != null ? (List<LetClause>)visit(ctx.letClause()) : null;
      List<RelationshipClause> qicx=new ArrayList<>();
      if (ctx.queryInclusionClause() != null) {
        for (        cqlParser.QueryInclusionClauseContext queryInclusionClauseContext : ctx.queryInclusionClause()) {
          qicx.add((RelationshipClause)visit(queryInclusionClauseContext));
        }
      }
      Expression where=ctx.whereClause() != null ? (Expression)visit(ctx.whereClause()) : null;
      if (dateRangeOptimization && where != null) {
        for (        AliasedQuerySource aqs : sources) {
          where=optimizeDateRangeInQuery(where,aqs);
        }
      }
      ReturnClause ret=ctx.returnClause() != null ? (ReturnClause)visit(ctx.returnClause()) : null;
      if ((ret == null) && (sources.size() > 1)) {
        ret=of.createReturnClause().withDistinct(true);
        Tuple returnExpression=of.createTuple();
        TupleType returnType=new TupleType();
        for (        AliasedQuerySource aqs : sources) {
          TupleElement element=of.createTupleElement().withName(aqs.getAlias()).withValue(of.createAliasRef().withName(aqs.getAlias()));
          DataType sourceType=aqs.getResultType() instanceof ListType ? ((ListType)aqs.getResultType()).getElementType() : aqs.getResultType();
          element.getValue().setResultType(sourceType);
          element.setResultType(element.getValue().getResultType());
          returnType.addElement(new TupleTypeElement(element.getName(),element.getResultType()));
          returnExpression.getElement().add(element);
        }
        returnExpression.setResultType(queryContext.isSingular() ? returnType : new ListType(returnType));
        ret.setExpression(returnExpression);
        ret.setResultType(returnExpression.getResultType());
      }
      queryContext.removeQuerySources(sources);
      if (dfcx != null) {
        queryContext.removeLetClauses(dfcx);
      }
      DataType queryResultType=ret == null ? sources.get(0).getResultType() : ret.getResultType();
      queryContext.setResultElementType(queryContext.isSingular() ? null : ((ListType)queryResultType).getElementType());
      SortClause sort=null;
      if (ctx.sortClause() != null) {
        if (queryContext.isSingular()) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        queryContext.enterSortClause();
        try {
          sort=(SortClause)visit(ctx.sortClause());
          for (          SortByItem sortByItem : sort.getBy()) {
            if (sortByItem instanceof ByDirection) {
              libraryBuilder.verifyComparable(queryContext.getResultElementType());
            }
 else {
              libraryBuilder.verifyComparable(sortByItem.getResultType());
            }
          }
        }
  finally {
          queryContext.exitSortClause();
        }
      }
      Query query=of.createQuery().withSource(sources).withLet(dfcx).withRelationship(qicx).withWhere(where).withReturn(ret).withSort(sort);
      query.setResultType(queryResultType);
      return query;
    }
  finally {
      if (expressionContextPushed) {
        libraryBuilder.popExpressionContext();
      }
    }
  }
  finally {
    libraryBuilder.popQueryContext();
  }
}","@Override public Object visitQuery(@NotNull cqlParser.QueryContext ctx){
  QueryContext queryContext=new QueryContext();
  libraryBuilder.pushQueryContext(queryContext);
  try {
    List<AliasedQuerySource> sources;
    queryContext.enterSourceClause();
    try {
      sources=(List<AliasedQuerySource>)visit(ctx.sourceClause());
    }
  finally {
      queryContext.exitSourceClause();
    }
    queryContext.addPrimaryQuerySources(sources);
    boolean expressionContextPushed=false;
    if (libraryBuilder.inPopulationContext() && queryContext.referencesPatientContext()) {
      libraryBuilder.pushExpressionContext(""String_Node_Str"");
      expressionContextPushed=true;
    }
    try {
      List<LetClause> dfcx=ctx.letClause() != null ? (List<LetClause>)visit(ctx.letClause()) : null;
      List<RelationshipClause> qicx=new ArrayList<>();
      if (ctx.queryInclusionClause() != null) {
        for (        cqlParser.QueryInclusionClauseContext queryInclusionClauseContext : ctx.queryInclusionClause()) {
          qicx.add((RelationshipClause)visit(queryInclusionClauseContext));
        }
      }
      Expression where=ctx.whereClause() != null ? (Expression)visit(ctx.whereClause()) : null;
      if (dateRangeOptimization && where != null) {
        for (        AliasedQuerySource aqs : sources) {
          where=optimizeDateRangeInQuery(where,aqs);
        }
      }
      ReturnClause ret=ctx.returnClause() != null ? (ReturnClause)visit(ctx.returnClause()) : null;
      if ((ret == null) && (sources.size() > 1)) {
        ret=of.createReturnClause().withDistinct(true);
        Tuple returnExpression=of.createTuple();
        TupleType returnType=new TupleType();
        for (        AliasedQuerySource aqs : sources) {
          TupleElement element=of.createTupleElement().withName(aqs.getAlias()).withValue(of.createAliasRef().withName(aqs.getAlias()));
          DataType sourceType=aqs.getResultType() instanceof ListType ? ((ListType)aqs.getResultType()).getElementType() : aqs.getResultType();
          element.getValue().setResultType(sourceType);
          element.setResultType(element.getValue().getResultType());
          returnType.addElement(new TupleTypeElement(element.getName(),element.getResultType()));
          returnExpression.getElement().add(element);
        }
        returnExpression.setResultType(queryContext.isSingular() ? returnType : new ListType(returnType));
        ret.setExpression(returnExpression);
        ret.setResultType(returnExpression.getResultType());
      }
      queryContext.removeQuerySources(sources);
      if (dfcx != null) {
        queryContext.removeLetClauses(dfcx);
      }
      DataType queryResultType=ret == null ? sources.get(0).getResultType() : ret.getResultType();
      queryContext.setResultElementType(queryContext.isSingular() ? null : ((ListType)queryResultType).getElementType());
      SortClause sort=null;
      if (ctx.sortClause() != null) {
        if (queryContext.isSingular()) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        queryContext.enterSortClause();
        try {
          sort=(SortClause)visit(ctx.sortClause());
          for (          SortByItem sortByItem : sort.getBy()) {
            if (sortByItem instanceof ByDirection) {
              libraryBuilder.verifyComparable(queryContext.getResultElementType());
            }
 else {
              libraryBuilder.verifyComparable(sortByItem.getResultType());
            }
          }
        }
  finally {
          queryContext.exitSortClause();
        }
      }
      Query query=of.createQuery().withSource(sources).withLet(dfcx).withRelationship(qicx).withWhere(where).withReturn(ret).withSort(sort);
      query.setResultType(queryResultType);
      return query;
    }
  finally {
      if (expressionContextPushed) {
        libraryBuilder.popExpressionContext();
      }
    }
  }
  finally {
    libraryBuilder.popQueryContext();
  }
}"
10981,"@Override public Object visitWithoutClause(@NotNull cqlParser.WithoutClauseContext ctx){
  AliasedQuerySource aqs=(AliasedQuerySource)visit(ctx.aliasedQuerySource());
  libraryBuilder.peekQueryContext().addQuerySource(aqs);
  try {
    Expression expression=(Expression)visit(ctx.expression());
    DataTypes.verifyType(expression.getResultType(),libraryBuilder.resolveTypeName(""String_Node_Str"",""String_Node_Str""));
    RelationshipClause result=of.createWithout();
    result.withExpression(aqs.getExpression()).withAlias(aqs.getAlias()).withSuchThat(expression);
    result.setResultType(aqs.getResultType());
    return result;
  }
  finally {
    libraryBuilder.peekQueryContext().removeQuerySource(aqs);
  }
}","@Override public Object visitWithoutClause(@NotNull cqlParser.WithoutClauseContext ctx){
  AliasedQuerySource aqs=(AliasedQuerySource)visit(ctx.aliasedQuerySource());
  libraryBuilder.peekQueryContext().addRelatedQuerySource(aqs);
  try {
    Expression expression=(Expression)visit(ctx.expression());
    DataTypes.verifyType(expression.getResultType(),libraryBuilder.resolveTypeName(""String_Node_Str"",""String_Node_Str""));
    RelationshipClause result=of.createWithout();
    result.withExpression(aqs.getExpression()).withAlias(aqs.getAlias()).withSuchThat(expression);
    result.setResultType(aqs.getResultType());
    return result;
  }
  finally {
    libraryBuilder.peekQueryContext().removeQuerySource(aqs);
  }
}"
10982,"private AliasedQuerySource enterQueryContext(Expression target){
  QueryContext queryContext=new QueryContext();
  queryContext.setIsImplicit(true);
  List<AliasedQuerySource> sources=new ArrayList<>();
  AliasedQuerySource source=of.createAliasedQuerySource().withExpression(target).withAlias(""String_Node_Str"");
  source.setResultType(target.getResultType());
  sources.add(source);
  queryContext.addQuerySources(sources);
  builder.pushQueryContext(queryContext);
  return source;
}","private AliasedQuerySource enterQueryContext(Expression target){
  QueryContext queryContext=new QueryContext();
  queryContext.setIsImplicit(true);
  List<AliasedQuerySource> sources=new ArrayList<>();
  AliasedQuerySource source=of.createAliasedQuerySource().withExpression(target).withAlias(""String_Node_Str"");
  source.setResultType(target.getResultType());
  sources.add(source);
  queryContext.addPrimaryQuerySources(sources);
  builder.pushQueryContext(queryContext);
  return source;
}"
10983,"public void addInclude(IncludeDef includeDef){
  if (library.getIdentifier() == null || library.getIdentifier().getId() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (library.getIncludes() == null) {
    library.setIncludes(of.createLibraryIncludes());
  }
  library.getIncludes().getDef().add(includeDef);
  translatedLibrary.add(includeDef);
  VersionedIdentifier libraryIdentifier=new VersionedIdentifier().withId(includeDef.getPath()).withVersion(includeDef.getVersion());
  TranslatedLibrary referencedLibrary=libraryManager.resolveLibrary(libraryIdentifier,errors);
  libraries.put(includeDef.getLocalIdentifier(),referencedLibrary);
  loadConversionMap(referencedLibrary);
}","public void addInclude(IncludeDef includeDef){
  if (library.getIdentifier() == null || library.getIdentifier().getId() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (library.getIncludes() == null) {
    library.setIncludes(of.createLibraryIncludes());
  }
  library.getIncludes().getDef().add(includeDef);
  translatedLibrary.add(includeDef);
  VersionedIdentifier libraryIdentifier=new VersionedIdentifier().withId(includeDef.getPath()).withVersion(includeDef.getVersion());
  ArrayList<CqlTranslatorException> errors=new ArrayList<CqlTranslatorException>();
  TranslatedLibrary referencedLibrary=libraryManager.resolveLibrary(libraryIdentifier,errors);
  for (  CqlTranslatorException error : errors) {
    this.addException(error);
  }
  libraries.put(includeDef.getLocalIdentifier(),referencedLibrary);
  loadConversionMap(referencedLibrary);
}"
10984,"public TranslatedLibrary resolveLibrary(VersionedIdentifier libraryIdentifier,List<CqlTranslatorException> errors){
  if (libraryIdentifier == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (libraryIdentifier.getId() == null || libraryIdentifier.getId().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  TranslatedLibrary library=libraries.get(libraryIdentifier.getId());
  if (library != null && libraryIdentifier.getVersion() != null && !libraryIdentifier.getVersion().equals(library.getIdentifier().getVersion())) {
    throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion(),library.getIdentifier().getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion());
  }
 else {
    library=translateLibrary(libraryIdentifier,errors);
    libraries.put(libraryIdentifier.getId(),library);
  }
  return library;
}","public TranslatedLibrary resolveLibrary(VersionedIdentifier libraryIdentifier,List<CqlTranslatorException> errors){
  if (libraryIdentifier == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (libraryIdentifier.getId() == null || libraryIdentifier.getId().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  TranslatedLibrary library=libraries.get(libraryIdentifier.getId());
  if (library != null && libraryIdentifier.getVersion() != null && !libraryIdentifier.getVersion().equals(library.getIdentifier().getVersion())) {
    throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion(),library.getIdentifier().getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion());
  }
 else {
    library=translateLibrary(libraryIdentifier,errors);
    if (!HasErrors(errors)) {
      libraries.put(libraryIdentifier.getId(),library);
    }
  }
  return library;
}"
10985,"private TranslatedLibrary translateLibrary(VersionedIdentifier libraryIdentifier,List<CqlTranslatorException> errors){
  InputStream librarySource=null;
  try {
    librarySource=librarySourceLoader.getLibrarySource(libraryIdentifier);
  }
 catch (  Exception e) {
    throw new CqlTranslatorIncludeException(e.getMessage(),libraryIdentifier.getId(),libraryIdentifier.getVersion(),e);
  }
  if (librarySource == null) {
    throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion());
  }
  try {
    CqlTranslator translator=CqlTranslator.fromStream(librarySource,modelManager,this);
    if (errors != null) {
      errors.addAll(translator.getErrors());
    }
    TranslatedLibrary result=translator.getTranslatedLibrary();
    if (libraryIdentifier.getVersion() != null && !libraryIdentifier.getVersion().equals(result.getIdentifier().getVersion())) {
      throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion(),result.getIdentifier().getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion());
    }
    return result;
  }
 catch (  IOException e) {
    throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion(),e);
  }
}","private TranslatedLibrary translateLibrary(VersionedIdentifier libraryIdentifier,List<CqlTranslatorException> errors){
  InputStream librarySource=null;
  try {
    librarySource=librarySourceLoader.getLibrarySource(libraryIdentifier);
  }
 catch (  Exception e) {
    throw new CqlTranslatorIncludeException(e.getMessage(),libraryIdentifier.getId(),libraryIdentifier.getVersion(),e);
  }
  if (librarySource == null) {
    throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion());
  }
  try {
    CqlTranslator translator=CqlTranslator.fromStream(librarySource,modelManager,this);
    if (errors != null) {
      errors.addAll(translator.getExceptions());
    }
    TranslatedLibrary result=translator.getTranslatedLibrary();
    if (libraryIdentifier.getVersion() != null && !libraryIdentifier.getVersion().equals(result.getIdentifier().getVersion())) {
      throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion(),result.getIdentifier().getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion());
    }
    return result;
  }
 catch (  IOException e) {
    throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion(),e);
  }
}"
10986,"@Override public Object visitWithClause(@NotNull cqlParser.WithClauseContext ctx){
  AliasedQuerySource aqs=(AliasedQuerySource)visit(ctx.aliasedQuerySource());
  libraryBuilder.peekQueryContext().addQuerySource(aqs);
  try {
    Expression expression=(Expression)visit(ctx.expression());
    DataTypes.verifyType(expression.getResultType(),libraryBuilder.resolveTypeName(""String_Node_Str"",""String_Node_Str""));
    RelationshipClause result=of.createWith();
    result.withExpression(aqs.getExpression()).withAlias(aqs.getAlias()).withSuchThat(expression);
    result.setResultType(aqs.getResultType());
    return result;
  }
  finally {
    libraryBuilder.peekQueryContext().removeQuerySource(aqs);
  }
}","@Override public Object visitWithClause(@NotNull cqlParser.WithClauseContext ctx){
  AliasedQuerySource aqs=(AliasedQuerySource)visit(ctx.aliasedQuerySource());
  libraryBuilder.peekQueryContext().addRelatedQuerySource(aqs);
  try {
    Expression expression=(Expression)visit(ctx.expression());
    DataTypes.verifyType(expression.getResultType(),libraryBuilder.resolveTypeName(""String_Node_Str"",""String_Node_Str""));
    RelationshipClause result=of.createWith();
    result.withExpression(aqs.getExpression()).withAlias(aqs.getAlias()).withSuchThat(expression);
    result.setResultType(aqs.getResultType());
    return result;
  }
  finally {
    libraryBuilder.peekQueryContext().removeQuerySource(aqs);
  }
}"
10987,"@Override public Object visitQuery(@NotNull cqlParser.QueryContext ctx){
  QueryContext queryContext=new QueryContext();
  libraryBuilder.pushQueryContext(queryContext);
  try {
    List<AliasedQuerySource> sources;
    queryContext.enterSourceClause();
    try {
      sources=(List<AliasedQuerySource>)visit(ctx.sourceClause());
    }
  finally {
      queryContext.exitSourceClause();
    }
    queryContext.addQuerySources(sources);
    boolean expressionContextPushed=false;
    if (libraryBuilder.inPopulationContext() && queryContext.referencesPatientContext()) {
      libraryBuilder.pushExpressionContext(""String_Node_Str"");
      expressionContextPushed=true;
    }
    try {
      List<LetClause> dfcx=ctx.letClause() != null ? (List<LetClause>)visit(ctx.letClause()) : null;
      List<RelationshipClause> qicx=new ArrayList<>();
      if (ctx.queryInclusionClause() != null) {
        for (        cqlParser.QueryInclusionClauseContext queryInclusionClauseContext : ctx.queryInclusionClause()) {
          qicx.add((RelationshipClause)visit(queryInclusionClauseContext));
        }
      }
      Expression where=ctx.whereClause() != null ? (Expression)visit(ctx.whereClause()) : null;
      if (dateRangeOptimization && where != null) {
        for (        AliasedQuerySource aqs : sources) {
          where=optimizeDateRangeInQuery(where,aqs);
        }
      }
      ReturnClause ret=ctx.returnClause() != null ? (ReturnClause)visit(ctx.returnClause()) : null;
      if ((ret == null) && (sources.size() > 1)) {
        ret=of.createReturnClause().withDistinct(true);
        Tuple returnExpression=of.createTuple();
        TupleType returnType=new TupleType();
        for (        AliasedQuerySource aqs : sources) {
          TupleElement element=of.createTupleElement().withName(aqs.getAlias()).withValue(of.createAliasRef().withName(aqs.getAlias()));
          DataType sourceType=aqs.getResultType() instanceof ListType ? ((ListType)aqs.getResultType()).getElementType() : aqs.getResultType();
          element.getValue().setResultType(sourceType);
          element.setResultType(element.getValue().getResultType());
          returnType.addElement(new TupleTypeElement(element.getName(),element.getResultType()));
          returnExpression.getElement().add(element);
        }
        returnExpression.setResultType(queryContext.isSingular() ? returnType : new ListType(returnType));
        ret.setExpression(returnExpression);
        ret.setResultType(returnExpression.getResultType());
      }
      queryContext.removeQuerySources(sources);
      if (dfcx != null) {
        queryContext.removeLetClauses(dfcx);
      }
      DataType queryResultType=ret == null ? sources.get(0).getResultType() : ret.getResultType();
      queryContext.setResultElementType(queryContext.isSingular() ? null : ((ListType)queryResultType).getElementType());
      SortClause sort=null;
      if (ctx.sortClause() != null) {
        if (queryContext.isSingular()) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        queryContext.enterSortClause();
        try {
          sort=(SortClause)visit(ctx.sortClause());
          for (          SortByItem sortByItem : sort.getBy()) {
            if (sortByItem instanceof ByDirection) {
              libraryBuilder.verifyComparable(queryContext.getResultElementType());
            }
 else {
              libraryBuilder.verifyComparable(sortByItem.getResultType());
            }
          }
        }
  finally {
          queryContext.exitSortClause();
        }
      }
      Query query=of.createQuery().withSource(sources).withLet(dfcx).withRelationship(qicx).withWhere(where).withReturn(ret).withSort(sort);
      query.setResultType(queryResultType);
      return query;
    }
  finally {
      if (expressionContextPushed) {
        libraryBuilder.popExpressionContext();
      }
    }
  }
  finally {
    libraryBuilder.popQueryContext();
  }
}","@Override public Object visitQuery(@NotNull cqlParser.QueryContext ctx){
  QueryContext queryContext=new QueryContext();
  libraryBuilder.pushQueryContext(queryContext);
  try {
    List<AliasedQuerySource> sources;
    queryContext.enterSourceClause();
    try {
      sources=(List<AliasedQuerySource>)visit(ctx.sourceClause());
    }
  finally {
      queryContext.exitSourceClause();
    }
    queryContext.addPrimaryQuerySources(sources);
    boolean expressionContextPushed=false;
    if (libraryBuilder.inPopulationContext() && queryContext.referencesPatientContext()) {
      libraryBuilder.pushExpressionContext(""String_Node_Str"");
      expressionContextPushed=true;
    }
    try {
      List<LetClause> dfcx=ctx.letClause() != null ? (List<LetClause>)visit(ctx.letClause()) : null;
      List<RelationshipClause> qicx=new ArrayList<>();
      if (ctx.queryInclusionClause() != null) {
        for (        cqlParser.QueryInclusionClauseContext queryInclusionClauseContext : ctx.queryInclusionClause()) {
          qicx.add((RelationshipClause)visit(queryInclusionClauseContext));
        }
      }
      Expression where=ctx.whereClause() != null ? (Expression)visit(ctx.whereClause()) : null;
      if (dateRangeOptimization && where != null) {
        for (        AliasedQuerySource aqs : sources) {
          where=optimizeDateRangeInQuery(where,aqs);
        }
      }
      ReturnClause ret=ctx.returnClause() != null ? (ReturnClause)visit(ctx.returnClause()) : null;
      if ((ret == null) && (sources.size() > 1)) {
        ret=of.createReturnClause().withDistinct(true);
        Tuple returnExpression=of.createTuple();
        TupleType returnType=new TupleType();
        for (        AliasedQuerySource aqs : sources) {
          TupleElement element=of.createTupleElement().withName(aqs.getAlias()).withValue(of.createAliasRef().withName(aqs.getAlias()));
          DataType sourceType=aqs.getResultType() instanceof ListType ? ((ListType)aqs.getResultType()).getElementType() : aqs.getResultType();
          element.getValue().setResultType(sourceType);
          element.setResultType(element.getValue().getResultType());
          returnType.addElement(new TupleTypeElement(element.getName(),element.getResultType()));
          returnExpression.getElement().add(element);
        }
        returnExpression.setResultType(queryContext.isSingular() ? returnType : new ListType(returnType));
        ret.setExpression(returnExpression);
        ret.setResultType(returnExpression.getResultType());
      }
      queryContext.removeQuerySources(sources);
      if (dfcx != null) {
        queryContext.removeLetClauses(dfcx);
      }
      DataType queryResultType=ret == null ? sources.get(0).getResultType() : ret.getResultType();
      queryContext.setResultElementType(queryContext.isSingular() ? null : ((ListType)queryResultType).getElementType());
      SortClause sort=null;
      if (ctx.sortClause() != null) {
        if (queryContext.isSingular()) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        queryContext.enterSortClause();
        try {
          sort=(SortClause)visit(ctx.sortClause());
          for (          SortByItem sortByItem : sort.getBy()) {
            if (sortByItem instanceof ByDirection) {
              libraryBuilder.verifyComparable(queryContext.getResultElementType());
            }
 else {
              libraryBuilder.verifyComparable(sortByItem.getResultType());
            }
          }
        }
  finally {
          queryContext.exitSortClause();
        }
      }
      Query query=of.createQuery().withSource(sources).withLet(dfcx).withRelationship(qicx).withWhere(where).withReturn(ret).withSort(sort);
      query.setResultType(queryResultType);
      return query;
    }
  finally {
      if (expressionContextPushed) {
        libraryBuilder.popExpressionContext();
      }
    }
  }
  finally {
    libraryBuilder.popQueryContext();
  }
}"
10988,"@Override public Object visitWithoutClause(@NotNull cqlParser.WithoutClauseContext ctx){
  AliasedQuerySource aqs=(AliasedQuerySource)visit(ctx.aliasedQuerySource());
  libraryBuilder.peekQueryContext().addQuerySource(aqs);
  try {
    Expression expression=(Expression)visit(ctx.expression());
    DataTypes.verifyType(expression.getResultType(),libraryBuilder.resolveTypeName(""String_Node_Str"",""String_Node_Str""));
    RelationshipClause result=of.createWithout();
    result.withExpression(aqs.getExpression()).withAlias(aqs.getAlias()).withSuchThat(expression);
    result.setResultType(aqs.getResultType());
    return result;
  }
  finally {
    libraryBuilder.peekQueryContext().removeQuerySource(aqs);
  }
}","@Override public Object visitWithoutClause(@NotNull cqlParser.WithoutClauseContext ctx){
  AliasedQuerySource aqs=(AliasedQuerySource)visit(ctx.aliasedQuerySource());
  libraryBuilder.peekQueryContext().addRelatedQuerySource(aqs);
  try {
    Expression expression=(Expression)visit(ctx.expression());
    DataTypes.verifyType(expression.getResultType(),libraryBuilder.resolveTypeName(""String_Node_Str"",""String_Node_Str""));
    RelationshipClause result=of.createWithout();
    result.withExpression(aqs.getExpression()).withAlias(aqs.getAlias()).withSuchThat(expression);
    result.setResultType(aqs.getResultType());
    return result;
  }
  finally {
    libraryBuilder.peekQueryContext().removeQuerySource(aqs);
  }
}"
10989,"private AliasedQuerySource enterQueryContext(Expression target){
  QueryContext queryContext=new QueryContext();
  queryContext.setIsImplicit(true);
  List<AliasedQuerySource> sources=new ArrayList<>();
  AliasedQuerySource source=of.createAliasedQuerySource().withExpression(target).withAlias(""String_Node_Str"");
  source.setResultType(target.getResultType());
  sources.add(source);
  queryContext.addQuerySources(sources);
  builder.pushQueryContext(queryContext);
  return source;
}","private AliasedQuerySource enterQueryContext(Expression target){
  QueryContext queryContext=new QueryContext();
  queryContext.setIsImplicit(true);
  List<AliasedQuerySource> sources=new ArrayList<>();
  AliasedQuerySource source=of.createAliasedQuerySource().withExpression(target).withAlias(""String_Node_Str"");
  source.setResultType(target.getResultType());
  sources.add(source);
  queryContext.addPrimaryQuerySources(sources);
  builder.pushQueryContext(queryContext);
  return source;
}"
10990,"public Expression convertExpression(Expression expression,Conversion conversion){
  if (conversion.isCast() && (conversion.getFromType().isSuperTypeOf(conversion.getToType()) || conversion.getFromType().isCompatibleWith(conversion.getToType()))) {
    As castedOperand=(As)of.createAs().withOperand(expression).withResultType(conversion.getToType());
    castedOperand.setAsTypeSpecifier(dataTypeToTypeSpecifier(castedOperand.getResultType()));
    if (castedOperand.getResultType() instanceof NamedType) {
      castedOperand.setAsType(dataTypeToQName(castedOperand.getResultType()));
    }
    return castedOperand;
  }
 else   if (conversion.isCast() && conversion.getConversion() != null && (conversion.getFromType().isSuperTypeOf(conversion.getConversion().getFromType()) || conversion.getFromType().isCompatibleWith(conversion.getConversion().getFromType()))) {
    As castedOperand=(As)of.createAs().withOperand(expression).withResultType(conversion.getConversion().getFromType());
    castedOperand.setAsTypeSpecifier(dataTypeToTypeSpecifier(castedOperand.getResultType()));
    if (castedOperand.getResultType() instanceof NamedType) {
      castedOperand.setAsType(dataTypeToQName(castedOperand.getResultType()));
    }
    return convertExpression(castedOperand,conversion.getConversion());
  }
 else   if (conversion.isListConversion()) {
    return convertListExpression(expression,conversion);
  }
 else   if (conversion.isListDemotion()) {
    return demoteListExpression(expression,conversion);
  }
 else   if (conversion.isListPromotion()) {
    return promoteListExpression(expression,conversion);
  }
 else   if (conversion.isIntervalConversion()) {
    return convertIntervalExpression(expression,conversion);
  }
 else   if (conversion.getOperator() != null) {
    FunctionRef functionRef=(FunctionRef)of.createFunctionRef().withLibraryName(conversion.getOperator().getLibraryName()).withName(conversion.getOperator().getName()).withOperand(expression);
    Expression systemFunction=systemFunctionResolver.resolveSystemFunction(functionRef);
    if (systemFunction != null) {
      return systemFunction;
    }
    resolveCall(functionRef.getLibraryName(),functionRef.getName(),new FunctionRefInvocation(functionRef));
    return functionRef;
  }
 else {
    if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToBoolean().withOperand(expression).withResultType(conversion.getToType());
    }
 else     if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToInteger().withOperand(expression).withResultType(conversion.getToType());
    }
 else     if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToDecimal().withOperand(expression).withResultType(conversion.getToType());
    }
 else     if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToString().withOperand(expression).withResultType(conversion.getToType());
    }
 else     if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToDateTime().withOperand(expression).withResultType(conversion.getToType());
    }
 else     if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToTime().withOperand(expression).withResultType(conversion.getToType());
    }
 else     if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToQuantity().withOperand(expression).withResultType(conversion.getToType());
    }
 else {
      Convert convertedOperand=(Convert)of.createConvert().withOperand(expression).withResultType(conversion.getToType());
      if (convertedOperand.getResultType() instanceof NamedType) {
        convertedOperand.setToType(dataTypeToQName(convertedOperand.getResultType()));
      }
 else {
        convertedOperand.setToTypeSpecifier(dataTypeToTypeSpecifier(convertedOperand.getResultType()));
      }
      return convertedOperand;
    }
  }
}","public Expression convertExpression(Expression expression,Conversion conversion){
  if (conversion.isCast() && (conversion.getFromType().isSuperTypeOf(conversion.getToType()) || conversion.getFromType().isCompatibleWith(conversion.getToType()))) {
    As castedOperand=buildAs(expression,conversion.getToType());
    return castedOperand;
  }
 else   if (conversion.isCast() && conversion.getConversion() != null && (conversion.getFromType().isSuperTypeOf(conversion.getConversion().getFromType()) || conversion.getFromType().isCompatibleWith(conversion.getConversion().getFromType()))) {
    As castedOperand=buildAs(expression,conversion.getConversion().getFromType());
    Expression result=convertExpression(castedOperand,conversion.getConversion());
    if (conversion.hasAlternativeConversions()) {
      Case caseResult=of.createCase();
      caseResult.setResultType(result.getResultType());
      caseResult.withCaseItem(of.createCaseItem().withWhen(buildIs(expression,conversion.getConversion().getFromType())).withThen(result));
      for (      Conversion alternative : conversion.getAlternativeConversions()) {
        caseResult.withCaseItem(of.createCaseItem().withWhen(buildIs(expression,alternative.getFromType())).withThen(convertExpression(buildAs(expression,alternative.getFromType()),alternative)));
      }
      caseResult.withElse(buildNull(result.getResultType()));
      result=caseResult;
    }
    return result;
  }
 else   if (conversion.isListConversion()) {
    return convertListExpression(expression,conversion);
  }
 else   if (conversion.isListDemotion()) {
    return demoteListExpression(expression,conversion);
  }
 else   if (conversion.isListPromotion()) {
    return promoteListExpression(expression,conversion);
  }
 else   if (conversion.isIntervalConversion()) {
    return convertIntervalExpression(expression,conversion);
  }
 else   if (conversion.getOperator() != null) {
    FunctionRef functionRef=(FunctionRef)of.createFunctionRef().withLibraryName(conversion.getOperator().getLibraryName()).withName(conversion.getOperator().getName()).withOperand(expression);
    Expression systemFunction=systemFunctionResolver.resolveSystemFunction(functionRef);
    if (systemFunction != null) {
      return systemFunction;
    }
    resolveCall(functionRef.getLibraryName(),functionRef.getName(),new FunctionRefInvocation(functionRef));
    return functionRef;
  }
 else {
    if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToBoolean().withOperand(expression).withResultType(conversion.getToType());
    }
 else     if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToInteger().withOperand(expression).withResultType(conversion.getToType());
    }
 else     if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToDecimal().withOperand(expression).withResultType(conversion.getToType());
    }
 else     if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToString().withOperand(expression).withResultType(conversion.getToType());
    }
 else     if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToDateTime().withOperand(expression).withResultType(conversion.getToType());
    }
 else     if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToTime().withOperand(expression).withResultType(conversion.getToType());
    }
 else     if (conversion.getToType().equals(resolveTypeName(""String_Node_Str"",""String_Node_Str""))) {
      return (Expression)of.createToQuantity().withOperand(expression).withResultType(conversion.getToType());
    }
 else {
      Convert convertedOperand=(Convert)of.createConvert().withOperand(expression).withResultType(conversion.getToType());
      if (convertedOperand.getResultType() instanceof NamedType) {
        convertedOperand.setToType(dataTypeToQName(convertedOperand.getResultType()));
      }
 else {
        convertedOperand.setToTypeSpecifier(dataTypeToTypeSpecifier(convertedOperand.getResultType()));
      }
      return convertedOperand;
    }
  }
}"
10991,"public Conversion findChoiceConversion(ChoiceType fromType,DataType toType,OperatorMap operatorMap){
  DataType selectedChoice=null;
  Conversion result=null;
  for (  DataType choice : fromType.getTypes()) {
    Conversion choiceConversion=findConversion(choice,toType,true,operatorMap);
    if (choiceConversion != null) {
      if (selectedChoice != null) {
        throw new IllegalArgumentException(String.format(""String_Node_Str"",selectedChoice.toString(),fromType.toString(),toType.toString()));
      }
 else {
        selectedChoice=choice;
        result=new Conversion(fromType,toType,choiceConversion);
      }
    }
  }
  return result;
}","public Conversion findChoiceConversion(ChoiceType fromType,DataType toType,OperatorMap operatorMap){
  Conversion result=null;
  for (  DataType choice : fromType.getTypes()) {
    Conversion choiceConversion=findConversion(choice,toType,true,operatorMap);
    if (choiceConversion != null) {
      if (result == null) {
        result=new Conversion(fromType,toType,choiceConversion);
      }
 else {
        result.addAlternativeConversion(choiceConversion);
      }
    }
  }
  return result;
}"
10992,"public static Cql2ElmVisitor visitFile(String fileName,boolean inClassPath) throws IOException {
  InputStream is=inClassPath ? TestUtils.class.getResourceAsStream(fileName) : new FileInputStream(fileName);
  TokenStream tokens=parseANTLRInputStream(new ANTLRInputStream(is));
  ParseTree tree=parseTokenStream(tokens);
  Cql2ElmVisitor visitor=createElmTranslatorVisitor(tokens,tree);
  visitor.visit(tree);
  return visitor;
}","public static Object visitFile(String fileName) throws IOException {
  File file=new File(URLDecoder.decode(Cql2ElmVisitorTest.class.getResource(fileName).getFile(),""String_Node_Str""));
  CqlTranslator translator=CqlTranslator.fromFile(file,getModelManager(),getLibraryManager());
  ensureValid(translator);
  return translator.toObject();
}"
10993,"public static Object visitData(String cqlData,boolean enableAnnotations,boolean enableDateRangeOptimization){
  List<CqlTranslator.Options> options=new ArrayList<>();
  if (enableAnnotations) {
    options.add(CqlTranslator.Options.EnableAnnotations);
  }
  if (enableDateRangeOptimization) {
    options.add(CqlTranslator.Options.EnableDateRangeOptimization);
  }
  ModelManager modelManager=new ModelManager();
  CqlTranslator translator=CqlTranslator.fromText(cqlData,modelManager,new LibraryManager(modelManager),options.toArray(new CqlTranslator.Options[options.size()]));
  ensureValid(translator);
  return translator.toObject();
}","public static Object visitData(String cqlData,boolean enableAnnotations,boolean enableDateRangeOptimization){
  List<CqlTranslator.Options> options=new ArrayList<>();
  if (enableAnnotations) {
    options.add(CqlTranslator.Options.EnableAnnotations);
  }
  if (enableDateRangeOptimization) {
    options.add(CqlTranslator.Options.EnableDateRangeOptimization);
  }
  CqlTranslator translator=CqlTranslator.fromText(cqlData,getModelManager(),getLibraryManager(),options.toArray(new CqlTranslator.Options[options.size()]));
  ensureValid(translator);
  return translator.toObject();
}"
10994,"public static Library visitLibrary(String cqlLibrary){
  ModelManager modelManager=new ModelManager();
  CqlTranslator translator=CqlTranslator.fromText(cqlLibrary,modelManager,new LibraryManager(modelManager));
  ensureValid(translator);
  return translator.toELM();
}","public static Library visitLibrary(String cqlLibrary){
  CqlTranslator translator=CqlTranslator.fromText(cqlLibrary,getModelManager(),getLibraryManager());
  ensureValid(translator);
  return translator.toELM();
}"
10995,"@Override public Object visitDateTimeLiteral(@NotNull cqlParser.DateTimeLiteralContext ctx){
  String input=ctx.getText();
  if (input.startsWith(""String_Node_Str"")) {
    input=input.substring(1);
  }
  Pattern dateTimePattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=dateTimePattern.matcher(input);
  if (matcher.matches()) {
    try {
      GregorianCalendar calendar=(GregorianCalendar)GregorianCalendar.getInstance();
      DateTime result=of.createDateTime();
      int year=Integer.parseInt(matcher.group(1));
      int month=-1;
      int day=-1;
      int hour=-1;
      int minute=-1;
      int second=-1;
      int millisecond=-1;
      result.setYear(libraryBuilder.createLiteral(year));
      if (matcher.group(3) != null) {
        month=Integer.parseInt(matcher.group(3));
        if (month < 0 || month > 12) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
        }
        result.setMonth(libraryBuilder.createLiteral(month));
      }
      if (matcher.group(5) != null) {
        day=Integer.parseInt(matcher.group(5));
        int maxDay=31;
switch (month) {
case 2:
          maxDay=calendar.isLeapYear(year) ? 29 : 28;
        break;
case 4:
case 6:
case 9:
case 11:
      maxDay=30;
    break;
default :
  break;
}
if (day < 0 || day > maxDay) {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
result.setDay(libraryBuilder.createLiteral(day));
}
if (matcher.group(10) != null) {
hour=Integer.parseInt(matcher.group(10));
if (hour < 0 || hour > 24) {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
result.setHour(libraryBuilder.createLiteral(hour));
}
if (matcher.group(12) != null) {
minute=Integer.parseInt(matcher.group(12));
if (minute < 0 || minute >= 60 || (hour == 24 && minute > 0)) {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
result.setMinute(libraryBuilder.createLiteral(minute));
}
if (matcher.group(14) != null) {
second=Integer.parseInt(matcher.group(14));
if (second < 0 || second >= 60 || (hour == 24 && second > 0)) {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
result.setSecond(libraryBuilder.createLiteral(second));
}
if (matcher.group(16) != null) {
millisecond=Integer.parseInt(matcher.group(16));
if (millisecond < 0 || (hour == 24 && millisecond > 0)) {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
result.setMillisecond(libraryBuilder.createLiteral(millisecond));
}
if ((matcher.group(7) != null && matcher.group(7).equals(""String_Node_Str"")) || ((matcher.group(18) != null) && matcher.group(18).equals(""String_Node_Str""))) {
result.setTimezoneOffset(libraryBuilder.createLiteral(0.0));
}
if (matcher.group(20) != null) {
int offsetPolarity=matcher.group(20).equals(""String_Node_Str"") ? 1 : 0;
if (matcher.group(23) != null) {
int hourOffset=Integer.parseInt(matcher.group(21));
if (hourOffset < 0 || hourOffset > 14) {
  throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
int minuteOffset=Integer.parseInt(matcher.group(23));
if (minuteOffset < 0 || minuteOffset >= 60 || (hourOffset == 14 && minuteOffset > 0)) {
  throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
result.setTimezoneOffset(libraryBuilder.createLiteral((double)(hourOffset + (minuteOffset / 60)) * offsetPolarity));
}
 else {
if (matcher.group(21) != null) {
  int hourOffset=Integer.parseInt(matcher.group(21));
  if (hourOffset < 0 || hourOffset > 14) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
  }
  result.setTimezoneOffset(libraryBuilder.createLiteral((double)(hourOffset * offsetPolarity)));
}
}
}
result.setResultType(libraryBuilder.resolveTypeName(""String_Node_Str"",""String_Node_Str""));
return result;
}
 catch (RuntimeException e) {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input),e);
}
}
 else {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
}","@Override public Object visitDateTimeLiteral(@NotNull cqlParser.DateTimeLiteralContext ctx){
  String input=ctx.getText();
  if (input.startsWith(""String_Node_Str"")) {
    input=input.substring(1);
  }
  Pattern dateTimePattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=dateTimePattern.matcher(input);
  if (matcher.matches()) {
    try {
      GregorianCalendar calendar=(GregorianCalendar)GregorianCalendar.getInstance();
      DateTime result=of.createDateTime();
      int year=Integer.parseInt(matcher.group(1));
      int month=-1;
      int day=-1;
      int hour=-1;
      int minute=-1;
      int second=-1;
      int millisecond=-1;
      result.setYear(libraryBuilder.createLiteral(year));
      if (matcher.group(3) != null) {
        month=Integer.parseInt(matcher.group(3));
        if (month < 0 || month > 12) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
        }
        result.setMonth(libraryBuilder.createLiteral(month));
      }
      if (matcher.group(5) != null) {
        day=Integer.parseInt(matcher.group(5));
        int maxDay=31;
switch (month) {
case 2:
          maxDay=calendar.isLeapYear(year) ? 29 : 28;
        break;
case 4:
case 6:
case 9:
case 11:
      maxDay=30;
    break;
default :
  break;
}
if (day < 0 || day > maxDay) {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
result.setDay(libraryBuilder.createLiteral(day));
}
if (matcher.group(10) != null) {
hour=Integer.parseInt(matcher.group(10));
if (hour < 0 || hour > 24) {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
result.setHour(libraryBuilder.createLiteral(hour));
}
if (matcher.group(12) != null) {
minute=Integer.parseInt(matcher.group(12));
if (minute < 0 || minute >= 60 || (hour == 24 && minute > 0)) {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
result.setMinute(libraryBuilder.createLiteral(minute));
}
if (matcher.group(14) != null) {
second=Integer.parseInt(matcher.group(14));
if (second < 0 || second >= 60 || (hour == 24 && second > 0)) {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
result.setSecond(libraryBuilder.createLiteral(second));
}
if (matcher.group(16) != null) {
millisecond=Integer.parseInt(matcher.group(16));
if (millisecond < 0 || (hour == 24 && millisecond > 0)) {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
result.setMillisecond(libraryBuilder.createLiteral(millisecond));
}
if ((matcher.group(7) != null && matcher.group(7).equals(""String_Node_Str"")) || ((matcher.group(18) != null) && matcher.group(18).equals(""String_Node_Str""))) {
result.setTimezoneOffset(libraryBuilder.createLiteral(0.0));
}
if (matcher.group(20) != null) {
int offsetPolarity=matcher.group(20).equals(""String_Node_Str"") ? 1 : -1;
if (matcher.group(23) != null) {
int hourOffset=Integer.parseInt(matcher.group(21));
if (hourOffset < 0 || hourOffset > 14) {
  throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
int minuteOffset=Integer.parseInt(matcher.group(23));
if (minuteOffset < 0 || minuteOffset >= 60 || (hourOffset == 14 && minuteOffset > 0)) {
  throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
result.setTimezoneOffset(libraryBuilder.createLiteral((double)(hourOffset + (minuteOffset / 60)) * offsetPolarity));
}
 else {
if (matcher.group(21) != null) {
  int hourOffset=Integer.parseInt(matcher.group(21));
  if (hourOffset < 0 || hourOffset > 14) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
  }
  result.setTimezoneOffset(libraryBuilder.createLiteral((double)(hourOffset * offsetPolarity)));
}
}
}
result.setResultType(libraryBuilder.resolveTypeName(""String_Node_Str"",""String_Node_Str""));
return result;
}
 catch (RuntimeException e) {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input),e);
}
}
 else {
throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
}
}"
10996,"@Override public Object visitTimeLiteral(@NotNull cqlParser.TimeLiteralContext ctx){
  String input=ctx.getText();
  if (input.startsWith(""String_Node_Str"")) {
    input=input.substring(1);
  }
  Pattern dateTimePattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=dateTimePattern.matcher(input);
  if (matcher.matches()) {
    try {
      Time result=of.createTime();
      int hour=Integer.parseInt(matcher.group(2));
      int minute=-1;
      int second=-1;
      int millisecond=-1;
      if (hour < 0 || hour > 24) {
        throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
      }
      result.setHour(libraryBuilder.createLiteral(hour));
      if (matcher.group(4) != null) {
        minute=Integer.parseInt(matcher.group(4));
        if (minute < 0 || minute >= 60 || (hour == 24 && minute > 0)) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
        }
        result.setMinute(libraryBuilder.createLiteral(minute));
      }
      if (matcher.group(6) != null) {
        second=Integer.parseInt(matcher.group(6));
        if (second < 0 || second >= 60 || (hour == 24 && second > 0)) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
        }
        result.setSecond(libraryBuilder.createLiteral(second));
      }
      if (matcher.group(8) != null) {
        millisecond=Integer.parseInt(matcher.group(8));
        if (millisecond < 0 || (hour == 24 && millisecond > 0)) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
        }
        result.setMillisecond(libraryBuilder.createLiteral(millisecond));
      }
      if (matcher.group(10) != null && matcher.group(10).equals(""String_Node_Str"")) {
        result.setTimezoneOffset(libraryBuilder.createLiteral(0.0));
      }
      if (matcher.group(12) != null) {
        int offsetPolarity=matcher.group(12).equals(""String_Node_Str"") ? 1 : 0;
        if (matcher.group(15) != null) {
          int hourOffset=Integer.parseInt(matcher.group(13));
          if (hourOffset < 0 || hourOffset > 14) {
            throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
          }
          int minuteOffset=Integer.parseInt(matcher.group(15));
          if (minuteOffset < 0 || minuteOffset >= 60 || (hourOffset == 14 && minuteOffset > 0)) {
            throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
          }
          result.setTimezoneOffset(libraryBuilder.createLiteral((double)(hourOffset + (minuteOffset / 60)) * offsetPolarity));
        }
 else {
          if (matcher.group(13) != null) {
            int hourOffset=Integer.parseInt(matcher.group(13));
            if (hourOffset < 0 || hourOffset > 14) {
              throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
            }
            result.setTimezoneOffset(libraryBuilder.createLiteral((double)(hourOffset * offsetPolarity)));
          }
        }
      }
      result.setResultType(libraryBuilder.resolveTypeName(""String_Node_Str"",""String_Node_Str""));
      return result;
    }
 catch (    RuntimeException e) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",input),e);
    }
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
  }
}","@Override public Object visitTimeLiteral(@NotNull cqlParser.TimeLiteralContext ctx){
  String input=ctx.getText();
  if (input.startsWith(""String_Node_Str"")) {
    input=input.substring(1);
  }
  Pattern dateTimePattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=dateTimePattern.matcher(input);
  if (matcher.matches()) {
    try {
      Time result=of.createTime();
      int hour=Integer.parseInt(matcher.group(2));
      int minute=-1;
      int second=-1;
      int millisecond=-1;
      if (hour < 0 || hour > 24) {
        throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
      }
      result.setHour(libraryBuilder.createLiteral(hour));
      if (matcher.group(4) != null) {
        minute=Integer.parseInt(matcher.group(4));
        if (minute < 0 || minute >= 60 || (hour == 24 && minute > 0)) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
        }
        result.setMinute(libraryBuilder.createLiteral(minute));
      }
      if (matcher.group(6) != null) {
        second=Integer.parseInt(matcher.group(6));
        if (second < 0 || second >= 60 || (hour == 24 && second > 0)) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
        }
        result.setSecond(libraryBuilder.createLiteral(second));
      }
      if (matcher.group(8) != null) {
        millisecond=Integer.parseInt(matcher.group(8));
        if (millisecond < 0 || (hour == 24 && millisecond > 0)) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
        }
        result.setMillisecond(libraryBuilder.createLiteral(millisecond));
      }
      if (matcher.group(10) != null && matcher.group(10).equals(""String_Node_Str"")) {
        result.setTimezoneOffset(libraryBuilder.createLiteral(0.0));
      }
      if (matcher.group(12) != null) {
        int offsetPolarity=matcher.group(12).equals(""String_Node_Str"") ? 1 : -1;
        if (matcher.group(15) != null) {
          int hourOffset=Integer.parseInt(matcher.group(13));
          if (hourOffset < 0 || hourOffset > 14) {
            throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
          }
          int minuteOffset=Integer.parseInt(matcher.group(15));
          if (minuteOffset < 0 || minuteOffset >= 60 || (hourOffset == 14 && minuteOffset > 0)) {
            throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
          }
          result.setTimezoneOffset(libraryBuilder.createLiteral((double)(hourOffset + (minuteOffset / 60)) * offsetPolarity));
        }
 else {
          if (matcher.group(13) != null) {
            int hourOffset=Integer.parseInt(matcher.group(13));
            if (hourOffset < 0 || hourOffset > 14) {
              throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
            }
            result.setTimezoneOffset(libraryBuilder.createLiteral((double)(hourOffset * offsetPolarity)));
          }
        }
      }
      result.setResultType(libraryBuilder.resolveTypeName(""String_Node_Str"",""String_Node_Str""));
      return result;
    }
 catch (    RuntimeException e) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",input),e);
    }
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",input));
  }
}"
10997,"private void runSemanticTest(String testFileName,int expectedErrors) throws IOException {
  File translationTestFile=new File(URLDecoder.decode(Cql2ElmVisitorTest.class.getResource(testFileName).getFile(),""String_Node_Str""));
  ModelManager modelManager=new ModelManager();
  CqlTranslator translator=CqlTranslator.fromFile(translationTestFile,modelManager,new LibraryManager(modelManager));
  for (  CqlTranslatorException error : translator.getErrors()) {
    System.err.println(String.format(""String_Node_Str"",error.getLocator().getStartLine(),error.getLocator().getStartChar(),error.getMessage()));
  }
  assertThat(translator.getErrors().size(),is(expectedErrors));
}","private void runSemanticTest(String testFileName,int expectedErrors) throws IOException {
  TestUtils.runSemanticTest(testFileName,expectedErrors);
}"
10998,"public void addInclude(IncludeDef includeDef){
  if (library.getIdentifier() == null || library.getIdentifier().getId() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (library.getIncludes() == null) {
    library.setIncludes(of.createLibraryIncludes());
  }
  library.getIncludes().getDef().add(includeDef);
  translatedLibrary.add(includeDef);
  VersionedIdentifier libraryIdentifier=new VersionedIdentifier().withId(includeDef.getPath()).withVersion(includeDef.getVersion());
  TranslatedLibrary referencedLibrary=libraryManager.resolveLibrary(libraryIdentifier,errors);
  libraries.put(includeDef.getLocalIdentifier(),referencedLibrary);
  loadConversionMap(referencedLibrary);
}","public void addInclude(IncludeDef includeDef){
  if (library.getIdentifier() == null || library.getIdentifier().getId() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (library.getIncludes() == null) {
    library.setIncludes(of.createLibraryIncludes());
  }
  library.getIncludes().getDef().add(includeDef);
  translatedLibrary.add(includeDef);
  VersionedIdentifier libraryIdentifier=new VersionedIdentifier().withId(includeDef.getPath()).withVersion(includeDef.getVersion());
  ArrayList<CqlTranslatorException> errors=new ArrayList<CqlTranslatorException>();
  TranslatedLibrary referencedLibrary=libraryManager.resolveLibrary(libraryIdentifier,errors);
  for (  CqlTranslatorException error : errors) {
    this.addException(error);
  }
  libraries.put(includeDef.getLocalIdentifier(),referencedLibrary);
  loadConversionMap(referencedLibrary);
}"
10999,"private TranslatedLibrary translateLibrary(VersionedIdentifier libraryIdentifier,List<CqlTranslatorException> errors){
  InputStream librarySource=null;
  try {
    librarySource=librarySourceLoader.getLibrarySource(libraryIdentifier);
  }
 catch (  Exception e) {
    throw new CqlTranslatorIncludeException(e.getMessage(),libraryIdentifier.getId(),libraryIdentifier.getVersion(),e);
  }
  if (librarySource == null) {
    throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion());
  }
  try {
    CqlTranslator translator=CqlTranslator.fromStream(librarySource,modelManager,this);
    if (errors != null) {
      errors.addAll(translator.getErrors());
    }
    TranslatedLibrary result=translator.getTranslatedLibrary();
    if (libraryIdentifier.getVersion() != null && !libraryIdentifier.getVersion().equals(result.getIdentifier().getVersion())) {
      throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion(),result.getIdentifier().getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion());
    }
    return result;
  }
 catch (  IOException e) {
    throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion(),e);
  }
}","private TranslatedLibrary translateLibrary(VersionedIdentifier libraryIdentifier,List<CqlTranslatorException> errors){
  InputStream librarySource=null;
  try {
    librarySource=librarySourceLoader.getLibrarySource(libraryIdentifier);
  }
 catch (  Exception e) {
    throw new CqlTranslatorIncludeException(e.getMessage(),libraryIdentifier.getId(),libraryIdentifier.getVersion(),e);
  }
  if (librarySource == null) {
    throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion());
  }
  try {
    CqlTranslator translator=CqlTranslator.fromStream(librarySource,modelManager,this);
    if (errors != null) {
      errors.addAll(translator.getExceptions());
    }
    TranslatedLibrary result=translator.getTranslatedLibrary();
    if (libraryIdentifier.getVersion() != null && !libraryIdentifier.getVersion().equals(result.getIdentifier().getVersion())) {
      throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion(),result.getIdentifier().getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion());
    }
    return result;
  }
 catch (  IOException e) {
    throw new CqlTranslatorIncludeException(String.format(""String_Node_Str"",libraryIdentifier.getId(),libraryIdentifier.getVersion()),libraryIdentifier.getId(),libraryIdentifier.getVersion(),e);
  }
}"
11000,"@Override public Retrieve visitRetrieve(@NotNull cqlParser.RetrieveContext ctx){
  String model=parseString(ctx.namedTypeSpecifier().modelIdentifier());
  String label=parseString(ctx.namedTypeSpecifier().identifier());
  DataType dataType=libraryBuilder.resolveTypeName(model,label);
  if (dataType == null) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",label));
  }
  if (!(dataType instanceof ClassType) || !((ClassType)dataType).isRetrievable()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",label));
  }
  ClassType classType=(ClassType)dataType;
  NamedType namedType=classType;
  ModelInfo modelInfo=libraryBuilder.getModel(namedType.getNamespace()).getModelInfo();
  boolean useStrictRetrieveTyping=modelInfo.isStrictRetrieveTyping() != null && modelInfo.isStrictRetrieveTyping();
  Retrieve retrieve=of.createRetrieve().withDataType(libraryBuilder.dataTypeToQName((DataType)namedType)).withTemplateId(classType.getIdentifier());
  if (ctx.terminology() != null) {
    if (ctx.codePath() != null) {
      retrieve.setCodeProperty(parseString(ctx.codePath()));
    }
 else     if (classType.getPrimaryCodePath() != null) {
      retrieve.setCodeProperty(classType.getPrimaryCodePath());
    }
    Property property=null;
    if (retrieve.getCodeProperty() == null) {
      libraryBuilder.recordParsingException(new CqlSemanticException(""String_Node_Str"",useStrictRetrieveTyping ? CqlTranslatorException.ErrorSeverity.Error : CqlTranslatorException.ErrorSeverity.Warning,getTrackBack(ctx)));
    }
 else {
      try {
        DataType codeType=libraryBuilder.resolvePath((DataType)namedType,retrieve.getCodeProperty());
        property=of.createProperty().withPath(retrieve.getCodeProperty());
        property.setResultType(codeType);
      }
 catch (      Exception e) {
        libraryBuilder.recordParsingException(new CqlSemanticException(String.format(""String_Node_Str"",retrieve.getCodeProperty(),namedType.getName()),useStrictRetrieveTyping ? CqlTranslatorException.ErrorSeverity.Error : CqlTranslatorException.ErrorSeverity.Warning,getTrackBack(ctx),e));
      }
    }
    Expression terminology=null;
    if (ctx.terminology().qualifiedIdentifier() != null) {
      List<String> identifiers=(List<String>)visit(ctx.terminology());
      terminology=resolveQualifiedIdentifier(identifiers);
    }
 else {
      terminology=parseExpression(ctx.terminology().expression());
    }
    try {
      Expression in=libraryBuilder.resolveIn(property,terminology);
      if (in instanceof In) {
        retrieve.setCodes(((In)in).getOperand().get(1));
      }
 else       if (in instanceof InValueSet) {
        retrieve.setCodes(((InValueSet)in).getValueset());
      }
 else       if (in instanceof InCodeSystem) {
        retrieve.setCodes(((InCodeSystem)in).getCodesystem());
      }
 else {
        libraryBuilder.recordParsingException(new CqlSemanticException(String.format(""String_Node_Str"",in.getClass().getSimpleName()),useStrictRetrieveTyping ? CqlTranslatorException.ErrorSeverity.Error : CqlTranslatorException.ErrorSeverity.Warning,getTrackBack(ctx)));
      }
    }
 catch (    Exception e) {
      retrieve.setCodes(terminology);
      libraryBuilder.recordParsingException(new CqlSemanticException(""String_Node_Str"",useStrictRetrieveTyping ? CqlTranslatorException.ErrorSeverity.Error : CqlTranslatorException.ErrorSeverity.Warning,getTrackBack(ctx),e));
    }
  }
  retrieves.add(retrieve);
  retrieve.setResultType(new ListType((DataType)namedType));
  return retrieve;
}","@Override public Retrieve visitRetrieve(@NotNull cqlParser.RetrieveContext ctx){
  String model=parseString(ctx.namedTypeSpecifier().modelIdentifier());
  String label=parseString(ctx.namedTypeSpecifier().identifier());
  DataType dataType=libraryBuilder.resolveTypeName(model,label);
  if (dataType == null) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",label));
  }
  if (!(dataType instanceof ClassType) || !((ClassType)dataType).isRetrievable()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",label));
  }
  ClassType classType=(ClassType)dataType;
  NamedType namedType=classType;
  ModelInfo modelInfo=libraryBuilder.getModel(namedType.getNamespace()).getModelInfo();
  boolean useStrictRetrieveTyping=modelInfo.isStrictRetrieveTyping() != null && modelInfo.isStrictRetrieveTyping();
  Retrieve retrieve=of.createRetrieve().withDataType(libraryBuilder.dataTypeToQName((DataType)namedType)).withTemplateId(classType.getIdentifier());
  if (ctx.terminology() != null) {
    if (ctx.codePath() != null) {
      retrieve.setCodeProperty(parseString(ctx.codePath()));
    }
 else     if (classType.getPrimaryCodePath() != null) {
      retrieve.setCodeProperty(classType.getPrimaryCodePath());
    }
    Property property=null;
    if (retrieve.getCodeProperty() == null) {
      libraryBuilder.recordParsingException(new CqlSemanticException(""String_Node_Str"",useStrictRetrieveTyping ? CqlTranslatorException.ErrorSeverity.Error : CqlTranslatorException.ErrorSeverity.Warning,getTrackBack(ctx)));
    }
 else {
      try {
        DataType codeType=libraryBuilder.resolvePath((DataType)namedType,retrieve.getCodeProperty());
        property=of.createProperty().withPath(retrieve.getCodeProperty());
        property.setResultType(codeType);
      }
 catch (      Exception e) {
        libraryBuilder.recordParsingException(new CqlSemanticException(String.format(""String_Node_Str"",retrieve.getCodeProperty(),namedType.getName()),useStrictRetrieveTyping ? CqlTranslatorException.ErrorSeverity.Error : CqlTranslatorException.ErrorSeverity.Warning,getTrackBack(ctx),e));
      }
    }
    Expression terminology=null;
    if (ctx.terminology().qualifiedIdentifier() != null) {
      List<String> identifiers=(List<String>)visit(ctx.terminology());
      terminology=resolveQualifiedIdentifier(identifiers);
    }
 else {
      terminology=parseExpression(ctx.terminology().expression());
    }
    try {
      if (terminology.getResultType() instanceof ListType) {
        Expression in=libraryBuilder.resolveIn(property,terminology);
        if (in instanceof In) {
          retrieve.setCodes(((In)in).getOperand().get(1));
        }
 else         if (in instanceof InValueSet) {
          retrieve.setCodes(((InValueSet)in).getValueset());
        }
 else         if (in instanceof InCodeSystem) {
          retrieve.setCodes(((InCodeSystem)in).getCodesystem());
        }
 else {
          libraryBuilder.recordParsingException(new CqlSemanticException(String.format(""String_Node_Str"",in.getClass().getSimpleName()),useStrictRetrieveTyping ? CqlTranslatorException.ErrorSeverity.Error : CqlTranslatorException.ErrorSeverity.Warning,getTrackBack(ctx)));
        }
      }
 else {
        BinaryExpression equal=of.createEqual().withOperand(property,terminology);
        libraryBuilder.resolveBinaryCall(""String_Node_Str"",""String_Node_Str"",equal);
        retrieve.setCodes(libraryBuilder.resolveToList(equal.getOperand().get(1)));
      }
    }
 catch (    Exception e) {
      retrieve.setCodes(terminology);
      libraryBuilder.recordParsingException(new CqlSemanticException(""String_Node_Str"",useStrictRetrieveTyping ? CqlTranslatorException.ErrorSeverity.Error : CqlTranslatorException.ErrorSeverity.Warning,getTrackBack(ctx),e));
    }
  }
  retrieves.add(retrieve);
  retrieve.setResultType(new ListType((DataType)namedType));
  return retrieve;
}"
