record_number,buggy_code,fixed_code
46001,"public void cellStatusChanged(final Cell cell,final CellStatus status){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      DefaultMutableTreeNode node=cellNodes.get(cell);
      if (status == CellStatus.DISK) {
        if (node != null) {
          logger.warning(""String_Node_Str"" + cell.getName());
          TreeModel m=cellHierarchyTree.getModel();
          ((DefaultTreeModel)m).removeNodeFromParent(node);
          cellNodes.remove(cell);
        }
      }
 else       if (status == CellStatus.RENDERING) {
        if (node == null) {
          logger.warning(""String_Node_Str"" + cell.getName());
          createJTreeNode(cell);
        }
      }
    }
  }
);
}","public void cellStatusChanged(final Cell cell,final CellStatus status){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      DefaultMutableTreeNode node=cellNodes.get(cell);
      if (status == CellStatus.DISK) {
        if (node != null) {
          logger.warning(""String_Node_Str"" + cell.getName());
          if (selectedCell == cell) {
            dirtyPanelSet.clear();
          }
          TreeModel m=cellHierarchyTree.getModel();
          ((DefaultTreeModel)m).removeNodeFromParent(node);
          cellNodes.remove(cell);
        }
      }
 else       if (status == CellStatus.RENDERING) {
        if (node == null) {
          logger.warning(""String_Node_Str"" + cell.getName());
          createJTreeNode(cell);
        }
      }
    }
  }
);
}"
46002,"/** 
 * Constructor 
 */
public CellPropertiesJFrame(){
  factoryList=new LinkedList();
  stateUpdates=new StateUpdates();
  initComponents();
  listModel=new DefaultListModel();
  capabilityList.setModel(listModel);
  capabilityList.addListSelectionListener(new CapabilityListSelectionListener());
  basicPropertiesFactory=new BasicJPanel();
  basicPropertiesFactory.setCellPropertiesEditor(this);
  positionPropertiesFactory=new PositionJPanel();
  positionPropertiesFactory.setCellPropertiesEditor(this);
  treeRoot=new DefaultMutableTreeNode(""String_Node_Str"");
  cellNodes=new HashMap();
  ((DefaultTreeModel)cellHierarchyTree.getModel()).setRoot(treeRoot);
  cellHierarchyTree.setCellRenderer(new CellTreeRenderer());
  cellListener=new CellStatusChangeListener(){
    public void cellStatusChanged(    final Cell cell,    final CellStatus status){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          DefaultMutableTreeNode node=cellNodes.get(cell);
          if (status == CellStatus.DISK) {
            if (node != null) {
              logger.warning(""String_Node_Str"" + cell.getName());
              TreeModel m=cellHierarchyTree.getModel();
              ((DefaultTreeModel)m).removeNodeFromParent(node);
              cellNodes.remove(cell);
            }
          }
 else           if (status == CellStatus.RENDERING) {
            if (node == null) {
              logger.warning(""String_Node_Str"" + cell.getName());
              createJTreeNode(cell);
            }
          }
        }
      }
);
    }
  }
;
  treeListener=new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      DefaultMutableTreeNode selectedNode=(DefaultMutableTreeNode)cellHierarchyTree.getLastSelectedPathComponent();
      if (selectedNode != null) {
        Object userObject=selectedNode.getUserObject();
        if (userObject instanceof Cell) {
          setSelectedCell((Cell)userObject);
        }
 else {
          setSelectedCell(null);
        }
      }
 else {
        setSelectedCell(null);
      }
    }
  }
;
  cellHierarchyTree.setDragEnabled(true);
  DropTarget dt=new DropTarget();
  try {
    dt.addDropTargetListener(new CellDropTargetListener());
  }
 catch (  TooManyListenersException ex) {
    Logger.getLogger(CellPropertiesJFrame.class.getName()).log(Level.SEVERE,null,ex);
  }
  cellHierarchyTree.setDropTarget(dt);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (dirtyPanelSet.isEmpty() == false) {
        int result=JOptionPane.showConfirmDialog(CellPropertiesJFrame.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
          applyValues();
        }
      }
      for (      PropertiesFactorySPI factory : factoryList) {
        factory.close();
      }
    }
  }
);
}","/** 
 * Constructor 
 */
public CellPropertiesJFrame(){
  factoryList=new LinkedList();
  stateUpdates=new StateUpdates();
  initComponents();
  listModel=new DefaultListModel();
  capabilityList.setModel(listModel);
  capabilityList.addListSelectionListener(new CapabilityListSelectionListener());
  basicPropertiesFactory=new BasicJPanel();
  basicPropertiesFactory.setCellPropertiesEditor(this);
  positionPropertiesFactory=new PositionJPanel();
  positionPropertiesFactory.setCellPropertiesEditor(this);
  treeRoot=new DefaultMutableTreeNode(""String_Node_Str"");
  cellNodes=new HashMap();
  ((DefaultTreeModel)cellHierarchyTree.getModel()).setRoot(treeRoot);
  cellHierarchyTree.setCellRenderer(new CellTreeRenderer());
  cellListener=new CellStatusChangeListener(){
    public void cellStatusChanged(    final Cell cell,    final CellStatus status){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          DefaultMutableTreeNode node=cellNodes.get(cell);
          if (status == CellStatus.DISK) {
            if (node != null) {
              logger.warning(""String_Node_Str"" + cell.getName());
              if (selectedCell == cell) {
                dirtyPanelSet.clear();
              }
              TreeModel m=cellHierarchyTree.getModel();
              ((DefaultTreeModel)m).removeNodeFromParent(node);
              cellNodes.remove(cell);
            }
          }
 else           if (status == CellStatus.RENDERING) {
            if (node == null) {
              logger.warning(""String_Node_Str"" + cell.getName());
              createJTreeNode(cell);
            }
          }
        }
      }
);
    }
  }
;
  treeListener=new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      DefaultMutableTreeNode selectedNode=(DefaultMutableTreeNode)cellHierarchyTree.getLastSelectedPathComponent();
      if (selectedNode != null) {
        Object userObject=selectedNode.getUserObject();
        if (userObject instanceof Cell) {
          setSelectedCell((Cell)userObject);
        }
 else {
          setSelectedCell(null);
        }
      }
 else {
        setSelectedCell(null);
      }
    }
  }
;
  cellHierarchyTree.setDragEnabled(true);
  DropTarget dt=new DropTarget();
  try {
    dt.addDropTargetListener(new CellDropTargetListener());
  }
 catch (  TooManyListenersException ex) {
    Logger.getLogger(CellPropertiesJFrame.class.getName()).log(Level.SEVERE,null,ex);
  }
  cellHierarchyTree.setDropTarget(dt);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (dirtyPanelSet.isEmpty() == false) {
        int result=JOptionPane.showConfirmDialog(CellPropertiesJFrame.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
          applyValues();
        }
      }
      for (      PropertiesFactorySPI factory : factoryList) {
        factory.close();
      }
    }
  }
);
}"
46003,"@Override public void windowClosing(WindowEvent e){
  if (dirtyPanelSet.isEmpty() == false) {
    int result=JOptionPane.showConfirmDialog(CellPropertiesJFrame.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (result == JOptionPane.YES_OPTION) {
      applyValues();
    }
  }
  for (  PropertiesFactorySPI factory : factoryList) {
    factory.close();
  }
}","@Override public void windowClosing(WindowEvent e){
  if (dirtyPanelSet.isEmpty() == false) {
    int result=JOptionPane.showConfirmDialog(CellPropertiesJFrame.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (result == JOptionPane.YES_OPTION) {
      applyValues();
    }
 else {
      restoreValues();
    }
  }
  for (  PropertiesFactorySPI factory : factoryList) {
    factory.close();
  }
}"
46004,"/** 
 * Constructor 
 */
public CellPropertiesJFrame(){
  factoryList=new LinkedList();
  stateUpdates=new StateUpdates();
  initComponents();
  listModel=new DefaultListModel();
  capabilityList.setModel(listModel);
  capabilityList.addListSelectionListener(new CapabilityListSelectionListener());
  basicPropertiesFactory=new BasicJPanel();
  basicPropertiesFactory.setCellPropertiesEditor(this);
  positionPropertiesFactory=new PositionJPanel();
  positionPropertiesFactory.setCellPropertiesEditor(this);
  treeRoot=new DefaultMutableTreeNode(""String_Node_Str"");
  cellNodes=new HashMap();
  ((DefaultTreeModel)cellHierarchyTree.getModel()).setRoot(treeRoot);
  cellHierarchyTree.setCellRenderer(new CellTreeRenderer());
  cellListener=new CellStatusChangeListener(){
    public void cellStatusChanged(    final Cell cell,    final CellStatus status){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          DefaultMutableTreeNode node=cellNodes.get(cell);
          if (status == CellStatus.DISK) {
            if (node != null) {
              logger.warning(""String_Node_Str"" + cell.getName());
              if (selectedCell == cell) {
                dirtyPanelSet.clear();
              }
              TreeModel m=cellHierarchyTree.getModel();
              ((DefaultTreeModel)m).removeNodeFromParent(node);
              cellNodes.remove(cell);
            }
          }
 else           if (status == CellStatus.RENDERING) {
            if (node == null) {
              logger.warning(""String_Node_Str"" + cell.getName());
              createJTreeNode(cell);
            }
          }
        }
      }
);
    }
  }
;
  treeListener=new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      DefaultMutableTreeNode selectedNode=(DefaultMutableTreeNode)cellHierarchyTree.getLastSelectedPathComponent();
      if (selectedNode != null) {
        Object userObject=selectedNode.getUserObject();
        if (userObject instanceof Cell) {
          setSelectedCell((Cell)userObject);
        }
 else {
          setSelectedCell(null);
        }
      }
 else {
        setSelectedCell(null);
      }
    }
  }
;
  cellHierarchyTree.setDragEnabled(true);
  DropTarget dt=new DropTarget();
  try {
    dt.addDropTargetListener(new CellDropTargetListener());
  }
 catch (  TooManyListenersException ex) {
    Logger.getLogger(CellPropertiesJFrame.class.getName()).log(Level.SEVERE,null,ex);
  }
  cellHierarchyTree.setDropTarget(dt);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (dirtyPanelSet.isEmpty() == false) {
        int result=JOptionPane.showConfirmDialog(CellPropertiesJFrame.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
          applyValues();
        }
      }
      for (      PropertiesFactorySPI factory : factoryList) {
        factory.close();
      }
    }
  }
);
}","/** 
 * Constructor 
 */
public CellPropertiesJFrame(){
  factoryList=new LinkedList();
  stateUpdates=new StateUpdates();
  initComponents();
  listModel=new DefaultListModel();
  capabilityList.setModel(listModel);
  capabilityList.addListSelectionListener(new CapabilityListSelectionListener());
  basicPropertiesFactory=new BasicJPanel();
  basicPropertiesFactory.setCellPropertiesEditor(this);
  positionPropertiesFactory=new PositionJPanel();
  positionPropertiesFactory.setCellPropertiesEditor(this);
  treeRoot=new DefaultMutableTreeNode(""String_Node_Str"");
  cellNodes=new HashMap();
  ((DefaultTreeModel)cellHierarchyTree.getModel()).setRoot(treeRoot);
  cellHierarchyTree.setCellRenderer(new CellTreeRenderer());
  cellListener=new CellStatusChangeListener(){
    public void cellStatusChanged(    final Cell cell,    final CellStatus status){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          DefaultMutableTreeNode node=cellNodes.get(cell);
          if (status == CellStatus.DISK) {
            if (node != null) {
              logger.warning(""String_Node_Str"" + cell.getName());
              if (selectedCell == cell) {
                dirtyPanelSet.clear();
              }
              TreeModel m=cellHierarchyTree.getModel();
              ((DefaultTreeModel)m).removeNodeFromParent(node);
              cellNodes.remove(cell);
            }
          }
 else           if (status == CellStatus.RENDERING) {
            if (node == null) {
              logger.warning(""String_Node_Str"" + cell.getName());
              createJTreeNode(cell);
            }
          }
        }
      }
);
    }
  }
;
  treeListener=new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      DefaultMutableTreeNode selectedNode=(DefaultMutableTreeNode)cellHierarchyTree.getLastSelectedPathComponent();
      if (selectedNode != null) {
        Object userObject=selectedNode.getUserObject();
        if (userObject instanceof Cell) {
          setSelectedCell((Cell)userObject);
        }
 else {
          setSelectedCell(null);
        }
      }
 else {
        setSelectedCell(null);
      }
    }
  }
;
  cellHierarchyTree.setDragEnabled(true);
  DropTarget dt=new DropTarget();
  try {
    dt.addDropTargetListener(new CellDropTargetListener());
  }
 catch (  TooManyListenersException ex) {
    Logger.getLogger(CellPropertiesJFrame.class.getName()).log(Level.SEVERE,null,ex);
  }
  cellHierarchyTree.setDropTarget(dt);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (dirtyPanelSet.isEmpty() == false) {
        int result=JOptionPane.showConfirmDialog(CellPropertiesJFrame.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
          applyValues();
        }
 else {
          restoreValues();
        }
      }
      for (      PropertiesFactorySPI factory : factoryList) {
        factory.close();
      }
    }
  }
);
}"
46005,"private void close(final String failureMessage){
  connected=false;
  if (failureMessage != null) {
    logger.info(""String_Node_Str"" + failureMessage);
  }
  boolean wasOpen=false;
synchronized (this) {
    if (softphoneOutputStream != null) {
      logger.finer(""String_Node_Str"");
      sendCommandToSoftphone(""String_Node_Str"");
    }
    softphoneAddress=null;
    if (softphoneOutputStream != null) {
      try {
        softphoneOutputStream.close();
      }
 catch (      IOException ioe) {
      }
    }
    logger.finer(""String_Node_Str"");
    softphoneOutputStream=null;
    if (stdOutListener != null) {
      stdOutListener.stop();
      stdOutListener=null;
    }
    if (stdErrListener != null) {
      stdErrListener.stop();
      stdErrListener=null;
    }
    if (pinger != null) {
      pinger.interrupt();
      pinger=null;
    }
    softphoneProcess=null;
  }
  notifyListeners(State.EXITED);
}","private void close(final String failureMessage){
  if (closed) {
    return;
  }
  closed=true;
  if (failureMessage != null) {
    logger.info(""String_Node_Str"" + failureMessage);
  }
synchronized (this) {
    if (softphoneOutputStream != null) {
      logger.finer(""String_Node_Str"");
      sendCommandToSoftphone(""String_Node_Str"");
    }
    softphoneAddress=null;
    if (softphoneOutputStream != null) {
      try {
        softphoneOutputStream.close();
      }
 catch (      IOException ioe) {
      }
    }
    logger.finer(""String_Node_Str"");
    softphoneOutputStream=null;
    if (stdOutListener != null) {
      stdOutListener.stop();
      stdOutListener=null;
    }
    if (stdErrListener != null) {
      stdErrListener.stop();
      stdErrListener=null;
    }
    if (pinger != null) {
      pinger.interrupt();
      pinger=null;
    }
    softphoneProcess=null;
  }
  notifyListeners(State.EXITED);
}"
46006,"/** 
 * Set the transform for this cell. Users should not call this method directly, rather MovableComponent should be used, which will keep the client and server in sync.
 * @param localTransform
 */
void setLocalTransform(CellTransform localTransform,TransformChangeListener.ChangeSource source){
  if (this.localTransform != null && this.localTransform.equals(localTransform)) {
    return;
  }
  if (localTransform == null) {
    this.localTransform=null;
    Cell current=getParent();
    while (current != null) {
      CellTransform parentWorldTransform=current.getWorldTransform();
      if (parentWorldTransform != null) {
        setWorldTransform(parentWorldTransform,source);
        current=null;
      }
 else {
        current=current.getParent();
      }
    }
  }
 else {
    this.localTransform=(CellTransform)localTransform.clone(null);
    if (parent != null) {
      worldTransform=(CellTransform)localTransform.clone(null);
      worldTransform=worldTransform.mul(parent.getWorldTransform());
      cachedVWBounds=localBounds.clone(cachedVWBounds);
      worldTransform.transform(cachedVWBounds);
      local2VW=null;
    }
 else     if (parent == null) {
      worldTransform=(CellTransform)localTransform.clone(null);
      local2VW=null;
      cachedVWBounds=localBounds.clone(cachedVWBounds);
      worldTransform.transform(cachedVWBounds);
    }
    notifyTransformChangeListeners(source);
  }
  if (cachedVWBounds == null) {
    logger.warning(""String_Node_Str"" + getName() + ""String_Node_Str""+ localBounds+ ""String_Node_Str""+ localTransform);
    Thread.dumpStack();
  }
  for (  Cell child : getChildren()) {
    transformTreeUpdate(this,child,source);
  }
  for (  CellRenderer rend : cellRenderers.values()) {
    rend.cellTransformUpdate(worldTransform);
  }
}","/** 
 * Set the transform for this cell. Users should not call this method directly, rather MovableComponent should be used, which will keep the client and server in sync.
 * @param localTransform
 */
void setLocalTransform(CellTransform localTransform,TransformChangeListener.ChangeSource source){
  if (this.localTransform != null && this.localTransform.equals(localTransform)) {
    return;
  }
  if (localTransform == null) {
    this.localTransform=null;
    Cell current=getParent();
    while (current != null) {
      CellTransform parentWorldTransform=current.getWorldTransform();
      if (parentWorldTransform != null) {
        setWorldTransform(parentWorldTransform,source);
        current=null;
      }
 else {
        current=current.getParent();
      }
    }
  }
 else {
    this.localTransform=(CellTransform)localTransform.clone(null);
    if (parent != null) {
      worldTransform=(CellTransform)localTransform.clone(null);
      worldTransform=worldTransform.mul(parent.getWorldTransform());
      cachedVWBounds=localBounds.clone(cachedVWBounds);
      worldTransform.transform(cachedVWBounds);
      local2VW=null;
    }
 else     if (parent == null) {
      worldTransform=(CellTransform)localTransform.clone(null);
      local2VW=null;
      cachedVWBounds=localBounds.clone(cachedVWBounds);
      worldTransform.transform(cachedVWBounds);
    }
    notifyTransformChangeListeners(source);
  }
  if (cachedVWBounds == null) {
    logger.warning(""String_Node_Str"" + getName() + ""String_Node_Str""+ localBounds+ ""String_Node_Str""+ localTransform);
    Thread.dumpStack();
  }
  for (  Cell child : getChildren()) {
    transformTreeUpdate(this,child,source);
  }
  for (  CellRenderer rend : cellRenderers.values()) {
    rend.cellTransformUpdate(localTransform);
  }
}"
46007,"/** 
 * The cell has moved, the transform is the cell position in world coordinates
 * @param worldTransfrm the cell world transform
 */
public void cellTransformUpdate(CellTransform worldTransform);","/** 
 * The cell has moved, the transform is the cell position in world coordinates
 * @param localTransfrm the cell local transform
 */
public void cellTransformUpdate(CellTransform localTransform);"
46008,"/** 
 * Callback notifying the renderer that the cell transform has changed.
 * @param worldTransform
 */
public void cellTransformUpdate(CellTransform worldTransform){
  if (moveProcessor != null) {
    moveProcessor.cellMoved(worldTransform);
    return;
  }
  if (cell.getComponent(MovableComponent.class) != null && rootNode != null) {
    moveProcessor=new MoveProcessor(ClientContextJME.getWorldManager(),rootNode);
    getEntity().addComponent(MoveProcessor.class,moveProcessor);
    moveProcessor.cellMoved(worldTransform);
  }
}","/** 
 * Callback notifying the renderer that the cell transform has changed.
 * @param localTransform the new local transform of the cell
 */
public void cellTransformUpdate(CellTransform localTransform){
  if (moveProcessor != null) {
    moveProcessor.cellMoved(localTransform);
    return;
  }
  if (cell.getComponent(MovableComponent.class) != null && rootNode != null) {
    moveProcessor=new MoveProcessor(ClientContextJME.getWorldManager(),rootNode);
    getEntity().addComponent(MoveProcessor.class,moveProcessor);
    moveProcessor.cellMoved(localTransform);
  }
}"
46009,"public void setFocused(HUDComponent component,boolean focused){
  if (component != null) {
    component.changeTransparency(component.getTransparency(),focused ? focusedTransparency : ((component.getPreferredTransparency() != 1.0f) ? component.getPreferredTransparency() : unfocusedTransparency));
  }
}","public void setFocused(HUDComponent component,boolean focused){
  if (component != null) {
    component.changeTransparency(component.getTransparency(),focused ? focusedTransparency : ((component.getPreferredTransparency() != 1.0f) ? component.getPreferredTransparency() : unfocusedTransparency),focused ? fadeInTime : fadeOutTime);
  }
}"
46010,"@Override protected void activate(){
  ContentBrowserManager manager=ContentBrowserManager.getContentBrowserManager();
  defaultBrowser=new ContentBrowserJDialog(getSessionManager());
  manager.setDefaultContentBrowser(defaultBrowser);
  JmeClientMain.getFrame().addToToolsMenu(newBrowserItem,6);
}","@Override protected void activate(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      ContentBrowserManager manager=ContentBrowserManager.getContentBrowserManager();
      defaultBrowser=new ContentBrowserJDialog(getSessionManager());
      manager.setDefaultContentBrowser(defaultBrowser);
    }
  }
);
  JmeClientMain.getFrame().addToToolsMenu(newBrowserItem,6);
}"
46011,"@Override public String toString(){
  return ""String_Node_Str"" + id + ""String_Node_Str""+ bounds+ ""String_Node_Str""+ mode+ ""String_Node_Str""+ visible+ ""String_Node_Str""+ worldVisible+ ""String_Node_Str""+ enabled+ ""String_Node_Str""+ transparency;
}","@Override public String toString(){
  return ""String_Node_Str"" + id + ""String_Node_Str""+ bounds+ ""String_Node_Str""+ mode+ ""String_Node_Str""+ visible+ ""String_Node_Str""+ worldVisible+ ""String_Node_Str""+ enabled+ ""String_Node_Str""+ transparency+ ""String_Node_Str""+ decoratable;
}"
46012,"/** 
 * {@inheritDoc}
 */
public void removeComponent(HUDComponent component){
  component.removeEventListener(this);
  components.remove(component);
  HUDObjectChanged(new HUDEvent(component,HUDEventType.REMOVED,new Date()));
}","/** 
 * {@inheritDoc}
 */
public void removeComponent(HUDComponent component){
  if (component != null) {
    component.removeEventListener(this);
    components.remove(component);
    HUDObjectChanged(new HUDEvent(component,HUDEventType.REMOVED,new Date()));
  }
}"
46013,"private void showFrame(HUDComponent2D component,boolean visible){
  if (component.getDecoratable() == true) {
    HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
    HUDView2D view=state.getView();
    HUDView2D frameView=state.getFrameView();
    if ((visible == true) && (frameView == null)) {
      if (hudDisplayer == null) {
        logger.fine(""String_Node_Str"");
        hudDisplayer=new HUDView2DDisplayer();
      }
      createFrame(component);
      frameView=state.getFrameView();
      view.attachView(frameView);
    }
    if (frameView != null) {
      state.getFrame().setTitle(component.getName());
      frameView.setVisibleApp(visible);
      frameView.setVisibleUser(visible);
    }
  }
}","private void showFrame(HUDComponent2D component,boolean visible){
  logger.fine(""String_Node_Str"" + component + ""String_Node_Str""+ visible);
  if (component.getDecoratable() == true) {
    HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
    HUDView2D view=state.getView();
    HUDView2D frameView=state.getFrameView();
    if (visible && (frameView == null)) {
      logger.fine(""String_Node_Str"");
      addFrame(component);
      frameView=state.getFrameView();
      view.attachView(frameView);
    }
    frameView.setVisibleApp(visible);
    frameView.setVisibleUser(visible);
    if (!visible && (frameView != null)) {
      logger.fine(""String_Node_Str"");
      view.detachView(view);
      removeFrame(component);
    }
  }
}"
46014,"protected void componentInvisible(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  if (!state.isVisible()) {
    return;
  }
  HUDView2D view=state.getView();
  if (view != null) {
    logger.fine(""String_Node_Str"");
    showFrame(component,false);
    view.setVisibleApp(false,false);
    view.setVisibleUser(false);
  }
 else {
    logger.warning(""String_Node_Str"");
  }
}","protected void componentInvisible(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  if (!state.isVisible()) {
    return;
  }
  HUDView2D view=state.getView();
  if (view != null) {
    logger.fine(""String_Node_Str"");
    view.setVisibleApp(false,false);
    view.setVisibleUser(false);
  }
 else {
    logger.warning(""String_Node_Str"");
  }
  showFrame(component,false);
}"
46015,"/** 
 * {@inheritDoc}
 */
public void removeComponent(HUDComponent component){
  logger.fine(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state != null) {
    HUDView2D view2D=state.getView();
    if (view2D != null) {
      view2D.cleanup();
      view2D=null;
    }
    HUDView2D frameView=state.getFrameView();
    if (frameView != null) {
      frameView.cleanup();
      frameView=null;
    }
    HUDView3D view3D=state.getWorldView();
    if (view3D != null) {
      view3D.cleanup();
      view3D=null;
    }
    hudStateMap.remove(component);
    state=null;
  }
}","/** 
 * {@inheritDoc}
 */
public void removeComponent(HUDComponent component){
  logger.fine(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state != null) {
    HUDView2D view2D=state.getView();
    if (view2D != null) {
      view2D.cleanup();
      view2D=null;
    }
    removeFrame(component);
    HUDView3D view3D=state.getWorldView();
    if (view3D != null) {
      view3D.cleanup();
      view3D=null;
    }
    hudStateMap.remove(component);
    state=null;
  }
}"
46016,"/** 
 * Make this entity pickable by adding a collision component to it.
 */
protected void makeEntityPickable(Entity entity,Node node){
  JMECollisionSystem collisionSystem=(JMECollisionSystem)ClientContextJME.getWorldManager().getCollisionManager().loadCollisionSystem(JMECollisionSystem.class);
  CollisionComponent cc=collisionSystem.createCollisionComponent(node);
  entity.addComponent(CollisionComponent.class,cc);
}","/** 
 * Make this entity pickable by adding a collision component to it.
 */
protected void makeEntityPickable(Entity entity,Node node){
  JMECollisionSystem collisionSystem=(JMECollisionSystem)ClientContextJME.getWorldManager().getCollisionManager().loadCollisionSystem(JMECollisionSystem.class);
  CollisionComponent cc=collisionSystem.createCollisionComponent(node);
  cc.setCollidable(false);
  entity.addComponent(CollisionComponent.class,cc);
}"
46017,"/** 
 * Specify the size of the window (excluding the decoration). Note: the arguments do NOT include the borderWidth. TODO: Currently, the entire window contents will be lost when the window is resized,  so you must repaint the entire window after the resize.
 * @param width The new width of the window.
 * @param height The new height of the window.
 */
public synchronized void setSize(int width,int height){
  if (width <= 0 || height <= 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (this.size.width == width && this.size.height == height) {
    return;
  }
  this.size=new Dimension(width,height);
  if (surface != null) {
    surface.setTexture(texture);
    surface.setSize(width,height);
  }
  changeMask|=CHANGED_SIZE;
  updateViews();
}","/** 
 * Specify the size of the window (excluding the decoration). Note: the arguments do NOT include the borderWidth. TODO: Currently, the entire window contents will be lost when the window is resized,  so you must repaint the entire window after the resize.
 * @param width The new width of the window.
 * @param height The new height of the window.
 */
public synchronized void setSize(int width,int height){
  if (width <= 0 || height <= 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (this.size.width == width && this.size.height == height) {
    return;
  }
  Dimension oldSize=this.size;
  this.size=new Dimension(width,height);
  if (surface != null) {
    surface.setTexture(texture);
    surface.setSize(width,height);
  }
  changeMask|=CHANGED_SIZE;
  updateViews();
synchronized (resizeListeners) {
    for (    ResizeListener listener : resizeListeners) {
      listener.windowResized(this,oldSize,this.size);
    }
  }
}"
46018,"public void microphoneVolume(){
  try {
    if (SoftphoneControlImpl.getInstance().isConnected() == false) {
      return;
    }
  }
 catch (  IOException e) {
    return;
  }
  if (micVuMeterComponent == null) {
    final MicVuMeterPanel micVuMeterPanel=new MicVuMeterPanel(this);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    micVuMeterComponent=mainHUD.createComponent(micVuMeterPanel);
    micVuMeterComponent.setPreferredLocation(Layout.SOUTH);
    micVuMeterComponent.setName(""String_Node_Str"");
    micVuMeterComponent.setIcon(voiceChatIcon);
    micVuMeterComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent event){
switch (event.getEventType()) {
case APPEARED:
          System.err.println(""String_Node_Str"");
        micVuMeterPanel.startVuMeter(true);
      break;
case DISAPPEARED:
    System.err.println(""String_Node_Str"");
  micVuMeterPanel.startVuMeter(false);
break;
default :
break;
}
}
}
);
mainHUD.addComponent(micVuMeterComponent);
micVuMeterPanel.startVuMeter(true);
}
micVuMeterComponent.setVisible(true);
}","public void microphoneVolume(){
  try {
    if (SoftphoneControlImpl.getInstance().isConnected() == false) {
      return;
    }
  }
 catch (  IOException e) {
    return;
  }
  if (micVuMeterComponent == null) {
    final MicVuMeterPanel micVuMeterPanel=new MicVuMeterPanel(this);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    micVuMeterComponent=mainHUD.createComponent(micVuMeterPanel);
    micVuMeterComponent.setPreferredLocation(Layout.SOUTH);
    micVuMeterComponent.setName(""String_Node_Str"");
    micVuMeterComponent.setIcon(voiceChatIcon);
    micVuMeterComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent event){
switch (event.getEventType()) {
case APPEARED:
          micVuMeterPanel.startVuMeter(true);
        break;
case DISAPPEARED:
      micVuMeterPanel.startVuMeter(false);
    break;
default :
  break;
}
}
}
);
mainHUD.addComponent(micVuMeterComponent);
micVuMeterPanel.startVuMeter(true);
}
micVuMeterComponent.setVisible(true);
}"
46019,"/** 
 * {@inheritDoc}
 */
public WlAvatarCharacter getAvatarCharacter(Cell avatarCell,String userName,AvatarConfigInfo info){
  WorldManager wm=ClientContextJME.getWorldManager();
  CharacterParams attributes=new MaleAvatarParams(userName);
  String baseURL=null;
  try {
    ServerSessionManager manager=avatarCell.getCellCache().getSession().getSessionManager();
    String serverHostAndPort=manager.getServerNameAndPort();
    URL tmpURL=AssetUtils.getAssetURL(""String_Node_Str"",serverHostAndPort);
    baseURL=tmpURL.toExternalForm();
  }
 catch (  MalformedURLException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    return null;
  }
  PScene simpleScene=new PScene(ClientContextJME.getWorldManager());
  simpleScene.addMeshInstance(new PPolygonMesh(""String_Node_Str""),new PMatrix());
  attributes.setUseSimpleStaticModel(true,simpleScene);
  attributes.setBaseURL(baseURL);
  WlAvatarCharacter avatar=new WlAvatarCharacter.WlAvatarCharacterBuilder(attributes,wm).addEntity(false).build();
  Spatial placeHolder=null;
  try {
    URL url=new URL(baseURL + ""String_Node_Str"");
    ResourceLocator resourceLocator=new RelativeResourceLocator(url,avatarCell);
    ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
    placeHolder=(Spatial)BinaryImporter.getInstance().load(url);
    ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
  }
 catch (  IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    return avatar;
  }
  avatar.getJScene().getExternalKidsRoot().attachChild(placeHolder);
  avatar.getJScene().setExternalKidsChanged(true);
  return avatar;
}","/** 
 * {@inheritDoc}
 */
public WlAvatarCharacter getAvatarCharacter(Cell avatarCell,String userName,AvatarConfigInfo info){
  WorldManager wm=ClientContextJME.getWorldManager();
  CharacterParams attributes=new MaleAvatarParams(userName);
  String baseURL=null;
  try {
    ServerSessionManager manager=avatarCell.getCellCache().getSession().getSessionManager();
    String serverHostAndPort=manager.getServerNameAndPort();
    URL tmpURL=AssetUtils.getAssetURL(""String_Node_Str"",serverHostAndPort);
    baseURL=tmpURL.toExternalForm();
  }
 catch (  MalformedURLException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    return null;
  }
  PScene simpleScene=new PScene(ClientContextJME.getWorldManager());
  simpleScene.addMeshInstance(new PPolygonMesh(""String_Node_Str""),new PMatrix());
  attributes.setUseSimpleStaticModel(true,simpleScene);
  attributes.setBaseURL(baseURL);
  WlAvatarCharacter avatar=new WlAvatarCharacter.WlAvatarCharacterBuilder(attributes,wm).addEntity(false).build();
  Spatial spatial=null;
  try {
    URL url=new URL(baseURL + ""String_Node_Str"");
    ResourceLocator resourceLocator=new RelativeResourceLocator(url,avatarCell);
    ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
    spatial=(Spatial)BinaryImporter.getInstance().load(url);
    ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
  }
 catch (  IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    return avatar;
  }
  avatar.getJScene().getExternalKidsRoot().attachChild(spatial);
  avatar.getJScene().setExternalKidsChanged(true);
  return avatar;
}"
46020,"public void componentResized(ComponentEvent e){
  logger.fine(""String_Node_Str"" + e);
  notifyEventListeners(HUDEventType.RESIZED);
}","public void componentResized(ComponentEvent e){
  logger.fine(""String_Node_Str"" + e);
  Component comp=e.getComponent();
  if (comp != null) {
    setSize(comp.getSize());
  }
}"
46021,"/** 
 * Sets the Swing component of this HUD component.
 * @param component the Swing component
 */
public void setComponent(JComponent component){
  this.component=component;
  setBounds(0,0,(int)component.getPreferredSize().getWidth(),(int)component.getPreferredSize().getHeight());
  component.addComponentListener(new ComponentListener(){
    public void componentShown(    ComponentEvent e){
    }
    public void componentHidden(    ComponentEvent e){
    }
    public void componentMoved(    ComponentEvent e){
    }
    public void componentResized(    ComponentEvent e){
      logger.fine(""String_Node_Str"" + e);
      notifyEventListeners(HUDEventType.RESIZED);
    }
  }
);
}","/** 
 * Sets the Swing component of this HUD component.
 * @param component the Swing component
 */
public void setComponent(JComponent component){
  this.component=component;
  setBounds(0,0,(int)component.getPreferredSize().getWidth(),(int)component.getPreferredSize().getHeight());
  component.addComponentListener(new ComponentListener(){
    public void componentShown(    ComponentEvent e){
    }
    public void componentHidden(    ComponentEvent e){
    }
    public void componentMoved(    ComponentEvent e){
    }
    public void componentResized(    ComponentEvent e){
      logger.fine(""String_Node_Str"" + e);
      Component comp=e.getComponent();
      if (comp != null) {
        setSize(comp.getSize());
      }
    }
  }
);
}"
46022,"protected void componentResized(HUDComponent2D component){
  logger.finest(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  HUDView2D view=state.getView();
  if (view != null) {
    view.setSizeApp(component.getSize());
    if (component.getDecoratable()) {
      HUDView2D frameView=state.getFrameView();
      if (frameView != null) {
        HUDFrameHeader2D frame=state.getFrame();
        frameView.setLocationOrtho(new Vector2f(0.0f,(float)(0.75 * frame.getHeight() / 2 + 0.75f * component.getSize().height / 2)));
        frameView.setSizeApp(new Dimension((int)(component.getWidth()),frame.getHeight()));
      }
    }
  }
}","protected void componentResized(HUDComponent2D component){
  logger.finest(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  HUDView2D view=state.getView();
  if (view != null) {
    view.setSizeApp(component.getSize());
    if (component.getDecoratable()) {
      HUDView2D frameView=state.getFrameView();
      if (frameView != null) {
        HUDFrameHeader2D frame=state.getFrame();
        Window2D window=state.getFrameWindow();
        window.setSize(component.getWidth(),window.getHeight());
        frameView.setLocationOrtho(new Vector2f(0.0f,(float)(0.75 * frame.getHeight() / 2 + 0.75f * component.getSize().height / 2)));
      }
    }
  }
}"
46023,"private void deleteCollectionButtonActionPerformed(java.awt.event.ActionEvent evt){
  try {
    ContentCollection parent=tableSelectedNode.getParent();
    parent.removeChild(tableSelectedNode.getName());
    jtable.setContentCollection(parent);
    jtree.refresh();
  }
 catch (  java.lang.Exception excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + tableSelectedNode.getName(),excp);
  }
}","private void deleteCollectionButtonActionPerformed(java.awt.event.ActionEvent evt){
  try {
    ContentCollection parent=tableSelectedNode.getParent();
    parent.removeChild(tableSelectedNode.getName());
    jtable.setContentCollection(parent);
    jtree.refresh();
  }
 catch (  java.lang.Exception excp) {
    String nodeName=tableSelectedNode.getName();
    logger.log(Level.WARNING,""String_Node_Str"" + nodeName,excp);
    String msg=""String_Node_Str"" + nodeName + ""String_Node_Str""+ ""String_Node_Str"";
    String title=""String_Node_Str"";
    JOptionPane.showMessageDialog(this,msg,title,JOptionPane.ERROR_MESSAGE);
  }
}"
46024,"private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt){
  JFileChooser chooser=new JFileChooser(""String_Node_Str"");
  chooser.setFileFilter(new FileFilter(){
    @Override public boolean accept(    File f){
      return f.isDirectory();
    }
    @Override public String getDescription(){
      return ""String_Node_Str"";
    }
  }
);
  chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  chooser.setDialogType(JFileChooser.SAVE_DIALOG);
  int returnVal=chooser.showOpenDialog(this);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    String fileName=tableSelectedNode.getName();
    File out=new File(chooser.getSelectedFile(),fileName);
    try {
      ContentResource r=(ContentResource)tableSelectedNode;
      r.get(out);
    }
 catch (    java.lang.Exception cre) {
      logger.log(Level.WARNING,""String_Node_Str"" + out,cre);
    }
  }
}","private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt){
  JFileChooser chooser=new JFileChooser(""String_Node_Str"");
  chooser.setFileFilter(new FileFilter(){
    @Override public boolean accept(    File f){
      return f.isDirectory();
    }
    @Override public String getDescription(){
      return ""String_Node_Str"";
    }
  }
);
  chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  chooser.setDialogType(JFileChooser.SAVE_DIALOG);
  int returnVal=chooser.showOpenDialog(this);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    String fileName=tableSelectedNode.getName();
    File out=new File(chooser.getSelectedFile(),fileName);
    try {
      ContentResource r=(ContentResource)tableSelectedNode;
      r.get(out);
    }
 catch (    java.lang.Exception cre) {
      logger.log(Level.WARNING,""String_Node_Str"" + fileName,cre);
      String msg=""String_Node_Str"" + fileName + ""String_Node_Str""+ ""String_Node_Str"";
      String title=""String_Node_Str"";
      JOptionPane.showMessageDialog(this,msg,title,JOptionPane.ERROR_MESSAGE);
    }
  }
}"
46025,"private void newCollectionButtonActionPerformed(java.awt.event.ActionEvent evt){
  String s=(String)JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE);
  if (s == null) {
    return;
  }
  String name=s.trim();
  try {
    ContentCollection collection=(ContentCollection)treeSelectedNode;
    collection.createChild(name,ContentNode.Type.COLLECTION);
    jtree.refresh();
    jtable.setContentCollection(collection);
  }
 catch (  ContentRepositoryException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
}","private void newCollectionButtonActionPerformed(java.awt.event.ActionEvent evt){
  String s=(String)JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE);
  if (s == null) {
    return;
  }
  String name=s.trim();
  try {
    ContentCollection collection=(ContentCollection)treeSelectedNode;
    collection.createChild(name,ContentNode.Type.COLLECTION);
    jtree.refresh();
    jtable.setContentCollection(collection);
  }
 catch (  ContentRepositoryException ex) {
    logger.log(Level.WARNING,""String_Node_Str"" + name,ex);
    String msg=""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str"";
    String title=""String_Node_Str"";
    JOptionPane.showMessageDialog(this,msg,title,JOptionPane.ERROR_MESSAGE);
  }
}"
46026,"private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt){
  JFileChooser chooser=new JFileChooser();
  int returnVal=chooser.showOpenDialog(this);
  if (returnVal != JFileChooser.APPROVE_OPTION) {
    return;
  }
  File file=chooser.getSelectedFile();
  String name=file.getName();
  if (file.exists() == true) {
    try {
      ContentCollection c=(ContentCollection)treeSelectedNode;
      ContentResource r=(ContentResource)c.createChild(name,ContentNode.Type.RESOURCE);
      r.put(file);
      jtable.setContentCollection(c);
    }
 catch (    ContentRepositoryException cre) {
      logger.log(Level.WARNING,""String_Node_Str"" + file,cre);
    }
catch (    IOException ioe) {
      logger.log(Level.WARNING,""String_Node_Str"" + file,ioe);
    }
  }
}","private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt){
  JFileChooser chooser=new JFileChooser();
  int returnVal=chooser.showOpenDialog(this);
  if (returnVal != JFileChooser.APPROVE_OPTION) {
    return;
  }
  File file=chooser.getSelectedFile();
  String name=file.getName();
  if (file.exists() == true) {
    try {
      ContentCollection c=(ContentCollection)treeSelectedNode;
      ContentResource r=(ContentResource)c.createChild(name,ContentNode.Type.RESOURCE);
      r.put(file);
      jtable.setContentCollection(c);
    }
 catch (    java.lang.Exception excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + file,excp);
      String msg=""String_Node_Str"" + file + ""String_Node_Str""+ ""String_Node_Str"";
      String title=""String_Node_Str"";
      JOptionPane.showMessageDialog(this,msg,title,JOptionPane.ERROR_MESSAGE);
    }
  }
}"
46027,"public void microphoneVolume(){
  try {
    if (SoftphoneControlImpl.getInstance().isConnected() == false) {
      return;
    }
  }
 catch (  IOException e) {
    return;
  }
  if (micVuMeterFrame != null) {
    micVuMeterFrame.startVuMeter(false);
  }
  micVuMeterFrame=new MicVuMeterFrame(this);
}","public void microphoneVolume(){
  try {
    if (SoftphoneControlImpl.getInstance().isConnected() == false) {
      return;
    }
  }
 catch (  IOException e) {
    return;
  }
  if (micVuMeterComponent == null) {
    final MicVuMeterPanel micVuMeterPanel=new MicVuMeterPanel(this);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    micVuMeterComponent=mainHUD.createComponent(micVuMeterPanel);
    micVuMeterComponent.setPreferredLocation(Layout.SOUTH);
    micVuMeterComponent.setName(""String_Node_Str"");
    micVuMeterComponent.setIcon(voiceChatIcon);
    micVuMeterComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent event){
switch (event.getEventType()) {
case APPEARED:
          System.err.println(""String_Node_Str"");
        micVuMeterPanel.startVuMeter(true);
      break;
case DISAPPEARED:
    System.err.println(""String_Node_Str"");
  micVuMeterPanel.startVuMeter(false);
break;
default :
break;
}
}
}
);
mainHUD.addComponent(micVuMeterComponent);
micVuMeterPanel.startVuMeter(true);
}
micVuMeterComponent.setVisible(true);
}"
46028,"/** 
 * Unload the cell from memory, sets the Cells status to DISK
 * @param cellId
 */
public void unloadCell(CellID cellId){
  Cell cell=cells.remove(cellId);
  logger.warning(""String_Node_Str"" + cell.getName());
  if (cell != null) {
    fireCellUnloaded(cell);
    setCellStatus(cell,CellStatus.DISK);
    if (cell.getParent() == null) {
      logger.warning(""String_Node_Str"" + cell.getName());
      rootCells.remove(cell);
    }
  }
}","/** 
 * Unload the cell from memory, sets the Cells status to DISK
 * @param cellId
 */
public void unloadCell(CellID cellId){
  Cell cell=cells.remove(cellId);
  logger.fine(""String_Node_Str"" + cell.getName());
  if (cell != null) {
    fireCellUnloaded(cell);
    setCellStatus(cell,CellStatus.DISK);
    if (cell.getParent() == null) {
      logger.fine(""String_Node_Str"" + cell.getName());
      rootCells.remove(cell);
    }
  }
}"
46029,"protected void componentVisible(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  HUDView2D view=state.getView();
  if (view == null) {
    if (hudDisplayer == null) {
      hudDisplayer=new HUDView2DDisplayer();
    }
    view=hudDisplayer.createView(state.getWindow());
    state.setView(view);
    if (layout != null) {
      layout.addView(component,view);
    }
  }
  view.setOrtho(true,false);
  view.setPixelScaleOrtho(hudPixelScale,false);
  view.setVisibleUser(false);
  Vector2f location=(layout != null) ? layout.getLocation(component) : new Vector2f(component.getX(),component.getY());
  component.setLocation((int)location.x,(int)location.y,false);
  view.setLocationOrtho(new Vector2f(location.x + view.getDisplayerLocalWidth() / 2,location.y + view.getDisplayerLocalHeight() / 2),false);
  component.changeTransparency(1.0f,component.getPreferredTransparency() != 1.0f ? component.getPreferredTransparency() : unfocusedTransparency);
  view.setVisibleApp(true,false);
  view.setVisibleUser(true);
  if (component.getDecoratable()) {
    showFrame(component,true);
  }
}","protected void componentVisible(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  HUDView2D view=state.getView();
  if (view == null) {
    if (hudDisplayer == null) {
      hudDisplayer=new HUDView2DDisplayer();
    }
    view=hudDisplayer.createView(state.getWindow());
    state.setView(view);
    if (layout != null) {
      layout.addView(component,view);
    }
  }
  view.setOrtho(true,false);
  view.setPixelScaleOrtho(hudPixelScale,false);
  view.setVisibleUser(false);
  Vector2f location=(layout != null) ? layout.getLocation(component) : new Vector2f(component.getX(),component.getY());
  component.setLocation((int)location.x,(int)location.y,false);
  view.setLocationOrtho(new Vector2f(location.x + view.getDisplayerLocalWidth() / 2,location.y + view.getDisplayerLocalHeight() / 2),false);
  if (component.getPreferredTransparency() != 1.0f) {
    component.setTransparency(component.getPreferredTransparency());
  }
 else {
    component.changeTransparency(1.0f,unfocusedTransparency);
  }
  view.setVisibleApp(true,false);
  view.setVisibleUser(true);
  if (component.getDecoratable()) {
    showFrame(component,true);
  }
}"
46030,"public void setFocused(HUDComponent component,boolean focused){
  if (component != null) {
    component.changeTransparency(component.getTransparency(),focused ? focusedTransparency : unfocusedTransparency);
  }
}","public void setFocused(HUDComponent component,boolean focused){
  if (component != null) {
    component.changeTransparency(component.getTransparency(),focused ? focusedTransparency : ((component.getPreferredTransparency() != 1.0f) ? component.getPreferredTransparency() : unfocusedTransparency));
  }
}"
46031,"/** 
 * Creates a cell in the world given the CellServerState of the cell. If the given CellServerState is null, this method simply does not create a Cell. This method attempts to position the Cell ""optimally"" so that the avatar can see it, based upon ""hints"" about the Cell bounds given to it in the CellServerState.
 * @param state The cell server state for the new cell
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager vm=ViewManager.getViewManager();
  ViewCell viewCell=vm.getPrimaryViewCell();
  CellTransform viewTransform=viewCell.getWorldTransform();
  ServerSessionManager manager=viewCell.getCellCache().getSession().getSessionManager();
  CellTransform transform=null;
  BoundingVolumeHint hint=state.getBoundingVolumeHint();
  logger.info(""String_Node_Str"" + hint.getBoundsHint() + ""String_Node_Str""+ hint.isDoSystemPlacement());
  if (hint != null && hint.isDoSystemPlacement() == true) {
    BoundingVolume boundsHint=hint.getBoundsHint();
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint == null) {
    BoundingVolume boundsHint=new BoundingSphere(DEFAULT_RADIUS,Vector3f.ZERO);
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint != null && hint.isDoSystemPlacement() == false) {
    transform=new CellTransform();
  }
  CellID parentID=null;
  Cell parent=CellCreationParentRegistry.getCellCreationParent();
  if (parent != null) {
    parentID=parent.getCellID();
    logger.info(""String_Node_Str"" + parentID.toString());
  }
  if (parentID != null) {
    CellTransform worldTransform=new CellTransform(null,null);
    CellTransform parentTransform=parent.getWorldTransform();
    logger.info(""String_Node_Str"" + parentTransform.getTranslation(null).toString() + ""String_Node_Str""+ parentTransform.getRotation(null).toString());
    transform=CellPlacementUtils.transform(transform,worldTransform,parentTransform);
  }
  logger.info(""String_Node_Str"" + transform.getTranslation(null).toString());
  PositionComponentServerState position=new PositionComponentServerState();
  position.setTranslation(transform.getTranslation(null));
  position.setRotation(transform.getRotation(null));
  position.setScaling(transform.getScaling(null));
  state.addComponentServerState(position);
  if (hint != null && hint.isDoSystemPlacement() == false) {
    state.addComponentServerState(new ViewComponentServerState(viewTransform));
  }
  WonderlandSession session=manager.getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(parentID,state);
  connection.send(msg);
}","/** 
 * Creates a cell in the world given the CellServerState of the cell. If the given CellServerState is null, this method simply does not create a Cell. This method attempts to position the Cell ""optimally"" so that the avatar can see it, based upon ""hints"" about the Cell bounds given to it in the CellServerState.
 * @param state The cell server state for the new cell
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager vm=ViewManager.getViewManager();
  ViewCell viewCell=vm.getPrimaryViewCell();
  CellTransform viewTransform=viewCell.getWorldTransform();
  ServerSessionManager manager=viewCell.getCellCache().getSession().getSessionManager();
  CellTransform transform=null;
  BoundingVolumeHint hint=state.getBoundingVolumeHint();
  logger.info(""String_Node_Str"" + hint.getBoundsHint() + ""String_Node_Str""+ hint.isDoSystemPlacement());
  if (hint != null && hint.isDoSystemPlacement() == true) {
    BoundingVolume boundsHint=hint.getBoundsHint();
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint == null) {
    BoundingVolume boundsHint=new BoundingSphere(DEFAULT_RADIUS,Vector3f.ZERO);
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint != null && hint.isDoSystemPlacement() == false) {
    transform=new CellTransform();
  }
  CellID parentID=null;
  Cell parent=CellCreationParentRegistry.getCellCreationParent();
  if (parent != null) {
    parentID=parent.getCellID();
    logger.info(""String_Node_Str"" + parentID.toString());
  }
  if (parentID != null) {
    CellTransform worldTransform=new CellTransform(null,null);
    CellTransform parentTransform=parent.getWorldTransform();
    logger.info(""String_Node_Str"" + parentTransform.getTranslation(null).toString() + ""String_Node_Str""+ parentTransform.getRotation(null).toString());
    transform=CellPlacementUtils.transform(transform,worldTransform,parentTransform);
  }
  logger.info(""String_Node_Str"" + transform.getTranslation(null).toString());
  PositionComponentServerState position=new PositionComponentServerState();
  position.setTranslation(transform.getTranslation(null));
  position.setRotation(transform.getRotation(null));
  position.setScaling(transform.getScaling(null));
  state.addComponentServerState(position);
  state.addComponentServerState(new ViewComponentServerState(viewTransform));
  WonderlandSession session=manager.getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(parentID,state);
  connection.send(msg);
}"
46032,"/** 
 * Create a new instance of a HUD Event
 * @param hudObject the HUD object associated with this event
 * @param eventType the event type
 * @param eventTime the time of the event
 */
public HUDEvent(HUDObject hudObject,HUDEventType eventType,Date eventTime){
  this.hudObject=hudObject;
  this.eventType=eventType;
  this.eventTime=eventTime;
}","/** 
 * Clone constructor
 * @param event the event instance to clone
 */
public HUDEvent(HUDEvent event){
  this(event.getObject(),event.getEventType(),event.getEventTime());
}"
46033,"/** 
 * Gets the listeners for this HUD object
 * @return a list of event listeners
 */
public List<HUDEventListener> getEventListeners();","/** 
 * Gets the listeners for this HUD object
 * @return a list of event listeners
 */
public HUDEventListener[] getEventListeners();"
46034,"/** 
 * Convenience methods for notifying listeners
 * @param eventType the type of the notification event
 */
public void notifyEventListeners(HUDEventType eventType){
  event.setObject(this);
  event.setEventType(eventType);
  event.setEventTime(new Date());
  notifyEventListeners(event);
}","/** 
 * Convenience methods for notifying listeners
 * @param eventType the type of the notification event
 */
public void notifyEventListeners(HUDEventType eventType){
  notifyEventListeners(new HUDEvent(this,eventType,new Date()));
}"
46035,"/** 
 * {@inheritDoc}
 */
public List<HUDEventListener> getEventListeners(){
  return listeners;
}","/** 
 * {@inheritDoc}
 */
public HUDEventListener[] getEventListeners(){
  return listeners.toArray(new HUDEventListener[0]);
}"
46036,"public HUDObject2D(){
  listeners=Collections.synchronizedList(new ArrayList());
  event=new HUDEvent(this);
  bounds=new Rectangle2D.Double();
}","public HUDObject2D(){
  listeners=new ConcurrentLinkedQueue();
  eventQueue=new ConcurrentLinkedQueue();
  bounds=new Rectangle2D.Double();
  id=(int)(Math.random() * 10000);
}"
46037,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + bounds + ""String_Node_Str""+ mode+ ""String_Node_Str""+ visible+ ""String_Node_Str""+ worldVisible+ ""String_Node_Str""+ enabled+ ""String_Node_Str""+ transparency;
}","@Override public String toString(){
  return ""String_Node_Str"" + id + ""String_Node_Str""+ bounds+ ""String_Node_Str""+ mode+ ""String_Node_Str""+ visible+ ""String_Node_Str""+ worldVisible+ ""String_Node_Str""+ enabled+ ""String_Node_Str""+ transparency;
}"
46038,"/** 
 * {@inheritDoc}
 */
public void addEventListener(HUDEventListener listener){
  listeners.add(listener);
}","/** 
 * {@inheritDoc}
 */
public void addEventListener(HUDEventListener listener){
  listeners.add(listener);
  logger.finest(this.getClass().getSimpleName() + ""String_Node_Str"" + listener.getClass().getSimpleName()+ ""String_Node_Str""+ listeners.size()+ ""String_Node_Str"");
}"
46039,"/** 
 * {@inheritDoc}
 */
public void addComponent(HUDComponent component){
  components.add(component);
  event.setObject(component);
  event.setEventType(HUDEventType.ADDED);
  event.setEventTime(new Date());
  notifyEventListeners(event);
}","/** 
 * {@inheritDoc}
 */
public void addComponent(HUDComponent component){
  components.add(component);
  component.addEventListener(this);
  HUDObjectChanged(new HUDEvent(component,HUDEventType.ADDED,new Date()));
}"
46040,"/** 
 * {@inheritDoc}
 */
public void removeComponent(HUDComponent component){
  components.remove(component);
  event.setObject(component);
  event.setEventType(HUDEventType.REMOVED);
  event.setEventTime(new Date());
  notifyEventListeners(event);
}","/** 
 * {@inheritDoc}
 */
public void removeComponent(HUDComponent component){
  component.removeEventListener(this);
  components.remove(component);
  HUDObjectChanged(new HUDEvent(component,HUDEventType.REMOVED,new Date()));
}"
46041,"protected void componentWorldVisible(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state.isWorldVisible()) {
    return;
  }
  Cell cell=component.getCell();
  if (cell != null) {
    HUDView3D worldView=state.getWorldView();
    if (worldView == null) {
      if (worldDisplayer == null) {
        logger.fine(""String_Node_Str"");
        worldDisplayer=new HUDView3DDisplayer(cell);
      }
      logger.fine(""String_Node_Str"");
      worldView=worldDisplayer.createView(state.getWindow());
      worldView.setPixelScale(worldPixelScale);
      state.setWorldView(worldView);
    }
    logger.fine(""String_Node_Str"");
    worldView.setOrtho(false,false);
    worldView.setPixelScale(worldPixelScale);
    worldView.setVisibleApp(true);
    worldView.setVisibleUser(true,false);
    componentMovedWorld(component);
    worldView.update();
  }
}","protected void componentWorldVisible(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  if (state.isWorldVisible()) {
    return;
  }
  Cell cell=component.getCell();
  if (cell != null) {
    HUDView3D worldView=state.getWorldView();
    if (worldView == null) {
      if (worldDisplayer == null) {
        logger.fine(""String_Node_Str"");
        worldDisplayer=new HUDView3DDisplayer(cell);
      }
      logger.fine(""String_Node_Str"");
      worldView=worldDisplayer.createView(state.getWindow());
      worldView.setPixelScale(worldPixelScale);
      state.setWorldView(worldView);
    }
    logger.fine(""String_Node_Str"");
    worldView.setOrtho(false,false);
    worldView.setPixelScale(worldPixelScale);
    worldView.setVisibleApp(true);
    worldView.setVisibleUser(true,false);
    componentMovedWorld(component);
    worldView.update();
  }
}"
46042,"protected void componentClosed(HUDComponent2D component){
  logger.fine(""String_Node_Str"" + component);
}","protected void componentClosed(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
}"
46043,"protected void componentViewChanged(HUDComponent2D component){
  logger.fine(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  HUDView2D view=state.getView();
  if (component.getDisplayMode().equals(DisplayMode.HUD)) {
    view.setLocationOrtho(new Vector2f(component.getX(),component.getY()),false);
    view.setOrtho(true);
  }
 else {
    view.applyDeltaTranslationUser(component.getWorldLocation());
    view.setOrtho(false);
  }
}","protected void componentViewChanged(HUDComponent2D component){
  logger.fine(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  HUDView2D view=state.getView();
  if (component.getDisplayMode().equals(DisplayMode.HUD)) {
    view.setLocationOrtho(new Vector2f(component.getX(),component.getY()),false);
    view.setOrtho(true);
  }
 else {
    view.applyDeltaTranslationUser(component.getWorldLocation());
    view.setOrtho(false);
  }
}"
46044,"protected void componentMinimized(final HUDComponent2D component){
  logger.fine(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state != null) {
  }
}","protected void componentMinimized(final HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state != null) {
    component.setVisible(false);
  }
}"
46045,"/** 
 * {@inheritDoc}
 */
public void addComponent(final HUDComponent component){
  logger.fine(""String_Node_Str"" + component);
  HUDComponentState state=new HUDComponentState(component);
  HUDComponent2D component2D=(HUDComponent2D)component;
  Window2D window;
  if (component2D.getWindow() != null) {
    window=component2D.getWindow();
  }
 else {
    window=createWindow(component);
    component2D.setWindow(window);
  }
  window.addEventListener(new EnterExitEvent3DLogger(){
    @Override public void commitEvent(    Event event){
      MouseEnterExitEvent3D mouseEvent=(MouseEnterExitEvent3D)event;
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_ENTERED:
        logger.finest(""String_Node_Str"" + component);
      setFocused(component,true);
    break;
case MouseEvent.MOUSE_EXITED:
  logger.finest(""String_Node_Str"" + component);
setFocused(component,false);
break;
default :
break;
}
}
}
);
state.setWindow(window);
component.addEventListener(this);
hudStateMap.put(component,state);
}","/** 
 * {@inheritDoc}
 */
public void addComponent(final HUDComponent component){
  logger.fine(""String_Node_Str"" + component);
  HUDComponentState state=new HUDComponentState(component);
  HUDComponent2D component2D=(HUDComponent2D)component;
  Window2D window;
  if (component2D.getWindow() != null) {
    window=component2D.getWindow();
  }
 else {
    window=createWindow(component);
    component2D.setWindow(window);
  }
  window.addEventListener(new EnterExitEvent3DLogger(){
    @Override public void commitEvent(    Event event){
      MouseEnterExitEvent3D mouseEvent=(MouseEnterExitEvent3D)event;
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_ENTERED:
        logger.finest(""String_Node_Str"" + component);
      setFocused(component,true);
    break;
case MouseEvent.MOUSE_EXITED:
  logger.finest(""String_Node_Str"" + component);
setFocused(component,false);
break;
default :
break;
}
}
}
);
state.setWindow(window);
hudStateMap.put(component,state);
}"
46046,"protected void componentWorldInvisible(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (!state.isWorldVisible()) {
    return;
  }
  HUDView3D worldView=state.getWorldView();
  if (worldView != null) {
    logger.fine(""String_Node_Str"");
    worldView.setVisibleApp(false);
    worldView.setVisibleUser(false,false);
    worldView.update();
  }
 else {
    logger.warning(""String_Node_Str"");
  }
}","protected void componentWorldInvisible(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  if (!state.isWorldVisible()) {
    return;
  }
  HUDView3D worldView=state.getWorldView();
  if (worldView != null) {
    logger.fine(""String_Node_Str"");
    worldView.setVisibleApp(false);
    worldView.setVisibleUser(false,false);
    worldView.update();
  }
 else {
    logger.warning(""String_Node_Str"");
  }
}"
46047,"public Window2D createWindow(HUDComponent component){
  Window2D window=null;
  logger.fine(""String_Node_Str"" + component);
  hudApp=new HUDApp2D(""String_Node_Str"",new ControlArbHUD(),worldPixelScale);
  try {
    window=hudApp.createWindow(component.getWidth(),component.getHeight(),Type.PRIMARY,false,hudPixelScale,""String_Node_Str"");
    JComponent comp=((HUDComponent2D)component).getComponent();
    ((WindowSwing)window).setComponent(comp);
  }
 catch (  InstantiationException e) {
    logger.warning(""String_Node_Str"" + e);
  }
  return window;
}","public Window2D createWindow(HUDComponent component){
  logger.fine(""String_Node_Str"" + component);
  Window2D window=null;
  hudApp=new HUDApp2D(""String_Node_Str"",new ControlArbHUD(),worldPixelScale);
  try {
    window=hudApp.createWindow(component.getWidth(),component.getHeight(),Type.PRIMARY,false,hudPixelScale,""String_Node_Str"");
    JComponent comp=((HUDComponent2D)component).getComponent();
    ((WindowSwing)window).setComponent(comp);
  }
 catch (  InstantiationException e) {
    logger.warning(""String_Node_Str"" + e);
  }
  return window;
}"
46048,"public void actionPerformed(ActionEvent e){
  logger.info(""String_Node_Str"" + e);
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + e);
    close(hudFrameMap.get((HUDFrameHeader2D)e.getSource()));
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + e);
    minimizeComponent(hudFrameMap.get((HUDFrameHeader2D)e.getSource()));
  }
}","public void actionPerformed(ActionEvent e){
  logger.fine(""String_Node_Str"" + e);
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + e);
    close(hudFrameMap.get((HUDFrameHeader2D)e.getSource()));
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + e);
    minimizeComponent(hudFrameMap.get((HUDFrameHeader2D)e.getSource()));
  }
}"
46049,"protected void componentResized(HUDComponent2D component){
  logger.finest(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  HUDView2D view=state.getView();
  if (view != null) {
    view.setSizeApp(component.getSize());
    if (component.getDecoratable()) {
      HUDView2D frameView=state.getFrameView();
      if (frameView != null) {
        HUDFrameHeader2D frame=state.getFrame();
        frameView.setLocationOrtho(new Vector2f(0.0f,(float)(0.75 * frame.getHeight() / 2 + 0.75f * component.getSize().height / 2)));
        frameView.setSizeApp(new Dimension((int)(component.getWidth()),frame.getHeight()));
      }
    }
  }
}","protected void componentResized(HUDComponent2D component){
  logger.finest(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  HUDView2D view=state.getView();
  if (view != null) {
    view.setSizeApp(component.getSize());
    if (component.getDecoratable()) {
      HUDView2D frameView=state.getFrameView();
      if (frameView != null) {
        HUDFrameHeader2D frame=state.getFrame();
        frameView.setLocationOrtho(new Vector2f(0.0f,(float)(0.75 * frame.getHeight() / 2 + 0.75f * component.getSize().height / 2)));
        frameView.setSizeApp(new Dimension((int)(component.getWidth()),frame.getHeight()));
      }
    }
  }
}"
46050,"protected void componentMovedWorld(HUDComponent2D component){
  logger.finest(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  HUDView3D view=state.getWorldView();
  if (view != null) {
    Vector3f worldOffset=component.getWorldLocation();
    view.setOffset(new Vector2f(worldOffset.x,worldOffset.y));
  }
}","protected void componentMovedWorld(HUDComponent2D component){
  logger.finest(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  HUDView3D view=state.getWorldView();
  if (view != null) {
    Vector3f worldOffset=component.getWorldLocation();
    view.setOffset(new Vector2f(worldOffset.x,worldOffset.y));
  }
}"
46051,"protected void componentMoved(HUDComponent2D component){
  logger.finest(""String_Node_Str"" + component.getX() + ""String_Node_Str""+ component.getY());
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  HUDView2D view=state.getView();
  if (view != null) {
    Vector2f location=(layout != null) ? layout.getLocation(component) : new Vector2f(component.getX(),component.getY());
    view.setLocationOrtho(new Vector2f(location.x + view.getDisplayerLocalWidth() / 2,location.y + view.getDisplayerLocalHeight() / 2),true);
  }
}","protected void componentMoved(HUDComponent2D component){
  logger.finest(""String_Node_Str"" + component.getX() + ""String_Node_Str""+ component.getY());
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  HUDView2D view=state.getView();
  if (view != null) {
    Vector2f location=(layout != null) ? layout.getLocation(component) : new Vector2f(component.getX(),component.getY());
    view.setLocationOrtho(new Vector2f(location.x + view.getDisplayerLocalWidth() / 2,location.y + view.getDisplayerLocalHeight() / 2),true);
  }
}"
46052,"protected void componentMaximized(HUDComponent2D component){
  logger.fine(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state != null) {
  }
}","protected void componentMaximized(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state != null) {
    component.setVisible(true);
  }
}"
46053,"/** 
 * {@inheritDoc}
 */
public void removeComponent(HUDComponent component){
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state != null) {
    HUDView2D view2D=state.getView();
    if (view2D != null) {
      view2D.cleanup();
      view2D=null;
    }
    HUDView2D frameView=state.getFrameView();
    if (frameView != null) {
      frameView.cleanup();
      frameView=null;
    }
    HUDView3D view3D=state.getWorldView();
    if (view3D != null) {
      view3D.cleanup();
      view3D=null;
    }
    component.removeEventListener(this);
    hudStateMap.remove(component);
    state=null;
  }
}","/** 
 * {@inheritDoc}
 */
public void removeComponent(HUDComponent component){
  logger.fine(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state != null) {
    HUDView2D view2D=state.getView();
    if (view2D != null) {
      view2D.cleanup();
      view2D=null;
    }
    HUDView2D frameView=state.getFrameView();
    if (frameView != null) {
      frameView.cleanup();
      frameView=null;
    }
    HUDView3D view3D=state.getWorldView();
    if (view3D != null) {
      view3D.cleanup();
      view3D=null;
    }
    hudStateMap.remove(component);
    state=null;
  }
}"
46054,"protected void componentVisible(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  if (state.isVisible()) {
  }
  HUDView2D view=state.getView();
  if (view == null) {
    if (hudDisplayer == null) {
      hudDisplayer=new HUDView2DDisplayer();
    }
    view=hudDisplayer.createView(state.getWindow());
    state.setView(view);
    if (layout != null) {
      layout.addView(component,view);
    }
  }
  view.setOrtho(true,false);
  view.setPixelScaleOrtho(hudPixelScale,false);
  view.setVisibleUser(false);
  Vector2f location=(layout != null) ? layout.getLocation(component) : new Vector2f(component.getX(),component.getY());
  component.setLocation((int)location.x,(int)location.y,false);
  view.setLocationOrtho(new Vector2f(location.x + view.getDisplayerLocalWidth() / 2,location.y + view.getDisplayerLocalHeight() / 2),false);
  component.changeTransparency(1.0f,component.getPreferredTransparency() != 1.0f ? component.getPreferredTransparency() : unfocusedTransparency);
  view.setVisibleApp(true,false);
  view.setVisibleUser(true);
  if (component.getDecoratable()) {
    showFrame(component,true);
  }
}","protected void componentVisible(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  HUDView2D view=state.getView();
  if (view == null) {
    if (hudDisplayer == null) {
      hudDisplayer=new HUDView2DDisplayer();
    }
    view=hudDisplayer.createView(state.getWindow());
    state.setView(view);
    if (layout != null) {
      layout.addView(component,view);
    }
  }
  view.setOrtho(true,false);
  view.setPixelScaleOrtho(hudPixelScale,false);
  view.setVisibleUser(false);
  Vector2f location=(layout != null) ? layout.getLocation(component) : new Vector2f(component.getX(),component.getY());
  component.setLocation((int)location.x,(int)location.y,false);
  view.setLocationOrtho(new Vector2f(location.x + view.getDisplayerLocalWidth() / 2,location.y + view.getDisplayerLocalHeight() / 2),false);
  component.changeTransparency(1.0f,component.getPreferredTransparency() != 1.0f ? component.getPreferredTransparency() : unfocusedTransparency);
  view.setVisibleApp(true,false);
  view.setVisibleUser(true);
  if (component.getDecoratable()) {
    showFrame(component,true);
  }
}"
46055,"/** 
 * Creates the table based upon the list of registered components
 */
private JTable createTable(){
  CellComponentRegistry registry=CellComponentRegistry.getCellComponentRegistry();
  Set<CellComponentFactorySPI> factories=registry.getAllCellFactories();
  CellServerState state=editframe.getCellServerState();
  Iterator<CellComponentFactorySPI> it=factories.iterator();
  while (it.hasNext() == true) {
    CellComponentFactorySPI spi=it.next();
    Class clazz=spi.getDefaultCellComponentServerState().getClass();
    if (state.getComponentServerState(clazz) != null) {
      it.remove();
    }
  }
  int size=factories.size();
  Object[][] entries=new Object[size][2];
  int i=0;
  for (  CellComponentFactorySPI factory : factories) {
    entries[i][0]=factory.getDisplayName();
    entries[i][1]=factory.getDescription();
    factoryMap.put(factory.getDisplayName(),factory);
    i++;
  }
  Object[] names=new Object[]{""String_Node_Str"",""String_Node_Str""};
  JTable table=new JTable(entries,names);
  return table;
}","/** 
 * Creates the table based upon the list of registered components
 */
private JTable createTable(){
  CellComponentRegistry registry=CellComponentRegistry.getCellComponentRegistry();
  Set<CellComponentFactorySPI> factories=registry.getAllCellFactories();
  CellServerState state=editframe.getCellServerState();
  Iterator<CellComponentFactorySPI> it=factories.iterator();
  while (it.hasNext() == true) {
    CellComponentFactorySPI spi=it.next();
    Class clazz=spi.getDefaultCellComponentServerState().getClass();
    if (state.getComponentServerState(clazz) != null) {
      it.remove();
    }
  }
  List<CellComponentFactorySPI> factoryList=new LinkedList(factories);
  Comparator nameComparator=new Comparator<CellComponentFactorySPI>(){
    public int compare(    CellComponentFactorySPI o1,    CellComponentFactorySPI o2){
      return o1.getDisplayName().compareTo(o2.getDisplayName());
    }
  }
;
  Collections.sort(factoryList,nameComparator);
  int size=factoryList.size();
  Object[][] entries=new Object[size][2];
  int i=0;
  for (  CellComponentFactorySPI factory : factoryList) {
    entries[i][0]=factory.getDisplayName();
    entries[i][1]=factory.getDescription();
    factoryMap.put(factory.getDisplayName(),factory);
    i++;
  }
  Object[] names=new Object[]{""String_Node_Str"",""String_Node_Str""};
  JTable table=new JTable(entries,names);
  return table;
}"
46056,"@Override public void initialize(ServerSessionManager loginInfo){
  paletteMI=new JMenuItem(""String_Node_Str"");
  paletteMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      CellPalette cellPaletteFrame;
      if (cellPaletteFrameRef == null || cellPaletteFrameRef.get() == null) {
        cellPaletteFrame=new CellPalette();
        cellPaletteFrameRef=new WeakReference(cellPaletteFrame);
      }
 else {
        cellPaletteFrame=cellPaletteFrameRef.get();
      }
      if (cellPaletteFrame.isVisible() == false) {
        cellPaletteFrame.setVisible(true);
      }
    }
  }
);
  paletteHUDMI=new JMenuItem(""String_Node_Str"");
  paletteHUDMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      new Thread(){
        @Override public void run(){
          if (paletteHUD == null) {
            createHUD();
          }
          paletteHUD.setVisible(true);
        }
      }
.start();
    }
  }
);
  super.initialize(loginInfo);
}","@Override public void initialize(ServerSessionManager loginInfo){
  paletteMI=new JMenuItem(""String_Node_Str"");
  paletteMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      CellPalette cellPaletteFrame;
      if (cellPaletteFrameRef == null || cellPaletteFrameRef.get() == null) {
        cellPaletteFrame=new CellPalette();
        cellPaletteFrameRef=new WeakReference(cellPaletteFrame);
      }
 else {
        cellPaletteFrame=cellPaletteFrameRef.get();
      }
      if (cellPaletteFrame.isVisible() == false) {
        cellPaletteFrame.setVisible(true);
      }
      cellPaletteFrame.toFront();
    }
  }
);
  paletteHUDMI=new JMenuItem(""String_Node_Str"");
  paletteHUDMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      new Thread(){
        @Override public void run(){
          if (paletteHUD == null) {
            createHUD();
          }
          paletteHUD.setVisible(true);
        }
      }
.start();
    }
  }
);
  super.initialize(loginInfo);
}"
46057,"private void callEnded(PresenceInfo callee,String reason){
  CallEndedHUDPanel callEndedHUDPanel=new CallEndedHUDPanel(callee,reason);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  HUDComponent callEndedHUDComponent=mainHUD.createComponent(callEndedHUDPanel);
  callEndedHUDPanel.setHUDComponent(callEndedHUDComponent);
  callEndedHUDComponent.setPreferredLocation(Layout.CENTER);
  mainHUD.addComponent(callEndedHUDComponent);
  callEndedHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  callEndedHUDComponent.setVisible(true);
}","private void callEnded(PresenceInfo callee,String reason){
  CallEndedHUDPanel callEndedHUDPanel=new CallEndedHUDPanel(callee,reason);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  HUDComponent callEndedHUDComponent=mainHUD.createComponent(callEndedHUDPanel);
  callEndedHUDPanel.setHUDComponent(callEndedHUDComponent);
  callEndedHUDComponent.setPreferredLocation(Layout.CENTER);
  callEndedHUDComponent.setIcon(voiceChatIcon);
  mainHUD.addComponent(callEndedHUDComponent);
  callEndedHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  callEndedHUDComponent.setVisible(true);
}"
46058,"public void showUsers(java.awt.event.ActionEvent evt){
  if (presenceInfo == null) {
    return;
  }
  if (userListHUDComponent == null) {
    userListHUDPanel=new UserListHUDPanel(this,session,pm,cell);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    userListHUDComponent=mainHUD.createComponent(userListHUDPanel);
    userListHUDPanel.setHUDComponent(userListHUDComponent);
    userListHUDComponent.setPreferredLocation(Layout.NORTHWEST);
    userListHUDComponent.setName(""String_Node_Str"");
    userListHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
    mainHUD.addComponent(userListHUDComponent);
    userListHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
          usersMenuSelected=false;
          userListJMenuItem.setSelected(usersMenuSelected);
        }
      }
    }
);
  }
  userListHUDPanel.setUserList();
  userListHUDComponent.setVisible(usersMenuSelected);
}","public void showUsers(java.awt.event.ActionEvent evt){
  if (presenceInfo == null) {
    return;
  }
  if (userListHUDComponent == null) {
    userListHUDPanel=new UserListHUDPanel(this,session,pm,cell);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    userListHUDComponent=mainHUD.createComponent(userListHUDPanel);
    userListHUDPanel.setHUDComponent(userListHUDComponent);
    userListHUDComponent.setPreferredLocation(Layout.NORTHWEST);
    userListHUDComponent.setName(""String_Node_Str"");
    userListHUDComponent.setIcon(userListIcon);
    mainHUD.addComponent(userListHUDComponent);
    userListHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
          usersMenuSelected=false;
          userListJMenuItem.setSelected(usersMenuSelected);
        }
      }
    }
);
  }
  userListHUDPanel.setUserList();
  userListHUDComponent.setVisible(usersMenuSelected);
}"
46059,"public void voiceChat(){
  if (presenceInfo == null) {
    return;
  }
  AddHUDPanel addPanel=new AddHUDPanel(this,session,presenceInfo,presenceInfo);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addComponent=mainHUD.createComponent(addPanel);
  addPanel.setHUDComponent(addComponent);
  addComponent.setPreferredLocation(Layout.CENTER);
  addComponent.setName(""String_Node_Str"");
  mainHUD.addComponent(addComponent);
  addComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addComponent.setVisible(false);
      }
    }
  }
;
  addPanel.addPropertyChangeListener(plistener);
  addComponent.setVisible(true);
}","public void voiceChat(){
  if (presenceInfo == null) {
    return;
  }
  AddHUDPanel addPanel=new AddHUDPanel(this,session,presenceInfo,presenceInfo);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addComponent=mainHUD.createComponent(addPanel);
  addPanel.setHUDComponent(addComponent);
  addComponent.setPreferredLocation(Layout.CENTER);
  addComponent.setName(""String_Node_Str"");
  addComponent.setIcon(voiceChatIcon);
  mainHUD.addComponent(addComponent);
  addComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addComponent.setVisible(false);
      }
    }
  }
;
  addPanel.addPropertyChangeListener(plistener);
  addComponent.setVisible(true);
}"
46060,"@Override public void handleMessage(Message message){
  logger.fine(""String_Node_Str"");
  if (message instanceof GetVoiceBridgeResponseMessage) {
    startSoftphone((GetVoiceBridgeResponseMessage)message);
    return;
  }
  if (message instanceof ChangeUsernameAliasMessage) {
    changeUsernameAlias((ChangeUsernameAliasMessage)message);
    return;
  }
  if (message instanceof VoiceChatJoinRequestMessage) {
    final IncomingCallHUDPanel incomingCallHUDPanel=new IncomingCallHUDPanel(this,session,cell.getCellID(),(VoiceChatJoinRequestMessage)message);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    final HUDComponent incomingCallHUDComponent=mainHUD.createComponent(incomingCallHUDPanel);
    incomingCallHUDPanel.setHUDComponent(incomingCallHUDComponent);
    incomingCallHUDComponent.setPreferredLocation(Layout.CENTER);
    mainHUD.addComponent(incomingCallHUDComponent);
    incomingCallHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
          incomingCallHUDPanel.busy();
        }
      }
    }
);
    incomingCallHUDComponent.setVisible(true);
    return;
  }
  if (message instanceof VoiceChatBusyMessage) {
    VoiceChatBusyMessage msg=(VoiceChatBusyMessage)message;
    VoiceChatBusyHUDPanel voiceChatBusyHUDPanel=new VoiceChatBusyHUDPanel(msg.getCallee());
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    HUDComponent voiceChatBusyHUDComponent=mainHUD.createComponent(voiceChatBusyHUDPanel);
    voiceChatBusyHUDPanel.setHUDComponent(voiceChatBusyHUDComponent);
    voiceChatBusyHUDComponent.setPreferredLocation(Layout.CENTER);
    mainHUD.addComponent(voiceChatBusyHUDComponent);
    voiceChatBusyHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
        }
      }
    }
);
    voiceChatBusyHUDComponent.setVisible(true);
    notifyMemberChangeListeners(msg.getGroup(),msg.getCallee(),false);
    return;
  }
  if (message instanceof VoiceChatInfoResponseMessage) {
    VoiceChatInfoResponseMessage msg=(VoiceChatInfoResponseMessage)message;
    notifyMemberChangeListeners(msg.getGroup(),msg.getChatters());
    return;
  }
  if (message instanceof VoiceChatJoinAcceptedMessage) {
    joinVoiceChat((VoiceChatJoinAcceptedMessage)message);
    return;
  }
  if (message instanceof VoiceChatHoldMessage) {
    VoiceChatHoldMessage msg=(VoiceChatHoldMessage)message;
    return;
  }
  if (message instanceof VoiceChatLeaveMessage) {
    leaveVoiceChat((VoiceChatLeaveMessage)message);
    return;
  }
  if (message instanceof VoiceChatCallEndedMessage) {
    VoiceChatCallEndedMessage msg=(VoiceChatCallEndedMessage)message;
    voiceChatCallEnded(msg);
    session.send(this,new VoiceChatLeaveMessage(msg.getGroup(),msg.getCallee()));
    return;
  }
  if (message instanceof ConeOfSilenceEnterExitMessage) {
    coneOfSilenceEnterExit((ConeOfSilenceEnterExitMessage)message);
    return;
  }
  if (message instanceof PlayerInRangeMessage) {
    PlayerInRangeMessage msg=(PlayerInRangeMessage)message;
    logger.info(""String_Node_Str"" + msg.isInRange() + ""String_Node_Str""+ msg.getPlayerID()+ ""String_Node_Str""+ msg.getPlayerInRangeID());
    return;
  }
  if (message instanceof CallEstablishedMessage) {
    if (callMigrationForm != null) {
      callMigrationForm.setStatus(""String_Node_Str"");
    }
    return;
  }
  if (message instanceof CallMigrateMessage) {
    callMigrate((CallMigrateMessage)message);
    return;
  }
  if (message instanceof CallMutedMessage) {
    callMuted((CallMutedMessage)message);
    return;
  }
  if (message instanceof CallSpeakingMessage) {
    callSpeaking((CallSpeakingMessage)message);
    return;
  }
  if (message instanceof CallEndedMessage) {
    callEnded((CallEndedMessage)message);
    return;
  }
  logger.warning(""String_Node_Str"" + message);
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void handleMessage(Message message){
  logger.fine(""String_Node_Str"");
  if (message instanceof GetVoiceBridgeResponseMessage) {
    startSoftphone((GetVoiceBridgeResponseMessage)message);
    return;
  }
  if (message instanceof ChangeUsernameAliasMessage) {
    changeUsernameAlias((ChangeUsernameAliasMessage)message);
    return;
  }
  if (message instanceof VoiceChatJoinRequestMessage) {
    final IncomingCallHUDPanel incomingCallHUDPanel=new IncomingCallHUDPanel(this,session,cell.getCellID(),(VoiceChatJoinRequestMessage)message);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    final HUDComponent incomingCallHUDComponent=mainHUD.createComponent(incomingCallHUDPanel);
    incomingCallHUDPanel.setHUDComponent(incomingCallHUDComponent);
    incomingCallHUDComponent.setPreferredLocation(Layout.CENTER);
    incomingCallHUDComponent.setIcon(voiceChatIcon);
    mainHUD.addComponent(incomingCallHUDComponent);
    incomingCallHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
          incomingCallHUDPanel.busy();
        }
      }
    }
);
    incomingCallHUDComponent.setVisible(true);
    return;
  }
  if (message instanceof VoiceChatBusyMessage) {
    VoiceChatBusyMessage msg=(VoiceChatBusyMessage)message;
    VoiceChatBusyHUDPanel voiceChatBusyHUDPanel=new VoiceChatBusyHUDPanel(msg.getCallee());
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    HUDComponent voiceChatBusyHUDComponent=mainHUD.createComponent(voiceChatBusyHUDPanel);
    voiceChatBusyHUDPanel.setHUDComponent(voiceChatBusyHUDComponent);
    voiceChatBusyHUDComponent.setPreferredLocation(Layout.CENTER);
    voiceChatBusyHUDComponent.setIcon(voiceChatIcon);
    mainHUD.addComponent(voiceChatBusyHUDComponent);
    voiceChatBusyHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
        }
      }
    }
);
    voiceChatBusyHUDComponent.setVisible(true);
    notifyMemberChangeListeners(msg.getGroup(),msg.getCallee(),false);
    return;
  }
  if (message instanceof VoiceChatInfoResponseMessage) {
    VoiceChatInfoResponseMessage msg=(VoiceChatInfoResponseMessage)message;
    notifyMemberChangeListeners(msg.getGroup(),msg.getChatters());
    return;
  }
  if (message instanceof VoiceChatJoinAcceptedMessage) {
    joinVoiceChat((VoiceChatJoinAcceptedMessage)message);
    return;
  }
  if (message instanceof VoiceChatHoldMessage) {
    VoiceChatHoldMessage msg=(VoiceChatHoldMessage)message;
    return;
  }
  if (message instanceof VoiceChatLeaveMessage) {
    leaveVoiceChat((VoiceChatLeaveMessage)message);
    return;
  }
  if (message instanceof VoiceChatCallEndedMessage) {
    VoiceChatCallEndedMessage msg=(VoiceChatCallEndedMessage)message;
    voiceChatCallEnded(msg);
    session.send(this,new VoiceChatLeaveMessage(msg.getGroup(),msg.getCallee()));
    return;
  }
  if (message instanceof ConeOfSilenceEnterExitMessage) {
    coneOfSilenceEnterExit((ConeOfSilenceEnterExitMessage)message);
    return;
  }
  if (message instanceof PlayerInRangeMessage) {
    PlayerInRangeMessage msg=(PlayerInRangeMessage)message;
    logger.info(""String_Node_Str"" + msg.isInRange() + ""String_Node_Str""+ msg.getPlayerID()+ ""String_Node_Str""+ msg.getPlayerInRangeID());
    return;
  }
  if (message instanceof CallEstablishedMessage) {
    if (callMigrationForm != null) {
      callMigrationForm.setStatus(""String_Node_Str"");
    }
    return;
  }
  if (message instanceof CallMigrateMessage) {
    callMigrate((CallMigrateMessage)message);
    return;
  }
  if (message instanceof CallMutedMessage) {
    callMuted((CallMutedMessage)message);
    return;
  }
  if (message instanceof CallSpeakingMessage) {
    callSpeaking((CallSpeakingMessage)message);
    return;
  }
  if (message instanceof CallEndedMessage) {
    callEnded((CallEndedMessage)message);
    return;
  }
  logger.warning(""String_Node_Str"" + message);
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
46061,"/** 
 * Create a new AudioManagerClient
 * @param session the session to connect to, guaranteed to be inthe CONNECTED state
 * @throws org.jdesktop.wonderland.client.comms.ConnectionFailureException
 */
public AudioManagerClient(){
  AudioMenu.getAudioMenu(this).setEnabled(false);
  userListJMenuItem=new javax.swing.JCheckBoxMenuItem();
  userListJMenuItem.setText(""String_Node_Str"");
  userListJMenuItem.setSelected(usersMenuSelected);
  userListJMenuItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      usersMenuSelected=!usersMenuSelected;
      userListJMenuItem.setSelected(usersMenuSelected);
      showUsers(evt);
    }
  }
);
  userListJMenuItem.setEnabled(false);
  logger.fine(""String_Node_Str"");
}","/** 
 * Create a new AudioManagerClient
 * @param session the session to connect to, guaranteed to be inthe CONNECTED state
 * @throws org.jdesktop.wonderland.client.comms.ConnectionFailureException
 */
public AudioManagerClient(){
  AudioMenu.getAudioMenu(this).setEnabled(false);
  voiceChatIcon=new ImageIcon(getClass().getResource(""String_Node_Str""));
  userListIcon=new ImageIcon(getClass().getResource(""String_Node_Str""));
  userListJMenuItem=new javax.swing.JCheckBoxMenuItem();
  userListJMenuItem.setText(""String_Node_Str"");
  userListJMenuItem.setSelected(usersMenuSelected);
  userListJMenuItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      usersMenuSelected=!usersMenuSelected;
      userListJMenuItem.setSelected(usersMenuSelected);
      showUsers(evt);
    }
  }
);
  userListJMenuItem.setEnabled(false);
  logger.fine(""String_Node_Str"");
}"
46062,"private void phoneButtonActionPerformed(java.awt.event.ActionEvent evt){
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,presenceInfo,presenceInfo);
  addHUDPanel.setPhoneType();
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDComponent.setName(""String_Node_Str"");
  addHUDComponent.setPreferredLocation(Layout.CENTER);
  addHUDPanel.setHUDComponent(addHUDComponent);
  mainHUD.addComponent(addHUDComponent);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setVisible(true);
}","private void phoneButtonActionPerformed(java.awt.event.ActionEvent evt){
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,presenceInfo,presenceInfo);
  addHUDPanel.setPhoneType();
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDComponent.setName(""String_Node_Str"");
  addHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  addHUDComponent.setPreferredLocation(Layout.CENTER);
  addHUDPanel.setHUDComponent(addHUDComponent);
  mainHUD.addComponent(addHUDComponent);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setVisible(true);
}"
46063,"private void editButtonActionPerformed(java.awt.event.ActionEvent evt){
  HUDComponent changeNameHUDComponent=changeNameMap.get(presenceInfo);
  if (changeNameHUDComponent == null) {
    ChangeNameHUDPanel changeNameHUDPanel=new ChangeNameHUDPanel(this,pm,presenceInfo);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    final HUDComponent comp=mainHUD.createComponent(changeNameHUDPanel);
    comp.setPreferredLocation(Layout.NORTH);
    comp.setName(""String_Node_Str"");
    mainHUD.addComponent(comp);
    changeNameMap.put(presenceInfo,comp);
    PropertyChangeListener plistener=new PropertyChangeListener(){
      public void propertyChange(      PropertyChangeEvent pe){
        if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
          comp.setVisible(false);
        }
      }
    }
;
    changeNameHUDPanel.addPropertyChangeListener(plistener);
    changeNameHUDComponent=comp;
  }
  changeNameHUDComponent.setVisible(true);
}","private void editButtonActionPerformed(java.awt.event.ActionEvent evt){
  HUDComponent changeNameHUDComponent=changeNameMap.get(presenceInfo);
  if (changeNameHUDComponent == null) {
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    ChangeNameHUDPanel changeNameHUDPanel=new ChangeNameHUDPanel(this,pm,presenceInfo);
    final HUDComponent comp=mainHUD.createComponent(changeNameHUDPanel);
    comp.setPreferredLocation(Layout.NORTH);
    comp.setName(""String_Node_Str"");
    comp.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
    mainHUD.addComponent(comp);
    changeNameMap.put(presenceInfo,comp);
    PropertyChangeListener plistener=new PropertyChangeListener(){
      public void propertyChange(      PropertyChangeEvent pe){
        if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
          comp.setVisible(false);
        }
      }
    }
;
    changeNameHUDPanel.addPropertyChangeListener(plistener);
    changeNameHUDComponent=comp;
  }
  changeNameHUDComponent.setVisible(true);
}"
46064,"private void voiceChatButtonActionPerformed(java.awt.event.ActionEvent evt){
  ArrayList<PresenceInfo> usersToInvite=new ArrayList();
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length > 0) {
    for (int i=0; i < selectedValues.length; i++) {
      String username=NameTagNode.getUsername((String)selectedValues[i]);
      PresenceInfo info=pm.getAliasPresenceInfo(username);
      if (info == null) {
        System.out.println(""String_Node_Str"" + username);
        continue;
      }
      if (info.equals(presenceInfo)) {
        continue;
      }
      usersToInvite.add(info);
    }
  }
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,presenceInfo,presenceInfo);
  addHUDPanel.inviteUsers(usersToInvite);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDPanel.setHUDComponent(addHUDComponent);
  mainHUD.addComponent(addHUDComponent);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addHUDComponent.setVisible(false);
      }
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setPreferredLocation(Layout.CENTER);
  addHUDComponent.setVisible(true);
  addHUDPanel.setLocation(userListHUDComponent.getX() + userListHUDComponent.getWidth(),userListHUDComponent.getY() + userListHUDComponent.getHeight() - addHUDComponent.getHeight());
}","private void voiceChatButtonActionPerformed(java.awt.event.ActionEvent evt){
  ArrayList<PresenceInfo> usersToInvite=new ArrayList();
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length > 0) {
    for (int i=0; i < selectedValues.length; i++) {
      String username=NameTagNode.getUsername((String)selectedValues[i]);
      PresenceInfo info=pm.getAliasPresenceInfo(username);
      if (info == null) {
        System.out.println(""String_Node_Str"" + username);
        continue;
      }
      if (info.equals(presenceInfo)) {
        continue;
      }
      usersToInvite.add(info);
    }
  }
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,presenceInfo,presenceInfo);
  addHUDPanel.inviteUsers(usersToInvite);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDPanel.setHUDComponent(addHUDComponent);
  addHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  mainHUD.addComponent(addHUDComponent);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addHUDComponent.setVisible(false);
      }
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setPreferredLocation(Layout.CENTER);
  addHUDComponent.setVisible(true);
  addHUDPanel.setLocation(userListHUDComponent.getX() + userListHUDComponent.getWidth(),userListHUDComponent.getY() + userListHUDComponent.getHeight() - addHUDComponent.getHeight());
}"
46065,"private void propertiesButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (namePropertiesHUDComponent == null) {
    NamePropertiesHUDPanel namePropertiesHUDPanel=new NamePropertiesHUDPanel(presenceInfo);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    namePropertiesHUDComponent=mainHUD.createComponent(namePropertiesHUDPanel);
    namePropertiesHUDComponent.setPreferredLocation(Layout.NORTH);
    namePropertiesHUDComponent.setName(""String_Node_Str"");
    mainHUD.addComponent(namePropertiesHUDComponent);
    PropertyChangeListener plistener=new PropertyChangeListener(){
      public void propertyChange(      PropertyChangeEvent pe){
        if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
          namePropertiesHUDComponent.setVisible(false);
        }
      }
    }
;
    namePropertiesHUDPanel.addPropertyChangeListener(plistener);
  }
  namePropertiesHUDComponent.setVisible(true);
}","private void propertiesButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (namePropertiesHUDComponent == null) {
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    NamePropertiesHUDPanel namePropertiesHUDPanel=new NamePropertiesHUDPanel(presenceInfo);
    namePropertiesHUDComponent=mainHUD.createComponent(namePropertiesHUDPanel);
    namePropertiesHUDComponent.setPreferredLocation(Layout.NORTH);
    namePropertiesHUDComponent.setName(""String_Node_Str"");
    namePropertiesHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
    mainHUD.addComponent(namePropertiesHUDComponent);
    PropertyChangeListener plistener=new PropertyChangeListener(){
      public void propertyChange(      PropertyChangeEvent pe){
        if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
          namePropertiesHUDComponent.setVisible(false);
        }
      }
    }
;
    namePropertiesHUDPanel.addPropertyChangeListener(plistener);
  }
  namePropertiesHUDComponent.setVisible(true);
}"
46066,"private void addButtonActionPerformed(ActionEvent e){
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,myPresenceInfo,myPresenceInfo,group,Mode.ADD);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDComponent.setName(""String_Node_Str"");
  addHUDPanel.setHUDComponent(addHUDComponent);
  addHUDPanel.setPreferredLocation(Layout.EAST);
  mainHUD.addComponent(addHUDComponent);
  inProgressButtonPanel.setEnabledAddButton(false);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
        inProgressButtonPanel.setEnabledAddButton(true);
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addHUDComponent.setVisible(false);
      }
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setVisible(true);
}","private void addButtonActionPerformed(ActionEvent e){
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,myPresenceInfo,myPresenceInfo,group,Mode.ADD);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDComponent.setName(""String_Node_Str"");
  addHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  addHUDPanel.setHUDComponent(addHUDComponent);
  addHUDPanel.setPreferredLocation(Layout.EAST);
  mainHUD.addComponent(addHUDComponent);
  inProgressButtonPanel.setEnabledAddButton(false);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
        inProgressButtonPanel.setEnabledAddButton(true);
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addHUDComponent.setVisible(false);
      }
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setVisible(true);
}"
46067,"private void AnswerButtonActionPerformed(java.awt.event.ActionEvent evt){
  logger.info(""String_Node_Str"");
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,myPresenceInfo,caller,group);
  addHUDPanel.setMode(Mode.IN_PROGRESS);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  addComponent=mainHUD.createComponent(addHUDPanel);
  addHUDPanel.setHUDComponent(addComponent);
  addHUDPanel.setPreferredLocation(Layout.NORTHWEST);
  mainHUD.addComponent(addComponent);
  addComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.CLOSED)) {
        addComponent=null;
      }
    }
  }
);
  addComponent.setVisible(true);
  session.send(client,new VoiceChatJoinAcceptedMessage(group,myPresenceInfo,chatType));
  answered=true;
  if (chatType.equals(ChatType.PRIVATE)) {
    client.getWlAvatarCharacter().playAnimation(""String_Node_Str"");
  }
 else {
    client.getWlAvatarCharacter().stop();
  }
  incomingCallHUDComponent.setVisible(false);
}","private void AnswerButtonActionPerformed(java.awt.event.ActionEvent evt){
  logger.info(""String_Node_Str"");
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,myPresenceInfo,caller,group);
  addHUDPanel.setMode(Mode.IN_PROGRESS);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  addComponent=mainHUD.createComponent(addHUDPanel);
  addComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  addHUDPanel.setHUDComponent(addComponent);
  addHUDPanel.setPreferredLocation(Layout.NORTHWEST);
  mainHUD.addComponent(addComponent);
  addComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.CLOSED)) {
        addComponent=null;
      }
    }
  }
);
  addComponent.setVisible(true);
  session.send(client,new VoiceChatJoinAcceptedMessage(group,myPresenceInfo,chatType));
  answered=true;
  if (chatType.equals(ChatType.PRIVATE)) {
    client.getWlAvatarCharacter().playAnimation(""String_Node_Str"");
  }
 else {
    client.getWlAvatarCharacter().stop();
  }
  incomingCallHUDComponent.setVisible(false);
}"
46068,"/** 
 * Move the client to the given location
 * @param serverURL the url of the server to go to, or null to stayon the current server
 * @param location the location to go to, or null to go to the defaultlocation on the given server
 * @param look the direction to look in, or null to look in the defaultdirection
 * @throws IOException if there is an error going to the new location
 */
public void gotoLocation(String serverURL,Vector3f translation,Quaternion look) throws IOException {
  if (serverURL == null) {
    if (curSession == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    serverURL=curSession.getSessionManager().getServerURL();
  }
  if (curSession != null && serverURL.equals(curSession.getSessionManager().getServerURL())) {
    curSession.getLocalAvatar().localMoveRequest(translation,look);
  }
 else {
    loadServer(serverURL,translation,look);
  }
}","/** 
 * Move the client to the given location
 * @param serverURL the url of the server to go to, or null to stayon the current server
 * @param location the location to go to, or null to go to the defaultlocation on the given server
 * @param look the direction to look in, or null to look in the defaultdirection
 * @throws IOException if there is an error going to the new location
 */
public void gotoLocation(String serverURL,Vector3f translation,Quaternion look) throws IOException {
  if (serverURL == null) {
    if (curSession == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    serverURL=curSession.getSessionManager().getServerURL();
  }
  if (curSession != null && serverURL.equals(curSession.getSessionManager().getServerURL())) {
    ViewCell vc=curSession.getLocalAvatar().getViewCell();
    if (vc instanceof AvatarCell) {
      ((AvatarCell)vc).triggerGoto(translation,look);
    }
  }
 else {
    loadServer(serverURL,translation,look);
  }
}"
46069,"public void actionPerformed(ActionEvent e){
  String url=placemark.getUrl();
  float x=placemark.getX();
  float y=placemark.getY();
  float z=placemark.getZ();
  float angle=placemark.getAngle();
  Vector3f location=new Vector3f(x,y,z);
  Quaternion look=new Quaternion(0.0f,1.0f,0.0f,angle);
  JFrame frame=JmeClientMain.getFrame().getFrame();
  JOptionPane.showMessageDialog(frame,""String_Node_Str"");
}","public void actionPerformed(ActionEvent e){
  String url=placemark.getUrl();
  float x=placemark.getX();
  float y=placemark.getY();
  float z=placemark.getZ();
  float angle=placemark.getAngle();
  Vector3f location=new Vector3f(x,y,z);
  Quaternion look=new Quaternion();
  Vector3f axis=new Vector3f(Vector3f.UNIT_Y);
  look.fromAngleAxis((float)Math.toRadians(angle),axis);
  try {
    ClientContextJME.getClientMain().gotoLocation(url,location,look);
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,null,ex);
  }
}"
46070,"/** 
 */
public String importFile(File file,String extension){
  final JFrame frame=JmeClientMain.getFrame().getFrame();
  if (isContentExists(file) == true) {
    int result=JOptionPane.showConfirmDialog(frame,""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION);
    if (result == JOptionPane.NO_OPTION) {
      return null;
    }
  }
  JOptionPane waitMsg=new JOptionPane(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
  final JDialog dialog=waitMsg.createDialog(frame,""String_Node_Str"");
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      dialog.setVisible(true);
    }
  }
);
  String uri=null;
  try {
    uri=uploadContent(file);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + file.getAbsolutePath(),excp);
    final String fileName=file.getName();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
        JOptionPane.showMessageDialog(frame,""String_Node_Str"" + fileName,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
);
    return null;
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      dialog.setVisible(false);
    }
  }
);
  createCell(uri);
  return uri;
}","/** 
 */
public String importFile(File file,String extension){
  final JFrame frame=JmeClientMain.getFrame().getFrame();
  if (isContentExists(file) == true) {
    int result=JOptionPane.showConfirmDialog(frame,""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION);
    if (result == JOptionPane.NO_OPTION) {
      return null;
    }
  }
  JOptionPane waitMsg=new JOptionPane(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
  final JDialog dialog=waitMsg.createDialog(frame,""String_Node_Str"");
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      dialog.setVisible(true);
    }
  }
);
  String uri=null;
  try {
    uri=uploadContent(file);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + file.getAbsolutePath(),excp);
    final String fileName=file.getName();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
        JOptionPane.showMessageDialog(frame,""String_Node_Str"" + fileName,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
);
    return null;
  }
 finally {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
      }
    }
);
  }
  createCell(uri);
  return uri;
}"
46071,"public void actionPerformed(ActionEvent event){
  String action=gestureMap.get(event.getActionCommand());
  logger.info(""String_Node_Str"" + event.getActionCommand());
  if (action.equals(""String_Node_Str"") == true) {
    CharacterEyes eyes=avatar.getEyes();
    eyes.wink(false);
  }
 else   if (action.equals(""String_Node_Str"") == true) {
    CharacterEyes eyes=avatar.getEyes();
    eyes.wink(true);
  }
 else {
    avatar.playAnimation(action);
  }
}","public void actionPerformed(ActionEvent event){
  String action=gestureMap.get(event.getActionCommand());
  logger.info(""String_Node_Str"" + event.getActionCommand());
  if (action.equals(""String_Node_Str"") == true) {
    avatar.triggerActionStart(TriggerNames.SitOnGround);
  }
 else   if (action.equals(""String_Node_Str"") == true) {
    CharacterEyes eyes=avatar.getEyes();
    eyes.wink(false);
  }
 else {
    avatar.playAnimation(action);
  }
}"
46072,"public void run(){
  if (mainHUD == null) {
    mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  }
  for (  String name : buttonMap.keySet()) {
    HUDButton button=buttonMap.get(name);
    button.setVisible(false);
  }
  buttonMap.clear();
  gestureMap.clear();
  if (avatar == null) {
    return;
  }
  for (  String action : avatar.getAnimationNames()) {
    String name=action;
    if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(5);
    }
 else     if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(7);
    }
    gestureMap.put(bundle.getString(name),action);
  }
  gestureMap.put(""String_Node_Str"",""String_Node_Str"");
  gestureMap.put(""String_Node_Str"",""String_Node_Str"");
  for (  String name : gestureMap.keySet()) {
    int row=0;
    int column=0;
    for (    String[] gesture : gestures) {
      if (gesture[0].equals(name)) {
        column=Integer.valueOf(gesture[1]);
        row=Integer.valueOf(gesture[2]);
        HUDButton button=mainHUD.createButton(name);
        button.setDecoratable(false);
        button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
        mainHUD.addComponent(button);
        buttonMap.put(name,button);
        button.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent event){
            String action=gestureMap.get(event.getActionCommand());
            logger.info(""String_Node_Str"" + event.getActionCommand());
            if (action.equals(""String_Node_Str"") == true) {
              CharacterEyes eyes=avatar.getEyes();
              eyes.wink(false);
            }
 else             if (action.equals(""String_Node_Str"") == true) {
              CharacterEyes eyes=avatar.getEyes();
              eyes.wink(true);
            }
 else {
              avatar.playAnimation(action);
            }
          }
        }
);
        break;
      }
    }
  }
  setVisible(true);
}","public void run(){
  if (mainHUD == null) {
    mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  }
  for (  String name : buttonMap.keySet()) {
    HUDButton button=buttonMap.get(name);
    mainHUD.removeComponent(button);
  }
  buttonMap.clear();
  gestureMap.clear();
  if (avatar == null) {
    return;
  }
  for (  String action : avatar.getAnimationNames()) {
    String name=action;
    if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(5);
    }
 else     if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(7);
    }
    gestureMap.put(bundle.getString(name),action);
  }
  gestureMap.put(""String_Node_Str"",""String_Node_Str"");
  gestureMap.put(""String_Node_Str"",""String_Node_Str"");
  for (  String name : gestureMap.keySet()) {
    int row=0;
    int column=0;
    for (    String[] gesture : gestures) {
      if (gesture[0].equals(name)) {
        column=Integer.valueOf(gesture[1]);
        row=Integer.valueOf(gesture[2]);
        HUDButton button=mainHUD.createButton(name);
        button.setDecoratable(false);
        button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
        mainHUD.addComponent(button);
        buttonMap.put(name,button);
        button.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent event){
            String action=gestureMap.get(event.getActionCommand());
            logger.info(""String_Node_Str"" + event.getActionCommand());
            if (action.equals(""String_Node_Str"") == true) {
              avatar.triggerActionStart(TriggerNames.SitOnGround);
            }
 else             if (action.equals(""String_Node_Str"") == true) {
              CharacterEyes eyes=avatar.getEyes();
              eyes.wink(false);
            }
 else {
              avatar.playAnimation(action);
            }
          }
        }
);
        break;
      }
    }
  }
  setVisible(true);
}"
46073,"public void setAvatarCharacter(final WlAvatarCharacter avatar){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (mainHUD == null) {
        mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
      }
      for (      String name : buttonMap.keySet()) {
        HUDButton button=buttonMap.get(name);
        button.setVisible(false);
      }
      buttonMap.clear();
      gestureMap.clear();
      if (avatar == null) {
        return;
      }
      for (      String action : avatar.getAnimationNames()) {
        String name=action;
        if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(5);
        }
 else         if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(7);
        }
        gestureMap.put(bundle.getString(name),action);
      }
      gestureMap.put(""String_Node_Str"",""String_Node_Str"");
      gestureMap.put(""String_Node_Str"",""String_Node_Str"");
      for (      String name : gestureMap.keySet()) {
        int row=0;
        int column=0;
        for (        String[] gesture : gestures) {
          if (gesture[0].equals(name)) {
            column=Integer.valueOf(gesture[1]);
            row=Integer.valueOf(gesture[2]);
            HUDButton button=mainHUD.createButton(name);
            button.setDecoratable(false);
            button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
            mainHUD.addComponent(button);
            buttonMap.put(name,button);
            button.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent event){
                String action=gestureMap.get(event.getActionCommand());
                logger.info(""String_Node_Str"" + event.getActionCommand());
                if (action.equals(""String_Node_Str"") == true) {
                  CharacterEyes eyes=avatar.getEyes();
                  eyes.wink(false);
                }
 else                 if (action.equals(""String_Node_Str"") == true) {
                  CharacterEyes eyes=avatar.getEyes();
                  eyes.wink(true);
                }
 else {
                  avatar.playAnimation(action);
                }
              }
            }
);
            break;
          }
        }
      }
      setVisible(true);
    }
  }
);
}","public void setAvatarCharacter(final WlAvatarCharacter avatar){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (mainHUD == null) {
        mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
      }
      for (      String name : buttonMap.keySet()) {
        HUDButton button=buttonMap.get(name);
        mainHUD.removeComponent(button);
      }
      buttonMap.clear();
      gestureMap.clear();
      if (avatar == null) {
        return;
      }
      for (      String action : avatar.getAnimationNames()) {
        String name=action;
        if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(5);
        }
 else         if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(7);
        }
        gestureMap.put(bundle.getString(name),action);
      }
      gestureMap.put(""String_Node_Str"",""String_Node_Str"");
      gestureMap.put(""String_Node_Str"",""String_Node_Str"");
      for (      String name : gestureMap.keySet()) {
        int row=0;
        int column=0;
        for (        String[] gesture : gestures) {
          if (gesture[0].equals(name)) {
            column=Integer.valueOf(gesture[1]);
            row=Integer.valueOf(gesture[2]);
            HUDButton button=mainHUD.createButton(name);
            button.setDecoratable(false);
            button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
            mainHUD.addComponent(button);
            buttonMap.put(name,button);
            button.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent event){
                String action=gestureMap.get(event.getActionCommand());
                logger.info(""String_Node_Str"" + event.getActionCommand());
                if (action.equals(""String_Node_Str"") == true) {
                  avatar.triggerActionStart(TriggerNames.SitOnGround);
                }
 else                 if (action.equals(""String_Node_Str"") == true) {
                  CharacterEyes eyes=avatar.getEyes();
                  eyes.wink(false);
                }
 else {
                  avatar.playAnimation(action);
                }
              }
            }
);
            break;
          }
        }
      }
      setVisible(true);
    }
  }
);
}"
46074,"/** 
 * Specifies whether to also display this app in the HUD. Note: this is in addition to  displaying the app in the world.
 */
public synchronized void setShowInHUD(boolean showInHUD){
  if (this.showInHUD == showInHUD)   return;
  this.showInHUD=showInHUD;
  if (showInHUD) {
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    for (    Window2D window : windows) {
      HUDComponent component=mainHUD.createComponent(window);
      component.setPreferredLocation(Layout.CENTER);
      mainHUD.addComponent(component);
      component.setVisible(true);
    }
  }
 else {
  }
}","/** 
 * Specifies whether to also display this app in the HUD. Note: this is in addition to  displaying the app in the world.
 */
public synchronized void setShowInHUD(boolean showInHUD){
  if (this.showInHUD == showInHUD)   return;
  this.showInHUD=showInHUD;
  if (showInHUD) {
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    for (    Window2D window : windows) {
      if (window instanceof WindowSwingHeader)       continue;
      System.err.println(""String_Node_Str"" + window);
      HUDComponent component=mainHUD.createComponent(window);
      component.setPreferredLocation(Layout.CENTER);
      mainHUD.addComponent(component);
      component.setVisible(true);
    }
  }
 else {
  }
}"
46075,"public void actionPerformed(ContextMenuItemEvent event){
  Window2D.this.restackToBottom();
}","public void actionPerformed(ContextMenuItemEvent event){
}"
46076,"public void actionPerformed(ContextMenuItemEvent event){
  app.getControlArb().takeControl();
}","public void actionPerformed(ContextMenuItemEvent event){
  app.setShowInHUD(true);
}"
46077,"/** 
 * Return the app-specific window menu items for the case where the app doesn't have control.
 */
private ContextMenuItem[] windowMenuItemsForNoControl(ContextMenuComponent contextMenuComp){
  return new ContextMenuItem[]{new SimpleContextMenuItem(""String_Node_Str"",new ContextMenuActionListener(){
    public void actionPerformed(    ContextMenuItemEvent event){
      app.getControlArb().takeControl();
    }
  }
)};
}","/** 
 * Return the app-specific window menu items for the case where the app doesn't have control.
 */
private ContextMenuItem[] windowMenuItemsForNoControl(ContextMenuComponent contextMenuComp){
  contextMenuComp.setShowStandardMenuItems(true);
  return new ContextMenuItem[]{new SimpleContextMenuItem(""String_Node_Str"",new ContextMenuActionListener(){
    public void actionPerformed(    ContextMenuItemEvent event){
      app.getControlArb().takeControl();
    }
  }
),new SimpleContextMenuItem(""String_Node_Str"",new ContextMenuActionListener(){
    public void actionPerformed(    ContextMenuItemEvent event){
      app.setShowInHUD(true);
    }
  }
)};
}"
46078,"public void run(){
  while (true) {
    String[] names=nameTagList.toArray(new String[0]);
    for (int i=0; i < names.length; i++) {
      String name=names[i];
      NameTagNode nameTag=NameTagNode.getNameTagNode(name);
      if (nameTag == null) {
        continue;
      }
      nameTagList.remove(name);
      PresenceInfo[] info=pm.getUserPresenceInfo(name);
      if (info == null || info.length == 0) {
        System.out.println(""String_Node_Str"" + name);
        continue;
      }
      PresenceInfo pi=info[0];
      nameTag.updateLabel(pi.usernameAlias,pi.inConeOfSilence,pi.isSpeaking,pi.isMuted);
    }
    if (nameTagList.size() == 0) {
      break;
    }
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
    }
  }
}","public void run(){
  while (true) {
    String[] names=nameTagList.toArray(new String[0]);
    for (int i=0; i < names.length; i++) {
      String name=names[i];
      NameTagNode nameTag=NameTagNode.getNameTagNode(name);
      if (nameTag == null) {
        continue;
      }
      nameTagList.remove(name);
      PresenceInfo info=pm.getUserPresenceInfo(name);
      if (info == null) {
        System.out.println(""String_Node_Str"" + name);
        continue;
      }
      nameTag.updateLabel(info.usernameAlias,info.inConeOfSilence,info.isSpeaking,info.isMuted);
    }
    if (nameTagList.size() == 0) {
      break;
    }
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
    }
  }
}"
46079,"public void microphoneData(String data){
  if (count == VU_COUNT) {
    count=0;
    volume=Math.round(Math.sqrt(volume) * 100) / 100D;
    meter.setValue(volume);
    volume=0;
  }
 else {
    double volume=Math.abs(Double.parseDouble(data));
    if (volume > this.volume) {
      this.volume=volume;
    }
  }
  count++;
}","public void microphoneData(String data){
  if (count == VU_COUNT) {
    count=0;
    volume=Math.round(Math.sqrt(volume) * 100) / 100D;
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        meter.setValue(volume);
      }
    }
);
    volume=0;
  }
 else {
    double volume=Math.abs(Double.parseDouble(data));
    if (volume > this.volume) {
      this.volume=volume;
    }
  }
  count++;
}"
46080,"public void startVuMeter(boolean startVuMeter){
  SoftphoneControl sc=SoftphoneControlImpl.getInstance();
  client.removeDisconnectListener(this);
  sc.removeSoftphoneListener(this);
  sc.removeMicrophoneInfoListener(this);
  if (startVuMeter) {
    client.addDisconnectListener(this);
    sc.addSoftphoneListener(this);
    sc.addMicrophoneInfoListener(this);
    try {
      sc.sendCommandToSoftphone(""String_Node_Str"");
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
  }
  sc.startVuMeter(startVuMeter);
  setVisible(startVuMeter);
}","public void startVuMeter(final boolean startVuMeter){
  SoftphoneControl sc=SoftphoneControlImpl.getInstance();
  client.removeDisconnectListener(this);
  sc.removeSoftphoneListener(this);
  sc.removeMicrophoneInfoListener(this);
  if (startVuMeter) {
    client.addDisconnectListener(this);
    sc.addSoftphoneListener(this);
    sc.addMicrophoneInfoListener(this);
    try {
      sc.sendCommandToSoftphone(""String_Node_Str"");
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
  }
  sc.startVuMeter(startVuMeter);
  java.awt.EventQueue.invokeLater(new Runnable(){
    public void run(){
      setVisible(startVuMeter);
    }
  }
);
}"
46081,"private void voiceChatButtonActionPerformed(java.awt.event.ActionEvent evt){
  ArrayList<PresenceInfo> usersToInvite=new ArrayList();
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length > 0) {
    for (int i=0; i < selectedValues.length; i++) {
      String username=NameTagNode.getUsername((String)selectedValues[i]);
      PresenceInfo info=pm.getAliasPresenceInfo(username);
      if (info == null) {
        System.out.println(""String_Node_Str"" + username);
        continue;
      }
      if (info.equals(presenceInfo)) {
        continue;
      }
      usersToInvite.add(info);
    }
  }
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,presenceInfo,presenceInfo);
  addHUDPanel.inviteUsers(usersToInvite);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDPanel.setHUDComponent(addHUDComponent);
  mainHUD.addComponent(addHUDComponent);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addHUDComponent.setVisible(false);
      }
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setPreferredLocation(Layout.CENTER);
  addHUDComponent.setVisible(true);
}","private void voiceChatButtonActionPerformed(java.awt.event.ActionEvent evt){
  ArrayList<PresenceInfo> usersToInvite=new ArrayList();
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length > 0) {
    for (int i=0; i < selectedValues.length; i++) {
      String username=NameTagNode.getUsername((String)selectedValues[i]);
      PresenceInfo info=pm.getAliasPresenceInfo(username);
      if (info == null) {
        System.out.println(""String_Node_Str"" + username);
        continue;
      }
      if (info.equals(presenceInfo)) {
        continue;
      }
      usersToInvite.add(info);
    }
  }
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,presenceInfo,presenceInfo);
  addHUDPanel.inviteUsers(usersToInvite);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDPanel.setHUDComponent(addHUDComponent);
  mainHUD.addComponent(addHUDComponent);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addHUDComponent.setVisible(false);
      }
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setPreferredLocation(Layout.CENTER);
  addHUDComponent.setVisible(true);
  addHUDPanel.setLocation(userListHUDComponent.getX() + userListHUDComponent.getWidth(),userListHUDComponent.getY() + userListHUDComponent.getHeight() - addHUDComponent.getHeight());
}"
46082,"/** 
 * Returns the name of the controlling user.
 */
public String getControllingUser(){
  return ((ControlArbXrw)app.getControlArb()).getController();
}","/** 
 * Returns the name of the controlling user.
 */
public String getControllingUser(){
  ControlArb controlArb=app.getControlArb();
  if (controlArb instanceof ControlArbNull)   return null;
  return ((ControlArbXrw)controlArb).getController();
}"
46083,"/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  jLabel1=new javax.swing.JLabel();
  jLabel2=new javax.swing.JLabel();
  jButton1=new javax.swing.JButton();
  setMaximumSize(new java.awt.Dimension(32767,29));
  setMinimumSize(new java.awt.Dimension(50,29));
  jButton1.setFont(new java.awt.Font(""String_Node_Str"",0,10));
  jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  org.jdesktop.layout.GroupLayout layout=new org.jdesktop.layout.GroupLayout(this);
  this.setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(22,22,22).add(jLabel1,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,202,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(jLabel2,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,106,Short.MAX_VALUE).add(36,36,36).add(jButton1)));
  layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jButton1).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel2).add(jLabel1))).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
}","/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  jLabel1=new javax.swing.JLabel();
  jLabel2=new javax.swing.JLabel();
  jButton1=new javax.swing.JButton();
  setMaximumSize(new java.awt.Dimension(32767,29));
  setMinimumSize(new java.awt.Dimension(50,29));
  jLabel1.setText(""String_Node_Str"");
  jLabel2.setText(""String_Node_Str"");
  jButton1.setFont(new java.awt.Font(""String_Node_Str"",0,10));
  jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  org.jdesktop.layout.GroupLayout layout=new org.jdesktop.layout.GroupLayout(this);
  this.setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(22,22,22).add(jLabel1,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,202,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(jLabel2,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,106,Short.MAX_VALUE).add(36,36,36).add(jButton1)));
  layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jButton1).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel2).add(jLabel1))).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
}"
46084,"public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,Message message){
  AppContext.getDataManager().markForUpdate(this);
  if (message instanceof ClientConnectMessage) {
    sender.send(clientID,new ClientConnectResponseMessage(presenceInfoList.toArray(new PresenceInfo[0])));
    return;
  }
  if (message instanceof PlayerInRangeListenerMessage) {
    PlayerInRangeListenerMessage msg=(PlayerInRangeListenerMessage)message;
    PresenceInfo info=presenceInfoMap.get(clientID.getID());
    if (info == null) {
      System.out.println(""String_Node_Str"" + clientID.getID());
      return;
    }
    if (msg.getAdd() == true) {
      PlayerInRangeNotifier notifier=new PlayerInRangeNotifier(info);
      ManagedReference<PlayerInRangeNotifier> notifierRef=AppContext.getDataManager().createReference(notifier);
      notifiers.put(clientID.getID(),notifierRef);
      return;
    }
    ManagedReference<PlayerInRangeNotifier> notifierRef=notifiers.remove(clientID.getID());
    if (notifierRef == null) {
      System.out.println(""String_Node_Str"" + clientID.getID());
      return;
    }
    notifierRef.get().done();
    return;
  }
  if (message instanceof PresenceInfoAddedMessage) {
    PresenceInfo presenceInfo=((PresenceInfoAddedMessage)message).getPresenceInfo();
    if (presenceInfoList.contains(presenceInfo)) {
      return;
    }
    presenceInfoMap.put(clientID.getID(),presenceInfo);
    presenceInfoList.add(presenceInfo);
    logger.fine(""String_Node_Str"" + presenceInfo);
    sender.send(message);
    return;
  }
  if (message instanceof PresenceInfoRemovedMessage) {
    PresenceInfo presenceInfo=((PresenceInfoRemovedMessage)message).getPresenceInfo();
    presenceInfoMap.remove(clientID.getID());
    presenceInfoList.remove(presenceInfo);
    sender.send(message);
    return;
  }
  if (message instanceof PresenceInfoChangeMessage) {
    PresenceInfo presenceInfo=((PresenceInfoChangeMessage)message).getPresenceInfo();
    presenceInfoList.remove(presenceInfo);
    presenceInfoList.add(presenceInfo);
    sender.send(message);
    return;
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + message);
}","public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,Message message){
  AppContext.getDataManager().markForUpdate(this);
  if (message instanceof ClientConnectMessage) {
    sender.send(clientID,new ClientConnectResponseMessage(presenceInfoList.toArray(new PresenceInfo[0])));
    return;
  }
  if (message instanceof PlayerInRangeListenerMessage) {
    PlayerInRangeListenerMessage msg=(PlayerInRangeListenerMessage)message;
    PresenceInfo info=presenceInfoMap.get(clientID.getID());
    if (info == null) {
      System.out.println(""String_Node_Str"" + clientID.getID());
      return;
    }
    if (msg.getAdd() == true) {
      PlayerInRangeNotifier notifier=new PlayerInRangeNotifier(info);
      ManagedReference<PlayerInRangeNotifier> notifierRef=AppContext.getDataManager().createReference(notifier);
      notifiers.put(clientID.getID(),notifierRef);
      return;
    }
    ManagedReference<PlayerInRangeNotifier> notifierRef=notifiers.remove(clientID.getID());
    if (notifierRef == null) {
      System.out.println(""String_Node_Str"" + clientID.getID());
      return;
    }
    notifierRef.get().done();
    return;
  }
  if (message instanceof PresenceInfoAddedMessage) {
    PresenceInfo presenceInfo=((PresenceInfoAddedMessage)message).getPresenceInfo();
    if (presenceInfoList.contains(presenceInfo)) {
      return;
    }
    if (presenceInfo.clientID != null) {
      presenceInfoMap.put(presenceInfo.clientID,presenceInfo);
    }
    presenceInfoList.add(presenceInfo);
    logger.fine(""String_Node_Str"" + presenceInfo);
    sender.send(message);
    return;
  }
  if (message instanceof PresenceInfoRemovedMessage) {
    PresenceInfo presenceInfo=((PresenceInfoRemovedMessage)message).getPresenceInfo();
    if (presenceInfo.clientID != null) {
      presenceInfoMap.remove(presenceInfo.clientID);
    }
    presenceInfoList.remove(presenceInfo);
    sender.send(message);
    return;
  }
  if (message instanceof PresenceInfoChangeMessage) {
    PresenceInfo presenceInfo=((PresenceInfoChangeMessage)message).getPresenceInfo();
    presenceInfoList.remove(presenceInfo);
    presenceInfoList.add(presenceInfo);
    sender.send(message);
    return;
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + message);
}"
46085,"public void clientDisconnected(WonderlandClientSender sender,WonderlandClientID clientID){
  PresenceInfo info=presenceInfoMap.get(clientID.getID());
  logger.warning(""String_Node_Str"" + clientID.getID() + ""String_Node_Str""+ info);
  if (info == null) {
    logger.fine(""String_Node_Str"" + clientID.getID());
    return;
  }
  AppContext.getDataManager().markForUpdate(this);
  ManagedReference<PlayerInRangeNotifier> notifierRef=notifiers.remove(clientID.getID());
  if (notifierRef == null) {
    System.out.println(""String_Node_Str"" + clientID.getID());
  }
 else {
    notifierRef.get().done();
  }
  presenceInfoList.remove(info);
  sender.send(new PresenceInfoRemovedMessage(info));
}","public void clientDisconnected(WonderlandClientSender sender,WonderlandClientID clientID){
  PresenceInfo info=presenceInfoMap.get(clientID.getID());
  logger.warning(""String_Node_Str"" + clientID.getID() + ""String_Node_Str""+ info);
  if (info == null) {
    logger.warning(""String_Node_Str"" + clientID.getID());
    return;
  }
  AppContext.getDataManager().markForUpdate(this);
  ManagedReference<PlayerInRangeNotifier> notifierRef=notifiers.remove(clientID.getID());
  if (notifierRef == null) {
    System.out.println(""String_Node_Str"" + clientID.getID());
  }
 else {
    notifierRef.get().done();
  }
  presenceInfoList.remove(info);
  sender.send(new PresenceInfoRemovedMessage(info));
}"
46086,"@Override public void disconnected(){
  super.disconnected();
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.removeViewCellConfiguredListener(this);
  SoftphoneControlImpl.getInstance().removeSoftphoneListener(this);
  SoftphoneControlImpl.getInstance().sendCommandToSoftphone(""String_Node_Str"");
  InputManager.inputManager().removeGlobalEventListener(muteListener);
  notifyDisconnectListeners();
}","@Override public void disconnected(){
  super.disconnected();
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.removeViewCellConfiguredListener(this);
  SoftphoneControlImpl.getInstance().removeSoftphoneListener(this);
  SoftphoneControlImpl.getInstance().sendCommandToSoftphone(""String_Node_Str"");
  notifyDisconnectListeners();
}"
46087,"@Override public void connect(WonderlandSession session) throws ConnectionFailureException {
  super.connect(session);
  this.session=session;
  pm=PresenceManagerFactory.getPresenceManager(session);
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.addViewCellConfiguredListener(this);
  if (avatar.getViewCell() != null) {
    viewConfigured(avatar);
  }
  SoftphoneControlImpl.getInstance().addSoftphoneListener(this);
  InputManager.inputManager().addGlobalEventListener(muteListener);
  AudioMenu.getAudioMenu(this).setEnabled(true);
  userListJMenuItem.setEnabled(true);
}","@Override public void connect(WonderlandSession session) throws ConnectionFailureException {
  super.connect(session);
  this.session=session;
  pm=PresenceManagerFactory.getPresenceManager(session);
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.addViewCellConfiguredListener(this);
  if (avatar.getViewCell() != null) {
    viewConfigured(avatar);
  }
  SoftphoneControlImpl.getInstance().addSoftphoneListener(this);
  AudioMenu.getAudioMenu(this).setEnabled(true);
  userListJMenuItem.setEnabled(true);
}"
46088,"public void softphoneMuted(boolean isMuted){
  if (isMuted == this.isMuted) {
    return;
  }
  this.isMuted=isMuted;
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  if (session.getStatus() == WonderlandSession.Status.CONNECTED) {
    session.send(this,new MuteCallMessage(sc.getCallID(),sc.isMuted()));
  }
 else {
    logger.warning(""String_Node_Str"");
  }
}","public void softphoneMuted(boolean isMuted){
  if (this.isMuted == isMuted) {
    return;
  }
  mute(isMuted);
}"
46089,"public void mute(boolean isMuted){
  if (this.isMuted == isMuted) {
    return;
  }
  this.isMuted=isMuted;
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  sc.mute(isMuted);
  if (session.getStatus() == WonderlandSession.Status.CONNECTED) {
    session.send(this,new MuteCallMessage(sc.getCallID(),isMuted));
  }
 else {
    logger.warning(""String_Node_Str"");
  }
}","public void mute(boolean isMuted){
  this.isMuted=isMuted;
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  sc.mute(isMuted);
  if (session.getStatus() == WonderlandSession.Status.CONNECTED) {
    session.send(this,new MuteCallMessage(sc.getCallID(),isMuted));
  }
 else {
    logger.warning(""String_Node_Str"");
  }
}"
46090,"/** 
 * The view cells transform has changed so update our internal structures
 * @param cell
 */
public void viewCellMoved(CellID viewCellID,CellTransform worldTransform){
  Vector3f worldTranslation=worldTransform.getTranslation(null);
synchronized (worldProxBounds) {
    BoundingVolume nowIn=null;
    int nowInIndex=-1;
    int i=0;
    while (i < worldProxBounds.length) {
      if (worldProxBounds[i].contains(worldTranslation)) {
        nowIn=worldProxBounds[i];
        nowInIndex=i;
      }
 else {
        i=worldProxBounds.length;
      }
      i++;
    }
    if (currentlyInIndex != nowInIndex) {
      if (nowInIndex < currentlyInIndex) {
        proximityListener.viewEnterExit(false,currentlyIn,currentlyInIndex,viewCellID);
      }
 else {
        proximityListener.viewEnterExit(true,nowIn,nowInIndex,viewCellID);
      }
      currentlyIn=nowIn;
      currentlyInIndex=nowInIndex;
    }
  }
}","/** 
 * The view cells transform has changed so update our internal structures
 * @param cell
 */
public void viewCellMoved(CellID viewCellID,CellTransform viewCellTransform){
  Vector3f viewCellWorldTranslation=viewCellTransform.getTranslation(null);
synchronized (worldProxBounds) {
    BoundingVolume currentContainer=null;
    int currentContainerIndex=-1;
    int i=0;
    while (i < worldProxBounds.length) {
      if (worldProxBounds[i].contains(viewCellWorldTranslation)) {
        currentContainer=worldProxBounds[i];
        currentContainerIndex=i;
      }
 else {
        i=worldProxBounds.length;
      }
      i++;
    }
    int lastContainerIndex=-1;
    if (this.lastContainerIndexMap.containsKey(viewCellID))     lastContainerIndex=this.lastContainerIndexMap.get(viewCellID);
    if (lastContainerIndex != currentContainerIndex) {
      if (currentContainerIndex < lastContainerIndex) {
        proximityListener.viewEnterExit(false,this.lastContainerMap.get(viewCellID),lastContainerIndex,viewCellID);
        if (currentContainerIndex == -1) {
          this.lastContainerMap.remove(viewCellID);
          this.lastContainerIndexMap.remove(viewCellID);
        }
      }
 else {
        proximityListener.viewEnterExit(true,currentContainer,currentContainerIndex,viewCellID);
        lastContainerMap.put(viewCellID,currentContainer);
        lastContainerIndexMap.put(viewCellID,currentContainerIndex);
      }
    }
  }
}"
46091,"/** 
 * Set a list of bounds for which the system will track view enter/exit for this cell. When the view enters/exits one of these bounds the listener will be called with the index of the bounds in the supplied array. The bounds must be ordered from largest to smallest, thus localBounds[i] must enclose localBounds[i+1]. An IllegalArgumentException will be thrown if this is not the case.
 * @param bounds
 */
void setProximityBounds(BoundingVolume[] localBounds){
  this.localProxBounds=new BoundingVolume[localBounds.length];
  this.worldProxBounds=new BoundingVolume[localBounds.length];
  int i=0;
  for (  BoundingVolume b : localBounds) {
    this.localProxBounds[i]=b.clone(null);
    worldProxBounds[i]=b.clone(null);
    if (i > 0 && !Math3DUtils.encloses(localProxBounds[i - 1],localProxBounds[i]))     throw new IllegalArgumentException(""String_Node_Str"");
    i++;
  }
}","/** 
 * Set a list of bounds for which the system will track view enter/exit for this cell. When the view enters/exits one of these bounds the listener will be called with the index of the bounds in the supplied array. The bounds must be ordered from largest to smallest, thus localBounds[i] must enclose localBounds[i+1]. An IllegalArgumentException will be thrown if this is not the case.
 * @param bounds
 */
public void setProximityBounds(BoundingVolume[] localBounds){
  this.localProxBounds=new BoundingVolume[localBounds.length];
  this.worldProxBounds=new BoundingVolume[localBounds.length];
  int i=0;
  for (  BoundingVolume b : localBounds) {
    this.localProxBounds[i]=b.clone(null);
    worldProxBounds[i]=b.clone(null);
    if (i > 0 && !Math3DUtils.encloses(localProxBounds[i - 1],localProxBounds[i]))     throw new IllegalArgumentException(""String_Node_Str"");
    i++;
  }
}"
46092,"private void inputEvent(Event event){
  if (event instanceof KeyEvent3D == false) {
    return;
  }
  KeyEvent3D e=(KeyEvent3D)event;
  if (e.isPressed() == false || e.getKeyChar() != '[') {
    return;
  }
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  boolean isMuted=sc.isMuted();
  isMuted=!isMuted;
  sc.mute(isMuted);
  session.send(this,new MuteCallMessage(sc.getCallID(),isMuted));
}","private void inputEvent(Event event){
  if (event instanceof KeyEvent3D == false) {
    return;
  }
  KeyEvent3D e=(KeyEvent3D)event;
  if (e.isPressed() == false || e.getKeyChar() != '[') {
    return;
  }
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  boolean isMuted=sc.isMuted();
  isMuted=!isMuted;
  this.isMuted=isMuted;
  sc.mute(isMuted);
  session.send(this,new MuteCallMessage(sc.getCallID(),isMuted));
}"
46093,"public void softphoneMuted(boolean isMuted){
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  if (session.getStatus() == WonderlandSession.Status.CONNECTED) {
    session.send(this,new MuteCallMessage(sc.getCallID(),sc.isMuted()));
  }
 else {
    logger.warning(""String_Node_Str"");
  }
}","public void softphoneMuted(boolean isMuted){
  if (isMuted == this.isMuted) {
    return;
  }
  this.isMuted=isMuted;
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  if (session.getStatus() == WonderlandSession.Status.CONNECTED) {
    session.send(this,new MuteCallMessage(sc.getCallID(),sc.isMuted()));
  }
 else {
    logger.warning(""String_Node_Str"");
  }
}"
46094,"public void mute(boolean isMuted){
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  sc.mute(isMuted);
  if (session.getStatus() == WonderlandSession.Status.CONNECTED) {
    session.send(this,new MuteCallMessage(sc.getCallID(),isMuted));
  }
 else {
    logger.warning(""String_Node_Str"");
  }
}","public void mute(boolean isMuted){
  if (this.isMuted == isMuted) {
    return;
  }
  this.isMuted=isMuted;
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  sc.mute(isMuted);
  if (session.getStatus() == WonderlandSession.Status.CONNECTED) {
    session.send(this,new MuteCallMessage(sc.getCallID(),isMuted));
  }
 else {
    logger.warning(""String_Node_Str"");
  }
}"
46095,"private void changePrivacy(ChatType chatType){
  Object[] selectedValues=selectableMemberList.getSelectedValues();
  String members=""String_Node_Str"";
  for (int i=0; i < selectedValues.length; i++) {
    if (i > 0) {
      members+=""String_Node_Str"";
    }
    members+=NameTagNode.getUsername((String)selectedValues[i]);
  }
  if (members.length() == 0) {
    session.send(client,new VoiceChatJoinMessage(group,presenceInfo,new PresenceInfo[0],chatType));
    return;
  }
  PresenceInfo[] membersInfo=VoiceChatDialog.getPresenceInfo(pm,members);
  for (int i=0; i < membersInfo.length; i++) {
    PresenceInfo info=membersInfo[i];
    if (info.clientID != null && presenceInfo.equals(info) == false) {
      continue;
    }
    session.send(client,new VoiceChatJoinMessage(group,info,new PresenceInfo[0],chatType));
  }
}","private void changePrivacy(ChatType chatType){
  Object[] selectedValues=selectableMemberList.getSelectedValues();
  ArrayList<PresenceInfo> membersInfo=new ArrayList();
  for (int i=0; i < selectedValues.length; i++) {
    String usernameAlias=NameTagNode.getUsername((String)selectedValues[i]);
    PresenceInfo[] info=pm.getAliasPresenceInfo(usernameAlias);
    if (info == null || info.length == 0) {
      System.out.println(""String_Node_Str"" + usernameAlias);
      continue;
    }
  }
  if (membersInfo.size() == 0) {
    session.send(client,new VoiceChatJoinMessage(group,presenceInfo,new PresenceInfo[0],chatType));
    return;
  }
  for (  PresenceInfo info : membersInfo) {
    if (info.clientID != null && presenceInfo.equals(info) == false) {
      continue;
    }
    session.send(client,new VoiceChatJoinMessage(group,info,new PresenceInfo[0],chatType));
  }
}"
46096,"private int setMemberList(){
  PresenceInfo[] presenceInfoList=pm.getAllUsers();
  ArrayList<String> memberData=new ArrayList();
  ArrayList<String> selectableMemberData=new ArrayList();
  for (int i=0; i < presenceInfoList.length; i++) {
    PresenceInfo info=presenceInfoList[i];
    if (info.callID == null) {
      continue;
    }
    if (memberscontains(info) == false) {
      for (      PresenceInfo member : members) {
      }
      continue;
    }
    if (info.clientID == null || info.equals(presenceInfo)) {
      selectableMemberData.add(NameTagNode.getDisplayName(info.usernameAlias,info.isSpeaking,info.isMuted));
    }
 else {
      memberData.add(NameTagNode.getDisplayName(info.usernameAlias,info.isSpeaking,info.isMuted));
    }
  }
  String[] memberArray=memberData.toArray(new String[0]);
  SortUsers.sort(memberArray);
  memberList.setListData(memberArray);
  String[] selectableMemberArray=selectableMemberData.toArray(new String[0]);
  SortUsers.sort(selectableMemberArray);
  selectableMemberList.setListData(selectableMemberArray);
  return selectableMemberData.size();
}","private int setMemberList(){
  PresenceInfo[] presenceInfoList=pm.getAllUsers();
  ArrayList<String> memberData=new ArrayList();
  ArrayList<String> selectableMemberData=new ArrayList();
  for (int i=0; i < presenceInfoList.length; i++) {
    PresenceInfo info=presenceInfoList[i];
    if (info.callID == null) {
      continue;
    }
    if (memberscontains(info) == false) {
      for (      PresenceInfo member : members) {
      }
      continue;
    }
    if (info.clientID == null || info.equals(presenceInfo)) {
      selectableMemberData.add(NameTagNode.getDisplayName(info.usernameAlias,info.isSpeaking,info.isMuted));
    }
 else {
      memberData.add(NameTagNode.getDisplayName(info.usernameAlias,info.isSpeaking,info.isMuted));
    }
  }
  String[] memberArray=memberData.toArray(new String[0]);
  SortUsers.sort(memberArray);
  memberList.setListData(memberArray);
  String[] selectableMemberArray=selectableMemberData.toArray(new String[0]);
  SortUsers.sort(selectableMemberArray);
  boolean needToUpdate=false;
  if (currentArray.length == selectableMemberArray.length) {
    for (int i=0; i < selectableMemberArray.length; i++) {
      if (currentArray[i].equals(selectableMemberArray[i]) == false) {
        needToUpdate=true;
        break;
      }
    }
  }
 else {
    needToUpdate=true;
  }
  if (needToUpdate) {
    currentArray=selectableMemberArray;
    selectableMemberList.setListData(selectableMemberArray);
  }
  return selectableMemberData.size();
}"
46097,"private void endCall(){
  Object[] selectedValues=selectableMemberList.getSelectedValues();
  String members=""String_Node_Str"";
  for (int i=0; i < selectedValues.length; i++) {
    if (i > 0) {
      members+=""String_Node_Str"";
    }
    members+=NameTagNode.getUsername((String)selectedValues[i]);
  }
  if (members.length() == 0) {
    session.send(client,new VoiceChatLeaveMessage(group,presenceInfo));
    return;
  }
  PresenceInfo[] membersInfo=VoiceChatDialog.getPresenceInfo(pm,members);
  for (int i=0; i < membersInfo.length; i++) {
    PresenceInfo info=membersInfo[i];
    if (info.clientID != null && presenceInfo.equals(info) == false) {
      continue;
    }
    session.send(client,new VoiceChatLeaveMessage(group,info));
  }
}","private void endCall(){
  Object[] selectedValues=selectableMemberList.getSelectedValues();
  ArrayList<PresenceInfo> membersInfo=new ArrayList();
  for (int i=0; i < selectedValues.length; i++) {
    String usernameAlias=NameTagNode.getUsername((String)selectedValues[i]);
    PresenceInfo[] info=pm.getAliasPresenceInfo(usernameAlias);
    if (info == null || info.length == 0) {
      System.out.println(""String_Node_Str"" + (String)selectedValues[i]);
      continue;
    }
    membersInfo.add(info[0]);
  }
  if (membersInfo.size() == 0) {
    session.send(client,new VoiceChatLeaveMessage(group,presenceInfo));
    return;
  }
  for (  PresenceInfo info : membersInfo) {
    if (info.clientID != null && presenceInfo.equals(info) == false) {
      continue;
    }
    session.send(client,new VoiceChatLeaveMessage(group,info));
  }
}"
46098,"private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt){
  javax.swing.JSlider source=(javax.swing.JSlider)evt.getSource();
  int volume=source.getValue();
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length > 0) {
    for (int i=0; i < selectedValues.length; i++) {
      String username=NameTagNode.getUsername((String)selectedValues[i]);
      PresenceInfo[] info=pm.getAliasPresenceInfo(username);
      if (info == null) {
        logger.warning(""String_Node_Str"" + username);
        continue;
      }
      logger.info(""String_Node_Str"" + username + ""String_Node_Str""+ volume);
      PresenceInfo pi=info[0];
      volumeChanged(pi.cellID,pi.callID,volume);
    }
  }
}","private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt){
  javax.swing.JSlider source=(javax.swing.JSlider)evt.getSource();
  int volume=source.getValue();
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length > 0) {
    for (int i=0; i < selectedValues.length; i++) {
      String username=NameTagNode.getUsername((String)selectedValues[i]);
      PresenceInfo[] info=pm.getAliasPresenceInfo(username);
      if (info == null) {
        logger.warning(""String_Node_Str"" + username);
        continue;
      }
      logger.info(""String_Node_Str"" + username + ""String_Node_Str""+ volume);
      PresenceInfo pi=info[0];
      volumeChanged(pi.cellID,pi.callID,volume);
      volumeChangeMap.put(pi,new Integer(volume));
    }
  }
}"
46099,"private void userListValueChanged(javax.swing.event.ListSelectionEvent evt){
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length == 0) {
    editButton.setEnabled(false);
    volumeLabel.setText(""String_Node_Str"");
    volumeSlider.setEnabled(false);
  }
 else   if (selectedValues.length == 1) {
    controlPanel.setVisible(true);
    volumeSlider.setEnabled(true);
    String username=NameTagNode.getUsername((String)selectedValues[0]);
    PresenceInfo[] info=pm.getAliasPresenceInfo(username);
    if (info == null) {
      logger.warning(""String_Node_Str"" + username);
      editButton.setEnabled(false);
      return;
    }
    if ((presenceInfo != null) && presenceInfo.equals(info[0])) {
      volumeLabel.setText(""String_Node_Str"" + username);
      editButton.setEnabled(true);
    }
 else {
      volumeLabel.setText(""String_Node_Str"" + username);
      editButton.setEnabled(false);
    }
  }
 else {
    volumeLabel.setText(""String_Node_Str"" + selectedValues.length + ""String_Node_Str"");
    volumeSlider.setEnabled(true);
  }
}","private void userListValueChanged(javax.swing.event.ListSelectionEvent evt){
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length == 0) {
    editButton.setEnabled(false);
    volumeLabel.setText(""String_Node_Str"");
    volumeSlider.setEnabled(false);
  }
 else   if (selectedValues.length == 1) {
    controlPanel.setVisible(true);
    volumeSlider.setEnabled(true);
    String username=NameTagNode.getUsername((String)selectedValues[0]);
    PresenceInfo[] info=pm.getAliasPresenceInfo(username);
    if (info == null) {
      logger.warning(""String_Node_Str"" + username);
      editButton.setEnabled(false);
      return;
    }
    if ((presenceInfo != null) && presenceInfo.equals(info[0])) {
      volumeLabel.setText(""String_Node_Str"" + username);
      editButton.setEnabled(true);
    }
 else {
      volumeLabel.setText(""String_Node_Str"" + username);
      editButton.setEnabled(false);
    }
    if (presenceInfo != null) {
      Integer v=volumeChangeMap.get(presenceInfo);
      if (v != null) {
        volumeSlider.setValue(v.intValue());
      }
    }
  }
 else {
    volumeLabel.setText(""String_Node_Str"" + selectedValues.length + ""String_Node_Str"");
    volumeSlider.setEnabled(true);
    volumeSlider.setValue(5);
  }
}"
46100,"private void joinButtonActionPerformed(java.awt.event.ActionEvent evt){
  String group=caller.userID.getUsername() + ""String_Node_Str"" + groupNumber++;
  String chatters=""String_Node_Str"";
  Object[] selectedValues=buddyList.getSelectedValues();
  for (int i=0; i < selectedValues.length; i++) {
    if (i > 0) {
      chatters+=""String_Node_Str"";
    }
    chatters+=NameTagNode.getUsername((String)selectedValues[i]);
  }
  String callerString=caller.usernameAlias;
  chatters=chatters.replaceAll(""String_Node_Str"" + callerString,""String_Node_Str"");
  chatters=chatters.replaceAll(callerString + ""String_Node_Str"",""String_Node_Str"");
  chatters=chatters.replaceAll(callerString,""String_Node_Str"");
  logger.info(""String_Node_Str"" + group + ""String_Node_Str""+ caller+ ""String_Node_Str""+ chatters+ ""String_Node_Str""+ chatType);
  PresenceInfo[] chattersInfo=new PresenceInfo[0];
  if (chatters.length() > 0) {
    chattersInfo=getPresenceInfo(pm,chatters);
  }
  InCallDialog inCallDialog=new InCallDialog(client,session,cellID,group,chatType);
  inCallDialog.setLocation(new Point((int)getLocation().getX() + getWidth(),(int)getLocation().getY()));
  String name=nameTextField.getText();
  session.send(client,new VoiceChatJoinMessage(group,caller,chattersInfo,chatType));
  logger.info(""String_Node_Str"");
  if (phoneNumberTextField.getText().length() > 0 && name.length() > 0) {
    mostRecentDialout=new PresenceInfo(null,null,new WonderlandIdentity(name,name,null),null);
    mostRecentDialout.usernameAlias=name;
    client.addMemberChangeListener(group,this);
    session.send(client,new VoiceChatDialOutMessage(group,caller.callID,chatType,mostRecentDialout,phoneNumberTextField.getText()));
    nameTextField.setText(""String_Node_Str"");
    phoneNumberTextField.setText(""String_Node_Str"");
    joinButton.setEnabled(false);
  }
}","private void joinButtonActionPerformed(java.awt.event.ActionEvent evt){
  String group=caller.userID.getUsername() + ""String_Node_Str"" + groupNumber++;
  ArrayList<PresenceInfo> chattersInfo=new ArrayList();
  Object[] selectedValues=buddyList.getSelectedValues();
  for (int i=0; i < selectedValues.length; i++) {
    PresenceInfo[] info=pm.getAliasPresenceInfo((String)selectedValues[i]);
    if (info == null || info.length == 0) {
      System.out.println(""String_Node_Str"" + (String)selectedValues[i]);
      continue;
    }
    chattersInfo.add(info[0]);
  }
  String callerString=caller.usernameAlias;
  InCallDialog inCallDialog=new InCallDialog(client,session,cellID,group,chatType);
  inCallDialog.setLocation(new Point((int)getLocation().getX() + getWidth(),(int)getLocation().getY()));
  String name=nameTextField.getText();
  session.send(client,new VoiceChatJoinMessage(group,caller,chattersInfo.toArray(new PresenceInfo[0]),chatType));
  logger.info(""String_Node_Str"");
  if (phoneNumberTextField.getText().length() > 0 && name.length() > 0) {
    mostRecentDialout=new PresenceInfo(null,null,new WonderlandIdentity(name,name,null),null);
    mostRecentDialout.usernameAlias=name;
    client.addMemberChangeListener(group,this);
    session.send(client,new VoiceChatDialOutMessage(group,caller.callID,chatType,mostRecentDialout,phoneNumberTextField.getText()));
    nameTextField.setText(""String_Node_Str"");
    phoneNumberTextField.setText(""String_Node_Str"");
    joinButton.setEnabled(false);
  }
}"
46101,"private void setBuddyList(){
  PresenceInfo[] presenceInfoList=pm.getAllUsers();
  ArrayList<String> userList=new ArrayList();
  for (int i=0; i < presenceInfoList.length; i++) {
    PresenceInfo info=presenceInfoList[i];
    if (info.callID == null) {
      continue;
    }
    userList.add(info.usernameAlias);
  }
  String[] userArray=userList.toArray(new String[0]);
  SortUsers.sort(userArray);
  this.userList=userList;
  buddyList.setListData(userArray);
  enableButtons();
}","private void setBuddyList(){
  PresenceInfo[] presenceInfoList=pm.getAllUsers();
  ArrayList<String> userList=new ArrayList();
  for (int i=0; i < presenceInfoList.length; i++) {
    PresenceInfo info=presenceInfoList[i];
    if (info.callID == null) {
      continue;
    }
    userList.add(info.usernameAlias);
  }
  String[] userArray=userList.toArray(new String[0]);
  SortUsers.sort(userArray);
  boolean needToUpdate=false;
  if (currentArray.length == userArray.length) {
    for (int i=0; i < currentArray.length; i++) {
      if (currentArray[i].equals(userArray[i]) == false) {
        needToUpdate=true;
        break;
      }
    }
  }
 else {
    needToUpdate=true;
  }
  if (needToUpdate) {
    currentArray=userArray;
    buddyList.setListData(userArray);
  }
  enableButtons();
}"
46102,"public void setWindow(Window2D window){
  this.window=window;
}","public void setWindow(Window2D window){
  this.window=window;
  setBounds(getX(),getY(),window.getWidth(),window.getHeight());
}"
46103,"public void setComponent(JComponent component){
  this.component=component;
}","public void setComponent(JComponent component){
  this.component=component;
  setBounds(0,0,(int)component.getPreferredSize().getWidth(),(int)component.getPreferredSize().getHeight());
}"
46104,"/** 
 * Gets the frame for the HUD component
 * @return the HUD component's frame
 */
public HUDFrame2D getFrame(){
  return frame;
}","/** 
 * Gets the frame for the HUD component
 * @return the HUD component's frame
 */
public HUDFrameHeader2D getFrame(){
  return frame;
}"
46105,"/** 
 * Sets the frame decoration for the HUD component
 * @param frame the frame
 */
public void setFrame(HUDFrame2D frame){
  this.frame=frame;
}","/** 
 * Sets the frame decoration for the HUD component
 * @param frame the frame
 */
public void setFrame(HUDFrameHeader2D frame){
  this.frame=frame;
}"
46106,"private void initMenus(){
  logoutMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  logoutMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      logoutMIActionPerformed(evt);
    }
  }
);
  addToFileMenu(logoutMI,2);
  exitMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  exitMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      exitMIActionPerformed(evt);
    }
  }
);
  addToFileMenu(exitMI,3);
  firstPersonRB=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
  firstPersonRB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cameraChangedActionPerformed(evt);
    }
  }
);
  addToViewMenu(firstPersonRB,0);
  cameraButtonGroup.add(firstPersonRB);
  thirdPersonRB=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
  thirdPersonRB.setSelected(true);
  thirdPersonRB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cameraChangedActionPerformed(evt);
    }
  }
);
  addToViewMenu(thirdPersonRB,1);
  cameraButtonGroup.add(thirdPersonRB);
  frontPersonRB=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
  frontPersonRB.setToolTipText(""String_Node_Str"");
  frontPersonRB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cameraChangedActionPerformed(evt);
    }
  }
);
  addToViewMenu(frontPersonRB,2);
  cameraButtonGroup.add(frontPersonRB);
  frameRateMenu=new JMenu(bundle.getString(""String_Node_Str""));
  JMenuItem fps15=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  JMenuItem fps30=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  JMenuItem fps60=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  JMenuItem fps120=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  JMenuItem fps200=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  frameRateMenu.add(fps15);
  frameRateMenu.add(fps30);
  frameRateMenu.add(fps60);
  frameRateMenu.add(fps120);
  frameRateMenu.add(fps200);
  addToViewMenu(frameRateMenu,4);
  fps15.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      frameRateActionPerformed(evt);
    }
  }
);
  fps30.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      frameRateActionPerformed(evt);
    }
  }
);
  fps60.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      frameRateActionPerformed(evt);
    }
  }
);
  fps120.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      frameRateActionPerformed(evt);
    }
  }
);
  fps200.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      frameRateActionPerformed(evt);
    }
  }
);
  fpsMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  fpsMI.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      if ((fpsComponent == null) || !fpsComponent.isVisible()) {
        showFPSMeter(true);
      }
 else {
        showFPSMeter(false);
      }
    }
  }
);
  addToWindowMenu(fpsMI,-1);
  HelpSystem helpSystem=new HelpSystem();
  JMenu helpMenu=helpSystem.getHelpJMenu();
  mainMenuBar.add(helpMenu);
}","private void initMenus(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      logoutMI=new JMenuItem(bundle.getString(""String_Node_Str""));
      logoutMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          logoutMIActionPerformed(evt);
        }
      }
);
      addToFileMenu(logoutMI,2);
      exitMI=new JMenuItem(bundle.getString(""String_Node_Str""));
      exitMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          exitMIActionPerformed(evt);
        }
      }
);
      addToFileMenu(exitMI,3);
      firstPersonRB=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
      firstPersonRB.addActionListener(new java.awt.event.ActionListener(){
        public void actionPerformed(        java.awt.event.ActionEvent evt){
          cameraChangedActionPerformed(evt);
        }
      }
);
      addToViewMenu(firstPersonRB,0);
      cameraButtonGroup.add(firstPersonRB);
      thirdPersonRB=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
      thirdPersonRB.setSelected(true);
      thirdPersonRB.addActionListener(new java.awt.event.ActionListener(){
        public void actionPerformed(        java.awt.event.ActionEvent evt){
          cameraChangedActionPerformed(evt);
        }
      }
);
      addToViewMenu(thirdPersonRB,1);
      cameraButtonGroup.add(thirdPersonRB);
      frontPersonRB=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
      frontPersonRB.setToolTipText(""String_Node_Str"");
      frontPersonRB.addActionListener(new java.awt.event.ActionListener(){
        public void actionPerformed(        java.awt.event.ActionEvent evt){
          cameraChangedActionPerformed(evt);
        }
      }
);
      addToViewMenu(frontPersonRB,2);
      cameraButtonGroup.add(frontPersonRB);
      frameRateMenu=new JMenu(bundle.getString(""String_Node_Str""));
      JMenuItem fps15=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
      JMenuItem fps30=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
      JMenuItem fps60=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
      JMenuItem fps120=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
      JMenuItem fps200=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
      frameRateMenu.add(fps15);
      frameRateMenu.add(fps30);
      frameRateMenu.add(fps60);
      frameRateMenu.add(fps120);
      frameRateMenu.add(fps200);
      addToViewMenu(frameRateMenu,4);
      fps15.addActionListener(new java.awt.event.ActionListener(){
        public void actionPerformed(        java.awt.event.ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fps30.addActionListener(new java.awt.event.ActionListener(){
        public void actionPerformed(        java.awt.event.ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fps60.addActionListener(new java.awt.event.ActionListener(){
        public void actionPerformed(        java.awt.event.ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fps120.addActionListener(new java.awt.event.ActionListener(){
        public void actionPerformed(        java.awt.event.ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fps200.addActionListener(new java.awt.event.ActionListener(){
        public void actionPerformed(        java.awt.event.ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fpsMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
      fpsMI.addActionListener(new java.awt.event.ActionListener(){
        public void actionPerformed(        java.awt.event.ActionEvent evt){
          if ((fpsComponent == null) || !fpsComponent.isVisible()) {
            showFPSMeter(true);
          }
 else {
            showFPSMeter(false);
          }
        }
      }
);
      addToWindowMenu(fpsMI,-1);
      HelpSystem helpSystem=new HelpSystem();
      JMenu helpMenu=helpSystem.getHelpJMenu();
      mainMenuBar.add(helpMenu);
    }
  }
);
}"
46107,"/** 
 * Creates new form MainFrame 
 */
public MainFrameImpl(WorldManager wm,int width,int height){
  this.wm=wm;
  try {
    boolean hasNimbus=false;
    try {
      Class.forName(""String_Node_Str"");
      hasNimbus=true;
    }
 catch (    ClassNotFoundException e) {
    }
    if (hasNimbus) {
      UIManager.setLookAndFeel(""String_Node_Str"");
    }
 else {
      UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
    }
    if (""String_Node_Str"".equals(System.getProperty(""String_Node_Str""))) {
      javax.swing.UIManager.put(""String_Node_Str"",Boolean.TRUE);
    }
  }
 catch (  Exception ex) {
    logger.warning(""String_Node_Str"" + UIManager.getCrossPlatformLookAndFeelClassName() + ""String_Node_Str""+ ex);
  }
  JPopupMenu.setDefaultLightWeightPopupEnabled(false);
  ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
  initComponents();
  initMenus();
  setTitle(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
  centerPanel.setMinimumSize(new Dimension(width,height));
  centerPanel.setPreferredSize(new Dimension(width,height));
  DragAndDropManager.getDragAndDropManager().setDropTarget(centerPanel);
  serverField.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      updateGoButton();
    }
    public void removeUpdate(    DocumentEvent e){
      updateGoButton();
    }
    public void changedUpdate(    DocumentEvent e){
      updateGoButton();
    }
  }
);
  pack();
}","/** 
 * Creates new form MainFrame 
 */
public MainFrameImpl(WorldManager wm,int width,int height){
  this.wm=wm;
  GUIUtils.initLookAndFeel();
  JPopupMenu.setDefaultLightWeightPopupEnabled(false);
  ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
  initComponents();
  initMenus();
  setTitle(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
  centerPanel.setMinimumSize(new Dimension(width,height));
  centerPanel.setPreferredSize(new Dimension(width,height));
  DragAndDropManager.getDragAndDropManager().setDropTarget(centerPanel);
  serverField.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      updateGoButton();
    }
    public void removeUpdate(    DocumentEvent e){
      updateGoButton();
    }
    public void changedUpdate(    DocumentEvent e){
      updateGoButton();
    }
  }
);
  pack();
}"
46108,"/** 
 * Updates the GUI items in this panel for the currently selected cell. If there is nothing selected, do nothing
 */
public void updateGUI(){
  Cell cell=getSelectedCell();
  if (cell == null) {
    translateToggleButton.setSelected(false);
    translateToggleButton.setEnabled(false);
    rotateToggleButton.setSelected(false);
    rotateToggleButton.setEnabled(false);
    resizeToggleButton.setSelected(false);
    resizeToggleButton.setEnabled(false);
    sizeSlider.setValue(50);
    sizeSlider.setEnabled(false);
    return;
  }
  translateToggleButton.setEnabled(true);
  rotateToggleButton.setEnabled(true);
  resizeToggleButton.setEnabled(true);
  sizeSlider.setEnabled(true);
  CellComponent component=cell.getComponent(TranslateAffordanceCellComponent.class);
  translateToggleButton.setSelected(component != null);
  translateToggleButton.repaint();
  if (component != null) {
    float size=((AffordanceCellComponent)component).getSize();
    sizeSlider.setValue((int)((size - 1.0f) * 100.0f));
  }
 else {
    sizeSlider.setValue(50);
  }
  component=cell.getComponent(RotateAffordanceCellComponent.class);
  rotateToggleButton.setSelected(component != null);
  rotateToggleButton.repaint();
  component=cell.getComponent(ResizeAffordanceCellComponent.class);
  resizeToggleButton.setSelected(component != null);
  resizeToggleButton.repaint();
}","/** 
 * Updates the GUI items in this panel for the currently selected cell. If there is nothing selected, do nothing. NOTE: This method assumes it is being called in the AWT Event Thread.
 */
public void updateGUI(){
  Cell cell=getSelectedCell();
  if (cell == null) {
    translateToggleButton.setSelected(false);
    translateToggleButton.setEnabled(false);
    rotateToggleButton.setSelected(false);
    rotateToggleButton.setEnabled(false);
    resizeToggleButton.setSelected(false);
    resizeToggleButton.setEnabled(false);
    sizeSlider.setValue(50);
    sizeSlider.setEnabled(false);
    return;
  }
  translateToggleButton.setEnabled(true);
  rotateToggleButton.setEnabled(true);
  resizeToggleButton.setEnabled(true);
  sizeSlider.setEnabled(true);
  CellComponent component=cell.getComponent(TranslateAffordanceCellComponent.class);
  translateToggleButton.setSelected(component != null);
  translateToggleButton.repaint();
  if (component != null) {
    float size=((AffordanceCellComponent)component).getSize();
    sizeSlider.setValue((int)((size - 1.0f) * 100.0f));
  }
 else {
    sizeSlider.setValue(50);
  }
  component=cell.getComponent(RotateAffordanceCellComponent.class);
  rotateToggleButton.setSelected(component != null);
  rotateToggleButton.repaint();
  component=cell.getComponent(ResizeAffordanceCellComponent.class);
  resizeToggleButton.setSelected(component != null);
  resizeToggleButton.repaint();
}"
46109,"/** 
 * Creates new form AffordanceHUDPanel 
 */
public AffordanceHUDPanel(JFrame frame){
  initComponents();
  Hashtable<Integer,JComponent> labels=new Hashtable();
  labels.put(0,new JLabel(""String_Node_Str""));
  labels.put(100,new JLabel(""String_Node_Str""));
  labels.put(200,new JLabel(""String_Node_Str""));
  labels.put(300,new JLabel(""String_Node_Str""));
  labels.put(400,new JLabel(""String_Node_Str""));
  sizeSlider.setLabelTable(labels);
  this.frame=frame;
  InputManager.inputManager().addGlobalEventListener(new SelectionListener());
}","/** 
 * Creates new form AffordanceHUDPanel 
 */
public AffordanceHUDPanel(){
  initComponents();
  Hashtable<Integer,JComponent> labels=new Hashtable();
  labels.put(0,new JLabel(""String_Node_Str""));
  labels.put(100,new JLabel(""String_Node_Str""));
  labels.put(200,new JLabel(""String_Node_Str""));
  labels.put(300,new JLabel(""String_Node_Str""));
  labels.put(400,new JLabel(""String_Node_Str""));
  sizeSlider.setLabelTable(labels);
  InputManager.inputManager().addGlobalEventListener(new SelectionListener());
}"
46110,"@Override public void commitEvent(Event event){
  updateGUI();
}","@Override public void commitEvent(Event event){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      updateGUI();
    }
  }
);
}"
46111,"/** 
 * Creates the affordance HUD frame
 */
private void createHUD(){
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  affordanceHUDPanel=new AffordanceHUDPanel(null);
  affordanceHUD=mainHUD.createComponent(affordanceHUDPanel);
  affordanceHUD.setPreferredLocation(Layout.SOUTH);
  affordanceHUD.addComponentListener(new HUDComponentListener(){
    public void HUDComponentChanged(    HUDComponentEvent event){
      if (event.getEventType() == ComponentEventType.DISAPPEARED) {
        InputManager.inputManager().postEvent(new AffordanceRemoveEvent());
      }
    }
  }
);
  mainHUD.addComponent(affordanceHUD);
}","/** 
 * Creates the affordance HUD frame. NOTE: This method should NOT be called on the AWT Event Thread.
 */
private void createHUD(){
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  affordanceHUDPanel=new AffordanceHUDPanel();
  affordanceHUD=mainHUD.createComponent(affordanceHUDPanel);
  affordanceHUD.setPreferredLocation(Layout.SOUTH);
  affordanceHUD.addComponentListener(new HUDComponentListener(){
    public void HUDComponentChanged(    HUDComponentEvent event){
      if (event.getEventType() == ComponentEventType.DISAPPEARED) {
        InputManager.inputManager().postEvent(new AffordanceRemoveEvent());
      }
    }
  }
);
  mainHUD.addComponent(affordanceHUD);
}"
46112,"public void actionPerformed(ContextMenuItemEvent event){
  if (affordanceHUD == null) {
    createHUD();
  }
  affordanceHUD.setVisible(true);
  affordanceHUDPanel.setTranslationVisible(true);
  affordanceHUDPanel.updateGUI();
}","public void actionPerformed(ContextMenuItemEvent event){
  if (affordanceHUD == null) {
    createHUD();
  }
  affordanceHUD.setVisible(true);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      affordanceHUDPanel.setTranslationVisible(true);
      affordanceHUDPanel.updateGUI();
    }
  }
);
}"
46113,"/** 
 */
public ContextMenuItem[] getContextMenuItems(ContextEvent event){
  final SimpleContextMenuItem editItem=new SimpleContextMenuItem(""String_Node_Str"",new EditContextListener());
  Cell cell=event.getPrimaryCell();
  final SecurityComponent sc=cell.getComponent(SecurityComponent.class);
  if (sc != null) {
    if (sc.hasPermissions()) {
      editItem.setEnabled(canMove(sc));
    }
 else {
      editItem.setLabel(""String_Node_Str"");
      editItem.setEnabled(false);
      new Thread(new Runnable(){
        public void run(){
          editItem.setLabel(""String_Node_Str"");
          editItem.setEnabled(canMove(sc));
          editItem.fireMenuItemRepaintListeners();
        }
      }
,""String_Node_Str"").start();
    }
  }
  return new ContextMenuItem[]{editItem};
}","/** 
 * {@inheritDoc}
 */
public ContextMenuItem[] getContextMenuItems(ContextEvent event){
  final SimpleContextMenuItem editItem=new SimpleContextMenuItem(""String_Node_Str"",new EditContextListener());
  Cell cell=event.getPrimaryCell();
  final SecurityComponent sc=cell.getComponent(SecurityComponent.class);
  if (sc != null) {
    if (sc.hasPermissions()) {
      editItem.setEnabled(canMove(sc));
    }
 else {
      editItem.setLabel(""String_Node_Str"");
      editItem.setEnabled(false);
      new Thread(new Runnable(){
        public void run(){
          editItem.setLabel(""String_Node_Str"");
          editItem.setEnabled(canMove(sc));
          editItem.fireMenuItemRepaintListeners();
        }
      }
,""String_Node_Str"").start();
    }
  }
  return new ContextMenuItem[]{editItem};
}"
46114,"public void run(){
  editItem.setLabel(""String_Node_Str"");
  editItem.setEnabled(canMove(sc));
  editItem.fireMenuItemRepaintListeners();
}","public void run(){
  affordanceHUDPanel.setTranslationVisible(true);
  affordanceHUDPanel.updateGUI();
}"
46115,"private void okButtonActionPerformed(java.awt.event.ActionEvent evt){
  presenceInfo.usernameAlias=usernameAliasTextField.getText();
  listener.changeUsernameAlias(presenceInfo);
  listeners.firePropertyChange(""String_Node_Str"",new String(""String_Node_Str""),null);
}","private void okButtonActionPerformed(java.awt.event.ActionEvent evt){
  presenceInfo.usernameAlias=usernameAliasTextField.getText();
  pm.changeUsernameAlias(presenceInfo);
  listener.changeUsernameAlias(presenceInfo);
  listeners.firePropertyChange(""String_Node_Str"",new String(""String_Node_Str""),null);
}"
46116,"public ChangeNameHUDPanel(UsernameAliasChangeListener listener,PresenceInfo presenceInfo){
  this();
  this.listener=listener;
  this.presenceInfo=presenceInfo;
  aliasLabel.setText(""String_Node_Str"" + presenceInfo.userID.getUsername());
  usernameAliasTextField.setText(presenceInfo.userID.getUsername());
  setVisible(true);
}","public ChangeNameHUDPanel(UsernameAliasChangeListener listener,PresenceManager pm,PresenceInfo presenceInfo){
  this();
  this.listener=listener;
  this.pm=pm;
  this.presenceInfo=presenceInfo;
  aliasLabel.setText(""String_Node_Str"" + presenceInfo.userID.getUsername());
  usernameAliasTextField.setText(presenceInfo.userID.getUsername());
  setVisible(true);
}"
46117,"private void editButtonActionPerformed(java.awt.event.ActionEvent evt){
  HUDComponent changeNameHUDComponent=changeNameMap.get(presenceInfo);
  if (changeNameHUDComponent == null) {
    ChangeNameHUDPanel changeNameHUDPanel=new ChangeNameHUDPanel(this,presenceInfo);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    final HUDComponent comp=mainHUD.createComponent(changeNameHUDPanel);
    comp.setPreferredLocation(Layout.NORTH);
    mainHUD.addComponent(comp);
    changeNameMap.put(presenceInfo,comp);
    PropertyChangeListener plistener=new PropertyChangeListener(){
      public void propertyChange(      PropertyChangeEvent pe){
        if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
          comp.setVisible(false);
        }
      }
    }
;
    changeNameHUDPanel.addPropertyChangeListener(plistener);
    changeNameHUDComponent=comp;
  }
  changeNameHUDComponent.setVisible(true);
}","private void editButtonActionPerformed(java.awt.event.ActionEvent evt){
  HUDComponent changeNameHUDComponent=changeNameMap.get(presenceInfo);
  if (changeNameHUDComponent == null) {
    ChangeNameHUDPanel changeNameHUDPanel=new ChangeNameHUDPanel(this,pm,presenceInfo);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    final HUDComponent comp=mainHUD.createComponent(changeNameHUDPanel);
    comp.setPreferredLocation(Layout.NORTH);
    mainHUD.addComponent(comp);
    changeNameMap.put(presenceInfo,comp);
    PropertyChangeListener plistener=new PropertyChangeListener(){
      public void propertyChange(      PropertyChangeEvent pe){
        if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
          comp.setVisible(false);
        }
      }
    }
;
    changeNameHUDPanel.addPropertyChangeListener(plistener);
    changeNameHUDComponent=comp;
  }
  changeNameHUDComponent.setVisible(true);
}"
46118,"/** 
 * Sets the location of the frame holding the label given the current mouse event, using its location
 */
private void setLabelPosition(MouseEvent mouseEvent){
  Component component=mouseEvent.getComponent();
  Point parentPoint=new Point(component.getLocationOnScreen());
  parentPoint.translate(mouseEvent.getX() + 10,mouseEvent.getY() - 15);
  labelFrame.setLocation(parentPoint);
}","/** 
 * Sets the location of the frame holding the label given the current mouse event, using its location. NOTE: This method assumes it is being called within the AWT Event Thread.
 */
private void setLabelPosition(MouseEvent mouseEvent){
  Component component=mouseEvent.getComponent();
  Point parentPoint=new Point(component.getLocationOnScreen());
  parentPoint.translate(mouseEvent.getX() + 10,mouseEvent.getY() - 15);
  labelFrame.setLocation(parentPoint);
}"
46119,"@Override public void commitEvent(Event event){
  MouseEvent3D mouseEvent=(MouseEvent3D)event;
  MouseEvent awtMouseEvent=(MouseEvent)mouseEvent.getAwtEvent();
  if (event instanceof MouseButtonEvent3D) {
    MouseButtonEvent3D be=(MouseButtonEvent3D)event;
    if (be.isPressed() && be.getButton() == MouseButtonEvent3D.ButtonId.BUTTON1) {
      MouseEvent awtButtonEvent=(MouseEvent)be.getAwtEvent();
      dragStartScreen=new Point(awtButtonEvent.getX(),awtButtonEvent.getY());
      dragStartWorld=be.getIntersectionPointWorld();
      Entity entity=event.getEntity();
      RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
      Vector3f centerWorld=rc.getSceneRoot().getWorldTranslation();
      dragStartVectorWorld=dragStartWorld.subtract(centerWorld);
      dragStartRadius=dragStartVectorWorld.length();
      setLabelPosition(awtMouseEvent);
      labelFrame.toFront();
      labelFrame.setVisible(true);
      labelFrame.repaint();
      fireResizingStarted();
    }
 else     if (be.isReleased() == true) {
      labelFrame.setVisible(false);
    }
    return;
  }
  if (!(event instanceof MouseDraggedEvent3D)) {
    return;
  }
  MouseDraggedEvent3D dragEvent=(MouseDraggedEvent3D)event;
  Vector3f dragWorld=dragEvent.getDragVectorWorld(dragStartWorld,dragStartScreen,new Vector3f());
  Vector3f dragEndVectorWorld=dragStartVectorWorld.add(dragWorld);
  float dragEndRadius=dragEndVectorWorld.length();
  float scale=dragEndRadius / dragStartRadius;
  StringBuilder resizeString=new StringBuilder();
  Formatter formatter=new Formatter(resizeString);
  formatter.format(""String_Node_Str"",scale);
  resizeLabel.setText(resizeString.toString());
  labelFrame.pack();
  setLabelPosition(awtMouseEvent);
  fireResizingChanged(new Vector3f(scale,scale,scale));
}","@Override public void commitEvent(Event event){
  MouseEvent3D mouseEvent=(MouseEvent3D)event;
  MouseEvent awtMouseEvent=(MouseEvent)mouseEvent.getAwtEvent();
  if (event instanceof MouseButtonEvent3D) {
    MouseButtonEvent3D be=(MouseButtonEvent3D)event;
    if (be.isPressed() && be.getButton() == ButtonId.BUTTON1) {
      MouseEvent awtButtonEvent=(MouseEvent)be.getAwtEvent();
      dragStartScreen=new Point(awtButtonEvent.getX(),awtButtonEvent.getY());
      dragStartWorld=be.getIntersectionPointWorld();
      Entity entity=event.getEntity();
      RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
      Vector3f centerWorld=rc.getSceneRoot().getWorldTranslation();
      dragStartVectorWorld=dragStartWorld.subtract(centerWorld);
      dragStartRadius=dragStartVectorWorld.length();
      showResizeLabel(awtMouseEvent);
      fireResizingStarted();
    }
 else     if (be.isReleased() == true) {
      hideResizeLabel();
    }
    return;
  }
  if (!(event instanceof MouseDraggedEvent3D)) {
    return;
  }
  MouseDraggedEvent3D dragEvent=(MouseDraggedEvent3D)event;
  Vector3f dragWorld=dragEvent.getDragVectorWorld(dragStartWorld,dragStartScreen,new Vector3f());
  Vector3f dragEndVectorWorld=dragStartVectorWorld.add(dragWorld);
  float dragEndRadius=dragEndVectorWorld.length();
  float scale=dragEndRadius / dragStartRadius;
  updateResizeLabel(scale,awtMouseEvent);
  fireResizingChanged(new Vector3f(scale,scale,scale));
}"
46120,"/** 
 * Sets the location of the frame holding the label given the current mouse event, using its location
 */
private void setLabelPosition(MouseEvent mouseEvent){
  Component component=mouseEvent.getComponent();
  Point parentPoint=new Point(component.getLocationOnScreen());
  parentPoint.translate(mouseEvent.getX() + 10,mouseEvent.getY() - 15);
  labelFrame.setLocation(parentPoint);
}","/** 
 * Sets the location of the frame holding the label given the current mouse event, using its location. NOTE: This method assumes it is being called within the AWT Event Thread.
 */
private void setLabelPosition(MouseEvent mouseEvent){
  Component component=mouseEvent.getComponent();
  Point parentPoint=new Point(component.getLocationOnScreen());
  parentPoint.translate(mouseEvent.getX() + 10,mouseEvent.getY() - 15);
  labelFrame.setLocation(parentPoint);
}"
46121,"@Override public void commitEvent(Event event){
  MouseEvent3D mouseEvent=(MouseEvent3D)event;
  MouseEvent awtMouseEvent=(MouseEvent)mouseEvent.getAwtEvent();
  if (event instanceof MouseButtonEvent3D) {
    MouseButtonEvent3D buttonEvent=(MouseButtonEvent3D)event;
    if (buttonEvent.isPressed() && buttonEvent.getButton() == MouseButtonEvent3D.ButtonId.BUTTON1) {
      MouseEvent awtButtonEvent=(MouseEvent)buttonEvent.getAwtEvent();
      dragStartScreen=new Point(awtButtonEvent.getX(),awtButtonEvent.getY());
      dragStartWorld=buttonEvent.getIntersectionPointWorld();
      Entity entity=event.getEntity();
      RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
      centerWorld=rc.getSceneRoot().getWorldTranslation();
      dragStartVectorWorld=dragStartWorld.subtract(centerWorld);
      setLabelPosition(awtMouseEvent);
      labelFrame.toFront();
      labelFrame.setVisible(true);
      labelFrame.repaint();
      fireRotationStarted();
    }
 else     if (buttonEvent.isReleased() == true) {
      labelFrame.setVisible(false);
    }
    return;
  }
  if (!(event instanceof MouseDraggedEvent3D)) {
    return;
  }
  MouseDraggedEvent3D dragEvent=(MouseDraggedEvent3D)event;
  Vector3f dragWorld=dragEvent.getDragVectorWorld(dragStartWorld,dragStartScreen,new Vector3f());
  Vector3f dragEndVectorWorld=dragStartVectorWorld.add(dragWorld);
  Vector3f v1=dragStartVectorWorld.normalize();
  Vector3f v2=dragEndVectorWorld.normalize();
  Vector3f normal=null, axis=null;
switch (direction) {
case X_AXIS:
    normal=new Vector3f(1,0,0);
  axis=new Vector3f(1,0,0);
break;
case Y_AXIS:
normal=new Vector3f(0,1,0);
axis=new Vector3f(0,1,0);
break;
case Z_AXIS:
normal=new Vector3f(0,0,1);
axis=new Vector3f(0,0,1);
break;
default :
return;
}
Quaternion rotation=rootNode.getLocalRotation();
float angles[]=new float[3];
rotation.toAngles(angles);
normal=rotation.mult(normal);
float dotProduct=v1.dot(v2);
Vector3f crossProduct=v1.cross(v2);
double angle=Math.atan2(normal.dot(crossProduct),dotProduct);
StringBuilder rotateString=new StringBuilder();
Formatter formatter=new Formatter(rotateString);
formatter.format(""String_Node_Str"",Math.toDegrees(angle));
rotationLabel.setText(rotateString.toString());
labelFrame.pack();
setLabelPosition(awtMouseEvent);
Quaternion q=new Quaternion().fromAngleAxis((float)angle,axis);
fireRotationChanged(q);
}","@Override public void commitEvent(Event event){
  MouseEvent3D mouseEvent=(MouseEvent3D)event;
  MouseEvent awtMouseEvent=(MouseEvent)mouseEvent.getAwtEvent();
  if (event instanceof MouseButtonEvent3D) {
    MouseButtonEvent3D buttonEvent=(MouseButtonEvent3D)event;
    if (buttonEvent.isPressed() && buttonEvent.getButton() == ButtonId.BUTTON1) {
      MouseEvent awtButtonEvent=(MouseEvent)buttonEvent.getAwtEvent();
      dragStartScreen=new Point(awtButtonEvent.getX(),awtButtonEvent.getY());
      dragStartWorld=buttonEvent.getIntersectionPointWorld();
      Entity entity=event.getEntity();
      RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
      centerWorld=rc.getSceneRoot().getWorldTranslation();
      dragStartVectorWorld=dragStartWorld.subtract(centerWorld);
      showRotationLabel(awtMouseEvent);
      fireRotationStarted();
    }
 else     if (buttonEvent.isReleased() == true) {
      hideRotationLabel();
    }
    return;
  }
  if (!(event instanceof MouseDraggedEvent3D)) {
    return;
  }
  MouseDraggedEvent3D dragEvent=(MouseDraggedEvent3D)event;
  Vector3f dragWorld=dragEvent.getDragVectorWorld(dragStartWorld,dragStartScreen,new Vector3f());
  Vector3f dragEndVectorWorld=dragStartVectorWorld.add(dragWorld);
  Vector3f v1=dragStartVectorWorld.normalize();
  Vector3f v2=dragEndVectorWorld.normalize();
  Vector3f normal=null, axis=null;
switch (direction) {
case X_AXIS:
    normal=new Vector3f(1,0,0);
  axis=new Vector3f(1,0,0);
break;
case Y_AXIS:
normal=new Vector3f(0,1,0);
axis=new Vector3f(0,1,0);
break;
case Z_AXIS:
normal=new Vector3f(0,0,1);
axis=new Vector3f(0,0,1);
break;
default :
return;
}
Quaternion rotation=rootNode.getLocalRotation();
float angles[]=new float[3];
rotation.toAngles(angles);
normal=rotation.mult(normal);
float dotProduct=v1.dot(v2);
Vector3f crossProduct=v1.cross(v2);
double angle=Math.atan2(normal.dot(crossProduct),dotProduct);
updateRotationLabel(angle,awtMouseEvent);
Quaternion q=new Quaternion().fromAngleAxis((float)angle,axis);
fireRotationChanged(q);
}"
46122,"@Override public void commitEvent(Event event){
  MouseEvent3D mouseEvent=(MouseEvent3D)event;
  MouseEvent awtMouseEvent=(MouseEvent)mouseEvent.getAwtEvent();
  if (event instanceof MouseButtonEvent3D) {
    MouseButtonEvent3D buttonEvent=(MouseButtonEvent3D)event;
    if (buttonEvent.isPressed() && buttonEvent.getButton() == ButtonId.BUTTON1) {
      MouseEvent awtButtonEvent=(MouseEvent)buttonEvent.getAwtEvent();
      dragStartScreen=new Point(awtButtonEvent.getX(),awtButtonEvent.getY());
      dragStartWorld=buttonEvent.getIntersectionPointWorld();
      showPositionLabel(awtMouseEvent);
      fireTranslationStarted();
      return;
    }
 else     if (buttonEvent.isReleased() == true) {
      hidePositionLabel();
      return;
    }
    return;
  }
  if (!(event instanceof MouseDraggedEvent3D)) {
    return;
  }
  MouseDraggedEvent3D dragEvent=(MouseDraggedEvent3D)event;
  Vector3f dragVector=dragEvent.getDragVectorWorld(dragStartWorld,dragStartScreen,new Vector3f());
  Vector3f addVector;
  float moved=0.0f;
switch (direction) {
case X_AXIS:
    addVector=new Vector3f(dragVector.x,0,0);
  moved=dragVector.x;
break;
case Y_AXIS:
addVector=new Vector3f(0,dragVector.y,0);
moved=dragVector.y;
break;
case Z_AXIS:
addVector=new Vector3f(0,0,dragVector.z);
moved=dragVector.z;
break;
default :
addVector=new Vector3f();
break;
}
updatePositionLabel(moved,awtMouseEvent);
fireTranslationChanged(addVector);
}","@Override public void commitEvent(Event event){
  MouseEvent3D mouseEvent=(MouseEvent3D)event;
  MouseEvent awtMouseEvent=(MouseEvent)mouseEvent.getAwtEvent();
  if (event instanceof MouseButtonEvent3D) {
    MouseButtonEvent3D buttonEvent=(MouseButtonEvent3D)event;
    if (buttonEvent.isPressed() && buttonEvent.getButton() == ButtonId.BUTTON1) {
      MouseEvent awtButtonEvent=(MouseEvent)buttonEvent.getAwtEvent();
      dragStartScreen=new Point(awtButtonEvent.getX(),awtButtonEvent.getY());
      dragStartWorld=buttonEvent.getIntersectionPointWorld();
      showPositionLabel(awtMouseEvent);
      fireTranslationStarted();
    }
 else     if (buttonEvent.isReleased() == true) {
      hidePositionLabel();
    }
    return;
  }
  if (!(event instanceof MouseDraggedEvent3D)) {
    return;
  }
  MouseDraggedEvent3D dragEvent=(MouseDraggedEvent3D)event;
  Vector3f dragVector=dragEvent.getDragVectorWorld(dragStartWorld,dragStartScreen,new Vector3f());
  Vector3f addVector;
  float moved=0.0f;
switch (direction) {
case X_AXIS:
    addVector=new Vector3f(dragVector.x,0,0);
  moved=dragVector.x;
break;
case Y_AXIS:
addVector=new Vector3f(0,dragVector.y,0);
moved=dragVector.y;
break;
case Z_AXIS:
addVector=new Vector3f(0,0,dragVector.z);
moved=dragVector.z;
break;
default :
addVector=new Vector3f();
break;
}
updatePositionLabel(moved,awtMouseEvent);
fireTranslationChanged(addVector);
}"
46123,"public synchronized void setUserList(){
  PresenceInfo[] presenceInfoList=pm.getAllUsers();
  for (int i=0; i < presenceInfoList.length; i++) {
    PresenceInfo info=presenceInfoList[i];
    if (info.callID == null) {
      continue;
    }
    String username=info.userID.getUsername();
    String displayName=NameTagNode.getDisplayName(info.usernameAlias,info.isSpeaking,info.isMuted);
    if (!usernameMap.containsKey(username)) {
      userListModel.addElement(displayName);
      usernameMap.put(username,userListModel.indexOf(displayName));
    }
 else {
      userListModel.setElementAt(displayName,usernameMap.get(username));
    }
  }
  Iterator<String> iter=usernameMap.keySet().iterator();
  while (iter.hasNext()) {
    String username=(String)iter.next();
    boolean found=false;
    for (int i=0; i < presenceInfoList.length; i++) {
      PresenceInfo info=presenceInfoList[i];
      if (username.equals(info.userID.getUsername())) {
        found=true;
        break;
      }
    }
    if (!found) {
      userListModel.removeElementAt(usernameMap.get(username));
      usernameMap.remove(username);
    }
  }
}","public synchronized void setUserList(){
  PresenceInfo[] presenceInfoList=pm.getAllUsers();
  for (int i=0; i < presenceInfoList.length; i++) {
    PresenceInfo info=presenceInfoList[i];
    if (info.callID == null) {
      continue;
    }
    String username=info.userID.getUsername();
    String displayName=NameTagNode.getDisplayName(info.usernameAlias,info.isSpeaking,info.isMuted);
    if (!usernameMap.containsKey(username)) {
      userListModel.addElement(displayName);
      usernameMap.put(username,displayName);
    }
 else {
      String oldName=usernameMap.get(username);
      if (!displayName.equals(oldName)) {
        usernameMap.replace(username,displayName);
        int index=userListModel.indexOf(oldName);
        userListModel.setElementAt(displayName,index);
      }
    }
  }
  Iterator<String> iter=usernameMap.keySet().iterator();
  while (iter.hasNext()) {
    String username=(String)iter.next();
    boolean found=false;
    for (int i=0; i < presenceInfoList.length; i++) {
      PresenceInfo info=presenceInfoList[i];
      if (username.equals(info.userID.getUsername())) {
        found=true;
        break;
      }
    }
    if (!found) {
      userListModel.removeElement(usernameMap.get(username));
      usernameMap.remove(username);
    }
  }
}"
46124,"public synchronized void setNameTag(EventType eventType,String username,String alias,Color foregroundColor,Font font){
  logger.fine(""String_Node_Str"" + eventType + ""String_Node_Str""+ username+ ""String_Node_Str""+ alias+ ""String_Node_Str""+ foregroundColor+ ""String_Node_Str""+ font);
switch (eventType) {
case HIDE:
    labelHidden=true;
  removeLabel();
return;
case SMALL_FONT:
labelHidden=false;
removeLabel();
setHeight(SMALL_SIZE);
break;
case REGULAR_FONT:
labelHidden=false;
removeLabel();
setHeight(REGULAR_SIZE);
break;
case LARGE_FONT:
labelHidden=false;
removeLabel();
setHeight(LARGE_SIZE);
break;
case ENTERED_CONE_OF_SILENCE:
inConeOfSilence=true;
setForegroundColor(CONE_OF_SILENCE_COLOR);
break;
case EXITED_CONE_OF_SILENCE:
inConeOfSilence=false;
setForegroundColor(NOT_SPEAKING_COLOR);
break;
case STARTED_SPEAKING:
isSpeaking=true;
setForegroundColor(SPEAKING_COLOR);
break;
case STOPPED_SPEAKING:
isSpeaking=false;
setForegroundColor(NOT_SPEAKING_COLOR);
break;
case MUTE:
isMuted=true;
setForegroundColor(NOT_SPEAKING_COLOR);
removeLabel();
break;
case UNMUTE:
isMuted=false;
setForegroundColor(NOT_SPEAKING_COLOR);
break;
case CHANGE_NAME:
removeLabel();
usernameAlias=alias;
break;
default :
logger.warning(""String_Node_Str"" + eventType);
break;
}
if ((usernameAlias != null) && !username.equals(usernameAlias)) {
setFont(ALIAS_NAME_FONT);
updateLabel(getDisplayName(usernameAlias,isSpeaking,isMuted));
}
 else {
setFont(REAL_NAME_FONT);
updateLabel(getDisplayName(name,isSpeaking,isMuted));
}
if (foregroundColor != null) {
setForegroundColor(foregroundColor);
}
}","public synchronized void setNameTag(EventType eventType,String username,String alias,Color foregroundColor,Font font){
  logger.fine(""String_Node_Str"" + eventType + ""String_Node_Str""+ username+ ""String_Node_Str""+ alias+ ""String_Node_Str""+ foregroundColor+ ""String_Node_Str""+ font);
switch (eventType) {
case HIDE:
    labelHidden=true;
  removeLabel();
return;
case SMALL_FONT:
labelHidden=false;
removeLabel();
setHeight(SMALL_SIZE);
break;
case REGULAR_FONT:
labelHidden=false;
removeLabel();
setHeight(REGULAR_SIZE);
break;
case LARGE_FONT:
labelHidden=false;
removeLabel();
setHeight(LARGE_SIZE);
break;
case ENTERED_CONE_OF_SILENCE:
inConeOfSilence=true;
setForegroundColor(CONE_OF_SILENCE_COLOR);
break;
case EXITED_CONE_OF_SILENCE:
inConeOfSilence=false;
setForegroundColor(NOT_SPEAKING_COLOR);
break;
case STARTED_SPEAKING:
isSpeaking=true;
setForegroundColor(SPEAKING_COLOR);
break;
case STOPPED_SPEAKING:
isSpeaking=false;
setForegroundColor(NOT_SPEAKING_COLOR);
break;
case MUTE:
isMuted=true;
setForegroundColor(NOT_SPEAKING_COLOR);
removeLabel();
break;
case UNMUTE:
isMuted=false;
setForegroundColor(NOT_SPEAKING_COLOR);
break;
case CHANGE_NAME:
removeLabel();
usernameAlias=alias;
break;
default :
logger.warning(""String_Node_Str"" + eventType);
break;
}
if ((alias != null) && !alias.equals(username)) {
setFont(ALIAS_NAME_FONT);
usernameAlias=alias;
updateLabel(getDisplayName(usernameAlias,isSpeaking,isMuted));
}
 else {
setFont(REAL_NAME_FONT);
updateLabel(getDisplayName(name,isSpeaking,isMuted));
}
if (foregroundColor != null) {
setForegroundColor(foregroundColor);
}
}"
46125,"/** 
 * Constructor 
 */
public ContextMenuManager(){
  factoryList=new LinkedList();
  LoginManager.addPrimaryServerListener(new PrimaryServerListener(){
    public void primaryServer(    ServerSessionManager server){
synchronized (factoryList) {
        factoryList.clear();
        if (server != null) {
          ScannedClassLoader cl=server.getClassloader();
          Iterator<ContextMenuFactorySPI> it=cl.getAll(ContextMenuFactory.class,ContextMenuFactorySPI.class);
          while (it.hasNext() == true) {
            factoryList.add(it.next());
          }
        }
      }
    }
  }
);
}","/** 
 * Constructor 
 */
public ContextMenuManager(){
  factoryList=new LinkedList();
  listeners=new HashSet();
  LoginManager.addPrimaryServerListener(new PrimaryServerListener(){
    public void primaryServer(    ServerSessionManager server){
synchronized (factoryList) {
        factoryList.clear();
        if (server != null) {
          ScannedClassLoader cl=server.getClassloader();
          Iterator<ContextMenuFactorySPI> it=cl.getAll(ContextMenuFactory.class,ContextMenuFactorySPI.class);
          while (it.hasNext() == true) {
            factoryList.add(it.next());
          }
        }
      }
synchronized (listeners) {
        listeners.clear();
      }
    }
  }
);
}"
46126,"public void primaryServer(ServerSessionManager server){
synchronized (factoryList) {
    factoryList.clear();
    if (server != null) {
      ScannedClassLoader cl=server.getClassloader();
      Iterator<ContextMenuFactorySPI> it=cl.getAll(ContextMenuFactory.class,ContextMenuFactorySPI.class);
      while (it.hasNext() == true) {
        factoryList.add(it.next());
      }
    }
  }
}","public void primaryServer(ServerSessionManager server){
synchronized (factoryList) {
    factoryList.clear();
    if (server != null) {
      ScannedClassLoader cl=server.getClassloader();
      Iterator<ContextMenuFactorySPI> it=cl.getAll(ContextMenuFactory.class,ContextMenuFactorySPI.class);
      while (it.hasNext() == true) {
        factoryList.add(it.next());
      }
    }
  }
synchronized (listeners) {
    listeners.clear();
  }
}"
46127,"/** 
 * Remove the gives context menu factory from the cell component. This change will not effect a menu that is currently being displayed, but will be applied next time the menu is displayed
 * @param factory The context menu factory to remove
 */
public void removeContextMenuFactory(ContextMenuFactorySPI factory){
synchronized (factories) {
    factories.remove(factory);
  }
}","/** 
 * Remove the given context menu factory from the cell component. This change will not effect a menu that is currently being displayed, but will be applied next time the menu is displayed
 * @param factory The context menu factory to remove
 */
public void removeContextMenuFactory(ContextMenuFactorySPI factory){
synchronized (factories) {
    factories.remove(factory);
  }
}"
46128,"/** 
 * This is called when the status of the cell changes.
 */
@Override protected void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
switch (status) {
case ACTIVE:
    if (increasing) {
      if (menuFactory == null) {
        menuFactory=new ContextMenuFactorySPI(){
          public ContextMenuItem[] getContextMenuItems(          ContextEvent event){
            return windowMenuItemsForEvent(event,contextMenuComp);
          }
        }
;
        contextMenuComp.addContextMenuFactory(menuFactory);
      }
    }
  break;
case DISK:
if (!increasing) {
  if (menuFactory != null) {
    contextMenuComp.removeContextMenuFactory(menuFactory);
    menuFactory=null;
  }
}
break;
}
}","/** 
 * This is called when the status of the cell changes.
 */
@Override protected void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
switch (status) {
case ACTIVE:
    if (increasing) {
      if (menuFactory == null) {
        menuFactory=new ContextMenuFactorySPI(){
          public ContextMenuItem[] getContextMenuItems(          ContextEvent event){
            return windowMenuItemsForEvent(event,contextMenuComp);
          }
        }
;
        contextMenuComp.addContextMenuFactory(menuFactory);
      }
      if (menuListener == null) {
        menuListener=new ContextMenuListener(){
          public void contextMenuDisplayed(          ContextEvent event){
            System.out.println(""String_Node_Str"");
            windowMenuDisplayed(event,contextMenuComp);
          }
        }
;
        ContextMenuManager cmm=ContextMenuManager.getContextMenuManager();
        cmm.addContextMenuListener(menuListener);
      }
    }
  break;
case DISK:
if (!increasing) {
  if (menuFactory != null) {
    contextMenuComp.removeContextMenuFactory(menuFactory);
    menuFactory=null;
  }
  if (menuListener != null) {
    ContextMenuManager cmm=ContextMenuManager.getContextMenuManager();
    cmm.removeContextMenuListener(menuListener);
    menuListener=null;
  }
}
break;
}
}"
46129,"/** 
 * Return the app-specific window menu items for the case where the app doesn't have control.
 */
private ContextMenuItem[] windowMenuItemsForNoControl(ContextMenuComponent contextMenuComp){
  contextMenuComp.setShowStandardMenuItems(true);
  return new ContextMenuItem[]{new SimpleContextMenuItem(""String_Node_Str"",new ContextMenuActionListener(){
    public void actionPerformed(    ContextMenuItemEvent event){
      app.getControlArb().takeControl();
    }
  }
)};
}","/** 
 * Return the app-specific window menu items for the case where the app doesn't have control.
 */
private ContextMenuItem[] windowMenuItemsForNoControl(ContextMenuComponent contextMenuComp){
  return new ContextMenuItem[]{new SimpleContextMenuItem(""String_Node_Str"",new ContextMenuActionListener(){
    public void actionPerformed(    ContextMenuItemEvent event){
      app.getControlArb().takeControl();
    }
  }
)};
}"
46130,"/** 
 * Initialize the context menu items. This is synchronized so nothing else can do stuff while the context menu is being created. An example of would be repaintMenuItem() which may try to access the context menu before it has been created.
 */
private synchronized void initializeMenu(ContextEvent event,Cell cell){
  for (  Map.Entry<JMenuItem,ContextMenuItem> entry : menuItemMap.entrySet()) {
    entry.getValue().removeMenuItemRepaintListener(this);
  }
  contextPanel.removeAll();
  menuItemMap.clear();
  reverseMenuMap.clear();
  JPanel titlePanel=new JPanel();
  titlePanel.setLayout(new FlowLayout(FlowLayout.CENTER,0,0));
  titlePanel.setBackground(WL_BLUE);
  JLabel title=new JLabel(""String_Node_Str"" + cell.getName() + ""String_Node_Str"");
  title.setForeground(Color.WHITE);
  title.setBackground(Color.GRAY);
  titlePanel.add(title);
  contextPanel.add(titlePanel);
  contextPanel.invalidate();
  ContextMenuComponent cmc=cell.getComponent(ContextMenuComponent.class);
  boolean showStandardMenuItems=true;
  if (cmc != null) {
    showStandardMenuItems=cmc.isShowStandardMenuItems();
  }
  ContextMenuManager cmm=ContextMenuManager.getContextMenuManager();
  List<ContextMenuFactorySPI> factoryList=cmm.getContextMenuFactoryList();
  if (showStandardMenuItems == true) {
    for (    ContextMenuFactorySPI factory : factoryList) {
      ContextMenuItem items[]=factory.getContextMenuItems(event);
      for (      ContextMenuItem item : items) {
        addContextMenuItem(item,cell);
      }
    }
  }
  if (cmc != null) {
    ContextMenuFactorySPI factories[]=cmc.getContextMenuFactories();
    for (    ContextMenuFactorySPI factory : factories) {
      ContextMenuItem items[]=factory.getContextMenuItems(event);
      for (      ContextMenuItem item : items) {
        addContextMenuItem(item,cell);
      }
    }
  }
}","/** 
 * Initialize the context menu items. This is synchronized so nothing else can do stuff while the context menu is being created. An example of would be repaintMenuItem() which may try to access the context menu before it has been created.
 */
private synchronized void initializeMenu(ContextEvent event,Cell cell){
  for (  Map.Entry<JMenuItem,ContextMenuItem> entry : menuItemMap.entrySet()) {
    entry.getValue().removeMenuItemRepaintListener(this);
  }
  contextPanel.removeAll();
  menuItemMap.clear();
  reverseMenuMap.clear();
  JPanel titlePanel=new JPanel();
  titlePanel.setLayout(new FlowLayout(FlowLayout.CENTER,0,0));
  titlePanel.setBackground(WL_BLUE);
  JLabel title=new JLabel(""String_Node_Str"" + cell.getName() + ""String_Node_Str"");
  title.setForeground(Color.WHITE);
  title.setBackground(Color.GRAY);
  titlePanel.add(title);
  contextPanel.add(titlePanel);
  contextPanel.invalidate();
  ContextMenuManager.getContextMenuManager().fireContextMenuEvent(event);
  ContextMenuComponent cmc=cell.getComponent(ContextMenuComponent.class);
  boolean showStandardMenuItems=true;
  if (cmc != null) {
    showStandardMenuItems=cmc.isShowStandardMenuItems();
  }
  ContextMenuManager cmm=ContextMenuManager.getContextMenuManager();
  List<ContextMenuFactorySPI> factoryList=cmm.getContextMenuFactoryList();
  if (showStandardMenuItems == true) {
    for (    ContextMenuFactorySPI factory : factoryList) {
      ContextMenuItem items[]=factory.getContextMenuItems(event);
      for (      ContextMenuItem item : items) {
        addContextMenuItem(item,cell);
      }
    }
  }
  if (cmc != null) {
    ContextMenuFactorySPI factories[]=cmc.getContextMenuFactories();
    for (    ContextMenuFactorySPI factory : factories) {
      ContextMenuItem items[]=factory.getContextMenuItems(event);
      for (      ContextMenuItem item : items) {
        addContextMenuItem(item,cell);
      }
    }
  }
}"
46131,"public static void makeOrbsVisible(boolean isVisible){
  OrbCell[] attachedOrbs=attachedOrbMap.values().toArray(new OrbCell[0]);
  for (int i=0; i < attachedOrbs.length; i++) {
    attachedOrbs[i].setVisible(isVisible);
  }
  for (  OrbCell orbCell : detachedOrbList) {
    orbCell.setVisible(isVisible);
  }
}","public static void makeOrbsVisible(boolean isVisible){
  Collection<ArrayList<OrbCell>> attachedOrbs=attachedOrbMap.values();
  Iterator<ArrayList<OrbCell>> it=attachedOrbs.iterator();
  while (it.hasNext()) {
    ArrayList<OrbCell> orbs=it.next();
    for (    OrbCell orb : orbs) {
      orb.setVisible(isVisible);
    }
  }
  for (  OrbCell orbCell : detachedOrbList) {
    orbCell.setVisible(isVisible);
  }
}"
46132,"/** 
 * Return the space that encloses this point, if the space does not exist, create it
 * @param position
 * @return
 */
public Iterable<Space> getEnclosingSpace(BoundingVolume volume){
  ArrayList retList=new ArrayList();
  Vector3f point=volume.getCenter();
  float xf=((point.x + SPACE_SIZE) / (SPACE_SIZE * 2));
  float yf=((point.y + SPACE_SIZE) / (SPACE_SIZE * 2));
  float zf=((point.z + SPACE_SIZE) / (SPACE_SIZE * 2));
  int x, y, z;
  if (xf > 0)   x=(int)Math.floor(xf);
 else   x=(int)Math.ceil(xf);
  if (yf > 0)   y=(int)Math.floor(yf);
 else   y=(int)Math.ceil(yf);
  if (zf > 0)   z=(int)Math.floor(zf);
 else   z=(int)Math.ceil(zf);
  Space sp=getEnclosingSpaceImpl(x,y,z);
  if (sp == null) {
    sp=createSpace(x,y,z);
  }
  retList.add(sp);
  int xStep;
  int yStep;
  int zStep;
  if (volume instanceof BoundingBox) {
    xStep=1 + (int)(((BoundingBox)volume).xExtent / (SPACE_SIZE));
    yStep=1 + (int)(((BoundingBox)volume).yExtent / (SPACE_SIZE));
    zStep=1 + (int)(((BoundingBox)volume).zExtent / (SPACE_SIZE));
  }
 else   if (volume instanceof BoundingSphere) {
    xStep=yStep=zStep=1 + (int)(((BoundingSphere)volume).getRadius() / (SPACE_SIZE));
  }
 else   throw new RuntimeException(""String_Node_Str"" + volume.getClass().getName());
  yStep=0;
  for (int xs=-xStep; xs <= xStep; xs++) {
    for (int ys=-yStep; ys <= yStep; ys++) {
      for (int zs=-zStep; zs <= zStep; zs++) {
        sp=getEnclosingSpaceImpl(x + xs,y + ys,z + zs);
        if (sp == null) {
          sp=createSpace(x + xs,y + ys,z + zs);
        }
        if (sp.getWorldBounds().intersects(volume)) {
          retList.add(sp);
        }
 else {
        }
      }
    }
  }
  return retList;
}","/** 
 * Return the space that encloses this point, if the space does not exist, create it
 * @param position
 * @return
 */
public Iterable<Space> getEnclosingSpace(BoundingVolume volume){
  ArrayList retList=new ArrayList();
  Vector3f point=volume.getCenter();
  float xf=((point.x + SPACE_SIZE) / (SPACE_SIZE * 2));
  float yf=((point.y + SPACE_SIZE) / (SPACE_SIZE * 2));
  float zf=((point.z + SPACE_SIZE) / (SPACE_SIZE * 2));
  int x, y, z;
  if (xf > 0)   x=(int)Math.floor(xf);
 else   x=(int)Math.ceil(xf);
  if (yf > 0)   y=(int)Math.floor(yf);
 else   y=(int)Math.ceil(yf);
  if (zf > 0)   z=(int)Math.floor(zf);
 else   z=(int)Math.ceil(zf);
  Space sp=getEnclosingSpaceImpl(x,y,z);
  if (sp == null) {
    sp=createSpace(x,y,z);
  }
  retList.add(sp);
  int xStep;
  int yStep;
  int zStep;
  if (volume instanceof BoundingBox) {
    xStep=1 + (int)(((BoundingBox)volume).xExtent / (SPACE_SIZE));
    yStep=1 + (int)(((BoundingBox)volume).yExtent / (SPACE_SIZE));
    zStep=1 + (int)(((BoundingBox)volume).zExtent / (SPACE_SIZE));
  }
 else   if (volume instanceof BoundingSphere) {
    xStep=yStep=zStep=1 + (int)(((BoundingSphere)volume).getRadius() / (SPACE_SIZE));
  }
 else   throw new RuntimeException(""String_Node_Str"" + volume.getClass().getName());
  for (int xs=-xStep; xs <= xStep; xs++) {
    for (int ys=-yStep; ys <= yStep; ys++) {
      for (int zs=-zStep; zs <= zStep; zs++) {
        sp=getEnclosingSpaceImpl(x + xs,y + ys,z + zs);
        if (sp == null) {
          sp=createSpace(x + xs,y + ys,z + zs);
        }
        if (sp.getWorldBounds().intersects(volume)) {
          retList.add(sp);
        }
 else {
        }
      }
    }
  }
  return retList;
}"
46133,"/** 
 * Set the cell status, ensuring that the cell passes through any intermediate status.
 * @param cell
 * @param status
 */
private void setCellStatus(Cell cell,CellStatus status){
  logger.warning(""String_Node_Str"" + cell.getCellID() + ""String_Node_Str""+ status);
  int currentStatus=cell.getStatus().ordinal();
  int requiredStatus=status.ordinal();
  if (currentStatus == requiredStatus)   return;
  int dir=(requiredStatus > currentStatus ? 1 : -1);
  boolean increasing=(dir == 1);
  while (currentStatus != requiredStatus) {
    currentStatus+=dir;
    cell.setStatus(CellStatus.values()[currentStatus],increasing);
  }
}","/** 
 * Set the cell status, ensuring that the cell passes through any intermediate status.
 * @param cell
 * @param status
 */
private void setCellStatus(Cell cell,CellStatus status){
  logger.fine(""String_Node_Str"" + cell.getCellID() + ""String_Node_Str""+ status);
synchronized (cell) {
    int currentStatus=cell.getStatus().ordinal();
    int requiredStatus=status.ordinal();
    if (currentStatus == requiredStatus)     return;
    int dir=(requiredStatus > currentStatus ? 1 : -1);
    boolean increasing=(dir == 1);
    while (currentStatus != requiredStatus) {
      currentStatus+=dir;
      cell.setStatus(CellStatus.values()[currentStatus],increasing);
    }
  }
}"
46134,"@Override public void setClientState(CellClientState configData){
  super.setClientState(configData);
  SimpleShapeCellClientState c=(SimpleShapeCellClientState)configData;
  this.shape=c.getShape();
  this.mass=c.getMass();
  this.materialJME=c.getMaterialJME();
  if (shapeRenderer != null) {
    shapeRenderer.shapeChanged();
    shapeRenderer.colorChanged();
  }
}","@Override public void setClientState(CellClientState configData){
  super.setClientState(configData);
  SimpleShapeCellClientState c=(SimpleShapeCellClientState)configData;
  boolean shapeChanged=true;
  if (shape != null && shape.equals(c.getShape()) == true) {
    shapeChanged=false;
  }
  this.shape=c.getShape();
  this.mass=c.getMass();
  this.materialJME=c.getMaterialJME();
  if (shapeRenderer != null && shapeChanged) {
    System.out.println(""String_Node_Str"");
    shapeRenderer.shapeChanged();
    shapeRenderer.colorChanged();
  }
}"
46135,"private double getServerVolume(double clientVolume){
  double serverVolume;
  if (clientVolume > 5) {
    serverVolume=(double)(1 + ((clientVolume - 5) * .6));
  }
 else {
    serverVolume=(double)(clientVolume / 5.);
  }
  return serverVolume;
}","private int getServerVolume(double clientVolume){
  double serverVolume;
  if (clientVolume > 5) {
    serverVolume=(double)(1 + ((clientVolume - 5) * .6));
  }
 else {
    serverVolume=(double)(clientVolume / 5.);
  }
  return serverVolume;
}"
46136,"/** 
 * Returns the children of the WFS path. The relativePath argument must never begin with a ""/"".
 */
public static CellList getWFSChildren(String root,String canonicalName){
  try {
    URL url=new URL(getWebServerURL(),WFS_PREFIX + root + ""String_Node_Str""+ canonicalName);
    return CellList.decode(canonicalName,url.openStream());
  }
 catch (  java.lang.Exception excp) {
    return null;
  }
}","/** 
 * Returns the children of the WFS path. The relativePath argument must never begin with a ""/"".
 */
public static CellList getWFSChildren(String root,String canonicalName){
  try {
    URL url=getURL(WFS_PREFIX + root + ""String_Node_Str""+ canonicalName);
    return CellList.decode(canonicalName,url.openStream());
  }
 catch (  java.lang.Exception excp) {
    return null;
  }
}"
46137,"/** 
 * Returns the cell's setup information, null upon error. The relativePath argument must never begin with a ""/"". For a cell in the root path, use an empty string for the relative path argument
 */
public static CellServerState getWFSCell(String root,String relativePath,String name){
  try {
    URL url=null;
    if (relativePath.compareTo(""String_Node_Str"") == 0) {
      url=new URL(getWebServerURL(),WFS_PREFIX + root + ""String_Node_Str""+ name);
    }
 else {
      url=new URL(getWebServerURL(),WFS_PREFIX + root + ""String_Node_Str""+ relativePath+ ""String_Node_Str""+ name);
    }
    InputStreamReader isr=new InputStreamReader(url.openStream());
    return CellServerState.decode(isr,null);
  }
 catch (  java.lang.Exception excp) {
    System.out.println(excp.toString());
    return null;
  }
}","/** 
 * Returns the cell's setup information, null upon error. The relativePath argument must never begin with a ""/"". For a cell in the root path, use an empty string for the relative path argument
 */
public static CellServerState getWFSCell(String root,String relativePath,String name){
  try {
    URL url=null;
    if (relativePath.compareTo(""String_Node_Str"") == 0) {
      url=getURL(WFS_PREFIX + root + ""String_Node_Str""+ name);
    }
 else {
      url=getURL(WFS_PREFIX + root + ""String_Node_Str""+ relativePath+ ""String_Node_Str""+ name);
    }
    InputStreamReader isr=new InputStreamReader(url.openStream());
    return CellServerState.decode(isr,null);
  }
 catch (  java.lang.Exception excp) {
    System.out.println(excp.toString());
    return null;
  }
}"
46138,"/** 
 * Returns all of the WFS root names or null upon error
 */
public static WorldRootList getWFSRoots(){
  try {
    URL url=new URL(getWebServerURL(),WFS_PREFIX + ""String_Node_Str"");
    CellImporter.getLogger().info(""String_Node_Str"" + url.toExternalForm());
    return WorldRootList.decode(url.openStream());
  }
 catch (  java.lang.Exception excp) {
    CellImporter.getLogger().info(""String_Node_Str"" + excp.toString());
    return null;
  }
}","/** 
 * Returns all of the WFS root names or null upon error
 */
public static WorldRootList getWFSRoots(){
  try {
    URL url=getURL(WFS_PREFIX + ""String_Node_Str"");
    CellImporter.getLogger().info(""String_Node_Str"" + url.toExternalForm());
    return WorldRootList.decode(url.openStream());
  }
 catch (  java.lang.Exception excp) {
    CellImporter.getLogger().info(""String_Node_Str"" + excp.toString());
    return null;
  }
}"
46139,"/** 
 * Returns the list of cells in the WFS as a hashmap. The list of cells is ordered so that parent cells appear before child cells. Takes the WFS URI of the WFS root.
 */
public static CellList getWFSCells(String root,boolean reload){
  try {
    URL url=new URL(getWebServerURL(),WFS_PREFIX + root + ""String_Node_Str""+ Boolean.toString(reload));
    return CellList.decode(""String_Node_Str"",url.openStream());
  }
 catch (  java.lang.Exception excp) {
    return null;
  }
}","/** 
 * Returns the list of cells in the WFS as a hashmap. The list of cells is ordered so that parent cells appear before child cells. Takes the WFS URI of the WFS root.
 */
public static CellList getWFSCells(String root,boolean reload){
  try {
    URL url=getURL(WFS_PREFIX + root + ""String_Node_Str""+ Boolean.toString(reload));
    return CellList.decode(""String_Node_Str"",url.openStream());
  }
 catch (  java.lang.Exception excp) {
    return null;
  }
}"
46140,"/** 
 * Returns the children of the root WFS path, given the name of the WFS root.
 */
public static CellList getWFSRootChildren(String root){
  try {
    URL url=new URL(getWebServerURL(),WFS_PREFIX + root + ""String_Node_Str"");
    return CellList.decode(""String_Node_Str"",url.openStream());
  }
 catch (  java.lang.Exception excp) {
    System.err.println(excp);
    return null;
  }
}","/** 
 * Returns the children of the root WFS path, given the name of the WFS root.
 */
public static CellList getWFSRootChildren(String root){
  try {
    URL url=getURL(WFS_PREFIX + root + ""String_Node_Str"");
    return CellList.decode(""String_Node_Str"",url.openStream());
  }
 catch (  java.lang.Exception excp) {
    System.err.println(excp);
    return null;
  }
}"
46141,"@Override public void mouseExited(MouseEvent e){
  JMenuItem item=(JMenuItem)e.getSource();
  if (item.isEnabled() == true) {
    item.setBackground(Color.white);
    contextMenu.pack();
  }
}","@Override public void mouseExited(MouseEvent e){
  System.out.println(""String_Node_Str"");
  JMenuItem item=(JMenuItem)e.getSource();
  if (item.isEnabled() == true) {
    item.setBackground(Color.white);
    contextMenu.pack();
  }
}"
46142,"@Override public void mouseEntered(MouseEvent e){
  JMenuItem item=(JMenuItem)e.getSource();
  if (item.isEnabled() == true) {
    item.setBackground(WL_LIGHT_GREEN);
    contextMenu.pack();
  }
}","@Override public void mouseEntered(MouseEvent e){
  JMenuItem item=(JMenuItem)e.getSource();
  if (item.isEnabled() == true) {
    System.out.println(""String_Node_Str"");
    item.setBackground(WL_LIGHT_GREEN);
    item.setOpaque(true);
    item.repaint();
    contextMenu.pack();
  }
}"
46143,"@Override public void mouseClicked(MouseEvent e){
  JMenuItem item=(JMenuItem)e.getSource();
  if (item.isEnabled() == false) {
    return;
  }
  item.setBackground(WL_GREEN);
  hideContextMenu();
  ContextMenuItem menuItem=menuItemMap.get(item);
  if (menuItem != null && menuItem instanceof SimpleContextMenuItem) {
    SimpleContextMenuItem scmi=(SimpleContextMenuItem)menuItem;
    ContextMenuActionListener listener=scmi.getActionListener();
    if (listener != null) {
      listener.actionPerformed(new ContextMenuItemEvent(menuItem,popupCell));
    }
  }
}","@Override public void mouseClicked(MouseEvent e){
  JMenuItem item=(JMenuItem)e.getSource();
  if (item.isEnabled() == false) {
    return;
  }
  item.setBackground(WL_GREEN);
  item.repaint();
  hideContextMenu();
  ContextMenuItem menuItem=menuItemMap.get(item);
  if (menuItem != null && menuItem instanceof SimpleContextMenuItem) {
    SimpleContextMenuItem scmi=(SimpleContextMenuItem)menuItem;
    ContextMenuActionListener listener=scmi.getActionListener();
    if (listener != null) {
      listener.actionPerformed(new ContextMenuItemEvent(menuItem,popupCell));
    }
  }
}"
46144,"/** 
 * Constructor 
 */
public SwingContextMenu(){
  contextMenu=new JFrame();
  contextMenu.setResizable(false);
  contextMenu.setUndecorated(true);
  contextMenu.getContentPane().setLayout(new GridLayout(1,1));
  contextPanel=new JPanel();
  contextPanel.setBackground(WL_LIGHT_BLUE);
  contextPanel.setOpaque(true);
  contextMenu.getContentPane().add(contextPanel);
  contextPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
  contextPanel.setLayout(new BoxLayout(contextPanel,BoxLayout.Y_AXIS));
}","/** 
 * Constructor 
 */
public SwingContextMenu(){
  contextMenu=new JFrame();
  contextMenu.setResizable(false);
  contextMenu.setUndecorated(true);
  contextMenu.getContentPane().setLayout(new GridLayout(1,1));
  contextPanel=new JPanel();
  contextMenu.getContentPane().add(contextPanel);
  contextPanel.setBorder(BorderFactory.createLineBorder(WL_LIGHT_BLUE,2));
  contextPanel.setLayout(new BoxLayout(contextPanel,BoxLayout.Y_AXIS));
}"
46145,"@Override public void disconnected(){
  super.disconnected();
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.removeViewCellConfiguredListener(this);
  SoftphoneControlImpl.getInstance().removeSoftphoneListener(this);
  SoftphoneControlImpl.getInstance().sendCommandToSoftphone(""String_Node_Str"");
  InputManager.inputManager().removeGlobalEventListener(muteListener);
  notifyDisconnectListeners();
}","@Override public void disconnected(){
  super.disconnected();
  PresenceManagerFactory.reset();
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.removeViewCellConfiguredListener(this);
  SoftphoneControlImpl.getInstance().removeSoftphoneListener(this);
  SoftphoneControlImpl.getInstance().sendCommandToSoftphone(""String_Node_Str"");
  InputManager.inputManager().removeGlobalEventListener(muteListener);
  notifyDisconnectListeners();
}"
46146,"private void detachOrb(boolean setTransform){
  if (hostCell == null) {
    return;
  }
  hostCell.removeTransformChangeListener(this);
  if (setTransform) {
    transformChanged(hostCell,false);
  }
  ArrayList<OrbCell> attachedOrbList=attachedOrbMap.get(hostCell);
synchronized (attachedOrbList) {
    attachedOrbList.remove(orbCell);
  }
synchronized (detachedOrbList) {
    detachedOrbList.add(orbCell);
  }
  if (orbDialog != null) {
    orbDialog.orbDetached();
  }
  hostCell=null;
}","private void detachOrb(boolean positionAttachedOrbs){
  hostCell.removeTransformChangeListener(this);
  ArrayList<OrbCell> attachedOrbList=attachedOrbMap.get(hostCell);
synchronized (attachedOrbList) {
    attachedOrbList.remove(orbCell);
  }
synchronized (detachedOrbList) {
    detachedOrbList.add(orbCell);
  }
  if (positionAttachedOrbs) {
    positionAttachedOrbs(hostCell);
  }
  if (orbDialog != null) {
    orbDialog.orbDetached();
  }
  hostCell=null;
}"
46147,"public void processMessage(final Message message){
  logger.finest(""String_Node_Str"" + message);
  if (message instanceof OrbEndCallMessage) {
    if (orbDialog != null) {
      orbDialog.setVisible(false);
    }
    done();
    return;
  }
  if (message instanceof OrbSpeakingMessage) {
    OrbSpeakingMessage msg=(OrbSpeakingMessage)message;
    logger.fine(""String_Node_Str"" + msg.isSpeaking() + ""String_Node_Str""+ msg.getCellID()+ ""String_Node_Str""+ presenceInfo);
    pm.setSpeaking(presenceInfo,msg.isSpeaking());
    if (msg.isSpeaking()) {
      nameTag.setNameTag(EventType.STARTED_SPEAKING,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
    }
 else {
      nameTag.setNameTag(EventType.STOPPED_SPEAKING,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
    }
    return;
  }
  if (message instanceof OrbMuteCallMessage) {
    OrbMuteCallMessage msg=(OrbMuteCallMessage)message;
    pm.setMute(presenceInfo,msg.isMuted());
    if (msg.isMuted()) {
      nameTag.setNameTag(EventType.MUTE,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
    }
 else {
      nameTag.setNameTag(EventType.UNMUTE,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
    }
    return;
  }
  if (message instanceof OrbSetBystanderCountMessage) {
    OrbSetBystanderCountMessage msg=(OrbSetBystanderCountMessage)message;
    nameTag.setNameTag(EventType.CHANGE_NAME,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias + ""String_Node_Str"" + msg.getBystanderCount()+ ""String_Node_Str"");
    return;
  }
  if (message instanceof OrbChangeNameMessage) {
    OrbChangeNameMessage msg=(OrbChangeNameMessage)message;
    username=msg.getName();
    pm.changeUsername(presenceInfo,username);
    nameTag.setNameTag(EventType.CHANGE_NAME,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
    return;
  }
  if (message instanceof OrbAttachMessage) {
    OrbAttachMessage msg=(OrbAttachMessage)message;
    attachOrb(msg.getHostCellID(),msg.isAttached());
    return;
  }
  if (message instanceof OrbAttachVirtualPlayerMessage) {
    OrbAttachVirtualPlayerMessage msg=(OrbAttachVirtualPlayerMessage)message;
    PresenceInfo info=pm.getPresenceInfo(msg.getHostCallID());
    if (info == null) {
      logger.warning(""String_Node_Str"" + msg.getHostCallID());
      return;
    }
    attachOrb(info.cellID,true);
    return;
  }
}","public void processMessage(final Message message){
  logger.finest(""String_Node_Str"" + message);
  if (message instanceof OrbEndCallMessage) {
    if (orbDialog != null) {
      orbDialog.setVisible(false);
    }
    done();
    return;
  }
  if (message instanceof OrbSpeakingMessage) {
    OrbSpeakingMessage msg=(OrbSpeakingMessage)message;
    logger.fine(""String_Node_Str"" + msg.isSpeaking() + ""String_Node_Str""+ msg.getCellID()+ ""String_Node_Str""+ presenceInfo);
    if (presenceInfoAdded) {
      pm.setSpeaking(presenceInfo,msg.isSpeaking());
    }
    if (msg.isSpeaking()) {
      nameTag.setNameTag(EventType.STARTED_SPEAKING,username,usernameAlias);
    }
 else {
      nameTag.setNameTag(EventType.STOPPED_SPEAKING,username,usernameAlias);
    }
    return;
  }
  if (message instanceof OrbMuteCallMessage) {
    OrbMuteCallMessage msg=(OrbMuteCallMessage)message;
    if (presenceInfoAdded) {
      pm.setMute(presenceInfo,msg.isMuted());
    }
    if (msg.isMuted()) {
      nameTag.setNameTag(EventType.MUTE,username,usernameAlias);
    }
 else {
      nameTag.setNameTag(EventType.UNMUTE,username,usernameAlias);
    }
    return;
  }
  if (message instanceof OrbSetBystanderCountMessage) {
    OrbSetBystanderCountMessage msg=(OrbSetBystanderCountMessage)message;
    nameTag.setNameTag(EventType.CHANGE_NAME,username,usernameAlias + ""String_Node_Str"" + msg.getBystanderCount()+ ""String_Node_Str"");
    return;
  }
  if (message instanceof OrbChangeNameMessage) {
    OrbChangeNameMessage msg=(OrbChangeNameMessage)message;
    usernameAlias=msg.getName();
    if (presenceInfoAdded) {
      pm.changeUsername(presenceInfo,usernameAlias);
    }
    nameTag.setNameTag(EventType.CHANGE_NAME,username,usernameAlias);
    return;
  }
  if (message instanceof OrbAttachMessage) {
    OrbAttachMessage msg=(OrbAttachMessage)message;
    attachOrb(msg.getHostCellID(),msg.isAttached());
    return;
  }
  if (message instanceof OrbAttachVirtualPlayerMessage) {
    OrbAttachVirtualPlayerMessage msg=(OrbAttachVirtualPlayerMessage)message;
    PresenceInfo info=pm.getPresenceInfo(msg.getHostCallID());
    if (info == null) {
      logger.warning(""String_Node_Str"" + msg.getHostCallID());
      return;
    }
    attachOrb(info.cellID,true);
    return;
  }
}"
46148,"public OrbMessageHandler(OrbCell orbCell,WonderlandSession session){
  this.orbCell=orbCell;
  this.session=session;
synchronized (detachedOrbList) {
    detachedOrbList.add(orbCell);
  }
  avatarCell=((CellClientSession)session).getLocalAvatar().getViewCell();
  CellTransform transform=orbCell.getLocalTransform();
  Vector3f translation=orbCell.getLocalTransform().getTranslation(null);
  followMe=new FollowMe(orbCell.getComponent(MovableComponent.class),translation,this);
  channelComp=orbCell.getComponent(ChannelComponent.class);
  logger.finer(""String_Node_Str"" + orbCell.getCellID() + ""String_Node_Str""+ channelComp);
  ChannelComponent.ComponentMessageReceiver msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
    public void messageReceived(    CellMessage message){
      processMessage(message);
    }
  }
;
  channelComp.addMessageReceiver(OrbAttachMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbAttachVirtualPlayerMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbSetBystanderCountMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbChangeNameMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbEndCallMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbMuteCallMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbSetVolumeMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbSpeakingMessage.class,msgReceiver);
  pm=PresenceManagerFactory.getPresenceManager(session);
  username=orbCell.getUsername();
  if (username == null) {
    username=""String_Node_Str"";
  }
  String playerWithVpCallID=orbCell.getPlayerWithVpCallID();
  WonderlandIdentity userID=new WonderlandIdentity(username,username,null);
  presenceInfo=new PresenceInfo(orbCell.getCellID(),null,userID,orbCell.getCallID());
  if (playerWithVpCallID == null || playerWithVpCallID.equals(orbCell.getCallID())) {
    pm.addPresenceInfo(presenceInfo);
  }
  NameTagComponent comp=new NameTagComponent(orbCell,username,(float).17);
  orbCell.addComponent(comp);
  nameTag=comp.getNameTagNode();
  if (orbCell.getPlayerWithVpCallID() != null) {
    PresenceInfo info=pm.getPresenceInfo(orbCell.getPlayerWithVpCallID());
    if (info == null) {
      logger.warning(""String_Node_Str"" + orbCell.getPlayerWithVpCallID());
      return;
    }
    logger.info(""String_Node_Str"" + orbCell.getCellID() + ""String_Node_Str""+ orbCell.getPlayerWithVpCallID()+ ""String_Node_Str""+ info);
    channelComp.send(new OrbAttachMessage(orbCell.getCellID(),info.cellID,true));
  }
 else {
    channelComp.send(new OrbAttachMessage(orbCell.getCellID(),null,true));
  }
}","public OrbMessageHandler(OrbCell orbCell,WonderlandSession session){
  this.orbCell=orbCell;
  this.session=session;
synchronized (detachedOrbList) {
    detachedOrbList.add(orbCell);
  }
  avatarCell=((CellClientSession)session).getLocalAvatar().getViewCell();
  CellTransform transform=orbCell.getLocalTransform();
  Vector3f translation=orbCell.getLocalTransform().getTranslation(null);
  followMe=new FollowMe(orbCell.getComponent(MovableComponent.class),translation,this);
  channelComp=orbCell.getComponent(ChannelComponent.class);
  logger.finer(""String_Node_Str"" + orbCell.getCellID() + ""String_Node_Str""+ channelComp);
  ChannelComponent.ComponentMessageReceiver msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
    public void messageReceived(    CellMessage message){
      processMessage(message);
    }
  }
;
  channelComp.addMessageReceiver(OrbAttachMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbAttachVirtualPlayerMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbSetBystanderCountMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbChangeNameMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbEndCallMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbMuteCallMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbSetVolumeMessage.class,msgReceiver);
  channelComp.addMessageReceiver(OrbSpeakingMessage.class,msgReceiver);
  pm=PresenceManagerFactory.getPresenceManager(session);
  username=orbCell.getUsername();
  if (username == null) {
    username=""String_Node_Str"";
  }
  usernameAlias=username;
  String playerWithVpCallID=orbCell.getPlayerWithVpCallID();
  WonderlandIdentity userID=new WonderlandIdentity(username,username,null);
  presenceInfo=new PresenceInfo(orbCell.getCellID(),null,userID,orbCell.getCallID());
  presenceInfo.usernameAlias=usernameAlias;
  if (playerWithVpCallID == null || playerWithVpCallID.equals(orbCell.getCallID())) {
    pm.addPresenceInfo(presenceInfo);
    presenceInfoAdded=true;
  }
  NameTagComponent comp=new NameTagComponent(orbCell,username,(float).17);
  orbCell.addComponent(comp);
  nameTag=comp.getNameTagNode();
  if (orbCell.getPlayerWithVpCallID() != null) {
    PresenceInfo info=pm.getPresenceInfo(playerWithVpCallID);
    if (info == null) {
      logger.warning(""String_Node_Str"" + playerWithVpCallID);
      return;
    }
    logger.info(""String_Node_Str"" + orbCell.getCellID() + ""String_Node_Str""+ playerWithVpCallID+ ""String_Node_Str""+ info);
    channelComp.send(new OrbAttachMessage(orbCell.getCellID(),info.cellID,true));
  }
 else {
    logger.fine(""String_Node_Str"" + orbCell.getCellID());
    channelComp.send(new OrbAttachMessage(orbCell.getCellID(),null,true));
  }
}"
46149,"private void attachOrb(CellID hostCellID,boolean isAttached){
  Cell newHostCell=ClientContext.getCellCache(session).getCell(hostCellID);
  if (newHostCell == null) {
    logger.warning(""String_Node_Str"" + hostCellID);
    return;
  }
  if (logger.isLoggable(Level.FINE)) {
    String s=""String_Node_Str"";
    if (hostCell != null) {
      s=hostCell.getCellID().toString();
    }
    logger.fine(""String_Node_Str"" + isAttached + ""String_Node_Str""+ avatarCell.getCellID()+ ""String_Node_Str""+ newHostCell.getCellID()+ ""String_Node_Str""+ s);
  }
  if (isAttached) {
    if (hostCell != null) {
      detachOrb(false);
    }
synchronized (detachedOrbList) {
      detachedOrbList.remove(orbCell);
    }
    ArrayList<OrbCell> attachedOrbList=attachedOrbMap.get(newHostCell);
    if (attachedOrbList == null) {
      attachedOrbList=new ArrayList();
      attachedOrbMap.put(newHostCell,attachedOrbList);
    }
synchronized (attachedOrbList) {
      attachedOrbList.remove(orbCell);
      attachedOrbList.add(orbCell);
    }
    hostCell=newHostCell;
    newHostCell.addTransformChangeListener(this);
    transformChanged(newHostCell,true);
  }
 else {
    detachOrb(true);
  }
  return;
}","private void attachOrb(CellID hostCellID,boolean attach){
  Cell newHostCell=ClientContext.getCellCache(session).getCell(hostCellID);
  if (newHostCell == null) {
    logger.warning(""String_Node_Str"" + hostCellID);
    return;
  }
  if (logger.isLoggable(Level.FINE)) {
    String s=""String_Node_Str"";
    if (hostCell != null) {
      s=hostCell.getCellID().toString();
    }
    logger.fine(""String_Node_Str"" + attach + ""String_Node_Str""+ avatarCell.getCellID()+ ""String_Node_Str""+ newHostCell.getCellID()+ ""String_Node_Str""+ s);
  }
  if (attach) {
    if (hostCell != null) {
      logger.fine(""String_Node_Str"" + orbCell.getCellID() + ""String_Node_Str""+ hostCell.getCellID());
      detachOrb(false);
    }
synchronized (detachedOrbList) {
      detachedOrbList.remove(orbCell);
    }
    ArrayList<OrbCell> attachedOrbList=attachedOrbMap.get(newHostCell);
    if (attachedOrbList == null) {
      attachedOrbList=new ArrayList();
      attachedOrbMap.put(newHostCell,attachedOrbList);
    }
synchronized (attachedOrbList) {
      attachedOrbList.remove(orbCell);
      attachedOrbList.add(orbCell);
    }
    hostCell=newHostCell;
    newHostCell.addTransformChangeListener(this);
    positionAttachedOrbs(newHostCell);
  }
 else {
    detachOrb(true);
  }
  return;
}"
46150,"public void done(){
  if (done) {
    return;
  }
  done=true;
synchronized (detachedOrbList) {
    detachedOrbList.remove(orbCell);
    reorderDetachedOrbs();
    if (hostCell != null) {
      ArrayList<OrbCell> attachedOrbList=attachedOrbMap.get(hostCell);
      if (attachedOrbList != null) {
        attachedOrbList.remove(orbCell);
      }
    }
    reorderAttachedOrbs();
  }
  followMe.done();
  channelComp.removeMessageReceiver(OrbAttachMessage.class);
  channelComp.removeMessageReceiver(OrbAttachVirtualPlayerMessage.class);
  channelComp.removeMessageReceiver(OrbSetBystanderCountMessage.class);
  channelComp.removeMessageReceiver(OrbChangeNameMessage.class);
  channelComp.removeMessageReceiver(OrbEndCallMessage.class);
  channelComp.removeMessageReceiver(OrbMuteCallMessage.class);
  channelComp.removeMessageReceiver(OrbSetVolumeMessage.class);
  channelComp.removeMessageReceiver(OrbSpeakingMessage.class);
  orbRootNode.detachChild(nameTag);
  nameTag.done();
  String playerWithVpCallID=orbCell.getPlayerWithVpCallID();
  if (playerWithVpCallID == null || playerWithVpCallID.equals(orbCell.getCallID())) {
    pm.removePresenceInfo(presenceInfo);
  }
}","public void done(){
  if (done) {
    return;
  }
  done=true;
synchronized (detachedOrbList) {
    detachedOrbList.remove(orbCell);
    reorderDetachedOrbs();
    if (hostCell != null) {
      ArrayList<OrbCell> attachedOrbList=attachedOrbMap.get(hostCell);
      if (attachedOrbList != null) {
        attachedOrbList.remove(orbCell);
      }
      if (attachedOrbList.size() > 0) {
        positionAttachedOrbs(hostCell);
      }
 else {
        attachedOrbMap.remove(hostCell);
      }
    }
  }
  followMe.done();
  channelComp.removeMessageReceiver(OrbAttachMessage.class);
  channelComp.removeMessageReceiver(OrbAttachVirtualPlayerMessage.class);
  channelComp.removeMessageReceiver(OrbSetBystanderCountMessage.class);
  channelComp.removeMessageReceiver(OrbChangeNameMessage.class);
  channelComp.removeMessageReceiver(OrbEndCallMessage.class);
  channelComp.removeMessageReceiver(OrbMuteCallMessage.class);
  channelComp.removeMessageReceiver(OrbSetVolumeMessage.class);
  channelComp.removeMessageReceiver(OrbSpeakingMessage.class);
  orbRootNode.detachChild(nameTag);
  nameTag.done();
  String playerWithVpCallID=orbCell.getPlayerWithVpCallID();
  if (presenceInfoAdded) {
    pm.removePresenceInfo(presenceInfo);
  }
}"
46151,"private void transformChanged(Cell cell,boolean isAttached){
  logger.finest(""String_Node_Str"" + cell.getName() + ""String_Node_Str""+ cell.getLocalTransform());
  CellTransform transform=cell.getLocalTransform();
  Vector3f translation=transform.getTranslation(null);
  if (isAttached) {
    float orbHeight=getOrbHeight();
    translation.setY(orbHeight);
    followMe.setTargetPosition(translation);
  }
 else {
    translation.setZ(translation.getZ() + (float).2);
    translation.setY((float).5);
    followMe.setTargetPosition(translation,transform.getRotation(null));
  }
}","public void transformChanged(Cell cell,ChangeSource source){
  logger.finest(""String_Node_Str"" + cell.getName() + ""String_Node_Str""+ cell.getLocalTransform());
  positionAttachedOrbs(cell);
}"
46152,"private void reorderDetachedOrbs(){
synchronized (detachedOrbList) {
    for (int i=0; i < detachedOrbList.size(); i++) {
      transformChanged(detachedOrbList.get(i),true);
    }
  }
}","private void reorderDetachedOrbs(){
synchronized (detachedOrbList) {
  }
}"
46153,"public void endCall(){
  orbMessageHandlerRef.get().done();
}","public void endCall(){
  if (orbMessageHandlerRef != null) {
    orbMessageHandlerRef.get().done();
  }
}"
46154,"public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  logger.finest(""String_Node_Str"" + message);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Call call=null;
  Player player=null;
  if (simulateCalls == false) {
    call=vm.getCall(callID);
    if (call == null) {
      logger.warning(""String_Node_Str"" + callID + ""String_Node_Str""+ message);
      return;
    }
    player=vm.getPlayer(callID);
  }
  if (message instanceof OrbEndCallMessage) {
    if (call != null) {
      try {
        vm.endCall(call,true);
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + call + ""String_Node_Str""+ e.getMessage());
      }
    }
 else {
      orbStatusListenerRef.get().endCall(callID);
    }
    return;
  }
  if (message instanceof OrbMuteCallMessage) {
    if (call != null) {
      try {
        call.mute(((OrbMuteCallMessage)message).isMuted());
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + call + ""String_Node_Str""+ e.getMessage());
        return;
      }
    }
    sender.send(message);
    return;
  }
  if (message instanceof OrbChangeNameMessage) {
    username=((OrbChangeNameMessage)message).getName();
    sender.send(message);
    return;
  }
  if (message instanceof OrbChangePositionMessage) {
    OrbChangePositionMessage msg=(OrbChangePositionMessage)message;
    if (player == null) {
      return;
    }
    Vector3f position=msg.getPosition();
    player.moved(position.getX(),position.getY(),position.getZ(),player.getOrientation());
    return;
  }
  if (message instanceof OrbSetVolumeMessage) {
    if (player == null) {
      logger.warning(""String_Node_Str"" + callID);
      return;
    }
    OrbSetVolumeMessage msg=(OrbSetVolumeMessage)message;
    String softphoneCallID=msg.getSoftphoneCallID();
    Player softphonePlayer=vm.getPlayer(softphoneCallID);
    if (softphonePlayer == null) {
      logger.warning(""String_Node_Str"" + softphoneCallID);
      return;
    }
    DefaultSpatializer spatializer=(DefaultSpatializer)vm.getVoiceManagerParameters().livePlayerSpatializer.clone();
    double volume;
    if (msg.getVolume() <= 5.0) {
      volume=msg.getVolume() / 5.0;
    }
 else {
      volume=(msg.getVolume() - 5) * .8;
    }
    spatializer.setAttenuator(volume);
    if (volume == 1) {
      softphonePlayer.removePrivateSpatializer(player);
    }
 else {
      softphonePlayer.setPrivateSpatializer(player,spatializer);
    }
    return;
  }
  if (message instanceof OrbAttachMessage) {
    OrbAttachMessage msg=(OrbAttachMessage)message;
    boolean isAttached=msg.isAttached();
    if (isAttached && msg.getHostCellID() == null) {
      if (hostCellID == null) {
        return;
      }
      sender.send(clientID,new OrbAttachMessage(msg.getCellID(),hostCellID,true));
      return;
    }
    logger.fine(""String_Node_Str"" + msg.getHostCellID() + ""String_Node_Str""+ msg.isAttached());
    if (msg.isAttached()) {
      hostCellID=msg.getHostCellID();
      orbStatusListenerRef.get().setHostCellID(hostCellID);
    }
 else {
      orbStatusListenerRef.get().removeCallStatusListener(msg.getHostCellID());
      hostCellID=null;
    }
    sender.send(message);
    return;
  }
  logger.warning(""String_Node_Str"" + message);
}","public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  logger.finest(""String_Node_Str"" + message);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Call call=null;
  Player player=null;
  if (simulateCalls == false) {
    call=vm.getCall(callID);
    if (call == null) {
      logger.warning(""String_Node_Str"" + callID + ""String_Node_Str""+ message);
      return;
    }
    player=vm.getPlayer(callID);
  }
  if (message instanceof OrbEndCallMessage) {
    if (call != null) {
      try {
        vm.endCall(call,true);
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + call + ""String_Node_Str""+ e.getMessage());
      }
    }
 else {
      orbStatusListenerRef.get().endCall(callID);
    }
    sender.send(message);
    return;
  }
  if (message instanceof OrbMuteCallMessage) {
    if (call != null) {
      try {
        call.mute(((OrbMuteCallMessage)message).isMuted());
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + call + ""String_Node_Str""+ e.getMessage());
        return;
      }
    }
    sender.send(message);
    return;
  }
  if (message instanceof OrbChangeNameMessage) {
    username=((OrbChangeNameMessage)message).getName();
    sender.send(message);
    return;
  }
  if (message instanceof OrbChangePositionMessage) {
    OrbChangePositionMessage msg=(OrbChangePositionMessage)message;
    if (player == null) {
      return;
    }
    Vector3f position=msg.getPosition();
    player.moved(position.getX(),position.getY(),position.getZ(),player.getOrientation());
    return;
  }
  if (message instanceof OrbSetVolumeMessage) {
    if (player == null) {
      logger.warning(""String_Node_Str"" + callID);
      return;
    }
    OrbSetVolumeMessage msg=(OrbSetVolumeMessage)message;
    String softphoneCallID=msg.getSoftphoneCallID();
    Player softphonePlayer=vm.getPlayer(softphoneCallID);
    if (softphonePlayer == null) {
      logger.warning(""String_Node_Str"" + softphoneCallID);
      return;
    }
    DefaultSpatializer spatializer=(DefaultSpatializer)vm.getVoiceManagerParameters().livePlayerSpatializer.clone();
    double volume;
    if (msg.getVolume() <= 5.0) {
      volume=msg.getVolume() / 5.0;
    }
 else {
      volume=(msg.getVolume() - 5) * .8;
    }
    spatializer.setAttenuator(volume);
    if (volume == 1) {
      softphonePlayer.removePrivateSpatializer(player);
    }
 else {
      softphonePlayer.setPrivateSpatializer(player,spatializer);
    }
    return;
  }
  if (message instanceof OrbAttachMessage) {
    OrbAttachMessage msg=(OrbAttachMessage)message;
    boolean isAttached=msg.isAttached();
    if (isAttached && msg.getHostCellID() == null) {
      if (hostCellID == null) {
        return;
      }
      sender.send(clientID,new OrbAttachMessage(msg.getCellID(),hostCellID,true));
      return;
    }
    logger.fine(""String_Node_Str"" + msg.getHostCellID() + ""String_Node_Str""+ msg.isAttached());
    if (msg.isAttached()) {
      hostCellID=msg.getHostCellID();
      orbStatusListenerRef.get().setHostCellID(hostCellID);
    }
 else {
      orbStatusListenerRef.get().removeCallStatusListener(msg.getHostCellID());
      hostCellID=null;
    }
    sender.send(message);
    return;
  }
  logger.warning(""String_Node_Str"" + message);
}"
46155,"private Vector3f calcOffsetTranslation(){
  Vector3f translation=new Vector3f();
  if (parent == null)   return translation;
  if (ortho) {
    if (type == Type.PRIMARY || type == Type.UNKNOWN) {
      translation.x=locationOrtho.x;
      translation.y=locationOrtho.y;
    }
 else {
      translation.x=offset.x;
      translation.y=offset.y;
      Dimension parentSize=parent.getSizeApp();
      translation.x+=-parentSize.width / 2f;
      translation.y+=parentSize.height / 2f;
      translation.x+=sizeApp.width / 2f;
      translation.y-=sizeApp.height / 2f;
      translation.x+=offset.x;
      translation.y-=offset.y;
    }
    logger.fine(""String_Node_Str"" + this);
    logger.fine(""String_Node_Str"" + translation);
  }
 else {
    translation.x=offset.x;
    translation.y=offset.y;
    Vector2f pixelScale=getPixelScaleCurrent();
    Dimension parentSize=parent.getSizeApp();
    translation.x+=-parentSize.width * pixelScale.x / 2f;
    translation.y+=parentSize.height * pixelScale.y / 2f;
    translation.x+=sizeApp.width * pixelScale.x / 2f;
    translation.y-=sizeApp.height * pixelScale.y / 2f;
    translation.x+=pixelOffset.x * pixelScale.x;
    translation.y-=pixelOffset.y * pixelScale.y;
  }
  return translation;
}","private Vector3f calcOffsetTranslation(){
  Vector3f translation=new Vector3f();
  if (parent == null)   return translation;
  logger.fine(""String_Node_Str"" + this);
  if (ortho) {
    if (type == Type.PRIMARY || type == Type.UNKNOWN) {
      translation.x=locationOrtho.x;
      translation.y=locationOrtho.y;
    }
 else {
      translation.x=locationOrtho.x + offset.x;
      translation.y=locationOrtho.y + offset.y;
      Dimension parentSize=parent.getSizeApp();
      translation.x+=-parentSize.width / 2f;
      translation.y+=parentSize.height / 2f;
      translation.x+=sizeApp.width / 2f;
      translation.y-=sizeApp.height / 2f;
      translation.x+=pixelOffset.x;
      translation.y-=pixelOffset.y;
    }
  }
 else {
    translation.x=offset.x;
    translation.y=offset.y;
    Vector2f pixelScale=getPixelScaleCurrent();
    Dimension parentSize=parent.getSizeApp();
    translation.x+=-parentSize.width * pixelScale.x / 2f;
    translation.y+=parentSize.height * pixelScale.y / 2f;
    translation.x+=sizeApp.width * pixelScale.x / 2f;
    translation.y-=sizeApp.height * pixelScale.y / 2f;
    translation.x+=pixelOffset.x * pixelScale.x;
    translation.y-=pixelOffset.y * pixelScale.y;
  }
  logger.fine(""String_Node_Str"" + translation);
  return translation;
}"
46156,"/** 
 * Processes attribute changes. Should be called within a synchronized block. 
 */
protected void processChanges(){
  boolean windowNeedsValidate=false;
  logger.fine(""String_Node_Str"" + this);
  logger.fine(""String_Node_Str"" + type);
  logger.fine(""String_Node_Str"" + Integer.toHexString(changeMask));
  if ((changeMask & (CHANGED_GEOMETRY | CHANGED_SIZE_APP | CHANGED_TYPE| CHANGED_PARENT| CHANGED_VISIBLE| CHANGED_ORTHO)) != 0) {
    logger.fine(""String_Node_Str"" + this);
switch (attachState) {
case ATTACHED_TO_ENTITY:
      if (parentEntity != null) {
        logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
        RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
        sgChangeAttachPointSet(rc,null);
        parentEntity.removeEntity(entity);
        parentEntity=null;
      }
    break;
case ATTACHED_TO_WORLD:
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().removeEntity(entity);
break;
}
attachState=AttachState.DETACHED;
if ((changeMask & CHANGED_GEOMETRY) != 0) {
if (geometryNode != null) {
sgChangeGeometryDetachFromView(viewNode,geometryNode);
if (geometrySelfCreated) {
sgChangeGeometryCleanup(geometryNode);
geometrySelfCreated=false;
}
}
if (newGeometryNode != null) {
geometryNode=newGeometryNode;
newGeometryNode=null;
}
 else {
geometryNode=new GeometryNodeQuad(this);
geometrySelfCreated=true;
}
sgChangeGeometryAttachToView(viewNode,geometryNode);
}
if ((changeMask & (CHANGED_GEOMETRY | CHANGED_SIZE_APP)) != 0) {
logger.fine(""String_Node_Str"" + this);
if (geometryNode != null) {
DrawingSurfaceBufferedImage surface=(DrawingSurfaceBufferedImage)getWindow().getSurface();
if (surface != null) {
sgChangeGeometryTextureSet(geometryNode,getWindow().getTexture(),surface);
windowNeedsValidate=true;
}
}
}
if (isActuallyVisible()) {
if (ortho) {
logger.fine(""String_Node_Str"" + this);
entity.getComponent(RenderComponent.class).setOrtho(true);
if (type == Type.PRIMARY || type == Type.UNKNOWN) {
ClientContextJME.getWorldManager().addEntity(entity);
attachState=AttachState.ATTACHED_TO_WORLD;
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
}
 else {
parentEntity=getParentEntity();
if (parentEntity == null) {
  ClientContextJME.getWorldManager().addEntity(entity);
  attachState=AttachState.ATTACHED_TO_WORLD;
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
}
 else {
  parentEntity.addEntity(entity);
  RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
  RenderComponent rcParent=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
  sgChangeAttachPointSet(rc,rcParent.getSceneRoot());
  attachState=AttachState.ATTACHED_TO_ENTITY;
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
}
}
}
 else {
logger.fine(""String_Node_Str"" + this);
parentEntity=getParentEntity();
if (parentEntity == null) {
logger.warning(""String_Node_Str"");
}
 else {
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
parentEntity.addEntity(entity);
RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
RenderComponent rcParent=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
Node attachNode=rcParent.getSceneRoot();
if (window instanceof WindowSwingHeader) {
  WindowSwingHeader wsh=(WindowSwingHeader)window;
  if (wsh.getView().getType() == View2D.Type.SECONDARY) {
    attachNode=(Node)attachNode.getChild(0);
  }
}
sgChangeAttachPointSet(rc,attachNode);
attachState=AttachState.ATTACHED_TO_ENTITY;
entity.getComponent(RenderComponent.class).setOrtho(false);
}
}
}
if ((changeMask & CHANGED_VISIBLE) != 0) {
logger.fine(""String_Node_Str"" + this);
for (View2DEntity child : children) {
child.updateVisibility();
}
}
}
if ((changeMask & (CHANGED_DECORATED | CHANGED_TITLE | CHANGED_ORTHO| CHANGED_TYPE| CHANGED_PIXEL_SCALE)) != 0) {
logger.fine(""String_Node_Str"" + this);
logger.fine(""String_Node_Str"" + decorated);
if ((changeMask & (CHANGED_DECORATED | CHANGED_ORTHO)) != 0) {
if (decorated && !ortho) {
if (!hasFrame()) {
logger.fine(""String_Node_Str"");
attachFrame();
}
}
 else {
if (hasFrame()) {
logger.fine(""String_Node_Str"");
detachFrame();
}
}
}
if ((changeMask & CHANGED_TITLE) != 0) {
if (decorated && !ortho && hasFrame()) {
frameUpdateTitle();
}
}
if ((changeMask & (CHANGED_TYPE | CHANGED_ORTHO)) != 0) {
if (decorated && !ortho) {
reattachFrame();
}
}
}
if ((changeMask & (CHANGED_STACK | CHANGED_ORTHO)) != 0) {
logger.fine(""String_Node_Str"" + this);
if (ortho) {
int zOrder=window.getZOrder();
logger.fine(""String_Node_Str"" + zOrder);
if (zOrder >= 0) {
sgChangeGeometryOrthoZOrderSet(geometryNode,zOrder);
}
}
}
if ((changeMask & CHANGED_ORTHO) != 0) {
if (isActuallyVisible()) {
entity.getComponent(RenderComponent.class).setOrtho(ortho);
}
sgChangeViewNodeOrthoSet(viewNode,ortho);
}
if ((changeMask & (CHANGED_DECORATED | CHANGED_SIZE_APP | CHANGED_PIXEL_SCALE| CHANGED_ORTHO)) != 0) {
float width=getDisplayerLocalWidth();
float height=getDisplayerLocalHeight();
sgChangeGeometrySizeSet(geometryNode,width,height);
changeMask|=CHANGED_TEX_COORDS;
}
if ((changeMask & (CHANGED_TEX_COORDS | CHANGED_GEOMETRY | CHANGED_SIZE_APP)) != 0) {
float width=(float)sizeApp.width;
float height=(float)sizeApp.height;
Image image=getWindow().getTexture().getImage();
float widthRatio=width / image.getWidth();
float heightRatio=height / image.getHeight();
sgChangeGeometryTexCoordsSet(geometryNode,widthRatio,heightRatio);
windowNeedsValidate=true;
}
if ((changeMask & (CHANGED_TYPE | CHANGED_PARENT | CHANGED_PIXEL_SCALE| CHANGED_SIZE_APP| CHANGED_OFFSET| CHANGED_ORTHO| CHANGED_LOCATION_ORTHO| CHANGED_STACK)) != 0) {
CellTransform transform=null;
switch (type) {
case UNKNOWN:
case PRIMARY:
transform=new CellTransform(null,null,null);
if (ortho) {
Vector3f orthoLocTranslation=new Vector3f();
orthoLocTranslation.x=locationOrtho.x;
orthoLocTranslation.y=locationOrtho.y;
transform.setTranslation(orthoLocTranslation);
}
 else {
}
break;
case SECONDARY:
case POPUP:
transform=calcOffsetStackTransform();
}
sgChangeGeometryTransformOffsetStackSet(geometryNode,transform);
}
if ((changeMask & (CHANGED_TYPE | CHANGED_USER_TRANSFORM | CHANGED_ORTHO)) != 0) {
CellTransform currentUserTransform;
if (ortho) {
currentUserTransform=userTransformOrtho;
}
 else {
currentUserTransform=userTransformCell;
}
logger.fine(""String_Node_Str"" + currentUserTransform);
userTransformApplyDeltas(currentUserTransform);
logger.fine(""String_Node_Str"" + currentUserTransform);
switch (type) {
case UNKNOWN:
case PRIMARY:
updatePrimaryTransform(currentUserTransform);
break;
case SECONDARY:
sgChangeTransformUserSet(viewNode,currentUserTransform);
break;
case POPUP:
sgChangeTransformUserSet(viewNode,new CellTransform(null,null,null));
}
}
sgProcessChanges();
if (!ortho) {
frameUpdate();
}
if (windowNeedsValidate) {
if (window instanceof WindowSwing) {
((WindowSwing)window).validate();
}
}
if (window != null) {
DrawingSurface surface=window.getSurface();
if (surface != null) {
surface.setViewIsVisible(this,isActuallyVisible());
}
}
logger.fine(""String_Node_Str"" + this);
for (View2DEntity child : children) {
if (child.changeMask != 0) {
child.update();
}
}
}","/** 
 * Processes attribute changes. Should be called within a synchronized block. 
 */
protected void processChanges(){
  boolean windowNeedsValidate=false;
  logger.fine(""String_Node_Str"" + this);
  logger.fine(""String_Node_Str"" + type);
  logger.fine(""String_Node_Str"" + Integer.toHexString(changeMask));
  if ((changeMask & (CHANGED_GEOMETRY | CHANGED_SIZE_APP | CHANGED_TYPE| CHANGED_PARENT| CHANGED_VISIBLE| CHANGED_ORTHO)) != 0) {
    logger.fine(""String_Node_Str"" + this);
switch (attachState) {
case ATTACHED_TO_ENTITY:
      if (parentEntity != null) {
        logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
        RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
        sgChangeAttachPointSet(rc,null);
        parentEntity.removeEntity(entity);
        parentEntity=null;
      }
    break;
case ATTACHED_TO_WORLD:
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().removeEntity(entity);
break;
}
attachState=AttachState.DETACHED;
if ((changeMask & CHANGED_GEOMETRY) != 0) {
if (geometryNode != null) {
sgChangeGeometryDetachFromView(viewNode,geometryNode);
if (geometrySelfCreated) {
sgChangeGeometryCleanup(geometryNode);
geometrySelfCreated=false;
}
}
if (newGeometryNode != null) {
geometryNode=newGeometryNode;
newGeometryNode=null;
}
 else {
geometryNode=new GeometryNodeQuad(this);
geometrySelfCreated=true;
}
sgChangeGeometryAttachToView(viewNode,geometryNode);
}
if ((changeMask & (CHANGED_GEOMETRY | CHANGED_SIZE_APP)) != 0) {
logger.fine(""String_Node_Str"" + this);
if (geometryNode != null) {
DrawingSurfaceBufferedImage surface=(DrawingSurfaceBufferedImage)getWindow().getSurface();
if (surface != null) {
sgChangeGeometryTextureSet(geometryNode,getWindow().getTexture(),surface);
windowNeedsValidate=true;
}
}
}
if (isActuallyVisible()) {
if (ortho) {
logger.fine(""String_Node_Str"" + this);
entity.getComponent(RenderComponent.class).setOrtho(true);
if (type == Type.PRIMARY || type == Type.UNKNOWN) {
ClientContextJME.getWorldManager().addEntity(entity);
attachState=AttachState.ATTACHED_TO_WORLD;
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
}
 else {
parentEntity=getParentEntity();
if (parentEntity == null) {
  ClientContextJME.getWorldManager().addEntity(entity);
  attachState=AttachState.ATTACHED_TO_WORLD;
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
}
 else {
  parentEntity.addEntity(entity);
  RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
  RenderComponent rcParent=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
  Node attachNode=rcParent.getSceneRoot();
  attachNode=(Node)attachNode.getChild(0);
  sgChangeAttachPointSet(rc,attachNode);
  attachState=AttachState.ATTACHED_TO_ENTITY;
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
}
}
}
 else {
logger.fine(""String_Node_Str"" + this);
parentEntity=getParentEntity();
if (parentEntity == null) {
logger.warning(""String_Node_Str"");
}
 else {
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
parentEntity.addEntity(entity);
RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
RenderComponent rcParent=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
Node attachNode=rcParent.getSceneRoot();
if (window instanceof WindowSwingHeader) {
  WindowSwingHeader wsh=(WindowSwingHeader)window;
  if (wsh.getView().getType() == View2D.Type.SECONDARY) {
    attachNode=(Node)attachNode.getChild(0);
  }
}
sgChangeAttachPointSet(rc,attachNode);
attachState=AttachState.ATTACHED_TO_ENTITY;
entity.getComponent(RenderComponent.class).setOrtho(false);
}
}
}
if ((changeMask & CHANGED_VISIBLE) != 0) {
logger.fine(""String_Node_Str"" + this);
for (View2DEntity child : children) {
child.updateVisibility();
}
}
}
if ((changeMask & (CHANGED_DECORATED | CHANGED_TITLE | CHANGED_ORTHO| CHANGED_TYPE| CHANGED_PIXEL_SCALE)) != 0) {
logger.fine(""String_Node_Str"" + this);
logger.fine(""String_Node_Str"" + decorated);
if ((changeMask & (CHANGED_DECORATED | CHANGED_ORTHO)) != 0) {
if (decorated && !ortho) {
if (!hasFrame()) {
logger.fine(""String_Node_Str"");
attachFrame();
}
}
 else {
if (hasFrame()) {
logger.fine(""String_Node_Str"");
detachFrame();
}
}
}
if ((changeMask & CHANGED_TITLE) != 0) {
if (decorated && !ortho && hasFrame()) {
frameUpdateTitle();
}
}
if ((changeMask & (CHANGED_TYPE | CHANGED_ORTHO)) != 0) {
if (decorated && !ortho) {
reattachFrame();
}
}
}
if ((changeMask & (CHANGED_STACK | CHANGED_ORTHO)) != 0) {
logger.fine(""String_Node_Str"" + this);
if (ortho) {
if (window != null) {
int zOrder=window.getZOrder();
logger.fine(""String_Node_Str"" + zOrder);
if (zOrder >= 0) {
sgChangeGeometryOrthoZOrderSet(geometryNode,zOrder);
}
}
}
}
if ((changeMask & CHANGED_ORTHO) != 0) {
if (isActuallyVisible()) {
entity.getComponent(RenderComponent.class).setOrtho(ortho);
}
sgChangeViewNodeOrthoSet(viewNode,ortho);
}
if ((changeMask & (CHANGED_DECORATED | CHANGED_SIZE_APP | CHANGED_PIXEL_SCALE| CHANGED_ORTHO)) != 0) {
float width=getDisplayerLocalWidth();
float height=getDisplayerLocalHeight();
sgChangeGeometrySizeSet(geometryNode,width,height);
changeMask|=CHANGED_TEX_COORDS;
}
if ((changeMask & (CHANGED_TEX_COORDS | CHANGED_GEOMETRY | CHANGED_SIZE_APP)) != 0) {
float width=(float)sizeApp.width;
float height=(float)sizeApp.height;
Image image=getWindow().getTexture().getImage();
float widthRatio=width / image.getWidth();
float heightRatio=height / image.getHeight();
sgChangeGeometryTexCoordsSet(geometryNode,widthRatio,heightRatio);
windowNeedsValidate=true;
}
if ((changeMask & (CHANGED_TYPE | CHANGED_PARENT | CHANGED_PIXEL_SCALE| CHANGED_SIZE_APP| CHANGED_OFFSET| CHANGED_ORTHO| CHANGED_LOCATION_ORTHO| CHANGED_STACK)) != 0) {
CellTransform transform=null;
switch (type) {
case UNKNOWN:
case PRIMARY:
transform=new CellTransform(null,null,null);
if (ortho) {
Vector3f orthoLocTranslation=new Vector3f();
orthoLocTranslation.x=locationOrtho.x;
orthoLocTranslation.y=locationOrtho.y;
transform.setTranslation(orthoLocTranslation);
}
 else {
}
break;
case SECONDARY:
case POPUP:
transform=calcOffsetStackTransform();
}
sgChangeGeometryTransformOffsetStackSet(geometryNode,transform);
}
if ((changeMask & (CHANGED_TYPE | CHANGED_USER_TRANSFORM | CHANGED_ORTHO)) != 0) {
CellTransform currentUserTransform;
if (ortho) {
currentUserTransform=userTransformOrtho;
}
 else {
currentUserTransform=userTransformCell;
}
logger.fine(""String_Node_Str"" + currentUserTransform);
userTransformApplyDeltas(currentUserTransform);
logger.fine(""String_Node_Str"" + currentUserTransform);
switch (type) {
case UNKNOWN:
case PRIMARY:
updatePrimaryTransform(currentUserTransform);
break;
case SECONDARY:
sgChangeTransformUserSet(viewNode,currentUserTransform);
break;
case POPUP:
sgChangeTransformUserSet(viewNode,new CellTransform(null,null,null));
}
}
sgProcessChanges();
if (!ortho) {
frameUpdate();
}
if (windowNeedsValidate) {
if (window instanceof WindowSwing) {
((WindowSwing)window).validate();
}
}
if (window != null) {
DrawingSurface surface=window.getSurface();
if (surface != null) {
surface.setViewIsVisible(this,isActuallyVisible());
}
}
logger.fine(""String_Node_Str"" + this);
for (View2DEntity child : children) {
if (child.changeMask != 0) {
child.update();
}
}
}"
46157,"/** 
 * Picker for mouse events for the Embedded Swing case. To be called by Embedded Swing toolkit createCoordinateHandler. Returns non-null if window is a WindowSwing. If it is a WindowSwing then return the appropriate hit entity and the corresponding pick info.
 * @param awtEvent The event whose entity and pickInfo need to be picked.
 * @return An object of class PickEventReturn, which contains the returnvalues entity and pickDetails.
 */
public InputManager.PickEventReturn pickMouseEventSwing(MouseEvent awtMouseEvent){
  boolean inSwingRegion=false;
  logger.fine(""String_Node_Str"" + awtMouseEvent);
  PickInfo hitPickInfo;
  DetermineDestPickInfoReturn ret=determineDestPickInfo(awtMouseEvent);
  if (ret == null) {
    destPickInfo=null;
    hitPickInfo=null;
  }
 else {
    destPickInfo=ret.destPickInfo;
    hitPickInfo=ret.hitPickInfo;
  }
  logger.fine(""String_Node_Str"" + destPickInfo);
  logger.fine(""String_Node_Str"" + hitPickInfo);
  int eventID=awtMouseEvent.getID();
  if (eventID == MouseEvent.MOUSE_MOVED || eventID == MouseEvent.MOUSE_DRAGGED || eventID == MouseEvent.MOUSE_ENTERED || eventID == MouseEvent.MOUSE_EXITED) {
    generateEnterExitEvents(awtMouseEvent,destPickInfo);
  }
  if (destPickInfo == null || destPickInfo.size() <= 0) {
    logger.finest(""String_Node_Str"");
    logger.finest(""String_Node_Str"");
    logger.finest(""String_Node_Str"" + awtMouseEvent);
    swingPickInfos.add(new PickInfoQueueEntry(null,awtMouseEvent));
    generateSwingEnterExitEvents(null);
    return null;
  }
  MouseEvent3D event=(MouseEvent3D)createWonderlandEvent(awtMouseEvent);
  boolean propagatesToUnder=true;
  PickDetails pickDetails=destPickInfo.get(0);
  logger.fine(""String_Node_Str"" + pickDetails);
  int idx=0;
  while (pickDetails != null && idx < destPickInfo.size() && propagatesToUnder) {
    Entity entity=pickDetails.getEntity();
    logger.fine(""String_Node_Str"" + entity);
    if (entity == null) {
      idx++;
      if (idx < destPickInfo.size()) {
        pickDetails=destPickInfo.get(idx);
      }
 else {
        pickDetails=null;
      }
      continue;
    }
    boolean consumesEvent=false;
    propagatesToUnder=false;
    EventListenerCollection listeners=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
    if (listeners == null) {
      consumesEvent=false;
      propagatesToUnder=false;
    }
 else {
      event.setPickDetails(pickDetails);
      if (eventID == MouseEvent.MOUSE_DRAGGED && hitPickInfo != null) {
        MouseDraggedEvent3D de3d=(MouseDraggedEvent3D)event;
        if (idx < hitPickInfo.size()) {
          de3d.setHitPickDetails(hitPickInfo.get(idx));
        }
      }
      Iterator<EventListener> it=listeners.iterator();
      while (it.hasNext()) {
        EventListener listener=it.next();
        if (listener.isEnabled()) {
          Event distribEvent=EventDistributor.createEventForEntity(event,entity);
          logger.finest(""String_Node_Str"");
          logger.finest(""String_Node_Str"" + listener);
          logger.finest(""String_Node_Str"" + distribEvent);
          consumesEvent|=listener.consumesEvent(distribEvent);
          logger.finest(""String_Node_Str"" + consumesEvent);
        }
      }
    }
    logger.finest(""String_Node_Str"" + isWindowSwingEntity(entity));
    if (consumesEvent && isWindowSwingEntity(entity) && !isChangeControlEvent(awtMouseEvent)) {
      logger.fine(""String_Node_Str"");
      generateSwingEnterExitEvents(entity);
      cleanupGrab(awtMouseEvent);
      if (eventID == MouseEvent.MOUSE_DRAGGED && hitPickInfo != null && idx < hitPickInfo.size()) {
        return new InputManager.PickEventReturn(entity,pickDetails,hitPickInfo.get(idx));
      }
 else {
        return new InputManager.PickEventReturn(entity,pickDetails,null);
      }
    }
    if (propagatesToUnder) {
      idx++;
      if (idx < destPickInfo.size()) {
        pickDetails=destPickInfo.get(idx);
      }
 else {
        pickDetails=null;
      }
    }
  }
  logger.finest(""String_Node_Str"");
  logger.finest(""String_Node_Str"" + awtMouseEvent);
  logger.finest(""String_Node_Str"" + hitPickInfo);
  logger.finest(""String_Node_Str"" + destPickInfo);
  swingPickInfos.add(new PickInfoQueueEntry(hitPickInfo,awtMouseEvent));
  generateSwingEnterExitEvents(null);
  return null;
}","/** 
 * Picker for mouse events for the Embedded Swing case. To be called by Embedded Swing toolkit createCoordinateHandler. Returns non-null if window is a WindowSwing. If it is a WindowSwing then return the appropriate hit entity and the corresponding pick info.
 * @param awtEvent The event whose entity and pickInfo need to be picked.
 * @return An object of class PickEventReturn, which contains the returnvalues entity and pickDetails.
 */
public InputManager.PickEventReturn pickMouseEventSwing(MouseEvent awtMouseEvent){
  boolean inSwingRegion=false;
  logger.fine(""String_Node_Str"" + awtMouseEvent);
  PickInfo hitPickInfo;
  DetermineDestPickInfoReturn ret=determineDestPickInfo(awtMouseEvent);
  if (ret == null) {
    destPickInfo=null;
    hitPickInfo=null;
  }
 else {
    destPickInfo=ret.destPickInfo;
    hitPickInfo=ret.hitPickInfo;
  }
  logger.fine(""String_Node_Str"" + destPickInfo);
  logger.fine(""String_Node_Str"" + hitPickInfo);
  int eventID=awtMouseEvent.getID();
  if (eventID == MouseEvent.MOUSE_MOVED || eventID == MouseEvent.MOUSE_DRAGGED || eventID == MouseEvent.MOUSE_ENTERED || eventID == MouseEvent.MOUSE_EXITED) {
    generateEnterExitEvents(awtMouseEvent,destPickInfo);
  }
  if (destPickInfo == null || destPickInfo.size() <= 0) {
    logger.finest(""String_Node_Str"");
    logger.finest(""String_Node_Str"");
    logger.finest(""String_Node_Str"" + awtMouseEvent);
    swingPickInfos.add(new PickInfoQueueEntry(null,awtMouseEvent));
    generateSwingEnterExitEvents(null);
    return null;
  }
  MouseEvent3D event=(MouseEvent3D)createWonderlandEvent(awtMouseEvent);
  boolean propagatesToUnder=true;
  PickDetails pickDetails=destPickInfo.get(0);
  logger.fine(""String_Node_Str"" + pickDetails);
  int idx=0;
  while (pickDetails != null && idx < destPickInfo.size() && propagatesToUnder) {
    Entity entity=pickDetails.getEntity();
    logger.fine(""String_Node_Str"" + entity);
    if (entity == null) {
      idx++;
      if (idx < destPickInfo.size()) {
        pickDetails=destPickInfo.get(idx);
      }
 else {
        pickDetails=null;
      }
      continue;
    }
    boolean consumesEvent=false;
    propagatesToUnder=false;
    EventListenerCollection listeners=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
    if (listeners == null) {
      consumesEvent=false;
      propagatesToUnder=false;
    }
 else {
      event.setPickDetails(pickDetails);
      if (eventID == MouseEvent.MOUSE_DRAGGED && hitPickInfo != null) {
        MouseDraggedEvent3D de3d=(MouseDraggedEvent3D)event;
        if (idx < hitPickInfo.size()) {
          de3d.setHitPickDetails(hitPickInfo.get(idx));
        }
      }
      Iterator<EventListener> it=listeners.iterator();
      while (it.hasNext()) {
        EventListener listener=it.next();
        if (listener.isEnabled()) {
          Event distribEvent=EventDistributor.createEventForEntity(event,entity);
          logger.finest(""String_Node_Str"");
          logger.finest(""String_Node_Str"" + listener);
          logger.finest(""String_Node_Str"" + distribEvent);
          consumesEvent|=listener.consumesEvent(distribEvent);
          logger.finest(""String_Node_Str"" + consumesEvent);
        }
      }
    }
    logger.finest(""String_Node_Str"" + isWindowSwingEntity(entity));
    if (consumesEvent && isWindowSwingEntity(entity)) {
      logger.fine(""String_Node_Str"");
      generateSwingEnterExitEvents(entity);
      cleanupGrab(awtMouseEvent);
      if (eventID == MouseEvent.MOUSE_DRAGGED && hitPickInfo != null && idx < hitPickInfo.size()) {
        return new InputManager.PickEventReturn(entity,pickDetails,hitPickInfo.get(idx));
      }
 else {
        return new InputManager.PickEventReturn(entity,pickDetails,null);
      }
    }
    if (propagatesToUnder) {
      idx++;
      if (idx < destPickInfo.size()) {
        pickDetails=destPickInfo.get(idx);
      }
 else {
        pickDetails=null;
      }
    }
  }
  logger.finest(""String_Node_Str"");
  logger.finest(""String_Node_Str"" + awtMouseEvent);
  logger.finest(""String_Node_Str"" + hitPickInfo);
  logger.finest(""String_Node_Str"" + destPickInfo);
  swingPickInfos.add(new PickInfoQueueEntry(hitPickInfo,awtMouseEvent));
  generateSwingEnterExitEvents(null);
  return null;
}"
46158,"/** 
 * Return the window menu items for this window based on its current state.
 */
public ContextMenuItem[] windowMenuItems(){
switch (type) {
case PRIMARY:
case UNKNOWN:
    return new ContextMenuItem[]{new SimpleContextMenuItem(""String_Node_Str"",new ContextMenuActionListener(){
      public void actionPerformed(      ContextMenuItemEvent event){
        app.getControlArb().releaseControl();
      }
    }
)};
case SECONDARY:
  return new ContextMenuItem[]{};
case POPUP:
default :
return null;
}
}","/** 
 * Return the window menu items for this window based on its current state.
 */
public ContextMenuItem[] windowMenuItems(){
}"
46159,"public void actionPerformed(ContextMenuItemEvent event){
  app.getControlArb().releaseControl();
}","public void actionPerformed(ContextMenuItemEvent event){
  app.getControlArb().takeControl();
}"
46160,"public void mouseExited(MouseEvent e){
}","public void mouseExited(MouseEvent e){
  if (!app.getControlArb().hasControl())   return;
}"
46161,"public void mousePressed(MouseEvent e){
}","public void mousePressed(MouseEvent e){
  if (e.getID() == MouseEvent.MOUSE_PRESSED && e.getButton() == MouseEvent.BUTTON3 && e.getModifiersEx() == MouseEvent.BUTTON3_DOWN_MASK) {
    view.getWindow().displayWindowMenu(view.getEntity(),e);
    return;
  }
  if (!app.getControlArb().hasControl())   return;
}"
46162,"public void mouseReleased(MouseEvent e){
}","public void mouseReleased(MouseEvent e){
  if (!app.getControlArb().hasControl())   return;
}"
46163,"public boolean consumesEvent(Event event){
  return app.getControlArb().hasControl();
}","@Override public boolean consumesEvent(Event event){
  return true;
}"
46164,"/** 
 * {@inheritDoc}
 */
@Override public void cleanup(){
  super.cleanup();
  setVisible(false);
  if (headerWindow != null) {
    headerWindow.cleanup();
    headerWindow=null;
  }
  headerPanel.removeMouseListener(this);
  Entity viewEntity=getEntity();
  if (viewEntity != null) {
    consumingListener.removeFromEntity(viewEntity);
  }
  view=null;
}","/** 
 * {@inheritDoc}
 */
@Override public void cleanup(){
  super.cleanup();
  setVisible(false);
  if (headerWindow != null) {
    headerWindow.cleanup();
    headerWindow=null;
  }
  headerPanel.removeMouseListener(this);
  headerPanel.removeMouseMotionListener(this);
  Entity viewEntity=getEntity();
  if (viewEntity != null) {
    consumingListener.removeFromEntity(viewEntity);
  }
  view=null;
}"
46165,"public void mouseEntered(MouseEvent e){
}","public void mouseEntered(MouseEvent e){
  if (!app.getControlArb().hasControl())   return;
}"
46166,"public void mouseClicked(MouseEvent e){
  if (Gui2D.isChangeControlEvent(e)) {
    ControlArb appControlArb=app.getControlArb();
    if (appControlArb.hasControl()) {
      appControlArb.releaseControl();
    }
 else {
      appControlArb.takeControl();
    }
  }
}","public void mouseClicked(MouseEvent e){
  if (Gui2D.isChangeControlEvent(e)) {
    ControlArb appControlArb=app.getControlArb();
    if (appControlArb.hasControl()) {
      appControlArb.releaseControl();
    }
 else {
      appControlArb.takeControl();
    }
    return;
  }
}"
46167,"/** 
 * Create a new instance of FrameHeaderSwing.
 * @param view The view the frame encloses.
 * @param closeListeners The listeners to be notified when the header's close button is pressed.
 */
public FrameHeaderSwing(View2DCell view,LinkedList<Frame2DCell.CloseListener> closeListeners){
  super(""String_Node_Str"" + view,view,null);
  this.view=view;
  Window2D viewWindow=view.getWindow();
  app=viewWindow.getApp();
  headerWindow=new WindowSwingHeader(app,viewWindow,1,1,view.getPixelScale(),""String_Node_Str"" + view.getName(),view);
  headerWindow.setCoplanar(true);
  headerPanel=new HeaderPanel();
  JmeClientMain.getFrame().getCanvas3DPanel().add(headerPanel);
  headerPanel.setContainer(this);
  headerWindow.setComponent(headerPanel);
  headerPanel.addMouseListener(this);
  View2DDisplayer displayer=view.getDisplayer();
  frameView=(View2DEntity)headerWindow.getView(displayer);
  frameView.disableGUI();
  consumingListener.addToEntity(frameView.getEntity());
}","/** 
 * Create a new instance of FrameHeaderSwing.
 * @param view The view the frame encloses.
 * @param closeListeners The listeners to be notified when the header's close button is pressed.
 */
public FrameHeaderSwing(View2DCell view,LinkedList<Frame2DCell.CloseListener> closeListeners){
  super(""String_Node_Str"" + view,view,null);
  this.view=view;
  Window2D viewWindow=view.getWindow();
  app=viewWindow.getApp();
  headerWindow=new WindowSwingHeader(app,viewWindow,1,1,view.getPixelScale(),""String_Node_Str"" + view.getName(),view);
  headerWindow.setCoplanar(true);
  headerPanel=new HeaderPanel();
  JmeClientMain.getFrame().getCanvas3DPanel().add(headerPanel);
  headerPanel.setContainer(this);
  headerWindow.setComponent(headerPanel);
  headerPanel.addMouseListener(this);
  headerPanel.addMouseMotionListener(this);
  View2DDisplayer displayer=view.getDisplayer();
  frameView=(View2DEntity)headerWindow.getView(displayer);
  frameView.disableGUI();
  consumingListener.addToEntity(frameView.getEntity());
}"
46168,"public void removeMouseListener(MouseListener listener){
  super.removeMouseListener(listener);
  if (jLabel1 != null) {
    jLabel1.removeMouseListener(listener);
  }
  if (jLabel2 != null) {
    jLabel2.removeMouseListener(listener);
  }
  if (jButton1 != null) {
    jButton1.removeMouseListener(listener);
  }
}","@Override public void removeMouseListener(MouseListener listener){
  super.removeMouseListener(listener);
  if (jLabel1 != null) {
    jLabel1.removeMouseListener(listener);
  }
  if (jLabel2 != null) {
    jLabel2.removeMouseListener(listener);
  }
  if (jButton1 != null) {
    jButton1.removeMouseListener(listener);
  }
}"
46169,"public void addMouseListener(MouseListener listener){
  super.addMouseListener(listener);
  if (jLabel1 != null) {
    jLabel1.addMouseListener(listener);
  }
  if (jLabel2 != null) {
    jLabel2.addMouseListener(listener);
  }
  if (jButton1 != null) {
    jButton1.addMouseListener(listener);
  }
}","@Override public void addMouseListener(MouseListener listener){
  super.addMouseListener(listener);
  if (jLabel1 != null) {
    jLabel1.addMouseListener(listener);
  }
  if (jLabel2 != null) {
    jLabel2.addMouseListener(listener);
  }
  if (jButton1 != null) {
    jButton1.addMouseListener(listener);
  }
}"
46170,"/** 
 * Configure (that is, resize, move or restack) a window.
 * @param win The window to configure.
 * @param msg The message arguments which have been read for the ConfigureWindow message.
 */
private void configureWindow(WindowXrw win,ConfigureWindowMsgArgs msg){
  if (msg.clientId == clientId) {
    if (msg.wAndBorder != win.getWidth() || msg.hAndBorder != win.getHeight()) {
    }
 else {
    }
  }
  WindowXrw sibWin=lookupWindow(msg.sibid);
  win.setScreenPosition(msg.x,msg.y);
  win.setSize(msg.wAndBorder,msg.hAndBorder);
  win.restackAbove(sibWin);
}","/** 
 * Configure (that is, resize, move or restack) a window.
 * @param win The window to configure.
 * @param msg The message arguments which have been read for the ConfigureWindow message.
 */
private void configureWindow(WindowXrw win,ConfigureWindowMsgArgs msg){
  if (msg.clientId == clientId) {
    if (msg.wAndBorder != win.getWidth() || msg.hAndBorder != win.getHeight()) {
    }
 else {
    }
  }
  if (msg.wAndBorder > WINDOW_MAX_WIDTH) {
    msg.wAndBorder=WINDOW_MAX_WIDTH;
    AppXrw.logger.warning(""String_Node_Str"" + msg.wAndBorder + ""String_Node_Str"");
  }
  if (msg.hAndBorder > WINDOW_MAX_HEIGHT) {
    msg.hAndBorder=WINDOW_MAX_HEIGHT;
    AppXrw.logger.warning(""String_Node_Str"" + msg.hAndBorder + ""String_Node_Str"");
  }
  WindowXrw sibWin=lookupWindow(msg.sibid);
  win.setScreenPosition(msg.x,msg.y);
  win.setSize(msg.wAndBorder,msg.hAndBorder);
  win.restackAbove(sibWin);
}"
46171,"/** 
 * Actually perform the pick.
 */
private PickInfo pickEventScreenPos(int x,int y){
  if (cameraComp == null)   return null;
  logger.fine(""String_Node_Str"" + x + ""String_Node_Str""+ y);
  Ray pickRayWorld=calcPickRayWorld(x,y);
  return collisionSys.pickAllWorldRay(pickRayWorld,true,false,true,cameraComp);
}","/** 
 * Actually perform the pick.
 */
PickInfo pickEventScreenPos(int x,int y){
  if (cameraComp == null)   return null;
  logger.fine(""String_Node_Str"" + x + ""String_Node_Str""+ y);
  Ray pickRayWorld=calcPickRayWorld(x,y);
  return collisionSys.pickAllWorldRay(pickRayWorld,true,false,true,cameraComp);
}"
46172,"/** 
 * Given a point in the pixel space of the Wonderland canvas calculates the texel coordinates of the point on the geometry where a ray starting from the current eye position intersects the geometry. Note on subclassing: If the geometry is nonplanar it is recommended that the subclass implement this method by performing a pick. If this pick misses the subclass will need to decide how to handle the miss. One possible way to handle this is to assume that there is a planar ""halo"" surrounding the the window with which the ray can be intersected.
 */
public Point calcIntersectionPixelOfEyeRay(int x,int y){
  Ray rayWorld=InputManager3D.getInputManager().pickRayWorld(x,y);
  float width=view.getDisplayerLocalWidth();
  float height=view.getDisplayerLocalHeight();
  Vector3f topLeftLocal=new Vector3f(-width / 2f,height / 2f,0f);
  Matrix4f local2World=getLocalToWorldMatrix(null);
  Vector3f topLeftWorld=local2World.mult(topLeftLocal,new Vector3f());
  Vector3f planeNormalWorld=getPlaneNormalWorld();
  Vector3f intPointWorld=calcPlanarIntersection(rayWorld,topLeftWorld,planeNormalWorld);
  if (intPointWorld == null) {
    return null;
  }
  Point pt=calcPositionInPixelCoordinates(intPointWorld,false);
  logger.fine(""String_Node_Str"" + pt);
  return pt;
}","/** 
 * Given a point in the pixel space of the Wonderland canvas calculates the texel coordinates of the point on the geometry where a ray starting from the current eye position intersects the geometry. Note on subclassing: If the geometry is nonplanar it is recommended that the subclass implement this method by performing a pick. If this pick misses the subclass will need to decide how to handle the miss. One possible way to handle this is to assume that there is a planar ""halo"" surrounding the the window with which the ray can be intersected.
 */
public Point calcIntersectionPixelOfEyeRay(int x,int y){
  Ray rayWorld=InputManager3D.getInputManager().pickRayWorld(x,y);
  float width=view.getDisplayerLocalWidth();
  float height=view.getDisplayerLocalHeight();
  Vector3f topLeftLocal=new Vector3f(-width / 2f,height / 2f,0f);
  Matrix4f local2World=getLocalToWorldMatrix(null);
  Vector3f topLeftWorld=local2World.mult(topLeftLocal,new Vector3f());
  Vector3f planeNormalWorld=getPlaneNormalWorld();
  Vector3f intPointWorld=calcPlanarIntersection(rayWorld,topLeftWorld,planeNormalWorld);
  if (intPointWorld == null) {
    return null;
  }
  logger.fine(""String_Node_Str"" + intPointWorld);
  Point pt=calcPositionInPixelCoordinates(intPointWorld,false);
  logger.fine(""String_Node_Str"" + pt);
  return pt;
}"
46173,"private Vector3f calcOffsetTranslation(){
  Vector3f translation=new Vector3f();
  if (parent == null)   return translation;
  Vector2f pixelScale=getPixelScaleCurrent();
  Dimension parentSize=parent.getSizeApp();
  translation.x=-parentSize.width * pixelScale.x / 2f;
  translation.y=parentSize.height * pixelScale.y / 2f;
  translation.x+=sizeApp.width * pixelScale.x / 2f;
  translation.y-=sizeApp.height * pixelScale.y / 2f;
  translation.x+=offset.x * pixelScale.x;
  translation.y-=offset.y * pixelScale.y;
  return translation;
}","private Vector3f calcOffsetTranslation(){
  Vector3f translation=new Vector3f();
  if (parent == null)   return translation;
  if (ortho) {
    if (type == Type.PRIMARY || type == Type.UNKNOWN) {
      translation.x=locationOrtho.x;
      translation.y=locationOrtho.y;
    }
 else {
      translation.x=locationOrtho.x - sizeApp.width / 2f + offset.x;
      translation.y=locationOrtho.y + sizeApp.height / 2f - offset.y;
    }
    logger.fine(""String_Node_Str"" + this);
    logger.fine(""String_Node_Str"" + translation);
  }
 else {
    Vector2f pixelScale=getPixelScaleCurrent();
    Dimension parentSize=parent.getSizeApp();
    translation.x=-parentSize.width * pixelScale.x / 2f;
    translation.y=parentSize.height * pixelScale.y / 2f;
    translation.x+=sizeApp.width * pixelScale.x / 2f;
    translation.y-=sizeApp.height * pixelScale.y / 2f;
    translation.x+=offset.x * pixelScale.x;
    translation.y-=offset.y * pixelScale.y;
  }
  return translation;
}"
46174,"/** 
 * Specifies whether the view entity is to be displayed in ortho mode (""on the glass""). Update if specified.
 */
public synchronized void setOrtho(boolean ortho,boolean update){
  if (this.ortho == ortho)   return;
  logger.info(""String_Node_Str"" + this);
  logger.info(""String_Node_Str"" + ortho);
  this.ortho=ortho;
  changeMask|=CHANGED_ORTHO;
  if (update) {
    update();
  }
}","/** 
 * Specifies whether the view entity is to be displayed in ortho mode (""on the glass""). Update if specified. Also changes the ortho attribute of all descendent views.
 */
public synchronized void setOrtho(boolean ortho,boolean update){
  if (this.ortho == ortho)   return;
  logger.info(""String_Node_Str"" + this);
  logger.info(""String_Node_Str"" + ortho);
  this.ortho=ortho;
  changeMask|=CHANGED_ORTHO;
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + children.size());
  for (  View2DEntity child : children) {
    child.setOrtho(ortho,false);
  }
  if (update) {
    update();
  }
}"
46175,"/** 
 * Processes attribute changes. Should be called within a synchronized block. 
 */
protected void processChanges(){
  boolean windowNeedsValidate=false;
  logger.fine(""String_Node_Str"" + this);
  logger.fine(""String_Node_Str"" + type);
  logger.fine(""String_Node_Str"" + Integer.toHexString(changeMask));
  if ((changeMask & (CHANGED_GEOMETRY | CHANGED_SIZE_APP | CHANGED_TYPE| CHANGED_PARENT| CHANGED_VISIBLE| CHANGED_ORTHO)) != 0) {
    logger.fine(""String_Node_Str"" + this);
switch (attachState) {
case ATTACHED_TO_ENTITY:
      if (parentEntity != null) {
        logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
        RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
        sgChangeAttachPointSet(rc,null);
        parentEntity.removeEntity(entity);
        parentEntity=null;
      }
    break;
case ATTACHED_TO_WORLD:
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().removeEntity(entity);
break;
}
attachState=AttachState.DETACHED;
if ((changeMask & CHANGED_GEOMETRY) != 0) {
if (geometryNode != null) {
sgChangeGeometryDetachFromView(viewNode,geometryNode);
if (geometrySelfCreated) {
sgChangeGeometryCleanup(geometryNode);
geometrySelfCreated=false;
}
}
if (newGeometryNode != null) {
geometryNode=newGeometryNode;
newGeometryNode=null;
}
 else {
geometryNode=new GeometryNodeQuad(this);
geometrySelfCreated=true;
}
sgChangeGeometryAttachToView(viewNode,geometryNode);
}
if ((changeMask & (CHANGED_GEOMETRY | CHANGED_SIZE_APP)) != 0) {
logger.fine(""String_Node_Str"" + this);
if (geometryNode != null) {
DrawingSurfaceBufferedImage surface=(DrawingSurfaceBufferedImage)getWindow().getSurface();
if (surface != null) {
sgChangeGeometryTextureSet(geometryNode,getWindow().getTexture(),surface);
windowNeedsValidate=true;
}
}
}
if (isActuallyVisible()) {
if (ortho) {
logger.fine(""String_Node_Str"" + this);
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().addEntity(entity);
attachState=AttachState.ATTACHED_TO_WORLD;
entity.getComponent(RenderComponent.class).setOrtho(true);
}
 else {
logger.fine(""String_Node_Str"" + this);
parentEntity=getParentEntity();
if (parentEntity == null) {
logger.warning(""String_Node_Str"");
}
 else {
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
parentEntity.addEntity(entity);
RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
RenderComponent rcParent=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
sgChangeAttachPointSet(rc,rcParent.getSceneRoot());
attachState=AttachState.ATTACHED_TO_ENTITY;
entity.getComponent(RenderComponent.class).setOrtho(false);
}
}
}
if ((changeMask & CHANGED_ORTHO) != 0) {
logger.fine(""String_Node_Str"" + ortho + ""String_Node_Str""+ this);
for (View2DEntity child : children) {
child.setOrtho(ortho);
}
}
if ((changeMask & CHANGED_VISIBLE) != 0) {
logger.fine(""String_Node_Str"" + this);
for (View2DEntity child : children) {
child.updateVisibility();
}
}
}
if ((changeMask & (CHANGED_DECORATED | CHANGED_TITLE | CHANGED_ORTHO| CHANGED_TYPE| CHANGED_PIXEL_SCALE)) != 0) {
logger.fine(""String_Node_Str"" + this);
logger.fine(""String_Node_Str"" + decorated);
if ((changeMask & (CHANGED_DECORATED | CHANGED_ORTHO)) != 0) {
if (decorated && !ortho) {
if (!hasFrame()) {
logger.fine(""String_Node_Str"");
attachFrame();
}
}
 else {
if (hasFrame()) {
logger.fine(""String_Node_Str"");
detachFrame();
}
}
}
if ((changeMask & (CHANGED_TYPE | CHANGED_ORTHO)) != 0) {
if (decorated && !ortho) {
reattachFrame();
}
}
}
if ((changeMask & (CHANGED_STACK | CHANGED_ORTHO)) != 0) {
logger.fine(""String_Node_Str"" + this);
if (ortho) {
int zOrder=window.getZOrder();
sgChangeGeometryOrthoZOrderSet(geometryNode,zOrder);
}
}
if ((changeMask & CHANGED_ORTHO) != 0) {
if (isActuallyVisible()) {
entity.getComponent(RenderComponent.class).setOrtho(ortho);
}
sgChangeViewNodeOrthoSet(viewNode,ortho);
}
if ((changeMask & (CHANGED_DECORATED | CHANGED_SIZE_APP | CHANGED_PIXEL_SCALE| CHANGED_ORTHO)) != 0) {
float width=getDisplayerLocalWidth();
float height=getDisplayerLocalHeight();
sgChangeGeometrySizeSet(geometryNode,width,height);
changeMask|=CHANGED_TEX_COORDS;
}
if ((changeMask & (CHANGED_TEX_COORDS | CHANGED_GEOMETRY | CHANGED_SIZE_APP)) != 0) {
float width=(float)sizeApp.width;
float height=(float)sizeApp.height;
Image image=getWindow().getTexture().getImage();
float widthRatio=width / image.getWidth();
float heightRatio=height / image.getHeight();
sgChangeGeometryTexCoordsSet(geometryNode,widthRatio,heightRatio);
windowNeedsValidate=true;
}
if ((changeMask & (CHANGED_TYPE | CHANGED_PARENT | CHANGED_PIXEL_SCALE| CHANGED_SIZE_APP| CHANGED_OFFSET| CHANGED_ORTHO| CHANGED_STACK)) != 0) {
CellTransform transform=null;
switch (type) {
case UNKNOWN:
case PRIMARY:
transform=new CellTransform(null,null,null);
break;
case SECONDARY:
case POPUP:
transform=calcOffsetStackTransform();
}
sgChangeGeometryTransformOffsetStackSet(geometryNode,transform);
}
if ((changeMask & (CHANGED_TYPE | CHANGED_USER_TRANSLATION | CHANGED_ORTHO| CHANGED_LOCATION_ORTHO| CHANGED_TYPE)) != 0) {
CellTransform deltaTransform;
switch (type) {
case UNKNOWN:
case PRIMARY:
deltaTransform=calcUserDeltaTransform();
updatePrimaryTransform(deltaTransform);
break;
case SECONDARY:
deltaTransform=calcUserDeltaTransform();
sgChangeTransformUserPostMultiply(viewNode,deltaTransform);
break;
case POPUP:
sgChangeTransformUserSet(viewNode,new CellTransform(null,null,null));
}
}
sgProcessChanges();
if (!ortho) {
frameUpdate();
}
if (windowNeedsValidate) {
if (window instanceof WindowSwing) {
((WindowSwing)window).validate();
}
}
if (window != null) {
DrawingSurface surface=window.getSurface();
if (surface != null) {
surface.setViewIsVisible(this,isActuallyVisible());
}
}
}","/** 
 * Processes attribute changes. Should be called within a synchronized block. 
 */
protected void processChanges(){
  boolean windowNeedsValidate=false;
  logger.fine(""String_Node_Str"" + this);
  logger.fine(""String_Node_Str"" + type);
  logger.fine(""String_Node_Str"" + Integer.toHexString(changeMask));
  if ((changeMask & (CHANGED_GEOMETRY | CHANGED_SIZE_APP | CHANGED_TYPE| CHANGED_PARENT| CHANGED_VISIBLE| CHANGED_ORTHO)) != 0) {
    logger.fine(""String_Node_Str"" + this);
switch (attachState) {
case ATTACHED_TO_ENTITY:
      if (parentEntity != null) {
        logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
        RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
        sgChangeAttachPointSet(rc,null);
        parentEntity.removeEntity(entity);
        parentEntity=null;
      }
    break;
case ATTACHED_TO_WORLD:
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().removeEntity(entity);
break;
}
attachState=AttachState.DETACHED;
if ((changeMask & CHANGED_GEOMETRY) != 0) {
if (geometryNode != null) {
sgChangeGeometryDetachFromView(viewNode,geometryNode);
if (geometrySelfCreated) {
sgChangeGeometryCleanup(geometryNode);
geometrySelfCreated=false;
}
}
if (newGeometryNode != null) {
geometryNode=newGeometryNode;
newGeometryNode=null;
}
 else {
geometryNode=new GeometryNodeQuad(this);
geometrySelfCreated=true;
}
sgChangeGeometryAttachToView(viewNode,geometryNode);
}
if ((changeMask & (CHANGED_GEOMETRY | CHANGED_SIZE_APP)) != 0) {
logger.fine(""String_Node_Str"" + this);
if (geometryNode != null) {
DrawingSurfaceBufferedImage surface=(DrawingSurfaceBufferedImage)getWindow().getSurface();
if (surface != null) {
sgChangeGeometryTextureSet(geometryNode,getWindow().getTexture(),surface);
windowNeedsValidate=true;
}
}
}
if (isActuallyVisible()) {
if (ortho) {
logger.fine(""String_Node_Str"" + this);
entity.getComponent(RenderComponent.class).setOrtho(true);
if (type == Type.PRIMARY || type == Type.UNKNOWN) {
ClientContextJME.getWorldManager().addEntity(entity);
attachState=AttachState.ATTACHED_TO_WORLD;
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
}
 else {
parentEntity=getParentEntity();
if (parentEntity == null) {
  ClientContextJME.getWorldManager().addEntity(entity);
  attachState=AttachState.ATTACHED_TO_WORLD;
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
}
 else {
  parentEntity.addEntity(entity);
  RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
  RenderComponent rcParent=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
  sgChangeAttachPointSet(rc,rcParent.getSceneRoot());
  attachState=AttachState.ATTACHED_TO_ENTITY;
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
}
}
}
 else {
logger.fine(""String_Node_Str"" + this);
parentEntity=getParentEntity();
if (parentEntity == null) {
logger.warning(""String_Node_Str"");
}
 else {
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
parentEntity.addEntity(entity);
RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
RenderComponent rcParent=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
sgChangeAttachPointSet(rc,rcParent.getSceneRoot());
attachState=AttachState.ATTACHED_TO_ENTITY;
entity.getComponent(RenderComponent.class).setOrtho(false);
}
}
}
if ((changeMask & CHANGED_VISIBLE) != 0) {
logger.fine(""String_Node_Str"" + this);
for (View2DEntity child : children) {
child.updateVisibility();
}
}
}
if ((changeMask & (CHANGED_DECORATED | CHANGED_TITLE | CHANGED_ORTHO| CHANGED_TYPE| CHANGED_PIXEL_SCALE)) != 0) {
logger.fine(""String_Node_Str"" + this);
logger.fine(""String_Node_Str"" + decorated);
if ((changeMask & (CHANGED_DECORATED | CHANGED_ORTHO)) != 0) {
if (decorated && !ortho) {
if (!hasFrame()) {
logger.fine(""String_Node_Str"");
attachFrame();
}
}
 else {
if (hasFrame()) {
logger.fine(""String_Node_Str"");
detachFrame();
}
}
}
if ((changeMask & (CHANGED_TYPE | CHANGED_ORTHO)) != 0) {
if (decorated && !ortho) {
reattachFrame();
}
}
}
if ((changeMask & (CHANGED_STACK | CHANGED_ORTHO)) != 0) {
logger.fine(""String_Node_Str"" + this);
if (ortho) {
int zOrder=window.getZOrder();
logger.fine(""String_Node_Str"" + zOrder);
if (zOrder >= 0) {
sgChangeGeometryOrthoZOrderSet(geometryNode,zOrder);
}
}
}
if ((changeMask & CHANGED_ORTHO) != 0) {
if (isActuallyVisible()) {
entity.getComponent(RenderComponent.class).setOrtho(ortho);
}
sgChangeViewNodeOrthoSet(viewNode,ortho);
}
if ((changeMask & (CHANGED_DECORATED | CHANGED_SIZE_APP | CHANGED_PIXEL_SCALE| CHANGED_ORTHO)) != 0) {
float width=getDisplayerLocalWidth();
float height=getDisplayerLocalHeight();
sgChangeGeometrySizeSet(geometryNode,width,height);
changeMask|=CHANGED_TEX_COORDS;
}
if ((changeMask & (CHANGED_TEX_COORDS | CHANGED_GEOMETRY | CHANGED_SIZE_APP)) != 0) {
float width=(float)sizeApp.width;
float height=(float)sizeApp.height;
Image image=getWindow().getTexture().getImage();
float widthRatio=width / image.getWidth();
float heightRatio=height / image.getHeight();
sgChangeGeometryTexCoordsSet(geometryNode,widthRatio,heightRatio);
windowNeedsValidate=true;
}
if ((changeMask & (CHANGED_TYPE | CHANGED_PARENT | CHANGED_PIXEL_SCALE| CHANGED_SIZE_APP| CHANGED_OFFSET| CHANGED_ORTHO| CHANGED_STACK)) != 0) {
CellTransform transform=null;
switch (type) {
case UNKNOWN:
case PRIMARY:
transform=new CellTransform(null,null,null);
break;
case SECONDARY:
case POPUP:
transform=calcOffsetStackTransform();
}
sgChangeGeometryTransformOffsetStackSet(geometryNode,transform);
}
if ((changeMask & (CHANGED_TYPE | CHANGED_USER_TRANSLATION | CHANGED_ORTHO| CHANGED_LOCATION_ORTHO| CHANGED_TYPE)) != 0) {
CellTransform deltaTransform;
switch (type) {
case UNKNOWN:
case PRIMARY:
deltaTransform=calcUserDeltaTransform();
updatePrimaryTransform(deltaTransform);
break;
case SECONDARY:
deltaTransform=calcUserDeltaTransform();
sgChangeTransformUserPostMultiply(viewNode,deltaTransform);
break;
case POPUP:
sgChangeTransformUserSet(viewNode,new CellTransform(null,null,null));
}
}
sgProcessChanges();
if (!ortho) {
frameUpdate();
}
if (windowNeedsValidate) {
if (window instanceof WindowSwing) {
((WindowSwing)window).validate();
}
}
if (window != null) {
DrawingSurface surface=window.getSurface();
if (surface != null) {
surface.setViewIsVisible(this,isActuallyVisible());
}
}
logger.fine(""String_Node_Str"" + this);
for (View2DEntity child : children) {
if (child.changeMask != 0) {
child.update();
}
}
}"
46176,"/** 
 * Given a point in the pixel space of the Wonderland canvas calculates the texel coordinates of the point on the geometry where a ray starting from the current eye position intersects the geometry. Note on subclassing: If the geometry is nonplanar it is recommended that the subclass implement this method by performing a pick. If this pick misses the subclass will need to decide how to handle the miss. One possible way to handle this is to assume that there is a planar ""halo"" surrounding the the window with which the ray can be intersected.
 */
public Point calcIntersectionPixelOfEyeRay(int x,int y){
  Ray rayWorld=InputManager3D.getInputManager().pickRayWorld(x,y);
  float width=view.getDisplayerLocalWidth();
  float height=view.getDisplayerLocalHeight();
  Vector3f topLeftLocal=new Vector3f(-width / 2f,height / 2f,0f);
  Matrix4f local2World=getLocalToWorldMatrix(null);
  Vector3f topLeftWorld=local2World.mult(topLeftLocal,new Vector3f());
  Vector3f planeNormalWorld=getPlaneNormalWorld();
  Vector3f intPointWorld=calcPlanarIntersection(rayWorld,topLeftWorld,planeNormalWorld);
  if (intPointWorld == null) {
    return null;
  }
  logger.fine(""String_Node_Str"" + intPointWorld);
  Point pt=calcPositionInPixelCoordinates(intPointWorld,false);
  logger.fine(""String_Node_Str"" + pt);
  return pt;
}","/** 
 * Given a point in the pixel space of the Wonderland canvas calculates the texel coordinates of the point on the geometry where a ray starting from the current eye position intersects the geometry. This method is used only for drag events that start on an view which is in the  world (that is, it is not in the ortho plane). Note on subclassing: If the geometry is nonplanar it is recommended that the subclass implement this method by performing a pick. If this pick misses the subclass will need to decide how to handle the miss. One possible way to handle this is to assume that there is a planar ""halo"" surrounding the the window with which the ray can be intersected.
 */
public Point calcIntersectionPixelOfEyeRay(int x,int y){
  Ray rayWorld=InputManager3D.getInputManager().pickRayWorld(x,y);
  float width=view.getDisplayerLocalWidth();
  float height=view.getDisplayerLocalHeight();
  Vector3f topLeftLocal=new Vector3f(-width / 2f,height / 2f,0f);
  Matrix4f local2World=getLocalToWorldMatrix(null);
  Vector3f topLeftWorld=local2World.mult(topLeftLocal,new Vector3f());
  Vector3f planeNormalWorld=getPlaneNormalWorld();
  Vector3f intPointWorld=calcPlanarIntersection(rayWorld,topLeftWorld,planeNormalWorld);
  if (intPointWorld == null) {
    return null;
  }
  logger.fine(""String_Node_Str"" + intPointWorld);
  Point pt=calcPositionInPixelCoordinates(intPointWorld,false);
  logger.fine(""String_Node_Str"" + pt);
  return pt;
}"
46177,"/** 
 * Calculates the point in world coordinates where the given ray intersects the ""world plane""  of this geometry. Returns null if the ray doesn't intersect the plane. <br><br> All inputs are in world coordinates.      <br><br>
 * @param ray The ray.
 * @param planePoint A point on the plane.
 * @param planeNormal The plane normal vector.
 * @return The intersection point.
 */
protected Vector3f calcPlanarIntersection(Ray ray,Vector3f planePoint,Vector3f planeNormal){
  Vector3f pointDiffVec=new Vector3f(planePoint);
  pointDiffVec.subtractLocal(ray.getOrigin());
  float numerator=planeNormal.dot(pointDiffVec);
  float denominator=planeNormal.dot(ray.getDirection());
  if (denominator == 0f) {
    return null;
  }
  float t=numerator / denominator;
  Vector3f x=ray.getDirection().mult(t).add(ray.getOrigin());
  logger.fine(""String_Node_Str"" + x);
  return x;
}","/** 
 * Calculates the point in world coordinates where the given ray intersects the ""world plane""  of this geometry. Returns null if the ray doesn't intersect the plane. <br><br> All inputs are in world coordinates.      <br><br>
 * @param ray The ray.
 * @param planePoint A point on the plane.
 * @param planeNormal The plane normal vector.
 * @return The intersection point.
 */
protected Vector3f calcPlanarIntersection(Ray ray,Vector3f planePoint,Vector3f planeNormal){
  Vector3f pointDiffVec=new Vector3f(planePoint);
  pointDiffVec.subtractLocal(ray.getOrigin());
  float numerator=planeNormal.dot(pointDiffVec);
  float denominator=planeNormal.dot(ray.getDirection());
  if (denominator == 0f) {
    return null;
  }
  float t=numerator / denominator;
  Vector3f x=ray.getDirection().mult(t).add(ray.getOrigin());
  return x;
}"
46178,"/** 
 * {@inheritDoc} 
 */
public Point calcIntersectionPixelOfEyeRay(int x,int y){
  if (geometryNode == null) {
    return null;
  }
  return geometryNode.calcIntersectionPixelOfEyeRay(x,y);
}","/** 
 * {@inheritDoc} 
 */
public Point calcIntersectionPixelOfEyeRay(int x,int y){
  if (geometryNode == null) {
    return null;
  }
  if (isOrtho()) {
    return geometryNode.calcIntersectionPixelOfEyeRayOrtho(x,y);
  }
 else {
    return geometryNode.calcIntersectionPixelOfEyeRay(x,y);
  }
}"
46179,"/** 
 * Specify the location of a primary view used when the view is in ortho mode. The location is an offset relative to the origin of the displayer and is in the coordinate system of the ortho plane. Update if specified. This attribute is ignored for non-primary views. Note: there is no corresponding attribute for cell mode because the cell itself automatically controls the location of a primary view within the cell (usually centered) and the cell location within the world is derived from WFS and other input. 
 */
public synchronized void setLocationOrtho(Vector2f location,boolean update){
  logger.info(""String_Node_Str"" + this);
  logger.info(""String_Node_Str"" + location);
  this.locationOrtho=location.clone();
  changeMask|=CHANGED_LOCATION_ORTHO;
  if (update) {
    update();
  }
}","/** 
 * Specify the location of a primary view used when the view is in ortho mode. The location the offset of the view center relative to the origin of the displayer  and is in the coordinate system of the ortho plane. Update if specified. This attribute is ignored for non-primary views. Note: there is no corresponding attribute for cell mode because the cell itself automatically controls the location of a primary view within the cell (usually centered) and the cell location within the world is derived from WFS and other input. 
 */
public synchronized void setLocationOrtho(Vector2f location,boolean update){
  logger.info(""String_Node_Str"" + this);
  logger.info(""String_Node_Str"" + location);
  this.locationOrtho=location.clone();
  changeMask|=CHANGED_LOCATION_ORTHO;
  if (update) {
    update();
  }
}"
46180,"public void run(){
  ReconnectFrame rf=new ReconnectFrame(JmeClientMain.this,mgr);
  rf.pack();
  rf.setLocationRelativeTo(JmeClientMain.getFrame().getFrame());
  rf.setVisible(true);
}","public void run(){
  frame.getFrame().setVisible(true);
}"
46181,"/** 
 * Create all of the Swing windows - and the 3D window
 */
private void createUI(WorldManager wm){
  frame=new MainFrameImpl(wm,width,height);
  frame.getFrame().setLocationRelativeTo(null);
  frame.getFrame().setVisible(true);
  JPanel canvas3D=frame.getCanvas3DPanel();
  ViewManager.initialize(canvas3D.getWidth(),canvas3D.getHeight());
  ViewManager.getViewManager().attachViewCanvas(canvas3D);
  CameraComponent cameraComp=ViewManager.getViewManager().getCameraComponent();
  InputManager inputManager=ClientContext.getInputManager();
  inputManager.initialize(frame.getCanvas(),cameraComp);
  inputManager.addKeyMouseFocus(inputManager.getGlobalFocusEntity());
}","/** 
 * Create all of the Swing windows - and the 3D window
 */
private void createUI(WorldManager wm){
  frame=new MainFrameImpl(wm,width,height);
  frame.getFrame().setLocationRelativeTo(null);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      frame.getFrame().setVisible(true);
    }
  }
);
  JPanel canvas3D=frame.getCanvas3DPanel();
  ViewManager.initialize(canvas3D.getWidth(),canvas3D.getHeight());
  ViewManager.getViewManager().attachViewCanvas(canvas3D);
  CameraComponent cameraComp=ViewManager.getViewManager().getCameraComponent();
  InputManager inputManager=ClientContext.getInputManager();
  inputManager.initialize(frame.getCanvas(),cameraComp);
  inputManager.addKeyMouseFocus(inputManager.getGlobalFocusEntity());
}"
46182,"public CellClientSession createSession(WonderlandServerInfo serverInfo,ClassLoader loader){
  CellClientSession ccs=new CellClientSession(serverInfo,loader){
    @Override protected CellCache createCellCache(){
      CellCacheBasicImpl impl=new CellCacheBasicImpl(this,getClassLoader(),getCellCacheConnection(),getCellChannelConnection()){
        @Override protected CellRenderer createCellRenderer(        Cell cell){
          return null;
        }
      }
;
      getCellCacheConnection().addListener(impl);
      return impl;
    }
  }
;
  ccs.addSessionStatusListener(Client3DSim.this);
  final LocalAvatar avatar=ccs.getLocalAvatar();
  avatar.addViewCellConfiguredListener(new ViewCellConfiguredListener(){
    public void viewConfigured(    LocalAvatar localAvatar){
      userSim.start();
    }
  }
);
  userSim=new UserSimulator(avatar);
  return ccs;
}","public CellClientSession createSession(ServerSessionManager sessionMgr,WonderlandServerInfo serverInfo,ClassLoader loader){
  CellClientSession ccs=new CellClientSession(sessionMgr,serverInfo,loader){
    @Override protected CellCache createCellCache(){
      CellCacheBasicImpl impl=new CellCacheBasicImpl(this,getClassLoader(),getCellCacheConnection(),getCellChannelConnection()){
        @Override protected CellRenderer createCellRenderer(        Cell cell){
          return null;
        }
      }
;
      getCellCacheConnection().addListener(impl);
      return impl;
    }
  }
;
  ccs.addSessionStatusListener(Client3DSim.this);
  final LocalAvatar avatar=ccs.getLocalAvatar();
  avatar.addViewCellConfiguredListener(new ViewCellConfiguredListener(){
    public void viewConfigured(    LocalAvatar localAvatar){
      userSim.start();
    }
  }
);
  userSim=new UserSimulator(avatar);
  return ccs;
}"
46183,"public void initialize(String username,Properties props) throws ProcessingException {
  this.username=username;
  File userDir=new File(ClientContext.getUserDirectory(""String_Node_Str""),username);
  ClientContext.setUserDirectory(userDir);
  ClientContext.setRendererType(RendererType.NONE);
  String serverURL=props.getProperty(""String_Node_Str"");
  if (serverURL == null) {
    throw new ProcessingException(""String_Node_Str"");
  }
  LoginManager.setLoginUI(new ClientSimLoginUI(username,props));
  LoginManager.setPluginFilter(new BlacklistPluginFilter());
  JmeClientMain.setFrame(new FakeMainFrame());
  try {
    ServerSessionManager mgr=LoginManager.getInstance(serverURL);
    session=mgr.createSession(new SessionCreator<CellClientSession>(){
      public CellClientSession createSession(      WonderlandServerInfo serverInfo,      ClassLoader loader){
        CellClientSession ccs=new CellClientSession(serverInfo,loader){
          @Override protected CellCache createCellCache(){
            CellCacheBasicImpl impl=new CellCacheBasicImpl(this,getClassLoader(),getCellCacheConnection(),getCellChannelConnection()){
              @Override protected CellRenderer createCellRenderer(              Cell cell){
                return null;
              }
            }
;
            getCellCacheConnection().addListener(impl);
            return impl;
          }
        }
;
        ccs.addSessionStatusListener(Client3DSim.this);
        final LocalAvatar avatar=ccs.getLocalAvatar();
        avatar.addViewCellConfiguredListener(new ViewCellConfiguredListener(){
          public void viewConfigured(          LocalAvatar localAvatar){
            userSim.start();
          }
        }
);
        userSim=new UserSimulator(avatar);
        return ccs;
      }
    }
);
  }
 catch (  IOException ioe) {
    throw new ProcessingException(ioe);
  }
catch (  LoginFailureException lfe) {
    throw new ProcessingException(lfe);
  }
}","public void initialize(String username,Properties props) throws ProcessingException {
  this.username=username;
  File userDir=new File(ClientContext.getUserDirectory(""String_Node_Str""),username);
  ClientContext.setUserDirectory(userDir);
  ClientContext.setRendererType(RendererType.NONE);
  String serverURL=props.getProperty(""String_Node_Str"");
  if (serverURL == null) {
    throw new ProcessingException(""String_Node_Str"");
  }
  LoginManager.setLoginUI(new ClientSimLoginUI(username,props));
  LoginManager.setPluginFilter(new BlacklistPluginFilter());
  JmeClientMain.setFrame(new FakeMainFrame());
  try {
    ServerSessionManager mgr=LoginManager.getSessionManager(serverURL);
    session=mgr.createSession(new SessionCreator<CellClientSession>(){
      public CellClientSession createSession(      ServerSessionManager sessionMgr,      WonderlandServerInfo serverInfo,      ClassLoader loader){
        CellClientSession ccs=new CellClientSession(sessionMgr,serverInfo,loader){
          @Override protected CellCache createCellCache(){
            CellCacheBasicImpl impl=new CellCacheBasicImpl(this,getClassLoader(),getCellCacheConnection(),getCellChannelConnection()){
              @Override protected CellRenderer createCellRenderer(              Cell cell){
                return null;
              }
            }
;
            getCellCacheConnection().addListener(impl);
            return impl;
          }
        }
;
        ccs.addSessionStatusListener(Client3DSim.this);
        final LocalAvatar avatar=ccs.getLocalAvatar();
        avatar.addViewCellConfiguredListener(new ViewCellConfiguredListener(){
          public void viewConfigured(          LocalAvatar localAvatar){
            userSim.start();
          }
        }
);
        userSim=new UserSimulator(avatar);
        return ccs;
      }
    }
);
  }
 catch (  IOException ioe) {
    throw new ProcessingException(ioe);
  }
catch (  LoginFailureException lfe) {
    lfe.printStackTrace();
    throw new ProcessingException(lfe);
  }
}"
46184,"/** 
 * @param status
 */
@Override public void setStatus(CellStatus status){
  super.setStatus(status);
switch (status) {
case DISK:
    if (entity != null)     ClientContextJME.getWorldManager().removeEntity(entity);
  break;
case BOUNDS:
cell.getComponent(MovableComponent.class).addServerCellMoveListener(new CellMoveListener(){
  public void cellMoved(  CellTransform transform,  CellMoveSource source){
    if (source == CellMoveSource.REMOTE) {
      avatarCharacter.getModelInst().setTransform(new PTransform(transform.getRotation(null),transform.getTranslation(null),new Vector3f(1,1,1)));
    }
  }
}
);
break;
}
}","/** 
 * @param status
 */
@Override public void setStatus(CellStatus status){
  super.setStatus(status);
switch (status) {
case DISK:
    if (entity != null)     ClientContextJME.getWorldManager().removeEntity(entity);
  break;
case BOUNDS:
cell.getComponent(MovableComponent.class).addServerCellMoveListener(new CellMoveListener(){
  public void cellMoved(  CellTransform transform,  CellMoveSource source){
    if (source == CellMoveSource.REMOTE) {
      if (avatarCharacter != null) {
        if (avatarCharacter.getModelInst() == null) {
          logger.severe(""String_Node_Str"");
          Thread.dumpStack();
          return;
        }
        avatarCharacter.getModelInst().setTransform(new PTransform(transform.getRotation(null),transform.getTranslation(null),new Vector3f(1,1,1)));
      }
    }
  }
}
);
break;
}
}"
46185,"public void cellMoved(CellTransform transform,CellMoveSource source){
  if (source == CellMoveSource.REMOTE) {
    avatarCharacter.getModelInst().setTransform(new PTransform(transform.getRotation(null),transform.getTranslation(null),new Vector3f(1,1,1)));
  }
}","public void cellMoved(CellTransform transform,CellMoveSource source){
  if (source == CellMoveSource.REMOTE) {
    if (avatarCharacter != null) {
      if (avatarCharacter.getModelInst() == null) {
        logger.severe(""String_Node_Str"");
        Thread.dumpStack();
        return;
      }
      avatarCharacter.getModelInst().setTransform(new PTransform(transform.getRotation(null),transform.getTranslation(null),new Vector3f(1,1,1)));
    }
  }
}"
46186,"/** 
 * Updates the GUI with values currently set in the cell 
 */
private void updateGUI(){
  if (cellProperties != null) {
    cellProperties.updateGUI(cellServerState);
  }
  basicPanel.updateGUI(cellServerState);
  positionPanel.updateGUI();
  Iterator<Map.Entry<String,CellComponentPropertiesSPI>> it=componentPropertiesMap.entrySet().iterator();
  while (it.hasNext() == true) {
    Map.Entry<String,CellComponentPropertiesSPI> entry=it.next();
    entry.getValue().updateGUI(cellServerState);
  }
}","/** 
 * Updates the GUI with values currently set in the cell 
 */
private void updateGUI(){
  if (cellProperties != null) {
    cellProperties.updateGUI(cellServerState);
  }
  basicPanel.updateGUI(cellServerState);
  positionPanel.setLocalChanges(true);
  positionPanel.updateGUI();
  positionPanel.setLocalChanges(false);
  Iterator<Map.Entry<String,CellComponentPropertiesSPI>> it=componentPropertiesMap.entrySet().iterator();
  while (it.hasNext() == true) {
    Map.Entry<String,CellComponentPropertiesSPI> entry=it.next();
    entry.getValue().updateGUI(cellServerState);
  }
}"
46187,"public void setViewCell(final ViewCell newViewCell){
  Thread t=new Thread(){
    public void run(){
      boolean ready=false;
      while (!ready) {
synchronized (avatarConfigServers) {
          if (avatarConfigServers.containsKey(newViewCell.getCellCache().getSession().getSessionManager()))           ready=true;
        }
        if (!ready) {
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException ex) {
            Logger.getLogger(AvatarConfigManager.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
      AvatarConfigComponent configComponent=newViewCell.getComponent(AvatarConfigComponent.class);
      URL selectedURL=AvatarConfigManager.getAvatarConfigManager().getDefaultAvatarServerURL(newViewCell.getCellCache().getSession().getSessionManager());
      logger.info(""String_Node_Str"" + selectedURL);
      System.err.println(""String_Node_Str"" + selectedURL);
      if (selectedURL != null) {
        configComponent.requestConfigChange(selectedURL);
      }
    }
  }
;
  t.start();
}","public void setViewCell(final ViewCell newViewCell){
  Thread t=new Thread(){
    public void run(){
      boolean ready=false;
      while (!ready) {
synchronized (avatarConfigServers) {
          if (avatarConfigServers.containsKey(newViewCell.getCellCache().getSession().getSessionManager()))           ready=true;
        }
        if (!ready) {
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException ex) {
            Logger.getLogger(AvatarConfigManager.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
      AvatarConfigComponent configComponent=newViewCell.getComponent(AvatarConfigComponent.class);
      URL selectedURL=AvatarConfigManager.getAvatarConfigManager().getDefaultAvatarServerURL(newViewCell.getCellCache().getSession().getSessionManager());
      logger.info(""String_Node_Str"" + selectedURL);
      if (selectedURL != null) {
        configComponent.requestConfigChange(selectedURL);
      }
    }
  }
;
  t.start();
}"
46188,"private void notifyConfigUpdate(AvatarConfigMessage msg){
  System.err.println(""String_Node_Str"" + msg.getModelConfigURL());
  if ((avatarConfigURL != null && avatarConfigURL.toExternalForm().equals(msg.getModelConfigURL()) || msg.getModelConfigURL() == null))   return;
  try {
    avatarConfigURL=new URL(msg.getModelConfigURL());
synchronized (avatarChangeListeners) {
      for (      AvatarConfigChangeListener l : avatarChangeListeners) {
        l.AvatarConfigChanged(msg);
      }
    }
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(AvatarConfigComponent.class.getName()).log(Level.SEVERE,null,ex);
  }
}","private void notifyConfigUpdate(AvatarConfigMessage msg){
  if ((avatarConfigURL != null && avatarConfigURL.toExternalForm().equals(msg.getModelConfigURL()) || msg.getModelConfigURL() == null))   return;
  try {
    avatarConfigURL=new URL(msg.getModelConfigURL());
synchronized (avatarChangeListeners) {
      for (      AvatarConfigChangeListener l : avatarChangeListeners) {
        l.AvatarConfigChanged(msg);
      }
    }
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(AvatarConfigComponent.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
46189,"public void requestConfigChange(URL configURL){
  System.err.println(""String_Node_Str"" + configURL);
  if (avatarConfigURL != null && avatarConfigURL.equals(configURL))   return;
synchronized (this) {
    if (channelComp == null) {
      pendingChange=configURL;
    }
 else {
      channelComp.send(AvatarConfigMessage.newRequestMessage(configURL));
    }
  }
}","public void requestConfigChange(URL configURL){
  if (avatarConfigURL != null && avatarConfigURL.equals(configURL))   return;
synchronized (this) {
    if (channelComp == null) {
      pendingChange=configURL;
    }
 else {
      channelComp.send(AvatarConfigMessage.newRequestMessage(configURL));
    }
  }
}"
46190,"@Override public void setClientState(CellComponentClientState clientState){
  super.setClientState(clientState);
  try {
    String str=((AvatarConfigComponentClientState)clientState).getConfigURL();
    System.err.println(""String_Node_Str"" + str);
    if (str != null)     avatarConfigURL=new URL(str);
 else     avatarConfigURL=null;
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(AvatarConfigComponent.class.getName()).log(Level.SEVERE,null,ex);
  }
}","@Override public void setClientState(CellComponentClientState clientState){
  super.setClientState(clientState);
  try {
    String str=((AvatarConfigComponentClientState)clientState).getConfigURL();
    if (str != null)     avatarConfigURL=new URL(str);
 else     avatarConfigURL=null;
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(AvatarConfigComponent.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
46191,"/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  genderGrou=new javax.swing.ButtonGroup();
  customiseFrame=new javax.swing.JFrame();
  jPanel2=new javax.swing.JPanel();
  scrollPane=new javax.swing.JScrollPane();
  jPanel3=new javax.swing.JPanel();
  saveB=new javax.swing.JButton();
  jPanel1=new javax.swing.JPanel();
  chooseAvatarPanel=new javax.swing.JPanel();
  avatarListScrollPane=new javax.swing.JScrollPane();
  avatarList=new javax.swing.JList();
  deleteB=new javax.swing.JButton();
  viewB=new javax.swing.JButton();
  defaultAvatarTF=new javax.swing.JTextField();
  jLabel2=new javax.swing.JLabel();
  customiseB=new javax.swing.JButton();
  createAvatarPanel=new javax.swing.JPanel();
  jLabel1=new javax.swing.JLabel();
  maleRB=new javax.swing.JRadioButton();
  femaleRB=new javax.swing.JRadioButton();
  addB=new javax.swing.JButton();
  avatarNameTF=new javax.swing.JTextField();
  randomizeB=new javax.swing.JButton();
  jLabel4=new javax.swing.JLabel();
  jPanel2.setLayout(new java.awt.BorderLayout());
  jPanel2.add(scrollPane,java.awt.BorderLayout.CENTER);
  customiseFrame.getContentPane().add(jPanel2,java.awt.BorderLayout.CENTER);
  saveB.setText(bundle.getString(""String_Node_Str""));
  org.jdesktop.layout.GroupLayout jPanel3Layout=new org.jdesktop.layout.GroupLayout(jPanel3);
  jPanel3.setLayout(jPanel3Layout);
  jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,jPanel3Layout.createSequentialGroup().addContainerGap(177,Short.MAX_VALUE).add(saveB).add(148,148,148)));
  jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,jPanel3Layout.createSequentialGroup().addContainerGap(65,Short.MAX_VALUE).add(saveB).addContainerGap()));
  customiseFrame.getContentPane().add(jPanel3,java.awt.BorderLayout.SOUTH);
  setTitle(bundle.getString(""String_Node_Str""));
  chooseAvatarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""String_Node_Str""));
  avatarList.setModel(new DefaultListModel());
  avatarList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
  avatarList.addListSelectionListener(new javax.swing.event.ListSelectionListener(){
    public void valueChanged(    javax.swing.event.ListSelectionEvent evt){
      avatarListValueChanged(evt);
    }
  }
);
  avatarListScrollPane.setViewportView(avatarList);
  deleteB.setText(bundle.getString(""String_Node_Str""));
  deleteB.setToolTipText(bundle.getString(""String_Node_Str""));
  deleteB.setEnabled(false);
  deleteB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      deleteBActionPerformed(evt);
    }
  }
);
  viewB.setText(bundle.getString(""String_Node_Str""));
  viewB.setToolTipText(bundle.getString(""String_Node_Str""));
  viewB.setEnabled(false);
  viewB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      viewBActionPerformed(evt);
    }
  }
);
  jLabel2.setText(bundle.getString(""String_Node_Str""));
  customiseB.setText(bundle.getString(""String_Node_Str""));
  customiseB.setEnabled(false);
  customiseB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      customiseBActionPerformed(evt);
    }
  }
);
  org.jdesktop.layout.GroupLayout chooseAvatarPanelLayout=new org.jdesktop.layout.GroupLayout(chooseAvatarPanel);
  chooseAvatarPanel.setLayout(chooseAvatarPanelLayout);
  chooseAvatarPanelLayout.setHorizontalGroup(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(chooseAvatarPanelLayout.createSequentialGroup().add(14,14,14).add(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(chooseAvatarPanelLayout.createSequentialGroup().add(avatarListScrollPane,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,159,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(6,6,6).add(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(customiseB).add(viewB).add(deleteB))).add(chooseAvatarPanelLayout.createSequentialGroup().add(jLabel2).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(defaultAvatarTF,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,160,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))).addContainerGap(170,Short.MAX_VALUE)));
  chooseAvatarPanelLayout.linkSize(new java.awt.Component[]{deleteB,viewB},org.jdesktop.layout.GroupLayout.HORIZONTAL);
  chooseAvatarPanelLayout.setVerticalGroup(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(chooseAvatarPanelLayout.createSequentialGroup().addContainerGap().add(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(avatarListScrollPane,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,186,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(chooseAvatarPanelLayout.createSequentialGroup().add(viewB).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(deleteB).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(customiseB))).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel2).add(defaultAvatarTF,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(21,21,21)));
  createAvatarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""String_Node_Str""));
  jLabel1.setText(bundle.getString(""String_Node_Str""));
  genderGrou.add(maleRB);
  maleRB.setSelected(true);
  maleRB.setText(bundle.getString(""String_Node_Str""));
  genderGrou.add(femaleRB);
  femaleRB.setText(bundle.getString(""String_Node_Str""));
  addB.setText(bundle.getString(""String_Node_Str""));
  addB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      addBActionPerformed(evt);
    }
  }
);
  avatarNameTF.setText(bundle.getString(""String_Node_Str""));
  randomizeB.setText(bundle.getString(""String_Node_Str""));
  randomizeB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      randomizeBActionPerformed(evt);
    }
  }
);
  jLabel4.setText(bundle.getString(""String_Node_Str""));
  org.jdesktop.layout.GroupLayout createAvatarPanelLayout=new org.jdesktop.layout.GroupLayout(createAvatarPanel);
  createAvatarPanel.setLayout(createAvatarPanelLayout);
  createAvatarPanelLayout.setHorizontalGroup(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(createAvatarPanelLayout.createSequentialGroup().add(54,54,54).add(jLabel4).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(addB).add(randomizeB).add(createAvatarPanelLayout.createSequentialGroup().add(maleRB).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(femaleRB))).addContainerGap(99,Short.MAX_VALUE)).add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(createAvatarPanelLayout.createSequentialGroup().add(17,17,17).add(jLabel1).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(avatarNameTF,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,251,Short.MAX_VALUE).add(8,8,8))));
  createAvatarPanelLayout.setVerticalGroup(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(createAvatarPanelLayout.createSequentialGroup().add(38,38,38).add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(maleRB).add(jLabel4).add(femaleRB)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(randomizeB).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(addB).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(createAvatarPanelLayout.createSequentialGroup().add(4,4,4).add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel1).add(avatarNameTF,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap(105,Short.MAX_VALUE))));
  org.jdesktop.layout.GroupLayout jPanel1Layout=new org.jdesktop.layout.GroupLayout(jPanel1);
  jPanel1.setLayout(jPanel1Layout);
  jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jPanel1Layout.createSequentialGroup().addContainerGap().add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(chooseAvatarPanel,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(createAvatarPanel,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jPanel1Layout.createSequentialGroup().addContainerGap().add(chooseAvatarPanel,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,263,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(createAvatarPanel,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  org.jdesktop.layout.GroupLayout layout=new org.jdesktop.layout.GroupLayout(getContentPane());
  getContentPane().setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(jPanel1,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(jPanel1,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  pack();
}","/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  genderGrou=new javax.swing.ButtonGroup();
  customiseFrame=new javax.swing.JFrame();
  jPanel2=new javax.swing.JPanel();
  scrollPane=new javax.swing.JScrollPane();
  jPanel3=new javax.swing.JPanel();
  saveB=new javax.swing.JButton();
  jPanel1=new javax.swing.JPanel();
  chooseAvatarPanel=new javax.swing.JPanel();
  avatarListScrollPane=new javax.swing.JScrollPane();
  avatarList=new javax.swing.JList();
  deleteB=new javax.swing.JButton();
  viewB=new javax.swing.JButton();
  defaultAvatarTF=new javax.swing.JTextField();
  jLabel2=new javax.swing.JLabel();
  customiseB=new javax.swing.JButton();
  createAvatarPanel=new javax.swing.JPanel();
  jLabel1=new javax.swing.JLabel();
  maleRB=new javax.swing.JRadioButton();
  femaleRB=new javax.swing.JRadioButton();
  addB=new javax.swing.JButton();
  avatarNameTF=new javax.swing.JTextField();
  randomizeB=new javax.swing.JButton();
  jLabel4=new javax.swing.JLabel();
  jPanel2.setLayout(new java.awt.BorderLayout());
  jPanel2.add(scrollPane,java.awt.BorderLayout.CENTER);
  customiseFrame.getContentPane().add(jPanel2,java.awt.BorderLayout.CENTER);
  saveB.setText(bundle.getString(""String_Node_Str""));
  org.jdesktop.layout.GroupLayout jPanel3Layout=new org.jdesktop.layout.GroupLayout(jPanel3);
  jPanel3.setLayout(jPanel3Layout);
  jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,jPanel3Layout.createSequentialGroup().addContainerGap(177,Short.MAX_VALUE).add(saveB).add(148,148,148)));
  jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,jPanel3Layout.createSequentialGroup().addContainerGap(65,Short.MAX_VALUE).add(saveB).addContainerGap()));
  customiseFrame.getContentPane().add(jPanel3,java.awt.BorderLayout.SOUTH);
  setTitle(bundle.getString(""String_Node_Str""));
  chooseAvatarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""String_Node_Str""));
  avatarList.setModel(new DefaultListModel());
  avatarList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
  avatarList.addListSelectionListener(new javax.swing.event.ListSelectionListener(){
    public void valueChanged(    javax.swing.event.ListSelectionEvent evt){
      avatarListValueChanged(evt);
    }
  }
);
  avatarListScrollPane.setViewportView(avatarList);
  deleteB.setText(bundle.getString(""String_Node_Str""));
  deleteB.setToolTipText(bundle.getString(""String_Node_Str""));
  deleteB.setEnabled(false);
  deleteB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      deleteBActionPerformed(evt);
    }
  }
);
  viewB.setText(bundle.getString(""String_Node_Str""));
  viewB.setToolTipText(bundle.getString(""String_Node_Str""));
  viewB.setEnabled(false);
  viewB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      viewBActionPerformed(evt);
    }
  }
);
  jLabel2.setText(bundle.getString(""String_Node_Str""));
  customiseB.setText(bundle.getString(""String_Node_Str""));
  customiseB.setEnabled(false);
  customiseB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      customiseBActionPerformed(evt);
    }
  }
);
  org.jdesktop.layout.GroupLayout chooseAvatarPanelLayout=new org.jdesktop.layout.GroupLayout(chooseAvatarPanel);
  chooseAvatarPanel.setLayout(chooseAvatarPanelLayout);
  chooseAvatarPanelLayout.setHorizontalGroup(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(chooseAvatarPanelLayout.createSequentialGroup().add(14,14,14).add(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(chooseAvatarPanelLayout.createSequentialGroup().add(avatarListScrollPane,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,159,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(6,6,6).add(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(customiseB).add(viewB).add(deleteB))).add(chooseAvatarPanelLayout.createSequentialGroup().add(jLabel2).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(defaultAvatarTF,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,160,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))).addContainerGap(170,Short.MAX_VALUE)));
  chooseAvatarPanelLayout.linkSize(new java.awt.Component[]{deleteB,viewB},org.jdesktop.layout.GroupLayout.HORIZONTAL);
  chooseAvatarPanelLayout.setVerticalGroup(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(chooseAvatarPanelLayout.createSequentialGroup().addContainerGap().add(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(avatarListScrollPane,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,186,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(chooseAvatarPanelLayout.createSequentialGroup().add(viewB).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(deleteB).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(customiseB))).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel2).add(defaultAvatarTF,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(21,21,21)));
  createAvatarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""String_Node_Str""));
  jLabel1.setText(bundle.getString(""String_Node_Str""));
  genderGrou.add(maleRB);
  maleRB.setSelected(true);
  maleRB.setText(bundle.getString(""String_Node_Str""));
  genderGrou.add(femaleRB);
  femaleRB.setText(bundle.getString(""String_Node_Str""));
  addB.setText(bundle.getString(""String_Node_Str""));
  addB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      addBActionPerformed(evt);
    }
  }
);
  avatarNameTF.setText(bundle.getString(""String_Node_Str""));
  randomizeB.setText(bundle.getString(""String_Node_Str""));
  randomizeB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      randomizeBActionPerformed(evt);
    }
  }
);
  jLabel4.setText(bundle.getString(""String_Node_Str""));
  org.jdesktop.layout.GroupLayout createAvatarPanelLayout=new org.jdesktop.layout.GroupLayout(createAvatarPanel);
  createAvatarPanel.setLayout(createAvatarPanelLayout);
  createAvatarPanelLayout.setHorizontalGroup(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(createAvatarPanelLayout.createSequentialGroup().add(54,54,54).add(jLabel4).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(addB).add(randomizeB).add(createAvatarPanelLayout.createSequentialGroup().add(maleRB).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(femaleRB))).addContainerGap(102,Short.MAX_VALUE)).add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(createAvatarPanelLayout.createSequentialGroup().add(17,17,17).add(jLabel1).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(avatarNameTF,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,251,Short.MAX_VALUE).add(8,8,8))));
  createAvatarPanelLayout.setVerticalGroup(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(createAvatarPanelLayout.createSequentialGroup().add(38,38,38).add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(maleRB).add(jLabel4).add(femaleRB)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(randomizeB).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(addB).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(createAvatarPanelLayout.createSequentialGroup().add(4,4,4).add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel1).add(avatarNameTF,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap(105,Short.MAX_VALUE))));
  org.jdesktop.layout.GroupLayout jPanel1Layout=new org.jdesktop.layout.GroupLayout(jPanel1);
  jPanel1.setLayout(jPanel1Layout);
  jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jPanel1Layout.createSequentialGroup().addContainerGap().add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(chooseAvatarPanel,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(createAvatarPanel,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jPanel1Layout.createSequentialGroup().addContainerGap().add(chooseAvatarPanel,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,263,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(createAvatarPanel,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  org.jdesktop.layout.GroupLayout layout=new org.jdesktop.layout.GroupLayout(getContentPane());
  getContentPane().setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(jPanel1,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(jPanel1,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  pack();
}"
46192,"protected Entity createAvatarEntities(WorldManager wm){
  PMatrix origin=new PMatrix();
  CellTransform transform=cell.getLocalTransform();
  origin.setTranslation(transform.getTranslation(null));
  origin.setRotation(transform.getRotation(null));
  WonderlandSession session=cell.getCellCache().getSession();
  ServerSessionManager manager=session.getSessionManager();
  String serverHostAndPort=manager.getServerNameAndPort();
  String baseURL=""String_Node_Str"" + serverHostAndPort + ""String_Node_Str"";
  URL avatarConfigURL=cell.getComponent(AvatarConfigComponent.class).getAvatarConfigURL();
  LoadingInfo.startedLoading(cell.getCellID(),username);
  try {
    if (avatarConfigURL == null) {
      if (avatarCharacter == null) {
        CharacterAttributes attributes=new MaleAvatarAttributes(username,false);
        attributes.setUseSimpleStaticModel(true,null);
        attributes.setBaseURL(baseURL);
        avatarCharacter=new WlAvatarCharacter(attributes,wm);
        URL url=new URL(baseURL + ""String_Node_Str"");
        ResourceLocator resourceLocator=new RelativeResourceLocator(url);
        ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
        Spatial placeHolder=(Spatial)BinaryImporter.getInstance().load(url);
        ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
        avatarCharacter.getJScene().getExternalKidsRoot().attachChild(placeHolder);
      }
    }
 else {
      avatarCharacter=new WlAvatarCharacter(avatarConfigURL,wm,""String_Node_Str"" + serverHostAndPort + ""String_Node_Str"");
    }
    avatarCharacter.getModelInst().getTransform().getLocalMatrix(true).set(origin);
    Node external=avatarCharacter.getJScene().getExternalKidsRoot();
    NameTagComponent nameTagComp=new NameTagComponent(cell,username,2);
    nameTag=nameTagComp.getNameTagNode();
    external.attachChild(nameTag);
    external.setModelBound(new BoundingSphere());
    external.updateModelBound();
  }
 catch (  Exception e) {
    String badURL=null;
    if (avatarConfigURL != null)     badURL=avatarConfigURL.toExternalForm();
    Logger.getLogger(AvatarImiJME.class.getName()).log(Level.SEVERE,""String_Node_Str"" + badURL,e);
  }
 finally {
    LoadingInfo.finishedLoading(cell.getCellID(),username);
  }
  return avatarCharacter;
}","protected Entity createAvatarEntities(WorldManager wm){
  PMatrix origin=new PMatrix();
  CellTransform transform=cell.getLocalTransform();
  origin.setTranslation(transform.getTranslation(null));
  origin.setRotation(transform.getRotation(null));
  WonderlandSession session=cell.getCellCache().getSession();
  ServerSessionManager manager=session.getSessionManager();
  String serverHostAndPort=manager.getServerNameAndPort();
  String baseURL=""String_Node_Str"" + serverHostAndPort + ""String_Node_Str"";
  URL avatarConfigURL=cell.getComponent(AvatarConfigComponent.class).getAvatarConfigURL();
  LoadingInfo.startedLoading(cell.getCellID(),username);
  try {
    if (avatarConfigURL == null) {
      if (avatarCharacter == null) {
        CharacterAttributes attributes=new MaleAvatarAttributes(username,false);
        attributes.setUseSimpleStaticModel(true,null);
        attributes.setBaseURL(baseURL);
        avatarCharacter=new WlAvatarCharacter(attributes,wm);
        URL url=new URL(baseURL + ""String_Node_Str"");
        ResourceLocator resourceLocator=new RelativeResourceLocator(url);
        ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
        Spatial placeHolder=(Spatial)BinaryImporter.getInstance().load(url);
        ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
        avatarCharacter.getJScene().getExternalKidsRoot().attachChild(placeHolder);
      }
    }
 else {
      avatarCharacter=new WlAvatarCharacter(avatarConfigURL,wm,""String_Node_Str"" + serverHostAndPort + ""String_Node_Str"");
    }
    avatarCharacter.getModelInst().getTransform().getLocalMatrix(true).set(origin);
    Node external=avatarCharacter.getJScene().getExternalKidsRoot();
    ZBufferState zbuf=(ZBufferState)ClientContextJME.getWorldManager().getRenderManager().createRendererState(RenderState.RS_ZBUFFER);
    zbuf.setEnabled(true);
    zbuf.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);
    external.setRenderState(zbuf);
    NameTagComponent nameTagComp=new NameTagComponent(cell,username,2);
    nameTag=nameTagComp.getNameTagNode();
    external.attachChild(nameTag);
    external.setModelBound(new BoundingSphere());
    external.updateModelBound();
  }
 catch (  Exception e) {
    String badURL=null;
    if (avatarConfigURL != null)     badURL=avatarConfigURL.toExternalForm();
    Logger.getLogger(AvatarImiJME.class.getName()).log(Level.SEVERE,""String_Node_Str"" + badURL,e);
  }
 finally {
    LoadingInfo.finishedLoading(cell.getCellID(),username);
  }
  return avatarCharacter;
}"
46193,"@Override public void initialize(ServerSessionManager loginManager){
  this.loginManager=loginManager;
  String serverHostAndPort=loginManager.getServerNameAndPort();
  this.baseURL=""String_Node_Str"" + serverHostAndPort + ""String_Node_Str"";
  WorldManager worldManager=ClientContextJME.getWorldManager();
  worldManager.addUserData(Repository.class,new Repository(worldManager,new WonderlandAvatarCache(ClientContext.getUserDirectory(bundle.getString(""String_Node_Str"")))));
  loginManager.addLifecycleListener(lifecycleListener);
  avatarControlsMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarControlsMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (testPanelRef == null || testPanelRef.get() == null) {
        AvatarTestPanel test=new AvatarTestPanel();
        JFrame f=new JFrame(bundle.getString(""String_Node_Str""));
        f.getContentPane().add(test);
        f.pack();
        f.setVisible(true);
        f.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        test.setAvatarCharactar(curAvatar.getAvatarCharacter());
        testPanelRef=new WeakReference(test);
      }
 else {
        SwingUtilities.getRoot(testPanelRef.get().getParent()).setVisible(true);
      }
    }
  }
);
  avatarMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ViewCell cell=ClientContextJME.getViewManager().getPrimaryViewCell();
      if (cell instanceof AvatarCell) {
        AvatarImiJME rend=(AvatarImiJME)((AvatarCell)cell).getCellRenderer(ClientContext.getRendererType());
        AvatarConfigFrame f=new AvatarConfigFrame(rend);
        f.setVisible(true);
      }
    }
  }
);
  avatarSettingsMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarSettingsMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      AvatarInstrumentation in=new AvatarInstrumentation(instrumentation);
      in.setVisible(true);
    }
  }
);
  startingLocationMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  startingLocationMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      GameContext context=curAvatar.getAvatarCharacter().getContext();
      CharacterSteeringHelm helm=curAvatar.getAvatarCharacter().getContext().getSteering();
      helm.addTaskToTop(new GoTo(new Vector3f(0,0,0),context));
      helm.setEnable(true);
    }
  }
);
  instrumentation=new DefaultInstrumentation(ClientContextJME.getWorldManager());
  ClientContextJME.getAvatarRenderManager().registerRenderer(loginManager,AvatarImiJME.class,AvatarControls.class);
  super.initialize(loginManager);
}","@Override public void initialize(ServerSessionManager loginManager){
  this.loginManager=loginManager;
  String serverHostAndPort=loginManager.getServerNameAndPort();
  this.baseURL=""String_Node_Str"" + serverHostAndPort + ""String_Node_Str"";
  WorldManager worldManager=ClientContextJME.getWorldManager();
  worldManager.addUserData(Repository.class,new Repository(worldManager,new WonderlandAvatarCache(baseURL,ClientContext.getUserDirectory(bundle.getString(""String_Node_Str"")))));
  loginManager.addLifecycleListener(lifecycleListener);
  avatarControlsMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarControlsMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (testPanelRef == null || testPanelRef.get() == null) {
        AvatarTestPanel test=new AvatarTestPanel();
        JFrame f=new JFrame(bundle.getString(""String_Node_Str""));
        f.getContentPane().add(test);
        f.pack();
        f.setVisible(true);
        f.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        test.setAvatarCharactar(curAvatar.getAvatarCharacter());
        testPanelRef=new WeakReference(test);
      }
 else {
        SwingUtilities.getRoot(testPanelRef.get().getParent()).setVisible(true);
      }
    }
  }
);
  avatarMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ViewCell cell=ClientContextJME.getViewManager().getPrimaryViewCell();
      if (cell instanceof AvatarCell) {
        AvatarImiJME rend=(AvatarImiJME)((AvatarCell)cell).getCellRenderer(ClientContext.getRendererType());
        AvatarConfigFrame f=new AvatarConfigFrame(rend);
        f.setVisible(true);
      }
    }
  }
);
  avatarSettingsMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarSettingsMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      AvatarInstrumentation in=new AvatarInstrumentation(instrumentation);
      in.setVisible(true);
    }
  }
);
  startingLocationMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  startingLocationMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      GameContext context=curAvatar.getAvatarCharacter().getContext();
      CharacterSteeringHelm helm=curAvatar.getAvatarCharacter().getContext().getSteering();
      helm.addTaskToTop(new GoTo(new Vector3f(0,0,0),context));
      helm.setEnable(true);
    }
  }
);
  instrumentation=new DefaultInstrumentation(ClientContextJME.getWorldManager());
  ClientContextJME.getAvatarRenderManager().registerRenderer(loginManager,AvatarImiJME.class,AvatarControls.class);
  super.initialize(loginManager);
}"
46194,"/** 
 * Construct a new cache using the specified folder.
 * @param cacheFolder
 */
public WonderlandAvatarCache(File cacheFolder){
  if (cacheFolder == null)   throw new ExceptionInInitializerError(""String_Node_Str"");
 else   this.cacheFolder=cacheFolder;
}","/** 
 * Construct a new cache using the specified folder.
 * @param cacheFolder
 */
public WonderlandAvatarCache(String baseURL,File cacheFolder){
  this.baseURL=baseURL;
  if (cacheFolder == null) {
    throw new ExceptionInInitializerError(""String_Node_Str"");
  }
 else {
    this.cacheFolder=cacheFolder;
  }
}"
46195,"private File urlToCacheFile(URL location){
  File localFile=null;
  if (location.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    try {
      localFile=new File(location.toURI());
    }
 catch (    URISyntaxException ex) {
      logger.severe(""String_Node_Str"");
    }
  }
  String urlString=location.toString();
  int assetsIndex=urlString.indexOf(""String_Node_Str"");
  if (assetsIndex != 1)   urlString=urlString.substring(assetsIndex + 7);
  String hashFileName=MD5HashUtils.getStringFromHash(urlString.getBytes());
  File result=new File(cacheFolder,hashFileName);
  if (localFile != null) {
    if (localFile.lastModified() > result.lastModified())     result.delete();
  }
  System.err.println(""String_Node_Str"" + location.toExternalForm() + ""String_Node_Str""+ result);
  return result;
}","private File urlToCacheFile(URL location){
  File localFile=null;
  if (location.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    try {
      localFile=new File(location.toURI());
    }
 catch (    URISyntaxException ex) {
      logger.severe(""String_Node_Str"");
    }
  }
  String urlString=location.toString();
  int assetsIndex=urlString.indexOf(""String_Node_Str"");
  if (assetsIndex != 1) {
    urlString=urlString.substring(assetsIndex + 7);
  }
  String hashFileName=MD5HashUtils.getStringFromHash(urlString.getBytes());
  File result=new File(cacheFolder,hashFileName);
  if (localFile != null) {
    if (localFile.lastModified() > result.lastModified()) {
      result.delete();
    }
  }
  System.err.println(""String_Node_Str"" + location.toExternalForm() + ""String_Node_Str""+ result);
  return result;
}"
46196,"@Override public InputStream getStreamToResource(URL location){
  File cacheFile=urlToCacheFile(location);
  InputStream result=null;
  if (cacheFile != null && cacheFile.exists()) {
    try {
      result=new FileInputStream(cacheFile);
    }
 catch (    FileNotFoundException ex) {
      logger.severe(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return result;
}","@Override public InputStream getStreamToResource(URL location){
  File cacheFile=urlToCacheFile(location);
  InputStream result=null;
  if (cacheFile != null && cacheFile.exists()) {
    System.err.println(""String_Node_Str"" + location.toExternalForm());
    try {
      result=new FileInputStream(cacheFile);
    }
 catch (    FileNotFoundException ex) {
      logger.severe(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return result;
}"
46197,"public Texture loadTexture(URL location){
  return TextureManager.loadTexture(location);
}","public Texture loadTexture(URL location){
  if (location.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    String relativePath=location.toExternalForm();
    int assetsIndex=relativePath.indexOf(""String_Node_Str"");
    if (assetsIndex != -1) {
      relativePath=relativePath.substring(assetsIndex);
    }
    URL localURL=null;
    try {
      localURL=new URL(baseURL + relativePath);
      return TextureManager.loadTexture(localURL);
    }
 catch (    MalformedURLException ex) {
      logger.warning(""String_Node_Str"" + baseURL + relativePath);
    }
  }
  return TextureManager.loadTexture(location);
}"
46198,"@Override public boolean clearCache(){
  for (  File file : cacheFolder.listFiles())   file.delete();
  if (cacheFolder.listFiles().length == 0)   return true;
 else   return false;
}","@Override public boolean clearCache(){
  for (  File file : cacheFolder.listFiles()) {
    file.delete();
  }
  if (cacheFolder.listFiles().length == 0) {
    return true;
  }
 else {
    return false;
  }
}"
46199,"@Override protected void activate(){
  ContentBrowserManager manager=ContentBrowserManager.getContentBrowserManager();
  defaultBrowser=new ContentBrowserJDialog(getSessionManager());
  manager.setDefaultContentBrowser(defaultBrowser);
  JmeClientMain.getFrame().addToToolsMenu(oldBrowserItem,5);
  JmeClientMain.getFrame().addToToolsMenu(newBrowserItem,6);
}","@Override protected void activate(){
  ContentBrowserManager manager=ContentBrowserManager.getContentBrowserManager();
  defaultBrowser=new ContentBrowserJDialog(getSessionManager());
  manager.setDefaultContentBrowser(defaultBrowser);
  JmeClientMain.getFrame().addToToolsMenu(newBrowserItem,6);
}"
46200,"@Override public void initialize(final ServerSessionManager loginInfo){
  Action launchAction=new AbstractAction(""String_Node_Str""){
    public synchronized void actionPerformed(    ActionEvent e){
      if (frame == null) {
        ContentRepositoryRegistry registry=ContentRepositoryRegistry.getInstance();
        ContentRepository repo=registry.getRepository(loginInfo);
        frame=new BrowserFrame(repo);
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          frame.setVisible(true);
        }
      }
);
    }
  }
;
  oldBrowserItem=new JMenuItem(launchAction);
  newBrowserItem=new JMenuItem(""String_Node_Str"");
  newBrowserItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ContentBrowserJDialog contentBrowserFrame;
      if (browserDialogRef == null || browserDialogRef.get() == null) {
        contentBrowserFrame=new ContentBrowserJDialog(loginInfo);
        contentBrowserFrame.setModal(false);
        contentBrowserFrame.setActionName(BrowserAction.OK_ACTION,""String_Node_Str"");
        contentBrowserFrame.setActionName(BrowserAction.CANCEL_ACTION,""String_Node_Str"");
        contentBrowserFrame.addContentBrowserListener(new ContentBrowserListener(){
          public void okAction(          String uri){
            int index=uri.lastIndexOf(""String_Node_Str"");
            if (index == -1) {
              logger.warning(""String_Node_Str"" + uri);
              return;
            }
            String extension=uri.substring(index + 1);
            CellRegistry registry=CellRegistry.getCellRegistry();
            Set<CellFactorySPI> factories=registry.getCellFactoriesByExtension(extension);
            if (factories == null) {
              logger.warning(""String_Node_Str"" + extension);
            }
            CellFactorySPI factory=factories.iterator().next();
            Properties props=new Properties();
            props.put(""String_Node_Str"",uri);
            CellServerState state=factory.getDefaultCellServerState(props);
            try {
              CellUtils.createCell(state,5.0f);
            }
 catch (            CellCreationException excp) {
              logger.log(Level.WARNING,""String_Node_Str"" + uri,excp);
            }
          }
          public void cancelAction(){
          }
        }
);
        browserDialogRef=new WeakReference(contentBrowserFrame);
      }
 else {
        contentBrowserFrame=browserDialogRef.get();
      }
      if (contentBrowserFrame.isVisible() == false) {
        contentBrowserFrame.setVisible(true);
      }
    }
  }
);
  super.initialize(loginInfo);
}","@Override public void initialize(final ServerSessionManager loginInfo){
  newBrowserItem=new JMenuItem(""String_Node_Str"");
  newBrowserItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ContentBrowserJDialog contentBrowserFrame;
      if (browserDialogRef == null || browserDialogRef.get() == null) {
        contentBrowserFrame=new ContentBrowserJDialog(loginInfo);
        contentBrowserFrame.setModal(false);
        contentBrowserFrame.setActionName(BrowserAction.OK_ACTION,""String_Node_Str"");
        contentBrowserFrame.setActionName(BrowserAction.CANCEL_ACTION,""String_Node_Str"");
        contentBrowserFrame.addContentBrowserListener(new ContentBrowserListener(){
          public void okAction(          String uri){
            int index=uri.lastIndexOf(""String_Node_Str"");
            if (index == -1) {
              logger.warning(""String_Node_Str"" + uri);
              return;
            }
            String extension=uri.substring(index + 1);
            CellRegistry registry=CellRegistry.getCellRegistry();
            Set<CellFactorySPI> factories=registry.getCellFactoriesByExtension(extension);
            if (factories == null) {
              logger.warning(""String_Node_Str"" + extension);
            }
            CellFactorySPI factory=factories.iterator().next();
            Properties props=new Properties();
            props.put(""String_Node_Str"",uri);
            CellServerState state=factory.getDefaultCellServerState(props);
            try {
              CellUtils.createCell(state,5.0f);
            }
 catch (            CellCreationException excp) {
              logger.log(Level.WARNING,""String_Node_Str"" + uri,excp);
            }
          }
          public void cancelAction(){
          }
        }
);
        browserDialogRef=new WeakReference(contentBrowserFrame);
      }
 else {
        contentBrowserFrame=browserDialogRef.get();
      }
      if (contentBrowserFrame.isVisible() == false) {
        contentBrowserFrame.setVisible(true);
      }
    }
  }
);
  super.initialize(loginInfo);
}"
46201,"@Override protected void deactivate(){
  ContentBrowserManager manager=ContentBrowserManager.getContentBrowserManager();
  if (defaultBrowser == manager.getDefaultContentBrowser()) {
    manager.setDefaultContentBrowser(null);
    defaultBrowser=null;
  }
  JmeClientMain.getFrame().removeFromToolsMenu(oldBrowserItem);
  JmeClientMain.getFrame().removeFromToolsMenu(newBrowserItem);
}","@Override protected void deactivate(){
  ContentBrowserManager manager=ContentBrowserManager.getContentBrowserManager();
  if (defaultBrowser == manager.getDefaultContentBrowser()) {
    manager.setDefaultContentBrowser(null);
    defaultBrowser=null;
  }
  JmeClientMain.getFrame().removeFromToolsMenu(newBrowserItem);
}"
46202,"private void syncImpl(){
  ArrayList<AvatarConfigFile> uploadList=new ArrayList();
  ArrayList<AvatarConfigFile> downloadList=new ArrayList();
  try {
    List<ContentNode> avatarList=avatarsDir.getChildren();
    for (    ContentNode a : avatarList) {
      if (a instanceof ContentResource) {
        System.err.println(""String_Node_Str"" + ((ContentResource)a).getURL());
        AvatarConfigFile serverAvatar=new AvatarConfigFile((ContentResource)a);
        AvatarConfigFile previous=serverAvatars.put(serverAvatar.avatarName,serverAvatar);
        if (previous != null && previous.version > serverAvatar.version) {
          System.err.println(""String_Node_Str"" + previous.resource.getURL());
          serverAvatars.put(previous.avatarName,previous);
          logger.fine(""String_Node_Str"" + serverAvatar.getFilename());
          avatarsDir.removeChild(serverAvatar.getFilename());
        }
 else {
          System.err.println(""String_Node_Str"" + serverAvatar.resource.getURL());
        }
      }
    }
    HashMap<String,AvatarConfigFile> tmpServerAvatars=(HashMap<String,AvatarConfigFile>)serverAvatars.clone();
synchronized (localAvatars) {
      for (      AvatarConfigFile a : localAvatars.values()) {
        AvatarConfigFile serverVersion=tmpServerAvatars.get(a.avatarName);
        logger.fine(""String_Node_Str"" + serverVersion + ""String_Node_Str""+ a);
        if (serverVersion == null || serverVersion.version < a.version) {
          uploadList.add(a);
          tmpServerAvatars.remove(a.avatarName);
        }
 else         if (serverVersion.version > a.version) {
          downloadList.add(a);
          tmpServerAvatars.remove(a.avatarName);
        }
 else         if (serverVersion.version == a.version) {
          tmpServerAvatars.remove(a.avatarName);
          System.err.println(""String_Node_Str"" + serverVersion.resource.getURL());
          serverAvatars.put(serverVersion.avatarName,serverVersion);
        }
      }
    }
    for (    AvatarConfigFile a : tmpServerAvatars.values()) {
      downloadList.add(a);
    }
    for (    AvatarConfigFile a : uploadList) {
      try {
        uploadFileImpl(a);
      }
 catch (      IOException ex) {
        Logger.getLogger(AvatarConfigManager.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
    for (    AvatarConfigFile a : downloadList) {
      try {
        ContentResource localFile=(ContentResource)localAvatarsDir.createChild(a.resource.getName(),Type.RESOURCE);
        localFile.put(new BufferedInputStream(a.resource.getURL().openStream()));
      }
 catch (      IOException ex) {
        Logger.getLogger(AvatarConfigManager.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
synchronized (localAvatars) {
      for (      AvatarConfigFile a : downloadList) {
        localAvatars.put(a.avatarName,a);
        notifyListeners(true,a.avatarName);
      }
    }
  }
 catch (  ContentRepositoryException ex) {
    Logger.getLogger(AvatarConfigManager.class.getName()).log(Level.SEVERE,null,ex);
  }
}","private void syncImpl(){
  ArrayList<AvatarConfigFile> uploadList=new ArrayList();
  ArrayList<AvatarConfigFile> downloadList=new ArrayList();
  try {
    List<ContentNode> avatarList=avatarsDir.getChildren();
    for (    ContentNode a : avatarList) {
      if (a instanceof ContentResource) {
        logger.fine(""String_Node_Str"" + ((ContentResource)a).getURL());
        AvatarConfigFile serverAvatar=new AvatarConfigFile((ContentResource)a);
        AvatarConfigFile previous=serverAvatars.put(serverAvatar.avatarName,serverAvatar);
        if (previous != null && previous.version > serverAvatar.version) {
          serverAvatars.put(previous.avatarName,previous);
          logger.fine(""String_Node_Str"" + serverAvatar.getFilename());
          avatarsDir.removeChild(serverAvatar.getFilename());
        }
 else {
        }
      }
    }
    HashMap<String,AvatarConfigFile> tmpServerAvatars=(HashMap<String,AvatarConfigFile>)serverAvatars.clone();
synchronized (localAvatars) {
      for (      AvatarConfigFile a : localAvatars.values()) {
        AvatarConfigFile serverVersion=tmpServerAvatars.get(a.avatarName);
        logger.fine(""String_Node_Str"" + serverVersion + ""String_Node_Str""+ a);
        if (serverVersion == null || serverVersion.version < a.version) {
          uploadList.add(a);
          tmpServerAvatars.remove(a.avatarName);
        }
 else         if (serverVersion.version > a.version) {
          downloadList.add(a);
          tmpServerAvatars.remove(a.avatarName);
        }
 else         if (serverVersion.version == a.version) {
          tmpServerAvatars.remove(a.avatarName);
          serverAvatars.put(serverVersion.avatarName,serverVersion);
        }
      }
    }
    for (    AvatarConfigFile a : tmpServerAvatars.values()) {
      downloadList.add(a);
    }
    for (    AvatarConfigFile a : uploadList) {
      try {
        uploadFileImpl(a);
      }
 catch (      IOException ex) {
        Logger.getLogger(AvatarConfigManager.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
    for (    AvatarConfigFile a : downloadList) {
      try {
        ContentResource localFile=(ContentResource)localAvatarsDir.createChild(a.resource.getName(),Type.RESOURCE);
        localFile.put(new BufferedInputStream(a.resource.getURL().openStream()));
      }
 catch (      IOException ex) {
        Logger.getLogger(AvatarConfigManager.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
synchronized (localAvatars) {
      for (      AvatarConfigFile a : downloadList) {
        localAvatars.put(a.avatarName,a);
        notifyListeners(true,a.avatarName);
      }
    }
  }
 catch (  ContentRepositoryException ex) {
    Logger.getLogger(AvatarConfigManager.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
46203,"public ServerSyncThread(ServerSessionManager session) throws ContentRepositoryException {
  super(ThreadManager.getThreadGroup(),""String_Node_Str"");
  logger.info(""String_Node_Str"" + this);
  repository=ContentRepositoryRegistry.getInstance().getRepository(session);
  System.err.println(""String_Node_Str"" + repository);
  ContentCollection userDir=repository.getUserRoot(true);
  avatarsDir=(ContentCollection)userDir.getChild(""String_Node_Str"");
  if (avatarsDir == null) {
    avatarsDir=(ContentCollection)userDir.createChild(""String_Node_Str"",Type.COLLECTION);
  }
synchronized (avatarConfigServers) {
    avatarConfigServers.put(session,this);
  }
  session.getPrimarySession().addSessionStatusListener(new SessionStatusListener(){
    public void sessionStatusChanged(    WonderlandSession session,    Status status){
      if (status == Status.DISCONNECTED) {
synchronized (avatarConfigServers) {
          avatarConfigServers.remove(session);
          connected=false;
        }
      }
    }
  }
);
  this.start();
}","public ServerSyncThread(ServerSessionManager session) throws ContentRepositoryException {
  super(ThreadManager.getThreadGroup(),""String_Node_Str"");
  logger.info(""String_Node_Str"" + this);
  repository=ContentRepositoryRegistry.getInstance().getRepository(session);
  ContentCollection userDir=repository.getUserRoot(true);
  avatarsDir=(ContentCollection)userDir.getChild(""String_Node_Str"");
  if (avatarsDir == null) {
    avatarsDir=(ContentCollection)userDir.createChild(""String_Node_Str"",Type.COLLECTION);
  }
synchronized (avatarConfigServers) {
    avatarConfigServers.put(session,this);
  }
  session.getPrimarySession().addSessionStatusListener(new SessionStatusListener(){
    public void sessionStatusChanged(    WonderlandSession session,    Status status){
      if (status == Status.DISCONNECTED) {
synchronized (avatarConfigServers) {
          avatarConfigServers.remove(session);
          connected=false;
        }
      }
    }
  }
);
  this.start();
}"
46204,"private void getURLImpl(Job job){
  System.err.println(""String_Node_Str"" + serverAvatars.size() + ""String_Node_Str""+ job.filename);
  for (  AvatarConfigFile f : serverAvatars.values())   System.err.println(f);
  AvatarConfigFile r=serverAvatars.get(job.filename);
  if (r == null) {
    logger.log(Level.SEVERE,""String_Node_Str"" + job.filename);
    job.returnURL(null);
  }
  try {
    System.err.println(""String_Node_Str"" + r);
    System.err.println(r.avatarName + ""String_Node_Str"" + r.resource.getURL());
    job.returnURL(r.resource.getURL());
  }
 catch (  ContentRepositoryException ex) {
    Logger.getLogger(AvatarConfigManager.class.getName()).log(Level.WARNING,""String_Node_Str"" + job.filename,ex);
  }
}","private void getURLImpl(Job job){
  AvatarConfigFile r=serverAvatars.get(job.filename);
  if (r == null) {
    logger.log(Level.SEVERE,""String_Node_Str"" + job.filename);
    job.returnURL(null);
  }
 else {
    try {
      logger.fine(""String_Node_Str"" + r + ""String_Node_Str""+ r.avatarName+ ""String_Node_Str""+ r.resource.getURL());
      job.returnURL(r.resource.getURL());
    }
 catch (    ContentRepositoryException ex) {
      Logger.getLogger(AvatarConfigManager.class.getName()).log(Level.WARNING,""String_Node_Str"" + job.filename,ex);
    }
  }
}"
46205,"/** 
 * Returns the details for this server
 */
@GET public Response getServerDetails(){
  ServerDetails out=ServerInfo.getServerDetails().clone();
  out.setServerURL(getServerURL());
  try {
    ResponseBuilder rb=Response.ok(out);
    return rb.build();
  }
 catch (  Exception excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    ResponseBuilder rb=Response.status(Response.Status.BAD_REQUEST);
    return rb.build();
  }
}","/** 
 * Returns the details for this server
 */
@GET public Response getServerDetails(){
  ServerDetails out=ServerInfo.getServerDetails().clone();
  try {
    ResponseBuilder rb=Response.ok(out);
    return rb.build();
  }
 catch (  Exception excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    ResponseBuilder rb=Response.status(Response.Status.BAD_REQUEST);
    return rb.build();
  }
}"
46206,"public void done(){
synchronized (detachedOrbList) {
    detachedOrbList.remove(orbCell);
    reorderDetachedOrbs();
    if (hostCell != null) {
      ArrayList<OrbCell> attachedOrbList=attachedOrbMap.get(hostCell);
      if (attachedOrbList != null) {
        attachedOrbList.remove(orbCell);
      }
    }
    reorderAttachedOrbs();
  }
  channelComp.removeMessageReceiver(OrbAttachMessage.class);
  channelComp.removeMessageReceiver(OrbChangeNameMessage.class);
  channelComp.removeMessageReceiver(OrbEndCallMessage.class);
  channelComp.removeMessageReceiver(OrbMuteCallMessage.class);
  channelComp.removeMessageReceiver(OrbSetVolumeMessage.class);
  channelComp.removeMessageReceiver(OrbSpeakingMessage.class);
  orbRootNode.detachChild(nameTag);
  nameTag.done();
  pm.removeSession(presenceInfo);
}","public void done(){
  if (done) {
    return;
  }
  done=true;
synchronized (detachedOrbList) {
    detachedOrbList.remove(orbCell);
    reorderDetachedOrbs();
    if (hostCell != null) {
      ArrayList<OrbCell> attachedOrbList=attachedOrbMap.get(hostCell);
      if (attachedOrbList != null) {
        attachedOrbList.remove(orbCell);
      }
    }
    reorderAttachedOrbs();
  }
  followMe.done();
  channelComp.removeMessageReceiver(OrbAttachMessage.class);
  channelComp.removeMessageReceiver(OrbChangeNameMessage.class);
  channelComp.removeMessageReceiver(OrbEndCallMessage.class);
  channelComp.removeMessageReceiver(OrbMuteCallMessage.class);
  channelComp.removeMessageReceiver(OrbSetVolumeMessage.class);
  channelComp.removeMessageReceiver(OrbSpeakingMessage.class);
  orbRootNode.detachChild(nameTag);
  nameTag.done();
  pm.removeSession(presenceInfo);
}"
46207,"public void processVoiceChatMessage(WonderlandClientSender sender,WonderlandClientID clientID,VoiceChatMessage message){
  String group=message.getGroup();
  if (message instanceof VoiceChatInfoRequestMessage) {
    sendVoiceChatInfo(sender,clientID,group);
    return;
  }
  if (message instanceof VoiceChatBusyMessage) {
    VoiceChatBusyMessage msg=(VoiceChatBusyMessage)message;
    CommsManager cm=CommsManagerFactory.getCommsManager();
    WonderlandClientID id=cm.getWonderlandClientID(msg.getCaller().clientID);
    if (id == null) {
      logger.warning(""String_Node_Str"" + msg.getCaller());
      return;
    }
    sendVoiceChatBusyMessage(sender,id,msg);
    return;
  }
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  AudioGroup audioGroup=vm.getAudioGroup(group);
  if (message instanceof VoiceChatLeaveMessage) {
    if (audioGroup == null) {
      logger.info(""String_Node_Str"");
      return;
    }
    VoiceChatLeaveMessage msg=(VoiceChatLeaveMessage)message;
    Player player=vm.getPlayer(msg.getCallee().callID);
    if (player == null) {
      logger.warning(""String_Node_Str"" + msg.getCallee());
      if (audioGroup.getNumberOfPlayers() == 0) {
        endVoiceChat(vm,audioGroup);
      }
      sender.send(msg);
      return;
    }
    removePlayerFromAudioGroup(audioGroup,player);
    if (audioGroup.getNumberOfPlayers() <= 1) {
      endVoiceChat(vm,audioGroup);
    }
    sender.send(msg);
    vm.dump(""String_Node_Str"");
    return;
  }
  if (message instanceof VoiceChatEndMessage) {
    if (audioGroup == null) {
      logger.info(""String_Node_Str"");
      return;
    }
    endVoiceChat(vm,audioGroup);
    vm.dump(""String_Node_Str"");
    return;
  }
  if (message instanceof VoiceChatJoinAcceptedMessage == true) {
    if (audioGroup == null) {
      logger.warning(""String_Node_Str"" + group + ""String_Node_Str"");
      return;
    }
    VoiceChatJoinAcceptedMessage msg=(VoiceChatJoinAcceptedMessage)message;
    addPlayerToAudioGroup(vm,audioGroup,msg.getCallee(),msg.getChatType());
    sender.send(msg);
    return;
  }
  if (message instanceof VoiceChatHoldMessage == true) {
    VoiceChatHoldMessage msg=(VoiceChatHoldMessage)message;
    if (audioGroup == null) {
      logger.warning(""String_Node_Str"" + group + ""String_Node_Str"");
      return;
    }
    Player player=vm.getPlayer(msg.getCallee().callID);
    if (player == null) {
      logger.warning(""String_Node_Str"" + msg.getCallee().callID);
      return;
    }
    AudioGroupPlayerInfo playerInfo=audioGroup.getPlayerInfo(player);
    if (playerInfo == null) {
      logger.warning(""String_Node_Str"" + player);
      return;
    }
    AudioGroup livePlayerAudioGroup=vm.getVoiceManagerParameters().livePlayerAudioGroup;
    AudioGroup stationaryPlayerAudioGroup=vm.getVoiceManagerParameters().stationaryPlayerAudioGroup;
    if (msg.isOnHold()) {
      playerInfo.isSpeaking=false;
      audioGroup.setSpeakingAttenuation(player,0);
      audioGroup.setListenAttenuation(player,0);
      livePlayerAudioGroup.setSpeakingAttenuation(player,AudioGroup.DEFAULT_SPEAKING_ATTENUATION);
      livePlayerAudioGroup.setListenAttenuation(player,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
      stationaryPlayerAudioGroup.setSpeakingAttenuation(player,AudioGroup.DEFAULT_SPEAKING_ATTENUATION);
      stationaryPlayerAudioGroup.setListenAttenuation(player,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
    }
 else {
      playerInfo.isSpeaking=true;
      audioGroup.setSpeakingAttenuation(player,AudioGroup.DEFAULT_SPEAKING_ATTENUATION);
      audioGroup.setListenAttenuation(player,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
      if (playerInfo.chatType.equals(ChatType.PUBLIC)) {
        livePlayerAudioGroup.setSpeakingAttenuation(player,AudioGroup.DEFAULT_SPEAKING_ATTENUATION);
        livePlayerAudioGroup.setListenAttenuation(player,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
        stationaryPlayerAudioGroup.setListenAttenuation(player,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
      }
 else {
        livePlayerAudioGroup.setSpeakingAttenuation(player,0);
        livePlayerAudioGroup.setListenAttenuation(player,AudioGroup.MINIMAL_LISTEN_ATTENUATION);
        stationaryPlayerAudioGroup.setListenAttenuation(player,AudioGroup.MINIMAL_LISTEN_ATTENUATION);
      }
    }
    sender.send(msg);
    return;
  }
  if (message instanceof VoiceChatJoinMessage == false) {
    logger.warning(""String_Node_Str"" + message);
    return;
  }
  VoiceChatJoinMessage msg=(VoiceChatJoinMessage)message;
  if (audioGroup == null) {
    AudioGroupSetup setup=new AudioGroupSetup();
    setup.spatializer=new FullVolumeSpatializer();
    setup.spatializer.setAttenuator(DefaultSpatializer.DEFAULT_MAXIMUM_VOLUME);
    setup.virtualPlayerListener=this;
    setup.audioGroupListener=this;
    audioGroup=vm.createAudioGroup(group,setup);
  }
  PresenceInfo[] calleeList=msg.getCalleeList();
  PresenceInfo caller=msg.getCaller();
  boolean added=addPlayerToAudioGroup(vm,audioGroup,caller,msg.getChatType());
  if (added) {
    sender.send(new VoiceChatJoinAcceptedMessage(group,caller,msg.getChatType()));
  }
  if (added == false && calleeList.length == 0) {
    endVoiceChat(vm,audioGroup);
    return;
  }
  logger.info(""String_Node_Str"" + group + ""String_Node_Str""+ caller+ ""String_Node_Str""+ msg.getPhoneNumber()+ ""String_Node_Str""+ msg.getName());
  for (int i=0; i < calleeList.length; i++) {
    PresenceInfo info=calleeList[i];
    CellID cellID=calleeList[i].cellID;
    logger.fine(""String_Node_Str"" + calleeList[i]);
    String callID=calleeList[i].callID;
    Player player=vm.getPlayer(callID);
    if (player == null) {
      logger.warning(""String_Node_Str"" + callID);
      continue;
    }
    AudioGroupPlayerInfo playerInfo=audioGroup.getPlayerInfo(player);
    if (playerInfo != null && sameChatType(playerInfo.chatType,msg.getChatType())) {
      logger.fine(""String_Node_Str"" + info + ""String_Node_Str""+ audioGroup);
      continue;
    }
    WonderlandClientID id=CommsManagerFactory.getCommsManager().getWonderlandClientID(info.clientID);
    if (id == null) {
      logger.warning(""String_Node_Str"" + info);
      continue;
    }
    Call call=player.getCall();
    if (call != null) {
      try {
        call.playTreatment(""String_Node_Str"");
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + e.getMessage());
      }
    }
    logger.info(""String_Node_Str"" + info + ""String_Node_Str""+ group+ ""String_Node_Str""+ msg.getChatType());
    requestPlayerJoinAudioGroup(sender,id,group,caller,calleeList,msg.getChatType());
  }
  vm.dump(""String_Node_Str"");
  return;
}","public void processVoiceChatMessage(WonderlandClientSender sender,WonderlandClientID clientID,VoiceChatMessage message){
  String group=message.getGroup();
  if (message instanceof VoiceChatInfoRequestMessage) {
    sendVoiceChatInfo(sender,clientID,group);
    return;
  }
  if (message instanceof VoiceChatBusyMessage) {
    VoiceChatBusyMessage msg=(VoiceChatBusyMessage)message;
    CommsManager cm=CommsManagerFactory.getCommsManager();
    WonderlandClientID id=cm.getWonderlandClientID(msg.getCaller().clientID);
    if (id == null) {
      logger.warning(""String_Node_Str"" + msg.getCaller());
      return;
    }
    sendVoiceChatBusyMessage(sender,id,msg);
    return;
  }
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  AudioGroup audioGroup=vm.getAudioGroup(group);
  if (message instanceof VoiceChatLeaveMessage) {
    if (audioGroup == null) {
      logger.info(""String_Node_Str"");
      return;
    }
    VoiceChatLeaveMessage msg=(VoiceChatLeaveMessage)message;
    Player player=vm.getPlayer(msg.getCallee().callID);
    if (player == null) {
      logger.warning(""String_Node_Str"" + msg.getCallee());
      if (audioGroup.getNumberOfPlayers() == 0) {
        endVoiceChat(vm,audioGroup);
      }
      sender.send(msg);
      return;
    }
    removePlayerFromAudioGroup(audioGroup,player);
    if (audioGroup.getNumberOfPlayers() <= 1) {
      endVoiceChat(vm,audioGroup);
    }
    sender.send(msg);
    vm.dump(""String_Node_Str"");
    return;
  }
  if (message instanceof VoiceChatEndMessage) {
    if (audioGroup == null) {
      logger.info(""String_Node_Str"");
      return;
    }
    endVoiceChat(vm,audioGroup);
    vm.dump(""String_Node_Str"");
    return;
  }
  if (message instanceof VoiceChatJoinAcceptedMessage == true) {
    if (audioGroup == null) {
      logger.warning(""String_Node_Str"" + group + ""String_Node_Str"");
      return;
    }
    VoiceChatJoinAcceptedMessage msg=(VoiceChatJoinAcceptedMessage)message;
    addPlayerToAudioGroup(vm,audioGroup,msg.getCallee(),msg.getChatType());
    sender.send(msg);
    return;
  }
  if (message instanceof VoiceChatHoldMessage == true) {
    VoiceChatHoldMessage msg=(VoiceChatHoldMessage)message;
    if (audioGroup == null) {
      logger.warning(""String_Node_Str"" + group + ""String_Node_Str"");
      return;
    }
    Player player=vm.getPlayer(msg.getCallee().callID);
    if (player == null) {
      logger.warning(""String_Node_Str"" + msg.getCallee().callID);
      return;
    }
    AudioGroupPlayerInfo playerInfo=audioGroup.getPlayerInfo(player);
    if (playerInfo == null) {
      logger.warning(""String_Node_Str"" + player);
      return;
    }
    AudioGroup livePlayerAudioGroup=vm.getVoiceManagerParameters().livePlayerAudioGroup;
    AudioGroup stationaryPlayerAudioGroup=vm.getVoiceManagerParameters().stationaryPlayerAudioGroup;
    if (msg.isOnHold()) {
      playerInfo.isSpeaking=false;
      audioGroup.setSpeakingAttenuation(player,0);
      audioGroup.setListenAttenuation(player,0);
      livePlayerAudioGroup.setSpeakingAttenuation(player,AudioGroup.DEFAULT_SPEAKING_ATTENUATION);
      livePlayerAudioGroup.setListenAttenuation(player,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
      stationaryPlayerAudioGroup.setSpeakingAttenuation(player,AudioGroup.DEFAULT_SPEAKING_ATTENUATION);
      stationaryPlayerAudioGroup.setListenAttenuation(player,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
    }
 else {
      playerInfo.isSpeaking=true;
      audioGroup.setSpeakingAttenuation(player,AudioGroup.DEFAULT_SPEAKING_ATTENUATION);
      audioGroup.setListenAttenuation(player,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
      if (playerInfo.chatType.equals(ChatType.PUBLIC)) {
        livePlayerAudioGroup.setSpeakingAttenuation(player,AudioGroup.DEFAULT_SPEAKING_ATTENUATION);
        livePlayerAudioGroup.setListenAttenuation(player,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
        stationaryPlayerAudioGroup.setListenAttenuation(player,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
      }
 else {
        livePlayerAudioGroup.setSpeakingAttenuation(player,0);
        livePlayerAudioGroup.setListenAttenuation(player,AudioGroup.MINIMAL_LISTEN_ATTENUATION);
        stationaryPlayerAudioGroup.setListenAttenuation(player,AudioGroup.MINIMAL_LISTEN_ATTENUATION);
      }
    }
    sender.send(msg);
    return;
  }
  if (message instanceof VoiceChatJoinMessage == false) {
    logger.warning(""String_Node_Str"" + message);
    return;
  }
  VoiceChatJoinMessage msg=(VoiceChatJoinMessage)message;
  if (audioGroup == null) {
    AudioGroupSetup setup=new AudioGroupSetup();
    setup.spatializer=new FullVolumeSpatializer();
    setup.spatializer.setAttenuator(DefaultSpatializer.DEFAULT_MAXIMUM_VOLUME);
    setup.virtualPlayerListener=this;
    setup.audioGroupListener=this;
    audioGroup=vm.createAudioGroup(group,setup);
  }
  PresenceInfo[] calleeList=msg.getCalleeList();
  PresenceInfo caller=msg.getCaller();
  boolean added=addPlayerToAudioGroup(vm,audioGroup,caller,msg.getChatType());
  if (added) {
    sender.send(new VoiceChatJoinAcceptedMessage(group,caller,msg.getChatType()));
  }
  if (added == false && (calleeList == null || calleeList.length == 0)) {
    endVoiceChat(vm,audioGroup);
    return;
  }
  logger.info(""String_Node_Str"" + group + ""String_Node_Str""+ caller+ ""String_Node_Str""+ msg.getPhoneNumber()+ ""String_Node_Str""+ msg.getName());
  if (calleeList == null || calleeList.length == 0) {
    return;
  }
  for (int i=0; i < calleeList.length; i++) {
    PresenceInfo info=calleeList[i];
    CellID cellID=calleeList[i].cellID;
    logger.fine(""String_Node_Str"" + calleeList[i]);
    String callID=calleeList[i].callID;
    Player player=vm.getPlayer(callID);
    if (player == null) {
      logger.warning(""String_Node_Str"" + callID);
      continue;
    }
    AudioGroupPlayerInfo playerInfo=audioGroup.getPlayerInfo(player);
    if (playerInfo != null && sameChatType(playerInfo.chatType,msg.getChatType())) {
      logger.fine(""String_Node_Str"" + info + ""String_Node_Str""+ audioGroup);
      continue;
    }
    WonderlandClientID id=CommsManagerFactory.getCommsManager().getWonderlandClientID(info.clientID);
    if (id == null) {
      logger.warning(""String_Node_Str"" + info);
      continue;
    }
    Call call=player.getCall();
    if (call != null) {
      try {
        call.playTreatment(""String_Node_Str"");
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + e.getMessage());
      }
    }
    logger.info(""String_Node_Str"" + info + ""String_Node_Str""+ group+ ""String_Node_Str""+ msg.getChatType());
    requestPlayerJoinAudioGroup(sender,id,group,caller,calleeList,msg.getChatType());
  }
  vm.dump(""String_Node_Str"");
  return;
}"
46208,"/** 
 * Create an instance of HUDView2D with a specified geometry node.
 * @param window The window displayed in this view.
 * @param geometryNode The geometry node on which to display the view.
 */
public HUDView2D(View2DDisplayer displayer,Window2D window,GeometryNode geometryNode){
  super(window,geometryNode);
  this.displayer=displayer;
  entity=new Entity(""String_Node_Str"" + name);
  viewNode=new Node(""String_Node_Str"" + name);
  RenderComponent rc=ClientContextJME.getWorldManager().getRenderManager().createRenderComponent(viewNode);
  entity.addComponent(RenderComponent.class,rc);
  entityMakePickable(entity);
  changeMask=CHANGED_ALL;
  update();
}","/** 
 * Create an instance of HUDView2D with a specified geometry node.
 * @param window The window displayed in this view.
 * @param geometryNode The geometry node on which to display the view.
 */
public HUDView2D(View2DDisplayer displayer,Window2D window,GeometryNode geometryNode){
  super(window,geometryNode);
  this.displayer=displayer;
  changeMask=CHANGED_ALL;
  update();
}"
46209,"void changeAvatar(WlAvatarCharacter newAvatar){
  LoadingInfo.startedLoading(cell.getCellID(),newAvatar.getName());
  ViewManager viewManager=ViewManager.getViewManager();
  if (viewManager.getPrimaryViewCell() == cell) {
    ViewManager.getViewManager().detach();
  }
  PMatrix currentLocation=null;
  WorldManager wm=ClientContextJME.getWorldManager();
  if (avatarCharacter != null) {
    currentLocation=avatarCharacter.getModelInst().getTransform().getWorldMatrix(true);
    wm.removeEntity(avatarCharacter);
    avatarCharacter.destroy();
  }
  avatarCharacter=newAvatar;
  RenderComponent rc=(RenderComponent)avatarCharacter.getComponent(RenderComponent.class);
  if (rc != null) {
    addDefaultComponents(avatarCharacter,rc.getSceneRoot());
  }
 else {
    logger.warning(""String_Node_Str"");
  }
  if (currentLocation != null) {
    avatarCharacter.getModelInst().setTransform(new PTransform(currentLocation));
  }
  wm.addEntity(avatarCharacter);
  entity=newAvatar;
  if (viewManager.getPrimaryViewCell() == cell) {
    ViewManager.getViewManager().attach(cell);
  }
  controlScheme=null;
  selectForInput(selectedForInput);
  LoadingInfo.finishedLoading(cell.getCellID(),newAvatar.getName());
}","void changeAvatar(WlAvatarCharacter newAvatar){
  LoadingInfo.startedLoading(cell.getCellID(),newAvatar.getName());
  ViewManager viewManager=ViewManager.getViewManager();
  if (viewManager.getPrimaryViewCell() == cell) {
    ViewManager.getViewManager().detach();
  }
  PMatrix currentLocation=null;
  WorldManager wm=ClientContextJME.getWorldManager();
  if (avatarCharacter != null) {
    if (nameTag != null) {
      avatarCharacter.getJScene().getExternalKidsRoot().detachChild(nameTag);
    }
    currentLocation=avatarCharacter.getModelInst().getTransform().getWorldMatrix(true);
    wm.removeEntity(avatarCharacter);
    avatarCharacter.destroy();
  }
  avatarCharacter=newAvatar;
  RenderComponent rc=(RenderComponent)avatarCharacter.getComponent(RenderComponent.class);
  if (rc != null) {
    addDefaultComponents(avatarCharacter,rc.getSceneRoot());
  }
 else {
    logger.warning(""String_Node_Str"");
  }
  if (currentLocation != null) {
    avatarCharacter.getModelInst().setTransform(new PTransform(currentLocation));
  }
  if (nameTag != null) {
    avatarCharacter.getJScene().getExternalKidsRoot().attachChild(nameTag);
  }
  wm.addEntity(avatarCharacter);
  entity=newAvatar;
  if (viewManager.getPrimaryViewCell() == cell) {
    ViewManager.getViewManager().attach(cell);
  }
  controlScheme=null;
  selectForInput(selectedForInput);
  LoadingInfo.finishedLoading(cell.getCellID(),newAvatar.getName());
}"
46210,"/** 
 * Creates a cell in the world given the CellServerState of the cell and the linear distance away from the avatar to initially place the cell. Throws CellCreationException upon failure. If the given CellServerState is null, this method simply does not create a Cell.
 * @param state The cell server state for the new cell
 * @param distance The linear distance away from the avatar
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state,float distance) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager manager=ViewManager.getViewManager();
  ViewCell viewCell=manager.getPrimaryViewCell();
  Vector3f cameraPosition=viewCell.getWorldTransform().getTranslation(null);
  Vector3f cameraLookDirection=manager.getCameraLookDirection(null);
  Map<String,String> metadata=state.getMetaData();
  String sizingHint=metadata.get(""String_Node_Str"");
  if (sizingHint != null) {
    float sizing=Float.parseFloat(sizingHint);
    distance=1.0f + sizing;
  }
  float lengthSquared=cameraLookDirection.lengthSquared();
  float factor=(distance * distance) / lengthSquared;
  Vector3f origin=cameraPosition.add(cameraLookDirection.mult(factor));
  System.out.println(""String_Node_Str"" + cameraPosition);
  System.out.println(""String_Node_Str"" + cameraLookDirection);
  System.out.println(""String_Node_Str"" + lengthSquared);
  System.out.println(""String_Node_Str"" + (distance * distance));
  System.out.println(""String_Node_Str"" + sizingHint);
  System.out.println(""String_Node_Str"" + factor);
  System.out.println(""String_Node_Str"" + origin);
  PositionComponentServerState position=new PositionComponentServerState();
  position.setOrigin(new Origin(origin));
  Quaternion quaternion=new Quaternion();
  quaternion.lookAt(cameraLookDirection.negate(),new Vector3f(0,1,0));
  Vector3f axis=new Vector3f();
  float angle=quaternion.toAngleAxis(axis);
  position.setRotation(new Rotation(axis,angle));
  state.addComponentServerState(position);
  WonderlandSession session=LoginManager.getPrimary().getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(null,state);
  connection.send(msg);
}","/** 
 * Creates a cell in the world given the CellServerState of the cell and the linear distance away from the avatar to initially place the cell. Throws CellCreationException upon failure. If the given CellServerState is null, this method simply does not create a Cell.
 * @param state The cell server state for the new cell
 * @param distance The linear distance away from the avatar
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state,float distance) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager manager=ViewManager.getViewManager();
  ViewCell viewCell=manager.getPrimaryViewCell();
  Vector3f cameraPosition=viewCell.getWorldTransform().getTranslation(null);
  Vector3f cameraLookDirection=manager.getCameraLookDirection(null);
  Map<String,String> metadata=state.getMetaData();
  String sizingHint=metadata.get(""String_Node_Str"");
  if (sizingHint != null) {
    float sizing=Float.parseFloat(sizingHint);
    distance=1.0f + sizing;
  }
  float lengthSquared=cameraLookDirection.lengthSquared();
  float factor=(distance * distance) / lengthSquared;
  Vector3f origin=cameraPosition.add(cameraLookDirection.mult(factor));
  PositionComponentServerState position=new PositionComponentServerState();
  position.setOrigin(new Origin(origin));
  Quaternion quaternion=new Quaternion();
  quaternion.lookAt(cameraLookDirection.negate(),new Vector3f(0,1,0));
  Vector3f axis=new Vector3f();
  float angle=quaternion.toAngleAxis(axis);
  position.setRotation(new Rotation(axis,angle));
  state.addComponentServerState(position);
  WonderlandSession session=LoginManager.getPrimary().getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(null,state);
  connection.send(msg);
}"
46211,"public void run(){
  ReconnectFrame rf=new ReconnectFrame(JmeClientMain.this,mgr);
  rf.pack();
  rf.setVisible(true);
}","public void run(){
  ReconnectFrame rf=new ReconnectFrame(JmeClientMain.this,mgr);
  rf.pack();
  rf.setLocationRelativeTo(JmeClientMain.getFrame().getFrame());
  rf.setVisible(true);
}"
46212,"public void sessionStatusChanged(WonderlandSession session,Status status){
  if (status == Status.DISCONNECTED) {
    ClientContextJME.removeAllPhysicsSystems(session.getSessionManager());
    ClientContextJME.removeAllCollisionSystems(session.getSessionManager());
    boolean inLogout;
synchronized (JmeClientMain.this) {
      inLogout=loggingOut;
    }
    if (!inLogout) {
      final ServerSessionManager mgr=curSession.getSessionManager();
      logger.warning(""String_Node_Str"");
      logout();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          ReconnectFrame rf=new ReconnectFrame(JmeClientMain.this,mgr);
          rf.pack();
          rf.setVisible(true);
        }
      }
);
    }
 else {
synchronized (JmeClientMain.this) {
        loggingOut=false;
      }
    }
  }
}","public void sessionStatusChanged(WonderlandSession session,Status status){
  if (status == Status.DISCONNECTED) {
    ClientContextJME.removeAllPhysicsSystems(session.getSessionManager());
    ClientContextJME.removeAllCollisionSystems(session.getSessionManager());
    boolean inLogout;
synchronized (JmeClientMain.this) {
      inLogout=loggingOut;
    }
    if (!inLogout) {
      final ServerSessionManager mgr=curSession.getSessionManager();
      logger.warning(""String_Node_Str"");
      logout();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          ReconnectFrame rf=new ReconnectFrame(JmeClientMain.this,mgr);
          rf.pack();
          rf.setLocationRelativeTo(JmeClientMain.getFrame().getFrame());
          rf.setVisible(true);
        }
      }
);
    }
 else {
synchronized (JmeClientMain.this) {
        loggingOut=false;
      }
    }
  }
}"
46213,"protected void loadServer(String serverURL,Vector3f translation,Quaternion look) throws IOException {
  logger.info(""String_Node_Str"" + serverURL);
  logout();
  ServerSessionManager lm=LoginManager.getSessionManager(serverURL);
  JMECollisionSystem collisionSystem=(JMECollisionSystem)ClientContextJME.getWorldManager().getCollisionManager().loadCollisionSystem(JMECollisionSystem.class);
  ClientContextJME.addCollisionSystem(lm,""String_Node_Str"",collisionSystem);
  login.setInitialPosition(translation,look);
  try {
    curSession=lm.createSession(login);
  }
 catch (  LoginFailureException lfe) {
    IOException ioe=new IOException(""String_Node_Str"" + serverURL);
    ioe.initCause(lfe);
    throw ioe;
  }
  if (curSession == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  curSession.addSessionStatusListener(new SessionStatusListener(){
    public void sessionStatusChanged(    WonderlandSession session,    Status status){
      if (status == Status.DISCONNECTED) {
        ClientContextJME.removeAllPhysicsSystems(session.getSessionManager());
        ClientContextJME.removeAllCollisionSystems(session.getSessionManager());
        boolean inLogout;
synchronized (JmeClientMain.this) {
          inLogout=loggingOut;
        }
        if (!inLogout) {
          final ServerSessionManager mgr=curSession.getSessionManager();
          logger.warning(""String_Node_Str"");
          logout();
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              ReconnectFrame rf=new ReconnectFrame(JmeClientMain.this,mgr);
              rf.pack();
              rf.setVisible(true);
            }
          }
);
        }
 else {
synchronized (JmeClientMain.this) {
            loggingOut=false;
          }
        }
      }
    }
  }
);
  LoginManager.setPrimary(lm);
  lm.setPrimarySession(curSession);
  frame.setServerURL(serverURL);
}","protected void loadServer(String serverURL,Vector3f translation,Quaternion look) throws IOException {
  logger.info(""String_Node_Str"" + serverURL);
  logout();
  ServerSessionManager lm=LoginManager.getSessionManager(serverURL);
  JMECollisionSystem collisionSystem=(JMECollisionSystem)ClientContextJME.getWorldManager().getCollisionManager().loadCollisionSystem(JMECollisionSystem.class);
  ClientContextJME.addCollisionSystem(lm,""String_Node_Str"",collisionSystem);
  login.setInitialPosition(translation,look);
  try {
    curSession=lm.createSession(login);
  }
 catch (  LoginFailureException lfe) {
    IOException ioe=new IOException(""String_Node_Str"" + serverURL);
    ioe.initCause(lfe);
    throw ioe;
  }
  if (curSession == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  curSession.addSessionStatusListener(new SessionStatusListener(){
    public void sessionStatusChanged(    WonderlandSession session,    Status status){
      if (status == Status.DISCONNECTED) {
        ClientContextJME.removeAllPhysicsSystems(session.getSessionManager());
        ClientContextJME.removeAllCollisionSystems(session.getSessionManager());
        boolean inLogout;
synchronized (JmeClientMain.this) {
          inLogout=loggingOut;
        }
        if (!inLogout) {
          final ServerSessionManager mgr=curSession.getSessionManager();
          logger.warning(""String_Node_Str"");
          logout();
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              ReconnectFrame rf=new ReconnectFrame(JmeClientMain.this,mgr);
              rf.pack();
              rf.setLocationRelativeTo(JmeClientMain.getFrame().getFrame());
              rf.setVisible(true);
            }
          }
);
        }
 else {
synchronized (JmeClientMain.this) {
            loggingOut=false;
          }
        }
      }
    }
  }
);
  LoginManager.setPrimary(lm);
  lm.setPrimarySession(curSession);
  frame.setServerURL(serverURL);
}"
46214,"/** 
 * Unregister and menus we have created, etc.
 */
public void unregister(){
  loginInfo.removeLifecycleListener(sessionListener);
  JmeClientMain.getFrame().removeFromWindowMenu(menu);
}","/** 
 * Unregister and menus we have created, etc.
 */
public void unregister(){
  JFrame userListJFrame=userListFrameRef.get();
  userListJFrame.setVisible(false);
  userListJFrame.dispose();
  for (  Map.Entry<String,WeakReference<TextChatJFrame>> entry : textChatFrameRefMap.entrySet()) {
    TextChatJFrame frame=entry.getValue().get();
    frame.setVisible(false);
    frame.dispose();
  }
  textChatFrameRefMap.clear();
  loginInfo.removeLifecycleListener(sessionListener);
  JmeClientMain.getFrame().removeFromWindowMenu(menu);
}"
46215,"public void actionPerformed(ActionEvent e){
  ViewCell cell=ClientContextJME.getViewManager().getPrimaryViewCell();
  if (cell instanceof AvatarCell) {
    AvatarImiJME rend=(AvatarImiJME)((AvatarCell)cell).getCellRenderer(ClientContext.getRendererType());
    AvatarConfigFrame f=new AvatarConfigFrame(rend);
    f.setVisible(true);
  }
}","public void actionPerformed(ActionEvent e){
  GameContext context=curAvatar.getAvatarCharacter().getContext();
  CharacterSteeringHelm helm=curAvatar.getAvatarCharacter().getContext().getSteering();
  helm.addTaskToTop(new GoTo(new Vector3f(0,0,0),context));
  helm.setEnable(true);
}"
46216,"public void primaryViewCellChanged(ViewCell oldViewCell,ViewCell newViewCell){
  CellRenderer rend=newViewCell.getCellRenderer(Cell.RendererType.RENDERER_JME);
  if (!(rend instanceof AvatarImiJME)) {
    return;
  }
  curAvatar=(AvatarImiJME)rend;
  if (testPanelRef == null || testPanelRef.get() == null) {
  }
 else {
    testPanelRef.get().setAvatarCharactar(curAvatar.getAvatarCharacter());
  }
  AvatarConfigManager.getAvatarConfigManager().setViewCell(newViewCell);
  if (!menusAdded) {
    JmeClientMain.getFrame().addToWindowMenu(avatarControlsMI,0);
    JmeClientMain.getFrame().addToEditMenu(avatarMI,0);
    JmeClientMain.getFrame().addToEditMenu(avatarSettingsMI,1);
    JmeClientMain.getFrame().addToPlacemarksMenu(startingLocationMI,0);
    JmeClientMain.getFrame().addToEditMenu(avatarConfigFrameMI);
    menusAdded=true;
  }
}","public void primaryViewCellChanged(ViewCell oldViewCell,ViewCell newViewCell){
  CellRenderer rend=newViewCell.getCellRenderer(Cell.RendererType.RENDERER_JME);
  if (!(rend instanceof AvatarImiJME)) {
    return;
  }
  curAvatar=(AvatarImiJME)rend;
  if (testPanelRef == null || testPanelRef.get() == null) {
  }
 else {
    testPanelRef.get().setAvatarCharactar(curAvatar.getAvatarCharacter());
  }
  AvatarConfigManager.getAvatarConfigManager().setViewCell(newViewCell);
  if (!menusAdded) {
    JmeClientMain.getFrame().addToWindowMenu(avatarControlsMI,0);
    JmeClientMain.getFrame().addToEditMenu(avatarMI,0);
    JmeClientMain.getFrame().addToEditMenu(avatarSettingsMI,1);
    JmeClientMain.getFrame().addToPlacemarksMenu(startingLocationMI,0);
    menusAdded=true;
  }
}"
46217,"@Override public void initialize(ServerSessionManager loginManager){
  this.loginManager=loginManager;
  String serverHostAndPort=loginManager.getServerNameAndPort();
  this.baseURL=""String_Node_Str"" + serverHostAndPort + ""String_Node_Str"";
  WorldManager worldManager=ClientContextJME.getWorldManager();
  worldManager.addUserData(Repository.class,new Repository(worldManager,new WonderlandAvatarCache(ClientContext.getUserDirectory(bundle.getString(""String_Node_Str"")))));
  loginManager.addLifecycleListener(lifecycleListener);
  avatarControlsMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarControlsMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (testPanelRef == null || testPanelRef.get() == null) {
        AvatarTestPanel test=new AvatarTestPanel();
        JFrame f=new JFrame(bundle.getString(""String_Node_Str""));
        f.getContentPane().add(test);
        f.pack();
        f.setVisible(true);
        f.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        test.setAvatarCharactar(curAvatar.getAvatarCharacter());
        testPanelRef=new WeakReference(test);
      }
 else {
        SwingUtilities.getRoot(testPanelRef.get().getParent()).setVisible(true);
      }
    }
  }
);
  avatarMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ViewCell cell=ClientContextJME.getViewManager().getPrimaryViewCell();
      if (cell instanceof AvatarCell) {
        AvatarImiJME rend=(AvatarImiJME)((AvatarCell)cell).getCellRenderer(ClientContext.getRendererType());
        AvatarConfigFrame f=new AvatarConfigFrame(rend);
        f.setVisible(true);
      }
    }
  }
);
  avatarSettingsMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarSettingsMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      AvatarInstrumentation in=new AvatarInstrumentation(instrumentation);
      in.setVisible(true);
    }
  }
);
  startingLocationMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  startingLocationMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      GameContext context=curAvatar.getAvatarCharacter().getContext();
      CharacterSteeringHelm helm=curAvatar.getAvatarCharacter().getContext().getSteering();
      helm.addTaskToTop(new GoTo(new Vector3f(0,0,0),context));
      helm.setEnable(true);
    }
  }
);
  avatarConfigFrameMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarConfigFrameMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ViewCell cell=ClientContextJME.getViewManager().getPrimaryViewCell();
      if (cell instanceof AvatarCell) {
        AvatarImiJME rend=(AvatarImiJME)((AvatarCell)cell).getCellRenderer(ClientContext.getRendererType());
        AvatarConfigFrame f=new AvatarConfigFrame(rend);
        f.setVisible(true);
      }
    }
  }
);
  instrumentation=new DefaultInstrumentation(ClientContextJME.getWorldManager());
  ClientContextJME.getAvatarRenderManager().registerRenderer(loginManager,AvatarImiJME.class,AvatarControls.class);
  super.initialize(loginManager);
}","@Override public void initialize(ServerSessionManager loginManager){
  this.loginManager=loginManager;
  String serverHostAndPort=loginManager.getServerNameAndPort();
  this.baseURL=""String_Node_Str"" + serverHostAndPort + ""String_Node_Str"";
  WorldManager worldManager=ClientContextJME.getWorldManager();
  worldManager.addUserData(Repository.class,new Repository(worldManager,new WonderlandAvatarCache(ClientContext.getUserDirectory(bundle.getString(""String_Node_Str"")))));
  loginManager.addLifecycleListener(lifecycleListener);
  avatarControlsMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarControlsMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (testPanelRef == null || testPanelRef.get() == null) {
        AvatarTestPanel test=new AvatarTestPanel();
        JFrame f=new JFrame(bundle.getString(""String_Node_Str""));
        f.getContentPane().add(test);
        f.pack();
        f.setVisible(true);
        f.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        test.setAvatarCharactar(curAvatar.getAvatarCharacter());
        testPanelRef=new WeakReference(test);
      }
 else {
        SwingUtilities.getRoot(testPanelRef.get().getParent()).setVisible(true);
      }
    }
  }
);
  avatarMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ViewCell cell=ClientContextJME.getViewManager().getPrimaryViewCell();
      if (cell instanceof AvatarCell) {
        AvatarImiJME rend=(AvatarImiJME)((AvatarCell)cell).getCellRenderer(ClientContext.getRendererType());
        AvatarConfigFrame f=new AvatarConfigFrame(rend);
        f.setVisible(true);
      }
    }
  }
);
  avatarSettingsMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarSettingsMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      AvatarInstrumentation in=new AvatarInstrumentation(instrumentation);
      in.setVisible(true);
    }
  }
);
  startingLocationMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  startingLocationMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      GameContext context=curAvatar.getAvatarCharacter().getContext();
      CharacterSteeringHelm helm=curAvatar.getAvatarCharacter().getContext().getSteering();
      helm.addTaskToTop(new GoTo(new Vector3f(0,0,0),context));
      helm.setEnable(true);
    }
  }
);
  instrumentation=new DefaultInstrumentation(ClientContextJME.getWorldManager());
  ClientContextJME.getAvatarRenderManager().registerRenderer(loginManager,AvatarImiJME.class,AvatarControls.class);
  super.initialize(loginManager);
}"
46218,"@Override protected void deactivate(){
  if (menusAdded) {
    JmeClientMain.getFrame().removeFromWindowMenu(avatarControlsMI);
    JmeClientMain.getFrame().removeFromEditMenu(avatarMI);
    JmeClientMain.getFrame().removeFromEditMenu(avatarSettingsMI);
    JmeClientMain.getFrame().removeFromPlacemarksMenu(startingLocationMI);
    JmeClientMain.getFrame().removeFromEditMenu(avatarConfigFrameMI);
    menusAdded=false;
  }
  ClientContextJME.getViewManager().removeViewManagerListener(this);
}","@Override protected void deactivate(){
  if (menusAdded) {
    JmeClientMain.getFrame().removeFromWindowMenu(avatarControlsMI);
    JmeClientMain.getFrame().removeFromEditMenu(avatarMI);
    JmeClientMain.getFrame().removeFromEditMenu(avatarSettingsMI);
    JmeClientMain.getFrame().removeFromPlacemarksMenu(startingLocationMI);
    menusAdded=false;
  }
  ClientContextJME.getViewManager().removeViewManagerListener(this);
}"
46219,"/** 
 * Create a new StatusWaiter for the given runner and target status
 * @param runner the runner to listen for status on
 * @param targetStatus the status to wait for if <code>wait()</code> iscalled.
 */
public StatusWaiter(Runner runner,Runner.Status targetStatus){
  this.runner=runner;
  this.targetStatus=targetStatus;
  currentStatus=runner.addStatusListener(this);
}","/** 
 * Create a new StatusWaiter for the given runner and target status
 * @param runner the runner to listen for status on
 * @param targetStatus the status to wait for if <code>wait()</code> iscalled.
 */
public StatusWaiter(Runner runner,Runner.Status targetStatus){
  this.runner=runner;
  this.targetStatus=targetStatus;
  if (runner.isRunnable()) {
    currentStatus=runner.addStatusListener(this);
  }
}"
46220,"/** 
 * Wait for the runner's status to be the given status
 * @param status the status to wait for
 * @return the actual status.  This will either be the valuethat was specified in status or ERROR if the runner had an error.
 * @throws InterruptedException if the thread is interrupted
 */
public synchronized Runner.Status waitFor(Runner.Status status) throws InterruptedException {
  while (currentStatus != status && currentStatus != Runner.Status.ERROR) {
    wait();
  }
  return currentStatus;
}","/** 
 * Wait for the runner's status to be the given status
 * @param status the status to wait for
 * @return the actual status.  This will either be the valuethat was specified in status or ERROR if the runner had an error.
 * @throws InterruptedException if the thread is interrupted
 */
public synchronized Runner.Status waitFor(Runner.Status status) throws InterruptedException {
  if (!runner.isRunnable()) {
    return runner.getStatus();
  }
  while (currentStatus != status && currentStatus != Runner.Status.ERROR) {
    wait();
  }
  return currentStatus;
}"
46221,"/** 
 * Create a new instance of HUDApp2D with the given name.
 * @param name The name of the app.
 * @param controlArb The control arbiter to use. null means that all users can control at the same time.
 * @param pixelScale The size of the window pixels in world coordinates.
 */
public HUDApp2D(String name,ControlArb controlArb,Vector2f pixelScale){
  super(name,controlArb,pixelScale);
  controlArb.setApp(this);
}","/** 
 * Create a new instance of HUDApp2D with the given name.
 * @param name The name of the app.
 * @param controlArb The control arbiter to use. null means that all users can control at the same time.
 * @param pixelScale The size of the window pixels in world coordinates.
 */
public HUDApp2D(String name,ControlArb controlArb,Vector2f pixelScale){
  super(name,controlArb,pixelScale);
  controlArb.setApp(this);
  controlArb.takeControl();
}"
46222,"/** 
 * {@inheritDoc}
 */
public void addComponent(HUDComponent component){
  logger.fine(""String_Node_Str"" + component + ""String_Node_Str""+ component.getWidth()+ ""String_Node_Str""+ component.getHeight());
  Window2D window=null;
  HUDComponentState state=new HUDComponentState(component);
  try {
    HUDApp2D hudApp=new HUDApp2D(""String_Node_Str"",new ControlArbMulti(),new Vector2f(0.2f,0.2f));
    window=hudApp.createWindow(component.getWidth(),component.getHeight(),Type.PRIMARY,false,new Vector2f(0.2f,0.2f),""String_Node_Str"");
    JComponent comp=((HUDComponent2D)component).getComponent();
    ((WindowSwing)window).setComponent(comp);
  }
 catch (  InstantiationException e) {
    logger.warning(""String_Node_Str"" + e);
  }
  state.setWindow(window);
  component.addComponentListener(this);
  HUDStateMap.put(component,state);
}","/** 
 * {@inheritDoc}
 */
public void addComponent(HUDComponent component){
  logger.fine(""String_Node_Str"" + component + ""String_Node_Str""+ component.getWidth()+ ""String_Node_Str""+ component.getHeight());
  Window2D window=null;
  HUDComponentState state=new HUDComponentState(component);
  try {
    HUDApp2D hudApp=new HUDApp2D(""String_Node_Str"",new ControlArbHUD(),new Vector2f(0.2f,0.2f));
    window=hudApp.createWindow(component.getWidth(),component.getHeight(),Type.PRIMARY,false,new Vector2f(0.2f,0.2f),""String_Node_Str"");
    JComponent comp=((HUDComponent2D)component).getComponent();
    ((WindowSwing)window).setComponent(comp);
  }
 catch (  InstantiationException e) {
    logger.warning(""String_Node_Str"" + e);
  }
  state.setWindow(window);
  component.addComponentListener(this);
  HUDStateMap.put(component,state);
}"
46223,"protected Node createSceneGraph(Entity entity){
  node=new Node(""String_Node_Str"");
  String textureURI=((ImageViewerCell)cell).getImageURI();
  if (textureURI == null) {
    logger.warning(""String_Node_Str"");
    return new Node();
  }
  URL url=null;
  try {
    url=getAssetURL(textureURI);
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(ImageViewerCellRenderer.class.getName()).log(Level.SEVERE,null,ex);
  }
  Texture texture=TextureManager.loadTexture(url);
  texture.setWrap(Texture.WrapMode.BorderClamp);
  texture.setTranslation(new Vector3f());
  Image image=texture.getImage();
  int width=image.getWidth();
  int height=image.getHeight();
  Box box=new Box(""String_Node_Str"",new Vector3f(0,0,0),width,height,0.1f);
  node.attachChild(box);
  node.setLocalScale(new Vector3f(0.01f,0.01f,1.0f));
  box.setModelBound(new BoundingSphere());
  box.updateModelBound();
  TextureState ts=(TextureState)ClientContextJME.getWorldManager().getRenderManager().createRendererState(RenderState.RS_TEXTURE);
  ts.setTexture(texture);
  ts.setEnabled(true);
  box.setRenderState(ts);
  return node;
}","protected Node createSceneGraph(Entity entity){
  node=new Node(""String_Node_Str"");
  String textureURI=((ImageViewerCell)cell).getImageURI();
  if (textureURI == null) {
    logger.warning(""String_Node_Str"");
    return new Node();
  }
  URL url=null;
  try {
    url=getAssetURL(textureURI);
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(ImageViewerCellRenderer.class.getName()).log(Level.SEVERE,null,ex);
  }
  Texture texture=TextureManager.loadTexture(url);
  texture.setWrap(Texture.WrapMode.BorderClamp);
  texture.setTranslation(new Vector3f());
  Image image=texture.getImage();
  float width=image.getWidth() * 0.01f;
  float height=image.getHeight() * 0.01f;
  Box box=new Box(""String_Node_Str"",new Vector3f(0,0,0),width,height,0.1f);
  node.attachChild(box);
  node.setModelBound(new BoundingSphere());
  node.updateModelBound();
  TextureState ts=(TextureState)ClientContextJME.getWorldManager().getRenderManager().createRendererState(RenderState.RS_TEXTURE);
  ts.setTexture(texture);
  ts.setEnabled(true);
  box.setRenderState(ts);
  return node;
}"
46224,"protected Node createSceneGraph(Entity entity){
  String name=cell.getCellID().toString();
  String shapeType=((SampleCell)cell).getShapeType();
  TriMesh mesh=this.getShapeMesh(name,shapeType);
  if (mesh == null) {
    node=new Node();
    return node;
  }
  node=new Node();
  node.attachChild(mesh);
  node.setModelBound(new BoundingSphere());
  node.setName(""String_Node_Str"" + cell.getCellID() + ""String_Node_Str""+ cell.getName());
  return node;
}","protected Node createSceneGraph(Entity entity){
  String name=cell.getCellID().toString();
  String shapeType=((SampleCell)cell).getShapeType();
  TriMesh mesh=this.getShapeMesh(name,shapeType);
  if (mesh == null) {
    node=new Node();
    return node;
  }
  node=new Node();
  node.attachChild(mesh);
  node.setModelBound(new BoundingSphere());
  node.updateModelBound();
  node.setName(""String_Node_Str"" + cell.getCellID() + ""String_Node_Str""+ cell.getName());
  return node;
}"
46225,"public void updateShape(){
  String name=cell.getCellID().toString();
  String shapeType=((SampleCell)cell).getShapeType();
  node.detachAllChildren();
  node.attachChild(this.getShapeMesh(name,shapeType));
  node.setModelBound(new BoundingSphere());
  ClientContextJME.getWorldManager().addToUpdateList(node);
}","public void updateShape(){
  String name=cell.getCellID().toString();
  String shapeType=((SampleCell)cell).getShapeType();
  node.detachAllChildren();
  node.attachChild(this.getShapeMesh(name,shapeType));
  node.setModelBound(new BoundingSphere());
  node.updateModelBound();
  ClientContextJME.getWorldManager().addToUpdateList(node);
}"
46226,"/** 
 * {@inheritDoc}
 */
public void sessionCreated(WonderlandSession session){
}","/** 
 * {@inheritDoc}
 */
public void sessionCreated(WonderlandSession session){
  if (connection != null) {
    logger.warning(""String_Node_Str"");
    return;
  }
  connection=new AppConventionalConnection(session);
  try {
    connection.connect(session);
  }
 catch (  ConnectionFailureException ex) {
    RuntimeException re=new RuntimeException(""String_Node_Str"" + ex);
    re.initCause(ex);
    throw re;
  }
}"
46227,"/** 
 * {@inheritDoc}
 */
public void primarySession(WonderlandSession session){
  if (session == currentPrimarySession)   return;
  if (currentPrimarySession != null && connection != null) {
    connection.disconnect();
    connection=null;
  }
  currentPrimarySession=session;
  connection=new AppConventionalConnection(session);
  try {
    connection.connect(session);
  }
 catch (  ConnectionFailureException ex) {
    RuntimeException re=new RuntimeException(""String_Node_Str"" + ex);
    re.initCause(ex);
    throw re;
  }
}","/** 
 * {@inheritDoc}
 */
public void primarySession(WonderlandSession session){
}"
46228,"/** 
 * {@inheritDoc}
 */
@Override public void setClientState(CellClientState clientState){
  super.setClientState(clientState);
  AppConventionalCellClientState state=(AppConventionalCellClientState)clientState;
  appName=state.getAppName();
  if (state.getLaunchLocation().equalsIgnoreCase(""String_Node_Str"") && state.getLaunchUser().equals(cellCacheSession.getUserID().getUsername())) {
    if (connection == null) {
      logger.severe(""String_Node_Str"");
      logger.severe(""String_Node_Str"" + state.getCommand());
      return;
    }
    connectionInfo=startMaster(appName,state.getCommand(),false);
    if (connectionInfo == null) {
      logger.warning(""String_Node_Str"" + appName);
      return;
    }
    logger.info(""String_Node_Str"" + getCellID() + ""String_Node_Str""+ connectionInfo);
    AppConventionalCellSetConnectionInfoMessage msg=new AppConventionalCellSetConnectionInfoMessage(getCellID(),connectionInfo);
    connection.send(msg);
  }
 else {
    connectionInfo=state.getConnectionInfo();
    logger.severe(""String_Node_Str"" + connectionInfo);
    if (connectionInfo != null) {
      logger.severe(""String_Node_Str"");
      startTheSlave(connectionInfo);
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setClientState(CellClientState clientState){
  super.setClientState(clientState);
  AppConventionalCellClientState state=(AppConventionalCellClientState)clientState;
  appName=state.getAppName();
  if (state.getLaunchLocation().equalsIgnoreCase(""String_Node_Str"") && state.getLaunchUser().equals(cellCacheSession.getUserID().getUsername())) {
    connectionInfo=startMaster(appName,state.getCommand(),false);
    if (connectionInfo == null) {
      logger.warning(""String_Node_Str"" + appName);
      return;
    }
    logger.info(""String_Node_Str"" + getCellID() + ""String_Node_Str""+ connectionInfo);
    AppConventionalCellSetConnectionInfoMessage msg=new AppConventionalCellSetConnectionInfoMessage(getCellID(),connectionInfo);
    connection.send(msg);
  }
 else {
    connectionInfo=state.getConnectionInfo();
    logger.severe(""String_Node_Str"" + connectionInfo);
    if (connectionInfo != null) {
      logger.severe(""String_Node_Str"");
      startTheSlave(connectionInfo);
    }
  }
}"
46229,"/** 
 * This is called when the server sends the connection info.
 */
synchronized void setConnectionInfo(String connInfo){
  if (connectionInfo != null) {
    return;
  }
  if (connInfo != null) {
    connectionInfo=connInfo;
    notifyAll();
  }
}","/** 
 * This is called when the server sends the connection info.
 */
synchronized void setConnectionInfo(String connInfo){
  if (connectionInfo != null) {
    return;
  }
  if (slaveStarted)   return;
  if (connInfo != null) {
    connectionInfo=connInfo;
    logger.severe(""String_Node_Str"");
    startTheSlave(connectionInfo);
  }
}"
46230,"/** 
 * {@inheritDoc}
 */
@Override public void setClientState(CellClientState clientState){
  super.setClientState(clientState);
  AppConventionalCellClientState state=(AppConventionalCellClientState)clientState;
  appName=state.getAppName();
  if (state.getLaunchLocation().equalsIgnoreCase(""String_Node_Str"") && state.getLaunchUser().equals(cellCacheSession.getUserID().getUsername())) {
    connectionInfo=startMaster(appName,state.getCommand(),false);
    if (connectionInfo == null) {
      logger.warning(""String_Node_Str"" + appName);
      return;
    }
    logger.info(""String_Node_Str"" + getCellID() + ""String_Node_Str""+ connectionInfo);
    AppConventionalCellSetConnectionInfoMessage msg=new AppConventionalCellSetConnectionInfoMessage(getCellID(),connectionInfo);
    if (connection == null) {
      logger.severe(""String_Node_Str"");
      System.exit(1);
    }
    connection.send(msg);
  }
 else {
    connectionInfo=state.getConnectionInfo();
    logger.severe(""String_Node_Str"" + connectionInfo);
synchronized (this) {
      while (connectionInfo == null) {
        logger.fine(""String_Node_Str"");
        try {
          wait();
        }
 catch (        InterruptedException ex) {
        }
      }
      logger.fine(""String_Node_Str"");
    }
    startSlave(connectionInfo);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setClientState(CellClientState clientState){
  super.setClientState(clientState);
  AppConventionalCellClientState state=(AppConventionalCellClientState)clientState;
  appName=state.getAppName();
  if (state.getLaunchLocation().equalsIgnoreCase(""String_Node_Str"") && state.getLaunchUser().equals(cellCacheSession.getUserID().getUsername())) {
    if (connection == null) {
      logger.severe(""String_Node_Str"");
      logger.severe(""String_Node_Str"" + state.getCommand());
      return;
    }
    connectionInfo=startMaster(appName,state.getCommand(),false);
    if (connectionInfo == null) {
      logger.warning(""String_Node_Str"" + appName);
      return;
    }
    logger.info(""String_Node_Str"" + getCellID() + ""String_Node_Str""+ connectionInfo);
    AppConventionalCellSetConnectionInfoMessage msg=new AppConventionalCellSetConnectionInfoMessage(getCellID(),connectionInfo);
    connection.send(msg);
  }
 else {
    connectionInfo=state.getConnectionInfo();
    logger.severe(""String_Node_Str"" + connectionInfo);
    if (connectionInfo != null) {
      logger.severe(""String_Node_Str"");
      startTheSlave(connectionInfo);
    }
  }
}"
46231,"@Override public void handleMessage(Message message){
  logger.fine(""String_Node_Str"");
  if (message instanceof GetVoiceBridgeResponseMessage) {
    GetVoiceBridgeResponseMessage msg=(GetVoiceBridgeResponseMessage)message;
    logger.warning(""String_Node_Str"" + msg.getBridgeInfo());
    SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
    String tokens[]=msg.getBridgeInfo().split(""String_Node_Str"");
    String registrarAddress=tokens[5] + ""String_Node_Str"";
    registrarAddress+=tokens[7];
    String localAddress=null;
    try {
      InetAddress ia=NetworkAddress.getPrivateLocalAddress(""String_Node_Str"" + tokens[5] + ""String_Node_Str""+ tokens[7]+ ""String_Node_Str"");
      localAddress=ia.getHostAddress();
    }
 catch (    UnknownHostException e) {
      logger.warning(e.getMessage());
      logger.warning(""String_Node_Str"" + ""String_Node_Str"");
      try {
        InetAddress ia=NetworkAddress.getPrivateLocalAddress(""String_Node_Str"" + tokens[2] + ""String_Node_Str""+ tokens[4]+ ""String_Node_Str"");
        localAddress=ia.getHostAddress();
      }
 catch (      UnknownHostException ee) {
        logger.warning(ee.getMessage());
      }
    }
    if (localAddress != null) {
      try {
        String sipURL=sc.startSoftphone(presenceInfo.userID.getUsername(),registrarAddress,10,localAddress,AudioQuality.VPN);
        logger.fine(""String_Node_Str"" + presenceInfo);
        session.send(this,new PlaceCallMessage(presenceInfo,sipURL,0.,0.,0.,90.,false));
      }
 catch (      IOException e) {
        logger.warning(e.getMessage());
      }
    }
 else {
      logger.warning(""String_Node_Str"");
      connectSoftphone();
    }
  }
 else   if (message instanceof VoiceChatJoinRequestMessage) {
    VoiceChatJoinRequestMessage msg=(VoiceChatJoinRequestMessage)message;
    VoiceChatDialog voiceChatDialog=VoiceChatDialog.getVoiceChatDialog(msg.getGroup());
    if (voiceChatDialog == null) {
      try {
        voiceChatDialog=new VoiceChatDialog(this,cell.getCellID(),session,msg.getCaller());
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + e.getMessage());
        return;
      }
    }
    voiceChatDialog.requestToJoin(msg.getGroup(),msg.getCaller(),msg.getCalleeList(),msg.getChatType());
  }
 else   if (message instanceof VoiceChatBusyMessage) {
    VoiceChatBusyMessage msg=(VoiceChatBusyMessage)message;
    new VoiceChatBusyDialog(msg.getGroup(),msg.getCallee());
  }
 else   if (message instanceof VoiceChatInfoResponseMessage) {
    VoiceChatInfoResponseMessage msg=(VoiceChatInfoResponseMessage)message;
    VoiceChatDialog voiceChatDialog=VoiceChatDialog.getVoiceChatDialog(msg.getGroup());
    if (voiceChatDialog == null) {
      logger.warning(""String_Node_Str"" + msg.getGroup());
    }
 else {
      voiceChatDialog.setChatters(msg.getChatters());
    }
  }
 else   if (message instanceof SpeakingMessage) {
    SpeakingMessage msg=(SpeakingMessage)message;
    PresenceInfo info=pm.getPresenceInfo(msg.getCallID());
    if (info == null) {
      logger.warning(""String_Node_Str"" + msg.getCallID());
      return;
    }
    pm.setSpeaking(info,msg.isSpeaking());
    if (userListJFrame != null) {
      userListJFrame.setUserList();
    }
    AvatarNameEvent avatarNameEvent;
    if (msg.isSpeaking()) {
      avatarNameEvent=new AvatarNameEvent(EventType.STARTED_SPEAKING,info.userID.getUsername(),info.usernameAlias);
    }
 else {
      avatarNameEvent=new AvatarNameEvent(EventType.STOPPED_SPEAKING,info.userID.getUsername(),info.usernameAlias);
    }
    InputManager.inputManager().postEvent(avatarNameEvent);
  }
 else   if (message instanceof MuteCallMessage) {
    MuteCallMessage msg=(MuteCallMessage)message;
    PresenceInfo info=pm.getPresenceInfo(msg.getCallID());
    if (info == null) {
      logger.warning(""String_Node_Str"" + msg.getCallID());
      return;
    }
    pm.setMute(info,msg.isMuted());
    if (userListJFrame != null) {
      userListJFrame.setUserList();
    }
    AvatarNameEvent avatarNameEvent;
    if (msg.isMuted()) {
      avatarNameEvent=new AvatarNameEvent(EventType.MUTE,info.userID.getUsername(),info.usernameAlias);
    }
 else {
      avatarNameEvent=new AvatarNameEvent(EventType.UNMUTE,info.userID.getUsername(),info.usernameAlias);
    }
    InputManager.inputManager().postEvent(avatarNameEvent);
  }
 else   if (message instanceof ConeOfSilenceEnterExitMessage) {
    ConeOfSilenceEnterExitMessage msg=(ConeOfSilenceEnterExitMessage)message;
    pm.setEnteredConeOfSilence(presenceInfo,msg.entered());
    AvatarNameEvent avatarNameEvent;
    if (msg.entered()) {
      avatarNameEvent=new AvatarNameEvent(EventType.ENTERED_CONE_OF_SILENCE,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
    }
 else {
      avatarNameEvent=new AvatarNameEvent(EventType.EXITED_CONE_OF_SILENCE,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
    }
    InputManager.inputManager().postEvent(avatarNameEvent);
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}","@Override public void handleMessage(Message message){
  logger.fine(""String_Node_Str"");
  if (message instanceof GetVoiceBridgeResponseMessage) {
    GetVoiceBridgeResponseMessage msg=(GetVoiceBridgeResponseMessage)message;
    logger.warning(""String_Node_Str"" + msg.getBridgeInfo());
    SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
    String tokens[]=msg.getBridgeInfo().split(""String_Node_Str"");
    String registrarAddress=tokens[5] + ""String_Node_Str"";
    registrarAddress+=tokens[7];
    String localAddress=null;
    try {
      InetAddress ia=NetworkAddress.getPrivateLocalAddress(""String_Node_Str"" + tokens[5] + ""String_Node_Str""+ tokens[7]+ ""String_Node_Str"");
      localAddress=ia.getHostAddress();
    }
 catch (    UnknownHostException e) {
      logger.warning(e.getMessage());
      logger.warning(""String_Node_Str"" + ""String_Node_Str"");
      try {
        InetAddress ia=NetworkAddress.getPrivateLocalAddress(""String_Node_Str"" + tokens[2] + ""String_Node_Str""+ tokens[4]+ ""String_Node_Str"");
        localAddress=ia.getHostAddress();
      }
 catch (      UnknownHostException ee) {
        logger.warning(ee.getMessage());
      }
    }
    if (localAddress != null) {
      try {
        String sipURL=sc.startSoftphone(presenceInfo.userID.getUsername(),registrarAddress,10,localAddress,AudioQuality.VPN);
        logger.fine(""String_Node_Str"" + presenceInfo);
        session.send(this,new PlaceCallMessage(presenceInfo,sipURL,0.,0.,0.,90.,false));
      }
 catch (      IOException e) {
        logger.warning(e.getMessage());
      }
    }
 else {
      logger.warning(""String_Node_Str"");
      connectSoftphone();
    }
  }
 else   if (message instanceof VoiceChatJoinRequestMessage) {
    VoiceChatJoinRequestMessage msg=(VoiceChatJoinRequestMessage)message;
    VoiceChatDialog voiceChatDialog=VoiceChatDialog.getVoiceChatDialog(msg.getGroup());
    if (voiceChatDialog == null) {
      try {
        voiceChatDialog=new VoiceChatDialog(this,cell.getCellID(),session,msg.getCaller());
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + e.getMessage());
        return;
      }
    }
    voiceChatDialog.requestToJoin(msg.getGroup(),msg.getCaller(),msg.getCalleeList(),msg.getChatType());
  }
 else   if (message instanceof VoiceChatBusyMessage) {
    VoiceChatBusyMessage msg=(VoiceChatBusyMessage)message;
    new VoiceChatBusyDialog(msg.getGroup(),msg.getCallee());
  }
 else   if (message instanceof VoiceChatInfoResponseMessage) {
    VoiceChatInfoResponseMessage msg=(VoiceChatInfoResponseMessage)message;
    VoiceChatDialog voiceChatDialog=VoiceChatDialog.getVoiceChatDialog(msg.getGroup());
    if (voiceChatDialog == null) {
      logger.warning(""String_Node_Str"" + msg.getGroup());
    }
 else {
      voiceChatDialog.setChatters(msg.getChatters());
    }
  }
 else   if (message instanceof SpeakingMessage) {
    SpeakingMessage msg=(SpeakingMessage)message;
    PresenceInfo info=pm.getPresenceInfo(msg.getCallID());
    if (info == null) {
      logger.warning(""String_Node_Str"" + msg.getCallID());
      return;
    }
    pm.setSpeaking(info,msg.isSpeaking());
    if (userListJFrame != null) {
      userListJFrame.setUserList();
    }
    AvatarNameEvent avatarNameEvent;
    if (msg.isSpeaking()) {
      avatarNameEvent=new AvatarNameEvent(EventType.STARTED_SPEAKING,info.userID.getUsername(),info.usernameAlias);
    }
 else {
      avatarNameEvent=new AvatarNameEvent(EventType.STOPPED_SPEAKING,info.userID.getUsername(),info.usernameAlias);
    }
    InputManager.inputManager().postEvent(avatarNameEvent);
  }
 else   if (message instanceof MuteCallMessage) {
    MuteCallMessage msg=(MuteCallMessage)message;
    PresenceInfo info=pm.getPresenceInfo(msg.getCallID());
    if (info == null) {
      logger.warning(""String_Node_Str"" + msg.getCallID());
      return;
    }
    pm.setMute(info,msg.isMuted());
    if (userListJFrame != null) {
      userListJFrame.setUserList();
    }
    AvatarNameEvent avatarNameEvent;
    if (msg.isMuted()) {
      avatarNameEvent=new AvatarNameEvent(EventType.MUTE,info.userID.getUsername(),info.usernameAlias);
    }
 else {
      avatarNameEvent=new AvatarNameEvent(EventType.UNMUTE,info.userID.getUsername(),info.usernameAlias);
    }
    InputManager.inputManager().postEvent(avatarNameEvent);
  }
 else   if (message instanceof ConeOfSilenceEnterExitMessage) {
    ConeOfSilenceEnterExitMessage msg=(ConeOfSilenceEnterExitMessage)message;
    pm.setEnteredConeOfSilence(presenceInfo,msg.entered());
    PresenceInfo info=pm.getPresenceInfo(msg.getCallID());
    if (info == null) {
      logger.warning(""String_Node_Str"" + msg.getCallID());
      return;
    }
    AvatarNameEvent avatarNameEvent;
    if (msg.entered()) {
      avatarNameEvent=new AvatarNameEvent(EventType.ENTERED_CONE_OF_SILENCE,info.userID.getUsername(),info.usernameAlias);
    }
 else {
      avatarNameEvent=new AvatarNameEvent(EventType.EXITED_CONE_OF_SILENCE,info.userID.getUsername(),info.usernameAlias);
    }
    InputManager.inputManager().postEvent(avatarNameEvent);
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}"
46232,"@Override public void setStatus(CellStatus status){
switch (status) {
case DISK:
    if (msgReceiver != null) {
      msgReceiver=null;
    }
  break;
case BOUNDS:
if (msgReceiver == null) {
  msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
    public void messageReceived(    CellMessage message){
    }
  }
;
  channelComp=cell.getComponent(ChannelComponent.class);
  ProximityComponent comp=new ProximityComponent(cell);
  BoundingVolume[] boundingVolume=new BoundingVolume[1];
  boundingVolume[0]=cell.getLocalBounds();
  comp.addProximityListener(this,boundingVolume);
  cell.addComponent(comp);
}
break;
}
}","@Override public void setStatus(CellStatus status){
switch (status) {
case DISK:
    if (msgReceiver != null) {
      channelComp.removeMessageReceiver(CellServerComponentMessage.class);
      msgReceiver=null;
    }
  break;
case BOUNDS:
if (msgReceiver == null) {
  msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
    public void messageReceived(    CellMessage message){
    }
  }
;
  channelComp=cell.getComponent(ChannelComponent.class);
  channelComp.addMessageReceiver(CellServerComponentMessage.class,msgReceiver);
  ProximityComponent comp=new ProximityComponent(cell);
  BoundingVolume[] boundingVolume=new BoundingVolume[1];
  boundingVolume[0]=cell.getLocalBounds();
  comp.addProximityListener(this,boundingVolume);
  cell.addComponent(comp);
}
break;
}
}"
46233,"public ConeOfSilenceEnterExitMessage(CellID cellID,boolean entered){
  super(cellID);
  this.entered=entered;
}","public ConeOfSilenceEnterExitMessage(String callID,boolean entered){
  this.callID=callID;
  this.entered=entered;
}"
46234,"public void cellEntered(String callId){
  logger.info(callId + ""String_Node_Str"" + name+ ""String_Node_Str""+ callId);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    AudioGroupSetup ags=new AudioGroupSetup();
    ags.audioGroupListener=this;
    ags.spatializer=new FullVolumeSpatializer();
    ags.spatializer.setAttenuator(DefaultSpatializer.DEFAULT_MAXIMUM_VOLUME);
    audioGroup=vm.createAudioGroup(name,ags);
  }
  audioGroup.addPlayer(player,new AudioGroupPlayerInfo(true,AudioGroupPlayerInfo.ChatType.EXCLUSIVE));
  WonderlandClientSender sender=WonderlandContext.getCommsManager().getSender(AudioManagerConnectionType.CONNECTION_TYPE);
  sender.send(new ConeOfSilenceEnterExitMessage(cellID,true));
}","public void cellEntered(String callId){
  logger.info(callId + ""String_Node_Str"" + name+ ""String_Node_Str""+ callId);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    AudioGroupSetup ags=new AudioGroupSetup();
    ags.audioGroupListener=this;
    ags.spatializer=new FullVolumeSpatializer();
    ags.spatializer.setAttenuator(DefaultSpatializer.DEFAULT_MAXIMUM_VOLUME);
    audioGroup=vm.createAudioGroup(name,ags);
  }
  audioGroup.addPlayer(player,new AudioGroupPlayerInfo(true,AudioGroupPlayerInfo.ChatType.EXCLUSIVE));
  WonderlandClientSender sender=WonderlandContext.getCommsManager().getSender(AudioManagerConnectionType.CONNECTION_TYPE);
  sender.send(new ConeOfSilenceEnterExitMessage(callId,true));
}"
46235,"public void cellExited(String callId){
  logger.info(callId + ""String_Node_Str"" + name+ ""String_Node_Str""+ callId);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    logger.warning(""String_Node_Str"" + name);
    return;
  }
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  audioGroup.removePlayer(player);
  WonderlandClientSender sender=WonderlandContext.getCommsManager().getSender(AudioManagerConnectionType.CONNECTION_TYPE);
  sender.send(new ConeOfSilenceEnterExitMessage(cellID,false));
}","public void cellExited(String callId){
  logger.info(callId + ""String_Node_Str"" + name+ ""String_Node_Str""+ callId);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    logger.warning(""String_Node_Str"" + name);
    return;
  }
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  audioGroup.removePlayer(player);
  WonderlandClientSender sender=WonderlandContext.getCommsManager().getSender(AudioManagerConnectionType.CONNECTION_TYPE);
  sender.send(new ConeOfSilenceEnterExitMessage(callId,false));
}"
46236,"public <T extends CellServerState>T getDefaultCellServerState(Properties props){
  ConeOfSilenceCellServerState cellServerState=new ConeOfSilenceCellServerState();
  cellServerState.setName(""String_Node_Str"");
  cellServerState.setFullVolumeRadius((float)1.5);
  Vector3f axis=new Vector3f((float)1,(float)0,(float)0);
  Logger.getLogger(ConeOfSilenceCellFactory.class.getName()).warning(""String_Node_Str"");
  return (T)cellServerState;
}","public <T extends CellServerState>T getDefaultCellServerState(Properties props){
  ConeOfSilenceCellServerState cellServerState=new ConeOfSilenceCellServerState();
  cellServerState.setName(""String_Node_Str"");
  cellServerState.setFullVolumeRadius((float)1.5);
  Vector3f axis=new Vector3f((float)1,(float)0,(float)0);
  Logger.getLogger(ConeOfSilenceCellFactory.class.getName()).fine(""String_Node_Str"");
  return (T)cellServerState;
}"
46237,"public <T extends CellServerState>T getDefaultCellServerState(Properties props){
  ConeOfSilenceCellServerState cellServerState=new ConeOfSilenceCellServerState();
  cellServerState.setName(""String_Node_Str"");
  cellServerState.setFullVolumeRadius((float)1.5);
  Vector3f axis=new Vector3f((float)1,(float)0,(float)0);
  Logger.getLogger(ConeOfSilenceCellFactory.class.getName()).fine(""String_Node_Str"");
  return (T)cellServerState;
}","public <T extends CellServerState>T getDefaultCellServerState(Properties props){
  ConeOfSilenceCellServerState cellServerState=new ConeOfSilenceCellServerState();
  cellServerState.setName(""String_Node_Str"");
  cellServerState.setFullVolumeRadius((float)1.5);
  Logger.getLogger(ConeOfSilenceCellFactory.class.getName()).fine(""String_Node_Str"");
  return (T)cellServerState;
}"
46238,"private boolean alreadyInMaps(PresenceInfo presenceInfo){
  PresenceInfo info=cellIDMap.get(presenceInfo.cellID);
  if (info == null || info.equals(presenceInfo) == false) {
    return false;
  }
  if (presenceInfo.clientID != null) {
    info=sessionIDMap.get(presenceInfo.clientID);
    if (info == null || info.equals(presenceInfo) == false) {
      return false;
    }
  }
  info=userIDMap.get(presenceInfo.userID);
  if (info == null || info.equals(presenceInfo) == false) {
    return false;
  }
  if (presenceInfo.callID != null) {
    info=callIDMap.get(presenceInfo.callID);
    if (info == null || info.equals(presenceInfo) == false) {
      return false;
    }
  }
  return true;
}","private boolean alreadyInMaps(PresenceInfo presenceInfo){
  PresenceInfo info=cellIDMap.get(presenceInfo.cellID);
  if (info != null && info.equals(presenceInfo)) {
    return true;
  }
  if (presenceInfo.clientID != null) {
    info=sessionIDMap.get(presenceInfo.clientID);
    if (info != null && info.equals(presenceInfo)) {
      return true;
    }
  }
  info=userIDMap.get(presenceInfo.userID);
  if (info != null && info.equals(presenceInfo)) {
    return true;
  }
  if (presenceInfo.callID != null) {
    info=callIDMap.get(presenceInfo.callID);
    if (info != null && info.equals(presenceInfo)) {
      return true;
    }
  }
  return false;
}"
46239,"@Override public void setStatus(CellStatus status){
}","@Override public void setStatus(CellStatus status){
switch (status) {
case DISK:
    if (msgReceiver != null) {
      channelComp.removeMessageReceiver(CellServerComponentMessage.class);
      msgReceiver=null;
    }
  break;
case BOUNDS:
if (msgReceiver == null) {
  msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
    public void messageReceived(    CellMessage message){
    }
  }
;
}
channelComp=cell.getComponent(ChannelComponent.class);
channelComp.addMessageReceiver(CellServerComponentMessage.class,msgReceiver);
break;
}
}"
46240,"/** 
 * {@inheritDoc} 
 */
public void setSize(float width,float height){
  quad.initialize(width,height);
}","/** 
 * {@inheritDoc} <br><br> Note: this method resets the texture attributes of the quad to display the entire contents of the texture image on the quad. It undoes any previous calls to  <code>setTextureCoords</code> for this quad. If you have previously called  <code>setTextureCoords</code> to display a subset of the image, you should  call <code>setTextureCoords</code> again to set the appropriate texture coordinates for the new size specified via this <code>setSize</code> call.
 */
public void setSize(float width,float height){
  quad.initialize(width,height);
}"
46241,"/** 
 * Specifies whether the view entity is to be displayed in ortho mode (""on the glass""). Update if specified.
 */
public synchronized void setOrtho(boolean ortho,boolean update){
  if (this.ortho == ortho)   return;
  this.ortho=ortho;
  changeMask|=CHANGED_ORTHO;
  if (update) {
    update();
  }
}","/** 
 * Specifies whether the view entity is to be displayed in ortho mode (""on the glass""). Update if specified.
 */
public synchronized void setOrtho(boolean ortho,boolean update){
  if (this.ortho == ortho)   return;
  logger.info(""String_Node_Str"" + ortho);
  this.ortho=ortho;
  changeMask|=CHANGED_ORTHO;
  if (update) {
    update();
  }
}"
46242,"/** 
 * Processes attribute changes. Should be called within a synchronized block. 
 */
protected void processChanges(){
  boolean windowNeedsValidate=false;
  logger.fine(""String_Node_Str"" + this);
  logger.fine(""String_Node_Str"" + type);
  if ((changeMask & (CHANGED_TOPOLOGY | CHANGED_ORTHO)) != 0) {
    logger.fine(""String_Node_Str"");
    int chgMask=changeMask & ~CATEGORY_CHANGE_MASK;
switch (attachState) {
case ATTACHED_TO_ENTITY:
      if (parentEntity != null) {
        logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
        RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
        sgChangeAttachPointSet(rc,null);
        parentEntity.removeEntity(entity);
        parentEntity=null;
      }
    break;
case ATTACHED_TO_WORLD:
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().removeEntity(entity);
break;
}
attachState=AttachState.DETACHED;
if ((chgMask & CHANGED_GEOMETRY) != 0) {
if (geometryNode != null) {
sgChangeGeometryDetachFromView(viewNode,geometryNode);
if (geometrySelfCreated) {
sgChangeGeometryCleanup(geometryNode);
geometrySelfCreated=false;
}
}
if (newGeometryNode != null) {
geometryNode=newGeometryNode;
newGeometryNode=null;
}
 else {
geometryNode=new GeometryNodeQuad(this);
geometrySelfCreated=true;
}
sgChangeGeometryAttachToView(viewNode,geometryNode);
}
if ((chgMask & (CHANGED_TEXTURE | CHANGED_GEOMETRY)) != 0) {
logger.fine(""String_Node_Str"");
if (geometryNode != null) {
sgChangeGeometryTextureSet(geometryNode,getWindow().getTexture());
windowNeedsValidate=true;
}
}
if (isActuallyVisible()) {
if (ortho) {
logger.fine(""String_Node_Str"");
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().addEntity(entity);
attachState=AttachState.ATTACHED_TO_WORLD;
entity.getComponent(RenderComponent.class).setOrtho(true);
}
 else {
logger.fine(""String_Node_Str"");
parentEntity=getParentEntity();
if (parentEntity == null) {
logger.warning(""String_Node_Str"");
}
 else {
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
parentEntity.addEntity(entity);
RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
RenderComponent rcParent=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
sgChangeAttachPointSet(rc,rcParent.getSceneRoot());
attachState=AttachState.ATTACHED_TO_ENTITY;
entity.getComponent(RenderComponent.class).setOrtho(false);
}
}
}
if ((chgMask & CHANGED_ORTHO) != 0) {
logger.fine(""String_Node_Str"" + ortho);
for (View2DEntity child : children) {
child.setOrtho(ortho);
}
}
if ((chgMask & CHANGED_VISIBLE) != 0) {
logger.fine(""String_Node_Str"");
for (View2DEntity child : children) {
child.updateVisibility();
}
}
}
if ((changeMask & (CHANGED_FRAME | CHANGED_ORTHO | CHANGED_TYPE)) != 0) {
logger.fine(""String_Node_Str"");
int chgMask=changeMask & ~CATEGORY_CHANGE_MASK;
if ((chgMask & (CHANGED_DECORATED | CHANGED_ORTHO)) != 0) {
if (decorated && !ortho) {
if (!hasFrame()) {
logger.fine(""String_Node_Str"");
attachFrame();
}
}
 else {
if (hasFrame()) {
logger.fine(""String_Node_Str"");
detachFrame();
}
}
}
if ((chgMask & CHANGED_TYPE) != 0) {
if (decorated && !ortho) {
reattachFrame();
}
}
}
if ((changeMask & CHANGED_Z_ORDER) != 0) {
logger.fine(""String_Node_Str"");
sgChangeGeometryOrthoZOrderSet(geometryNode,zOrder);
}
if ((changeMask & CHANGED_ORTHO) != 0) {
if (isActuallyVisible()) {
entity.getComponent(RenderComponent.class).setOrtho(ortho);
}
sgChangeViewNodeOrthoSet(viewNode,ortho);
}
if ((changeMask & (CHANGED_SIZE | CHANGED_ORTHO | CHANGED_PIXEL_SCALE)) != 0) {
float width=getDisplayerLocalWidth();
float height=getDisplayerLocalHeight();
sgChangeGeometrySizeSet(geometryNode,width,height);
}
if ((changeMask & (CHANGED_TEX_COORDS | CHANGED_GEOMETRY)) != 0) {
float width=(float)sizeApp.width;
float height=(float)sizeApp.height;
Image image=getWindow().getTexture().getImage();
float widthRatio=width / image.getWidth();
float heightRatio=height / image.getHeight();
sgChangeGeometryTexCoordsSet(geometryNode,widthRatio,heightRatio);
windowNeedsValidate=true;
}
if ((changeMask & (CHANGED_OFFSET_STACK_TRANSFORM | CHANGED_ORTHO | CHANGED_Z_ORDER| CHANGED_PIXEL_SCALE)) != 0) {
CellTransform transform=null;
switch (type) {
case UNKNOWN:
case PRIMARY:
transform=new CellTransform(null,null,null);
break;
case SECONDARY:
case POPUP:
transform=calcOffsetStackTransform();
}
sgChangeGeometryTransformOffsetStackSet(geometryNode,transform);
}
if ((changeMask & (CHANGED_USER_TRANSFORM | CHANGED_ORTHO | CHANGED_LOCATION_ORTHO| CHANGED_TYPE)) != 0) {
CellTransform deltaTransform;
switch (type) {
case UNKNOWN:
case PRIMARY:
deltaTransform=calcUserDeltaTransform();
updatePrimaryTransform(deltaTransform);
break;
case SECONDARY:
deltaTransform=calcUserDeltaTransform();
sgChangeTransformUserPostMultiply(viewNode,deltaTransform);
break;
case POPUP:
sgChangeTransformUserSet(viewNode,new CellTransform(null,null,null));
}
}
sgProcessChanges();
frameUpdate();
if (windowNeedsValidate) {
if (window instanceof WindowSwing) {
((WindowSwing)window).validate();
}
}
}","/** 
 * Processes attribute changes. Should be called within a synchronized block. 
 */
protected void processChanges(){
  boolean windowNeedsValidate=false;
  logger.fine(""String_Node_Str"" + this);
  logger.fine(""String_Node_Str"" + type);
  if ((changeMask & (CHANGED_TOPOLOGY | CHANGED_ORTHO)) != 0) {
    logger.fine(""String_Node_Str"");
    int chgMask=changeMask & ~CATEGORY_CHANGE_MASK;
switch (attachState) {
case ATTACHED_TO_ENTITY:
      if (parentEntity != null) {
        logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
        RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
        sgChangeAttachPointSet(rc,null);
        parentEntity.removeEntity(entity);
        parentEntity=null;
      }
    break;
case ATTACHED_TO_WORLD:
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().removeEntity(entity);
break;
}
attachState=AttachState.DETACHED;
if ((chgMask & CHANGED_GEOMETRY) != 0) {
if (geometryNode != null) {
sgChangeGeometryDetachFromView(viewNode,geometryNode);
if (geometrySelfCreated) {
sgChangeGeometryCleanup(geometryNode);
geometrySelfCreated=false;
}
}
if (newGeometryNode != null) {
geometryNode=newGeometryNode;
newGeometryNode=null;
}
 else {
geometryNode=new GeometryNodeQuad(this);
geometrySelfCreated=true;
}
sgChangeGeometryAttachToView(viewNode,geometryNode);
}
if ((chgMask & (CHANGED_TEXTURE | CHANGED_GEOMETRY)) != 0) {
logger.fine(""String_Node_Str"");
if (geometryNode != null) {
sgChangeGeometryTextureSet(geometryNode,getWindow().getTexture());
windowNeedsValidate=true;
}
}
if (isActuallyVisible()) {
if (ortho) {
logger.fine(""String_Node_Str"");
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().addEntity(entity);
attachState=AttachState.ATTACHED_TO_WORLD;
entity.getComponent(RenderComponent.class).setOrtho(true);
}
 else {
logger.fine(""String_Node_Str"");
parentEntity=getParentEntity();
if (parentEntity == null) {
logger.warning(""String_Node_Str"");
}
 else {
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
parentEntity.addEntity(entity);
RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
RenderComponent rcParent=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
sgChangeAttachPointSet(rc,rcParent.getSceneRoot());
attachState=AttachState.ATTACHED_TO_ENTITY;
entity.getComponent(RenderComponent.class).setOrtho(false);
}
}
}
if ((chgMask & CHANGED_ORTHO) != 0) {
logger.fine(""String_Node_Str"" + ortho);
for (View2DEntity child : children) {
child.setOrtho(ortho);
}
}
if ((chgMask & CHANGED_VISIBLE) != 0) {
logger.fine(""String_Node_Str"");
for (View2DEntity child : children) {
child.updateVisibility();
}
}
}
if ((changeMask & (CHANGED_FRAME | CHANGED_ORTHO | CHANGED_TYPE)) != 0) {
logger.fine(""String_Node_Str"");
int chgMask=changeMask & ~CATEGORY_CHANGE_MASK;
if ((chgMask & (CHANGED_DECORATED | CHANGED_ORTHO)) != 0) {
if (decorated && !ortho) {
if (!hasFrame()) {
logger.fine(""String_Node_Str"");
attachFrame();
}
}
 else {
if (hasFrame()) {
logger.fine(""String_Node_Str"");
detachFrame();
}
}
}
if ((chgMask & CHANGED_TYPE) != 0) {
if (decorated && !ortho) {
reattachFrame();
}
}
}
if ((changeMask & CHANGED_Z_ORDER) != 0) {
logger.fine(""String_Node_Str"");
sgChangeGeometryOrthoZOrderSet(geometryNode,zOrder);
}
if ((changeMask & CHANGED_ORTHO) != 0) {
if (isActuallyVisible()) {
entity.getComponent(RenderComponent.class).setOrtho(ortho);
}
sgChangeViewNodeOrthoSet(viewNode,ortho);
}
if ((changeMask & (CHANGED_SIZE | CHANGED_ORTHO | CHANGED_PIXEL_SCALE)) != 0) {
float width=getDisplayerLocalWidth();
float height=getDisplayerLocalHeight();
sgChangeGeometrySizeSet(geometryNode,width,height);
changeMask|=CHANGED_TEX_COORDS;
}
if ((changeMask & (CHANGED_TEX_COORDS | CHANGED_GEOMETRY)) != 0) {
float width=(float)sizeApp.width;
float height=(float)sizeApp.height;
Image image=getWindow().getTexture().getImage();
float widthRatio=width / image.getWidth();
float heightRatio=height / image.getHeight();
sgChangeGeometryTexCoordsSet(geometryNode,widthRatio,heightRatio);
windowNeedsValidate=true;
}
if ((changeMask & (CHANGED_OFFSET_STACK_TRANSFORM | CHANGED_ORTHO | CHANGED_Z_ORDER| CHANGED_PIXEL_SCALE)) != 0) {
CellTransform transform=null;
switch (type) {
case UNKNOWN:
case PRIMARY:
transform=new CellTransform(null,null,null);
break;
case SECONDARY:
case POPUP:
transform=calcOffsetStackTransform();
}
sgChangeGeometryTransformOffsetStackSet(geometryNode,transform);
}
if ((changeMask & (CHANGED_USER_TRANSFORM | CHANGED_ORTHO | CHANGED_LOCATION_ORTHO| CHANGED_TYPE)) != 0) {
CellTransform deltaTransform;
switch (type) {
case UNKNOWN:
case PRIMARY:
deltaTransform=calcUserDeltaTransform();
updatePrimaryTransform(deltaTransform);
break;
case SECONDARY:
deltaTransform=calcUserDeltaTransform();
sgChangeTransformUserPostMultiply(viewNode,deltaTransform);
break;
case POPUP:
sgChangeTransformUserSet(viewNode,new CellTransform(null,null,null));
}
}
sgProcessChanges();
frameUpdate();
if (windowNeedsValidate) {
if (window instanceof WindowSwing) {
((WindowSwing)window).validate();
}
}
}"
46243,"/** 
 * {@inheritDoc}
 */
@Override protected CellClientState getClientState(CellClientState cellClientState,WonderlandClientID clientID,ClientCapabilities capabilities){
  if (clientState == null) {
    clientState=new AppConventionalCellClientState();
  }
  populateClientState(clientState);
  return clientState;
}","/** 
 * {@inheritDoc}
 */
@Override protected CellClientState getClientState(CellClientState cellClientState,WonderlandClientID clientID,ClientCapabilities capabilities){
  if (clientState == null) {
    clientState=new AppConventionalCellClientState();
  }
  populateClientState(clientState);
  return super.getClientState(clientState,clientID,capabilities);
}"
46244,"public URL locateResource(String resource){
  try {
    if (resource.startsWith(""String_Node_Str"")) {
      URL url=getAssetURL(""String_Node_Str"" + modulename + resource);
      return url;
    }
 else {
      String urlStr=trimUrlStr(""String_Node_Str"" + modulename + path+ resource);
      URL url=getAssetURL(urlStr);
      return url;
    }
  }
 catch (  MalformedURLException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + resource,ex);
    return null;
  }
}","public URL locateResource(String resource){
  System.err.println(""String_Node_Str"" + resource);
  System.err.println(""String_Node_Str"" + modulename + ""String_Node_Str""+ path);
  try {
    if (resource.startsWith(""String_Node_Str"")) {
      URL url=getAssetURL(protocol + ""String_Node_Str"" + modulename+ resource);
      System.err.println(""String_Node_Str"" + url.toExternalForm());
      return url;
    }
 else {
      String urlStr=trimUrlStr(protocol + ""String_Node_Str"" + modulename+ path+ resource);
      URL url=getAssetURL(urlStr);
      System.err.println(""String_Node_Str"" + url.toExternalForm());
      return url;
    }
  }
 catch (  MalformedURLException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + resource,ex);
    return null;
  }
}"
46245,"/** 
 * Locate resources for the given file
 * @param url
 */
public AssetResourceLocator(URL url){
  if (url.getUserInfo() == null) {
    modulename=url.getHost();
  }
 else {
    modulename=url.getUserInfo();
  }
  path=url.getPath();
  path=path.substring(0,path.lastIndexOf('/') + 1);
}","/** 
 * Locate resources for the given file
 * @param url
 */
public AssetResourceLocator(URL url){
  System.out.println(""String_Node_Str"" + url.toExternalForm());
  if (url.getUserInfo() == null) {
    modulename=url.getHost();
  }
 else {
    modulename=url.getUserInfo();
  }
  path=url.getPath();
  path=path.substring(0,path.lastIndexOf('/') + 1);
  protocol=url.getProtocol();
  System.out.println(""String_Node_Str"" + modulename + ""String_Node_Str""+ path);
}"
46246,"/** 
 * Default constructor 
 */
private DragAndDropManager(){
  dataFlavorHandlerMap=new HashMap();
  registerDataFlavorHandler(new FileListImportDataFlavorHandler());
  registerDataFlavorHandler(new URLDataFlavorHandler());
}","/** 
 * Default constructor 
 */
private DragAndDropManager(){
  dataFlavorHandlerMap=new HashMap();
  registerDataFlavorHandler(new FileListDataFlavorHandler());
  registerDataFlavorHandler(new URLDataFlavorHandler());
  registerDataFlavorHandler(new URIListDataFlavorHandler());
}"
46247,"/** 
 */
public void handleDrop(Transferable transferable,DataFlavor dataFlavor,Point dropLocation){
  URL url=null;
  try {
    url=(URL)transferable.getTransferData(dataFlavor);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
catch (  UnsupportedFlavorException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
  System.out.println(""String_Node_Str"" + url.toString());
  System.out.println(""String_Node_Str"" + url.toExternalForm());
  String extension=DragAndDropManager.getFileExtension(url.getFile());
  CellRegistry registry=CellRegistry.getCellRegistry();
  Set<CellFactorySPI> factories=registry.getCellFactoriesByExtension(extension);
  if (factories == null) {
    logger.warning(""String_Node_Str"" + extension);
    JFrame frame=JmeClientMain.getFrame().getFrame();
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + url.toExternalForm());
    return;
  }
  CellFactorySPI factory=factories.iterator().next();
  Properties props=new Properties();
  props.put(""String_Node_Str"",url.toExternalForm());
  CellServerState state=factory.getDefaultCellServerState(props);
  try {
    CellUtils.createCell(state,5.0f);
  }
 catch (  CellCreationException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + url,excp);
  }
}","/** 
 */
public void handleDrop(Transferable transferable,DataFlavor dataFlavor,Point dropLocation){
  URL url=null;
  try {
    url=(URL)transferable.getTransferData(dataFlavor);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
catch (  UnsupportedFlavorException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
  URLDataFlavorHandler.launchCellFromURL(url);
}"
46248,"private void writeDirectoryTree(JarOutputStream jos,File dir,int parentTrimStart,Set<String> written) throws IOException {
  String dirName=dir.getAbsolutePath().substring(parentTrimStart,dir.getAbsolutePath().length());
  jos.putNextEntry(new JarEntry(dirName + ""String_Node_Str""));
  File[] files=dir.listFiles();
  if (files == null)   return;
  for (  File f : files) {
    if (f.isDirectory()) {
      writeDirectoryTree(jos,f,parentTrimStart,written);
    }
 else {
      String path=f.getAbsolutePath().substring(parentTrimStart,f.getAbsolutePath().length());
      jos.putNextEntry(new JarEntry(path));
      FileUtils.copyFile(new FileInputStream(f),jos);
    }
  }
}","private void writeDirectoryTree(JarOutputStream jos,File dir,int parentTrimStart,Set<String> written) throws IOException {
  String dirName=dir.getAbsolutePath().substring(parentTrimStart,dir.getAbsolutePath().length());
  jos.putNextEntry(new JarEntry(dirName + ""String_Node_Str""));
  File[] files=dir.listFiles();
  if (files == null)   return;
  for (  File f : files) {
    if (f.isDirectory()) {
      writeDirectoryTree(jos,f,parentTrimStart,written);
    }
 else {
      String path=f.getAbsolutePath().substring(parentTrimStart,f.getAbsolutePath().length());
      if (File.separatorChar == '\\') {
        path=path.replace('\\','/');
      }
      jos.putNextEntry(new JarEntry(path));
      FileUtils.copyFile(new FileInputStream(f),jos);
    }
  }
}"
46249,"public void actionPerformed(ActionEvent e){
  ContentBrowserJDialog contentBrowserFrame;
  if (browserDialogRef == null || browserDialogRef.get() == null) {
    contentBrowserFrame=new ContentBrowserJDialog(repo);
    contentBrowserFrame.setModal(false);
    contentBrowserFrame.setActionName(BrowserAction.OK_ACTION,""String_Node_Str"");
    contentBrowserFrame.setActionName(BrowserAction.CANCEL_ACTION,""String_Node_Str"");
    contentBrowserFrame.addContentBrowserListener(new ContentBrowserListener(){
      public void okAction(      String uri){
        int index=uri.lastIndexOf(""String_Node_Str"");
        if (index == -1) {
          logger.warning(""String_Node_Str"" + uri);
          return;
        }
        String extension=uri.substring(index + 1);
        CellRegistry registry=CellRegistry.getCellRegistry();
        Set<CellFactorySPI> factories=registry.getCellFactoriesByExtension(extension);
        if (factories == null) {
          logger.warning(""String_Node_Str"" + extension);
        }
        CellFactorySPI factory=factories.iterator().next();
        Properties props=new Properties();
        props.put(""String_Node_Str"",uri);
        CellServerState state=factory.getDefaultCellServerState(props);
        try {
          CellUtils.createCell(state,5.0f);
        }
 catch (        CellCreationException excp) {
          logger.log(Level.WARNING,""String_Node_Str"" + uri,excp);
        }
      }
      public void cancelAction(){
      }
    }
);
    browserDialogRef=new WeakReference(contentBrowserFrame);
  }
 else {
    contentBrowserFrame=browserDialogRef.get();
  }
  if (contentBrowserFrame.isVisible() == false) {
    contentBrowserFrame.setVisible(true);
  }
}","public void actionPerformed(ActionEvent e){
  ContentBrowserJDialog contentBrowserFrame;
  if (browserDialogRef == null || browserDialogRef.get() == null) {
    contentBrowserFrame=new ContentBrowserJDialog(loginInfo);
    contentBrowserFrame.setModal(false);
    contentBrowserFrame.setActionName(BrowserAction.OK_ACTION,""String_Node_Str"");
    contentBrowserFrame.setActionName(BrowserAction.CANCEL_ACTION,""String_Node_Str"");
    contentBrowserFrame.addContentBrowserListener(new ContentBrowserListener(){
      public void okAction(      String uri){
        int index=uri.lastIndexOf(""String_Node_Str"");
        if (index == -1) {
          logger.warning(""String_Node_Str"" + uri);
          return;
        }
        String extension=uri.substring(index + 1);
        CellRegistry registry=CellRegistry.getCellRegistry();
        Set<CellFactorySPI> factories=registry.getCellFactoriesByExtension(extension);
        if (factories == null) {
          logger.warning(""String_Node_Str"" + extension);
        }
        CellFactorySPI factory=factories.iterator().next();
        Properties props=new Properties();
        props.put(""String_Node_Str"",uri);
        CellServerState state=factory.getDefaultCellServerState(props);
        try {
          CellUtils.createCell(state,5.0f);
        }
 catch (        CellCreationException excp) {
          logger.log(Level.WARNING,""String_Node_Str"" + uri,excp);
        }
      }
      public void cancelAction(){
      }
    }
);
    browserDialogRef=new WeakReference(contentBrowserFrame);
  }
 else {
    contentBrowserFrame=browserDialogRef.get();
  }
  if (contentBrowserFrame.isVisible() == false) {
    contentBrowserFrame.setVisible(true);
  }
}"
46250,"public void initialize(final ServerSessionManager loginInfo){
  ContentRepositoryRegistry registry=ContentRepositoryRegistry.getInstance();
  final ContentRepository repo=registry.getRepository(loginInfo);
  Action launchAction=new AbstractAction(""String_Node_Str""){
    public synchronized void actionPerformed(    ActionEvent e){
      if (frame == null) {
        frame=new BrowserFrame(repo);
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          frame.setVisible(true);
        }
      }
);
    }
  }
;
  JmeClientMain.getFrame().addToToolMenu(new JMenuItem(launchAction));
  JMenuItem browserItem=new JMenuItem(""String_Node_Str"");
  browserItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ContentBrowserJDialog contentBrowserFrame;
      if (browserDialogRef == null || browserDialogRef.get() == null) {
        contentBrowserFrame=new ContentBrowserJDialog(repo);
        contentBrowserFrame.setModal(false);
        contentBrowserFrame.setActionName(BrowserAction.OK_ACTION,""String_Node_Str"");
        contentBrowserFrame.setActionName(BrowserAction.CANCEL_ACTION,""String_Node_Str"");
        contentBrowserFrame.addContentBrowserListener(new ContentBrowserListener(){
          public void okAction(          String uri){
            int index=uri.lastIndexOf(""String_Node_Str"");
            if (index == -1) {
              logger.warning(""String_Node_Str"" + uri);
              return;
            }
            String extension=uri.substring(index + 1);
            CellRegistry registry=CellRegistry.getCellRegistry();
            Set<CellFactorySPI> factories=registry.getCellFactoriesByExtension(extension);
            if (factories == null) {
              logger.warning(""String_Node_Str"" + extension);
            }
            CellFactorySPI factory=factories.iterator().next();
            Properties props=new Properties();
            props.put(""String_Node_Str"",uri);
            CellServerState state=factory.getDefaultCellServerState(props);
            try {
              CellUtils.createCell(state,5.0f);
            }
 catch (            CellCreationException excp) {
              logger.log(Level.WARNING,""String_Node_Str"" + uri,excp);
            }
          }
          public void cancelAction(){
          }
        }
);
        browserDialogRef=new WeakReference(contentBrowserFrame);
      }
 else {
        contentBrowserFrame=browserDialogRef.get();
      }
      if (contentBrowserFrame.isVisible() == false) {
        contentBrowserFrame.setVisible(true);
      }
    }
  }
);
  JmeClientMain.getFrame().addToToolMenu(browserItem);
  ContentBrowserManager manager=ContentBrowserManager.getContentBrowserManager();
  manager.setDefaultContentBrowser(new ContentBrowserJDialog(repo));
}","public void initialize(final ServerSessionManager loginInfo){
  Action launchAction=new AbstractAction(""String_Node_Str""){
    public synchronized void actionPerformed(    ActionEvent e){
      if (frame == null) {
        ContentRepositoryRegistry registry=ContentRepositoryRegistry.getInstance();
        ContentRepository repo=registry.getRepository(loginInfo);
        frame=new BrowserFrame(repo);
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          frame.setVisible(true);
        }
      }
);
    }
  }
;
  JmeClientMain.getFrame().addToToolMenu(new JMenuItem(launchAction));
  JMenuItem browserItem=new JMenuItem(""String_Node_Str"");
  browserItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ContentBrowserJDialog contentBrowserFrame;
      if (browserDialogRef == null || browserDialogRef.get() == null) {
        contentBrowserFrame=new ContentBrowserJDialog(loginInfo);
        contentBrowserFrame.setModal(false);
        contentBrowserFrame.setActionName(BrowserAction.OK_ACTION,""String_Node_Str"");
        contentBrowserFrame.setActionName(BrowserAction.CANCEL_ACTION,""String_Node_Str"");
        contentBrowserFrame.addContentBrowserListener(new ContentBrowserListener(){
          public void okAction(          String uri){
            int index=uri.lastIndexOf(""String_Node_Str"");
            if (index == -1) {
              logger.warning(""String_Node_Str"" + uri);
              return;
            }
            String extension=uri.substring(index + 1);
            CellRegistry registry=CellRegistry.getCellRegistry();
            Set<CellFactorySPI> factories=registry.getCellFactoriesByExtension(extension);
            if (factories == null) {
              logger.warning(""String_Node_Str"" + extension);
            }
            CellFactorySPI factory=factories.iterator().next();
            Properties props=new Properties();
            props.put(""String_Node_Str"",uri);
            CellServerState state=factory.getDefaultCellServerState(props);
            try {
              CellUtils.createCell(state,5.0f);
            }
 catch (            CellCreationException excp) {
              logger.log(Level.WARNING,""String_Node_Str"" + uri,excp);
            }
          }
          public void cancelAction(){
          }
        }
);
        browserDialogRef=new WeakReference(contentBrowserFrame);
      }
 else {
        contentBrowserFrame=browserDialogRef.get();
      }
      if (contentBrowserFrame.isVisible() == false) {
        contentBrowserFrame.setVisible(true);
      }
    }
  }
);
  JmeClientMain.getFrame().addToToolMenu(browserItem);
  ContentBrowserManager manager=ContentBrowserManager.getContentBrowserManager();
  manager.setDefaultContentBrowser(new ContentBrowserJDialog(loginInfo));
}"
46251,"/** 
 * Creates new form BrowserFrame 
 */
public ContentBrowserJDialog(ContentRepository repo){
  this.repo=repo;
  initComponents();
  fileList.setCellRenderer(new ContentRenderer());
  categoryList.setSelectedValue(""String_Node_Str"",true);
  try {
    setCollection(repo.getUserRoot());
  }
 catch (  ContentRepositoryException cce) {
    logger.log(Level.WARNING,""String_Node_Str"",cce);
  }
  fileList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      changeListSelection();
    }
  }
);
  fileList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        changeDirectory();
      }
    }
  }
);
  categoryList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      changeCategorySelection();
    }
  }
);
  cancelButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setVisible(false);
      dispose();
      for (      ContentBrowserListener l : listeners) {
        l.cancelAction();
      }
      listeners.clear();
    }
  }
);
  okButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setVisible(false);
      dispose();
      for (      ContentBrowserListener l : listeners) {
        ContentNode node=getListSelection();
        String assetPath=(node != null) ? node.getPath() : directory.getPath();
        if (assetPath.startsWith(""String_Node_Str"") == true) {
          assetPath=assetPath.substring(1);
        }
        l.okAction(""String_Node_Str"" + assetPath);
      }
      listeners.clear();
    }
  }
);
  changeListSelection();
}","/** 
 * Creates new form BrowserFrame 
 */
public ContentBrowserJDialog(ServerSessionManager session){
  this.session=session;
  initComponents();
  fileList.setCellRenderer(new ContentRenderer());
  fileList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      changeListSelection();
    }
  }
);
  fileList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        changeDirectory();
      }
    }
  }
);
  categoryList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      changeCategorySelection();
    }
  }
);
  cancelButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setVisible(false);
      dispose();
      for (      ContentBrowserListener l : listeners) {
        l.cancelAction();
      }
      listeners.clear();
    }
  }
);
  okButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setVisible(false);
      dispose();
      for (      ContentBrowserListener l : listeners) {
        ContentNode node=getListSelection();
        String assetPath=(node != null) ? node.getPath() : directory.getPath();
        if (assetPath.startsWith(""String_Node_Str"") == true) {
          assetPath=assetPath.substring(1);
        }
        l.okAction(""String_Node_Str"" + assetPath);
      }
      listeners.clear();
    }
  }
);
}"
46252,"public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  receiverRef.get().messageReceived(sender,clientID,message);
}","public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  if (receiver == null) {
    receiver=receiverRef.get();
  }
  receiver.messageReceived(sender,clientID,message);
}"
46253,"public void recordMessage(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  receiverRef.get().recordMessage(sender,clientID,message);
}","public void recordMessage(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  if (receiver == null) {
    receiver=receiverRef.get();
  }
  receiver.recordMessage(sender,clientID,message);
}"
46254,"/** 
 * Re-lay out the contents of this window. This should be called whenever you make changes which affect the layout of the contained component.
 */
public void validate(){
  if (embeddedPeer == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  embeddedPeer.validate();
  embeddedPeer.repaint();
}","/** 
 * Re-lay out the contents of this window. This should be called whenever you make changes which affect the layout of the contained component.
 */
public void validate(){
  if (embeddedPeer != null) {
    embeddedPeer.validate();
    embeddedPeer.repaint();
  }
}"
46255,"/** 
 * {@inheritDoc} 
 */
public synchronized void setVisibleUser(boolean visible,boolean update){
  logger.info(""String_Node_Str"" + visible);
  visibleUser=visible;
  changeMask|=CHANGED_VISIBLE;
  if (update) {
    update();
  }
}","/** 
 * {@inheritDoc} 
 */
public synchronized void setVisibleUser(boolean visible,boolean update){
  if (visibleUser == visible)   return;
  logger.info(""String_Node_Str"" + visible);
  visibleUser=visible;
  changeMask|=CHANGED_VISIBLE;
  if (update) {
    update();
  }
}"
46256,"/** 
 * Processes attribute changes. Should be called within a synchronized block. 
 */
protected void processChanges(){
  if ((changeMask & (CHANGED_TOPOLOGY | CHANGED_ORTHO)) != 0) {
    logger.fine(""String_Node_Str"");
    int chgMask=changeMask & ~CATEGORY_CHANGE_MASK;
switch (attachState) {
case ATTACHED_TO_ENTITY:
      if (parentEntity != null) {
        logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
        RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
        sgChangeAttachPointSet(rc,null);
        parentEntity.removeEntity(entity);
        parentEntity=null;
      }
    break;
case ATTACHED_TO_WORLD:
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().removeEntity(entity);
break;
}
attachState=AttachState.DETACHED;
if ((chgMask & CHANGED_GEOMETRY) != 0) {
if (geometryNode != null) {
sgChangeGeometryDetachFromView(viewNode,geometryNode);
if (geometrySelfCreated) {
sgChangeGeometryCleanup(geometryNode);
geometrySelfCreated=false;
}
}
if (newGeometryNode != null) {
geometryNode=newGeometryNode;
newGeometryNode=null;
}
 else {
geometryNode=new GeometryNodeQuad(this);
geometrySelfCreated=true;
}
sgChangeGeometryAttachToView(viewNode,geometryNode);
}
if ((chgMask & (CHANGED_TEXTURE | CHANGED_GEOMETRY)) != 0) {
logger.fine(""String_Node_Str"");
if (geometryNode != null) {
sgChangeGeometryTextureSet(geometryNode,getWindow().getTexture());
}
}
if (isActuallyVisible()) {
if (ortho) {
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().addEntity(entity);
attachState=AttachState.ATTACHED_TO_WORLD;
}
 else {
parentEntity=getParentEntity();
if (parentEntity != null) {
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
parentEntity.addEntity(entity);
RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
RenderComponent rcParent=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
sgChangeAttachPointSet(rc,rcParent.getSceneRoot());
attachState=AttachState.ATTACHED_TO_ENTITY;
}
}
entity.getComponent(RenderComponent.class).setOrtho(ortho);
}
if ((chgMask & CHANGED_ORTHO) != 0) {
logger.fine(""String_Node_Str"" + ortho);
for (View2DEntity child : children) {
child.setOrtho(ortho);
}
}
if ((chgMask & CHANGED_VISIBLE) != 0) {
logger.fine(""String_Node_Str"");
for (View2DEntity child : children) {
child.updateVisibility();
}
}
}
if ((changeMask & (CHANGED_FRAME | CHANGED_ORTHO)) != 0) {
logger.fine(""String_Node_Str"");
int chgMask=changeMask & ~CATEGORY_CHANGE_MASK;
if ((chgMask & (CHANGED_DECORATED | CHANGED_ORTHO)) != 0) {
if (decorated && !ortho) {
if (!hasFrame()) {
logger.fine(""String_Node_Str"");
attachFrame();
}
}
 else {
if (hasFrame()) {
logger.fine(""String_Node_Str"");
detachFrame();
}
}
}
if ((chgMask & CHANGED_TITLE) != 0) {
logger.fine(""String_Node_Str"");
frameUpdateTitle();
}
}
if ((changeMask & CHANGED_Z_ORDER) != 0) {
logger.fine(""String_Node_Str"");
sgChangeGeometryOrthoZOrderSet(geometryNode,zOrder);
}
if ((changeMask & CHANGED_ORTHO) != 0) {
if (isActuallyVisible()) {
entity.getComponent(RenderComponent.class).setOrtho(ortho);
}
sgChangeViewNodeOrthoSet(viewNode,ortho);
}
if ((changeMask & (CHANGED_SIZE | CHANGED_ORTHO | CHANGED_PIXEL_SCALE)) != 0) {
float width=getDisplayerLocalWidth();
float height=getDisplayerLocalHeight();
sgChangeGeometrySizeSet(geometryNode,width,height);
}
if ((changeMask & (CHANGED_TEX_COORDS | CHANGED_GEOMETRY)) != 0) {
float width=(float)sizeApp.width;
float height=(float)sizeApp.height;
Image image=getWindow().getTexture().getImage();
float widthRatio=width / image.getWidth();
float heightRatio=height / image.getHeight();
sgChangeGeometryTexCoordsSet(geometryNode,widthRatio,heightRatio);
}
if ((changeMask & (CHANGED_OFFSET_STACK_TRANSFORM | CHANGED_ORTHO | CHANGED_Z_ORDER| CHANGED_PIXEL_SCALE)) != 0) {
CellTransform transform=null;
switch (type) {
case UNKNOWN:
case PRIMARY:
transform=new CellTransform(null,null,null);
break;
case SECONDARY:
case POPUP:
transform=calcOffsetStackTransform();
}
sgChangeGeometryTransformOffsetStackSet(geometryNode,transform);
}
if ((changeMask & (CHANGED_USER_TRANSFORM | CHANGED_ORTHO | CHANGED_LOCATION_ORTHO| CHANGED_TYPE)) != 0) {
CellTransform deltaTransform;
switch (type) {
case PRIMARY:
deltaTransform=calcUserDeltaTransform();
updatePrimaryTransform(deltaTransform);
break;
case SECONDARY:
deltaTransform=calcUserDeltaTransform();
sgChangeTransformUserPostMultiply(viewNode,deltaTransform);
break;
case UNKNOWN:
case POPUP:
sgChangeTransformUserSet(viewNode,new CellTransform(null,null,null));
}
}
sgProcessChanges();
frameUpdate();
}","/** 
 * Processes attribute changes. Should be called within a synchronized block. 
 */
protected void processChanges(){
  boolean windowNeedsValidate=false;
  if ((changeMask & (CHANGED_TOPOLOGY | CHANGED_ORTHO)) != 0) {
    logger.fine(""String_Node_Str"");
    int chgMask=changeMask & ~CATEGORY_CHANGE_MASK;
switch (attachState) {
case ATTACHED_TO_ENTITY:
      if (parentEntity != null) {
        logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
        RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
        sgChangeAttachPointSet(rc,null);
        parentEntity.removeEntity(entity);
        parentEntity=null;
      }
    break;
case ATTACHED_TO_WORLD:
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().removeEntity(entity);
break;
}
attachState=AttachState.DETACHED;
if ((chgMask & CHANGED_GEOMETRY) != 0) {
if (geometryNode != null) {
sgChangeGeometryDetachFromView(viewNode,geometryNode);
if (geometrySelfCreated) {
sgChangeGeometryCleanup(geometryNode);
geometrySelfCreated=false;
}
}
if (newGeometryNode != null) {
geometryNode=newGeometryNode;
newGeometryNode=null;
}
 else {
geometryNode=new GeometryNodeQuad(this);
geometrySelfCreated=true;
}
sgChangeGeometryAttachToView(viewNode,geometryNode);
}
if ((chgMask & (CHANGED_TEXTURE | CHANGED_GEOMETRY)) != 0) {
logger.fine(""String_Node_Str"");
if (geometryNode != null) {
sgChangeGeometryTextureSet(geometryNode,getWindow().getTexture());
windowNeedsValidate=true;
}
}
if (isActuallyVisible()) {
if (ortho) {
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str"");
ClientContextJME.getWorldManager().addEntity(entity);
attachState=AttachState.ATTACHED_TO_WORLD;
}
 else {
parentEntity=getParentEntity();
if (parentEntity != null) {
logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ parentEntity);
parentEntity.addEntity(entity);
RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
RenderComponent rcParent=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
sgChangeAttachPointSet(rc,rcParent.getSceneRoot());
attachState=AttachState.ATTACHED_TO_ENTITY;
}
}
entity.getComponent(RenderComponent.class).setOrtho(ortho);
}
if ((chgMask & CHANGED_ORTHO) != 0) {
logger.fine(""String_Node_Str"" + ortho);
for (View2DEntity child : children) {
child.setOrtho(ortho);
}
}
if ((chgMask & CHANGED_VISIBLE) != 0) {
logger.fine(""String_Node_Str"");
for (View2DEntity child : children) {
child.updateVisibility();
}
}
}
if ((changeMask & (CHANGED_FRAME | CHANGED_ORTHO)) != 0) {
logger.fine(""String_Node_Str"");
int chgMask=changeMask & ~CATEGORY_CHANGE_MASK;
if ((chgMask & (CHANGED_DECORATED | CHANGED_ORTHO)) != 0) {
if (decorated && !ortho) {
if (!hasFrame()) {
logger.fine(""String_Node_Str"");
attachFrame();
}
}
 else {
if (hasFrame()) {
logger.fine(""String_Node_Str"");
detachFrame();
}
}
}
if ((chgMask & CHANGED_TITLE) != 0) {
logger.fine(""String_Node_Str"");
frameUpdateTitle();
}
}
if ((changeMask & CHANGED_Z_ORDER) != 0) {
logger.fine(""String_Node_Str"");
sgChangeGeometryOrthoZOrderSet(geometryNode,zOrder);
}
if ((changeMask & CHANGED_ORTHO) != 0) {
if (isActuallyVisible()) {
entity.getComponent(RenderComponent.class).setOrtho(ortho);
}
sgChangeViewNodeOrthoSet(viewNode,ortho);
}
if ((changeMask & (CHANGED_SIZE | CHANGED_ORTHO | CHANGED_PIXEL_SCALE)) != 0) {
float width=getDisplayerLocalWidth();
float height=getDisplayerLocalHeight();
sgChangeGeometrySizeSet(geometryNode,width,height);
}
if ((changeMask & (CHANGED_TEX_COORDS | CHANGED_GEOMETRY)) != 0) {
float width=(float)sizeApp.width;
float height=(float)sizeApp.height;
Image image=getWindow().getTexture().getImage();
float widthRatio=width / image.getWidth();
float heightRatio=height / image.getHeight();
sgChangeGeometryTexCoordsSet(geometryNode,widthRatio,heightRatio);
windowNeedsValidate=true;
}
if ((changeMask & (CHANGED_OFFSET_STACK_TRANSFORM | CHANGED_ORTHO | CHANGED_Z_ORDER| CHANGED_PIXEL_SCALE)) != 0) {
CellTransform transform=null;
switch (type) {
case UNKNOWN:
case PRIMARY:
transform=new CellTransform(null,null,null);
break;
case SECONDARY:
case POPUP:
transform=calcOffsetStackTransform();
}
sgChangeGeometryTransformOffsetStackSet(geometryNode,transform);
}
if ((changeMask & (CHANGED_USER_TRANSFORM | CHANGED_ORTHO | CHANGED_LOCATION_ORTHO| CHANGED_TYPE)) != 0) {
CellTransform deltaTransform;
switch (type) {
case PRIMARY:
deltaTransform=calcUserDeltaTransform();
updatePrimaryTransform(deltaTransform);
break;
case SECONDARY:
deltaTransform=calcUserDeltaTransform();
sgChangeTransformUserPostMultiply(viewNode,deltaTransform);
break;
case UNKNOWN:
case POPUP:
sgChangeTransformUserSet(viewNode,new CellTransform(null,null,null));
}
}
sgProcessChanges();
frameUpdate();
if (windowNeedsValidate) {
if (window instanceof WindowSwing) {
((WindowSwing)window).validate();
}
}
}"
46257,"/** 
 * Convert a string containing space-separated tokens into an ArrayList of the separate tokens.
 * @param str The input string.
 */
private static ArrayList<String> stringToArrayListString(String str){
  ArrayList<String> als=new ArrayList<String>();
  StringTokenizer tok=new StringTokenizer(str);
  int numTokens=tok.countTokens();
  if (numTokens <= 0) {
    return null;
  }
  for (int i=0; i < tok.countTokens(); i++) {
    als.add(tok.nextToken());
  }
  return als;
}","/** 
 * Convert a string containing space-separated tokens into an ArrayList of the separate tokens.
 * @param str The input string.
 */
private static ArrayList<String> stringToArrayListString(String str){
  ArrayList<String> als=new ArrayList<String>();
  StringTokenizer tok=new StringTokenizer(str);
  int numTokens=tok.countTokens();
  if (numTokens <= 0) {
    return null;
  }
  for (int i=0; i < numTokens; i++) {
    String s=tok.nextToken();
    als.add(s);
  }
  return als;
}"
46258,"/** 
 * Specifies whether the view entity is to be displayed in ortho mode (""on the glass""). Update if specified.
 */
public synchronized void setOrtho(boolean ortho,boolean update){
  this.ortho=ortho;
  changeMask|=CHANGED_ORTHO;
  if (update) {
    update();
  }
}","/** 
 * Specifies whether the view entity is to be displayed in ortho mode (""on the glass""). Update if specified.
 */
public synchronized void setOrtho(boolean ortho,boolean update){
  if (this.ortho == ortho)   return;
  this.ortho=ortho;
  changeMask|=CHANGED_ORTHO;
  if (update) {
    update();
  }
}"
46259,"@Override public String getRelativePathInModule(){
  return ""String_Node_Str"" + File.separator + this.getAssetPath();
}","@Override public String getRelativePathInModule(){
  return ""String_Node_Str"" + this.getAssetPath();
}"
46260,"/** 
 * Returns a relative path of the asset so that it exists in a unique location within a cache. The path does not have a leading ""/"".
 * @return A unique relative path for the URI
 */
public abstract String getRelativeCachePath();","/** 
 * Returns a relative path of the asset so that it exists in a unique location within a cache. The path does not have a leading ""/"". This method should return either forward or backward slashes depending upon the platform.
 * @return A unique relative path for the URI
 */
public abstract String getRelativeCachePath();"
46261,"/** 
 * Returns the relative resource path beneath some base repository URL
 */
public String getRelativePath(){
  return getRoot() + File.separator + getAssetPath();
}","/** 
 * Returns the relative resource path beneath some base repository URL
 */
public String getRelativePath(){
  return getRoot() + ""String_Node_Str"" + getAssetPath();
}"
46262,"/** 
 * Returns the relative path of the resource specified by the URI within the module. The relative path does not being with any forward ""/"". This method adds any directories before the relative asset path.
 * @return The relative path within the URI
 */
public abstract String getRelativePathInModule();","/** 
 * Returns the relative path of the resource specified by the URI within the module. The relative path does not being with any forward ""/"". This method adds any directories before the relative asset path. This method should return all forward-slashes.
 * @return The relative path within the URI
 */
public abstract String getRelativePathInModule();"
46263,"/** 
 * Returns the raw relative path of the asset, without prepending any assumed directory like ""art/"". It has no leading ""/"".
 */
public String getAssetPath(){
  return assetPath;
}","/** 
 * Returns the raw relative path of the asset, without prepending any assumed directory like ""art/"". It has no leading ""/"". This method should return all forward-slashes.
 */
public String getAssetPath(){
  return assetPath;
}"
46264,"public void clientDisconnected(WonderlandClientSender sender,WonderlandClientID clientID){
  PresenceInfo info=sessions.get(clientID);
  if (info == null) {
    logger.warning(""String_Node_Str"" + clientID);
    return;
  }
  sessionEnded(sender,info);
}","public void clientDisconnected(WonderlandClientSender sender,WonderlandClientID clientID){
  PresenceInfo info=sessions.get(clientID.getID());
  if (info == null) {
    logger.warning(""String_Node_Str"" + clientID.getID());
    return;
  }
  sessionEnded(sender,info);
}"
46265,"private boolean transferCall(){
  try {
    PhoneInfo phoneInfo=phone.phoneInfo;
    logger.info(""String_Node_Str"" + call + ""String_Node_Str""+ phoneInfo.phoneNumber);
    Vector3f location=getLocation(phone.phoneCellRef);
    PlayerSetup setup=new PlayerSetup();
    setup.x=location.getX();
    setup.y=location.getY();
    setup.z=location.getZ();
    setup.isOutworlder=true;
    setup.isLivePlayer=true;
    VoiceManager vm=AppContext.getManager(VoiceManager.class);
    Player externalPlayer=vm.createPlayer(call.getId(),setup);
    call.setPlayer(externalPlayer);
    externalPlayer.setCall(call);
    VoiceManagerParameters parameters=vm.getVoiceManagerParameters();
    AudioGroup defaultLivePlayerAudioGroup=parameters.livePlayerAudioGroup;
    AudioGroupPlayerInfo groupInfo=new AudioGroupPlayerInfo(true,AudioGroupPlayerInfo.ChatType.PUBLIC);
    groupInfo.defaultListenAttenuation=1.0;
    defaultLivePlayerAudioGroup.addPlayer(externalPlayer,groupInfo);
    AudioGroup defaultStationaryPlayerAudioGroup=parameters.stationaryPlayerAudioGroup;
    defaultStationaryPlayerAudioGroup.addPlayer(externalPlayer,new AudioGroupPlayerInfo(false,AudioGroupPlayerInfo.ChatType.PUBLIC));
    call.mute(false);
    call.transferToConference(parameters.conferenceId);
    String s;
    if (phoneInfo.phoneNumber.equals(""String_Node_Str"")) {
      s=""String_Node_Str"";
    }
 else     if (phoneInfo.phoneNumber.equals(""String_Node_Str"")) {
      s=""String_Node_Str"";
    }
 else     if (phoneInfo.phoneNumber.equals(""String_Node_Str"")) {
      s=""String_Node_Str"";
    }
 else     if (phoneInfo.phoneNumber.equals(""String_Node_Str"")) {
      s=""String_Node_Str"";
    }
 else     if (phoneInfo.phoneNumber.equals(""String_Node_Str"")) {
      s=""String_Node_Str"";
    }
 else {
      s=""String_Node_Str"" + phoneInfo.phoneNumber;
    }
    playTreatment(s);
    String info=establishedStatus.getCallInfo();
    String phoneNumber=call.getId();
    if (info != null) {
      String[] tokens=info.split(""String_Node_Str"");
      if (info.startsWith(""String_Node_Str"")) {
        phoneNumber=tokens[2];
      }
 else {
        phoneNumber=tokens[1];
      }
    }
    playTreatment(""String_Node_Str"");
    playTreatment(JOIN_CLICK);
    new Orb(call.getId(),phone.phoneCellRef.get().getWorldBounds(),false);
    state=ESTABLISHED;
  }
 catch (  IOException e) {
    logger.warning(e.getMessage());
    return false;
  }
  return true;
}","private boolean transferCall(){
  try {
    PhoneInfo phoneInfo=phone.phoneInfo;
    logger.info(""String_Node_Str"" + call + ""String_Node_Str""+ phoneInfo.phoneNumber);
    Vector3f location=getLocation(phone.phoneCellRef);
    PlayerSetup setup=new PlayerSetup();
    setup.x=location.getX();
    setup.y=location.getY();
    setup.z=location.getZ();
    setup.isOutworlder=true;
    setup.isLivePlayer=true;
    VoiceManager vm=AppContext.getManager(VoiceManager.class);
    Player externalPlayer=vm.createPlayer(call.getId(),setup);
    call.setPlayer(externalPlayer);
    externalPlayer.setCall(call);
    VoiceManagerParameters parameters=vm.getVoiceManagerParameters();
    AudioGroup defaultLivePlayerAudioGroup=parameters.livePlayerAudioGroup;
    AudioGroupPlayerInfo groupInfo=new AudioGroupPlayerInfo(true,AudioGroupPlayerInfo.ChatType.PUBLIC);
    groupInfo.defaultListenAttenuation=1.0;
    defaultLivePlayerAudioGroup.addPlayer(externalPlayer,groupInfo);
    AudioGroup defaultStationaryPlayerAudioGroup=parameters.stationaryPlayerAudioGroup;
    defaultStationaryPlayerAudioGroup.addPlayer(externalPlayer,new AudioGroupPlayerInfo(false,AudioGroupPlayerInfo.ChatType.PUBLIC));
    call.mute(false);
    call.transferToConference(parameters.conferenceId);
    String s;
    if (phoneInfo.phoneNumber.equals(""String_Node_Str"")) {
      s=""String_Node_Str"";
    }
 else     if (phoneInfo.phoneNumber.equals(""String_Node_Str"")) {
      s=""String_Node_Str"";
    }
 else     if (phoneInfo.phoneNumber.equals(""String_Node_Str"")) {
      s=""String_Node_Str"";
    }
 else     if (phoneInfo.phoneNumber.equals(""String_Node_Str"")) {
      s=""String_Node_Str"";
    }
 else     if (phoneInfo.phoneNumber.equals(""String_Node_Str"")) {
      s=""String_Node_Str"";
    }
 else {
      s=""String_Node_Str"" + phoneInfo.phoneNumber;
    }
    playTreatment(s);
    String info=establishedStatus.getCallInfo();
    String phoneNumber=call.getId();
    if (info != null) {
      String[] tokens=info.split(""String_Node_Str"");
      if (info.startsWith(""String_Node_Str"")) {
        phoneNumber=tokens[2];
      }
 else {
        phoneNumber=tokens[1];
      }
    }
    playTreatment(""String_Node_Str"");
    playTreatment(JOIN_CLICK);
    new Orb(call.getId(),call.getId(),phone.phoneCellRef.get().getWorldBounds(),false);
    state=ESTABLISHED;
  }
 catch (  IOException e) {
    logger.warning(e.getMessage());
    return false;
  }
  return true;
}"
46266,"private void sendToAllClients(WonderlandClientSender sender,Message message){
  Iterator<BigInteger> it=sessions.keySet().iterator();
  while (it.hasNext()) {
    BigInteger sessionID=it.next();
    PresenceInfo info=sessions.get(sessionID);
    logger.fine(""String_Node_Str"" + info.userID);
    WonderlandClientID clientID=CommsManagerFactory.getCommsManager().getWonderlandClientID(sessionID);
    sender.send(clientID,message);
  }
}","private void sendToAllClients(WonderlandClientSender sender,Message message){
  Iterator<BigInteger> it=sessions.keySet().iterator();
  while (it.hasNext()) {
    BigInteger sessionID=it.next();
    PresenceInfo info=sessions.get(sessionID);
    String s;
    if (message instanceof SessionCreatedMessage) {
      s=""String_Node_Str"";
    }
 else {
      s=""String_Node_Str"";
    }
    logger.info(""String_Node_Str"" + s + ""String_Node_Str""+ sessions.get(sessionID));
    WonderlandClientID clientID=CommsManagerFactory.getCommsManager().getWonderlandClientID(sessionID);
    sender.send(clientID,message);
  }
}"
46267,"public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
}","public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  if (message instanceof AudioVolumeMessage == false) {
    logger.warning(""String_Node_Str"" + message);
    return;
  }
  AudioVolumeMessage msg=(AudioVolumeMessage)message;
  CellID cellID=msg.getCellID();
  String softphoneCallID=msg.getSoftphoneCallID();
  double volume=msg.getVolume();
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Player softphonePlayer=vm.getPlayer(softphoneCallID);
  if (softphonePlayer == null) {
    System.out.println(""String_Node_Str"" + softphoneCallID);
    return;
  }
  String otherCallID=CallID.getCallID(cellID);
  if (softphoneCallID.equals(otherCallID)) {
    softphonePlayer.setMasterVolume(volume);
    return;
  }
  DefaultSpatializer spatializer=new DefaultSpatializer();
  spatializer.setAttenuator(volume);
  Player player=vm.getPlayer(otherCallID);
  if (player == null) {
    System.out.println(""String_Node_Str"" + otherCallID);
    return;
  }
  softphonePlayer.setPrivateSpatializer(player,spatializer);
  return;
}"
46268,"public static void main(String[] args){
  try {
    InputStream is=WebServerLauncher.class.getResourceAsStream(""String_Node_Str"");
    Properties props=new Properties();
    props.load(is);
    for (    Object prop : props.keySet()) {
      if (!System.getProperties().containsKey(prop)) {
        System.setProperty((String)prop,props.getProperty((String)prop));
      }
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    System.exit(-1);
  }
  if (System.getProperty(""String_Node_Str"") == null && System.getProperty(""String_Node_Str"") == null) {
    try {
      InputStream logConfig;
      Properties p=new Properties();
      p.load(WebServerLauncher.class.getResourceAsStream(""String_Node_Str""));
      String filePattern=p.getProperty(""String_Node_Str"");
      if (filePattern != null && filePattern.contains(""String_Node_Str"")) {
        String logDir=SystemPropertyUtil.getProperty(""String_Node_Str"");
        p.setProperty(""String_Node_Str"",filePattern.replaceAll(""String_Node_Str"",logDir));
        File tmpLog=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
        p.store(new FileOutputStream(tmpLog),null);
        logConfig=new FileInputStream(tmpLog);
      }
 else {
        logConfig=WebServerLauncher.class.getResourceAsStream(""String_Node_Str"");
      }
      LogManager.getLogManager().readConfiguration(logConfig);
    }
 catch (    IOException ioe) {
      logger.log(Level.WARNING,""String_Node_Str"",ioe);
    }
  }
  if (!parseArguments(args)) {
    usage();
    System.exit(-1);
  }
  String killSwitchStr=System.getProperty(WEBSERVER_KILLSWITCH_PROPERTY);
  if (killSwitchStr != null) {
    KillSwitch ks=new KillSwitch(Integer.parseInt(killSwitchStr));
    new Thread(ks).start();
  }
  try {
    File webDir=new File(RunUtil.getRunDir(),""String_Node_Str"");
    webDir.mkdirs();
    if (!compareVersions(RunUtil.getRunDir())) {
      System.setProperty(Constants.WEBSERVER_NEWVERSION_PROP,""String_Node_Str"");
      extractWebserverJars(webDir);
      writeVersion(RunUtil.getRunDir());
    }
    List<URL> urls=new ArrayList<URL>();
    for (    File jar : webDir.listFiles()) {
      URL u=jar.toURI().toURL();
      logger.fine(""String_Node_Str"" + u);
      urls.add(u);
    }
    classLoader=new LauncherClassLoader(urls.toArray(new URL[0]));
    Thread.currentThread().setContextClassLoader(classLoader);
    Class c=classLoader.loadClass(""String_Node_Str"");
    c.newInstance();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + SystemPropertyUtil.getProperty(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + SystemPropertyUtil.getProperty(Constants.WEBSERVER_URL_PROP));
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    System.exit(-1);
  }
}","public static void main(String[] args){
  try {
    InputStream is=WebServerLauncher.class.getResourceAsStream(""String_Node_Str"");
    Properties props=new Properties();
    props.load(is);
    for (    Object prop : props.keySet()) {
      if (!System.getProperties().containsKey(prop)) {
        System.setProperty((String)prop,props.getProperty((String)prop));
      }
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    System.exit(-1);
  }
  if (System.getProperty(""String_Node_Str"") == null && System.getProperty(""String_Node_Str"") == null) {
    try {
      InputStream logConfig;
      Properties p=new Properties();
      p.load(WebServerLauncher.class.getResourceAsStream(""String_Node_Str""));
      String filePattern=p.getProperty(""String_Node_Str"");
      if (filePattern != null && filePattern.contains(""String_Node_Str"")) {
        String logDir=SystemPropertyUtil.getProperty(""String_Node_Str"");
        p.setProperty(""String_Node_Str"",filePattern.replaceAll(""String_Node_Str"",logDir));
        File tmpLog=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
        p.store(new FileOutputStream(tmpLog),null);
        logConfig=new FileInputStream(tmpLog);
      }
 else {
        logConfig=WebServerLauncher.class.getResourceAsStream(""String_Node_Str"");
      }
      LogManager.getLogManager().readConfiguration(logConfig);
    }
 catch (    IOException ioe) {
      logger.log(Level.WARNING,""String_Node_Str"",ioe);
    }
  }
  if (!parseArguments(args)) {
    usage();
    System.exit(-1);
  }
  if (System.getProperty(Constants.WEBSERVER_PORT_PROP) == null) {
    System.setProperty(Constants.WEBSERVER_PORT_PROP,""String_Node_Str"");
  }
  String killSwitchStr=System.getProperty(WEBSERVER_KILLSWITCH_PROPERTY);
  if (killSwitchStr != null) {
    KillSwitch ks=new KillSwitch(Integer.parseInt(killSwitchStr));
    new Thread(ks).start();
  }
  try {
    File webDir=new File(RunUtil.getRunDir(),""String_Node_Str"");
    webDir.mkdirs();
    if (!compareVersions(RunUtil.getRunDir())) {
      System.setProperty(Constants.WEBSERVER_NEWVERSION_PROP,""String_Node_Str"");
      extractWebserverJars(webDir);
      writeVersion(RunUtil.getRunDir());
    }
    List<URL> urls=new ArrayList<URL>();
    for (    File jar : webDir.listFiles()) {
      URL u=jar.toURI().toURL();
      logger.fine(""String_Node_Str"" + u);
      urls.add(u);
    }
    classLoader=new LauncherClassLoader(urls.toArray(new URL[0]));
    Thread.currentThread().setContextClassLoader(classLoader);
    Class c=classLoader.loadClass(""String_Node_Str"");
    c.newInstance();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + SystemPropertyUtil.getProperty(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + SystemPropertyUtil.getProperty(Constants.WEBSERVER_URL_PROP));
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    System.exit(-1);
  }
}"
46269,"private static boolean parseArguments(String[] args){
  String port=null;
  String directory=null;
  String propsFile=null;
  Iterator<String> i=Arrays.asList(args).iterator();
  while (i.hasNext()) {
    String s=i.next();
    if (s.equalsIgnoreCase(""String_Node_Str"")) {
      if (!i.hasNext())       return false;
      port=i.next();
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      if (!i.hasNext())       return false;
      directory=i.next();
    }
 else     if (s.trim().length() == 0) {
      continue;
    }
 else {
      if (i.hasNext())       return false;
      propsFile=s;
    }
  }
  if (propsFile != null) {
    try {
      System.getProperties().load(new FileInputStream(propsFile));
    }
 catch (    IOException ioe) {
      logger.log(Level.WARNING,""String_Node_Str"" + propsFile,ioe);
      return false;
    }
  }
  if (port != null) {
    System.setProperty(Constants.WEBSERVER_PORT_PROP,port);
  }
 else {
    System.setProperty(Constants.WEBSERVER_PORT_PROP,""String_Node_Str"");
  }
  if (directory != null) {
    System.setProperty(Constants.RUN_DIR_PROP,directory);
  }
  return true;
}","private static boolean parseArguments(String[] args){
  String port=null;
  String directory=null;
  String propsFile=null;
  Iterator<String> i=Arrays.asList(args).iterator();
  while (i.hasNext()) {
    String s=i.next();
    if (s.equalsIgnoreCase(""String_Node_Str"")) {
      if (!i.hasNext())       return false;
      port=i.next();
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      if (!i.hasNext())       return false;
      directory=i.next();
    }
 else     if (s.trim().length() == 0) {
      continue;
    }
 else {
      if (i.hasNext())       return false;
      propsFile=s;
    }
  }
  if (propsFile != null) {
    try {
      System.getProperties().load(new FileInputStream(propsFile));
    }
 catch (    IOException ioe) {
      logger.log(Level.WARNING,""String_Node_Str"" + propsFile,ioe);
      return false;
    }
  }
  if (port != null) {
    System.setProperty(Constants.WEBSERVER_PORT_PROP,port);
  }
  if (directory != null) {
    System.setProperty(Constants.RUN_DIR_PROP,directory);
  }
  return true;
}"
46270,"public AvatarImiJME(Cell cell){
  super(cell);
  assert(cell != null);
  final Cell c=cell;
  characterMotionListener=new CharacterMotionListener(){
    public void transformUpdate(    Vector3f translation,    PMatrix rotation){
      ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation.getRotation(),translation));
    }
  }
;
  gameContextListener=new GameContextListener(){
    public void trigger(    boolean pressed,    int trigger,    Vector3f translation,    Quaternion rotation){
synchronized (this) {
        currentTrigger=trigger;
        currentPressed=pressed;
      }
      ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation,translation),trigger,pressed,null);
    }
  }
;
  ClientContext.getInputManager().addGlobalEventListener(new EventClassListener(){
    private Class[] consumeClasses=new Class[]{AvatarRendererChangeRequestEvent.class};
    @Override public Class[] eventClassesToConsume(){
      return consumeClasses;
    }
    @Override public void computeEvent(    Event evtIn){
      System.err.println(""String_Node_Str"" + evtIn);
    }
  }
);
}","public AvatarImiJME(Cell cell){
  super(cell);
  assert(cell != null);
  final Cell c=cell;
  characterMotionListener=new CharacterMotionListener(){
    public void transformUpdate(    Vector3f translation,    PMatrix rotation){
      ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation.getRotation(),translation));
    }
  }
;
  gameContextListener=new GameContextListener(){
    public void trigger(    boolean pressed,    int trigger,    Vector3f translation,    Quaternion rotation){
synchronized (this) {
        currentTrigger=trigger;
        currentPressed=pressed;
      }
      String animationName=avatarCharacter.getContext().getState(CycleActionState.class).getAnimationName();
      ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation,translation),trigger,pressed,animationName,null);
    }
  }
;
  ClientContext.getInputManager().addGlobalEventListener(new EventClassListener(){
    private Class[] consumeClasses=new Class[]{AvatarRendererChangeRequestEvent.class};
    @Override public Class[] eventClassesToConsume(){
      return consumeClasses;
    }
    @Override public void computeEvent(    Event evtIn){
      System.err.println(""String_Node_Str"" + evtIn);
    }
  }
);
}"
46271,"public void trigger(int trigger,boolean pressed){
  if (!selectedForInput && avatarCharacter != null) {
synchronized (this) {
      if (currentTrigger == trigger && currentPressed == pressed)       return;
      if (pressed)       avatarCharacter.getContext().triggerPressed(trigger);
 else       avatarCharacter.getContext().triggerReleased(trigger);
      currentTrigger=trigger;
      currentPressed=pressed;
    }
  }
}","public void trigger(int trigger,boolean pressed,String animationName){
  if (!selectedForInput && avatarCharacter != null) {
synchronized (this) {
      if (currentTrigger == trigger && currentPressed == pressed)       return;
      System.err.println(""String_Node_Str"" + trigger + ""String_Node_Str""+ pressed+ ""String_Node_Str""+ animationName);
      if (pressed) {
        if (animationName != null)         ((WlAvatarContext)avatarCharacter.getContext()).setMiscAnimation(animationName);
        avatarCharacter.getContext().triggerPressed(trigger);
      }
 else       avatarCharacter.getContext().triggerReleased(trigger);
      currentTrigger=trigger;
      currentPressed=pressed;
    }
  }
}"
46272,"public void initialize(ServerSessionManager loginManager){
  ClientContextJME.getAvatarRenderManager().registerRenderer(AvatarImiJME.class);
  ClientContextJME.getViewManager().addViewManagerListener(new ViewManagerListener(){
    public void primaryViewCellChanged(    ViewCell oldViewCell,    ViewCell newViewCell){
      if (oldViewCell != null) {
        Logger.getAnonymousLogger().severe(""String_Node_Str"");
        return;
      }
      CellRenderer rend=newViewCell.getCellRenderer(Cell.RendererType.RENDERER_JME);
      if (!(rend instanceof AvatarImiJME))       return;
      final AvatarImiJME avatar=(AvatarImiJME)rend;
      if (testPanelRef == null || testPanelRef.get() == null) {
      }
 else {
        testPanelRef.get().setAvatarCharactar(avatar.getAvatarCharacter());
      }
      JMenuItem avatarControlFrameMI=new JMenuItem(""String_Node_Str"");
      avatarControlFrameMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          if (testPanelRef == null || testPanelRef.get() == null) {
            AvatarTestPanel test=new AvatarTestPanel();
            JFrame f=new JFrame(""String_Node_Str"");
            f.getContentPane().add(test);
            f.pack();
            f.setVisible(true);
            f.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            test.setAvatarCharactar(avatar.getAvatarCharacter());
            testPanelRef=new WeakReference(test);
          }
 else {
            SwingUtilities.getRoot(testPanelRef.get().getParent()).setVisible(true);
          }
        }
      }
);
      JmeClientMain.getFrame().addToEditMenu(avatarControlFrameMI);
      JMenuItem avatarConfigFrameMI=new JMenuItem(""String_Node_Str"");
      avatarConfigFrameMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          ViewCell cell=ClientContextJME.getViewManager().getPrimaryViewCell();
          if (cell instanceof AvatarCell) {
            AvatarImiJME rend=(AvatarImiJME)((AvatarCell)cell).getCellRenderer(ClientContext.getRendererType());
            AvatarConfigFrame f=new AvatarConfigFrame(rend);
            f.setVisible(true);
          }
        }
      }
);
      JmeClientMain.getFrame().addToEditMenu(avatarConfigFrameMI);
      JMenuItem instrumentFrameMI=new JMenuItem(""String_Node_Str"");
      instrumentFrameMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          AvatarInstrumentation in=new AvatarInstrumentation(instrumentation);
          in.setVisible(true);
        }
      }
);
      JmeClientMain.getFrame().addToEditMenu(instrumentFrameMI);
    }
  }
);
  instrumentation=new DefaultInstrumentation(ClientContextJME.getWorldManager());
}","public void initialize(ServerSessionManager loginManager){
  String serverHostAndPort=loginManager.getServerNameAndPort();
  String baseURL=""String_Node_Str"" + serverHostAndPort + ""String_Node_Str"";
  WorldManager worldManager=ClientContextJME.getWorldManager();
  worldManager.addUserData(Repository.class,new Repository(worldManager,baseURL,ClientContext.getUserDirectory(""String_Node_Str"")));
  ClientContextJME.getAvatarRenderManager().registerRenderer(AvatarImiJME.class);
  ClientContextJME.getViewManager().addViewManagerListener(new ViewManagerListener(){
    public void primaryViewCellChanged(    ViewCell oldViewCell,    ViewCell newViewCell){
      if (oldViewCell != null) {
        Logger.getAnonymousLogger().severe(""String_Node_Str"");
        return;
      }
      CellRenderer rend=newViewCell.getCellRenderer(Cell.RendererType.RENDERER_JME);
      if (!(rend instanceof AvatarImiJME))       return;
      final AvatarImiJME avatar=(AvatarImiJME)rend;
      if (testPanelRef == null || testPanelRef.get() == null) {
      }
 else {
        testPanelRef.get().setAvatarCharactar(avatar.getAvatarCharacter());
      }
      JMenuItem avatarControlFrameMI=new JMenuItem(""String_Node_Str"");
      avatarControlFrameMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          if (testPanelRef == null || testPanelRef.get() == null) {
            AvatarTestPanel test=new AvatarTestPanel();
            JFrame f=new JFrame(""String_Node_Str"");
            f.getContentPane().add(test);
            f.pack();
            f.setVisible(true);
            f.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            test.setAvatarCharactar(avatar.getAvatarCharacter());
            testPanelRef=new WeakReference(test);
          }
 else {
            SwingUtilities.getRoot(testPanelRef.get().getParent()).setVisible(true);
          }
        }
      }
);
      JmeClientMain.getFrame().addToEditMenu(avatarControlFrameMI);
      JMenuItem avatarConfigFrameMI=new JMenuItem(""String_Node_Str"");
      avatarConfigFrameMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          ViewCell cell=ClientContextJME.getViewManager().getPrimaryViewCell();
          if (cell instanceof AvatarCell) {
            AvatarImiJME rend=(AvatarImiJME)((AvatarCell)cell).getCellRenderer(ClientContext.getRendererType());
            AvatarConfigFrame f=new AvatarConfigFrame(rend);
            f.setVisible(true);
          }
        }
      }
);
      JmeClientMain.getFrame().addToEditMenu(avatarConfigFrameMI);
      JMenuItem instrumentFrameMI=new JMenuItem(""String_Node_Str"");
      instrumentFrameMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          AvatarInstrumentation in=new AvatarInstrumentation(instrumentation);
          in.setVisible(true);
        }
      }
);
      JmeClientMain.getFrame().addToEditMenu(instrumentFrameMI);
    }
  }
);
  instrumentation=new DefaultInstrumentation(ClientContextJME.getWorldManager());
}"
46273,"public void playAnimation(String name){
  ((WlAvatarContext)getContext()).playAnimation(name);
}","public void playAnimation(String name){
  ((WlAvatarContext)getContext()).playMiscAnimation(name);
}"
46274,"/** 
 * Moves this view back into the world.
 */
private void moveToWorld(){
  if (visible) {
    detachFromHud();
    if (!connectedToCell) {
      currentCell.attachView(this,RendererType.RENDERER_JME);
      connectedToCell=true;
    }
  }
  updateHudState();
  entity.getComponent(RenderComponent.class).setOrtho(true);
}","/** 
 * Moves this view back into the world.
 */
private void moveToWorld(){
  if (visible) {
    detachFromHud();
    if (!connectedToCell) {
      currentCell.attachView(this,RendererType.RENDERER_JME);
      connectedToCell=true;
    }
  }
  updateHudState();
  entity.getComponent(RenderComponent.class).setOrtho(false);
}"
46275,"/** 
 * Actually perform the pick.
 */
private PickInfo pickEventScreenPos(int x,int y){
  if (cameraComp == null)   return null;
  logger.fine(""String_Node_Str"" + x + ""String_Node_Str""+ y);
  Ray pickRayWorld=calcPickRayWorld(x,y);
  return collisionSys.pickAllWorldRay(pickRayWorld,true,false);
}","/** 
 * Actually perform the pick.
 */
private PickInfo pickEventScreenPos(int x,int y){
  if (cameraComp == null)   return null;
  logger.fine(""String_Node_Str"" + x + ""String_Node_Str""+ y);
  Ray pickRayWorld=calcPickRayWorld(x,y);
  return collisionSys.pickAllWorldRay(pickRayWorld,true,false,true,cameraComp);
}"
46276,"private void jButton1ActionPerformed(java.awt.event.ActionEvent evt){
  if (inHud) {
    jButton2.setText(""String_Node_Str"");
    jButton2.setToolTipText(""String_Node_Str"");
  }
 else {
    jButton2.setText(""String_Node_Str"");
    jButton2.setToolTipText(""String_Node_Str"");
  }
  jPanel1.invalidate();
  inHud=!inHud;
  if (container != null) {
    container.setHud(inHud);
  }
}","private void jButton1ActionPerformed(java.awt.event.ActionEvent evt){
  inHud=!inHud;
  if (inHud) {
    jButton1.setText(""String_Node_Str"");
    jButton1.setToolTipText(""String_Node_Str"");
  }
 else {
    jButton1.setText(""String_Node_Str"");
    jButton1.setToolTipText(""String_Node_Str"");
  }
  jPanel1.invalidate();
  if (container != null) {
    container.setHud(inHud);
  }
}"
46277,"@Override public void handleMessage(Message message){
  logger.fine(""String_Node_Str"");
  if (message instanceof GetVoiceBridgeMessage) {
    GetVoiceBridgeMessage msg=(GetVoiceBridgeMessage)message;
    logger.fine(""String_Node_Str"" + msg.getBridgeInfo());
    SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
    String tokens[]=msg.getBridgeInfo().split(""String_Node_Str"");
    String registrarAddress=tokens[5] + ""String_Node_Str"";
    registrarAddress+=tokens[7];
    String localAddress=null;
    try {
      InetAddress ia=NetworkAddress.getPrivateLocalAddress(""String_Node_Str"" + tokens[5] + ""String_Node_Str""+ tokens[7]+ ""String_Node_Str"");
      localAddress=ia.getHostAddress();
    }
 catch (    UnknownHostException e) {
      logger.warning(e.getMessage());
    }
    if (localAddress != null) {
      try {
        String sipURL=sc.startSoftphone(msg.getUsername(),registrarAddress,10,localAddress,AudioQuality.VPN);
        CellID cellID=((CellClientSession)session).getLocalAvatar().getViewCell().getCellID();
        logger.fine(""String_Node_Str"" + cellID.toString());
        sc.setCallID(cellID.toString());
        session.send(this,new PlaceCallMessage(cellID.toString(),sipURL,0.,0.,0.,90.,false));
      }
 catch (      IOException e) {
        logger.warning(e.getMessage());
      }
    }
 else {
      logger.warning(""String_Node_Str"");
      connectSoftphone();
    }
  }
 else   if (message instanceof VoiceChatJoinRequestMessage) {
    VoiceChatJoinRequestMessage msg=(VoiceChatJoinRequestMessage)message;
    VoiceChatDialog voiceChatDialog=VoiceChatDialog.getVoiceChatDialog(msg.getGroup());
    if (voiceChatDialog == null) {
      CellID cellID=((CellClientSession)session).getLocalAvatar().getViewCell().getCellID();
      voiceChatDialog=new VoiceChatDialog(this,session,cellID);
    }
    voiceChatDialog.requestToJoin(msg.getGroup(),msg.getCaller(),msg.getCalleeList(),msg.getChatType());
  }
 else   if (message instanceof VoiceChatBusyMessage) {
    VoiceChatBusyMessage msg=(VoiceChatBusyMessage)message;
    new VoiceChatBusyDialog(msg.getGroup(),msg.getCaller());
  }
 else   if (message instanceof VoiceChatInfoResponseMessage) {
    VoiceChatInfoResponseMessage msg=(VoiceChatInfoResponseMessage)message;
    VoiceChatDialog voiceChatDialog=VoiceChatDialog.getVoiceChatDialog(msg.getGroup());
    logger.fine(""String_Node_Str"" + msg.getChatInfo());
    if (voiceChatDialog == null) {
      logger.warning(""String_Node_Str"" + msg.getGroup());
    }
 else {
      voiceChatDialog.setChatters(msg.getChatInfo());
    }
  }
 else   if (message instanceof SpeakingMessage) {
    SpeakingMessage msg=(SpeakingMessage)message;
    logger.info(""String_Node_Str"" + msg.getCallID() + (msg.isSpeaking() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
 else   if (message instanceof GetUserListMessage) {
    if (userListJFrame == null) {
      userListJFrame=new UserListJFrame(((GetUserListMessage)message).getLocation());
    }
    ArrayList<String> userList=((GetUserListMessage)message).getUserList();
    String s=""String_Node_Str"";
    for (    String user : userList) {
      s+=user + ""String_Node_Str"";
    }
    userListJFrame.setListData(userList.toArray(new String[0]));
    userListJFrame.setVisible(true);
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}","@Override public void handleMessage(Message message){
  logger.fine(""String_Node_Str"");
  if (message instanceof GetVoiceBridgeMessage) {
    GetVoiceBridgeMessage msg=(GetVoiceBridgeMessage)message;
    logger.fine(""String_Node_Str"" + msg.getBridgeInfo());
    SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
    String tokens[]=msg.getBridgeInfo().split(""String_Node_Str"");
    String registrarAddress=tokens[5] + ""String_Node_Str"";
    registrarAddress+=tokens[7];
    String localAddress=null;
    try {
      InetAddress ia=NetworkAddress.getPrivateLocalAddress(""String_Node_Str"" + tokens[5] + ""String_Node_Str""+ tokens[7]+ ""String_Node_Str"");
      localAddress=ia.getHostAddress();
    }
 catch (    UnknownHostException e) {
      logger.warning(e.getMessage());
    }
    if (localAddress != null) {
      try {
        String sipURL=sc.startSoftphone(msg.getUsername(),registrarAddress,10,localAddress,AudioQuality.VPN);
        CellID cellID=((CellClientSession)session).getLocalAvatar().getViewCell().getCellID();
        logger.fine(""String_Node_Str"" + cellID.toString());
        sc.setCallID(cellID.toString());
        session.send(this,new PlaceCallMessage(cellID.toString(),sipURL,0.,0.,0.,90.,false));
      }
 catch (      IOException e) {
        logger.warning(e.getMessage());
      }
    }
 else {
      logger.warning(""String_Node_Str"");
      connectSoftphone();
    }
  }
 else   if (message instanceof VoiceChatJoinRequestMessage) {
    VoiceChatJoinRequestMessage msg=(VoiceChatJoinRequestMessage)message;
    VoiceChatDialog voiceChatDialog=VoiceChatDialog.getVoiceChatDialog(msg.getGroup());
    if (voiceChatDialog == null) {
      CellID cellID=((CellClientSession)session).getLocalAvatar().getViewCell().getCellID();
      voiceChatDialog=new VoiceChatDialog(this,session,cellID);
    }
    voiceChatDialog.requestToJoin(msg.getGroup(),msg.getCaller(),msg.getCalleeList(),msg.getChatType());
  }
 else   if (message instanceof VoiceChatBusyMessage) {
    VoiceChatBusyMessage msg=(VoiceChatBusyMessage)message;
    new VoiceChatBusyDialog(msg.getGroup(),msg.getCaller());
  }
 else   if (message instanceof VoiceChatInfoResponseMessage) {
    VoiceChatInfoResponseMessage msg=(VoiceChatInfoResponseMessage)message;
    VoiceChatDialog voiceChatDialog=VoiceChatDialog.getVoiceChatDialog(msg.getGroup());
    logger.fine(""String_Node_Str"" + msg.getChatInfo());
    if (voiceChatDialog == null) {
      logger.warning(""String_Node_Str"" + msg.getGroup());
    }
 else {
      voiceChatDialog.setChatters(msg.getChatInfo());
    }
  }
 else   if (message instanceof SpeakingMessage) {
    SpeakingMessage msg=(SpeakingMessage)message;
    logger.info(""String_Node_Str"" + msg.getCallID() + (msg.isSpeaking() ? ""String_Node_Str"" : ""String_Node_Str""));
    if (userListJFrame != null) {
      userListJFrame.setSpeaking(msg.getCallID(),msg.isSpeaking());
    }
  }
 else   if (message instanceof GetUserListMessage) {
    if (userListJFrame == null) {
      userListJFrame=new UserListJFrame(((GetUserListMessage)message).getLocation());
      new UserListUpdater(this);
    }
    ArrayList<String> userList=((GetUserListMessage)message).getUserList();
    String s=""String_Node_Str"";
    for (    String user : userList) {
      s+=user + ""String_Node_Str"";
    }
    userList.remove(""String_Node_Str"");
    userListJFrame.setListData(userList.toArray(new String[0]));
    userListJFrame.setVisible(true);
  }
 else   if (message instanceof MuteCallMessage) {
    MuteCallMessage msg=(MuteCallMessage)message;
    if (userListJFrame != null) {
      userListJFrame.setMute(msg.getCallID(),msg.isMuted());
    }
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}"
46278,"public void mute(boolean isMuted){
  SoftphoneControlImpl.getInstance().mute(isMuted);
}","public void mute(boolean isMuted){
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  sc.mute(isMuted);
  session.send(this,new MuteCallMessage(sc.getCallID(),isMuted));
}"
46279,"/** 
 * Creates new form UserListJFrame 
 */
public UserListJFrame(Point location){
  initComponents();
  setLocation(location);
}","/** 
 * Creates new form UserListJFrame 
 */
public UserListJFrame(Point location){
  initComponents();
  setTitle(""String_Node_Str"");
  if (location != null) {
    setLocation(location);
  }
}"
46280,"public void setListData(String[] listData){
  userList.setListData(listData);
}","public void setListData(String[] listData){
  this.listData=listData;
  userList.setListData(listData);
}"
46281,"public void run(){
  while (!done) {
    VoiceChatMessage chatMessage=new VoiceChatInfoRequestMessage(chatGroup);
    session.send(client,chatMessage);
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
  }
}","public void run(){
  while (!done) {
    VoiceChatMessage chatMessage=new VoiceChatInfoRequestMessage(chatGroup);
    session.send(client,chatMessage);
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
    }
  }
}"
46282,"private void leaveButtonActionPerformed(java.awt.event.ActionEvent evt){
  String chatGroup=chatGroupText.getText();
  if (chatGroup.length() == 0) {
    chatGroup=cellID.toString();
  }
  leaveButton.setEnabled(false);
  busyButton.setEnabled(false);
  VoiceChatMessage chatMessage=new VoiceChatLeaveMessage(chatGroup,cellID.toString());
  session.send(client,chatMessage);
  if (updater != null) {
    updater.done();
  }
  dialogs.remove(chatGroup);
  setVisible(false);
}","private void leaveButtonActionPerformed(java.awt.event.ActionEvent evt){
  String chatGroup=chatGroupText.getText();
  if (chatGroup.length() == 0) {
    chatGroup=cellID.toString();
  }
  leaveButton.setEnabled(false);
  busyButton.setEnabled(false);
  VoiceChatMessage chatMessage=new VoiceChatLeaveMessage(chatGroup,cellID.toString());
  session.send(client,chatMessage);
  if (chatGroupUpdater != null) {
    chatGroupUpdater.done();
  }
  dialogs.remove(chatGroup);
  setVisible(false);
}"
46283,"private void joinButtonActionPerformed(java.awt.event.ActionEvent evt){
  stopFlasher();
  String caller=callerText.getText();
  String chatters=chatterText.getText();
  chatters.replaceAll(""String_Node_Str"" + caller,""String_Node_Str"");
  chatters=chatters.replaceAll(caller,""String_Node_Str"");
  String chatGroup=chatGroupText.getText();
  if (chatGroup.length() == 0) {
    chatGroup=caller + ""String_Node_Str"" + cellID.toString();
  }
  logger.warning(""String_Node_Str"" + chatGroup + ""String_Node_Str""+ caller+ ""String_Node_Str""+ chatters+ ""String_Node_Str""+ chatType);
  statusLabel.setText(chatType + ""String_Node_Str"");
  VoiceChatMessage chatMessage=new VoiceChatJoinMessage(chatGroup,caller,chatters,chatType);
  session.send(client,chatMessage);
  leaveButton.setEnabled(true);
  dialogs.put(chatGroup,this);
  if (updater == null) {
    updater=new Updater(chatGroup);
    updater.start();
  }
}","private void joinButtonActionPerformed(java.awt.event.ActionEvent evt){
  stopFlasher();
  String caller=callerText.getText();
  String chatters=chatterText.getText();
  chatters.replaceAll(""String_Node_Str"" + caller,""String_Node_Str"");
  chatters=chatters.replaceAll(caller,""String_Node_Str"");
  String chatGroup=chatGroupText.getText();
  if (chatGroup.length() == 0) {
    chatGroup=caller + ""String_Node_Str"" + cellID.toString();
  }
  logger.warning(""String_Node_Str"" + chatGroup + ""String_Node_Str""+ caller+ ""String_Node_Str""+ chatters+ ""String_Node_Str""+ chatType);
  statusLabel.setText(chatType + ""String_Node_Str"");
  VoiceChatMessage chatMessage=new VoiceChatJoinMessage(chatGroup,caller,chatters,chatType);
  session.send(client,chatMessage);
  leaveButton.setEnabled(true);
  dialogs.put(chatGroup,this);
  if (chatGroupUpdater == null) {
    chatGroupUpdater=new ChatGroupUpdater(chatGroup);
    chatGroupUpdater.start();
  }
}"
46284,"public void callStatusChanged(CallStatus status){
  logger.finer(""String_Node_Str"" + status);
  int code=status.getCode();
  String callId=status.getCallId();
  if (callId == null) {
    logger.warning(""String_Node_Str"" + status);
    return;
  }
  CommsManager cm=WonderlandContext.getCommsManager();
  WonderlandClientSender sender=cm.getSender(AudioManagerConnectionType.CONNECTION_TYPE);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
switch (code) {
case CallStatus.ESTABLISHED:
    Call call=vm.getCall(callId);
  if (call == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
Player player=call.getPlayer();
if (player == null) {
logger.warning(""String_Node_Str"" + call);
return;
}
vm.dump(""String_Node_Str"");
player.setPrivateMixes(true);
break;
case CallStatus.STARTEDSPEAKING:
sender.send(new SpeakingMessage(callId,true));
break;
case CallStatus.STOPPEDSPEAKING:
sender.send(new SpeakingMessage(callId,false));
break;
case CallStatus.BRIDGE_OFFLINE:
logger.info(""String_Node_Str"" + status);
if (callId.length() == 0) {
logger.fine(""String_Node_Str"");
}
 else {
Call c=vm.getCall(callId);
if (c == null) {
logger.warning(""String_Node_Str"" + callId);
break;
}
Player p=c.getPlayer();
if (p == null) {
logger.warning(""String_Node_Str"" + callId);
break;
}
try {
c.end(true);
}
 catch (IOException e) {
logger.warning(""String_Node_Str"" + callId);
}
try {
setupCall(callId,c.getSetup(),-p.getX(),p.getY(),p.getZ(),p.getOrientation());
}
 catch (IOException e) {
logger.warning(""String_Node_Str"" + c + ""String_Node_Str""+ e.getMessage());
}
}
break;
}
}","public void callStatusChanged(CallStatus status){
  logger.finer(""String_Node_Str"" + status);
  int code=status.getCode();
  String callId=status.getCallId();
  if (callId == null) {
    logger.warning(""String_Node_Str"" + status);
    return;
  }
  CommsManager cm=WonderlandContext.getCommsManager();
  WonderlandClientSender sender=cm.getSender(AudioManagerConnectionType.CONNECTION_TYPE);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
switch (code) {
case CallStatus.ESTABLISHED:
    Call call=vm.getCall(callId);
  if (call == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
Player player=call.getPlayer();
if (player == null) {
logger.warning(""String_Node_Str"" + call);
return;
}
vm.dump(""String_Node_Str"");
player.setPrivateMixes(true);
break;
case CallStatus.STARTEDSPEAKING:
sender.send(new SpeakingMessage(callId,true));
break;
case CallStatus.STOPPEDSPEAKING:
sender.send(new SpeakingMessage(callId,false));
break;
case CallStatus.BRIDGE_OFFLINE:
logger.info(""String_Node_Str"" + status);
Call c=vm.getCall(callId);
if (callId == null || callId.length() == 0) {
logger.fine(""String_Node_Str"");
}
 else {
if (c == null) {
logger.warning(""String_Node_Str"" + callId);
break;
}
Player p=c.getPlayer();
if (p == null) {
logger.warning(""String_Node_Str"" + callId);
break;
}
try {
c.end(true);
}
 catch (IOException e) {
logger.warning(""String_Node_Str"" + callId);
}
try {
setupCall(callId,c.getSetup(),-p.getX(),p.getY(),p.getZ(),p.getOrientation());
}
 catch (IOException e) {
logger.warning(""String_Node_Str"" + c + ""String_Node_Str""+ e.getMessage());
}
}
break;
}
}"
46285,"public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,Message message){
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  if (message instanceof AvatarCellIDMessage) {
    AvatarCellIDMessage msg=(AvatarCellIDMessage)message;
    voiceChatHandler.addTransformChangeListener(msg.getCellID());
    return;
  }
  if (message instanceof CellStatusChangeMessage) {
    CellStatusChangeMessage msg=(CellStatusChangeMessage)message;
    if (msg.getActive()) {
      voiceChatHandler.addTransformChangeListener(msg.getCellID());
    }
 else {
      voiceChatHandler.removeTransformChangeListener(msg.getCellID());
    }
    return;
  }
  if (message instanceof GetVoiceBridgeMessage) {
    GetVoiceBridgeMessage msg=(GetVoiceBridgeMessage)message;
    String username=UserManager.getUserManager().getUser(clientID).getUsername();
    logger.fine(""String_Node_Str"" + username);
    try {
      String voiceBridge=vm.getVoiceBridge().toString();
      logger.info(""String_Node_Str"" + voiceBridge + ""String_Node_Str"");
      msg.setBridgeInfo(voiceBridge);
      msg.setUsername(username);
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + e.getMessage());
      return;
    }
    sender.send(clientID,msg);
    return;
  }
  if (message instanceof GetUserListMessage) {
    GetUserListMessage msg=(GetUserListMessage)message;
    UserManager userManager=UserManager.getUserManager();
    Iterator<ManagedReference<UserMO>> it=userManager.getAllUsers().iterator();
    ArrayList<String> userList=new ArrayList();
    while (it.hasNext()) {
      UserMO userMO=it.next().get();
      userList.add(userMO.getIdentity().getUsername());
    }
    msg.setUserList(userList);
    sender.send(clientID,msg);
    return;
  }
  if (message instanceof PlaceCallMessage) {
    logger.fine(""String_Node_Str"" + clientID);
    PlaceCallMessage msg=(PlaceCallMessage)message;
    CallSetup setup=new CallSetup();
    CallParticipant cp=new CallParticipant();
    setup.cp=cp;
    setup.listener=this;
    String callID=msg.getSoftphoneCallID();
    logger.fine(""String_Node_Str"" + callID);
    if (callID == null) {
      logger.fine(""String_Node_Str"" + msg.getSipURL() + ""String_Node_Str""+ callID);
      return;
    }
    cp.setCallId(callID);
    cp.setName(UserManager.getUserManager().getUser(clientID).getUsername());
    cp.setPhoneNumber(msg.getSipURL());
    cp.setConferenceId(vm.getConferenceId());
    cp.setVoiceDetection(true);
    cp.setDtmfDetection(true);
    cp.setVoiceDetectionWhileMuted(true);
    cp.setHandleSessionProgress(true);
    cp.setJoinConfirmationTimeout(0);
    cp.setCallAnsweredTreatment(null);
    senderCallIDMap.put(sender,callID);
    try {
      setupCall(callID,setup,msg.getX(),msg.getY(),msg.getZ(),msg.getDirection());
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + cp + ""String_Node_Str""+ e.getMessage());
      senderCallIDMap.remove(sender);
    }
    return;
  }
  if (message instanceof TransferCallMessage) {
    TransferCallMessage msg=(TransferCallMessage)message;
    String callID=msg.getSoftphoneCallID();
    if (callID == null) {
      logger.warning(""String_Node_Str"" + callID);
      return;
    }
    Call call=vm.getCall(callID);
    if (call == null) {
      logger.warning(""String_Node_Str"" + callID);
      return;
    }
    CallParticipant cp=call.getSetup().cp;
    cp.setPhoneNumber(msg.getPhoneNumber());
    cp.setJoinConfirmationTimeout(90);
    String callAnsweredTreatment=System.getProperty(""String_Node_Str"");
    if (callAnsweredTreatment == null || callAnsweredTreatment.length() == 0) {
      callAnsweredTreatment=""String_Node_Str"";
    }
    cp.setCallAnsweredTreatment(callAnsweredTreatment);
    try {
      call.transfer(cp);
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + e.getMessage());
    }
    return;
  }
  if (message instanceof DisconnectCallMessage) {
    logger.fine(""String_Node_Str"");
    return;
  }
  if (message instanceof VoiceChatMessage) {
    voiceChatHandler.processVoiceChatMessage(sender,clientID,(VoiceChatMessage)message);
    return;
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,Message message){
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  if (message instanceof AvatarCellIDMessage) {
    AvatarCellIDMessage msg=(AvatarCellIDMessage)message;
    voiceChatHandler.addTransformChangeListener(msg.getCellID());
    return;
  }
  if (message instanceof CellStatusChangeMessage) {
    CellStatusChangeMessage msg=(CellStatusChangeMessage)message;
    if (msg.getActive()) {
      voiceChatHandler.addTransformChangeListener(msg.getCellID());
    }
 else {
      voiceChatHandler.removeTransformChangeListener(msg.getCellID());
    }
    return;
  }
  if (message instanceof GetVoiceBridgeMessage) {
    GetVoiceBridgeMessage msg=(GetVoiceBridgeMessage)message;
    String username=UserManager.getUserManager().getUser(clientID).getUsername();
    logger.fine(""String_Node_Str"" + username);
    try {
      String voiceBridge=vm.getVoiceBridge().toString();
      logger.info(""String_Node_Str"" + voiceBridge + ""String_Node_Str"");
      msg.setBridgeInfo(voiceBridge);
      msg.setUsername(username);
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + e.getMessage());
      return;
    }
    sender.send(clientID,msg);
    return;
  }
  if (message instanceof GetUserListMessage) {
    GetUserListMessage msg=(GetUserListMessage)message;
    UserManager userManager=UserManager.getUserManager();
    Iterator<ManagedReference<UserMO>> it=userManager.getAllUsers().iterator();
    ArrayList<String> userList=new ArrayList();
    while (it.hasNext()) {
      UserMO userMO=it.next().get();
      userList.add(userMO.getIdentity().getUsername());
    }
    msg.setUserList(userList);
    sender.send(clientID,msg);
    return;
  }
  if (message instanceof PlaceCallMessage) {
    logger.fine(""String_Node_Str"" + clientID);
    PlaceCallMessage msg=(PlaceCallMessage)message;
    CallSetup setup=new CallSetup();
    CallParticipant cp=new CallParticipant();
    setup.cp=cp;
    setup.listener=this;
    String callID=msg.getSoftphoneCallID();
    logger.fine(""String_Node_Str"" + callID);
    if (callID == null) {
      logger.fine(""String_Node_Str"" + msg.getSipURL() + ""String_Node_Str""+ callID);
      return;
    }
    cp.setCallId(callID);
    cp.setName(UserManager.getUserManager().getUser(clientID).getUsername());
    cp.setPhoneNumber(msg.getSipURL());
    cp.setConferenceId(vm.getConferenceId());
    cp.setVoiceDetection(true);
    cp.setDtmfDetection(true);
    cp.setVoiceDetectionWhileMuted(true);
    cp.setHandleSessionProgress(true);
    cp.setJoinConfirmationTimeout(0);
    cp.setCallAnsweredTreatment(null);
    senderCallIDMap.put(sender,callID);
    try {
      setupCall(callID,setup,msg.getX(),msg.getY(),msg.getZ(),msg.getDirection());
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + cp + ""String_Node_Str""+ e.getMessage());
      senderCallIDMap.remove(sender);
    }
    return;
  }
  if (message instanceof MuteCallMessage) {
    MuteCallMessage msg=(MuteCallMessage)message;
    sender.send(new MuteCallMessage(msg.getCallID(),msg.isMuted()));
    return;
  }
  if (message instanceof TransferCallMessage) {
    TransferCallMessage msg=(TransferCallMessage)message;
    String callID=msg.getSoftphoneCallID();
    if (callID == null) {
      logger.warning(""String_Node_Str"" + callID);
      return;
    }
    Call call=vm.getCall(callID);
    if (call == null) {
      logger.warning(""String_Node_Str"" + callID);
      return;
    }
    CallParticipant cp=call.getSetup().cp;
    cp.setPhoneNumber(msg.getPhoneNumber());
    cp.setJoinConfirmationTimeout(90);
    String callAnsweredTreatment=System.getProperty(""String_Node_Str"");
    if (callAnsweredTreatment == null || callAnsweredTreatment.length() == 0) {
      callAnsweredTreatment=""String_Node_Str"";
    }
    cp.setCallAnsweredTreatment(callAnsweredTreatment);
    try {
      call.transfer(cp);
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + e.getMessage());
    }
    return;
  }
  if (message instanceof DisconnectCallMessage) {
    logger.fine(""String_Node_Str"");
    return;
  }
  if (message instanceof VoiceChatMessage) {
    voiceChatHandler.processVoiceChatMessage(sender,clientID,(VoiceChatMessage)message);
    return;
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
46286,"/** 
 * Given a component factory, adds the component to the server and upates the GUI to indicate its presence
 */
private void addComponent(CellComponentFactorySPI spi){
  CellComponentServerState state=spi.getDefaultCellComponentServerState();
  state.setStatic(false);
  CellID cellID=cell.getCellID();
  CellServerComponentMessage message=CellServerComponentMessage.newAddMessage(cellID,state);
  ResponseMessage response=cell.sendCellMessageAndWait(message);
  if (response == null) {
    logger.warning(""String_Node_Str"" + cell.getCellID() + ""String_Node_Str""+ cell.getName()+ ""String_Node_Str"");
    return;
  }
  if (response instanceof OKMessage) {
    addComponentToPanelSet(spi,state);
  }
 else   if (response instanceof ErrorMessage) {
    logger.log(Level.WARNING,""String_Node_Str"",((ErrorMessage)response).getErrorCause());
  }
}","/** 
 * Given a component factory, adds the component to the server and upates the GUI to indicate its presence
 */
private void addComponent(CellComponentFactorySPI spi){
  CellComponentServerState state=spi.getDefaultCellComponentServerState();
  CellID cellID=cell.getCellID();
  CellServerComponentMessage message=CellServerComponentMessage.newAddMessage(cellID,state);
  ResponseMessage response=cell.sendCellMessageAndWait(message);
  if (response == null) {
    logger.warning(""String_Node_Str"" + cell.getCellID() + ""String_Node_Str""+ cell.getName()+ ""String_Node_Str"");
    return;
  }
  if (response instanceof OKMessage) {
    addComponentToPanelSet(spi,state);
  }
 else   if (response instanceof ErrorMessage) {
    logger.log(Level.WARNING,""String_Node_Str"",((ErrorMessage)response).getErrorCause());
  }
}"
46287,"@SuppressWarnings(""String_Node_Str"") public CellMO loadCellMO(String typeName,Object... args) throws LoadCellMOException {
  try {
    Class<CellMO> clazz=(Class<CellMO>)Class.forName(typeName);
    return createCell(clazz,args);
  }
 catch (  Exception ex) {
    throw new LoadCellMOException(""String_Node_Str"" + typeName,ex);
  }
}","@SuppressWarnings(""String_Node_Str"") public CellMO loadCellMO(String typeName,Object... args) throws LoadCellMOException {
  try {
    Class<CellMO> clazz=(Class<CellMO>)Class.forName(typeName);
    return createCell(clazz,args);
  }
 catch (  java.lang.reflect.InvocationTargetException ite) {
    Throwable throwable=ite.getCause();
    if (throwable instanceof java.lang.RuntimeException) {
      throw ((RuntimeException)throwable);
    }
    throw new LoadCellMOException(""String_Node_Str"" + typeName,ite);
  }
catch (  java.lang.Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    throw new LoadCellMOException(""String_Node_Str"" + typeName,ex);
  }
}"
46288,"/** 
 * Creates and returns a Node that contains a sphere that represents the resize affordance
 */
private Node createSphereNode(String name){
  Node sphereNode=new Node();
  Sphere sphere=new Sphere(name,30,30,radius);
  sphereNode.attachChild(sphere);
  sphere.setSolidColor(new ColorRGBA(0.0f,0.0f,0.0f,0.5f));
  sphereNode.setRenderState(zbuf);
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  MaterialState matState=(MaterialState)rm.createRendererState(RenderState.RS_MATERIAL);
  sphereNode.setRenderState(matState);
  matState.setDiffuse(new ColorRGBA(0.0f,0.0f,0.0f,0.5f));
  matState.setEnabled(true);
  matState.setMaterialFace(MaterialState.MaterialFace.FrontAndBack);
  BlendState alphaState=(BlendState)ClientContextJME.getWorldManager().getRenderManager().createRendererState(RenderState.RS_BLEND);
  alphaState.setBlendEnabled(true);
  alphaState.setSourceFunction(BlendState.SourceFunction.SourceAlpha);
  alphaState.setDestinationFunction(BlendState.DestinationFunction.OneMinusSourceAlpha);
  alphaState.setTestEnabled(true);
  alphaState.setTestFunction(BlendState.TestFunction.GreaterThan);
  alphaState.setEnabled(true);
  sphere.setRenderState(alphaState);
  sphere.updateRenderState();
  sphere.setModelBound(new BoundingSphere());
  sphere.updateModelBound();
  return sphereNode;
}","/** 
 * Creates and returns a Node that contains a sphere that represents the resize affordance
 */
private Node createSphereNode(String name){
  Node sphereNode=new Node();
  Sphere sphere=new Sphere(name,30,30,radius);
  sphereNode.attachChild(sphere);
  sphere.setSolidColor(new ColorRGBA(0.0f,0.0f,0.0f,0.5f));
  sphereNode.setRenderState(zbuf);
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  MaterialState matState=(MaterialState)rm.createRendererState(RenderState.RS_MATERIAL);
  sphereNode.setRenderState(matState);
  matState.setDiffuse(new ColorRGBA(0.0f,0.0f,0.0f,0.5f));
  matState.setAmbient(new ColorRGBA(0.0f,0.0f,0.0f,0.5f));
  matState.setShininess(128.0f);
  matState.setEmissive(new ColorRGBA(0.0f,0.0f,0.0f,0.5f));
  matState.setEnabled(true);
  BlendState alphaState=(BlendState)ClientContextJME.getWorldManager().getRenderManager().createRendererState(RenderState.RS_BLEND);
  alphaState.setBlendEnabled(true);
  alphaState.setSourceFunction(BlendState.SourceFunction.SourceAlpha);
  alphaState.setDestinationFunction(BlendState.DestinationFunction.OneMinusSourceAlpha);
  alphaState.setTestEnabled(true);
  alphaState.setTestFunction(BlendState.TestFunction.GreaterThan);
  alphaState.setEnabled(true);
  sphere.setRenderState(alphaState);
  CullState cullState=(CullState)ClientContextJME.getWorldManager().getRenderManager().createRendererState(RenderState.RS_CULL);
  cullState.setCullFace(CullState.Face.Back);
  sphereNode.setRenderState(cullState);
  sphere.setModelBound(new BoundingSphere());
  sphere.updateModelBound();
  return sphereNode;
}"
46289,"@Override public void setServerState(CellServerState setup){
  super.setServerState(setup);
  this.modelURI=((JmeColladaCellServerState)setup).getModel();
  String model=setup.getProperty(""String_Node_Str"");
  if (model != null) {
    this.modelURI=model;
  }
  JmeColladaCellServerState jccss=(JmeColladaCellServerState)setup;
  if (jccss.getGeometryTranslation() != null) {
    this.geometryTranslation=new Vector3f((float)jccss.getGeometryTranslation().x,(float)jccss.getGeometryTranslation().y,(float)jccss.getGeometryTranslation().z);
  }
  if (jccss.getGeometryRotation() != null) {
    this.geometryRotation=new Quaternion().fromAngleAxis((float)jccss.getGeometryRotation().angle,new Vector3f((float)jccss.getGeometryRotation().x,(float)jccss.getGeometryRotation().y,(float)jccss.getGeometryRotation().z));
  }
}","@Override public void setServerState(CellServerState setup){
  super.setServerState(setup);
  this.modelURI=((JmeColladaCellServerState)setup).getModel();
  JmeColladaCellServerState jccss=(JmeColladaCellServerState)setup;
  if (jccss.getGeometryTranslation() != null) {
    this.geometryTranslation=new Vector3f((float)jccss.getGeometryTranslation().x,(float)jccss.getGeometryTranslation().y,(float)jccss.getGeometryTranslation().z);
  }
  if (jccss.getGeometryRotation() != null) {
    this.geometryRotation=new Quaternion().fromAngleAxis((float)jccss.getGeometryRotation().angle,new Vector3f((float)jccss.getGeometryRotation().x,(float)jccss.getGeometryRotation().y,(float)jccss.getGeometryRotation().z));
  }
}"
46290,"@Override protected void sizeChanged(Dimension oldSize,Dimension newSize){
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + oldSize);
  System.err.println(""String_Node_Str"" + newSize);
  if (windowSwing != null) {
    windowSwing.setSize(newSize.width,newSize.height);
  }
}","@Override protected void sizeChanged(Dimension oldSize,Dimension newSize){
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + oldSize);
  System.err.println(""String_Node_Str"" + newSize);
synchronized (this) {
    while (windowSwing == null) {
      try {
        wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  windowSwing.setSize2(newSize.width,newSize.height);
}"
46291,"void setWindowSwing(WindowSwing windowSwing){
  this.windowSwing=windowSwing;
}","void setWindowSwing(WindowSwing windowSwing){
  this.windowSwing=windowSwing;
synchronized (this) {
    notifyAll();
  }
}"
46292,"/** 
 * Specify the Swing component displayed in this window 
 */
public void setComponent(Component component){
  if (this.component == component) {
    return;
  }
  this.component=component;
  if (embeddedPeer != null) {
    embeddedPeer.dispose();
    embeddedPeer=null;
  }
  if (component != null) {
    checkContainer();
  }
  component.addMouseListener(new MyAwtEnterListener());
  addWorldEventListener(new MySwingEnterExitListener());
  setSize(size);
  embeddedPeer.repaint();
}","/** 
 * Specify the Swing component displayed in this window 
 */
public void setComponent(Component component){
  if (this.component == component) {
    return;
  }
  this.component=component;
  if (embeddedPeer != null) {
    embeddedPeer.dispose();
    embeddedPeer=null;
  }
  if (component != null) {
    checkContainer();
  }
  addWorldEventListener(new MySwingEnterExitListener());
  embeddedPeer.validate();
}"
46293,"@Override protected void sizeChanged(Dimension oldSize,Dimension newSize){
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + oldSize);
  System.err.println(""String_Node_Str"" + newSize);
synchronized (this) {
    while (windowSwing == null) {
      try {
        wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  windowSwing.setSize(newSize.width,newSize.height);
}","@Override protected void sizeChanged(Dimension oldSize,Dimension newSize){
synchronized (this) {
    while (windowSwing == null) {
      try {
        wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  windowSwing.setSize(newSize.width,newSize.height);
}"
46294,"@Override protected void sizeChanged(Dimension oldSize,Dimension newSize){
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + oldSize);
  System.err.println(""String_Node_Str"" + newSize);
synchronized (this) {
    while (windowSwing == null) {
      try {
        wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  windowSwing.setSize2(newSize.width,newSize.height);
}","@Override protected void sizeChanged(Dimension oldSize,Dimension newSize){
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + oldSize);
  System.err.println(""String_Node_Str"" + newSize);
synchronized (this) {
    while (windowSwing == null) {
      try {
        wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  windowSwing.setSize(newSize.width,newSize.height);
}"
46295,"/** 
 * Specify the Swing component displayed in this window 
 */
public void setComponent(Component component){
  if (this.component == component) {
    return;
  }
  this.component=component;
  if (embeddedPeer != null) {
    embeddedPeer.dispose();
    embeddedPeer=null;
  }
  if (component != null) {
    checkContainer();
  }
  addWorldEventListener(new MySwingEnterExitListener());
  embeddedPeer.validate();
}","/** 
 * Specify the Swing component displayed in this window 
 */
public void setComponent(Component component){
  if (this.component == component) {
    return;
  }
  this.component=component;
  if (embeddedPeer != null) {
    embeddedPeer.dispose();
    embeddedPeer=null;
  }
  if (component != null) {
    checkContainer();
  }
  addWorldEventListener(new MySwingEnterExitListener());
  embeddedPeer.validate();
  embeddedPeer.repaint();
}"
46296,"public MicrophoneCellServerState(String name,FullVolumeArea fullVolumeArea,ActiveArea activeArea){
  this.name=name;
  this.fullVolumeArea=fullVolumeArea;
  this.activeArea=activeArea;
  logger.finer(""String_Node_Str"" + fullVolumeArea.areaType + ""String_Node_Str""+ fullVolumeArea.xExtent+ ""String_Node_Str""+ fullVolumeArea.yExtent+ ""String_Node_Str""+ fullVolumeArea.zExtent);
  logger.finer(""String_Node_Str"" + activeArea.origin + ""String_Node_Str""+ activeArea.xExtent+ ""String_Node_Str""+ activeArea.yExtent+ ""String_Node_Str""+ activeArea.zExtent);
}","public MicrophoneCellServerState(String name,FullVolumeArea fullVolumeArea,ActiveArea activeArea){
  this.name=name;
  this.fullVolumeArea=fullVolumeArea;
  this.activeArea=activeArea;
}"
46297,"@Override public CellClientState getClientState(CellClientState state,WonderlandClientID clientID,ClientCapabilities capabilities){
  if (state != null)   logger.severe(""String_Node_Str"");
  CellClientState ret=new ColladaCellClientState(this.modelURI.getServerURL(),geometryTranslation,geometryRotation);
  super.getClientState(ret,clientID,capabilities);
  return ret;
}","@Override public CellClientState getClientState(CellClientState state,WonderlandClientID clientID,ClientCapabilities capabilities){
  if (state != null) {
    logger.severe(""String_Node_Str"");
  }
  CellClientState ret=new ColladaCellClientState(this.modelURI.toExternalForm(),geometryTranslation,geometryRotation);
  super.getClientState(ret,clientID,capabilities);
  return ret;
}"
46298,"/** 
 * Configure this runner.  This method sets values to the default for the Darkstar server.
 * @param props the properties to deploy with
 * @throws RunnerConfigurationException if there is an error configuringthe runner
 */
@Override public void configure(Properties props) throws RunnerConfigurationException {
  super.configure(props);
  if (!props.containsKey(""String_Node_Str"")) {
    setName(DEFAULT_NAME);
  }
  webserverURL=props.getProperty(""String_Node_Str"");
  try {
    File wfsFile=new File(getRunDir(),SELECTED_WFS_FILE);
    if (wfsFile.exists()) {
      wfsName=restoreWFSName(SELECTED_WFS_FILE);
    }
 else {
      wfsName=System.getProperty(DEFAULT_WORLD_PROP,DEFAULT_WORLD);
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,""String_Node_Str"",ioe);
  }
}","/** 
 * Configure this runner.  This method sets values to the default for the Darkstar server.
 * @param props the properties to deploy with
 * @throws RunnerConfigurationException if there is an error configuringthe runner
 */
@Override public void configure(Properties props) throws RunnerConfigurationException {
  super.configure(props);
  if (!props.containsKey(""String_Node_Str"")) {
    setName(DEFAULT_NAME);
  }
  webserverURL=props.getProperty(""String_Node_Str"");
  try {
    File wfsFile=new File(getBaseDir(),SELECTED_WFS_FILE);
    if (wfsFile.exists()) {
      wfsName=restoreWFSName(SELECTED_WFS_FILE);
    }
 else {
      wfsName=System.getProperty(DEFAULT_WORLD_PROP,DEFAULT_WORLD);
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,""String_Node_Str"",ioe);
  }
}"
46299,"/** 
 * Save the current WFS name to disk
 * @param wfsName the name to save
 * @param fileName the file name to save to
 */
protected void saveWFSName(String wfsName,String fileName) throws IOException {
  File wfsFile=new File(getRunDir(),fileName);
  PrintWriter out=new PrintWriter(new FileWriter(wfsFile));
  if (wfsName != null) {
    out.println(wfsName);
  }
  out.close();
}","/** 
 * Save the current WFS name to disk
 * @param wfsName the name to save
 * @param fileName the file name to save to
 */
protected void saveWFSName(String wfsName,String fileName) throws IOException {
  File wfsFile=new File(getBaseDir(),fileName);
  PrintWriter out=new PrintWriter(new FileWriter(wfsFile));
  if (wfsName != null) {
    out.println(wfsName);
  }
  out.close();
}"
46300,"/** 
 * Restore a WFS URL from disk
 * @param fileName the file name to read from
 * @return the current URL, or null if no URL is set
 */
protected String restoreWFSName(String fileName) throws IOException {
  File wfsFile=new File(getRunDir(),fileName);
  if (!wfsFile.exists()) {
    return null;
  }
  BufferedReader br=new BufferedReader(new FileReader(wfsFile));
  return br.readLine();
}","/** 
 * Restore a WFS URL from disk
 * @param fileName the file name to read from
 * @return the current URL, or null if no URL is set
 */
protected String restoreWFSName(String fileName) throws IOException {
  File wfsFile=new File(getBaseDir(),fileName);
  if (!wfsFile.exists()) {
    return null;
  }
  BufferedReader br=new BufferedReader(new FileReader(wfsFile));
  return br.readLine();
}"
46301,"/** 
 * Transform the vector ret by this transform. ret is modified and returned.
 * @param ret
 */
public Vector3f transform(Vector3f ret){
  ret=rotation.mult(ret);
  ret=scale.mult(ret);
  ret.addLocal(translation);
  return ret;
}","/** 
 * Transform the vector ret by this transform. ret is modified and returned.
 * @param ret
 */
public Vector3f transform(Vector3f ret){
  rotation.multLocal(ret);
  scale.multLocal(ret);
  ret.addLocal(translation);
  return ret;
}"
46302,"/** 
 * {@inheritDoc}
 */
@Override public void setClientState(CellClientState configData){
  App2DCellConfig appConfigData=(App2DCellConfig)configData;
  pixelScale=appConfigData.getPixelScale();
}","/** 
 * {@inheritDoc}
 */
@Override public void setClientState(CellClientState clientState){
  App2DCellClientState appClientState=(App2DCellClientState)clientState;
  pixelScale=appClientState.getPixelScale();
}"
46303,"/** 
 * {@inheritDoc}
 */
@Override public void setClientState(CellClientState configData){
  super.setClientState(configData);
  AppConventionalCellConfig config=(AppConventionalCellConfig)configData;
  masterHost=config.getMasterHost();
  appName=config.getAppName();
  pixelScale=config.getPixelScale();
  connectionInfo=config.getConnectionInfo();
  if (masterHost.equals(NetworkAddress.getDefaultHostAddress())) {
    boolean bestView=config.isBestView();
    if (config.isUserLaunched()) {
      UUID appId=config.getAppId();
      App appToAttach=AppConventional.findDisembodiedApp(appId);
      if (appToAttach == null) {
        logger.severe(""String_Node_Str"");
        return;
      }
      app=appToAttach;
      AppConventional.removeDisembodiedApp(appId);
      ((AppConventional)app).setInitInBestView(bestView);
      appToAttach.setCell(this);
      return;
    }
 else {
      startMaster(config.getCommand(),false);
    }
  }
 else {
    startSlave();
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setClientState(CellClientState clientState){
  super.setClientState(clientState);
  AppConventionalCellClientState state=(AppConventionalCellClientState)clientState;
  masterHost=state.getMasterHost();
  appName=state.getAppName();
  pixelScale=state.getPixelScale();
  connectionInfo=state.getConnectionInfo();
  if (masterHost.equals(NetworkAddress.getDefaultHostAddress())) {
    boolean bestView=state.isBestView();
    if (state.isUserLaunched()) {
      UUID appId=state.getAppId();
      App appToAttach=AppConventional.findDisembodiedApp(appId);
      if (appToAttach == null) {
        logger.severe(""String_Node_Str"");
        return;
      }
      app=appToAttach;
      AppConventional.removeDisembodiedApp(appId);
      ((AppConventional)app).setInitInBestView(bestView);
      appToAttach.setCell(this);
      return;
    }
 else {
      startMaster(state.getCommand(),false);
    }
  }
 else {
    startSlave();
  }
}"
46304,"/** 
 * {@inheritDoc}
 */
@Override protected CellClientState getCellClientState(CellClientState cellClientState,WonderlandClientID clientID,ClientCapabilities capabilities){
  if (cellClientState == null) {
    cellClientState=new AppCellConfig();
  }
  return super.getCellClientState(cellClientState,clientID,capabilities);
}","/** 
 * {@inheritDoc}
 */
@Override protected CellClientState getCellClientState(CellClientState cellClientState,WonderlandClientID clientID,ClientCapabilities capabilities){
  if (cellClientState == null) {
    cellClientState=new AppCellClientState();
  }
  return super.getCellClientState(cellClientState,clientID,capabilities);
}"
46305,"/** 
 * {@inheritDoc}
 */
@Override public void setCellServerState(CellServerState setupData){
  super.setCellServerState(setupData);
}","/** 
 * {@inheritDoc}
 */
@Override public void setCellServerState(CellServerState serverState){
  super.setCellServerState(serverState);
}"
46306,"/** 
 * Performs a pick on the scene graph and determine the actual destination pick info  taking into account button click threshold and mouse button grabbing. Returns the destination pick info in the global member destPickInfo.
 * @param e The mouse event.
 * @return The destination pick info.
 */
protected DetermineDestPickInfoReturn determineDestPickInfo(MouseEvent e){
  boolean deactivateGrab=false;
  PickInfo swingHitPickInfo=null;
  if (swingPickInfos.peek() != null) {
    try {
      PickInfoQueueEntry entry=swingPickInfos.take();
      if (e.getID() == entry.mouseEvent.getID() && e.getX() == entry.mouseEvent.getX() && e.getY() == entry.mouseEvent.getY()) {
        swingHitPickInfo=entry.hitPickInfo;
      }
 else {
        logger.warning(""String_Node_Str"");
        logger.warning(""String_Node_Str"" + e);
        logger.warning(""String_Node_Str"" + entry.mouseEvent);
      }
    }
 catch (    InterruptedException ex) {
    }
  }
  if (e.getID() == MouseEvent.MOUSE_PRESSED) {
    buttonLastX=e.getX();
    buttonLastY=e.getY();
  }
 else   if (e.getID() == MouseEvent.MOUSE_CLICKED) {
    if (!buttonWithinClickThreshold(e.getX(),e.getY())) {
      return null;
    }
  }
  if (e.getID() == MouseEvent.MOUSE_CLICKED) {
    return new DetermineDestPickInfoReturn(lastButtonReleasedPickInfo,lastButtonReleasedPickInfo);
  }
  PickInfo hitPickInfo;
  if (swingHitPickInfo == null) {
    hitPickInfo=pickEventScreenPos(e.getX(),e.getY());
    logger.finest(""String_Node_Str"" + hitPickInfo);
    if (hitPickInfo != null) {
      logger.finest(""String_Node_Str"" + hitPickInfo.size());
    }
  }
 else {
    hitPickInfo=swingHitPickInfo;
  }
  GrabChangeType grabChange=GrabChangeType.GRAB_NO_CHANGE;
  int eventID=e.getID();
  if (eventID == MouseEvent.MOUSE_PRESSED || eventID == MouseEvent.MOUSE_RELEASED) {
    grabChange=evaluateButtonGrabStateChange(eventID,e);
    if (grabChange == GrabChangeType.GRAB_ACTIVATE) {
      grabIsActive=true;
      grabPickInfo=hitPickInfo;
      logger.finest(""String_Node_Str"" + grabPickInfo);
      if (grabPickInfo != null) {
        logger.finest(""String_Node_Str"" + grabPickInfo.size());
        if (grabPickInfo.size() > 0) {
          PickDetails pd=grabPickInfo.get(0);
          logger.finest(""String_Node_Str"" + pd);
          if (pd != null) {
            logPickDetailsEntity(pd);
            CollisionComponent cc=pd.getCollisionComponent();
            logger.finest(""String_Node_Str"" + cc);
            if (cc != null) {
              logger.finest(""String_Node_Str"" + cc.getEntity());
            }
          }
        }
      }
    }
  }
  PickInfo destPickInfo;
  logger.finest(""String_Node_Str"" + grabIsActive);
  if (grabIsActive) {
    destPickInfo=grabPickInfo;
    logger.finest(""String_Node_Str"" + grabPickInfo);
  }
 else {
    destPickInfo=hitPickInfo;
  }
  logger.finest(""String_Node_Str"" + destPickInfo);
  if (grabChange == GrabChangeType.GRAB_DEACTIVATE) {
    grabIsActive=false;
    grabPickInfo=null;
  }
  if (e.getID() == MouseEvent.MOUSE_RELEASED) {
    lastButtonReleasedPickInfo=destPickInfo;
  }
  logger.fine(""String_Node_Str"" + e);
  logPickInfo(""String_Node_Str"",destPickInfo);
  logPickInfo(""String_Node_Str"",hitPickInfo);
  return new DetermineDestPickInfoReturn(destPickInfo,hitPickInfo);
}","/** 
 * Performs a pick on the scene graph and determine the actual destination pick info  taking into account button click threshold and mouse button grabbing. Returns the destination pick info in the global member destPickInfo.
 * @param e The mouse event.
 * @return The destination pick info.
 */
protected DetermineDestPickInfoReturn determineDestPickInfo(MouseEvent e){
  boolean deactivateGrab=false;
  PickInfo swingHitPickInfo=null;
  if (swingPickInfos.peek() != null) {
    try {
      PickInfoQueueEntry entry=swingPickInfos.take();
      if (e.getID() == entry.mouseEvent.getID() && e.getX() == entry.mouseEvent.getX() && e.getY() == entry.mouseEvent.getY()) {
        swingHitPickInfo=entry.hitPickInfo;
      }
 else {
        logger.warning(""String_Node_Str"");
        logger.warning(""String_Node_Str"" + e);
        logger.warning(""String_Node_Str"" + entry.mouseEvent);
      }
    }
 catch (    InterruptedException ex) {
    }
  }
  if (e.getID() == MouseEvent.MOUSE_PRESSED) {
    buttonLastX=e.getX();
    buttonLastY=e.getY();
  }
 else   if (e.getID() == MouseEvent.MOUSE_CLICKED) {
    if (!buttonWithinClickThreshold(e.getX(),e.getY())) {
      return null;
    }
  }
  if (e.getID() == MouseEvent.MOUSE_CLICKED) {
    return new DetermineDestPickInfoReturn(lastButtonPressedPickInfo,lastButtonPressedPickInfo);
  }
  PickInfo hitPickInfo;
  if (swingHitPickInfo == null) {
    hitPickInfo=pickEventScreenPos(e.getX(),e.getY());
    logger.finest(""String_Node_Str"" + hitPickInfo);
    if (hitPickInfo != null) {
      logger.finest(""String_Node_Str"" + hitPickInfo.size());
    }
  }
 else {
    hitPickInfo=swingHitPickInfo;
  }
  GrabChangeType grabChange=GrabChangeType.GRAB_NO_CHANGE;
  int eventID=e.getID();
  if (eventID == MouseEvent.MOUSE_PRESSED || eventID == MouseEvent.MOUSE_RELEASED) {
    grabChange=evaluateButtonGrabStateChange(eventID,e);
    if (grabChange == GrabChangeType.GRAB_ACTIVATE) {
      grabIsActive=true;
      grabPickInfo=hitPickInfo;
      logger.finest(""String_Node_Str"" + grabPickInfo);
      if (grabPickInfo != null) {
        logger.finest(""String_Node_Str"" + grabPickInfo.size());
        if (grabPickInfo.size() > 0) {
          PickDetails pd=grabPickInfo.get(0);
          logger.finest(""String_Node_Str"" + pd);
          if (pd != null) {
            logPickDetailsEntity(pd);
            CollisionComponent cc=pd.getCollisionComponent();
            logger.finest(""String_Node_Str"" + cc);
            if (cc != null) {
              logger.finest(""String_Node_Str"" + cc.getEntity());
            }
          }
        }
      }
    }
  }
  PickInfo destPickInfo;
  logger.finest(""String_Node_Str"" + grabIsActive);
  if (grabIsActive) {
    destPickInfo=grabPickInfo;
    logger.finest(""String_Node_Str"" + grabPickInfo);
  }
 else {
    destPickInfo=hitPickInfo;
  }
  logger.finest(""String_Node_Str"" + destPickInfo);
  if (grabChange == GrabChangeType.GRAB_DEACTIVATE) {
    grabIsActive=false;
    grabPickInfo=null;
  }
  if (e.getID() == MouseEvent.MOUSE_PRESSED) {
    lastButtonPressedPickInfo=destPickInfo;
  }
  logger.fine(""String_Node_Str"" + e);
  logPickInfo(""String_Node_Str"",destPickInfo);
  logPickInfo(""String_Node_Str"",hitPickInfo);
  return new DetermineDestPickInfoReturn(destPickInfo,hitPickInfo);
}"
46307,"private Space createSpace(Vector3f point,int x,int y,int z){
  Vector3f center=new Vector3f((x * SPACE_SIZE * 2) + SPACE_SIZE,(y * SPACE_SIZE * 2) + SPACE_SIZE,(z * SPACE_SIZE * 2) + SPACE_SIZE);
  BoundingBox gridBounds=new BoundingBox(center,SPACE_SIZE * fudge,SPACE_SIZE * fudge,SPACE_SIZE * fudge);
  String bindingName=getSpaceBindingName(x,y,z);
  Space space=new Space(gridBounds,bindingName);
synchronized (spaces) {
    spaces.put(bindingName,space);
  }
  return space;
}","private Space createSpace(int x,int y,int z){
  Vector3f center=new Vector3f((x * SPACE_SIZE * 2) + SPACE_SIZE,(y * SPACE_SIZE * 2) + SPACE_SIZE,(z * SPACE_SIZE * 2) + SPACE_SIZE);
  BoundingBox gridBounds=new BoundingBox(center,SPACE_SIZE * fudge,SPACE_SIZE * fudge,SPACE_SIZE * fudge);
  String bindingName=getSpaceBindingName(x,y,z);
  Space space=new Space(gridBounds,bindingName);
synchronized (spaces) {
    spaces.put(bindingName,space);
  }
  return space;
}"
46308,"/** 
 * Return the space that encloses this point, if the space does not exist, create it
 * @param position
 * @return
 */
public Iterable<Space> getEnclosingSpace(BoundingVolume volume){
  ArrayList retList=new ArrayList();
  Vector3f point=volume.getCenter();
  int x=(int)(point.x / (SPACE_SIZE * 2));
  int y=(int)(point.y / (SPACE_SIZE * 2));
  int z=(int)(point.z / (SPACE_SIZE * 2));
  if (point.x < 0)   x-=1;
  if (point.y < 0)   y-=1;
  if (point.z < 0)   z-=1;
  Space sp=getEnclosingSpaceImpl(x,y,z);
  if (sp == null) {
    sp=createSpace(point,x,y,z);
  }
  if (!sp.getWorldBounds().contains(point))   throw new RuntimeException(""String_Node_Str"" + sp.getWorldBounds() + ""String_Node_Str""+ point+ ""String_Node_Str""+ getSpaceBindingName(x,y,z));
  retList.add(sp);
  float radius;
  if (volume instanceof BoundingBox) {
    radius=((BoundingBox)volume).xExtent;
  }
 else   if (volume instanceof BoundingSphere) {
    radius=((BoundingSphere)volume).getRadius();
  }
 else   throw new RuntimeException(""String_Node_Str"" + volume.getClass().getName());
  int step=(int)(radius / (SPACE_SIZE * 2));
  for (int xs=-step; xs <= step; xs++) {
    for (int ys=-step; ys <= step; ys++) {
      for (int zs=-step; zs <= step; zs++) {
        sp=getEnclosingSpaceImpl(x + xs,y + ys,z + zs);
        if (sp != null && sp.getWorldBounds().intersects(volume)) {
          retList.add(sp);
        }
      }
    }
  }
  return retList;
}","/** 
 * Return the space that encloses this point, if the space does not exist, create it
 * @param position
 * @return
 */
public Iterable<Space> getEnclosingSpace(BoundingVolume volume){
  ArrayList retList=new ArrayList();
  Vector3f point=volume.getCenter();
  int x=(int)(point.x / (SPACE_SIZE * 2));
  int y=(int)(point.y / (SPACE_SIZE * 2));
  int z=(int)(point.z / (SPACE_SIZE * 2));
  if (point.x < 0)   x-=1;
  if (point.y < 0)   y-=1;
  if (point.z < 0)   z-=1;
  Space sp=getEnclosingSpaceImpl(x,y,z);
  if (sp == null) {
    sp=createSpace(x,y,z);
  }
  if (!sp.getWorldBounds().contains(point))   throw new RuntimeException(""String_Node_Str"" + sp.getWorldBounds() + ""String_Node_Str""+ point+ ""String_Node_Str""+ getSpaceBindingName(x,y,z));
  retList.add(sp);
  float radius;
  if (volume instanceof BoundingBox) {
    radius=((BoundingBox)volume).xExtent;
  }
 else   if (volume instanceof BoundingSphere) {
    radius=((BoundingSphere)volume).getRadius();
  }
 else   throw new RuntimeException(""String_Node_Str"" + volume.getClass().getName());
  int step=(int)(radius / (SPACE_SIZE * 2));
  for (int xs=-step; xs <= step; xs++) {
    for (int ys=-step; ys <= step; ys++) {
      for (int zs=-step; zs <= step; zs++) {
        sp=getEnclosingSpaceImpl(x + xs,y + ys,z + zs);
        if (sp == null) {
          sp=createSpace(x + xs,y + ys,z + zs);
        }
        if (sp != null && sp.getWorldBounds().intersects(volume)) {
          retList.add(sp);
        }
      }
    }
  }
  System.err.println(""String_Node_Str"" + retList.size() + ""String_Node_Str"");
  return retList;
}"
46309,"@Override public void setStatus(CellStatus status){
switch (status) {
case DISK:
    if (msgReceiver != null) {
      channelComp.removeMessageReceiver(getMessageClass());
      msgReceiver=null;
    }
  break;
case BOUNDS:
{
  if (msgReceiver == null) {
    msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
      public void messageReceived(      CellMessage message){
        if (message.getSenderID() != cell.getCellCache().getSession().getID()) {
          serverMoveRequest((MovableMessage)message);
        }
      }
    }
;
    channelComp.addMessageReceiver(getMessageClass(),msgReceiver);
  }
}
}
}","@Override public void setStatus(CellStatus status){
switch (status) {
case DISK:
    if (msgReceiver != null) {
      channelComp.removeMessageReceiver(getMessageClass());
      msgReceiver=null;
    }
  break;
case BOUNDS:
{
  if (msgReceiver == null) {
    msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
      public void messageReceived(      CellMessage message){
        BigInteger senderID=message.getSenderID();
        if (senderID == null) {
          senderID=BigInteger.ZERO;
        }
        if (!senderID.equals(cell.getCellCache().getSession().getID())) {
          serverMoveRequest((MovableMessage)message);
        }
      }
    }
;
    channelComp.addMessageReceiver(getMessageClass(),msgReceiver);
  }
}
}
}"
46310,"public void messageReceived(CellMessage message){
  if (message.getSenderID() != cell.getCellCache().getSession().getID()) {
    serverMoveRequest((MovableMessage)message);
  }
}","public void messageReceived(CellMessage message){
  BigInteger senderID=message.getSenderID();
  if (senderID == null) {
    senderID=BigInteger.ZERO;
  }
  if (!senderID.equals(cell.getCellCache().getSession().getID())) {
    serverMoveRequest((MovableMessage)message);
  }
}"
46311,"/** 
 * Create all of the Swing windows - and the 3D window
 */
private void createUI(WorldManager wm){
  ViewManager.initialize(width,height);
  frame=new MainFrameImpl(wm,width,height);
  frame.getFrame().setLocationRelativeTo(null);
  frame.getFrame().setVisible(true);
  ViewManager.getViewManager().attachViewCanvas(frame.getCanvas3DPanel());
  CameraComponent cameraComp=ViewManager.getViewManager().getCameraComponent();
  InputManager inputManager=ClientContext.getInputManager();
  inputManager.initialize(frame.getCanvas(),cameraComp);
  inputManager.addKeyMouseFocus(inputManager.getGlobalFocusEntity());
  InputManager3D.getInputManager().addGlobalEventListener(new EventClassFocusListener(){
    private final Logger logger=Logger.getLogger(""String_Node_Str"");
    public Class[] eventClassesToConsume(){
      return new Class[]{KeyEvent3D.class,MouseEvent3D.class};
    }
    public void commitEvent(    Event event){
      if (event instanceof KeyEvent3D) {
        if (((KeyEvent3D)event).isPressed()) {
          logger.fine(""String_Node_Str"" + event);
        }
      }
 else {
        logger.fine(""String_Node_Str"" + event);
      }
    }
  }
);
}","/** 
 * Create all of the Swing windows - and the 3D window
 */
private void createUI(WorldManager wm){
  ViewManager.initialize(width,height);
  frame=new MainFrameImpl(wm,width,height);
  frame.getFrame().setLocationRelativeTo(null);
  frame.getFrame().setVisible(true);
  ViewManager.getViewManager().attachViewCanvas(frame.getCanvas3DPanel());
  CameraComponent cameraComp=ViewManager.getViewManager().getCameraComponent();
  InputManager inputManager=ClientContext.getInputManager();
  inputManager.initialize(frame.getCanvas(),cameraComp);
  inputManager.addKeyMouseFocus(inputManager.getGlobalFocusEntity());
}"
46312,"protected void processMouseKeyboardEvent(Event event,PickInfo destPickInfo,PickInfo hitPickInfo){
  logger.fine(""String_Node_Str"" + event);
  logger.fine(""String_Node_Str"" + destPickInfo);
  if (event instanceof MouseEvent3D) {
    mousePickInfoPrev=destPickInfo;
    MouseEvent3D mouseEvent=(MouseEvent3D)event;
    if (mouseEvent.getAwtEvent() instanceof InputManager.NondeliverableMouseEvent) {
      return;
    }
  }
  if (event instanceof InputEvent3D) {
    ((InputEvent3D)event).setPickInfo(destPickInfo);
  }
  tryGlobalListeners(event);
  propState.toUnder=false;
  if (destPickInfo == null)   return;
  PickDetails pickDetails=destPickInfo.get(0);
  logger.fine(""String_Node_Str"" + pickDetails);
  int idx=0;
  while (true) {
    propState.toParent=false;
    if (event instanceof MouseEvent3D) {
      ((MouseEvent3D)event).setPickDetails(pickDetails);
      if (((MouseEvent3D)event).getID() == MouseEvent.MOUSE_DRAGGED && hitPickInfo != null) {
        MouseDraggedEvent3D de3d=(MouseDraggedEvent3D)event;
        if (idx < hitPickInfo.size()) {
          de3d.setHitPickDetails(hitPickInfo.get(idx));
        }
      }
    }
    Entity entity=InputPicker.pickDetailsToEntity(pickDetails);
    if (entity == null) {
      idx++;
      if (idx >= destPickInfo.size()) {
        break;
      }
 else {
        continue;
      }
    }
    tryListenersForEntity(entity,event,propState);
    if (propState.toParent) {
      logger.fine(""String_Node_Str"");
      tryListenersForEntityParents(entity.getParent(),event,propState);
    }
    if (!propState.toUnder) {
      break;
    }
    logger.fine(""String_Node_Str"");
    idx++;
    if (idx >= destPickInfo.size()) {
      break;
    }
    pickDetails=destPickInfo.get(idx);
    logger.fine(""String_Node_Str"" + pickDetails);
  }
}","protected void processMouseKeyboardEvent(Event event,PickInfo destPickInfo,PickInfo hitPickInfo){
  logger.fine(""String_Node_Str"" + event);
  logger.fine(""String_Node_Str"" + destPickInfo);
  if (event instanceof MouseEvent3D) {
    mousePickInfoPrev=destPickInfo;
    MouseEvent3D mouseEvent=(MouseEvent3D)event;
    if (mouseEvent.getAwtEvent() instanceof InputManager.NondeliverableMouseEvent) {
      return;
    }
  }
  if (event instanceof InputEvent3D) {
    ((InputEvent3D)event).setPickInfo(destPickInfo);
  }
  if (event instanceof MouseEvent3D && destPickInfo != null && destPickInfo.size() > 0) {
    ((MouseEvent3D)event).setPickDetails(destPickInfo.get(0));
  }
  tryGlobalListeners(event);
  propState.toUnder=false;
  if (destPickInfo == null || destPickInfo.size() <= 0)   return;
  PickDetails pickDetails=destPickInfo.get(0);
  logger.fine(""String_Node_Str"" + pickDetails);
  int idx=0;
  while (true) {
    propState.toParent=false;
    if (event instanceof MouseEvent3D) {
      ((MouseEvent3D)event).setPickDetails(pickDetails);
      if (((MouseEvent3D)event).getID() == MouseEvent.MOUSE_DRAGGED && hitPickInfo != null) {
        MouseDraggedEvent3D de3d=(MouseDraggedEvent3D)event;
        if (idx < hitPickInfo.size()) {
          de3d.setHitPickDetails(hitPickInfo.get(idx));
        }
      }
    }
    Entity entity=InputPicker.pickDetailsToEntity(pickDetails);
    if (entity == null) {
      idx++;
      if (idx >= destPickInfo.size()) {
        break;
      }
 else {
        continue;
      }
    }
    tryListenersForEntity(entity,event,propState);
    if (propState.toParent) {
      logger.fine(""String_Node_Str"");
      tryListenersForEntityParents(entity.getParent(),event,propState);
    }
    if (!propState.toUnder) {
      break;
    }
    logger.fine(""String_Node_Str"");
    idx++;
    if (idx >= destPickInfo.size()) {
      break;
    }
    pickDetails=destPickInfo.get(idx);
    logger.fine(""String_Node_Str"" + pickDetails);
  }
}"
46313,"protected WindowSwingEmbeddedPeer(JComponent parent,Component embedded,WindowSwingEmbeddedToolkit toolkit){
  super(parent,embedded);
  this.toolkit=toolkit;
  painterThread=new PainterThread();
  painterThread.start();
}","protected WindowSwingEmbeddedPeer(JComponent parent,Component embedded,WindowSwingEmbeddedToolkit toolkit){
  super(parent,embedded);
  this.toolkit=toolkit;
}"
46314,"private void paintOnWindow(WindowSwing window){
  painterThread.enqueuePaint(this,window);
}","private void paintOnWindow(final WindowSwing window){
  EventQueue.invokeLater(new Runnable(){
    public void run(){
      DrawingSurface drawingSurface=window.getSurface();
      Graphics2D gDst=drawingSurface.getGraphics();
      paint(gDst);
    }
  }
);
}"
46315,"/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
private void initComponents(){
  java.awt.GridBagConstraints gridBagConstraints;
  buttonGroup1=new javax.swing.ButtonGroup();
  jLabel1=new javax.swing.JLabel();
  jButton1=new javax.swing.JButton();
  jTextField1=new javax.swing.JTextField();
  jPanel1=new javax.swing.JPanel();
  styleBumpShaderRB=new javax.swing.JRadioButton();
  styleNormalRB=new javax.swing.JRadioButton();
  setLayout(new java.awt.GridBagLayout());
  addFocusListener(new java.awt.event.FocusAdapter(){
    public void focusGained(    java.awt.event.FocusEvent evt){
      formFocusGained(evt);
    }
  }
);
  jLabel1.setText(""String_Node_Str"");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=1;
  gridBagConstraints.insets=new java.awt.Insets(0,0,0,8);
  add(jLabel1,gridBagConstraints);
  jButton1.setText(""String_Node_Str"");
  jButton1.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      jButton1ActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=2;
  add(jButton1,gridBagConstraints);
  jTextField1.setColumns(8);
  jTextField1.setText(""String_Node_Str"");
  jTextField1.addFocusListener(new java.awt.event.FocusAdapter(){
    public void focusGained(    java.awt.event.FocusEvent evt){
      jTextField1FocusGained(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=1;
  jPanel1.setLayout(new java.awt.GridBagLayout());
  jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),""String_Node_Str""));
  buttonGroup1.add(styleBumpShaderRB);
  styleBumpShaderRB.setText(""String_Node_Str"");
  styleBumpShaderRB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      styleBumpShaderRBActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=1;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.WEST;
  jPanel1.add(styleBumpShaderRB,gridBagConstraints);
  buttonGroup1.add(styleNormalRB);
  styleNormalRB.setText(""String_Node_Str"");
  styleNormalRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
  styleNormalRB.setMargin(new java.awt.Insets(0,0,0,0));
  styleNormalRB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      styleNormalRBActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.anchor=java.awt.GridBagConstraints.WEST;
  jPanel1.add(styleNormalRB,gridBagConstraints);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=2;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.WEST;
  add(jPanel1,gridBagConstraints);
}","/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
private void initComponents(){
  java.awt.GridBagConstraints gridBagConstraints;
  buttonGroup1=new javax.swing.ButtonGroup();
  jLabel1=new javax.swing.JLabel();
  jButton1=new javax.swing.JButton();
  jTextField1=new javax.swing.JTextField();
  jPanel1=new javax.swing.JPanel();
  styleBumpShaderRB=new javax.swing.JRadioButton();
  styleNormalRB=new javax.swing.JRadioButton();
  setLayout(new java.awt.GridBagLayout());
  addFocusListener(new java.awt.event.FocusAdapter(){
    public void focusGained(    java.awt.event.FocusEvent evt){
      formFocusGained(evt);
    }
  }
);
  jLabel1.setText(""String_Node_Str"");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=1;
  gridBagConstraints.insets=new java.awt.Insets(0,0,0,8);
  add(jLabel1,gridBagConstraints);
  jButton1.setText(""String_Node_Str"");
  jButton1.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      jButton1ActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=2;
  add(jButton1,gridBagConstraints);
  jTextField1.setColumns(8);
  jTextField1.setText(""String_Node_Str"");
  jTextField1.addFocusListener(new java.awt.event.FocusAdapter(){
    public void focusGained(    java.awt.event.FocusEvent evt){
      jTextField1FocusGained(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=1;
  add(jTextField1,gridBagConstraints);
  jPanel1.setLayout(new java.awt.GridBagLayout());
  jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),""String_Node_Str""));
  buttonGroup1.add(styleBumpShaderRB);
  styleBumpShaderRB.setText(""String_Node_Str"");
  styleBumpShaderRB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      styleBumpShaderRBActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=1;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.WEST;
  jPanel1.add(styleBumpShaderRB,gridBagConstraints);
  buttonGroup1.add(styleNormalRB);
  styleNormalRB.setText(""String_Node_Str"");
  styleNormalRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
  styleNormalRB.setMargin(new java.awt.Insets(0,0,0,0));
  styleNormalRB.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      styleNormalRBActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.anchor=java.awt.GridBagConstraints.WEST;
  jPanel1.add(styleNormalRB,gridBagConstraints);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=2;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.WEST;
  add(jPanel1,gridBagConstraints);
}"
46316,"/** 
 * Creates new form MainFrame 
 */
public MainFrameImpl(WorldManager wm,int width,int height){
  try {
    UIManager.setLookAndFeel(""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.warning(""String_Node_Str"" + ex);
  }
  JPopupMenu.setDefaultLightWeightPopupEnabled(false);
  ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
  initComponents();
  HelpSystem helpSystem=new HelpSystem();
  JMenu helpMenu=helpSystem.getHelpJMenu();
  mainMenuBar.add(helpMenu);
  wm.getRenderManager().setFrameRateListener(new FrameRateListener(){
    public void currentFramerate(    float framerate){
      fpsLabel.setText(""String_Node_Str"" + framerate);
    }
  }
,100);
  setTitle(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
  centerPanel.setMinimumSize(new Dimension(width,height));
  centerPanel.setPreferredSize(new Dimension(width,height));
  serverField.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      checkButtons();
    }
    public void removeUpdate(    DocumentEvent e){
      checkButtons();
    }
    public void changedUpdate(    DocumentEvent e){
      checkButtons();
    }
    public void checkButtons(){
      String cur=serverField.getText();
      if (cur != null && cur.length() > 0 && !cur.equals(serverURL)) {
        goButton.setEnabled(true);
      }
 else {
        goButton.setEnabled(false);
      }
    }
  }
);
  pack();
}","/** 
 * Creates new form MainFrame 
 */
public MainFrameImpl(WorldManager wm,int width,int height){
  JPopupMenu.setDefaultLightWeightPopupEnabled(false);
  ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
  initComponents();
  HelpSystem helpSystem=new HelpSystem();
  JMenu helpMenu=helpSystem.getHelpJMenu();
  mainMenuBar.add(helpMenu);
  wm.getRenderManager().setFrameRateListener(new FrameRateListener(){
    public void currentFramerate(    float framerate){
      fpsLabel.setText(""String_Node_Str"" + framerate);
    }
  }
,100);
  setTitle(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
  centerPanel.setMinimumSize(new Dimension(width,height));
  centerPanel.setPreferredSize(new Dimension(width,height));
  serverField.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      checkButtons();
    }
    public void removeUpdate(    DocumentEvent e){
      checkButtons();
    }
    public void changedUpdate(    DocumentEvent e){
      checkButtons();
    }
    public void checkButtons(){
      String cur=serverField.getText();
      if (cur != null && cur.length() > 0 && !cur.equals(serverURL)) {
        goButton.setEnabled(true);
      }
 else {
        goButton.setEnabled(false);
      }
    }
  }
);
  pack();
}"
46317,"/** 
 * Creates new form MainFrame 
 */
public MainFrameImpl(WorldManager wm,int width,int height){
  JPopupMenu.setDefaultLightWeightPopupEnabled(false);
  ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
  initComponents();
  HelpSystem helpSystem=new HelpSystem();
  JMenu helpMenu=helpSystem.getHelpJMenu();
  mainMenuBar.add(helpMenu);
  wm.getRenderManager().setFrameRateListener(new FrameRateListener(){
    public void currentFramerate(    float framerate){
      fpsLabel.setText(""String_Node_Str"" + framerate);
    }
  }
,100);
  setTitle(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
  centerPanel.setMinimumSize(new Dimension(width,height));
  centerPanel.setPreferredSize(new Dimension(width,height));
  serverField.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      checkButtons();
    }
    public void removeUpdate(    DocumentEvent e){
      checkButtons();
    }
    public void changedUpdate(    DocumentEvent e){
      checkButtons();
    }
    public void checkButtons(){
      String cur=serverField.getText();
      if (cur != null && cur.length() > 0 && !cur.equals(serverURL)) {
        goButton.setEnabled(true);
      }
 else {
        goButton.setEnabled(false);
      }
    }
  }
);
  pack();
}","/** 
 * Creates new form MainFrame 
 */
public MainFrameImpl(WorldManager wm,int width,int height){
  try {
    UIManager.setLookAndFeel(""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.warning(""String_Node_Str"" + ex);
  }
  JPopupMenu.setDefaultLightWeightPopupEnabled(false);
  ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
  initComponents();
  HelpSystem helpSystem=new HelpSystem();
  JMenu helpMenu=helpSystem.getHelpJMenu();
  mainMenuBar.add(helpMenu);
  wm.getRenderManager().setFrameRateListener(new FrameRateListener(){
    public void currentFramerate(    float framerate){
      fpsLabel.setText(""String_Node_Str"" + framerate);
    }
  }
,100);
  setTitle(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
  centerPanel.setMinimumSize(new Dimension(width,height));
  centerPanel.setPreferredSize(new Dimension(width,height));
  serverField.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      checkButtons();
    }
    public void removeUpdate(    DocumentEvent e){
      checkButtons();
    }
    public void changedUpdate(    DocumentEvent e){
      checkButtons();
    }
    public void checkButtons(){
      String cur=serverField.getText();
      if (cur != null && cur.length() > 0 && !cur.equals(serverURL)) {
        goButton.setEnabled(true);
      }
 else {
        goButton.setEnabled(false);
      }
    }
  }
);
  pack();
}"
46318,"/** 
 * Performs a pick on the scene graph and determine the actual destination pick info  taking into account button click threshold and mouse button grabbing. Returns the destination pick info in the global member destPickInfo.
 * @param e The mouse event.
 * @return The destination pick info.
 */
protected DetermineDestPickInfoReturn determineDestPickInfo(MouseEvent e){
  boolean deactivateGrab=false;
  PickInfo swingHitPickInfo=null;
  if (swingPickInfos.peek() != null) {
    try {
      PickInfoQueueEntry entry=swingPickInfos.take();
      if (e.getID() == entry.mouseEvent.getID() && e.getX() == entry.mouseEvent.getX() && e.getY() == entry.mouseEvent.getY()) {
        swingHitPickInfo=entry.hitPickInfo;
      }
 else {
        logger.warning(""String_Node_Str"");
        logger.warning(""String_Node_Str"" + e);
        logger.warning(""String_Node_Str"" + entry.mouseEvent);
      }
    }
 catch (    InterruptedException ex) {
    }
  }
  if (e.getID() == MouseEvent.MOUSE_PRESSED) {
    buttonLastX=e.getX();
    buttonLastY=e.getY();
  }
 else   if (e.getID() == MouseEvent.MOUSE_CLICKED) {
    if (!buttonWithinClickThreshold(e.getX(),e.getY())) {
      return null;
    }
  }
  if (e.getID() == MouseEvent.MOUSE_CLICKED) {
    return new DetermineDestPickInfoReturn(lastButtonReleasedPickInfo,lastButtonReleasedPickInfo);
  }
  PickInfo hitPickInfo;
  if (swingHitPickInfo == null) {
    hitPickInfo=pickEventScreenPos(e.getX(),e.getY());
    logger.finest(""String_Node_Str"" + hitPickInfo);
    if (hitPickInfo != null) {
      logger.finest(""String_Node_Str"" + hitPickInfo.size());
    }
  }
 else {
    hitPickInfo=swingHitPickInfo;
  }
  if (!grabIsActive && (hitPickInfo == null || hitPickInfo.size() <= 0)) {
    if (e.getID() == MouseEvent.MOUSE_RELEASED) {
      lastButtonReleasedPickInfo=null;
    }
    return null;
  }
  GrabChangeType grabChange=GrabChangeType.GRAB_NO_CHANGE;
  int eventID=e.getID();
  if (eventID == MouseEvent.MOUSE_PRESSED || eventID == MouseEvent.MOUSE_RELEASED) {
    grabChange=evaluateButtonGrabStateChange(eventID,e);
    if (grabChange == GrabChangeType.GRAB_ACTIVATE) {
      grabIsActive=true;
      grabPickInfo=hitPickInfo;
      logger.finest(""String_Node_Str"" + grabPickInfo);
      if (grabPickInfo != null) {
        logger.finest(""String_Node_Str"" + grabPickInfo.size());
        if (grabPickInfo.size() > 0) {
          PickDetails pd=grabPickInfo.get(0);
          logger.finest(""String_Node_Str"" + pd);
          if (pd != null) {
            logPickDetailsEntity(pd);
            CollisionComponent cc=pd.getCollisionComponent();
            logger.finest(""String_Node_Str"" + cc);
            if (cc != null) {
              logger.finest(""String_Node_Str"" + cc.getEntity());
            }
          }
        }
      }
    }
  }
  PickInfo destPickInfo;
  logger.finest(""String_Node_Str"" + grabIsActive);
  if (grabIsActive) {
    destPickInfo=grabPickInfo;
    logger.finest(""String_Node_Str"" + grabPickInfo);
  }
 else {
    destPickInfo=hitPickInfo;
  }
  logger.finest(""String_Node_Str"" + destPickInfo);
  if (grabChange == GrabChangeType.GRAB_DEACTIVATE) {
    grabIsActive=false;
    grabPickInfo=null;
  }
  if (e.getID() == MouseEvent.MOUSE_RELEASED) {
    lastButtonReleasedPickInfo=destPickInfo;
  }
  logger.fine(""String_Node_Str"" + e);
  logPickInfo(""String_Node_Str"",destPickInfo);
  logPickInfo(""String_Node_Str"",hitPickInfo);
  return new DetermineDestPickInfoReturn(destPickInfo,hitPickInfo);
}","/** 
 * Performs a pick on the scene graph and determine the actual destination pick info  taking into account button click threshold and mouse button grabbing. Returns the destination pick info in the global member destPickInfo.
 * @param e The mouse event.
 * @return The destination pick info.
 */
protected DetermineDestPickInfoReturn determineDestPickInfo(MouseEvent e){
  boolean deactivateGrab=false;
  PickInfo swingHitPickInfo=null;
  if (swingPickInfos.peek() != null) {
    try {
      PickInfoQueueEntry entry=swingPickInfos.take();
      if (e.getID() == entry.mouseEvent.getID() && e.getX() == entry.mouseEvent.getX() && e.getY() == entry.mouseEvent.getY()) {
        swingHitPickInfo=entry.hitPickInfo;
      }
 else {
        logger.warning(""String_Node_Str"");
        logger.warning(""String_Node_Str"" + e);
        logger.warning(""String_Node_Str"" + entry.mouseEvent);
      }
    }
 catch (    InterruptedException ex) {
    }
  }
  if (e.getID() == MouseEvent.MOUSE_PRESSED) {
    buttonLastX=e.getX();
    buttonLastY=e.getY();
  }
 else   if (e.getID() == MouseEvent.MOUSE_CLICKED) {
    if (!buttonWithinClickThreshold(e.getX(),e.getY())) {
      return null;
    }
  }
  if (e.getID() == MouseEvent.MOUSE_CLICKED) {
    return new DetermineDestPickInfoReturn(lastButtonReleasedPickInfo,lastButtonReleasedPickInfo);
  }
  PickInfo hitPickInfo;
  if (swingHitPickInfo == null) {
    hitPickInfo=pickEventScreenPos(e.getX(),e.getY());
    logger.finest(""String_Node_Str"" + hitPickInfo);
    if (hitPickInfo != null) {
      logger.finest(""String_Node_Str"" + hitPickInfo.size());
    }
  }
 else {
    hitPickInfo=swingHitPickInfo;
  }
  GrabChangeType grabChange=GrabChangeType.GRAB_NO_CHANGE;
  int eventID=e.getID();
  if (eventID == MouseEvent.MOUSE_PRESSED || eventID == MouseEvent.MOUSE_RELEASED) {
    grabChange=evaluateButtonGrabStateChange(eventID,e);
    if (grabChange == GrabChangeType.GRAB_ACTIVATE) {
      grabIsActive=true;
      grabPickInfo=hitPickInfo;
      logger.finest(""String_Node_Str"" + grabPickInfo);
      if (grabPickInfo != null) {
        logger.finest(""String_Node_Str"" + grabPickInfo.size());
        if (grabPickInfo.size() > 0) {
          PickDetails pd=grabPickInfo.get(0);
          logger.finest(""String_Node_Str"" + pd);
          if (pd != null) {
            logPickDetailsEntity(pd);
            CollisionComponent cc=pd.getCollisionComponent();
            logger.finest(""String_Node_Str"" + cc);
            if (cc != null) {
              logger.finest(""String_Node_Str"" + cc.getEntity());
            }
          }
        }
      }
    }
  }
  PickInfo destPickInfo;
  logger.finest(""String_Node_Str"" + grabIsActive);
  if (grabIsActive) {
    destPickInfo=grabPickInfo;
    logger.finest(""String_Node_Str"" + grabPickInfo);
  }
 else {
    destPickInfo=hitPickInfo;
  }
  logger.finest(""String_Node_Str"" + destPickInfo);
  if (grabChange == GrabChangeType.GRAB_DEACTIVATE) {
    grabIsActive=false;
    grabPickInfo=null;
  }
  if (e.getID() == MouseEvent.MOUSE_RELEASED) {
    lastButtonReleasedPickInfo=destPickInfo;
  }
  logger.fine(""String_Node_Str"" + e);
  logPickInfo(""String_Node_Str"",destPickInfo);
  logPickInfo(""String_Node_Str"",hitPickInfo);
  return new DetermineDestPickInfoReturn(destPickInfo,hitPickInfo);
}"
46319,"public void commitEvent(Event event){
  CellTransform transform=getLocalTransform();
  if (event instanceof MouseButtonEvent3D) {
    MouseButtonEvent3D buttonEvent=(MouseButtonEvent3D)event;
    if (buttonEvent.isPressed()) {
      MouseEvent awtButtonEvent=(MouseEvent)buttonEvent.getAwtEvent();
      dragStartScreen=new Point(awtButtonEvent.getX(),awtButtonEvent.getY());
      dragStartWorld=buttonEvent.getIntersectionPointWorld();
      translationOnPress=transform.getTranslation(null);
      dragging=true;
    }
 else {
      dragging=false;
    }
    return;
  }
  if (!dragging || !(event instanceof MouseDraggedEvent3D)) {
    return;
  }
  MouseDraggedEvent3D dragEvent=(MouseDraggedEvent3D)event;
  Vector3f dragVector=dragEvent.getDragVectorWorld(dragStartWorld,dragStartScreen,new Vector3f());
  Vector3f newTranslation=translationOnPress.add(dragVector);
  transform.setTranslation(newTranslation);
  movableComp.localMoveRequest(transform);
}","public void commitEvent(Event event){
  CellTransform transform=getLocalTransform();
  if (event instanceof MouseButtonEvent3D) {
    MouseButtonEvent3D buttonEvent=(MouseButtonEvent3D)event;
    if (buttonEvent.isPressed()) {
      MouseEvent awtButtonEvent=(MouseEvent)buttonEvent.getAwtEvent();
      dragStartScreen=new Point(awtButtonEvent.getX(),awtButtonEvent.getY());
      dragStartWorld=buttonEvent.getIntersectionPointWorld();
      translationOnPress=transform.getTranslation(null);
    }
    return;
  }
  if (!(event instanceof MouseDraggedEvent3D)) {
    return;
  }
  MouseDraggedEvent3D dragEvent=(MouseDraggedEvent3D)event;
  Vector3f dragVector=dragEvent.getDragVectorWorld(dragStartWorld,dragStartScreen,new Vector3f());
  Vector3f newTranslation=translationOnPress.add(dragVector);
  transform.setTranslation(newTranslation);
  movableComp.localMoveRequest(transform);
}"
46320,"@Override protected String getClientCellClassName(ClientSession clientSession,ClientCapabilities capabilities){
  return ""String_Node_Str"";
}","@Override protected String getClientCellClassName(WonderlandClientID clientID,ClientCapabilities capabilities){
  return ""String_Node_Str"";
}"
46321,"/** 
 * {@inheritDoc}
 */
@Override public void detachView(WindowView view){
  ViewWorldDefault viewWorld=(ViewWorldDefault)view;
  getEntity().removeEntity(viewWorld.getEntity());
  FrameWorldDefault frame=viewWorld.getFrame();
  if (frame != null) {
    getEntity().removeEntity(frame.getEntity());
    frame.setParentEntity(null);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void detachView(WindowView view){
  ViewWorldDefault viewWorld=(ViewWorldDefault)view;
  FrameWorldDefault frame=viewWorld.getFrame();
  if (frame != null) {
    frame.setParentEntity(null);
    getEntity().removeEntity(frame.getEntity());
  }
  viewWorld.setParentEntity(null);
  getEntity().removeEntity(viewWorld.getEntity());
}"
46322,"@Override public Popup getPopup(EmbeddedPeer peer,Component contents,int x,int y){
  System.err.println(""String_Node_Str"" + x + ""String_Node_Str""+ y);
  JmeClientMain.getFrame().getCanvas3DPanel().add(contents);
  contents.validate();
  System.err.println(""String_Node_Str"" + contents.getWidth());
  System.err.println(""String_Node_Str"" + contents.getHeight());
  int width=200;
  int height=200;
  if (!(peer instanceof WindowSwingEmbeddedPeer)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  WindowSwing winOwner=((WindowSwingEmbeddedPeer)peer).getWindowSwing();
  WindowSwing winPopup=null;
  try {
    winPopup=new WindowSwing(winOwner.getApp(),width,height,false,winOwner.getPixelScale());
    winPopup.setComponent(contents);
  }
 catch (  InstantiationException ex) {
    logger.warning(""String_Node_Str"");
    return null;
  }
  final WindowSwing popup=winPopup;
  winPopup.positionRelativeTo(winOwner,x,y);
  return new Popup(){
    @Override public void show(){
      popup.setVisible(true);
    }
    @Override public void hide(){
      popup.setVisible(false);
    }
  }
;
}","@Override public Popup getPopup(EmbeddedPeer peer,Component contents,int x,int y){
  System.err.println(""String_Node_Str"" + x + ""String_Node_Str""+ y);
  int width=(int)contents.getPreferredSize().getWidth();
  int height=(int)contents.getPreferredSize().getHeight();
  if (!(peer instanceof WindowSwingEmbeddedPeer)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  WindowSwing winOwner=((WindowSwingEmbeddedPeer)peer).getWindowSwing();
  WindowSwing winPopup=null;
  try {
    winPopup=new WindowSwing(winOwner.getApp(),width,height,false,winOwner.getPixelScale());
    winPopup.setComponent(contents);
  }
 catch (  InstantiationException ex) {
    logger.warning(""String_Node_Str"");
    return null;
  }
  final WindowSwing popup=winPopup;
  winPopup.positionRelativeTo(winOwner,x,y);
  return new Popup(){
    @Override public void show(){
      popup.setVisible(true);
    }
    @Override public void hide(){
      popup.setVisible(false);
    }
  }
;
}"
46323,"@Override public void execute() throws BuildException {
  if (!jar.exists()) {
    throw new BuildException(""String_Node_Str"" + jar);
  }
  if (dir == null) {
    dir=""String_Node_Str"";
  }
  if (output == null) {
    output=new File(""String_Node_Str"");
  }
  boolean changed=false;
  BufferedReader check=null;
  File tmpFile=FILE_UTILS.createTempFile(""String_Node_Str"",""String_Node_Str"",jar.getParentFile());
  try {
    JarInputStream in=new JarInputStream(new FileInputStream(jar));
    PrintWriter out=new PrintWriter(new FileWriter(tmpFile));
    if (output.exists()) {
      check=new BufferedReader(new FileReader(output));
    }
 else {
      changed=true;
    }
    Pattern p=Pattern.compile(""String_Node_Str"" + dir + ""String_Node_Str"");
    JarEntry je;
    while ((je=in.getNextJarEntry()) != null) {
      Matcher m=p.matcher(je.getName());
      if (m.matches() && m.groupCount() == 1) {
        String line=""String_Node_Str"" + m.group();
        if (!changed && !line.equals(check.readLine())) {
          changed=true;
          check.close();
        }
        out.println(line);
      }
    }
    out.close();
    if (changed) {
      FILE_UTILS.rename(tmpFile,output);
    }
 else {
      tmpFile.delete();
    }
  }
 catch (  IOException ioe) {
    throw new BuildException(ioe);
  }
}","@Override public void execute() throws BuildException {
  if (!jar.exists()) {
    throw new BuildException(""String_Node_Str"" + jar);
  }
  if (dir == null) {
    dir=""String_Node_Str"";
  }
  if (output == null) {
    output=new File(""String_Node_Str"");
  }
  boolean changed=false;
  BufferedReader check=null;
  File tmpFile=FILE_UTILS.createTempFile(""String_Node_Str"",""String_Node_Str"",jar.getParentFile());
  JarInputStream in=null;
  try {
    in=new JarInputStream(new FileInputStream(jar));
    PrintWriter out=new PrintWriter(new FileWriter(tmpFile));
    if (output.exists()) {
      check=new BufferedReader(new FileReader(output));
    }
 else {
      changed=true;
    }
    Pattern p=Pattern.compile(""String_Node_Str"" + dir + ""String_Node_Str"");
    JarEntry je;
    while ((je=in.getNextJarEntry()) != null) {
      Matcher m=p.matcher(je.getName());
      if (m.matches() && m.groupCount() == 1) {
        String line=""String_Node_Str"" + m.group();
        if (!changed && !line.equals(check.readLine())) {
          changed=true;
          check.close();
        }
        out.println(line);
      }
    }
    out.close();
    if (changed) {
      FILE_UTILS.rename(tmpFile,output);
    }
 else {
      tmpFile.delete();
    }
  }
 catch (  IOException ioe) {
    throw new BuildException(ioe);
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException ioe) {
        log(""String_Node_Str"" + jar,ioe,Project.MSG_WARN);
      }
    }
  }
}"
46324,"/** 
 * Change whether this is a top-level window or not. A top-level window has an enclosing frame.
 */
public void setTopLevel(boolean topLevel){
  if (this.topLevel == topLevel)   return;
  this.topLevel=topLevel;
  update(Window2DView.CHANGED_VISIBILITY);
}","/** 
 * Change whether this is a top-level window or not. A top-level window has an enclosing frame.
 */
public void setTopLevel(boolean topLevel){
  if (this.topLevel == topLevel)   return;
  this.topLevel=topLevel;
  update(Window2DView.CHANGED_VISIBILITY | Window2DView.CHANGED_TOP_LEVEL);
}"
46325,"/** 
 * Returns the frame of view. 
 */
FrameWorldDefault getFrame(){
  if (topLevel && frame == null) {
    update(CHANGED_TOP_LEVEL);
  }
  return frame;
}","/** 
 * Returns the frame of view. 
 */
FrameWorldDefault getFrame(){
  update(CHANGED_TOP_LEVEL);
  return frame;
}"
46326,"/** 
 * {@inheritDoc}""
 */
@Override public void update(int changeMask){
  if ((changeMask & CHANGED_VISIBILITY) != 0) {
    updateVisibility();
    if (visible && geometryObj == null) {
      changeMask|=CHANGED_SIZE;
    }
  }
  if ((changeMask & CHANGED_SIZE) != 0) {
    try {
      updateGeometrySize();
      updateTexture();
    }
 catch (    InstantiationException ex) {
      logger.warning(""String_Node_Str"");
      ex.printStackTrace();
      return;
    }
  }
  if ((changeMask & CHANGED_STACK) != 0) {
    updateStack();
  }
  if ((changeMask & (CHANGED_TRANSFORM | CHANGED_STACK)) != 0) {
    updateTransform();
  }
  if ((changeMask & CHANGED_TOP_LEVEL) != 0) {
    if (topLevel) {
      if (frame == null) {
        frame=(FrameWorldDefault)window.getApp().getAppType().getGuiFactory().createFrame(this);
      }
    }
 else {
      if (frame != null) {
        frame.cleanup();
        frame=null;
      }
    }
  }
  if ((changeMask & CHANGED_TITLE) != 0) {
    if (frame != null) {
      frame.setTitle(((Window2D)window).getTitle());
    }
  }
}","/** 
 * {@inheritDoc}""
 */
@Override public void update(int changeMask){
  if ((changeMask & CHANGED_VISIBILITY) != 0) {
    updateVisibility();
    if (visible && geometryObj == null) {
      changeMask|=CHANGED_SIZE;
    }
  }
  if ((changeMask & CHANGED_TOP_LEVEL) != 0) {
    if (topLevel) {
      if (frame == null) {
        frame=(FrameWorldDefault)window.getApp().getAppType().getGuiFactory().createFrame(this);
      }
    }
 else {
      if (frame != null) {
        frame.cleanup();
        frame=null;
      }
    }
  }
  if ((changeMask & CHANGED_SIZE) != 0) {
    try {
      updateGeometrySize();
      updateTexture();
    }
 catch (    InstantiationException ex) {
      logger.warning(""String_Node_Str"");
      ex.printStackTrace();
      return;
    }
  }
  if ((changeMask & CHANGED_STACK) != 0) {
    updateStack();
  }
  if ((changeMask & (CHANGED_TRANSFORM | CHANGED_STACK)) != 0) {
    updateTransform();
  }
  if ((changeMask & CHANGED_TITLE) != 0) {
    if (frame != null) {
      frame.setTitle(((Window2D)window).getTitle());
    }
  }
}"
46327,"/** 
 * Update the view's geometry (for a size change) 
 */
protected void updateGeometrySize() throws InstantiationException {
  if (!visible)   return;
  Window2D window2D=(Window2D)window;
  Vector2f pixelScale=window2D.getPixelScale();
  width=pixelScale.x * (float)window2D.getWidth();
  height=pixelScale.y * (float)window2D.getHeight();
  if (geometryObj == null) {
    setGeometry(new ViewGeometryObjectDefault(this));
  }
 else {
    geometryObj.updateSize();
  }
  if (frame != null) {
    frame.update();
  }
}","/** 
 * Update the view's geometry (for a size change) 
 */
protected void updateGeometrySize() throws InstantiationException {
  Window2D window2D=(Window2D)window;
  Vector2f pixelScale=window2D.getPixelScale();
  width=pixelScale.x * (float)window2D.getWidth();
  height=pixelScale.y * (float)window2D.getHeight();
  if (geometryObj == null) {
    setGeometry(new ViewGeometryObjectDefault(this));
  }
 else {
    geometryObj.updateSize();
  }
  if (frame != null) {
    frame.update();
  }
}"
46328,"/** 
 * Main method that has a simple command-line interface to test the database. The usage is: java AssetDB [COMMAND] [ARGS], where COMMAND can be: <p> LIST: Lists all of the entries in the database ADD: Add an entry to the database, followed by the required data fields
 */
public static void main(String[] args) throws URISyntaxException {
  AssetDB db=new AssetDB();
  logger.fine(""String_Node_Str"" + db.getDatabaseLocation());
  logger.fine(""String_Node_Str"" + db.getDatabaseUrl());
  logger.fine(""String_Node_Str"" + db.isConnected());
  db.listAssets();
  db.disconnect();
}","/** 
 * Main method that has a simple command-line interface to test the database. The usage is: java AssetDB [COMMAND] [ARGS], where COMMAND can be: <p> LIST: Lists all of the entries in the database ADD: Add an entry to the database, followed by the required data fields
 */
public static void main(String[] args) throws URISyntaxException {
  AssetDB db=new AssetDB();
  logger.warning(""String_Node_Str"" + db.getDatabaseLocation());
  logger.warning(""String_Node_Str"" + db.getDatabaseUrl());
  logger.warning(""String_Node_Str"" + db.isConnected());
  db.listAssets();
  db.disconnect();
}"
46329,"/** 
 * Prints out all of the assets to stdout
 */
public void listAssets(){
  try {
    Statement queryStatement=dbConnection.createStatement();
    ResultSet result=queryStatement.executeQuery(strGetListEntries);
    logger.fine(""String_Node_Str"");
    while (result.next()) {
      StringBuilder sb=new StringBuilder();
      sb.append(result.getString(""String_Node_Str"") + ""String_Node_Str"");
      sb.append(result.getString(""String_Node_Str"") + ""String_Node_Str"");
      sb.append(result.getString(""String_Node_Str"") + ""String_Node_Str"");
      sb.append(result.getString(""String_Node_Str"") + ""String_Node_Str"");
      sb.append(result.getLong(""String_Node_Str"") + ""String_Node_Str"");
      sb.append(result.getLong(""String_Node_Str"") + ""String_Node_Str"");
      logger.fine(sb.toString());
    }
    logger.fine(""String_Node_Str"");
  }
 catch (  SQLException sqle) {
    sqle.printStackTrace();
  }
}","/** 
 * Prints out all of the assets to stdout
 */
public void listAssets(){
  try {
    Statement queryStatement=dbConnection.createStatement();
    ResultSet result=queryStatement.executeQuery(strGetListEntries);
    logger.warning(""String_Node_Str"");
    while (result.next()) {
      StringBuilder sb=new StringBuilder();
      sb.append(result.getString(""String_Node_Str"") + ""String_Node_Str"");
      sb.append(result.getString(""String_Node_Str"") + ""String_Node_Str"");
      sb.append(result.getString(""String_Node_Str"") + ""String_Node_Str"");
      sb.append(result.getString(""String_Node_Str"") + ""String_Node_Str"");
      sb.append(result.getLong(""String_Node_Str"") + ""String_Node_Str"");
      sb.append(result.getLong(""String_Node_Str"") + ""String_Node_Str"");
      logger.warning(sb.toString());
    }
    logger.warning(""String_Node_Str"");
  }
 catch (  SQLException sqle) {
    sqle.printStackTrace();
  }
}"
46330,"@Override public int hashCode(){
  int hash=7;
  hash=29 * hash + (this.assetURI != null ? this.assetURI.getURI().hashCode() : 0);
  hash=29 * hash + (this.checksum != null ? this.checksum.hashCode() : 0);
  return hash;
}","@Override public int hashCode(){
  int hash=7;
  hash=29 * hash + (this.assetURI != null ? this.assetURI.hashCode() : 0);
  hash=29 * hash + (this.checksum != null ? this.checksum.hashCode() : 0);
  return hash;
}"
46331,"/** 
 * Returns true if the given asset ID equals this ID, false if not. Asset IDs are equal if both assets have the same URI and checksum
 */
@Override public boolean equals(Object obj){
  if (!(obj instanceof AssetID)) {
    return false;
  }
  AssetID assetID=(AssetID)obj;
  if (this == assetID) {
    return true;
  }
  if (this.assetURI.getURI().equals(this.getResourceURI().getURI()) == false) {
    return false;
  }
  if (this.checksum == null && assetID.checksum != null) {
    return false;
  }
 else   if (this.checksum == null && assetID.checksum == null) {
    return true;
  }
  if (this.checksum.equals(assetID.checksum) == false) {
    return false;
  }
  return true;
}","/** 
 * Returns true if the given asset ID equals this ID, false if not. Asset IDs are equal if both assets have the same URI and checksum
 */
@Override public boolean equals(Object obj){
  if (!(obj instanceof AssetID)) {
    return false;
  }
  AssetID assetID=(AssetID)obj;
  if (this == assetID) {
    return true;
  }
  if (this.assetURI.equals(this.getResourceURI()) == false) {
    return false;
  }
  if (this.checksum == null && assetID.checksum != null) {
    return false;
  }
 else   if (this.checksum == null && assetID.checksum == null) {
    return true;
  }
  if (this.checksum.equals(assetID.checksum) == false) {
    return false;
  }
  return true;
}"
46332,"/** 
 * Given the unique ID for the asset, return the name of its cache file. This method accounts for the structure of the cache imposed because of different sorts of uri's. For example, all assets part of some module should be cached in a subdirectory pertaining only to that module, so that the file does not conflict with similarly-named files in other modules.
 */
private String getAssetCacheFileName(AssetID assetID){
  String basePath=cacheDir.getAbsolutePath();
  String relativePath=assetID.getResourceURI().getRelativeCachePath();
  String checksum=assetID.getChecksum();
  return basePath + File.separator + relativePath+ ""String_Node_Str""+ checksum;
}","/** 
 * Given the unique ID for the asset, return the name of its cache file. This method accounts for the structure of the cache imposed because of different sorts of uri's. For example, all assets part of some module should be cached in a subdirectory pertaining only to that module, so that the file does not conflict with similarly-named files in other modules.
 */
private String getAssetCacheFileName(AssetID assetID){
  String basePath=cacheDir.getAbsolutePath();
  String relativePath=assetID.getResourceURI().getRelativeCachePath();
  String checksum=assetID.getChecksum();
  return basePath + File.separator + relativePath+ File.separator+ checksum;
}"
46333,"/** 
 * Synchronously download an asset from a server, given the asset and the url of the server to look for the asset. The asset object will be updated with the local file containing the cached asset and the locally computed  checksum. Returns true upon success, false upon failure
 * @param asset The asset to download
 * @param url The full URL to the asset
 * @param progressListener Notified of updates in the loading
 * @return True upon success, false upon failure 
 */
private boolean getAssetFromServer(Asset asset,String url,ProgressListener progressListener){
  try {
    logger.fine(""String_Node_Str"" + url.toString());
    URLConnection connection=new URL(url).openConnection();
    TrackingInputStream track=new TrackingInputStream(connection.getInputStream());
    InputStream in=new BufferedInputStream(track);
    if (progressListener != null) {
      track.setListener(progressListener,AssetManager.UPDATE_BYTE_INTERVAL,connection.getContentLength());
    }
    AssetID assetID=new AssetID(asset.getResourceURI(),asset.getChecksum());
    String cacheFile=this.getAssetCacheFileName(assetID);
    File file=new File(cacheFile);
    if (!file.canWrite())     makeDirectory(file);
    byte[] buf=new byte[AssetManager.NETWORK_CHUNK_SIZE];
    MessageDigest digest=MessageDigest.getInstance(CHECKSUM_ALGORITHM);
    OutputStream out=new DigestOutputStream(new BufferedOutputStream(new FileOutputStream(file),buf.length),digest);
    int c=in.read(buf);
    while (c > 0) {
      out.write(buf,0,c);
      c=in.read(buf);
    }
    in.close();
    out.close();
    track.close();
    asset.setChecksum(Checksum.toHexString(digest.digest()));
    digest.reset();
    asset.setLocalCacheFile(file);
    asset.setURL(url);
    logger.fine(""String_Node_Str"" + url.toString());
    return true;
  }
 catch (  java.lang.Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + url);
    return false;
  }
}","/** 
 * Synchronously download an asset from a server, given the asset and the url of the server to look for the asset. The asset object will be updated with the local file containing the cached asset and the locally computed  checksum. Returns true upon success, false upon failure
 * @param asset The asset to download
 * @param url The full URL to the asset
 * @param progressListener Notified of updates in the loading
 * @return True upon success, false upon failure 
 */
private boolean getAssetFromServer(Asset asset,String url,ProgressListener progressListener){
  try {
    logger.fine(""String_Node_Str"" + url.toString());
    url=encodeSpaces(url);
    URLConnection connection=new URL(url).openConnection();
    TrackingInputStream track=new TrackingInputStream(connection.getInputStream());
    InputStream in=new BufferedInputStream(track);
    if (progressListener != null) {
      track.setListener(progressListener,AssetManager.UPDATE_BYTE_INTERVAL,connection.getContentLength());
    }
    AssetID assetID=new AssetID(asset.getResourceURI(),asset.getChecksum());
    String cacheFile=this.getAssetCacheFileName(assetID);
    File file=new File(cacheFile);
    if (!file.canWrite())     makeDirectory(file);
    byte[] buf=new byte[AssetManager.NETWORK_CHUNK_SIZE];
    MessageDigest digest=MessageDigest.getInstance(CHECKSUM_ALGORITHM);
    OutputStream out=new DigestOutputStream(new BufferedOutputStream(new FileOutputStream(file),buf.length),digest);
    int c=in.read(buf);
    while (c > 0) {
      out.write(buf,0,c);
      c=in.read(buf);
    }
    in.close();
    out.close();
    track.close();
    asset.setChecksum(Checksum.toHexString(digest.digest()));
    digest.reset();
    asset.setLocalCacheFile(file);
    asset.setURL(url);
    logger.fine(""String_Node_Str"" + url.toString());
    return true;
  }
 catch (  java.lang.Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + url,ex);
    return false;
  }
}"
46334,"/** 
 * Set up the classloader with module jar URLs for this server
 * @param serverURL the URL of the server to connect to
 * @return the classloader setup with this server's URLs
 */
private ClassLoader setupClassLoader(String serverURL){
  ModulePluginList list=ModuleUtils.fetchPluginJars(serverURL);
  List<URL> urls=new ArrayList<URL>();
  if (list == null) {
    logger.warning(""String_Node_Str"" + ""String_Node_Str"");
    return getClass().getClassLoader();
  }
  for (  JarURI uri : list.getJarURIs()) {
    try {
      urls.add(uri.getURI().toURL());
    }
 catch (    Exception excp) {
      excp.printStackTrace();
    }
  }
  return new URLClassLoader(urls.toArray(new URL[0]),getClass().getClassLoader());
}","/** 
 * Set up the classloader with module jar URLs for this server
 * @param serverURL the URL of the server to connect to
 * @return the classloader setup with this server's URLs
 */
private ClassLoader setupClassLoader(String serverURL){
  ModulePluginList list=ModuleUtils.fetchPluginJars(serverURL);
  List<URL> urls=new ArrayList<URL>();
  if (list == null) {
    logger.warning(""String_Node_Str"" + ""String_Node_Str"");
    return getClass().getClassLoader();
  }
  for (  JarURI uri : list.getJarURIs()) {
    try {
      urls.add(uri.toURL());
    }
 catch (    Exception excp) {
      excp.printStackTrace();
    }
  }
  return new URLClassLoader(urls.toArray(new URL[0]),getClass().getClassLoader());
}"
46335,"/** 
 * Constructor which takes the module name, relative path and server name/port
 */
public AssetURI(String moduleName,String path,String server) throws URISyntaxException {
  super(""String_Node_Str"" + moduleName + ""String_Node_Str""+ server+ ""String_Node_Str""+ path);
}","/** 
 * Constructor which takes the module name, host name/port, and asset path. The host name/port is given as: <host name>:<port>
 */
public AssetURI(String moduleName,String hostNameAndPort,String assetPath){
  super(""String_Node_Str"",moduleName,hostNameAndPort,assetPath);
}"
46336,"/** 
 * Annotates this URI with a <server name>:<port>. Returns a new instance of AssetURI with this annotation
 * @param server The <server name>:<port>
 * @return A new AssetURI with annotated with the <server name>:<port>
 * @throw URISyntaxException If the URI is not properly formed
 */
public AssetURI getAnnotatedURI(String server) throws URISyntaxException {
  return new AssetURI(this.getModuleName(),this.getRawPath(),server);
}","/** 
 * Annotates this URI with a <server name>:<port>. Returns a new instance of AssetURI with this annotation
 * @param hostNameAndPort The <server name>:<port>
 * @return A new AssetURI with annotated with the <server name>:<port>
 * @throw URISyntaxException If the URI is not properly formed
 */
public AssetURI getAnnotatedURI(String hostNameAndPort) throws URISyntaxException {
  return new AssetURI(this.getModuleName(),hostNameAndPort,this.getAssetPath());
}"
46337,"/** 
 * Returns the relative path of the resource specified by the URI. The relative path does not being with any forward ""/"".
 * @return The relative path within the URI
 */
public String getRelativePath(){
  return ""String_Node_Str"" + this.getURI().getPath();
}","/** 
 * Returns the relative path of the resource specified by the URI. The relative path does not being with any forward ""/"".
 * @return The relative path within the URI
 */
public String getRelativePath(){
  return ""String_Node_Str"" + this.getAssetPath();
}"
46338,"/** 
 * Constructor takes the name of the server session 
 */
public AssetURIAdapter(String serverName){
  this.serverName=serverName;
}","/** 
 * Constructor takes the host name and port as: <host name>:<port>
 */
public AssetURIAdapter(String hostNameAndPort){
  this.hostNameAndPort=hostNameAndPort;
}"
46339,"@Override public AssetURI unmarshal(String uri) throws Exception {
  AssetURI assetURI=new AssetURI(uri);
  if (uri != null) {
    String moduleName=assetURI.getModuleName();
    String rawPath=assetURI.getRawPath();
    assetURI=new AssetURI(moduleName,rawPath,serverName);
  }
  return assetURI;
}","@Override public AssetURI unmarshal(String uri) throws Exception {
  AssetURI assetURI=new AssetURI(uri);
  if (uri != null) {
    String moduleName=assetURI.getModuleName();
    String assetPath=assetURI.getAssetPath();
    assetURI=new AssetURI(moduleName,hostNameAndPort,assetPath);
  }
  return assetURI;
}"
46340,"/** 
 * Constructor which takes the module name, relative path and server name/port
 */
public JarURI(String moduleName,String path,String server) throws URISyntaxException {
  super(""String_Node_Str"" + moduleName + ""String_Node_Str""+ server+ ""String_Node_Str""+ path);
}","/** 
 * Constructor which takes the module name, host name and host port, and asset path. This host name and port is given as: <host name>:<port>
 */
public JarURI(String moduleName,String hostNameAndPort,String assetPath){
  super(""String_Node_Str"",moduleName,hostNameAndPort,assetPath);
}"
46341,"/** 
 * Returns the relative path of the resource specified by the URI. The relative path does not being with any forward ""/"".
 * @return The relative path within the URI
 */
public String getRelativePath(){
  String relativePath=this.getURI().getPath();
  if (relativePath.startsWith(""String_Node_Str"") == true) {
    relativePath=relativePath.substring(1);
  }
  return relativePath;
}","/** 
 * Returns the relative path of the resource specified by the URI. The relative path does not being with any forward ""/"".
 * @return The relative path within the URI
 */
public String getRelativePath(){
  return this.getAssetPath();
}"
46342,"@Override public JarURI unmarshal(String uri) throws Exception {
  JarURI jarURI=new JarURI(uri);
  if (uri != null) {
    String moduleName=jarURI.getModuleName();
    String rawPath=jarURI.getRawPath();
    jarURI=new JarURI(moduleName,rawPath,serverName);
  }
  return jarURI;
}","@Override public JarURI unmarshal(String uri) throws Exception {
  JarURI jarURI=new JarURI(uri);
  if (uri != null) {
    String moduleName=jarURI.getModuleName();
    String assetPath=jarURI.getAssetPath();
    jarURI=new JarURI(moduleName,hostNameAndPort,assetPath);
  }
  return jarURI;
}"
46343,"/** 
 * Constructor takes the name of the server session 
 */
public JarURIAdapter(String serverName){
  this.serverName=serverName;
}","/** 
 * Constructor takes the host name and port as: <host name>:<port>
 */
public JarURIAdapter(String hostNameAndPort){
  this.hostNameAndPort=hostNameAndPort;
}"
46344,"/** 
 * Process a message from a client. Sync message: send all accumulated messages back to the client (the sender). All other messages: broadcast to <bold>all</bold> cells (including the sender!)
 * @param clientSender The sender object for the client who sent the message.
 * @param clientSession The session for the client who sent the message.
 * @param message The message which was received.
 * @param commComponent The communications component that received the message.
 */
public void receivedMessage(WonderlandClientSender clientSender,ClientSession clientSession,CellMessage message){
  WhiteboardCompoundCellMessage cmsg=(WhiteboardCompoundCellMessage)message;
  logger.fine(""String_Node_Str"" + cmsg);
  WhiteboardComponentMO commComponent=commComponentRef.getForUpdate();
  if (cmsg.getAction() == Action.REQUEST_SYNC) {
    logger.fine(""String_Node_Str"" + messages.size() + ""String_Node_Str"");
    Iterator<WhiteboardCompoundCellMessage> iter=messages.iterator();
    while (iter.hasNext()) {
      WhiteboardCompoundCellMessage msg=iter.next();
      clientSender.send(clientSession,msg);
    }
  }
 else {
    WhiteboardCompoundCellMessage msg=new WhiteboardCompoundCellMessage(cmsg.getClientID(),cmsg.getCellID(),cmsg.getAction());
switch (cmsg.getAction()) {
case SET_TOOL:
      msg.setTool(cmsg.getTool());
    break;
case SET_COLOR:
  msg.setColor(cmsg.getColor());
break;
case MOVE_TO:
case DRAG_TO:
msg.setPositions(cmsg.getPositions());
break;
case REQUEST_SYNC:
break;
case EXECUTE_COMMAND:
msg.setCommand(cmsg.getCommand());
break;
}
if (cmsg.getAction() == Action.EXECUTE_COMMAND) {
if (cmsg.getCommand() == Command.ERASE) {
logger.fine(""String_Node_Str"");
messages.clear();
}
}
 else {
if (cmsg.getAction() != Action.MOVE_TO) {
if ((lastMessage != null) && lastMessage.getAction() == Action.MOVE_TO) {
messages.add(lastMessage);
}
cmsg.setClientID(null);
messages.add(cmsg);
}
}
lastMessage=cmsg;
commComponent.sendAllClients(msg);
}
}","/** 
 * Process a message from a client. Sync message: send all accumulated messages back to the client (the sender). All other messages: broadcast to <bold>all</bold> cells (including the sender!)
 * @param clientSender The sender object for the client who sent the message.
 * @param clientSession The session for the client who sent the message.
 * @param message The message which was received.
 * @param commComponent The communications component that received the message.
 */
public void receivedMessage(WonderlandClientSender clientSender,ClientSession clientSession,CellMessage message){
  WhiteboardCompoundCellMessage cmsg=(WhiteboardCompoundCellMessage)message;
  logger.fine(""String_Node_Str"" + cmsg);
  WhiteboardComponentMO commComponent=commComponentRef.getForUpdate();
  if (cmsg.getAction() == Action.REQUEST_SYNC) {
    logger.fine(""String_Node_Str"" + messages.size() + ""String_Node_Str"");
    Iterator<WhiteboardCompoundCellMessage> iter=messages.iterator();
    while (iter.hasNext()) {
      WhiteboardCompoundCellMessage msg=iter.next();
      clientSender.send(clientSession,msg);
    }
  }
 else {
    WhiteboardCompoundCellMessage msg=new WhiteboardCompoundCellMessage(cmsg.getClientID(),cmsg.getCellID(),cmsg.getAction());
switch (cmsg.getAction()) {
case SET_TOOL:
      msg.setTool(cmsg.getTool());
    break;
case SET_COLOR:
  msg.setColor(cmsg.getColor());
break;
case MOVE_TO:
case DRAG_TO:
msg.setPositions(cmsg.getPositions());
break;
case REQUEST_SYNC:
break;
case EXECUTE_COMMAND:
msg.setCommand(cmsg.getCommand());
break;
}
if (cmsg.getAction() == Action.EXECUTE_COMMAND) {
if (cmsg.getCommand() == Command.ERASE) {
logger.fine(""String_Node_Str"");
messages.clear();
}
}
 else {
if (cmsg.getAction() != Action.MOVE_TO) {
if ((lastMessage != null) && lastMessage.getAction() == Action.MOVE_TO) {
messages.add(lastMessage);
}
cmsg.setClientID(null);
messages.add(cmsg);
}
}
lastMessage=cmsg;
BigInteger sessionId=AppContext.getDataManager().createReference(clientSession).getId();
commComponent.sendAllClients(sessionId,msg);
}
}"
46345,"@Override public AssetURI unmarshal(String uri) throws Exception {
  AssetURI assetURI=new AssetURI(uri);
  if (uri != null) {
    String moduleName=assetURI.getModuleName();
    String rawPath=assetURI.getRawPath();
    assetURI=new AssetURI(moduleName,serverName,rawPath);
  }
  return assetURI;
}","@Override public AssetURI unmarshal(String uri) throws Exception {
  AssetURI assetURI=new AssetURI(uri);
  if (uri != null) {
    String moduleName=assetURI.getModuleName();
    String rawPath=assetURI.getRawPath();
    assetURI=new AssetURI(moduleName,rawPath,serverName);
  }
  return assetURI;
}"
46346,"public void viewEnterExit(boolean entered,Cell cell,BoundingVolume proximityVolume,int proximityIndex){
  logger.warning(""String_Node_Str"" + cell + ""String_Node_Str""+ entered);
  ConeOfSilenceEnterCellMessage message=new ConeOfSilenceEnterCellMessage(cell.getCellID(),entered);
  channelComp.send(message);
}","public void viewEnterExit(boolean entered,Cell cell,BoundingVolume proximityVolume,int proximityIndex){
  logger.warning(""String_Node_Str"" + cell + ""String_Node_Str""+ entered);
  ConeOfSilenceEnterCellMessage message=new ConeOfSilenceEnterCellMessage(coneOfSilenceCell.getCellID(),cell.getCellID(),entered);
  channelComp.send(message);
}"
46347,"public ConeOfSilenceEnterCellMessage(CellID cellID,boolean entered){
  super(cellID);
  this.entered=entered;
}","public ConeOfSilenceEnterCellMessage(CellID coneCellID,CellID avatarCellID,boolean entered){
  super(coneCellID);
  this.avatarCellID=avatarCellID;
  this.entered=entered;
}"
46348,"public ConeOfSilenceCellMO(Vector3f center,float size){
  super(new BoundingBox(new Vector3f(),size,size,size),new CellTransform(null,center));
  if (initialized == false) {
    addComponent(new ChannelComponentMO(this));
  }
}","public ConeOfSilenceCellMO(Vector3f center,float size){
  super(new BoundingBox(new Vector3f(),size,size,size),new CellTransform(null,center));
  addComponent(new ChannelComponentMO(this));
}"
46349,"@Override public void setupCell(BasicCellSetup setup){
  super.setupCell(setup);
  ConeOfSilenceCellSetup css=(ConeOfSilenceCellSetup)setup;
  if (initialized == false) {
    new ConeOfSilenceMessageHandler(this,css.getName());
    initialized=true;
  }
}","@Override public void setupCell(BasicCellSetup setup){
  super.setupCell(setup);
  ConeOfSilenceCellSetup css=(ConeOfSilenceCellSetup)setup;
  if (haveMessageHandler == false) {
    haveMessageHandler=true;
    new ConeOfSilenceMessageHandler(this,css.getName());
  }
}"
46350,"public ConeOfSilenceMessageHandler(ConeOfSilenceCellMO coneOfSilenceCellMO,String name){
  this.name=name;
  coneOfSilenceCellMORef=AppContext.getDataManager().createReference((ConeOfSilenceCellMO)CellManagerMO.getCell(coneOfSilenceCellMO.getCellID()));
  ChannelComponentMO channelComponent=(ChannelComponentMO)coneOfSilenceCellMO.getComponent(ChannelComponentMO.class);
  if (channelComponent == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  channelComponentRef=AppContext.getDataManager().createReference(channelComponent);
  channelComponent.addMessageReceiver(ConeOfSilenceEnterCellMessage.class,this);
}","public ConeOfSilenceMessageHandler(ConeOfSilenceCellMO coneOfSilenceCellMO,String name){
  this.name=name;
  coneOfSilenceCellMORef=AppContext.getDataManager().createReference((ConeOfSilenceCellMO)CellManagerMO.getCell(coneOfSilenceCellMO.getCellID()));
  ChannelComponentMO channelComponent=(ChannelComponentMO)coneOfSilenceCellMO.getComponent(ChannelComponentMO.class);
  if (channelComponent == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  channelComponent.addMessageReceiver(ConeOfSilenceEnterCellMessage.class,this);
  channelComponentRef=AppContext.getDataManager().createReference(channelComponent);
}"
46351,"public void cellEntered(ConeOfSilenceEnterCellMessage msg){
  String callId=msg.getCellID().toString();
  ConeOfSilenceCellSetup setup=(ConeOfSilenceCellSetup)coneOfSilenceCellMORef.get().getCellMOSetup();
  logger.warning(callId + ""String_Node_Str"" + name);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Player player=vm.getPlayer(callId);
  AudioGroup audioGroup=vm.getAudioGroup(name);
  audioGroup.addPlayer(player,new AudioGroupPlayerInfo(true,AudioGroupPlayerInfo.ChatType.SECRET));
  player.attenuateOtherGroups(audioGroup,0,0);
}","public void cellEntered(ConeOfSilenceEnterCellMessage msg){
  String callId=msg.getAvatarCellID().toString();
  ConeOfSilenceCellSetup setup=(ConeOfSilenceCellSetup)coneOfSilenceCellMORef.get().getCellMOSetup();
  logger.warning(callId + ""String_Node_Str"" + name);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    AudioGroupSetup ags=new AudioGroupSetup();
    audioGroup=vm.createAudioGroup(name,ags);
  }
  audioGroup.addPlayer(player,new AudioGroupPlayerInfo(true,AudioGroupPlayerInfo.ChatType.SECRET));
  player.attenuateOtherGroups(audioGroup,0,0);
}"
46352,"public void cellExited(ConeOfSilenceEnterCellMessage msg){
  String callId=msg.getCellID().toString();
  logger.warning(callId + ""String_Node_Str"" + name);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    logger.warning(""String_Node_Str"" + name);
    return;
  }
  Player player=vm.getPlayer(callId);
  audioGroup.removePlayer(player);
  player.attenuateOtherGroups(audioGroup,AudioGroup.DEFAULT_SPEAKING_ATTENUATION,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
}","public void cellExited(ConeOfSilenceEnterCellMessage msg){
  String callId=msg.getAvatarCellID().toString();
  logger.warning(callId + ""String_Node_Str"" + name);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    logger.warning(""String_Node_Str"" + name);
    return;
  }
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  audioGroup.removePlayer(player);
  if (audioGroup.getPlayers().size() == 0) {
    vm.removeAudioGroup(name);
  }
  player.attenuateOtherGroups(audioGroup,AudioGroup.DEFAULT_SPEAKING_ATTENUATION,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
}"
46353,"public PhoneCellMO(Vector3f center,float size){
  super(new BoundingBox(new Vector3f(),size,size,size),new CellTransform(null,center));
  if (initialized == false) {
    addComponent(new ChannelComponentMO(this));
    new PhoneMessageHandler(this);
    initialized=true;
  }
}","public PhoneCellMO(Vector3f center,float size){
  super(new BoundingBox(new Vector3f(),size,size,size),new CellTransform(null,center));
  addComponent(new ChannelComponentMO(this));
  new PhoneMessageHandler(this);
}"
46354,"public void cellEntered(ConeOfSilenceEnterCellMessage msg){
  String callId=msg.getAvatarCellID().toString();
  ConeOfSilenceCellSetup setup=(ConeOfSilenceCellSetup)coneOfSilenceCellMORef.get().getCellMOSetup();
  logger.warning(callId + ""String_Node_Str"" + name);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    AudioGroupSetup ags=new AudioGroupSetup();
    audioGroup=vm.createAudioGroup(name,ags);
  }
  audioGroup.addPlayer(player,new AudioGroupPlayerInfo(true,AudioGroupPlayerInfo.ChatType.SECRET));
  player.attenuateOtherGroups(audioGroup,0,0);
}","public void cellEntered(ConeOfSilenceEnterCellMessage msg){
  String callId=msg.getAvatarCellID().toString();
  ConeOfSilenceCellSetup setup=(ConeOfSilenceCellSetup)coneOfSilenceCellMORef.get().getCellMOSetup();
  logger.warning(callId + ""String_Node_Str"" + name);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    AudioGroupSetup ags=new AudioGroupSetup();
    ags.spatializer=new FullVolumeSpatializer();
    ags.spatializer.setAttenuator(DefaultSpatializer.DEFAULT_MAXIMUM_VOLUME);
    audioGroup=vm.createAudioGroup(name,ags);
  }
  audioGroup.addPlayer(player,new AudioGroupPlayerInfo(true,AudioGroupPlayerInfo.ChatType.SECRET));
  player.attenuateOtherGroups(audioGroup,0,0);
}"
46355,"public void createCell(CellMO cellMO){
  final BigInteger cellCacheId=(cellMO instanceof ViewCellMO) ? AppContext.getDataManager().createReference(((ViewCellMO)cellMO).getCellCache()).getId() : null;
  final Identity identity=proxy.getCurrentOwner();
  scheduleChange(new Change(cellMO.getCellID(),cellMO.getLocalBounds(),cellMO.getLocalTransform(null)){
    public void run(){
      SpatialCell sc=universe.createSpatialCell(cellID,cellCacheId,identity);
      sc.setLocalBounds(localBounds);
      sc.setLocalTransform(localTransform,identity);
    }
  }
);
}","public void createCell(CellMO cellMO){
  final Class cellClazz=cellMO.getClass();
  final Identity identity=proxy.getCurrentOwner();
  final BigInteger dsID=AppContext.getDataManager().createReference(cellMO).getId();
  scheduleChange(new Change(cellMO.getCellID(),cellMO.getLocalBounds(),cellMO.getLocalTransform(null)){
    public void run(){
      SpatialCell sc=universe.createSpatialCell(cellID,dsID,cellClazz);
      sc.setLocalBounds(localBounds);
      sc.setLocalTransform(localTransform,identity);
    }
  }
);
}"
46356,"public void removeRootSpatialCell(SpatialCellImpl cell){
synchronized (rootCells) {
    rootCells.remove(cell);
  }
synchronized (viewCaches) {
    cell.removeViewCache(viewCaches,this);
    for (    ViewCache cache : viewCaches)     cache.rootCellRemoved(cell);
  }
}","public void removeRootSpatialCell(SpatialCellImpl cell){
  logger.fine(""String_Node_Str"" + cell.getCellID() + ""String_Node_Str""+ getName());
synchronized (rootCells) {
    rootCells.remove(cell);
  }
synchronized (viewCaches) {
    cell.removeViewCache(viewCaches,this);
    for (    ViewCache cache : viewCaches)     cache.rootCellRemoved(cell);
  }
}"
46357,"public void addRootSpatialCell(SpatialCellImpl cell){
synchronized (rootCells) {
    rootCells.add(cell);
  }
synchronized (viewCaches) {
    cell.addViewCache(viewCaches,this);
    for (    ViewCache cache : viewCaches)     cache.rootCellAdded(cell);
  }
}","public void addRootSpatialCell(SpatialCellImpl cell){
  logger.fine(""String_Node_Str"" + cell.getCellID() + ""String_Node_Str""+ getName());
synchronized (rootCells) {
    rootCells.add(cell);
  }
synchronized (viewCaches) {
    cell.addViewCache(viewCaches,this);
    for (    ViewCache cache : viewCaches)     cache.rootCellAdded(cell);
  }
}"
46358,"/** 
 * Return the space that encloses this point, if the space does not exist, create it
 * @param position
 * @return
 */
public Iterable<Space> getEnclosingSpace(BoundingVolume volume){
  ArrayList retList=new ArrayList();
  Vector3f point=volume.getCenter();
  int x=(int)(point.x / (SPACE_SIZE * 2));
  int y=(int)(point.y / (SPACE_SIZE * 2));
  int z=(int)(point.z / (SPACE_SIZE * 2));
  if (point.x < 0)   x-=1;
  if (point.y < 0)   y-=1;
  if (point.z < 0)   z-=1;
  Space sp=getEnclosingSpaceImpl(x,y,z);
  if (sp == null)   sp=createSpace(point,x,y,z);
  if (!sp.getWorldBounds().contains(point))   throw new RuntimeException(""String_Node_Str"" + sp.getWorldBounds() + ""String_Node_Str""+ point+ ""String_Node_Str""+ getSpaceBindingName(x,y,z));
  retList.add(sp);
  float radius;
  if (volume instanceof BoundingBox) {
    radius=((BoundingBox)volume).xExtent;
  }
 else   if (volume instanceof BoundingSphere) {
    radius=((BoundingSphere)volume).getRadius();
  }
 else   throw new RuntimeException(""String_Node_Str"" + volume.getClass().getName());
  int step=(int)(radius / (SPACE_SIZE * 2));
  for (int xs=0; xs < x + step; xs++) {
    for (int ys=0; ys < y + step; ys++) {
      for (int zs=0; zs < z + step; zs++) {
        sp=getEnclosingSpaceImpl(x + xs,y + ys,z + zs);
        if (sp != null && sp.getWorldBounds().intersects(volume)) {
          retList.add(sp);
        }
        sp=getEnclosingSpaceImpl(x - xs,y - ys,z - zs);
        if (sp != null && sp.getWorldBounds().intersects(volume)) {
          retList.add(sp);
        }
      }
    }
  }
  return retList;
}","/** 
 * Return the space that encloses this point, if the space does not exist, create it
 * @param position
 * @return
 */
public Iterable<Space> getEnclosingSpace(BoundingVolume volume){
  ArrayList retList=new ArrayList();
  Vector3f point=volume.getCenter();
  int x=(int)(point.x / (SPACE_SIZE * 2));
  int y=(int)(point.y / (SPACE_SIZE * 2));
  int z=(int)(point.z / (SPACE_SIZE * 2));
  if (point.x < 0)   x-=1;
  if (point.y < 0)   y-=1;
  if (point.z < 0)   z-=1;
  Space sp=getEnclosingSpaceImpl(x,y,z);
  if (sp == null) {
    sp=createSpace(point,x,y,z);
  }
  if (!sp.getWorldBounds().contains(point))   throw new RuntimeException(""String_Node_Str"" + sp.getWorldBounds() + ""String_Node_Str""+ point+ ""String_Node_Str""+ getSpaceBindingName(x,y,z));
  retList.add(sp);
  float radius;
  if (volume instanceof BoundingBox) {
    radius=((BoundingBox)volume).xExtent;
  }
 else   if (volume instanceof BoundingSphere) {
    radius=((BoundingSphere)volume).getRadius();
  }
 else   throw new RuntimeException(""String_Node_Str"" + volume.getClass().getName());
  int step=(int)(radius / (SPACE_SIZE * 2));
  for (int xs=0; xs < step; xs++) {
    for (int ys=0; ys < step; ys++) {
      for (int zs=0; zs < step; zs++) {
        sp=getEnclosingSpaceImpl(x + xs,y + ys,z + zs);
        if (sp != null && sp.getWorldBounds().intersects(volume)) {
          retList.add(sp);
        }
        sp=getEnclosingSpaceImpl(x - xs,y - ys,z - zs);
        if (sp != null && sp.getWorldBounds().intersects(volume)) {
          retList.add(sp);
        }
      }
    }
  }
  return retList;
}"
46359,"public SpatialCellImpl(CellID id){
  this.cellID=id;
}","public SpatialCellImpl(CellID id,BigInteger dsID){
  this.cellID=id;
  this.dsID=dsID;
}"
46360,"/** 
 * Compute the world bounds for this node from the local bounds and world transform
 */
private void computeWorldBounds(){
  worldBounds=localBounds.clone(worldBounds);
  worldTransform.transform(worldBounds);
}","/** 
 * Compute the world bounds for this node from the local bounds and world transform
 */
private void computeWorldBounds(){
  worldBounds=localBounds.clone(worldBounds);
  worldTransform.transform(worldBounds);
  if (isRoot) {
    Iterable<Space> it=UniverseImpl.getUniverse().getSpaceManager().getEnclosingSpace(worldBounds);
    for (    Space s : it) {
      if (!spaces.contains(s)) {
        s.addRootSpatialCell(this);
        spaces.add(s);
      }
    }
  }
}"
46361,"public void destroy(){
  acquireRootWriteLock();
  SpatialCellImpl root=(SpatialCellImpl)getRoot();
  if (root == null)   return;
  Iterable<ViewCache> caches=root.viewCache.keySet();
  for (  ViewCache cache : caches) {
    cache.cellDestroyed(this);
  }
  releaseRootWriteLock();
}","public void destroy(){
  acquireRootWriteLock();
  SpatialCellImpl root=(SpatialCellImpl)getRoot();
  if (root == null)   return;
  Iterable<ViewCache> caches=root.viewCache.keySet();
  for (  ViewCache cache : caches) {
    cache.cellDestroyed(this);
  }
  if (isRoot) {
    for (    Space space : spaces) {
      space.removeRootSpatialCell(this);
    }
  }
  releaseRootWriteLock();
}"
46362,"/** 
 * Set the root for this node and all it's children
 * @param root
 */
void setRoot(SpatialCell root,Identity identity){
  if (root == this) {
    readWriteLock=new ReentrantReadWriteLock(true);
    viewCache=new HashMap();
    worldTransform=localTransform.clone(null);
    computeWorldBounds();
    if (children != null) {
      for (      SpatialCellImpl s : children)       worldBounds.mergeLocal(s.updateWorldTransform(identity));
    }
  }
  this.rootNode=(SpatialCellImpl)root;
  acquireRootWriteLock();
  if (children != null) {
    for (    SpatialCellImpl s : children)     s.setRoot(root,identity);
  }
  releaseRootWriteLock();
}","/** 
 * Set the root for this node and all it's children
 * @param root
 */
void setRoot(SpatialCell root,Identity identity){
  this.rootNode=(SpatialCellImpl)root;
  if (root == this) {
    readWriteLock=new ReentrantReadWriteLock(true);
    viewCache=new HashMap();
    isRoot=true;
    spaces=new HashSet();
    acquireRootWriteLock();
    worldTransform=localTransform.clone(null);
    computeWorldBounds();
    if (children != null) {
      for (      SpatialCellImpl s : children)       worldBounds.mergeLocal(s.updateWorldTransform(identity));
    }
  }
  if (isRoot) {
    if (root == null) {
      for (      Space s : spaces) {
        s.removeRootSpatialCell(this);
      }
      spaces.clear();
    }
  }
  if (children != null) {
    for (    SpatialCellImpl s : children)     s.setRoot(root,identity);
  }
  if (root == this) {
    releaseRootWriteLock();
  }
}"
46363,"/** 
 * Create a Spatial cell
 * @param id
 * @param cellCacheId the id of the view cell cache if the cell is a ViewCell, otherwise null
 * @param identity
 * @return
 */
public SpatialCell createSpatialCell(CellID id,BigInteger cellCacheId,Identity identity);","/** 
 * Create a Spatial cell
 * @param id
 * @param cellCacheId the id of the view cell cache if the cell is a ViewCell, otherwise null
 * @param identity
 * @return
 */
public SpatialCell createSpatialCell(CellID id,BigInteger dsID,Class cellClass);"
46364,"public void removeRootSpatialCell(CellID cellID,Identity identity){
  logger.fine(""String_Node_Str"" + cellID);
  SpatialCellImpl cellImpl=(SpatialCellImpl)getSpatialCell(cellID);
  if (cellImpl == null) {
    logger.warning(""String_Node_Str"" + cellID);
    return;
  }
  cellImpl.setRoot(null,identity);
  cellImpl.acquireRootReadLock();
  Iterable<Space> it=spaceManager.getEnclosingSpace(cellImpl.getWorldBounds());
  for (  Space s : it) {
    s.removeRootSpatialCell(cellImpl);
  }
  cellImpl.releaseRootReadLock();
}","public void removeRootSpatialCell(CellID cellID,Identity identity){
  logger.fine(""String_Node_Str"" + cellID);
  SpatialCellImpl cellImpl=(SpatialCellImpl)getSpatialCell(cellID);
  if (cellImpl == null) {
    logger.warning(""String_Node_Str"" + cellID);
    return;
  }
  cellImpl.setRoot(null,identity);
}"
46365,"public void addRootSpatialCell(CellID cellID,Identity identity){
  SpatialCellImpl cellImpl=(SpatialCellImpl)getSpatialCell(cellID);
  cellImpl.setRoot(cellImpl,identity);
  cellImpl.acquireRootReadLock();
  System.out.println(""String_Node_Str"" + cellImpl.getWorldBounds());
  Iterable<Space> it=spaceManager.getEnclosingSpace(cellImpl.getWorldBounds());
  for (  Space s : it) {
    System.out.println(""String_Node_Str"" + s.getName());
    s.addRootSpatialCell(cellImpl);
  }
  cellImpl.releaseRootReadLock();
}","public void addRootSpatialCell(CellID cellID,Identity identity){
  SpatialCellImpl cellImpl=(SpatialCellImpl)getSpatialCell(cellID);
  cellImpl.setRoot(cellImpl,identity);
}"
46366,"public void viewLogin(CellID viewCellId,BigInteger cellCacheId,Identity identity){
  ViewCellImpl viewCell;
synchronized (cells) {
    viewCell=(ViewCellImpl)cells.get(viewCellId);
  }
  System.err.println(""String_Node_Str"" + viewCell + ""String_Node_Str""+ viewCellId);
  ViewCache viewCache=new ViewCache(viewCell,spaceManager,identity,cellCacheId);
  viewCell.setViewCache(viewCache);
  viewCache.login();
}","public void viewLogin(CellID viewCellID,BigInteger cellCacheId,Identity identity){
  ViewCellImpl viewCell;
synchronized (cells) {
    viewCell=(ViewCellImpl)cells.get(viewCellID);
  }
  logger.fine(""String_Node_Str"" + viewCell + ""String_Node_Str""+ viewCellID);
  ViewCache viewCache=new ViewCache(viewCell,spaceManager,identity,cellCacheId);
  viewCell.setViewCache(viewCache);
  viewCache.login();
}"
46367,"public void viewLogout(CellID viewCellId){
  ViewCellImpl viewCell;
synchronized (cells) {
    viewCell=(ViewCellImpl)cells.get(viewCellId);
  }
  viewCell.getViewCache().logout();
}","public void viewLogout(CellID viewCellID){
  logger.fine(""String_Node_Str"" + viewCellID);
  ViewCellImpl viewCell;
synchronized (cells) {
    viewCell=(ViewCellImpl)cells.get(viewCellID);
  }
  viewCell.getViewCache().logout();
}"
46368,"public SpatialCell createSpatialCell(CellID id,BigInteger cellCacheId,Identity identity){
  logger.fine(""String_Node_Str"" + id);
  SpatialCellImpl ret;
  if (cellCacheId != null) {
    ret=new ViewCellImpl(id,spaceManager,identity,cellCacheId);
  }
 else   ret=new SpatialCellImpl(id);
synchronized (cells) {
    cells.put(id,ret);
  }
  return ret;
}","public SpatialCell createSpatialCell(CellID id,BigInteger dsID,Class cellClass){
  logger.fine(""String_Node_Str"" + id + ""String_Node_Str""+ dsID);
  SpatialCellImpl ret;
  if (ViewCellMO.class.isAssignableFrom(cellClass)) {
    ret=new ViewCellImpl(id,spaceManager,dsID);
  }
 else   ret=new SpatialCellImpl(id,dsID);
synchronized (cells) {
    cells.put(id,ret);
  }
  return ret;
}"
46369,"/** 
 * {@inheritDoc}
 */
@Override protected Node createSceneGraph(Entity entity){
  System.err.println(""String_Node_Str"" + cell.getLocalTransform());
  return rootNode;
}","/** 
 * {@inheritDoc}
 */
@Override protected Node createSceneGraph(Entity entity){
  RenderComponent rc=ClientContextJME.getWorldManager().getRenderManager().createRenderComponent(rootNode);
  entity.addComponent(RenderComponent.class,rc);
  rc.setEntity(entity);
  return rootNode;
}"
46370,"/** 
 * {@inheritDoc}
 */
@Override public void attachView(WindowView view){
  ViewWorldDefault viewWorld=(ViewWorldDefault)view;
  getEntity().addEntity(viewWorld.getEntity());
  FrameWorldDefault frame=viewWorld.getFrame();
  if (frame != null) {
    getEntity().addEntity(frame.getEntity());
    frame.setParentEntity(getEntity());
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void attachView(WindowView view){
  ViewWorldDefault viewWorld=(ViewWorldDefault)view;
  getEntity().addEntity(viewWorld.getEntity());
  viewWorld.setParentEntity(getEntity());
  AppCell cell=viewWorld.getCell();
  applyTransform(rootNode,cell.getLocalTransform());
  FrameWorldDefault frame=viewWorld.getFrame();
  if (frame != null) {
    getEntity().addEntity(frame.getEntity());
    frame.setParentEntity(getEntity());
  }
}"
46371,"static void printEntitySceneGraphs(Entity entity,int indentLevel){
  System.err.println(""String_Node_Str"");
  printIndentLevel(indentLevel);
  System.err.println(""String_Node_Str"" + entity);
  printIndentLevel(indentLevel);
  System.err.print(""String_Node_Str"");
  RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
  if (rc == null) {
    System.err.println(""String_Node_Str"");
  }
 else {
    Node sceneRoot=rc.getSceneRoot();
    System.err.println(sceneRoot);
    if (sceneRoot != null) {
      GraphicsUtils.printNode(sceneRoot);
    }
  }
  int numChildren=entity.numEntities();
  for (int i=0; i < numChildren; i++) {
    Entity child=entity.getEntity(i);
    printIndentLevel(indentLevel);
    System.err.println(""String_Node_Str"");
    printIndentLevel(indentLevel);
    System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ child);
    printEntitySceneGraphs(child,indentLevel + 1);
    printIndentLevel(indentLevel);
    System.err.println(""String_Node_Str"");
  }
}","static void printEntitySceneGraphs(Entity entity,int indentLevel){
  printIndentLevel(indentLevel);
  System.err.println(""String_Node_Str"" + entity);
  printIndentLevel(indentLevel);
  System.err.print(""String_Node_Str"");
  RenderComponent rc=(RenderComponent)entity.getComponent(RenderComponent.class);
  if (rc == null) {
    System.err.println(""String_Node_Str"");
  }
 else {
    Node sceneRoot=rc.getSceneRoot();
    System.err.println(sceneRoot);
    if (sceneRoot != null) {
      GraphicsUtils.printNode(sceneRoot);
    }
  }
  int numChildren=entity.numEntities();
  for (int i=0; i < numChildren; i++) {
    Entity child=entity.getEntity(i);
    printIndentLevel(indentLevel);
    System.err.println(""String_Node_Str"");
    printIndentLevel(indentLevel);
    System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ child);
    printEntitySceneGraphs(child,indentLevel + 1);
    printIndentLevel(indentLevel);
    System.err.println(""String_Node_Str"");
  }
}"
46372,"private static void appendSceneGraph(StringBuffer sb,int indentLevel,Node node){
  System.err.println(""String_Node_Str"");
  if (node == null)   return;
  appendLine(sb,indentLevel,node.toString());
  List<Spatial> childSpatials=node.getChildren();
  if (childSpatials == null)   return;
  for (  Spatial child : childSpatials) {
    appendLine(sb,indentLevel,""String_Node_Str"");
    if (child instanceof Node) {
      appendLine(sb,indentLevel,""String_Node_Str"" + child.toString());
      appendSceneGraph(sb,indentLevel + 1,(Node)child);
    }
 else {
      appendLine(sb,indentLevel,""String_Node_Str"" + child.toString());
    }
    appendLine(sb,indentLevel,""String_Node_Str"");
  }
}","private static void appendSceneGraph(StringBuffer sb,int indentLevel,Node node){
  if (node == null)   return;
  appendLine(sb,indentLevel,node.toString());
  List<Spatial> childSpatials=node.getChildren();
  if (childSpatials == null)   return;
  for (  Spatial child : childSpatials) {
    appendLine(sb,indentLevel,""String_Node_Str"");
    if (child instanceof Node) {
      appendLine(sb,indentLevel,""String_Node_Str"" + child.toString());
      appendSceneGraph(sb,indentLevel + 1,(Node)child);
    }
 else {
      appendLine(sb,indentLevel,""String_Node_Str"" + child.toString());
    }
    appendLine(sb,indentLevel,""String_Node_Str"");
  }
}"
46373,"/** 
 * Specify the parent entity of this component.
 */
public void setParentEntity(Entity parentEntity){
  if (parentEntity != null) {
    detachFromParentEntity();
  }
  this.parentEntity=parentEntity;
  if (this.parentEntity != null) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + this);
    System.err.println(""String_Node_Str"" + parentEntity);
    attachToParentEntity();
  }
}","/** 
 * Specify the parent entity of this component.
 */
public void setParentEntity(Entity parentEntity){
  if (parentEntity != null) {
    detachFromParentEntity();
  }
  this.parentEntity=parentEntity;
  if (this.parentEntity != null) {
    attachToParentEntity();
  }
}"
46374,"/** 
 * Construct this component's scene graph. This consists of the following nodes. parentEntity attachPoint -> localToCellNode -> Geometry (subclass provided)
 */
protected void initSceneGraph(){
  localToCellNode=new Node(""String_Node_Str"" + name);
  RenderComponent rc=ClientContextJME.getWorldManager().getRenderManager().createRenderComponent(localToCellNode);
  entity.addComponent(RenderComponent.class,rc);
  rc.setEntity(entity);
  System.err.println(""String_Node_Str"" + rc);
  System.err.println(""String_Node_Str"" + getEntity());
  Geometry[] geoms=getGeometries();
  for (  Geometry geom : geoms) {
    localToCellNode.attachChild(geom);
  }
}","/** 
 * Construct this component's scene graph. This consists of the following nodes. parentEntity attachPoint -> localToCellNode -> Spatial, Spatial, etc. (subclass provided)
 */
protected void initSceneGraph(){
  localToCellNode=new Node(""String_Node_Str"" + name);
  RenderComponent rc=ClientContextJME.getWorldManager().getRenderManager().createRenderComponent(localToCellNode);
  entity.addComponent(RenderComponent.class,rc);
  rc.setEntity(entity);
  Spatial[] spatials=getSpatials();
  for (  Spatial spatial : spatials) {
    localToCellNode.attachChild(spatial);
  }
}"
46375,"/** 
 * Attach this component's entity to its parent entity.
 */
protected void attachToParentEntity(){
  if (parentEntity != null) {
    parentEntity.addEntity(entity);
    RenderComponent rcParentEntity=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
    RenderComponent rcEntity=(RenderComponent)entity.getComponent(RenderComponent.class);
    System.err.println(""String_Node_Str"" + rcEntity);
    System.err.println(""String_Node_Str"" + rcEntity.getEntity());
    ClientContextJME.getWorldManager().addEntity(rcEntity.getEntity());
    if (rcParentEntity != null && rcParentEntity.getSceneRoot() != null && rcEntity != null) {
      rcEntity.setAttachPoint(rcParentEntity.getSceneRoot());
    }
  }
}","/** 
 * Attach this component's entity to its parent entity.
 */
protected void attachToParentEntity(){
  if (parentEntity != null) {
    parentEntity.addEntity(entity);
    RenderComponent rcParentEntity=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
    RenderComponent rcEntity=(RenderComponent)entity.getComponent(RenderComponent.class);
    if (rcParentEntity != null && rcParentEntity.getSceneRoot() != null && rcEntity != null) {
      rcEntity.setAttachPoint(rcParentEntity.getSceneRoot());
    }
  }
}"
46376,"/** 
 * Create a new instance of FrameHeader.
 * @param view The view the frame encloses.
 * @param closeListeners The listeners to be notified when the header's close button is pressed.
 */
public FrameHeader(Window2DView view,LinkedList<Window2DFrame.CloseListener> closeListeners){
  super(""String_Node_Str"",view,Side.TOP,new Gui2DSide(view));
  title=new FrameLabelTitle(view,gui);
  controller=new FrameLabelController(view,gui,closeButton);
}","/** 
 * Create a new instance of FrameHeader.
 * @param view The view the frame encloses.
 * @param closeListeners The listeners to be notified when the header's close button is pressed.
 */
public FrameHeader(Window2DView view,LinkedList<Window2DFrame.CloseListener> closeListeners){
  super(""String_Node_Str"",view,Side.TOP,new Gui2DSide(view));
}"
46377,"/** 
 * {@inheritDoc}
 */
public void update() throws InstantiationException {
  System.err.println(""String_Node_Str"");
  updateLayout();
  if (quad == null) {
    quad=new Quad(""String_Node_Str"",width,height);
    quad.setModelBound(new BoundingBox());
  }
 else {
    quad.resize(width,height);
  }
  quad.updateModelBound();
  super.update();
}","/** 
 * {@inheritDoc}
 */
public void update() throws InstantiationException {
  updateLayout();
  if (quad == null) {
    quad=new Quad(""String_Node_Str"",width,height);
    quad.setModelBound(new BoundingBox());
  }
 else {
    quad.resize(width,height);
  }
  quad.updateModelBound();
  localToCellNode.attachChild(quad);
  super.update();
}"
46378,"/** 
 * Change the size of this component.
 * @param width The new width.
 * @param height The new height.
 */
public void resize(float width,float height) throws InstantiationException {
  System.err.println(""String_Node_Str"");
  this.width=width;
  this.height=height;
  update();
}","/** 
 * Change the size of this component.
 * @param width The new width.
 * @param height The new height.
 */
public void resize(float width,float height) throws InstantiationException {
  this.width=width;
  this.height=height;
  update();
}"
46379,"/** 
 * {@inheritDoc}
 */
public void update() throws InstantiationException {
  updateLayout();
  System.err.println(""String_Node_Str"" + entity);
  if (quad == null) {
    quad=new TexturedQuad(texture,""String_Node_Str"",width,height);
    quad.setModelBound(new BoundingBox());
  }
 else {
    System.err.println(""String_Node_Str"" + quad);
    quad.resize(width,height);
  }
  quad.updateModelBound();
  updateColor();
}","/** 
 * {@inheritDoc}
 */
public void update() throws InstantiationException {
  updateLayout();
  if (quad == null) {
    quad=new TexturedQuad(texture,""String_Node_Str"",width,height);
    quad.setModelBound(new BoundingBox());
  }
 else {
    quad.resize(width,height);
  }
  quad.updateModelBound();
  updateColor();
}"
46380,"public void setParentEntity(Entity parentEntity){
  if (entity == null)   return;
  Entity prevParentEntity=entity.getParent();
  if (prevParentEntity != null) {
    prevParentEntity.removeEntity(entity);
  }
  if (parentEntity != null) {
    parentEntity.addEntity(entity);
  }
}","public void setParentEntity(Entity parentEntity){
  if (entity == null)   return;
  Entity prevParentEntity=entity.getParent();
  if (prevParentEntity != null) {
    prevParentEntity.removeEntity(entity);
    RenderComponent rcEntity=(RenderComponent)entity.getComponent(RenderComponent.class);
    if (rcEntity != null) {
      rcEntity.setAttachPoint(null);
    }
  }
  if (parentEntity != null) {
    parentEntity.addEntity(entity);
    RenderComponent rcParentEntity=(RenderComponent)parentEntity.getComponent(RenderComponent.class);
    RenderComponent rcEntity=(RenderComponent)entity.getComponent(RenderComponent.class);
    ClientContextJME.getWorldManager().addEntity(rcEntity.getEntity());
    if (rcParentEntity != null && rcParentEntity.getSceneRoot() != null && rcEntity != null) {
      rcEntity.setAttachPoint(rcParentEntity.getSceneRoot());
    }
  }
}"
46381,"public void commitEvent(Event event){
  MouseEnterExitEvent3D eeEvent=(MouseEnterExitEvent3D)event;
  StringBuffer sb=new StringBuffer();
  if (name != null) {
    sb.append(name + ""String_Node_Str"");
  }
  String typeStr=eeEvent.getID() == MouseEvent.MOUSE_ENTERED ? ""String_Node_Str"" : ""String_Node_Str"";
  sb.append(""String_Node_Str"" + typeStr + ""String_Node_Str"");
  sb.append(event + ""String_Node_Str"" + event.getEntity());
  logger.info(sb.toString());
}","public void commitEvent(Event event){
  MouseEnterExitEvent3D eeEvent=(MouseEnterExitEvent3D)event;
  StringBuffer sb=new StringBuffer();
  if (name != null) {
    sb.append(name + ""String_Node_Str"");
  }
  String typeStr=eeEvent.getID() == MouseEvent.MOUSE_ENTERED ? ""String_Node_Str"" : ""String_Node_Str"";
  sb.append(typeStr + ""String_Node_Str"" + event.getEntity());
  logger.info(sb.toString());
}"
46382,"/** 
 * Picker for mouse events for the Embedded Swing case. To be called by Embedded Swing toolkit createCoordinateHandler. Returns non-null if window is a WindowSwing. If it is a WindowSwing then return the appropriate hit entity and the corresponding pick info.
 * @param awtEvent The event whose entity and pickInfo need to be picked.
 * @return An object of class PickEventReturn, which contains the returnvalues entity and pickDetails.
 */
public InputManager.PickEventReturn pickMouseEventSwing(MouseEvent awtMouseEvent){
  logger.fine(""String_Node_Str"" + awtMouseEvent);
  destPickInfo=determineDestPickInfo(awtMouseEvent);
  if (destPickInfo == null || destPickInfo.size() <= 0) {
    logger.finest(""String_Node_Str"");
    logger.finest(""String_Node_Str"");
    logger.finest(""String_Node_Str"" + awtMouseEvent);
    swingPickInfos.add(new PickInfoQueueEntry(null,awtMouseEvent));
    return null;
  }
  logger.fine(""String_Node_Str"" + destPickInfo);
  int eventID=awtMouseEvent.getID();
  if (eventID == MouseEvent.MOUSE_MOVED || eventID == MouseEvent.MOUSE_DRAGGED || eventID == MouseEvent.MOUSE_ENTERED || eventID == MouseEvent.MOUSE_EXITED) {
    generateEnterExitEvents(awtMouseEvent,destPickInfo);
  }
  boolean propagatesToUnder=true;
  PickDetails pickDetails=destPickInfo.get(0);
  logger.fine(""String_Node_Str"" + pickDetails);
  MouseEvent3D event=(MouseEvent3D)createWonderlandEvent(awtMouseEvent);
  int idx=0;
  while (pickDetails != null && idx < destPickInfo.size() && propagatesToUnder) {
    Entity entity=pickDetailsToEntity(pickDetails);
    logger.fine(""String_Node_Str"" + entity);
    boolean consumesEvent=false;
    propagatesToUnder=false;
    EventListenerCollection listeners=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
    if (listeners == null) {
      consumesEvent=false;
      propagatesToUnder=false;
    }
 else {
      event.setPickDetails(pickDetails);
      Iterator<EventListener> it=listeners.iterator();
      while (it.hasNext()) {
        EventListener listener=it.next();
        if (listener.isEnabled()) {
          Event distribEvent=EventDistributor.createEventForEntity(event,entity);
          logger.finest(""String_Node_Str"");
          logger.finest(""String_Node_Str"" + listener);
          logger.finest(""String_Node_Str"" + distribEvent);
          consumesEvent|=listener.consumesEvent(distribEvent);
          propagatesToUnder|=listener.propagatesToUnder(distribEvent);
          logger.finest(""String_Node_Str"" + consumesEvent);
        }
      }
    }
    logger.finest(""String_Node_Str"" + isWindowSwingEntity(entity));
    if (consumesEvent && isWindowSwingEntity(entity)) {
      logger.fine(""String_Node_Str"");
      return new InputManager.PickEventReturn(entity,pickDetails);
    }
    if (propagatesToUnder) {
      idx++;
      if (idx < destPickInfo.size()) {
        pickDetails=destPickInfo.get(idx);
      }
 else {
        pickDetails=null;
      }
    }
  }
  logger.finest(""String_Node_Str"");
  logger.finest(""String_Node_Str"" + awtMouseEvent);
  logger.finest(""String_Node_Str"" + destPickInfo);
  swingPickInfos.add(new PickInfoQueueEntry(destPickInfo,awtMouseEvent));
  return null;
}","/** 
 * Picker for mouse events for the Embedded Swing case. To be called by Embedded Swing toolkit createCoordinateHandler. Returns non-null if window is a WindowSwing. If it is a WindowSwing then return the appropriate hit entity and the corresponding pick info.
 * @param awtEvent The event whose entity and pickInfo need to be picked.
 * @return An object of class PickEventReturn, which contains the returnvalues entity and pickDetails.
 */
public InputManager.PickEventReturn pickMouseEventSwing(MouseEvent awtMouseEvent){
  logger.fine(""String_Node_Str"" + awtMouseEvent);
  destPickInfo=determineDestPickInfo(awtMouseEvent);
  int eventID=awtMouseEvent.getID();
  if (eventID == MouseEvent.MOUSE_MOVED || eventID == MouseEvent.MOUSE_DRAGGED || eventID == MouseEvent.MOUSE_ENTERED || eventID == MouseEvent.MOUSE_EXITED) {
    generateEnterExitEvents(awtMouseEvent,destPickInfo);
  }
  if (destPickInfo == null || destPickInfo.size() <= 0) {
    logger.finest(""String_Node_Str"");
    logger.finest(""String_Node_Str"");
    logger.finest(""String_Node_Str"" + awtMouseEvent);
    swingPickInfos.add(new PickInfoQueueEntry(null,awtMouseEvent));
    return null;
  }
  logger.fine(""String_Node_Str"" + destPickInfo);
  boolean propagatesToUnder=true;
  PickDetails pickDetails=destPickInfo.get(0);
  logger.fine(""String_Node_Str"" + pickDetails);
  MouseEvent3D event=(MouseEvent3D)createWonderlandEvent(awtMouseEvent);
  int idx=0;
  while (pickDetails != null && idx < destPickInfo.size() && propagatesToUnder) {
    Entity entity=pickDetailsToEntity(pickDetails);
    logger.fine(""String_Node_Str"" + entity);
    boolean consumesEvent=false;
    propagatesToUnder=false;
    EventListenerCollection listeners=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
    if (listeners == null) {
      consumesEvent=false;
      propagatesToUnder=false;
    }
 else {
      event.setPickDetails(pickDetails);
      Iterator<EventListener> it=listeners.iterator();
      while (it.hasNext()) {
        EventListener listener=it.next();
        if (listener.isEnabled()) {
          Event distribEvent=EventDistributor.createEventForEntity(event,entity);
          logger.finest(""String_Node_Str"");
          logger.finest(""String_Node_Str"" + listener);
          logger.finest(""String_Node_Str"" + distribEvent);
          consumesEvent|=listener.consumesEvent(distribEvent);
          propagatesToUnder|=listener.propagatesToUnder(distribEvent);
          logger.finest(""String_Node_Str"" + consumesEvent);
        }
      }
    }
    logger.finest(""String_Node_Str"" + isWindowSwingEntity(entity));
    if (consumesEvent && isWindowSwingEntity(entity)) {
      logger.fine(""String_Node_Str"");
      return new InputManager.PickEventReturn(entity,pickDetails);
    }
    if (propagatesToUnder) {
      idx++;
      if (idx < destPickInfo.size()) {
        pickDetails=destPickInfo.get(idx);
      }
 else {
        pickDetails=null;
      }
    }
  }
  logger.finest(""String_Node_Str"");
  logger.finest(""String_Node_Str"" + awtMouseEvent);
  logger.finest(""String_Node_Str"" + destPickInfo);
  swingPickInfos.add(new PickInfoQueueEntry(destPickInfo,awtMouseEvent));
  return null;
}"
46383,"/** 
 * Calculate the current set of entities the pointer is inside.
 */
private void calcInsideEntities(MouseEvent awtEvent,MouseEnterExitEvent3D enterEventProto,PickInfo pickInfo){
  insideEntities.clear();
  if (awtEvent.getID() == MouseEvent.MOUSE_EXITED) {
    return;
  }
  boolean propagatesToUnder=true;
  PickDetails pickDetails=pickInfo.get(0);
  int idx=0;
  while (pickDetails != null && idx < destPickInfo.size() && propagatesToUnder) {
    Entity entity=pickDetailsToEntity(pickDetails);
    insideEntities.add(new EntityAndPickDetails(entity,pickDetails));
    propagatesToUnder=false;
    EventListenerCollection listeners=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
    if (listeners == null) {
      propagatesToUnder=false;
    }
 else {
      Iterator<EventListener> it=listeners.iterator();
      while (it.hasNext()) {
        EventListener listener=it.next();
        if (listener.isEnabled()) {
          MouseEnterExitEvent3D distribEvent=(MouseEnterExitEvent3D)EventDistributor.createEventForEntity(enterEventProto,entity);
          distribEvent.setPickDetails(pickDetails);
          distribEvent.setPickInfo(pickInfo);
          propagatesToUnder|=listener.propagatesToUnder(distribEvent);
        }
      }
      if (propagatesToUnder) {
        idx++;
        if (idx < destPickInfo.size()) {
          pickDetails=destPickInfo.get(idx);
        }
 else {
          pickDetails=null;
        }
      }
    }
  }
}","/** 
 * Calculate the current set of entities the pointer is inside.
 */
private void calcInsideEntities(MouseEvent awtEvent,MouseEnterExitEvent3D enterEventProto,PickInfo pickInfo){
  insideEntities.clear();
  if (awtEvent.getID() == MouseEvent.MOUSE_EXITED || pickInfo == null) {
    return;
  }
  boolean propagatesToUnder=true;
  PickDetails pickDetails=pickInfo.get(0);
  int idx=0;
  while (pickDetails != null && idx < destPickInfo.size() && propagatesToUnder) {
    Entity entity=pickDetailsToEntity(pickDetails);
    insideEntities.add(new EntityAndPickDetails(entity,pickDetails));
    propagatesToUnder=false;
    EventListenerCollection listeners=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
    if (listeners == null) {
      propagatesToUnder=false;
    }
 else {
      Iterator<EventListener> it=listeners.iterator();
      while (it.hasNext()) {
        EventListener listener=it.next();
        if (listener.isEnabled()) {
          MouseEnterExitEvent3D distribEvent=(MouseEnterExitEvent3D)EventDistributor.createEventForEntity(enterEventProto,entity);
          distribEvent.setPickDetails(pickDetails);
          distribEvent.setPickInfo(pickInfo);
          propagatesToUnder|=listener.propagatesToUnder(distribEvent);
        }
      }
      if (propagatesToUnder) {
        idx++;
        if (idx < destPickInfo.size()) {
          pickDetails=destPickInfo.get(idx);
        }
 else {
          pickDetails=null;
        }
      }
    }
  }
}"
46384,"/** 
 * Mouse Event picker for non-Swing (3D) events. Finds the first consuming entity and then turns the work over to the event deliverer. This method does not return a result but instead enqueues an entry for the event in the input queue of the event deliverer.
 */
void pickMouseEvent3D(MouseEvent awtEvent){
  logger.fine(""String_Node_Str"" + awtEvent);
  MouseEvent3D event;
  destPickInfo=determineDestPickInfo(awtEvent);
  if (destPickInfo == null || destPickInfo.size() <= 0) {
    logger.finest(""String_Node_Str"");
    event=(MouseEvent3D)createWonderlandEvent(awtEvent);
    eventDistributor.enqueueEvent(event,null);
    return;
  }
  logger.fine(""String_Node_Str"" + destPickInfo);
  int eventID=awtEvent.getID();
  if (eventID == MouseEvent.MOUSE_MOVED || eventID == MouseEvent.MOUSE_DRAGGED || eventID == MouseEvent.MOUSE_ENTERED || eventID == MouseEvent.MOUSE_EXITED) {
    generateEnterExitEvents(awtEvent,destPickInfo);
  }
  event=(MouseEvent3D)createWonderlandEvent(awtEvent);
  eventDistributor.enqueueEvent(event,destPickInfo);
}","/** 
 * Mouse Event picker for non-Swing (3D) events. Finds the first consuming entity and then turns the work over to the event deliverer. This method does not return a result but instead enqueues an entry for the event in the input queue of the event deliverer.
 */
void pickMouseEvent3D(MouseEvent awtEvent){
  logger.fine(""String_Node_Str"" + awtEvent);
  MouseEvent3D event;
  destPickInfo=determineDestPickInfo(awtEvent);
  int eventID=awtEvent.getID();
  if (eventID == MouseEvent.MOUSE_MOVED || eventID == MouseEvent.MOUSE_DRAGGED || eventID == MouseEvent.MOUSE_ENTERED || eventID == MouseEvent.MOUSE_EXITED) {
    generateEnterExitEvents(awtEvent,destPickInfo);
  }
  if (destPickInfo == null || destPickInfo.size() <= 0) {
    logger.finest(""String_Node_Str"");
    event=(MouseEvent3D)createWonderlandEvent(awtEvent);
    eventDistributor.enqueueEvent(event,null);
    return;
  }
  logger.fine(""String_Node_Str"" + destPickInfo);
  event=(MouseEvent3D)createWonderlandEvent(awtEvent);
  eventDistributor.enqueueEvent(event,destPickInfo);
}"
46385,"/** 
 * Generate the appropriate enter/exit events.  NOTE: the pointer can be inside an entity, but if this entity is obscured by an entity with event listeners that don't propagate to under then the obscured entity is effectively exitted. This is an example of an ""event shadow.""
 */
private void generateEnterExitEvents(MouseEvent awtEvent,PickInfo pickInfo){
  MouseEnterExitEvent3D enterEventProto=createEnterExitEventFromAwtEvent(awtEvent,MouseEvent.MOUSE_ENTERED);
  MouseEnterExitEvent3D exitEventProto=createEnterExitEventFromAwtEvent(awtEvent,MouseEvent.MOUSE_EXITED);
  calcInsideEntities(awtEvent,enterEventProto,pickInfo);
  noLongerInsideEntities.clear();
  for (  EntityAndPickDetails entry : insideEntitiesPrev) {
    if (!insideEntities.contains(entry.entity)) {
      noLongerInsideEntities.add(entry);
    }
  }
  newlyInsideEntities.clear();
  for (  EntityAndPickDetails entry : insideEntitiesPrev) {
    if (!insideEntitiesPrev.contains(entry.entity)) {
      newlyInsideEntities.add(entry);
    }
  }
  sendExitEvents(exitEventProto,pickInfo);
  sendEnterEvents(enterEventProto,pickInfo);
  insideEntitiesPrev.clear();
  insideEntitiesPrev.addAll(insideEntities);
}","/** 
 * Generate the appropriate enter/exit events.  NOTE: the pointer can be inside an entity, but if this entity is obscured by an entity with event listeners that don't propagate to under then the obscured entity is effectively exitted. This is an example of an ""event shadow.""
 */
private void generateEnterExitEvents(MouseEvent awtEvent,PickInfo pickInfo){
  MouseEnterExitEvent3D enterEventProto=createEnterExitEventFromAwtEvent(awtEvent,MouseEvent.MOUSE_ENTERED);
  MouseEnterExitEvent3D exitEventProto=createEnterExitEventFromAwtEvent(awtEvent,MouseEvent.MOUSE_EXITED);
  calcInsideEntities(awtEvent,enterEventProto,pickInfo);
  noLongerInsideEntities.clear();
  for (  EntityAndPickDetails entry : insideEntitiesPrev) {
    boolean found=false;
    for (    EntityAndPickDetails entryInside : insideEntities) {
      if (entry.entity.equals(entryInside.entity)) {
        found=true;
        break;
      }
    }
    if (!found) {
      noLongerInsideEntities.add(entry);
    }
  }
  newlyInsideEntities.clear();
  for (  EntityAndPickDetails entry : insideEntities) {
    boolean found=false;
    for (    EntityAndPickDetails entryInsidePrev : insideEntitiesPrev) {
      if (entry.entity.equals(entryInsidePrev.entity)) {
        found=true;
        break;
      }
    }
    if (!found) {
      newlyInsideEntities.add(entry);
    }
  }
  sendExitEvents(exitEventProto,pickInfo);
  sendEnterEvents(enterEventProto,pickInfo);
  insideEntitiesPrev.clear();
  insideEntitiesPrev.addAll(insideEntities);
}"
46386,"/** 
 * Notify any registered status listeners of a status change
 * @param session the session that changed
 * @param status the new status
 */
protected void fireClientStatusChanged(WonderlandSession.Status status){
  for (  SessionStatusListener listener : sessionStatusListeners) {
    listener.sessionStatusChanged(this,status);
  }
}","/** 
 * Notify any registered status listeners of a status change
 * @param session the session that changed
 * @param status the new status
 */
protected void fireClientStatusChanged(final WonderlandSession.Status status){
  notifier.submit(new Runnable(){
    public void run(){
      for (      SessionStatusListener listener : sessionStatusListeners) {
        listener.sessionStatusChanged(WonderlandSessionImpl.this,status);
      }
    }
  }
);
}"
46387,"/** 
 * Create a new client to log in to the given server.  Use the provided classloader to resolve the class of any messages that are received.
 * @param server the server to connect to
 * @param classloader the classloader to resolve messages with,or null to use the system classloader.
 */
public WonderlandSessionImpl(WonderlandServerInfo server,ClassLoader classLoader){
  this.server=server;
  this.classLoader=classLoader;
  status=Status.DISCONNECTED;
  sessionStatusListeners=new CopyOnWriteArrayList<SessionStatusListener>();
  clients=Collections.synchronizedMap(new HashMap<ConnectionType,ClientRecord>());
  clientsByID=Collections.synchronizedMap(new HashMap<Short,ClientRecord>());
  SessionInternalHandler internal=new SessionInternalHandler(this);
  ClientRecord internalRecord=addClientRecord(internal);
  setClientID(internalRecord,SessionInternalConnectionType.SESSION_INTERNAL_CLIENT_ID);
  internal.connected(this);
}","/** 
 * Create a new client to log in to the given server.  Use the provided classloader to resolve the class of any messages that are received.
 * @param server the server to connect to
 * @param classloader the classloader to resolve messages with,or null to use the system classloader.
 */
public WonderlandSessionImpl(WonderlandServerInfo server,ClassLoader classLoader){
  this.server=server;
  this.classLoader=classLoader;
  status=Status.DISCONNECTED;
  sessionStatusListeners=new CopyOnWriteArrayList<SessionStatusListener>();
  notifier=Executors.newSingleThreadExecutor();
  clients=Collections.synchronizedMap(new HashMap<ConnectionType,ClientRecord>());
  clientsByID=Collections.synchronizedMap(new HashMap<Short,ClientRecord>());
  SessionInternalHandler internal=new SessionInternalHandler(this);
  ClientRecord internalRecord=addClientRecord(internal);
  setClientID(internalRecord,SessionInternalConnectionType.SESSION_INTERNAL_CLIENT_ID);
  internal.connected(this);
}"
46388,"/** 
 * Fire when a message is received over the session channel
 * @param data the message that was received
 */
protected void fireSessionMessageReceived(ByteBuffer data){
  Message message;
  short clientID;
  try {
    ReceivedMessage recv=MessagePacker.unpack(data,getClassLoader());
    message=recv.getMessage();
    clientID=recv.getClientID();
  }
 catch (  PackerException eme) {
    logger.log(Level.WARNING,""String_Node_Str"",eme);
    if (eme.getMessageID() != null) {
      message=new ErrorMessage(eme.getMessageID(),eme.getMessage(),eme.getCause());
      clientID=eme.getClientID();
    }
 else {
      return;
    }
  }
catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    return;
  }
  ClientRecord record=getClientRecord(clientID);
  if (record == null) {
    throw new IllegalStateException(""String_Node_Str"" + message + ""String_Node_Str""+ clientID);
  }
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(getName() + ""String_Node_Str"" + record.getClient().getConnectionType()+ ""String_Node_Str""+ message.getClass().getName());
  }
  record.handleMessage(message);
}","/** 
 * Fire when a message is received over the session channel
 * @param data the message that was received
 */
protected void fireSessionMessageReceived(ByteBuffer data){
  Message message;
  short clientID;
  try {
    ReceivedMessage recv=MessagePacker.unpack(data,getClassLoader());
    message=recv.getMessage();
    clientID=recv.getClientID();
  }
 catch (  PackerException eme) {
    logger.log(Level.WARNING,""String_Node_Str"",eme);
    if (eme.getMessageID() != null) {
      message=new ErrorMessage(eme.getMessageID(),eme.getMessage(),eme.getCause());
      clientID=eme.getClientID();
    }
 else {
      return;
    }
  }
catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    return;
  }
  ClientRecord record=getClientRecord(clientID);
  if (record == null) {
    throw new IllegalStateException(""String_Node_Str"" + message + ""String_Node_Str""+ clientID);
  }
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(getName() + ""String_Node_Str"" + ""String_Node_Str""+ record.getClient().getConnectionType()+ ""String_Node_Str""+ message.getClass().getName());
  }
  record.handleMessage(message);
}"
46389,"public void viewConfigured(LocalAvatar localAvatar){
  logger.warning(""String_Node_Str"");
  cellID=localAvatar.getViewCell().getCellID();
  if (!connected) {
    logger.warning(""String_Node_Str"");
    return;
  }
  connectSoftphone();
}","public void viewConfigured(LocalAvatar localAvatar){
  logger.warning(""String_Node_Str"");
  cellID=localAvatar.getViewCell().getCellID();
  connectSoftphone();
}"
46390,"public AudioManagerClient(WonderlandSession session) throws ConnectionFailureException {
  this.session=session;
  session.addSessionStatusListener(this);
  ((CellClientSession)session).getLocalAvatar().addViewCellConfiguredListener(this);
  SoftphoneControlImpl.getInstance().addSoftphoneListener(this);
  logger.warning(""String_Node_Str"");
  new Connector(this);
}","/** 
 * Create a new AudioManagerClient
 * @param session the session to connect to, guaranteed to be inthe CONNECTED state
 * @throws org.jdesktop.wonderland.client.comms.ConnectionFailureException
 */
public AudioManagerClient(WonderlandSession session) throws ConnectionFailureException {
  this.session=session;
  session.connect(this);
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.addViewCellConfiguredListener(this);
  if (avatar.getViewCell() != null) {
    viewConfigured(avatar);
  }
  SoftphoneControlImpl.getInstance().addSoftphoneListener(this);
  JmeClientMain.getFrame().addAudioMenuListener(this);
  logger.warning(""String_Node_Str"");
}"
46391,"public void initialize(WonderlandSession session){
  session.addSessionStatusListener(this);
  logger.warning(""String_Node_Str"" + session);
}","public void initialize(WonderlandSession session){
  logger.warning(""String_Node_Str"" + session);
  session.addSessionStatusListener(this);
  if (session.getStatus() == WonderlandSession.Status.CONNECTED) {
    connectClient(session);
  }
}"
46392,"public void sessionStatusChanged(WonderlandSession session,WonderlandSession.Status status){
  logger.warning(""String_Node_Str"" + session + ""String_Node_Str""+ status);
  if (status.equals(WonderlandSession.Status.CONNECTED)) {
    try {
      new AudioManagerClient(session);
    }
 catch (    ConnectionFailureException e) {
      logger.warning(e.getMessage());
    }
  }
}","public void sessionStatusChanged(WonderlandSession session,WonderlandSession.Status status){
  logger.warning(""String_Node_Str"" + session + ""String_Node_Str""+ status);
  if (status.equals(WonderlandSession.Status.CONNECTED)) {
    connectClient(session);
  }
 else   if (status.equals(WonderlandSession.Status.DISCONNECTED)) {
    disconnectClient();
  }
}"
46393,"/** 
 * Create a new instance of AppCellRendererJME.
 * @param cell The cell to be rendered.
 */
public AppCellRendererJME(AppCell cell){
  super(cell);
}","/** 
 * Create a new instance of AppCellRendererJME.
 * @param cell The cell to be rendered.
 */
public AppCellRendererJME(AppCell cell){
  super(cell);
  rootNode=new Node();
  rootNode.setName(""String_Node_Str"" + cell.getCellID().toString());
  initZBufferState();
  initLightState();
  rootNode.setRenderState(zBufferState);
  rootNode.setRenderState(lightState);
}"
46394,"/** 
 * {@inheritDoc}
 */
@Override protected Node createSceneGraph(Entity entity){
  Node ret=new Node();
  ret.setName(""String_Node_Str"" + cell.getCellID().toString());
  applyTransform(ret,cell.getLocalTransform());
  return ret;
}","/** 
 * {@inheritDoc}
 */
@Override protected Node createSceneGraph(Entity entity){
  applyTransform(rootNode,cell.getLocalTransform());
  return rootNode;
}"
46395,"/** 
 * {@inheritDoc}
 */
@Override public void attachView(WindowView view){
  ViewWorldDefault viewWorld=(ViewWorldDefault)view;
  rootNode.attachChild(viewWorld.getBaseNode());
}","/** 
 * {@inheritDoc}
 */
@Override public void attachView(WindowView view){
  ViewWorldDefault viewWorld=(ViewWorldDefault)view;
  rootNode.attachChild(viewWorld.getBaseNode());
  FrameWorldDefault frame=viewWorld.getFrame();
  rootNode.attachChild(frame.getBaseNode());
}"
46396,"/** 
 * {@inheritDoc}
 */
@Override public void detachView(WindowView view){
  ViewWorldDefault viewWorld=(ViewWorldDefault)view;
  rootNode.detachChild(viewWorld.getBaseNode());
}","/** 
 * {@inheritDoc}
 */
@Override public void detachView(WindowView view){
  ViewWorldDefault viewWorld=(ViewWorldDefault)view;
  rootNode.detachChild(viewWorld.getBaseNode());
  FrameWorldDefault frame=viewWorld.getFrame();
  rootNode.detachChild(frame.getBaseNode());
}"
46397,"/** 
 * Create a new instance of FrameHeader.
 * @param view The view the frame encloses.
 * @param closeListeners The listeners to be notified when the header's close button is pressed.
 */
public FrameHeader(Window2DView view,LinkedList<Window2DFrame.CloseListener> closeListeners){
  super(""String_Node_Str"",view,Side.TOP,null);
  closeButton=new FrameCloseButton(view,closeListeners);
  attachChild(closeButton);
  title=new FrameLabelTitle(view,gui);
  attachChild(title);
  controller=new FrameLabelController(view,gui,closeButton);
  attachChild(controller);
}","/** 
 * Create a new instance of FrameHeader.
 * @param view The view the frame encloses.
 * @param closeListeners The listeners to be notified when the header's close button is pressed.
 */
public FrameHeader(Window2DView view,LinkedList<Window2DFrame.CloseListener> closeListeners){
  super(""String_Node_Str"",view,Side.TOP,null);
  title=new FrameLabelTitle(view,gui);
  attachChild(title);
  controller=new FrameLabelController(view,gui,closeButton);
  attachChild(controller);
}"
46398,"/** 
 * Disconnect the frame components from the frame's window view.
 */
void disconnect(){
  if (view == null)   return;
  if (header != null) {
    frameNode.detachChild(header);
  }
  if (leftSide != null) {
    frameNode.detachChild(leftSide);
  }
  if (rightSide != null) {
    frameNode.detachChild(rightSide);
  }
  if (bottomSide != null) {
    frameNode.detachChild(bottomSide);
  }
  if (resizeCorner != null) {
    frameNode.detachChild(resizeCorner);
  }
  AppCell cell=getCell();
  if (cell != null && connectedToCell) {
  }
}","/** 
 * Disconnect the frame components from the frame's window view.
 */
void disconnect(){
  if (view == null)   return;
  if (header != null) {
    frameNode.detachChild(header);
  }
  if (leftSide != null) {
    frameNode.detachChild(leftSide);
  }
  if (rightSide != null) {
    frameNode.detachChild(rightSide);
  }
  if (bottomSide != null) {
    frameNode.detachChild(bottomSide);
  }
  if (resizeCorner != null) {
    frameNode.detachChild(resizeCorner);
  }
}"
46399,"/** 
 * Create a new instance of FrameWorldDefault.
 * @param view The view the frame encloses.
 */
public FrameWorldDefault(WindowView frameView){
  super((Window2DView)frameView);
  header=new FrameHeader(view,closeListeners);
  leftSide=new FrameSide(view,FrameSide.Side.LEFT,null);
  rightSide=new FrameSide(view,FrameSide.Side.RIGHT,null);
  bottomSide=new FrameSide(view,FrameSide.Side.BOTTOM,null);
  resizeCorner=new FrameResizeCorner(view,rightSide,bottomSide);
  frameNode=new Node(""String_Node_Str"");
  frameNode.attachChild(header);
  updateVisibility();
}","/** 
 * Create a new instance of FrameWorldDefault.
 * @param view The view the frame encloses.
 */
public FrameWorldDefault(WindowView frameView){
  super((Window2DView)frameView);
  header=new FrameHeader(view,closeListeners);
  leftSide=new FrameSide(view,FrameSide.Side.LEFT,null);
  rightSide=new FrameSide(view,FrameSide.Side.RIGHT,null);
  bottomSide=new FrameSide(view,FrameSide.Side.BOTTOM,null);
  resizeCorner=new FrameResizeCorner(view,rightSide,bottomSide);
  frameNode=new Node(""String_Node_Str"");
  frameNode.attachChild(header);
  frameNode.attachChild(leftSide);
  frameNode.attachChild(rightSide);
  frameNode.attachChild(bottomSide);
  frameNode.attachChild(resizeCorner);
  updateVisibility();
}"
46400,"/** 
 * Make sure that the frame is visible when it needs to be. It should be visible when the view is visible.
 */
private void updateVisibility(){
  AppCell cell=getCell();
  ((ViewWorldDefault)view).updateVisibility();
  boolean viewIsVisible=((ViewWorldDefault)view).getActuallyVisible();
  if (viewIsVisible && !connectedToCell) {
    if (cell == null) {
      logger.warning(""String_Node_Str"");
    }
 else {
      connectedToCell=true;
    }
  }
 else {
    if (cell != null) {
    }
    connectedToCell=false;
  }
  updateControl(controlArb);
}","/** 
 * Make sure that the frame is visible when it needs to be. It should be visible when the view is visible.
 */
private void updateVisibility(){
  AppCell cell=getCell();
  ((ViewWorldDefault)view).updateVisibility();
  boolean viewIsVisible=((ViewWorldDefault)view).getActuallyVisible();
  updateControl(controlArb);
}"
46401,"/** 
 * Initialize the whiteboard with parameters from the server.
 * @param configData the config data to initialize the cell with
 */
public void configure(CellConfig configData){
  System.err.println(""String_Node_Str"");
  config=(WhiteboardCellConfig)configData;
  setApp(new WhiteboardApp(getAppType(),config.getPreferredWidth(),config.getPreferredHeight(),config.getPixelScale(),commComponent));
  app.setCell(this);
  whiteboardWin=((WhiteboardApp)app).getWindow();
  ((WhiteboardApp)app).setVisible(true);
}","/** 
 * Initialize the whiteboard with parameters from the server.
 * @param configData the config data to initialize the cell with
 */
public void configure(CellConfig configData){
  config=(WhiteboardCellConfig)configData;
  setApp(new WhiteboardApp(getAppType(),config.getPreferredWidth(),config.getPreferredHeight(),config.getPixelScale(),commComponent));
  app.setCell(this);
  whiteboardWin=((WhiteboardApp)app).getWindow();
  ((WhiteboardApp)app).setVisible(true);
}"
46402,"public void erase(){
  Graphics2D g=getGraphics();
  setClip(g,true);
  g.setBackground(Color.WHITE);
  g.clearRect(0,0,getWidth(),getHeight());
  setClip(g,false);
}","public void erase(){
  Graphics2D g=getGraphics();
  setClip(g,true);
  g.setColor(Color.WHITE);
  g.fillRect(0,0,getWidth(),getHeight());
  setClip(g,false);
}"
46403,"protected void initSurface(Graphics2D g){
  for (  Button b : buttons) {
    b.paint(g);
  }
}","protected void initSurface(Graphics2D g){
  erase();
  for (  Button b : buttons) {
    b.paint(g);
  }
}"
46404,"/** 
 * Create a new instance of WhiteboardWindow.
 * @param app The whiteboard app which owns the window.
 * @param width The width of the window (in pixels).
 * @param height The height of the window (in pixels).
 * @param topLevel Whether the window is top-level (e.g. is decorated) with a frame.
 * @param pixelScale The size of the window pixels.
 * @param commComponent The communications component for communicating with the server.
 */
public WhiteboardWindow(final App app,int width,int height,boolean topLevel,Vector2f pixelScale,final WhiteboardComponent commComponent) throws InstantiationException {
  super(app,width,height,topLevel,pixelScale,new WhiteboardDrawingSurface(width,height));
  setTitle(""String_Node_Str"");
  wbSurface=(WhiteboardDrawingSurface)getSurface();
  addMouseMotionListener(new MouseMotionListener(){
    public void mouseDragged(    MouseEvent e){
      dragTo(e.getPoint());
      WhiteboardCellMessage msg=new WhiteboardCellMessage(getClientID(app),app.getCell().getCellID(),WhiteboardAction.DRAG_TO,e.getPoint());
      commComponent.sendMessage(msg);
    }
    public void mouseMoved(    MouseEvent e){
      moveTo(e.getPoint());
      WhiteboardCellMessage msg=new WhiteboardCellMessage(getClientID(app),app.getCell().getCellID(),WhiteboardAction.MOVE_TO,e.getPoint());
      commComponent.sendMessage(msg);
    }
  }
);
  addMouseListener(new MouseListener(){
    public void mouseClicked(    MouseEvent e){
      selectPen(e.getPoint());
      WhiteboardCellMessage msg=null;
switch (wbSurface.getActionType()) {
case COLOR:
        logger.info(""String_Node_Str"" + wbSurface.getPenColor());
      msg=new WhiteboardCellMessage(getClientID(app),app.getCell().getCellID(),WhiteboardAction.SET_COLOR,wbSurface.getPenColor());
    break;
case TOOL:
  logger.info(""String_Node_Str"" + wbSurface.getTool());
msg=new WhiteboardCellMessage(getClientID(app),app.getCell().getCellID(),WhiteboardAction.SET_TOOL,wbSurface.getTool());
break;
case COMMAND:
logger.info(""String_Node_Str"" + wbSurface.getCommand());
msg=new WhiteboardCellMessage(getClientID(app),app.getCell().getCellID(),WhiteboardAction.EXECUTE_COMMAND,wbSurface.getCommand());
break;
}
if (msg != null) {
commComponent.sendMessage(msg);
}
}
public void mousePressed(MouseEvent e){
}
public void mouseReleased(MouseEvent e){
}
public void mouseEntered(MouseEvent e){
}
public void mouseExited(MouseEvent e){
}
}
);
}","/** 
 * Create a new instance of WhiteboardWindow.
 * @param app The whiteboard app which owns the window.
 * @param width The width of the window (in pixels).
 * @param height The height of the window (in pixels).
 * @param topLevel Whether the window is top-level (e.g. is decorated) with a frame.
 * @param pixelScale The size of the window pixels.
 * @param commComponent The communications component for communicating with the server.
 */
public WhiteboardWindow(final App app,int width,int height,boolean topLevel,Vector2f pixelScale,final WhiteboardComponent commComponent) throws InstantiationException {
  super(app,width,height,topLevel,pixelScale,new WhiteboardDrawingSurface(width,height));
  initializeSurface();
  setTitle(""String_Node_Str"");
  wbSurface=(WhiteboardDrawingSurface)getSurface();
  addMouseMotionListener(new MouseMotionListener(){
    public void mouseDragged(    MouseEvent e){
      dragTo(e.getPoint());
      WhiteboardCellMessage msg=new WhiteboardCellMessage(getClientID(app),app.getCell().getCellID(),WhiteboardAction.DRAG_TO,e.getPoint());
      commComponent.sendMessage(msg);
    }
    public void mouseMoved(    MouseEvent e){
      moveTo(e.getPoint());
      WhiteboardCellMessage msg=new WhiteboardCellMessage(getClientID(app),app.getCell().getCellID(),WhiteboardAction.MOVE_TO,e.getPoint());
      commComponent.sendMessage(msg);
    }
  }
);
  addMouseListener(new MouseListener(){
    public void mouseClicked(    MouseEvent e){
      selectPen(e.getPoint());
      WhiteboardCellMessage msg=null;
switch (wbSurface.getActionType()) {
case COLOR:
        logger.info(""String_Node_Str"" + wbSurface.getPenColor());
      msg=new WhiteboardCellMessage(getClientID(app),app.getCell().getCellID(),WhiteboardAction.SET_COLOR,wbSurface.getPenColor());
    break;
case TOOL:
  logger.info(""String_Node_Str"" + wbSurface.getTool());
msg=new WhiteboardCellMessage(getClientID(app),app.getCell().getCellID(),WhiteboardAction.SET_TOOL,wbSurface.getTool());
break;
case COMMAND:
logger.info(""String_Node_Str"" + wbSurface.getCommand());
msg=new WhiteboardCellMessage(getClientID(app),app.getCell().getCellID(),WhiteboardAction.EXECUTE_COMMAND,wbSurface.getCommand());
break;
}
if (msg != null) {
commComponent.sendMessage(msg);
}
}
public void mousePressed(MouseEvent e){
}
public void mouseReleased(MouseEvent e){
}
public void mouseEntered(MouseEvent e){
}
public void mouseExited(MouseEvent e){
}
}
);
}"
46405,"/** 
 * Add a window to this app. It is added on top of the app's window stack.
 * @param window The window to add.
 */
public void windowAdd(Window2D window){
  super.windowAdd(window);
  stack.add(window);
}","/** 
 * / Add a window to this app. It is added on top of the app's window stack.
 * @param window The window to add.
 */
public void windowAdd(Window2D window){
  super.windowAdd(window);
  stack.add(window);
}"
46406,"/** 
 * Resize the surface. 
 * @param width The new width of the surface in pixels.
 * @param height The new height of the surface in pixels.
 */
public void setSize(int width,int height){
  imageGraphics=ImageGraphics.createInstance(width,height,0);
  surfaceWidth=width;
  surfaceHeight=height;
  imageGraphics.setBackground(Color.WHITE);
  imageGraphics.setColor(Color.WHITE);
  imageGraphics.fillRect(0,0,width,height);
  initSurface(imageGraphics);
}","/** 
 * Resize the surface. 
 * @param width The new width of the surface in pixels.
 * @param height The new height of the surface in pixels.
 */
public synchronized void setSize(int width,int height){
  imageGraphics=ImageGraphics.createInstance(width,height,0);
  surfaceWidth=width;
  surfaceHeight=height;
  imageGraphics.setBackground(Color.WHITE);
  imageGraphics.setColor(Color.WHITE);
  imageGraphics.fillRect(0,0,width,height);
  updateUpdating();
}"
46407,"/** 
 * Create an instance of DrawingSurface.
 * @param width The width of the surface in pixels.
 * @param height The height of the surface in pixels.
 */
public DrawingSurface(int width,int height){
  setSize(width,height);
}","/** 
 * Create an instance of DrawingSurface.
 * @param width The width of the surface in pixels.
 * @param height The height of the surface in pixels.
 */
public DrawingSurface(int width,int height){
  this();
  setSize(width,height);
}"
46408,"/** 
 * Create a Window2D instance. Initially the window is not visible.
 * @param app The application to which this window belongs
 */
public Window(App app){
  this.app=app;
  guiFactory=app.getAppType().getGuiFactory();
  app.windowAdd(this);
}","/** 
 * Create a Window instance. Initially the window is not visible.
 * @param app The application to which this window belongs
 */
public Window(App app){
  this.app=app;
  guiFactory=app.getAppType().getGuiFactory();
  app.windowAdd(this);
}"
46409,"public JmeClientMain(String[] args){
  props=loadProperties(""String_Node_Str"");
  String serverName=props.getProperty(SERVER_NAME_PROP,SERVER_NAME_DEFAULT);
  String serverPort=props.getProperty(SERVER_PORT_PROP,SERVER_PORT_DEFAULT);
  String userName=props.getProperty(USER_NAME_PROP,USER_NAME_DEFAULT);
  ClientManager clientManager=new ClientManager(serverName,Integer.parseInt(serverPort),userName);
  processArgs(args);
  WorldManager worldManager=ClientContextJME.getWorldManager();
  worldManager.getRenderManager().setDesiredFrameRate(desiredFrameRate);
  createUI(worldManager);
}","public JmeClientMain(String[] args){
  props=loadProperties(""String_Node_Str"");
  String serverName=props.getProperty(SERVER_NAME_PROP,SERVER_NAME_DEFAULT);
  String serverPort=props.getProperty(SERVER_PORT_PROP,SERVER_PORT_DEFAULT);
  String userName=props.getProperty(USER_NAME_PROP,USER_NAME_DEFAULT);
  processArgs(args);
  WorldManager worldManager=ClientContextJME.getWorldManager();
  worldManager.getRenderManager().setDesiredFrameRate(desiredFrameRate);
  createUI(worldManager);
  ClientManager clientManager=new ClientManager(serverName,Integer.parseInt(serverPort),userName);
}"
46410,"/** 
 * {@inheritDoc}<br> If event is null, a new event of this class is created and returned.
 */
@Override public Event clone(Event event){
  if (event == null) {
    event=new MouseMovedEvent3D();
  }
  return super.clone(event);
}","/** 
 * {@inheritDoc}<br> If event is null, a new event of this class is created and returned.
 */
@Override public Event clone(Event event){
  if (event == null) {
    event=new MouseWheelEvent3D();
  }
  return super.clone(event);
}"
46411,"/** 
 * INTERNAL ONLY.
 */
@InternalAPI public boolean consumesEvent(Event event){
  Class<Event>[] eventClasses=eventClassesToConsume();
  if (eventClasses == null)   return false;
  for (  Class eventClass : eventClasses) {
    if (!Event.class.isAssignableFrom(eventClass)) {
      logger.warning(""String_Node_Str"");
      logger.warning(""String_Node_Str"");
      return false;
    }
    if (event.getClass().isAssignableFrom(eventClass)) {
      return true;
    }
  }
  return false;
}","/** 
 * INTERNAL ONLY.
 */
@InternalAPI public boolean consumesEvent(Event event){
  Class<Event>[] eventClasses=eventClassesToConsume();
  if (eventClasses == null)   return false;
  for (  Class eventClass : eventClasses) {
    if (!Event.class.isAssignableFrom(eventClass)) {
      logger.warning(""String_Node_Str"");
      logger.warning(""String_Node_Str"");
      return false;
    }
    if (eventClass.isAssignableFrom(event.getClass())) {
      return true;
    }
  }
  return false;
}"
46412,"/** 
 * Returns true if the given entity is marked as having focus. Called at Event Distribution time. Therefore this is based on the information on the entity itself, not the focus sets, which are in a different time domain.
 * @param event The event to be delivered.
 * @param entity The entity to check if it is in the focus set.
 */
private static boolean entityHasFocus(Event event,Entity entity){
  EventFocusComponent focusComp=(EventFocusComponent)entity.getComponent(EventFocusComponent.class);
  if (focusComp == null)   return false;
  return focusComp.contains(event.getClass());
}","/** 
 * Returns true if the given entity is marked as having focus. Called at Event Distribution time. Therefore this is based on the information on the entity itself, not the focus sets, which are in a different time domain.
 * @param event The event to be delivered.
 * @param entity The entity to check if it is in the focus set.
 */
private static boolean entityHasFocus(Event event,Entity entity){
  EventFocusComponent focusComp=(EventFocusComponent)entity.getComponent(EventFocusComponent.class);
  if (focusComp == null)   return false;
  return focusComp.containsClassOrSuperclass(event.getClass());
}"
46413,"/** 
 * INTERNAL ONLY. <br> Called when there is new event in the input queue.
 */
@InternalAPI public void compute(ProcessorArmingCollection collection){
  Event event=null;
  if (computedEvents != null) {
    computedEvents.clear();
  }
  try {
    while (inputQueue.peek() != null) {
      event=inputQueue.take();
      if (event == null) {
        logger.warning(""String_Node_Str"");
        return;
      }
      computeEvent(event);
      if (computedEvents == null) {
        computedEvents=new LinkedList<Event>();
      }
synchronized (computedEvents) {
        computedEvents.add(event);
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    logger.warning(""String_Node_Str"");
  }
}","/** 
 * INTERNAL ONLY. <br> Called when there is new event in the input queue.
 */
@InternalAPI public void compute(ProcessorArmingCollection collection){
  Event event=null;
synchronized (computedEvents) {
    computedEvents.clear();
  }
  try {
    while (inputQueue.peek() != null) {
      event=inputQueue.take();
      if (event == null) {
        logger.warning(""String_Node_Str"");
        return;
      }
      computeEvent(event);
synchronized (computedEvents) {
        computedEvents.add(event);
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    logger.warning(""String_Node_Str"");
  }
}"
46414,"/** 
 * Create all of the Swing windows - and the 3D window
 */
private void createUI(WorldManager wm){
  MainFrame frame=new MainFrame(wm,width,height);
  frame.setLocationRelativeTo(null);
  frame.setVisible(true);
  CameraComponent cameraComp=ViewManager.getViewManager().getCameraComponent();
  InputManager inputManager=InputManager3D.getInputManager();
  inputManager.initialize(wm,frame.getCanvas(),cameraComp);
  inputManager.addKeyMouseFocus(inputManager.getGlobalFocusEntity());
  InputManager3D.getInputManager().addGlobalEventListener(new EventClassFocusListener(){
    private final Logger logger=Logger.getLogger(""String_Node_Str"");
    public Class[] eventClassesToConsume(){
      return new Class[]{KeyEvent3D.class};
    }
    public void commitEvent(    Event event){
      if (((KeyEvent3D)event).isPressed()) {
        logger.fine(""String_Node_Str"" + event);
      }
    }
  }
);
}","/** 
 * Create all of the Swing windows - and the 3D window
 */
private void createUI(WorldManager wm){
  MainFrame frame=new MainFrame(wm,width,height);
  frame.setLocationRelativeTo(null);
  frame.setVisible(true);
  CameraComponent cameraComp=ViewManager.getViewManager().getCameraComponent();
  InputManager inputManager=InputManager3D.getInputManager();
  inputManager.initialize(wm,frame.getCanvas(),cameraComp);
  inputManager.addKeyMouseFocus(inputManager.getGlobalFocusEntity());
  InputManager3D.getInputManager().addGlobalEventListener(new EventClassFocusListener(){
    private final Logger logger=Logger.getLogger(""String_Node_Str"");
    public Class[] eventClassesToConsume(){
      return new Class[]{KeyEvent3D.class,MouseEvent3D.class};
    }
    public void commitEvent(    Event event){
      if (event instanceof KeyEvent3D) {
        if (((KeyEvent3D)event).isPressed()) {
          logger.fine(""String_Node_Str"" + event);
        }
      }
 else {
        logger.fine(""String_Node_Str"" + event);
      }
    }
  }
);
}"
46415,"public void commitEvent(Event event){
  if (((KeyEvent3D)event).isPressed()) {
    logger.fine(""String_Node_Str"" + event);
  }
}","public void commitEvent(Event event){
  if (event instanceof KeyEvent3D) {
    if (((KeyEvent3D)event).isPressed()) {
      logger.fine(""String_Node_Str"" + event);
    }
  }
 else {
    logger.fine(""String_Node_Str"" + event);
  }
}"
46416,"public Class[] eventClassesToConsume(){
  return new Class[]{KeyEvent3D.class};
}","public Class[] eventClassesToConsume(){
  return new Class[]{KeyEvent3D.class,MouseEvent3D.class};
}"
46417,"protected Entity createEntity(){
  Entity ret=new Entity(this.getClass().getName() + ""String_Node_Str"" + cell.getCellID());
  rootNode=createSceneGraph(ret);
  if (cell.getComponent(MovableComponent.class) != null) {
    moveProcessor=new MoveProcessor(ClientContextJME.getWorldManager(),rootNode);
    ret.addComponent(ProcessorComponent.class,moveProcessor);
  }
  RenderComponent rc=ClientContextJME.getWorldManager().getRenderManager().createRenderComponent(rootNode);
  ret.addComponent(RenderComponent.class,rc);
  JMECollisionSystem collisionSystem=(JMECollisionSystem)ClientContextJME.getWorldManager().getCollisionManager().loadCollisionSystem(JMECollisionSystem.class);
  JMECollisionComponent cc=collisionSystem.createCollisionComponent(rootNode);
  ret.addComponent(JMECollisionComponent.class,cc);
  return ret;
}","protected Entity createEntity(){
  Entity ret=new Entity(this.getClass().getName() + ""String_Node_Str"" + cell.getCellID());
  rootNode=createSceneGraph(ret);
  if (cell.getComponent(MovableComponent.class) != null) {
    moveProcessor=new MoveProcessor(ClientContextJME.getWorldManager(),rootNode);
    ret.addComponent(ProcessorComponent.class,moveProcessor);
  }
  RenderComponent rc=ClientContextJME.getWorldManager().getRenderManager().createRenderComponent(rootNode);
  ret.addComponent(RenderComponent.class,rc);
  JMECollisionSystem collisionSystem=(JMECollisionSystem)ClientContextJME.getWorldManager().getCollisionManager().loadCollisionSystem(JMECollisionSystem.class);
  CollisionComponent cc=collisionSystem.createCollisionComponent(rootNode);
  ret.addComponent(CollisionComponent.class,cc);
  return ret;
}"
46418,"/** 
 * Mouse Event picker for non-Embedded Swing case. Finds the first consuming entity and then turns the work over to the event deliverer. This method does not return a result but instead enqueues an entry for the event in the input queue of the event deliverer.
 */
void pickMouseEventNonSwing(MouseEvent awtEvent){
  logger.fine(""String_Node_Str"" + awtEvent);
  destPickInfo=determineDestPickInfo(awtEvent);
  if (destPickInfo == null || destPickInfo.size() <= 0) {
    logger.finest(""String_Node_Str"");
    return;
  }
  logger.fine(""String_Node_Str"" + destPickInfo);
  int eventID=awtEvent.getID();
  if (eventID == MouseEvent.MOUSE_MOVED || eventID == MouseEvent.MOUSE_DRAGGED) {
    generateEnterExitEvents(awtEvent,destPickInfo);
  }
  MouseEvent3D event=(MouseEvent3D)createWonderlandEvent(awtEvent);
  eventDistributor.enqueueEvent(event,destPickInfo);
}","/** 
 * Mouse Event picker for non-Embedded Swing case. Finds the first consuming entity and then turns the work over to the event deliverer. This method does not return a result but instead enqueues an entry for the event in the input queue of the event deliverer.
 */
void pickMouseEventNonSwing(MouseEvent awtEvent){
  logger.fine(""String_Node_Str"" + awtEvent);
  MouseEvent3D event;
  destPickInfo=determineDestPickInfo(awtEvent);
  if (destPickInfo == null || destPickInfo.size() <= 0) {
    logger.finest(""String_Node_Str"");
    event=(MouseEvent3D)createWonderlandEvent(awtEvent);
    eventDistributor.enqueueEvent(event,null);
    return;
  }
  logger.fine(""String_Node_Str"" + destPickInfo);
  int eventID=awtEvent.getID();
  if (eventID == MouseEvent.MOUSE_MOVED || eventID == MouseEvent.MOUSE_DRAGGED) {
    generateEnterExitEvents(awtEvent,destPickInfo);
  }
  event=(MouseEvent3D)createWonderlandEvent(awtEvent);
  eventDistributor.enqueueEvent(event,destPickInfo);
}"
46419,"/** 
 * The run loop of the thread.
 */
public void run(){
  while (true) {
    try {
      Entry entry=null;
      entry=inputQueue.take();
      processEvent(entry.event,entry.pickInfo);
    }
 catch (    Exception ex) {
      logger.warning(""String_Node_Str"");
    }
  }
}","/** 
 * The run loop of the thread.
 */
public void run(){
  while (true) {
    try {
      Entry entry=null;
      entry=inputQueue.take();
      processEvent(entry.event,entry.pickInfo);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      logger.warning(""String_Node_Str"");
    }
  }
}"
46420,"/** 
 * Remove this global event listener. <br><br> Note: It is not a good idea to call this from inside EventListener.computeEvent function. However, it is okay to call this from inside EventListener.commitEvent function if necessary.
 * @param listener The global event listener to be removed.
 */
public void removeGlobalEventListener(EventListener listener){
synchronized (globalEventListeners) {
    globalEventListeners.remove(listener);
  }
}","/** 
 * Remove this global event listener. <br><br> Note: It is not a good idea to call this from inside EventListener.computeEvent function. However, it is okay to call this from inside EventListener.commitEvent function if necessary.
 * @param listener The global event listener to be removed.
 */
public void removeGlobalEventListener(EventListener listener){
synchronized (globalEventListeners) {
    globalEventListeners.remove(listener);
    listener.removeFromEntity(InputManager.inputManager().getGlobalFocusEntity());
  }
}"
46421,"/** 
 * Add an event listener to be tried once per event. This global listener can be added only once. Subsequent attempts to add it will be ignored. <br><br> Note: It is not a good idea to call this from inside EventListener.computeEvent function. However, it is okay to call this from inside EventListener.commitEvent function if necessary.
 * @param listener The global event listener to be added.
 */
public void addGlobalEventListener(EventListener listener){
synchronized (globalEventListeners) {
    if (globalEventListeners.contains(listener)) {
      return;
    }
 else {
      globalEventListeners.add(listener);
    }
  }
}","/** 
 * Add an event listener to be tried once per event. This global listener can be added only once. Subsequent attempts to add it will be ignored. <br><br> Note: It is not a good idea to call this from inside EventListener.computeEvent function. However, it is okay to call this from inside EventListener.commitEvent function if necessary.
 * @param listener The global event listener to be added.
 */
public void addGlobalEventListener(EventListener listener){
synchronized (globalEventListeners) {
    if (globalEventListeners.contains(listener)) {
      return;
    }
 else {
      globalEventListeners.add(listener);
      listener.addToEntity(InputManager.inputManager().getGlobalFocusEntity());
    }
  }
}"
46422,"/** 
 * INTERNAL ONLY <br> Called in the render loop to allow this collection to commit the  <code>compute()</code> calculations to alter the scene graph.
 */
@InternalAPI public void commit(ProcessorArmingCollection collection){
  commitEvent(lastComputedEvent);
}","/** 
 * INTERNAL ONLY <br> Called in the render loop to allow this collection to commit the  <code>compute()</code> calculations to alter the scene graph.
 */
@InternalAPI public void commit(ProcessorArmingCollection collection){
  for (  Event event : computedEvents) {
    commitEvent(event);
  }
}"
46423,"/** 
 * {@inheritDoc}
 */
public void removeFromEntity(Entity entity){
  EventListenerCollection collection=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
  if (collection == null) {
    return;
  }
  if (!collection.remove(this)) {
  }
  if (collection.size() <= 0) {
    entity.removeComponent(EventListenerCollection.class);
  }
  numEntitiesAttached--;
  if (numEntitiesAttached <= 0) {
    disarm();
  }
}","/** 
 * {@inheritDoc}
 */
public void removeFromEntity(Entity entity){
  EventListenerCollection collection=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
  if (collection == null) {
    return;
  }
  if (!collection.remove(this)) {
  }
  if (collection.size() <= 0) {
    entity.removeComponent(EventListenerCollection.class);
  }
  removeProcessorCompFromEntity(this,entity);
  numEntitiesAttached--;
  if (numEntitiesAttached <= 0) {
    disarm();
  }
}"
46424,"/** 
 * Disarm the processor 
 */
private void disarm(){
  setArmingCondition(null);
}","/** 
 * Disarm the listener's processor. 
 */
void disarm(){
  setArmingCondition(null);
}"
46425,"/** 
 * INTERNAL ONLY. <br> Called when there is new event in the input queue.
 */
@InternalAPI public void compute(ProcessorArmingCollection collection){
  Event event=null;
  try {
    event=inputQueue.take();
  }
 catch (  Exception ex) {
  }
  if (event == null)   return;
  computeEvent(event);
  lastComputedEvent=event;
}","/** 
 * INTERNAL ONLY. <br> Called when there is new event in the input queue.
 */
@InternalAPI public void compute(ProcessorArmingCollection collection){
  Event event=null;
  if (computedEvents != null) {
    computedEvents.clear();
  }
  try {
    while (inputQueue.peek() != null) {
      event=inputQueue.take();
      if (event == null) {
        logger.warning(""String_Node_Str"");
        return;
      }
      computeEvent(event);
      if (computedEvents == null) {
        computedEvents=new LinkedList<Event>();
      }
      computedEvents.add(event);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    logger.warning(""String_Node_Str"");
  }
}"
46426,"/** 
 * {@inheritDoc}
 */
public void addToEntity(Entity entity){
  EventListenerCollection collection=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
  if (collection == null) {
    collection=new EventListenerCollection();
    entity.addComponent(EventListenerCollection.class,collection);
  }
 else {
    if (collection.contains(this)) {
      return;
    }
    collection.add(this);
  }
  numEntitiesAttached++;
  if (numEntitiesAttached == 1 && enabled) {
    arm();
  }
}","/** 
 * {@inheritDoc}
 */
public void addToEntity(Entity entity){
  EventListenerCollection collection=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
  if (collection == null) {
    collection=new EventListenerCollection();
    entity.addComponent(EventListenerCollection.class,collection);
  }
 else {
    if (collection.contains(this)) {
      return;
    }
    collection.add(this);
  }
  addProcessorCompToEntity(this,entity);
  numEntitiesAttached++;
  if (numEntitiesAttached == 1 && enabled) {
    arm();
  }
}"
46427,"/** 
 * Arm the processor 
 */
private void arm(){
  setArmingCondition(new PostEventCondition(this,new long[]{MTGAME_EVENT_ID}));
}","/** 
 * Arm the listener's processor. 
 */
void arm(){
  setArmingCondition(new PostEventCondition(this,new long[]{MTGAME_EVENT_ID}));
}"
46428,"/** 
 * Initialize the input manager to receive input events from the given AWT canvas and start the input manager running. The input manager will perform picks with the given camera. This routine can only be called once. To subsequently change the  camera, use <code>setCameraComponent</code>. To subsequently change the focus manager, use <code>setFocusManager</code>.
 * @param canvas The AWT canvas which generates AWT user events.
 * @param cameraComp The mtgame camera component to use for picking operations.
 */
public void initialize(Canvas canvas,CameraComponent cameraComp){
  if (this.canvas != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.canvas=canvas;
  inputPicker.setCanvas(canvas);
  setCameraComponent(cameraComp);
  canvas.addKeyListener(this);
  if (ENABLE_EMBEDDED_SWING) {
    logger.info(""String_Node_Str"");
  }
 else {
    logger.info(""String_Node_Str"");
    canvas.addMouseListener(this);
    canvas.addMouseMotionListener(this);
    canvas.addMouseWheelListener(this);
  }
  injectInitialMouseEvent();
  logger.info(""String_Node_Str"");
}","/** 
 * Initialize the input manager to receive input events from the given AWT canvas and start the input manager running. The input manager will perform picks with the given camera. This routine can only be called once. To subsequently change the  camera, use <code>setCameraComponent</code>. To subsequently change the focus manager, use <code>setFocusManager</code>.
 * @param wm The mtgame world manager.
 * @param canvas The AWT canvas which generates AWT user events.
 * @param cameraComp The mtgame camera component to use for picking operations.
 */
public void initialize(WorldManager wm,Canvas canvas,CameraComponent cameraComp){
  if (this.canvas != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.canvas=canvas;
  inputPicker.setCanvas(canvas);
  setCameraComponent(cameraComp);
  initializeGlobalFocus(wm);
  canvas.addKeyListener(this);
  if (ENABLE_EMBEDDED_SWING) {
    logger.fine(""String_Node_Str"");
  }
 else {
    logger.fine(""String_Node_Str"");
    canvas.addMouseListener(this);
    canvas.addMouseMotionListener(this);
    canvas.addMouseWheelListener(this);
  }
  logger.fine(""String_Node_Str"");
}"
46429,"/** 
 * Process key events. No picking is actually performed. Key events are delivered starting at the entity that has the keyboard focus.
 */
void pickKeyEvent(KeyEvent awtEvent){
  KeyEvent3D keyEvent=(KeyEvent3D)createWonderlandEvent(awtEvent);
  eventDistributor.enqueueEvent(keyEvent);
}","/** 
 * Process key events. No picking is actually performed. Key events are delivered starting at the entity that has the keyboard focus.
 */
void pickKeyEvent(KeyEvent awtEvent){
  logger.fine(""String_Node_Str"" + awtEvent);
  KeyEvent3D keyEvent=(KeyEvent3D)createWonderlandEvent(awtEvent);
  eventDistributor.enqueueEvent(keyEvent);
}"
46430,"/** 
 * Mouse Event picker for non-Embedded Swing case. Finds the first consuming entity and then turns the work over to the event deliverer. This method does not return a result but instead enqueues an entry for the event in the input queue of the event deliverer.
 */
void pickMouseEventNonSwing(MouseEvent awtEvent){
  logger.info(""String_Node_Str"" + awtEvent);
  destPickInfo=determineDestPickInfo(awtEvent);
  if (destPickInfo == null || destPickInfo.size() <= 0) {
    return;
  }
  logger.info(""String_Node_Str"" + destPickInfo);
  int eventID=awtEvent.getID();
  if (eventID == MouseEvent.MOUSE_MOVED || eventID == MouseEvent.MOUSE_DRAGGED) {
    generateEnterExitEvents(awtEvent,destPickInfo);
  }
  MouseEvent3D event=(MouseEvent3D)createWonderlandEvent(awtEvent);
  eventDistributor.enqueueEvent(event,destPickInfo);
}","/** 
 * Mouse Event picker for non-Embedded Swing case. Finds the first consuming entity and then turns the work over to the event deliverer. This method does not return a result but instead enqueues an entry for the event in the input queue of the event deliverer.
 */
void pickMouseEventNonSwing(MouseEvent awtEvent){
  logger.fine(""String_Node_Str"" + awtEvent);
  destPickInfo=determineDestPickInfo(awtEvent);
  if (destPickInfo == null || destPickInfo.size() <= 0) {
    logger.finest(""String_Node_Str"");
    return;
  }
  logger.fine(""String_Node_Str"" + destPickInfo);
  int eventID=awtEvent.getID();
  if (eventID == MouseEvent.MOUSE_MOVED || eventID == MouseEvent.MOUSE_DRAGGED) {
    generateEnterExitEvents(awtEvent,destPickInfo);
  }
  MouseEvent3D event=(MouseEvent3D)createWonderlandEvent(awtEvent);
  eventDistributor.enqueueEvent(event,destPickInfo);
}"
46431,"/** 
 * See if any of the enabled event listeners for the given entity are willing to consume the given event. Post the event to willing consumers. Also, returns the OR of propagatesToParent for all enabled listeners  and the OR of propagatesToUnder for all enabled listeners in propState.
 */
protected void tryListenersForEntity(Entity entity,Event event,PropagationState propState){
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ event);
  EventListenerCollection listeners=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
  if (listeners == null) {
    logger.fine(""String_Node_Str"");
    propState.toUnder=false;
  }
 else {
    Iterator<EventListener> it=listeners.iterator();
    while (it.hasNext()) {
      EventListener listener=it.next();
      if (listener.isEnabled()) {
        logger.fine(""String_Node_Str"" + listener);
        Event distribEvent=createEventForEntity(event,entity);
        if (listener.consumesEvent(distribEvent)) {
          logger.fine(""String_Node_Str"");
          listener.postEvent(distribEvent);
        }
        propState.toParent|=listener.propagatesToParent(distribEvent);
        propState.toUnder|=listener.propagatesToUnder(distribEvent);
        logger.finer(""String_Node_Str"" + propState.toParent + ""String_Node_Str""+ propState.toUnder);
      }
    }
  }
  logger.fine(""String_Node_Str"" + propState.toParent + ""String_Node_Str""+ propState.toUnder);
}","/** 
 * See if any of the enabled event listeners for the given entity are willing to consume the given event. Post the event to willing consumers. Also, returns the OR of propagatesToParent for all enabled listeners  and the OR of propagatesToUnder for all enabled listeners in propState.
 */
protected void tryListenersForEntity(Entity entity,Event event,PropagationState propState){
  logger.fine(""String_Node_Str"" + entity + ""String_Node_Str""+ event);
  EventListenerCollection listeners=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
  if (listeners == null || listeners.size() <= 0) {
    logger.fine(""String_Node_Str"");
    propState.toUnder=false;
  }
 else {
    Iterator<EventListener> it=listeners.iterator();
    while (it.hasNext()) {
      EventListener listener=it.next();
      if (listener.isEnabled()) {
        logger.fine(""String_Node_Str"" + listener);
        Event distribEvent=createEventForEntity(event,entity);
        if (listener.consumesEvent(distribEvent)) {
          logger.fine(""String_Node_Str"");
          listener.postEvent(distribEvent);
        }
        propState.toParent|=listener.propagatesToParent(distribEvent);
        propState.toUnder|=listener.propagatesToUnder(distribEvent);
        logger.finer(""String_Node_Str"" + propState.toParent + ""String_Node_Str""+ propState.toUnder);
      }
    }
  }
  logger.fine(""String_Node_Str"" + propState.toParent + ""String_Node_Str""+ propState.toUnder);
}"
46432,"/** 
 * {@inheritDoc}
 */
public void addToEntity(Entity entity){
  EventListenerCollection collection=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
  if (collection == null) {
    collection=new EventListenerCollection();
    entity.addComponent(EventListenerCollection.class,collection);
  }
 else {
    if (collection.contains(this)) {
      return;
    }
    collection.add(this);
  }
  addProcessorCompToEntity(this,entity);
  numEntitiesAttached++;
  if (numEntitiesAttached == 1 && enabled) {
    arm();
  }
}","/** 
 * {@inheritDoc}
 */
public void addToEntity(Entity entity){
  EventListenerCollection collection=(EventListenerCollection)entity.getComponent(EventListenerCollection.class);
  if (collection == null) {
    collection=new EventListenerCollection();
    entity.addComponent(EventListenerCollection.class,collection);
  }
 else {
    if (collection.contains(this)) {
      return;
    }
  }
  collection.add(this);
  addProcessorCompToEntity(this,entity);
  numEntitiesAttached++;
  if (numEntitiesAttached == 1 && enabled) {
    arm();
  }
}"
46433,"public void commitEvent(Event event){
  logger.info(""String_Node_Str"" + event + ""String_Node_Str""+ event.getEntity());
}","public void commitEvent(Event event){
  StringBuffer sb=new StringBuffer();
  if (name != null) {
    sb.append(name + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + event + ""String_Node_Str""+ event.getEntity());
  logger.info(sb.toString());
}"
46434,"public void commitEvent(Event event){
  logger.info(""String_Node_Str"" + event + ""String_Node_Str""+ event.getEntity());
}","public void commitEvent(Event event){
  StringBuffer sb=new StringBuffer();
  if (name != null) {
    sb.append(name + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + event + ""String_Node_Str""+ event.getEntity());
  logger.info(sb.toString());
}"
46435,"/** 
 * Free an already allocated event ID.
 */
protected static void free(int eventID){
  idAllocator.free(eventID);
}","/** 
 * Free an already allocated event class ID.
 */
protected static void free(int eventClassID){
  classIdAllocator.free(eventClassID);
}"
46436,"/** 
 * {@inheritDoc}
 */
public void commitEvent(Event event){
  MouseButtonEvent3D buttonEvent=(MouseButtonEvent3D)event;
  if (!buttonEvent.isPressed()) {
    return;
  }
  Entity entity=event.getEntity();
  if (entity.getComponent(SpinProcessor.class) != null) {
    entity.removeComponent(SpinProcessor.class);
  }
 else {
    try {
      entity.addComponent(SpinProcessor.class,new SpinProcessor(entity));
    }
 catch (    InstantiationException ex) {
    }
  }
}","/** 
 * {@inheritDoc}
 */
public void commitEvent(Event event){
  if (!((MouseButtonEvent3D)event).isPressed()) {
    return;
  }
  Entity entity=event.getEntity();
  if (entity.getComponent(SpinProcessor.class) != null) {
    entity.removeComponent(SpinProcessor.class);
  }
 else {
    try {
      entity.addComponent(SpinProcessor.class,new SpinProcessor(entity));
    }
 catch (    InstantiationException ex) {
    }
  }
}"
46437,"/** 
 * Initialize the input manager to receive input events from the given AWT canvas and start the input manager running. The input manager will perform picks with the given camera. This routine can only be called once. To subsequently change the  camera, use <code>setCameraComponent</code>.
 * @param canvas The AWT canvas which generates AWT user events.
 * @param cameraComp The mtgame camera component to use for picking operations.
 */
public void initialize(Canvas canvas,CameraComponent cameraComp){
  if (canvas != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.canvas=canvas;
  inputPicker.setCanvas(canvas);
  setCameraComponent(cameraComp);
  canvas.addKeyListener(this);
  if (!ENABLE_EMBEDDED_SWING) {
    canvas.addMouseListener(this);
    canvas.addMouseMotionListener(this);
    canvas.addMouseWheelListener(this);
  }
  injectInitialMouseEvent();
}","/** 
 * Initialize the input manager to receive input events from the given AWT canvas and start the input manager running. The input manager will perform picks with the given camera. This routine can only be called once. To subsequently change the  camera, use <code>setCameraComponent</code>.
 * @param canvas The AWT canvas which generates AWT user events.
 * @param cameraComp The mtgame camera component to use for picking operations.
 */
public void initialize(Canvas canvas,CameraComponent cameraComp){
  if (this.canvas != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.canvas=canvas;
  inputPicker.setCanvas(canvas);
  setCameraComponent(cameraComp);
  canvas.addKeyListener(this);
  if (ENABLE_EMBEDDED_SWING) {
    logger.info(""String_Node_Str"");
  }
 else {
    logger.info(""String_Node_Str"");
    canvas.addMouseListener(this);
    canvas.addMouseMotionListener(this);
    canvas.addMouseWheelListener(this);
  }
  injectInitialMouseEvent();
  logger.info(""String_Node_Str"");
}"
46438,"/** 
 * Returns a string representation of the object.
 */
public String toString(){
  String str=""String_Node_Str"" + super.toString();
  str+=""String_Node_Str"";
  return str;
}","public String toString(){
  return ""String_Node_Str"" + butAction();
}"
46439,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  dbcache=DataCache.getInstance(getApplicationContext());
  im=InputManager.getInstance(this);
  locations=dbcache.getLocationNames();
  gps=new GPSLocator(this);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.locationlist_item,locations);
  auto_origin=(AutoCompleteTextView)findViewById(R.id.autocomplete_origin);
  auto_origin.setAdapter(adapter);
  auto_dest=(AutoCompleteTextView)findViewById(R.id.autocomplete_destination);
  auto_dest.setAdapter(adapter);
  final Button src_btn=(Button)findViewById(R.id.locate_src_button);
  src_btn.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      progressDialog=new ProgressDialog(NPFStartActivity.this);
      progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
      progressDialog.setMessage(""String_Node_Str"");
      progressDialog.setCancelable(false);
      progressDialog.show();
      gps.startUpdate();
      progressDialog.show();
      new Thread(){
        public void run(){
          while (true) {
            gpsLocation=gps.getBestKnowLocation();
            if (gpsLocation != null) {
              handler.obtainMessage(0).sendToTarget();
              break;
            }
          }
        }
      }
.start();
    }
  }
);
  routeList=(ListView)findViewById(R.id.route_list);
  btnToMap=new Button(NPFStartActivity.this);
  btnToMap.setText(""String_Node_Str"");
  routeList.addFooterView(btnToMap);
  final Button submit=(Button)findViewById(R.id.get_location);
  submit.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      MapNode s_node, d_node;
      s_node=dbcache.getNodeByLocationName(auto_origin.getText().toString());
      d_node=dbcache.getNodeByLocationName(auto_dest.getText().toString());
      if (s_node != null && d_node != null) {
        im.setDestinationLocation(d_node.name);
        im.setSourceLocation(s_node.name);
        pf=new Pathfinder(s_node,d_node);
        ArrayList<MapNode> pathNodes=pf.getPath();
        ArrayList<String> nodes=new ArrayList<String>();
        String[] str_nodes=new String[pathNodes.size() + 1];
        nodes.add(""String_Node_Str"");
        for (int i=pathNodes.size() - 1; i >= 0; i--) {
          MapNode n=pathNodes.get(i);
          nodes.add(n.name);
        }
        nodes.toArray(str_nodes);
        routeList.setAdapter(new ArrayAdapter<String>(NPFStartActivity.this,R.layout.routelist_item,str_nodes));
        InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(v.getWindowToken(),0);
        btnToMap.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View arg0){
            Intent intent=new Intent(NPFStartActivity.this,NPFMapActivity.class);
            startActivity(intent);
          }
        }
);
      }
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  dbcache=DataCache.getInstance(getApplicationContext());
  im=InputManager.getInstance(this);
  locations=dbcache.getLocationNames();
  locations=ComUtil.decodeAll(locations);
  gps=new GPSLocator(this);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.locationlist_item,locations);
  auto_origin=(AutoCompleteTextView)findViewById(R.id.autocomplete_origin);
  auto_origin.setAdapter(adapter);
  auto_dest=(AutoCompleteTextView)findViewById(R.id.autocomplete_destination);
  auto_dest.setAdapter(adapter);
  final Button src_btn=(Button)findViewById(R.id.locate_src_button);
  src_btn.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      progressDialog=new ProgressDialog(NPFStartActivity.this);
      progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
      progressDialog.setMessage(""String_Node_Str"");
      progressDialog.setCancelable(false);
      progressDialog.show();
      gps.startUpdate();
      progressDialog.show();
      new Thread(){
        public void run(){
          while (true) {
            gpsLocation=gps.getBestKnowLocation();
            if (gpsLocation != null) {
              handler.obtainMessage(0).sendToTarget();
              break;
            }
          }
        }
      }
.start();
    }
  }
);
  routeList=(ListView)findViewById(R.id.route_list);
  btnToMap=new Button(NPFStartActivity.this);
  btnToMap.setText(""String_Node_Str"");
  routeList.addFooterView(btnToMap);
  final Button submit=(Button)findViewById(R.id.get_location);
  submit.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      MapNode s_node, d_node;
      s_node=dbcache.getNodeByLocationName(ComUtil.encode(auto_origin.getText().toString()));
      d_node=dbcache.getNodeByLocationName(ComUtil.encode(auto_dest.getText().toString()));
      if (s_node != null && d_node != null) {
        im.setDestinationLocation(d_node.name);
        im.setSourceLocation(s_node.name);
        pf=new Pathfinder(s_node,d_node);
        ArrayList<MapNode> pathNodes=pf.getPath();
        ArrayList<String> nodes=new ArrayList<String>();
        String[] str_nodes=new String[pathNodes.size() + 1];
        nodes.add(""String_Node_Str"");
        for (int i=pathNodes.size() - 1; i >= 0; i--) {
          MapNode n=pathNodes.get(i);
          nodes.add(n.name);
        }
        nodes.toArray(str_nodes);
        routeList.setAdapter(new ArrayAdapter<String>(NPFStartActivity.this,R.layout.routelist_item,str_nodes));
        InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(v.getWindowToken(),0);
        btnToMap.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View arg0){
            Intent intent=new Intent(NPFStartActivity.this,NPFMapActivity.class);
            startActivity(intent);
          }
        }
);
      }
    }
  }
);
}"
46440,"private String[] getNearbyLocations(){
  int count=dbcache.getNodeCount();
  ArrayList<String> names=new ArrayList<String>();
  for (int i=0; i < count; i++) {
    MapNode n=dbcache.getNodeByIdx(i);
    double dist=n.distance(bestKnownLocation.getLatitude(),bestKnownLocation.getLongitude());
    if (dist < NEARBY_THRESHOLD) {
      for (      String name : n.locations) {
        names.add(name);
      }
    }
    Log.i(""String_Node_Str"",""String_Node_Str"" + n.name + ""String_Node_Str""+ dist);
  }
  if (names.size() > 0) {
    String[] n=new String[names.size()];
    names.toArray(n);
    return n;
  }
 else {
    String[] n=new String[]{""String_Node_Str""};
    return n;
  }
}","private String[] getNearbyLocations(){
  int count=dbcache.getNodeCount();
  ArrayList<String> names=new ArrayList<String>();
  for (int i=0; i < count; i++) {
    MapNode n=dbcache.getNodeByIdx(i);
    double dist=n.distance(bestKnownLocation.getLatitude(),bestKnownLocation.getLongitude());
    if (dist < NEARBY_THRESHOLD) {
      for (      String name : n.locations) {
        names.add(ComUtil.decode(name));
      }
    }
    Log.i(""String_Node_Str"",""String_Node_Str"" + n.name + ""String_Node_Str""+ dist);
  }
  if (names.size() > 0) {
    String[] n=new String[names.size()];
    names.toArray(n);
    return n;
  }
 else {
    String[] n=new String[]{""String_Node_Str""};
    return n;
  }
}"
46441,"/** 
 * Creates a new <code>MainFrame</code>.
 * @param base the base to be used by the whole GUI
 */
public MainFrame(DataBase base){
  super(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
  this.base=base;
  layout=new CardLayout();
  setLayout(layout);
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent event){
      MainFrame.this.windowClosing();
    }
  }
);
  initializeGUI();
  setSize(1000,600);
  setLocationRelativeTo(null);
  setExtendedState(MAXIMIZED_BOTH);
  setVisible(true);
}","/** 
 * Creates a new <code>MainFrame</code>.
 * @param base the base to be used by the whole GUI
 */
public MainFrame(DataBase base){
  super(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
  this.base=base;
  layout=new CardLayout();
  setLayout(layout);
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent event){
      MainFrame.this.windowClosing();
    }
  }
);
  initializeGUI();
  setSize(1000,600);
  setLocationRelativeTo(null);
  setLocation(0,0);
  setExtendedState(MAXIMIZED_BOTH);
  setVisible(true);
}"
46442,"/** 
 * Checks whether the entered authors are existing, if not, the background color will be changed to yellow.
 */
private void checkAuthors(){
  String[] authors=getText().split(""String_Node_Str"");
  setBackground(Color.WHITE);
  for (  String author : authors) {
    try {
      if (!checkAuthor(author)) {
        setBackground(Color.YELLOW);
      }
    }
 catch (    SQLException ex) {
      Logger.getLogger(AuthorInputField.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}","/** 
 * Checks whether the entered authors are existing, if not, the background color will be changed to yellow.
 */
private void checkAuthors(){
  String[] authors=getText().split(""String_Node_Str"");
  setBackground(Color.WHITE);
  for (  String author : authors) {
    try {
      if (!checkAuthor(author.trim())) {
        setBackground(Color.YELLOW);
      }
    }
 catch (    SQLException ex) {
      Logger.getLogger(AuthorInputField.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}"
46443,"public void resetMask(){
  for (  Component c : getComponents()) {
    if (c instanceof ExtendedTextField) {
      ((ExtendedTextField)c).setText(""String_Node_Str"");
    }
  }
  titleInput.reset();
  informationInput.setText(""String_Node_Str"");
  tagInput.clearSelection();
  locationInput.reset();
  categoryInput.reset();
  book=null;
  titleInput.requestFocusInWindow();
}","public void resetMask(){
  for (  Component c : getComponents()) {
    if (c instanceof ExtendedTextField) {
      ((ExtendedTextField)c).setText(""String_Node_Str"");
    }
  }
  titleInput.reset();
  informationInput.setText(""String_Node_Str"");
  tagInput.clearSelection();
  book=null;
  titleInput.requestFocusInWindow();
}"
46444,"/** 
 * Returns the id of the following book if it does already exist. If not, a new dialog will be opend to let the user enter the following book. Title, authors, location, company and category are already filled in.
 * @param followedByString the title of the following book
 * @param cur_Book the currently book to be saved
 * @return the id of the following book, or -1 if none does exist and the userdoesn't want to enter a book with the entered title.
 * @throws SQLException if something goes wrong during database operation
 */
public int getFollowedByID(String followedByString,Book cur_Book) throws SQLException {
  BookQuest questFromSubTitle=new BookQuest();
  questFromSubTitle.addStringCondition(BookQuest.SUBTITLE,followedByString,SQLOperator.OR);
  ArrayList<Book> booksFromSubTitle=reader.getBooks(questFromSubTitle);
  BookQuest questFromTitle=new BookQuest();
  questFromTitle.addStringCondition(BookQuest.TITLE,followedByString,SQLOperator.OR);
  ArrayList<Book> booksFromTitle=reader.getBooks(questFromTitle);
  int statement=-1;
  if (followedByString.equals(""String_Node_Str"")) {
    return statement;
  }
  if (booksFromTitle.isEmpty() && booksFromSubTitle.isEmpty()) {
    int result=JOptionPane.showConfirmDialog(null,java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str"") + followedByString + java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),JOptionPane.YES_NO_OPTION);
    if (result == JOptionPane.YES_OPTION) {
      Book book=writer.createBook();
      book.setSubtitle(followedByString);
      book.setTitle(cur_Book.getTitle());
      book.setCategoryID(cur_Book.getCategoryID());
      book.setLocationID(cur_Book.getLocationID());
      book.setCompanyID(cur_Book.getCompanyID());
      writer.copyAuthors(cur_Book,book);
      BookInputDialog dialog=new BookInputDialog(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reader,writer,book);
      int res=dialog.showWithResult();
      int id=book.getID();
      if (cur_Book.getID() != id && res == BookInputDialog.CONFIRMED) {
        statement=id;
      }
    }
  }
 else   if (!booksFromTitle.isEmpty() && booksFromSubTitle.isEmpty()) {
    statement=booksFromTitle.get(0).getID();
  }
 else   if (booksFromTitle.isEmpty() && !booksFromSubTitle.isEmpty()) {
    statement=booksFromSubTitle.get(0).getID();
  }
 else {
  }
  return statement;
}","/** 
 * Returns the id of the following book if it does already exist. If not, a new dialog will be opend to let the user enter the following book. Title, authors, location, company and category are already filled in.
 * @param followedByString the title of the following book
 * @param cur_Book the currently book to be saved
 * @return the id of the following book, or -1 if none does exist and theuser doesn't want to enter a book with the entered title.
 * @throws SQLException if something goes wrong during database operation
 */
public int getFollowedByID(String followedByString,Book cur_Book) throws SQLException {
  BookQuest questFromSubTitle=new BookQuest();
  questFromSubTitle.addStringCondition(BookQuest.SUBTITLE,followedByString,SQLOperator.OR);
  ArrayList<Book> booksFromSubTitle=reader.getBooks(questFromSubTitle);
  BookQuest questFromTitle=new BookQuest();
  questFromTitle.addStringCondition(BookQuest.TITLE,followedByString,SQLOperator.OR);
  ArrayList<Book> booksFromTitle=reader.getBooks(questFromTitle);
  int statement=-1;
  if (followedByString.equals(""String_Node_Str"")) {
    return statement;
  }
  if (booksFromTitle.isEmpty() && booksFromSubTitle.isEmpty()) {
    int result=JOptionPane.showConfirmDialog(null,java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str"") + followedByString + java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),JOptionPane.YES_NO_OPTION);
    if (result == JOptionPane.YES_OPTION) {
      Book book=writer.createBook();
      book.setSubtitle(followedByString);
      book.setTitle(cur_Book.getTitle());
      book.setCategoryID(cur_Book.getCategoryID());
      book.setLocationID(cur_Book.getLocationID());
      book.setCompanyID(cur_Book.getCompanyID());
      writer.copyAuthors(cur_Book,book);
      BookInputDialog dialog=new BookInputDialog(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reader,writer,book);
      int res=dialog.showWithResult();
      int id=book.getID();
      if (cur_Book.getID() != id && res == BookInputDialog.CONFIRMED) {
        statement=id;
      }
    }
  }
 else   if (!booksFromTitle.isEmpty() && booksFromSubTitle.isEmpty()) {
    statement=booksFromTitle.get(0).getID();
  }
 else   if (booksFromTitle.isEmpty() && !booksFromSubTitle.isEmpty()) {
    statement=booksFromSubTitle.get(0).getID();
  }
 else {
  }
  return statement;
}"
46445,"/** 
 * Checks every single author int the passed argument whether they're already exisiting. If so, it only links the author with the book, otherwise, the author will be created and linked, too.
 * @param book to book to be linked with
 * @param authorsString the authors string, formatted as ""<code>name surname, name surname</code>"" and so on.
 * @throws SQLException if something goes wrong during database operations
 */
public void saveAuthors(Book book,String authorsString) throws SQLException {
  removeAllLinks(book);
  String[] names=authorsString.split(""String_Node_Str"");
  String[][] authornames=new String[names.length][2];
  for (int i=0; i < names.length; i++) {
    String[] s=new String[2];
    s[0]=names[i].substring(0,names[i].lastIndexOf(""String_Node_Str"")).trim();
    s[1]=names[i].substring(names[i].lastIndexOf(""String_Node_Str"") + 1).trim();
    authornames[i]=s;
  }
  for (  String[] name : authornames) {
    AuthorQuest quest=new AuthorQuest();
    quest.addStringCondition(""String_Node_Str"",name[0],SQLOperator.AND);
    quest.addStringCondition(""String_Node_Str"",name[1],SQLOperator.AND);
    ArrayList<Author> authors=reader.getAuthors(quest);
    if (authors.isEmpty()) {
      Author a=writer.createAuthor();
      a.setName(name[0]);
      a.setSurname(name[1]);
      a.setInformation(""String_Node_Str"");
      writer.updateAuthor(a);
      writer.linkAuthorBook(a,book);
    }
 else     if (authors.size() == 1) {
      Author a=authors.get(0);
      writer.linkAuthorBook(a,book);
    }
 else {
      JOptionPane.showMessageDialog(null,java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
    }
  }
}","/** 
 * Checks every single author int the passed argument whether they're already exisiting. If so, it only links the author with the book, otherwise, the author will be created and linked, too.
 * @param book to book to be linked with
 * @param authorsString the authors string, formatted as""<code>name surname, name surname</code>"" and so on.
 * @throws SQLException if something goes wrong during database operations
 */
public void saveAuthors(Book book,String authorsString) throws SQLException {
  removeAllLinks(book);
  if (!authorsString.equals(""String_Node_Str"")) {
    String[] names=authorsString.split(""String_Node_Str"");
    String[][] authornames=new String[names.length][2];
    for (int i=0; i < names.length; i++) {
      String[] s=new String[2];
      s[0]=names[i].substring(0,names[i].lastIndexOf(""String_Node_Str"")).trim();
      s[1]=names[i].substring(names[i].lastIndexOf(""String_Node_Str"") + 1).trim();
      authornames[i]=s;
    }
    for (    String[] name : authornames) {
      AuthorQuest quest=new AuthorQuest();
      quest.addStringCondition(""String_Node_Str"",name[0],SQLOperator.AND);
      quest.addStringCondition(""String_Node_Str"",name[1],SQLOperator.AND);
      ArrayList<Author> authors=reader.getAuthors(quest);
      if (authors.isEmpty()) {
        Author a=writer.createAuthor();
        a.setName(name[0]);
        a.setSurname(name[1]);
        a.setInformation(""String_Node_Str"");
        writer.updateAuthor(a);
        writer.linkAuthorBook(a,book);
      }
 else       if (authors.size() == 1) {
        Author a=authors.get(0);
        writer.linkAuthorBook(a,book);
      }
 else {
        JOptionPane.showMessageDialog(null,java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
      }
    }
  }
}"
46446,"/** 
 * Creates an <code>ExtendedBookBaseWriter</code>.
 * @param reader the reader to be used by the <code>ExtendedBookBaseWriter</code>
 * @param writer the writer to be used by the <code>ExtendedBookBaseWeiter</code>
 */
public ExtendedBookBaseWriter(DataBaseReader reader,DataBaseWriter writer){
  this.reader=reader;
  this.writer=writer;
}","/** 
 * Creates an <code>ExtendedBookBaseWriter</code>.
 * @param reader the reader to be used bythe <code>ExtendedBookBaseWriter</code>
 * @param writer the writer to be used bythe <code>ExtendedBookBaseWeiter</code>
 */
public ExtendedBookBaseWriter(DataBaseReader reader,DataBaseWriter writer){
  this.reader=reader;
  this.writer=writer;
}"
46447,"/** 
 * Returns the id of the following book if it does already exist. If not, a new dialog will be opend to let the user enter the following book. Title, authors, location, company and category are already filled in.
 * @param followedByString the title of the following book
 * @param cur_Book the currently book to be saved
 * @return the id of the following book, or -1 if none does exist and the userdoesn't want to enter a book with the entered title.
 * @throws SQLException if something goes wrong during database operation
 */
public int getFollowedByID(String followedByString,Book cur_Book) throws SQLException {
  BookQuest quest=new BookQuest();
  quest.addStringCondition(BookQuest.SUBTITLE,followedByString,SQLOperator.OR);
  quest.addStringCondition(""String_Node_Str"",followedByString,SQLOperator.OR);
  ArrayList<Book> books=reader.getBooks(quest);
  int statement=-1;
  if (followedByString.equals(""String_Node_Str"")) {
    return statement;
  }
  if (books.isEmpty()) {
    int result=JOptionPane.showConfirmDialog(null,java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str"") + followedByString + java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),JOptionPane.YES_NO_OPTION);
    if (result == JOptionPane.YES_OPTION) {
      Book book=writer.createBook();
      book.setSubtitle(followedByString);
      book.setCategoryID(cur_Book.getCategoryID());
      book.setLocationID(cur_Book.getLocationID());
      book.setCompanyID(cur_Book.getCompanyID());
      writer.copyAuthors(cur_Book,book);
      BookInputDialog dialog=new BookInputDialog(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reader,writer,book);
      int res=dialog.showWithResult();
      int id=book.getID();
      if (cur_Book.getID() != id && res == BookInputDialog.CONFIRMED) {
        statement=id;
      }
    }
  }
 else {
    statement=books.get(0).getID();
  }
  return statement;
}","/** 
 * Returns the id of the following book if it does already exist. If not, a new dialog will be opend to let the user enter the following book. Title, authors, location, company and category are already filled in.
 * @param followedByString the title of the following book
 * @param cur_Book the currently book to be saved
 * @return the id of the following book, or -1 if none does exist and the userdoesn't want to enter a book with the entered title.
 * @throws SQLException if something goes wrong during database operation
 */
public int getFollowedByID(String followedByString,Book cur_Book) throws SQLException {
  BookQuest quest=new BookQuest();
  quest.addStringCondition(BookQuest.SUBTITLE,followedByString,SQLOperator.OR);
  quest.addStringCondition(""String_Node_Str"",followedByString,SQLOperator.OR);
  ArrayList<Book> books=reader.getBooks(quest);
  int statement=-1;
  if (followedByString.equals(""String_Node_Str"")) {
    return statement;
  }
  if (books.isEmpty()) {
    int result=JOptionPane.showConfirmDialog(null,java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str"") + followedByString + java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),JOptionPane.YES_NO_OPTION);
    if (result == JOptionPane.YES_OPTION) {
      Book book=writer.createBook();
      book.setSubtitle(followedByString);
      book.setTitle(cur_Book.getTitle());
      book.setCategoryID(cur_Book.getCategoryID());
      book.setLocationID(cur_Book.getLocationID());
      book.setCompanyID(cur_Book.getCompanyID());
      writer.copyAuthors(cur_Book,book);
      BookInputDialog dialog=new BookInputDialog(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reader,writer,book);
      int res=dialog.showWithResult();
      int id=book.getID();
      if (cur_Book.getID() != id && res == BookInputDialog.CONFIRMED) {
        statement=id;
      }
    }
  }
 else {
    statement=books.get(0).getID();
  }
  return statement;
}"
46448,"@Override public double getChannelValue(String name){
  Object returnVal;
  try {
    returnVal=implGetTimeMethod.invoke(dataImpl,name);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return ((Double)returnVal).doubleValue();
}","@Override public double getChannelValue(String name){
  Object returnVal;
  try {
    returnVal=implGetChannelValueMethod.invoke(dataImpl,name);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return ((Double)returnVal).doubleValue();
}"
46449,"public Window(String title,Object content){
  context=Context.getCurrentContext();
  frame=new JFrame(title);
  setContent(content);
  frame.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      frame.dispose();
    }
  }
);
  helper=new Helper();
  helper.setDoubleBuffered(true);
  helper.addComponentListener(new ComponentAdapter(){
    public void componentResized(    ComponentEvent e){
      if (helper.getWidth() != Window.this.content.getWidth() || helper.getHeight() != Window.this.content.getHeight()) {
        BufferedImage newImage=new BufferedImage(helper.getWidth(),helper.getHeight(),BufferedImage.TYPE_4BYTE_ABGR);
        Graphics g=newImage.getGraphics();
        g.drawImage(Window.this.content.image,0,0,null);
        Window.this.content.image=newImage;
      }
    }
  }
);
  helper.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent ke){
      System.out.println(""String_Node_Str"" + ke.getKeyCode() + ""String_Node_Str""+ ke.getKeyChar());
      if (onKeyDown != null) {
        NativeObject no=new NativeObject();
        ScriptableObject.putProperty(no,""String_Node_Str"",new Double(ke.getKeyCode()));
        ScriptableObject.putProperty(no,""String_Node_Str"",new Double(ke.getKeyCode()));
        Context.enter(context);
        onKeyDown.call(context,onKeyDown,onKeyDown,new Object[]{no});
      }
    }
    public void keyReleased(    KeyEvent ke){
      if (onKeyUp != null) {
        NativeObject no=new NativeObject();
        ScriptableObject.putProperty(no,""String_Node_Str"",new Double(ke.getKeyCode()));
        ScriptableObject.putProperty(no,""String_Node_Str"",new Double(ke.getKeyCode()));
        Context.enter(context);
        onKeyUp.call(context,onKeyUp,onKeyUp,new Object[]{no});
      }
    }
    public void keyTyped(    KeyEvent ke){
      System.out.println(""String_Node_Str"" + ke.getKeyCode() + ""String_Node_Str""+ ke.getKeyChar());
    }
  }
);
  frame.getContentPane().add(helper);
  frame.pack();
  frame.setVisible(true);
  helper.requestFocus();
  frame.setResizable(false);
}","public Window(String title,Object content){
  context=Context.getCurrentContext();
  frame=new JFrame(title);
  setContent(content);
  frame.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      frame.dispose();
    }
  }
);
  helper=new Helper();
  helper.setDoubleBuffered(true);
  helper.addMouseListener(new MouseListener(){
    public void mouseClicked(    MouseEvent arg0){
    }
    public void mouseEntered(    MouseEvent arg0){
    }
    public void mouseExited(    MouseEvent arg0){
    }
    public void mousePressed(    MouseEvent arg0){
      System.out.println(""String_Node_Str"");
      helper.requestFocus();
    }
    public void mouseReleased(    MouseEvent arg0){
    }
  }
);
  helper.setFocusable(true);
  helper.addComponentListener(new ComponentAdapter(){
    public void componentResized(    ComponentEvent e){
      if (helper.getWidth() != Window.this.content.getWidth() || helper.getHeight() != Window.this.content.getHeight()) {
        BufferedImage newImage=new BufferedImage(helper.getWidth(),helper.getHeight(),BufferedImage.TYPE_4BYTE_ABGR);
        Graphics g=newImage.getGraphics();
        g.drawImage(Window.this.content.image,0,0,null);
        Window.this.content.image=newImage;
      }
    }
  }
);
  helper.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent ke){
      System.out.println(""String_Node_Str"" + ke.getKeyCode() + ""String_Node_Str""+ ke.getKeyChar());
      if (onKeyDown != null) {
        NativeObject no=new NativeObject();
        ScriptableObject.putProperty(no,""String_Node_Str"",new Double(ke.getKeyCode()));
        ScriptableObject.putProperty(no,""String_Node_Str"",new Double(ke.getKeyCode()));
        Context.enter(context);
        onKeyDown.call(context,onKeyDown,onKeyDown,new Object[]{no});
      }
    }
    public void keyReleased(    KeyEvent ke){
      if (onKeyUp != null) {
        NativeObject no=new NativeObject();
        ScriptableObject.putProperty(no,""String_Node_Str"",new Double(ke.getKeyCode()));
        ScriptableObject.putProperty(no,""String_Node_Str"",new Double(ke.getKeyCode()));
        Context.enter(context);
        onKeyUp.call(context,onKeyUp,onKeyUp,new Object[]{no});
      }
    }
    public void keyTyped(    KeyEvent ke){
      System.out.println(""String_Node_Str"" + ke.getKeyCode() + ""String_Node_Str""+ ke.getKeyChar());
    }
  }
);
  frame.getContentPane().add(helper);
  frame.pack();
  frame.setVisible(true);
  helper.requestFocus();
  helper.requestFocusInWindow();
  frame.setResizable(false);
}"
46450,"public void paint(java.awt.Graphics g){
  if (!macOS) {
    g.setColor(getBackground());
    g.fillRect(0,0,getWidth(),getHeight());
  }
  g.drawImage(content.image,0,0,frame);
}","public void paint(java.awt.Graphics g){
  g.setColor(getBackground());
  g.fillRect(0,0,getWidth(),getHeight());
  g.drawImage(content.image,0,0,frame);
}"
46451,"public void setColorObjetivo(float r,float g,float b,float a){
  ColorObjetivo=MezcladorBasico.getColoredTexture(100,100,r,g,b,a);
  Button cambio=null;
  int i=(int)(Math.random() * 6);
  i++;
  this.colorcorrecto=i;
  try {
    imagenObjetivo=((Button)this.findActor(""String_Node_Str"" + i));
    imagenObjetivo.unpressedRegion=new TextureRegion(MezcladorBasico.getColoredTexture(100,100,r,g,b,a));
    imagenObjetivo.pressedRegion=new TextureRegion(MezcladorBasico.getColoredTexture(100,100,r,g,b,a));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void setColorObjetivo(float r,float g,float b,float a){
  ColorObjetivo=MezcladorBasico.getColoredTexture(100,100,r,g,b,a);
  int i=(int)(Math.random() * 6);
  i++;
  this.colorcorrecto=i;
  try {
    imagenObjetivo=((Button)this.findActor(""String_Node_Str"" + i));
    imagenObjetivo.unpressedRegion=new TextureRegion(MezcladorBasico.getColoredTexture(100,100,r,g,b,a));
    imagenObjetivo.pressedRegion=new TextureRegion(MezcladorBasico.getColoredTexture(100,100,r,g,b,a));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
46452,"public void clicked(Button button){
  if (compruebaColor(Integer.parseInt(button.name.substring(1)))) {
    action(MoveTo.$(-600,-600,2));
    paleta.colorAcertado();
  }
 else {
  }
}","public void clicked(Button button){
  if (compruebaColor(Integer.parseInt(button.name.substring(1)))) {
    action(MoveTo.$(-600,-600,2));
    paleta.colorAcertado();
  }
 else {
    paleta.colorFallido();
  }
}"
46453,"public Paleta(String name){
  super(name);
  mezcladorBasico=new MezcladorBasico(this);
  this.addActor(colorCyan);
  colorCyan.x=192;
  colorCyan.y=433;
  colorCyan.clickListener=evento;
  this.addActor(colorMagenta);
  colorMagenta.x=108;
  colorMagenta.y=421;
  colorMagenta.clickListener=evento;
  this.addActor(colorAmarillo);
  colorAmarillo.x=272;
  colorAmarillo.y=393;
  colorAmarillo.clickListener=evento;
  this.addActor(colorRojo);
  bGuardar.x=00;
  bGuardar.y=00;
  this.addActor(colorBlanco);
  colorBlanco.x=325;
  colorBlanco.y=100;
  colorBlanco.clickListener=evento;
  this.addActor(colorNegro);
  colorNegro.x=287;
  colorNegro.y=34;
  colorNegro.clickListener=evento;
  bGuardar.clickListener=new ClickListener(){
    @Override public void clicked(    Button arg0){
      MezclaColores.lienzo.guardarCuadro();
      genial.play();
    }
  }
;
  this.addActor(bGuardar);
  this.addActor(Fondo);
  Fondo.touchable=false;
  this.addActor(sacaMezclador);
  sacaMezclador.height=100;
  sacaMezclador.width=100;
  sacaMezclador.x=190;
  sacaMezclador.y=100;
  sacaMezclador.clickListener=new ClickListener(){
    @Override public void clicked(    Button boton){
      mezcladorBasico.aleatorizaColores();
      eligeColores();
      mezcladorBasico.setColor1(colores[0][0],colores[0][1],colores[0][2],1);
      mezcladorBasico.setColor2(colores[1][0],colores[1][1],colores[1][2],1);
      mezcladorBasico.setColorObjetivo(colores[2][0],colores[2][1],colores[2][2],1);
      mezcladorBasico.action(MoveTo.$(-600,0,2));
    }
  }
;
  this.addActor(mezcladorBasico);
  mezcladorBasico.x=-600;
  mezcladorBasico.y=-this.y - 1024;
  this.touchable=true;
}","public Paleta(String name){
  super(name);
  mezcladorBasico=new MezcladorBasico(this);
  this.addActor(colorCyan);
  colorCyan.x=192;
  colorCyan.y=433;
  colorCyan.clickListener=evento;
  this.addActor(colorMagenta);
  colorMagenta.x=108;
  colorMagenta.y=421;
  colorMagenta.clickListener=evento;
  this.addActor(colorAmarillo);
  colorAmarillo.x=272;
  colorAmarillo.y=393;
  colorAmarillo.clickListener=evento;
  this.addActor(colorRojo);
  bGuardar.x=00;
  bGuardar.y=00;
  this.addActor(colorBlanco);
  colorBlanco.x=325;
  colorBlanco.y=100;
  colorBlanco.clickListener=evento;
  this.addActor(colorNegro);
  colorNegro.x=287;
  colorNegro.y=34;
  colorNegro.clickListener=evento;
  bGuardar.clickListener=new ClickListener(){
    @Override public void clicked(    Button arg0){
      MezclaColores.lienzo.guardarCuadro();
      genial.play();
    }
  }
;
  this.addActor(bGuardar);
  this.addActor(Fondo);
  Fondo.touchable=false;
  this.addActor(sacaMezclador);
  sacaMezclador.x=290;
  sacaMezclador.y=200;
  sacaMezclador.clickListener=new ClickListener(){
    @Override public void clicked(    Button boton){
      mezcladorBasico.aleatorizaColores();
      eligeColores();
      mezcladorBasico.setColor1(colores[0][0],colores[0][1],colores[0][2],1);
      mezcladorBasico.setColor2(colores[1][0],colores[1][1],colores[1][2],1);
      mezcladorBasico.setColorObjetivo(colores[2][0],colores[2][1],colores[2][2],1);
      mezcladorBasico.action(MoveTo.$(-600,0,2));
    }
  }
;
  this.addActor(mezcladorBasico);
  mezcladorBasico.x=-600;
  mezcladorBasico.y=-this.y - 1024;
  this.touchable=true;
}"
46454,"public void eligeColores(){
switch (coloresDisponibles) {
case 0:
    colores[0][0]=1;
  colores[0][1]=0;
colores[0][2]=1;
colores[1][0]=1;
colores[1][1]=1;
colores[1][2]=0;
colores[2][0]=0;
colores[2][1]=1;
colores[2][2]=0;
break;
case 1:
colores[0][0]=1;
colores[0][1]=0;
colores[0][2]=1;
colores[1][0]=1;
colores[1][1]=1;
colores[1][2]=0;
colores[2][0]=1;
colores[2][1]=0;
colores[2][2]=0;
break;
case 2:
colores[0][0]=1;
colores[0][1]=0;
colores[0][2]=1;
colores[1][0]=0;
colores[1][1]=1;
colores[1][2]=1;
colores[2][0]=0;
colores[2][1]=0;
colores[2][2]=1;
break;
}
}","public void eligeColores(){
switch (coloresDisponibles) {
case 0:
    colores[0][0]=0;
  colores[0][1]=1;
colores[0][2]=1;
colores[1][0]=1;
colores[1][1]=1;
colores[1][2]=0;
colores[2][0]=0;
colores[2][1]=1;
colores[2][2]=0;
break;
case 1:
colores[0][0]=1;
colores[0][1]=0;
colores[0][2]=1;
colores[1][0]=1;
colores[1][1]=1;
colores[1][2]=0;
colores[2][0]=1;
colores[2][1]=0;
colores[2][2]=0;
break;
case 2:
colores[0][0]=1;
colores[0][1]=0;
colores[0][2]=1;
colores[1][0]=0;
colores[1][1]=1;
colores[1][2]=1;
colores[2][0]=0;
colores[2][1]=0;
colores[2][2]=1;
break;
}
}"
46455,"/** 
 * Base constructor for custom member types. The word size can be zero, in which case the   {@link #offset}of the member does not change, only   {@link #bitIndex} isincremented.
 * @param bitLength the number of bits or <code>0</code>to force next member on next word boundary.
 * @param wordSize the word size in bytes used when accessingthis member data or <code>0</code> if the data is accessed at the bit level.
 */
protected Member(int bitLength,int wordSize){
  _bitLength=bitLength;
  if (_resetIndex) {
    _index=0;
  }
  if ((wordSize == 0) || ((bitLength != 0) && (wordSize == _wordSize) && ((_bitsUsed + bitLength) <= (wordSize << 3)))) {
    _offset=_index - _wordSize;
    _bitIndex=_bitsUsed;
    _bitsUsed+=bitLength;
    while (_bitsUsed > (_wordSize << 3)) {
      _index++;
      _wordSize++;
      _size=MathLib.max(_size,_index);
    }
    return;
  }
  if (!isPacked()) {
    if ((_alignment < wordSize)) {
      _alignment=wordSize;
    }
    int misaligned=_index % wordSize;
    if (misaligned != 0) {
      _index+=wordSize - misaligned;
    }
  }
  _offset=_index;
  _bitIndex=0;
  _index+=MathLib.max(wordSize,(bitLength + 7) >> 3);
  _wordSize=wordSize;
  _bitsUsed=bitLength;
  _size=MathLib.max(_size,_index);
}","/** 
 * Base constructor for custom member types. The word size can be zero, in which case the   {@link #offset}of the member does not change, only   {@link #bitIndex} isincremented.
 * @param bitLength the number of bits or <code>0</code>to force next member on next word boundary.
 * @param wordSize the word size in bytes used when accessingthis member data or <code>0</code> if the data is accessed at the bit level.
 */
protected Member(int bitLength,int wordSize){
  _bitLength=bitLength;
  if (_resetIndex) {
    _index=0;
  }
  if ((wordSize == 0) || ((bitLength != 0) && (wordSize == _wordSize) && ((_bitsUsed + bitLength) <= (wordSize << 3)))) {
    _offset=_index - _wordSize;
    _bitIndex=_bitsUsed;
    _bitsUsed+=bitLength;
    while (_bitsUsed > (_wordSize << 3)) {
      _index++;
      _wordSize++;
      _length=MathLib.max(_length,_index);
    }
    return;
  }
  if (!isPacked()) {
    if ((_alignment < wordSize)) {
      _alignment=wordSize;
    }
    int misaligned=_index % wordSize;
    if (misaligned != 0) {
      _index+=wordSize - misaligned;
    }
  }
  _offset=_index;
  _bitIndex=0;
  _index+=MathLib.max(wordSize,(bitLength + 7) >> 3);
  _wordSize=wordSize;
  _bitsUsed=bitLength;
  _length=MathLib.max(_length,_index);
}"
46456,"/** 
 * Defines the specified struct as inner of this struct.
 * @param struct the inner struct.
 * @return the specified struct.
 * @throws IllegalArgumentException if the specified struct is alreadyan inner struct.
 */
protected Struct inner(Struct struct){
  if (struct._outer != null)   throw new IllegalArgumentException(""String_Node_Str"");
  Member inner=new Member(struct._size << 3,struct._alignment);
  struct._outer=this;
  struct._outerOffset=inner.offset();
  return (Struct)struct;
}","/** 
 * Defines the specified struct as inner of this struct.
 * @param struct the inner struct.
 * @return the specified struct.
 * @throws IllegalArgumentException if the specified struct is alreadyan inner struct.
 */
protected Struct inner(Struct struct){
  if (struct._outer != null)   throw new IllegalArgumentException(""String_Node_Str"");
  Member inner=new Member(struct.size() << 3,struct._alignment);
  struct._outer=this;
  struct._outerOffset=inner.offset();
  return (Struct)struct;
}"
46457,"/** 
 * Returns the size in bytes of this struct. The size includes tail padding to satisfy the struct word size requirement (defined by the largest word size of its   {@link Member members}).
 * @return the C/C++ <code>sizeof(this)</code>.
 */
public final int size(){
  return _size;
}","/** 
 * Returns the size in bytes of this struct. The size includes tail padding to satisfy the struct word size requirement (defined by the largest word size of its   {@link Member members}).
 * @return the C/C++ <code>sizeof(this)</code>.
 */
public final int size(){
  return (_alignment <= 1) ? _length : ((_length + _alignment - 1) / _alignment) * _alignment;
}"
46458,"@Override public void setField(Object obj,Class forClass,Class type){
synchronized (forClass) {
    FastMap typeToField=(FastMap)_fields.get(forClass);
    if ((typeToField != null) && typeToField.containsKey(type))     throw new IllegalArgumentException(""String_Node_Str"" + type + ""String_Node_Str""+ forClass);
    if (typeToField == null) {
      typeToField=new FastMap();
      _fields.put(forClass,typeToField);
    }
    typeToField.put(type,obj);
  }
}","public void setField(Object obj,Class forClass,Class type){
synchronized (forClass) {
    FastMap typeToField=(FastMap)_fields.get(forClass);
    if ((typeToField != null) && typeToField.containsKey(type))     throw new IllegalArgumentException(""String_Node_Str"" + type + ""String_Node_Str""+ forClass);
    if (typeToField == null) {
      typeToField=new FastMap();
      _fields.put(forClass,typeToField);
    }
    typeToField.put(type,obj);
  }
}"
46459,"@Override public Object getField(Class forClass,Class type,boolean inherited){
  ClassInitializer.initialize(forClass);
  return getField2(forClass,type,inherited);
}","public Object getField(Class forClass,Class type,boolean inherited){
  ClassInitializer.initialize(forClass);
  return getField2(forClass,type,inherited);
}"
46460,"/** 
 * Performs Built-In-Tests.
 */
private static void builtInTests() throws Exception {
  Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
  TestContext.run(new ContextTestSuite());
  TestContext.run(new TypeFormatTestSuite());
  TestContext.info(""String_Node_Str"");
  TestContext.info(""String_Node_Str"");
}","/** 
 * Performs Built-In-Tests.
 */
private static void builtInTests() throws Exception {
  Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
  TestContext.run(new ContextTestSuite());
  TestContext.run(new TypeFormatTestSuite());
  TestContext.run(new StructTestSuite());
  TestContext.info(""String_Node_Str"");
  TestContext.info(""String_Node_Str"");
}"
46461,"public static void main(String[] args){
  Random r=new Random();
  String choice;
  if (args.length > 0) {
    choice=args[r.nextInt(args.length)];
  }
 else {
    Restaurant[] choices=Restaurant.values();
    choice=choices[r.nextInt(choices.length)].name();
  }
  System.out.println(""String_Node_Str"" + choice);
}","public static void main(String[] args){
  Random r=new Random();
  String choice;
  if (args.length > 0) {
    if (args.length == 1 && ""String_Node_Str"".equalsIgnoreCase(args[0])) {
      choice=Restaurant.A2ChinaRestaurant.name();
    }
 else {
      choice=args[r.nextInt(args.length)];
    }
  }
 else {
    Restaurant[] choices=Restaurant.values();
    choice=choices[r.nextInt(choices.length)].name();
  }
  System.out.println(""String_Node_Str"" + choice);
}"
46462,"public static void main(String[] args){
  Random r=new Random();
  Restaurant[] restaurantos=Restaurant.values();
  Restaurant chosenEatingThing=restaurantos[r.nextInt(restaurantos.length)];
  System.out.println(""String_Node_Str"" + chosenEatingThing.name());
}","public static void main(String[] args){
  Restaurant chosenEatingThing=Restaurant.A2ChinaRestaurant;
  System.out.println(""String_Node_Str"" + chosenEatingThing.name());
}"
46463,"public FoodMoverUser getOwner(){
  return (FoodMoverUser)entity.getProperty(OWNER_KEY);
}","public FoodMoverUser getOwner(){
  FoodMoverUser foodMoverUser=new FoodMoverUser();
  foodMoverUser.setUser((User)entity.getProperty(OWNER_KEY));
  return foodMoverUser;
}"
46464,"public static Collection<FoodListing> getListingsFor(FoodMoverUser currentUser){
  Objectify ofy=ObjectifyUtil.get();
  return ofy.query(FoodListing.class).filter(OWNER_VAR_NAME,currentUser.getKey()).list();
}","public static Collection<FoodListing> getListingsFor(FoodMoverUser user){
  Objectify ofy=ObjectifyUtil.get();
  return ofy.query(FoodListing.class).filter(OWNER_VAR_NAME,user.getKey()).list();
}"
46465,"/** 
 * Get the currently logged in user.
 * @return null if not user is logged in <br />the FoodMoverUser wrapping the logged in user. If no FoodMoverUser already wrapping the current user already exists, it will be created and saved.
 */
public static FoodMoverUser getCurrentUser(){
  User currRawUser=UserServiceFactory.getUserService().getCurrentUser();
  if (currRawUser == null) {
    return null;
  }
  Objectify objectify=ObjectifyUtil.get();
  FoodMoverUser foodMoverUser=objectify.query(FoodMoverUser.class).filter(USER_VAR_NAME,currRawUser).get();
  if (foodMoverUser != null) {
    return foodMoverUser;
  }
  foodMoverUser=new FoodMoverUser();
  foodMoverUser.setUser(currRawUser);
  objectify.put(foodMoverUser);
  return foodMoverUser;
}","/** 
 * Get the currently logged in user.
 * @return null if not user is logged in <br />the FoodMoverUser wrapping the logged in user. If no FoodMoverUser already wrapping the current user already exists, it will be created and saved.
 */
public static FoodMoverUser getCurrentUser(){
  User currRawUser=UserServiceFactory.getUserService().getCurrentUser();
  if (currRawUser == null) {
    return null;
  }
  Objectify objectify=ObjectifyUtil.get();
  FoodMoverUser foodMoverUser=objectify.query(FoodMoverUser.class).filter(USER_VAR_NAME,keyOfUser(currRawUser)).get();
  if (foodMoverUser != null) {
    return foodMoverUser;
  }
  foodMoverUser=new FoodMoverUser();
  foodMoverUser.setUser(currRawUser);
  objectify.put(foodMoverUser);
  return foodMoverUser;
}"
46466,"private void setUser(User user){
  userKey=new Key<User>(User.class,user.getEmail());
}","private void setUser(User user){
  userKey=keyOfUser(user);
}"
46467,"public static List<FoodListing> getMyFoodListings(){
  List<FoodListing> result=new ArrayList<FoodListing>();
  FoodMoverUser me=FoodMoverUser.getCurrentUser();
  Query q=new Query(""String_Node_Str"");
  q.addFilter(""String_Node_Str"",Query.FilterOperator.EQUAL,me.getRawUserObject());
  DatastoreService data=DatastoreServiceFactory.getDatastoreService();
  PreparedQuery prepQ=data.prepare(q);
  for (  Entity found : prepQ.asIterable()) {
    FoodListing resultItem=new FoodListing(found);
    result.add(resultItem);
  }
  return result;
}","public static List<FoodListing> getMyFoodListings(){
  List<FoodListing> result=new ArrayList<FoodListing>();
  FoodMoverUser me=FoodMoverUser.getCurrentUser();
  Query q=new Query(""String_Node_Str"");
  q.addFilter(""String_Node_Str"",Query.FilterOperator.EQUAL,me.getRawUserObject());
  DatastoreService data=DatastoreServiceFactory.getDatastoreService();
  PreparedQuery prepQ=data.prepare(q);
  for (  Entity found : prepQ.asIterable()) {
    FoodListing resultItem=new FoodListing(found);
    if (resultItem.expired()) {
      continue;
    }
    result.add(resultItem);
  }
  return result;
}"
46468,"public static List<FoodListing> findFoodListings(Float longitude,Float latitude,Float distance){
  List<FoodListing> result=new ArrayList<FoodListing>();
  Query q=new Query(""String_Node_Str"");
  q.addFilter(FoodListing.LAT_KEY,Query.FilterOperator.GREATER_THAN_OR_EQUAL,latitude - distance);
  q.addFilter(FoodListing.LAT_KEY,Query.FilterOperator.LESS_THAN_OR_EQUAL,latitude + distance);
  DatastoreService data=DatastoreServiceFactory.getDatastoreService();
  PreparedQuery prepQ=data.prepare(q);
  for (  Entity found : prepQ.asIterable()) {
    FoodListing resultItem=new FoodListing(found);
    if (resultItem.getLongitude() >= (longitude - distance) && resultItem.getLongitude() <= (longitude + distance)) {
      result.add(resultItem);
    }
  }
  return result;
}","public static List<FoodListing> findFoodListings(Float longitude,Float latitude,Float distance){
  List<FoodListing> result=new ArrayList<FoodListing>();
  Query q=new Query(""String_Node_Str"");
  q.addFilter(FoodListing.LAT_KEY,Query.FilterOperator.GREATER_THAN_OR_EQUAL,latitude - distance);
  q.addFilter(FoodListing.LAT_KEY,Query.FilterOperator.LESS_THAN_OR_EQUAL,latitude + distance);
  DatastoreService data=DatastoreServiceFactory.getDatastoreService();
  PreparedQuery prepQ=data.prepare(q);
  for (  Entity found : prepQ.asIterable()) {
    FoodListing resultItem=new FoodListing(found);
    if (!resultItem.expired() && resultItem.getLongitude() >= (longitude - distance) && resultItem.getLongitude() <= (longitude + distance)) {
      result.add(resultItem);
    }
  }
  return result;
}"
46469,"public float getLat(){
  return ((Float)entity.getProperty(LAT_KEY)).floatValue();
}","public float getLat(){
  Object lat=entity.getProperty(LAT_KEY);
  if (lat instanceof Double) {
    lat=((Double)lat).floatValue();
  }
  return (Float)lat;
}"
46470,"public float getLongitude(){
  return ((Float)entity.getProperty(LONGITUDE_KEY)).floatValue();
}","public float getLongitude(){
  Object lng=entity.getProperty(LONGITUDE_KEY);
  if (lng instanceof Double) {
    lng=((Double)lng).floatValue();
  }
  return (Float)lng;
}"
46471,"public FoodListing(Entity entity){
  this.entity=entity;
}","@SuppressWarnings(""String_Node_Str"") public FoodListing(Entity entity){
  this.entity=entity;
  setDateOfCreation(new Date());
  final Date expiration=new Date();
  expiration.setHours(expiration.getHours() + EXPIRATION_HOURS);
  setDateOfExpiration(expiration);
}"
46472,"public Date getDateOfExpiration(){
  if (entity.getProperty(DATE_OF_EXPIRATION_KEY) != null) {
    return new Date((Long)entity.getProperty(DATE_OF_EXPIRATION_KEY));
  }
 else {
    return null;
  }
}","public Date getDateOfExpiration(){
  return new Date((Long)entity.getProperty(DATE_OF_EXPIRATION_KEY));
}"
46473,"public Date getDateOfCreation(){
  if (entity.getProperty(DATE_OF_CREATION_KEY) != null) {
    return new Date((Long)entity.getProperty(DATE_OF_CREATION_KEY));
  }
 else {
    return null;
  }
}","public Date getDateOfCreation(){
  return new Date((Long)entity.getProperty(DATE_OF_CREATION_KEY));
}"
46474,"public void notifyUser(FoodListing listing){
  if (getNotificationType().equals(""String_Node_Str"")) {
    Properties props=new Properties();
    Session session=Session.getDefaultInstance(props,null);
    MimeMessage msg=new MimeMessage(session);
    try {
      msg.setFrom(new InternetAddress(""String_Node_Str"",""String_Node_Str""));
      msg.setSubject(""String_Node_Str"");
      msg.setText(""String_Node_Str"" + listing.getDescription());
      Transport.send(msg);
    }
 catch (    MessagingException e) {
      throw new RuntimeException(e);
    }
catch (    UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
  }
}","public void notifyUser(FoodListing listing){
  if (!closeEnoughTo(listing)) {
    return;
  }
  if (getNotificationType().equals(""String_Node_Str"")) {
    Properties props=new Properties();
    Session session=Session.getDefaultInstance(props,null);
    MimeMessage msg=new MimeMessage(session);
    try {
      msg.setFrom(new InternetAddress(""String_Node_Str"",""String_Node_Str""));
      msg.setSubject(""String_Node_Str"");
      msg.setText(""String_Node_Str"" + listing.getDescription());
      Transport.send(msg);
    }
 catch (    MessagingException e) {
      throw new RuntimeException(e);
    }
catch (    UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
  }
}"
46475,"@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (req.getParameter(""String_Node_Str"") == null)   throw new IllegalStateException(""String_Node_Str"");
  if (req.getParameter(""String_Node_Str"") == null)   throw new IllegalStateException(""String_Node_Str"");
  if (req.getParameter(""String_Node_Str"") == null)   throw new IllegalStateException(""String_Node_Str"");
  if (req.getParameter(""String_Node_Str"") == null)   throw new IllegalStateException(""String_Node_Str"");
  float lat=Float.parseFloat(req.getParameter(""String_Node_Str""));
  float longitude=Float.parseFloat(req.getParameter(""String_Node_Str""));
  int radius=Integer.parseInt(req.getParameter(""String_Node_Str"").toString());
  String type=req.getParameter(""String_Node_Str"").toString();
  FoodListingNotification notification=new FoodListingNotification();
  notification.setLat(lat);
  notification.setLongitude(longitude);
  notification.setNotificationType(type);
  notification.setRadius(radius);
  notification.setOwner(FoodMoverUser.getCurrentUser());
  notification.put();
  resp.getWriter().println(KeyFactory.keyToString(notification.getKey()));
}","@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (req.getParameter(""String_Node_Str"") == null)   throw new IllegalStateException(""String_Node_Str"");
  if (req.getParameter(""String_Node_Str"") == null)   throw new IllegalStateException(""String_Node_Str"");
  if (req.getParameter(""String_Node_Str"") == null)   throw new IllegalStateException(""String_Node_Str"");
  if (req.getParameter(""String_Node_Str"") == null)   throw new IllegalStateException(""String_Node_Str"");
  float lat=Float.parseFloat(req.getParameter(""String_Node_Str""));
  float longitude=Float.parseFloat(req.getParameter(""String_Node_Str""));
  int radius=Integer.parseInt(req.getParameter(""String_Node_Str"").toString());
  String type=req.getParameter(""String_Node_Str"").toString();
  FoodListingNotification notification=new FoodListingNotification();
  notification.setLat(lat);
  notification.setLongitude(longitude);
  notification.setNotificationType(type);
  notification.setRadiusKm(radius);
  notification.setOwner(FoodMoverUser.getCurrentUser());
  notification.put();
  resp.getWriter().println(KeyFactory.keyToString(notification.getKey()));
}"
46476,"public float getLat(){
  return ((Double)entity.getProperty(LAT_KEY)).floatValue();
}","public float getLat(){
  return ((Float)entity.getProperty(LAT_KEY)).floatValue();
}"
46477,"public float getLongitude(){
  return ((Double)entity.getProperty(LONGITUDE_KEY)).floatValue();
}","public float getLongitude(){
  return ((Float)entity.getProperty(LONGITUDE_KEY)).floatValue();
}"
46478,"public float getLat(){
  return ((Double)entity.getProperty(LAT_KEY)).floatValue();
}","public float getLat(){
  return ((Float)entity.getProperty(LAT_KEY)).floatValue();
}"
46479,"public float getLongitude(){
  return ((Double)entity.getProperty(LONGITUDE_KEY)).floatValue();
}","public float getLongitude(){
  return ((Float)entity.getProperty(LONGITUDE_KEY)).floatValue();
}"
46480,"private boolean closeEnoughTo(FoodListing listing){
  final int EARTH_RADIUS_KM=6371;
  float deltaLat=getLat() - listing.getLat();
  float deltaLng=getLongitude() - listing.getLongitude();
  double a=Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(Math.toRadians(listing.getLat())) * Math.cos(Math.toRadians(getLat())) * Math.sin(deltaLng / 2)* Math.sin(deltaLng / 2);
  double c=Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));
  double distance=EARTH_RADIUS_KM * c;
  return getRadius() < distance;
}","public boolean closeEnoughTo(FoodListing listing){
  final int EARTH_RADIUS_KM=6371;
  double lat1=Math.toRadians(listing.getLat());
  double lng1=Math.toRadians(listing.getLongitude());
  double lat2=Math.toRadians(getLat());
  double lng2=Math.toRadians(getLongitude());
  double distance=Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(lng2 - lng1)) * EARTH_RADIUS_KM;
  return distance < getRadius();
}"
46481,"public void rdb_load(ByteBuffer file,Visitor visitor) throws Exception {
  String header=readStrFromFile(file,5);
  if (!header.equals(""String_Node_Str"")) {
    throw new Exception(""String_Node_Str"");
  }
  String version=readStrFromFile(file,4);
  int rdbVersion=Integer.parseInt(version);
  if (rdbVersion < 1 || 2 < rdbVersion) {
    throw new Exception(""String_Node_Str"" + rdbVersion);
  }
  int type=0;
  do {
    type=rdbLoadType(file);
    if (type == REDIS_EXPIRETIME) {
      rdbLoadTime(file);
      type=rdbLoadType(file);
    }
    if (type == REDIS_SELECTDB) {
      rdb_load_length(file);
    }
    if (type != REDIS_EOF && type != REDIS_SELECTDB) {
      String key=rdbLoadStringObject(file);
      String value=rdbLoadObject(type,file);
      visitor.callback(key,value);
    }
  }
 while (type != REDIS_EOF);
}","public void rdb_load(ByteBuffer file,Visitor visitor) throws Exception {
  String header=readStrFromFile(file,5);
  if (!header.equals(""String_Node_Str"")) {
    throw new Exception(""String_Node_Str"");
  }
  String version=readStrFromFile(file,4);
  int rdbVersion=Integer.parseInt(version);
  if (rdbVersion < 1 || 2 < rdbVersion) {
    throw new Exception(""String_Node_Str"" + rdbVersion);
  }
  int type=0;
  int dbSelect=1;
  do {
    type=rdbLoadType(file);
    if (type == REDIS_EXPIRETIME) {
      rdbLoadTime(file);
      type=rdbLoadType(file);
    }
    if (type == REDIS_SELECTDB) {
      if (dbSelect-- > 0) {
        rdb_load_length(file);
      }
 else {
        break;
      }
    }
    if (type != REDIS_EOF && type != REDIS_SELECTDB) {
      String key=rdbLoadStringObject(file);
      String value=rdbLoadObject(type,file);
      visitor.callback(key,value);
    }
  }
 while (type != REDIS_EOF);
}"
46482,"public Object[] rdb_load_length(ByteBuffer file){
  Boolean isEncoded=false;
  byte buffer=file.get();
  byte type=(byte)((buffer & 0xC0) >> 6);
switch (type) {
case REDIS_RDB_6BITLEN:
    return new Object[]{isEncoded,buffer & 0x3F};
case REDIS_RDB_ENCVAL:
  isEncoded=true;
return new Object[]{isEncoded,buffer & 0x3F};
case REDIS_RDB_14BITLEN:
return new Object[]{isEncoded,((buffer & 0x3f) << 8) | file.get()};
default :
int retVal=0;
for (int i=0; i < 4; i++) retVal=retVal << 8 | file.get();
return new Object[]{isEncoded,retVal};
}
}","public Object[] rdb_load_length(ByteBuffer file){
  Boolean isEncoded=false;
  byte buffer=file.get();
  byte type=(byte)((buffer & 0xC0) >> 6);
switch (type) {
case REDIS_RDB_6BITLEN:
    return new Object[]{isEncoded,buffer & 0x3F};
case REDIS_RDB_ENCVAL:
  isEncoded=true;
return new Object[]{isEncoded,(buffer & 0x3F)};
case REDIS_RDB_14BITLEN:
return new Object[]{isEncoded,(((buffer & 0x3f) << 8) | (file.get()) & 0xFF)};
default :
int retVal=0;
for (int i=0; i < 4; i++) retVal=retVal << 8 | file.get();
return new Object[]{isEncoded,retVal};
}
}"
46483,"public Replicator(final InetAddress host,final int port){
  keys=new HashMap<String,String>();
  try {
    this.socket=new Socket(host,port);
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          connect();
          while (socket.isConnected()) {
            InputStream in=socket.getInputStream();
            String line=readLine(in);
            if (line.charAt(0) == '*') {
              int argumentCount=Integer.parseInt(line.substring(1).trim());
              line=readLine(in);
              int command_length=Integer.parseInt(line.substring(1).trim());
              String command=readFor(in,command_length);
              if (!command.equals(""String_Node_Str""))               break;
              skipBytes(in,2);
              line=readLine(in);
              int keyLength=Integer.parseInt(line.substring(1).trim());
              String key=readFor(in,keyLength);
              skipBytes(in,2);
              line=readLine(in);
              int valueLength=Integer.parseInt(line.substring(1).trim());
              String value=readFor(in,valueLength);
              skipBytes(in,2);
              keys.put(key,value);
              System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ value);
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
,""String_Node_Str"");
    thread.start();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public Replicator(final InetAddress host,final int port){
  keys=new HashMap<String,String>();
  try {
    this.socket=new Socket(host,port);
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          connect();
          while (socket.isConnected()) {
            InputStream in=socket.getInputStream();
            String line=readLine(in);
            if (line.charAt(0) == '*') {
              Integer.parseInt(line.substring(1).trim());
              line=readLine(in);
              int command_length=Integer.parseInt(line.substring(1).trim());
              String command=readFor(in,command_length);
              if (!command.equals(""String_Node_Str""))               break;
              skipBytes(in,2);
              line=readLine(in);
              int keyLength=Integer.parseInt(line.substring(1).trim());
              String key=readFor(in,keyLength);
              skipBytes(in,2);
              line=readLine(in);
              int valueLength=Integer.parseInt(line.substring(1).trim());
              String value=readFor(in,valueLength);
              skipBytes(in,2);
              keys.put(key,value);
              System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ value);
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
,""String_Node_Str"");
    thread.start();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
46484,"@Override public void run(){
  try {
    connect();
    while (socket.isConnected()) {
      InputStream in=socket.getInputStream();
      String line=readLine(in);
      if (line.charAt(0) == '*') {
        int argumentCount=Integer.parseInt(line.substring(1).trim());
        line=readLine(in);
        int command_length=Integer.parseInt(line.substring(1).trim());
        String command=readFor(in,command_length);
        if (!command.equals(""String_Node_Str""))         break;
        skipBytes(in,2);
        line=readLine(in);
        int keyLength=Integer.parseInt(line.substring(1).trim());
        String key=readFor(in,keyLength);
        skipBytes(in,2);
        line=readLine(in);
        int valueLength=Integer.parseInt(line.substring(1).trim());
        String value=readFor(in,valueLength);
        skipBytes(in,2);
        keys.put(key,value);
        System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ value);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  try {
    connect();
    while (socket.isConnected()) {
      InputStream in=socket.getInputStream();
      String line=readLine(in);
      if (line.charAt(0) == '*') {
        Integer.parseInt(line.substring(1).trim());
        line=readLine(in);
        int command_length=Integer.parseInt(line.substring(1).trim());
        String command=readFor(in,command_length);
        if (!command.equals(""String_Node_Str""))         break;
        skipBytes(in,2);
        line=readLine(in);
        int keyLength=Integer.parseInt(line.substring(1).trim());
        String key=readFor(in,keyLength);
        skipBytes(in,2);
        line=readLine(in);
        int valueLength=Integer.parseInt(line.substring(1).trim());
        String value=readFor(in,valueLength);
        skipBytes(in,2);
        keys.put(key,value);
        System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ value);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
46485,"public String rdbLoadLzfStringObject(ByteBuffer file){
  try {
    Integer compressed_length=(Integer)rdb_load_length(file)[1];
    Integer length=(Integer)rdb_load_length(file)[1];
    byte[] buffer=new byte[compressed_length];
    byte[] output=new byte[length];
    output=LZFDecoder.decode(buffer);
    return new String(output);
  }
 catch (  Exception ex) {
    return null;
  }
}","public String rdbLoadLzfStringObject(ByteBuffer file){
  try {
    int i=0;
    byte Z_BYTE='Z';
    byte V_BYTE='V';
    byte COMPRESSED_TYPE_BYTE=1;
    int compressed_length=(Integer)rdb_load_length(file)[1];
    int length=(Integer)(rdb_load_length(file)[1]);
    byte[] buffer=new byte[compressed_length + 7];
    byte[] output;
    buffer[i++]=Z_BYTE;
    buffer[i++]=V_BYTE;
    buffer[i++]=COMPRESSED_TYPE_BYTE;
    buffer[i++]=(byte)(compressed_length >> 8);
    buffer[i++]=(byte)(compressed_length);
    buffer[i++]=(byte)(length >> 8);
    buffer[i++]=(byte)(length);
    for (; i < compressed_length + 7; i++)     buffer[i]=file.get();
    output=LZFDecoder.decode(buffer);
    return new String(output);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return null;
  }
}"
46486,"/** 
 * Perform lexical analysis on the file given by filename
 * @param filename Name of source file to be parsed
 */
public Lexer(String filename){
  try {
    Scanner in=new Scanner(new File(filename));
    System.out.println(parseStm(in.nextLine().replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
    System.exit(-3);
  }
}","/** 
 * Perform lexical analysis on the file given by filename
 * @param filename Name of source file to be parsed
 */
public Lexer(String filename){
  try {
    Scanner in=new Scanner(new File(filename));
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(parseStm(in.nextLine().replaceAll(""String_Node_Str"",""String_Node_Str"")));
    System.out.println(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
    System.exit(-3);
  }
}"
46487,"public Assign(Object O1,Object O2){
  o1=Lexer.parseExp(O1);
  o2=Lexer.parseStm(O2);
}","public Assign(String O1,Object O2){
  o1=O1;
  o2=Lexer.parseStm(O2);
}"
46488,"private void createExampleStructure(){
  try {
    File exDir=new File(baseDir,""String_Node_Str"");
    exDir.mkdirs();
    System.out.println(""String_Node_Str"" + exDir.getAbsolutePath());
    File vdi=new File(exDir,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + vdi.getAbsolutePath() + ""String_Node_Str"");
    fillFile(vdi,1024 * 1024 * 50);
    File cfg=new File(exDir,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + cfg.getAbsolutePath() + ""String_Node_Str"");
    BufferedWriter bw=new BufferedWriter(new FileWriter(cfg));
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.close();
    File jksFile1=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"");
    File jksFile0=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"");
    if (!jksFile0.exists() || !jksFile1.exists()) {
      System.err.println(""String_Node_Str"");
    }
    Builder builder=KeyStore.Builder.newInstance(""String_Node_Str"",null,jksFile0,new KeyStore.PasswordProtection(""String_Node_Str"".toCharArray()));
    KeyStore keystoreTmp=builder.getKeyStore();
    X509Certificate cert=(X509Certificate)keystoreTmp.getCertificate(""String_Node_Str"");
    File userPemFile=new File(exDir,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + userPemFile.getAbsolutePath() + ""String_Node_Str"");
    PemToolkit.writePem(cert,userPemFile);
    builder=KeyStore.Builder.newInstance(""String_Node_Str"",null,jksFile1,new KeyStore.PasswordProtection(""String_Node_Str"".toCharArray()));
    keystoreTmp=builder.getKeyStore();
    cert=(X509Certificate)keystoreTmp.getCertificate(""String_Node_Str"");
    userPemFile=new File(exDir,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + userPemFile.getAbsolutePath() + ""String_Node_Str"");
    PemToolkit.writePem(cert,userPemFile);
    File ca=new File(exDir,""String_Node_Str"");
    File crt=new File(exDir,""String_Node_Str"");
    File key=new File(exDir,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + ca.getAbsolutePath() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + crt.getAbsolutePath() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + key.getAbsolutePath() + ""String_Node_Str"");
    fillFile(ca,32);
    fillFile(crt,32);
    fillFile(key,32);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  System.out.println(""String_Node_Str"");
}","private void createExampleStructure(){
  try {
    File exDir=new File(baseDir,""String_Node_Str"");
    exDir.mkdirs();
    System.out.println(""String_Node_Str"" + exDir.getAbsolutePath());
    File vdi=new File(exDir,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + vdi.getAbsolutePath() + ""String_Node_Str"");
    fillFile(vdi,1024 * 1024 * 50);
    File cfg=new File(exDir,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + cfg.getAbsolutePath() + ""String_Node_Str"");
    BufferedWriter bw=new BufferedWriter(new FileWriter(cfg));
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.write(""String_Node_Str"");
    bw.close();
    File jksFile1=new File(TestPKI.getPKIDirectory(),""String_Node_Str"");
    File jksFile0=new File(TestPKI.getPKIDirectory(),""String_Node_Str"");
    if (!jksFile0.exists() || !jksFile1.exists()) {
      System.err.println(""String_Node_Str"");
    }
    Builder builder=KeyStore.Builder.newInstance(""String_Node_Str"",null,jksFile0,new KeyStore.PasswordProtection(""String_Node_Str"".toCharArray()));
    KeyStore keystoreTmp=builder.getKeyStore();
    X509Certificate cert=(X509Certificate)keystoreTmp.getCertificate(""String_Node_Str"");
    File userPemFile=new File(exDir,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + userPemFile.getAbsolutePath() + ""String_Node_Str"");
    PemToolkit.writePem(cert,userPemFile);
    builder=KeyStore.Builder.newInstance(""String_Node_Str"",null,jksFile1,new KeyStore.PasswordProtection(""String_Node_Str"".toCharArray()));
    keystoreTmp=builder.getKeyStore();
    cert=(X509Certificate)keystoreTmp.getCertificate(""String_Node_Str"");
    userPemFile=new File(exDir,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + userPemFile.getAbsolutePath() + ""String_Node_Str"");
    PemToolkit.writePem(cert,userPemFile);
    File ca=new File(exDir,""String_Node_Str"");
    File crt=new File(exDir,""String_Node_Str"");
    File key=new File(exDir,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + ca.getAbsolutePath() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + crt.getAbsolutePath() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + key.getAbsolutePath() + ""String_Node_Str"");
    fillFile(ca,32);
    fillFile(crt,32);
    fillFile(key,32);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  System.out.println(""String_Node_Str"");
}"
46489,"public void https() throws Exception {
  TrustManagerFactory tmf=TrustManagerFactory.getInstance(""String_Node_Str"");
  KeyStore ts=KeyStore.getInstance(""String_Node_Str"");
  ts.load(new FileInputStream(new File(System.getProperty(""String_Node_Str""),""String_Node_Str"")),""String_Node_Str"".toCharArray());
  tmf.init(ts);
  KeyManagerFactory kmf=KeyManagerFactory.getInstance(""String_Node_Str"");
  Builder clientCrtBuilder=KeyStore.Builder.newInstance(""String_Node_Str"",null,new File(System.getProperty(""String_Node_Str""),""String_Node_Str""),new KeyStore.PasswordProtection(""String_Node_Str"".toCharArray()));
  KeyStoreBuilderParameters keyStoreBuilderParameters=new KeyStoreBuilderParameters(clientCrtBuilder);
  kmf.init(keyStoreBuilderParameters);
  SSLContext ctx=SSLContext.getInstance(""String_Node_Str"");
  ctx.init(kmf.getKeyManagers(),tmf.getTrustManagers(),null);
  SSLSocketFactory factory=ctx.getSocketFactory();
  CubeManage service=new CubeManage(getClass().getResource(""String_Node_Str""));
  CubeManagePortType port=service.getCubeManagePort();
  Client proxy=ClientProxy.getClient(port);
  ((BindingProvider)port).getRequestContext().put(BindingProvider.SESSION_MAINTAIN_PROPERTY,true);
  HTTPConduit conduit=(HTTPConduit)proxy.getConduit();
  TLSClientParameters tlsParam=new TLSClientParameters();
  tlsParam.setDisableCNCheck(false);
  tlsParam.setSSLSocketFactory(factory);
  addFilters(tlsParam);
  conduit.setTlsClientParameters(tlsParam);
  IdentityToken token=new IdentityToken(clientCrtBuilder.getKeyStore(),clientCrtBuilder,""String_Node_Str"".toCharArray());
  port.login(token.getCertificate(KeyType.ENCIPHERMENT).getEncoded());
  port.report(""String_Node_Str"",System.currentTimeMillis());
  DataHandler dh=port.listVMs();
  ZipInputStream zis=new ZipInputStream(dh.getInputStream());
  ZipEntry entry=zis.getNextEntry();
  while (entry != null) {
    try {
      System.out.println(""String_Node_Str"" + entry.getName() + ""String_Node_Str"");
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
    entry=zis.getNextEntry();
  }
  port.report(""String_Node_Str"",System.currentTimeMillis());
}","public void https() throws Exception {
  TrustManagerFactory tmf=TrustManagerFactory.getInstance(""String_Node_Str"");
  KeyStore ts=KeyStore.getInstance(""String_Node_Str"");
  ts.load(new FileInputStream(new File(TestPKI.getPKIDirectory(),""String_Node_Str"")),""String_Node_Str"".toCharArray());
  tmf.init(ts);
  KeyManagerFactory kmf=KeyManagerFactory.getInstance(""String_Node_Str"");
  Builder clientCrtBuilder=KeyStore.Builder.newInstance(""String_Node_Str"",null,new File(TestPKI.getPKIDirectory(),""String_Node_Str""),new KeyStore.PasswordProtection(""String_Node_Str"".toCharArray()));
  KeyStoreBuilderParameters keyStoreBuilderParameters=new KeyStoreBuilderParameters(clientCrtBuilder);
  kmf.init(keyStoreBuilderParameters);
  SSLContext ctx=SSLContext.getInstance(""String_Node_Str"");
  ctx.init(kmf.getKeyManagers(),tmf.getTrustManagers(),null);
  SSLSocketFactory factory=ctx.getSocketFactory();
  CubeManage service=new CubeManage(getClass().getResource(""String_Node_Str""));
  CubeManagePortType port=service.getCubeManagePort();
  Client proxy=ClientProxy.getClient(port);
  ((BindingProvider)port).getRequestContext().put(BindingProvider.SESSION_MAINTAIN_PROPERTY,true);
  HTTPConduit conduit=(HTTPConduit)proxy.getConduit();
  TLSClientParameters tlsParam=new TLSClientParameters();
  tlsParam.setDisableCNCheck(false);
  tlsParam.setSSLSocketFactory(factory);
  addFilters(tlsParam);
  conduit.setTlsClientParameters(tlsParam);
  IdentityToken token=new IdentityToken(clientCrtBuilder.getKeyStore(),clientCrtBuilder,""String_Node_Str"".toCharArray());
  port.login(token.getCertificate(KeyType.ENCIPHERMENT).getEncoded());
  port.report(""String_Node_Str"",System.currentTimeMillis());
  DataHandler dh=port.listVMs();
  ZipInputStream zis=new ZipInputStream(dh.getInputStream());
  ZipEntry entry=zis.getNextEntry();
  while (entry != null) {
    try {
      System.out.println(""String_Node_Str"" + entry.getName() + ""String_Node_Str"");
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
    entry=zis.getNextEntry();
  }
  port.report(""String_Node_Str"",System.currentTimeMillis());
}"
46490,"private File getuserDirectory(X509Certificate x509) throws IOException {
  String dn=x509.getSubjectDN().getName();
  String dnHash=HashUtil.sha512UrlInBase64(dn);
  File userDir=new File(baseDir,dnHash);
  if (!userDir.exists()) {
    userDir.mkdirs();
    File userCfg=new File(userDir,""String_Node_Str"");
    FileWriter fw=new FileWriter(userCfg);
    fw.write(""String_Node_Str"" + dn + ""String_Node_Str""+ dnHash+ ""String_Node_Str"");
    fw.close();
  }
  return userDir;
}","private File getuserDirectory(X509Certificate x509) throws IOException {
  String dn=x509.getSubjectDN().getName();
  String dnHash=HashUtil.sha512UrlInBase64(dn);
  File userDir=new File(baseDir,dnHash);
  if (!userDir.exists()) {
    if (!userDir.mkdirs()) {
      throw new IOException(""String_Node_Str"" + userDir.getAbsolutePath() + ""String_Node_Str"");
    }
    File userCfg=new File(userDir,""String_Node_Str"");
    FileWriter fw=new FileWriter(userCfg);
    fw.write(""String_Node_Str"" + dn + ""String_Node_Str""+ dnHash+ ""String_Node_Str"");
    fw.close();
  }
  return userDir;
}"
46491,"@Override public void run(){
  try {
    mgr=VirtualBoxManager.createInstance(null);
    mgr.connect(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    vbox=mgr.getVBox();
    connected=true;
    LOG.info(""String_Node_Str"",vbox.getVersion());
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    mgr=VirtualBoxManager.createInstance(null);
    mgr.connect(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    vbox=mgr.getVBox();
    connected=true;
    LOG.info(""String_Node_Str"",vbox.getVersion());
    IEventSource es=vbox.getEventSource();
    IEventListener listener=es.createListener();
    ArrayList<VBoxEventType> types=new ArrayList<VBoxEventType>();
    types.add(VBoxEventType.MachineEvent);
    es.registerListener(listener,types,false);
    while (connected) {
      IEvent ev=es.getEvent(listener,1000);
      if (ev != null) {
        IMachineEvent machineId=IMachineEvent.queryInterface(ev);
switch (ev.getType()) {
case OnGuestPropertyChanged:
          IGuestPropertyChangedEvent x=IGuestPropertyChangedEvent.queryInterface(ev);
        LOG.debug(""String_Node_Str"" + x.getName() + ""String_Node_Str""+ x.getValue()+ ""String_Node_Str"",ev.getType(),machineId.getMachineId());
      break;
default :
    LOG.debug(""String_Node_Str"",ev.getType(),machineId.getMachineId());
  break;
}
es.eventProcessed(listener,ev);
}
}
}
 catch (Exception e) {
LOG.error(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"",e);
}
}"
46492,"public void reconnect(){
  new Thread(new Runnable(){
    @Override public void run(){
      ShellUtil su=new ShellUtil();
      try {
        su.run(null,0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"");
      }
      try {
        su.run(null,0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        su.run(null,0,""String_Node_Str"");
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"");
      }
      LOG.error(""String_Node_Str"");
    }
  }
,""String_Node_Str"").start();
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        mgr=VirtualBoxManager.createInstance(null);
        mgr.connect(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        vbox=mgr.getVBox();
        connected=true;
        LOG.info(""String_Node_Str"",vbox.getVersion());
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"",e);
      }
    }
  }
,""String_Node_Str"").start();
}","public void reconnect(){
  new Thread(new Runnable(){
    @Override public void run(){
      ShellUtil su=new ShellUtil();
      try {
        su.run(null,0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"");
      }
      try {
        su.run(null,0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        su.run(null,0,""String_Node_Str"");
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"");
      }
      LOG.error(""String_Node_Str"");
    }
  }
,""String_Node_Str"").start();
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        mgr=VirtualBoxManager.createInstance(null);
        mgr.connect(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        vbox=mgr.getVBox();
        connected=true;
        LOG.info(""String_Node_Str"",vbox.getVersion());
        IEventSource es=vbox.getEventSource();
        IEventListener listener=es.createListener();
        ArrayList<VBoxEventType> types=new ArrayList<VBoxEventType>();
        types.add(VBoxEventType.MachineEvent);
        es.registerListener(listener,types,false);
        while (connected) {
          IEvent ev=es.getEvent(listener,1000);
          if (ev != null) {
            IMachineEvent machineId=IMachineEvent.queryInterface(ev);
switch (ev.getType()) {
case OnGuestPropertyChanged:
              IGuestPropertyChangedEvent x=IGuestPropertyChangedEvent.queryInterface(ev);
            LOG.debug(""String_Node_Str"" + x.getName() + ""String_Node_Str""+ x.getValue()+ ""String_Node_Str"",ev.getType(),machineId.getMachineId());
          break;
default :
        LOG.debug(""String_Node_Str"",ev.getType(),machineId.getMachineId());
      break;
  }
  es.eventProcessed(listener,ev);
}
}
}
 catch (Exception e) {
LOG.error(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"",e);
}
}
}
,""String_Node_Str"").start();
}"
46493,"public void connectNic(Vm vm,NicOption option) throws VmException {
  checkConnected();
  if (lock.tryLock()) {
    try {
      if (option.getNic().equals(ORIGINAL_NETWORK_CONFIG)) {
        vm.setNetworkState(VmNetworkState.CUBE);
        VBoxConfig cfg=new VBoxConfig(vm.getVmContainer(),vm.getRuntimeContainer());
        try {
          cfg.load();
        }
 catch (        CubeException e) {
          throw new VmException(""String_Node_Str"",e);
        }
        ISession session=mgr.getSessionObject();
        IMachine machine=getIMachineReference(vm.getId());
        machine.lockMachine(session,LockType.Shared);
        IMachine mutable=session.getMachine();
        addNetworkIface(0,cfg.getOption(VBoxOption.Nic1),cfg.getOption(VBoxOption.Nic1Bridge),cfg.getOption(VBoxOption.Nic1Mac),mutable);
        addNetworkIface(1,cfg.getOption(VBoxOption.Nic2),cfg.getOption(VBoxOption.Nic2Bridge),cfg.getOption(VBoxOption.Nic2Mac),mutable);
        addNetworkIface(2,cfg.getOption(VBoxOption.Nic3),cfg.getOption(VBoxOption.Nic3Bridge),cfg.getOption(VBoxOption.Nic3Mac),mutable);
        addNetworkIface(3,cfg.getOption(VBoxOption.Nic4),cfg.getOption(VBoxOption.Nic4Bridge),cfg.getOption(VBoxOption.Nic4Mac),mutable);
        mutable.saveSettings();
        session.unlockMachine();
      }
 else {
        vm.setNetworkState(VmNetworkState.LOCAL);
        ISession session=mgr.getSessionObject();
        IMachine machine=getIMachineReference(vm.getId());
        machine.lockMachine(session,LockType.Shared);
        IMachine mutable=session.getMachine();
        for (long nic=1l; nic < 4l; nic++) {
          mutable.getNetworkAdapter(nic).setCableConnected(false);
          mutable.getNetworkAdapter(nic).setEnabled(false);
        }
        INetworkAdapter na=mutable.getNetworkAdapter(0l);
        na.setAttachmentType(NetworkAttachmentType.Bridged);
        na.setBridgedInterface(option.getNic());
        na.setEnabled(true);
        na.setPromiscModePolicy(NetworkAdapterPromiscModePolicy.AllowAll);
        mutable.saveSettings();
        na.setCableConnected(true);
        session.unlockMachine();
      }
    }
 catch (    Exception e) {
      throw new VmException(""String_Node_Str"" + option.getNic() + ""String_Node_Str"",e);
    }
 finally {
      unlockSession();
      lock.unlock();
    }
  }
 else {
    LOG.debug(""String_Node_Str"");
  }
}","public void connectNic(Vm vm,NicOption option) throws VmException {
  checkConnected();
  if (lock.tryLock()) {
    try {
      if (option.getNic().equals(ORIGINAL_NETWORK_CONFIG)) {
        vm.setNetworkState(VmNetworkState.CUBE);
        VBoxConfig cfg=new VBoxConfig(vm.getVmContainer(),vm.getRuntimeContainer());
        try {
          cfg.load();
        }
 catch (        CubeException e) {
          throw new VmException(""String_Node_Str"",e);
        }
        ISession session=mgr.getSessionObject();
        IMachine machine=getIMachineReference(vm.getId());
        machine.lockMachine(session,LockType.Shared);
        IMachine mutable=session.getMachine();
        addNetworkIface(0,cfg.getOption(VBoxOption.Nic1),cfg.getOption(VBoxOption.Nic1Bridge),cfg.getOption(VBoxOption.Nic1Mac),mutable);
        addNetworkIface(1,cfg.getOption(VBoxOption.Nic2),cfg.getOption(VBoxOption.Nic2Bridge),cfg.getOption(VBoxOption.Nic2Mac),mutable);
        addNetworkIface(2,cfg.getOption(VBoxOption.Nic3),cfg.getOption(VBoxOption.Nic3Bridge),cfg.getOption(VBoxOption.Nic3Mac),mutable);
        addNetworkIface(3,cfg.getOption(VBoxOption.Nic4),cfg.getOption(VBoxOption.Nic4Bridge),cfg.getOption(VBoxOption.Nic4Mac),mutable);
        mutable.saveSettings();
        session.unlockMachine();
      }
 else {
        vm.setNetworkState(VmNetworkState.LOCAL);
        ISession session=mgr.getSessionObject();
        IMachine machine=getIMachineReference(vm.getId());
        machine.lockMachine(session,LockType.Shared);
        IMachine mutable=session.getMachine();
        LOG.debug(""String_Node_Str"");
        for (long nic=1l; nic <= 3l; nic++) {
          INetworkAdapter na=mutable.getNetworkAdapter(nic);
          na.setCableConnected(false);
          na.setAttachmentType(NetworkAttachmentType.Null);
          na.setEnabled(false);
        }
        LOG.debug(""String_Node_Str"");
        INetworkAdapter na=mutable.getNetworkAdapter(0l);
        na.setEnabled(true);
        na.setAttachmentType(NetworkAttachmentType.Bridged);
        na.setBridgedInterface(option.getNic());
        na.setPromiscModePolicy(NetworkAdapterPromiscModePolicy.AllowAll);
        LOG.debug(""String_Node_Str"");
        na.setCableConnected(true);
        mutable.saveSettings();
        session.unlockMachine();
      }
    }
 catch (    Exception e) {
      throw new VmException(""String_Node_Str"" + option.getNic() + ""String_Node_Str"",e);
    }
 finally {
      unlockSession();
      lock.unlock();
    }
  }
 else {
    LOG.debug(""String_Node_Str"");
  }
}"
46494,"/** 
 * Shows the popup menu for the given tab.
 * @param parent parent which the popup menu belongs to
 * @param event mouse event with the coordinates
 * @param h vmId of the virtual machine
 * @param tabIndex the index of the tab
 */
private void showTabPopupMenu(final Component parent,final MouseEvent event,final VmHandle h,final int tabIndex){
  LOG.debug(""String_Node_Str"",h);
  if (h == null)   return;
  ResourceBundle resourceBundle=I18nBundleProvider.getBundle();
  VmState state=vmMon.getVmState(h);
  vmPopupMenu=new JPopupMenu();
switch (state) {
case STOPPED:
    vmPopupMenu.add(new VmStartAction(h));
  vmPopupMenu.add(new VmDeleteAction(h));
break;
case RUNNING:
vmPopupMenu.add(new VmSaveAction(h));
vmPopupMenu.add(new VmPoweroffAction(h));
vmPopupMenu.addSeparator();
vmPopupMenu.add(new VmInstallAdditionsAction(h));
JideMenu usbMenu=new JideMenu(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
vmPopupMenu.add(usbMenu);
populateUsbMenu(h,usbMenu);
if (vmMon.getVmClassification(h) == CubeClassification.UNCLASSIFIED) {
JMenu nicMenu=new JMenu(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
vmPopupMenu.add(nicMenu);
populateNicMenu(h,nicMenu);
}
break;
case STAGABLE:
vmPopupMenu.add(new VmStageAction(h));
break;
case STAGING:
vmPopupMenu.add(new VmStageAction(h,false));
break;
case STARTING:
case STOPPING:
vmPopupMenu.add(new VmSaveAction(h,false));
vmPopupMenu.add(new VmPoweroffAction(h,false));
break;
case ERROR:
case UNKNOWN:
vmPopupMenu.add(new VmPoweroffAction(h));
vmPopupMenu.add(new VmDeleteAction(h));
break;
default :
LOG.error(""String_Node_Str"" + state + ""String_Node_Str"");
return;
}
if (state == VmState.RUNNING) {
}
if (state == VmState.STOPPED || state == VmState.STAGABLE) {
vmPopupMenu.addSeparator();
vmPopupMenu.add(new VmHideAction(h,false));
}
List<CubeScreen> screens=cubeUI.getScreens();
if (screens.size() > 1) {
vmPopupMenu.addSeparator();
JideMenu monitorMenu=new JideMenu(resourceBundle.getString(""String_Node_Str""));
vmPopupMenu.add(monitorMenu);
for (CubeScreen c : screens) {
if (!c.getId().equals(monitorId) && c.isActive()) {
final String destMonitorId=c.getId();
JMenuItem item=new JMenuItem(MessageFormat.format(resourceBundle.getString(""String_Node_Str""),destMonitorId));
item.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
vmCtrl.moveVm(h,destMonitorId);
}
}
);
monitorMenu.add(item);
}
}
}
LOG.debug(""String_Node_Str"",event.getX(),event.getY());
JComponent comp=(JComponent)event.getSource();
vmPopupMenu.show(parent,event.getX(),event.getY());
}","/** 
 * Shows the popup menu for the given tab.
 * @param parent parent which the popup menu belongs to
 * @param event mouse event with the coordinates
 * @param h vmId of the virtual machine
 * @param tabIndex the index of the tab
 */
private void showTabPopupMenu(final Component parent,final MouseEvent event,final VmHandle h,final int tabIndex){
  LOG.debug(""String_Node_Str"",h);
  if (h == null)   return;
  ResourceBundle resourceBundle=I18nBundleProvider.getBundle();
  VmState state=vmMon.getVmState(h);
  vmPopupMenu=new JPopupMenu();
switch (state) {
case STOPPED:
    vmPopupMenu.add(new VmStartAction(h));
  vmPopupMenu.add(new VmDeleteAction(h));
break;
case RUNNING:
vmPopupMenu.add(new VmSaveAction(h));
vmPopupMenu.add(new VmPoweroffAction(h));
vmPopupMenu.addSeparator();
vmPopupMenu.add(new VmInstallAdditionsAction(h));
JideMenu usbMenu=new JideMenu(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
vmPopupMenu.add(usbMenu);
populateUsbMenu(h,usbMenu);
if (vmMon.getVmClassification(h) == CubeClassification.UNCLASSIFIED) {
JMenu nicMenu=new JMenu(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
vmPopupMenu.add(nicMenu);
populateNicMenu(h,nicMenu);
}
break;
case STAGABLE:
vmPopupMenu.add(new VmStageAction(h));
break;
case STAGING:
vmPopupMenu.add(new VmStageAction(h,false));
break;
case STARTING:
case STOPPING:
vmPopupMenu.add(new VmSaveAction(h,false));
vmPopupMenu.add(new VmPoweroffAction(h,false));
break;
case ERROR:
case UNKNOWN:
vmPopupMenu.add(new VmPoweroffAction(h));
vmPopupMenu.add(new VmDeleteAction(h));
break;
default :
LOG.error(""String_Node_Str"" + state + ""String_Node_Str"");
return;
}
if (state == VmState.RUNNING) {
}
if (state == VmState.STOPPED || state == VmState.STAGABLE) {
vmPopupMenu.addSeparator();
vmPopupMenu.add(new VmHideAction(h,false));
}
List<CubeScreen> screens=cubeUI.getScreens();
if (screens.size() > 1) {
vmPopupMenu.addSeparator();
JideMenu monitorMenu=new JideMenu(resourceBundle.getString(""String_Node_Str""));
vmPopupMenu.add(monitorMenu);
for (CubeScreen c : screens) {
if (!c.getId().equals(monitorId) && c.isActive()) {
final String destMonitorId=c.getId();
JMenuItem item=new JMenuItem(MessageFormat.format(resourceBundle.getString(""String_Node_Str""),destMonitorId));
item.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
vmCtrl.moveVm(h,destMonitorId);
}
}
);
monitorMenu.add(item);
}
}
}
LOG.debug(""String_Node_Str"",event.getXOnScreen(),event.getYOnScreen());
LOG.debug(""String_Node_Str"",event.getX(),event.getY());
JComponent comp=(JComponent)event.getSource();
vmPopupMenu.show(parent,event.getXOnScreen(),event.getYOnScreen());
}"
46495,"@Override public void run(){
  Chronos cronos=new Chronos();
  cronos.zap(""String_Node_Str"");
  scAuthModule.setAbortReason(null);
  try {
    if (provider != null) {
      Security.removeProvider(provider.getName());
      provider=null;
    }
    cronos.zap(""String_Node_Str"");
    StringBuilder buf=new StringBuilder();
    buf.append(""String_Node_Str"").append(this.scAuthModule.pkcs11LibraryPath).append(""String_Node_Str"");
    provider=new sun.security.pkcs11.SunPKCS11(new ByteArrayInputStream(buf.toString().getBytes()));
    Security.addProvider(provider);
    cronos.zap(""String_Node_Str"");
    builder=KeyStore.Builder.newInstance(""String_Node_Str"",provider,new KeyStore.CallbackHandlerProtection(this));
    cronos.zap(""String_Node_Str"");
    keystore=builder.getKeyStore();
    cronos.zap(""String_Node_Str"");
    caValid.validate(keystore);
    cronos.zap(""String_Node_Str"");
    this.scAuthModule.enqueue(ScAuthStateTransition.KEYSTORE_READY);
  }
 catch (  Exception e) {
    if (this.scAuthModule.handlePinIncorrect(e)) {
      LOG.debug(""String_Node_Str"");
      scAuthModule.setAbortReason(new AuthModuleEvent(AuthEventType.FAILED_WRONGPIN,null,null,null));
    }
 else     if (this.scAuthModule.handleCanceled(e)) {
      LOG.debug(""String_Node_Str"");
      scAuthModule.setAbortReason(new AuthModuleEvent(AuthEventType.FAILED,null,null,null));
    }
 else     if (this.scAuthModule.handleUserNotLoggedIn(e)) {
      LOG.debug(""String_Node_Str"");
      scAuthModule.setAbortReason(new AuthModuleEvent(AuthEventType.FAILED_USERTIMEOUT,null,null,null));
    }
 else     if (this.scAuthModule.handleNoSuchAlgo(e)) {
      LOG.debug(""String_Node_Str"");
      scAuthModule.setAbortReason(new AuthModuleEvent(AuthEventType.FAILED,null,null,null));
    }
 else     if (this.scAuthModule.handleFunctionFailed(e)) {
      LOG.debug(""String_Node_Str"");
      scAuthModule.setAbortReason(new AuthModuleEvent(AuthEventType.FAILED,null,null,null));
    }
 else {
      LOG.debug(""String_Node_Str"",e);
      scAuthModule.setAbortReason(new AuthModuleEvent(AuthEventType.FAILED,null,null,null));
    }
    this.scAuthModule.enqueue(ScAuthStateTransition.ABORT_AUTH);
  }
}","@Override public void run(){
  Chronos cronos=new Chronos();
  cronos.zap(""String_Node_Str"");
  scAuthModule.setAbortReason(null);
  try {
    if (provider != null) {
      Security.removeProvider(provider.getName());
      provider=null;
    }
    cronos.zap(""String_Node_Str"");
    StringBuilder buf=new StringBuilder();
    buf.append(""String_Node_Str"").append(this.scAuthModule.pkcs11LibraryPath).append(""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + buf.toString() + ""String_Node_Str"");
    provider=new sun.security.pkcs11.SunPKCS11(new ByteArrayInputStream(buf.toString().getBytes()));
    Security.addProvider(provider);
    cronos.zap(""String_Node_Str"");
    builder=KeyStore.Builder.newInstance(""String_Node_Str"",provider,new KeyStore.CallbackHandlerProtection(this));
    cronos.zap(""String_Node_Str"");
    keystore=builder.getKeyStore();
    cronos.zap(""String_Node_Str"");
    caValid.validate(keystore);
    cronos.zap(""String_Node_Str"");
    this.scAuthModule.enqueue(ScAuthStateTransition.KEYSTORE_READY);
  }
 catch (  Exception e) {
    if (this.scAuthModule.handlePinIncorrect(e)) {
      LOG.debug(""String_Node_Str"");
      scAuthModule.setAbortReason(new AuthModuleEvent(AuthEventType.FAILED_WRONGPIN,null,null,null));
    }
 else     if (this.scAuthModule.handleCanceled(e)) {
      LOG.debug(""String_Node_Str"");
      scAuthModule.setAbortReason(new AuthModuleEvent(AuthEventType.FAILED,null,null,null));
    }
 else     if (this.scAuthModule.handleUserNotLoggedIn(e)) {
      LOG.debug(""String_Node_Str"");
      scAuthModule.setAbortReason(new AuthModuleEvent(AuthEventType.FAILED_USERTIMEOUT,null,null,null));
    }
 else     if (this.scAuthModule.handleNoSuchAlgo(e)) {
      LOG.debug(""String_Node_Str"");
      scAuthModule.setAbortReason(new AuthModuleEvent(AuthEventType.FAILED,null,null,null));
    }
 else     if (this.scAuthModule.handleFunctionFailed(e)) {
      LOG.debug(""String_Node_Str"");
      scAuthModule.setAbortReason(new AuthModuleEvent(AuthEventType.FAILED,null,null,null));
    }
 else {
      LOG.debug(""String_Node_Str"",e);
      scAuthModule.setAbortReason(new AuthModuleEvent(AuthEventType.FAILED,null,null,null));
    }
    this.scAuthModule.enqueue(ScAuthStateTransition.ABORT_AUTH);
  }
}"
46496,"public void connectNic(Vm vm,NicOption option) throws VmException {
  checkConnected();
  if (lock.tryLock()) {
    try {
      if (option.getNic().equals(ORIGINAL_NETWORK_CONFIG)) {
        VBoxConfig cfg=new VBoxConfig(vm.getVmContainer(),vm.getRuntimeContainer());
        try {
          cfg.load();
        }
 catch (        CubeException e) {
          throw new VmException(""String_Node_Str"",e);
        }
        ISession session=mgr.getSessionObject();
        IMachine machine=getIMachineReference(vm.getId());
        machine.lockMachine(session,LockType.Shared);
        IMachine mutable=session.getMachine();
        addNetworkIface(0,cfg.getOption(VBoxOption.Nic1),cfg.getOption(VBoxOption.Nic1Bridge),cfg.getOption(VBoxOption.Nic1Mac),mutable);
        addNetworkIface(1,cfg.getOption(VBoxOption.Nic2),cfg.getOption(VBoxOption.Nic2Bridge),cfg.getOption(VBoxOption.Nic2Mac),mutable);
        addNetworkIface(2,cfg.getOption(VBoxOption.Nic3),cfg.getOption(VBoxOption.Nic3Bridge),cfg.getOption(VBoxOption.Nic3Mac),mutable);
        addNetworkIface(3,cfg.getOption(VBoxOption.Nic4),cfg.getOption(VBoxOption.Nic4Bridge),cfg.getOption(VBoxOption.Nic4Mac),mutable);
        mutable.saveSettings();
        session.unlockMachine();
      }
 else {
        ISession session=mgr.getSessionObject();
        IMachine machine=getIMachineReference(vm.getId());
        machine.lockMachine(session,LockType.Shared);
        IMachine mutable=session.getMachine();
        for (long nic=0l; nic < 4l; nic++) {
          mutable.getNetworkAdapter(nic).setCableConnected(false);
          mutable.getNetworkAdapter(nic).setEnabled(false);
        }
        INetworkAdapter na=mutable.getNetworkAdapter(0l);
        na.setAttachmentType(NetworkAttachmentType.Bridged);
        na.setBridgedInterface(option.getNic());
        na.setEnabled(true);
        na.setCableConnected(true);
        na.setPromiscModePolicy(NetworkAdapterPromiscModePolicy.AllowAll);
        mutable.saveSettings();
        session.unlockMachine();
      }
    }
 catch (    Exception e) {
      throw new VmException(""String_Node_Str"" + option.getNic() + ""String_Node_Str"",e);
    }
 finally {
      unlockSession();
      lock.unlock();
    }
  }
 else {
    LOG.debug(""String_Node_Str"");
  }
}","public void connectNic(Vm vm,NicOption option) throws VmException {
  checkConnected();
  if (lock.tryLock()) {
    try {
      if (option.getNic().equals(ORIGINAL_NETWORK_CONFIG)) {
        VBoxConfig cfg=new VBoxConfig(vm.getVmContainer(),vm.getRuntimeContainer());
        try {
          cfg.load();
        }
 catch (        CubeException e) {
          throw new VmException(""String_Node_Str"",e);
        }
        ISession session=mgr.getSessionObject();
        IMachine machine=getIMachineReference(vm.getId());
        machine.lockMachine(session,LockType.Shared);
        IMachine mutable=session.getMachine();
        addNetworkIface(0,cfg.getOption(VBoxOption.Nic1),cfg.getOption(VBoxOption.Nic1Bridge),cfg.getOption(VBoxOption.Nic1Mac),mutable);
        addNetworkIface(1,cfg.getOption(VBoxOption.Nic2),cfg.getOption(VBoxOption.Nic2Bridge),cfg.getOption(VBoxOption.Nic2Mac),mutable);
        addNetworkIface(2,cfg.getOption(VBoxOption.Nic3),cfg.getOption(VBoxOption.Nic3Bridge),cfg.getOption(VBoxOption.Nic3Mac),mutable);
        addNetworkIface(3,cfg.getOption(VBoxOption.Nic4),cfg.getOption(VBoxOption.Nic4Bridge),cfg.getOption(VBoxOption.Nic4Mac),mutable);
        mutable.saveSettings();
        session.unlockMachine();
      }
 else {
        ISession session=mgr.getSessionObject();
        IMachine machine=getIMachineReference(vm.getId());
        machine.lockMachine(session,LockType.Shared);
        IMachine mutable=session.getMachine();
        for (long nic=1l; nic < 4l; nic++) {
          mutable.getNetworkAdapter(nic).setCableConnected(false);
          mutable.getNetworkAdapter(nic).setEnabled(false);
        }
        INetworkAdapter na=mutable.getNetworkAdapter(0l);
        na.setAttachmentType(NetworkAttachmentType.Bridged);
        na.setBridgedInterface(option.getNic());
        na.setEnabled(true);
        na.setCableConnected(true);
        na.setPromiscModePolicy(NetworkAdapterPromiscModePolicy.AllowAll);
        mutable.saveSettings();
        session.unlockMachine();
      }
    }
 catch (    Exception e) {
      throw new VmException(""String_Node_Str"" + option.getNic() + ""String_Node_Str"",e);
    }
 finally {
      unlockSession();
      lock.unlock();
    }
  }
 else {
    LOG.debug(""String_Node_Str"");
  }
}"
46497,"/** 
 * Shows the popup menu for the given tab.
 * @param parent parent which the popup menu belongs to
 * @param event mouse event with the coordinates
 * @param h vmId of the virtual machine
 * @param tabIndex the index of the tab
 */
private void showTabPopupMenu(final Component parent,final MouseEvent event,final VmHandle h,final int tabIndex){
  LOG.debug(""String_Node_Str"",h);
  if (h == null)   return;
  ResourceBundle resourceBundle=I18nBundleProvider.getBundle();
  VmState state=vmMon.getVmState(h);
  vmPopupMenu=new JPopupMenu();
switch (state) {
case STOPPED:
    vmPopupMenu.add(new VmStartAction(h));
  vmPopupMenu.add(new VmDeleteAction(h));
break;
case RUNNING:
vmPopupMenu.add(new VmSaveAction(h));
vmPopupMenu.add(new VmPoweroffAction(h));
vmPopupMenu.addSeparator();
vmPopupMenu.add(new VmInstallAdditionsAction(h));
JideMenu usbMenu=new JideMenu(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
vmPopupMenu.add(usbMenu);
populateUsbMenu(h,usbMenu);
if (vmMon.getVmClassification(h) == CubeClassification.UNCLASSIFIED) {
JMenu nicMenu=new JMenu(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
vmPopupMenu.add(nicMenu);
populateNicMenu(h,nicMenu);
}
break;
case STAGABLE:
vmPopupMenu.add(new VmStageAction(h));
break;
case STAGING:
vmPopupMenu.add(new VmStageAction(h,false));
break;
case STARTING:
case STOPPING:
vmPopupMenu.add(new VmSaveAction(h,false));
vmPopupMenu.add(new VmPoweroffAction(h,false));
break;
case ERROR:
case UNKNOWN:
vmPopupMenu.add(new VmPoweroffAction(h));
vmPopupMenu.add(new VmDeleteAction(h));
break;
default :
LOG.error(""String_Node_Str"" + state + ""String_Node_Str"");
return;
}
if (state == VmState.RUNNING) {
}
if (state == VmState.STOPPED || state == VmState.STAGABLE) {
vmPopupMenu.addSeparator();
vmPopupMenu.add(new VmHideAction(h,false));
}
List<CubeScreen> screens=cubeUI.getScreens();
if (screens.size() > 1) {
vmPopupMenu.addSeparator();
JideMenu monitorMenu=new JideMenu(resourceBundle.getString(""String_Node_Str""));
vmPopupMenu.add(monitorMenu);
for (CubeScreen c : screens) {
if (!c.getId().equals(monitorId) && c.isActive()) {
final String destMonitorId=c.getId();
JMenuItem item=new JMenuItem(MessageFormat.format(resourceBundle.getString(""String_Node_Str""),destMonitorId));
item.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
vmCtrl.moveVm(h,destMonitorId);
}
}
);
monitorMenu.add(item);
}
}
}
LOG.debug(""String_Node_Str"",event.getXOnScreen(),event.getYOnScreen());
LOG.debug(""String_Node_Str"",event.getX(),event.getY());
JComponent comp=(JComponent)event.getSource();
vmPopupMenu.show(parent,event.getXOnScreen(),event.getYOnScreen());
}","/** 
 * Shows the popup menu for the given tab.
 * @param parent parent which the popup menu belongs to
 * @param event mouse event with the coordinates
 * @param h vmId of the virtual machine
 * @param tabIndex the index of the tab
 */
private void showTabPopupMenu(final Component parent,final MouseEvent event,final VmHandle h,final int tabIndex){
  LOG.debug(""String_Node_Str"",h);
  if (h == null)   return;
  ResourceBundle resourceBundle=I18nBundleProvider.getBundle();
  VmState state=vmMon.getVmState(h);
  vmPopupMenu=new JPopupMenu();
switch (state) {
case STOPPED:
    vmPopupMenu.add(new VmStartAction(h));
  vmPopupMenu.add(new VmDeleteAction(h));
break;
case RUNNING:
vmPopupMenu.add(new VmSaveAction(h));
vmPopupMenu.add(new VmPoweroffAction(h));
vmPopupMenu.addSeparator();
vmPopupMenu.add(new VmInstallAdditionsAction(h));
JideMenu usbMenu=new JideMenu(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
vmPopupMenu.add(usbMenu);
populateUsbMenu(h,usbMenu);
if (vmMon.getVmClassification(h) == CubeClassification.UNCLASSIFIED) {
JMenu nicMenu=new JMenu(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
vmPopupMenu.add(nicMenu);
populateNicMenu(h,nicMenu);
}
break;
case STAGABLE:
vmPopupMenu.add(new VmStageAction(h));
break;
case STAGING:
vmPopupMenu.add(new VmStageAction(h,false));
break;
case STARTING:
case STOPPING:
vmPopupMenu.add(new VmSaveAction(h,false));
vmPopupMenu.add(new VmPoweroffAction(h,false));
break;
case ERROR:
case UNKNOWN:
vmPopupMenu.add(new VmPoweroffAction(h));
vmPopupMenu.add(new VmDeleteAction(h));
break;
default :
LOG.error(""String_Node_Str"" + state + ""String_Node_Str"");
return;
}
if (state == VmState.RUNNING) {
}
if (state == VmState.STOPPED || state == VmState.STAGABLE) {
vmPopupMenu.addSeparator();
vmPopupMenu.add(new VmHideAction(h,false));
}
List<CubeScreen> screens=cubeUI.getScreens();
if (screens.size() > 1) {
vmPopupMenu.addSeparator();
JideMenu monitorMenu=new JideMenu(resourceBundle.getString(""String_Node_Str""));
vmPopupMenu.add(monitorMenu);
for (CubeScreen c : screens) {
if (!c.getId().equals(monitorId) && c.isActive()) {
final String destMonitorId=c.getId();
JMenuItem item=new JMenuItem(MessageFormat.format(resourceBundle.getString(""String_Node_Str""),destMonitorId));
item.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
vmCtrl.moveVm(h,destMonitorId);
}
}
);
monitorMenu.add(item);
}
}
}
LOG.debug(""String_Node_Str"",event.getX(),event.getY());
LOG.debug(""String_Node_Str"",event.getXOnScreen(),event.getYOnScreen());
JComponent comp=(JComponent)event.getSource();
vmPopupMenu.show(parent,event.getX(),event.getY());
}"
46498,"@Override public void showBootPasswordDialog(){
  LOG.debug(""String_Node_Str"");
synchronized (lock) {
    closeCurrentDialog();
    hideNavigationBarAndVms();
    final BootPasswordDialog msgdialog=new BootPasswordDialog(getDefaultParentFrame());
    msgdialog.addPasswordDialogListener(new BootPasswordListener(){
      @Override public void closed(){
        showNavigationBarAndVms(true);
      }
    }
);
    dialog=msgdialog;
    swingOpen(msgdialog);
  }
}","@Override public void showBootPasswordDialog(){
  LOG.debug(""String_Node_Str"");
synchronized (lock) {
    closeCurrentDialog();
    hideNavigationBarAndVms();
    final BootPasswordDialog msgdialog=new BootPasswordDialog(getDefaultParentFrame());
    msgdialog.addPasswordDialogListener(new BootPasswordListener(){
      @Override public void closed(){
        closeCurrentDialog();
        showNavigationBarAndVms(true);
      }
    }
);
    dialog=msgdialog;
    swingOpen(msgdialog);
  }
}"
46499,"@Override public void closed(){
  showNavigationBarAndVms(true);
}","@Override public void closed(){
  closeCurrentDialog();
  showNavigationBarAndVms(true);
}"
46500,"private AudioEntry getVolumeEntry(String key,Type type){
  if (volumeEntries.get(key + type) != null) {
    return volumeEntries.get(key + type);
  }
  int pid=getPID(key);
  ShellUtil pacmd=new ShellUtil();
  try {
    pacmd.run(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    LOG.error(e.toString());
  }
  StringBuffer sb=pacmd.getStandardOutput();
  StringReader r=new StringReader(sb.toString());
  BufferedReader rr=new BufferedReader(r);
  try {
    String inp=null;
    int index=-1;
    int volume=-1;
    boolean muted=false;
    boolean proc=false;
    while ((inp=rr.readLine()) != null) {
      if (inp.contains(type.header)) {
        index=Integer.parseInt(inp.replace(type.header,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim());
        proc=true;
        continue;
      }
 else       if (!proc) {
        continue;
      }
      if (proc) {
        if (inp.contains(""String_Node_Str"")) {
          inp=inp.replaceAll(""String_Node_Str"",""String_Node_Str"");
          volume=Integer.parseInt(inp.replace(""String_Node_Str"",""String_Node_Str"").trim());
          continue;
        }
        if (inp.contains(""String_Node_Str"")) {
          inp=inp.replace(""String_Node_Str"",""String_Node_Str"");
          muted=!inp.trim().equals(""String_Node_Str"");
          continue;
        }
        if (inp.contains(pid + ""String_Node_Str"")) {
          break;
        }
      }
    }
    if (index != -1) {
      volumeEntries.put(key + type,new AudioEntry(index,volume,muted));
      return volumeEntries.get(key + type);
    }
  }
 catch (  Exception e) {
  }
  return null;
}","private AudioEntry getVolumeEntry(String vmId,Type type){
  ShellUtil pacmd=new ShellUtil();
  try {
    pacmd.run(""String_Node_Str"",""String_Node_Str"");
    StringBuffer sb=pacmd.getStandardOutput();
    StringReader r=new StringReader(sb.toString());
    BufferedReader rr=new BufferedReader(r);
    String line=null;
    Pattern titleRegex=Pattern.compile(""String_Node_Str"");
    Pattern volumeRegex=Pattern.compile(""String_Node_Str"");
    Pattern muteRegex=Pattern.compile(""String_Node_Str"");
    String currentHeader=null;
    String currentIndex=null;
    String currentVolume=null;
    String currentMute=null;
    boolean vmIdFound=false;
    boolean volumeFound=false;
    boolean muteFound=false;
    boolean headerFound=false;
    while ((line=rr.readLine()) != null) {
      Matcher titleMatch=titleRegex.matcher(line);
      if (titleMatch.matches()) {
        currentHeader=titleMatch.group(1);
        currentIndex=titleMatch.group(2);
        currentVolume=null;
        currentMute=null;
        vmIdFound=false;
        volumeFound=false;
        muteFound=false;
        headerFound=type.header.equals(currentHeader);
      }
      if (headerFound && line.contains(vmId)) {
        vmIdFound=true;
      }
      if (headerFound) {
        Matcher volumeMatch=volumeRegex.matcher(line);
        if (volumeMatch.matches()) {
          volumeFound=true;
          currentVolume=volumeMatch.group(1);
        }
      }
      if (headerFound) {
        Matcher muteMatch=muteRegex.matcher(line);
        if (muteMatch.matches()) {
          muteFound=true;
          currentMute=muteMatch.group(1);
        }
      }
      if (headerFound && vmIdFound && volumeFound&& muteFound) {
        AudioEntry entry=new AudioEntry(Integer.parseInt(currentIndex),Integer.parseInt(currentVolume),""String_Node_Str"".equalsIgnoreCase(currentMute));
        return entry;
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return null;
}"
46501,"public synchronized AudioEntry getAudio(String key,Type type){
  return getVolumeEntry(key,type);
}","public synchronized AudioEntry getAudio(String vmId,Type type){
  return getVolumeEntry(vmId,type);
}"
46502,"public synchronized void setVolume(String key,final Type type,int vol){
  final AudioEntry ve=getVolumeEntry(key,type);
  if (ve != null) {
    int v=(int)(65536d * (double)(vol / 100d));
    if (v > 65536) {
      vol=100;
      v=65536;
    }
    final String s=String.format(""String_Node_Str"",v);
    ShellUtil pacmd=new ShellUtil();
    try {
      pacmd.run(""String_Node_Str"",""String_Node_Str"" + type.cmd + ""String_Node_Str"",ve.index + ""String_Node_Str"",""String_Node_Str"" + s);
      ve.setVolume(vol);
    }
 catch (    Exception e) {
    }
  }
}","public synchronized void setVolume(String vmId,final Type type,int volPC){
  final AudioEntry volEntry=getVolumeEntry(vmId,type);
  if (volEntry != null) {
    ShellUtil pacmd=new ShellUtil();
    try {
      pacmd.run(""String_Node_Str"",""String_Node_Str"" + type.cmd + ""String_Node_Str"",volEntry.getIndex() + ""String_Node_Str"",volPC + ""String_Node_Str"");
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}"
46503,"public synchronized void setMuted(String key,final Type type,final boolean muted){
  final AudioEntry ve=getVolumeEntry(key,type);
  if (ve != null) {
    ShellUtil pacmd=new ShellUtil();
    try {
      pacmd.run(""String_Node_Str"",""String_Node_Str"" + type.cmd + ""String_Node_Str"",ve.index + ""String_Node_Str"",muted + ""String_Node_Str"");
      ve.setMuted(muted);
    }
 catch (    Exception e) {
      LOG.error(e.toString());
    }
  }
}","public synchronized void setMuted(String vmId,final Type type,final boolean muted){
  final AudioEntry ve=getVolumeEntry(vmId,type);
  if (ve != null) {
    ShellUtil pacmd=new ShellUtil();
    try {
      pacmd.run(""String_Node_Str"",""String_Node_Str"" + type.cmd + ""String_Node_Str"",ve.getIndex() + ""String_Node_Str"",muted + ""String_Node_Str"");
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}"
46504,"private void run() throws Exception {
  CubeUIDefaults.initDefaults();
  new File(CubeCommonProperties.getProperty(""String_Node_Str"")).mkdirs();
  new File(CubeCommonProperties.getProperty(""String_Node_Str"")).mkdirs();
  new File(CubeCommonProperties.getProperty(""String_Node_Str"")).mkdirs();
  DmcryptContainerFactory.cleanup();
  ioc.addBean(new XrandrCLI());
  ioc.addBean(new CubeUI());
  ioc.addBean(new CubeClient());
  ioc.addBean(new ClientFacade());
  ioc.addBean(new VmControl());
  ioc.addBean(new VmMonitor());
  ioc.addBean(new VmActionListener());
  ioc.addBean(new CubeActionListener());
  ioc.addBean(XWindowManager.getInstance());
  ioc.addBean(new WindowManager());
  ioc.addBean(new CubeCore());
  ioc.addBean(new SessionManager());
  ioc.addBean(new LoginMachine());
  ioc.addBean(new ScAuthModule());
  ioc.addBean(new DmcryptContainerFactory());
  ioc.addBean(new ScTokenDevice());
  ioc.addBean(new CNMStateMachine());
  ioc.setupDependenciesOnAllBeans();
  VmAbstractAction.addVmActionListener(ioc.getBean(VmActionListener.class));
  CubeAbstractAction.addCubeActionListener(ioc.getBean(CubeActionListener.class));
  ioc.getBean(IXrandr.class).start();
  ioc.getBean(ICubeUI.class).start();
  ioc.getBean(XWindowManager.class).start();
  ioc.getBean(ISessionManager.class).start();
  ioc.getBean(ITokenDevice.class).start();
  ioc.getBean(IAuthModule.class).start();
  ioc.getBean(ILogin.class).start();
}","private void run() throws Exception {
  new VmAudioControl().setMainVolume(120);
  CubeUIDefaults.initDefaults();
  new File(CubeCommonProperties.getProperty(""String_Node_Str"")).mkdirs();
  new File(CubeCommonProperties.getProperty(""String_Node_Str"")).mkdirs();
  new File(CubeCommonProperties.getProperty(""String_Node_Str"")).mkdirs();
  DmcryptContainerFactory.cleanup();
  ioc.addBean(new XrandrCLI());
  ioc.addBean(new CubeUI());
  ioc.addBean(new CubeClient());
  ioc.addBean(new ClientFacade());
  ioc.addBean(new VmControl());
  ioc.addBean(new VmMonitor());
  ioc.addBean(new VmActionListener());
  ioc.addBean(new CubeActionListener());
  ioc.addBean(XWindowManager.getInstance());
  ioc.addBean(new WindowManager());
  ioc.addBean(new CubeCore());
  ioc.addBean(new SessionManager());
  ioc.addBean(new LoginMachine());
  ioc.addBean(new ScAuthModule());
  ioc.addBean(new DmcryptContainerFactory());
  ioc.addBean(new ScTokenDevice());
  ioc.addBean(new CNMStateMachine());
  ioc.setupDependenciesOnAllBeans();
  VmAbstractAction.addVmActionListener(ioc.getBean(VmActionListener.class));
  CubeAbstractAction.addCubeActionListener(ioc.getBean(CubeActionListener.class));
  ioc.getBean(IXrandr.class).start();
  ioc.getBean(ICubeUI.class).start();
  ioc.getBean(XWindowManager.class).start();
  ioc.getBean(ISessionManager.class).start();
  ioc.getBean(ITokenDevice.class).start();
  ioc.getBean(IAuthModule.class).start();
  ioc.getBean(ILogin.class).start();
}"
46505,"@Override protected JPanel createCenterContentPanel(){
  ImageIcon icon=null;
  JPanel contentPnl=new JPanel();
  SpringLayout layout=new SpringLayout();
  contentPnl.setLayout(layout);
  JLabel iconLb=new JLabel(icon);
  contentPnl.add(iconLb);
  layout.putConstraint(SpringLayout.NORTH,iconLb,40,SpringLayout.NORTH,contentPnl);
  layout.putConstraint(SpringLayout.WEST,iconLb,20,SpringLayout.WEST,contentPnl);
  int yoffset=0;
  for (  Type t : Type.values()) {
    JLabel label=t.label;
    JSlider slider=t.slider;
    JCheckBox cbox=t.cbox;
    contentPnl.add(label);
    contentPnl.add(slider);
    contentPnl.add(cbox);
    layout.putConstraint(SpringLayout.NORTH,label,20,SpringLayout.NORTH,slider);
    layout.putConstraint(SpringLayout.WEST,label,20,SpringLayout.WEST,slider);
    layout.putConstraint(SpringLayout.NORTH,cbox,-5,SpringLayout.NORTH,slider);
    layout.putConstraint(SpringLayout.WEST,cbox,200,SpringLayout.WEST,slider);
    layout.putConstraint(SpringLayout.NORTH,slider,0 + yoffset,SpringLayout.NORTH,iconLb);
    layout.putConstraint(SpringLayout.WEST,slider,20,SpringLayout.EAST,iconLb);
    setMinimumSize(MINIMUM_DIALOG_SIZE);
    yoffset+=50;
  }
  return contentPnl;
}","@Override protected JPanel createCenterContentPanel(){
  ImageIcon icon=null;
  JPanel contentPnl=new JPanel();
  SpringLayout layout=new SpringLayout();
  contentPnl.setLayout(layout);
  JLabel iconLb=new JLabel(icon);
  contentPnl.add(iconLb);
  layout.putConstraint(SpringLayout.NORTH,iconLb,40,SpringLayout.NORTH,contentPnl);
  layout.putConstraint(SpringLayout.WEST,iconLb,20,SpringLayout.WEST,contentPnl);
  int yoffset=0;
  for (  TypeUI t : TypeUI.values()) {
    JLabel label=t.label;
    JSlider slider=t.slider;
    JCheckBox cbox=t.cbox;
    contentPnl.add(label);
    contentPnl.add(slider);
    contentPnl.add(cbox);
    layout.putConstraint(SpringLayout.NORTH,label,20,SpringLayout.NORTH,slider);
    layout.putConstraint(SpringLayout.WEST,label,20,SpringLayout.WEST,slider);
    layout.putConstraint(SpringLayout.NORTH,cbox,-5,SpringLayout.NORTH,slider);
    layout.putConstraint(SpringLayout.WEST,cbox,200,SpringLayout.WEST,slider);
    layout.putConstraint(SpringLayout.NORTH,slider,0 + yoffset,SpringLayout.NORTH,iconLb);
    layout.putConstraint(SpringLayout.WEST,slider,20,SpringLayout.EAST,iconLb);
    setMinimumSize(MINIMUM_DIALOG_SIZE);
    yoffset+=50;
  }
  return contentPnl;
}"
46506,"public AudioDialog(JFrame owner){
  super(owner);
}","public AudioDialog(JFrame owner,String vmId,VmAudioControl vmc){
  super(owner);
  this.vmId=vmId;
  this.vmc=vmc;
  initSlider(TypeUI.AUDIO,vmc.getAudio(vmId,Type.AUDIO),Type.AUDIO);
  initSlider(TypeUI.MIC,vmc.getAudio(vmId,Type.MIC),Type.MIC);
}"
46507,"@Override public void stateChanged(ChangeEvent e){
  JSlider source=(JSlider)e.getSource();
  if (!source.getValueIsAdjusting()) {
    int o=source.getValue();
    if (sliderListener != null)     sliderListener.actionPerformed(new ActionEvent(new Integer(o),1,""String_Node_Str""));
  }
}","@Override public void stateChanged(ChangeEvent e){
  JSlider source=(JSlider)e.getSource();
  if (!source.getValueIsAdjusting()) {
    int o=source.getValue();
    vmc.setVolume(vmId,type,new Integer(o));
  }
}"
46508,"@Override public void run(){
  EncryptionKey vmKey=null;
  EncryptionKey rtKey=null;
  try {
    Chronos c=new Chronos();
    vmModel.fireVmStateUpdatedEvent(vm);
    c.zap(""String_Node_Str"");
    ctrl.setTempStatus(vm,VmState.STARTING);
    vm.setProgressMessage(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
    ctrl.refreshVmState(vm);
    c.zap(""String_Node_Str"");
    vmKey=keyring.getKey(vm.getVmContainer().getId());
    c.zap(""String_Node_Str"");
    rtKey=keyring.getKey(vm.getRuntimeContainer().getId());
    c.zap(""String_Node_Str"");
    containerFactory.mountContainer(vm.getVmContainer(),vmKey);
    c.zap(""String_Node_Str"");
    containerFactory.mountContainer(vm.getRuntimeContainer(),rtKey);
    c.zap(""String_Node_Str"");
    rtKey.shred();
    c.zap(""String_Node_Str"");
    vmKey.shred();
    c.zap(""String_Node_Str"");
    File sessionTransferFolder=new File(transfer.getMountpoint(),vm.getId() + ""String_Node_Str"");
    vm.setTempFolder(new File(sessionTransferFolder,""String_Node_Str""));
    vm.setImportFolder(new File(sessionTransferFolder,""String_Node_Str""));
    vm.setExportFolder(new File(sessionTransferFolder,""String_Node_Str""));
    vm.getTempFolder().mkdirs();
    vm.getImportFolder().mkdirs();
    vm.getExportFolder().mkdirs();
    c.zap(""String_Node_Str"");
    product.registerVm(vm);
    c.zap(""String_Node_Str"");
    vpnManager.openVpn(vm,keyring,new VpnListener(){
      @Override public void opened(){
        try {
          while (product.getProductState(vm) == VmProductState.STARTING) {
            Thread.sleep(500);
          }
          product.connectNic(vm,true);
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
          vm.setVpnState(VmVpnState.NOT_CONNECTED);
          vmModel.fireVmStateUpdatedEvent(vm);
        }
        vm.setVpnState(VmVpnState.CONNECTED);
        vmModel.fireVmStateUpdatedEvent(vm);
      }
      @Override public void closed(){
        try {
          product.connectNic(vm,false);
        }
 catch (        VmException e) {
          LOG.error(""String_Node_Str"",e);
        }
        vm.setVpnState(VmVpnState.NOT_CONNECTED);
        vmModel.fireVmStateUpdatedEvent(vm);
      }
      @Override public void connecting(){
        try {
          product.connectNic(vm,false);
        }
 catch (        VmException e) {
          LOG.error(""String_Node_Str"",e);
        }
        vm.setVpnState(VmVpnState.CONNECTING);
        vmModel.fireVmStateUpdatedEvent(vm);
      }
      @Override public void failed(){
        try {
          product.connectNic(vm,false);
        }
 catch (        VmException e) {
          LOG.error(""String_Node_Str"",e);
        }
        vm.setVpnState(VmVpnState.NOT_CONNECTED);
        vmModel.fireVmStateUpdatedEvent(vm);
      }
    }
);
    c.zap(""String_Node_Str"");
    product.startVm(vm);
    c.zap(""String_Node_Str"");
    boolean isUnknown=false;
    long isUnknownSince=0;
    long timeout=System.currentTimeMillis() + START_TIMEOUT;
    while (System.currentTimeMillis() < timeout) {
      VmProductState ps=product.getProductState(vm);
      if (ps == VmProductState.RUNNING || ps == VmProductState.ERROR) {
        c.zap(""String_Node_Str"" + ps + ""String_Node_Str"");
        break;
      }
 else       if (ps == VmProductState.UNKNOWN) {
        if (isUnknown) {
          if (isUnknownSince + UNKNOWN_STATE_TIMEOUT < System.currentTimeMillis()) {
            LOG.debug(""String_Node_Str"");
            break;
          }
        }
 else {
          isUnknown=true;
          isUnknownSince=System.currentTimeMillis();
          LOG.debug(""String_Node_Str"");
        }
      }
 else {
        isUnknown=false;
      }
      LOG.debug(""String_Node_Str"");
      Thread.sleep(500);
    }
    c.zap(""String_Node_Str"" + product.getProductState(vm) + ""String_Node_Str"");
    LOG.debug(""String_Node_Str"",product.getProductState(vm));
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    if (rtKey != null)     rtKey.shred();
    if (vmKey != null)     vmKey.shred();
    ctrl.clearTempStatus(vm);
    ctrl.refreshVmState(vm);
  }
}","@Override public void run(){
  EncryptionKey vmKey=null;
  EncryptionKey rtKey=null;
  try {
    Chronos c=new Chronos();
    vmModel.fireVmStateUpdatedEvent(vm);
    c.zap(""String_Node_Str"");
    ctrl.setTempStatus(vm,VmState.STARTING);
    vm.setProgressMessage(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
    ctrl.refreshVmState(vm);
    c.zap(""String_Node_Str"");
    vmKey=keyring.getKey(vm.getVmContainer().getId());
    c.zap(""String_Node_Str"");
    rtKey=keyring.getKey(vm.getRuntimeContainer().getId());
    c.zap(""String_Node_Str"");
    containerFactory.mountContainer(vm.getVmContainer(),vmKey);
    c.zap(""String_Node_Str"");
    containerFactory.mountContainer(vm.getRuntimeContainer(),rtKey);
    c.zap(""String_Node_Str"");
    rtKey.shred();
    c.zap(""String_Node_Str"");
    vmKey.shred();
    c.zap(""String_Node_Str"");
    File sessionTransferFolder=new File(transfer.getMountpoint(),vm.getId() + ""String_Node_Str"");
    vm.setTempFolder(new File(sessionTransferFolder,""String_Node_Str""));
    vm.setImportFolder(new File(sessionTransferFolder,""String_Node_Str""));
    vm.setExportFolder(new File(sessionTransferFolder,""String_Node_Str""));
    vm.getTempFolder().mkdirs();
    vm.getImportFolder().mkdirs();
    vm.getExportFolder().mkdirs();
    c.zap(""String_Node_Str"");
    product.registerVm(vm);
    c.zap(""String_Node_Str"");
    vpnManager.openVpn(vm,keyring,new VpnListener(){
      @Override public void opened(){
        try {
          while (product.getProductState(vm) == VmProductState.STARTING) {
            Thread.sleep(500);
          }
          product.connectNic(vm,true);
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
          vm.setVpnState(VmVpnState.NOT_CONNECTED);
          vmModel.fireVmStateUpdatedEvent(vm);
        }
        vm.setVpnState(VmVpnState.CONNECTED);
        vmModel.fireVmStateUpdatedEvent(vm);
      }
      @Override public void closed(){
        try {
          product.connectNic(vm,false);
        }
 catch (        VmException e) {
          LOG.error(""String_Node_Str"",e);
        }
        vm.setVpnState(VmVpnState.NOT_CONNECTED);
        vmModel.fireVmStateUpdatedEvent(vm);
      }
      @Override public void connecting(){
        try {
          product.connectNic(vm,false);
          vm.setVpnState(VmVpnState.CONNECTING);
        }
 catch (        VmException e) {
          LOG.error(""String_Node_Str"",e);
          vm.setVpnState(VmVpnState.NOT_CONNECTED);
        }
        vmModel.fireVmStateUpdatedEvent(vm);
      }
      @Override public void failed(){
        try {
          product.connectNic(vm,false);
        }
 catch (        VmException e) {
          LOG.error(""String_Node_Str"",e);
        }
        vm.setVpnState(VmVpnState.NOT_CONNECTED);
        vmModel.fireVmStateUpdatedEvent(vm);
      }
    }
);
    c.zap(""String_Node_Str"");
    product.startVm(vm);
    c.zap(""String_Node_Str"");
    boolean isUnknown=false;
    long isUnknownSince=0;
    long timeout=System.currentTimeMillis() + START_TIMEOUT;
    while (System.currentTimeMillis() < timeout) {
      VmProductState ps=product.getProductState(vm);
      if (ps == VmProductState.RUNNING || ps == VmProductState.ERROR) {
        c.zap(""String_Node_Str"" + ps + ""String_Node_Str"");
        break;
      }
 else       if (ps == VmProductState.UNKNOWN) {
        if (isUnknown) {
          if (isUnknownSince + UNKNOWN_STATE_TIMEOUT < System.currentTimeMillis()) {
            LOG.debug(""String_Node_Str"");
            break;
          }
        }
 else {
          isUnknown=true;
          isUnknownSince=System.currentTimeMillis();
          LOG.debug(""String_Node_Str"");
        }
      }
 else {
        isUnknown=false;
      }
      LOG.debug(""String_Node_Str"");
      Thread.sleep(500);
    }
    c.zap(""String_Node_Str"" + product.getProductState(vm) + ""String_Node_Str"");
    LOG.debug(""String_Node_Str"",product.getProductState(vm));
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    if (rtKey != null)     rtKey.shred();
    if (vmKey != null)     vmKey.shred();
    ctrl.clearTempStatus(vm);
    ctrl.refreshVmState(vm);
  }
}"
46509,"@Override public void connecting(){
  try {
    product.connectNic(vm,false);
  }
 catch (  VmException e) {
    LOG.error(""String_Node_Str"",e);
  }
  vm.setVpnState(VmVpnState.CONNECTING);
  vmModel.fireVmStateUpdatedEvent(vm);
}","@Override public void connecting(){
  try {
    product.connectNic(vm,false);
    vm.setVpnState(VmVpnState.CONNECTING);
  }
 catch (  VmException e) {
    LOG.error(""String_Node_Str"",e);
    vm.setVpnState(VmVpnState.NOT_CONNECTED);
  }
  vmModel.fireVmStateUpdatedEvent(vm);
}"
46510,"@Override public void notifyConnectionState(INetworkManager.NetworkConnectionState state){
  lock();
  try {
    if (mode == Mode.SESSION) {
      LOG.debug(""String_Node_Str"" + state + ""String_Node_Str"");
      clientFacade.notifyConnectionStateUpdate(state);
    }
  }
  finally {
    unlock();
  }
}","@Override public void notifyConnectionState(INetworkManager.NetworkConnectionState state){
  lock();
  try {
    lastConnectionState=state;
    if (mode == Mode.SESSION) {
      LOG.debug(""String_Node_Str"" + state + ""String_Node_Str"");
      clientFacade.notifyConnectionStateUpdate(state);
    }
  }
  finally {
    unlock();
  }
}"
46511,"/** 
 * Display VM of active session
 */
private void displayVmsOfActiveSession(){
  setCurrentCallback(null);
  if (activeSession == null) {
    LOG.debug(""String_Node_Str"");
  }
 else {
    LOG.debug(""String_Node_Str"" + activeSession + ""String_Node_Str"");
    List<Vm> vms=activeSession.getModel().getVmList();
    clientFacade.displayTabs(vms);
  }
}","/** 
 * Display VM of active session
 */
private void displayVmsOfActiveSession(){
  setCurrentCallback(null);
  if (activeSession == null) {
    LOG.debug(""String_Node_Str"");
  }
 else {
    LOG.debug(""String_Node_Str"" + activeSession + ""String_Node_Str"");
    List<Vm> vms=activeSession.getModel().getVmList();
    clientFacade.displayTabs(vms);
    if (lastConnectionState != null) {
      clientFacade.notifyConnectionStateUpdate(lastConnectionState);
    }
  }
}"
46512,"@Override public void start(){
  setCurrentState(NetworkConnectionState.NOT_CONNECTED);
  try {
    nmApplet.connect();
    nmApplet.addSignalHanlder(DBusConnection.SYSTEM,StateChanged.class,new StateChangedHandler());
    nmApplet.addSignalHanlder(DBusConnection.SYSTEM,VpnStateChanged.class,new VpnStateChangedHandler());
    nmApplet.addSignalHanlder(DBusConnection.SYSTEM,org.freedesktop.NetworkManager.Device.StateChanged.class,new DeviceStateChangedHandler());
  }
 catch (  DBusException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","@Override public void start(){
  setCurrentState(NetworkConnectionState.NOT_CONNECTED);
  try {
    nmApplet.connect();
    nmApplet.addSignalHanlder(DBusConnection.SYSTEM,StateChanged.class,new StateChangedHandler());
    nmApplet.addSignalHanlder(DBusConnection.SYSTEM,VpnStateChanged.class,new VpnStateChangedHandler());
    nmApplet.addSignalHanlder(DBusConnection.SYSTEM,org.freedesktop.NetworkManager.Device.StateChanged.class,new DeviceStateChangedHandler());
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          nmApplet.enable(false);
        }
 catch (        Exception e) {
        }
        try {
          nmApplet.enable(true);
        }
 catch (        Exception e) {
        }
      }
    }
);
  }
 catch (  DBusException e) {
    LOG.error(""String_Node_Str"",e);
  }
}"
46513,"public void start(){
  networkManager.addListener(new Listener(){
    @Override public void stateChanged(    NetworkConnectionState old,    NetworkConnectionState state){
      Collection<CacheEntry> vpns=new ArrayList<VpnManager.CacheEntry>();
synchronized (vpnCache) {
        vpns.addAll(vpnCache.values());
      }
switch (state) {
case CONNECTED:
        LOG.debug(""String_Node_Str"");
      for (      CacheEntry e : vpns) {
        if (e.keyring.isOpen()) {
          try {
            openVpn(e.vm,e.keyring,e.listener);
          }
 catch (          VmException e1) {
            LOG.error(""String_Node_Str"");
          }
        }
 else {
          LOG.error(""String_Node_Str"");
        }
      }
    break;
case CONNECTING:
  break;
case CONNECTING_VPN:
break;
case NOT_CONNECTED:
for (CacheEntry e : vpns) {
try {
  closeVpn(e.vm);
}
 catch (VmException e1) {
  LOG.error(""String_Node_Str"");
}
}
break;
default :
break;
}
}
}
);
}","public void start(){
  networkManager.addListener(new Listener(){
    @Override public void stateChanged(    NetworkConnectionState old,    NetworkConnectionState state){
      Collection<CacheEntry> vpns=new ArrayList<VpnManager.CacheEntry>();
synchronized (vpnCache) {
        vpns.addAll(vpnCache.values());
      }
switch (state) {
case CONNECTED:
        LOG.debug(""String_Node_Str"");
      for (      final CacheEntry e : vpns) {
        exs.execute(new Runnable(){
          @Override public void run(){
            if (e.keyring.isOpen()) {
              try {
                openVpn(e.vm,e.keyring,e.listener);
              }
 catch (              VmException e1) {
                LOG.error(""String_Node_Str"");
              }
            }
 else {
              LOG.error(""String_Node_Str"");
            }
          }
        }
);
      }
    break;
case CONNECTING:
  break;
case CONNECTING_VPN:
break;
case NOT_CONNECTED:
for (final CacheEntry e : vpns) {
exs.execute(new Runnable(){
  @Override public void run(){
    try {
      closeVpn(e.vm);
    }
 catch (    VmException e1) {
      LOG.error(""String_Node_Str"");
    }
  }
}
);
}
break;
default :
break;
}
}
}
);
}"
46514,"@Override public void stateChanged(NetworkConnectionState old,NetworkConnectionState state){
  Collection<CacheEntry> vpns=new ArrayList<VpnManager.CacheEntry>();
synchronized (vpnCache) {
    vpns.addAll(vpnCache.values());
  }
switch (state) {
case CONNECTED:
    LOG.debug(""String_Node_Str"");
  for (  CacheEntry e : vpns) {
    if (e.keyring.isOpen()) {
      try {
        openVpn(e.vm,e.keyring,e.listener);
      }
 catch (      VmException e1) {
        LOG.error(""String_Node_Str"");
      }
    }
 else {
      LOG.error(""String_Node_Str"");
    }
  }
break;
case CONNECTING:
break;
case CONNECTING_VPN:
break;
case NOT_CONNECTED:
for (CacheEntry e : vpns) {
try {
closeVpn(e.vm);
}
 catch (VmException e1) {
LOG.error(""String_Node_Str"");
}
}
break;
default :
break;
}
}","@Override public void stateChanged(NetworkConnectionState old,NetworkConnectionState state){
  Collection<CacheEntry> vpns=new ArrayList<VpnManager.CacheEntry>();
synchronized (vpnCache) {
    vpns.addAll(vpnCache.values());
  }
switch (state) {
case CONNECTED:
    LOG.debug(""String_Node_Str"");
  for (  final CacheEntry e : vpns) {
    exs.execute(new Runnable(){
      @Override public void run(){
        if (e.keyring.isOpen()) {
          try {
            openVpn(e.vm,e.keyring,e.listener);
          }
 catch (          VmException e1) {
            LOG.error(""String_Node_Str"");
          }
        }
 else {
          LOG.error(""String_Node_Str"");
        }
      }
    }
);
  }
break;
case CONNECTING:
break;
case CONNECTING_VPN:
break;
case NOT_CONNECTED:
for (final CacheEntry e : vpns) {
exs.execute(new Runnable(){
@Override public void run(){
try {
  closeVpn(e.vm);
}
 catch (VmException e1) {
  LOG.error(""String_Node_Str"");
}
}
}
);
}
break;
default :
break;
}
}"
46515,"/** 
 * Starts the cube application.
 * @param args the command line arguments
 */
public static void main(String[] args){
  try {
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"" + MachineUuid.getMachineUuid().getUuidAsString());
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    Cube d=new Cube();
    d.run();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * Starts the cube application.
 * @param args the command line arguments
 */
public static void main(String[] args){
  try {
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"" + MachineUuid.getMachineUuid().getUuidAsString());
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    for (    Object k : System.getProperties().keySet()) {
      LOG.info(String.format(""String_Node_Str"",k,System.getProperty((String)k)));
    }
    Cube d=new Cube();
    d.run();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}"
46516,"@Override public void notifyConnectionState(INetworkManager.NetworkConnectionState state){
  lock();
  try {
    LOG.debug(""String_Node_Str"" + state + ""String_Node_Str"");
    clientFacade.notifyConnectionStateUpdate(state);
  }
  finally {
    unlock();
  }
}","@Override public void notifyConnectionState(INetworkManager.NetworkConnectionState state){
  lock();
  try {
    if (mode == Mode.SESSION) {
      LOG.debug(""String_Node_Str"" + state + ""String_Node_Str"");
      clientFacade.notifyConnectionStateUpdate(state);
    }
  }
  finally {
    unlock();
  }
}"
46517,"private void showLogoPopupMenu(final MouseEvent mouseEvent){
  cubePopupMenu=new JidePopupMenu();
  cubePopupMenu.add(new CubeLogoutAction());
  cubePopupMenu.addSeparator();
  cubePopupMenu.add(new CubeShutdownAction());
  JideMenu showMenu=new JideMenu(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
  showMenu.setIcon(IconManager.getInstance().getIcon(""String_Node_Str""));
  TreeSet<VmHandle> hidden=new TreeSet<VmHandle>(new VmHandleHumanComparator(vmMon));
  for (  VmHandle h : client.listVms()) {
    if (""String_Node_Str"".equalsIgnoreCase(vmMon.getVmProperty(h,""String_Node_Str""))) {
      hidden.add(h);
    }
  }
  if (hidden.size() == 0) {
    showMenu.setEnabled(false);
  }
 else {
    for (    VmHandle h : hidden) {
      final String label=String.format(""String_Node_Str"",vmMon.getVmName(h),vmMon.getVmDomain(h),vmMon.getVmClassification(h).name());
      showMenu.add(new VmHideAction(label,h,true,false));
    }
    showMenu.setEnabled(true);
  }
  List<CubeScreen> screens=cubeUI.getScreens();
  if (screens.size() > 1) {
    JideMenu screensMenu=new JideMenu(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
    cubePopupMenu.add(screensMenu);
    screensMenu.add(new CubeLayoutAction(cubeUI,Layout.A,I18nBundleProvider.getBundle().getString(""String_Node_Str""),IconManager.getInstance().getIcon(""String_Node_Str"")));
    screensMenu.add(new CubeLayoutAction(cubeUI,Layout.B,I18nBundleProvider.getBundle().getString(""String_Node_Str""),IconManager.getInstance().getIcon(""String_Node_Str"")));
    screensMenu.add(new CubeLayoutAction(cubeUI,Layout.AB,I18nBundleProvider.getBundle().getString(""String_Node_Str""),IconManager.getInstance().getIcon(""String_Node_Str"")));
    screensMenu.add(new CubeLayoutAction(cubeUI,Layout.BA,I18nBundleProvider.getBundle().getString(""String_Node_Str""),IconManager.getInstance().getIcon(""String_Node_Str"")));
  }
  cubePopupMenu.add(showMenu);
  vmPopupMenu.addSeparator();
  vmPopupMenu.add(new JideMenu(""String_Node_Str""));
  JComponent comp=(JComponent)mouseEvent.getSource();
  cubePopupMenu.show(comp,comp.getX(),comp.getY() + comp.getHeight());
}","private void showLogoPopupMenu(final MouseEvent mouseEvent){
  cubePopupMenu=new JidePopupMenu();
  cubePopupMenu.add(new CubeLogoutAction());
  cubePopupMenu.addSeparator();
  cubePopupMenu.add(new CubeShutdownAction());
  JideMenu showMenu=new JideMenu(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
  showMenu.setIcon(IconManager.getInstance().getIcon(""String_Node_Str""));
  TreeSet<VmHandle> hidden=new TreeSet<VmHandle>(new VmHandleHumanComparator(vmMon));
  for (  VmHandle h : client.listVms()) {
    if (""String_Node_Str"".equalsIgnoreCase(vmMon.getVmProperty(h,""String_Node_Str""))) {
      hidden.add(h);
    }
  }
  if (hidden.size() == 0) {
    showMenu.setEnabled(false);
  }
 else {
    for (    VmHandle h : hidden) {
      final String label=String.format(""String_Node_Str"",vmMon.getVmName(h),vmMon.getVmDomain(h),vmMon.getVmClassification(h).name());
      showMenu.add(new VmHideAction(label,h,true,false));
    }
    showMenu.setEnabled(true);
  }
  List<CubeScreen> screens=cubeUI.getScreens();
  if (screens.size() > 1) {
    JideMenu screensMenu=new JideMenu(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
    cubePopupMenu.add(screensMenu);
    screensMenu.add(new CubeLayoutAction(cubeUI,Layout.A,I18nBundleProvider.getBundle().getString(""String_Node_Str""),IconManager.getInstance().getIcon(""String_Node_Str"")));
    screensMenu.add(new CubeLayoutAction(cubeUI,Layout.B,I18nBundleProvider.getBundle().getString(""String_Node_Str""),IconManager.getInstance().getIcon(""String_Node_Str"")));
    screensMenu.add(new CubeLayoutAction(cubeUI,Layout.AB,I18nBundleProvider.getBundle().getString(""String_Node_Str""),IconManager.getInstance().getIcon(""String_Node_Str"")));
    screensMenu.add(new CubeLayoutAction(cubeUI,Layout.BA,I18nBundleProvider.getBundle().getString(""String_Node_Str""),IconManager.getInstance().getIcon(""String_Node_Str"")));
  }
  cubePopupMenu.add(showMenu);
  cubePopupMenu.addSeparator();
  cubePopupMenu.add(new JideMenu(""String_Node_Str""));
  JComponent comp=(JComponent)mouseEvent.getSource();
  cubePopupMenu.show(comp,comp.getX(),comp.getY() + comp.getHeight());
}"
46518,"@Override public void notifyConnectionState(NetworkConnectionState state){
  this.connectionState=state;
synchronized (this) {
    if (descWs != null) {
switch (state) {
case CONNECTED:
        descWs.enable(true);
      break;
case NOT_CONNECTED:
    descWs.enable(false);
  break;
default :
break;
}
}
}
}","@Override public void notifyConnectionState(NetworkConnectionState state){
  this.connectionState=state;
synchronized (this) {
    if (descWs != null) {
switch (state) {
case CONNECTED_TO_CUBE:
case CONNECTED_TO_CUBE_BY_VPN:
        descWs.enable(true);
      break;
case NOT_CONNECTED:
    descWs.enable(false);
  break;
default :
break;
}
}
}
}"
46519,"private void checkVpnNeeded(){
  if (nmApplet.isIpReachable(CubeClientCoreProperties.getProperty(VPN_IP_CHECK_PROPERTIE))) {
    LOG.debug(""String_Node_Str"");
    setCurrentState(NetworkConnectionState.CONNECTED);
  }
 else {
    LOG.debug(""String_Node_Str"");
    setCurrentState(NetworkConnectionState.CONNECTING_VPN);
    try {
      nmApplet.startVpn();
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
      setCurrentState(NetworkConnectionState.NOT_CONNECTED);
    }
  }
}","private void checkVpnNeeded(){
  if (nmApplet.isIpReachable(CubeClientCoreProperties.getProperty(VPN_IP_CHECK_PROPERTIE))) {
    LOG.debug(""String_Node_Str"");
    setCurrentState(NetworkConnectionState.CONNECTED_TO_CUBE);
  }
 else {
    LOG.debug(""String_Node_Str"");
    setCurrentState(NetworkConnectionState.CONNECTING_VPN);
    try {
      nmApplet.startVpn();
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
      setCurrentState(NetworkConnectionState.NOT_CONNECTED);
    }
  }
}"
46520,"private void process(CNMStateEvent action){
  LOG.debug(""String_Node_Str"",action);
synchronized (this) {
switch (action) {
case NM_CONNECTING:
      nmConnected=false;
    setCurrentState(NetworkConnectionState.CONNECTING);
  break;
case NM_CONNECTED:
nmConnected=true;
checkVpnNeeded();
break;
case NM_DISCONNECTED:
nmConnected=false;
setCurrentState(NetworkConnectionState.NOT_CONNECTED);
nmApplet.closeVpn();
break;
case VPN_CONNECTING:
if (nmConnected) {
setCurrentState(NetworkConnectionState.CONNECTING_VPN);
}
 else {
nmApplet.closeVpn();
}
break;
case VPN_CONNECTED:
if (nmConnected) {
setCurrentState(NetworkConnectionState.CONNECTED);
}
 else {
nmApplet.closeVpn();
}
break;
case VPN_DISCONNECTED:
if (nmConnected) {
checkVpnNeeded();
}
break;
default :
break;
}
}
}","private void process(CNMStateEvent action){
  LOG.debug(""String_Node_Str"",action);
synchronized (this) {
switch (action) {
case NM_CONNECTING:
      nmConnected=false;
    setCurrentState(NetworkConnectionState.CONNECTING);
  break;
case NM_CONNECTED:
nmConnected=true;
checkVpnNeeded();
break;
case NM_DISCONNECTED:
nmConnected=false;
setCurrentState(NetworkConnectionState.NOT_CONNECTED);
nmApplet.closeVpn();
break;
case VPN_CONNECTING:
if (nmConnected) {
setCurrentState(NetworkConnectionState.CONNECTING_VPN);
}
 else {
nmApplet.closeVpn();
}
break;
case VPN_CONNECTED:
if (nmConnected) {
setCurrentState(NetworkConnectionState.CONNECTED_TO_CUBE_BY_VPN);
}
 else {
nmApplet.closeVpn();
}
break;
case VPN_DISCONNECTED:
if (nmConnected) {
checkVpnNeeded();
}
break;
default :
break;
}
}
}"
46521,"public void handle(VpnConnectionState sig){
  LOG.debug(""String_Node_Str"",sig);
switch (sig) {
case NM_VPN_CONNECTION_STATE_ACTIVATED:
    process(CNMStateEvent.VPN_CONNECTED);
  break;
case NM_VPN_CONNECTION_STATE_PREPARE:
case NM_VPN_CONNECTION_STATE_NEED_AUTH:
case NM_VPN_CONNECTION_STATE_CONNECT:
case NM_VPN_CONNECTION_STATE_IP_CONFIG_GET:
process(CNMStateEvent.VPN_CONNECTING);
break;
default :
process(CNMStateEvent.VPN_DISCONNECTED);
break;
}
}","public void handle(VpnConnectionState sig){
  LOG.debug(""String_Node_Str"",sig);
switch (sig) {
case CUBEVPN_CONNECTION_STATE_ACTIVATED:
    process(CNMStateEvent.VPN_CONNECTED);
  break;
case CUBEVPN_CONNECTION_STATE_CONNECT:
process(CNMStateEvent.VPN_CONNECTING);
break;
default :
process(CNMStateEvent.VPN_DISCONNECTED);
break;
}
}"
46522,"public void start(){
  networkManager.addListener(new Listener(){
    @Override public void stateChanged(    NetworkConnectionState old,    NetworkConnectionState state){
      Collection<CacheEntry> vpns=new ArrayList<VpnManager.CacheEntry>();
synchronized (vpnCache) {
        vpns.addAll(vpnCache.values());
      }
switch (state) {
case CONNECTED:
        LOG.debug(""String_Node_Str"",vpns.size());
      for (      final CacheEntry e : vpns) {
        exs.execute(new Runnable(){
          @Override public void run(){
            LOG.debug(""String_Node_Str"");
            if (e.keyring.isOpen()) {
              try {
                openVpn(e.vm,e.keyring,e.listener);
              }
 catch (              VmException e1) {
                LOG.error(""String_Node_Str"");
              }
            }
 else {
              LOG.error(""String_Node_Str"");
            }
          }
        }
);
      }
    break;
case CONNECTING:
  break;
case CONNECTING_VPN:
break;
case NOT_CONNECTED:
LOG.debug(""String_Node_Str"",vpns.size());
for (final CacheEntry e : vpns) {
exs.execute(new Runnable(){
@Override public void run(){
  try {
    closeVpn(e.vm,true);
  }
 catch (  VmException e1) {
    LOG.error(""String_Node_Str"");
  }
}
}
);
}
break;
default :
break;
}
}
}
);
}","public void start(){
  networkManager.addListener(new Listener(){
    @Override public void stateChanged(    NetworkConnectionState old,    NetworkConnectionState state){
      Collection<CacheEntry> vpns=new ArrayList<VpnManager.CacheEntry>();
synchronized (vpnCache) {
        vpns.addAll(vpnCache.values());
      }
switch (state) {
case CONNECTED_TO_CUBE_BY_VPN:
case CONNECTED_TO_CUBE:
        LOG.debug(""String_Node_Str"",vpns.size());
      for (      final CacheEntry e : vpns) {
        exs.execute(new Runnable(){
          @Override public void run(){
            LOG.debug(""String_Node_Str"");
            if (e.keyring.isOpen()) {
              try {
                openVpn(e.vm,e.keyring,e.listener);
              }
 catch (              VmException e1) {
                LOG.error(""String_Node_Str"");
              }
            }
 else {
              LOG.error(""String_Node_Str"");
            }
          }
        }
);
      }
    break;
case CONNECTING:
  break;
case CONNECTING_VPN:
break;
case NOT_CONNECTED:
LOG.debug(""String_Node_Str"",vpns.size());
for (final CacheEntry e : vpns) {
exs.execute(new Runnable(){
@Override public void run(){
  try {
    closeVpn(e.vm,true);
  }
 catch (  VmException e1) {
    LOG.error(""String_Node_Str"");
  }
}
}
);
}
break;
default :
break;
}
}
}
);
}"
46523,"@Override public void stateChanged(NetworkConnectionState old,NetworkConnectionState state){
  Collection<CacheEntry> vpns=new ArrayList<VpnManager.CacheEntry>();
synchronized (vpnCache) {
    vpns.addAll(vpnCache.values());
  }
switch (state) {
case CONNECTED:
    LOG.debug(""String_Node_Str"",vpns.size());
  for (  final CacheEntry e : vpns) {
    exs.execute(new Runnable(){
      @Override public void run(){
        LOG.debug(""String_Node_Str"");
        if (e.keyring.isOpen()) {
          try {
            openVpn(e.vm,e.keyring,e.listener);
          }
 catch (          VmException e1) {
            LOG.error(""String_Node_Str"");
          }
        }
 else {
          LOG.error(""String_Node_Str"");
        }
      }
    }
);
  }
break;
case CONNECTING:
break;
case CONNECTING_VPN:
break;
case NOT_CONNECTED:
LOG.debug(""String_Node_Str"",vpns.size());
for (final CacheEntry e : vpns) {
exs.execute(new Runnable(){
@Override public void run(){
try {
closeVpn(e.vm,true);
}
 catch (VmException e1) {
LOG.error(""String_Node_Str"");
}
}
}
);
}
break;
default :
break;
}
}","@Override public void stateChanged(NetworkConnectionState old,NetworkConnectionState state){
  Collection<CacheEntry> vpns=new ArrayList<VpnManager.CacheEntry>();
synchronized (vpnCache) {
    vpns.addAll(vpnCache.values());
  }
switch (state) {
case CONNECTED_TO_CUBE_BY_VPN:
case CONNECTED_TO_CUBE:
    LOG.debug(""String_Node_Str"",vpns.size());
  for (  final CacheEntry e : vpns) {
    exs.execute(new Runnable(){
      @Override public void run(){
        LOG.debug(""String_Node_Str"");
        if (e.keyring.isOpen()) {
          try {
            openVpn(e.vm,e.keyring,e.listener);
          }
 catch (          VmException e1) {
            LOG.error(""String_Node_Str"");
          }
        }
 else {
          LOG.error(""String_Node_Str"");
        }
      }
    }
);
  }
break;
case CONNECTING:
break;
case CONNECTING_VPN:
break;
case NOT_CONNECTED:
LOG.debug(""String_Node_Str"",vpns.size());
for (final CacheEntry e : vpns) {
exs.execute(new Runnable(){
@Override public void run(){
try {
closeVpn(e.vm,true);
}
 catch (VmException e1) {
LOG.error(""String_Node_Str"");
}
}
}
);
}
break;
default :
break;
}
}"
46524,"@Override public void run(){
  try {
    fireVpnConnectionState(VpnConnectionState.NM_VPN_CONNECTION_STATE_PREPARE);
    ScriptUtil script=new ScriptUtil();
    ShellUtil su=script.execute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"");
    if (su.getExitValue() == 0) {
      fireVpnConnectionState(VpnConnectionState.NM_VPN_CONNECTION_STATE_ACTIVATED);
    }
 else {
      fireVpnConnectionState(VpnConnectionState.NM_VPN_CONNECTION_STATE_FAILED);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    fireVpnConnectionState(VpnConnectionState.NM_VPN_CONNECTION_STATE_FAILED);
  }
}","@Override public void run(){
  try {
    LOG.debug(""String_Node_Str"");
    fireVpnConnectionState(VpnConnectionState.CUBEVPN_CONNECTION_STATE_PREPARE);
    ScriptUtil script=new ScriptUtil();
    ShellUtil su=script.execute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"");
    if (su.getExitValue() == 0) {
      fireVpnConnectionState(VpnConnectionState.CUBEVPN_CONNECTION_STATE_ACTIVATED);
    }
 else {
      fireVpnConnectionState(VpnConnectionState.CUBEVPN_CONNECTION_STATE_FAILED);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    fireVpnConnectionState(VpnConnectionState.CUBEVPN_CONNECTION_STATE_FAILED);
  }
}"
46525,"public void startVpn(){
  exec.execute(new Runnable(){
    @Override public void run(){
      try {
        fireVpnConnectionState(VpnConnectionState.NM_VPN_CONNECTION_STATE_PREPARE);
        ScriptUtil script=new ScriptUtil();
        ShellUtil su=script.execute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"");
        if (su.getExitValue() == 0) {
          fireVpnConnectionState(VpnConnectionState.NM_VPN_CONNECTION_STATE_ACTIVATED);
        }
 else {
          fireVpnConnectionState(VpnConnectionState.NM_VPN_CONNECTION_STATE_FAILED);
        }
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",e);
        fireVpnConnectionState(VpnConnectionState.NM_VPN_CONNECTION_STATE_FAILED);
      }
    }
  }
);
}","public void startVpn(){
  exec.execute(new Runnable(){
    @Override public void run(){
      try {
        LOG.debug(""String_Node_Str"");
        fireVpnConnectionState(VpnConnectionState.CUBEVPN_CONNECTION_STATE_PREPARE);
        ScriptUtil script=new ScriptUtil();
        ShellUtil su=script.execute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"");
        if (su.getExitValue() == 0) {
          fireVpnConnectionState(VpnConnectionState.CUBEVPN_CONNECTION_STATE_ACTIVATED);
        }
 else {
          fireVpnConnectionState(VpnConnectionState.CUBEVPN_CONNECTION_STATE_FAILED);
        }
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",e);
        fireVpnConnectionState(VpnConnectionState.CUBEVPN_CONNECTION_STATE_FAILED);
      }
    }
  }
);
}"
46526,"public void closeVpn(){
  try {
    LOG.debug(""String_Node_Str"");
    ScriptUtil script=new ScriptUtil();
    ShellUtil su=script.execute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"");
    LOG.debug(su.getStandardOutput().toString());
    LOG.debug(su.getStandardError().toString());
    fireVpnConnectionState(VpnConnectionState.NM_VPN_CONNECTION_STATE_DISCONNECTED);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    fireVpnConnectionState(VpnConnectionState.NM_VPN_CONNECTION_STATE_FAILED);
  }
}","public void closeVpn(){
  try {
    LOG.debug(""String_Node_Str"");
    ScriptUtil script=new ScriptUtil();
    ShellUtil su=script.execute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",CubeClientCoreProperties.getProperty(""String_Node_Str""),""String_Node_Str"");
    LOG.debug(su.getStandardOutput().toString());
    LOG.debug(su.getStandardError().toString());
    fireVpnConnectionState(VpnConnectionState.CUBEVPN_CONNECTION_STATE_DISCONNECTED);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    fireVpnConnectionState(VpnConnectionState.CUBEVPN_CONNECTION_STATE_FAILED);
  }
}"
46527,"@Override public void notifyConnectionStateUpdate(INetworkManager.NetworkConnectionState state){
switch (state) {
case CONNECTED:
    if (lastState == NetworkConnectionState.CONNECTING_VPN) {
      userIface.setSessionStateIcon(ConnectionIcon.CONNECTED_VPN);
    }
 else {
      userIface.setSessionStateIcon(ConnectionIcon.CONNECTED);
    }
  break;
case NOT_CONNECTED:
userIface.setSessionStateIcon(ConnectionIcon.NOT_CONNECTED);
break;
case CONNECTING_VPN:
userIface.setSessionStateIcon(ConnectionIcon.CONNECTING_VPN);
break;
case CONNECTING:
userIface.setSessionStateIcon(ConnectionIcon.CONNECTING);
break;
}
lastState=state;
}","@Override public void notifyConnectionStateUpdate(INetworkManager.NetworkConnectionState state){
switch (state) {
case CONNECTED_TO_CUBE:
    userIface.setSessionStateIcon(ConnectionIcon.CONNECTED);
  break;
case CONNECTED_TO_CUBE_BY_VPN:
userIface.setSessionStateIcon(ConnectionIcon.CONNECTED_VPN);
break;
case NOT_CONNECTED:
userIface.setSessionStateIcon(ConnectionIcon.NOT_CONNECTED);
break;
case CONNECTING_VPN:
userIface.setSessionStateIcon(ConnectionIcon.CONNECTING_VPN);
break;
case CONNECTING:
userIface.setSessionStateIcon(ConnectionIcon.CONNECTING);
break;
}
}"
46528,"@Override public void run(){
  EncryptionKey vmKey=null;
  EncryptionKey rtKey=null;
  try {
    Chronos c=new Chronos();
    c.zap(""String_Node_Str"");
    ctrl.setTempStatus(vm,VmState.STARTING);
    vm.setProgressMessage(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
    ctrl.refreshVmState(vm);
    c.zap(""String_Node_Str"");
    vmKey=keyring.getKey(vm.getVmContainer().getId());
    c.zap(""String_Node_Str"");
    rtKey=keyring.getKey(vm.getRuntimeContainer().getId());
    c.zap(""String_Node_Str"");
    containerFactory.mountContainer(vm.getVmContainer(),vmKey);
    c.zap(""String_Node_Str"");
    containerFactory.mountContainer(vm.getRuntimeContainer(),rtKey);
    c.zap(""String_Node_Str"");
    rtKey.shred();
    c.zap(""String_Node_Str"");
    vmKey.shred();
    c.zap(""String_Node_Str"");
    File sessionTransferFolder=new File(transfer.getMountpoint(),vm.getId() + ""String_Node_Str"");
    vm.setTempFolder(new File(sessionTransferFolder,""String_Node_Str""));
    vm.setImportFolder(new File(sessionTransferFolder,""String_Node_Str""));
    vm.setExportFolder(new File(sessionTransferFolder,""String_Node_Str""));
    vm.getTempFolder().mkdirs();
    vm.getImportFolder().mkdirs();
    vm.getExportFolder().mkdirs();
    c.zap(""String_Node_Str"");
    product.registerVm(vm);
    c.zap(""String_Node_Str"");
    vpnManager.openVpn(vm,keyring,new VpnListener(){
      @Override public void opened(){
        try {
          while (product.getProductState(vm) == VmProductState.STARTING) {
            Thread.sleep(500);
          }
          product.connectNic(vm,true);
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
          vm.setVpnState(VmVpnState.NOT_CONNECTED);
          vmModel.fireVmStateUpdatedEvent(vm);
        }
        vm.setVpnState(VmVpnState.CONNECTED);
        vmModel.fireVmStateUpdatedEvent(vm);
      }
      @Override public void closed(){
        try {
          product.connectNic(vm,false);
        }
 catch (        VmException e) {
          LOG.error(""String_Node_Str"",e);
        }
        vm.setVpnState(VmVpnState.NOT_CONNECTED);
        vmModel.fireVmStateUpdatedEvent(vm);
      }
      @Override public void connecting(){
        try {
          product.connectNic(vm,false);
          vm.setVpnState(VmVpnState.CONNECTING);
        }
 catch (        VmException e) {
          LOG.error(""String_Node_Str"",e);
          vm.setVpnState(VmVpnState.NOT_CONNECTED);
        }
        vmModel.fireVmStateUpdatedEvent(vm);
      }
      @Override public void failed(){
        try {
          product.connectNic(vm,false);
        }
 catch (        VmException e) {
          LOG.error(""String_Node_Str"",e);
        }
        vm.setVpnState(VmVpnState.NOT_CONNECTED);
        vmModel.fireVmStateUpdatedEvent(vm);
      }
    }
);
    c.zap(""String_Node_Str"");
    product.startVm(vm);
    c.zap(""String_Node_Str"");
    boolean isUnknown=false;
    long isUnknownSince=0;
    long timeout=System.currentTimeMillis() + START_TIMEOUT;
    while (System.currentTimeMillis() < timeout) {
      VmProductState ps=product.getProductState(vm);
      if (ps == VmProductState.RUNNING || ps == VmProductState.ERROR) {
        c.zap(""String_Node_Str"" + ps + ""String_Node_Str"");
        break;
      }
 else       if (ps == VmProductState.UNKNOWN) {
        if (isUnknown) {
          if (isUnknownSince + UNKNOWN_STATE_TIMEOUT < System.currentTimeMillis()) {
            LOG.debug(""String_Node_Str"");
            break;
          }
        }
 else {
          isUnknown=true;
          isUnknownSince=System.currentTimeMillis();
          LOG.debug(""String_Node_Str"");
        }
      }
 else {
        isUnknown=false;
      }
      LOG.debug(""String_Node_Str"");
      Thread.sleep(500);
    }
    c.zap(""String_Node_Str"" + product.getProductState(vm) + ""String_Node_Str"");
    LOG.debug(""String_Node_Str"",product.getProductState(vm));
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    if (rtKey != null)     rtKey.shred();
    if (vmKey != null)     vmKey.shred();
    ctrl.clearTempStatus(vm);
    ctrl.refreshVmState(vm);
  }
}","@Override public void run(){
  EncryptionKey vmKey=null;
  EncryptionKey rtKey=null;
  try {
    Chronos c=new Chronos();
    c.zap(""String_Node_Str"");
    ctrl.setTempStatus(vm,VmState.STARTING);
    vm.setProgressMessage(I18nBundleProvider.getBundle().getString(""String_Node_Str""));
    ctrl.refreshVmState(vm);
    c.zap(""String_Node_Str"");
    vmKey=keyring.getKey(vm.getVmContainer().getId());
    c.zap(""String_Node_Str"");
    rtKey=keyring.getKey(vm.getRuntimeContainer().getId());
    c.zap(""String_Node_Str"");
    containerFactory.mountContainer(vm.getVmContainer(),vmKey);
    c.zap(""String_Node_Str"");
    containerFactory.mountContainer(vm.getRuntimeContainer(),rtKey);
    c.zap(""String_Node_Str"");
    rtKey.shred();
    c.zap(""String_Node_Str"");
    vmKey.shred();
    c.zap(""String_Node_Str"");
    File sessionTransferFolder=new File(transfer.getMountpoint(),vm.getId() + ""String_Node_Str"");
    vm.setTempFolder(new File(sessionTransferFolder,""String_Node_Str""));
    vm.setImportFolder(new File(sessionTransferFolder,""String_Node_Str""));
    vm.setExportFolder(new File(sessionTransferFolder,""String_Node_Str""));
    vm.getTempFolder().mkdirs();
    vm.getImportFolder().mkdirs();
    vm.getExportFolder().mkdirs();
    c.zap(""String_Node_Str"");
    product.registerVm(vm);
    c.zap(""String_Node_Str"");
    vpnManager.openVpn(vm,keyring,new VpnListener(){
      @Override public void opened(){
        try {
          while (product.getProductState(vm) == VmProductState.STARTING) {
            Thread.sleep(500);
          }
          product.connectNic(vm,true);
          vm.setVpnState(VmVpnState.CONNECTED);
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
          vm.setVpnState(VmVpnState.NOT_CONNECTED);
        }
        vmModel.fireVmStateUpdatedEvent(vm);
      }
      @Override public void closed(){
        try {
          product.connectNic(vm,false);
        }
 catch (        VmException e) {
          LOG.error(""String_Node_Str"",e);
        }
        vm.setVpnState(VmVpnState.NOT_CONNECTED);
        vmModel.fireVmStateUpdatedEvent(vm);
      }
      @Override public void connecting(){
        try {
          product.connectNic(vm,false);
          vm.setVpnState(VmVpnState.CONNECTING);
        }
 catch (        VmException e) {
          LOG.error(""String_Node_Str"",e);
          vm.setVpnState(VmVpnState.NOT_CONNECTED);
        }
        vmModel.fireVmStateUpdatedEvent(vm);
      }
      @Override public void failed(){
        try {
          product.connectNic(vm,false);
        }
 catch (        VmException e) {
          LOG.error(""String_Node_Str"",e);
        }
        vm.setVpnState(VmVpnState.NOT_CONNECTED);
        vmModel.fireVmStateUpdatedEvent(vm);
      }
    }
);
    c.zap(""String_Node_Str"");
    product.startVm(vm);
    c.zap(""String_Node_Str"");
    boolean isUnknown=false;
    long isUnknownSince=0;
    long timeout=System.currentTimeMillis() + START_TIMEOUT;
    while (System.currentTimeMillis() < timeout) {
      VmProductState ps=product.getProductState(vm);
      if (ps == VmProductState.RUNNING || ps == VmProductState.ERROR) {
        c.zap(""String_Node_Str"" + ps + ""String_Node_Str"");
        break;
      }
 else       if (ps == VmProductState.UNKNOWN) {
        if (isUnknown) {
          if (isUnknownSince + UNKNOWN_STATE_TIMEOUT < System.currentTimeMillis()) {
            LOG.debug(""String_Node_Str"");
            break;
          }
        }
 else {
          isUnknown=true;
          isUnknownSince=System.currentTimeMillis();
          LOG.debug(""String_Node_Str"");
        }
      }
 else {
        isUnknown=false;
      }
      LOG.debug(""String_Node_Str"");
      Thread.sleep(500);
    }
    c.zap(""String_Node_Str"" + product.getProductState(vm) + ""String_Node_Str"");
    LOG.debug(""String_Node_Str"",product.getProductState(vm));
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    if (rtKey != null)     rtKey.shred();
    if (vmKey != null)     vmKey.shred();
    ctrl.clearTempStatus(vm);
    ctrl.refreshVmState(vm);
  }
}"
46529,"@Override public void opened(){
  try {
    while (product.getProductState(vm) == VmProductState.STARTING) {
      Thread.sleep(500);
    }
    product.connectNic(vm,true);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    vm.setVpnState(VmVpnState.NOT_CONNECTED);
    vmModel.fireVmStateUpdatedEvent(vm);
  }
  vm.setVpnState(VmVpnState.CONNECTED);
  vmModel.fireVmStateUpdatedEvent(vm);
}","@Override public void opened(){
  try {
    while (product.getProductState(vm) == VmProductState.STARTING) {
      Thread.sleep(500);
    }
    product.connectNic(vm,true);
    vm.setVpnState(VmVpnState.CONNECTED);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    vm.setVpnState(VmVpnState.NOT_CONNECTED);
  }
  vmModel.fireVmStateUpdatedEvent(vm);
}"
46530,"public synchronized void showOnlyTheseWindow(Collection<Window> hideWindowList,Collection<Window> showWindowList){
  Display display=x11.XOpenDisplay(displayName);
  if (showWindowList != null) {
    for (    Window window : showWindowList) {
      LOG.error(""String_Node_Str"",window);
      x11.XMapWindow(display,window);
      x11.XMapRaised(display,window);
    }
  }
  if (hideWindowList != null) {
    for (    Window window : hideWindowList) {
      XWindowAttributes attributes=new XWindowAttributes();
      x11.XGetWindowAttributes(display,window,attributes);
      if (attributes.map_state != X11.IsUnmapped) {
        LOG.error(""String_Node_Str"",window);
        x11.XUnmapWindow(display,window);
      }
    }
  }
  x11.XFlush(display);
  x11.XCloseDisplay(display);
}","public synchronized void showOnlyTheseWindow(Collection<Window> hideWindowList,Collection<Window> showWindowList){
  Display display=x11.XOpenDisplay(displayName);
  if (showWindowList != null) {
    for (    Window window : showWindowList) {
      LOG.debug(""String_Node_Str"",window);
      x11.XMapWindow(display,window);
      x11.XMapRaised(display,window);
    }
  }
  if (hideWindowList != null) {
    for (    Window window : hideWindowList) {
      XWindowAttributes attributes=new XWindowAttributes();
      x11.XGetWindowAttributes(display,window,attributes);
      if (attributes.map_state != X11.IsUnmapped) {
        LOG.debug(""String_Node_Str"",window);
        x11.XUnmapWindow(display,window);
      }
    }
  }
  x11.XFlush(display);
  x11.XCloseDisplay(display);
}"
46531,"public void fireVmStateUpdatedEvent(Vm vm){
synchronized (stateListeners) {
    for (    IVmStateChangeListener l : stateListeners) {
      l.vmStateUpdated(vm);
    }
  }
}","public void fireVmStateUpdatedEvent(Vm vm){
synchronized (stateListeners) {
    for (    IVmStateChangeListener l : stateListeners) {
      try {
        l.vmStateUpdated(vm);
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"");
      }
    }
  }
}"
46532,"@Override public void mountContainer(Container container,EncryptionKey key) throws ContainerException {
  try {
    LOG.debug(""String_Node_Str"");
    ShellUtil s=su.execute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",container.getContainerFile().getAbsolutePath(),""String_Node_Str"",key.getFile().getAbsolutePath(),""String_Node_Str"",container.getMountpoint().getAbsolutePath());
    if (s.getExitValue() != 0) {
      LOG.error(""String_Node_Str"" + s.getStandardOutput());
      LOG.error(""String_Node_Str"" + s.getStandardError());
      throw new RuntimeException(""String_Node_Str"" + s.getExitValue() + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    throw new ContainerException(""String_Node_Str"" + container + ""String_Node_Str"",e);
  }
}","@Override public void mountContainer(Container container,EncryptionKey key) throws ContainerException {
  try {
    ShellUtil s=su.execute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",container.getContainerFile().getAbsolutePath(),""String_Node_Str"",key.getFile().getAbsolutePath(),""String_Node_Str"",container.getMountpoint().getAbsolutePath());
    if (s.getExitValue() == 0) {
      LOG.debug(""String_Node_Str"");
    }
 else {
      LOG.debug(""String_Node_Str"");
      try {
        unmountContainer(container);
      }
 catch (      Exception e) {
      }
      s=su.execute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",container.getContainerFile().getAbsolutePath(),""String_Node_Str"",key.getFile().getAbsolutePath(),""String_Node_Str"",container.getMountpoint().getAbsolutePath());
    }
    if (s.getExitValue() != 0) {
      LOG.error(""String_Node_Str"" + s.getStandardOutput());
      LOG.error(""String_Node_Str"" + s.getStandardError());
      throw new RuntimeException(""String_Node_Str"" + s.getExitValue() + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    throw new ContainerException(""String_Node_Str"" + container + ""String_Node_Str"",e);
  }
}"
46533,"public void save(Vm vm,VmModel model) throws VmException {
  lock.lock();
  try {
    IMachine machine=getIMachineReference(vm.getId());
    ISession session=mgr.getSessionObject();
    machine.lockMachine(session,LockType.Shared);
    machine=session.getMachine();
    try {
      IProgress progress=session.getConsole().saveState();
      long to=System.currentTimeMillis() + MAX_SAVE_TIME;
      while (!progress.getCompleted()) {
        if (System.currentTimeMillis() > to) {
          LOG.error(""String_Node_Str"");
          break;
        }
        LOG.debug(""String_Node_Str"",progress.getOperationPercent());
        vm.setProgress(progress.getOperationPercent().intValue());
        model.fireVmStateUpdatedEvent(vm);
        Thread.sleep(500);
      }
      LOG.debug(""String_Node_Str"");
      File mp=vm.getRuntimeContainer().getMountpoint();
      ShellUtil su=new ShellUtil();
      su.run(null,ShellUtil.NO_TIMEOUT,""String_Node_Str"",""String_Node_Str"",new File(mp,""String_Node_Str"" + vm.getId() + ""String_Node_Str"").getAbsolutePath(),new File(mp,""String_Node_Str"").getAbsolutePath());
      machine=lockMachine(vm.getId(),session);
      session.getConsole().discardSavedState(true);
    }
  finally {
      unlockSession(session);
    }
    vm.setProgress(100);
    vm.setProgressMessage(""String_Node_Str"");
    model.fireVmStateUpdatedEvent(vm);
  }
 catch (  Exception e) {
    throw new VmException(""String_Node_Str"",e);
  }
 finally {
    lock.unlock();
  }
}","public void save(Vm vm,VmModel model) throws VmException {
  lock.lock();
  try {
    IMachine machine=getIMachineReference(vm.getId());
    ISession session=mgr.getSessionObject();
    machine.lockMachine(session,LockType.Shared);
    machine=session.getMachine();
    try {
      IProgress progress=session.getConsole().saveState();
      long to=System.currentTimeMillis() + MAX_SAVE_TIME;
      while (!progress.getCompleted()) {
        if (System.currentTimeMillis() > to) {
          LOG.error(""String_Node_Str"");
          break;
        }
        LOG.debug(""String_Node_Str"",progress.getOperationPercent());
        vm.setProgress(progress.getOperationPercent().intValue());
        model.fireVmStateUpdatedEvent(vm);
        Thread.sleep(500);
      }
      LOG.debug(""String_Node_Str"");
      File mp=vm.getRuntimeContainer().getMountpoint();
      for (      File f : mp.listFiles()) {
        if (f.getName().endsWith(""String_Node_Str"")) {
          LOG.debug(""String_Node_Str"",f.getAbsolutePath());
          ShellUtil su=new ShellUtil();
          su.run(null,ShellUtil.NO_TIMEOUT,""String_Node_Str"",""String_Node_Str"",f.getAbsolutePath(),new File(mp,""String_Node_Str"").getAbsolutePath());
          break;
        }
 else {
          LOG.debug(""String_Node_Str"",f.getAbsolutePath());
        }
      }
      machine=lockMachine(vm.getId(),session);
      session.getConsole().discardSavedState(true);
    }
  finally {
      unlockSession(session);
    }
    vm.setProgress(100);
    vm.setProgressMessage(""String_Node_Str"");
    model.fireVmStateUpdatedEvent(vm);
  }
 catch (  Exception e) {
    throw new VmException(""String_Node_Str"",e);
  }
 finally {
    lock.unlock();
  }
}"
46534,"@Override public void visitMethodInsn(int opcode,String owner,String name,String desc){
  addBipushInsn(mv,GlobalStateForInstrumentation.instance.getIid());
  addBipushInsn(mv,GlobalStateForInstrumentation.instance.getMid());
  mv.visitLdcInsn(owner);
  mv.visitLdcInsn(name);
  mv.visitLdcInsn(desc);
switch (opcode) {
case INVOKEVIRTUAL:
    mv.visitMethodInsn(INVOKESTATIC,Config.analysisClass,""String_Node_Str"",""String_Node_Str"");
  break;
case INVOKESPECIAL:
mv.visitMethodInsn(INVOKESTATIC,Config.analysisClass,""String_Node_Str"",""String_Node_Str"");
break;
case INVOKESTATIC:
mv.visitMethodInsn(INVOKESTATIC,Config.analysisClass,""String_Node_Str"",""String_Node_Str"");
break;
case INVOKEINTERFACE:
mv.visitMethodInsn(INVOKESTATIC,Config.analysisClass,""String_Node_Str"",""String_Node_Str"");
break;
default :
System.err.println(""String_Node_Str"" + opcode);
System.exit(1);
}
Label begin=new Label();
Label handler=new Label();
Label end=new Label();
mv.visitLabel(begin);
mv.visitMethodInsn(opcode,owner,name,desc);
mv.visitJumpInsn(GOTO,end);
mv.visitLabel(handler);
addBipushInsn(mv,GlobalStateForInstrumentation.instance.getIid());
addBipushInsn(mv,GlobalStateForInstrumentation.instance.getMid());
mv.visitMethodInsn(INVOKESTATIC,Config.analysisClass,""String_Node_Str"",""String_Node_Str"");
mv.visitInsn(ATHROW);
mv.visitLabel(end);
addValueReadInsn(mv,desc,""String_Node_Str"");
mv.visitTryCatchBlock(begin,handler,handler,null);
}","@Override public void visitMethodInsn(int opcode,String owner,String name,String desc){
  addBipushInsn(mv,GlobalStateForInstrumentation.instance.getIid());
  addBipushInsn(mv,GlobalStateForInstrumentation.instance.getMid());
  mv.visitLdcInsn(owner);
  mv.visitLdcInsn(name);
  mv.visitLdcInsn(desc);
switch (opcode) {
case INVOKEVIRTUAL:
    mv.visitMethodInsn(INVOKESTATIC,Config.analysisClass,""String_Node_Str"",""String_Node_Str"");
  break;
case INVOKESPECIAL:
mv.visitMethodInsn(INVOKESTATIC,Config.analysisClass,""String_Node_Str"",""String_Node_Str"");
break;
case INVOKESTATIC:
mv.visitMethodInsn(INVOKESTATIC,Config.analysisClass,""String_Node_Str"",""String_Node_Str"");
break;
case INVOKEINTERFACE:
mv.visitMethodInsn(INVOKESTATIC,Config.analysisClass,""String_Node_Str"",""String_Node_Str"");
break;
default :
System.err.println(""String_Node_Str"" + opcode);
System.exit(1);
}
Label begin=new Label();
Label handler=new Label();
Label end=new Label();
mv.visitLabel(begin);
mv.visitMethodInsn(opcode,owner,name,desc);
mv.visitJumpInsn(GOTO,end);
mv.visitLabel(handler);
mv.visitMethodInsn(INVOKESTATIC,Config.analysisClass,""String_Node_Str"",""String_Node_Str"");
mv.visitInsn(ATHROW);
mv.visitLabel(end);
addValueReadInsn(mv,desc,""String_Node_Str"");
mv.visitTryCatchBlock(begin,handler,handler,null);
}"
46535,"private void addBipushInsn(MethodVisitor mv,int val){
switch (val) {
case 0:
    mv.visitInsn(ICONST_0);
  break;
case 1:
mv.visitInsn(ICONST_1);
break;
case 2:
mv.visitInsn(ICONST_2);
break;
case 3:
mv.visitInsn(ICONST_3);
break;
case 4:
mv.visitInsn(ICONST_4);
break;
case 5:
mv.visitInsn(ICONST_5);
break;
default :
mv.visitIntInsn(BIPUSH,val);
}
}","private void addBipushInsn(MethodVisitor mv,int val){
switch (val) {
case 0:
    mv.visitInsn(ICONST_0);
  break;
case 1:
mv.visitInsn(ICONST_1);
break;
case 2:
mv.visitInsn(ICONST_2);
break;
case 3:
mv.visitInsn(ICONST_3);
break;
case 4:
mv.visitInsn(ICONST_4);
break;
case 5:
mv.visitInsn(ICONST_5);
break;
default :
mv.visitLdcInsn(new Integer(val));
break;
}
}"
46536,"public static void main(String[] args){
  foo(9,3,""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}","public static void main(String[] args){
  foo(9999999,3,""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
46537,"public ClusterGraph getMockGraph(String id){
  ClusterGraph g=new ClusterGraph(id,""String_Node_Str"",id);
  Vertex[] vv=new Vertex[5];
  for (int i=0; i < vv.length; i++) {
    vv[i]=new Vertex(""String_Node_Str"" + Integer.toString(i) + ""String_Node_Str"",""String_Node_Str"");
    vv[i].setStyles(StyleSet.withImmutableStyles(styleFactory.href(""String_Node_Str"")));
    g.addVertex(vv[i]);
  }
  vv[1].setStyleClass(""String_Node_Str"");
  Edge[] ev=new Edge[4];
  for (int i=0; i < ev.length; i++) {
    ev[i]=new Edge(""String_Node_Str"" + Integer.toString(i),vv[0],vv[i + 1]);
    ev[i].setStyles(StyleSet.withImmutableStyles(styleFactory.href(""String_Node_Str"")));
    g.addEdge(ev[i]);
  }
  g.addEdge(new Edge(vv[1],vv[2]));
  g.addEdge(new Edge(vv[2],vv[3]));
  vv[4].getData().put(""String_Node_Str"",""String_Node_Str"");
  vv[4].getData().put(""String_Node_Str"",""String_Node_Str"");
  vv[4].getData().put(""String_Node_Str"",""String_Node_Str"");
  vv[4].setStyleClass(""String_Node_Str"");
  ev[1].setStyleClass(""String_Node_Str"");
  ev[2].setStyleClass(""String_Node_Str"");
  ev[3].setStyleClass(""String_Node_Str"");
  return g;
}","public ClusterGraph getMockGraph(String id){
  ClusterGraph g=new ClusterGraph(id,""String_Node_Str"",id);
  Vertex[] vv=new Vertex[5];
  for (int i=0; i < vv.length; i++) {
    vv[i]=new Vertex(""String_Node_Str"" + Integer.toString(i) + ""String_Node_Str"",""String_Node_Str"");
    vv[i].setStyles(StyleSet.withImmutableStyles(styleFactory.href(""String_Node_Str"")));
    g.addVertex(vv[i]);
  }
  vv[1].setStyleClass(""String_Node_Str"");
  Edge[] ev=new Edge[4];
  for (int i=0; i < ev.length; i++) {
    ev[i]=new Edge(""String_Node_Str"" + Integer.toString(i),vv[0],vv[i + 1]);
    ev[i].setStyles(StyleSet.withImmutableStyles(styleFactory.href(""String_Node_Str"")));
    g.addEdge(ev[i]);
  }
  g.addEdge(new Edge(vv[1],vv[2]));
  g.addEdge(new Edge(vv[2],vv[3]));
  vv[4].getUserData().put(""String_Node_Str"",""String_Node_Str"");
  vv[4].getUserData().put(""String_Node_Str"",""String_Node_Str"");
  vv[4].getUserData().put(""String_Node_Str"",""String_Node_Str"");
  vv[4].setStyleClass(""String_Node_Str"");
  ev[1].setStyleClass(""String_Node_Str"");
  ev[2].setStyleClass(""String_Node_Str"");
  ev[3].setStyleClass(""String_Node_Str"");
  return g;
}"
46538,"private void onWrite() throws IOException {
  if (pendingRule != null) {
    pendingRule.performAction();
    return;
  }
  boolean keepScanning=true;
  RESCAN:   while (keepScanning) {
    if (isDeleteMode()) {
      if (buffer.deleteUntil(deleteUntilRule.pattern,inclusiveDelete)) {
        setDeleteModeOff();
        deleteUntilRule.performAction();
        continue RESCAN;
      }
      return;
    }
    keepScanning=false;
    while (buffer.size() >= longestPatternSize) {
      for (      PatternRule r : rules) {
        if (!r.isActive())         continue;
        if (buffer.startsWith(r.pattern)) {
          r.performAction();
          keepScanning=true;
          continue RESCAN;
        }
      }
      if (buffer.size() > 0)       buffer.writeFlush(1,out);
      if (buffer.isEmpty())       break;
    }
  }
}","private void onWrite() throws IOException {
  if (pendingRule != null) {
    pendingRule.performAction();
    if (pendingRule != null)     return;
  }
  boolean keepScanning=true;
  RESCAN:   while (keepScanning) {
    if (isDeleteMode()) {
      if (buffer.deleteUntil(deleteUntilRule.pattern,inclusiveDelete)) {
        setDeleteModeOff();
        deleteUntilRule.performAction();
        continue RESCAN;
      }
      return;
    }
    keepScanning=false;
    while (buffer.size() >= longestPatternSize) {
      for (      PatternRule r : rules) {
        if (!r.isActive())         continue;
        if (buffer.startsWith(r.pattern)) {
          r.performAction();
          if (pendingRule == null)           keepScanning=true;
          continue RESCAN;
        }
      }
      if (buffer.size() > 0)       buffer.writeFlush(1,out);
      if (buffer.isEmpty())       break;
    }
  }
}"
46539,"public static String idFor(EObject o){
  String result=null;
  EAttribute a=o.eClass().getEIDAttribute();
  if (a != null)   result=o.eGet(a).toString();
  if (result == null) {
    Resource r=o.eResource();
    if (r != null)     result=EcoreUtil.getURI(o).toString();
  }
  return result;
}","public static String idFor(EObject o){
  String result=null;
  EAttribute a=o.eClass().getEIDAttribute();
  if (a != null)   result=o.eGet(a).toString();
  return result;
}"
46540,"public void doConfig(){
  file=new Configuration(new File(plugin.getDataFolder(),""String_Node_Str""));
  file.load();
  if (new File(plugin.getDataFolder(),""String_Node_Str"").exists()) {
    System.out.println(""String_Node_Str"");
  }
 else {
    file.setProperty(""String_Node_Str"",""String_Node_Str"");
    file.setProperty(""String_Node_Str"",""String_Node_Str"");
    file.setProperty(""String_Node_Str"",""String_Node_Str"");
    file.save();
    System.out.println(""String_Node_Str"");
  }
  damageDealt=file.getInt(""String_Node_Str"",damageDealt);
  damageDelay=file.getInt(""String_Node_Str"",damageDelay);
  perm=file.getString(""String_Node_Str"",perm);
  bootMod=file.getString(""String_Node_Str"",bootMod);
}","public void doConfig(){
  file=new Configuration(new File(plugin.getDataFolder(),""String_Node_Str""));
  file.load();
  if (new File(plugin.getDataFolder(),""String_Node_Str"").exists()) {
    System.out.println(""String_Node_Str"");
  }
 else {
    file.setProperty(""String_Node_Str"",1);
    file.setProperty(""String_Node_Str"",1);
    file.setProperty(""String_Node_Str"",""String_Node_Str"");
    file.save();
    System.out.println(""String_Node_Str"");
  }
  damageDealt=file.getInt(""String_Node_Str"",damageDealt);
  damageDelay=file.getInt(""String_Node_Str"",damageDelay);
  perm=file.getString(""String_Node_Str"",perm);
  bootMod=file.getString(""String_Node_Str"",bootMod);
}"
46541,"public void onDisable(){
  System.out.println(""String_Node_Str"");
}","public void onDisable(){
  Bukkit.getServer().getScheduler().cancelTask(playerListener.id);
  Bukkit.getServer().getScheduler().cancelAllTasks();
  System.out.println(""String_Node_Str"");
}"
46542,"@Override public void onPlayerMove(final PlayerMoveEvent event){
  Location target=event.getTo();
  World world=target.getWorld();
  permissionsPlugin=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  final Block block=world.getBlockAt(new Location(world,target.getX(),target.getY() - 1,target.getZ()));
  final Block blockxs=world.getBlockAt(new Location(world,target.getX() - 0.4,target.getY(),target.getZ()));
  final Block blockxp=world.getBlockAt(new Location(world,target.getX() + 0.4,target.getY(),target.getZ()));
  final Block blockzs=world.getBlockAt(new Location(world,target.getX(),target.getY(),target.getZ() - 0.4));
  final Block blockzp=world.getBlockAt(new Location(world,target.getX(),target.getY(),target.getZ() + 0.4));
  dmgDealt=props.damageDealt * 2;
  dmgDelay=props.damageDelay * 20;
  air=new ItemStack(Material.AIR);
  if (block.getType() == Material.NETHERRACK || blockxs.getType() == Material.NETHERRACK || blockxp.getType() == Material.NETHERRACK || blockzs.getType() == Material.NETHERRACK || blockzp.getType() == Material.NETHERRACK) {
    if (IsFirst == 0) {
      if (!event.getPlayer().getInventory().getBoots().equals(air) && props.bootMod.equals(""String_Node_Str"")) {
        dmgDealt=dmgDealt / 2;
      }
      if (permissionsPlugin != null) {
        if (!(plugin).permissionHandler.has(event.getPlayer(),""String_Node_Str"")) {
          IsDmg=1;
          IsFirst=1;
          id=Bukkit.getServer().getScheduler().scheduleAsyncRepeatingTask(plugin,new Runnable(){
            public void run(){
              event.getPlayer().damage(dmgDealt);
            }
          }
,0L,dmgDelay);
        }
      }
 else {
        if (!event.getPlayer().isOp()) {
          IsDmg=1;
          IsFirst=1;
          id=Bukkit.getServer().getScheduler().scheduleAsyncRepeatingTask(plugin,new Runnable(){
            public void run(){
              event.getPlayer().damage(dmgDealt);
            }
          }
,0L,dmgDelay);
        }
      }
    }
  }
 else {
    if (IsDmg == 1) {
      Bukkit.getServer().getScheduler().cancelTask(id);
      IsDmg=0;
      IsFirst=0;
    }
  }
}","@Override public void onPlayerMove(final PlayerMoveEvent event){
  Location target=event.getTo();
  World world=target.getWorld();
  permissionsPlugin=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  final Block block=world.getBlockAt(new Location(world,target.getX(),target.getY() - 1,target.getZ()));
  final Block blockxs=world.getBlockAt(new Location(world,target.getX() - 0.4,target.getY(),target.getZ()));
  final Block blockxp=world.getBlockAt(new Location(world,target.getX() + 0.4,target.getY(),target.getZ()));
  final Block blockzs=world.getBlockAt(new Location(world,target.getX(),target.getY(),target.getZ() - 0.4));
  final Block blockzp=world.getBlockAt(new Location(world,target.getX(),target.getY(),target.getZ() + 0.4));
  dmgDealt=props.damageDealt * 2;
  dmgDelay=props.damageDelay * 20;
  air=new ItemStack(Material.AIR);
  if (block.getType() == Material.NETHERRACK || blockxs.getType() == Material.NETHERRACK || blockxp.getType() == Material.NETHERRACK || blockzs.getType() == Material.NETHERRACK || blockzp.getType() == Material.NETHERRACK) {
    if (IsFirst == 0) {
      if (!event.getPlayer().getInventory().getBoots().equals(air) && props.bootMod.equals(""String_Node_Str"")) {
        dmgDealt=dmgDealt / 2;
      }
      if (permissionsPlugin != null) {
        if (!(plugin).permissionHandler.has(event.getPlayer(),""String_Node_Str"")) {
          IsDmg=1;
          IsFirst=1;
          id=Bukkit.getServer().getScheduler().scheduleAsyncRepeatingTask(plugin,new Runnable(){
            public void run(){
              event.getPlayer().damage(dmgDealt);
            }
          }
,0L,dmgDelay);
        }
      }
 else {
        if (!event.getPlayer().isOp()) {
          IsDmg=1;
          IsFirst=1;
          id=Bukkit.getServer().getScheduler().scheduleAsyncRepeatingTask(plugin,new Runnable(){
            public void run(){
              event.getPlayer().damage(dmgDealt);
            }
          }
,0L,dmgDelay);
        }
      }
    }
  }
 else {
    if (IsDmg == 1) {
      Bukkit.getServer().getScheduler().cancelTask(id);
      Bukkit.getServer().getScheduler().cancelAllTasks();
      IsDmg=0;
      IsFirst=0;
    }
  }
}"
46543,"@Override public void onPlayerMove(final PlayerMoveEvent event){
  Location target=event.getTo();
  World world=target.getWorld();
  int i=0;
  protectedWorlds=props.temp.split(""String_Node_Str"");
  for (int x=protectedWorlds.length; x > 0; x--) {
    if (world.getName().equals(protectedWorlds[i])) {
      isPrt=1;
    }
    i++;
  }
  if (isPrt == 0) {
    permissionsPlugin=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
    final Block block=world.getBlockAt(new Location(world,target.getX(),target.getY() - 1,target.getZ()));
    final Block blockxs=world.getBlockAt(new Location(world,target.getX() - 0.4,target.getY(),target.getZ()));
    final Block blockxp=world.getBlockAt(new Location(world,target.getX() + 0.4,target.getY(),target.getZ()));
    final Block blockzs=world.getBlockAt(new Location(world,target.getX(),target.getY(),target.getZ() - 0.4));
    final Block blockzp=world.getBlockAt(new Location(world,target.getX(),target.getY(),target.getZ() + 0.4));
    dmgDealt=props.damageDealt * 2;
    dmgDelay=props.damageDelay * 20;
    air=new ItemStack(Material.AIR);
    int y=0;
    blockIDs=props.blockID.split(""String_Node_Str"");
    for (int x=blockIDs.length; x > 0; x--) {
      int ids=Integer.parseInt(blockIDs[y]);
      if (block.getTypeId() == ids || blockxs.getTypeId() == ids || blockxp.getTypeId() == ids || blockzs.getTypeId() == ids || blockzp.getTypeId() == ids) {
        isBlock=1;
      }
 else {
        isBlock=0;
      }
      y++;
    }
    if (isBlock == 1) {
      if (IsFirst == 0) {
        if (!event.getPlayer().getInventory().getBoots().equals(air) && props.bootMod.equals(""String_Node_Str"")) {
          dmgDealt=dmgDealt / 2;
        }
        if (permissionsPlugin != null) {
          if (!(plugin).permissionHandler.has(event.getPlayer(),""String_Node_Str"")) {
            IsDmg=1;
            IsFirst=1;
            id=Bukkit.getServer().getScheduler().scheduleAsyncRepeatingTask(plugin,new Runnable(){
              public void run(){
                event.getPlayer().damage(dmgDealt);
              }
            }
,0L,dmgDelay);
          }
        }
 else {
          if (!event.getPlayer().isOp()) {
            IsDmg=1;
            IsFirst=1;
            id=Bukkit.getServer().getScheduler().scheduleAsyncRepeatingTask(plugin,new Runnable(){
              public void run(){
                event.getPlayer().damage(dmgDealt);
              }
            }
,0L,dmgDelay);
          }
        }
      }
    }
 else {
      if (IsDmg == 1) {
        Bukkit.getServer().getScheduler().cancelTask(id);
        Bukkit.getServer().getScheduler().cancelAllTasks();
        IsDmg=0;
        IsFirst=0;
      }
    }
  }
}","@Override public void onPlayerMove(final PlayerMoveEvent event){
  Location target=event.getTo();
  World world=target.getWorld();
  int i=0;
  protectedWorlds=props.temp.split(""String_Node_Str"");
  for (int x=protectedWorlds.length; x > 0; x--) {
    if (world.getName().equals(protectedWorlds[i])) {
      isPrt=1;
    }
    i++;
  }
  if (isPrt == 0) {
    permissionsPlugin=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
    final Block block=world.getBlockAt(new Location(world,target.getX(),target.getY() - 1,target.getZ()));
    final Block blockxs=world.getBlockAt(new Location(world,target.getX() - 0.4,target.getY(),target.getZ()));
    final Block blockxp=world.getBlockAt(new Location(world,target.getX() + 0.4,target.getY(),target.getZ()));
    final Block blockzs=world.getBlockAt(new Location(world,target.getX(),target.getY(),target.getZ() - 0.4));
    final Block blockzp=world.getBlockAt(new Location(world,target.getX(),target.getY(),target.getZ() + 0.4));
    dmgDealt=props.damageDealt * 2;
    dmgDelay=props.damageDelay * 20;
    air=new ItemStack(Material.AIR);
    int y=0;
    blockIDs=props.blockID.split(""String_Node_Str"");
    for (int x=blockIDs.length; x > 0; x--) {
      if (blockIDs[y].contains(""String_Node_Str"")) {
        wool=blockIDs[y].split(""String_Node_Str"");
        data=Integer.parseInt(wool[1]);
        ids=Integer.parseInt(wool[0]);
      }
 else {
        ids=Integer.parseInt(blockIDs[y]);
      }
      if (block.getTypeId() == ids || blockxs.getTypeId() == ids || blockxp.getTypeId() == ids || blockzs.getTypeId() == ids || blockzp.getTypeId() == ids) {
        if (ids == 6 || ids == 17 || ids == 35 || ids == 44) {
          if (block.getData() == data || blockxs.getData() == data || blockxp.getData() == data || blockzs.getData() == data || blockzp.getData() == data) {
            isBlock=1;
          }
        }
 else {
          isBlock=1;
        }
      }
 else {
        isBlock=0;
      }
      y++;
    }
    if (isBlock == 1) {
      if (IsFirst == 0) {
        if (!event.getPlayer().getInventory().getBoots().equals(air) && props.bootMod.equals(""String_Node_Str"")) {
          dmgDealt=dmgDealt / 2;
        }
        if (permissionsPlugin != null) {
          if (!(plugin).permissionHandler.has(event.getPlayer(),""String_Node_Str"")) {
            IsDmg=1;
            IsFirst=1;
            id=Bukkit.getServer().getScheduler().scheduleAsyncRepeatingTask(plugin,new Runnable(){
              public void run(){
                event.getPlayer().damage(dmgDealt);
              }
            }
,0L,dmgDelay);
          }
        }
 else {
          if (!event.getPlayer().isOp()) {
            IsDmg=1;
            IsFirst=1;
            id=Bukkit.getServer().getScheduler().scheduleAsyncRepeatingTask(plugin,new Runnable(){
              public void run(){
                event.getPlayer().damage(dmgDealt);
              }
            }
,0L,dmgDelay);
          }
        }
      }
    }
 else {
      if (IsDmg == 1) {
        Bukkit.getServer().getScheduler().cancelTask(id);
        Bukkit.getServer().getScheduler().cancelAllTasks();
        IsDmg=0;
        IsFirst=0;
      }
    }
  }
}"
46544,"@Override public void run(){
  if (AWTUtilities.getWindowOpacity(jDialog) > 0.01f) {
    AWTUtilities.setWindowOpacity(jDialog,AWTUtilities.getWindowOpacity(jDialog) - 0.01f);
  }
 else {
    jDialog.dispose();
  }
}","@Override public void run(){
  if (AWTUtilities.getWindowOpacity(jWindow) > 0.005f) {
    AWTUtilities.setWindowOpacity(jWindow,AWTUtilities.getWindowOpacity(jWindow) - 0.005f);
  }
 else {
    jWindow.dispose();
  }
}"
46545,"public Fader(JDialog jDialog){
  this.jDialog=jDialog;
}","public Fader(JWindow jWindow){
  this.jWindow=jWindow;
}"
46546,"public NotificationPopup(String noteText,int x,int y,boolean in_fade) throws IOException {
  this.setFocusableWindowState(false);
  final NotificationPopup f=this;
  fade=in_fade;
  Container con=this.getContentPane();
  setUndecorated(true);
  setSize(WIDTH,HEIGHT);
  con.setLayout(new GridBagLayout());
  final Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
  final Insets scnMax=Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
  final int taskBarSize=scnMax.bottom;
  setLocation(x,y);
  lpg=new LinearGradientPaint(0,0,0,getHeight() / 2,new float[]{0f,0.3f,1f},new Color[]{new Color(0.8f,0.8f,1f),new Color(0.75f,0.7f,1f),new Color(0.65f,0.6f,1f)});
  setContentPane(new BackgroundPanel());
  final Container c=this.getContentPane();
  c.setLayout(new GridBagLayout());
  final GridBagConstraints constraints=new GridBagConstraints();
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=1.0f;
  constraints.weighty=1.0f;
  constraints.insets=new Insets(5,15,5,5);
  constraints.anchor=GridBagConstraints.BASELINE;
  constraints.fill=GridBagConstraints.BOTH;
  final JEditorPane l=new JEditorPane(""String_Node_Str"",noteText);
  l.setEditable(false);
  l.setOpaque(false);
  l.addHyperlinkListener(new HyperlinkListener(){
    @Override public void hyperlinkUpdate(    HyperlinkEvent he){
      if (HyperlinkEvent.EventType.ACTIVATED.equals(he.getEventType())) {
        try {
          Desktop desktop=Desktop.getDesktop();
          desktop.browse(URI.create(he.getURL().toString()));
        }
 catch (        Throwable t) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
  }
);
  c.add(l,constraints);
  constraints.gridx++;
  constraints.weightx=0f;
  constraints.weighty=0f;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.anchor=GridBagConstraints.CENTER;
  final JButton b=new JButton(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    final ActionEvent e){
      f.dispose();
    }
  }
);
  b.setOpaque(false);
  b.setFocusable(false);
  c.add(b,constraints);
  this.setAlwaysOnTop(true);
}","public NotificationPopup(String noteText,int x,int y,boolean in_fade) throws IOException {
  this.setFocusableWindowState(false);
  final NotificationPopup f=this;
  fade=in_fade;
  Container con=this.getContentPane();
  setSize(WIDTH,HEIGHT);
  con.setLayout(new GridBagLayout());
  final Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
  final Insets scnMax=Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
  final int taskBarSize=scnMax.bottom;
  setLocation(x,y);
  lpg=new LinearGradientPaint(0,0,0,getHeight() / 2,new float[]{0f,0.3f,1f},new Color[]{new Color(0.8f,0.8f,1f),new Color(0.75f,0.7f,1f),new Color(0.65f,0.6f,1f)});
  setContentPane(new BackgroundPanel());
  final Container c=this.getContentPane();
  c.setLayout(new GridBagLayout());
  final GridBagConstraints constraints=new GridBagConstraints();
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=1.0f;
  constraints.weighty=1.0f;
  constraints.insets=new Insets(5,15,5,5);
  constraints.anchor=GridBagConstraints.BASELINE;
  constraints.fill=GridBagConstraints.BOTH;
  final JEditorPane l=new JEditorPane(""String_Node_Str"",noteText);
  l.setEditable(false);
  l.setOpaque(false);
  l.addHyperlinkListener(new HyperlinkListener(){
    @Override public void hyperlinkUpdate(    HyperlinkEvent he){
      if (HyperlinkEvent.EventType.ACTIVATED.equals(he.getEventType())) {
        try {
          Desktop desktop=Desktop.getDesktop();
          desktop.browse(URI.create(he.getURL().toString()));
        }
 catch (        Throwable t) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
  }
);
  c.add(l,constraints);
  constraints.gridx++;
  constraints.weightx=0f;
  constraints.weighty=0f;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.anchor=GridBagConstraints.CENTER;
  final JButton b=new JButton(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    final ActionEvent e){
      f.dispose();
    }
  }
);
  b.setOpaque(false);
  b.setFocusable(false);
  c.add(b,constraints);
  this.setAlwaysOnTop(true);
}"
46547,"public void addNotification(String notificationHTML) throws IOException {
  clearInvisible();
  Integer lastX=null;
  Integer lastY=null;
  if (size() > 0) {
    NotificationPopup lastNotification=getLast();
    lastX=lastNotification.getX();
    lastY=lastNotification.getY();
  }
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsConfiguration dc=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();
  final Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
  final Insets scnMax=Toolkit.getDefaultToolkit().getScreenInsets(dc);
  final int screenBottomEdge=scnMax.bottom;
  final int screenTopEdge=scnMax.top;
  final int screenLeftEdge=scnMax.left;
  final int screenRightEdge=scnMax.left;
  int x=0;
  int y=0;
  int maxX=(screenSize.width - NotificationPopup.WIDTH - screenRightEdge- NOTIFICATION_MARGIN_PIXELS_LEFT_RIGHT);
  int maxY=screenSize.height - screenBottomEdge - NotificationPopup.HEIGHT;
  if (lastX == null) {
    x=maxX;
  }
 else {
    x=lastX;
  }
  if (lastY == null) {
    y=screenTopEdge;
  }
 else {
    y=(lastY + NotificationPopup.HEIGHT + NOTIFICATION_MARGIN_PIXELS_TOP_BOTTOM);
  }
  if (y > maxY) {
    y=screenTopEdge;
    x=getFreeColumnX(maxX);
  }
  if (x < screenLeftEdge) {
    x=maxX;
  }
  NotificationPopup newNotification=new NotificationPopup(notificationHTML,x,y,true);
  this.add(newNotification);
  newNotification.show();
}","public void addNotification(String notificationHTML) throws IOException {
  clearInvisible();
  Integer lastX=null;
  Integer lastY=null;
  if (size() > 0) {
    NotificationPopup lastNotification=getLast();
    lastX=lastNotification.getX();
    lastY=lastNotification.getY();
  }
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsConfiguration dc=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();
  final Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
  final Insets scnMax=Toolkit.getDefaultToolkit().getScreenInsets(dc);
  final int screenBottomEdge=scnMax.bottom;
  final int screenTopEdge=scnMax.top;
  final int screenLeftEdge=scnMax.left;
  final int screenRightEdge=scnMax.left;
  int x=0;
  int y=0;
  int maxX=(screenSize.width - NotificationPopup.WIDTH - screenRightEdge- NOTIFICATION_MARGIN_PIXELS_LEFT_RIGHT);
  int maxY=screenSize.height - screenBottomEdge - NotificationPopup.HEIGHT;
  if (lastX == null) {
    x=maxX;
  }
 else {
    x=lastX;
  }
  if (lastY == null) {
    y=screenTopEdge;
  }
 else {
    y=(lastY + NotificationPopup.HEIGHT + NOTIFICATION_MARGIN_PIXELS_TOP_BOTTOM);
  }
  if (y > maxY) {
    y=screenTopEdge;
    x=getFreeColumnX(maxX);
  }
  if (x < screenLeftEdge) {
    x=maxX;
  }
  NotificationPopup newNotification=new NotificationPopup(notificationHTML,x,y,true);
  JWindow notificationWindow=new JWindow(newNotification);
  this.add(newNotification);
  newNotification.setVisible(true);
}"
46548,"/** 
 * @return mouse Y position in world coordinates.
 */
public static int getY(){
  return -(int)((org.lwjgl.input.Mouse.getY() - Main.HEIGHT / 2) * WorldRenderer.scale + WorldRenderer.focalPoint.y);
}","/** 
 * @return mouse Y position in world coordinates.
 */
public static int getY(){
  return (int)-((org.lwjgl.input.Mouse.getY() - Main.HEIGHT / 2) * WorldRenderer.scale - WorldRenderer.focalPoint.y);
}"
46549,"public void render(){
  GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
  ARBBufferObject.glBindBufferARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB,vertexBufferID);
  GL11.glVertexPointer(2,GL11.GL_FLOAT,0,0);
  if (colourBufferID > -1) {
    GL11.glEnableClientState(GL11.GL_COLOR_ARRAY);
    ARBBufferObject.glBindBufferARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB,colourBufferID);
    GL11.glColorPointer(4,GL11.GL_FLOAT,0,0);
  }
  if (indexBufferID > -1) {
    ARBBufferObject.glBindBufferARB(ARBVertexBufferObject.GL_ELEMENT_ARRAY_BUFFER_ARB,indexBufferID);
    GL12.glDrawRangeElements(GL11.GL_QUADS,0,indexCount,indexCount,GL11.GL_UNSIGNED_INT,0);
  }
 else {
    GL11.glDrawArrays(GL11.GL_TRIANGLES,0,vertexCount / 2);
  }
  GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
  GL11.glDisableClientState(GL11.GL_COLOR_ARRAY);
}","public void render(){
  GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
  ARBBufferObject.glBindBufferARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB,vertexBufferID);
  GL11.glVertexPointer(2,GL11.GL_FLOAT,0,0);
  if (colourBufferID > -1) {
    GL11.glEnableClientState(GL11.GL_COLOR_ARRAY);
    ARBBufferObject.glBindBufferARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB,colourBufferID);
    GL11.glColorPointer(4,GL11.GL_FLOAT,0,0);
  }
  if (indexBufferID > -1) {
    ARBBufferObject.glBindBufferARB(ARBVertexBufferObject.GL_ELEMENT_ARRAY_BUFFER_ARB,indexBufferID);
    GL12.glDrawRangeElements(GL11.GL_TRIANGLES,0,indexCount,indexCount,GL11.GL_UNSIGNED_INT,0);
  }
 else {
    GL11.glDrawArrays(GL11.GL_TRIANGLES,0,vertexCount / 2);
  }
  GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
  GL11.glDisableClientState(GL11.GL_COLOR_ARRAY);
}"
46550,"private void performHitTestToSelectImage(float x,float y){
  for (  MongoImage image : mImages) {
    if (image.containsPoint(x,y)) {
      Log.d(TAG,String.format(""String_Node_Str"",x,y));
      mSelectedImage=image;
      break;
    }
  }
}","private void performHitTestToSelectImage(float x,float y){
  for (int imageIndex=mImages.size() - 1; imageIndex >= 0; imageIndex--) {
    MongoImage image=mImages.get(imageIndex);
    if (image.containsPoint(x,y)) {
      Log.d(TAG,String.format(""String_Node_Str"",x,y));
      mSelectedImage=image;
      break;
    }
  }
}"
46551,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == TAKE_PHOTO_REQUEST) {
    Intent annotateImageIntent=new Intent(this,AnnotateImage.class);
    annotateImageIntent.putExtra(MediaStore.EXTRA_OUTPUT,mImageUri);
    startActivity(annotateImageIntent);
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == TAKE_PHOTO_REQUEST && resultCode != RESULT_CANCELED) {
    Intent annotateImageIntent=new Intent(this,AnnotateImage.class);
    annotateImageIntent.putExtra(MediaStore.EXTRA_OUTPUT,mImageUri);
    startActivity(annotateImageIntent);
  }
}"
46552,"/** 
 * @param exp the exp to add
 */
public void addExp(int exp){
  setExp((getExp() + exp));
}","/** 
 * @param exp the exp to add
 */
public void addExp(int exp){
  setExp(this.exp + exp);
  checkLevelUP();
}"
46553,"/** 
 * @param exp the exp to remove
 */
public void removeExp(int exp){
  setExp((getExp() - exp));
}","/** 
 * @param exp the exp to remove
 */
public void removeExp(int exp){
  setExp(this.exp - exp);
}"
46554,"@Override public void onPluginEnable(PluginEnableEvent event){
  if (event.getPlugin() != plugin) {
    RCPermissions.onEnable(event.getPlugin());
    RCEconomy.onEnable(event.getPlugin());
  }
}","@Override public void onPluginEnable(PluginEnableEvent event){
  RCPermissions.onEnable(event.getPlugin());
  RCEconomy.onEnable(event.getPlugin());
}"
46555,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  boolean handled=false;
  cmd=plugin.getCommandManager();
  if (cmd.is(label,""String_Node_Str"")) {
    if (args == null || args.length == 0) {
      handled=true;
      this.player=cmd.getPlayerOfSender(sender);
      if (player == sender && RCPermissions.permission(player,""String_Node_Str"")) {
        RCPlayer p=new RCPlayer(player);
        Messaging.sendNoTag(sender,""String_Node_Str"" + Messaging.colorizeText(RCConfig.title + ""String_Node_Str"",ChatColor.YELLOW) + ""String_Node_Str"");
        Messaging.sendMessage(""String_Node_Str"",sender,""String_Node_Str"" + ChatColor.YELLOW + p.getLevel());
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW) + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.experiance);
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getAccount().balance(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.currency);
        Messaging.sendMessage(Language.skillpoints,sender,Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.skillpoints);
        if (!p.getSkills().isEmpty()) {
          String s=""String_Node_Str"";
          for (int i=0; i < p.getSkills().size(); i++) {
            if (i == p.getSkills().size() - 1)             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
 else             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
          }
          Messaging.sendMessage(""String_Node_Str"",sender,s);
        }
      }
 else {
        Messaging.sendMessage(sender,Language.noPermission);
      }
    }
 else     if (cmd.is(args[0],""String_Node_Str"")) {
      if (args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        this.player=cmd.getPlayer(sender,args,1);
        RCPlayer p=new RCPlayer(this.player);
        Messaging.sendNoTag(sender,""String_Node_Str"" + Messaging.colorizeText(player.getName() + ""String_Node_Str"",ChatColor.YELLOW) + ""String_Node_Str"");
        Messaging.sendMessage(""String_Node_Str"",sender,""String_Node_Str"" + ChatColor.YELLOW + p.getLevel());
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW) + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.experiance);
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getAccount().balance(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.currency);
        Messaging.sendMessage(Language.skillpoints,sender,Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.skillpoints);
        if (!p.getSkills().isEmpty()) {
          String s=""String_Node_Str"";
          for (int i=0; i < p.getSkills().size(); i++) {
            if (i == p.getSkills().size() - 1)             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
 else             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
          }
          Messaging.sendMessage(""String_Node_Str"",sender,s);
        }
      }
 else {
        Messaging.sendMessage(sender,Language.noPermission);
      }
    }
 else {
      if (cmd.is(args[0],""String_Node_Str"") && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (args.length == 1) {
          if (p.getBuyableSkills().length > 0) {
            Messaging.sendMessage(Language.buyableSkills,sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getBuyableSkills()),ChatColor.YELLOW));
            ExtraFunctions.listPage(p.getBuyableSkills(),player,1);
          }
 else {
            Messaging.sendNoTag(sender,ChatColor.RED + Language.noLevel);
          }
        }
 else         if (args.length == 2) {
          if (p.getBuyableSkills().length > 0) {
            Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(args[1],ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getBuyableSkills()),ChatColor.YELLOW));
            ExtraFunctions.listPage(p.getBuyableSkills(),player,Integer.parseInt(args[1]));
          }
 else {
            Messaging.sendNoTag(sender,ChatColor.RED + Language.noLevel);
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (args.length == 1) {
          if (!p.getSkills().isEmpty()) {
            Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getSkills()),ChatColor.YELLOW));
            ExtraFunctions.listPage(p.getSkills(),player,1);
          }
 else {
            Messaging.sendNoTag(sender,ChatColor.RED + Language.noSkills);
          }
        }
 else         if (args.length == 2) {
          Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(args[1],ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getSkills()),ChatColor.YELLOW));
          if (p.getSkills() != null && !p.getSkills().equals(null)) {
            ExtraFunctions.listPage(p.getSkills(),player,Integer.parseInt(args[1]));
          }
 else {
            Messaging.sendNoTag(sender,ChatColor.RED + Language.noSkills);
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (args.length == 1) {
          if (p.getSkillCount() == 0) {
            Messaging.sendMessage(sender,Language.noResetSkills);
            return handled;
          }
          Messaging.sendMessage(sender,Language.confirm);
          Messaging.sendMessage(sender,Language.youGet + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.calcSpendSkillpoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpointsBack);
          Messaging.sendMessage(sender,Language.thisIsYour + ""String_Node_Str"" + Messaging.colorizeText((p.getSkillResetCount() + 1) + ""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str""+ Language.resetAndCostsYou+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getResetCost(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.currency);
          Messaging.sendMessage(sender,Language.confirm);
        }
 else         if (args.length == 2 && cmd.is(args[1],""String_Node_Str"")) {
          if (p.getSkillCount() == 0) {
            Messaging.sendMessage(sender,Language.noResetSkills);
            return handled;
          }
 else           if (!p.getAccount().hasEnough(p.getResetCost())) {
            Messaging.sendMessage(sender,Language.youDontHaveEnough + ""String_Node_Str"" + Language.currency);
          }
 else {
            if (p.resetSkills(true)) {
              Messaging.sendMessage(sender,Language.allSkillsReset + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getResetCost(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.currency+ ""String_Node_Str""+ Language.deducted);
              Messaging.sendMessage(sender,Language.youHaveNow + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpoints);
              p.increaseSkillResetCount();
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            }
          }
        }
 else         if (args.length == 3 && cmd.is(args[1],""String_Node_Str"")) {
          if (RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
            this.player=cmd.getPlayer(sender,args,2);
            p=new RCPlayer(player);
            if (p.getSkillCount() == 0) {
              Messaging.sendMessage(sender,Language.noResetSkills);
              return handled;
            }
 else {
              if (p.resetSkills(false)) {
                Messaging.sendMessage(player,Language.allSkillsResetFrom + ""String_Node_Str"" + Messaging.colorizeText(cmd.getPlayerOfSender(sender).getName(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.reseted);
                Messaging.sendMessage(player,Language.youHaveNow + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpoints);
                p.increaseSkillResetCount();
                p.writeDatabase();
              }
 else {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              }
            }
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        if (!args[1].isEmpty()) {
          SingleSkill skill=null;
          try {
            int id=Integer.parseInt(args[1]);
            try {
              skill=SkillsConfig.getSingleSkill(id);
            }
 catch (            NullPointerException n) {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
 catch (          Exception e) {
            if (SkillsConfig.skillsList.contains(args[1])) {
              skill=SkillsConfig.getSingleSkill(args[1]);
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
          try {
            Messaging.sendNoTag(sender,""String_Node_Str"" + Messaging.colorizeText(skill.getSkillName(),ChatColor.YELLOW) + ""String_Node_Str"");
            Messaging.sendMessage(""String_Node_Str"",sender,skill.getName() + ""String_Node_Str"" + ""String_Node_Str""+ Messaging.colorizeText(skill.getId() + ""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str"");
            Messaging.sendMessage(Language.description,sender,skill.getDescription());
            Messaging.sendMessage(Language.costs,sender,""String_Node_Str"" + skill.getCosts() + ""String_Node_Str"");
            Messaging.sendMessage(""String_Node_Str"",sender,Language.needs + ""String_Node_Str"" + skill.getLevel());
            Messaging.sendMessage(""String_Node_Str"",sender,Language.needs + ""String_Node_Str"" + skill.getSkillpoints()+ ""String_Node_Str""+ Language.skillpoints);
          }
 catch (          NullPointerException e) {
            Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            return handled;
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (!args[1].isEmpty()) {
          SingleSkill skill=null;
          try {
            int id=Integer.valueOf(args[1]).intValue();
            try {
              skill=SkillsConfig.getSingleSkill(id);
            }
 catch (            NullPointerException n) {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
 catch (          NumberFormatException e) {
            if (SkillsConfig.skillsList.contains(args[1])) {
              skill=SkillsConfig.getSingleSkill(args[1]);
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
          try {
            if (p.hasSkill(skill)) {
              Messaging.sendMessage(sender,Language.youAlreadyHaveThisSkill);
            }
 else             if (!p.hasEnoughSkillpoints(skill.getSkillpoints())) {
              Messaging.sendMessage(sender,Language.youDontHaveEnough + ""String_Node_Str"" + Language.skillpoints);
            }
 else             if (!p.getAccount().hasEnough(skill.getCosts())) {
              Messaging.sendMessage(sender,Language.youDontHaveEnough + ""String_Node_Str"" + Language.currency);
            }
 else             if (!(p.getLevel() >= skill.getLevel())) {
              Messaging.sendMessage(sender,Language.youNeedLevel + ""String_Node_Str"" + skill.getLevel()+ ""String_Node_Str""+ Language.forThatSkill);
            }
 else {
              if (p.addSkill(skill.getSkillName(),true)) {
                p.getAccount().subtract(skill.getCosts());
                Messaging.sendMessage(sender,Language.youJustBought + ""String_Node_Str"" + skill.getName());
                Messaging.sendMessage(sender,Language.youGot + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + skill.getCosts(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.currency+ ""String_Node_Str""+ Language.and+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + skill.getSkillpoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpoints+ ""String_Node_Str""+ Language.deducted);
              }
 else {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"" + skill.getGroup()+ ""String_Node_Str"");
              }
            }
          }
 catch (          NullPointerException e) {
            Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            return handled;
          }
        }
        p.writeDatabase();
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 3 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayer(sender,args,1);
        RCPlayer p=new RCPlayer(player);
        if (!args[2].isEmpty()) {
          SingleSkill skill=null;
          try {
            int id=Integer.valueOf(args[2]).intValue();
            try {
              skill=SkillsConfig.getSingleSkill(id);
            }
 catch (            ArrayIndexOutOfBoundsException oob) {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
 catch (          NumberFormatException e) {
            if (SkillsConfig.skillsList.contains(args[2])) {
              skill=SkillsConfig.getSingleSkill(args[2]);
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
          try {
            if (p.hasSkill(skill)) {
              Messaging.sendMessage(sender,p.getPlayerName() + ""String_Node_Str"" + Language.alreadyHasThisSkill);
            }
 else             if (!(p.getLevel() >= skill.getLevel())) {
              Messaging.sendMessage(sender,p.getPlayerName() + ""String_Node_Str"" + Language.needs+ ""String_Node_Str""+ skill.getLevel()+ ""String_Node_Str""+ Language.forThatSkill);
            }
 else {
              if (p.addSkill(skill.getSkillName(),false)) {
                Messaging.sendMessage(player,Language.YouJustGotSkill + ""String_Node_Str"" + skill.getName()+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ cmd.getPlayerOfSender(sender).getName()+ ""String_Node_Str""+ Language.bekommen);
              }
 else {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"" + skill.getGroup()+ ""String_Node_Str"");
              }
            }
          }
 catch (          NullPointerException e) {
            Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            return handled;
          }
        }
        p.writeDatabase();
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 1) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        if (player == sender && RCPermissions.permission(player,""String_Node_Str"")) {
          RCPlayer p=new RCPlayer(player);
          p.checkForItems();
          if (p.lvlup(false)) {
            Messaging.sendMessage(sender,Language.youAreNowLevel + ""String_Node_Str"" + p.getLevel());
            Messaging.sendMessage(sender,Language.youGot + ""String_Node_Str"" + ChatColor.YELLOW+ p.getExpToLevel(p.getLevel())+ ""String_Node_Str""+ Language.deducted);
            Messaging.sendMessage(p.getServer(),player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getLevel());
            RCLogger.info(player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ p.getLevel());
            p.writeDatabase();
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
 else       if (cmd.is(args[0],""String_Node_Str"")) {
        if (cmd.is(args[1],""String_Node_Str"") && args.length == 3) {
          handled=true;
          if (RCPermissions.isAdmin(cmd.getPlayerOfSender(sender)) || RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
            this.player=cmd.getPlayer(sender,args,2);
            RCPlayer p=new RCPlayer(player);
            if (p.lvlup(true)) {
              Messaging.sendMessage(p.getServer(),player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getLevel());
              RCLogger.info(player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ p.getLevel());
              p.writeDatabase();
            }
          }
 else {
            Messaging.sendMessage(sender,Language.noPermission);
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
          this.player=cmd.getPlayerOfSender(sender);
          if (args.length == 1) {
            cmd.getTopList(5,sender);
          }
 else           if (args.length == 2) {
            cmd.getTopList(Integer.parseInt(args[1]),sender);
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") || cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender)) {
          if (args.length == 1 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
            this.player=cmd.getPlayerOfSender(sender);
            RCPlayer p=new RCPlayer(player);
            Messaging.sendMessage(sender,Language.youGot + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.forTheNextLevel);
          }
 else           if (args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            Messaging.sendMessage(sender,Messaging.colorizeText(""String_Node_Str"" + p.getPlayerName(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.has+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.forTheNextLevel);
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          RCSkills.debugging=!RCSkills.debugging;
          if (RCSkills.debugging)           Messaging.sendMessage(sender,""String_Node_Str"");
 else           Messaging.sendMessage(sender,""String_Node_Str"");
        }
      }
      if (cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
          RCConfig.load();
          SkillsConfig.load();
          Language.load();
          Messaging.sendMessage(sender,Messaging.colorizeText(RCSkills.name,ChatColor.GREEN) + ""String_Node_Str"");
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length > 1) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
          if (args.length == 3) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            if ((p.getLevel() != -1)) {
              p.setLevel(Integer.parseInt(args[2]));
              Messaging.sendMessage(p.getServer(),player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getLevel());
              RCLogger.info(player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ p.getLevel());
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,Language.cantLevel);
            }
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length > 1) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
          if (args.length == 3) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            if ((p.getLevel() != -1)) {
              p.setExp(Integer.parseInt(args[2]));
              Messaging.sendMessage(sender,player.getName() + ""String_Node_Str"" + Language.hasNow+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getExp()+ ""String_Node_Str""+ Language.experiance);
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,Language.cantLevel);
            }
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") || cmd.is(args[0],""String_Node_Str"") && args.length > 1) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
          if (args.length == 3) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            if ((p.getLevel() != -1)) {
              p.setSkillPoints((Integer.parseInt(args[2])));
              Messaging.sendMessage(sender,player.getName() + ""String_Node_Str"" + Language.hasNow+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getSkillPoints()+ ""String_Node_Str""+ Language.skillpoints);
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,Language.cantLevel);
            }
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") || cmd.is(args[0],""String_Node_Str"")) {
        if (args.length == 1) {
          Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + 1,ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(help),ChatColor.YELLOW));
          ExtraFunctions.listPage(help,cmd.getPlayerOfSender(sender),1);
        }
 else         if (args.length == 2) {
          Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + args[1],ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(help),ChatColor.YELLOW));
          ExtraFunctions.listPage(help,cmd.getPlayerOfSender(sender),Integer.parseInt(args[1]));
        }
      }
    }
  }
  return handled;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  boolean handled=false;
  cmd=plugin.getCommandManager();
  if (cmd.is(label,""String_Node_Str"")) {
    if (args == null || args.length == 0) {
      handled=true;
      this.player=cmd.getPlayerOfSender(sender);
      if (player == sender && RCPermissions.permission(player,""String_Node_Str"")) {
        RCPlayer p=new RCPlayer(player);
        Messaging.sendNoTag(sender,""String_Node_Str"" + Messaging.colorizeText(RCConfig.title + ""String_Node_Str"",ChatColor.YELLOW) + ""String_Node_Str"");
        Messaging.sendMessage(""String_Node_Str"",sender,""String_Node_Str"" + ChatColor.YELLOW + p.getLevel());
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW) + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.experiance);
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getAccount().balance(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.currency);
        Messaging.sendMessage(Language.skillpoints,sender,Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.skillpoints);
        if (!p.getSkills().isEmpty()) {
          String s=""String_Node_Str"";
          for (int i=0; i < p.getSkills().size(); i++) {
            if (i == p.getSkills().size() - 1)             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
 else             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
          }
          Messaging.sendMessage(""String_Node_Str"",sender,s);
        }
      }
 else {
        Messaging.sendMessage(sender,Language.noPermission);
      }
    }
 else     if (cmd.is(args[0],""String_Node_Str"")) {
      if (args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        this.player=cmd.getPlayer(sender,args,1);
        RCPlayer p=new RCPlayer(this.player);
        Messaging.sendNoTag(sender,""String_Node_Str"" + Messaging.colorizeText(player.getName() + ""String_Node_Str"",ChatColor.YELLOW) + ""String_Node_Str"");
        Messaging.sendMessage(""String_Node_Str"",sender,""String_Node_Str"" + ChatColor.YELLOW + p.getLevel());
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW) + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.experiance);
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getAccount().balance(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.currency);
        Messaging.sendMessage(Language.skillpoints,sender,Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.skillpoints);
        if (!p.getSkills().isEmpty()) {
          String s=""String_Node_Str"";
          for (int i=0; i < p.getSkills().size(); i++) {
            if (i == p.getSkills().size() - 1)             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
 else             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
          }
          Messaging.sendMessage(""String_Node_Str"",sender,s);
        }
      }
 else {
        Messaging.sendMessage(sender,Language.noPermission);
      }
    }
 else {
      if (cmd.is(args[0],""String_Node_Str"") && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (args.length == 1) {
          if (p.getBuyableSkills().length > 0) {
            Messaging.sendMessage(Language.buyableSkills,sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getBuyableSkills()),ChatColor.YELLOW));
            ExtraFunctions.listPage(p.getBuyableSkills(),player,1);
          }
 else {
            Messaging.sendNoTag(sender,ChatColor.RED + Language.noLevel);
          }
        }
 else         if (args.length == 2) {
          if (Character.isDigit(args[1].charAt(0)) && Integer.valueOf(args[1]) <= ExtraFunctions.getPages(p.getBuyableSkills())) {
            if (p.getBuyableSkills().length > 0) {
              Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(args[1],ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getBuyableSkills()),ChatColor.YELLOW));
              ExtraFunctions.listPage(p.getBuyableSkills(),player,Integer.parseInt(args[1]));
            }
 else {
              Messaging.sendNoTag(sender,ChatColor.RED + Language.noLevel);
            }
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (args.length == 1) {
          if (!p.getSkills().isEmpty()) {
            Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getSkills()),ChatColor.YELLOW));
            ExtraFunctions.listPage(p.getSkills(),player,1);
          }
 else {
            Messaging.sendNoTag(sender,ChatColor.RED + Language.noSkills);
          }
        }
 else         if (args.length == 2) {
          Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(args[1],ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getSkills()),ChatColor.YELLOW));
          if (p.getSkills() != null && !p.getSkills().equals(null)) {
            ExtraFunctions.listPage(p.getSkills(),player,Integer.parseInt(args[1]));
          }
 else {
            Messaging.sendNoTag(sender,ChatColor.RED + Language.noSkills);
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (args.length == 1) {
          if (p.getSkillCount() == 0) {
            Messaging.sendMessage(sender,Language.noResetSkills);
            return handled;
          }
          Messaging.sendMessage(sender,Language.confirm);
          Messaging.sendMessage(sender,Language.youGet + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.calcSpendSkillpoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpointsBack);
          Messaging.sendMessage(sender,Language.thisIsYour + ""String_Node_Str"" + Messaging.colorizeText((p.getSkillResetCount() + 1) + ""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str""+ Language.resetAndCostsYou+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getResetCost(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.currency);
          Messaging.sendMessage(sender,Language.confirm);
        }
 else         if (args.length == 2 && cmd.is(args[1],""String_Node_Str"")) {
          if (p.getSkillCount() == 0) {
            Messaging.sendMessage(sender,Language.noResetSkills);
            return handled;
          }
 else           if (!p.getAccount().hasEnough(p.getResetCost())) {
            Messaging.sendMessage(sender,Language.youDontHaveEnough + ""String_Node_Str"" + Language.currency);
          }
 else {
            if (p.resetSkills(true)) {
              Messaging.sendMessage(sender,Language.allSkillsReset + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getResetCost(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.currency+ ""String_Node_Str""+ Language.deducted);
              Messaging.sendMessage(sender,Language.youHaveNow + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpoints);
              p.increaseSkillResetCount();
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            }
          }
        }
 else         if (args.length == 3 && cmd.is(args[1],""String_Node_Str"")) {
          if (RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
            this.player=cmd.getPlayer(sender,args,2);
            p=new RCPlayer(player);
            if (p.getSkillCount() == 0) {
              Messaging.sendMessage(sender,Language.noResetSkills);
              return handled;
            }
 else {
              if (p.resetSkills(false)) {
                Messaging.sendMessage(player,Language.allSkillsResetFrom + ""String_Node_Str"" + Messaging.colorizeText(cmd.getPlayerOfSender(sender).getName(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.reseted);
                Messaging.sendMessage(player,Language.youHaveNow + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpoints);
                p.increaseSkillResetCount();
                p.writeDatabase();
              }
 else {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              }
            }
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        if (!args[1].isEmpty()) {
          SingleSkill skill=null;
          try {
            int id=Integer.parseInt(args[1]);
            try {
              skill=SkillsConfig.getSingleSkill(id);
            }
 catch (            NullPointerException n) {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
 catch (          Exception e) {
            if (SkillsConfig.skillsList.contains(args[1])) {
              skill=SkillsConfig.getSingleSkill(args[1]);
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
          try {
            Messaging.sendNoTag(sender,""String_Node_Str"" + Messaging.colorizeText(skill.getSkillName(),ChatColor.YELLOW) + ""String_Node_Str"");
            Messaging.sendMessage(""String_Node_Str"",sender,skill.getName() + ""String_Node_Str"" + ""String_Node_Str""+ Messaging.colorizeText(skill.getId() + ""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str"");
            Messaging.sendMessage(Language.description,sender,skill.getDescription());
            Messaging.sendMessage(Language.costs,sender,""String_Node_Str"" + skill.getCosts() + ""String_Node_Str"");
            Messaging.sendMessage(""String_Node_Str"",sender,Language.needs + ""String_Node_Str"" + skill.getLevel());
            Messaging.sendMessage(""String_Node_Str"",sender,Language.needs + ""String_Node_Str"" + skill.getSkillpoints()+ ""String_Node_Str""+ Language.skillpoints);
          }
 catch (          NullPointerException e) {
            Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            return handled;
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (!args[1].isEmpty()) {
          SingleSkill skill=null;
          try {
            int id=Integer.valueOf(args[1]).intValue();
            try {
              skill=SkillsConfig.getSingleSkill(id);
            }
 catch (            NullPointerException n) {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
 catch (          NumberFormatException e) {
            if (SkillsConfig.skillsList.contains(args[1])) {
              skill=SkillsConfig.getSingleSkill(args[1]);
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
          try {
            if (p.hasSkill(skill)) {
              Messaging.sendMessage(sender,Language.youAlreadyHaveThisSkill);
            }
 else             if (!p.hasEnoughSkillpoints(skill.getSkillpoints())) {
              Messaging.sendMessage(sender,Language.youDontHaveEnough + ""String_Node_Str"" + Language.skillpoints);
            }
 else             if (!p.getAccount().hasEnough(skill.getCosts())) {
              Messaging.sendMessage(sender,Language.youDontHaveEnough + ""String_Node_Str"" + Language.currency);
            }
 else             if (!(p.getLevel() >= skill.getLevel())) {
              Messaging.sendMessage(sender,Language.youNeedLevel + ""String_Node_Str"" + skill.getLevel()+ ""String_Node_Str""+ Language.forThatSkill);
            }
 else {
              if (p.addSkill(skill.getSkillName(),true)) {
                p.getAccount().subtract(skill.getCosts());
                Messaging.sendMessage(sender,Language.youJustBought + ""String_Node_Str"" + skill.getName());
                Messaging.sendMessage(sender,Language.youGot + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + skill.getCosts(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.currency+ ""String_Node_Str""+ Language.and+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + skill.getSkillpoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpoints+ ""String_Node_Str""+ Language.deducted);
              }
 else {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"" + skill.getGroup()+ ""String_Node_Str"");
              }
            }
          }
 catch (          NullPointerException e) {
            Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            return handled;
          }
        }
        p.writeDatabase();
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 3 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayer(sender,args,1);
        RCPlayer p=new RCPlayer(player);
        if (!args[2].isEmpty()) {
          SingleSkill skill=null;
          try {
            int id=Integer.valueOf(args[2]).intValue();
            try {
              skill=SkillsConfig.getSingleSkill(id);
            }
 catch (            ArrayIndexOutOfBoundsException oob) {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
 catch (          NumberFormatException e) {
            if (SkillsConfig.skillsList.contains(args[2])) {
              skill=SkillsConfig.getSingleSkill(args[2]);
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
          try {
            if (p.hasSkill(skill)) {
              Messaging.sendMessage(sender,p.getPlayerName() + ""String_Node_Str"" + Language.alreadyHasThisSkill);
            }
 else             if (!(p.getLevel() >= skill.getLevel())) {
              Messaging.sendMessage(sender,p.getPlayerName() + ""String_Node_Str"" + Language.needs+ ""String_Node_Str""+ skill.getLevel()+ ""String_Node_Str""+ Language.forThatSkill);
            }
 else {
              if (p.addSkill(skill.getSkillName(),false)) {
                Messaging.sendMessage(player,Language.YouJustGotSkill + ""String_Node_Str"" + skill.getName()+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ cmd.getPlayerOfSender(sender).getName()+ ""String_Node_Str""+ Language.bekommen);
              }
 else {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"" + skill.getGroup()+ ""String_Node_Str"");
              }
            }
          }
 catch (          NullPointerException e) {
            Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            return handled;
          }
        }
        p.writeDatabase();
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 1) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        if (player == sender && RCPermissions.permission(player,""String_Node_Str"")) {
          RCPlayer p=new RCPlayer(player);
          p.checkForItems();
          if (p.lvlup(false)) {
            Messaging.sendMessage(sender,Language.youAreNowLevel + ""String_Node_Str"" + p.getLevel());
            Messaging.sendMessage(sender,Language.youGot + ""String_Node_Str"" + ChatColor.YELLOW+ p.getExpToLevel(p.getLevel())+ ""String_Node_Str""+ Language.deducted);
            Messaging.sendMessage(p.getServer(),player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getLevel());
            RCLogger.info(player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ p.getLevel());
            p.writeDatabase();
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
 else       if (cmd.is(args[0],""String_Node_Str"")) {
        if (cmd.is(args[1],""String_Node_Str"") && args.length == 3) {
          handled=true;
          if (RCPermissions.isAdmin(cmd.getPlayerOfSender(sender)) || RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
            this.player=cmd.getPlayer(sender,args,2);
            RCPlayer p=new RCPlayer(player);
            if (p.lvlup(true)) {
              Messaging.sendMessage(p.getServer(),player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getLevel());
              RCLogger.info(player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ p.getLevel());
              p.writeDatabase();
            }
          }
 else {
            Messaging.sendMessage(sender,Language.noPermission);
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
          this.player=cmd.getPlayerOfSender(sender);
          if (args.length == 1) {
            cmd.getTopList(5,sender);
          }
 else           if (args.length == 2) {
            cmd.getTopList(Integer.parseInt(args[1]),sender);
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") || cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender)) {
          if (args.length == 1 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
            this.player=cmd.getPlayerOfSender(sender);
            RCPlayer p=new RCPlayer(player);
            Messaging.sendMessage(sender,Language.youGot + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.forTheNextLevel);
          }
 else           if (args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            Messaging.sendMessage(sender,Messaging.colorizeText(""String_Node_Str"" + p.getPlayerName(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.has+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.forTheNextLevel);
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          RCSkills.debugging=!RCSkills.debugging;
          if (RCSkills.debugging)           Messaging.sendMessage(sender,""String_Node_Str"");
 else           Messaging.sendMessage(sender,""String_Node_Str"");
        }
      }
      if (cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
          RCConfig.load();
          SkillsConfig.load();
          Language.load();
          Messaging.sendMessage(sender,Messaging.colorizeText(RCSkills.name,ChatColor.GREEN) + ""String_Node_Str"");
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length > 1) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
          if (args.length == 3) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            if ((p.getLevel() != -1)) {
              p.setLevel(Integer.parseInt(args[2]));
              Messaging.sendMessage(p.getServer(),player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getLevel());
              RCLogger.info(player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ p.getLevel());
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,Language.cantLevel);
            }
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length > 1) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
          if (args.length == 3) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            if ((p.getLevel() != -1)) {
              p.setExp(Integer.parseInt(args[2]));
              Messaging.sendMessage(sender,player.getName() + ""String_Node_Str"" + Language.hasNow+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getExp()+ ""String_Node_Str""+ Language.experiance);
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,Language.cantLevel);
            }
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") || cmd.is(args[0],""String_Node_Str"") && args.length > 1) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
          if (args.length == 3) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            if ((p.getLevel() != -1)) {
              p.setSkillPoints((Integer.parseInt(args[2])));
              Messaging.sendMessage(sender,player.getName() + ""String_Node_Str"" + Language.hasNow+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getSkillPoints()+ ""String_Node_Str""+ Language.skillpoints);
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,Language.cantLevel);
            }
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") || cmd.is(args[0],""String_Node_Str"")) {
        if (args.length == 1) {
          Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + 1,ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(help),ChatColor.YELLOW));
          ExtraFunctions.listPage(help,cmd.getPlayerOfSender(sender),1);
        }
 else         if (args.length == 2) {
          Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + args[1],ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(help),ChatColor.YELLOW));
          ExtraFunctions.listPage(help,cmd.getPlayerOfSender(sender),Integer.parseInt(args[1]));
        }
      }
    }
  }
  return handled;
}"
46556,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  boolean handled=false;
  cmd=plugin.getCommandManager();
  if (cmd.is(label,""String_Node_Str"")) {
    if (args == null || args.length == 0) {
      handled=true;
      this.player=cmd.getPlayerOfSender(sender);
      if (player == sender && RCPermissions.permission(player,""String_Node_Str"")) {
        RCPlayer p=new RCPlayer(player);
        Messaging.sendNoTag(sender,""String_Node_Str"" + Messaging.colorizeText(RCConfig.title + ""String_Node_Str"",ChatColor.YELLOW) + ""String_Node_Str"");
        Messaging.sendMessage(""String_Node_Str"",sender,""String_Node_Str"" + ChatColor.YELLOW + p.getLevel());
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW) + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.experiance);
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getAccount().balance(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.currency);
        Messaging.sendMessage(Language.skillpoints,sender,Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.skillpoints);
        if (!p.getSkills().isEmpty()) {
          String s=""String_Node_Str"";
          for (int i=0; i < p.getSkills().size(); i++) {
            if (i == p.getSkills().size() - 1)             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
 else             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
          }
          Messaging.sendMessage(""String_Node_Str"",sender,s);
        }
      }
 else {
        Messaging.sendMessage(sender,Language.noPermission);
      }
    }
 else     if (cmd.is(args[0],""String_Node_Str"")) {
      if (args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
        this.player=cmd.getPlayer(sender,args,1);
        RCPlayer p=new RCPlayer(this.player);
        Messaging.sendNoTag(sender,""String_Node_Str"" + Messaging.colorizeText(player.getName() + ""String_Node_Str"",ChatColor.YELLOW) + ""String_Node_Str"");
        Messaging.sendMessage(""String_Node_Str"",sender,""String_Node_Str"" + ChatColor.YELLOW + p.getLevel());
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW) + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.experiance);
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getAccount().balance(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.currency);
        Messaging.sendMessage(Language.skillpoints,sender,Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.skillpoints);
        if (!p.getSkills().isEmpty()) {
          String s=""String_Node_Str"";
          for (int i=0; i < p.getSkills().size(); i++) {
            if (i == p.getSkills().size() - 1)             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
 else             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
          }
          Messaging.sendMessage(""String_Node_Str"",sender,s);
        }
      }
 else {
        Messaging.sendMessage(sender,Language.noPermission);
      }
    }
 else {
      if (cmd.is(args[0],""String_Node_Str"") && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (args.length == 1) {
          if (p.getBuyableSkills().length > 0) {
            Messaging.sendMessage(Language.buyableSkills,sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getBuyableSkills()),ChatColor.YELLOW));
            ExtraFunctions.listPage(p.getBuyableSkills(),player,1);
          }
 else {
            Messaging.sendNoTag(sender,ChatColor.RED + Language.noLevel);
          }
        }
 else         if (args.length == 2) {
          if (Character.isDigit(args[1].charAt(0)) && Integer.valueOf(args[1]) <= ExtraFunctions.getPages(p.getBuyableSkills())) {
            if (p.getBuyableSkills().length > 0) {
              Messaging.sendMessage(Language.buyableSkills,sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(args[1],ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getBuyableSkills()),ChatColor.YELLOW));
              ExtraFunctions.listPage(p.getBuyableSkills(),player,Integer.parseInt(args[1]));
            }
 else {
              Messaging.sendNoTag(sender,ChatColor.RED + Language.noLevel);
            }
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (args.length == 1) {
          if (!p.getSkills().isEmpty()) {
            Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getSkills()),ChatColor.YELLOW));
            ExtraFunctions.listPage(p.getSkills(),player,1);
          }
 else {
            Messaging.sendNoTag(sender,ChatColor.RED + Language.noSkills);
          }
        }
 else         if (args.length == 2) {
          if (Character.isDigit(args[1].charAt(0)) && Integer.valueOf(args[1]) <= ExtraFunctions.getPages(p.getSkills())) {
            if (!p.getSkills().isEmpty()) {
              Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(args[1],ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getSkills()),ChatColor.YELLOW));
              ExtraFunctions.listPage(p.getSkills(),player,1);
            }
 else {
              Messaging.sendNoTag(sender,ChatColor.RED + Language.noSkills);
            }
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (args.length == 1) {
          if (p.getSkillCount() == 0) {
            Messaging.sendMessage(sender,Language.noResetSkills);
            return handled;
          }
          Messaging.sendMessage(sender,Language.confirm);
          Messaging.sendMessage(sender,Language.youGet + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.calcSpendSkillpoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpointsBack);
          Messaging.sendMessage(sender,Language.thisIsYour + ""String_Node_Str"" + Messaging.colorizeText((p.getSkillResetCount() + 1) + ""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str""+ Language.resetAndCostsYou+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getResetCost(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.currency);
          Messaging.sendMessage(sender,Language.confirm);
        }
 else         if (args.length == 2 && cmd.is(args[1],""String_Node_Str"")) {
          if (p.getSkillCount() == 0) {
            Messaging.sendMessage(sender,Language.noResetSkills);
            return handled;
          }
 else           if (!p.getAccount().hasEnough(p.getResetCost())) {
            Messaging.sendMessage(sender,Language.youDontHaveEnough + ""String_Node_Str"" + Language.currency);
          }
 else {
            if (p.resetSkills(true)) {
              Messaging.sendMessage(sender,Language.allSkillsReset + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getResetCost(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.currency+ ""String_Node_Str""+ Language.deducted);
              Messaging.sendMessage(sender,Language.youHaveNow + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpoints);
              p.increaseSkillResetCount();
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            }
          }
        }
 else         if (args.length == 3 && cmd.is(args[1],""String_Node_Str"")) {
          if (RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
            this.player=cmd.getPlayer(sender,args,2);
            p=new RCPlayer(player);
            if (p.getSkillCount() == 0) {
              Messaging.sendMessage(sender,Language.noResetSkills);
              return handled;
            }
 else {
              if (p.resetSkills(false)) {
                Messaging.sendMessage(player,Language.allSkillsResetFrom + ""String_Node_Str"" + Messaging.colorizeText(cmd.getPlayerOfSender(sender).getName(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.reseted);
                Messaging.sendMessage(player,Language.youHaveNow + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpoints);
                p.increaseSkillResetCount();
                p.writeDatabase();
              }
 else {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              }
            }
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        if (!args[1].isEmpty()) {
          SingleSkill skill=null;
          try {
            int id=Integer.parseInt(args[1]);
            try {
              skill=SkillsConfig.getSingleSkill(id);
            }
 catch (            NullPointerException n) {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
 catch (          Exception e) {
            if (SkillsConfig.skillsList.contains(args[1])) {
              skill=SkillsConfig.getSingleSkill(args[1]);
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
          try {
            Messaging.sendNoTag(sender,""String_Node_Str"" + Messaging.colorizeText(skill.getSkillName(),ChatColor.YELLOW) + ""String_Node_Str"");
            Messaging.sendMessage(""String_Node_Str"",sender,skill.getName() + ""String_Node_Str"" + ""String_Node_Str""+ Messaging.colorizeText(skill.getId() + ""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str"");
            Messaging.sendMessage(Language.description,sender,skill.getDescription());
            Messaging.sendMessage(Language.costs,sender,""String_Node_Str"" + skill.getCosts() + ""String_Node_Str"");
            Messaging.sendMessage(""String_Node_Str"",sender,Language.needs + ""String_Node_Str"" + skill.getLevel());
            Messaging.sendMessage(""String_Node_Str"",sender,Language.needs + ""String_Node_Str"" + skill.getSkillpoints()+ ""String_Node_Str""+ Language.skillpoints);
          }
 catch (          NullPointerException e) {
            Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            return handled;
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (!args[1].isEmpty()) {
          SingleSkill skill=null;
          try {
            int id=Integer.valueOf(args[1]).intValue();
            try {
              skill=SkillsConfig.getSingleSkill(id);
            }
 catch (            NullPointerException n) {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
 catch (          NumberFormatException e) {
            if (SkillsConfig.skillsList.contains(args[1])) {
              skill=SkillsConfig.getSingleSkill(args[1]);
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
          try {
            if (p.hasSkill(skill)) {
              Messaging.sendMessage(sender,Language.youAlreadyHaveThisSkill);
            }
 else             if (!p.hasEnoughSkillpoints(skill.getSkillpoints())) {
              Messaging.sendMessage(sender,Language.youDontHaveEnough + ""String_Node_Str"" + Language.skillpoints);
            }
 else             if (!p.getAccount().hasEnough(skill.getCosts())) {
              Messaging.sendMessage(sender,Language.youDontHaveEnough + ""String_Node_Str"" + Language.currency);
            }
 else             if (!(p.getLevel() >= skill.getLevel())) {
              Messaging.sendMessage(sender,Language.youNeedLevel + ""String_Node_Str"" + skill.getLevel()+ ""String_Node_Str""+ Language.forThatSkill);
            }
 else {
              if (p.addSkill(skill.getSkillName(),true)) {
                p.getAccount().subtract(skill.getCosts());
                Messaging.sendMessage(sender,Language.youJustBought + ""String_Node_Str"" + skill.getName());
                Messaging.sendMessage(sender,Language.youGot + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + skill.getCosts(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.currency+ ""String_Node_Str""+ Language.and+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + skill.getSkillpoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpoints+ ""String_Node_Str""+ Language.deducted);
              }
 else {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"" + skill.getGroup()+ ""String_Node_Str"");
              }
            }
          }
 catch (          NullPointerException e) {
            Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            return handled;
          }
        }
        p.writeDatabase();
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 3 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
        handled=true;
        this.player=cmd.getPlayer(sender,args,1);
        RCPlayer p=new RCPlayer(player);
        if (!args[2].isEmpty()) {
          SingleSkill skill=null;
          try {
            int id=Integer.valueOf(args[2]).intValue();
            try {
              skill=SkillsConfig.getSingleSkill(id);
            }
 catch (            ArrayIndexOutOfBoundsException oob) {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
 catch (          NumberFormatException e) {
            if (SkillsConfig.skillsList.contains(args[2])) {
              skill=SkillsConfig.getSingleSkill(args[2]);
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
          try {
            if (p.hasSkill(skill)) {
              Messaging.sendMessage(sender,p.getPlayerName() + ""String_Node_Str"" + Language.alreadyHasThisSkill);
            }
 else             if (!(p.getLevel() >= skill.getLevel())) {
              Messaging.sendMessage(sender,p.getPlayerName() + ""String_Node_Str"" + Language.needs+ ""String_Node_Str""+ skill.getLevel()+ ""String_Node_Str""+ Language.forThatSkill);
            }
 else {
              if (p.addSkill(skill.getSkillName(),false)) {
                Messaging.sendMessage(player,Language.YouJustGotSkill + ""String_Node_Str"" + skill.getName()+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ cmd.getPlayerOfSender(sender).getName()+ ""String_Node_Str""+ Language.bekommen);
              }
 else {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"" + skill.getGroup()+ ""String_Node_Str"");
              }
            }
          }
 catch (          NullPointerException e) {
            Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            return handled;
          }
        }
        p.writeDatabase();
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 1) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        if (player == sender && RCPermissions.permission(player,""String_Node_Str"")) {
          RCPlayer p=new RCPlayer(player);
          p.checkForItems();
          if (p.lvlup(false)) {
            Messaging.sendMessage(sender,Language.youAreNowLevel + ""String_Node_Str"" + p.getLevel());
            Messaging.sendMessage(sender,Language.youGot + ""String_Node_Str"" + ChatColor.YELLOW+ p.getExpToLevel(p.getLevel())+ ""String_Node_Str""+ Language.deducted);
            Messaging.sendMessage(p.getServer(),player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getLevel());
            RCLogger.info(player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ p.getLevel());
            p.writeDatabase();
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
 else       if (cmd.is(args[0],""String_Node_Str"")) {
        if (cmd.is(args[1],""String_Node_Str"") && args.length == 3) {
          handled=true;
          if (RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
            this.player=cmd.getPlayer(sender,args,2);
            RCPlayer p=new RCPlayer(player);
            if (p.lvlup(true)) {
              Messaging.sendMessage(p.getServer(),player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getLevel());
              RCLogger.info(player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ p.getLevel());
              p.writeDatabase();
            }
          }
 else {
            Messaging.sendMessage(sender,Language.noPermission);
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
          this.player=cmd.getPlayerOfSender(sender);
          if (args.length == 1) {
            cmd.getTopList(5,sender);
          }
 else           if (args.length == 2) {
            cmd.getTopList(Integer.parseInt(args[1]),sender);
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") || cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender)) {
          if (args.length == 1 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
            this.player=cmd.getPlayerOfSender(sender);
            RCPlayer p=new RCPlayer(player);
            Messaging.sendMessage(sender,Language.youGot + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.forTheNextLevel);
          }
 else           if (args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            Messaging.sendMessage(sender,Messaging.colorizeText(""String_Node_Str"" + p.getPlayerName(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.has+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.forTheNextLevel);
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          RCSkills.debugging=!RCSkills.debugging;
          if (RCSkills.debugging)           Messaging.sendMessage(sender,""String_Node_Str"");
 else           Messaging.sendMessage(sender,""String_Node_Str"");
        }
      }
      if (cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          RCConfig.load();
          SkillsConfig.load();
          Language.load();
          Messaging.sendMessage(sender,Messaging.colorizeText(RCSkills.name,ChatColor.GREEN) + ""String_Node_Str"");
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length > 1) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          if (args.length == 3) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            if ((p.getCanLevel())) {
              p.setLevel(Integer.parseInt(args[2]));
              Messaging.sendMessage(p.getServer(),player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getLevel());
              RCLogger.info(player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ p.getLevel());
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,Language.cantLevel);
            }
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length > 1) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          if (args.length == 3) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            if ((p.getLevel() != -1)) {
              p.setExp(Integer.parseInt(args[2]));
              Messaging.sendMessage(sender,player.getName() + ""String_Node_Str"" + Language.hasNow+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getExp()+ ""String_Node_Str""+ Language.experiance);
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,Language.cantLevel);
            }
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") || cmd.is(args[0],""String_Node_Str"") && args.length > 1) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          if (args.length == 3) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            if ((p.getLevel() != -1)) {
              p.setSkillPoints((Integer.parseInt(args[2])));
              Messaging.sendMessage(sender,player.getName() + ""String_Node_Str"" + Language.hasNow+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getSkillPoints()+ ""String_Node_Str""+ Language.skillpoints);
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,Language.cantLevel);
            }
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") || cmd.is(args[0],""String_Node_Str"")) {
        if (args.length == 1) {
          Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + 1,ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(help),ChatColor.YELLOW));
          ExtraFunctions.listPage(help,cmd.getPlayerOfSender(sender),1);
        }
 else         if (args.length == 2) {
          Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + args[1],ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(help),ChatColor.YELLOW));
          ExtraFunctions.listPage(help,cmd.getPlayerOfSender(sender),Integer.parseInt(args[1]));
        }
      }
    }
  }
  return handled;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  boolean handled=false;
  cmd=plugin.getCommandManager();
  if (cmd.is(label,""String_Node_Str"")) {
    if (args == null || args.length == 0) {
      handled=true;
      this.player=cmd.getPlayerOfSender(sender);
      if (player == sender && RCPermissions.permission(player,""String_Node_Str"")) {
        RCPlayer p=new RCPlayer(player);
        Messaging.sendNoTag(sender,""String_Node_Str"" + Messaging.colorizeText(RCConfig.title + ""String_Node_Str"",ChatColor.YELLOW) + ""String_Node_Str"");
        Messaging.sendMessage(""String_Node_Str"",sender,""String_Node_Str"" + ChatColor.YELLOW + p.getLevel());
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW) + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.experiance);
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getAccount().balance(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.currency);
        Messaging.sendMessage(Language.skillpoints,sender,Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.skillpoints);
        if (!p.getSkills().isEmpty()) {
          String s=""String_Node_Str"";
          for (int i=0; i < p.getSkills().size(); i++) {
            if (i == p.getSkills().size() - 1)             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
 else             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
          }
          Messaging.sendMessage(""String_Node_Str"",sender,s);
        }
      }
 else {
        Messaging.sendMessage(sender,Language.noPermission);
      }
    }
 else     if (cmd.is(args[0],""String_Node_Str"")) {
      if (args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
        this.player=cmd.getPlayer(sender,args,1);
        RCPlayer p=new RCPlayer(this.player);
        Messaging.sendNoTag(sender,""String_Node_Str"" + Messaging.colorizeText(player.getName() + ""String_Node_Str"",ChatColor.YELLOW) + ""String_Node_Str"");
        Messaging.sendMessage(""String_Node_Str"",sender,""String_Node_Str"" + ChatColor.YELLOW + p.getLevel());
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW) + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.experiance);
        Messaging.sendMessage(""String_Node_Str"",sender,Messaging.colorizeText(""String_Node_Str"" + p.getAccount().balance(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.currency);
        Messaging.sendMessage(Language.skillpoints,sender,Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.skillpoints);
        if (!p.getSkills().isEmpty()) {
          String s=""String_Node_Str"";
          for (int i=0; i < p.getSkills().size(); i++) {
            if (i == p.getSkills().size() - 1)             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
 else             s+=p.getSkill(i).getSkillName() + ""String_Node_Str"";
          }
          Messaging.sendMessage(""String_Node_Str"",sender,s);
        }
      }
 else {
        Messaging.sendMessage(sender,Language.noPermission);
      }
    }
 else {
      if (cmd.is(args[0],""String_Node_Str"") && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (args.length == 1) {
          if (p.getBuyableSkills().length > 0) {
            Messaging.sendMessage(Language.buyableSkills,sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getBuyableSkills()),ChatColor.YELLOW));
            ExtraFunctions.listPage(p.getBuyableSkills(),player,1);
          }
 else {
            Messaging.sendNoTag(sender,ChatColor.RED + Language.noLevel);
          }
        }
 else         if (args.length == 2) {
          if (Character.isDigit(args[1].charAt(0)) && Integer.valueOf(args[1]) <= ExtraFunctions.getPages(p.getBuyableSkills())) {
            if (p.getBuyableSkills().length > 0) {
              Messaging.sendMessage(Language.buyableSkills,sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(args[1],ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getBuyableSkills()),ChatColor.YELLOW));
              ExtraFunctions.listPage(p.getBuyableSkills(),player,Integer.parseInt(args[1]));
            }
 else {
              Messaging.sendNoTag(sender,ChatColor.RED + Language.noLevel);
            }
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (args.length == 1) {
          if (!p.getSkills().isEmpty()) {
            Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getSkills()),ChatColor.YELLOW));
            ExtraFunctions.listPage(p.getSkills(),player,1);
          }
 else {
            Messaging.sendNoTag(sender,ChatColor.RED + Language.noSkills);
          }
        }
 else         if (args.length == 2) {
          if (Character.isDigit(args[1].charAt(0)) && Integer.valueOf(args[1]) <= ExtraFunctions.getPages(p.getSkills())) {
            if (!p.getSkills().isEmpty()) {
              Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(args[1],ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(p.getSkills()),ChatColor.YELLOW));
              ExtraFunctions.listPage(p.getSkills(),player,1);
            }
 else {
              Messaging.sendNoTag(sender,ChatColor.RED + Language.noSkills);
            }
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (args.length == 1) {
          if (p.getSkillCount() == 0) {
            Messaging.sendMessage(sender,Language.noResetSkills);
            return handled;
          }
          Messaging.sendMessage(sender,Language.confirm);
          Messaging.sendMessage(sender,Language.youGet + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.calcSpendSkillpoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpointsBack);
          Messaging.sendMessage(sender,Language.thisIsYour + ""String_Node_Str"" + Messaging.colorizeText((p.getSkillResetCount() + 1) + ""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str""+ Language.resetAndCostsYou+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getResetCost(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.currency);
          Messaging.sendMessage(sender,Language.confirm);
        }
 else         if (args.length == 2 && cmd.is(args[1],""String_Node_Str"")) {
          if (p.getSkillCount() == 0) {
            Messaging.sendMessage(sender,Language.noResetSkills);
            return handled;
          }
 else           if (!p.getAccount().hasEnough(p.getResetCost())) {
            Messaging.sendMessage(sender,Language.youDontHaveEnough + ""String_Node_Str"" + Language.currency);
          }
 else {
            if (p.resetSkills(true)) {
              Messaging.sendMessage(sender,Language.allSkillsReset + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getResetCost(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.currency+ ""String_Node_Str""+ Language.deducted);
              Messaging.sendMessage(sender,Language.youHaveNow + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpoints);
              p.increaseSkillResetCount();
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            }
          }
        }
 else         if (args.length == 3 && cmd.is(args[1],""String_Node_Str"")) {
          if (RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
            this.player=cmd.getPlayer(sender,args,2);
            p=new RCPlayer(player);
            if (p.getSkillCount() == 0) {
              Messaging.sendMessage(sender,Language.noResetSkills);
              return handled;
            }
 else {
              if (p.resetSkills(false)) {
                Messaging.sendMessage(player,Language.allSkillsResetFrom + ""String_Node_Str"" + Messaging.colorizeText(cmd.getPlayerOfSender(sender).getName(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.reseted);
                Messaging.sendMessage(player,Language.youHaveNow + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getSkillPoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpoints);
                p.increaseSkillResetCount();
                p.writeDatabase();
              }
 else {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              }
            }
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        if (!args[1].isEmpty()) {
          SingleSkill skill=null;
          try {
            int id=Integer.parseInt(args[1]);
            try {
              skill=SkillsConfig.getSingleSkill(id);
            }
 catch (            NullPointerException n) {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
 catch (          Exception e) {
            if (SkillsConfig.skillsList.contains(args[1])) {
              skill=SkillsConfig.getSingleSkill(args[1]);
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
          try {
            Messaging.sendNoTag(sender,""String_Node_Str"" + Messaging.colorizeText(skill.getSkillName(),ChatColor.YELLOW) + ""String_Node_Str"");
            Messaging.sendMessage(""String_Node_Str"",sender,skill.getName() + ""String_Node_Str"" + ""String_Node_Str""+ Messaging.colorizeText(skill.getId() + ""String_Node_Str"",ChatColor.YELLOW)+ ""String_Node_Str"");
            Messaging.sendMessage(Language.description,sender,skill.getDescription());
            Messaging.sendMessage(Language.costs,sender,""String_Node_Str"" + skill.getCosts() + ""String_Node_Str"");
            Messaging.sendMessage(""String_Node_Str"",sender,Language.needs + ""String_Node_Str"" + skill.getLevel());
            Messaging.sendMessage(""String_Node_Str"",sender,Language.needs + ""String_Node_Str"" + skill.getSkillpoints()+ ""String_Node_Str""+ Language.skillpoints);
          }
 catch (          NullPointerException e) {
            Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            return handled;
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        RCPlayer p=new RCPlayer(player);
        if (!args[1].isEmpty()) {
          SingleSkill skill=null;
          try {
            int id=Integer.valueOf(args[1]).intValue();
            try {
              skill=SkillsConfig.getSingleSkill(id);
            }
 catch (            NullPointerException n) {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
 catch (          NumberFormatException e) {
            if (SkillsConfig.skillsList.contains(args[1])) {
              skill=SkillsConfig.getSingleSkill(args[1]);
            }
 else {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
          try {
            if (p.hasSkill(skill)) {
              Messaging.sendMessage(sender,Language.youAlreadyHaveThisSkill);
            }
 else             if (!p.hasEnoughSkillpoints(skill.getSkillpoints())) {
              Messaging.sendMessage(sender,Language.youDontHaveEnough + ""String_Node_Str"" + Language.skillpoints);
            }
 else             if (!p.getAccount().hasEnough(skill.getCosts())) {
              Messaging.sendMessage(sender,Language.youDontHaveEnough + ""String_Node_Str"" + Language.currency);
            }
 else             if (!(p.getLevel() >= skill.getLevel())) {
              Messaging.sendMessage(sender,Language.youNeedLevel + ""String_Node_Str"" + skill.getLevel()+ ""String_Node_Str""+ Language.forThatSkill);
            }
 else {
              if (p.addSkill(skill.getSkillName(),true)) {
                p.getAccount().subtract(skill.getCosts());
                Messaging.sendMessage(sender,Language.youJustBought + ""String_Node_Str"" + skill.getName());
                Messaging.sendMessage(sender,Language.youGot + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + skill.getCosts(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.currency+ ""String_Node_Str""+ Language.and+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + skill.getSkillpoints(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.skillpoints+ ""String_Node_Str""+ Language.deducted);
              }
 else {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"" + skill.getGroup()+ ""String_Node_Str"");
              }
            }
          }
 catch (          NullPointerException e) {
            Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
            return handled;
          }
        }
        p.writeDatabase();
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 3) {
        if (RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          handled=true;
          this.player=cmd.getPlayer(sender,args,1);
          RCPlayer p=new RCPlayer(player);
          if (!args[2].isEmpty()) {
            SingleSkill skill=null;
            try {
              int id=Integer.valueOf(args[2]).intValue();
              try {
                skill=SkillsConfig.getSingleSkill(id);
              }
 catch (              ArrayIndexOutOfBoundsException oob) {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
                return handled;
              }
            }
 catch (            NumberFormatException e) {
              if (SkillsConfig.skillsList.contains(args[2])) {
                skill=SkillsConfig.getSingleSkill(args[2]);
              }
 else {
                Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
                return handled;
              }
            }
            try {
              if (p.hasSkill(skill)) {
                Messaging.sendMessage(sender,p.getPlayerName() + ""String_Node_Str"" + Language.alreadyHasThisSkill);
              }
 else               if (!(p.getLevel() >= skill.getLevel())) {
                Messaging.sendMessage(sender,p.getPlayerName() + ""String_Node_Str"" + Language.needs+ ""String_Node_Str""+ skill.getLevel()+ ""String_Node_Str""+ Language.forThatSkill);
              }
 else {
                if (p.addSkill(skill.getSkillName(),false)) {
                  Messaging.sendMessage(player,Language.YouJustGotSkill + ""String_Node_Str"" + skill.getName()+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ cmd.getPlayerOfSender(sender).getName()+ ""String_Node_Str""+ Language.bekommen);
                }
 else {
                  Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"" + skill.getGroup()+ ""String_Node_Str"");
                }
              }
            }
 catch (            NullPointerException e) {
              Messaging.sendMessage(sender,ChatColor.RED + ""String_Node_Str"");
              return handled;
            }
          }
          p.writeDatabase();
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length == 1) {
        handled=true;
        this.player=cmd.getPlayerOfSender(sender);
        if (player == sender && RCPermissions.permission(player,""String_Node_Str"")) {
          RCPlayer p=new RCPlayer(player);
          p.checkForItems();
          if (p.lvlup(false)) {
            Messaging.sendMessage(sender,Language.youAreNowLevel + ""String_Node_Str"" + p.getLevel());
            Messaging.sendMessage(sender,Language.youGot + ""String_Node_Str"" + ChatColor.YELLOW+ p.getExpToLevel(p.getLevel())+ ""String_Node_Str""+ Language.deducted);
            Messaging.sendMessage(p.getServer(),player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getLevel());
            RCLogger.info(player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ p.getLevel());
            p.writeDatabase();
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
 else       if (cmd.is(args[0],""String_Node_Str"")) {
        if (cmd.is(args[1],""String_Node_Str"") && args.length == 3) {
          handled=true;
          if (RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
            this.player=cmd.getPlayer(sender,args,2);
            RCPlayer p=new RCPlayer(player);
            if (p.lvlup(true)) {
              Messaging.sendMessage(p.getServer(),player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getLevel());
              RCLogger.info(player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ p.getLevel());
              p.writeDatabase();
            }
          }
 else {
            Messaging.sendMessage(sender,Language.noPermission);
          }
        }
      }
      if (cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
          this.player=cmd.getPlayerOfSender(sender);
          if (args.length == 1) {
            cmd.getTopList(5,sender);
          }
 else           if (args.length == 2) {
            cmd.getTopList(Integer.parseInt(args[1]),sender);
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") || cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender)) {
          if (args.length == 1 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"")) {
            this.player=cmd.getPlayerOfSender(sender);
            RCPlayer p=new RCPlayer(player);
            Messaging.sendMessage(sender,Language.youGot + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.forTheNextLevel);
          }
 else           if (args.length == 2 && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            Messaging.sendMessage(sender,Messaging.colorizeText(""String_Node_Str"" + p.getPlayerName(),ChatColor.YELLOW) + ""String_Node_Str"" + Language.has+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getExp(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + p.getExpToNextLevel(),ChatColor.YELLOW)+ ""String_Node_Str""+ Language.forTheNextLevel);
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          RCSkills.debugging=!RCSkills.debugging;
          if (RCSkills.debugging)           Messaging.sendMessage(sender,""String_Node_Str"");
 else           Messaging.sendMessage(sender,""String_Node_Str"");
        }
      }
      if (cmd.is(args[0],""String_Node_Str"")) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          RCConfig.load();
          SkillsConfig.load();
          Language.load();
          Messaging.sendMessage(sender,Messaging.colorizeText(RCSkills.name,ChatColor.GREEN) + ""String_Node_Str"");
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length > 1) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          if (args.length == 3) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            if ((p.getCanLevel())) {
              p.setLevel(Integer.parseInt(args[2]));
              Messaging.sendMessage(p.getServer(),player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getLevel());
              RCLogger.info(player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ p.getLevel());
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,Language.cantLevel);
            }
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") && args.length > 1) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          if (args.length == 3) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            if ((p.getLevel() != -1)) {
              p.setExp(Integer.parseInt(args[2]));
              Messaging.sendMessage(sender,player.getName() + ""String_Node_Str"" + Language.hasNow+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getExp()+ ""String_Node_Str""+ Language.experiance);
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,Language.cantLevel);
            }
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") || cmd.is(args[0],""String_Node_Str"") && args.length > 1) {
        handled=true;
        if (cmd.isPlayer(sender) && RCPermissions.permission(cmd.getPlayerOfSender(sender),""String_Node_Str"") || RCPermissions.isAdmin(cmd.getPlayerOfSender(sender))) {
          if (args.length == 3) {
            this.player=cmd.getPlayer(sender,args,1);
            RCPlayer p=new RCPlayer(player);
            if ((p.getLevel() != -1)) {
              p.setSkillPoints((Integer.parseInt(args[2])));
              Messaging.sendMessage(sender,player.getName() + ""String_Node_Str"" + Language.hasNow+ ""String_Node_Str""+ ChatColor.YELLOW+ p.getSkillPoints()+ ""String_Node_Str""+ Language.skillpoints);
              p.writeDatabase();
            }
 else {
              Messaging.sendMessage(sender,Language.cantLevel);
            }
          }
        }
 else {
          Messaging.sendMessage(sender,Language.noPermission);
        }
      }
      if (cmd.is(args[0],""String_Node_Str"") || cmd.is(args[0],""String_Node_Str"")) {
        if (args.length == 1) {
          Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + 1,ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(help),ChatColor.YELLOW));
          ExtraFunctions.listPage(help,cmd.getPlayerOfSender(sender),1);
        }
 else         if (args.length == 2) {
          Messaging.sendMessage(""String_Node_Str"",sender,Language.page + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + args[1],ChatColor.YELLOW)+ ""String_Node_Str""+ Language.from+ ""String_Node_Str""+ Messaging.colorizeText(""String_Node_Str"" + ExtraFunctions.getPages(help),ChatColor.YELLOW));
          ExtraFunctions.listPage(help,cmd.getPlayerOfSender(sender),Integer.parseInt(args[1]));
        }
      }
    }
  }
  return handled;
}"
46557,"/** 
 * sets the new Level and Group
 * @param level
 */
public void setLevel(int level){
  String group=""String_Node_Str"" + getLevel();
  if (RCPermissions.removeParent(player,group)) {
    this.level=level;
    group=""String_Node_Str"" + level;
    RCPermissions.addParent(player,group);
  }
}","/** 
 * sets the new Level and Group
 * @param level
 */
public void setLevel(int level){
  String group=""String_Node_Str"" + getLevel();
  if (RCPermissions.removeParent(player,group)) {
    this.level=level;
    group=""String_Node_Str"" + level;
    RCPermissions.addParent(player,group);
    RCPermissions.saveAll();
  }
}"
46558,"public static void listPage(String[] array,Player player,int page){
  page=page - 1;
  if (array != null) {
    for (int i=page * 5; i < i + 5; i++) {
      if (!(array.length <= i))       Messaging.sendNoTag(player,array[i]);
    }
  }
}","public static void listPage(String[] array,Player player,int page){
  if (array != null) {
    if (page == 1) {
      for (int i=0; i < 5; i++) {
        if (!(array.length <= i))         Messaging.sendNoTag(player,array[i]);
      }
    }
 else {
      page-=1;
      for (int i=page * 5; i < i + 5; i++) {
        if (!(array.length <= i))         Messaging.sendNoTag(player,array[i]);
      }
    }
  }
}"
46559,"public boolean resetSkills(){
  if (skills == null)   return false;
  for (  DBSkills s : skills) {
    removeSkill(s.getSkillName());
  }
  this.account.subtract(getResetCost());
  return true;
}","public boolean resetSkills(boolean removeMoney){
  if (skills == null)   return false;
  for (  DBSkills s : skills) {
    removeSkill(s.getSkillName());
  }
  if (removeMoney == true)   this.account.subtract(getResetCost());
  return true;
}"
46560,"public void setLevel(int level){
  this.level=level;
}","public void setLevel(int level){
  String group=""String_Node_Str"" + getLevel();
  if (RCPermissions.removeParent(player,group)) {
    this.level=level;
    group=""String_Node_Str"" + level;
    RCPermissions.addParent(player,group);
  }
}"
46561,"/** 
 * main function for the levelup event
 * @param ignoreItems
 * @return lvlup successfull or failed
 */
public boolean lvlup(boolean ignoreItems){
  checkForItems();
  if (ignoreItems == true) {
    if (getLevel() == -1 && getExp() != 0)     setExp(0);
    if (getLevel() == -1) {
      Messaging.sendMessage(player,""String_Node_Str"" + ChatColor.YELLOW + RCPermissions.getPrimaryGroup(player)+ ChatColor.WHITE+ ""String_Node_Str"");
      return false;
    }
 else     if (nextLevel(true)) {
      return true;
    }
    Messaging.sendMessage(player,""String_Node_Str"" + ChatColor.YELLOW + RCConfig.maxLevel+ ChatColor.WHITE+ ""String_Node_Str"");
    return true;
  }
 else {
    if (hasExpForLevel(getLevel() + 1)) {
      if (getLevel() == -1) {
        Messaging.sendMessage(player,""String_Node_Str"" + ChatColor.YELLOW + RCPermissions.getPrimaryGroup(player)+ ChatColor.WHITE+ ""String_Node_Str"");
        return false;
      }
      if (!nextLevel(false)) {
        Messaging.sendMessage(player,""String_Node_Str"" + ChatColor.YELLOW + RCConfig.maxLevel+ ChatColor.WHITE+ ""String_Node_Str"");
        return false;
      }
      return true;
    }
 else {
      Messaging.sendMessage(player,ChatColor.RED + ""String_Node_Str"");
      Messaging.sendMessage(player,""String_Node_Str"" + ChatColor.YELLOW + getExp()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ getExpToNextLevel()+ ChatColor.WHITE+ ""String_Node_Str"");
      return false;
    }
  }
}","/** 
 * main function for the levelup event
 * @param ignoreItems
 * @return lvlup successfull or failed
 */
public boolean lvlup(boolean ignoreItems){
  checkForItems();
  if (ignoreItems == true) {
    if (getLevel() == -1 && getExp() != 0)     setExp(0);
    if (getLevel() == -1) {
      Messaging.sendMessage(player,Language.cantLevel);
      return false;
    }
 else     if (nextLevel(true)) {
      return true;
    }
    Messaging.sendMessage(player,Language.reachedMaxLevel);
    return true;
  }
 else {
    if (hasExpForLevel(getLevel() + 1)) {
      if (getLevel() == -1) {
        Messaging.sendMessage(player,Language.cantLevel);
        return false;
      }
      if (!nextLevel(false)) {
        Messaging.sendMessage(player,Language.reachedMaxLevel);
        return false;
      }
      return true;
    }
 else {
      Messaging.sendMessage(player,ChatColor.RED + Language.youDontHaveEnough + ""String_Node_Str"");
      Messaging.sendMessage(player,Language.youOnlyHave + ""String_Node_Str"" + ChatColor.YELLOW+ getExp()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ getExpToNextLevel()+ ChatColor.WHITE+ ""String_Node_Str""+ Language.forTheNextLevel);
      return false;
    }
  }
}"
46562,"public void addSkill(String skillName){
  DBSkills skillsdb=new DBSkills();
  SingleSkill skill=SkillsConfig.getSingleSkill(skillName);
  skillsdb.setPlayer(player);
  skillsdb.setSkillName(skillName);
  skillsdb.setGroupName(skill.getGroup());
  skillsdb.setCosts(skill.getCosts());
  skillsdb.setSkillPoints(skill.getSkillpoints());
  skillsdb.setSkillLevel(skill.getLevel());
  increaseSkillCount();
  addSpendSkillpoints(skill.getSkillpoints());
  removeSkillPoints(skill.getSkillpoints());
  RCPlayer.plugin.getDatabase().save(skillsdb);
}","public boolean addSkill(String skillName,boolean removeSkillpoints){
  DBSkills skillsdb=new DBSkills();
  SingleSkill skill=SkillsConfig.getSingleSkill(skillName);
  if (RCPermissions.addParent(player,skill.getGroup())) {
    skillsdb.setPlayer(player);
    skillsdb.setSkillName(skillName);
    skillsdb.setGroupName(skill.getGroup());
    skillsdb.setCosts(skill.getCosts());
    skillsdb.setSkillPoints(skill.getSkillpoints());
    skillsdb.setSkillLevel(skill.getLevel());
    increaseSkillCount();
    if (removeSkillpoints) {
      addSpendSkillpoints(skill.getSkillpoints());
      removeSkillPoints(skill.getSkillpoints());
    }
    RCPlayer.plugin.getDatabase().save(skillsdb);
    return true;
  }
  return false;
}"
46563,"/** 
 * Remove itemID and turns it into EXP
 * @return hasItems
 */
public boolean checkForItems(){
  ItemStack items=new ItemStack(RCConfig.itemID,2304);
  if (player.getInventory().contains(RCConfig.itemID)) {
    HashMap<Integer,ItemStack> difference=player.getInventory().removeItem(items);
    int exp=0;
    for (    ItemStack s : difference.values())     exp+=s.getAmount();
    exp=2304 - exp;
    addExp(exp);
    Messaging.sendMessage(player,""String_Node_Str"" + ChatColor.YELLOW + exp+ ""String_Node_Str""+ ChatColor.WHITE+ RCConfig.itemName+ ""String_Node_Str"");
    return true;
  }
  return false;
}","/** 
 * Remove itemID and turns it into EXP
 * @return hasItems
 */
public boolean checkForItems(){
  ItemStack items=new ItemStack(RCConfig.itemID,2304);
  if (player.getInventory().contains(RCConfig.itemID)) {
    HashMap<Integer,ItemStack> difference=player.getInventory().removeItem(items);
    int exp=0;
    for (    ItemStack s : difference.values())     exp+=s.getAmount();
    exp=2304 - exp;
    addExp(exp);
    Messaging.sendMessage(player,Language.your + ""String_Node_Str"" + ChatColor.YELLOW+ exp+ ""String_Node_Str""+ ChatColor.WHITE+ RCConfig.itemName+ ""String_Node_Str""+ Language.haveBeenExchangedForExp+ ""String_Node_Str"");
    return true;
  }
  return false;
}"
46564,"private void loadLevelDatabase(){
  lvldb=RCPlayer.plugin.getDatabase().find(DBLevelup.class).where().ieq(""String_Node_Str"",this.player.getName()).findUnique();
  if (lvldb == null) {
    lvldb=new DBLevelup();
    lvldb.setPlayer(player);
    lvldb.setLevel(0);
    lvldb.setExpToNextLevel(getExpToLevel(getLevel() + 1));
    lvldb.setExp(0);
    lvldb.setJoined(this.lastJoinDate);
    lvldb.setSkillpoints(0);
    lvldb.setSkillResetCount(0);
    lvldb.setSkillCount(skills.size());
    lvldb.setSpendSkillpoints(getSpendSkillpoints());
    RCPlayer.plugin.getDatabase().save(lvldb);
  }
}","private void loadLevelDatabase(){
  lvldb=RCPlayer.plugin.getDatabase().find(DBLevelup.class).where().ieq(""String_Node_Str"",this.player.getName()).findUnique();
  if (lvldb == null) {
    lvldb=new DBLevelup();
    lvldb.setPlayer(player);
    lvldb.setLevel(0);
    lvldb.setExpToNextLevel(getExpToLevel(getLevel() + 1));
    lvldb.setExp(0);
    lvldb.setJoined(this.lastJoinDate);
    lvldb.setSkillpoints(0);
    lvldb.setSkillResetCount(0);
    lvldb.setSkillCount(skills.size());
    lvldb.setSpendSkillpoints(getSpendSkillpoints());
  }
}"
46565,"/** 
 * increases the level by 1 if max level no reached
 * @param ignoreEXP
 * @return false if max level reached
 */
private boolean nextLevel(boolean b){
  if (getLevel() + 1 <= RCConfig.maxLevel) {
    if (b == false) {
      removeExp(getExpToNextLevel());
    }
    setLevel((getLevel() + 1));
    setExpToNextLevel();
    if (grantSkillPoints()) {
      addSkillPoints(RCConfig.skillPoints);
    }
    String group=""String_Node_Str"" + getLevel();
    RCPermissions.promote(player,RCConfig.track,group);
    return true;
  }
  return false;
}","/** 
 * increases the level by 1 if max level no reached
 * @param ignoreEXP
 * @return false if max level reached
 */
private boolean nextLevel(boolean b){
  if (getLevel() + 1 <= RCConfig.maxLevel) {
    if (b == false) {
      removeExp(getExpToNextLevel());
    }
    setLevel((getLevel() + 1));
    setExpToNextLevel();
    if (grantSkillPoints()) {
      addSkillPoints(RCConfig.skillPoints);
    }
    return true;
  }
  return false;
}"
46566,"public void addSkillPoints(int points){
  this.skillPoints+=points;
  Messaging.sendMessage(player,""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + points,ChatColor.YELLOW) + ""String_Node_Str"");
}","public void addSkillPoints(int points){
  this.skillPoints+=points;
}"
46567,"public boolean grantSkillPoints(){
  if (getLevel() != 0 && getLevel() % RCConfig.skillpointsInterval == 0)   return true;
  return false;
}","public boolean grantSkillPoints(){
  if (getLevel() != 0 && getLevel() % RCConfig.skillpointsInterval == 0) {
    Messaging.sendMessage(player,""String_Node_Str"" + RCConfig.skillPoints + ""String_Node_Str"");
    return true;
  }
  return false;
}"
46568,"public String[] getBuyableSkills(){
  int i=0;
  for (  String s : SkillsConfig.skills) {
    if (SkillsConfig.getSingleSkill(s).getLevel() <= getLevel())     i++;
  }
  String[] buyableSkills=new String[i];
  i=0;
  for (  String s : SkillsConfig.skills) {
    if (SkillsConfig.getSingleSkill(s).getLevel() <= getLevel()) {
      if (!skills.contains(s)) {
        buyableSkills[i]=s;
      }
      i++;
    }
  }
  return buyableSkills;
}","public String[] getBuyableSkills(){
  int i=0;
  for (  String s : SkillsConfig.skills) {
    if (SkillsConfig.getSingleSkill(s).getLevel() <= getLevel())     i++;
  }
  String[] buyableSkills=new String[i];
  i=0;
  for (  String s : SkillsConfig.skills) {
    if (SkillsConfig.getSingleSkill(s).getLevel() <= getLevel()) {
      if (!skills.contains(s)) {
        buyableSkills[i]=s + ""String_Node_Str"" + Messaging.colorizeText(""String_Node_Str"" + SkillsConfig.getSingleSkill(s).getId(),ChatColor.YELLOW)+ ""String_Node_Str"";
      }
      i++;
    }
  }
  return buyableSkills;
}"
46569,"/** 
 * LevelUP Check for the PlayerJoin Event
 */
public void checkLevelUP(){
  if (lvlup(false)) {
    Messaging.sendMessage(player,""String_Node_Str"" + ChatColor.YELLOW + getLevel());
    Messaging.sendMessage(player,""String_Node_Str"" + ChatColor.YELLOW + getExpToNextLevel()+ ""String_Node_Str"");
    Messaging.sendMessage(this.server,player.getName() + ""String_Node_Str"" + ChatColor.YELLOW+ getLevel());
    RCLogger.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ getLevel());
  }
}","/** 
 * LevelUP Check for the PlayerJoin Event
 */
public void checkLevelUP(){
  if (lvlup(false)) {
    Messaging.sendMessage(player,Language.youAreNowLevel + ""String_Node_Str"" + ChatColor.YELLOW+ getLevel());
    Messaging.sendMessage(player,Language.youGot + ""String_Node_Str"" + ChatColor.YELLOW+ getExpToNextLevel()+ ""String_Node_Str""+ Language.deducted+ ""String_Node_Str"");
    Messaging.sendMessage(this.server,player.getName() + ""String_Node_Str"" + Language.isNowLevel+ ""String_Node_Str""+ ChatColor.YELLOW+ getLevel());
    RCLogger.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Language.isNowLevel+ ""String_Node_Str""+ getLevel());
  }
}"
46570,"public void removeSkill(String skillName){
  DBSkills skillsdb=RCPlayer.plugin.getDatabase().find(DBSkills.class).where().ieq(""String_Node_Str"",skillName).where().ieq(""String_Node_Str"",player.getName()).findUnique();
  decreaseSkillCount();
  addSkillPoints(skillsdb.getSkillPoints());
  RCPlayer.plugin.getDatabase().delete(skillsdb);
  RCPlayer.plugin.getDatabase().save(skillsdb);
}","public boolean removeSkill(String skillName){
  DBSkills skillsdb=RCPlayer.plugin.getDatabase().find(DBSkills.class).where().ieq(""String_Node_Str"",skillName).where().ieq(""String_Node_Str"",player.getName()).findUnique();
  if (RCPermissions.removeParent(player,skillsdb.getGroupName())) {
    decreaseSkillCount();
    addSkillPoints(skillsdb.getSkillPoints());
    RCPlayer.plugin.getDatabase().delete(skillsdb);
    RCPlayer.plugin.getDatabase().save(skillsdb);
    return true;
  }
  return false;
}"
46571,"public void onEnable(){
  name=this.getDescription().getName();
  version=this.getDescription().getVersion();
  RCLogger.initialize(Logger.getLogger(""String_Node_Str""));
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLUGIN_ENABLE,pluginListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Low,this);
  RCConfig.initialize(this);
  SkillsConfig.initialize(this);
  setupDatabase();
  RCPlayer.initialize(this);
  RCPermissions.initialize(this);
  RCEconomy.initialize();
  setupCommands();
  RCLogger.info(name + ""String_Node_Str"" + version+ ""String_Node_Str"");
}","public void onEnable(){
  name=this.getDescription().getName();
  version=this.getDescription().getVersion();
  RCLogger.initialize(Logger.getLogger(""String_Node_Str""));
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLUGIN_ENABLE,pluginListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Low,this);
  RCConfig.initialize(this);
  SkillsConfig.initialize(this);
  Language.initialize(this);
  setupDatabase();
  RCPlayer.initialize(this);
  RCPermissions.initialize(this);
  RCEconomy.initialize();
  setupCommands();
  RCLogger.info(name + ""String_Node_Str"" + version+ ""String_Node_Str"");
}"
46572,"/** 
 * Called by Bukkit, main code block for this class
 */
public void onBlockDamage(BlockDamageEvent event){
  event.setCancelled(true);
  Block block=event.getBlock();
  Player player=event.getPlayer();
  DLPlayerConfig pConfig=plugin.dlUsers.get(player);
  if (plugin.enabled(player) && player.getItemInHand().getTypeId() == pConfig.wandItem) {
    if (plugin.debug) {
      log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ block.getX()+ ""String_Node_Str""+ block.getY()+ ""String_Node_Str""+ block.getZ());
    }
    if (block.getType() == (pConfig.chestMode ? Material.CHEST : Material.DISPENSER)) {
      String blockTypeStringUCase=(pConfig.chestMode ? ""String_Node_Str"" : ""String_Node_Str"");
      if (pConfig.blockAreaMode == false) {
        ContainerBlock targetBlock=(ContainerBlock)event.getBlock().getState();
        if (pConfig.singleClearMode) {
          blockInterface.emptyContainer(targetBlock);
          if (pConfig.clearOnce) {
            pConfig.clearOnce=false;
            pConfig.singleClearMode=false;
          }
          player.sendMessage(ChatColor.DARK_AQUA + blockTypeStringUCase + ""String_Node_Str"");
          if (plugin.debug)           log.info(""String_Node_Str"" + blockTypeStringUCase + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
        }
        if (pConfig.singleFillMode) {
          blockInterface.fill(targetBlock,pConfig.material,pConfig.damageValue);
          if (pConfig.fillOnce) {
            plugin.dlUsers.get(player).fillOnce=false;
            plugin.dlUsers.get(player).singleFillMode=false;
          }
          player.sendMessage(ChatColor.DARK_AQUA + blockTypeStringUCase + ""String_Node_Str""+ pConfig.material);
          if (plugin.debug)           log.info(""String_Node_Str"" + blockTypeStringUCase + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ pConfig.material+ ""String_Node_Str"");
        }
        if (!pConfig.singleClearMode && !pConfig.singleFillMode) {
          blockInterface.add(targetBlock,pConfig.material,pConfig.amount,pConfig.damageValue);
          player.sendMessage(ChatColor.DARK_AQUA + blockTypeStringUCase + ""String_Node_Str""+ pConfig.amount+ ""String_Node_Str""+ pConfig.material);
          if (plugin.debug)           log.info(""String_Node_Str"" + blockTypeStringUCase + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ pConfig.material+ ""String_Node_Str""+ pConfig.amount+ ""String_Node_Str"");
        }
      }
    }
    if (pConfig.blockAreaMode == true) {
      Block firstBlock=pConfig.areaBlock1;
      Block secondBlock=pConfig.areaBlock2;
      if (firstBlock instanceof Block && secondBlock instanceof Block) {
        if (pConfig.lastAreaBlockSet == 1) {
          pConfig.areaBlock2=block;
          sendBlockSetMsg(2,player,block);
          pConfig.lastAreaBlockSet=2;
          if (plugin.debug) {
            log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
          }
        }
 else {
          pConfig.areaBlock1=block;
          sendBlockSetMsg(1,player,block);
          pConfig.lastAreaBlockSet=1;
          if (plugin.debug) {
            log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
          }
        }
        return;
      }
      if (firstBlock instanceof Block && !(secondBlock instanceof Block)) {
        pConfig.areaBlock2=block;
        sendBlockSetMsg(2,player,block);
        pConfig.lastAreaBlockSet=2;
        if (plugin.debug) {
          log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
        }
        return;
      }
      if (!(firstBlock instanceof Block)) {
        pConfig.areaBlock1=block;
        sendBlockSetMsg(1,player,block);
        pConfig.lastAreaBlockSet=1;
        if (plugin.debug) {
          log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
        }
        return;
      }
    }
  }
}","/** 
 * Called by Bukkit, main code block for this class
 */
public void onBlockDamage(BlockDamageEvent event){
  Block block=event.getBlock();
  Player player=event.getPlayer();
  DLPlayerConfig pConfig=plugin.dlUsers.get(player);
  if (plugin.enabled(player) && player.getItemInHand().getTypeId() == pConfig.wandItem) {
    event.setCancelled(true);
    if (plugin.debug) {
      log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ block.getX()+ ""String_Node_Str""+ block.getY()+ ""String_Node_Str""+ block.getZ());
    }
    if (block.getType() == (pConfig.chestMode ? Material.CHEST : Material.DISPENSER)) {
      String blockTypeStringUCase=(pConfig.chestMode ? ""String_Node_Str"" : ""String_Node_Str"");
      if (pConfig.blockAreaMode == false) {
        ContainerBlock targetBlock=(ContainerBlock)event.getBlock().getState();
        if (pConfig.singleClearMode) {
          blockInterface.emptyContainer(targetBlock);
          if (pConfig.clearOnce) {
            pConfig.clearOnce=false;
            pConfig.singleClearMode=false;
          }
          player.sendMessage(ChatColor.DARK_AQUA + blockTypeStringUCase + ""String_Node_Str"");
          if (plugin.debug)           log.info(""String_Node_Str"" + blockTypeStringUCase + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
        }
        if (pConfig.singleFillMode) {
          blockInterface.fill(targetBlock,pConfig.material,pConfig.damageValue);
          if (pConfig.fillOnce) {
            plugin.dlUsers.get(player).fillOnce=false;
            plugin.dlUsers.get(player).singleFillMode=false;
          }
          player.sendMessage(ChatColor.DARK_AQUA + blockTypeStringUCase + ""String_Node_Str""+ pConfig.material);
          if (plugin.debug)           log.info(""String_Node_Str"" + blockTypeStringUCase + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ pConfig.material+ ""String_Node_Str"");
        }
        if (!pConfig.singleClearMode && !pConfig.singleFillMode) {
          blockInterface.add(targetBlock,pConfig.material,pConfig.amount,pConfig.damageValue);
          player.sendMessage(ChatColor.DARK_AQUA + blockTypeStringUCase + ""String_Node_Str""+ pConfig.amount+ ""String_Node_Str""+ pConfig.material);
          if (plugin.debug)           log.info(""String_Node_Str"" + blockTypeStringUCase + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ pConfig.material+ ""String_Node_Str""+ pConfig.amount+ ""String_Node_Str"");
        }
      }
    }
    if (pConfig.blockAreaMode == true) {
      Block firstBlock=pConfig.areaBlock1;
      Block secondBlock=pConfig.areaBlock2;
      if (firstBlock instanceof Block && secondBlock instanceof Block) {
        if (pConfig.lastAreaBlockSet == 1) {
          pConfig.areaBlock2=block;
          sendBlockSetMsg(2,player,block);
          pConfig.lastAreaBlockSet=2;
          if (plugin.debug) {
            log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
          }
        }
 else {
          pConfig.areaBlock1=block;
          sendBlockSetMsg(1,player,block);
          pConfig.lastAreaBlockSet=1;
          if (plugin.debug) {
            log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
          }
        }
        return;
      }
      if (firstBlock instanceof Block && !(secondBlock instanceof Block)) {
        pConfig.areaBlock2=block;
        sendBlockSetMsg(2,player,block);
        pConfig.lastAreaBlockSet=2;
        if (plugin.debug) {
          log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
        }
        return;
      }
      if (!(firstBlock instanceof Block)) {
        pConfig.areaBlock1=block;
        sendBlockSetMsg(1,player,block);
        pConfig.lastAreaBlockSet=1;
        if (plugin.debug) {
          log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
        }
        return;
      }
    }
  }
}"
46573,"public void onBlockBreak(BlockBreakEvent event){
  if (event.getPlayer().getGameMode() == GameMode.CREATIVE) {
    event.setCancelled(true);
    BlockDamageEvent bde=new BlockDamageEvent(event.getPlayer(),event.getBlock(),event.getPlayer().getItemInHand(),false);
    bde.setCancelled(true);
    this.onBlockDamage(bde);
  }
}","public void onBlockBreak(BlockBreakEvent event){
  if (plugin.enabled(event.getPlayer()) && event.getPlayer().getGameMode() == GameMode.CREATIVE && event.getPlayer().getItemInHand().getTypeId() == plugin.dlUsers.get(event.getPlayer()).wandItem) {
    DLPlayerConfig pConfig=plugin.dlUsers.get(event.getPlayer());
    if (!(event.getBlock().getType() == (pConfig.chestMode ? Material.CHEST : Material.DISPENSER)) && !(pConfig.blockAreaMode)) {
      return;
    }
    BlockDamageEvent bde=new BlockDamageEvent(event.getPlayer(),event.getBlock(),event.getPlayer().getItemInHand(),false);
    this.onBlockDamage(bde);
    event.setCancelled(true);
  }
}"
46574,"/** 
 * Toggles the user's area mode
 */
void toggleAreaMode(){
  if (this.blockAreaMode == true) {
    this.disableAreaMode();
    this.fillOnce=false;
    this.clearOnce=false;
    this.singleClearMode=false;
    this.singleFillMode=false;
    this.singleClearMode=false;
    this.singleFillMode=false;
    this.clearOnce=false;
    this.fillOnce=false;
    player.sendMessage(""String_Node_Str"");
  }
 else {
    this.blockAreaMode=true;
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (plugin.debug)   log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ this.blockAreaMode+ ""String_Node_Str"");
}","/** 
 * Toggles the user's area mode
 */
void toggleAreaMode(){
  if (this.blockAreaMode == true) {
    this.disableAreaMode();
    this.fillOnce=false;
    this.clearOnce=false;
    this.singleClearMode=false;
    this.singleFillMode=false;
    this.singleClearMode=false;
    this.singleFillMode=false;
    this.clearOnce=false;
    this.fillOnce=false;
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
 else {
    this.blockAreaMode=true;
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (plugin.debug)   log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ this.blockAreaMode+ ""String_Node_Str"");
}"
46575,"public String toString(){
  String ret=getName();
  if (genericsTypes != null) {
    ret+=""String_Node_Str"";
    for (int i=0; i < genericsTypes.length; i++) {
      if (i != 0)       ret+=""String_Node_Str"";
      ret+=genericsTypes[i];
    }
    ret+=""String_Node_Str"";
  }
  if (redirect != null) {
    ret+=""String_Node_Str"" + redirect().toString();
  }
  return ret;
}","public String toString(){
  String ret=getName();
  if (genericsTypes != null) {
    ret+=""String_Node_Str"";
    for (int i=0; i < genericsTypes.length; i++) {
      if (i != 0)       ret+=""String_Node_Str"";
      GenericsType genericsType=genericsTypes[i];
      ret+=genericTypeAsString(genericsType);
    }
    ret+=""String_Node_Str"";
  }
  if (redirect != null) {
    ret+=""String_Node_Str"" + redirect().toString();
  }
  return ret;
}"
46576,"/** 
 * Creates a statement body silimar to: <code>this.fireVetoableChange(""field"", field, field = value)</code>
 * @param propertyNode           the field node for the property
 * @param fieldExpression a field expression for setting the property value
 * @return the created statement
 */
protected Statement createConstrainedStatement(PropertyNode propertyNode,Expression fieldExpression){
  return new ExpressionStatement(new MethodCallExpression(VariableExpression.THIS_EXPRESSION,""String_Node_Str"",new ArgumentListExpression(new Expression[]{new ConstantExpression(propertyNode.getName()),fieldExpression,new VariableExpression(""String_Node_Str"")})));
}","/** 
 * Creates a statement body similar to: <code>this.fireVetoableChange(""field"", field, field = value)</code>
 * @param propertyNode           the field node for the property
 * @param fieldExpression a field expression for setting the property value
 * @return the created statement
 */
protected Statement createConstrainedStatement(PropertyNode propertyNode,Expression fieldExpression){
  return new ExpressionStatement(new MethodCallExpression(VariableExpression.THIS_EXPRESSION,""String_Node_Str"",new ArgumentListExpression(new Expression[]{new ConstantExpression(propertyNode.getName()),fieldExpression,new VariableExpression(""String_Node_Str"")})));
}"
46577,"/** 
 * if (theClass is a Script) { run it like a script } else if (theClass has a main method) { run the main method } else if (theClass instanceof GroovyTestCase) { use the test runner to run it } else if (theClass implements Runnable) { if (theClass has a constructor with String[] params) instanciate theClass with this constructor and run else if (theClass has a no-args constructor) instanciate theClass with the no-args constructor and run }
 */
private Object runScriptOrMainOrTestOrRunnable(Class scriptClass,String[] args){
  if (scriptClass == null) {
    return null;
  }
  if (Script.class.isAssignableFrom(scriptClass)) {
    Script script=null;
    try {
      script=(Script)scriptClass.newInstance();
    }
 catch (    InstantiationException e) {
    }
catch (    IllegalAccessException e) {
    }
    if (script != null) {
      script.setBinding(context);
      script.setProperty(""String_Node_Str"",args);
      return script.run();
    }
  }
  try {
    scriptClass.getMethod(""String_Node_Str"",new Class[]{String[].class});
    return InvokerHelper.invokeMethod(scriptClass,""String_Node_Str"",new Object[]{args});
  }
 catch (  NoSuchMethodException e) {
    if (Runnable.class.isAssignableFrom(scriptClass)) {
      return runRunnable(scriptClass,args);
    }
    if (isJUnit3Test(scriptClass)) {
      return runJUnit3Test(scriptClass);
    }
    if (isJUnit3TestSuite(scriptClass)) {
      return runJUnit3TestSuite(scriptClass);
    }
    if (isJUnit4Test(scriptClass)) {
      return runJUnit4Test(scriptClass);
    }
    if (isTestNgTest(scriptClass)) {
      return runTestNgTest(scriptClass);
    }
    throw new GroovyRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
}","/** 
 * if (theClass is a Script) { run it like a script } else if (theClass has a main method) { run the main method } else if (theClass instanceof GroovyTestCase) { use the test runner to run it } else if (theClass implements Runnable) { if (theClass has a constructor with String[] params) instantiate theClass with this constructor and run else if (theClass has a no-args constructor) instantiate theClass with the no-args constructor and run }
 */
private Object runScriptOrMainOrTestOrRunnable(Class scriptClass,String[] args){
  if (scriptClass == null) {
    return null;
  }
  if (Script.class.isAssignableFrom(scriptClass)) {
    Script script=null;
    try {
      script=(Script)scriptClass.newInstance();
    }
 catch (    InstantiationException e) {
    }
catch (    IllegalAccessException e) {
    }
    if (script != null) {
      script.setBinding(context);
      script.setProperty(""String_Node_Str"",args);
      return script.run();
    }
  }
  try {
    scriptClass.getMethod(""String_Node_Str"",new Class[]{String[].class});
    return InvokerHelper.invokeMethod(scriptClass,""String_Node_Str"",new Object[]{args});
  }
 catch (  NoSuchMethodException e) {
    if (Runnable.class.isAssignableFrom(scriptClass)) {
      return runRunnable(scriptClass,args);
    }
    if (isJUnit3Test(scriptClass)) {
      return runJUnit3Test(scriptClass);
    }
    if (isJUnit3TestSuite(scriptClass)) {
      return runJUnit3TestSuite(scriptClass);
    }
    if (isJUnit4Test(scriptClass)) {
      return runJUnit4Test(scriptClass);
    }
    if (isTestNgTest(scriptClass)) {
      return runTestNgTest(scriptClass);
    }
    throw new GroovyRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
}"
46578,"/** 
 * adds a MetaMethod to this class. WARNING: this method will not do the neccessary steps for multimethod logic and using this method doesn't mean, that a method added here is replacing another method from a parent class completely. These steps are usually done by initalize, which means if you need these steps, you have to add the method before running initialize the first time.
 * @param method the MetaMethod
 * @see #initialize()
 */
public void addMetaMethod(MetaMethod method){
  if (isInitialized()) {
    throw new RuntimeException(""String_Node_Str"" + method);
  }
  final CachedClass declaringClass=method.getDeclaringClass();
  addMetaMethodToIndex(method,metaMethodIndex.getHeader(declaringClass.getTheClass()));
}","/** 
 * adds a MetaMethod to this class. WARNING: this method will not do the neccessary steps for multimethod logic and using this method doesn't mean, that a method added here is replacing another method from a parent class completely. These steps are usually done by initialize, which means if you need these steps, you have to add the method before running initialize the first time.
 * @param method the MetaMethod
 * @see #initialize()
 */
public void addMetaMethod(MetaMethod method){
  if (isInitialized()) {
    throw new RuntimeException(""String_Node_Str"" + method);
  }
  final CachedClass declaringClass=method.getDeclaringClass();
  addMetaMethodToIndex(method,metaMethodIndex.getHeader(declaringClass.getTheClass()));
}"
46579,"/** 
 * gets a snapshot of the current constant meta classes and returns it as Iterator. Modifications done using this Iterator will not cause a ConcurrentMoidificationExcpetion. If a MetaClass is removed using this Iterator, then the MetaClass will only be removed if the MetaClass was not replaced by another MetaClass in the meantime. If a MetaClass is added while using this Iterator, then it will be part of the Iteration. If a MetaClass replaces another constant meta class, then the Iteration might show two meta classes for the same class.<br/> This Iterator may not used in multiple threads.
 * @return Iterator for the constant meta classes
 */
Iterator iterator();","/** 
 * gets a snapshot of the current constant meta classes and returns it as Iterator. Modifications done using this Iterator will not cause a ConcurrentModificationException. If a MetaClass is removed using this Iterator, then the MetaClass will only be removed if the MetaClass was not replaced by another MetaClass in the meantime. If a MetaClass is added while using this Iterator, then it will be part of the Iteration. If a MetaClass replaces another constant meta class, then the Iteration might show two meta classes for the same class.<br/> This Iterator may not used in multiple threads.
 * @return Iterator for the constant meta classes
 */
Iterator iterator();"
46580,"/** 
 * Retreives a static MetaMethod for the given name and argument values, using the types of the arguments to establish the chosen MetaMethod
 * @param name The name of the MetaMethod
 * @param args The argument types
 * @return A MetaMethod or null if it doesn't exist
 */
MetaMethod getStaticMetaMethod(String name,Object[] args);","/** 
 * Retrieves a static MetaMethod for the given name and argument values, using the types of the arguments to establish the chosen MetaMethod
 * @param name The name of the MetaMethod
 * @param args The argument types
 * @return A MetaMethod or null if it doesn't exist
 */
MetaMethod getStaticMetaMethod(String name,Object[] args);"
46581,"/** 
 * Create new TemplateSerlvet.
 */
public TemplateServlet(){
  this.cache=new WeakHashMap();
  this.engine=null;
  this.generateBy=true;
  this.fileEncodingParamVal=null;
}","/** 
 * Create new TemplateServlet.
 */
public TemplateServlet(){
  this.cache=new WeakHashMap();
  this.engine=null;
  this.generateBy=true;
  this.fileEncodingParamVal=null;
}"
46582,"/** 
 * Creates the template engine. <p/> Called by   {@link TemplateServlet#init(ServletConfig)} and returns just<code>new groovy.text.SimpleTemplateEngine()</code> if the init parameter <code>template.engine</code> is not set by the container configuration.
 * @param config Current serlvet configuration passed by the container.
 * @return The underlying template engine or <code>null</code> on error.
 */
protected TemplateEngine initTemplateEngine(ServletConfig config){
  String name=config.getInitParameter(""String_Node_Str"");
  if (name == null) {
    return new SimpleTemplateEngine();
  }
  try {
    return (TemplateEngine)Class.forName(name).newInstance();
  }
 catch (  InstantiationException e) {
    log(""String_Node_Str"" + name,e);
  }
catch (  IllegalAccessException e) {
    log(""String_Node_Str"" + name,e);
  }
catch (  ClassNotFoundException e) {
    log(""String_Node_Str"" + name,e);
  }
  return null;
}","/** 
 * Creates the template engine. <p/> Called by   {@link TemplateServlet#init(ServletConfig)} and returns just<code>new groovy.text.SimpleTemplateEngine()</code> if the init parameter <code>template.engine</code> is not set by the container configuration.
 * @param config Current servlet configuration passed by the container.
 * @return The underlying template engine or <code>null</code> on error.
 */
protected TemplateEngine initTemplateEngine(ServletConfig config){
  String name=config.getInitParameter(""String_Node_Str"");
  if (name == null) {
    return new SimpleTemplateEngine();
  }
  try {
    return (TemplateEngine)Class.forName(name).newInstance();
  }
 catch (  InstantiationException e) {
    log(""String_Node_Str"" + name,e);
  }
catch (  IllegalAccessException e) {
    log(""String_Node_Str"" + name,e);
  }
catch (  ClassNotFoundException e) {
    log(""String_Node_Str"" + name,e);
  }
  return null;
}"
46583,"/** 
 * This creates and starts the socket server on a new Thread. There is no need to call run or spawn a new thread yourself. 
 * @param groovy The GroovyShell object that evaluates the incoming text. If you need additional classes in the  classloader then configure that through this object. 
 * @param isScriptFile Whether the incoming scoket data String will be a script or a file path. 
 * @param scriptFilenameOrText This will be a groovy script or a file location depending on the argument isScriptFile. 
 * @param autoOutput whether output should be automatically echoed back to the client
 * @param port the port to listen on
 */
public GroovySocketServer(GroovyShell groovy,boolean isScriptFile,String scriptFilenameOrText,boolean autoOutput,int port){
  this.groovy=groovy;
  this.isScriptFile=isScriptFile;
  this.scriptFilenameOrText=scriptFilenameOrText;
  this.autoOutput=autoOutput;
  try {
    url=new URL(""String_Node_Str"",InetAddress.getLocalHost().getHostAddress(),port,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + port);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  new Thread(this).start();
}","/** 
 * This creates and starts the socket server on a new Thread. There is no need to call run or spawn a new thread yourself. 
 * @param groovy The GroovyShell object that evaluates the incoming text. If you need additional classes in the  classloader then configure that through this object. 
 * @param isScriptFile Whether the incoming socket data String will be a script or a file path.
 * @param scriptFilenameOrText This will be a groovy script or a file location depending on the argument isScriptFile. 
 * @param autoOutput whether output should be automatically echoed back to the client
 * @param port the port to listen on
 */
public GroovySocketServer(GroovyShell groovy,boolean isScriptFile,String scriptFilenameOrText,boolean autoOutput,int port){
  this.groovy=groovy;
  this.isScriptFile=isScriptFile;
  this.scriptFilenameOrText=scriptFilenameOrText;
  this.autoOutput=autoOutput;
  try {
    url=new URL(""String_Node_Str"",InetAddress.getLocalHost().getHostAddress(),port,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + port);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  new Thread(this).start();
}"
46584,"/** 
 * Stops intercepting System.out/System.err, sending output to whereever it was going when this interceptor was created.
 */
public void stop(){
  if (output) {
    System.setOut((PrintStream)out);
  }
 else {
    System.setErr((PrintStream)out);
  }
}","/** 
 * Stops intercepting System.out/System.err, sending output to wherever it was going when this interceptor was created.
 */
public void stop(){
  if (output) {
    System.setOut((PrintStream)out);
  }
 else {
    System.setErr((PrintStream)out);
  }
}"
46585,"public void onFactoryRegistration(FactoryBuilderSupport builder,String registerdName,String group){
}","public void onFactoryRegistration(FactoryBuilderSupport builder,String registeredName,String group){
}"
46586,"/** 
 * <p>Guess the encoding of the provided buffer.</p> If Byte Order Markers are encountered at the beginning of the buffer, we immidiately return the charset implied by this BOM. Otherwise, the file would not be a human readable text file.</p> <p>If there is no BOM, this method tries to discern whether the file is UTF-8 or not. If it is not UTF-8, we assume the encoding is the default system encoding (of course, it might be any 8-bit charset, but usually, an 8-bit charset is the default one).</p> <p>It is possible to discern UTF-8 thanks to the pattern of characters with a multi-byte sequence.</p> <pre> UCS-4 range (hex.)        UTF-8 octet sequence (binary) 0000 0000-0000 007F       0xxxxxxx 0000 0080-0000 07FF       110xxxxx 10xxxxxx 0000 0800-0000 FFFF       1110xxxx 10xxxxxx 10xxxxxx 0001 0000-001F FFFF       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 0020 0000-03FF FFFF       111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 0400 0000-7FFF FFFF       1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx </pre> <p>With UTF-8, 0xFE and 0xFF never appear.</p>
 * @return the Charset recognized.
 */
private Charset guessEncoding(){
  if (hasUTF8Bom())   return Charset.forName(""String_Node_Str"");
  if (hasUTF16LEBom())   return Charset.forName(""String_Node_Str"");
  if (hasUTF16BEBom())   return Charset.forName(""String_Node_Str"");
  boolean highOrderBit=false;
  boolean validU8Char=true;
  int length=buffer.length;
  int i=0;
  while (i < length - 6) {
    byte b0=buffer[i];
    byte b1=buffer[i + 1];
    byte b2=buffer[i + 2];
    byte b3=buffer[i + 3];
    byte b4=buffer[i + 4];
    byte b5=buffer[i + 5];
    if (b0 < 0) {
      highOrderBit=true;
      if (isTwoBytesSequence(b0)) {
        if (!isContinuationChar(b1))         validU8Char=false;
 else         i++;
      }
 else       if (isThreeBytesSequence(b0)) {
        if (!(isContinuationChar(b1) && isContinuationChar(b2)))         validU8Char=false;
 else         i+=2;
      }
 else       if (isFourBytesSequence(b0)) {
        if (!(isContinuationChar(b1) && isContinuationChar(b2) && isContinuationChar(b3)))         validU8Char=false;
 else         i+=3;
      }
 else       if (isFiveBytesSequence(b0)) {
        if (!(isContinuationChar(b1) && isContinuationChar(b2) && isContinuationChar(b3)&& isContinuationChar(b4)))         validU8Char=false;
 else         i+=4;
      }
 else       if (isSixBytesSequence(b0)) {
        if (!(isContinuationChar(b1) && isContinuationChar(b2) && isContinuationChar(b3)&& isContinuationChar(b4)&& isContinuationChar(b5)))         validU8Char=false;
 else         i+=5;
      }
 else       validU8Char=false;
    }
    if (!validU8Char)     break;
    i++;
  }
  if (!highOrderBit) {
    if (this.enforce8Bit)     return this.defaultCharset;
 else     return Charset.forName(""String_Node_Str"");
  }
  if (validU8Char)   return Charset.forName(""String_Node_Str"");
  return this.defaultCharset;
}","/** 
 * <p>Guess the encoding of the provided buffer.</p> If Byte Order Markers are encountered at the beginning of the buffer, we immediately return the charset implied by this BOM. Otherwise, the file would not be a human readable text file.</p> <p>If there is no BOM, this method tries to discern whether the file is UTF-8 or not. If it is not UTF-8, we assume the encoding is the default system encoding (of course, it might be any 8-bit charset, but usually, an 8-bit charset is the default one).</p> <p>It is possible to discern UTF-8 thanks to the pattern of characters with a multi-byte sequence.</p> <pre> UCS-4 range (hex.)        UTF-8 octet sequence (binary) 0000 0000-0000 007F       0xxxxxxx 0000 0080-0000 07FF       110xxxxx 10xxxxxx 0000 0800-0000 FFFF       1110xxxx 10xxxxxx 10xxxxxx 0001 0000-001F FFFF       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 0020 0000-03FF FFFF       111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 0400 0000-7FFF FFFF       1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx </pre> <p>With UTF-8, 0xFE and 0xFF never appear.</p>
 * @return the Charset recognized.
 */
private Charset guessEncoding(){
  if (hasUTF8Bom())   return Charset.forName(""String_Node_Str"");
  if (hasUTF16LEBom())   return Charset.forName(""String_Node_Str"");
  if (hasUTF16BEBom())   return Charset.forName(""String_Node_Str"");
  boolean highOrderBit=false;
  boolean validU8Char=true;
  int length=buffer.length;
  int i=0;
  while (i < length - 6) {
    byte b0=buffer[i];
    byte b1=buffer[i + 1];
    byte b2=buffer[i + 2];
    byte b3=buffer[i + 3];
    byte b4=buffer[i + 4];
    byte b5=buffer[i + 5];
    if (b0 < 0) {
      highOrderBit=true;
      if (isTwoBytesSequence(b0)) {
        if (!isContinuationChar(b1))         validU8Char=false;
 else         i++;
      }
 else       if (isThreeBytesSequence(b0)) {
        if (!(isContinuationChar(b1) && isContinuationChar(b2)))         validU8Char=false;
 else         i+=2;
      }
 else       if (isFourBytesSequence(b0)) {
        if (!(isContinuationChar(b1) && isContinuationChar(b2) && isContinuationChar(b3)))         validU8Char=false;
 else         i+=3;
      }
 else       if (isFiveBytesSequence(b0)) {
        if (!(isContinuationChar(b1) && isContinuationChar(b2) && isContinuationChar(b3)&& isContinuationChar(b4)))         validU8Char=false;
 else         i+=4;
      }
 else       if (isSixBytesSequence(b0)) {
        if (!(isContinuationChar(b1) && isContinuationChar(b2) && isContinuationChar(b3)&& isContinuationChar(b4)&& isContinuationChar(b5)))         validU8Char=false;
 else         i+=5;
      }
 else       validU8Char=false;
    }
    if (!validU8Char)     break;
    i++;
  }
  if (!highOrderBit) {
    if (this.enforce8Bit)     return this.defaultCharset;
 else     return Charset.forName(""String_Node_Str"");
  }
  if (validU8Char)   return Charset.forName(""String_Node_Str"");
  return this.defaultCharset;
}"
46587,"/** 
 * Called when a factory is registerd to a builder
 * @param builder the build the factory has been registered to
 * @param registerdName the name the factory has been registerd under
 */
void onFactoryRegistration(FactoryBuilderSupport builder,String registerdName,String registeredGroupName);","/** 
 * Called when a factory is registered to a builder
 * @param builder the build the factory has been registered to
 * @param registeredName the name the factory has been registered under
 */
void onFactoryRegistration(FactoryBuilderSupport builder,String registeredName,String registeredGroupName);"
46588,"/** 
 * Does this factory ""Own"" it's child closure.
 * @return true  if the factory should have onContentClosure() called,false if the builder shouold handle it
 */
boolean isHandlesNodeChildren();","/** 
 * Does this factory ""Own"" it's child closure.
 * @return true  if the factory should have onContentClosure() called,false if the builder should handle it
 */
boolean isHandlesNodeChildren();"
46589,"/** 
 * This method is responsible for instanciating a node and configure its properties.
 * @param name       the name of the node
 * @param attributes the attributes for the node
 * @param value      the value arguments for the node
 * @return the object return from the factory
 */
protected Object createNode(Object name,Map attributes,Object value){
  Object node;
  Factory factory=getProxyBuilder().resolveFactory(name,attributes,value);
  if (factory == null) {
    LOG.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str"");
    throw new MissingMethodExceptionNoStack((String)name,Object.class,new Object[]{attributes,value});
  }
  getProxyBuilder().getContext().put(CURRENT_FACTORY,factory);
  getProxyBuilder().getContext().put(CURRENT_NAME,String.valueOf(name));
  getProxyBuilder().preInstantiate(name,attributes,value);
  try {
    node=factory.newInstance(getProxyBuilder().getChildBuilder(),name,value,attributes);
    if (node == null) {
      LOG.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str"");
      return null;
    }
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine(""String_Node_Str"" + name + ""String_Node_Str""+ node);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + name + ""String_Node_Str""+ e,e);
  }
  getProxyBuilder().postInstantiate(name,attributes,node);
  getProxyBuilder().handleNodeAttributes(node,attributes);
  return node;
}","/** 
 * This method is responsible for instantiating a node and configure its properties.
 * @param name       the name of the node
 * @param attributes the attributes for the node
 * @param value      the value arguments for the node
 * @return the object return from the factory
 */
protected Object createNode(Object name,Map attributes,Object value){
  Object node;
  Factory factory=getProxyBuilder().resolveFactory(name,attributes,value);
  if (factory == null) {
    LOG.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str"");
    throw new MissingMethodExceptionNoStack((String)name,Object.class,new Object[]{attributes,value});
  }
  getProxyBuilder().getContext().put(CURRENT_FACTORY,factory);
  getProxyBuilder().getContext().put(CURRENT_NAME,String.valueOf(name));
  getProxyBuilder().preInstantiate(name,attributes,value);
  try {
    node=factory.newInstance(getProxyBuilder().getChildBuilder(),name,value,attributes);
    if (node == null) {
      LOG.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str"");
      return null;
    }
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine(""String_Node_Str"" + name + ""String_Node_Str""+ node);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + name + ""String_Node_Str""+ e,e);
  }
  getProxyBuilder().postInstantiate(name,attributes,node);
  getProxyBuilder().handleNodeAttributes(node,attributes);
  return node;
}"
46590,"/** 
 * Resolves entities against using the suppied URL as the base for relative URLs
 * @param base The URL used to resolve relative URLs
 */
public void setEntityBaseUrl(final URL base){
  this.reader.setEntityResolver(new EntityResolver(){
    public InputSource resolveEntity(    final String publicId,    final String systemId) throws IOException {
      return new InputSource(new URL(base,systemId).openStream());
    }
  }
);
}","/** 
 * Resolves entities against using the supplied URL as the base for relative URLs
 * @param base The URL used to resolve relative URLs
 */
public void setEntityBaseUrl(final URL base){
  this.reader.setEntityResolver(new EntityResolver(){
    public InputSource resolveEntity(    final String publicId,    final String systemId) throws IOException {
      return new InputSource(new URL(base,systemId).openStream());
    }
  }
);
}"
46591,"/** 
 * Returns the detail message string of this error. The message  will consist of the bug text prefixed by ""BUG! "" if there this isntance was created using a message. If this error was  constructed without using a bug text the message of the cause  is used prefixed by ""BUG! UNCAUGHT EXCEPTION: ""
 * @return the detail message string of this error.
 */
public String getMessage(){
  if (message != null) {
    return ""String_Node_Str"" + message;
  }
 else {
    return ""String_Node_Str"" + exception.getMessage();
  }
}","/** 
 * Returns the detail message string of this error. The message  will consist of the bug text prefixed by ""BUG! "" if there this instance was created using a message. If this error was constructed without using a bug text the message of the cause  is used prefixed by ""BUG! UNCAUGHT EXCEPTION: ""
 * @return the detail message string of this error.
 */
public String getMessage(){
  if (message != null) {
    return ""String_Node_Str"" + message;
  }
 else {
    return ""String_Node_Str"" + exception.getMessage();
  }
}"
46592,"/** 
 * Adds the class pathes (if any)
 * @param classLoader the classloader to configure
 */
protected void addClassPathes(final GroovyClassLoader classLoader){
  if (classpath != null) {
    for (int i=0; i < classpath.list().length; i++) {
      classLoader.addClasspath(classpath.list()[i]);
    }
  }
}","/** 
 * Adds the class paths (if any)
 * @param classLoader the classloader to configure
 */
protected void addClassPathes(final GroovyClassLoader classLoader){
  if (classpath != null) {
    for (int i=0; i < classpath.list().length; i++) {
      classLoader.addClasspath(classpath.list()[i]);
    }
  }
}"
46593,"public Set<java.util.Map.Entry<K,V>> entrySet(){
  Map m;
  if (size < maxListFill) {
    m=innerMap;
  }
 else {
    m=makeMap();
  }
  return m.entrySet();
}","public Set<java.util.Map.Entry<K,V>> entrySet(){
  Map m;
  if (size > maxListFill) {
    m=innerMap;
  }
 else {
    m=makeMap();
  }
  return m.entrySet();
}"
46594,"private Map<K,V> makeMap(){
  Map<K,V> m=new HashMap();
  for (int i=0; i < maxListFill; i++) {
    m.put((K)listKeys[i],(V)listValues[i]);
  }
  return m;
}","private Map<K,V> makeMap(){
  Map<K,V> m=new HashMap();
  for (int i=0; i < size; i++) {
    m.put((K)listKeys[i],(V)listValues[i]);
  }
  return m;
}"
46595,"/** 
 * Replying on the ConcurrentHashMap thread-safe iteration implementation the method will remove all entries holding SoftReferences to gc-evicted objects.
 */
public void cleanUpNullReferences(){
  final Iterator<Map.Entry<Object,Object>> iterator=cache.entrySet().iterator();
  while (iterator.hasNext()) {
    final Map.Entry<Object,Object> entry=iterator.next();
    if (((SoftReference)entry.getValue()).get() == null)     cache.remove(entry.getKey(),entry.getValue());
  }
}","/** 
 * Replying on the ConcurrentHashMap thread-safe iteration implementation the method will remove all entries holding SoftReferences to gc-evicted objects.
 */
public void cleanUpNullReferences(){
  final Iterator<Map.Entry<Object,Object>> iterator=cache.entrySet().iterator();
  while (iterator.hasNext()) {
    final Map.Entry<Object,Object> entry=iterator.next();
    Object entryVal=entry.getValue();
    if (entryVal != null && ((SoftReference)entryVal).get() == null)     cache.remove(entry.getKey(),entryVal);
  }
}"
46596,"/** 
 * Returns the string representation of this map.  The string displays the contents of the map, i.e. <code>[one:1, two:2, three:3]</code>.
 * @param self a Map
 * @return the string representation
 * @since 1.0
 */
public static String toMapString(Map self){
  return (self == null) ? ""String_Node_Str"" : InvokerHelper.toMapString(self);
}","/** 
 * Returns the string representation of this map.  The string displays the contents of the map, i.e. <code>[one:1, two:2, three:3]</code>.
 * @param self a Map
 * @param maxSize stop after approximately this many characters and append '...'
 * @return the string representation
 * @since 1.0
 */
public static String toMapString(Map self,int maxSize){
  return (self == null) ? ""String_Node_Str"" : InvokerHelper.toMapString(self,maxSize);
}"
46597,"/** 
 * Returns the string representation of the given list.  The string displays the contents of the list, similar to a list literal, i.e. <code>[1, 2, a]</code>.
 * @param self a Collection
 * @return the string representation
 * @since 1.0
 */
public static String toListString(Collection self){
  return (self == null) ? ""String_Node_Str"" : InvokerHelper.toListString(self);
}","/** 
 * Returns the string representation of the given list.  The string displays the contents of the list, similar to a list literal, i.e. <code>[1, 2, a]</code>.
 * @param self a Collection
 * @param maxSize stop after approximately this many characters and append '...'
 * @return the string representation
 * @since 1.7.3
 */
public static String toListString(Collection self,int maxSize){
  return (self == null) ? ""String_Node_Str"" : InvokerHelper.toListString(self,maxSize);
}"
46598,"/** 
 * A helper method to return the string representation of a map with bracket boundaries ""["" and ""]"".
 * @param arg the map to process
 * @return the string representation of the map
 */
public static String toMapString(Map arg){
  return formatMap(arg,false);
}","/** 
 * A helper method to return the string representation of a map with bracket boundaries ""["" and ""]"".
 * @param arg the map to process
 * @param maxSize stop after approximately this many characters and append '...'
 * @return the string representation of the map
 */
public static String toMapString(Map arg,int maxSize){
  return formatMap(arg,false,maxSize);
}"
46599,"/** 
 * A helper method to return the string representation of a list with bracket boundaries ""["" and ""]"".
 * @param arg the collection to process
 * @return the string representation of the collection
 */
public static String toListString(Collection arg){
  return formatList(arg,false);
}","/** 
 * A helper method to return the string representation of a list with bracket boundaries ""["" and ""]"".
 * @param arg the collection to process
 * @param maxSize stop after approximately this many characters and append '...'
 * @return the string representation of the collection
 */
public static String toListString(Collection arg,int maxSize){
  return formatList(arg,false,maxSize);
}"
46600,"private static String formatMap(Map map,boolean verbose){
  if (map.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuffer buffer=new StringBuffer(""String_Node_Str"");
  boolean first=true;
  for (Iterator iter=map.entrySet().iterator(); iter.hasNext(); ) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(""String_Node_Str"");
    }
    Map.Entry entry=(Map.Entry)iter.next();
    buffer.append(format(entry.getKey(),verbose));
    buffer.append(""String_Node_Str"");
    if (entry.getValue() == map) {
      buffer.append(""String_Node_Str"");
    }
 else {
      buffer.append(format(entry.getValue(),verbose));
    }
  }
  buffer.append(""String_Node_Str"");
  return buffer.toString();
}","private static String formatMap(Map map,boolean verbose,int maxSize){
  if (map.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuffer buffer=new StringBuffer(""String_Node_Str"");
  boolean first=true;
  for (  Object o : map.entrySet()) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(""String_Node_Str"");
    }
    if (maxSize != -1 && buffer.length() > maxSize) {
      buffer.append(""String_Node_Str"");
      break;
    }
    Map.Entry entry=(Map.Entry)o;
    buffer.append(format(entry.getKey(),verbose));
    buffer.append(""String_Node_Str"");
    if (entry.getValue() == map) {
      buffer.append(""String_Node_Str"");
    }
 else {
      buffer.append(format(entry.getValue(),verbose,sizeLeft(maxSize,buffer)));
    }
  }
  buffer.append(""String_Node_Str"");
  return buffer.toString();
}"
46601,"protected static String format(Object arguments,boolean verbose){
  if (arguments == null) {
    final NullObject nullObject=NullObject.getNullObject();
    return (String)nullObject.getMetaClass().invokeMethod(nullObject,""String_Node_Str"",EMPTY_ARGS);
  }
  if (arguments.getClass().isArray()) {
    if (arguments instanceof char[]) {
      return new String((char[])arguments);
    }
    return format(DefaultTypeTransformation.asCollection(arguments),verbose);
  }
  if (arguments instanceof Range) {
    Range range=(Range)arguments;
    if (verbose) {
      return range.inspect();
    }
 else {
      return range.toString();
    }
  }
  if (arguments instanceof Collection) {
    return formatList((Collection)arguments,verbose);
  }
  if (arguments instanceof Map) {
    return formatMap((Map)arguments,verbose);
  }
  if (arguments instanceof Element) {
    return XmlUtil.serialize((Element)arguments);
  }
  if (arguments instanceof String) {
    if (verbose) {
      String arg=((String)arguments).replaceAll(""String_Node_Str"",""String_Node_Str"");
      arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"");
      arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"");
      arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"");
      arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"");
      arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"");
      return ""String_Node_Str"" + arg + ""String_Node_Str"";
    }
 else {
      return (String)arguments;
    }
  }
  return arguments.toString();
}","protected static String format(Object arguments,boolean verbose,int maxSize){
  if (arguments == null) {
    final NullObject nullObject=NullObject.getNullObject();
    return (String)nullObject.getMetaClass().invokeMethod(nullObject,""String_Node_Str"",EMPTY_ARGS);
  }
  if (arguments.getClass().isArray()) {
    if (arguments instanceof char[]) {
      return new String((char[])arguments);
    }
    return format(DefaultTypeTransformation.asCollection(arguments),verbose);
  }
  if (arguments instanceof Range) {
    Range range=(Range)arguments;
    if (verbose) {
      return range.inspect();
    }
 else {
      return range.toString();
    }
  }
  if (arguments instanceof Collection) {
    return formatList((Collection)arguments,verbose,maxSize);
  }
  if (arguments instanceof Map) {
    return formatMap((Map)arguments,verbose,maxSize);
  }
  if (arguments instanceof Element) {
    return XmlUtil.serialize((Element)arguments);
  }
  if (arguments instanceof String) {
    if (verbose) {
      String arg=((String)arguments).replaceAll(""String_Node_Str"",""String_Node_Str"");
      arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"");
      arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"");
      arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"");
      arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"");
      arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"");
      return ""String_Node_Str"" + arg + ""String_Node_Str"";
    }
 else {
      return (String)arguments;
    }
  }
  return arguments.toString();
}"
46602,"private static String formatList(Collection list,boolean verbose){
  StringBuffer buffer=new StringBuffer(""String_Node_Str"");
  boolean first=true;
  for (Iterator iter=list.iterator(); iter.hasNext(); ) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(""String_Node_Str"");
    }
    buffer.append(format(iter.next(),verbose));
  }
  buffer.append(""String_Node_Str"");
  return buffer.toString();
}","private static String formatList(Collection collection,boolean verbose,int maxSize){
  StringBuffer buffer=new StringBuffer(""String_Node_Str"");
  boolean first=true;
  for (  Object item : collection) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(""String_Node_Str"");
    }
    if (maxSize != -1 && buffer.length() > maxSize) {
      buffer.append(""String_Node_Str"");
      break;
    }
    if (item == collection) {
      buffer.append(""String_Node_Str"");
    }
 else {
      buffer.append(format(item,verbose,sizeLeft(maxSize,buffer)));
    }
  }
  buffer.append(""String_Node_Str"");
  return buffer.toString();
}"
46603,"private void addThisReference(ConstructorNode node){
  if (classNode.isEnum() || classNode.isInterface())   return;
  if ((classNode.getModifiers() & Opcodes.ACC_STATIC) != 0)   return;
  Statement code=node.getCode();
  if (!(classNode instanceof InnerClassNode))   return;
  InnerClassNode innerClass=(InnerClassNode)classNode;
  if (innerClass.getVariableScope() != null)   return;
  if ((innerClass.getModifiers() & ACC_STATIC) != 0)   return;
  Parameter[] params=node.getParameters();
  Parameter[] newParams=new Parameter[params.length + 1];
  System.arraycopy(params,0,newParams,1,params.length);
  Parameter thisPara=new Parameter(classNode.getOuterClass(),getUniqueName(params,node));
  newParams[0]=thisPara;
  node.setParameters(newParams);
  Statement firstStatement=node.getFirstStatement();
  BlockStatement block=null;
  if (code == null) {
    block=new BlockStatement();
  }
 else   if (!(code instanceof BlockStatement)) {
    block=new BlockStatement();
    block.addStatement(code);
  }
 else {
    block=(BlockStatement)code;
  }
  BlockStatement newCode=new BlockStatement();
  addFieldInit(thisPara,thisField,newCode);
  ConstructorCallExpression cce=getFirstIfSpecialConstructorCall(block);
  if (cce == null) {
    newCode.addStatement(block);
  }
 else   if (cce.isThisCall()) {
    TupleExpression args=(TupleExpression)cce.getArguments();
    List<Expression> expressions=args.getExpressions();
    VariableExpression ve=new VariableExpression(thisPara.getName());
    ve.setAccessedVariable(thisPara);
    expressions.add(0,ve);
    newCode=block;
  }
 else {
    block.getStatements().remove(0);
    newCode.getStatements().add(0,firstStatement);
    newCode.addStatement(block);
  }
  node.setCode(newCode);
}","private void addThisReference(ConstructorNode node){
  if (classNode.isEnum() || classNode.isInterface())   return;
  if ((classNode.getModifiers() & Opcodes.ACC_STATIC) != 0)   return;
  Statement code=node.getCode();
  if (!(classNode instanceof InnerClassNode))   return;
  InnerClassNode innerClass=(InnerClassNode)classNode;
  if (innerClass.getVariableScope() != null)   return;
  if ((innerClass.getModifiers() & ACC_STATIC) != 0)   return;
  Parameter[] params=node.getParameters();
  Parameter[] newParams=new Parameter[params.length + 1];
  System.arraycopy(params,0,newParams,1,params.length);
  Parameter thisPara=new Parameter(classNode.getOuterClass(),getUniqueName(params,node));
  newParams[0]=thisPara;
  node.setParameters(newParams);
  Statement firstStatement=node.getFirstStatement();
  BlockStatement block=null;
  if (code == null) {
    block=new BlockStatement();
  }
 else   if (!(code instanceof BlockStatement)) {
    block=new BlockStatement();
    block.addStatement(code);
  }
 else {
    block=(BlockStatement)code;
  }
  BlockStatement newCode=new BlockStatement();
  addFieldInit(thisPara,thisField,newCode);
  ConstructorCallExpression cce=getFirstIfSpecialConstructorCall(block);
  if (cce == null) {
    block.getStatements().add(0,newCode);
  }
 else   if (cce.isThisCall()) {
    TupleExpression args=(TupleExpression)cce.getArguments();
    List<Expression> expressions=args.getExpressions();
    VariableExpression ve=new VariableExpression(thisPara.getName());
    ve.setAccessedVariable(thisPara);
    expressions.add(0,ve);
    newCode=block;
  }
 else {
    block.getStatements().add(1,newCode);
  }
  node.setCode(block);
}"
46604,"private ConstructorCallExpression getFirstIfSpecialConstructorCall(Statement code){
  if (code == null || !(code instanceof ExpressionStatement))   return null;
  Expression expression=((ExpressionStatement)code).getExpression();
  if (!(expression instanceof ConstructorCallExpression))   return null;
  ConstructorCallExpression cce=(ConstructorCallExpression)expression;
  if (cce.isSpecialCall())   return cce;
  return null;
}","private ConstructorCallExpression getFirstIfSpecialConstructorCall(BlockStatement code){
  if (code == null)   return null;
  final List<Statement> statementList=code.getStatements();
  if (statementList.isEmpty())   return null;
  final Statement statement=statementList.get(0);
  if (!(statement instanceof ExpressionStatement))   return null;
  Expression expression=((ExpressionStatement)statement).getExpression();
  if (!(expression instanceof ConstructorCallExpression))   return null;
  ConstructorCallExpression cce=(ConstructorCallExpression)expression;
  if (cce.isSpecialCall())   return cce;
  return null;
}"
46605,"private void buildSaveLiveCartQuery(){
  IAddress sadr=cart.getShippingAddress();
  String shipingAddress1=null;
  String shppingAddress2=null;
  String shippingCity=null;
  String shippingState=null;
  String shippingZip=null;
  shipingAddress1=sadr.getStreet1();
  shppingAddress2=sadr.getStreet2();
  shippingCity=sadr.getCity();
  shippingState=sadr.getState();
  shippingZip=sadr.getZip();
  IAddress badr=cart.getBillingAddress();
  String billingAddress1=null;
  String billingAddress2=null;
  String billingCity=null;
  String billingState=null;
  String billingZip=null;
  billingAddress1=badr.getStreet1();
  billingAddress2=badr.getStreet2();
  billingCity=badr.getCity();
  billingState=badr.getState();
  billingZip=badr.getZip();
  double totalPriceAmount=0;
  for (  ICartItem cit : cart.getCartItems()) {
    String tp=cit.getTotalprice();
    double tpp=Double.parseDouble(tp);
    totalPriceAmount+=tpp;
  }
  query=""String_Node_Str"" + cartId + ""String_Node_Str""+ custId+ ""String_Node_Str""+ shipingAddress1+ ""String_Node_Str""+ shppingAddress2+ ""String_Node_Str""+ shippingCity+ ""String_Node_Str""+ shippingState+ ""String_Node_Str""+ shippingZip+ ""String_Node_Str""+ billingAddress1+ ""String_Node_Str""+ billingAddress2+ ""String_Node_Str""+ billingCity+ ""String_Node_Str""+ billingState+ ""String_Node_Str""+ billingZip+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ totalPriceAmount+ ""String_Node_Str""+ 0.0+ ""String_Node_Str""+ 0.0+ ""String_Node_Str""+ totalPriceAmount+ ""String_Node_Str"";
}","private void buildSaveLiveCartQuery(){
  custId=cart.getCustomerId();
  query=""String_Node_Str"" + cartId + ""String_Node_Str""+ custId+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str""+ null+ ""String_Node_Str"";
}"
46606,"public void saveCart() throws DatabaseException {
  this.queryType=SAVE_LIVE_CART;
  DataAccessSubsystemFacade.INSTANCE.save(this);
}","public void saveCart() throws DatabaseException {
  if (cartId == null) {
    cartId=DataAccessUtil.getNextAvailShopCartId();
  }
  this.queryType=SAVE_LIVE_CART;
  DataAccessSubsystemFacade.INSTANCE.save(this);
}"
46607,"public ShoppingCart(List<ICartItem> cartItems){
  if (cartItems == null)   this.cartItems=new LinkedList<ICartItem>();
 else   this.cartItems=cartItems;
  SessionContext context=SessionContext.INSTANCE;
  ICustomerSubsystem custSs=(ICustomerSubsystem)context.get(CustomerConstants.CUSTOMER);
  updateCustomerInfo(custSs);
}","public ShoppingCart(List<ICartItem> cartItems){
  if (cartItems == null)   this.cartItems=new LinkedList<ICartItem>();
 else   this.cartItems=cartItems;
}"
46608,"public void setCustomerId(String customerId) throws DatabaseException {
  this.customerId=customerId;
  ICustomerSubsystem css=new CustomerSubsystemFacade();
  css.initializeCustomer(customerId);
  updateCustomerInfo(css);
}","public void setCustomerId(String customerId){
  this.customerId=customerId;
}"
46609,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.search);
  Intent intent=getIntent();
  if (Intent.ACTION_SEARCH.equalsIgnoreCase(intent.getAction())) {
    String query=intent.getStringExtra(SearchManager.QUERY);
    if (Preferences.getSuggestions(getApplicationContext())) {
      SearchRecentSuggestions suggestions=new SearchRecentSuggestions(this,SuggestionProvider.AUTHORITY,SuggestionProvider.MODE);
      suggestions.saveRecentQuery(query,null);
    }
    String[] agencies=getListItems(this,SELECT + AGENCIES + WHERE+ replace(""String_Node_Str"",query)+ OR+ replace(""String_Node_Str"",query)+ OR+ replace(""String_Node_Str"",query)+ OR+ replace(""String_Node_Str"",query));
    String[] mayoralties=getListItems(this,SELECT + MAYORALTIES + WHERE+ replace(""String_Node_Str"",query)+ OR+ replace(""String_Node_Str"",query)+ OR+ replace(""String_Node_Str"",query)+ OR+ replace(""String_Node_Str"",query));
    String[] procedures=getListItems(this,SELECT + PROCEDURES + WHERE+ replace(""String_Node_Str"",query));
    TextView noResults=(TextView)findViewById(R.id.search_results);
    noResults.setText(Html.fromHtml(getString(R.string.search_none,query)));
    String[] results=mergeArrays(agencies,mayoralties,procedures);
    inflateList(results);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.search);
  Intent intent=getIntent();
  if (Intent.ACTION_SEARCH.equalsIgnoreCase(intent.getAction())) {
    String query=intent.getStringExtra(SearchManager.QUERY);
    if (Preferences.getSuggestions(getApplicationContext())) {
      SearchRecentSuggestions suggestions=new SearchRecentSuggestions(this,SuggestionProvider.AUTHORITY,SuggestionProvider.MODE);
      suggestions.saveRecentQuery(query,null);
    }
    String[] agencies=getListItems(this,AGENCIES + WHERE + replace(""String_Node_Str"",query)+ OR+ replace(""String_Node_Str"",query)+ OR+ replace(""String_Node_Str"",query)+ OR+ replace(""String_Node_Str"",query));
    String[] mayoralties=getListItems(this,MAYORALTIES + WHERE + replace(""String_Node_Str"",query)+ OR+ replace(""String_Node_Str"",query)+ OR+ replace(""String_Node_Str"",query)+ OR+ replace(""String_Node_Str"",query));
    String[] procedures=getListItems(this,PROCEDURES + WHERE + replace(""String_Node_Str"",query));
    TextView noResults=(TextView)findViewById(R.id.search_results);
    noResults.setText(Html.fromHtml(getString(R.string.search_none,query)));
    String[] results=mergeArrays(agencies,mayoralties,procedures);
    inflateList(results);
  }
}"
46610,"private void inflateList(String[] results){
  final ListView resultsList=(ListView)findViewById(R.id.list_result);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,results);
  resultsList.setAdapter(adapter);
  resultsList.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapter,    View view,    int position,    long id){
      String[] agenciesResults=getArrayFromCursor(Search.this,SELECT + AGENCIES + WHERE+ ""String_Node_Str""+ resultsList.getItemAtPosition(position).toString()+ ""String_Node_Str"");
      String[] mayoraltiesResults=getArrayFromCursor(Search.this,SELECT + MAYORALTIES + WHERE+ ""String_Node_Str""+ resultsList.getItemAtPosition(position).toString()+ ""String_Node_Str"");
      String[] proceduresResults=getArrayFromCursor(Search.this,SELECT + PROCEDURES + WHERE+ ""String_Node_Str""+ resultsList.getItemAtPosition(position).toString()+ ""String_Node_Str"");
      try {
        Show.setDialog(Search.this,agenciesResults);
      }
 catch (      Exception e) {
        try {
          Show.setDialog(Search.this,mayoraltiesResults);
        }
 catch (        Exception e1) {
          showActivity(Procedures.class,Integer.parseInt(proceduresResults[0]));
        }
      }
    }
  }
);
  resultsList.setVisibility(View.VISIBLE);
  resultsList.setEmptyView(findViewById(R.id.search_results));
}","private void inflateList(String[] results){
  final ListView resultsList=(ListView)findViewById(R.id.list_result);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,results);
  resultsList.setAdapter(adapter);
  resultsList.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapter,    View view,    int position,    long id){
      String[] agenciesResults=getArrayFromCursor(Search.this,""String_Node_Str"" + AGENCIES + WHERE+ ""String_Node_Str""+ resultsList.getItemAtPosition(position).toString()+ ""String_Node_Str"");
      String[] mayoraltiesResults=getArrayFromCursor(Search.this,""String_Node_Str"" + MAYORALTIES + WHERE+ ""String_Node_Str""+ resultsList.getItemAtPosition(position).toString()+ ""String_Node_Str"");
      String[] proceduresResults=getArrayFromCursor(Search.this,""String_Node_Str"" + PROCEDURES + WHERE+ ""String_Node_Str""+ resultsList.getItemAtPosition(position).toString()+ ""String_Node_Str"");
      if (!agenciesResults[1].equals(""String_Node_Str""))       Show.setDialog(Search.this,agenciesResults);
      if (!mayoraltiesResults[1].equals(""String_Node_Str""))       Show.setDialog(Search.this,mayoraltiesResults);
      if (!proceduresResults[1].equals(""String_Node_Str""))       showActivity(Procedures.class,Integer.parseInt(proceduresResults[0]));
    }
  }
);
  resultsList.setVisibility(View.VISIBLE);
  resultsList.setEmptyView(findViewById(R.id.search_results));
}"
46611,"@Override public void onItemClick(AdapterView<?> adapter,View view,int position,long id){
  String[] agenciesResults=getArrayFromCursor(Search.this,SELECT + AGENCIES + WHERE+ ""String_Node_Str""+ resultsList.getItemAtPosition(position).toString()+ ""String_Node_Str"");
  String[] mayoraltiesResults=getArrayFromCursor(Search.this,SELECT + MAYORALTIES + WHERE+ ""String_Node_Str""+ resultsList.getItemAtPosition(position).toString()+ ""String_Node_Str"");
  String[] proceduresResults=getArrayFromCursor(Search.this,SELECT + PROCEDURES + WHERE+ ""String_Node_Str""+ resultsList.getItemAtPosition(position).toString()+ ""String_Node_Str"");
  try {
    Show.setDialog(Search.this,agenciesResults);
  }
 catch (  Exception e) {
    try {
      Show.setDialog(Search.this,mayoraltiesResults);
    }
 catch (    Exception e1) {
      showActivity(Procedures.class,Integer.parseInt(proceduresResults[0]));
    }
  }
}","@Override public void onItemClick(AdapterView<?> adapter,View view,int position,long id){
  String[] agenciesResults=getArrayFromCursor(Search.this,""String_Node_Str"" + AGENCIES + WHERE+ ""String_Node_Str""+ resultsList.getItemAtPosition(position).toString()+ ""String_Node_Str"");
  String[] mayoraltiesResults=getArrayFromCursor(Search.this,""String_Node_Str"" + MAYORALTIES + WHERE+ ""String_Node_Str""+ resultsList.getItemAtPosition(position).toString()+ ""String_Node_Str"");
  String[] proceduresResults=getArrayFromCursor(Search.this,""String_Node_Str"" + PROCEDURES + WHERE+ ""String_Node_Str""+ resultsList.getItemAtPosition(position).toString()+ ""String_Node_Str"");
  if (!agenciesResults[1].equals(""String_Node_Str""))   Show.setDialog(Search.this,agenciesResults);
  if (!mayoraltiesResults[1].equals(""String_Node_Str""))   Show.setDialog(Search.this,mayoraltiesResults);
  if (!proceduresResults[1].equals(""String_Node_Str""))   showActivity(Procedures.class,Integer.parseInt(proceduresResults[0]));
}"
46612,"private String createSoapRequest(HashMap<String,String> requestFields){
  XmlSerializer serializer=Xml.newSerializer();
  StringWriter writer=new StringWriter();
  try {
    serializer.setOutput(writer);
    serializer.setPrefix(SOAPENV,ENV);
    serializer.setPrefix(URN_STRING,URN);
    serializer.startTag(ENV,ENVELOPE);
    serializer.startTag(ENV,HEADER);
    serializer.endTag(ENV,HEADER);
    serializer.startTag(ENV,BODY);
    serializer.startTag(URN,LOGIN);
    serializer.startTag(URN,USERNAME);
    serializer.text(requestFields.get(USERNAME));
    serializer.endTag(URN,USERNAME);
    serializer.startTag(URN,PASSWORD);
    serializer.text(requestFields.get(PASSWORD));
    serializer.text(requestFields.get(SECURITY_TOKEN));
    serializer.endTag(URN,PASSWORD);
    serializer.endTag(URN,LOGIN);
    serializer.endTag(ENV,BODY);
    serializer.endTag(ENV,ENVELOPE);
    serializer.endDocument();
    return writer.toString();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private String createSoapRequest(HashMap<String,String> requestFields){
  XmlSerializer serializer=Xml.newSerializer();
  StringWriter writer=new StringWriter();
  try {
    serializer.setOutput(writer);
    serializer.setPrefix(SOAPENV,ENV);
    serializer.setPrefix(URN_STRING,URN);
    serializer.startTag(ENV,ENVELOPE);
    serializer.startTag(ENV,HEADER);
    serializer.endTag(ENV,HEADER);
    serializer.startTag(ENV,BODY);
    serializer.startTag(URN,LOGIN);
    serializer.startTag(URN,USERNAME);
    serializer.text(requestFields.get(USERNAME));
    serializer.endTag(URN,USERNAME);
    serializer.startTag(URN,PASSWORD);
    serializer.text(requestFields.get(PASSWORD));
    String secToken=requestFields.get(SECURITY_TOKEN);
    if (secToken != null && !secToken.trim().equals(""String_Node_Str""))     serializer.text(requestFields.get(SECURITY_TOKEN));
    serializer.endTag(URN,PASSWORD);
    serializer.endTag(URN,LOGIN);
    serializer.endTag(ENV,BODY);
    serializer.endTag(ENV,ENVELOPE);
    serializer.endDocument();
    return writer.toString();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}"
46613,"public QueryResult parseQueryResponse(String response1,String queryType){
  try {
    XmlPullParserFactory factory=XmlPullParserFactory.newInstance();
    factory.setNamespaceAware(true);
    XmlPullParser xpp=factory.newPullParser();
    xpp.setInput(new StringReader(response1));
    int eventType=xpp.getEventType();
    boolean done=false;
    SObject currentSObject=null;
    boolean inRecord=false;
    String prevType=null;
    while (eventType != XmlPullParser.END_DOCUMENT && !done) {
      String name=null;
switch (eventType) {
case XmlPullParser.START_DOCUMENT:
        break;
case XmlPullParser.START_TAG:
      name=xpp.getName();
    System.out.println(""String_Node_Str"" + name);
  if (name.equalsIgnoreCase(DONE)) {
    if (!inRecord) {
      result.setDone(Boolean.parseBoolean(xpp.nextText()));
    }
  }
 else   if (name.equalsIgnoreCase(QUERY_LOCATOR)) {
    if (!inRecord) {
      String ql=xpp.nextText();
      result.setQueryLocator(ql);
    }
  }
 else   if (name.equalsIgnoreCase(SIZE)) {
    if (!inRecord) {
      result.setSize(Integer.parseInt(xpp.nextText()));
    }
  }
 else   if (name.equalsIgnoreCase(RECORDS)) {
    if (!inRecord) {
      currentSObject=new SObject();
      inRecord=true;
    }
  }
 else   if (name.equalsIgnoreCase(TYPE)) {
    if (inRecord) {
      String type=xpp.nextText();
      if ((prevType == null) || (type.equals(prevType))) {
        currentSObject.setType(type);
        prevType=type;
      }
    }
  }
 else   if (name.equalsIgnoreCase(ID)) {
    if (inRecord) {
      if (prevType.equals(currentSObject.getType())) {
        String Id=xpp.nextText();
        if (Id != null && Id != ""String_Node_Str"" && Id != ""String_Node_Str"") {
          currentSObject.setField(getRelationshipPrefix(parentChildrelationships) + ID,Id);
        }
      }
    }
  }
 else   if (!(currentSObject == null)) {
    if (xpp.getPrefix().equals(""String_Node_Str"")) {
      if (xpp.getAttributeCount() == 0) {
        if ((inRecord) && (prevType.equals(currentSObject.getType()))) {
          String value=xpp.nextText();
          currentSObject.setField(getRelationshipPrefix(parentChildrelationships) + name,value);
        }
      }
 else {
        if (xpp.getAttributeValue(null,""String_Node_Str"") != null && xpp.getAttributeValue(null,""String_Node_Str"").contains(""String_Node_Str""))         parentChildrelationships.push(xpp.getName());
      }
    }
  }
break;
case XmlPullParser.END_TAG:
name=xpp.getName();
System.out.println(""String_Node_Str"" + name);
if (name.equalsIgnoreCase(RECORDS)) {
if (currentSObject.getType() != null) {
result.getRecords().add(currentSObject);
inRecord=false;
}
}
 else if (name.equalsIgnoreCase(queryType)) {
done=true;
}
 else if (!parentChildrelationships.isEmpty()) {
String lastRel=(String)parentChildrelationships.peek();
if (name.equalsIgnoreCase(lastRel)) parentChildrelationships.pop();
}
break;
}
eventType=xpp.next();
}
}
 catch (XmlPullParserException xppe) {
throw new RuntimeException(xppe);
}
catch (IOException ioe) {
throw new RuntimeException(ioe);
}
return result;
}","public QueryResult parseQueryResponse(String response1,String queryType){
  try {
    XmlPullParserFactory factory=XmlPullParserFactory.newInstance();
    factory.setNamespaceAware(true);
    XmlPullParser xpp=factory.newPullParser();
    xpp.setInput(new StringReader(response1));
    int eventType=xpp.getEventType();
    boolean done=false;
    SObject currentSObject=null;
    boolean inRecord=false;
    String prevType=null;
    while (eventType != XmlPullParser.END_DOCUMENT && !done) {
      String name=null;
switch (eventType) {
case XmlPullParser.START_DOCUMENT:
        break;
case XmlPullParser.START_TAG:
      name=xpp.getName();
    System.out.println(""String_Node_Str"" + name);
  if (name.equalsIgnoreCase(DONE)) {
    if (!inRecord) {
      result.setDone(Boolean.parseBoolean(xpp.nextText()));
    }
  }
 else   if (name.equalsIgnoreCase(QUERY_LOCATOR)) {
    if (!inRecord) {
      String ql=xpp.nextText();
      result.setQueryLocator(ql);
    }
  }
 else   if (name.equalsIgnoreCase(SIZE)) {
    if (!inRecord) {
      result.setSize(Integer.parseInt(xpp.nextText()));
    }
  }
 else   if (name.equalsIgnoreCase(RECORDS)) {
    if (!inRecord) {
      currentSObject=new SObject();
      inRecord=true;
    }
  }
 else   if (name.equalsIgnoreCase(TYPE)) {
    if (inRecord) {
      String type=xpp.nextText();
      if ((prevType == null) || (type.equals(prevType))) {
        currentSObject.setType(type);
        prevType=type;
      }
    }
  }
 else   if (name.equalsIgnoreCase(ID)) {
    if (inRecord) {
      if (prevType.equals(currentSObject.getType())) {
        String Id=xpp.nextText();
        if (Id != null && !Id.equalsIgnoreCase(""String_Node_Str"") && !Id.equals(""String_Node_Str"")) {
          currentSObject.setField(getRelationshipPrefix(parentChildrelationships) + ID,Id);
        }
      }
    }
  }
 else   if (!(currentSObject == null)) {
    if (xpp.getPrefix().equals(""String_Node_Str"")) {
      if (xpp.getAttributeCount() == 0) {
        if ((inRecord) && (prevType.equals(currentSObject.getType()))) {
          String value=xpp.nextText();
          currentSObject.setField(getRelationshipPrefix(parentChildrelationships) + name,value);
        }
      }
 else {
        if (xpp.getAttributeValue(null,""String_Node_Str"") != null && xpp.getAttributeValue(null,""String_Node_Str"").contains(""String_Node_Str""))         parentChildrelationships.push(xpp.getName());
      }
    }
  }
break;
case XmlPullParser.END_TAG:
name=xpp.getName();
System.out.println(""String_Node_Str"" + name);
if (name.equalsIgnoreCase(RECORDS)) {
if (currentSObject.getType() != null) {
result.getRecords().add(currentSObject);
inRecord=false;
}
}
 else if (name.equalsIgnoreCase(queryType)) {
done=true;
}
 else if (!parentChildrelationships.isEmpty()) {
String lastRel=(String)parentChildrelationships.peek();
if (name.equalsIgnoreCase(lastRel)) parentChildrelationships.pop();
}
break;
}
eventType=xpp.next();
}
}
 catch (XmlPullParserException xppe) {
throw new RuntimeException(xppe);
}
catch (IOException ioe) {
throw new RuntimeException(ioe);
}
return result;
}"
46614,"public void onComplete(final Object rresponse){
  ArrayList<SObject> records=(ArrayList<SObject>)rresponse;
  int index=1;
  String recordType=null;
  String id=null;
  HashMap<String,String> fields=null;
  if (records.size() == 0) {
    final String display=""String_Node_Str"";
    SforceUpdate.this.runOnUiThread(new Runnable(){
      public void run(){
        mText.setText(display);
      }
    }
);
  }
 else {
    for (    SObject hm : records) {
      recordType=hm.getType();
      id=hm.getId();
      fields=hm.getFields();
      index++;
    }
    Intent intent=new Intent();
    int requestCode=0;
    if (recordType.equals(""String_Node_Str"")) {
    }
 else     if (recordType.equals(""String_Node_Str"")) {
      intent.setClass(context,com.sforce.android.sample.SforceUpdateContact.class);
      requestCode=0;
      intent.putExtra(""String_Node_Str"",recordType);
      intent.putExtra(""String_Node_Str"",fields.get(""String_Node_Str""));
      intent.putExtra(""String_Node_Str"",fields.get(""String_Node_Str""));
      intent.putExtra(""String_Node_Str"",id);
      startActivityForResult(intent,requestCode);
    }
 else     if (recordType.equals(""String_Node_Str"")) {
      intent.setClass(context,com.sforce.android.sample.SforceUpdateAccount.class);
      intent.putExtra(""String_Node_Str"",recordType);
      intent.putExtra(""String_Node_Str"",fields.get(""String_Node_Str""));
      intent.putExtra(""String_Node_Str"",fields.get(""String_Node_Str""));
      intent.putExtra(""String_Node_Str"",fields.get(""String_Node_Str""));
      intent.putExtra(""String_Node_Str"",id);
      requestCode=1;
      startActivityForResult(intent,requestCode);
    }
  }
}","public void onComplete(final Object rresponse){
  ArrayList<SObject> records=(ArrayList<SObject>)rresponse;
  int index=1;
  String recordType=null;
  String id=null;
  SObject obj=null;
  if (records.size() == 0) {
    final String display=""String_Node_Str"";
    SforceUpdate.this.runOnUiThread(new Runnable(){
      public void run(){
        mText.setText(display);
      }
    }
);
  }
 else {
    for (    SObject hm : records) {
      recordType=hm.getType();
      id=hm.getId();
      obj=hm;
      index++;
    }
    Intent intent=new Intent();
    int requestCode=0;
    if (recordType.equals(""String_Node_Str"")) {
    }
 else     if (recordType.equals(""String_Node_Str"")) {
      intent.setClass(context,com.sforce.android.sample.SforceUpdateContact.class);
      requestCode=0;
      intent.putExtra(""String_Node_Str"",recordType);
      intent.putExtra(""String_Node_Str"",obj.getField(""String_Node_Str""));
      intent.putExtra(""String_Node_Str"",obj.getField(""String_Node_Str""));
      intent.putExtra(""String_Node_Str"",id);
      startActivityForResult(intent,requestCode);
    }
 else     if (recordType.equals(""String_Node_Str"")) {
      intent.setClass(context,com.sforce.android.sample.SforceUpdateAccount.class);
      intent.putExtra(""String_Node_Str"",recordType);
      intent.putExtra(""String_Node_Str"",obj.getField(""String_Node_Str""));
      intent.putExtra(""String_Node_Str"",obj.getField(""String_Node_Str""));
      intent.putExtra(""String_Node_Str"",obj.getField(""String_Node_Str""));
      intent.putExtra(""String_Node_Str"",id);
      requestCode=1;
      startActivityForResult(intent,requestCode);
    }
  }
}"
46615,"public SObject(String type,ArrayList<String> fieldsToNull,String id,HashMap<String,String> fields){
  this.type=type;
  this.fieldsToNull=fieldsToNull;
  this.id=id;
  this.fields=fields;
}","public SObject(String type,ArrayList<String> fieldsToNull,HashMap<String,String> fields){
  this.type=type;
  this.fieldsToNull=fieldsToNull;
  this.fields=fields;
}"
46616,"public void setId(java.lang.String id){
  this.id=id;
}","public void setId(java.lang.String id){
  setField(""String_Node_Str"",id);
}"
46617,"public java.lang.String getId(){
  return id;
}","public java.lang.String getId(){
  String i=this.fields.get(""String_Node_Str"");
  if (i == null) {
    i=this.fields.get(""String_Node_Str"");
    if (i == null)     i=this.fields.get(""String_Node_Str"");
  }
  return i;
}"
46618,"public String toString(){
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(type).append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"");
  Set<String> fieldSet=fields.keySet();
  Iterator<String> itrFields=fieldSet.iterator();
  while (itrFields.hasNext()) {
    String fieldName=itrFields.next();
    sb.append(fieldName).append(""String_Node_Str"").append(fields.get(fieldName)).append(""String_Node_Str"");
  }
  return sb.toString();
}","public String toString(){
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(type).append(""String_Node_Str"").append(""String_Node_Str"").append(getId()).append(""String_Node_Str"");
  Set<String> fieldSet=fields.keySet();
  Iterator<String> itrFields=fieldSet.iterator();
  while (itrFields.hasNext()) {
    String fieldName=itrFields.next();
    sb.append(fieldName).append(""String_Node_Str"").append(fields.get(fieldName)).append(""String_Node_Str"");
  }
  return sb.toString();
}"
46619,"/** 
 * Calculate the affine transform from scanStrip to a single frame (frame  rotated to straight position, top left corner translated to (0,0)
 * @param frame
 * @return
 */
AffineTransform getFrameXform(int frame){
  int f1=frame - 1;
  int f2=frame + 1;
  int x1=(f1 >= 0) ? perforations.get(f1).x : perforations.get(0).x;
  int x2=(f2 < perforations.size()) ? perforations.get(f2).x : perforations.get(perforations.size() - 1).x;
  int y1=(f1 >= 0) ? perforations.get(f1).y : perforations.get(0).y;
  int y2=(f2 < perforations.size()) ? perforations.get(f2).y : perforations.get(perforations.size() - 1).y;
  double rot=Math.atan2((double)x2 - x1,(double)(y2 - y1));
  AffineTransform xform=new AffineTransform();
  xform.translate(0,FRAME_HEIGHT / 2);
  xform.rotate(rot);
  xform.translate(-perforations.get(framePerf).x,-perforations.get(framePerf).y);
  return xform;
}","/** 
 * Calculate the affine transform from scanStrip to a single frame (frame  rotated to straight position, top left corner translated to (0,0)
 * @param frame
 * @return
 */
AffineTransform getFrameXform(int frame){
  int f1=frame - 1;
  int f2=frame + 1;
  int x1=(f1 >= 0) ? perforations.get(f1).x : perforations.get(0).x;
  int x2=(f2 < perforations.size()) ? perforations.get(f2).x : perforations.get(perforations.size() - 1).x;
  int y1=(f1 >= 0) ? perforations.get(f1).y : perforations.get(0).y;
  int y2=(f2 < perforations.size()) ? perforations.get(f2).y : perforations.get(perforations.size() - 1).y;
  double rot=Math.atan2((double)x2 - x1,(double)(y2 - y1));
  AffineTransform xform=new AffineTransform();
  xform.translate(0,FRAME_HEIGHT / 2);
  xform.rotate(rot);
  xform.translate(-perforations.get(frame).x,-perforations.get(frame).y);
  return xform;
}"
46620,"/** 
 * Creates a new NxjFilmMover
 * @throws fi.kaimio.moviescan.FilmMoverException If no connected film mover was found or other error occurred.
 */
public NxjFilmMover() throws FilmMoverException {
  nxtComm=NXTCommFactory.createNXTComm(NXTCommFactory.USB);
  NXTInfo[] nxtInfos=null;
  log.fine(""String_Node_Str"");
  try {
    nxtInfos=nxtComm.search(null,NXTCommFactory.USB);
  }
 catch (  NXTCommException e) {
    log.warning(""String_Node_Str"");
  }
  if (nxtInfos.length == 0) {
    log.warning(""String_Node_Str"");
    throw new FilmMoverException(""String_Node_Str"");
  }
  try {
    nxtInfo=nxtInfos[0];
    nxtComm.open(nxtInfo);
  }
 catch (  NXTCommException e) {
    log.warning(""String_Node_Str"");
    throw new FilmMoverException(""String_Node_Str"" + e.getMessage(),e);
  }
  InputStream is=nxtComm.getInputStream();
  OutputStream os=nxtComm.getOutputStream();
  inDat=new DataInputStream(is);
  outDat=new DataOutputStream(os);
}","/** 
 * Creates a new NxjFilmMover
 * @throws fi.kaimio.moviescan.FilmMoverException If no connected film mover was found or other error occurred.
 */
public NxjFilmMover() throws FilmMoverException {
  nxtComm=NXTCommFactory.createNXTComm(NXTCommFactory.USB);
  NXTInfo[] nxtInfos=null;
  log.fine(""String_Node_Str"");
  try {
    nxtInfos=nxtComm.search(null,NXTCommFactory.USB);
  }
 catch (  NXTCommException e) {
    log.warning(""String_Node_Str"");
  }
  if (nxtInfos == null || nxtInfos.length == 0) {
    log.warning(""String_Node_Str"");
    throw new FilmMoverException(""String_Node_Str"");
  }
  try {
    nxtInfo=nxtInfos[0];
    nxtComm.open(nxtInfo);
  }
 catch (  NXTCommException e) {
    log.warning(""String_Node_Str"");
    throw new FilmMoverException(""String_Node_Str"" + e.getMessage(),e);
  }
  InputStream is=nxtComm.getInputStream();
  OutputStream os=nxtComm.getOutputStream();
  inDat=new DataInputStream(is);
  outDat=new DataOutputStream(os);
}"
46621,"/** 
 * Get the perforation series, smoother and with interpolated missing frames
 * @param maxY Maximum Y coordinate of the scanned strip
 * @return List of perforations
 */
public List<Perforation> getPerforations(int maxY){
  List<Perforation> ret=new ArrayList<Perforation>();
  Perforation lastPerf=null;
  for (  Perforation p : perforations) {
    if (lastPerf != null) {
      if (p.y - lastPerf.y > PERF_DISTANCE + Y_TOLERANCE) {
        int addCount=(p.y - lastPerf.y + 2 * Y_TOLERANCE) / PERF_DISTANCE;
        int dy=(p.y - lastPerf.y) / addCount;
        int dx=(p.x - lastPerf.x) / addCount;
        System.out.println(String.format(""String_Node_Str"",addCount,dx,dy));
        for (int n=1; n < addCount; n++) {
          Perforation newP=new Perforation();
          newP.x=lastPerf.x + n * dx;
          newP.y=lastPerf.y + n * dy;
          newP.series=this;
          ret.add(newP);
          System.out.println(String.format(""String_Node_Str"",newP.x,newP.y));
        }
      }
    }
    ret.add(p);
    System.out.println(String.format(""String_Node_Str"",p.x,p.y));
    lastPerf=p;
  }
  if (ret.get(0).y > PERF_DISTANCE && ret.size() > 1) {
    int dx=ret.get(1).x - ret.get(0).x;
    int dy=(ret.get(ret.size() - 1).y - ret.get(0).y) / (ret.size() - 1);
    int y=ret.get(0).y - dy;
    int x=ret.get(0).x - dx;
    System.out.println(String.format(""String_Node_Str"",dx,dy,x,y));
    while (y > 0) {
      Perforation p=new Perforation();
      p.x=x;
      p.y=y;
      x-=dx;
      y-=dy;
      ret.add(0,p);
    }
  }
  for (int n=0; n < ret.size(); n++) {
    int dx=0;
    int ddx=0;
    int ddy=0;
    if (n > 0) {
      dx=ret.get(n).x - ret.get(n - 1).x;
    }
    if (n > 0 && n < ret.size() - 1) {
      ddx=ret.get(n + 1).x + ret.get(n - 1).x - 2 * ret.get(n).x;
      ddy=ret.get(n + 1).y + ret.get(n - 1).y - 2 * ret.get(n).y;
    }
    ret.get(n).x+=ddx / 2;
    ret.get(n).y+=ddy / 2;
  }
  return ret;
}","/** 
 * Get the perforation series, smoother and with interpolated missing frames
 * @param maxY Maximum Y coordinate of the scanned strip
 * @return List of perforations
 */
public List<Perforation> getPerforations(int maxY){
  List<Perforation> ret=new ArrayList<Perforation>();
  Perforation lastPerf=null;
  for (  Perforation p : perforations) {
    if (lastPerf != null) {
      if (p.y - lastPerf.y > PERF_DISTANCE + Y_TOLERANCE) {
        int addCount=(p.y - lastPerf.y + 2 * Y_TOLERANCE) / PERF_DISTANCE;
        int dy=(p.y - lastPerf.y) / addCount;
        int dx=(p.x - lastPerf.x) / addCount;
        System.out.println(String.format(""String_Node_Str"",addCount,dx,dy));
        for (int n=1; n < addCount; n++) {
          Perforation newP=new Perforation();
          newP.x=lastPerf.x + n * dx;
          newP.y=lastPerf.y + n * dy;
          ret.add(newP);
          System.out.println(String.format(""String_Node_Str"",newP.x,newP.y));
        }
      }
    }
    ret.add(p);
    System.out.println(String.format(""String_Node_Str"",p.x,p.y));
    lastPerf=p;
  }
  if (ret.get(0).y > PERF_DISTANCE && ret.size() > 1) {
    int dx=ret.get(1).x - ret.get(0).x;
    int dy=(ret.get(ret.size() - 1).y - ret.get(0).y) / (ret.size() - 1);
    int y=ret.get(0).y - dy;
    int x=ret.get(0).x - dx;
    System.out.println(String.format(""String_Node_Str"",dx,dy,x,y));
    while (y > 0) {
      Perforation p=new Perforation();
      p.x=x;
      p.y=y;
      x-=dx;
      y-=dy;
      ret.add(0,p);
    }
  }
  for (int n=0; n < ret.size(); n++) {
    int dx=0;
    int ddx=0;
    int ddy=0;
    if (n > 0) {
      dx=ret.get(n).x - ret.get(n - 1).x;
    }
    if (n > 0 && n < ret.size() - 1) {
      ddx=ret.get(n + 1).x + ret.get(n - 1).x - 2 * ret.get(n).x;
      ddy=ret.get(n + 1).y + ret.get(n - 1).y - 2 * ret.get(n).y;
    }
    ret.get(n).x+=ddx / 2;
    ret.get(n).y+=ddy / 2;
  }
  return ret;
}"
46622,"/** 
 * Add a perforation to the series if it fits. Perforation is considered a fit  if it is at the right distance (multiple of the distance between perforations) from the previous one.
 * @param p The perforation that may be added
 * @return true if the perforation fits, false otherwise.
 */
public boolean addIfFits(Perforation p){
  boolean isFit=false;
  if (perforations.size() == 0) {
    isFit=true;
    perforations.add(p);
    p.series=this;
    missCount=p.y / PERF_DISTANCE;
    lastY=p.y;
    lastX=p.x;
  }
 else {
    int dy=p.y - lastY;
    int numFrames=(int)Math.round((double)dy / PERF_DISTANCE);
    int devPixels=Math.abs(dy - PERF_DISTANCE * numFrames);
    double devRel=(double)devPixels / (PERF_DISTANCE * numFrames);
    int res=dy % PERF_DISTANCE;
    if (numFrames > 0 && (devRel < Y_TOL)) {
      isFit=true;
      perforations.add(p);
      p.series=this;
      missCount+=numFrames - 1;
      lastY=p.y;
      lastX2=lastX;
      lastX=p.x;
      if (lastX2 > 0) {
        int ddx=Math.abs(lastX2 + p.x - 2 * lastX);
        maxDdx=Math.max(ddx,maxDdx);
      }
    }
  }
  return isFit;
}","/** 
 * Add a perforation to the series if it fits. Perforation is considered a fit  if it is at the right distance (multiple of the distance between perforations) from the previous one.
 * @param p The perforation that may be added
 * @return true if the perforation fits, false otherwise.
 */
public boolean addIfFits(Perforation p){
  boolean isFit=false;
  if (perforations.size() == 0) {
    isFit=true;
    perforations.add(p);
    missCount=p.y / PERF_DISTANCE;
    lastY=p.y;
    lastX=p.x;
  }
 else {
    int dy=p.y - lastY;
    int numFrames=(int)Math.round((double)dy / PERF_DISTANCE);
    int devPixels=Math.abs(dy - PERF_DISTANCE * numFrames);
    double devRel=(double)devPixels / (PERF_DISTANCE * numFrames);
    if (numFrames > 0 && (devRel < Y_TOL)) {
      isFit=true;
      perforations.add(p);
      missCount+=numFrames - 1;
      lastY=p.y;
      lastX2=lastX;
      lastX=p.x;
      if (lastX2 > 0) {
        int ddx=Math.abs(lastX2 + p.x - 2 * lastX);
        maxDdx=Math.max(ddx,maxDdx);
      }
    }
  }
  return isFit;
}"
46623,"private void saveStripInfo(ScanStrip strip,File file){
  try {
    StreamResult streamResult=new StreamResult(file);
    SAXTransformerFactory tf=(SAXTransformerFactory)SAXTransformerFactory.newInstance();
    TransformerHandler hd=tf.newTransformerHandler();
    Transformer serializer=hd.getTransformer();
    serializer.setOutputProperty(OutputKeys.ENCODING,""String_Node_Str"");
    serializer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    hd.setResult(streamResult);
    hd.startDocument();
    strip.writeXml(hd);
    hd.endDocument();
  }
 catch (  SAXException ex) {
    log.error(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ ex.getMessage());
  }
catch (  TransformerConfigurationException ex) {
    log.error(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ ex.getMessage());
  }
}","private void saveStripInfo(ScanStrip strip,File file){
  try {
    StreamResult streamResult=new StreamResult(file);
    SAXTransformerFactory tf=(SAXTransformerFactory)SAXTransformerFactory.newInstance();
    TransformerHandler hd=tf.newTransformerHandler();
    Transformer serializer=hd.getTransformer();
    serializer.setOutputProperty(OutputKeys.ENCODING,""String_Node_Str"");
    serializer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    hd.setResult(streamResult);
    hd.startDocument();
    strip.writeXml(hd);
    hd.endDocument();
  }
 catch (  SAXException ex) {
    log.severe(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ ex.getMessage());
  }
catch (  TransformerConfigurationException ex) {
    log.severe(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ ex.getMessage());
  }
}"
46624,"/** 
 * Save the project info in project directory (in file project.xml)
 * @throws IOException if the project cannot be saved
 */
public void save() throws IOException {
  File f=File.createTempFile(""String_Node_Str"",""String_Node_Str"",dir);
  try {
    StreamResult streamResult=new StreamResult(f);
    SAXTransformerFactory tf=(SAXTransformerFactory)SAXTransformerFactory.newInstance();
    TransformerHandler hd=tf.newTransformerHandler();
    Transformer serializer=hd.getTransformer();
    serializer.setOutputProperty(OutputKeys.ENCODING,""String_Node_Str"");
    serializer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    hd.setResult(streamResult);
    hd.startDocument();
    writeXml(hd);
    hd.endDocument();
  }
 catch (  Exception e) {
    throw new IOException(""String_Node_Str"" + e.getMessage(),e);
  }
  f.renameTo(new File(dir,""String_Node_Str""));
}","/** 
 * Save the project info in project directory (in file project.xml)
 * @throws IOException if the project cannot be saved
 */
public void save() throws IOException {
  File f=File.createTempFile(""String_Node_Str"",""String_Node_Str"",dir);
  try {
    StreamResult streamResult=new StreamResult(f);
    SAXTransformerFactory tf=(SAXTransformerFactory)SAXTransformerFactory.newInstance();
    TransformerHandler hd=tf.newTransformerHandler();
    Transformer serializer=hd.getTransformer();
    serializer.setOutputProperty(OutputKeys.ENCODING,""String_Node_Str"");
    serializer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    hd.setResult(streamResult);
    hd.startDocument();
    writeXml(hd);
    hd.endDocument();
  }
 catch (  Exception e) {
    throw new IOException(""String_Node_Str"" + e.getMessage(),e);
  }
  if (!f.renameTo(new File(dir,""String_Node_Str""))) {
    log.warning(""String_Node_Str"");
  }
}"
46625,"/** 
 * Add a scan strip to the project, saving it to image file if it is not yet  saved.
 * @param strip
 */
public void addScanStrip(ScanStrip strip){
  if (strip.getName() == null) {
    File scanDir=new File(dir,""String_Node_Str"");
    if (!scanDir.exists()) {
      scanDir.mkdir();
    }
    int num=getLastScanFile() + 1;
    String name=String.format(""String_Node_Str"",num);
    RenderedImage img=strip.stripImage;
    File imgFile=new File(scanDir,name + ""String_Node_Str"");
    saveImage(img,imgFile);
    saveStripInfo(strip,new File(scanDir,name + ""String_Node_Str""));
    strip.setName(name);
    strip.setFile(imgFile);
  }
  loadedStrips.put(strip.getName(),strip);
  scene.addFrames(strip,0,strip.getFrameCount());
}","/** 
 * Add a scan strip to the project, saving it to image file if it is not yet  saved.
 * @param strip
 */
public void addScanStrip(ScanStrip strip){
  if (strip.getName() == null) {
    File scanDir=new File(dir,""String_Node_Str"");
    if (!scanDir.exists()) {
      if (!scanDir.mkdir()) {
        log.severe(""String_Node_Str"");
        return;
      }
    }
    int num=getLastScanFile() + 1;
    String name=String.format(""String_Node_Str"",num);
    RenderedImage img=strip.stripImage;
    File imgFile=new File(scanDir,name + ""String_Node_Str"");
    saveImage(img,imgFile);
    saveStripInfo(strip,new File(scanDir,name + ""String_Node_Str""));
    strip.setName(name);
    strip.setFile(imgFile);
  }
  loadedStrips.put(strip.getName(),strip);
  scene.addFrames(strip,0,strip.getFrameCount());
}"
46626,"/** 
 * Get project object for given directory. <p> If dir is an existing directory with valid project.xml file in it, laod the  project and return it. If there is no project in the directory, return a  new empty project.
 * @param dir Project directory
 * @return The project in directory or new project if no project exists there
 */
static public Project getProject(File dir){
  File projectFile=new File(dir,""String_Node_Str"");
  Project ret=null;
  if (projectFile.exists()) {
    Digester d=new Digester();
    d.push(""String_Node_Str"",dir);
    d.addRuleSet(new ProjectRuleSet(""String_Node_Str""));
    try {
      ret=(Project)d.parse(projectFile);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"" + projectFile.getPath() + ""String_Node_Str""+ e.getMessage());
    }
catch (    SAXException e) {
      log.error(""String_Node_Str"" + projectFile.getPath() + ""String_Node_Str""+ e.getMessage());
    }
  }
 else {
    try {
      dir.mkdirs();
      ret=new Project(dir);
      ret.save();
    }
 catch (    IOException ex) {
      return null;
    }
  }
  return ret;
}","/** 
 * Get project object for given directory. <p> If dir is an existing directory with valid project.xml file in it, laod the  project and return it. If there is no project in the directory, return a  new empty project.
 * @param dir Project directory
 * @return The project in directory or new project if no project exists there
 */
static public Project getProject(File dir){
  File projectFile=new File(dir,""String_Node_Str"");
  Project ret=null;
  if (projectFile.exists()) {
    Digester d=new Digester();
    d.push(""String_Node_Str"",dir);
    d.addRuleSet(new ProjectRuleSet(""String_Node_Str""));
    try {
      ret=(Project)d.parse(projectFile);
    }
 catch (    IOException e) {
      log.severe(""String_Node_Str"" + projectFile.getPath() + ""String_Node_Str""+ e.getMessage());
    }
catch (    SAXException e) {
      log.severe(""String_Node_Str"" + projectFile.getPath() + ""String_Node_Str""+ e.getMessage());
    }
  }
 else {
    try {
      if (!dir.mkdirs()) {
        log.warning(""String_Node_Str"");
        return null;
      }
      ret=new Project(dir);
      ret.save();
    }
 catch (    IOException ex) {
      return null;
    }
  }
  return ret;
}"
46627,"private void saveImage(RenderedImage img,File file){
  String ftype=""String_Node_Str"";
  String imageFname=file.getName();
  int extIndex=imageFname.lastIndexOf(""String_Node_Str"") + 1;
  if (extIndex > 0) {
    ftype=imageFname.substring(extIndex);
  }
  ImageWriter writer=null;
  Iterator iter=ImageIO.getImageWritersBySuffix(ftype);
  writer=(ImageWriter)iter.next();
  if (writer != null) {
    ImageOutputStream ios=null;
    try {
      ios=ImageIO.createImageOutputStream(file);
      writer.setOutput(ios);
      ImageWriteParam param=writer.getDefaultWriteParam();
      writer.write(null,new IIOImage(img,null,null),param);
      ios.flush();
    }
 catch (    IOException ex) {
      log.error(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      if (ios != null) {
        try {
          ios.close();
        }
 catch (        IOException e) {
          log.error(""String_Node_Str"" + e.getMessage());
        }
      }
      writer.dispose();
    }
  }
}","private void saveImage(RenderedImage img,File file){
  String ftype=""String_Node_Str"";
  String imageFname=file.getName();
  int extIndex=imageFname.lastIndexOf(""String_Node_Str"") + 1;
  if (extIndex > 0) {
    ftype=imageFname.substring(extIndex);
  }
  ImageWriter writer=null;
  Iterator iter=ImageIO.getImageWritersBySuffix(ftype);
  writer=(ImageWriter)iter.next();
  if (writer != null) {
    ImageOutputStream ios=null;
    try {
      ios=ImageIO.createImageOutputStream(file);
      writer.setOutput(ios);
      ImageWriteParam param=writer.getDefaultWriteParam();
      writer.write(null,new IIOImage(img,null,null),param);
      ios.flush();
    }
 catch (    IOException ex) {
      log.severe(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      if (ios != null) {
        try {
          ios.close();
        }
 catch (        IOException e) {
          log.severe(""String_Node_Str"" + e.getMessage());
        }
      }
      writer.dispose();
    }
  }
}"
46628,"/** 
 * Get the nth frame of the scan
 * @param n frame to get
 * @return RemderedImage based on the sanned strip, rotated and cropped according to frame dimesions. 
 */
public RenderedImage getFrame(int n){
  if (perforations == null) {
    findPerforations();
  }
  AffineTransform xform=getFrameXform(n);
  RenderedOp rotated=AffineDescriptor.create(stripImage,xform,Interpolation.getInstance(Interpolation.INTERP_BICUBIC),null,null);
  int minx=rotated.getMinX();
  int miny=rotated.getMinY();
  int rw=rotated.getWidth();
  int rh=rotated.getHeight();
  ImageLayout layout=new ImageLayout();
  layout.setColorModel(stripImage.getColorModel());
  RenderingHints hints=new RenderingHints(JAI.KEY_IMAGE_LAYOUT,layout);
  RenderedOp background=ConstantDescriptor.create((float)FRAME_WIDTH,(float)FRAME_HEIGHT,new Short[]{0,0,0},null);
  RenderedOp frame=OverlayDescriptor.create(background,rotated,hints);
  return frame;
}","/** 
 * Get the nth frame of the scan
 * @param n frame to get
 * @return RemderedImage based on the sanned strip, rotated and cropped according to frame dimesions. 
 */
public RenderedImage getFrame(int n){
  if (perforations == null) {
    findPerforations();
  }
  AffineTransform xform=getFrameXform(n);
  RenderedOp rotated=AffineDescriptor.create(stripImage,xform,Interpolation.getInstance(Interpolation.INTERP_BICUBIC),null,null);
  ImageLayout layout=new ImageLayout();
  layout.setColorModel(stripImage.getColorModel());
  RenderingHints hints=new RenderingHints(JAI.KEY_IMAGE_LAYOUT,layout);
  RenderedOp background=ConstantDescriptor.create((float)FRAME_WIDTH,(float)FRAME_HEIGHT,new Short[]{0,0,0},null);
  RenderedOp frame=OverlayDescriptor.create(background,rotated,hints);
  return frame;
}"
46629,"/** 
 * Try to find perforation corners using (modified) Hough transform. After the hough transform, matching pairs of top and bottom corners are found and clustered into pointClusterws list.
 */
void houghTransform(){
  KernelJAI sxKernel=new KernelJAI(3,3,new float[]{-1.0f,0.0f,1.0f,-2.0f,0.0f,2.0f,-1.0f,0.0f,1.0f});
  KernelJAI syKernel=new KernelJAI(3,3,new float[]{-1.0f,-2.0f,-1.0f,0.0f,0.0f,0.0f,1.0f,2.0f,1.0f});
  RenderedImage dblImg=FormatDescriptor.create(stripImage,DataBuffer.TYPE_DOUBLE,null);
  RenderedImage sxImg=ConvolveDescriptor.create(dblImg,sxKernel,null);
  RenderedImage syImg=ConvolveDescriptor.create(dblImg,syKernel,null);
  SampleModel sm=sxImg.getSampleModel();
  int nbands=sm.getNumBands();
  double[] sxPixel=new double[nbands];
  double[] syPixel=new double[nbands];
  Rectangle perfArea=new Rectangle(0,0,stripImage.getWidth() / 4,stripImage.getHeight());
  RectIter sxIter=RectIterFactory.create(sxImg,perfArea);
  RectIter syIter=RectIterFactory.create(syImg,perfArea);
  int width=(int)perfArea.getWidth();
  int height=(int)perfArea.getHeight();
  int accumHeight=(int)maxCornerRadius + 2;
  int[][] startAccum=new int[(int)(maxCornerRadius - minCornerRadius)][width * accumHeight];
  int[][] endAccum=new int[(int)(maxCornerRadius - minCornerRadius)][width * accumHeight];
  byte[] imageDataSingleArray=new byte[width * height];
  DataBufferByte dbuffer=new DataBufferByte(imageDataSingleArray,width * height);
  SampleModel sampleModel=RasterFactory.createBandedSampleModel(DataBuffer.TYPE_BYTE,width,height,1);
  ColorModel colorModel=PlanarImage.createColorModel(sampleModel);
  Raster raster=RasterFactory.createWritableRaster(sampleModel,dbuffer,new Point(0,0));
  List<Point> startCorners=new ArrayList<Point>();
  List<Point> endCorners=new ArrayList<Point>();
  int y=0;
  int maxVal=0;
  if (analysisListener != null) {
    analysisListener.scanAnalysisProgress(0,height);
  }
  while (!sxIter.nextLineDone() && !syIter.nextLineDone()) {
    if (y % 1000 == 0 && y > 0) {
      System.out.println(""String_Node_Str"" + y + ""String_Node_Str"");
    }
    sxIter.startPixels();
    syIter.startPixels();
    int x=0;
    while (!sxIter.nextPixelDone() && !syIter.nextPixelDone()) {
      sxIter.getPixel(sxPixel);
      syIter.getPixel(syPixel);
      double isq=sxPixel[0] * sxPixel[0] + syPixel[0] * syPixel[0];
      if (isq > EDGE_MIN_GRADIENT * EDGE_MIN_GRADIENT) {
        if (syPixel[0] <= 0 && sxPixel[0] >= 0) {
          double intensity=Math.sqrt(isq);
          for (double r=minCornerRadius; r < maxCornerRadius; r+=1.0) {
            double cx=(double)x - r * sxPixel[0] / intensity;
            double cy=(double)y - r * syPixel[0] / intensity;
            if (cx > 0.0) {
              int accumLine=(int)cy % accumHeight;
              startAccum[(int)(r - minCornerRadius)][(int)cx + width * accumLine]++;
              if (startAccum[(int)(r - minCornerRadius)][(int)cx + width * accumLine] > maxVal) {
                maxVal=startAccum[(int)(r - minCornerRadius)][(int)cx + width * accumLine];
              }
            }
          }
        }
        if (syPixel[0] >= 0 && sxPixel[0] >= 0) {
          double intensity=Math.sqrt(isq);
          for (double r=minCornerRadius; r < maxCornerRadius; r+=1.0) {
            double cx=(double)x - r * sxPixel[0] / intensity;
            double cy=(double)y - r * syPixel[0] / intensity;
            if (cx > 0.0 && cy > 0.0) {
              int accumLine=(int)cy % accumHeight;
              endAccum[(int)(r - minCornerRadius)][(int)cx + width * accumLine]++;
              if (endAccum[(int)(r - minCornerRadius)][(int)cx + width * accumLine] > maxVal) {
                maxVal=endAccum[(int)(r - minCornerRadius)][(int)cx + width * accumLine];
              }
            }
          }
        }
      }
      x++;
    }
    y++;
    int y2=y - accumHeight;
    int l=y % accumHeight;
    if (y2 > 0) {
      for (int n=0; n < perfArea.getWidth(); n++) {
        for (int r=0; r < (int)(maxCornerRadius - minCornerRadius); r++) {
          if (startAccum[r][n + width * l] >= CORNER_MIN_HOUGH) {
            int val=startAccum[r][n + width * l];
            if (val == getLocalMaxima(startAccum,r,n,y,width)) {
              startCorners.add(new Point(n,y));
              System.out.println(String.format(""String_Node_Str"",val,r,n,y));
            }
          }
          if (endAccum[r][n + width * l] > CORNER_MIN_HOUGH) {
            int val=endAccum[r][n + width * l];
            if (val == getLocalMaxima(endAccum,r,n,y2,width)) {
              endCorners.add(new Point(n,y2));
              System.out.println(String.format(""String_Node_Str"",val,r,n,y2));
            }
          }
        }
      }
    }
    for (int n=0; n < perfArea.getWidth(); n++) {
      for (int r=0; r < (int)(maxCornerRadius - minCornerRadius); r++) {
        startAccum[r][n + width * (y % accumHeight)]=0;
        endAccum[r][n + width * (y % accumHeight)]=0;
      }
    }
    if ((y % 100 == 1) && analysisListener != null) {
      analysisListener.scanAnalysisProgress(y - 1,height);
    }
  }
  if (analysisListener != null) {
    analysisListener.scanAnalysisProgress(height,height);
  }
  for (  Point sp : startCorners) {
    for (    Point ep : endCorners) {
      if (ep.y - sp.y > CC_MAX_DIST) {
        break;
      }
      if (Math.abs(ep.x - sp.x) < 10 && ep.y - sp.y > CC_MIN_DIST) {
        Perforation p=new Perforation();
        p.x=(ep.x + sp.x) >> 1;
        p.y=(ep.y + sp.y) >> 1;
        addPointToCluster(p.x,p.y);
      }
    }
  }
  System.out.println(String.format(""String_Node_Str"",pointClusters.size()));
  for (  PointCluster c : pointClusters) {
    System.out.println(String.format(""String_Node_Str"",c.getCentroidX(),c.getCentroidY(),c.getPointCount()));
  }
}","/** 
 * Try to find perforation corners using (modified) Hough transform. After the hough transform, matching pairs of top and bottom corners are found and clustered into pointClusterws list.
 */
void houghTransform(){
  KernelJAI sxKernel=new KernelJAI(3,3,new float[]{-1.0f,0.0f,1.0f,-2.0f,0.0f,2.0f,-1.0f,0.0f,1.0f});
  KernelJAI syKernel=new KernelJAI(3,3,new float[]{-1.0f,-2.0f,-1.0f,0.0f,0.0f,0.0f,1.0f,2.0f,1.0f});
  RenderedImage dblImg=FormatDescriptor.create(stripImage,DataBuffer.TYPE_DOUBLE,null);
  RenderedImage sxImg=ConvolveDescriptor.create(dblImg,sxKernel,null);
  RenderedImage syImg=ConvolveDescriptor.create(dblImg,syKernel,null);
  SampleModel sm=sxImg.getSampleModel();
  int nbands=sm.getNumBands();
  double[] sxPixel=new double[nbands];
  double[] syPixel=new double[nbands];
  Rectangle perfArea=new Rectangle(0,0,stripImage.getWidth() / 4,stripImage.getHeight());
  RectIter sxIter=RectIterFactory.create(sxImg,perfArea);
  RectIter syIter=RectIterFactory.create(syImg,perfArea);
  int width=(int)perfArea.getWidth();
  int height=(int)perfArea.getHeight();
  int accumHeight=(int)maxCornerRadius + 2;
  int[][] startAccum=new int[(int)(maxCornerRadius - minCornerRadius)][width * accumHeight];
  int[][] endAccum=new int[(int)(maxCornerRadius - minCornerRadius)][width * accumHeight];
  List<Point> startCorners=new ArrayList<Point>();
  List<Point> endCorners=new ArrayList<Point>();
  int y=0;
  int maxVal=0;
  if (analysisListener != null) {
    analysisListener.scanAnalysisProgress(0,height);
  }
  while (!sxIter.nextLineDone() && !syIter.nextLineDone()) {
    if (y % 1000 == 0 && y > 0) {
      System.out.println(""String_Node_Str"" + y + ""String_Node_Str"");
    }
    sxIter.startPixels();
    syIter.startPixels();
    int x=0;
    while (!sxIter.nextPixelDone() && !syIter.nextPixelDone()) {
      sxIter.getPixel(sxPixel);
      syIter.getPixel(syPixel);
      double isq=sxPixel[0] * sxPixel[0] + syPixel[0] * syPixel[0];
      if (isq > EDGE_MIN_GRADIENT * EDGE_MIN_GRADIENT) {
        if (syPixel[0] <= 0 && sxPixel[0] >= 0) {
          double intensity=Math.sqrt(isq);
          for (double r=minCornerRadius; r < maxCornerRadius; r+=1.0) {
            double cx=(double)x - r * sxPixel[0] / intensity;
            double cy=(double)y - r * syPixel[0] / intensity;
            if (cx > 0.0) {
              int accumLine=(int)cy % accumHeight;
              startAccum[(int)(r - minCornerRadius)][(int)cx + width * accumLine]++;
              if (startAccum[(int)(r - minCornerRadius)][(int)cx + width * accumLine] > maxVal) {
                maxVal=startAccum[(int)(r - minCornerRadius)][(int)cx + width * accumLine];
              }
            }
          }
        }
        if (syPixel[0] >= 0 && sxPixel[0] >= 0) {
          double intensity=Math.sqrt(isq);
          for (double r=minCornerRadius; r < maxCornerRadius; r+=1.0) {
            double cx=(double)x - r * sxPixel[0] / intensity;
            double cy=(double)y - r * syPixel[0] / intensity;
            if (cx > 0.0 && cy > 0.0) {
              int accumLine=(int)cy % accumHeight;
              endAccum[(int)(r - minCornerRadius)][(int)cx + width * accumLine]++;
              if (endAccum[(int)(r - minCornerRadius)][(int)cx + width * accumLine] > maxVal) {
                maxVal=endAccum[(int)(r - minCornerRadius)][(int)cx + width * accumLine];
              }
            }
          }
        }
      }
      x++;
    }
    y++;
    int y2=y - accumHeight;
    int l=y % accumHeight;
    if (y2 > 0) {
      for (int n=0; n < perfArea.getWidth(); n++) {
        for (int r=0; r < (int)(maxCornerRadius - minCornerRadius); r++) {
          if (startAccum[r][n + width * l] >= CORNER_MIN_HOUGH) {
            int val=startAccum[r][n + width * l];
            if (val == getLocalMaxima(startAccum,r,n,y,width)) {
              startCorners.add(new Point(n,y));
              System.out.println(String.format(""String_Node_Str"",val,r,n,y));
            }
          }
          if (endAccum[r][n + width * l] > CORNER_MIN_HOUGH) {
            int val=endAccum[r][n + width * l];
            if (val == getLocalMaxima(endAccum,r,n,y2,width)) {
              endCorners.add(new Point(n,y2));
              System.out.println(String.format(""String_Node_Str"",val,r,n,y2));
            }
          }
        }
      }
    }
    for (int n=0; n < perfArea.getWidth(); n++) {
      for (int r=0; r < (int)(maxCornerRadius - minCornerRadius); r++) {
        startAccum[r][n + width * (y % accumHeight)]=0;
        endAccum[r][n + width * (y % accumHeight)]=0;
      }
    }
    if ((y % 100 == 1) && analysisListener != null) {
      analysisListener.scanAnalysisProgress(y - 1,height);
    }
  }
  if (analysisListener != null) {
    analysisListener.scanAnalysisProgress(height,height);
  }
  for (  Point sp : startCorners) {
    for (    Point ep : endCorners) {
      if (ep.y - sp.y > CC_MAX_DIST) {
        break;
      }
      if (Math.abs(ep.x - sp.x) < 10 && ep.y - sp.y > CC_MIN_DIST) {
        Perforation p=new Perforation();
        p.x=(ep.x + sp.x) >> 1;
        p.y=(ep.y + sp.y) >> 1;
        addPointToCluster(p.x,p.y);
      }
    }
  }
  System.out.println(String.format(""String_Node_Str"",pointClusters.size()));
  for (  PointCluster c : pointClusters) {
    System.out.println(String.format(""String_Node_Str"",c.getCentroidX(),c.getCentroidY(),c.getPointCount()));
  }
}"
46630,"/** 
 * Add frames from a scann to end of this scene
 * @param strip The scan strip
 * @param firstFrame First frame to add
 * @param frameCount Nubmer of frames to add
 */
public void addFrames(ScanStrip strip,int firstFrame,int frameCount){
  FrameRange lastRange=getLastRange();
  FrameRange newRange=new FrameRange(strip,firstFrame,getFrameCount(),frameCount);
  frames.add(newRange);
  newRange.addFrameRangeChangeListener(this);
}","/** 
 * Add frames from a scann to end of this scene
 * @param strip The scan strip
 * @param firstFrame First frame to add
 * @param frameCount Nubmer of frames to add
 */
public void addFrames(ScanStrip strip,int firstFrame,int frameCount){
  FrameRange newRange=new FrameRange(strip,firstFrame,getFrameCount(),frameCount);
  frames.add(newRange);
  newRange.addFrameRangeChangeListener(this);
}"
46631,"private void findPerfHolePoints(RenderedImage img){
  perfBorderX=new int[img.getHeight()];
  Rectangle perfArea=new Rectangle(0,0,img.getWidth() / 4,img.getHeight());
  RectIter iter=RectIterFactory.create(img,perfArea);
  SampleModel sm=img.getSampleModel();
  int nbands=sm.getNumBands();
  int[] pixel=new int[nbands];
  int perfPixelCount=0;
  int x=0, y=-1;
  int perfStartY=-1;
  int perfEndY=-1;
  boolean isPerforation=false;
  int linesToDecide=-1;
  int[] lastLines=new int[MEDIAN_WINDOW];
  int n=0;
  System.out.println(""String_Node_Str"");
  while (!iter.nextLineDone()) {
    y++;
    int pixelsInLine=0;
    perfBorderX[y]=0;
    x=0;
    iter.startPixels();
    while (!iter.nextPixelDone()) {
      iter.getPixel(pixel);
      if (pixel[0] > 0) {
        perfPixelCount++;
        pixelsInLine++;
      }
 else       if (pixelsInLine > PERF_HOLE_THRESHOLD) {
        perfBorderX[y]=x;
        break;
      }
      x++;
    }
    lastLines[n]=pixelsInLine;
    n++;
    if (n >= MEDIAN_WINDOW) {
      n=0;
    }
    int medianPixels=median(lastLines);
    if (y < MEDIAN_WINDOW) {
      continue;
    }
    if (isPerforation) {
      if (medianPixels < PERF_HOLE_THRESHOLD) {
        perfEndY=y - (MEDIAN_WINDOW >> 1);
        int perfCenterY=(perfEndY + perfStartY) >> 1;
        int perfCenterX=getFrameLeft(perfStartY,perfEndY);
        if (perfCenterX > 0) {
          System.out.println(String.format(""String_Node_Str"",perfCenterX,perfCenterY));
          perfY.add(perfCenterY);
          perfX.add(perfCenterX);
          int imageY=perfCenterY - 200;
          imageY=Math.max(0,imageY);
          saveDebugImage(maskImage,""String_Node_Str"",0,imageY,300,Math.min(400,maskImage.getHeight() - imageY));
        }
        isPerforation=false;
      }
    }
 else {
      if (medianPixels > PERF_HOLE_THRESHOLD) {
        perfStartY=y - (MEDIAN_WINDOW >> 1);
        isPerforation=true;
      }
    }
  }
}","private void findPerfHolePoints(RenderedImage img){
  perfBorderX=new int[img.getHeight()];
  Rectangle perfArea=new Rectangle(0,0,img.getWidth() / 4,img.getHeight());
  RectIter iter=RectIterFactory.create(img,perfArea);
  SampleModel sm=img.getSampleModel();
  int nbands=sm.getNumBands();
  int[] pixel=new int[nbands];
  int x=0, y=-1;
  int perfStartY=-1;
  int perfEndY=-1;
  boolean isPerforation=false;
  int linesToDecide=-1;
  int[] lastLines=new int[MEDIAN_WINDOW];
  int n=0;
  System.out.println(""String_Node_Str"");
  while (!iter.nextLineDone()) {
    y++;
    int pixelsInLine=0;
    perfBorderX[y]=0;
    x=0;
    iter.startPixels();
    while (!iter.nextPixelDone()) {
      iter.getPixel(pixel);
      if (pixel[0] > 0) {
        pixelsInLine++;
      }
 else       if (pixelsInLine > PERF_HOLE_THRESHOLD) {
        perfBorderX[y]=x;
        break;
      }
      x++;
    }
    lastLines[n]=pixelsInLine;
    n++;
    if (n >= MEDIAN_WINDOW) {
      n=0;
    }
    int medianPixels=median(lastLines);
    if (y < MEDIAN_WINDOW) {
      continue;
    }
    if (isPerforation) {
      if (medianPixels <= PERF_HOLE_THRESHOLD) {
        perfEndY=y - (MEDIAN_WINDOW >> 1);
        int perfCenterY=(perfEndY + perfStartY) >> 1;
        int perfCenterX=getFrameLeft(perfStartY,perfEndY);
        if (perfCenterX > 0) {
          int prevX=0;
          int prevY=0;
          if (perfX.size() >= 1) {
            prevX=perfX.get(perfX.size() - 1);
            prevY=perfY.get(perfY.size() - 1);
          }
          System.out.println(String.format(""String_Node_Str"",perfCenterX,perfCenterY,perfCenterX - prevX,perfCenterY - prevY));
          perfY.add(perfCenterY);
          perfX.add(perfCenterX);
          int imageY=perfCenterY - 200;
          imageY=Math.max(0,imageY);
          saveDebugImage(maskImage,""String_Node_Str"",0,imageY,300,Math.min(400,maskImage.getHeight() - imageY));
        }
        isPerforation=false;
      }
    }
 else {
      if (medianPixels > PERF_HOLE_THRESHOLD) {
        perfStartY=y - (MEDIAN_WINDOW >> 1);
        isPerforation=true;
      }
    }
  }
}"
46632,"private void saveDebugImage(RenderedImage src,String desc,int x,int y,int w,int h){
  AffineTransform xform=AffineTransform.getTranslateInstance(0,-y);
  RenderedOp perfTrans=AffineDescriptor.create(maskImage,xform,null,null,null);
  RenderedOp perfImage=CropDescriptor.create(perfTrans,0.0f,0.0f,(float)w,(float)h,null);
  String fname=String.format(""String_Node_Str"",desc,y);
  try {
    ImageIO.write(perfImage,""String_Node_Str"",new File(fname));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
}","private void saveDebugImage(RenderedImage src,String desc,int x,int y,int w,int h){
  AffineTransform xform=AffineTransform.getTranslateInstance(0,-y);
  RenderedOp perfTrans=AffineDescriptor.create(maskImage,xform,null,null,null);
  RenderedOp perfImage=CropDescriptor.create(perfTrans,0.0f,0.0f,(float)w,(float)h,null);
  File f=getDebugImageFile(String.format(""String_Node_Str"",desc,y));
  try {
    ImageIO.write(perfImage,""String_Node_Str"",f);
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
}"
46633,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  log.setLevel(Level.FINE);
  JAI.setDefaultTileSize(new Dimension(64,64));
  JAI.getDefaultInstance().setTileCache(new SunTileCache(100 * 1024 * 1024));
  SplitScan t=new SplitScan();
  long startTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + args[0]);
  RenderedImage img=t.readImage(args[0]);
  System.out.println(""String_Node_Str"" + args[1] + ""String_Node_Str"");
  RenderedImage maskImg=t.readImage(args[1]);
  System.out.println(""String_Node_Str"" + img.getWidth() + ""String_Node_Str""+ img.getHeight());
  System.out.println(""String_Node_Str"" + maskImg.getWidth() + ""String_Node_Str""+ maskImg.getHeight());
  System.out.println(""String_Node_Str"");
  if (img.getWidth() > img.getHeight()) {
    System.out.println(""String_Node_Str"");
    img=t.getRotatedImage(img);
    maskImg=t.getRotatedImage(maskImg);
  }
  RenderedImage binaryImg=t.findPerforationEdges(maskImg);
  t.scanImage=img;
  t.findPerfHolePoints(binaryImg);
  long analysisTime=System.currentTimeMillis() - startTime;
  System.out.println(""String_Node_Str"" + ((double)analysisTime) / 1000.0);
  t.fnameTmpl=""String_Node_Str"";
  if (args.length > 1) {
    t.fnameTmpl=args[2];
  }
  t.saveFrames(img,t.fnameTmpl);
  long saveTime=System.currentTimeMillis() - analysisTime - startTime;
  System.out.println(""String_Node_Str"" + ((double)saveTime) / 1000.0);
}","/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  parseArgs(args);
  log.setLevel(Level.FINE);
  JAI.setDefaultTileSize(new Dimension(64,64));
  JAI.getDefaultInstance().setTileCache(new SunTileCache(100 * 1024 * 1024));
  SplitScan t=new SplitScan();
  long startTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + fname);
  RenderedImage img=t.readImage(fname);
  System.out.println(""String_Node_Str"" + img.getWidth() + ""String_Node_Str""+ img.getHeight());
  RenderedImage maskImg=img;
  if (maskName != null) {
    System.out.println(""String_Node_Str"" + maskName + ""String_Node_Str"");
    maskImg=t.readImage(maskName);
    System.out.println(""String_Node_Str"" + maskImg.getWidth() + ""String_Node_Str""+ maskImg.getHeight());
  }
  System.out.println(""String_Node_Str"");
  if (img.getWidth() > img.getHeight()) {
    System.out.println(""String_Node_Str"");
    img=t.getRotatedImage(img);
    maskImg=t.getRotatedImage(maskImg);
  }
  RenderedImage binaryImg=t.findPerforationEdges(maskImg);
  t.scanImage=img;
  t.findPerfHolePoints(binaryImg);
  long analysisTime=System.currentTimeMillis() - startTime;
  System.out.println(""String_Node_Str"" + ((double)analysisTime) / 1000.0);
  t.fnameTmpl=outTmpl;
  t.saveFrames(img,outTmpl);
  long saveTime=System.currentTimeMillis() - analysisTime - startTime;
  System.out.println(""String_Node_Str"" + ((double)saveTime) / 1000.0);
}"
46634,"private void saveFrames(RenderedImage scanImage,String fnameTmpl){
  RenderedOp frame=null;
  RenderedOp rotated=null;
  for (int n=1; n < perfY.size() - 2; n++) {
    String fname=String.format(fnameTmpl,(Integer)n);
    System.out.println(""String_Node_Str"" + fname);
    int startY=(perfY.get(n - 1) + perfY.get(n)) >> 1;
    int startX=perfX.get(n - 1);
    System.out.println(""String_Node_Str"" + startX + ""String_Node_Str""+ startY);
    int w=Math.min(frameWidth,scanImage.getWidth() - startX);
    AffineTransform xform=getFrameXform(n);
    if (frame == null) {
      rotated=AffineDescriptor.create(scanImage,xform,Interpolation.getInstance(Interpolation.INTERP_BICUBIC),null,null);
      frame=CropDescriptor.create(rotated,(float)0,(float)0,(float)w,(float)frameHeight,null);
    }
 else {
      rotated.setParameter(xform,0);
    }
    ImageWriter writer=null;
    Iterator iter=ImageIO.getImageWritersByFormatName(""String_Node_Str"");
    if (iter.hasNext()) {
      writer=(ImageWriter)iter.next();
    }
    if (writer != null) {
      ImageOutputStream ios=null;
      try {
        ios=ImageIO.createImageOutputStream(new File(fname));
        writer.setOutput(ios);
        ImageWriteParam param=writer.getDefaultWriteParam();
        PlanarImage rendering=frame.getNewRendering();
        writer.write(null,new IIOImage(rendering,null,null),param);
        ios.flush();
        rendering.dispose();
      }
 catch (      IOException ex) {
        Logger.getLogger(SplitScan.class.getName()).log(Level.SEVERE,null,ex);
      }
 finally {
        if (ios != null) {
          try {
            ios.close();
          }
 catch (          IOException e) {
            System.err.println(""String_Node_Str"");
          }
        }
        writer.dispose();
      }
    }
    if (debug) {
      String debugFname=String.format(""String_Node_Str"",(Integer)n);
      BufferedImage debugLayer=new BufferedImage(frame.getWidth(),frame.getHeight(),BufferedImage.TYPE_INT_RGB);
      for (int row=0; row < frame.getHeight(); row++) {
        debugLayer.getRaster().setPixel(perfBorderX[startY + row],row,new int[]{255,255,255});
      }
      try {
        ImageIO.write(debugLayer,""String_Node_Str"",new File(debugFname));
      }
 catch (      IOException ex) {
        Logger.getLogger(SplitScan.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
    frame.dispose();
    rotated.dispose();
    System.gc();
    System.gc();
  }
}","private void saveFrames(RenderedImage scanImage,String fnameTmpl){
  RenderedOp frame=null;
  RenderedOp rotated=null;
  int frameNum=1;
  for (int n=0; n < perfY.size(); n++) {
    String fname=String.format(fnameTmpl,(Integer)frameNum);
    System.out.println(""String_Node_Str"" + fname);
    int startX=perfX.get(n);
    int w=Math.min(frameWidth,scanImage.getWidth() - startX);
    AffineTransform xform=getFrameXform(n);
    try {
      if (frame == null) {
        rotated=AffineDescriptor.create(scanImage,xform,Interpolation.getInstance(Interpolation.INTERP_BICUBIC),null,null);
        frame=CropDescriptor.create(rotated,(float)0,(float)0,(float)w,(float)frameHeight,null);
      }
 else {
        rotated.setParameter(xform,0);
      }
      ImageWriter writer=null;
      Iterator iter=ImageIO.getImageWritersByFormatName(""String_Node_Str"");
      if (iter.hasNext()) {
        writer=(ImageWriter)iter.next();
      }
      if (writer != null) {
        ImageOutputStream ios=null;
        try {
          ios=ImageIO.createImageOutputStream(new File(fname));
          writer.setOutput(ios);
          ImageWriteParam param=writer.getDefaultWriteParam();
          PlanarImage rendering=frame.getNewRendering();
          writer.write(null,new IIOImage(rendering,null,null),param);
          ios.flush();
          rendering.dispose();
        }
 catch (        IOException ex) {
          Logger.getLogger(SplitScan.class.getName()).log(Level.SEVERE,null,ex);
        }
 finally {
          if (ios != null) {
            try {
              ios.close();
            }
 catch (            IOException e) {
              System.err.println(""String_Node_Str"");
            }
          }
          writer.dispose();
        }
      }
      frame.dispose();
      rotated.dispose();
      System.gc();
      System.gc();
      frameNum++;
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"" + frameNum + ""String_Node_Str""+ e.getMessage());
    }
  }
}"
46635,"private int median(int[] arr){
  int[] copy=Arrays.copyOf(arr,arr.length);
  Arrays.sort(arr);
  return arr[arr.length >> 1];
}","private int median(int[] arr){
  int[] copy=Arrays.copyOf(arr,arr.length);
  Arrays.sort(copy);
  return copy[copy.length >> 1];
}"
46636,"private int getFrameLeft(int starty,int endy){
  ArrayList<Integer> perfBorderPoints=new ArrayList<Integer>(400);
  System.err.println(String.format(""String_Node_Str"",starty,endy));
  for (int n=starty; n < endy; n++) {
    if (perfBorderX[n] > 0) {
      perfBorderPoints.add(perfBorderX[n]);
    }
  }
  Collections.sort(perfBorderPoints);
  return perfBorderPoints.size() > 0 ? perfBorderPoints.get(perfBorderPoints.size() >> 1) : 0;
}","private int getFrameLeft(int starty,int endy){
  ArrayList<Integer> perfBorderPoints=new ArrayList<Integer>(400);
  for (int n=starty; n < endy; n++) {
    if (perfBorderX[n] > 0) {
      perfBorderPoints.add(perfBorderX[n]);
    }
  }
  Collections.sort(perfBorderPoints);
  return perfBorderPoints.size() > 0 ? perfBorderPoints.get(perfBorderPoints.size() >> 1) : 0;
}"
46637,"AffineTransform getFrameXform(int frame){
  int f1=Math.max(0,frame - 1);
  int f2=Math.min(perfY.size() - 1,frame + 1);
  int x1=perfX.get(f1);
  int x2=perfX.get(f2);
  int y1=perfY.get(f1);
  int y2=perfY.get(f2);
  double rot=Math.atan2((double)x2 - x1,(double)(y2 - y1));
  AffineTransform xform=AffineTransform.getTranslateInstance(-perfX.get(frame),-perfY.get(frame));
  xform.preConcatenate(AffineTransform.getRotateInstance(rot));
  xform.preConcatenate(AffineTransform.getTranslateInstance(0,frameHeight / 2));
  return xform;
}","AffineTransform getFrameXform(int frame){
  int f1=frame - 1;
  int f2=frame + 1;
  int x1=(f1 >= 0) ? perfX.get(f1) : perfX.get(0);
  int x2=(f2 < perfX.size()) ? perfX.get(f2) : perfX.get(perfX.size() - 1);
  int y1=(f1 >= 0) ? perfY.get(f1) : perfX.get(0);
  int y2=(f2 < perfX.size()) ? perfY.get(f2) : perfY.get(perfY.size() - 1);
  double rot=Math.atan2((double)x2 - x1,(double)(y2 - y1));
  AffineTransform xform=AffineTransform.getTranslateInstance(-perfX.get(frame),-perfY.get(frame));
  xform.preConcatenate(AffineTransform.getRotateInstance(rot));
  xform.preConcatenate(AffineTransform.getTranslateInstance(0,frameHeight / 2));
  return xform;
}"
46638,"public Fencing(){
  super();
  registerCommand('E',new ErrorCommand());
  registerCommand('W',new WaitCommand());
  registerCommand('T',new RecieveChallengeCommand());
  registerCommand('c',new RejectedCommand());
  registerCommand('C',new WithdrawnCommand());
  registerCommand('K',new KillCommand());
  registerCommand('b',new NewGameCommand(Game.COLOR_BLACK));
  registerCommand('w',new NewGameCommand(Game.COLOR_WHITE));
  registerCommand('h',new SetHandCommand());
  singleton=this;
}","public Fencing(){
  super();
  registerCommand('E',new ErrorCommand());
  registerCommand('W',new WaitCommand());
  registerCommand('T',new RecieveChallengeCommand());
  registerCommand('c',new RejectedCommand());
  registerCommand('C',new WithdrawnCommand());
  registerCommand('K',new KillCommand());
  registerCommand('b',new NewGameCommand(Game.COLOR_BLACK));
  registerCommand('w',new NewGameCommand(Game.COLOR_WHITE));
  registerCommand('h',new SetHandCommand());
  registerCommand('x',new PositionCommand());
  singleton=this;
}"
46639,"@Override public void execute(String in){
  stripView.setHand(in);
}","@Override public void execute(String in){
  stripView.setPositions(in);
}"
46640,"public StripView(Context context,AttributeSet attr){
  super(context,attr);
}","public StripView(Context context,AttributeSet attr){
  super(context,attr);
  init();
}"
46641,"private void resetModel(){
  model=Fencing.stripModel;
}","private void resetModel(){
  model=Fencing.stripModel;
  model.getGame().addListener(this);
}"
46642,"/** 
 * Spawn an object at the desired location and checks if it happens
 * @param location Location to spawn the object
 * @param object the object to spawn
 */
public static void spawnObject(Location location,String object){
  if (object == ""String_Node_Str"") {
    if (world.generateTree(location,TreeType.values()[random(0,TreeType.values().length)])) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else   if (object == ""String_Node_Str"") {
    if (world.spawnBoat(location) != null) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else   if (object == ""String_Node_Str"") {
    if (world.spawnMinecart(location) != null) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else   if (object == ""String_Node_Str"") {
    if (world.spawnPoweredMinecart(location) != null) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else   if (object == ""String_Node_Str"") {
    if (world.spawnStorageMinecart(location) != null) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else   if (object == ""String_Node_Str"") {
    if (world.strikeLightning(location) != null) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else {
    log.severe(""String_Node_Str"");
  }
}","/** 
 * Spawn an object at the desired location and checks if it happens
 * @param location Location to spawn the object
 * @param object the object to spawn
 */
public static void spawnObject(Location location,String object){
  if (object.trim().equalsIgnoreCase(""String_Node_Str"")) {
    if (world.generateTree(location,TreeType.values()[random(0,TreeType.values().length - 1)])) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else   if (object.trim().equalsIgnoreCase(""String_Node_Str"")) {
    if (world.spawnBoat(location) != null) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else   if (object.trim().equalsIgnoreCase(""String_Node_Str"")) {
    if (world.spawnMinecart(location) != null) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else   if (object.trim().equalsIgnoreCase(""String_Node_Str"")) {
    if (world.spawnPoweredMinecart(location) != null) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else   if (object.trim().equalsIgnoreCase(""String_Node_Str"")) {
    if (world.spawnStorageMinecart(location) != null) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else   if (object.trim().equalsIgnoreCase(""String_Node_Str"")) {
    if (world.strikeLightning(location) != null) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else   if (object.trim().equalsIgnoreCase(""String_Node_Str"")) {
    if (createLightPost(location)) {
      log.info(""String_Node_Str"");
    }
 else {
      log.severe(""String_Node_Str"");
    }
  }
 else {
    log.severe(""String_Node_Str"" + object);
    world.getBlockAt(location).setType(org.bukkit.Material.TNT);
  }
}"
46643,"/** 
 * Saves the current data [Currently only saves gods]
 */
private void save(){
  try {
    log.info(""String_Node_Str"");
    if (!getDataFolder().exists()) {
      getDataFolder().mkdirs();
      log.info(""String_Node_Str"");
    }
    if (!new File(dataFile).exists()) {
      new File(dataFile).createNewFile();
      log.info(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"");
      InputStream is=new FileInputStream(dataFile);
      BufferedReader br=new BufferedReader(new InputStreamReader(is));
      FileWriter fw=new FileWriter(dataFile);
      PrintWriter pw=new PrintWriter(fw);
      String strLine;
      while ((strLine=br.readLine()) != null) {
        if (gods.contains(getServer().getPlayer(strLine))) {
          gods.remove(getServer().getPlayer(strLine));
        }
        if (godsRemoved.contains(strLine)) {
          pw.println((String)null);
        }
      }
      fw.close();
      is.close();
    }
    log.info(""String_Node_Str"");
    FileWriter fw=new FileWriter(dataFile);
    PrintWriter pw=new PrintWriter(fw);
    for (int i=0; i < gods.size(); i++) {
      if (gods.get(i) != null) {
        log.info(""String_Node_Str"" + gods.get(i).getDisplayName());
        pw.println(gods.get(i).getDisplayName());
      }
    }
    fw.close();
    log.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
  }
}","/** 
 * Saves the current data [Currently only saves gods]
 */
private void save(){
  try {
    log.info(""String_Node_Str"");
    if (!getDataFolder().exists()) {
      getDataFolder().mkdirs();
      log.info(""String_Node_Str"");
    }
    if (!new File(dataFile).exists()) {
      new File(dataFile).createNewFile();
      log.info(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"");
      InputStream is=new FileInputStream(dataFile);
      BufferedReader br=new BufferedReader(new InputStreamReader(is));
      String strLine;
      while ((strLine=br.readLine()) != null) {
        if (!gods.contains(getServer().getPlayer(strLine)) && !godsRemoved.contains(getServer().getPlayer(strLine))) {
          gods.add(getServer().getPlayer(strLine));
        }
      }
      is.close();
    }
    log.info(""String_Node_Str"");
    FileWriter fw=new FileWriter(dataFile);
    PrintWriter pw=new PrintWriter(fw);
    for (int i=0; i < gods.size(); i++) {
      if (gods.get(i) != null) {
        log.info(""String_Node_Str"" + gods.get(i).getDisplayName());
        pw.println(gods.get(i).getDisplayName());
      }
    }
    fw.close();
    log.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
  }
}"
46644,"private void checkUpdate(){
  try {
    URL pluginInfo=new URL(""String_Node_Str"");
    BufferedReader in=new BufferedReader(new InputStreamReader(pluginInfo.openStream()));
    String strLine;
    while ((strLine=in.readLine()) != null) {
      if (strLine.contains(""String_Node_Str"")) {
        String[] tokens=strLine.split(""String_Node_Str"");
        String version=tokens[1];
        if (isDouble(version) && isDouble(pdfFile.getVersion())) {
          if (Double.parseDouble(version) > Double.parseDouble(pdfFile.getVersion())) {
            if (JOptionPane.showConfirmDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
              getServer().dispatchCommand(new ConsoleCommandSender(getServer()),""String_Node_Str"");
            }
          }
 else {
            JOptionPane.showMessageDialog(null,""String_Node_Str"");
          }
        }
 else {
          log.severe(""String_Node_Str"");
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    log.severe(""String_Node_Str"");
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * WIP Auto-Update method Will check if you need to update version
 */
private void checkUpdate(){
  try {
    pluginInfo=new URL(""String_Node_Str"");
    BufferedReader in=new BufferedReader(new InputStreamReader(pluginInfo.openStream()));
    String strLine;
    while ((strLine=in.readLine()) != null) {
      if (strLine.contains(""String_Node_Str"")) {
        String[] tokens=strLine.split(""String_Node_Str"");
        String version=tokens[1];
        if (isDouble(version) && isDouble(pdfFile.getVersion())) {
          if (Double.parseDouble(version) > Double.parseDouble(pdfFile.getVersion())) {
            if (JOptionPane.showConfirmDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
              getServer().dispatchCommand(new ConsoleCommandSender(getServer()),""String_Node_Str"");
            }
 else {
              log.warning(""String_Node_Str"");
            }
          }
 else {
            JOptionPane.showMessageDialog(null,""String_Node_Str"");
          }
        }
 else {
          log.severe(""String_Node_Str"");
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    log.severe(""String_Node_Str"");
  }
catch (  IOException e) {
    log.severe(""String_Node_Str"");
  }
}"
46645,"private boolean isDouble(String text){
  try {
    Double.parseDouble(text);
  }
 catch (  NumberFormatException e) {
    return false;
  }
  return true;
}","/** 
 * Checks for a double in the text
 * @param text String to check
 * @return true is the text contains a double, otherwise false
 */
private boolean isDouble(String text){
  try {
    Double.parseDouble(text);
  }
 catch (  NumberFormatException e) {
    return false;
  }
  return true;
}"
46646,"/** 
 * This method initializes jButton_MAIN_SPAWN_OBJECT
 * @return javax.swing.JButton
 */
private JButton getJButton_MAIN_SPAWN_OBJECT(){
  if (jButton_MAIN_SPAWN_OBJECT == null) {
    jButton_MAIN_SPAWN_OBJECT=new JButton();
    jButton_MAIN_SPAWN_OBJECT.setBounds(new Rectangle(10,165,530,30));
    jButton_MAIN_SPAWN_OBJECT.setText(""String_Node_Str"");
    jButton_MAIN_SPAWN_OBJECT.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent e){
        Location location=null;
        String object=null;
        if (jComboBox_MAIN_SPAWN_OBJECT.getSelectedIndex() != -1) {
          object=jComboBox_MAIN_SPAWN_OBJECT.getSelectedItem().toString().toLowerCase();
        }
        if (jComboBox_MAIN_SPAWN_LOCATION_OBJECT.getSelectedItem() != null) {
          if (jComboBox_MAIN_SPAWN_LOCATION_OBJECT.getSelectedItem() instanceof Player) {
            Player p=(Player)jComboBox_MAIN_SPAWN_LOCATION_OBJECT.getSelectedItem();
            location=p.getTargetBlock(null,10).getLocation();
          }
 else {
            String text=jComboBox_MAIN_SPAWN_LOCATION_OBJECT.getSelectedItem().toString();
            if (text.trim().contains(""String_Node_Str"")) {
              String[] token=text.split(""String_Node_Str"");
              if (isNumeric(token[0]) && isNumeric(token[1]) && isNumeric(token[2])) {
                int x=Integer.parseInt(token[0].trim());
                int y=Integer.parseInt(token[1].trim());
                int z=Integer.parseInt(token[2].trim());
                location=new Location(SATools.world,x,y,z);
              }
 else {
                SATools.log.severe(""String_Node_Str"");
              }
            }
          }
        }
 else {
          SATools.log.severe(""String_Node_Str"");
        }
        if (location != null && object != null)         SATools.spawnObject(location,object);
      }
    }
);
  }
  return jButton_MAIN_SPAWN_OBJECT;
}","/** 
 * This method initializes jButton_MAIN_SPAWN_OBJECT
 * @return javax.swing.JButton
 */
private JButton getJButton_MAIN_SPAWN_OBJECT(){
  if (jButton_MAIN_SPAWN_OBJECT == null) {
    jButton_MAIN_SPAWN_OBJECT=new JButton();
    jButton_MAIN_SPAWN_OBJECT.setBounds(new Rectangle(10,165,530,30));
    jButton_MAIN_SPAWN_OBJECT.setText(""String_Node_Str"");
    jButton_MAIN_SPAWN_OBJECT.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent e){
        Location location=null;
        String object=null;
        if (jComboBox_MAIN_SPAWN_OBJECT.getSelectedIndex() != -1) {
          object=jComboBox_MAIN_SPAWN_OBJECT.getSelectedItem().toString().toLowerCase();
        }
        if (jComboBox_MAIN_SPAWN_LOCATION_OBJECT.getSelectedItem() != null) {
          if (jComboBox_MAIN_SPAWN_LOCATION_OBJECT.getSelectedItem() instanceof Player) {
            Player p=(Player)jComboBox_MAIN_SPAWN_LOCATION_OBJECT.getSelectedItem();
            Location loc=p.getTargetBlock(null,30).getLocation();
            location=new Location(SATools.world,loc.getBlockX(),loc.getBlockY() + 1,loc.getBlockZ());
          }
 else {
            String text=jComboBox_MAIN_SPAWN_LOCATION_OBJECT.getSelectedItem().toString();
            if (text.trim().contains(""String_Node_Str"")) {
              String[] token=text.split(""String_Node_Str"");
              if (isNumeric(token[0]) && isNumeric(token[1]) && isNumeric(token[2])) {
                int x=Integer.parseInt(token[0].trim());
                int y=Integer.parseInt(token[1].trim());
                int z=Integer.parseInt(token[2].trim());
                location=new Location(SATools.world,x,y,z);
              }
 else {
                SATools.log.severe(""String_Node_Str"");
              }
            }
          }
        }
 else {
          SATools.log.severe(""String_Node_Str"");
        }
        if (location != null && object != null)         SATools.spawnObject(location,object);
      }
    }
);
  }
  return jButton_MAIN_SPAWN_OBJECT;
}"
46647,"public static void replaceBlock(){
}","public static void replaceBlock(){
  Block block=replacedBlocks.get(0);
  replacedBlocks.remove(0);
  replacedBlocksMaterial.remove(0);
  if (!replacedBlocks.contains(block)) {
    replacedBlocks.get(0).setType(replacedBlocksMaterial.get(0));
  }
}"
46648,"public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  if ((event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK) && player.getItemInHand().getType() == Material.WOOL) {
    Block targetBlock=player.getTargetBlock(null,1000);
    if (targetBlock.getType() != Material.AIR) {
      if (!replacedBlocks.contains(targetBlock)) {
        replacedBlocks.add(targetBlock);
        replacedBlocksMaterial.add(targetBlock.getType());
        targetBlock.setType(Material.WOOL.setData(14));
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          public void run(){
            replaceBlock();
          }
        }
,20L);
      }
 else {
        replacedBlocks.add(replacedBlocks.get(replacedBlocks.indexOf(targetBlock)));
        replacedBlocksMaterial.add(replacedBlocks.get(replacedBlocks.indexOf(targetBlock)).getType());
        targetBlock.setType((Material.WOOL).setData(14));
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          public void run(){
            replaceBlock();
          }
        }
,20L);
      }
    }
  }
}","public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  if ((event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK) && player.getItemInHand().getType() == Material.WOOL) {
    Block targetBlock=player.getTargetBlock(null,1000);
    if (targetBlock.getType() != Material.AIR) {
      if (!replacedBlocks.contains(targetBlock)) {
        replacedBlocks.add(targetBlock);
        replacedBlocksMaterial.add(targetBlock.getType());
        targetBlock.setType(Wool.setData((byte)14));
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          public void run(){
            replaceBlock();
          }
        }
,20L);
      }
 else {
        replacedBlocks.add(replacedBlocks.get(replacedBlocks.indexOf(targetBlock)));
        replacedBlocksMaterial.add(replacedBlocks.get(replacedBlocks.indexOf(targetBlock)).getType());
        targetBlock.setType(Wool.setData((byte)14));
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          public void run(){
            replaceBlock();
          }
        }
,20L);
      }
    }
  }
}"
46649,"/** 
 * This sets up the parameter RETURN_ATTRIBUTE_NAME with the return address  harvested from the reqest. <ul><le>If a ""return"" parameter is present we check in the metadata for spoofing  and then set up from there </le> <le>If ""returnID"" is specified we get this from the metadata</le> <le>If nothing is provided we get the default from the metadata (if provided)</le> <le>Otherwise we whine</le> </ul>     
 * @param spName - the name of the Service provider.
 * @param req - The request.
 * @throws WayfException - if we spot spoofing or there is no defaumlt 
 */
private void setupReturnAddress(String spName,HttpServletRequest req) throws WayfException {
  DiscoveryResponse[] discoveryServices;
  Set<XMLObject> objects=new HashSet<XMLObject>();
  String defaultName=null;
  boolean foundSPName=false;
  EntityDescriptor sp=null;
  for (  IdPSiteSet metadataProvider : siteSets) {
    LOG.debug(""String_Node_Str"" + metadataProvider.getIdentifier() + ""String_Node_Str""+ spName);
    if (metadataProvider.containsSP(spName)) {
      foundSPName=true;
      EntityDescriptor entity=metadataProvider.getEntity(spName);
      sp=entity;
      List<RoleDescriptor> roles=entity.getRoleDescriptors();
      for (      RoleDescriptor role : roles) {
        if (role instanceof SPSSODescriptor) {
          Extensions exts=role.getExtensions();
          if (exts != null) {
            objects.addAll(exts.getOrderedChildren());
          }
        }
      }
    }
    break;
  }
  if (!foundSPName) {
    LOG.error(""String_Node_Str"" + spName + ""String_Node_Str"");
    throw new WayfException(""String_Node_Str"" + StringEscapeUtils.escapeHtml(getHostnameByURI(spName)) + ""String_Node_Str""+ StringEscapeUtils.escapeHtml(spName)+ ""String_Node_Str""+ ""String_Node_Str"",true);
  }
  discoveryServices=new DiscoveryResponse[objects.size()];
  int dsCount=0;
  for (  XMLObject obj : objects) {
    if (obj instanceof DiscoveryResponse) {
      DiscoveryResponse ds=(DiscoveryResponse)obj;
      discoveryServices[dsCount++]=ds;
      if (ds.isDefault() || null == defaultName) {
        defaultName=ds.getLocation();
      }
    }
  }
  String returnName=req.getParameter(RETURN_PARAM_NAME);
  if (returnName == null || returnName.length() == 0) {
    returnName=getValue(req,RETURN_ATTRIBUTE_NAME);
  }
  String returnIndex=req.getParameter(RETURN_INDEX_NAME);
  if (returnName != null && returnName.length() != 0) {
    String nameNoParam=returnName;
    URL providedReturnURL;
    int index=nameNoParam.indexOf('?');
    boolean found=false;
    if (index >= 0) {
      nameNoParam=nameNoParam.substring(0,index);
    }
    try {
      providedReturnURL=new URL(nameNoParam);
    }
 catch (    MalformedURLException e) {
      throw new WayfException(""String_Node_Str"" + nameNoParam,e);
    }
    for (    DiscoveryResponse disc : discoveryServices) {
      if (equalsURL(disc,providedReturnURL)) {
        found=true;
        break;
      }
    }
    if (!found) {
      String contactMsg=""String_Node_Str"";
      ContactPerson person=null;
      try {
        List<ContactPersonTypeEnumeration> cpTypeOrder=new Vector<ContactPersonTypeEnumeration>();
        cpTypeOrder.add(ContactPersonTypeEnumeration.TECHNICAL);
        cpTypeOrder.add(ContactPersonTypeEnumeration.SUPPORT);
        cpTypeOrder.add(ContactPersonTypeEnumeration.ADMINISTRATIVE);
        cpTypeOrder.add(ContactPersonTypeEnumeration.OTHER);
        cpTypeOrder.add(ContactPersonTypeEnumeration.BILLING);
        for (        ContactPerson thisPerson : ((SPSSODescriptor)sp.getRoleDescriptors(SPSSODescriptor.DEFAULT_ELEMENT_NAME).get(0)).getContactPersons()) {
          if (person == null) {
            person=thisPerson;
            continue;
          }
          ;
          if (cpTypeOrder.indexOf(thisPerson) < cpTypeOrder.indexOf(person)) {
            person=thisPerson;
          }
          ;
        }
        ;
        if (person != null) {
          String emailAddrStr=null;
          for (          EmailAddress emailAddr : person.getEmailAddresses()) {
            if (emailAddrStr == null) {
              emailAddrStr=StringEscapeUtils.escapeHtml(emailAddr.getAddress());
              if (emailAddrStr.startsWith(MAILTO_URI_PREFIX)) {
                emailAddrStr=emailAddrStr.substring(MAILTO_URI_PREFIX.length());
              }
              ;
              break;
            }
            ;
          }
          ;
          contactMsg=""String_Node_Str"" + StringEscapeUtils.escapeHtml(person.getGivenName().getName() + ""String_Node_Str"" + person.getSurName().getName()) + (person.getCompany() != null ? ""String_Node_Str"" + StringEscapeUtils.escapeHtml(person.getCompany().getName()) : ""String_Node_Str"")+ (emailAddrStr != null ? ""String_Node_Str"" + emailAddrStr + ""String_Node_Str""+ emailAddrStr+ ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"";
        }
        ;
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"" + spName,e);
      }
      ;
      throw new WayfException(""String_Node_Str"" + StringEscapeUtils.escapeHtml(getHostnameByURI(spName)) + ""String_Node_Str""+ StringEscapeUtils.escapeHtml(spName)+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeHtml(nameNoParam)+ ""String_Node_Str""+ contactMsg,true);
    }
  }
 else   if (returnIndex != null && returnIndex.length() != 0) {
    int index;
    try {
      index=Integer.parseInt(returnIndex);
    }
 catch (    NumberFormatException e) {
      throw new WayfException(""String_Node_Str"" + returnIndex + ""String_Node_Str"");
    }
    boolean found=false;
    for (    DiscoveryResponse disc : discoveryServices) {
      if (index == disc.getIndex()) {
        found=true;
        returnName=disc.getLocation();
        break;
      }
    }
    if (!found) {
      throw new WayfException(""String_Node_Str"" + returnIndex + ""String_Node_Str"");
    }
  }
 else {
    returnName=defaultName;
  }
  req.setAttribute(RETURN_ATTRIBUTE_NAME,returnName);
}","/** 
 * This sets up the parameter RETURN_ATTRIBUTE_NAME with the return address  harvested from the reqest. <ul><le>If a ""return"" parameter is present we check in the metadata for spoofing  and then set up from there </le> <le>If ""returnID"" is specified we get this from the metadata</le> <le>If nothing is provided we get the default from the metadata (if provided)</le> <le>Otherwise we whine</le> </ul>     
 * @param spName - the name of the Service provider.
 * @param req - The request.
 * @throws WayfException - if we spot spoofing or there is no defaumlt 
 */
private void setupReturnAddress(String spName,HttpServletRequest req) throws WayfException {
  DiscoveryResponse[] discoveryServices;
  Set<XMLObject> objects=new HashSet<XMLObject>();
  String defaultName=null;
  boolean foundSPName=false;
  EntityDescriptor sp=null;
  for (  IdPSiteSet metadataProvider : siteSets) {
    LOG.debug(""String_Node_Str"" + metadataProvider.getIdentifier() + ""String_Node_Str""+ spName);
    if (metadataProvider.containsSP(spName)) {
      foundSPName=true;
      EntityDescriptor entity=metadataProvider.getEntity(spName);
      sp=entity;
      List<RoleDescriptor> roles=entity.getRoleDescriptors();
      for (      RoleDescriptor role : roles) {
        if (role instanceof SPSSODescriptor) {
          Extensions exts=role.getExtensions();
          if (exts != null) {
            objects.addAll(exts.getOrderedChildren());
          }
        }
      }
      break;
    }
  }
  if (!foundSPName) {
    LOG.error(""String_Node_Str"" + spName + ""String_Node_Str"");
    throw new WayfException(""String_Node_Str"" + StringEscapeUtils.escapeHtml(getHostnameByURI(spName)) + ""String_Node_Str""+ StringEscapeUtils.escapeHtml(spName)+ ""String_Node_Str""+ ""String_Node_Str"",true);
  }
  discoveryServices=new DiscoveryResponse[objects.size()];
  int dsCount=0;
  for (  XMLObject obj : objects) {
    if (obj instanceof DiscoveryResponse) {
      DiscoveryResponse ds=(DiscoveryResponse)obj;
      discoveryServices[dsCount++]=ds;
      if (ds.isDefault() || null == defaultName) {
        defaultName=ds.getLocation();
      }
    }
  }
  String returnName=req.getParameter(RETURN_PARAM_NAME);
  if (returnName == null || returnName.length() == 0) {
    returnName=getValue(req,RETURN_ATTRIBUTE_NAME);
  }
  String returnIndex=req.getParameter(RETURN_INDEX_NAME);
  if (returnName != null && returnName.length() != 0) {
    String nameNoParam=returnName;
    URL providedReturnURL;
    int index=nameNoParam.indexOf('?');
    boolean found=false;
    if (index >= 0) {
      nameNoParam=nameNoParam.substring(0,index);
    }
    try {
      providedReturnURL=new URL(nameNoParam);
    }
 catch (    MalformedURLException e) {
      throw new WayfException(""String_Node_Str"" + nameNoParam,e);
    }
    for (    DiscoveryResponse disc : discoveryServices) {
      if (equalsURL(disc,providedReturnURL)) {
        found=true;
        break;
      }
    }
    if (!found) {
      String contactMsg=""String_Node_Str"";
      ContactPerson person=null;
      try {
        List<ContactPersonTypeEnumeration> cpTypeOrder=new Vector<ContactPersonTypeEnumeration>();
        cpTypeOrder.add(ContactPersonTypeEnumeration.TECHNICAL);
        cpTypeOrder.add(ContactPersonTypeEnumeration.SUPPORT);
        cpTypeOrder.add(ContactPersonTypeEnumeration.ADMINISTRATIVE);
        cpTypeOrder.add(ContactPersonTypeEnumeration.OTHER);
        cpTypeOrder.add(ContactPersonTypeEnumeration.BILLING);
        for (        ContactPerson thisPerson : ((SPSSODescriptor)sp.getRoleDescriptors(SPSSODescriptor.DEFAULT_ELEMENT_NAME).get(0)).getContactPersons()) {
          if (person == null) {
            person=thisPerson;
            continue;
          }
          ;
          if (cpTypeOrder.indexOf(thisPerson) < cpTypeOrder.indexOf(person)) {
            person=thisPerson;
          }
          ;
        }
        ;
        if (person != null) {
          String emailAddrStr=null;
          for (          EmailAddress emailAddr : person.getEmailAddresses()) {
            if (emailAddrStr == null) {
              emailAddrStr=StringEscapeUtils.escapeHtml(emailAddr.getAddress());
              if (emailAddrStr.startsWith(MAILTO_URI_PREFIX)) {
                emailAddrStr=emailAddrStr.substring(MAILTO_URI_PREFIX.length());
              }
              ;
              break;
            }
            ;
          }
          ;
          contactMsg=""String_Node_Str"" + StringEscapeUtils.escapeHtml(person.getGivenName().getName() + ""String_Node_Str"" + person.getSurName().getName()) + (person.getCompany() != null ? ""String_Node_Str"" + StringEscapeUtils.escapeHtml(person.getCompany().getName()) : ""String_Node_Str"")+ (emailAddrStr != null ? ""String_Node_Str"" + emailAddrStr + ""String_Node_Str""+ emailAddrStr+ ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"";
        }
        ;
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"" + spName,e);
      }
      ;
      throw new WayfException(""String_Node_Str"" + StringEscapeUtils.escapeHtml(getHostnameByURI(spName)) + ""String_Node_Str""+ StringEscapeUtils.escapeHtml(spName)+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeHtml(nameNoParam)+ ""String_Node_Str""+ contactMsg,true);
    }
  }
 else   if (returnIndex != null && returnIndex.length() != 0) {
    int index;
    try {
      index=Integer.parseInt(returnIndex);
    }
 catch (    NumberFormatException e) {
      throw new WayfException(""String_Node_Str"" + returnIndex + ""String_Node_Str"");
    }
    boolean found=false;
    for (    DiscoveryResponse disc : discoveryServices) {
      if (index == disc.getIndex()) {
        found=true;
        returnName=disc.getLocation();
        break;
      }
    }
    if (!found) {
      throw new WayfException(""String_Node_Str"" + returnIndex + ""String_Node_Str"");
    }
  }
 else {
    returnName=defaultName;
  }
  req.setAttribute(RETURN_ATTRIBUTE_NAME,returnName);
}"
46650,"@Before public void init() throws ConnectionException, ConfigurationLoadingFailedException {
  Config config=new Config();
  final Properties prop=ConfigurationUtils.getAutomationCredentialsProperties();
  username=prop.getProperty(""String_Node_Str"");
  password=prop.getProperty(""String_Node_Str"");
  endpoint=prop.getProperty(""String_Node_Str"");
  config.connect(username,password,endpoint);
  connector.setConfig(config);
}","@Before public void init() throws ConnectionException, ConfigurationLoadingFailedException {
  final Properties prop=ConfigurationUtils.getAutomationCredentialsProperties();
  username=prop.getProperty(""String_Node_Str"");
  password=prop.getProperty(""String_Node_Str"");
  endpoint=prop.getProperty(""String_Node_Str"");
  Config config=new Config();
  config.connect(username,password,endpoint);
  connector.setConfig(config);
}"
46651,"public synchronized JiraClient<List<Object>> getClient(){
  if (client == null) {
    client=JiraClientFactory.getClient(address);
  }
  return client;
}","public synchronized JiraClient<List<Object>> getClient(){
  if (client == null) {
    setClient(JiraClientFactory.getClient(address));
  }
  return client;
}"
46652,"protected RemoteCustomFieldValue[] getRemoteCustomFieldValues(Map<String,List<String>> customFields){
  if (customFields == null) {
    return EMPTY_REMOTE_CUSTOM_FIELDS;
  }
  RemoteCustomFieldValue[] result=new RemoteCustomFieldValue[customFields.size()];
  int i=0;
  for (  Entry<String,List<String>> entry : customFields.entrySet()) {
    String customeFieldId=entry.getKey();
    List<String> fieldValues=entry.getValue();
    result[i++]=new RemoteCustomFieldValue(customeFieldId,EMPTY_PARENT_KEY,(String[])fieldValues.toArray());
  }
  return result;
}","protected RemoteCustomFieldValue[] getRemoteCustomFieldValues(Map<String,List<String>> customFields){
  if (customFields == null) {
    return EMPTY_REMOTE_CUSTOM_FIELDS;
  }
  RemoteCustomFieldValue[] result=new RemoteCustomFieldValue[customFields.size()];
  int i=0;
  for (  Entry<String,List<String>> entry : customFields.entrySet()) {
    String customeFieldId=entry.getKey();
    List<String> fieldValues=entry.getValue();
    if (fieldValues != null) {
      result[i++]=new RemoteCustomFieldValue(customeFieldId,EMPTY_PARENT_KEY,(String[])fieldValues.toArray());
    }
 else {
      result[i++]=new RemoteCustomFieldValue(customeFieldId,EMPTY_PARENT_KEY,new String[0]);
    }
  }
  return result;
}"
46653,"protected RemoteFieldValue[] createRemoteFieldValues(Map<String,List<String>> fields){
  if (fields == null) {
    return EMPTY_FIELDS;
  }
  RemoteFieldValue[] result=new RemoteFieldValue[fields.size()];
  int i=0;
  for (  Entry<String,List<String>> entry : fields.entrySet()) {
    String customeFieldId=entry.getKey();
    List<String> fieldValues=entry.getValue();
    result[i++]=new RemoteFieldValue(customeFieldId,(String[])fieldValues.toArray());
  }
  return result;
}","protected RemoteFieldValue[] createRemoteFieldValues(Map<String,List<String>> fields){
  if (fields == null) {
    return EMPTY_FIELDS;
  }
  RemoteFieldValue[] result=new RemoteFieldValue[fields.size()];
  int i=0;
  for (  Entry<String,List<String>> entry : fields.entrySet()) {
    String customeFieldId=entry.getKey();
    List<String> fieldValues=entry.getValue();
    if (fieldValues != null) {
      result[i++]=new RemoteFieldValue(customeFieldId,(String[])fieldValues.toArray());
    }
 else {
      result[i++]=new RemoteFieldValue(customeFieldId,new String[0]);
    }
  }
  return result;
}"
46654,"public ServiceProviders(List<ApplicationCredentials> credentials,Iterable<C> configurations){
  this.credentials=credentials;
  this.configurations=configurations;
}","public ServiceProviders(List<ApplicationCredentials> credentials,Iterable<C> configurations){
  this.credentials=credentials;
  this.configurations=ImmutableList.copyOf(configurations);
}"
46655,"protected List<X> mapProviders(){
  Builder<X> builder=ImmutableList.<X>builder();
  for (  ApplicationCredentials crd : credentials) {
    C configuration=Iterables.find(configurations,crd.getProviderId());
    builder.add(createProvider(crd,configuration));
  }
  return builder.build();
}","protected List<X> mapProviders(){
  Builder<X> builder=ImmutableList.<X>builder();
  List<C> configurationsList=ImmutableList.copyOf(configurations);
  for (  ApplicationCredentials crd : credentials) {
    C configuration=Iterables.find(configurationsList,crd.getProviderId());
    builder.add(createProvider(crd,configuration));
  }
  return builder.build();
}"
46656,"@Inject public LoginServiceProviders(@Login List<ApplicationCredentials> credentials,@Login Instance<ProviderConfiguration<OAuthSession>> configurations){
  super(credentials,configurations);
}","@Inject public LoginServiceProviders(@Login List<ApplicationCredentials> credentials,@Login Instance<LoginProviderConfiguration> configurations){
  super(credentials,configurations);
}"
46657,"@Override protected ServiceProvider<OAuthSession> createProvider(ApplicationCredentials crd,ProviderConfiguration<OAuthSession> configuration){
  return new ServiceProvider<OAuthSession>(crd,configuration);
}","@Override protected ServiceProvider<OAuthSession> createProvider(ApplicationCredentials crd,LoginProviderConfiguration configuration){
  return new ServiceProvider<OAuthSession>(crd,configuration);
}"
46658,"@Override public Api getApi(){
  return FacebookRegisterConfiguration.REAUTHENTICATE_API;
}","@Override public Api getApi(){
  return FacebookUserProfileConfiguration.REAUTHENTICATE_API;
}"
46659,"@Override public OAuthSession createSession(OAuthService service,ApplicationCredentials appCredentials,Token accessToken){
  return new FacebookRegisterSession(defaultExecutor,service,accessToken);
}","@Override public OAuthSession createSession(OAuthService service,ApplicationCredentials appCredentials,Token accessToken){
  return new FacebookUserProfileSession(defaultExecutor,service,accessToken);
}"
46660,"@Override public OAuthSession createSession(OAuthService service,ApplicationCredentials appCredentials,Token accessToken){
  return new TwitterRegisterSession(defaultExecutor,service,accessToken);
}","@Override public OAuthSession createSession(OAuthService service,ApplicationCredentials appCredentials,Token accessToken){
  return new TwitterUserProfileSession(defaultExecutor,service,accessToken);
}"
46661,"private Document getDocument(InputStream documentAsStream) throws Exception {
  DocumentBuilder documentBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
  return documentBuilder.parse(documentAsStream);
}","private Document getDocument(InputStream documentAsStream) throws Exception {
  BufferedReader bis=new BufferedReader(new InputStreamReader((documentAsStream)));
  bis.readLine();
  String line=""String_Node_Str"";
  StringBuffer sb=new StringBuffer();
  while (line != null) {
    if (!""String_Node_Str"".equals(line.trim())) {
      sb.append(line);
    }
    line=bis.readLine();
  }
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setIgnoringComments(true);
  factory.setValidating(false);
  DocumentBuilder documentBuilder=factory.newDocumentBuilder();
  InputSource is=new InputSource();
  is.setCharacterStream(new StringReader(sb.toString()));
  return documentBuilder.parse(is);
}"
46662,"public static void giveall(CommandSender event,String item,String amount,String originalPlayer){
  Player[] players=Bukkit.getServer().getOnlinePlayers();
  String from;
  if (originalPlayer.equals(""String_Node_Str""))   from=""String_Node_Str"";
 else   from=ChatColor.YELLOW + originalPlayer + ChatColor.GREEN;
  int amnt=65;
  try {
    amnt=Integer.parseInt(amount);
  }
 catch (  NumberFormatException e) {
  }
  if (amnt > 64)   amnt=64;
  ItemStack is=null;
  if (item.contains(""String_Node_Str"")) {
    String[] itemarray=item.split(""String_Node_Str"");
    int itemid=0;
    try {
      itemid=Integer.parseInt(itemarray[0]);
    }
 catch (    NumberFormatException e) {
    }
    if (itemid == 0) {
      event.sendMessage(ChatColor.RED + Main.PREFIX + ""String_Node_Str"");
      return;
    }
    int damage=0;
    try {
      damage=Integer.parseInt(itemarray[1]);
    }
 catch (    NumberFormatException e) {
    }
    Material m=Material.getMaterial(itemid);
    if (m == null) {
      event.sendMessage(ChatColor.RED + Main.PREFIX + ""String_Node_Str"");
      return;
    }
    is=new ItemStack(m,amnt,(short)0,(byte)damage);
  }
 else {
    int itemid=0;
    try {
      itemid=Integer.parseInt(item);
    }
 catch (    NumberFormatException e) {
    }
    if (itemid == 0) {
      event.sendMessage(ChatColor.RED + Main.PREFIX + ""String_Node_Str"");
      return;
    }
    Material m=Material.getMaterial(itemid);
    if (m == null) {
      event.sendMessage(ChatColor.RED + Main.PREFIX + ""String_Node_Str"");
      return;
    }
    is=new ItemStack(m,amnt);
  }
  for (int i=0; i < players.length; i++) {
    if (!players[i].getName().equalsIgnoreCase(originalPlayer)) {
      players[i].getInventory().addItem(is);
      if (Config.messagePlayers)       players[i].sendMessage(ChatColor.GREEN + Main.PREFIX + ""String_Node_Str""+ amnt+ ""String_Node_Str""+ ChatColor.YELLOW+ is.getType().name().toLowerCase()+ ChatColor.GREEN+ ""String_Node_Str""+ from+ ""String_Node_Str"");
    }
  }
  event.sendMessage(ChatColor.GREEN + Main.PREFIX + ""String_Node_Str""+ amnt+ ""String_Node_Str""+ is.getType().name().toLowerCase()+ ""String_Node_Str"");
  if (!originalPlayer.equals(""String_Node_Str""))   Main.log.info(Main.PREFIX + originalPlayer + ""String_Node_Str""+ amount+ ""String_Node_Str""+ is.getType().name().toLowerCase()+ ""String_Node_Str"");
}","public static void giveall(CommandSender event,String item,String amount,String originalPlayer){
  if (!event.hasPermission(""String_Node_Str"")) {
    event.sendMessage(Main.PREFIX + ""String_Node_Str"");
    return;
  }
  Player[] players=Bukkit.getServer().getOnlinePlayers();
  String from;
  if (originalPlayer.equals(""String_Node_Str""))   from=""String_Node_Str"";
 else   from=ChatColor.YELLOW + originalPlayer + ChatColor.GREEN;
  int amnt=65;
  try {
    amnt=Integer.parseInt(amount);
  }
 catch (  NumberFormatException e) {
  }
  if (amnt > 64)   amnt=64;
  ItemStack is=null;
  if (item.contains(""String_Node_Str"")) {
    String[] itemarray=item.split(""String_Node_Str"");
    int itemid=0;
    try {
      itemid=Integer.parseInt(itemarray[0]);
    }
 catch (    NumberFormatException e) {
    }
    if (itemid == 0) {
      event.sendMessage(ChatColor.RED + Main.PREFIX + ""String_Node_Str"");
      return;
    }
    int damage=0;
    try {
      damage=Integer.parseInt(itemarray[1]);
    }
 catch (    NumberFormatException e) {
    }
    Material m=Material.getMaterial(itemid);
    if (m == null) {
      event.sendMessage(ChatColor.RED + Main.PREFIX + ""String_Node_Str"");
      return;
    }
    is=new ItemStack(m,amnt,(short)0,(byte)damage);
  }
 else {
    int itemid=0;
    try {
      itemid=Integer.parseInt(item);
    }
 catch (    NumberFormatException e) {
    }
    if (itemid == 0) {
      event.sendMessage(ChatColor.RED + Main.PREFIX + ""String_Node_Str"");
      return;
    }
    Material m=Material.getMaterial(itemid);
    if (m == null) {
      event.sendMessage(ChatColor.RED + Main.PREFIX + ""String_Node_Str"");
      return;
    }
    is=new ItemStack(m,amnt);
  }
  for (int i=0; i < players.length; i++) {
    if (!players[i].getName().equalsIgnoreCase(originalPlayer)) {
      players[i].getInventory().addItem(is);
      if (Config.messagePlayers)       players[i].sendMessage(ChatColor.GREEN + Main.PREFIX + ""String_Node_Str""+ amnt+ ""String_Node_Str""+ ChatColor.YELLOW+ is.getType().name().toLowerCase()+ ChatColor.GREEN+ ""String_Node_Str""+ from+ ""String_Node_Str"");
    }
  }
  event.sendMessage(ChatColor.GREEN + Main.PREFIX + ""String_Node_Str""+ amnt+ ""String_Node_Str""+ is.getType().name().toLowerCase()+ ""String_Node_Str"");
  if (!originalPlayer.equals(""String_Node_Str""))   Main.log.info(Main.PREFIX + originalPlayer + ""String_Node_Str""+ amount+ ""String_Node_Str""+ is.getType().name().toLowerCase()+ ""String_Node_Str"");
}"
46663,"@Override public void initialize(){
  LCD.drawString(""String_Node_Str"",0,0);
  pilot.setTravelSpeed(FAST);
  pilot.setRotateSpeed(8 * rotateSpeed * Math.PI* WHEEL_BASE / 180.0f);
  pilot.setAcceleration(MIN_ACCELERATION);
  stopwatch.reset();
  registerStopButtonInterrupt();
  Timer matchTimer=initMatchTimer();
  footUp();
  while (light.getColorID() == Color.BLACK) {
    competition=true;
  }
  matchTimer.start();
  lejos.util.Delay.msDelay(300);
}","@Override public void initialize(){
  LCD.drawString(""String_Node_Str"",0,0);
  pilot.setTravelSpeed(FAST);
  pilot.setRotateSpeed(FAST / (WHEEL_BASE * Math.PI) * 360.0f);
  pilot.setAcceleration(MIN_ACCELERATION);
  stopwatch.reset();
  registerStopButtonInterrupt();
  Timer matchTimer=initMatchTimer();
  footUp();
  while (light.getColorID() == Color.BLACK) {
    competition=true;
  }
  matchTimer.start();
  lejos.util.Delay.msDelay(300);
}"
46664,"public void waitForPawn(){
  while (pilot.isMoving() || obstacle) {
    if (pawnButton.isPressed())     stop();
  }
}","public void waitForPawn(){
  while (pilot.isMoving() || obstacle) {
    if (pawnButton.isPressed()) {
      stop();
      lejos.nxt.Sound.playSample(new File(""String_Node_Str""));
    }
  }
}"
46665,"public void travel(double distance,boolean immret,int accel){
  currentGoal=distance;
  pilot.setAcceleration(accel);
  pilot.travel(distance,immret);
}","public void travel(double distance,boolean immret,int accel){
  currentGoal=distance;
  pilot.setAcceleration(accel);
  pilot.travel(distance,true);
  if (!immret) {
    while (pilot.isMoving() || obstacle) {
    }
  }
}"
46666,"@SuppressWarnings(""String_Node_Str"") @Override public void go(){
  int startColor;
  do {
    startColor=light.getColorID();
  }
 while (startColor != Color.RED && startColor != Color.BLUE);
  if (startColor == Color.RED) {
    LCD.drawString(""String_Node_Str"",0,1);
  }
 else {
    LCD.drawString(""String_Node_Str"",0,1);
  }
  int dir=(startColor == Color.BLUE) ? 1 : -1;
  int distanceDownBoard=0;
  LCD.drawString(""String_Node_Str"",0,4);
  travel(100,true,MIN_ACCELERATION);
  while (light.getColorID() == startColor) {
  }
  travel(5,false,MAX_ACCELERATION);
  LCD.drawString(""String_Node_Str"",0,4);
  pilot.setAcceleration(MIN_ACCELERATION);
  pilot.arc(dir * 20.0f,dir * 90.0f);
  LCD.drawString(""String_Node_Str"",0,4);
  pilot.reset();
  travel(106,true);
  waitForPawn();
  distanceDownBoard+=pilot.getMovement().getDistanceTraveled();
  int travelDistance=35;
  if (distanceDownBoard < 15) {
    lejos.nxt.Sound.beep();
    travelDistance=15;
    distanceDownBoard=distanceDownBoard + 20;
  }
  rotate(180);
  travel(travelDistance,false);
  travel(-35,false);
  rotate(-180);
  LCD.drawString(""String_Node_Str"",0,4);
  pilot.reset();
  travel(140 - distanceDownBoard,false);
  LCD.drawString(""String_Node_Str"",0,4);
  rotate(dir * 90);
  setSpeed(SLOW);
  travel(20,true);
  while (light.getColorID() == Color.RED) {
  }
  stop();
  setSpeed(FAST);
  rotate(dir * -90);
  travel(15,false);
  travel(-48,false);
  rotate(dir * 90);
  LCD.drawString(""String_Node_Str"",0,4);
  if (light.getColorID() == Color.RED) {
    travel(-20,true);
    while (light.getColorID() == Color.RED) {
    }
    stop();
    travel(-5,false);
  }
 else {
    travel(20,true);
    while (light.getColorID() != Color.RED) {
    }
    travel(-10,false);
  }
  LCD.drawString(""String_Node_Str"",0,4);
  pilot.setAcceleration(MAX_ACCELERATION);
  pilot.rotate(dir * 335,true);
  while (light.getColorID() == Color.BLUE) {
  }
  float angle1=Math.abs(pilot.getAngleIncrement());
  lejos.util.Delay.msDelay(500);
  while (light.getColorID() == Color.RED) {
  }
  lejos.util.Delay.msDelay(500);
  while (light.getColorID() == Color.BLUE) {
  }
  float angle2=Math.abs(pilot.getAngleIncrement());
  LCD.drawString(angle1 + ""String_Node_Str"" + angle2,0,4);
  pilot.stop();
  float SENSOR_ANGLE=36;
  if (startColor == Color.BLUE)   SENSOR_ANGLE=-65;
  pilot.rotate(-dir * (angle2 - angle1) / 2 + SENSOR_ANGLE);
  pilot.setAcceleration(MIN_ACCELERATION);
  LCD.drawString(""String_Node_Str"",0,4);
  travel(125,false);
  rotate(-90 * dir);
  travel(60,true);
  int n=0;
  do {
    if (light.getColorID() == Color.BLACK)     ++n;
 else     n=0;
    lejos.util.Delay.msDelay(100);
  }
 while (n < 2 && pilot.isMoving());
  stop();
  footDown();
  if (!competition) {
    lejos.util.Delay.msDelay(4000);
    footUp();
    setSpeed(FAST);
    rotate(180);
  }
 else {
    lejos.util.Delay.msDelay(90000);
    NXT.shutDown();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void go(){
  int startColor;
  do {
    startColor=light.getColorID();
  }
 while (startColor != Color.RED && startColor != Color.BLUE);
  marioStart();
  if (startColor == Color.RED) {
    LCD.drawString(""String_Node_Str"",0,1);
  }
 else {
    LCD.drawString(""String_Node_Str"",0,1);
  }
  int dir=(startColor == Color.BLUE) ? 1 : -1;
  int distanceDownBoard=0;
  LCD.drawString(""String_Node_Str"",0,4);
  travel(100,true,MIN_ACCELERATION);
  while (light.getColorID() == startColor) {
  }
  travel(5,false,MAX_ACCELERATION);
  LCD.drawString(""String_Node_Str"",0,4);
  pilot.setAcceleration(MIN_ACCELERATION);
  pilot.arc(dir * 20.0f,dir * 90.0f);
  LCD.drawString(""String_Node_Str"",0,4);
  pilot.reset();
  travel(106,true);
  waitForPawn();
  distanceDownBoard+=pilot.getMovement().getDistanceTraveled();
  int travelDistance=35;
  if (distanceDownBoard < 15) {
    lejos.nxt.Sound.beep();
    travelDistance=15;
    distanceDownBoard=distanceDownBoard + 20;
  }
  rotate(180);
  travel(travelDistance,false);
  travel(-35,false);
  rotate(-180);
  LCD.drawString(""String_Node_Str"",0,4);
  pilot.reset();
  travel(140 - distanceDownBoard,false);
  LCD.drawString(""String_Node_Str"",0,4);
  rotate(dir * 90);
  setSpeed(SLOW);
  travel(20,true);
  while (light.getColorID() == Color.RED) {
  }
  stop();
  setSpeed(FAST);
  rotate(dir * -90);
  travel(15,false);
  travel(-48,false);
  rotate(dir * 90);
  LCD.drawString(""String_Node_Str"",0,4);
  if (light.getColorID() == Color.RED) {
    travel(-20,true);
    while (light.getColorID() == Color.RED) {
    }
    stop();
    travel(-5,false);
  }
 else {
    travel(20,true);
    while (light.getColorID() != Color.RED) {
    }
    travel(-10,false);
  }
  LCD.drawString(""String_Node_Str"",0,4);
  pilot.setAcceleration(MAX_ACCELERATION);
  pilot.rotate(dir * 335,true);
  while (light.getColorID() == Color.BLUE) {
  }
  float angle1=Math.abs(pilot.getAngleIncrement());
  lejos.util.Delay.msDelay(500);
  while (light.getColorID() == Color.RED) {
  }
  lejos.util.Delay.msDelay(500);
  while (light.getColorID() == Color.BLUE) {
  }
  float angle2=Math.abs(pilot.getAngleIncrement());
  LCD.drawString(angle1 + ""String_Node_Str"" + angle2,0,4);
  pilot.stop();
  float SENSOR_ANGLE=36;
  if (startColor == Color.BLUE)   SENSOR_ANGLE=-65;
  pilot.rotate(-dir * (angle2 - angle1) / 2 + SENSOR_ANGLE);
  pilot.setAcceleration(MIN_ACCELERATION);
  LCD.drawString(""String_Node_Str"",0,4);
  travel(125,false);
  rotate(-90 * dir);
  travel(60,true);
  int n=0;
  do {
    if (light.getColorID() == Color.BLACK)     ++n;
 else     n=0;
    lejos.util.Delay.msDelay(100);
  }
 while (n < 2 && pilot.isMoving());
  stop();
  Sound.playSample(new File(""String_Node_Str""));
  footDown();
  if (!competition) {
    lejos.util.Delay.msDelay(4000);
    footUp();
    setSpeed(FAST);
    rotate(180);
  }
 else {
    lejos.util.Delay.msDelay(90000);
    NXT.shutDown();
  }
}"
46667,"@Override public void initialize(){
  pilot.setTravelSpeed(speed);
  pilot.setRotateSpeed(speed * Math.PI * WHEEL_BASE / 180.0f);
  registerStopButtonInterrupt();
  Timer matchTimer=initMatchTimer();
  startSonicAvoidanceThread();
  footUp();
  while (light.getColorID() == Color.BLACK) {
    competition=true;
  }
  matchTimer.start();
  lejos.util.Delay.msDelay(300);
}","@Override public void initialize(){
  pilot.setTravelSpeed(speed);
  pilot.setRotateSpeed(speed / (WHEEL_BASE * Math.PI) * 360.0f);
  registerStopButtonInterrupt();
  Timer matchTimer=initMatchTimer();
  startSonicAvoidanceThread();
  footUp();
  while (light.getColorID() == Color.BLACK) {
    competition=true;
  }
  matchTimer.start();
  lejos.util.Delay.msDelay(300);
}"
46668,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  ImageView iv=new ImageView(this);
  iv.setImageResource(R.drawable.nyala);
  iv.setAdjustViewBounds(true);
  iv.setLayoutParams(new Gallery.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
  final WifiManager wm=(WifiManager)getSystemService(Context.WIFI_SERVICE);
  IntentFilter wifilter=new IntentFilter();
  wifilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
  wsr=new WifiStatusReceiver();
  registerReceiver(wsr,wifilter);
  if (!(wm.isWifiEnabled())) {
    AlertDialog.Builder ad=new AlertDialog.Builder(this);
    ad.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        Toast.makeText(Nyala.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        wm.setWifiEnabled(true);
      }
    }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        dialog.cancel();
        finish();
      }
    }
);
    AlertDialog WiFi_AD=ad.create();
    WiFi_AD.show();
  }
 else {
    ConnectivityManager cm=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);
    NetworkInfo ni=cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
    if (ni.isConnected()) {
      String apname=new String(wm.getConnectionInfo().getSSID());
      Toast.makeText(Nyala.this,""String_Node_Str"" + apname + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  ImageView iv=new ImageView(this);
  iv.setImageResource(R.drawable.nyala);
  iv.setAdjustViewBounds(true);
  iv.setLayoutParams(new Gallery.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
  final WifiManager wm=(WifiManager)getSystemService(Context.WIFI_SERVICE);
  IntentFilter wifilter=new IntentFilter();
  wifilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
  wsr=new WifiStatusReceiver();
  registerReceiver(wsr,wifilter);
}"
46669,"private WifiConfiguration ParseForNyalaEncoding(String qrcontents){
  String theSSID=null;
  String theType=null;
  String thePSK=new String(""String_Node_Str"");
  String theBSSID=null;
  String theTrailer=null;
  WifiConfiguration wc=null;
  String nyala_delim=new String(""String_Node_Str"");
  int passpos=0;
  int ssidpos=0;
  int typepos=0;
  int endpos=0;
  int bssidpos=0;
  int contentslen=0;
  int parse_score=0;
  int length=0;
  boolean isvalid=false;
  int delim=0;
  int type=0;
  int ssid_len=0;
  int sepcount=0;
  int sepcheck=0;
  contentslen=qrcontents.length();
  Log.i(""String_Node_Str"",""String_Node_Str"");
  if (contentslen > 0) {
    Log.i(""String_Node_Str"",""String_Node_Str"" + contentslen);
    if (contentslen <= 115) {
      length=1;
    }
  }
  if (qrcontents.endsWith(nyala_delim)) {
    delim=1;
    if (!qrcontents.matches(""String_Node_Str"")) {
      type=1;
    }
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  String[] qr_array=qrcontents.split(""String_Node_Str"");
  for (int i=0; i <= qr_array.length; i++) {
    Log.i(""String_Node_Str"",""String_Node_Str"" + qr_array[i]);
  }
  if (qr_array[0].length() <= 32) {
    ssid_len=1;
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  for (  char c : qrcontents.toCharArray()) {
    if (c == ':')     sepcount++;
  }
  if (sepcount == 3) {
    sepcheck=1;
  }
  if (length + delim + type+ ssid_len+ sepcheck == 5) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    ssidpos=qrcontents.indexOf(""String_Node_Str"");
    bssidpos=qrcontents.indexOf(""String_Node_Str"",ssidpos + 1);
    endpos=qrcontents.indexOf(""String_Node_Str"",bssidpos + 1);
    theSSID=new String(qrcontents.substring(0,ssidpos));
    theBSSID=new String(qrcontents.substring(ssidpos + 2,bssidpos));
    thePSK=new String(qrcontents.substring(bssidpos + 2,endpos));
    wc=new WifiConfiguration();
    wc.SSID=""String_Node_Str"" + theSSID + ""String_Node_Str"";
    wc.BSSID=theBSSID;
    if (thePSK.matches(""String_Node_Str"") || thePSK.equals(""String_Node_Str"") || thePSK.length() == 0) {
      wc.preSharedKey=""String_Node_Str"";
      wc.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
    }
 else {
      wc.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
      wc.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
      wc.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
      wc.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
      wc.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
      wc.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);
      wc.preSharedKey=""String_Node_Str"" + thePSK + ""String_Node_Str"";
    }
  }
 else {
    wc=new WifiConfiguration();
    wc.SSID=new String(""String_Node_Str"");
    Log.i(""String_Node_Str"",""String_Node_Str"" + length + ""String_Node_Str""+ delim+ ""String_Node_Str""+ type+ ""String_Node_Str""+ ssid_len+ ""String_Node_Str""+ sepcount);
  }
  return wc;
}","private WifiConfiguration ParseForNyalaEncoding(String qrcontents){
  String theSSID=null;
  String theType=null;
  String thePSK=new String(""String_Node_Str"");
  String theBSSID=null;
  String theTrailer=null;
  WifiConfiguration wc=null;
  String nyala_delim=new String(""String_Node_Str"");
  int passpos=0;
  int ssidpos=0;
  int typepos=0;
  int endpos=0;
  int bssidpos=0;
  int contentslen=0;
  int parse_score=0;
  int len_check=0;
  boolean isvalid=false;
  int delim=0;
  int type=0;
  int ssid_len=0;
  int sepcount=0;
  int sepcheck=0;
  contentslen=qrcontents.length();
  Log.i(""String_Node_Str"",""String_Node_Str"");
  if (contentslen > 0) {
    Log.i(""String_Node_Str"",""String_Node_Str"" + contentslen);
    if (contentslen <= 115) {
      len_check=1;
    }
  }
  if (qrcontents.endsWith(nyala_delim)) {
    delim=1;
    if (!qrcontents.matches(""String_Node_Str"")) {
      type=1;
    }
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  String[] qr_array=qrcontents.split(""String_Node_Str"");
  for (int i=0; i < qr_array.length; i++) {
    Log.i(""String_Node_Str"",""String_Node_Str"" + qr_array[i]);
  }
  if (qr_array[0].length() <= 32) {
    ssid_len=1;
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  for (  char c : qrcontents.toCharArray()) {
    if (c == ':')     sepcount++;
    Log.i(""String_Node_Str"",""String_Node_Str"" + sepcount);
  }
  if (sepcount == 11) {
    sepcheck=1;
  }
  if (len_check + delim + type+ ssid_len+ sepcheck == 5) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    ssidpos=qrcontents.indexOf(""String_Node_Str"");
    bssidpos=qrcontents.indexOf(""String_Node_Str"",ssidpos + 1);
    endpos=qrcontents.indexOf(""String_Node_Str"",bssidpos + 1);
    theSSID=new String(qrcontents.substring(0,ssidpos));
    theBSSID=new String(qrcontents.substring(ssidpos + 2,bssidpos));
    thePSK=new String(qrcontents.substring(bssidpos + 2,endpos));
    wc=new WifiConfiguration();
    wc.SSID=""String_Node_Str"" + theSSID + ""String_Node_Str"";
    wc.BSSID=theBSSID;
    if (thePSK.matches(""String_Node_Str"") || thePSK.equals(""String_Node_Str"") || thePSK.length() == 0) {
      wc.preSharedKey=""String_Node_Str"";
      wc.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
    }
 else {
      wc.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
      wc.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
      wc.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
      wc.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
      wc.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
      wc.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);
      wc.preSharedKey=""String_Node_Str"" + thePSK + ""String_Node_Str"";
    }
  }
 else {
    wc=new WifiConfiguration();
    wc.SSID=new String(""String_Node_Str"");
    Log.i(""String_Node_Str"",""String_Node_Str"" + len_check + ""String_Node_Str""+ delim+ ""String_Node_Str""+ type+ ""String_Node_Str""+ ssid_len+ ""String_Node_Str""+ sepcount);
  }
  return wc;
}"
46670,"@Override public void onActivityResult(int requestCode,int resultCode,Intent intent){
  int erAP=0;
  SharedPreferences ConnectActionPrefs;
  WifiConfiguration wc;
  if ((requestCode == 0) && ((resultCode == RESULT_OK))) {
    qrcontents=new String(intent.getStringExtra(""String_Node_Str""));
    qrformat=new String(intent.getStringExtra(""String_Node_Str""));
    Log.i(""String_Node_Str"",""String_Node_Str"" + qrcontents + ""String_Node_Str""+ qrformat);
    final WifiManager wm=(WifiManager)getSystemService(Context.WIFI_SERVICE);
    wc=new WifiConfiguration();
    List<ScanResult> sl=wm.getScanResults();
    Iterator isl=sl.iterator();
    ScanResult sr=null;
    while (isl.hasNext()) {
      sr=(ScanResult)isl.next();
      if (sr.SSID == ""String_Node_Str"") {
        erAP=1;
        break;
      }
    }
    if (erAP == 1) {
      wc.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.IEEE8021X);
      wc.BSSID=new String(sr.BSSID);
    }
 else {
      if (qrcontents.contains(""String_Node_Str"")) {
        wc=ParseForZXingEncoding(qrcontents);
        Log.i(""String_Node_Str"",""String_Node_Str"" + wc.SSID);
      }
      if (qrcontents.endsWith(""String_Node_Str"")) {
        wc=ParseForNyalaEncoding(qrcontents);
        Log.i(""String_Node_Str"",""String_Node_Str"" + wc.SSID);
      }
 else {
        AlertDialog.Builder ad=new AlertDialog.Builder(this);
        ad.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
            dialog.cancel();
            finish();
          }
        }
);
      }
      String ssid_str=wc.SSID;
      String bssid_str=wc.BSSID;
      String psk_str=wc.preSharedKey;
      Log.i(""String_Node_Str"",""String_Node_Str"" + ssid_str + ""String_Node_Str""+ bssid_str+ ""String_Node_Str""+ psk_str);
      Toast.makeText(Nyala.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      if (ssid_str.equals(""String_Node_Str"")) {
        AlertDialog.Builder ad=new AlertDialog.Builder(this);
        ad.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
            dialog.cancel();
          }
        }
);
      }
 else {
        ConnectFromScan(wc,wm);
      }
    }
  }
 else   if (resultCode == RESULT_CANCELED) {
    AlertDialog.Builder ad=new AlertDialog.Builder(this);
    ad.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        Toast.makeText(Nyala.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
);
    AlertDialog AD=ad.create();
    AD.show();
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent intent){
  int erAP=0;
  SharedPreferences ConnectActionPrefs;
  WifiConfiguration wc;
  if ((requestCode == 0) && ((resultCode == RESULT_OK))) {
    qrcontents=new String(intent.getStringExtra(""String_Node_Str""));
    qrformat=new String(intent.getStringExtra(""String_Node_Str""));
    Log.i(""String_Node_Str"",""String_Node_Str"" + qrcontents + ""String_Node_Str""+ qrformat);
    final WifiManager wm=(WifiManager)getSystemService(Context.WIFI_SERVICE);
    wc=new WifiConfiguration();
    if (qrcontents.contains(""String_Node_Str"")) {
      wc=ParseForZXingEncoding(qrcontents);
      Log.i(""String_Node_Str"",""String_Node_Str"" + wc.SSID);
    }
    if (qrcontents.endsWith(""String_Node_Str"")) {
      wc=ParseForNyalaEncoding(qrcontents);
      Log.i(""String_Node_Str"",""String_Node_Str"" + wc.SSID);
    }
 else {
      AlertDialog.Builder ad=new AlertDialog.Builder(this);
      ad.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          dialog.cancel();
          finish();
        }
      }
);
    }
    String ssid_str=new String(wc.SSID);
    String bssid_str=new String(wc.BSSID);
    String psk_str=new String(wc.preSharedKey);
    Log.i(""String_Node_Str"",""String_Node_Str"" + ssid_str + ""String_Node_Str""+ bssid_str+ ""String_Node_Str""+ psk_str);
    Toast.makeText(Nyala.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    if (ssid_str.equals(""String_Node_Str"")) {
      AlertDialog.Builder ad=new AlertDialog.Builder(this);
      ad.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          dialog.cancel();
        }
      }
);
    }
 else {
      ConnectFromScan(wc,wm);
    }
  }
 else   if (resultCode == RESULT_CANCELED) {
    AlertDialog.Builder ad=new AlertDialog.Builder(this);
    ad.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        Toast.makeText(Nyala.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
);
    AlertDialog AD=ad.create();
    AD.show();
  }
}"
46671,"@Override public void onResume(){
  super.onResume();
  connectActionPrefs=getSharedPreferences(prefStr,MODE_PRIVATE);
  connectAction=connectActionPrefs.getInt(""String_Node_Str"",connectAction);
  scanAction=connectActionPrefs.getInt(""String_Node_Str"",scanAction);
}","@Override public void onResume(){
  super.onResume();
  connectActionPrefs=getSharedPreferences(prefStr,MODE_PRIVATE);
  connectAction=connectActionPrefs.getInt(""String_Node_Str"",connectAction);
  scanAction=connectActionPrefs.getInt(""String_Node_Str"",scanAction);
  checkWiFiStatus();
}"
46672,"@Override public void onStart(){
  super.onStart();
  connectActionPrefs=getSharedPreferences(prefStr,MODE_PRIVATE);
  connectAction=connectActionPrefs.getInt(""String_Node_Str"",0);
  scanAction=connectActionPrefs.getInt(""String_Node_Str"",0);
}","@Override public void onStart(){
  super.onStart();
  int wiStatus=0;
  connectActionPrefs=getSharedPreferences(prefStr,MODE_PRIVATE);
  connectAction=connectActionPrefs.getInt(""String_Node_Str"",0);
  scanAction=connectActionPrefs.getInt(""String_Node_Str"",0);
}"
46673,"/** 
 * HTTP リクエストの Authorization ヘッダとして送信すべき文字列を返す. 形式は以下のようなものである. <pre>  OAuth realm=""..."", oauth_timestamp=""..."", oauth_verifier=""..."", ...</pre>
 * @param realmStr realm として含める文字列
 * @return HTTP リクエストの Authorization ヘッダとして送信すべき文字列
 */
public String getAuthorizationHeaderString(String realmStr){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + realmStr + ""String_Node_Str"");
  for (  Param p : mOauthParams) {
    sb.append(""String_Node_Str"");
    sb.append(OAuthEncoder.encode(p.getKey()) + ""String_Node_Str"");
    sb.append(OAuthEncoder.encode(p.getValue()) + ""String_Node_Str"");
  }
  return sb.toString();
}","/** 
 * HTTP リクエストの Authorization ヘッダとして送信すべき文字列を返す. 形式は以下のようなものである. <pre>  OAuth realm=""..."", oauth_timestamp=""..."", oauth_verifier=""..."", ...</pre>
 * @param realmStr realm として含める文字列
 * @return HTTP リクエストの Authorization ヘッダとして送信すべき文字列
 */
public String getAuthorizationHeaderString(String realmStr){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + realmStr + ""String_Node_Str"");
  for (  Param p : mOauthParams) {
    sb.append(""String_Node_Str"");
    sb.append(OAuthEncoder.encode(p.getKey()) + ""String_Node_Str"");
    sb.append(OAuthEncoder.encode(p.getValue()) + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(OAuthEncoder.encode(mSignature)).append('""');
  return sb.toString();
}"
46674,"private String createParameterNormalizationString(){
  ParamList paramList=new ParamList();
  if (mOauthParams != null)   paramList.addAll(mOauthParams);
  if (mUrlQueryParams != null)   paramList.addAll(mUrlQueryParams);
  if (mReqBodyParams != null)   paramList.addAll(mReqBodyParams);
  Param[] params=paramList.toArray(new Param[paramList.size()]);
  Arrays.sort(params,ParamComparator.getInstance());
  String ns=toNormalizationString(params);
  return ns;
}","String createParameterNormalizationString(){
  ParamList paramList=new ParamList();
  if (mOauthParams != null)   addEncodedKeyValuePairsToParamList(mOauthParams,paramList);
  if (mUrlQueryParams != null)   addEncodedKeyValuePairsToParamList(mUrlQueryParams,paramList);
  if (mReqBodyParams != null)   addEncodedKeyValuePairsToParamList(mReqBodyParams,paramList);
  paramList.sort(ParamComparator.getInstance());
  StringBuilder sb=new StringBuilder();
  for (  Param param : paramList) {
    if (sb.length() != 0)     sb.append('&');
    sb.append(param.getKey()).append('=').append(param.getValue());
  }
  return sb.toString();
}"
46675,"private void sign() throws GeneralSecurityException {
  final String signatureBaseStr=OAuthEncoder.encode(mMethodStr) + '&' + OAuthEncoder.encode(mUrlStr)+ '&'+ OAuthEncoder.encode(createParameterNormalizationString());
  final String algorithmName=""String_Node_Str"";
  Key key=new SecretKeySpec(mSecretsStr.getBytes(Charset.forName(""String_Node_Str"")),algorithmName);
  Mac mac=Mac.getInstance(algorithmName);
  mac.init(key);
  byte[] digest=mac.doFinal(signatureBaseStr.getBytes(Charset.forName(""String_Node_Str"")));
  String signatureStr=Base64Encoder.encode(digest);
  mOauthParams.add(new Param(""String_Node_Str"",signatureStr));
}","private void sign() throws GeneralSecurityException {
  final String signatureBaseStr=OAuthEncoder.encode(mMethodStr) + '&' + OAuthEncoder.encode(mUrlStr)+ '&'+ OAuthEncoder.encode(createParameterNormalizationString());
  final String algorithmName=""String_Node_Str"";
  Key key=new SecretKeySpec(mSecretsStr.getBytes(Charset.forName(""String_Node_Str"")),algorithmName);
  Mac mac=Mac.getInstance(algorithmName);
  mac.init(key);
  byte[] digest=mac.doFinal(signatureBaseStr.getBytes(Charset.forName(""String_Node_Str"")));
  mSignature=Base64Encoder.encode(digest);
}"
46676,"/** 
 * リクエストボディとして送信すべき値を文字列として取得する. OAuth 関係のパラメータを含めるかどうかは引数によって決める.
 * @param includeOAuthParams OAuth 関係のパラメータをクエリパラメータに含めるかどうか. 含める場合は true
 * @return リクエストボディとして送信すべき文字列
 */
public String getRequestBodyString(boolean includeOAuthParams){
  ParamList paramList=new ParamList();
  if (includeOAuthParams && mOauthParams != null)   paramList.addAll(mOauthParams);
  if (mReqBodyParams != null)   paramList.addAll(mReqBodyParams);
  if (paramList.size() == 0)   return ""String_Node_Str"";
  Param[] params=paramList.toArray(new Param[paramList.size()]);
  return toNormalizationString(params);
}","/** 
 * リクエストボディとして送信すべき値を文字列として取得する. OAuth 関係のパラメータを含めるかどうかは引数によって決める.
 * @param includeOAuthParams OAuth 関係のパラメータをクエリパラメータに含めるかどうか. 含める場合は true
 * @return リクエストボディとして送信すべき文字列
 */
public String getRequestBodyString(boolean includeOAuthParams){
  ParamList paramList=new ParamList();
  if (includeOAuthParams) {
    if (mOauthParams != null)     paramList.addAll(mOauthParams);
    paramList.add(new Param(""String_Node_Str"",mSignature));
  }
  if (mReqBodyParams != null)   paramList.addAll(mReqBodyParams);
  if (paramList.size() == 0)   return ""String_Node_Str"";
  Param[] params=paramList.toArray(new Param[paramList.size()]);
  return toNormalizationString(params);
}"
46677,"/** 
 * クエリパラメータを含んだ URL を文字列として返す. OAuth 関係のパラメータを含めるかどうかは引数によって決める.
 * @param includeOAuthParams OAuth 関係のパラメータをクエリパラメータに含めるかどうか. 含める場合は true
 * @return クエリパラメータを含んだ URL の文字列表現
 */
public String getUrlStringIncludeQueryParams(boolean includeOAuthParams){
  ParamList paramList=new ParamList();
  if (includeOAuthParams && mOauthParams != null)   paramList.addAll(mOauthParams);
  if (mUrlQueryParams != null)   paramList.addAll(mUrlQueryParams);
  if (paramList.size() == 0)   return mUrlStr;
  Param[] params=paramList.toArray(new Param[paramList.size()]);
  return mUrlStr + ""String_Node_Str"" + toNormalizationString(params);
}","/** 
 * クエリパラメータを含んだ URL を文字列として返す. OAuth 関係のパラメータを含めるかどうかは引数によって決める.
 * @param includeOAuthParams OAuth 関係のパラメータをクエリパラメータに含めるかどうか. 含める場合は true
 * @return クエリパラメータを含んだ URL の文字列表現
 */
public String getUrlStringIncludeQueryParams(boolean includeOAuthParams){
  ParamList paramList=new ParamList();
  if (includeOAuthParams) {
    if (mOauthParams != null)     paramList.addAll(mOauthParams);
    paramList.add(new Param(""String_Node_Str"",mSignature));
  }
  if (mUrlQueryParams != null)   paramList.addAll(mUrlQueryParams);
  if (paramList.size() == 0)   return mUrlStr;
  Param[] params=paramList.toArray(new Param[paramList.size()]);
  return mUrlStr + ""String_Node_Str"" + toNormalizationString(params);
}"
46678,"@Test public void testOAuthRequestHelper() throws GeneralSecurityException, MalformedURLException {
  String url=""String_Node_Str"";
  String method=""String_Node_Str"";
  String consumerKey=""String_Node_Str"";
  String consumerSecret=""String_Node_Str"";
  String tokenSecret=""String_Node_Str"";
  String secrets=OAuthEncoder.encode(consumerSecret) + ""String_Node_Str"" + OAuthEncoder.encode(tokenSecret);
  OAuthRequestHelper.ParamList paramList=new OAuthRequestHelper.ParamList(new String[][]{{""String_Node_Str"",consumerKey},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}});
  OAuthRequestHelper helper=new OAuthRequestHelper(url,method,secrets,paramList,null,null);
  String authHeaderStr=helper.getAuthorizationHeaderString(""String_Node_Str"");
  final String PREF=""String_Node_Str"";
  authHeaderStr.startsWith(PREF);
  String s=authHeaderStr.substring(PREF.length(),authHeaderStr.length());
  String[] ss=s.split(""String_Node_Str"");
  for (int i=0; i < ss.length; ++i)   ss[i]=ss[i].trim();
  Arrays.sort(ss);
  assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},ss);
  String urlNotIncludingAuthQuery=helper.getUrlStringIncludeQueryParams();
  assertEquals(url,urlNotIncludingAuthQuery);
{
    String urlIncludingAuthQuery=helper.getUrlStringIncludeQueryParams(true);
    assertTrue(""String_Node_Str"",urlIncludingAuthQuery.startsWith(url + ""String_Node_Str""));
    String queryParamsStr=urlIncludingAuthQuery.substring((url + ""String_Node_Str"").length());
    String[] params=queryParamsStr.split(""String_Node_Str"");
    Arrays.sort(params);
    assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},params);
  }
{
    String reqBodyIncludingAuthQuery=helper.getRequestBodyString(true);
    String[] params=reqBodyIncludingAuthQuery.split(""String_Node_Str"");
    Arrays.sort(params);
    assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},params);
  }
}","@Test public void testOAuthRequestHelper() throws GeneralSecurityException, MalformedURLException {
  String url=""String_Node_Str"";
  String method=""String_Node_Str"";
  String consumerKey=""String_Node_Str"";
  String consumerSecret=""String_Node_Str"";
  String tokenSecret=""String_Node_Str"";
  String secrets=OAuthEncoder.encode(consumerSecret) + ""String_Node_Str"" + OAuthEncoder.encode(tokenSecret);
  OAuthRequestHelper.ParamList paramList=new OAuthRequestHelper.ParamList(new String[][]{{""String_Node_Str"",consumerKey},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}});
  OAuthRequestHelper helper=new OAuthRequestHelper(url,method,secrets,paramList,null,null);
  String authHeaderStr=helper.getAuthorizationHeaderString(""String_Node_Str"");
  final String PREF=""String_Node_Str"";
  assertTrue(""String_Node_Str"",authHeaderStr.startsWith(PREF));
  String s=authHeaderStr.substring(PREF.length(),authHeaderStr.length());
  String[] ss=s.split(""String_Node_Str"");
  for (int i=0; i < ss.length; ++i)   ss[i]=ss[i].trim();
  Arrays.sort(ss);
  assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},ss);
  String urlNotIncludingAuthQuery=helper.getUrlStringIncludeQueryParams();
  assertEquals(url,urlNotIncludingAuthQuery);
{
    String urlIncludingAuthQuery=helper.getUrlStringIncludeQueryParams(true);
    assertTrue(""String_Node_Str"",urlIncludingAuthQuery.startsWith(url + ""String_Node_Str""));
    String queryParamsStr=urlIncludingAuthQuery.substring((url + ""String_Node_Str"").length());
    String[] params=queryParamsStr.split(""String_Node_Str"");
    Arrays.sort(params);
    assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},params);
  }
{
    String reqBodyIncludingAuthQuery=helper.getRequestBodyString(true);
    String[] params=reqBodyIncludingAuthQuery.split(""String_Node_Str"");
    Arrays.sort(params);
    assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},params);
  }
}"
46679,"/** 
 * The OAuth 1.0 Protocol の仕様に合う形で文字列をパーセントエンコードする. パーセントエンコードの対象になるのは 'A'-'Z', 'a'-'z', '0'-'9', '-', '.', '_', '~' を除く全ての文字である.
 * @param str パーセントエンコードの対象文字列
 * @return str をパーセントエンコードした文字列
 */
static public String encode(String str){
  String encodedStr=null;
  ByteArrayOutputStream os=null;
  try {
    os=new ByteArrayOutputStream();
    for (    byte b : str.getBytes(Charset.forName(""String_Node_Str""))) {
      if (b < 0 || NEED_ENCODE[b]) {
        os.write(37);
        os.write(BS[(b >> 4) & 0x0F]);
        os.write(BS[b & 0x0F]);
      }
 else {
        os.write(b);
      }
    }
    encodedStr=os.toString();
  }
  finally {
    try {
      if (os != null)       os.close();
    }
 catch (    IOException err) {
      err.printStackTrace();
    }
  }
  return encodedStr;
}","/** 
 * Encodes a character string using percent-encoding method for OAuth 1.0 Protocol.
 * @param str the character string to encode
 * @return The resulting encoded character string.
 */
public static String encode(String str){
  ByteArrayOutputStream os=new ByteArrayOutputStream(str.length());
  for (  byte b : str.getBytes(StandardCharsets.UTF_8)) {
    if (b < 0 || NEED_ENCODE[b]) {
      os.write(37);
      os.write(BS[(b >> 4) & 0x0F]);
      os.write(BS[b & 0x0F]);
    }
 else {
      os.write(b);
    }
  }
  return new String(os.toByteArray(),StandardCharsets.US_ASCII);
}"
46680,"public JsonArray(){
  super();
}","public JsonArray(){
  super();
  ID=new Object();
}"
46681,"public JsonObject(){
  super();
}","public JsonObject(){
  super();
  ID=new Object();
}"
46682,"public int next(){
  int cp=str.codePointAt(index);
  index+=Character.charCount(cp);
  return cp;
}","public int next(){
  if (length <= index) {
    return -1;
  }
  int cp=str.codePointAt(index);
  index+=Character.charCount(cp);
  return cp;
}"
46683,"static public JsonValue parse(String jsonStr){
  Tokenizer t=new Tokenizer(jsonStr);
  Token token=t.getNextToken();
  if (token == null) {
    throw new RuntimeException(""String_Node_Str"" + jsonStr + ""String_Node_Str"");
  }
  JsonValue val=null;
  if (token.type == Token.TokenType.BEGIN_ARRAY) {
    val=parseArray(t,new JsonArray());
  }
 else   if (token.type == Token.TokenType.BEGIN_OBJECT) {
    val=parseObject(t,new JsonObject());
  }
 else {
    throw new RuntimeException();
  }
  if ((token=t.getNextToken()) != null) {
    throw new RuntimeException();
  }
  return val;
}","static public JsonValue parse(String jsonStr){
  Tokenizer t=new Tokenizer(jsonStr);
  Token token=t.getNextToken();
  if (token == null) {
    throw new InvalidJsonException(""String_Node_Str"" + jsonStr + ""String_Node_Str"");
  }
  JsonValue val=null;
  if (token.type == Token.TokenType.BEGIN_ARRAY) {
    val=parseArray(t,new JsonArray());
  }
 else   if (token.type == Token.TokenType.BEGIN_OBJECT) {
    val=parseObject(t,new JsonObject());
  }
 else {
    throw new InvalidJsonException(""String_Node_Str"" + jsonStr + ""String_Node_Str"");
  }
  if ((token=t.getNextToken()) != null) {
    throw new RuntimeException();
  }
  return val;
}"
46684,"static private void serializeJObject(StringBuilder sb,JsonObject jobject){
  sb.append(""String_Node_Str"");
  String[] keys=jobject.keySet().toArray(new String[0]);
  if (keys.length != 0) {
    String key=keys[0];
    serializeJString(sb,key);
    sb.append(""String_Node_Str"");
    serializeAnyJValue(sb,jobject.get(key));
  }
  for (int i=1; i < keys.length; i++) {
    sb.append(""String_Node_Str"");
    String key=keys[i];
    serializeJString(sb,key);
    sb.append(""String_Node_Str"");
    serializeAnyJValue(sb,jobject.get(key));
  }
  sb.append(""String_Node_Str"");
}","static private void serializeJObject(StringBuilder sb,JsonObject jobject,Set<Object> ancestorIdSet){
  if (ancestorIdSet.contains(jobject.ID)) {
    throw new InvalidJsonException(""String_Node_Str"");
  }
  ancestorIdSet.add(jobject.ID);
  sb.append(""String_Node_Str"");
  String[] keys=jobject.keySet().toArray(new String[0]);
  if (keys.length != 0) {
    String key=keys[0];
    serializeJString(sb,key);
    sb.append(""String_Node_Str"");
    serializeAnyJValue(sb,jobject.get(key),ancestorIdSet);
  }
  for (int i=1; i < keys.length; i++) {
    sb.append(""String_Node_Str"");
    String key=keys[i];
    serializeJString(sb,key);
    sb.append(""String_Node_Str"");
    serializeAnyJValue(sb,jobject.get(key),ancestorIdSet);
  }
  sb.append(""String_Node_Str"");
  ancestorIdSet.remove(jobject.ID);
}"
46685,"static public String serialize(JsonValue jvalue){
  if (jvalue.valueType() != ValueType.ARRAY_VALUE && jvalue.valueType() != ValueType.OBJECT_VALUE) {
    throw new RuntimeException();
  }
  StringBuilder sb=new StringBuilder();
  serializeAnyJValue(sb,jvalue);
  return sb.toString();
}","static public String serialize(JsonValue jvalue){
  if (jvalue.valueType() != ValueType.ARRAY_VALUE && jvalue.valueType() != ValueType.OBJECT_VALUE) {
    throw new InvalidJsonException(ERRMSG_NOT_OBJ_OR_ARR_SERIALIZATION);
  }
  StringBuilder sb=new StringBuilder();
  serializeAnyJValue(sb,jvalue,new HashSet<Object>());
  return sb.toString();
}"
46686,"static void serializeAnyJValue(StringBuilder sb,JsonValue jvalue){
switch (jvalue.valueType()) {
case OBJECT_VALUE:
    serializeJObject(sb,jvalue.objectValue());
  break;
case ARRAY_VALUE:
serializeJArray(sb,jvalue.arrayValue());
break;
case STRING_VALUE:
serializeJString(sb,jvalue.stringValue());
break;
case NUMBER_VALUE:
serializeJNumber(sb,jvalue.numberValue());
break;
case BOOLEAN_VALUE:
sb.append(jvalue.booleanValue() ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case NULL_VALUE:
sb.append(""String_Node_Str"");
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
}","static void serializeAnyJValue(StringBuilder sb,JsonValue jvalue,Set<Object> ancestorIdSet){
switch (jvalue.valueType()) {
case OBJECT_VALUE:
    serializeJObject(sb,jvalue.objectValue(),ancestorIdSet);
  break;
case ARRAY_VALUE:
serializeJArray(sb,jvalue.arrayValue(),ancestorIdSet);
break;
case STRING_VALUE:
serializeJString(sb,jvalue.stringValue());
break;
case NUMBER_VALUE:
serializeJNumber(sb,jvalue.numberValue());
break;
case BOOLEAN_VALUE:
sb.append(jvalue.booleanValue() ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case NULL_VALUE:
sb.append(""String_Node_Str"");
break;
default :
throw new InvalidJsonException(""String_Node_Str"" + jvalue.valueType() + ""String_Node_Str"");
}
}"
46687,"static private void serializeJArray(StringBuilder sb,JsonArray jarray){
  sb.append(""String_Node_Str"");
  JsonValue[] vs=jarray.toArray(new JsonValue[0]);
  if (vs.length != 0) {
    serializeAnyJValue(sb,vs[0]);
  }
  for (int i=1; i < vs.length; i++) {
    sb.append(""String_Node_Str"");
    serializeAnyJValue(sb,vs[i]);
  }
  sb.append(""String_Node_Str"");
}","static private void serializeJArray(StringBuilder sb,JsonArray jarray,Set<Object> ancestorIdSet){
  if (ancestorIdSet.contains(jarray.ID)) {
    throw new InvalidJsonException(""String_Node_Str"");
  }
  ancestorIdSet.add(jarray.ID);
  sb.append(""String_Node_Str"");
  JsonValue[] vs=jarray.toArray(new JsonValue[0]);
  if (vs.length != 0) {
    serializeAnyJValue(sb,vs[0],ancestorIdSet);
  }
  for (int i=1; i < vs.length; i++) {
    sb.append(""String_Node_Str"");
    serializeAnyJValue(sb,vs[i],ancestorIdSet);
  }
  sb.append(""String_Node_Str"");
  ancestorIdSet.remove(jarray.ID);
}"
46688,"/** 
 * TODO: TRES TRES CHAUD... A TESTER DE MANIERE AUTOMATISEE !!!!  {@inheritDoc}
 */
public void updateBuildStatus(List<BuildReport> buildsStatus){
  List<BuildReport> buildsStatus=new ArrayList<BuildReport>(buildsStatus);
  if (this.currentSortOrder == SORT_BY_NAME) {
    Collections.sort(buildsStatus,new BuildReport.NameComparator());
  }
 else   if (this.currentSortOrder == SORT_BY_AGE) {
    Collections.sort(buildsStatus,new BuildReport.AgeComparator());
  }
  BuildStatusUpdater updater=new BuildStatusUpdater(buildsStatus);
  javax.swing.SwingUtilities.invokeLater(updater);
  this.currentlyReportedMonitoringException=null;
  StringBuffer newFailingBuilds=new StringBuffer();
  StringBuffer fixedBuilds=new StringBuffer();
  for (  BuildReport currentBuildReport : buildsStatus) {
    for (    BuildReport previousBuildReport : this.previousBuildReports) {
      if (previousBuildReport.getId().equals(currentBuildReport.getId())) {
        if (previousBuildReport.getStatus() != currentBuildReport.getStatus()) {
          if (currentBuildReport.getStatus() == BuildReport.Status.OK) {
            fixedBuilds.append(currentBuildReport.getName() + ""String_Node_Str"");
          }
 else {
            newFailingBuilds.append(currentBuildReport.getName() + ""String_Node_Str"");
          }
        }
      }
    }
  }
  if ((newFailingBuilds.length() > 0) || (fixedBuilds.length() > 0)) {
    MessageType messageType=MessageType.INFO;
    if (newFailingBuilds.length() > 0) {
      messageType=MessageType.WARNING;
    }
    javax.swing.SwingUtilities.invokeLater(new TrayIconUpdater(null,null,""String_Node_Str"",newFailingBuilds.toString() + fixedBuilds.toString() + ""String_Node_Str"",messageType,null));
  }
  this.previousBuildReports=buildsStatus;
}","/** 
 * TODO: TRES TRES CHAUD... A TESTER DE MANIERE AUTOMATISEE !!!!  {@inheritDoc}
 */
public void updateBuildStatus(List<BuildReport> buildsStatus){
  buildsStatus=new ArrayList<BuildReport>(buildsStatus);
  if (this.currentSortOrder == SORT_BY_NAME) {
    Collections.sort(buildsStatus,new BuildReport.NameComparator());
  }
 else   if (this.currentSortOrder == SORT_BY_AGE) {
    Collections.sort(buildsStatus,new BuildReport.AgeComparator());
  }
  BuildStatusUpdater updater=new BuildStatusUpdater(buildsStatus);
  javax.swing.SwingUtilities.invokeLater(updater);
  this.currentlyReportedMonitoringException=null;
  StringBuffer newFailingBuilds=new StringBuffer();
  StringBuffer fixedBuilds=new StringBuffer();
  for (  BuildReport currentBuildReport : buildsStatus) {
    for (    BuildReport previousBuildReport : this.previousBuildReports) {
      if (previousBuildReport.getId().equals(currentBuildReport.getId())) {
        if (previousBuildReport.getStatus() != currentBuildReport.getStatus()) {
          if (currentBuildReport.getStatus() == BuildReport.Status.OK) {
            fixedBuilds.append(currentBuildReport.getName() + ""String_Node_Str"");
          }
 else {
            newFailingBuilds.append(currentBuildReport.getName() + ""String_Node_Str"");
          }
        }
      }
    }
  }
  if ((newFailingBuilds.length() > 0) || (fixedBuilds.length() > 0)) {
    MessageType messageType=MessageType.INFO;
    if (newFailingBuilds.length() > 0) {
      messageType=MessageType.WARNING;
    }
    javax.swing.SwingUtilities.invokeLater(new TrayIconUpdater(null,null,""String_Node_Str"",newFailingBuilds.toString() + fixedBuilds.toString() + ""String_Node_Str"",messageType,null));
  }
  this.previousBuildReports=buildsStatus;
}"
46689,"public void characters(char[] characters,int startIndex,int length){
  String characters=new String(characters,startIndex,length).trim();
  String trimedCharacters=characters.replace(""String_Node_Str"",""String_Node_Str"");
  if (!""String_Node_Str"".equals(trimedCharacters)) {
    setCurrentItemAttribute(characters);
  }
}","public void characters(char[] chars,int startIndex,int length){
  String characters=new String(chars,startIndex,length).trim();
  String trimedCharacters=characters.replace(""String_Node_Str"",""String_Node_Str"");
  if (!""String_Node_Str"".equals(trimedCharacters)) {
    setCurrentItemAttribute(characters);
  }
}"
46690,"public R317LoginDecoder(ReactorSession session){
  super(session);
  loginRequestDecoder=new R317LoginRequestDecoder(session);
  new LoginRequestConsumer();
}","public R317LoginDecoder(ReactorSession session){
  super(session);
  loginRequestDecoder=new R317LoginRequestDecoder(session);
  loginBlockDecoder=new R317LoginBlockDecoder(session);
  new LoginRequestConsumer();
}"
46691,"@Override public void execute() throws IOException {
  selector.selectNow();
  for (  SelectionKey selectionKey : selector.selectedKeys()) {
    produce(new ReactorEvent(selector,selectionKey));
  }
}","@Override public void execute() throws IOException {
  selector.selectNow();
  for (  SelectionKey selectionKey : selector.selectedKeys()) {
    produce(new ReactorEvent(selector,selectionKey));
  }
  selector.selectedKeys().clear();
}"
46692,"public static void serveRead(ReactorSession session) throws IOException {
  ByteBuffer buffer=session.getInBuffer();
  SocketChannel socketChannel=(SocketChannel)session.getSelectionKey().channel();
  int amount=socketChannel.read(buffer);
  if (amount == -1) {
    session.disconnect();
    return;
  }
  if (amount == 0) {
    return;
  }
  buffer.flip();
  Message message=null;
  if ((message=session.getDecoder().decode(buffer)) == null) {
    buffer.flip();
    buffer.compact();
    return;
  }
  session.produce(message);
}","public static void serveRead(ReactorSession session) throws IOException {
  ByteBuffer buffer=session.getInBuffer();
  SocketChannel socketChannel=(SocketChannel)session.getSelectionKey().channel();
  int amount=socketChannel.read(buffer);
  if (amount == -1) {
    session.disconnect();
    return;
  }
  if (amount == 0) {
    return;
  }
  buffer.flip();
  Message message=null;
  if ((message=session.getDecoder().decode(buffer)) == null) {
    buffer.flip();
    buffer.compact();
    return;
  }
  buffer.clear();
  session.produce(message);
}"
46693,"private void updateTimeSeries(int node,int batt){
switch (node) {
case 1:
    this.battNode1.add(new Second(),batt);
  break;
case 2:
this.battNode2.add(new Second(),batt);
break;
case 3:
this.battNode3.add(new Second(),batt);
break;
case 4:
this.battNode4.add(new Second(),batt);
break;
case 5:
this.battNode5.add(new Second(),batt);
break;
default :
break;
}
}","private void updateTimeSeries(int node,int batt){
switch (node) {
case 1:
    this.battNode1.addOrUpdate(new Second(),batt);
  break;
case 2:
this.battNode2.addOrUpdate(new Second(),batt);
break;
case 3:
this.battNode3.addOrUpdate(new Second(),batt);
break;
case 4:
this.battNode4.addOrUpdate(new Second(),batt);
break;
case 5:
this.battNode5.addOrUpdate(new Second(),batt);
break;
default :
break;
}
}"
46694,"public void populate(String[] arrs){
  nickname=arrs[0];
  datetime=new Date(Integer.parseInt(arrs[1]) * 1000);
  message=arrs[2];
}","public void populate(String[] arrs){
  nickname=arrs[0];
  datetime=new Date(Long.parseLong(arrs[1]) * 1000);
  message=arrs[2];
}"
46695,"@Override public void widgetSelected(SelectionEvent event){
  TableItem item=table.getSelection()[0];
  String text=item.getText(2);
  Matcher matcher=linkPattern.matcher(text);
  if (matcher.matches()) {
    String link=matcher.group();
    Program.launch(link);
  }
}","@Override public void widgetSelected(SelectionEvent event){
  TableItem item=table.getSelection()[0];
  String text=item.getText(2);
  Matcher matcher=linkPattern.matcher(text);
  if (matcher.find()) {
    String link=matcher.group();
    Program.launch(link);
  }
}"
46696,"public Shell initUi(Display display){
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  Image icon=new Image(display,is);
  final Shell shell=new Shell(display);
  shell.setText(""String_Node_Str"");
  shell.setImage(icon);
  shell.setLayout(new FormLayout());
  this.gray=new Color(display,0x60,0x60,0xa0);
  FontData[] fds=shell.getFont().getFontData();
  FontData[] ns=new FontData[fds.length];
  for (int i=0; i < fds.length; i++) {
    ns[i]=new FontData(fds[i].getName(),fds[i].getHeight(),fds[i].getStyle() | SWT.ITALIC);
  }
  this.italic=new Font(display,ns);
  FormData formData;
  this.date=new DateTime(shell,SWT.DATE);
  formData=new FormData();
  formData.left=new FormAttachment(0,5);
  formData.top=new FormAttachment(0,5);
  date.setLayoutData(formData);
  Calendar cal=Calendar.getInstance();
  date.setDate(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH),cal.get(Calendar.DAY_OF_MONTH));
  date.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      try {
        load();
      }
 catch (      Exception e) {
        MessageBox box=new MessageBox(shell,SWT.OK);
        box.setText(""String_Node_Str"" + e.getMessage());
        box.open();
      }
    }
  }
);
  this.reloadButton=new Button(shell,SWT.PUSH);
  reloadButton.setText(""String_Node_Str"");
  formData=new FormData();
  formData.left=new FormAttachment(date,5);
  formData.top=new FormAttachment(0,5);
  reloadButton.setLayoutData(formData);
  reloadButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      try {
        load();
      }
 catch (      Exception e) {
        MessageBox box=new MessageBox(shell,SWT.OK);
        box.setText(""String_Node_Str"" + e.getMessage());
        box.open();
      }
    }
  }
);
  this.table=new Table(shell,SWT.SINGLE | SWT.BORDER);
  formData=new FormData();
  formData.left=new FormAttachment(0,5);
  formData.right=new FormAttachment(100,-5);
  formData.top=new FormAttachment(date,5);
  formData.bottom=new FormAttachment(100,-5);
  table.setLayoutData(formData);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  final TableColumn nickname=new TableColumn(table,SWT.NULL);
  nickname.setText(""String_Node_Str"");
  final TableColumn time=new TableColumn(table,SWT.CENTER);
  time.setText(""String_Node_Str"");
  final TableColumn message=new TableColumn(table,SWT.NULL);
  message.setText(""String_Node_Str"");
  table.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      int width=table.getClientArea().width;
      nickname.setWidth(96);
      time.setWidth(60);
      message.setWidth(width - 96 - 60);
    }
  }
);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      TableItem item=table.getSelection()[0];
      String text=item.getText(2);
      Matcher matcher=linkPattern.matcher(text);
      if (matcher.matches()) {
        String link=matcher.group();
        Program.launch(link);
      }
    }
  }
);
  return shell;
}","public Shell initUi(Display display){
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  Image icon=new Image(display,is);
  final Shell shell=new Shell(display);
  shell.setText(""String_Node_Str"");
  shell.setImage(icon);
  shell.setLayout(new FormLayout());
  this.gray=new Color(display,0x60,0x60,0xa0);
  FontData[] fds=shell.getFont().getFontData();
  FontData[] ns=new FontData[fds.length];
  for (int i=0; i < fds.length; i++) {
    ns[i]=new FontData(fds[i].getName(),fds[i].getHeight(),fds[i].getStyle() | SWT.ITALIC);
  }
  this.italic=new Font(display,ns);
  FormData formData;
  this.date=new DateTime(shell,SWT.DATE);
  formData=new FormData();
  formData.left=new FormAttachment(0,5);
  formData.top=new FormAttachment(0,5);
  date.setLayoutData(formData);
  Calendar cal=Calendar.getInstance();
  date.setDate(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH),cal.get(Calendar.DAY_OF_MONTH));
  date.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      try {
        load();
      }
 catch (      Exception e) {
        MessageBox box=new MessageBox(shell,SWT.OK);
        box.setText(""String_Node_Str"" + e.getMessage());
        box.open();
      }
    }
  }
);
  this.reloadButton=new Button(shell,SWT.PUSH);
  reloadButton.setText(""String_Node_Str"");
  formData=new FormData();
  formData.left=new FormAttachment(date,5);
  formData.top=new FormAttachment(0,5);
  reloadButton.setLayoutData(formData);
  reloadButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      try {
        load();
      }
 catch (      Exception e) {
        MessageBox box=new MessageBox(shell,SWT.OK);
        box.setText(""String_Node_Str"" + e.getMessage());
        box.open();
      }
    }
  }
);
  this.table=new Table(shell,SWT.SINGLE | SWT.BORDER);
  formData=new FormData();
  formData.left=new FormAttachment(0,5);
  formData.right=new FormAttachment(100,-5);
  formData.top=new FormAttachment(date,5);
  formData.bottom=new FormAttachment(100,-5);
  table.setLayoutData(formData);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  final TableColumn nickname=new TableColumn(table,SWT.NULL);
  nickname.setText(""String_Node_Str"");
  final TableColumn time=new TableColumn(table,SWT.CENTER);
  time.setText(""String_Node_Str"");
  final TableColumn message=new TableColumn(table,SWT.NULL);
  message.setText(""String_Node_Str"");
  table.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      int width=table.getClientArea().width;
      nickname.setWidth(96);
      time.setWidth(60);
      message.setWidth(width - 96 - 60);
    }
  }
);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      TableItem item=table.getSelection()[0];
      String text=item.getText(2);
      Matcher matcher=linkPattern.matcher(text);
      if (matcher.find()) {
        String link=matcher.group();
        Program.launch(link);
      }
    }
  }
);
  return shell;
}"
46697,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View v=convertView;
  if (v == null) {
    LayoutInflater vi=(LayoutInflater)this.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    v=vi.inflate(R.layout.list_item,null);
  }
  String s=items.get(position);
  if (s != null) {
    TextView tt=(TextView)v.findViewById(R.id.listText);
    if (tt != null) {
      tt.setText(s);
    }
  }
  return v;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View v=convertView;
  if (v == null) {
    LayoutInflater vi=(LayoutInflater)this.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    v=vi.inflate(R.layout.list_item,null);
  }
  String s=items.get(position);
  if (s != null) {
    TextView tt=(TextView)v.findViewById(R.id.listText);
    if (tt != null) {
      tt.setText(Html.fromHtml(s));
    }
  }
  return v;
}"
46698,"public String getStringFromSingleElement(String tag,Element root){
  Element e=(Element)root.getElementsByTagName(tag).item(0);
  return e.getFirstChild().getNodeValue();
}","public String getStringFromSingleElement(String tag,Element root){
  Element e=(Element)root.getElementsByTagName(tag).item(0);
  Node n=(Node)e;
  return this.buildText(n);
}"
46699,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.product);
  initMap();
  Bundle recdData=getIntent().getExtras();
  Product p=(Product)recdData.getSerializable(""String_Node_Str"");
  String breadCrumb=recdData.getString(""String_Node_Str"");
  setTitle(breadCrumb);
  TextView t=(TextView)findViewById(R.id.title);
  t.setText(p.getName());
  t=(TextView)findViewById(R.id.price);
  t.setText(Product.CURRENCY + ""String_Node_Str"" + p.getPrice());
  Object obj=fetch(p.getImgSrc());
  if (obj != null) {
    Drawable img=Drawable.createFromStream((InputStream)obj,""String_Node_Str"");
    ImageView imgView=(ImageView)findViewById(R.id.image);
    imgView.setImageDrawable(img);
  }
  String[] fields;
switch (p.getCategoryId()) {
case 1:
    fields=dvd_fields;
  break;
case 2:
fields=book_fields;
break;
default :
fields=dvd_fields;
}
int i=0;
for (String fieldName : fields) {
t=(TextView)findViewById(textFieldIds[i]);
String value=p.getProperty(fieldName);
t.setText(getText(translationsId.get(fieldName)) + ""String_Node_Str"" + value);
if (value != null) {
i++;
}
}
for (; i < textFieldIds.length; i++) {
t=(TextView)findViewById(textFieldIds[i]);
t.setText(""String_Node_Str"");
}
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.product);
  initMap();
  Bundle recdData=getIntent().getExtras();
  Product p=(Product)recdData.getSerializable(""String_Node_Str"");
  String breadCrumb=recdData.getString(""String_Node_Str"");
  setTitle(Html.fromHtml(breadCrumb));
  TextView t=(TextView)findViewById(R.id.title);
  t.setText(p.getName());
  t=(TextView)findViewById(R.id.price);
  t.setText(Product.CURRENCY + ""String_Node_Str"" + p.getPrice());
  Object obj=fetch(p.getImgSrc());
  if (obj != null) {
    Drawable img=Drawable.createFromStream((InputStream)obj,""String_Node_Str"");
    ImageView imgView=(ImageView)findViewById(R.id.image);
    imgView.setImageDrawable(img);
  }
  String[] fields;
switch (p.getCategoryId()) {
case 1:
    fields=dvd_fields;
  break;
case 2:
fields=book_fields;
break;
default :
fields=dvd_fields;
}
int i=0;
for (String fieldName : fields) {
t=(TextView)findViewById(textFieldIds[i]);
String value=p.getProperty(fieldName);
t.setText(getText(translationsId.get(fieldName)) + ""String_Node_Str"" + value);
if (value != null) {
i++;
}
}
for (; i < textFieldIds.length; i++) {
t=(TextView)findViewById(textFieldIds[i]);
t.setText(""String_Node_Str"");
}
}"
46700,"@SuppressWarnings(""String_Node_Str"") @Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle recdData=getIntent().getExtras();
  currList=(List<Product>)recdData.getSerializable(""String_Node_Str"");
  String breadCrumb=recdData.getString(""String_Node_Str"");
  setTitle(breadCrumb);
  String[] products=getProductNames();
  setListAdapter(new CustomAdapter(this,R.layout.list_item,products));
  ListView lv=getListView();
  lv.setTextFilterEnabled(true);
  Animation a=AnimationUtils.makeInAnimation(getBaseContext(),false);
  a.setDuration(500);
  lv.setAnimation(a);
}","@SuppressWarnings(""String_Node_Str"") @Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle recdData=getIntent().getExtras();
  currList=(List<Product>)recdData.getSerializable(""String_Node_Str"");
  String breadCrumb=recdData.getString(""String_Node_Str"");
  setTitle(Html.fromHtml(breadCrumb));
  String[] products=getProductNames();
  setListAdapter(new CustomAdapter(this,R.layout.list_item,products));
  ListView lv=getListView();
  lv.setTextFilterEnabled(true);
  Animation a=AnimationUtils.makeInAnimation(getBaseContext(),false);
  a.setDuration(500);
  lv.setAnimation(a);
}"
46701,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle recdData=getIntent().getExtras();
  int catPos=Integer.parseInt(recdData.getString(""String_Node_Str""));
  String breadCrumb=recdData.getString(""String_Node_Str"");
  setTitle(breadCrumb + ""String_Node_Str"");
  CategoryManager catManager=CategoryManager.getInstance();
  setListAdapter(new CustomAdapter(this,R.layout.list_item,catManager.getSubCategoryNames(catPos)));
  ListView lv=getListView();
  lv.setTextFilterEnabled(true);
  Animation a=AnimationUtils.makeInAnimation(getBaseContext(),false);
  a.setDuration(500);
  lv.setAnimation(a);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle recdData=getIntent().getExtras();
  int catPos=Integer.parseInt(recdData.getString(""String_Node_Str""));
  String breadCrumb=recdData.getString(""String_Node_Str"");
  setTitle(Html.fromHtml(breadCrumb + ""String_Node_Str""));
  CategoryManager catManager=CategoryManager.getInstance();
  setListAdapter(new CustomAdapter(this,R.layout.list_item,catManager.getSubCategoryNames(catPos)));
  ListView lv=getListView();
  lv.setTextFilterEnabled(true);
  Animation a=AnimationUtils.makeInAnimation(getBaseContext(),false);
  a.setDuration(500);
  lv.setAnimation(a);
}"
46702,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle b=getIntent().getExtras();
  int latitude=new Integer(b.getString(""String_Node_Str""));
  int longitude=new Integer(b.getString(""String_Node_Str""));
  setContentView(R.layout.map);
  MapView mapView=(MapView)findViewById(R.id.mapview);
  mapView.setBuiltInZoomControls(true);
  MapController myMapController=mapView.getController();
  GeoPoint point=new GeoPoint(latitude * 1000000,longitude * 1000000);
  myMapController.setCenter(point);
  myMapController.setZoom(10);
  List<Overlay> mapOverlays=mapView.getOverlays();
  Drawable drawable=this.getResources().getDrawable(R.drawable.map_pin);
  OrderOverlay itemizedoverlay=new OrderOverlay(drawable);
  OverlayItem overlayitem=new OverlayItem(point,""String_Node_Str"",""String_Node_Str"");
  itemizedoverlay.addOverlay(overlayitem);
  mapOverlays.add(itemizedoverlay);
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle b=getIntent().getExtras();
  int latitude=new Integer(b.getString(""String_Node_Str""));
  int longitude=new Integer(b.getString(""String_Node_Str""));
  setContentView(R.layout.map);
  MapView mapView=(MapView)findViewById(R.id.mapview);
  mapView.setBuiltInZoomControls(true);
  MapController myMapController=mapView.getController();
  GeoPoint point=new GeoPoint(latitude * 1000000,longitude * 1000000);
  myMapController.setCenter(point);
  myMapController.setZoom(10);
  List<Overlay> mapOverlays=mapView.getOverlays();
  Drawable drawable=this.getResources().getDrawable(R.drawable.map_pin);
  OrderOverlay itemizedoverlay=new OrderOverlay(drawable,this);
  OverlayItem overlayitem=new OverlayItem(point,""String_Node_Str"",""String_Node_Str"");
  itemizedoverlay.addOverlay(overlayitem);
  mapOverlays.add(itemizedoverlay);
}"
46703,"@Override protected boolean onTap(int index){
  OverlayItem item=mOverlays.get(index);
  AlertDialog.Builder dialog=new AlertDialog.Builder(mContext);
  dialog.setTitle(item.getTitle());
  dialog.setMessage(item.getSnippet());
  dialog.show();
  return true;
}","@Override protected boolean onTap(int index){
  OverlayItem item=mOverlays.get(index);
  AlertDialog.Builder dialog=new AlertDialog.Builder(this.mContext);
  dialog.setTitle(item.getTitle());
  dialog.setMessage(item.getSnippet());
  dialog.show();
  return true;
}"
46704,"public OrderOverlay(Drawable defaultMarker,Context context){
  super(defaultMarker);
  mContext=context;
}","public OrderOverlay(Drawable defaultMarker,Context context){
  super(boundCenterBottom(defaultMarker));
  this.mContext=context;
}"
46705,"@Override public void onPlayerBucketFill(PlayerBucketFillEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!permissionsResolver.isAllowedToInteractWithBlock(event.getPlayer(),event.getPlayer().getLocation().getBlock())) {
    Chat.sendMessage(event.getPlayer(),Translate.get(""String_Node_Str""));
    event.setCancelled(true);
  }
}","@Override public void onPlayerBucketFill(PlayerBucketFillEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!permissionsResolver.isAllowedToInteractWithBlock(event.getPlayer(),event.getBlockClicked())) {
    Chat.sendMessage(event.getPlayer(),Translate.get(""String_Node_Str""));
    event.setCancelled(true);
  }
}"
46706,"@Override public void onPlayerBucketEmpty(PlayerBucketEmptyEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!permissionsResolver.isAllowedToInteractWithBlock(event.getPlayer(),event.getPlayer().getLocation().getBlock())) {
    Chat.sendMessage(event.getPlayer(),Translate.get(""String_Node_Str""));
    event.setCancelled(true);
  }
}","@Override public void onPlayerBucketEmpty(PlayerBucketEmptyEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!permissionsResolver.isAllowedToInteractWithBlock(event.getPlayer(),event.getBlockClicked())) {
    Chat.sendMessage(event.getPlayer(),Translate.get(""String_Node_Str""));
    event.setCancelled(true);
  }
}"
46707,"/** 
 * Checks if the player is allowed to interact with the passed block.
 * @param player          player to check
 * @param blockToInteract the block to interact
 * @return true, if the player is allowed to interact
 */
public boolean isAllowedToInteractWithBlock(Player player,Block blockToInteract){
  if (isTrustedPlayer(player) || isAdmin(player)) {
    return true;
  }
  Inhabitant inhabitant=nation.getInhabitant(player.getName());
  Residence residencesAtLocation=nation.getResidence(blockToInteract.getLocation());
  return residencesAtLocation != null && canBuildAndDestroy(residencesAtLocation,inhabitant);
}","/** 
 * Checks if the player is allowed to interact with the passed block.
 * @param player          player to check
 * @param blockToInteract the block to interact
 * @return true, if the player is allowed to interact
 */
public boolean isAllowedToInteractWithBlock(Player player,Block blockToInteract){
  if (isTrustedPlayer(player) || isAdmin(player)) {
    return true;
  }
  Inhabitant inhabitant=nation.getInhabitant(player.getName());
  Residence residencesAtLocation=nation.getResidence(blockToInteract.getLocation());
  return residencesAtLocation == null || canBuildAndDestroy(residencesAtLocation,inhabitant);
}"
46708,"public void searchInvalidResidences(final InvalidResidenceListener invalidResidenceListener){
  final List<List<ResidenceSign>> residenceSignPackages=new LinkedList<List<ResidenceSign>>();
  final List<Residence> invalidResidences=new LinkedList<Residence>();
  List<ResidenceSign> residenceSigns=getDatabase().find(ResidenceSign.class).findList();
  plugin.info(""String_Node_Str"",residenceSigns.size());
  for (int index=0; index < residenceSigns.size(); index+=5) {
    List<ResidenceSign> residenceSignPackage=residenceSigns.subList(index,Math.min(residenceSigns.size() - index,5));
    residenceSignPackages.add(residenceSignPackage);
  }
  plugin.info(""String_Node_Str"",residenceSignPackages.size());
  Runnable delayedTask=new Runnable(){
    public void run(){
      try {
        plugin.info(""String_Node_Str"");
        plugin.info(""String_Node_Str"",residenceSignPackages.size());
        List<ResidenceSign> residenceSignsToCheck=residenceSignPackages.remove(0);
        plugin.info(""String_Node_Str"",residenceSignsToCheck.size());
        for (        ResidenceSign residenceSign : residenceSignsToCheck) {
          plugin.info(""String_Node_Str"",residenceSign.getWorld(),residenceSign.getX(),residenceSign.getY(),residenceSign.getZ(),residenceSign.getResidenceId());
          Block residenceSignBlock=plugin.getServer().getWorld(residenceSign.getWorld()).getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ());
          if (!(residenceSignBlock.getType().equals(Material.SIGN_POST) || residenceSignBlock.getType().equals(Material.WALL_SIGN))) {
            invalidResidences.add(getResidence(residenceSign.getResidenceId()));
          }
        }
        if (!residenceSignPackages.isEmpty()) {
          plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,this,5);
        }
 else {
          invalidResidenceListener.invalidResidencesFound(invalidResidences);
        }
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
;
  plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,delayedTask);
}","public void searchInvalidResidences(final InvalidResidenceListener invalidResidenceListener){
  final List<List<ResidenceSign>> residenceSignPackages=new LinkedList<List<ResidenceSign>>();
  final List<Residence> invalidResidences=new LinkedList<Residence>();
  List<ResidenceSign> residenceSigns=getDatabase().find(ResidenceSign.class).findList();
  plugin.info(""String_Node_Str"",residenceSigns.size());
  for (int index=0; index < residenceSigns.size(); index+=5) {
    List<ResidenceSign> residenceSignPackage=residenceSigns.subList(index,index + Math.min(residenceSigns.size() - index,5));
    residenceSignPackages.add(residenceSignPackage);
  }
  plugin.info(""String_Node_Str"",residenceSignPackages.size());
  Runnable delayedTask=new Runnable(){
    public void run(){
      try {
        plugin.info(""String_Node_Str"");
        plugin.info(""String_Node_Str"",residenceSignPackages.size());
        List<ResidenceSign> residenceSignsToCheck=residenceSignPackages.remove(0);
        plugin.info(""String_Node_Str"",residenceSignsToCheck.size());
        for (        ResidenceSign residenceSign : residenceSignsToCheck) {
          plugin.info(""String_Node_Str"",residenceSign.getWorld(),residenceSign.getX(),residenceSign.getY(),residenceSign.getZ(),residenceSign.getResidenceId());
          Block residenceSignBlock=plugin.getServer().getWorld(residenceSign.getWorld()).getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ());
          if (!(residenceSignBlock.getType().equals(Material.SIGN_POST) || residenceSignBlock.getType().equals(Material.WALL_SIGN))) {
            invalidResidences.add(getResidence(residenceSign.getResidenceId()));
          }
        }
        if (!residenceSignPackages.isEmpty()) {
          plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,this,5);
        }
 else {
          invalidResidenceListener.invalidResidencesFound(invalidResidences);
        }
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
;
  plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,delayedTask);
}"
46709,"/** 
 * Loads the translations from file system.
 * @param languageCode the code of the language to retrieve. (for example de or en).
 */
public static void load(String languageCode){
  File translationFile=new File(""String_Node_Str"" + languageCode.toLowerCase() + ""String_Node_Str"");
  if (!(translationFile.exists() && translationFile.canRead())) {
    translationFile=new File(""String_Node_Str"");
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"" + ""String_Node_Str"");
  }
  translations=new Configuration(translationFile);
  translations.load();
}","/** 
 * Loads the translations from file system.
 * @param languageCode the code of the language to retrieve. (for example de or en).
 */
public static void load(String languageCode){
  File translationFile=new File(""String_Node_Str"" + languageCode.toLowerCase() + ""String_Node_Str"");
  if (!(translationFile.exists() && translationFile.canRead())) {
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"" + ""String_Node_Str"");
    translations=Bukkit.getServer().getPluginManager().getPlugin(""String_Node_Str"").getConfiguration();
  }
 else {
    translations=new Configuration(translationFile);
    translations.load();
  }
}"
46710,"public void searchInvalidResidences(final InvalidResidenceListener invalidResidenceListener){
  final List<List<ResidenceSign>> residenceSignPackages=new LinkedList<List<ResidenceSign>>();
  final List<Residence> invalidResidences=new LinkedList<Residence>();
  List<ResidenceSign> residenceSigns=getDatabase().find(ResidenceSign.class).findList();
  plugin.info(""String_Node_Str"",residenceSigns.size());
  for (int index=0; index < residenceSigns.size(); index+=5) {
    List<ResidenceSign> residenceSignPackage=residenceSigns.subList(index,index + Math.min(residenceSigns.size() - index,5));
    residenceSignPackages.add(residenceSignPackage);
  }
  plugin.info(""String_Node_Str"",residenceSignPackages.size());
  Runnable delayedTask=new Runnable(){
    public void run(){
      try {
        plugin.info(""String_Node_Str"");
        plugin.info(""String_Node_Str"",residenceSignPackages.size());
        List<ResidenceSign> residenceSignsToCheck=residenceSignPackages.remove(0);
        plugin.info(""String_Node_Str"",residenceSignsToCheck.size());
        for (        ResidenceSign residenceSign : residenceSignsToCheck) {
          plugin.info(""String_Node_Str"",residenceSign.getWorld(),residenceSign.getX(),residenceSign.getY(),residenceSign.getZ(),residenceSign.getResidenceId());
          Block residenceSignBlock=plugin.getServer().getWorld(residenceSign.getWorld()).getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ());
          if (!(residenceSignBlock.getType().equals(Material.SIGN_POST) || residenceSignBlock.getType().equals(Material.WALL_SIGN))) {
            invalidResidences.add(getResidence(residenceSign.getResidenceId()));
          }
        }
        if (!residenceSignPackages.isEmpty()) {
          plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,this,5);
        }
 else {
          invalidResidenceListener.invalidResidencesFound(invalidResidences);
        }
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
;
  plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,delayedTask);
}","public void searchInvalidResidences(final InvalidResidenceListener invalidResidenceListener){
  Runnable delayedTask=new Runnable(){
    private List<List<ResidenceSign>> residenceSignPackages;
    private List<Residence> invalidResidences=new LinkedList<Residence>();
    public void run(){
      try {
        if (residenceSignPackages == null) {
          List<ResidenceSign> residenceSigns=getDatabase().find(ResidenceSign.class).findList();
          plugin.info(""String_Node_Str"",residenceSigns.size());
          residenceSignPackages=new LinkedList<List<ResidenceSign>>();
          for (int index=0; index < residenceSigns.size(); index+=5) {
            List<ResidenceSign> residenceSignPackage=residenceSigns.subList(index,index + Math.min(residenceSigns.size() - index,5));
            residenceSignPackage.add(residenceSignPackage);
          }
          plugin.info(""String_Node_Str"",residenceSignPackages.size());
        }
        plugin.info(""String_Node_Str"");
        plugin.info(""String_Node_Str"",residenceSignPackages.size());
        List<ResidenceSign> residenceSignsToCheck=residenceSignPackages.remove(0);
        plugin.info(""String_Node_Str"",residenceSignsToCheck.size());
        for (        ResidenceSign residenceSign : residenceSignsToCheck) {
          plugin.info(""String_Node_Str"",residenceSign.getWorld(),residenceSign.getX(),residenceSign.getY(),residenceSign.getZ(),residenceSign.getResidenceId());
          Block residenceSignBlock=plugin.getServer().getWorld(residenceSign.getWorld()).getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ());
          if (!(residenceSignBlock.getType().equals(Material.SIGN_POST) || residenceSignBlock.getType().equals(Material.WALL_SIGN))) {
            invalidResidences.add(getResidence(residenceSign.getResidenceId()));
          }
        }
        if (!residenceSignPackages.isEmpty()) {
          plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,this,5);
        }
 else {
          invalidResidenceListener.invalidResidencesFound(invalidResidences);
        }
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
;
  plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,delayedTask);
}"
46711,"public void run(){
  try {
    plugin.info(""String_Node_Str"");
    plugin.info(""String_Node_Str"",residenceSignPackages.size());
    List<ResidenceSign> residenceSignsToCheck=residenceSignPackages.remove(0);
    plugin.info(""String_Node_Str"",residenceSignsToCheck.size());
    for (    ResidenceSign residenceSign : residenceSignsToCheck) {
      plugin.info(""String_Node_Str"",residenceSign.getWorld(),residenceSign.getX(),residenceSign.getY(),residenceSign.getZ(),residenceSign.getResidenceId());
      Block residenceSignBlock=plugin.getServer().getWorld(residenceSign.getWorld()).getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ());
      if (!(residenceSignBlock.getType().equals(Material.SIGN_POST) || residenceSignBlock.getType().equals(Material.WALL_SIGN))) {
        invalidResidences.add(getResidence(residenceSign.getResidenceId()));
      }
    }
    if (!residenceSignPackages.isEmpty()) {
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,this,5);
    }
 else {
      invalidResidenceListener.invalidResidencesFound(invalidResidences);
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public void run(){
  try {
    if (residenceSignPackages == null) {
      List<ResidenceSign> residenceSigns=getDatabase().find(ResidenceSign.class).findList();
      plugin.info(""String_Node_Str"",residenceSigns.size());
      residenceSignPackages=new LinkedList<List<ResidenceSign>>();
      for (int index=0; index < residenceSigns.size(); index+=5) {
        List<ResidenceSign> residenceSignPackage=residenceSigns.subList(index,index + Math.min(residenceSigns.size() - index,5));
        residenceSignPackage.add(residenceSignPackage);
      }
      plugin.info(""String_Node_Str"",residenceSignPackages.size());
    }
    plugin.info(""String_Node_Str"");
    plugin.info(""String_Node_Str"",residenceSignPackages.size());
    List<ResidenceSign> residenceSignsToCheck=residenceSignPackages.remove(0);
    plugin.info(""String_Node_Str"",residenceSignsToCheck.size());
    for (    ResidenceSign residenceSign : residenceSignsToCheck) {
      plugin.info(""String_Node_Str"",residenceSign.getWorld(),residenceSign.getX(),residenceSign.getY(),residenceSign.getZ(),residenceSign.getResidenceId());
      Block residenceSignBlock=plugin.getServer().getWorld(residenceSign.getWorld()).getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ());
      if (!(residenceSignBlock.getType().equals(Material.SIGN_POST) || residenceSignBlock.getType().equals(Material.WALL_SIGN))) {
        invalidResidences.add(getResidence(residenceSign.getResidenceId()));
      }
    }
    if (!residenceSignPackages.isEmpty()) {
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,this,5);
    }
 else {
      invalidResidenceListener.invalidResidencesFound(invalidResidences);
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}"
46712,"/** 
 * Returns a manager for the town.
 * @param town the manager for the town.
 * @return the town.
 */
public TownManager getTownManager(Town town){
  return new PersistTownManager(this,town);
}","/** 
 * Returns a manager for the town.
 * @param town the manager for the town.
 * @return the town.
 */
public TownManager getTownManager(Town town){
  if (town != null) {
    return new PersistTownManager(this,town);
  }
 else {
    return wildnessManager;
  }
}"
46713,"/** 
 * Creates a new Nation for the passed plugin.
 * @param plugin the plugin to create the nation.
 */
public PersistNation(MyResidence plugin){
  this.plugin=plugin;
}","/** 
 * Creates a new Nation for the passed plugin.
 * @param plugin the plugin to create the nation.
 */
public PersistNation(MyResidence plugin){
  this.plugin=plugin;
  this.wildnessManager=new PersistWildnessManager(this);
}"
46714,"/** 
 * Loads the translations from file system.
 * @param languageCode the code of the language to retrieve. (for example de or en).
 */
public static void load(String languageCode){
  File translationFile=new File(Translate.class.getClassLoader().getResource(""String_Node_Str"" + languageCode.toLowerCase() + ""String_Node_Str"").toExternalForm());
  if (!(translationFile.exists() && translationFile.canRead())) {
    translationFile=new File(Translate.class.getClassLoader().getResource(""String_Node_Str"").toExternalForm());
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"" + ""String_Node_Str"");
  }
  translations=new Configuration(translationFile);
  translations.load();
}","/** 
 * Loads the translations from file system.
 * @param languageCode the code of the language to retrieve. (for example de or en).
 */
public static void load(String languageCode){
  File translationFile=new File(""String_Node_Str"" + languageCode.toLowerCase() + ""String_Node_Str"");
  if (!(translationFile.exists() && translationFile.canRead())) {
    translationFile=new File(""String_Node_Str"");
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"" + ""String_Node_Str"");
  }
  translations=new Configuration(translationFile);
  translations.load();
}"
46715,"/** 
 * Checks if the session has major rights in the town.
 * @param town the town to check.
 * @return true, if the session has enough rights.
 */
public boolean hasMajorRights(Town town){
  return nation.getTownManager(town).isMajor(nation.getInhabitant(getPlayerId())) || player.hasPermission(""String_Node_Str"");
}","/** 
 * Checks if the session has major rights in the town.
 * @param town the town to check.
 * @return true, if the session has enough rights.
 */
public boolean hasMajorRights(Town town){
  return nation.getTownManager(town).isMajor(nation.getInhabitant(getPlayerId())) || hasPermission(""String_Node_Str"");
}"
46716,"/** 
 * Checks if the session has owner rights for the residence.
 * @param residence the residence to check.
 * @return true, if the session has enough rights.
 */
public boolean hasResidenceOwnerRights(Residence residence){
  return getPlayerId() == residence.getOwnerId() || player.hasPermission(""String_Node_Str"");
}","/** 
 * Checks if the session has owner rights for the residence.
 * @param residence the residence to check.
 * @return true, if the session has enough rights.
 */
public boolean hasResidenceOwnerRights(Residence residence){
  return getPlayerId() == residence.getOwnerId() || hasPermission(""String_Node_Str"");
}"
46717,"public void searchInvalidResidences(final InvalidResidenceListener invalidResidenceListener){
  final List<List<ResidenceSign>> residenceSignPackages=new LinkedList<List<ResidenceSign>>();
  final List<Residence> invalidResidences=new LinkedList<Residence>();
  List<ResidenceSign> residenceSigns=getDatabase().find(ResidenceSign.class).findList();
  while (!residenceSigns.isEmpty()) {
    List<ResidenceSign> residenceSignPackage=residenceSigns.subList(0,Math.min(residenceSigns.size(),5));
    residenceSignPackages.add(residenceSignPackage);
    residenceSigns.removeAll(residenceSignPackage);
  }
  plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
    public void run(){
      List<ResidenceSign> residenceSignsToCheck=residenceSignPackages.get(0);
      residenceSignPackages.remove(residenceSignsToCheck);
      for (      ResidenceSign residenceSign : residenceSignsToCheck) {
        Block residenceSignBlock=plugin.getServer().getWorld(residenceSign.getWorld()).getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ());
        if (!residenceSignBlock.getType().equals(Material.SIGN_POST) || residenceSignBlock.getType().equals(Material.WALL_SIGN)) {
          invalidResidences.add(getResidence(residenceSign.getResidenceId()));
        }
      }
      if (!residenceSignPackages.isEmpty()) {
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,this);
      }
 else {
        invalidResidenceListener.invalidResidencesFound(invalidResidences);
      }
    }
  }
);
}","public void searchInvalidResidences(final InvalidResidenceListener invalidResidenceListener){
  final List<List<ResidenceSign>> residenceSignPackages=new LinkedList<List<ResidenceSign>>();
  final List<Residence> invalidResidences=new LinkedList<Residence>();
  List<ResidenceSign> residenceSigns=getDatabase().find(ResidenceSign.class).findList();
  while (!residenceSigns.isEmpty()) {
    List<ResidenceSign> residenceSignPackage=residenceSigns.subList(0,Math.min(residenceSigns.size(),5));
    residenceSignPackages.add(residenceSignPackage);
    residenceSigns.removeAll(residenceSignPackage);
  }
  plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
    public void run(){
      List<ResidenceSign> residenceSignsToCheck=residenceSignPackages.get(0);
      residenceSignPackages.remove(residenceSignsToCheck);
      for (      ResidenceSign residenceSign : residenceSignsToCheck) {
        Block residenceSignBlock=plugin.getServer().getWorld(residenceSign.getWorld()).getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ());
        if (!(residenceSignBlock.getType().equals(Material.SIGN_POST) || residenceSignBlock.getType().equals(Material.WALL_SIGN))) {
          invalidResidences.add(getResidence(residenceSign.getResidenceId()));
        }
      }
      if (!residenceSignPackages.isEmpty()) {
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,this);
      }
 else {
        invalidResidenceListener.invalidResidencesFound(invalidResidences);
      }
    }
  }
);
}"
46718,"public void run(){
  List<ResidenceSign> residenceSignsToCheck=residenceSignPackages.get(0);
  residenceSignPackages.remove(residenceSignsToCheck);
  for (  ResidenceSign residenceSign : residenceSignsToCheck) {
    Block residenceSignBlock=plugin.getServer().getWorld(residenceSign.getWorld()).getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ());
    if (!residenceSignBlock.getType().equals(Material.SIGN_POST) || residenceSignBlock.getType().equals(Material.WALL_SIGN)) {
      invalidResidences.add(getResidence(residenceSign.getResidenceId()));
    }
  }
  if (!residenceSignPackages.isEmpty()) {
    plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,this);
  }
 else {
    invalidResidenceListener.invalidResidencesFound(invalidResidences);
  }
}","public void run(){
  List<ResidenceSign> residenceSignsToCheck=residenceSignPackages.get(0);
  residenceSignPackages.remove(residenceSignsToCheck);
  for (  ResidenceSign residenceSign : residenceSignsToCheck) {
    Block residenceSignBlock=plugin.getServer().getWorld(residenceSign.getWorld()).getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ());
    if (!(residenceSignBlock.getType().equals(Material.SIGN_POST) || residenceSignBlock.getType().equals(Material.WALL_SIGN))) {
      invalidResidences.add(getResidence(residenceSign.getResidenceId()));
    }
  }
  if (!residenceSignPackages.isEmpty()) {
    plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,this);
  }
 else {
    invalidResidenceListener.invalidResidencesFound(invalidResidences);
  }
}"
46719,"/** 
 * Setups the commands.
 */
private void setupCommands(){
  final MyResidence plugin=this;
  commands=new CommandsManager<Player>(){
    @Override public boolean hasPermission(    Player player,    String permission){
      return player.hasPermission(permission);
    }
  }
;
  commands.register(GeneralCommands.class);
  commands.register(MapCommand.class);
  commands.register(HomeCommands.class);
  commands.register(LikeCommands.class);
}","/** 
 * Setups the commands.
 */
private void setupCommands(){
  final MyResidence plugin=this;
  commands=new CommandsManager<Player>(){
    @Override public boolean hasPermission(    Player player,    String permission){
      return nation.getPermissionsResolver().hasPermission(player,permission);
    }
  }
;
  commands.register(GeneralCommands.class);
  commands.register(MapCommand.class);
  commands.register(HomeCommands.class);
  commands.register(LikeCommands.class);
}"
46720,"@Override public boolean hasPermission(Player player,String permission){
  return player.hasPermission(permission);
}","@Override public boolean hasPermission(Player player,String permission){
  return nation.getPermissionsResolver().hasPermission(player,permission);
}"
46721,"/** 
 * Checks if the session is a session of an Administrator.
 * @param player player to check the permissions for.
 * @return true, if the player owns the trusted permission.
 */
public boolean isTrustedPlayer(Player player){
  return player.hasPermission(TRUSTED_PERMISSION);
}","/** 
 * Checks if the session is a session of an Administrator.
 * @param player player to check the permissions for.
 * @return true, if the player owns the trusted permission.
 */
public boolean isTrustedPlayer(Player player){
  return hasPermission(player,TRUSTED_PERMISSION);
}"
46722,"/** 
 * Checks if the session is a session of an Administrator.
 * @param player player to check the permissions for.
 * @return true, if the player owns the administrator permission.
 */
public boolean isAdmin(Player player){
  return player.hasPermission(ADMIN_PERMISSION);
}","/** 
 * Checks if the session is a session of an Administrator.
 * @param player player to check the permissions for.
 * @return true, if the player owns the administrator permission.
 */
public boolean isAdmin(Player player){
  return hasPermission(player,ADMIN_PERMISSION);
}"
46723,"@Command(aliases={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",min=1,flags=""String_Node_Str"") @CommandPermissions({""String_Node_Str"",""String_Node_Str""}) public static void create(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws IncompleteRegionException, MyResidenceException {
  final Selection selection=plugin.getWorldEdit().getSelection(player);
  if (selection == null) {
    throw new IncompleteRegionException();
  }
  final boolean buildInWildness=args.hasFlag('w');
  if (buildInWildness && !session.hasPermission(""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  if (!buildInWildness && !session.hasPermission(""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  final Town town=nation.getTown(player.getLocation());
  if (!buildInWildness) {
    if (town == null) {
      throw new MyResidenceException(""String_Node_Str"");
    }
 else     if (!nation.getChunkManager().hasChunks(town,selection.getWorld(),selection.getRegionSelector().getRegion().getChunks())) {
      throw new MyResidenceException(""String_Node_Str"");
    }
  }
  session.setTask(new Runnable(){
    public void run(){
      final Residence residence=new Residence();
      residence.setName(args.getJoinedStrings(0));
      residence.setOwnerId(session.getPlayerId());
      if (!buildInWildness) {
        residence.setTownId(town.getId());
      }
      nation.save(residence);
      ResidenceManager manager=nation.getResidenceManager(residence);
      manager.setSign(session.getSelectedSignBlock());
      manager.setArea(selection);
      Chat.sendMessage(player,""String_Node_Str"",residence);
      plugin.info(""String_Node_Str"",residence,residence.getId(),player.getName());
      plugin.getEventManager().callEvent(new ResidenceCreatedEvent(session,residence));
    }
  }
);
  session.setTaskActivator(Session.Activator.SELECT_SIGN);
  Chat.sendMessage(player,""String_Node_Str"");
}","@Command(aliases={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",min=1,flags=""String_Node_Str"") @CommandPermissions({""String_Node_Str"",""String_Node_Str""}) public static void create(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws IncompleteRegionException, MyResidenceException {
  final Selection selection=plugin.getWorldEdit().getSelection(player);
  if (selection == null) {
    throw new IncompleteRegionException();
  }
  final boolean buildInWildness=args.hasFlag('w');
  if (buildInWildness && !nation.getPermissionsResolver().hasPermission(player,""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  if (!buildInWildness && !nation.getPermissionsResolver().hasPermission(player,""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  final Town town=nation.getTown(player.getLocation());
  if (!buildInWildness) {
    if (town == null) {
      throw new MyResidenceException(""String_Node_Str"");
    }
 else     if (!nation.getChunkManager().hasChunks(town,selection.getWorld(),selection.getRegionSelector().getRegion().getChunks())) {
      throw new MyResidenceException(""String_Node_Str"");
    }
  }
  session.setTask(new Runnable(){
    public void run(){
      final Residence residence=new Residence();
      residence.setName(args.getJoinedStrings(0));
      residence.setOwnerId(session.getPlayerId());
      if (!buildInWildness) {
        residence.setTownId(town.getId());
      }
      nation.save(residence);
      ResidenceManager manager=nation.getResidenceManager(residence);
      manager.setSign(session.getSelectedSignBlock());
      manager.setArea(selection);
      Chat.sendMessage(player,""String_Node_Str"",residence);
      plugin.info(""String_Node_Str"",residence,residence.getId(),player.getName());
      plugin.getEventManager().callEvent(new ResidenceCreatedEvent(session,residence));
    }
  }
);
  session.setTaskActivator(Session.Activator.SELECT_SIGN);
  Chat.sendMessage(player,""String_Node_Str"");
}"
46724,"@Command(aliases={""String_Node_Str"",""String_Node_Str""},desc=""String_Node_Str"",flags=""String_Node_Str"",max=0) @CommandPermissions({""String_Node_Str""}) public static void claimChunk(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws MyResidenceException {
  final Town selectedTown=session.getSelectedTown();
  final Chunk playerChunk=player.getLocation().getBlock().getChunk();
  final Vector2D chunkVector=new Vector2D(playerChunk.getX(),playerChunk.getZ());
  final World chunkWorld=playerChunk.getWorld();
  if (!session.hasMajorRights(selectedTown)) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  if (args.hasFlag('i') && !session.hasPermission(""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  Town chunkOwner=nation.getChunkManager().getChunkOwner(chunkWorld,chunkVector);
  if (chunkOwner != null) {
    if (chunkOwner.equals(selectedTown)) {
      throw new MyResidenceException(""String_Node_Str"");
    }
 else     if (!args.hasFlag('i')) {
      throw new MyResidenceException(""String_Node_Str"");
    }
  }
  double chunkCost=plugin.getConfiguration(player.getWorld()).getChunkCost();
  double townMoney=selectedTown.getMoney();
  if (townMoney < chunkCost) {
    throw new NotEnoughMoneyException(chunkCost);
  }
 else {
    selectedTown.subtractMoney(chunkCost);
  }
  nation.getChunkManager().addChunk(selectedTown,chunkWorld,chunkVector);
  player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.GREEN+ plugin.format(chunkCost)+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
}","@Command(aliases={""String_Node_Str"",""String_Node_Str""},desc=""String_Node_Str"",flags=""String_Node_Str"",max=0) @CommandPermissions({""String_Node_Str""}) public static void claimChunk(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws MyResidenceException {
  final Town selectedTown=session.getSelectedTown();
  final Chunk playerChunk=player.getLocation().getBlock().getChunk();
  final Vector2D chunkVector=new Vector2D(playerChunk.getX(),playerChunk.getZ());
  final World chunkWorld=playerChunk.getWorld();
  if (!session.hasMajorRights(selectedTown)) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  if (args.hasFlag('i') && !nation.getPermissionsResolver().isAdmin(player)) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  Town chunkOwner=nation.getChunkManager().getChunkOwner(chunkWorld,chunkVector);
  if (chunkOwner != null) {
    if (chunkOwner.equals(selectedTown)) {
      throw new MyResidenceException(""String_Node_Str"");
    }
 else     if (!args.hasFlag('i')) {
      throw new MyResidenceException(""String_Node_Str"");
    }
  }
  double chunkCost=plugin.getConfiguration(player.getWorld()).getChunkCost();
  double townMoney=selectedTown.getMoney();
  if (townMoney < chunkCost) {
    throw new NotEnoughMoneyException(chunkCost);
  }
 else {
    selectedTown.subtractMoney(chunkCost);
  }
  nation.getChunkManager().addChunk(selectedTown,chunkWorld,chunkVector);
  player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.GREEN+ plugin.format(chunkCost)+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
}"
46725,"@Command(aliases={""String_Node_Str"",""String_Node_Str""},desc=""String_Node_Str"",flags=""String_Node_Str"",max=0) @CommandPermissions({""String_Node_Str""}) public static void claimSelection(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws IncompleteRegionException, MyResidenceException {
  ChunkManager chunkManager=nation.getChunkManager();
  final Town selectedTown=session.getSelectedTown();
  final World selectedWorld=plugin.getWorldEdit().getSelection(player).getWorld();
  final Region selectedRegion=plugin.getWorldEdit().getSelection(player).getRegionSelector().getRegion();
  if (!session.hasMajorRights(selectedTown)) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  if (args.hasFlag('i') && !session.hasPermission(""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  int numberOfChunksToBought=0;
  for (  final Vector2D chunk : selectedRegion.getChunks()) {
    Town chunkOwner=chunkManager.getChunkOwner(selectedWorld,chunk);
    if (chunkOwner == null) {
      numberOfChunksToBought++;
    }
 else     if (chunkOwner != selectedTown && args.hasFlag('i')) {
      throw new MyResidenceException(""String_Node_Str"");
    }
  }
  double chunkCost=plugin.getConfiguration(player.getWorld()).getChunkCost();
  double cost=chunkCost * numberOfChunksToBought;
  if (selectedTown.getMoney() < cost) {
    throw new NotEnoughMoneyException(chunkCost * numberOfChunksToBought);
  }
  chunkManager.addChunks(selectedTown,selectedWorld,selectedRegion.getChunks());
  selectedTown.subtractMoney(cost);
  nation.save(selectedTown);
  player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.GREEN+ numberOfChunksToBought+ ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.GREEN+ plugin.format(cost)+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
}","@Command(aliases={""String_Node_Str"",""String_Node_Str""},desc=""String_Node_Str"",flags=""String_Node_Str"",max=0) @CommandPermissions({""String_Node_Str""}) public static void claimSelection(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws IncompleteRegionException, MyResidenceException {
  ChunkManager chunkManager=nation.getChunkManager();
  final Town selectedTown=session.getSelectedTown();
  final World selectedWorld=plugin.getWorldEdit().getSelection(player).getWorld();
  final Region selectedRegion=plugin.getWorldEdit().getSelection(player).getRegionSelector().getRegion();
  if (!session.hasMajorRights(selectedTown)) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  if (args.hasFlag('i') && !nation.getPermissionsResolver().isAdmin(player)) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  int numberOfChunksToBought=0;
  for (  final Vector2D chunk : selectedRegion.getChunks()) {
    Town chunkOwner=chunkManager.getChunkOwner(selectedWorld,chunk);
    if (chunkOwner == null) {
      numberOfChunksToBought++;
    }
 else     if (chunkOwner != selectedTown && args.hasFlag('i')) {
      throw new MyResidenceException(""String_Node_Str"");
    }
  }
  double chunkCost=plugin.getConfiguration(player.getWorld()).getChunkCost();
  double cost=chunkCost * numberOfChunksToBought;
  if (selectedTown.getMoney() < cost) {
    throw new NotEnoughMoneyException(chunkCost * numberOfChunksToBought);
  }
  chunkManager.addChunks(selectedTown,selectedWorld,selectedRegion.getChunks());
  selectedTown.subtractMoney(cost);
  nation.save(selectedTown);
  player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.GREEN+ numberOfChunksToBought+ ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.GREEN+ plugin.format(cost)+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
}"
46726,"/** 
 * Loads the translations from file system.
 * @param languageCode the code of the language to retrieve. (for example de or en).
 */
public static void load(String languageCode){
  File translationFile=new File(""String_Node_Str"" + languageCode.toLowerCase() + ""String_Node_Str"");
  if (!(translationFile.exists() && translationFile.canRead())) {
    translationFile=new File(""String_Node_Str"");
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"" + ""String_Node_Str"");
  }
  translations=new Configuration(translationFile);
}","/** 
 * Loads the translations from file system.
 * @param languageCode the code of the language to retrieve. (for example de or en).
 */
public static void load(String languageCode){
  File translationFile=new File(Translate.class.getClassLoader().getResource(""String_Node_Str"" + languageCode.toLowerCase() + ""String_Node_Str"").toExternalForm());
  if (!(translationFile.exists() && translationFile.canRead())) {
    translationFile=new File(Translate.class.getClassLoader().getResource(""String_Node_Str"").toExternalForm());
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"" + ""String_Node_Str"");
  }
  translations=new Configuration(translationFile);
}"
46727,"@Override public void onBlockBreak(BlockBreakEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (permissionsResolver.isAllowedToDestroyBlockAt(event.getPlayer(),event.getBlock())) {
    Chat.sendMessage(event.getPlayer(),Translate.get(""String_Node_Str""));
    event.setCancelled(true);
  }
}","@Override public void onBlockBreak(BlockBreakEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!permissionsResolver.isAllowedToDestroyBlockAt(event.getPlayer(),event.getBlock())) {
    Chat.sendMessage(event.getPlayer(),Translate.get(""String_Node_Str""));
    event.setCancelled(true);
  }
}"
46728,"@Override public void onBlockPlace(BlockPlaceEvent event){
  if (event.isCancelled() || !event.canBuild()) {
    return;
  }
  if (permissionsResolver.isAllowedToPlaceBlockAt(event.getPlayer(),event.getBlockPlaced())) {
    Chat.sendMessage(event.getPlayer(),Translate.get(""String_Node_Str""));
    event.setBuild(false);
  }
}","@Override public void onBlockPlace(BlockPlaceEvent event){
  if (event.isCancelled() || !event.canBuild()) {
    return;
  }
  if (!permissionsResolver.isAllowedToPlaceBlockAt(event.getPlayer(),event.getBlockPlaced())) {
    Chat.sendMessage(event.getPlayer(),Translate.get(""String_Node_Str""));
    event.setBuild(false);
  }
}"
46729,"/** 
 * Setups the commands.
 */
private void setupCommands(){
  commands=new CommandsManager<Player>(){
    @Override public boolean hasPermission(    Player player,    String permission){
      return hasPermission(player,permission);
    }
  }
;
  commands.register(GeneralCommands.class);
  commands.register(MapCommand.class);
  commands.register(HomeCommands.class);
  commands.register(LikeCommands.class);
}","/** 
 * Setups the commands.
 */
private void setupCommands(){
  final MyResidence plugin=this;
  commands=new CommandsManager<Player>(){
    @Override public boolean hasPermission(    Player player,    String permission){
      return plugin.hasPermission(player,permission);
    }
  }
;
  commands.register(GeneralCommands.class);
  commands.register(MapCommand.class);
  commands.register(HomeCommands.class);
  commands.register(LikeCommands.class);
}"
46730,"@Override public boolean hasPermission(Player player,String permission){
  return hasPermission(player,permission);
}","@Override public boolean hasPermission(Player player,String permission){
  return plugin.hasPermission(player,permission);
}"
46731,"public void run(){
  nation.getDatabase().delete(residenceToRemove);
  nation.getDatabase().delete(residenceArea);
  nation.getDatabase().delete(residenceSign);
  Chat.sendMessage(player,""String_Node_Str"",residenceToRemove);
  plugin.getEventManager().callEvent(new ResidenceRemovedEvent(session,residenceToRemove));
}","public void run(){
  plugin.getEventManager().callEvent(new ResidenceRemovedEvent(session,residenceToRemove));
  nation.getDatabase().delete(residenceToRemove);
  nation.getDatabase().delete(residenceArea);
  nation.getDatabase().delete(residenceSign);
  Chat.sendMessage(player,""String_Node_Str"",residenceToRemove);
}"
46732,"@Command(aliases={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",max=0) @CommandPermissions({""String_Node_Str""}) public static void remove(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws NoResidenceSelectedException, PermissionsDeniedException {
  final Residence residenceToRemove=session.getSelectedResidence();
  final ResidenceArea residenceArea=nation.getDatabase().find(ResidenceArea.class).where().eq(""String_Node_Str"",residenceToRemove.getId()).findUnique();
  final ResidenceSign residenceSign=nation.getDatabase().find(ResidenceSign.class).where().eq(""String_Node_Str"",residenceToRemove.getId()).findUnique();
  World signWorld=player.getServer().getWorld(residenceSign.getWorld());
  final Sign sign=(Sign)signWorld.getBlockAt(new Location(signWorld,residenceSign.getX(),residenceSign.getY(),residenceSign.getZ())).getState();
  if (!session.hasResidenceOwnerRights(residenceToRemove)) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  session.setTask(new Runnable(){
    public void run(){
      nation.getDatabase().delete(residenceToRemove);
      nation.getDatabase().delete(residenceArea);
      nation.getDatabase().delete(residenceSign);
      Chat.sendMessage(player,""String_Node_Str"",residenceToRemove);
      plugin.getEventManager().callEvent(new ResidenceRemovedEvent(session,residenceToRemove));
    }
  }
);
  session.setTaskActivator(Session.Activator.CONFIRM_COMMAND);
  Chat.sendMessage(player,""String_Node_Str"",residenceToRemove);
  Chat.sendMessage(player,""String_Node_Str"");
}","@Command(aliases={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",max=0) @CommandPermissions({""String_Node_Str""}) public static void remove(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws NoResidenceSelectedException, PermissionsDeniedException {
  final Residence residenceToRemove=session.getSelectedResidence();
  final ResidenceArea residenceArea=nation.getDatabase().find(ResidenceArea.class).where().eq(""String_Node_Str"",residenceToRemove.getId()).findUnique();
  final ResidenceSign residenceSign=nation.getDatabase().find(ResidenceSign.class).where().eq(""String_Node_Str"",residenceToRemove.getId()).findUnique();
  World signWorld=player.getServer().getWorld(residenceSign.getWorld());
  final Sign sign=(Sign)signWorld.getBlockAt(new Location(signWorld,residenceSign.getX(),residenceSign.getY(),residenceSign.getZ())).getState();
  if (!session.hasResidenceOwnerRights(residenceToRemove)) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  session.setTask(new Runnable(){
    public void run(){
      plugin.getEventManager().callEvent(new ResidenceRemovedEvent(session,residenceToRemove));
      nation.getDatabase().delete(residenceToRemove);
      nation.getDatabase().delete(residenceArea);
      nation.getDatabase().delete(residenceSign);
      Chat.sendMessage(player,""String_Node_Str"",residenceToRemove);
    }
  }
);
  session.setTaskActivator(Session.Activator.CONFIRM_COMMAND);
  Chat.sendMessage(player,""String_Node_Str"",residenceToRemove);
  Chat.sendMessage(player,""String_Node_Str"");
}"
46733,"/** 
 * @return the sign of the residence. 
 */
Block getSign();","/** 
 * @return the sign of the residence. 
 */
Block getSign() throws ResidenceSignMissingException ;"
46734,"/** 
 * Removes the session of the passed player.
 * @param player the player who's session should be removed.
 */
public void close(Player player){
  sessionMap.remove(sessionMap.get(player));
}","/** 
 * Removes the session of the passed player.
 * @param player the player who's session should be removed.
 */
public void close(Player player){
  sessionMap.remove(player);
}"
46735,"/** 
 * Called when player interacts with the world.
 * @param event event occurred itself.
 */
@Override public void onPlayerInteract(PlayerInteractEvent event){
  if (event.isCancelled() || !(event.getClickedBlock().getType().equals(Material.SIGN_POST) || event.getClickedBlock().getType().equals(Material.WALL_SIGN))) {
    return;
  }
  Sign clickedSign=(Sign)event.getClickedBlock().getState();
  Session playerSession=plugin.getSessionManager().get(event.getPlayer());
  playerSession.setSelectedSign(clickedSign);
  if (Session.Activator.SELECT_SIGN.equals(playerSession.getTaskActivator())) {
    playerSession.getTask().run();
    playerSession.setTaskActivator(null);
  }
 else   if (clickedSign.getLine(0).equals(plugin.getConfiguration(clickedSign.getWorld()).getSignTitle())) {
    Residence residence=nation.getResidence(clickedSign);
    try {
      nation.sendInformation(event.getPlayer(),residence);
    }
 catch (    MyResidenceException e) {
      Location location=event.getClickedBlock().getLocation();
      plugin.severe(""String_Node_Str"",location.getWorld().getName(),location.getBlockX(),location.getBlockY(),location.getBlockZ());
      e.printStackTrace();
    }
  }
 else {
    playerSession.setSelectedSign(null);
  }
}","/** 
 * Called when player interacts with the world.
 * @param event event occurred itself.
 */
@Override public void onPlayerInteract(PlayerInteractEvent event){
  if (event.isCancelled() || !(event.getClickedBlock().getType().equals(Material.SIGN_POST) || event.getClickedBlock().getType().equals(Material.WALL_SIGN))) {
    return;
  }
  Sign clickedSign=(Sign)event.getClickedBlock().getState();
  Session playerSession=plugin.getSessionManager().get(event.getPlayer());
  playerSession.setSelectedSignBlock(event.getClickedBlock());
  if (Session.Activator.SELECT_SIGN.equals(playerSession.getTaskActivator())) {
    playerSession.getTask().run();
    playerSession.setTaskActivator(null);
  }
 else   if (clickedSign.getLine(0).equals(plugin.getConfiguration(clickedSign.getWorld()).getSignTitle())) {
    Residence residence=nation.getResidence(clickedSign);
    try {
      nation.sendInformation(event.getPlayer(),residence);
    }
 catch (    MyResidenceException e) {
      Location location=event.getClickedBlock().getLocation();
      plugin.severe(""String_Node_Str"",location.getWorld().getName(),location.getBlockX(),location.getBlockY(),location.getBlockZ());
    }
  }
 else {
    playerSession.setSelectedSignBlock(null);
  }
}"
46736,"/** 
 * Called when a residence is removed.
 * @param event the event itself.
 */
@Override public void onResidenceRemoved(ResidenceRemovedEvent event){
  try {
    Block signBlock=nation.getResidenceManager(event.getResidence()).getSign();
    Sign sign=(Sign)signBlock.getState();
    for (int index=0; index < 4; ++index) {
      sign.setLine(index,""String_Node_Str"");
    }
  }
 catch (  NullPointerException e) {
    plugin.severe(""String_Node_Str"",event.getResidence().getName());
  }
}","/** 
 * Called when a residence is removed.
 * @param event the event itself.
 */
@Override public void onResidenceRemoved(ResidenceRemovedEvent event){
  try {
    Block signBlock=nation.getResidenceManager(event.getResidence()).getSign();
    Sign sign=(Sign)signBlock.getState();
    for (int index=0; index < 4; ++index) {
      sign.setLine(index,""String_Node_Str"");
    }
  }
 catch (  ResidenceSignMissingException e) {
    plugin.severe(""String_Node_Str"",event.getResidence().getName());
  }
}"
46737,"/** 
 * Sets the area of the residence.
 * @param selection the area to set.
 */
public void setArea(Selection selection){
  ResidenceArea area=nation.getDatabase().find(ResidenceArea.class).where().eq(""String_Node_Str"",residence.getId()).findUnique();
  if (area == null) {
    area=new ResidenceArea();
    area.setResidenceId(residence.getId());
  }
  area.setWorld(selection.getWorld().getName());
  area.setHighX(selection.getMaximumPoint().getBlockX());
  area.setHighY(selection.getMaximumPoint().getBlockY());
  area.setHighZ(selection.getMaximumPoint().getBlockZ());
  area.setLowX(selection.getMinimumPoint().getBlockX());
  area.setLowY(selection.getMinimumPoint().getBlockY());
  area.setLowZ(selection.getMinimumPoint().getBlockZ());
  nation.save(selection);
}","/** 
 * Sets the area of the residence.
 * @param selection the area to set.
 */
public void setArea(Selection selection){
  ResidenceArea area=nation.getDatabase().find(ResidenceArea.class).where().eq(""String_Node_Str"",residence.getId()).findUnique();
  if (area == null) {
    area=new ResidenceArea();
    area.setResidenceId(residence.getId());
  }
  area.setWorld(selection.getWorld().getName());
  area.setHighX(selection.getMaximumPoint().getBlockX());
  area.setHighY(selection.getMaximumPoint().getBlockY());
  area.setHighZ(selection.getMaximumPoint().getBlockZ());
  area.setLowX(selection.getMinimumPoint().getBlockX());
  area.setLowY(selection.getMinimumPoint().getBlockY());
  area.setLowZ(selection.getMinimumPoint().getBlockZ());
  nation.save(area);
}"
46738,"/** 
 * @return the sign of the residence. 
 */
public Block getSign(){
  ResidenceSign residenceSign=nation.getDatabase().find(ResidenceSign.class).where().eq(""String_Node_Str"",residence.getId()).findUnique();
  if (residenceSign != null) {
    World world=plugin.getServer().getWorld(residenceSign.getWorld());
    Block block=world.getBlockAt(new Location(world,residenceSign.getX(),residenceSign.getY(),residenceSign.getZ()));
    if (block != null && block.getState() instanceof Sign) {
      return block;
    }
  }
  return null;
}","/** 
 * @return the sign of the residence. 
 */
public Block getSign() throws ResidenceSignMissingException {
  ResidenceSign residenceSign=nation.getDatabase().find(ResidenceSign.class).where().eq(""String_Node_Str"",residence.getId()).findUnique();
  if (residenceSign != null) {
    World world=Bukkit.getServer().getWorld(residenceSign.getWorld());
    Block block=world.getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ());
    if (block != null && block.getState() instanceof Sign) {
      return block;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  throw new ResidenceSignMissingException(residence);
}"
46739,"@Command(aliases={""String_Node_Str""},desc=""String_Node_Str"",max=0) public static void home(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws MyResidenceException {
}","@Command(aliases={""String_Node_Str""},desc=""String_Node_Str"") public static void home(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws MyResidenceException {
  Residence residence=nation.getResidence(session.getLastHomeResidenceId());
  if (args.argsLength() > 0) {
    List<Residence> residences=nation.findResidence(nation.getInhabitant(session.getPlayerId()),args.getJoinedStrings(0));
    if (residences.size() != 1) {
      throw new MyResidenceException(""String_Node_Str"");
    }
    residence=residences.get(0);
  }
  session.setLastHomeResidenceId(residence.getId());
  player.teleport(nation.getResidenceManager(residence).getHome());
  Chat.sendMessage(player,""String_Node_Str"");
}"
46740,"@Command(aliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",min=1,max=1) @CommandPermissions({""String_Node_Str""}) public static void sell(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws MyResidenceException {
  Residence residence=session.getSelectedResidence();
  if (!session.hasResidenceOwnerRights(residence)) {
    throw new NotOwnException();
  }
  double price=args.getDouble(0,residence.getValue());
  residence.setForSale(true);
  residence.setPrice(price);
  if (residence.getValue() <= 0.0) {
    residence.setValue(price);
  }
  nation.getDatabase().save(residence);
  Chat.sendMessage(player,""String_Node_Str"");
  plugin.getEventManager().callEvent(new ResidenceChangedEvent(session,residence));
}","@Command(aliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",min=0,max=1) @CommandPermissions({""String_Node_Str""}) public static void sell(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws MyResidenceException {
  Residence residence=session.getSelectedResidence();
  if (!session.hasResidenceOwnerRights(residence)) {
    throw new NotOwnException();
  }
  double price=args.getDouble(0,residence.getValue());
  residence.setForSale(true);
  residence.setPrice(price);
  residence.setOwnerId(session.getPlayerId());
  if (residence.getValue() <= 0.0) {
    residence.setValue(price);
  }
  nation.getDatabase().save(residence);
  Chat.sendMessage(player,""String_Node_Str"");
  plugin.getEventManager().callEvent(new ResidenceChangedEvent(session,residence));
}"
46741,"@Command(aliases={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",max=0) @CommandPermissions({""String_Node_Str""}) public static void remove(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws NoResidenceSelectedException, PermissionsDeniedException {
  final Residence residenceToRemove=session.getSelectedResidence();
  final ResidenceArea residenceArea=nation.getDatabase().find(ResidenceArea.class).where().eq(""String_Node_Str"",residenceToRemove.getId()).findUnique();
  final ResidenceSign residenceSign=nation.getDatabase().find(ResidenceSign.class).where().eq(""String_Node_Str"",residenceToRemove.getId()).findUnique();
  World signWorld=player.getServer().getWorld(residenceSign.getWorld());
  final Sign sign=(Sign)signWorld.getBlockAt(new Location(signWorld,residenceSign.getX(),residenceSign.getY(),residenceSign.getZ())).getState();
  if (!session.hasResidenceOwnerRights(residenceToRemove)) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  session.setTask(new Runnable(){
    public void run(){
      nation.getDatabase().delete(residenceToRemove);
      nation.getDatabase().delete(residenceArea);
      nation.getDatabase().delete(residenceSign);
      Chat.sendMessage(player,""String_Node_Str"",residenceToRemove);
      plugin.getEventManager().callEvent(new ResidenceRemovedEvent(session,residenceToRemove));
    }
  }
);
  session.setTaskActivator(Session.Activator.CONFIRM_COMMAND);
  player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
  Chat.sendMessage(player,""String_Node_Str"",residenceToRemove);
  Chat.sendMessage(player,""String_Node_Str"");
}","@Command(aliases={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",max=0) @CommandPermissions({""String_Node_Str""}) public static void remove(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws NoResidenceSelectedException, PermissionsDeniedException {
  final Residence residenceToRemove=session.getSelectedResidence();
  final ResidenceArea residenceArea=nation.getDatabase().find(ResidenceArea.class).where().eq(""String_Node_Str"",residenceToRemove.getId()).findUnique();
  final ResidenceSign residenceSign=nation.getDatabase().find(ResidenceSign.class).where().eq(""String_Node_Str"",residenceToRemove.getId()).findUnique();
  World signWorld=player.getServer().getWorld(residenceSign.getWorld());
  final Sign sign=(Sign)signWorld.getBlockAt(new Location(signWorld,residenceSign.getX(),residenceSign.getY(),residenceSign.getZ())).getState();
  if (!session.hasResidenceOwnerRights(residenceToRemove)) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  session.setTask(new Runnable(){
    public void run(){
      nation.getDatabase().delete(residenceToRemove);
      nation.getDatabase().delete(residenceArea);
      nation.getDatabase().delete(residenceSign);
      Chat.sendMessage(player,""String_Node_Str"",residenceToRemove);
      plugin.getEventManager().callEvent(new ResidenceRemovedEvent(session,residenceToRemove));
    }
  }
);
  session.setTaskActivator(Session.Activator.CONFIRM_COMMAND);
  Chat.sendMessage(player,""String_Node_Str"",residenceToRemove);
  Chat.sendMessage(player,""String_Node_Str"");
}"
46742,"@Command(aliases={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",min=1,flags=""String_Node_Str"") @CommandPermissions({""String_Node_Str"",""String_Node_Str""}) public static void create(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws IncompleteRegionException, MyResidenceException {
  final Selection selection=plugin.getWorldEdit().getSelection(player);
  if (selection == null) {
    throw new IncompleteRegionException();
  }
  final boolean buildInWildness=args.hasFlag('w');
  if (buildInWildness && !session.hasPermission(""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
 else   if (!session.hasPermission(""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  final Town town=nation.getTown(player.getLocation());
  if (!buildInWildness) {
    if (town == null) {
      throw new MyResidenceException(""String_Node_Str"");
    }
 else     if (!nation.getChunkManager().hasChunks(town,selection.getWorld(),selection.getRegionSelector().getRegion().getChunks())) {
      throw new MyResidenceException(""String_Node_Str"");
    }
  }
  session.setTask(new Runnable(){
    public void run(){
      final Residence residence=new Residence();
      residence.setName(args.getJoinedStrings(0));
      residence.setOwnerId(session.getPlayerId());
      if (!buildInWildness) {
        residence.setTownId(town.getId());
      }
      nation.getDatabase().save(residence);
      final ResidenceArea area=new ResidenceArea(selection);
      area.setResidenceId(residence.getId());
      nation.getDatabase().save(area);
      ResidenceSign sign=new ResidenceSign(session.getSelectedSign());
      sign.setResidenceId(residence.getId());
      nation.getDatabase().save(sign);
      Chat.sendMessage(player,""String_Node_Str"",residence);
      plugin.getEventManager().callEvent(new ResidenceCreatedEvent(session,residence));
    }
  }
);
  session.setTaskActivator(Session.Activator.SELECT_SIGN);
  Chat.sendMessage(player,""String_Node_Str"");
}","@Command(aliases={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",min=1,flags=""String_Node_Str"") @CommandPermissions({""String_Node_Str"",""String_Node_Str""}) public static void create(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws IncompleteRegionException, MyResidenceException {
  final Selection selection=plugin.getWorldEdit().getSelection(player);
  if (selection == null) {
    throw new IncompleteRegionException();
  }
  final boolean buildInWildness=args.hasFlag('w');
  if (buildInWildness && !session.hasPermission(""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
 else   if (!session.hasPermission(""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  final Town town=nation.getTown(player.getLocation());
  if (!buildInWildness) {
    if (town == null) {
      throw new MyResidenceException(""String_Node_Str"");
    }
 else     if (!nation.getChunkManager().hasChunks(town,selection.getWorld(),selection.getRegionSelector().getRegion().getChunks())) {
      throw new MyResidenceException(""String_Node_Str"");
    }
  }
  session.setTask(new Runnable(){
    public void run(){
      final Residence residence=new Residence();
      residence.setName(args.getJoinedStrings(0));
      residence.setOwnerId(session.getPlayerId());
      if (!buildInWildness) {
        residence.setTownId(town.getId());
      }
      nation.save(residence);
      ResidenceManager manager=nation.getResidenceManager(residence);
      manager.setSign(session.getSelectedSignBlock());
      manager.setArea(selection);
      Chat.sendMessage(player,""String_Node_Str"",residence);
      plugin.info(""String_Node_Str"",residence,residence.getId(),player.getName());
      plugin.getEventManager().callEvent(new ResidenceCreatedEvent(session,residence));
    }
  }
);
  session.setTaskActivator(Session.Activator.SELECT_SIGN);
  Chat.sendMessage(player,""String_Node_Str"");
}"
46743,"/** 
 * Calls a new event.
 * @param o the event to call.
 */
public void callEvent(final Object o){
  Runnable eventRunnable=new Runnable(){
    public void run(){
      for (      EventListener listener : eventListeners) {
        if (listener.canHandle(o)) {
          try {
            listener.handle(o);
          }
 catch (          Throwable e) {
            plugin.severe(""String_Node_Str"",e.getClass().getName());
            e.printStackTrace();
          }
        }
      }
    }
  }
;
  plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,eventRunnable);
}","/** 
 * Calls a new event.
 * @param o the event to call.
 */
public void callEvent(final Object o){
  Runnable eventRunnable=new Runnable(){
    public void run(){
      for (      EventListener listener : eventListeners) {
        if (listener.canHandle(o)) {
          try {
            listener.handle(o);
          }
 catch (          Throwable e) {
            plugin.severe(""String_Node_Str"",e.getClass().getName(),listener.getClass().getName());
            e.printStackTrace();
          }
        }
      }
    }
  }
;
  plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,eventRunnable);
}"
46744,"public void run(){
  for (  EventListener listener : eventListeners) {
    if (listener.canHandle(o)) {
      try {
        listener.handle(o);
      }
 catch (      Throwable e) {
        plugin.severe(""String_Node_Str"",e.getClass().getName());
        e.printStackTrace();
      }
    }
  }
}","public void run(){
  for (  EventListener listener : eventListeners) {
    if (listener.canHandle(o)) {
      try {
        listener.handle(o);
      }
 catch (      Throwable e) {
        plugin.severe(""String_Node_Str"",e.getClass().getName(),listener.getClass().getName());
        e.printStackTrace();
      }
    }
  }
}"
46745,"/** 
 * Creates a new ResidenceSignMissingException for the passed Residence.
 * @param residence the Residence which should own the sign.
 */
public ResidenceSignMissingException(Residence residence){
  super(""String_Node_Str"" + residence.getName() + ""String_Node_Str"");
  this.residence=residence;
}","/** 
 * Creates a new ResidenceSignMissingException for the passed Residence.
 * @param residence the residence to create.
 * @param message   the message to send.
 */
public ResidenceSignMissingException(Residence residence,String message){
  super(message);
  this.residence=residence;
}"
46746,"/** 
 * Called when an api gets enabled.
 * @param event the occurred event.
 */
@Override public void onPluginEnable(PluginEnableEvent event){
  if (plugin.getWorldEdit() == null && ""String_Node_Str"".equals(event.getPlugin().getDescription().getName())) {
    plugin.setWorldEdit((WorldEditPlugin)event.getPlugin());
    plugin.info(""String_Node_Str"");
  }
}","/** 
 * Called when an api gets enabled.
 * @param event the occurred event.
 */
@Override public void onPluginEnable(PluginEnableEvent event){
  if (!plugin.hasWorldEdit() && ""String_Node_Str"".equals(event.getPlugin().getDescription().getName())) {
    plugin.setWorldEdit((WorldEditPlugin)event.getPlugin());
    plugin.info(""String_Node_Str"");
  }
}"
46747,"/** 
 * Called when an api gets disabled.
 * @param event the occurred event.
 */
@Override public void onPluginDisable(PluginDisableEvent event){
  if (plugin.getWorldEdit() != null && ""String_Node_Str"".equals(event.getPlugin().getDescription().getName())) {
    plugin.setWorldEdit(null);
    plugin.info(""String_Node_Str"");
  }
}","/** 
 * Called when an api gets disabled.
 * @param event the occurred event.
 */
@Override public void onPluginDisable(PluginDisableEvent event){
  if (plugin.hasWorldEdit() && ""String_Node_Str"".equals(event.getPlugin().getDescription().getName())) {
    plugin.setWorldEdit(null);
    plugin.info(""String_Node_Str"");
  }
}"
46748,"/** 
 * Creates a new WorldEditPluginListener.
 * @param plugin the api which holds the instance.
 */
public WorldEditPluginListener(final MyResidencePlugin residencePlugin){
  this.plugin=residencePlugin;
  for (  Plugin plugin : Bukkit.getServer().getPluginManager().getPlugins()) {
    if (plugin.isEnabled()) {
      onPluginEnable(new PluginEnableEvent(plugin));
    }
  }
}","/** 
 * Creates a new WorldEditPluginListener.
 * @param residencePlugin the api which holds the instance.
 */
public WorldEditPluginListener(final MyResidencePlugin residencePlugin){
  this.plugin=residencePlugin;
  for (  Plugin plugin : Bukkit.getServer().getPluginManager().getPlugins()) {
    if (plugin.isEnabled()) {
      onPluginEnable(new PluginEnableEvent(plugin));
    }
  }
}"
46749,"/** 
 * Removes a residence.
 * @param residence residence to remove.
 */
public void remove(Residence residence){
  final ResidenceArea residenceArea=getDatabase().find(ResidenceArea.class).where().eq(""String_Node_Str"",residence.getId()).findUnique();
  final ResidenceSign residenceSign=getDatabase().find(ResidenceSign.class).where().eq(""String_Node_Str"",residence.getId()).findUnique();
  final HomePoint residenceHomes=getDatabase().find(HomePoint.class).where().eq(""String_Node_Str"",residence.getId()).findUnique();
  final List<ResidenceFlag> residenceFlags=getDatabase().find(ResidenceFlag.class).where().eq(""String_Node_Str"",residence.getId()).findList();
  final List<ResidenceMember> residenceMembers=getDatabase().find(ResidenceMember.class).where().eq(""String_Node_Str"",residence.getId()).findList();
  final List<Like> residenceLikes=getDatabase().find(Like.class).where().eq(""String_Node_Str"",residence.getId()).findList();
  World signWorld=Bukkit.getServer().getWorld(residenceSign.getWorld());
  final Sign sign=(Sign)signWorld.getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ()).getState();
  getDatabase().delete(residence);
  getDatabase().delete(residenceArea);
  getDatabase().delete(residenceSign);
  getDatabase().delete(residenceHomes);
  getDatabase().delete(residenceMembers);
  getDatabase().delete(residenceFlags);
  getDatabase().delete(residenceLikes);
}","/** 
 * Removes a residence.
 * @param residence residence to remove.
 */
public void remove(Residence residence){
  if (residence == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final ResidenceArea residenceArea=getDatabase().find(ResidenceArea.class).where().eq(""String_Node_Str"",residence.getId()).findUnique();
  final ResidenceSign residenceSign=getDatabase().find(ResidenceSign.class).where().eq(""String_Node_Str"",residence.getId()).findUnique();
  final List<HomePoint> residenceHomes=getDatabase().find(HomePoint.class).where().eq(""String_Node_Str"",residence.getId()).findList();
  final List<ResidenceFlag> residenceFlags=getDatabase().find(ResidenceFlag.class).where().eq(""String_Node_Str"",residence.getId()).findList();
  final List<ResidenceMember> residenceMembers=getDatabase().find(ResidenceMember.class).where().eq(""String_Node_Str"",residence.getId()).findList();
  final List<Like> residenceLikes=getDatabase().find(Like.class).where().eq(""String_Node_Str"",residence.getId()).findList();
  World signWorld=Bukkit.getServer().getWorld(residenceSign.getWorld());
  final Sign sign=(Sign)signWorld.getBlockAt(residenceSign.getX(),residenceSign.getY(),residenceSign.getZ()).getState();
  getDatabase().delete(residence);
  if (residenceArea != null) {
    getDatabase().delete(residenceArea);
  }
 else {
    plugin.warning(""String_Node_Str"");
  }
  getDatabase().delete(residenceSign);
  getDatabase().delete(residenceHomes);
  getDatabase().delete(residenceMembers);
  getDatabase().delete(residenceFlags);
  getDatabase().delete(residenceLikes);
}"
46750,"@Command(aliases={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",min=1,flags=""String_Node_Str"") @CommandPermissions({""String_Node_Str"",""String_Node_Str""}) public static void create(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws IncompleteRegionException, MyResidenceException {
  final Selection selection=plugin.getWorldEdit().getSelection(player);
  if (selection == null) {
    throw new IncompleteRegionException();
  }
  final boolean buildInWildness=args.hasFlag('w');
  if (buildInWildness && !session.hasPermission(""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
 else   if (!session.hasPermission(""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  final Town town=nation.getTown(player.getLocation());
  if (!buildInWildness) {
    if (town == null) {
      throw new MyResidenceException(""String_Node_Str"");
    }
 else     if (!nation.getChunkManager().hasChunks(town,selection.getWorld(),selection.getRegionSelector().getRegion().getChunks())) {
      throw new MyResidenceException(""String_Node_Str"");
    }
  }
  session.setTask(new Runnable(){
    public void run(){
      final Residence residence=new Residence();
      residence.setName(args.getJoinedStrings(0));
      residence.setOwnerId(session.getPlayerId());
      if (!buildInWildness) {
        residence.setTownId(town.getId());
      }
      nation.save(residence);
      ResidenceManager manager=nation.getResidenceManager(residence);
      manager.setSign(session.getSelectedSignBlock());
      manager.setArea(selection);
      Chat.sendMessage(player,""String_Node_Str"",residence);
      plugin.info(""String_Node_Str"",residence,residence.getId(),player.getName());
      plugin.getEventManager().callEvent(new ResidenceCreatedEvent(session,residence));
    }
  }
);
  session.setTaskActivator(Session.Activator.SELECT_SIGN);
  Chat.sendMessage(player,""String_Node_Str"");
}","@Command(aliases={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",min=1,flags=""String_Node_Str"") @CommandPermissions({""String_Node_Str"",""String_Node_Str""}) public static void create(final CommandContext args,final MyResidence plugin,final Nation nation,final Player player,final Session session) throws IncompleteRegionException, MyResidenceException {
  final Selection selection=plugin.getWorldEdit().getSelection(player);
  if (selection == null) {
    throw new IncompleteRegionException();
  }
  final boolean buildInWildness=args.hasFlag('w');
  if (buildInWildness && !player.hasPermission(""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  if (!buildInWildness && !player.hasPermission(""String_Node_Str"")) {
    throw new PermissionsDeniedException(""String_Node_Str"");
  }
  final Town town=nation.getTown(player.getLocation());
  if (!buildInWildness) {
    if (town == null) {
      throw new MyResidenceException(""String_Node_Str"");
    }
 else     if (!nation.getChunkManager().hasChunks(town,selection.getWorld(),selection.getRegionSelector().getRegion().getChunks())) {
      throw new MyResidenceException(""String_Node_Str"");
    }
  }
  session.setTask(new Runnable(){
    public void run(){
      final Residence residence=new Residence();
      residence.setName(args.getJoinedStrings(0));
      residence.setOwnerId(session.getPlayerId());
      if (!buildInWildness) {
        residence.setTownId(town.getId());
      }
      nation.save(residence);
      ResidenceManager manager=nation.getResidenceManager(residence);
      manager.setSign(session.getSelectedSignBlock());
      manager.setArea(selection);
      Chat.sendMessage(player,""String_Node_Str"",residence);
      plugin.info(""String_Node_Str"",residence,residence.getId(),player.getName());
      plugin.getEventManager().callEvent(new ResidenceCreatedEvent(session,residence));
    }
  }
);
  session.setTaskActivator(Session.Activator.SELECT_SIGN);
  Chat.sendMessage(player,""String_Node_Str"");
}"
46751,"/** 
 * Updates the sign linked to passed Residence.
 * @param residence Residence to update.
 */
void updateResidenceSign(Residence residence) throws ResidenceSignMissingException ;","/** 
 * Updates the sign linked to passed Residence.
 * @param residence Residence to update.
 * @throws ResidenceSignMissingException the sign of the Residence is missing!
 */
void updateResidenceSign(Residence residence) throws ResidenceSignMissingException ;"
46752,"/** 
 * Returns the major of the passed Town.
 * @param town the Town.
 * @return PlayerData of the major.
 */
PlayerData getMajor(Town town);","/** 
 * Returns the major of the passed Town.
 * @param town the Town.
 * @return PlayerData of the major.
 */
Inhabitant getMajor(Town town);"
46753,"/** 
 * Returns the PlayerData of the owner of the passed Residence.
 * @param residence the Residence.
 * @return PlayerData of the owner.
 */
PlayerData getOwner(Residence residence);","/** 
 * Returns the Inhabitant of the owner of the passed Residence.
 * @param residence the Residence.
 * @return PlayerData of the owner.
 */
Inhabitant getOwner(Residence residence);"
46754,"private void builtGraph(String hash,int depth){
  onStart(hash,depth);
  if (depth == 0)   return;
synchronized (alreadyScannedID) {
    if (alreadyScannedID.contains(hash))     return;
  }
  try {
    String s=urlprefix + hash;
    Source source=new Source(new URL(s));
    String renderedText=source.getRenderer().toString();
    String[] lines=renderedText.split(""String_Node_Str"");
    int i=0;
    for (; i < lines.length; i++) {
      if (lines[i].startsWith(""String_Node_Str"")) {
        break;
      }
    }
    String id=getHex(lines[i]);
    i+=2;
    String name=lines[i].substring(4).trim();
    i++;
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ id);
synchronized (alreadyScannedID) {
      alreadyScannedID.add(id);
    }
    Person to=new Person(name,id);
    java.util.List<Thread> listT=new LinkedList<Thread>();
    for (; i < lines.length; i+=2) {
      String signHex=getHex(lines[i]);
      String signName=getName(lines[i]).trim();
      Person from=new Person(signName,signHex);
      if (from.selfsigned())       continue;
      if (signHex == null)       continue;
      System.out.println(""String_Node_Str"" + signName + ""String_Node_Str""+ signHex);
synchronized (graph) {
        graph.addEdge(new Trust(),from,to);
      }
      search(signHex,depth - 1);
    }
    for (    Thread thread : listT) {
      thread.join();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
 finally {
    onFinish(hash);
  }
}","private void builtGraph(String hash,int depth){
  onStart(hash,depth);
  if (depth == 0)   return;
synchronized (alreadyScannedID) {
    if (alreadyScannedID.contains(hash))     return;
  }
  try {
    String s=urlprefix + hash;
    Source source=new Source(new URL(s));
    String renderedText=source.getRenderer().toString();
    String[] lines=renderedText.split(""String_Node_Str"");
    int i=0;
    for (; i < lines.length; i++) {
      if (lines[i].startsWith(""String_Node_Str"")) {
        break;
      }
    }
    String id=getHex(lines[i]);
    i+=2;
    String name=lines[i].substring(4).trim();
    i++;
    System.out.println(renderedText);
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ id);
synchronized (alreadyScannedID) {
      alreadyScannedID.add(id);
    }
    Person to=new Person(name,id);
    java.util.List<Thread> listT=new LinkedList<Thread>();
    for (; i < lines.length; i+=2) {
      String signHex=getHex(lines[i]);
      String signName=getName(lines[i]).trim();
      Person from=new Person(signName,signHex);
      if (from.selfsigned())       continue;
      if (signHex == null)       continue;
      System.out.println(""String_Node_Str"" + signName + ""String_Node_Str""+ signHex);
synchronized (graph) {
        graph.addEdge(new Trust(),from,to);
      }
      search(signHex,depth - 1);
    }
    for (    Thread thread : listT) {
      thread.join();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
 finally {
    onFinish(hash);
  }
}"
46755,"private void updateView(){
  CircleLayout<Person,Trust> layout=new CircleLayout<Person,Trust>(currentGraph);
  layout.setSize(getSize());
  VisualizationViewer<Person,Trust> vv=new VisualizationViewer<Person,Trust>(layout);
  vv.setPreferredSize(getSize());
  DefaultModalGraphMouse<Person,Trust> gm=new DefaultModalGraphMouse<Person,Trust>();
  gm.setMode(Mode.TRANSFORMING);
  vv.setGraphMouse(gm);
  vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller<Person>(){
    @Override public String transform(    Person v){
      return v.getName();
    }
  }
);
  add(vv);
  repaint();
}","private void updateView(){
  CircleLayout<Person,Trust> layout=new CircleLayout<Person,Trust>(currentGraph);
  layout.setSize(getSize());
  VisualizationViewer<Person,Trust> vv=new VisualizationViewer<Person,Trust>(layout);
  vv.setPreferredSize(getSize());
  DefaultModalGraphMouse<Person,Trust> gm=new DefaultModalGraphMouse<Person,Trust>();
  gm.setMode(Mode.TRANSFORMING);
  vv.setGraphMouse(gm);
  vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller<Person>(){
    @Override public String transform(    Person v){
      return v.getName();
    }
  }
);
  add(vv);
  invalidate();
  repaint();
}"
46756,"public ChainOfTrustFrame(){
  setDefaultCloseOperation(EXIT_ON_CLOSE);
  setSize(500,500);
  setJMenuBar(createMenubar());
  setLayout(new BorderLayout());
}","public ChainOfTrustFrame(){
  setDefaultCloseOperation(EXIT_ON_CLOSE);
  setSize(500,500);
  setJMenuBar(createMenubar());
  setLayout(new BorderLayout());
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosed(    WindowEvent e){
      System.exit(0);
    }
  }
);
  Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
  setLocation((d.width - getWidth()) / 2,(d.height - getHeight()) / 2);
}"
46757,"private void init(){
  lblKeys=new javax.swing.JLabel();
  scrollPane1=new javax.swing.JScrollPane();
  txtKeys=new javax.swing.JTextArea();
  lblRecur=new javax.swing.JLabel();
  sliRecur=new javax.swing.JSlider();
  lblKeyserver=new javax.swing.JLabel();
  txtKeyserver=new javax.swing.JTextField();
  sliRecur.setMinimum(1);
  sliRecur.setMaximum(1000);
  btnOk.addActionListener(this);
  setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
  setLayout(new javax.swing.BoxLayout(getContentPane(),javax.swing.BoxLayout.PAGE_AXIS));
  lblKeys.setText(""String_Node_Str"");
  add(lblKeys);
  txtKeys.setRows(5);
  scrollPane1.setViewportView(txtKeys);
  add(scrollPane1);
  add(new JSeparator());
  lblRecur.setText(""String_Node_Str"");
  add(lblRecur);
  add(sliRecur);
  add(new JSeparator());
  lblKeyserver.setText(""String_Node_Str"");
  add(lblKeyserver);
  add(txtKeyserver);
  add(new JSeparator());
  add(btnOk);
  txtKeys.setText(""String_Node_Str"");
  txtKeyserver.setText(""String_Node_Str"");
  sliRecur.setValue(10);
  pack();
}","private void init(){
  lblKeys=new javax.swing.JLabel();
  scrollPane1=new javax.swing.JScrollPane();
  txtKeys=new javax.swing.JTextArea();
  lblRecur=new javax.swing.JLabel();
  sliRecur=new javax.swing.JSlider();
  lblKeyserver=new javax.swing.JLabel();
  txtKeyserver=new javax.swing.JTextField();
  sliRecur.setMinimum(1);
  sliRecur.setMaximum(1000);
  btnOk.addActionListener(this);
  btnCancel.addActionListener(this);
  setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
  setLayout(new javax.swing.BoxLayout(getContentPane(),javax.swing.BoxLayout.PAGE_AXIS));
  lblKeys.setText(""String_Node_Str"");
  add(lblKeys);
  txtKeys.setRows(5);
  scrollPane1.setViewportView(txtKeys);
  add(scrollPane1);
  add(new JSeparator());
  lblRecur.setText(""String_Node_Str"");
  add(lblRecur);
  add(sliRecur);
  add(new JSeparator());
  lblKeyserver.setText(""String_Node_Str"");
  add(lblKeyserver);
  add(txtKeyserver);
  add(new JSeparator());
  JPanel p=new JPanel();
  p.add(btnCancel);
  p.add(btnOk);
  add(p);
  txtKeys.setText(""String_Node_Str"");
  txtKeyserver.setText(""String_Node_Str"");
  sliRecur.setValue(10);
  pack();
}"
46758,"@Override public void actionPerformed(ActionEvent e){
  setVisible(false);
  accepted=true;
}","@Override public void actionPerformed(ActionEvent e){
  setVisible(false);
  if (e.getSource() == btnOk)   accepted=true;
}"
46759,"public FetchDialog(Frame owner){
  super(owner);
  setModal(true);
  setTitle(""String_Node_Str"");
  setSize(500,500);
  setResizable(false);
  init();
}","public FetchDialog(Frame owner){
  super(owner);
  setModal(true);
  setTitle(""String_Node_Str"");
  setSize(500,500);
  setResizable(false);
  init();
  Dimension d=owner.getSize();
  setLocation(owner.getX() + (d.width - getWidth()) / 2,owner.getY());
}"
46760,"/** 
 * TODO: Document relativePath(File, File)
 * @param base
 * @param target
 * @return
 */
public static String realtivePath(File base,File target){
  final String[] fromPath=explodedPath(base.isDirectory() ? base.getParentFile() : base);
  final String[] toPath=explodedPath(target);
  final int common;
  int i;
  for (i=0; i < Math.min(fromPath.length,toPath.length); i++) {
    if (!fromPath[i].equals(toPath[i])) {
      break;
    }
  }
  common=i;
  if (i == 0) {
    return target.getPath();
  }
  StringBuilder ret=new StringBuilder();
  for (i=common; i < fromPath.length; i++) {
    ret.append(""String_Node_Str"");
    ret.append(File.separatorChar);
  }
  for (i=common; i < toPath.length; i++) {
    ret.append(toPath[i]);
    ret.append(File.separatorChar);
  }
  ret.deleteCharAt(ret.length() - 1);
  return ret.toString();
}","/** 
 * TODO: Document relativePath(File, File)
 * @param base
 * @param target
 * @return
 */
public static String realtivePath(File base,File target){
  final String[] fromPath=explodedPath(base.isDirectory() ? base.getParentFile() : base);
  final String[] toPath=explodedPath(target);
  final int common;
  int i;
  for (i=0; i < Math.min(fromPath.length,toPath.length); i++) {
    if (!fromPath[i].equals(toPath[i])) {
      break;
    }
  }
  common=i;
  if (i == 0) {
    return target.getPath();
  }
  StringBuilder ret=new StringBuilder();
  for (i=common; i < fromPath.length - 1; ++i) {
    ret.append(""String_Node_Str"");
    ret.append(File.separatorChar);
  }
  for (i=common; i < toPath.length; ++i) {
    ret.append(toPath[i]);
    ret.append(File.separatorChar);
  }
  ret.deleteCharAt(ret.length() - 1);
  return ret.toString();
}"
46761,"/** 
 * Determine whether the parameter list from the parsed java source matches that of a web service method.
 * @param methodParameters parameters of method from java source
 * @param parameters parameters from web service method
 * @return <code>true</code> when the parameters match by type or the givenlist of method parameters is <code>null</code> and the web service parameters are empty, <code>false</code> otherwise.
 */
private boolean parametersMatch(final List<japa.parser.ast.body.Parameter> methodParameters,final Collection<Parameter> parameters){
  if (methodParameters == null && parameters.isEmpty()) {
    return true;
  }
  boolean matches=methodParameters.size() == parameters.size();
  if (matches) {
    final Iterator<japa.parser.ast.body.Parameter> params=methodParameters.iterator();
    japa.parser.ast.body.Parameter parameter;
    for (    final Parameter param : parameters) {
      parameter=params.next();
      final String className=classNameResolver.resolveClassName(parameter);
      final org.arachna.netweaver.nwdi.documenter.facets.webservices.Type type=param.getType();
      if (!type.getName().equals(className)) {
        matches=false;
        break;
      }
    }
  }
  return matches;
}","/** 
 * Determine whether the parameter list from the parsed java source matches that of a web service method.
 * @param methodParameters parameters of method from java source
 * @param parameters parameters from web service method
 * @return <code>true</code> when the parameters match by type or the givenlist of method parameters is <code>null</code> and the web service parameters are empty, <code>false</code> otherwise.
 */
private boolean parametersMatch(final List<japa.parser.ast.body.Parameter> methodParameters,final Collection<Parameter> parameters){
  if (methodParameters == null && parameters.isEmpty()) {
    return true;
  }
  boolean matches=methodParameters != null && methodParameters.size() == parameters.size();
  if (matches) {
    final Iterator<japa.parser.ast.body.Parameter> params=methodParameters.iterator();
    japa.parser.ast.body.Parameter parameter;
    for (    final Parameter param : parameters) {
      parameter=params.next();
      final String className=classNameResolver.resolveClassName(parameter);
      final org.arachna.netweaver.nwdi.documenter.facets.webservices.Type type=param.getType();
      if (!type.getName().equals(className)) {
        matches=false;
        break;
      }
    }
  }
  return matches;
}"
46762,"public static void main(final String[] args) throws IOException, SAXException {
  final DevelopmentComponentFactory dcFactory=new DevelopmentComponentFactory();
  final DevelopmentConfigurationReader reader=new DevelopmentConfigurationReader(dcFactory);
  new XmlReaderHelper(reader).parse(new FileReader(""String_Node_Str""));
  dcFactory.updateUsingDCs();
  for (  final DevelopmentComponent component : dcFactory.getAll()) {
    if (!""String_Node_Str"".equals(component.getCompartment().getVendor())) {
      component.setNeedsRebuild(true);
    }
  }
  String dot=""String_Node_Str"";
  PrintStream s=new PrintStream(new File(""String_Node_Str""));
  new ReportGenerator(s,reader.getDevelopmentConfiguration(),dcFactory,""String_Node_Str"",dot,Pattern.compile(""String_Node_Str"")).execute();
  s.close();
}","public static void main(final String[] args) throws IOException, SAXException {
  final DevelopmentComponentFactory dcFactory=new DevelopmentComponentFactory();
  final DevelopmentConfigurationReader reader=new DevelopmentConfigurationReader(dcFactory);
  new XmlReaderHelper(reader).parse(new FileReader(""String_Node_Str""));
  dcFactory.updateUsingDCs();
  for (  final DevelopmentComponent component : dcFactory.getAll()) {
    if (!""String_Node_Str"".equals(component.getCompartment().getVendor())) {
      component.setNeedsRebuild(true);
    }
  }
  String dot=""String_Node_Str"";
  PrintStream s=new PrintStream(new File(""String_Node_Str""));
  new ReportGenerator(System.err,reader.getDevelopmentConfiguration(),dcFactory,""String_Node_Str"",dot,Pattern.compile(""String_Node_Str"")).execute();
  s.close();
}"
46763,"/** 
 * @param writer
 * @param component
 * @throws IOException
 * @throws ResourceNotFoundException
 * @throws MethodInvocationException
 * @throws ParseErrorException
 */
public void execute(final Writer writer,final DevelopmentComponent component) throws ParseErrorException, MethodInvocationException, ResourceNotFoundException, IOException {
  final Context context=new VelocityContext();
  context.put(""String_Node_Str"",component);
  context.put(""String_Node_Str"",bundle);
  context.put(""String_Node_Str"",component.getUsedDevelopmentComponents());
  context.put(""String_Node_Str"",new Formatter(locale));
  context.put(""String_Node_Str"",dcFactory);
  context.put(""String_Node_Str"",""String_Node_Str"");
  velocityEngine.evaluate(context,writer,""String_Node_Str"",getTemplateReader());
  writer.flush();
}","/** 
 * @param writer
 * @param component
 * @throws IOException
 * @throws ResourceNotFoundException
 * @throws MethodInvocationException
 * @throws ParseErrorException
 */
public void execute(final Writer writer,final DevelopmentComponent component) throws ParseErrorException, MethodInvocationException, ResourceNotFoundException, IOException {
  final Context context=new VelocityContext();
  context.put(""String_Node_Str"",component);
  context.put(""String_Node_Str"",bundle);
  context.put(""String_Node_Str"",component.getUsedDevelopmentComponents());
  context.put(""String_Node_Str"",new BundleHelper(bundle,locale));
  context.put(""String_Node_Str"",dcFactory);
  velocityEngine.evaluate(context,writer,""String_Node_Str"",getTemplateReader());
  writer.flush();
}"
46764,"@Test public void testGetById() throws Exception {
  testSave();
  listAll=dao.getAll();
  int size=listAll.size();
  Assert.assertEquals(2,size,DB_MUST_BE_NOT_EMPTY);
  for (  Persistent p : listAll) {
    dao.delete(dao.get(p.getId()));
  }
  testDBEmpty();
}","@Test public void testGetById() throws Exception {
  testSave();
  listAll=dao.getAll();
  int size=listAll.size();
  Assert.assertEquals(1,size,DB_MUST_BE_NOT_EMPTY);
  for (  Persistent p : listAll) {
    dao.delete(dao.get(p.getId()));
  }
  testDBEmpty();
}"
46765,"@Test public void testGetTopicWithPosts() throws Exception {
  User user=new User();
  user.setNickName(""String_Node_Str"");
  getUserDao().saveOrUpdate(user);
  Post post1=new Post();
  post1.setPostContent(""String_Node_Str"");
  Post post2=new Post();
  post2.setPostContent(""String_Node_Str"");
  getPostDao().saveOrUpdate(post1);
  getPostDao().saveOrUpdate(post2);
  entity.addPost(post1);
  entity.addPost(post2);
  Collection allPosts=entity.getPosts();
  entity.setTopicStarter(user);
  dao.saveOrUpdate(entity);
  Long topicId=entity.getId();
  Topic loadedTopic=dao.getTopicWithPosts(topicId);
  Assert.assertEquals(allPosts,loadedTopic.getPosts(),TOPIC_POSTS_ERROR);
}","@Test public void testGetTopicWithPosts() throws Exception {
  testSave();
  Topic topic=dao.getTopicWithPosts(entity.getId());
  List postst=topic.getPosts();
  Assert.assertEquals(postst.size(),1);
}"
46766,"@Test public void testSave() throws Exception {
  dao.saveOrUpdate(entity);
  dao.saveOrUpdate(new Topic());
  int size=dao.getAll().size();
  Assert.assertEquals(2,size,ENTITIES_IS_NOT_INCREASED_BY_2);
}","@Test public void testSave() throws Exception {
  dao.saveOrUpdate(entity);
  int size=dao.getAll().size();
  Assert.assertEquals(1,size,ENTITIES_IS_NOT_INCREASED_BY_2);
}"
46767,"@Test public void testEntityState() throws Exception {
  testSave();
  listAll=dao.getAll();
  Assert.assertTrue(entity.equals(listAll.get(0)),PERSISTENCE_ERROR);
  Assert.assertFalse(entity.equals(listAll.get(1)),PERSISTENCE_ERROR);
}","@Test public void testEntityState() throws Exception {
  testSave();
  listAll=dao.getAll();
  Assert.assertTrue(entity.equals(listAll.get(0)),PERSISTENCE_ERROR);
}"
46768,"@BeforeMethod public void setUp() throws Exception {
  dao=new TopicHibernateDao();
  dao.setSessionFactory(sessionFactory);
  Assert.assertNotNull(sessionFactory,SESSION_FACTORY_IS_NULL);
  entity=new Topic();
  entity.setTitle(""String_Node_Str"");
  entity.setTopicStarter(null);
  clearDbTable(entity,sessionFactory);
}","@BeforeMethod public void setUp() throws Exception {
  entity=Topic.createNewTopic();
  clearDbTable(entity,sessionFactory);
  initUser();
  initPost();
  Assert.assertNotNull(testPost);
  entity.setTitle(""String_Node_Str"");
  entity.addPost(testPost);
  entity.setTopicStarter(testUser);
}"
46769,"@Test public void testDeleteById() throws Exception {
  testSave();
  listAll=dao.getAll();
  int size=listAll.size();
  Assert.assertEquals(2,size,DB_MUST_BE_NOT_EMPTY);
  for (  Persistent p : listAll) {
    dao.delete(p.getId());
  }
  testDBEmpty();
}","@Test public void testDeleteById() throws Exception {
  testSave();
  listAll=dao.getAll();
  int size=listAll.size();
  Assert.assertEquals(1,size,DB_MUST_BE_NOT_EMPTY);
  for (  Persistent p : listAll) {
    dao.delete(p.getId());
  }
  testDBEmpty();
}"
46770,"private String resolvePath(Folder parent) throws Exception {
  StoredItem item=Storage.getInstance().findById(parent.getId());
  String path=File.separator + parent.getName();
  while (item == null) {
    Folder ancestor=parent.getFolderParent();
    if (ancestor == null) {
      return null;
    }
    item=Storage.getInstance().findById(ancestor.getId());
    if (item == null) {
      path=File.separator + ancestor.getName() + path;
    }
 else {
      path=item.getPath() + path;
    }
  }
  return Config.getInstance().getWatchParent() + path;
}","private String resolvePath(Folder parent) throws Exception {
  StoredItem item=Storage.getInstance().findById(parent.getId());
  String path=File.separator + parent.getName();
  Folder ancestor=parent.getFolderParent();
  while (item == null) {
    if (ancestor == null) {
      return null;
    }
    item=Storage.getInstance().findById(ancestor.getId());
    if (item == null) {
      path=File.separator + ancestor.getName() + path;
    }
 else {
      path=item.getPath() + path;
    }
    ancestor=ancestor.getFolderParent();
  }
  return Config.getInstance().getWatchParent() + path;
}"
46771,"private void exit(){
  serviceInterface.logout();
  WindowSaver.saveSettings();
  System.exit(0);
}","private void exit(){
  try {
    serviceInterface.logout();
  }
 catch (  Exception e) {
    myLogger.error(e);
  }
  WindowSaver.saveSettings();
  System.exit(0);
}"
46772,"public void closeAllFileSystems(){
  for (  DefaultFileSystemManager fsm : allFileSystems) {
    fsm.close();
  }
}","public void closeAllFileSystems(){
  for (  FileSystem fs : allFileSystems) {
    fs.getFileSystemManager().closeFileSystem(fs);
  }
}"
46773,"/** 
 * Connects to the filesystem where the file lives on.
 * @param file the file you want to access (in a later step)
 * @param cred
 * @return
 * @throws FileSystemException
 * @throws VomsException
 */
private synchronized FileSystem createFilesystem(final String rootUrl,final String fqan) throws FileSystemException {
  ProxyCredential credToUse=null;
  if (fqan != null) {
    credToUse=cachedCredentials.get(fqan);
    if (credToUse == null || !credToUse.isValid()) {
      VO vo=VOManagement.getVO(getFqans().get(fqan));
      credToUse=CertHelpers.getVOProxyCredential(vo,fqan,getCred());
      cachedCredentials.put(fqan,credToUse);
    }
 else {
      credToUse=cachedCredentials.get(fqan);
    }
  }
 else {
    credToUse=getCred();
  }
  FileSystemOptions opts=new FileSystemOptions();
  getFsManager();
  if (rootUrl.startsWith(""String_Node_Str"")) {
    GridFtpFileSystemConfigBuilder builder=GridFtpFileSystemConfigBuilder.getInstance();
    builder.setGSSCredential(opts,credToUse.getGssCredential());
  }
  FileObject fileRoot=getFsManager().resolveFile(rootUrl,opts);
  FileSystem fileBase=fileRoot.getFileSystem();
  return fileBase;
}","/** 
 * Connects to the filesystem where the file lives on.
 * @param file the file you want to access (in a later step)
 * @param cred
 * @return
 * @throws FileSystemException
 * @throws VomsException
 */
private synchronized FileSystem createFilesystem(final String rootUrl,final String fqan) throws FileSystemException {
  ProxyCredential credToUse=null;
  if (fqan != null) {
    credToUse=cachedCredentials.get(fqan);
    if (credToUse == null || !credToUse.isValid()) {
      VO vo=VOManagement.getVO(getFqans().get(fqan));
      credToUse=CertHelpers.getVOProxyCredential(vo,fqan,getCred());
      cachedCredentials.put(fqan,credToUse);
    }
 else {
      credToUse=cachedCredentials.get(fqan);
    }
  }
 else {
    credToUse=getCred();
  }
  FileSystemOptions opts=new FileSystemOptions();
  if (rootUrl.startsWith(""String_Node_Str"")) {
    myLogger.debug(""String_Node_Str"" + rootUrl + ""String_Node_Str"");
    GridFtpFileSystemConfigBuilder builder=GridFtpFileSystemConfigBuilder.getInstance();
    builder.setGSSCredential(opts,credToUse.getGssCredential());
  }
  FileObject fileRoot=getFsManager().resolveFile(rootUrl,opts);
  FileSystem fileBase=fileRoot.getFileSystem();
  allFileSystems.add(fileBase);
  return fileBase;
}"
46774,"public Object initialValue(){
  try {
    myLogger.debug(""String_Node_Str"");
    DefaultFileSystemManager temp=VFSUtil.createNewFsManager(false,false,true,true,true,true,true,null);
    allFileSystems.add(temp);
    return temp;
  }
 catch (  FileSystemException e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}","public Object initialValue(){
  try {
    myLogger.debug(""String_Node_Str"");
    DefaultFileSystemManager temp=VFSUtil.createNewFsManager(false,false,true,true,true,true,true,null);
    return temp;
  }
 catch (  FileSystemException e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}"
46775,"/** 
 * Connects to the filesystem where the file lives on.
 * @param file the file you want to access (in a later step)
 * @param cred
 * @return
 * @throws FileSystemException
 * @throws VomsException
 */
private synchronized FileSystem createFilesystem(final String rootUrl,final String fqan) throws FileSystemException {
  ProxyCredential credToUse=null;
  if (fqan != null) {
    credToUse=cachedCredentials.get(fqan);
    if (credToUse == null || !credToUse.isValid()) {
      VO vo=VOManagement.getVO(getFqans().get(fqan));
      credToUse=CertHelpers.getVOProxyCredential(vo,fqan,getCred());
      cachedCredentials.put(fqan,credToUse);
    }
 else {
      credToUse=cachedCredentials.get(fqan);
    }
  }
 else {
    credToUse=getCred();
  }
  FileSystemOptions opts=new FileSystemOptions();
  if (rootUrl.startsWith(""String_Node_Str"")) {
    GridFtpFileSystemConfigBuilder builder=GridFtpFileSystemConfigBuilder.getInstance();
    builder.setGSSCredential(opts,credToUse.getGssCredential());
  }
  FileObject fileRoot=getFsManager().resolveFile(rootUrl,opts);
  FileSystem fileBase=fileRoot.getFileSystem();
  return fileBase;
}","/** 
 * Connects to the filesystem where the file lives on.
 * @param file the file you want to access (in a later step)
 * @param cred
 * @return
 * @throws FileSystemException
 * @throws VomsException
 */
private synchronized FileSystem createFilesystem(final String rootUrl,final String fqan) throws FileSystemException {
  ProxyCredential credToUse=null;
  if (fqan != null) {
    credToUse=cachedCredentials.get(fqan);
    if (credToUse == null || !credToUse.isValid()) {
      VO vo=VOManagement.getVO(getFqans().get(fqan));
      credToUse=CertHelpers.getVOProxyCredential(vo,fqan,getCred());
      cachedCredentials.put(fqan,credToUse);
    }
 else {
      credToUse=cachedCredentials.get(fqan);
    }
  }
 else {
    credToUse=getCred();
  }
  FileSystemOptions opts=new FileSystemOptions();
  getFsManager();
  if (rootUrl.startsWith(""String_Node_Str"")) {
    GridFtpFileSystemConfigBuilder builder=GridFtpFileSystemConfigBuilder.getInstance();
    builder.setGSSCredential(opts,credToUse.getGssCredential());
  }
  FileObject fileRoot=getFsManager().resolveFile(rootUrl,opts);
  FileSystem fileBase=fileRoot.getFileSystem();
  return fileBase;
}"
46776,"private String createJobSubmissionDescription(ServiceInterface serviceInterface,Document jsdl) throws ServerJobSubmissionException {
  DebugUtils.jsdlDebugOutput(""String_Node_Str"",jsdl);
  Document output=null;
  try {
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    output=docBuilder.newDocument();
  }
 catch (  ParserConfigurationException e1) {
    e1.printStackTrace();
  }
  Element job=output.createElement(""String_Node_Str"");
  output.appendChild(job);
  Element executable=output.createElement(""String_Node_Str"");
  executable.setTextContent(JsdlHelpers.getPosixApplication(jsdl));
  job.appendChild(executable);
  String[] arguments=JsdlHelpers.getPosixApplicationArguments(jsdl);
  for (  String argument : arguments) {
    if (argument != null && !""String_Node_Str"".equals(argument.trim())) {
      Element argument_node=output.createElement(""String_Node_Str"");
      argument_node.setTextContent(argument);
      job.appendChild(argument_node);
    }
  }
  Element directory=output.createElement(""String_Node_Str"");
  directory.setTextContent(JsdlHelpers.getWorkingDirectory(jsdl));
  job.appendChild(directory);
  String stdinValue=JsdlHelpers.getPosixStandardInput(jsdl);
  if (stdinValue != null && !""String_Node_Str"".equals(stdinValue)) {
    Element stdin=output.createElement(""String_Node_Str"");
    stdin.setTextContent(stdinValue);
    job.appendChild(stdin);
  }
  Element stdout=output.createElement(""String_Node_Str"");
  stdout.setTextContent(JsdlHelpers.getPosixStandardOutput(jsdl));
  job.appendChild(stdout);
  Element stderr=output.createElement(""String_Node_Str"");
  stderr.setTextContent(JsdlHelpers.getPosixStandardError(jsdl));
  job.appendChild(stderr);
  String queue=JsdlHelpers.getCandidateHosts(jsdl)[0];
  if (queue.indexOf(""String_Node_Str"") != -1) {
    queue=queue.substring(0,queue.indexOf(""String_Node_Str""));
    Element queue_node=output.createElement(""String_Node_Str"");
    queue_node.setTextContent(queue);
    job.appendChild(queue_node);
  }
  int processorCount=JsdlHelpers.getProcessorCount(jsdl);
  Element jobType=output.createElement(""String_Node_Str"");
  String jobTypeString=JsdlHelpers.getJobType(jsdl);
  if (processorCount > 1) {
    Element count=output.createElement(""String_Node_Str"");
    count.setTextContent(new Integer(processorCount).toString());
    job.appendChild(count);
    if (jobTypeString == null) {
      jobType.setTextContent(""String_Node_Str"");
    }
 else {
      jobType.setTextContent(jobTypeString);
    }
  }
 else {
    if (jobTypeString == null) {
      jobType.setTextContent(""String_Node_Str"");
    }
 else {
      jobType.setTextContent(jobTypeString);
    }
  }
  job.appendChild(jobType);
  Long memory=JsdlHelpers.getTotalMemoryRequirement(jsdl);
  if (memory != null && memory >= 0) {
    Element totalMemory=output.createElement(""String_Node_Str"");
    memory=memory / 1024;
    totalMemory.setTextContent(memory.toString());
    job.appendChild(totalMemory);
  }
  int walltime=JsdlHelpers.getWalltime(jsdl);
  if (walltime > 0) {
    Element maxWallTime=output.createElement(""String_Node_Str"");
    int wt=new Integer(JsdlHelpers.getWalltime(jsdl));
    wt=wt / 60;
    maxWallTime.setTextContent(new Integer(wt).toString());
    job.appendChild(maxWallTime);
  }
  Element fileStageIn=output.createElement(""String_Node_Str"");
  Element extensions=output.createElement(""String_Node_Str"");
  Element jobname=output.createElement(""String_Node_Str"");
  String jobname_string=JsdlHelpers.getJobname(jsdl);
  if (jobname_string.length() > 6) {
    jobname.setTextContent(jobname_string.substring(jobname_string.length() - 6));
  }
  extensions.appendChild(jobname);
  String[] modules_string=null;
  try {
    modules_string=JsdlHelpers.getModules(jsdl);
  }
 catch (  Exception e) {
  }
  if (modules_string != null && modules_string.length > 0) {
    for (    String module_string : modules_string) {
      if (!""String_Node_Str"".equals(module_string)) {
        Element module=output.createElement(""String_Node_Str"");
        module.setTextContent(module_string);
        extensions.appendChild(module);
      }
    }
  }
 else {
    String application=JsdlHelpers.getApplicationName(jsdl);
    String version=JsdlHelpers.getApplicationVersion(jsdl);
    String subLoc=JsdlHelpers.getCandidateHosts(jsdl)[0];
    if (application != null && version != null & subLoc != null) {
      Map<String,String> appDetails=serviceInterface.getApplicationDetails(application,version,subLoc);
      try {
        modules_string=appDetails.get(JobConstants.MDS_MODULES_KEY).split(""String_Node_Str"");
        if (modules_string == null || ""String_Node_Str"".equals(modules_string)) {
          myLogger.warn(""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        myLogger.warn(""String_Node_Str"" + e.getLocalizedMessage() + ""String_Node_Str"");
      }
    }
 else     if (application != null && version == null && subLoc != null) {
      Map<String,String> appDetails=serviceInterface.getApplicationDetails(application,subLoc);
      try {
        modules_string=appDetails.get(JobConstants.MDS_MODULES_KEY).split(""String_Node_Str"");
        if (modules_string == null || ""String_Node_Str"".equals(modules_string)) {
          myLogger.warn(""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        myLogger.warn(""String_Node_Str"" + e.getLocalizedMessage() + ""String_Node_Str"");
      }
    }
 else {
      throw new ServerJobSubmissionException(""String_Node_Str"");
    }
    if (modules_string != null && modules_string.length > 0) {
      for (      String module_string : modules_string) {
        if (!""String_Node_Str"".equals(module_string)) {
          Element module=output.createElement(""String_Node_Str"");
          module.setTextContent(module_string);
          extensions.appendChild(module);
        }
      }
    }
  }
  String email=JsdlHelpers.getEmail(jsdl);
  if (email != null && !""String_Node_Str"".equals(email)) {
    Element email_address=output.createElement(""String_Node_Str"");
    email_address.setTextContent(email);
    extensions.appendChild(email_address);
    if (JsdlHelpers.sendEmailOnJobStart(jsdl)) {
      Element emailonexecution=output.createElement(""String_Node_Str"");
      emailonexecution.setTextContent(""String_Node_Str"");
      extensions.appendChild(emailonexecution);
    }
    if (JsdlHelpers.sendEmailOnJobFinish(jsdl)) {
      Element emailonabort=output.createElement(""String_Node_Str"");
      emailonabort.setTextContent(""String_Node_Str"");
      Element emailontermination=output.createElement(""String_Node_Str"");
      emailontermination.setTextContent(""String_Node_Str"");
      extensions.appendChild(emailonabort);
      extensions.appendChild(emailontermination);
    }
  }
  job.appendChild(extensions);
  StreamResult result=null;
  try {
    Transformer transformer=TransformerFactory.newInstance().newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    result=new StreamResult(new StringWriter());
    DOMSource source=new DOMSource(output);
    transformer.transform(source,result);
  }
 catch (  TransformerConfigurationException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  TransformerFactoryConfigurationError e) {
    e.printStackTrace();
  }
catch (  TransformerException e) {
    e.printStackTrace();
  }
  return result.getWriter().toString();
}","private String createJobSubmissionDescription(ServiceInterface serviceInterface,Document jsdl) throws ServerJobSubmissionException {
  DebugUtils.jsdlDebugOutput(""String_Node_Str"",jsdl);
  Document output=null;
  try {
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    output=docBuilder.newDocument();
  }
 catch (  ParserConfigurationException e1) {
    e1.printStackTrace();
  }
  Element job=output.createElement(""String_Node_Str"");
  output.appendChild(job);
  Element executable=output.createElement(""String_Node_Str"");
  executable.setTextContent(JsdlHelpers.getPosixApplication(jsdl));
  job.appendChild(executable);
  String[] arguments=JsdlHelpers.getPosixApplicationArguments(jsdl);
  for (  String argument : arguments) {
    if (argument != null && !""String_Node_Str"".equals(argument.trim())) {
      Element argument_node=output.createElement(""String_Node_Str"");
      argument_node.setTextContent(argument);
      job.appendChild(argument_node);
    }
  }
  Element directory=output.createElement(""String_Node_Str"");
  directory.setTextContent(JsdlHelpers.getWorkingDirectory(jsdl));
  job.appendChild(directory);
  String stdinValue=JsdlHelpers.getPosixStandardInput(jsdl);
  if (stdinValue != null && !""String_Node_Str"".equals(stdinValue)) {
    Element stdin=output.createElement(""String_Node_Str"");
    stdin.setTextContent(stdinValue);
    job.appendChild(stdin);
  }
  Element stdout=output.createElement(""String_Node_Str"");
  stdout.setTextContent(JsdlHelpers.getPosixStandardOutput(jsdl));
  job.appendChild(stdout);
  Element stderr=output.createElement(""String_Node_Str"");
  stderr.setTextContent(JsdlHelpers.getPosixStandardError(jsdl));
  job.appendChild(stderr);
  String queue=JsdlHelpers.getCandidateHosts(jsdl)[0];
  if (queue.indexOf(""String_Node_Str"") != -1) {
    queue=queue.substring(0,queue.indexOf(""String_Node_Str""));
    Element queue_node=output.createElement(""String_Node_Str"");
    queue_node.setTextContent(queue);
    job.appendChild(queue_node);
  }
  int processorCount=JsdlHelpers.getProcessorCount(jsdl);
  Element jobType=output.createElement(""String_Node_Str"");
  String jobTypeString=JsdlHelpers.getJobType(jsdl);
  if (processorCount > 1) {
    Element count=output.createElement(""String_Node_Str"");
    count.setTextContent(new Integer(processorCount).toString());
    job.appendChild(count);
    if (jobTypeString == null) {
      jobType.setTextContent(""String_Node_Str"");
    }
 else {
      jobType.setTextContent(jobTypeString);
    }
  }
 else {
    if (jobTypeString == null) {
      jobType.setTextContent(""String_Node_Str"");
    }
 else {
      jobType.setTextContent(jobTypeString);
    }
  }
  job.appendChild(jobType);
  Long memory=JsdlHelpers.getTotalMemoryRequirement(jsdl);
  if (memory != null && memory >= 0) {
    Element totalMemory=output.createElement(""String_Node_Str"");
    memory=memory / (1024 * 1024);
    totalMemory.setTextContent(memory.toString());
    job.appendChild(totalMemory);
  }
  int walltime=JsdlHelpers.getWalltime(jsdl);
  if (walltime > 0) {
    Element maxWallTime=output.createElement(""String_Node_Str"");
    int wt=new Integer(JsdlHelpers.getWalltime(jsdl));
    wt=wt / 60;
    maxWallTime.setTextContent(new Integer(wt).toString());
    job.appendChild(maxWallTime);
  }
  Element fileStageIn=output.createElement(""String_Node_Str"");
  Element extensions=output.createElement(""String_Node_Str"");
  Element jobname=output.createElement(""String_Node_Str"");
  String jobname_string=JsdlHelpers.getJobname(jsdl);
  if (jobname_string.length() > 6) {
    jobname.setTextContent(jobname_string.substring(jobname_string.length() - 6));
  }
  extensions.appendChild(jobname);
  String[] modules_string=null;
  try {
    modules_string=JsdlHelpers.getModules(jsdl);
  }
 catch (  Exception e) {
  }
  if (modules_string != null && modules_string.length > 0) {
    for (    String module_string : modules_string) {
      if (!""String_Node_Str"".equals(module_string)) {
        Element module=output.createElement(""String_Node_Str"");
        module.setTextContent(module_string);
        extensions.appendChild(module);
      }
    }
  }
 else {
    String application=JsdlHelpers.getApplicationName(jsdl);
    String version=JsdlHelpers.getApplicationVersion(jsdl);
    String subLoc=JsdlHelpers.getCandidateHosts(jsdl)[0];
    if (application != null && version != null & subLoc != null) {
      Map<String,String> appDetails=serviceInterface.getApplicationDetails(application,version,subLoc);
      try {
        modules_string=appDetails.get(JobConstants.MDS_MODULES_KEY).split(""String_Node_Str"");
        if (modules_string == null || ""String_Node_Str"".equals(modules_string)) {
          myLogger.warn(""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        myLogger.warn(""String_Node_Str"" + e.getLocalizedMessage() + ""String_Node_Str"");
      }
    }
 else     if (application != null && version == null && subLoc != null) {
      Map<String,String> appDetails=serviceInterface.getApplicationDetails(application,subLoc);
      try {
        modules_string=appDetails.get(JobConstants.MDS_MODULES_KEY).split(""String_Node_Str"");
        if (modules_string == null || ""String_Node_Str"".equals(modules_string)) {
          myLogger.warn(""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        myLogger.warn(""String_Node_Str"" + e.getLocalizedMessage() + ""String_Node_Str"");
      }
    }
 else {
      throw new ServerJobSubmissionException(""String_Node_Str"");
    }
    if (modules_string != null && modules_string.length > 0) {
      for (      String module_string : modules_string) {
        if (!""String_Node_Str"".equals(module_string)) {
          Element module=output.createElement(""String_Node_Str"");
          module.setTextContent(module_string);
          extensions.appendChild(module);
        }
      }
    }
  }
  String email=JsdlHelpers.getEmail(jsdl);
  if (email != null && !""String_Node_Str"".equals(email)) {
    Element email_address=output.createElement(""String_Node_Str"");
    email_address.setTextContent(email);
    extensions.appendChild(email_address);
    if (JsdlHelpers.sendEmailOnJobStart(jsdl)) {
      Element emailonexecution=output.createElement(""String_Node_Str"");
      emailonexecution.setTextContent(""String_Node_Str"");
      extensions.appendChild(emailonexecution);
    }
    if (JsdlHelpers.sendEmailOnJobFinish(jsdl)) {
      Element emailonabort=output.createElement(""String_Node_Str"");
      emailonabort.setTextContent(""String_Node_Str"");
      Element emailontermination=output.createElement(""String_Node_Str"");
      emailontermination.setTextContent(""String_Node_Str"");
      extensions.appendChild(emailonabort);
      extensions.appendChild(emailontermination);
    }
  }
  job.appendChild(extensions);
  StreamResult result=null;
  try {
    Transformer transformer=TransformerFactory.newInstance().newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    result=new StreamResult(new StringWriter());
    DOMSource source=new DOMSource(output);
    transformer.transform(source,result);
  }
 catch (  TransformerConfigurationException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  TransformerFactoryConfigurationError e) {
    e.printStackTrace();
  }
catch (  TransformerException e) {
    e.printStackTrace();
  }
  return result.getWriter().toString();
}"
46777,"public String logout(){
  myLogger.debug(""String_Node_Str"");
  this.credential.destroy();
  return null;
}","public String logout(){
  try {
    myLogger.debug(""String_Node_Str"");
    this.credential.destroy();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}"
46778,"protected void setDefaultValue(){
  if (useLastInput) {
    String lastUserInput=holder.getExternalSetValue();
    if (lastUserInput != null && !""String_Node_Str"".equals(lastUserInput))     historyManager.addHistoryEntry(historyManagerKeyForThisNode + ""String_Node_Str"" + TemplateNode.LAST_USED_PARAMETER,lastUserInput,new Date(),1);
  }
  String defaultValue=getDefaultValue();
  if (defaultValue != null) {
    holder.setComponentField(defaultValue);
  }
}","protected void setDefaultValue(){
  if (useLastInput) {
    String lastUserInput=holder.getExternalSetValue();
    if (lastUserInput != null && !""String_Node_Str"".equals(lastUserInput))     historyManager.addHistoryEntry(historyManagerKeyForThisNode + ""String_Node_Str"" + TemplateNode.LAST_USED_PARAMETER,lastUserInput,new Date(),1);
  }
  String defaultValue=getDefaultValue();
  if (defaultValue != null) {
    holder.setComponentField(defaultValue);
  }
 else {
    holder.setComponentField(null);
  }
}"
46779,"public void startTransfer(boolean join) throws FileTransferException {
  if (transferThread != null) {
    throw new FileTransferException(""String_Node_Str"");
  }
  transferThread=new Thread(){
    public void run(){
      try {
        myLogger.debug(""String_Node_Str"" + targetDirectory.getName());
        status=TRANSFERRING_STATUS;
        addStatusMessage(""String_Node_Str"");
        fireFileTransferEvent(new FileTransferEvent(FileTransfer.this,FileTransferEvent.TRANSFER_STARTED));
        if (isDownload) {
          download(false,sources);
        }
 else {
          transferFiles();
        }
        myLogger.debug(""String_Node_Str"" + targetDirectory.getName());
        status=FINISHED_STATUS;
        addStatusMessage(""String_Node_Str"");
        fireFileTransferEvent(new FileTransferEvent(FileTransfer.this,FileTransferEvent.TRANSFER_FINISHED));
      }
 catch (      Exception e) {
        e.printStackTrace();
        myLogger.debug(""String_Node_Str"");
        if (status == CANCELLED_STATUS) {
        }
 else {
          status=FAILED_STATUS;
          myLogger.debug(""String_Node_Str"" + targetDirectory.getName());
          addStatusMessage(""String_Node_Str"" + e.getLocalizedMessage());
          possibleException=e;
          fireFileTransferEvent(new FileTransferEvent(FileTransfer.this,e));
        }
      }
    }
  }
;
  transferThread.start();
  if (join) {
    try {
      transferThread.join();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void startTransfer(boolean join) throws FileTransferException {
  if (transferThread != null) {
    throw new FileTransferException(""String_Node_Str"");
  }
  transferThread=new Thread(){
    public void run(){
      try {
        myLogger.debug(""String_Node_Str"" + targetDirectory.getName());
        status=TRANSFERRING_STATUS;
        addStatusMessage(""String_Node_Str"");
        fireFileTransferEvent(new FileTransferEvent(FileTransfer.this,FileTransferEvent.TRANSFER_STARTED));
        if (isDownload) {
          download(false,sources);
        }
 else {
          transferFiles();
        }
        myLogger.debug(""String_Node_Str"" + targetDirectory.getName());
        status=FINISHED_STATUS;
        addStatusMessage(""String_Node_Str"");
        fireFileTransferEvent(new FileTransferEvent(FileTransfer.this,FileTransferEvent.TRANSFER_FINISHED));
      }
 catch (      Exception e) {
        e.printStackTrace();
        myLogger.debug(""String_Node_Str"");
        if (status == CANCELLED_STATUS) {
        }
 else {
          status=FAILED_STATUS;
          myLogger.debug(""String_Node_Str"" + targetDirectory.getName());
          addStatusMessage(""String_Node_Str"" + e.getLocalizedMessage());
          possibleException=e;
          fireFileTransferEvent(new FileTransferEvent(FileTransfer.this,e));
        }
      }
    }
  }
;
  transferThread.start();
  if (join) {
    try {
      transferThread.join();
    }
 catch (    InterruptedException e) {
      throw new FileTransferException(""String_Node_Str"");
    }
  }
}"
46780,"protected void setDefaultValue(){
  if (useLastInput) {
    String lastUserInput=holder.getExternalSetValue();
    if (lastUserInput != null && !""String_Node_Str"".equals(lastUserInput))     historyManager.addHistoryEntry(historyManagerKeyForThisNode + ""String_Node_Str"" + TemplateNode.LAST_USED_PARAMETER,lastUserInput,new Date(),1);
  }
  String defaultValue=getDefaultValue();
  if (defaultValue != null) {
    holder.setComponentField(defaultValue);
  }
}","protected void setDefaultValue(){
  if (useLastInput) {
    String lastUserInput=holder.getExternalSetValue();
    if (lastUserInput != null && !""String_Node_Str"".equals(lastUserInput))     historyManager.addHistoryEntry(historyManagerKeyForThisNode + ""String_Node_Str"" + TemplateNode.LAST_USED_PARAMETER,lastUserInput,new Date(),1);
  }
  String defaultValue=getDefaultValue();
  if (defaultValue != null) {
    holder.setComponentField(defaultValue);
  }
 else {
    holder.setComponentField(null);
  }
}"
46781,"protected void setDefaultValue(){
  if (useLastInput) {
    String lastUserInput=holder.getExternalSetValue();
    if (lastUserInput != null && !""String_Node_Str"".equals(lastUserInput))     historyManager.addHistoryEntry(historyManagerKeyForThisNode + ""String_Node_Str"" + TemplateNode.LAST_USED_PARAMETER,lastUserInput,new Date(),1);
  }
  String defaultValue=getDefaultValue();
  if (defaultValue != null) {
    holder.setComponentField(defaultValue);
  }
 else {
    holder.setComponentField(null);
  }
}","protected void setDefaultValue(){
  if (useLastInput) {
    String lastUserInput=holder.getExternalSetValue();
    if (lastUserInput != null && !""String_Node_Str"".equals(lastUserInput))     historyManager.addHistoryEntry(historyManagerKeyForThisNode + ""String_Node_Str"" + TemplateNode.LAST_USED_PARAMETER,lastUserInput,new Date(),1);
  }
  String defaultValue=getDefaultValue();
  if (defaultValue != null) {
    holder.setComponentField(defaultValue);
  }
 else {
    holder.setComponentField(""String_Node_Str"");
  }
}"
46782,"public void reset(){
  String value=getExternalSetValue();
  if (useHistory)   historyManager.addHistoryEntry(this.templateNode.getName(),value,new Date());
  if (COMBOBOX_PANEL.equals(renderMode)) {
    fillComboBox();
  }
  setDefaultValue();
}","public void reset(){
  String value=getExternalSetValue();
  if (useHistory)   historyManager.addHistoryEntry(historyManagerKeyForThisNode,value,new Date());
  if (COMBOBOX_PANEL.equals(renderMode)) {
    fillComboBox();
  }
  setDefaultValue();
}"
46783,"private String[] calculateStagingFileSystemForSubmissionLocation(String subLoc){
  int queSepIndex=subLoc.indexOf(""String_Node_Str"");
  if (queSepIndex < 1) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String queueName=subLoc.substring(0,queSepIndex);
  String contactString=""String_Node_Str"";
  if (subLoc.indexOf(""String_Node_Str"") > 0) {
    contactString=subLoc.substring(subLoc.indexOf(""String_Node_Str"") + 1,subLoc.indexOf(""String_Node_Str""));
  }
 else {
    contactString=subLoc.substring(subLoc.indexOf(""String_Node_Str"") + 1);
  }
  String siteName=client.getSiteForHost(contactString);
  String[] result=client.getGridFTPServersForQueueAtSite(siteName,queueName);
  return result;
}","private String[] calculateStagingFileSystemForSubmissionLocation(String subLoc){
  int queSepIndex=subLoc.indexOf(""String_Node_Str"");
  if (queSepIndex < 1) {
    throw new RuntimeException(""String_Node_Str"" + subLoc);
  }
  String queueName=subLoc.substring(0,queSepIndex);
  String contactString=""String_Node_Str"";
  if (subLoc.indexOf(""String_Node_Str"") > 0) {
    contactString=subLoc.substring(subLoc.indexOf(""String_Node_Str"") + 1,subLoc.indexOf(""String_Node_Str""));
  }
 else {
    contactString=subLoc.substring(subLoc.indexOf(""String_Node_Str"") + 1);
  }
  String siteName=client.getSiteForHost(contactString);
  String[] result=client.getGridFTPServersForQueueAtSite(siteName,queueName);
  return result;
}"
46784,"/** 
 * Create the panel
 */
public DefaultJobDetailsPanel(){
  super();
  setLayout(new FormLayout(new ColumnSpec[]{FormFactory.RELATED_GAP_COLSPEC,FormFactory.DEFAULT_COLSPEC,FormFactory.RELATED_GAP_COLSPEC,new ColumnSpec(""String_Node_Str""),FormFactory.RELATED_GAP_COLSPEC},new RowSpec[]{FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,new RowSpec(""String_Node_Str""),FormFactory.RELATED_GAP_ROWSPEC,new RowSpec(""String_Node_Str""),FormFactory.RELATED_GAP_ROWSPEC}));
  add(getDetailsForJobLabel(),new CellConstraints(2,2,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getStatusLabel(),new CellConstraints(2,4,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getApplicationLabel(),new CellConstraints(2,6,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getFqanLabel(),new CellConstraints(2,8,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getSubmissionHostLabel(),new CellConstraints(2,10,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getSubmissionQueueLabel(),new CellConstraints(2,12,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getSubmissionDateLabel(),new CellConstraints(2,14,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getNoCpusLabel(),new CellConstraints(2,16,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getOtherPropertiesLabel(),new CellConstraints(2,18,CellConstraints.RIGHT,CellConstraints.TOP));
  add(getJobnameTextField(),new CellConstraints(4,2));
  add(getStatusTextField(),new CellConstraints(4,4));
  add(getApplicationTextField(),new CellConstraints(4,6));
  add(getFqanTextField(),new CellConstraints(4,8));
  add(getHostTextField(),new CellConstraints(4,10));
  add(getDateTextField(),new CellConstraints(4,14));
  add(getQueueTextField(),new CellConstraints(4,12));
  add(getCpusTextField(),new CellConstraints(4,16));
  add(getScrollPane(),new CellConstraints(""String_Node_Str""));
}","/** 
 * Create the panel
 */
public DefaultJobDetailsPanel(){
  super();
  setLayout(new FormLayout(new ColumnSpec[]{FormFactory.RELATED_GAP_COLSPEC,FormFactory.DEFAULT_COLSPEC,FormFactory.RELATED_GAP_COLSPEC,ColumnSpec.decode(""String_Node_Str""),FormFactory.RELATED_GAP_COLSPEC,FormFactory.DEFAULT_COLSPEC,FormFactory.RELATED_GAP_COLSPEC},new RowSpec[]{FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,RowSpec.decode(""String_Node_Str""),FormFactory.RELATED_GAP_ROWSPEC}));
  add(getDetailsForJobLabel(),new CellConstraints(2,2,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getStatusLabel(),new CellConstraints(2,4,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getApplicationLabel(),new CellConstraints(2,6,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getFqanLabel(),new CellConstraints(2,8,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getSubmissionHostLabel(),new CellConstraints(2,10,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getSubmissionQueueLabel(),new CellConstraints(2,12,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getSubmissionDateLabel(),new CellConstraints(2,14,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getNoCpusLabel(),new CellConstraints(2,16,CellConstraints.RIGHT,CellConstraints.DEFAULT));
  add(getOtherPropertiesLabel(),new CellConstraints(2,18,CellConstraints.RIGHT,CellConstraints.TOP));
  add(getJobnameTextField(),new CellConstraints(4,2,3,1));
  add(getStatusTextField(),new CellConstraints(4,4));
  add(getApplicationTextField(),new CellConstraints(4,6,3,1));
  add(getFqanTextField(),new CellConstraints(4,8,3,1));
  add(getHostTextField(),new CellConstraints(4,10,3,1));
  add(getDateTextField(),new CellConstraints(4,14,3,1));
  add(getQueueTextField(),new CellConstraints(4,12,3,1));
  add(getCpusTextField(),new CellConstraints(4,16,3,1));
  add(getScrollPane(),new CellConstraints(""String_Node_Str""));
  add(getButton(),new CellConstraints(6,4));
}"
46785,"/** 
 * @return
 */
protected JButton getAddButtonLocal(){
  if (addButtonLocal == null) {
    addButtonLocal=new JButton();
    addButtonLocal.setText(""String_Node_Str"");
    addButtonLocal.setToolTipText(""String_Node_Str"");
    addButtonLocal.setEnabled(false);
  }
  return addButtonLocal;
}","/** 
 * @return
 */
protected JButton getAddButtonLocal(){
  if (addButtonLocal == null) {
    addButtonLocal=new JButton();
    addButtonLocal.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        int returnVal=fc.showOpenDialog(SubmissionPanel.this);
        File file=null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
          file=fc.getSelectedFile();
          myLogger.debug(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
        }
 else {
          myLogger.debug(""String_Node_Str"");
        }
        if (file.exists()) {
          try {
            File newFile=new File(LocalTemplateManagement.TEMPLATE_DIRECTORY,file.getName());
            if (newFile.exists()) {
              int value=JOptionPane.showConfirmDialog(SubmissionPanel.this,""String_Node_Str"" + newFile.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION);
              if (value == JOptionPane.NO_OPTION) {
                return;
              }
            }
            String localTemplateName=templateManager.addLocalTemplate(file,true);
            localListModel.addElement(localTemplateName);
            calculateLocalTemplateVisibility();
            SubmissionPanel.this.templateManager.addLocalTemplate(file,true);
          }
 catch (          IOException e1) {
            JOptionPane.showMessageDialog(SubmissionPanel.this,""String_Node_Str"" + file.toString() + ""String_Node_Str""+ e1.getLocalizedMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
        }
 else {
          JOptionPane.showMessageDialog(SubmissionPanel.this,""String_Node_Str"" + file.toString() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        }
      }
    }
);
    addButtonLocal.setText(""String_Node_Str"");
    addButtonLocal.setToolTipText(""String_Node_Str"");
  }
  return addButtonLocal;
}"
46786,"/** 
 * Create the panel
 */
public SubmissionPanel(EnvironmentManager em){
  super();
  this.em=em;
  layout=new FormLayout(new ColumnSpec[]{FormFactory.RELATED_GAP_COLSPEC,new ColumnSpec(""String_Node_Str""),FormFactory.RELATED_GAP_COLSPEC,new ColumnSpec(""String_Node_Str""),FormFactory.RELATED_GAP_COLSPEC,FormFactory.DEFAULT_COLSPEC,FormFactory.RELATED_GAP_COLSPEC,new ColumnSpec(""String_Node_Str""),FormFactory.RELATED_GAP_COLSPEC,FormFactory.DEFAULT_COLSPEC,FormFactory.RELATED_GAP_COLSPEC},new RowSpec[]{FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,new RowSpec(""String_Node_Str""),FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,new RowSpec(""String_Node_Str""),FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC});
  setLayout(layout);
  add(getScrollPane(),new CellConstraints(2,12,3,1,CellConstraints.FILL,CellConstraints.FILL));
  add(getScrollPane_1(),new CellConstraints(2,18,3,1,CellConstraints.FILL,CellConstraints.FILL));
  add(getLocalLabel(),new CellConstraints(2,16,3,1));
  add(getRemoteLabel(),new CellConstraints(2,10,3,1));
  add(getJsdlTemplatePanel(),new CellConstraints(6,2,5,17,CellConstraints.FILL,CellConstraints.FILL));
  add(getButton(),new CellConstraints(10,20));
  em.addFqanListener(this);
  add(getRemoveButtonRemote(),new CellConstraints(4,14,CellConstraints.FILL,CellConstraints.DEFAULT));
  add(getAddButtonRemote(),new CellConstraints(2,14,CellConstraints.FILL,CellConstraints.DEFAULT));
  add(getRemoveButtonLocal(),new CellConstraints(4,20,CellConstraints.FILL,CellConstraints.DEFAULT));
  add(getAddButtonLocal(),new CellConstraints(2,20,CellConstraints.FILL,CellConstraints.DEFAULT));
  add(getCurrentVoLabel(),new CellConstraints(2,2,3,1));
  add(getSeparator(),new CellConstraints(2,8,3,2));
  add(getCurrentVOField(),new CellConstraints(2,4,3,1));
  add(getChangeButton(),new CellConstraints(2,6,3,1,CellConstraints.FILL,CellConstraints.DEFAULT));
  setFqanLabelText(em.getDefaultFqan());
}","/** 
 * Create the panel
 */
public SubmissionPanel(EnvironmentManager em){
  super();
  FileFilter filter1=new ExtensionFileFilter(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  fc.setFileFilter(filter1);
  this.em=em;
  layout=new FormLayout(new ColumnSpec[]{FormFactory.RELATED_GAP_COLSPEC,ColumnSpec.decode(""String_Node_Str""),FormFactory.RELATED_GAP_COLSPEC,ColumnSpec.decode(""String_Node_Str""),FormFactory.RELATED_GAP_COLSPEC,FormFactory.DEFAULT_COLSPEC,FormFactory.RELATED_GAP_COLSPEC,ColumnSpec.decode(""String_Node_Str""),FormFactory.RELATED_GAP_COLSPEC,FormFactory.DEFAULT_COLSPEC,FormFactory.RELATED_GAP_COLSPEC},new RowSpec[]{FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,RowSpec.decode(""String_Node_Str""),FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC,RowSpec.decode(""String_Node_Str""),FormFactory.RELATED_GAP_ROWSPEC,FormFactory.DEFAULT_ROWSPEC,FormFactory.RELATED_GAP_ROWSPEC});
  setLayout(layout);
  add(getScrollPane(),new CellConstraints(2,12,3,1,CellConstraints.FILL,CellConstraints.FILL));
  add(getScrollPane_1(),new CellConstraints(2,18,3,1,CellConstraints.FILL,CellConstraints.FILL));
  add(getLocalLabel(),new CellConstraints(2,16,3,1));
  add(getRemoteLabel(),new CellConstraints(2,10,3,1));
  add(getJsdlTemplatePanel(),new CellConstraints(6,2,5,17,CellConstraints.FILL,CellConstraints.FILL));
  add(getButton(),new CellConstraints(10,20));
  em.addFqanListener(this);
  add(getRemoveButtonRemote(),new CellConstraints(4,14,CellConstraints.FILL,CellConstraints.DEFAULT));
  add(getAddButtonRemote(),new CellConstraints(2,14,CellConstraints.FILL,CellConstraints.DEFAULT));
  add(getRemoveButtonLocal(),new CellConstraints(4,20,CellConstraints.FILL,CellConstraints.DEFAULT));
  add(getAddButtonLocal(),new CellConstraints(2,20,CellConstraints.FILL,CellConstraints.DEFAULT));
  add(getCurrentVoLabel(),new CellConstraints(2,2,3,1));
  add(getSeparator(),new CellConstraints(2,8,3,2));
  add(getCurrentVOField(),new CellConstraints(2,4,3,1));
  add(getChangeButton(),new CellConstraints(2,6,3,1,CellConstraints.FILL,CellConstraints.DEFAULT));
  setFqanLabelText(em.getDefaultFqan());
}"
46787,"private String createJobSubmissionDescription(ServiceInterface serviceInterface,Document jsdl) throws ServerJobSubmissionException {
  DebugUtils.jsdlDebugOutput(""String_Node_Str"",jsdl);
  Document output=null;
  try {
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    output=docBuilder.newDocument();
  }
 catch (  ParserConfigurationException e1) {
    e1.printStackTrace();
  }
  Element job=output.createElement(""String_Node_Str"");
  output.appendChild(job);
  Element executable=output.createElement(""String_Node_Str"");
  executable.setTextContent(JsdlHelpers.getPosixApplication(jsdl));
  job.appendChild(executable);
  String[] arguments=JsdlHelpers.getPosixApplicationArguments(jsdl);
  for (  String argument : arguments) {
    if (argument != null && !""String_Node_Str"".equals(argument.trim())) {
      Element argument_node=output.createElement(""String_Node_Str"");
      argument_node.setTextContent(argument);
      job.appendChild(argument_node);
    }
  }
  Element directory=output.createElement(""String_Node_Str"");
  directory.setTextContent(JsdlHelpers.getWorkingDirectory(jsdl));
  job.appendChild(directory);
  String stdinValue=JsdlHelpers.getPosixStandardInput(jsdl);
  if (stdinValue != null && !""String_Node_Str"".equals(stdinValue)) {
    Element stdin=output.createElement(""String_Node_Str"");
    stdin.setTextContent(stdinValue);
    job.appendChild(stdin);
  }
  Element stdout=output.createElement(""String_Node_Str"");
  stdout.setTextContent(JsdlHelpers.getPosixStandardOutput(jsdl));
  job.appendChild(stdout);
  Element stderr=output.createElement(""String_Node_Str"");
  stderr.setTextContent(JsdlHelpers.getPosixStandardError(jsdl));
  job.appendChild(stderr);
  String queue=JsdlHelpers.getCandidateHosts(jsdl)[0];
  if (queue.indexOf(""String_Node_Str"") != -1) {
    queue=queue.substring(0,queue.indexOf(""String_Node_Str""));
    Element queue_node=output.createElement(""String_Node_Str"");
    queue_node.setTextContent(queue);
    job.appendChild(queue_node);
  }
  int processorCount=JsdlHelpers.getProcessorCount(jsdl);
  Element jobType=output.createElement(""String_Node_Str"");
  String jobTypeString=JsdlHelpers.getJobType(jsdl);
  if (processorCount > 1) {
    Element count=output.createElement(""String_Node_Str"");
    count.setTextContent(new Integer(processorCount).toString());
    job.appendChild(count);
    if (jobTypeString == null) {
      jobType.setTextContent(""String_Node_Str"");
    }
 else {
      jobType.setTextContent(jobTypeString);
    }
  }
 else {
    if (jobTypeString == null) {
      jobType.setTextContent(""String_Node_Str"");
    }
 else {
      jobType.setTextContent(jobTypeString);
    }
  }
  job.appendChild(jobType);
  Long memory=JsdlHelpers.getTotalMemoryRequirement(jsdl);
  if (memory != null && memory >= 0) {
    Element totalMemory=output.createElement(""String_Node_Str"");
    memory=memory / 1024;
    totalMemory.setTextContent(memory.toString());
    job.appendChild(totalMemory);
  }
  int walltime=JsdlHelpers.getWalltime(jsdl);
  if (walltime > 0) {
    Element maxWallTime=output.createElement(""String_Node_Str"");
    int wt=new Integer(JsdlHelpers.getWalltime(jsdl));
    wt=wt / 60;
    maxWallTime.setTextContent(new Integer(wt).toString());
    job.appendChild(maxWallTime);
  }
  Element fileStageIn=output.createElement(""String_Node_Str"");
  Element extensions=output.createElement(""String_Node_Str"");
  Element jobname=output.createElement(""String_Node_Str"");
  String jobname_string=JsdlHelpers.getJobname(jsdl);
  if (jobname_string.length() > 6) {
    jobname.setTextContent(jobname_string.substring(jobname_string.length() - 6));
  }
  extensions.appendChild(jobname);
  String[] modules_string=null;
  try {
    modules_string=JsdlHelpers.getModules(jsdl);
  }
 catch (  Exception e) {
  }
  if (modules_string != null && modules_string.length == 0) {
    for (    String module_string : modules_string) {
      if (!""String_Node_Str"".equals(module_string)) {
        Element module=output.createElement(""String_Node_Str"");
        module.setTextContent(module_string);
        extensions.appendChild(module);
      }
    }
  }
 else {
    String application=JsdlHelpers.getApplicationName(jsdl);
    String version=JsdlHelpers.getApplicationVersion(jsdl);
    String subLoc=JsdlHelpers.getCandidateHosts(jsdl)[0];
    if (application != null || version != null || subLoc != null) {
      Map<String,String> appDetails=serviceInterface.getApplicationDetails(application,version,subLoc);
      String modulesString=appDetails.get(JobConstants.MDS_MODULES_KEY);
      if (modules_string == null || ""String_Node_Str"".equals(modules_string)) {
        myLogger.warn(""String_Node_Str"");
      }
      if (modulesString != null && modulesString.length() > 0) {
        modules_string=appDetails.get(JobConstants.MDS_MODULES_KEY).split(""String_Node_Str"");
        for (        String module_string : modules_string) {
          if (!""String_Node_Str"".equals(module_string)) {
            Element module=output.createElement(""String_Node_Str"");
            module.setTextContent(module_string);
            extensions.appendChild(module);
          }
        }
      }
    }
 else {
      throw new ServerJobSubmissionException(""String_Node_Str"");
    }
  }
  String email=JsdlHelpers.getEmail(jsdl);
  if (email != null && !""String_Node_Str"".equals(email)) {
    Element email_address=output.createElement(""String_Node_Str"");
    email_address.setTextContent(email);
    extensions.appendChild(email_address);
    if (JsdlHelpers.sendEmailOnJobStart(jsdl)) {
      Element emailonexecution=output.createElement(""String_Node_Str"");
      emailonexecution.setTextContent(""String_Node_Str"");
      extensions.appendChild(emailonexecution);
    }
    if (JsdlHelpers.sendEmailOnJobFinish(jsdl)) {
      Element emailonabort=output.createElement(""String_Node_Str"");
      emailonabort.setTextContent(""String_Node_Str"");
      Element emailontermination=output.createElement(""String_Node_Str"");
      emailontermination.setTextContent(""String_Node_Str"");
      extensions.appendChild(emailonabort);
      extensions.appendChild(emailontermination);
    }
  }
  job.appendChild(extensions);
  StreamResult result=null;
  try {
    Transformer transformer=TransformerFactory.newInstance().newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    result=new StreamResult(new StringWriter());
    DOMSource source=new DOMSource(output);
    transformer.transform(source,result);
  }
 catch (  TransformerConfigurationException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  TransformerFactoryConfigurationError e) {
    e.printStackTrace();
  }
catch (  TransformerException e) {
    e.printStackTrace();
  }
  return result.getWriter().toString();
}","private String createJobSubmissionDescription(ServiceInterface serviceInterface,Document jsdl) throws ServerJobSubmissionException {
  DebugUtils.jsdlDebugOutput(""String_Node_Str"",jsdl);
  Document output=null;
  try {
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    output=docBuilder.newDocument();
  }
 catch (  ParserConfigurationException e1) {
    e1.printStackTrace();
  }
  Element job=output.createElement(""String_Node_Str"");
  output.appendChild(job);
  Element executable=output.createElement(""String_Node_Str"");
  executable.setTextContent(JsdlHelpers.getPosixApplication(jsdl));
  job.appendChild(executable);
  String[] arguments=JsdlHelpers.getPosixApplicationArguments(jsdl);
  for (  String argument : arguments) {
    if (argument != null && !""String_Node_Str"".equals(argument.trim())) {
      Element argument_node=output.createElement(""String_Node_Str"");
      argument_node.setTextContent(argument);
      job.appendChild(argument_node);
    }
  }
  Element directory=output.createElement(""String_Node_Str"");
  directory.setTextContent(JsdlHelpers.getWorkingDirectory(jsdl));
  job.appendChild(directory);
  String stdinValue=JsdlHelpers.getPosixStandardInput(jsdl);
  if (stdinValue != null && !""String_Node_Str"".equals(stdinValue)) {
    Element stdin=output.createElement(""String_Node_Str"");
    stdin.setTextContent(stdinValue);
    job.appendChild(stdin);
  }
  Element stdout=output.createElement(""String_Node_Str"");
  stdout.setTextContent(JsdlHelpers.getPosixStandardOutput(jsdl));
  job.appendChild(stdout);
  Element stderr=output.createElement(""String_Node_Str"");
  stderr.setTextContent(JsdlHelpers.getPosixStandardError(jsdl));
  job.appendChild(stderr);
  String queue=JsdlHelpers.getCandidateHosts(jsdl)[0];
  if (queue.indexOf(""String_Node_Str"") != -1) {
    queue=queue.substring(0,queue.indexOf(""String_Node_Str""));
    Element queue_node=output.createElement(""String_Node_Str"");
    queue_node.setTextContent(queue);
    job.appendChild(queue_node);
  }
  int processorCount=JsdlHelpers.getProcessorCount(jsdl);
  Element jobType=output.createElement(""String_Node_Str"");
  String jobTypeString=JsdlHelpers.getJobType(jsdl);
  if (processorCount > 1) {
    Element count=output.createElement(""String_Node_Str"");
    count.setTextContent(new Integer(processorCount).toString());
    job.appendChild(count);
    if (jobTypeString == null) {
      jobType.setTextContent(""String_Node_Str"");
    }
 else {
      jobType.setTextContent(jobTypeString);
    }
  }
 else {
    if (jobTypeString == null) {
      jobType.setTextContent(""String_Node_Str"");
    }
 else {
      jobType.setTextContent(jobTypeString);
    }
  }
  job.appendChild(jobType);
  Long memory=JsdlHelpers.getTotalMemoryRequirement(jsdl);
  if (memory != null && memory >= 0) {
    Element totalMemory=output.createElement(""String_Node_Str"");
    memory=memory / 1024;
    totalMemory.setTextContent(memory.toString());
    job.appendChild(totalMemory);
  }
  int walltime=JsdlHelpers.getWalltime(jsdl);
  if (walltime > 0) {
    Element maxWallTime=output.createElement(""String_Node_Str"");
    int wt=new Integer(JsdlHelpers.getWalltime(jsdl));
    wt=wt / 60;
    maxWallTime.setTextContent(new Integer(wt).toString());
    job.appendChild(maxWallTime);
  }
  Element fileStageIn=output.createElement(""String_Node_Str"");
  Element extensions=output.createElement(""String_Node_Str"");
  Element jobname=output.createElement(""String_Node_Str"");
  String jobname_string=JsdlHelpers.getJobname(jsdl);
  if (jobname_string.length() > 6) {
    jobname.setTextContent(jobname_string.substring(jobname_string.length() - 6));
  }
  extensions.appendChild(jobname);
  String[] modules_string=null;
  try {
    modules_string=JsdlHelpers.getModules(jsdl);
  }
 catch (  Exception e) {
  }
  if (modules_string != null && modules_string.length > 0) {
    for (    String module_string : modules_string) {
      if (!""String_Node_Str"".equals(module_string)) {
        Element module=output.createElement(""String_Node_Str"");
        module.setTextContent(module_string);
        extensions.appendChild(module);
      }
    }
  }
 else {
    String application=JsdlHelpers.getApplicationName(jsdl);
    String version=JsdlHelpers.getApplicationVersion(jsdl);
    String subLoc=JsdlHelpers.getCandidateHosts(jsdl)[0];
    if (application != null || version != null || subLoc != null) {
      Map<String,String> appDetails=serviceInterface.getApplicationDetails(application,version,subLoc);
      String modulesString=appDetails.get(JobConstants.MDS_MODULES_KEY);
      if (modules_string == null || ""String_Node_Str"".equals(modules_string)) {
        myLogger.warn(""String_Node_Str"");
      }
      if (modulesString != null && modulesString.length() > 0) {
        modules_string=appDetails.get(JobConstants.MDS_MODULES_KEY).split(""String_Node_Str"");
        for (        String module_string : modules_string) {
          if (!""String_Node_Str"".equals(module_string)) {
            Element module=output.createElement(""String_Node_Str"");
            module.setTextContent(module_string);
            extensions.appendChild(module);
          }
        }
      }
    }
 else {
      throw new ServerJobSubmissionException(""String_Node_Str"");
    }
  }
  String email=JsdlHelpers.getEmail(jsdl);
  if (email != null && !""String_Node_Str"".equals(email)) {
    Element email_address=output.createElement(""String_Node_Str"");
    email_address.setTextContent(email);
    extensions.appendChild(email_address);
    if (JsdlHelpers.sendEmailOnJobStart(jsdl)) {
      Element emailonexecution=output.createElement(""String_Node_Str"");
      emailonexecution.setTextContent(""String_Node_Str"");
      extensions.appendChild(emailonexecution);
    }
    if (JsdlHelpers.sendEmailOnJobFinish(jsdl)) {
      Element emailonabort=output.createElement(""String_Node_Str"");
      emailonabort.setTextContent(""String_Node_Str"");
      Element emailontermination=output.createElement(""String_Node_Str"");
      emailontermination.setTextContent(""String_Node_Str"");
      extensions.appendChild(emailonabort);
      extensions.appendChild(emailontermination);
    }
  }
  job.appendChild(extensions);
  StreamResult result=null;
  try {
    Transformer transformer=TransformerFactory.newInstance().newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    result=new StreamResult(new StringWriter());
    DOMSource source=new DOMSource(output);
    transformer.transform(source,result);
  }
 catch (  TransformerConfigurationException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  TransformerFactoryConfigurationError e) {
    e.printStackTrace();
  }
catch (  TransformerException e) {
    e.printStackTrace();
  }
  return result.getWriter().toString();
}"
46788,"/** 
 * Calculates the name of the mountpoint for a given server and fqan. It does that so the mountpoint looks something like: ""ng2.vpac.org (StartUp)"". Not sure whether that is the way to go, but it's the best namingscheme I came up with. Asked in the developers mailing list but didn't get any answers that made sense...
 * @param server the hostname
 * @param fqan the VO
 * @return the name of the mountpoint
 */
private String calculateMountPointName(String server,String fqan){
  URI uri=null;
  String hostname=null;
  try {
    uri=new URI(server);
    hostname=uri.getHost();
  }
 catch (  MalformedURIException e) {
    hostname=server;
  }
  String name=hostname + ""String_Node_Str"" + (fqan.substring(fqan.lastIndexOf(""String_Node_Str"") + 1) + ""String_Node_Str"");
  return name;
}","/** 
 * Calculates the name of the mountpoint for a given server and fqan. It does that so the mountpoint looks something like: ""ng2.vpac.org (StartUp)"". Not sure whether that is the way to go, but it's the best namingscheme I came up with. Asked in the developers mailing list but didn't get any answers that made sense...
 * @param server the hostname
 * @param fqan the VO
 * @return the name of the mountpoint
 */
private String calculateMountPointName(String server,String fqan){
  URI uri=null;
  String hostname=null;
  try {
    uri=new URI(server);
    hostname=uri.getHost();
  }
 catch (  Exception e) {
    hostname=server;
  }
  String name=hostname + ""String_Node_Str"" + (fqan.substring(fqan.lastIndexOf(""String_Node_Str"") + 1) + ""String_Node_Str"");
  return name;
}"
46789,"public static String getOutputDirectory(Document inputXmlFile){
  String expression=""String_Node_Str"";
  NodeList resultNodes=null;
  try {
    resultNodes=(NodeList)xpath.evaluate(expression,inputXmlFile,XPathConstants.NODESET);
  }
 catch (  XPathExpressionException e) {
    myLogger.warn(""String_Node_Str"");
    e.printStackTrace();
    return null;
  }
  String output_path=resultNodes.item(0).getTextContent();
  if (output_path.endsWith(""String_Node_Str"")) {
    return output_path.substring(0,output_path.length() - 1);
  }
 else {
    return output_path;
  }
}","public static String getOutputDirectory(Document inputXmlFile){
  String expression=""String_Node_Str"";
  NodeList resultNodes=null;
  try {
    resultNodes=(NodeList)xpath.evaluate(expression,inputXmlFile,XPathConstants.NODESET);
  }
 catch (  XPathExpressionException e) {
    myLogger.warn(""String_Node_Str"");
    e.printStackTrace();
    return null;
  }
  String output_path=resultNodes.item(0).getTextContent();
  output_path=output_path.trim();
  if (output_path.endsWith(""String_Node_Str"")) {
    return output_path.substring(0,output_path.length() - 1);
  }
 else {
    return output_path;
  }
}"
46790,"/** 
 * short test for the graph.java class.
 * @param argc - ignore.
 */
public static void main(String[] argc){
  Graph test=new Graph();
  test.readFile(""String_Node_Str"");
  test.printMe();
  test.readFile(""String_Node_Str"");
  test.printMe();
  test.readFile(""String_Node_Str"");
  test.printMe();
  System.out.println(""String_Node_Str"");
}","/** 
 * short test for the graph.java class.
 * @param argc - ignore.
 */
public static void main(String[] argc){
  Graph test=new Graph();
  Graph test2=new Graph();
  Graph test3=new Graph();
  test.readFile(""String_Node_Str"");
  test.printMe();
  test2.readFile(""String_Node_Str"");
  test2.printMe();
  test3.readFile(""String_Node_Str"");
  test3.printMe();
  System.out.println(""String_Node_Str"");
}"
46791,"/** 
 * Outputs the content of this graph to console.
 */
public void printMe(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(Nodes.toString());
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(Edge.toString());
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + StartPt.toString());
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + endPt.toString());
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  for (int i=0; i < begin.size(); i++) {
    System.out.println(""String_Node_Str"" + begin.get(i).getX() + ""String_Node_Str""+ begin.get(i).getY()+ ""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  for (int i=0; i < end.size(); i++) {
    System.out.println(""String_Node_Str"" + end.get(i).getX() + ""String_Node_Str""+ end.get(i).getY()+ ""String_Node_Str"");
  }
  System.out.println();
  System.out.println(""String_Node_Str"" + numVisits);
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  for (int i=0; i < begin.size(); i++) {
    System.out.println(""String_Node_Str"" + begin.get(i).getY() + ""String_Node_Str""+ end.get(i).getY()+ ""String_Node_Str"");
  }
  System.out.println();
  System.out.println(""String_Node_Str"");
}","/** 
 * Outputs the content of this graph to console.
 */
public void printMe(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(Nodes.toString());
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(Edge.toString());
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + StartPt.toString());
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + endPt.toString());
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + begin.size());
  for (int i=0; i < begin.size(); i++) {
    System.out.println(""String_Node_Str"" + begin.get(i).getX() + ""String_Node_Str""+ begin.get(i).getY()+ ""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  for (int i=0; i < end.size(); i++) {
    System.out.println(""String_Node_Str"" + end.get(i).getX() + ""String_Node_Str""+ end.get(i).getY()+ ""String_Node_Str"");
  }
  System.out.println();
  System.out.println(""String_Node_Str"" + numVisits);
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + begin.size());
  for (int i=0; i < begin.size(); i++) {
    System.out.println(""String_Node_Str"" + begin.get(i).getY() + ""String_Node_Str""+ end.get(i).getY()+ ""String_Node_Str"");
  }
  System.out.println();
  System.out.println(""String_Node_Str"");
}"
46792,"public final Formula facts(){
  final Variable v=Variable.unary(""String_Node_Str"");
  final Variable w=Variable.unary(""String_Node_Str"");
  final Variable e=Variable.unary(""String_Node_Str"");
  final Variable d=Variable.unary(""String_Node_Str"");
  final Variable n=Variable.unary(""String_Node_Str"");
  final Variable st=Variable.unary(""String_Node_Str"");
  final Variable en=Variable.unary(""String_Node_Str"");
  final Variable x=Variable.unary(""String_Node_Str"");
  final Variable x2=Variable.unary(""String_Node_Str"");
  final Formula f0=v.join(next).eq(w);
  final Formula f1=v.join(ref).eq(e);
  final Formula f2=w.join(ref).eq(d);
  final Formula f3=d.join(begin).eq(e.join(end));
  final Formula f4=f0.and(f1).and(f2).implies(f3);
  final Formula f5=f4.forAll(v.oneOf(Visit).and(w.oneOf(Visit)).and(e.oneOf(Edge)).and(d.oneOf(Edge)));
  final Formula f6=v.in(w.join(next.reflexiveClosure()));
  final Formula f7=w.in(v.join(next.closure())).not();
  final Formula f8=f6.iff(f7).forAll(v.oneOf(Visit).and(w.oneOf(Visit)));
  final Formula f9=v.join(ref.join(begin)).eq(Start);
  final Formula f10=w.in(v.join(next.reflexiveClosure()));
  final Formula f11=f9.and(f10);
  final Formula f12=f11.forSome(v.oneOf(Visit)).forAll(w.oneOf(Visit));
  final Formula f13=v.join(ref.join(end)).eq(Finish);
  final Formula f14=v.in(w.join(next.reflexiveClosure()));
  final Formula f15=f13.and(f14);
  final Formula f16=f15.forSome(v.oneOf(Visit)).forAll(w.oneOf(Visit));
  final Expression reachableFromN=(n.join(((begin.transpose()).join(end)).closure()));
  final Expression nodeb4N=(n.join(end.transpose())).join(begin);
  final Formula f17=n.in(reachableFromN);
  final Formula f18=(nodeb4N.in(reachableFromN)).not();
  final Formula f19=n.in(start_loop);
  final Formula f20=(f18.and(f17)).iff(f19);
  final Formula f21=f20.forAll((n.oneOf(Node)));
  final Expression begEnd=((begin.transpose()).join(end)).closure();
  final Expression nextNodeN=(((n.join(begin.transpose())).join(end)));
  final Formula f27=n.in(n.join(begEnd));
  final Formula f28=n.in(loop_set);
  final Formula f29=f27.iff(f28);
  final Formula f30=f29.forAll(n.oneOf(Node));
  final Formula f31=x.in(start_loop);
  final Formula f32=n.in(end_loop);
  final Formula f33=x.in(nextNodeN);
  final Formula f34=x.product(n).in(corresp);
  final Formula f35=f34.iff(f33.and(f32).and(f31));
  final Formula f36=f35.forAll(n.oneOf(Node).and(x.oneOf(Node)));
  final Formula f38=st.in(nextNodeN);
  final Formula f40=n.in(end_loop);
  final Formula f39=st.in(start_loop);
  final Formula f41=f40.iff(f38.and(f39));
  final Formula f42=f41.forAll(n.oneOf(Node).and(st.oneOf(Node)));
  return f5.and(f8).and(f12).and(f16).and(f21).and(f30).and(f36).and(f42);
}","public final Formula facts(){
  final Variable v=Variable.unary(""String_Node_Str"");
  final Variable w=Variable.unary(""String_Node_Str"");
  final Variable e=Variable.unary(""String_Node_Str"");
  final Variable d=Variable.unary(""String_Node_Str"");
  final Variable n=Variable.unary(""String_Node_Str"");
  final Variable st=Variable.unary(""String_Node_Str"");
  final Variable en=Variable.unary(""String_Node_Str"");
  final Variable x=Variable.unary(""String_Node_Str"");
  final Variable x2=Variable.unary(""String_Node_Str"");
  final Formula f0=v.join(next).eq(w);
  final Formula f1=v.join(ref).eq(e);
  final Formula f2=w.join(ref).eq(d);
  final Formula f3=d.join(begin).eq(e.join(end));
  final Formula f4=f0.and(f1).and(f2).implies(f3);
  final Formula f5=f4.forAll(v.oneOf(Visit).and(w.oneOf(Visit)).and(e.oneOf(Edge)).and(d.oneOf(Edge)));
  final Formula f6=v.in(w.join(next.reflexiveClosure()));
  final Formula f7=w.in(v.join(next.closure())).not();
  final Formula f8=f6.iff(f7).forAll(v.oneOf(Visit).and(w.oneOf(Visit)));
  final Formula f9=v.join(ref.join(begin)).eq(Start);
  final Formula f10=w.in(v.join(next.reflexiveClosure()));
  final Formula f11=f9.and(f10);
  final Formula f12=f11.forSome(v.oneOf(Visit)).forAll(w.oneOf(Visit));
  final Formula f13=v.join(ref.join(end)).eq(Finish);
  final Formula f14=v.in(w.join(next.reflexiveClosure()));
  final Formula f15=f13.and(f14);
  final Formula f16=f15.forSome(v.oneOf(Visit)).forAll(w.oneOf(Visit));
  final Expression reachableFromN=(n.join(((begin.transpose()).join(end)).closure()));
  final Expression nodeb4N=(n.join(end.transpose())).join(begin);
  final Formula f17=n.in(reachableFromN);
  final Formula f18=(nodeb4N.in(reachableFromN)).not();
  final Formula f19=n.in(start_loop);
  final Formula f20=(f18.and(f17)).iff(f19);
  final Formula f21=f20.forAll((n.oneOf(Node)));
  final Expression begEnd=((begin.transpose()).join(end)).closure();
  final Expression nextNodeN=(((n.join(begin.transpose())).join(end)));
  final Formula f27=n.in(n.join(begEnd));
  final Formula f28=n.in(loop_set);
  final Formula f29=f27.iff(f28);
  final Formula f30=f29.forAll(n.oneOf(Node));
  final Formula f31=x.in(start_loop);
  final Formula f32=n.in(end_loop);
  final Formula f33=x.in(nextNodeN);
  final Formula f34=x.product(n).in(corresp);
  final Formula f35=f34.iff(f33.and(f32).and(f31));
  final Formula f36=f35.forAll(n.oneOf(Node).and(x.oneOf(Node)));
  Formula f100=x.in(nextNodeN);
  Formula f101=st.in(nextNodeN);
  Formula f102=st.in(n.join(begEnd));
  Formula f103=(st.in(x.join(begEnd))).not();
  Formula f104=n.in(end_loop);
  Formula f105=f104.implies(f103.and(f102).and(f101).and(f100));
  Formula f106=f105.forAll(n.oneOf(Node).and(st.oneOf(start_loop).and(x.oneOf(Node))));
  return f5.and(f8).and(f12).and(f16).and(f21).and(f30).and(f36).and(f106);
}"
46793,"@SuppressWarnings(""String_Node_Str"") public static void main(String[] args){
  try {
    final PathIF model=new PathIF();
    final Solver solver=new Solver();
    final Bounds b=model.bounds(10);
    final Formula f=model.empty();
    System.out.println(f);
    solver.options().setSolver(SATFactory.DefaultSAT4J);
    System.out.println(System.currentTimeMillis());
    Iterator iterSols=solver.solveAll(f,b);
    System.out.println(System.currentTimeMillis());
    while (iterSols.hasNext()) {
      final Solution s=(Solution)iterSols.next();
      if (s.outcome() == Solution.Outcome.SATISFIABLE || s.outcome() == Solution.Outcome.TRIVIALLY_SATISFIABLE) {
        System.out.println(s);
      }
    }
  }
 catch (  NumberFormatException nfe) {
  }
}","@SuppressWarnings(""String_Node_Str"") public static void main(String[] args){
  try {
    final SchillerCoryIF model=new SchillerCoryIF();
    final Solver solver=new Solver();
    final Bounds b=model.getbounds(10);
    final Formula f=model.empty();
    System.out.println(f);
    solver.options().setSolver(SATFactory.DefaultSAT4J);
    System.out.println(System.currentTimeMillis());
    Iterator iterSols=solver.solveAll(f,b);
    System.out.println(System.currentTimeMillis());
    while (iterSols.hasNext()) {
      final Solution s=(Solution)iterSols.next();
      if (s.outcome() == Solution.Outcome.SATISFIABLE || s.outcome() == Solution.Outcome.TRIVIALLY_SATISFIABLE) {
        System.out.println(s);
      }
    }
  }
 catch (  NumberFormatException nfe) {
  }
}"
46794,"public final Formula facts(){
  return null;
}","public final Formula facts(){
  final Variable v=Variable.unary(""String_Node_Str"");
  final Variable w=Variable.unary(""String_Node_Str"");
  final Variable e=Variable.unary(""String_Node_Str"");
  final Variable d=Variable.unary(""String_Node_Str"");
  final Formula f0=v.join(next).eq(w);
  final Formula f1=v.join(ref).eq(e);
  final Formula f2=w.join(ref).eq(d);
  final Formula f3=d.join(begin).eq(e.join(end));
  final Formula f4=f0.and(f1).and(f2).implies(f3);
  final Formula f5=f4.forAll(v.oneOf(Visit).and(w.oneOf(Visit)).and(e.oneOf(Edge)).and(d.oneOf(Edge)));
  final Formula f6=v.in(w.join(next.reflexiveClosure()));
  final Formula f7=w.in(v.join(next.closure())).not();
  final Formula f8=f6.iff(f7).forAll(v.oneOf(Visit).and(w.oneOf(Visit)));
  final Formula f9=v.join(ref.join(begin)).eq(Start);
  final Formula f10=w.in(v.join(next.reflexiveClosure()));
  final Formula f11=f9.and(f10);
  final Formula f12=f11.forSome(v.oneOf(Visit)).forAll(w.oneOf(Visit));
  final Formula f13=v.join(ref.join(end)).eq(Finish);
  final Formula f14=v.in(w.join(next.reflexiveClosure()));
  final Formula f15=f13.and(f14);
  final Formula f16=f15.forSome(v.oneOf(Visit)).forAll(w.oneOf(Visit));
  return f5.and(f8).and(f12).and(f16);
}"
46795,"/** 
 * Sends a message through the Postmark API. All email addresses must be valid, and the sender must be a valid sender signature according to Postmark. To obtain a valid sender signature, log in to Postmark and navigate to: http://postmarkapp.com/signatures.
 * @param message A prepared message instance.</param>
 * @return A response object
 */
public PostmarkResponse sendMessage(PostmarkMessage message) throws PostmarkException {
  HttpClient httpClient=new DefaultHttpClient();
  PostmarkResponse theResponse=new PostmarkResponse();
  try {
    HttpPost method=new HttpPost(""String_Node_Str"");
    method.addHeader(""String_Node_Str"",""String_Node_Str"");
    method.addHeader(""String_Node_Str"",""String_Node_Str"");
    method.addHeader(""String_Node_Str"",serverToken);
    method.addHeader(""String_Node_Str"",""String_Node_Str"");
    message.validate();
    message.clean();
    Gson gson=gsonBuilder.create();
    String messageContents=gson.toJson(message);
    logger.info(""String_Node_Str"" + messageContents);
    StringEntity payload=new StringEntity(messageContents);
    method.setEntity(payload);
    ResponseHandler<String> responseHandler=new BasicResponseHandler();
    try {
      String response=httpClient.execute(method,responseHandler);
      logger.info(""String_Node_Str"" + response);
      theResponse=gsonBuilder.create().fromJson(response,PostmarkResponse.class);
      theResponse.status=PostmarkStatus.SUCCESS;
    }
 catch (    HttpResponseException hre) {
switch (hre.getStatusCode()) {
case 401:
case 422:
        logger.log(Level.SEVERE,""String_Node_Str"" + hre.getMessage());
      theResponse.setMessage(hre.getMessage());
    theResponse.status=PostmarkStatus.USERERROR;
  throw new PostmarkException(hre.getMessage(),theResponse);
case 500:
logger.log(Level.SEVERE,""String_Node_Str"" + hre.getMessage());
theResponse.setMessage(hre.getMessage());
theResponse.status=PostmarkStatus.SERVERERROR;
throw new PostmarkException(hre.getMessage(),theResponse);
default :
logger.log(Level.SEVERE,""String_Node_Str"" + hre.getMessage());
theResponse.status=PostmarkStatus.UNKNOWN;
theResponse.setMessage(hre.getMessage());
throw new PostmarkException(hre.getMessage(),theResponse);
}
}
}
 catch (Exception e) {
logger.log(Level.SEVERE,""String_Node_Str"" + e.getMessage());
throw new PostmarkException(e);
}
 finally {
httpClient.getConnectionManager().shutdown();
}
return theResponse;
}","/** 
 * Sends a message through the Postmark API. All email addresses must be valid, and the sender must be a valid sender signature according to Postmark. To obtain a valid sender signature, log in to Postmark and navigate to: http://postmarkapp.com/signatures.
 * @param message A prepared message instance.</param>
 * @return A response object
 */
public PostmarkResponse sendMessage(PostmarkMessage message) throws PostmarkException {
  HttpClient httpClient=new DefaultHttpClient();
  PostmarkResponse theResponse=new PostmarkResponse();
  try {
    HttpPost method=new HttpPost(""String_Node_Str"");
    method.addHeader(""String_Node_Str"",""String_Node_Str"");
    method.addHeader(""String_Node_Str"",""String_Node_Str"");
    method.addHeader(""String_Node_Str"",serverToken);
    method.addHeader(""String_Node_Str"",""String_Node_Str"");
    message.validate();
    message.clean();
    Gson gson=gsonBuilder.create();
    String messageContents=gson.toJson(message);
    logger.info(""String_Node_Str"" + messageContents);
    StringEntity payload=new StringEntity(messageContents,""String_Node_Str"");
    method.setEntity(payload);
    ResponseHandler<String> responseHandler=new BasicResponseHandler();
    try {
      String response=httpClient.execute(method,responseHandler);
      logger.info(""String_Node_Str"" + response);
      theResponse=gsonBuilder.create().fromJson(response,PostmarkResponse.class);
      theResponse.status=PostmarkStatus.SUCCESS;
    }
 catch (    HttpResponseException hre) {
switch (hre.getStatusCode()) {
case 401:
case 422:
        logger.log(Level.SEVERE,""String_Node_Str"" + hre.getMessage());
      theResponse.setMessage(hre.getMessage());
    theResponse.status=PostmarkStatus.USERERROR;
  throw new PostmarkException(hre.getMessage(),theResponse);
case 500:
logger.log(Level.SEVERE,""String_Node_Str"" + hre.getMessage());
theResponse.setMessage(hre.getMessage());
theResponse.status=PostmarkStatus.SERVERERROR;
throw new PostmarkException(hre.getMessage(),theResponse);
default :
logger.log(Level.SEVERE,""String_Node_Str"" + hre.getMessage());
theResponse.status=PostmarkStatus.UNKNOWN;
theResponse.setMessage(hre.getMessage());
throw new PostmarkException(hre.getMessage(),theResponse);
}
}
}
 catch (Exception e) {
logger.log(Level.SEVERE,""String_Node_Str"" + e.getMessage());
throw new PostmarkException(e);
}
 finally {
httpClient.getConnectionManager().shutdown();
}
return theResponse;
}"
46796,"public void configureBasePairBoth(JLabel columnLabel){
  int width_offset=((SequenceViewGUI)_sequenceview).getSeqScroll().getWidth() + 4;
  int charwidth=((SequenceViewGUI)_sequenceview).get_TextArea().getFontMetrics(((SequenceViewGUI)_sequenceview).get_TextArea().getFont()).charWidth('A');
  _logicalCol=width_offset / charwidth;
  if (((SequenceViewGUI)_sequenceview).get_TextArea().getHeight() > ((SequenceViewGUI)_sequenceview).get_TextArea().getVisibleRect().getHeight()) {
    _logicalCol=_logicalCol - 4;
  }
 else {
    _logicalCol=_logicalCol - 2;
  }
  if (_locked) {
    _logicalCol=_logicalCol - 1;
  }
  Integer col=new Integer(_logicalCol);
  columnLabel.setText(col.toString());
  configureBasePairRow();
}","public void configureBasePairBoth(JLabel columnLabel){
  int width_offset=((SequenceViewGUI)_sequenceview).getSeqScroll().getWidth() + 4;
  int charwidth=((SequenceViewGUI)_sequenceview).get_TextArea().getFontMetrics(((SequenceViewGUI)_sequenceview).get_TextArea().getFont()).charWidth('A');
  _logicalCol=width_offset / charwidth;
  if (((SequenceViewGUI)_sequenceview).get_TextArea().getHeight() > ((SequenceViewGUI)_sequenceview).get_TextArea().getVisibleRect().getHeight()) {
    _logicalCol=_logicalCol - 4;
  }
 else {
    _logicalCol=_logicalCol - 2;
  }
  if (_locked) {
    _logicalCol=_logicalCol - 1;
  }
  Integer col=new Integer(_logicalCol);
  columnLabel.setText(""String_Node_Str"" + col.toString());
  configureBasePairRow();
}"
46797,"/** 
 * Set the main sequence area to the give string
 * @param newSequence
 */
public void setSequence(NucSeq newSequence){
  int actionChoice;
  String currentText=((SequenceViewGUI)_sequenceview).get_TextArea().getText();
  if ((currentText == null) || (currentText.equalsIgnoreCase(""String_Node_Str""))) {
    actionChoice=0;
  }
 else {
    String[] options={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    actionChoice=javax.swing.JOptionPane.showOptionDialog(new JFrame(),""String_Node_Str"",""String_Node_Str"",javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
  }
  if (!this.checkValidSequence(newSequence.toString(),this.getDegeneracy())) {
    String[] choices={""String_Node_Str"",""String_Node_Str""};
    int getChoice=javax.swing.JOptionPane.showOptionDialog(new JFrame(),""String_Node_Str"",""String_Node_Str"",javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE,null,choices,choices[1]);
    if (getChoice == 1) {
      return;
    }
  }
  if (actionChoice == 0) {
    ((SequenceViewGUI)_sequenceview).get_TextArea().setText(newSequence.toString());
  }
 else   if (actionChoice == 1) {
    ((SequenceViewGUI)_sequenceview).get_TextArea().replaceSelection(newSequence.toString());
  }
 else   if (actionChoice == 2) {
    ((SequenceViewGUI)_sequenceview).get_TextArea().setText(((SequenceViewGUI)_sequenceview).get_TextArea().getText() + newSequence);
  }
 else   if (actionChoice == 3) {
    return;
  }
  _sequence=newSequence;
  _sequenceview.setVisible(true);
}","/** 
 * Set the main sequence area to the give string
 * @param newSequence
 */
public void setSequence(NucSeq newSequence){
  int actionChoice;
  String currentText=((SequenceViewGUI)_sequenceview).get_TextArea().getText();
  if ((currentText == null) || (currentText.equalsIgnoreCase(""String_Node_Str""))) {
    actionChoice=0;
  }
 else {
    String[] options={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    actionChoice=javax.swing.JOptionPane.showOptionDialog(new JFrame(),""String_Node_Str"",""String_Node_Str"",javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
  }
  if (!this.checkValidSequence(newSequence.toString(),this.getDegeneracy())) {
    String[] choices={""String_Node_Str"",""String_Node_Str""};
    int getChoice=javax.swing.JOptionPane.showOptionDialog(new JFrame(),""String_Node_Str"",""String_Node_Str"",javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE,null,choices,choices[1]);
    if (getChoice == 1) {
      return;
    }
  }
  if (actionChoice == 0) {
    ((SequenceViewGUI)_sequenceview).get_TextArea().setText(newSequence.toString());
  }
 else   if (actionChoice == 1) {
    ((SequenceViewGUI)_sequenceview).get_TextArea().replaceSelection(newSequence.toString());
  }
 else   if (actionChoice == 2) {
    ((SequenceViewGUI)_sequenceview).get_TextArea().setText(((SequenceViewGUI)_sequenceview).get_TextArea().getText() + newSequence);
  }
 else   if (actionChoice == 3) {
    return;
  }
  _sequence=newSequence;
}"
46798,"public void switchView(){
  if (_isTC) {
    Component[] components=_tcView.getComponents();
    _sequenceview=new SequenceViewGUI(this);
    _sequenceview.setContentPane((Container)components[1]);
    _sequenceview.setJMenuBar((JMenuBar)components[0]);
    _sequenceview.pack();
    _sequenceview.setTitle(_tcView.getDisplayName());
    _sequenceview.setVisible(true);
    _isTC=false;
    _tcView.close();
  }
 else {
    final JComponent guiContentPane=(JComponent)_sequenceview.getContentPane();
    final JMenuBar menu=_sequenceview.getJMenuBar();
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        _tcView=new TopComponent(){
          @Override public boolean canClose(){
            updateWindowMenus();
            return super.canClose();
          }
        }
;
        _tcView.setLayout(new BorderLayout());
        JScrollPane sp=new JScrollPane(guiContentPane);
        _tcView.add(menu,BorderLayout.NORTH);
        _tcView.add(sp,BorderLayout.CENTER);
        _tcView.setName(_sequenceview.getTitle());
        _tcView.open();
        _tcView.requestActive();
      }
    }
);
    _sequenceview.dispose();
    _isTC=true;
  }
}","public void switchView(){
  if (_isTC) {
    Component[] components=_tcView.getComponents();
    _sequenceview=new SequenceViewGUI(this);
    _sequenceview.setContentPane((Container)components[1]);
    _sequenceview.setJMenuBar((JMenuBar)components[0]);
    _sequenceview.pack();
    _sequenceview.setTitle(_tcView.getName());
    _sequenceview.setVisible(true);
    _isTC=false;
    _tcView.close();
  }
 else {
    final JComponent guiContentPane=(JComponent)_sequenceview.getContentPane();
    final JMenuBar menu=_sequenceview.getJMenuBar();
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        _tcView=new TopComponent(){
          @Override public boolean canClose(){
            updateWindowMenus();
            return super.canClose();
          }
        }
;
        _tcView.setLayout(new BorderLayout());
        JScrollPane sp=new JScrollPane(guiContentPane);
        _tcView.add(menu,BorderLayout.NORTH);
        _tcView.add(sp,BorderLayout.CENTER);
        _tcView.setName(_sequenceview.getTitle());
        _tcView.open();
        _tcView.requestActive();
      }
    }
);
    _sequenceview.dispose();
    _isTC=true;
  }
}"
46799,"private void runDb() throws Exception {
  final Database dbBlogEntries=getEnvironment().openDatabase(null,""String_Node_Str"",dbConfig);
  final BdbMapDao<Blog.BlogEntry> blogEntryMap=new ProtobufBdbMapDaoSupport<>(dbBlogEntries,(k,v) -> Blog.BlogEntry.parseFrom(v.getData()));
  final ByteString key=ByteString.copyFrom(""String_Node_Str"",StandardCharsets.UTF_8);
  blogEntryMap.put(null,key,Blog.BlogEntry.newBuilder().setTitle(""String_Node_Str"").build());
  Blog.BlogEntry actualValue=blogEntryMap.get(null,key);
  log.info(""String_Node_Str"",actualValue);
  blogEntryMap.put(null,key,Blog.BlogEntry.newBuilder().setTitle(""String_Node_Str"").build());
  actualValue=blogEntryMap.get(null,key);
  log.info(""String_Node_Str"",actualValue);
  withTransactionVoid((tx) -> blogEntryMap.put(tx,key,Blog.BlogEntry.newBuilder().setTitle(""String_Node_Str"").build()));
  actualValue=withTransaction((tx) -> blogEntryMap.get(tx,key));
  log.info(""String_Node_Str"",actualValue);
  blogEntryMap.put(null,key,Blog.BlogEntry.newBuilder().setTitle(""String_Node_Str"").build());
  actualValue=blogEntryMap.get(null,key);
  log.info(""String_Node_Str"",actualValue);
  blogEntryMap.delete(null,key);
  actualValue=blogEntryMap.get(null,key,Blog.BlogEntry::getDefaultInstance);
  log.info(""String_Node_Str"",actualValue);
  blogEntryMap.put(null,key,Blog.BlogEntry.newBuilder().setTitle(""String_Node_Str"").build());
  actualValue=blogEntryMap.get(null,key);
  log.info(""String_Node_Str"",actualValue);
}","private void runDb() throws Exception {
  final Database dbBlogEntries=getEnvironment().openDatabase(null,""String_Node_Str"",dbConfig);
  final BdbMapDao<Blog.BlogEntry> blogEntryMap=new ProtobufBdbMapDaoSupport<>(dbBlogEntries,(k,v) -> Blog.BlogEntry.parseFrom(v.getData()),LockMode.READ_COMMITTED);
  final ByteString key=ByteString.copyFrom(""String_Node_Str"",StandardCharsets.UTF_8);
  blogEntryMap.put(null,key,Blog.BlogEntry.newBuilder().setTitle(""String_Node_Str"").build());
  Blog.BlogEntry actualValue=blogEntryMap.get(null,key);
  log.info(""String_Node_Str"",actualValue);
  blogEntryMap.put(null,key,Blog.BlogEntry.newBuilder().setTitle(""String_Node_Str"").build());
  actualValue=blogEntryMap.get(null,key);
  log.info(""String_Node_Str"",actualValue);
  if (actualValue.getTitle().startsWith(""String_Node_Str"")) {
    final DatabaseEntry entry=new DatabaseEntry(key.toByteArray());
    DatabaseEntry value=new DatabaseEntry(Blog.BlogEntry.newBuilder().setTitle(""String_Node_Str"").build().toByteArray());
    dbBlogEntries.put(null,entry,value);
    final DatabaseEntry out=new DatabaseEntry();
    dbBlogEntries.get(null,entry,out,LockMode.READ_COMMITTED);
    log.info(""String_Node_Str"",Blog.BlogEntry.parseFrom(out.getData()));
  }
  withTransactionVoid((tx) -> blogEntryMap.put(tx,key,Blog.BlogEntry.newBuilder().setTitle(""String_Node_Str"").build()));
  actualValue=withTransaction((tx) -> blogEntryMap.get(tx,key));
  log.info(""String_Node_Str"",actualValue);
  blogEntryMap.put(null,key,Blog.BlogEntry.newBuilder().setTitle(""String_Node_Str"").build());
  actualValue=blogEntryMap.get(null,key);
  log.info(""String_Node_Str"",actualValue);
  blogEntryMap.delete(null,key);
  actualValue=blogEntryMap.get(null,key,Blog.BlogEntry::getDefaultInstance);
  log.info(""String_Node_Str"",actualValue);
  blogEntryMap.put(null,key,Blog.BlogEntry.newBuilder().setTitle(""String_Node_Str"").build());
  actualValue=blogEntryMap.get(null,key);
  log.info(""String_Node_Str"",actualValue);
}"
46800,"private DatabaseConfig dbConfig(){
  final DatabaseConfig dbConfig=new DatabaseConfig();
  dbConfig.setTransactional(true);
  dbConfig.setAllowCreate(true);
  dbConfig.setSortedDuplicates(true);
  return dbConfig;
}","private DatabaseConfig dbConfig(){
  return new DatabaseConfig().setTransactional(true).setAllowCreate(true).setSortedDuplicates(false).setDeferredWrite(false).setCacheMode(CacheMode.DEFAULT);
}"
46801,"@PostConstruct public void initDefaultUsers(){
  TransactionTemplate transactionTemplate=new TransactionTemplate(transactionManager);
  transactionTemplate.execute(new TransactionCallback<Object>(){
    @Override public Object doInTransaction(    TransactionStatus status){
      final UserRole userRole=roleDao.save(new UserRole(""String_Node_Str""));
      final UserRole adminRole=roleDao.save(new UserRole(""String_Node_Str""));
      profileDao.save(new UserProfile(""String_Node_Str"",Arrays.asList(new UserAccount(""String_Node_Str"",UserAccount.Kind.NICKNAME)),new HashSet<UserRole>(Arrays.asList(roleDao.findByCode(""String_Node_Str""),roleDao.findByCode(""String_Node_Str"")))));
      return null;
    }
  }
);
}","@PostConstruct public void initDefaultUsers(){
  userService.saveRoles(""String_Node_Str"",""String_Node_Str"");
  userService.createProfile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  userService.createProfile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
46802,"@RequestMapping(""String_Node_Str"") public String index(Model model){
  final UserProfile p=new UserProfile();
  model.addAttribute(p);
  log.info(""String_Node_Str"",p);
  return ""String_Node_Str"";
}","@RequestMapping(""String_Node_Str"") public String index(Model model){
  final UserProfile p=new UserProfile(""String_Node_Str"",Collections.<UserAccount>emptyList(),Collections.<UserRole>emptySet());
  model.addAttribute(p);
  log.info(""String_Node_Str"",p,helloService.getGreeting(""String_Node_Str""));
  return ""String_Node_Str"";
}"
46803,"@Override @Transactional(propagation=Propagation.REQUIRED) public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
  final UserProfile profile=profileDao.findByAccountAlias(username);
  if (profile == null) {
    throw new UsernameNotFoundException(""String_Node_Str"" + username + ""String_Node_Str"");
  }
  return new User(username,profile.getPassword(),Arrays.asList(new SimpleGrantedAuthority(""String_Node_Str"")));
}","@Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
  final UserProfile profile=userService.findProfileByAlias(username);
  if (profile == null) {
    throw new UsernameNotFoundException(""String_Node_Str"" + username + ""String_Node_Str"");
  }
  return new User(username,profile.getPassword(),Arrays.asList(new SimpleGrantedAuthority(""String_Node_Str"")));
}"
46804,"@Override public String getGreeting(String origin){
  return ""String_Node_Str"" + origin;
}","@Override @Transactional(readOnly=true) public String getGreeting(String origin){
  final List<UserAccount> accounts=accountDao.findAll();
  return ""String_Node_Str"" + origin + ""String_Node_Str""+ accounts.size()+ ""String_Node_Str"";
}"
46805,"/** 
 * limit checking method can be overwritten for growth support
 * @param putIdx
 * @return
 */
protected int checkLimit(final int putIdx){
  if (size(putIdx,getIndex.get()) >= elements.length())   return SIZE_MAXED;
  return SIZE_OK;
}","/** 
 * limit checking method can be overwritten for growth support
 * @param putIdx
 * @return
 */
protected int checkLimit(final int putIdx,final int getIdx){
  if (size(putIdx,getIdx) >= elements.length())   return SIZE_MAXED;
  return SIZE_OK;
}"
46806,"/** 
 * inner emthod to select index and put object
 * @param elem
 * @return
 */
protected boolean addInner(final E elem){
  int putIdx, loop=0;
  for (; ; ) {
    putIdx=putIndex.get();
    final int checkLimit=checkLimit(putIdx);
    if (checkLimit == SIZE_MAXED)     return false;
 else     if (checkLimit == SIZE_OK && putIndex.compareAndSet(putIdx,putIdx + 1))     break;
    loop=ThreadUtils.yieldCAS(loop);
  }
  final int tarIdx=remainder(putIdx,elements.length());
  while (!elements.compareAndSet(tarIdx,null,elem))   ThreadUtils.yield();
  return true;
}","/** 
 * inner emthod to select index and put object
 * @param elem
 * @return
 */
protected boolean addInner(final E elem){
  int putIdx, getIdx, loop=0;
  for (; ; ) {
    putIdx=putIndex.get();
    final int checkLimit=checkLimit(putIdx,getIdx=getIndex.get());
    if (putIndex.compareAndSet(putIdx,putIdx) && getIndex.compareAndSet(getIdx,getIdx))     if (checkLimit == SIZE_MAXED)     return false;
 else     if (checkLimit == SIZE_OK && putIndex.compareAndSet(putIdx,putIdx + 1))     break;
    loop=ThreadUtils.yieldCAS(loop);
  }
  final int tarIdx=remainder(putIdx,elements.length());
  while (!elements.compareAndSet(tarIdx,null,elem))   ThreadUtils.yield();
  return true;
}"
46807,"@Override protected int checkLimit(final int putIdx){
  if (super.checkLimit(putIdx) == SIZE_MAXED)   if (elements.length() >= maxCount)   return SIZE_MAXED;
 else   try {
    gro.enter();
synchronized (this) {
      growthInner();
      return RESIZED;
    }
  }
  finally {
    gro.leave();
  }
  return SIZE_OK;
}","@Override protected int checkLimit(final int putIdx,final int getIdx){
  if (super.checkLimit(putIdx,getIdx) == SIZE_MAXED)   if (elements.length() >= maxCount)   return SIZE_MAXED;
 else   try {
    gro.enter();
synchronized (this) {
      growthInner();
      return RESIZED;
    }
  }
  finally {
    gro.leave();
  }
  return SIZE_OK;
}"
46808,"public R obtain(){
  @SuppressWarnings(""String_Node_Str"") final R res=(R)pool.take();
  return res != null ? res : newObject();
}","public R obtain(){
  @SuppressWarnings(""String_Node_Str"") R res=(R)pool.take();
  if (res == null)   res=newObject();
  if (res instanceof IAcquiereSupport)   if (!((IAcquiereSupport)res).getCount().compareAndSet(false,true))   throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ res+ ""String_Node_Str"");
  return res;
}"
46809,"public void free(final R entry){
  if (!pool.add(entry))   LOG.warn(""String_Node_Str"" + this + ""String_Node_Str""+ entry+ ""String_Node_Str"");
}","public void free(final R entry){
  if (entry instanceof IAcquiereSupport)   if (!((IAcquiereSupport)entry).getCount().compareAndSet(true,false))   throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ entry+ ""String_Node_Str"");
  if (!pool.add(entry))   LOG.warn(""String_Node_Str"" + this + ""String_Node_Str""+ entry+ ""String_Node_Str""+ pool.size()+ ""String_Node_Str"");
}"
46810,"/** 
 * inner emthod to select index and put object
 * @param elem
 * @return
 */
@Override protected boolean addInner(final Integer elem){
  int putIdx, loop=0;
  for (; ; ) {
    putIdx=putIndex.get();
    final int checkLimit=checkLimit(putIdx);
    if (checkLimit == SIZE_MAXED)     return false;
 else     if (checkLimit == SIZE_OK && putIndex.compareAndSet(putIdx,putIdx + 1))     break;
    loop=ThreadUtils.yieldCAS(loop);
  }
  final int tarIdx=remainder(putIdx,elements.length());
  while (!elements.compareAndSet(tarIdx,null,tarIdx))   ThreadUtils.yield();
  return true;
}","/** 
 * inner emthod to select index and put object
 * @param elem
 * @return
 */
@Override protected boolean addInner(final Integer elem){
  int putIdx, getIdx, loop=0;
  for (; ; ) {
    putIdx=putIndex.get();
    final int checkLimit=checkLimit(putIdx,getIdx=getIndex.get());
    if (putIndex.compareAndSet(putIdx,putIdx) && getIndex.compareAndSet(getIdx,getIdx))     if (checkLimit == SIZE_MAXED)     return false;
 else     if (checkLimit == SIZE_OK && putIndex.compareAndSet(putIdx,putIdx + 1))     break;
    loop=ThreadUtils.yieldCAS(loop);
  }
  final int tarIdx=remainder(putIdx,elements.length());
  while (!elements.compareAndSet(tarIdx,null,tarIdx))   ThreadUtils.yield();
  return true;
}"
46811,"public Executor(final InterThreads<?> inter){
  inter.start(threadChecker=new ThreadManager(200));
}","public Executor(final InterThreads<?> inter){
  inter.start(threadChecker=new ThreadManager(40));
}"
46812,"@Override protected void innerRun(){
  if (threadCount == 0 || threadCount < maxAmount && getWorkCount() > threadCount * 0.8f) {
    threadCount++;
    final Thread th=createThread(new Worker());
    th.setDaemon(false);
    th.start();
    if (LOG.isDebugEnabled())     LOG.debug(""String_Node_Str"" + th + ""String_Node_Str"");
  }
 else   if (threadCount > coreAmount && getIdleCount() > threadCount * 0.8f) {
    threadCount--;
    exitThreads.incrementAndGet();
  }
}","@Override protected void innerRun(){
  final double frame=0.8d;
  workSum*=frame;
  count*=frame;
  workSum+=getWorkCount() / Math.max(threadCount,1d);
  count++;
  final double workAvr=workSum / count;
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"" + workAvr + ""String_Node_Str"");
  if (threadCount == 0 || threadCount < maxAmount && workAvr > 0.8f) {
    threadCount++;
    final Thread th=createThread(new Worker());
    th.setDaemon(false);
    th.start();
    if (LOG.isDebugEnabled())     LOG.debug(""String_Node_Str"" + th + ""String_Node_Str"");
  }
 else   if (threadCount > coreAmount && workAvr < 0.2f) {
    threadCount--;
    exitThreads.incrementAndGet();
  }
}"
46813,"@Override public final void run(){
  if (!isStoped()) {
    innerRun();
    if (!isStoped() && intervall > 0) {
      next+=intervall;
      tq.add(this);
    }
  }
}","@Override public final void run(){
}"
46814,"public static InstanceField getField(final String fqn,final Object obj){
  final String[] fields=fqn.split(""String_Node_Str"");
  Class<?> curClass=obj instanceof Class ? (Class<?>)obj : obj.getClass();
  Object curObject=obj instanceof Class ? null : obj;
  Field curField=null;
  Object lastObject;
  for (  final String field : fields)   try {
    for (int i=0; i < 10; i++)     try {
      curField=curClass.getDeclaredField(field);
      break;
    }
 catch (    final NoSuchFieldException ex) {
      curClass=curClass.getSuperclass();
      if (curClass == null)       throw ex;
    }
    curField.setAccessible(true);
    lastObject=curObject;
    curObject=curField.get(lastObject);
    if (curObject != null)     curClass=curObject.getClass();
  }
 catch (  final NoSuchFieldException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + field + ""String_Node_Str""+ fqn+ ""String_Node_Str"");
  }
catch (  final IllegalArgumentException e) {
    throw e;
  }
catch (  final IllegalAccessException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + field + ""String_Node_Str""+ fqn+ ""String_Node_Str"",e);
  }
  return new InstanceField(curField,curObject);
}","public static InstanceField getField(final String fqn,final Object obj){
  final String[] fields=fqn.split(""String_Node_Str"");
  Class<?> curClass=obj instanceof Class ? (Class<?>)obj : obj.getClass();
  Object curObject=obj instanceof Class ? null : obj;
  Field curField=null;
  Object lastObject=curObject;
  for (  final String field : fields)   try {
    for (int i=0; i < 10; i++)     try {
      curField=curClass.getDeclaredField(field);
      break;
    }
 catch (    final NoSuchFieldException ex) {
      curClass=curClass.getSuperclass();
      if (curClass == null)       throw ex;
    }
    curField.setAccessible(true);
    lastObject=curObject;
    curObject=curField.get(lastObject);
    if (curObject != null)     curClass=curObject.getClass();
  }
 catch (  final NoSuchFieldException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + field + ""String_Node_Str""+ fqn+ ""String_Node_Str"");
  }
catch (  final IllegalArgumentException e) {
    throw e;
  }
catch (  final IllegalAccessException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + field + ""String_Node_Str""+ fqn+ ""String_Node_Str"",e);
  }
  return new InstanceField(curField,lastObject);
}"
46815,"/** 
 * adds an element as long as the maximum size is not reached
 * @param elem
 * @return true on success
 */
public boolean add(final E elem){
  final boolean res=aq.add(elem);
  if (res)   added.call();
  return res;
}","/** 
 * adds an element as long as the maximum size is not reached
 * @param elem
 * @return true on success
 */
public boolean add(final E elem){
  final boolean res=aq.add(elem);
  if (res)   added.call();
 else   LOG.warn(""String_Node_Str"" + elem + ""String_Node_Str"");
  return res;
}"
46816,"/** 
 * increments state and wakes up all waiting threads
 * @return
 */
@Override public boolean call(){
  modCounter.incrementAndGet();
  return wakeAll(tail.get());
}","/** 
 * increments state and wakes up all waiting threads
 * @return
 */
@Override public void call(){
  modCounter.incrementAndGet();
  wakeAll(tail.get());
}"
46817,"/** 
 * increments state and wakes next waiting thread
 * @return
 */
@Override public boolean call(){
  modCounter.incrementAndGet();
  return wakeNext(tail.get());
}","/** 
 * increments state and wakes next waiting thread
 * @return
 */
@Override public void call(){
  modCounter.incrementAndGet();
  wakeNext(tail.get());
}"
46818,"/** 
 * wakes up all following waiting threads
 * @param nd
 * @return
 */
protected boolean wakeAll(Slot nd){
  boolean res=false;
  if (nd != null)   for (; nd != null; nd=nd.getNext())   res|=nd.wake();
  return res;
}","/** 
 * wakes up all following waiting threads
 * @param nd
 * @return
 */
protected void wakeAll(Slot nd){
  if (nd != null)   for (; nd != null; nd=nd.getNext())   nd.wake();
}"
46819,"/** 
 * set waiting state to true
 */
public void setWaiting(){
  waiting.set(true);
}","/** 
 * set waiting state to true
 * @param state
 */
public void setWaiting(final int state){
  waiting.set(state);
}"
46820,"/** 
 * inner stack context wait method
 * @param state
 * @param nanoTime
 */
private void awaitInner(final int state,final long nanoTime){
  final Thread th=Thread.currentThread();
  final long startTime=System.nanoTime();
  long waitTime=0;
  final Slot sl=enque(th);
  for (; ; ) {
    if (state != getState() || nanoTime >= 0 && (waitTime=nanoTime - (System.nanoTime() - startTime)) <= 0)     break;
    sl.setWaiting();
    if (state != getState())     ;
 else     if (nanoTime < 0)     LockSupport.park(this);
 else     LockSupport.parkNanos(this,waitTime);
    if (!sl.wake())     LockSupport.unpark(th);
    sl.resetWaked();
    LockSupport.park(this);
  }
  dequeue(sl,th);
}","/** 
 * inner stack context wait method
 * @param state
 * @param nTime to wait in nanos
 */
private void awaitInner(final int state,final long nTime){
  final Thread th=Thread.currentThread();
  final long sTime=System.nanoTime();
  long wTime=0;
  final Slot sl=enque(th);
  for (; ; ) {
    if (state != getState())     break;
    if (nTime >= 0 && (wTime=nTime - (System.nanoTime() - sTime)) <= 0)     break;
    sl.setWaiting(state);
    if (nTime < 0)     LockSupport.park(this);
 else     LockSupport.parkNanos(this,wTime);
    sl.setRuning();
  }
  dequeue(sl,th);
}"
46821,"/** 
 * does some waking behavior
 * @return true on waking at least one thread
 */
public abstract boolean call();","/** 
 * does some waking behavior
 * @return true on waking at least one thread
 */
public abstract void call();"
46822,"/** 
 * thread can be waked once it doesn't matters if one thread got an stale node
 * @return true when a thread was waked up
 */
public boolean wake(){
  final Thread th=thread.get();
  if (waiting.compareAndSet(true,false)) {
    LockSupport.unpark(th);
    waked.set(true);
    return true;
  }
  return false;
}","/** 
 * thread can be waked once it doesn't matters if one thread got an stale node
 * @return true when a thread was waked up
 */
public boolean wake(){
  final int state=waiting.get();
  final boolean res=state != 0 && waiting.compareAndSet(state,0);
  LockSupport.unpark(thread.get());
  return res;
}"
46823,"@Override public void run(){
  for (; ; ) {
    final int run=runs.get();
    final int call=calls.get();
    if (call > 0) {
      if (calls.compareAndSet(call,call - 1))       runGuarded();
    }
 else     if (runs.compareAndSet(run,run - 1))     break;
  }
}","@Override public void run(){
  for (; ; ) {
    final int run=runs.get();
    final int call=calls.get();
    if (call > 0) {
      if (calls.compareAndSet(call,call - 1))       runGuarded();
    }
 else     if (runs.compareAndSet(run,run - 1)) {
      if (LOG.isTraceEnabled())       LOG.trace(""String_Node_Str"" + runnable + ""String_Node_Str""+ runnable.getClass().getSimpleName()+ ""String_Node_Str"");
      break;
    }
  }
}"
46824,"public static int getColor(final int r,final int g,final int b,final int a){
  return Math.min(255,Math.max(0,a) & 0xFF) << 24 | Math.min(255,Math.max(0,r) & 0xFF) << 16 | Math.min(255,Math.max(0,g) & 0xFF) << 8 | Math.min(255,Math.max(0,b) & 0xFF) << 0;
}","public static int getColor(final int r,final int g,final int b,final int a){
  return (Math.min(255,Math.max(0,a)) & 0xFF) << 24 | (Math.min(255,Math.max(0,r)) & 0xFF) << 16 | (Math.min(255,Math.max(0,g)) & 0xFF) << 8 | (Math.min(255,Math.max(0,b)) & 0xFF) << 0;
}"
46825,"/** 
 * Converts an string to its java counterpart
 * @param loader for custom types
 * @throws ClassNotFoundException if custom type could not be found
 * @throws SecurityException
 * @throws NoSuchMethodException
 * @throws InvocationTargetException
 * @throws IllegalArgumentException
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
public Object string2type(String string,final ClassLoader loader) throws ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  if (string == null || string.length() == 0)   return null;
  Matcher match;
  string=string.trim();
  match=PT_ARRAY_STRING.matcher(string);
  if (match.matches())   return match.group(1).split(ARRAY_DELIMITER);
  match=PT_ARRAY_BYTE.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final byte[] res=new byte[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Byte.valueOf(vals[i].trim());
    return res;
  }
  match=PT_ARRAY_SHORT.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final short[] res=new short[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Short.valueOf(vals[i].trim());
    return res;
  }
  match=PT_ARRAY_INT.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final int[] res=new int[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Integer.valueOf(vals[i].trim());
    return res;
  }
  match=PT_ARRAY_LONG.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final long[] res=new long[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Long.valueOf(vals[i].trim());
    return res;
  }
  match=PT_ARRAY_FLOAT.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final float[] res=new float[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Float.valueOf(vals[i].trim());
    return res;
  }
  match=PT_ARRAY_DOUBLE.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final double[] res=new double[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Double.valueOf(vals[i].trim());
    return res;
  }
  match=PT_ARRAY_BOOL.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final boolean[] res=new boolean[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Boolean.valueOf(vals[i].trim());
    return res;
  }
  match=PT_STRICT_STRING.matcher(string);
  if (match.matches())   return match.group(1);
  match=PT_STRICT_BYTE.matcher(string);
  if (match.matches())   return Byte.valueOf(match.group(1));
  match=PT_STRICT_SHORT.matcher(string);
  if (match.matches())   return Short.valueOf(match.group(1));
  match=PT_STRICT_INT.matcher(string);
  if (match.matches())   return Integer.valueOf(match.group(1));
  match=PT_STRICT_LONG.matcher(string);
  if (match.matches())   return Long.valueOf(match.group(1));
  match=PT_STRICT_FLOAT.matcher(string);
  if (match.matches())   return Float.valueOf(match.group(1).replace(ARRAY_DELIMITER,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  match=PT_STRICT_DOUBLE.matcher(string);
  if (match.matches())   return Double.valueOf(match.group(1).replace(ARRAY_DELIMITER,""String_Node_Str""));
  match=PT_STRICT_BOOL.matcher(string);
  if (match.matches())   return Boolean.valueOf(match.group(1));
  match=PT_STRICT_CHAR.matcher(string);
  if (match.matches())   return Character.valueOf(match.group(1).charAt(0));
  match=PT_CUSTOM.matcher(string);
  if (customFConverters != null && match.matches()) {
    final ITypeConverter<?> conv=customFConverters.get(match.group(2));
    if (conv != null)     return conv.parse(match.group(1));
  }
  match=PT_CONVERTER.matcher(string);
  if (match.matches()) {
    final Class<?> clazz=loader.loadClass(match.group(2));
    final Constructor<?> con=clazz.getConstructor(String.class);
    return con.newInstance(match.group(1));
  }
  if (!STRICT) {
    match=PT_STRING.matcher(string);
    if (match.matches())     return match.group(1);
    match=PT_BYTE.matcher(string);
    if (match.matches())     return Byte.valueOf(match.group(1));
    match=PT_SHORT.matcher(string);
    if (match.matches())     return Short.valueOf(match.group(1));
    match=PT_INT.matcher(string);
    if (match.matches())     return Integer.valueOf(match.group(1));
    match=PT_LONG.matcher(string);
    if (match.matches())     return Long.valueOf(match.group(1).substring(0,match.group(1).length() - 1));
    match=PT_FLOAT.matcher(string);
    if (match.matches())     return Float.valueOf(match.group(1).replace(ARRAY_DELIMITER,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    match=PT_DOUBLE.matcher(string);
    if (match.matches())     return Double.valueOf(match.group(1).replace(ARRAY_DELIMITER,""String_Node_Str""));
    match=PT_BOOL.matcher(string);
    if (match.matches())     return Boolean.valueOf(match.group(1));
    match=PT_CHAR.matcher(string);
    if (match.matches())     return Character.valueOf(match.group(1).charAt(0));
    match=PT_ARRAY_STRING_SIMPLE.matcher(string);
    if (match.matches())     return Arrays.asList(match.group(1).split(ARRAY_DELIMITER));
  }
  return string;
}","/** 
 * Converts an string to its java counterpart
 * @param loader for custom types
 * @throws ClassNotFoundException if custom type could not be found
 * @throws SecurityException
 * @throws NoSuchMethodException
 * @throws InvocationTargetException
 * @throws IllegalArgumentException
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
public Object string2type(String string,final ClassLoader loader) throws ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  if (string == null || string.length() == 0)   return null;
  Matcher match;
  string=string.trim();
  match=PT_ARRAY_STRING.matcher(string);
  if (match.matches())   return match.group(1).split(ARRAY_DELIMITER);
  match=PT_ARRAY_BYTE.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final byte[] res=new byte[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Byte.valueOf(vals[i].trim());
    return res;
  }
  match=PT_ARRAY_SHORT.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final short[] res=new short[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Short.valueOf(vals[i].trim());
    return res;
  }
  match=PT_ARRAY_INT.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final int[] res=new int[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Integer.valueOf(vals[i].trim());
    return res;
  }
  match=PT_ARRAY_LONG.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final long[] res=new long[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Long.valueOf(vals[i].trim());
    return res;
  }
  match=PT_ARRAY_FLOAT.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final float[] res=new float[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Float.valueOf(vals[i].trim());
    return res;
  }
  match=PT_ARRAY_DOUBLE.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final double[] res=new double[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Double.valueOf(vals[i].trim());
    return res;
  }
  match=PT_ARRAY_BOOL.matcher(string);
  if (match.matches()) {
    final String[] vals=match.group(1).split(ARRAY_DELIMITER);
    final boolean[] res=new boolean[vals.length];
    for (int i=0; i < res.length; i++)     res[i]=Boolean.valueOf(vals[i].trim());
    return res;
  }
  match=PT_STRICT_STRING.matcher(string);
  if (match.matches())   return match.group(1);
  match=PT_STRICT_BYTE.matcher(string);
  if (match.matches())   return Byte.valueOf(match.group(1));
  match=PT_STRICT_SHORT.matcher(string);
  if (match.matches())   return Short.valueOf(match.group(1));
  match=PT_STRICT_INT.matcher(string);
  if (match.matches())   return Integer.valueOf(match.group(1));
  match=PT_STRICT_LONG.matcher(string);
  if (match.matches())   return Long.valueOf(match.group(1));
  match=PT_STRICT_FLOAT.matcher(string);
  if (match.matches())   return Float.valueOf(match.group(1).replace(ARRAY_DELIMITER,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  match=PT_STRICT_DOUBLE.matcher(string);
  if (match.matches())   return Double.valueOf(match.group(1).replace(ARRAY_DELIMITER,""String_Node_Str""));
  match=PT_STRICT_BOOL.matcher(string);
  if (match.matches())   return Boolean.valueOf(match.group(1));
  match=PT_STRICT_CHAR.matcher(string);
  if (match.matches())   return Character.valueOf(match.group(1).charAt(0));
  match=PT_CUSTOM.matcher(string);
  if (customFConverters != null && match.matches()) {
    final ITypeConverter<?> conv=customFConverters.get(match.group(2));
    if (conv != null)     return conv.parse(match.group(1));
  }
  match=PT_CONVERTER.matcher(string);
  if (match.matches()) {
    final Class<?> clazz=loader.loadClass(match.group(2));
    final Constructor<?> con=clazz.getConstructor(String.class);
    return con.newInstance(match.group(1));
  }
  if (!STRICT) {
    match=PT_STRING.matcher(string);
    if (match.matches())     return match.group(1);
    match=PT_BYTE.matcher(string);
    if (match.matches())     return Byte.valueOf(match.group(1));
    match=PT_SHORT.matcher(string);
    if (match.matches())     return Short.valueOf(match.group(1));
    match=PT_INT.matcher(string);
    if (match.matches())     return Integer.valueOf(match.group(1));
    match=PT_HEXINT.matcher(string);
    if (match.matches())     return Integer.decode(match.group(1));
    match=PT_LONG.matcher(string);
    if (match.matches())     return Long.valueOf(match.group(1).substring(0,match.group(1).length() - 1));
    match=PT_FLOAT.matcher(string);
    if (match.matches())     return Float.valueOf(match.group(1).replace(ARRAY_DELIMITER,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    match=PT_DOUBLE.matcher(string);
    if (match.matches())     return Double.valueOf(match.group(1).replace(ARRAY_DELIMITER,""String_Node_Str""));
    match=PT_BOOL.matcher(string);
    if (match.matches())     return Boolean.valueOf(match.group(1));
    match=PT_CHAR.matcher(string);
    if (match.matches())     return Character.valueOf(match.group(1).charAt(0));
    match=PT_ARRAY_STRING_SIMPLE.matcher(string);
    if (match.matches())     return Arrays.asList(match.group(1).split(ARRAY_DELIMITER));
  }
  return string;
}"
46826,"public void setChecked(final int index,final E value){
  if (index + 1 - capacity() > 0)   grow(index + 1,false);
  set(index,value);
}","/** 
 * grows if needed
 * @param index
 * @param value
 */
public void setChecked(final int index,final E value){
  if (index + 1 - capacity() > 0)   grow(index + 1,false);
  set(index,value);
}"
46827,"/** 
 * checks by capacity
 * @param index
 * @return
 */
public E getDirectChecked(final int index){
  return index < capacity() && index >= 0 ? get(index) : null;
}","/** 
 * checks by capacity
 * @param index
 * @return
 */
public E getDirectChecked(final int index){
  return index < capacity() && index >= 0 ? getElements()[index] : null;
}"
46828,"/** 
 * @return amount of contained elements
 */
@Override public int size(){
  final int putIdx=putIndex.get();
  final int getIdx=getIndex.get();
  if (putIdx < getIdx)   return putIdx + elements.length() - getIdx;
 else   return putIdx - getIdx;
}","private int size(final int putIdx,final int getIdx){
  if (putIdx < getIdx)   return Integer.MAX_VALUE - Math.abs(putIdx - getIdx);
 else   return putIdx - getIdx;
}"
46829,"/** 
 * whether size == 0
 * @return
 */
@Override public boolean isEmpty(){
  return size() == 0;
}","/** 
 * whether size == 0
 * @return
 */
@Override public boolean isEmpty(){
  return putIndex.get() == getIndex.get();
}"
46830,"/** 
 * limit checking method can be overwritten for growth support
 * @param nIdx
 * @return
 */
protected int checkLimit(final int nIdx){
  if (nIdx == getIndex.get())   return SIZE_MAXED;
  return SIZE_OK;
}","/** 
 * limit checking method can be overwritten for growth support
 * @param putIdx
 * @return
 */
protected int checkLimit(final int putIdx){
  if (size(putIdx,getIndex.get()) >= elements.length())   return SIZE_MAXED;
  return SIZE_OK;
}"
46831,"/** 
 * inner emthod to select index and put object
 * @param elem
 * @return
 */
protected boolean addInner(final E elem){
  int putIdx, loop=0;
  for (; ; ) {
    putIdx=putIndex.get();
    final int nIdx=(putIdx + 1) % elements.length();
    final int checkLimit=checkLimit(nIdx);
    if (checkLimit == SIZE_MAXED)     return false;
    if (checkLimit == SIZE_OK && putIndex.compareAndSet(putIdx,nIdx))     break;
    loop=ThreadUtils.yieldCAS(loop);
  }
  while (!elements.compareAndSet(putIdx,null,elem))   ThreadUtils.yield();
  return true;
}","/** 
 * inner emthod to select index and put object
 * @param elem
 * @return
 */
protected boolean addInner(final E elem){
  int putIdx, loop=0;
  for (; ; ) {
    putIdx=putIndex.get();
    final int checkLimit=checkLimit(putIdx);
    if (checkLimit == SIZE_MAXED)     return false;
 else     if (checkLimit == SIZE_OK && putIndex.compareAndSet(putIdx,putIdx + 1))     break;
    loop=ThreadUtils.yieldCAS(loop);
  }
  final int tarIdx=remainder(putIdx,elements.length());
  while (!elements.compareAndSet(tarIdx,null,elem))   ThreadUtils.yield();
  return true;
}"
46832,"/** 
 * inner method to select next index and retrieve object
 * @return
 */
protected E takeInner(){
  int getIdx, loop=0;
  for (; ; ) {
    getIdx=getIndex.get();
    if (getIdx == putIndex.get())     return null;
    final int nIdx=(getIdx + 1) % elements.length();
    if (getIndex.compareAndSet(getIdx,nIdx))     break;
    loop=ThreadUtils.yieldCAS(loop);
  }
  for (; ; ) {
    final E res=elements.get(getIdx);
    if (res != null && elements.compareAndSet(getIdx,res,null))     return res;
    ThreadUtils.yield();
  }
}","/** 
 * inner method to select next index and retrieve object
 * @return
 */
protected E takeInner(){
  int getIdx, loop=0;
  for (; ; ) {
    getIdx=getIndex.get();
    if (getIdx == putIndex.get())     return null;
    if (getIndex.compareAndSet(getIdx,getIdx + 1))     break;
    loop=ThreadUtils.yieldCAS(loop);
  }
  final int tarIdx=remainder(getIdx,elements.length());
  for (; ; ) {
    final E res=elements.get(tarIdx);
    if (res != null && elements.compareAndSet(tarIdx,res,null))     return res;
    ThreadUtils.yield();
  }
}"
46833,"/** 
 * @return top element without removing
 */
@Override public E peek(){
  E res=null;
  if (size() > 0) {
    final int length=elements.length();
    final int tidx=(length + putIndex.get() - 1) % length;
    res=elements.get(tidx);
  }
  return res;
}","/** 
 * @return top element without removing
 */
@Override public E peek(){
  E res=null;
  if (size() > 0) {
    final int length=elements.length();
    final int tarIdx=remainder(putIndex.get() - 1,length);
    res=elements.get(tarIdx);
  }
  return res;
}"
46834,"/** 
 * default
 * @param clazz
 * @param maxCount
 */
public ArrayQueueUnbounded(final Class<E> clazz,final int maxCount){
  super(clazz,Math.min(maxCount + 1,Array.MIN_GROWTH));
  this.maxCount=maxCount + 1;
}","/** 
 * default
 * @param clazz
 * @param maxCount
 */
public ArrayQueueUnbounded(final Class<E> clazz,final int maxCount){
  super(clazz,Math.min(maxCount,Array.MIN_GROWTH));
  this.maxCount=maxCount;
}"
46835,"@Override protected int checkLimit(final int nIdx){
  if (super.checkLimit(nIdx) == SIZE_MAXED)   if (elements.length() >= maxCount)   return SIZE_MAXED;
 else   try {
    gro.enter();
synchronized (this) {
      growthInner();
      return RESIZED;
    }
  }
  finally {
    gro.leave();
  }
  return SIZE_OK;
}","@Override protected int checkLimit(final int putIdx){
  if (super.checkLimit(putIdx) == SIZE_MAXED)   if (elements.length() >= maxCount)   return SIZE_MAXED;
 else   try {
    gro.enter();
synchronized (this) {
      growthInner();
      return RESIZED;
    }
  }
  finally {
    gro.leave();
  }
  return SIZE_OK;
}"
46836,"/** 
 * converts an type back to an string representation so that can parsed again, when strict on :Type notation is used
 * @param type
 * @return
 */
public String type2String(final Object value){
  @SuppressWarnings(""String_Node_Str"") final IStringConverter conv;
  if (value == null)   return ""String_Node_Str"";
 else   if (value.getClass().isArray()) {
    final StringBuilder res=new StringBuilder(""String_Node_Str"");
    for (int i=0; i < ((Object[])value).length; i++) {
      if (i > 0)       res.append(""String_Node_Str"");
      res.append(((Object[])value)[i]);
    }
    res.append(""String_Node_Str"");
    final Class<?> clazz=value.getClass().getComponentType();
    if (clazz.isAssignableFrom(String.class)) {
      if (STRICT)       res.append(""String_Node_Str"");
    }
 else     if (clazz.isAssignableFrom(Integer.class))     res.append(""String_Node_Str"");
 else     if (clazz.isAssignableFrom(Long.class))     res.append(""String_Node_Str"");
 else     if (clazz.isAssignableFrom(Float.class))     res.append(""String_Node_Str"");
 else     if (clazz.isAssignableFrom(Double.class))     res.append(""String_Node_Str"");
 else     if (clazz.isAssignableFrom(Boolean.class))     res.append(""String_Node_Str"");
    return res.toString();
  }
 else   if (value instanceof String) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return (String)value;
  }
 else   if (value instanceof Byte) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return new StringBuilder(""String_Node_Str"").append(value).toString();
  }
 else   if (value instanceof Short) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
  }
 else   if (value instanceof Integer) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return ((Integer)value).toString();
  }
 else   if (value instanceof Long) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
  }
 else   if (value instanceof Float) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
  }
 else   if (value instanceof Double) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
  }
 else   if (value instanceof Boolean) {
    if (STRICT) {
      if (((Boolean)value).booleanValue())       return ""String_Node_Str"";
      return ""String_Node_Str"";
    }
    if (((Boolean)value).booleanValue())     return ""String_Node_Str"";
    return ""String_Node_Str"";
  }
 else   if (value instanceof Character) {
    if (STRICT)     return new StringBuilder().append(value).append(""String_Node_Str"").toString();
    return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
  }
 else   if (customBConverters != null && (conv=customBConverters.get(value.getClass())) != null) {
    @SuppressWarnings(""String_Node_Str"") final String res=conv.toString(value);
    return res;
  }
 else   return value.toString();
}","/** 
 * converts an type back to an string representation so that can parsed again, when strict on :Type notation is used
 * @param type
 * @return
 */
public String type2String(final Object value){
  @SuppressWarnings(""String_Node_Str"") final IStringConverter conv;
  if (value == null)   return ""String_Node_Str"";
 else   if (value.getClass().isArray()) {
    final StringBuilder res=new StringBuilder(""String_Node_Str"");
    for (int i=0; i < Array.getLength(value); i++) {
      if (i > 0)       res.append(""String_Node_Str"");
      res.append(type2String(Array.get(value,i)));
    }
    res.append(""String_Node_Str"");
    final Class<?> clazz=value.getClass().getComponentType();
    if (clazz.isAssignableFrom(String.class)) {
      if (STRICT)       res.append(""String_Node_Str"");
    }
 else     if (clazz.isAssignableFrom(Integer.class))     res.append(""String_Node_Str"");
 else     if (clazz.isAssignableFrom(Long.class))     res.append(""String_Node_Str"");
 else     if (clazz.isAssignableFrom(Float.class))     res.append(""String_Node_Str"");
 else     if (clazz.isAssignableFrom(Double.class))     res.append(""String_Node_Str"");
 else     if (clazz.isAssignableFrom(Boolean.class))     res.append(""String_Node_Str"");
    return res.toString();
  }
 else   if (value instanceof String) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return (String)value;
  }
 else   if (value instanceof Byte) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return new StringBuilder(""String_Node_Str"").append(value).toString();
  }
 else   if (value instanceof Short) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
  }
 else   if (value instanceof Integer) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return ((Integer)value).toString();
  }
 else   if (value instanceof Long) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
  }
 else   if (value instanceof Float) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
  }
 else   if (value instanceof Double) {
    if (STRICT)     return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
    return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
  }
 else   if (value instanceof Boolean) {
    if (STRICT) {
      if (((Boolean)value).booleanValue())       return ""String_Node_Str"";
      return ""String_Node_Str"";
    }
    if (((Boolean)value).booleanValue())     return ""String_Node_Str"";
    return ""String_Node_Str"";
  }
 else   if (value instanceof Character) {
    if (STRICT)     return new StringBuilder().append(value).append(""String_Node_Str"").toString();
    return new StringBuilder(""String_Node_Str"").append(value).append(""String_Node_Str"").toString();
  }
 else   if (customBConverters != null && (conv=customBConverters.get(value.getClass())) != null) {
    @SuppressWarnings(""String_Node_Str"") final String res=conv.toString(value);
    return res;
  }
 else   return value.toString();
}"
46837,"/** 
 * waits until an element is takable
 * @param waitMillis
 * @return
 */
public E take(final long waitMillis){
  try {
    lock.lockInterruptibly();
    E elem=take();
    if (elem == null) {
      empty.signalAll();
      if (waitMillis < 0)       added.await();
 else       added.await(waitMillis,TimeUnit.MILLISECONDS);
      elem=take();
    }
    return elem;
  }
 catch (  final InterruptedException e) {
    if (LOG.isTraceEnabled())     LOG.trace(e.getMessage(),e);
  }
 finally {
    lock.unlock();
  }
  return null;
}","/** 
 * waits until an element is takable
 * @param waitMillis
 * @return
 */
public E take(final long waitMillis){
  try {
    lock.lockInterruptibly();
    E elem=take();
    if (elem == null) {
      empty.signalAll();
      if (waitMillis < 0)       added.await();
 else       added.await(waitMillis,TimeUnit.MILLISECONDS);
      elem=take();
    }
    return elem;
  }
 catch (  final InterruptedException e) {
    if (LOG.isTraceEnabled())     LOG.trace(e.getMessage(),e);
  }
 finally {
    if (lock.isHeldByCurrentThread())     lock.unlock();
  }
  return null;
}"
46838,"@Override public String toString(){
  return runnable.toString();
}","@Override public String toString(){
  return ""String_Node_Str"" + runnable.toString();
}"
46839,"@Override public String toString(){
  return ""String_Node_Str"" + run.getClass().getSimpleName() + ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + run.getClass() + ""String_Node_Str"";
}"
46840,"@Override public String toString(){
  return String.format(""String_Node_Str"",maxIdx,itIdx,Arrays.toString(elements));
}","@Override public String toString(){
  return String.format(""String_Node_Str"",maxIdx + 1,itIdx,Arrays.toString(elements));
}"
46841,"/** 
 * for inner access
 * @param thread
 * @param intervall
 * @param it
 */
protected InterThreadIntervall(final E thread,final int intervall,final IInterThreads<E> it){
  this(thread,intervall,null,it);
}","/** 
 * for inner access, for overwritten innerun, starttime
 * @param thread
 * @param intervall
 * @param it
 */
protected InterThreadIntervall(final E thread,final int intervall,final int startIn,final IInterThreads<E> it){
  this(thread,intervall,startIn,null,it);
}"
46842,"public RecurringTask(final int intervallMs){
  this.intervallMs=intervallMs;
  nextRun=System.nanoTime();
}","public RecurringTask(final int intervallMs,final int nextMs){
  this.intervallMs=intervallMs;
  nextRun=System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(nextMs);
}"
46843,"/** 
 * creates class instance
 * @param cl
 * @return
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws InvocationTargetException
 */
@SuppressWarnings(""String_Node_Str"") private static <T>T inst(final Class<T> cl){
  Constructor<?> con;
  try {
    con=cl.getDeclaredConstructor();
  }
 catch (  final NoSuchMethodException e) {
    throw new IllegalStateException(""String_Node_Str"" + cl.getName() + ""String_Node_Str"");
  }
  if (!Modifier.isPublic(con.getModifiers()))   con.setAccessible(true);
  Exception e=null;
  try {
    return (T)con.newInstance();
  }
 catch (  final IllegalArgumentException e1) {
    e=e1;
  }
catch (  final IllegalAccessException e2) {
    e=e2;
  }
catch (  final SecurityException e7) {
    e=e7;
  }
catch (  final InvocationTargetException e8) {
    e=e8;
  }
catch (  final InstantiationException e9) {
    e=e9;
  }
  throw new IllegalStateException(""String_Node_Str"",e);
}","/** 
 * creates class instance
 * @param cl
 * @return
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws InvocationTargetException
 */
@SuppressWarnings(""String_Node_Str"") private static <T>T inst(final Class<T> cl){
  Constructor<?> con;
  try {
    con=cl.getDeclaredConstructor();
  }
 catch (  final NoSuchMethodException e) {
    throw new IllegalStateException(""String_Node_Str"" + cl.getName() + ""String_Node_Str""+ cl.isArray()+ ""String_Node_Str"");
  }
  if (!Modifier.isPublic(con.getModifiers()))   con.setAccessible(true);
  Exception e=null;
  try {
    return (T)con.newInstance();
  }
 catch (  final IllegalArgumentException e1) {
    e=e1;
  }
catch (  final IllegalAccessException e2) {
    e=e2;
  }
catch (  final SecurityException e7) {
    e=e7;
  }
catch (  final InvocationTargetException e8) {
    e=e8;
  }
catch (  final InstantiationException e9) {
    e=e9;
  }
  throw new IllegalStateException(""String_Node_Str"",e);
}"
46844,"@Override public synchronized boolean add(final E elem){
  if (set.put(elem,elem) == null)   return super.add(elem);
  return true;
}","@Override public synchronized boolean add(final E elem){
  if (set.put(elem,elem) == null) {
    final boolean added=super.add(elem);
    if (!added)     set.remove(elem);
    return added;
  }
  return true;
}"
46845,"public int size(){
  return set.size();
}","@Override public int size(){
  return set.size();
}"
46846,"/** 
 * constructs the class index
 * @param classes
 */
public SerializationContext(final Class<?>[]... classes){
  final byte defCount=defaulTypes();
  if (defCount + classes.length > 254)   throw new IllegalArgumentException(""String_Node_Str"");
  byte idx=defCount;
  for (  final Class<?>[] clSet : classes)   for (  final Class<?> cl : clSet) {
    if (cl.isInstance(Serializable.class))     throw new IllegalArgumentException(""String_Node_Str"" + cl + ""String_Node_Str"");
    addClass(cl,idx++);
  }
}","/** 
 * constructs the class index
 * @param classes
 */
public SerializationContext(final Class<?>[]... classes){
  final byte defCount=defaulTypes();
  if (defCount + classes.length > 254)   throw new IllegalArgumentException(""String_Node_Str"");
  short idx=defCount;
  for (  final Class<?>[] clSet : classes)   for (  final Class<?> cl : clSet) {
    if (cl.isInstance(Serializable.class))     throw new IllegalArgumentException(""String_Node_Str"" + cl + ""String_Node_Str"");
    addClass(cl,idx++);
  }
}"
46847,"/** 
 * encapsulated with check
 * @param clazz
 * @return
 */
private byte getClassEid(final Class<?> clazz){
  final Byte res=classesToIdx.get(clazz);
  if (res == null)   throw new IllegalArgumentException(""String_Node_Str"" + clazz.getTypeName() + ""String_Node_Str"");
  return res;
}","/** 
 * encapsulated with check
 * @param clazz
 * @return
 */
private byte getClassEid(final Class<?> clazz){
  final Short res=classesToIdx.get(clazz);
  if (res == null)   throw new IllegalArgumentException(""String_Node_Str"" + clazz.getTypeName() + ""String_Node_Str"");
  return res.byteValue();
}"
46848,"/** 
 * reads an concrete type
 * @param in
 * @param type
 * @return
 * @throws IllegalArgumentException
 * @throws IllegalAccessException
 * @throws IOException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 * @throws SecurityException
 * @throws NoSuchMethodException
 * @throws InvocationTargetException
 */
private Object read(final DataInputStream in,final byte type) throws IllegalArgumentException, IllegalAccessException, IOException, InstantiationException, ClassNotFoundException, SecurityException, InvocationTargetException {
switch (type) {
case nullEid:
    return null;
case boolTrueEid:
case pBoolTrueEid:
  return Boolean.TRUE;
case boolFalseEid:
case pBoolFalseEid:
return Boolean.FALSE;
case byteEid:
case pByteEid:
return Byte.valueOf(in.readByte());
case shortEid:
case pShortEid:
return Short.valueOf(in.readShort());
case intEid:
case pIntEid:
return Integer.valueOf(in.readInt());
case longEid:
case pLongEid:
return Long.valueOf(in.readLong());
case floatEid:
case pFloatEid:
return Float.valueOf(in.readFloat());
case doubleEid:
case pDoubleEid:
return Double.valueOf(in.readDouble());
case stringEid:
return in.readUTF();
case charEid:
case pCharEid:
return Character.valueOf(in.readUTF().charAt(0));
case objEid:
return new Object();
case arrayEid:
final byte atype=in.readByte();
final Class<?> comp=idxToClasses.get(atype);
if (comp == null) {
LOG.error(""String_Node_Str"" + atype + ""String_Node_Str"");
return null;
}
if (atype == nullEid) return null;
return readArray(in,atype,comp);
case -1:
throw new IllegalStateException(""String_Node_Str"");
default :
final Class<?> cl=idxToClasses.get(type);
if (cl == null) {
LOG.error(""String_Node_Str"" + type + ""String_Node_Str"");
return null;
}
 else if (cl.isEnum()) return cl.getEnumConstants()[in.readByte()];
 else {
Constructor<?> con;
try {
con=cl.getDeclaredConstructor();
}
 catch (final NoSuchMethodException e) {
throw new IllegalStateException(""String_Node_Str"" + cl.getTypeName() + ""String_Node_Str"");
}
if (!Modifier.isPublic(con.getModifiers())) con.setAccessible(true);
final Object target=con.newInstance();
final List<Field> fields=getFields(cl);
for (final Field field : fields) if (!Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers())) {
if (field.getAnnotation(IgnoreRead.class) != null) continue;
if (!Modifier.isPublic(field.getModifiers())) field.setAccessible(true);
try {
field.set(target,read(in));
}
 catch (final IllegalStateException ex) {
LOG.error(""String_Node_Str"" + field + ""String_Node_Str""+ ex.getMessage()+ ""String_Node_Str"");
throw ex;
}
}
return filter(target);
}
}
}","/** 
 * reads an concrete type
 * @param in
 * @param type
 * @return
 * @throws IllegalArgumentException
 * @throws IllegalAccessException
 * @throws IOException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 * @throws SecurityException
 * @throws NoSuchMethodException
 * @throws InvocationTargetException
 */
private Object read(final DataInputStream in,final byte type) throws IllegalArgumentException, IllegalAccessException, IOException, InstantiationException, ClassNotFoundException, SecurityException, InvocationTargetException {
switch (type) {
case nullEid:
    return null;
case boolTrueEid:
case pBoolTrueEid:
  return Boolean.TRUE;
case boolFalseEid:
case pBoolFalseEid:
return Boolean.FALSE;
case byteEid:
case pByteEid:
return Byte.valueOf(in.readByte());
case shortEid:
case pShortEid:
return Short.valueOf(in.readShort());
case intEid:
case pIntEid:
return Integer.valueOf(in.readInt());
case longEid:
case pLongEid:
return Long.valueOf(in.readLong());
case floatEid:
case pFloatEid:
return Float.valueOf(in.readFloat());
case doubleEid:
case pDoubleEid:
return Double.valueOf(in.readDouble());
case stringEid:
return in.readUTF();
case charEid:
case pCharEid:
return Character.valueOf(in.readUTF().charAt(0));
case objEid:
return new Object();
case arrayEid:
final byte atype=in.readByte();
final short atypei=(short)(atype & 0xff);
final Class<?> comp=idxToClasses.get(atypei);
if (comp == null) {
LOG.error(""String_Node_Str"" + atypei + ""String_Node_Str"");
return null;
}
if (atype == nullEid) return null;
return readArray(in,atype,comp);
case -1:
throw new IllegalStateException(""String_Node_Str"");
default :
final short typei=(short)(type & 0xff);
final Class<?> cl=idxToClasses.get(typei);
if (cl == null) {
LOG.error(""String_Node_Str"" + typei + ""String_Node_Str"");
return null;
}
 else if (cl.isEnum()) return cl.getEnumConstants()[in.readByte()];
 else {
Constructor<?> con;
try {
con=cl.getDeclaredConstructor();
}
 catch (final NoSuchMethodException e) {
throw new IllegalStateException(""String_Node_Str"" + cl.getTypeName() + ""String_Node_Str"");
}
if (!Modifier.isPublic(con.getModifiers())) con.setAccessible(true);
final Object target=con.newInstance();
final List<Field> fields=getFields(cl);
for (final Field field : fields) if (!Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers())) {
if (field.getAnnotation(IgnoreRead.class) != null) continue;
if (!Modifier.isPublic(field.getModifiers())) field.setAccessible(true);
try {
field.set(target,read(in));
}
 catch (final IllegalStateException ex) {
LOG.error(""String_Node_Str"" + field + ""String_Node_Str""+ ex.getMessage()+ ""String_Node_Str"");
throw ex;
}
}
return filter(target);
}
}
}"
46849,"/** 
 * @return intern id to class mapping
 */
public Map<Byte,Class<?>> getClassMap(){
  return idxToClasses;
}","/** 
 * @return intern id to class mapping
 */
public Map<Short,Class<?>> getClassMap(){
  return idxToClasses;
}"
46850,"/** 
 * method for directly setting a mapping
 * @param eid
 * @param clazz
 */
public void setClass(final byte eid,final Class<?> clazz){
  addClass(clazz,eid);
}","/** 
 * method for directly setting a mapping
 * @param eid
 * @param clazz
 */
public void setClass(final short eid,final Class<?> clazz){
  addClass(clazz,eid);
}"
46851,"/** 
 * directly add an mapping
 * @param clazz
 * @param eid
 * @return
 */
private byte addClass(final Class<?> clazz,final byte eid){
  classesToIdx.put(clazz,eid);
  idxToClasses.put(eid,clazz);
  return eid;
}","/** 
 * directly add an mapping
 * @param clazz
 * @param eid
 * @return
 */
private void addClass(final Class<?> clazz,final short eid){
  classesToIdx.put(clazz,eid);
  idxToClasses.put(eid,clazz);
}"
46852,"@Override public void flush() throws IOException {
  super.flush();
  final String[] logMessages=this.toString().split(""String_Node_Str"");
  for (  final String message : logMessages)   LoggerFactory.getLogger(currentCallerName).info(message.trim());
}","@Override public void flush() throws IOException {
  super.flush();
  final String[] logMessages=this.toString().split(""String_Node_Str"");
  for (  final String message : logMessages) {
    final String msg=message.trim();
    if (msg.length() > 0)     LoggerFactory.getLogger(currentCallerName).info(msg);
  }
  reset();
}"
46853,"public boolean isEmpty(){
  return size() > 0;
}","public boolean isEmpty(){
  return size() == 0;
}"
46854,"public ByteArrayInputStream(){
  super(new byte[0]);
}","public ByteArrayInputStream(final byte[] buf,final int offset,final int length){
  super(buf);
  pos=offset;
  count=Math.min(offset + length,buf.length);
  mark=offset;
}"
46855,"/** 
 * convenience method for finding and removing the index
 * @param elem
 * @return
 */
public E remove(final E elem){
  final int index=indexOf(elem);
  if (index != -1)   return removeIndex(index);
  return null;
}","@Override public void remove(){
  removeIndex(itIdx);
}"
46856,"/** 
 * use array as convenience frontent for an array
 * @param elementData
 */
@SafeVarargs public Array(final E... elementData){
  this.elements=elementData;
  maxIdx=elementData.length - 1;
}","/** 
 * use array as convenience frontent for an array
 * @param elementData
 */
public Array(final E... elementData){
  this.elements=elementData;
  maxIdx=elementData.length - 1;
}"
46857,"@Override public int compare(final ITask t1,final ITask t2){
  return Long.compare(t1.nextRun(),t2.nextRun());
}","@Override public int compare(final ITask t1,final ITask t2){
  return Primitive.compare(t1.nextRun(),t2.nextRun());
}"
46858,"/** 
 * encapsulated with check
 * @param clazz
 * @return
 */
private byte getClassEid(final Class<?> clazz){
  final Short res=classesToIdx.get(clazz);
  if (res == null)   throw new IllegalArgumentException(""String_Node_Str"" + clazz.getTypeName() + ""String_Node_Str"");
  return res.byteValue();
}","/** 
 * encapsulated with check
 * @param clazz
 * @return
 */
private byte getClassEid(final Class<?> clazz){
  final Short res=classesToIdx.get(clazz);
  if (res == null)   throw new IllegalArgumentException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  return res.byteValue();
}"
46859,"@Override public int compare(final Field arg0,final Field arg1){
  return Integer.compare(arg0.getName().hashCode(),arg1.getName().hashCode());
}","@Override public int compare(final Field arg0,final Field arg1){
  return Primitive.compare(arg0.getName().hashCode(),arg1.getName().hashCode());
}"
46860,"/** 
 * reads an concrete type
 * @param in
 * @param type
 * @return
 * @throws IllegalArgumentException
 * @throws IllegalAccessException
 * @throws IOException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 * @throws SecurityException
 * @throws NoSuchMethodException
 * @throws InvocationTargetException
 */
private Object read(final DataInputStream in,final byte type) throws IllegalArgumentException, IllegalAccessException, IOException, InstantiationException, ClassNotFoundException, SecurityException, InvocationTargetException {
switch (type) {
case nullEid:
    return null;
case boolTrueEid:
case pBoolTrueEid:
  return Boolean.TRUE;
case boolFalseEid:
case pBoolFalseEid:
return Boolean.FALSE;
case byteEid:
case pByteEid:
return Byte.valueOf(in.readByte());
case shortEid:
case pShortEid:
return Short.valueOf(in.readShort());
case intEid:
case pIntEid:
return Integer.valueOf(in.readInt());
case longEid:
case pLongEid:
return Long.valueOf(in.readLong());
case floatEid:
case pFloatEid:
return Float.valueOf(in.readFloat());
case doubleEid:
case pDoubleEid:
return Double.valueOf(in.readDouble());
case stringEid:
return in.readUTF();
case charEid:
case pCharEid:
return Character.valueOf(in.readUTF().charAt(0));
case objEid:
return new Object();
case arrayEid:
final byte atype=in.readByte();
final short atypei=(short)(atype & 0xff);
final Class<?> comp=idxToClasses.get(atypei);
if (comp == null) {
LOG.error(""String_Node_Str"" + atypei + ""String_Node_Str"");
return null;
}
if (atype == nullEid) return null;
return readArray(in,atype,comp);
case -1:
throw new IllegalStateException(""String_Node_Str"");
default :
final short typei=(short)(type & 0xff);
final Class<?> cl=idxToClasses.get(typei);
if (cl == null) {
LOG.error(""String_Node_Str"" + typei + ""String_Node_Str"");
return null;
}
 else if (cl.isEnum()) return cl.getEnumConstants()[in.readByte()];
 else {
Constructor<?> con;
try {
con=cl.getDeclaredConstructor();
}
 catch (final NoSuchMethodException e) {
throw new IllegalStateException(""String_Node_Str"" + cl.getTypeName() + ""String_Node_Str"");
}
if (!Modifier.isPublic(con.getModifiers())) con.setAccessible(true);
final Object target=con.newInstance();
final List<Field> fields=getFields(cl);
for (final Field field : fields) if (!Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers())) {
if (field.getAnnotation(IgnoreRead.class) != null) continue;
if (!Modifier.isPublic(field.getModifiers())) field.setAccessible(true);
try {
field.set(target,read(in));
}
 catch (final IllegalStateException ex) {
LOG.error(""String_Node_Str"" + field + ""String_Node_Str""+ ex.getMessage()+ ""String_Node_Str"");
throw ex;
}
}
return filter(target);
}
}
}","/** 
 * reads an concrete type
 * @param in
 * @param type
 * @return
 * @throws IllegalArgumentException
 * @throws IllegalAccessException
 * @throws IOException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 * @throws SecurityException
 * @throws NoSuchMethodException
 * @throws InvocationTargetException
 */
private Object read(final DataInputStream in,final byte type) throws IllegalArgumentException, IllegalAccessException, IOException, InstantiationException, ClassNotFoundException, SecurityException, InvocationTargetException {
switch (type) {
case nullEid:
    return null;
case boolTrueEid:
case pBoolTrueEid:
  return Boolean.TRUE;
case boolFalseEid:
case pBoolFalseEid:
return Boolean.FALSE;
case byteEid:
case pByteEid:
return Byte.valueOf(in.readByte());
case shortEid:
case pShortEid:
return Short.valueOf(in.readShort());
case intEid:
case pIntEid:
return Integer.valueOf(in.readInt());
case longEid:
case pLongEid:
return Long.valueOf(in.readLong());
case floatEid:
case pFloatEid:
return Float.valueOf(in.readFloat());
case doubleEid:
case pDoubleEid:
return Double.valueOf(in.readDouble());
case stringEid:
return in.readUTF();
case charEid:
case pCharEid:
return Character.valueOf(in.readUTF().charAt(0));
case objEid:
return new Object();
case arrayEid:
final byte atype=in.readByte();
final short atypei=(short)(atype & 0xff);
final Class<?> comp=idxToClasses.get(atypei);
if (comp == null) {
LOG.error(""String_Node_Str"" + atypei + ""String_Node_Str"");
return null;
}
if (atype == nullEid) return null;
return readArray(in,atype,comp);
case -1:
throw new IllegalStateException(""String_Node_Str"");
default :
final short typei=(short)(type & 0xff);
final Class<?> cl=idxToClasses.get(typei);
if (cl == null) {
LOG.error(""String_Node_Str"" + typei + ""String_Node_Str"");
return null;
}
 else if (cl.isEnum()) return cl.getEnumConstants()[in.readByte()];
 else {
Constructor<?> con;
try {
con=cl.getDeclaredConstructor();
}
 catch (final NoSuchMethodException e) {
throw new IllegalStateException(""String_Node_Str"" + cl.getName() + ""String_Node_Str"");
}
if (!Modifier.isPublic(con.getModifiers())) con.setAccessible(true);
final Object target=con.newInstance();
final List<Field> fields=getFields(cl);
for (final Field field : fields) if (!Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers())) {
if (field.getAnnotation(IgnoreRead.class) != null) continue;
if (!Modifier.isPublic(field.getModifiers())) field.setAccessible(true);
try {
field.set(target,read(in));
}
 catch (final IllegalStateException ex) {
LOG.error(""String_Node_Str"" + field + ""String_Node_Str""+ ex.getMessage()+ ""String_Node_Str"");
throw ex;
}
}
return filter(target);
}
}
}"
46861,"/** 
 * encapsulated with check
 * @param clazz
 * @return
 */
private byte getClassEid(final Class<?> clazz){
  final Byte res=classesToIdx.get(clazz);
  if (res == null) {
    LOG.error(""String_Node_Str"" + clazz.getTypeName() + ""String_Node_Str"");
    return -1;
  }
  return res;
}","/** 
 * encapsulated with check
 * @param clazz
 * @return
 */
private byte getClassEid(final Class<?> clazz){
  final Byte res=classesToIdx.get(clazz);
  if (res == null)   throw new IllegalArgumentException(""String_Node_Str"" + clazz.getTypeName() + ""String_Node_Str"");
  return res;
}"
46862,"/** 
 * writes an concrete type
 * @param out
 * @param target
 * @param eid
 * @throws IOException
 * @throws IllegalArgumentException
 * @throws IllegalAccessException
 */
private void write(final DataOutputStream out,final Object target,final byte eid) throws IOException, IllegalArgumentException, IllegalAccessException {
switch (eid) {
case nullEid:
case boolTrueEid:
case boolFalseEid:
case pBoolTrueEid:
case pBoolFalseEid:
    break;
case byteEid:
case pByteEid:
  out.writeByte(((Byte)target).byteValue());
break;
case shortEid:
case pShortEid:
out.writeShort(((Short)target).shortValue());
break;
case intEid:
case pIntEid:
out.writeInt(((Integer)target).intValue());
break;
case longEid:
case pLongEid:
out.writeLong(((Long)target).longValue());
break;
case floatEid:
case pFloatEid:
out.writeFloat(((Float)target).floatValue());
break;
case doubleEid:
case pDoubleEid:
out.writeDouble(((Double)target).doubleValue());
break;
case stringEid:
out.writeUTF((String)target);
break;
case pCharEid:
case charEid:
out.writeUTF(String.valueOf(target));
break;
case objEid:
break;
case arrayEid:
final Class<?> compClass=target.getClass().getComponentType();
final byte aeid=getClassEid(compClass);
if (aeid < 0) throw new UnserializableException(target);
out.writeByte(aeid);
writeArray(out,target,aeid,compClass);
break;
default :
final Class<?> tcl=target.getClass();
if (tcl.isEnum()) out.writeByte(((Enum<?>)target).ordinal());
 else {
final List<Field> fields=getFields(tcl);
for (final Field field : fields) if (!Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers())) {
field.setAccessible(true);
try {
write(out,field.get(target));
}
 catch (final UnserializableException ex) {
ex.addTarget(target);
throw ex;
}
}
}
}
}","/** 
 * writes an concrete type
 * @param out
 * @param target
 * @param eid
 * @throws IOException
 * @throws IllegalArgumentException
 * @throws IllegalAccessException
 */
private void write(final DataOutputStream out,final Object target,final byte eid) throws IOException, IllegalArgumentException, IllegalAccessException {
switch (eid) {
case nullEid:
case boolTrueEid:
case boolFalseEid:
case pBoolTrueEid:
case pBoolFalseEid:
    break;
case byteEid:
case pByteEid:
  out.writeByte(((Byte)target).byteValue());
break;
case shortEid:
case pShortEid:
out.writeShort(((Short)target).shortValue());
break;
case intEid:
case pIntEid:
out.writeInt(((Integer)target).intValue());
break;
case longEid:
case pLongEid:
out.writeLong(((Long)target).longValue());
break;
case floatEid:
case pFloatEid:
out.writeFloat(((Float)target).floatValue());
break;
case doubleEid:
case pDoubleEid:
out.writeDouble(((Double)target).doubleValue());
break;
case stringEid:
out.writeUTF((String)target);
break;
case pCharEid:
case charEid:
out.writeUTF(String.valueOf(target));
break;
case objEid:
break;
case arrayEid:
final Class<?> compClass=target.getClass().getComponentType();
final byte aeid=getClassEid(compClass);
out.writeByte(aeid);
writeArray(out,target,aeid,compClass);
break;
default :
final Class<?> tcl=target.getClass();
if (tcl.isEnum()) out.writeByte(((Enum<?>)target).ordinal());
 else {
final List<Field> fields=getFields(tcl);
for (final Field field : fields) if (!Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers())) {
field.setAccessible(true);
try {
write(out,field.get(target));
}
 catch (final UnserializableException ex) {
ex.addTarget(target);
throw ex;
}
}
}
}
}"
46863,"public UnserializableException(final Object target){
  addTarget(target);
}","public UnserializableException(final Object target,final String message){
  addTarget(target);
}"
46864,"@Override public boolean add(final E elem){
  final boolean res=super.add(elem);
  if (res)   try {
    lock.lock();
    added.signal();
  }
  finally {
    lock.unlock();
  }
  return res;
}","@Override public boolean add(final E elem){
  boolean res=false;
  try {
    lock.lock();
    res=super.add(elem);
    if (res)     added.signal();
  }
  finally {
    lock.unlock();
  }
  return res;
}"
46865,"public E take(final long waitMillis){
  try {
    lock.lockInterruptibly();
    if (waitMillis < 0)     added.await();
 else     added.await(waitMillis,TimeUnit.MILLISECONDS);
    return take();
  }
 catch (  final InterruptedException e) {
    LOG.error(e.getMessage(),e);
  }
 finally {
    lock.unlock();
  }
  return null;
}","public E take(final long waitMillis){
  try {
    lock.lockInterruptibly();
    E elem=take();
    if (elem == null) {
      if (waitMillis < 0)       added.await();
 else       added.await(waitMillis,TimeUnit.MILLISECONDS);
      elem=take();
    }
    return elem;
  }
 catch (  final InterruptedException e) {
    LOG.error(e.getMessage(),e);
  }
 finally {
    lock.unlock();
  }
  return null;
}"
46866,"@Override public void run(){
  final long wish=lastUpdate.get();
  final long now=System.currentTimeMillis();
  lastStart=now;
  runnable.run();
  if (lastUpdate.compareAndSet(wish,0))   return;
 else {
    if (interval > 0)     nextRun=now + interval;
    runnable.schedule(this);
  }
}","@Override public void run(){
  final long wish=lastUpdate.get();
  final long now=System.currentTimeMillis();
  lastStart=now;
  if (LOG.isTraceEnabled())   LOG.trace(""String_Node_Str"" + interval + ""String_Node_Str""+ this+ ""String_Node_Str"");
  runnable.run();
  if (lastUpdate.compareAndSet(wish,0)) {
    if (LOG.isTraceEnabled())     LOG.trace(""String_Node_Str"" + interval + ""String_Node_Str""+ this+ ""String_Node_Str"");
    return;
  }
 else {
    if (interval > 0)     nextRun=now + interval;
    if (LOG.isTraceEnabled())     LOG.trace(""String_Node_Str"" + interval + ""String_Node_Str""+ this+ ""String_Node_Str"");
    runnable.schedule(this);
  }
}"
46867,"@Override public void schedule(final ITask capsule){
  if (capsule.nextRun() <= 0)   capsule.run();
 else   InterThreads.this.tque.add(capsule);
}","@Override public void schedule(final ITask capsule){
  if (capsule.nextRun() <= 0) {
    if (LOG.isTraceEnabled())     LOG.trace(""String_Node_Str"" + this + ""String_Node_Str"");
    capsule.run();
  }
 else {
    if (LOG.isTraceEnabled())     LOG.trace(""String_Node_Str"" + this + ""String_Node_Str"");
    InterThreads.this.tque.add(capsule);
  }
}"
46868,"@Override public void run(){
  InterThreads.this.put(thread,run);
}","@Override public void run(){
  if (LOG.isTraceEnabled())   LOG.trace(""String_Node_Str"" + this + ""String_Node_Str"");
  InterThreads.this.put(thread,run);
}"
46869,"@Override public boolean equals(final Object object){
  if (object == this)   return true;
  if (!(object instanceof Array))   return false;
  final Array<?> array=(Array<?>)object;
  final int n=maxIdx;
  if (n != array.maxIdx)   return false;
  final Object[] items1=this.elements;
  final Object[] items2=array.elements;
  for (int i=0; i < n; i++) {
    final Object o1=items1[i];
    final Object o2=items2[i];
    if (!(o1 == null ? o2 == null : o1.equals(o2)))     return false;
  }
  return true;
}","@Override public boolean equals(final Object object){
  if (object == this)   return true;
  if (!(object instanceof Array))   return false;
  final Array<?> array=(Array<?>)object;
  final int n=maxIdx;
  if (n != array.maxIdx)   return false;
  final Object[] items1=this.elements;
  final Object[] items2=array.elements;
  for (int i=0; i <= n; i++) {
    final Object o1=items1[i];
    final Object o2=items2[i];
    if (!(o1 == null ? o2 == null : o1.equals(o2)))     return false;
  }
  return true;
}"
46870,"public E take(final long waitMillis){
  try {
    lock.lockInterruptibly();
    added.await(waitMillis,TimeUnit.MILLISECONDS);
    return take();
  }
 catch (  final InterruptedException e) {
    LOG.error(e.getMessage(),e);
  }
 finally {
    lock.unlock();
  }
  return null;
}","public E take(final long waitMillis){
  try {
    lock.lockInterruptibly();
    if (waitMillis < 0)     added.await();
 else     added.await(waitMillis,TimeUnit.MILLISECONDS);
    return take();
  }
 catch (  final InterruptedException e) {
    LOG.error(e.getMessage(),e);
  }
 finally {
    lock.unlock();
  }
  return null;
}"
46871,"private void calcNextRun(){
  if (nextRun == 0)   nextRun=System.currentTimeMillis();
  nextRun+=intervallMs;
}","private void calcNextRun(){
  final long now=System.currentTimeMillis();
  if (nextRun == 0)   nextRun=now;
  nextRun+=((now - nextRun) / intervallMs + 1) * intervallMs;
}"
46872,"/** 
 * adds an task for scheduling
 * @param t
 */
public void add(final ITask t){
  System.out.println(""String_Node_Str"" + t + ""String_Node_Str"");
  queue.add(t);
  if (queue.peek() == t)   monitor.release();
}","/** 
 * adds an task for scheduling
 * @param t
 */
public void add(final ITask t){
  if (LOG.isTraceEnabled())   LOG.trace(""String_Node_Str"" + t + ""String_Node_Str"");
  queue.add(t);
  if (queue.peek() == t)   monitor.release();
}"
46873,"/** 
 * check and try to run the next task
 * @param nt
 * @return null on success or the new queue head
 */
private void timedOut(final ITask nt){
  final ITask t=tq.queue.poll();
  run(t);
  if (t.isRecurring()) {
    System.out.println(""String_Node_Str"" + t + ""String_Node_Str"");
    tq.add(t);
  }
}","/** 
 * check and try to run the next task
 * @param nt
 * @return null on success or the new queue head
 */
private void timedOut(final ITask nt){
  final ITask t=tq.queue.poll();
  run(t);
  if (t.isRecurring())   tq.add(t);
}"
46874,"/** 
 * catches the run
 * @param t
 */
private void run(final ITask t){
  try {
    System.out.println(""String_Node_Str"" + t + ""String_Node_Str"");
    t.run();
  }
 catch (  final Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * catches the run
 * @param t
 */
private void run(final ITask t){
  try {
    if (LOG.isTraceEnabled())     LOG.trace(""String_Node_Str"" + t + ""String_Node_Str"");
    t.run();
  }
 catch (  final Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}"
46875,"@Override public void run(){
  final long now=System.currentTimeMillis();
  lastStart=now;
  runnable.run();
  final long wish=lastUpdate.get();
  if (wish < now && lastUpdate.compareAndSet(wish,0))   return;
 else {
    if (interval > 0)     nextRun=now + interval;
    runnable.schedule(this);
  }
}","@Override public void run(){
  final long wish=lastUpdate.get();
  final long now=System.currentTimeMillis();
  lastStart=now;
  runnable.run();
  if (lastUpdate.compareAndSet(wish,0))   return;
 else {
    if (interval > 0)     nextRun=now + interval;
    runnable.schedule(this);
  }
}"
46876,"@Override public void schedule(final ITask capsule){
  if (capsule.nextRun() <= 0) {
    System.out.println(""String_Node_Str"");
    capsule.run();
  }
 else   InterThreads.this.tque.add(capsule);
}","@Override public void schedule(final ITask capsule){
  if (capsule.nextRun() <= 0)   capsule.run();
 else   InterThreads.this.tque.add(capsule);
}"
46877,"/** 
 * default
 * @param thread
 * @param run
 */
public InterThreadTimeoutable(final E thread,final Runnable run){
  super(thread,run);
  System.out.println(""String_Node_Str"");
}","/** 
 * default
 * @param thread
 * @param run
 */
public InterThreadTimeoutable(final E thread,final Runnable run){
  super(thread,run);
}"
46878,"/** 
 * nulls all field in the array
 */
public void clear(){
  for (int i=0; i < elements.length; i++) {
    elements[i]=null;
  }
  rewind();
}","/** 
 * nulls all field in the array
 */
public void clear(){
  for (int i=0; i < elements.length; i++) {
    elements[i]=null;
  }
  rewind();
  reset();
}"
46879,"/** 
 * nulls all fields up to the current maximum element
 */
public void clean(){
  for (int i=0; i <= maxIdx; i++) {
    elements[i]=null;
  }
  rewind();
}","/** 
 * nulls all fields up to the current maximum element
 */
public void clean(){
  for (int i=0; i <= maxIdx; i++) {
    elements[i]=null;
  }
  rewind();
  reset();
}"
46880,"@Override public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Wolf) {
    Wolf wolf=(Wolf)event.getEntity();
    if (wolf.isTamed()) {
      if (event instanceof EntityDamageByEntityEvent && wolf.getOwner() instanceof Player) {
        EntityDamageByEntityEvent damageEvent=(EntityDamageByEntityEvent)event;
        Player owner=(Player)wolf.getOwner();
        if (damageEvent.getDamager().equals(owner) && owner.getItemInHand().getType() == Material.BONE) {
          wolf.setOwner(null);
          wolf.setSitting(false);
          owner.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
 else         if (damageEvent.getDamager() instanceof Player) {
          Player attacker=(Player)damageEvent.getDamager();
          if (attacker.isOp() && attacker.getItemInHand().getType() == Material.BONE) {
            if (!owner.isOp()) {
              wolf.setOwner(null);
              wolf.setSitting(false);
              attacker.sendMessage(ChatColor.RED + ""String_Node_Str"" + owner.getDisplayName()+ ""String_Node_Str"");
              if (owner.isOnline())               owner.sendMessage(ChatColor.RED + attacker.getDisplayName() + ""String_Node_Str"");
            }
 else {
              attacker.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
          }
        }
      }
      event.setCancelled(true);
    }
  }
  if (event.getEntity() instanceof Player && event instanceof EntityDamageByEntityEvent) {
    Player player=(Player)event.getEntity();
    EntityDamageByEntityEvent damageEvent=(EntityDamageByEntityEvent)event;
    if (damageEvent.getDamager() instanceof Wolf) {
      Wolf wolf=(Wolf)damageEvent.getDamager();
      if (wolf.isTamed() && wolf.getOwner() instanceof Player) {
        Player owner=(Player)wolf.getOwner();
        if (owner.equals(player)) {
          wolf.setTarget(null);
          event.setCancelled(true);
        }
      }
    }
    if (damageEvent.getDamager().equals(damageEvent.getEntity()))     event.setCancelled(true);
  }
}","@Override public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Wolf) {
    Wolf wolf=(Wolf)event.getEntity();
    if (wolf.isTamed()) {
      if (event instanceof EntityDamageByEntityEvent && wolf.getOwner() instanceof Player) {
        EntityDamageByEntityEvent damageEvent=(EntityDamageByEntityEvent)event;
        Player owner=(Player)wolf.getOwner();
        if (damageEvent.getDamager().equals(owner) && owner.getItemInHand().getType() == Material.BONE) {
          wolf.setOwner(null);
          wolf.setSitting(false);
          owner.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
 else         if (damageEvent.getDamager() instanceof Player) {
          Player attacker=(Player)damageEvent.getDamager();
          if (attacker.isOp() && attacker.getItemInHand().getType() == Material.BONE) {
            if (!owner.isOp()) {
              wolf.setOwner(null);
              wolf.setSitting(false);
              attacker.sendMessage(ChatColor.RED + ""String_Node_Str"" + owner.getDisplayName()+ ""String_Node_Str"");
              if (owner.isOnline())               owner.sendMessage(ChatColor.RED + attacker.getDisplayName() + ""String_Node_Str"");
            }
 else {
              attacker.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
          }
        }
      }
      event.setCancelled(true);
    }
  }
  if (event.getEntity() instanceof Player && event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent damageEvent=(EntityDamageByEntityEvent)event;
    if (damageEvent.getDamager().equals(damageEvent.getEntity()))     event.setCancelled(true);
  }
}"
46881,"@Override public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Wolf) {
    Wolf wolf=(Wolf)event.getEntity();
    if (wolf.isTamed() && wolf.getOwner() instanceof Player) {
      if (event instanceof EntityDamageByEntityEvent) {
        EntityDamageByEntityEvent damageEvent=(EntityDamageByEntityEvent)event;
        Player owner=(Player)wolf.getOwner();
        if (damageEvent.getDamager().equals(owner) && owner.getItemInHand().getType() == Material.BONE) {
          wolf.setOwner(null);
          wolf.setSitting(false);
          owner.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
 else         if (damageEvent.getDamager() instanceof Player) {
          Player attacker=(Player)damageEvent.getDamager();
          if (attacker.isOp() && attacker.getItemInHand().getType() == Material.BONE) {
            wolf.setOwner(null);
            wolf.setSitting(false);
            attacker.sendMessage(ChatColor.RED + ""String_Node_Str"" + owner.getDisplayName()+ ""String_Node_Str"");
            if (owner.isOnline())             owner.sendMessage(ChatColor.RED + attacker.getDisplayName() + ""String_Node_Str"");
          }
        }
      }
      event.setCancelled(true);
    }
  }
  if (event.getEntity() instanceof Player && event instanceof EntityDamageByEntityEvent) {
    Player player=(Player)event.getEntity();
    EntityDamageByEntityEvent damageEvent=(EntityDamageByEntityEvent)event;
    if (damageEvent.getDamager() instanceof Wolf) {
      Wolf wolf=(Wolf)damageEvent.getDamager();
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        wolf.setTarget(null);
        event.setCancelled(true);
      }
    }
    if (damageEvent.getDamager().equals(damageEvent.getEntity()))     event.setCancelled(true);
  }
}","@Override public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Wolf) {
    Wolf wolf=(Wolf)event.getEntity();
    if (wolf.isTamed()) {
      if (event instanceof EntityDamageByEntityEvent && wolf.getOwner() instanceof Player) {
        EntityDamageByEntityEvent damageEvent=(EntityDamageByEntityEvent)event;
        Player owner=(Player)wolf.getOwner();
        if (damageEvent.getDamager().equals(owner) && owner.getItemInHand().getType() == Material.BONE) {
          wolf.setOwner(null);
          wolf.setSitting(false);
          owner.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
 else         if (damageEvent.getDamager() instanceof Player) {
          Player attacker=(Player)damageEvent.getDamager();
          if (attacker.isOp() && attacker.getItemInHand().getType() == Material.BONE && !owner.isOp()) {
            wolf.setOwner(null);
            wolf.setSitting(false);
            attacker.sendMessage(ChatColor.RED + ""String_Node_Str"" + owner.getDisplayName()+ ""String_Node_Str"");
            if (owner.isOnline())             owner.sendMessage(ChatColor.RED + attacker.getDisplayName() + ""String_Node_Str"");
          }
        }
      }
      event.setCancelled(true);
    }
  }
  if (event.getEntity() instanceof Player && event instanceof EntityDamageByEntityEvent) {
    Player player=(Player)event.getEntity();
    EntityDamageByEntityEvent damageEvent=(EntityDamageByEntityEvent)event;
    if (damageEvent.getDamager() instanceof Wolf) {
      Wolf wolf=(Wolf)damageEvent.getDamager();
      if (wolf.isTamed() && wolf.getOwner() instanceof Player) {
        Player owner=(Player)wolf.getOwner();
        if (owner.equals(player)) {
          wolf.setTarget(null);
          event.setCancelled(true);
        }
      }
    }
    if (damageEvent.getDamager().equals(damageEvent.getEntity()))     event.setCancelled(true);
  }
}"
46882,"@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  event.setCancelled(false);
  Player player=event.getPlayer();
  Entity target=event.getRightClicked();
  if (player.getItemInHand().getType() == Material.BONE && event.getRightClicked() instanceof Wolf) {
    Wolf wolf=(Wolf)target;
    if (!wolf.isTamed() && playerHasTooManyWolves(player)) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.maxWolves+ ""String_Node_Str"");
    }
 else     if (wolf.isTamed() && !wolf.getOwner().equals(player) && wolf.getOwner() instanceof Player) {
      Player owner=(Player)wolf.getOwner();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + owner.getDisplayName());
    }
  }
}","@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  event.setCancelled(false);
  Player player=event.getPlayer();
  Entity target=event.getRightClicked();
  if (player.getItemInHand().getType() == Material.BONE && event.getRightClicked() instanceof Wolf) {
    Wolf wolf=(Wolf)target;
    if (!wolf.isTamed() && playerHasTooManyWolves(player)) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.maxWolves+ ""String_Node_Str"");
    }
 else     if (wolf.isTamed() && wolf.getOwner() instanceof Player) {
      Player owner=(Player)wolf.getOwner();
      if (!owner.equals(player)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + owner.getDisplayName());
      }
    }
  }
}"
46883,"protected boolean playerHasTooManyWolves(Player player){
  if (plugin.maxWolves == -1)   return false;
  int numWolves=0;
  for (  Entity entity : player.getWorld().getEntities()) {
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        numWolves++;
      }
    }
  }
  return (numWolves >= plugin.maxWolves);
}","protected boolean playerHasTooManyWolves(Player player){
  if (plugin.maxWolves == -1)   return false;
  int numWolves=0;
  for (  Entity entity : player.getWorld().getEntities()) {
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed() && wolf.getOwner() instanceof Player) {
        Player owner=(Player)wolf.getOwner();
        if (owner.equals(player)) {
          numWolves++;
        }
      }
    }
  }
  return (numWolves >= plugin.maxWolves);
}"
46884,"public static void checkHill(){
  if (drawLeftHill) {
    if (snowing) {
      row5[1]=1;
      row5[2]=1;
      row5[3]=1;
      row5[4]=1;
      row5[5]=1;
      row4[1]=9;
      row4[2]=9;
      row4[3]=9;
      row4[4]=9;
      row4[5]=9;
    }
 else {
      row5[1]=1;
      row5[2]=1;
      row5[3]=1;
      row5[4]=1;
      row5[5]=1;
      row4[1]=7;
      row4[2]=1;
      row4[3]=1;
      row4[4]=1;
      row4[5]=1;
      row3[2]=7;
      row3[3]=1;
      row3[4]=1;
      row3[5]=7;
      row2[3]=7;
      row2[4]=7;
    }
  }
  if (drawRightHill) {
    if (snowing) {
    }
 else {
    }
  }
}","public static void checkHill(){
  if (drawLeftHill) {
    if (snowing) {
      row5[1]=1;
      row5[2]=1;
      row5[3]=1;
      row5[4]=1;
      row5[5]=1;
      row5[1]=1;
      row5[2]=1;
      row5[3]=1;
      row5[4]=1;
      row5[5]=1;
      row4[1]=9;
      row4[2]=1;
      row4[3]=1;
      row4[4]=1;
      row4[5]=1;
      row3[2]=9;
      row3[3]=1;
      row3[4]=1;
      row3[5]=9;
      row2[3]=9;
      row2[4]=9;
    }
 else {
      row5[1]=1;
      row5[2]=1;
      row5[3]=1;
      row5[4]=1;
      row5[5]=1;
      row4[1]=7;
      row4[2]=1;
      row4[3]=1;
      row4[4]=1;
      row4[5]=1;
      row3[2]=7;
      row3[3]=1;
      row3[4]=1;
      row3[5]=7;
      row2[3]=7;
      row2[4]=7;
    }
  }
  if (drawRightHill) {
    if (snowing) {
    }
 else {
    }
  }
}"
46885,"public static void getSeed(){
  wantSeed=Expo.enterBooleanGUI(""String_Node_Str"");
  if (wantSeed) {
    seed=Expo.enterIntGUI(""String_Node_Str"");
    Generate.makeSeeds();
  }
 else {
    terraingen.numClicks=3;
  }
}","public static void getSeed(){
  wantSeed=Expo.enterStringGUI(""String_Node_Str"");
  if (wantSeed.equals(""String_Node_Str"")) {
    seed=Expo.enterIntGUI(""String_Node_Str"");
    Generate.makeSeeds();
  }
 else {
    if (wantSeed.equals(""String_Node_Str"")) {
      seed=Expo.enterIntGUI(""String_Node_Str"");
      Generate.makeSeeds();
    }
    if (wantSeed.equals(""String_Node_Str"")) {
    }
  }
}"
46886,"static Endpoint read(ByteBuffer bytes){
  Endpoint.Builder result=Endpoint.newBuilder();
  while (true) {
    ThriftField thriftField=ThriftField.read(bytes);
    if (thriftField.type == TYPE_STOP)     break;
    if (thriftField.isEqualTo(IPV4)) {
      int ipv4=bytes.getInt();
      result.parseIp(new byte[]{(byte)(ipv4 >> 24 & 0xff),(byte)(ipv4 >> 16 & 0xff),(byte)(ipv4 >> 8 & 0xff),(byte)(ipv4 & 0xff)});
    }
 else     if (thriftField.isEqualTo(PORT)) {
      result.port(bytes.getShort());
    }
 else     if (thriftField.isEqualTo(SERVICE_NAME)) {
      result.serviceName(ThriftCodec.readUtf8(bytes));
    }
 else     if (thriftField.isEqualTo(IPV6)) {
      result.parseIp(ThriftCodec.readByteArray(bytes));
    }
 else {
      skip(bytes,thriftField.type);
    }
  }
  return result.build();
}","static Endpoint read(ByteBuffer bytes){
  Endpoint.Builder result=Endpoint.newBuilder();
  while (true) {
    ThriftField thriftField=ThriftField.read(bytes);
    if (thriftField.type == TYPE_STOP)     break;
    if (thriftField.isEqualTo(IPV4)) {
      int ipv4=bytes.getInt();
      if (ipv4 != 0) {
        result.parseIp(new byte[]{(byte)(ipv4 >> 24 & 0xff),(byte)(ipv4 >> 16 & 0xff),(byte)(ipv4 >> 8 & 0xff),(byte)(ipv4 & 0xff)});
      }
    }
 else     if (thriftField.isEqualTo(PORT)) {
      result.port(bytes.getShort());
    }
 else     if (thriftField.isEqualTo(SERVICE_NAME)) {
      result.serviceName(ThriftCodec.readUtf8(bytes));
    }
 else     if (thriftField.isEqualTo(IPV6)) {
      result.parseIp(ThriftCodec.readByteArray(bytes));
    }
 else {
      skip(bytes,thriftField.type);
    }
  }
  return result.build();
}"
46887,"static Endpoint read(ByteBuffer bytes){
  Endpoint.Builder result=Endpoint.newBuilder();
  while (true) {
    ThriftField thriftField=ThriftField.read(bytes);
    if (thriftField.type == TYPE_STOP)     break;
    if (thriftField.isEqualTo(IPV4)) {
      int ipv4=bytes.getInt();
      if (ipv4 != 0) {
        result.parseIp(new byte[]{(byte)(ipv4 >> 24 & 0xff),(byte)(ipv4 >> 16 & 0xff),(byte)(ipv4 >> 8 & 0xff),(byte)(ipv4 & 0xff)});
      }
    }
 else     if (thriftField.isEqualTo(PORT)) {
      result.port(bytes.getShort());
    }
 else     if (thriftField.isEqualTo(SERVICE_NAME)) {
      result.serviceName(ThriftCodec.readUtf8(bytes));
    }
 else     if (thriftField.isEqualTo(IPV6)) {
      result.parseIp(ThriftCodec.readByteArray(bytes));
    }
 else {
      skip(bytes,thriftField.type);
    }
  }
  return result.build();
}","static Endpoint read(ByteBuffer bytes){
  Endpoint.Builder result=Endpoint.newBuilder();
  while (true) {
    ThriftField thriftField=ThriftField.read(bytes);
    if (thriftField.type == TYPE_STOP)     break;
    if (thriftField.isEqualTo(IPV4)) {
      int ipv4=bytes.getInt();
      if (ipv4 != 0) {
        result.parseIp(new byte[]{(byte)(ipv4 >> 24 & 0xff),(byte)(ipv4 >> 16 & 0xff),(byte)(ipv4 >> 8 & 0xff),(byte)(ipv4 & 0xff)});
      }
    }
 else     if (thriftField.isEqualTo(PORT)) {
      result.port(bytes.getShort() & 0xFFFF);
    }
 else     if (thriftField.isEqualTo(SERVICE_NAME)) {
      result.serviceName(ThriftCodec.readUtf8(bytes));
    }
 else     if (thriftField.isEqualTo(IPV6)) {
      result.parseIp(ThriftCodec.readByteArray(bytes));
    }
 else {
      skip(bytes,thriftField.type);
    }
  }
  return result.build();
}"
46888,"/** 
 * @see Span#shared 
 */
public Builder shared(@Nullable Boolean shared){
  if (shared != null)   return shared(shared);
  flags&=~FLAG_SHARED_SET;
  return this;
}","/** 
 * @see Span#shared 
 */
public Builder shared(@Nullable Boolean shared){
  if (shared != null)   return shared((boolean)shared);
  flags&=~FLAG_SHARED_SET;
  return this;
}"
46889,"/** 
 * @see Span#debug 
 */
public Builder debug(@Nullable Boolean debug){
  if (debug != null)   return debug(debug);
  flags&=~FLAG_DEBUG_SET;
  return this;
}","/** 
 * @see Span#debug 
 */
public Builder debug(@Nullable Boolean debug){
  if (debug != null)   return debug((boolean)debug);
  flags&=~FLAG_DEBUG_SET;
  return this;
}"
46890,"void processAnnotations(zipkin.Span source){
  for (int i=0, length=source.annotations.size(); i < length; i++) {
    Annotation a=source.annotations.get(i);
    Span.Builder currentSpan=forEndpoint(source,a.endpoint);
    if (a.value.length() == 2 && a.endpoint != null) {
      if (a.value.equals(Constants.CLIENT_SEND)) {
        currentSpan.kind(Kind.CLIENT);
        cs=a;
      }
 else       if (a.value.equals(Constants.SERVER_RECV)) {
        currentSpan.kind(Kind.SERVER);
        sr=a;
      }
 else       if (a.value.equals(Constants.SERVER_SEND)) {
        currentSpan.kind(Kind.SERVER);
        ss=a;
      }
 else       if (a.value.equals(Constants.CLIENT_RECV)) {
        currentSpan.kind(Kind.CLIENT);
        cr=a;
      }
 else       if (a.value.equals(Constants.MESSAGE_SEND)) {
        currentSpan.kind(Kind.PRODUCER);
        ms=a;
      }
 else       if (a.value.equals(Constants.MESSAGE_RECV)) {
        currentSpan.kind(Kind.CONSUMER);
        mr=a;
      }
 else       if (a.value.equals(Constants.WIRE_SEND)) {
        ws=a;
      }
 else       if (a.value.equals(Constants.WIRE_RECV)) {
        wr=a;
      }
 else {
        currentSpan.addAnnotation(a.timestamp,a.value);
      }
    }
 else {
      currentSpan.addAnnotation(a.timestamp,a.value);
    }
  }
  if (cs != null && sr != null) {
    maybeTimestampDuration(source,cs,cr);
    Span.Builder client=forEndpoint(source,cs.endpoint);
    Span.Builder server;
    if (closeEnough(cs.endpoint,sr.endpoint)) {
      client.kind(Kind.CLIENT);
      server=newSpanBuilder(source,sr.endpoint.toV2()).kind(Kind.SERVER);
    }
 else {
      server=forEndpoint(source,sr.endpoint);
    }
    server.shared(true).timestamp(sr.timestamp);
    if (ss != null)     server.duration(ss.timestamp - sr.timestamp);
    if (cr == null && source.duration == null)     client.duration(null);
  }
 else   if (cs != null && cr != null) {
    maybeTimestampDuration(source,cs,cr);
  }
 else   if (sr != null && ss != null) {
    maybeTimestampDuration(source,sr,ss);
  }
 else {
    for (    Span.Builder next : spans) {
      if (Kind.CLIENT.equals(next.kind())) {
        if (cs != null)         next.timestamp(cs.timestamp);
      }
 else       if (Kind.SERVER.equals(next.kind())) {
        if (sr != null)         next.timestamp(sr.timestamp);
      }
    }
    if (source.timestamp != null) {
      spans.get(0).timestamp(source.timestamp).duration(source.duration);
    }
  }
  if (cs == null && (sr != null && source.timestamp == null)) {
    forEndpoint(source,sr.endpoint).shared(true);
  }
  if (ms != null && mr != null) {
    Span.Builder producer=forEndpoint(source,ms.endpoint);
    Span.Builder consumer;
    if (closeEnough(ms.endpoint,mr.endpoint)) {
      producer.kind(Kind.PRODUCER);
      consumer=newSpanBuilder(source,mr.endpoint.toV2()).kind(Kind.CONSUMER);
    }
 else {
      consumer=forEndpoint(source,mr.endpoint);
    }
    consumer.shared(true);
    if (wr != null) {
      consumer.timestamp(wr.timestamp).duration(mr.timestamp - wr.timestamp);
    }
 else {
      consumer.timestamp(mr.timestamp);
    }
    producer.timestamp(ms.timestamp).duration(ws != null ? ws.timestamp - ms.timestamp : null);
  }
 else   if (ms != null) {
    maybeTimestampDuration(source,ms,ws);
  }
 else   if (mr != null) {
    if (wr != null) {
      maybeTimestampDuration(source,wr,mr);
    }
 else {
      maybeTimestampDuration(source,mr,null);
    }
  }
 else {
    if (ws != null)     forEndpoint(source,ws.endpoint).addAnnotation(ws.timestamp,ws.value);
    if (wr != null)     forEndpoint(source,wr.endpoint).addAnnotation(wr.timestamp,wr.value);
  }
}","void processAnnotations(zipkin.Span source){
  for (int i=0, length=source.annotations.size(); i < length; i++) {
    Annotation a=source.annotations.get(i);
    Span.Builder currentSpan=forEndpoint(source,a.endpoint);
    if (a.value.length() == 2 && a.endpoint != null) {
      if (a.value.equals(Constants.CLIENT_SEND)) {
        currentSpan.kind(Kind.CLIENT);
        cs=a;
      }
 else       if (a.value.equals(Constants.SERVER_RECV)) {
        currentSpan.kind(Kind.SERVER);
        sr=a;
      }
 else       if (a.value.equals(Constants.SERVER_SEND)) {
        currentSpan.kind(Kind.SERVER);
        ss=a;
      }
 else       if (a.value.equals(Constants.CLIENT_RECV)) {
        currentSpan.kind(Kind.CLIENT);
        cr=a;
      }
 else       if (a.value.equals(Constants.MESSAGE_SEND)) {
        currentSpan.kind(Kind.PRODUCER);
        ms=a;
      }
 else       if (a.value.equals(Constants.MESSAGE_RECV)) {
        currentSpan.kind(Kind.CONSUMER);
        mr=a;
      }
 else       if (a.value.equals(Constants.WIRE_SEND)) {
        ws=a;
      }
 else       if (a.value.equals(Constants.WIRE_RECV)) {
        wr=a;
      }
 else {
        currentSpan.addAnnotation(a.timestamp,a.value);
      }
    }
 else {
      currentSpan.addAnnotation(a.timestamp,a.value);
    }
  }
  if (cs != null && sr != null) {
    maybeTimestampDuration(source,cs,cr);
    Span.Builder client=forEndpoint(source,cs.endpoint);
    Span.Builder server;
    if (closeEnough(cs.endpoint,sr.endpoint)) {
      client.kind(Kind.CLIENT);
      server=newSpanBuilder(source,sr.endpoint.toV2()).kind(Kind.SERVER);
    }
 else {
      server=forEndpoint(source,sr.endpoint);
    }
    server.shared(true).timestamp(sr.timestamp);
    if (ss != null)     server.duration(ss.timestamp - sr.timestamp);
    if (cr == null && source.duration == null)     client.duration(null);
  }
 else   if (cs != null && cr != null) {
    maybeTimestampDuration(source,cs,cr);
  }
 else   if (sr != null && ss != null) {
    maybeTimestampDuration(source,sr,ss);
  }
 else {
    for (    Span.Builder next : spans) {
      if (Kind.CLIENT.equals(next.kind())) {
        if (cs != null)         next.timestamp(cs.timestamp);
        if (cr != null)         next.addAnnotation(cr.timestamp,cr.value);
      }
 else       if (Kind.SERVER.equals(next.kind())) {
        if (sr != null)         next.timestamp(sr.timestamp);
        if (ss != null)         next.addAnnotation(ss.timestamp,ss.value);
      }
    }
    if (source.timestamp != null) {
      spans.get(0).timestamp(source.timestamp).duration(source.duration);
    }
  }
  if (cs == null && (sr != null && source.timestamp == null)) {
    forEndpoint(source,sr.endpoint).shared(true);
  }
  if (ms != null && mr != null) {
    Span.Builder producer=forEndpoint(source,ms.endpoint);
    Span.Builder consumer;
    if (closeEnough(ms.endpoint,mr.endpoint)) {
      producer.kind(Kind.PRODUCER);
      consumer=newSpanBuilder(source,mr.endpoint.toV2()).kind(Kind.CONSUMER);
    }
 else {
      consumer=forEndpoint(source,mr.endpoint);
    }
    consumer.shared(true);
    if (wr != null) {
      consumer.timestamp(wr.timestamp).duration(mr.timestamp - wr.timestamp);
    }
 else {
      consumer.timestamp(mr.timestamp);
    }
    producer.timestamp(ms.timestamp).duration(ws != null ? ws.timestamp - ms.timestamp : null);
  }
 else   if (ms != null) {
    maybeTimestampDuration(source,ms,ws);
  }
 else   if (mr != null) {
    if (wr != null) {
      maybeTimestampDuration(source,wr,mr);
    }
 else {
      maybeTimestampDuration(source,mr,null);
    }
  }
 else {
    if (ws != null)     forEndpoint(source,ws.endpoint).addAnnotation(ws.timestamp,ws.value);
    if (wr != null)     forEndpoint(source,wr.endpoint).addAnnotation(wr.timestamp,wr.value);
  }
}"
46891,"void processBinaryAnnotations(zipkin.Span source){
  zipkin.Endpoint ca=null, sa=null, ma=null;
  for (int i=0, length=source.binaryAnnotations.size(); i < length; i++) {
    BinaryAnnotation b=source.binaryAnnotations.get(i);
    if (b.type == BOOL) {
      if (Constants.CLIENT_ADDR.equals(b.key)) {
        ca=b.endpoint;
      }
 else       if (Constants.SERVER_ADDR.equals(b.key)) {
        sa=b.endpoint;
      }
 else       if (Constants.MESSAGE_ADDR.equals(b.key)) {
        ma=b.endpoint;
      }
 else {
        forEndpoint(source,b.endpoint).putTag(b.key,b.value[0] == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
      }
      continue;
    }
    Span.Builder currentSpan=forEndpoint(source,b.endpoint);
switch (b.type) {
case BOOL:
      break;
case STRING:
    if (Constants.LOCAL_COMPONENT.equals(b.key) && b.value.length == 0)     continue;
  currentSpan.putTag(b.key,new String(b.value,Util.UTF_8));
break;
case BYTES:
currentSpan.putTag(b.key,writeBase64Url(b.value));
break;
case I16:
currentSpan.putTag(b.key,Short.toString(ByteBuffer.wrap(b.value).getShort()));
break;
case I32:
currentSpan.putTag(b.key,Integer.toString(ByteBuffer.wrap(b.value).getInt()));
break;
case I64:
currentSpan.putTag(b.key,Long.toString(ByteBuffer.wrap(b.value).getLong()));
break;
case DOUBLE:
double wrapped=Double.longBitsToDouble(ByteBuffer.wrap(b.value).getLong());
currentSpan.putTag(b.key,Double.toString(wrapped));
break;
}
}
if (cs != null && sa != null && !closeEnough(sa,cs.endpoint)) {
forEndpoint(source,cs.endpoint).remoteEndpoint(sa.toV2());
}
if (sr != null && ca != null && !closeEnough(ca,sr.endpoint)) {
forEndpoint(source,sr.endpoint).remoteEndpoint(ca.toV2());
}
if (ms != null && ma != null && !closeEnough(ma,ms.endpoint)) {
forEndpoint(source,ms.endpoint).remoteEndpoint(ma.toV2());
}
if (mr != null && ma != null && !closeEnough(ma,mr.endpoint)) {
forEndpoint(source,mr.endpoint).remoteEndpoint(ma.toV2());
}
if ((cs == null && sr == null) && (ca != null && sa != null)) {
forEndpoint(source,ca).remoteEndpoint(sa.toV2());
}
}","void processBinaryAnnotations(zipkin.Span source){
  zipkin.Endpoint ca=null, sa=null, ma=null;
  for (int i=0, length=source.binaryAnnotations.size(); i < length; i++) {
    BinaryAnnotation b=source.binaryAnnotations.get(i);
    if (b.type == BOOL) {
      if (Constants.CLIENT_ADDR.equals(b.key)) {
        ca=b.endpoint;
      }
 else       if (Constants.SERVER_ADDR.equals(b.key)) {
        sa=b.endpoint;
      }
 else       if (Constants.MESSAGE_ADDR.equals(b.key)) {
        ma=b.endpoint;
      }
 else {
        forEndpoint(source,b.endpoint).putTag(b.key,b.value[0] == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
      }
      continue;
    }
    Span.Builder currentSpan=forEndpoint(source,b.endpoint);
switch (b.type) {
case BOOL:
      break;
case STRING:
    if (Constants.LOCAL_COMPONENT.equals(b.key) && b.value.length == 0)     continue;
  currentSpan.putTag(b.key,new String(b.value,Util.UTF_8));
break;
case BYTES:
currentSpan.putTag(b.key,writeBase64Url(b.value));
break;
case I16:
currentSpan.putTag(b.key,Short.toString(ByteBuffer.wrap(b.value).getShort()));
break;
case I32:
currentSpan.putTag(b.key,Integer.toString(ByteBuffer.wrap(b.value).getInt()));
break;
case I64:
currentSpan.putTag(b.key,Long.toString(ByteBuffer.wrap(b.value).getLong()));
break;
case DOUBLE:
double wrapped=Double.longBitsToDouble(ByteBuffer.wrap(b.value).getLong());
currentSpan.putTag(b.key,Double.toString(wrapped));
break;
}
}
if ((cs == null && sr == null) && (ca != null && sa != null)) {
forEndpoint(source,ca).remoteEndpoint(sa.toV2());
return;
}
if (sa != null) {
if (cs != null && !closeEnough(sa,cs.endpoint)) {
forEndpoint(source,cs.endpoint).remoteEndpoint(sa.toV2());
}
 else if (cr != null && !closeEnough(sa,cr.endpoint)) {
forEndpoint(source,cr.endpoint).remoteEndpoint(sa.toV2());
}
 else if (cs == null && cr == null && sr == null && ss == null) {
forEndpoint(source,null).kind(Kind.CLIENT).remoteEndpoint(sa.toV2());
}
}
if (ca != null) {
if (sr != null && !closeEnough(ca,sr.endpoint)) {
forEndpoint(source,sr.endpoint).remoteEndpoint(ca.toV2());
}
if (ss != null && !closeEnough(ca,ss.endpoint)) {
forEndpoint(source,ss.endpoint).remoteEndpoint(ca.toV2());
}
 else if (cs == null && cr == null && sr == null && ss == null) {
forEndpoint(source,null).kind(Kind.SERVER).remoteEndpoint(ca.toV2());
}
}
if (ma != null) {
if (ms != null && !closeEnough(ma,ms.endpoint)) {
forEndpoint(source,ms.endpoint).remoteEndpoint(ma.toV2());
}
if (mr != null && !closeEnough(ma,mr.endpoint)) {
forEndpoint(source,mr.endpoint).remoteEndpoint(ma.toV2());
}
}
}"
46892,"@Override public int sizeInBytes(Span value){
  Parsed parsed=parse(value);
  Integer endpointSize;
  if (value.localEndpoint() != null) {
    endpointSize=V2SpanWriter.endpointSizeInBytes(value.localEndpoint());
    if (value.localServiceName() == null) {
      endpointSize+=17;
    }
  }
 else {
    endpointSize=null;
  }
  int sizeInBytes=13;
  sizeInBytes+=value.traceId().length();
  if (value.parentId() != null) {
    sizeInBytes+=30;
  }
  sizeInBytes+=24;
  sizeInBytes+=10;
  if (value.name() != null) {
    sizeInBytes+=jsonEscapedSizeInBytes(value.name());
  }
  if (Boolean.TRUE.equals(value.shared()) && ""String_Node_Str"".equals(parsed.begin)) {
  }
 else {
    if (value.timestamp() != null) {
      sizeInBytes+=13;
      sizeInBytes+=asciiSizeInBytes(value.timestamp());
    }
    if (value.duration() != null) {
      sizeInBytes+=12;
      sizeInBytes+=asciiSizeInBytes(value.duration());
    }
  }
  int annotationCount=value.annotations().size();
  if (parsed.startTs != null && parsed.begin != null) {
    annotationCount++;
    sizeInBytes+=coreAnnotationSizeInBytes(parsed.startTs,endpointSize);
  }
  if (parsed.endTs != null && parsed.end != null) {
    annotationCount++;
    sizeInBytes+=coreAnnotationSizeInBytes(parsed.endTs,endpointSize);
  }
  if (annotationCount > 0) {
    sizeInBytes+=17;
    if (annotationCount > 1)     sizeInBytes+=annotationCount - 1;
    for (int i=0, length=value.annotations().size(); i < length; i++) {
      sizeInBytes+=V2SpanWriter.annotationSizeInBytes(value.annotations().get(i),endpointSize);
    }
  }
  int binaryAnnotationCount=value.tags().size();
  if (parsed.remoteEndpointType != null && value.remoteEndpoint() != null) {
    binaryAnnotationCount++;
    sizeInBytes+=37;
    sizeInBytes+=V2SpanWriter.endpointSizeInBytes(value.remoteEndpoint());
    if (value.localServiceName() == null) {
      sizeInBytes+=17;
    }
  }
  if (binaryAnnotationCount > 0) {
    sizeInBytes+=23;
    if (binaryAnnotationCount > 1) {
      sizeInBytes+=binaryAnnotationCount - 1;
    }
    for (    Map.Entry<String,String> tag : value.tags().entrySet()) {
      sizeInBytes+=binaryAnnotationSizeInBytes(tag.getKey(),tag.getValue(),endpointSize);
    }
  }
  if (Boolean.TRUE.equals(value.debug())) {
    sizeInBytes+=13;
  }
  return ++sizeInBytes;
}","@Override public int sizeInBytes(Span value){
  Parsed parsed=parse(value);
  Integer endpointSize;
  if (value.localEndpoint() != null) {
    endpointSize=V2SpanWriter.endpointSizeInBytes(value.localEndpoint());
    if (value.localServiceName() == null) {
      endpointSize+=17;
    }
  }
 else {
    endpointSize=null;
  }
  int sizeInBytes=13;
  sizeInBytes+=value.traceId().length();
  if (value.parentId() != null) {
    sizeInBytes+=30;
  }
  sizeInBytes+=24;
  sizeInBytes+=10;
  if (value.name() != null) {
    sizeInBytes+=jsonEscapedSizeInBytes(value.name());
  }
  if (Boolean.TRUE.equals(value.shared()) && ""String_Node_Str"".equals(parsed.begin)) {
  }
 else {
    if (value.timestamp() != null) {
      sizeInBytes+=13;
      sizeInBytes+=asciiSizeInBytes(value.timestamp());
    }
    if (value.duration() != null) {
      sizeInBytes+=12;
      sizeInBytes+=asciiSizeInBytes(value.duration());
    }
  }
  int annotationCount=value.annotations().size();
  if (parsed.startTs != null && parsed.begin != null) {
    annotationCount++;
    sizeInBytes+=coreAnnotationSizeInBytes(parsed.startTs,endpointSize);
  }
  if (parsed.endTs != null && parsed.end != null) {
    annotationCount++;
    sizeInBytes+=coreAnnotationSizeInBytes(parsed.endTs,endpointSize);
  }
  if (annotationCount > 0) {
    sizeInBytes+=17;
    if (annotationCount > 1)     sizeInBytes+=annotationCount - 1;
    for (int i=0, length=value.annotations().size(); i < length; i++) {
      sizeInBytes+=V2SpanWriter.annotationSizeInBytes(value.annotations().get(i),endpointSize);
    }
  }
  int binaryAnnotationCount=value.tags().size();
  if (parsed.remoteEndpointType != null && value.remoteEndpoint() != null) {
    binaryAnnotationCount++;
    sizeInBytes+=37;
    sizeInBytes+=V2SpanWriter.endpointSizeInBytes(value.remoteEndpoint());
    if (value.remoteServiceName() == null) {
      sizeInBytes+=17;
    }
  }
  if (binaryAnnotationCount > 0) {
    sizeInBytes+=23;
    if (binaryAnnotationCount > 1) {
      sizeInBytes+=binaryAnnotationCount - 1;
    }
    for (    Map.Entry<String,String> tag : value.tags().entrySet()) {
      sizeInBytes+=binaryAnnotationSizeInBytes(tag.getKey(),tag.getValue(),endpointSize);
    }
  }
  if (Boolean.TRUE.equals(value.debug())) {
    sizeInBytes+=13;
  }
  return ++sizeInBytes;
}"
46893,"@Override public void write(Span value,Buffer b){
  Parsed parsed=parse(value);
  byte[] endpointBytes=legacyEndpointBytes(value.localEndpoint());
  b.writeAscii(""String_Node_Str"").writeAscii(value.traceId()).writeByte('""');
  if (value.parentId() != null) {
    b.writeAscii(""String_Node_Str"").writeAscii(value.parentId()).writeByte('""');
  }
  b.writeAscii(""String_Node_Str"").writeAscii(value.id()).writeByte('""');
  b.writeAscii(""String_Node_Str"");
  if (value.name() != null)   b.writeUtf8(jsonEscape(value.name()));
  b.writeByte('""');
  if (Boolean.TRUE.equals(value.shared()) && ""String_Node_Str"".equals(parsed.begin)) {
  }
 else {
    if (value.timestamp() != null) {
      b.writeAscii(""String_Node_Str"").writeAscii(value.timestamp());
    }
    if (value.duration() != null) {
      b.writeAscii(""String_Node_Str"").writeAscii(value.duration());
    }
  }
  int annotationCount=value.annotations().size();
  boolean beginAnnotation=parsed.startTs != null && parsed.begin != null;
  boolean endAnnotation=parsed.endTs != null && parsed.end != null;
  if (annotationCount > 0) {
    int length=value.annotations().size();
    b.writeAscii(""String_Node_Str"");
    if (beginAnnotation) {
      V2SpanWriter.writeAnnotation(Annotation.create(parsed.startTs,parsed.begin),endpointBytes,b);
      if (length > 0)       b.writeByte(',');
    }
    for (int i=0; i < length; ) {
      V2SpanWriter.writeAnnotation(value.annotations().get(i++),endpointBytes,b);
      if (i < length)       b.writeByte(',');
    }
    if (endAnnotation) {
      if (length > 0)       b.writeByte(',');
      V2SpanWriter.writeAnnotation(Annotation.create(parsed.endTs,parsed.end),endpointBytes,b);
    }
    b.writeByte(']');
  }
  int binaryAnnotationCount=value.tags().size();
  boolean hasRemoteEndpoint=parsed.remoteEndpointType != null && value.remoteEndpoint() != null;
  if (hasRemoteEndpoint)   binaryAnnotationCount++;
  if (binaryAnnotationCount > 0) {
    b.writeAscii(""String_Node_Str"");
    Iterator<Map.Entry<String,String>> i=value.tags().entrySet().iterator();
    while (i.hasNext()) {
      Map.Entry<String,String> entry=i.next();
      writeBinaryAnnotation(entry.getKey(),entry.getValue(),endpointBytes,b);
      if (i.hasNext())       b.writeByte(',');
    }
    if (hasRemoteEndpoint) {
      if (!value.tags().isEmpty())       b.writeByte(',');
      b.writeAscii(""String_Node_Str"").writeAscii(parsed.remoteEndpointType);
      b.writeAscii(""String_Node_Str"");
      b.write(legacyEndpointBytes(value.remoteEndpoint()));
      b.writeByte('}');
    }
    b.writeByte(']');
  }
  if (Boolean.TRUE.equals(value.debug())) {
    b.writeAscii(""String_Node_Str"");
  }
  b.writeByte('}');
}","@Override public void write(Span value,Buffer b){
  Parsed parsed=parse(value);
  byte[] endpointBytes=legacyEndpointBytes(value.localEndpoint());
  b.writeAscii(""String_Node_Str"").writeAscii(value.traceId()).writeByte('""');
  if (value.parentId() != null) {
    b.writeAscii(""String_Node_Str"").writeAscii(value.parentId()).writeByte('""');
  }
  b.writeAscii(""String_Node_Str"").writeAscii(value.id()).writeByte('""');
  b.writeAscii(""String_Node_Str"");
  if (value.name() != null)   b.writeUtf8(jsonEscape(value.name()));
  b.writeByte('""');
  if (Boolean.TRUE.equals(value.shared()) && ""String_Node_Str"".equals(parsed.begin)) {
  }
 else {
    if (value.timestamp() != null) {
      b.writeAscii(""String_Node_Str"").writeAscii(value.timestamp());
    }
    if (value.duration() != null) {
      b.writeAscii(""String_Node_Str"").writeAscii(value.duration());
    }
  }
  int annotationCount=value.annotations().size();
  boolean beginAnnotation=parsed.startTs != null && parsed.begin != null;
  boolean endAnnotation=parsed.endTs != null && parsed.end != null;
  if (annotationCount > 0 || beginAnnotation || endAnnotation) {
    int length=value.annotations().size();
    b.writeAscii(""String_Node_Str"");
    if (beginAnnotation) {
      V2SpanWriter.writeAnnotation(Annotation.create(parsed.startTs,parsed.begin),endpointBytes,b);
      if (length > 0)       b.writeByte(',');
    }
    for (int i=0; i < length; ) {
      V2SpanWriter.writeAnnotation(value.annotations().get(i++),endpointBytes,b);
      if (i < length)       b.writeByte(',');
    }
    if (endAnnotation) {
      b.writeByte(',');
      V2SpanWriter.writeAnnotation(Annotation.create(parsed.endTs,parsed.end),endpointBytes,b);
    }
    b.writeByte(']');
  }
  int binaryAnnotationCount=value.tags().size();
  boolean hasRemoteEndpoint=parsed.remoteEndpointType != null && value.remoteEndpoint() != null;
  if (hasRemoteEndpoint)   binaryAnnotationCount++;
  if (binaryAnnotationCount > 0) {
    b.writeAscii(""String_Node_Str"");
    Iterator<Map.Entry<String,String>> i=value.tags().entrySet().iterator();
    while (i.hasNext()) {
      Map.Entry<String,String> entry=i.next();
      writeBinaryAnnotation(entry.getKey(),entry.getValue(),endpointBytes,b);
      if (i.hasNext())       b.writeByte(',');
    }
    if (hasRemoteEndpoint) {
      if (!value.tags().isEmpty())       b.writeByte(',');
      b.writeAscii(""String_Node_Str"").writeAscii(parsed.remoteEndpointType);
      b.writeAscii(""String_Node_Str"");
      b.write(legacyEndpointBytes(value.remoteEndpoint()));
      b.writeByte('}');
    }
    b.writeByte(']');
  }
  if (Boolean.TRUE.equals(value.debug())) {
    b.writeAscii(""String_Node_Str"");
  }
  b.writeByte('}');
}"
46894,"@Test public void spanRoundTrip_shared() throws IOException {
  span=span.toBuilder().shared(true).build();
  assertThat(SpanBytesDecoder.JSON_V2.decodeOne(SpanBytesEncoder.JSON_V2.encode(span))).isEqualTo(span);
}","@Test public void spanRoundTrip_shared() throws IOException {
  span=span.toBuilder().kind(Span.Kind.SERVER).shared(true).build();
  assertThat(SpanBytesDecoder.JSON_V2.decodeOne(SpanBytesEncoder.JSON_V2.encode(span))).isEqualTo(span);
}"
46895,"/** 
 * This isn't a test of what we ""should"" accept as a span, rather that characters that trip-up json don't fail in codec.
 */
@Test public void specialCharsInJson() throws IOException {
  Span worstSpanInTheWorld=Span.newBuilder().traceId(""String_Node_Str"").id(""String_Node_Str"").name(new String(new char[]{'""','\\','\t','\b','\n','\r','\f'})).addAnnotation(1L,""String_Node_Str"").putTag(""String_Node_Str"",""String_Node_Str"").build();
  assertThat(SpanBytesDecoder.JSON_V2.decodeOne(SpanBytesEncoder.JSON_V2.encode(worstSpanInTheWorld))).isEqualTo(worstSpanInTheWorld);
}","/** 
 * This isn't a test of what we ""should"" accept as a span, rather that characters that trip-up json don't fail in codec.
 */
@Test public void specialCharsInJson() throws IOException {
  assertThat(SpanBytesDecoder.JSON_V2.decodeOne(SpanBytesEncoder.JSON_V2.encode(worstSpanInTheWorld))).isEqualTo(worstSpanInTheWorld);
}"
46896,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ResponseEntity<List<String>> getSpanNames(@RequestParam(value=""String_Node_Str"",required=true) String serviceName) throws IOException {
  return maybeCacheNames(storage.v2SpanStore().getSpanNames(serviceName).execute());
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ResponseEntity<List<String>> getSpanNames(@RequestParam(value=""String_Node_Str"",required=true) String serviceName) throws IOException {
  if (storage == null)   throw new Version2StorageNotConfigured();
  return maybeCacheNames(storage.v2SpanStore().getSpanNames(serviceName).execute());
}"
46897,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=APPLICATION_JSON_VALUE) public byte[] getDependencies(@RequestParam(value=""String_Node_Str"",required=true) long endTs,@Nullable @RequestParam(value=""String_Node_Str"",required=false) Long lookback) throws IOException {
  Call<List<DependencyLink>> call=storage.v2SpanStore().getDependencies(endTs,lookback != null ? lookback : defaultLookback);
  return Codec.JSON.writeDependencyLinks(call.execute());
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=APPLICATION_JSON_VALUE) public byte[] getDependencies(@RequestParam(value=""String_Node_Str"",required=true) long endTs,@Nullable @RequestParam(value=""String_Node_Str"",required=false) Long lookback) throws IOException {
  if (storage == null)   throw new Version2StorageNotConfigured();
  Call<List<DependencyLink>> call=storage.v2SpanStore().getDependencies(endTs,lookback != null ? lookback : defaultLookback);
  return Codec.JSON.writeDependencyLinks(call.execute());
}"
46898,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ResponseEntity<List<String>> getServiceNames() throws IOException {
  List<String> serviceNames=storage.v2SpanStore().getServiceNames().execute();
  serviceCount=serviceNames.size();
  return maybeCacheNames(serviceNames);
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ResponseEntity<List<String>> getServiceNames() throws IOException {
  if (storage == null)   throw new Version2StorageNotConfigured();
  List<String> serviceNames=storage.v2SpanStore().getServiceNames().execute();
  serviceCount=serviceNames.size();
  return maybeCacheNames(serviceNames);
}"
46899,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=APPLICATION_JSON_VALUE) public String getTraces(@Nullable @RequestParam(value=""String_Node_Str"",required=false) String serviceName,@Nullable @RequestParam(value=""String_Node_Str"",required=false) String spanName,@Nullable @RequestParam(value=""String_Node_Str"",required=false) String annotationQuery,@Nullable @RequestParam(value=""String_Node_Str"",required=false) Long minDuration,@Nullable @RequestParam(value=""String_Node_Str"",required=false) Long maxDuration,@Nullable @RequestParam(value=""String_Node_Str"",required=false) Long endTs,@Nullable @RequestParam(value=""String_Node_Str"",required=false) Long lookback,@RequestParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") int limit) throws IOException {
  QueryRequest queryRequest=QueryRequest.newBuilder().serviceName(serviceName).spanName(spanName).parseAnnotationQuery(annotationQuery).minDuration(minDuration).maxDuration(maxDuration).endTs(endTs != null ? endTs : System.currentTimeMillis()).lookback(lookback != null ? lookback : defaultLookback).limit(limit).build();
  List<List<Span>> traces=storage.v2SpanStore().getTraces(queryRequest).execute();
  Buffer buffer=new Buffer();
  buffer.writeByte('[');
  for (int i=0, iLength=traces.size(); i < iLength; ) {
    buffer.writeByte('[');
    List<Span> trace=traces.get(i);
    for (int j=0, jLength=trace.size(); j < jLength; j++) {
      buffer.write(Encoder.JSON.encode(trace.get(j)));
      if (++j < jLength)       buffer.writeByte(',');
    }
    buffer.writeByte(']');
    if (++i < iLength)     buffer.writeByte(',');
  }
  buffer.writeByte(']');
  return buffer.readUtf8();
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=APPLICATION_JSON_VALUE) public String getTraces(@Nullable @RequestParam(value=""String_Node_Str"",required=false) String serviceName,@Nullable @RequestParam(value=""String_Node_Str"",required=false) String spanName,@Nullable @RequestParam(value=""String_Node_Str"",required=false) String annotationQuery,@Nullable @RequestParam(value=""String_Node_Str"",required=false) Long minDuration,@Nullable @RequestParam(value=""String_Node_Str"",required=false) Long maxDuration,@Nullable @RequestParam(value=""String_Node_Str"",required=false) Long endTs,@Nullable @RequestParam(value=""String_Node_Str"",required=false) Long lookback,@RequestParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") int limit) throws IOException {
  if (storage == null)   throw new Version2StorageNotConfigured();
  QueryRequest queryRequest=QueryRequest.newBuilder().serviceName(serviceName).spanName(spanName).parseAnnotationQuery(annotationQuery).minDuration(minDuration).maxDuration(maxDuration).endTs(endTs != null ? endTs : System.currentTimeMillis()).lookback(lookback != null ? lookback : defaultLookback).limit(limit).build();
  List<List<Span>> traces=storage.v2SpanStore().getTraces(queryRequest).execute();
  Buffer buffer=new Buffer();
  buffer.writeByte('[');
  for (int i=0, iLength=traces.size(); i < iLength; ) {
    buffer.writeByte('[');
    List<Span> trace=traces.get(i);
    for (int j=0, jLength=trace.size(); j < jLength; ) {
      buffer.write(Encoder.JSON.encode(trace.get(j)));
      if (++j < jLength)       buffer.writeByte(',');
    }
    buffer.writeByte(']');
    if (++i < iLength)     buffer.writeByte(',');
  }
  buffer.writeByte(']');
  return buffer.readUtf8();
}"
46900,"@Autowired ZipkinQueryApiV2(V2StorageComponent storage){
  this.storage=storage;
}","ZipkinQueryApiV2(StorageComponent storage,@Value(""String_Node_Str"") String storageType,@Value(""String_Node_Str"") long defaultLookback,@Value(""String_Node_Str"") int namesMaxAge){
  if (storage instanceof V2StorageComponent) {
    this.storage=(V2StorageComponent)storage;
  }
 else {
    this.storage=null;
  }
  this.storageType=storageType;
  this.defaultLookback=defaultLookback;
  this.namesMaxAge=namesMaxAge;
}"
46901,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=APPLICATION_JSON_VALUE) public String getTrace(@PathVariable String traceIdHex,WebRequest request) throws IOException {
  long traceIdHigh=traceIdHex.length() == 32 ? lowerHexToUnsignedLong(traceIdHex,0) : 0L;
  long traceIdLow=lowerHexToUnsignedLong(traceIdHex);
  List<Span> trace=storage.v2SpanStore().getTrace(traceIdHigh,traceIdLow).execute();
  if (trace.isEmpty()) {
    throw new TraceNotFoundException(traceIdHex,traceIdHigh,traceIdLow);
  }
  Buffer buffer=new Buffer();
  buffer.writeByte('[');
  for (int i=0, length=trace.size(); i < length; ) {
    buffer.write(Encoder.JSON.encode(trace.get(i)));
    if (++i < length)     buffer.writeByte(',');
  }
  buffer.writeByte(']');
  return buffer.readUtf8();
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=APPLICATION_JSON_VALUE) public String getTrace(@PathVariable String traceIdHex,WebRequest request) throws IOException {
  if (storage == null)   throw new Version2StorageNotConfigured();
  long traceIdHigh=traceIdHex.length() == 32 ? lowerHexToUnsignedLong(traceIdHex,0) : 0L;
  long traceIdLow=lowerHexToUnsignedLong(traceIdHex);
  List<Span> trace=storage.v2SpanStore().getTrace(traceIdHigh,traceIdLow).execute();
  if (trace.isEmpty()) {
    throw new TraceNotFoundException(traceIdHex,traceIdHigh,traceIdLow);
  }
  Buffer buffer=new Buffer();
  buffer.writeByte('[');
  for (int i=0, length=trace.size(); i < length; ) {
    buffer.write(Encoder.JSON.encode(trace.get(i)));
    if (++i < length)     buffer.writeByte(',');
  }
  buffer.writeByte(']');
  return buffer.readUtf8();
}"
46902,"@Test public void queryRelatedEndpoints404() throws Exception {
  MockMvc mockMvc=MockMvcBuilders.webAppContextSetup(this.context).build();
  mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isNotFound());
  mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isNotFound());
  mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk());
}","@Test public void queryRelatedEndpoints404() throws Exception {
  MockMvc mockMvc=MockMvcBuilders.webAppContextSetup(this.context).build();
  mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isNotFound());
  mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isNotFound());
  mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isNotFound());
  mockMvc.perform(get(""String_Node_Str"")).andExpect(status().isOk());
}"
46903,"@Test(expected=NoSuchBeanDefinitionException.class) public void disabledQueryBean() throws Exception {
  context.getBean(ZipkinQueryApiV1.class);
}","@Test(expected=NoSuchBeanDefinitionException.class) public void disabledQueryBean() throws Exception {
  context.getBean(ZipkinQueryApiV1.class);
  context.getBean(ZipkinQueryApiV2.class);
}"
46904,"public Builder clear(){
  traceId=null;
  traceIdHigh=null;
  name=null;
  id=null;
  parentId=null;
  timestamp=null;
  if (annotations != null)   annotations.clear();
  if (binaryAnnotations != null)   binaryAnnotations.clear();
  debug=null;
  isClientSpan=false;
  return this;
}","public Builder clear(){
  traceId=null;
  traceIdHigh=null;
  name=null;
  id=null;
  parentId=null;
  timestamp=null;
  duration=null;
  if (annotations != null)   annotations.clear();
  if (binaryAnnotations != null)   binaryAnnotations.clear();
  debug=null;
  isClientSpan=false;
  return this;
}"
46905,"public void addNode(Long parentId,long id,@Nullable V value){
  Node<V> node=new Node<V>().value(value);
  if (parentId == null) {
    if (rootNode == null) {
      rootNode=node;
    }
 else {
      idToNode.put(id,node);
      idToParent.put(id,null);
    }
  }
 else {
    idToNode.put(id,node);
    idToParent.put(id,parentId);
  }
}","public void addNode(@Nullable Long parentId,long id,V value){
  Node<V> node=new Node<V>().value(value);
  if (parentId == null && rootNode == null) {
    rootNode=node;
  }
 else {
    idToNode.put(id,node);
    idToParent.put(id,parentId);
  }
}"
46906,"/** 
 * Builds a tree from calls to   {@link #addNode}, or returns an empty tree. 
 */
public Node<V> build(){
  for (  Map.Entry<Long,Long> entry : idToParent.entrySet()) {
    Node<V> node=idToNode.get(entry.getKey());
    Node<V> parent=idToNode.get(entry.getValue());
    if (parent == null) {
      if (rootNode == null) {
        rootNode=new Node<>();
        rootNode.missingRootDummyNode=true;
      }
      rootNode.addChild(node);
    }
 else {
      parent.addChild(node);
    }
  }
  return rootNode != null ? rootNode : new Node<>();
}","/** 
 * Builds a tree from calls to   {@link #addNode}, or returns an empty tree. 
 */
public Node<V> build(){
  for (  Map.Entry<Long,Long> entry : idToParent.entrySet()) {
    Node<V> node=idToNode.get(entry.getKey());
    Node<V> parent=idToNode.get(entry.getValue());
    if (parent == null || node == parent) {
      if (rootNode == null) {
        rootNode=new Node<>();
        rootNode.missingRootDummyNode=true;
      }
      rootNode.addChild(node);
    }
 else {
      parent.addChild(node);
    }
  }
  return rootNode != null ? rootNode : new Node<>();
}"
46907,"public Node<V> value(V newValue){
  this.value=newValue;
  return this;
}","public Node<V> value(V newValue){
  this.value=checkNotNull(newValue,""String_Node_Str"");
  return this;
}"
46908,"public Node<V> addChild(Node<V> child){
  child.parent=this;
  if (children.equals(Collections.emptyList()))   children=new LinkedList<>();
  children.add(child);
  return this;
}","public Node<V> addChild(Node<V> child){
  checkArgument(child != this,""String_Node_Str"",this);
  child.parent=this;
  if (children.equals(Collections.emptyList()))   children=new LinkedList<>();
  children.add(child);
  return this;
}"
46909,"public static void main(String[] args) throws RunnerException {
  if (!new String(prefix_byteArray(""String_Node_Str"".getBytes())).equals(""String_Node_Str"" + Long.toString(TIMESTAMP_MILLIS) + ""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!new String(prefix_channelBuffer(""String_Node_Str"".getBytes()).toByteBuffer().array()).equals(""String_Node_Str"" + Long.toString(TIMESTAMP_MILLIS) + ""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Options opt=new OptionsBuilder().include(""String_Node_Str"" + ElasticsearchBenchmarks.class.getSimpleName() + ""String_Node_Str"").build();
  new Runner(opt).run();
}","public static void main(String[] args) throws RunnerException {
  if (!new String(prefix_byteArray(""String_Node_Str"".getBytes(UTF_8)),UTF_8).equals(""String_Node_Str"" + Long.toString(TIMESTAMP_MILLIS) + ""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!new String(prefix_channelBuffer(""String_Node_Str"".getBytes(UTF_8)).toByteBuffer().array(),UTF_8).equals(""String_Node_Str"" + Long.toString(TIMESTAMP_MILLIS) + ""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Options opt=new OptionsBuilder().include(""String_Node_Str"" + ElasticsearchBenchmarks.class.getSimpleName() + ""String_Node_Str"").build();
  new Runner(opt).run();
}"
46910,"@Override public ListenableFuture<List<Span>> findSpans(String[] indices,QueryBuilder query){
  if (indices.length > MAX_INDICES) {
    query=QueryBuilders.indicesQuery(query,indices).noMatchQuery(""String_Node_Str"");
    indices=allIndices;
  }
  return transform(toGuava(lenientSearch(new SearchSourceBuilder().query(query).size(InternalElasticsearchClient.MAX_RAW_SPANS).toString()).addIndex(Arrays.asList(indices)).addType(SPAN).build()),new Function<SearchResult,List<Span>>(){
    @Override public List<Span> apply(    SearchResult input){
      if (input.getTotal() == 0)       return null;
      ImmutableList.Builder<Span> builder=ImmutableList.builder();
      for (      SearchResult.Hit<Span,?> hit : input.getHits(Span.class)) {
        builder.add(hit.source);
      }
      return builder.build();
    }
  }
);
}","@Override public ListenableFuture<List<Span>> findSpans(String[] indices,QueryBuilder query){
  if (indices.length > MAX_INDICES) {
    query=QueryBuilders.indicesQuery(query,indices).noMatchQuery(""String_Node_Str"");
    indices=allIndices;
  }
  return transform(toGuava(lenientSearch(new SearchSourceBuilder().query(query).size(InternalElasticsearchClient.MAX_RAW_SPANS).toString()).addIndex(Arrays.asList(indices)).addType(SPAN).build()),new Function<SearchResult,List<Span>>(){
    @Override public List<Span> apply(    SearchResult input){
      if (input.getTotal() == null || input.getTotal() == 0)       return null;
      ImmutableList.Builder<Span> builder=ImmutableList.builder();
      for (      SearchResult.Hit<Span,?> hit : input.getHits(Span.class)) {
        builder.add(hit.source);
      }
      return builder.build();
    }
  }
);
}"
46911,"@Override public String apply(TermsAggregation.Entry input){
  return input.getKey();
}","@Override public ListenableFuture apply(Object input){
  return toGuava(new Flush.Builder().addIndex(indices).build());
}"
46912,"@Override public ListenableFuture<Collection<DependencyLink>> findDependencies(String[] indices){
  QueryBuilder query=QueryBuilders.matchAllQuery();
  if (indices.length > MAX_INDICES) {
    query=QueryBuilders.indicesQuery(query,indices).noMatchQuery(""String_Node_Str"");
    indices=allIndices;
  }
  Search.Builder search=lenientSearch(new SearchSourceBuilder().query(query).toString()).addIndex(Arrays.asList(indices)).addType(DEPENDENCY_LINK);
  return transform(toGuava(search.build()),new Function<SearchResult,Collection<DependencyLink>>(){
    @Override public Collection<DependencyLink> apply(    SearchResult input){
      ImmutableList.Builder<DependencyLink> builder=ImmutableList.builder();
      for (      SearchResult.Hit<DependencyLink,?> hit : input.getHits(DependencyLink.class)) {
        builder.add(hit.source);
      }
      return builder.build();
    }
  }
);
}","@Override public ListenableFuture<List<DependencyLink>> findDependencies(String[] indices){
  QueryBuilder query=QueryBuilders.matchAllQuery();
  if (indices.length > MAX_INDICES) {
    query=QueryBuilders.indicesQuery(query,indices).noMatchQuery(""String_Node_Str"");
    indices=allIndices;
  }
  Search.Builder search=lenientSearch(new SearchSourceBuilder().query(query).toString()).addIndex(Arrays.asList(indices)).addType(DEPENDENCY_LINK);
  return transform(toGuava(search.build()),new Function<SearchResult,List<DependencyLink>>(){
    @Override public List<DependencyLink> apply(    SearchResult input){
      ImmutableList.Builder<DependencyLink> builder=ImmutableList.builder();
      for (      SearchResult.Hit<DependencyLink,?> hit : input.getHits(DependencyLink.class)) {
        builder.add(hit.source);
      }
      return builder.build();
    }
  }
);
}"
46913,"IndexNameFormatter(String index){
  this.index=index;
  this.dateFormat=new SimpleDateFormat(DAILY_INDEX_FORMAT);
}","IndexNameFormatter(String index){
  this.index=index;
  this.dateFormat=new ThreadLocal<SimpleDateFormat>(){
    @Override protected SimpleDateFormat initialValue(){
      return new SimpleDateFormat(DAILY_INDEX_FORMAT);
    }
  }
;
}"
46914,"String indexNameForTimestamp(long timestampMillis){
  return index + ""String_Node_Str"" + dateFormat.format(new Date(timestampMillis));
}","String indexNameForTimestamp(long timestampMillis){
  return index + ""String_Node_Str"" + dateFormat.get().format(new Date(timestampMillis));
}"
46915,"static byte[] gunzip(byte[] input) throws IOException {
  Inflater inflater=new Inflater();
  inflater.setInput(input);
  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream(input.length)){
    while (!inflater.finished()) {
      int count=inflater.inflate(GZIP_BUFFER.get());
      outputStream.write(GZIP_BUFFER.get(),0,count);
    }
    return outputStream.toByteArray();
  }
 catch (  DataFormatException e) {
    throw new IOException(e.getMessage(),e);
  }
}","static byte[] gunzip(byte[] input) throws IOException {
  GZIPInputStream in=new GZIPInputStream(new ByteArrayInputStream(input));
  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream(input.length)){
    byte[] buf=GZIP_BUFFER.get();
    int len;
    while ((len=in.read(buf)) > 0) {
      outputStream.write(buf,0,len);
    }
    return outputStream.toByteArray();
  }
 }"
46916,"DeferredResult<ResponseEntity<?>> validateAndStoreSpans(String encoding,Codec codec,byte[] body){
  DeferredResult<ResponseEntity<?>> result=new DeferredResult<>();
  metrics.incrementMessages();
  if (encoding != null && encoding.contains(""String_Node_Str"")) {
    try {
      body=gunzip(body);
    }
 catch (    IOException e) {
      metrics.incrementMessagesDropped();
      result.setResult(ResponseEntity.badRequest().body(""String_Node_Str""));
      return result;
    }
  }
  collector.acceptSpans(body,codec,new Callback<Void>(){
    @Override public void onSuccess(    @Nullable Void value){
      result.setResult(SUCCESS);
    }
    @Override public void onError(    Throwable t){
      String message=t.getMessage();
      result.setErrorResult(message.startsWith(""String_Node_Str"") ? ResponseEntity.status(500).body(message + ""String_Node_Str"") : ResponseEntity.status(400).body(message + ""String_Node_Str""));
    }
  }
);
  return result;
}","DeferredResult<ResponseEntity<?>> validateAndStoreSpans(String encoding,Codec codec,byte[] body){
  DeferredResult<ResponseEntity<?>> result=new DeferredResult<>();
  metrics.incrementMessages();
  if (encoding != null && encoding.contains(""String_Node_Str"")) {
    try {
      body=gunzip(body);
    }
 catch (    IOException e) {
      metrics.incrementMessagesDropped();
      result.setResult(ResponseEntity.badRequest().body(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""));
      return result;
    }
  }
  collector.acceptSpans(body,codec,new Callback<Void>(){
    @Override public void onSuccess(    @Nullable Void value){
      result.setResult(SUCCESS);
    }
    @Override public void onError(    Throwable t){
      String message=t.getMessage();
      result.setErrorResult(message.startsWith(""String_Node_Str"") ? ResponseEntity.status(500).body(message + ""String_Node_Str"") : ResponseEntity.status(400).body(message + ""String_Node_Str""));
    }
  }
);
  return result;
}"
46917,"QueryRequest(String serviceName,String spanName,List<String> annotations,Map<String,String> binaryAnnotations,Long minDuration,Long maxDuration,long endTs,long lookback,int limit){
  checkArgument(serviceName == null || !serviceName.isEmpty(),""String_Node_Str"");
  checkArgument(spanName == null || !spanName.isEmpty(),""String_Node_Str"");
  checkArgument(endTs > 0,""String_Node_Str"",endTs);
  checkArgument(limit > 0,""String_Node_Str"",limit);
  this.serviceName=serviceName != null ? serviceName.toLowerCase() : null;
  this.spanName=spanName != null ? spanName.toLowerCase() : null;
  this.annotations=annotations;
  for (  String annotation : annotations) {
    checkArgument(!annotation.isEmpty(),""String_Node_Str"");
  }
  this.binaryAnnotations=binaryAnnotations;
  for (  Map.Entry<String,String> entry : binaryAnnotations.entrySet()) {
    checkArgument(!entry.getKey().isEmpty(),""String_Node_Str"");
    checkArgument(!entry.getValue().isEmpty(),""String_Node_Str"");
  }
  this.minDuration=minDuration;
  this.maxDuration=maxDuration;
  this.endTs=endTs;
  this.lookback=lookback;
  this.limit=limit;
}","QueryRequest(String serviceName,String spanName,List<String> annotations,Map<String,String> binaryAnnotations,Long minDuration,Long maxDuration,long endTs,long lookback,int limit){
  checkArgument(serviceName == null || !serviceName.isEmpty(),""String_Node_Str"");
  checkArgument(spanName == null || !spanName.isEmpty(),""String_Node_Str"");
  checkArgument(endTs > 0,""String_Node_Str"",endTs);
  checkArgument(limit > 0,""String_Node_Str"",limit);
  this.serviceName=serviceName != null ? serviceName.toLowerCase() : null;
  this.spanName=spanName != null ? spanName.toLowerCase() : null;
  this.annotations=annotations;
  for (  String annotation : annotations) {
    checkArgument(!annotation.isEmpty(),""String_Node_Str"");
  }
  this.binaryAnnotations=binaryAnnotations;
  for (  Map.Entry<String,String> entry : binaryAnnotations.entrySet()) {
    checkArgument(!entry.getKey().isEmpty(),""String_Node_Str"");
    checkArgument(!entry.getValue().isEmpty(),""String_Node_Str"",entry.getKey());
  }
  this.minDuration=minDuration;
  this.maxDuration=maxDuration;
  this.endTs=endTs;
  this.lookback=lookback;
  this.limit=limit;
}"
46918,"/** 
 * Corresponds to query parameter ""annotationQuery"". Ex. ""http.method=GET and finagle.retry""
 * @see QueryRequest#toAnnotationQuery()
 */
public Builder parseAnnotationQuery(String annotationQuery){
  if (annotationQuery != null && !annotationQuery.isEmpty()) {
    for (    String ann : annotationQuery.split(""String_Node_Str"")) {
      if (ann.indexOf('=') == -1) {
        addAnnotation(ann);
      }
 else {
        String[] keyValue=ann.split(""String_Node_Str"");
        if (keyValue.length < 2 || keyValue[1] == null) {
          addAnnotation(ann);
        }
        addBinaryAnnotation(keyValue[0],keyValue[1]);
      }
    }
  }
  return this;
}","/** 
 * Corresponds to query parameter ""annotationQuery"". Ex. ""http.method=GET and finagle.retry""
 * @see QueryRequest#toAnnotationQuery()
 */
public Builder parseAnnotationQuery(String annotationQuery){
  if (annotationQuery != null && !annotationQuery.isEmpty()) {
    for (    String ann : annotationQuery.split(""String_Node_Str"")) {
      if (ann.indexOf('=') == -1) {
        addAnnotation(ann);
      }
 else {
        String[] keyValue=ann.split(""String_Node_Str"");
        addBinaryAnnotation(keyValue[0],keyValue.length < 2 ? ""String_Node_Str"" : keyValue[1]);
      }
    }
  }
  return this;
}"
46919,"@Bean @ConditionalOnMissingBean(DataSource.class) DataSource mysqlDataSource(){
  StringBuilder url=new StringBuilder(""String_Node_Str"");
  url.append(mysql.getHost()).append(""String_Node_Str"").append(mysql.getPort());
  url.append(""String_Node_Str"").append(mysql.getDb());
  url.append(""String_Node_Str"");
  url.append(""String_Node_Str"").append(mysql.isUseSsl());
  HikariDataSource result=new HikariDataSource();
  result.setDriverClassName(""String_Node_Str"");
  result.setJdbcUrl(url.toString());
  result.setMaximumPoolSize(mysql.getMaxActive());
  return result;
}","@Bean @ConditionalOnMissingBean(DataSource.class) DataSource mysqlDataSource(){
  StringBuilder url=new StringBuilder(""String_Node_Str"");
  url.append(mysql.getHost()).append(""String_Node_Str"").append(mysql.getPort());
  url.append(""String_Node_Str"").append(mysql.getDb());
  url.append(""String_Node_Str"");
  url.append(""String_Node_Str"").append(mysql.isUseSsl());
  HikariDataSource result=new HikariDataSource();
  result.setDriverClassName(""String_Node_Str"");
  result.setJdbcUrl(url.toString());
  result.setMaximumPoolSize(mysql.getMaxActive());
  result.setUsername(mysql.getUsername());
  result.setPassword(mysql.getPassword());
  return result;
}"
46920,"public QueryRequest build(){
  long selectedEndTs=endTs == null ? System.currentTimeMillis() * 1000 : endTs;
  return new QueryRequest(serviceName,spanName,annotations,binaryAnnotations,minDuration,maxDuration,selectedEndTs,Math.min(lookback == null ? selectedEndTs : lookback,selectedEndTs),limit == null ? 10 : limit);
}","public QueryRequest build(){
  long selectedEndTs=endTs == null ? System.currentTimeMillis() : endTs;
  return new QueryRequest(serviceName,spanName,annotations,binaryAnnotations,minDuration,maxDuration,selectedEndTs,Math.min(lookback == null ? selectedEndTs : lookback,selectedEndTs),limit == null ? 10 : limit);
}"
46921,"/** 
 * Removes an item from the list and animates the removal.
 * @param which Position to remove (NOTE: headers/footers ignored!this is a position in your input ListAdapter).
 * @param velocityX 
 */
public void removeItem(int which,float velocityX){
  if (mDragState == IDLE || mDragState == DRAGGING) {
    mDragState=REMOVING;
    mRemoveVelocityX=velocityX;
    if (mDragState == IDLE) {
      mSrcPos=getHeaderViewsCount() + which;
      mFirstExpPos=mSrcPos;
      mSecondExpPos=mSrcPos;
      mFloatPos=mSrcPos;
      View v=getChildAt(mSrcPos - getFirstVisiblePosition());
      if (v != null) {
        v.setVisibility(View.INVISIBLE);
      }
    }
    if (mInTouchEvent) {
switch (mCancelMethod) {
case ON_TOUCH_EVENT:
        super.onTouchEvent(mCancelEvent);
      break;
case ON_INTERCEPT_TOUCH_EVENT:
    super.onInterceptTouchEvent(mCancelEvent);
  break;
}
}
if (mRemoveAnimator != null) {
mRemoveAnimator.start();
}
 else {
doRemoveItem(which);
}
}
}","/** 
 * Removes an item from the list and animates the removal.
 * @param which Position to remove (NOTE: headers/footers ignored!this is a position in your input ListAdapter).
 * @param velocityX 
 */
public void removeItem(int which,float velocityX){
  if (mDragState == IDLE || mDragState == DRAGGING) {
    if (mDragState == IDLE) {
      mSrcPos=getHeaderViewsCount() + which;
      mFirstExpPos=mSrcPos;
      mSecondExpPos=mSrcPos;
      mFloatPos=mSrcPos;
      View v=getChildAt(mSrcPos - getFirstVisiblePosition());
      if (v != null) {
        v.setVisibility(View.INVISIBLE);
      }
    }
    mDragState=REMOVING;
    mRemoveVelocityX=velocityX;
    if (mInTouchEvent) {
switch (mCancelMethod) {
case ON_TOUCH_EVENT:
        super.onTouchEvent(mCancelEvent);
      break;
case ON_INTERCEPT_TOUCH_EVENT:
    super.onInterceptTouchEvent(mCancelEvent);
  break;
}
}
if (mRemoveAnimator != null) {
mRemoveAnimator.start();
}
 else {
doRemoveItem(which);
}
}
}"
46922,"/** 
 * Get the position of the floating item for any view of the list in its current drag state. Result is restricted to positions between header and footer items.
 * @param y y-coord of dragging finger
 * @param position ListView position
 * @param top y-coord of top of item at given position
 */
private int getFloatPosition(int y,int position,int top){
  final int floatViewMidY=Math.max(mFloatViewHeightHalf + getPaddingTop(),Math.min(getHeight() - getPaddingBottom() - mFloatViewHeightHalf,y - mDragPointY + mFloatViewHeightHalf));
  int visItemTop;
  int visItemPos;
  final int divHeight=getDividerHeight();
switch (mDragState) {
case SRC_ABOVE:
    visItemTop=top;
  if (position == mSrcDragPos + 1) {
    visItemTop-=mItemHeightCollapsed + divHeight;
  }
if (position > mSrcDragPos && position <= mExpDragPos) {
  visItemPos=position - 1;
}
 else {
  visItemPos=position;
}
break;
case SRC_BELOW:
visItemTop=top;
if (position == mSrcDragPos) {
visItemTop+=mItemHeightCollapsed + divHeight;
}
if (position < mSrcDragPos && position >= mExpDragPos) {
visItemPos=position + 1;
}
 else {
visItemPos=position;
}
break;
default :
visItemTop=top;
visItemPos=position;
}
int edge=getDragEdge(visItemPos,visItemTop);
if (floatViewMidY < edge) {
while (visItemPos >= 0) {
visItemPos--;
if (visItemPos <= 0) {
visItemPos=0;
break;
}
visItemTop-=getVisualItemHeight(visItemPos);
edge=getDragEdge(visItemPos,visItemTop);
if (floatViewMidY >= edge) {
break;
}
}
}
 else {
final int count=getCount();
while (visItemPos < count) {
if (visItemPos == count - 1) {
break;
}
visItemTop+=getVisualItemHeight(visItemPos);
edge=getDragEdge(visItemPos + 1,visItemTop);
if (floatViewMidY < edge) {
break;
}
visItemPos++;
}
}
final int numHeaders=getHeaderViewsCount();
final int numFooters=getFooterViewsCount();
if (visItemPos < numHeaders) {
return numHeaders;
}
 else if (visItemPos >= getCount() - numFooters) {
return getCount() - numFooters - 1;
}
return visItemPos;
}","/** 
 * Get the position of the floating item for any view of the list in its current drag state. Result is restricted to positions between header and footer items.
 * @param y y-coord of dragging finger
 * @param position ListView position
 * @param top y-coord of top of item at given position
 */
private int getFloatPosition(int y,int position,int top){
  final int floatViewMidY=Math.max(mFloatViewHeightHalf + getPaddingTop(),Math.min(getHeight() - getPaddingBottom() - mFloatViewHeightHalf,y - mDragPointY + mFloatViewHeightHalf));
  int visItemTop;
  int visItemPos;
  final int divHeight=getDividerHeight();
switch (mDragState) {
case SRC_ABOVE:
    visItemTop=top;
  if (position == mSrcDragPos + 1) {
    visItemTop-=mItemHeightCollapsed + divHeight;
  }
if (position > mSrcDragPos && position <= mExpDragPos) {
  visItemPos=position - 1;
}
 else {
  visItemPos=position;
}
break;
case SRC_BELOW:
visItemTop=top;
if (position == mSrcDragPos) {
visItemTop+=mItemHeightCollapsed + divHeight;
}
if (position <= mSrcDragPos && position > mExpDragPos) {
visItemPos=position + 1;
}
 else {
visItemPos=position;
}
break;
default :
visItemTop=top;
visItemPos=position;
}
int edge=getDragEdge(visItemPos,visItemTop);
if (floatViewMidY < edge) {
while (visItemPos >= 0) {
visItemPos--;
if (visItemPos <= 0) {
visItemPos=0;
break;
}
visItemTop-=getVisualItemHeight(visItemPos);
edge=getDragEdge(visItemPos,visItemTop);
if (floatViewMidY >= edge) {
break;
}
}
}
 else {
final int count=getCount();
while (visItemPos < count) {
if (visItemPos == count - 1) {
break;
}
visItemTop+=getVisualItemHeight(visItemPos);
edge=getDragEdge(visItemPos + 1,visItemTop);
if (floatViewMidY < edge) {
break;
}
visItemPos++;
}
}
final int numHeaders=getHeaderViewsCount();
final int numFooters=getFooterViewsCount();
if (visItemPos < numHeaders) {
return numHeaders;
}
 else if (visItemPos >= getCount() - numFooters) {
return getCount() - numFooters - 1;
}
return visItemPos;
}"
46923,"@Override public View getView(int position,View convertView,ViewGroup parent){
  RelativeLayout v;
  View child;
  if (convertView != null) {
    v=(RelativeLayout)convertView;
    View oldChild=v.getChildAt(0);
    child=mAdapter.getView(position,oldChild,v);
    if (child != oldChild) {
      v.removeViewAt(0);
      v.addView(child);
      v.setTag(child.findViewById(R.id.drag));
    }
  }
 else {
    AbsListView.LayoutParams params=new AbsListView.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
    v=new RelativeLayout(getContext());
    v.setLayoutParams(params);
    child=super.getView(position,null,v);
    v.addView(child);
    v.setTag(child.findViewById(R.id.drag));
  }
  ViewGroup.LayoutParams lp=v.getLayoutParams();
  final int numHeaders=getHeaderViewsCount();
  final int srcAdapter=mSrcDragPos - numHeaders;
  final int expAdapter=mExpDragPos - numHeaders;
  boolean itemIsNormal=position != srcAdapter && position != expAdapter;
  boolean listHasExpPos=mDragState == SRC_ABOVE || mDragState == SRC_BELOW;
  boolean itemNeedsWC=itemIsNormal || !listHasExpPos;
  int oldHeight=lp.height;
  if (itemNeedsWC && lp.height != ViewGroup.LayoutParams.WRAP_CONTENT) {
    lp.height=ViewGroup.LayoutParams.WRAP_CONTENT;
  }
 else   if (listHasExpPos) {
    if (position == srcAdapter && lp.height != mItemHeightCollapsed) {
      lp.height=mItemHeightCollapsed;
    }
 else     if (position == expAdapter) {
      int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
      child.measure(spec,spec);
      mExpandedChildHeight=child.getMeasuredHeight();
      int height=mExpandedChildHeight + mFloatViewHeight;
      if (lp.height != height) {
        lp.height=height;
      }
      if (mDragState == SRC_ABOVE) {
        v.setGravity(Gravity.TOP);
      }
 else {
        v.setGravity(Gravity.BOTTOM);
      }
    }
  }
  if (lp.height != oldHeight) {
    v.setLayoutParams(lp);
  }
  int oldVis=v.getVisibility();
  int vis=oldVis;
  if (position == srcAdapter && mDragState != NO_DRAG && vis == View.VISIBLE) {
    vis=View.INVISIBLE;
  }
 else   if (vis == View.INVISIBLE) {
    vis=View.VISIBLE;
  }
  if (vis != oldVis) {
    v.setVisibility(vis);
  }
  return v;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  RelativeLayout v;
  View child;
  if (convertView != null) {
    v=(RelativeLayout)convertView;
    View oldChild=v.getChildAt(0);
    child=mAdapter.getView(position,oldChild,v);
    if (child != oldChild) {
      v.removeViewAt(0);
      v.addView(child);
      v.setTag(child.findViewById(R.id.drag));
    }
  }
 else {
    AbsListView.LayoutParams params=new AbsListView.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
    v=new RelativeLayout(getContext());
    v.setLayoutParams(params);
    child=mAdapter.getView(position,null,v);
    v.addView(child);
    v.setTag(child.findViewById(R.id.drag));
  }
  ViewGroup.LayoutParams lp=v.getLayoutParams();
  final int numHeaders=getHeaderViewsCount();
  final int srcAdapter=mSrcDragPos - numHeaders;
  final int expAdapter=mExpDragPos - numHeaders;
  boolean itemIsNormal=position != srcAdapter && position != expAdapter;
  boolean listHasExpPos=mDragState == SRC_ABOVE || mDragState == SRC_BELOW;
  boolean itemNeedsWC=itemIsNormal || !listHasExpPos;
  int oldHeight=lp.height;
  if (itemNeedsWC && lp.height != ViewGroup.LayoutParams.WRAP_CONTENT) {
    lp.height=ViewGroup.LayoutParams.WRAP_CONTENT;
  }
 else   if (listHasExpPos) {
    if (position == srcAdapter && lp.height != mItemHeightCollapsed) {
      lp.height=mItemHeightCollapsed;
    }
 else     if (position == expAdapter) {
      int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
      child.measure(spec,spec);
      mExpandedChildHeight=child.getMeasuredHeight();
      int height=mExpandedChildHeight + mFloatViewHeight;
      if (lp.height != height) {
        lp.height=height;
      }
      if (mDragState == SRC_ABOVE) {
        v.setGravity(Gravity.TOP);
      }
 else {
        v.setGravity(Gravity.BOTTOM);
      }
    }
  }
  if (lp.height != oldHeight) {
    v.setLayoutParams(lp);
  }
  int oldVis=v.getVisibility();
  int vis=oldVis;
  if (position == srcAdapter && mDragState != NO_DRAG && vis == View.VISIBLE) {
    vis=View.INVISIBLE;
  }
 else   if (vis == View.INVISIBLE) {
    vis=View.VISIBLE;
  }
  if (vis != oldVis) {
    v.setVisibility(vis);
  }
  return v;
}"
46924,"/** 
 * Get the position of the floating item for any view of the list in its current drag state. Result is restricted to positions between header and footer items.
 * @param y y-coord of dragging finger
 * @param position ListView position
 * @param top y-coord of top of item at given position
 */
private int getFloatPosition(int y,int position,int top){
  final int floatViewMidY=Math.max(mFloatViewHeightHalf + getPaddingTop(),Math.min(getHeight() - getPaddingBottom() - mFloatViewHeightHalf,y - mDragPointY + mFloatViewHeightHalf));
  int visItemTop;
  int visItemPos;
  final int divHeight=getDividerHeight();
switch (mDragState) {
case SRC_ABOVE:
    visItemTop=top;
  if (position == mSrcDragPos + 1) {
    visItemTop-=mItemHeightCollapsed + divHeight;
  }
if (position > mSrcDragPos && position <= mExpDragPos) {
  visItemPos=position - 1;
}
 else {
  visItemPos=position;
}
break;
case SRC_BELOW:
visItemTop=top;
if (position == mSrcDragPos) {
visItemTop+=mItemHeightCollapsed + divHeight;
}
visItemPos=position;
if (position > mExpDragPos) {
visItemPos+=1;
}
break;
default :
visItemTop=top;
visItemPos=position;
}
int edge=getDragEdge(visItemPos,visItemTop);
if (floatViewMidY < edge) {
while (visItemPos >= 0) {
visItemPos--;
if (visItemPos <= 0) {
visItemPos=0;
break;
}
visItemTop-=getVisualItemHeight(visItemPos);
edge=getDragEdge(visItemPos,visItemTop);
if (floatViewMidY >= edge) {
break;
}
}
}
 else {
final int count=getCount();
while (visItemPos < count) {
if (visItemPos == count - 1) {
break;
}
visItemTop+=getVisualItemHeight(visItemPos);
edge=getDragEdge(visItemPos + 1,visItemTop);
if (floatViewMidY < edge) {
break;
}
visItemPos++;
}
}
final int numHeaders=getHeaderViewsCount();
final int numFooters=getFooterViewsCount();
if (visItemPos < numHeaders) {
return numHeaders;
}
 else if (visItemPos >= getCount() - numFooters) {
return getCount() - numFooters - 1;
}
return visItemPos;
}","/** 
 * Get the position of the floating item for any view of the list in its current drag state. Result is restricted to positions between header and footer items.
 * @param y y-coord of dragging finger
 * @param position ListView position
 * @param top y-coord of top of item at given position
 */
private int getFloatPosition(int y,int position,int top){
  final int floatViewMidY=Math.max(mFloatViewHeightHalf + getPaddingTop(),Math.min(getHeight() - getPaddingBottom() - mFloatViewHeightHalf,y - mDragPointY + mFloatViewHeightHalf));
  int visItemTop;
  int visItemPos;
  final int divHeight=getDividerHeight();
switch (mDragState) {
case SRC_ABOVE:
    visItemTop=top;
  if (position == mSrcDragPos + 1) {
    visItemTop-=mItemHeightCollapsed + divHeight;
  }
if (position > mSrcDragPos && position <= mExpDragPos) {
  visItemPos=position - 1;
}
 else {
  visItemPos=position;
}
break;
case SRC_BELOW:
visItemTop=top;
if (position == mSrcDragPos) {
visItemTop+=mItemHeightCollapsed + divHeight;
}
if (position < mSrcDragPos && position >= mExpDragPos) {
visItemPos=position + 1;
}
 else {
visItemPos=position;
}
break;
default :
visItemTop=top;
visItemPos=position;
}
int edge=getDragEdge(visItemPos,visItemTop);
if (floatViewMidY < edge) {
while (visItemPos >= 0) {
visItemPos--;
if (visItemPos <= 0) {
visItemPos=0;
break;
}
visItemTop-=getVisualItemHeight(visItemPos);
edge=getDragEdge(visItemPos,visItemTop);
if (floatViewMidY >= edge) {
break;
}
}
}
 else {
final int count=getCount();
while (visItemPos < count) {
if (visItemPos == count - 1) {
break;
}
visItemTop+=getVisualItemHeight(visItemPos);
edge=getDragEdge(visItemPos + 1,visItemTop);
if (floatViewMidY < edge) {
break;
}
visItemPos++;
}
}
final int numHeaders=getHeaderViewsCount();
final int numFooters=getFooterViewsCount();
if (visItemPos < numHeaders) {
return numHeaders;
}
 else if (visItemPos >= getCount() - numFooters) {
return getCount() - numFooters - 1;
}
return visItemPos;
}"
46925,"private void prepare() throws IOException, InterruptedException {
  logger.debug(""String_Node_Str"");
  if (settings.getAsStructuredMap().containsKey(""String_Node_Str"")) {
    settings=settings.getAsSettings(""String_Node_Str"");
  }
  Runtime.getRuntime().addShutdownHook(shutdownHook());
  BlockingQueue<SettingsPipelineRequest> queue=new ArrayBlockingQueue<>(32);
  setQueue(queue);
  SettingsPipelineRequest element=new SettingsPipelineRequest().set(settings);
  getQueue().put(element);
  logger.debug(""String_Node_Str"");
}","private void prepare() throws IOException, InterruptedException {
  logger.debug(""String_Node_Str"");
  this.reloadSettings(settings);
  if (settings.getAsStructuredMap().containsKey(""String_Node_Str"")) {
    settings=settings.getAsSettings(""String_Node_Str"");
  }
  Runtime.getRuntime().addShutdownHook(shutdownHook());
  BlockingQueue<SettingsPipelineRequest> queue=new ArrayBlockingQueue<>(32);
  setQueue(queue);
  SettingsPipelineRequest element=new SettingsPipelineRequest().set(settings);
  getQueue().put(element);
  logger.debug(""String_Node_Str"");
}"
46926,"public JDBCImporter setSettings(Settings newSettings){
  settings=newSettings;
  String statefile=settings.get(""String_Node_Str"");
  if (statefile != null) {
    try {
      File file=new File(statefile);
      if (file.exists() && file.isFile() && file.canRead()) {
        InputStream stateFileInputStream=new FileInputStream(file);
        settings=settingsBuilder().put(settings).loadFromStream(""String_Node_Str"",stateFileInputStream).build();
        logger.info(""String_Node_Str"",statefile);
      }
 else {
        logger.warn(""String_Node_Str"",statefile);
      }
    }
 catch (    IOException e) {
      logger.error(e.getMessage(),e);
    }
  }
  return this;
}","public JDBCImporter setSettings(Settings newSettings){
  logger.debug(""String_Node_Str"",newSettings.getAsMap());
  settings=newSettings;
  String statefile=settings.get(""String_Node_Str"");
  if (statefile != null) {
    try {
      File file=new File(statefile);
      if (file.exists() && file.isFile() && file.canRead()) {
        InputStream stateFileInputStream=new FileInputStream(file);
        settings=settingsBuilder().put(settings).loadFromStream(""String_Node_Str"",stateFileInputStream).build();
        logger.info(""String_Node_Str"",statefile,settings.getAsMap());
      }
 else {
        logger.warn(""String_Node_Str"",statefile);
      }
    }
 catch (    IOException e) {
      logger.error(e.getMessage(),e);
    }
  }
  return this;
}"
46927,"@Override public BaseIngestTransportClient newIndex(String index,Settings settings,Map<String,String> mappings){
  if (client == null) {
    logger.warn(""String_Node_Str"");
    return this;
  }
  if (index == null) {
    logger.warn(""String_Node_Str"");
    return this;
  }
  CreateIndexRequestBuilder createIndexRequestBuilder=new CreateIndexRequestBuilder(client.admin().indices()).setIndex(index);
  Settings concreteSettings;
  if (settings == null && getSettings() != null) {
    concreteSettings=getSettings();
  }
 else   if (settings != null) {
    concreteSettings=settings;
  }
 else {
    concreteSettings=null;
  }
  if (concreteSettings != null) {
    createIndexRequestBuilder.setSettings(getSettings());
  }
  if (mappings == null && getMappings() != null) {
    for (    String type : getMappings().keySet()) {
      createIndexRequestBuilder.addMapping(type,getMappings().get(type));
    }
  }
 else   if (mappings != null) {
    for (    String type : mappings.keySet()) {
      createIndexRequestBuilder.addMapping(type,mappings.get(type));
    }
  }
  createIndexRequestBuilder.execute().actionGet();
  logger.info(""String_Node_Str"",index,concreteSettings != null ? concreteSettings.getAsMap() : ""String_Node_Str"",mappings != null ? mappings.size() : 0);
  return this;
}","@Override public BaseIngestTransportClient newIndex(String index,Settings settings,Map<String,String> mappings){
  if (client == null) {
    logger.warn(""String_Node_Str"");
    return this;
  }
  if (index == null) {
    logger.warn(""String_Node_Str"");
    return this;
  }
  CreateIndexRequestBuilder createIndexRequestBuilder=new CreateIndexRequestBuilder(client.admin().indices()).setIndex(index);
  Settings concreteSettings=null;
  if (settings != null) {
    concreteSettings=settings;
  }
 else   if (getSettings() != null) {
    concreteSettings=getSettings();
  }
  if (concreteSettings != null) {
    createIndexRequestBuilder.setSettings(concreteSettings);
  }
  if (mappings == null && getMappings() != null) {
    for (    String type : getMappings().keySet()) {
      createIndexRequestBuilder.addMapping(type,getMappings().get(type));
    }
  }
 else   if (mappings != null) {
    for (    String type : mappings.keySet()) {
      createIndexRequestBuilder.addMapping(type,mappings.get(type));
    }
  }
  createIndexRequestBuilder.execute().actionGet();
  logger.info(""String_Node_Str"",index,concreteSettings != null ? concreteSettings.getAsMap() : ""String_Node_Str"",mappings != null ? mappings.size() : 0);
  return this;
}"
46928,"public JDBCFeeder(JDBCFeeder feeder){
  super(feeder);
}","public JDBCFeeder(JDBCFeeder feeder){
  super(feeder);
  this.name=feeder.getName();
}"
46929,"@Test() @Parameters({""String_Node_Str""}) public void testWriteLastRiverRunTimeToCustomRiverInfo(String riverResource) throws IOException {
  final Client client=client(""String_Node_Str"");
  setupContext(new MockRiverSource(){
    @Override public void fetch(){
    }
  }
,riverResource);
  Map<String,Object> spec=(Map<String,Object>)riverSettings(riverResource).settings().get(""String_Node_Str"");
  Map<String,String> loadedSettings=new JsonSettingsLoader().load(jsonBuilder().map(spec).string());
  Settings settings=settingsBuilder().put(loadedSettings).build();
  RiverFlow flow=new ColumnRiverFlow();
  flow.setRiverContext(context);
  flow.getFeeder().setRiverState(new RiverState()).setSpec(spec).setSettings(settings).setClient(client).run();
}","@Test() @Parameters({""String_Node_Str""}) public void testWriteLastRiverRunTimeToCustomRiverInfo(String riverResource) throws IOException {
  final Client client=client(""String_Node_Str"");
  setupContext(new MockRiverSource(){
    @Override public void fetch(){
    }
  }
,riverResource);
  Map<String,Object> spec=(Map<String,Object>)riverSettings(riverResource).settings().get(""String_Node_Str"");
  Map<String,String> loadedSettings=new JsonSettingsLoader().load(jsonBuilder().map(spec).string());
  Settings settings=settingsBuilder().put(loadedSettings).build();
  RiverFlow flow=new ColumnRiverFlow();
  flow.setRiverContext(context);
  flow.getFeeder().setName(context.getRiverName()).setRiverState(new RiverState()).setSpec(spec).setSettings(settings).setClient(client).run();
  client.admin().indices().refresh(Requests.refreshRequest(""String_Node_Str"")).actionGet();
  assertLastRiverRunTimeExists(client);
}"
46930,"@Test @Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testSimpleRiverJob(String riverResource,String sql1,String sql2) throws IOException, InterruptedException, SQLException {
  Connection connection=source.connectionForWriting();
  createRandomProductsJob(connection,sql2,100);
  source.closeWriting();
  connection=source.connectionForReading();
  ResultSet results=connection.createStatement().executeQuery(sql1);
  if (!connection.getAutoCommit()) {
    connection.commit();
  }
  int count=results.next() ? results.getInt(1) : -1;
  source.close(results);
  source.closeReading();
  assertEquals(count,100);
  Client client=client(""String_Node_Str"");
  assertEquals(client.prepareSearch(INDEX).execute().actionGet().getHits().getTotalHits(),0);
  RiverSettings settings=riverSettings(riverResource);
  JDBCRiver river=new JDBCRiver(new RiverName(INDEX,TYPE),settings,client);
  river.once();
  Thread.sleep(10000L);
  assertEquals(client.prepareSearch(INDEX).setTypes(TYPE).execute().actionGet().getHits().getTotalHits(),100);
  connection=source.connectionForReading();
  results=connection.createStatement().executeQuery(sql1);
  if (!connection.getAutoCommit()) {
    connection.commit();
  }
  count=results.next() ? results.getInt(1) : -1;
  results.close();
  assertEquals(count,0);
  river.close();
}","@Test @Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testSimpleRiverJob(String riverResource,String sql1,String sql2) throws IOException, InterruptedException, SQLException {
  Connection connection=source.connectionForWriting();
  createRandomProductsJob(connection,sql2,100);
  source.closeWriting();
  connection=source.connectionForReading();
  ResultSet results=connection.createStatement().executeQuery(sql1);
  if (!connection.getAutoCommit()) {
    connection.commit();
  }
  int count=results.next() ? results.getInt(1) : -1;
  source.close(results);
  source.closeReading();
  assertEquals(count,100);
  Client client=client(""String_Node_Str"");
  try {
    assertEquals(client.prepareSearch(INDEX).execute().actionGet().getHits().getTotalHits(),0);
  }
 catch (  ElasticsearchException e) {
    logger.error(""String_Node_Str"",e,e.toString());
  }
  RiverSettings settings=riverSettings(riverResource);
  JDBCRiver river=new JDBCRiver(new RiverName(INDEX,TYPE),settings,client);
  river.once();
  Thread.sleep(10000L);
  assertEquals(client.prepareSearch(INDEX).setTypes(TYPE).execute().actionGet().getHits().getTotalHits(),100);
  connection=source.connectionForReading();
  results=connection.createStatement().executeQuery(sql1);
  if (!connection.getAutoCommit()) {
    connection.commit();
  }
  count=results.next() ? results.getInt(1) : -1;
  results.close();
  assertEquals(count,0);
  river.close();
}"
46931,"@Test @Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testSimpleRiverJob(String riverResource,String sql1,String sql2) throws IOException, InterruptedException, SQLException {
  Connection connection=source.connectionForWriting();
  createRandomProductsJob(connection,sql2,100);
  source.closeWriting();
  connection=source.connectionForReading();
  ResultSet results=connection.createStatement().executeQuery(sql1);
  if (!connection.getAutoCommit()) {
    connection.commit();
  }
  int count=results.next() ? results.getInt(1) : -1;
  source.close(results);
  source.closeReading();
  assertEquals(count,100);
  Client client=client(""String_Node_Str"");
  assertEquals(client.prepareSearch(INDEX).execute().actionGet().getHits().getTotalHits(),0);
  RiverSettings settings=riverSettings(riverResource);
  JDBCRiver river=new JDBCRiver(new RiverName(INDEX,TYPE),settings,client);
  river.once();
  Thread.sleep(10000L);
  assertEquals(client.prepareSearch(INDEX).setTypes(TYPE).execute().actionGet().getHits().getTotalHits(),100);
  connection=source.connectionForReading();
  results=connection.createStatement().executeQuery(sql1);
  if (!connection.getAutoCommit()) {
    connection.commit();
  }
  count=results.next() ? results.getInt(1) : -1;
  results.close();
  assertEquals(count,0);
  river.close();
}","@Test @Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testSimpleRiverJob(String riverResource,String sql1,String sql2) throws IOException, InterruptedException, SQLException {
  Connection connection=source.connectionForWriting();
  createRandomProductsJob(connection,sql2,100);
  source.closeWriting();
  connection=source.connectionForReading();
  ResultSet results=connection.createStatement().executeQuery(sql1);
  if (!connection.getAutoCommit()) {
    connection.commit();
  }
  int count=results.next() ? results.getInt(1) : -1;
  source.close(results);
  source.closeReading();
  assertEquals(count,100);
  Client client=client(""String_Node_Str"");
  try {
    assertEquals(client.prepareSearch(INDEX).execute().actionGet().getHits().getTotalHits(),0);
  }
 catch (  ElasticsearchException e) {
    logger.error(""String_Node_Str"",e,e.toString());
  }
  RiverSettings settings=riverSettings(riverResource);
  JDBCRiver river=new JDBCRiver(new RiverName(INDEX,TYPE),settings,client);
  river.once();
  Thread.sleep(10000L);
  assertEquals(client.prepareSearch(INDEX).setTypes(TYPE).execute().actionGet().getHits().getTotalHits(),100);
  connection=source.connectionForReading();
  results=connection.createStatement().executeQuery(sql1);
  if (!connection.getAutoCommit()) {
    connection.commit();
  }
  count=results.next() ? results.getInt(1) : -1;
  results.close();
  assertEquals(count,0);
  river.close();
}"
46932,"@BeforeMethod public void createIndices() throws Exception {
  startNode(""String_Node_Str"").client();
  client(""String_Node_Str"").admin().cluster().prepareHealth().setWaitForYellowStatus().execute().actionGet();
  client(""String_Node_Str"").admin().indices().create(new CreateIndexRequest(INDEX)).actionGet();
}","@BeforeMethod public void createIndices() throws Exception {
  startNode(""String_Node_Str"").client();
  client(""String_Node_Str"").admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();
  client(""String_Node_Str"").admin().indices().create(new CreateIndexRequest(INDEX)).actionGet();
}"
46933,"@SuppressWarnings({""String_Node_Str""}) private void writeTimesToJdbcSettings(TimeValue lastRunTime,TimeValue currentTime){
  if (riverContext == null || riverContext.getRiverSettings() == null) {
    return;
  }
  Map<String,Object> jdbcSettings=(Map<String,Object>)riverContext.getRiverSettings().get(""String_Node_Str"");
  if (jdbcSettings == null) {
    jdbcSettings=new HashMap<String,Object>();
    riverContext.getRiverSettings().put(""String_Node_Str"",jdbcSettings);
  }
  jdbcSettings.put(ColumnRiverFlow.LAST_RUN_TIME,lastRunTime);
  jdbcSettings.put(ColumnRiverFlow.CURRENT_RUN_STARTED_TIME,currentTime);
}","private void writeTimesToJdbcSettings(TimeValue lastRunTime,TimeValue currentTime){
  if (riverContext == null || riverContext.getRiverSettings() == null) {
    return;
  }
  Map<String,Object> settings=riverContext.getRiverSettings();
  settings.put(ColumnRiverFlow.LAST_RUN_TIME,lastRunTime);
  settings.put(ColumnRiverFlow.CURRENT_RUN_STARTED_TIME,currentTime);
}"
46934,"private Timestamp getLastRunTimestamp(){
  Map jdbcSettings=(Map)context.getRiverSettings().get(""String_Node_Str"");
  logger.info(""String_Node_Str"",jdbcSettings);
  if (jdbcSettings == null || jdbcSettings.get(ColumnRiverFlow.LAST_RUN_TIME) == null) {
    return new Timestamp(0);
  }
  TimeValue lastRunTime=(TimeValue)jdbcSettings.get(ColumnRiverFlow.LAST_RUN_TIME);
  return new Timestamp(lastRunTime.millis());
}","@SuppressWarnings(""String_Node_Str"") private Timestamp getLastRunTimestamp(){
  Map settings=(Map)context.getRiverSettings();
  logger.info(""String_Node_Str"",context.getRiverSettings());
  if (settings == null || settings.get(ColumnRiverFlow.LAST_RUN_TIME) == null) {
    return new Timestamp(0);
  }
  TimeValue lastRunTime=(TimeValue)settings.get(ColumnRiverFlow.LAST_RUN_TIME);
  return new Timestamp(lastRunTime.millis());
}"
46935,"/** 
 * Gets a raw uri like ""/{name}/id/*"" and returns ""/([^/]*)/id/*."" Also handles regular expressions if defined inside routes: For instance ""/users/{username: [a-zA-Z][a-zA-Z_0-9]}"" becomes ""/users/([a-zA-Z][a-zA-Z_0-9])""
 * @return The converted regex with default matching regex - or the regexspecified by the user.
 */
protected static String convertRawUriToRegex(String rawUri){
  Matcher matcher=PATTERN_FOR_VARIABLE_PARTS_OF_ROUTE.matcher(rawUri);
  StringBuffer stringBuffer=new StringBuffer();
  while (matcher.find()) {
    String namedVariablePartOfRoute=matcher.group(3);
    String namedVariablePartOfORouteReplacedWithRegex;
    if (namedVariablePartOfRoute != null) {
      namedVariablePartOfORouteReplacedWithRegex=""String_Node_Str"" + Matcher.quoteReplacement(namedVariablePartOfRoute) + ""String_Node_Str"";
    }
 else {
      namedVariablePartOfORouteReplacedWithRegex=VARIABLE_ROUTES_DEFAULT_REGEX;
    }
    matcher.appendReplacement(stringBuffer,namedVariablePartOfORouteReplacedWithRegex);
  }
  matcher.appendTail(stringBuffer);
  return stringBuffer.toString();
}","/** 
 * Gets a raw uri like ""/{name}/id/*"" and returns ""/([^/]*)/id/*."" Also handles regular expressions if defined inside routes: For instance ""/users/{username: [a-zA-Z][a-zA-Z_0-9]}"" becomes ""/users/([a-zA-Z][a-zA-Z_0-9])""
 * @return The converted regex with default matching regex - or the regexspecified by the user.
 */
protected static String convertRawUriToRegex(String rawUri){
  Matcher groupMatcher=Pattern.compile(""String_Node_Str"").matcher(rawUri);
  String converted=groupMatcher.replaceAll(""String_Node_Str"");
  Matcher matcher=PATTERN_FOR_VARIABLE_PARTS_OF_ROUTE.matcher(converted);
  StringBuffer stringBuffer=new StringBuffer();
  while (matcher.find()) {
    String namedVariablePartOfRoute=matcher.group(3);
    String namedVariablePartOfORouteReplacedWithRegex;
    if (namedVariablePartOfRoute != null) {
      namedVariablePartOfORouteReplacedWithRegex=""String_Node_Str"" + Matcher.quoteReplacement(namedVariablePartOfRoute) + ""String_Node_Str"";
    }
 else {
      namedVariablePartOfORouteReplacedWithRegex=VARIABLE_ROUTES_DEFAULT_REGEX;
    }
    matcher.appendReplacement(stringBuffer,namedVariablePartOfORouteReplacedWithRegex);
  }
  matcher.appendTail(stringBuffer);
  return stringBuffer.toString();
}"
46936,"@Test public void convertRawUriToRegex(){
  assertThat(Route.convertRawUriToRegex(""String_Node_Str""),CoreMatchers.equalTo(""String_Node_Str""));
  assertThat(Route.convertRawUriToRegex(""String_Node_Str""),CoreMatchers.equalTo(""String_Node_Str""));
  assertThat(Route.convertRawUriToRegex(""String_Node_Str""),CoreMatchers.equalTo(""String_Node_Str""));
  assertThat(Route.convertRawUriToRegex(""String_Node_Str""),CoreMatchers.equalTo(""String_Node_Str""));
}","@Test public void convertRawUriToRegex(){
  assertThat(Route.convertRawUriToRegex(""String_Node_Str""),CoreMatchers.equalTo(""String_Node_Str""));
  assertThat(Route.convertRawUriToRegex(""String_Node_Str""),CoreMatchers.equalTo(""String_Node_Str""));
  assertThat(Route.convertRawUriToRegex(""String_Node_Str""),CoreMatchers.equalTo(""String_Node_Str""));
  assertThat(Route.convertRawUriToRegex(""String_Node_Str""),CoreMatchers.equalTo(""String_Node_Str""));
  assertThat(Route.convertRawUriToRegex(""String_Node_Str""),CoreMatchers.equalTo(""String_Node_Str""));
}"
46937,"public void renderResult(Context context,Result result) throws IOException {
  String out=render();
  ResponseStreams responseStreams=context.finalizeHeaders(result);
  try (Writer w=responseStreams.getWriter()){
    w.write(out);
    w.flush();
    w.close();
  }
 }","public void renderResult(Context context,Result result) throws IOException {
  String out=render();
  result.contentType(""String_Node_Str"");
  result.charset(""String_Node_Str"");
  ResponseStreams responseStreams=context.finalizeHeaders(result);
  try (Writer w=responseStreams.getWriter()){
    w.write(out);
    w.flush();
    w.close();
  }
 }"
46938,"/** 
 * Loads files from assets directory. This is the default directory of Ninja where to store stuff. Usually in src/main/java/assets/. But if user wants to use a dir outside of application project dir, then base dir can be overridden by static.asset.base.dir in application conf file.
 */
private URL getStaticFileFromAssetsDir(String fileName){
  URL url=null;
  if (ninjaProperties.isDev()) {
    String finalNameWithoutLeadingSlash=assetsControllerHelper.normalizePathWithoutLeadingSlash(fileName,false);
    File possibleFile=new File(assetsDirInDevModeWithoutTrailingSlash() + File.separator + finalNameWithoutLeadingSlash);
    url=getUrlForFile(possibleFile);
  }
 else {
    String finalNameWithoutLeadingSlash=assetsControllerHelper.normalizePathWithoutLeadingSlash(fileName,true);
    url=this.getClass().getClassLoader().getResource(ASSETS_DIR + ""String_Node_Str"" + finalNameWithoutLeadingSlash);
  }
  return url;
}","/** 
 * Loads files from assets directory. This is the default directory of Ninja where to store stuff. Usually in src/main/java/assets/. But if user wants to use a dir outside of application project dir, then base dir can be overridden by static.asset.base.dir in application conf file.
 */
private URL getStaticFileFromAssetsDir(String fileName){
  URL url=null;
  if (ninjaProperties.isDev() && new File(assetsDirInDevModeWithoutTrailingSlash()).exists()) {
    String finalNameWithoutLeadingSlash=assetsControllerHelper.normalizePathWithoutLeadingSlash(fileName,false);
    File possibleFile=new File(assetsDirInDevModeWithoutTrailingSlash() + File.separator + finalNameWithoutLeadingSlash);
    url=getUrlForFile(possibleFile);
  }
 else {
    String finalNameWithoutLeadingSlash=assetsControllerHelper.normalizePathWithoutLeadingSlash(fileName,true);
    url=this.getClass().getClassLoader().getResource(ASSETS_DIR + ""String_Node_Str"" + finalNameWithoutLeadingSlash);
  }
  return url;
}"
46939,"@Test public void testNormalizePathWithoutLeadingSlash(){
  assertEquals(""String_Node_Str"",assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  assertEquals(""String_Node_Str"",assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  assertEquals(null,assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  assertEquals(null,assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  assertEquals(""String_Node_Str"",assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  assertEquals(null,assetsController.normalizePathWithoutLeadingSlash(null,true));
  assertEquals(""String_Node_Str"",assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  mockStatic(FilenameUtils.class,Mockito.CALLS_REAL_METHODS);
  when(FilenameUtils.normalize(anyString())).then(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      String file=(String)args[0];
      return FilenameUtils.normalize(file,false);
    }
  }
);
  assertEquals(""String_Node_Str"",assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",!SystemUtils.IS_OS_WINDOWS));
  assertNotEquals(""String_Node_Str"",assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",SystemUtils.IS_OS_WINDOWS));
  verifyStatic();
}","@Test public void testNormalizePathWithoutLeadingSlash(){
  assertEquals(""String_Node_Str"",assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  assertEquals(""String_Node_Str"",assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  assertEquals(null,assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  assertEquals(null,assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  assertEquals(""String_Node_Str"",assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  assertEquals(null,assetsController.normalizePathWithoutLeadingSlash(null,true));
  assertEquals(""String_Node_Str"",assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  mockStatic(FilenameUtils.class,Mockito.CALLS_REAL_METHODS);
  when(FilenameUtils.normalize(anyString())).then(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      String file=(String)args[0];
      return FilenameUtils.normalize(file,false);
    }
  }
);
  assertEquals(""String_Node_Str"",assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",false));
  assertNotEquals(""String_Node_Str"",assetsController.normalizePathWithoutLeadingSlash(""String_Node_Str"",true));
  verifyStatic();
}"
46940,"/** 
 * Whether diagnostics are enabled. If enabled then the default system/views will be skipped and a detailed diagnostic error result will be returned by the various methods in this class. You get precise feedback where an error occurred including original source code.
 * @return True if diagnostics are enabled otherwise false.
 */
public boolean isDiagnosticsEnabled(){
  return ninjaProperties.isDev() && ninjaProperties.getBooleanWithDefault(NinjaConstant.DIAGNOSTICS_KEY_NAME,false);
}","/** 
 * Whether diagnostics are enabled. If enabled then the default system/views will be skipped and a detailed diagnostic error result will be returned by the various methods in this class. You get precise feedback where an error occurred including original source code.
 * @return True if diagnostics are enabled otherwise false.
 */
public boolean isDiagnosticsEnabled(){
  return ninjaProperties.isDev() && ninjaProperties.getBooleanWithDefault(NinjaConstant.DIAGNOSTICS_KEY_NAME,Boolean.TRUE);
}"
46941,"@Test public void testOnRouteRequestWhenOnBadRequestInDiagnosticMode() throws Exception {
  FilterChain filterChain=Mockito.mock(FilterChain.class);
  Mockito.when(route.getFilterChain()).thenReturn(filterChain);
  BadRequestException badRequest=new BadRequestException(""String_Node_Str"");
  ;
  Mockito.when(filterChain.next(contextImpl)).thenThrow(badRequest);
  when(ninjaProperties.isDev()).thenReturn(true);
  when(ninjaProperties.getBooleanWithDefault(NinjaConstant.DIAGNOSTICS_KEY_NAME,false)).thenReturn(true);
  ninjaDefault.onRouteRequest(contextImpl);
  Result localResult=ninjaDefault.getBadRequestResult(contextImpl,badRequest);
  assertThat(localResult.getRenderable(),CoreMatchers.instanceOf(DiagnosticError.class));
}","@Test public void testOnRouteRequestWhenOnBadRequestInDiagnosticMode() throws Exception {
  FilterChain filterChain=Mockito.mock(FilterChain.class);
  Mockito.when(route.getFilterChain()).thenReturn(filterChain);
  BadRequestException badRequest=new BadRequestException(""String_Node_Str"");
  ;
  Mockito.when(filterChain.next(contextImpl)).thenThrow(badRequest);
  when(ninjaProperties.isDev()).thenReturn(true);
  when(ninjaProperties.getBooleanWithDefault(NinjaConstant.DIAGNOSTICS_KEY_NAME,true)).thenReturn(true);
  ninjaDefault.onRouteRequest(contextImpl);
  Result localResult=ninjaDefault.getBadRequestResult(contextImpl,badRequest);
  assertThat(localResult.getRenderable(),CoreMatchers.instanceOf(DiagnosticError.class));
}"
46942,"@Test public void testOnRouteRequestWhenInternalServerErrorExceptionInDiagnosticMode() throws Exception {
  FilterChain filterChain=Mockito.mock(FilterChain.class);
  Mockito.when(route.getFilterChain()).thenReturn(filterChain);
  InternalServerErrorException internalServerErrorException=new InternalServerErrorException(""String_Node_Str"");
  Mockito.when(filterChain.next(contextImpl)).thenThrow(internalServerErrorException);
  when(ninjaProperties.isDev()).thenReturn(true);
  when(ninjaProperties.getBooleanWithDefault(NinjaConstant.DIAGNOSTICS_KEY_NAME,false)).thenReturn(true);
  ninjaDefault.onRouteRequest(contextImpl);
  Result localResult=ninjaDefault.getInternalServerErrorResult(contextImpl,internalServerErrorException);
  assertThat(localResult.getRenderable(),CoreMatchers.instanceOf(DiagnosticError.class));
}","@Test public void testOnRouteRequestWhenInternalServerErrorExceptionInDiagnosticMode() throws Exception {
  FilterChain filterChain=Mockito.mock(FilterChain.class);
  Mockito.when(route.getFilterChain()).thenReturn(filterChain);
  InternalServerErrorException internalServerErrorException=new InternalServerErrorException(""String_Node_Str"");
  Mockito.when(filterChain.next(contextImpl)).thenThrow(internalServerErrorException);
  when(ninjaProperties.isDev()).thenReturn(true);
  when(ninjaProperties.getBooleanWithDefault(NinjaConstant.DIAGNOSTICS_KEY_NAME,true)).thenReturn(true);
  ninjaDefault.onRouteRequest(contextImpl);
  Result localResult=ninjaDefault.getInternalServerErrorResult(contextImpl,internalServerErrorException);
  assertThat(localResult.getRenderable(),CoreMatchers.instanceOf(DiagnosticError.class));
}"
46943,"@Test public void testOnRouteRequestWhenOnNotFoundInDiagnosticMode() throws Exception {
  FilterChain filterChain=Mockito.mock(FilterChain.class);
  Mockito.when(route.getFilterChain()).thenReturn(filterChain);
  Mockito.when(router.getRouteFor(Matchers.anyString(),Matchers.anyString())).thenReturn(null);
  when(ninjaProperties.isDev()).thenReturn(true);
  when(ninjaProperties.getBooleanWithDefault(NinjaConstant.DIAGNOSTICS_KEY_NAME,false)).thenReturn(true);
  ninjaDefault.onRouteRequest(contextImpl);
  Result localResult=ninjaDefault.getNotFoundResult(contextImpl);
  assertThat(localResult.getRenderable(),CoreMatchers.instanceOf(DiagnosticError.class));
}","@Test public void testOnRouteRequestWhenOnNotFoundInDiagnosticMode() throws Exception {
  FilterChain filterChain=Mockito.mock(FilterChain.class);
  Mockito.when(route.getFilterChain()).thenReturn(filterChain);
  Mockito.when(router.getRouteFor(Matchers.anyString(),Matchers.anyString())).thenReturn(null);
  when(ninjaProperties.isDev()).thenReturn(true);
  when(ninjaProperties.getBooleanWithDefault(NinjaConstant.DIAGNOSTICS_KEY_NAME,true)).thenReturn(true);
  ninjaDefault.onRouteRequest(contextImpl);
  Result localResult=ninjaDefault.getNotFoundResult(contextImpl);
  assertThat(localResult.getRenderable(),CoreMatchers.instanceOf(DiagnosticError.class));
}"
46944,"@Override public void invoke(Context context,Result result){
  Object object=result.getRenderable();
  Map map;
  if (object == null) {
    map=Maps.newHashMap();
  }
 else   if (object instanceof Map) {
    map=(Map)object;
  }
 else {
    String realClassNameLowerCamelCase=CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL,object.getClass().getSimpleName());
    map=Maps.newHashMap();
    map.put(realClassNameLowerCamelCase,object);
  }
  Optional<String> language=lang.getLanguage(context,Optional.of(result));
  if (language.isPresent()) {
    map.put(""String_Node_Str"",language.get());
  }
  if (!context.getSession().isEmpty()) {
    map.put(""String_Node_Str"",context.getSession().getData());
  }
  map.put(""String_Node_Str"",context.getContextPath());
  map.put(""String_Node_Str"",new TemplateEngineFreemarkerI18nMethod(messages,context,result));
  Optional<String> requestLang=lang.getLanguage(context,Optional.of(result));
  Locale locale=lang.getLocaleFromStringOrDefault(requestLang);
  map.put(""String_Node_Str"",new TemplateEngineFreemarkerPrettyTimeMethod(locale));
  map.put(""String_Node_Str"",templateEngineFreemarkerReverseRouteMethod);
  map.put(""String_Node_Str"",templateEngineFreemarkerAssetsAtMethod);
  map.put(""String_Node_Str"",templateEngineFreemarkerWebJarsAtMethod);
  map.put(""String_Node_Str"",new TemplateEngineFreemarkerAuthenticityTokenDirective(context));
  map.put(""String_Node_Str"",new TemplateEngineFreemarkerAuthenticityFormDirective(context));
  Map<String,String> translatedFlashCookieMap=Maps.newHashMap();
  for (  Entry<String,String> entry : context.getFlashScope().getCurrentFlashCookieData().entrySet()) {
    String messageValue=null;
    Optional<String> messageValueOptional=messages.get(entry.getValue(),context,Optional.of(result));
    if (!messageValueOptional.isPresent()) {
      messageValue=entry.getValue();
    }
 else {
      messageValue=messageValueOptional.get();
    }
    translatedFlashCookieMap.put(entry.getKey(),messageValue);
  }
  map.put(""String_Node_Str"",translatedFlashCookieMap);
  String templateName=templateEngineHelper.getTemplateForResult(context.getRoute(),result,this.fileSuffix);
  Template freemarkerTemplate=null;
  try {
    freemarkerTemplate=cfg.getTemplate(templateName);
  }
 catch (  IOException iOException) {
    logger.error(""String_Node_Str"",templateName,iOException);
    throw new RuntimeException(iOException);
  }
  ResponseStreams responseStreams=context.finalizeHeaders(result);
  try {
    StringWriter buffer=new StringWriter(64 * 1024);
    freemarkerTemplate.process(map,buffer);
    Writer writer=responseStreams.getWriter();
    writer.write(buffer.toString());
    writer.close();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",templateName,e);
    throw new RuntimeException(e);
  }
}","@Override public void invoke(Context context,Result result){
  Object object=result.getRenderable();
  Map map;
  if (object == null) {
    map=Maps.newHashMap();
  }
 else   if (object instanceof Map) {
    map=(Map)object;
  }
 else {
    String realClassNameLowerCamelCase=CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL,object.getClass().getSimpleName());
    map=Maps.newHashMap();
    map.put(realClassNameLowerCamelCase,object);
  }
  Optional<String> language=lang.getLanguage(context,Optional.of(result));
  if (language.isPresent()) {
    map.put(""String_Node_Str"",language.get());
  }
  if (!context.getSession().isEmpty()) {
    map.put(""String_Node_Str"",context.getSession().getData());
  }
  map.put(""String_Node_Str"",context.getContextPath());
  map.put(""String_Node_Str"",new TemplateEngineFreemarkerI18nMethod(messages,context,result));
  Optional<String> requestLang=lang.getLanguage(context,Optional.of(result));
  Locale locale=lang.getLocaleFromStringOrDefault(requestLang);
  map.put(""String_Node_Str"",new TemplateEngineFreemarkerPrettyTimeMethod(locale));
  map.put(""String_Node_Str"",templateEngineFreemarkerReverseRouteMethod);
  map.put(""String_Node_Str"",templateEngineFreemarkerAssetsAtMethod);
  map.put(""String_Node_Str"",templateEngineFreemarkerWebJarsAtMethod);
  map.put(""String_Node_Str"",new TemplateEngineFreemarkerAuthenticityTokenDirective(context));
  map.put(""String_Node_Str"",new TemplateEngineFreemarkerAuthenticityFormDirective(context));
  Map<String,String> translatedFlashCookieMap=Maps.newHashMap();
  for (  Entry<String,String> entry : context.getFlashScope().getCurrentFlashCookieData().entrySet()) {
    String messageValue=null;
    Optional<String> messageValueOptional=messages.get(entry.getValue(),context,Optional.of(result));
    if (!messageValueOptional.isPresent()) {
      messageValue=entry.getValue();
    }
 else {
      messageValue=messageValueOptional.get();
    }
    translatedFlashCookieMap.put(entry.getKey(),messageValue);
  }
  map.put(""String_Node_Str"",translatedFlashCookieMap);
  String templateName=templateEngineHelper.getTemplateForResult(context.getRoute(),result,this.fileSuffix);
  Template freemarkerTemplate=null;
  try {
    freemarkerTemplate=cfg.getTemplate(templateName);
  }
 catch (  IOException iOException) {
    logger.error(""String_Node_Str"",templateName,iOException);
    throw new RuntimeException(iOException);
  }
  try {
    StringWriter buffer=new StringWriter(64 * 1024);
    freemarkerTemplate.process(map,buffer);
    ResponseStreams responseStreams=context.finalizeHeaders(result);
    Writer writer=responseStreams.getWriter();
    writer.write(buffer.toString());
    writer.close();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",templateName,e);
    throw new RuntimeException(e);
  }
}"
46945,"public <T>T invoke(Context context,Class<T> classOfT){
  T t=null;
  try (InputStream inputStream=context.getInputStream()){
    t=objectMapper.readValue(inputStream,classOfT);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
  return t;
}","public <T>T invoke(Context context,Class<T> classOfT){
  T t=null;
  try (InputStream inputStream=context.getInputStream()){
    t=objectMapper.readValue(inputStream,classOfT);
  }
 catch (  JsonMappingException ex) {
    try {
      t=classOfT.newInstance();
    }
 catch (    InstantiationException|IllegalAccessException e) {
      logger.error(""String_Node_Str"",classOfT.getName(),e);
    }
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
  return t;
}"
46946,"public <T>T invoke(Context context,Class<T> classOfT){
  T t=null;
  try {
    t=xmlMapper.readValue(context.getInputStream(),classOfT);
  }
 catch (  JsonParseException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  JsonMappingException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
  return t;
}","public <T>T invoke(Context context,Class<T> classOfT){
  T t=null;
  try {
    t=xmlMapper.readValue(context.getInputStream(),classOfT);
  }
 catch (  JsonParseException|JsonMappingException e) {
    logger.error(""String_Node_Str"",e);
    try {
      t=classOfT.newInstance();
    }
 catch (    InstantiationException|IllegalAccessException ex) {
      logger.error(""String_Node_Str"",classOfT.getName(),e);
    }
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
  return t;
}"
46947,"public void handleTemplateException(TemplateException te,Environment env,Writer out) throws TemplateException {
  if (!ninjaProperties.isProd()) {
    PrintWriter pw=(out instanceof PrintWriter) ? (PrintWriter)out : new PrintWriter(out);
    pw.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    te.printStackTrace(pw);
    pw.println(""String_Node_Str"");
    pw.flush();
    pw.close();
    logger.error(""String_Node_Str"",te);
  }
  throw te;
}","public void handleTemplateException(TemplateException te,Environment env,Writer out) throws TemplateException {
  if (ninjaProperties.isProd()) {
    throw te;
  }
 else {
    PrintWriter pw=(out instanceof PrintWriter) ? (PrintWriter)out : new PrintWriter(out);
    pw.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    te.printStackTrace(pw);
    pw.println(""String_Node_Str"");
    logger.error(""String_Node_Str"",te);
  }
}"
46948,"public static ControllerMethodInvoker build(Method method,Injector injector){
  final Class[] paramTypes=method.getParameterTypes();
  final Annotation[][] paramAnnotations=method.getParameterAnnotations();
  ArgumentExtractor<?>[] argumentExtractors=new ArgumentExtractor<?>[paramTypes.length];
  for (int i=0; i < paramTypes.length; i++) {
    try {
      argumentExtractors[i]=getArgumentExtractor(paramTypes[i],paramAnnotations[i],injector);
    }
 catch (    RoutingException e) {
      throw new RoutingException(""String_Node_Str"" + i + ""String_Node_Str""+ method.getDeclaringClass().getName()+ ""String_Node_Str""+ method.getName()+ ""String_Node_Str"",e);
    }
  }
  boolean bodyAsFound=false;
  for (int i=0; i < argumentExtractors.length; i++) {
    if (argumentExtractors[i] == null) {
      if (bodyAsFound) {
        throw new RoutingException(""String_Node_Str"" + method.getDeclaringClass().getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str"");
      }
 else {
        argumentExtractors[i]=new ArgumentExtractors.BodyAsExtractor(paramTypes[i]);
        bodyAsFound=true;
      }
    }
  }
  for (int i=0; i < argumentExtractors.length; i++) {
    argumentExtractors[i]=validateArgumentWithExtractor(paramTypes[i],paramAnnotations[i],injector,argumentExtractors[i]);
  }
  return new ControllerMethodInvoker(method,argumentExtractors);
}","public static ControllerMethodInvoker build(Method method,Injector injector){
  final Class[] paramTypes=method.getParameterTypes();
  final Annotation[][] paramAnnotations=method.getParameterAnnotations();
  ArgumentExtractor<?>[] argumentExtractors=new ArgumentExtractor<?>[paramTypes.length];
  for (int i=0; i < paramTypes.length; i++) {
    try {
      argumentExtractors[i]=getArgumentExtractor(paramTypes[i],paramAnnotations[i],injector);
    }
 catch (    RoutingException e) {
      throw new RoutingException(""String_Node_Str"" + i + ""String_Node_Str""+ method.getDeclaringClass().getName()+ ""String_Node_Str""+ method.getName()+ ""String_Node_Str"",e);
    }
  }
  int bodyAsFound=-1;
  for (int i=0; i < argumentExtractors.length; i++) {
    if (argumentExtractors[i] == null) {
      if (bodyAsFound > -1) {
        throw new RoutingException(""String_Node_Str"" + method.getDeclaringClass().getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ paramTypes[bodyAsFound].getName()+ ""String_Node_Str""+ ""String_Node_Str""+ paramTypes[i].getName());
      }
 else {
        argumentExtractors[i]=new ArgumentExtractors.BodyAsExtractor(paramTypes[i]);
        bodyAsFound=i;
      }
    }
  }
  for (int i=0; i < argumentExtractors.length; i++) {
    argumentExtractors[i]=validateArgumentWithExtractor(paramTypes[i],paramAnnotations[i],injector,argumentExtractors[i]);
  }
  return new ControllerMethodInvoker(method,argumentExtractors);
}"
46949,"@Override public Result getForbiddenResult(Context context){
  String messageI18n=messages.getWithDefault(NinjaConstant.I18N_NINJA_SYSTEM_FORBIDDEN_REQUEST_TEXT_KEY,NinjaConstant.I18N_NINJA_SYSTEM_FORBIDDEN_REQUEST_TEXT_DEFAULT,context,Optional.<Result>absent());
  Message message=new Message(messageI18n);
  Result result=Results.forbidden().supportedContentTypes(Result.TEXT_HTML,Result.APPLICATON_JSON,Result.APPLICATION_XML).fallbackContentType(Result.TEXT_HTML).render(message).template(NinjaConstant.LOCATION_VIEW_FTL_HTML_FORBIDDEN);
  return result;
}","@Override public Result getForbiddenResult(Context context){
  String messageI18n=messages.getWithDefault(NinjaConstant.I18N_NINJA_SYSTEM_FORBIDDEN_REQUEST_TEXT_KEY,NinjaConstant.I18N_NINJA_SYSTEM_FORBIDDEN_REQUEST_TEXT_DEFAULT,context,Optional.<Result>absent());
  Message message=new Message(messageI18n);
  Result result=Results.forbidden().supportedContentTypes(Result.TEXT_HTML,Result.APPLICATION_JSON,Result.APPLICATION_XML).fallbackContentType(Result.TEXT_HTML).render(message).template(NinjaConstant.LOCATION_VIEW_FTL_HTML_FORBIDDEN);
  return result;
}"
46950,"@Override public Result getInternalServerErrorResult(Context context,Exception exception){
  logger.error(""String_Node_Str"",context.getRequestPath(),context.getRoute().getControllerClass(),context.getRoute().getControllerMethod(),exception);
  String messageI18n=messages.getWithDefault(NinjaConstant.I18N_NINJA_SYSTEM_INTERNAL_SERVER_ERROR_TEXT_KEY,NinjaConstant.I18N_NINJA_SYSTEM_INTERNAL_SERVER_ERROR_TEXT_DEFAULT,context,Optional.<Result>absent());
  Message message=new Message(messageI18n);
  Result result=Results.internalServerError().supportedContentTypes(Result.TEXT_HTML,Result.APPLICATON_JSON,Result.APPLICATION_XML).fallbackContentType(Result.TEXT_HTML).render(message).template(NinjaConstant.LOCATION_VIEW_FTL_HTML_INTERNAL_SERVER_ERROR);
  return result;
}","@Override public Result getInternalServerErrorResult(Context context,Exception exception){
  logger.error(""String_Node_Str"",context.getRequestPath(),context.getRoute().getControllerClass(),context.getRoute().getControllerMethod(),exception);
  String messageI18n=messages.getWithDefault(NinjaConstant.I18N_NINJA_SYSTEM_INTERNAL_SERVER_ERROR_TEXT_KEY,NinjaConstant.I18N_NINJA_SYSTEM_INTERNAL_SERVER_ERROR_TEXT_DEFAULT,context,Optional.<Result>absent());
  Message message=new Message(messageI18n);
  Result result=Results.internalServerError().supportedContentTypes(Result.TEXT_HTML,Result.APPLICATION_JSON,Result.APPLICATION_XML).fallbackContentType(Result.TEXT_HTML).render(message).template(NinjaConstant.LOCATION_VIEW_FTL_HTML_INTERNAL_SERVER_ERROR);
  return result;
}"
46951,"@Override public Result getUnauthorizedResult(Context context){
  String messageI18n=messages.getWithDefault(NinjaConstant.I18N_NINJA_SYSTEM_UNAUTHORIZED_REQUEST_TEXT_KEY,NinjaConstant.I18N_NINJA_SYSTEM_UNAUTHORIZED_REQUEST_TEXT_DEFAULT,context,Optional.<Result>absent());
  Message message=new Message(messageI18n);
  Result result=Results.unauthorized().addHeader(Result.WWW_AUTHENTICATE,""String_Node_Str"").supportedContentTypes(Result.TEXT_HTML,Result.APPLICATON_JSON,Result.APPLICATION_XML).fallbackContentType(Result.TEXT_HTML).render(message).template(NinjaConstant.LOCATION_VIEW_FTL_HTML_UNAUTHORIZED);
  return result;
}","@Override public Result getUnauthorizedResult(Context context){
  String messageI18n=messages.getWithDefault(NinjaConstant.I18N_NINJA_SYSTEM_UNAUTHORIZED_REQUEST_TEXT_KEY,NinjaConstant.I18N_NINJA_SYSTEM_UNAUTHORIZED_REQUEST_TEXT_DEFAULT,context,Optional.<Result>absent());
  Message message=new Message(messageI18n);
  Result result=Results.unauthorized().addHeader(Result.WWW_AUTHENTICATE,""String_Node_Str"").supportedContentTypes(Result.TEXT_HTML,Result.APPLICATION_JSON,Result.APPLICATION_XML).fallbackContentType(Result.TEXT_HTML).render(message).template(NinjaConstant.LOCATION_VIEW_FTL_HTML_UNAUTHORIZED);
  return result;
}"
46952,"@Override public Result getBadRequestResult(Context context,Exception exception){
  String messageI18n=messages.getWithDefault(NinjaConstant.I18N_NINJA_SYSTEM_BAD_REQUEST_TEXT_KEY,NinjaConstant.I18N_NINJA_SYSTEM_BAD_REQUEST_TEXT_DEFAULT,context,Optional.<Result>absent());
  Message message=new Message(messageI18n);
  Result result=Results.badRequest().supportedContentTypes(Result.TEXT_HTML,Result.APPLICATON_JSON,Result.APPLICATION_XML).fallbackContentType(Result.TEXT_HTML).render(message).template(NinjaConstant.LOCATION_VIEW_FTL_HTML_BAD_REQUEST);
  return result;
}","@Override public Result getBadRequestResult(Context context,Exception exception){
  String messageI18n=messages.getWithDefault(NinjaConstant.I18N_NINJA_SYSTEM_BAD_REQUEST_TEXT_KEY,NinjaConstant.I18N_NINJA_SYSTEM_BAD_REQUEST_TEXT_DEFAULT,context,Optional.<Result>absent());
  Message message=new Message(messageI18n);
  Result result=Results.badRequest().supportedContentTypes(Result.TEXT_HTML,Result.APPLICATION_JSON,Result.APPLICATION_XML).fallbackContentType(Result.TEXT_HTML).render(message).template(NinjaConstant.LOCATION_VIEW_FTL_HTML_BAD_REQUEST);
  return result;
}"
46953,"@Override public Result getNotFoundResult(Context context){
  String messageI18n=messages.getWithDefault(NinjaConstant.I18N_NINJA_SYSTEM_NOT_FOUND_TEXT_KEY,NinjaConstant.I18N_NINJA_SYSTEM_NOT_FOUND_TEXT_DEFAULT,context,Optional.<Result>absent());
  Message message=new Message(messageI18n);
  Result result=Results.notFound().supportedContentTypes(Result.TEXT_HTML,Result.APPLICATON_JSON,Result.APPLICATION_XML).fallbackContentType(Result.TEXT_HTML).render(message).template(NinjaConstant.LOCATION_VIEW_FTL_HTML_NOT_FOUND);
  return result;
}","@Override public Result getNotFoundResult(Context context){
  String messageI18n=messages.getWithDefault(NinjaConstant.I18N_NINJA_SYSTEM_NOT_FOUND_TEXT_KEY,NinjaConstant.I18N_NINJA_SYSTEM_NOT_FOUND_TEXT_DEFAULT,context,Optional.<Result>absent());
  Message message=new Message(messageI18n);
  Result result=Results.notFound().supportedContentTypes(Result.TEXT_HTML,Result.APPLICATION_JSON,Result.APPLICATION_XML).fallbackContentType(Result.TEXT_HTML).render(message).template(NinjaConstant.LOCATION_VIEW_FTL_HTML_NOT_FOUND);
  return result;
}"
46954,"/** 
 * Set the content type of this result to   {@link Result#APPLICATON_JSONP}.
 * @return the same result where you executed this method on. But the content type is now {@link Result#APPLICATON_JSONP}.
 */
public Result jsonp(){
  contentType=APPLICATON_JSONP;
  return this;
}","/** 
 * Set the content type of this result to   {@link Result#APPLICATION_JSONP}.
 * @return the same result where you executed this method on. But the content type is now {@link Result#APPLICATION_JSONP}.
 */
public Result jsonp(){
  contentType=APPLICATION_JSONP;
  return this;
}"
46955,"/** 
 * Set the content type of this result to   {@link Result#APPLICATON_JSON}.
 * @return the same result where you executed this method on. But the content type is now {@link Result#APPLICATON_JSON}.
 */
public Result json(){
  contentType=APPLICATON_JSON;
  return this;
}","/** 
 * Set the content type of this result to   {@link Result#APPLICATION_JSON}.
 * @return the same result where you executed this method on. But the content type is now {@link Result#APPLICATION_JSON}.
 */
public Result json(){
  contentType=APPLICATION_JSON;
  return this;
}"
46956,"public static Result TODO(){
  Result result=status(Result.SC_501_NOT_IMPLEMENTED);
  result.contentType(Result.APPLICATON_JSON);
  return result;
}","public static Result TODO(){
  Result result=status(Result.SC_501_NOT_IMPLEMENTED);
  result.contentType(Result.APPLICATION_JSON);
  return result;
}"
46957,"@Override public String getContentType(){
  return Result.APPLICATON_JSON;
}","@Override public String getContentType(){
  return Result.APPLICATION_JSON;
}"
46958,"@Override public String getContentType(){
  return Result.APPLICATON_JSONP;
}","@Override public String getContentType(){
  return Result.APPLICATION_JSONP;
}"
46959,"@Test public void testThatGetBadRequestContentNegotiation() throws Exception {
  Mockito.when(contextImpl.getAcceptContentType()).thenReturn(Result.APPLICATON_JSON);
  Result result=ninjaDefault.getBadRequestResult(contextImpl,new Exception(""String_Node_Str""));
  assertThat(result.getContentType(),equalTo(null));
  assertThat(result.supportedContentTypes().size(),equalTo(3));
}","@Test public void testThatGetBadRequestContentNegotiation() throws Exception {
  Mockito.when(contextImpl.getAcceptContentType()).thenReturn(Result.APPLICATION_JSON);
  Result result=ninjaDefault.getBadRequestResult(contextImpl,new Exception(""String_Node_Str""));
  assertThat(result.getContentType(),equalTo(null));
  assertThat(result.supportedContentTypes().size(),equalTo(3));
}"
46960,"@Test public void testThatGetInternalServerErrorContentNegotiation() throws Exception {
  Mockito.when(contextImpl.getAcceptContentType()).thenReturn(Result.APPLICATON_JSON);
  Result result=ninjaDefault.getInternalServerErrorResult(contextImpl,new Exception(""String_Node_Str""));
  assertThat(result.getContentType(),equalTo(null));
  assertThat(result.supportedContentTypes().size(),equalTo(3));
}","@Test public void testThatGetInternalServerErrorContentNegotiation() throws Exception {
  Mockito.when(contextImpl.getAcceptContentType()).thenReturn(Result.APPLICATION_JSON);
  Result result=ninjaDefault.getInternalServerErrorResult(contextImpl,new Exception(""String_Node_Str""));
  assertThat(result.getContentType(),equalTo(null));
  assertThat(result.supportedContentTypes().size(),equalTo(3));
}"
46961,"@Test public void testThatGetOnNotFoundDoesContentNegotiation() throws Exception {
  Mockito.when(contextImpl.getAcceptContentType()).thenReturn(Result.APPLICATON_JSON);
  Result result=ninjaDefault.getNotFoundResult(contextImpl);
  assertThat(result.getContentType(),equalTo(null));
  assertThat(result.supportedContentTypes().size(),equalTo(3));
}","@Test public void testThatGetOnNotFoundDoesContentNegotiation() throws Exception {
  Mockito.when(contextImpl.getAcceptContentType()).thenReturn(Result.APPLICATION_JSON);
  Result result=ninjaDefault.getNotFoundResult(contextImpl);
  assertThat(result.getContentType(),equalTo(null));
  assertThat(result.supportedContentTypes().size(),equalTo(3));
}"
46962,"@Test public void testRenderRaw() throws Exception {
  String stringToRender=""String_Node_Str"";
  Result result=Results.json().renderRaw(stringToRender);
  Writer writer=new StringWriter();
  when(context.finalizeHeaders(result)).thenReturn(responseStreams);
  when(responseStreams.getWriter()).thenReturn(writer);
  Renderable renderable=(Renderable)result.getRenderable();
  renderable.render(context,result);
  verify(context).finalizeHeaders(result);
  assertEquals(writer.toString(),stringToRender);
  assertEquals(Result.APPLICATON_JSON,result.getContentType());
}","@Test public void testRenderRaw() throws Exception {
  String stringToRender=""String_Node_Str"";
  Result result=Results.json().renderRaw(stringToRender);
  Writer writer=new StringWriter();
  when(context.finalizeHeaders(result)).thenReturn(responseStreams);
  when(responseStreams.getWriter()).thenReturn(writer);
  Renderable renderable=(Renderable)result.getRenderable();
  renderable.render(context,result);
  verify(context).finalizeHeaders(result);
  assertEquals(writer.toString(),stringToRender);
  assertEquals(Result.APPLICATION_JSON,result.getContentType());
}"
46963,"@Test public void testJson(){
  Result result=new Result(Result.SC_200_OK);
  result.json();
  assertEquals(Result.APPLICATON_JSON,result.getContentType());
}","@Test public void testJson(){
  Result result=new Result(Result.SC_200_OK);
  result.json();
  assertEquals(Result.APPLICATION_JSON,result.getContentType());
}"
46964,"@Test public void testResultsTODO(){
  Result result=Results.TODO();
  assertEquals(Result.SC_501_NOT_IMPLEMENTED,result.getStatusCode());
  assertEquals(Result.APPLICATON_JSON,result.getContentType());
}","@Test public void testResultsTODO(){
  Result result=Results.TODO();
  assertEquals(Result.SC_501_NOT_IMPLEMENTED,result.getStatusCode());
  assertEquals(Result.APPLICATION_JSON,result.getContentType());
}"
46965,"@Test public void testResultsJsonWithObjectToRender(){
  TestObject testObject=new TestObject();
  Result result=Results.json().render(testObject);
  assertEquals(Result.SC_200_OK,result.getStatusCode());
  assertEquals(Result.APPLICATON_JSON,result.getContentType());
  assertEquals(testObject,result.getRenderable());
}","@Test public void testResultsJsonWithObjectToRender(){
  TestObject testObject=new TestObject();
  Result result=Results.json().render(testObject);
  assertEquals(Result.SC_200_OK,result.getStatusCode());
  assertEquals(Result.APPLICATION_JSON,result.getContentType());
  assertEquals(testObject,result.getRenderable());
}"
46966,"@Test public void testResultsJson(){
  Result result=Results.json();
  assertEquals(Result.SC_200_OK,result.getStatusCode());
  assertEquals(Result.APPLICATON_JSON,result.getContentType());
}","@Test public void testResultsJson(){
  Result result=Results.json();
  assertEquals(Result.SC_200_OK,result.getStatusCode());
  assertEquals(Result.APPLICATION_JSON,result.getContentType());
}"
46967,"@Before public void init() throws Exception {
  resultHandler=new ResultHandler(logger,templateEngineManager);
  when(responseStreams.getOutputStream()).thenReturn(outputStream);
  when(responseStreams.getWriter()).thenReturn(writer);
  when(context.finalizeHeaders(any(Result.class))).thenReturn(responseStreams);
  when(templateEngineManager.getTemplateEngineForContentType(Result.APPLICATON_JSON)).thenReturn(templateEngine);
  when(templateEngineManager.getTemplateEngineForContentType(Result.TEXT_HTML)).thenReturn(templateEngineHtml);
}","@Before public void init() throws Exception {
  resultHandler=new ResultHandler(logger,templateEngineManager);
  when(responseStreams.getOutputStream()).thenReturn(outputStream);
  when(responseStreams.getWriter()).thenReturn(writer);
  when(context.finalizeHeaders(any(Result.class))).thenReturn(responseStreams);
  when(templateEngineManager.getTemplateEngineForContentType(Result.APPLICATION_JSON)).thenReturn(templateEngine);
  when(templateEngineManager.getTemplateEngineForContentType(Result.TEXT_HTML)).thenReturn(templateEngineHtml);
}"
46968,"public Result getPersonViaContentNegotiationAndFallback(){
  Person person=new Person();
  person.name=""String_Node_Str"";
  return Results.ok().supportedContentTypes(Result.TEXT_HTML,Result.APPLICATON_JSON).fallbackContentType(Result.TEXT_HTML).template(""String_Node_Str"").render(person);
}","public Result getPersonViaContentNegotiationAndFallback(){
  Person person=new Person();
  person.name=""String_Node_Str"";
  return Results.ok().supportedContentTypes(Result.TEXT_HTML,Result.APPLICATION_JSON).fallbackContentType(Result.TEXT_HTML).template(""String_Node_Str"").render(person);
}"
46969,"@Override public String getAcceptContentType(){
  String contentType=httpServletRequest.getHeader(""String_Node_Str"");
  if (contentType == null) {
    return Result.TEXT_HTML;
  }
  if (contentType.indexOf(""String_Node_Str"") != -1 || contentType.indexOf(""String_Node_Str"") != -1 || contentType.startsWith(""String_Node_Str"")) {
    return Result.TEXT_HTML;
  }
  if (contentType.indexOf(""String_Node_Str"") != -1 || contentType.indexOf(""String_Node_Str"") != -1) {
    return Result.APPLICATION_XML;
  }
  if (contentType.indexOf(""String_Node_Str"") != -1 || contentType.indexOf(""String_Node_Str"") != -1) {
    return Result.APPLICATON_JSON;
  }
  if (contentType.indexOf(""String_Node_Str"") != -1) {
    return Result.TEXT_PLAIN;
  }
  if (contentType.indexOf(""String_Node_Str"") != -1) {
    return Result.APPLICATION_OCTET_STREAM;
  }
  if (contentType.endsWith(""String_Node_Str"")) {
    return Result.TEXT_HTML;
  }
  return Result.TEXT_HTML;
}","@Override public String getAcceptContentType(){
  String contentType=httpServletRequest.getHeader(""String_Node_Str"");
  if (contentType == null) {
    return Result.TEXT_HTML;
  }
  if (contentType.indexOf(""String_Node_Str"") != -1 || contentType.indexOf(""String_Node_Str"") != -1 || contentType.startsWith(""String_Node_Str"")) {
    return Result.TEXT_HTML;
  }
  if (contentType.indexOf(""String_Node_Str"") != -1 || contentType.indexOf(""String_Node_Str"") != -1) {
    return Result.APPLICATION_XML;
  }
  if (contentType.indexOf(""String_Node_Str"") != -1 || contentType.indexOf(""String_Node_Str"") != -1) {
    return Result.APPLICATION_JSON;
  }
  if (contentType.indexOf(""String_Node_Str"") != -1) {
    return Result.TEXT_PLAIN;
  }
  if (contentType.indexOf(""String_Node_Str"") != -1) {
    return Result.APPLICATION_OCTET_STREAM;
  }
  if (contentType.endsWith(""String_Node_Str"")) {
    return Result.TEXT_HTML;
  }
  return Result.TEXT_HTML;
}"
46970,"@Test public void testGetAcceptContentType(){
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(null);
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.TEXT_HTML,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.TEXT_HTML,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.TEXT_HTML,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.APPLICATON_JSON,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.TEXT_HTML,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.TEXT_HTML,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.TEXT_PLAIN,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.APPLICATON_JSON,context.getAcceptContentType());
}","@Test public void testGetAcceptContentType(){
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(null);
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.TEXT_HTML,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.TEXT_HTML,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.TEXT_HTML,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.APPLICATION_JSON,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.TEXT_HTML,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.TEXT_HTML,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.TEXT_PLAIN,context.getAcceptContentType());
  when(httpServletRequest.getHeader(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  context.init(servletContext,httpServletRequest,httpServletResponse);
  assertEquals(Result.APPLICATION_JSON,context.getAcceptContentType());
}"
46971,"@Override public String getWithDefault(String key,String defaultMessage,Optional<String> language,Object... params){
  Optional<String> value=get(key,language,params);
  if (value.isPresent()) {
    MessageFormat messageFormat=getMessageFormatForLocale(value.get(),language);
    return messageFormat.format(params);
  }
 else {
    MessageFormat messageFormat=getMessageFormatForLocale(defaultMessage,language);
    return messageFormat.format(params);
  }
}","@Override public String getWithDefault(String key,String defaultMessage,Optional<String> language,Object... params){
  Optional<String> value=get(key,language,params);
  if (value.isPresent()) {
    return value.get();
  }
 else {
    MessageFormat messageFormat=getMessageFormatForLocale(defaultMessage,language);
    return messageFormat.format(params);
  }
}"
46972,"/** 
 * Gets a raw uri like ""/{name}/id/*"" and returns ""/([^/]*)/id/*."" Also handles regular expressions if defined inside routes: For instance ""/users/{username: [a-zA-Z][a-zA-Z_0-9]}"" becomes ""/users/([a-zA-Z][a-zA-Z_0-9])""
 * @return The converted regex with default matching regex - or the regexspecified by the user.
 */
protected static String convertRawUriToRegex(String rawUri){
  Matcher matcher=PATTERN_FOR_VARIABLE_PARTS_OF_ROUTE.matcher(rawUri);
  StringBuffer stringBuffer=new StringBuffer();
  while (matcher.find()) {
    String namedVariablePartOfRoute=matcher.group(3);
    String namedVariablePartOfORouteReplacedWithRegex;
    if (namedVariablePartOfRoute != null) {
      namedVariablePartOfORouteReplacedWithRegex=""String_Node_Str"" + namedVariablePartOfRoute + ""String_Node_Str"";
    }
 else {
      namedVariablePartOfORouteReplacedWithRegex=VARIABLE_ROUTES_DEFAULT_REGEX;
    }
    matcher.appendReplacement(stringBuffer,namedVariablePartOfORouteReplacedWithRegex);
  }
  matcher.appendTail(stringBuffer);
  return stringBuffer.toString();
}","/** 
 * Gets a raw uri like ""/{name}/id/*"" and returns ""/([^/]*)/id/*."" Also handles regular expressions if defined inside routes: For instance ""/users/{username: [a-zA-Z][a-zA-Z_0-9]}"" becomes ""/users/([a-zA-Z][a-zA-Z_0-9])""
 * @return The converted regex with default matching regex - or the regexspecified by the user.
 */
protected static String convertRawUriToRegex(String rawUri){
  Matcher matcher=PATTERN_FOR_VARIABLE_PARTS_OF_ROUTE.matcher(rawUri);
  StringBuffer stringBuffer=new StringBuffer();
  while (matcher.find()) {
    String namedVariablePartOfRoute=matcher.group(3);
    String namedVariablePartOfORouteReplacedWithRegex;
    if (namedVariablePartOfRoute != null) {
      namedVariablePartOfORouteReplacedWithRegex=""String_Node_Str"" + Matcher.quoteReplacement(namedVariablePartOfRoute) + ""String_Node_Str"";
    }
 else {
      namedVariablePartOfORouteReplacedWithRegex=VARIABLE_ROUTES_DEFAULT_REGEX;
    }
    matcher.appendReplacement(stringBuffer,namedVariablePartOfORouteReplacedWithRegex);
  }
  matcher.appendTail(stringBuffer);
  return stringBuffer.toString();
}"
46973,"@Override protected void configure(){
  String persistenceUnitName=ninjaProperties.get(NinjaConstant.PERSISTENCE_UNIT_NAME);
  if (persistenceUnitName != null) {
    String connectionUrl=ninjaProperties.get(NinjaConstant.DB_CONNECTION_URL);
    String connectionUsername=ninjaProperties.get(NinjaConstant.DB_CONNECTION_USERNAME);
    String connectionPassword=ninjaProperties.get(NinjaConstant.DB_CONNECTION_PASSWORD);
    Properties jpaProperties=new Properties();
    if (connectionUrl != null) {
      jpaProperties.put(""String_Node_Str"",connectionUrl);
    }
    if (connectionUsername != null) {
      jpaProperties.put(""String_Node_Str"",connectionUsername);
    }
    if (connectionPassword != null) {
      jpaProperties.put(""String_Node_Str"",connectionPassword);
    }
    install(new JpaPersistModule(persistenceUnitName).properties(jpaProperties));
    UnitOfWorkInterceptor unitOfWorkInterceptor=new UnitOfWorkInterceptor(getProvider(com.google.inject.persist.UnitOfWork.class),getProvider(EntityManager.class));
    bindInterceptor(annotatedWith(UnitOfWork.class),any(),unitOfWorkInterceptor);
    bindInterceptor(any(),annotatedWith(UnitOfWork.class),unitOfWorkInterceptor);
    bind(JpaInitializer.class).asEagerSingleton();
  }
}","@Override protected void configure(){
  String persistenceUnitName=ninjaProperties.get(NinjaConstant.PERSISTENCE_UNIT_NAME);
  if (persistenceUnitName != null) {
    String connectionUrl=ninjaProperties.get(NinjaConstant.DB_CONNECTION_URL);
    String connectionUsername=ninjaProperties.get(NinjaConstant.DB_CONNECTION_USERNAME);
    String connectionPassword=ninjaProperties.get(NinjaConstant.DB_CONNECTION_PASSWORD);
    Properties jpaProperties=new Properties();
    if (connectionUrl != null) {
      jpaProperties.put(""String_Node_Str"",connectionUrl);
    }
    if (connectionUsername != null) {
      jpaProperties.put(""String_Node_Str"",connectionUsername);
    }
    if (connectionPassword != null) {
      jpaProperties.put(""String_Node_Str"",connectionPassword);
    }
    install(new JpaPersistModule(persistenceUnitName).properties(jpaProperties));
    UnitOfWorkInterceptor unitOfWorkInterceptor=new UnitOfWorkInterceptor();
    requestInjection(unitOfWorkInterceptor);
    bindInterceptor(annotatedWith(UnitOfWork.class),any(),unitOfWorkInterceptor);
    bindInterceptor(any(),annotatedWith(UnitOfWork.class),unitOfWorkInterceptor);
    bind(JpaInitializer.class).asEagerSingleton();
  }
}"
46974,"@Override public Object invoke(MethodInvocation invocation) throws Throwable {
  final UnitOfWork unitOfWork;
  if (entityManagerProvider.get() == null) {
    unitOfWork=unitOfWorkProvider.get();
    unitOfWork.begin();
    didWeStartWork.set(Boolean.TRUE);
  }
 else {
    return invocation.proceed();
  }
  try {
    return invocation.proceed();
  }
  finally {
    if (null != didWeStartWork.get()) {
      didWeStartWork.remove();
      unitOfWork.end();
    }
  }
}","@Override public Object invoke(MethodInvocation invocation) throws Throwable {
  if (null == didWeStartWork.get()) {
    unitOfWork.begin();
    didWeStartWork.set(Boolean.TRUE);
  }
 else {
    return invocation.proceed();
  }
  try {
    return invocation.proceed();
  }
  finally {
    if (null != didWeStartWork.get()) {
      didWeStartWork.remove();
      unitOfWork.end();
    }
  }
}"
46975,"@Override protected void configure(){
  String persistenceUnitName=ninjaProperties.get(NinjaConstant.PERSISTENCE_UNIT_NAME);
  if (persistenceUnitName != null) {
    String connectionUrl=ninjaProperties.get(NinjaConstant.DB_CONNECTION_URL);
    String connectionUsername=ninjaProperties.get(NinjaConstant.DB_CONNECTION_USERNAME);
    String connectionPassword=ninjaProperties.get(NinjaConstant.DB_CONNECTION_PASSWORD);
    Properties jpaProperties=new Properties();
    if (connectionUrl != null) {
      jpaProperties.put(""String_Node_Str"",connectionUrl);
    }
    if (connectionUsername != null) {
      jpaProperties.put(""String_Node_Str"",connectionUsername);
    }
    if (connectionPassword != null) {
      jpaProperties.put(""String_Node_Str"",connectionPassword);
    }
    install(new JpaPersistModule(persistenceUnitName).properties(jpaProperties));
    UnitOfWorkInterceptor unitOfWorkInterceptor=new UnitOfWorkInterceptor(getProvider(com.google.inject.persist.UnitOfWork.class),getProvider(EntityManager.class));
    bindInterceptor(annotatedWith(UnitOfWork.class),any(),unitOfWorkInterceptor);
    bindInterceptor(any(),annotatedWith(UnitOfWork.class),unitOfWorkInterceptor);
    bind(JpaInitializer.class).asEagerSingleton();
  }
}","@Override protected void configure(){
  String persistenceUnitName=ninjaProperties.get(NinjaConstant.PERSISTENCE_UNIT_NAME);
  if (persistenceUnitName != null) {
    String connectionUrl=ninjaProperties.get(NinjaConstant.DB_CONNECTION_URL);
    String connectionUsername=ninjaProperties.get(NinjaConstant.DB_CONNECTION_USERNAME);
    String connectionPassword=ninjaProperties.get(NinjaConstant.DB_CONNECTION_PASSWORD);
    Properties jpaProperties=new Properties();
    if (connectionUrl != null) {
      jpaProperties.put(""String_Node_Str"",connectionUrl);
    }
    if (connectionUsername != null) {
      jpaProperties.put(""String_Node_Str"",connectionUsername);
    }
    if (connectionPassword != null) {
      jpaProperties.put(""String_Node_Str"",connectionPassword);
    }
    install(new JpaPersistModule(persistenceUnitName).properties(jpaProperties));
    UnitOfWorkInterceptor unitOfWorkInterceptor=new UnitOfWorkInterceptor();
    requestInjection(unitOfWorkInterceptor);
    bindInterceptor(annotatedWith(UnitOfWork.class),any(),unitOfWorkInterceptor);
    bindInterceptor(any(),annotatedWith(UnitOfWork.class),unitOfWorkInterceptor);
    bind(JpaInitializer.class).asEagerSingleton();
  }
}"
46976,"@Override public Object invoke(MethodInvocation invocation) throws Throwable {
  final UnitOfWork unitOfWork;
  if (entityManagerProvider.get() == null) {
    unitOfWork=unitOfWorkProvider.get();
    unitOfWork.begin();
    didWeStartWork.set(Boolean.TRUE);
  }
 else {
    return invocation.proceed();
  }
  try {
    return invocation.proceed();
  }
  finally {
    if (null != didWeStartWork.get()) {
      didWeStartWork.remove();
      unitOfWork.end();
    }
  }
}","@Override public Object invoke(MethodInvocation invocation) throws Throwable {
  if (null == didWeStartWork.get()) {
    unitOfWork.begin();
    didWeStartWork.set(Boolean.TRUE);
  }
 else {
    return invocation.proceed();
  }
  try {
    return invocation.proceed();
  }
  finally {
    if (null != didWeStartWork.get()) {
      didWeStartWork.remove();
      unitOfWork.end();
    }
  }
}"
46977,"@Override public void renderErrorResultAndCatchAndLogExceptions(Result result,Context context){
  try {
    if (context.isAsync()) {
      context.returnResultAsync(result);
    }
 else {
      resultHandler.handleResult(result,context);
    }
  }
 catch (  Exception exceptionCausingRenderError) {
    logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",exceptionCausingRenderError);
  }
}","@Override public void renderErrorResultAndCatchAndLogExceptions(Result result,Context context){
  try {
    if (context.isAsync()) {
      context.returnResultAsync(result);
    }
 else {
      resultHandler.handleResult(result,context);
    }
  }
 catch (  Exception exceptionCausingRenderError) {
    logger.error(""String_Node_Str"" + ""String_Node_Str"",exceptionCausingRenderError);
  }
}"
46978,"@Override protected void configure(){
  String persistenceUnitName=ninjaProperties.get(NinjaConstant.PERSISTENCE_UNIT_NAME);
  if (persistenceUnitName != null) {
    String connectionUrl=ninjaProperties.get(NinjaConstant.DB_CONNECTION_URL);
    String connectionUsername=ninjaProperties.get(NinjaConstant.DB_CONNECTION_USERNAME);
    String connectionPassword=ninjaProperties.get(NinjaConstant.DB_CONNECTION_PASSWORD);
    Properties jpaProperties=new Properties();
    if (connectionUrl != null) {
      jpaProperties.put(""String_Node_Str"",connectionUrl);
    }
    if (connectionUsername != null) {
      jpaProperties.put(""String_Node_Str"",connectionUsername);
    }
    if (connectionPassword != null) {
      jpaProperties.put(""String_Node_Str"",connectionPassword);
    }
    install(new JpaPersistModule(persistenceUnitName).properties(jpaProperties));
    UnitOfWorkInterceptor unitOfWorkInterceptor=new UnitOfWorkInterceptor();
    requestInjection(unitOfWorkInterceptor);
    bindInterceptor(annotatedWith(UnitOfWork.class),any(),unitOfWorkInterceptor);
    bindInterceptor(any(),annotatedWith(UnitOfWork.class),unitOfWorkInterceptor);
    bind(JpaInitializer.class).asEagerSingleton();
  }
}","@Override protected void configure(){
  String persistenceUnitName=ninjaProperties.get(NinjaConstant.PERSISTENCE_UNIT_NAME);
  if (persistenceUnitName != null) {
    String connectionUrl=ninjaProperties.get(NinjaConstant.DB_CONNECTION_URL);
    String connectionUsername=ninjaProperties.get(NinjaConstant.DB_CONNECTION_USERNAME);
    String connectionPassword=ninjaProperties.get(NinjaConstant.DB_CONNECTION_PASSWORD);
    Properties jpaProperties=new Properties();
    if (connectionUrl != null) {
      jpaProperties.put(""String_Node_Str"",connectionUrl);
    }
    if (connectionUsername != null) {
      jpaProperties.put(""String_Node_Str"",connectionUsername);
    }
    if (connectionPassword != null) {
      jpaProperties.put(""String_Node_Str"",connectionPassword);
    }
    install(new JpaPersistModule(persistenceUnitName).properties(jpaProperties));
    UnitOfWorkInterceptor unitOfWorkInterceptor=new UnitOfWorkInterceptor(getProvider(com.google.inject.persist.UnitOfWork.class),getProvider(EntityManager.class));
    bindInterceptor(annotatedWith(UnitOfWork.class),any(),unitOfWorkInterceptor);
    bindInterceptor(any(),annotatedWith(UnitOfWork.class),unitOfWorkInterceptor);
    bind(JpaInitializer.class).asEagerSingleton();
  }
}"
46979,"@Override public Object invoke(MethodInvocation invocation) throws Throwable {
  if (null == didWeStartWork.get()) {
    unitOfWork.begin();
    didWeStartWork.set(Boolean.TRUE);
  }
 else {
    return invocation.proceed();
  }
  try {
    return invocation.proceed();
  }
  finally {
    if (null != didWeStartWork.get()) {
      didWeStartWork.remove();
      unitOfWork.end();
    }
  }
}","@Override public Object invoke(MethodInvocation invocation) throws Throwable {
  final UnitOfWork unitOfWork;
  if (entityManagerProvider.get() == null) {
    unitOfWork=unitOfWorkProvider.get();
    unitOfWork.begin();
    didWeStartWork.set(Boolean.TRUE);
  }
 else {
    return invocation.proceed();
  }
  try {
    return invocation.proceed();
  }
  finally {
    if (null != didWeStartWork.get()) {
      didWeStartWork.remove();
      unitOfWork.end();
    }
  }
}"
46980,"@Override protected void configure(){
  String persistenceUnitName=ninjaProperties.get(NinjaConstant.PERSISTENCE_UNIT_NAME);
  if (persistenceUnitName != null) {
    String connectionUrl=ninjaProperties.get(NinjaConstant.DB_CONNECTION_URL);
    String connectionUsername=ninjaProperties.get(NinjaConstant.DB_CONNECTION_USERNAME);
    String connectionPassword=ninjaProperties.get(NinjaConstant.DB_CONNECTION_PASSWORD);
    Properties jpaProperties=new Properties();
    if (connectionUrl != null) {
      jpaProperties.put(""String_Node_Str"",connectionUrl);
    }
    if (connectionUsername != null) {
      jpaProperties.put(""String_Node_Str"",connectionUsername);
    }
    if (connectionPassword != null) {
      jpaProperties.put(""String_Node_Str"",connectionPassword);
    }
    install(new JpaPersistModule(persistenceUnitName).properties(jpaProperties));
    UnitOfWorkInterceptor unitOfWorkInterceptor=new UnitOfWorkInterceptor();
    requestInjection(unitOfWorkInterceptor);
    bindInterceptor(annotatedWith(UnitOfWork.class),any(),unitOfWorkInterceptor);
    bindInterceptor(any(),annotatedWith(UnitOfWork.class),unitOfWorkInterceptor);
    bind(JpaInitializer.class).asEagerSingleton();
  }
}","@Override protected void configure(){
  String persistenceUnitName=ninjaProperties.get(NinjaConstant.PERSISTENCE_UNIT_NAME);
  if (persistenceUnitName != null) {
    String connectionUrl=ninjaProperties.get(NinjaConstant.DB_CONNECTION_URL);
    String connectionUsername=ninjaProperties.get(NinjaConstant.DB_CONNECTION_USERNAME);
    String connectionPassword=ninjaProperties.get(NinjaConstant.DB_CONNECTION_PASSWORD);
    Properties jpaProperties=new Properties();
    if (connectionUrl != null) {
      jpaProperties.put(""String_Node_Str"",connectionUrl);
    }
    if (connectionUsername != null) {
      jpaProperties.put(""String_Node_Str"",connectionUsername);
    }
    if (connectionPassword != null) {
      jpaProperties.put(""String_Node_Str"",connectionPassword);
    }
    install(new JpaPersistModule(persistenceUnitName).properties(jpaProperties));
    UnitOfWorkInterceptor unitOfWorkInterceptor=new UnitOfWorkInterceptor(getProvider(com.google.inject.persist.UnitOfWork.class),getProvider(EntityManager.class));
    bindInterceptor(annotatedWith(UnitOfWork.class),any(),unitOfWorkInterceptor);
    bindInterceptor(any(),annotatedWith(UnitOfWork.class),unitOfWorkInterceptor);
    bind(JpaInitializer.class).asEagerSingleton();
  }
}"
46981,"@Override public Object invoke(MethodInvocation invocation) throws Throwable {
  if (null == didWeStartWork.get()) {
    unitOfWork.begin();
    didWeStartWork.set(Boolean.TRUE);
  }
 else {
    return invocation.proceed();
  }
  try {
    return invocation.proceed();
  }
  finally {
    if (null != didWeStartWork.get()) {
      didWeStartWork.remove();
      unitOfWork.end();
    }
  }
}","@Override public Object invoke(MethodInvocation invocation) throws Throwable {
  final UnitOfWork unitOfWork;
  if (entityManagerProvider.get() == null) {
    unitOfWork=unitOfWorkProvider.get();
    unitOfWork.begin();
    didWeStartWork.set(Boolean.TRUE);
  }
 else {
    return invocation.proceed();
  }
  try {
    return invocation.proceed();
  }
  finally {
    if (null != didWeStartWork.get()) {
      didWeStartWork.remove();
      unitOfWork.end();
    }
  }
}"
46982,"@Override public void contextInitialized(ServletContextEvent servletContextEvent){
  super.contextInitialized(servletContextEvent);
  contextPath=servletContextEvent.getServletContext().getContextPath();
}","@Override public void contextInitialized(ServletContextEvent servletContextEvent){
  contextPath=servletContextEvent.getServletContext().getContextPath();
  super.contextInitialized(servletContextEvent);
}"
46983,"@Override public String getReverseRoute(Class<?> controllerClass,String controllerMethodName,Map<String,Object> parameterMap){
  if (routes == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  for (  Route route : routes) {
    if (route.getControllerClass() != null && route.getControllerClass().equals(controllerClass) && route.getControllerMethod().getName().equals(controllerMethodName)) {
      String urlWithReplacedPlaceholders=route.getUrl();
      Map<String,Object> queryParameterMap=Maps.newHashMap();
      for (      Entry<String,Object> parameterPair : parameterMap.entrySet()) {
        String originalRegex=String.format(""String_Node_Str"",parameterPair.getKey());
        String originalRegexEscaped=String.format(""String_Node_Str"",parameterPair.getKey());
        String resultingRegexReplacement=parameterPair.getValue().toString();
        if (urlWithReplacedPlaceholders.contains(originalRegex)) {
          urlWithReplacedPlaceholders=urlWithReplacedPlaceholders.replaceAll(originalRegexEscaped,resultingRegexReplacement);
        }
 else {
          queryParameterMap.put(parameterPair.getKey(),parameterPair.getValue());
        }
      }
      if (queryParameterMap.entrySet().size() > 0) {
        StringBuffer queryParameterStringBuffer=new StringBuffer();
        for (Iterator<Entry<String,Object>> iterator=queryParameterMap.entrySet().iterator(); iterator.hasNext(); ) {
          Entry<String,Object> queryParameterEntry=iterator.next();
          queryParameterStringBuffer.append(queryParameterEntry.getKey());
          queryParameterStringBuffer.append(""String_Node_Str"");
          queryParameterStringBuffer.append(queryParameterEntry.getValue());
          if (iterator.hasNext()) {
            queryParameterStringBuffer.append(""String_Node_Str"");
          }
        }
        urlWithReplacedPlaceholders=urlWithReplacedPlaceholders + ""String_Node_Str"" + queryParameterStringBuffer.toString();
      }
      String contextPath=ninjaProperties.getContextPath().orNull();
      if (contextPath != null) {
        return contextPath + urlWithReplacedPlaceholders;
      }
      return urlWithReplacedPlaceholders;
    }
  }
  return null;
}","@Override public String getReverseRoute(Class<?> controllerClass,String controllerMethodName,Map<String,Object> parameterMap){
  if (routes == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  for (  Route route : routes) {
    if (route.getControllerClass() != null && route.getControllerClass().equals(controllerClass) && route.getControllerMethod().getName().equals(controllerMethodName)) {
      String urlWithReplacedPlaceholders=route.getUrl();
      Map<String,Object> queryParameterMap=Maps.newHashMap();
      for (      Entry<String,Object> parameterPair : parameterMap.entrySet()) {
        boolean foundAsPathParameter=false;
        StringBuffer stringBuffer=new StringBuffer();
        String buffer=String.format(VARIABLE_PART_PATTERN_WITH_PLACEHOLDER,parameterPair.getKey());
        Pattern PATTERN=Pattern.compile(buffer);
        Matcher matcher=PATTERN.matcher(urlWithReplacedPlaceholders);
        while (matcher.find()) {
          String resultingRegexReplacement=parameterPair.getValue().toString();
          matcher.appendReplacement(stringBuffer,resultingRegexReplacement);
          foundAsPathParameter=true;
        }
        matcher.appendTail(stringBuffer);
        urlWithReplacedPlaceholders=stringBuffer.toString();
        if (!foundAsPathParameter) {
          queryParameterMap.put(parameterPair.getKey(),parameterPair.getValue());
        }
      }
      if (queryParameterMap.entrySet().size() > 0) {
        StringBuffer queryParameterStringBuffer=new StringBuffer();
        for (Iterator<Entry<String,Object>> iterator=queryParameterMap.entrySet().iterator(); iterator.hasNext(); ) {
          Entry<String,Object> queryParameterEntry=iterator.next();
          queryParameterStringBuffer.append(queryParameterEntry.getKey());
          queryParameterStringBuffer.append(""String_Node_Str"");
          queryParameterStringBuffer.append(queryParameterEntry.getValue());
          if (iterator.hasNext()) {
            queryParameterStringBuffer.append(""String_Node_Str"");
          }
        }
        urlWithReplacedPlaceholders=urlWithReplacedPlaceholders + ""String_Node_Str"" + queryParameterStringBuffer.toString();
      }
      if (ninjaProperties.getContextPath().isPresent()) {
        if (!ninjaProperties.getContextPath().get().equals(""String_Node_Str"")) {
          return ninjaProperties.getContextPath().get() + urlWithReplacedPlaceholders;
        }
      }
      return urlWithReplacedPlaceholders;
    }
  }
  return null;
}"
46984,"@Override public void invoke(Context context,Result result){
  Object object=result.getRenderable();
  ResponseStreams responseStreams=context.finalizeHeaders(result);
  Map map;
  if (object == null) {
    map=Maps.newHashMap();
  }
 else   if (object instanceof Map) {
    map=(Map)object;
  }
 else {
    String realClassNameLowerCamelCase=CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL,object.getClass().getSimpleName());
    map=Maps.newHashMap();
    map.put(realClassNameLowerCamelCase,object);
  }
  Optional<String> language=lang.getLanguage(context,Optional.of(result));
  if (language.isPresent()) {
    map.put(""String_Node_Str"",language.get());
  }
  if (!context.getSession().isEmpty()) {
    map.put(""String_Node_Str"",context.getSession().getData());
  }
  map.put(""String_Node_Str"",context.getContextPath());
  map.put(""String_Node_Str"",new TemplateEngineFreemarkerI18nMethod(messages,context,result));
  Map<String,String> translatedFlashCookieMap=Maps.newHashMap();
  for (  Entry<String,String> entry : context.getFlashScope().getCurrentFlashCookieData().entrySet()) {
    String messageValue=null;
    Optional<String> messageValueOptional=messages.get(entry.getValue(),context,Optional.of(result));
    if (!messageValueOptional.isPresent()) {
      messageValue=entry.getValue();
    }
 else {
      messageValue=messageValueOptional.get();
    }
    translatedFlashCookieMap.put(entry.getKey(),messageValue);
  }
  map.put(""String_Node_Str"",translatedFlashCookieMap);
  String templateName=templateEngineHelper.getTemplateForResult(context.getRoute(),result,FILE_SUFFIX);
  try (Writer writer=responseStreams.getWriter()){
    Template freemarkerTemplate=cfg.getTemplate(templateName);
    freemarkerTemplate.process(map,writer);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + templateName,e);
  }
}","@Override public void invoke(Context context,Result result){
  Object object=result.getRenderable();
  ResponseStreams responseStreams=context.finalizeHeaders(result);
  Map map;
  if (object == null) {
    map=Maps.newHashMap();
  }
 else   if (object instanceof Map) {
    map=(Map)object;
  }
 else {
    String realClassNameLowerCamelCase=CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL,object.getClass().getSimpleName());
    map=Maps.newHashMap();
    map.put(realClassNameLowerCamelCase,object);
  }
  Optional<String> language=lang.getLanguage(context,Optional.of(result));
  if (language.isPresent()) {
    map.put(""String_Node_Str"",language.get());
  }
  if (!context.getSession().isEmpty()) {
    map.put(""String_Node_Str"",context.getSession().getData());
  }
  map.put(""String_Node_Str"",context.getContextPath());
  map.put(""String_Node_Str"",new TemplateEngineFreemarkerI18nMethod(messages,context,result));
  map.put(""String_Node_Str"",templateEngineFreemarkerReverseRouteMethod);
  map.put(""String_Node_Str"",templateEngineFreemarkerAssetsAtMethod);
  map.put(""String_Node_Str"",templateEngineFreemarkerWebJarsAtMethod);
  Map<String,String> translatedFlashCookieMap=Maps.newHashMap();
  for (  Entry<String,String> entry : context.getFlashScope().getCurrentFlashCookieData().entrySet()) {
    String messageValue=null;
    Optional<String> messageValueOptional=messages.get(entry.getValue(),context,Optional.of(result));
    if (!messageValueOptional.isPresent()) {
      messageValue=entry.getValue();
    }
 else {
      messageValue=messageValueOptional.get();
    }
    translatedFlashCookieMap.put(entry.getKey(),messageValue);
  }
  map.put(""String_Node_Str"",translatedFlashCookieMap);
  String templateName=templateEngineHelper.getTemplateForResult(context.getRoute(),result,FILE_SUFFIX);
  try (Writer writer=responseStreams.getWriter()){
    Template freemarkerTemplate=cfg.getTemplate(templateName);
    freemarkerTemplate.process(map,writer);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + templateName,e);
  }
}"
46985,"@Inject public TemplateEngineFreemarker(Messages messages,Lang lang,Logger logger,TemplateEngineFreemarkerExceptionHandler templateEngineFreemarkerExceptionHandler,TemplateEngineHelper templateEngineHelper,TemplateEngineManager templateEngineManager,NinjaProperties ninjaProperties) throws Exception {
  this.messages=messages;
  this.lang=lang;
  this.logger=logger;
  this.templateEngineFreemarkerExceptionHandler=templateEngineFreemarkerExceptionHandler;
  this.templateEngineHelper=templateEngineHelper;
  cfg=new Configuration();
  cfg.setIncompatibleImprovements(new Version(2,3,20));
  cfg.setDefaultEncoding(NinjaConstant.UTF_8);
  cfg.setOutputEncoding(NinjaConstant.UTF_8);
  cfg.setTemplateExceptionHandler(templateEngineFreemarkerExceptionHandler);
  String srcDir=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
  if (ninjaProperties.isDev() && new File(srcDir).exists()) {
    try {
      FileTemplateLoader fileTemplateLoader=new FileTemplateLoader(new File(srcDir));
      ClassTemplateLoader classTemplateLoader=new ClassTemplateLoader(this.getClass(),""String_Node_Str"");
      TemplateLoader[] templateLoader=new TemplateLoader[]{fileTemplateLoader,classTemplateLoader};
      MultiTemplateLoader multiTemplateLoader=new MultiTemplateLoader(templateLoader);
      cfg.setTemplateLoader(multiTemplateLoader);
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"" + srcDir,e);
    }
    cfg.setTemplateUpdateDelay(1);
  }
 else {
    cfg.setClassForTemplateLoading(this.getClass(),""String_Node_Str"");
    cfg.setTemplateUpdateDelay(Integer.MAX_VALUE);
    cfg.setSetting(Configuration.CACHE_STORAGE_KEY,""String_Node_Str"");
  }
  cfg.setTemplateLoader(new TemplateEngineFreemarkerEscapedLoader(cfg.getTemplateLoader()));
  cfg.setNumberFormat(""String_Node_Str"");
  BeansWrapper beansWrapper=(BeansWrapper)cfg.getObjectWrapper();
  beansWrapper.setExposeFields(true);
}","@Inject public TemplateEngineFreemarker(Messages messages,Lang lang,Logger logger,TemplateEngineFreemarkerExceptionHandler templateEngineFreemarkerExceptionHandler,TemplateEngineHelper templateEngineHelper,TemplateEngineManager templateEngineManager,TemplateEngineFreemarkerReverseRouteMethod templateEngineFreemarkerReverseRouteMethod,TemplateEngineFreemarkerAssetsAtMethod templateEngineFreemarkerAssetsAtMethod,TemplateEngineFreemarkerWebJarsAtMethod templateEngineFreemarkerWebJarsAtMethod,NinjaProperties ninjaProperties) throws Exception {
  this.messages=messages;
  this.lang=lang;
  this.logger=logger;
  this.templateEngineFreemarkerExceptionHandler=templateEngineFreemarkerExceptionHandler;
  this.templateEngineHelper=templateEngineHelper;
  this.templateEngineFreemarkerReverseRouteMethod=templateEngineFreemarkerReverseRouteMethod;
  this.templateEngineFreemarkerAssetsAtMethod=templateEngineFreemarkerAssetsAtMethod;
  this.templateEngineFreemarkerWebJarsAtMethod=templateEngineFreemarkerWebJarsAtMethod;
  cfg=new Configuration();
  cfg.setIncompatibleImprovements(new Version(2,3,20));
  cfg.setDefaultEncoding(NinjaConstant.UTF_8);
  cfg.setOutputEncoding(NinjaConstant.UTF_8);
  cfg.setTemplateExceptionHandler(templateEngineFreemarkerExceptionHandler);
  String srcDir=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
  if (ninjaProperties.isDev() && new File(srcDir).exists()) {
    try {
      FileTemplateLoader fileTemplateLoader=new FileTemplateLoader(new File(srcDir));
      ClassTemplateLoader classTemplateLoader=new ClassTemplateLoader(this.getClass(),""String_Node_Str"");
      TemplateLoader[] templateLoader=new TemplateLoader[]{fileTemplateLoader,classTemplateLoader};
      MultiTemplateLoader multiTemplateLoader=new MultiTemplateLoader(templateLoader);
      cfg.setTemplateLoader(multiTemplateLoader);
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"" + srcDir,e);
    }
    cfg.setTemplateUpdateDelay(1);
  }
 else {
    cfg.setClassForTemplateLoading(this.getClass(),""String_Node_Str"");
    cfg.setTemplateUpdateDelay(Integer.MAX_VALUE);
    cfg.setSetting(Configuration.CACHE_STORAGE_KEY,""String_Node_Str"");
  }
  cfg.setTemplateLoader(new TemplateEngineFreemarkerEscapedLoader(cfg.getTemplateLoader()));
  cfg.setNumberFormat(""String_Node_Str"");
  BeansWrapper beansWrapper=(BeansWrapper)cfg.getObjectWrapper();
  beansWrapper.setExposeFields(true);
}"
46986,"/** 
 * @return id of a session.
 */
@Override public String getId(){
  if (!data.containsKey(ID_KEY)) {
    data.put(ID_KEY,UUID.randomUUID().toString());
  }
  return data.get(ID_KEY);
}","/** 
 * @return id of a session.
 */
@Override public String getId(){
  if (!data.containsKey(ID_KEY)) {
    put(ID_KEY,UUID.randomUUID().toString());
  }
  return get(ID_KEY);
}"
46987,"/** 
 * @return an authenticity token or generates a new one.
 */
@Override public String getAuthenticityToken(){
  if (!data.containsKey(AUTHENTICITY_KEY)) {
    data.put(AUTHENTICITY_KEY,UUID.randomUUID().toString());
  }
  return data.get(AUTHENTICITY_KEY);
}","/** 
 * @return an authenticity token or generates a new one.
 */
@Override public String getAuthenticityToken(){
  if (!data.containsKey(AUTHENTICITY_KEY)) {
    put(AUTHENTICITY_KEY,UUID.randomUUID().toString());
  }
  return get(AUTHENTICITY_KEY);
}"
46988,"public void handleResult(Result result,Context context){
  if (result == null || result instanceof AsyncResult) {
    return;
  }
  Object objectToBeRendered=result.getRenderable();
  if (objectToBeRendered instanceof Renderable) {
    handleRenderable((Renderable)objectToBeRendered,context,result);
  }
 else {
    if (result.getContentType() == null) {
      result.contentType(context.getAcceptContentType());
    }
    if (!result.getHeaders().containsKey(Result.CACHE_CONTROL)) {
      result.doNotCacheContent();
    }
    if (objectToBeRendered instanceof NoHttpBody) {
      context.finalizeHeaders(result);
    }
 else {
      renderWithTemplateEngine(context,result);
    }
  }
}","public void handleResult(Result result,Context context){
  if (result == null || result instanceof AsyncResult) {
    return;
  }
  Object objectToBeRendered=result.getRenderable();
  if (objectToBeRendered instanceof Renderable) {
    handleRenderable((Renderable)objectToBeRendered,context,result);
  }
 else {
    if (result.getContentType() == null) {
      result.contentType(context.getAcceptContentType());
    }
    if (!result.getHeaders().containsKey(Result.CACHE_CONTROL)) {
      result.doNotCacheContent();
    }
    if (objectToBeRendered instanceof NoHttpBody) {
      context.finalizeHeaders(result);
    }
 else {
      renderWithTemplateEngineOrRaw(context,result);
    }
  }
}"
46989,"/** 
 * This method directly renders the String to the output. It completely bypasses any rendering engine. Thus you can render anything you want. Chaining of resultRaw is NOT supported. Mixing with render() is NOT supported. It is always recommended to implement your own RenderingEngine OR use existing rendering engines. Example: <code> public Result controllerMethod() { String customJson = ""{\""user\"" : \""john@woo.com\""}""; return Results.json().renderRaw(customJson); } </code>
 * @param string The string to render.
 * @return A result that will render the string directly to the output stream.
 */
public Result renderRaw(final String string){
  Renderable renderable=new Renderable(){
    @Override public void render(    Context context,    Result result) throws Exception {
      ResponseStreams resultJsonCustom=context.finalizeHeaders(result);
      OutputStream outputStream=resultJsonCustom.getOutputStream();
      outputStream.write(string.getBytes());
      outputStream.close();
    }
  }
;
  render(renderable);
  return this;
}","/** 
 * This method directly renders the String to the output. It completely bypasses any rendering engine. Thus you can render anything you want. Chaining of resultRaw is NOT supported. Mixing with render() is NOT supported. It is always recommended to implement your own RenderingEngine OR use existing rendering engines. Example: <code> public Result controllerMethod() { String customJson = ""{\""user\"" : \""john@woo.com\""}""; return Results.json().renderRaw(customJson); } </code>
 * @param string The string to render.
 * @return A result that will render the string directly to the output stream.
 */
public Result renderRaw(final String string){
  Renderable renderable=new Renderable(){
    @Override public void render(    Context context,    Result result) throws Exception {
      ResponseStreams resultJsonCustom=context.finalizeHeaders(result);
      try (Writer writer=resultJsonCustom.getWriter()){
        writer.write(string);
      }
 catch (      IOException ioException) {
        logger.error(""String_Node_Str"",ioException);
      }
    }
  }
;
  render(renderable);
  return this;
}"
46990,"@Override public void render(Context context,Result result) throws Exception {
  ResponseStreams resultJsonCustom=context.finalizeHeaders(result);
  OutputStream outputStream=resultJsonCustom.getOutputStream();
  outputStream.write(string.getBytes());
  outputStream.close();
}","@Override public void render(Context context,Result result) throws Exception {
  ResponseStreams resultJsonCustom=context.finalizeHeaders(result);
  try (Writer writer=resultJsonCustom.getWriter()){
    writer.write(string);
  }
 catch (  IOException ioException) {
    logger.error(""String_Node_Str"",ioException);
  }
}"
46991,"private void renderWithTemplateEngineOrRaw(Context context,Result result){
  TemplateEngine templateEngine=templateEngineManager.getTemplateEngineForContentType(result.getContentType());
  if (templateEngine != null) {
    templateEngine.invoke(context,result);
  }
 else {
    if (result.getRenderable() instanceof String) {
      if (result.getContentType() == null) {
        result.contentType(Result.TEXT_PLAIN);
      }
      ResponseStreams responseStreams=context.finalizeHeaders(result);
      try (Writer writer=responseStreams.getWriter()){
        writer.append((String)result.getRenderable());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
 else     if (result.getRenderable() instanceof byte[]) {
      if (result.getContentType() == null) {
        result.contentType(Result.APPLICATION_OCTET_STREAM);
      }
      ResponseStreams responseStreams=context.finalizeHeaders(result);
      try (OutputStream outputStream=responseStreams.getOutputStream()){
        outputStream.write((byte[])result.getRenderable());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
 else {
      context.finalizeHeaders(result);
      throw new IllegalArgumentException(""String_Node_Str"" + result.getContentType());
    }
  }
}","private void renderWithTemplateEngineOrRaw(Context context,Result result){
  TemplateEngine templateEngine=templateEngineManager.getTemplateEngineForContentType(result.getContentType());
  if (templateEngine != null) {
    templateEngine.invoke(context,result);
  }
 else {
    if (result.getRenderable() instanceof String) {
      if (result.getContentType() == null) {
        result.contentType(Result.TEXT_PLAIN);
      }
      ResponseStreams responseStreams=context.finalizeHeaders(result);
      try (Writer writer=responseStreams.getWriter()){
        writer.write((String)result.getRenderable());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
 else     if (result.getRenderable() instanceof byte[]) {
      if (result.getContentType() == null) {
        result.contentType(Result.APPLICATION_OCTET_STREAM);
      }
      ResponseStreams responseStreams=context.finalizeHeaders(result);
      try (OutputStream outputStream=responseStreams.getOutputStream()){
        outputStream.write((byte[])result.getRenderable());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
 else {
      context.finalizeHeaders(result);
      throw new IllegalArgumentException(""String_Node_Str"" + result.getContentType());
    }
  }
}"
46992,"public Result serve(Context context){
  Object renderable=new Renderable(){
    @Override public void render(    Context context,    Result result){
      String finalName=context.getRequestPath().replaceFirst(PUBLIC_PREFIX,""String_Node_Str"");
      URL url=null;
      if (ninjaProperties.isDev()) {
        File possibleFileInSrc=new File(srcDir + File.separator + ASSETS_PREFIX+ finalName);
        if (possibleFileInSrc.exists()) {
          try {
            url=possibleFileInSrc.toURI().toURL();
          }
 catch (          MalformedURLException malformedURLException) {
            logger.error(""String_Node_Str"",malformedURLException);
          }
        }
      }
      if (url == null) {
        url=this.getClass().getClassLoader().getResource(ASSETS_PREFIX + finalName);
      }
      if (url == null) {
        context.finalizeHeaders(Results.notFound());
      }
 else {
        try {
          URLConnection urlConnection=url.openConnection();
          Long lastModified=urlConnection.getLastModified();
          httpCacheToolkit.addEtag(context,result,lastModified);
          if (result.getStatusCode() == Result.SC_304_NOT_MODIFIED) {
            context.finalizeHeaders(result);
          }
 else {
            result.status(200);
            String mimeType=mimeTypes.getContentType(context,finalName);
            if (!mimeType.isEmpty()) {
              result.contentType(mimeType);
            }
            ResponseStreams responseStreams=context.finalizeHeaders(result);
            InputStream inputStream=urlConnection.getInputStream();
            OutputStream outputStream=responseStreams.getOutputStream();
            ByteStreams.copy(inputStream,outputStream);
            IOUtils.closeQuietly(inputStream);
            IOUtils.closeQuietly(outputStream);
          }
        }
 catch (        FileNotFoundException e) {
          logger.error(""String_Node_Str"",e);
        }
catch (        IOException e) {
          logger.error(""String_Node_Str"",e);
        }
      }
    }
  }
;
  return Results.status(200).render(renderable);
}","public Result serve(Context context){
  Object renderable=new Renderable(){
    @Override public void render(    Context context,    Result result){
      String finalName=context.getRequestPath().replaceFirst(PUBLIC_PREFIX,""String_Node_Str"");
      URL url=null;
      if (ninjaProperties.isDev()) {
        File possibleFileInSrc=new File(srcDir + File.separator + ASSETS_PREFIX+ finalName);
        if (possibleFileInSrc.exists()) {
          try {
            url=possibleFileInSrc.toURI().toURL();
          }
 catch (          MalformedURLException malformedURLException) {
            logger.error(""String_Node_Str"",malformedURLException);
          }
        }
      }
      if (url == null) {
        url=this.getClass().getClassLoader().getResource(ASSETS_PREFIX + finalName);
      }
      if (url == null) {
        context.finalizeHeadersWithoutFlashAndSessionCookie(Results.notFound());
      }
 else {
        try {
          URLConnection urlConnection=url.openConnection();
          Long lastModified=urlConnection.getLastModified();
          httpCacheToolkit.addEtag(context,result,lastModified);
          if (result.getStatusCode() == Result.SC_304_NOT_MODIFIED) {
            context.finalizeHeadersWithoutFlashAndSessionCookie(result);
          }
 else {
            result.status(200);
            String mimeType=mimeTypes.getContentType(context,finalName);
            if (!mimeType.isEmpty()) {
              result.contentType(mimeType);
            }
            ResponseStreams responseStreams=context.finalizeHeadersWithoutFlashAndSessionCookie(result);
            InputStream inputStream=urlConnection.getInputStream();
            OutputStream outputStream=responseStreams.getOutputStream();
            ByteStreams.copy(inputStream,outputStream);
            IOUtils.closeQuietly(inputStream);
            IOUtils.closeQuietly(outputStream);
          }
        }
 catch (        FileNotFoundException e) {
          logger.error(""String_Node_Str"",e);
        }
catch (        IOException e) {
          logger.error(""String_Node_Str"",e);
        }
      }
    }
  }
;
  return Results.status(200).render(renderable);
}"
46993,"@Override public void render(Context context,Result result){
  String finalName=context.getRequestPath().replaceFirst(PUBLIC_PREFIX,""String_Node_Str"");
  URL url=null;
  if (ninjaProperties.isDev()) {
    File possibleFileInSrc=new File(srcDir + File.separator + ASSETS_PREFIX+ finalName);
    if (possibleFileInSrc.exists()) {
      try {
        url=possibleFileInSrc.toURI().toURL();
      }
 catch (      MalformedURLException malformedURLException) {
        logger.error(""String_Node_Str"",malformedURLException);
      }
    }
  }
  if (url == null) {
    url=this.getClass().getClassLoader().getResource(ASSETS_PREFIX + finalName);
  }
  if (url == null) {
    context.finalizeHeaders(Results.notFound());
  }
 else {
    try {
      URLConnection urlConnection=url.openConnection();
      Long lastModified=urlConnection.getLastModified();
      httpCacheToolkit.addEtag(context,result,lastModified);
      if (result.getStatusCode() == Result.SC_304_NOT_MODIFIED) {
        context.finalizeHeaders(result);
      }
 else {
        result.status(200);
        String mimeType=mimeTypes.getContentType(context,finalName);
        if (!mimeType.isEmpty()) {
          result.contentType(mimeType);
        }
        ResponseStreams responseStreams=context.finalizeHeaders(result);
        InputStream inputStream=urlConnection.getInputStream();
        OutputStream outputStream=responseStreams.getOutputStream();
        ByteStreams.copy(inputStream,outputStream);
        IOUtils.closeQuietly(inputStream);
        IOUtils.closeQuietly(outputStream);
      }
    }
 catch (    FileNotFoundException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}","@Override public void render(Context context,Result result){
  String finalName=context.getRequestPath().replaceFirst(PUBLIC_PREFIX,""String_Node_Str"");
  URL url=null;
  if (ninjaProperties.isDev()) {
    File possibleFileInSrc=new File(srcDir + File.separator + ASSETS_PREFIX+ finalName);
    if (possibleFileInSrc.exists()) {
      try {
        url=possibleFileInSrc.toURI().toURL();
      }
 catch (      MalformedURLException malformedURLException) {
        logger.error(""String_Node_Str"",malformedURLException);
      }
    }
  }
  if (url == null) {
    url=this.getClass().getClassLoader().getResource(ASSETS_PREFIX + finalName);
  }
  if (url == null) {
    context.finalizeHeadersWithoutFlashAndSessionCookie(Results.notFound());
  }
 else {
    try {
      URLConnection urlConnection=url.openConnection();
      Long lastModified=urlConnection.getLastModified();
      httpCacheToolkit.addEtag(context,result,lastModified);
      if (result.getStatusCode() == Result.SC_304_NOT_MODIFIED) {
        context.finalizeHeadersWithoutFlashAndSessionCookie(result);
      }
 else {
        result.status(200);
        String mimeType=mimeTypes.getContentType(context,finalName);
        if (!mimeType.isEmpty()) {
          result.contentType(mimeType);
        }
        ResponseStreams responseStreams=context.finalizeHeadersWithoutFlashAndSessionCookie(result);
        InputStream inputStream=urlConnection.getInputStream();
        OutputStream outputStream=responseStreams.getOutputStream();
        ByteStreams.copy(inputStream,outputStream);
        IOUtils.closeQuietly(inputStream);
        IOUtils.closeQuietly(outputStream);
      }
    }
 catch (    FileNotFoundException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}"
46994,"/** 
 * Finalizing the headers copies all stuff into the headers. After finalizing the headers you can access the responseStreams.
 */
ResponseStreams finalizeHeaders(Result result);","/** 
 * Finalizing the headers copies all stuff into the headers. It of course also handles Ninja session and Flash information. After finalizing the headers you can access the responseStreams.
 */
ResponseStreams finalizeHeaders(Result result);"
46995,"@Test public void testAssetsController404() throws Exception {
  AssetsController assetsController=new AssetsController(httpCacheToolkit,mimeTypes,ninjaProperties);
  when(contextRenerable.getRequestPath()).thenReturn(""String_Node_Str"");
  Result result2=assetsController.serve(null);
  Renderable renderable=(Renderable)result2.getRenderable();
  Result result=Results.ok();
  renderable.render(contextRenerable,result);
  verify(contextRenerable).finalizeHeaders(resultCaptor.capture());
  assertTrue(resultCaptor.getValue().getStatusCode() == Result.SC_404_NOT_FOUND);
}","@Test public void testAssetsController404() throws Exception {
  AssetsController assetsController=new AssetsController(httpCacheToolkit,mimeTypes,ninjaProperties);
  when(contextRenerable.getRequestPath()).thenReturn(""String_Node_Str"");
  Result result2=assetsController.serve(null);
  Renderable renderable=(Renderable)result2.getRenderable();
  Result result=Results.ok();
  renderable.render(contextRenerable,result);
  verify(contextRenerable).finalizeHeadersWithoutFlashAndSessionCookie(resultCaptor.capture());
  assertTrue(resultCaptor.getValue().getStatusCode() == Result.SC_404_NOT_FOUND);
}"
46996,"@Test public void testAssetsController304NotModified() throws Exception {
  AssetsController assetsController=new AssetsController(httpCacheToolkit,mimeTypes,ninjaProperties);
  when(contextRenerable.getRequestPath()).thenReturn(""String_Node_Str"");
  Result result2=assetsController.serve(null);
  Renderable renderable=(Renderable)result2.getRenderable();
  Result result=Results.ok();
  result.status(Result.SC_304_NOT_MODIFIED);
  renderable.render(contextRenerable,result);
  verify(httpCacheToolkit).addEtag(Mockito.eq(contextRenerable),Mockito.eq(result),Mockito.anyLong());
  verify(contextRenerable).finalizeHeaders(resultCaptor.capture());
  assertEquals(Result.SC_304_NOT_MODIFIED,resultCaptor.getValue().getStatusCode());
}","@Test public void testAssetsController304NotModified() throws Exception {
  AssetsController assetsController=new AssetsController(httpCacheToolkit,mimeTypes,ninjaProperties);
  when(contextRenerable.getRequestPath()).thenReturn(""String_Node_Str"");
  Result result2=assetsController.serve(null);
  Renderable renderable=(Renderable)result2.getRenderable();
  Result result=Results.ok();
  result.status(Result.SC_304_NOT_MODIFIED);
  renderable.render(contextRenerable,result);
  verify(httpCacheToolkit).addEtag(Mockito.eq(contextRenerable),Mockito.eq(result),Mockito.anyLong());
  verify(contextRenerable).finalizeHeadersWithoutFlashAndSessionCookie(resultCaptor.capture());
  assertEquals(Result.SC_304_NOT_MODIFIED,resultCaptor.getValue().getStatusCode());
}"
46997,"@Test public void testAssetsControllerNormalOperationModifiedNoCaching() throws Exception {
  AssetsController assetsController=new AssetsController(httpCacheToolkit,mimeTypes,ninjaProperties);
  Result result=Results.ok();
  when(contextRenerable.getRequestPath()).thenReturn(""String_Node_Str"");
  when(mimeTypes.getContentType(Mockito.eq(contextRenerable),Mockito.anyString())).thenReturn(""String_Node_Str"");
  when(contextRenerable.finalizeHeaders(Mockito.eq(result))).thenReturn(responseStreams);
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  when(responseStreams.getOutputStream()).thenReturn(byteArrayOutputStream);
  Result result2=assetsController.serve(null);
  Renderable renderable=(Renderable)result2.getRenderable();
  renderable.render(contextRenerable,result);
  verify(httpCacheToolkit).addEtag(Mockito.eq(contextRenerable),Mockito.eq(result),Mockito.anyLong());
  verify(contextRenerable).finalizeHeaders(resultCaptor.capture());
  assertEquals(Result.SC_200_OK,resultCaptor.getValue().getStatusCode());
  assertEquals(""String_Node_Str"",result.getContentType());
  assertEquals(""String_Node_Str"",byteArrayOutputStream.toString());
}","@Test public void testAssetsControllerNormalOperationModifiedNoCaching() throws Exception {
  AssetsController assetsController=new AssetsController(httpCacheToolkit,mimeTypes,ninjaProperties);
  Result result=Results.ok();
  when(contextRenerable.getRequestPath()).thenReturn(""String_Node_Str"");
  when(mimeTypes.getContentType(Mockito.eq(contextRenerable),Mockito.anyString())).thenReturn(""String_Node_Str"");
  when(contextRenerable.finalizeHeadersWithoutFlashAndSessionCookie(Mockito.eq(result))).thenReturn(responseStreams);
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  when(responseStreams.getOutputStream()).thenReturn(byteArrayOutputStream);
  Result result2=assetsController.serve(null);
  Renderable renderable=(Renderable)result2.getRenderable();
  renderable.render(contextRenerable,result);
  verify(httpCacheToolkit).addEtag(Mockito.eq(contextRenerable),Mockito.eq(result),Mockito.anyLong());
  verify(contextRenerable).finalizeHeadersWithoutFlashAndSessionCookie(resultCaptor.capture());
  assertEquals(Result.SC_200_OK,resultCaptor.getValue().getStatusCode());
  assertEquals(""String_Node_Str"",result.getContentType());
  assertEquals(""String_Node_Str"",byteArrayOutputStream.toString());
}"
46998,"@Override public ResponseStreams finalizeHeaders(Result result){
  httpServletResponse.setStatus(result.getStatusCode());
  for (  Entry<String,String> header : result.getHeaders().entrySet()) {
    httpServletResponse.addHeader(header.getKey(),header.getValue());
  }
  flashCookie.save(this,result);
  sessionCookie.save(this,result);
  for (  ninja.Cookie cookie : result.getCookies()) {
    httpServletResponse.addCookie(CookieHelper.convertNinjaCookieToServletCookie(cookie));
  }
  if (result.getContentType() != null) {
    httpServletResponse.setContentType(result.getContentType());
  }
  if (result.getCharset() != null) {
    httpServletResponse.setCharacterEncoding(result.getCharset());
  }
 else {
    httpServletResponse.setCharacterEncoding(NinjaConstant.UTF_8);
  }
  ResponseStreamsServlet responseStreamsServlet=new ResponseStreamsServlet();
  responseStreamsServlet.init(httpServletResponse);
  return (ResponseStreams)responseStreamsServlet;
}","@Override public ResponseStreams finalizeHeaders(Result result){
  return finalizeHeaders(result,true);
}"
46999,"@Override public RouteBuilder OPTIONS(){
  RouteBuilderImpl routeBuilder=new RouteBuilderImpl().OPTION();
  allRouteBuilders.add(routeBuilder);
  return routeBuilder;
}","@Override public RouteBuilder OPTIONS(){
  RouteBuilderImpl routeBuilder=new RouteBuilderImpl().OPTIONS();
  allRouteBuilders.add(routeBuilder);
  return routeBuilder;
}"
47000,"public Result serve(Context context){
  Object renderable=new Renderable(){
    @Override public void render(    Context context,    Result result){
      String finalName=context.getRequestPath().replaceFirst(PUBLIC_PREFIX,""String_Node_Str"");
      URL url=null;
      if (ninjaProperties.isDev()) {
        File possibleFileInSrc=new File(srcDir + File.separator + ASSETS_PREFIX+ finalName);
        if (possibleFileInSrc.exists()) {
          try {
            url=possibleFileInSrc.toURI().toURL();
          }
 catch (          MalformedURLException malformedURLException) {
            logger.error(""String_Node_Str"",malformedURLException);
          }
        }
      }
      if (url == null) {
        url=this.getClass().getClassLoader().getResource(ASSETS_PREFIX + finalName);
      }
      if (url == null) {
        context.finalizeHeaders(Results.notFound());
      }
 else {
        try {
          URLConnection urlConnection=url.openConnection();
          Long lastModified=urlConnection.getLastModified();
          httpCacheToolkit.addEtag(context,result,lastModified);
          if (result.getStatusCode() == Result.SC_304_NOT_MODIFIED) {
            context.finalizeHeaders(result);
          }
 else {
            result.status(200);
            String mimeType=mimeTypes.getContentType(context,finalName);
            if (!mimeType.isEmpty()) {
              result.contentType(mimeType);
            }
            ResponseStreams responseStreams=context.finalizeHeaders(result);
            InputStream inputStream=urlConnection.getInputStream();
            OutputStream outputStream=responseStreams.getOutputStream();
            ByteStreams.copy(inputStream,outputStream);
            IOUtils.closeQuietly(inputStream);
            IOUtils.closeQuietly(outputStream);
          }
        }
 catch (        FileNotFoundException e) {
          logger.error(""String_Node_Str"",e);
        }
catch (        IOException e) {
          logger.error(""String_Node_Str"",e);
        }
      }
    }
  }
;
  return Results.status(200).render(renderable);
}","public Result serve(Context context){
  Object renderable=new Renderable(){
    @Override public void render(    Context context,    Result result){
      String finalName=context.getRequestPath().replaceFirst(PUBLIC_PREFIX,""String_Node_Str"");
      URL url=null;
      if (ninjaProperties.isDev()) {
        File possibleFileInSrc=new File(srcDir + File.separator + ASSETS_PREFIX+ finalName);
        if (possibleFileInSrc.exists()) {
          try {
            url=possibleFileInSrc.toURI().toURL();
          }
 catch (          MalformedURLException malformedURLException) {
            logger.error(""String_Node_Str"",malformedURLException);
          }
        }
      }
      if (url == null) {
        url=this.getClass().getClassLoader().getResource(ASSETS_PREFIX + finalName);
      }
      if (url == null) {
        context.finalizeHeadersWithoutFlashAndSessionCookie(Results.notFound());
      }
 else {
        try {
          URLConnection urlConnection=url.openConnection();
          Long lastModified=urlConnection.getLastModified();
          httpCacheToolkit.addEtag(context,result,lastModified);
          if (result.getStatusCode() == Result.SC_304_NOT_MODIFIED) {
            context.finalizeHeadersWithoutFlashAndSessionCookie(result);
          }
 else {
            result.status(200);
            String mimeType=mimeTypes.getContentType(context,finalName);
            if (!mimeType.isEmpty()) {
              result.contentType(mimeType);
            }
            ResponseStreams responseStreams=context.finalizeHeadersWithoutFlashAndSessionCookie(result);
            InputStream inputStream=urlConnection.getInputStream();
            OutputStream outputStream=responseStreams.getOutputStream();
            ByteStreams.copy(inputStream,outputStream);
            IOUtils.closeQuietly(inputStream);
            IOUtils.closeQuietly(outputStream);
          }
        }
 catch (        FileNotFoundException e) {
          logger.error(""String_Node_Str"",e);
        }
catch (        IOException e) {
          logger.error(""String_Node_Str"",e);
        }
      }
    }
  }
;
  return Results.status(200).render(renderable);
}"
