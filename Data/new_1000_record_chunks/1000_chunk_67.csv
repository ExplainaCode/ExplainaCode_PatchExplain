record_number,buggy_code,fixed_code
66001,"public void testCalendarToString_default_dateTime_100ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_100MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class);
  this.assertEquals(control,test);
}","public void testCalendarToString_default_dateTime_100ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_100MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class);
  this.assertEquals(control,test);
}"
66002,"/** 
 * Convert from a Calendar to a String representation of the YearMonth type.
 * @param calendar the calendar to convert
 * @return a Calendar to a String representation of the YearMonth type.
 */
public String toYearMonth(Calendar calendar){
  if (calendar == null) {
    return null;
  }
  return getXMLConversionManager().stringFromCalendar(calendar,XMLConstants.G_YEAR_MONTH_QNAME);
}","/** 
 * Convert from a Calendar to a String representation of the YearMonth type.
 * @param calendar the calendar to convert
 * @return a Calendar to a String representation of the YearMonth type.
 */
public String toYearMonth(Calendar calendar){
  if (calendar == null) {
    return null;
  }
  boolean wasTimezoneQualified=getXMLConversionManager().isTimeZoneQualified();
  getXMLConversionManager().setTimeZoneQualified(false);
  String s=getXMLConversionManager().stringFromCalendar(calendar,XMLConstants.G_YEAR_MONTH_QNAME);
  getXMLConversionManager().setTimeZoneQualified(wasTimezoneQualified);
  return s;
}"
66003,"/** 
 * Convert from a Calendar to a String representation of the YearMonthDay type.
 * @param calendar the calendar to convert
 * @return a Calendar to a String representation of the YearMonthDay type.
 */
public String toYearMonthDay(Calendar calendar){
  if (calendar == null) {
    return null;
  }
  return getXMLConversionManager().stringFromCalendar(calendar,XMLConstants.DATE_QNAME);
}","/** 
 * Convert from a Calendar to a String representation of the YearMonthDay type.
 * @param calendar the calendar to convert
 * @return a Calendar to a String representation of the YearMonthDay type.
 */
public String toYearMonthDay(Calendar calendar){
  if (calendar == null) {
    return null;
  }
  boolean wasTimezoneQualified=getXMLConversionManager().isTimeZoneQualified();
  getXMLConversionManager().setTimeZoneQualified(false);
  String s=getXMLConversionManager().stringFromCalendar(calendar,XMLConstants.DATE_QNAME);
  getXMLConversionManager().setTimeZoneQualified(wasTimezoneQualified);
  return s;
}"
66004,"@Override protected java.sql.Date convertObjectToDate(Object sourceObject) throws ConversionException {
  Object o=sourceObject;
  if (sourceObject instanceof Calendar) {
    o=((Calendar)sourceObject).clone();
  }
  return super.convertObjectToDate(o);
}","protected java.sql.Date convertObjectToDate(Object sourceObject) throws ConversionException {
  Object o=sourceObject;
  if (sourceObject instanceof Calendar) {
    o=((Calendar)sourceObject).clone();
  }
  return super.convertObjectToDate(o);
}"
66005,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  String c_id=null;
  byte[] bytes=null;
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  marshalRecord.closeStartGroupingElements(groupingFragment);
  if (!xPathFragment.isSelfFragment) {
    marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    marshalRecord.closeStartElement();
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      marshalRecord.characters(value);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
        marshalRecord.characters(value);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      String value=XMLConstants.EMPTY_STRING;
      if ((objectValue.getClass() == ClassConstants.ABYTE) || (objectValue.getClass() == ClassConstants.APBYTE)) {
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XPathFragment xmlRootFrag=null;
  if (objectValue instanceof XMLRoot) {
    xmlRootFrag=((XMLRoot)objectValue).getRootFragment();
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  String c_id=null;
  byte[] bytes=null;
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (xmlRootFrag != null) {
      lastFrag=xmlRootFrag;
    }
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  marshalRecord.closeStartGroupingElements(groupingFragment);
  if (xmlRootFrag != null) {
    xPathFragment=xmlRootFrag;
  }
  if (!xPathFragment.isSelfFragment) {
    marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    marshalRecord.closeStartElement();
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      marshalRecord.characters(value);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
        marshalRecord.characters(value);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      String value=XMLConstants.EMPTY_STRING;
      if ((objectValue.getClass() == ClassConstants.ABYTE) || (objectValue.getClass() == ClassConstants.APBYTE)) {
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
66006,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (value instanceof XMLRoot) {
    XMLRoot root=(XMLRoot)value;
    XPathFragment fragment=this.xmlField.getXPathFragment();
    while (fragment != null && !fragment.nameIsText) {
      if (fragment.getNextFragment() == null || fragment.getHasText()) {
        if (fragment.getLocalName().equals(root.getLocalName())) {
          String fragUri=fragment.getNamespaceURI();
          String namespaceUri=root.getNamespaceURI();
          if ((namespaceUri == null && fragUri == null) || (namespaceUri != null && fragUri != null && namespaceUri.equals(fragUri))) {
            return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
          }
        }
      }
      fragment=fragment.getNextFragment();
    }
  }
 else   if (value != null) {
    if (xmlChoiceMapping.getClassToFieldMappings().get(value.getClass()) == this.xmlField) {
      return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
    }
    List<XMLField> sourceFields=xmlChoiceMapping.getClassToSourceFieldsMappings().get(value.getClass());
    if (sourceFields != null && sourceFields.contains(this.xmlField)) {
      return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
    }
  }
  return false;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Class valueClass=null;
  if (value instanceof XMLRoot) {
    XMLRoot root=(XMLRoot)value;
    for (    DatabaseField next : this.xmlChoiceMapping.getFields()) {
      XPathFragment fragment=((XMLField)next).getXPathFragment();
      while (fragment != null && !fragment.nameIsText) {
        if (fragment.getNextFragment() == null || fragment.getHasText()) {
          if (fragment.getLocalName().equals(root.getLocalName())) {
            String fragUri=fragment.getNamespaceURI();
            String namespaceUri=root.getNamespaceURI();
            if ((namespaceUri == null && fragUri == null) || (namespaceUri != null && fragUri != null && namespaceUri.equals(fragUri))) {
              if (next == this.xmlField) {
                return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
              }
 else {
                return false;
              }
            }
          }
        }
        fragment=fragment.getNextFragment();
      }
    }
    valueClass=root.getObject().getClass();
  }
  if (value != null) {
    if (valueClass == null) {
      valueClass=value.getClass();
    }
    if (xmlChoiceMapping.getClassToFieldMappings().get(valueClass) == this.xmlField) {
      return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
    }
    List<XMLField> sourceFields=xmlChoiceMapping.getClassToSourceFieldsMappings().get(valueClass);
    if (sourceFields != null && sourceFields.contains(this.xmlField)) {
      return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
    }
  }
  return false;
}"
66007,"public void testDetachRemovedObject(){
  Employee emp=new Employee();
  emp.setFirstName(""String_Node_Str"");
  emp.setId(71);
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    em.persist(emp);
    commitTransaction(em);
  }
 catch (  RuntimeException re) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw re;
  }
  beginTransaction(em);
  em.remove(em.find(Employee.class,emp.getId()));
  commitTransaction(em);
  beginTransaction(em);
  EntityManagerImpl em1=(EntityManagerImpl)em.getDelegate();
  try {
    em.detach(emp);
    UnitOfWork uow=em1.getUnitOfWork();
    UnitOfWorkImpl uowImpl=(UnitOfWorkImpl)uow;
    boolean afterClear=uowImpl.getDeletedObjects().containsKey(emp);
    assertFalse(""String_Node_Str"",afterClear);
  }
 catch (  IllegalArgumentException iae) {
    return;
  }
 finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}","public void testDetachRemovedObject(){
  Employee emp=new Employee();
  emp.setFirstName(""String_Node_Str"");
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    em.persist(emp);
    commitTransaction(em);
  }
 catch (  RuntimeException re) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw re;
  }
  beginTransaction(em);
  em.remove(em.find(Employee.class,emp.getId()));
  commitTransaction(em);
  beginTransaction(em);
  EntityManagerImpl em1=(EntityManagerImpl)em.getDelegate();
  try {
    em.detach(emp);
    UnitOfWork uow=em1.getUnitOfWork();
    UnitOfWorkImpl uowImpl=(UnitOfWorkImpl)uow;
    boolean afterClear=uowImpl.getDeletedObjects().containsKey(emp);
    assertFalse(""String_Node_Str"",afterClear);
  }
 catch (  IllegalArgumentException iae) {
    return;
  }
 finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}"
66008,"public void addGlobalElements(HashMap<QName,ElementDeclaration> additionalElements){
  for (  Entry<QName,ElementDeclaration> entry : additionalElements.entrySet()) {
    QName next=entry.getKey();
    if (next != null) {
      ElementDeclaration nextElement=entry.getValue();
      if (nextElement.getScopeClass() == GLOBAL.class) {
        String namespaceURI=next.getNamespaceURI();
        Schema targetSchema=getSchemaForNamespace(namespaceURI);
        if (targetSchema == null) {
          break;
        }
        if (targetSchema.getTopLevelElements().get(next.getLocalPart()) == null) {
          Element element=new Element();
          element.setName(next.getLocalPart());
          JavaClass javaClass=nextElement.getJavaType();
          QName schemaType=(QName)helper.getXMLToJavaTypeMap().get(javaClass.getRawName());
          if (schemaType != null) {
            element.setType(XMLConstants.SCHEMA_PREFIX + COLON + schemaType.getLocalPart());
          }
 else           if (areEquals(javaClass,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(javaClass,byte[].class) || areEquals(javaClass,Byte[].class)|| areEquals(javaClass,Image.class)|| areEquals(javaClass,Source.class)|| areEquals(javaClass,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
            schemaType=XMLConstants.BASE_64_BINARY_QNAME;
            if (nextElement.getTypeMappingInfo() != null) {
              if (nextElement.isXmlAttachmentRef()) {
                schemaType=XMLConstants.SWA_REF_QNAME;
              }
              if (nextElement.getXmlMimeType() != null) {
                element.getAttributesMap().put(XMLConstants.EXPECTED_CONTENT_TYPES_QNAME,nextElement.getXmlMimeType());
              }
            }
            String prefix=getOrGeneratePrefixForNamespace(schemaType.getNamespaceURI(),targetSchema);
            element.setType(prefix + COLON + schemaType.getLocalPart());
          }
 else           if (areEquals(javaClass,ClassConstants.XML_GREGORIAN_CALENDAR)) {
            schemaType=XMLConstants.ANY_SIMPLE_TYPE_QNAME;
            element.setType(XMLConstants.SCHEMA_PREFIX + COLON + schemaType.getLocalPart());
          }
 else {
            TypeInfo type=(TypeInfo)this.typeInfo.get(javaClass.getQualifiedName());
            if (type != null) {
              String typeName=null;
              if (type.isComplexType()) {
                typeName=type.getComplexType().getName();
              }
 else {
                typeName=type.getSimpleType().getName();
              }
              if (typeName == null) {
                Schema schema=getSchemaForNamespace(next.getNamespaceURI());
                ComplexType cType=new ComplexType();
                TypeDefParticle particle=new Sequence();
                cType.setTypeDefParticle(particle);
                element.setComplexType(cType);
                addToSchemaType(type,type.getPropertyList(),particle,cType,schema);
                targetSchema=schema;
              }
 else {
                if (type.getClassNamespace().equals(namespaceURI)) {
                  String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(namespaceURI);
                  if (prefix != null && !(prefix.equals(EMPTY_STRING))) {
                    element.setType(prefix + COLON + typeName);
                  }
 else {
                    element.setType(typeName);
                  }
                }
 else {
                  Schema complexTypeSchema=getSchemaForNamespace(type.getClassNamespace());
                  String complexTypeSchemaNS=type.getClassNamespace();
                  if (complexTypeSchemaNS == null) {
                    complexTypeSchemaNS=EMPTY_STRING;
                  }
                  addImportIfRequired(targetSchema,complexTypeSchema,type.getClassNamespace());
                  String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(complexTypeSchemaNS);
                  if (prefix != null) {
                    element.setType(prefix + COLON + typeName);
                  }
 else {
                    element.setType(typeName);
                  }
                }
              }
            }
          }
          if (nextElement.getSubstitutionHead() != null) {
            String subLocal=nextElement.getSubstitutionHead().getLocalPart();
            String subNamespace=nextElement.getSubstitutionHead().getNamespaceURI();
            String prefix=getPrefixForNamespace(subNamespace,targetSchema.getNamespaceResolver());
            if (prefix == null || prefix.equals(EMPTY_STRING)) {
              element.setSubstitutionGroup(subLocal);
            }
 else {
              element.setSubstitutionGroup(prefix + COLON + subLocal);
            }
          }
          targetSchema.addTopLevelElement(element);
          SchemaTypeInfo info=this.schemaTypeInfo.get(javaClass.getQualifiedName());
          if (info == null) {
            info=new SchemaTypeInfo();
            info.setSchemaTypeName(schemaType);
            schemaTypeInfo.put(javaClass.getQualifiedName(),info);
          }
          info.getGlobalElementDeclarations().add(next);
        }
      }
    }
  }
}","public void addGlobalElements(HashMap<QName,ElementDeclaration> additionalElements){
  for (  Entry<QName,ElementDeclaration> entry : additionalElements.entrySet()) {
    QName next=entry.getKey();
    if (next != null) {
      ElementDeclaration nextElement=entry.getValue();
      if (nextElement.getScopeClass() == GLOBAL.class) {
        String namespaceURI=next.getNamespaceURI();
        Schema targetSchema=getSchemaForNamespace(namespaceURI);
        if (targetSchema == null) {
          continue;
        }
        if (targetSchema.getTopLevelElements().get(next.getLocalPart()) == null) {
          Element element=new Element();
          element.setName(next.getLocalPart());
          JavaClass javaClass=nextElement.getJavaType();
          QName schemaType=(QName)helper.getXMLToJavaTypeMap().get(javaClass.getRawName());
          if (schemaType != null) {
            element.setType(XMLConstants.SCHEMA_PREFIX + COLON + schemaType.getLocalPart());
          }
 else           if (areEquals(javaClass,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(javaClass,byte[].class) || areEquals(javaClass,Byte[].class)|| areEquals(javaClass,Image.class)|| areEquals(javaClass,Source.class)|| areEquals(javaClass,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
            schemaType=XMLConstants.BASE_64_BINARY_QNAME;
            if (nextElement.getTypeMappingInfo() != null) {
              if (nextElement.isXmlAttachmentRef()) {
                schemaType=XMLConstants.SWA_REF_QNAME;
              }
              if (nextElement.getXmlMimeType() != null) {
                element.getAttributesMap().put(XMLConstants.EXPECTED_CONTENT_TYPES_QNAME,nextElement.getXmlMimeType());
              }
            }
            String prefix=getOrGeneratePrefixForNamespace(schemaType.getNamespaceURI(),targetSchema);
            element.setType(prefix + COLON + schemaType.getLocalPart());
          }
 else           if (areEquals(javaClass,ClassConstants.XML_GREGORIAN_CALENDAR)) {
            schemaType=XMLConstants.ANY_SIMPLE_TYPE_QNAME;
            element.setType(XMLConstants.SCHEMA_PREFIX + COLON + schemaType.getLocalPart());
          }
 else {
            TypeInfo type=(TypeInfo)this.typeInfo.get(javaClass.getQualifiedName());
            if (type != null) {
              String typeName=null;
              if (type.isComplexType()) {
                typeName=type.getComplexType().getName();
              }
 else {
                typeName=type.getSimpleType().getName();
              }
              if (typeName == null) {
                Schema schema=getSchemaForNamespace(next.getNamespaceURI());
                ComplexType cType=new ComplexType();
                TypeDefParticle particle=new Sequence();
                cType.setTypeDefParticle(particle);
                element.setComplexType(cType);
                addToSchemaType(type,type.getPropertyList(),particle,cType,schema);
                targetSchema=schema;
              }
 else {
                if (type.getClassNamespace().equals(namespaceURI)) {
                  String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(namespaceURI);
                  if (prefix != null && !(prefix.equals(EMPTY_STRING))) {
                    element.setType(prefix + COLON + typeName);
                  }
 else {
                    element.setType(typeName);
                  }
                }
 else {
                  Schema complexTypeSchema=getSchemaForNamespace(type.getClassNamespace());
                  String complexTypeSchemaNS=type.getClassNamespace();
                  if (complexTypeSchemaNS == null) {
                    complexTypeSchemaNS=EMPTY_STRING;
                  }
                  addImportIfRequired(targetSchema,complexTypeSchema,type.getClassNamespace());
                  String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(complexTypeSchemaNS);
                  if (prefix != null) {
                    element.setType(prefix + COLON + typeName);
                  }
 else {
                    element.setType(typeName);
                  }
                }
              }
            }
          }
          if (nextElement.getSubstitutionHead() != null) {
            String subLocal=nextElement.getSubstitutionHead().getLocalPart();
            String subNamespace=nextElement.getSubstitutionHead().getNamespaceURI();
            String prefix=getPrefixForNamespace(subNamespace,targetSchema.getNamespaceResolver());
            if (prefix == null || prefix.equals(EMPTY_STRING)) {
              element.setSubstitutionGroup(subLocal);
            }
 else {
              element.setSubstitutionGroup(prefix + COLON + subLocal);
            }
          }
          targetSchema.addTopLevelElement(element);
          SchemaTypeInfo info=this.schemaTypeInfo.get(javaClass.getQualifiedName());
          if (info == null) {
            info=new SchemaTypeInfo();
            info.setSchemaTypeName(schemaType);
            schemaTypeInfo.put(javaClass.getQualifiedName(),info);
          }
          info.getGlobalElementDeclarations().add(next);
        }
      }
    }
  }
}"
66009,"/** 
 * Return the type name for an Element based on a given property.  
 * @param property the Property that the type name will be based on
 * @param schema the schema currently being built
 * @param javaClass the given Property's 'actual' type
 * @param element the element being generated for the given Property
 * @return a type name based on the given Property, or null if not obtainable
 */
private String getTypeNameForElement(Property property,Schema schema,JavaClass javaClass,Element element){
  String typeName=null;
  if (property.isXmlId()) {
    typeName=XMLConstants.SCHEMA_PREFIX + COLON + ID;
  }
 else   if (property.isXmlIdRef()) {
    typeName=XMLConstants.SCHEMA_PREFIX + COLON + IDREF;
  }
 else {
    TypeInfo info=(TypeInfo)typeInfo.get(javaClass.getQualifiedName());
    if (info != null) {
      if (info.isComplexType()) {
        typeName=info.getComplexType().getName();
      }
 else       if (info.getSimpleType() != null) {
        typeName=info.getSimpleType().getName();
      }
 else {
        typeName=info.getSchemaTypeName();
      }
      if (typeName == null) {
        if (!info.hasRootElement()) {
          if (info.isComplexType()) {
            element.setComplexType(info.getComplexType());
          }
 else {
            element.setSimpleType(info.getSimpleType());
          }
        }
      }
 else {
        if (addImportIfRequired(schema,info.getSchema(),info.getClassNamespace())) {
          String prefix=schema.getNamespaceResolver().resolveNamespaceURI(info.getClassNamespace());
          if (prefix != null && (!typeName.equals(EMPTY_STRING))) {
            typeName=prefix + COLON + typeName;
          }
        }
      }
    }
 else     if (!property.isMap()) {
      typeName=getTypeName(property,javaClass,schema);
    }
    if (typeName != null && !typeName.contains(COLON)) {
      String prefix;
      if (info.getClassNamespace().equals(XMLConstants.SCHEMA_URL)) {
        prefix=XMLConstants.SCHEMA_PREFIX;
      }
 else {
        prefix=getPrefixForNamespace(info.getSchema().getTargetNamespace(),schema.getNamespaceResolver());
      }
      if (prefix != null) {
        typeName=prefix + COLON + typeName;
      }
    }
  }
  return typeName;
}","/** 
 * Return the type name for an Element based on a given property.  
 * @param property the Property that the type name will be based on
 * @param schema the schema currently being built
 * @param javaClass the given Property's 'actual' type
 * @param element the element being generated for the given Property
 * @return a type name based on the given Property, or null if not obtainable
 */
private String getTypeNameForElement(Property property,Schema schema,JavaClass javaClass,Element element){
  String typeName=null;
  if (property.isXmlId()) {
    typeName=XMLConstants.SCHEMA_PREFIX + COLON + ID;
  }
 else   if (property.isXmlIdRef()) {
    typeName=XMLConstants.SCHEMA_PREFIX + COLON + IDREF;
  }
 else {
    TypeInfo info=(TypeInfo)typeInfo.get(javaClass.getQualifiedName());
    if (info != null) {
      if (info.isComplexType()) {
        typeName=info.getComplexType().getName();
      }
 else       if (info.getSimpleType() != null) {
        typeName=info.getSimpleType().getName();
      }
 else {
        typeName=info.getSchemaTypeName();
      }
      if (typeName == null) {
        if (!info.hasRootElement()) {
          if (info.isComplexType()) {
            element.setComplexType(info.getComplexType());
          }
 else {
            element.setSimpleType(info.getSimpleType());
          }
        }
      }
 else {
        if (addImportIfRequired(schema,info.getSchema(),info.getClassNamespace())) {
          String prefix=schema.getNamespaceResolver().resolveNamespaceURI(info.getClassNamespace());
          if (prefix != null && (!typeName.equals(EMPTY_STRING))) {
            typeName=prefix + COLON + typeName;
          }
        }
      }
    }
 else     if (!property.isMap()) {
      typeName=getTypeName(property,javaClass,schema);
    }
    if (typeName != null && !typeName.contains(COLON)) {
      String prefix;
      if (info.getClassNamespace().equals(XMLConstants.SCHEMA_URL)) {
        prefix=XMLConstants.SCHEMA_PREFIX;
      }
 else {
        prefix=getPrefixForNamespace(info.getClassNamespace(),schema.getNamespaceResolver());
      }
      if (prefix != null) {
        typeName=prefix + COLON + typeName;
      }
    }
  }
  return typeName;
}"
66010,"private void processPropertyAnnotations(TypeInfo info,JavaClass cls,JavaHasAnnotations javaHasAnnotations,Property property){
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlMixed.class)) {
    info.setMixed(true);
    property.setMixedContent(true);
  }
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlContainerProperty.class)) {
    XmlContainerProperty container=(XmlContainerProperty)helper.getAnnotation(javaHasAnnotations,XmlContainerProperty.class);
    property.setInverseReferencePropertyName(container.value());
    property.setInverseReferencePropertyGetMethodName(container.getMethodName());
    property.setInverseReferencePropertySetMethodName(container.setMethodName());
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlInverseReference.class)) {
    XmlInverseReference inverseReference=(XmlInverseReference)helper.getAnnotation(javaHasAnnotations,XmlInverseReference.class);
    property.setInverseReferencePropertyName(inverseReference.mappedBy());
    TypeInfo targetInfo=this.getTypeInfo().get(property.getActualType().getName());
    if (targetInfo != null && targetInfo.getXmlAccessType() == XmlAccessType.PROPERTY) {
      String propName=property.getPropertyName();
      propName=Character.toUpperCase(propName.charAt(0)) + propName.substring(1);
      property.setInverseReferencePropertyGetMethodName(GET_STR + propName);
      property.setInverseReferencePropertySetMethodName(SET_STR + propName);
    }
    property.setInverseReference(true);
  }
  processXmlJavaTypeAdapter(property,info,cls);
  processXmlElement(property,info);
  JavaClass ptype=property.getActualType();
  if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
    property.setIsSwaAttachmentRef(true);
    property.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
 else   if (isMtomAttachment(property)) {
    property.setIsMtomAttachment(true);
    property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
    property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlInlineBinaryData.class) || info.isBinaryDataToBeInlined()) {
    property.setisInlineBinaryData(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
    XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
    QName schemaTypeQname=new QName(schemaType.namespace(),schemaType.name());
    property.setSchemaType(schemaTypeQname);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class)) {
    property.setIsAttribute(true);
    property.setIsRequired(((XmlAttribute)helper.getAnnotation(property.getElement(),XmlAttribute.class)).required());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
    if (info.isSetAnyAttributePropertyName()) {
      throw org.eclipse.persistence.exceptions.JAXBException.multipleAnyAttributeMapping(cls.getName());
    }
    if (!property.getType().getName().equals(""String_Node_Str"")) {
      throw org.eclipse.persistence.exceptions.JAXBException.anyAttributeOnNonMap(property.getPropertyName());
    }
    property.setIsAnyAttribute(true);
    info.setAnyAttributePropertyName(property.getPropertyName());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlElementWrapper.class)) {
    XmlElementWrapper wrapper=(XmlElementWrapper)helper.getAnnotation(property.getElement(),XmlElementWrapper.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper xmlEltWrapper=new org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper();
    xmlEltWrapper.setName(wrapper.name());
    xmlEltWrapper.setNamespace(wrapper.namespace());
    xmlEltWrapper.setNillable(wrapper.nillable());
    xmlEltWrapper.setRequired(wrapper.required());
    property.setXmlElementWrapper(xmlEltWrapper);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlList.class)) {
    if (!isCollectionType(property) && !property.getType().isArray()) {
      throw JAXBException.invalidList(property.getPropertyName());
    }
    property.setIsXmlList(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlValue.class)) {
    property.setIsXmlValue(true);
    info.setXmlValueProperty(property);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlReadOnly.class)) {
    property.setReadOnly(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlWriteOnly.class)) {
    property.setWriteOnly(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlCDATA.class)) {
    property.setCdata(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAccessMethods.class)) {
    XmlAccessMethods accessMethods=(XmlAccessMethods)helper.getAnnotation(property.getElement(),XmlAccessMethods.class);
    if (!(accessMethods.getMethodName().equals(EMPTY_STRING))) {
      property.setGetMethodName(accessMethods.getMethodName());
    }
    if (!(accessMethods.setMethodName().equals(EMPTY_STRING))) {
      property.setSetMethodName(accessMethods.setMethodName());
    }
    if (!(property.isMethodProperty())) {
      property.setMethodProperty(true);
    }
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlProperties.class)) {
    XmlProperties xmlProperties=(XmlProperties)helper.getAnnotation(property.getElement(),XmlProperties.class);
    Map<Object,Object> propertiesMap=createUserPropertiesMap(xmlProperties.value());
    property.setUserProperties(propertiesMap);
  }
 else   if (helper.isAnnotationPresent(property.getElement(),XmlProperty.class)) {
    XmlProperty xmlProperty=(XmlProperty)helper.getAnnotation(property.getElement(),XmlProperty.class);
    Map<Object,Object> propertiesMap=createUserPropertiesMap(new XmlProperty[]{xmlProperty});
    property.setUserProperties(propertiesMap);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlKey.class)) {
    info.addXmlKeyProperty(property);
  }
  processXmlJoinNodes(property);
  processXmlNullPolicy(property);
}","private void processPropertyAnnotations(TypeInfo info,JavaClass cls,JavaHasAnnotations javaHasAnnotations,Property property){
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlMixed.class)) {
    info.setMixed(true);
    property.setMixedContent(true);
  }
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlContainerProperty.class)) {
    XmlContainerProperty container=(XmlContainerProperty)helper.getAnnotation(javaHasAnnotations,XmlContainerProperty.class);
    property.setInverseReferencePropertyName(container.value());
    property.setInverseReferencePropertyGetMethodName(container.getMethodName());
    property.setInverseReferencePropertySetMethodName(container.setMethodName());
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlInverseReference.class)) {
    XmlInverseReference inverseReference=(XmlInverseReference)helper.getAnnotation(javaHasAnnotations,XmlInverseReference.class);
    property.setInverseReferencePropertyName(inverseReference.mappedBy());
    TypeInfo targetInfo=this.getTypeInfo().get(property.getActualType().getName());
    if (targetInfo != null && targetInfo.getXmlAccessType() == XmlAccessType.PROPERTY) {
      String propName=property.getPropertyName();
      propName=Character.toUpperCase(propName.charAt(0)) + propName.substring(1);
      property.setInverseReferencePropertyGetMethodName(GET_STR + propName);
      property.setInverseReferencePropertySetMethodName(SET_STR + propName);
    }
    property.setInverseReference(true);
  }
  processXmlJavaTypeAdapter(property,info,cls);
  if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
    property.setIsSwaAttachmentRef(true);
    property.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
  processXmlElement(property,info);
  if (!(property.isSwaAttachmentRef()) && isMtomAttachment(property)) {
    property.setIsMtomAttachment(true);
    property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
    property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlInlineBinaryData.class) || info.isBinaryDataToBeInlined()) {
    property.setisInlineBinaryData(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
    XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
    QName schemaTypeQname=new QName(schemaType.namespace(),schemaType.name());
    property.setSchemaType(schemaTypeQname);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class)) {
    property.setIsAttribute(true);
    property.setIsRequired(((XmlAttribute)helper.getAnnotation(property.getElement(),XmlAttribute.class)).required());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
    if (info.isSetAnyAttributePropertyName()) {
      throw org.eclipse.persistence.exceptions.JAXBException.multipleAnyAttributeMapping(cls.getName());
    }
    if (!property.getType().getName().equals(""String_Node_Str"")) {
      throw org.eclipse.persistence.exceptions.JAXBException.anyAttributeOnNonMap(property.getPropertyName());
    }
    property.setIsAnyAttribute(true);
    info.setAnyAttributePropertyName(property.getPropertyName());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlElementWrapper.class)) {
    XmlElementWrapper wrapper=(XmlElementWrapper)helper.getAnnotation(property.getElement(),XmlElementWrapper.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper xmlEltWrapper=new org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper();
    xmlEltWrapper.setName(wrapper.name());
    xmlEltWrapper.setNamespace(wrapper.namespace());
    xmlEltWrapper.setNillable(wrapper.nillable());
    xmlEltWrapper.setRequired(wrapper.required());
    property.setXmlElementWrapper(xmlEltWrapper);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlList.class)) {
    if (!isCollectionType(property) && !property.getType().isArray()) {
      throw JAXBException.invalidList(property.getPropertyName());
    }
    property.setIsXmlList(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlValue.class)) {
    property.setIsXmlValue(true);
    info.setXmlValueProperty(property);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlReadOnly.class)) {
    property.setReadOnly(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlWriteOnly.class)) {
    property.setWriteOnly(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlCDATA.class)) {
    property.setCdata(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAccessMethods.class)) {
    XmlAccessMethods accessMethods=(XmlAccessMethods)helper.getAnnotation(property.getElement(),XmlAccessMethods.class);
    if (!(accessMethods.getMethodName().equals(EMPTY_STRING))) {
      property.setGetMethodName(accessMethods.getMethodName());
    }
    if (!(accessMethods.setMethodName().equals(EMPTY_STRING))) {
      property.setSetMethodName(accessMethods.setMethodName());
    }
    if (!(property.isMethodProperty())) {
      property.setMethodProperty(true);
    }
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlProperties.class)) {
    XmlProperties xmlProperties=(XmlProperties)helper.getAnnotation(property.getElement(),XmlProperties.class);
    Map<Object,Object> propertiesMap=createUserPropertiesMap(xmlProperties.value());
    property.setUserProperties(propertiesMap);
  }
 else   if (helper.isAnnotationPresent(property.getElement(),XmlProperty.class)) {
    XmlProperty xmlProperty=(XmlProperty)helper.getAnnotation(property.getElement(),XmlProperty.class);
    Map<Object,Object> propertiesMap=createUserPropertiesMap(new XmlProperty[]{xmlProperty});
    property.setUserProperties(propertiesMap);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlKey.class)) {
    info.addXmlKeyProperty(property);
  }
  processXmlJoinNodes(property);
  processXmlNullPolicy(property);
}"
66011,"/** 
 * Process @XmlElement annotation on a given property.
 * @param property
 */
private void processXmlElement(Property property,TypeInfo info){
  if (helper.isAnnotationPresent(property.getElement(),XmlElement.class)) {
    XmlElement element=(XmlElement)helper.getAnnotation(property.getElement(),XmlElement.class);
    property.setIsRequired(element.required());
    property.setNillable(element.nillable());
    if (element.type() != XmlElement.DEFAULT.class) {
      property.setOriginalType(property.getType());
      if (isCollectionType(property.getType())) {
        property.setGenericType(helper.getJavaClass(element.type()));
      }
 else {
        property.setType(helper.getJavaClass(element.type()));
      }
      property.setHasXmlElementType(true);
    }
    if (!element.defaultValue().equals(ELEMENT_DECL_DEFAULT)) {
      property.setDefaultValue(element.defaultValue());
    }
    validateElementIsInPropOrder(info,property.getPropertyName());
  }
}","/** 
 * Process @XmlElement annotation on a given property.
 * @param property
 */
private void processXmlElement(Property property,TypeInfo info){
  if (helper.isAnnotationPresent(property.getElement(),XmlElement.class)) {
    XmlElement element=(XmlElement)helper.getAnnotation(property.getElement(),XmlElement.class);
    property.setIsRequired(element.required());
    property.setNillable(element.nillable());
    if (element.type() != XmlElement.DEFAULT.class && !(property.isSwaAttachmentRef())) {
      property.setOriginalType(property.getType());
      if (isCollectionType(property.getType())) {
        property.setGenericType(helper.getJavaClass(element.type()));
      }
 else {
        property.setType(helper.getJavaClass(element.type()));
      }
      property.setHasXmlElementType(true);
    }
    if (!element.defaultValue().equals(ELEMENT_DECL_DEFAULT)) {
      property.setDefaultValue(element.defaultValue());
    }
    validateElementIsInPropOrder(info,property.getPropertyName());
  }
}"
66012,"public void createElementsForTypeMappingInfo(){
  if (this.javaClassToTypeMappingInfos != null && !this.javaClassToTypeMappingInfos.isEmpty()) {
    Set<JavaClass> classes=this.javaClassToTypeMappingInfos.keySet();
    for (    JavaClass nextClass : classes) {
      TypeMappingInfo nextInfo=this.javaClassToTypeMappingInfos.get(nextClass);
      if (nextInfo != null) {
        boolean xmlAttachmentRef=false;
        String xmlMimeType=null;
        java.lang.annotation.Annotation[] annotations=getAnnotations(nextInfo);
        Class adapterClass=this.typeMappingInfoToAdapterClasses.get(nextInfo);
        Class declJavaType=null;
        if (adapterClass != null) {
          declJavaType=CompilerHelper.getTypeFromAdapterClass(adapterClass);
        }
        if (annotations != null) {
          for (int j=0; j < annotations.length; j++) {
            java.lang.annotation.Annotation nextAnnotation=annotations[j];
            if (nextAnnotation != null) {
              if (nextAnnotation instanceof XmlMimeType) {
                XmlMimeType javaAnnotation=(XmlMimeType)nextAnnotation;
                xmlMimeType=javaAnnotation.value();
              }
 else               if (nextAnnotation instanceof XmlAttachmentRef) {
                xmlAttachmentRef=true;
              }
            }
          }
        }
        QName qname=null;
        String nextClassName=nextClass.getQualifiedName();
        if (declJavaType != null) {
          nextClassName=declJavaType.getCanonicalName();
        }
        if (typeMappingInfoToGeneratedClasses != null) {
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            nextClassName=generatedClass.getCanonicalName();
          }
        }
        TypeInfo nextTypeInfo=typeInfo.get(nextClassName);
        if (nextTypeInfo != null) {
          qname=new QName(nextTypeInfo.getClassNamespace(),nextTypeInfo.getSchemaTypeName());
        }
 else {
          qname=getUserDefinedSchemaTypes().get(nextClassName);
          if (qname == null) {
            if (nextClassName.equals(ClassConstants.APBYTE.getName()) || nextClassName.equals(Image.class.getName()) || nextClassName.equals(Source.class.getName())|| nextClassName.equals(""String_Node_Str"")) {
              if (xmlAttachmentRef) {
                qname=XMLConstants.SWA_REF_QNAME;
              }
 else {
                qname=XMLConstants.BASE_64_BINARY_QNAME;
              }
            }
 else             if (nextClassName.equals(ClassConstants.OBJECT.getName())) {
              qname=XMLConstants.ANY_TYPE_QNAME;
            }
 else             if (nextClassName.equals(ClassConstants.XML_GREGORIAN_CALENDAR.getName())) {
              qname=XMLConstants.ANY_SIMPLE_TYPE_QNAME;
            }
 else {
              Class theClass=helper.getClassForJavaClass(nextClass);
              qname=(QName)XMLConversionManager.getDefaultJavaTypes().get(theClass);
            }
          }
        }
        if (qname != null) {
          typeMappingInfoToSchemaType.put(nextInfo,qname);
        }
        if (nextInfo.getXmlTagName() != null) {
          ElementDeclaration element=new ElementDeclaration(nextInfo.getXmlTagName(),nextClass,nextClass.getQualifiedName(),false);
          element.setTypeMappingInfo(nextInfo);
          element.setXmlMimeType(xmlMimeType);
          element.setXmlAttachmentRef(xmlAttachmentRef);
          if (declJavaType != null) {
            element.setJavaType(helper.getJavaClass(declJavaType));
          }
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            element.setJavaType(helper.getJavaClass(generatedClass));
          }
          if (nextInfo.getElementScope() == TypeMappingInfo.ElementScope.Global) {
            this.getGlobalElements().put(element.getElementName(),element);
          }
 else {
            this.localElements.add(element);
          }
          String rootNamespace=element.getElementName().getNamespaceURI();
          if (rootNamespace == null) {
            rootNamespace=XMLConstants.EMPTY_STRING;
          }
          if (rootNamespace.equals(XMLConstants.EMPTY_STRING)) {
            isDefaultNamespaceAllowed=false;
          }
        }
      }
    }
  }
}","public void createElementsForTypeMappingInfo(){
  if (this.javaClassToTypeMappingInfos != null && !this.javaClassToTypeMappingInfos.isEmpty()) {
    Set<JavaClass> classes=this.javaClassToTypeMappingInfos.keySet();
    for (    JavaClass nextClass : classes) {
      TypeMappingInfo nextInfo=this.javaClassToTypeMappingInfos.get(nextClass);
      if (nextInfo != null) {
        boolean xmlAttachmentRef=false;
        String xmlMimeType=null;
        java.lang.annotation.Annotation[] annotations=getAnnotations(nextInfo);
        Class adapterClass=this.typeMappingInfoToAdapterClasses.get(nextInfo);
        Class declJavaType=null;
        if (adapterClass != null) {
          declJavaType=CompilerHelper.getTypeFromAdapterClass(adapterClass);
        }
        if (annotations != null) {
          for (int j=0; j < annotations.length; j++) {
            java.lang.annotation.Annotation nextAnnotation=annotations[j];
            if (nextAnnotation != null) {
              if (nextAnnotation instanceof XmlMimeType) {
                XmlMimeType javaAnnotation=(XmlMimeType)nextAnnotation;
                xmlMimeType=javaAnnotation.value();
              }
 else               if (nextAnnotation instanceof XmlAttachmentRef) {
                xmlAttachmentRef=true;
                if (!this.hasSwaRef) {
                  this.hasSwaRef=true;
                }
              }
            }
          }
        }
        QName qname=null;
        String nextClassName=nextClass.getQualifiedName();
        if (declJavaType != null) {
          nextClassName=declJavaType.getCanonicalName();
        }
        if (typeMappingInfoToGeneratedClasses != null) {
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            nextClassName=generatedClass.getCanonicalName();
          }
        }
        TypeInfo nextTypeInfo=typeInfo.get(nextClassName);
        if (nextTypeInfo != null) {
          qname=new QName(nextTypeInfo.getClassNamespace(),nextTypeInfo.getSchemaTypeName());
        }
 else {
          qname=getUserDefinedSchemaTypes().get(nextClassName);
          if (qname == null) {
            if (nextClassName.equals(ClassConstants.APBYTE.getName()) || nextClassName.equals(Image.class.getName()) || nextClassName.equals(Source.class.getName())|| nextClassName.equals(""String_Node_Str"")) {
              if (xmlAttachmentRef) {
                qname=XMLConstants.SWA_REF_QNAME;
              }
 else {
                qname=XMLConstants.BASE_64_BINARY_QNAME;
              }
            }
 else             if (nextClassName.equals(ClassConstants.OBJECT.getName())) {
              qname=XMLConstants.ANY_TYPE_QNAME;
            }
 else             if (nextClassName.equals(ClassConstants.XML_GREGORIAN_CALENDAR.getName())) {
              qname=XMLConstants.ANY_SIMPLE_TYPE_QNAME;
            }
 else {
              Class theClass=helper.getClassForJavaClass(nextClass);
              qname=(QName)XMLConversionManager.getDefaultJavaTypes().get(theClass);
            }
          }
        }
        if (qname != null) {
          typeMappingInfoToSchemaType.put(nextInfo,qname);
        }
        if (nextInfo.getXmlTagName() != null) {
          ElementDeclaration element=new ElementDeclaration(nextInfo.getXmlTagName(),nextClass,nextClass.getQualifiedName(),false);
          element.setTypeMappingInfo(nextInfo);
          element.setXmlMimeType(xmlMimeType);
          element.setXmlAttachmentRef(xmlAttachmentRef);
          if (declJavaType != null) {
            element.setJavaType(helper.getJavaClass(declJavaType));
          }
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            element.setJavaType(helper.getJavaClass(generatedClass));
          }
          if (nextInfo.getElementScope() == TypeMappingInfo.ElementScope.Global) {
            this.getGlobalElements().put(element.getElementName(),element);
          }
 else {
            this.localElements.add(element);
          }
          String rootNamespace=element.getElementName().getNamespaceURI();
          if (rootNamespace == null) {
            rootNamespace=XMLConstants.EMPTY_STRING;
          }
          if (rootNamespace.equals(XMLConstants.EMPTY_STRING)) {
            isDefaultNamespaceAllowed=false;
          }
        }
      }
    }
  }
}"
66013,"public AnnotationsProcessor(Helper helper){
  this.helper=helper;
  isDefaultNamespaceAllowed=true;
}","public AnnotationsProcessor(Helper helper){
  this.helper=helper;
  isDefaultNamespaceAllowed=true;
  hasSwaRef=false;
}"
66014,"/** 
 * Perform any final generation and/or validation operations on TypeInfo properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.isTransient()) {
      continue;
    }
    if (!jClass.isInterface() && !tInfo.isEnumerationType() && !jClass.isAbstract()) {
      if (tInfo.getFactoryMethodName() == null && tInfo.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=jClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          if (tInfo.isSetXmlJavaTypeAdapter()) {
            tInfo.setTransient(true);
          }
 else {
            throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(jClass.getName());
          }
        }
      }
    }
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    for (    Property property : tInfo.getPropertyList()) {
      JavaClass typeClass=property.getActualType();
      TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
      if (targetInfo != null && targetInfo.isTransient()) {
        throw JAXBException.invalidReferenceToTransientClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
      }
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isXmlIdRef()) {
        if (targetInfo == null && !typeClass.getQualifiedName().equals(JAVA_LANG_OBJECT)) {
          throw JAXBException.invalidIDREFClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo != null && targetInfo.getIDProperty() == null) {
          throw JAXBException.invalidIdRef(property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny() && tInfo.isSetAnyElementPropertyName() && !(tInfo.getAnyElementPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),tInfo.getAnyElementPropertyName(),jClass.getName());
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!isCollectionType(property) && !property.getType().isArray()) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
      if (property.isXmlTransformation()) {
        processXmlTransformationProperty(property);
      }
      if (property.isSetXmlJoinNodes()) {
        if (targetInfo == null) {
          throw JAXBException.invalidXmlJoinNodeReferencedClass(property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo.getIDProperty() == null && targetInfo.getXmlKeyProperties() == null) {
          throw JAXBException.noKeyOrIDPropertyOnJoinTarget(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        for (        org.eclipse.persistence.jaxb.xmlmodel.XmlJoinNodes.XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
          String refXPath=xmlJoinNode.getReferencedXmlPath();
          if (targetInfo.getIDProperty() != null && refXPath.equals(targetInfo.getIDProperty().getXmlPath())) {
            continue;
          }
          boolean matched=false;
          if (targetInfo.getXmlKeyProperties() != null) {
            for (            Property xmlkeyProperty : targetInfo.getXmlKeyProperties()) {
              if (refXPath.equals(xmlkeyProperty.getXmlPath())) {
                matched=true;
                break;
              }
            }
          }
          if (!matched) {
            throw JAXBException.invalidReferencedXmlPathOnJoin(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName(),refXPath);
          }
        }
      }
    }
  }
}","/** 
 * Perform any final generation and/or validation operations on TypeInfo properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.isTransient()) {
      continue;
    }
    if (!jClass.isInterface() && !tInfo.isEnumerationType() && !jClass.isAbstract()) {
      if (tInfo.getFactoryMethodName() == null && tInfo.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=jClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          if (tInfo.isSetXmlJavaTypeAdapter()) {
            tInfo.setTransient(true);
          }
 else {
            throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(jClass.getName());
          }
        }
      }
    }
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    for (    Property property : tInfo.getPropertyList()) {
      JavaClass typeClass=property.getActualType();
      TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
      if (targetInfo != null && targetInfo.isTransient()) {
        throw JAXBException.invalidReferenceToTransientClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
      }
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isSwaAttachmentRef() && !this.hasSwaRef) {
        this.hasSwaRef=true;
      }
      if (property.isXmlIdRef()) {
        if (targetInfo == null && !typeClass.getQualifiedName().equals(JAVA_LANG_OBJECT)) {
          throw JAXBException.invalidIDREFClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo != null && targetInfo.getIDProperty() == null) {
          throw JAXBException.invalidIdRef(property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny() && tInfo.isSetAnyElementPropertyName() && !(tInfo.getAnyElementPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),tInfo.getAnyElementPropertyName(),jClass.getName());
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!isCollectionType(property) && !property.getType().isArray()) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
      if (property.isXmlTransformation()) {
        processXmlTransformationProperty(property);
      }
      if (property.isSetXmlJoinNodes()) {
        if (targetInfo == null) {
          throw JAXBException.invalidXmlJoinNodeReferencedClass(property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo.getIDProperty() == null && targetInfo.getXmlKeyProperties() == null) {
          throw JAXBException.noKeyOrIDPropertyOnJoinTarget(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        for (        org.eclipse.persistence.jaxb.xmlmodel.XmlJoinNodes.XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
          String refXPath=xmlJoinNode.getReferencedXmlPath();
          if (targetInfo.getIDProperty() != null && refXPath.equals(targetInfo.getIDProperty().getXmlPath())) {
            continue;
          }
          boolean matched=false;
          if (targetInfo.getXmlKeyProperties() != null) {
            for (            Property xmlkeyProperty : targetInfo.getXmlKeyProperties()) {
              if (refXPath.equals(xmlkeyProperty.getXmlPath())) {
                matched=true;
                break;
              }
            }
          }
          if (!matched) {
            throw JAXBException.invalidReferencedXmlPathOnJoin(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName(),refXPath);
          }
        }
      }
    }
  }
}"
66015,"/** 
 * This method returns a string representing a given java.util.Date based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
public String stringFromDate(java.util.Date sourceDate,QName schemaType){
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendMillis(string,sourceDate.getTime());
    return appendTimeZone(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DATE));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (trimGMonth() && xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setTime(sourceDate);
  xgc=getDatatypeFactory().newXMLGregorianCalendar(cal);
  if (!isTimeZoneQualified()) {
    xgc.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  }
  String string=xgc.toXMLFormat();
  return truncateMillis(string);
}","/** 
 * This method returns a string representing a given java.util.Date based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
public String stringFromDate(java.util.Date sourceDate,QName schemaType){
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendMillis(string,sourceDate.getTime());
    return appendTimeZone(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DATE));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return stringFromXMLGregorianCalendar(xgc,schemaType);
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setTime(sourceDate);
  xgc=getDatatypeFactory().newXMLGregorianCalendar(cal);
  if (!isTimeZoneQualified()) {
    xgc.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  }
  String string=xgc.toXMLFormat();
  return truncateMillis(string);
}"
66016,"private String stringFromSQLDate(java.sql.Date sourceDate,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceDate);
  }
 else   if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceDate);
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (trimGMonth() && xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLDate(sourceDate);
  }
}","private String stringFromSQLDate(java.sql.Date sourceDate,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceDate);
  }
 else   if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceDate);
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return stringFromXMLGregorianCalendar(xgc,schemaType);
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLDate(sourceDate);
  }
}"
66017,"private String stringFromSQLTime(Time sourceTime,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceTime);
  }
 else   if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (trimGMonth() && xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLTime(sourceTime);
  }
}","private String stringFromSQLTime(Time sourceTime,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceTime);
  }
 else   if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return stringFromXMLGregorianCalendar(xgc,schemaType);
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLTime(sourceTime);
  }
}"
66018,"/** 
 * This method returns a string representing a given Timestamp based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
private String stringFromTimestamp(Timestamp sourceDate,QName schemaType){
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTimeInMillis(sourceDate.getTime());
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendNanos(string,sourceDate);
    return appendTimeZone(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (trimGMonth() && xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setGregorianChange(new Date(Long.MIN_VALUE));
  cal.setTime(sourceDate);
  if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
    xgc.setYear(-cal.get(Calendar.YEAR));
  }
 else {
    xgc.setYear(cal.get(Calendar.YEAR));
  }
  xgc.setMonth(cal.get(Calendar.MONTH) + 1);
  xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
  xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
  xgc.setMinute(cal.get(Calendar.MINUTE));
  xgc.setSecond(cal.get(Calendar.SECOND));
  String string=xgc.toXMLFormat();
  string=appendNanos(string,sourceDate);
  return appendTimeZone(string,sourceDate);
}","/** 
 * This method returns a string representing a given Timestamp based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
private String stringFromTimestamp(Timestamp sourceDate,QName schemaType){
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTimeInMillis(sourceDate.getTime());
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendNanos(string,sourceDate);
    return appendTimeZone(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return stringFromXMLGregorianCalendar(xgc,schemaType);
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setGregorianChange(new Date(Long.MIN_VALUE));
  cal.setTime(sourceDate);
  if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
    xgc.setYear(-cal.get(Calendar.YEAR));
  }
 else {
    xgc.setYear(cal.get(Calendar.YEAR));
  }
  xgc.setMonth(cal.get(Calendar.MONTH) + 1);
  xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
  xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
  xgc.setMinute(cal.get(Calendar.MINUTE));
  xgc.setSecond(cal.get(Calendar.SECOND));
  String string=xgc.toXMLFormat();
  string=appendNanos(string,sourceDate);
  return appendTimeZone(string,sourceDate);
}"
66019,"/** 
 * Convert from a Date to a String representation of the Month type.
 * @param date the date
 * @return a Date to a String representation of the Month type.
 */
public String toMonth(Date date){
  if (date == null) {
    return null;
  }
  return getXMLConversionManager().stringFromDate(date,XMLConstants.G_MONTH_QNAME);
}","/** 
 * Convert from a Date to a String representation of the Month type.
 * @param date the date
 * @return a Date to a String representation of the Month type.
 */
public String toMonth(Date date){
  if (date == null) {
    return null;
  }
  boolean wasTimezoneQualified=getXMLConversionManager().isTimeZoneQualified();
  getXMLConversionManager().setTimeZoneQualified(false);
  String s=getXMLConversionManager().stringFromDate(date,XMLConstants.G_MONTH_QNAME);
  getXMLConversionManager().setTimeZoneQualified(wasTimezoneQualified);
  return s;
}"
66020,"public void addTests(){
  if (getSession().getPlatform() instanceof Oracle9Platform) {
    try {
      Oracle9Platform platform=(Oracle9Platform)getSession().getPlatform();
      ((AbstractSession)getSession()).getAccessor().incrementCallCount((AbstractSession)getSession());
      Connection conn=platform.getConnection((AbstractSession)getSession(),((AbstractSession)getSession()).getAccessor().getConnection());
      String driverVersion=platform.getDriverVersion(conn);
      TIMESTAMPTester.isTimestampInGmt=platform.isTimestampInGmt(conn);
      TIMESTAMPTester.isLtzTimestampInGmt=platform.isLtzTimestampInGmt(conn);
      ((AbstractSession)getSession()).getAccessor().decrementCallCount();
      if (driverVersion.indexOf(""String_Node_Str"") == -1) {
        if (driverVersion.indexOf(""String_Node_Str"") == -1 || getSession().getLogin().getDatabaseURL().indexOf(""String_Node_Str"") == -1) {
          addTest(getTIMESTAMPTestSuite(true));
          addTest(getTIMESTAMPWithBindingTestSuite(true));
          addTest(getTIMESTAMPUsingNativeSQLTestSuite(true));
          addTest(getTIMESTAMPTestSuite(false));
          addTest(getTIMESTAMPWithBindingTestSuite(false));
          addTest(getTIMESTAMPUsingNativeSQLTestSuite(false));
          if (Helper.compareVersions(driverVersion,""String_Node_Str"") >= 0) {
            addTest(getCalToTSTZWithBindingAndNoCalendarPrintingTestSuite());
          }
          addTest(getCalendarDaylightSavingsTestSuite());
        }
        if (!useAccessors) {
          if (driverVersion.indexOf(""String_Node_Str"") == -1 || getSession().getLogin().getDatabaseURL().indexOf(""String_Node_Str"") == -1) {
            addTest(getTIMESTAMPTCTestSuite(true));
            addTest(getTIMESTAMPTCWithBindingTestSuite(true));
            addTest(getTIMESTAMPTCUsingNativeSQLTestSuite(true));
            addTest(getTIMESTAMPTCTestSuite(false));
            addTest(getTIMESTAMPTCWithBindingTestSuite(false));
            addTest(getTIMESTAMPTCUsingNativeSQLTestSuite(false));
          }
          addTest(new SerializationOfValueHolderWithTIMESTAMPTZTest());
        }
      }
    }
 catch (    java.sql.SQLException e) {
    }
    if (!useAccessors) {
      addTest(getCalToTSTZTestSuite());
    }
  }
}","public void addTests(){
  if (getSession().getPlatform() instanceof Oracle9Platform) {
    Oracle9Platform platform=(Oracle9Platform)getSession().getPlatform();
    ((AbstractSession)getSession()).getAccessor().incrementCallCount((AbstractSession)getSession());
    String driverVersion=platform.getDriverVersion();
    TIMESTAMPTester.isTimestampInGmt=platform.isTimestampInGmt();
    TIMESTAMPTester.isLtzTimestampInGmt=platform.isLtzTimestampInGmt();
    ((AbstractSession)getSession()).getAccessor().decrementCallCount();
    if (driverVersion.indexOf(""String_Node_Str"") == -1) {
      if (driverVersion.indexOf(""String_Node_Str"") == -1 || getSession().getLogin().getDatabaseURL().indexOf(""String_Node_Str"") == -1) {
        addTest(getTIMESTAMPTestSuite(true));
        addTest(getTIMESTAMPWithBindingTestSuite(true));
        addTest(getTIMESTAMPUsingNativeSQLTestSuite(true));
        addTest(getTIMESTAMPTestSuite(false));
        addTest(getTIMESTAMPWithBindingTestSuite(false));
        addTest(getTIMESTAMPUsingNativeSQLTestSuite(false));
        if (Helper.compareVersions(driverVersion,""String_Node_Str"") >= 0) {
          addTest(getCalToTSTZWithBindingAndNoCalendarPrintingTestSuite());
        }
        addTest(getCalendarDaylightSavingsTestSuite());
      }
      if (!useAccessors) {
        if (driverVersion.indexOf(""String_Node_Str"") == -1 || getSession().getLogin().getDatabaseURL().indexOf(""String_Node_Str"") == -1) {
          addTest(getTIMESTAMPTCTestSuite(true));
          addTest(getTIMESTAMPTCWithBindingTestSuite(true));
          addTest(getTIMESTAMPTCUsingNativeSQLTestSuite(true));
          addTest(getTIMESTAMPTCTestSuite(false));
          addTest(getTIMESTAMPTCWithBindingTestSuite(false));
          addTest(getTIMESTAMPTCUsingNativeSQLTestSuite(false));
        }
        addTest(new SerializationOfValueHolderWithTIMESTAMPTZTest());
      }
    }
    if (!useAccessors) {
      addTest(getCalToTSTZTestSuite());
    }
  }
}"
66021,"public ArrayList getNoAccessTypePropertiesForClass(JavaClass cls,TypeInfo info){
  ArrayList list=new ArrayList();
  if (cls == null) {
    return list;
  }
  ArrayList fieldProperties=getFieldPropertiesForClass(cls,info,false);
  ArrayList methodProperties=getPropertyPropertiesForClass(cls,info,false);
  for (int i=0; i < fieldProperties.size(); i++) {
    Property next=(Property)fieldProperties.get(i);
    JavaHasAnnotations elem=next.getElement();
    if (!hasJAXBAnnotations(elem)) {
      next.setTransient(true);
    }
    list.add(next);
  }
  for (int i=0; i < methodProperties.size(); i++) {
    Property next=(Property)methodProperties.get(i);
    JavaHasAnnotations elem=next.getElement();
    if (!hasJAXBAnnotations(elem)) {
      next.setTransient(true);
    }
    list.add(next);
  }
  return list;
}","public ArrayList getNoAccessTypePropertiesForClass(JavaClass cls,TypeInfo info){
  ArrayList<Property> list=new ArrayList<Property>();
  if (cls == null) {
    return list;
  }
  List<Property> fieldProperties=getFieldPropertiesForClass(cls,info,false);
  Map<String,Property> fields=new HashMap<String,Property>(fieldProperties.size());
  for (  Property next : fieldProperties) {
    JavaHasAnnotations elem=next.getElement();
    if (!hasJAXBAnnotations(elem)) {
      next.setTransient(true);
    }
    list.add(next);
    fields.put(next.getPropertyName(),next);
  }
  List<Property> methodProperties=getPropertyPropertiesForClass(cls,info,false);
  for (  Property next : methodProperties) {
    JavaHasAnnotations elem=next.getElement();
    if (hasJAXBAnnotations(elem)) {
      Property fieldProperty=fields.get(next.getPropertyName());
      list.remove(fieldProperty);
      list.add(next);
    }
 else {
      next.setTransient(true);
      if (fields.get(next.getPropertyName()) == null) {
        list.add(next);
      }
    }
  }
  return list;
}"
66022,"private XMLRoot wrapObjectInXMLRoot(JAXBElement wrapperElement,Object value){
  XMLRoot xmlroot=new XMLRoot();
  Object objectValue=value;
  xmlroot.setObject(objectValue);
  QName qname=wrapperElement.getName();
  xmlroot.setLocalName(qname.getLocalPart());
  xmlroot.setNamespaceURI(qname.getNamespaceURI());
  xmlroot.setDeclaredType(wrapperElement.getDeclaredType());
  return xmlroot;
}","private XMLRoot wrapObjectInXMLRoot(JAXBElement wrapperElement,Object value){
  XMLRoot xmlroot=new XMLRoot();
  Object objectValue=value;
  xmlroot.setObject(objectValue);
  QName qname=wrapperElement.getName();
  xmlroot.setLocalName(qname.getLocalPart());
  xmlroot.setNamespaceURI(qname.getNamespaceURI());
  xmlroot.setDeclaredType(wrapperElement.getDeclaredType());
  if (value.getClass() == ClassConstants.ABYTE || value.getClass() == ClassConstants.APBYTE || value.getClass().getCanonicalName().equals(""String_Node_Str"")) {
    xmlroot.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
  }
  return xmlroot;
}"
66023,"protected String getStringForQName(QName qName,MarshalRecord marshalRecord){
  if (null == qName) {
    return null;
  }
  String namespaceURI=qName.getNamespaceURI();
  if (null == namespaceURI || 0 == namespaceURI.length()) {
    return qName.getLocalPart();
  }
 else {
    NamespaceResolver namespaceResolver=marshalRecord.getNamespaceResolver();
    if (namespaceResolver == null) {
      throw XMLMarshalException.namespaceResolverNotSpecified(namespaceURI);
    }
    if (namespaceURI.equals(namespaceResolver.getDefaultNamespaceURI())) {
      return qName.getLocalPart();
    }
    String prefix=namespaceResolver.resolveNamespaceURI(namespaceURI);
    if (null == prefix) {
      prefix=namespaceResolver.generatePrefix();
      marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + XMLConstants.COLON + prefix,namespaceURI);
    }
    return prefix + XMLConstants.COLON + qName.getLocalPart();
  }
}","protected String getStringForQName(QName qName,MarshalRecord marshalRecord){
  if (null == qName) {
    return null;
  }
  String namespaceURI=qName.getNamespaceURI();
  if (null == namespaceURI || 0 == namespaceURI.length()) {
    if (marshalRecord.getNamespaceResolver() != null && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,XMLConstants.XMLNS,namespaceURI);
    }
    return qName.getLocalPart();
  }
 else {
    NamespaceResolver namespaceResolver=marshalRecord.getNamespaceResolver();
    if (namespaceResolver == null) {
      throw XMLMarshalException.namespaceResolverNotSpecified(namespaceURI);
    }
    if (namespaceURI.equals(namespaceResolver.getDefaultNamespaceURI())) {
      return qName.getLocalPart();
    }
    String prefix=namespaceResolver.resolveNamespaceURI(namespaceURI);
    if (null == prefix) {
      prefix=namespaceResolver.generatePrefix();
      marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + XMLConstants.COLON + prefix,namespaceURI);
    }
    return prefix + XMLConstants.COLON + qName.getLocalPart();
  }
}"
66024,"/** 
 * initializes HashMap typesHashMap.
 */
private void initTypesHashMap(){
  typesHashMap=new HashMap();
  SDOType typeType=this.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  SDOType xmlHelperLoadOptionsType=new SDOXMLHelperLoadOptionsType(this,typeType);
  typesHashMap.put(xmlHelperLoadOptionsType.getQName(),xmlHelperLoadOptionsType);
  SDOType openSequencedType=new SDOOpenSequencedType(this);
  typesHashMap.put(openSequencedType.getQName(),openSequencedType);
  typesHashMap.put(SDO_BOOLEAN_WRAPPER.getQName(),SDO_BOOLEAN_WRAPPER);
  typesHashMap.put(SDO_BYTE_WRAPPER.getQName(),SDO_BYTE_WRAPPER);
  typesHashMap.put(SDO_BYTES_WRAPPER.getQName(),SDO_BYTES_WRAPPER);
  typesHashMap.put(SDO_CHARACTER_WRAPPER.getQName(),SDO_CHARACTER_WRAPPER);
  typesHashMap.put(SDO_DATE_WRAPPER.getQName(),SDO_DATE_WRAPPER);
  typesHashMap.put(SDO_DATETIME_WRAPPER.getQName(),SDO_DATETIME_WRAPPER);
  typesHashMap.put(SDO_DAY_WRAPPER.getQName(),SDO_DAY_WRAPPER);
  typesHashMap.put(SDO_DECIMAL_WRAPPER.getQName(),SDO_DECIMAL_WRAPPER);
  typesHashMap.put(SDO_DOUBLE_WRAPPER.getQName(),SDO_DOUBLE_WRAPPER);
  typesHashMap.put(SDO_DURATION_WRAPPER.getQName(),SDO_DURATION_WRAPPER);
  typesHashMap.put(SDO_FLOAT_WRAPPER.getQName(),SDO_FLOAT_WRAPPER);
  typesHashMap.put(SDO_INT_WRAPPER.getQName(),SDO_INT_WRAPPER);
  typesHashMap.put(SDO_INTEGER_WRAPPER.getQName(),SDO_INTEGER_WRAPPER);
  typesHashMap.put(SDO_LONG_WRAPPER.getQName(),SDO_LONG_WRAPPER);
  typesHashMap.put(SDO_MONTH_WRAPPER.getQName(),SDO_MONTH_WRAPPER);
  typesHashMap.put(SDO_MONTHDAY_WRAPPER.getQName(),SDO_MONTHDAY_WRAPPER);
  typesHashMap.put(SDO_OBJECT_WRAPPER.getQName(),SDO_OBJECT_WRAPPER);
  typesHashMap.put(SDO_SHORT_WRAPPER.getQName(),SDO_SHORT_WRAPPER);
  typesHashMap.put(SDO_STRING_WRAPPER.getQName(),SDO_STRING_WRAPPER);
  typesHashMap.put(SDO_STRINGS_WRAPPER.getQName(),SDO_STRINGS_WRAPPER);
  typesHashMap.put(SDO_TIME_WRAPPER.getQName(),SDO_TIME_WRAPPER);
  typesHashMap.put(SDO_URI_WRAPPER.getQName(),SDO_URI_WRAPPER);
  typesHashMap.put(SDO_YEAR_WRAPPER.getQName(),SDO_YEAR_WRAPPER);
  typesHashMap.put(SDO_YEARMONTH_WRAPPER.getQName(),SDO_YEARMONTH_WRAPPER);
  typesHashMap.put(SDO_YEARMONTHDAY_WRAPPER.getQName(),SDO_YEARMONTHDAY_WRAPPER);
  typesHashMap.put(SDO_BOOLEANOBJECT_WRAPPER.getQName(),SDO_BOOLEANOBJECT_WRAPPER);
  typesHashMap.put(SDO_BYTEOBJECT_WRAPPER.getQName(),SDO_BYTEOBJECT_WRAPPER);
  typesHashMap.put(SDO_CHARACTEROBJECT_WRAPPER.getQName(),SDO_CHARACTEROBJECT_WRAPPER);
  typesHashMap.put(SDO_DOUBLEOBJECT_WRAPPER.getQName(),SDO_DOUBLEOBJECT_WRAPPER);
  typesHashMap.put(SDO_FLOATOBJECT_WRAPPER.getQName(),SDO_FLOATOBJECT_WRAPPER);
  typesHashMap.put(SDO_INTOBJECT_WRAPPER.getQName(),SDO_INTOBJECT_WRAPPER);
  typesHashMap.put(SDO_LONGOBJECT_WRAPPER.getQName(),SDO_LONGOBJECT_WRAPPER);
  typesHashMap.put(SDO_SHORTOBJECT_WRAPPER.getQName(),SDO_SHORTOBJECT_WRAPPER);
}","/** 
 * initializes HashMap typesHashMap.
 */
private void initTypesHashMap(){
  typesHashMap=new HashMap();
  SDOType typeType=this.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  SDOType xmlHelperLoadOptionsType=new SDOXMLHelperLoadOptionsType(this,typeType);
  typesHashMap.put(xmlHelperLoadOptionsType.getQName(),xmlHelperLoadOptionsType);
  SDOType openSequencedType=new SDOOpenSequencedType(this);
  typesHashMap.put(openSequencedType.getQName(),openSequencedType);
  implClassesToSDOType.put(openSequencedType.getImplClass(),openSequencedType);
  typesHashMap.put(SDO_BOOLEAN_WRAPPER.getQName(),SDO_BOOLEAN_WRAPPER);
  typesHashMap.put(SDO_BYTE_WRAPPER.getQName(),SDO_BYTE_WRAPPER);
  typesHashMap.put(SDO_BYTES_WRAPPER.getQName(),SDO_BYTES_WRAPPER);
  typesHashMap.put(SDO_CHARACTER_WRAPPER.getQName(),SDO_CHARACTER_WRAPPER);
  typesHashMap.put(SDO_DATE_WRAPPER.getQName(),SDO_DATE_WRAPPER);
  typesHashMap.put(SDO_DATETIME_WRAPPER.getQName(),SDO_DATETIME_WRAPPER);
  typesHashMap.put(SDO_DAY_WRAPPER.getQName(),SDO_DAY_WRAPPER);
  typesHashMap.put(SDO_DECIMAL_WRAPPER.getQName(),SDO_DECIMAL_WRAPPER);
  typesHashMap.put(SDO_DOUBLE_WRAPPER.getQName(),SDO_DOUBLE_WRAPPER);
  typesHashMap.put(SDO_DURATION_WRAPPER.getQName(),SDO_DURATION_WRAPPER);
  typesHashMap.put(SDO_FLOAT_WRAPPER.getQName(),SDO_FLOAT_WRAPPER);
  typesHashMap.put(SDO_INT_WRAPPER.getQName(),SDO_INT_WRAPPER);
  typesHashMap.put(SDO_INTEGER_WRAPPER.getQName(),SDO_INTEGER_WRAPPER);
  typesHashMap.put(SDO_LONG_WRAPPER.getQName(),SDO_LONG_WRAPPER);
  typesHashMap.put(SDO_MONTH_WRAPPER.getQName(),SDO_MONTH_WRAPPER);
  typesHashMap.put(SDO_MONTHDAY_WRAPPER.getQName(),SDO_MONTHDAY_WRAPPER);
  typesHashMap.put(SDO_OBJECT_WRAPPER.getQName(),SDO_OBJECT_WRAPPER);
  typesHashMap.put(SDO_SHORT_WRAPPER.getQName(),SDO_SHORT_WRAPPER);
  typesHashMap.put(SDO_STRING_WRAPPER.getQName(),SDO_STRING_WRAPPER);
  typesHashMap.put(SDO_STRINGS_WRAPPER.getQName(),SDO_STRINGS_WRAPPER);
  typesHashMap.put(SDO_TIME_WRAPPER.getQName(),SDO_TIME_WRAPPER);
  typesHashMap.put(SDO_URI_WRAPPER.getQName(),SDO_URI_WRAPPER);
  typesHashMap.put(SDO_YEAR_WRAPPER.getQName(),SDO_YEAR_WRAPPER);
  typesHashMap.put(SDO_YEARMONTH_WRAPPER.getQName(),SDO_YEARMONTH_WRAPPER);
  typesHashMap.put(SDO_YEARMONTHDAY_WRAPPER.getQName(),SDO_YEARMONTHDAY_WRAPPER);
  typesHashMap.put(SDO_BOOLEANOBJECT_WRAPPER.getQName(),SDO_BOOLEANOBJECT_WRAPPER);
  typesHashMap.put(SDO_BYTEOBJECT_WRAPPER.getQName(),SDO_BYTEOBJECT_WRAPPER);
  typesHashMap.put(SDO_CHARACTEROBJECT_WRAPPER.getQName(),SDO_CHARACTEROBJECT_WRAPPER);
  typesHashMap.put(SDO_DOUBLEOBJECT_WRAPPER.getQName(),SDO_DOUBLEOBJECT_WRAPPER);
  typesHashMap.put(SDO_FLOATOBJECT_WRAPPER.getQName(),SDO_FLOATOBJECT_WRAPPER);
  typesHashMap.put(SDO_INTOBJECT_WRAPPER.getQName(),SDO_INTOBJECT_WRAPPER);
  typesHashMap.put(SDO_LONGOBJECT_WRAPPER.getQName(),SDO_LONGOBJECT_WRAPPER);
  typesHashMap.put(SDO_SHORTOBJECT_WRAPPER.getQName(),SDO_SHORTOBJECT_WRAPPER);
}"
66025,"public void initWrapperTypes(){
  SDO_BOOLEAN_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BOOLEAN,SDOConstants.BOOLEAN,this,XMLConstants.BOOLEAN_QNAME);
  SDO_BYTE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTE,SDOConstants.BYTE,this,XMLConstants.BYTE_QNAME);
  SDO_BYTES_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTES,SDOConstants.BYTES,this,new QName[]{XMLConstants.BASE_64_BINARY_QNAME,XMLConstants.HEX_BINARY_QNAME});
  SDO_CHARACTER_WRAPPER=new SDOWrapperType(SDOConstants.SDO_CHARACTER,SDOConstants.CHARACTER,this,XMLConstants.STRING_QNAME);
  SDO_DATE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DATE,SDOConstants.DATE,this,XMLConstants.DATE_QNAME);
  SDO_DATETIME_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DATETIME,SDOConstants.DATETIME,this,XMLConstants.DATE_TIME_QNAME);
  SDO_DAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DAY,SDOConstants.DAY,this,XMLConstants.G_DAY_QNAME);
  SDO_DECIMAL_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DECIMAL,SDOConstants.DECIMAL,this,XMLConstants.DECIMAL_QNAME);
  SDO_DOUBLE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DOUBLE,SDOConstants.DOUBLE,this,XMLConstants.DOUBLE_QNAME);
  SDO_DURATION_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DURATION,SDOConstants.DURATION,this,XMLConstants.DURATION_QNAME);
  SDO_FLOAT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_FLOAT,SDOConstants.FLOAT,this,XMLConstants.FLOAT_QNAME);
  SDO_INT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INT,SDOConstants.INT,this,XMLConstants.INT_QNAME);
  SDO_INTEGER_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INTEGER,SDOConstants.INTEGER,this,XMLConstants.INTEGER_QNAME);
  SDO_LONG_WRAPPER=new SDOWrapperType(SDOConstants.SDO_LONG,SDOConstants.LONG,this,XMLConstants.LONG_QNAME);
  SDO_MONTH_WRAPPER=new SDOWrapperType(SDOConstants.SDO_MONTH,SDOConstants.MONTH,this,XMLConstants.G_MONTH_QNAME);
  SDO_MONTHDAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_MONTHDAY,SDOConstants.MONTHDAY,this,XMLConstants.G_MONTH_DAY_QNAME);
  SDO_OBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_OBJECT,SDOConstants.OBJECT,this,XMLConstants.ANY_SIMPLE_TYPE_QNAME);
  SDO_SHORT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_SHORT,SDOConstants.SHORT,this,XMLConstants.SHORT_QNAME);
  SDO_STRING_WRAPPER=new SDOWrapperType(SDOConstants.SDO_STRING,SDOConstants.STRING,this,XMLConstants.STRING_QNAME);
  SDO_STRINGS_WRAPPER=new SDOWrapperType(SDOConstants.SDO_STRINGS,SDOConstants.STRINGS,this,XMLConstants.STRING_QNAME);
  SDO_TIME_WRAPPER=new SDOWrapperType(SDOConstants.SDO_TIME,SDOConstants.TIME,this,XMLConstants.TIME_QNAME);
  SDO_URI_WRAPPER=new SDOWrapperType(SDOConstants.SDO_URI,SDOConstants.URI,this,new QName[]{XMLConstants.ANY_URI_QNAME,XMLConstants.QNAME_QNAME});
  SDO_YEAR_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEAR,SDOConstants.YEAR,this,XMLConstants.G_YEAR_QNAME);
  SDO_YEARMONTH_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEARMONTH,SDOConstants.YEARMONTH,this,XMLConstants.G_YEAR_MONTH_QNAME);
  SDO_YEARMONTHDAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEARMONTHDAY,SDOConstants.YEARMONTHDAY,this,XMLConstants.DATE_QNAME);
  SDO_BOOLEANOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BOOLEANOBJECT,SDOConstants.BOOLEANOBJECT,this,XMLConstants.BOOLEAN_QNAME);
  SDO_BYTEOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTEOBJECT,SDOConstants.BYTEOBJECT,this,XMLConstants.BYTE_QNAME);
  SDO_CHARACTEROBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_CHARACTEROBJECT,SDOConstants.CHARACTEROBJECT,this,XMLConstants.STRING_QNAME);
  SDO_DOUBLEOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DOUBLEOBJECT,SDOConstants.DOUBLEOBJECT,this,XMLConstants.DOUBLE_QNAME);
  SDO_FLOATOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_FLOATOBJECT,SDOConstants.FLOATOBJECT,this,XMLConstants.FLOAT_QNAME);
  SDO_INTOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INTOBJECT,SDOConstants.INTOBJECT,this,XMLConstants.INT_QNAME);
  SDO_LONGOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_LONGOBJECT,SDOConstants.LONGOBJECT,this,XMLConstants.LONG_QNAME);
  SDO_SHORTOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_SHORTOBJECT,SDOConstants.SHORTOBJECT,this,XMLConstants.SHORT_QNAME);
}","public void initWrapperTypes(){
  SDO_BOOLEAN_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BOOLEAN,SDOConstants.BOOLEAN,this,XMLConstants.BOOLEAN_QNAME,SDOWrapperType.BooleanWrapperImpl.class);
  SDO_BYTE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTE,SDOConstants.BYTE,this,XMLConstants.BYTE_QNAME,SDOWrapperType.ByteWrapperImpl.class);
  SDO_BYTES_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTES,SDOConstants.BYTES,this,new QName[]{XMLConstants.BASE_64_BINARY_QNAME,XMLConstants.HEX_BINARY_QNAME},new Class[]{SDOWrapperType.BytesWrapperImpl.class,SDOWrapperType.Bytes_hexBunaryWrapperImpl.class});
  SDO_CHARACTER_WRAPPER=new SDOWrapperType(SDOConstants.SDO_CHARACTER,SDOConstants.CHARACTER,this,XMLConstants.STRING_QNAME,SDOWrapperType.CharacterWrapperImpl.class);
  SDO_DATE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DATE,SDOConstants.DATE,this,XMLConstants.DATE_QNAME,SDOWrapperType.DateWrapperImpl.class);
  SDO_DATETIME_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DATETIME,SDOConstants.DATETIME,this,XMLConstants.DATE_TIME_QNAME,SDOWrapperType.DateTimeWrapperImpl.class);
  SDO_DAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DAY,SDOConstants.DAY,this,XMLConstants.G_DAY_QNAME,SDOWrapperType.DayWrapperImpl.class);
  SDO_DECIMAL_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DECIMAL,SDOConstants.DECIMAL,this,XMLConstants.DECIMAL_QNAME,SDOWrapperType.DecimalWrapperImpl.class);
  SDO_DOUBLE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DOUBLE,SDOConstants.DOUBLE,this,XMLConstants.DOUBLE_QNAME,SDOWrapperType.DoubleWrapperImpl.class);
  SDO_DURATION_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DURATION,SDOConstants.DURATION,this,XMLConstants.DURATION_QNAME,SDOWrapperType.DurationWrapperImpl.class);
  SDO_FLOAT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_FLOAT,SDOConstants.FLOAT,this,XMLConstants.FLOAT_QNAME,SDOWrapperType.FloatWrapperImpl.class);
  SDO_INT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INT,SDOConstants.INT,this,XMLConstants.INT_QNAME,SDOWrapperType.IntWrapperImpl.class);
  SDO_INTEGER_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INTEGER,SDOConstants.INTEGER,this,XMLConstants.INTEGER_QNAME,SDOWrapperType.IntegerWrapperImpl.class);
  SDO_LONG_WRAPPER=new SDOWrapperType(SDOConstants.SDO_LONG,SDOConstants.LONG,this,XMLConstants.LONG_QNAME,SDOWrapperType.LongWrapperImpl.class);
  SDO_MONTH_WRAPPER=new SDOWrapperType(SDOConstants.SDO_MONTH,SDOConstants.MONTH,this,XMLConstants.G_MONTH_QNAME,SDOWrapperType.MonthWrapperImpl.class);
  SDO_MONTHDAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_MONTHDAY,SDOConstants.MONTHDAY,this,XMLConstants.G_MONTH_DAY_QNAME,SDOWrapperType.MonthDayWrapperImpl.class);
  SDO_OBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_OBJECT,SDOConstants.OBJECT,this,XMLConstants.ANY_SIMPLE_TYPE_QNAME,SDOWrapperType.ObjectWrapperImpl.class);
  SDO_SHORT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_SHORT,SDOConstants.SHORT,this,XMLConstants.SHORT_QNAME,SDOWrapperType.ShortWrapperImpl.class);
  SDO_STRING_WRAPPER=new SDOWrapperType(SDOConstants.SDO_STRING,SDOConstants.STRING,this,XMLConstants.STRING_QNAME,SDOWrapperType.StringWrapperImpl.class);
  SDO_STRINGS_WRAPPER=new SDOWrapperType(SDOConstants.SDO_STRINGS,SDOConstants.STRINGS,this,XMLConstants.STRING_QNAME,SDOWrapperType.StringsWrapperImpl.class);
  SDO_TIME_WRAPPER=new SDOWrapperType(SDOConstants.SDO_TIME,SDOConstants.TIME,this,XMLConstants.TIME_QNAME,SDOWrapperType.TimeWrapperImpl.class);
  SDO_URI_WRAPPER=new SDOWrapperType(SDOConstants.SDO_URI,SDOConstants.URI,this,new QName[]{XMLConstants.ANY_URI_QNAME,XMLConstants.QNAME_QNAME},new Class[]{SDOWrapperType.URIWrapperImpl.class,SDOWrapperType.URI_QNameWrapperImpl.class});
  SDO_YEAR_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEAR,SDOConstants.YEAR,this,XMLConstants.G_YEAR_QNAME,SDOWrapperType.YearWrapperImpl.class);
  SDO_YEARMONTH_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEARMONTH,SDOConstants.YEARMONTH,this,XMLConstants.G_YEAR_MONTH_QNAME,SDOWrapperType.YearMonthWrapperImpl.class);
  SDO_YEARMONTHDAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEARMONTHDAY,SDOConstants.YEARMONTHDAY,this,XMLConstants.DATE_QNAME,SDOWrapperType.YearMonthDayWrapperImpl.class);
  SDO_BOOLEANOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BOOLEANOBJECT,SDOConstants.BOOLEANOBJECT,this,XMLConstants.BOOLEAN_QNAME,SDOWrapperType.BooleanObjectWrapperImpl.class);
  SDO_BYTEOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTEOBJECT,SDOConstants.BYTEOBJECT,this,XMLConstants.BYTE_QNAME,SDOWrapperType.ByteObjectWrapperImpl.class);
  SDO_CHARACTEROBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_CHARACTEROBJECT,SDOConstants.CHARACTEROBJECT,this,XMLConstants.STRING_QNAME,SDOWrapperType.CharacterObjectWrapperImpl.class);
  SDO_DOUBLEOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DOUBLEOBJECT,SDOConstants.DOUBLEOBJECT,this,XMLConstants.DOUBLE_QNAME,SDOWrapperType.DoubleObjectWrapperImpl.class);
  SDO_FLOATOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_FLOATOBJECT,SDOConstants.FLOATOBJECT,this,XMLConstants.FLOAT_QNAME,SDOWrapperType.FloatObjectWrapperImpl.class);
  SDO_INTOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INTOBJECT,SDOConstants.INTOBJECT,this,XMLConstants.INT_QNAME,SDOWrapperType.IntObjectWrapperImpl.class);
  SDO_LONGOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_LONGOBJECT,SDOConstants.LONGOBJECT,this,XMLConstants.LONG_QNAME,SDOWrapperType.LongObjectWrapperImpl.class);
  SDO_SHORTOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_SHORTOBJECT,SDOConstants.SHORTOBJECT,this,XMLConstants.SHORT_QNAME,SDOWrapperType.ShortObjectWrapperImpl.class);
}"
66026,"public SDODataObjectType(SDOTypeHelper sdoTypeHelper){
  super(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT,sdoTypeHelper);
  setInstanceClass(DataObject.class);
  setAbstract(true);
}","public SDODataObjectType(SDOTypeHelper sdoTypeHelper){
  super(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT,sdoTypeHelper);
  setInstanceClass(DataObject.class);
  javaImplClass=DataObject.class;
  xmlDescriptor.setJavaClass(javaImplClass);
  setAbstract(true);
}"
66027,"public SDOOpenSequencedType(SDOTypeHelper sdoTypeHelper){
  super(SDOConstants.ORACLE_SDO_URL,""String_Node_Str"",sdoTypeHelper);
  this.xmlDescriptor.setNamespaceResolver(new NamespaceResolver());
  this.xmlDescriptor.setInstantiationPolicy(new TypeInstantiationPolicy(this));
  setInstanceClass(OpenSequencedType.class);
  setImplClassName(ORACLE_SDO_DO_URL + ""String_Node_Str"");
  Class implClass=getImplClass();
  xmlDescriptor.setJavaClass(implClass);
  setMixed(true);
  setSequenced(true);
  setOpen(true);
  setFinalized(true);
}","public SDOOpenSequencedType(SDOTypeHelper sdoTypeHelper){
  super(SDOConstants.ORACLE_SDO_URL,""String_Node_Str"",sdoTypeHelper);
  this.xmlDescriptor.setNamespaceResolver(new NamespaceResolver());
  this.xmlDescriptor.setInstantiationPolicy(new TypeInstantiationPolicy(this));
  setInstanceClass(OpenSequencedType.class);
  javaImplClass=OpenSequencedTypeImpl.class;
  xmlDescriptor.setJavaClass(javaImplClass);
  setMixed(true);
  setSequenced(true);
  setOpen(true);
  setFinalized(true);
}"
66028,"public SDOPropertyType(SDOTypeHelper sdoTypeHelper,SDOType typeType){
  super(SDOConstants.SDO_URL,SDOConstants.PROPERTY,sdoTypeHelper);
  this.typeHelper=sdoTypeHelper;
  setImplClassName(SDO_DO_URL + ""String_Node_Str"");
  Class implClass=getImplClass();
  xmlDescriptor.setJavaClass(implClass);
  xmlDescriptor.setInstantiationPolicy(new TypeInstantiationPolicy(this));
  XMLSchemaReference schemaReference=new XMLSchemaClassPathReference();
  schemaReference.setSchemaContext(""String_Node_Str"");
  xmlDescriptor.setSchemaReference(schemaReference);
  SDOProperty aliasNameProperty=new SDOProperty(aHelperContext);
  aliasNameProperty.setName(""String_Node_Str"");
  aliasNameProperty.setMany(true);
  aliasNameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(aliasNameProperty);
  SDOProperty propNameProperty=new SDOProperty(aHelperContext);
  propNameProperty.setName(""String_Node_Str"");
  propNameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(propNameProperty);
  SDOProperty manyProperty=new SDOProperty(aHelperContext);
  manyProperty.setName(""String_Node_Str"");
  manyProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(manyProperty);
  SDOProperty containmentProperty=new SDOProperty(aHelperContext);
  containmentProperty.setName(""String_Node_Str"");
  containmentProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(containmentProperty);
  SDOProperty defaultProperty=new SDOProperty(aHelperContext);
  defaultProperty.setName(""String_Node_Str"");
  defaultProperty.setType(SDOConstants.SDO_OBJECT);
  addDeclaredProperty(defaultProperty);
  SDOProperty readOnlyProperty=new SDOProperty(aHelperContext);
  readOnlyProperty.setName(""String_Node_Str"");
  readOnlyProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(readOnlyProperty);
  SDOProperty typeProperty=new SDOProperty(aHelperContext);
  typeProperty.setName(""String_Node_Str"");
  typeProperty.setType(typeType);
  typeProperty.setContainment(false);
  addDeclaredProperty(typeProperty);
  SDOProperty oppositeProperty=new SDOProperty(aHelperContext);
  oppositeProperty.setName(""String_Node_Str"");
  oppositeProperty.setType(this);
  addDeclaredProperty(oppositeProperty);
  SDOProperty nullableProperty=new SDOProperty(aHelperContext);
  nullableProperty.setName(""String_Node_Str"");
  nullableProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(nullableProperty);
  setOpen(true);
  setFinalized(true);
}","public SDOPropertyType(SDOTypeHelper sdoTypeHelper,SDOType typeType){
  super(SDOConstants.SDO_URL,SDOConstants.PROPERTY,sdoTypeHelper);
  this.typeHelper=sdoTypeHelper;
  this.javaImplClass=PropertyImpl.class;
  xmlDescriptor.setJavaClass(javaImplClass);
  xmlDescriptor.setInstantiationPolicy(new TypeInstantiationPolicy(this));
  XMLSchemaReference schemaReference=new XMLSchemaClassPathReference();
  schemaReference.setSchemaContext(""String_Node_Str"");
  xmlDescriptor.setSchemaReference(schemaReference);
  SDOProperty aliasNameProperty=new SDOProperty(aHelperContext);
  aliasNameProperty.setName(""String_Node_Str"");
  aliasNameProperty.setMany(true);
  aliasNameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(aliasNameProperty);
  SDOProperty propNameProperty=new SDOProperty(aHelperContext);
  propNameProperty.setName(""String_Node_Str"");
  propNameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(propNameProperty);
  SDOProperty manyProperty=new SDOProperty(aHelperContext);
  manyProperty.setName(""String_Node_Str"");
  manyProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(manyProperty);
  SDOProperty containmentProperty=new SDOProperty(aHelperContext);
  containmentProperty.setName(""String_Node_Str"");
  containmentProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(containmentProperty);
  SDOProperty defaultProperty=new SDOProperty(aHelperContext);
  defaultProperty.setName(""String_Node_Str"");
  defaultProperty.setType(SDOConstants.SDO_OBJECT);
  addDeclaredProperty(defaultProperty);
  SDOProperty readOnlyProperty=new SDOProperty(aHelperContext);
  readOnlyProperty.setName(""String_Node_Str"");
  readOnlyProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(readOnlyProperty);
  SDOProperty typeProperty=new SDOProperty(aHelperContext);
  typeProperty.setName(""String_Node_Str"");
  typeProperty.setType(typeType);
  typeProperty.setContainment(false);
  addDeclaredProperty(typeProperty);
  SDOProperty oppositeProperty=new SDOProperty(aHelperContext);
  oppositeProperty.setName(""String_Node_Str"");
  oppositeProperty.setType(this);
  addDeclaredProperty(oppositeProperty);
  SDOProperty nullableProperty=new SDOProperty(aHelperContext);
  nullableProperty.setName(""String_Node_Str"");
  nullableProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(nullableProperty);
  setOpen(true);
  setFinalized(true);
}"
66029,"public SDOTypeType(SDOTypeHelper sdoTypeHelper){
  super(SDOConstants.SDO_URL,SDOConstants.TYPE,sdoTypeHelper);
  setImplClassName(SDO_DO_URL + ""String_Node_Str"");
  Class implClass=getImplClass();
  xmlDescriptor.setJavaClass(implClass);
  xmlDescriptor.setInstantiationPolicy(new TypeInstantiationPolicy(this));
  xmlDescriptor.setDefaultRootElement(""String_Node_Str"");
  XMLSchemaReference schemaReference=new XMLSchemaClassPathReference();
  schemaReference.setSchemaContext(""String_Node_Str"");
  xmlDescriptor.setSchemaReference(schemaReference);
  NamespaceResolver namespaceResolver=new NamespaceResolver();
  namespaceResolver.put(SDOConstants.SDO_PREFIX,SDOConstants.SDO_URL);
  SDOType propertyType=new SDOPropertyType(sdoTypeHelper,this);
  sdoTypeHelper.addType(propertyType);
  SDOProperty baseTypeProperty=new SDOProperty(aHelperContext);
  baseTypeProperty.setName(""String_Node_Str"");
  baseTypeProperty.setMany(true);
  baseTypeProperty.setType(this);
  baseTypeProperty.setContainment(true);
  addDeclaredProperty(baseTypeProperty);
  SDOProperty propertiesProperty=new SDOProperty(aHelperContext);
  propertiesProperty.setName(""String_Node_Str"");
  propertiesProperty.setMany(true);
  propertiesProperty.setContainment(true);
  propertiesProperty.setType(propertyType);
  addDeclaredProperty(propertiesProperty);
  SDOProperty typeAliasNameProperty=new SDOProperty(aHelperContext);
  typeAliasNameProperty.setName(""String_Node_Str"");
  typeAliasNameProperty.setMany(true);
  typeAliasNameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(typeAliasNameProperty);
  SDOProperty nameProperty=new SDOProperty(aHelperContext);
  nameProperty.setName(""String_Node_Str"");
  nameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(nameProperty);
  SDOProperty uriProperty=new SDOProperty(aHelperContext);
  uriProperty.setName(""String_Node_Str"");
  uriProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(uriProperty);
  SDOProperty dataTypeProperty=new SDOProperty(aHelperContext);
  dataTypeProperty.setName(""String_Node_Str"");
  dataTypeProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(dataTypeProperty);
  SDOProperty openProperty=new SDOProperty(aHelperContext);
  openProperty.setName(""String_Node_Str"");
  openProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(openProperty);
  SDOProperty sequencedProperty=new SDOProperty(aHelperContext);
  sequencedProperty.setName(""String_Node_Str"");
  sequencedProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(sequencedProperty);
  SDOProperty abstractProperty=new SDOProperty(aHelperContext);
  abstractProperty.setName(""String_Node_Str"");
  abstractProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(abstractProperty);
  setOpen(true);
  setFinalized(true);
}","public SDOTypeType(SDOTypeHelper sdoTypeHelper){
  super(SDOConstants.SDO_URL,SDOConstants.TYPE,sdoTypeHelper);
  this.javaImplClass=TypeImpl.class;
  xmlDescriptor.setJavaClass(javaImplClass);
  xmlDescriptor.setInstantiationPolicy(new TypeInstantiationPolicy(this));
  xmlDescriptor.setDefaultRootElement(""String_Node_Str"");
  XMLSchemaReference schemaReference=new XMLSchemaClassPathReference();
  schemaReference.setSchemaContext(""String_Node_Str"");
  xmlDescriptor.setSchemaReference(schemaReference);
  NamespaceResolver namespaceResolver=new NamespaceResolver();
  namespaceResolver.put(SDOConstants.SDO_PREFIX,SDOConstants.SDO_URL);
  SDOType propertyType=new SDOPropertyType(sdoTypeHelper,this);
  sdoTypeHelper.addType(propertyType);
  SDOProperty baseTypeProperty=new SDOProperty(aHelperContext);
  baseTypeProperty.setName(""String_Node_Str"");
  baseTypeProperty.setMany(true);
  baseTypeProperty.setType(this);
  baseTypeProperty.setContainment(true);
  addDeclaredProperty(baseTypeProperty);
  SDOProperty propertiesProperty=new SDOProperty(aHelperContext);
  propertiesProperty.setName(""String_Node_Str"");
  propertiesProperty.setMany(true);
  propertiesProperty.setContainment(true);
  propertiesProperty.setType(propertyType);
  addDeclaredProperty(propertiesProperty);
  SDOProperty typeAliasNameProperty=new SDOProperty(aHelperContext);
  typeAliasNameProperty.setName(""String_Node_Str"");
  typeAliasNameProperty.setMany(true);
  typeAliasNameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(typeAliasNameProperty);
  SDOProperty nameProperty=new SDOProperty(aHelperContext);
  nameProperty.setName(""String_Node_Str"");
  nameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(nameProperty);
  SDOProperty uriProperty=new SDOProperty(aHelperContext);
  uriProperty.setName(""String_Node_Str"");
  uriProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(uriProperty);
  SDOProperty dataTypeProperty=new SDOProperty(aHelperContext);
  dataTypeProperty.setName(""String_Node_Str"");
  dataTypeProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(dataTypeProperty);
  SDOProperty openProperty=new SDOProperty(aHelperContext);
  openProperty.setName(""String_Node_Str"");
  openProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(openProperty);
  SDOProperty sequencedProperty=new SDOProperty(aHelperContext);
  sequencedProperty.setName(""String_Node_Str"");
  sequencedProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(sequencedProperty);
  SDOProperty abstractProperty=new SDOProperty(aHelperContext);
  abstractProperty.setName(""String_Node_Str"");
  abstractProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(abstractProperty);
  setOpen(true);
  setFinalized(true);
}"
66030,"/** 
 * Build up a Type with given name and uri
 * @param uri           the URI of this type
 * @param type_name     the unique of this Type
 * @param aContext      the current HelperContext
 */
public SDOType(String uri,String name,SDOTypeHelper sdoTypeHelper){
  this(sdoTypeHelper);
  this.qName=new QName(uri,name);
}","protected SDOType(String uri,String name,SDOTypeHelper sdoTypeHelper,XMLDescriptor xmlDescriptor){
  this(sdoTypeHelper,xmlDescriptor);
  this.qName=new QName(uri,name);
}"
66031,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNillableTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.schematype.SchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.self.SelfTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(XmlNullPolicyTestCases.class);
  suite.addTestSuite(XmlAccessMethodsTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlPropertyTestCases.class);
  suite.addTestSuite(XmlTransformationTestCases.class);
  suite.addTestSuite(XmlTransformationMethodTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmldiscriminator.XmlDiscriminatorTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmljoinnode.XmlJoinNodeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementsjoinnodes.XmlElementsJoinNodeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementsjoinnodes.collection.XmlElementsJoinNodeTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNillableTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.schematype.SchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.self.SelfTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(XmlNullPolicyTestCases.class);
  suite.addTestSuite(XmlAccessMethodsTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlPropertyTestCases.class);
  suite.addTestSuite(XmlTransformationTestCases.class);
  suite.addTestSuite(XmlTransformationMethodTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmldiscriminator.XmlDiscriminatorTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmljoinnode.XmlJoinNodeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementsjoinnodes.XmlElementsJoinNodeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementsjoinnodes.collection.XmlElementsJoinNodeTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  return suite;
}"
66032,"void processPropertyTypes(JavaClass[] classes){
  for (  JavaClass next : classes) {
    TypeInfo info=getTypeInfo().get(next.getQualifiedName());
    if (info != null) {
      for (      Property property : info.getPropertyList()) {
        JavaClass type=property.getActualType();
        if (!(this.typeInfo.containsKey(type.getQualifiedName())) && shouldGenerateTypeInfo(type)) {
          CompilerHelper.addClassToClassLoader(type,helper.getClassLoader());
          JavaClass[] jClassArray=new JavaClass[]{type};
          buildNewTypeInfo(jClassArray);
        }
        if (property.isChoice()) {
          processChoiceProperty(property,info,next,type);
          for (          Property choiceProp : property.getChoiceProperties()) {
            type=choiceProp.getActualType();
            if (!(this.typeInfo.containsKey(type.getQualifiedName())) && shouldGenerateTypeInfo(type)) {
              CompilerHelper.addClassToClassLoader(type,helper.getClassLoader());
              JavaClass[] jClassArray=new JavaClass[]{type};
              buildNewTypeInfo(jClassArray);
            }
          }
        }
      }
    }
  }
}","void processPropertyTypes(JavaClass[] classes){
  for (  JavaClass next : classes) {
    TypeInfo info=getTypeInfo().get(next.getQualifiedName());
    if (info != null) {
      for (      Property property : info.getPropertyList()) {
        if (property.isTransient()) {
          continue;
        }
        JavaClass type=property.getActualType();
        if (!(this.typeInfo.containsKey(type.getQualifiedName())) && shouldGenerateTypeInfo(type)) {
          CompilerHelper.addClassToClassLoader(type,helper.getClassLoader());
          JavaClass[] jClassArray=new JavaClass[]{type};
          buildNewTypeInfo(jClassArray);
        }
        if (property.isChoice()) {
          processChoiceProperty(property,info,next,type);
          for (          Property choiceProp : property.getChoiceProperties()) {
            type=choiceProp.getActualType();
            if (!(this.typeInfo.containsKey(type.getQualifiedName())) && shouldGenerateTypeInfo(type)) {
              CompilerHelper.addClassToClassLoader(type,helper.getClassLoader());
              JavaClass[] jClassArray=new JavaClass[]{type};
              buildNewTypeInfo(jClassArray);
            }
          }
        }
      }
    }
  }
}"
66033,"/** 
 * INTERNAL:  When using the SAX or DOM Platform, this method is responsible for marshalling null values for the XML Direct Mapping.
 * @param xPathFragment
 * @param marshalRecord
 * @param object
 * @param session
 * @param namespaceResolver
 * @return true if this method caused any nodes to be marshaled, else false.
 */
public boolean directMarshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Session session,NamespaceResolver namespaceResolver){
  if (xPathFragment.isAttribute()) {
    if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.EMPTY_NODE)) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.attribute(xPathFragment,namespaceResolver,XMLConstants.EMPTY_STRING);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return false;
    }
  }
 else {
    if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      String xsiPrefix=processNamespaceResolverForXSIPrefix(namespaceResolver);
      StringBuilder qName=new StringBuilder(XMLConstants.ATTRIBUTE);
      qName.append(xsiPrefix).append(COLON_W_SCHEMA_NIL_ATTRIBUTE);
      XPathFragment nilFragment=new XPathFragment(qName.toString());
      nilFragment.setNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.attribute(nilFragment,namespaceResolver,TRUE);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.EMPTY_NODE)) {
        XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
        marshalRecord.closeStartGroupingElements(groupingFragment);
        return true;
      }
 else {
        return false;
      }
    }
  }
}","/** 
 * INTERNAL:  When using the SAX or DOM Platform, this method is responsible for marshalling null values for the XML Direct Mapping.
 * @param xPathFragment
 * @param marshalRecord
 * @param object
 * @param session
 * @param namespaceResolver
 * @return true if this method caused any nodes to be marshaled, else false.
 */
public boolean directMarshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Session session,NamespaceResolver namespaceResolver){
  if (xPathFragment.isAttribute()) {
    if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.EMPTY_NODE)) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.attribute(xPathFragment,namespaceResolver,XMLConstants.EMPTY_STRING);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return false;
    }
  }
 else {
    if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      String xsiPrefix=processNamespaceResolverForXSIPrefix(namespaceResolver,marshalRecord);
      StringBuilder qName=new StringBuilder(XMLConstants.ATTRIBUTE);
      qName.append(xsiPrefix).append(COLON_W_SCHEMA_NIL_ATTRIBUTE);
      XPathFragment nilFragment=new XPathFragment(qName.toString());
      nilFragment.setNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
      marshalRecord.attribute(nilFragment,namespaceResolver,TRUE);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.EMPTY_NODE)) {
        XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
        marshalRecord.closeStartGroupingElements(groupingFragment);
        return true;
      }
 else {
        return false;
      }
    }
  }
}"
66034,"/** 
 * INTERNAL: Private function to process or create an entry in the NamespaceResolver for the xsi prefix.
 * @param namespaceResolver
 * @return xsi prefix
 */
protected String processNamespaceResolverForXSIPrefix(NamespaceResolver namespaceResolver){
  String xsiPrefix;
  if (null == namespaceResolver) {
    xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
    namespaceResolver=new NamespaceResolver();
    namespaceResolver.put(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
 else {
    xsiPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=namespaceResolver.generatePrefix();
    }
  }
  return xsiPrefix;
}","/** 
 * INTERNAL: Private function to process or create an entry in the NamespaceResolver for the xsi prefix.
 * @param namespaceResolver
 * @return xsi prefix
 */
protected String processNamespaceResolverForXSIPrefix(NamespaceResolver namespaceResolver,MarshalRecord marshalRecord){
  String xsiPrefix;
  if (null == namespaceResolver) {
    xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
    namespaceResolver=new NamespaceResolver();
    namespaceResolver.put(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
    marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
 else {
    xsiPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=namespaceResolver.generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
      marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  return xsiPrefix;
}"
66035,"/** 
 * Indicates if the javaType map contains a key equal to the provided JavaClass' raw name.
 * @param jClass
 * @return
 */
public boolean isBuiltInJavaType(JavaClass jClass){
  return getXMLToJavaTypeMap().containsKey(jClass.getRawName()) || jClass.getRawName().startsWith(""String_Node_Str"") || jClass.getRawName().startsWith(""String_Node_Str"");
}","/** 
 * Indicates if a given JavaClass is a built-in Java type.  A JavaClass is considered to be a built-in type if: 1 - the XMLToJavaTypeMap map contains a key equal to the provided  JavaClass' raw name 2 - the provided JavaClass' raw name starts with ""java."" 3 - the provided JavaClass' raw name starts with ""javax."", with the exception of ""javax.xml.ws."" 
 * @param jClass
 * @return
 */
public boolean isBuiltInJavaType(JavaClass jClass){
  String rawName=jClass.getRawName();
  return (getXMLToJavaTypeMap().containsKey(rawName) || rawName.startsWith(JAVA_PKG) || (rawName.startsWith(JAVAX_PKG) && !rawName.startsWith(JAVAX_WS_PKG)));
}"
66036,"public void createElementsForTypeMappingInfo(){
  if (this.javaClassToTypeMappingInfos != null && !this.javaClassToTypeMappingInfos.isEmpty()) {
    Set<JavaClass> classes=this.javaClassToTypeMappingInfos.keySet();
    for (    JavaClass nextClass : classes) {
      TypeMappingInfo nextInfo=this.javaClassToTypeMappingInfos.get(nextClass);
      if (nextInfo != null) {
        boolean xmlAttachmentRef=false;
        String xmlMimeType=null;
        java.lang.annotation.Annotation[] annotations=getAnnotations(nextInfo);
        Class adapterClass=this.typeMappingInfoToAdapterClasses.get(nextInfo);
        Class declJavaType=null;
        if (adapterClass != null) {
          declJavaType=CompilerHelper.getTypeFromAdapterClass(adapterClass);
        }
        if (annotations != null) {
          for (int j=0; j < annotations.length; j++) {
            java.lang.annotation.Annotation nextAnnotation=annotations[j];
            if (nextAnnotation != null) {
              if (nextAnnotation instanceof XmlMimeType) {
                XmlMimeType javaAnnotation=(XmlMimeType)nextAnnotation;
                xmlMimeType=javaAnnotation.value();
              }
 else               if (nextAnnotation instanceof XmlAttachmentRef) {
                xmlAttachmentRef=true;
              }
            }
          }
        }
        QName qname=null;
        String nextClassName=nextClass.getQualifiedName();
        if (declJavaType != null) {
          nextClassName=declJavaType.getCanonicalName();
        }
        if (typeMappingInfoToGeneratedClasses != null) {
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            nextClassName=generatedClass.getCanonicalName();
          }
        }
        TypeInfo nextTypeInfo=typeInfo.get(nextClassName);
        if (nextTypeInfo != null) {
          qname=new QName(nextTypeInfo.getClassNamespace(),nextTypeInfo.getSchemaTypeName());
        }
 else {
          qname=getUserDefinedSchemaTypes().get(nextClassName);
          if (qname == null) {
            if (nextClassName.equals(ClassConstants.ABYTE.getName()) || nextClassName.equals(ClassConstants.APBYTE.getName()) || nextClassName.equals(Image.class.getName())|| nextClassName.equals(Source.class.getName())|| nextClassName.equals(""String_Node_Str"")) {
              if (xmlAttachmentRef) {
                qname=XMLConstants.SWA_REF_QNAME;
              }
 else {
                qname=XMLConstants.BASE_64_BINARY_QNAME;
              }
            }
 else             if (nextClassName.equals(ClassConstants.OBJECT.getName())) {
              qname=XMLConstants.ANY_TYPE_QNAME;
            }
 else             if (nextClassName.equals(ClassConstants.XML_GREGORIAN_CALENDAR.getName())) {
              qname=XMLConstants.ANY_SIMPLE_TYPE_QNAME;
            }
 else {
              Class theClass=helper.getClassForJavaClass(nextClass);
              qname=(QName)XMLConversionManager.getDefaultJavaTypes().get(theClass);
            }
          }
        }
        if (qname != null) {
          typeMappingInfoToSchemaType.put(nextInfo,qname);
        }
        if (nextInfo.getXmlTagName() != null) {
          ElementDeclaration element=new ElementDeclaration(nextInfo.getXmlTagName(),nextClass,nextClass.getQualifiedName(),false);
          element.setTypeMappingInfo(nextInfo);
          element.setXmlMimeType(xmlMimeType);
          element.setXmlAttachmentRef(xmlAttachmentRef);
          if (declJavaType != null) {
            element.setJavaType(helper.getJavaClass(declJavaType));
          }
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            element.setJavaType(helper.getJavaClass(generatedClass));
          }
          if (nextInfo.getElementScope() == TypeMappingInfo.ElementScope.Global) {
            this.getGlobalElements().put(element.getElementName(),element);
          }
 else {
            this.localElements.add(element);
          }
        }
      }
    }
  }
}","public void createElementsForTypeMappingInfo(){
  if (this.javaClassToTypeMappingInfos != null && !this.javaClassToTypeMappingInfos.isEmpty()) {
    Set<JavaClass> classes=this.javaClassToTypeMappingInfos.keySet();
    for (    JavaClass nextClass : classes) {
      TypeMappingInfo nextInfo=this.javaClassToTypeMappingInfos.get(nextClass);
      if (nextInfo != null) {
        boolean xmlAttachmentRef=false;
        String xmlMimeType=null;
        java.lang.annotation.Annotation[] annotations=getAnnotations(nextInfo);
        Class adapterClass=this.typeMappingInfoToAdapterClasses.get(nextInfo);
        Class declJavaType=null;
        if (adapterClass != null) {
          declJavaType=CompilerHelper.getTypeFromAdapterClass(adapterClass);
        }
        if (annotations != null) {
          for (int j=0; j < annotations.length; j++) {
            java.lang.annotation.Annotation nextAnnotation=annotations[j];
            if (nextAnnotation != null) {
              if (nextAnnotation instanceof XmlMimeType) {
                XmlMimeType javaAnnotation=(XmlMimeType)nextAnnotation;
                xmlMimeType=javaAnnotation.value();
              }
 else               if (nextAnnotation instanceof XmlAttachmentRef) {
                xmlAttachmentRef=true;
              }
            }
          }
        }
        QName qname=null;
        String nextClassName=nextClass.getQualifiedName();
        if (declJavaType != null) {
          nextClassName=declJavaType.getCanonicalName();
        }
        if (typeMappingInfoToGeneratedClasses != null) {
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            nextClassName=generatedClass.getCanonicalName();
          }
        }
        TypeInfo nextTypeInfo=typeInfo.get(nextClassName);
        if (nextTypeInfo != null) {
          qname=new QName(nextTypeInfo.getClassNamespace(),nextTypeInfo.getSchemaTypeName());
        }
 else {
          qname=getUserDefinedSchemaTypes().get(nextClassName);
          if (qname == null) {
            if (nextClassName.equals(ClassConstants.ABYTE.getName()) || nextClassName.equals(ClassConstants.APBYTE.getName()) || nextClassName.equals(Image.class.getName())|| nextClassName.equals(Source.class.getName())|| nextClassName.equals(""String_Node_Str"")) {
              if (xmlAttachmentRef) {
                qname=XMLConstants.SWA_REF_QNAME;
              }
 else {
                qname=XMLConstants.BASE_64_BINARY_QNAME;
              }
            }
 else             if (nextClassName.equals(ClassConstants.OBJECT.getName())) {
              qname=XMLConstants.ANY_TYPE_QNAME;
            }
 else             if (nextClassName.equals(ClassConstants.XML_GREGORIAN_CALENDAR.getName())) {
              qname=XMLConstants.ANY_SIMPLE_TYPE_QNAME;
            }
 else {
              Class theClass=helper.getClassForJavaClass(nextClass);
              qname=(QName)XMLConversionManager.getDefaultJavaTypes().get(theClass);
            }
          }
        }
        if (qname != null) {
          typeMappingInfoToSchemaType.put(nextInfo,qname);
        }
        if (nextInfo.getXmlTagName() != null) {
          ElementDeclaration element=new ElementDeclaration(nextInfo.getXmlTagName(),nextClass,nextClass.getQualifiedName(),false);
          element.setTypeMappingInfo(nextInfo);
          element.setXmlMimeType(xmlMimeType);
          element.setXmlAttachmentRef(xmlAttachmentRef);
          if (declJavaType != null) {
            element.setJavaType(helper.getJavaClass(declJavaType));
          }
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            element.setJavaType(helper.getJavaClass(generatedClass));
          }
          if (nextInfo.getElementScope() == TypeMappingInfo.ElementScope.Global) {
            this.getGlobalElements().put(element.getElementName(),element);
          }
 else {
            this.localElements.add(element);
          }
          String rootNamespace=element.getElementName().getNamespaceURI();
          if (rootNamespace == null) {
            rootNamespace=XMLConstants.EMPTY_STRING;
          }
          if (rootNamespace.equals(XMLConstants.EMPTY_STRING)) {
            isDefaultNamespaceAllowed=false;
          }
        }
      }
    }
  }
}"
66037,"/** 
 * Get the initializer class Here we will attempt to build an EquinoxInitializer.  It will only be available if the org.eclipse.persistence.jpa.equinox fragment is available.  Else, we will return a standard OSGi initializer.
 */
public JPAInitializer getInitializer(String emName,Map m){
  ClassLoader classLoader=getClassLoader(emName,m);
  JPAInitializer initializer;
  if (this.initializerClassName != null) {
    try {
      Class initializerClass=Class.forName(this.initializerClassName);
      Class[] argTypes=new Class[]{ClassLoader.class,Map.class};
      Object[] args=new Object[]{classLoader,m,this};
      initializer=(JPAInitializer)initializerClass.getConstructor(argTypes).newInstance(args);
      initializer.initialize(m);
      return initializer;
    }
 catch (    Exception exception) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,LoggingLocalization.buildMessage(""String_Node_Str"",new Object[]{this.initializerClassName,exception}));
      AbstractSessionLog.getLog().logThrowable(SessionLog.WARNING,exception);
    }
  }
  initializer=new OSGiInitializer(classLoader);
  initializer.initialize(m);
  return initializer;
}","/** 
 * Get the initializer class Here we will attempt to build an EquinoxInitializer.  It will only be available if the org.eclipse.persistence.jpa.equinox fragment is available.  Else, we will return a standard OSGi initializer.
 */
public JPAInitializer getInitializer(String emName,Map m){
  ClassLoader classLoader=getClassLoader(emName,m);
  JPAInitializer initializer;
  if (this.initializerClassName != null) {
    try {
      Class initializerClass=Class.forName(this.initializerClassName);
      Class[] argTypes=new Class[]{ClassLoader.class,Map.class};
      Object[] args=new Object[]{classLoader,m};
      initializer=(JPAInitializer)initializerClass.getConstructor(argTypes).newInstance(args);
      initializer.initialize(m);
      return initializer;
    }
 catch (    Exception exception) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,LoggingLocalization.buildMessage(""String_Node_Str"",new Object[]{this.initializerClassName,exception}));
      AbstractSessionLog.getLog().logThrowable(SessionLog.WARNING,exception);
    }
  }
  initializer=new OSGiInitializer(classLoader);
  initializer.initialize(m);
  return initializer;
}"
66038,"public void testFailOnSecondErrorXMLStreamWriter() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    if (null == XML_OUTPUT_FACTORY) {
      return;
    }
    XMLStreamWriter xmlStreamWriter=XML_OUTPUT_FACTORY.createXMLStreamWriter(new ByteArrayOutputStream());
    marshaller.marshal(employee,xmlStreamWriter);
  }
 catch (  MarshalException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  XMLStreamException e) {
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}","public void testFailOnSecondErrorXMLStreamWriter() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    if (null == XML_OUTPUT_FACTORY) {
      return;
    }
    XMLStreamWriter xmlStreamWriter=XML_OUTPUT_FACTORY.createXMLStreamWriter(new ByteArrayOutputStream());
    marshaller.marshal(employee,xmlStreamWriter);
  }
 catch (  JAXBException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  XMLStreamException e) {
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}"
66039,"public void testFailOnSecondErrorContentHandler() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    marshaller.marshal(employee,new DefaultHandler());
  }
 catch (  MarshalException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}","public void testFailOnSecondErrorContentHandler() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    marshaller.marshal(employee,new DefaultHandler());
  }
 catch (  JAXBException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}"
66040,"public void testFailOnSecondErrorOutputStream() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    marshaller.marshal(employee,new ByteArrayOutputStream());
  }
 catch (  MarshalException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}","public void testFailOnSecondErrorOutputStream() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    marshaller.marshal(employee,new ByteArrayOutputStream());
  }
 catch (  JAXBException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}"
66041,"public void testFailOnSecondErrorResult() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    marshaller.marshal(employee,new StreamResult(new ByteArrayOutputStream()));
  }
 catch (  MarshalException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}","public void testFailOnSecondErrorResult() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    marshaller.marshal(employee,new StreamResult(new ByteArrayOutputStream()));
  }
 catch (  JAXBException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}"
66042,"public void testFailOnSecondErrorWriter() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    marshaller.marshal(employee,new StringWriter());
  }
 catch (  MarshalException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}","public void testFailOnSecondErrorWriter() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    marshaller.marshal(employee,new StringWriter());
  }
 catch (  JAXBException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}"
66043,"public void testFailOnSecondErrorNode() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document document=db.newDocument();
    marshaller.marshal(employee,document);
  }
 catch (  MarshalException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}","public void testFailOnSecondErrorNode() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document document=db.newDocument();
    marshaller.marshal(employee,document);
  }
 catch (  JAXBException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}"
66044,"public void testFailOnSecondErrorXMLEventWriter() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    if (null == XML_OUTPUT_FACTORY) {
      return;
    }
    XMLEventWriter xmlEventWriter=XML_OUTPUT_FACTORY.createXMLEventWriter(new ByteArrayOutputStream());
    marshaller.marshal(employee,xmlEventWriter);
  }
 catch (  MarshalException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  XMLStreamException e) {
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}","public void testFailOnSecondErrorXMLEventWriter() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    if (null == XML_OUTPUT_FACTORY) {
      return;
    }
    XMLEventWriter xmlEventWriter=XML_OUTPUT_FACTORY.createXMLEventWriter(new ByteArrayOutputStream());
    marshaller.marshal(employee,xmlEventWriter);
  }
 catch (  JAXBException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  XMLStreamException e) {
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}"
66045,"public void testInvalidEncoding() throws Exception {
  marshaller.setProperty(Marshaller.JAXB_ENCODING,encoding);
  ByteArrayOutputStream byteOutStream=new ByteArrayOutputStream();
  try {
    marshaller.marshal(controlObject,byteOutStream);
  }
 catch (  MarshalException e) {
    assertTrue(true);
    return;
  }
catch (  Exception e) {
    fail(""String_Node_Str"");
    return;
  }
  fail(""String_Node_Str"");
}","public void testInvalidEncoding() throws Exception {
  marshaller.setProperty(Marshaller.JAXB_ENCODING,encoding);
  ByteArrayOutputStream byteOutStream=new ByteArrayOutputStream();
  try {
    marshaller.marshal(controlObject,byteOutStream);
  }
 catch (  JAXBException e) {
    assertTrue(true);
    return;
  }
catch (  Exception e) {
    fail(""String_Node_Str"");
    return;
  }
  fail(""String_Node_Str"");
}"
66046,"public void testMarshalToInvalidOutputStream(){
  try {
    FileDescriptor fd=new FileDescriptor();
    FileOutputStream filestream=new FileOutputStream(fd);
    marshaller.marshal(getControlObject(),filestream);
  }
 catch (  MarshalException e) {
    assertTrue(true);
    return;
  }
catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
    return;
  }
  fail(""String_Node_Str"");
}","public void testMarshalToInvalidOutputStream(){
  try {
    FileDescriptor fd=new FileDescriptor();
    FileOutputStream filestream=new FileOutputStream(fd);
    marshaller.marshal(getControlObject(),filestream);
  }
 catch (  JAXBException e) {
    assertTrue(true);
    return;
  }
catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
    return;
  }
  fail(""String_Node_Str"");
}"
66047,"public void testMarshalToInvalidNode() throws Exception {
  boolean caughtException=false;
  Document document=parser.newDocument();
  try {
    marshaller.marshal(getControlObject(),document.createAttribute(""String_Node_Str""));
  }
 catch (  IllegalArgumentException e) {
    caughtException=false;
  }
catch (  MarshalException e) {
    caughtException=true;
  }
  assertTrue(""String_Node_Str"",caughtException);
}","public void testMarshalToInvalidNode() throws Exception {
  boolean caughtException=false;
  Document document=parser.newDocument();
  try {
    marshaller.marshal(getControlObject(),document.createAttribute(""String_Node_Str""));
  }
 catch (  IllegalArgumentException e) {
    caughtException=false;
  }
catch (  JAXBException e) {
    caughtException=true;
  }
  assertTrue(""String_Node_Str"",caughtException);
}"
66048,"public void testMarshalToInvalidResult() throws Exception {
  boolean caughtException=false;
  Document document=parser.newDocument();
  DOMResult result=new DOMResult(document.createAttribute(""String_Node_Str""));
  try {
    marshaller.marshal(getControlObject(),result);
  }
 catch (  IllegalArgumentException e) {
    caughtException=false;
  }
catch (  MarshalException e) {
    caughtException=true;
  }
  assertTrue(""String_Node_Str"",caughtException);
}","public void testMarshalToInvalidResult() throws Exception {
  boolean caughtException=false;
  Document document=parser.newDocument();
  DOMResult result=new DOMResult(document.createAttribute(""String_Node_Str""));
  try {
    marshaller.marshal(getControlObject(),result);
  }
 catch (  IllegalArgumentException e) {
    caughtException=false;
  }
catch (  JAXBException e) {
    caughtException=true;
  }
  assertTrue(""String_Node_Str"",caughtException);
}"
66049,"/** 
 * We should throw an exception if users try to marshal an object which is not of a type that is mapped in the project. The class Car is not mapped in the project being used so an exception should be thrown
 */
public void testMarshalInvalidObject(){
  StringWriter writer=new StringWriter();
  try {
    marshaller.marshal(new Car(),writer);
  }
 catch (  MarshalException marshalException) {
    Throwable linkedException=marshalException.getLinkedException();
    assertTrue(""String_Node_Str"",linkedException instanceof XMLMarshalException);
    assertTrue(""String_Node_Str"",((XMLMarshalException)linkedException).getErrorCode() == XMLMarshalException.DESCRIPTOR_NOT_FOUND_IN_PROJECT);
    return;
  }
catch (  Exception e) {
    log(e.getMessage());
    assertTrue(""String_Node_Str"",false);
  }
  assertTrue(""String_Node_Str"",false);
}","/** 
 * We should throw an exception if users try to marshal an object which is not of a type that is mapped in the project. The class Car is not mapped in the project being used so an exception should be thrown
 */
public void testMarshalInvalidObject(){
  StringWriter writer=new StringWriter();
  try {
    marshaller.marshal(new Car(),writer);
  }
 catch (  JAXBException jaxbex) {
    Throwable internalException=jaxbex.getInternalException();
    assertTrue(""String_Node_Str"",internalException instanceof XMLMarshalException);
    assertTrue(""String_Node_Str"",((XMLMarshalException)internalException).getErrorCode() == XMLMarshalException.DESCRIPTOR_NOT_FOUND_IN_PROJECT);
    return;
  }
catch (  Exception e) {
    log(e.getMessage());
    assertTrue(""String_Node_Str"",false);
  }
  assertTrue(""String_Node_Str"",false);
}"
66050,"/** 
 * Create an instance of XMLRoot populated from the contents of the provided JAXBElement. XMLRoot will be used to hold the contents of the JAXBElement while the marshal operation is performed by TopLink OXM. This will avoid adding any runtime dependencies to TopLink.
 * @param elt
 * @return
 */
private XMLRoot createXMLRootFromJAXBElement(JAXBElement elt){
  XMLRoot xmlroot=new XMLRoot();
  Object objectValue=elt.getValue();
  xmlroot.setObject(objectValue);
  QName qname=elt.getName();
  xmlroot.setLocalName(qname.getLocalPart());
  xmlroot.setNamespaceURI(qname.getNamespaceURI());
  xmlroot.setDeclaredType(elt.getDeclaredType());
  xmlroot.setNil(elt.isNil());
  if (elt.getDeclaredType() == ClassConstants.ABYTE || elt.getDeclaredType() == ClassConstants.APBYTE || elt.getDeclaredType().getCanonicalName().equals(""String_Node_Str"")) {
    xmlroot.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    Class generatedClass=getClassToGeneratedClasses().get(elt.getDeclaredType().getCanonicalName());
    if (generatedClass != null && WrappedValue.class.isAssignableFrom(generatedClass)) {
      ClassDescriptor desc=xmlMarshaller.getXMLContext().getSession(generatedClass).getDescriptor(generatedClass);
      Object newObject=desc.getInstantiationPolicy().buildNewInstance();
      ((WrappedValue)newObject).setValue(objectValue);
      xmlroot.setObject(newObject);
      return xmlroot;
    }
  }
 else {
    xmlroot.setSchemaType((QName)org.eclipse.persistence.internal.oxm.XMLConversionManager.getDefaultJavaTypes().get(elt.getDeclaredType()));
  }
  if (elt instanceof WrappedValue) {
    xmlroot.setObject(elt);
    return xmlroot;
  }
  if (qNameToGeneratedClasses != null) {
    Class theClass=qNameToGeneratedClasses.get(qname);
    if (theClass != null && WrappedValue.class.isAssignableFrom(theClass)) {
      ClassDescriptor desc=xmlMarshaller.getXMLContext().getSession(theClass).getDescriptor(theClass);
      Object newObject=desc.getInstantiationPolicy().buildNewInstance();
      ((WrappedValue)newObject).setValue(objectValue);
      xmlroot.setObject(newObject);
      return xmlroot;
    }
  }
  Class generatedClass=null;
  if (jaxbContext.getTypeMappingInfoToGeneratedType() != null) {
    if (elt.getDeclaredType() != null && elt.getDeclaredType().isArray()) {
      TypeMappingInfo tmi=jaxbContext.getTypeToTypeMappingInfo().get(elt.getDeclaredType());
      generatedClass=jaxbContext.getTypeMappingInfoToGeneratedType().get(tmi);
    }
 else     if (elt instanceof JAXBTypeElement) {
      Type objectType=((JAXBTypeElement)elt).getType();
      TypeMappingInfo tmi=jaxbContext.getTypeToTypeMappingInfo().get(objectType);
      generatedClass=jaxbContext.getTypeMappingInfoToGeneratedType().get(tmi);
    }
  }
 else {
    if (elt.getDeclaredType() != null && elt.getDeclaredType().isArray()) {
      if (jaxbContext.getArrayClassesToGeneratedClasses() != null) {
        generatedClass=jaxbContext.getArrayClassesToGeneratedClasses().get(elt.getDeclaredType().getCanonicalName());
      }
    }
 else     if (elt instanceof JAXBTypeElement) {
      Type objectType=((JAXBTypeElement)elt).getType();
      generatedClass=jaxbContext.getCollectionClassesToGeneratedClasses().get(objectType);
    }
  }
  if (generatedClass != null) {
    ClassDescriptor desc=xmlMarshaller.getXMLContext().getSession(generatedClass).getDescriptor(generatedClass);
    Object newObject=desc.getInstantiationPolicy().buildNewInstance();
    ((ManyValue)newObject).setItem(objectValue);
    xmlroot.setObject(newObject);
  }
  return xmlroot;
}","/** 
 * Create an instance of XMLRoot populated from the contents of the provided JAXBElement. XMLRoot will be used to hold the contents of the JAXBElement while the marshal operation is performed by TopLink OXM. This will avoid adding any runtime dependencies to TopLink.
 * @param elt
 * @return
 */
private XMLRoot createXMLRootFromJAXBElement(JAXBElement elt){
  XMLRoot xmlroot=new XMLRoot();
  Object objectValue=elt.getValue();
  xmlroot.setObject(objectValue);
  QName qname=elt.getName();
  xmlroot.setLocalName(qname.getLocalPart());
  xmlroot.setNamespaceURI(qname.getNamespaceURI());
  xmlroot.setDeclaredType(elt.getDeclaredType());
  xmlroot.setNil(elt.isNil());
  if (elt.getDeclaredType() == ClassConstants.ABYTE || elt.getDeclaredType() == ClassConstants.APBYTE || elt.getDeclaredType().getCanonicalName().equals(""String_Node_Str"")) {
    xmlroot.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    Class generatedClass=getClassToGeneratedClasses().get(elt.getDeclaredType().getCanonicalName());
    if (generatedClass != null && WrappedValue.class.isAssignableFrom(generatedClass)) {
      ClassDescriptor desc=xmlMarshaller.getXMLContext().getSession(generatedClass).getDescriptor(generatedClass);
      Object newObject=desc.getInstantiationPolicy().buildNewInstance();
      ((WrappedValue)newObject).setValue(objectValue);
      xmlroot.setObject(newObject);
      return xmlroot;
    }
  }
 else {
    xmlroot.setSchemaType((QName)org.eclipse.persistence.internal.oxm.XMLConversionManager.getDefaultJavaTypes().get(elt.getDeclaredType()));
  }
  if (elt instanceof WrappedValue) {
    xmlroot.setObject(elt);
    return xmlroot;
  }
  if (qNameToGeneratedClasses != null) {
    Class theClass=qNameToGeneratedClasses.get(qname);
    if (theClass != null && WrappedValue.class.isAssignableFrom(theClass)) {
      ClassDescriptor desc=xmlMarshaller.getXMLContext().getSession(theClass).getDescriptor(theClass);
      Object newObject=desc.getInstantiationPolicy().buildNewInstance();
      ((WrappedValue)newObject).setValue(objectValue);
      xmlroot.setObject(newObject);
      return xmlroot;
    }
  }
  Class generatedClass=null;
  if (jaxbContext.getTypeMappingInfoToGeneratedType() != null) {
    if (jaxbContext.getTypeToTypeMappingInfo() != null) {
      if (elt.getDeclaredType() != null && elt.getDeclaredType().isArray()) {
        TypeMappingInfo tmi=jaxbContext.getTypeToTypeMappingInfo().get(elt.getDeclaredType());
        generatedClass=jaxbContext.getTypeMappingInfoToGeneratedType().get(tmi);
      }
 else       if (elt instanceof JAXBTypeElement) {
        Type objectType=((JAXBTypeElement)elt).getType();
        TypeMappingInfo tmi=jaxbContext.getTypeToTypeMappingInfo().get(objectType);
        generatedClass=jaxbContext.getTypeMappingInfoToGeneratedType().get(tmi);
      }
    }
  }
 else {
    if (elt.getDeclaredType() != null && elt.getDeclaredType().isArray()) {
      if (jaxbContext.getArrayClassesToGeneratedClasses() != null) {
        generatedClass=jaxbContext.getArrayClassesToGeneratedClasses().get(elt.getDeclaredType().getCanonicalName());
      }
    }
 else     if (elt instanceof JAXBTypeElement) {
      Type objectType=((JAXBTypeElement)elt).getType();
      generatedClass=jaxbContext.getCollectionClassesToGeneratedClasses().get(objectType);
    }
  }
  if (generatedClass != null) {
    ClassDescriptor desc=xmlMarshaller.getXMLContext().getSession(generatedClass).getDescriptor(generatedClass);
    Object newObject=desc.getInstantiationPolicy().buildNewInstance();
    ((ManyValue)newObject).setItem(objectValue);
    xmlroot.setObject(newObject);
  }
  return xmlroot;
}"
66051,"public void marshal(Object object,Writer writer) throws JAXBException {
  if (object == null || writer == null) {
    throw new IllegalArgumentException();
  }
  if (object instanceof JAXBElement) {
    object=createXMLRootFromJAXBElement((JAXBElement)object);
  }
  try {
    xmlMarshaller.marshal(object,writer);
  }
 catch (  Exception e) {
    throw new MarshalException(e);
  }
}","public void marshal(Object object,Writer writer) throws JAXBException {
  if (object == null || writer == null) {
    throw new IllegalArgumentException();
  }
  if (object instanceof JAXBElement) {
    object=createXMLRootFromJAXBElement((JAXBElement)object);
  }
  try {
    xmlMarshaller.marshal(object,writer);
  }
 catch (  Exception e) {
    throw org.eclipse.persistence.exceptions.JAXBException.marshalFailure(e);
  }
}"
66052,"private void reset(){
  xPathNode=null;
  childRecord=null;
  transformationRecord=null;
  if (null != selfRecords) {
    selfRecords.clear();
  }
  if (null != indexMap) {
    indexMap.clear();
  }
  nullCapableValues=null;
  if (null != containersMap) {
    containersMap.clear();
  }
  isBufferCDATA=false;
  attributes=null;
  typeQName=null;
  isSelfRecord=false;
  unmarshalContext=null;
  isXsiNil=false;
  this.childRecordPool.add(this);
}","private void reset(){
  xPathNode=null;
  childRecord=null;
  transformationRecord=null;
  if (null != selfRecords) {
    selfRecords.clear();
  }
  if (null != indexMap) {
    indexMap.clear();
  }
  nullCapableValues=null;
  if (null != containersMap) {
    containersMap.clear();
  }
  isBufferCDATA=false;
  attributes=null;
  typeQName=null;
  isSelfRecord=false;
  unmarshalContext=null;
  isXsiNil=false;
  this.childRecordPool.add(this);
  unmappedLevel=-1;
}"
66053,"public void characters(char[] ch,int start,int length) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.characters(ch,start,length);
        }
 else {
          getFragmentBuilder().characters(ch,start,length);
        }
      }
    }
    XPathNode textNode=xPathNode.getTextNode();
    if (null == textNode) {
      textNode=xPathNode.getAnyNode();
      if (textNode != null) {
        xpathNodeIsMixedContent=true;
        this.xPathFragment.setLocalName(null);
        this.xPathFragment.setNamespaceURI(null);
        if (0 == length) {
          return;
        }
        String tmpString=new String(ch,start,length);
        if (!textNode.isWhitespaceAware() && tmpString.trim().length() == 0) {
          return;
        }
      }
    }
    if (null != textNode) {
      xPathNode=textNode;
      unmarshalContext.characters(this);
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      getStringBuffer().append(ch,start,length);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void characters(char[] ch,int start,int length) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.characters(ch,start,length);
        }
 else {
          getFragmentBuilder().characters(ch,start,length);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      return;
    }
    XPathNode textNode=xPathNode.getTextNode();
    if (null == textNode) {
      textNode=xPathNode.getAnyNode();
      if (textNode != null) {
        xpathNodeIsMixedContent=true;
        this.xPathFragment.setLocalName(null);
        this.xPathFragment.setNamespaceURI(null);
        if (0 == length) {
          return;
        }
        String tmpString=new String(ch,start,length);
        if (!textNode.isWhitespaceAware() && tmpString.trim().length() == 0) {
          return;
        }
      }
    }
    if (null != textNode) {
      xPathNode=textNode;
      unmarshalContext.characters(this);
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      getStringBuffer().append(ch,start,length);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
66054,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        NodeValue textNodeUnmarshalNodeValue=textNode.getUnmarshalNodeValue();
        if (!isXsiNil) {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            textNodeUnmarshalNodeValue.endElement(xPathFragment,this);
          }
        }
 else {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            DatabaseMapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping()) {
              Object nullValue=((AbstractDirectMapping)mapping).getNullValue();
              if (!(XMLConstants.EMPTY_STRING.equals(nullValue))) {
                setAttributeValue(null,mapping);
                this.removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
              }
            }
            isXsiNil=false;
          }
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if (null != xPathFragment && xPathFragment.nameIsText()) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if ((0 == levelIndex) && (null != getParentRecord()) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=getParentRecord();
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      if (levelIndex == unmappedLevel) {
        unmappedLevel=-1;
      }
      levelIndex--;
      return;
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        NodeValue textNodeUnmarshalNodeValue=textNode.getUnmarshalNodeValue();
        if (!isXsiNil) {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            textNodeUnmarshalNodeValue.endElement(xPathFragment,this);
          }
        }
 else {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            DatabaseMapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping()) {
              Object nullValue=((AbstractDirectMapping)mapping).getNullValue();
              if (!(XMLConstants.EMPTY_STRING.equals(nullValue))) {
                setAttributeValue(null,mapping);
                this.removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
              }
            }
            isXsiNil=false;
          }
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if (null != xPathFragment && xPathFragment.nameIsText()) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if ((0 == levelIndex) && (null != getParentRecord()) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=getParentRecord();
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
66055,"public void startUnmappedElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if ((null != selfRecords) || (null == xmlReader) || isSelfRecord()) {
    return;
  }
  Class unmappedContentHandlerClass=getUnmarshaller().getUnmappedContentHandlerClass();
  UnmappedContentHandler unmappedContentHandler;
  if (null == unmappedContentHandlerClass) {
    unmappedContentHandler=DEFAULT_UNMAPPED_CONTENT_HANDLER;
  }
 else {
    try {
      PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
      unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
    }
 catch (    ClassCastException e) {
      throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
    }
catch (    IllegalAccessException e) {
      throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
    }
catch (    InstantiationException e) {
      throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
    }
  }
  UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(this,unmappedContentHandler);
  unmappedContentHandlerWrapper.startElement(namespaceURI,localName,qName,atts);
  xmlReader.setContentHandler(unmappedContentHandlerWrapper);
  xmlReader.setLexicalHandler(unmappedContentHandlerWrapper);
}","public void startUnmappedElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if ((null != selfRecords) || (null == xmlReader) || isSelfRecord()) {
    if (-1 == unmappedLevel) {
      this.unmappedLevel=this.levelIndex;
    }
    return;
  }
  Class unmappedContentHandlerClass=getUnmarshaller().getUnmappedContentHandlerClass();
  UnmappedContentHandler unmappedContentHandler;
  if (null == unmappedContentHandlerClass) {
    unmappedContentHandler=DEFAULT_UNMAPPED_CONTENT_HANDLER;
  }
 else {
    try {
      PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
      unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
    }
 catch (    ClassCastException e) {
      throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
    }
catch (    IllegalAccessException e) {
      throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
    }
catch (    InstantiationException e) {
      throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
    }
  }
  UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(this,unmappedContentHandler);
  unmappedContentHandlerWrapper.startElement(namespaceURI,localName,qName,atts);
  xmlReader.setContentHandler(unmappedContentHandlerWrapper);
  xmlReader.setLexicalHandler(unmappedContentHandlerWrapper);
}"
66056,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (getCurrentObject() == null) {
    initializeRecord(atts);
  }
  if ((null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0, size=atts.getLength(); i < size; i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(XMLConstants.COLON);
            if (idx > 0) {
              attLocalName=qname.substring(idx + 1,qname.length());
              String attPrefix=qname.substring(0,idx);
              if (attPrefix.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
 else {
              attLocalName=qname;
              if (attLocalName.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=selfRecords.get(j);
            if (nestedRecord != null) {
              attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
              }
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (getCurrentObject() == null) {
    initializeRecord(atts);
  }
  if ((null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0, size=atts.getLength(); i < size; i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(XMLConstants.COLON);
            if (idx > 0) {
              attLocalName=qname.substring(idx + 1,qname.length());
              String attPrefix=qname.substring(0,idx);
              if (attPrefix.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
 else {
              attLocalName=qname;
              if (attLocalName.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=selfRecords.get(j);
            if (nestedRecord != null) {
              attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
              }
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
66057,"public ArrayList<Property> getFieldPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  for (Iterator<JavaField> fieldIt=cls.getDeclaredFields().iterator(); fieldIt.hasNext(); ) {
    JavaField nextField=fieldIt.next();
    int modifiers=nextField.getModifiers();
    if (!helper.isAnnotationPresent(nextField,XmlTransient.class)) {
      if (!Modifier.isTransient(modifiers) && ((Modifier.isPublic(nextField.getModifiers()) && onlyPublic) || !onlyPublic)) {
        if (!Modifier.isStatic(modifiers)) {
          Property property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
          properties.add(property);
        }
 else         if (Modifier.isFinal(modifiers) && helper.isAnnotationPresent(nextField,XmlAttribute.class)) {
          try {
            Property property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
            Object value=((JavaFieldImpl)nextField).get(null);
            String stringValue=(String)XMLConversionManager.getDefaultXMLManager().convertObject(value,String.class,property.getSchemaType());
            property.setFixedValue(stringValue);
            properties.add(property);
          }
 catch (          ClassCastException e) {
          }
catch (          IllegalAccessException e) {
          }
        }
      }
    }
 else {
      List<String> propOrderList=Arrays.asList(info.getPropOrder());
      if (propOrderList.contains(nextField.getName())) {
        throw JAXBException.transientInProporder(nextField.getName());
      }
    }
  }
  return properties;
}","public ArrayList<Property> getFieldPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  for (Iterator<JavaField> fieldIt=cls.getDeclaredFields().iterator(); fieldIt.hasNext(); ) {
    JavaField nextField=fieldIt.next();
    int modifiers=nextField.getModifiers();
    if (!helper.isAnnotationPresent(nextField,XmlTransient.class)) {
      if (!Modifier.isTransient(modifiers) && ((Modifier.isPublic(nextField.getModifiers()) && onlyPublic) || !onlyPublic)) {
        if (!Modifier.isStatic(modifiers)) {
          Property property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
          properties.add(property);
        }
 else         if (helper.isAnnotationPresent(nextField,XmlAttribute.class)) {
          try {
            Property property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
            Object value=((JavaFieldImpl)nextField).get(null);
            if (value != null) {
              String stringValue=(String)XMLConversionManager.getDefaultXMLManager().convertObject(value,String.class,property.getSchemaType());
              property.setFixedValue(stringValue);
            }
 else {
              property.setWriteOnly(true);
            }
            properties.add(property);
          }
 catch (          ClassCastException e) {
          }
catch (          IllegalAccessException e) {
          }
        }
      }
    }
 else {
      List<String> propOrderList=Arrays.asList(info.getPropOrder());
      if (propOrderList.contains(nextField.getName())) {
        throw JAXBException.transientInProporder(nextField.getName());
      }
    }
  }
  return properties;
}"
66058,"/** 
 * Create a <tt>DynamicJAXBContext</tt>, using an EclipseLink OXM file as the metadata source.
 * @param classLoader The application's current class loader, which will be used to first lookup classes to see if they exist before new <tt>DynamicTypes</tt> are generated.  Can be <tt>null</tt>, in which case <tt>Thread.currentThread().getContextClassLoader()</tt> will be used.
 * @param properties Map of properties to use when creating a new <tt>DynamicJAXBContext</tt>.  This map must contain a key of JAXBContext.ECLIPSELINK_OXM_XML_KEY, which can have several possible values: <ul> <li>One of the following, pointing to your OXM file: <tt>java.io.File</tt>, <tt>java.io.InputStream</tt>, <tt>java.io.Reader</tt>, <tt>java.net.URL</tt>,<br> <tt>javax.xml.stream.XMLEventReader</tt>, <tt>javax.xml.stream.XMLStreamReader</tt>, <tt>javax.xml.transform.Source</tt>,<br> <tt>org.w3c.dom.Node</tt>, or <tt>org.xml.sax.InputSource</tt>. <li>A <tt>List</tt> of objects from the set above. <li>A <tt>Map&lt;String, Object&gt;</tt>, where <tt>String</tt> is a package name, and <tt>Object</tt> is the pointer to the OXM file, from the set<br> of possibilities above.  If using this option, a <tt>package-name</tt> element is not required in the <tt>xml-bindings</tt> element of your OXM file. </ul>
 * @return A new instance of <tt>DynamicJAXBContext</tt>.
 * @throws JAXBException if an error was encountered while creating the <tt>DynamicJAXBContext</tt>.
 */
public static DynamicJAXBContext createContextFromOXM(ClassLoader classLoader,Map<String,Object> properties) throws JAXBException {
  if (properties == null || properties.get(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY) == null) {
    throw new JAXBException(org.eclipse.persistence.exceptions.JAXBException.oxmKeyNotFound());
  }
  DynamicJAXBContext dContext=new DynamicJAXBContext(classLoader);
  Metadata oxmMetadata=new OXMMetadata(dContext.getDynamicClassLoader(),properties);
  dContext.initializeFromMetadata(oxmMetadata,dContext.getDynamicClassLoader(),properties);
  return dContext;
}","/** 
 * Create a <tt>DynamicJAXBContext</tt>, using an EclipseLink OXM file as the metadata source.
 * @param classLoader The application's current class loader, which will be used to first lookup classes to see if they exist before new <tt>DynamicTypes</tt> are generated.  Can be <tt>null</tt>, in which case <tt>Thread.currentThread().getContextClassLoader()</tt> will be used.
 * @param properties Map of properties to use when creating a new <tt>DynamicJAXBContext</tt>.  This map must contain a key of JAXBContext.ECLIPSELINK_OXM_XML_KEY, which can have several possible values: <ul> <li>One of the following, pointing to your OXM file: <tt>java.io.File</tt>, <tt>java.io.InputStream</tt>, <tt>java.io.Reader</tt>, <tt>java.net.URL</tt>,<br> <tt>javax.xml.stream.XMLEventReader</tt>, <tt>javax.xml.stream.XMLStreamReader</tt>, <tt>javax.xml.transform.Source</tt>,<br> <tt>org.w3c.dom.Node</tt>, or <tt>org.xml.sax.InputSource</tt>. <li>A <tt>List</tt> of objects from the set above. <li>A <tt>Map&lt;String, Object&gt;</tt>, where <tt>String</tt> is a package name, and <tt>Object</tt> is the pointer to the OXM file, from the set<br> of possibilities above.  If using this option, a <tt>package-name</tt> element is not required in the <tt>xml-bindings</tt> element of your OXM file. </ul>
 * @return A new instance of <tt>DynamicJAXBContext</tt>.
 * @throws JAXBException if an error was encountered while creating the <tt>DynamicJAXBContext</tt>.
 */
public static DynamicJAXBContext createContextFromOXM(ClassLoader classLoader,Map<String,?> properties) throws JAXBException {
  if (properties == null || properties.get(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY) == null) {
    throw new JAXBException(org.eclipse.persistence.exceptions.JAXBException.oxmKeyNotFound());
  }
  DynamicJAXBContext dContext=new DynamicJAXBContext(classLoader);
  Metadata oxmMetadata=new OXMMetadata(dContext.getDynamicClassLoader(),properties);
  dContext.initializeFromMetadata(oxmMetadata,dContext.getDynamicClassLoader(),properties);
  return dContext;
}"
66059,"public Metadata(DynamicClassLoader dynamicClassLoader,Map<String,Object> properties){
  this.dynamicClassLoader=dynamicClassLoader;
  this.bindings=JAXBContextFactory.getXmlBindingsFromProperties(properties,dynamicClassLoader);
}","public Metadata(DynamicClassLoader dynamicClassLoader,Map<String,?> properties){
  this.dynamicClassLoader=dynamicClassLoader;
  this.bindings=JAXBContextFactory.getXmlBindingsFromProperties(properties,dynamicClassLoader);
}"
66060,"public OXMMetadata(DynamicClassLoader classLoader,Map<String,Object> properties){
  super(classLoader,properties);
}","public OXMMetadata(DynamicClassLoader classLoader,Map<String,?> properties){
  super(classLoader,properties);
}"
66061,"/** 
 * Perform any final generation and/or validation operations on TypeInfo properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.isTransient()) {
      continue;
    }
    if (!jClass.isInterface() && !tInfo.isEnumerationType()) {
      if (tInfo.getFactoryMethodName() == null && tInfo.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=jClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          if (tInfo.isSetXmlJavaTypeAdapter()) {
            tInfo.setTransient(true);
          }
 else {
            throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(jClass.getName());
          }
        }
      }
    }
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    for (    Property property : tInfo.getPropertyList()) {
      JavaClass typeClass=property.getActualType();
      TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
      if (targetInfo != null && targetInfo.isTransient()) {
        throw JAXBException.invalidReferenceToTransientClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
      }
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isXmlIdRef()) {
        if (targetInfo == null && !typeClass.getQualifiedName().equals(JAVA_LANG_OBJECT)) {
          throw JAXBException.invalidIDREFClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo != null && targetInfo.getIDProperty() == null) {
          throw JAXBException.invalidIdRef(property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny() && tInfo.isSetAnyElementPropertyName() && !(tInfo.getAnyElementPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),tInfo.getAnyElementPropertyName(),jClass.getName());
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!isCollectionType(property) && !property.getType().isArray()) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
      if (property.isXmlTransformation()) {
        processXmlTransformationProperty(property);
      }
      if (property.isSetXmlJoinNodes()) {
        if (targetInfo == null) {
          throw JAXBException.invalidXmlJoinNodeReferencedClass(property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo.getIDProperty() == null && targetInfo.getXmlKeyProperties() == null) {
          throw JAXBException.noKeyOrIDPropertyOnJoinTarget(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        for (        org.eclipse.persistence.jaxb.xmlmodel.XmlJoinNodes.XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
          String refXPath=xmlJoinNode.getReferencedXmlPath();
          if (targetInfo.getIDProperty() != null && refXPath.equals(targetInfo.getIDProperty().getXmlPath())) {
            continue;
          }
          boolean matched=false;
          if (targetInfo.getXmlKeyProperties() != null) {
            for (            Property xmlkeyProperty : targetInfo.getXmlKeyProperties()) {
              if (refXPath.equals(xmlkeyProperty.getXmlPath())) {
                matched=true;
                break;
              }
            }
          }
          if (!matched) {
            throw JAXBException.invalidReferencedXmlPathOnJoin(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName(),refXPath);
          }
        }
      }
    }
  }
}","/** 
 * Perform any final generation and/or validation operations on TypeInfo properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.isTransient()) {
      continue;
    }
    if (!jClass.isInterface() && !tInfo.isEnumerationType() && !jClass.isAbstract()) {
      if (tInfo.getFactoryMethodName() == null && tInfo.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=jClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          if (tInfo.isSetXmlJavaTypeAdapter()) {
            tInfo.setTransient(true);
          }
 else {
            throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(jClass.getName());
          }
        }
      }
    }
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    for (    Property property : tInfo.getPropertyList()) {
      JavaClass typeClass=property.getActualType();
      TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
      if (targetInfo != null && targetInfo.isTransient()) {
        throw JAXBException.invalidReferenceToTransientClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
      }
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isXmlIdRef()) {
        if (targetInfo == null && !typeClass.getQualifiedName().equals(JAVA_LANG_OBJECT)) {
          throw JAXBException.invalidIDREFClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo != null && targetInfo.getIDProperty() == null) {
          throw JAXBException.invalidIdRef(property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny() && tInfo.isSetAnyElementPropertyName() && !(tInfo.getAnyElementPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),tInfo.getAnyElementPropertyName(),jClass.getName());
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!isCollectionType(property) && !property.getType().isArray()) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
      if (property.isXmlTransformation()) {
        processXmlTransformationProperty(property);
      }
      if (property.isSetXmlJoinNodes()) {
        if (targetInfo == null) {
          throw JAXBException.invalidXmlJoinNodeReferencedClass(property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo.getIDProperty() == null && targetInfo.getXmlKeyProperties() == null) {
          throw JAXBException.noKeyOrIDPropertyOnJoinTarget(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        for (        org.eclipse.persistence.jaxb.xmlmodel.XmlJoinNodes.XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
          String refXPath=xmlJoinNode.getReferencedXmlPath();
          if (targetInfo.getIDProperty() != null && refXPath.equals(targetInfo.getIDProperty().getXmlPath())) {
            continue;
          }
          boolean matched=false;
          if (targetInfo.getXmlKeyProperties() != null) {
            for (            Property xmlkeyProperty : targetInfo.getXmlKeyProperties()) {
              if (refXPath.equals(xmlkeyProperty.getXmlPath())) {
                matched=true;
                break;
              }
            }
          }
          if (!matched) {
            throw JAXBException.invalidReferencedXmlPathOnJoin(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName(),refXPath);
          }
        }
      }
    }
  }
}"
66062,"/** 
 * Returns the namespace URI associated with a specified namespace prefix
 * @param prefix The prefix to lookup a namespace URI for
 * @return The namespace URI associated with the specified prefix
 */
public String resolveNamespacePrefix(String prefix){
  if (null == prefix) {
    return defaultNamespaceURI;
  }
  String uri=prefixesToNamespaces.get(prefix);
  if (null != uri) {
    return uri;
  }
 else   if (XMLConstants.XML_NAMESPACE_PREFIX.equals(prefix)) {
    return XMLConstants.XML_NAMESPACE_URL;
  }
 else   if (XMLConstants.XMLNS.equals(prefix)) {
    return XMLConstants.XMLNS_URL;
  }
  return null;
}","/** 
 * Returns the namespace URI associated with a specified namespace prefix
 * @param prefix The prefix to lookup a namespace URI for
 * @return The namespace URI associated with the specified prefix
 */
public String resolveNamespacePrefix(String prefix){
  if (null == prefix || prefix.length() == 0) {
    return defaultNamespaceURI;
  }
  String uri=prefixesToNamespaces.get(prefix);
  if (null != uri) {
    return uri;
  }
 else   if (XMLConstants.XML_NAMESPACE_PREFIX.equals(prefix)) {
    return XMLConstants.XML_NAMESPACE_URL;
  }
 else   if (XMLConstants.XMLNS.equals(prefix)) {
    return XMLConstants.XMLNS_URL;
  }
  return null;
}"
66063,"public AttachmentMarshaller getAttachmentMarshaller(){
  return ((AttachmentMarshallerAdapter)xmlMarshaller.getAttachmentMarshaller()).getAttachmentMarshaller();
}","public AttachmentMarshaller getAttachmentMarshaller(){
  if (xmlMarshaller.getAttachmentMarshaller() == null) {
    return null;
  }
  return ((AttachmentMarshallerAdapter)xmlMarshaller.getAttachmentMarshaller()).getAttachmentMarshaller();
}"
66064,"public void setAttachmentMarshaller(AttachmentMarshaller attachmentMarshaller){
  xmlMarshaller.setAttachmentMarshaller(new AttachmentMarshallerAdapter(attachmentMarshaller));
}","public void setAttachmentMarshaller(AttachmentMarshaller attachmentMarshaller){
  if (attachmentMarshaller == null) {
    xmlMarshaller.setAttachmentMarshaller(null);
  }
 else {
    xmlMarshaller.setAttachmentMarshaller(new AttachmentMarshallerAdapter(attachmentMarshaller));
  }
}"
66065,"public void setAttachmentUnmarshaller(AttachmentUnmarshaller unmarshaller){
  xmlUnmarshaller.setAttachmentUnmarshaller(new AttachmentUnmarshallerAdapter(unmarshaller));
}","public void setAttachmentUnmarshaller(AttachmentUnmarshaller unmarshaller){
  if (unmarshaller == null) {
    xmlUnmarshaller.setAttachmentUnmarshaller(null);
  }
 else {
    xmlUnmarshaller.setAttachmentUnmarshaller(new AttachmentUnmarshallerAdapter(unmarshaller));
  }
}"
66066,"public AttachmentUnmarshaller getAttachmentUnmarshaller(){
  return ((AttachmentUnmarshallerAdapter)xmlUnmarshaller.getAttachmentUnmarshaller()).getAttachmentUnmarshaller();
}","public AttachmentUnmarshaller getAttachmentUnmarshaller(){
  if (xmlUnmarshaller.getAttachmentUnmarshaller() == null) {
    return null;
  }
  return ((AttachmentUnmarshallerAdapter)xmlUnmarshaller.getAttachmentUnmarshaller()).getAttachmentUnmarshaller();
}"
66067,"/** 
 * Returns the enum constant if the specified type denotes an enum type and the specified constant denotes a constant of the enum type. 
 */
public Object resolveEnumConstant(Object type,String constant){
  Class clazz=getJavaClass(type);
  Object[] constants=clazz.getEnumConstants();
  if (constants != null) {
    for (int i=0; i < constants.length; i++) {
      if (constant.equals(constants[i].toString())) {
        return constants[i];
      }
    }
  }
  return null;
}","/** 
 * Returns the enum constant if the specified type denotes an enum type and the specified constant denotes a constant of the enum type. 
 */
public Object resolveEnumConstant(Object type,String constant){
  Class clazz=getJavaClass(type);
  Object[] constants=clazz.getEnumConstants();
  if (constants != null) {
    for (int i=0; i < constants.length; i++) {
      Enum<?> enumConstant=(Enum<?>)constants[i];
      if (enumConstant.name().equals(constant)) {
        return enumConstant;
      }
    }
  }
  return null;
}"
66068,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  return suite;
}"
66069,"private void writeElement(Element elem,XMLEventWriter xew) throws XMLStreamException {
  if (elem.getPrefix() != null && elem.getPrefix().length() > 0) {
    String namespaceURI=xew.getNamespaceContext().getNamespaceURI(elem.getPrefix());
    xew.add(xmlEventFactory.createStartElement(elem.getPrefix(),elem.getNamespaceURI(),elem.getLocalName()));
    if (!(elem.getNamespaceURI().equals(namespaceURI))) {
      xew.add(xmlEventFactory.createNamespace(elem.getPrefix(),elem.getNamespaceURI()));
    }
  }
 else {
    String localName=elem.getLocalName();
    String name=elem.getNodeName();
    if (elem.getNamespaceURI() == null || elem.getNamespaceURI().length() == 0) {
      xew.add(xmlEventFactory.createStartElement(""String_Node_Str"",""String_Node_Str"",elem.getNodeName()));
      String defaultNamespace=xew.getNamespaceContext().getNamespaceURI(XMLConstants.EMPTY_STRING);
      if (defaultNamespace != null && defaultNamespace.length() > 0) {
        xew.add(xmlEventFactory.createNamespace(XMLConstants.EMPTY_STRING));
      }
    }
 else {
      xew.add(xmlEventFactory.createStartElement(XMLConstants.EMPTY_STRING,elem.getNamespaceURI(),elem.getLocalName()));
    }
  }
  NodeList childNodes=elem.getChildNodes();
  NamedNodeMap attrs=elem.getAttributes();
  ArrayList<Attr> nonNamespaceDeclAttrs=new ArrayList<Attr>();
  for (int i=0; i < attrs.getLength(); i++) {
    Attr next=(Attr)attrs.item(i);
    if (next.getNodeType() == Node.ATTRIBUTE_NODE) {
      Attr attribute=next;
      if (next.getPrefix() != null && next.getPrefix().equals(XMLConstants.XMLNS)) {
        String currentUri=xew.getNamespaceContext().getNamespaceURI(next.getLocalName());
        if (currentUri == null || !currentUri.equals(next.getValue())) {
          xew.add(xmlEventFactory.createNamespace(next.getLocalName(),next.getValue()));
        }
      }
 else {
        nonNamespaceDeclAttrs.add(attribute);
      }
    }
  }
  for (  Attr next : nonNamespaceDeclAttrs) {
    if (next.getPrefix() == null) {
      xew.add(xmlEventFactory.createAttribute(next.getName(),next.getValue()));
    }
 else {
      xew.add(xmlEventFactory.createAttribute(next.getPrefix(),next.getNamespaceURI(),next.getLocalName(),next.getValue()));
    }
  }
  for (int i=0; i < childNodes.getLength(); i++) {
    Node next=childNodes.item(i);
    if (next.getNodeType() == Node.TEXT_NODE) {
      xew.add(xmlEventFactory.createCharacters(((Text)next).getNodeValue()));
    }
 else     if (next.getNodeType() == Node.CDATA_SECTION_NODE) {
      xew.add(xmlEventFactory.createCData(next.getNodeValue()));
    }
 else     if (next.getNodeType() == Node.COMMENT_NODE) {
      xew.add(xmlEventFactory.createComment(next.getNodeValue()));
    }
 else     if (next.getNodeType() == Node.ELEMENT_NODE) {
      writeElement((Element)next,xew);
    }
  }
  if (elem.getPrefix() != null && elem.getPrefix().length() > 0) {
    xew.add(xmlEventFactory.createEndElement(elem.getPrefix(),elem.getNamespaceURI(),elem.getLocalName()));
  }
 else   if (elem.getNamespaceURI() != null && elem.getNamespaceURI().length() > 0) {
    xew.add(xmlEventFactory.createEndElement(""String_Node_Str"",elem.getNamespaceURI(),elem.getLocalName()));
  }
 else {
    xew.add(xmlEventFactory.createEndElement(""String_Node_Str"",""String_Node_Str"",elem.getNodeName()));
  }
}","private void writeElement(Element elem,XMLEventWriter xew) throws XMLStreamException {
  if (elem.getPrefix() != null && elem.getPrefix().length() > 0) {
    String namespaceURI=xew.getNamespaceContext().getNamespaceURI(elem.getPrefix());
    xew.add(xmlEventFactory.createStartElement(elem.getPrefix(),elem.getNamespaceURI(),elem.getLocalName()));
    if (!(elem.getNamespaceURI().equals(namespaceURI))) {
      xew.add(xmlEventFactory.createNamespace(elem.getPrefix(),elem.getNamespaceURI()));
    }
  }
 else {
    String localName=elem.getLocalName();
    String name=elem.getNodeName();
    if (elem.getNamespaceURI() == null || elem.getNamespaceURI().length() == 0) {
      String defaultNamespace=xew.getNamespaceContext().getNamespaceURI(XMLConstants.EMPTY_STRING);
      xew.add(xmlEventFactory.createStartElement(""String_Node_Str"",""String_Node_Str"",elem.getNodeName()));
      if (defaultNamespace != null && defaultNamespace.length() > 0) {
        xew.add(xmlEventFactory.createNamespace(XMLConstants.EMPTY_STRING));
      }
    }
 else {
      xew.add(xmlEventFactory.createStartElement(XMLConstants.EMPTY_STRING,elem.getNamespaceURI(),elem.getLocalName()));
    }
  }
  NodeList childNodes=elem.getChildNodes();
  NamedNodeMap attrs=elem.getAttributes();
  ArrayList<Attr> nonNamespaceDeclAttrs=new ArrayList<Attr>();
  for (int i=0; i < attrs.getLength(); i++) {
    Attr next=(Attr)attrs.item(i);
    if (next.getNodeType() == Node.ATTRIBUTE_NODE) {
      Attr attribute=next;
      if (next.getPrefix() != null && next.getPrefix().equals(XMLConstants.XMLNS)) {
        String currentUri=xew.getNamespaceContext().getNamespaceURI(next.getLocalName());
        if (currentUri == null || !currentUri.equals(next.getValue())) {
          xew.add(xmlEventFactory.createNamespace(next.getLocalName(),next.getValue()));
        }
      }
 else {
        nonNamespaceDeclAttrs.add(attribute);
      }
    }
  }
  for (  Attr next : nonNamespaceDeclAttrs) {
    if (next.getPrefix() == null) {
      xew.add(xmlEventFactory.createAttribute(next.getName(),next.getValue()));
    }
 else {
      xew.add(xmlEventFactory.createAttribute(next.getPrefix(),next.getNamespaceURI(),next.getLocalName(),next.getValue()));
    }
  }
  for (int i=0; i < childNodes.getLength(); i++) {
    Node next=childNodes.item(i);
    if (next.getNodeType() == Node.TEXT_NODE) {
      xew.add(xmlEventFactory.createCharacters(((Text)next).getNodeValue()));
    }
 else     if (next.getNodeType() == Node.CDATA_SECTION_NODE) {
      xew.add(xmlEventFactory.createCData(next.getNodeValue()));
    }
 else     if (next.getNodeType() == Node.COMMENT_NODE) {
      xew.add(xmlEventFactory.createComment(next.getNodeValue()));
    }
 else     if (next.getNodeType() == Node.ELEMENT_NODE) {
      writeElement((Element)next,xew);
    }
  }
  if (elem.getPrefix() != null && elem.getPrefix().length() > 0) {
    xew.add(xmlEventFactory.createEndElement(elem.getPrefix(),elem.getNamespaceURI(),elem.getLocalName()));
  }
 else   if (elem.getNamespaceURI() != null && elem.getNamespaceURI().length() > 0) {
    xew.add(xmlEventFactory.createEndElement(""String_Node_Str"",elem.getNamespaceURI(),elem.getLocalName()));
  }
 else {
    xew.add(xmlEventFactory.createEndElement(""String_Node_Str"",""String_Node_Str"",elem.getNodeName()));
  }
}"
66070,"/** 
 * Handle prefixed attribute - may need to declare the namespace  URI locally.
 */
protected void handlePrefixedAttribute(Element elem) throws SAXException {
  String prefix=elem.getPrefix();
  String uri=resolveNamespacePrefix(prefix);
  if (uri == null || !uri.equals(elem.getNamespaceURI())) {
    NamespaceResolver tmpresolver=getTempResolver(elem);
    tmpresolver.put(prefix,elem.getNamespaceURI());
    if (!nsresolverList.contains(tmpresolver)) {
      nsresolverList.add(tmpresolver);
    }
    getContentHandler().startPrefixMapping(prefix,elem.getNamespaceURI());
  }
}","/** 
 * Handle prefixed attribute - may need to declare the namespace  URI locally.
 */
protected void handlePrefixedAttribute(Element elem) throws SAXException {
  String prefix=elem.getPrefix();
  String uri=resolveNamespacePrefix(prefix);
  if (prefix == null && uri == null) {
    return;
  }
  if (uri == null || !uri.equals(elem.getNamespaceURI())) {
    NamespaceResolver tmpresolver=getTempResolver(elem);
    tmpresolver.put(prefix,elem.getNamespaceURI());
    if (!nsresolverList.contains(tmpresolver)) {
      nsresolverList.add(tmpresolver);
    }
    getContentHandler().startPrefixMapping(prefix,elem.getNamespaceURI());
  }
}"
66071,"/** 
 * Convenience method that iterates over each namespace resolver  in the resolver list until it locates a uri for 'prefix' or the final resolver is reached w/o success.
 * @param prefix
 * @return true if a URI exists in one of the resolvers in the list, false otherwise
 */
protected String resolveNamespacePrefix(String prefix){
  String uri=null;
  if (prefix != null) {
    for (int i=nsresolverList.size() - 1; i >= 0; i--) {
      NamespaceResolver next=nsresolverList.get(i);
      uri=next.resolveNamespacePrefix(prefix);
      if ((uri != null) && uri.length() > 0) {
        break;
      }
    }
  }
  return uri;
}","/** 
 * Convenience method that iterates over each namespace resolver  in the resolver list until it locates a uri for 'prefix' or the final resolver is reached w/o success.
 * @param prefix
 * @return true if a URI exists in one of the resolvers in the list, false otherwise
 */
protected String resolveNamespacePrefix(String prefix){
  String uri=null;
  if (null == prefix) {
    for (int i=nsresolverList.size() - 1; i >= 0; i--) {
      NamespaceResolver next=nsresolverList.get(i);
      uri=next.getDefaultNamespaceURI();
      if ((uri != null) && uri.length() > 0) {
        break;
      }
    }
  }
 else {
    for (int i=nsresolverList.size() - 1; i >= 0; i--) {
      NamespaceResolver next=nsresolverList.get(i);
      uri=next.resolveNamespacePrefix(prefix);
      if ((uri != null) && uri.length() > 0) {
        break;
      }
    }
  }
  return uri;
}"
66072,"public XMLFragmentReader(NamespaceResolver namespaceResolver){
  nsresolverList=new ArrayList();
  nsresolverList.add(namespaceResolver);
  tmpresolverMap=new HashMap<Element,NamespaceResolver>();
}","public XMLFragmentReader(NamespaceResolver namespaceResolver){
  nsresolverList=new ArrayList();
  if (null != namespaceResolver) {
    nsresolverList.add(namespaceResolver);
  }
  tmpresolverMap=new HashMap<Element,NamespaceResolver>();
}"
66073,"/** 
 * Adds a namespace to the collection of namespaces on the NamespaceResolver
 * @param prefix  The prefix for a namespace
 * @param namespaceURI  The namespace URI associated with the specified prefix
 */
public void put(String prefix,String namespaceURI){
  prefixesToNamespaces.put(prefix,namespaceURI.intern());
}","/** 
 * Adds a namespace to the collection of namespaces on the NamespaceResolver
 * @param prefix  The prefix for a namespace
 * @param namespaceURI  The namespace URI associated with the specified prefix
 */
public void put(String prefix,String namespaceURI){
  if (null == prefix || 0 == prefix.length()) {
    defaultNamespaceURI=namespaceURI;
  }
 else {
    prefixesToNamespaces.put(prefix,namespaceURI.intern());
  }
}"
66074,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  Element element;
  if (namespaceURI == null) {
    element=document.createElement(qName);
  }
 else {
    element=document.createElementNS(namespaceURI,qName);
  }
  node=node.appendChild(element);
  for (int i=0; i < atts.getLength(); i++) {
    marshalRecord.attribute(atts.getURI(i),atts.getLocalName(i),atts.getQName(i),atts.getValue(i));
  }
  if (!prefixMappings.isEmpty()) {
    for (Iterator<Map.Entry<String,String>> entries=prefixMappings.entrySet().iterator(); entries.hasNext(); ) {
      Map.Entry<String,String> entry=entries.next();
      element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + entry.getKey(),entry.getValue());
    }
    prefixMappings.clear();
  }
  marshalRecord.closeStartElement();
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  Element element;
  if (namespaceURI == null) {
    element=document.createElement(qName);
  }
 else {
    element=document.createElementNS(namespaceURI,qName);
  }
  node=node.appendChild(element);
  for (int i=0; i < atts.getLength(); i++) {
    marshalRecord.attribute(atts.getURI(i),atts.getLocalName(i),atts.getQName(i),atts.getValue(i));
  }
  if (!prefixMappings.isEmpty()) {
    for (Iterator<Map.Entry<String,String>> entries=prefixMappings.entrySet().iterator(); entries.hasNext(); ) {
      Map.Entry<String,String> entry=entries.next();
      String namespaceDeclarationPrefix=entry.getKey();
      if (null == namespaceDeclarationPrefix || 0 == namespaceDeclarationPrefix.length()) {
        String namespaceDeclarationURI=entry.getValue();
        if (null == namespaceDeclarationURI) {
          element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,XMLConstants.EMPTY_STRING);
        }
 else {
          element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,namespaceDeclarationURI);
        }
      }
 else {
        element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + entry.getKey(),entry.getValue());
      }
    }
    prefixMappings.clear();
  }
  marshalRecord.closeStartElement();
}"
66075,"protected void writePrefixMappings(){
  try {
    if (!prefixMappings.isEmpty()) {
      for (java.util.Iterator<String> keys=prefixMappings.keySet().iterator(); keys.hasNext(); ) {
        String prefix=keys.next();
        outputStreamWrite(SPACE);
        outputStreamWrite(XMLConstants.XMLNS.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
        if (prefix.length() > 0) {
          outputStreamWrite((byte)XMLConstants.COLON);
          outputStreamWrite(prefix.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
        }
        outputStreamWrite((byte)'=');
        outputStreamWrite((byte)'""');
        outputStreamWrite(prefixMappings.get(prefix).getBytes(XMLConstants.DEFAULT_XML_ENCODING));
        outputStreamWrite(CLOSE_ATTRIBUTE_VALUE);
      }
      prefixMappings.clear();
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","protected void writePrefixMappings(){
  try {
    if (!prefixMappings.isEmpty()) {
      for (java.util.Iterator<String> keys=prefixMappings.keySet().iterator(); keys.hasNext(); ) {
        String prefix=keys.next();
        outputStreamWrite(SPACE);
        outputStreamWrite(XMLConstants.XMLNS.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
        if (null != prefix && prefix.length() > 0) {
          outputStreamWrite((byte)XMLConstants.COLON);
          outputStreamWrite(prefix.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
        }
        outputStreamWrite((byte)'=');
        outputStreamWrite((byte)'""');
        String uri=prefixMappings.get(prefix);
        if (null != uri) {
          outputStreamWrite(prefixMappings.get(prefix).getBytes(XMLConstants.DEFAULT_XML_ENCODING));
        }
        outputStreamWrite(CLOSE_ATTRIBUTE_VALUE);
      }
      prefixMappings.clear();
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66076,"protected void writePrefixMappings(){
  try {
    if (!prefixMappings.isEmpty()) {
      for (java.util.Iterator<String> keys=prefixMappings.keySet().iterator(); keys.hasNext(); ) {
        String prefix=keys.next();
        writer.write(' ');
        writer.write(XMLConstants.XMLNS);
        if (prefix.length() > 0) {
          writer.write(XMLConstants.COLON);
          writer.write(prefix);
        }
        writer.write('=');
        writer.write('""');
        writer.write(prefixMappings.get(prefix));
        writer.write('""');
      }
      prefixMappings.clear();
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","protected void writePrefixMappings(){
  try {
    if (!prefixMappings.isEmpty()) {
      for (java.util.Iterator<String> keys=prefixMappings.keySet().iterator(); keys.hasNext(); ) {
        String prefix=keys.next();
        writer.write(' ');
        writer.write(XMLConstants.XMLNS);
        if (null != prefix && prefix.length() > 0) {
          writer.write(XMLConstants.COLON);
          writer.write(prefix);
        }
        writer.write('=');
        writer.write('""');
        String uri=prefixMappings.get(prefix);
        if (null != uri) {
          writer.write(prefixMappings.get(prefix));
        }
        writer.write('""');
      }
      prefixMappings.clear();
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66077,"public void startPrefixMapping(String prefix,String uri) throws SAXException {
  if (prefix.length() == 0 && uri.length() == 0) {
    return;
  }
  if (namespaceDeclarations == null) {
    namespaceDeclarations=new HashMap();
  }
  namespaceDeclarations.put(prefix,uri);
}","public void startPrefixMapping(String prefix,String uri) throws SAXException {
  if (null == prefix) {
    prefix=XMLConstants.EMPTY_STRING;
  }
  if (null == uri) {
    uri=XMLConstants.EMPTY_STRING;
  }
  if (namespaceDeclarations == null) {
    namespaceDeclarations=new HashMap();
  }
  namespaceDeclarations.put(prefix,uri);
}"
66078,"protected Object buildObjectNoReferenceDescriptor(DOMRecord record,AbstractSession session,Node next,Object container,ContainerPolicy cp){
  XMLConverter converter=((XMLAnyCollectionMapping)this).getConverter();
  XMLPlatformFactory.getInstance().getXMLPlatform().namespaceQualifyFragment((Element)next);
  Object objectValue=next;
  if (converter != null) {
    objectValue=converter.convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
  }
  cp.addInto(objectValue,container,session);
  return objectValue;
}","/** 
 * Convenience method that takes a given Node and applies namespace  information, converts it if necessary, and adds the resulting  object to the given ContainerPolicy if non-null. 
 */
protected Object buildObjectNoReferenceDescriptor(DOMRecord record,XMLConverter converter,AbstractSession session,Node next,Object container,ContainerPolicy cp){
  XMLPlatformFactory.getInstance().getXMLPlatform().namespaceQualifyFragment((Element)next);
  Object objectValue=next;
  if (converter != null) {
    objectValue=converter.convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
  }
  if (cp != null) {
    cp.addInto(objectValue,container,session);
  }
  return objectValue;
}"
66079,"protected Object buildObjectAndWrapInXMLRoot(ClassDescriptor referenceDescriptor,XMLConverter converter,ObjectBuildingQuery query,DOMRecord record,DOMRecord nestedRecord,JoinedAttributeManager joinManager,AbstractSession session,Node next,Object container,ContainerPolicy containerPolicy){
  Object objectValue=null;
  ObjectBuilder builder=referenceDescriptor.getObjectBuilder();
  objectValue=builder.buildObject(query,nestedRecord,joinManager);
  Object updated=((XMLDescriptor)referenceDescriptor).wrapObjectInXMLRoot(objectValue,next.getNamespaceURI(),next.getLocalName(),next.getPrefix(),false);
  if (converter != null) {
    updated=converter.convertDataValueToObjectValue(updated,session,record.getUnmarshaller());
  }
  if (containerPolicy != null) {
    containerPolicy.addInto(updated,container,session);
  }
  return updated;
}","/** 
 * Uses a given reference descriptor to build an object based on a given DOMRecord.   If a converter is provided it is applied to the newly built object.  The  reference descriptor will wrap the object in an XMLRoot if required, and the  object will be added to the given Container Policy if it is non-null.   
 */
protected Object buildObjectAndWrapInXMLRoot(ClassDescriptor referenceDescriptor,XMLConverter converter,ObjectBuildingQuery query,DOMRecord record,DOMRecord nestedRecord,JoinedAttributeManager joinManager,AbstractSession session,Node next,Object container,ContainerPolicy containerPolicy){
  ObjectBuilder builder=referenceDescriptor.getObjectBuilder();
  Object objectValue=builder.buildObject(query,nestedRecord,joinManager);
  if (converter != null) {
    objectValue=converter.convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
  }
  Object updated=((XMLDescriptor)referenceDescriptor).wrapObjectInXMLRoot(objectValue,next.getNamespaceURI(),next.getLocalName(),next.getPrefix(),false);
  if (containerPolicy != null) {
    containerPolicy.addInto(updated,container,session);
  }
  return updated;
}"
66080,"private Object buildObjectValuesFromDOMRecord(DOMRecord record,AbstractSession session,ObjectBuildingQuery query,JoinedAttributeManager joinManager){
  Node root=record.getDOM();
  NodeList children=root.getChildNodes();
  ContainerPolicy cp=getContainerPolicy();
  Object container=null;
  if (reuseContainer) {
    Object currentObject=record.getCurrentObject();
    Object value=getAttributeAccessor().getAttributeValueFromObject(currentObject);
    container=value != null ? value : cp.containerInstance();
  }
 else {
    container=cp.containerInstance();
  }
  int length=children.getLength();
  Node next=null;
  if (length > 0) {
    next=record.getDOM().getFirstChild();
  }
  while (next != null) {
    Object objectValue=null;
    if (isUnmappedContent(next)) {
      if ((next.getNodeType() == Node.TEXT_NODE) && this.isMixedContent()) {
        if (next.getNodeValue().trim().length() > 0) {
          objectValue=next.getNodeValue();
          if (getConverter() != null) {
            objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
          }
          cp.addInto(objectValue,container,session);
        }
      }
 else       if (next.getNodeType() == Node.ELEMENT_NODE) {
        ClassDescriptor referenceDescriptor=null;
        DOMRecord nestedRecord=(DOMRecord)record.buildNestedRow((Element)next);
        if (!useXMLRoot) {
          referenceDescriptor=getDescriptor(nestedRecord,session,null);
          objectValue=buildObjectForNonXMLRoot(referenceDescriptor,getConverter(),query,record,nestedRecord,joinManager,session,next,container,cp);
        }
 else {
          String schemaType=((Element)next).getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
          QName schemaTypeQName=null;
          XPathFragment frag=new XPathFragment();
          if ((null != schemaType) && (schemaType.length() > 0)) {
            frag.setXPath(schemaType);
            if (frag.hasNamespace()) {
              String prefix=frag.getPrefix();
              XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
              String url=xmlPlatform.resolveNamespacePrefix(next,prefix);
              frag.setNamespaceURI(url);
              schemaTypeQName=new QName(url,frag.getLocalName());
            }
            XMLContext xmlContext=nestedRecord.getUnmarshaller().getXMLContext();
            referenceDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
          if (referenceDescriptor == null) {
            try {
              QName qname=new QName(nestedRecord.getNamespaceURI(),nestedRecord.getLocalName());
              referenceDescriptor=getDescriptor(nestedRecord,session,qname);
            }
 catch (            XMLMarshalException e) {
              referenceDescriptor=null;
            }
            XMLDescriptor xmlReferenceDescriptor=(XMLDescriptor)referenceDescriptor;
            if (referenceDescriptor != null && xmlReferenceDescriptor.isWrapper()) {
              referenceDescriptor=null;
            }
          }
          if ((referenceDescriptor != null) && (getKeepAsElementPolicy() != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            buildObjectAndWrapInXMLRoot(referenceDescriptor,getConverter(),query,record,nestedRecord,joinManager,session,next,container,cp);
          }
 else           if ((referenceDescriptor == null) && (getKeepAsElementPolicy() == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) {
            buildObjectNoReferenceDescriptor(record,session,next,container,cp);
          }
 else {
            Node textchild=((Element)next).getFirstChild();
            if ((textchild != null) && (textchild.getNodeType() == Node.TEXT_NODE)) {
              String stringValue=((Text)textchild).getNodeValue();
              if ((stringValue != null) && stringValue.length() > 0) {
                Object convertedValue=stringValue;
                if (schemaTypeQName != null) {
                  Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(schemaTypeQName);
                  if (theClass != null) {
                    convertedValue=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(convertedValue,theClass,schemaTypeQName);
                  }
                }
                if (getConverter() != null) {
                  convertedValue=getConverter().convertDataValueToObjectValue(convertedValue,session,record.getUnmarshaller());
                }
                XMLRoot rootValue=new XMLRoot();
                rootValue.setLocalName(next.getLocalName());
                rootValue.setSchemaType(schemaTypeQName);
                rootValue.setNamespaceURI(next.getNamespaceURI());
                rootValue.setObject(convertedValue);
                cp.addInto(rootValue,container,session);
              }
            }
          }
        }
      }
    }
    next=next.getNextSibling();
  }
  return container;
}","private Object buildObjectValuesFromDOMRecord(DOMRecord record,AbstractSession session,ObjectBuildingQuery query,JoinedAttributeManager joinManager){
  Node root=record.getDOM();
  NodeList children=root.getChildNodes();
  ContainerPolicy cp=getContainerPolicy();
  Object container=null;
  if (reuseContainer) {
    Object currentObject=record.getCurrentObject();
    Object value=getAttributeAccessor().getAttributeValueFromObject(currentObject);
    container=value != null ? value : cp.containerInstance();
  }
 else {
    container=cp.containerInstance();
  }
  int length=children.getLength();
  Node next=null;
  if (length > 0) {
    next=record.getDOM().getFirstChild();
  }
  while (next != null) {
    Object objectValue=null;
    if (isUnmappedContent(next)) {
      if ((next.getNodeType() == Node.TEXT_NODE) && this.isMixedContent()) {
        if (next.getNodeValue().trim().length() > 0) {
          objectValue=next.getNodeValue();
          if (getConverter() != null) {
            objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
          }
          cp.addInto(objectValue,container,session);
        }
      }
 else       if (next.getNodeType() == Node.ELEMENT_NODE) {
        ClassDescriptor referenceDescriptor=null;
        DOMRecord nestedRecord=(DOMRecord)record.buildNestedRow((Element)next);
        if (!useXMLRoot) {
          referenceDescriptor=getDescriptor(nestedRecord,session,null);
          objectValue=buildObjectForNonXMLRoot(referenceDescriptor,getConverter(),query,record,nestedRecord,joinManager,session,next,container,cp);
        }
 else {
          String schemaType=((Element)next).getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
          QName schemaTypeQName=null;
          XPathFragment frag=new XPathFragment();
          if ((null != schemaType) && (schemaType.length() > 0)) {
            frag.setXPath(schemaType);
            if (frag.hasNamespace()) {
              String prefix=frag.getPrefix();
              XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
              String url=xmlPlatform.resolveNamespacePrefix(next,prefix);
              frag.setNamespaceURI(url);
              schemaTypeQName=new QName(url,frag.getLocalName());
            }
            XMLContext xmlContext=nestedRecord.getUnmarshaller().getXMLContext();
            referenceDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
          if (referenceDescriptor == null) {
            try {
              QName qname=new QName(nestedRecord.getNamespaceURI(),nestedRecord.getLocalName());
              referenceDescriptor=getDescriptor(nestedRecord,session,qname);
            }
 catch (            XMLMarshalException e) {
              referenceDescriptor=null;
            }
            XMLDescriptor xmlReferenceDescriptor=(XMLDescriptor)referenceDescriptor;
            if (referenceDescriptor != null && xmlReferenceDescriptor.isWrapper()) {
              referenceDescriptor=null;
            }
          }
          if (getKeepAsElementPolicy() == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT || (referenceDescriptor == null && getKeepAsElementPolicy() == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) {
            Object objVal=buildObjectNoReferenceDescriptor(record,getConverter(),session,next,null,null);
            if (referenceDescriptor != null) {
              objVal=((XMLDescriptor)referenceDescriptor).wrapObjectInXMLRoot(objVal,next.getNamespaceURI(),next.getLocalName(),next.getPrefix(),false);
              cp.addInto(objVal,container,session);
            }
 else {
              cp.addInto(buildXMLRoot(next,objVal),container,session);
            }
          }
 else           if (referenceDescriptor != null) {
            buildObjectAndWrapInXMLRoot(referenceDescriptor,getConverter(),query,record,nestedRecord,joinManager,session,next,container,cp);
          }
 else {
            XMLRoot rootValue;
            if ((rootValue=buildXMLRootForText(next,schemaTypeQName,getConverter(),session,record)) != null) {
              cp.addInto(rootValue,container,session);
            }
          }
        }
      }
    }
    next=next.getNextSibling();
  }
  return container;
}"
66081,"private Object buildObjectValuesFromDOMRecord(DOMRecord record,AbstractSession session,ObjectBuildingQuery query,JoinedAttributeManager joinManager){
  Node root=record.getDOM();
  NodeList nodes=root.getChildNodes();
  Collection unmappedChildren=getUnmappedChildNodes(nodes);
  Iterator iter=unmappedChildren.iterator();
  int i=0;
  int length=unmappedChildren.size();
  while (iter.hasNext()) {
    Object objectValue=null;
    org.w3c.dom.Node next=(Node)iter.next();
    if (next.getNodeType() == Node.TEXT_NODE) {
      if ((i == (length - 1)) || (next.getNodeValue().trim().length() > 0)) {
        objectValue=next.getNodeValue();
        if (getConverter() != null) {
          objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
        }
        return objectValue;
      }
    }
 else     if (next.getNodeType() == Node.ELEMENT_NODE) {
      ClassDescriptor referenceDescriptor=null;
      DOMRecord nestedRecord=(DOMRecord)record.buildNestedRow((Element)next);
      if (!useXMLRoot) {
        referenceDescriptor=getDescriptor(nestedRecord,session,null);
        return buildObjectForNonXMLRoot(referenceDescriptor,getConverter(),query,record,nestedRecord,joinManager,session,next,null,null);
      }
 else {
        String schemaType=((Element)next).getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
        QName schemaTypeQName=null;
        XPathFragment frag=new XPathFragment();
        if ((null != schemaType) && (schemaType.length() > 0)) {
          frag.setXPath(schemaType);
          if (frag.hasNamespace()) {
            String prefix=frag.getPrefix();
            XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
            String url=xmlPlatform.resolveNamespacePrefix(next,prefix);
            frag.setNamespaceURI(url);
            schemaTypeQName=new QName(url,frag.getLocalName());
          }
          XMLContext xmlContext=nestedRecord.getUnmarshaller().getXMLContext();
          referenceDescriptor=xmlContext.getDescriptorByGlobalType(frag);
        }
        if (referenceDescriptor == null) {
          try {
            QName qname=new QName(nestedRecord.getNamespaceURI(),nestedRecord.getLocalName());
            referenceDescriptor=getDescriptor(nestedRecord,session,qname);
          }
 catch (          XMLMarshalException e) {
            referenceDescriptor=null;
          }
        }
        if (referenceDescriptor != null) {
          ObjectBuilder builder=referenceDescriptor.getObjectBuilder();
          objectValue=builder.buildObject(query,nestedRecord,joinManager);
          Object updated=((XMLDescriptor)referenceDescriptor).wrapObjectInXMLRoot(objectValue,next.getNamespaceURI(),next.getLocalName(),next.getPrefix(),false);
          if (getConverter() != null) {
            updated=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
          }
          return updated;
        }
 else         if ((referenceDescriptor != null) && (getKeepAsElementPolicy() != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
          return buildObjectAndWrapInXMLRoot(referenceDescriptor,getConverter(),query,record,nestedRecord,joinManager,session,next,null,null);
        }
 else {
          Node textchild=((Element)next).getFirstChild();
          if ((textchild != null) && (textchild.getNodeType() == Node.TEXT_NODE)) {
            String stringValue=((Text)textchild).getNodeValue();
            if ((stringValue != null) && stringValue.length() > 0) {
              Object convertedValue=stringValue;
              if (schemaTypeQName != null) {
                Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(schemaTypeQName);
                if (theClass != null) {
                  convertedValue=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(convertedValue,theClass,schemaTypeQName);
                }
              }
              if (getConverter() != null) {
                convertedValue=getConverter().convertDataValueToObjectValue(convertedValue,session,record.getUnmarshaller());
              }
              XMLRoot rootValue=new XMLRoot();
              rootValue.setLocalName(next.getLocalName());
              rootValue.setSchemaType(schemaTypeQName);
              rootValue.setNamespaceURI(next.getNamespaceURI());
              rootValue.setObject(convertedValue);
              return rootValue;
            }
          }
        }
      }
    }
    i++;
  }
  return null;
}","private Object buildObjectValuesFromDOMRecord(DOMRecord record,AbstractSession session,ObjectBuildingQuery query,JoinedAttributeManager joinManager){
  Node root=record.getDOM();
  NodeList nodes=root.getChildNodes();
  Collection unmappedChildren=getUnmappedChildNodes(nodes);
  Iterator iter=unmappedChildren.iterator();
  int i=0;
  int length=unmappedChildren.size();
  while (iter.hasNext()) {
    Object objectValue=null;
    org.w3c.dom.Node next=(Node)iter.next();
    if (next.getNodeType() == Node.TEXT_NODE) {
      if ((i == (length - 1)) || (next.getNodeValue().trim().length() > 0)) {
        objectValue=next.getNodeValue();
        if (getConverter() != null) {
          objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
        }
        return objectValue;
      }
    }
 else     if (next.getNodeType() == Node.ELEMENT_NODE) {
      ClassDescriptor referenceDescriptor=null;
      DOMRecord nestedRecord=(DOMRecord)record.buildNestedRow((Element)next);
      if (!useXMLRoot) {
        return buildObjectForNonXMLRoot(getDescriptor(nestedRecord,session,null),getConverter(),query,record,nestedRecord,joinManager,session,next,null,null);
      }
      String schemaType=((Element)next).getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      QName schemaTypeQName=null;
      XPathFragment frag=new XPathFragment();
      if ((null != schemaType) && (schemaType.length() > 0)) {
        frag.setXPath(schemaType);
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
          String url=xmlPlatform.resolveNamespacePrefix(next,prefix);
          frag.setNamespaceURI(url);
          schemaTypeQName=new QName(url,frag.getLocalName());
        }
        XMLContext xmlContext=nestedRecord.getUnmarshaller().getXMLContext();
        referenceDescriptor=xmlContext.getDescriptorByGlobalType(frag);
      }
      if (referenceDescriptor == null) {
        try {
          referenceDescriptor=getDescriptor(nestedRecord,session,new QName(nestedRecord.getNamespaceURI(),nestedRecord.getLocalName()));
        }
 catch (        XMLMarshalException e) {
          referenceDescriptor=null;
        }
      }
      if (getKeepAsElementPolicy() == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT || (referenceDescriptor == null && getKeepAsElementPolicy() == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) {
        Object objVal=buildObjectNoReferenceDescriptor(nestedRecord,getConverter(),session,next,null,null);
        if (referenceDescriptor != null) {
          return ((XMLDescriptor)referenceDescriptor).wrapObjectInXMLRoot(objVal,next.getNamespaceURI(),next.getLocalName(),next.getPrefix(),false);
        }
        return buildXMLRoot(next,objVal);
      }
      if (referenceDescriptor != null) {
        return buildObjectAndWrapInXMLRoot(referenceDescriptor,getConverter(),query,record,nestedRecord,joinManager,session,next,null,null);
      }
      XMLRoot rootValue;
      if ((rootValue=buildXMLRootForText(next,schemaTypeQName,getConverter(),session,record)) != null) {
        return rootValue;
      }
    }
    i++;
  }
  return null;
}"
66082,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (value instanceof XMLRoot) {
    XMLRoot root=(XMLRoot)value;
    XPathFragment fragment=this.xmlField.getXPathFragment();
    while (fragment != null && !fragment.nameIsText) {
      if (fragment.getNextFragment() == null || fragment.getHasText()) {
        if (fragment.getLocalName().equals(root.getLocalName())) {
          String fragUri=fragment.getNamespaceURI();
          String namespaceUri=root.getNamespaceURI();
          if ((namespaceUri == null && fragUri == null) || (namespaceUri != null && fragUri != null && namespaceUri.equals(fragUri))) {
            return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
          }
        }
      }
      fragment=fragment.getNextFragment();
    }
  }
 else {
    if (value != null && xmlChoiceMapping.getClassToFieldMappings().get(value.getClass()) == this.xmlField) {
      return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
    }
 else     if (value != null) {
      List<XMLField> sourceFields=xmlChoiceMapping.getClassToSourceFieldsMappings().get(value.getClass());
      if (sourceFields != null && sourceFields.contains(this.xmlField)) {
        return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
      }
    }
  }
  return false;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (value instanceof XMLRoot) {
    XMLRoot root=(XMLRoot)value;
    XPathFragment fragment=this.xmlField.getXPathFragment();
    while (fragment != null && !fragment.nameIsText) {
      if (fragment.getNextFragment() == null || fragment.getHasText()) {
        if (fragment.getLocalName().equals(root.getLocalName())) {
          String fragUri=fragment.getNamespaceURI();
          String namespaceUri=root.getNamespaceURI();
          if ((namespaceUri == null && fragUri == null) || (namespaceUri != null && fragUri != null && namespaceUri.equals(fragUri))) {
            return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
          }
        }
      }
      fragment=fragment.getNextFragment();
    }
  }
 else   if (value != null) {
    if (xmlChoiceMapping.getClassToFieldMappings().get(value.getClass()) == this.xmlField) {
      return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
    }
    List<XMLField> sourceFields=xmlChoiceMapping.getClassToSourceFieldsMappings().get(value.getClass());
    if (sourceFields != null && sourceFields.contains(this.xmlField)) {
      return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
    }
  }
  return false;
}"
66083,"public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.fieldToClassMappings.size() == 0) {
    this.convertClassNamesToClasses(((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).getLoader());
  }
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=(QName)xmlConversionManager.getDefaultJavaTypes().get(((AbstractCompositeDirectCollectionMapping)nextMapping).getAttributeElementClass());
      if (schemaType != null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
      if (converter != null) {
        ((AbstractCompositeDirectCollectionMapping)nextMapping).setValueConverter(converter);
      }
      ((AbstractCompositeDirectCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping.isAbstractCompositeCollectionMapping()) {
      if (converter != null) {
        ((AbstractCompositeCollectionMapping)nextMapping).setConverter(converter);
      }
      ((AbstractCompositeCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping instanceof XMLBinaryDataCollectionMapping) {
      ((XMLBinaryDataCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      if (converter != null) {
        ((XMLBinaryDataCollectionMapping)nextMapping).setValueConverter(converter);
      }
    }
 else {
      ((XMLCollectionReferenceMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      ((XMLCollectionReferenceMapping)nextMapping).setReuseContainer(true);
    }
    nextMapping.initialize(session);
  }
}","public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.fieldToClassMappings.size() == 0) {
    this.convertClassNamesToClasses(((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).getLoader());
  }
  if (this.converter != null) {
    this.converter.initialize(this,session);
  }
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=(QName)xmlConversionManager.getDefaultJavaTypes().get(((AbstractCompositeDirectCollectionMapping)nextMapping).getAttributeElementClass());
      if (schemaType != null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
      if (converter != null) {
        ((AbstractCompositeDirectCollectionMapping)nextMapping).setValueConverter(converter);
      }
      ((AbstractCompositeDirectCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping.isAbstractCompositeCollectionMapping()) {
      if (converter != null) {
        ((AbstractCompositeCollectionMapping)nextMapping).setConverter(converter);
      }
      ((AbstractCompositeCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping instanceof XMLBinaryDataCollectionMapping) {
      ((XMLBinaryDataCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      if (converter != null) {
        ((XMLBinaryDataCollectionMapping)nextMapping).setValueConverter(converter);
      }
    }
 else {
      ((XMLCollectionReferenceMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      ((XMLCollectionReferenceMapping)nextMapping).setReuseContainer(true);
    }
    nextMapping.initialize(session);
  }
}"
66084,"public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.fieldToClassMappings.size() == 0) {
    this.convertClassNamesToClasses(((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).getLoader());
  }
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractDirectMapping()) {
      ((XMLDirectMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
      if (converter != null) {
        ((AbstractDirectMapping)nextMapping).setConverter(converter);
      }
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=(QName)xmlConversionManager.getDefaultJavaTypes().get(nextMapping.getAttributeClassification());
      if (schemaType != null && ((XMLField)nextMapping.getField()).getSchemaType() == null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
    }
 else     if (nextMapping instanceof XMLObjectReferenceMapping) {
      ((XMLObjectReferenceMapping)nextMapping).setIsWriteOnly(this.isWriteOnly);
    }
 else     if (nextMapping instanceof XMLBinaryDataMapping) {
      ((XMLBinaryDataMapping)nextMapping).setIsCDATA(this.isWriteOnly);
      if (converter != null) {
        ((XMLBinaryDataMapping)nextMapping).setConverter(converter);
      }
    }
 else {
      ((XMLCompositeObjectMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
      if (converter != null) {
        ((AbstractCompositeObjectMapping)nextMapping).setConverter(converter);
      }
    }
    nextMapping.initialize(session);
  }
}","public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.fieldToClassMappings.size() == 0) {
    this.convertClassNamesToClasses(((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).getLoader());
  }
  if (this.converter != null) {
    this.converter.initialize(this,session);
  }
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractDirectMapping()) {
      ((XMLDirectMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
      if (converter != null) {
        ((AbstractDirectMapping)nextMapping).setConverter(converter);
      }
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=(QName)xmlConversionManager.getDefaultJavaTypes().get(nextMapping.getAttributeClassification());
      if (schemaType != null && ((XMLField)nextMapping.getField()).getSchemaType() == null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
    }
 else     if (nextMapping instanceof XMLObjectReferenceMapping) {
      ((XMLObjectReferenceMapping)nextMapping).setIsWriteOnly(this.isWriteOnly);
    }
 else     if (nextMapping instanceof XMLBinaryDataMapping) {
      ((XMLBinaryDataMapping)nextMapping).setIsCDATA(this.isWriteOnly);
      if (converter != null) {
        ((XMLBinaryDataMapping)nextMapping).setConverter(converter);
      }
    }
 else {
      ((XMLCompositeObjectMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
      if (converter != null) {
        ((AbstractCompositeObjectMapping)nextMapping).setConverter(converter);
      }
    }
    nextMapping.initialize(session);
  }
}"
66085,"/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  if (namespaceURI == XMLConstants.XMLNS_URL) {
    this.startPrefixMapping(localName,value);
  }
  attributes.addAttribute(namespaceURI,localName,qName,XMLConstants.CDATA,value);
}","/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  if (namespaceURI == XMLConstants.XMLNS_URL) {
    if (localName == XMLConstants.XMLNS) {
      localName=""String_Node_Str"";
    }
    this.startPrefixMapping(localName,value);
  }
  attributes.addAttribute(namespaceURI,localName,qName,XMLConstants.CDATA,value);
}"
66086,"/** 
 * Marshal any 'self' mapped attributes.
 * @param xPathFragment
 * @param marshalRecord
 * @param object
 * @param session
 * @param namespaceResolver
 * @param marshaller
 * @return
 */
public boolean marshalSelfAttributes(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,XMLMarshaller marshaller){
  Object objectValue=xmlCompositeObjectMapping.getAttributeValueFromObject(object);
  if (xmlCompositeObjectMapping.getConverter() != null) {
    Converter converter=xmlCompositeObjectMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)session.getDescriptor(objectValue);
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    return objectBuilder.marshalAttributes(marshalRecord,objectValue,session);
  }
  return false;
}","/** 
 * Marshal any 'self' mapped attributes.
 * @param xPathFragment
 * @param marshalRecord
 * @param object
 * @param session
 * @param namespaceResolver
 * @param marshaller
 * @return
 */
public boolean marshalSelfAttributes(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,XMLMarshaller marshaller){
  Object objectValue=xmlCompositeObjectMapping.getAttributeValueFromObject(object);
  if (xmlCompositeObjectMapping.getConverter() != null) {
    Converter converter=xmlCompositeObjectMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)session.getDescriptor(objectValue);
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    return objectBuilder.marshalAttributes(marshalRecord,objectValue,session);
  }
 else {
    if (this.getMapping().getKeepAsElementPolicy() == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT || this.getMapping().getKeepAsElementPolicy() == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) {
      if (objectValue instanceof Node) {
        Node rootNode=(Node)objectValue;
        NamedNodeMap attributes=rootNode.getAttributes();
        for (int i=0; i < attributes.getLength(); i++) {
          Attr next=(Attr)attributes.item(i);
          if (!(XMLConstants.XMLNS_URL.equals(next.getNamespaceURI()))) {
            marshalRecord.node(next,namespaceResolver);
          }
        }
      }
    }
  }
  return false;
}"
66087,"protected IndexedAttributeList buildAttributeList(Element elem) throws SAXException {
  IndexedAttributeList attributes=new IndexedAttributeList();
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0, length=attrs.getLength(); i < length; i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      contentHandler.startPrefixMapping(next.getLocalName(),next.getValue());
      handleXMLNSPrefixedAttribute(elem,next);
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null && name.equals(XMLConstants.XMLNS)) {
        contentHandler.startPrefixMapping(XMLConstants.EMPTY_STRING,next.getValue());
      }
    }
    attributes.addAttribute(next);
  }
  return attributes;
}","protected IndexedAttributeList buildAttributeList(Element elem) throws SAXException {
  IndexedAttributeList attributes=new IndexedAttributeList();
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0, length=attrs.getLength(); i < length; i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      contentHandler.startPrefixMapping(next.getLocalName(),next.getValue());
      handleXMLNSPrefixedAttribute(elem,next);
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null && name.equals(XMLConstants.XMLNS)) {
        contentHandler.startPrefixMapping(XMLConstants.EMPTY_STRING,next.getValue());
      }
    }
    if (next.getNamespaceURI() != null && next.getNamespaceURI().equals(XMLConstants.SCHEMA_INSTANCE_URL) && next.getLocalName().equals(""String_Node_Str"")) {
      handleXsiTypeAttribute(next);
    }
    attributes.addAttribute(next);
  }
  return attributes;
}"
66088,"/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else {
    if (isStartElementOpen) {
      openAndCloseStartElement();
      isStartElementOpen=false;
    }
    if (node.getNodeType() == Node.TEXT_NODE) {
      characters(node.getNodeValue());
    }
 else {
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(contentHandler);
      try {
        xfragReader.parse(node);
      }
 catch (      SAXException sex) {
        throw XMLMarshalException.marshalException(sex);
      }
    }
  }
}","/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (getNamespaceResolver() != null) {
      resolverPfx=this.getNamespaceResolver().resolveNamespaceURI(attr.getNamespaceURI());
    }
    String namespaceURI=attr.getNamespaceURI();
    String localName=attr.getLocalName();
    if (localName == null) {
      localName=XMLConstants.EMPTY_STRING;
    }
    if (resolverPfx != null) {
      attribute(namespaceURI,localName,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(namespaceURI,localName,attr.getName(),attr.getNodeValue());
      if (namespaceURI != null) {
        attribute(XMLConstants.XMLNS_URL,localName,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
        this.getNamespaceResolver().put(attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else {
    if (isStartElementOpen) {
      openAndCloseStartElement();
      isStartElementOpen=false;
    }
    if (node.getNodeType() == Node.TEXT_NODE) {
      characters(node.getNodeValue());
    }
 else {
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(contentHandler);
      try {
        xfragReader.parse(node);
      }
 catch (      SAXException sex) {
        throw XMLMarshalException.marshalException(sex);
      }
    }
  }
}"
66089,"/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    try {
      FormattedWriterRecordContentHandler wrcHandler=new FormattedWriterRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(wrcHandler);
      xfragReader.setProperty(""String_Node_Str"",wrcHandler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}","/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (getNamespaceResolver() != null) {
      resolverPfx=getNamespaceResolver().resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
        this.getNamespaceResolver().put(attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    try {
      FormattedWriterRecordContentHandler wrcHandler=new FormattedWriterRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(wrcHandler);
      xfragReader.setProperty(""String_Node_Str"",wrcHandler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}"
66090,"/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    try {
      OutputStreamRecordContentHandler handler=new OutputStreamRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(handler);
      xfragReader.setProperty(""String_Node_Str"",handler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}","/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (getNamespaceResolver() != null) {
      resolverPfx=this.getNamespaceResolver().resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
        this.getNamespaceResolver().put(attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    try {
      OutputStreamRecordContentHandler handler=new OutputStreamRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(handler);
      xfragReader.setProperty(""String_Node_Str"",handler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}"
66091,"/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    try {
      WriterRecordContentHandler wrcHandler=new WriterRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(wrcHandler);
      xfragReader.setProperty(""String_Node_Str"",wrcHandler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}","/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (getNamespaceResolver() != null) {
      resolverPfx=this.getNamespaceResolver().resolveNamespaceURI(attr.getNamespaceURI());
    }
    String namespaceURI=attr.getNamespaceURI();
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
        this.getNamespaceResolver().put(attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    try {
      WriterRecordContentHandler wrcHandler=new WriterRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(wrcHandler);
      xfragReader.setProperty(""String_Node_Str"",wrcHandler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}"
66092,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlAnyObjectMapping.getConverter() != null) {
    objectValue=xmlAnyObjectMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  }
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    wasXMLRoot=true;
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    Session childSession=null;
    try {
      childSession=marshaller.getXMLContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(objectValue);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if ((rootFragment.getNamespaceURI() == null) && (rootFragment.getPrefix() != null)) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,null,WriteType.UNDEFINED);
      marshalRecord.afterContainmentMarshal(object,objectValue);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlAnyObjectMapping.getConverter() != null) {
    objectValue=xmlAnyObjectMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  }
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    wasXMLRoot=true;
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    Session childSession=null;
    try {
      childSession=marshaller.getXMLContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(objectValue);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          if (rootFragment.getPrefix() != null) {
            String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
            rootFragment.setNamespaceURI(uri);
          }
 else {
            rootFragment.setNamespaceURI(descriptor.getNonNullNamespaceResolver().getDefaultNamespaceURI());
          }
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,null,WriteType.UNDEFINED);
      marshalRecord.afterContainmentMarshal(object,objectValue);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
    }
  }
  return true;
}"
66093,"public void fatalError(SAXParseException exception) throws SAXException {
  if (null == exception) {
    throw exception;
  }
  errorHandler.fatalError(marshalSAXParseException(exception));
}","public void fatalError(SAXParseException exception) throws SAXException {
  if (null == errorHandler) {
    throw exception;
  }
  errorHandler.fatalError(marshalSAXParseException(exception));
}"
66094,"public void error(SAXParseException exception) throws SAXException {
  if (null == exception) {
    throw exception;
  }
  errorHandler.error(marshalSAXParseException(exception));
}","public void error(SAXParseException exception) throws SAXException {
  if (null == errorHandler) {
    throw exception;
  }
  errorHandler.error(marshalSAXParseException(exception));
}"
66095,"public static JAXBException incorrectNumberOfXmlJoinNodesOnXmlElements(String propertyName,String className){
  Object[] args={propertyName,className};
  JAXBException validationException=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,INCORRECT_NUMBER_OF_XMLJOINNODES_ON_XMLELEMENTS,args));
  validationException.setErrorCode(INCORRECT_NUMBER_OF_XMLJOINNODES_ON_XMLELEMENTS);
  return validationException;
}","/** 
 * PUBLIC: Cause: There is a different number of XmlElements and XmlJoinNodes entries in a given XmlElementsJoinNodes.  There must be an equal number of each.
 * @param propertyName name of the Property containing the XmlElementsJoinNodes
 * @param className name of the owning class
 * @return
 */
public static JAXBException incorrectNumberOfXmlJoinNodesOnXmlElements(String propertyName,String className){
  Object[] args={propertyName,className};
  JAXBException validationException=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,INCORRECT_NUMBER_OF_XMLJOINNODES_ON_XMLELEMENTS,args));
  validationException.setErrorCode(INCORRECT_NUMBER_OF_XMLJOINNODES_ON_XMLELEMENTS);
  return validationException;
}"
66096,"/** 
 * The underlying choice element node value will handle attributes.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String URI,String localName,String value){
  this.choiceElementNodeValue.attribute(unmarshalRecord,URI,localName,value);
}","/** 
 * The underlying choice element node value will handle attributes.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String URI,String localName,String value){
  unmarshalRecord.removeNullCapableValue(this.nullCapableNodeValue);
  this.choiceElementNodeValue.attribute(unmarshalRecord,URI,localName,value);
}"
66097,"private void addChoiceElementMapping(XMLField xmlField,Class theClass){
  if (xmlField.getLastXPathFragment().nameIsText()) {
    XMLCompositeDirectCollectionMapping xmlMapping=new XMLCompositeDirectCollectionMapping();
    xmlMapping.setAttributeElementClass(theClass);
    xmlMapping.setField(xmlField);
    xmlMapping.setAttributeAccessor(temporaryAccessor);
    this.choiceElementMappings.put(xmlField,xmlMapping);
  }
 else {
    if (isBinaryType(theClass)) {
      XMLBinaryDataCollectionMapping xmlMapping=new XMLBinaryDataCollectionMapping();
      xmlMapping.setField(xmlField);
      xmlMapping.setAttributeElementClass(theClass);
      xmlMapping.setAttributeAccessor(temporaryAccessor);
      this.fieldsToConverters.put(xmlField,xmlMapping.getValueConverter());
      this.choiceElementMappings.put(xmlField,xmlMapping);
    }
 else {
      XMLCompositeCollectionMapping xmlMapping=new XMLCompositeCollectionMapping();
      if (!theClass.equals(ClassConstants.OBJECT)) {
        xmlMapping.setReferenceClass(theClass);
      }
      xmlMapping.setField(xmlField);
      xmlMapping.setAttributeAccessor(temporaryAccessor);
      this.choiceElementMappings.put(xmlField,xmlMapping);
    }
  }
}","private void addChoiceElementMapping(XMLField xmlField,Class theClass){
  if (xmlField.getLastXPathFragment().nameIsText() || xmlField.getLastXPathFragment().isAttribute()) {
    XMLCompositeDirectCollectionMapping xmlMapping=new XMLCompositeDirectCollectionMapping();
    xmlMapping.setAttributeElementClass(theClass);
    xmlMapping.setField(xmlField);
    xmlMapping.setAttributeAccessor(temporaryAccessor);
    this.choiceElementMappings.put(xmlField,xmlMapping);
  }
 else {
    if (isBinaryType(theClass)) {
      XMLBinaryDataCollectionMapping xmlMapping=new XMLBinaryDataCollectionMapping();
      xmlMapping.setField(xmlField);
      xmlMapping.setAttributeElementClass(theClass);
      xmlMapping.setAttributeAccessor(temporaryAccessor);
      this.fieldsToConverters.put(xmlField,xmlMapping.getValueConverter());
      this.choiceElementMappings.put(xmlField,xmlMapping);
    }
 else {
      XMLCompositeCollectionMapping xmlMapping=new XMLCompositeCollectionMapping();
      if (!theClass.equals(ClassConstants.OBJECT)) {
        xmlMapping.setReferenceClass(theClass);
      }
      xmlMapping.setField(xmlField);
      xmlMapping.setAttributeAccessor(temporaryAccessor);
      this.choiceElementMappings.put(xmlField,xmlMapping);
    }
  }
}"
66098,"public XMLInlineBinaryHandler(UnmarshalRecord parent,NodeValue nodeValue,DatabaseMapping mapping,Converter converter,boolean isCollection){
  super(null);
  this.nodeValue=nodeValue;
  this.isCollection=isCollection;
  this.mapping=mapping;
  this.parent=parent;
  this.setUnmarshaller(parent.getUnmarshaller());
}","public XMLInlineBinaryHandler(UnmarshalRecord parent,NodeValue nodeValue,DatabaseMapping mapping,Converter converter,boolean isCollection){
  super(null);
  this.nodeValue=nodeValue;
  this.isCollection=isCollection;
  this.mapping=mapping;
  this.parent=parent;
  this.converter=converter;
  this.setUnmarshaller(parent.getUnmarshaller());
}"
66099,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField field=null;
  Object value=this.getStringBuffer().toString();
  resetStringBuffer();
  Class attributeClassification=null;
  boolean isSwaRef=false;
  if (isCollection) {
    isSwaRef=((XMLBinaryDataCollectionMapping)mapping).isSwaRef();
    field=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
    attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
  }
 else {
    isSwaRef=((XMLBinaryDataMapping)mapping).isSwaRef();
    field=(XMLField)((XMLBinaryDataMapping)mapping).getField();
    attributeClassification=((XMLBinaryDataMapping)mapping).getAttributeClassification();
  }
  if (isSwaRef && (parent.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (attributeClassification != null && attributeClassification == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
    }
 else {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
    }
    if (converter != null) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,parent.getSession());
      }
    }
  }
 else {
    value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ToByteArray(value);
    if (converter != null) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,parent.getSession());
      }
    }
  }
  value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,attributeClassification,parent.getSession());
  if (isCollection) {
    if (value != null) {
      parent.addAttributeValue((ContainerValue)nodeValue,value);
    }
  }
 else {
    parent.setAttributeValue(value,mapping);
  }
  if (!field.isSelfField()) {
    parent.getXMLReader().setContentHandler(parent);
    parent.endElement(namespaceURI,localName,qName);
  }
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField field=null;
  Object value=this.getStringBuffer().toString();
  resetStringBuffer();
  Class attributeClassification=null;
  boolean isSwaRef=false;
  if (isCollection) {
    isSwaRef=((XMLBinaryDataCollectionMapping)mapping).isSwaRef();
    field=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
    attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
  }
 else {
    isSwaRef=((XMLBinaryDataMapping)mapping).isSwaRef();
    field=(XMLField)((XMLBinaryDataMapping)mapping).getField();
    attributeClassification=((XMLBinaryDataMapping)mapping).getAttributeClassification();
  }
  if (isSwaRef && (parent.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (attributeClassification != null && attributeClassification == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
    }
 else {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
    }
    if (converter != null) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,parent.getSession());
      }
    }
  }
 else {
    value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ToByteArray(value);
  }
  value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,attributeClassification,parent.getSession());
  if (converter != null) {
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
    }
 else {
      value=converter.convertDataValueToObjectValue(value,parent.getSession());
    }
  }
  if (isCollection) {
    if (value != null) {
      parent.addAttributeValue((ContainerValue)nodeValue,value);
    }
  }
 else {
    parent.setAttributeValue(value,mapping);
  }
  if (!field.isSelfField()) {
    parent.getXMLReader().setContentHandler(parent);
    parent.endElement(namespaceURI,localName,qName);
  }
}"
66100,"/** 
 * INTERNAL: Get the QName which the given Type corresponds to. Valid types should be all the boundTypes used to create the JAXBContext. If the JAXBContext was not created with the construction that takes a Type[] then  this will be return null.
 */
private QName getSchemaTypeForTypeMappingInfo(Type type){
  QName name=null;
  if (type instanceof Class) {
    name=this.generator.getAnnotationsProcessor().getUserDefinedSchemaTypes().get(((Class)type).getName());
    if (name == null) {
      Class theClass=(Class)type;
      if (type == ClassConstants.ABYTE || type == ClassConstants.APBYTE || type == Image.class || type == Source.class || theClass.getCanonicalName().equals(""String_Node_Str"")) {
        name=XMLConstants.BASE_64_BINARY_QNAME;
      }
 else       if (type == ClassConstants.OBJECT) {
        name=XMLConstants.ANY_TYPE_QNAME;
      }
 else {
        name=(QName)XMLConversionManager.getDefaultJavaTypes().get(type);
      }
    }
  }
  return name;
}","/** 
 * INTERNAL: Get the QName which the given Type corresponds to. Valid types should be all the boundTypes used to create the JAXBContext. If the JAXBContext was not created with the construction that takes a Type[] then  this will be return null.
 */
private QName getSchemaTypeForTypeMappingInfo(Type type){
  QName name=null;
  if (type instanceof Class) {
    name=this.generator.getAnnotationsProcessor().getUserDefinedSchemaTypes().get(((Class)type).getName());
    if (name == null) {
      Class theClass=(Class)type;
      if (type == ClassConstants.ABYTE || type == ClassConstants.APBYTE || type == Image.class || type == Source.class || theClass.getCanonicalName().equals(""String_Node_Str"")) {
        name=XMLConstants.BASE_64_BINARY_QNAME;
      }
 else       if (type == ClassConstants.OBJECT) {
        name=XMLConstants.ANY_TYPE_QNAME;
      }
 else       if (type == ClassConstants.XML_GREGORIAN_CALENDAR) {
        name=XMLConstants.ANY_SIMPLE_TYPE_QNAME;
      }
 else {
        name=(QName)XMLConversionManager.getDefaultJavaTypes().get(type);
      }
    }
  }
  return name;
}"
66101,"public void createElementsForTypeMappingInfo(){
  if (this.javaClassToTypeMappingInfos != null && !this.javaClassToTypeMappingInfos.isEmpty()) {
    Set<JavaClass> classes=this.javaClassToTypeMappingInfos.keySet();
    for (    JavaClass nextClass : classes) {
      TypeMappingInfo nextInfo=this.javaClassToTypeMappingInfos.get(nextClass);
      if (nextInfo != null) {
        boolean xmlAttachmentRef=false;
        String xmlMimeType=null;
        java.lang.annotation.Annotation[] annotations=getAnnotations(nextInfo);
        Class adapterClass=this.typeMappingInfoToAdapterClasses.get(nextInfo);
        Class declJavaType=null;
        if (adapterClass != null) {
          declJavaType=CompilerHelper.getTypeFromAdapterClass(adapterClass);
        }
        if (annotations != null) {
          for (int j=0; j < annotations.length; j++) {
            java.lang.annotation.Annotation nextAnnotation=annotations[j];
            if (nextAnnotation != null) {
              if (nextAnnotation instanceof XmlMimeType) {
                XmlMimeType javaAnnotation=(XmlMimeType)nextAnnotation;
                xmlMimeType=javaAnnotation.value();
              }
 else               if (nextAnnotation instanceof XmlAttachmentRef) {
                xmlAttachmentRef=true;
              }
            }
          }
        }
        QName qname=null;
        String nextClassName=nextClass.getQualifiedName();
        if (declJavaType != null) {
          nextClassName=declJavaType.getCanonicalName();
        }
        if (typeMappingInfoToGeneratedClasses != null) {
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            nextClassName=generatedClass.getCanonicalName();
          }
        }
        TypeInfo nextTypeInfo=typeInfo.get(nextClassName);
        if (nextTypeInfo != null) {
          qname=new QName(nextTypeInfo.getClassNamespace(),nextTypeInfo.getSchemaTypeName());
        }
 else {
          qname=getUserDefinedSchemaTypes().get(nextClassName);
          if (qname == null) {
            if (nextClassName.equals(ClassConstants.ABYTE.getName()) || nextClassName.equals(ClassConstants.APBYTE.getName()) || nextClassName.equals(Image.class.getName())|| nextClassName.equals(Source.class.getName())|| nextClassName.equals(""String_Node_Str"")) {
              if (xmlAttachmentRef) {
                qname=XMLConstants.SWA_REF_QNAME;
              }
 else {
                qname=XMLConstants.BASE_64_BINARY_QNAME;
              }
            }
 else             if (nextClassName.equals(ClassConstants.OBJECT.getName())) {
              qname=XMLConstants.ANY_TYPE_QNAME;
            }
 else {
              Class theClass=helper.getClassForJavaClass(nextClass);
              qname=(QName)XMLConversionManager.getDefaultJavaTypes().get(theClass);
            }
          }
        }
        if (qname != null) {
          typeMappingInfoToSchemaType.put(nextInfo,qname);
        }
        if (nextInfo.getXmlTagName() != null) {
          ElementDeclaration element=new ElementDeclaration(nextInfo.getXmlTagName(),nextClass,nextClass.getQualifiedName(),false);
          element.setTypeMappingInfo(nextInfo);
          element.setXmlMimeType(xmlMimeType);
          element.setXmlAttachmentRef(xmlAttachmentRef);
          if (declJavaType != null) {
            element.setJavaType(helper.getJavaClass(declJavaType));
          }
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            element.setJavaType(helper.getJavaClass(generatedClass));
          }
          if (nextInfo.getElementScope() == TypeMappingInfo.ElementScope.Global) {
            this.getGlobalElements().put(element.getElementName(),element);
          }
 else {
            this.localElements.add(element);
          }
        }
      }
    }
  }
}","public void createElementsForTypeMappingInfo(){
  if (this.javaClassToTypeMappingInfos != null && !this.javaClassToTypeMappingInfos.isEmpty()) {
    Set<JavaClass> classes=this.javaClassToTypeMappingInfos.keySet();
    for (    JavaClass nextClass : classes) {
      TypeMappingInfo nextInfo=this.javaClassToTypeMappingInfos.get(nextClass);
      if (nextInfo != null) {
        boolean xmlAttachmentRef=false;
        String xmlMimeType=null;
        java.lang.annotation.Annotation[] annotations=getAnnotations(nextInfo);
        Class adapterClass=this.typeMappingInfoToAdapterClasses.get(nextInfo);
        Class declJavaType=null;
        if (adapterClass != null) {
          declJavaType=CompilerHelper.getTypeFromAdapterClass(adapterClass);
        }
        if (annotations != null) {
          for (int j=0; j < annotations.length; j++) {
            java.lang.annotation.Annotation nextAnnotation=annotations[j];
            if (nextAnnotation != null) {
              if (nextAnnotation instanceof XmlMimeType) {
                XmlMimeType javaAnnotation=(XmlMimeType)nextAnnotation;
                xmlMimeType=javaAnnotation.value();
              }
 else               if (nextAnnotation instanceof XmlAttachmentRef) {
                xmlAttachmentRef=true;
              }
            }
          }
        }
        QName qname=null;
        String nextClassName=nextClass.getQualifiedName();
        if (declJavaType != null) {
          nextClassName=declJavaType.getCanonicalName();
        }
        if (typeMappingInfoToGeneratedClasses != null) {
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            nextClassName=generatedClass.getCanonicalName();
          }
        }
        TypeInfo nextTypeInfo=typeInfo.get(nextClassName);
        if (nextTypeInfo != null) {
          qname=new QName(nextTypeInfo.getClassNamespace(),nextTypeInfo.getSchemaTypeName());
        }
 else {
          qname=getUserDefinedSchemaTypes().get(nextClassName);
          if (qname == null) {
            if (nextClassName.equals(ClassConstants.ABYTE.getName()) || nextClassName.equals(ClassConstants.APBYTE.getName()) || nextClassName.equals(Image.class.getName())|| nextClassName.equals(Source.class.getName())|| nextClassName.equals(""String_Node_Str"")) {
              if (xmlAttachmentRef) {
                qname=XMLConstants.SWA_REF_QNAME;
              }
 else {
                qname=XMLConstants.BASE_64_BINARY_QNAME;
              }
            }
 else             if (nextClassName.equals(ClassConstants.OBJECT.getName())) {
              qname=XMLConstants.ANY_TYPE_QNAME;
            }
 else             if (nextClassName.equals(ClassConstants.XML_GREGORIAN_CALENDAR.getName())) {
              qname=XMLConstants.ANY_SIMPLE_TYPE_QNAME;
            }
 else {
              Class theClass=helper.getClassForJavaClass(nextClass);
              qname=(QName)XMLConversionManager.getDefaultJavaTypes().get(theClass);
            }
          }
        }
        if (qname != null) {
          typeMappingInfoToSchemaType.put(nextInfo,qname);
        }
        if (nextInfo.getXmlTagName() != null) {
          ElementDeclaration element=new ElementDeclaration(nextInfo.getXmlTagName(),nextClass,nextClass.getQualifiedName(),false);
          element.setTypeMappingInfo(nextInfo);
          element.setXmlMimeType(xmlMimeType);
          element.setXmlAttachmentRef(xmlAttachmentRef);
          if (declJavaType != null) {
            element.setJavaType(helper.getJavaClass(declJavaType));
          }
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            element.setJavaType(helper.getJavaClass(generatedClass));
          }
          if (nextInfo.getElementScope() == TypeMappingInfo.ElementScope.Global) {
            this.getGlobalElements().put(element.getElementName(),element);
          }
 else {
            this.localElements.add(element);
          }
        }
      }
    }
  }
}"
66102,"public void addGlobalElements(HashMap<QName,ElementDeclaration> additionalElements){
  for (  Entry<QName,ElementDeclaration> entry : additionalElements.entrySet()) {
    QName next=entry.getKey();
    if (next != null) {
      ElementDeclaration nextElement=entry.getValue();
      if (nextElement.getScopeClass() == GLOBAL.class) {
        String namespaceURI=next.getNamespaceURI();
        Schema targetSchema=getSchemaForNamespace(namespaceURI);
        if (targetSchema == null) {
          break;
        }
        if (targetSchema.getTopLevelElements().get(next.getLocalPart()) == null) {
          Element element=new Element();
          element.setName(next.getLocalPart());
          JavaClass javaClass=nextElement.getJavaType();
          QName schemaType=(QName)helper.getXMLToJavaTypeMap().get(javaClass.getRawName());
          if (schemaType != null) {
            element.setType(XMLConstants.SCHEMA_PREFIX + COLON + schemaType.getLocalPart());
          }
 else           if (areEquals(javaClass,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(javaClass,byte[].class) || areEquals(javaClass,Byte[].class)|| areEquals(javaClass,Image.class)|| areEquals(javaClass,Source.class)|| areEquals(javaClass,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
            schemaType=XMLConstants.BASE_64_BINARY_QNAME;
            if (nextElement.getTypeMappingInfo() != null) {
              if (nextElement.isXmlAttachmentRef()) {
                schemaType=XMLConstants.SWA_REF_QNAME;
              }
              if (nextElement.getXmlMimeType() != null) {
                element.getAttributesMap().put(XMLConstants.EXPECTED_CONTENT_TYPES_QNAME,nextElement.getXmlMimeType());
              }
            }
            String prefix=getOrGeneratePrefixForNamespace(schemaType.getNamespaceURI(),targetSchema);
            element.setType(prefix + COLON + schemaType.getLocalPart());
          }
 else {
            TypeInfo type=(TypeInfo)this.typeInfo.get(javaClass.getQualifiedName());
            if (type != null) {
              String typeName=null;
              if (type.isComplexType()) {
                typeName=type.getComplexType().getName();
              }
 else {
                typeName=type.getSimpleType().getName();
              }
              if (typeName == null) {
                Schema schema=getSchemaForNamespace(next.getNamespaceURI());
                ComplexType cType=new ComplexType();
                TypeDefParticle particle=new Sequence();
                cType.setTypeDefParticle(particle);
                element.setComplexType(cType);
                addToSchemaType(type,type.getPropertyList(),particle,cType,schema);
                targetSchema=schema;
              }
 else {
                if (type.getClassNamespace().equals(namespaceURI)) {
                  String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(namespaceURI);
                  if (prefix != null && !(prefix.equals(EMPTY_STRING))) {
                    element.setType(prefix + COLON + typeName);
                  }
 else {
                    element.setType(typeName);
                  }
                }
 else {
                  Schema complexTypeSchema=getSchemaForNamespace(type.getClassNamespace());
                  String complexTypeSchemaNS=type.getClassNamespace();
                  if (complexTypeSchemaNS == null) {
                    complexTypeSchemaNS=EMPTY_STRING;
                  }
                  addImportIfRequired(targetSchema,complexTypeSchema,type.getClassNamespace());
                  String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(complexTypeSchemaNS);
                  if (prefix != null) {
                    element.setType(prefix + COLON + typeName);
                  }
 else {
                    element.setType(typeName);
                  }
                }
              }
            }
          }
          if (nextElement.getSubstitutionHead() != null) {
            String subLocal=nextElement.getSubstitutionHead().getLocalPart();
            String subNamespace=nextElement.getSubstitutionHead().getNamespaceURI();
            String prefix=getPrefixForNamespace(subNamespace,targetSchema.getNamespaceResolver());
            if (prefix == null || prefix.equals(EMPTY_STRING)) {
              element.setSubstitutionGroup(subLocal);
            }
 else {
              element.setSubstitutionGroup(prefix + COLON + subLocal);
            }
          }
          targetSchema.addTopLevelElement(element);
          SchemaTypeInfo info=this.schemaTypeInfo.get(javaClass.getQualifiedName());
          if (info == null) {
            info=new SchemaTypeInfo();
            info.setSchemaTypeName(schemaType);
            schemaTypeInfo.put(javaClass.getQualifiedName(),info);
          }
          info.getGlobalElementDeclarations().add(next);
        }
      }
    }
  }
}","public void addGlobalElements(HashMap<QName,ElementDeclaration> additionalElements){
  for (  Entry<QName,ElementDeclaration> entry : additionalElements.entrySet()) {
    QName next=entry.getKey();
    if (next != null) {
      ElementDeclaration nextElement=entry.getValue();
      if (nextElement.getScopeClass() == GLOBAL.class) {
        String namespaceURI=next.getNamespaceURI();
        Schema targetSchema=getSchemaForNamespace(namespaceURI);
        if (targetSchema == null) {
          break;
        }
        if (targetSchema.getTopLevelElements().get(next.getLocalPart()) == null) {
          Element element=new Element();
          element.setName(next.getLocalPart());
          JavaClass javaClass=nextElement.getJavaType();
          QName schemaType=(QName)helper.getXMLToJavaTypeMap().get(javaClass.getRawName());
          if (schemaType != null) {
            element.setType(XMLConstants.SCHEMA_PREFIX + COLON + schemaType.getLocalPart());
          }
 else           if (areEquals(javaClass,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(javaClass,byte[].class) || areEquals(javaClass,Byte[].class)|| areEquals(javaClass,Image.class)|| areEquals(javaClass,Source.class)|| areEquals(javaClass,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
            schemaType=XMLConstants.BASE_64_BINARY_QNAME;
            if (nextElement.getTypeMappingInfo() != null) {
              if (nextElement.isXmlAttachmentRef()) {
                schemaType=XMLConstants.SWA_REF_QNAME;
              }
              if (nextElement.getXmlMimeType() != null) {
                element.getAttributesMap().put(XMLConstants.EXPECTED_CONTENT_TYPES_QNAME,nextElement.getXmlMimeType());
              }
            }
            String prefix=getOrGeneratePrefixForNamespace(schemaType.getNamespaceURI(),targetSchema);
            element.setType(prefix + COLON + schemaType.getLocalPart());
          }
 else           if (areEquals(javaClass,ClassConstants.XML_GREGORIAN_CALENDAR)) {
            schemaType=XMLConstants.ANY_SIMPLE_TYPE_QNAME;
            element.setType(XMLConstants.SCHEMA_PREFIX + COLON + schemaType.getLocalPart());
          }
 else {
            TypeInfo type=(TypeInfo)this.typeInfo.get(javaClass.getQualifiedName());
            if (type != null) {
              String typeName=null;
              if (type.isComplexType()) {
                typeName=type.getComplexType().getName();
              }
 else {
                typeName=type.getSimpleType().getName();
              }
              if (typeName == null) {
                Schema schema=getSchemaForNamespace(next.getNamespaceURI());
                ComplexType cType=new ComplexType();
                TypeDefParticle particle=new Sequence();
                cType.setTypeDefParticle(particle);
                element.setComplexType(cType);
                addToSchemaType(type,type.getPropertyList(),particle,cType,schema);
                targetSchema=schema;
              }
 else {
                if (type.getClassNamespace().equals(namespaceURI)) {
                  String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(namespaceURI);
                  if (prefix != null && !(prefix.equals(EMPTY_STRING))) {
                    element.setType(prefix + COLON + typeName);
                  }
 else {
                    element.setType(typeName);
                  }
                }
 else {
                  Schema complexTypeSchema=getSchemaForNamespace(type.getClassNamespace());
                  String complexTypeSchemaNS=type.getClassNamespace();
                  if (complexTypeSchemaNS == null) {
                    complexTypeSchemaNS=EMPTY_STRING;
                  }
                  addImportIfRequired(targetSchema,complexTypeSchema,type.getClassNamespace());
                  String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(complexTypeSchemaNS);
                  if (prefix != null) {
                    element.setType(prefix + COLON + typeName);
                  }
 else {
                    element.setType(typeName);
                  }
                }
              }
            }
          }
          if (nextElement.getSubstitutionHead() != null) {
            String subLocal=nextElement.getSubstitutionHead().getLocalPart();
            String subNamespace=nextElement.getSubstitutionHead().getNamespaceURI();
            String prefix=getPrefixForNamespace(subNamespace,targetSchema.getNamespaceResolver());
            if (prefix == null || prefix.equals(EMPTY_STRING)) {
              element.setSubstitutionGroup(subLocal);
            }
 else {
              element.setSubstitutionGroup(prefix + COLON + subLocal);
            }
          }
          targetSchema.addTopLevelElement(element);
          SchemaTypeInfo info=this.schemaTypeInfo.get(javaClass.getQualifiedName());
          if (info == null) {
            info=new SchemaTypeInfo();
            info.setSchemaTypeName(schemaType);
            schemaTypeInfo.put(javaClass.getQualifiedName(),info);
          }
          info.getGlobalElementDeclarations().add(next);
        }
      }
    }
  }
}"
66103,"public JavaClass[] processObjectFactory(JavaClass objectFactoryClass,ArrayList<JavaClass> classes){
  Map<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl> elemDecls=new HashMap<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl>();
  org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry xmlReg=xmlRegistries.get(objectFactoryClass.getQualifiedName());
  if (xmlReg != null) {
    for (    org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlElementDecl : xmlReg.getXmlElementDecl()) {
      elemDecls.put(xmlElementDecl.getJavaMethod(),xmlElementDecl);
    }
  }
  Collection methods=objectFactoryClass.getDeclaredMethods();
  Iterator methodsIter=methods.iterator();
  NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(objectFactoryClass);
  while (methodsIter.hasNext()) {
    JavaMethod next=(JavaMethod)methodsIter.next();
    if (next.getName().startsWith(CREATE)) {
      JavaClass type=next.getReturnType();
      if (JAVAX_XML_BIND_JAXBELEMENT.equals(type.getName())) {
        type=(JavaClass)next.getReturnType().getActualTypeArguments().toArray()[0];
      }
 else {
        this.factoryMethods.put(next.getReturnType().getRawName(),next);
      }
      org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlEltDecl=elemDecls.get(next.getName());
      if (xmlEltDecl != null || helper.isAnnotationPresent(next,XmlElementDecl.class)) {
        QName qname;
        QName substitutionHead=null;
        String url;
        String localName;
        String defaultValue=null;
        Class scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
        if (xmlEltDecl != null) {
          url=xmlEltDecl.getNamespace();
          localName=xmlEltDecl.getName();
          String scopeClassName=xmlEltDecl.getScope();
          if (!scopeClassName.equals(ELEMENT_DECL_GLOBAL)) {
            JavaClass jScopeClass=helper.getJavaClass(scopeClassName);
            if (jScopeClass != null) {
              scopeClass=helper.getClassForJavaClass(jScopeClass);
              if (scopeClass == null) {
                scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
              }
            }
          }
          if (!xmlEltDecl.getSubstitutionHeadName().equals(EMPTY_STRING)) {
            String subHeadLocal=xmlEltDecl.getSubstitutionHeadName();
            String subHeadNamespace=xmlEltDecl.getSubstitutionHeadNamespace();
            if (subHeadNamespace.equals(XMLProcessor.DEFAULT)) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(xmlEltDecl.getDefaultValue().length() == 1 && xmlEltDecl.getDefaultValue().startsWith(ELEMENT_DECL_DEFAULT))) {
            defaultValue=xmlEltDecl.getDefaultValue();
          }
        }
 else {
          XmlElementDecl elementDecl=(XmlElementDecl)helper.getAnnotation(next,XmlElementDecl.class);
          url=elementDecl.namespace();
          localName=elementDecl.name();
          scopeClass=elementDecl.scope();
          if (!elementDecl.substitutionHeadName().equals(EMPTY_STRING)) {
            String subHeadLocal=elementDecl.substitutionHeadName();
            String subHeadNamespace=elementDecl.substitutionHeadNamespace();
            if (subHeadNamespace.equals(XMLProcessor.DEFAULT)) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(elementDecl.defaultValue().length() == 1 && elementDecl.defaultValue().startsWith(ELEMENT_DECL_DEFAULT))) {
            defaultValue=elementDecl.defaultValue();
          }
        }
        if (XMLProcessor.DEFAULT.equals(url)) {
          url=namespaceInfo.getNamespace();
        }
        qname=new QName(url,localName);
        boolean isList=false;
        if (JAVA_UTIL_LIST.equals(type.getName())) {
          isList=true;
          if (type.hasActualTypeArguments()) {
            type=(JavaClass)type.getActualTypeArguments().toArray()[0];
          }
        }
        ElementDeclaration declaration=new ElementDeclaration(qname,type,type.getQualifiedName(),isList,scopeClass);
        if (substitutionHead != null) {
          declaration.setSubstitutionHead(substitutionHead);
        }
        if (defaultValue != null) {
          declaration.setDefaultValue(defaultValue);
        }
        if (helper.isAnnotationPresent(next,XmlJavaTypeAdapter.class)) {
          XmlJavaTypeAdapter typeAdapter=(XmlJavaTypeAdapter)helper.getAnnotation(next,XmlJavaTypeAdapter.class);
          Class typeAdapterClass=typeAdapter.value();
          declaration.setJavaTypeAdapterClass(typeAdapterClass);
          Class declJavaType=CompilerHelper.getTypeFromAdapterClass(typeAdapterClass);
          declaration.setJavaType(helper.getJavaClass(declJavaType));
          declaration.setAdaptedJavaType(type);
        }
        HashMap<QName,ElementDeclaration> elements=getElementDeclarationsForScope(scopeClass.getName());
        if (elements == null) {
          elements=new HashMap<QName,ElementDeclaration>();
          this.elementDeclarations.put(scopeClass.getName(),elements);
        }
        elements.put(qname,declaration);
      }
      if (!helper.isBuiltInJavaType(type) && !helper.classExistsInArray(type,classes)) {
        classes.add(type);
      }
    }
  }
  if (classes.size() > 0) {
    return classes.toArray(new JavaClass[classes.size()]);
  }
 else {
    return new JavaClass[0];
  }
}","public JavaClass[] processObjectFactory(JavaClass objectFactoryClass,ArrayList<JavaClass> classes){
  Map<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl> elemDecls=new HashMap<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl>();
  org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry xmlReg=xmlRegistries.get(objectFactoryClass.getQualifiedName());
  if (xmlReg != null) {
    for (    org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlElementDecl : xmlReg.getXmlElementDecl()) {
      elemDecls.put(xmlElementDecl.getJavaMethod(),xmlElementDecl);
    }
  }
  Collection methods=objectFactoryClass.getDeclaredMethods();
  Iterator methodsIter=methods.iterator();
  NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(objectFactoryClass);
  while (methodsIter.hasNext()) {
    JavaMethod next=(JavaMethod)methodsIter.next();
    if (next.getName().startsWith(CREATE)) {
      JavaClass type=next.getReturnType();
      if (JAVAX_XML_BIND_JAXBELEMENT.equals(type.getName())) {
        Object[] actutalTypeArguments=next.getReturnType().getActualTypeArguments().toArray();
        if (actutalTypeArguments.length == 0) {
          type=helper.getJavaClass(Object.class);
        }
 else {
          type=(JavaClass)next.getReturnType().getActualTypeArguments().toArray()[0];
        }
      }
 else {
        this.factoryMethods.put(next.getReturnType().getRawName(),next);
      }
      org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlEltDecl=elemDecls.get(next.getName());
      if (xmlEltDecl != null || helper.isAnnotationPresent(next,XmlElementDecl.class)) {
        QName qname;
        QName substitutionHead=null;
        String url;
        String localName;
        String defaultValue=null;
        Class scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
        if (xmlEltDecl != null) {
          url=xmlEltDecl.getNamespace();
          localName=xmlEltDecl.getName();
          String scopeClassName=xmlEltDecl.getScope();
          if (!scopeClassName.equals(ELEMENT_DECL_GLOBAL)) {
            JavaClass jScopeClass=helper.getJavaClass(scopeClassName);
            if (jScopeClass != null) {
              scopeClass=helper.getClassForJavaClass(jScopeClass);
              if (scopeClass == null) {
                scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
              }
            }
          }
          if (!xmlEltDecl.getSubstitutionHeadName().equals(EMPTY_STRING)) {
            String subHeadLocal=xmlEltDecl.getSubstitutionHeadName();
            String subHeadNamespace=xmlEltDecl.getSubstitutionHeadNamespace();
            if (subHeadNamespace.equals(XMLProcessor.DEFAULT)) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(xmlEltDecl.getDefaultValue().length() == 1 && xmlEltDecl.getDefaultValue().startsWith(ELEMENT_DECL_DEFAULT))) {
            defaultValue=xmlEltDecl.getDefaultValue();
          }
        }
 else {
          XmlElementDecl elementDecl=(XmlElementDecl)helper.getAnnotation(next,XmlElementDecl.class);
          url=elementDecl.namespace();
          localName=elementDecl.name();
          scopeClass=elementDecl.scope();
          if (!elementDecl.substitutionHeadName().equals(EMPTY_STRING)) {
            String subHeadLocal=elementDecl.substitutionHeadName();
            String subHeadNamespace=elementDecl.substitutionHeadNamespace();
            if (subHeadNamespace.equals(XMLProcessor.DEFAULT)) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(elementDecl.defaultValue().length() == 1 && elementDecl.defaultValue().startsWith(ELEMENT_DECL_DEFAULT))) {
            defaultValue=elementDecl.defaultValue();
          }
        }
        if (XMLProcessor.DEFAULT.equals(url)) {
          url=namespaceInfo.getNamespace();
        }
        qname=new QName(url,localName);
        boolean isList=false;
        if (JAVA_UTIL_LIST.equals(type.getName())) {
          isList=true;
          if (type.hasActualTypeArguments()) {
            type=(JavaClass)type.getActualTypeArguments().toArray()[0];
          }
        }
        ElementDeclaration declaration=new ElementDeclaration(qname,type,type.getQualifiedName(),isList,scopeClass);
        if (substitutionHead != null) {
          declaration.setSubstitutionHead(substitutionHead);
        }
        if (defaultValue != null) {
          declaration.setDefaultValue(defaultValue);
        }
        if (helper.isAnnotationPresent(next,XmlJavaTypeAdapter.class)) {
          XmlJavaTypeAdapter typeAdapter=(XmlJavaTypeAdapter)helper.getAnnotation(next,XmlJavaTypeAdapter.class);
          Class typeAdapterClass=typeAdapter.value();
          declaration.setJavaTypeAdapterClass(typeAdapterClass);
          Class declJavaType=CompilerHelper.getTypeFromAdapterClass(typeAdapterClass);
          declaration.setJavaType(helper.getJavaClass(declJavaType));
          declaration.setAdaptedJavaType(type);
        }
        HashMap<QName,ElementDeclaration> elements=getElementDeclarationsForScope(scopeClass.getName());
        if (elements == null) {
          elements=new HashMap<QName,ElementDeclaration>();
          this.elementDeclarations.put(scopeClass.getName(),elements);
        }
        elements.put(qname,declaration);
      }
      if (!helper.isBuiltInJavaType(type) && !helper.classExistsInArray(type,classes)) {
        classes.add(type);
      }
    }
  }
  if (classes.size() > 0) {
    return classes.toArray(new JavaClass[classes.size()]);
  }
 else {
    return new JavaClass[0];
  }
}"
66104,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Object collection=unmarshalRecord.getContainerInstance(this);
    startElementProcessText(unmarshalRecord,collection);
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    workingDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlAnyCollectionMapping,xmlAnyCollectionMapping.getKeepAsElementPolicy());
    if (workingDescriptor == null) {
      QName qname=new QName(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
      workingDescriptor=xmlContext.getDescriptor(qname);
      if (workingDescriptor != null && workingDescriptor.isWrapper()) {
        workingDescriptor=null;
      }
    }
    UnmarshalKeepAsElementPolicy policy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if (((workingDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
      setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
    }
 else     if (workingDescriptor != null) {
      processChild(xPathFragment,unmarshalRecord,atts,workingDescriptor,xmlAnyCollectionMapping);
    }
 else {
      AnyMappingContentHandler handler=new AnyMappingContentHandler(unmarshalRecord,xmlAnyCollectionMapping.usesXMLRoot());
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      XMLReader xmlReader=unmarshalRecord.getXMLReader();
      xmlReader.setContentHandler(handler);
      xmlReader.setLexicalHandler(handler);
      return true;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Object collection=unmarshalRecord.getContainerInstance(this);
    startElementProcessText(unmarshalRecord,collection);
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    XMLDescriptor workingDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlAnyCollectionMapping,xmlAnyCollectionMapping.getKeepAsElementPolicy());
    if (workingDescriptor == null) {
      QName qname=new QName(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
      workingDescriptor=xmlContext.getDescriptor(qname);
      if (workingDescriptor != null && workingDescriptor.isWrapper()) {
        workingDescriptor=null;
      }
    }
    UnmarshalKeepAsElementPolicy policy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if (((workingDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
      setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
    }
 else     if (workingDescriptor != null) {
      processChild(xPathFragment,unmarshalRecord,atts,workingDescriptor,xmlAnyCollectionMapping);
    }
 else {
      AnyMappingContentHandler handler=new AnyMappingContentHandler(unmarshalRecord,xmlAnyCollectionMapping.usesXMLRoot());
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      XMLReader xmlReader=unmarshalRecord.getXMLReader();
      xmlReader.setContentHandler(handler);
      xmlReader.setLexicalHandler(handler);
      return true;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
66105,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object collection=unmarshalRecord.getContainerInstance(this);
  if (null != unmarshalRecord.getChildRecord()) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
      unmarshalRecord.addAttributeValue(this,objectValue);
    }
    if (xmlAnyCollectionMapping.usesXMLRoot()) {
      Object childObject=unmarshalRecord.getChildRecord().getCurrentObject();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false);
        if (xmlAnyCollectionMapping.getConverter() != null) {
          childObject=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
        }
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
    workingDescriptor=null;
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyCollectionMapping,xmlAnyCollectionMapping.getConverter(),unmarshalRecord,true,null);
    }
 else {
      if (xmlAnyCollectionMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyCollectionMapping.getConverter(),xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object collection=unmarshalRecord.getContainerInstance(this);
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      Object objectValue=childRecord.getCurrentObject();
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
      unmarshalRecord.addAttributeValue(this,objectValue);
    }
 else {
      Object childObject=childRecord.getCurrentObject();
      XMLDescriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false);
        if (xmlAnyCollectionMapping.getConverter() != null) {
          childObject=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
        }
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyCollectionMapping,xmlAnyCollectionMapping.getConverter(),unmarshalRecord,true,null);
    }
 else {
      if (xmlAnyCollectionMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyCollectionMapping.getConverter(),xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}"
66106,"protected void addNamespaceDeclaration(Element parentElement,String prefix,String uri){
  if (prefix.length() == 0) {
    parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,uri);
  }
 else {
    parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,uri);
  }
}","protected void addNamespaceDeclaration(Element parentElement,String prefix,String uri){
  if (prefix.length() == 0 || XMLConstants.XMLNS.equals(prefix)) {
    parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,uri);
  }
 else {
    parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,uri);
  }
}"
66107,"protected void addNamespaceDeclaration(Element parentElement,String prefix,String uri){
  if (prefix.length() == 0) {
    parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,uri);
  }
 else {
    parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,uri);
  }
}","protected void addNamespaceDeclaration(Element parentElement,String prefix,String uri){
  if (prefix.length() == 0 || XMLConstants.XMLNS.equals(prefix)) {
    parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,uri);
  }
 else {
    parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,uri);
  }
}"
66108,"public void testBindingFormatSource() throws Exception {
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,new StreamSource(SOURCE_OXM_XML));
  Class[] classes=new Class[]{org.eclipse.persistence.testing.jaxb.externalizedmetadata.jaxbcontextfactory.bindingformat.source.Foo.class};
  JAXBContext jCtx=(JAXBContext)JAXBContextFactory.createContext(classes,properties,loader);
  doTestSource(jCtx);
}","public void testBindingFormatSource() throws Exception {
  Map<String,Object> properties=new HashMap<String,Object>();
  InputStream is=ClassLoader.getSystemResourceAsStream(SOURCE_OXM_XML);
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,new StreamSource(is));
  Class[] classes=new Class[]{org.eclipse.persistence.testing.jaxb.externalizedmetadata.jaxbcontextfactory.bindingformat.source.Foo.class};
  JAXBContext jCtx=(JAXBContext)JAXBContextFactory.createContext(classes,properties,loader);
  doTestSource(jCtx);
}"
66109,"protected void addNamespaceDeclaration(Element parentElement,String prefix,String uri){
  if (prefix.length() == 0 || XMLConstants.XMLNS.equals(prefix)) {
    parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,uri);
  }
 else {
    parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,uri);
  }
}","protected void addNamespaceDeclaration(Element parentElement,String prefix,String uri){
  if (prefix.length() == 0) {
    parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,uri);
  }
 else {
    parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,uri);
  }
}"
66110,"protected String getValueToWrite(QName schemaType,Object value,XMLConversionManager xmlConversionManager,NamespaceResolver namespaceResolver){
  if (schemaType != null && XMLConstants.QNAME_QNAME.equals(schemaType)) {
    return getStringForQName((QName)value,namespaceResolver);
  }
  return (String)xmlConversionManager.convertObject(value,ClassConstants.STRING,schemaType);
}","protected String getValueToWrite(QName schemaType,Object value,XMLConversionManager xmlConversionManager,MarshalRecord marshalRecord){
  if (schemaType != null && XMLConstants.QNAME_QNAME.equals(schemaType)) {
    return getStringForQName((QName)value,marshalRecord);
  }
  return (String)xmlConversionManager.convertObject(value,ClassConstants.STRING,schemaType);
}"
66111,"protected String getStringForQName(QName qName,NamespaceResolver namespaceResolver){
  if (null == qName) {
    return null;
  }
  if (null == qName.getNamespaceURI()) {
    return qName.getLocalPart();
  }
 else {
    String namespaceURI=qName.getNamespaceURI();
    if (namespaceResolver == null) {
      throw XMLMarshalException.namespaceResolverNotSpecified(namespaceURI);
    }
    String prefix=namespaceResolver.resolveNamespaceURI(namespaceURI);
    if (null == prefix) {
      return qName.getLocalPart();
    }
 else {
      return prefix + XMLConstants.COLON + qName.getLocalPart();
    }
  }
}","protected String getStringForQName(QName qName,MarshalRecord marshalRecord){
  if (null == qName) {
    return null;
  }
  String namespaceURI=qName.getNamespaceURI();
  if (null == namespaceURI) {
    return qName.getLocalPart();
  }
 else {
    NamespaceResolver namespaceResolver=marshalRecord.getNamespaceResolver();
    if (namespaceResolver == null) {
      throw XMLMarshalException.namespaceResolverNotSpecified(namespaceURI);
    }
    if (namespaceURI.equals(namespaceResolver.getDefaultNamespaceURI())) {
      return qName.getLocalPart();
    }
    String prefix=namespaceResolver.resolveNamespaceURI(namespaceURI);
    if (null == prefix) {
      prefix=namespaceResolver.generatePrefix();
      marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + XMLConstants.COLON + prefix,namespaceURI);
    }
    return prefix + XMLConstants.COLON + qName.getLocalPart();
  }
}"
66112,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    Namespace generatedNamespace=setupFragment((XMLRoot)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedNamespace.getPrefix(),XMLConstants.XMLNS + XMLConstants.COLON + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  marshalRecord.characters((String)value);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    Namespace generatedNamespace=setupFragment((XMLRoot)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedNamespace.getPrefix(),XMLConstants.XMLNS + XMLConstants.COLON + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  marshalRecord.characters((String)value);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
66113,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedNamespace.getPrefix(),XMLConstants.XMLNS + XMLConstants.COLON + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  if (value instanceof String) {
    marshalRecord.characters((String)value);
  }
 else {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedNamespace.getPrefix(),XMLConstants.XMLNS + XMLConstants.COLON + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  if (value instanceof String) {
    marshalRecord.characters((String)value);
  }
 else {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
66114,"@Override public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(value,xmlField,session);
  if (fieldValue == null) {
    if (null != value) {
      XMLField f2=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
      fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(value,f2.getXPath(),f2.getNamespaceResolver(),Object.class);
    }
    if (null == fieldValue) {
      return false;
    }
  }
  QName schemaType=getSchemaType(xmlField,fieldValue,session);
  String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
  if (stringValue != null) {
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartElement();
    }
 else {
      marshalRecord.closeStartElement();
      marshalRecord.characters(stringValue);
    }
    return true;
  }
  return false;
}","@Override public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(value,xmlField,session);
  if (fieldValue == null) {
    if (null != value) {
      XMLField f2=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
      fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(value,f2.getXPath(),f2.getNamespaceResolver(),Object.class);
    }
    if (null == fieldValue) {
      return false;
    }
  }
  QName schemaType=getSchemaType(xmlField,fieldValue,session);
  String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
  if (stringValue != null) {
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartElement();
    }
 else {
      marshalRecord.closeStartElement();
      marshalRecord.characters(stringValue);
    }
    return true;
  }
  return false;
}"
66115,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,(String)value);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters((String)value);
    }
  }
 else {
    QName schemaType;
    Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(value,xmlField,session);
    if (fieldValue == null) {
      return false;
    }
    schemaType=getSchemaType(xmlField,fieldValue,session);
    String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    if (stringValue != null) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      if (nextFragment.isAttribute()) {
        marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
        marshalRecord.closeStartElement();
      }
 else {
        marshalRecord.closeStartElement();
        marshalRecord.characters(stringValue);
      }
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,(String)value);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters((String)value);
    }
  }
 else {
    QName schemaType;
    Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(value,xmlField,session);
    if (fieldValue == null) {
      return false;
    }
    schemaType=getSchemaType(xmlField,fieldValue,session);
    String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    if (stringValue != null) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      if (nextFragment.isAttribute()) {
        marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
        marshalRecord.closeStartElement();
      }
 else {
        marshalRecord.closeStartElement();
        marshalRecord.characters(stringValue);
      }
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
66116,"/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (this.xmlCollectionReferenceMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          XMLField fkField=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          return false;
        }
      }
      schemaType=getSchemaType(xmlField,fieldValue,session);
      newValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
      if (newValue != null) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValueStringBuilder.toString(),session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}","/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (this.xmlCollectionReferenceMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          XMLField fkField=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          return false;
        }
      }
      schemaType=getSchemaType(xmlField,fieldValue,session);
      newValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
      if (newValue != null) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValueStringBuilder.toString(),session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}"
66117,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XMLMarshalListener marshalListener=null;
  if (null != marshaller && null != (marshalListener=marshaller.getMarshalListener())) {
    marshalListener.beforeMarshal(value);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(XMLField)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(stringValue);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  if (null != marshalListener) {
    marshalListener.afterMarshal(value);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XMLMarshalListener marshalListener=null;
  if (null != marshaller && null != (marshalListener=marshaller.getMarshalListener())) {
    marshalListener.beforeMarshal(value);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(XMLField)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(stringValue);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  if (null != marshalListener) {
    marshalListener.afterMarshal(value);
  }
  return true;
}"
66118,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  QName schemaType=getSchemaType(xmlField,value,session);
  String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
  if (null != stringValue) {
    marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment.isAttribute()) {
      marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    QName schemaType=getSchemaType(xmlField,value,session);
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment.isAttribute()) {
      marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
66119,"/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}","/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}"
66120,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeObjectMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XMLMarshalListener marshalListener=null;
  if (null != marshaller && null != (marshalListener=marshaller.getMarshalListener())) {
    marshalListener.beforeMarshal(objectValue);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, size=children.getLength(); i < size; i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if (!isSelfFragment) {
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    String stringValue=getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(stringValue);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  if (null != marshalListener) {
    marshalListener.afterMarshal(objectValue);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeObjectMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XMLMarshalListener marshalListener=null;
  if (null != marshaller && null != (marshalListener=marshaller.getMarshalListener())) {
    marshalListener.beforeMarshal(objectValue);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, size=children.getLength(); i < size; i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if (!isSelfFragment) {
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    String stringValue=getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(stringValue);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  if (null != marshalListener) {
    marshalListener.afterMarshal(objectValue);
  }
  return true;
}"
66121,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlDirectMapping.getFieldValue(objectValue,session,marshalRecord);
  if (null == fieldValue) {
    return xmlDirectMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
 else {
    QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
    String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlDirectMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    return true;
  }
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlDirectMapping.getFieldValue(objectValue,session,marshalRecord);
  if (null == fieldValue) {
    return xmlDirectMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
 else {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
    String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlDirectMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    return true;
  }
}"
66122,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object targetObject,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlObjectReferenceMapping.buildFieldValue(targetObject,xmlField,session);
  if (fieldValue == null) {
    if (null != targetObject) {
      XMLField fkField=(XMLField)xmlObjectReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
      if (null == fkField) {
        XMLDescriptor targetDescriptor=(XMLDescriptor)session.getDescriptor(targetObject);
        fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(targetObject,targetDescriptor.getPrimaryKeyFields().get(0).getName(),targetDescriptor.getNamespaceResolver(),Object.class);
      }
 else {
        fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(targetObject,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
      }
    }
    if (null == fieldValue) {
      return false;
    }
  }
  QName schemaType=getSchemaType(xmlField,fieldValue,session);
  String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    marshalRecord.characters(stringValue);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object targetObject,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlObjectReferenceMapping.buildFieldValue(targetObject,xmlField,session);
  if (fieldValue == null) {
    if (null != targetObject) {
      XMLField fkField=(XMLField)xmlObjectReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
      if (null == fkField) {
        XMLDescriptor targetDescriptor=(XMLDescriptor)session.getDescriptor(targetObject);
        fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(targetObject,targetDescriptor.getPrimaryKeyFields().get(0).getName(),targetDescriptor.getNamespaceResolver(),Object.class);
      }
 else {
        fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(targetObject,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
      }
    }
    if (null == fieldValue) {
      return false;
    }
  }
  QName schemaType=getSchemaType(xmlField,fieldValue,session);
  String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    marshalRecord.characters(stringValue);
  }
  return true;
}"
66123,"/** 
 * INTERNAL: Create a start element tag - this call results in a complete start element,  i.e. closeStartElement() does not need to be called after a call to this  method.
 */
private void openAndCloseStartElement(){
  try {
    contentHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),attributes);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL: Create a start element tag - this call results in a complete start element,  i.e. closeStartElement() does not need to be called after a call to this  method.
 */
private void openAndCloseStartElement(){
  try {
    level++;
    contentHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),attributes);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66124,"/** 
 * INTERNAL:
 */
public void startPrefixMapping(String prefix,String namespaceURI){
  try {
    contentHandler.startPrefixMapping(prefix,namespaceURI);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void startPrefixMapping(String prefix,String namespaceURI){
  try {
    contentHandler.startPrefixMapping(prefix,namespaceURI);
    List<String> currentLevelPrefixMappings=prefixMappings.get(level);
    if (null == currentLevelPrefixMappings) {
      currentLevelPrefixMappings=new ArrayList<String>();
      prefixMappings.put(level,currentLevelPrefixMappings);
    }
    currentLevelPrefixMappings.add(prefix);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66125,"/** 
 * INTERNAL:
 */
public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    contentHandler.endElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName());
    isStartElementOpen=false;
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    contentHandler.endElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName());
    level--;
    List<String> currentLevelPrefixMappings=prefixMappings.get(level);
    if (null != currentLevelPrefixMappings) {
      for (      String prefix : currentLevelPrefixMappings) {
        contentHandler.endPrefixMapping(prefix);
      }
      currentLevelPrefixMappings.clear();
    }
    isStartElementOpen=false;
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66126,"public ContentHandlerRecord(){
  attributes=new AttributesImpl();
}","public ContentHandlerRecord(){
  level=0;
  prefixMappings=new HashMap<Integer,List<String>>();
  attributes=new AttributesImpl();
}"
66127,"public void testBindingFormatList() throws Exception {
  List<Object> inputFiles=new ArrayList<Object>();
  inputFiles.add(new File(FILE_OXM_XML));
  inputFiles.add(new InputSource(new FileInputStream(INPUT_SRC_OXM_XML)));
  inputFiles.add(new FileInputStream(INPUT_STRM_OXM_XML));
  inputFiles.add(new InputStreamReader(new FileInputStream(READER_OXM_XML)));
  inputFiles.add(new StreamSource(SOURCE_OXM_XML));
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,inputFiles);
  Class[] listClasses=new Class[]{org.eclipse.persistence.testing.jaxb.externalizedmetadata.jaxbcontextfactory.bindingformat.file.Foo.class,org.eclipse.persistence.testing.jaxb.externalizedmetadata.jaxbcontextfactory.bindingformat.inputsource.Foo.class,org.eclipse.persistence.testing.jaxb.externalizedmetadata.jaxbcontextfactory.bindingformat.inputstream.Foo.class,org.eclipse.persistence.testing.jaxb.externalizedmetadata.jaxbcontextfactory.bindingformat.reader.Foo.class,org.eclipse.persistence.testing.jaxb.externalizedmetadata.jaxbcontextfactory.bindingformat.source.Foo.class};
  JAXBContext jCtx=(JAXBContext)JAXBContextFactory.createContext(listClasses,properties,loader);
  doTestFile(jCtx);
  doTestInputSrc(jCtx);
  doTestInputStrm(jCtx);
  doTestReader(jCtx);
  doTestSource(jCtx);
}","public void testBindingFormatList() throws Exception {
  List<Object> inputFiles=new ArrayList<Object>();
  inputFiles.add(new File(FILE_OXM_XML));
  inputFiles.add(new InputSource(new FileInputStream(INPUT_SRC_OXM_XML)));
  inputFiles.add(new FileInputStream(INPUT_STRM_OXM_XML));
  inputFiles.add(new InputStreamReader(new FileInputStream(READER_OXM_XML)));
  inputFiles.add(new StreamSource(ClassLoader.getSystemResourceAsStream(SOURCE_OXM_XML)));
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,inputFiles);
  Class[] listClasses=new Class[]{org.eclipse.persistence.testing.jaxb.externalizedmetadata.jaxbcontextfactory.bindingformat.file.Foo.class,org.eclipse.persistence.testing.jaxb.externalizedmetadata.jaxbcontextfactory.bindingformat.inputsource.Foo.class,org.eclipse.persistence.testing.jaxb.externalizedmetadata.jaxbcontextfactory.bindingformat.inputstream.Foo.class,org.eclipse.persistence.testing.jaxb.externalizedmetadata.jaxbcontextfactory.bindingformat.reader.Foo.class,org.eclipse.persistence.testing.jaxb.externalizedmetadata.jaxbcontextfactory.bindingformat.source.Foo.class};
  JAXBContext jCtx=(JAXBContext)JAXBContextFactory.createContext(listClasses,properties,loader);
  doTestFile(jCtx);
  doTestInputSrc(jCtx);
  doTestInputStrm(jCtx);
  doTestReader(jCtx);
  doTestSource(jCtx);
}"
66128,"public void testFailOnSecondErrorXMLStreamWriter() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    XMLOutputFactory xof=XMLOutputFactory.newInstance();
    XMLStreamWriter xmlStreamWriter=xof.createXMLStreamWriter(new ByteArrayOutputStream());
    marshaller.marshal(employee,xmlStreamWriter);
  }
 catch (  MarshalException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  XMLStreamException e) {
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}","public void testFailOnSecondErrorXMLStreamWriter() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    if (null == XML_OUTPUT_FACTORY) {
      return;
    }
    XMLStreamWriter xmlStreamWriter=XML_OUTPUT_FACTORY.createXMLStreamWriter(new ByteArrayOutputStream());
    marshaller.marshal(employee,xmlStreamWriter);
  }
 catch (  MarshalException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  XMLStreamException e) {
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}"
66129,"public void testFailOnSecondErrorXMLEventWriter() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    XMLOutputFactory xof=XMLOutputFactory.newInstance();
    XMLEventWriter xmlEventWriter=xof.createXMLEventWriter(new ByteArrayOutputStream());
    marshaller.marshal(employee,xmlEventWriter);
  }
 catch (  MarshalException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  XMLStreamException e) {
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}","public void testFailOnSecondErrorXMLEventWriter() throws Exception {
  CustomErrorValidationEventHandler eventHandler=new CustomErrorValidationEventHandler();
  marshaller.setEventHandler(eventHandler);
  try {
    if (null == XML_OUTPUT_FACTORY) {
      return;
    }
    XMLEventWriter xmlEventWriter=XML_OUTPUT_FACTORY.createXMLEventWriter(new ByteArrayOutputStream());
    marshaller.marshal(employee,xmlEventWriter);
  }
 catch (  MarshalException ex) {
    assertEquals(2,eventHandler.getErrorCount());
    return;
  }
catch (  XMLStreamException e) {
    return;
  }
catch (  Exception e) {
    throw e;
  }
  fail(""String_Node_Str"");
}"
66130,"private XMLEventReader createXMLEventReader(InputStream stream){
  try {
    XMLInputFactory xif=XMLInputFactory.newInstance();
    XMLEventReader xmlEventReader=xif.createXMLEventReader(stream);
    return xmlEventReader;
  }
 catch (  XMLStreamException e) {
    return null;
  }
}","private XMLEventReader createXMLEventReader(InputStream stream){
  try {
    if (null == XML_INPUT_FACTORY) {
      return null;
    }
    XMLEventReader xmlEventReader=XML_INPUT_FACTORY.createXMLEventReader(stream);
    return xmlEventReader;
  }
 catch (  XMLStreamException e) {
    return null;
  }
}"
66131,"private XMLStreamReader createXMLStreamReader(InputStream stream){
  try {
    XMLInputFactory xif=XMLInputFactory.newInstance();
    XMLStreamReader xmlStreamReader=xif.createXMLStreamReader(stream);
    return xmlStreamReader;
  }
 catch (  XMLStreamException e) {
    return null;
  }
}","private XMLStreamReader createXMLStreamReader(InputStream stream){
  try {
    if (null == XML_INPUT_FACTORY) {
      return null;
    }
    XMLStreamReader xmlStreamReader=XML_INPUT_FACTORY.createXMLStreamReader(stream);
    return xmlStreamReader;
  }
 catch (  XMLStreamException e) {
    return null;
  }
}"
66132,"public void testFailXMLEventReaderWithNullClass() throws Exception {
  try {
    InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
    XMLInputFactory xif=XMLInputFactory.newInstance();
    XMLEventReader xmlEventReader=xif.createXMLEventReader(stream);
    unmarshaller.unmarshal(xmlEventReader,(Class)null);
  }
 catch (  IllegalArgumentException e) {
    return;
  }
  fail(""String_Node_Str"");
}","public void testFailXMLEventReaderWithNullClass() throws Exception {
  try {
    if (null == XML_INPUT_FACTORY) {
      return;
    }
    InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
    XMLEventReader xmlEventReader=XML_INPUT_FACTORY.createXMLEventReader(stream);
    unmarshaller.unmarshal(xmlEventReader,(Class)null);
  }
 catch (  IllegalArgumentException e) {
    return;
  }
  fail(""String_Node_Str"");
}"
66133,"public void testFailXMLStreamReaderWithNullClass() throws Exception {
  try {
    InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
    XMLInputFactory xif=XMLInputFactory.newInstance();
    XMLStreamReader xmlStreamReader=xif.createXMLStreamReader(stream);
    unmarshaller.unmarshal(xmlStreamReader,(Class)null);
  }
 catch (  IllegalArgumentException e) {
    return;
  }
  fail(""String_Node_Str"");
}","public void testFailXMLStreamReaderWithNullClass() throws Exception {
  try {
    if (null == XML_INPUT_FACTORY) {
      return;
    }
    InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
    XMLStreamReader xmlStreamReader=XML_INPUT_FACTORY.createXMLStreamReader(stream);
    unmarshaller.unmarshal(xmlStreamReader,(Class)null);
  }
 catch (  IllegalArgumentException e) {
    return;
  }
  fail(""String_Node_Str"");
}"
66134,"public void testFailXMLEventReaderWithNullType() throws Exception {
  try {
    InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
    XMLInputFactory xif=XMLInputFactory.newInstance();
    XMLEventReader xmlEventReader=xif.createXMLEventReader(stream);
    unmarshaller.unmarshal(xmlEventReader,(Type)null);
  }
 catch (  IllegalArgumentException e) {
    return;
  }
  fail(""String_Node_Str"");
}","public void testFailXMLEventReaderWithNullType() throws Exception {
  try {
    if (null == XML_INPUT_FACTORY) {
      return;
    }
    InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
    XMLEventReader xmlEventReader=XML_INPUT_FACTORY.createXMLEventReader(stream);
    unmarshaller.unmarshal(xmlEventReader,(Type)null);
  }
 catch (  IllegalArgumentException e) {
    return;
  }
  fail(""String_Node_Str"");
}"
66135,"public void testFailXMLStreamReaderWithNullType() throws Exception {
  try {
    InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
    XMLInputFactory xif=XMLInputFactory.newInstance();
    XMLStreamReader xmlStreamReader=xif.createXMLStreamReader(stream);
    unmarshaller.unmarshal(xmlStreamReader,(Type)null);
  }
 catch (  IllegalArgumentException e) {
    return;
  }
  fail(""String_Node_Str"");
}","public void testFailXMLStreamReaderWithNullType() throws Exception {
  try {
    if (null == XML_INPUT_FACTORY) {
      return;
    }
    InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
    XMLStreamReader xmlStreamReader=XML_INPUT_FACTORY.createXMLStreamReader(stream);
    unmarshaller.unmarshal(xmlStreamReader,(Type)null);
  }
 catch (  IllegalArgumentException e) {
    return;
  }
  fail(""String_Node_Str"");
}"
66136,"protected String getStringForQName(QName qName,MarshalRecord marshalRecord){
  if (null == qName) {
    return null;
  }
  String namespaceURI=qName.getNamespaceURI();
  if (null == namespaceURI) {
    return qName.getLocalPart();
  }
 else {
    NamespaceResolver namespaceResolver=marshalRecord.getNamespaceResolver();
    if (namespaceResolver == null) {
      throw XMLMarshalException.namespaceResolverNotSpecified(namespaceURI);
    }
    if (namespaceURI.equals(namespaceResolver.getDefaultNamespaceURI())) {
      return qName.getLocalPart();
    }
    String prefix=namespaceResolver.resolveNamespaceURI(namespaceURI);
    if (null == prefix) {
      prefix=namespaceResolver.generatePrefix();
      marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + XMLConstants.COLON + prefix,namespaceURI);
    }
    return prefix + XMLConstants.COLON + qName.getLocalPart();
  }
}","protected String getStringForQName(QName qName,MarshalRecord marshalRecord){
  if (null == qName) {
    return null;
  }
  String namespaceURI=qName.getNamespaceURI();
  if (null == namespaceURI || 0 == namespaceURI.length()) {
    return qName.getLocalPart();
  }
 else {
    NamespaceResolver namespaceResolver=marshalRecord.getNamespaceResolver();
    if (namespaceResolver == null) {
      throw XMLMarshalException.namespaceResolverNotSpecified(namespaceURI);
    }
    if (namespaceURI.equals(namespaceResolver.getDefaultNamespaceURI())) {
      return qName.getLocalPart();
    }
    String prefix=namespaceResolver.resolveNamespaceURI(namespaceURI);
    if (null == prefix) {
      prefix=namespaceResolver.generatePrefix();
      marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + XMLConstants.COLON + prefix,namespaceURI);
    }
    return prefix + XMLConstants.COLON + qName.getLocalPart();
  }
}"
66137,"@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  Object value=getAttributeValueFromObject(object);
  Class valueClass=value.getClass();
  if (valueClass == XMLRoot.class) {
    XMLRoot root=(XMLRoot)value;
    for (    DatabaseField next : this.fields) {
      XMLField xmlField=(XMLField)next;
      XPathFragment fragment=xmlField.getXPathFragment();
      while (fragment != null && !fragment.nameIsText()) {
        if (fragment.getNextFragment() == null || fragment.getHasText()) {
          if (fragment.getLocalName().equals(root.getLocalName())) {
            String fragUri=fragment.getNamespaceURI();
            String namespaceUri=root.getNamespaceURI();
            if ((namespaceUri == null && fragUri == null) || (namespaceUri != null && fragUri != null && namespaceUri.equals(fragUri))) {
              XMLMapping mapping=choiceElementMappings.get(xmlField);
              mapping.writeSingleValue(value,object,(XMLRecord)row,session);
              return;
            }
          }
        }
        fragment=fragment.getNextFragment();
      }
    }
    valueClass=root.getObject().getClass();
  }
  XMLField valueField=this.classToFieldMappings.get(valueClass);
  XMLMapping mapping=this.choiceElementMappings.get(valueField);
  if (mapping != null) {
    mapping.writeSingleValue(value,object,(XMLRecord)row,session);
  }
}","@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  Object value=getAttributeValueFromObject(object);
  Class valueClass=value.getClass();
  if (valueClass == XMLRoot.class) {
    XMLRoot root=(XMLRoot)value;
    for (    DatabaseField next : this.fields) {
      XMLField xmlField=(XMLField)next;
      XPathFragment fragment=xmlField.getXPathFragment();
      while (fragment != null && !fragment.nameIsText()) {
        if (fragment.getNextFragment() == null || fragment.getHasText()) {
          if (fragment.getLocalName().equals(root.getLocalName())) {
            String fragUri=fragment.getNamespaceURI();
            String namespaceUri=root.getNamespaceURI();
            if ((namespaceUri == null && fragUri == null) || (namespaceUri != null && fragUri != null && namespaceUri.equals(fragUri))) {
              XMLMapping mapping=choiceElementMappings.get(xmlField);
              mapping.writeSingleValue(value,object,(XMLRecord)row,session);
              return;
            }
          }
        }
        fragment=fragment.getNextFragment();
      }
    }
    valueClass=root.getObject().getClass();
  }
  XMLField valueField=this.classToFieldMappings.get(valueClass);
  if (valueField == null) {
    List<XMLField> xflds=getClassToSourceFieldsMappings().get(valueClass);
    if (xflds != null) {
      valueField=xflds.get(0);
    }
  }
  XMLMapping mapping=this.choiceElementMappings.get(valueField);
  if (mapping != null) {
    mapping.writeSingleValue(value,object,(XMLRecord)row,session);
  }
}"
66138,"public void convertClassNamesToClasses(ClassLoader classLoader){
  Iterator<Entry<XMLField,String>> entries=fieldToClassNameMappings.entrySet().iterator();
  while (entries.hasNext()) {
    Map.Entry<XMLField,String> entry=entries.next();
    String className=entry.getValue();
    Class elementType=null;
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
        }
 catch (        PrivilegedActionException exception) {
          throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
        }
      }
 else {
        elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
      }
    }
 catch (    ClassNotFoundException exc) {
      throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
    }
    XMLMapping mapping=this.choiceElementMappings.get(entry.getKey());
    if (!((mapping instanceof XMLObjectReferenceMapping) && ((XMLObjectReferenceMapping)mapping).getSourceToTargetKeyFieldAssociations().size() > 1)) {
      if (classToFieldMappings.get(elementType) == null) {
        classToFieldMappings.put(elementType,entry.getKey());
      }
    }
  }
  if (classNameToSourceFieldsMappings != null) {
    Iterator<Entry<String,List<XMLField>>> sourceFieldEntries=classNameToSourceFieldsMappings.entrySet().iterator();
    while (sourceFieldEntries.hasNext()) {
      Entry<String,List<XMLField>> nextEntry=sourceFieldEntries.next();
      String className=nextEntry.getKey();
      List<XMLField> fields=nextEntry.getValue();
      Class elementType=null;
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
          }
 catch (          PrivilegedActionException exception) {
            throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
          }
        }
 else {
          elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
        }
      }
 catch (      ClassNotFoundException exc) {
        throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
      }
      this.getClassToSourceFieldsMappings().put(elementType,fields);
    }
  }
}","public void convertClassNamesToClasses(ClassLoader classLoader){
  Iterator<Entry<XMLField,String>> entries=fieldToClassNameMappings.entrySet().iterator();
  while (entries.hasNext()) {
    Map.Entry<XMLField,String> entry=entries.next();
    String className=entry.getValue();
    Class elementType=null;
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
        }
 catch (        PrivilegedActionException exception) {
          throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
        }
      }
 else {
        elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
      }
    }
 catch (    ClassNotFoundException exc) {
      throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
    }
    XMLMapping mapping=this.choiceElementMappings.get(entry.getKey());
    if (!((mapping instanceof XMLObjectReferenceMapping) && ((XMLObjectReferenceMapping)mapping).getSourceToTargetKeyFieldAssociations().size() > 1)) {
      if (classToFieldMappings.get(elementType) == null) {
        classToFieldMappings.put(elementType,entry.getKey());
      }
    }
    if (fieldToClassMappings.get(entry.getKey()) == null) {
      fieldToClassMappings.put(entry.getKey(),elementType);
    }
  }
  if (classNameToSourceFieldsMappings != null) {
    Iterator<Entry<String,List<XMLField>>> sourceFieldEntries=classNameToSourceFieldsMappings.entrySet().iterator();
    while (sourceFieldEntries.hasNext()) {
      Entry<String,List<XMLField>> nextEntry=sourceFieldEntries.next();
      String className=nextEntry.getKey();
      List<XMLField> fields=nextEntry.getValue();
      Class elementType=null;
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
          }
 catch (          PrivilegedActionException exception) {
            throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
          }
        }
 else {
          elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
        }
      }
 catch (      ClassNotFoundException exc) {
        throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
      }
      this.getClassToSourceFieldsMappings().put(elementType,fields);
    }
  }
}"
66139,"public XMLDirectMapping generateDirectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLDirectMapping mapping=new XMLDirectMapping();
  mapping.setAttributeName(property.getPropertyName());
  String fixedValue=property.getFixedValue();
  if (fixedValue != null) {
    mapping.setIsWriteOnly(true);
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.getXmlPath() != null) {
    mapping.setField(new XMLField(property.getXmlPath()));
  }
 else {
    mapping.setField(getXPathForField(property,namespaceInfo,true));
  }
  if (property.getDefaultValue() != null) {
    mapping.setNullValue(property.getDefaultValue());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else {
    if (property.isNillable()) {
      mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
      if (property.isRequired()) {
        mapping.getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
      }
    }
    mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
    if (!mapping.getXPath().equals(""String_Node_Str"")) {
      ((NullPolicy)mapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.getType() != null) {
    Class theClass=null;
    if (property.isSetXmlJavaTypeAdapter()) {
      theClass=helper.getClassForJavaClass(property.getOriginalType());
    }
 else {
      theClass=helper.getClassForJavaClass(property.getType());
    }
    mapping.setAttributeClassification(theClass);
  }
  if (XMLConstants.QNAME_QNAME.equals(property.getSchemaType())) {
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
  }
  if (property.isSetCdata()) {
    mapping.setIsCDATA(property.isCdata());
  }
  return mapping;
}","public XMLDirectMapping generateDirectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLDirectMapping mapping=new XMLDirectMapping();
  mapping.setAttributeName(property.getPropertyName());
  String fixedValue=property.getFixedValue();
  if (fixedValue != null) {
    mapping.setIsWriteOnly(true);
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.getXmlPath() != null) {
    mapping.setField(new XMLField(property.getXmlPath()));
  }
 else {
    mapping.setField(getXPathForField(property,namespaceInfo,true));
  }
  if (property.getDefaultValue() != null) {
    mapping.setNullValue(property.getDefaultValue());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else {
    if (property.isNillable()) {
      mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
      mapping.getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
    }
    mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
    if (!mapping.getXPath().equals(""String_Node_Str"")) {
      ((NullPolicy)mapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.getType() != null) {
    Class theClass=null;
    if (property.isSetXmlJavaTypeAdapter()) {
      theClass=helper.getClassForJavaClass(property.getOriginalType());
    }
 else {
      theClass=helper.getClassForJavaClass(property.getType());
    }
    mapping.setAttributeClassification(theClass);
  }
  if (XMLConstants.QNAME_QNAME.equals(property.getSchemaType())) {
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
  }
  if (property.isSetCdata()) {
    mapping.setIsCDATA(property.isCdata());
  }
  return mapping;
}"
66140,"public XMLCompositeCollectionMapping generateCompositeCollectionMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,String referenceClassName){
  XMLCompositeCollectionMapping mapping=new XMLCompositeCollectionMapping();
  mapping.setAttributeName(property.getPropertyName());
  mapping.setReuseContainer(true);
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else   if (property.isNillable()) {
    mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
  }
  JavaClass collectionType=property.getType();
  if (collectionType.isArray()) {
    JAXBArrayAttributeAccessor accessor=new JAXBArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),helper.getClassLoader());
    JavaClass componentType=collectionType.getComponentType();
    if (componentType.isArray()) {
      Class adaptedClass=classToGeneratedClasses.get(componentType.getName());
      referenceClassName=adaptedClass.getName();
      accessor.setAdaptedClassName(referenceClassName);
      JavaClass baseComponentType=getBaseComponentType(componentType);
      if (baseComponentType.isPrimitive()) {
        Class primitiveClass=XMLConversionManager.getDefaultManager().convertClassNameToClass(baseComponentType.getRawName());
        accessor.setComponentClass(primitiveClass);
      }
 else {
        accessor.setComponentClassName(baseComponentType.getName());
      }
    }
 else {
      accessor.setComponentClassName(componentType.getName());
    }
    mapping.setAttributeAccessor(accessor);
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Set.class)) {
    collectionType=jotHashSet;
  }
  mapping.useCollectionClassName(collectionType.getRawName());
  XMLField xmlField;
  if (property.getXmlPath() != null) {
    xmlField=new XMLField(property.getXmlPath());
  }
 else {
    xmlField=getXPathForField(property,namespaceInfo,false);
  }
  mapping.setXPath(xmlField.getXPath());
  if (referenceClassName == null) {
    ((XMLField)mapping.getField()).setIsTypedTextField(true);
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
  }
 else {
    mapping.setReferenceClassName(referenceClassName);
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.getInverseReferencePropertyName() != null) {
    mapping.setContainerAttributeName(property.getInverseReferencePropertyName());
    JavaClass backPointerPropertyType=null;
    JavaClass referenceClass=property.getActualType();
    if (property.getInverseReferencePropertyGetMethodName() != null && property.getInverseReferencePropertySetMethodName() != null && !property.getInverseReferencePropertyGetMethodName().equals(""String_Node_Str"") && !property.getInverseReferencePropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.setContainerGetMethodName(property.getInverseReferencePropertySetMethodName());
      mapping.setContainerSetMethodName(property.getInverseReferencePropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getContainerGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getInverseReferencePropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.getInverseReferenceMapping().setContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  return mapping;
}","public XMLCompositeCollectionMapping generateCompositeCollectionMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,String referenceClassName){
  XMLCompositeCollectionMapping mapping=new XMLCompositeCollectionMapping();
  mapping.setAttributeName(property.getPropertyName());
  mapping.setReuseContainer(true);
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else   if (property.isNillable()) {
    mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
    mapping.getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
  }
  JavaClass collectionType=property.getType();
  if (collectionType.isArray()) {
    JAXBArrayAttributeAccessor accessor=new JAXBArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),helper.getClassLoader());
    JavaClass componentType=collectionType.getComponentType();
    if (componentType.isArray()) {
      Class adaptedClass=classToGeneratedClasses.get(componentType.getName());
      referenceClassName=adaptedClass.getName();
      accessor.setAdaptedClassName(referenceClassName);
      JavaClass baseComponentType=getBaseComponentType(componentType);
      if (baseComponentType.isPrimitive()) {
        Class primitiveClass=XMLConversionManager.getDefaultManager().convertClassNameToClass(baseComponentType.getRawName());
        accessor.setComponentClass(primitiveClass);
      }
 else {
        accessor.setComponentClassName(baseComponentType.getName());
      }
    }
 else {
      accessor.setComponentClassName(componentType.getName());
    }
    mapping.setAttributeAccessor(accessor);
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Set.class)) {
    collectionType=jotHashSet;
  }
  mapping.useCollectionClassName(collectionType.getRawName());
  XMLField xmlField;
  if (property.getXmlPath() != null) {
    xmlField=new XMLField(property.getXmlPath());
  }
 else {
    xmlField=getXPathForField(property,namespaceInfo,false);
  }
  mapping.setXPath(xmlField.getXPath());
  if (referenceClassName == null) {
    ((XMLField)mapping.getField()).setIsTypedTextField(true);
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
  }
 else {
    mapping.setReferenceClassName(referenceClassName);
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.getInverseReferencePropertyName() != null) {
    mapping.setContainerAttributeName(property.getInverseReferencePropertyName());
    JavaClass backPointerPropertyType=null;
    JavaClass referenceClass=property.getActualType();
    if (property.getInverseReferencePropertyGetMethodName() != null && property.getInverseReferencePropertySetMethodName() != null && !property.getInverseReferencePropertyGetMethodName().equals(""String_Node_Str"") && !property.getInverseReferencePropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.setContainerGetMethodName(property.getInverseReferencePropertySetMethodName());
      mapping.setContainerSetMethodName(property.getInverseReferencePropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getContainerGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getInverseReferencePropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.getInverseReferenceMapping().setContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  return mapping;
}"
66141,"public XMLCompositeObjectMapping generateCompositeObjectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,String referenceClassName){
  XMLCompositeObjectMapping mapping=new XMLCompositeObjectMapping();
  mapping.setAttributeName(property.getPropertyName());
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.getXmlPath() != null) {
    mapping.setField(new XMLField(property.getXmlPath()));
  }
 else {
    mapping.setXPath(getXPathForField(property,namespaceInfo,false).getXPath());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else   if (property.isNillable()) {
    mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
    if (property.isRequired()) {
      mapping.getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
    }
  }
  if (referenceClassName == null) {
    ((XMLField)mapping.getField()).setIsTypedTextField(true);
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
    String defaultValue=property.getDefaultValue();
    if (null != defaultValue) {
      mapping.setConverter(new DefaultElementConverter(defaultValue));
    }
  }
 else {
    mapping.setReferenceClassName(referenceClassName);
  }
  if (property.getInverseReferencePropertyName() != null) {
    mapping.setContainerAttributeName(property.getInverseReferencePropertyName());
    JavaClass backPointerPropertyType=null;
    JavaClass referenceClass=property.getActualType();
    if (property.getInverseReferencePropertyGetMethodName() != null && property.getInverseReferencePropertySetMethodName() != null && !property.getInverseReferencePropertyGetMethodName().equals(""String_Node_Str"") && !property.getInverseReferencePropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.setContainerGetMethodName(property.getInverseReferencePropertySetMethodName());
      mapping.setContainerSetMethodName(property.getInverseReferencePropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getContainerGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getInverseReferencePropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.getInverseReferenceMapping().setContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  return mapping;
}","public XMLCompositeObjectMapping generateCompositeObjectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,String referenceClassName){
  XMLCompositeObjectMapping mapping=new XMLCompositeObjectMapping();
  mapping.setAttributeName(property.getPropertyName());
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.getXmlPath() != null) {
    mapping.setField(new XMLField(property.getXmlPath()));
  }
 else {
    mapping.setXPath(getXPathForField(property,namespaceInfo,false).getXPath());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else   if (property.isNillable()) {
    mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
    mapping.getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
  }
  if (referenceClassName == null) {
    ((XMLField)mapping.getField()).setIsTypedTextField(true);
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
    String defaultValue=property.getDefaultValue();
    if (null != defaultValue) {
      mapping.setConverter(new DefaultElementConverter(defaultValue));
    }
  }
 else {
    mapping.setReferenceClassName(referenceClassName);
  }
  if (property.getInverseReferencePropertyName() != null) {
    mapping.setContainerAttributeName(property.getInverseReferencePropertyName());
    JavaClass backPointerPropertyType=null;
    JavaClass referenceClass=property.getActualType();
    if (property.getInverseReferencePropertyGetMethodName() != null && property.getInverseReferencePropertySetMethodName() != null && !property.getInverseReferencePropertyGetMethodName().equals(""String_Node_Str"") && !property.getInverseReferencePropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.setContainerGetMethodName(property.getInverseReferencePropertySetMethodName());
      mapping.setContainerSetMethodName(property.getInverseReferencePropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getContainerGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getInverseReferencePropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.getInverseReferenceMapping().setContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  return mapping;
}"
66142,"public void testXmlSchemaQualified() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(XMLSCHEMA_QUALIFIED);
  if (iStream == null) {
    fail(""String_Node_Str"" + XMLSCHEMA_QUALIFIED + ""String_Node_Str"");
  }
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,iStream);
  jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity person=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
  assertNotNull(""String_Node_Str"",person);
  person.set(""String_Node_Str"",456);
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",45000.00);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  Node node=marshalDoc.getChildNodes().item(0);
  assertEquals(""String_Node_Str"",""String_Node_Str"",node.getNamespaceURI());
  assertNotNull(""String_Node_Str"",node.getPrefix());
  Node attr=node.getAttributes().item(0);
  assertNotNull(""String_Node_Str"",attr.getPrefix());
  Node childNode=node.getChildNodes().item(0);
  assertNotNull(""String_Node_Str"",childNode.getPrefix());
}","public void testXmlSchemaQualified() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(XMLSCHEMA_QUALIFIED);
  if (iStream == null) {
    fail(""String_Node_Str"" + XMLSCHEMA_QUALIFIED + ""String_Node_Str"");
  }
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,iStream);
  jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity person=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
  assertNotNull(""String_Node_Str"",person);
  person.set(""String_Node_Str"",456);
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",45000.00);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  Element element=marshalDoc.getDocumentElement();
  assertEquals(""String_Node_Str"",""String_Node_Str"",element.getNamespaceURI());
  assertNotNull(""String_Node_Str"",element.getPrefix());
  Node attr=element.getAttributeNodeNS(""String_Node_Str"",""String_Node_Str"");
  assertNotNull(""String_Node_Str"",attr.getPrefix());
  Node childNode=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"").item(0);
  assertNotNull(""String_Node_Str"",childNode.getPrefix());
}"
66143,"public void testXmlSchemaDefaults() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(XMLSCHEMA_DEFAULTS);
  if (iStream == null) {
    fail(""String_Node_Str"" + XMLSCHEMA_DEFAULTS + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(""String_Node_Str"",new StreamSource(iStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity person=jaxbContext.newDynamicEntity(PERSON);
  assertNotNull(""String_Node_Str"",person);
  person.set(""String_Node_Str"",456);
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",45000.00);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  Node node=marshalDoc.getChildNodes().item(0);
  assertNull(""String_Node_Str"",node.getNamespaceURI());
  assertNull(""String_Node_Str"",node.getPrefix());
  Node attr=node.getAttributes().item(0);
  assertNull(""String_Node_Str"",attr.getPrefix());
  Node childNode=node.getChildNodes().item(0);
  assertNull(""String_Node_Str"",childNode.getPrefix());
}","public void testXmlSchemaDefaults() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(XMLSCHEMA_DEFAULTS);
  if (iStream == null) {
    fail(""String_Node_Str"" + XMLSCHEMA_DEFAULTS + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(""String_Node_Str"",new StreamSource(iStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity person=jaxbContext.newDynamicEntity(PERSON);
  assertNotNull(""String_Node_Str"",person);
  person.set(""String_Node_Str"",456);
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",45000.00);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  Element element=marshalDoc.getDocumentElement();
  assertNull(""String_Node_Str"",element.getNamespaceURI());
  assertNull(""String_Node_Str"",element.getPrefix());
  Node attr=element.getAttributeNode(""String_Node_Str"");
  assertNull(""String_Node_Str"",attr.getPrefix());
  Node childNode=element.getElementsByTagName(""String_Node_Str"").item(0);
  assertNull(""String_Node_Str"",childNode.getPrefix());
}"
66144,"public void testXmlSchemaUnqualified() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(XMLSCHEMA_UNQUALIFIED);
  if (iStream == null) {
    fail(""String_Node_Str"" + XMLSCHEMA_UNQUALIFIED + ""String_Node_Str"");
  }
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,iStream);
  jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity person=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
  assertNotNull(""String_Node_Str"",person);
  person.set(""String_Node_Str"",456);
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",45000.00);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  Node node=marshalDoc.getChildNodes().item(0);
  assertEquals(""String_Node_Str"",""String_Node_Str"",node.getNamespaceURI());
  assertNotNull(""String_Node_Str"",node.getPrefix());
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  if (builderFactory.getClass().getPackage().getName().contains(""String_Node_Str"")) {
    return;
  }
 else {
    Node attr=node.getAttributes().item(0);
    assertNull(""String_Node_Str"" + attr.getPrefix() + ""String_Node_Str"",attr.getPrefix());
  }
  Node childNode=node.getChildNodes().item(0);
  assertNull(""String_Node_Str"",childNode.getPrefix());
}","public void testXmlSchemaUnqualified() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(XMLSCHEMA_UNQUALIFIED);
  if (iStream == null) {
    fail(""String_Node_Str"" + XMLSCHEMA_UNQUALIFIED + ""String_Node_Str"");
  }
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,iStream);
  jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity person=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
  assertNotNull(""String_Node_Str"",person);
  person.set(""String_Node_Str"",456);
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",45000.00);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  Element element=marshalDoc.getDocumentElement();
  assertEquals(""String_Node_Str"",""String_Node_Str"",element.getNamespaceURI());
  assertNotNull(""String_Node_Str"",element.getPrefix());
  Node attr=element.getAttributeNode(""String_Node_Str"");
  assertNull(""String_Node_Str"" + attr.getPrefix() + ""String_Node_Str"",attr.getPrefix());
  Node childNode=element.getElementsByTagName(""String_Node_Str"").item(0);
  assertNull(""String_Node_Str"",childNode.getPrefix());
}"
66145,"/** 
 * Find PersistenceUnitInfo corresponding to the persistence unit name. Returns null if either persistence unit either not found or provider is not supported.
 */
public SEPersistenceUnitInfo findPersistenceUnitInfo(String puName,Map m,PersistenceInitializationHelper persistenceHelper){
  SEPersistenceUnitInfo persistenceUnitInfo=null;
  if (EntityManagerFactoryProvider.initialPuInfos != null) {
    persistenceUnitInfo=EntityManagerFactoryProvider.initialPuInfos.get(puName);
    if (persistenceUnitInfo != null) {
      return persistenceUnitInfo;
    }
  }
  return findPersistenceUnitInfoInArchives(puName,m,persistenceHelper);
}","/** 
 * Find PersistenceUnitInfo corresponding to the persistence unit name. Returns null if either persistence unit either not found or provider is not supported.
 */
public SEPersistenceUnitInfo findPersistenceUnitInfo(String puName,Map m,PersistenceInitializationHelper persistenceHelper){
  SEPersistenceUnitInfo persistenceUnitInfo=null;
  persistenceUnitInfo=EntityManagerFactoryProvider.initialPuInfos.get(puName);
  if (persistenceUnitInfo != null) {
    return persistenceUnitInfo;
  }
  return findPersistenceUnitInfoInArchives(puName,m,persistenceHelper);
}"
66146,"/** 
 * This method initializes the container.  Essentially, it will try to load the class that contains the list of entities and reflectively call the method that contains that list.  It will then initialize the container with that list. If succeeded return true, false otherwise.
 */
public void initialize(Map m){
  if (!isInitialized) {
    if (globalInstrumentation != null) {
      usesAgent=true;
      if (this.initializationClassloader == null) {
        this.initializationClassloader=Thread.currentThread().getContextClassLoader();
      }
      EntityManagerFactoryProvider.initialEmSetupImpls=new HashMap<String,EntityManagerSetupImpl>();
      if (keepInitialPuInfos) {
        EntityManagerFactoryProvider.initialPuInfos=new HashMap<String,SEPersistenceUnitInfo>();
      }
      final Set<Archive> pars=PersistenceUnitProcessor.findPersistenceArchives(initializationClassloader);
      try {
        PersistenceInitializationHelper initializationHelper=new PersistenceInitializationHelper();
        for (        Archive archive : pars) {
          AbstractSessionLog.getLog().log(SessionLog.FINER,""String_Node_Str"",archive);
          initPersistenceUnits(archive,m,initializationHelper);
        }
      }
  finally {
        for (        Archive archive : pars) {
          archive.close();
        }
      }
      globalInstrumentation=null;
    }
    isInitialized=true;
  }
}","/** 
 * This method initializes the container.  Essentially, it will try to load the class that contains the list of entities and reflectively call the method that contains that list.  It will then initialize the container with that list. If succeeded return true, false otherwise.
 */
public void initialize(Map m){
  if (!isInitialized) {
    if (globalInstrumentation != null) {
      usesAgent=true;
      if (this.initializationClassloader == null) {
        this.initializationClassloader=Thread.currentThread().getContextClassLoader();
      }
      final Set<Archive> pars=PersistenceUnitProcessor.findPersistenceArchives(initializationClassloader);
      try {
        PersistenceInitializationHelper initializationHelper=new PersistenceInitializationHelper();
        for (        Archive archive : pars) {
          AbstractSessionLog.getLog().log(SessionLog.FINER,""String_Node_Str"",archive);
          initPersistenceUnits(archive,m,initializationHelper);
        }
      }
  finally {
        for (        Archive archive : pars) {
          archive.close();
        }
      }
      globalInstrumentation=null;
    }
    isInitialized=true;
  }
}"
66147,"/** 
 * Called by Persistence class when an EntityManagerFactory is to be created.
 * @param emName The name of the persistence unit
 * @param map A Map of properties for use by thepersistence provider. These properties may be used to override the values of the corresponding elements in the persistence.xml file or specify values for properties not specified in the persistence.xml.
 * @param classLoader The classloader to search for persistenceunits on
 * @return EntityManagerFactory for the persistence unit,or null if the provider is not the right provider
 */
protected EntityManagerFactory createEntityManagerFactory(String emName,Map properties,ClassLoader classLoader){
  Map nonNullProperties=(properties == null) ? new HashMap() : properties;
  String name=emName;
  if (name == null) {
    name=""String_Node_Str"";
  }
  JPAInitializer initializer=initializationHelper.getInitializer(classLoader,nonNullProperties);
  EntityManagerSetupImpl emSetupImpl=null;
  boolean isNew=false;
  String uniqueName;
  String sessionName;
  try {
    SEPersistenceUnitInfo puInfo;
    puInfo=initializer.findPersistenceUnitInfo(name,nonNullProperties,initializationHelper);
    if (puInfo == null) {
      return null;
    }
    if (initializer.isPersistenceUnitUniquelyDefinedByName()) {
      uniqueName=name;
    }
 else {
      uniqueName=initializer.createUniquePersistenceUnitName(puInfo);
    }
    sessionName=EntityManagerSetupImpl.getOrBuildSessionName(nonNullProperties,puInfo,uniqueName);
synchronized (EntityManagerFactoryProvider.emSetupImpls) {
      emSetupImpl=EntityManagerFactoryProvider.getEntityManagerSetupImpl(sessionName);
      if (emSetupImpl == null) {
        if (EntityManagerFactoryProvider.initialEmSetupImpls != null) {
          emSetupImpl=EntityManagerFactoryProvider.initialEmSetupImpls.remove(uniqueName);
          if (emSetupImpl != null) {
            emSetupImpl.changeSessionName(sessionName);
            puInfo.setClassLoader(classLoader);
          }
        }
        if (emSetupImpl == null) {
          emSetupImpl=initializer.callPredeploy(puInfo,nonNullProperties,initializationHelper,uniqueName,sessionName);
        }
        emSetupImpl.predeploy(emSetupImpl.getPersistenceUnitInfo(),nonNullProperties);
        EntityManagerFactoryProvider.addEntityManagerSetupImpl(sessionName,emSetupImpl);
        isNew=true;
      }
    }
  }
 catch (  Exception e) {
    throw PersistenceUnitLoadingException.exceptionSearchingForPersistenceResources(classLoader,e);
  }
  if (!isNew) {
    if (!uniqueName.equals(emSetupImpl.getPersistenceUnitUniqueName())) {
      throw PersistenceUnitLoadingException.sessionNameAlreadyInUse(sessionName,uniqueName,emSetupImpl.getPersistenceUnitUniqueName());
    }
    boolean undeployed=false;
synchronized (emSetupImpl) {
      if (emSetupImpl.isUndeployed()) {
        undeployed=true;
      }
      emSetupImpl.predeploy(emSetupImpl.getPersistenceUnitInfo(),nonNullProperties);
    }
    if (undeployed) {
      return createEntityManagerFactory(emName,properties,classLoader);
    }
  }
  EntityManagerFactoryImpl factory=null;
  try {
    factory=new EntityManagerFactoryImpl(emSetupImpl,nonNullProperties);
    if (emSetupImpl.shouldGetSessionOnCreateFactory(nonNullProperties)) {
      factory.getServerSession();
    }
    return factory;
  }
 catch (  RuntimeException ex) {
    if (factory != null) {
      factory.close();
    }
 else {
      emSetupImpl.undeploy();
    }
    throw ex;
  }
}","/** 
 * Called by Persistence class when an EntityManagerFactory is to be created.
 * @param emName The name of the persistence unit
 * @param map A Map of properties for use by thepersistence provider. These properties may be used to override the values of the corresponding elements in the persistence.xml file or specify values for properties not specified in the persistence.xml.
 * @param classLoader The classloader to search for persistenceunits on
 * @return EntityManagerFactory for the persistence unit,or null if the provider is not the right provider
 */
protected EntityManagerFactory createEntityManagerFactory(String emName,Map properties,ClassLoader classLoader){
  Map nonNullProperties=(properties == null) ? new HashMap() : properties;
  String name=emName;
  if (name == null) {
    name=""String_Node_Str"";
  }
  JPAInitializer initializer=initializationHelper.getInitializer(classLoader,nonNullProperties);
  EntityManagerSetupImpl emSetupImpl=null;
  boolean isNew=false;
  String uniqueName;
  String sessionName;
  try {
    SEPersistenceUnitInfo puInfo;
    puInfo=initializer.findPersistenceUnitInfo(name,nonNullProperties,initializationHelper);
    if (puInfo == null) {
      return null;
    }
    if (initializer.isPersistenceUnitUniquelyDefinedByName()) {
      uniqueName=name;
    }
 else {
      uniqueName=initializer.createUniquePersistenceUnitName(puInfo);
    }
    sessionName=EntityManagerSetupImpl.getOrBuildSessionName(nonNullProperties,puInfo,uniqueName);
synchronized (EntityManagerFactoryProvider.emSetupImpls) {
      emSetupImpl=EntityManagerFactoryProvider.getEntityManagerSetupImpl(sessionName);
      if (emSetupImpl == null) {
        emSetupImpl=EntityManagerFactoryProvider.initialEmSetupImpls.remove(uniqueName);
        if (emSetupImpl != null) {
          emSetupImpl.changeSessionName(sessionName);
          puInfo.setClassLoader(classLoader);
        }
        if (emSetupImpl == null) {
          emSetupImpl=initializer.callPredeploy(puInfo,nonNullProperties,initializationHelper,uniqueName,sessionName);
        }
        emSetupImpl.predeploy(emSetupImpl.getPersistenceUnitInfo(),nonNullProperties);
        EntityManagerFactoryProvider.addEntityManagerSetupImpl(sessionName,emSetupImpl);
        isNew=true;
      }
    }
  }
 catch (  Exception e) {
    throw PersistenceUnitLoadingException.exceptionSearchingForPersistenceResources(classLoader,e);
  }
  if (!isNew) {
    if (!uniqueName.equals(emSetupImpl.getPersistenceUnitUniqueName())) {
      throw PersistenceUnitLoadingException.sessionNameAlreadyInUse(sessionName,uniqueName,emSetupImpl.getPersistenceUnitUniqueName());
    }
    boolean undeployed=false;
synchronized (emSetupImpl) {
      if (emSetupImpl.isUndeployed()) {
        undeployed=true;
      }
      emSetupImpl.predeploy(emSetupImpl.getPersistenceUnitInfo(),nonNullProperties);
    }
    if (undeployed) {
      return createEntityManagerFactory(emName,properties,classLoader);
    }
  }
  EntityManagerFactoryImpl factory=null;
  try {
    factory=new EntityManagerFactoryImpl(emSetupImpl,nonNullProperties);
    if (emSetupImpl.shouldGetSessionOnCreateFactory(nonNullProperties)) {
      factory.getServerSession();
    }
    return factory;
  }
 catch (  RuntimeException ex) {
    if (factory != null) {
      factory.close();
    }
 else {
      emSetupImpl.undeploy();
    }
    throw ex;
  }
}"
66148,"public String getLocalName(int index){
  try {
    Attr item=attrs.get(index);
    if (item.getLocalName() != null) {
      return item.getLocalName();
    }
    return XMLConstants.EMPTY_STRING;
  }
 catch (  IndexOutOfBoundsException iobe) {
    return null;
  }
}","public String getLocalName(int index){
  try {
    Attr item=attrs.get(index);
    if (item.getLocalName() != null) {
      return item.getLocalName();
    }
    return item.getName();
  }
 catch (  IndexOutOfBoundsException iobe) {
    return null;
  }
}"
66149,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,null,root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
      marshalRecord.characters(value);
    }
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,null,root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
      marshalRecord.characters(value);
    }
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}"
66150,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DateAndTimeTestCases.class);
  suite.addTestSuite(QNameTestCases.class);
  suite.addTestSuite(Base64TestCases.class);
  suite.addTestSuite(ListTestCases.class);
  suite.addTestSuite(DoubleToBigDecimalTestCases.class);
  suite.addTestSuite(XMLGregorianCalendarTestCases.class);
  suite.addTestSuite(NumberTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DateAndTimeTestCases.class);
  suite.addTestSuite(QNameTestCases.class);
  suite.addTestSuite(Base64TestCases.class);
  suite.addTestSuite(ListTestCases.class);
  suite.addTestSuite(DoubleToBigDecimalTestCases.class);
  suite.addTestSuite(XMLGregorianCalendarTestCases.class);
  suite.addTestSuite(NumberTestCases.class);
  suite.addTestSuite(BooleanTestCases.class);
  return suite;
}"
66151,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByEmptyNode() || xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
 else {
      XMLField xmlFld=(XMLField)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
 else {
      XMLField xmlFld=(XMLField)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
66152,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeObjectMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeObjectMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeObjectMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByEmptyNode() || xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeObjectMappingContentHandler aHandler=new CompositeObjectMappingContentHandler(unmarshalRecord,this,xmlCompositeObjectMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else {
      boolean isNull=xmlCompositeObjectMapping.getNullPolicy().valueIsNull(atts);
      if (isNull) {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
      }
 else {
        XMLField xmlFld=(XMLField)this.xmlCompositeObjectMapping.getField();
        if (xmlFld.hasLastXPathFragment()) {
          unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
        }
        processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeObjectMapping);
      }
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeObjectMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeObjectMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeObjectMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeObjectMappingContentHandler aHandler=new CompositeObjectMappingContentHandler(unmarshalRecord,this,xmlCompositeObjectMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else {
      boolean isNull=xmlCompositeObjectMapping.getNullPolicy().valueIsNull(atts);
      if (isNull) {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
      }
 else {
        XMLField xmlFld=(XMLField)this.xmlCompositeObjectMapping.getField();
        if (xmlFld.hasLastXPathFragment()) {
          unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
        }
        processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeObjectMapping);
      }
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
66153,"public CompositeMappingContentHandler(UnmarshalRecord parentRecord,DatabaseMapping aMapping,Attributes atts,AbstractNullPolicy aNullPolicy,XPathFragment aFragment,XMLDescriptor aDescriptor){
  super(parentRecord);
  mapping=aMapping;
  attributes=atts;
  nullPolicy=aNullPolicy;
  xPathFragment=aFragment;
  xmlDescriptor=aDescriptor;
}","public CompositeMappingContentHandler(UnmarshalRecord parentRecord,DatabaseMapping aMapping,Attributes atts,AbstractNullPolicy aNullPolicy,XPathFragment aFragment,XMLDescriptor aDescriptor){
  super(parentRecord);
  mapping=aMapping;
  nullPolicy=aNullPolicy;
  xPathFragment=aFragment;
  xmlDescriptor=aDescriptor;
  try {
    attributes=buildAttributeList(atts);
  }
 catch (  SAXException e) {
  }
}"
66154,"/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  attributes.addAttribute(namespaceURI,localName,qName,XMLConstants.CDATA,value);
}","/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  if (namespaceURI == XMLConstants.XMLNS_URL) {
    this.startPrefixMapping(localName,value);
  }
  attributes.addAttribute(namespaceURI,localName,qName,XMLConstants.CDATA,value);
}"
66155,"public XMLDirectMapping generateDirectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLDirectMapping mapping=new XMLDirectMapping();
  mapping.setAttributeName(property.getPropertyName());
  String fixedValue=property.getFixedValue();
  if (fixedValue != null) {
    mapping.setIsWriteOnly(true);
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.getXmlPath() != null) {
    mapping.setField(new XMLField(property.getXmlPath()));
  }
 else {
    mapping.setField(getXPathForField(property,namespaceInfo,true));
  }
  if (property.getDefaultValue() != null) {
    mapping.setNullValue(property.getDefaultValue());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else {
    if (property.isNillable()) {
      mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
    }
    mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
    if (!mapping.getXPath().equals(""String_Node_Str"")) {
      ((NullPolicy)mapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.getType() != null) {
    Class theClass=null;
    if (property.isSetXmlJavaTypeAdapter()) {
      theClass=helper.getClassForJavaClass(property.getOriginalType());
    }
 else {
      theClass=helper.getClassForJavaClass(property.getType());
    }
    mapping.setAttributeClassification(theClass);
  }
  if (XMLConstants.QNAME_QNAME.equals(property.getSchemaType())) {
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
  }
  if (property.isSetCdata()) {
    mapping.setIsCDATA(property.isCdata());
  }
  return mapping;
}","public XMLDirectMapping generateDirectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLDirectMapping mapping=new XMLDirectMapping();
  mapping.setAttributeName(property.getPropertyName());
  String fixedValue=property.getFixedValue();
  if (fixedValue != null) {
    mapping.setIsWriteOnly(true);
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.getXmlPath() != null) {
    mapping.setField(new XMLField(property.getXmlPath()));
  }
 else {
    mapping.setField(getXPathForField(property,namespaceInfo,true));
  }
  if (property.getDefaultValue() != null) {
    mapping.setNullValue(property.getDefaultValue());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else {
    if (property.isNillable()) {
      mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
      if (property.isRequired()) {
        mapping.getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
      }
    }
    mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
    if (!mapping.getXPath().equals(""String_Node_Str"")) {
      ((NullPolicy)mapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.getType() != null) {
    Class theClass=null;
    if (property.isSetXmlJavaTypeAdapter()) {
      theClass=helper.getClassForJavaClass(property.getOriginalType());
    }
 else {
      theClass=helper.getClassForJavaClass(property.getType());
    }
    mapping.setAttributeClassification(theClass);
  }
  if (XMLConstants.QNAME_QNAME.equals(property.getSchemaType())) {
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
  }
  if (property.isSetCdata()) {
    mapping.setIsCDATA(property.isCdata());
  }
  return mapping;
}"
66156,"/** 
 * Generate mappings for a given TypeInfo.
 * @param info
 * @param descriptor
 * @param namespaceInfo
 */
public void generateMappings(TypeInfo info,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  List<Property> propertiesInOrder=info.getNonTransientPropertiesInPropOrder();
  for (int i=0; i < propertiesInOrder.size(); i++) {
    Property next=propertiesInOrder.get(i);
    if (next != null) {
      DatabaseMapping mapping=generateMapping(next,descriptor,namespaceInfo);
      descriptor.addMapping(mapping);
      if (next.isSetUserProperties()) {
        mapping.setProperties(next.getUserProperties());
      }
    }
  }
}","/** 
 * Generate mappings for a given TypeInfo.
 * @param info
 * @param descriptor
 * @param namespaceInfo
 */
public void generateMappings(TypeInfo info,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  if (info.isAnonymousComplexType()) {
    generateInheritedMappingsForAnonymousType(info,descriptor,namespaceInfo);
  }
  List<Property> propertiesInOrder=info.getNonTransientPropertiesInPropOrder();
  for (int i=0; i < propertiesInOrder.size(); i++) {
    Property next=propertiesInOrder.get(i);
    if (next != null) {
      DatabaseMapping mapping=generateMapping(next,descriptor,namespaceInfo);
      descriptor.addMapping(mapping);
      if (next.isSetUserProperties()) {
        mapping.setProperties(next.getUserProperties());
      }
    }
  }
}"
66157,"/** 
 * Geterate a mapping for a given Property.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @return newly created mapping
 */
public DatabaseMapping generateMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  if (property.isSetXmlJavaTypeAdapter()) {
    XmlJavaTypeAdapter xja=property.getXmlJavaTypeAdapter();
    JavaClass adapterClass=helper.getJavaClass(xja.getValue());
    JavaClass valueType=property.getActualType();
    DatabaseMapping mapping;
    if (typeInfo.containsKey(valueType.getQualifiedName())) {
      if (isCollectionType(property)) {
        mapping=generateCompositeCollectionMapping(property,descriptor,namespaceInfo,valueType.getQualifiedName());
        ((XMLCompositeCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
 else {
        mapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,valueType.getQualifiedName());
        ((XMLCompositeObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
    }
 else {
      if (property.isAny()) {
        if (isCollectionType(property)) {
          mapping=generateAnyCollectionMapping(property,descriptor,namespaceInfo,property.isMixedContent());
          ((XMLAnyCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
 else {
          mapping=generateAnyObjectMapping(property,descriptor,namespaceInfo);
          ((XMLAnyObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
      }
 else       if (isCollectionType(property)) {
        if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
          mapping=generateBinaryDataCollectionMapping(property,descriptor,namespaceInfo);
          ((XMLBinaryDataCollectionMapping)mapping).setValueConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
 else {
          mapping=generateDirectCollectionMapping(property,descriptor,namespaceInfo);
          ((XMLCompositeDirectCollectionMapping)mapping).setValueConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
      }
 else       if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
        mapping=generateBinaryMapping(property,descriptor,namespaceInfo);
        ((XMLBinaryDataMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
 else {
        mapping=generateDirectMapping(property,descriptor,namespaceInfo);
        ((XMLDirectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
    }
    return mapping;
  }
  if (property.isSetXmlJoinNodes()) {
    if (isCollectionType(property)) {
      return generateXMLCollectionReferenceMapping(property,descriptor,namespaceInfo,property.getActualType());
    }
    return generateXMLObjectReferenceMapping(property,descriptor,namespaceInfo,property.getType());
  }
  if (property.isXmlTransformation()) {
    return generateTransformationMapping(property,descriptor,namespaceInfo);
  }
  if (property.isChoice()) {
    if (this.isCollectionType(property)) {
      return generateChoiceCollectionMapping(property,descriptor,namespaceInfo);
    }
    return generateChoiceMapping(property,descriptor,namespaceInfo);
  }
  if (property.isInverseReference()) {
    return generateInverseReferenceMapping(property,descriptor,namespaceInfo);
  }
  if (property.isAny()) {
    if (isCollectionType(property)) {
      return generateAnyCollectionMapping(property,descriptor,namespaceInfo,property.isMixedContent());
    }
    return generateAnyObjectMapping(property,descriptor,namespaceInfo);
  }
  if (property.isReference()) {
    return generateMappingForReferenceProperty(property,descriptor,namespaceInfo);
  }
  if (property.isMap()) {
    if (property.isAnyAttribute()) {
      return generateAnyAttributeMapping(property,descriptor,namespaceInfo);
    }
    return generateMapMapping(property,descriptor,namespaceInfo);
  }
  if (isCollectionType(property)) {
    return generateCollectionMapping(property,descriptor,namespaceInfo);
  }
  JavaClass referenceClass=property.getType();
  String referenceClassName=referenceClass.getRawName();
  if (referenceClass.isArray() && !referenceClassName.equals(""String_Node_Str"") && !referenceClassName.equals(""String_Node_Str"")) {
    JavaClass componentType=referenceClass.getComponentType();
    TypeInfo reference=typeInfo.get(componentType.getName());
    if (reference != null || componentType.isArray()) {
      return generateCompositeCollectionMapping(property,descriptor,namespaceInfo,componentType.getQualifiedName());
    }
    return generateDirectCollectionMapping(property,descriptor,namespaceInfo);
  }
  if (property.isXmlIdRef()) {
    return generateXMLObjectReferenceMapping(property,descriptor,namespaceInfo,referenceClass);
  }
  TypeInfo reference=typeInfo.get(referenceClass.getQualifiedName());
  if (reference != null) {
    if (reference.isEnumerationType()) {
      return generateDirectEnumerationMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
    }
    return generateCompositeObjectMapping(property,descriptor,namespaceInfo,referenceClass.getQualifiedName());
  }
  if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
    return generateBinaryMapping(property,descriptor,namespaceInfo);
  }
  if (referenceClass.getQualifiedName().equals(OBJECT_CLASS_NAME)) {
    XMLCompositeObjectMapping coMapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,null);
    coMapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
    return coMapping;
  }
  return generateDirectMapping(property,descriptor,namespaceInfo);
}","/** 
 * Generate a mapping for a given Property.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @return newly created mapping
 */
public DatabaseMapping generateMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  if (property.isSetXmlJavaTypeAdapter()) {
    XmlJavaTypeAdapter xja=property.getXmlJavaTypeAdapter();
    JavaClass adapterClass=helper.getJavaClass(xja.getValue());
    JavaClass valueType=property.getActualType();
    DatabaseMapping mapping;
    if (typeInfo.containsKey(valueType.getQualifiedName())) {
      if (isCollectionType(property)) {
        mapping=generateCompositeCollectionMapping(property,descriptor,namespaceInfo,valueType.getQualifiedName());
        ((XMLCompositeCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
 else {
        mapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,valueType.getQualifiedName());
        ((XMLCompositeObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
    }
 else {
      if (property.isAny()) {
        if (isCollectionType(property)) {
          mapping=generateAnyCollectionMapping(property,descriptor,namespaceInfo,property.isMixedContent());
          ((XMLAnyCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
 else {
          mapping=generateAnyObjectMapping(property,descriptor,namespaceInfo);
          ((XMLAnyObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
      }
 else       if (isCollectionType(property)) {
        if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
          mapping=generateBinaryDataCollectionMapping(property,descriptor,namespaceInfo);
          ((XMLBinaryDataCollectionMapping)mapping).setValueConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
 else {
          mapping=generateDirectCollectionMapping(property,descriptor,namespaceInfo);
          ((XMLCompositeDirectCollectionMapping)mapping).setValueConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
      }
 else       if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
        mapping=generateBinaryMapping(property,descriptor,namespaceInfo);
        ((XMLBinaryDataMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
 else {
        mapping=generateDirectMapping(property,descriptor,namespaceInfo);
        ((XMLDirectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
    }
    return mapping;
  }
  if (property.isSetXmlJoinNodes()) {
    if (isCollectionType(property)) {
      return generateXMLCollectionReferenceMapping(property,descriptor,namespaceInfo,property.getActualType());
    }
    return generateXMLObjectReferenceMapping(property,descriptor,namespaceInfo,property.getType());
  }
  if (property.isXmlTransformation()) {
    return generateTransformationMapping(property,descriptor,namespaceInfo);
  }
  if (property.isChoice()) {
    if (this.isCollectionType(property)) {
      return generateChoiceCollectionMapping(property,descriptor,namespaceInfo);
    }
    return generateChoiceMapping(property,descriptor,namespaceInfo);
  }
  if (property.isInverseReference()) {
    return generateInverseReferenceMapping(property,descriptor,namespaceInfo);
  }
  if (property.isAny()) {
    if (isCollectionType(property)) {
      return generateAnyCollectionMapping(property,descriptor,namespaceInfo,property.isMixedContent());
    }
    return generateAnyObjectMapping(property,descriptor,namespaceInfo);
  }
  if (property.isReference()) {
    return generateMappingForReferenceProperty(property,descriptor,namespaceInfo);
  }
  if (property.isMap()) {
    if (property.isAnyAttribute()) {
      return generateAnyAttributeMapping(property,descriptor,namespaceInfo);
    }
    return generateMapMapping(property,descriptor,namespaceInfo);
  }
  if (isCollectionType(property)) {
    return generateCollectionMapping(property,descriptor,namespaceInfo);
  }
  JavaClass referenceClass=property.getType();
  String referenceClassName=referenceClass.getRawName();
  if (referenceClass.isArray() && !referenceClassName.equals(""String_Node_Str"") && !referenceClassName.equals(""String_Node_Str"")) {
    JavaClass componentType=referenceClass.getComponentType();
    TypeInfo reference=typeInfo.get(componentType.getName());
    if (reference != null || componentType.isArray()) {
      return generateCompositeCollectionMapping(property,descriptor,namespaceInfo,componentType.getQualifiedName());
    }
    return generateDirectCollectionMapping(property,descriptor,namespaceInfo);
  }
  if (property.isXmlIdRef()) {
    return generateXMLObjectReferenceMapping(property,descriptor,namespaceInfo,referenceClass);
  }
  TypeInfo reference=typeInfo.get(referenceClass.getQualifiedName());
  if (reference != null) {
    if (reference.isEnumerationType()) {
      return generateDirectEnumerationMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
    }
    return generateCompositeObjectMapping(property,descriptor,namespaceInfo,referenceClass.getQualifiedName());
  }
  if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
    return generateBinaryMapping(property,descriptor,namespaceInfo);
  }
  if (referenceClass.getQualifiedName().equals(OBJECT_CLASS_NAME)) {
    XMLCompositeObjectMapping coMapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,null);
    coMapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
    return coMapping;
  }
  return generateDirectMapping(property,descriptor,namespaceInfo);
}"
66158,"/** 
 * Setup inheritance for abstract superclass. NOTE: We currently only handle one level of inheritance in this case. For multiple levels the code will need to be modified. The logic in generateMappings() that determines when to copy down inherited methods from the parent class will need to be changed as well.
 * @param jClass
 */
private void setupInheritance(JavaClass jClass){
  XMLDescriptor descriptor=typeInfo.get(jClass.getName()).getDescriptor();
  if (descriptor == null) {
    return;
  }
  JavaClass superClass=CompilerHelper.getNextMappedSuperClass(jClass,typeInfo,helper);
  if (superClass == null) {
    return;
  }
  TypeInfo superTypeInfo=typeInfo.get(superClass.getName());
  if (superTypeInfo == null) {
    return;
  }
  XMLDescriptor superDescriptor=superTypeInfo.getDescriptor();
  if (superDescriptor != null) {
    XMLSchemaReference sRef=descriptor.getSchemaReference();
    if (sRef == null || sRef.getSchemaContext() == null) {
      return;
    }
    JavaClass rootMappedSuperClass=getRootMappedSuperClass(superClass);
    TypeInfo rootTypeInfo=typeInfo.get(rootMappedSuperClass.getName());
    XMLDescriptor rootDescriptor=rootTypeInfo.getDescriptor();
    if (rootDescriptor.getNamespaceResolver() == null) {
      rootDescriptor.setNamespaceResolver(new NamespaceResolver());
    }
    if (rootDescriptor.getInheritancePolicy().getClassIndicatorField() == null) {
      XMLField classIndicatorField;
      if (rootTypeInfo.isSetXmlDiscriminatorNode()) {
        classIndicatorField=new XMLField(rootTypeInfo.getXmlDiscriminatorNode());
      }
 else {
        String prefix=getPrefixForNamespace(XMLConstants.SCHEMA_INSTANCE_URL,rootDescriptor.getNamespaceResolver(),XMLConstants.SCHEMA_INSTANCE_PREFIX);
        classIndicatorField=new XMLField(ATT + getQualifiedString(prefix,""String_Node_Str""));
      }
      rootDescriptor.getInheritancePolicy().setClassIndicatorField(classIndicatorField);
    }
    String sCtx;
    TypeInfo tInfo=typeInfo.get(jClass.getName());
    if (tInfo.isSetXmlDiscriminatorValue()) {
      sCtx=tInfo.getXmlDiscriminatorValue();
    }
 else {
      sCtx=sRef.getSchemaContext();
      if (sCtx.length() > 1 && sCtx.startsWith(""String_Node_Str"")) {
        sCtx=sCtx.substring(1);
      }
    }
    descriptor.getInheritancePolicy().setParentClassName(superClass.getName());
    rootDescriptor.getInheritancePolicy().addClassNameIndicator(jClass.getName(),sCtx);
    Object value=rootDescriptor.getInheritancePolicy().getClassNameIndicatorMapping().get(rootDescriptor.getJavaClassName());
    if (value == null) {
      if (rootTypeInfo.isSetXmlDiscriminatorValue()) {
        rootDescriptor.getInheritancePolicy().addClassNameIndicator(rootDescriptor.getJavaClassName(),rootTypeInfo.getXmlDiscriminatorValue());
      }
 else {
        XMLSchemaReference rootSRef=rootDescriptor.getSchemaReference();
        if (rootSRef != null && rootSRef.getSchemaContext() != null) {
          String rootSCtx=rootSRef.getSchemaContext();
          if (rootSCtx.length() > 1 && rootSCtx.startsWith(""String_Node_Str"")) {
            rootSCtx=rootSCtx.substring(1);
          }
          rootDescriptor.getInheritancePolicy().addClassNameIndicator(rootDescriptor.getJavaClassName(),rootSCtx);
        }
      }
    }
    rootDescriptor.getInheritancePolicy().setShouldReadSubclasses(true);
  }
}","/** 
 * Setup inheritance for abstract superclass. NOTE: We currently only handle one level of inheritance in this case. For multiple levels the code will need to be modified. The logic in generateMappings() that determines when to copy down inherited methods from the parent class will need to be changed as well.
 * @param jClass
 */
private void setupInheritance(JavaClass jClass){
  TypeInfo tInfo=typeInfo.get(jClass.getName());
  XMLDescriptor descriptor=tInfo.getDescriptor();
  if (descriptor == null) {
    return;
  }
  JavaClass superClass=CompilerHelper.getNextMappedSuperClass(jClass,typeInfo,helper);
  if (superClass == null) {
    return;
  }
  TypeInfo superTypeInfo=typeInfo.get(superClass.getName());
  if (superTypeInfo == null) {
    return;
  }
  XMLDescriptor superDescriptor=superTypeInfo.getDescriptor();
  if (superDescriptor != null) {
    XMLSchemaReference sRef=descriptor.getSchemaReference();
    if (sRef == null || sRef.getSchemaContext() == null) {
      return;
    }
    JavaClass rootMappedSuperClass=getRootMappedSuperClass(superClass);
    TypeInfo rootTypeInfo=typeInfo.get(rootMappedSuperClass.getName());
    XMLDescriptor rootDescriptor=rootTypeInfo.getDescriptor();
    if (rootDescriptor.getNamespaceResolver() == null) {
      rootDescriptor.setNamespaceResolver(new NamespaceResolver());
    }
    if (rootDescriptor.getInheritancePolicy().getClassIndicatorField() == null) {
      XMLField classIndicatorField;
      if (rootTypeInfo.isSetXmlDiscriminatorNode()) {
        classIndicatorField=new XMLField(rootTypeInfo.getXmlDiscriminatorNode());
      }
 else {
        String prefix=getPrefixForNamespace(XMLConstants.SCHEMA_INSTANCE_URL,rootDescriptor.getNamespaceResolver(),XMLConstants.SCHEMA_INSTANCE_PREFIX);
        classIndicatorField=new XMLField(ATT + getQualifiedString(prefix,""String_Node_Str""));
      }
      rootDescriptor.getInheritancePolicy().setClassIndicatorField(classIndicatorField);
    }
    String sCtx=null;
    if (tInfo.isSetXmlDiscriminatorValue()) {
      sCtx=tInfo.getXmlDiscriminatorValue();
    }
 else     if (!tInfo.isAnonymousComplexType()) {
      sCtx=sRef.getSchemaContext();
      if (sCtx.length() > 1 && sCtx.startsWith(""String_Node_Str"")) {
        sCtx=sCtx.substring(1);
      }
    }
    if (sCtx != null) {
      descriptor.getInheritancePolicy().setParentClassName(superClass.getName());
      rootDescriptor.getInheritancePolicy().addClassNameIndicator(jClass.getName(),sCtx);
    }
    Object value=rootDescriptor.getInheritancePolicy().getClassNameIndicatorMapping().get(rootDescriptor.getJavaClassName());
    if (value == null) {
      if (rootTypeInfo.isSetXmlDiscriminatorValue()) {
        rootDescriptor.getInheritancePolicy().addClassNameIndicator(rootDescriptor.getJavaClassName(),rootTypeInfo.getXmlDiscriminatorValue());
      }
 else {
        XMLSchemaReference rootSRef=rootDescriptor.getSchemaReference();
        if (rootSRef != null && rootSRef.getSchemaContext() != null) {
          String rootSCtx=rootSRef.getSchemaContext();
          if (rootSCtx.length() > 1 && rootSCtx.startsWith(""String_Node_Str"")) {
            rootSCtx=rootSCtx.substring(1);
          }
          rootDescriptor.getInheritancePolicy().addClassNameIndicator(rootDescriptor.getJavaClassName(),rootSCtx);
        }
      }
    }
    rootDescriptor.getInheritancePolicy().setShouldReadSubclasses(true);
  }
}"
66159,"public XMLCompositeObjectMapping generateCompositeObjectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,String referenceClassName){
  XMLCompositeObjectMapping mapping=new XMLCompositeObjectMapping();
  mapping.setAttributeName(property.getPropertyName());
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.getXmlPath() != null) {
    mapping.setField(new XMLField(property.getXmlPath()));
  }
 else {
    mapping.setXPath(getXPathForField(property,namespaceInfo,false).getXPath());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else   if (property.isNillable()) {
    mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
  }
  if (referenceClassName == null) {
    ((XMLField)mapping.getField()).setIsTypedTextField(true);
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
    String defaultValue=property.getDefaultValue();
    if (null != defaultValue) {
      mapping.setConverter(new DefaultElementConverter(defaultValue));
    }
  }
 else {
    mapping.setReferenceClassName(referenceClassName);
  }
  if (property.getInverseReferencePropertyName() != null) {
    mapping.setContainerAttributeName(property.getInverseReferencePropertyName());
    JavaClass backPointerPropertyType=null;
    JavaClass referenceClass=property.getActualType();
    if (property.getInverseReferencePropertyGetMethodName() != null && property.getInverseReferencePropertySetMethodName() != null && !property.getInverseReferencePropertyGetMethodName().equals(""String_Node_Str"") && !property.getInverseReferencePropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.setContainerGetMethodName(property.getInverseReferencePropertySetMethodName());
      mapping.setContainerSetMethodName(property.getInverseReferencePropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getContainerGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getInverseReferencePropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.getInverseReferenceMapping().setContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  return mapping;
}","public XMLCompositeObjectMapping generateCompositeObjectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,String referenceClassName){
  XMLCompositeObjectMapping mapping=new XMLCompositeObjectMapping();
  mapping.setAttributeName(property.getPropertyName());
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.getXmlPath() != null) {
    mapping.setField(new XMLField(property.getXmlPath()));
  }
 else {
    mapping.setXPath(getXPathForField(property,namespaceInfo,false).getXPath());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else   if (property.isNillable()) {
    mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
    if (property.isRequired()) {
      mapping.getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
    }
  }
  if (referenceClassName == null) {
    ((XMLField)mapping.getField()).setIsTypedTextField(true);
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
    String defaultValue=property.getDefaultValue();
    if (null != defaultValue) {
      mapping.setConverter(new DefaultElementConverter(defaultValue));
    }
  }
 else {
    mapping.setReferenceClassName(referenceClassName);
  }
  if (property.getInverseReferencePropertyName() != null) {
    mapping.setContainerAttributeName(property.getInverseReferencePropertyName());
    JavaClass backPointerPropertyType=null;
    JavaClass referenceClass=property.getActualType();
    if (property.getInverseReferencePropertyGetMethodName() != null && property.getInverseReferencePropertySetMethodName() != null && !property.getInverseReferencePropertyGetMethodName().equals(""String_Node_Str"") && !property.getInverseReferencePropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.setContainerGetMethodName(property.getInverseReferencePropertySetMethodName());
      mapping.setContainerSetMethodName(property.getInverseReferencePropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getContainerGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getInverseReferencePropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.getInverseReferenceMapping().setContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  return mapping;
}"
66160,"/** 
 * Build and return a Hashtable containing the default Java to XML conversion pairs
 */
private static HashMap buildJavaTypes(){
  HashMap javaTypes=new HashMap();
  javaTypes.put(ClassConstants.APBYTE,XMLConstants.HEX_BINARY_QNAME);
  javaTypes.put(ClassConstants.BIGDECIMAL,XMLConstants.DECIMAL_QNAME);
  javaTypes.put(ClassConstants.BIGINTEGER,XMLConstants.INTEGER_QNAME);
  javaTypes.put(ClassConstants.PBOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(ClassConstants.PBYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(ClassConstants.CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.PDOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(ClassConstants.PFLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(ClassConstants.PINT,XMLConstants.INT_QNAME);
  javaTypes.put(ClassConstants.PLONG,XMLConstants.LONG_QNAME);
  javaTypes.put(ClassConstants.PSHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(XMLConstants.QNAME_CLASS,XMLConstants.QNAME_QNAME);
  javaTypes.put(ClassConstants.STRING,XMLConstants.STRING_QNAME);
  javaTypes.put(ClassConstants.ABYTE,XMLConstants.HEX_BINARY_QNAME);
  javaTypes.put(ClassConstants.BOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(ClassConstants.BYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(ClassConstants.GREGORIAN_CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.DOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(ClassConstants.FLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(ClassConstants.INTEGER,XMLConstants.INT_QNAME);
  javaTypes.put(ClassConstants.LONG,XMLConstants.LONG_QNAME);
  javaTypes.put(ClassConstants.SHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(ClassConstants.UTILDATE,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.CHAR,XMLConstants.UNSIGNED_INT_QNAME);
  javaTypes.put(ClassConstants.PCHAR,XMLConstants.UNSIGNED_INT_QNAME);
  javaTypes.put(ClassConstants.DURATION,XMLConstants.DURATION_QNAME);
  javaTypes.put(XMLConstants.UUID,XMLConstants.STRING_QNAME);
  javaTypes.put(ClassConstants.XML_GREGORIAN_CALENDAR,XMLConstants.ANY_SIMPLE_TYPE_QNAME);
  return javaTypes;
}","/** 
 * Build and return a Hashtable containing the default Java to XML conversion pairs
 */
private static HashMap buildJavaTypes(){
  HashMap javaTypes=new HashMap();
  javaTypes.put(ClassConstants.APBYTE,XMLConstants.HEX_BINARY_QNAME);
  javaTypes.put(ClassConstants.BIGDECIMAL,XMLConstants.DECIMAL_QNAME);
  javaTypes.put(ClassConstants.BIGINTEGER,XMLConstants.INTEGER_QNAME);
  javaTypes.put(ClassConstants.PBOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(ClassConstants.PBYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(ClassConstants.CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.PDOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(ClassConstants.PFLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(ClassConstants.PINT,XMLConstants.INT_QNAME);
  javaTypes.put(ClassConstants.PLONG,XMLConstants.LONG_QNAME);
  javaTypes.put(ClassConstants.PSHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(XMLConstants.QNAME_CLASS,XMLConstants.QNAME_QNAME);
  javaTypes.put(ClassConstants.STRING,XMLConstants.STRING_QNAME);
  javaTypes.put(ClassConstants.ABYTE,XMLConstants.HEX_BINARY_QNAME);
  javaTypes.put(ClassConstants.BOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(ClassConstants.BYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(ClassConstants.GREGORIAN_CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.DOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(ClassConstants.FLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(ClassConstants.INTEGER,XMLConstants.INT_QNAME);
  javaTypes.put(ClassConstants.LONG,XMLConstants.LONG_QNAME);
  javaTypes.put(ClassConstants.SHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(ClassConstants.UTILDATE,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.CHAR,XMLConstants.UNSIGNED_INT_QNAME);
  javaTypes.put(ClassConstants.PCHAR,XMLConstants.UNSIGNED_INT_QNAME);
  javaTypes.put(ClassConstants.DURATION,XMLConstants.DURATION_QNAME);
  javaTypes.put(XMLConstants.UUID,XMLConstants.STRING_QNAME);
  return javaTypes;
}"
66161,"/** 
 * INTERNAL: Convert the attribute value to a field value. Process any converter if defined, and check for null values.
 */
public Object getFieldValue(Object attributeValue,AbstractSession session,XMLRecord record){
  Object fieldValue=attributeValue;
  if ((this.nullValue != null) && (this.nullValue.equals(fieldValue))) {
    return null;
  }
  if (hasConverter()) {
    if (getConverter() instanceof XMLConverter) {
      fieldValue=((XMLConverter)getConverter()).convertObjectValueToDataValue(fieldValue,session,record.getMarshaller());
    }
 else {
      fieldValue=getConverter().convertObjectValueToDataValue(fieldValue,session);
    }
  }
  Class fieldClassification=getFieldClassification(getField());
  if ((fieldValue != null) && (fieldClassification != fieldValue.getClass())) {
    try {
      fieldValue=session.getPlatform(descriptor.getJavaClass()).convertObject(fieldValue,fieldClassification);
    }
 catch (    ConversionException exception) {
      throw ConversionException.couldNotBeConverted(this,descriptor,exception);
    }
  }
  return fieldValue;
}","/** 
 * INTERNAL: Convert the attribute value to a field value. Process any converter if defined, and check for null values.
 */
public Object getFieldValue(Object attributeValue,AbstractSession session,XMLRecord record){
  Object fieldValue=attributeValue;
  if ((this.nullValue != null) && (this.nullValue.equals(fieldValue)) && !((XMLField)getField()).isRequired()) {
    return null;
  }
  if (hasConverter()) {
    if (getConverter() instanceof XMLConverter) {
      fieldValue=((XMLConverter)getConverter()).convertObjectValueToDataValue(fieldValue,session,record.getMarshaller());
    }
 else {
      fieldValue=getConverter().convertObjectValueToDataValue(fieldValue,session);
    }
  }
  Class fieldClassification=getFieldClassification(getField());
  if ((fieldValue != null) && (fieldClassification != fieldValue.getClass())) {
    try {
      fieldValue=session.getPlatform(descriptor.getJavaClass()).convertObject(fieldValue,fieldClassification);
    }
 catch (    ConversionException exception) {
      throw ConversionException.couldNotBeConverted(this,descriptor,exception);
    }
  }
  return fieldValue;
}"
66162,"/** 
 * Builds a map of Java types to XML types.
 * @return
 */
private HashMap buildXMLToJavaTypeMap(){
  HashMap javaTypes=new HashMap();
  javaTypes.put(APBYTE,XMLConstants.BASE_64_BINARY_QNAME);
  javaTypes.put(BIGDECIMAL,XMLConstants.DECIMAL_QNAME);
  javaTypes.put(BIGINTEGER,XMLConstants.INTEGER_QNAME);
  javaTypes.put(PBOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(PBYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(PDOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(PFLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(PINT,XMLConstants.INT_QNAME);
  javaTypes.put(PLONG,XMLConstants.LONG_QNAME);
  javaTypes.put(PSHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(QNAME_CLASS,XMLConstants.QNAME_QNAME);
  javaTypes.put(STRING,XMLConstants.STRING_QNAME);
  javaTypes.put(ABYTE,XMLConstants.BASE_64_BINARY_QNAME);
  javaTypes.put(BOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(BYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(GREGORIAN_CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(DOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(FLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(INTEGER,XMLConstants.INT_QNAME);
  javaTypes.put(LONG,XMLConstants.LONG_QNAME);
  javaTypes.put(SHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(UTIL_DATE,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(SQL_DATE,XMLConstants.DATE_QNAME);
  javaTypes.put(SQL_TIME,XMLConstants.TIME_QNAME);
  javaTypes.put(SQL_TIMESTAMP,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(XMLGREGORIANCALENDAR,XMLConstants.ANY_SIMPLE_TYPE_QNAME);
  javaTypes.put(DURATION,XMLConstants.DURATION_QNAME);
  javaTypes.put(UUID,XMLConstants.STRING_QNAME);
  javaTypes.put(URI,XMLConstants.STRING_QNAME);
  return javaTypes;
}","/** 
 * Builds a map of Java types to XML types.
 * @return
 */
private HashMap buildXMLToJavaTypeMap(){
  HashMap javaTypes=new HashMap();
  javaTypes.put(APBYTE,XMLConstants.BASE_64_BINARY_QNAME);
  javaTypes.put(BIGDECIMAL,XMLConstants.DECIMAL_QNAME);
  javaTypes.put(BIGINTEGER,XMLConstants.INTEGER_QNAME);
  javaTypes.put(PBOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(PBYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(PDOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(PFLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(PINT,XMLConstants.INT_QNAME);
  javaTypes.put(PLONG,XMLConstants.LONG_QNAME);
  javaTypes.put(PSHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(QNAME_CLASS,XMLConstants.QNAME_QNAME);
  javaTypes.put(STRING,XMLConstants.STRING_QNAME);
  javaTypes.put(ABYTE,XMLConstants.BASE_64_BINARY_QNAME);
  javaTypes.put(BOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(BYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(GREGORIAN_CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(DOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(FLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(INTEGER,XMLConstants.INT_QNAME);
  javaTypes.put(LONG,XMLConstants.LONG_QNAME);
  javaTypes.put(SHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(UTIL_DATE,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(SQL_DATE,XMLConstants.DATE_QNAME);
  javaTypes.put(SQL_TIME,XMLConstants.TIME_QNAME);
  javaTypes.put(SQL_TIMESTAMP,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(DURATION,XMLConstants.DURATION_QNAME);
  javaTypes.put(UUID,XMLConstants.STRING_QNAME);
  javaTypes.put(URI,XMLConstants.STRING_QNAME);
  return javaTypes;
}"
66163,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
 else {
      XMLField xmlFld=(XMLField)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByEmptyNode() || xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
 else {
      XMLField xmlFld=(XMLField)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
66164,"/** 
 * @param parentRecord
 * @param aNodeValue
 * @param aNullPolicy
 */
public CompositeObjectMappingContentHandler(UnmarshalRecord parentRecord,XMLCompositeObjectMappingNodeValue aNodeValue,XMLCompositeObjectMapping aMapping,Attributes atts,XPathFragment aFragment,XMLDescriptor aDescriptor){
  super(parentRecord);
  attributes=atts;
  mapping=aMapping;
  nullPolicy=mapping.getNullPolicy();
  nodeValue=aNodeValue;
  xPathFragment=aFragment;
  xmlDescriptor=aDescriptor;
}","public CompositeObjectMappingContentHandler(UnmarshalRecord parentRecord,XMLCompositeObjectMappingNodeValue aNodeValue,XMLCompositeObjectMapping aMapping,Attributes atts,XPathFragment aFragment,XMLDescriptor aDescriptor){
  super(parentRecord,aMapping,atts,aMapping.getNullPolicy(),aFragment,aDescriptor);
  nodeValue=aNodeValue;
}"
66165,"public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,AbstractSession executionSession) throws DatabaseException {
  ContainerPolicy cp=this.getContainerPolicy();
  Object fieldValue=row.getValues(this.getField());
  if ((fieldValue == null) || (fieldValue instanceof String)) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Vector nestedRows=this.getDescriptor().buildNestedRowsFromFieldValue(fieldValue,executionSession);
  if (nestedRows == null) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Object result=null;
  if (reuseContainer) {
    Object currentObject=((XMLRecord)row).getCurrentObject();
    Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
    result=container != null ? container : cp.containerInstance();
  }
 else {
    result=cp.containerInstance(nestedRows.size());
  }
  for (Enumeration stream=nestedRows.elements(); stream.hasMoreElements(); ) {
    AbstractRecord nestedRow=(AbstractRecord)stream.nextElement();
    Object objectToAdd=buildObjectFromNestedRow(nestedRow,joinManager,sourceQuery,executionSession);
    cp.addInto(objectToAdd,result,sourceQuery.getSession());
    if (null != getContainerAccessor()) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      if (this.inverseReferenceMapping.getContainerPolicy() == null) {
        getContainerAccessor().setAttributeValueInObject(objectToAdd,currentObject);
      }
 else {
        Object backpointerContainer=getContainerAccessor().getAttributeValueFromObject(objectToAdd);
        if (backpointerContainer == null) {
          backpointerContainer=this.inverseReferenceMapping.getContainerPolicy().containerInstance();
          getContainerAccessor().setAttributeValueInObject(objectToAdd,backpointerContainer);
        }
        this.inverseReferenceMapping.getContainerPolicy().addInto(currentObject,backpointerContainer,executionSession);
      }
    }
  }
  return result;
}","public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,AbstractSession executionSession) throws DatabaseException {
  ContainerPolicy cp=this.getContainerPolicy();
  Object fieldValue=row.getValues(this.getField());
  if ((fieldValue == null) || (fieldValue instanceof String)) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Vector nestedRows=this.getDescriptor().buildNestedRowsFromFieldValue(fieldValue,executionSession);
  if (nestedRows == null) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Object result=null;
  if (reuseContainer) {
    Object currentObject=((XMLRecord)row).getCurrentObject();
    Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
    result=container != null ? container : cp.containerInstance();
  }
 else {
    result=cp.containerInstance(nestedRows.size());
  }
  for (Enumeration stream=nestedRows.elements(); stream.hasMoreElements(); ) {
    XMLRecord nestedRow=(XMLRecord)stream.nextElement();
    Object objectToAdd;
    if (getNullPolicy().valueIsNull((Element)nestedRow.getDOM())) {
      objectToAdd=null;
    }
 else {
      objectToAdd=buildObjectFromNestedRow(nestedRow,joinManager,sourceQuery,executionSession);
    }
    cp.addInto(objectToAdd,result,sourceQuery.getSession());
    if (null != getContainerAccessor()) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      if (this.inverseReferenceMapping.getContainerPolicy() == null) {
        getContainerAccessor().setAttributeValueInObject(objectToAdd,currentObject);
      }
 else {
        Object backpointerContainer=getContainerAccessor().getAttributeValueFromObject(objectToAdd);
        if (backpointerContainer == null) {
          backpointerContainer=this.inverseReferenceMapping.getContainerPolicy().containerInstance();
          getContainerAccessor().setAttributeValueInObject(objectToAdd,backpointerContainer);
        }
        this.inverseReferenceMapping.getContainerPolicy().addInto(currentObject,backpointerContainer,executionSession);
      }
    }
  }
  return result;
}"
66166,"protected void endPrefixMappings(Element elem) throws SAXException {
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0, numOfAtts=attrs.getLength(); i < numOfAtts; i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      contentHandler.endPrefixMapping(next.getLocalName());
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null) {
        contentHandler.endPrefixMapping(XMLConstants.EMPTY_STRING);
      }
    }
  }
}","protected void endPrefixMappings(Element elem) throws SAXException {
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0, numOfAtts=attrs.getLength(); i < numOfAtts; i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      contentHandler.endPrefixMapping(next.getLocalName());
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (XMLConstants.XMLNS.equals(name)) {
        contentHandler.endPrefixMapping(XMLConstants.EMPTY_STRING);
      }
    }
  }
}"
66167,"public void testSubstitutionGroupsUnmarshal() throws Exception {
  try {
    InputStream xsdStream=ClassLoader.getSystemResourceAsStream(SUBSTITUTION);
    jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(xsdStream,null,null,null);
    InputStream xmlStream=ClassLoader.getSystemResourceAsStream(PERSON_XML);
    JAXBElement person=(JAXBElement)jaxbContext.createUnmarshaller().unmarshal(xmlStream);
    assertEquals(""String_Node_Str"",new QName(""String_Node_Str"",""String_Node_Str""),person.getName());
    JAXBElement name=(JAXBElement)((DynamicEntity)person.getValue()).get(""String_Node_Str"");
    assertEquals(""String_Node_Str"",new QName(""String_Node_Str"",""String_Node_Str""),name.getName());
    InputStream xmlStream2=ClassLoader.getSystemResourceAsStream(PERSONNE_XML);
    JAXBElement person2=(JAXBElement)jaxbContext.createUnmarshaller().unmarshal(xmlStream2);
    assertEquals(""String_Node_Str"",new QName(""String_Node_Str"",""String_Node_Str""),person2.getName());
    JAXBElement name2=(JAXBElement)((DynamicEntity)person2.getValue()).get(""String_Node_Str"");
    assertEquals(""String_Node_Str"",new QName(""String_Node_Str"",""String_Node_Str""),name2.getName());
  }
 catch (  UndeclaredThrowableException e) {
    if (e.getUndeclaredThrowable() instanceof NoSuchMethodException) {
      assertTrue(true);
    }
  }
}","public void testSubstitutionGroupsUnmarshal() throws Exception {
  try {
    InputStream xsdStream=ClassLoader.getSystemResourceAsStream(SUBSTITUTION);
    jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(xsdStream,null,null,null);
    InputStream xmlStream=ClassLoader.getSystemResourceAsStream(PERSON_XML);
    JAXBElement person=(JAXBElement)jaxbContext.createUnmarshaller().unmarshal(xmlStream);
    assertEquals(""String_Node_Str"",new QName(""String_Node_Str"",""String_Node_Str""),person.getName());
    JAXBElement name=(JAXBElement)((DynamicEntity)person.getValue()).get(""String_Node_Str"");
    assertEquals(""String_Node_Str"",new QName(""String_Node_Str"",""String_Node_Str""),name.getName());
    InputStream xmlStream2=ClassLoader.getSystemResourceAsStream(PERSONNE_XML);
    JAXBElement person2=(JAXBElement)jaxbContext.createUnmarshaller().unmarshal(xmlStream2);
    assertEquals(""String_Node_Str"",new QName(""String_Node_Str"",""String_Node_Str""),person2.getName());
    JAXBElement name2=(JAXBElement)((DynamicEntity)person2.getValue()).get(""String_Node_Str"");
    assertEquals(""String_Node_Str"",new QName(""String_Node_Str"",""String_Node_Str""),name2.getName());
  }
 catch (  JAXBException e) {
    try {
      throw e.getLinkedException();
    }
 catch (    UndeclaredThrowableException e2) {
      if (e2.getUndeclaredThrowable() instanceof NoSuchMethodException) {
        assertTrue(true);
      }
    }
catch (    Throwable e2) {
      fail();
    }
  }
}"
66168,"public void testSubstitutionGroupsMarshal() throws Exception {
  try {
    InputStream inputStream=ClassLoader.getSystemResourceAsStream(SUBSTITUTION);
    jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(inputStream,null,null,null);
    QName personQName=new QName(""String_Node_Str"",""String_Node_Str"");
    DynamicEntity person=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
    JAXBElement<DynamicEntity> personElement=new JAXBElement<DynamicEntity>(personQName,DynamicEntity.class,person);
    personElement.setValue(person);
    QName nameQName=new QName(""String_Node_Str"",""String_Node_Str"");
    JAXBElement<String> nameElement=new JAXBElement<String>(nameQName,String.class,""String_Node_Str"");
    person.set(""String_Node_Str"",nameElement);
    Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
    jaxbContext.createMarshaller().marshal(personElement,marshalDoc);
    Node node1=marshalDoc.getDocumentElement();
    assertEquals(""String_Node_Str"",""String_Node_Str"",node1.getLocalName());
    Node node2=node1.getFirstChild();
    assertEquals(""String_Node_Str"",""String_Node_Str"",node2.getLocalName());
    QName personneQName=new QName(""String_Node_Str"",""String_Node_Str"");
    DynamicEntity personne=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
    JAXBElement<DynamicEntity> personneElement=new JAXBElement<DynamicEntity>(personneQName,DynamicEntity.class,personne);
    personneElement.setValue(personne);
    QName nomQName=new QName(""String_Node_Str"",""String_Node_Str"");
    JAXBElement<String> nomElement=new JAXBElement<String>(nomQName,String.class,""String_Node_Str"");
    personne.set(""String_Node_Str"",nomElement);
    Document marshalDoc2=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
    jaxbContext.createMarshaller().marshal(personneElement,marshalDoc2);
    Node node3=marshalDoc2.getDocumentElement();
    assertEquals(""String_Node_Str"",""String_Node_Str"",node3.getLocalName());
    Node node4=node3.getFirstChild();
    assertEquals(""String_Node_Str"",""String_Node_Str"",node4.getLocalName());
  }
 catch (  UndeclaredThrowableException e) {
    if (e.getUndeclaredThrowable() instanceof NoSuchMethodException) {
      assertTrue(true);
    }
  }
}","public void testSubstitutionGroupsMarshal() throws Exception {
  try {
    InputStream inputStream=ClassLoader.getSystemResourceAsStream(SUBSTITUTION);
    jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(inputStream,null,null,null);
    QName personQName=new QName(""String_Node_Str"",""String_Node_Str"");
    DynamicEntity person=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
    JAXBElement<DynamicEntity> personElement=new JAXBElement<DynamicEntity>(personQName,DynamicEntity.class,person);
    personElement.setValue(person);
    QName nameQName=new QName(""String_Node_Str"",""String_Node_Str"");
    JAXBElement<String> nameElement=new JAXBElement<String>(nameQName,String.class,""String_Node_Str"");
    person.set(""String_Node_Str"",nameElement);
    Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
    jaxbContext.createMarshaller().marshal(personElement,marshalDoc);
    Node node1=marshalDoc.getDocumentElement();
    assertEquals(""String_Node_Str"",""String_Node_Str"",node1.getLocalName());
    Node node2=node1.getFirstChild();
    assertEquals(""String_Node_Str"",""String_Node_Str"",node2.getLocalName());
    QName personneQName=new QName(""String_Node_Str"",""String_Node_Str"");
    DynamicEntity personne=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
    JAXBElement<DynamicEntity> personneElement=new JAXBElement<DynamicEntity>(personneQName,DynamicEntity.class,personne);
    personneElement.setValue(personne);
    QName nomQName=new QName(""String_Node_Str"",""String_Node_Str"");
    JAXBElement<String> nomElement=new JAXBElement<String>(nomQName,String.class,""String_Node_Str"");
    personne.set(""String_Node_Str"",nomElement);
    Document marshalDoc2=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
    jaxbContext.createMarshaller().marshal(personneElement,marshalDoc2);
    Node node3=marshalDoc2.getDocumentElement();
    assertEquals(""String_Node_Str"",""String_Node_Str"",node3.getLocalName());
    Node node4=node3.getFirstChild();
    assertEquals(""String_Node_Str"",""String_Node_Str"",node4.getLocalName());
  }
 catch (  JAXBException e) {
    try {
      throw e.getLinkedException();
    }
 catch (    UndeclaredThrowableException e2) {
      if (e2.getUndeclaredThrowable() instanceof NoSuchMethodException) {
        assertTrue(true);
      }
    }
catch (    Throwable e2) {
      fail();
    }
  }
}"
66169,"public void testXmlMixed() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(XMLMIXED);
  try {
    jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(inputStream,null,null,null);
  }
 catch (  UndeclaredThrowableException ute) {
    return;
  }
  DynamicEntity person=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
  assertNotNull(""String_Node_Str"",person);
  ArrayList list=new ArrayList();
  list.add(""String_Node_Str"");
  list.add(new JAXBElement<String>(new QName(""String_Node_Str"",""String_Node_Str""),String.class,person.getClass(),""String_Node_Str""));
  list.add(new JAXBElement<String>(new QName(""String_Node_Str"",""String_Node_Str""),String.class,person.getClass(),""String_Node_Str""));
  list.add(""String_Node_Str"");
  list.add(new JAXBElement<BigInteger>(new QName(""String_Node_Str"",""String_Node_Str""),BigInteger.class,person.getClass(),BigInteger.valueOf(175)));
  list.add(""String_Node_Str"");
  person.set(""String_Node_Str"",list);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  Node node=marshalDoc.getDocumentElement();
  assertTrue(""String_Node_Str"",node.getChildNodes().getLength() == 6);
}","public void testXmlMixed() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(XMLMIXED);
  try {
    jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(inputStream,null,null,null);
  }
 catch (  JAXBException e) {
    if (e.getLinkedException() instanceof UndeclaredThrowableException) {
      return;
    }
  }
  DynamicEntity person=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
  assertNotNull(""String_Node_Str"",person);
  ArrayList list=new ArrayList();
  list.add(""String_Node_Str"");
  list.add(new JAXBElement<String>(new QName(""String_Node_Str"",""String_Node_Str""),String.class,person.getClass(),""String_Node_Str""));
  list.add(new JAXBElement<String>(new QName(""String_Node_Str"",""String_Node_Str""),String.class,person.getClass(),""String_Node_Str""));
  list.add(""String_Node_Str"");
  list.add(new JAXBElement<BigInteger>(new QName(""String_Node_Str"",""String_Node_Str""),BigInteger.class,person.getClass(),BigInteger.valueOf(175)));
  list.add(""String_Node_Str"");
  person.set(""String_Node_Str"",list);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  Node node=marshalDoc.getDocumentElement();
  assertTrue(""String_Node_Str"",node.getChildNodes().getLength() == 6);
}"
66170,"/** 
 * Complete creation of a 'choice' property. Here, a Property is created for each XmlElement in the XmlElements list. Validation is performed as well. Each created Property is added to the owning Property's list of choice properties.
 * @param choiceProperty
 * @param info
 * @param cls
 * @param propertyType
 */
private void processChoiceProperty(Property choiceProperty,TypeInfo info,JavaClass cls,JavaClass propertyType){
  String propertyName=choiceProperty.getPropertyName();
  validateElementIsInPropOrder(info,propertyName);
  XmlPath[] paths=null;
  if (helper.isAnnotationPresent(choiceProperty.getElement(),XmlPaths.class)) {
    XmlPaths pathAnnotation=(XmlPaths)helper.getAnnotation(choiceProperty.getElement(),XmlPaths.class);
    paths=pathAnnotation.value();
  }
  ArrayList<Property> choiceProperties=new ArrayList<Property>();
  for (int i=0; i < choiceProperty.getXmlElements().getXmlElement().size(); i++) {
    org.eclipse.persistence.jaxb.xmlmodel.XmlElement next=choiceProperty.getXmlElements().getXmlElement().get(i);
    Property choiceProp=new Property(helper);
    String name;
    String namespace;
    if (paths != null && next.getXmlPath() == null) {
      XmlPath nextPath=paths[i];
      next.setXmlPath(nextPath.value());
    }
    if (next.getXmlPath() != null) {
      choiceProp.setXmlPath(next.getXmlPath());
      name=XMLProcessor.getNameFromXPath(next.getXmlPath(),propertyName,false);
      namespace=XMLProcessor.DEFAULT;
    }
 else {
      name=next.getName();
      namespace=next.getNamespace();
    }
    if (name == null || name.equals(XMLProcessor.DEFAULT)) {
      if (next.getJavaAttribute() != null) {
        name=next.getJavaAttribute();
      }
 else {
        name=propertyName;
      }
    }
    if (choiceProperty.isXmlIdRef()) {
      TypeInfo tInfo=typeInfo.get(next.getType());
      if (tInfo == null || !tInfo.isIDSet()) {
        throw JAXBException.invalidXmlElementInXmlElementsList(propertyName,name);
      }
    }
    QName qName=null;
    if (!namespace.equals(XMLProcessor.DEFAULT)) {
      qName=new QName(namespace,name);
    }
 else {
      NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(cls);
      if (namespaceInfo.isElementFormQualified()) {
        qName=new QName(namespaceInfo.getNamespace(),name);
      }
 else {
        qName=new QName(name);
      }
    }
    choiceProp.setPropertyName(name);
    if (next.getType().equals(""String_Node_Str"") || next.getType().equals(""String_Node_Str"")) {
      choiceProp.setType(propertyType);
    }
 else {
      choiceProp.setType(helper.getJavaClass(next.getType()));
    }
    choiceProp.setSchemaName(qName);
    choiceProp.setSchemaType(getSchemaTypeFor(choiceProp.getType()));
    choiceProp.setIsXmlIdRef(choiceProperty.isXmlIdRef());
    choiceProp.setXmlElementWrapper(choiceProperty.getXmlElementWrapper());
    choiceProperties.add(choiceProp);
  }
  choiceProperty.setChoiceProperties(choiceProperties);
}","/** 
 * Complete creation of a 'choice' property. Here, a Property is created for each XmlElement in the XmlElements list. Validation is performed as well. Each created Property is added to the owning Property's list of choice properties.
 * @param choiceProperty
 * @param info
 * @param cls
 * @param propertyType
 */
private void processChoiceProperty(Property choiceProperty,TypeInfo info,JavaClass cls,JavaClass propertyType){
  String propertyName=choiceProperty.getPropertyName();
  validateElementIsInPropOrder(info,propertyName);
  XmlPath[] paths=null;
  if (helper.isAnnotationPresent(choiceProperty.getElement(),XmlPaths.class)) {
    XmlPaths pathAnnotation=(XmlPaths)helper.getAnnotation(choiceProperty.getElement(),XmlPaths.class);
    paths=pathAnnotation.value();
  }
  ArrayList<Property> choiceProperties=new ArrayList<Property>();
  for (int i=0; i < choiceProperty.getXmlElements().getXmlElement().size(); i++) {
    org.eclipse.persistence.jaxb.xmlmodel.XmlElement next=choiceProperty.getXmlElements().getXmlElement().get(i);
    Property choiceProp=new Property(helper);
    String name;
    String namespace;
    if (paths != null && next.getXmlPath() == null) {
      XmlPath nextPath=paths[i];
      next.setXmlPath(nextPath.value());
    }
    if (next.getXmlPath() != null) {
      choiceProp.setXmlPath(next.getXmlPath());
      name=XMLProcessor.getNameFromXPath(next.getXmlPath(),propertyName,false);
      namespace=XMLProcessor.DEFAULT;
    }
 else {
      name=next.getName();
      namespace=next.getNamespace();
    }
    if (name == null || name.equals(XMLProcessor.DEFAULT)) {
      if (next.getJavaAttribute() != null) {
        name=next.getJavaAttribute();
      }
 else {
        name=propertyName;
      }
    }
    if (choiceProperty.isXmlIdRef()) {
      TypeInfo tInfo=typeInfo.get(next.getType());
      if (tInfo == null || !tInfo.isIDSet()) {
        throw JAXBException.invalidXmlElementInXmlElementsList(propertyName,name);
      }
    }
    QName qName=null;
    if (!namespace.equals(XMLProcessor.DEFAULT)) {
      qName=new QName(namespace,name);
    }
 else {
      NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(cls);
      if (namespaceInfo.isElementFormQualified()) {
        qName=new QName(namespaceInfo.getNamespace(),name);
      }
 else {
        qName=new QName(name);
      }
    }
    choiceProp.setPropertyName(name);
    if (next.getType().equals(""String_Node_Str"") || next.getType().equals(""String_Node_Str"")) {
      choiceProp.setType(propertyType);
    }
 else {
      choiceProp.setType(helper.getJavaClass(next.getType()));
    }
    choiceProp.setSchemaName(qName);
    choiceProp.setSchemaType(getSchemaTypeFor(choiceProp.getType()));
    choiceProp.setIsXmlIdRef(choiceProperty.isXmlIdRef());
    choiceProp.setXmlElementWrapper(choiceProperty.getXmlElementWrapper());
    choiceProperties.add(choiceProp);
    if (!(this.typeInfo.containsKey(choiceProp.getType().getQualifiedName())) && shouldGenerateTypeInfo(choiceProp.getType())) {
      JavaClass[] jClassArray=new JavaClass[]{choiceProp.getType()};
      buildNewTypeInfo(jClassArray);
    }
  }
  choiceProperty.setChoiceProperties(choiceProperties);
}"
66171,"/** 
 * Perform any final generation and/or validation operations on TypeInfo properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.isTransient()) {
      continue;
    }
    if (!jClass.isInterface() && !tInfo.isEnumerationType()) {
      if (tInfo.getFactoryMethodName() == null && tInfo.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=jClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          if (tInfo.isSetXmlJavaTypeAdapter()) {
            tInfo.setTransient(true);
          }
 else {
            throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(jClass.getName());
          }
        }
      }
    }
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    for (    Property property : tInfo.getPropertyList()) {
      JavaClass typeClass=property.getActualType();
      TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
      if (targetInfo != null && targetInfo.isTransient()) {
        throw JAXBException.invalidReferenceToTransientClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
      }
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isXmlIdRef()) {
        if (targetInfo == null && !typeClass.getQualifiedName().equals(""String_Node_Str"")) {
          throw JAXBException.invalidIDREFClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo != null && targetInfo.getIDProperty() == null) {
          throw JAXBException.invalidIdRef(property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny() && tInfo.isSetAnyElementPropertyName() && !(tInfo.getAnyElementPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),tInfo.getAnyElementPropertyName(),jClass.getName());
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!isCollectionType(property) && !property.getType().isArray()) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isChoice()) {
        processChoiceProperty(property,tInfo,jClass,property.getActualType());
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
      if (property.isXmlTransformation()) {
        processXmlTransformationProperty(property);
      }
      if (property.isSetXmlJoinNodes()) {
        if (targetInfo == null) {
          throw JAXBException.invalidXmlJoinNodeReferencedClass(property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo.getIDProperty() == null && targetInfo.getXmlKeyProperties() == null) {
          throw JAXBException.noKeyOrIDPropertyOnJoinTarget(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        for (        org.eclipse.persistence.jaxb.xmlmodel.XmlJoinNodes.XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
          String refXPath=xmlJoinNode.getReferencedXmlPath();
          if (targetInfo.getIDProperty() != null && refXPath.equals(targetInfo.getIDProperty().getXmlPath())) {
            continue;
          }
          boolean matched=false;
          if (targetInfo.getXmlKeyProperties() != null) {
            for (            Property xmlkeyProperty : targetInfo.getXmlKeyProperties()) {
              if (refXPath.equals(xmlkeyProperty.getXmlPath())) {
                matched=true;
                break;
              }
            }
          }
          if (!matched) {
            throw JAXBException.invalidReferencedXmlPathOnJoin(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName(),refXPath);
          }
        }
      }
    }
  }
}","/** 
 * Perform any final generation and/or validation operations on TypeInfo properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.isTransient()) {
      continue;
    }
    if (!jClass.isInterface() && !tInfo.isEnumerationType()) {
      if (tInfo.getFactoryMethodName() == null && tInfo.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=jClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          if (tInfo.isSetXmlJavaTypeAdapter()) {
            tInfo.setTransient(true);
          }
 else {
            throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(jClass.getName());
          }
        }
      }
    }
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    for (    Property property : tInfo.getPropertyList()) {
      JavaClass typeClass=property.getActualType();
      TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
      if (targetInfo != null && targetInfo.isTransient()) {
        throw JAXBException.invalidReferenceToTransientClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
      }
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isXmlIdRef()) {
        if (targetInfo == null && !typeClass.getQualifiedName().equals(""String_Node_Str"")) {
          throw JAXBException.invalidIDREFClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo != null && targetInfo.getIDProperty() == null) {
          throw JAXBException.invalidIdRef(property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny() && tInfo.isSetAnyElementPropertyName() && !(tInfo.getAnyElementPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),tInfo.getAnyElementPropertyName(),jClass.getName());
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!isCollectionType(property) && !property.getType().isArray()) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
      if (property.isXmlTransformation()) {
        processXmlTransformationProperty(property);
      }
      if (property.isSetXmlJoinNodes()) {
        if (targetInfo == null) {
          throw JAXBException.invalidXmlJoinNodeReferencedClass(property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo.getIDProperty() == null && targetInfo.getXmlKeyProperties() == null) {
          throw JAXBException.noKeyOrIDPropertyOnJoinTarget(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        for (        org.eclipse.persistence.jaxb.xmlmodel.XmlJoinNodes.XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
          String refXPath=xmlJoinNode.getReferencedXmlPath();
          if (targetInfo.getIDProperty() != null && refXPath.equals(targetInfo.getIDProperty().getXmlPath())) {
            continue;
          }
          boolean matched=false;
          if (targetInfo.getXmlKeyProperties() != null) {
            for (            Property xmlkeyProperty : targetInfo.getXmlKeyProperties()) {
              if (refXPath.equals(xmlkeyProperty.getXmlPath())) {
                matched=true;
                break;
              }
            }
          }
          if (!matched) {
            throw JAXBException.invalidReferencedXmlPathOnJoin(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName(),refXPath);
          }
        }
      }
    }
  }
}"
66172,"void processPropertyTypes(JavaClass[] classes){
  for (  JavaClass next : classes) {
    TypeInfo info=getTypeInfo().get(next.getQualifiedName());
    if (info != null) {
      for (      Property property : info.getPropertyList()) {
        JavaClass type=property.getActualType();
        if (!(this.typeInfo.containsKey(type.getQualifiedName())) && shouldGenerateTypeInfo(type)) {
          JavaClass[] jClassArray=new JavaClass[]{type};
          buildNewTypeInfo(jClassArray);
        }
      }
    }
  }
}","void processPropertyTypes(JavaClass[] classes){
  for (  JavaClass next : classes) {
    TypeInfo info=getTypeInfo().get(next.getQualifiedName());
    if (info != null) {
      for (      Property property : info.getPropertyList()) {
        JavaClass type=property.getActualType();
        if (!(this.typeInfo.containsKey(type.getQualifiedName())) && shouldGenerateTypeInfo(type)) {
          JavaClass[] jClassArray=new JavaClass[]{type};
          buildNewTypeInfo(jClassArray);
        }
        if (property.isChoice()) {
          processChoiceProperty(property,info,next,type);
          for (          Property choiceProp : property.getChoiceProperties()) {
            type=choiceProp.getActualType();
            if (!(this.typeInfo.containsKey(type.getQualifiedName())) && shouldGenerateTypeInfo(type)) {
              JavaClass[] jClassArray=new JavaClass[]{type};
              buildNewTypeInfo(jClassArray);
            }
          }
        }
      }
    }
  }
}"
66173,"public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  try {
    String namespaceURI=xPathFragment.getNamespaceURI();
    if (namespaceURI == null) {
      NamespaceContext namespaceContext=xmlStreamWriter.getNamespaceContext();
      if (null == namespaceContext) {
        xmlStreamWriter.writeStartElement(xPathFragment.getLocalName());
      }
 else {
        xmlStreamWriter.writeStartElement(XMLConstants.EMPTY_STRING,xPathFragment.getLocalName(),XMLConstants.EMPTY_STRING);
        String defaultNamespace=xmlStreamWriter.getNamespaceContext().getNamespaceURI(XMLConstants.EMPTY_STRING);
        if (defaultNamespace != null && defaultNamespace.length() > 0) {
          xmlStreamWriter.writeDefaultNamespace(XMLConstants.EMPTY_STRING);
        }
      }
    }
 else {
      String prefix=xPathFragment.getPrefix();
      if (prefix == null) {
        prefix=XMLConstants.EMPTY_STRING;
      }
      xmlStreamWriter.writeStartElement(prefix,xPathFragment.getLocalName(),namespaceURI);
    }
    writePrefixMappings();
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  try {
    String namespaceURI=xPathFragment.getNamespaceURI();
    if (namespaceURI == null) {
      NamespaceContext namespaceContext=xmlStreamWriter.getNamespaceContext();
      if (null == namespaceContext) {
        xmlStreamWriter.writeStartElement(xPathFragment.getLocalName());
      }
 else {
        String defaultNamespace=xmlStreamWriter.getNamespaceContext().getNamespaceURI(XMLConstants.EMPTY_STRING);
        xmlStreamWriter.writeStartElement(XMLConstants.EMPTY_STRING,xPathFragment.getLocalName(),XMLConstants.EMPTY_STRING);
        if (defaultNamespace != null && defaultNamespace.length() > 0) {
          xmlStreamWriter.writeDefaultNamespace(XMLConstants.EMPTY_STRING);
        }
      }
    }
 else {
      String prefix=xPathFragment.getPrefix();
      if (prefix == null) {
        prefix=XMLConstants.EMPTY_STRING;
      }
      xmlStreamWriter.writeStartElement(prefix,xPathFragment.getLocalName(),namespaceURI);
    }
    writePrefixMappings();
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66174,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(XmlNullPolicyTestCases.class);
  suite.addTestSuite(XmlAccessMethodsTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlPropertyTestCases.class);
  suite.addTestSuite(XmlTransformationTestCases.class);
  suite.addTestSuite(XmlTransformationMethodTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmldiscriminator.XmlDiscriminatorTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmljoinnode.XmlJoinNodeTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(XmlNullPolicyTestCases.class);
  suite.addTestSuite(XmlAccessMethodsTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlPropertyTestCases.class);
  suite.addTestSuite(XmlTransformationTestCases.class);
  suite.addTestSuite(XmlTransformationMethodTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmldiscriminator.XmlDiscriminatorTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmljoinnode.XmlJoinNodeTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  return suite;
}"
66175,"public NamespaceInfo getNamespaceInfoForPackage(JavaPackage pack){
  NamespaceInfo packageNamespace=packageToNamespaceMappings.get(pack.getQualifiedName());
  if (packageNamespace == null) {
    XmlSchema xmlSchema=(XmlSchema)helper.getAnnotation(pack,XmlSchema.class);
    packageNamespace=processNamespaceInformation(xmlSchema);
    if (packageNamespace.getNamespace() == null) {
      packageNamespace.setNamespace(EMPTY_STRING);
    }
    if (helper.isAnnotationPresent(pack,XmlAccessorType.class)) {
      XmlAccessorType xmlAccessorType=(XmlAccessorType)helper.getAnnotation(pack,XmlAccessorType.class);
      packageNamespace.setAccessType(XmlAccessType.fromValue(xmlAccessorType.value().name()));
    }
    if (helper.isAnnotationPresent(pack,XmlAccessorOrder.class)) {
      XmlAccessorOrder xmlAccessorOrder=(XmlAccessorOrder)helper.getAnnotation(pack,XmlAccessorOrder.class);
      packageNamespace.setAccessOrder(XmlAccessOrder.fromValue(xmlAccessorOrder.value().name()));
    }
    packageToNamespaceMappings.put(pack.getQualifiedName(),packageNamespace);
  }
  return packageNamespace;
}","public NamespaceInfo getNamespaceInfoForPackage(JavaPackage pack,String packageName){
  NamespaceInfo packageNamespace=packageToNamespaceMappings.get(packageName);
  if (packageNamespace == null) {
    XmlSchema xmlSchema=(XmlSchema)helper.getAnnotation(pack,XmlSchema.class);
    packageNamespace=processNamespaceInformation(xmlSchema);
    if (packageNamespace.getNamespace() == null) {
      packageNamespace.setNamespace(EMPTY_STRING);
    }
    if (helper.isAnnotationPresent(pack,XmlAccessorType.class)) {
      XmlAccessorType xmlAccessorType=(XmlAccessorType)helper.getAnnotation(pack,XmlAccessorType.class);
      packageNamespace.setAccessType(XmlAccessType.fromValue(xmlAccessorType.value().name()));
    }
    if (helper.isAnnotationPresent(pack,XmlAccessorOrder.class)) {
      XmlAccessorOrder xmlAccessorOrder=(XmlAccessorOrder)helper.getAnnotation(pack,XmlAccessorOrder.class);
      packageNamespace.setAccessOrder(XmlAccessOrder.fromValue(xmlAccessorOrder.value().name()));
    }
    packageToNamespaceMappings.put(packageName,packageNamespace);
  }
  return packageNamespace;
}"
66176,"private Class generateArrayValue(JavaClass arrayClass,JavaClass componentClass,JavaClass nestedClass,TypeMappingInfo typeMappingInfo){
  String packageName;
  String qualifiedClassName;
  if (componentClass.isArray()) {
    packageName=componentClass.getPackageName();
    qualifiedClassName=nestedClass.getQualifiedName() + ARRAY_CLASS_NAME_SUFFIX;
  }
 else {
    if (componentClass.isPrimitive()) {
      packageName=ARRAY_PACKAGE_NAME;
      qualifiedClassName=packageName + ""String_Node_Str"" + componentClass.getName()+ ARRAY_CLASS_NAME_SUFFIX;
    }
 else {
      packageName=ARRAY_PACKAGE_NAME + ""String_Node_Str"" + componentClass.getPackageName();
      if (componentClass.isMemberClass()) {
        qualifiedClassName=componentClass.getName();
        qualifiedClassName=qualifiedClassName.substring(qualifiedClassName.indexOf('$') + 1);
        qualifiedClassName=ARRAY_PACKAGE_NAME + ""String_Node_Str"" + componentClass.getPackageName()+ ""String_Node_Str""+ qualifiedClassName+ ARRAY_CLASS_NAME_SUFFIX;
      }
 else {
        qualifiedClassName=ARRAY_PACKAGE_NAME + ""String_Node_Str"" + componentClass.getQualifiedName()+ ARRAY_CLASS_NAME_SUFFIX;
      }
    }
    if (componentClass.isPrimitive() || helper.isBuiltInJavaType(componentClass)) {
      NamespaceInfo namespaceInfo=getPackageToNamespaceMappings().get(packageName);
      if (namespaceInfo == null) {
        namespaceInfo=new NamespaceInfo();
        namespaceInfo.setNamespace(ARRAY_NAMESPACE);
        namespaceInfo.setNamespaceResolver(new NamespaceResolver());
        getPackageToNamespaceMappings().put(packageName,namespaceInfo);
      }
    }
 else {
      NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(componentClass.getPackage());
      getPackageToNamespaceMappings().put(packageName,namespaceInfo);
    }
  }
  String qualifiedInternalClassName=qualifiedClassName.replace('.','/');
  String superClassName;
  if (componentClass.isArray()) {
    superClassName=""String_Node_Str"";
  }
 else {
    superClassName=""String_Node_Str"";
  }
  ClassWriter cw=new ClassWriter(false);
  cw.visit(Constants.V1_5,Constants.ACC_PUBLIC + Constants.ACC_SUPER,qualifiedInternalClassName,superClassName,null,null);
  CodeVisitor cv=cw.visitMethod(Constants.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitMethodInsn(Constants.INVOKESPECIAL,superClassName,""String_Node_Str"",""String_Node_Str"");
  cv.visitInsn(Constants.RETURN);
  cv.visitMaxs(1,1);
  if (componentClass.isArray()) {
    cv=cw.visitMethod(Constants.ACC_PROTECTED,""String_Node_Str"",""String_Node_Str"",null,null);
    cv.visitLdcInsn(Type.getType(""String_Node_Str"" + nestedClass.getQualifiedName().replace('.','/') + ""String_Node_Str""));
    cv.visitInsn(Constants.ARETURN);
    cv.visitMaxs(1,1);
  }
  cv=cw.visitMethod(Constants.ACC_PROTECTED,""String_Node_Str"",""String_Node_Str"",null,null);
  JavaClass baseComponentClass=getBaseComponentType(componentClass);
  if (baseComponentClass.isPrimitive()) {
    cv.visitFieldInsn(Constants.GETSTATIC,getObjectType(baseComponentClass).getQualifiedName().replace('.','/'),""String_Node_Str"",""String_Node_Str"");
  }
 else {
    cv.visitLdcInsn(Type.getType(""String_Node_Str"" + baseComponentClass.getQualifiedName().replace('.','/') + ""String_Node_Str""));
  }
  cv.visitInsn(Constants.ARETURN);
  cv.visitMaxs(1,1);
  RuntimeVisibleAnnotations getAdaptedValueMethodAnnotations=new RuntimeVisibleAnnotations();
  Annotation xmlElementAnnotation=new Annotation(""String_Node_Str"");
  xmlElementAnnotation.add(""String_Node_Str"",""String_Node_Str"");
  xmlElementAnnotation.add(""String_Node_Str"",Type.getType(""String_Node_Str"" + getObjectType(nestedClass).getName().replace('.','/') + ""String_Node_Str""));
  getAdaptedValueMethodAnnotations.annotations.add(xmlElementAnnotation);
  cv=cw.visitMethod(Constants.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,getAdaptedValueMethodAnnotations);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitFieldInsn(Constants.GETFIELD,qualifiedInternalClassName,""String_Node_Str"",""String_Node_Str"");
  cv.visitInsn(Constants.ARETURN);
  cv.visitMaxs(1,1);
  return generateClassFromBytes(qualifiedClassName,cw.toByteArray());
}","private Class generateArrayValue(JavaClass arrayClass,JavaClass componentClass,JavaClass nestedClass,TypeMappingInfo typeMappingInfo){
  String packageName;
  String qualifiedClassName;
  if (componentClass.isArray()) {
    packageName=componentClass.getPackageName();
    qualifiedClassName=nestedClass.getQualifiedName() + ARRAY_CLASS_NAME_SUFFIX;
  }
 else {
    if (componentClass.isPrimitive()) {
      packageName=ARRAY_PACKAGE_NAME;
      qualifiedClassName=packageName + ""String_Node_Str"" + componentClass.getName()+ ARRAY_CLASS_NAME_SUFFIX;
    }
 else {
      packageName=ARRAY_PACKAGE_NAME + ""String_Node_Str"" + componentClass.getPackageName();
      if (componentClass.isMemberClass()) {
        qualifiedClassName=componentClass.getName();
        qualifiedClassName=qualifiedClassName.substring(qualifiedClassName.indexOf('$') + 1);
        qualifiedClassName=ARRAY_PACKAGE_NAME + ""String_Node_Str"" + componentClass.getPackageName()+ ""String_Node_Str""+ qualifiedClassName+ ARRAY_CLASS_NAME_SUFFIX;
      }
 else {
        qualifiedClassName=ARRAY_PACKAGE_NAME + ""String_Node_Str"" + componentClass.getQualifiedName()+ ARRAY_CLASS_NAME_SUFFIX;
      }
    }
    if (componentClass.isPrimitive() || helper.isBuiltInJavaType(componentClass)) {
      NamespaceInfo namespaceInfo=getPackageToNamespaceMappings().get(packageName);
      if (namespaceInfo == null) {
        namespaceInfo=new NamespaceInfo();
        namespaceInfo.setNamespace(ARRAY_NAMESPACE);
        namespaceInfo.setNamespaceResolver(new NamespaceResolver());
        getPackageToNamespaceMappings().put(packageName,namespaceInfo);
      }
    }
 else {
      NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(componentClass.getPackage(),componentClass.getPackageName());
      getPackageToNamespaceMappings().put(packageName,namespaceInfo);
    }
  }
  String qualifiedInternalClassName=qualifiedClassName.replace('.','/');
  String superClassName;
  if (componentClass.isArray()) {
    superClassName=""String_Node_Str"";
  }
 else {
    superClassName=""String_Node_Str"";
  }
  ClassWriter cw=new ClassWriter(false);
  cw.visit(Constants.V1_5,Constants.ACC_PUBLIC + Constants.ACC_SUPER,qualifiedInternalClassName,superClassName,null,null);
  CodeVisitor cv=cw.visitMethod(Constants.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitMethodInsn(Constants.INVOKESPECIAL,superClassName,""String_Node_Str"",""String_Node_Str"");
  cv.visitInsn(Constants.RETURN);
  cv.visitMaxs(1,1);
  if (componentClass.isArray()) {
    cv=cw.visitMethod(Constants.ACC_PROTECTED,""String_Node_Str"",""String_Node_Str"",null,null);
    cv.visitLdcInsn(Type.getType(""String_Node_Str"" + nestedClass.getQualifiedName().replace('.','/') + ""String_Node_Str""));
    cv.visitInsn(Constants.ARETURN);
    cv.visitMaxs(1,1);
  }
  cv=cw.visitMethod(Constants.ACC_PROTECTED,""String_Node_Str"",""String_Node_Str"",null,null);
  JavaClass baseComponentClass=getBaseComponentType(componentClass);
  if (baseComponentClass.isPrimitive()) {
    cv.visitFieldInsn(Constants.GETSTATIC,getObjectType(baseComponentClass).getQualifiedName().replace('.','/'),""String_Node_Str"",""String_Node_Str"");
  }
 else {
    cv.visitLdcInsn(Type.getType(""String_Node_Str"" + baseComponentClass.getQualifiedName().replace('.','/') + ""String_Node_Str""));
  }
  cv.visitInsn(Constants.ARETURN);
  cv.visitMaxs(1,1);
  RuntimeVisibleAnnotations getAdaptedValueMethodAnnotations=new RuntimeVisibleAnnotations();
  Annotation xmlElementAnnotation=new Annotation(""String_Node_Str"");
  xmlElementAnnotation.add(""String_Node_Str"",""String_Node_Str"");
  xmlElementAnnotation.add(""String_Node_Str"",Type.getType(""String_Node_Str"" + getObjectType(nestedClass).getName().replace('.','/') + ""String_Node_Str""));
  getAdaptedValueMethodAnnotations.annotations.add(xmlElementAnnotation);
  cv=cw.visitMethod(Constants.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,getAdaptedValueMethodAnnotations);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitFieldInsn(Constants.GETFIELD,qualifiedInternalClassName,""String_Node_Str"",""String_Node_Str"");
  cv.visitInsn(Constants.ARETURN);
  cv.visitMaxs(1,1);
  return generateClassFromBytes(qualifiedClassName,cw.toByteArray());
}"
66177,"@XmlIsSetNullPolicy(xsiNilRepresentsNull=true,emptyNodeRepresentsNull=false,nullRepresentationForXml=XmlMarshalNullRepresentation.XSI_NIL,isSetMethodName=""String_Node_Str"",isSetMethodParameters={@XmlParameter(value=""String_Node_Str"",type=Boolean.class)}) @XmlElement(name=""String_Node_Str"") public String getSomeString(){
  return someString;
}","@XmlIsSetNullPolicy(xsiNilRepresentsNull=true,emptyNodeRepresentsNull=false,nullRepresentationForXml=XmlMarshalNullRepresentation.XSI_NIL,isSetMethodName=""String_Node_Str"",isSetParameters={@XmlParameter(value=""String_Node_Str"",type=Boolean.class)}) @XmlElement(name=""String_Node_Str"") public String getSomeString(){
  return someString;
}"
66178,"public void testXmlJoinNode() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(XMLJOINNODE);
  if (iStream == null) {
    fail(""String_Node_Str"" + XMLJOINNODE + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(PACKAGE,new StreamSource(iStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity company=exampleCompany();
  assertNotNull(""String_Node_Str"",company);
  Document companyDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(company,companyDoc);
  DynamicEntity readCompany=(DynamicEntity)jaxbContext.createUnmarshaller().unmarshal(companyDoc);
  ArrayList<DynamicEntity> readEmployees=readCompany.get(""String_Node_Str"");
  for (Iterator iterator=readEmployees.iterator(); iterator.hasNext(); ) {
    DynamicEntity emp=(DynamicEntity)iterator.next();
    DynamicEntity add=emp.get(""String_Node_Str"");
    String idString=emp.get(""String_Node_Str"").toString();
    String expectedAddressIdString=idString + idString.charAt(0);
    assertEquals(""String_Node_Str"",add.get(""String_Node_Str"").toString(),expectedAddressIdString);
  }
}","public void testXmlJoinNode() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(XMLJOINNODE);
  if (iStream == null) {
    fail(""String_Node_Str"" + XMLJOINNODE + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(PACKAGE,new StreamSource(iStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity company=exampleCompany();
  assertNotNull(""String_Node_Str"",company);
  Document companyDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(company,companyDoc);
  DynamicEntity readCompany=(DynamicEntity)jaxbContext.createUnmarshaller().unmarshal(companyDoc);
  ArrayList<DynamicEntity> readEmployees=readCompany.get(""String_Node_Str"");
  for (Iterator iterator=readEmployees.iterator(); iterator.hasNext(); ) {
    DynamicEntity emp=(DynamicEntity)iterator.next();
    DynamicEntity add=emp.get(""String_Node_Str"");
    String idString=((Integer)emp.get(""String_Node_Str"")).toString();
    String expectedAddressIdString=idString + idString.charAt(0);
    assertEquals(""String_Node_Str"",((Integer)add.get(""String_Node_Str"")).toString(),expectedAddressIdString);
  }
}"
66179,"/** 
 * Process XmlBindings on a per package basis for a given AnnotationsProcessor instance.
 * @param annotationsProcessor
 */
public void processXML(AnnotationsProcessor annotationsProcessor,JavaModelInput jModelInput,TypeMappingInfo[] typeMappingInfos,JavaClass[] originalJavaClasses){
  this.jModelInput=jModelInput;
  this.aProcessor=annotationsProcessor;
  Map<String,XmlEnum> xmlEnumMap=new HashMap<String,XmlEnum>();
  annotationsProcessor.init(originalJavaClasses,typeMappingInfos);
  Map<String,ArrayList<JavaClass>> pkgToClassMap=buildPackageToJavaClassMap();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    NamespaceInfo nsInfo=processXmlSchema(xmlBindings,packageName);
    if (nsInfo != null) {
      annotationsProcessor.addPackageToNamespaceMapping(packageName,nsInfo);
    }
    XmlRegistries xmlRegs=xmlBindings.getXmlRegistries();
    if (xmlRegs != null) {
      for (      XmlRegistry xmlReg : xmlRegs.getXmlRegistry()) {
        aProcessor.addXmlRegistry(xmlReg.getName(),xmlReg);
      }
    }
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    XmlEnums xmlEnums=xmlBindings.getXmlEnums();
    if (xmlEnums != null) {
      for (      XmlEnum xmlEnum : xmlEnums.getXmlEnum()) {
        xmlEnumMap.put(xmlEnum.getJavaEnum(),xmlEnum);
      }
    }
    Map<String,TypeInfo> typeInfoMap=annotationsProcessor.preBuildTypeInfo(javaClasses);
    List<XmlSchemaType> xmlSchemaTypes=null;
    XmlSchemaTypes sTypes=xmlBindings.getXmlSchemaTypes();
    if (sTypes != null) {
      xmlSchemaTypes=sTypes.getXmlSchemaType();
    }
 else {
      xmlSchemaTypes=new ArrayList<XmlSchemaType>();
    }
    if (xmlBindings.getXmlSchemaType() != null) {
      xmlSchemaTypes.add(xmlBindings.getXmlSchemaType());
    }
    for (    XmlSchemaType sType : xmlSchemaTypes) {
      JavaClass jClass=aProcessor.getHelper().getJavaClass(sType.getType());
      if (jClass != null) {
        aProcessor.processSchemaType(sType.getName(),sType.getNamespace(),jClass.getQualifiedName());
      }
    }
    nsInfo=annotationsProcessor.getPackageToNamespaceMappings().get(packageName);
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo info=typeInfoMap.get(javaType.getName());
        if (javaType.getXmlJavaTypeAdapter() != null) {
          info.setXmlJavaTypeAdapter(javaType.getXmlJavaTypeAdapter());
        }
        if (javaType.isSetXmlAccessorOrder()) {
          info.setXmlAccessOrder(javaType.getXmlAccessorOrder());
        }
 else         if (!info.isSetXmlAccessOrder()) {
          if (xmlBindings.isSetXmlAccessorOrder()) {
            info.setXmlAccessOrder(xmlBindings.getXmlAccessorOrder());
          }
 else {
            info.setXmlAccessOrder(nsInfo.getAccessOrder());
          }
        }
        if (javaType.isSetXmlAccessorType()) {
          info.setXmlAccessType(javaType.getXmlAccessorType());
        }
 else         if (!info.isSetXmlAccessType()) {
          if (xmlBindings.isSetXmlAccessorType()) {
            info.setXmlAccessType(xmlBindings.getXmlAccessorType());
          }
 else {
            info.setXmlAccessType(nsInfo.getAccessType());
          }
        }
        if (javaType.isSetXmlInlineBinaryData()) {
          info.setInlineBinaryData(javaType.isXmlInlineBinaryData());
        }
        if (javaType.isSetXmlTransient()) {
          info.setXmlTransient(javaType.isXmlTransient());
        }
        if (javaType.getXmlRootElement() != null) {
          info.setXmlRootElement(javaType.getXmlRootElement());
        }
        if (javaType.getXmlSeeAlso() != null && javaType.getXmlSeeAlso().size() > 0) {
          info.setXmlSeeAlso(javaType.getXmlSeeAlso());
        }
        if (javaType.getXmlType() != null) {
          info.setXmlType(javaType.getXmlType());
        }
        if (javaType.getXmlCustomizer() != null) {
          info.setXmlCustomizer(javaType.getXmlCustomizer());
        }
        if (javaType.getXmlClassExtractor() != null) {
          info.setClassExtractorName(javaType.getXmlClassExtractor().getClazz());
        }
        if (javaType.getXmlProperties() != null && javaType.getXmlProperties().getXmlProperty().size() > 0) {
          if (info.getUserProperties() != null) {
            info.setUserProperties(mergeUserPropertyMap(javaType.getXmlProperties().getXmlProperty(),info.getUserProperties()));
          }
 else {
            info.setUserProperties(createUserPropertyMap(javaType.getXmlProperties().getXmlProperty()));
          }
        }
        if (javaType.getXmlDiscriminatorNode() != null) {
          info.setXmlDiscriminatorNode(javaType.getXmlDiscriminatorNode());
        }
        if (javaType.getXmlDiscriminatorValue() != null) {
          info.setXmlDiscriminatorValue(javaType.getXmlDiscriminatorValue());
        }
      }
    }
    if (xmlBindings.getXmlJavaTypeAdapters() != null) {
      Map<String,TypeInfo> typeInfos=aProcessor.getTypeInfosForPackage(packageName);
      for (      TypeInfo tInfo : typeInfos.values()) {
        List<XmlJavaTypeAdapter> adapters=xmlBindings.getXmlJavaTypeAdapters().getXmlJavaTypeAdapter();
        for (        XmlJavaTypeAdapter xja : adapters) {
          try {
            JavaClass adapterClass=jModelInput.getJavaModel().getClass(xja.getValue());
            JavaClass boundType=jModelInput.getJavaModel().getClass(xja.getType());
            if (boundType != null) {
              tInfo.addPackageLevelAdapterClass(adapterClass,boundType);
            }
          }
 catch (          JAXBException e) {
            throw JAXBException.invalidPackageAdapterClass(xja.getValue(),packageName);
          }
        }
      }
    }
    javaClasses=annotationsProcessor.postBuildTypeInfo(javaClasses);
    annotationsProcessor.processJavaClasses(null);
    Map<String,TypeInfo> typeInfosForPackage=annotationsProcessor.getTypeInfosForPackage(packageName);
    for (    Entry<String,TypeInfo> entry : typeInfosForPackage.entrySet()) {
      TypeInfo tInfo=entry.getValue();
      if (tInfo.isEnumerationType()) {
        EnumTypeInfo etInfo=(EnumTypeInfo)tInfo;
        XmlEnum xmlEnum=xmlEnumMap.get(etInfo.getClassName());
        if (xmlEnum != null) {
          JavaClass restrictionClass=aProcessor.getHelper().getJavaClass(xmlEnum.getValue());
          if (restrictionClass == null) {
            restrictionClass=jModelInput.getJavaModel().getClass(String.class);
          }
          etInfo.setRestrictionBase(aProcessor.getSchemaTypeFor(restrictionClass));
          for (          XmlEnumValue xmlEnumValue : xmlEnum.getXmlEnumValue()) {
            etInfo.addJavaFieldToXmlEnumValuePair(true,xmlEnumValue.getJavaEnumValue(),xmlEnumValue.getValue());
          }
        }
      }
    }
    jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        processJavaType(javaType,typeInfosForPackage.get(javaType.getName()),nsInfo);
      }
    }
    pkgToClassMap.remove(packageName);
  }
  Iterator<ArrayList<JavaClass>> classIt=pkgToClassMap.values().iterator();
  while (classIt.hasNext()) {
    ArrayList<JavaClass> jClassList=classIt.next();
    JavaClass[] jClassArray=(JavaClass[])jClassList.toArray(new JavaClass[jClassList.size()]);
    annotationsProcessor.buildNewTypeInfo(jClassArray);
    annotationsProcessor.processJavaClasses(jClassArray);
  }
  Map<String,TypeInfo> typeInfos=(Map<String,TypeInfo>)aProcessor.getTypeInfo().clone();
  for (  Entry<String,TypeInfo> entry : typeInfos.entrySet()) {
    JavaClass[] jClassArray;
    for (    Property prop : entry.getValue().getPropertyList()) {
      if (prop.isSetXmlJavaTypeAdapter()) {
        jClassArray=new JavaClass[]{prop.getActualType()};
        aProcessor.buildNewTypeInfo(jClassArray);
      }
    }
  }
  ArrayList<JavaClass> jClasses=aProcessor.getTypeInfoClasses();
  aProcessor.processPropertyTypes(jClasses.toArray(new JavaClass[jClasses.size()]));
  aProcessor.finalizeProperties();
  aProcessor.createElementsForTypeMappingInfo();
}","/** 
 * Process XmlBindings on a per package basis for a given AnnotationsProcessor instance.
 * @param annotationsProcessor
 */
public void processXML(AnnotationsProcessor annotationsProcessor,JavaModelInput jModelInput,TypeMappingInfo[] typeMappingInfos,JavaClass[] originalJavaClasses){
  this.jModelInput=jModelInput;
  this.aProcessor=annotationsProcessor;
  Map<String,XmlEnum> xmlEnumMap=new HashMap<String,XmlEnum>();
  annotationsProcessor.init(originalJavaClasses,typeMappingInfos);
  Map<String,ArrayList<JavaClass>> pkgToClassMap=buildPackageToJavaClassMap();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    NamespaceInfo nsInfo=processXmlSchema(xmlBindings,packageName);
    if (nsInfo != null) {
      annotationsProcessor.addPackageToNamespaceMapping(packageName,nsInfo);
    }
    XmlRegistries xmlRegs=xmlBindings.getXmlRegistries();
    if (xmlRegs != null) {
      for (      XmlRegistry xmlReg : xmlRegs.getXmlRegistry()) {
        aProcessor.addXmlRegistry(xmlReg.getName(),xmlReg);
      }
    }
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    XmlEnums xmlEnums=xmlBindings.getXmlEnums();
    if (xmlEnums != null) {
      for (      XmlEnum xmlEnum : xmlEnums.getXmlEnum()) {
        xmlEnumMap.put(xmlEnum.getJavaEnum(),xmlEnum);
      }
    }
    Map<String,TypeInfo> typeInfoMap=annotationsProcessor.preBuildTypeInfo(javaClasses);
    List<XmlSchemaType> xmlSchemaTypes=null;
    XmlSchemaTypes sTypes=xmlBindings.getXmlSchemaTypes();
    if (sTypes != null) {
      xmlSchemaTypes=sTypes.getXmlSchemaType();
    }
 else {
      xmlSchemaTypes=new ArrayList<XmlSchemaType>();
    }
    if (xmlBindings.getXmlSchemaType() != null) {
      xmlSchemaTypes.add(xmlBindings.getXmlSchemaType());
    }
    for (    XmlSchemaType sType : xmlSchemaTypes) {
      JavaClass jClass=aProcessor.getHelper().getJavaClass(sType.getType());
      if (jClass != null) {
        aProcessor.processSchemaType(sType.getName(),sType.getNamespace(),jClass.getQualifiedName());
      }
    }
    nsInfo=annotationsProcessor.getPackageToNamespaceMappings().get(packageName);
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo info=typeInfoMap.get(javaType.getName());
        if (javaType.getXmlJavaTypeAdapter() != null) {
          info.setXmlJavaTypeAdapter(javaType.getXmlJavaTypeAdapter());
        }
        if (javaType.isSetXmlAccessorOrder()) {
          info.setXmlAccessOrder(javaType.getXmlAccessorOrder());
        }
 else         if (!info.isSetXmlAccessOrder()) {
          if (xmlBindings.isSetXmlAccessorOrder()) {
            info.setXmlAccessOrder(xmlBindings.getXmlAccessorOrder());
          }
 else {
            info.setXmlAccessOrder(nsInfo.getAccessOrder());
          }
        }
        if (javaType.isSetXmlAccessorType()) {
          info.setXmlAccessType(javaType.getXmlAccessorType());
        }
 else         if (!info.isSetXmlAccessType()) {
          if (xmlBindings.isSetXmlAccessorType()) {
            info.setXmlAccessType(xmlBindings.getXmlAccessorType());
          }
 else {
            info.setXmlAccessType(nsInfo.getAccessType());
          }
        }
        if (javaType.isSetXmlInlineBinaryData()) {
          info.setInlineBinaryData(javaType.isXmlInlineBinaryData());
        }
        if (javaType.isSetXmlTransient()) {
          info.setXmlTransient(javaType.isXmlTransient());
        }
        if (javaType.getXmlRootElement() != null) {
          info.setXmlRootElement(javaType.getXmlRootElement());
        }
        if (javaType.getXmlSeeAlso() != null && javaType.getXmlSeeAlso().size() > 0) {
          info.setXmlSeeAlso(javaType.getXmlSeeAlso());
        }
        if (javaType.getXmlType() != null) {
          info.setXmlType(javaType.getXmlType());
        }
        if (javaType.getXmlCustomizer() != null) {
          info.setXmlCustomizer(javaType.getXmlCustomizer());
        }
        if (javaType.getXmlClassExtractor() != null) {
          info.setClassExtractorName(javaType.getXmlClassExtractor().getClazz());
        }
        if (javaType.getXmlProperties() != null && javaType.getXmlProperties().getXmlProperty().size() > 0) {
          if (info.getUserProperties() != null) {
            info.setUserProperties(mergeUserPropertyMap(javaType.getXmlProperties().getXmlProperty(),info.getUserProperties()));
          }
 else {
            info.setUserProperties(createUserPropertyMap(javaType.getXmlProperties().getXmlProperty()));
          }
        }
        if (javaType.getXmlDiscriminatorNode() != null) {
          info.setXmlDiscriminatorNode(javaType.getXmlDiscriminatorNode());
        }
        if (javaType.getXmlDiscriminatorValue() != null) {
          info.setXmlDiscriminatorValue(javaType.getXmlDiscriminatorValue());
        }
      }
    }
    if (xmlBindings.getXmlJavaTypeAdapters() != null) {
      Map<String,TypeInfo> typeInfos=aProcessor.getTypeInfosForPackage(packageName);
      for (      TypeInfo tInfo : typeInfos.values()) {
        List<XmlJavaTypeAdapter> adapters=xmlBindings.getXmlJavaTypeAdapters().getXmlJavaTypeAdapter();
        for (        XmlJavaTypeAdapter xja : adapters) {
          try {
            JavaClass adapterClass=jModelInput.getJavaModel().getClass(xja.getValue());
            JavaClass boundType=jModelInput.getJavaModel().getClass(xja.getType());
            if (boundType != null) {
              tInfo.addPackageLevelAdapterClass(adapterClass,boundType);
            }
          }
 catch (          JAXBException e) {
            throw JAXBException.invalidPackageAdapterClass(xja.getValue(),packageName);
          }
        }
      }
    }
  }
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    javaClasses=annotationsProcessor.postBuildTypeInfo(javaClasses);
    annotationsProcessor.processJavaClasses(null);
    Map<String,TypeInfo> typeInfosForPackage=annotationsProcessor.getTypeInfosForPackage(packageName);
    for (    Entry<String,TypeInfo> entry : typeInfosForPackage.entrySet()) {
      TypeInfo tInfo=entry.getValue();
      if (tInfo.isEnumerationType()) {
        EnumTypeInfo etInfo=(EnumTypeInfo)tInfo;
        XmlEnum xmlEnum=xmlEnumMap.get(etInfo.getClassName());
        if (xmlEnum != null) {
          JavaClass restrictionClass=aProcessor.getHelper().getJavaClass(xmlEnum.getValue());
          if (restrictionClass == null) {
            restrictionClass=jModelInput.getJavaModel().getClass(String.class);
          }
          etInfo.setRestrictionBase(aProcessor.getSchemaTypeFor(restrictionClass));
          for (          XmlEnumValue xmlEnumValue : xmlEnum.getXmlEnumValue()) {
            etInfo.addJavaFieldToXmlEnumValuePair(true,xmlEnumValue.getJavaEnumValue(),xmlEnumValue.getValue());
          }
        }
      }
    }
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    NamespaceInfo nsInfo=annotationsProcessor.getPackageToNamespaceMappings().get(packageName);
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        processJavaType(javaType,typeInfosForPackage.get(javaType.getName()),nsInfo);
      }
    }
    pkgToClassMap.remove(packageName);
  }
  Iterator<ArrayList<JavaClass>> classIt=pkgToClassMap.values().iterator();
  while (classIt.hasNext()) {
    ArrayList<JavaClass> jClassList=classIt.next();
    JavaClass[] jClassArray=(JavaClass[])jClassList.toArray(new JavaClass[jClassList.size()]);
    annotationsProcessor.buildNewTypeInfo(jClassArray);
    annotationsProcessor.processJavaClasses(jClassArray);
  }
  Map<String,TypeInfo> typeInfos=(Map<String,TypeInfo>)aProcessor.getTypeInfo().clone();
  for (  Entry<String,TypeInfo> entry : typeInfos.entrySet()) {
    JavaClass[] jClassArray;
    for (    Property prop : entry.getValue().getPropertyList()) {
      if (prop.isSetXmlJavaTypeAdapter()) {
        jClassArray=new JavaClass[]{prop.getActualType()};
        aProcessor.buildNewTypeInfo(jClassArray);
      }
    }
  }
  ArrayList<JavaClass> jClasses=aProcessor.getTypeInfoClasses();
  aProcessor.processPropertyTypes(jClasses.toArray(new JavaClass[jClasses.size()]));
  aProcessor.finalizeProperties();
  aProcessor.createElementsForTypeMappingInfo();
}"
66180,"/** 
 * This exception would typically be used by JAXBContextFactory during externalized metadata processing (i.e. eclipselink-oxm.xml).  This exception applies to the case where the Value (in the package name to metadata source map) is null.
 * @param key
 * @return
 */
public static JAXBException nullMetadataSource(String key){
  Object[] args={key};
  JAXBException exception=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,NULL_METADATA_SOURCE,args));
  exception.setErrorCode(NULL_METADATA_SOURCE);
  return exception;
}","/** 
 * This exception would typically be used by JAXBContextFactory during externalized metadata processing (i.e. eclipselink-oxm.xml).  This exception applies to the case where the handle to the OXM metadata file is null.
 * @return
 */
public static JAXBException nullMetadataSource(){
  Object[] args={};
  JAXBException exception=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,NULL_METADATA_FILE,args));
  exception.setErrorCode(NULL_METADATA_FILE);
  return exception;
}"
66181,"public void initialize(org.eclipse.persistence.internal.sessions.AbstractSession session){
  super.initialize(session);
  XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
  Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
  Iterator fieldTransformerIterator;
  DatabaseMapping xmlMapping;
  AbstractTransformationMapping transformationMapping;
  FieldTransformerNodeValue fieldTransformerNodeValue;
  Object[] nextFieldToTransformer;
  TypeNodeValue typeNodeValue;
  NodeValue mappingNodeValue=null;
  XMLField xmlField;
  while (mappingIterator.hasNext()) {
    xmlMapping=(DatabaseMapping)mappingIterator.next();
    if (xmlMapping instanceof XMLInverseReferenceMapping) {
      continue;
    }
    xmlField=(XMLField)xmlMapping.getField();
    if (xmlMapping.isTransformationMapping()) {
      transformationMapping=(AbstractTransformationMapping)xmlMapping;
      addTransformationMapping(transformationMapping);
      fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
      while (fieldTransformerIterator.hasNext()) {
        fieldTransformerNodeValue=new FieldTransformerNodeValue();
        nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
        xmlField=(XMLField)nextFieldToTransformer[0];
        fieldTransformerNodeValue.setXMLField(xmlField);
        fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
        addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
 else {
      if (xmlMapping.isAbstractDirectMapping()) {
        mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeObjectMapping()) {
        mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
        mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeCollectionMapping()) {
        mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyObjectMapping) {
        mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyCollectionMapping) {
        mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyAttributeMapping) {
        mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataMapping) {
        mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
        mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentMapping) {
        mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentCollectionMapping) {
        mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLCollectionReferenceMapping) {
        XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
        List fields=xmlColMapping.getFields();
        XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
        XPathNode branchNode;
        if (null == xmlColMappingField) {
          if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
            addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          branchNode=rootXPathNode;
        }
 else {
          branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
        }
        Iterator fieldIt=fields.iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLObjectReferenceMapping) {
        XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
        Iterator fieldIt=xmlORMapping.getFields().iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceObjectMapping) {
        XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
        firstNodeValue.setNullCapableNodeValue(firstNodeValue);
        this.addNullCapableValue(firstNodeValue);
        addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
          nodeValue.setNullCapableNodeValue(firstNodeValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceCollectionMapping) {
        XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
        XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
        HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
        unmarshalValue.setContainerNodeValue(unmarshalValue);
        marshalValue.setFieldToNodeValues(fieldToNodeValues);
        this.addContainerValue(unmarshalValue);
        fieldToNodeValues.put(firstField,unmarshalValue);
        addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
        addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
          nodeValue.setContainerNodeValue(unmarshalValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          fieldToNodeValues.put(next,nodeValue);
        }
        continue;
      }
      if (mappingNodeValue.isContainerValue()) {
        addContainerValue((ContainerValue)mappingNodeValue);
      }
      if (mappingNodeValue.isNullCapableValue()) {
        addNullCapableValue((NullCapableValue)mappingNodeValue);
      }
      if (xmlField != null) {
        addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
 else {
        addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
      if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
        XPathFragment nextFragment=xmlField.getXPathFragment();
        StringBuilder typeXPathStringBuilder=new StringBuilder();
        while (nextFragment.getNextFragment() != null) {
          typeXPathStringBuilder.append(nextFragment.getXPath());
          nextFragment=nextFragment.getNextFragment();
        }
        XMLField typeField=new XMLField();
        if (typeXPathStringBuilder.length() > 0) {
          typeXPathStringBuilder.append('/');
        }
        typeField.setXPath(typeXPathStringBuilder.toString() + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
        typeNodeValue=new TypeNodeValue();
        typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
        addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
  }
  if (xmlDescriptor.hasInheritance()) {
    InheritancePolicy inheritancePolicy=xmlDescriptor.getInheritancePolicy();
    if (!inheritancePolicy.hasClassExtractor()) {
      XMLField classIndicatorField=new XMLField(inheritancePolicy.getClassIndicatorFieldName());
      classIndicatorField.setNamespaceResolver(xmlDescriptor.getNamespaceResolver());
    }
  }
}","public void initialize(org.eclipse.persistence.internal.sessions.AbstractSession session){
  super.initialize(session);
  XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
  Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
  Iterator fieldTransformerIterator;
  DatabaseMapping xmlMapping;
  AbstractTransformationMapping transformationMapping;
  FieldTransformerNodeValue fieldTransformerNodeValue;
  Object[] nextFieldToTransformer;
  TypeNodeValue typeNodeValue;
  NodeValue mappingNodeValue=null;
  XMLField xmlField;
  while (mappingIterator.hasNext()) {
    xmlMapping=(DatabaseMapping)mappingIterator.next();
    if (xmlMapping instanceof XMLInverseReferenceMapping) {
      continue;
    }
    xmlField=(XMLField)xmlMapping.getField();
    if (xmlMapping.isTransformationMapping()) {
      transformationMapping=(AbstractTransformationMapping)xmlMapping;
      addTransformationMapping(transformationMapping);
      fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
      while (fieldTransformerIterator.hasNext()) {
        fieldTransformerNodeValue=new FieldTransformerNodeValue();
        nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
        xmlField=(XMLField)nextFieldToTransformer[0];
        fieldTransformerNodeValue.setXMLField(xmlField);
        fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
        addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
 else {
      if (xmlMapping.isAbstractDirectMapping()) {
        mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeObjectMapping()) {
        mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
        mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeCollectionMapping()) {
        mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyObjectMapping) {
        mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyCollectionMapping) {
        mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyAttributeMapping) {
        mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataMapping) {
        mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
        mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentMapping) {
        mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentCollectionMapping) {
        mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLCollectionReferenceMapping) {
        XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
        List fields=xmlColMapping.getFields();
        XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
        XPathNode branchNode;
        if (null == xmlColMappingField) {
          if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
            addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          branchNode=rootXPathNode;
        }
 else {
          branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
        }
        Iterator fieldIt=fields.iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLObjectReferenceMapping) {
        XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
        Iterator fieldIt=xmlORMapping.getFields().iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceObjectMapping) {
        XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
        firstNodeValue.setNullCapableNodeValue(firstNodeValue);
        this.addNullCapableValue(firstNodeValue);
        addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
          nodeValue.setNullCapableNodeValue(firstNodeValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceCollectionMapping) {
        XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
        XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
        HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
        unmarshalValue.setContainerNodeValue(unmarshalValue);
        marshalValue.setFieldToNodeValues(fieldToNodeValues);
        unmarshalValue.setFieldToNodeValues(fieldToNodeValues);
        this.addContainerValue(unmarshalValue);
        fieldToNodeValues.put(firstField,unmarshalValue);
        addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
        addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
          nodeValue.setContainerNodeValue(unmarshalValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          fieldToNodeValues.put(next,nodeValue);
        }
        continue;
      }
      if (mappingNodeValue.isContainerValue()) {
        addContainerValue((ContainerValue)mappingNodeValue);
      }
      if (mappingNodeValue.isNullCapableValue()) {
        addNullCapableValue((NullCapableValue)mappingNodeValue);
      }
      if (xmlField != null) {
        addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
 else {
        addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
      if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
        XPathFragment nextFragment=xmlField.getXPathFragment();
        StringBuilder typeXPathStringBuilder=new StringBuilder();
        while (nextFragment.getNextFragment() != null) {
          typeXPathStringBuilder.append(nextFragment.getXPath());
          nextFragment=nextFragment.getNextFragment();
        }
        XMLField typeField=new XMLField();
        if (typeXPathStringBuilder.length() > 0) {
          typeXPathStringBuilder.append('/');
        }
        typeField.setXPath(typeXPathStringBuilder.toString() + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
        typeNodeValue=new TypeNodeValue();
        typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
        addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
  }
  if (xmlDescriptor.hasInheritance()) {
    InheritancePolicy inheritancePolicy=xmlDescriptor.getInheritancePolicy();
    if (!inheritancePolicy.hasClassExtractor()) {
      XMLField classIndicatorField=new XMLField(inheritancePolicy.getClassIndicatorFieldName());
      classIndicatorField.setNamespaceResolver(xmlDescriptor.getNamespaceResolver());
    }
  }
}"
66182,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField xmlField=null;
  if (isCollection) {
    xmlField=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
  }
 else {
    xmlField=(XMLField)((XMLBinaryDataMapping)mapping).getField();
  }
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attachmentUnmarshaller == null) {
      throw XMLMarshalException.noAttachmentUnmarshallerSet(this.c_id);
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
    }
  }
 else {
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
      record.endElement(namespaceURI,localName,qName);
    }
  }
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField xmlField=null;
  if (isCollection) {
    xmlField=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
  }
 else {
    xmlField=(XMLField)((XMLBinaryDataMapping)mapping).getField();
  }
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attachmentUnmarshaller == null) {
      throw XMLMarshalException.noAttachmentUnmarshallerSet(this.c_id);
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
    }
  }
 else {
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
      record.endElement(namespaceURI,localName,qName);
    }
  }
}"
66183,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.getStringBuffer().reset();
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object container){
  this.endElement(xPathFragment,unmarshalRecord);
}"
66184,"private void initializeNodeValue(){
  XMLMapping xmlMapping=xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof XMLCompositeDirectCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
  }
 else   if (xmlMapping instanceof XMLCompositeCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
  }
 else {
    XMLCollectionReferenceMapping refMapping=((XMLCollectionReferenceMapping)xmlMapping);
    if (refMapping.usesSingleNode() || refMapping.getFields().size() == 1) {
      choiceElementNodeValue=new XMLCollectionReferenceMappingNodeValue(refMapping,xmlField);
    }
 else {
      choiceElementNodeValue=new XMLCollectionReferenceMappingMarshalNodeValue((XMLCollectionReferenceMapping)xmlMapping);
    }
  }
}","private void initializeNodeValue(){
  XMLMapping xmlMapping=xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
    choiceElementNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
  }
 else   if (xmlMapping instanceof XMLCompositeDirectCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
  }
 else   if (xmlMapping instanceof XMLCompositeCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
  }
 else {
    XMLCollectionReferenceMapping refMapping=((XMLCollectionReferenceMapping)xmlMapping);
    if (refMapping.usesSingleNode() || refMapping.getFields().size() == 1) {
      choiceElementNodeValue=new XMLCollectionReferenceMappingNodeValue(refMapping,xmlField);
    }
 else {
      choiceElementNodeValue=new XMLCollectionReferenceMappingMarshalNodeValue((XMLCollectionReferenceMapping)xmlMapping);
    }
  }
}"
66185,"private void initializeNodeValue(){
  XMLMapping xmlMapping=xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof XMLCompositeDirectCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else   if (xmlMapping instanceof XMLCompositeCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else {
    choiceElementNodeValue=new XMLCollectionReferenceMappingNodeValue((XMLCollectionReferenceMapping)xmlMapping,xmlField);
    choiceElementMarshalNodeValue=new XMLCollectionReferenceMappingMarshalNodeValue((XMLCollectionReferenceMapping)xmlMapping);
  }
}","private void initializeNodeValue(){
  XMLMapping xmlMapping=xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
    choiceElementNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else   if (xmlMapping instanceof XMLCompositeDirectCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else   if (xmlMapping instanceof XMLCompositeCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else {
    choiceElementNodeValue=new XMLCollectionReferenceMappingNodeValue((XMLCollectionReferenceMapping)xmlMapping,xmlField);
    choiceElementMarshalNodeValue=new XMLCollectionReferenceMappingMarshalNodeValue((XMLCollectionReferenceMapping)xmlMapping);
  }
}"
66186,"public void initializeNodeValue(){
  XMLMapping xmlMapping=xmlChoiceMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof XMLDirectMapping) {
    choiceElementNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
  }
 else   if (xmlMapping instanceof XMLObjectReferenceMapping) {
    choiceElementNodeValue=new XMLObjectReferenceMappingNodeValue((XMLObjectReferenceMapping)xmlMapping,xmlField);
  }
 else {
    choiceElementNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
  }
}","public void initializeNodeValue(){
  XMLMapping xmlMapping=xmlChoiceMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof XMLBinaryDataMapping) {
    choiceElementNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
  }
 else   if (xmlMapping instanceof XMLDirectMapping) {
    choiceElementNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
  }
 else   if (xmlMapping instanceof XMLObjectReferenceMapping) {
    choiceElementNodeValue=new XMLObjectReferenceMappingNodeValue((XMLObjectReferenceMapping)xmlMapping,xmlField);
  }
 else {
    choiceElementNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
  }
}"
66187,"private void addChoiceElementMapping(XMLField xmlField,Class theClass){
  if (xmlField.getLastXPathFragment().nameIsText()) {
    XMLCompositeDirectCollectionMapping xmlMapping=new XMLCompositeDirectCollectionMapping();
    xmlMapping.setAttributeElementClass(theClass);
    xmlMapping.setField(xmlField);
    xmlMapping.setAttributeAccessor(temporaryAccessor);
    this.choiceElementMappings.put(xmlField,xmlMapping);
  }
 else {
    XMLCompositeCollectionMapping xmlMapping=new XMLCompositeCollectionMapping();
    if (!theClass.equals(ClassConstants.OBJECT)) {
      xmlMapping.setReferenceClass(theClass);
    }
    xmlMapping.setField(xmlField);
    xmlMapping.setAttributeAccessor(temporaryAccessor);
    this.choiceElementMappings.put(xmlField,xmlMapping);
  }
}","private void addChoiceElementMapping(XMLField xmlField,Class theClass){
  if (xmlField.getLastXPathFragment().nameIsText()) {
    XMLCompositeDirectCollectionMapping xmlMapping=new XMLCompositeDirectCollectionMapping();
    xmlMapping.setAttributeElementClass(theClass);
    xmlMapping.setField(xmlField);
    xmlMapping.setAttributeAccessor(temporaryAccessor);
    this.choiceElementMappings.put(xmlField,xmlMapping);
  }
 else {
    if (isBinaryType(theClass)) {
      XMLBinaryDataCollectionMapping xmlMapping=new XMLBinaryDataCollectionMapping();
      xmlMapping.setField(xmlField);
      xmlMapping.setAttributeElementClass(theClass);
      xmlMapping.setAttributeAccessor(temporaryAccessor);
      this.fieldsToConverters.put(xmlField,xmlMapping.getValueConverter());
      this.choiceElementMappings.put(xmlField,xmlMapping);
    }
 else {
      XMLCompositeCollectionMapping xmlMapping=new XMLCompositeCollectionMapping();
      if (!theClass.equals(ClassConstants.OBJECT)) {
        xmlMapping.setReferenceClass(theClass);
      }
      xmlMapping.setField(xmlField);
      xmlMapping.setAttributeAccessor(temporaryAccessor);
      this.choiceElementMappings.put(xmlField,xmlMapping);
    }
  }
}"
66188,"public void preInitialize(AbstractSession session) throws DescriptorException {
  getAttributeAccessor().setIsWriteOnly(this.isWriteOnly());
  getAttributeAccessor().setIsReadOnly(this.isReadOnly());
  super.preInitialize(session);
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    nextMapping.setAttributeName(this.getAttributeName());
    if (nextMapping.getAttributeAccessor() == temporaryAccessor) {
      nextMapping.setAttributeAccessor(getAttributeAccessor());
    }
    nextMapping.setDescriptor(getDescriptor());
    nextMapping.preInitialize(session);
  }
}","public void preInitialize(AbstractSession session) throws DescriptorException {
  getAttributeAccessor().setIsWriteOnly(this.isWriteOnly());
  getAttributeAccessor().setIsReadOnly(this.isReadOnly());
  super.preInitialize(session);
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    nextMapping.setAttributeName(this.getAttributeName());
    if (nextMapping.getAttributeAccessor() == temporaryAccessor) {
      nextMapping.setAttributeAccessor(getAttributeAccessor());
    }
    nextMapping.setIsReadOnly(this.isReadOnly());
    ((XMLMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
    nextMapping.setDescriptor(getDescriptor());
    nextMapping.preInitialize(session);
  }
}"
66189,"public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.fieldToClassMappings.size() == 0) {
    this.convertClassNamesToClasses(((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).getLoader());
  }
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=(QName)xmlConversionManager.getDefaultJavaTypes().get(((AbstractCompositeDirectCollectionMapping)nextMapping).getAttributeElementClass());
      if (schemaType != null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
      if (converter != null) {
        ((AbstractCompositeDirectCollectionMapping)nextMapping).setValueConverter(converter);
      }
      ((AbstractCompositeDirectCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping.isAbstractCompositeCollectionMapping()) {
      if (converter != null) {
        ((AbstractCompositeCollectionMapping)nextMapping).setConverter(converter);
      }
      ((AbstractCompositeCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else {
      ((XMLCollectionReferenceMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      ((XMLCollectionReferenceMapping)nextMapping).setReuseContainer(true);
    }
    nextMapping.initialize(session);
  }
}","public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.fieldToClassMappings.size() == 0) {
    this.convertClassNamesToClasses(((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).getLoader());
  }
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=(QName)xmlConversionManager.getDefaultJavaTypes().get(((AbstractCompositeDirectCollectionMapping)nextMapping).getAttributeElementClass());
      if (schemaType != null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
      if (converter != null) {
        ((AbstractCompositeDirectCollectionMapping)nextMapping).setValueConverter(converter);
      }
      ((AbstractCompositeDirectCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping.isAbstractCompositeCollectionMapping()) {
      if (converter != null) {
        ((AbstractCompositeCollectionMapping)nextMapping).setConverter(converter);
      }
      ((AbstractCompositeCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping instanceof XMLBinaryDataCollectionMapping) {
      ((XMLBinaryDataCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      if (converter != null) {
        ((XMLBinaryDataCollectionMapping)nextMapping).setValueConverter(converter);
      }
    }
 else {
      ((XMLCollectionReferenceMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      ((XMLCollectionReferenceMapping)nextMapping).setReuseContainer(true);
    }
    nextMapping.initialize(session);
  }
}"
66190,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,null,root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
      marshalRecord.characters(value);
    }
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,null,root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
      marshalRecord.characters(value);
    }
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}"
66191,"public void testXmlAdapter() throws Exception {
  if (true)   return;
  fail(""String_Node_Str"");
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(XMLADAPTER_PACKAGE);
  if (iStream == null) {
    fail(""String_Node_Str"" + XMLADAPTER_PACKAGE + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(PACKAGE,new StreamSource(iStream));
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity person=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
  assertNotNull(""String_Node_Str"",person);
  Computer computer=new Computer();
  computer.ipCode=121531298;
  computer.macCode=48261593;
  computer.workgroup='C';
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",computer);
  print(person);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  DynamicEntity readPerson=(DynamicEntity)jaxbContext.createUnmarshaller().unmarshal(marshalDoc);
}","public void testXmlAdapter() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(XMLADAPTER_PACKAGE);
  if (iStream == null) {
    fail(""String_Node_Str"" + XMLADAPTER_PACKAGE + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(PACKAGE,new StreamSource(iStream));
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity person=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
  assertNotNull(""String_Node_Str"",person);
  Computer computer=new Computer();
  computer.ipCode=121531298;
  computer.macCode=48261593;
  computer.workgroup='C';
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",computer);
  print(person);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  DynamicEntity readPerson=(DynamicEntity)jaxbContext.createUnmarshaller().unmarshal(marshalDoc);
}"
66192,"@Override public ClassLoader getClassLoader(){
  return this.dynamicClassLoader;
}","public ClassLoader getClassLoader(){
  return this.dynamicClassLoader;
}"
66193,"public XMLDirectMapping generateDirectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLDirectMapping mapping=new XMLDirectMapping();
  mapping.setAttributeName(property.getPropertyName());
  String fixedValue=property.getFixedValue();
  if (fixedValue != null) {
    mapping.setIsWriteOnly(true);
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.getXmlPath() != null) {
    mapping.setField(new XMLField(property.getXmlPath()));
  }
 else {
    mapping.setField(getXPathForField(property,namespaceInfo,true));
  }
  if (property.getDefaultValue() != null) {
    mapping.setNullValue(property.getDefaultValue());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else {
    if (property.isNillable()) {
      mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
    }
    mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
    if (!mapping.getXPath().equals(""String_Node_Str"")) {
      ((NullPolicy)mapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.getType() != null) {
    Class theClass=helper.getClassForJavaClass(property.getType());
    mapping.setAttributeClassification(theClass);
  }
  if (XMLConstants.QNAME_QNAME.equals(property.getSchemaType())) {
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
  }
  if (property.isSetCdata()) {
    mapping.setIsCDATA(property.isCdata());
  }
  return mapping;
}","public XMLDirectMapping generateDirectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLDirectMapping mapping=new XMLDirectMapping();
  mapping.setAttributeName(property.getPropertyName());
  String fixedValue=property.getFixedValue();
  if (fixedValue != null) {
    mapping.setIsWriteOnly(true);
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.getXmlPath() != null) {
    mapping.setField(new XMLField(property.getXmlPath()));
  }
 else {
    mapping.setField(getXPathForField(property,namespaceInfo,true));
  }
  if (property.getDefaultValue() != null) {
    mapping.setNullValue(property.getDefaultValue());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else {
    if (property.isNillable()) {
      mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
    }
    mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
    if (!mapping.getXPath().equals(""String_Node_Str"")) {
      ((NullPolicy)mapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.getType() != null) {
    Class theClass=null;
    if (property.isSetXmlJavaTypeAdapter()) {
      theClass=helper.getClassForJavaClass(property.getOriginalType());
    }
 else {
      theClass=helper.getClassForJavaClass(property.getType());
    }
    mapping.setAttributeClassification(theClass);
  }
  if (XMLConstants.QNAME_QNAME.equals(property.getSchemaType())) {
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
  }
  if (property.isSetCdata()) {
    mapping.setIsCDATA(property.isCdata());
  }
  return mapping;
}"
66194,"public void reapplyPackageAndClassAdapters(Property prop,TypeInfo owningInfo){
  JavaClass type=prop.getActualType();
  TypeInfo targetInfo=aProcessor.getTypeInfo().get(type.getQualifiedName());
  if (targetInfo != null) {
    if (targetInfo.getXmlJavaTypeAdapter() != null) {
      prop.setXmlJavaTypeAdapter(targetInfo.getXmlJavaTypeAdapter());
    }
  }
  JavaClass packageLevelAdapter=owningInfo.getPackageLevelAdaptersByClass().get(type.getQualifiedName());
  if (packageLevelAdapter != null && prop.getXmlJavaTypeAdapter() == null) {
    org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xja=new org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter();
    xja.setValue(packageLevelAdapter.getQualifiedName());
    xja.setType(type.getQualifiedName());
    prop.setXmlJavaTypeAdapter(xja);
  }
}","public void reapplyPackageAndClassAdapters(Property prop,TypeInfo owningInfo){
  if (prop.getXmlJavaTypeAdapter() != null) {
    return;
  }
  JavaClass type=prop.getActualType();
  TypeInfo targetInfo=aProcessor.getTypeInfo().get(type.getQualifiedName());
  if (targetInfo != null) {
    if (targetInfo.getXmlJavaTypeAdapter() != null) {
      prop.setXmlJavaTypeAdapter(targetInfo.getXmlJavaTypeAdapter());
    }
  }
  JavaClass packageLevelAdapter=owningInfo.getPackageLevelAdaptersByClass().get(type.getQualifiedName());
  if (packageLevelAdapter != null && prop.getXmlJavaTypeAdapter() == null) {
    org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xja=new org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter();
    xja.setValue(packageLevelAdapter.getQualifiedName());
    xja.setType(type.getQualifiedName());
    prop.setXmlJavaTypeAdapter(xja);
  }
}"
66195,"/** 
 * Convenience method for resetting a number of properties on a given property.
 * @param oldProperty
 * @return
 */
private Property resetProperty(Property oldProperty,TypeInfo tInfo){
  oldProperty.setIsAttribute(false);
  oldProperty.setHasXmlElementType(false);
  oldProperty.setIsRequired(false);
  oldProperty.setIsXmlList(false);
  oldProperty.setXmlJavaTypeAdapter(null);
  oldProperty.setInverseReferencePropertyName(null);
  oldProperty.setDefaultValue(null);
  oldProperty.setDomHandlerClassName(null);
  oldProperty.setIsSwaAttachmentRef(false);
  oldProperty.setIsXmlIdRef(false);
  oldProperty.setIsXmlTransformation(false);
  oldProperty.setXmlElementWrapper(null);
  oldProperty.setLax(false);
  oldProperty.setNillable(false);
  oldProperty.setMixedContent(false);
  oldProperty.setMimeType(null);
  oldProperty.setTransient(false);
  oldProperty.setChoice(false);
  oldProperty.setIsReference(false);
  oldProperty.setXmlPath(null);
  oldProperty.setReadOnly(false);
  oldProperty.setWriteOnly(false);
  oldProperty.setCdata(false);
  oldProperty.setNullPolicy(null);
  oldProperty.setUserProperties(null);
  oldProperty.setGetMethodName(oldProperty.getOriginalGetMethodName());
  oldProperty.setSetMethodName(oldProperty.getOriginalSetMethodName());
  oldProperty.setXmlTransformation(null);
  oldProperty.setXmlJoinNodes(null);
  if (oldProperty.getGetMethodName() == null && oldProperty.getSetMethodName() == null) {
    oldProperty.setMethodProperty(false);
  }
  unsetXmlElementRefs(oldProperty,tInfo);
  unsetXmlElements(oldProperty);
  unsetXmlAnyAttribute(oldProperty,tInfo);
  unsetXmlAnyElement(oldProperty,tInfo);
  unsetXmlValue(oldProperty,tInfo);
  unsetXmlID(oldProperty,tInfo);
  unsetXmlKey(oldProperty,tInfo);
  reapplyPackageAndClassAdapters(oldProperty,tInfo);
  return oldProperty;
}","/** 
 * Convenience method for resetting a number of properties on a given property.
 * @param oldProperty
 * @return
 */
private Property resetProperty(Property oldProperty,TypeInfo tInfo){
  oldProperty.setIsAttribute(false);
  oldProperty.setHasXmlElementType(false);
  oldProperty.setIsRequired(false);
  oldProperty.setIsXmlList(false);
  oldProperty.setXmlJavaTypeAdapter(null);
  oldProperty.setInverseReferencePropertyName(null);
  oldProperty.setDefaultValue(null);
  oldProperty.setDomHandlerClassName(null);
  oldProperty.setIsSwaAttachmentRef(false);
  oldProperty.setIsXmlIdRef(false);
  oldProperty.setIsXmlTransformation(false);
  oldProperty.setXmlElementWrapper(null);
  oldProperty.setLax(false);
  oldProperty.setNillable(false);
  oldProperty.setMixedContent(false);
  oldProperty.setMimeType(null);
  oldProperty.setTransient(false);
  oldProperty.setChoice(false);
  oldProperty.setIsReference(false);
  oldProperty.setXmlPath(null);
  oldProperty.setReadOnly(false);
  oldProperty.setWriteOnly(false);
  oldProperty.setCdata(false);
  oldProperty.setNullPolicy(null);
  oldProperty.setUserProperties(null);
  oldProperty.setGetMethodName(oldProperty.getOriginalGetMethodName());
  oldProperty.setSetMethodName(oldProperty.getOriginalSetMethodName());
  oldProperty.setXmlTransformation(null);
  oldProperty.setXmlJoinNodes(null);
  if (oldProperty.getGetMethodName() == null && oldProperty.getSetMethodName() == null) {
    oldProperty.setMethodProperty(false);
  }
  unsetXmlElementRefs(oldProperty,tInfo);
  unsetXmlElements(oldProperty);
  unsetXmlAnyAttribute(oldProperty,tInfo);
  unsetXmlAnyElement(oldProperty,tInfo);
  unsetXmlValue(oldProperty,tInfo);
  unsetXmlID(oldProperty,tInfo);
  unsetXmlKey(oldProperty,tInfo);
  return oldProperty;
}"
66196,"/** 
 * XmlElement override will completely replace the existing values.
 * @param xmlElement
 * @param oldProperty
 * @param typeInfo
 * @param nsInfo
 * @return
 */
private Property processXmlElement(XmlElement xmlElement,Property oldProperty,TypeInfo typeInfo,NamespaceInfo nsInfo,JavaType javaType){
  resetProperty(oldProperty,typeInfo);
  if (xmlElement.getXmlMap() != null) {
    processXmlMap(xmlElement.getXmlMap(),oldProperty);
  }
  if (xmlElement.isXmlId()) {
    oldProperty.setIsXmlId(true);
    typeInfo.setIDProperty(oldProperty);
  }
 else {
    if (typeInfo.getIDProperty() != null && typeInfo.getIDProperty().getPropertyName().equals(oldProperty.getPropertyName())) {
      typeInfo.setIDProperty(null);
    }
  }
  oldProperty.setIsXmlIdRef(xmlElement.isXmlIdref());
  if (xmlElement.isXmlKey()) {
    typeInfo.addXmlKeyProperty(oldProperty);
  }
  oldProperty.setIsRequired(xmlElement.isRequired());
  oldProperty.setisInlineBinaryData(xmlElement.isXmlInlineBinaryData());
  oldProperty.setNillable(xmlElement.isNillable());
  if (xmlElement.getDefaultValue().equals(""String_Node_Str"")) {
    oldProperty.setDefaultValue(null);
  }
 else {
    oldProperty.setDefaultValue(xmlElement.getDefaultValue());
  }
  String name;
  String namespace;
  if (xmlElement.getXmlPath() != null) {
    oldProperty.setXmlPath(xmlElement.getXmlPath());
    name=getNameFromXPath(xmlElement.getXmlPath(),oldProperty.getPropertyName(),false);
    namespace=DEFAULT;
  }
 else {
    name=xmlElement.getName();
    namespace=xmlElement.getNamespace();
    if (xmlElement.getXmlElementWrapper() != null) {
      oldProperty.setXmlElementWrapper(xmlElement.getXmlElementWrapper());
    }
  }
  QName qName;
  if (name.equals(DEFAULT)) {
    name=oldProperty.getPropertyName();
  }
  if (namespace.equals(DEFAULT)) {
    if (nsInfo.isElementFormQualified()) {
      qName=new QName(nsInfo.getNamespace(),name);
    }
 else {
      qName=new QName(name);
    }
  }
 else {
    qName=new QName(namespace,name);
  }
  oldProperty.setSchemaName(qName);
  if (!xmlElement.getContainerType().equals(DEFAULT)) {
    setContainerType(oldProperty,xmlElement.getContainerType());
  }
  if (xmlElement.getType().equals(""String_Node_Str"")) {
    if (oldProperty.isXmlElementType()) {
      oldProperty.setType(oldProperty.getOriginalType());
    }
  }
 else   if (xmlElement.getXmlMap() != null) {
    getLogger().logWarning(JAXBMetadataLogger.INVALID_TYPE_ON_MAP,new Object[]{xmlElement.getName()});
  }
 else {
    JavaClass pType=jModelInput.getJavaModel().getClass(xmlElement.getType());
    if (aProcessor.isCollectionType(oldProperty.getType())) {
      oldProperty.setGenericType(pType);
    }
 else {
      oldProperty.setType(pType);
    }
    oldProperty.setHasXmlElementType(true);
    if (aProcessor.shouldGenerateTypeInfo(pType) && aProcessor.getTypeInfo().get(pType.getQualifiedName()) == null) {
      aProcessor.buildNewTypeInfo(new JavaClass[]{pType});
    }
  }
  if (xmlElement.getXmlJavaTypeAdapter() != null) {
    try {
      oldProperty.setXmlJavaTypeAdapter(xmlElement.getXmlJavaTypeAdapter());
    }
 catch (    JAXBException e) {
      throw JAXBException.invalidPropertyAdapterClass(xmlElement.getXmlJavaTypeAdapter().getValue(),xmlElement.getJavaAttribute(),javaType.getName());
    }
  }
  if (!oldProperty.isRequired()) {
    JavaClass ptype=oldProperty.getActualType();
    oldProperty.setIsRequired(ptype.isPrimitive() || ptype.isArray() && ptype.getComponentType().isPrimitive());
  }
  if (xmlElement.isSetXmlList()) {
    if (!aProcessor.isCollectionType(oldProperty) && !oldProperty.getType().isArray()) {
      throw JAXBException.invalidList(oldProperty.getPropertyName());
    }
    oldProperty.setIsXmlList(xmlElement.isXmlList());
  }
  if (xmlElement.getXmlMimeType() != null) {
    oldProperty.setMimeType(xmlElement.getXmlMimeType());
  }
  if (xmlElement.isXmlAttachmentRef()) {
    oldProperty.setIsSwaAttachmentRef(true);
    oldProperty.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
  if (xmlElement.getXmlSchemaType() != null) {
    oldProperty.setSchemaType(new QName(xmlElement.getXmlSchemaType().getNamespace(),xmlElement.getXmlSchemaType().getName()));
  }
  if (xmlElement.getXmlAccessMethods() != null) {
    oldProperty.setMethodProperty(true);
    oldProperty.setGetMethodName(xmlElement.getXmlAccessMethods().getGetMethod());
    oldProperty.setSetMethodName(xmlElement.getXmlAccessMethods().getSetMethod());
  }
  if (xmlElement.isSetReadOnly()) {
    oldProperty.setReadOnly(xmlElement.isReadOnly());
  }
  if (xmlElement.isSetWriteOnly()) {
    oldProperty.setWriteOnly(xmlElement.isWriteOnly());
  }
  if (xmlElement.isSetCdata()) {
    oldProperty.setCdata(xmlElement.isCdata());
  }
  if (xmlElement.getXmlAbstractNullPolicy() != null) {
    JAXBElement jaxbElt=xmlElement.getXmlAbstractNullPolicy();
    oldProperty.setNullPolicy((XmlAbstractNullPolicy)jaxbElt.getValue());
  }
  if (xmlElement.getXmlProperties() != null && xmlElement.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlElement.getXmlProperties().getXmlProperty()));
  }
  return oldProperty;
}","/** 
 * XmlElement override will completely replace the existing values.
 * @param xmlElement
 * @param oldProperty
 * @param typeInfo
 * @param nsInfo
 * @return
 */
private Property processXmlElement(XmlElement xmlElement,Property oldProperty,TypeInfo typeInfo,NamespaceInfo nsInfo,JavaType javaType){
  resetProperty(oldProperty,typeInfo);
  if (xmlElement.getXmlMap() != null) {
    processXmlMap(xmlElement.getXmlMap(),oldProperty);
  }
  if (xmlElement.isXmlId()) {
    oldProperty.setIsXmlId(true);
    typeInfo.setIDProperty(oldProperty);
  }
 else {
    if (typeInfo.getIDProperty() != null && typeInfo.getIDProperty().getPropertyName().equals(oldProperty.getPropertyName())) {
      typeInfo.setIDProperty(null);
    }
  }
  oldProperty.setIsXmlIdRef(xmlElement.isXmlIdref());
  if (xmlElement.isXmlKey()) {
    typeInfo.addXmlKeyProperty(oldProperty);
  }
  oldProperty.setIsRequired(xmlElement.isRequired());
  oldProperty.setisInlineBinaryData(xmlElement.isXmlInlineBinaryData());
  oldProperty.setNillable(xmlElement.isNillable());
  if (xmlElement.getDefaultValue().equals(""String_Node_Str"")) {
    oldProperty.setDefaultValue(null);
  }
 else {
    oldProperty.setDefaultValue(xmlElement.getDefaultValue());
  }
  String name;
  String namespace;
  if (xmlElement.getXmlPath() != null) {
    oldProperty.setXmlPath(xmlElement.getXmlPath());
    name=getNameFromXPath(xmlElement.getXmlPath(),oldProperty.getPropertyName(),false);
    namespace=DEFAULT;
  }
 else {
    name=xmlElement.getName();
    namespace=xmlElement.getNamespace();
    if (xmlElement.getXmlElementWrapper() != null) {
      oldProperty.setXmlElementWrapper(xmlElement.getXmlElementWrapper());
    }
  }
  QName qName;
  if (name.equals(DEFAULT)) {
    name=oldProperty.getPropertyName();
  }
  if (namespace.equals(DEFAULT)) {
    if (nsInfo.isElementFormQualified()) {
      qName=new QName(nsInfo.getNamespace(),name);
    }
 else {
      qName=new QName(name);
    }
  }
 else {
    qName=new QName(namespace,name);
  }
  oldProperty.setSchemaName(qName);
  if (!xmlElement.getContainerType().equals(DEFAULT)) {
    setContainerType(oldProperty,xmlElement.getContainerType());
  }
  if (xmlElement.getType().equals(""String_Node_Str"")) {
    if (oldProperty.isXmlElementType()) {
      oldProperty.setType(oldProperty.getOriginalType());
    }
  }
 else   if (xmlElement.getXmlMap() != null) {
    getLogger().logWarning(JAXBMetadataLogger.INVALID_TYPE_ON_MAP,new Object[]{xmlElement.getName()});
  }
 else {
    JavaClass pType=jModelInput.getJavaModel().getClass(xmlElement.getType());
    if (aProcessor.isCollectionType(oldProperty.getType())) {
      oldProperty.setGenericType(pType);
    }
 else {
      oldProperty.setType(pType);
    }
    oldProperty.setHasXmlElementType(true);
    if (aProcessor.shouldGenerateTypeInfo(pType) && aProcessor.getTypeInfo().get(pType.getQualifiedName()) == null) {
      aProcessor.buildNewTypeInfo(new JavaClass[]{pType});
    }
  }
  reapplyPackageAndClassAdapters(oldProperty,typeInfo);
  if (xmlElement.getXmlJavaTypeAdapter() != null) {
    try {
      oldProperty.setXmlJavaTypeAdapter(xmlElement.getXmlJavaTypeAdapter());
    }
 catch (    JAXBException e) {
      throw JAXBException.invalidPropertyAdapterClass(xmlElement.getXmlJavaTypeAdapter().getValue(),xmlElement.getJavaAttribute(),javaType.getName());
    }
  }
  if (!oldProperty.isRequired()) {
    JavaClass ptype=oldProperty.getActualType();
    oldProperty.setIsRequired(ptype.isPrimitive() || ptype.isArray() && ptype.getComponentType().isPrimitive());
  }
  if (xmlElement.isSetXmlList()) {
    if (!aProcessor.isCollectionType(oldProperty) && !oldProperty.getType().isArray()) {
      throw JAXBException.invalidList(oldProperty.getPropertyName());
    }
    oldProperty.setIsXmlList(xmlElement.isXmlList());
  }
  if (xmlElement.getXmlMimeType() != null) {
    oldProperty.setMimeType(xmlElement.getXmlMimeType());
  }
  if (xmlElement.isXmlAttachmentRef()) {
    oldProperty.setIsSwaAttachmentRef(true);
    oldProperty.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
  if (xmlElement.getXmlSchemaType() != null) {
    oldProperty.setSchemaType(new QName(xmlElement.getXmlSchemaType().getNamespace(),xmlElement.getXmlSchemaType().getName()));
  }
  if (xmlElement.getXmlAccessMethods() != null) {
    oldProperty.setMethodProperty(true);
    oldProperty.setGetMethodName(xmlElement.getXmlAccessMethods().getGetMethod());
    oldProperty.setSetMethodName(xmlElement.getXmlAccessMethods().getSetMethod());
  }
  if (xmlElement.isSetReadOnly()) {
    oldProperty.setReadOnly(xmlElement.isReadOnly());
  }
  if (xmlElement.isSetWriteOnly()) {
    oldProperty.setWriteOnly(xmlElement.isWriteOnly());
  }
  if (xmlElement.isSetCdata()) {
    oldProperty.setCdata(xmlElement.isCdata());
  }
  if (xmlElement.getXmlAbstractNullPolicy() != null) {
    JAXBElement jaxbElt=xmlElement.getXmlAbstractNullPolicy();
    oldProperty.setNullPolicy((XmlAbstractNullPolicy)jaxbElt.getValue());
  }
  if (xmlElement.getXmlProperties() != null && xmlElement.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlElement.getXmlProperties().getXmlProperty()));
  }
  return oldProperty;
}"
66197,"/** 
 * XmlAttribute override will completely replace the existing values.
 * @param xmlAttribute
 * @param oldProperty
 * @param nsInfo
 * @return
 */
private Property processXmlAttribute(XmlAttribute xmlAttribute,Property oldProperty,TypeInfo typeInfo,NamespaceInfo nsInfo){
  resetProperty(oldProperty,typeInfo);
  if (xmlAttribute.isXmlId()) {
    oldProperty.setIsXmlId(true);
    typeInfo.setIDProperty(oldProperty);
  }
 else {
    if (typeInfo.getIDProperty() != null && typeInfo.getIDProperty().getPropertyName().equals(oldProperty.getPropertyName())) {
      typeInfo.setIDProperty(null);
    }
  }
  oldProperty.setIsXmlIdRef(xmlAttribute.isXmlIdref());
  if (xmlAttribute.isXmlKey()) {
    typeInfo.addXmlKeyProperty(oldProperty);
  }
  oldProperty.setIsAttribute(true);
  if (xmlAttribute.getXmlJavaTypeAdapter() != null) {
    oldProperty.setXmlJavaTypeAdapter(xmlAttribute.getXmlJavaTypeAdapter());
  }
  if (xmlAttribute.isSetRequired()) {
    oldProperty.setIsRequired(xmlAttribute.isRequired());
  }
 else   if (oldProperty.getActualType().isPrimitive()) {
    oldProperty.setIsRequired(true);
  }
  oldProperty.setisInlineBinaryData(xmlAttribute.isXmlInlineBinaryData());
  String name;
  String namespace;
  if (xmlAttribute.getXmlPath() != null) {
    oldProperty.setXmlPath(xmlAttribute.getXmlPath());
    name=getNameFromXPath(xmlAttribute.getXmlPath(),oldProperty.getPropertyName(),true);
    namespace=DEFAULT;
  }
 else {
    name=xmlAttribute.getName();
    namespace=xmlAttribute.getNamespace();
  }
  QName qName;
  if (name.equals(DEFAULT)) {
    name=oldProperty.getPropertyName();
  }
  if (namespace.equals(DEFAULT)) {
    if (nsInfo.isElementFormQualified()) {
      qName=new QName(nsInfo.getNamespace(),name);
    }
 else {
      qName=new QName(name);
    }
  }
 else {
    qName=new QName(namespace,name);
  }
  oldProperty.setSchemaName(qName);
  if (!xmlAttribute.getContainerType().equals(DEFAULT)) {
    setContainerType(oldProperty,xmlAttribute.getContainerType());
  }
  if (!xmlAttribute.getType().equals(DEFAULT)) {
    JavaClass pType=jModelInput.getJavaModel().getClass(xmlAttribute.getType());
    if (aProcessor.isCollectionType(oldProperty.getType())) {
      oldProperty.setGenericType(pType);
    }
 else {
      oldProperty.setType(pType);
    }
    oldProperty.setHasXmlElementType(true);
    if (aProcessor.shouldGenerateTypeInfo(pType) && aProcessor.getTypeInfo().get(pType.getQualifiedName()) == null) {
      aProcessor.buildNewTypeInfo(new JavaClass[]{pType});
    }
  }
  if (xmlAttribute.getXmlMimeType() != null) {
    oldProperty.setMimeType(xmlAttribute.getXmlMimeType());
  }
  if (xmlAttribute.isXmlAttachmentRef()) {
    oldProperty.setIsSwaAttachmentRef(true);
    oldProperty.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
  if (xmlAttribute.getXmlSchemaType() != null) {
    oldProperty.setSchemaType(new QName(xmlAttribute.getXmlSchemaType().getNamespace(),xmlAttribute.getXmlSchemaType().getName()));
  }
  if (xmlAttribute.getXmlAccessMethods() != null) {
    oldProperty.setMethodProperty(true);
    oldProperty.setGetMethodName(xmlAttribute.getXmlAccessMethods().getGetMethod());
    oldProperty.setSetMethodName(xmlAttribute.getXmlAccessMethods().getSetMethod());
  }
  if (xmlAttribute.isSetReadOnly()) {
    oldProperty.setReadOnly(xmlAttribute.isReadOnly());
  }
  if (xmlAttribute.isSetWriteOnly()) {
    oldProperty.setWriteOnly(xmlAttribute.isWriteOnly());
  }
  if (xmlAttribute.getXmlAbstractNullPolicy() != null) {
    JAXBElement jaxbElt=xmlAttribute.getXmlAbstractNullPolicy();
    oldProperty.setNullPolicy((XmlAbstractNullPolicy)jaxbElt.getValue());
  }
  if (xmlAttribute.getXmlProperties() != null && xmlAttribute.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlAttribute.getXmlProperties().getXmlProperty()));
  }
  return oldProperty;
}","/** 
 * XmlAttribute override will completely replace the existing values.
 * @param xmlAttribute
 * @param oldProperty
 * @param nsInfo
 * @return
 */
private Property processXmlAttribute(XmlAttribute xmlAttribute,Property oldProperty,TypeInfo typeInfo,NamespaceInfo nsInfo){
  resetProperty(oldProperty,typeInfo);
  if (xmlAttribute.isXmlId()) {
    oldProperty.setIsXmlId(true);
    typeInfo.setIDProperty(oldProperty);
  }
 else {
    if (typeInfo.getIDProperty() != null && typeInfo.getIDProperty().getPropertyName().equals(oldProperty.getPropertyName())) {
      typeInfo.setIDProperty(null);
    }
  }
  oldProperty.setIsXmlIdRef(xmlAttribute.isXmlIdref());
  if (xmlAttribute.isXmlKey()) {
    typeInfo.addXmlKeyProperty(oldProperty);
  }
  oldProperty.setIsAttribute(true);
  oldProperty.setisInlineBinaryData(xmlAttribute.isXmlInlineBinaryData());
  String name;
  String namespace;
  if (xmlAttribute.getXmlPath() != null) {
    oldProperty.setXmlPath(xmlAttribute.getXmlPath());
    name=getNameFromXPath(xmlAttribute.getXmlPath(),oldProperty.getPropertyName(),true);
    namespace=DEFAULT;
  }
 else {
    name=xmlAttribute.getName();
    namespace=xmlAttribute.getNamespace();
  }
  QName qName;
  if (name.equals(DEFAULT)) {
    name=oldProperty.getPropertyName();
  }
  if (namespace.equals(DEFAULT)) {
    if (nsInfo.isElementFormQualified()) {
      qName=new QName(nsInfo.getNamespace(),name);
    }
 else {
      qName=new QName(name);
    }
  }
 else {
    qName=new QName(namespace,name);
  }
  oldProperty.setSchemaName(qName);
  if (!xmlAttribute.getContainerType().equals(DEFAULT)) {
    setContainerType(oldProperty,xmlAttribute.getContainerType());
  }
  if (!xmlAttribute.getType().equals(DEFAULT)) {
    JavaClass pType=jModelInput.getJavaModel().getClass(xmlAttribute.getType());
    if (aProcessor.isCollectionType(oldProperty.getType())) {
      oldProperty.setGenericType(pType);
    }
 else {
      oldProperty.setType(pType);
    }
    oldProperty.setHasXmlElementType(true);
    if (aProcessor.shouldGenerateTypeInfo(pType) && aProcessor.getTypeInfo().get(pType.getQualifiedName()) == null) {
      aProcessor.buildNewTypeInfo(new JavaClass[]{pType});
    }
  }
  reapplyPackageAndClassAdapters(oldProperty,typeInfo);
  if (xmlAttribute.getXmlJavaTypeAdapter() != null) {
    oldProperty.setXmlJavaTypeAdapter(xmlAttribute.getXmlJavaTypeAdapter());
  }
  if (xmlAttribute.isSetRequired()) {
    oldProperty.setIsRequired(xmlAttribute.isRequired());
  }
 else   if (oldProperty.getActualType().isPrimitive()) {
    oldProperty.setIsRequired(true);
  }
  if (xmlAttribute.getXmlMimeType() != null) {
    oldProperty.setMimeType(xmlAttribute.getXmlMimeType());
  }
  if (xmlAttribute.isXmlAttachmentRef()) {
    oldProperty.setIsSwaAttachmentRef(true);
    oldProperty.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
  if (xmlAttribute.getXmlSchemaType() != null) {
    oldProperty.setSchemaType(new QName(xmlAttribute.getXmlSchemaType().getNamespace(),xmlAttribute.getXmlSchemaType().getName()));
  }
  if (xmlAttribute.getXmlAccessMethods() != null) {
    oldProperty.setMethodProperty(true);
    oldProperty.setGetMethodName(xmlAttribute.getXmlAccessMethods().getGetMethod());
    oldProperty.setSetMethodName(xmlAttribute.getXmlAccessMethods().getSetMethod());
  }
  if (xmlAttribute.isSetReadOnly()) {
    oldProperty.setReadOnly(xmlAttribute.isReadOnly());
  }
  if (xmlAttribute.isSetWriteOnly()) {
    oldProperty.setWriteOnly(xmlAttribute.isWriteOnly());
  }
  if (xmlAttribute.getXmlAbstractNullPolicy() != null) {
    JAXBElement jaxbElt=xmlAttribute.getXmlAbstractNullPolicy();
    oldProperty.setNullPolicy((XmlAbstractNullPolicy)jaxbElt.getValue());
  }
  if (xmlAttribute.getXmlProperties() != null && xmlAttribute.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlAttribute.getXmlProperties().getXmlProperty()));
  }
  return oldProperty;
}"
66198,"private Property processXmlValue(XmlValue xmlValue,Property oldProperty,TypeInfo info,JavaType javaType){
  resetProperty(oldProperty,info);
  oldProperty.setIsXmlValue(true);
  info.setXmlValueProperty(oldProperty);
  if (xmlValue.getXmlAccessMethods() != null) {
    oldProperty.setMethodProperty(true);
    oldProperty.setGetMethodName(xmlValue.getXmlAccessMethods().getGetMethod());
    oldProperty.setSetMethodName(xmlValue.getXmlAccessMethods().getSetMethod());
  }
  if (!xmlValue.getContainerType().equals(DEFAULT)) {
    setContainerType(oldProperty,xmlValue.getContainerType());
  }
  if (!xmlValue.getType().equals(DEFAULT)) {
    JavaClass pType=jModelInput.getJavaModel().getClass(xmlValue.getType());
    if (aProcessor.isCollectionType(oldProperty.getType())) {
      oldProperty.setGenericType(pType);
    }
 else {
      oldProperty.setType(pType);
    }
    if (aProcessor.shouldGenerateTypeInfo(pType) && aProcessor.getTypeInfo().get(pType.getQualifiedName()) == null) {
      aProcessor.buildNewTypeInfo(new JavaClass[]{pType});
    }
  }
  if (xmlValue.getXmlJavaTypeAdapter() != null) {
    try {
      oldProperty.setXmlJavaTypeAdapter(xmlValue.getXmlJavaTypeAdapter());
    }
 catch (    JAXBException e) {
      throw JAXBException.invalidPropertyAdapterClass(xmlValue.getXmlJavaTypeAdapter().getValue(),xmlValue.getJavaAttribute(),javaType.getName());
    }
  }
  if (xmlValue.isSetReadOnly()) {
    oldProperty.setReadOnly(xmlValue.isReadOnly());
  }
  if (xmlValue.isSetWriteOnly()) {
    oldProperty.setWriteOnly(xmlValue.isWriteOnly());
  }
  if (xmlValue.isSetCdata()) {
    oldProperty.setCdata(xmlValue.isCdata());
  }
  if (xmlValue.getXmlAbstractNullPolicy() != null) {
    JAXBElement jaxbElt=xmlValue.getXmlAbstractNullPolicy();
    oldProperty.setNullPolicy((XmlAbstractNullPolicy)jaxbElt.getValue());
  }
  if (xmlValue.getXmlProperties() != null && xmlValue.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlValue.getXmlProperties().getXmlProperty()));
  }
  return oldProperty;
}","private Property processXmlValue(XmlValue xmlValue,Property oldProperty,TypeInfo info,JavaType javaType){
  resetProperty(oldProperty,info);
  oldProperty.setIsXmlValue(true);
  info.setXmlValueProperty(oldProperty);
  if (xmlValue.getXmlAccessMethods() != null) {
    oldProperty.setMethodProperty(true);
    oldProperty.setGetMethodName(xmlValue.getXmlAccessMethods().getGetMethod());
    oldProperty.setSetMethodName(xmlValue.getXmlAccessMethods().getSetMethod());
  }
  if (!xmlValue.getContainerType().equals(DEFAULT)) {
    setContainerType(oldProperty,xmlValue.getContainerType());
  }
  if (!xmlValue.getType().equals(DEFAULT)) {
    JavaClass pType=jModelInput.getJavaModel().getClass(xmlValue.getType());
    if (aProcessor.isCollectionType(oldProperty.getType())) {
      oldProperty.setGenericType(pType);
    }
 else {
      oldProperty.setType(pType);
    }
    if (aProcessor.shouldGenerateTypeInfo(pType) && aProcessor.getTypeInfo().get(pType.getQualifiedName()) == null) {
      aProcessor.buildNewTypeInfo(new JavaClass[]{pType});
    }
  }
  reapplyPackageAndClassAdapters(oldProperty,info);
  if (xmlValue.getXmlJavaTypeAdapter() != null) {
    try {
      oldProperty.setXmlJavaTypeAdapter(xmlValue.getXmlJavaTypeAdapter());
    }
 catch (    JAXBException e) {
      throw JAXBException.invalidPropertyAdapterClass(xmlValue.getXmlJavaTypeAdapter().getValue(),xmlValue.getJavaAttribute(),javaType.getName());
    }
  }
  if (xmlValue.isSetReadOnly()) {
    oldProperty.setReadOnly(xmlValue.isReadOnly());
  }
  if (xmlValue.isSetWriteOnly()) {
    oldProperty.setWriteOnly(xmlValue.isWriteOnly());
  }
  if (xmlValue.isSetCdata()) {
    oldProperty.setCdata(xmlValue.isCdata());
  }
  if (xmlValue.getXmlAbstractNullPolicy() != null) {
    JAXBElement jaxbElt=xmlValue.getXmlAbstractNullPolicy();
    oldProperty.setNullPolicy((XmlAbstractNullPolicy)jaxbElt.getValue());
  }
  if (xmlValue.getXmlProperties() != null && xmlValue.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlValue.getXmlProperties().getXmlProperty()));
  }
  return oldProperty;
}"
66199,"/** 
 * Build a valid Integer instance from a String or another Number instance.
 * @caught exception    The Integer(String) constructor throws aNumberFormatException if the String does not contain a parsable integer.
 */
protected Integer convertObjectToInteger(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String && ((String)sourceObject).length() > 0 && ((String)sourceObject).charAt(0) == PLUS) {
    return super.convertObjectToInteger(((String)sourceObject).substring(1));
  }
  return super.convertObjectToInteger(sourceObject);
}","/** 
 * Build a valid Integer instance from a String or another Number instance.
 * @caught exception    The Integer(String) constructor throws aNumberFormatException if the String does not contain a parsable integer.
 */
protected Integer convertObjectToInteger(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return 0;
    }
 else     if (sourceString.charAt(0) == PLUS) {
      return super.convertObjectToInteger(sourceString.substring(1));
    }
  }
  return super.convertObjectToInteger(sourceObject);
}"
66200,"/** 
 * INTERNAL: Build a valid Short instance from a String or another Number instance.
 * @caught exception    The Short(String) constructor throws aNumberFormatException if the String does not contain a parsable short.
 */
protected Short convertObjectToShort(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String && ((String)sourceObject).length() > 0 && ((String)sourceObject).charAt(0) == PLUS) {
    return super.convertObjectToShort(((String)sourceObject).substring(1));
  }
  return super.convertObjectToShort(sourceObject);
}","/** 
 * INTERNAL: Build a valid Short instance from a String or another Number instance.
 * @caught exception    The Short(String) constructor throws aNumberFormatException if the String does not contain a parsable short.
 */
protected Short convertObjectToShort(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return 0;
    }
 else     if (sourceString.charAt(0) == PLUS) {
      return super.convertObjectToShort(sourceString.substring(1));
    }
  }
  return super.convertObjectToShort(sourceObject);
}"
66201,"/** 
 * Convert the object to an instance of Double.
 * @param sourceObject Object of type String or Number.
 * @caught exception    The Double(String) constructor throws aNumberFormatException if the String does not contain a parsable double.
 */
protected Double convertObjectToDouble(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    if (XMLConstants.POSITIVE_INFINITY.equals(sourceObject)) {
      return Double.valueOf(Double.POSITIVE_INFINITY);
    }
 else     if (XMLConstants.NEGATIVE_INFINITY.equals(sourceObject)) {
      return Double.valueOf(Double.NEGATIVE_INFINITY);
    }
 else {
      return super.convertObjectToDouble(sourceObject);
    }
  }
 else {
    return super.convertObjectToDouble(sourceObject);
  }
}","/** 
 * Convert the object to an instance of Double.
 * @param sourceObject Object of type String or Number.
 * @caught exception    The Double(String) constructor throws aNumberFormatException if the String does not contain a parsable double.
 */
protected Double convertObjectToDouble(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    if (((String)sourceObject).length() == 0) {
      return 0d;
    }
 else     if (XMLConstants.POSITIVE_INFINITY.equals(sourceObject)) {
      return Double.valueOf(Double.POSITIVE_INFINITY);
    }
 else     if (XMLConstants.NEGATIVE_INFINITY.equals(sourceObject)) {
      return Double.valueOf(Double.NEGATIVE_INFINITY);
    }
 else {
      return super.convertObjectToDouble(sourceObject);
    }
  }
 else {
    return super.convertObjectToDouble(sourceObject);
  }
}"
66202,"/** 
 * Build a valid instance of BigDecimal from the given sourceObject
 * @param sourceObject    Valid instance of String, BigInteger, any Number
 */
protected BigDecimal convertObjectToBigDecimal(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String && ((String)sourceObject).length() > 0 && ((String)sourceObject).charAt(0) == PLUS) {
    return super.convertObjectToBigDecimal(((String)sourceObject).substring(1));
  }
  return super.convertObjectToBigDecimal(sourceObject);
}","/** 
 * Build a valid instance of BigDecimal from the given sourceObject
 * @param sourceObject    Valid instance of String, BigInteger, any Number
 */
protected BigDecimal convertObjectToBigDecimal(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return BigDecimal.ZERO;
    }
 else     if (sourceString.charAt(0) == PLUS) {
      return super.convertObjectToBigDecimal(sourceString.substring(1));
    }
  }
  return super.convertObjectToBigDecimal(sourceObject);
}"
66203,"/** 
 * Build a valid Float instance from a String or another Number instance.
 * @caught exception    The Float(String) constructor throws aNumberFormatException if the String does not contain a parsable Float.
 */
protected Float convertObjectToFloat(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    if (XMLConstants.POSITIVE_INFINITY.equals(sourceObject)) {
      return new Float(Float.POSITIVE_INFINITY);
    }
 else     if (XMLConstants.NEGATIVE_INFINITY.equals(sourceObject)) {
      return new Float(Float.NEGATIVE_INFINITY);
    }
    return super.convertObjectToFloat(sourceObject);
  }
 else {
    return super.convertObjectToFloat(sourceObject);
  }
}","/** 
 * Build a valid Float instance from a String or another Number instance.
 * @caught exception    The Float(String) constructor throws aNumberFormatException if the String does not contain a parsable Float.
 */
protected Float convertObjectToFloat(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    if (((String)sourceObject).length() == 0) {
      return 0f;
    }
 else     if (XMLConstants.POSITIVE_INFINITY.equals(sourceObject)) {
      return new Float(Float.POSITIVE_INFINITY);
    }
 else     if (XMLConstants.NEGATIVE_INFINITY.equals(sourceObject)) {
      return new Float(Float.NEGATIVE_INFINITY);
    }
  }
  return super.convertObjectToFloat(sourceObject);
}"
66204,"/** 
 * Build a valid instance of Byte from the provided sourceObject
 * @param sourceObject    Valid instance of String or any Number
 * @caught exception        The Byte(String) constructor throws aNumberFormatException if the String does not contain a parsable byte.
 */
protected Byte convertObjectToByte(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String && ((String)sourceObject).length() > 0 && ((String)sourceObject).charAt(0) == PLUS) {
    return super.convertObjectToByte(((String)sourceObject).substring(1));
  }
  return super.convertObjectToByte(sourceObject);
}","/** 
 * Build a valid instance of Byte from the provided sourceObject
 * @param sourceObject    Valid instance of String or any Number
 * @caught exception        The Byte(String) constructor throws aNumberFormatException if the String does not contain a parsable byte.
 */
protected Byte convertObjectToByte(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return 0;
    }
 else     if (sourceString.charAt(0) == PLUS) {
      return super.convertObjectToByte(sourceString.substring(1));
    }
  }
  return super.convertObjectToByte(sourceObject);
}"
66205,"/** 
 * Build a valid Long instance from a String or another Number instance.
 * @caught exception    The Long(String) constructor throws aNumberFormatException if the String does not contain a parsable long.
 */
protected Long convertObjectToLong(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String && ((String)sourceObject).length() > 0 && ((String)sourceObject).charAt(0) == PLUS) {
    return super.convertObjectToLong(((String)sourceObject).substring(1));
  }
  return super.convertObjectToLong(sourceObject);
}","/** 
 * Build a valid Long instance from a String or another Number instance.
 * @caught exception    The Long(String) constructor throws aNumberFormatException if the String does not contain a parsable long.
 */
protected Long convertObjectToLong(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return 0l;
    }
 else     if (sourceString.charAt(0) == PLUS) {
      return super.convertObjectToLong(sourceString.substring(1));
    }
  }
  return super.convertObjectToLong(sourceObject);
}"
66206,"/** 
 * Build a valid instance of BigInteger from the provided sourceObject.
 * @param sourceObject    Valid instance of String, BigDecimal, or any Number
 */
protected BigInteger convertObjectToBigInteger(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String && ((String)sourceObject).length() > 0 && ((String)sourceObject).charAt(0) == PLUS) {
    return super.convertObjectToBigInteger(((String)sourceObject).substring(1));
  }
  return super.convertObjectToBigInteger(sourceObject);
}","/** 
 * Build a valid instance of BigInteger from the provided sourceObject.
 * @param sourceObject    Valid instance of String, BigDecimal, or any Number
 */
protected BigInteger convertObjectToBigInteger(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return BigInteger.ZERO;
    }
 else     if (sourceString.charAt(0) == PLUS) {
      return super.convertObjectToBigInteger(sourceString.substring(1));
    }
  }
  return super.convertObjectToBigInteger(sourceObject);
}"
66207,"/** 
 * INTERNAL: Build a valid BigDecimal instance from a String or another Number instance.  BigDecimal is the most general type so is must be returned when an object is converted to a number.
 * @caught exception    The BigDecimal(String) constructor throws aNumberFormatException if the String does not contain a parsable BigDecimal.
 */
protected BigDecimal convertObjectToNumber(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String && ((String)sourceObject).length() > 0 && ((String)sourceObject).charAt(0) == PLUS) {
    return super.convertObjectToNumber(((String)sourceObject).substring(1));
  }
  return super.convertObjectToNumber(sourceObject);
}","/** 
 * INTERNAL: Build a valid BigDecimal instance from a String or another Number instance.  BigDecimal is the most general type so is must be returned when an object is converted to a number.
 * @caught exception    The BigDecimal(String) constructor throws aNumberFormatException if the String does not contain a parsable BigDecimal.
 */
protected BigDecimal convertObjectToNumber(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return BigDecimal.ZERO;
    }
 else     if (sourceString.charAt(0) == PLUS) {
      return super.convertObjectToNumber(sourceString.substring(1));
    }
  }
  return super.convertObjectToNumber(sourceObject);
}"
66208,"/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 */
public void resolveReferences(AbstractSession session){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    Object referenceSourceObject=reference.getSourceObject();
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=null;
      if (mapping.getReuseContainer()) {
        container=mapping.getAttributeAccessor().getAttributeValueFromObject(referenceSourceObject);
      }
 else {
        container=cPolicy.containerInstance();
      }
      createPKVectorsFromMap(reference,mapping);
      if (!mapping.isWriteOnly()) {
        for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
          CacheId primaryKey=(CacheId)pkIt.next();
          Object value=getValue(session,reference,primaryKey);
          if (value != null) {
            cPolicy.addInto(value,container,session);
          }
        }
      }
      mapping.setAttributeValueInObject(referenceSourceObject,container);
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        Object iterator=cPolicy.iteratorFor(container);
        while (cPolicy.hasNext(iterator)) {
          Object next=cPolicy.next(iterator,session);
          if (backpointerContainerPolicy == null) {
            backpointerAccessor.setAttributeValueInObject(next,referenceSourceObject);
          }
 else {
            Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(next);
            if (backpointerContainer == null) {
              backpointerContainer=backpointerContainerPolicy.containerInstance();
              backpointerAccessor.setAttributeValueInObject(next,backpointerContainer);
            }
            backpointerContainerPolicy.addInto(referenceSourceObject,backpointerContainer,session);
          }
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      CacheId primaryKey=(CacheId)reference.getPrimaryKey();
      Object value=getValue(session,reference,primaryKey);
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList();
}","/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 */
public void resolveReferences(AbstractSession session){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    Object referenceSourceObject=reference.getSourceObject();
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=this.getContainerForMapping(mapping,referenceSourceObject);
      if (container == null) {
        if (mapping.getReuseContainer()) {
          container=mapping.getAttributeAccessor().getAttributeValueFromObject(referenceSourceObject);
        }
 else {
          container=cPolicy.containerInstance();
        }
        this.referencedContainers.put(new ReferenceKey(referenceSourceObject,mapping),container);
      }
      createPKVectorsFromMap(reference,mapping);
      Object value=null;
      if (!mapping.isWriteOnly()) {
        for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
          CacheId primaryKey=(CacheId)pkIt.next();
          value=getValue(session,reference,primaryKey);
          if (value != null) {
            cPolicy.addInto(value,container,session);
          }
        }
      }
      mapping.setAttributeValueInObject(referenceSourceObject,container);
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null && value != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(referenceSourceObject,backpointerContainer,session);
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      CacheId primaryKey=(CacheId)reference.getPrimaryKey();
      Object value=getValue(session,reference,primaryKey);
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList<Reference>();
  referencedContainers=new HashMap<ReferenceKey,Object>();
}"
66209,"/** 
 * Retrieve the reference for a given mapping instance.
 * @param mapping
 */
public Reference getReference(XMLObjectReferenceMapping mapping,Object sourceObject){
  for (int x=0; x < references.size(); x++) {
    Reference reference=(Reference)references.get(x);
    if (reference.getMapping() == mapping && reference.getSourceObject() == sourceObject) {
      return reference;
    }
  }
  return null;
}","/** 
 * Return a reference for the given mapping and source object, that doesn't already contain an entry for the provided field. 
 * @return
 */
public Reference getReference(XMLObjectReferenceMapping mapping,Object sourceObject,XMLField xmlField){
  XMLField targetField=(XMLField)mapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
  String tgtXpath=null;
  if (!(mapping.getReferenceClass() == null || mapping.getReferenceClass() == Object.class)) {
    if (targetField != null) {
      tgtXpath=targetField.getXPath();
    }
  }
  for (int x=0; x < references.size(); x++) {
    Reference reference=(Reference)references.get(x);
    if (reference.getMapping() == mapping && reference.getSourceObject() == sourceObject) {
      if (reference.getPrimaryKeyMap().get(tgtXpath) == null) {
        return reference;
      }
    }
  }
  return null;
}"
66210,"/** 
 * The default constructor initializes the list of References.
 */
public ReferenceResolver(){
  references=new ArrayList();
}","/** 
 * The default constructor initializes the list of References.
 */
public ReferenceResolver(){
  references=new ArrayList();
  referencedContainers=new HashMap<ReferenceKey,Object>();
  lookupKey=new ReferenceKey(null,null);
}"
66211,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Converter converter=xmlChoiceCollectionMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  NodeValue associatedNodeValue=null;
  XMLField associatedField=null;
  Object fieldValue=value;
  if (value instanceof XMLRoot) {
    XMLRoot rootValue=(XMLRoot)value;
    String localName=rootValue.getLocalName();
    String namespaceUri=rootValue.getNamespaceURI();
    fieldValue=rootValue.getObject();
    associatedField=getFieldForName(localName,namespaceUri);
    if (associatedField == null) {
      associatedField=xmlChoiceCollectionMapping.getClassToFieldMappings().get(fieldValue.getClass());
    }
  }
 else {
    associatedField=xmlChoiceCollectionMapping.getClassToFieldMappings().get(value.getClass());
  }
  if (associatedField != null) {
    associatedNodeValue=this.fieldToNodeValues.get(associatedField);
  }
  if (associatedNodeValue != null) {
    XPathFragment frag=associatedField.getXPathFragment();
    while (frag != null) {
      if (associatedNodeValue.isOwningNode(frag)) {
        ContainerValue nestedNodeValue=(ContainerValue)((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementNodeValue();
        nestedNodeValue.marshalSingleValue(frag,marshalRecord,object,fieldValue,session,namespaceResolver,marshalContext);
        break;
      }
      frag=frag.getNextFragment();
      if (frag == null) {
        ContainerValue nestedNodeValue=(ContainerValue)((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementNodeValue();
        nestedNodeValue.marshalSingleValue(frag,marshalRecord,object,fieldValue,session,namespaceResolver,marshalContext);
      }
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Converter converter=xmlChoiceCollectionMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  NodeValue associatedNodeValue=null;
  XMLField associatedField=null;
  Object fieldValue=value;
  if (value instanceof XMLRoot) {
    XMLRoot rootValue=(XMLRoot)value;
    String localName=rootValue.getLocalName();
    String namespaceUri=rootValue.getNamespaceURI();
    fieldValue=rootValue.getObject();
    associatedField=getFieldForName(localName,namespaceUri);
    if (associatedField == null) {
      associatedField=xmlChoiceCollectionMapping.getClassToFieldMappings().get(fieldValue.getClass());
    }
  }
 else {
    associatedField=xmlChoiceCollectionMapping.getClassToFieldMappings().get(value.getClass());
  }
  if (associatedField == null) {
    List<XMLField> sourceFields=xmlChoiceCollectionMapping.getClassToSourceFieldsMappings().get(value.getClass());
    if (sourceFields != null) {
      associatedField=sourceFields.get(0);
    }
  }
  if (associatedField != null) {
    associatedNodeValue=this.fieldToNodeValues.get(associatedField);
  }
  if (associatedNodeValue != null) {
    XPathFragment frag=associatedField.getXPathFragment();
    associatedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
    while (frag != null) {
      if (associatedNodeValue.isOwningNode(frag)) {
        ContainerValue nestedNodeValue=(ContainerValue)associatedNodeValue;
        nestedNodeValue.marshalSingleValue(frag,marshalRecord,object,fieldValue,session,namespaceResolver,marshalContext);
        break;
      }
      frag=frag.getNextFragment();
      if (frag == null) {
        ContainerValue nestedNodeValue=(ContainerValue)associatedNodeValue;
        nestedNodeValue.marshalSingleValue(frag,marshalRecord,object,fieldValue,session,namespaceResolver,marshalContext);
      }
    }
  }
  return true;
}"
66212,"private void initializeNodeValue(){
  XMLMapping xmlMapping=xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof XMLCompositeDirectCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
  }
 else {
    choiceElementNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
  }
}","private void initializeNodeValue(){
  XMLMapping xmlMapping=xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof XMLCompositeDirectCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
  }
 else   if (xmlMapping instanceof XMLCompositeCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
  }
 else {
    XMLCollectionReferenceMapping refMapping=((XMLCollectionReferenceMapping)xmlMapping);
    if (refMapping.usesSingleNode() || refMapping.getFields().size() == 1) {
      choiceElementNodeValue=new XMLCollectionReferenceMappingNodeValue(refMapping,xmlField);
    }
 else {
      choiceElementNodeValue=new XMLCollectionReferenceMappingMarshalNodeValue((XMLCollectionReferenceMapping)xmlMapping);
    }
  }
}"
66213,"private void initializeNodeValue(){
  XMLMapping xmlMapping=xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof XMLCompositeDirectCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
  }
 else {
    choiceElementNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
  }
}","private void initializeNodeValue(){
  XMLMapping xmlMapping=xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof XMLCompositeDirectCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else   if (xmlMapping instanceof XMLCompositeCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else {
    choiceElementNodeValue=new XMLCollectionReferenceMappingNodeValue((XMLCollectionReferenceMapping)xmlMapping,xmlField);
    choiceElementMarshalNodeValue=new XMLCollectionReferenceMappingMarshalNodeValue((XMLCollectionReferenceMapping)xmlMapping);
  }
}"
66214,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (value instanceof XMLRoot) {
    XMLRoot root=(XMLRoot)value;
    XPathFragment fragment=this.xmlField.getXPathFragment();
    while (fragment != null && !fragment.nameIsText) {
      if (fragment.getNextFragment() == null || fragment.getHasText()) {
        if (fragment.getLocalName().equals(root.getLocalName())) {
          String fragUri=fragment.getNamespaceURI();
          String namespaceUri=root.getNamespaceURI();
          if ((namespaceUri == null && fragUri == null) || (namespaceUri != null && fragUri != null && namespaceUri.equals(fragUri))) {
            return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
          }
        }
      }
      fragment=fragment.getNextFragment();
    }
  }
 else {
    if (value != null && xmlChoiceMapping.getClassToFieldMappings().get(value.getClass()) == this.xmlField) {
      return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
    }
  }
  return false;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (value instanceof XMLRoot) {
    XMLRoot root=(XMLRoot)value;
    XPathFragment fragment=this.xmlField.getXPathFragment();
    while (fragment != null && !fragment.nameIsText) {
      if (fragment.getNextFragment() == null || fragment.getHasText()) {
        if (fragment.getLocalName().equals(root.getLocalName())) {
          String fragUri=fragment.getNamespaceURI();
          String namespaceUri=root.getNamespaceURI();
          if ((namespaceUri == null && fragUri == null) || (namespaceUri != null && fragUri != null && namespaceUri.equals(fragUri))) {
            return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
          }
        }
      }
      fragment=fragment.getNextFragment();
    }
  }
 else {
    if (value != null && xmlChoiceMapping.getClassToFieldMappings().get(value.getClass()) == this.xmlField) {
      return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
    }
 else     if (value != null) {
      List<XMLField> sourceFields=xmlChoiceMapping.getClassToSourceFieldsMappings().get(value.getClass());
      if (sourceFields != null && sourceFields.contains(this.xmlField)) {
        return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
      }
    }
  }
  return false;
}"
66215,"public void initializeNodeValue(){
  XMLMapping xmlMapping=xmlChoiceMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof XMLDirectMapping) {
    choiceElementNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
  }
 else {
    choiceElementNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
  }
}","public void initializeNodeValue(){
  XMLMapping xmlMapping=xmlChoiceMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof XMLDirectMapping) {
    choiceElementNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
  }
 else   if (xmlMapping instanceof XMLObjectReferenceMapping) {
    choiceElementNodeValue=new XMLObjectReferenceMappingNodeValue((XMLObjectReferenceMapping)xmlMapping,xmlField);
  }
 else {
    choiceElementNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
  }
}"
66216,"public DatabaseMapping generateMappingForReferenceProperty(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  if (property.isMixedContent() || property.isAny()) {
    XMLAnyCollectionMapping mapping=generateAnyCollectionMapping(property,descriptor,namespaceInfo,true);
    return mapping;
  }
  boolean isCollection=isCollectionType(property) || property.getType().isArray();
  DatabaseMapping mapping;
  if (isCollection) {
    mapping=new XMLChoiceCollectionMapping();
    ((XMLChoiceCollectionMapping)mapping).setReuseContainer(true);
    ((XMLChoiceCollectionMapping)mapping).setConverter(new JAXBElementRootConverter(Object.class));
    if (property.isSetWriteOnly()) {
      ((XMLChoiceCollectionMapping)mapping).setIsWriteOnly(property.isWriteOnly());
    }
  }
 else {
    mapping=new XMLChoiceObjectMapping();
    ((XMLChoiceObjectMapping)mapping).setConverter(new JAXBElementRootConverter(Object.class));
    if (property.isSetWriteOnly()) {
      ((XMLChoiceObjectMapping)mapping).setIsWriteOnly(property.isWriteOnly());
    }
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  mapping.setAttributeName(property.getPropertyName());
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      ((XMLMapping)mapping).setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  List<ElementDeclaration> referencedElements=property.getReferencedElements();
  JavaClass propertyType=property.getType();
  if (propertyType.isArray()) {
    JAXBArrayAttributeAccessor accessor=new JAXBArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),helper.getClassLoader());
    accessor.setComponentClassName(property.getType().getComponentType().getName());
    JavaClass componentType=propertyType.getComponentType();
    if (componentType.isArray()) {
      Class adaptedClass=classToGeneratedClasses.get(componentType.getName());
      accessor.setAdaptedClassName(adaptedClass.getName());
    }
    mapping.setAttributeAccessor(accessor);
  }
  for (  ElementDeclaration element : referencedElements) {
    QName elementName=element.getElementName();
    boolean isText=!(this.typeInfo.containsKey(element.getJavaTypeName())) && !(element.getJavaTypeName().equals(OBJECT_CLASS_NAME));
    String xPath=""String_Node_Str"";
    if (property.isSetXmlElementWrapper()) {
      XmlElementWrapper wrapper=property.getXmlElementWrapper();
      String namespace=wrapper.getNamespace();
      if (namespace.equals(""String_Node_Str"")) {
        if (namespaceInfo.isElementFormQualified()) {
          namespace=namespaceInfo.getNamespace();
        }
 else {
          namespace=""String_Node_Str"";
        }
      }
      if (namespace.equals(""String_Node_Str"")) {
        xPath+=(wrapper.getName() + ""String_Node_Str"");
      }
 else {
        String prefix=getPrefixForNamespace(namespace,namespaceInfo.getNamespaceResolver(),null);
        xPath+=getQualifiedString(prefix,wrapper.getName() + ""String_Node_Str"");
      }
    }
    XMLField xmlField=this.getXPathForElement(xPath,elementName,namespaceInfo,isText);
    if (helper.getXMLToJavaTypeMap().get(element.getJavaType().getRawName()) == XMLConstants.BASE_64_BINARY_QNAME) {
      xmlField.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    }
    DatabaseMapping nestedMapping;
    if (isCollection) {
      XMLChoiceCollectionMapping xmlChoiceCollectionMapping=(XMLChoiceCollectionMapping)mapping;
      xmlChoiceCollectionMapping.addChoiceElement(xmlField,element.getJavaTypeName());
      nestedMapping=(DatabaseMapping)xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
      if (nestedMapping.isAbstractCompositeCollectionMapping()) {
        ((XMLCompositeCollectionMapping)nestedMapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      }
      if (nestedMapping.isAbstractCompositeDirectCollectionMapping()) {
        ((XMLCompositeDirectCollectionMapping)nestedMapping).getNullPolicy().setNullRepresentedByEmptyNode(false);
      }
      if (element.isList() && nestedMapping.isAbstractCompositeDirectCollectionMapping()) {
        XMLListConverter listConverter=new XMLListConverter();
        listConverter.setObjectClassName(element.getJavaType().getQualifiedName());
        ((XMLCompositeDirectCollectionMapping)nestedMapping).setValueConverter(listConverter);
      }
    }
 else {
      XMLChoiceObjectMapping xmlChoiceObjectMapping=(XMLChoiceObjectMapping)mapping;
      xmlChoiceObjectMapping.addChoiceElement(xmlField,element.getJavaTypeName());
      nestedMapping=(DatabaseMapping)xmlChoiceObjectMapping.getChoiceElementMappings().get(xmlField);
      if (nestedMapping.isAbstractCompositeObjectMapping()) {
        ((XMLCompositeObjectMapping)nestedMapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      }
    }
    if (!element.isXmlRootElement()) {
      Class scopeClass=element.getScopeClass();
      if (scopeClass == javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class) {
        scopeClass=JAXBElement.GlobalScope.class;
      }
      Class declaredType=helper.getClassForJavaClass(element.getJavaType());
      JAXBElementConverter converter=new JAXBElementConverter(xmlField,declaredType,scopeClass);
      if (isCollection) {
        XMLChoiceCollectionMapping xmlChoiceCollectionMapping=(XMLChoiceCollectionMapping)mapping;
        Converter originalConverter=xmlChoiceCollectionMapping.getConverter(xmlField);
        converter.setNestedConverter(originalConverter);
        xmlChoiceCollectionMapping.addConverter(xmlField,converter);
      }
 else {
        XMLChoiceObjectMapping xmlChoiceObjectMapping=(XMLChoiceObjectMapping)mapping;
        Converter originalConverter=xmlChoiceObjectMapping.getConverter(xmlField);
        converter.setNestedConverter(originalConverter);
        xmlChoiceObjectMapping.addConverter(xmlField,converter);
      }
    }
  }
  return mapping;
}","public DatabaseMapping generateMappingForReferenceProperty(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  if (property.isMixedContent() || property.isAny()) {
    XMLAnyCollectionMapping mapping=generateAnyCollectionMapping(property,descriptor,namespaceInfo,true);
    return mapping;
  }
  boolean isCollection=isCollectionType(property) || property.getType().isArray();
  DatabaseMapping mapping;
  if (isCollection) {
    mapping=new XMLChoiceCollectionMapping();
    ((XMLChoiceCollectionMapping)mapping).setReuseContainer(true);
    ((XMLChoiceCollectionMapping)mapping).useCollectionClassName(jotArrayList.getRawName());
    ((XMLChoiceCollectionMapping)mapping).setConverter(new JAXBElementRootConverter(Object.class));
    if (property.isSetWriteOnly()) {
      ((XMLChoiceCollectionMapping)mapping).setIsWriteOnly(property.isWriteOnly());
    }
  }
 else {
    mapping=new XMLChoiceObjectMapping();
    ((XMLChoiceObjectMapping)mapping).setConverter(new JAXBElementRootConverter(Object.class));
    if (property.isSetWriteOnly()) {
      ((XMLChoiceObjectMapping)mapping).setIsWriteOnly(property.isWriteOnly());
    }
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  mapping.setAttributeName(property.getPropertyName());
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      ((XMLMapping)mapping).setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  List<ElementDeclaration> referencedElements=property.getReferencedElements();
  JavaClass propertyType=property.getType();
  if (propertyType.isArray()) {
    JAXBArrayAttributeAccessor accessor=new JAXBArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),helper.getClassLoader());
    accessor.setComponentClassName(property.getType().getComponentType().getName());
    JavaClass componentType=propertyType.getComponentType();
    if (componentType.isArray()) {
      Class adaptedClass=classToGeneratedClasses.get(componentType.getName());
      accessor.setAdaptedClassName(adaptedClass.getName());
    }
    mapping.setAttributeAccessor(accessor);
  }
  for (  ElementDeclaration element : referencedElements) {
    QName elementName=element.getElementName();
    boolean isText=!(this.typeInfo.containsKey(element.getJavaTypeName())) && !(element.getJavaTypeName().equals(OBJECT_CLASS_NAME));
    String xPath=""String_Node_Str"";
    if (property.isSetXmlElementWrapper()) {
      XmlElementWrapper wrapper=property.getXmlElementWrapper();
      String namespace=wrapper.getNamespace();
      if (namespace.equals(""String_Node_Str"")) {
        if (namespaceInfo.isElementFormQualified()) {
          namespace=namespaceInfo.getNamespace();
        }
 else {
          namespace=""String_Node_Str"";
        }
      }
      if (namespace.equals(""String_Node_Str"")) {
        xPath+=(wrapper.getName() + ""String_Node_Str"");
      }
 else {
        String prefix=getPrefixForNamespace(namespace,namespaceInfo.getNamespaceResolver(),null);
        xPath+=getQualifiedString(prefix,wrapper.getName() + ""String_Node_Str"");
      }
    }
    XMLField xmlField=this.getXPathForElement(xPath,elementName,namespaceInfo,isText);
    if (helper.getXMLToJavaTypeMap().get(element.getJavaType().getRawName()) == XMLConstants.BASE_64_BINARY_QNAME) {
      xmlField.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    }
    DatabaseMapping nestedMapping;
    if (isCollection) {
      XMLChoiceCollectionMapping xmlChoiceCollectionMapping=(XMLChoiceCollectionMapping)mapping;
      xmlChoiceCollectionMapping.addChoiceElement(xmlField,element.getJavaTypeName());
      nestedMapping=(DatabaseMapping)xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
      if (nestedMapping.isAbstractCompositeCollectionMapping()) {
        ((XMLCompositeCollectionMapping)nestedMapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      }
      if (nestedMapping.isAbstractCompositeDirectCollectionMapping()) {
        ((XMLCompositeDirectCollectionMapping)nestedMapping).getNullPolicy().setNullRepresentedByEmptyNode(false);
      }
      if (element.isList() && nestedMapping.isAbstractCompositeDirectCollectionMapping()) {
        XMLListConverter listConverter=new XMLListConverter();
        listConverter.setObjectClassName(element.getJavaType().getQualifiedName());
        ((XMLCompositeDirectCollectionMapping)nestedMapping).setValueConverter(listConverter);
      }
    }
 else {
      XMLChoiceObjectMapping xmlChoiceObjectMapping=(XMLChoiceObjectMapping)mapping;
      xmlChoiceObjectMapping.addChoiceElement(xmlField,element.getJavaTypeName());
      nestedMapping=(DatabaseMapping)xmlChoiceObjectMapping.getChoiceElementMappings().get(xmlField);
      if (nestedMapping.isAbstractCompositeObjectMapping()) {
        ((XMLCompositeObjectMapping)nestedMapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      }
    }
    if (!element.isXmlRootElement()) {
      Class scopeClass=element.getScopeClass();
      if (scopeClass == javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class) {
        scopeClass=JAXBElement.GlobalScope.class;
      }
      Class declaredType=helper.getClassForJavaClass(element.getJavaType());
      JAXBElementConverter converter=new JAXBElementConverter(xmlField,declaredType,scopeClass);
      if (isCollection) {
        XMLChoiceCollectionMapping xmlChoiceCollectionMapping=(XMLChoiceCollectionMapping)mapping;
        Converter originalConverter=xmlChoiceCollectionMapping.getConverter(xmlField);
        converter.setNestedConverter(originalConverter);
        xmlChoiceCollectionMapping.addConverter(xmlField,converter);
      }
 else {
        XMLChoiceObjectMapping xmlChoiceObjectMapping=(XMLChoiceObjectMapping)mapping;
        Converter originalConverter=xmlChoiceObjectMapping.getConverter(xmlField);
        converter.setNestedConverter(originalConverter);
        xmlChoiceObjectMapping.addConverter(xmlField,converter);
      }
    }
  }
  return mapping;
}"
66217,"/** 
 * INTERNAL: This method will return the MapKeyLookupResult instance to be used to  store/retrieve the global helper context for a given application. OC4J classLoader levels:  0 - APP.web (servlet/jsp) or APP.wrapper (ejb) 1 - APP.root (parent for helperContext) 2 - default.root 3 - system.root 4 - oc4j.10.1.3 (remote EJB) or org.eclipse.persistence:11.1.1.0.0 5 - api:1.4.0 6 - jre.extension:0.0.0 7 - jre.bootstrap:1.5.0_07 (with various J2SE versions)
 * @return MapKeyLookupResult wrapping the application classloader for OC4J,the application name for WebLogic and WebSphere, the archive file  name for JBoss - if available; otherwise a MapKeyLookupResult  wrapping Thread.currentThread().getContextClassLoader()
 */
private static MapKeyLookupResult getContextMapKey(ClassLoader classLoader,String classLoaderName){
  if (classLoaderName.startsWith(OC4J_CLASSLOADER_NAME)) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
    return new MapKeyLookupResult(classLoader);
  }
  if (classLoaderName.contains(WLS_CLASSLOADER_NAME)) {
    Object executeThread=getExecuteThread();
    if (executeThread != null) {
      try {
        Method getMethod=PrivilegedAccessHelper.getPublicMethod(executeThread.getClass(),WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_PARAMETER_TYPES,false);
        Object appName=PrivilegedAccessHelper.invokeMethod(getMethod,executeThread);
        if (appName == null && appResolver != null) {
          appName=appResolver.getApplicationName();
        }
        if (appName != null) {
          return new MapKeyLookupResult(appName.toString(),classLoader);
        }
      }
 catch (      Exception e) {
        throw SDOException.errorInvokingWLSMethodReflectively(WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_EXECUTE_THREAD,e);
      }
    }
    return new MapKeyLookupResult(classLoader);
  }
  if (classLoaderName.contains(WAS_CLASSLOADER_NAME)) {
    return getContextMapKeyForWAS(classLoader);
  }
  if (classLoaderName.contains(JBOSS_CLASSLOADER_NAME)) {
    return getContextMapKeyForJBoss(classLoader);
  }
  return new MapKeyLookupResult(classLoader);
}","/** 
 * INTERNAL: This method will return the MapKeyLookupResult instance to be used to  store/retrieve the global helper context for a given application. OC4J classLoader levels:  0 - APP.web (servlet/jsp) or APP.wrapper (ejb) 1 - APP.root (parent for helperContext) 2 - default.root 3 - system.root 4 - oc4j.10.1.3 (remote EJB) or org.eclipse.persistence:11.1.1.0.0 5 - api:1.4.0 6 - jre.extension:0.0.0 7 - jre.bootstrap:1.5.0_07 (with various J2SE versions)
 * @return MapKeyLookupResult wrapping the application classloader for OC4J,the application name for WebLogic and WebSphere, the archive file  name for JBoss - if available; otherwise a MapKeyLookupResult  wrapping Thread.currentThread().getContextClassLoader()
 */
private static MapKeyLookupResult getContextMapKey(ClassLoader classLoader,String classLoaderName){
  if (classLoaderName.startsWith(OC4J_CLASSLOADER_NAME)) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
    return new MapKeyLookupResult(classLoader);
  }
  if (classLoaderName.contains(WLS_CLASSLOADER_NAME)) {
    Object appName=null;
    Object executeThread=getExecuteThread();
    if (executeThread != null) {
      try {
        Method getMethod=PrivilegedAccessHelper.getPublicMethod(executeThread.getClass(),WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_PARAMETER_TYPES,false);
        appName=PrivilegedAccessHelper.invokeMethod(getMethod,executeThread);
      }
 catch (      Exception e) {
        throw SDOException.errorInvokingWLSMethodReflectively(WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_EXECUTE_THREAD,e);
      }
    }
    if (appName == null && appResolver != null) {
      appName=appResolver.getApplicationName();
    }
    if (appName != null) {
      return new MapKeyLookupResult(appName.toString(),classLoader);
    }
    return new MapKeyLookupResult(classLoader);
  }
  if (classLoaderName.contains(WAS_CLASSLOADER_NAME)) {
    return getContextMapKeyForWAS(classLoader);
  }
  if (classLoaderName.contains(JBOSS_CLASSLOADER_NAME)) {
    return getContextMapKeyForJBoss(classLoader);
  }
  return new MapKeyLookupResult(classLoader);
}"
66218,"public Class loadClass(String className) throws ClassNotFoundException {
  Class javaClass=null;
  try {
    javaClass=nestedClassLoader.loadClass(className);
  }
 catch (  ClassNotFoundException e) {
    javaClass=(Class)generatedClasses.get(className);
    if (javaClass != null) {
      return javaClass;
    }
    throw e;
  }
catch (  NoClassDefFoundError error) {
    javaClass=(Class)generatedClasses.get(className);
    if (javaClass == null) {
      throw error;
    }
  }
  return javaClass;
}","public Class loadClass(String className) throws ClassNotFoundException {
  Class javaClass=null;
  try {
    javaClass=getParent().loadClass(className);
  }
 catch (  ClassNotFoundException e) {
    javaClass=(Class)generatedClasses.get(className);
    if (javaClass != null) {
      return javaClass;
    }
    throw e;
  }
catch (  NoClassDefFoundError error) {
    javaClass=(Class)generatedClasses.get(className);
    if (javaClass == null) {
      throw error;
    }
  }
  return javaClass;
}"
66219,"public JaxbClassLoader(ClassLoader nestedClassLoader,TypeMappingInfo[] types){
  this.nestedClassLoader=nestedClassLoader;
  this.generatedClasses=new HashMap();
  if (types != null) {
    for (int i=0; i < types.length; i++) {
      TypeMappingInfo tmi=types[i];
      Type nextType=tmi.getType();
      if (nextType == null) {
        throw org.eclipse.persistence.exceptions.JAXBException.nullTypeOnTypeMappingInfo(tmi.getXmlTagName());
      }
      if (nextType instanceof Class) {
        generatedClasses.put(((Class)nextType).getName(),nextType);
      }
    }
  }
}","public JaxbClassLoader(ClassLoader nestedClassLoader,TypeMappingInfo[] types){
  super(nestedClassLoader);
  this.generatedClasses=new HashMap();
  if (types != null) {
    for (int i=0; i < types.length; i++) {
      TypeMappingInfo tmi=types[i];
      Type nextType=tmi.getType();
      if (nextType == null) {
        throw org.eclipse.persistence.exceptions.JAXBException.nullTypeOnTypeMappingInfo(tmi.getXmlTagName());
      }
      if (nextType instanceof Class) {
        generatedClasses.put(((Class)nextType).getName(),nextType);
      }
    }
  }
}"
66220,"private Class generateMapEntryClassAndDescriptor(Property property,NamespaceResolver nr){
  JavaClass keyType=property.getKeyType();
  JavaClass valueType=property.getValueType();
  if (keyType == null) {
    keyType=helper.getJavaClass(""String_Node_Str"");
  }
  if (valueType == null) {
    valueType=helper.getJavaClass(""String_Node_Str"");
  }
  String mapEntryClassName=WRAPPER_CLASS + wrapperCounter++;
  MapEntryGeneratedKey mapKey=new MapEntryGeneratedKey(keyType.getQualifiedName(),valueType.getQualifiedName());
  Class generatedClass=getGeneratedMapEntryClasses().get(mapKey);
  if (generatedClass == null) {
    generatedClass=generateMapEntryClass(mapEntryClassName,keyType.getQualifiedName(),valueType.getQualifiedName());
    getGeneratedMapEntryClasses().put(mapKey,generatedClass);
    XMLDescriptor desc=new XMLDescriptor();
    desc.setJavaClass(generatedClass);
    desc.addMapping(generateMappingForType(keyType,Property.DEFAULT_KEY_NAME));
    desc.addMapping(generateMappingForType(valueType,Property.DEFAULT_VALUE_NAME));
    NamespaceResolver newNr=new NamespaceResolver();
    String prefix=getPrefixForNamespace(XMLConstants.SCHEMA_INSTANCE_URL,nr,XMLConstants.SCHEMA_INSTANCE_PREFIX,false);
    if (prefix != null) {
      newNr.put(prefix,XMLConstants.SCHEMA_INSTANCE_URL);
    }
    desc.setNamespaceResolver(newNr);
    project.addDescriptor(desc);
  }
  return generatedClass;
}","private Class generateMapEntryClassAndDescriptor(Property property,NamespaceResolver nr){
  JavaClass keyType=property.getKeyType();
  JavaClass valueType=property.getValueType();
  if (keyType == null) {
    keyType=helper.getJavaClass(""String_Node_Str"");
  }
  if (valueType == null) {
    valueType=helper.getJavaClass(""String_Node_Str"");
  }
  String mapEntryClassName=((JaxbClassLoader)helper.getClassLoader()).nextAvailableGeneratedClassName();
  MapEntryGeneratedKey mapKey=new MapEntryGeneratedKey(keyType.getQualifiedName(),valueType.getQualifiedName());
  Class generatedClass=getGeneratedMapEntryClasses().get(mapKey);
  if (generatedClass == null) {
    generatedClass=generateMapEntryClass(mapEntryClassName,keyType.getQualifiedName(),valueType.getQualifiedName());
    getGeneratedMapEntryClasses().put(mapKey,generatedClass);
    XMLDescriptor desc=new XMLDescriptor();
    desc.setJavaClass(generatedClass);
    desc.addMapping(generateMappingForType(keyType,Property.DEFAULT_KEY_NAME));
    desc.addMapping(generateMappingForType(valueType,Property.DEFAULT_VALUE_NAME));
    NamespaceResolver newNr=new NamespaceResolver();
    String prefix=getPrefixForNamespace(XMLConstants.SCHEMA_INSTANCE_URL,nr,XMLConstants.SCHEMA_INSTANCE_PREFIX,false);
    if (prefix != null) {
      newNr.put(prefix,XMLConstants.SCHEMA_INSTANCE_URL);
    }
    desc.setNamespaceResolver(newNr);
    project.addDescriptor(desc);
  }
  return generatedClass;
}"
66221,"public Project generateProject(ArrayList<JavaClass> typeInfoClasses,HashMap<String,TypeInfo> typeInfo,HashMap<String,QName> userDefinedSchemaTypes,HashMap<String,NamespaceInfo> packageToNamespaceMappings,HashMap<QName,ElementDeclaration> globalElements,List<ElementDeclaration> localElements,Map<TypeMappingInfo,Class> typeMappingInfoToGeneratedClass,Map<TypeMappingInfo,Class> typeMappingInfoToAdapterClasses,boolean isDefaultNamespaceAllowed) throws Exception {
  this.typeInfo=typeInfo;
  this.userDefinedSchemaTypes=userDefinedSchemaTypes;
  this.packageToNamespaceMappings=packageToNamespaceMappings;
  this.isDefaultNamespaceAllowed=isDefaultNamespaceAllowed;
  this.globalElements=globalElements;
  this.localElements=localElements;
  this.typeMappingInfoToGeneratedClasses=typeMappingInfoToGeneratedClass;
  this.typeMappingInfoToAdapterClasses=typeMappingInfoToAdapterClasses;
  project=new Project();
  for (  JavaClass next : typeInfoClasses) {
    if (!next.isEnum()) {
      generateDescriptor(next,project);
    }
  }
  for (  JavaClass next : typeInfoClasses) {
    if (!next.isEnum()) {
      setupInheritance(next);
    }
  }
  generateMappings();
  Set<Entry<String,TypeInfo>> entrySet=this.typeInfo.entrySet();
  for (  Entry<String,TypeInfo> entry : entrySet) {
    TypeInfo tInfo=entry.getValue();
    if (tInfo.getXmlCustomizer() != null) {
      String customizerClassName=tInfo.getXmlCustomizer();
      try {
        Class customizerClass=PrivilegedAccessHelper.getClassForName(customizerClassName,true,helper.getClassLoader());
        DescriptorCustomizer descriptorCustomizer=(DescriptorCustomizer)PrivilegedAccessHelper.newInstanceFromClass(customizerClass);
        descriptorCustomizer.customize(tInfo.getDescriptor());
      }
 catch (      IllegalAccessException iae) {
        throw JAXBException.couldNotCreateCustomizerInstance(iae,customizerClassName);
      }
catch (      InstantiationException ie) {
        throw JAXBException.couldNotCreateCustomizerInstance(ie,customizerClassName);
      }
catch (      ClassCastException cce) {
        throw JAXBException.invalidCustomizerClass(cce,customizerClassName);
      }
catch (      ClassNotFoundException cnfe) {
        throw JAXBException.couldNotCreateCustomizerInstance(cnfe,customizerClassName);
      }
    }
  }
  processGlobalElements(project);
  wrapperCounter=0;
  return project;
}","public Project generateProject(ArrayList<JavaClass> typeInfoClasses,HashMap<String,TypeInfo> typeInfo,HashMap<String,QName> userDefinedSchemaTypes,HashMap<String,NamespaceInfo> packageToNamespaceMappings,HashMap<QName,ElementDeclaration> globalElements,List<ElementDeclaration> localElements,Map<TypeMappingInfo,Class> typeMappingInfoToGeneratedClass,Map<TypeMappingInfo,Class> typeMappingInfoToAdapterClasses,boolean isDefaultNamespaceAllowed) throws Exception {
  this.typeInfo=typeInfo;
  this.userDefinedSchemaTypes=userDefinedSchemaTypes;
  this.packageToNamespaceMappings=packageToNamespaceMappings;
  this.isDefaultNamespaceAllowed=isDefaultNamespaceAllowed;
  this.globalElements=globalElements;
  this.localElements=localElements;
  this.typeMappingInfoToGeneratedClasses=typeMappingInfoToGeneratedClass;
  this.typeMappingInfoToAdapterClasses=typeMappingInfoToAdapterClasses;
  project=new Project();
  for (  JavaClass next : typeInfoClasses) {
    if (!next.isEnum()) {
      generateDescriptor(next,project);
    }
  }
  for (  JavaClass next : typeInfoClasses) {
    if (!next.isEnum()) {
      setupInheritance(next);
    }
  }
  generateMappings();
  Set<Entry<String,TypeInfo>> entrySet=this.typeInfo.entrySet();
  for (  Entry<String,TypeInfo> entry : entrySet) {
    TypeInfo tInfo=entry.getValue();
    if (tInfo.getXmlCustomizer() != null) {
      String customizerClassName=tInfo.getXmlCustomizer();
      try {
        Class customizerClass=PrivilegedAccessHelper.getClassForName(customizerClassName,true,helper.getClassLoader());
        DescriptorCustomizer descriptorCustomizer=(DescriptorCustomizer)PrivilegedAccessHelper.newInstanceFromClass(customizerClass);
        descriptorCustomizer.customize(tInfo.getDescriptor());
      }
 catch (      IllegalAccessException iae) {
        throw JAXBException.couldNotCreateCustomizerInstance(iae,customizerClassName);
      }
catch (      InstantiationException ie) {
        throw JAXBException.couldNotCreateCustomizerInstance(ie,customizerClassName);
      }
catch (      ClassCastException cce) {
        throw JAXBException.invalidCustomizerClass(cce,customizerClassName);
      }
catch (      ClassNotFoundException cnfe) {
        throw JAXBException.couldNotCreateCustomizerInstance(cnfe,customizerClassName);
      }
    }
  }
  processGlobalElements(project);
  return project;
}"
66222,"private Class generateWrapperClassAndDescriptor(TypeInfo type,QName next,ElementDeclaration nextElement,String nextClassName,String attributeTypeName){
  String namespaceUri=null;
  if (next != null) {
    namespaceUri=next.getNamespaceURI();
    if (namespaceUri == null || namespaceUri.equals(""String_Node_Str"")) {
      namespaceUri=""String_Node_Str"";
    }
  }
  TypeMappingInfo tmi=nextElement.getTypeMappingInfo();
  Class generatedClass=null;
  if (tmi != null) {
    generatedClass=CompilerHelper.getExisitingGeneratedClass(tmi,typeMappingInfoToGeneratedClasses,typeMappingInfoToAdapterClasses,helper.getClassLoader());
    if (generatedClass == null) {
      generatedClass=this.generateWrapperClass(WRAPPER_CLASS + wrapperCounter++,attributeTypeName,nextElement.isList(),next);
    }
    typeMappingInfoToGeneratedClasses.put(tmi,generatedClass);
  }
 else {
    generatedClass=this.generateWrapperClass(WRAPPER_CLASS + wrapperCounter++,attributeTypeName,nextElement.isList(),next);
  }
  this.qNamesToGeneratedClasses.put(next,generatedClass);
  try {
    Class declaredClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
    this.qNamesToDeclaredClasses.put(next,declaredClass);
  }
 catch (  Exception e) {
  }
  XMLDescriptor desc=(XMLDescriptor)project.getDescriptor(generatedClass);
  if (desc == null) {
    desc=new XMLDescriptor();
    desc.setJavaClass(generatedClass);
    if (nextElement.isList()) {
      XMLCompositeDirectCollectionMapping mapping=new XMLCompositeDirectCollectionMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      mapping.setUsesSingleNode(true);
      mapping.setReuseContainer(true);
      if (type != null && type.isEnumerationType()) {
        mapping.setValueConverter(buildJAXBEnumTypeConverter(mapping,(EnumTypeInfo)type));
      }
 else {
        try {
          Class fieldElementClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
          mapping.setFieldElementClass(fieldElementClass);
        }
 catch (        ClassNotFoundException e) {
        }
      }
      if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
      }
 else       if (nextClassName.equals(""String_Node_Str"")) {
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
      }
      desc.addMapping(mapping);
    }
 else {
      if (nextElement.getJavaTypeName().equals(OBJECT_CLASS_NAME)) {
        XMLCompositeObjectMapping mapping=new XMLCompositeObjectMapping();
        mapping.setAttributeName(""String_Node_Str"");
        mapping.setSetMethodName(""String_Node_Str"");
        mapping.setGetMethodName(""String_Node_Str"");
        mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
        mapping.setXPath(""String_Node_Str"");
        ((XMLField)mapping.getField()).setIsTypedTextField(true);
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
        desc.addMapping(mapping);
      }
 else       if (areEquals(nextElement.getJavaType(),ClassConstants.ABYTE) || areEquals(nextElement.getJavaType(),ClassConstants.APBYTE) || areEquals(nextElement.getJavaType(),""String_Node_Str"")|| areEquals(nextElement.getJavaType(),""String_Node_Str"")|| areEquals(nextElement.getJavaType(),""String_Node_Str"")) {
        XMLBinaryDataMapping mapping=new XMLBinaryDataMapping();
        mapping.setAttributeName(""String_Node_Str"");
        mapping.setXPath(""String_Node_Str"");
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
        mapping.setSetMethodName(""String_Node_Str"");
        mapping.setGetMethodName(""String_Node_Str"");
        Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(attributeTypeName,getClass().getClassLoader());
        mapping.setAttributeClassification(attributeClassification);
        mapping.setShouldInlineBinaryData(false);
        if (nextElement.getTypeMappingInfo() != null) {
          mapping.setSwaRef(nextElement.isXmlAttachmentRef());
          mapping.setMimeType(nextElement.getXmlMimeType());
        }
        desc.addMapping(mapping);
      }
 else {
        XMLDirectMapping mapping=new XMLDirectMapping();
        mapping.setAttributeName(""String_Node_Str"");
        mapping.setXPath(""String_Node_Str"");
        mapping.setSetMethodName(""String_Node_Str"");
        mapping.setGetMethodName(""String_Node_Str"");
        if (nextElement.getDefaultValue() != null) {
          mapping.setNullValue(nextElement.getDefaultValue());
          mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
        }
        if (helper.isBuiltInJavaType(nextElement.getJavaType())) {
          Class attributeClassification=null;
          if (nextElement.getJavaType().isPrimitive()) {
            attributeClassification=XMLConversionManager.getDefaultManager().convertClassNameToClass(attributeTypeName);
          }
 else {
            attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(attributeTypeName,getClass().getClassLoader());
          }
          mapping.setAttributeClassification(attributeClassification);
        }
        IsSetNullPolicy nullPolicy=new IsSetNullPolicy(""String_Node_Str"",false,true,XMLNullRepresentationType.ABSENT_NODE);
        mapping.setNullPolicy(nullPolicy);
        if (type != null && type.isEnumerationType()) {
          mapping.setConverter(buildJAXBEnumTypeConverter(mapping,(EnumTypeInfo)type));
        }
        if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
          ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
        }
 else         if (nextClassName.equals(""String_Node_Str"")) {
          ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
        }
        if (nextElement.getJavaTypeAdapterClass() != null) {
          mapping.setConverter(new XMLJavaTypeConverter(nextElement.getJavaTypeAdapterClass()));
        }
        desc.addMapping(mapping);
      }
    }
    if (next != null) {
      NamespaceInfo info=getNamespaceInfoForURI(namespaceUri);
      if (info != null) {
        NamespaceResolver resolver=info.getNamespaceResolverForDescriptor();
        String prefix=resolver.resolveNamespaceURI(namespaceUri);
        desc.setNamespaceResolver(resolver);
        desc.setDefaultRootElement(""String_Node_Str"");
        desc.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
      }
 else {
        if (namespaceUri.equals(""String_Node_Str"")) {
          desc.setDefaultRootElement(next.getLocalPart());
        }
 else {
          NamespaceResolver resolver=new NamespaceResolver();
          String prefix=getPrefixForNamespace(namespaceUri,resolver,null);
          desc.setNamespaceResolver(resolver);
          desc.setDefaultRootElement(""String_Node_Str"");
          desc.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
        }
      }
    }
    project.addDescriptor(desc);
  }
  return generatedClass;
}","private Class generateWrapperClassAndDescriptor(TypeInfo type,QName next,ElementDeclaration nextElement,String nextClassName,String attributeTypeName){
  String namespaceUri=null;
  if (next != null) {
    namespaceUri=next.getNamespaceURI();
    if (namespaceUri == null || namespaceUri.equals(""String_Node_Str"")) {
      namespaceUri=""String_Node_Str"";
    }
  }
  TypeMappingInfo tmi=nextElement.getTypeMappingInfo();
  Class generatedClass=null;
  JaxbClassLoader loader=(JaxbClassLoader)helper.getClassLoader();
  if (tmi != null) {
    generatedClass=CompilerHelper.getExisitingGeneratedClass(tmi,typeMappingInfoToGeneratedClasses,typeMappingInfoToAdapterClasses,helper.getClassLoader());
    if (generatedClass == null) {
      generatedClass=this.generateWrapperClass(loader.nextAvailableGeneratedClassName(),attributeTypeName,nextElement.isList(),next);
    }
    typeMappingInfoToGeneratedClasses.put(tmi,generatedClass);
  }
 else {
    generatedClass=this.generateWrapperClass(loader.nextAvailableGeneratedClassName(),attributeTypeName,nextElement.isList(),next);
  }
  this.qNamesToGeneratedClasses.put(next,generatedClass);
  try {
    Class declaredClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
    this.qNamesToDeclaredClasses.put(next,declaredClass);
  }
 catch (  Exception e) {
  }
  XMLDescriptor desc=(XMLDescriptor)project.getDescriptor(generatedClass);
  if (desc == null) {
    desc=new XMLDescriptor();
    desc.setJavaClass(generatedClass);
    if (nextElement.isList()) {
      XMLCompositeDirectCollectionMapping mapping=new XMLCompositeDirectCollectionMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      mapping.setUsesSingleNode(true);
      mapping.setReuseContainer(true);
      if (type != null && type.isEnumerationType()) {
        mapping.setValueConverter(buildJAXBEnumTypeConverter(mapping,(EnumTypeInfo)type));
      }
 else {
        try {
          Class fieldElementClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
          mapping.setFieldElementClass(fieldElementClass);
        }
 catch (        ClassNotFoundException e) {
        }
      }
      if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
      }
 else       if (nextClassName.equals(""String_Node_Str"")) {
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
      }
      desc.addMapping(mapping);
    }
 else {
      if (nextElement.getJavaTypeName().equals(OBJECT_CLASS_NAME)) {
        XMLCompositeObjectMapping mapping=new XMLCompositeObjectMapping();
        mapping.setAttributeName(""String_Node_Str"");
        mapping.setSetMethodName(""String_Node_Str"");
        mapping.setGetMethodName(""String_Node_Str"");
        mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
        mapping.setXPath(""String_Node_Str"");
        ((XMLField)mapping.getField()).setIsTypedTextField(true);
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
        desc.addMapping(mapping);
      }
 else       if (areEquals(nextElement.getJavaType(),ClassConstants.ABYTE) || areEquals(nextElement.getJavaType(),ClassConstants.APBYTE) || areEquals(nextElement.getJavaType(),""String_Node_Str"")|| areEquals(nextElement.getJavaType(),""String_Node_Str"")|| areEquals(nextElement.getJavaType(),""String_Node_Str"")) {
        XMLBinaryDataMapping mapping=new XMLBinaryDataMapping();
        mapping.setAttributeName(""String_Node_Str"");
        mapping.setXPath(""String_Node_Str"");
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
        mapping.setSetMethodName(""String_Node_Str"");
        mapping.setGetMethodName(""String_Node_Str"");
        Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(attributeTypeName,getClass().getClassLoader());
        mapping.setAttributeClassification(attributeClassification);
        mapping.setShouldInlineBinaryData(false);
        if (nextElement.getTypeMappingInfo() != null) {
          mapping.setSwaRef(nextElement.isXmlAttachmentRef());
          mapping.setMimeType(nextElement.getXmlMimeType());
        }
        desc.addMapping(mapping);
      }
 else {
        XMLDirectMapping mapping=new XMLDirectMapping();
        mapping.setAttributeName(""String_Node_Str"");
        mapping.setXPath(""String_Node_Str"");
        mapping.setSetMethodName(""String_Node_Str"");
        mapping.setGetMethodName(""String_Node_Str"");
        if (nextElement.getDefaultValue() != null) {
          mapping.setNullValue(nextElement.getDefaultValue());
          mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
        }
        if (helper.isBuiltInJavaType(nextElement.getJavaType())) {
          Class attributeClassification=null;
          if (nextElement.getJavaType().isPrimitive()) {
            attributeClassification=XMLConversionManager.getDefaultManager().convertClassNameToClass(attributeTypeName);
          }
 else {
            attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(attributeTypeName,getClass().getClassLoader());
          }
          mapping.setAttributeClassification(attributeClassification);
        }
        IsSetNullPolicy nullPolicy=new IsSetNullPolicy(""String_Node_Str"",false,true,XMLNullRepresentationType.ABSENT_NODE);
        mapping.setNullPolicy(nullPolicy);
        if (type != null && type.isEnumerationType()) {
          mapping.setConverter(buildJAXBEnumTypeConverter(mapping,(EnumTypeInfo)type));
        }
        if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
          ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
        }
 else         if (nextClassName.equals(""String_Node_Str"")) {
          ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
        }
        if (nextElement.getJavaTypeAdapterClass() != null) {
          mapping.setConverter(new XMLJavaTypeConverter(nextElement.getJavaTypeAdapterClass()));
        }
        desc.addMapping(mapping);
      }
    }
    if (next != null) {
      NamespaceInfo info=getNamespaceInfoForURI(namespaceUri);
      if (info != null) {
        NamespaceResolver resolver=info.getNamespaceResolverForDescriptor();
        String prefix=resolver.resolveNamespaceURI(namespaceUri);
        desc.setNamespaceResolver(resolver);
        desc.setDefaultRootElement(""String_Node_Str"");
        desc.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
      }
 else {
        if (namespaceUri.equals(""String_Node_Str"")) {
          desc.setDefaultRootElement(next.getLocalPart());
        }
 else {
          NamespaceResolver resolver=new NamespaceResolver();
          String prefix=getPrefixForNamespace(namespaceUri,resolver,null);
          desc.setNamespaceResolver(resolver);
          desc.setDefaultRootElement(""String_Node_Str"");
          desc.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
        }
      }
    }
    project.addDescriptor(desc);
  }
  return generatedClass;
}"
66223,"/** 
 * INTERNAL: Process the indirection (aka fetch type)
 */
protected void processIndirection(ObjectReferenceMapping mapping){
  boolean usesIndirection=usesIndirection();
  if (usesIndirection && (!getProject().isWeavingEnabled()) && (!ClassConstants.PersistenceWeavedLazy_Class.isAssignableFrom(getJavaClass(getDescriptor().getJavaClass())))) {
    usesIndirection=false;
  }
  if (usesIndirection && usesPropertyAccess()) {
    mapping.setIndirectionPolicy(new WeavedObjectBasicIndirectionPolicy(getGetMethodName(),getSetMethodName(),true));
  }
 else   if (usesIndirection && usesFieldAccess()) {
    mapping.setIndirectionPolicy(new WeavedObjectBasicIndirectionPolicy(Helper.getWeavedGetMethodName(mapping.getAttributeName()),Helper.getWeavedSetMethodName(mapping.getAttributeName()),false));
  }
 else {
    mapping.setUsesIndirection(usesIndirection);
  }
}","/** 
 * INTERNAL: Process the indirection (aka fetch type)
 */
protected void processIndirection(ObjectReferenceMapping mapping){
  boolean usesIndirection=usesIndirection();
  if (usesIndirection && (!getProject().isWeavingEnabled()) && (!getDescriptor().getJavaClass().extendsInterface(ClassConstants.PersistenceWeavedLazy_Class))) {
    usesIndirection=false;
  }
  if (usesIndirection && usesPropertyAccess()) {
    mapping.setIndirectionPolicy(new WeavedObjectBasicIndirectionPolicy(getGetMethodName(),getSetMethodName(),true));
  }
 else   if (usesIndirection && usesFieldAccess()) {
    mapping.setIndirectionPolicy(new WeavedObjectBasicIndirectionPolicy(Helper.getWeavedGetMethodName(mapping.getAttributeName()),Helper.getWeavedSetMethodName(mapping.getAttributeName()),false));
  }
 else {
    mapping.setUsesIndirection(usesIndirection);
  }
}"
66224,"public XMLEventReaderReader(){
  this.namespaces=new HashMap<Integer,List<Namespace>>();
}","public XMLEventReaderReader(XMLUnmarshaller xmlUnmarshaller){
  super(xmlUnmarshaller);
  this.namespaces=new HashMap<Integer,List<Namespace>>();
}"
66225,"@Override public void setContentHandler(ContentHandler contentHandler){
  this.contentHandler=contentHandler;
}","@Override public void setContentHandler(ContentHandler contentHandler){
  if (null == validatorHandler) {
    this.contentHandler=contentHandler;
  }
 else {
    validatorHandler.setContentHandler(contentHandler);
    this.contentHandler=validatorHandler;
  }
}"
66226,"@Override public void setErrorHandler(ErrorHandler errorHandler){
  this.errorHandler=errorHandler;
}","@Override public void setErrorHandler(ErrorHandler errorHandler){
  this.errorHandler=errorHandler;
  if (null != validatorHandler) {
    validatorHandler.setErrorHandler(errorHandler);
  }
}"
66227,"public XMLStreamReaderReader(){
  unmarshalNamespaceContext=new UnmarshalNamespaceContext();
  indexedAttributeList=new IndexedAttributeList();
}","public XMLStreamReaderReader(XMLUnmarshaller xmlUnmarshaller){
  super(xmlUnmarshaller);
  unmarshalNamespaceContext=new UnmarshalNamespaceContext();
  indexedAttributeList=new IndexedAttributeList();
}"
66228,"public XMLBinder(XMLContext context){
  marshaller=context.createMarshaller();
  unmarshaller=context.createUnmarshaller();
  saxUnmarshaller=new SAXUnmarshaller(unmarshaller,null);
  this.context=context;
  documentPreservationPolicy=new XMLBinderPolicy();
  reader=new DOMReader();
}","public XMLBinder(XMLContext context){
  marshaller=context.createMarshaller();
  unmarshaller=context.createUnmarshaller();
  saxUnmarshaller=new SAXUnmarshaller(unmarshaller,null);
  this.context=context;
  documentPreservationPolicy=new XMLBinderPolicy();
  reader=new DOMReader(unmarshaller);
}"
66229,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(XmlNullPolicyTestCases.class);
  suite.addTestSuite(XmlAccessMethodsTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlPropertyTestCases.class);
  suite.addTestSuite(XmlTransformationTestCases.class);
  suite.addTestSuite(XmlTransformationMethodTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmldiscriminator.XmlDiscriminatorTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmljoinnode.XmlJoinNodeTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(XmlNullPolicyTestCases.class);
  suite.addTestSuite(XmlAccessMethodsTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlPropertyTestCases.class);
  suite.addTestSuite(XmlTransformationTestCases.class);
  suite.addTestSuite(XmlTransformationMethodTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmldiscriminator.XmlDiscriminatorTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmljoinnode.XmlJoinNodeTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  return suite;
}"
66230,"public URL getURL(){
  if (null == loader) {
    return Thread.currentThread().getContextClassLoader().getResource(this.getResource());
  }
  return loader.getResource(this.getResource());
}","public URL getURL(){
  try {
    if (null == loader) {
      return Thread.currentThread().getContextClassLoader().getResource(this.getResource());
    }
    return loader.getResource(this.getResource());
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorResolvingXMLSchema(e);
  }
}"
66231,"/** 
 * Perform any final generation and/or validation operations on TypeInfo properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.isTransient()) {
      continue;
    }
    if (!jClass.isInterface() && !tInfo.isEnumerationType()) {
      if (tInfo.getFactoryMethodName() == null && tInfo.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=jClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          if (tInfo.isSetXmlJavaTypeAdapter()) {
            tInfo.setTransient(true);
          }
 else {
            throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(jClass.getName());
          }
        }
      }
    }
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    for (    Property property : tInfo.getPropertyList()) {
      JavaClass typeClass=property.getActualType();
      TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
      if (targetInfo != null && targetInfo.isTransient()) {
        throw JAXBException.invalidReferenceToTransientClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
      }
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isXmlIdRef()) {
        if (targetInfo == null && !typeClass.getQualifiedName().equals(""String_Node_Str"")) {
          throw JAXBException.invalidIDREFClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo != null && targetInfo.getIDProperty() == null) {
          throw JAXBException.invalidIdRef(property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny() && tInfo.isSetAnyElementPropertyName() && !(tInfo.getAnyElementPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),tInfo.getAnyElementPropertyName(),jClass.getName());
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!isCollectionType(property) && !property.getType().isArray()) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isChoice()) {
        processChoiceProperty(property,tInfo,jClass,property.getActualType());
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
      if (property.isXmlTransformation()) {
        processXmlTransformationProperty(property);
      }
      if (property.isSetXmlJoinNodes()) {
        if (targetInfo == null) {
          throw JAXBException.invalidXmlJoinNodeReferencedClass(property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo.getIDProperty() == null && targetInfo.getXmlKeyProperties() == null) {
          throw JAXBException.noKeyOrIDPropertyOnJoinTarget(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        for (        org.eclipse.persistence.jaxb.xmlmodel.XmlJoinNodes.XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
          String refXPath=xmlJoinNode.getReferencedXmlPath();
          if (targetInfo.getIDProperty() != null && refXPath.equals(targetInfo.getIDProperty().getXmlPath())) {
            continue;
          }
          boolean matched=false;
          for (          Property xmlkeyProperty : targetInfo.getXmlKeyProperties()) {
            if (refXPath.equals(xmlkeyProperty.getXmlPath())) {
              matched=true;
              break;
            }
          }
          if (!matched) {
            throw JAXBException.invalidReferencedXmlPathOnJoin(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName(),refXPath);
          }
        }
      }
    }
  }
}","/** 
 * Perform any final generation and/or validation operations on TypeInfo properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.isTransient()) {
      continue;
    }
    if (!jClass.isInterface() && !tInfo.isEnumerationType()) {
      if (tInfo.getFactoryMethodName() == null && tInfo.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=jClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          if (tInfo.isSetXmlJavaTypeAdapter()) {
            tInfo.setTransient(true);
          }
 else {
            throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(jClass.getName());
          }
        }
      }
    }
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    for (    Property property : tInfo.getPropertyList()) {
      JavaClass typeClass=property.getActualType();
      TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
      if (targetInfo != null && targetInfo.isTransient()) {
        throw JAXBException.invalidReferenceToTransientClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
      }
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isXmlIdRef()) {
        if (targetInfo == null && !typeClass.getQualifiedName().equals(""String_Node_Str"")) {
          throw JAXBException.invalidIDREFClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo != null && targetInfo.getIDProperty() == null) {
          throw JAXBException.invalidIdRef(property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny() && tInfo.isSetAnyElementPropertyName() && !(tInfo.getAnyElementPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),tInfo.getAnyElementPropertyName(),jClass.getName());
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!isCollectionType(property) && !property.getType().isArray()) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isChoice()) {
        processChoiceProperty(property,tInfo,jClass,property.getActualType());
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
      if (property.isXmlTransformation()) {
        processXmlTransformationProperty(property);
      }
      if (property.isSetXmlJoinNodes()) {
        if (targetInfo == null) {
          throw JAXBException.invalidXmlJoinNodeReferencedClass(property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo.getIDProperty() == null && targetInfo.getXmlKeyProperties() == null) {
          throw JAXBException.noKeyOrIDPropertyOnJoinTarget(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        for (        org.eclipse.persistence.jaxb.xmlmodel.XmlJoinNodes.XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
          String refXPath=xmlJoinNode.getReferencedXmlPath();
          if (targetInfo.getIDProperty() != null && refXPath.equals(targetInfo.getIDProperty().getXmlPath())) {
            continue;
          }
          boolean matched=false;
          if (targetInfo.getXmlKeyProperties() != null) {
            for (            Property xmlkeyProperty : targetInfo.getXmlKeyProperties()) {
              if (refXPath.equals(xmlkeyProperty.getXmlPath())) {
                matched=true;
                break;
              }
            }
          }
          if (!matched) {
            throw JAXBException.invalidReferencedXmlPathOnJoin(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName(),refXPath);
          }
        }
      }
    }
  }
}"
66232,"/** 
 * INTERNAL: This method will return the MapKeyLookupResult instance to be used to  store/retrieve the global helper context for a given application. OC4J classLoader levels:  0 - APP.web (servlet/jsp) or APP.wrapper (ejb) 1 - APP.root (parent for helperContext) 2 - default.root 3 - system.root 4 - oc4j.10.1.3 (remote EJB) or org.eclipse.persistence:11.1.1.0.0 5 - api:1.4.0 6 - jre.extension:0.0.0 7 - jre.bootstrap:1.5.0_07 (with various J2SE versions)
 * @return MapKeyLookupResult wrapping the application classloader for OC4J,the application name for WebLogic and WebSphere, the archive file  name for JBoss - if available; otherwise a MapKeyLookupResult  wrapping Thread.currentThread().getContextClassLoader()
 */
private static MapKeyLookupResult getContextMapKey(ClassLoader classLoader,String classLoaderName){
  if (classLoaderName.startsWith(OC4J_CLASSLOADER_NAME)) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
    return new MapKeyLookupResult(classLoader);
  }
  if (classLoaderName.contains(WLS_CLASSLOADER_NAME)) {
    Object executeThread=getExecuteThread();
    if (executeThread != null) {
      try {
        Method getMethod=PrivilegedAccessHelper.getPublicMethod(executeThread.getClass(),WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_PARAMETER_TYPES,false);
        Object appName=PrivilegedAccessHelper.invokeMethod(getMethod,executeThread);
        if (appName != null) {
          return new MapKeyLookupResult(appName.toString(),classLoader);
        }
      }
 catch (      Exception e) {
        throw SDOException.errorInvokingWLSMethodReflectively(WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_EXECUTE_THREAD,e);
      }
    }
    return new MapKeyLookupResult(classLoader);
  }
  if (classLoaderName.contains(WAS_CLASSLOADER_NAME)) {
    return getContextMapKeyForWAS(classLoader);
  }
  if (classLoaderName.contains(JBOSS_CLASSLOADER_NAME)) {
    return getContextMapKeyForJBoss(classLoader);
  }
  return new MapKeyLookupResult(classLoader);
}","/** 
 * INTERNAL: This method will return the MapKeyLookupResult instance to be used to  store/retrieve the global helper context for a given application. OC4J classLoader levels:  0 - APP.web (servlet/jsp) or APP.wrapper (ejb) 1 - APP.root (parent for helperContext) 2 - default.root 3 - system.root 4 - oc4j.10.1.3 (remote EJB) or org.eclipse.persistence:11.1.1.0.0 5 - api:1.4.0 6 - jre.extension:0.0.0 7 - jre.bootstrap:1.5.0_07 (with various J2SE versions)
 * @return MapKeyLookupResult wrapping the application classloader for OC4J,the application name for WebLogic and WebSphere, the archive file  name for JBoss - if available; otherwise a MapKeyLookupResult  wrapping Thread.currentThread().getContextClassLoader()
 */
private static MapKeyLookupResult getContextMapKey(ClassLoader classLoader,String classLoaderName){
  if (classLoaderName.startsWith(OC4J_CLASSLOADER_NAME)) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
    return new MapKeyLookupResult(classLoader);
  }
  if (classLoaderName.contains(WLS_CLASSLOADER_NAME)) {
    Object executeThread=getExecuteThread();
    if (executeThread != null) {
      try {
        Method getMethod=PrivilegedAccessHelper.getPublicMethod(executeThread.getClass(),WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_PARAMETER_TYPES,false);
        Object appName=PrivilegedAccessHelper.invokeMethod(getMethod,executeThread);
        if (appName == null && appResolver != null) {
          appName=appResolver.getApplicationName();
        }
        if (appName != null) {
          return new MapKeyLookupResult(appName.toString(),classLoader);
        }
      }
 catch (      Exception e) {
        throw SDOException.errorInvokingWLSMethodReflectively(WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_EXECUTE_THREAD,e);
      }
    }
    return new MapKeyLookupResult(classLoader);
  }
  if (classLoaderName.contains(WAS_CLASSLOADER_NAME)) {
    return getContextMapKeyForWAS(classLoader);
  }
  if (classLoaderName.contains(JBOSS_CLASSLOADER_NAME)) {
    return getContextMapKeyForJBoss(classLoader);
  }
  return new MapKeyLookupResult(classLoader);
}"
66233,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderWChangeSummaryTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveImportsDefaultNamespaceTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithImportsTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveImportsElementOrderTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveIDRefTestCases.class));
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderComplexTestCases.class));
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderComplexDefaultNSTestCases.class));
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveSimpleAttributeTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveSimpleElementTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveSchemaTypesTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveOpenContentTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveMimeTypeOnXSDTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveMimeTypeOnPropertyTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveMimeTypeOnXSDManyTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveMimeTypeOnPropertyManyTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveBase64AttachmentTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveDataHandlerTestCases.class));
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderWithAnnotations.class));
  suite.addTest(new TestSuite(LoadAndSaveOrderBookingTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveXMLEncodingAndVersionTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithDataObjectDataTypeTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveValuePropTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithDefaultsTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveInheritanceBug6043501TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNamespacesBugTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveBug6130541TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveAttributeGroupTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveGroupTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithTypeBug6522867TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNillableOptionalNodeNullPolicyTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNillableIsSetNodeNullPolicyTrueTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNillableIsSetNodeNullPolicyFalseTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.substitutiongroups.SingleValueBaseTypeTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.substitutiongroups.SingleValueNonBaseTypeTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.substitutiongroups.CollectionValueTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveImportsWithInheritanceTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.LoadAndSaveWithReadOnlyTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.nillable.ListPropertyNillableElementTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.mixed.LoadAndSaveMixedContentTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.staticclasses.LoadAndSaveStaticClassesTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.LoadAndSaveIncludeWithExtensionTestCases.class));
  suite.addTestSuite(GlobalAttributeTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(LoadAndSaveValuePropTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithDefaultsTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveInheritanceBug6043501TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNamespacesBugTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveBug6130541TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveAttributeGroupTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveGroupTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithTypeBug6522867TestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.LoadAndSaveWithReadOnlyTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.nillable.ListPropertyNillableElementTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.mixed.LoadAndSaveMixedContentTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.staticclasses.LoadAndSaveStaticClassesTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.LoadAndSaveIncludeWithExtensionTestCases.class));
  suite.addTestSuite(GlobalAttributeTestCases.class);
  return suite;
}"
66234,"/** 
 * Convert the specified value to an   {@link Type#getInstanceClass() instance} of the specified property's {@link Property#getType() type}. The specified value must be a List if the property is  {@link Property#isMany() many valued}. In this case, all the values in the List are converted.
 * @param property the target {@link Type#isDataType() data type} property.
 * @param value the value or List of values to convert
 * @return a converted value or list of converted values
 * @throws IllegalArgumentException if the value could not be converted
 * @see #convert(Type,Object)
 */
public Object convert(Property property,Object value){
  if (null == property) {
    throw new IllegalArgumentException(SDOException.conversionError(null));
  }
  Type convertType=property.getType();
  if (property.isMany()) {
    if (value == null) {
      return null;
    }
 else     if (!(value instanceof List)) {
      throw new IllegalArgumentException(SDOException.conversionError(null));
    }
 else {
      List theList=(List)value;
      Object nextItem=null;
      for (int i=0; i < theList.size(); i++) {
        nextItem=theList.get(i);
        theList.set(i,convert(convertType,nextItem));
      }
      return theList;
    }
  }
 else {
    return convert(convertType,value);
  }
}","/** 
 * Convert the specified value to an   {@link Type#getInstanceClass() instance} of the specified property's {@link Property#getType() type}. The specified value must be a List if the property is  {@link Property#isMany() many valued}. In this case, all the values in the List are converted.
 * @param property the target {@link Type#isDataType() data type} property.
 * @param value the value or List of values to convert
 * @return a converted value or list of converted values
 * @throws IllegalArgumentException if the value could not be converted
 * @see #convert(Type,Object)
 */
public Object convert(Property property,Object value){
  if (null == property) {
    throw new IllegalArgumentException(SDOException.conversionError(null));
  }
  try {
    Type convertType=property.getType();
    if (property.isMany()) {
      if (value == null) {
        return null;
      }
 else       if (!(value instanceof List)) {
        throw new IllegalArgumentException(SDOException.conversionError(null));
      }
 else {
        List theList=(List)value;
        Object nextItem=null;
        for (int i=0; i < theList.size(); i++) {
          nextItem=theList.get(i);
          theList.set(i,convert(convertType,nextItem));
        }
        return theList;
      }
    }
 else {
      return convert(convertType,value);
    }
  }
 catch (  ConversionException e) {
    throw SDOException.invalidPropertyValue(property.getName(),property.getType().getURI() + '#' + property.getType().getName(),value.getClass().getName(),value.toString(),e);
  }
}"
66235,"public void testSetRollbackOnly(){
  EntityManager em=createEntityManager(""String_Node_Str"");
  Employee emp=null;
  Employee emp2=null;
  beginTransaction(em);
  try {
    emp=new Employee();
    emp.setFirstName(""String_Node_Str"");
    emp.setLastName(""String_Node_Str"");
    em.persist(emp);
    emp2=new Employee();
    emp2.setFirstName(""String_Node_Str"");
    emp2.setLastName(""String_Node_Str"");
    em.persist(emp2);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  clearCache(""String_Node_Str"");
  em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  List result=em.createQuery(""String_Node_Str"" + emp.getId() + ""String_Node_Str""+ emp2.getId()).getResultList();
  emp=(Employee)result.get(0);
  emp.toString();
  emp2=(Employee)result.get(1);
  String newName=""String_Node_Str"" + System.currentTimeMillis();
  emp2.setFirstName(newName);
  em.flush();
  emp2.setLastName(""String_Node_Str"");
  emp2.setVersion(0);
  try {
    em.flush();
  }
 catch (  Exception ex) {
    em.clear();
    try {
      String eName=(String)em.createQuery(""String_Node_Str"" + emp2.getId()).getSingleResult();
      assertTrue(""String_Node_Str"",eName.equals(newName));
    }
 catch (    Exception ignore) {
    }
  }
  try {
    if (isOnServer()) {
      assertTrue(""String_Node_Str"",!isTransactionActive(em));
    }
 else {
      assertTrue(""String_Node_Str"",em.getTransaction().getRollbackOnly());
    }
  }
  finally {
    try {
      commitTransaction(em);
    }
 catch (    RollbackException ex) {
      return;
    }
catch (    RuntimeException ex) {
      if (ex.getCause() instanceof javax.transaction.RollbackException) {
        return;
      }
      if (ex.getCause() instanceof RollbackException) {
        return;
      }
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
  }
  fail(""String_Node_Str"");
}","public void testSetRollbackOnly(){
  EntityManager em=createEntityManager(""String_Node_Str"");
  Employee emp=null;
  Employee emp2=null;
  beginTransaction(em);
  try {
    emp=new Employee();
    emp.setFirstName(""String_Node_Str"");
    emp.setLastName(""String_Node_Str"");
    em.persist(emp);
    emp2=new Employee();
    emp2.setFirstName(""String_Node_Str"");
    emp2.setLastName(""String_Node_Str"");
    em.persist(emp2);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  clearCache(""String_Node_Str"");
  em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  List result=em.createQuery(""String_Node_Str"" + emp.getId() + ""String_Node_Str""+ emp2.getId()).getResultList();
  emp=(Employee)result.get(0);
  emp.toString();
  emp2=(Employee)result.get(1);
  String newName=""String_Node_Str"" + System.currentTimeMillis();
  emp2.setFirstName(newName);
  em.flush();
  emp2.setLastName(""String_Node_Str"");
  emp2.setVersion(0);
  try {
    em.flush();
  }
 catch (  Exception ex) {
    if (!isOnServer()) {
      em.clear();
      try {
        String eName=(String)em.createQuery(""String_Node_Str"" + emp2.getId()).getSingleResult();
        assertTrue(""String_Node_Str"",eName.equals(newName));
      }
 catch (      Exception ignore) {
      }
    }
  }
  try {
    if (isOnServer()) {
      assertTrue(""String_Node_Str"",!isTransactionActive(em));
    }
 else {
      assertTrue(""String_Node_Str"",em.getTransaction().getRollbackOnly());
    }
  }
  finally {
    try {
      commitTransaction(em);
    }
 catch (    RollbackException ex) {
      return;
    }
catch (    RuntimeException ex) {
      if (ex.getCause() instanceof javax.transaction.RollbackException) {
        return;
      }
      if (ex.getCause() instanceof RollbackException) {
        return;
      }
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
  }
  fail(""String_Node_Str"");
}"
66236,"/** 
 * ADVANCED: Remove the HelperContext for the application associated with a given key, if it exists in the map.
 */
private static void resetHelperContext(String key){
  helperContexts.remove(key);
  ClassLoader appLoader=appNameToClassLoaderMap.get(key);
  if (appLoader != null) {
    helperContexts.remove(appLoader);
  }
  appNameToClassLoaderMap.remove(key);
}","/** 
 * ADVANCED: Remove the HelperContext for the application associated with a given key, if it exists in the map.
 */
private static void resetHelperContext(String key){
  helperContexts.remove(key);
  ClassLoader appLoader=appNameToClassLoaderMap.get(key);
  if (appLoader != null) {
    helperContexts.remove(appLoader);
  }
  appNameToClassLoaderMap.remove(key);
  aliasMap.remove(key);
}"
66237,"/** 
 * Replaces the provided helper context in the map of identifiers to helper contexts for this application. ctx.getIdentifier() will be used to obtain identifier 
 */
public static void putHelperContext(HelperContext ctx){
  String identifier=((SDOHelperContext)ctx).getIdentifier();
  if (GLOBAL_HELPER_IDENTIFIER.equals(identifier)) {
    return;
  }
  getContextMap().put(identifier,ctx);
}","/** 
 * Replaces the provided  helper context in the map of identifiers to  helper contexts for this application. ctx.getIdentifier()  will be  used to obtain the identifier value. If identifier is a key in the  the alias Map, i.e. was previously set as alias, the corresponding  entry will be removed from the alias Map.
 * @param ctx the HelperContext to be added to the context Map forthe current application
 */
public static void putHelperContext(HelperContext ctx){
  String identifier=((SDOHelperContext)ctx).getIdentifier();
  if (GLOBAL_HELPER_IDENTIFIER.equals(identifier)) {
    return;
  }
  getContextMap().put(identifier,ctx);
  getAliasMap().remove(identifier);
}"
66238,"public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> propertyMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if ((next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 3) || (next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 2)) {
      int modifiers=next.getModifiers();
      if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
        propertyMethods.add(next);
      }
    }
 else     if (next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 3 && next.getParameterTypes().length == 1) {
      int modifiers=next.getModifiers();
      if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
        propertyMethods.add(next);
      }
    }
  }
  ArrayList<String> propertyNames=new ArrayList<String>();
  for (int i=0; i < propertyMethods.size(); i++) {
    boolean isPropertyTransient=false;
    JavaMethod nextMethod=propertyMethods.get(i);
    String propertyName=""String_Node_Str"";
    JavaMethod getMethod;
    JavaMethod setMethod;
    JavaMethod propertyMethod=null;
    if (!nextMethod.getName().startsWith(""String_Node_Str"")) {
      if (nextMethod.getName().startsWith(""String_Node_Str"")) {
        propertyName=nextMethod.getName().substring(3);
      }
 else       if (nextMethod.getName().startsWith(""String_Node_Str"")) {
        propertyName=nextMethod.getName().substring(2);
      }
      getMethod=nextMethod;
      String setMethodName=""String_Node_Str"" + propertyName;
      propertyName=Introspector.decapitalize(propertyName);
      JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
      setMethod=cls.getDeclaredMethod(setMethodName,paramTypes);
      if (setMethod != null && !setMethod.getAnnotations().isEmpty()) {
        if (!helper.isAnnotationPresent(setMethod,XmlTransient.class)) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
 else {
        if (!helper.isAnnotationPresent(getMethod,XmlTransient.class)) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
    }
 else {
      propertyName=nextMethod.getName().substring(3);
      setMethod=nextMethod;
      String getMethodName=""String_Node_Str"" + propertyName;
      getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      if (getMethod == null) {
        getMethodName=""String_Node_Str"" + propertyName;
        getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      }
      if (getMethod != null && !getMethod.getAnnotations().isEmpty()) {
        if (!helper.isAnnotationPresent(getMethod,XmlTransient.class)) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
 else {
        if (!helper.isAnnotationPresent(setMethod,XmlTransient.class)) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
      propertyName=Introspector.decapitalize(propertyName);
    }
    JavaClass ptype=null;
    if (getMethod != null) {
      ptype=(JavaClass)getMethod.getReturnType();
    }
 else {
      ptype=setMethod.getParameterTypes()[0];
    }
    if (!propertyNames.contains(propertyName)) {
      propertyNames.add(propertyName);
      Property property=buildNewProperty(info,cls,propertyMethod,propertyName,ptype);
      property.setTransient(isPropertyTransient);
      if (getMethod != null) {
        property.setOriginalGetMethodName(getMethod.getName());
        if (property.getGetMethodName() == null) {
          property.setGetMethodName(getMethod.getName());
        }
      }
      if (setMethod != null) {
        property.setOriginalSetMethodName(setMethod.getName());
        if (property.getSetMethodName() == null) {
          property.setSetMethodName(setMethod.getName());
        }
      }
      property.setMethodProperty(true);
      if (!helper.isAnnotationPresent(property.getElement(),XmlTransient.class)) {
        properties.add(property);
      }
 else {
        List<String> propOrderList=Arrays.asList(info.getPropOrder());
        if (propOrderList.contains(propertyName)) {
          throw JAXBException.transientInProporder(propertyName);
        }
        property.setTransient(true);
      }
    }
  }
  Collections.sort(properties,new PropertyComparitor());
  return properties;
}","public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> propertyMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if (((next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 3) || (next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 2)) && next.getParameterTypes().length == 0 && next.getReturnType() != helper.getJavaClass(java.lang.Void.class)) {
      int modifiers=next.getModifiers();
      if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
        propertyMethods.add(next);
      }
    }
 else     if (next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 3 && next.getParameterTypes().length == 1) {
      int modifiers=next.getModifiers();
      if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
        propertyMethods.add(next);
      }
    }
  }
  ArrayList<String> propertyNames=new ArrayList<String>();
  for (int i=0; i < propertyMethods.size(); i++) {
    boolean isPropertyTransient=false;
    JavaMethod nextMethod=propertyMethods.get(i);
    String propertyName=""String_Node_Str"";
    JavaMethod getMethod;
    JavaMethod setMethod;
    JavaMethod propertyMethod=null;
    if (!nextMethod.getName().startsWith(""String_Node_Str"")) {
      if (nextMethod.getName().startsWith(""String_Node_Str"")) {
        propertyName=nextMethod.getName().substring(3);
      }
 else       if (nextMethod.getName().startsWith(""String_Node_Str"")) {
        propertyName=nextMethod.getName().substring(2);
      }
      getMethod=nextMethod;
      String setMethodName=""String_Node_Str"" + propertyName;
      propertyName=Introspector.decapitalize(propertyName);
      JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
      setMethod=cls.getDeclaredMethod(setMethodName,paramTypes);
      if (setMethod != null && !setMethod.getAnnotations().isEmpty()) {
        if (!helper.isAnnotationPresent(setMethod,XmlTransient.class)) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
 else {
        if (!helper.isAnnotationPresent(getMethod,XmlTransient.class)) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
    }
 else {
      propertyName=nextMethod.getName().substring(3);
      setMethod=nextMethod;
      String getMethodName=""String_Node_Str"" + propertyName;
      getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      if (getMethod == null) {
        getMethodName=""String_Node_Str"" + propertyName;
        getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      }
      if (getMethod != null && !getMethod.getAnnotations().isEmpty()) {
        if (!helper.isAnnotationPresent(getMethod,XmlTransient.class)) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
 else {
        if (!helper.isAnnotationPresent(setMethod,XmlTransient.class)) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
      propertyName=Introspector.decapitalize(propertyName);
    }
    JavaClass ptype=null;
    if (getMethod != null) {
      ptype=(JavaClass)getMethod.getReturnType();
    }
 else {
      ptype=setMethod.getParameterTypes()[0];
    }
    if (!propertyNames.contains(propertyName)) {
      propertyNames.add(propertyName);
      Property property=buildNewProperty(info,cls,propertyMethod,propertyName,ptype);
      property.setTransient(isPropertyTransient);
      if (getMethod != null) {
        property.setOriginalGetMethodName(getMethod.getName());
        if (property.getGetMethodName() == null) {
          property.setGetMethodName(getMethod.getName());
        }
      }
      if (setMethod != null) {
        property.setOriginalSetMethodName(setMethod.getName());
        if (property.getSetMethodName() == null) {
          property.setSetMethodName(setMethod.getName());
        }
      }
      property.setMethodProperty(true);
      if (!helper.isAnnotationPresent(property.getElement(),XmlTransient.class)) {
        properties.add(property);
      }
 else {
        List<String> propOrderList=Arrays.asList(info.getPropOrder());
        if (propOrderList.contains(propertyName)) {
          throw JAXBException.transientInProporder(propertyName);
        }
        property.setTransient(true);
      }
    }
  }
  Collections.sort(properties,new PropertyComparitor());
  return properties;
}"
66239,"/** 
 * Return true if a HelperContext corresponding to this identifier or alias already exists, else false.  If identifer is an alias, the corresponding  value in the alias Map will be used as the identifier for the lookup.
 * @param identifier the alias or identifier used to lookup a helper context
 * @return true if an entry exists in the helper context map for identifier (or the associated identifier value if identifier is an alias), false otherwise. 
 */
public static boolean hasHelperContext(String identifier){
  String id=identifier;
  Object appKey=getMapKey();
  ConcurrentMap<String,String> aliasEntries=getAliasMap();
  if (aliasEntries.containsKey(identifier)) {
    id=aliasEntries.get(identifier);
  }
  WeakHashMap<String,WeakReference<HelperContext>> userSetMap=userSetHelperContexts.get(appKey);
  if (userSetMap != null && userSetMap.containsKey(id)) {
    return true;
  }
  ConcurrentHashMap<String,HelperContext> contextMap=helperContexts.get(appKey);
  return (contextMap != null && contextMap.containsKey(id));
}","/** 
 * Return true if a HelperContext corresponding to this identifier or alias already exists, else false.  If identifer is an alias, the corresponding  value in the alias Map will be used as the identifier for the lookup.
 * @param identifier the alias or identifier used to lookup a helper context
 * @return true if an entry exists in the helper context map for identifier (or the associated identifier value if identifier is an alias), false otherwise. 
 */
public static boolean hasHelperContext(String identifier){
  String id=identifier;
  Object appKey=getMapKey();
  ConcurrentMap<String,String> aliasEntries=getAliasMap(appKey);
  if (aliasEntries.containsKey(identifier)) {
    id=aliasEntries.get(identifier);
  }
  WeakHashMap<String,WeakReference<HelperContext>> userSetMap=userSetHelperContexts.get(appKey);
  if (userSetMap != null && userSetMap.containsKey(id)) {
    return true;
  }
  ConcurrentHashMap<String,HelperContext> contextMap=helperContexts.get(appKey);
  return (contextMap != null && contextMap.containsKey(id));
}"
66240,"public void testSetRollbackOnly(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  Employee emp=null;
  Employee emp2=null;
  try {
    emp=new Employee();
    emp.setFirstName(""String_Node_Str"");
    emp.setLastName(""String_Node_Str"");
    em.persist(emp);
    emp2=new Employee();
    emp2.setFirstName(""String_Node_Str"");
    emp2.setLastName(""String_Node_Str"");
    em.persist(emp2);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  clearCache();
  em=createEntityManager();
  beginTransaction(em);
  List result=em.createQuery(""String_Node_Str"" + emp.getId() + ""String_Node_Str""+ emp2.getId()).getResultList();
  emp=(Employee)result.get(0);
  emp.toString();
  emp2=(Employee)result.get(1);
  String newName=""String_Node_Str"" + System.currentTimeMillis();
  emp2.setFirstName(newName);
  em.flush();
  emp2.setLastName(""String_Node_Str"");
  emp2.setVersion(0);
  try {
    em.flush();
  }
 catch (  Exception ex) {
    em.clear();
    try {
      String eName=(String)em.createQuery(""String_Node_Str"" + emp2.getId()).getSingleResult();
      assertTrue(""String_Node_Str"",eName.equals(newName));
    }
 catch (    Exception ignore) {
    }
  }
  try {
    if (isOnServer()) {
      assertTrue(""String_Node_Str"",!isTransactionActive(em));
    }
 else {
      assertTrue(""String_Node_Str"",em.getTransaction().getRollbackOnly());
    }
  }
  finally {
    try {
      commitTransaction(em);
    }
 catch (    RollbackException ex) {
      return;
    }
catch (    RuntimeException ex) {
      if (ex.getCause() instanceof javax.transaction.RollbackException) {
        return;
      }
      if (ex.getCause() instanceof javax.persistence.RollbackException) {
        return;
      }
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
  }
  fail(""String_Node_Str"");
}","public void testSetRollbackOnly(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  Employee emp=null;
  Employee emp2=null;
  try {
    emp=new Employee();
    emp.setFirstName(""String_Node_Str"");
    emp.setLastName(""String_Node_Str"");
    em.persist(emp);
    emp2=new Employee();
    emp2.setFirstName(""String_Node_Str"");
    emp2.setLastName(""String_Node_Str"");
    em.persist(emp2);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  clearCache();
  em=createEntityManager();
  beginTransaction(em);
  List result=em.createQuery(""String_Node_Str"" + emp.getId() + ""String_Node_Str""+ emp2.getId()).getResultList();
  emp=(Employee)result.get(0);
  emp.toString();
  emp2=(Employee)result.get(1);
  String newName=""String_Node_Str"" + System.currentTimeMillis();
  emp2.setFirstName(newName);
  em.flush();
  emp2.setLastName(""String_Node_Str"");
  emp2.setVersion(0);
  try {
    em.flush();
  }
 catch (  Exception ex) {
    if (!isOnServer()) {
      em.clear();
      try {
        String eName=(String)em.createQuery(""String_Node_Str"" + emp2.getId()).getSingleResult();
        assertTrue(""String_Node_Str"",eName.equals(newName));
      }
 catch (      Exception ignore) {
      }
    }
  }
  try {
    if (isOnServer()) {
      assertTrue(""String_Node_Str"",!isTransactionActive(em));
    }
 else {
      assertTrue(""String_Node_Str"",em.getTransaction().getRollbackOnly());
    }
  }
  finally {
    try {
      commitTransaction(em);
    }
 catch (    RollbackException ex) {
      return;
    }
catch (    RuntimeException ex) {
      if (ex.getCause() instanceof javax.transaction.RollbackException) {
        return;
      }
      if (ex.getCause() instanceof javax.persistence.RollbackException) {
        return;
      }
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
  }
  fail(""String_Node_Str"");
}"
66241,"protected void _addCurrentDateTest(){
  ExpressionBuilder builder=new ExpressionBuilder();
  Expression expression=builder.get(""String_Node_Str"").get(""String_Node_Str"").lessThan(builder.currentDate());
  ReadAllExpressionTest test=new ReadAllExpressionTest(Employee.class,12);
  test.setExpression(expression);
  test.setName(""String_Node_Str"");
  test.setDescription(""String_Node_Str"");
  test.addUnsupportedPlatform(DB2Platform.class);
  test.addUnsupportedPlatform(TimesTenPlatform.class);
  test.addUnsupportedPlatform(SymfowarePlatform.class);
  addTest(test);
}","protected void _addCurrentDateTest(){
  ExpressionBuilder builder=new ExpressionBuilder();
  Expression expression=builder.get(""String_Node_Str"").get(""String_Node_Str"").lessThan(builder.currentDateDate());
  ReadAllExpressionTest test=new ReadAllExpressionTest(Employee.class,12);
  test.setExpression(expression);
  test.setName(""String_Node_Str"");
  test.setDescription(""String_Node_Str"");
  test.addUnsupportedPlatform(DB2Platform.class);
  test.addUnsupportedPlatform(TimesTenPlatform.class);
  test.addUnsupportedPlatform(SymfowarePlatform.class);
  addTest(test);
}"
66242,"@Test public void testSimpleCascadeToDetached1() throws SQLException {
  final JPAEnvironment env=getEnvironment();
  final EntityManager em=env.getEntityManager();
  try {
    CascadingNode child=new CascadingNode(21,null);
    env.beginTransaction(em);
    em.persist(child);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    CascadingNode parent=new CascadingNode(22,null);
    em.persist(parent);
    parent.addChild(child);
    verify(em.contains(parent),""String_Node_Str"");
    verify(!em.contains(child),""String_Node_Str"");
    boolean exceptionThrown=false;
    try {
      env.commitTransactionAndClear(em);
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e) && !checkForSQLException(e)) {
        throw e;
      }
      exceptionThrown=true;
    }
    verify(exceptionThrown,""String_Node_Str"");
    verifyAbsenceFromDatabase(parent.getId());
    verifyExistenceOnDatabase(child.getId());
  }
  finally {
    closeEntityManager(em);
  }
}","@Test public void testSimpleCascadeToDetached1() throws SQLException {
  final JPAEnvironment env=getEnvironment();
  final EntityManager em=env.getEntityManager();
  try {
    CascadingNode child=new CascadingNode(21,null);
    env.beginTransaction(em);
    em.persist(child);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    CascadingNode parent=new CascadingNode(22,null);
    em.persist(parent);
    parent.addChild(child);
    verify(em.contains(parent),""String_Node_Str"");
    verify(!em.contains(child),""String_Node_Str"");
    boolean exceptionThrown=false;
    try {
      env.commitTransactionAndClear(em);
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e) && !checkForSQLException(e)) {
        throw e;
      }
      exceptionThrown=true;
    }
    verify(exceptionThrown,""String_Node_Str"");
  }
  finally {
    closeEntityManager(em);
  }
}"
66243,"@Test public void testSimpleCascadeDetached() throws SQLException {
  final JPAEnvironment env=getEnvironment();
  final EntityManager em=env.getEntityManager();
  try {
    CascadingNode parent=new CascadingNode(21,null);
    env.beginTransaction(em);
    em.persist(parent);
    env.commitTransactionAndClear(em);
    CascadingNode child=new CascadingNode(22,parent);
    child.setParent(null);
    env.beginTransaction(em);
    boolean persistFailed=false;
    boolean immediateException=false;
    try {
      em.persist(parent);
      verify(em.contains(parent),""String_Node_Str"");
      verify(em.contains(child),""String_Node_Str"");
    }
 catch (    IllegalArgumentException e) {
      persistFailed=true;
      immediateException=true;
    }
    if (!immediateException) {
      try {
        env.commitTransactionAndClear(em);
      }
 catch (      RuntimeException e) {
        if (!checkForPersistenceException(e)) {
          throw e;
        }
        persistFailed=true;
      }
    }
 else {
      env.rollbackTransactionAndClear(em);
    }
    verify(persistFailed,""String_Node_Str"");
    verifyExistenceOnDatabase(parent.getId());
    verifyAbsenceFromDatabase(child.getId());
    CascadingNode existing=new CascadingNode(23,null);
    parent=new CascadingNode(existing.getId(),null);
    child=new CascadingNode(24,parent);
    child.setParent(null);
    env.beginTransaction(em);
    em.persist(existing);
    persistFailed=false;
    immediateException=false;
    try {
      em.persist(parent);
      verify(em.contains(parent),""String_Node_Str"");
      verify(em.contains(child),""String_Node_Str"");
    }
 catch (    IllegalArgumentException e) {
      persistFailed=true;
      immediateException=true;
    }
    verify(em.contains(existing),""String_Node_Str"");
    if (!immediateException) {
      try {
        env.commitTransactionAndClear(em);
      }
 catch (      RuntimeException e) {
        if (!checkForPersistenceException(e)) {
          throw e;
        }
        persistFailed=true;
      }
    }
 else {
      env.rollbackTransactionAndClear(em);
    }
    verify(persistFailed,""String_Node_Str"");
    verifyAbsenceFromDatabase(existing.getId());
    verifyAbsenceFromDatabase(child.getId());
    existing=new CascadingNode(25,null);
    parent=new CascadingNode(existing.getId(),null);
    child=new CascadingNode(26,parent);
    child.setParent(null);
    env.beginTransaction(em);
    em.persist(existing);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    existing=em.find(CascadingNode.class,new Integer(existing.getId()));
    persistFailed=false;
    immediateException=false;
    try {
      em.persist(parent);
      verify(em.contains(parent),""String_Node_Str"");
      verify(em.contains(child),""String_Node_Str"");
    }
 catch (    IllegalArgumentException e) {
      persistFailed=true;
      immediateException=true;
    }
    verify(em.contains(existing),""String_Node_Str"");
    if (!immediateException) {
      try {
        env.commitTransactionAndClear(em);
      }
 catch (      RuntimeException e) {
        if (!checkForPersistenceException(e)) {
          throw e;
        }
        persistFailed=true;
      }
    }
 else {
      env.rollbackTransactionAndClear(em);
    }
    verify(persistFailed,""String_Node_Str"");
    verifyExistenceOnDatabase(existing.getId());
    verifyAbsenceFromDatabase(child.getId());
    existing=new CascadingNode(27,null);
    parent=new CascadingNode(existing.getId(),null);
    child=new CascadingNode(28,parent);
    child.setParent(null);
    env.beginTransaction(em);
    em.persist(existing);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    existing=em.find(CascadingNode.class,new Integer(existing.getId()));
    em.remove(existing);
    persistFailed=false;
    immediateException=false;
    try {
      em.persist(parent);
      verify(em.contains(parent),""String_Node_Str"");
      verify(em.contains(child),""String_Node_Str"");
    }
 catch (    IllegalArgumentException e) {
      persistFailed=true;
      immediateException=true;
    }
    if (!immediateException) {
      try {
        env.commitTransactionAndClear(em);
      }
 catch (      RuntimeException e) {
        if (!checkForPersistenceException(e)) {
          throw e;
        }
        persistFailed=true;
      }
    }
 else {
      env.rollbackTransactionAndClear(em);
    }
    verify(persistFailed,""String_Node_Str"");
    verifyExistenceOnDatabase(existing.getId());
    verifyAbsenceFromDatabase(child.getId());
  }
  finally {
    closeEntityManager(em);
  }
}","@Test public void testSimpleCascadeDetached() throws SQLException {
  final JPAEnvironment env=getEnvironment();
  final EntityManager em=env.getEntityManager();
  try {
    CascadingNode parent=new CascadingNode(21,null);
    env.beginTransaction(em);
    em.persist(parent);
    env.commitTransactionAndClear(em);
    CascadingNode child=new CascadingNode(22,parent);
    child.setParent(null);
    env.beginTransaction(em);
    boolean persistFailed=false;
    boolean immediateException=false;
    try {
      em.persist(parent);
      verify(em.contains(parent),""String_Node_Str"");
      verify(em.contains(child),""String_Node_Str"");
    }
 catch (    IllegalArgumentException e) {
      persistFailed=true;
      immediateException=true;
    }
    if (!immediateException) {
      try {
        env.commitTransactionAndClear(em);
      }
 catch (      RuntimeException e) {
        if (!checkForPersistenceException(e)) {
          throw e;
        }
        persistFailed=true;
      }
    }
 else {
      env.rollbackTransactionAndClear(em);
    }
    verify(persistFailed,""String_Node_Str"");
    CascadingNode existing=new CascadingNode(23,null);
    parent=new CascadingNode(existing.getId(),null);
    child=new CascadingNode(24,parent);
    child.setParent(null);
    env.beginTransaction(em);
    em.persist(existing);
    persistFailed=false;
    immediateException=false;
    try {
      em.persist(parent);
      verify(em.contains(parent),""String_Node_Str"");
      verify(em.contains(child),""String_Node_Str"");
    }
 catch (    IllegalArgumentException e) {
      persistFailed=true;
      immediateException=true;
    }
    verify(em.contains(existing),""String_Node_Str"");
    if (!immediateException) {
      try {
        env.commitTransactionAndClear(em);
      }
 catch (      RuntimeException e) {
        if (!checkForPersistenceException(e)) {
          throw e;
        }
        persistFailed=true;
      }
    }
 else {
      env.rollbackTransactionAndClear(em);
    }
    verify(persistFailed,""String_Node_Str"");
    existing=new CascadingNode(25,null);
    parent=new CascadingNode(existing.getId(),null);
    child=new CascadingNode(26,parent);
    child.setParent(null);
    env.beginTransaction(em);
    em.persist(existing);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    existing=em.find(CascadingNode.class,new Integer(existing.getId()));
    persistFailed=false;
    immediateException=false;
    try {
      em.persist(parent);
      verify(em.contains(parent),""String_Node_Str"");
      verify(em.contains(child),""String_Node_Str"");
    }
 catch (    IllegalArgumentException e) {
      persistFailed=true;
      immediateException=true;
    }
    verify(em.contains(existing),""String_Node_Str"");
    if (!immediateException) {
      try {
        env.commitTransactionAndClear(em);
      }
 catch (      RuntimeException e) {
        if (!checkForPersistenceException(e)) {
          throw e;
        }
        persistFailed=true;
      }
    }
 else {
      env.rollbackTransactionAndClear(em);
    }
    verify(persistFailed,""String_Node_Str"");
    existing=new CascadingNode(27,null);
    parent=new CascadingNode(existing.getId(),null);
    child=new CascadingNode(28,parent);
    child.setParent(null);
    env.beginTransaction(em);
    em.persist(existing);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    existing=em.find(CascadingNode.class,new Integer(existing.getId()));
    em.remove(existing);
    persistFailed=false;
    immediateException=false;
    try {
      em.persist(parent);
      verify(em.contains(parent),""String_Node_Str"");
      verify(em.contains(child),""String_Node_Str"");
    }
 catch (    IllegalArgumentException e) {
      persistFailed=true;
      immediateException=true;
    }
    if (!immediateException) {
      try {
        env.commitTransactionAndClear(em);
      }
 catch (      RuntimeException e) {
        if (!checkForPersistenceException(e)) {
          throw e;
        }
        persistFailed=true;
      }
    }
 else {
      env.rollbackTransactionAndClear(em);
    }
    verify(persistFailed,""String_Node_Str"");
  }
  finally {
    closeEntityManager(em);
  }
}"
66244,"private Property buildTransformationProperty(JavaHasAnnotations javaHasAnnotations,JavaClass cls){
  Property property=new Property(helper);
  org.eclipse.persistence.oxm.annotations.XmlTransformation transformationAnnotation=(org.eclipse.persistence.oxm.annotations.XmlTransformation)helper.getAnnotation(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlTransformation.class);
  XmlTransformation transformation=new XmlTransformation();
  transformation.setOptional(transformationAnnotation.optional());
  org.eclipse.persistence.oxm.annotations.XmlReadTransformer readTransformer=(org.eclipse.persistence.oxm.annotations.XmlReadTransformer)helper.getAnnotation(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlReadTransformer.class);
  if (readTransformer != null) {
    org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlReadTransformer xmlReadTransformer=new org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlReadTransformer();
    if (!(readTransformer.transformerClass() == AttributeTransformer.class)) {
      xmlReadTransformer.setTransformerClass(readTransformer.transformerClass().getName());
    }
 else     if (!(readTransformer.method().equals(""String_Node_Str""))) {
      xmlReadTransformer.setMethod(readTransformer.method());
    }
    transformation.setXmlReadTransformer(xmlReadTransformer);
  }
  org.eclipse.persistence.oxm.annotations.XmlWriteTransformer[] transformers=null;
  if (helper.isAnnotationPresent(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlWriteTransformer.class)) {
    org.eclipse.persistence.oxm.annotations.XmlWriteTransformer writeTransformer=(org.eclipse.persistence.oxm.annotations.XmlWriteTransformer)helper.getAnnotation(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlWriteTransformer.class);
    transformers=new org.eclipse.persistence.oxm.annotations.XmlWriteTransformer[]{writeTransformer};
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlWriteTransformers.class)) {
    XmlWriteTransformers writeTransformers=(XmlWriteTransformers)helper.getAnnotation(javaHasAnnotations,XmlWriteTransformers.class);
    transformers=writeTransformers.value();
  }
  if (transformers != null) {
    for (    org.eclipse.persistence.oxm.annotations.XmlWriteTransformer next : transformers) {
      org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlWriteTransformer xmlWriteTransformer=new org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlWriteTransformer();
      if (!(next.transformerClass() == FieldTransformer.class)) {
        xmlWriteTransformer.setTransformerClass(next.transformerClass().getName());
      }
 else       if (!(next.method().equals(""String_Node_Str""))) {
        xmlWriteTransformer.setMethod(next.method());
      }
      xmlWriteTransformer.setXmlPath(next.xpath());
      transformation.getXmlWriteTransformer().add(xmlWriteTransformer);
    }
  }
  property.setXmlTransformation(transformation);
  property.setIsXmlTransformation(true);
  return property;
}","private Property buildTransformationProperty(JavaHasAnnotations javaHasAnnotations,JavaClass cls){
  Property property=new Property(helper);
  org.eclipse.persistence.oxm.annotations.XmlTransformation transformationAnnotation=(org.eclipse.persistence.oxm.annotations.XmlTransformation)helper.getAnnotation(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlTransformation.class);
  XmlTransformation transformation=new XmlTransformation();
  if (transformationAnnotation != null) {
    transformation.setOptional(transformationAnnotation.optional());
  }
  org.eclipse.persistence.oxm.annotations.XmlReadTransformer readTransformer=(org.eclipse.persistence.oxm.annotations.XmlReadTransformer)helper.getAnnotation(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlReadTransformer.class);
  if (readTransformer != null) {
    org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlReadTransformer xmlReadTransformer=new org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlReadTransformer();
    if (!(readTransformer.transformerClass() == AttributeTransformer.class)) {
      xmlReadTransformer.setTransformerClass(readTransformer.transformerClass().getName());
    }
 else     if (!(readTransformer.method().equals(""String_Node_Str""))) {
      xmlReadTransformer.setMethod(readTransformer.method());
    }
    transformation.setXmlReadTransformer(xmlReadTransformer);
  }
  org.eclipse.persistence.oxm.annotations.XmlWriteTransformer[] transformers=null;
  if (helper.isAnnotationPresent(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlWriteTransformer.class)) {
    org.eclipse.persistence.oxm.annotations.XmlWriteTransformer writeTransformer=(org.eclipse.persistence.oxm.annotations.XmlWriteTransformer)helper.getAnnotation(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlWriteTransformer.class);
    transformers=new org.eclipse.persistence.oxm.annotations.XmlWriteTransformer[]{writeTransformer};
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlWriteTransformers.class)) {
    XmlWriteTransformers writeTransformers=(XmlWriteTransformers)helper.getAnnotation(javaHasAnnotations,XmlWriteTransformers.class);
    transformers=writeTransformers.value();
  }
  if (transformers != null) {
    for (    org.eclipse.persistence.oxm.annotations.XmlWriteTransformer next : transformers) {
      org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlWriteTransformer xmlWriteTransformer=new org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlWriteTransformer();
      if (!(next.transformerClass() == FieldTransformer.class)) {
        xmlWriteTransformer.setTransformerClass(next.transformerClass().getName());
      }
 else       if (!(next.method().equals(""String_Node_Str""))) {
        xmlWriteTransformer.setMethod(next.method());
      }
      xmlWriteTransformer.setXmlPath(next.xpath());
      transformation.getXmlWriteTransformer().add(xmlWriteTransformer);
    }
  }
  property.setXmlTransformation(transformation);
  property.setIsXmlTransformation(true);
  return property;
}"
66245,"private Property buildNewProperty(TypeInfo info,JavaClass cls,JavaHasAnnotations javaHasAnnotations,String propertyName,JavaClass ptype){
  Property property=null;
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlElements.class)) {
    property=buildChoiceProperty(javaHasAnnotations);
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlAnyElement.class)) {
    XmlAnyElement anyElement=(XmlAnyElement)helper.getAnnotation(javaHasAnnotations,XmlAnyElement.class);
    property=new Property(helper);
    property.setIsAny(true);
    if (anyElement.value() != null) {
      property.setDomHandlerClassName(anyElement.value().getName());
    }
    property.setLax(anyElement.lax());
    info.setAnyElementPropertyName(propertyName);
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlElementRef.class) || helper.isAnnotationPresent(javaHasAnnotations,XmlElementRefs.class)) {
    property=buildReferenceProperty(info,javaHasAnnotations,propertyName,ptype);
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlTransformation.class)) {
    property=buildTransformationProperty(javaHasAnnotations,cls);
  }
 else {
    property=new Property(helper);
  }
  property.setPropertyName(propertyName);
  property.setElement(javaHasAnnotations);
  TypeInfo pTypeInfo=typeInfo.get(ptype.getQualifiedName());
  if ((pTypeInfo != null && !pTypeInfo.isTransient()) || !helper.isAnnotationPresent(ptype,XmlTransient.class)) {
    property.setType(ptype);
  }
 else {
    JavaClass parent=ptype.getSuperclass();
    while (parent != null) {
      if (parent.getName().equals(""String_Node_Str"")) {
        property.setType(parent);
        break;
      }
      TypeInfo parentTypeInfo=typeInfo.get(parent.getQualifiedName());
      if ((parentTypeInfo != null && !parentTypeInfo.isTransient()) || !helper.isAnnotationPresent(parent,XmlTransient.class)) {
        property.setType(parent);
        break;
      }
      parent=parent.getSuperclass();
    }
  }
  processPropertyAnnotations(info,cls,javaHasAnnotations,property);
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlPath.class)) {
    XmlPath xmlPath=(XmlPath)helper.getAnnotation(javaHasAnnotations,XmlPath.class);
    property.setXmlPath(xmlPath.value());
    String schemaName=XMLProcessor.getNameFromXPath(xmlPath.value(),property.getPropertyName(),property.isAttribute());
    QName qName;
    NamespaceInfo nsInfo=getNamespaceInfoForPackage(cls);
    if (nsInfo.isElementFormQualified()) {
      qName=new QName(nsInfo.getNamespace(),schemaName);
    }
 else {
      qName=new QName(schemaName);
    }
    property.setSchemaName(qName);
  }
 else {
    property.setSchemaName(getQNameForProperty(propertyName,javaHasAnnotations,getNamespaceInfoForPackage(cls),info.getClassNamespace()));
  }
  ptype=property.getActualType();
  if (ptype.isPrimitive()) {
    property.setIsRequired(true);
  }
  if (!property.isSetXmlJavaTypeAdapter()) {
    TypeInfo refClassInfo=getTypeInfo().get(ptype.getQualifiedName());
    if (refClassInfo != null && refClassInfo.isSetXmlJavaTypeAdapter()) {
      org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xmlJavaTypeAdapter=null;
      try {
        xmlJavaTypeAdapter=refClassInfo.getXmlJavaTypeAdapter();
        property.setXmlJavaTypeAdapter(refClassInfo.getXmlJavaTypeAdapter());
      }
 catch (      JAXBException e) {
        String[] messageParams=new String[2];
        messageParams[0]=xmlJavaTypeAdapter.getValue();
        messageParams[1]=cls.getName();
        property.setXmlJavaTypeAdapter(null);
        this.getLogger().logWarning(JAXBMetadataLogger.INVALID_TYPE_LEVEL_XML_JAVA_TYPE_ADAPTER,messageParams);
      }
    }
  }
  return property;
}","private Property buildNewProperty(TypeInfo info,JavaClass cls,JavaHasAnnotations javaHasAnnotations,String propertyName,JavaClass ptype){
  Property property=null;
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlElements.class)) {
    property=buildChoiceProperty(javaHasAnnotations);
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlAnyElement.class)) {
    XmlAnyElement anyElement=(XmlAnyElement)helper.getAnnotation(javaHasAnnotations,XmlAnyElement.class);
    property=new Property(helper);
    property.setIsAny(true);
    if (anyElement.value() != null) {
      property.setDomHandlerClassName(anyElement.value().getName());
    }
    property.setLax(anyElement.lax());
    info.setAnyElementPropertyName(propertyName);
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlElementRef.class) || helper.isAnnotationPresent(javaHasAnnotations,XmlElementRefs.class)) {
    property=buildReferenceProperty(info,javaHasAnnotations,propertyName,ptype);
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlTransformation.class) || helper.isAnnotationPresent(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlReadTransformer.class) || helper.isAnnotationPresent(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlWriteTransformer.class)|| helper.isAnnotationPresent(javaHasAnnotations,XmlWriteTransformers.class)) {
    property=buildTransformationProperty(javaHasAnnotations,cls);
  }
 else {
    property=new Property(helper);
  }
  property.setPropertyName(propertyName);
  property.setElement(javaHasAnnotations);
  TypeInfo pTypeInfo=typeInfo.get(ptype.getQualifiedName());
  if ((pTypeInfo != null && !pTypeInfo.isTransient()) || !helper.isAnnotationPresent(ptype,XmlTransient.class)) {
    property.setType(ptype);
  }
 else {
    JavaClass parent=ptype.getSuperclass();
    while (parent != null) {
      if (parent.getName().equals(""String_Node_Str"")) {
        property.setType(parent);
        break;
      }
      TypeInfo parentTypeInfo=typeInfo.get(parent.getQualifiedName());
      if ((parentTypeInfo != null && !parentTypeInfo.isTransient()) || !helper.isAnnotationPresent(parent,XmlTransient.class)) {
        property.setType(parent);
        break;
      }
      parent=parent.getSuperclass();
    }
  }
  processPropertyAnnotations(info,cls,javaHasAnnotations,property);
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlPath.class)) {
    XmlPath xmlPath=(XmlPath)helper.getAnnotation(javaHasAnnotations,XmlPath.class);
    property.setXmlPath(xmlPath.value());
    String schemaName=XMLProcessor.getNameFromXPath(xmlPath.value(),property.getPropertyName(),property.isAttribute());
    QName qName;
    NamespaceInfo nsInfo=getNamespaceInfoForPackage(cls);
    if (nsInfo.isElementFormQualified()) {
      qName=new QName(nsInfo.getNamespace(),schemaName);
    }
 else {
      qName=new QName(schemaName);
    }
    property.setSchemaName(qName);
  }
 else {
    property.setSchemaName(getQNameForProperty(propertyName,javaHasAnnotations,getNamespaceInfoForPackage(cls),info.getClassNamespace()));
  }
  ptype=property.getActualType();
  if (ptype.isPrimitive()) {
    property.setIsRequired(true);
  }
  if (!property.isSetXmlJavaTypeAdapter()) {
    TypeInfo refClassInfo=getTypeInfo().get(ptype.getQualifiedName());
    if (refClassInfo != null && refClassInfo.isSetXmlJavaTypeAdapter()) {
      org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xmlJavaTypeAdapter=null;
      try {
        xmlJavaTypeAdapter=refClassInfo.getXmlJavaTypeAdapter();
        property.setXmlJavaTypeAdapter(refClassInfo.getXmlJavaTypeAdapter());
      }
 catch (      JAXBException e) {
        String[] messageParams=new String[2];
        messageParams[0]=xmlJavaTypeAdapter.getValue();
        messageParams[1]=cls.getName();
        property.setXmlJavaTypeAdapter(null);
        this.getLogger().logWarning(JAXBMetadataLogger.INVALID_TYPE_LEVEL_XML_JAVA_TYPE_ADAPTER,messageParams);
      }
    }
  }
  return property;
}"
66246,"/** 
 * PUBLIC: Cause:    
 */
public static JAXBException noKeyOrIDPropertyOnJoinTarget(String className,String propertyName,String referencedClassName){
  Object[] args={className,propertyName,referencedClassName};
  JAXBException validationException=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,NO_ID_OR_KEY_ON_JOIN_TARGET,args));
  validationException.setErrorCode(NO_ID_OR_KEY_ON_JOIN_TARGET);
  return validationException;
}","/** 
 * PUBLIC: Cause:  The target class has no ID or Key properties set.
 */
public static JAXBException noKeyOrIDPropertyOnJoinTarget(String className,String propertyName,String referencedClassName){
  Object[] args={className,propertyName,referencedClassName};
  JAXBException validationException=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,NO_ID_OR_KEY_ON_JOIN_TARGET,args));
  validationException.setErrorCode(NO_ID_OR_KEY_ON_JOIN_TARGET);
  return validationException;
}"
66247,"/** 
 * PUBLIC: Cause:    
 */
public static JAXBException invalidReferencedXmlPathOnJoin(String className,String propertyName,String referencedClassName,String referencedXmlPath){
  Object[] args={className,propertyName,referencedClassName,referencedXmlPath};
  JAXBException validationException=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,INVALID_REF_XML_PATH,args));
  validationException.setErrorCode(INVALID_REF_XML_PATH);
  return validationException;
}","/** 
 * PUBLIC: Cause: No ID or Key property exists on the target class with an XPath == referencedXmlPath. 
 */
public static JAXBException invalidReferencedXmlPathOnJoin(String className,String propertyName,String referencedClassName,String referencedXmlPath){
  Object[] args={className,propertyName,referencedClassName,referencedXmlPath};
  JAXBException validationException=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,INVALID_REF_XML_PATH,args));
  validationException.setErrorCode(INVALID_REF_XML_PATH);
  return validationException;
}"
66248,"/** 
 * INTERNAL:
 */
public void buildMapping(String mappingUri,int indexToAdd){
  if (getContainingType().isDataType()) {
    return;
  }
  if (getType().isChangeSummaryType()) {
    buildChangeSummaryMapping();
    addMappingToOwner(false,indexToAdd);
  }
 else   if (isNameCollision()) {
    xmlMapping=new XMLAnyCollectionMapping();
    xmlMapping.setAttributeName(getName());
    addMappingToOwner(true,indexToAdd);
  }
 else {
    boolean sdoMethodAccessor=true;
    if (!getType().isDataType()) {
      if (getType().isDataObjectType()) {
        getType().setImplClassName(SDOConstants.SDO_DATA_OBJECT_IMPL_CLASS_NAME);
        if (getXsdType() != null && !getXsdType().equals(SDOConstants.ANY_TYPE_QNAME)) {
          if (isMany()) {
            xmlMapping=buildXMLCompositeCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCompositeObjectMapping(mappingUri);
          }
        }
 else {
          sdoMethodAccessor=false;
          if (isMany()) {
            xmlMapping=buildXMLFragmentCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLFragmentMapping(mappingUri);
          }
        }
      }
 else {
        if (!getType().isFinalized()) {
          getType().getNonFinalizedReferencingProps().add(this);
          getType().getNonFinalizedMappingURIs().add(mappingUri);
          return;
        }
        if (isSubstitutable()) {
          if (isMany()) {
            xmlMapping=buildXMLChoiceCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLChoiceObjectMapping(mappingUri);
          }
        }
 else         if (isMany()) {
          if (isContainment()) {
            xmlMapping=buildXMLCompositeCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCollectionReferenceMapping(mappingUri);
          }
        }
 else {
          if (isContainment()) {
            xmlMapping=buildXMLCompositeObjectMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLObjectReferenceMapping(mappingUri);
          }
        }
      }
    }
 else {
      if (isMany()) {
        MimeTypePolicy mimeTypePolicy=getMimeTypePolicy();
        if (isActivationAvailable && (!aHelperContext.getXSDHelper().isAttribute(this) && ((mimeTypePolicy != null) || ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str"")) || (getXsdType() != null && getXsdType().equals(XMLConstants.BASE_64_BINARY_QNAME))))) {
          xmlMapping=buildXMLBinaryDataCollectionMapping(mappingUri,mimeTypePolicy);
        }
 else {
          if (isSubstitutable()) {
            xmlMapping=buildXMLChoiceCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCompositeDirectCollectionMapping(mappingUri);
          }
        }
      }
 else {
        MimeTypePolicy mimeTypePolicy=getMimeTypePolicy();
        if (isActivationAvailable && (!aHelperContext.getXSDHelper().isAttribute(this) && ((mimeTypePolicy != null) || ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str"")) || (getXsdType() != null && getXsdType().equals(XMLConstants.BASE_64_BINARY_QNAME))))) {
          xmlMapping=buildXMLBinaryDataMapping(mappingUri,mimeTypePolicy);
        }
 else {
          if (isSubstitutable()) {
            xmlMapping=buildXMLChoiceObjectMapping(mappingUri);
          }
 else {
            if (XMLConstants.QNAME_QNAME.equals(xsdType)) {
              xmlMapping=buildXMLTransformationMapping(mappingUri);
            }
 else {
              xmlMapping=buildXMLDirectMapping(mappingUri);
            }
          }
        }
      }
    }
    addMappingToOwner(sdoMethodAccessor,indexToAdd);
  }
}","/** 
 * INTERNAL:
 */
public void buildMapping(String mappingUri,int indexToAdd){
  if (getContainingType().isDataType()) {
    return;
  }
  if (getType().isChangeSummaryType()) {
    buildChangeSummaryMapping();
    addMappingToOwner(false,indexToAdd);
  }
 else   if (isNameCollision()) {
    xmlMapping=new XMLAnyCollectionMapping();
    xmlMapping.setAttributeName(getName());
    addMappingToOwner(true,indexToAdd);
  }
 else {
    boolean sdoMethodAccessor=true;
    if (!getType().isDataType()) {
      if (getType().isDataObjectType()) {
        getType().setImplClassName(SDOConstants.SDO_DATA_OBJECT_IMPL_CLASS_NAME);
        if (getXsdType() != null && !getXsdType().equals(SDOConstants.ANY_TYPE_QNAME)) {
          if (isMany()) {
            xmlMapping=buildXMLCompositeCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCompositeObjectMapping(mappingUri);
          }
        }
 else {
          sdoMethodAccessor=false;
          if (isMany()) {
            xmlMapping=buildXMLFragmentCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLFragmentMapping(mappingUri);
          }
        }
      }
 else {
        if (!getType().isFinalized()) {
          getType().getNonFinalizedReferencingProps().add(this);
          getType().getNonFinalizedMappingURIs().add(mappingUri);
          return;
        }
        if (isSubstitutable()) {
          if (isMany()) {
            xmlMapping=buildXMLChoiceCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLChoiceObjectMapping(mappingUri);
          }
        }
 else         if (isMany()) {
          if (isContainment()) {
            xmlMapping=buildXMLCompositeCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCollectionReferenceMapping(mappingUri);
          }
        }
 else {
          if (isContainment()) {
            xmlMapping=buildXMLCompositeObjectMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLObjectReferenceMapping(mappingUri);
          }
        }
      }
    }
 else {
      if (isMany()) {
        MimeTypePolicy mimeTypePolicy=getMimeTypePolicy();
        if (isActivationAvailable && (!aHelperContext.getXSDHelper().isAttribute(this) && ((mimeTypePolicy != null) || ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str"")) || (getXsdType() != null && getXsdType().equals(XMLConstants.BASE_64_BINARY_QNAME))))) {
          xmlMapping=buildXMLBinaryDataCollectionMapping(mappingUri,mimeTypePolicy);
        }
 else {
          if (!isActivationAvailable && ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str""))) {
            throw SDOException.unableToMapDataHandlerDueToMissingDependency(this.propertyName,this.getContainingType().getQName().toString());
          }
          if (isSubstitutable()) {
            xmlMapping=buildXMLChoiceCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCompositeDirectCollectionMapping(mappingUri);
          }
        }
      }
 else {
        MimeTypePolicy mimeTypePolicy=getMimeTypePolicy();
        if (isActivationAvailable && (!aHelperContext.getXSDHelper().isAttribute(this) && ((mimeTypePolicy != null) || ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str"")) || (getXsdType() != null && getXsdType().equals(XMLConstants.BASE_64_BINARY_QNAME))))) {
          xmlMapping=buildXMLBinaryDataMapping(mappingUri,mimeTypePolicy);
        }
 else {
          if (!isActivationAvailable && ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str""))) {
            throw SDOException.unableToMapDataHandlerDueToMissingDependency(this.propertyName,this.getContainingType().getQName().toString());
          }
          if (isSubstitutable()) {
            xmlMapping=buildXMLChoiceObjectMapping(mappingUri);
          }
 else {
            if (XMLConstants.QNAME_QNAME.equals(xsdType)) {
              xmlMapping=buildXMLTransformationMapping(mappingUri);
            }
 else {
              xmlMapping=buildXMLDirectMapping(mappingUri);
            }
          }
        }
      }
    }
    addMappingToOwner(sdoMethodAccessor,indexToAdd);
  }
}"
66249,"/** 
 * Process a given set of JavaClass instances. @XmlIDREFs will be validated, and call back methods  will be handled as required. This method is typically called after init, preBuildTypeInfo, and  postBuildTypeInfo have been called.
 * @param classes
 */
public void processJavaClasses(JavaClass[] classes){
  ArrayList<JavaClass> classesToProcess=new ArrayList<JavaClass>();
  for (  JavaClass javaClass : classes) {
    classesToProcess.add(javaClass);
  }
  checkForCallbackMethods();
}","/** 
 * This method was initially designed to handle processing one or more JavaClass instances.  Over time its functionality has been broken apart and handled in different methods. Its sole purpose now is to check for callback methods. 
 * @param classes this paramater can and should be null as it is not used
 */
public void processJavaClasses(JavaClass[] classes){
  checkForCallbackMethods();
}"
66250,"/** 
 * Generate TypeInfo instances for a given array of JavaClasses.
 * @param classes
 */
void processClassesAndProperties(JavaClass[] classes,TypeMappingInfo[] typeMappingInfos){
  init(classes,typeMappingInfos);
  preBuildTypeInfo(classes);
  classes=postBuildTypeInfo(classes);
  processJavaClasses(classes);
  finalizeProperties();
  createElementsForTypeMappingInfo();
}","/** 
 * Generate TypeInfo instances for a given array of JavaClasses.
 * @param classes
 */
void processClassesAndProperties(JavaClass[] classes,TypeMappingInfo[] typeMappingInfos){
  init(classes,typeMappingInfos);
  preBuildTypeInfo(classes);
  classes=postBuildTypeInfo(classes);
  processJavaClasses(null);
  finalizeProperties();
  createElementsForTypeMappingInfo();
}"
66251,"/** 
 * Process XmlBindings on a per package basis for a given AnnotationsProcessor instance.
 * @param annotationsProcessor
 */
public void processXML(AnnotationsProcessor annotationsProcessor,JavaModelInput jModelInput,TypeMappingInfo[] typeMappingInfos,JavaClass[] originalJavaClasses){
  this.jModelInput=jModelInput;
  this.aProcessor=annotationsProcessor;
  Map<String,XmlEnum> xmlEnumMap=new HashMap<String,XmlEnum>();
  annotationsProcessor.init(originalJavaClasses,typeMappingInfos);
  Map<String,ArrayList<JavaClass>> pkgToClassMap=buildPackageToJavaClassMap();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    NamespaceInfo nsInfo=processXmlSchema(xmlBindings,packageName);
    if (nsInfo != null) {
      annotationsProcessor.addPackageToNamespaceMapping(packageName,nsInfo);
    }
    XmlRegistries xmlRegs=xmlBindings.getXmlRegistries();
    if (xmlRegs != null) {
      for (      XmlRegistry xmlReg : xmlRegs.getXmlRegistry()) {
        aProcessor.addXmlRegistry(xmlReg.getName(),xmlReg);
      }
    }
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    XmlEnums xmlEnums=xmlBindings.getXmlEnums();
    if (xmlEnums != null) {
      for (      XmlEnum xmlEnum : xmlEnums.getXmlEnum()) {
        xmlEnumMap.put(xmlEnum.getJavaEnum(),xmlEnum);
      }
    }
    Map<String,TypeInfo> typeInfoMap=annotationsProcessor.preBuildTypeInfo(javaClasses);
    List<XmlSchemaType> xmlSchemaTypes=null;
    XmlSchemaTypes sTypes=xmlBindings.getXmlSchemaTypes();
    if (sTypes != null) {
      xmlSchemaTypes=sTypes.getXmlSchemaType();
    }
 else {
      xmlSchemaTypes=new ArrayList<XmlSchemaType>();
    }
    if (xmlBindings.getXmlSchemaType() != null) {
      xmlSchemaTypes.add(xmlBindings.getXmlSchemaType());
    }
    for (    XmlSchemaType sType : xmlSchemaTypes) {
      JavaClass jClass=aProcessor.getHelper().getJavaClass(sType.getType());
      if (jClass != null) {
        aProcessor.processSchemaType(sType.getName(),sType.getNamespace(),jClass.getQualifiedName());
      }
    }
    nsInfo=annotationsProcessor.getPackageToNamespaceMappings().get(packageName);
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo info=typeInfoMap.get(javaType.getName());
        if (javaType.getXmlJavaTypeAdapter() != null) {
          info.setXmlJavaTypeAdapter(javaType.getXmlJavaTypeAdapter());
        }
        if (javaType.isSetXmlAccessorOrder()) {
          info.setXmlAccessOrder(javaType.getXmlAccessorOrder());
        }
 else         if (!info.isSetXmlAccessOrder()) {
          if (xmlBindings.isSetXmlAccessorOrder()) {
            info.setXmlAccessOrder(xmlBindings.getXmlAccessorOrder());
          }
 else {
            info.setXmlAccessOrder(nsInfo.getAccessOrder());
          }
        }
        if (javaType.isSetXmlAccessorType()) {
          info.setXmlAccessType(javaType.getXmlAccessorType());
        }
 else         if (!info.isSetXmlAccessType()) {
          if (xmlBindings.isSetXmlAccessorType()) {
            info.setXmlAccessType(xmlBindings.getXmlAccessorType());
          }
 else {
            info.setXmlAccessType(nsInfo.getAccessType());
          }
        }
        if (javaType.isSetXmlInlineBinaryData()) {
          info.setInlineBinaryData(javaType.isXmlInlineBinaryData());
        }
        if (javaType.isSetXmlTransient()) {
          info.setXmlTransient(javaType.isXmlTransient());
        }
        if (javaType.getXmlRootElement() != null) {
          info.setXmlRootElement(javaType.getXmlRootElement());
        }
        if (javaType.getXmlSeeAlso() != null && javaType.getXmlSeeAlso().size() > 0) {
          info.setXmlSeeAlso(javaType.getXmlSeeAlso());
        }
        if (javaType.getXmlType() != null) {
          info.setXmlType(javaType.getXmlType());
        }
        if (javaType.getXmlCustomizer() != null) {
          info.setXmlCustomizer(javaType.getXmlCustomizer());
        }
        if (javaType.getXmlClassExtractor() != null) {
          info.setClassExtractorName(javaType.getXmlClassExtractor().getClazz());
        }
        if (javaType.getXmlProperties() != null && javaType.getXmlProperties().getXmlProperty().size() > 0) {
          if (info.getUserProperties() != null) {
            info.setUserProperties(mergeUserPropertyMap(javaType.getXmlProperties().getXmlProperty(),info.getUserProperties()));
          }
 else {
            info.setUserProperties(createUserPropertyMap(javaType.getXmlProperties().getXmlProperty()));
          }
        }
        if (javaType.getXmlDiscriminatorNode() != null) {
          info.setXmlDiscriminatorNode(javaType.getXmlDiscriminatorNode());
        }
        if (javaType.getXmlDiscriminatorValue() != null) {
          info.setXmlDiscriminatorValue(javaType.getXmlDiscriminatorValue());
        }
      }
    }
    if (xmlBindings.getXmlJavaTypeAdapters() != null) {
      Map<String,TypeInfo> typeInfos=aProcessor.getTypeInfosForPackage(packageName);
      for (      TypeInfo tInfo : typeInfos.values()) {
        List<XmlJavaTypeAdapter> adapters=xmlBindings.getXmlJavaTypeAdapters().getXmlJavaTypeAdapter();
        for (        XmlJavaTypeAdapter xja : adapters) {
          try {
            JavaClass adapterClass=jModelInput.getJavaModel().getClass(xja.getValue());
            JavaClass boundType=jModelInput.getJavaModel().getClass(xja.getType());
            if (boundType != null) {
              tInfo.addPackageLevelAdapterClass(adapterClass,boundType);
            }
          }
 catch (          JAXBException e) {
            String[] messageParams=new String[2];
            messageParams[0]=xja.getValue();
            messageParams[1]=packageName;
            this.getLogger().logWarning(JAXBMetadataLogger.INVALID_PACKAGE_LEVEL_XML_JAVA_TYPE_ADAPTER,messageParams);
          }
        }
      }
    }
    javaClasses=annotationsProcessor.postBuildTypeInfo(javaClasses);
    annotationsProcessor.processJavaClasses(javaClasses);
    Map<String,TypeInfo> typeInfosForPackage=annotationsProcessor.getTypeInfosForPackage(packageName);
    for (    Entry<String,TypeInfo> entry : typeInfosForPackage.entrySet()) {
      TypeInfo tInfo=entry.getValue();
      if (tInfo.isEnumerationType()) {
        EnumTypeInfo etInfo=(EnumTypeInfo)tInfo;
        XmlEnum xmlEnum=xmlEnumMap.get(etInfo.getClassName());
        if (xmlEnum != null) {
          JavaClass restrictionClass=aProcessor.getHelper().getJavaClass(xmlEnum.getValue());
          if (restrictionClass == null) {
            restrictionClass=jModelInput.getJavaModel().getClass(String.class);
          }
          etInfo.setRestrictionBase(aProcessor.getSchemaTypeFor(restrictionClass));
          for (          XmlEnumValue xmlEnumValue : xmlEnum.getXmlEnumValue()) {
            etInfo.addJavaFieldToXmlEnumValuePair(true,xmlEnumValue.getJavaEnumValue(),xmlEnumValue.getValue());
          }
        }
      }
    }
    jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        processJavaType(javaType,typeInfosForPackage.get(javaType.getName()),nsInfo);
      }
    }
    pkgToClassMap.remove(packageName);
  }
  Iterator<ArrayList<JavaClass>> classIt=pkgToClassMap.values().iterator();
  while (classIt.hasNext()) {
    ArrayList<JavaClass> jClassList=classIt.next();
    JavaClass[] jClassArray=(JavaClass[])jClassList.toArray(new JavaClass[jClassList.size()]);
    annotationsProcessor.buildNewTypeInfo(jClassArray);
    annotationsProcessor.processJavaClasses(jClassArray);
  }
  Map<String,TypeInfo> typeInfos=(Map<String,TypeInfo>)aProcessor.getTypeInfo().clone();
  for (  Entry<String,TypeInfo> entry : typeInfos.entrySet()) {
    JavaClass[] jClassArray;
    for (    Property prop : entry.getValue().getPropertyList()) {
      if (prop.isSetXmlJavaTypeAdapter()) {
        jClassArray=new JavaClass[]{prop.getActualType()};
        aProcessor.buildNewTypeInfo(jClassArray);
      }
    }
  }
  aProcessor.finalizeProperties();
  aProcessor.createElementsForTypeMappingInfo();
}","/** 
 * Process XmlBindings on a per package basis for a given AnnotationsProcessor instance.
 * @param annotationsProcessor
 */
public void processXML(AnnotationsProcessor annotationsProcessor,JavaModelInput jModelInput,TypeMappingInfo[] typeMappingInfos,JavaClass[] originalJavaClasses){
  this.jModelInput=jModelInput;
  this.aProcessor=annotationsProcessor;
  Map<String,XmlEnum> xmlEnumMap=new HashMap<String,XmlEnum>();
  annotationsProcessor.init(originalJavaClasses,typeMappingInfos);
  Map<String,ArrayList<JavaClass>> pkgToClassMap=buildPackageToJavaClassMap();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    NamespaceInfo nsInfo=processXmlSchema(xmlBindings,packageName);
    if (nsInfo != null) {
      annotationsProcessor.addPackageToNamespaceMapping(packageName,nsInfo);
    }
    XmlRegistries xmlRegs=xmlBindings.getXmlRegistries();
    if (xmlRegs != null) {
      for (      XmlRegistry xmlReg : xmlRegs.getXmlRegistry()) {
        aProcessor.addXmlRegistry(xmlReg.getName(),xmlReg);
      }
    }
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    XmlEnums xmlEnums=xmlBindings.getXmlEnums();
    if (xmlEnums != null) {
      for (      XmlEnum xmlEnum : xmlEnums.getXmlEnum()) {
        xmlEnumMap.put(xmlEnum.getJavaEnum(),xmlEnum);
      }
    }
    Map<String,TypeInfo> typeInfoMap=annotationsProcessor.preBuildTypeInfo(javaClasses);
    List<XmlSchemaType> xmlSchemaTypes=null;
    XmlSchemaTypes sTypes=xmlBindings.getXmlSchemaTypes();
    if (sTypes != null) {
      xmlSchemaTypes=sTypes.getXmlSchemaType();
    }
 else {
      xmlSchemaTypes=new ArrayList<XmlSchemaType>();
    }
    if (xmlBindings.getXmlSchemaType() != null) {
      xmlSchemaTypes.add(xmlBindings.getXmlSchemaType());
    }
    for (    XmlSchemaType sType : xmlSchemaTypes) {
      JavaClass jClass=aProcessor.getHelper().getJavaClass(sType.getType());
      if (jClass != null) {
        aProcessor.processSchemaType(sType.getName(),sType.getNamespace(),jClass.getQualifiedName());
      }
    }
    nsInfo=annotationsProcessor.getPackageToNamespaceMappings().get(packageName);
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo info=typeInfoMap.get(javaType.getName());
        if (javaType.getXmlJavaTypeAdapter() != null) {
          info.setXmlJavaTypeAdapter(javaType.getXmlJavaTypeAdapter());
        }
        if (javaType.isSetXmlAccessorOrder()) {
          info.setXmlAccessOrder(javaType.getXmlAccessorOrder());
        }
 else         if (!info.isSetXmlAccessOrder()) {
          if (xmlBindings.isSetXmlAccessorOrder()) {
            info.setXmlAccessOrder(xmlBindings.getXmlAccessorOrder());
          }
 else {
            info.setXmlAccessOrder(nsInfo.getAccessOrder());
          }
        }
        if (javaType.isSetXmlAccessorType()) {
          info.setXmlAccessType(javaType.getXmlAccessorType());
        }
 else         if (!info.isSetXmlAccessType()) {
          if (xmlBindings.isSetXmlAccessorType()) {
            info.setXmlAccessType(xmlBindings.getXmlAccessorType());
          }
 else {
            info.setXmlAccessType(nsInfo.getAccessType());
          }
        }
        if (javaType.isSetXmlInlineBinaryData()) {
          info.setInlineBinaryData(javaType.isXmlInlineBinaryData());
        }
        if (javaType.isSetXmlTransient()) {
          info.setXmlTransient(javaType.isXmlTransient());
        }
        if (javaType.getXmlRootElement() != null) {
          info.setXmlRootElement(javaType.getXmlRootElement());
        }
        if (javaType.getXmlSeeAlso() != null && javaType.getXmlSeeAlso().size() > 0) {
          info.setXmlSeeAlso(javaType.getXmlSeeAlso());
        }
        if (javaType.getXmlType() != null) {
          info.setXmlType(javaType.getXmlType());
        }
        if (javaType.getXmlCustomizer() != null) {
          info.setXmlCustomizer(javaType.getXmlCustomizer());
        }
        if (javaType.getXmlClassExtractor() != null) {
          info.setClassExtractorName(javaType.getXmlClassExtractor().getClazz());
        }
        if (javaType.getXmlProperties() != null && javaType.getXmlProperties().getXmlProperty().size() > 0) {
          if (info.getUserProperties() != null) {
            info.setUserProperties(mergeUserPropertyMap(javaType.getXmlProperties().getXmlProperty(),info.getUserProperties()));
          }
 else {
            info.setUserProperties(createUserPropertyMap(javaType.getXmlProperties().getXmlProperty()));
          }
        }
        if (javaType.getXmlDiscriminatorNode() != null) {
          info.setXmlDiscriminatorNode(javaType.getXmlDiscriminatorNode());
        }
        if (javaType.getXmlDiscriminatorValue() != null) {
          info.setXmlDiscriminatorValue(javaType.getXmlDiscriminatorValue());
        }
      }
    }
    if (xmlBindings.getXmlJavaTypeAdapters() != null) {
      Map<String,TypeInfo> typeInfos=aProcessor.getTypeInfosForPackage(packageName);
      for (      TypeInfo tInfo : typeInfos.values()) {
        List<XmlJavaTypeAdapter> adapters=xmlBindings.getXmlJavaTypeAdapters().getXmlJavaTypeAdapter();
        for (        XmlJavaTypeAdapter xja : adapters) {
          try {
            JavaClass adapterClass=jModelInput.getJavaModel().getClass(xja.getValue());
            JavaClass boundType=jModelInput.getJavaModel().getClass(xja.getType());
            if (boundType != null) {
              tInfo.addPackageLevelAdapterClass(adapterClass,boundType);
            }
          }
 catch (          JAXBException e) {
            String[] messageParams=new String[2];
            messageParams[0]=xja.getValue();
            messageParams[1]=packageName;
            this.getLogger().logWarning(JAXBMetadataLogger.INVALID_PACKAGE_LEVEL_XML_JAVA_TYPE_ADAPTER,messageParams);
          }
        }
      }
    }
    javaClasses=annotationsProcessor.postBuildTypeInfo(javaClasses);
    annotationsProcessor.processJavaClasses(null);
    Map<String,TypeInfo> typeInfosForPackage=annotationsProcessor.getTypeInfosForPackage(packageName);
    for (    Entry<String,TypeInfo> entry : typeInfosForPackage.entrySet()) {
      TypeInfo tInfo=entry.getValue();
      if (tInfo.isEnumerationType()) {
        EnumTypeInfo etInfo=(EnumTypeInfo)tInfo;
        XmlEnum xmlEnum=xmlEnumMap.get(etInfo.getClassName());
        if (xmlEnum != null) {
          JavaClass restrictionClass=aProcessor.getHelper().getJavaClass(xmlEnum.getValue());
          if (restrictionClass == null) {
            restrictionClass=jModelInput.getJavaModel().getClass(String.class);
          }
          etInfo.setRestrictionBase(aProcessor.getSchemaTypeFor(restrictionClass));
          for (          XmlEnumValue xmlEnumValue : xmlEnum.getXmlEnumValue()) {
            etInfo.addJavaFieldToXmlEnumValuePair(true,xmlEnumValue.getJavaEnumValue(),xmlEnumValue.getValue());
          }
        }
      }
    }
    jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        processJavaType(javaType,typeInfosForPackage.get(javaType.getName()),nsInfo);
      }
    }
    pkgToClassMap.remove(packageName);
  }
  Iterator<ArrayList<JavaClass>> classIt=pkgToClassMap.values().iterator();
  while (classIt.hasNext()) {
    ArrayList<JavaClass> jClassList=classIt.next();
    JavaClass[] jClassArray=(JavaClass[])jClassList.toArray(new JavaClass[jClassList.size()]);
    annotationsProcessor.buildNewTypeInfo(jClassArray);
    annotationsProcessor.processJavaClasses(jClassArray);
  }
  Map<String,TypeInfo> typeInfos=(Map<String,TypeInfo>)aProcessor.getTypeInfo().clone();
  for (  Entry<String,TypeInfo> entry : typeInfos.entrySet()) {
    JavaClass[] jClassArray;
    for (    Property prop : entry.getValue().getPropertyList()) {
      if (prop.isSetXmlJavaTypeAdapter()) {
        jClassArray=new JavaClass[]{prop.getActualType()};
        aProcessor.buildNewTypeInfo(jClassArray);
      }
    }
  }
  aProcessor.finalizeProperties();
  aProcessor.createElementsForTypeMappingInfo();
}"
66252,"public void testTypePreservation() throws Exception {
  fail(""String_Node_Str"");
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(DATATYPES);
  if (iStream == null) {
    fail(""String_Node_Str"" + DATATYPES + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(""String_Node_Str"",new StreamSource(iStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity person=jaxbContext.newDynamicEntity(PERSON);
  assertNotNull(""String_Node_Str"",person);
  person.set(""String_Node_Str"",456);
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",45000.00);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  DynamicEntity readPerson=(DynamicEntity)jaxbContext.createUnmarshaller().unmarshal(marshalDoc);
  assertEquals(""String_Node_Str"",Integer.class,readPerson.get(""String_Node_Str"").getClass());
  assertEquals(""String_Node_Str"",Double.class,readPerson.get(""String_Node_Str"").getClass());
}","public void testTypePreservation() throws Exception {
  fail(""String_Node_Str"");
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(DATATYPES);
  if (iStream == null) {
    fail(""String_Node_Str"" + DATATYPES + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(""String_Node_Str"",new StreamSource(iStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity person=jaxbContext.newDynamicEntity(PERSON);
  assertNotNull(""String_Node_Str"",person);
  person.set(""String_Node_Str"",456);
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",45000.00);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  DynamicEntity readPerson=(DynamicEntity)jaxbContext.createUnmarshaller().unmarshal(marshalDoc);
  assertEquals(""String_Node_Str"",Integer.class,readPerson.<Object>get(""String_Node_Str"").getClass());
  assertEquals(""String_Node_Str"",Double.class,readPerson.<Object>get(""String_Node_Str"").getClass());
}"
66253,"public void testTypePreservation() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(XMLSCHEMA_DEFAULTS);
  jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(inputStream,null,null,null);
  DynamicEntity person=jaxbContext.newDynamicEntity(PERSON);
  assertNotNull(""String_Node_Str"",person);
  person.set(""String_Node_Str"",456);
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",45000.00);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  DynamicEntity readPerson=(DynamicEntity)jaxbContext.createUnmarshaller().unmarshal(marshalDoc);
  assertEquals(""String_Node_Str"",Double.class,readPerson.get(""String_Node_Str"").getClass());
  assertEquals(""String_Node_Str"",Integer.class,readPerson.get(""String_Node_Str"").getClass());
}","public void testTypePreservation() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(XMLSCHEMA_DEFAULTS);
  jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(inputStream,null,null,null);
  DynamicEntity person=jaxbContext.newDynamicEntity(PERSON);
  assertNotNull(""String_Node_Str"",person);
  person.set(""String_Node_Str"",456);
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",45000.00);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  DynamicEntity readPerson=(DynamicEntity)jaxbContext.createUnmarshaller().unmarshal(marshalDoc);
  assertEquals(""String_Node_Str"",Double.class,readPerson.<Object>get(""String_Node_Str"").getClass());
  assertEquals(""String_Node_Str"",Integer.class,readPerson.<Object>get(""String_Node_Str"").getClass());
}"
66254,"/** 
 * INTERNAL: Supports Batch Writing with Optimistic Locking.
 */
public boolean canBatchWriteWithOptimisticLocking(){
  return true;
}","/** 
 * INTERNAL: Supports Batch Writing with Optimistic Locking.
 */
@Override public boolean canBatchWriteWithOptimisticLocking(DatabaseCall call){
  return true;
}"
66255,"/** 
 * Internal: This gets called on each batch statement execution Needs to be implemented so that it returns the number of rows successfully modified by this statement for optimistic locking purposes (if useNativeBatchWriting is enabled, and  the call uses optimistic locking).  
 * @param isStatementPrepared - flag is set to true if this statement is prepared 
 * @return - number of rows modified/deleted by this statement
 */
public int executeBatch(Statement statement,boolean isStatementPrepared) throws java.sql.SQLException {
  int[] updateResult=statement.executeBatch();
  int updateCount=0;
  for (  int count : updateResult) {
    if (count == Statement.SUCCESS_NO_INFO) {
      count=1;
    }
    updateCount+=count;
  }
  return updateCount;
}","/** 
 * Internal: This gets called on each batch statement execution Needs to be implemented so that it returns the number of rows successfully modified by this statement for optimistic locking purposes (if useNativeBatchWriting is enabled, and  the call uses optimistic locking).  
 * @param isStatementPrepared - flag is set to true if this statement is prepared 
 * @return - number of rows modified/deleted by this statement
 */
public int executeBatch(Statement statement,boolean isStatementPrepared) throws java.sql.SQLException {
  int[] updateResult=statement.executeBatch();
  if (isStatementPrepared) {
    int updateCount=0;
    for (    int count : updateResult) {
      if (count == Statement.SUCCESS_NO_INFO) {
        count=1;
      }
      updateCount+=count;
    }
    return updateCount;
  }
 else {
    return updateResult.length;
  }
}"
66256,"public JavaClass[] processObjectFactory(JavaClass objectFactoryClass,ArrayList<JavaClass> classes){
  Map<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl> elemDecls=new HashMap<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl>();
  org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry xmlReg=xmlRegistries.get(objectFactoryClass.getQualifiedName());
  if (xmlReg != null) {
    for (    org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlElementDecl : xmlReg.getXmlElementDecl()) {
      elemDecls.put(xmlElementDecl.getJavaMethod(),xmlElementDecl);
    }
  }
  Collection methods=objectFactoryClass.getDeclaredMethods();
  Iterator methodsIter=methods.iterator();
  NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(objectFactoryClass);
  while (methodsIter.hasNext()) {
    JavaMethod next=(JavaMethod)methodsIter.next();
    if (next.getName().startsWith(""String_Node_Str"")) {
      JavaClass type=next.getReturnType();
      if (type.getName().equals(""String_Node_Str"")) {
        type=(JavaClass)next.getReturnType().getActualTypeArguments().toArray()[0];
      }
 else {
        this.factoryMethods.put(next.getReturnType().getRawName(),next);
      }
      org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlEltDecl=elemDecls.get(next.getName());
      if (xmlEltDecl != null || helper.isAnnotationPresent(next,XmlElementDecl.class)) {
        QName qname;
        QName substitutionHead=null;
        String url;
        String localName;
        String defaultValue=null;
        Class scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
        if (xmlEltDecl != null) {
          url=xmlEltDecl.getNamespace();
          localName=xmlEltDecl.getName();
          String scopeClassName=xmlEltDecl.getScope();
          if (!scopeClassName.equals(""String_Node_Str"")) {
            JavaClass jScopeClass=helper.getJavaClass(scopeClassName);
            if (jScopeClass != null) {
              scopeClass=helper.getClassForJavaClass(jScopeClass);
              if (scopeClass == null) {
                scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
              }
            }
          }
          if (!xmlEltDecl.getSubstitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=xmlEltDecl.getSubstitutionHeadName();
            String subHeadNamespace=xmlEltDecl.getSubstitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(xmlEltDecl.getDefaultValue().length() == 1 && xmlEltDecl.getDefaultValue().startsWith(""String_Node_Str""))) {
            defaultValue=xmlEltDecl.getDefaultValue();
          }
        }
 else {
          XmlElementDecl elementDecl=(XmlElementDecl)helper.getAnnotation(next,XmlElementDecl.class);
          url=elementDecl.namespace();
          localName=elementDecl.name();
          scopeClass=elementDecl.scope();
          if (!elementDecl.substitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=elementDecl.substitutionHeadName();
            String subHeadNamespace=elementDecl.substitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(elementDecl.defaultValue().length() == 1 && elementDecl.defaultValue().startsWith(""String_Node_Str""))) {
            defaultValue=elementDecl.defaultValue();
          }
        }
        if (""String_Node_Str"".equals(url)) {
          url=namespaceInfo.getNamespace();
        }
        qname=new QName(url,localName);
        boolean isList=false;
        if (""String_Node_Str"".equals(type.getName())) {
          isList=true;
          if (type.hasActualTypeArguments()) {
            type=(JavaClass)type.getActualTypeArguments().toArray()[0];
          }
        }
        ElementDeclaration declaration=new ElementDeclaration(qname,type,type.getQualifiedName(),isList,scopeClass);
        if (substitutionHead != null) {
          declaration.setSubstitutionHead(substitutionHead);
        }
        if (defaultValue != null) {
          declaration.setDefaultValue(defaultValue);
        }
        if (helper.isAnnotationPresent(next,XmlJavaTypeAdapter.class)) {
          XmlJavaTypeAdapter typeAdapter=(XmlJavaTypeAdapter)helper.getAnnotation(next,XmlJavaTypeAdapter.class);
          Class typeAdapterClass=typeAdapter.value();
          declaration.setJavaTypeAdapterClass(typeAdapterClass);
          Class declJavaType=CompilerHelper.getTypeFromAdapterClass(typeAdapterClass);
          declaration.setJavaType(helper.getJavaClass(declJavaType));
          declaration.setAdaptedJavaType(type);
        }
        HashMap<QName,ElementDeclaration> elements=getElementDeclarationsForScope(scopeClass.getName());
        if (elements == null) {
          elements=new HashMap<QName,ElementDeclaration>();
          this.elementDeclarations.put(scopeClass.getName(),elements);
        }
        elements.put(qname,declaration);
      }
      if (!helper.isBuiltInJavaType(type) && !classes.contains(type)) {
        classes.add(type);
      }
    }
  }
  if (classes.size() > 0) {
    return classes.toArray(new JavaClass[classes.size()]);
  }
 else {
    return new JavaClass[0];
  }
}","public JavaClass[] processObjectFactory(JavaClass objectFactoryClass,ArrayList<JavaClass> classes){
  Map<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl> elemDecls=new HashMap<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl>();
  org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry xmlReg=xmlRegistries.get(objectFactoryClass.getQualifiedName());
  if (xmlReg != null) {
    for (    org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlElementDecl : xmlReg.getXmlElementDecl()) {
      elemDecls.put(xmlElementDecl.getJavaMethod(),xmlElementDecl);
    }
  }
  Collection methods=objectFactoryClass.getDeclaredMethods();
  Iterator methodsIter=methods.iterator();
  NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(objectFactoryClass);
  while (methodsIter.hasNext()) {
    JavaMethod next=(JavaMethod)methodsIter.next();
    if (next.getName().startsWith(""String_Node_Str"")) {
      JavaClass type=next.getReturnType();
      if (type.getName().equals(""String_Node_Str"")) {
        type=(JavaClass)next.getReturnType().getActualTypeArguments().toArray()[0];
      }
 else {
        this.factoryMethods.put(next.getReturnType().getRawName(),next);
      }
      org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlEltDecl=elemDecls.get(next.getName());
      if (xmlEltDecl != null || helper.isAnnotationPresent(next,XmlElementDecl.class)) {
        QName qname;
        QName substitutionHead=null;
        String url;
        String localName;
        String defaultValue=null;
        Class scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
        if (xmlEltDecl != null) {
          url=xmlEltDecl.getNamespace();
          localName=xmlEltDecl.getName();
          String scopeClassName=xmlEltDecl.getScope();
          if (!scopeClassName.equals(""String_Node_Str"")) {
            JavaClass jScopeClass=helper.getJavaClass(scopeClassName);
            if (jScopeClass != null) {
              scopeClass=helper.getClassForJavaClass(jScopeClass);
              if (scopeClass == null) {
                scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
              }
            }
          }
          if (!xmlEltDecl.getSubstitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=xmlEltDecl.getSubstitutionHeadName();
            String subHeadNamespace=xmlEltDecl.getSubstitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(xmlEltDecl.getDefaultValue().length() == 1 && xmlEltDecl.getDefaultValue().startsWith(""String_Node_Str""))) {
            defaultValue=xmlEltDecl.getDefaultValue();
          }
        }
 else {
          XmlElementDecl elementDecl=(XmlElementDecl)helper.getAnnotation(next,XmlElementDecl.class);
          url=elementDecl.namespace();
          localName=elementDecl.name();
          scopeClass=elementDecl.scope();
          if (!elementDecl.substitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=elementDecl.substitutionHeadName();
            String subHeadNamespace=elementDecl.substitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(elementDecl.defaultValue().length() == 1 && elementDecl.defaultValue().startsWith(""String_Node_Str""))) {
            defaultValue=elementDecl.defaultValue();
          }
        }
        if (""String_Node_Str"".equals(url)) {
          url=namespaceInfo.getNamespace();
        }
        qname=new QName(url,localName);
        boolean isList=false;
        if (""String_Node_Str"".equals(type.getName())) {
          isList=true;
          if (type.hasActualTypeArguments()) {
            type=(JavaClass)type.getActualTypeArguments().toArray()[0];
          }
        }
        ElementDeclaration declaration=new ElementDeclaration(qname,type,type.getQualifiedName(),isList,scopeClass);
        if (substitutionHead != null) {
          declaration.setSubstitutionHead(substitutionHead);
        }
        if (defaultValue != null) {
          declaration.setDefaultValue(defaultValue);
        }
        if (helper.isAnnotationPresent(next,XmlJavaTypeAdapter.class)) {
          XmlJavaTypeAdapter typeAdapter=(XmlJavaTypeAdapter)helper.getAnnotation(next,XmlJavaTypeAdapter.class);
          Class typeAdapterClass=typeAdapter.value();
          declaration.setJavaTypeAdapterClass(typeAdapterClass);
          Class declJavaType=CompilerHelper.getTypeFromAdapterClass(typeAdapterClass);
          declaration.setJavaType(helper.getJavaClass(declJavaType));
          declaration.setAdaptedJavaType(type);
        }
        HashMap<QName,ElementDeclaration> elements=getElementDeclarationsForScope(scopeClass.getName());
        if (elements == null) {
          elements=new HashMap<QName,ElementDeclaration>();
          this.elementDeclarations.put(scopeClass.getName(),elements);
        }
        elements.put(qname,declaration);
      }
      if (!helper.isBuiltInJavaType(type) && !helper.classExistsInArray(type,classes)) {
        classes.add(type);
      }
    }
  }
  if (classes.size() > 0) {
    return classes.toArray(new JavaClass[classes.size()]);
  }
 else {
    return new JavaClass[0];
  }
}"
66257,"/** 
 * Convenience method to determine if a class exists in a given ArrayList. The classes are compared via equals() method.
 */
public boolean classExistsInArray(JavaClass theClass,ArrayList<JavaClass> existingClasses){
  for (  JavaClass jClass : existingClasses) {
    if (areClassesEqual(jClass,theClass)) {
      return true;
    }
  }
  return false;
}","/** 
 * Convenience method to determine if a class exists in a given ArrayList. The classes are compared via equals() method.
 */
public boolean classExistsInArray(JavaClass theClass,ArrayList<JavaClass> existingClasses){
  return aProcessor.getHelper().classExistsInArray(theClass,existingClasses);
}"
66258,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(ExceptionHandlingTestCases.class);
  suite.addTestSuite(CustomizerExceptionTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(ExceptionHandlingTestCases.class);
  return suite;
}"
66259,"private Property buildTransformationProperty(JavaHasAnnotations javaHasAnnotations,JavaClass cls){
  Property property=new Property(helper);
  org.eclipse.persistence.oxm.annotations.XmlTransformation transformationAnnotation=(org.eclipse.persistence.oxm.annotations.XmlTransformation)helper.getAnnotation(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlTransformation.class);
  XmlTransformation transformation=new XmlTransformation();
  transformation.setOptional(transformationAnnotation.optional());
  org.eclipse.persistence.oxm.annotations.XmlReadTransformer readTransformer=(org.eclipse.persistence.oxm.annotations.XmlReadTransformer)helper.getAnnotation(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlReadTransformer.class);
  if (readTransformer != null) {
    org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlReadTransformer xmlReadTransformer=new org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlReadTransformer();
    if (!(readTransformer.transformerClass() == void.class)) {
      xmlReadTransformer.setTransformerClass(readTransformer.transformerClass().getName());
    }
 else     if (!(readTransformer.method().equals(""String_Node_Str""))) {
      xmlReadTransformer.setMethod(readTransformer.method());
    }
    transformation.setXmlReadTransformer(xmlReadTransformer);
  }
  org.eclipse.persistence.oxm.annotations.XmlWriteTransformer[] transformers=null;
  if (helper.isAnnotationPresent(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlWriteTransformer.class)) {
    org.eclipse.persistence.oxm.annotations.XmlWriteTransformer writeTransformer=(org.eclipse.persistence.oxm.annotations.XmlWriteTransformer)helper.getAnnotation(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlWriteTransformer.class);
    transformers=new org.eclipse.persistence.oxm.annotations.XmlWriteTransformer[]{writeTransformer};
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlWriteTransformers.class)) {
    XmlWriteTransformers writeTransformers=(XmlWriteTransformers)helper.getAnnotation(javaHasAnnotations,XmlWriteTransformers.class);
    transformers=writeTransformers.value();
  }
  if (transformers != null) {
    for (    org.eclipse.persistence.oxm.annotations.XmlWriteTransformer next : transformers) {
      org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlWriteTransformer xmlWriteTransformer=new org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlWriteTransformer();
      if (!(next.transformerClass() == void.class)) {
        xmlWriteTransformer.setTransformerClass(next.transformerClass().getName());
      }
 else       if (!(next.method().equals(""String_Node_Str""))) {
        xmlWriteTransformer.setMethod(next.method());
      }
      xmlWriteTransformer.setXmlPath(next.xpath());
      transformation.getXmlWriteTransformer().add(xmlWriteTransformer);
    }
  }
  property.setXmlTransformation(transformation);
  property.setIsXmlTransformation(true);
  return property;
}","private Property buildTransformationProperty(JavaHasAnnotations javaHasAnnotations,JavaClass cls){
  Property property=new Property(helper);
  org.eclipse.persistence.oxm.annotations.XmlTransformation transformationAnnotation=(org.eclipse.persistence.oxm.annotations.XmlTransformation)helper.getAnnotation(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlTransformation.class);
  XmlTransformation transformation=new XmlTransformation();
  transformation.setOptional(transformationAnnotation.optional());
  org.eclipse.persistence.oxm.annotations.XmlReadTransformer readTransformer=(org.eclipse.persistence.oxm.annotations.XmlReadTransformer)helper.getAnnotation(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlReadTransformer.class);
  if (readTransformer != null) {
    org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlReadTransformer xmlReadTransformer=new org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlReadTransformer();
    if (!(readTransformer.transformerClass() == AttributeTransformer.class)) {
      xmlReadTransformer.setTransformerClass(readTransformer.transformerClass().getName());
    }
 else     if (!(readTransformer.method().equals(""String_Node_Str""))) {
      xmlReadTransformer.setMethod(readTransformer.method());
    }
    transformation.setXmlReadTransformer(xmlReadTransformer);
  }
  org.eclipse.persistence.oxm.annotations.XmlWriteTransformer[] transformers=null;
  if (helper.isAnnotationPresent(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlWriteTransformer.class)) {
    org.eclipse.persistence.oxm.annotations.XmlWriteTransformer writeTransformer=(org.eclipse.persistence.oxm.annotations.XmlWriteTransformer)helper.getAnnotation(javaHasAnnotations,org.eclipse.persistence.oxm.annotations.XmlWriteTransformer.class);
    transformers=new org.eclipse.persistence.oxm.annotations.XmlWriteTransformer[]{writeTransformer};
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlWriteTransformers.class)) {
    XmlWriteTransformers writeTransformers=(XmlWriteTransformers)helper.getAnnotation(javaHasAnnotations,XmlWriteTransformers.class);
    transformers=writeTransformers.value();
  }
  if (transformers != null) {
    for (    org.eclipse.persistence.oxm.annotations.XmlWriteTransformer next : transformers) {
      org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlWriteTransformer xmlWriteTransformer=new org.eclipse.persistence.jaxb.xmlmodel.XmlTransformation.XmlWriteTransformer();
      if (!(next.transformerClass() == FieldTransformer.class)) {
        xmlWriteTransformer.setTransformerClass(next.transformerClass().getName());
      }
 else       if (!(next.method().equals(""String_Node_Str""))) {
        xmlWriteTransformer.setMethod(next.method());
      }
      xmlWriteTransformer.setXmlPath(next.xpath());
      transformation.getXmlWriteTransformer().add(xmlWriteTransformer);
    }
  }
  property.setXmlTransformation(transformation);
  property.setIsXmlTransformation(true);
  return property;
}"
66260,"/** 
 * XmlElement override will completely replace the existing values.
 * @param xmlElement
 * @param oldProperty
 * @param typeInfo
 * @param nsInfo
 * @return
 */
private Property processXmlElement(XmlElement xmlElement,Property oldProperty,TypeInfo typeInfo,NamespaceInfo nsInfo,JavaType javaType){
  resetProperty(oldProperty,typeInfo);
  if (xmlElement.getXmlMap() != null) {
    processXmlMap(xmlElement.getXmlMap(),oldProperty);
  }
  if (xmlElement.isXmlId()) {
    typeInfo.setIDProperty(oldProperty);
  }
 else   if (oldProperty.isXmlId()) {
    if (typeInfo.getIDProperty() != null && typeInfo.getIDProperty().getPropertyName().equals(oldProperty.getPropertyName())) {
      typeInfo.setIDProperty(null);
    }
  }
  oldProperty.setIsXmlId(xmlElement.isXmlId());
  oldProperty.setIsXmlIdRef(xmlElement.isXmlIdref());
  oldProperty.setIsRequired(xmlElement.isRequired());
  oldProperty.setisInlineBinaryData(xmlElement.isXmlInlineBinaryData());
  oldProperty.setNillable(xmlElement.isNillable());
  if (xmlElement.getDefaultValue().equals(""String_Node_Str"")) {
    oldProperty.setDefaultValue(null);
  }
 else {
    oldProperty.setDefaultValue(xmlElement.getDefaultValue());
  }
  String name;
  String namespace;
  if (xmlElement.getXmlPath() != null) {
    oldProperty.setXmlPath(xmlElement.getXmlPath());
    name=getNameFromXPath(xmlElement.getXmlPath(),oldProperty.getPropertyName(),false);
    namespace=DEFAULT;
  }
 else {
    name=xmlElement.getName();
    namespace=xmlElement.getNamespace();
    if (xmlElement.getXmlElementWrapper() != null) {
      oldProperty.setXmlElementWrapper(xmlElement.getXmlElementWrapper());
    }
  }
  QName qName;
  if (name.equals(DEFAULT)) {
    name=oldProperty.getPropertyName();
  }
  if (namespace.equals(DEFAULT)) {
    if (nsInfo.isElementFormQualified()) {
      qName=new QName(nsInfo.getNamespace(),name);
    }
 else {
      qName=new QName(name);
    }
  }
 else {
    qName=new QName(namespace,name);
  }
  oldProperty.setSchemaName(qName);
  if (xmlElement.getType().equals(""String_Node_Str"")) {
    if (oldProperty.isXmlElementType()) {
      oldProperty.setType(oldProperty.getOriginalType());
    }
  }
 else   if (xmlElement.getXmlMap() != null) {
    getLogger().logWarning(JAXBMetadataLogger.INVALID_TYPE_ON_MAP,new Object[]{xmlElement.getName()});
  }
 else {
    JavaClass pType=jModelInput.getJavaModel().getClass(xmlElement.getType());
    oldProperty.setType(pType);
    if (aProcessor.shouldGenerateTypeInfo(pType) && aProcessor.getTypeInfo().get(pType.getQualifiedName()) == null) {
      aProcessor.buildNewTypeInfo(new JavaClass[]{pType});
    }
  }
  if (xmlElement.getXmlJavaTypeAdapter() != null) {
    try {
      oldProperty.setXmlJavaTypeAdapter(xmlElement.getXmlJavaTypeAdapter());
    }
 catch (    JAXBException e) {
      String[] messageParams=new String[3];
      messageParams[0]=xmlElement.getXmlJavaTypeAdapter().getValue();
      messageParams[1]=xmlElement.getJavaAttribute();
      messageParams[2]=javaType.getName();
      getLogger().logWarning(JAXBMetadataLogger.INVALID_PROPERTY_LEVEL_XML_JAVA_TYPE_ADAPTER,messageParams);
      oldProperty.setXmlJavaTypeAdapter(null);
    }
  }
  if (!oldProperty.isRequired()) {
    JavaClass ptype=oldProperty.getActualType();
    oldProperty.setIsRequired(ptype.isPrimitive() || ptype.isArray() && ptype.getComponentType().isPrimitive());
  }
  if (xmlElement.isSetXmlList()) {
    if (!aProcessor.isCollectionType(oldProperty) && !oldProperty.getType().isArray()) {
      throw JAXBException.invalidList(oldProperty.getPropertyName());
    }
    oldProperty.setIsXmlList(xmlElement.isXmlList());
  }
  if (xmlElement.getXmlMimeType() != null) {
    oldProperty.setMimeType(xmlElement.getXmlMimeType());
  }
  if (xmlElement.isXmlAttachmentRef()) {
    oldProperty.setIsSwaAttachmentRef(true);
    oldProperty.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
  if (xmlElement.getXmlSchemaType() != null) {
    oldProperty.setSchemaType(new QName(xmlElement.getXmlSchemaType().getNamespace(),xmlElement.getXmlSchemaType().getName()));
  }
  if (xmlElement.getXmlAccessMethods() != null) {
    oldProperty.setMethodProperty(true);
    oldProperty.setGetMethodName(xmlElement.getXmlAccessMethods().getGetMethod());
    oldProperty.setSetMethodName(xmlElement.getXmlAccessMethods().getSetMethod());
  }
  if (xmlElement.isSetReadOnly()) {
    oldProperty.setReadOnly(xmlElement.isReadOnly());
  }
  if (xmlElement.isSetWriteOnly()) {
    oldProperty.setWriteOnly(xmlElement.isWriteOnly());
  }
  if (xmlElement.isSetCdata()) {
    oldProperty.setCdata(xmlElement.isCdata());
  }
  if (xmlElement.getXmlAbstractNullPolicy() != null) {
    JAXBElement jaxbElt=xmlElement.getXmlAbstractNullPolicy();
    oldProperty.setNullPolicy((XmlAbstractNullPolicy)jaxbElt.getValue());
  }
  if (xmlElement.getXmlProperties() != null && xmlElement.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlElement.getXmlProperties().getXmlProperty()));
  }
  return oldProperty;
}","/** 
 * XmlElement override will completely replace the existing values.
 * @param xmlElement
 * @param oldProperty
 * @param typeInfo
 * @param nsInfo
 * @return
 */
private Property processXmlElement(XmlElement xmlElement,Property oldProperty,TypeInfo typeInfo,NamespaceInfo nsInfo,JavaType javaType){
  resetProperty(oldProperty,typeInfo);
  if (xmlElement.getXmlMap() != null) {
    processXmlMap(xmlElement.getXmlMap(),oldProperty);
  }
  if (xmlElement.isXmlId()) {
    typeInfo.setIDProperty(oldProperty);
  }
 else   if (oldProperty.isXmlId()) {
    if (typeInfo.getIDProperty() != null && typeInfo.getIDProperty().getPropertyName().equals(oldProperty.getPropertyName())) {
      typeInfo.setIDProperty(null);
    }
  }
  oldProperty.setIsXmlId(xmlElement.isXmlId());
  oldProperty.setIsXmlIdRef(xmlElement.isXmlIdref());
  oldProperty.setIsRequired(xmlElement.isRequired());
  oldProperty.setisInlineBinaryData(xmlElement.isXmlInlineBinaryData());
  oldProperty.setNillable(xmlElement.isNillable());
  if (xmlElement.getDefaultValue().equals(""String_Node_Str"")) {
    oldProperty.setDefaultValue(null);
  }
 else {
    oldProperty.setDefaultValue(xmlElement.getDefaultValue());
  }
  String name;
  String namespace;
  if (xmlElement.getXmlPath() != null) {
    oldProperty.setXmlPath(xmlElement.getXmlPath());
    name=getNameFromXPath(xmlElement.getXmlPath(),oldProperty.getPropertyName(),false);
    namespace=DEFAULT;
  }
 else {
    name=xmlElement.getName();
    namespace=xmlElement.getNamespace();
    if (xmlElement.getXmlElementWrapper() != null) {
      oldProperty.setXmlElementWrapper(xmlElement.getXmlElementWrapper());
    }
  }
  QName qName;
  if (name.equals(DEFAULT)) {
    name=oldProperty.getPropertyName();
  }
  if (namespace.equals(DEFAULT)) {
    if (nsInfo.isElementFormQualified()) {
      qName=new QName(nsInfo.getNamespace(),name);
    }
 else {
      qName=new QName(name);
    }
  }
 else {
    qName=new QName(namespace,name);
  }
  oldProperty.setSchemaName(qName);
  if (xmlElement.getType().equals(""String_Node_Str"")) {
    if (oldProperty.isXmlElementType()) {
      oldProperty.setType(oldProperty.getOriginalType());
    }
  }
 else   if (xmlElement.getXmlMap() != null) {
    getLogger().logWarning(JAXBMetadataLogger.INVALID_TYPE_ON_MAP,new Object[]{xmlElement.getName()});
  }
 else {
    JavaClass pType=jModelInput.getJavaModel().getClass(xmlElement.getType());
    oldProperty.setType(pType);
    oldProperty.setHasXmlElementType(true);
    if (aProcessor.shouldGenerateTypeInfo(pType) && aProcessor.getTypeInfo().get(pType.getQualifiedName()) == null) {
      aProcessor.buildNewTypeInfo(new JavaClass[]{pType});
    }
  }
  if (xmlElement.getXmlJavaTypeAdapter() != null) {
    try {
      oldProperty.setXmlJavaTypeAdapter(xmlElement.getXmlJavaTypeAdapter());
    }
 catch (    JAXBException e) {
      String[] messageParams=new String[3];
      messageParams[0]=xmlElement.getXmlJavaTypeAdapter().getValue();
      messageParams[1]=xmlElement.getJavaAttribute();
      messageParams[2]=javaType.getName();
      getLogger().logWarning(JAXBMetadataLogger.INVALID_PROPERTY_LEVEL_XML_JAVA_TYPE_ADAPTER,messageParams);
      oldProperty.setXmlJavaTypeAdapter(null);
    }
  }
  if (!oldProperty.isRequired()) {
    JavaClass ptype=oldProperty.getActualType();
    oldProperty.setIsRequired(ptype.isPrimitive() || ptype.isArray() && ptype.getComponentType().isPrimitive());
  }
  if (xmlElement.isSetXmlList()) {
    if (!aProcessor.isCollectionType(oldProperty) && !oldProperty.getType().isArray()) {
      throw JAXBException.invalidList(oldProperty.getPropertyName());
    }
    oldProperty.setIsXmlList(xmlElement.isXmlList());
  }
  if (xmlElement.getXmlMimeType() != null) {
    oldProperty.setMimeType(xmlElement.getXmlMimeType());
  }
  if (xmlElement.isXmlAttachmentRef()) {
    oldProperty.setIsSwaAttachmentRef(true);
    oldProperty.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
  if (xmlElement.getXmlSchemaType() != null) {
    oldProperty.setSchemaType(new QName(xmlElement.getXmlSchemaType().getNamespace(),xmlElement.getXmlSchemaType().getName()));
  }
  if (xmlElement.getXmlAccessMethods() != null) {
    oldProperty.setMethodProperty(true);
    oldProperty.setGetMethodName(xmlElement.getXmlAccessMethods().getGetMethod());
    oldProperty.setSetMethodName(xmlElement.getXmlAccessMethods().getSetMethod());
  }
  if (xmlElement.isSetReadOnly()) {
    oldProperty.setReadOnly(xmlElement.isReadOnly());
  }
  if (xmlElement.isSetWriteOnly()) {
    oldProperty.setWriteOnly(xmlElement.isWriteOnly());
  }
  if (xmlElement.isSetCdata()) {
    oldProperty.setCdata(xmlElement.isCdata());
  }
  if (xmlElement.getXmlAbstractNullPolicy() != null) {
    JAXBElement jaxbElt=xmlElement.getXmlAbstractNullPolicy();
    oldProperty.setNullPolicy((XmlAbstractNullPolicy)jaxbElt.getValue());
  }
  if (xmlElement.getXmlProperties() != null && xmlElement.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlElement.getXmlProperties().getXmlProperty()));
  }
  return oldProperty;
}"
66261,"/** 
 * XmlAttribute override will completely replace the existing values.
 * @param xmlAttribute
 * @param oldProperty
 * @param nsInfo
 * @return
 */
private Property processXmlAttribute(XmlAttribute xmlAttribute,Property oldProperty,TypeInfo typeInfo,NamespaceInfo nsInfo){
  resetProperty(oldProperty,typeInfo);
  if (xmlAttribute.isXmlId()) {
    typeInfo.setIDProperty(oldProperty);
  }
 else   if (oldProperty.isXmlId()) {
    if (typeInfo.getIDProperty() != null && typeInfo.getIDProperty().getPropertyName().equals(oldProperty.getPropertyName())) {
      typeInfo.setIDProperty(null);
    }
  }
  oldProperty.setIsXmlId(xmlAttribute.isXmlId());
  oldProperty.setIsXmlIdRef(xmlAttribute.isXmlIdref());
  oldProperty.setIsAttribute(true);
  if (xmlAttribute.getXmlJavaTypeAdapter() != null) {
    oldProperty.setXmlJavaTypeAdapter(xmlAttribute.getXmlJavaTypeAdapter());
  }
  if (xmlAttribute.isSetRequired()) {
    oldProperty.setIsRequired(xmlAttribute.isRequired());
  }
 else   if (oldProperty.getActualType().isPrimitive()) {
    oldProperty.setIsRequired(true);
  }
  oldProperty.setisInlineBinaryData(xmlAttribute.isXmlInlineBinaryData());
  String name;
  String namespace;
  if (xmlAttribute.getXmlPath() != null) {
    oldProperty.setXmlPath(xmlAttribute.getXmlPath());
    name=getNameFromXPath(xmlAttribute.getXmlPath(),oldProperty.getPropertyName(),true);
    namespace=DEFAULT;
  }
 else {
    name=xmlAttribute.getName();
    namespace=xmlAttribute.getNamespace();
  }
  QName qName;
  if (name.equals(DEFAULT)) {
    name=oldProperty.getPropertyName();
  }
  if (namespace.equals(DEFAULT)) {
    if (nsInfo.isElementFormQualified()) {
      qName=new QName(nsInfo.getNamespace(),name);
    }
 else {
      qName=new QName(name);
    }
  }
 else {
    qName=new QName(namespace,name);
  }
  oldProperty.setSchemaName(qName);
  if (!xmlAttribute.getType().equals(DEFAULT)) {
    JavaClass pType=jModelInput.getJavaModel().getClass(xmlAttribute.getType());
    oldProperty.setType(pType);
    if (aProcessor.shouldGenerateTypeInfo(pType) && aProcessor.getTypeInfo().get(pType.getQualifiedName()) == null) {
      aProcessor.buildNewTypeInfo(new JavaClass[]{pType});
    }
  }
  if (xmlAttribute.getXmlMimeType() != null) {
    oldProperty.setMimeType(xmlAttribute.getXmlMimeType());
  }
  if (xmlAttribute.isXmlAttachmentRef()) {
    oldProperty.setIsSwaAttachmentRef(true);
    oldProperty.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
  if (xmlAttribute.getXmlSchemaType() != null) {
    oldProperty.setSchemaType(new QName(xmlAttribute.getXmlSchemaType().getNamespace(),xmlAttribute.getXmlSchemaType().getName()));
  }
  if (xmlAttribute.getXmlAccessMethods() != null) {
    oldProperty.setMethodProperty(true);
    oldProperty.setGetMethodName(xmlAttribute.getXmlAccessMethods().getGetMethod());
    oldProperty.setSetMethodName(xmlAttribute.getXmlAccessMethods().getSetMethod());
  }
  if (xmlAttribute.isSetReadOnly()) {
    oldProperty.setReadOnly(xmlAttribute.isReadOnly());
  }
  if (xmlAttribute.isSetWriteOnly()) {
    oldProperty.setWriteOnly(xmlAttribute.isWriteOnly());
  }
  if (xmlAttribute.getXmlAbstractNullPolicy() != null) {
    JAXBElement jaxbElt=xmlAttribute.getXmlAbstractNullPolicy();
    oldProperty.setNullPolicy((XmlAbstractNullPolicy)jaxbElt.getValue());
  }
  if (xmlAttribute.getXmlProperties() != null && xmlAttribute.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlAttribute.getXmlProperties().getXmlProperty()));
  }
  return oldProperty;
}","/** 
 * XmlAttribute override will completely replace the existing values.
 * @param xmlAttribute
 * @param oldProperty
 * @param nsInfo
 * @return
 */
private Property processXmlAttribute(XmlAttribute xmlAttribute,Property oldProperty,TypeInfo typeInfo,NamespaceInfo nsInfo){
  resetProperty(oldProperty,typeInfo);
  if (xmlAttribute.isXmlId()) {
    typeInfo.setIDProperty(oldProperty);
  }
 else   if (oldProperty.isXmlId()) {
    if (typeInfo.getIDProperty() != null && typeInfo.getIDProperty().getPropertyName().equals(oldProperty.getPropertyName())) {
      typeInfo.setIDProperty(null);
    }
  }
  oldProperty.setIsXmlId(xmlAttribute.isXmlId());
  oldProperty.setIsXmlIdRef(xmlAttribute.isXmlIdref());
  oldProperty.setIsAttribute(true);
  if (xmlAttribute.getXmlJavaTypeAdapter() != null) {
    oldProperty.setXmlJavaTypeAdapter(xmlAttribute.getXmlJavaTypeAdapter());
  }
  if (xmlAttribute.isSetRequired()) {
    oldProperty.setIsRequired(xmlAttribute.isRequired());
  }
 else   if (oldProperty.getActualType().isPrimitive()) {
    oldProperty.setIsRequired(true);
  }
  oldProperty.setisInlineBinaryData(xmlAttribute.isXmlInlineBinaryData());
  String name;
  String namespace;
  if (xmlAttribute.getXmlPath() != null) {
    oldProperty.setXmlPath(xmlAttribute.getXmlPath());
    name=getNameFromXPath(xmlAttribute.getXmlPath(),oldProperty.getPropertyName(),true);
    namespace=DEFAULT;
  }
 else {
    name=xmlAttribute.getName();
    namespace=xmlAttribute.getNamespace();
  }
  QName qName;
  if (name.equals(DEFAULT)) {
    name=oldProperty.getPropertyName();
  }
  if (namespace.equals(DEFAULT)) {
    if (nsInfo.isElementFormQualified()) {
      qName=new QName(nsInfo.getNamespace(),name);
    }
 else {
      qName=new QName(name);
    }
  }
 else {
    qName=new QName(namespace,name);
  }
  oldProperty.setSchemaName(qName);
  if (!xmlAttribute.getType().equals(DEFAULT)) {
    JavaClass pType=jModelInput.getJavaModel().getClass(xmlAttribute.getType());
    oldProperty.setType(pType);
    oldProperty.setHasXmlElementType(true);
    if (aProcessor.shouldGenerateTypeInfo(pType) && aProcessor.getTypeInfo().get(pType.getQualifiedName()) == null) {
      aProcessor.buildNewTypeInfo(new JavaClass[]{pType});
    }
  }
  if (xmlAttribute.getXmlMimeType() != null) {
    oldProperty.setMimeType(xmlAttribute.getXmlMimeType());
  }
  if (xmlAttribute.isXmlAttachmentRef()) {
    oldProperty.setIsSwaAttachmentRef(true);
    oldProperty.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
  if (xmlAttribute.getXmlSchemaType() != null) {
    oldProperty.setSchemaType(new QName(xmlAttribute.getXmlSchemaType().getNamespace(),xmlAttribute.getXmlSchemaType().getName()));
  }
  if (xmlAttribute.getXmlAccessMethods() != null) {
    oldProperty.setMethodProperty(true);
    oldProperty.setGetMethodName(xmlAttribute.getXmlAccessMethods().getGetMethod());
    oldProperty.setSetMethodName(xmlAttribute.getXmlAccessMethods().getSetMethod());
  }
  if (xmlAttribute.isSetReadOnly()) {
    oldProperty.setReadOnly(xmlAttribute.isReadOnly());
  }
  if (xmlAttribute.isSetWriteOnly()) {
    oldProperty.setWriteOnly(xmlAttribute.isWriteOnly());
  }
  if (xmlAttribute.getXmlAbstractNullPolicy() != null) {
    JAXBElement jaxbElt=xmlAttribute.getXmlAbstractNullPolicy();
    oldProperty.setNullPolicy((XmlAbstractNullPolicy)jaxbElt.getValue());
  }
  if (xmlAttribute.getXmlProperties() != null && xmlAttribute.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlAttribute.getXmlProperties().getXmlProperty()));
  }
  return oldProperty;
}"
66262,"/** 
 * Handle xml-any-attribute.
 * @param xmlAnyAttribute
 * @param oldProperty
 * @param tInfo
 * @param javaType
 * @return
 */
private Property processXmlAnyAttribute(XmlAnyAttribute xmlAnyAttribute,Property oldProperty,TypeInfo tInfo,JavaType javaType){
  if (oldProperty.isAnyAttribute()) {
    return oldProperty;
  }
  if (!oldProperty.getType().getName().equals(""String_Node_Str"")) {
    throw org.eclipse.persistence.exceptions.JAXBException.anyAttributeOnNonMap(oldProperty.getPropertyName());
  }
  resetProperty(oldProperty,tInfo);
  oldProperty.setIsAnyAttribute(true);
  tInfo.setAnyAttributePropertyName(oldProperty.getPropertyName());
  if (xmlAnyAttribute.getXmlPath() != null) {
    oldProperty.setXmlPath(xmlAnyAttribute.getXmlPath());
  }
  if (xmlAnyAttribute.getXmlAccessMethods() != null) {
    oldProperty.setMethodProperty(true);
    oldProperty.setGetMethodName(xmlAnyAttribute.getXmlAccessMethods().getGetMethod());
    oldProperty.setSetMethodName(xmlAnyAttribute.getXmlAccessMethods().getSetMethod());
  }
  if (xmlAnyAttribute.isSetReadOnly()) {
    oldProperty.setReadOnly(xmlAnyAttribute.isReadOnly());
  }
  if (xmlAnyAttribute.isSetWriteOnly()) {
    oldProperty.setWriteOnly(xmlAnyAttribute.isWriteOnly());
  }
  if (xmlAnyAttribute.getXmlProperties() != null && xmlAnyAttribute.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlAnyAttribute.getXmlProperties().getXmlProperty()));
  }
  return oldProperty;
}","/** 
 * Handle xml-any-attribute.
 * @param xmlAnyAttribute
 * @param oldProperty
 * @param tInfo
 * @param javaType
 * @return
 */
private Property processXmlAnyAttribute(XmlAnyAttribute xmlAnyAttribute,Property oldProperty,TypeInfo tInfo,JavaType javaType){
  if (oldProperty.isAnyAttribute()) {
    return oldProperty;
  }
  if (!oldProperty.getType().getName().equals(""String_Node_Str"")) {
    if (oldProperty.getType().getClass().getName().contains(""String_Node_Str"")) {
      JavaClass pType=jModelInput.getJavaModel().getClass(""String_Node_Str"");
      oldProperty.setType(pType);
    }
 else {
      throw org.eclipse.persistence.exceptions.JAXBException.anyAttributeOnNonMap(oldProperty.getPropertyName());
    }
  }
  resetProperty(oldProperty,tInfo);
  oldProperty.setIsAnyAttribute(true);
  tInfo.setAnyAttributePropertyName(oldProperty.getPropertyName());
  if (xmlAnyAttribute.getXmlPath() != null) {
    oldProperty.setXmlPath(xmlAnyAttribute.getXmlPath());
  }
  if (xmlAnyAttribute.getXmlAccessMethods() != null) {
    oldProperty.setMethodProperty(true);
    oldProperty.setGetMethodName(xmlAnyAttribute.getXmlAccessMethods().getGetMethod());
    oldProperty.setSetMethodName(xmlAnyAttribute.getXmlAccessMethods().getSetMethod());
  }
  if (xmlAnyAttribute.isSetReadOnly()) {
    oldProperty.setReadOnly(xmlAnyAttribute.isReadOnly());
  }
  if (xmlAnyAttribute.isSetWriteOnly()) {
    oldProperty.setWriteOnly(xmlAnyAttribute.isWriteOnly());
  }
  if (xmlAnyAttribute.getXmlProperties() != null && xmlAnyAttribute.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlAnyAttribute.getXmlProperties().getXmlProperty()));
  }
  return oldProperty;
}"
66263,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(XmlNullPolicyTestCases.class);
  suite.addTestSuite(XmlAccessMethodsTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(XmlNullPolicyTestCases.class);
  suite.addTestSuite(XmlAccessMethodsTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlPropertyTestCases.class);
  suite.addTestSuite(XmlTransformationTestCases.class);
  suite.addTestSuite(XmlTransformationMethodTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  return suite;
}"
66264,"public void endElement(String uri,String localName,String qName) throws SAXException {
  levelIndex--;
  EndElementEvent event=new EndElementEvent(uri,localName,qName);
  events.add(event);
  if (charactersOccurred) {
    processSimpleElement();
  }
 else   if (startOccurred) {
    processEmptyElement();
  }
  if ((levelIndex == 0) && (parent != null)) {
    XMLReader xmlReader=parent.getXMLReader();
    xmlReader.setContentHandler(parent);
    xmlReader.setLexicalHandler(parent);
  }
}","public void endElement(String uri,String localName,String qName) throws SAXException {
  levelIndex--;
  EndElementEvent event=new EndElementEvent(uri,localName,qName);
  events.add(event);
  if (charactersOccurred) {
    processSimpleElement();
  }
 else   if (startOccurred) {
    if (attributesOccurred) {
      processEmptyElementWithAttributes();
    }
 else {
      processEmptyElement();
    }
  }
  if ((levelIndex == 0) && (parent != null)) {
    XMLReader xmlReader=parent.getXMLReader();
    xmlReader.setContentHandler(parent);
    xmlReader.setLexicalHandler(parent);
  }
}"
66265,"protected AttributeList buildAttributeList(Attributes attrs) throws SAXException {
  AttributeList attributes=new AttributeList(attrs.getLength());
  for (int i=0; i < attrs.getLength(); i++) {
    attributes.addAttribute(attrs.getLocalName(i),attrs.getQName(i),attrs.getURI(i),attrs.getType(i),attrs.getValue(i),i);
  }
  return attributes;
}","protected AttributeList buildAttributeList(Attributes attrs) throws SAXException {
  int attrsLength=attrs.getLength();
  AttributeList attributes=new AttributeList(attrsLength);
  for (int i=0; i < attrsLength; i++) {
    String qName=attrs.getQName(i);
    String uri=attrs.getURI(i);
    attributes.addAttribute(attrs.getLocalName(i),qName,uri,attrs.getType(i),attrs.getValue(i),i);
    if (!XMLConstants.SCHEMA_INSTANCE_URL.equals(uri) && (null != qName && !qName.startsWith(XMLConstants.XMLNS))) {
      attributesOccurred=true;
    }
  }
  return attributes;
}"
66266,"public void testNonNullComplexElement() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  saxParser.getXMLReader().parse(new InputSource(inputStream));
  assertEquals(1,tdch.PROCESS_COMPLEX_ELEMENT);
  assertEquals(0,tdch.PROCESS_EMPTY);
  assertEquals(0,tdch.PROCESS_SIMPLE_ELEMENT);
}","public void testNonNullComplexElement() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  saxParser.getXMLReader().parse(new InputSource(inputStream));
  assertEquals(1,tdch.PROCESS_COMPLEX_ELEMENT);
  assertEquals(0,tdch.PROCESS_EMPTY);
  assertEquals(0,tdch.PROCESS_EMPTY_WITH_ATTRIBUTES);
  assertEquals(0,tdch.PROCESS_SIMPLE_ELEMENT);
}"
66267,"public void testNonNullSimpleElement() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  saxParser.getXMLReader().parse(new InputSource(inputStream));
  assertEquals(1,tdch.PROCESS_SIMPLE_ELEMENT);
  assertEquals(0,tdch.PROCESS_COMPLEX_ELEMENT);
  assertEquals(0,tdch.PROCESS_EMPTY);
}","public void testNonNullSimpleElement() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  saxParser.getXMLReader().parse(new InputSource(inputStream));
  assertEquals(1,tdch.PROCESS_SIMPLE_ELEMENT);
  assertEquals(0,tdch.PROCESS_COMPLEX_ELEMENT);
  assertEquals(0,tdch.PROCESS_EMPTY);
  assertEquals(0,tdch.PROCESS_EMPTY_WITH_ATTRIBUTES);
}"
66268,"public void testEmptyElement() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  saxParser.getXMLReader().parse(new InputSource(inputStream));
  assertEquals(1,tdch.PROCESS_EMPTY);
  assertEquals(0,tdch.PROCESS_SIMPLE_ELEMENT);
  assertEquals(0,tdch.PROCESS_COMPLEX_ELEMENT);
}","public void testEmptyElement() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  saxParser.getXMLReader().parse(new InputSource(inputStream));
  assertEquals(1,tdch.PROCESS_EMPTY);
  assertEquals(0,tdch.PROCESS_EMPTY_WITH_ATTRIBUTES);
  assertEquals(0,tdch.PROCESS_SIMPLE_ELEMENT);
  assertEquals(0,tdch.PROCESS_COMPLEX_ELEMENT);
}"
66269,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(XmlNullPolicyTestCases.class);
  suite.addTestSuite(XmlAccessMethodsTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(XmlNullPolicyTestCases.class);
  suite.addTestSuite(XmlAccessMethodsTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  return suite;
}"
66270,"private void processPropertyAnnotations(TypeInfo info,JavaClass cls,JavaHasAnnotations javaHasAnnotations,Property property){
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlMixed.class)) {
    info.setMixed(true);
    property.setMixedContent(true);
  }
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlContainerProperty.class)) {
    XmlContainerProperty container=(XmlContainerProperty)helper.getAnnotation(javaHasAnnotations,XmlContainerProperty.class);
    property.setInverseReferencePropertyName(container.value());
    property.setInverseReferencePropertyGetMethodName(container.getMethodName());
    property.setInverseReferencePropertySetMethodName(container.setMethodName());
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlInverseReference.class)) {
    XmlInverseReference inverseReference=(XmlInverseReference)helper.getAnnotation(javaHasAnnotations,XmlInverseReference.class);
    property.setInverseReferencePropertyName(inverseReference.mappedBy());
    TypeInfo targetInfo=this.getTypeInfo().get(property.getActualType().getName());
    if (targetInfo != null && targetInfo.getXmlAccessType() == XmlAccessType.PROPERTY) {
      String propName=property.getPropertyName();
      propName=Character.toUpperCase(propName.charAt(0)) + propName.substring(1);
      property.setInverseReferencePropertyGetMethodName(""String_Node_Str"" + propName);
      property.setInverseReferencePropertySetMethodName(""String_Node_Str"" + propName);
    }
    property.setInverseReference(true);
  }
  processXmlJavaTypeAdapter(property,info,cls);
  processXmlElement(property,info);
  JavaClass ptype=property.getActualType();
  if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
    property.setIsSwaAttachmentRef(true);
    property.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
 else   if (areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(ptype,byte[].class) || areEquals(ptype,Byte[].class)|| areEquals(ptype,Image.class)|| areEquals(ptype,Source.class)|| areEquals(ptype,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
    property.setIsMtomAttachment(true);
    property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
    property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlInlineBinaryData.class) || info.isBinaryDataToBeInlined()) {
    property.setisInlineBinaryData(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
    XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
    QName schemaTypeQname=new QName(schemaType.namespace(),schemaType.name());
    property.setSchemaType(schemaTypeQname);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class)) {
    property.setIsAttribute(true);
    property.setIsRequired(((XmlAttribute)helper.getAnnotation(property.getElement(),XmlAttribute.class)).required());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
    if (info.isSetAnyAttributePropertyName()) {
      throw org.eclipse.persistence.exceptions.JAXBException.multipleAnyAttributeMapping(cls.getName());
    }
    if (!property.getType().getName().equals(""String_Node_Str"")) {
      throw org.eclipse.persistence.exceptions.JAXBException.anyAttributeOnNonMap(property.getPropertyName());
    }
    property.setIsAnyAttribute(true);
    info.setAnyAttributePropertyName(property.getPropertyName());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlElementWrapper.class)) {
    XmlElementWrapper wrapper=(XmlElementWrapper)helper.getAnnotation(property.getElement(),XmlElementWrapper.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper xmlEltWrapper=new org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper();
    xmlEltWrapper.setName(wrapper.name());
    xmlEltWrapper.setNamespace(wrapper.namespace());
    xmlEltWrapper.setNillable(wrapper.nillable());
    xmlEltWrapper.setRequired(wrapper.required());
    property.setXmlElementWrapper(xmlEltWrapper);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlList.class)) {
    if (!isCollectionType(property) && !property.getType().isArray()) {
      throw JAXBException.invalidList(property.getPropertyName());
    }
    property.setIsXmlList(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlValue.class)) {
    property.setIsXmlValue(true);
    info.setXmlValueProperty(property);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlReadOnly.class)) {
    property.setReadOnly(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlWriteOnly.class)) {
    property.setWriteOnly(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlCDATA.class)) {
    property.setCdata(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAccessMethods.class)) {
    XmlAccessMethods accessMethods=(XmlAccessMethods)helper.getAnnotation(property.getElement(),XmlAccessMethods.class);
    if (!(accessMethods.getMethodName().equals(""String_Node_Str""))) {
      property.setGetMethodName(accessMethods.getMethodName());
    }
    if (!(accessMethods.setMethodName().equals(""String_Node_Str""))) {
      property.setSetMethodName(accessMethods.setMethodName());
    }
    if (!(property.isMethodProperty())) {
      property.setMethodProperty(true);
    }
  }
  processXmlNullPolicy(property);
}","private void processPropertyAnnotations(TypeInfo info,JavaClass cls,JavaHasAnnotations javaHasAnnotations,Property property){
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlMixed.class)) {
    info.setMixed(true);
    property.setMixedContent(true);
  }
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlContainerProperty.class)) {
    XmlContainerProperty container=(XmlContainerProperty)helper.getAnnotation(javaHasAnnotations,XmlContainerProperty.class);
    property.setInverseReferencePropertyName(container.value());
    property.setInverseReferencePropertyGetMethodName(container.getMethodName());
    property.setInverseReferencePropertySetMethodName(container.setMethodName());
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlInverseReference.class)) {
    XmlInverseReference inverseReference=(XmlInverseReference)helper.getAnnotation(javaHasAnnotations,XmlInverseReference.class);
    property.setInverseReferencePropertyName(inverseReference.mappedBy());
    TypeInfo targetInfo=this.getTypeInfo().get(property.getActualType().getName());
    if (targetInfo != null && targetInfo.getXmlAccessType() == XmlAccessType.PROPERTY) {
      String propName=property.getPropertyName();
      propName=Character.toUpperCase(propName.charAt(0)) + propName.substring(1);
      property.setInverseReferencePropertyGetMethodName(""String_Node_Str"" + propName);
      property.setInverseReferencePropertySetMethodName(""String_Node_Str"" + propName);
    }
    property.setInverseReference(true);
  }
  processXmlJavaTypeAdapter(property,info,cls);
  processXmlElement(property,info);
  JavaClass ptype=property.getActualType();
  if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
    property.setIsSwaAttachmentRef(true);
    property.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
 else   if (areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(ptype,byte[].class) || areEquals(ptype,Byte[].class)|| areEquals(ptype,Image.class)|| areEquals(ptype,Source.class)|| areEquals(ptype,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
    property.setIsMtomAttachment(true);
    property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
    property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlInlineBinaryData.class) || info.isBinaryDataToBeInlined()) {
    property.setisInlineBinaryData(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
    XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
    QName schemaTypeQname=new QName(schemaType.namespace(),schemaType.name());
    property.setSchemaType(schemaTypeQname);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class)) {
    property.setIsAttribute(true);
    property.setIsRequired(((XmlAttribute)helper.getAnnotation(property.getElement(),XmlAttribute.class)).required());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
    if (info.isSetAnyAttributePropertyName()) {
      throw org.eclipse.persistence.exceptions.JAXBException.multipleAnyAttributeMapping(cls.getName());
    }
    if (!property.getType().getName().equals(""String_Node_Str"")) {
      throw org.eclipse.persistence.exceptions.JAXBException.anyAttributeOnNonMap(property.getPropertyName());
    }
    property.setIsAnyAttribute(true);
    info.setAnyAttributePropertyName(property.getPropertyName());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlElementWrapper.class)) {
    XmlElementWrapper wrapper=(XmlElementWrapper)helper.getAnnotation(property.getElement(),XmlElementWrapper.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper xmlEltWrapper=new org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper();
    xmlEltWrapper.setName(wrapper.name());
    xmlEltWrapper.setNamespace(wrapper.namespace());
    xmlEltWrapper.setNillable(wrapper.nillable());
    xmlEltWrapper.setRequired(wrapper.required());
    property.setXmlElementWrapper(xmlEltWrapper);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlList.class)) {
    if (!isCollectionType(property) && !property.getType().isArray()) {
      throw JAXBException.invalidList(property.getPropertyName());
    }
    property.setIsXmlList(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlValue.class)) {
    property.setIsXmlValue(true);
    info.setXmlValueProperty(property);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlReadOnly.class)) {
    property.setReadOnly(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlWriteOnly.class)) {
    property.setWriteOnly(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlCDATA.class)) {
    property.setCdata(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAccessMethods.class)) {
    XmlAccessMethods accessMethods=(XmlAccessMethods)helper.getAnnotation(property.getElement(),XmlAccessMethods.class);
    if (!(accessMethods.getMethodName().equals(""String_Node_Str""))) {
      property.setGetMethodName(accessMethods.getMethodName());
    }
    if (!(accessMethods.setMethodName().equals(""String_Node_Str""))) {
      property.setSetMethodName(accessMethods.setMethodName());
    }
    if (!(property.isMethodProperty())) {
      property.setMethodProperty(true);
    }
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlProperties.class)) {
    XmlProperties xmlProperties=(XmlProperties)helper.getAnnotation(property.getElement(),XmlProperties.class);
    Map<Object,Object> propertiesMap=createUserPropertiesMap(xmlProperties.value());
    property.setUserProperties(propertiesMap);
  }
 else   if (helper.isAnnotationPresent(property.getElement(),XmlProperty.class)) {
    XmlProperty xmlProperty=(XmlProperty)helper.getAnnotation(property.getElement(),XmlProperty.class);
    Map<Object,Object> propertiesMap=createUserPropertiesMap(new XmlProperty[]{xmlProperty});
    property.setUserProperties(propertiesMap);
  }
  processXmlNullPolicy(property);
}"
66271,"/** 
 * Process class level annotations only. It is assumed that a call to init()  has been made prior to calling this method. After the types created via  this method have been modified (if necessary) postBuildTypeInfo and  processJavaClasses should be called to finish processing.
 * @param javaClasses
 * @return
 */
public Map<String,TypeInfo> preBuildTypeInfo(JavaClass[] javaClasses){
  for (  JavaClass javaClass : javaClasses) {
    if (javaClass == null || !shouldGenerateTypeInfo(javaClass) || isXmlRegistry(javaClass) || javaClass.isArray()) {
      continue;
    }
    TypeInfo info=typeInfo.get(javaClass.getQualifiedName());
    if (info != null) {
      if (info.isPreBuilt()) {
        continue;
      }
    }
    if (javaClass.isEnum()) {
      info=new EnumTypeInfo(helper);
    }
 else {
      info=new TypeInfo(helper);
    }
    info.setPreBuilt(true);
    if (helper.isAnnotationPresent(javaClass,XmlTransient.class)) {
      info.setXmlTransient(true);
    }
    if (helper.isAnnotationPresent(javaClass,XmlInlineBinaryData.class)) {
      info.setInlineBinaryData(true);
    }
    processXmlRootElement(javaClass,info);
    processXmlSeeAlso(javaClass,info);
    NamespaceInfo packageNamespace=getNamespaceInfoForPackage(javaClass);
    preProcessXmlType(javaClass,info,packageNamespace);
    preProcessXmlAccessorType(javaClass,info,packageNamespace);
    preProcessXmlAccessorOrder(javaClass,info,packageNamespace);
    processPackageLevelAdapters(javaClass,info);
    processClassLevelAdapters(javaClass,info);
    preProcessCustomizer(javaClass,info);
    processSchemaTypes(javaClass,info);
    if (helper.isAnnotationPresent(javaClass,XmlClassExtractor.class)) {
      XmlClassExtractor classExtractor=(XmlClassExtractor)helper.getAnnotation(javaClass,XmlClassExtractor.class);
      info.setClassExtractorName(classExtractor.value().getName());
    }
    typeInfoClasses.add(javaClass);
    typeInfo.put(javaClass.getQualifiedName(),info);
  }
  return typeInfo;
}","/** 
 * Process class level annotations only. It is assumed that a call to init()  has been made prior to calling this method. After the types created via  this method have been modified (if necessary) postBuildTypeInfo and  processJavaClasses should be called to finish processing.
 * @param javaClasses
 * @return
 */
public Map<String,TypeInfo> preBuildTypeInfo(JavaClass[] javaClasses){
  for (  JavaClass javaClass : javaClasses) {
    if (javaClass == null || !shouldGenerateTypeInfo(javaClass) || isXmlRegistry(javaClass) || javaClass.isArray()) {
      continue;
    }
    TypeInfo info=typeInfo.get(javaClass.getQualifiedName());
    if (info != null) {
      if (info.isPreBuilt()) {
        continue;
      }
    }
    if (javaClass.isEnum()) {
      info=new EnumTypeInfo(helper);
    }
 else {
      info=new TypeInfo(helper);
    }
    info.setPreBuilt(true);
    if (helper.isAnnotationPresent(javaClass,XmlTransient.class)) {
      info.setXmlTransient(true);
    }
    if (helper.isAnnotationPresent(javaClass,XmlInlineBinaryData.class)) {
      info.setInlineBinaryData(true);
    }
    processXmlRootElement(javaClass,info);
    processXmlSeeAlso(javaClass,info);
    NamespaceInfo packageNamespace=getNamespaceInfoForPackage(javaClass);
    preProcessXmlType(javaClass,info,packageNamespace);
    preProcessXmlAccessorType(javaClass,info,packageNamespace);
    preProcessXmlAccessorOrder(javaClass,info,packageNamespace);
    processPackageLevelAdapters(javaClass,info);
    processClassLevelAdapters(javaClass,info);
    preProcessCustomizer(javaClass,info);
    processSchemaTypes(javaClass,info);
    if (helper.isAnnotationPresent(javaClass,XmlClassExtractor.class)) {
      XmlClassExtractor classExtractor=(XmlClassExtractor)helper.getAnnotation(javaClass,XmlClassExtractor.class);
      info.setClassExtractorName(classExtractor.value().getName());
    }
    if (helper.isAnnotationPresent(javaClass,XmlProperties.class)) {
      XmlProperties xmlProperties=(XmlProperties)helper.getAnnotation(javaClass,XmlProperties.class);
      Map<Object,Object> propertiesMap=createUserPropertiesMap(xmlProperties.value());
      info.setUserProperties(propertiesMap);
    }
 else     if (helper.isAnnotationPresent(javaClass,XmlProperty.class)) {
      XmlProperty xmlProperty=(XmlProperty)helper.getAnnotation(javaClass,XmlProperty.class);
      Map<Object,Object> propertiesMap=createUserPropertiesMap(new XmlProperty[]{xmlProperty});
      info.setUserProperties(propertiesMap);
    }
    typeInfoClasses.add(javaClass);
    typeInfo.put(javaClass.getQualifiedName(),info);
  }
  return typeInfo;
}"
66272,"public void testExpertBeerConsumerRecordsCRUD(){
  String errorMsg=""String_Node_Str"";
  int nRecords;
  int nRecordsExpected=2;
  clearCache();
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    ExpertBeerConsumer consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    nRecords=consumer.getRecords().size();
    commitTransaction(em);
    closeEntityManager(em);
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    em=createEntityManager();
    beginTransaction(em);
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    Record recordToRemove=consumer.getRecords().iterator().next();
    consumer.getRecords().remove(recordToRemove);
    commitTransaction(em);
    closeEntityManager(em);
    nRecordsExpected--;
    em=createEntityManager();
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    closeEntityManager(em);
    nRecords=consumer.getRecords().size();
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    clearCache();
    em=createEntityManager();
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    closeEntityManager(em);
    nRecords=consumer.getRecords().size();
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    Record record1=new Record();
    record1.setDescription(""String_Node_Str"");
    record1.setDate(Helper.dateFromYearMonthDate(2009,1,1));
    record1.setLocation(new Location(""String_Node_Str"",""String_Node_Str""));
    Venue venue1=new Venue();
    venue1.setAttendance(10);
    venue1.setName(""String_Node_Str"");
    record1.setVenue(venue1);
    em=createEntityManager();
    beginTransaction(em);
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    consumer.getRecords().add(record1);
    commitTransaction(em);
    closeEntityManager(em);
    nRecordsExpected++;
    em=createEntityManager();
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    closeEntityManager(em);
    nRecords=consumer.getRecords().size();
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    clearCache();
    em=createEntityManager();
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    closeEntityManager(em);
    nRecords=consumer.getRecords().size();
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    String newDescription=""String_Node_Str"";
    String newName=""String_Node_Str"";
    em=createEntityManager();
    beginTransaction(em);
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    int i=0;
    Iterator<Record> it=consumer.getRecords().iterator();
    while (it.hasNext()) {
      Record record=it.next();
      String index=Integer.toString(i++);
      record.setDescription(newDescription + index);
      record.getVenue().setName(newName + index);
    }
    commitTransaction(em);
    em=createEntityManager();
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    closeEntityManager(em);
    nRecords=consumer.getRecords().size();
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    HashSet<String> usedDescriptions=new HashSet(nRecords);
    HashSet<String> usedNames=new HashSet(nRecords);
    it=consumer.getRecords().iterator();
    while (it.hasNext()) {
      Record record=it.next();
      String description=record.getDescription();
      if (!description.startsWith(newDescription)) {
        errorMsg+=""String_Node_Str"";
      }
      usedDescriptions.add(description);
      String name=record.getVenue().getName();
      if (!name.startsWith(newName)) {
        errorMsg+=""String_Node_Str"";
      }
      usedNames.add(name);
    }
    if (usedDescriptions.size() != nRecords) {
      errorMsg+=""String_Node_Str"";
    }
    if (usedNames.size() != nRecords) {
      errorMsg+=""String_Node_Str"";
    }
    clearCache();
    em=createEntityManager();
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    closeEntityManager(em);
    nRecords=consumer.getRecords().size();
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    usedDescriptions.clear();
    usedNames.clear();
    it=consumer.getRecords().iterator();
    while (it.hasNext()) {
      Record record=it.next();
      String description=record.getDescription();
      if (!description.startsWith(newDescription)) {
        errorMsg+=""String_Node_Str"";
      }
      usedDescriptions.add(description);
      String name=record.getVenue().getName();
      if (!name.startsWith(newName)) {
        errorMsg+=""String_Node_Str"";
      }
      usedNames.add(name);
    }
    if (usedDescriptions.size() != nRecords) {
      errorMsg+=""String_Node_Str"";
    }
    if (usedNames.size() != nRecords) {
      errorMsg+=""String_Node_Str"";
    }
    if (errorMsg.length() > 0) {
      fail(errorMsg);
    }
  }
  finally {
    if (em != null) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      if (em.isOpen()) {
        closeEntityManager(em);
      }
    }
  }
}","public void testExpertBeerConsumerRecordsCRUD(){
  String errorMsg=""String_Node_Str"";
  int nRecords;
  int nRecordsExpected=2;
  clearCache();
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    ExpertBeerConsumer consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    nRecords=consumer.getRecords().size();
    commitTransaction(em);
    closeEntityManager(em);
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    em=createEntityManager();
    beginTransaction(em);
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    Record recordToRemove=consumer.getRecords().iterator().next();
    consumer.getRecords().remove(recordToRemove);
    commitTransaction(em);
    closeEntityManager(em);
    nRecordsExpected--;
    em=createEntityManager();
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    closeEntityManager(em);
    nRecords=consumer.getRecords().size();
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    clearCache();
    em=createEntityManager();
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    closeEntityManager(em);
    nRecords=consumer.getRecords().size();
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    Record record1=new Record();
    record1.setDescription(""String_Node_Str"");
    record1.setDate(Helper.dateFromYearMonthDate(2009,1,1));
    record1.setLocation(new Location(""String_Node_Str"",""String_Node_Str""));
    Venue venue1=new Venue();
    venue1.setAttendance(10);
    venue1.setName(""String_Node_Str"");
    record1.setVenue(venue1);
    em=createEntityManager();
    beginTransaction(em);
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    consumer.getRecords().add(record1);
    commitTransaction(em);
    closeEntityManager(em);
    nRecordsExpected++;
    em=createEntityManager();
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    closeEntityManager(em);
    nRecords=consumer.getRecords().size();
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    clearCache();
    em=createEntityManager();
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    closeEntityManager(em);
    nRecords=consumer.getRecords().size();
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    String newDescription=""String_Node_Str"";
    String newName=""String_Node_Str"";
    em=createEntityManager();
    beginTransaction(em);
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    int i=0;
    Iterator<Record> it=consumer.getRecords().iterator();
    while (it.hasNext()) {
      Record record=it.next();
      String index=Integer.toString(i++);
      record.setDescription(newDescription + index);
      record.getVenue().setName(newName + index);
    }
    commitTransaction(em);
    em=createEntityManager();
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    closeEntityManager(em);
    nRecords=consumer.getRecords().size();
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    HashSet<String> usedDescriptions=new HashSet(nRecords);
    HashSet<String> usedNames=new HashSet(nRecords);
    it=consumer.getRecords().iterator();
    while (it.hasNext()) {
      Record record=it.next();
      String description=record.getDescription();
      if (!description.startsWith(newDescription)) {
        errorMsg+=""String_Node_Str"";
      }
      usedDescriptions.add(description);
      String name=record.getVenue().getName();
      if (!name.startsWith(newName)) {
        errorMsg+=""String_Node_Str"";
      }
      usedNames.add(name);
    }
    if (usedDescriptions.size() != nRecords) {
      errorMsg+=""String_Node_Str"";
    }
    if (usedNames.size() != nRecords) {
      errorMsg+=""String_Node_Str"";
    }
    clearCache();
    em=createEntityManager();
    consumer=em.find(ExpertBeerConsumer.class,m_expertBeerConsumerId);
    closeEntityManager(em);
    nRecords=consumer.getRecords().size();
    if (nRecords != nRecordsExpected) {
      errorMsg+=""String_Node_Str"";
    }
    usedDescriptions.clear();
    usedNames.clear();
    it=consumer.getRecords().iterator();
    while (it.hasNext()) {
      Record record=it.next();
      String description=record.getDescription();
      if (!description.startsWith(newDescription)) {
        errorMsg+=""String_Node_Str"";
      }
      usedDescriptions.add(description);
      String name=record.getVenue().getName();
      if (!name.startsWith(newName)) {
        errorMsg+=""String_Node_Str"";
      }
      usedNames.add(name);
    }
    if (usedDescriptions.size() != nRecords) {
      errorMsg+=""String_Node_Str"";
    }
    if (usedNames.size() != nRecords) {
      errorMsg+=""String_Node_Str"";
    }
    if (errorMsg.length() > 0) {
      fail(errorMsg);
    }
  }
  finally {
    if (em != null) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      if (isOnServer()) {
        closeEntityManager(em);
      }
 else       if (em.isOpen()) {
        closeEntityManager(em);
      }
    }
  }
}"
66273,public void setPhoneNumbers(List<PhoneNumber> phoneNumbers);,void setPhoneNumbers(List<PhoneNumber> phoneNumbers);
66274,"@XmlElement(name=""String_Node_Str"") public List<PhoneNumber> getPhoneNumbers();","@XmlElement(name=""String_Node_Str"") List<PhoneNumber> getPhoneNumbers();"
66275,"/** 
 * INTERNAL: Complete building TypeInfo objects for a given set of JavaClass instances. This method assumes  that init, preBuildTypeInfo, and postBuildTypeInfo have been called.
 * @param allClasses
 * @return
 */
private Map<String,TypeInfo> buildTypeInfo(JavaClass[] allClasses){
  for (  JavaClass javaClass : allClasses) {
    if (javaClass == null) {
      continue;
    }
    TypeInfo info=typeInfo.get(javaClass.getQualifiedName());
    if (info == null || info.isPostBuilt()) {
      continue;
    }
    info.setPostBuilt(true);
    processFactoryMethods(javaClass,info);
    NamespaceInfo packageNamespace=getNamespaceInfoForPackage(javaClass);
    postProcessXmlAccessorType(info,packageNamespace);
    postProcessXmlType(javaClass,info,packageNamespace);
    if (info.isEnumerationType()) {
      addEnumTypeInfo(javaClass,((EnumTypeInfo)info));
      continue;
    }
    processTypeQName(javaClass,info,packageNamespace);
    JavaClass superClass=(JavaClass)javaClass.getSuperclass();
    if (shouldGenerateTypeInfo(superClass)) {
      JavaClass[] jClassArray=new JavaClass[]{superClass};
      buildNewTypeInfo(jClassArray);
    }
    info.setProperties(getPropertiesForClass(javaClass,info));
    processTypeInfoProperties(javaClass,info);
    postProcessXmlAccessorOrder(info,packageNamespace);
    if (info.getFactoryMethodName() == null && info.getObjectFactoryClassName() == null) {
      JavaConstructor zeroArgConstructor=javaClass.getDeclaredConstructor(new JavaClass[]{});
      if (zeroArgConstructor == null) {
        throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(javaClass.getName());
      }
    }
    validatePropOrderForInfo(info);
  }
  return typeInfo;
}","/** 
 * INTERNAL: Complete building TypeInfo objects for a given set of JavaClass instances. This method assumes  that init, preBuildTypeInfo, and postBuildTypeInfo have been called.
 * @param allClasses
 * @return
 */
private Map<String,TypeInfo> buildTypeInfo(JavaClass[] allClasses){
  for (  JavaClass javaClass : allClasses) {
    if (javaClass == null) {
      continue;
    }
    TypeInfo info=typeInfo.get(javaClass.getQualifiedName());
    if (info == null || info.isPostBuilt()) {
      continue;
    }
    info.setPostBuilt(true);
    processFactoryMethods(javaClass,info);
    NamespaceInfo packageNamespace=getNamespaceInfoForPackage(javaClass);
    postProcessXmlAccessorType(info,packageNamespace);
    postProcessXmlType(javaClass,info,packageNamespace);
    if (info.isEnumerationType()) {
      addEnumTypeInfo(javaClass,((EnumTypeInfo)info));
      continue;
    }
    processTypeQName(javaClass,info,packageNamespace);
    JavaClass superClass=(JavaClass)javaClass.getSuperclass();
    if (shouldGenerateTypeInfo(superClass)) {
      JavaClass[] jClassArray=new JavaClass[]{superClass};
      buildNewTypeInfo(jClassArray);
    }
    info.setProperties(getPropertiesForClass(javaClass,info));
    processTypeInfoProperties(javaClass,info);
    postProcessXmlAccessorOrder(info,packageNamespace);
    if (!javaClass.isInterface()) {
      if (info.getFactoryMethodName() == null && info.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=javaClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(javaClass.getName());
        }
      }
    }
    validatePropOrderForInfo(info);
  }
  return typeInfo;
}"
66276,"public void testSequenceObjectDefinition(){
  EntityManager em=createEntityManager(""String_Node_Str"");
  ServerSession ss=getServerSession(""String_Node_Str"");
  if (!ss.getLogin().getPlatform().supportsSequenceObjects()) {
    closeEntityManager(em);
    return;
  }
  String seqName=""String_Node_Str"";
  try {
    internalTestSequenceObjectDefinition(10,1,seqName,em,ss);
    internalTestSequenceObjectDefinition(10,5,seqName + ""String_Node_Str"",em,ss);
    internalTestSequenceObjectDefinition(10,15,seqName + ""String_Node_Str"",em,ss);
  }
  finally {
    closeEntityManager(em);
  }
}","public void testSequenceObjectDefinition(){
  EntityManager em=createEntityManager(""String_Node_Str"");
  ServerSession ss=getServerSession(""String_Node_Str"");
  if (!ss.getLogin().getPlatform().supportsSequenceObjects() || isOnServer()) {
    closeEntityManager(em);
    return;
  }
  String seqName=""String_Node_Str"";
  try {
    internalTestSequenceObjectDefinition(10,1,seqName,em,ss);
    internalTestSequenceObjectDefinition(10,5,seqName + ""String_Node_Str"",em,ss);
    internalTestSequenceObjectDefinition(10,15,seqName + ""String_Node_Str"",em,ss);
  }
  finally {
    closeEntityManager(em);
  }
}"
66277,"@Test public void simpleSerializeAndMerge() throws Exception {
  EntityManager em=createEntityManager();
  int id=minEmployeeIdWithAddressAndPhones(em);
  HashMap<String,PhoneNumber> phonesOriginal=new HashMap();
  Employee empOriginal=em.find(Employee.class,id);
  for (  PhoneNumber phone : empOriginal.getPhoneNumbers()) {
    phonesOriginal.put(phone.getType(),phone);
  }
  closeEntityManager(em);
  clearCache();
  int newSalary=empOriginal.getSalary() * 2;
  if (newSalary == 0) {
    newSalary=100;
  }
  em=createEntityManager();
  Query query=em.createQuery(""String_Node_Str"" + id);
  FetchGroup fetchGroup=new FetchGroup(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.setShouldLoad(true);
  query.setHint(QueryHints.FETCH_GROUP,fetchGroup);
  Employee emp=(Employee)query.getSingleResult();
  Employee empSerialized;
  Employee empDeserialized;
  Employee empMerged;
  beginTransaction(em);
  try {
    empSerialized=serialize(emp);
    assertFetched(empSerialized,fetchGroup);
    empSerialized.setFirstName(""String_Node_Str"");
    empSerialized.setLastName(""String_Node_Str"");
    empSerialized.setSalary(newSalary);
    FetchGroup extendedFetchGroup=(FetchGroup)fetchGroup.clone();
    extendedFetchGroup.addAttribute(""String_Node_Str"");
    assertFetched(empSerialized,extendedFetchGroup);
    empSerialized.getAddress().setCountry(""String_Node_Str"");
    assertFetched(empSerialized.getAddress(),fetchGroup.getGroup(""String_Node_Str""));
    empSerialized.getAddress().setCity(""String_Node_Str"");
    extendedFetchGroup.addAttribute(""String_Node_Str"");
    assertFetched(empSerialized.getAddress(),extendedFetchGroup.getGroup(""String_Node_Str""));
    extendedFetchGroup.addAttribute(""String_Node_Str"");
    for (    PhoneNumber phone : empSerialized.getPhoneNumbers()) {
      phone.setAreaCode(""String_Node_Str"");
      assertFetched(phone,fetchGroup.getGroup(""String_Node_Str""));
      phone.setNumber(""String_Node_Str"");
      assertFetched(phone,extendedFetchGroup.getGroup(""String_Node_Str""));
    }
    empDeserialized=serialize(empSerialized);
    assertFetched(empDeserialized,extendedFetchGroup);
    assertFetched(empDeserialized.getAddress(),extendedFetchGroup.getGroup(""String_Node_Str""));
    for (    PhoneNumber phone : empDeserialized.getPhoneNumbers()) {
      assertFetched(phone,extendedFetchGroup.getGroup(""String_Node_Str""));
    }
    empMerged=em.merge(empDeserialized);
    assertEquals(""String_Node_Str"",empMerged.getFirstName());
    assertEquals(""String_Node_Str"",empMerged.getLastName());
    assertEquals(newSalary,empMerged.getSalary());
    assertEquals(""String_Node_Str"",empMerged.getAddress().getCountry());
    assertEquals(""String_Node_Str"",empMerged.getAddress().getCity());
    for (    PhoneNumber phone : empSerialized.getPhoneNumbers()) {
      assertEquals(""String_Node_Str"",phone.getAreaCode());
      assertEquals(""String_Node_Str"",phone.getNumber());
    }
    assertEquals(empOriginal.getGender(),empMerged.getGender());
    if (empOriginal.getDepartment() != null) {
      assertEquals(empOriginal.getDepartment().getId(),empMerged.getDepartment().getId());
    }
    if (empOriginal.getPeriod() != null) {
      assertEquals(empOriginal.getPeriod().getStartDate(),empMerged.getPeriod().getStartDate());
      assertEquals(empOriginal.getPeriod().getEndDate(),empMerged.getPeriod().getEndDate());
    }
    assertEquals(empOriginal.getPayScale(),empMerged.getPayScale());
    assertEquals(empOriginal.getStartTime(),empMerged.getStartTime());
    assertEquals(empOriginal.getEndTime(),empMerged.getEndTime());
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
  }
  em.clear();
  HashMap hints=new HashMap(2);
  hints.put(QueryHints.CACHE_USAGE,CacheUsage.CheckCacheOnly);
  Employee empShared=em.find(Employee.class,id,hints);
  assertEquals(""String_Node_Str"",empShared.getFirstName());
  assertEquals(""String_Node_Str"",empShared.getLastName());
  assertEquals(newSalary,empShared.getSalary());
  assertEquals(""String_Node_Str"",empShared.getAddress().getCountry());
  assertEquals(""String_Node_Str"",empShared.getAddress().getCity());
  for (  PhoneNumber phone : empShared.getPhoneNumbers()) {
    assertEquals(""String_Node_Str"",phone.getAreaCode());
    assertEquals(""String_Node_Str"",phone.getNumber());
  }
  clearCache();
  em.clear();
  Employee empDb=em.find(Employee.class,id);
  assertEquals(""String_Node_Str"",empDb.getFirstName());
  assertEquals(""String_Node_Str"",empDb.getLastName());
  assertEquals(newSalary,empDb.getSalary());
  assertEquals(""String_Node_Str"",empDb.getAddress().getCountry());
  assertEquals(""String_Node_Str"",empDb.getAddress().getCity());
  for (  PhoneNumber phone : empDb.getPhoneNumbers()) {
    assertEquals(""String_Node_Str"",phone.getAreaCode());
    assertEquals(""String_Node_Str"",phone.getNumber());
  }
  beginTransaction(em);
  try {
    empDb.setFirstName(empOriginal.getFirstName());
    empDb.setLastName(empOriginal.getLastName());
    empDb.setSalary(empOriginal.getSalary());
    empDb.getAddress().setCountry(empOriginal.getAddress().getCountry());
    empDb.getAddress().setCity(empOriginal.getAddress().getCity());
    for (    PhoneNumber phone : empDb.getPhoneNumbers()) {
      PhoneNumber phoneOriginal=phonesOriginal.get(phone.getType());
      phone.setAreaCode(phoneOriginal.getAreaCode());
      phone.setNumber(phoneOriginal.getNumber());
    }
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}","@Test public void simpleSerializeAndMerge() throws Exception {
  EntityManager em=createEntityManager();
  int id=minEmployeeIdWithAddressAndPhones(em);
  HashMap<String,PhoneNumber> phonesOriginal=new HashMap();
  Employee empOriginal=em.find(Employee.class,id);
  for (  PhoneNumber phone : empOriginal.getPhoneNumbers()) {
    phonesOriginal.put(phone.getType(),phone);
  }
  closeEntityManager(em);
  clearCache();
  int newSalary=empOriginal.getSalary() * 2;
  if (newSalary == 0) {
    newSalary=100;
  }
  em=createEntityManager();
  beginTransaction(em);
  Query query=em.createQuery(""String_Node_Str"" + id);
  FetchGroup fetchGroup=new FetchGroup(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.setShouldLoad(true);
  query.setHint(QueryHints.FETCH_GROUP,fetchGroup);
  Employee emp=(Employee)query.getSingleResult();
  Employee empSerialized;
  Employee empDeserialized;
  Employee empMerged;
  try {
    empSerialized=serialize(emp);
    assertFetched(empSerialized,fetchGroup);
    empSerialized.setFirstName(""String_Node_Str"");
    empSerialized.setLastName(""String_Node_Str"");
    empSerialized.setSalary(newSalary);
    FetchGroup extendedFetchGroup=(FetchGroup)fetchGroup.clone();
    extendedFetchGroup.addAttribute(""String_Node_Str"");
    assertFetched(empSerialized,extendedFetchGroup);
    empSerialized.getAddress().setCountry(""String_Node_Str"");
    assertFetched(empSerialized.getAddress(),fetchGroup.getGroup(""String_Node_Str""));
    empSerialized.getAddress().setCity(""String_Node_Str"");
    extendedFetchGroup.addAttribute(""String_Node_Str"");
    assertFetched(empSerialized.getAddress(),extendedFetchGroup.getGroup(""String_Node_Str""));
    extendedFetchGroup.addAttribute(""String_Node_Str"");
    for (    PhoneNumber phone : empSerialized.getPhoneNumbers()) {
      phone.setAreaCode(""String_Node_Str"");
      assertFetched(phone,fetchGroup.getGroup(""String_Node_Str""));
      phone.setNumber(""String_Node_Str"");
      assertFetched(phone,extendedFetchGroup.getGroup(""String_Node_Str""));
    }
    empDeserialized=serialize(empSerialized);
    assertFetched(empDeserialized,extendedFetchGroup);
    assertFetched(empDeserialized.getAddress(),extendedFetchGroup.getGroup(""String_Node_Str""));
    for (    PhoneNumber phone : empDeserialized.getPhoneNumbers()) {
      assertFetched(phone,extendedFetchGroup.getGroup(""String_Node_Str""));
    }
    empMerged=em.merge(empDeserialized);
    assertEquals(""String_Node_Str"",empMerged.getFirstName());
    assertEquals(""String_Node_Str"",empMerged.getLastName());
    assertEquals(newSalary,empMerged.getSalary());
    assertEquals(""String_Node_Str"",empMerged.getAddress().getCountry());
    assertEquals(""String_Node_Str"",empMerged.getAddress().getCity());
    for (    PhoneNumber phone : empSerialized.getPhoneNumbers()) {
      assertEquals(""String_Node_Str"",phone.getAreaCode());
      assertEquals(""String_Node_Str"",phone.getNumber());
    }
    assertEquals(empOriginal.getGender(),empMerged.getGender());
    if (empOriginal.getDepartment() != null) {
      assertEquals(empOriginal.getDepartment().getId(),empMerged.getDepartment().getId());
    }
    if (empOriginal.getPeriod() != null) {
      assertEquals(empOriginal.getPeriod().getStartDate(),empMerged.getPeriod().getStartDate());
      assertEquals(empOriginal.getPeriod().getEndDate(),empMerged.getPeriod().getEndDate());
    }
    assertEquals(empOriginal.getPayScale(),empMerged.getPayScale());
    assertEquals(empOriginal.getStartTime(),empMerged.getStartTime());
    assertEquals(empOriginal.getEndTime(),empMerged.getEndTime());
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
  }
  em.clear();
  HashMap hints=new HashMap(2);
  hints.put(QueryHints.CACHE_USAGE,CacheUsage.CheckCacheOnly);
  Employee empShared=em.find(Employee.class,id,hints);
  assertEquals(""String_Node_Str"",empShared.getFirstName());
  assertEquals(""String_Node_Str"",empShared.getLastName());
  assertEquals(newSalary,empShared.getSalary());
  assertEquals(""String_Node_Str"",empShared.getAddress().getCountry());
  assertEquals(""String_Node_Str"",empShared.getAddress().getCity());
  for (  PhoneNumber phone : empShared.getPhoneNumbers()) {
    assertEquals(""String_Node_Str"",phone.getAreaCode());
    assertEquals(""String_Node_Str"",phone.getNumber());
  }
  clearCache();
  em.clear();
  Employee empDb=em.find(Employee.class,id);
  assertEquals(""String_Node_Str"",empDb.getFirstName());
  assertEquals(""String_Node_Str"",empDb.getLastName());
  assertEquals(newSalary,empDb.getSalary());
  assertEquals(""String_Node_Str"",empDb.getAddress().getCountry());
  assertEquals(""String_Node_Str"",empDb.getAddress().getCity());
  for (  PhoneNumber phone : empDb.getPhoneNumbers()) {
    assertEquals(""String_Node_Str"",phone.getAreaCode());
    assertEquals(""String_Node_Str"",phone.getNumber());
  }
  beginTransaction(em);
  try {
    empDb.setFirstName(empOriginal.getFirstName());
    empDb.setLastName(empOriginal.getLastName());
    empDb.setSalary(empOriginal.getSalary());
    empDb.getAddress().setCountry(empOriginal.getAddress().getCountry());
    empDb.getAddress().setCity(empOriginal.getAddress().getCity());
    for (    PhoneNumber phone : empDb.getPhoneNumbers()) {
      PhoneNumber phoneOriginal=phonesOriginal.get(phone.getType());
      phone.setAreaCode(phoneOriginal.getAreaCode());
      phone.setNumber(phoneOriginal.getNumber());
    }
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}"
66278,"@Test public void simpleSerializeAndMerge() throws Exception {
  EntityManager em=createEntityManager(""String_Node_Str"");
  int id=minEmployeeIdWithAddressAndPhones(em);
  HashMap<String,PhoneNumber> phonesOriginal=new HashMap();
  Employee empOriginal=em.find(Employee.class,id);
  for (  PhoneNumber phone : empOriginal.getPhoneNumbers()) {
    phonesOriginal.put(phone.getType(),phone);
  }
  closeEntityManager(em);
  clearCache(""String_Node_Str"");
  int newSalary=empOriginal.getSalary() * 2;
  if (newSalary == 0) {
    newSalary=100;
  }
  em=createEntityManager(""String_Node_Str"");
  Query query=em.createQuery(""String_Node_Str"" + id);
  FetchGroup fetchGroup=new FetchGroup(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.setShouldLoad(true);
  query.setHint(QueryHints.FETCH_GROUP,fetchGroup);
  Employee emp=(Employee)query.getSingleResult();
  Employee empSerialized;
  Employee empDeserialized;
  Employee empMerged;
  beginTransaction(em);
  try {
    empSerialized=serialize(emp);
    assertFetched(empSerialized,fetchGroup);
    empSerialized.setFirstName(""String_Node_Str"");
    empSerialized.setLastName(""String_Node_Str"");
    empSerialized.setSalary(newSalary);
    FetchGroup extendedFetchGroup=(FetchGroup)fetchGroup.clone();
    extendedFetchGroup.addAttribute(""String_Node_Str"");
    assertFetched(empSerialized,extendedFetchGroup);
    empSerialized.getAddress().setCountry(""String_Node_Str"");
    assertFetched(empSerialized.getAddress(),fetchGroup.getGroup(""String_Node_Str""));
    empSerialized.getAddress().setCity(""String_Node_Str"");
    extendedFetchGroup.addAttribute(""String_Node_Str"");
    assertFetched(empSerialized.getAddress(),extendedFetchGroup.getGroup(""String_Node_Str""));
    extendedFetchGroup.addAttribute(""String_Node_Str"");
    for (    PhoneNumber phone : empSerialized.getPhoneNumbers()) {
      phone.setAreaCode(""String_Node_Str"");
      assertFetched(phone,fetchGroup.getGroup(""String_Node_Str""));
      phone.setNumber(""String_Node_Str"");
      assertFetched(phone,extendedFetchGroup.getGroup(""String_Node_Str""));
    }
    empDeserialized=serialize(empSerialized);
    assertFetched(empDeserialized,extendedFetchGroup);
    assertFetched(empDeserialized.getAddress(),extendedFetchGroup.getGroup(""String_Node_Str""));
    for (    PhoneNumber phone : empDeserialized.getPhoneNumbers()) {
      assertFetched(phone,extendedFetchGroup.getGroup(""String_Node_Str""));
    }
    empMerged=em.merge(empDeserialized);
    assertEquals(""String_Node_Str"",empMerged.getFirstName());
    assertEquals(""String_Node_Str"",empMerged.getLastName());
    assertEquals(newSalary,empMerged.getSalary());
    assertEquals(""String_Node_Str"",empMerged.getAddress().getCountry());
    assertEquals(""String_Node_Str"",empMerged.getAddress().getCity());
    for (    PhoneNumber phone : empSerialized.getPhoneNumbers()) {
      assertEquals(""String_Node_Str"",phone.getAreaCode());
      assertEquals(""String_Node_Str"",phone.getNumber());
    }
    assertEquals(empOriginal.getGender(),empMerged.getGender());
    if (empOriginal.getDepartment() != null) {
      assertEquals(empOriginal.getDepartment().getId(),empMerged.getDepartment().getId());
    }
    if (empOriginal.getPeriod() != null) {
      assertEquals(empOriginal.getPeriod().getStartDate(),empMerged.getPeriod().getStartDate());
      assertEquals(empOriginal.getPeriod().getEndDate(),empMerged.getPeriod().getEndDate());
    }
    assertEquals(empOriginal.getPayScale(),empMerged.getPayScale());
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
  }
  em.clear();
  HashMap hints=new HashMap(2);
  hints.put(QueryHints.CACHE_USAGE,CacheUsage.CheckCacheOnly);
  Employee empShared=em.find(Employee.class,id,hints);
  assertEquals(""String_Node_Str"",empShared.getFirstName());
  assertEquals(""String_Node_Str"",empShared.getLastName());
  assertEquals(newSalary,empShared.getSalary());
  assertEquals(""String_Node_Str"",empShared.getAddress().getCountry());
  assertEquals(""String_Node_Str"",empShared.getAddress().getCity());
  for (  PhoneNumber phone : empShared.getPhoneNumbers()) {
    assertEquals(""String_Node_Str"",phone.getAreaCode());
    assertEquals(""String_Node_Str"",phone.getNumber());
  }
  clearCache();
  em.clear();
  Employee empDb=em.find(Employee.class,id);
  assertEquals(""String_Node_Str"",empDb.getFirstName());
  assertEquals(""String_Node_Str"",empDb.getLastName());
  assertEquals(newSalary,empDb.getSalary());
  assertEquals(""String_Node_Str"",empDb.getAddress().getCountry());
  assertEquals(""String_Node_Str"",empDb.getAddress().getCity());
  for (  PhoneNumber phone : empDb.getPhoneNumbers()) {
    assertEquals(""String_Node_Str"",phone.getAreaCode());
    assertEquals(""String_Node_Str"",phone.getNumber());
  }
  beginTransaction(em);
  try {
    empDb.setFirstName(empOriginal.getFirstName());
    empDb.setLastName(empOriginal.getLastName());
    empDb.setSalary(empOriginal.getSalary());
    empDb.getAddress().setCountry(empOriginal.getAddress().getCountry());
    empDb.getAddress().setCity(empOriginal.getAddress().getCity());
    for (    PhoneNumber phone : empDb.getPhoneNumbers()) {
      PhoneNumber phoneOriginal=phonesOriginal.get(phone.getType());
      phone.setAreaCode(phoneOriginal.getAreaCode());
      phone.setNumber(phoneOriginal.getNumber());
    }
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}","@Test public void simpleSerializeAndMerge() throws Exception {
  EntityManager em=createEntityManager(""String_Node_Str"");
  int id=minEmployeeIdWithAddressAndPhones(em);
  HashMap<String,PhoneNumber> phonesOriginal=new HashMap();
  Employee empOriginal=em.find(Employee.class,id);
  for (  PhoneNumber phone : empOriginal.getPhoneNumbers()) {
    phonesOriginal.put(phone.getType(),phone);
  }
  closeEntityManager(em);
  clearCache(""String_Node_Str"");
  int newSalary=empOriginal.getSalary() * 2;
  if (newSalary == 0) {
    newSalary=100;
  }
  em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  Query query=em.createQuery(""String_Node_Str"" + id);
  FetchGroup fetchGroup=new FetchGroup(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.addAttribute(""String_Node_Str"");
  fetchGroup.setShouldLoad(true);
  query.setHint(QueryHints.FETCH_GROUP,fetchGroup);
  Employee emp=(Employee)query.getSingleResult();
  Employee empSerialized;
  Employee empDeserialized;
  Employee empMerged;
  try {
    empSerialized=serialize(emp);
    assertFetched(empSerialized,fetchGroup);
    empSerialized.setFirstName(""String_Node_Str"");
    empSerialized.setLastName(""String_Node_Str"");
    empSerialized.setSalary(newSalary);
    FetchGroup extendedFetchGroup=(FetchGroup)fetchGroup.clone();
    extendedFetchGroup.addAttribute(""String_Node_Str"");
    assertFetched(empSerialized,extendedFetchGroup);
    empSerialized.getAddress().setCountry(""String_Node_Str"");
    assertFetched(empSerialized.getAddress(),fetchGroup.getGroup(""String_Node_Str""));
    empSerialized.getAddress().setCity(""String_Node_Str"");
    extendedFetchGroup.addAttribute(""String_Node_Str"");
    assertFetched(empSerialized.getAddress(),extendedFetchGroup.getGroup(""String_Node_Str""));
    extendedFetchGroup.addAttribute(""String_Node_Str"");
    for (    PhoneNumber phone : empSerialized.getPhoneNumbers()) {
      phone.setAreaCode(""String_Node_Str"");
      assertFetched(phone,fetchGroup.getGroup(""String_Node_Str""));
      phone.setNumber(""String_Node_Str"");
      assertFetched(phone,extendedFetchGroup.getGroup(""String_Node_Str""));
    }
    empDeserialized=serialize(empSerialized);
    assertFetched(empDeserialized,extendedFetchGroup);
    assertFetched(empDeserialized.getAddress(),extendedFetchGroup.getGroup(""String_Node_Str""));
    for (    PhoneNumber phone : empDeserialized.getPhoneNumbers()) {
      assertFetched(phone,extendedFetchGroup.getGroup(""String_Node_Str""));
    }
    empMerged=em.merge(empDeserialized);
    assertEquals(""String_Node_Str"",empMerged.getFirstName());
    assertEquals(""String_Node_Str"",empMerged.getLastName());
    assertEquals(newSalary,empMerged.getSalary());
    assertEquals(""String_Node_Str"",empMerged.getAddress().getCountry());
    assertEquals(""String_Node_Str"",empMerged.getAddress().getCity());
    for (    PhoneNumber phone : empSerialized.getPhoneNumbers()) {
      assertEquals(""String_Node_Str"",phone.getAreaCode());
      assertEquals(""String_Node_Str"",phone.getNumber());
    }
    assertEquals(empOriginal.getGender(),empMerged.getGender());
    if (empOriginal.getDepartment() != null) {
      assertEquals(empOriginal.getDepartment().getId(),empMerged.getDepartment().getId());
    }
    if (empOriginal.getPeriod() != null) {
      assertEquals(empOriginal.getPeriod().getStartDate(),empMerged.getPeriod().getStartDate());
      assertEquals(empOriginal.getPeriod().getEndDate(),empMerged.getPeriod().getEndDate());
    }
    assertEquals(empOriginal.getPayScale(),empMerged.getPayScale());
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
  }
  em.clear();
  HashMap hints=new HashMap(2);
  hints.put(QueryHints.CACHE_USAGE,CacheUsage.CheckCacheOnly);
  Employee empShared=em.find(Employee.class,id,hints);
  assertEquals(""String_Node_Str"",empShared.getFirstName());
  assertEquals(""String_Node_Str"",empShared.getLastName());
  assertEquals(newSalary,empShared.getSalary());
  assertEquals(""String_Node_Str"",empShared.getAddress().getCountry());
  assertEquals(""String_Node_Str"",empShared.getAddress().getCity());
  for (  PhoneNumber phone : empShared.getPhoneNumbers()) {
    assertEquals(""String_Node_Str"",phone.getAreaCode());
    assertEquals(""String_Node_Str"",phone.getNumber());
  }
  clearCache();
  em.clear();
  Employee empDb=em.find(Employee.class,id);
  assertEquals(""String_Node_Str"",empDb.getFirstName());
  assertEquals(""String_Node_Str"",empDb.getLastName());
  assertEquals(newSalary,empDb.getSalary());
  assertEquals(""String_Node_Str"",empDb.getAddress().getCountry());
  assertEquals(""String_Node_Str"",empDb.getAddress().getCity());
  for (  PhoneNumber phone : empDb.getPhoneNumbers()) {
    assertEquals(""String_Node_Str"",phone.getAreaCode());
    assertEquals(""String_Node_Str"",phone.getNumber());
  }
  beginTransaction(em);
  try {
    empDb.setFirstName(empOriginal.getFirstName());
    empDb.setLastName(empOriginal.getLastName());
    empDb.setSalary(empOriginal.getSalary());
    empDb.getAddress().setCountry(empOriginal.getAddress().getCountry());
    empDb.getAddress().setCity(empOriginal.getAddress().getCity());
    for (    PhoneNumber phone : empDb.getPhoneNumbers()) {
      PhoneNumber phoneOriginal=phonesOriginal.get(phone.getType());
      phone.setAreaCode(phoneOriginal.getAreaCode());
      phone.setNumber(phoneOriginal.getNumber());
    }
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}"
66279,"/** 
 * The specified TimeZone will be used for all String to date object conversions. By default the TimeZone from the JVM is used.
 */
public void setTimeZone(TimeZone timeZone){
  if (null == timeZone) {
    getXMLConversionManager().setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  }
 else {
    getXMLConversionManager().setTimeZone(timeZone);
  }
}","/** 
 * The specified TimeZone will be used for all String to Date object conversions.  By default the GMT time zone is used.
 */
public void setTimeZone(TimeZone timeZone){
  if (null == timeZone) {
    getXMLConversionManager().setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  }
 else {
    getXMLConversionManager().setTimeZone(timeZone);
  }
}"
66280,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  return suite;
}"
66281,"public java.util.Date convertStringToDate(String sourceString,QName schemaType){
  XMLGregorianCalendar xmlGregorianCalender=convertStringToXMLGregorianCalendar(sourceString,schemaType);
  if (schemaType == null) {
    schemaType=xmlGregorianCalender.getXMLSchemaType();
  }
  GregorianCalendar cal=toGregorianCalendar(xmlGregorianCalender);
  Date returnDate=cal.getTime();
  return returnDate;
}","public java.util.Date convertStringToDate(String sourceString,QName schemaType){
  XMLGregorianCalendar xmlGregorianCalender=convertStringToXMLGregorianCalendar(sourceString,schemaType);
  Calendar cal=toCalendar(xmlGregorianCalender);
  Date returnDate=cal.getTime();
  return returnDate;
}"
66282,"/** 
 * This method returns a string representing a given java.util.Date based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
public String stringFromDate(java.util.Date sourceDate,QName schemaType){
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendMillis(string,sourceDate.getTime());
    return appendTimeZone(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DATE));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setGregorianChange(new Date(Long.MIN_VALUE));
  cal.setTime(sourceDate);
  xgc=getDatatypeFactory().newXMLGregorianCalendar(cal);
  if (!isTimeZoneQualified()) {
    xgc.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  }
  String string=xgc.toXMLFormat();
  return truncateMillis(string);
}","/** 
 * This method returns a string representing a given java.util.Date based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
public String stringFromDate(java.util.Date sourceDate,QName schemaType){
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendMillis(string,sourceDate.getTime());
    return appendTimeZone(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DATE));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setTime(sourceDate);
  xgc=getDatatypeFactory().newXMLGregorianCalendar(cal);
  if (!isTimeZoneQualified()) {
    xgc.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  }
  String string=xgc.toXMLFormat();
  return truncateMillis(string);
}"
66283,"public Calendar convertStringToCalendar(String sourceString,QName schemaTypeQName){
  java.util.Date date=convertStringToDate(sourceString,schemaTypeQName);
  Calendar cal=Helper.calendarFromUtilDate(date);
  cal.setTimeZone(getTimeZone());
  return cal;
}","public Calendar convertStringToCalendar(String sourceString,QName schemaTypeQName){
  XMLGregorianCalendar xmlGregorianCalender=convertStringToXMLGregorianCalendar(sourceString,schemaTypeQName);
  return toCalendar(xmlGregorianCalender);
}"
66284,"public void testUtilDateToString_dateTime_negative_year() throws Exception {
  String control=""String_Node_Str"";
  GregorianCalendar cal=new GregorianCalendar();
  cal.setGregorianChange(new java.util.Date(Long.MIN_VALUE));
  cal.clear();
  cal.set(Calendar.ERA,java.util.GregorianCalendar.BC);
  cal.set(Calendar.YEAR,2006);
  cal.set(Calendar.MONTH,Calendar.JANUARY);
  cal.set(Calendar.DAY_OF_MONTH,1);
  cal.set(Calendar.MILLISECOND,1);
  java.util.Date utilDate=cal.getTime();
  String test=(String)xcm.convertObject(utilDate,String.class,XMLConstants.DATE_TIME_QNAME);
  this.assertEquals(control,test);
}","public void testUtilDateToString_dateTime_negative_year() throws Exception {
  String control=""String_Node_Str"";
  GregorianCalendar cal=new GregorianCalendar();
  cal.clear();
  cal.set(Calendar.ERA,java.util.GregorianCalendar.BC);
  cal.set(Calendar.YEAR,2006);
  cal.set(Calendar.MONTH,Calendar.JANUARY);
  cal.set(Calendar.DAY_OF_MONTH,1);
  cal.set(Calendar.MILLISECOND,1);
  java.util.Date utilDate=cal.getTime();
  String test=(String)xcm.convertObject(utilDate,String.class,XMLConstants.DATE_TIME_QNAME);
  this.assertEquals(control,test);
}"
66285,"public void testToDateBeforeGregorianChange(){
  Date dateObj=dataHelper.toDate(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + dateObj.getMonth(),dateObj.getMonth() == 0);
  assertTrue(""String_Node_Str"" + dateObj.getDate(),dateObj.getDate() == 1);
}","public void testToDateBeforeGregorianChange(){
  Date dateObj=dataHelper.toDate(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat();
  sdf.applyPattern(""String_Node_Str"");
  String controlString=""String_Node_Str"";
  assertEquals(controlString,sdf.format(dateObj));
}"
66286,"/** 
 * Convert from a Date to a String representation of the MonthDay type.
 * @param date the date to convert
 * @return a Date to a String representation of the MonthDay type.
 */
public String toMonthDay(Date date){
  if (null == date) {
    return null;
  }
  GregorianCalendar dateCalendar=new GregorianCalendar(getXMLConversionManager().getTimeZone());
  dateCalendar.setGregorianChange(new Date(Long.MIN_VALUE));
  dateCalendar.clear();
  dateCalendar.setTime(date);
  dateCalendar.clear(Calendar.ZONE_OFFSET);
  return toMonthDay(dateCalendar);
}","/** 
 * Convert from a Date to a String representation of the MonthDay type.
 * @param date the date to convert
 * @return a Date to a String representation of the MonthDay type.
 */
public String toMonthDay(Date date){
  if (null == date) {
    return null;
  }
  GregorianCalendar dateCalendar=new GregorianCalendar(getXMLConversionManager().getTimeZone());
  dateCalendar.clear();
  dateCalendar.setTime(date);
  dateCalendar.clear(Calendar.ZONE_OFFSET);
  return toMonthDay(dateCalendar);
}"
66287,"/** 
 * This test performs minimal sanity testing on the advanced JPA model in order to verify metamodel creation.<p> See the metamodel test package suite for full regression tests. See SVN rev# 5124 http://fisheye2.atlassian.com/changelog/~author=mobrien/eclipselink/?cs=5124
 */
public void testMetamodelMinimalSanityTest(){
  if (!this.isJPA10()) {
    EntityManager em=createEntityManager();
    if (!this.isOnServer()) {
      ((EntityManagerFactoryImpl)((EntityManagerImpl)em).getEntityManagerFactory()).setMetamodel(null);
    }
    Metamodel metamodel=em.getMetamodel();
    EntityType<LargeProject> entityLargeProject=metamodel.entity(LargeProject.class);
    Set<Attribute<LargeProject,?>> declaredAttributes=entityLargeProject.getDeclaredAttributes();
    assertTrue(declaredAttributes.size() > 0);
    Attribute<LargeProject,?> budgetAttribute=entityLargeProject.getDeclaredAttribute(""String_Node_Str"");
    assertNotNull(budgetAttribute);
    Attribute<LargeProject,?> budgetSingularAttribute=entityLargeProject.getDeclaredSingularAttribute(""String_Node_Str"");
    assertNotNull(budgetSingularAttribute);
    assertEquals(budgetSingularAttribute,budgetAttribute);
    assertTrue(declaredAttributes.contains(budgetSingularAttribute));
    Class budgetClass=budgetSingularAttribute.getJavaType();
    assertEquals(double.class,budgetClass);
    EntityType<Buyer> entityBuyer=metamodel.entity(Buyer.class);
    assertNotNull(entityBuyer);
    assertEquals(PersistenceType.ENTITY,entityBuyer.getPersistenceType());
    assertEquals(Buyer.class,entityBuyer.getJavaType());
    Attribute buyingDaysAttribute=entityBuyer.getAttribute(""String_Node_Str"");
    assertNotNull(buyingDaysAttribute);
    assertEquals(PersistentAttributeType.BASIC,buyingDaysAttribute.getPersistentAttributeType());
    assertFalse(((SingularAttributeImpl)buyingDaysAttribute).isPlural());
    BindableType buyingDaysElementBindableType=((SingularAttributeImpl)buyingDaysAttribute).getBindableType();
    assertEquals(BindableType.SINGULAR_ATTRIBUTE,buyingDaysElementBindableType);
    SingularAttribute<? super Buyer,EnumSet> buyingDaysSingularAttribute=entityBuyer.getSingularAttribute(""String_Node_Str"",EnumSet.class);
    assertNotNull(buyingDaysSingularAttribute);
    assertFalse(buyingDaysSingularAttribute.isCollection());
    boolean expectedIAExceptionThrown=false;
    boolean hasSingleIdAttribute=false;
    try {
      hasSingleIdAttribute=entityBuyer.hasSingleIdAttribute();
    }
 catch (    IllegalArgumentException iae) {
      expectedIAExceptionThrown=true;
    }
    assertFalse(expectedIAExceptionThrown);
    assertTrue(hasSingleIdAttribute);
    Attribute buyerCreditCards=entityBuyer.getAttribute(""String_Node_Str"");
    assertNotNull(buyerCreditCards);
    assertTrue(buyerCreditCards.isCollection());
    assertTrue(buyerCreditCards instanceof MapAttributeImpl);
    MapAttribute<? super Buyer,?,?> buyerCreditCardsMap=entityBuyer.getMap(""String_Node_Str"");
    assertNotNull(buyerCreditCardsMap);
    assertEquals(entityBuyer,buyerCreditCardsMap.getDeclaringType());
    assertEquals(String.class,buyerCreditCardsMap.getKeyJavaType());
    assertEquals(Long.class,buyerCreditCardsMap.getElementType().getJavaType());
  }
}","/** 
 * This test performs minimal sanity testing on the advanced JPA model in order to verify metamodel creation.<p> See the metamodel test package suite for full regression tests. See SVN rev# 5124 http://fisheye2.atlassian.com/changelog/~author=mobrien/eclipselink/?cs=5124
 */
public void testMetamodelMinimalSanityTest(){
  EntityManager em=createEntityManager();
  if (!this.isOnServer()) {
    ((EntityManagerFactoryImpl)((EntityManagerImpl)em).getEntityManagerFactory()).setMetamodel(null);
  }
  Metamodel metamodel=em.getMetamodel();
  EntityType<LargeProject> entityLargeProject=metamodel.entity(LargeProject.class);
  Set<Attribute<LargeProject,?>> declaredAttributes=entityLargeProject.getDeclaredAttributes();
  assertTrue(declaredAttributes.size() > 0);
  Attribute<LargeProject,?> budgetAttribute=entityLargeProject.getDeclaredAttribute(""String_Node_Str"");
  assertNotNull(budgetAttribute);
  Attribute<LargeProject,?> budgetSingularAttribute=entityLargeProject.getDeclaredSingularAttribute(""String_Node_Str"");
  assertNotNull(budgetSingularAttribute);
  assertEquals(budgetSingularAttribute,budgetAttribute);
  assertTrue(declaredAttributes.contains(budgetSingularAttribute));
  Class budgetClass=budgetSingularAttribute.getJavaType();
  assertEquals(double.class,budgetClass);
  EntityType<Buyer> entityBuyer=metamodel.entity(Buyer.class);
  assertNotNull(entityBuyer);
  assertEquals(PersistenceType.ENTITY,entityBuyer.getPersistenceType());
  assertEquals(Buyer.class,entityBuyer.getJavaType());
  Attribute buyingDaysAttribute=entityBuyer.getAttribute(""String_Node_Str"");
  assertNotNull(buyingDaysAttribute);
  assertEquals(PersistentAttributeType.BASIC,buyingDaysAttribute.getPersistentAttributeType());
  assertFalse(((SingularAttributeImpl)buyingDaysAttribute).isPlural());
  BindableType buyingDaysElementBindableType=((SingularAttributeImpl)buyingDaysAttribute).getBindableType();
  assertEquals(BindableType.SINGULAR_ATTRIBUTE,buyingDaysElementBindableType);
  SingularAttribute<? super Buyer,EnumSet> buyingDaysSingularAttribute=entityBuyer.getSingularAttribute(""String_Node_Str"",EnumSet.class);
  assertNotNull(buyingDaysSingularAttribute);
  assertFalse(buyingDaysSingularAttribute.isCollection());
  boolean expectedIAExceptionThrown=false;
  boolean hasSingleIdAttribute=false;
  try {
    hasSingleIdAttribute=entityBuyer.hasSingleIdAttribute();
  }
 catch (  IllegalArgumentException iae) {
    expectedIAExceptionThrown=true;
  }
  assertFalse(expectedIAExceptionThrown);
  assertTrue(hasSingleIdAttribute);
  Attribute buyerCreditCards=entityBuyer.getAttribute(""String_Node_Str"");
  assertNotNull(buyerCreditCards);
  assertTrue(buyerCreditCards.isCollection());
  assertTrue(buyerCreditCards instanceof MapAttributeImpl);
  MapAttribute<? super Buyer,?,?> buyerCreditCardsMap=entityBuyer.getMap(""String_Node_Str"");
  assertNotNull(buyerCreditCardsMap);
  assertEquals(entityBuyer,buyerCreditCardsMap.getDeclaringType());
  assertEquals(String.class,buyerCreditCardsMap.getKeyJavaType());
  assertEquals(Long.class,buyerCreditCardsMap.getElementType().getJavaType());
}"
66288,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}"
66289,"protected XMLDescriptor findReferenceDescriptor(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,DatabaseMapping mapping,UnmarshalKeepAsElementPolicy policy){
  XMLDescriptor returnDescriptor=null;
  if (atts != null) {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    String schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (schemaType != null) {
      schemaType=schemaType.trim();
      if (schemaType.length() > 0) {
        XPathFragment frag=new XPathFragment();
        frag.setXPath(schemaType);
        QName qname=null;
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
          qname=new QName(url,frag.getLocalName());
          unmarshalRecord.setTypeQName(qname);
        }
 else {
          String url=unmarshalRecord.resolveNamespacePrefix(XMLConstants.EMPTY_STRING);
          if (null != url) {
            frag.setNamespaceURI(url);
            qname=new QName(url,frag.getLocalName());
            unmarshalRecord.setTypeQName(qname);
          }
        }
        returnDescriptor=xmlContext.getDescriptorByGlobalType(frag);
        if (returnDescriptor == null) {
          if (policy == null || (policy != null && policy != UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT && policy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(qname);
            if (theClass == null) {
              throw XMLMarshalException.noDescriptorFound(mapping);
            }
          }
        }
      }
    }
  }
  return returnDescriptor;
}","protected XMLDescriptor findReferenceDescriptor(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,DatabaseMapping mapping,UnmarshalKeepAsElementPolicy policy){
  XMLDescriptor returnDescriptor=null;
  if (atts != null) {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    String schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (schemaType != null) {
      schemaType=schemaType.trim();
      if (schemaType.length() > 0) {
        XPathFragment frag=new XPathFragment();
        frag.setXPath(schemaType);
        QName qname=null;
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
          qname=new QName(url,frag.getLocalName());
          unmarshalRecord.setTypeQName(qname);
        }
 else {
          String url=unmarshalRecord.resolveNamespacePrefix(XMLConstants.EMPTY_STRING);
          if (null != url) {
            frag.setNamespaceURI(url);
            qname=new QName(url,frag.getLocalName());
            unmarshalRecord.setTypeQName(qname);
          }
        }
        returnDescriptor=xmlContext.getDescriptorByGlobalType(frag);
        if (returnDescriptor == null) {
          if (policy == null || (policy != null && policy != UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT && policy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(qname);
            if (theClass == null) {
              throw XMLMarshalException.unknownXsiTypeValue(schemaType,mapping);
            }
          }
        }
      }
    }
  }
  return returnDescriptor;
}"
66290,"public void pop(String prefix){
  List<String> uris=namespaceMap.get(prefix);
  if (uris != null) {
    int size=uris.size();
    if (size > 0) {
      String uri=uris.remove(size - 1);
      if (uri != null) {
        List<String> prefixes=uriToPrefixMap.get(uri);
        if (prefixes != null) {
          int prefixesSize=prefixes.size();
          if (prefixesSize > 0) {
            prefixes.remove(prefixesSize - 1);
          }
        }
      }
    }
  }
}","public void pop(String prefix){
  List<String> uris=namespaceMap.get(prefix);
  if (uris != null) {
    int size=uris.size();
    if (size > 0) {
      String uri=uris.remove(size - 1);
      if (size == 1) {
        namespaceMap.remove(prefix);
      }
      if (uri != null) {
        List<String> prefixes=uriToPrefixMap.get(uri);
        if (prefixes != null) {
          int prefixesSize=prefixes.size();
          if (prefixesSize == 1) {
            uriToPrefixMap.remove(uri);
          }
 else {
            prefixes.remove(prefixesSize - 1);
          }
        }
      }
    }
  }
}"
66291,"/** 
 * INTERNAL: Convert all the class-name-based settings in this converter to actual  class-based settings. This method is used when converting a project  that has been built with class names to a project with classes.
 * @param classLoader 
 */
public void convertClassNamesToClasses(ClassLoader classLoader){
  if (m_enumClass == null || (m_enumClass != null && !m_enumClass.getClassLoader().equals(classLoader))) {
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          m_enumClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(m_enumClassName,true,classLoader));
        }
 catch (        PrivilegedActionException exception) {
          throw ValidationException.classNotFoundWhileConvertingClassNames(m_enumClassName,exception.getException());
        }
      }
 else {
        m_enumClass=PrivilegedAccessHelper.getClassForName(m_enumClassName,true,classLoader);
      }
    }
 catch (    ClassNotFoundException exception) {
      throw ValidationException.classNotFoundWhileConvertingClassNames(m_enumClassName,exception);
    }
  }
}","/** 
 * INTERNAL: Convert all the class-name-based settings in this converter to actual  class-based settings. This method is used when converting a project  that has been built with class names to a project with classes.
 * @param classLoader 
 */
public void convertClassNamesToClasses(ClassLoader classLoader){
  if (m_enumClass == null || (m_enumClass != null && !m_enumClass.getClassLoader().equals(classLoader))) {
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          m_enumClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(m_enumClassName,true,classLoader));
        }
 catch (        PrivilegedActionException exception) {
          throw ValidationException.classNotFoundWhileConvertingClassNames(m_enumClassName,exception.getException());
        }
      }
 else {
        m_enumClass=PrivilegedAccessHelper.getClassForName(m_enumClassName,true,classLoader);
      }
    }
 catch (    ClassNotFoundException exception) {
      throw ValidationException.classNotFoundWhileConvertingClassNames(m_enumClassName,exception);
    }
  }
  initializeConversions(m_enumClass);
}"
66292,"/** 
 * INTERNAL: Every converter needs to be able to process themselves.
 */
public void process(DatabaseMapping mapping,MappingAccessor accessor,MetadataClass referenceClass,boolean isForMapKey){
  if (!EnumeratedMetadata.isValidEnumeratedType(referenceClass)) {
    throw ValidationException.invalidTypeForEnumeratedAttribute(mapping.getAttributeName(),referenceClass,accessor.getJavaClass());
  }
  boolean isOrdinal=true;
  if (m_enumeratedType != null) {
    isOrdinal=m_enumeratedType.equals(EnumType.ORDINAL.name());
  }
  setConverter(mapping,new EnumTypeConverter(mapping,getJavaClass(referenceClass),isOrdinal),isForMapKey);
}","/** 
 * INTERNAL: Every converter needs to be able to process themselves.
 */
public void process(DatabaseMapping mapping,MappingAccessor accessor,MetadataClass referenceClass,boolean isForMapKey){
  if (!EnumeratedMetadata.isValidEnumeratedType(referenceClass)) {
    throw ValidationException.invalidTypeForEnumeratedAttribute(mapping.getAttributeName(),referenceClass,accessor.getJavaClass());
  }
  boolean isOrdinal=true;
  if (m_enumeratedType != null) {
    isOrdinal=m_enumeratedType.equals(EnumType.ORDINAL.name());
  }
  setConverter(mapping,new EnumTypeConverter(mapping,referenceClass.getName()),isForMapKey);
}"
66293,"public NamespaceResolvableProject(NamespaceResolverWithPrefixes ns){
  super();
  this.ns=ns;
  buildDescriptors();
  setNamespaceResolverOnDescriptors();
}","public NamespaceResolvableProject(NamespaceResolverWithPrefixes ns){
  super();
  fieldQname=new QName(getSecondaryNamespace(),""String_Node_Str"");
  this.ns=ns;
  buildDescriptors();
  setNamespaceResolverOnDescriptors();
}"
66294,"protected void initializeConversions(Class enumClass){
  EnumSet theEnums=EnumSet.allOf(enumClass);
  Iterator<Enum> i=theEnums.iterator();
  while (i.hasNext()) {
    Enum theEnum=i.next();
    if (m_useOrdinalValues) {
      addConversionValue(theEnum.ordinal(),theEnum.name());
    }
 else {
      addConversionValue(theEnum.name(),theEnum.name());
    }
  }
}","protected void initializeConversions(Class enumClass){
  if (getFieldToAttributeValues().isEmpty()) {
    EnumSet theEnums=EnumSet.allOf(enumClass);
    Iterator<Enum> i=theEnums.iterator();
    while (i.hasNext()) {
      Enum theEnum=i.next();
      if (m_useOrdinalValues) {
        addConversionValue(theEnum.ordinal(),theEnum.name());
      }
 else {
        addConversionValue(theEnum.name(),theEnum.name());
      }
    }
  }
}"
66295,"/** 
 * INTERNAL: Every converter needs to be able to process themselves.
 */
public void process(DatabaseMapping mapping,MappingAccessor accessor,MetadataClass referenceClass,boolean isForMapKey){
  if (!EnumeratedMetadata.isValidEnumeratedType(referenceClass)) {
    throw ValidationException.invalidTypeForEnumeratedAttribute(mapping.getAttributeName(),referenceClass,accessor.getJavaClass());
  }
  boolean isOrdinal=true;
  if (m_enumeratedType != null) {
    isOrdinal=m_enumeratedType.equals(EnumType.ORDINAL.name());
  }
  setConverter(mapping,new EnumTypeConverter(mapping,referenceClass.getName()),isForMapKey);
}","/** 
 * INTERNAL: Every converter needs to be able to process themselves.
 */
public void process(DatabaseMapping mapping,MappingAccessor accessor,MetadataClass referenceClass,boolean isForMapKey){
  if (!EnumeratedMetadata.isValidEnumeratedType(referenceClass)) {
    throw ValidationException.invalidTypeForEnumeratedAttribute(mapping.getAttributeName(),referenceClass,accessor.getJavaClass());
  }
  boolean isOrdinal=true;
  if (m_enumeratedType != null) {
    isOrdinal=m_enumeratedType.equals(EnumType.ORDINAL.name());
  }
  setConverter(mapping,new EnumTypeConverter(mapping,referenceClass.getName(),isOrdinal),isForMapKey);
}"
66296,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  return suite;
}"
66297,"public XMLDirectMapping generateDirectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLDirectMapping mapping=new XMLDirectMapping();
  mapping.setAttributeName(property.getPropertyName());
  String fixedValue=property.getFixedValue();
  if (fixedValue != null) {
    mapping.setIsWriteOnly(true);
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.getXmlPath() != null) {
    mapping.setField(new XMLField(property.getXmlPath()));
  }
 else {
    mapping.setField(getXPathForField(property,namespaceInfo,true));
  }
  if (property.getDefaultValue() != null) {
    mapping.setNullValue(property.getDefaultValue());
  }
 else   if (property.getType().getRawName().equals(""String_Node_Str"")) {
    mapping.setNullValue(""String_Node_Str"");
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else {
    if (property.isNillable()) {
      mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
    }
    mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
    if (!mapping.getXPath().equals(""String_Node_Str"")) {
      ((NullPolicy)mapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.isXmlElementType()) {
    Class theClass=helper.getClassForJavaClass(property.getType());
    mapping.setAttributeClassification(theClass);
  }
  if (XMLConstants.QNAME_QNAME.equals(property.getSchemaType())) {
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
  }
  if (property.isSetCdata()) {
    mapping.setIsCDATA(property.isCdata());
  }
  descriptor.addMapping(mapping);
  return mapping;
}","public XMLDirectMapping generateDirectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLDirectMapping mapping=new XMLDirectMapping();
  mapping.setAttributeName(property.getPropertyName());
  String fixedValue=property.getFixedValue();
  if (fixedValue != null) {
    mapping.setIsWriteOnly(true);
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.getXmlPath() != null) {
    mapping.setField(new XMLField(property.getXmlPath()));
  }
 else {
    mapping.setField(getXPathForField(property,namespaceInfo,true));
  }
  if (property.getDefaultValue() != null) {
    mapping.setNullValue(property.getDefaultValue());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else {
    if (property.isNillable()) {
      mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
    }
    mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
    if (!mapping.getXPath().equals(""String_Node_Str"")) {
      ((NullPolicy)mapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.isXmlElementType()) {
    Class theClass=helper.getClassForJavaClass(property.getType());
    mapping.setAttributeClassification(theClass);
  }
  if (XMLConstants.QNAME_QNAME.equals(property.getSchemaType())) {
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
  }
  if (property.isSetCdata()) {
    mapping.setIsCDATA(property.isCdata());
  }
  descriptor.addMapping(mapping);
  return mapping;
}"
66298,"public void endElement(String uri,String localName,String name) throws SAXException {
  this.unmappedContentHandler.endElement(uri,localName,name);
  this.depth--;
  if (0 == depth) {
    parentRecord.endElement(uri,localName,name);
    xmlReader.setContentHandler(parentRecord);
    xmlReader.setLexicalHandler(parentRecord);
  }
}","public void endElement(String uri,String localName,String name) throws SAXException {
  this.unmappedContentHandler.endElement(uri,localName,name);
  this.depth--;
  if (0 == depth) {
    parentRecord.endUnmappedElement(uri,localName,name);
    xmlReader.setContentHandler(parentRecord);
    xmlReader.setLexicalHandler(parentRecord);
  }
}"
66299,"public void unmappedContent(){
  this.unmarshalContext.unmappedContent(this);
}","public void unmappedContent(){
  if (this.xPathNode.getParent() != null) {
    xPathNode=xPathNode.getParent();
  }
  this.unmarshalContext.unmappedContent(this);
}"
66300,"public ArrayList<Property> getFieldPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  for (Iterator<JavaField> fieldIt=cls.getDeclaredFields().iterator(); fieldIt.hasNext(); ) {
    JavaField nextField=fieldIt.next();
    if (!helper.isAnnotationPresent(nextField,XmlTransient.class)) {
      int modifiers=nextField.getModifiers();
      if (!Modifier.isTransient(modifiers) && ((Modifier.isPublic(nextField.getModifiers()) && onlyPublic) || !onlyPublic)) {
        if (!Modifier.isStatic(modifiers)) {
          Property property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
          properties.add(property);
        }
 else         if (Modifier.isFinal(modifiers) && helper.isAnnotationPresent(nextField,XmlAttribute.class)) {
          try {
            Property property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
            Object value=((JavaFieldImpl)nextField).get(null);
            String stringValue=(String)XMLConversionManager.getDefaultXMLManager().convertObject(value,String.class,property.getSchemaType());
            property.setFixedValue(stringValue);
            properties.add(property);
          }
 catch (          ClassCastException e) {
          }
catch (          IllegalAccessException e) {
          }
        }
      }
    }
 else {
      List<String> propOrderList=Arrays.asList(info.getPropOrder());
      if (propOrderList.contains(nextField.getName())) {
        throw JAXBException.transientInProporder(nextField.getName());
      }
    }
  }
  return properties;
}","public ArrayList<Property> getFieldPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  for (Iterator<JavaField> fieldIt=cls.getDeclaredFields().iterator(); fieldIt.hasNext(); ) {
    JavaField nextField=fieldIt.next();
    int modifiers=nextField.getModifiers();
    if (!helper.isAnnotationPresent(nextField,XmlTransient.class)) {
      if (!Modifier.isTransient(modifiers) && ((Modifier.isPublic(nextField.getModifiers()) && onlyPublic) || !onlyPublic)) {
        if (!Modifier.isStatic(modifiers)) {
          Property property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
          properties.add(property);
        }
 else         if (Modifier.isFinal(modifiers) && helper.isAnnotationPresent(nextField,XmlAttribute.class)) {
          try {
            Property property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
            Object value=((JavaFieldImpl)nextField).get(null);
            String stringValue=(String)XMLConversionManager.getDefaultXMLManager().convertObject(value,String.class,property.getSchemaType());
            property.setFixedValue(stringValue);
            properties.add(property);
          }
 catch (          ClassCastException e) {
          }
catch (          IllegalAccessException e) {
          }
        }
      }
    }
 else {
      List<String> propOrderList=Arrays.asList(info.getPropOrder());
      if (propOrderList.contains(nextField.getName())) {
        throw JAXBException.transientInProporder(nextField.getName());
      }
    }
  }
  return properties;
}"
66301,"public ArrayList getNoAccessTypePropertiesForClass(JavaClass cls,TypeInfo info){
  ArrayList list=new ArrayList();
  if (cls == null) {
    return list;
  }
  ArrayList fieldProperties=getFieldPropertiesForClass(cls,info,false);
  ArrayList methodProperties=getPropertyPropertiesForClass(cls,info,false);
  for (int i=0; i < fieldProperties.size(); i++) {
    Property next=(Property)fieldProperties.get(i);
    JavaHasAnnotations elem=next.getElement();
    if (hasJAXBAnnotations(elem)) {
      list.add(next);
    }
  }
  for (int i=0; i < methodProperties.size(); i++) {
    Property next=(Property)methodProperties.get(i);
    JavaHasAnnotations elem=next.getElement();
    if (hasJAXBAnnotations(elem)) {
      list.add(next);
    }
  }
  return list;
}","public ArrayList getNoAccessTypePropertiesForClass(JavaClass cls,TypeInfo info){
  ArrayList list=new ArrayList();
  if (cls == null) {
    return list;
  }
  ArrayList fieldProperties=getFieldPropertiesForClass(cls,info,false);
  ArrayList methodProperties=getPropertyPropertiesForClass(cls,info,false);
  for (int i=0; i < fieldProperties.size(); i++) {
    Property next=(Property)fieldProperties.get(i);
    JavaHasAnnotations elem=next.getElement();
    if (!hasJAXBAnnotations(elem)) {
      next.setTransient(true);
    }
    list.add(next);
  }
  for (int i=0; i < methodProperties.size(); i++) {
    Property next=(Property)methodProperties.get(i);
    JavaHasAnnotations elem=next.getElement();
    if (!hasJAXBAnnotations(elem)) {
      next.setTransient(true);
    }
    list.add(next);
  }
  return list;
}"
66302,"public JavaClass[] processObjectFactory(JavaClass objectFactoryClass,ArrayList<JavaClass> classes){
  Map<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl> elemDecls=new HashMap<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl>();
  org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry xmlReg=xmlRegistries.get(objectFactoryClass.getQualifiedName());
  if (xmlReg != null) {
    for (    org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlElementDecl : xmlReg.getXmlElementDecl()) {
      elemDecls.put(xmlElementDecl.getJavaMethod(),xmlElementDecl);
    }
  }
  Collection methods=objectFactoryClass.getDeclaredMethods();
  Iterator methodsIter=methods.iterator();
  NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(objectFactoryClass);
  while (methodsIter.hasNext()) {
    JavaMethod next=(JavaMethod)methodsIter.next();
    if (next.getName().startsWith(""String_Node_Str"")) {
      JavaClass type=next.getReturnType();
      if (type.getName().equals(""String_Node_Str"")) {
        type=(JavaClass)next.getReturnType().getActualTypeArguments().toArray()[0];
      }
 else {
        this.factoryMethods.put(next.getReturnType().getRawName(),next);
      }
      org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlEltDecl=elemDecls.get(next.getName());
      if (xmlEltDecl != null || helper.isAnnotationPresent(next,XmlElementDecl.class)) {
        QName qname;
        QName substitutionHead=null;
        String url;
        String localName;
        String defaultValue=null;
        Class scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
        if (xmlEltDecl != null) {
          url=xmlEltDecl.getNamespace();
          localName=xmlEltDecl.getName();
          String scopeClassName=xmlEltDecl.getScope();
          if (!scopeClassName.equals(""String_Node_Str"")) {
            JavaClass jScopeClass=helper.getJavaClass(scopeClassName);
            if (jScopeClass != null) {
              scopeClass=helper.getClassForJavaClass(jScopeClass);
              if (scopeClass == null) {
                scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
              }
            }
          }
          if (!xmlEltDecl.getSubstitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=xmlEltDecl.getSubstitutionHeadName();
            String subHeadNamespace=xmlEltDecl.getSubstitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(xmlEltDecl.getDefaultValue().length() == 1 && xmlEltDecl.getDefaultValue().startsWith(""String_Node_Str""))) {
            defaultValue=xmlEltDecl.getDefaultValue();
          }
        }
 else {
          XmlElementDecl elementDecl=(XmlElementDecl)helper.getAnnotation(next,XmlElementDecl.class);
          url=elementDecl.namespace();
          localName=elementDecl.name();
          scopeClass=elementDecl.scope();
          if (!elementDecl.substitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=elementDecl.substitutionHeadName();
            String subHeadNamespace=elementDecl.substitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(elementDecl.defaultValue().length() == 1 && elementDecl.defaultValue().startsWith(""String_Node_Str""))) {
            defaultValue=elementDecl.defaultValue();
          }
        }
        if (""String_Node_Str"".equals(url)) {
          url=namespaceInfo.getNamespace();
        }
        qname=new QName(url,localName);
        boolean isList=false;
        if (""String_Node_Str"".equals(type.getName())) {
          isList=true;
          if (type.hasActualTypeArguments()) {
            type=(JavaClass)type.getActualTypeArguments().toArray()[0];
          }
        }
        ElementDeclaration declaration=new ElementDeclaration(qname,type,type.getQualifiedName(),isList,scopeClass);
        if (substitutionHead != null) {
          declaration.setSubstitutionHead(substitutionHead);
        }
        if (defaultValue != null) {
          declaration.setDefaultValue(defaultValue);
        }
        if (helper.isAnnotationPresent(next,XmlJavaTypeAdapter.class)) {
          XmlJavaTypeAdapter typeAdapter=(XmlJavaTypeAdapter)helper.getAnnotation(next,XmlJavaTypeAdapter.class);
          Class typeAdapterClass=typeAdapter.value();
          declaration.setJavaTypeAdapterClass(typeAdapterClass);
          Method[] tacMethods=typeAdapterClass.getMethods();
          Class declJavaType=CompilerHelper.getTypeFromAdapterClass(typeAdapterClass);
          declaration.setJavaType(helper.getJavaClass(declJavaType));
          declaration.setAdaptedJavaType(type);
        }
        HashMap<QName,ElementDeclaration> elements=getElementDeclarationsForScope(scopeClass.getName());
        if (elements == null) {
          elements=new HashMap<QName,ElementDeclaration>();
          this.elementDeclarations.put(scopeClass.getName(),elements);
        }
        elements.put(qname,declaration);
      }
      if (!helper.isBuiltInJavaType(type) && !classes.contains(type)) {
        classes.add(type);
      }
    }
  }
  if (classes.size() > 0) {
    return classes.toArray(new JavaClass[classes.size()]);
  }
 else {
    return new JavaClass[0];
  }
}","public JavaClass[] processObjectFactory(JavaClass objectFactoryClass,ArrayList<JavaClass> classes){
  Map<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl> elemDecls=new HashMap<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl>();
  org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry xmlReg=xmlRegistries.get(objectFactoryClass.getQualifiedName());
  if (xmlReg != null) {
    for (    org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlElementDecl : xmlReg.getXmlElementDecl()) {
      elemDecls.put(xmlElementDecl.getJavaMethod(),xmlElementDecl);
    }
  }
  Collection methods=objectFactoryClass.getDeclaredMethods();
  Iterator methodsIter=methods.iterator();
  NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(objectFactoryClass);
  while (methodsIter.hasNext()) {
    JavaMethod next=(JavaMethod)methodsIter.next();
    if (next.getName().startsWith(""String_Node_Str"")) {
      JavaClass type=next.getReturnType();
      if (type.getName().equals(""String_Node_Str"")) {
        type=(JavaClass)next.getReturnType().getActualTypeArguments().toArray()[0];
      }
 else {
        this.factoryMethods.put(next.getReturnType().getRawName(),next);
      }
      org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlEltDecl=elemDecls.get(next.getName());
      if (xmlEltDecl != null || helper.isAnnotationPresent(next,XmlElementDecl.class)) {
        QName qname;
        QName substitutionHead=null;
        String url;
        String localName;
        String defaultValue=null;
        Class scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
        if (xmlEltDecl != null) {
          url=xmlEltDecl.getNamespace();
          localName=xmlEltDecl.getName();
          String scopeClassName=xmlEltDecl.getScope();
          if (!scopeClassName.equals(""String_Node_Str"")) {
            JavaClass jScopeClass=helper.getJavaClass(scopeClassName);
            if (jScopeClass != null) {
              scopeClass=helper.getClassForJavaClass(jScopeClass);
              if (scopeClass == null) {
                scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
              }
            }
          }
          if (!xmlEltDecl.getSubstitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=xmlEltDecl.getSubstitutionHeadName();
            String subHeadNamespace=xmlEltDecl.getSubstitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(xmlEltDecl.getDefaultValue().length() == 1 && xmlEltDecl.getDefaultValue().startsWith(""String_Node_Str""))) {
            defaultValue=xmlEltDecl.getDefaultValue();
          }
        }
 else {
          XmlElementDecl elementDecl=(XmlElementDecl)helper.getAnnotation(next,XmlElementDecl.class);
          url=elementDecl.namespace();
          localName=elementDecl.name();
          scopeClass=elementDecl.scope();
          if (!elementDecl.substitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=elementDecl.substitutionHeadName();
            String subHeadNamespace=elementDecl.substitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(elementDecl.defaultValue().length() == 1 && elementDecl.defaultValue().startsWith(""String_Node_Str""))) {
            defaultValue=elementDecl.defaultValue();
          }
        }
        if (""String_Node_Str"".equals(url)) {
          url=namespaceInfo.getNamespace();
        }
        qname=new QName(url,localName);
        boolean isList=false;
        if (""String_Node_Str"".equals(type.getName())) {
          isList=true;
          if (type.hasActualTypeArguments()) {
            type=(JavaClass)type.getActualTypeArguments().toArray()[0];
          }
        }
        ElementDeclaration declaration=new ElementDeclaration(qname,type,type.getQualifiedName(),isList,scopeClass);
        if (substitutionHead != null) {
          declaration.setSubstitutionHead(substitutionHead);
        }
        if (defaultValue != null) {
          declaration.setDefaultValue(defaultValue);
        }
        if (helper.isAnnotationPresent(next,XmlJavaTypeAdapter.class)) {
          XmlJavaTypeAdapter typeAdapter=(XmlJavaTypeAdapter)helper.getAnnotation(next,XmlJavaTypeAdapter.class);
          Class typeAdapterClass=typeAdapter.value();
          declaration.setJavaTypeAdapterClass(typeAdapterClass);
          Class declJavaType=CompilerHelper.getTypeFromAdapterClass(typeAdapterClass);
          declaration.setJavaType(helper.getJavaClass(declJavaType));
          declaration.setAdaptedJavaType(type);
        }
        HashMap<QName,ElementDeclaration> elements=getElementDeclarationsForScope(scopeClass.getName());
        if (elements == null) {
          elements=new HashMap<QName,ElementDeclaration>();
          this.elementDeclarations.put(scopeClass.getName(),elements);
        }
        elements.put(qname,declaration);
      }
      if (!helper.isBuiltInJavaType(type) && !classes.contains(type)) {
        classes.add(type);
      }
    }
  }
  if (classes.size() > 0) {
    return classes.toArray(new JavaClass[classes.size()]);
  }
 else {
    return new JavaClass[0];
  }
}"
66303,"/** 
 * Perform any final generation and/or validation operations on TypeInfo  properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    for (    Property property : tInfo.getPropertyList()) {
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isXmlIdRef()) {
        JavaClass typeClass=property.getActualType();
        TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
        if (targetInfo != null && targetInfo.getIDProperty() == null) {
          throw JAXBException.invalidIdRef(property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny() && tInfo.isSetAnyElementPropertyName() && !(tInfo.getAnyElementPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),tInfo.getAnyElementPropertyName(),jClass.getName());
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!isCollectionType(property) && !property.getType().isArray()) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isChoice()) {
        processChoiceProperty(property,tInfo,jClass,property.getActualType());
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
    }
  }
}","/** 
 * Perform any final generation and/or validation operations on TypeInfo  properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    for (    Property property : tInfo.getPropertyList()) {
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isXmlIdRef()) {
        JavaClass typeClass=property.getActualType();
        TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
        if (targetInfo != null && targetInfo.getIDProperty() == null) {
          throw JAXBException.invalidIdRef(property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny() && tInfo.isSetAnyElementPropertyName() && !(tInfo.getAnyElementPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),tInfo.getAnyElementPropertyName(),jClass.getName());
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!isCollectionType(property) && !property.getType().isArray()) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isChoice()) {
        processChoiceProperty(property,tInfo,jClass,property.getActualType());
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
    }
  }
}"
66304,"/** 
 * Returns true if the field or method passed in is annotated with JAXB annotations.
 */
private boolean hasJAXBAnnotations(JavaHasAnnotations elem){
  if (helper.isAnnotationPresent(elem,XmlElement.class) || helper.isAnnotationPresent(elem,XmlAttribute.class) || helper.isAnnotationPresent(elem,XmlAnyElement.class)|| helper.isAnnotationPresent(elem,XmlAnyAttribute.class)|| helper.isAnnotationPresent(elem,XmlValue.class)|| helper.isAnnotationPresent(elem,XmlElements.class)|| helper.isAnnotationPresent(elem,XmlElementRef.class)|| helper.isAnnotationPresent(elem,XmlElementRefs.class)|| helper.isAnnotationPresent(elem,XmlID.class)|| helper.isAnnotationPresent(elem,XmlSchemaType.class)|| helper.isAnnotationPresent(elem,XmlElementWrapper.class)|| helper.isAnnotationPresent(elem,XmlList.class)|| helper.isAnnotationPresent(elem,XmlMimeType.class)|| helper.isAnnotationPresent(elem,XmlIDREF.class)) {
    return true;
  }
  return false;
}","/** 
 * Returns true if the field or method passed in is annotated with JAXB annotations.
 */
private boolean hasJAXBAnnotations(JavaHasAnnotations elem){
  if (helper.isAnnotationPresent(elem,XmlElement.class) || helper.isAnnotationPresent(elem,XmlAttribute.class) || helper.isAnnotationPresent(elem,XmlAnyElement.class)|| helper.isAnnotationPresent(elem,XmlAnyAttribute.class)|| helper.isAnnotationPresent(elem,XmlValue.class)|| helper.isAnnotationPresent(elem,XmlElements.class)|| helper.isAnnotationPresent(elem,XmlElementRef.class)|| helper.isAnnotationPresent(elem,XmlElementRefs.class)|| helper.isAnnotationPresent(elem,XmlID.class)|| helper.isAnnotationPresent(elem,XmlSchemaType.class)|| helper.isAnnotationPresent(elem,XmlElementWrapper.class)|| helper.isAnnotationPresent(elem,XmlList.class)|| helper.isAnnotationPresent(elem,XmlMimeType.class)|| helper.isAnnotationPresent(elem,XmlIDREF.class)|| helper.isAnnotationPresent(elem,XmlPath.class)|| helper.isAnnotationPresent(elem,XmlInverseReference.class)) {
    return true;
  }
  return false;
}"
66305,"/** 
 * Use the definition object to drop the schema entity from the database. This is used for dropping tables, views, procedures ... etc ...
 */
public void dropObject(DatabaseObjectDefinition databaseObjectDefinition) throws EclipseLinkException {
  boolean usesBatchWriting=false;
  if (getSession().getPlatform().usesBatchWriting()) {
    usesBatchWriting=true;
    getSession().getPlatform().setUsesBatchWriting(false);
  }
  try {
    if (shouldWriteToDatabase()) {
      databaseObjectDefinition.dropFromDatabase(getSession());
    }
 else {
      Writer dropSchemaWriter=getDropSchemaWriter();
      databaseObjectDefinition.dropObject(getSession(),dropSchemaWriter,createSQLFiles);
      if (createSQLFiles) {
        this.appendToDDLWriter(dropSchemaWriter,getSession().getPlatform().getStoredProcedureTerminationToken());
      }
      this.appendToDDLWriter(dropSchemaWriter,""String_Node_Str"");
    }
  }
  finally {
    if (usesBatchWriting) {
      getSession().getPlatform().setUsesBatchWriting(true);
    }
  }
}","/** 
 * Use the definition object to drop the schema entity from the database. This is used for dropping tables, views, procedures ... etc ...
 */
public void dropObject(DatabaseObjectDefinition databaseObjectDefinition) throws EclipseLinkException {
  boolean usesBatchWriting=false;
  if (getSession().getPlatform().usesBatchWriting()) {
    usesBatchWriting=true;
    getSession().getPlatform().setUsesBatchWriting(false);
  }
  try {
    databaseObjectDefinition.preDropObject(getSession(),getDropSchemaWriter(),createSQLFiles);
    if (shouldWriteToDatabase()) {
      databaseObjectDefinition.dropFromDatabase(getSession());
    }
 else {
      Writer dropSchemaWriter=getDropSchemaWriter();
      databaseObjectDefinition.dropObject(getSession(),dropSchemaWriter,createSQLFiles);
      if (createSQLFiles) {
        this.appendToDDLWriter(dropSchemaWriter,getSession().getPlatform().getStoredProcedureTerminationToken());
      }
      this.appendToDDLWriter(dropSchemaWriter,""String_Node_Str"");
    }
  }
  finally {
    if (usesBatchWriting) {
      getSession().getPlatform().setUsesBatchWriting(true);
    }
  }
}"
66306,"/** 
 * Use the definition object to create the schema entity on the database. This is used for creating tables, views, procedures ... etc ...
 */
public void createObject(DatabaseObjectDefinition databaseObjectDefinition) throws EclipseLinkException {
  boolean usesBatchWriting=false;
  if (getSession().getPlatform().usesBatchWriting()) {
    usesBatchWriting=true;
    getSession().getPlatform().setUsesBatchWriting(false);
  }
  try {
    if (shouldWriteToDatabase()) {
      databaseObjectDefinition.createOnDatabase(getSession());
    }
 else {
      databaseObjectDefinition.createObject(getSession(),createSchemaWriter);
      if (createSQLFiles) {
        this.appendToDDLWriter(createSchemaWriter,getSession().getPlatform().getStoredProcedureTerminationToken());
      }
      this.appendToDDLWriter(createSchemaWriter,""String_Node_Str"");
      databaseObjectDefinition.postCreateObject(getSession(),createSchemaWriter,createSQLFiles);
    }
  }
  finally {
    if (usesBatchWriting) {
      getSession().getPlatform().setUsesBatchWriting(true);
    }
  }
}","/** 
 * Use the definition object to create the schema entity on the database. This is used for creating tables, views, procedures ... etc ...
 */
public void createObject(DatabaseObjectDefinition databaseObjectDefinition) throws EclipseLinkException {
  boolean usesBatchWriting=false;
  if (getSession().getPlatform().usesBatchWriting()) {
    usesBatchWriting=true;
    getSession().getPlatform().setUsesBatchWriting(false);
  }
  try {
    if (shouldWriteToDatabase()) {
      databaseObjectDefinition.createOnDatabase(getSession());
    }
 else {
      databaseObjectDefinition.createObject(getSession(),createSchemaWriter);
      if (createSQLFiles) {
        this.appendToDDLWriter(createSchemaWriter,getSession().getPlatform().getStoredProcedureTerminationToken());
      }
      this.appendToDDLWriter(createSchemaWriter,""String_Node_Str"");
    }
    databaseObjectDefinition.postCreateObject(getSession(),createSchemaWriter,createSQLFiles);
  }
  finally {
    if (usesBatchWriting) {
      getSession().getPlatform().setUsesBatchWriting(true);
    }
  }
}"
66307,"/** 
 * INTERNAL:<br/> Write the SQL create index string if passed a writer, else delegate to a method that executes the string on the database.
 * @see #createIndicesOnUniqueKeysOnDatabase(AbstractSession)
 * @throws ValidationException wraps any IOException from the writer
 */
public void createIndicesOnUniqueKeys(AbstractSession session,Writer schemaWriter) throws EclipseLinkException {
  if (schemaWriter == null) {
    createIndicesOnUniqueKeysOnDatabase(session);
    return;
  }
  try {
    for (    UniqueKeyConstraint uniqueKey : getUniqueKeys()) {
      buildIndexCreationWriter(session,uniqueKey.getName(),uniqueKey.getSourceFields(),schemaWriter);
      if (createSQLFiles) {
        schemaWriter.write(session.getPlatform().getStoredProcedureTerminationToken());
      }
      schemaWriter.write(""String_Node_Str"");
    }
    for (    FieldDefinition field : getFields()) {
      if (field.isUnique()) {
        List<String> columnAsList=new ArrayList<String>();
        columnAsList.add(field.getName());
        buildIndexCreationWriter(session,field.getName(),columnAsList,new StringWriter());
        if (createSQLFiles) {
          schemaWriter.write(session.getPlatform().getStoredProcedureTerminationToken());
        }
        schemaWriter.write(""String_Node_Str"");
      }
    }
  }
 catch (  IOException exception) {
    throw ValidationException.fileError(exception);
  }
}","/** 
 * INTERNAL:<br/> Write the SQL create index string if passed a writer, else delegate to a method that executes the string on the database.
 * @see #createIndicesOnUniqueKeysOnDatabase(AbstractSession)
 * @throws ValidationException wraps any IOException from the writer
 */
public void createIndicesOnUniqueKeys(AbstractSession session,Writer schemaWriter) throws EclipseLinkException {
  if (schemaWriter == null) {
    createIndicesOnUniqueKeysOnDatabase(session);
    return;
  }
  try {
    for (    UniqueKeyConstraint uniqueKey : getUniqueKeys()) {
      buildIndexCreationWriter(session,uniqueKey.getName(),uniqueKey.getSourceFields(),schemaWriter);
      if (createSQLFiles) {
        schemaWriter.write(session.getPlatform().getStoredProcedureTerminationToken());
      }
      schemaWriter.write(""String_Node_Str"");
    }
    for (    FieldDefinition field : getFields()) {
      if (field.isUnique()) {
        List<String> columnAsList=new ArrayList<String>();
        columnAsList.add(field.getName());
        buildIndexCreationWriter(session,field.getName(),columnAsList,schemaWriter);
        if (createSQLFiles) {
          schemaWriter.write(session.getPlatform().getStoredProcedureTerminationToken());
        }
        schemaWriter.write(""String_Node_Str"");
      }
    }
  }
 catch (  IOException exception) {
    throw ValidationException.fileError(exception);
  }
}"
66308,"/** 
 * Creates the decorator responsible to format the <code>Boolean</code> values in the Clustering combo box.
 * @return {@link SessionClusteringPropertiesPage.BooleanLabelDecorator}
 */
private CellRendererAdapter buildClusteringLabelDecorator(){
  ResourceRepository resourceRepository=resourceRepository();
  return new TriStateBooleanCellRendererAdapter(resourceRepository){
    @Override protected String trueResourceKey(){
      return ""String_Node_Str"";
    }
    @Override protected String falseResourceKey(){
      return ""String_Node_Str"";
    }
    @Override protected String undefinedResourceKey(){
      return ""String_Node_Str"";
    }
  }
;
}","/** 
 * Creates the decorator responsible to format the <code>Boolean</code> values in the Clustering combo box.
 * @return {@link SessionClusteringPropertiesPage.BooleanLabelDecorator}
 */
private CellRendererAdapter buildClusteringLabelDecorator(){
  ResourceRepository resourceRepository=resourceRepository();
  return new BooleanCellRendererAdapter(resourceRepository.getString(""String_Node_Str""),resourceRepository.getString(""String_Node_Str""));
}"
66309,"/** 
 * Creates the <code>CollectionValueModel</code> containing the actual items to be shown in the Clustering combo box.
 * @return The <code>CollectionValueModel</code> containing the items
 */
private CollectionValueModel buildClusteringCollectionHolder(){
  return new CollectionAspectAdapter(getSelectionHolder(),null){
    protected Iterator getValueFromSubject(){
      return new ArrayIterator(new Object[]{TriStateBoolean.UNDEFINED,TriStateBoolean.TRUE,TriStateBoolean.FALSE});
    }
  }
;
}","/** 
 * Creates the <code>CollectionValueModel</code> containing the actual items to be shown in the Clustering combo box.
 * @return The <code>CollectionValueModel</code> containing the items
 */
private CollectionValueModel buildClusteringCollectionHolder(){
  return new CollectionAspectAdapter(getSelectionHolder(),null){
    protected Iterator getValueFromSubject(){
      return new ArrayIterator(new Object[]{Boolean.TRUE,Boolean.FALSE});
    }
  }
;
}"
66310,"/** 
 * Creates the <code>PropertyValueModel</code> responsible to listen to changes made to the type of clustering to be used, which is either Remote Command Manager or Cache Synchronization.
 * @return A new <code>PropertyValueModel</code>
 */
private PropertyValueModel buildClusteringTypeSelectionHolder(){
  String[] propertyNames=new String[]{SessionAdapter.REMOTE_COMMAND_MANAGER_CONFIG_PROPERTY};
  return new PropertyAspectAdapter(getSelectionHolder(),propertyNames){
    protected Object getValueFromSubject(){
      SessionAdapter adapter=(SessionAdapter)subject;
      if (adapter.hasNoClusteringService())       return TriStateBoolean.UNDEFINED;
      return TriStateBoolean.valueOf(adapter.hasRemoteCommandManager());
    }
    protected void setValueOnSubject(    Object value){
      SessionAdapter adapter=(SessionAdapter)subject;
      if (TriStateBoolean.TRUE.equals(value)) {
        adapter.setClusteringToRemoteCommandManager();
      }
 else       if (TriStateBoolean.FALSE.equals(value) || TriStateBoolean.UNDEFINED.equals(value)) {
        adapter.setClusteringToNothing();
      }
    }
  }
;
}","/** 
 * Creates the <code>PropertyValueModel</code> responsible to listen to changes made to the type of clustering to be used, which is either Remote Command Manager or Cache Synchronization.
 * @return A new <code>PropertyValueModel</code>
 */
private PropertyValueModel buildClusteringTypeSelectionHolder(){
  String[] propertyNames=new String[]{SessionAdapter.REMOTE_COMMAND_MANAGER_CONFIG_PROPERTY};
  return new PropertyAspectAdapter(getSelectionHolder(),propertyNames){
    protected Object getValueFromSubject(){
      SessionAdapter adapter=(SessionAdapter)subject;
      if (adapter.hasNoClusteringService()) {
        return Boolean.FALSE;
      }
      return Boolean.valueOf(adapter.hasRemoteCommandManager());
    }
    protected void setValueOnSubject(    Object value){
      SessionAdapter adapter=(SessionAdapter)subject;
      if (Boolean.TRUE.equals(value)) {
        adapter.setClusteringToRemoteCommandManager();
      }
 else {
        adapter.setClusteringToNothing();
      }
    }
  }
;
}"
66311,"protected void setValueOnSubject(Object value){
  SessionAdapter adapter=(SessionAdapter)subject;
  if (TriStateBoolean.TRUE.equals(value)) {
    adapter.setClusteringToRemoteCommandManager();
  }
 else   if (TriStateBoolean.FALSE.equals(value) || TriStateBoolean.UNDEFINED.equals(value)) {
    adapter.setClusteringToNothing();
  }
}","protected void setValueOnSubject(Object value){
  SessionAdapter adapter=(SessionAdapter)subject;
  if (Boolean.TRUE.equals(value)) {
    adapter.setClusteringToRemoteCommandManager();
  }
 else {
    adapter.setClusteringToNothing();
  }
}"
66312,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLComplexTestSuite(""String_Node_Str""));
  return suite;
}"
66313,"/** 
 * The setup is done as a test, both to record its failure, and to allow execution in the server.
 */
public void testSetup(){
  clearCache();
  DatabaseSession session=JUnitTestCase.getServerSession();
  EmployeePopulator employeePopulator=new EmployeePopulator();
  PartnerLinkPopulator partnerLinkPopulator=new PartnerLinkPopulator();
  new AdvancedTableCreator().replaceTables(session);
  comparer=new JUnitDomainObjectComparer();
  comparer.setSession((AbstractSession)session.getActiveSession());
  employeePopulator.buildExamples();
  employeePopulator.persistExample(session);
  partnerLinkPopulator.buildExamples();
  partnerLinkPopulator.persistExample(session);
  new InheritedTableManager().replaceTables(session);
  new DataTypesTableCreator().replaceTables(session);
}","/** 
 * The setup is done as a test, both to record its failure, and to allow execution in the server.
 */
public void testSetup(){
  clearCache();
  DatabaseSession session=JUnitTestCase.getServerSession();
  EmployeePopulator employeePopulator=new EmployeePopulator();
  PartnerLinkPopulator partnerLinkPopulator=new PartnerLinkPopulator();
  new AdvancedTableCreator().replaceTables(session);
  comparer=new JUnitDomainObjectComparer();
  comparer.setSession((AbstractSession)session.getActiveSession());
  employeePopulator.buildExamples();
  employeePopulator.persistExample(session);
  partnerLinkPopulator.buildExamples();
  partnerLinkPopulator.persistExample(session);
  new InheritedTableManager().replaceTables(session);
  new DataTypesTableCreator().replaceTables(session);
  SchemaManager schema=new SchemaManager((session));
  schema.replaceObject(buildStoredFunction());
}"
66314,"/** 
 * Return a unique hashCode (as an int) for this instance.  The code will be based on the application name if set, otherwise it will be based on the loader. Assumes that this instance's loader is non-null.
 */
public int hashCode(){
  int hash;
  if (getApplicationName() != null) {
    hash=getApplicationName().hashCode();
  }
 else {
    hash=getLoader().hashCode();
  }
  return hash;
}","/** 
 * Return a hashCode (as an int) for this instance.
 */
public int hashCode(){
  return 7;
}"
66315,"/** 
 * Equality will be based on the applicationName attribute if set, or the class  loader if applicationName is null.
 * @param Object to be compared to this HelperContextMapKey instance
 * @return true if the given object is equal to this HelperContextMapKey instance; false otherwise
 */
public boolean equals(Object obj){
  HelperContextMapKey ckey;
  try {
    ckey=(HelperContextMapKey)obj;
  }
 catch (  ClassCastException cce) {
    return false;
  }
  if (applicationName != null) {
    return this.applicationName.equals(ckey.getApplicationName());
  }
  return areLoadersEqual(ckey.getLoader());
}","/** 
 * Equality will be based on the applicationName attribute if set, or the class  loader if applicationName is null.
 * @param Object to be compared to this HelperContextMapKey instance
 * @return true if the given object is equal to this HelperContextMapKey instance; false otherwise
 */
public boolean equals(Object obj){
  HelperContextMapKey ckey;
  try {
    ckey=(HelperContextMapKey)obj;
  }
 catch (  ClassCastException cce) {
    return false;
  }
  if (applicationName != null) {
    return this.applicationName.equals(ckey.getApplicationName()) || areLoadersEqual(ckey.getLoader());
  }
  return areLoadersEqual(ckey.getLoader());
}"
66316,"/** 
 * Returns the map of helper contexts, keyed on Identifier, for the current application
 * @return
 */
static ConcurrentMap<String,HelperContext> getContextMap(){
  ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
  String classLoaderName=contextClassLoader.getClass().getName();
  HelperContextMapKey key=getContextMapKey(contextClassLoader,classLoaderName);
  ConcurrentHashMap<String,HelperContext> contextMap=helperContexts.get(key);
  if (contextMap != null && (classLoaderName.contains(WAS_CLASSLOADER_NAME) || classLoaderName.contains(JBOSS_CLASSLOADER_NAME))) {
    if (key.getApplicationName() != null) {
      for (      HelperContextMapKey existingKey : helperContexts.keySet()) {
        if (key.equals(existingKey)) {
          if (!key.areLoadersEqual(existingKey.getLoader())) {
            helperContexts.remove(key,contextMap);
            contextMap=null;
          }
        }
      }
    }
  }
  if (null == contextMap) {
    contextMap=new ConcurrentHashMap<String,HelperContext>();
    ConcurrentHashMap existingMap=helperContexts.putIfAbsent(key,contextMap);
    if (existingMap != null) {
      contextMap=existingMap;
    }
    if (key.getClass() == ClassConstants.STRING) {
      helperContexts.put(new HelperContextMapKey(contextClassLoader),contextMap);
    }
  }
  addNotificationListener(key);
  return contextMap;
}","/** 
 * Returns the map of helper contexts, keyed on Identifier, for the current application
 * @return
 */
static ConcurrentMap<String,HelperContext> getContextMap(){
  ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
  String classLoaderName=contextClassLoader.getClass().getName();
  HelperContextMapKey key=getContextMapKey(contextClassLoader,classLoaderName);
  ConcurrentHashMap<String,HelperContext> contextMap=helperContexts.get(key);
  if (contextMap != null && (classLoaderName.contains(WAS_CLASSLOADER_NAME) || classLoaderName.contains(JBOSS_CLASSLOADER_NAME))) {
    if (key.getApplicationName() != null) {
      for (      HelperContextMapKey existingKey : helperContexts.keySet()) {
        if (key.equals(existingKey)) {
          if (!key.areLoadersEqual(existingKey.getLoader())) {
            helperContexts.remove(key,contextMap);
            contextMap=null;
          }
        }
      }
    }
  }
  if (null == contextMap) {
    contextMap=new ConcurrentHashMap<String,HelperContext>();
    ConcurrentHashMap existingMap=helperContexts.putIfAbsent(key,contextMap);
    if (null == existingMap) {
      addNotificationListener(key);
    }
 else {
      contextMap=existingMap;
    }
  }
  return contextMap;
}"
66317,"/** 
 * INTERNAL: Initialize the mapping.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.getField() instanceof XMLField && getValueConverter() instanceof TypeConversionConverter) {
    TypeConversionConverter converter=(TypeConversionConverter)getValueConverter();
    this.getField().setType(converter.getObjectClass());
  }
  ContainerPolicy cp=getContainerPolicy();
  if (cp != null) {
    if (cp.getContainerClass() == null) {
      Class cls=session.getDatasourcePlatform().getConversionManager().convertClassNameToClass(cp.getContainerClassName());
      cp.setContainerClass(cls);
    }
  }
  ((XMLField)this.getField()).setIsCDATA(this.isCDATA());
}","/** 
 * INTERNAL: Initialize the mapping.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.getField() instanceof XMLField) {
    if (getValueConverter() instanceof TypeConversionConverter) {
      TypeConversionConverter converter=(TypeConversionConverter)getValueConverter();
      this.getField().setType(converter.getObjectClass());
    }
    String xpathString=((XMLField)getField()).getXPath();
    if (this.isAbstractCompositeDirectCollectionMapping() && (xpathString.indexOf(XMLConstants.ATTRIBUTE) == -1) && (!xpathString.endsWith(XMLConstants.TEXT))) {
      throw DescriptorException.invalidXpathForXMLDirectMapping(this);
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  if (cp != null) {
    if (cp.getContainerClass() == null) {
      Class cls=session.getDatasourcePlatform().getConversionManager().convertClassNameToClass(cp.getContainerClassName());
      cp.setContainerClass(cls);
    }
  }
  ((XMLField)this.getField()).setIsCDATA(this.isCDATA());
}"
66318,"public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  ((XMLField)getField()).setIsCDATA(this.isCDATA());
}","public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  ((XMLField)getField()).setIsCDATA(this.isCDATA());
  String xpathString=((XMLField)getField()).getXPath();
  if (this.isAbstractDirectMapping() && (xpathString.indexOf(XMLConstants.ATTRIBUTE) == -1) && (!xpathString.endsWith(XMLConstants.TEXT))) {
    throw DescriptorException.invalidXpathForXMLDirectMapping(this);
  }
}"
66319,"/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  try {
    outputStreamWrite(SPACE);
    outputStreamWrite(qName.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
    outputStreamWrite((byte)'=');
    outputStreamWrite((byte)'""');
    writeValue(value,false);
    outputStreamWrite(CLOSE_ATTRIBUTE_VALUE);
  }
 catch (  UnsupportedEncodingException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  try {
    outputStreamWrite(SPACE);
    outputStreamWrite(qName.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
    outputStreamWrite((byte)'=');
    outputStreamWrite((byte)'""');
    writeValue(value,true);
    outputStreamWrite(CLOSE_ATTRIBUTE_VALUE);
  }
 catch (  UnsupportedEncodingException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66320,"/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean escapeChars){
  for (int x=0, length=value.length(); x < length; x++) {
    final char character=value.charAt(x);
    if (character > 0x7F) {
      if (character > 0x7FF) {
        if ((character >= Character.MIN_HIGH_SURROGATE) && (character <= Character.MAX_LOW_SURROGATE)) {
          int uc=(((character & 0x3ff) << 10) | (value.charAt(++x) & 0x3ff)) + 0x10000;
          outputStreamWrite((byte)(0xF0 | ((uc >> 18))));
          outputStreamWrite((byte)(0x80 | ((uc >> 12) & 0x3F)));
          outputStreamWrite((byte)(0x80 | ((uc >> 6) & 0x3F)));
          outputStreamWrite((byte)(0x80 + (uc & 0x3F)));
          continue;
        }
 else {
          outputStreamWrite((byte)(0xE0 + (character >> 12)));
        }
        outputStreamWrite((byte)(0x80 + ((character >> 6) & 0x3F)));
      }
 else {
        outputStreamWrite((byte)(0xC0 + (character >> 6)));
      }
      outputStreamWrite((byte)(0x80 + (character & 0x3F)));
    }
 else {
      if (escapeChars) {
switch (character) {
case '&':
{
            outputStreamWrite(AMP);
            break;
          }
case '<':
{
          outputStreamWrite(LT);
          break;
        }
default :
      outputStreamWrite((byte)character);
  }
}
 else {
  outputStreamWrite((byte)character);
}
}
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean escapeChars){
  for (int x=0, length=value.length(); x < length; x++) {
    final char character=value.charAt(x);
    if (character > 0x7F) {
      if (character > 0x7FF) {
        if ((character >= Character.MIN_HIGH_SURROGATE) && (character <= Character.MAX_LOW_SURROGATE)) {
          int uc=(((character & 0x3ff) << 10) | (value.charAt(++x) & 0x3ff)) + 0x10000;
          outputStreamWrite((byte)(0xF0 | ((uc >> 18))));
          outputStreamWrite((byte)(0x80 | ((uc >> 12) & 0x3F)));
          outputStreamWrite((byte)(0x80 | ((uc >> 6) & 0x3F)));
          outputStreamWrite((byte)(0x80 + (uc & 0x3F)));
          continue;
        }
 else {
          outputStreamWrite((byte)(0xE0 + (character >> 12)));
        }
        outputStreamWrite((byte)(0x80 + ((character >> 6) & 0x3F)));
      }
 else {
        outputStreamWrite((byte)(0xC0 + (character >> 6)));
      }
      outputStreamWrite((byte)(0x80 + (character & 0x3F)));
    }
 else {
      if (escapeChars) {
switch (character) {
case '&':
{
            outputStreamWrite(AMP);
            break;
          }
case '<':
{
          outputStreamWrite(LT);
          break;
        }
case '""':
{
        outputStreamWrite(QUOT);
        break;
      }
default :
    outputStreamWrite((byte)character);
}
}
 else {
outputStreamWrite((byte)character);
}
}
}
}"
66321,"/** 
 * INTERNAL:
 */
protected void writeValue(String value){
  try {
    if (value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
default :
      writer.write(character);
  }
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value){
  try {
    if (value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    writer.write(character);
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}"
66322,"public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> propertyMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if ((next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 3) || (next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 2)) {
      int modifiers=next.getModifiers();
      if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
        propertyMethods.add(next);
      }
    }
 else     if ((next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 3)) {
      int modifiers=next.getModifiers();
      if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
        propertyMethods.add(next);
      }
    }
  }
  ArrayList<String> propertyNames=new ArrayList<String>();
  for (int i=0; i < propertyMethods.size(); i++) {
    boolean isPropertyTransient=false;
    JavaMethod nextMethod=propertyMethods.get(i);
    String propertyName=""String_Node_Str"";
    JavaMethod getMethod;
    JavaMethod setMethod;
    JavaMethod propertyMethod=null;
    if (!nextMethod.getName().startsWith(""String_Node_Str"")) {
      if (nextMethod.getName().startsWith(""String_Node_Str"")) {
        propertyName=nextMethod.getName().substring(3);
      }
 else       if (nextMethod.getName().startsWith(""String_Node_Str"")) {
        propertyName=nextMethod.getName().substring(2);
      }
      getMethod=nextMethod;
      String setMethodName=""String_Node_Str"" + propertyName;
      propertyName=Introspector.decapitalize(propertyName);
      JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
      setMethod=cls.getDeclaredMethod(setMethodName,paramTypes);
      if (setMethod != null && !setMethod.getAnnotations().isEmpty()) {
        if (!helper.isAnnotationPresent(setMethod,XmlTransient.class)) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
 else {
        if (!helper.isAnnotationPresent(getMethod,XmlTransient.class)) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
    }
 else {
      propertyName=nextMethod.getName().substring(3);
      setMethod=nextMethod;
      String getMethodName=""String_Node_Str"" + propertyName;
      getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      if (getMethod == null) {
        getMethodName=""String_Node_Str"" + propertyName;
        getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      }
      if (getMethod != null && !getMethod.getAnnotations().isEmpty()) {
        if (!helper.isAnnotationPresent(getMethod,XmlTransient.class)) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
 else {
        if (!helper.isAnnotationPresent(setMethod,XmlTransient.class)) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
      propertyName=Introspector.decapitalize(propertyName);
    }
    JavaClass ptype=null;
    if (getMethod != null) {
      ptype=(JavaClass)getMethod.getReturnType();
    }
 else {
      ptype=setMethod.getParameterTypes()[0];
    }
    if (!propertyNames.contains(propertyName)) {
      propertyNames.add(propertyName);
      Property property=buildNewProperty(info,cls,propertyMethod,propertyName,ptype);
      property.setTransient(isPropertyTransient);
      if (getMethod != null) {
        property.setGetMethodName(getMethod.getName());
      }
      if (setMethod != null) {
        property.setSetMethodName(setMethod.getName());
      }
      property.setMethodProperty(true);
      if (!helper.isAnnotationPresent(property.getElement(),XmlTransient.class)) {
        properties.add(property);
      }
 else {
        List<String> propOrderList=Arrays.asList(info.getPropOrder());
        if (propOrderList.contains(propertyName)) {
          throw JAXBException.transientInProporder(propertyName);
        }
        property.setTransient(true);
      }
    }
  }
  Collections.sort(properties,new PropertyComparitor());
  return properties;
}","public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> propertyMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if ((next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 3) || (next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 2)) {
      int modifiers=next.getModifiers();
      if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
        propertyMethods.add(next);
      }
    }
 else     if (next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 3 && next.getParameterTypes().length == 1) {
      int modifiers=next.getModifiers();
      if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
        propertyMethods.add(next);
      }
    }
  }
  ArrayList<String> propertyNames=new ArrayList<String>();
  for (int i=0; i < propertyMethods.size(); i++) {
    boolean isPropertyTransient=false;
    JavaMethod nextMethod=propertyMethods.get(i);
    String propertyName=""String_Node_Str"";
    JavaMethod getMethod;
    JavaMethod setMethod;
    JavaMethod propertyMethod=null;
    if (!nextMethod.getName().startsWith(""String_Node_Str"")) {
      if (nextMethod.getName().startsWith(""String_Node_Str"")) {
        propertyName=nextMethod.getName().substring(3);
      }
 else       if (nextMethod.getName().startsWith(""String_Node_Str"")) {
        propertyName=nextMethod.getName().substring(2);
      }
      getMethod=nextMethod;
      String setMethodName=""String_Node_Str"" + propertyName;
      propertyName=Introspector.decapitalize(propertyName);
      JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
      setMethod=cls.getDeclaredMethod(setMethodName,paramTypes);
      if (setMethod != null && !setMethod.getAnnotations().isEmpty()) {
        if (!helper.isAnnotationPresent(setMethod,XmlTransient.class)) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
 else {
        if (!helper.isAnnotationPresent(getMethod,XmlTransient.class)) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
    }
 else {
      propertyName=nextMethod.getName().substring(3);
      setMethod=nextMethod;
      String getMethodName=""String_Node_Str"" + propertyName;
      getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      if (getMethod == null) {
        getMethodName=""String_Node_Str"" + propertyName;
        getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      }
      if (getMethod != null && !getMethod.getAnnotations().isEmpty()) {
        if (!helper.isAnnotationPresent(getMethod,XmlTransient.class)) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
 else {
        if (!helper.isAnnotationPresent(setMethod,XmlTransient.class)) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
        }
      }
      propertyName=Introspector.decapitalize(propertyName);
    }
    JavaClass ptype=null;
    if (getMethod != null) {
      ptype=(JavaClass)getMethod.getReturnType();
    }
 else {
      ptype=setMethod.getParameterTypes()[0];
    }
    if (!propertyNames.contains(propertyName)) {
      propertyNames.add(propertyName);
      Property property=buildNewProperty(info,cls,propertyMethod,propertyName,ptype);
      property.setTransient(isPropertyTransient);
      if (getMethod != null) {
        property.setGetMethodName(getMethod.getName());
      }
      if (setMethod != null) {
        property.setSetMethodName(setMethod.getName());
      }
      property.setMethodProperty(true);
      if (!helper.isAnnotationPresent(property.getElement(),XmlTransient.class)) {
        properties.add(property);
      }
 else {
        List<String> propOrderList=Arrays.asList(info.getPropOrder());
        if (propOrderList.contains(propertyName)) {
          throw JAXBException.transientInProporder(propertyName);
        }
        property.setTransient(true);
      }
    }
  }
  Collections.sort(properties,new PropertyComparitor());
  return properties;
}"
66323,"public SAXUnmarshaller(XMLUnmarshaller xmlUnmarshaller,Map<String,Boolean> parserFeatures) throws XMLMarshalException {
  super();
  try {
    saxParserFactory=SAXParserFactory.newInstance();
    saxParserFactory.setNamespaceAware(true);
    saxParserFactory.setFeature(""String_Node_Str"",true);
    try {
      saxParserFactory.setFeature(""String_Node_Str"",true);
    }
 catch (    org.xml.sax.SAXNotRecognizedException ex) {
    }
catch (    org.xml.sax.SAXNotSupportedException ex) {
    }
    if (null != parserFeatures) {
      for (      Map.Entry<String,Boolean> parserFeature : parserFeatures.entrySet()) {
        try {
          saxParserFactory.setFeature(parserFeature.getKey(),parserFeature.getValue());
        }
 catch (        org.xml.sax.SAXNotRecognizedException ex) {
        }
catch (        org.xml.sax.SAXNotSupportedException ex) {
        }
      }
    }
    saxParser=saxParserFactory.newSAXParser();
    xmlReader=new XMLReader(saxParser.getXMLReader());
    xmlReader.setErrorHandler(new DefaultErrorHandler());
    xmlParser=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLParser();
    xmlParser.setNamespaceAware(true);
    xmlParser.setValidationMode(XMLParser.NONVALIDATING);
    this.xmlUnmarshaller=xmlUnmarshaller;
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}","public SAXUnmarshaller(XMLUnmarshaller xmlUnmarshaller,Map<String,Boolean> parserFeatures) throws XMLMarshalException {
  super();
  try {
    saxParserFactory=SAXParserFactory.newInstance();
    saxParserFactory.setNamespaceAware(true);
    saxParserFactory.setFeature(XMLReader.NAMESPACE_PREFIXES_FEATURE,true);
    try {
      saxParserFactory.setFeature(XMLReader.REPORT_IGNORED_ELEMENT_CONTENT_WHITESPACE_FEATURE,true);
    }
 catch (    org.xml.sax.SAXNotRecognizedException ex) {
    }
catch (    org.xml.sax.SAXNotSupportedException ex) {
    }
    if (null != parserFeatures) {
      for (      Map.Entry<String,Boolean> parserFeature : parserFeatures.entrySet()) {
        try {
          saxParserFactory.setFeature(parserFeature.getKey(),parserFeature.getValue());
        }
 catch (        org.xml.sax.SAXNotRecognizedException ex) {
        }
catch (        org.xml.sax.SAXNotSupportedException ex) {
        }
      }
    }
    saxParser=saxParserFactory.newSAXParser();
    xmlReader=new XMLReader(saxParser.getXMLReader());
    xmlReader.setErrorHandler(new DefaultErrorHandler());
    xmlParser=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLParser();
    xmlParser.setNamespaceAware(true);
    xmlParser.setValidationMode(XMLParser.NONVALIDATING);
    this.xmlUnmarshaller=xmlUnmarshaller;
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}"
66324,"public void parse(String systemId) throws IOException, SAXException {
  reader.parse(systemId);
}","public void parse(String systemId) throws IOException, SAXException {
  try {
    reader.parse(systemId);
  }
 catch (  SAXNotSupportedException e) {
    String message=e.getMessage();
    if (message != null && message.contains(""String_Node_Str"")) {
      reader.setFeature(NAMESPACE_PREFIXES_FEATURE,false);
      reader.parse(systemId);
    }
 else {
      throw e;
    }
  }
}"
66325,"public JavaClass[] processObjectFactory(JavaClass objectFactoryClass,ArrayList<JavaClass> classes){
  Map<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl> elemDecls=new HashMap<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl>();
  org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry xmlReg=xmlRegistries.get(objectFactoryClass.getQualifiedName());
  if (xmlReg != null) {
    for (    org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlElementDecl : xmlReg.getXmlElementDecl()) {
      elemDecls.put(xmlElementDecl.getJavaMethod(),xmlElementDecl);
    }
  }
  Collection methods=objectFactoryClass.getDeclaredMethods();
  Iterator methodsIter=methods.iterator();
  NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(objectFactoryClass);
  while (methodsIter.hasNext()) {
    JavaMethod next=(JavaMethod)methodsIter.next();
    if (next.getName().startsWith(""String_Node_Str"")) {
      JavaClass type=next.getReturnType();
      if (type.getName().equals(""String_Node_Str"")) {
        type=(JavaClass)next.getReturnType().getActualTypeArguments().toArray()[0];
      }
 else {
        this.factoryMethods.put(next.getReturnType().getRawName(),next);
      }
      org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlEltDecl=elemDecls.get(next.getName());
      if (xmlEltDecl != null || helper.isAnnotationPresent(next,XmlElementDecl.class)) {
        QName qname;
        QName substitutionHead=null;
        String url;
        String localName;
        String defaultValue=null;
        Class scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
        if (xmlEltDecl != null) {
          url=xmlEltDecl.getNamespace();
          localName=xmlEltDecl.getName();
          String scopeClassName=xmlEltDecl.getScope();
          if (!scopeClassName.equals(""String_Node_Str"")) {
            JavaClass jScopeClass=helper.getJavaClass(scopeClassName);
            if (jScopeClass != null) {
              scopeClass=helper.getClassForJavaClass(jScopeClass);
              if (scopeClass == null) {
                scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
              }
            }
          }
          if (!xmlEltDecl.getSubstitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=xmlEltDecl.getSubstitutionHeadName();
            String subHeadNamespace=xmlEltDecl.getSubstitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(xmlEltDecl.getDefaultValue().length() == 1 && xmlEltDecl.getDefaultValue().startsWith(""String_Node_Str""))) {
            defaultValue=xmlEltDecl.getDefaultValue();
          }
        }
 else {
          XmlElementDecl elementDecl=(XmlElementDecl)helper.getAnnotation(next,XmlElementDecl.class);
          url=elementDecl.namespace();
          localName=elementDecl.name();
          scopeClass=elementDecl.scope();
          if (!elementDecl.substitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=elementDecl.substitutionHeadName();
            String subHeadNamespace=elementDecl.substitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(elementDecl.defaultValue().length() == 1 && elementDecl.defaultValue().startsWith(""String_Node_Str""))) {
            defaultValue=elementDecl.defaultValue();
          }
        }
        if (""String_Node_Str"".equals(url)) {
          url=namespaceInfo.getNamespace();
        }
        qname=new QName(url,localName);
        boolean isList=false;
        if (""String_Node_Str"".equals(type.getName())) {
          isList=true;
          if (type.hasActualTypeArguments()) {
            type=(JavaClass)type.getActualTypeArguments().toArray()[0];
          }
        }
        ElementDeclaration declaration=new ElementDeclaration(qname,type,type.getQualifiedName(),isList,scopeClass);
        if (substitutionHead != null) {
          declaration.setSubstitutionHead(substitutionHead);
        }
        if (defaultValue != null) {
          declaration.setDefaultValue(defaultValue);
        }
        if (helper.isAnnotationPresent(next,XmlJavaTypeAdapter.class)) {
          XmlJavaTypeAdapter typeAdapter=(XmlJavaTypeAdapter)helper.getAnnotation(next,XmlJavaTypeAdapter.class);
          Class typeAdapterClass=typeAdapter.value();
          declaration.setJavaTypeAdapterClass(typeAdapterClass);
          Method[] tacMethods=typeAdapterClass.getMethods();
          Class declJavaType=null;
          for (int i=0; i < tacMethods.length; i++) {
            Method method=tacMethods[i];
            if (method.getName().equals(""String_Node_Str"")) {
              declJavaType=method.getReturnType();
              break;
            }
          }
          declaration.setJavaType(helper.getJavaClass(declJavaType));
          declaration.setAdaptedJavaType(type);
        }
        HashMap<QName,ElementDeclaration> elements=getElementDeclarationsForScope(scopeClass.getName());
        if (elements == null) {
          elements=new HashMap<QName,ElementDeclaration>();
          this.elementDeclarations.put(scopeClass.getName(),elements);
        }
        elements.put(qname,declaration);
      }
      if (!helper.isBuiltInJavaType(type) && !classes.contains(type)) {
        classes.add(type);
      }
    }
  }
  if (classes.size() > 0) {
    return classes.toArray(new JavaClass[classes.size()]);
  }
 else {
    return new JavaClass[0];
  }
}","public JavaClass[] processObjectFactory(JavaClass objectFactoryClass,ArrayList<JavaClass> classes){
  Map<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl> elemDecls=new HashMap<String,org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl>();
  org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry xmlReg=xmlRegistries.get(objectFactoryClass.getQualifiedName());
  if (xmlReg != null) {
    for (    org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlElementDecl : xmlReg.getXmlElementDecl()) {
      elemDecls.put(xmlElementDecl.getJavaMethod(),xmlElementDecl);
    }
  }
  Collection methods=objectFactoryClass.getDeclaredMethods();
  Iterator methodsIter=methods.iterator();
  NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(objectFactoryClass);
  while (methodsIter.hasNext()) {
    JavaMethod next=(JavaMethod)methodsIter.next();
    if (next.getName().startsWith(""String_Node_Str"")) {
      JavaClass type=next.getReturnType();
      if (type.getName().equals(""String_Node_Str"")) {
        type=(JavaClass)next.getReturnType().getActualTypeArguments().toArray()[0];
      }
 else {
        this.factoryMethods.put(next.getReturnType().getRawName(),next);
      }
      org.eclipse.persistence.jaxb.xmlmodel.XmlRegistry.XmlElementDecl xmlEltDecl=elemDecls.get(next.getName());
      if (xmlEltDecl != null || helper.isAnnotationPresent(next,XmlElementDecl.class)) {
        QName qname;
        QName substitutionHead=null;
        String url;
        String localName;
        String defaultValue=null;
        Class scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
        if (xmlEltDecl != null) {
          url=xmlEltDecl.getNamespace();
          localName=xmlEltDecl.getName();
          String scopeClassName=xmlEltDecl.getScope();
          if (!scopeClassName.equals(""String_Node_Str"")) {
            JavaClass jScopeClass=helper.getJavaClass(scopeClassName);
            if (jScopeClass != null) {
              scopeClass=helper.getClassForJavaClass(jScopeClass);
              if (scopeClass == null) {
                scopeClass=javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class;
              }
            }
          }
          if (!xmlEltDecl.getSubstitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=xmlEltDecl.getSubstitutionHeadName();
            String subHeadNamespace=xmlEltDecl.getSubstitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(xmlEltDecl.getDefaultValue().length() == 1 && xmlEltDecl.getDefaultValue().startsWith(""String_Node_Str""))) {
            defaultValue=xmlEltDecl.getDefaultValue();
          }
        }
 else {
          XmlElementDecl elementDecl=(XmlElementDecl)helper.getAnnotation(next,XmlElementDecl.class);
          url=elementDecl.namespace();
          localName=elementDecl.name();
          scopeClass=elementDecl.scope();
          if (!elementDecl.substitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=elementDecl.substitutionHeadName();
            String subHeadNamespace=elementDecl.substitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            substitutionHead=new QName(subHeadNamespace,subHeadLocal);
          }
          if (!(elementDecl.defaultValue().length() == 1 && elementDecl.defaultValue().startsWith(""String_Node_Str""))) {
            defaultValue=elementDecl.defaultValue();
          }
        }
        if (""String_Node_Str"".equals(url)) {
          url=namespaceInfo.getNamespace();
        }
        qname=new QName(url,localName);
        boolean isList=false;
        if (""String_Node_Str"".equals(type.getName())) {
          isList=true;
          if (type.hasActualTypeArguments()) {
            type=(JavaClass)type.getActualTypeArguments().toArray()[0];
          }
        }
        ElementDeclaration declaration=new ElementDeclaration(qname,type,type.getQualifiedName(),isList,scopeClass);
        if (substitutionHead != null) {
          declaration.setSubstitutionHead(substitutionHead);
        }
        if (defaultValue != null) {
          declaration.setDefaultValue(defaultValue);
        }
        if (helper.isAnnotationPresent(next,XmlJavaTypeAdapter.class)) {
          XmlJavaTypeAdapter typeAdapter=(XmlJavaTypeAdapter)helper.getAnnotation(next,XmlJavaTypeAdapter.class);
          Class typeAdapterClass=typeAdapter.value();
          declaration.setJavaTypeAdapterClass(typeAdapterClass);
          Method[] tacMethods=typeAdapterClass.getMethods();
          Class declJavaType=CompilerHelper.getTypeFromAdapterClass(typeAdapterClass);
          declaration.setJavaType(helper.getJavaClass(declJavaType));
          declaration.setAdaptedJavaType(type);
        }
        HashMap<QName,ElementDeclaration> elements=getElementDeclarationsForScope(scopeClass.getName());
        if (elements == null) {
          elements=new HashMap<QName,ElementDeclaration>();
          this.elementDeclarations.put(scopeClass.getName(),elements);
        }
        elements.put(qname,declaration);
      }
      if (!helper.isBuiltInJavaType(type) && !classes.contains(type)) {
        classes.add(type);
      }
    }
  }
  if (classes.size() > 0) {
    return classes.toArray(new JavaClass[classes.size()]);
  }
 else {
    return new JavaClass[0];
  }
}"
66326,"public void endDocument(){
  try {
    xmlStreamWriter.writeEndDocument();
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void endDocument(){
  try {
    xmlStreamWriter.writeEndDocument();
    xmlStreamWriter.flush();
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66327,"public void startDocument(String encoding,String version){
  try {
    xmlStreamWriter.writeStartDocument(encoding,version);
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void startDocument(String encoding,String version){
  try {
    if (XMLConstants.DEFAULT_XML_ENCODING.equals(encoding)) {
      xmlStreamWriter.writeStartDocument(version);
    }
 else {
      xmlStreamWriter.writeStartDocument(encoding,version);
    }
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66328,"public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  try {
    String namespaceURI=xPathFragment.getNamespaceURI();
    if (namespaceURI == null) {
      xmlStreamWriter.writeStartElement(XMLConstants.EMPTY_STRING,xPathFragment.getLocalName(),XMLConstants.EMPTY_STRING);
      String defaultNamespace=xmlStreamWriter.getNamespaceContext().getNamespaceURI(XMLConstants.EMPTY_STRING);
      if (defaultNamespace != null && defaultNamespace.length() > 0) {
        xmlStreamWriter.writeDefaultNamespace(XMLConstants.EMPTY_STRING);
      }
    }
 else {
      String prefix=xPathFragment.getPrefix();
      if (prefix == null) {
        prefix=XMLConstants.EMPTY_STRING;
      }
      xmlStreamWriter.writeStartElement(prefix,xPathFragment.getLocalName(),namespaceURI);
    }
    writePrefixMappings();
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  try {
    String namespaceURI=xPathFragment.getNamespaceURI();
    if (namespaceURI == null) {
      NamespaceContext namespaceContext=xmlStreamWriter.getNamespaceContext();
      if (null == namespaceContext) {
        xmlStreamWriter.writeStartElement(xPathFragment.getLocalName());
      }
 else {
        xmlStreamWriter.writeStartElement(XMLConstants.EMPTY_STRING,xPathFragment.getLocalName(),XMLConstants.EMPTY_STRING);
        String defaultNamespace=xmlStreamWriter.getNamespaceContext().getNamespaceURI(XMLConstants.EMPTY_STRING);
        if (defaultNamespace != null && defaultNamespace.length() > 0) {
          xmlStreamWriter.writeDefaultNamespace(XMLConstants.EMPTY_STRING);
        }
      }
    }
 else {
      String prefix=xPathFragment.getPrefix();
      if (prefix == null) {
        prefix=XMLConstants.EMPTY_STRING;
      }
      xmlStreamWriter.writeStartElement(prefix,xPathFragment.getLocalName(),namespaceURI);
    }
    writePrefixMappings();
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66329,"/** 
 * Build and return a TopLink project for reading and writing MWProjects from and to XML files.
 */
private Project buildProject(){
  Project topLinkProject=new Project();
  topLinkProject.setName(""String_Node_Str"");
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWClassHandle.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWAttributeHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWMethodHandle.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWTableHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWColumnHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWReferenceHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.QName.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWNamedSchemaComponentHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWDescriptorHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWMappingHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWDescriptorQueryParameterHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWQueryableHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWLoginSpecHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWColumnPairHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWQueryKeyHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.meta.MWClass.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.meta.MWClassAttribute.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.meta.MWClassRepository.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.meta.MWMethod.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.meta.MWTypeDeclaration.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.meta.MWMethodParameter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWDatabase.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWColumn.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWColumnPair.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWLoginSpec.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWEisLoginSpec.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWProperty.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWReference.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWTable.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.MWXmlSchemaRepository.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.MWXmlSchema.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.MWXmlSchema.BuiltInNamespace.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.MWNamespace.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.AbstractSchemaComponent.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.AbstractNamedSchemaComponent.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ExplicitAttributeDeclaration.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ExplicitElementDeclaration.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ExplicitSchemaTypeDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ExplicitComplexTypeDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ExplicitSimpleTypeDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ModelGroupDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.SchemaComponentReference.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ReferencedModelGroup.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ReferencedSchemaTypeDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ReferencedComplexTypeDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ReferencedSimpleTypeDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ReferencedAttributeDeclaration.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ReferencedElementDeclaration.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.AbstractParticle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ExplicitModelGroup.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.NullParticle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.Wildcard.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.Content.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ComplexContent.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.EmptyContent.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.SimpleContent.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.IdentityConstraintDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.IdentityConstraint.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.KeyIdentityConstraint.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.KeyRefIdentityConstraint.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.UniqueIdentityConstraint.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.resource.ResourceSpecification.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.resource.ClasspathResourceSpecification.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.resource.FileResourceSpecification.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.resource.UrlResourceSpecification.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.MWProject.buildLegacy60Descriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.MWProjectDefaultsPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.MWTransactionalProjectCachingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.relational.MWRelationalProject.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.relational.MWSequencingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.relational.MWRelationalProjectDefaultsPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.relational.MWTableGenerationPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWXmlProject.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWOXProject.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWEisProject.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWOXProjectDefaultsPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWEisProjectDefaultsPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.xml.MWXmlField.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWMappingDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWRefreshCachePolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWAbstractTransactionalPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorCopyPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorInstantiationPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorLockingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorAfterLoadingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorCachingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorCacheExpiry.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorEventsPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorInterfaceAliasPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWAbstractClassIndicatorPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWClassIndicatorFieldPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWClassIndicatorExtractionMethodPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWClassIndicatorValue.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorInheritancePolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalClassDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWTableDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalTransactionalPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalPrimaryKeyPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWUserDefinedQueryKey.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalDescriptorInheritancePolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalClassIndicatorFieldPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWInterfaceDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWAggregateDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWTableDescriptorLockingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWDescriptorMultiTableInfoPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWSecondaryTableHolder.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalReturningPolicyInsertFieldReturnOnlyFlag.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalReturningPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWXmlDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWCompositeEisDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWRootEisDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWOXDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWEisTransactionalPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWXmlPrimaryKeyPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWOXDescriptorInheritancePolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWEisDescriptorInheritancePolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWXmlClassIndicatorFieldPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWEisDescriptorLockingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWEisReturningPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWEisReturningPolicyInsertFieldReturnOnlyFlag.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWDefaultNullValuePolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWTypeConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWObjectTypeConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWObjectTypeConverter.ValuePair.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWSerializedObjectConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWTypeConversionConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWAbstractReferenceMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWTransformationMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWFieldTransformerAssociation.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWTransformer.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWMethodBasedTransformer.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWClassBasedTransformer.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWContainerPolicy.MWContainerPolicyRoot.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.DefaultingContainerClass.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWCollectionContainerPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWListContainerPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWSetContainerPolicy.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWMapContainerPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWDirectMapContainerPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWDirectMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWDirectContainerMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalDirectMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWDirectToFieldMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWDirectToXmlTypeMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWVariableOneToOneMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWColumnQueryKeyPair.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWAbstractTableReferenceMapping.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWOneToOneMapping.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWOneToManyMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWCollectionMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWCollectionOrdering.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWManyToManyMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalDirectCollectionMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalDirectContainerMapping.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalDirectMapMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalTransformationMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalFieldTransformerAssociation.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWAggregateMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWAggregatePathToColumn.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalTypeConversionConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWXmlDirectMapping.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWAbstractXmlDirectCollectionMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWXmlDirectCollectionMapping.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWAbstractAnyMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWAnyObjectMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWAnyCollectionMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWAbstractCompositeMapping.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWCompositeObjectMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWCompositeCollectionMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWXmlTransformationMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWXmlFieldTransformerAssociation.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWXmlFieldPair.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWEisOneToOneMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWEisReferenceMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWEisOneToManyMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWXmlTypeConversionConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.MWQueryManager.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.MWAbstractQuery.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.MWAbstractReadQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.MWQueryParameter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWAbstractRelationalReadQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWRelationalReadAllQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWRelationalSpecificQueryOptions.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWRelationalReadObjectQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWReportQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWReportAttributeItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWAttributeItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWGroupingItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWOrderingItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWBatchReadItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWJoinedItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWReportOrderingItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWArgument.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWNullArgument.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWAutoGeneratedQueryFormat.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWBasicExpression.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWCompoundExpression.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWEJBQLQueryFormat.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWExpression.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWExpressionQueryFormat.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWLiteralArgument.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWQueryableArgument.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWQueryableArgumentElement.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWQueryFormat.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWRelationalQueryManager.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWQueryParameterArgument.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWSQLQueryFormat.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWStringQueryFormat.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.xml.MWEisQueryManager.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.xml.MWAbstractEisReadQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.xml.MWEisReadAllQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.xml.MWEisReadObjectQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.xml.MWEisInteraction.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.xml.MWEisInteraction.ArgumentPair.buildDescriptor());
  return topLinkProject;
}","/** 
 * Build and return a TopLink project for reading and writing MWProjects from and to XML files.
 */
private Project buildProject(){
  Project topLinkProject=new Project();
  topLinkProject.setName(""String_Node_Str"");
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWClassHandle.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWAttributeHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWMethodHandle.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWTableHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWColumnHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWReferenceHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.QName.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWNamedSchemaComponentHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWDescriptorHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWMappingHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWDescriptorQueryParameterHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWQueryableHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWLoginSpecHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWColumnPairHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.handles.MWQueryKeyHandle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.meta.MWClass.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.meta.MWClassAttribute.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.meta.MWClassRepository.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.meta.MWMethod.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.meta.MWTypeDeclaration.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.meta.MWMethodParameter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWDatabase.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWColumn.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWColumnPair.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWLoginSpec.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWEisLoginSpec.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWProperty.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWReference.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.db.MWTable.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.MWXmlSchemaRepository.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.MWXmlSchema.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.MWXmlSchema.BuiltInNamespace.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.MWNamespace.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.AbstractSchemaComponent.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.AbstractNamedSchemaComponent.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ExplicitAttributeDeclaration.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ExplicitElementDeclaration.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ExplicitSchemaTypeDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ExplicitComplexTypeDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ExplicitSimpleTypeDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ModelGroupDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.SchemaComponentReference.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ReferencedModelGroup.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ReferencedSchemaTypeDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ReferencedComplexTypeDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ReferencedSimpleTypeDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ReferencedAttributeDeclaration.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ReferencedElementDeclaration.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.AbstractParticle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ExplicitModelGroup.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.NullParticle.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.Wildcard.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.Content.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.ComplexContent.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.EmptyContent.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.SimpleContent.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.IdentityConstraintDefinition.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.IdentityConstraint.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.KeyIdentityConstraint.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.KeyRefIdentityConstraint.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.schema.UniqueIdentityConstraint.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.resource.ResourceSpecification.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.resource.ClasspathResourceSpecification.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.resource.FileResourceSpecification.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.resource.UrlResourceSpecification.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.MWProject.buildLegacy60Descriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.MWProjectDefaultsPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.MWTransactionalProjectCachingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.relational.MWRelationalProject.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.relational.MWSequencingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.relational.MWRelationalProjectDefaultsPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.relational.MWTableGenerationPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWXmlProject.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWOXProject.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWEisProject.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWOXProjectDefaultsPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.project.xml.MWEisProjectDefaultsPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.xml.MWXmlField.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWMappingDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWRefreshCachePolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWAbstractTransactionalPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorCopyPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorInstantiationPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorLockingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorAfterLoadingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorCachingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorCacheExpiry.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorEventsPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorInterfaceAliasPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWAbstractClassIndicatorPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWClassIndicatorFieldPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWClassIndicatorExtractionMethodPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWClassIndicatorValue.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.MWDescriptorInheritancePolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalClassDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWTableDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalTransactionalPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalPrimaryKeyPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWUserDefinedQueryKey.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalDescriptorInheritancePolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalClassIndicatorFieldPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWInterfaceDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWAggregateDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWTableDescriptorLockingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWDescriptorMultiTableInfoPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWSecondaryTableHolder.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalReturningPolicyInsertFieldReturnOnlyFlag.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.relational.MWRelationalReturningPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWXmlDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWCompositeEisDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWRootEisDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWOXDescriptor.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWEisTransactionalPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWXmlPrimaryKeyPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWOXDescriptorInheritancePolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWEisDescriptorInheritancePolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWXmlClassIndicatorFieldPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWEisDescriptorLockingPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWEisReturningPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.descriptor.xml.MWEisReturningPolicyInsertFieldReturnOnlyFlag.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWDefaultNullValuePolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWTypeConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWObjectTypeConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWObjectTypeConverter.ValuePair.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWSerializedObjectConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWTypeConversionConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWAbstractReferenceMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWTransformationMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWFieldTransformerAssociation.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWTransformer.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWMethodBasedTransformer.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWClassBasedTransformer.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWContainerPolicy.MWContainerPolicyRoot.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.DefaultingContainerClass.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWCollectionContainerPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWListContainerPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWSetContainerPolicy.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWMapContainerPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWDirectMapContainerPolicy.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWDirectMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.MWDirectContainerMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalDirectMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWDirectToFieldMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWDirectToXmlTypeMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWVariableOneToOneMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWColumnQueryKeyPair.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWAbstractTableReferenceMapping.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWOneToOneMapping.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWOneToManyMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWCollectionMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWCollectionOrdering.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWManyToManyMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalDirectCollectionMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalDirectContainerMapping.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalDirectMapMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalTransformationMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalFieldTransformerAssociation.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWAggregateMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWAggregatePathToColumn.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.relational.MWRelationalTypeConversionConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWXmlDirectMapping.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWAbstractXmlDirectCollectionMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWXmlDirectCollectionMapping.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWAbstractAnyMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWAnyObjectMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWAnyCollectionMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWAbstractCompositeMapping.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWCompositeObjectMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWCompositeCollectionMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWXmlTransformationMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWXmlFieldTransformerAssociation.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWXmlFieldPair.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWEisOneToOneMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWEisReferenceMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWEisOneToManyMapping.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.mapping.xml.MWXmlTypeConversionConverter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.MWQueryManager.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.MWAbstractQuery.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.MWAbstractReadQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.MWQueryParameter.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWAbstractRelationalReadQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWRelationalReadAllQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWRelationalSpecificQueryOptions.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWRelationalReadObjectQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWReportQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWReportAttributeItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWAttributeItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWGroupingItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWOrderingItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWBatchReadItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWJoinedItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWReportOrderingItem.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWArgument.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWNullArgument.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWAutoGeneratedQueryFormat.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWBasicExpression.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWCompoundExpression.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWEJBQLQueryFormat.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWExpression.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWExpressionQueryFormat.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWLiteralArgument.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWQueryableArgument.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWQueryableArgumentElement.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWQueryFormat.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWRelationalQueryManager.legacy60BuildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWQueryParameterArgument.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWSQLQueryFormat.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.relational.MWStringQueryFormat.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.xml.MWEisQueryManager.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.xml.MWAbstractEisReadQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.xml.MWEisReadAllQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.xml.MWEisReadObjectQuery.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.xml.MWEisInteraction.buildDescriptor());
  topLinkProject.addDescriptor(org.eclipse.persistence.tools.workbench.mappingsmodel.query.xml.MWEisInteraction.ArgumentPair.buildDescriptor());
  return topLinkProject;
}"
66330,"protected void createReportQuery(){
  MWReportQuery reportQuery=((MWRelationalQueryManager)getEmployeeDescriptor().getQueryManager()).addReportQuery(""String_Node_Str"");
  MWQueryable managerQueryable=getEmployeeDescriptor().mappingNamed(""String_Node_Str"");
  MWQueryable firstNameQueryable=getEmployeeDescriptor().mappingNamed(""String_Node_Str"");
  Collection<MWQueryable> queryables=new Vector<MWQueryable>();
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.AVERAGE_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.COUNT_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.DISTINCT_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.MAXIMUM_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.MINIMUM_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.SUM_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.VARIANCE_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(""String_Node_Str"");
}","protected void createReportQuery(){
  MWReportQuery reportQuery=((MWRelationalQueryManager)getEmployeeDescriptor().getQueryManager()).addReportQuery(""String_Node_Str"");
  MWQueryable managerQueryable=getEmployeeDescriptor().mappingNamed(""String_Node_Str"");
  MWQueryable firstNameQueryable=getEmployeeDescriptor().mappingNamed(""String_Node_Str"");
  Collection<MWQueryable> queryables=new Vector<MWQueryable>();
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.AVERAGE_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.COUNT_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.DISTINCT_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.MAXIMUM_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.MINIMUM_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.SUM_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
  reportQuery.addAttributeItem(""String_Node_Str"",queryables.iterator()).setFunction(MWReportAttributeItem.VARIANCE_FUNCTION);
  queryables.add(firstNameQueryable);
  queryables.add(managerQueryable);
}"
66331,"/** 
 * Test should serialize/deserialize successfully/
 */
public void testResolveWithHelperContextSetInUserMap(){
  SDOHelperContext.putHelperContext(Thread.currentThread().getContextClassLoader(),localCtx);
  serialize(localDObj,FILE_NAME);
  SDODataObject dobj=(SDODataObject)deserialize(FILE_NAME);
  String dobjImplClassName=dobj.getType().getInstanceClassName();
  assertTrue(""String_Node_Str"" + implClassname + ""String_Node_Str""+ dobjImplClassName+ ""String_Node_Str"",dobjImplClassName.equals(implClassname));
  SDOHelperContext.removeHelperContext(Thread.currentThread().getContextClassLoader());
}","/** 
 * Test should serialize/deserialize successfully/
 */
public void testResolveWithHelperContextSetInUserMap(){
  SDOHelperContext.putHelperContext(Thread.currentThread().getContextClassLoader(),new SDOHelperContext());
  String xsdString=getXSDString(CONTEXT1_DATAOBJECT_XSD_PATH);
  localCtx=new SDOHelperContext(""String_Node_Str"");
  localCtx.getXSDHelper().define(xsdString);
  localDObj=load(CONTEXT1_DATAOBJECT_XML_PATH,localCtx);
  SDOHelperContext.putHelperContext(Thread.currentThread().getContextClassLoader(),localCtx);
  serialize(localDObj,FILE_NAME);
  SDODataObject dobj=(SDODataObject)deserialize(FILE_NAME);
  String dobjImplClassName=dobj.getType().getInstanceClassName();
  assertTrue(""String_Node_Str"" + implClassname + ""String_Node_Str""+ dobjImplClassName+ ""String_Node_Str"",dobjImplClassName.equals(implClassname));
  SDOHelperContext.removeHelperContext(Thread.currentThread().getContextClassLoader());
}"
66332,"/** 
 * INTERNAL: Remove a ClassLoader/HelperContext key/value pair from the Thread  HelperContext map.
 * @param key class loader
 */
public static void removeHelperContext(ClassLoader key){
  if (key == null) {
    return;
  }
  userSetHelperContexts.remove(key);
}","/** 
 * INTERNAL
 * @param identifier the specific identifier of the HelperContext to be removed. """" for a Global helper
 * @param key the ClassLoader associated with the HelperContext to be removed
 */
public static void removeHelperContext(String identifier,ClassLoader key){
  if (key == null) {
    return;
  }
  WeakHashMap<String,WeakReference<HelperContext>> currentMap=userSetHelperContexts.get(key);
  if (currentMap != null) {
    currentMap.remove(key);
  }
}"
66333,"public void addToSchemaType(TypeInfo ownerTypeInfo,java.util.List<Property> properties,TypeDefParticle compositor,ComplexType type,Schema workingSchema){
  if (properties.size() == 0) {
    type.setAll(null);
    type.setSequence(null);
    type.setChoice(null);
    ownerTypeInfo.setCompositor(null);
  }
 else {
    for (    Property next : properties) {
      if (next == null) {
        continue;
      }
      Schema currentSchema=workingSchema;
      TypeDefParticle parentCompositor=compositor;
      boolean isChoice=(parentCompositor instanceof Choice);
      ComplexType parentType=type;
      if (!helper.isAnnotationPresent(next.getElement(),XmlTransient.class) && !next.isInverseReference()) {
        if (next.getXmlPath() != null) {
          if (next.getXmlPath().equals(""String_Node_Str"")) {
            TypeInfo info=(TypeInfo)typeInfo.get(next.getActualType().getQualifiedName());
            addToSchemaType(info,info.getPropertyList(),compositor,type,info.getSchema());
            continue;
          }
          XMLField xfld=new XMLField(next.getXmlPath());
          xfld.setNamespaceResolver(currentSchema.getNamespaceResolver());
          xfld.initialize();
          XmlPathResult xpr=buildSchemaComponentsForXPath(xfld.getXPathFragment(),new XmlPathResult(parentCompositor,currentSchema),(next.isAny() || next.isAnyAttribute()),isChoice,next);
          parentCompositor=xpr.particle;
          currentSchema=xpr.schema;
          if (parentCompositor == null) {
            continue;
          }
          if (parentCompositor.getOwner() instanceof ComplexType) {
            parentType=((ComplexType)parentCompositor.getOwner());
          }
        }
 else         if (!isChoice && next.isSetXmlElementWrapper()) {
          XmlElementWrapper wrapper=next.getXmlElementWrapper();
          Element wrapperElement=new Element();
          String name=wrapper.getName();
          if (name.equals(""String_Node_Str"")) {
            name=next.getPropertyName();
          }
          wrapperElement.setNillable(wrapper.isNillable());
          String wrapperNS=wrapper.getNamespace();
          if (!wrapperNS.equals(""String_Node_Str"") && !wrapperNS.equals(currentSchema.getTargetNamespace())) {
            wrapperElement.setMinOccurs(Occurs.ONE);
            wrapperElement.setMaxOccurs(Occurs.ONE);
            String prefix=getOrGeneratePrefixForNamespace(wrapperNS,currentSchema);
            wrapperElement.setRef(prefix + ""String_Node_Str"" + name);
            compositor.addElement(wrapperElement);
            continue;
          }
 else {
            wrapperElement.setName(name);
            if (wrapper.isRequired()) {
              wrapperElement.setMinOccurs(Occurs.ONE);
            }
 else {
              wrapperElement.setMinOccurs(Occurs.ZERO);
            }
            compositor.addElement(wrapperElement);
            ComplexType wrapperType=new ComplexType();
            Sequence wrapperSequence=new Sequence();
            wrapperType.setSequence(wrapperSequence);
            wrapperElement.setComplexType(wrapperType);
            parentType=wrapperType;
            parentCompositor=wrapperSequence;
          }
        }
        if (next.isMixedContent()) {
          parentType.setMixed(true);
        }
        if (next.isAttribute() && !next.isAnyAttribute()) {
          Attribute attribute=new Attribute();
          QName attributeName=next.getSchemaName();
          attribute.setName(attributeName.getLocalPart());
          if (next.isRequired()) {
            attribute.setUse(Attribute.REQUIRED);
          }
          String fixedValue=next.getFixedValue();
          if (fixedValue != null) {
            attribute.setFixed(fixedValue);
          }
          JavaClass javaType=next.getType();
          if (next.getGenericType() != null) {
            javaType=(JavaClass)next.getGenericType();
          }
          TypeInfo info=(TypeInfo)typeInfo.get(next.getType().getQualifiedName());
          String typeName=null;
          if (next.isXmlId()) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else           if (next.isXmlIdRef()) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else           if (info != null && !info.isComplexType()) {
            typeName=info.getSimpleType().getName();
          }
 else {
            typeName=getTypeName(next,javaType,currentSchema);
          }
          if (isCollectionType(next)) {
            SimpleType localType=new SimpleType();
            org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
            list.setItemType(typeName);
            localType.setList(list);
            attribute.setSimpleType(localType);
          }
 else {
            if (typeName != null && !typeName.contains(""String_Node_Str"")) {
              if (info.getSchema() == currentSchema) {
                String prefix=getPrefixForNamespace(currentSchema.getTargetNamespace(),currentSchema.getNamespaceResolver());
                if (prefix != null) {
                  typeName=prefix + ""String_Node_Str"" + typeName;
                }
              }
            }
            attribute.setType(typeName);
          }
          String lookupNamespace=currentSchema.getTargetNamespace();
          if (lookupNamespace == null) {
            lookupNamespace=""String_Node_Str"";
          }
          NamespaceInfo namespaceInfo=getNamespaceInfoForNamespace(lookupNamespace);
          boolean isAttributeFormQualified=true;
          if (namespaceInfo != null) {
            isAttributeFormQualified=namespaceInfo.isAttributeFormQualified();
          }
          if ((isAttributeFormQualified && !attributeName.getNamespaceURI().equals(lookupNamespace)) || (!namespaceInfo.isAttributeFormQualified() && !attributeName.getNamespaceURI().equals(""String_Node_Str""))) {
            Schema attributeSchema=this.getSchemaForNamespace(attributeName.getNamespaceURI());
            if (attributeSchema != null && attributeSchema.getTopLevelAttributes().get(attribute.getName()) == null) {
              attributeSchema.getTopLevelAttributes().put(attribute.getName(),attribute);
            }
            addImportIfRequired(currentSchema,attributeSchema,attributeName.getNamespaceURI());
            Attribute reference=new Attribute();
            String prefix=getPrefixForNamespace(attributeName.getNamespaceURI(),currentSchema.getNamespaceResolver());
            if (prefix == null) {
              reference.setRef(attribute.getName());
            }
 else {
              reference.setRef(prefix + ""String_Node_Str"" + attribute.getName());
            }
            if (parentType.getSimpleContent() != null) {
              parentType.getSimpleContent().getExtension().getOrderedAttributes().add(reference);
            }
 else {
              parentType.getOrderedAttributes().add(reference);
            }
          }
 else {
            if (parentType.getSimpleContent() != null) {
              parentType.getSimpleContent().getExtension().getOrderedAttributes().add(attribute);
            }
 else             if (parentType.getComplexContent() != null) {
              parentType.getComplexContent().getExtension().getOrderedAttributes().add(attribute);
            }
 else {
              parentType.getOrderedAttributes().add(attribute);
            }
          }
        }
 else         if (next.isAnyAttribute()) {
          AnyAttribute anyAttribute=new AnyAttribute();
          anyAttribute.setProcessContents(""String_Node_Str"");
          anyAttribute.setNamespace(""String_Node_Str"");
          if (parentType.getSimpleContent() != null) {
            SimpleContent content=parentType.getSimpleContent();
            content.getRestriction().setAnyAttribute(anyAttribute);
          }
 else {
            parentType.setAnyAttribute(anyAttribute);
          }
        }
 else         if (next.isChoice()) {
          Choice choice=new Choice();
          if (next.getGenericType() != null) {
            choice.setMaxOccurs(Occurs.UNBOUNDED);
          }
          ArrayList<Property> choiceProperties=(ArrayList<Property>)next.getChoiceProperties();
          addToSchemaType(ownerTypeInfo,choiceProperties,choice,parentType,currentSchema);
          if (parentCompositor instanceof Sequence) {
            ((Sequence)parentCompositor).addChoice(choice);
          }
 else           if (parentCompositor instanceof Choice) {
            ((Choice)parentCompositor).addChoice(choice);
          }
        }
 else         if (next.isAny()) {
          Any any=new Any();
          any.setNamespace(""String_Node_Str"");
          if (next.isLax()) {
            any.setProcessContents(Any.LAX);
          }
 else {
            any.setProcessContents(""String_Node_Str"");
          }
          if (isCollectionType(next)) {
            any.setMinOccurs(Occurs.ZERO);
            any.setMaxOccurs(Occurs.UNBOUNDED);
          }
          if (parentCompositor instanceof Sequence) {
            ((Sequence)parentCompositor).addAny(any);
          }
 else           if (parentCompositor instanceof Choice) {
            ((Choice)parentCompositor).addAny(any);
          }
        }
 else         if (next.isReference()) {
          java.util.List<ElementDeclaration> referencedElements=next.getReferencedElements();
          if (referencedElements.size() == 1) {
            Element element=new Element();
            ElementDeclaration decl=referencedElements.get(0);
            String localName=decl.getElementName().getLocalPart();
            Schema referencedSchema=this.getSchemaForNamespace(decl.getElementName().getNamespaceURI());
            addImportIfRequired(currentSchema,referencedSchema,decl.getElementName().getNamespaceURI());
            String prefix=this.getPrefixForNamespace(decl.getElementName().getNamespaceURI(),currentSchema.getNamespaceResolver());
            if (decl.getScopeClass() == GLOBAL.class) {
              if (prefix == null || prefix.equals(""String_Node_Str"")) {
                element.setRef(localName);
              }
 else {
                element.setRef(prefix + ""String_Node_Str"" + localName);
              }
            }
 else {
              element.setType(getTypeName(next,decl.getJavaType(),currentSchema));
              element.setName(localName);
            }
            if (next.getGenericType() != null) {
              element.setMinOccurs(Occurs.ZERO);
              element.setMaxOccurs(Occurs.UNBOUNDED);
            }
            parentCompositor.addElement(element);
          }
 else {
            Choice choice=new Choice();
            if (next.getGenericType() != null) {
              choice.setMaxOccurs(Occurs.UNBOUNDED);
            }
            for (            ElementDeclaration elementDecl : referencedElements) {
              Element element=new Element();
              String localName=elementDecl.getElementName().getLocalPart();
              Schema referencedSchema=this.getSchemaForNamespace(elementDecl.getElementName().getNamespaceURI());
              addImportIfRequired(currentSchema,referencedSchema,elementDecl.getElementName().getNamespaceURI());
              String prefix=this.getPrefixForNamespace(elementDecl.getElementName().getNamespaceURI(),currentSchema.getNamespaceResolver());
              if (elementDecl.getScopeClass() == GLOBAL.class) {
                if (prefix == null || prefix.equals(""String_Node_Str"")) {
                  element.setRef(localName);
                }
 else {
                  element.setRef(prefix + ""String_Node_Str"" + localName);
                }
              }
 else {
                element.setType(getTypeName(next,elementDecl.getJavaType(),referencedSchema));
                element.setName(localName);
              }
              choice.addElement(element);
            }
            if (parentCompositor instanceof Sequence) {
              ((Sequence)parentCompositor).addChoice(choice);
            }
 else             if (parentCompositor instanceof Choice) {
              ((Choice)parentCompositor).addChoice(choice);
            }
          }
        }
 else         if (!(ownerTypeInfo.getXmlValueProperty() != null && ownerTypeInfo.getXmlValueProperty() == next)) {
          Element element=new Element();
          if (!(parentCompositor instanceof All)) {
            element.setMinOccurs(next.isRequired() ? Occurs.ONE : Occurs.ZERO);
          }
          element.setNillable(next.isNillable());
          if (next.isSetDefaultValue()) {
            element.setDefaultValue(next.getDefaultValue());
          }
          if (next.getMimeType() != null) {
            element.getAttributesMap().put(XMLConstants.EXPECTED_CONTENT_TYPES_QNAME,next.getMimeType());
          }
          QName elementName=next.getSchemaName();
          JavaClass javaType=next.getActualType();
          boolean isComplexType=false;
          element.setName(elementName.getLocalPart());
          String typeName=null;
          if (next.isXmlId()) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else           if (next.isXmlIdRef()) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else {
            TypeInfo info=(TypeInfo)typeInfo.get(javaType.getQualifiedName());
            if (info != null) {
              isComplexType=info.isComplexType();
              if (isComplexType) {
                typeName=info.getComplexType().getName();
              }
 else               if (info.getSimpleType() != null) {
                typeName=info.getSimpleType().getName();
              }
 else {
                typeName=info.getSchemaTypeName();
              }
              if (typeName == null) {
                if (!info.hasRootElement()) {
                  if (info.isComplexType()) {
                    element.setComplexType(info.getComplexType());
                  }
 else {
                    element.setSimpleType(info.getSimpleType());
                  }
                }
              }
              if (addImportIfRequired(currentSchema,info.getSchema(),info.getClassNamespace())) {
                String prefix=currentSchema.getNamespaceResolver().resolveNamespaceURI(info.getClassNamespace());
                if (prefix != null && !typeName.equals(""String_Node_Str"")) {
                  typeName=prefix + ""String_Node_Str"" + typeName;
                }
              }
            }
 else             if (!next.isMap()) {
              typeName=getTypeName(next,javaType,currentSchema);
            }
            if (typeName != null && !typeName.contains(""String_Node_Str"")) {
              String prefix=getPrefixForNamespace(info.getSchema().getTargetNamespace(),currentSchema.getNamespaceResolver());
              if (prefix != null) {
                typeName=prefix + ""String_Node_Str"" + typeName;
              }
            }
          }
          if (next.getGenericType() != null) {
            if (next.isXmlList()) {
              SimpleType localSimpleType=new SimpleType();
              org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
              list.setItemType(typeName);
              localSimpleType.setList(list);
              element.setSimpleType(localSimpleType);
            }
 else {
              element.setMaxOccurs(Occurs.UNBOUNDED);
              element.setType(typeName);
            }
          }
 else           if (next.isMap()) {
            ComplexType entryComplexType=new ComplexType();
            Sequence entrySequence=new Sequence();
            Element keyElement=new Element();
            keyElement.setName(Property.DEFAULT_KEY_NAME);
            keyElement.setMinOccurs(Occurs.ZERO);
            JavaClass keyType=next.getKeyType();
            JavaClass valueType=next.getValueType();
            if (keyType == null) {
              keyType=helper.getJavaClass(Object.class);
            }
            if (valueType == null) {
              valueType=helper.getJavaClass(Object.class);
            }
            QName keySchemaType=getSchemaTypeFor(keyType);
            if (keySchemaType != null) {
              TypeInfo targetInfo=this.typeInfo.get(keyType.getQualifiedName());
              if (targetInfo != null) {
                Schema keyElementSchema=this.getSchemaForNamespace(keySchemaType.getNamespaceURI());
                addImportIfRequired(currentSchema,keyElementSchema,keySchemaType.getNamespaceURI());
              }
              String prefix;
              if (keySchemaType.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) {
                prefix=XMLConstants.SCHEMA_PREFIX;
              }
 else {
                prefix=getPrefixForNamespace(keySchemaType.getNamespaceURI(),currentSchema.getNamespaceResolver());
              }
              if (prefix != null && !prefix.equals(""String_Node_Str"")) {
                typeName=prefix + ""String_Node_Str"" + keySchemaType.getLocalPart();
              }
 else {
                typeName=keySchemaType.getLocalPart();
              }
              keyElement.setType(typeName);
            }
            entrySequence.addElement(keyElement);
            Element valueElement=new Element();
            valueElement.setName(Property.DEFAULT_VALUE_NAME);
            valueElement.setMinOccurs(Occurs.ZERO);
            QName valueSchemaType=getSchemaTypeFor(valueType);
            if (valueSchemaType != null) {
              TypeInfo targetInfo=this.typeInfo.get(valueType.getQualifiedName());
              if (targetInfo != null) {
                Schema valueElementSchema=this.getSchemaForNamespace(valueSchemaType.getNamespaceURI());
                addImportIfRequired(currentSchema,valueElementSchema,valueSchemaType.getNamespaceURI());
              }
              String prefix;
              if (valueSchemaType.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) {
                prefix=XMLConstants.SCHEMA_PREFIX;
              }
 else {
                prefix=getPrefixForNamespace(valueSchemaType.getNamespaceURI(),currentSchema.getNamespaceResolver());
              }
              if (prefix != null && !prefix.equals(""String_Node_Str"")) {
                typeName=prefix + ""String_Node_Str"" + valueSchemaType.getLocalPart();
              }
 else {
                typeName=valueSchemaType.getLocalPart();
              }
              valueElement.setType(typeName);
            }
            entrySequence.addElement(valueElement);
            entryComplexType.setSequence(entrySequence);
            JavaClass descriptorClass=helper.getJavaClass(ownerTypeInfo.getDescriptor().getJavaClassName());
            JavaClass mapValueClass=helper.getJavaClass(MapValue.class);
            if (mapValueClass.isAssignableFrom(descriptorClass)) {
              element.setComplexType(entryComplexType);
              element.setMaxOccurs(Occurs.UNBOUNDED);
            }
 else {
              ComplexType complexType=new ComplexType();
              Sequence sequence=new Sequence();
              complexType.setSequence(sequence);
              Element entryElement=new Element();
              entryElement.setName(""String_Node_Str"");
              entryElement.setMinOccurs(Occurs.ZERO);
              entryElement.setMaxOccurs(Occurs.UNBOUNDED);
              sequence.addElement(entryElement);
              entryElement.setComplexType(entryComplexType);
              element.setComplexType(complexType);
            }
          }
 else {
            element.setType(typeName);
          }
          String lookupNamespace=currentSchema.getTargetNamespace();
          if (lookupNamespace == null) {
            lookupNamespace=""String_Node_Str"";
          }
          NamespaceInfo namespaceInfo=getNamespaceInfoForNamespace(lookupNamespace);
          boolean isElementFormQualified=false;
          if (namespaceInfo != null) {
            isElementFormQualified=namespaceInfo.isElementFormQualified();
          }
          if ((isElementFormQualified && !elementName.getNamespaceURI().equals(lookupNamespace)) || (!isElementFormQualified && !elementName.getNamespaceURI().equals(""String_Node_Str""))) {
            Element reference=new Element();
            reference.setMinOccurs(element.getMinOccurs());
            reference.setMaxOccurs(element.getMaxOccurs());
            Schema attributeSchema=this.getSchemaForNamespace(elementName.getNamespaceURI());
            if (attributeSchema != null && attributeSchema.getTopLevelElements().get(element.getName()) == null) {
              element.setMinOccurs(null);
              element.setMaxOccurs(null);
              attributeSchema.getTopLevelElements().put(element.getName(),element);
            }
            addImportIfRequired(currentSchema,attributeSchema,elementName.getNamespaceURI());
            String prefix=getPrefixForNamespace(elementName.getNamespaceURI(),currentSchema.getNamespaceResolver());
            if (prefix == null) {
              reference.setRef(element.getName());
            }
 else {
              reference.setRef(prefix + ""String_Node_Str"" + element.getName());
            }
            if (elementExistsInParticle(reference.getName(),reference.getRef(),parentCompositor) == null) {
              parentCompositor.addElement(reference);
            }
          }
 else {
            if (elementExistsInParticle(element.getName(),element.getRef(),parentCompositor) == null) {
              if (next.isPositional()) {
                element.setMaxOccurs(Occurs.UNBOUNDED);
              }
              parentCompositor.addElement(element);
            }
          }
        }
      }
    }
  }
}","public void addToSchemaType(TypeInfo ownerTypeInfo,java.util.List<Property> properties,TypeDefParticle compositor,ComplexType type,Schema workingSchema){
  if (properties.size() == 0) {
    type.setAll(null);
    type.setSequence(null);
    type.setChoice(null);
    ownerTypeInfo.setCompositor(null);
  }
 else {
    for (    Property next : properties) {
      if (next == null) {
        continue;
      }
      Schema currentSchema=workingSchema;
      TypeDefParticle parentCompositor=compositor;
      boolean isChoice=(parentCompositor instanceof Choice);
      ComplexType parentType=type;
      if (!helper.isAnnotationPresent(next.getElement(),XmlTransient.class) && !next.isInverseReference()) {
        if (next.getXmlPath() != null) {
          if (next.getXmlPath().equals(""String_Node_Str"")) {
            TypeInfo info=(TypeInfo)typeInfo.get(next.getActualType().getQualifiedName());
            addToSchemaType(info,info.getPropertyList(),compositor,type,info.getSchema());
            continue;
          }
          XMLField xfld=new XMLField(next.getXmlPath());
          xfld.setNamespaceResolver(currentSchema.getNamespaceResolver());
          xfld.initialize();
          XmlPathResult xpr=buildSchemaComponentsForXPath(xfld.getXPathFragment(),new XmlPathResult(parentCompositor,currentSchema),(next.isAny() || next.isAnyAttribute()),isChoice,next);
          parentCompositor=xpr.particle;
          currentSchema=xpr.schema;
          if (parentCompositor == null) {
            continue;
          }
          if (parentCompositor.getOwner() instanceof ComplexType) {
            parentType=((ComplexType)parentCompositor.getOwner());
          }
        }
 else         if (!isChoice && next.isSetXmlElementWrapper()) {
          XmlElementWrapper wrapper=next.getXmlElementWrapper();
          Element wrapperElement=new Element();
          String name=wrapper.getName();
          if (name.equals(""String_Node_Str"")) {
            name=next.getPropertyName();
          }
          wrapperElement.setNillable(wrapper.isNillable());
          String wrapperNS=wrapper.getNamespace();
          if (!wrapperNS.equals(""String_Node_Str"") && !wrapperNS.equals(currentSchema.getTargetNamespace())) {
            wrapperElement.setMinOccurs(Occurs.ONE);
            wrapperElement.setMaxOccurs(Occurs.ONE);
            String prefix=getOrGeneratePrefixForNamespace(wrapperNS,currentSchema);
            wrapperElement.setRef(prefix + ""String_Node_Str"" + name);
            compositor.addElement(wrapperElement);
            continue;
          }
 else {
            wrapperElement.setName(name);
            if (wrapper.isRequired()) {
              wrapperElement.setMinOccurs(Occurs.ONE);
            }
 else {
              wrapperElement.setMinOccurs(Occurs.ZERO);
            }
            compositor.addElement(wrapperElement);
            ComplexType wrapperType=new ComplexType();
            Sequence wrapperSequence=new Sequence();
            wrapperType.setSequence(wrapperSequence);
            wrapperElement.setComplexType(wrapperType);
            parentType=wrapperType;
            parentCompositor=wrapperSequence;
          }
        }
        if (next.isMixedContent()) {
          parentType.setMixed(true);
        }
        if (next.isAttribute() && !next.isAnyAttribute()) {
          Attribute attribute=new Attribute();
          QName attributeName=next.getSchemaName();
          attribute.setName(attributeName.getLocalPart());
          if (next.isRequired()) {
            attribute.setUse(Attribute.REQUIRED);
          }
          String fixedValue=next.getFixedValue();
          if (fixedValue != null) {
            attribute.setFixed(fixedValue);
          }
          JavaClass javaType=next.getType();
          if (next.getGenericType() != null) {
            javaType=(JavaClass)next.getGenericType();
          }
          TypeInfo info=(TypeInfo)typeInfo.get(next.getType().getQualifiedName());
          String typeName=null;
          if (next.isXmlId()) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else           if (next.isXmlIdRef()) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else           if (info != null && !info.isComplexType()) {
            typeName=info.getSimpleType().getName();
          }
 else {
            typeName=getTypeName(next,javaType,currentSchema);
          }
          if (isCollectionType(next)) {
            SimpleType localType=new SimpleType();
            org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
            list.setItemType(typeName);
            localType.setList(list);
            attribute.setSimpleType(localType);
          }
 else {
            if (typeName != null && !typeName.contains(""String_Node_Str"")) {
              if (info.getSchema() == currentSchema) {
                String prefix=getPrefixForNamespace(currentSchema.getTargetNamespace(),currentSchema.getNamespaceResolver());
                if (prefix != null) {
                  typeName=prefix + ""String_Node_Str"" + typeName;
                }
              }
            }
            attribute.setType(typeName);
          }
          String lookupNamespace=currentSchema.getTargetNamespace();
          if (lookupNamespace == null) {
            lookupNamespace=""String_Node_Str"";
          }
          NamespaceInfo namespaceInfo=getNamespaceInfoForNamespace(lookupNamespace);
          boolean isAttributeFormQualified=true;
          if (namespaceInfo != null) {
            isAttributeFormQualified=namespaceInfo.isAttributeFormQualified();
          }
          if ((isAttributeFormQualified && !attributeName.getNamespaceURI().equals(lookupNamespace)) || (!namespaceInfo.isAttributeFormQualified() && !attributeName.getNamespaceURI().equals(""String_Node_Str""))) {
            Schema attributeSchema=this.getSchemaForNamespace(attributeName.getNamespaceURI());
            if (attributeSchema != null && attributeSchema.getTopLevelAttributes().get(attribute.getName()) == null) {
              attributeSchema.getTopLevelAttributes().put(attribute.getName(),attribute);
            }
            addImportIfRequired(currentSchema,attributeSchema,attributeName.getNamespaceURI());
            Attribute reference=new Attribute();
            String prefix=getPrefixForNamespace(attributeName.getNamespaceURI(),currentSchema.getNamespaceResolver());
            if (prefix == null) {
              reference.setRef(attribute.getName());
            }
 else {
              reference.setRef(prefix + ""String_Node_Str"" + attribute.getName());
            }
            if (parentType.getSimpleContent() != null) {
              parentType.getSimpleContent().getExtension().getOrderedAttributes().add(reference);
            }
 else {
              parentType.getOrderedAttributes().add(reference);
            }
          }
 else {
            if (parentType.getSimpleContent() != null) {
              parentType.getSimpleContent().getExtension().getOrderedAttributes().add(attribute);
            }
 else             if (parentType.getComplexContent() != null) {
              parentType.getComplexContent().getExtension().getOrderedAttributes().add(attribute);
            }
 else {
              parentType.getOrderedAttributes().add(attribute);
            }
          }
        }
 else         if (next.isAnyAttribute()) {
          AnyAttribute anyAttribute=new AnyAttribute();
          anyAttribute.setProcessContents(""String_Node_Str"");
          anyAttribute.setNamespace(""String_Node_Str"");
          if (parentType.getSimpleContent() != null) {
            SimpleContent content=parentType.getSimpleContent();
            content.getRestriction().setAnyAttribute(anyAttribute);
          }
 else {
            parentType.setAnyAttribute(anyAttribute);
          }
        }
 else         if (next.isChoice()) {
          Choice choice=new Choice();
          if (next.getGenericType() != null) {
            choice.setMaxOccurs(Occurs.UNBOUNDED);
          }
          ArrayList<Property> choiceProperties=(ArrayList<Property>)next.getChoiceProperties();
          addToSchemaType(ownerTypeInfo,choiceProperties,choice,parentType,currentSchema);
          if (parentCompositor instanceof Sequence) {
            ((Sequence)parentCompositor).addChoice(choice);
          }
 else           if (parentCompositor instanceof Choice) {
            ((Choice)parentCompositor).addChoice(choice);
          }
        }
 else         if (next.isAny()) {
          Any any=new Any();
          any.setNamespace(""String_Node_Str"");
          if (next.isLax()) {
            any.setProcessContents(Any.LAX);
          }
 else {
            any.setProcessContents(""String_Node_Str"");
          }
          if (isCollectionType(next)) {
            any.setMinOccurs(Occurs.ZERO);
            any.setMaxOccurs(Occurs.UNBOUNDED);
          }
          if (parentCompositor instanceof Sequence) {
            ((Sequence)parentCompositor).addAny(any);
          }
 else           if (parentCompositor instanceof Choice) {
            ((Choice)parentCompositor).addAny(any);
          }
        }
 else         if (next.isReference()) {
          java.util.List<ElementDeclaration> referencedElements=next.getReferencedElements();
          if (referencedElements.size() == 1) {
            Element element=new Element();
            ElementDeclaration decl=referencedElements.get(0);
            String localName=decl.getElementName().getLocalPart();
            Schema referencedSchema=this.getSchemaForNamespace(decl.getElementName().getNamespaceURI());
            addImportIfRequired(currentSchema,referencedSchema,decl.getElementName().getNamespaceURI());
            String prefix=this.getPrefixForNamespace(decl.getElementName().getNamespaceURI(),currentSchema.getNamespaceResolver());
            if (decl.getScopeClass() == GLOBAL.class) {
              if (prefix == null || prefix.equals(""String_Node_Str"")) {
                element.setRef(localName);
              }
 else {
                element.setRef(prefix + ""String_Node_Str"" + localName);
              }
            }
 else {
              element.setType(getTypeName(next,decl.getJavaType(),currentSchema));
              element.setName(localName);
            }
            if (next.getGenericType() != null) {
              element.setMinOccurs(Occurs.ZERO);
              element.setMaxOccurs(Occurs.UNBOUNDED);
            }
            parentCompositor.addElement(element);
          }
 else {
            Choice choice=new Choice();
            if (next.getGenericType() != null) {
              choice.setMaxOccurs(Occurs.UNBOUNDED);
            }
            for (            ElementDeclaration elementDecl : referencedElements) {
              Element element=new Element();
              String localName=elementDecl.getElementName().getLocalPart();
              Schema referencedSchema=this.getSchemaForNamespace(elementDecl.getElementName().getNamespaceURI());
              addImportIfRequired(currentSchema,referencedSchema,elementDecl.getElementName().getNamespaceURI());
              String prefix=this.getPrefixForNamespace(elementDecl.getElementName().getNamespaceURI(),currentSchema.getNamespaceResolver());
              if (elementDecl.getScopeClass() == GLOBAL.class) {
                if (prefix == null || prefix.equals(""String_Node_Str"")) {
                  element.setRef(localName);
                }
 else {
                  element.setRef(prefix + ""String_Node_Str"" + localName);
                }
              }
 else {
                element.setType(getTypeName(next,elementDecl.getJavaType(),referencedSchema));
                element.setName(localName);
              }
              choice.addElement(element);
            }
            if (parentCompositor instanceof Sequence) {
              ((Sequence)parentCompositor).addChoice(choice);
            }
 else             if (parentCompositor instanceof Choice) {
              ((Choice)parentCompositor).addChoice(choice);
            }
          }
        }
 else         if (!(ownerTypeInfo.getXmlValueProperty() != null && ownerTypeInfo.getXmlValueProperty() == next)) {
          Element element=new Element();
          if (!(parentCompositor instanceof All)) {
            element.setMinOccurs(next.isRequired() ? Occurs.ONE : Occurs.ZERO);
          }
          if (next.shouldSetNillable()) {
            element.setNillable(true);
          }
          if (next.isSetDefaultValue()) {
            element.setDefaultValue(next.getDefaultValue());
          }
          if (next.getMimeType() != null) {
            element.getAttributesMap().put(XMLConstants.EXPECTED_CONTENT_TYPES_QNAME,next.getMimeType());
          }
          QName elementName=next.getSchemaName();
          JavaClass javaType=next.getActualType();
          boolean isComplexType=false;
          element.setName(elementName.getLocalPart());
          String typeName=null;
          if (next.isXmlId()) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else           if (next.isXmlIdRef()) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else {
            TypeInfo info=(TypeInfo)typeInfo.get(javaType.getQualifiedName());
            if (info != null) {
              isComplexType=info.isComplexType();
              if (isComplexType) {
                typeName=info.getComplexType().getName();
              }
 else               if (info.getSimpleType() != null) {
                typeName=info.getSimpleType().getName();
              }
 else {
                typeName=info.getSchemaTypeName();
              }
              if (typeName == null) {
                if (!info.hasRootElement()) {
                  if (info.isComplexType()) {
                    element.setComplexType(info.getComplexType());
                  }
 else {
                    element.setSimpleType(info.getSimpleType());
                  }
                }
              }
              if (addImportIfRequired(currentSchema,info.getSchema(),info.getClassNamespace())) {
                String prefix=currentSchema.getNamespaceResolver().resolveNamespaceURI(info.getClassNamespace());
                if (prefix != null && !typeName.equals(""String_Node_Str"")) {
                  typeName=prefix + ""String_Node_Str"" + typeName;
                }
              }
            }
 else             if (!next.isMap()) {
              typeName=getTypeName(next,javaType,currentSchema);
            }
            if (typeName != null && !typeName.contains(""String_Node_Str"")) {
              String prefix=getPrefixForNamespace(info.getSchema().getTargetNamespace(),currentSchema.getNamespaceResolver());
              if (prefix != null) {
                typeName=prefix + ""String_Node_Str"" + typeName;
              }
            }
          }
          if (next.getGenericType() != null) {
            if (next.isXmlList()) {
              SimpleType localSimpleType=new SimpleType();
              org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
              list.setItemType(typeName);
              localSimpleType.setList(list);
              element.setSimpleType(localSimpleType);
            }
 else {
              element.setMaxOccurs(Occurs.UNBOUNDED);
              element.setType(typeName);
            }
          }
 else           if (next.isMap()) {
            ComplexType entryComplexType=new ComplexType();
            Sequence entrySequence=new Sequence();
            Element keyElement=new Element();
            keyElement.setName(Property.DEFAULT_KEY_NAME);
            keyElement.setMinOccurs(Occurs.ZERO);
            JavaClass keyType=next.getKeyType();
            JavaClass valueType=next.getValueType();
            if (keyType == null) {
              keyType=helper.getJavaClass(Object.class);
            }
            if (valueType == null) {
              valueType=helper.getJavaClass(Object.class);
            }
            QName keySchemaType=getSchemaTypeFor(keyType);
            if (keySchemaType != null) {
              TypeInfo targetInfo=this.typeInfo.get(keyType.getQualifiedName());
              if (targetInfo != null) {
                Schema keyElementSchema=this.getSchemaForNamespace(keySchemaType.getNamespaceURI());
                addImportIfRequired(currentSchema,keyElementSchema,keySchemaType.getNamespaceURI());
              }
              String prefix;
              if (keySchemaType.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) {
                prefix=XMLConstants.SCHEMA_PREFIX;
              }
 else {
                prefix=getPrefixForNamespace(keySchemaType.getNamespaceURI(),currentSchema.getNamespaceResolver());
              }
              if (prefix != null && !prefix.equals(""String_Node_Str"")) {
                typeName=prefix + ""String_Node_Str"" + keySchemaType.getLocalPart();
              }
 else {
                typeName=keySchemaType.getLocalPart();
              }
              keyElement.setType(typeName);
            }
            entrySequence.addElement(keyElement);
            Element valueElement=new Element();
            valueElement.setName(Property.DEFAULT_VALUE_NAME);
            valueElement.setMinOccurs(Occurs.ZERO);
            QName valueSchemaType=getSchemaTypeFor(valueType);
            if (valueSchemaType != null) {
              TypeInfo targetInfo=this.typeInfo.get(valueType.getQualifiedName());
              if (targetInfo != null) {
                Schema valueElementSchema=this.getSchemaForNamespace(valueSchemaType.getNamespaceURI());
                addImportIfRequired(currentSchema,valueElementSchema,valueSchemaType.getNamespaceURI());
              }
              String prefix;
              if (valueSchemaType.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) {
                prefix=XMLConstants.SCHEMA_PREFIX;
              }
 else {
                prefix=getPrefixForNamespace(valueSchemaType.getNamespaceURI(),currentSchema.getNamespaceResolver());
              }
              if (prefix != null && !prefix.equals(""String_Node_Str"")) {
                typeName=prefix + ""String_Node_Str"" + valueSchemaType.getLocalPart();
              }
 else {
                typeName=valueSchemaType.getLocalPart();
              }
              valueElement.setType(typeName);
            }
            entrySequence.addElement(valueElement);
            entryComplexType.setSequence(entrySequence);
            JavaClass descriptorClass=helper.getJavaClass(ownerTypeInfo.getDescriptor().getJavaClassName());
            JavaClass mapValueClass=helper.getJavaClass(MapValue.class);
            if (mapValueClass.isAssignableFrom(descriptorClass)) {
              element.setComplexType(entryComplexType);
              element.setMaxOccurs(Occurs.UNBOUNDED);
            }
 else {
              ComplexType complexType=new ComplexType();
              Sequence sequence=new Sequence();
              complexType.setSequence(sequence);
              Element entryElement=new Element();
              entryElement.setName(""String_Node_Str"");
              entryElement.setMinOccurs(Occurs.ZERO);
              entryElement.setMaxOccurs(Occurs.UNBOUNDED);
              sequence.addElement(entryElement);
              entryElement.setComplexType(entryComplexType);
              element.setComplexType(complexType);
            }
          }
 else {
            element.setType(typeName);
          }
          String lookupNamespace=currentSchema.getTargetNamespace();
          if (lookupNamespace == null) {
            lookupNamespace=""String_Node_Str"";
          }
          NamespaceInfo namespaceInfo=getNamespaceInfoForNamespace(lookupNamespace);
          boolean isElementFormQualified=false;
          if (namespaceInfo != null) {
            isElementFormQualified=namespaceInfo.isElementFormQualified();
          }
          if ((isElementFormQualified && !elementName.getNamespaceURI().equals(lookupNamespace)) || (!isElementFormQualified && !elementName.getNamespaceURI().equals(""String_Node_Str""))) {
            Element reference=new Element();
            reference.setMinOccurs(element.getMinOccurs());
            reference.setMaxOccurs(element.getMaxOccurs());
            Schema attributeSchema=this.getSchemaForNamespace(elementName.getNamespaceURI());
            if (attributeSchema != null && attributeSchema.getTopLevelElements().get(element.getName()) == null) {
              element.setMinOccurs(null);
              element.setMaxOccurs(null);
              attributeSchema.getTopLevelElements().put(element.getName(),element);
            }
            addImportIfRequired(currentSchema,attributeSchema,elementName.getNamespaceURI());
            String prefix=getPrefixForNamespace(elementName.getNamespaceURI(),currentSchema.getNamespaceResolver());
            if (prefix == null) {
              reference.setRef(element.getName());
            }
 else {
              reference.setRef(prefix + ""String_Node_Str"" + element.getName());
            }
            if (elementExistsInParticle(reference.getName(),reference.getRef(),parentCompositor) == null) {
              parentCompositor.addElement(reference);
            }
          }
 else {
            if (elementExistsInParticle(element.getName(),element.getRef(),parentCompositor) == null) {
              if (next.isPositional()) {
                element.setMaxOccurs(Occurs.UNBOUNDED);
              }
              parentCompositor.addElement(element);
            }
          }
        }
      }
    }
  }
}"
66334,"public void testXmlSchemaImport() throws Exception {
  String javaVersion=System.getProperty(""String_Node_Str"");
  if (!(javaVersion.startsWith(""String_Node_Str""))) {
    return;
  }
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(XMLSCHEMA_IMPORT);
  jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(inputStream,new NoExtensionEntityResolver(),null,null);
  DynamicEntity person=jaxbContext.newDynamicEntity(PERSON);
  assertNotNull(""String_Node_Str"",person);
  DynamicEntity salary=jaxbContext.newDynamicEntity(CDN_CURRENCY);
  assertNotNull(""String_Node_Str"",salary);
  salary.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",salary);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
}","public void testXmlSchemaImport() throws Exception {
  String javaVersion=System.getProperty(""String_Node_Str"");
  if (!(javaVersion.startsWith(""String_Node_Str""))) {
    return;
  }
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  if (builderFactory.getClass().getPackage().getName().contains(""String_Node_Str"")) {
    return;
  }
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(XMLSCHEMA_IMPORT);
  jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(inputStream,new NoExtensionEntityResolver(),null,null);
  DynamicEntity person=jaxbContext.newDynamicEntity(PERSON);
  assertNotNull(""String_Node_Str"",person);
  DynamicEntity salary=jaxbContext.newDynamicEntity(CDN_CURRENCY);
  assertNotNull(""String_Node_Str"",salary);
  salary.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",""String_Node_Str"");
  person.set(""String_Node_Str"",salary);
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
}"
66335,"public void testXmlSchemaUnqualified() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(XMLSCHEMA_UNQUALIFIED);
  jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(inputStream,null,null,null);
  DynamicEntity person=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
  assertNotNull(""String_Node_Str"",person);
  person.set(""String_Node_Str"",456);
  person.set(""String_Node_Str"",""String_Node_Str"");
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  Node node=marshalDoc.getChildNodes().item(0);
  assertEquals(""String_Node_Str"",""String_Node_Str"",node.getNamespaceURI());
  assertNotNull(""String_Node_Str"",node.getPrefix());
  Node attr=node.getAttributes().item(0);
  assertNull(""String_Node_Str"",attr.getPrefix());
  Node childNode=node.getChildNodes().item(0);
  assertNull(""String_Node_Str"",childNode.getPrefix());
}","public void testXmlSchemaUnqualified() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(XMLSCHEMA_UNQUALIFIED);
  jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(inputStream,null,null,null);
  DynamicEntity person=jaxbContext.newDynamicEntity(PACKAGE + ""String_Node_Str"" + PERSON);
  assertNotNull(""String_Node_Str"",person);
  person.set(""String_Node_Str"",456);
  person.set(""String_Node_Str"",""String_Node_Str"");
  Document marshalDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  jaxbContext.createMarshaller().marshal(person,marshalDoc);
  Node node=marshalDoc.getChildNodes().item(0);
  assertEquals(""String_Node_Str"",""String_Node_Str"",node.getNamespaceURI());
  assertNotNull(""String_Node_Str"",node.getPrefix());
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  if (builderFactory.getClass().getPackage().getName().contains(""String_Node_Str"")) {
    return;
  }
 else {
    Node attr=node.getAttributes().item(0);
    assertNull(""String_Node_Str"" + attr.getPrefix() + ""String_Node_Str"",attr.getPrefix());
  }
  Node childNode=node.getChildNodes().item(0);
  assertNull(""String_Node_Str"",childNode.getPrefix());
}"
66336,"private void print(Object o) throws Exception {
  Marshaller marshaller=jaxbContext.createMarshaller();
  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
  marshaller.marshal(o,System.out);
}","private void print(Object o) throws Exception {
  Marshaller marshaller=jaxbContext.createMarshaller();
  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
  marshaller.marshal(o,System.err);
}"
66337,"public boolean handleEvent(ValidationEvent event){
  if (event.getSeverity() != ValidationEvent.ERROR) {
    return false;
  }
  errorCount++;
  if (errorCount == 1) {
    return true;
  }
  return false;
}","public boolean handleEvent(ValidationEvent event){
  if (event.getSeverity() != ValidationEvent.ERROR) {
    return false;
  }
  errorCount++;
  if (errorCount <= ignore) {
    return true;
  }
  return false;
}"
66338,"public void testIgnoreOneError() throws Exception {
  unmarshaller.setEventHandler(new CustomErrorValidationEventHandler());
  InputStream stream=ClassLoader.getSystemResourceAsStream(SINGLE_ERROR_XML);
  try {
    Object o=unmarshaller.unmarshal(stream);
  }
 catch (  UnmarshalException ex) {
    ex.printStackTrace();
    fail(""String_Node_Str"");
    return;
  }
  test1passed=true;
  assertTrue(""String_Node_Str"",true);
}","public void testIgnoreOneError() throws Exception {
  int numberOfErrorsToIgnore=1;
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  if (builderFactory.getClass().getPackage().getName().contains(""String_Node_Str"")) {
    numberOfErrorsToIgnore=2;
  }
  unmarshaller.setEventHandler(new CustomErrorValidationEventHandler(numberOfErrorsToIgnore));
  InputStream stream=ClassLoader.getSystemResourceAsStream(SINGLE_ERROR_XML);
  try {
    Object o=unmarshaller.unmarshal(stream);
  }
 catch (  UnmarshalException ex) {
    ex.printStackTrace();
    fail(""String_Node_Str"");
    return;
  }
  test1passed=true;
  assertTrue(""String_Node_Str"",true);
}"
66339,"public boolean isOwningNode(XPathFragment xPathFragment){
  return xPathFragment.getNextFragment() == null || xPathFragment.getNextFragment().isAttribute();
}","public boolean isOwningNode(XPathFragment xPathFragment){
  return xPathFragment.getNextFragment() == null || xPathFragment.isAttribute();
}"
66340,"public boolean isOwningNode(XPathFragment xPathFragment){
  return (xPathFragment.getNextFragment() == null) || xPathFragment.getNextFragment().isAttribute();
}","public boolean isOwningNode(XPathFragment xPathFragment){
  return (xPathFragment.getNextFragment() == null) || xPathFragment.isAttribute();
}"
66341,"protected void buildConfigs(){
  this.addConfig(NO_SERVER_ID,""String_Node_Str"");
  this.addConfig(WEBLOGIC_9_ID,""String_Node_Str"");
  this.addConfig(WEBLOGIC_10_ID,""String_Node_Str"");
  this.addConfig(WEBSPHERE_6_1_ID,""String_Node_Str"");
  this.addConfig(JBOSS_ID,""String_Node_Str"");
  this.addConfig(SUNAS_ID,""String_Node_Str"");
  this.addConfig(CUSTOM_SERVER_ID,""String_Node_Str"");
}","protected void buildConfigs(){
  this.addConfig(NO_SERVER_ID,""String_Node_Str"");
  this.addConfig(WEBLOGIC_9_ID,""String_Node_Str"");
  this.addConfig(WEBLOGIC_10_ID,""String_Node_Str"");
  this.addConfig(WEBSPHERE_6_1_ID,""String_Node_Str"");
  this.addConfig(WEBSPHERE_7_ID,""String_Node_Str"");
  this.addConfig(JBOSS_ID,""String_Node_Str"");
  this.addConfig(SUNAS_ID,""String_Node_Str"");
  this.addConfig(CUSTOM_SERVER_ID,""String_Node_Str"");
}"
66342,"protected void buidPlatforms(){
  this.addPlatform(NO_SERVER_ID,""String_Node_Str"");
  this.addPlatform(WEBLOGIC_9_ID,""String_Node_Str"");
  this.addPlatform(WEBLOGIC_10_ID,""String_Node_Str"");
  this.addPlatform(WEBSPHERE_6_1_ID,""String_Node_Str"");
  this.addPlatform(JBOSS_ID,""String_Node_Str"");
  this.addPlatform(SUNAS_ID,""String_Node_Str"");
  this.addPlatform(CUSTOM_SERVER_ID,""String_Node_Str"");
}","protected void buidPlatforms(){
  this.addPlatform(NO_SERVER_ID,""String_Node_Str"");
  this.addPlatform(WEBLOGIC_9_ID,""String_Node_Str"");
  this.addPlatform(WEBLOGIC_10_ID,""String_Node_Str"");
  this.addPlatform(WEBSPHERE_6_1_ID,""String_Node_Str"");
  this.addPlatform(WEBSPHERE_7_ID,""String_Node_Str"");
  this.addPlatform(JBOSS_ID,""String_Node_Str"");
  this.addPlatform(SUNAS_ID,""String_Node_Str"");
  this.addPlatform(CUSTOM_SERVER_ID,""String_Node_Str"");
}"
66343,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField xmlField=null;
  if (isCollection) {
    xmlField=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
  }
 else {
    xmlField=(XMLField)((XMLBinaryDataMapping)mapping).getField();
  }
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
    }
  }
 else {
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
      record.endElement(namespaceURI,localName,qName);
    }
  }
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField xmlField=null;
  if (isCollection) {
    xmlField=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
  }
 else {
    xmlField=(XMLField)((XMLBinaryDataMapping)mapping).getField();
  }
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attachmentUnmarshaller == null) {
      throw XMLMarshalException.noAttachmentUnmarshallerSet(this.c_id);
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
    }
  }
 else {
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
      record.endElement(namespaceURI,localName,qName);
    }
  }
}"
66344,"private void openAndCloseStartElement(){
  try {
    if (namespaceURI == null) {
      Iterator attributesIterator=null;
      if (null != attributes) {
        attributesIterator=attributes.iterator();
      }
      Iterator namespaceDeclarationsIterator=null;
      if (null != namespaceDeclarations) {
        namespaceDeclarationsIterator=namespaceDeclarations.iterator();
      }
      xmlEventWriter.add(xmlEventFactory.createStartElement(XMLConstants.EMPTY_STRING,XMLConstants.EMPTY_STRING,xPathFragment.getLocalName(),attributesIterator,namespaceDeclarationsIterator));
      String defaultNamespace=xmlEventWriter.getNamespaceContext().getNamespaceURI(XMLConstants.EMPTY_STRING);
      if (defaultNamespace != null && defaultNamespace.length() > 0) {
        this.xmlEventWriter.setDefaultNamespace(XMLConstants.EMPTY_STRING);
        this.xmlEventWriter.add(xmlEventFactory.createNamespace(XMLConstants.EMPTY_STRING));
      }
    }
 else {
      String prefix=xPathFragment.getPrefix();
      if (prefix == null) {
        prefix=XMLConstants.EMPTY_STRING;
      }
      Iterator attributesIterator=null;
      if (null != attributes) {
        attributesIterator=attributes.iterator();
      }
      Iterator namespaceDeclarationsIterator=null;
      if (null != namespaceDeclarations) {
        namespaceDeclarationsIterator=namespaceDeclarations.iterator();
      }
      XMLEvent startElement=this.xmlEventFactory.createStartElement(prefix,namespaceURI,xPathFragment.getLocalName(),attributesIterator,namespaceDeclarationsIterator);
      xmlEventWriter.add(startElement);
    }
  }
 catch (  XMLStreamException ex) {
    throw XMLMarshalException.marshalException(ex);
  }
}","private void openAndCloseStartElement(){
  try {
    String namespaceURI=xPathFragment.getNamespaceURI();
    if (null == namespaceURI) {
      Iterator attributesIterator=null;
      if (null != attributes) {
        attributesIterator=attributes.iterator();
      }
      Iterator namespaceDeclarationsIterator=null;
      if (null != namespaceDeclarations) {
        namespaceDeclarationsIterator=namespaceDeclarations.iterator();
      }
      xmlEventWriter.add(xmlEventFactory.createStartElement(XMLConstants.EMPTY_STRING,XMLConstants.EMPTY_STRING,xPathFragment.getLocalName(),attributesIterator,namespaceDeclarationsIterator));
      String defaultNamespace=xmlEventWriter.getNamespaceContext().getNamespaceURI(XMLConstants.EMPTY_STRING);
      if (defaultNamespace != null && defaultNamespace.length() > 0) {
        xmlEventWriter.setDefaultNamespace(XMLConstants.EMPTY_STRING);
        xmlEventWriter.add(xmlEventFactory.createNamespace(XMLConstants.EMPTY_STRING));
      }
    }
 else {
      String prefix=xPathFragment.getPrefix();
      if (null == prefix) {
        prefix=XMLConstants.EMPTY_STRING;
      }
      Iterator attributesIterator=null;
      if (null != attributes) {
        attributesIterator=attributes.iterator();
      }
      Iterator namespaceDeclarationsIterator=null;
      if (null != namespaceDeclarations) {
        namespaceDeclarationsIterator=namespaceDeclarations.iterator();
      }
      xmlEventWriter.add(xmlEventFactory.createStartElement(prefix,namespaceURI,xPathFragment.getLocalName(),attributesIterator,namespaceDeclarationsIterator));
    }
  }
 catch (  XMLStreamException ex) {
    throw XMLMarshalException.marshalException(ex);
  }
}"
66345,"public void endDocument(){
  try {
    if (isStartElementOpen) {
      openAndCloseStartElement();
      isStartElementOpen=false;
    }
    XMLEvent endDoc=this.xmlEventFactory.createEndDocument();
    this.xmlEventWriter.add(endDoc);
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void endDocument(){
  try {
    if (isStartElementOpen) {
      openAndCloseStartElement();
      isStartElementOpen=false;
    }
    xmlEventWriter.add(xmlEventFactory.createEndDocument());
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66346,"public void startDocument(String encoding,String version){
  try {
    XMLEvent startDoc=this.xmlEventFactory.createStartDocument(encoding,version,false);
    this.xmlEventWriter.add(startDoc);
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void startDocument(String encoding,String version){
  try {
    xmlEventWriter.add(this.xmlEventFactory.createStartDocument(encoding,version,false));
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66347,"public void cdata(String value){
  try {
    if (isStartElementOpen) {
      openAndCloseStartElement();
      isStartElementOpen=false;
    }
    XMLEvent cdataEvent=this.xmlEventFactory.createCData(value);
    this.xmlEventWriter.add(cdataEvent);
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void cdata(String value){
  try {
    if (isStartElementOpen) {
      openAndCloseStartElement();
      isStartElementOpen=false;
    }
    xmlEventWriter.add(xmlEventFactory.createCData(value));
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66348,"public void characters(String value){
  try {
    if (isStartElementOpen) {
      openAndCloseStartElement();
      isStartElementOpen=false;
    }
    XMLEvent charactersEvent=this.xmlEventFactory.createCharacters(value);
    this.xmlEventWriter.add(charactersEvent);
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void characters(String value){
  try {
    if (isStartElementOpen) {
      openAndCloseStartElement();
      isStartElementOpen=false;
    }
    xmlEventWriter.add(xmlEventFactory.createCharacters(value));
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66349,"public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    openAndCloseStartElement();
  }
  isStartElementOpen=true;
  this.namespaceURI=xPathFragment.getNamespaceURI();
  this.xPathFragment=xPathFragment;
  this.attributes=null;
  this.namespaceDeclarations=null;
  writePrefixMappings();
}","public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    openAndCloseStartElement();
  }
  isStartElementOpen=true;
  this.xPathFragment=xPathFragment;
  this.attributes=null;
  this.namespaceDeclarations=null;
  writePrefixMappings();
}"
66350,"public void node(Node node,NamespaceResolver resolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    if (node.getNodeType() == Node.DOCUMENT_NODE) {
      node=((Document)node).getDocumentElement();
    }
    domToXMLEventWriter.writeToEventWriter(node,this.xmlEventWriter);
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void node(Node node,NamespaceResolver resolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    if (node.getNodeType() == Node.DOCUMENT_NODE) {
      node=((Document)node).getDocumentElement();
    }
    domToXMLEventWriter.writeToEventWriter(node,xmlEventWriter);
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66351,"public void endElement(XPathFragment pathFragment,NamespaceResolver namespaceResolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  String namespaceURI=pathFragment.getNamespaceURI();
  String prefix=pathFragment.getPrefix();
  if (prefix == null) {
    prefix=XMLConstants.EMPTY_STRING;
  }
  try {
    XMLEvent endElement=this.xmlEventFactory.createEndElement(prefix,namespaceURI,pathFragment.getLocalName());
    this.xmlEventWriter.add(endElement);
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void endElement(XPathFragment pathFragment,NamespaceResolver namespaceResolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  String prefix=pathFragment.getPrefix();
  if (null == prefix) {
    prefix=XMLConstants.EMPTY_STRING;
  }
  try {
    xmlEventWriter.add(xmlEventFactory.createEndElement(prefix,xPathFragment.getNamespaceURI(),pathFragment.getLocalName()));
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66352,"public void attribute(String namespaceURI,String localName,String name,String value){
  XMLEvent event;
  if (namespaceURI != null && namespaceURI.equals(XMLConstants.XMLNS_URL)) {
    try {
      if (localName.equals(XMLConstants.XMLNS)) {
        event=xmlEventFactory.createNamespace(value);
        xmlEventWriter.setDefaultNamespace(value);
      }
 else {
        event=xmlEventFactory.createNamespace(localName,value);
        xmlEventWriter.setPrefix(localName,value);
      }
    }
 catch (    XMLStreamException e) {
      throw XMLMarshalException.marshalException(e);
    }
  }
 else {
    NamespaceContext ctx=xmlEventWriter.getNamespaceContext();
    if (namespaceURI == null || namespaceURI.length() == 0) {
      event=xmlEventFactory.createAttribute(localName,value);
    }
 else {
      int index=name.indexOf(':');
      if (index == -1) {
        event=xmlEventFactory.createAttribute(XMLConstants.EMPTY_STRING,namespaceURI,localName,value);
      }
 else {
        String prefix=name.substring(0,index);
        event=xmlEventFactory.createAttribute(prefix,namespaceURI,localName,value);
      }
    }
  }
  if (event.isNamespace()) {
    if (null == this.namespaceDeclarations) {
      this.namespaceDeclarations=new ArrayList();
    }
    this.namespaceDeclarations.add(event);
  }
 else {
    if (null == this.attributes) {
      this.attributes=new ArrayList();
    }
    this.attributes.add(event);
  }
}","public void attribute(String namespaceURI,String localName,String name,String value){
  XMLEvent event;
  if (XMLConstants.XMLNS_URL.equals(namespaceURI)) {
    try {
      if (XMLConstants.XMLNS.equals(localName)) {
        event=xmlEventFactory.createNamespace(value);
        xmlEventWriter.setDefaultNamespace(value);
      }
 else {
        event=xmlEventFactory.createNamespace(localName,value);
        xmlEventWriter.setPrefix(localName,value);
      }
    }
 catch (    XMLStreamException e) {
      throw XMLMarshalException.marshalException(e);
    }
  }
 else {
    NamespaceContext ctx=xmlEventWriter.getNamespaceContext();
    if (namespaceURI == null || namespaceURI.length() == 0) {
      event=xmlEventFactory.createAttribute(localName,value);
    }
 else {
      int index=name.indexOf(':');
      if (index == -1) {
        event=xmlEventFactory.createAttribute(XMLConstants.EMPTY_STRING,namespaceURI,localName,value);
      }
 else {
        String prefix=name.substring(0,index);
        event=xmlEventFactory.createAttribute(prefix,namespaceURI,localName,value);
      }
    }
  }
  if (event.isNamespace()) {
    if (null == this.namespaceDeclarations) {
      this.namespaceDeclarations=new ArrayList();
    }
    this.namespaceDeclarations.add(event);
  }
 else {
    if (null == this.attributes) {
      this.attributes=new ArrayList();
    }
    this.attributes.add(event);
  }
}"
66353,"public void element(XPathFragment frag){
  try {
    if (isStartElementOpen) {
      openAndCloseStartElement();
      isStartElementOpen=false;
    }
    String prefix=frag.getPrefix();
    if (null == prefix) {
      prefix=XMLConstants.EMPTY_STRING;
    }
    XMLEvent startElement=this.xmlEventFactory.createStartElement(prefix,frag.getNamespaceURI(),frag.getLocalName());
    this.xmlEventWriter.add(startElement);
    this.xmlEventWriter.add(this.xmlEventFactory.createEndElement(prefix,frag.getNamespaceURI(),frag.getLocalName()));
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void element(XPathFragment frag){
  try {
    if (isStartElementOpen) {
      openAndCloseStartElement();
      isStartElementOpen=false;
    }
    String namespaceURI=frag.getNamespaceURI();
    String localName=frag.getLocalName();
    String prefix=frag.getPrefix();
    if (null == prefix) {
      prefix=XMLConstants.EMPTY_STRING;
    }
    xmlEventWriter.add(xmlEventFactory.createStartElement(prefix,namespaceURI,localName));
    xmlEventWriter.add(xmlEventFactory.createEndElement(prefix,namespaceURI,localName));
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66354,"/** 
 * PUBLIC: Get the fetch group manager for the descriptor.  The fetch group manager is responsible for managing the fetch group behaviors and operations. To use the fetch group, the domain object must implement FetchGroupTracker interface. Otherwise, a descriptor validation exception would throw during initialization.
 * @see org.eclipse.persistence.queries.FetchGroupTracker
 */
public FetchGroupManager getFetchGroupManager(){
  return this.fetchGroupManager;
}","/** 
 * PUBLIC: Get the fetch group manager for the descriptor.  The fetch group manager is responsible for managing the fetch group behaviors and operations. To use the fetch group, the domain object must implement FetchGroupTracker interface. Otherwise, a descriptor validation exception would throw during initialization. NOTE: This is currently only supported in CMP2.
 * @see org.eclipse.persistence.queries.FetchGroupTracker
 */
public FetchGroupManager getFetchGroupManager(){
  return fetchGroupManager;
}"
66355,"/** 
 * INTERNAL: Post initializations after mappings are initialized.
 */
public void postInitialize(AbstractSession session) throws DescriptorException {
  if (isInitialized(POST_INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(POST_INITIALIZED);
  if (hasInheritance()) {
    for (    ClassDescriptor child : getInheritancePolicy().getChildDescriptors()) {
      child.postInitialize(session);
    }
  }
  for (  DatabaseMapping mapping : getMappings()) {
    mapping.postInitialize(session);
    if (!shouldAcquireCascadedLocks()) {
      if ((mapping instanceof ForeignReferenceMapping) && (!((ForeignReferenceMapping)mapping).usesIndirection())) {
        setShouldAcquireCascadedLocks(true);
      }
      if ((mapping instanceof AggregateObjectMapping) && mapping.getReferenceDescriptor().shouldAcquireCascadedLocks()) {
        setShouldAcquireCascadedLocks(true);
      }
    }
  }
  if (hasInheritance()) {
    getInheritancePolicy().postInitialize(session);
  }
  for (int index=(getPrimaryKeyFields().size() - 1); index >= 0; index--) {
    DatabaseField primaryKeyField=getPrimaryKeyFields().get(index);
    int fieldIndex=getFields().indexOf(primaryKeyField);
    if (fieldIndex != -1) {
      primaryKeyField=getFields().get(fieldIndex);
      getPrimaryKeyFields().set(index,primaryKeyField);
    }
  }
  for (int index=0; index < getFields().size(); index++) {
    DatabaseField field=getFields().elementAt(index);
    if (field.getType() == null) {
      DatabaseMapping mapping=getObjectBuilder().getMappingForField(field);
      if (mapping != null) {
        field.setType(mapping.getFieldClassification(field));
      }
    }
    if ((field.getType() == ClassConstants.BLOB) || (field.getType() == ClassConstants.CLOB)) {
      setHasMultipleTableConstraintDependecy(true);
    }
    field.setIndex(index);
  }
  if (getCacheKeyType() == null || (getCacheKeyType() == CacheKeyType.AUTO)) {
    if ((getPrimaryKeyFields().size() > 1) || getObjectBuilder().isXMLObjectBuilder()) {
      setCacheKeyType(CacheKeyType.CACHE_ID);
    }
 else     if (getPrimaryKeyFields().size() == 1) {
      Class type=getObjectBuilder().getFieldClassification(getPrimaryKeyFields().get(0));
      if ((type == null) || type.isArray()) {
        setCacheKeyType(CacheKeyType.CACHE_ID);
      }
 else {
        setCacheKeyType(CacheKeyType.ID_VALUE);
      }
    }
 else {
      setCacheKeyType(CacheKeyType.CACHE_ID);
    }
  }
 else   if ((getCacheKeyType() == CacheKeyType.ID_VALUE) && (getPrimaryKeyFields().size() > 1)) {
    session.getIntegrityChecker().handleError(DescriptorException.cannotUseIdValueForCompositeId(this));
  }
  if (hasFetchGroupManager()) {
    getFetchGroupManager().postInitialize(session);
  }
  getObjectBuilder().postInitialize(session);
  validateAfterInitialization(session);
  checkDatabase(session);
}","/** 
 * INTERNAL: Post initializations after mappings are initialized.
 */
public void postInitialize(AbstractSession session) throws DescriptorException {
  if (isInitialized(POST_INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(POST_INITIALIZED);
  if (hasInheritance()) {
    for (    ClassDescriptor child : getInheritancePolicy().getChildDescriptors()) {
      child.postInitialize(session);
    }
  }
  for (  DatabaseMapping mapping : getMappings()) {
    mapping.postInitialize(session);
    if (!shouldAcquireCascadedLocks()) {
      if ((mapping instanceof ForeignReferenceMapping) && (!((ForeignReferenceMapping)mapping).usesIndirection())) {
        setShouldAcquireCascadedLocks(true);
      }
      if ((mapping instanceof AggregateObjectMapping) && mapping.getReferenceDescriptor().shouldAcquireCascadedLocks()) {
        setShouldAcquireCascadedLocks(true);
      }
    }
  }
  if (hasInheritance()) {
    getInheritancePolicy().postInitialize(session);
  }
  for (int index=(getPrimaryKeyFields().size() - 1); index >= 0; index--) {
    DatabaseField primaryKeyField=getPrimaryKeyFields().get(index);
    int fieldIndex=getFields().indexOf(primaryKeyField);
    if (fieldIndex != -1) {
      primaryKeyField=getFields().get(fieldIndex);
      getPrimaryKeyFields().set(index,primaryKeyField);
    }
  }
  for (int index=0; index < getFields().size(); index++) {
    DatabaseField field=getFields().elementAt(index);
    if (field.getType() == null) {
      DatabaseMapping mapping=getObjectBuilder().getMappingForField(field);
      if (mapping != null) {
        field.setType(mapping.getFieldClassification(field));
      }
    }
    if ((field.getType() == ClassConstants.BLOB) || (field.getType() == ClassConstants.CLOB)) {
      setHasMultipleTableConstraintDependecy(true);
    }
    field.setIndex(index);
  }
  if (getCacheKeyType() == null || (getCacheKeyType() == CacheKeyType.AUTO)) {
    if ((getPrimaryKeyFields().size() > 1) || getObjectBuilder().isXMLObjectBuilder()) {
      setCacheKeyType(CacheKeyType.CACHE_ID);
    }
 else     if (getPrimaryKeyFields().size() == 1) {
      Class type=getObjectBuilder().getFieldClassification(getPrimaryKeyFields().get(0));
      if ((type == null) || type.isArray()) {
        setCacheKeyType(CacheKeyType.CACHE_ID);
      }
 else {
        setCacheKeyType(CacheKeyType.ID_VALUE);
      }
    }
 else {
      setCacheKeyType(CacheKeyType.CACHE_ID);
    }
  }
 else   if ((getCacheKeyType() == CacheKeyType.ID_VALUE) && (getPrimaryKeyFields().size() > 1)) {
    session.getIntegrityChecker().handleError(DescriptorException.cannotUseIdValueForCompositeId(this));
  }
  getObjectBuilder().postInitialize(session);
  validateAfterInitialization(session);
  checkDatabase(session);
}"
66356,"/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 */
public void resolveReferences(AbstractSession session){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    Object referenceSourceObject=reference.getSourceObject();
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=null;
      if (mapping.getReuseContainer()) {
        container=mapping.getAttributeAccessor().getAttributeValueFromObject(referenceSourceObject);
      }
 else {
        container=cPolicy.containerInstance();
      }
      createPKVectorsFromMap(reference,mapping);
      for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
        CacheId primaryKey=(CacheId)pkIt.next();
        Object value=getValue(session,reference,primaryKey);
        if (value != null) {
          cPolicy.addInto(value,container,session);
        }
      }
      mapping.setAttributeValueInObject(referenceSourceObject,container);
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        Object iterator=cPolicy.iteratorFor(container);
        while (cPolicy.hasNext(iterator)) {
          Object next=cPolicy.next(iterator,session);
          if (backpointerContainerPolicy == null) {
            backpointerAccessor.setAttributeValueInObject(next,referenceSourceObject);
          }
 else {
            Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(next);
            if (backpointerContainer == null) {
              backpointerContainer=backpointerContainerPolicy.containerInstance();
              backpointerAccessor.setAttributeValueInObject(next,backpointerContainer);
            }
            backpointerContainerPolicy.addInto(referenceSourceObject,backpointerContainer,session);
          }
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      CacheId primaryKey=(CacheId)reference.getPrimaryKey();
      Object value=getValue(session,reference,primaryKey);
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList();
}","/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 */
public void resolveReferences(AbstractSession session){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    Object referenceSourceObject=reference.getSourceObject();
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=null;
      if (mapping.getReuseContainer()) {
        container=mapping.getAttributeAccessor().getAttributeValueFromObject(referenceSourceObject);
      }
 else {
        container=cPolicy.containerInstance();
      }
      createPKVectorsFromMap(reference,mapping);
      if (!mapping.isWriteOnly()) {
        for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
          CacheId primaryKey=(CacheId)pkIt.next();
          Object value=getValue(session,reference,primaryKey);
          if (value != null) {
            cPolicy.addInto(value,container,session);
          }
        }
      }
      mapping.setAttributeValueInObject(referenceSourceObject,container);
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        Object iterator=cPolicy.iteratorFor(container);
        while (cPolicy.hasNext(iterator)) {
          Object next=cPolicy.next(iterator,session);
          if (backpointerContainerPolicy == null) {
            backpointerAccessor.setAttributeValueInObject(next,referenceSourceObject);
          }
 else {
            Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(next);
            if (backpointerContainer == null) {
              backpointerContainer=backpointerContainerPolicy.containerInstance();
              backpointerAccessor.setAttributeValueInObject(next,backpointerContainer);
            }
            backpointerContainerPolicy.addInto(referenceSourceObject,backpointerContainer,session);
          }
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      CacheId primaryKey=(CacheId)reference.getPrimaryKey();
      Object value=getValue(session,reference,primaryKey);
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList();
}"
66357,"/** 
 * Return a Schema for the given Source object. Since this method is called recursively, and the SchemaResolverWrapper is stateful, the resolver wrapper must be created outside of this method.
 * @param xsdSource
 * @param schemaResolverWrapper wraps the schema resolver to be used to resolve imports/includes
 * @return
 */
public Schema getSchema(Source xsdSource,SchemaResolverWrapper schemaResolverWrapper){
  try {
    String systemId=xsdSource.getSystemId();
    if (systemId != null) {
      Source resolvedSchemaSource=schemaResolverWrapper.resolveSchema(systemId);
      if (resolvedSchemaSource != null) {
        xsdSource=resolvedSchemaSource;
      }
    }
    XMLContext context=new XMLContext(getSchemaProject());
    XMLUnmarshaller unmarshaller=context.createUnmarshaller();
    unmarshaller.setEntityResolver(schemaResolverWrapper.getSchemaResolver());
    Schema schema=(Schema)unmarshaller.unmarshal(xsdSource);
    java.util.List imports=schema.getImports();
    Iterator iter=imports.iterator();
    while (iter.hasNext()) {
      Import nextImport=(Import)iter.next();
      Source referencedSchema=getReferencedSchema(xsdSource,nextImport.getNamespace(),nextImport.getSchemaLocation(),schemaResolverWrapper);
      if (referencedSchema != null) {
        Schema importedSchema=getSchema(referencedSchema,schemaResolverWrapper);
        nextImport.setSchema(importedSchema);
      }
    }
    java.util.List includes=schema.getIncludes();
    Iterator includesIter=includes.iterator();
    while (includesIter.hasNext()) {
      Include nextInclude=(Include)includesIter.next();
      Source referencedSchema=getReferencedSchema(xsdSource,schema.getTargetNamespace(),nextInclude.getSchemaLocation(),schemaResolverWrapper);
      if (referencedSchema != null) {
        Schema includedSchema=getSchema(referencedSchema,schemaResolverWrapper);
        nextInclude.setSchema(includedSchema);
      }
    }
    return schema;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","/** 
 * Return a Schema for the given Source object. Since this method is called recursively, and the SchemaResolverWrapper is stateful, the resolver wrapper must be created outside of this method.
 * @param xsdSource
 * @param schemaResolverWrapper wraps the schema resolver to be used to resolve imports/includes
 * @return
 */
public Schema getSchema(Source xsdSource,SchemaResolverWrapper schemaResolverWrapper){
  try {
    xsdSource=schemaResolverWrapper.resolveSchema(xsdSource);
    XMLContext context=new XMLContext(getSchemaProject());
    XMLUnmarshaller unmarshaller=context.createUnmarshaller();
    unmarshaller.setEntityResolver(schemaResolverWrapper.getSchemaResolver());
    Schema schema=(Schema)unmarshaller.unmarshal(xsdSource);
    java.util.List imports=schema.getImports();
    Iterator iter=imports.iterator();
    while (iter.hasNext()) {
      Import nextImport=(Import)iter.next();
      Source referencedSchema=getReferencedSchema(xsdSource,nextImport.getNamespace(),nextImport.getSchemaLocation(),schemaResolverWrapper);
      if (referencedSchema != null) {
        Schema importedSchema=getSchema(referencedSchema,schemaResolverWrapper);
        nextImport.setSchema(importedSchema);
      }
    }
    java.util.List includes=schema.getIncludes();
    Iterator includesIter=includes.iterator();
    while (includesIter.hasNext()) {
      Include nextInclude=(Include)includesIter.next();
      Source referencedSchema=getReferencedSchema(xsdSource,schema.getTargetNamespace(),nextInclude.getSchemaLocation(),schemaResolverWrapper);
      if (referencedSchema != null) {
        Schema includedSchema=getSchema(referencedSchema,schemaResolverWrapper);
        nextInclude.setSchema(includedSchema);
      }
    }
    return schema;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
66358,"/** 
 */
public Source resolveSchema(String systemId){
  if (!addSchemaToList(systemId)) {
    return null;
  }
  try {
    InputSource inputSource=schemaResolver.resolveEntity(null,systemId);
    if (inputSource != null) {
      return new SAXSource(inputSource);
    }
  }
 catch (  Exception ex) {
    throw SDOException.errorResolvingSchema(ex);
  }
  return null;
}","public Source resolveSchema(String publicId,String systemId){
  if (!addSchemaToList(systemId)) {
    return null;
  }
  try {
    InputSource inputSource=schemaResolver.resolveEntity(publicId,systemId);
    if (inputSource != null) {
      return new SAXSource(inputSource);
    }
  }
 catch (  Exception ex) {
    throw SDOException.errorResolvingSchema(ex);
  }
  return null;
}"
66359,"/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  ContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          XMLField fkField=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          return false;
        }
      }
      schemaType=getSchemaType(xmlField,fieldValue,session);
      newValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
      if (newValue != null) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValueStringBuilder.toString(),session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}","/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (this.xmlCollectionReferenceMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          XMLField fkField=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          return false;
        }
      }
      schemaType=getSchemaType(xmlField,fieldValue,session);
      newValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
      if (newValue != null) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValueStringBuilder.toString(),session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}"
66360,"/** 
 * INTERNAL: Write the attribute value from the object to the row.
 */
@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType){
  for (Iterator fieldIt=getFields().iterator(); fieldIt.hasNext(); ) {
    XMLField xmlField=(XMLField)fieldIt.next();
    ContainerPolicy cp=getContainerPolicy();
    Object collection=getAttributeAccessor().getAttributeValueFromObject(object);
    if (collection == null) {
      return;
    }
    Object fieldValue;
    Object objectValue;
    StringBuilder stringValueBuilder=new StringBuilder();
    QName schemaType;
    Object iterator=cp.iteratorFor(collection);
    if (usesSingleNode()) {
      while (cp.hasNext(iterator)) {
        objectValue=cp.next(iterator,session);
        fieldValue=buildFieldValue(objectValue,xmlField,session);
        if (fieldValue != null) {
          schemaType=getSchemaType(xmlField,fieldValue,session);
          String newValue=getValueToWrite(schemaType,fieldValue,session);
          if (newValue != null) {
            stringValueBuilder.append(newValue);
            if (cp.hasNext(iterator)) {
              stringValueBuilder.append(SPACE);
            }
          }
        }
      }
      if (stringValueBuilder.length() > 0) {
        row.put(xmlField,stringValueBuilder.toString());
      }
    }
 else {
      ArrayList keyValues=new ArrayList();
      while (cp.hasNext(iterator)) {
        objectValue=cp.next(iterator,session);
        fieldValue=buildFieldValue(objectValue,xmlField,session);
        if (fieldValue != null) {
          schemaType=getSchemaType(xmlField,fieldValue,session);
          String stringValue=getValueToWrite(schemaType,fieldValue,session);
          keyValues.add(stringValue);
        }
      }
      row.put(xmlField,keyValues);
    }
  }
}","/** 
 * INTERNAL: Write the attribute value from the object to the row.
 */
@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType){
  if (this.isReadOnly()) {
    return;
  }
  for (Iterator fieldIt=getFields().iterator(); fieldIt.hasNext(); ) {
    XMLField xmlField=(XMLField)fieldIt.next();
    ContainerPolicy cp=getContainerPolicy();
    Object collection=getAttributeAccessor().getAttributeValueFromObject(object);
    if (collection == null) {
      return;
    }
    Object fieldValue;
    Object objectValue;
    StringBuilder stringValueBuilder=new StringBuilder();
    QName schemaType;
    Object iterator=cp.iteratorFor(collection);
    if (usesSingleNode()) {
      while (cp.hasNext(iterator)) {
        objectValue=cp.next(iterator,session);
        fieldValue=buildFieldValue(objectValue,xmlField,session);
        if (fieldValue != null) {
          schemaType=getSchemaType(xmlField,fieldValue,session);
          String newValue=getValueToWrite(schemaType,fieldValue,session);
          if (newValue != null) {
            stringValueBuilder.append(newValue);
            if (cp.hasNext(iterator)) {
              stringValueBuilder.append(SPACE);
            }
          }
        }
      }
      if (stringValueBuilder.length() > 0) {
        row.put(xmlField,stringValueBuilder.toString());
      }
    }
 else {
      ArrayList keyValues=new ArrayList();
      while (cp.hasNext(iterator)) {
        objectValue=cp.next(iterator,session);
        fieldValue=buildFieldValue(objectValue,xmlField,session);
        if (fieldValue != null) {
          schemaType=getSchemaType(xmlField,fieldValue,session);
          String stringValue=getValueToWrite(schemaType,fieldValue,session);
          keyValues.add(stringValue);
        }
      }
      row.put(xmlField,keyValues);
    }
  }
}"
66361,"public EncodedData getBytesFromDataHandler(DataHandler handler){
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  try {
    handler.writeTo(output);
  }
 catch (  IOException ex) {
  }
  return new EncodedData(output.toByteArray(),handler.getContentType());
}","public EncodedData getBytesFromDataHandler(DataHandler handler){
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  try {
    handler.writeTo(output);
  }
 catch (  IOException ex) {
    throw ConversionException.couldNotBeConverted(handler,byte[].class,ex);
  }
  return new EncodedData(output.toByteArray(),handler.getContentType());
}"
66362,"public Object convertObjectToImage(Object obj){
  if (obj instanceof Image) {
    return obj;
  }
  if (obj instanceof DataHandler) {
    try {
      if (((DataHandler)obj).getContent() instanceof Image) {
        Image image=(Image)((DataHandler)obj).getContent();
        return image;
      }
 else {
        return ImageIO.read(((DataHandler)obj).getInputStream());
      }
    }
 catch (    Exception ex) {
    }
  }
 else   if (obj instanceof byte[]) {
    ByteArrayInputStream stream=new ByteArrayInputStream((byte[])obj);
    try {
      return ImageIO.read(stream);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      return null;
    }
  }
 else   if (obj instanceof Byte[]) {
    Byte[] objectBytes=(Byte[])obj;
    byte[] bytes=new byte[objectBytes.length];
    for (int i=0; i < objectBytes.length; i++) {
      bytes[i]=objectBytes[i].byteValue();
    }
    ByteArrayInputStream stream=new ByteArrayInputStream(bytes);
    try {
      return ImageIO.read(stream);
    }
 catch (    Exception ex) {
      return null;
    }
  }
  return null;
}","public Object convertObjectToImage(Object obj){
  if (obj instanceof Image) {
    return obj;
  }
  if (obj instanceof DataHandler) {
    try {
      if (((DataHandler)obj).getContent() instanceof Image) {
        Image image=(Image)((DataHandler)obj).getContent();
        return image;
      }
 else {
        return ImageIO.read(((DataHandler)obj).getInputStream());
      }
    }
 catch (    Exception ex) {
      throw ConversionException.couldNotBeConverted(obj,IMAGE,ex);
    }
  }
 else   if (obj instanceof byte[]) {
    ByteArrayInputStream stream=new ByteArrayInputStream((byte[])obj);
    try {
      return ImageIO.read(stream);
    }
 catch (    Exception ex) {
      throw ConversionException.couldNotBeConverted(obj,IMAGE,ex);
    }
  }
 else   if (obj instanceof Byte[]) {
    Byte[] objectBytes=(Byte[])obj;
    byte[] bytes=new byte[objectBytes.length];
    for (int i=0; i < objectBytes.length; i++) {
      bytes[i]=objectBytes[i].byteValue();
    }
    ByteArrayInputStream stream=new ByteArrayInputStream(bytes);
    try {
      return ImageIO.read(stream);
    }
 catch (    Exception ex) {
      throw ConversionException.couldNotBeConverted(obj,IMAGE,ex);
    }
  }
  return null;
}"
66363,"public EncodedData getBytesFromMultipart(MimeMultipart value,XMLMarshaller marshaller){
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  try {
    ContentType contentType=new ContentType(value.getContentType());
    String boundary=contentType.getParameter(""String_Node_Str"");
    output.write(Helper.cr().getBytes());
    output.write((""String_Node_Str"" + contentType.getBaseType() + ""String_Node_Str""+ boundary+ ""String_Node_Str"").getBytes());
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  try {
    value.writeTo(output);
  }
 catch (  Exception ex) {
  }
  return new EncodedData(output.toByteArray(),value.getContentType());
}","public EncodedData getBytesFromMultipart(MimeMultipart value,XMLMarshaller marshaller){
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  try {
    ContentType contentType=new ContentType(value.getContentType());
    String boundary=contentType.getParameter(""String_Node_Str"");
    output.write(Helper.cr().getBytes());
    output.write((""String_Node_Str"" + contentType.getBaseType() + ""String_Node_Str""+ boundary+ ""String_Node_Str"").getBytes());
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(value,byte[].class,ex);
  }
  try {
    value.writeTo(output);
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(value,byte[].class,ex);
  }
  return new EncodedData(output.toByteArray(),value.getContentType());
}"
66364,"public String stringFromImage(Image image,QName schemaTypeQName,AbstractSession session){
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  try {
    String mimeType=null;
    if ((mimeType == null) || mimeType.startsWith(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
    Iterator itr=ImageIO.getImageWritersByMIMEType(mimeType);
    if (itr.hasNext()) {
      ImageWriter w=(ImageWriter)itr.next();
      w.setOutput(ImageIO.createImageOutputStream(outputStream));
      w.write(convertToBufferedImage(image));
      w.dispose();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + mimeType);
    }
    return ((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).buildBase64StringFromBytes(outputStream.toByteArray());
  }
 catch (  Exception ex) {
  }
  return null;
}","public String stringFromImage(Image image,QName schemaTypeQName,AbstractSession session){
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  try {
    String mimeType=null;
    if ((mimeType == null) || mimeType.startsWith(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
    Iterator itr=ImageIO.getImageWritersByMIMEType(mimeType);
    if (itr.hasNext()) {
      ImageWriter w=(ImageWriter)itr.next();
      w.setOutput(ImageIO.createImageOutputStream(outputStream));
      w.write(convertToBufferedImage(image));
      w.dispose();
    }
 else {
      throw XMLMarshalException.noEncoderForMimeType(mimeType);
    }
    return ((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).buildBase64StringFromBytes(outputStream.toByteArray());
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(image,byte[].class,ex);
  }
}"
66365,"public Object convertObjectToMultipart(Object obj){
  if (obj instanceof MimeMultipart) {
    return obj;
  }
  if (obj instanceof DataHandler) {
    try {
      if (((DataHandler)obj).getContent() instanceof MimeMultipart) {
        MimeMultipart multipart=(MimeMultipart)((DataHandler)obj).getContent();
        return multipart;
      }
 else {
        return new MimeMultipart(((DataHandler)obj).getDataSource());
      }
    }
 catch (    Exception ex) {
    }
  }
 else   if (obj instanceof byte[]) {
    try {
      byte[] bytes=(byte[])obj;
      java.io.InputStreamReader in=new java.io.InputStreamReader(new ByteArrayInputStream(bytes));
      int i=0;
      while (i != -1) {
        i=in.read();
      }
      return new MimeMultipart(new ByteArrayDataSource((byte[])obj,""String_Node_Str""));
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      return null;
    }
  }
 else   if (obj instanceof Byte[]) {
    Byte[] objectBytes=(Byte[])obj;
    byte[] bytes=new byte[objectBytes.length];
    for (int i=0; i < objectBytes.length; i++) {
      bytes[i]=objectBytes[i].byteValue();
    }
    try {
      return new MimeMultipart(new ByteArrayDataSource(bytes,""String_Node_Str""));
    }
 catch (    Exception ex) {
      return null;
    }
  }
  return null;
}","public Object convertObjectToMultipart(Object obj){
  if (obj instanceof MimeMultipart) {
    return obj;
  }
  if (obj instanceof DataHandler) {
    try {
      if (((DataHandler)obj).getContent() instanceof MimeMultipart) {
        MimeMultipart multipart=(MimeMultipart)((DataHandler)obj).getContent();
        return multipart;
      }
 else {
        return new MimeMultipart(((DataHandler)obj).getDataSource());
      }
    }
 catch (    Exception ex) {
      throw ConversionException.couldNotBeConverted(obj,MULTIPART,ex);
    }
  }
 else   if (obj instanceof byte[]) {
    try {
      byte[] bytes=(byte[])obj;
      java.io.InputStreamReader in=new java.io.InputStreamReader(new ByteArrayInputStream(bytes));
      int i=0;
      while (i != -1) {
        i=in.read();
      }
      return new MimeMultipart(new ByteArrayDataSource((byte[])obj,""String_Node_Str""));
    }
 catch (    Exception ex) {
      throw ConversionException.couldNotBeConverted(obj,MULTIPART,ex);
    }
  }
 else   if (obj instanceof Byte[]) {
    Byte[] objectBytes=(Byte[])obj;
    byte[] bytes=new byte[objectBytes.length];
    for (int i=0; i < objectBytes.length; i++) {
      bytes[i]=objectBytes[i].byteValue();
    }
    try {
      return new MimeMultipart(new ByteArrayDataSource(bytes,""String_Node_Str""));
    }
 catch (    Exception ex) {
      throw ConversionException.couldNotBeConverted(obj,MULTIPART,ex);
    }
  }
  return null;
}"
66366,"public EncodedData getBytesFromImage(Image image,String mimeType){
  if ((mimeType == null) || mimeType.startsWith(""String_Node_Str"")) {
    mimeType=""String_Node_Str"";
  }
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  try {
    Iterator itr=ImageIO.getImageWritersByMIMEType(mimeType);
    if (itr.hasNext()) {
      ImageWriter w=(ImageWriter)itr.next();
      w.setOutput(ImageIO.createImageOutputStream(outputStream));
      w.write(convertToBufferedImage(image));
      w.dispose();
    }
 else {
      throw XMLMarshalException.noEncoderForMimeType(mimeType);
    }
    return new EncodedData(outputStream.toByteArray(),mimeType);
  }
 catch (  Exception ex) {
  }
  return new EncodedData(new byte[0],null);
}","public EncodedData getBytesFromImage(Image image,String mimeType){
  if ((mimeType == null) || mimeType.startsWith(""String_Node_Str"")) {
    mimeType=""String_Node_Str"";
  }
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  try {
    Iterator itr=ImageIO.getImageWritersByMIMEType(mimeType);
    if (itr.hasNext()) {
      ImageWriter w=(ImageWriter)itr.next();
      w.setOutput(ImageIO.createImageOutputStream(outputStream));
      w.write(convertToBufferedImage(image));
      w.dispose();
    }
 else {
      throw XMLMarshalException.noEncoderForMimeType(mimeType);
    }
    return new EncodedData(outputStream.toByteArray(),mimeType);
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(image,byte[].class,ex);
  }
}"
66367,"public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.fieldToClassMappings.size() == 0) {
    this.convertClassNamesToClasses(((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).getLoader());
  }
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractDirectMapping()) {
      if (converter != null) {
        ((AbstractDirectMapping)nextMapping).setConverter(converter);
      }
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=(QName)xmlConversionManager.getDefaultJavaTypes().get(nextMapping.getAttributeClassification());
      if (schemaType != null && ((XMLField)nextMapping.getField()).getSchemaType() == null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
    }
 else {
      if (converter != null) {
        ((AbstractCompositeObjectMapping)nextMapping).setConverter(converter);
      }
    }
    nextMapping.initialize(session);
  }
}","public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.fieldToClassMappings.size() == 0) {
    this.convertClassNamesToClasses(((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).getLoader());
  }
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractDirectMapping()) {
      ((XMLDirectMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
      if (converter != null) {
        ((AbstractDirectMapping)nextMapping).setConverter(converter);
      }
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=(QName)xmlConversionManager.getDefaultJavaTypes().get(nextMapping.getAttributeClassification());
      if (schemaType != null && ((XMLField)nextMapping.getField()).getSchemaType() == null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
    }
 else {
      ((XMLCompositeObjectMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
      if (converter != null) {
        ((AbstractCompositeObjectMapping)nextMapping).setConverter(converter);
      }
    }
    nextMapping.initialize(session);
  }
}"
66368,"/** 
 * Tests XmlChoiceMapping configuration via eclipselink-oxm.xml.  Here an unmarshal operation is performed. Utilizes xml-attribute and  xml-element. Positive test.
 */
public void testChoiceMappingUnmarshal(){
  InputStream iDocStream=loader.getResourceAsStream(PATH + ""String_Node_Str"");
  if (iDocStream == null) {
    fail(""String_Node_Str"" + PATH + ""String_Node_Str""+ ""String_Node_Str"");
  }
  Employee ctrlEmp=getControlObject();
  try {
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    Employee empObj=(Employee)unmarshaller.unmarshal(iDocStream);
    assertNotNull(""String_Node_Str"",empObj);
    assertTrue(""String_Node_Str"",empObj.wasSetCalled);
    assertTrue(""String_Node_Str"",ctrlEmp.equals(empObj));
  }
 catch (  JAXBException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}","/** 
 * Tests XmlChoiceMapping configuration via eclipselink-oxm.xml.  Here an unmarshal operation is performed. Utilizes xml-attribute and  xml-element. Positive test.
 */
public void testChoiceMappingUnmarshal(){
  InputStream iDocStream=loader.getResourceAsStream(PATH + ""String_Node_Str"");
  if (iDocStream == null) {
    fail(""String_Node_Str"" + PATH + ""String_Node_Str""+ ""String_Node_Str"");
  }
  Employee ctrlEmp=getControlObject();
  ctrlEmp.writeOnlyThing=null;
  try {
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    Employee empObj=(Employee)unmarshaller.unmarshal(iDocStream);
    assertNotNull(""String_Node_Str"",empObj);
    assertTrue(""String_Node_Str"",empObj.wasSetCalled);
    assertTrue(""String_Node_Str"",ctrlEmp.equals(empObj));
  }
 catch (  JAXBException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}"
66369,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  while (cp.hasNext(iterator)) {
    Object nextValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  while (cp.hasNext(iterator)) {
    Object nextValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}"
66370,"@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  Object attributeValue=getAttributeValueFromObject(object);
  List<XMLEntry> nestedRows=new ArrayList<XMLEntry>();
  XMLRecord record=(XMLRecord)row;
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(attributeValue);
  while (cp.hasNext(iterator)) {
    Object value=cp.next(iterator,session);
    if (null != converter) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,record.getMarshaller());
      }
 else {
        value=converter.convertObjectValueToDataValue(value,session);
      }
    }
    NodeValue associatedNodeValue=null;
    XMLField associatedField=null;
    Object fieldValue=value;
    if (value instanceof XMLRoot) {
      XMLRoot rootValue=(XMLRoot)value;
      String localName=rootValue.getLocalName();
      String namespaceUri=rootValue.getNamespaceURI();
      fieldValue=rootValue.getObject();
      associatedField=getFieldForName(localName,namespaceUri);
      if (associatedField == null) {
        associatedField=getClassToFieldMappings().get(fieldValue.getClass());
      }
    }
 else {
      associatedField=getClassToFieldMappings().get(value.getClass());
    }
    DatabaseMapping xmlMapping=(DatabaseMapping)this.choiceElementMappings.get(associatedField);
    if (xmlMapping.isAbstractCompositeCollectionMapping()) {
      fieldValue=((XMLCompositeCollectionMapping)xmlMapping).buildCompositeRow(fieldValue,session,row,writeType);
    }
    XMLEntry entry=new XMLEntry();
    entry.setValue(fieldValue);
    entry.setXMLField(associatedField);
    nestedRows.add(entry);
  }
  ((DOMRecord)row).put(getFields(),nestedRows);
}","@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  Object attributeValue=getAttributeValueFromObject(object);
  List<XMLEntry> nestedRows=new ArrayList<XMLEntry>();
  XMLRecord record=(XMLRecord)row;
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(attributeValue);
  while (cp.hasNext(iterator)) {
    Object value=cp.next(iterator,session);
    if (null != converter) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,record.getMarshaller());
      }
 else {
        value=converter.convertObjectValueToDataValue(value,session);
      }
    }
    NodeValue associatedNodeValue=null;
    XMLField associatedField=null;
    Object fieldValue=value;
    if (value instanceof XMLRoot) {
      XMLRoot rootValue=(XMLRoot)value;
      String localName=rootValue.getLocalName();
      String namespaceUri=rootValue.getNamespaceURI();
      fieldValue=rootValue.getObject();
      associatedField=getFieldForName(localName,namespaceUri);
      if (associatedField == null) {
        associatedField=getClassToFieldMappings().get(fieldValue.getClass());
      }
    }
 else {
      associatedField=getClassToFieldMappings().get(value.getClass());
    }
    DatabaseMapping xmlMapping=(DatabaseMapping)this.choiceElementMappings.get(associatedField);
    if (xmlMapping.isAbstractCompositeCollectionMapping()) {
      fieldValue=((XMLCompositeCollectionMapping)xmlMapping).buildCompositeRow(fieldValue,session,row,writeType);
    }
    XMLEntry entry=new XMLEntry();
    entry.setValue(fieldValue);
    entry.setXMLField(associatedField);
    nestedRows.add(entry);
  }
  ((DOMRecord)row).put(getFields(),nestedRows);
}"
66371,"/** 
 * Tests XmlChoiceCollectionMapping configuration via eclipselink-oxm.xml. Here a marshal operation is performed. Utilizes xml-attribute and xml-element Positive test.
 */
public void testChoiceCollectionMappingMarshal(){
  String src=PATH + ""String_Node_Str"";
  Document testDoc=parser.newDocument();
  Document ctrlDoc=parser.newDocument();
  try {
    ctrlDoc=getControlDocument(src);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"" + src + ""String_Node_Str"");
  }
  try {
    Marshaller marshaller=jaxbContext.createMarshaller();
    Employee ctrlEmp=getControlObject();
    ctrlEmp.readOnlyThings=null;
    marshaller.marshal(ctrlEmp,testDoc);
    assertTrue(""String_Node_Str"",ctrlEmp.wasGetCalled);
    assertTrue(""String_Node_Str"",compareDocuments(ctrlDoc,testDoc));
  }
 catch (  JAXBException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}","/** 
 * Tests XmlChoiceCollectionMapping configuration via eclipselink-oxm.xml. Here a marshal operation is performed. Utilizes xml-attribute and xml-element Positive test.
 */
public void testChoiceCollectionMappingMarshal(){
  String src=PATH + ""String_Node_Str"";
  Document testDoc=parser.newDocument();
  Document ctrlDoc=parser.newDocument();
  try {
    ctrlDoc=getControlDocument(src);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"" + src + ""String_Node_Str"");
  }
  try {
    Marshaller marshaller=jaxbContext.createMarshaller();
    Employee ctrlEmp=getControlObject();
    marshaller.marshal(ctrlEmp,testDoc);
    assertTrue(""String_Node_Str"",ctrlEmp.wasGetCalled);
    assertTrue(""String_Node_Str"",compareDocuments(ctrlDoc,testDoc));
  }
 catch (  JAXBException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}"
66372,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (value instanceof XMLRoot) {
    XMLRoot root=(XMLRoot)value;
    XPathFragment fragment=this.xmlField.getXPathFragment();
    while (fragment != null && !fragment.nameIsText) {
      if (fragment.getNextFragment() == null || fragment.getHasText()) {
        if (fragment.getLocalName().equals(root.getLocalName())) {
          String fragUri=fragment.getNamespaceURI();
          String namespaceUri=root.getNamespaceURI();
          if ((namespaceUri == null && fragUri == null) || (namespaceUri != null && fragUri != null && namespaceUri.equals(fragUri))) {
            return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
          }
        }
      }
      fragment=fragment.getNextFragment();
    }
    if (root.getObject() != null && xmlChoiceMapping.getClassToFieldMappings().get(root.getObject().getClass()) == this.xmlField) {
      return this.choiceElementNodeValue.marshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
    }
  }
 else {
    if (value != null && xmlChoiceMapping.getClassToFieldMappings().get(value.getClass()) == this.xmlField) {
      return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
    }
  }
  return false;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (value instanceof XMLRoot) {
    XMLRoot root=(XMLRoot)value;
    XPathFragment fragment=this.xmlField.getXPathFragment();
    while (fragment != null && !fragment.nameIsText) {
      if (fragment.getNextFragment() == null || fragment.getHasText()) {
        if (fragment.getLocalName().equals(root.getLocalName())) {
          String fragUri=fragment.getNamespaceURI();
          String namespaceUri=root.getNamespaceURI();
          if ((namespaceUri == null && fragUri == null) || (namespaceUri != null && fragUri != null && namespaceUri.equals(fragUri))) {
            return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
          }
        }
      }
      fragment=fragment.getNextFragment();
    }
  }
 else {
    if (value != null && xmlChoiceMapping.getClassToFieldMappings().get(value.getClass()) == this.xmlField) {
      return this.choiceElementNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
    }
  }
  return false;
}"
66373,"public DatabaseMapping runtimeMapping(){
  DirectMapMapping runtimeMapping=(DirectMapMapping)super.runtimeMapping();
  runtimeMapping.setContainerPolicy(this.containerPolicy.runtimeContainerPolicy());
  runtimeMapping.setKeyConverter(getDirectKeyConverter().runtimeConverter(runtimeMapping));
  if (getDirectKeyColumn() != null) {
    runtimeMapping.setDirectKeyFieldName(getDirectKeyColumn().qualifiedName());
  }
  return runtimeMapping;
}","public DatabaseMapping runtimeMapping(){
  DirectMapMapping runtimeMapping=(DirectMapMapping)super.runtimeMapping();
  runtimeMapping.setContainerPolicy(this.containerPolicy.runtimeContainerPolicy());
  if (getDirectKeyColumn() != null) {
    runtimeMapping.setDirectKeyFieldName(getDirectKeyColumn().qualifiedName());
  }
  if (!MWConverter.NO_CONVERTER.equals(getDirectKeyConverter().getType())) {
    runtimeMapping.setKeyConverter(getDirectKeyConverter().runtimeConverter(runtimeMapping));
  }
  return runtimeMapping;
}"
66374,"public void testDefine(){
  StreamSource source=new StreamSource(""String_Node_Str"");
  List types=((SDOXSDHelper)xsdHelper).define(source,new MySchemaResolver());
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  log(types);
}","public void testDefine(){
  StreamSource source=new StreamSource(""String_Node_Str"");
  List types=((SDOXSDHelper)xsdHelper).define(source,new MySchemaResolver());
  assertEquals(1,types.size());
}"
66375,"@Test @Bugzilla(bugid=309681) public void testRefreshDeleted() throws SQLException {
  final JPAEnvironment env=getEnvironment();
  final EntityManager em=env.getEntityManager();
  int id;
  Department dep;
  Department updatedDep;
  try {
    id=31;
    dep=new Department(id,""String_Node_Str"");
    env.beginTransaction(em);
    em.persist(dep);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    dep=em.find(Department.class,new Integer(id));
    em.remove(dep);
    dep.setName(""String_Node_Str"");
    em.refresh(dep);
    checkDepartment(dep,id,""String_Node_Str"");
    verify(!em.contains(dep),""String_Node_Str"");
    env.commitTransactionAndClear(em);
    verifyAbsenceFromDatabase(em,id);
    id=32;
    dep=new Department(id,""String_Node_Str"");
    updatedDep=new Department(id,""String_Node_Str"");
    env.beginTransaction(em);
    em.persist(dep);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    dep=em.find(Department.class,new Integer(id));
    em.remove(dep);
    updateDepartmentOnDatabase(updatedDep);
    em.refresh(dep);
    checkDepartment(dep,id,""String_Node_Str"");
    verify(!em.contains(dep),""String_Node_Str"");
    env.commitTransactionAndClear(em);
    verifyAbsenceFromDatabase(em,id);
    id=33;
    dep=new Department(id,""String_Node_Str"");
    env.beginTransaction(em);
    em.persist(dep);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    dep=em.find(Department.class,new Integer(id));
    em.remove(dep);
    deleteDepartmentFromDatabase(id);
    verifyAbsenceFromDatabase(em,id);
    try {
      em.refresh(dep);
      flop(""String_Node_Str"");
    }
 catch (    EntityNotFoundException e) {
      verify(true,""String_Node_Str"");
    }
    verifyAbsenceFromDatabase(em,id);
    env.rollbackTransactionAndClear(em);
    id=34;
    dep=new Department(id,""String_Node_Str"");
    env.beginTransaction(em);
    em.persist(dep);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    dep=em.find(Department.class,new Integer(id));
    em.remove(dep);
    em.flush();
    verifyAbsenceFromDatabase(em,id);
    try {
      em.refresh(dep);
      flop(""String_Node_Str"");
    }
 catch (    EntityNotFoundException e) {
      verify(true,""String_Node_Str"");
    }
    env.rollbackTransactionAndClear(em);
    verifyExistenceOnDatabase(id);
  }
  finally {
    closeEntityManager(em);
  }
}","@Test public void testRefreshDeleted() throws SQLException {
  doRefreshDeleted(31,false);
  doRefreshDeleted(32,true);
}"
66376,"/** 
 * INTERNAL: Rebuild the multiple table primary key map.
 */
public void initializeMultipleTablePrimaryKeyFields(){
  int additionalTablesSize=getTables().size() - 1;
  boolean isChild=hasInheritance() && getInheritancePolicy().isChildDescriptor();
  if (isChild) {
    additionalTablesSize=getTables().size() - getInheritancePolicy().getParentDescriptor().getTables().size();
  }
  if (additionalTablesSize < 1) {
    return;
  }
  ExpressionBuilder builder=new ExpressionBuilder();
  Expression joinExpression=getQueryManager().getMultipleTableJoinExpression();
  for (int index=getTables().size() - additionalTablesSize; index < getTables().size(); index++) {
    DatabaseTable table=getTables().get(index);
    Map oldKeyMapping=getAdditionalTablePrimaryKeyFields().get(table);
    if (oldKeyMapping != null) {
      if (!getQueryManager().hasCustomMultipleTableJoinExpression()) {
        for (Iterator enumtr=oldKeyMapping.keySet().iterator(); enumtr.hasNext(); ) {
          DatabaseField sourceTableField=(DatabaseField)enumtr.next();
          DatabaseField targetTableField=(DatabaseField)oldKeyMapping.get(sourceTableField);
          DatabaseTable targetTable=targetTableField.getTable();
          if (!getFields().contains(sourceTableField)) {
            getFields().addElement(sourceTableField);
          }
          if (!getFields().contains(targetTableField)) {
            getFields().addElement(targetTableField);
          }
          Expression keyJoinExpression=builder.getField(targetTableField).equal(builder.getField(sourceTableField));
          joinExpression=keyJoinExpression.and(joinExpression);
          getQueryManager().getTablesJoinExpressions().put(targetTable,keyJoinExpression);
          if (isChild) {
            getInheritancePolicy().addChildTableJoinExpressionToAllParents(targetTable,keyJoinExpression);
          }
        }
      }
    }
 else {
      Map newKeyMapping=new HashMap(getPrimaryKeyFields().size() + 1);
      getAdditionalTablePrimaryKeyFields().put(table,newKeyMapping);
      List primaryKeyFields=getPrimaryKeyFields();
      for (int pkIndex=0; pkIndex < primaryKeyFields.size(); pkIndex++) {
        DatabaseField primaryKeyField=(DatabaseField)primaryKeyFields.get(pkIndex);
        DatabaseField secondaryKeyField=primaryKeyField.clone();
        secondaryKeyField.setTable(table);
        newKeyMapping.put(primaryKeyField,secondaryKeyField);
        getFields().addElement(secondaryKeyField);
        if (!getQueryManager().hasCustomMultipleTableJoinExpression()) {
          Expression keyJoinExpression=builder.getField(secondaryKeyField).equal(builder.getField(primaryKeyField));
          joinExpression=keyJoinExpression.and(joinExpression);
          getQueryManager().getTablesJoinExpressions().put(table,keyJoinExpression);
          if (isChild) {
            getInheritancePolicy().addChildTableJoinExpressionToAllParents(table,keyJoinExpression);
          }
        }
      }
    }
  }
  if (joinExpression != null) {
    getQueryManager().setInternalMultipleTableJoinExpression(joinExpression);
  }
  if (getQueryManager().hasCustomMultipleTableJoinExpression()) {
    Map tablesJoinExpressions=SQLSelectStatement.mapTableToExpression(joinExpression,getTables());
    getQueryManager().getTablesJoinExpressions().putAll(tablesJoinExpressions);
    if (isChild) {
      for (int index=getTables().size() - additionalTablesSize; index < getTables().size(); index++) {
        DatabaseTable table=getTables().elementAt(index);
        getInheritancePolicy().addChildTableJoinExpressionToAllParents(table,(Expression)tablesJoinExpressions.get(table));
      }
    }
  }
}","/** 
 * INTERNAL: Rebuild the multiple table primary key map.
 */
public void initializeMultipleTablePrimaryKeyFields(){
  int tableSize=getTables().size();
  int additionalTablesSize=tableSize - 1;
  boolean isChild=hasInheritance() && getInheritancePolicy().isChildDescriptor();
  if (isChild) {
    additionalTablesSize=tableSize - getInheritancePolicy().getParentDescriptor().getTables().size();
  }
  if (additionalTablesSize < 1) {
    return;
  }
  ExpressionBuilder builder=new ExpressionBuilder();
  Expression joinExpression=getQueryManager().getMultipleTableJoinExpression();
  for (int index=tableSize - additionalTablesSize; index < tableSize; index++) {
    DatabaseTable table=getTables().get(index);
    Map<DatabaseField,DatabaseField> oldKeyMapping=getAdditionalTablePrimaryKeyFields().get(table);
    if (oldKeyMapping != null) {
      if (!getQueryManager().hasCustomMultipleTableJoinExpression()) {
        Expression keyJoinExpression=null;
        for (        Map.Entry<DatabaseField,DatabaseField> entry : oldKeyMapping.entrySet()) {
          DatabaseField sourceTableField=entry.getKey();
          DatabaseField targetTableField=entry.getValue();
          if (!getFields().contains(sourceTableField)) {
            getFields().add(sourceTableField);
          }
          if (!getFields().contains(targetTableField)) {
            getFields().add(targetTableField);
          }
          keyJoinExpression=builder.getField(targetTableField).equal(builder.getField(sourceTableField)).and(keyJoinExpression);
          joinExpression=keyJoinExpression.and(joinExpression);
        }
        getQueryManager().getTablesJoinExpressions().put(table,keyJoinExpression);
        if (isChild) {
          getInheritancePolicy().addChildTableJoinExpressionToAllParents(table,keyJoinExpression);
        }
      }
    }
 else {
      Map newKeyMapping=new HashMap(getPrimaryKeyFields().size());
      getAdditionalTablePrimaryKeyFields().put(table,newKeyMapping);
      Expression keyJoinExpression=null;
      for (      DatabaseField primaryKeyField : getPrimaryKeyFields()) {
        DatabaseField secondaryKeyField=primaryKeyField.clone();
        secondaryKeyField.setTable(table);
        newKeyMapping.put(primaryKeyField,secondaryKeyField);
        getFields().add(secondaryKeyField);
        if (!getQueryManager().hasCustomMultipleTableJoinExpression()) {
          keyJoinExpression=builder.getField(secondaryKeyField).equal(builder.getField(primaryKeyField)).and(keyJoinExpression);
          joinExpression=keyJoinExpression.and(joinExpression);
        }
      }
      getQueryManager().getTablesJoinExpressions().put(table,keyJoinExpression);
      if (isChild) {
        getInheritancePolicy().addChildTableJoinExpressionToAllParents(table,keyJoinExpression);
      }
    }
  }
  if (joinExpression != null) {
    getQueryManager().setInternalMultipleTableJoinExpression(joinExpression);
  }
  if (getQueryManager().hasCustomMultipleTableJoinExpression()) {
    Map tablesJoinExpressions=SQLSelectStatement.mapTableToExpression(joinExpression,getTables());
    getQueryManager().getTablesJoinExpressions().putAll(tablesJoinExpressions);
    if (isChild) {
      for (int index=tableSize - additionalTablesSize; index < tableSize; index++) {
        DatabaseTable table=getTables().get(index);
        getInheritancePolicy().addChildTableJoinExpressionToAllParents(table,(Expression)tablesJoinExpressions.get(table));
      }
    }
  }
}"
66377,"public void persistExample(Session session){
  Vector allObjects=new Vector();
  UnitOfWork unitOfWork=session.acquireUnitOfWork();
  PopulationManager.getDefaultManager().addAllObjectsForClass(Person.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(AAA.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(Company.class,allObjects);
  unitOfWork.registerAllObjects(allObjects);
  unitOfWork.commit();
}","public void persistExample(Session session){
  Vector allObjects=new Vector();
  UnitOfWork unitOfWork=session.acquireUnitOfWork();
  PopulationManager.getDefaultManager().addAllObjectsForClass(Person.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(AAA.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(Company.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(Computer.class,allObjects);
  unitOfWork.registerAllObjects(allObjects);
  unitOfWork.commit();
}"
66378,"/** 
 * Call all of the example methods in this system to guarantee that all our objects are registered in the population manager
 */
public void buildExamples(){
  PopulationManager.getDefaultManager().getRegisteredObjects().remove(Person.class);
  PopulationManager.getDefaultManager().registerObject(Person.class,InheritanceModelExamples.personExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Person.class,InheritanceModelExamples.personExample2(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Person.class,InheritanceModelExamples.personExample3(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Person.class,InheritanceModelExamples.personExample4(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Person.class,InheritanceModelExamples.personExample5(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Person.class,InheritanceModelExamples.personExample6(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(AAA.class,InheritanceModelExamples.aaaExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(AAA.class,InheritanceModelExamples.bbbExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(AAA.class,InheritanceModelExamples.cccExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(AAA.class,InheritanceModelExamples.cccExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Company.class,InheritanceModelExamples.companyExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Company.class,InheritanceModelExamples.companyExample2(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Company.class,InheritanceModelExamples.companyExample3(),""String_Node_Str"");
}","/** 
 * Call all of the example methods in this system to guarantee that all our objects are registered in the population manager
 */
public void buildExamples(){
  PopulationManager.getDefaultManager().getRegisteredObjects().remove(Person.class);
  PopulationManager.getDefaultManager().registerObject(Person.class,InheritanceModelExamples.personExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Person.class,InheritanceModelExamples.personExample2(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Person.class,InheritanceModelExamples.personExample3(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Person.class,InheritanceModelExamples.personExample4(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Person.class,InheritanceModelExamples.personExample5(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Person.class,InheritanceModelExamples.personExample6(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(AAA.class,InheritanceModelExamples.aaaExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(AAA.class,InheritanceModelExamples.bbbExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(AAA.class,InheritanceModelExamples.cccExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(AAA.class,InheritanceModelExamples.cccExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Company.class,InheritanceModelExamples.companyExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Company.class,InheritanceModelExamples.companyExample2(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Company.class,InheritanceModelExamples.companyExample3(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Computer.class,InheritanceModelExamples.laptopExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Computer.class,InheritanceModelExamples.laptopExample2(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Computer.class,InheritanceModelExamples.desktopExample1(),""String_Node_Str"");
  PopulationManager.getDefaultManager().registerObject(Computer.class,InheritanceModelExamples.desktopExample2(),""String_Node_Str"");
}"
66379,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLInheritanceTestSuite(""String_Node_Str""));
  return suite;
}"
66380,"public SAXUnmarshaller(XMLUnmarshaller xmlUnmarshaller,Map<String,Boolean> parserFeatures) throws XMLMarshalException {
  super();
  try {
    saxParserFactory=SAXParserFactory.newInstance();
    saxParserFactory.setNamespaceAware(true);
    saxParserFactory.setFeature(""String_Node_Str"",true);
    if (null != parserFeatures) {
      for (      Map.Entry<String,Boolean> parserFeature : parserFeatures.entrySet()) {
        try {
          saxParserFactory.setFeature(parserFeature.getKey(),parserFeature.getValue());
        }
 catch (        org.xml.sax.SAXNotRecognizedException ex) {
        }
catch (        org.xml.sax.SAXNotSupportedException ex) {
        }
      }
    }
    saxParser=saxParserFactory.newSAXParser();
    xmlReader=new XMLReader(saxParser.getXMLReader());
    xmlReader.setErrorHandler(new DefaultErrorHandler());
    xmlParser=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLParser();
    xmlParser.setNamespaceAware(true);
    xmlParser.setValidationMode(XMLParser.NONVALIDATING);
    this.xmlUnmarshaller=xmlUnmarshaller;
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}","public SAXUnmarshaller(XMLUnmarshaller xmlUnmarshaller,Map<String,Boolean> parserFeatures) throws XMLMarshalException {
  super();
  try {
    saxParserFactory=SAXParserFactory.newInstance();
    saxParserFactory.setNamespaceAware(true);
    saxParserFactory.setFeature(""String_Node_Str"",true);
    try {
      saxParserFactory.setFeature(""String_Node_Str"",true);
    }
 catch (    org.xml.sax.SAXNotRecognizedException ex) {
    }
catch (    org.xml.sax.SAXNotSupportedException ex) {
    }
    if (null != parserFeatures) {
      for (      Map.Entry<String,Boolean> parserFeature : parserFeatures.entrySet()) {
        try {
          saxParserFactory.setFeature(parserFeature.getKey(),parserFeature.getValue());
        }
 catch (        org.xml.sax.SAXNotRecognizedException ex) {
        }
catch (        org.xml.sax.SAXNotSupportedException ex) {
        }
      }
    }
    saxParser=saxParserFactory.newSAXParser();
    xmlReader=new XMLReader(saxParser.getXMLReader());
    xmlReader.setErrorHandler(new DefaultErrorHandler());
    xmlParser=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLParser();
    xmlParser.setNamespaceAware(true);
    xmlParser.setValidationMode(XMLParser.NONVALIDATING);
    this.xmlUnmarshaller=xmlUnmarshaller;
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}"
66381,"/** 
 * This method returns a string representing a given java.util.Date based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
public String stringFromDate(java.util.Date sourceDate,QName schemaType){
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendMillis(string,sourceDate.getTime());
    return appendTimeZone(string);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DATE));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setGregorianChange(new Date(Long.MIN_VALUE));
  cal.setTime(sourceDate);
  xgc=getDatatypeFactory().newXMLGregorianCalendar(cal);
  if (!isTimeZoneQualified()) {
    xgc.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  }
  String string=xgc.toXMLFormat();
  return truncateMillis(string);
}","/** 
 * This method returns a string representing a given java.util.Date based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
public String stringFromDate(java.util.Date sourceDate,QName schemaType){
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendMillis(string,sourceDate.getTime());
    return appendTimeZone(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DATE));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setGregorianChange(new Date(Long.MIN_VALUE));
  cal.setTime(sourceDate);
  xgc=getDatatypeFactory().newXMLGregorianCalendar(cal);
  if (!isTimeZoneQualified()) {
    xgc.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  }
  String string=xgc.toXMLFormat();
  return truncateMillis(string);
}"
66382,"private String stringFromSQLDate(java.sql.Date sourceDate,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string);
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLDate(sourceDate);
  }
}","private String stringFromSQLDate(java.sql.Date sourceDate,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceDate);
  }
 else   if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceDate);
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLDate(sourceDate);
  }
}"
66383,"private String stringFromSQLTime(Time sourceTime,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string);
  }
 else   if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLTime(sourceTime);
  }
}","private String stringFromSQLTime(Time sourceTime,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceTime);
  }
 else   if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLTime(sourceTime);
  }
}"
66384,"/** 
 * This method returns a string representing a given Timestamp based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
private String stringFromTimestamp(Timestamp sourceDate,QName schemaType){
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTimeInMillis(sourceDate.getTime());
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendNanos(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setGregorianChange(new Date(Long.MIN_VALUE));
  cal.setTime(sourceDate);
  if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
    xgc.setYear(-cal.get(Calendar.YEAR));
  }
 else {
    xgc.setYear(cal.get(Calendar.YEAR));
  }
  xgc.setMonth(cal.get(Calendar.MONTH) + 1);
  xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
  xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
  xgc.setMinute(cal.get(Calendar.MINUTE));
  xgc.setSecond(cal.get(Calendar.SECOND));
  String string=xgc.toXMLFormat();
  string=appendNanos(string,sourceDate);
  return appendTimeZone(string);
}","/** 
 * This method returns a string representing a given Timestamp based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
private String stringFromTimestamp(Timestamp sourceDate,QName schemaType){
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTimeInMillis(sourceDate.getTime());
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendNanos(string,sourceDate);
    return appendTimeZone(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setGregorianChange(new Date(Long.MIN_VALUE));
  cal.setTime(sourceDate);
  if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
    xgc.setYear(-cal.get(Calendar.YEAR));
  }
 else {
    xgc.setYear(cal.get(Calendar.YEAR));
  }
  xgc.setMonth(cal.get(Calendar.MONTH) + 1);
  xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
  xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
  xgc.setMinute(cal.get(Calendar.MINUTE));
  xgc.setSecond(cal.get(Calendar.SECOND));
  String string=xgc.toXMLFormat();
  string=appendNanos(string,sourceDate);
  return appendTimeZone(string,sourceDate);
}"
66385,"private String appendTimeZone(String string){
  if (!timeZoneQualified) {
    return string;
  }
  StringBuilder stringBuilder=new StringBuilder(string);
  int rawMinuteOffset=getTimeZone().getRawOffset() / 60000;
  if (0 == rawMinuteOffset) {
    stringBuilder.append(GMT_SUFFIX);
    return stringBuilder.toString();
  }
  if (rawMinuteOffset < 0) {
    stringBuilder.append('-');
    rawMinuteOffset=Math.abs(rawMinuteOffset);
  }
 else {
    stringBuilder.append('+');
  }
  int hourOffset=rawMinuteOffset / 60;
  if (hourOffset < 10) {
    stringBuilder.append('0');
  }
  stringBuilder.append(hourOffset);
  stringBuilder.append(XMLConstants.COLON);
  int minuteOffset=rawMinuteOffset % 60;
  if (minuteOffset < 10) {
    stringBuilder.append('0');
  }
  stringBuilder.append(minuteOffset);
  return stringBuilder.toString();
}","private String appendTimeZone(String string,Date date){
  if (!timeZoneQualified) {
    return string;
  }
  StringBuilder stringBuilder=new StringBuilder(string);
  int rawMinuteOffset=getTimeZone().getOffset(date.getTime()) / 60000;
  if (0 == rawMinuteOffset) {
    stringBuilder.append(GMT_SUFFIX);
    return stringBuilder.toString();
  }
  if (rawMinuteOffset < 0) {
    stringBuilder.append('-');
    rawMinuteOffset=Math.abs(rawMinuteOffset);
  }
 else {
    stringBuilder.append('+');
  }
  int hourOffset=rawMinuteOffset / 60;
  if (hourOffset < 10) {
    stringBuilder.append('0');
  }
  stringBuilder.append(hourOffset);
  stringBuilder.append(XMLConstants.COLON);
  int minuteOffset=rawMinuteOffset % 60;
  if (minuteOffset < 10) {
    stringBuilder.append('0');
  }
  stringBuilder.append(minuteOffset);
  return stringBuilder.toString();
}"
66386,"public boolean addXsiTypeAndClassIndicatorIfRequired(XMLRecord record,XMLDescriptor xmlDescriptor,XMLDescriptor referenceDescriptor,XMLField xmlField,boolean addToNamespaceResolver){
  boolean xsiTypeIndicatorField=false;
  if (xmlDescriptor.hasInheritance()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null) {
      if (indicatorField.getLastXPathFragment().getNamespaceURI() != null && indicatorField.getLastXPathFragment().getNamespaceURI().equals(XMLConstants.SCHEMA_INSTANCE_URL) && indicatorField.getLastXPathFragment().getLocalName().equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE)) {
        xsiTypeIndicatorField=true;
      }
      if (!xsiTypeIndicatorField) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
      }
    }
  }
  if (referenceDescriptor != null && referenceDescriptor == xmlDescriptor) {
    return false;
  }
  QName leafType=null;
  if (xmlField != null) {
    leafType=xmlField.getLeafElementType();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (xmlRef != null) {
      String typeValue=getTypeValueToWrite(record,xmlRef,addToNamespaceResolver);
      if (leafType == null && referenceDescriptor == null) {
        writeXsiTypeAttribute(xmlDescriptor,record,typeValue,addToNamespaceResolver);
        return true;
      }
      if ((xmlRef.getType() == XMLSchemaReference.COMPLEX_TYPE) && xmlRef.isGlobalDefinition()) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (leafType != null) {
          if (!ctxQName.equals(leafType)) {
            writeXsiTypeAttribute(xmlDescriptor,record,typeValue,addToNamespaceResolver);
            return true;
          }
        }
      }
    }
  }
  if (xmlDescriptor.hasInheritance() && !xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null && xsiTypeIndicatorField) {
      String classIndicatorValue=(String)xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
      int nsindex=classIndicatorValue.indexOf(XMLConstants.COLON);
      String localName=null;
      String prefix=null;
      if (nsindex != -1) {
        localName=classIndicatorValue.substring(nsindex + 1);
        prefix=classIndicatorValue.substring(0,nsindex);
      }
 else {
        localName=classIndicatorValue;
      }
      String namespaceURI=xmlDescriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(prefix);
      QName classIndicatorQName=new QName(namespaceURI,localName);
      if (leafType == null || !classIndicatorQName.equals(leafType)) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
        return true;
      }
      return false;
    }
  }
  return false;
}","public boolean addXsiTypeAndClassIndicatorIfRequired(XMLRecord record,XMLDescriptor xmlDescriptor,XMLDescriptor referenceDescriptor,XMLField xmlField,boolean addToNamespaceResolver){
  boolean xsiTypeIndicatorField=false;
  if (xmlDescriptor.hasInheritance()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null) {
      if (indicatorField.getLastXPathFragment().getNamespaceURI() != null && indicatorField.getLastXPathFragment().getNamespaceURI().equals(XMLConstants.SCHEMA_INSTANCE_URL) && indicatorField.getLastXPathFragment().getLocalName().equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE)) {
        xsiTypeIndicatorField=true;
      }
      if (!xsiTypeIndicatorField) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
      }
    }
  }
  QName leafType=null;
  if (xmlField != null) {
    leafType=xmlField.getLeafElementType();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (xmlRef != null) {
      String typeValue=getTypeValueToWrite(record,xmlRef,addToNamespaceResolver);
      if (leafType == null && referenceDescriptor == null) {
        writeXsiTypeAttribute(xmlDescriptor,record,typeValue,addToNamespaceResolver);
        return true;
      }
      if ((xmlRef.getType() == XMLSchemaReference.COMPLEX_TYPE) && xmlRef.isGlobalDefinition()) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (leafType != null) {
          if (!ctxQName.equals(leafType)) {
            writeXsiTypeAttribute(xmlDescriptor,record,typeValue,addToNamespaceResolver);
            return true;
          }
        }
      }
    }
  }
  if (referenceDescriptor != null && referenceDescriptor == xmlDescriptor) {
    return false;
  }
  if (xmlDescriptor.hasInheritance() && !xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null && xsiTypeIndicatorField) {
      String classIndicatorValue=(String)xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
      int nsindex=classIndicatorValue.indexOf(XMLConstants.COLON);
      String localName=null;
      String prefix=null;
      if (nsindex != -1) {
        localName=classIndicatorValue.substring(nsindex + 1);
        prefix=classIndicatorValue.substring(0,nsindex);
      }
 else {
        localName=classIndicatorValue;
      }
      String namespaceURI=xmlDescriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(prefix);
      QName classIndicatorQName=new QName(namespaceURI,localName);
      if (leafType == null || !classIndicatorQName.equals(leafType)) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
        return true;
      }
      return false;
    }
  }
  return false;
}"
66387,"protected ClassDescriptor buildObjectRelationalDataTypeDescriptorDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(ObjectRelationalDataTypeDescriptor.class);
  descriptor.getInheritancePolicy().setParentClass(RelationalDescriptor.class);
  XMLDirectMapping structureMapping=new XMLDirectMapping();
  structureMapping.setAttributeName(""String_Node_Str"");
  structureMapping.setGetMethodName(""String_Node_Str"");
  structureMapping.setSetMethodName(""String_Node_Str"");
  structureMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(structureMapping);
  XMLCompositeCollectionMapping orderedFieldsMapping=new XMLCompositeCollectionMapping();
  orderedFieldsMapping.useCollectionClass(NonSynchronizedVector.class);
  orderedFieldsMapping.setAttributeName(""String_Node_Str"");
  orderedFieldsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  orderedFieldsMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(orderedFieldsMapping);
  return descriptor;
}","protected ClassDescriptor buildObjectRelationalDataTypeDescriptorDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(ObjectRelationalDataTypeDescriptor.class);
  descriptor.getInheritancePolicy().setParentClass(RelationalDescriptor.class);
  XMLDirectMapping structureMapping=new XMLDirectMapping();
  structureMapping.setAttributeName(""String_Node_Str"");
  structureMapping.setGetMethodName(""String_Node_Str"");
  structureMapping.setSetMethodName(""String_Node_Str"");
  structureMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(structureMapping);
  XMLCompositeCollectionMapping orderedFieldsMapping=new XMLCompositeCollectionMapping();
  orderedFieldsMapping.useCollectionClass(NonSynchronizedVector.class);
  orderedFieldsMapping.setAttributeName(""String_Node_Str"");
  orderedFieldsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  orderedFieldsMapping.setReferenceClass(DatabaseField.class);
  ((XMLField)orderedFieldsMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(orderedFieldsMapping);
  return descriptor;
}"
66388,"protected ClassDescriptor buildAbstractCompositeDirectCollectionMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(AbstractCompositeDirectCollectionMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fieldMapping);
  XMLCompositeObjectMapping valueConverterMapping=new XMLCompositeObjectMapping();
  valueConverterMapping.setAttributeName(""String_Node_Str"");
  valueConverterMapping.setGetMethodName(""String_Node_Str"");
  valueConverterMapping.setSetMethodName(""String_Node_Str"");
  valueConverterMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  valueConverterMapping.setReferenceClass(Converter.class);
  descriptor.addMapping(valueConverterMapping);
  XMLCompositeObjectMapping containerPolicyMapping=new XMLCompositeObjectMapping();
  containerPolicyMapping.setAttributeName(""String_Node_Str"");
  containerPolicyMapping.setGetMethodName(""String_Node_Str"");
  containerPolicyMapping.setSetMethodName(""String_Node_Str"");
  containerPolicyMapping.setReferenceClass(ContainerPolicy.class);
  containerPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(containerPolicyMapping);
  return descriptor;
}","protected ClassDescriptor buildAbstractCompositeDirectCollectionMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(AbstractCompositeDirectCollectionMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)fieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldMapping);
  XMLCompositeObjectMapping valueConverterMapping=new XMLCompositeObjectMapping();
  valueConverterMapping.setAttributeName(""String_Node_Str"");
  valueConverterMapping.setGetMethodName(""String_Node_Str"");
  valueConverterMapping.setSetMethodName(""String_Node_Str"");
  valueConverterMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  valueConverterMapping.setReferenceClass(Converter.class);
  descriptor.addMapping(valueConverterMapping);
  XMLCompositeObjectMapping containerPolicyMapping=new XMLCompositeObjectMapping();
  containerPolicyMapping.setAttributeName(""String_Node_Str"");
  containerPolicyMapping.setGetMethodName(""String_Node_Str"");
  containerPolicyMapping.setSetMethodName(""String_Node_Str"");
  containerPolicyMapping.setReferenceClass(ContainerPolicy.class);
  containerPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(containerPolicyMapping);
  return descriptor;
}"
66389,"protected ClassDescriptor buildVariableOneToOneMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(VariableOneToOneMapping.class);
  descriptor.getInheritancePolicy().setParentClass(ObjectReferenceMapping.class);
  XMLDirectMapping relationshipPartnerAttributeNameMapping=new XMLDirectMapping();
  relationshipPartnerAttributeNameMapping.setAttributeName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setGetMethodName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setSetMethodName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(relationshipPartnerAttributeNameMapping);
  XMLDirectMapping usesBatchReadingMapping=new XMLDirectMapping();
  usesBatchReadingMapping.setAttributeName(""String_Node_Str"");
  usesBatchReadingMapping.setGetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setSetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesBatchReadingMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesBatchReadingMapping);
  XMLCompositeObjectMapping indirectionPolicyMapping=new XMLCompositeObjectMapping();
  indirectionPolicyMapping.setReferenceClass(IndirectionPolicy.class);
  indirectionPolicyMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      IndirectionPolicy policy=((ForeignReferenceMapping)object).getIndirectionPolicy();
      if (policy instanceof NoIndirectionPolicy) {
        return null;
      }
      return policy;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      IndirectionPolicy policy=(IndirectionPolicy)value;
      if (value == null) {
        policy=new NoIndirectionPolicy();
      }
      ((ForeignReferenceMapping)object).setIndirectionPolicy(policy);
    }
  }
);
  indirectionPolicyMapping.setAttributeName(""String_Node_Str"");
  indirectionPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(indirectionPolicyMapping);
  XMLCompositeObjectMapping selectionQueryMapping=new XMLCompositeObjectMapping();
  selectionQueryMapping.setAttributeName(""String_Node_Str"");
  selectionQueryMapping.setGetMethodName(""String_Node_Str"");
  selectionQueryMapping.setSetMethodName(""String_Node_Str"");
  selectionQueryMapping.setReferenceClass(ReadQuery.class);
  selectionQueryMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(selectionQueryMapping);
  XMLCompositeObjectMapping typeFieldMapping=new XMLCompositeObjectMapping();
  typeFieldMapping.setAttributeName(""String_Node_Str"");
  typeFieldMapping.setGetMethodName(""String_Node_Str"");
  typeFieldMapping.setSetMethodName(""String_Node_Str"");
  typeFieldMapping.setReferenceClass(DatabaseField.class);
  typeFieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(typeFieldMapping);
  XMLCompositeCollectionMapping foreignKeyFieldsMapping=new XMLCompositeCollectionMapping();
  foreignKeyFieldsMapping.useCollectionClass(NonSynchronizedVector.class);
  foreignKeyFieldsMapping.setAttributeName(""String_Node_Str"");
  foreignKeyFieldsMapping.setGetMethodName(""String_Node_Str"");
  foreignKeyFieldsMapping.setSetMethodName(""String_Node_Str"");
  foreignKeyFieldsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  foreignKeyFieldsMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(foreignKeyFieldsMapping);
  XMLCompositeCollectionMapping sourceFieldToTargetQueryKeyMapping=new XMLCompositeCollectionMapping();
  sourceFieldToTargetQueryKeyMapping.setAttributeName(""String_Node_Str"");
  sourceFieldToTargetQueryKeyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  sourceFieldToTargetQueryKeyMapping.setGetMethodName(""String_Node_Str"");
  sourceFieldToTargetQueryKeyMapping.setSetMethodName(""String_Node_Str"");
  sourceFieldToTargetQueryKeyMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      VariableOneToOneMapping mapping=(VariableOneToOneMapping)object;
      Vector associations=mapping.getSourceToTargetQueryKeyFieldAssociations();
      Vector queryKeyReferences=new Vector(associations.size());
      for (int index=0; index < associations.size(); index++) {
        Association association=(Association)associations.get(index);
        QueryKeyReference reference=new QueryKeyReference();
        reference.setKey(new DatabaseField((String)association.getKey()));
        reference.setValue(association.getValue());
        queryKeyReferences.add(reference);
      }
      return queryKeyReferences;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      VariableOneToOneMapping mapping=(VariableOneToOneMapping)object;
      Vector associations=(Vector)value;
      for (int index=0; index < associations.size(); index++) {
        Association association=(Association)associations.get(index);
        association.setKey(((DatabaseField)association.getKey()).getQualifiedName());
      }
      mapping.setSourceToTargetQueryKeyFieldAssociations(associations);
    }
  }
);
  sourceFieldToTargetQueryKeyMapping.setReferenceClass(QueryKeyReference.class);
  descriptor.addMapping(sourceFieldToTargetQueryKeyMapping);
  XMLCompositeCollectionMapping classIndicatorsMapping=new XMLCompositeCollectionMapping();
  classIndicatorsMapping.setAttributeName(""String_Node_Str"");
  classIndicatorsMapping.setGetMethodName(""String_Node_Str"");
  classIndicatorsMapping.setSetMethodName(""String_Node_Str"");
  classIndicatorsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  classIndicatorsMapping.setReferenceClass(TypedAssociation.class);
  descriptor.addMapping(classIndicatorsMapping);
  return descriptor;
}","protected ClassDescriptor buildVariableOneToOneMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(VariableOneToOneMapping.class);
  descriptor.getInheritancePolicy().setParentClass(ObjectReferenceMapping.class);
  XMLDirectMapping relationshipPartnerAttributeNameMapping=new XMLDirectMapping();
  relationshipPartnerAttributeNameMapping.setAttributeName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setGetMethodName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setSetMethodName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(relationshipPartnerAttributeNameMapping);
  XMLDirectMapping usesBatchReadingMapping=new XMLDirectMapping();
  usesBatchReadingMapping.setAttributeName(""String_Node_Str"");
  usesBatchReadingMapping.setGetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setSetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesBatchReadingMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesBatchReadingMapping);
  XMLCompositeObjectMapping indirectionPolicyMapping=new XMLCompositeObjectMapping();
  indirectionPolicyMapping.setReferenceClass(IndirectionPolicy.class);
  indirectionPolicyMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      IndirectionPolicy policy=((ForeignReferenceMapping)object).getIndirectionPolicy();
      if (policy instanceof NoIndirectionPolicy) {
        return null;
      }
      return policy;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      IndirectionPolicy policy=(IndirectionPolicy)value;
      if (value == null) {
        policy=new NoIndirectionPolicy();
      }
      ((ForeignReferenceMapping)object).setIndirectionPolicy(policy);
    }
  }
);
  indirectionPolicyMapping.setAttributeName(""String_Node_Str"");
  indirectionPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(indirectionPolicyMapping);
  XMLCompositeObjectMapping selectionQueryMapping=new XMLCompositeObjectMapping();
  selectionQueryMapping.setAttributeName(""String_Node_Str"");
  selectionQueryMapping.setGetMethodName(""String_Node_Str"");
  selectionQueryMapping.setSetMethodName(""String_Node_Str"");
  selectionQueryMapping.setReferenceClass(ReadQuery.class);
  selectionQueryMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(selectionQueryMapping);
  XMLCompositeObjectMapping typeFieldMapping=new XMLCompositeObjectMapping();
  typeFieldMapping.setAttributeName(""String_Node_Str"");
  typeFieldMapping.setGetMethodName(""String_Node_Str"");
  typeFieldMapping.setSetMethodName(""String_Node_Str"");
  typeFieldMapping.setReferenceClass(DatabaseField.class);
  typeFieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)typeFieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(typeFieldMapping);
  XMLCompositeCollectionMapping foreignKeyFieldsMapping=new XMLCompositeCollectionMapping();
  foreignKeyFieldsMapping.useCollectionClass(NonSynchronizedVector.class);
  foreignKeyFieldsMapping.setAttributeName(""String_Node_Str"");
  foreignKeyFieldsMapping.setGetMethodName(""String_Node_Str"");
  foreignKeyFieldsMapping.setSetMethodName(""String_Node_Str"");
  foreignKeyFieldsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  foreignKeyFieldsMapping.setReferenceClass(DatabaseField.class);
  ((XMLField)foreignKeyFieldsMapping.getField()).setLeafElementType(new QName(getSecondaryNamespace(),""String_Node_Str""));
  descriptor.addMapping(foreignKeyFieldsMapping);
  XMLCompositeCollectionMapping sourceFieldToTargetQueryKeyMapping=new XMLCompositeCollectionMapping();
  sourceFieldToTargetQueryKeyMapping.setAttributeName(""String_Node_Str"");
  sourceFieldToTargetQueryKeyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  sourceFieldToTargetQueryKeyMapping.setGetMethodName(""String_Node_Str"");
  sourceFieldToTargetQueryKeyMapping.setSetMethodName(""String_Node_Str"");
  sourceFieldToTargetQueryKeyMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      VariableOneToOneMapping mapping=(VariableOneToOneMapping)object;
      Vector associations=mapping.getSourceToTargetQueryKeyFieldAssociations();
      Vector queryKeyReferences=new Vector(associations.size());
      for (int index=0; index < associations.size(); index++) {
        Association association=(Association)associations.get(index);
        QueryKeyReference reference=new QueryKeyReference();
        reference.setKey(new DatabaseField((String)association.getKey()));
        reference.setValue(association.getValue());
        queryKeyReferences.add(reference);
      }
      return queryKeyReferences;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      VariableOneToOneMapping mapping=(VariableOneToOneMapping)object;
      Vector associations=(Vector)value;
      for (int index=0; index < associations.size(); index++) {
        Association association=(Association)associations.get(index);
        association.setKey(((DatabaseField)association.getKey()).getQualifiedName());
      }
      mapping.setSourceToTargetQueryKeyFieldAssociations(associations);
    }
  }
);
  sourceFieldToTargetQueryKeyMapping.setReferenceClass(QueryKeyReference.class);
  descriptor.addMapping(sourceFieldToTargetQueryKeyMapping);
  XMLCompositeCollectionMapping classIndicatorsMapping=new XMLCompositeCollectionMapping();
  classIndicatorsMapping.setAttributeName(""String_Node_Str"");
  classIndicatorsMapping.setGetMethodName(""String_Node_Str"");
  classIndicatorsMapping.setSetMethodName(""String_Node_Str"");
  classIndicatorsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  classIndicatorsMapping.setReferenceClass(TypedAssociation.class);
  descriptor.addMapping(classIndicatorsMapping);
  return descriptor;
}"
66390,"protected ClassDescriptor buildAbstractCompositeCollectionMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(AbstractCompositeCollectionMapping.class);
  descriptor.getInheritancePolicy().setParentClass(AggregateMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fieldMapping);
  XMLCompositeObjectMapping containerPolicyMapping=new XMLCompositeObjectMapping();
  containerPolicyMapping.setAttributeName(""String_Node_Str"");
  containerPolicyMapping.setGetMethodName(""String_Node_Str"");
  containerPolicyMapping.setSetMethodName(""String_Node_Str"");
  containerPolicyMapping.setReferenceClass(ContainerPolicy.class);
  containerPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(containerPolicyMapping);
  return descriptor;
}","protected ClassDescriptor buildAbstractCompositeCollectionMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(AbstractCompositeCollectionMapping.class);
  descriptor.getInheritancePolicy().setParentClass(AggregateMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)fieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldMapping);
  XMLCompositeObjectMapping containerPolicyMapping=new XMLCompositeObjectMapping();
  containerPolicyMapping.setAttributeName(""String_Node_Str"");
  containerPolicyMapping.setGetMethodName(""String_Node_Str"");
  containerPolicyMapping.setSetMethodName(""String_Node_Str"");
  containerPolicyMapping.setReferenceClass(ContainerPolicy.class);
  containerPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(containerPolicyMapping);
  return descriptor;
}"
66391,"protected ClassDescriptor buildDirectCollectionMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DirectCollectionMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLDirectMapping usesBatchReadingMapping=new XMLDirectMapping();
  usesBatchReadingMapping.setAttributeName(""String_Node_Str"");
  usesBatchReadingMapping.setGetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setSetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesBatchReadingMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesBatchReadingMapping);
  XMLCompositeObjectMapping containerPolicyMapping=new XMLCompositeObjectMapping();
  containerPolicyMapping.setAttributeName(""String_Node_Str"");
  containerPolicyMapping.setGetMethodName(""String_Node_Str"");
  containerPolicyMapping.setSetMethodName(""String_Node_Str"");
  containerPolicyMapping.setReferenceClass(ContainerPolicy.class);
  containerPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(containerPolicyMapping);
  XMLCompositeObjectMapping indirectionPolicyMapping=new XMLCompositeObjectMapping();
  indirectionPolicyMapping.setReferenceClass(IndirectionPolicy.class);
  indirectionPolicyMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      IndirectionPolicy policy=((ForeignReferenceMapping)object).getIndirectionPolicy();
      if (policy instanceof NoIndirectionPolicy) {
        return null;
      }
      return policy;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      IndirectionPolicy policy=(IndirectionPolicy)value;
      if (value == null) {
        policy=new NoIndirectionPolicy();
      }
      ((ForeignReferenceMapping)object).setIndirectionPolicy(policy);
    }
  }
);
  indirectionPolicyMapping.setAttributeName(""String_Node_Str"");
  indirectionPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(indirectionPolicyMapping);
  XMLCompositeObjectMapping selectionQueryMapping=new XMLCompositeObjectMapping();
  selectionQueryMapping.setAttributeName(""String_Node_Str"");
  selectionQueryMapping.setGetMethodName(""String_Node_Str"");
  selectionQueryMapping.setSetMethodName(""String_Node_Str"");
  selectionQueryMapping.setReferenceClass(ReadQuery.class);
  selectionQueryMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(selectionQueryMapping);
  XMLDirectMapping referenceTableMapping=new XMLDirectMapping();
  referenceTableMapping.setAttributeName(""String_Node_Str"");
  referenceTableMapping.setGetMethodName(""String_Node_Str"");
  referenceTableMapping.setSetMethodName(""String_Node_Str"");
  referenceTableMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(referenceTableMapping);
  XMLCompositeObjectMapping directFieldMapping=new XMLCompositeObjectMapping();
  directFieldMapping.setAttributeName(""String_Node_Str"");
  directFieldMapping.setGetMethodName(""String_Node_Str"");
  directFieldMapping.setSetMethodName(""String_Node_Str"");
  directFieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  directFieldMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(directFieldMapping);
  XMLCompositeCollectionMapping sourceToReferenceKeyFieldAssociationsMapping=new XMLCompositeCollectionMapping();
  sourceToReferenceKeyFieldAssociationsMapping.setReferenceClass(Association.class);
  sourceToReferenceKeyFieldAssociationsMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      List sourceFields=((DirectCollectionMapping)object).getSourceKeyFields();
      List referenceFields=((DirectCollectionMapping)object).getReferenceKeyFields();
      List associations=new ArrayList(sourceFields.size());
      for (int index=0; index < sourceFields.size(); index++) {
        associations.add(new Association(referenceFields.get(index),sourceFields.get(index)));
      }
      return associations;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      DirectCollectionMapping mapping=(DirectCollectionMapping)object;
      List associations=(List)value;
      mapping.setSourceKeyFields(NonSynchronizedVector.newInstance(associations.size()));
      mapping.setReferenceKeyFields(NonSynchronizedVector.newInstance(associations.size()));
      Iterator iterator=associations.iterator();
      while (iterator.hasNext()) {
        Association association=(Association)iterator.next();
        mapping.getSourceKeyFields().add((DatabaseField)association.getValue());
        mapping.getReferenceKeyFields().add((DatabaseField)association.getKey());
      }
    }
  }
);
  sourceToReferenceKeyFieldAssociationsMapping.setAttributeName(""String_Node_Str"");
  sourceToReferenceKeyFieldAssociationsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sourceToReferenceKeyFieldAssociationsMapping);
  XMLCompositeObjectMapping valueConverterMapping=new XMLCompositeObjectMapping();
  valueConverterMapping.setAttributeName(""String_Node_Str"");
  valueConverterMapping.setGetMethodName(""String_Node_Str"");
  valueConverterMapping.setSetMethodName(""String_Node_Str"");
  valueConverterMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  valueConverterMapping.setReferenceClass(Converter.class);
  descriptor.addMapping(valueConverterMapping);
  XMLCompositeObjectMapping historyPolicyMapping=new XMLCompositeObjectMapping();
  historyPolicyMapping.setAttributeName(""String_Node_Str"");
  historyPolicyMapping.setGetMethodName(""String_Node_Str"");
  historyPolicyMapping.setSetMethodName(""String_Node_Str"");
  historyPolicyMapping.setReferenceClass(HistoryPolicy.class);
  historyPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(historyPolicyMapping);
  return descriptor;
}","protected ClassDescriptor buildDirectCollectionMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DirectCollectionMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLDirectMapping usesBatchReadingMapping=new XMLDirectMapping();
  usesBatchReadingMapping.setAttributeName(""String_Node_Str"");
  usesBatchReadingMapping.setGetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setSetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesBatchReadingMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesBatchReadingMapping);
  XMLCompositeObjectMapping containerPolicyMapping=new XMLCompositeObjectMapping();
  containerPolicyMapping.setAttributeName(""String_Node_Str"");
  containerPolicyMapping.setGetMethodName(""String_Node_Str"");
  containerPolicyMapping.setSetMethodName(""String_Node_Str"");
  containerPolicyMapping.setReferenceClass(ContainerPolicy.class);
  containerPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(containerPolicyMapping);
  XMLCompositeObjectMapping indirectionPolicyMapping=new XMLCompositeObjectMapping();
  indirectionPolicyMapping.setReferenceClass(IndirectionPolicy.class);
  indirectionPolicyMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      IndirectionPolicy policy=((ForeignReferenceMapping)object).getIndirectionPolicy();
      if (policy instanceof NoIndirectionPolicy) {
        return null;
      }
      return policy;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      IndirectionPolicy policy=(IndirectionPolicy)value;
      if (value == null) {
        policy=new NoIndirectionPolicy();
      }
      ((ForeignReferenceMapping)object).setIndirectionPolicy(policy);
    }
  }
);
  indirectionPolicyMapping.setAttributeName(""String_Node_Str"");
  indirectionPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(indirectionPolicyMapping);
  XMLCompositeObjectMapping selectionQueryMapping=new XMLCompositeObjectMapping();
  selectionQueryMapping.setAttributeName(""String_Node_Str"");
  selectionQueryMapping.setGetMethodName(""String_Node_Str"");
  selectionQueryMapping.setSetMethodName(""String_Node_Str"");
  selectionQueryMapping.setReferenceClass(ReadQuery.class);
  selectionQueryMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(selectionQueryMapping);
  XMLDirectMapping referenceTableMapping=new XMLDirectMapping();
  referenceTableMapping.setAttributeName(""String_Node_Str"");
  referenceTableMapping.setGetMethodName(""String_Node_Str"");
  referenceTableMapping.setSetMethodName(""String_Node_Str"");
  referenceTableMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(referenceTableMapping);
  XMLCompositeObjectMapping directFieldMapping=new XMLCompositeObjectMapping();
  directFieldMapping.setAttributeName(""String_Node_Str"");
  directFieldMapping.setGetMethodName(""String_Node_Str"");
  directFieldMapping.setSetMethodName(""String_Node_Str"");
  directFieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  directFieldMapping.setReferenceClass(DatabaseField.class);
  ((XMLField)directFieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(directFieldMapping);
  XMLCompositeCollectionMapping sourceToReferenceKeyFieldAssociationsMapping=new XMLCompositeCollectionMapping();
  sourceToReferenceKeyFieldAssociationsMapping.setReferenceClass(Association.class);
  sourceToReferenceKeyFieldAssociationsMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      List sourceFields=((DirectCollectionMapping)object).getSourceKeyFields();
      List referenceFields=((DirectCollectionMapping)object).getReferenceKeyFields();
      List associations=new ArrayList(sourceFields.size());
      for (int index=0; index < sourceFields.size(); index++) {
        associations.add(new Association(referenceFields.get(index),sourceFields.get(index)));
      }
      return associations;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      DirectCollectionMapping mapping=(DirectCollectionMapping)object;
      List associations=(List)value;
      mapping.setSourceKeyFields(NonSynchronizedVector.newInstance(associations.size()));
      mapping.setReferenceKeyFields(NonSynchronizedVector.newInstance(associations.size()));
      Iterator iterator=associations.iterator();
      while (iterator.hasNext()) {
        Association association=(Association)iterator.next();
        mapping.getSourceKeyFields().add((DatabaseField)association.getValue());
        mapping.getReferenceKeyFields().add((DatabaseField)association.getKey());
      }
    }
  }
);
  sourceToReferenceKeyFieldAssociationsMapping.setAttributeName(""String_Node_Str"");
  sourceToReferenceKeyFieldAssociationsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sourceToReferenceKeyFieldAssociationsMapping);
  XMLCompositeObjectMapping valueConverterMapping=new XMLCompositeObjectMapping();
  valueConverterMapping.setAttributeName(""String_Node_Str"");
  valueConverterMapping.setGetMethodName(""String_Node_Str"");
  valueConverterMapping.setSetMethodName(""String_Node_Str"");
  valueConverterMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  valueConverterMapping.setReferenceClass(Converter.class);
  descriptor.addMapping(valueConverterMapping);
  XMLCompositeObjectMapping historyPolicyMapping=new XMLCompositeObjectMapping();
  historyPolicyMapping.setAttributeName(""String_Node_Str"");
  historyPolicyMapping.setGetMethodName(""String_Node_Str"");
  historyPolicyMapping.setSetMethodName(""String_Node_Str"");
  historyPolicyMapping.setReferenceClass(HistoryPolicy.class);
  historyPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(historyPolicyMapping);
  return descriptor;
}"
66392,"protected ClassDescriptor buildClassDescriptorDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(ClassDescriptor.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(ClassDescriptor.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(RelationalDescriptor.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(ObjectRelationalDataTypeDescriptor.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(EISDescriptor.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLDescriptor.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(ClassDescriptor.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getEventManager().setPostBuildSelector(""String_Node_Str"");
  XMLDirectMapping javaClassMapping=new XMLDirectMapping();
  javaClassMapping.setAttributeName(""String_Node_Str"");
  javaClassMapping.setGetMethodName(""String_Node_Str"");
  javaClassMapping.setSetMethodName(""String_Node_Str"");
  javaClassMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(javaClassMapping);
  XMLDirectMapping aliasMapping=new XMLDirectMapping();
  aliasMapping.setAttributeName(""String_Node_Str"");
  aliasMapping.setGetMethodName(""String_Node_Str"");
  aliasMapping.setSetMethodName(""String_Node_Str"");
  aliasMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(aliasMapping);
  XMLCompositeCollectionMapping primaryKeyFieldNamesMapping=new XMLCompositeCollectionMapping();
  primaryKeyFieldNamesMapping.setAttributeName(""String_Node_Str"");
  primaryKeyFieldNamesMapping.setReferenceClass(DatabaseField.class);
  primaryKeyFieldNamesMapping.setGetMethodName(""String_Node_Str"");
  primaryKeyFieldNamesMapping.setSetMethodName(""String_Node_Str"");
  primaryKeyFieldNamesMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  primaryKeyFieldNamesMapping.useCollectionClass(ArrayList.class);
  descriptor.addMapping(primaryKeyFieldNamesMapping);
  XMLDirectMapping descriptorIsReadOnlyMapping=new XMLDirectMapping();
  descriptorIsReadOnlyMapping.setAttributeName(""String_Node_Str"");
  descriptorIsReadOnlyMapping.setGetMethodName(""String_Node_Str"");
  descriptorIsReadOnlyMapping.setSetMethodName(""String_Node_Str"");
  descriptorIsReadOnlyMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptorIsReadOnlyMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(descriptorIsReadOnlyMapping);
  XMLCompositeObjectMapping inheritancePolicyMapping=new XMLCompositeObjectMapping();
  inheritancePolicyMapping.setAttributeName(""String_Node_Str"");
  inheritancePolicyMapping.setGetMethodName(""String_Node_Str"");
  inheritancePolicyMapping.setSetMethodName(""String_Node_Str"");
  inheritancePolicyMapping.setReferenceClass(InheritancePolicy.class);
  inheritancePolicyMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(inheritancePolicyMapping);
  XMLCompositeObjectMapping eventManagerMapping=new XMLCompositeObjectMapping();
  eventManagerMapping.setAttributeName(""String_Node_Str"");
  eventManagerMapping.setGetMethodName(""String_Node_Str"");
  eventManagerMapping.setSetMethodName(""String_Node_Str"");
  eventManagerMapping.setReferenceClass(DescriptorEventManager.class);
  eventManagerMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(eventManagerMapping);
  XMLCompositeObjectMapping queryManagerMapping=new XMLCompositeObjectMapping();
  queryManagerMapping.setAttributeName(""String_Node_Str"");
  queryManagerMapping.setGetMethodName(""String_Node_Str"");
  queryManagerMapping.setSetMethodName(""String_Node_Str"");
  queryManagerMapping.setReferenceClass(DescriptorQueryManager.class);
  queryManagerMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(queryManagerMapping);
  XMLCompositeCollectionMapping aggregateCollectionMapping=new XMLCompositeCollectionMapping();
  aggregateCollectionMapping.useCollectionClass(NonSynchronizedVector.class);
  aggregateCollectionMapping.setAttributeName(""String_Node_Str"");
  aggregateCollectionMapping.setReferenceClass(DatabaseMapping.class);
  aggregateCollectionMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  aggregateCollectionMapping.setSetMethodName(""String_Node_Str"");
  aggregateCollectionMapping.setGetMethodName(""String_Node_Str"");
  descriptor.addMapping(aggregateCollectionMapping);
  XMLDirectMapping descriptorTypeMapping=new XMLDirectMapping();
  descriptorTypeMapping.setAttributeName(""String_Node_Str"");
  descriptorTypeMapping.setGetMethodName(""String_Node_Str"");
  descriptorTypeMapping.setSetMethodName(""String_Node_Str"");
  ObjectTypeConverter descriptorTypeConverter=new ObjectTypeConverter();
  descriptorTypeConverter.addConversionValue(""String_Node_Str"",""String_Node_Str"");
  descriptorTypeConverter.addConversionValue(""String_Node_Str"",""String_Node_Str"");
  descriptorTypeConverter.addConversionValue(""String_Node_Str"",""String_Node_Str"");
  descriptorTypeConverter.addConversionValue(""String_Node_Str"",""String_Node_Str"");
  descriptorTypeConverter.addConversionValue(""String_Node_Str"",""String_Node_Str"");
  descriptorTypeConverter.addConversionValue(""String_Node_Str"",""String_Node_Str"");
  descriptorTypeMapping.setConverter(descriptorTypeConverter);
  descriptorTypeMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(descriptorTypeMapping);
  XMLCompositeObjectMapping interfacePolicyMapping=new XMLCompositeObjectMapping();
  interfacePolicyMapping.setAttributeName(""String_Node_Str"");
  interfacePolicyMapping.setGetMethodName(""String_Node_Str"");
  interfacePolicyMapping.setSetMethodName(""String_Node_Str"");
  interfacePolicyMapping.setReferenceClass(InterfacePolicy.class);
  interfacePolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(interfacePolicyMapping);
  XMLCompositeObjectMapping lockingPolicyMapping=new XMLCompositeObjectMapping();
  lockingPolicyMapping.setAttributeName(""String_Node_Str"");
  lockingPolicyMapping.setGetMethodName(""String_Node_Str"");
  lockingPolicyMapping.setSetMethodName(""String_Node_Str"");
  lockingPolicyMapping.setReferenceClass(VersionLockingPolicy.class);
  lockingPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(lockingPolicyMapping);
  XMLDirectMapping sequenceNameMapping=new XMLDirectMapping();
  sequenceNameMapping.setAttributeName(""String_Node_Str"");
  sequenceNameMapping.setGetMethodName(""String_Node_Str"");
  sequenceNameMapping.setSetMethodName(""String_Node_Str"");
  sequenceNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sequenceNameMapping);
  XMLCompositeObjectMapping sequenceFieldMapping=new XMLCompositeObjectMapping();
  sequenceFieldMapping.setAttributeName(""String_Node_Str"");
  sequenceFieldMapping.setGetMethodName(""String_Node_Str"");
  sequenceFieldMapping.setSetMethodName(""String_Node_Str"");
  sequenceFieldMapping.setReferenceClass(DatabaseField.class);
  sequenceFieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sequenceFieldMapping);
  XMLDirectMapping identityMapClassMapping=new XMLDirectMapping();
  identityMapClassMapping.setAttributeName(""String_Node_Str"");
  identityMapClassMapping.setGetMethodName(""String_Node_Str"");
  identityMapClassMapping.setSetMethodName(""String_Node_Str"");
  ObjectTypeConverter identityMapClassConverter=new ObjectTypeConverter();
  identityMapClassConverter.addConversionValue(""String_Node_Str"",NoIdentityMap.class);
  identityMapClassConverter.addConversionValue(""String_Node_Str"",FullIdentityMap.class);
  identityMapClassConverter.addConversionValue(""String_Node_Str"",CacheIdentityMap.class);
  identityMapClassConverter.addConversionValue(""String_Node_Str"",WeakIdentityMap.class);
  identityMapClassConverter.addConversionValue(""String_Node_Str"",SoftCacheWeakIdentityMap.class);
  identityMapClassConverter.addConversionValue(""String_Node_Str"",HardCacheWeakIdentityMap.class);
  identityMapClassMapping.setConverter(identityMapClassConverter);
  identityMapClassMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  identityMapClassMapping.setNullValue(SoftCacheWeakIdentityMap.class);
  descriptor.addMapping(identityMapClassMapping);
  XMLDirectMapping remoteIdentityMapClassMapping=new XMLDirectMapping();
  remoteIdentityMapClassMapping.setAttributeName(""String_Node_Str"");
  remoteIdentityMapClassMapping.setGetMethodName(""String_Node_Str"");
  remoteIdentityMapClassMapping.setSetMethodName(""String_Node_Str"");
  ObjectTypeConverter remoteIdentityMapClassConverter=new ObjectTypeConverter();
  remoteIdentityMapClassConverter.addConversionValue(""String_Node_Str"",NoIdentityMap.class);
  remoteIdentityMapClassConverter.addConversionValue(""String_Node_Str"",FullIdentityMap.class);
  remoteIdentityMapClassConverter.addConversionValue(""String_Node_Str"",CacheIdentityMap.class);
  remoteIdentityMapClassConverter.addConversionValue(""String_Node_Str"",WeakIdentityMap.class);
  remoteIdentityMapClassConverter.addConversionValue(""String_Node_Str"",SoftCacheWeakIdentityMap.class);
  remoteIdentityMapClassConverter.addConversionValue(""String_Node_Str"",HardCacheWeakIdentityMap.class);
  remoteIdentityMapClassMapping.setConverter(remoteIdentityMapClassConverter);
  remoteIdentityMapClassMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  remoteIdentityMapClassMapping.setNullValue(SoftCacheWeakIdentityMap.class);
  descriptor.addMapping(remoteIdentityMapClassMapping);
  XMLDirectMapping identityMapSizeMapping=new XMLDirectMapping();
  identityMapSizeMapping.setAttributeName(""String_Node_Str"");
  identityMapSizeMapping.setGetMethodName(""String_Node_Str"");
  identityMapSizeMapping.setSetMethodName(""String_Node_Str"");
  identityMapSizeMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  identityMapSizeMapping.setNullValue(Integer.valueOf(100));
  descriptor.addMapping(identityMapSizeMapping);
  XMLDirectMapping remoteIdentityMapSizeMapping=new XMLDirectMapping();
  remoteIdentityMapSizeMapping.setAttributeName(""String_Node_Str"");
  remoteIdentityMapSizeMapping.setGetMethodName(""String_Node_Str"");
  remoteIdentityMapSizeMapping.setSetMethodName(""String_Node_Str"");
  remoteIdentityMapSizeMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  remoteIdentityMapSizeMapping.setNullValue(Integer.valueOf(100));
  descriptor.addMapping(remoteIdentityMapSizeMapping);
  XMLDirectMapping shouldAlwaysRefreshCacheMapping=new XMLDirectMapping();
  shouldAlwaysRefreshCacheMapping.setAttributeName(""String_Node_Str"");
  shouldAlwaysRefreshCacheMapping.setGetMethodName(""String_Node_Str"");
  shouldAlwaysRefreshCacheMapping.setSetMethodName(""String_Node_Str"");
  shouldAlwaysRefreshCacheMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  shouldAlwaysRefreshCacheMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldAlwaysRefreshCacheMapping);
  XMLDirectMapping shouldAlwaysRefreshCacheOnRemoteMapping=new XMLDirectMapping();
  shouldAlwaysRefreshCacheOnRemoteMapping.setAttributeName(""String_Node_Str"");
  shouldAlwaysRefreshCacheOnRemoteMapping.setGetMethodName(""String_Node_Str"");
  shouldAlwaysRefreshCacheOnRemoteMapping.setSetMethodName(""String_Node_Str"");
  shouldAlwaysRefreshCacheOnRemoteMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  shouldAlwaysRefreshCacheOnRemoteMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldAlwaysRefreshCacheOnRemoteMapping);
  XMLDirectMapping shouldOnlyRefreshCacheIfNewerVersionMapping=new XMLDirectMapping();
  shouldOnlyRefreshCacheIfNewerVersionMapping.setAttributeName(""String_Node_Str"");
  shouldOnlyRefreshCacheIfNewerVersionMapping.setGetMethodName(""String_Node_Str"");
  shouldOnlyRefreshCacheIfNewerVersionMapping.setSetMethodName(""String_Node_Str"");
  shouldOnlyRefreshCacheIfNewerVersionMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  shouldOnlyRefreshCacheIfNewerVersionMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldOnlyRefreshCacheIfNewerVersionMapping);
  XMLDirectMapping shouldDisableCacheHitsMapping=new XMLDirectMapping();
  shouldDisableCacheHitsMapping.setAttributeName(""String_Node_Str"");
  shouldDisableCacheHitsMapping.setGetMethodName(""String_Node_Str"");
  shouldDisableCacheHitsMapping.setSetMethodName(""String_Node_Str"");
  shouldDisableCacheHitsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  shouldDisableCacheHitsMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldDisableCacheHitsMapping);
  XMLDirectMapping shouldDisableCacheHitsOnRemoteMapping=new XMLDirectMapping();
  shouldDisableCacheHitsOnRemoteMapping.setAttributeName(""String_Node_Str"");
  shouldDisableCacheHitsOnRemoteMapping.setGetMethodName(""String_Node_Str"");
  shouldDisableCacheHitsOnRemoteMapping.setSetMethodName(""String_Node_Str"");
  shouldDisableCacheHitsOnRemoteMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  shouldDisableCacheHitsOnRemoteMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldDisableCacheHitsOnRemoteMapping);
  XMLDirectMapping shouldAlwaysConformResultsInUnitOfWorkMapping=new XMLDirectMapping();
  shouldAlwaysConformResultsInUnitOfWorkMapping.setAttributeName(""String_Node_Str"");
  shouldAlwaysConformResultsInUnitOfWorkMapping.setGetMethodName(""String_Node_Str"");
  shouldAlwaysConformResultsInUnitOfWorkMapping.setSetMethodName(""String_Node_Str"");
  shouldAlwaysConformResultsInUnitOfWorkMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  shouldAlwaysConformResultsInUnitOfWorkMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldAlwaysConformResultsInUnitOfWorkMapping);
  XMLDirectMapping isIsolatedMapping=new XMLDirectMapping();
  isIsolatedMapping.setAttributeName(""String_Node_Str"");
  isIsolatedMapping.setGetMethodName(""String_Node_Str"");
  isIsolatedMapping.setSetMethodName(""String_Node_Str"");
  isIsolatedMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  isIsolatedMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(isIsolatedMapping);
  XMLDirectMapping unitOfWorkCacheIsolationLevelMapping=new XMLDirectMapping();
  unitOfWorkCacheIsolationLevelMapping.setAttributeName(""String_Node_Str"");
  unitOfWorkCacheIsolationLevelMapping.setGetMethodName(""String_Node_Str"");
  unitOfWorkCacheIsolationLevelMapping.setSetMethodName(""String_Node_Str"");
  unitOfWorkCacheIsolationLevelMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  ObjectTypeConverter unitOfWorkCacheIsolationLevelConverter=new ObjectTypeConverter();
  unitOfWorkCacheIsolationLevelConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.USE_SESSION_CACHE_AFTER_TRANSACTION));
  unitOfWorkCacheIsolationLevelConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.ISOLATE_NEW_DATA_AFTER_TRANSACTION));
  unitOfWorkCacheIsolationLevelConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.ISOLATE_CACHE_AFTER_TRANSACTION));
  unitOfWorkCacheIsolationLevelConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.ISOLATE_CACHE_ALWAYS));
  unitOfWorkCacheIsolationLevelMapping.setConverter(unitOfWorkCacheIsolationLevelConverter);
  unitOfWorkCacheIsolationLevelMapping.setNullValue(Integer.valueOf(ClassDescriptor.ISOLATE_NEW_DATA_AFTER_TRANSACTION));
  descriptor.addMapping(unitOfWorkCacheIsolationLevelMapping);
  XMLCompositeObjectMapping cacheInvalidationPolicyMapping=new XMLCompositeObjectMapping();
  cacheInvalidationPolicyMapping.setAttributeName(""String_Node_Str"");
  cacheInvalidationPolicyMapping.setReferenceClass(CacheInvalidationPolicy.class);
  cacheInvalidationPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(cacheInvalidationPolicyMapping);
  XMLDirectMapping cacheSyncTypeMapping=new XMLDirectMapping();
  cacheSyncTypeMapping.setAttributeName(""String_Node_Str"");
  cacheSyncTypeMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  ObjectTypeConverter cacheSyncTypeConverter=new ObjectTypeConverter();
  cacheSyncTypeConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.INVALIDATE_CHANGED_OBJECTS));
  cacheSyncTypeConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.DO_NOT_SEND_CHANGES));
  cacheSyncTypeConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.SEND_NEW_OBJECTS_WITH_CHANGES));
  cacheSyncTypeConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.SEND_OBJECT_CHANGES));
  cacheSyncTypeMapping.setConverter(cacheSyncTypeConverter);
  cacheSyncTypeMapping.setNullValue(Integer.valueOf(ClassDescriptor.SEND_OBJECT_CHANGES));
  descriptor.addMapping(cacheSyncTypeMapping);
  XMLCompositeObjectMapping historyPolicyMapping=new XMLCompositeObjectMapping();
  historyPolicyMapping.setAttributeName(""String_Node_Str"");
  historyPolicyMapping.setGetMethodName(""String_Node_Str"");
  historyPolicyMapping.setSetMethodName(""String_Node_Str"");
  historyPolicyMapping.setReferenceClass(HistoryPolicy.class);
  historyPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(historyPolicyMapping);
  XMLCompositeObjectMapping returningPolicyMapping=new XMLCompositeObjectMapping();
  returningPolicyMapping.setAttributeName(""String_Node_Str"");
  returningPolicyMapping.setGetMethodName(""String_Node_Str"");
  returningPolicyMapping.setSetMethodName(""String_Node_Str"");
  returningPolicyMapping.setReferenceClass(ReturningPolicy.class);
  returningPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(returningPolicyMapping);
  XMLDirectMapping amendmentClassMapping=new XMLDirectMapping();
  amendmentClassMapping.setAttributeName(""String_Node_Str"");
  amendmentClassMapping.setGetMethodName(""String_Node_Str"");
  amendmentClassMapping.setSetMethodName(""String_Node_Str"");
  amendmentClassMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(amendmentClassMapping);
  XMLDirectMapping amendmentMethodNameMapping=new XMLDirectMapping();
  amendmentMethodNameMapping.setAttributeName(""String_Node_Str"");
  amendmentMethodNameMapping.setGetMethodName(""String_Node_Str"");
  amendmentMethodNameMapping.setSetMethodName(""String_Node_Str"");
  amendmentMethodNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(amendmentMethodNameMapping);
  XMLCompositeObjectMapping instantiationPolicyMapping=new XMLCompositeObjectMapping();
  instantiationPolicyMapping.setAttributeName(""String_Node_Str"");
  instantiationPolicyMapping.setGetMethodName(""String_Node_Str"");
  instantiationPolicyMapping.setSetMethodName(""String_Node_Str"");
  instantiationPolicyMapping.setReferenceClass(InstantiationPolicy.class);
  instantiationPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(instantiationPolicyMapping);
  XMLCompositeObjectMapping copyPolicyMapping=new XMLCompositeObjectMapping();
  copyPolicyMapping.setAttributeName(""String_Node_Str"");
  copyPolicyMapping.setGetMethodName(""String_Node_Str"");
  copyPolicyMapping.setSetMethodName(""String_Node_Str"");
  copyPolicyMapping.setReferenceClass(AbstractCopyPolicy.class);
  copyPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(copyPolicyMapping);
  XMLCompositeCollectionMapping queryKeysMapping=new XMLCompositeCollectionMapping();
  queryKeysMapping.setAttributeName(""String_Node_Str"");
  queryKeysMapping.setReferenceClass(QueryKey.class);
  queryKeysMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  queryKeysMapping.setSetMethodName(""String_Node_Str"");
  queryKeysMapping.setGetMethodName(""String_Node_Str"");
  queryKeysMapping.useMapClass(HashMap.class,""String_Node_Str"");
  descriptor.addMapping(queryKeysMapping);
  XMLCompositeObjectMapping cmpPolicyMapping=new XMLCompositeObjectMapping();
  cmpPolicyMapping.setAttributeName(""String_Node_Str"");
  cmpPolicyMapping.setGetMethodName(""String_Node_Str"");
  cmpPolicyMapping.setSetMethodName(""String_Node_Str"");
  cmpPolicyMapping.setReferenceClass(CMPPolicy.class);
  cmpPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(cmpPolicyMapping);
  XMLCompositeObjectMapping fetchGroupManagerMapping=new XMLCompositeObjectMapping();
  fetchGroupManagerMapping.setAttributeName(""String_Node_Str"");
  fetchGroupManagerMapping.setGetMethodName(""String_Node_Str"");
  fetchGroupManagerMapping.setSetMethodName(""String_Node_Str"");
  fetchGroupManagerMapping.setReferenceClass(FetchGroupManager.class);
  fetchGroupManagerMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fetchGroupManagerMapping);
  XMLCompositeObjectMapping changePolicyMapping=new XMLCompositeObjectMapping();
  changePolicyMapping.setAttributeName(""String_Node_Str"");
  changePolicyMapping.setReferenceClass(ObjectChangePolicy.class);
  changePolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(changePolicyMapping);
  XMLCompositeCollectionMapping propertiesMapping=new XMLCompositeCollectionMapping();
  propertiesMapping.setAttributeName(""String_Node_Str"");
  propertiesMapping.setReferenceClass(PropertyAssociation.class);
  propertiesMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      ClassDescriptor desc=(ClassDescriptor)object;
      Vector propertyAssociations=new NonSynchronizedVector();
      for (Iterator i=desc.getProperties().entrySet().iterator(); i.hasNext(); ) {
        Map.Entry me=(Map.Entry)i.next();
        PropertyAssociation propertyAssociation=new PropertyAssociation();
        propertyAssociation.setKey(me.getKey());
        propertyAssociation.setValue(me.getValue());
        propertyAssociations.add(propertyAssociation);
      }
      return propertyAssociations;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      ClassDescriptor desc=(ClassDescriptor)object;
      Vector propertyAssociations=(Vector)value;
      for (int i=0; i < propertyAssociations.size(); i++) {
        PropertyAssociation propertyAssociation=(PropertyAssociation)propertyAssociations.get(i);
        desc.getProperties().put(propertyAssociation.getKey(),propertyAssociation.getValue());
      }
    }
  }
);
  propertiesMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(propertiesMapping);
  return descriptor;
}","protected ClassDescriptor buildClassDescriptorDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(ClassDescriptor.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(ClassDescriptor.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(RelationalDescriptor.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(ObjectRelationalDataTypeDescriptor.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(EISDescriptor.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLDescriptor.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(ClassDescriptor.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getEventManager().setPostBuildSelector(""String_Node_Str"");
  XMLDirectMapping javaClassMapping=new XMLDirectMapping();
  javaClassMapping.setAttributeName(""String_Node_Str"");
  javaClassMapping.setGetMethodName(""String_Node_Str"");
  javaClassMapping.setSetMethodName(""String_Node_Str"");
  javaClassMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(javaClassMapping);
  XMLDirectMapping aliasMapping=new XMLDirectMapping();
  aliasMapping.setAttributeName(""String_Node_Str"");
  aliasMapping.setGetMethodName(""String_Node_Str"");
  aliasMapping.setSetMethodName(""String_Node_Str"");
  aliasMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(aliasMapping);
  XMLCompositeCollectionMapping primaryKeyFieldNamesMapping=new XMLCompositeCollectionMapping();
  primaryKeyFieldNamesMapping.setAttributeName(""String_Node_Str"");
  primaryKeyFieldNamesMapping.setReferenceClass(DatabaseField.class);
  primaryKeyFieldNamesMapping.setGetMethodName(""String_Node_Str"");
  primaryKeyFieldNamesMapping.setSetMethodName(""String_Node_Str"");
  primaryKeyFieldNamesMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  ((XMLField)primaryKeyFieldNamesMapping.getField()).setLeafElementType(fieldQname);
  primaryKeyFieldNamesMapping.useCollectionClass(ArrayList.class);
  descriptor.addMapping(primaryKeyFieldNamesMapping);
  XMLDirectMapping descriptorIsReadOnlyMapping=new XMLDirectMapping();
  descriptorIsReadOnlyMapping.setAttributeName(""String_Node_Str"");
  descriptorIsReadOnlyMapping.setGetMethodName(""String_Node_Str"");
  descriptorIsReadOnlyMapping.setSetMethodName(""String_Node_Str"");
  descriptorIsReadOnlyMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptorIsReadOnlyMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(descriptorIsReadOnlyMapping);
  XMLCompositeObjectMapping inheritancePolicyMapping=new XMLCompositeObjectMapping();
  inheritancePolicyMapping.setAttributeName(""String_Node_Str"");
  inheritancePolicyMapping.setGetMethodName(""String_Node_Str"");
  inheritancePolicyMapping.setSetMethodName(""String_Node_Str"");
  inheritancePolicyMapping.setReferenceClass(InheritancePolicy.class);
  inheritancePolicyMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(inheritancePolicyMapping);
  XMLCompositeObjectMapping eventManagerMapping=new XMLCompositeObjectMapping();
  eventManagerMapping.setAttributeName(""String_Node_Str"");
  eventManagerMapping.setGetMethodName(""String_Node_Str"");
  eventManagerMapping.setSetMethodName(""String_Node_Str"");
  eventManagerMapping.setReferenceClass(DescriptorEventManager.class);
  eventManagerMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(eventManagerMapping);
  XMLCompositeObjectMapping queryManagerMapping=new XMLCompositeObjectMapping();
  queryManagerMapping.setAttributeName(""String_Node_Str"");
  queryManagerMapping.setGetMethodName(""String_Node_Str"");
  queryManagerMapping.setSetMethodName(""String_Node_Str"");
  queryManagerMapping.setReferenceClass(DescriptorQueryManager.class);
  queryManagerMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(queryManagerMapping);
  XMLCompositeCollectionMapping aggregateCollectionMapping=new XMLCompositeCollectionMapping();
  aggregateCollectionMapping.useCollectionClass(NonSynchronizedVector.class);
  aggregateCollectionMapping.setAttributeName(""String_Node_Str"");
  aggregateCollectionMapping.setReferenceClass(DatabaseMapping.class);
  aggregateCollectionMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  aggregateCollectionMapping.setSetMethodName(""String_Node_Str"");
  aggregateCollectionMapping.setGetMethodName(""String_Node_Str"");
  descriptor.addMapping(aggregateCollectionMapping);
  XMLDirectMapping descriptorTypeMapping=new XMLDirectMapping();
  descriptorTypeMapping.setAttributeName(""String_Node_Str"");
  descriptorTypeMapping.setGetMethodName(""String_Node_Str"");
  descriptorTypeMapping.setSetMethodName(""String_Node_Str"");
  ObjectTypeConverter descriptorTypeConverter=new ObjectTypeConverter();
  descriptorTypeConverter.addConversionValue(""String_Node_Str"",""String_Node_Str"");
  descriptorTypeConverter.addConversionValue(""String_Node_Str"",""String_Node_Str"");
  descriptorTypeConverter.addConversionValue(""String_Node_Str"",""String_Node_Str"");
  descriptorTypeConverter.addConversionValue(""String_Node_Str"",""String_Node_Str"");
  descriptorTypeConverter.addConversionValue(""String_Node_Str"",""String_Node_Str"");
  descriptorTypeConverter.addConversionValue(""String_Node_Str"",""String_Node_Str"");
  descriptorTypeMapping.setConverter(descriptorTypeConverter);
  descriptorTypeMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(descriptorTypeMapping);
  XMLCompositeObjectMapping interfacePolicyMapping=new XMLCompositeObjectMapping();
  interfacePolicyMapping.setAttributeName(""String_Node_Str"");
  interfacePolicyMapping.setGetMethodName(""String_Node_Str"");
  interfacePolicyMapping.setSetMethodName(""String_Node_Str"");
  interfacePolicyMapping.setReferenceClass(InterfacePolicy.class);
  interfacePolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(interfacePolicyMapping);
  XMLCompositeObjectMapping lockingPolicyMapping=new XMLCompositeObjectMapping();
  lockingPolicyMapping.setAttributeName(""String_Node_Str"");
  lockingPolicyMapping.setGetMethodName(""String_Node_Str"");
  lockingPolicyMapping.setSetMethodName(""String_Node_Str"");
  lockingPolicyMapping.setReferenceClass(VersionLockingPolicy.class);
  lockingPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(lockingPolicyMapping);
  XMLDirectMapping sequenceNameMapping=new XMLDirectMapping();
  sequenceNameMapping.setAttributeName(""String_Node_Str"");
  sequenceNameMapping.setGetMethodName(""String_Node_Str"");
  sequenceNameMapping.setSetMethodName(""String_Node_Str"");
  sequenceNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sequenceNameMapping);
  XMLCompositeObjectMapping sequenceFieldMapping=new XMLCompositeObjectMapping();
  sequenceFieldMapping.setAttributeName(""String_Node_Str"");
  sequenceFieldMapping.setGetMethodName(""String_Node_Str"");
  sequenceFieldMapping.setSetMethodName(""String_Node_Str"");
  sequenceFieldMapping.setReferenceClass(DatabaseField.class);
  sequenceFieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sequenceFieldMapping);
  XMLDirectMapping identityMapClassMapping=new XMLDirectMapping();
  identityMapClassMapping.setAttributeName(""String_Node_Str"");
  identityMapClassMapping.setGetMethodName(""String_Node_Str"");
  identityMapClassMapping.setSetMethodName(""String_Node_Str"");
  ObjectTypeConverter identityMapClassConverter=new ObjectTypeConverter();
  identityMapClassConverter.addConversionValue(""String_Node_Str"",NoIdentityMap.class);
  identityMapClassConverter.addConversionValue(""String_Node_Str"",FullIdentityMap.class);
  identityMapClassConverter.addConversionValue(""String_Node_Str"",CacheIdentityMap.class);
  identityMapClassConverter.addConversionValue(""String_Node_Str"",WeakIdentityMap.class);
  identityMapClassConverter.addConversionValue(""String_Node_Str"",SoftCacheWeakIdentityMap.class);
  identityMapClassConverter.addConversionValue(""String_Node_Str"",HardCacheWeakIdentityMap.class);
  identityMapClassMapping.setConverter(identityMapClassConverter);
  identityMapClassMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  identityMapClassMapping.setNullValue(SoftCacheWeakIdentityMap.class);
  descriptor.addMapping(identityMapClassMapping);
  XMLDirectMapping remoteIdentityMapClassMapping=new XMLDirectMapping();
  remoteIdentityMapClassMapping.setAttributeName(""String_Node_Str"");
  remoteIdentityMapClassMapping.setGetMethodName(""String_Node_Str"");
  remoteIdentityMapClassMapping.setSetMethodName(""String_Node_Str"");
  ObjectTypeConverter remoteIdentityMapClassConverter=new ObjectTypeConverter();
  remoteIdentityMapClassConverter.addConversionValue(""String_Node_Str"",NoIdentityMap.class);
  remoteIdentityMapClassConverter.addConversionValue(""String_Node_Str"",FullIdentityMap.class);
  remoteIdentityMapClassConverter.addConversionValue(""String_Node_Str"",CacheIdentityMap.class);
  remoteIdentityMapClassConverter.addConversionValue(""String_Node_Str"",WeakIdentityMap.class);
  remoteIdentityMapClassConverter.addConversionValue(""String_Node_Str"",SoftCacheWeakIdentityMap.class);
  remoteIdentityMapClassConverter.addConversionValue(""String_Node_Str"",HardCacheWeakIdentityMap.class);
  remoteIdentityMapClassMapping.setConverter(remoteIdentityMapClassConverter);
  remoteIdentityMapClassMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  remoteIdentityMapClassMapping.setNullValue(SoftCacheWeakIdentityMap.class);
  descriptor.addMapping(remoteIdentityMapClassMapping);
  XMLDirectMapping identityMapSizeMapping=new XMLDirectMapping();
  identityMapSizeMapping.setAttributeName(""String_Node_Str"");
  identityMapSizeMapping.setGetMethodName(""String_Node_Str"");
  identityMapSizeMapping.setSetMethodName(""String_Node_Str"");
  identityMapSizeMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  identityMapSizeMapping.setNullValue(Integer.valueOf(100));
  descriptor.addMapping(identityMapSizeMapping);
  XMLDirectMapping remoteIdentityMapSizeMapping=new XMLDirectMapping();
  remoteIdentityMapSizeMapping.setAttributeName(""String_Node_Str"");
  remoteIdentityMapSizeMapping.setGetMethodName(""String_Node_Str"");
  remoteIdentityMapSizeMapping.setSetMethodName(""String_Node_Str"");
  remoteIdentityMapSizeMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  remoteIdentityMapSizeMapping.setNullValue(Integer.valueOf(100));
  descriptor.addMapping(remoteIdentityMapSizeMapping);
  XMLDirectMapping shouldAlwaysRefreshCacheMapping=new XMLDirectMapping();
  shouldAlwaysRefreshCacheMapping.setAttributeName(""String_Node_Str"");
  shouldAlwaysRefreshCacheMapping.setGetMethodName(""String_Node_Str"");
  shouldAlwaysRefreshCacheMapping.setSetMethodName(""String_Node_Str"");
  shouldAlwaysRefreshCacheMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  shouldAlwaysRefreshCacheMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldAlwaysRefreshCacheMapping);
  XMLDirectMapping shouldAlwaysRefreshCacheOnRemoteMapping=new XMLDirectMapping();
  shouldAlwaysRefreshCacheOnRemoteMapping.setAttributeName(""String_Node_Str"");
  shouldAlwaysRefreshCacheOnRemoteMapping.setGetMethodName(""String_Node_Str"");
  shouldAlwaysRefreshCacheOnRemoteMapping.setSetMethodName(""String_Node_Str"");
  shouldAlwaysRefreshCacheOnRemoteMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  shouldAlwaysRefreshCacheOnRemoteMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldAlwaysRefreshCacheOnRemoteMapping);
  XMLDirectMapping shouldOnlyRefreshCacheIfNewerVersionMapping=new XMLDirectMapping();
  shouldOnlyRefreshCacheIfNewerVersionMapping.setAttributeName(""String_Node_Str"");
  shouldOnlyRefreshCacheIfNewerVersionMapping.setGetMethodName(""String_Node_Str"");
  shouldOnlyRefreshCacheIfNewerVersionMapping.setSetMethodName(""String_Node_Str"");
  shouldOnlyRefreshCacheIfNewerVersionMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  shouldOnlyRefreshCacheIfNewerVersionMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldOnlyRefreshCacheIfNewerVersionMapping);
  XMLDirectMapping shouldDisableCacheHitsMapping=new XMLDirectMapping();
  shouldDisableCacheHitsMapping.setAttributeName(""String_Node_Str"");
  shouldDisableCacheHitsMapping.setGetMethodName(""String_Node_Str"");
  shouldDisableCacheHitsMapping.setSetMethodName(""String_Node_Str"");
  shouldDisableCacheHitsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  shouldDisableCacheHitsMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldDisableCacheHitsMapping);
  XMLDirectMapping shouldDisableCacheHitsOnRemoteMapping=new XMLDirectMapping();
  shouldDisableCacheHitsOnRemoteMapping.setAttributeName(""String_Node_Str"");
  shouldDisableCacheHitsOnRemoteMapping.setGetMethodName(""String_Node_Str"");
  shouldDisableCacheHitsOnRemoteMapping.setSetMethodName(""String_Node_Str"");
  shouldDisableCacheHitsOnRemoteMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  shouldDisableCacheHitsOnRemoteMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldDisableCacheHitsOnRemoteMapping);
  XMLDirectMapping shouldAlwaysConformResultsInUnitOfWorkMapping=new XMLDirectMapping();
  shouldAlwaysConformResultsInUnitOfWorkMapping.setAttributeName(""String_Node_Str"");
  shouldAlwaysConformResultsInUnitOfWorkMapping.setGetMethodName(""String_Node_Str"");
  shouldAlwaysConformResultsInUnitOfWorkMapping.setSetMethodName(""String_Node_Str"");
  shouldAlwaysConformResultsInUnitOfWorkMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  shouldAlwaysConformResultsInUnitOfWorkMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldAlwaysConformResultsInUnitOfWorkMapping);
  XMLDirectMapping isIsolatedMapping=new XMLDirectMapping();
  isIsolatedMapping.setAttributeName(""String_Node_Str"");
  isIsolatedMapping.setGetMethodName(""String_Node_Str"");
  isIsolatedMapping.setSetMethodName(""String_Node_Str"");
  isIsolatedMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  isIsolatedMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(isIsolatedMapping);
  XMLDirectMapping unitOfWorkCacheIsolationLevelMapping=new XMLDirectMapping();
  unitOfWorkCacheIsolationLevelMapping.setAttributeName(""String_Node_Str"");
  unitOfWorkCacheIsolationLevelMapping.setGetMethodName(""String_Node_Str"");
  unitOfWorkCacheIsolationLevelMapping.setSetMethodName(""String_Node_Str"");
  unitOfWorkCacheIsolationLevelMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  ObjectTypeConverter unitOfWorkCacheIsolationLevelConverter=new ObjectTypeConverter();
  unitOfWorkCacheIsolationLevelConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.USE_SESSION_CACHE_AFTER_TRANSACTION));
  unitOfWorkCacheIsolationLevelConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.ISOLATE_NEW_DATA_AFTER_TRANSACTION));
  unitOfWorkCacheIsolationLevelConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.ISOLATE_CACHE_AFTER_TRANSACTION));
  unitOfWorkCacheIsolationLevelConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.ISOLATE_CACHE_ALWAYS));
  unitOfWorkCacheIsolationLevelMapping.setConverter(unitOfWorkCacheIsolationLevelConverter);
  unitOfWorkCacheIsolationLevelMapping.setNullValue(Integer.valueOf(ClassDescriptor.ISOLATE_NEW_DATA_AFTER_TRANSACTION));
  descriptor.addMapping(unitOfWorkCacheIsolationLevelMapping);
  XMLCompositeObjectMapping cacheInvalidationPolicyMapping=new XMLCompositeObjectMapping();
  cacheInvalidationPolicyMapping.setAttributeName(""String_Node_Str"");
  cacheInvalidationPolicyMapping.setReferenceClass(CacheInvalidationPolicy.class);
  cacheInvalidationPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(cacheInvalidationPolicyMapping);
  XMLDirectMapping cacheSyncTypeMapping=new XMLDirectMapping();
  cacheSyncTypeMapping.setAttributeName(""String_Node_Str"");
  cacheSyncTypeMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  ObjectTypeConverter cacheSyncTypeConverter=new ObjectTypeConverter();
  cacheSyncTypeConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.INVALIDATE_CHANGED_OBJECTS));
  cacheSyncTypeConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.DO_NOT_SEND_CHANGES));
  cacheSyncTypeConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.SEND_NEW_OBJECTS_WITH_CHANGES));
  cacheSyncTypeConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ClassDescriptor.SEND_OBJECT_CHANGES));
  cacheSyncTypeMapping.setConverter(cacheSyncTypeConverter);
  cacheSyncTypeMapping.setNullValue(Integer.valueOf(ClassDescriptor.SEND_OBJECT_CHANGES));
  descriptor.addMapping(cacheSyncTypeMapping);
  XMLCompositeObjectMapping historyPolicyMapping=new XMLCompositeObjectMapping();
  historyPolicyMapping.setAttributeName(""String_Node_Str"");
  historyPolicyMapping.setGetMethodName(""String_Node_Str"");
  historyPolicyMapping.setSetMethodName(""String_Node_Str"");
  historyPolicyMapping.setReferenceClass(HistoryPolicy.class);
  historyPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(historyPolicyMapping);
  XMLCompositeObjectMapping returningPolicyMapping=new XMLCompositeObjectMapping();
  returningPolicyMapping.setAttributeName(""String_Node_Str"");
  returningPolicyMapping.setGetMethodName(""String_Node_Str"");
  returningPolicyMapping.setSetMethodName(""String_Node_Str"");
  returningPolicyMapping.setReferenceClass(ReturningPolicy.class);
  returningPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(returningPolicyMapping);
  XMLDirectMapping amendmentClassMapping=new XMLDirectMapping();
  amendmentClassMapping.setAttributeName(""String_Node_Str"");
  amendmentClassMapping.setGetMethodName(""String_Node_Str"");
  amendmentClassMapping.setSetMethodName(""String_Node_Str"");
  amendmentClassMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(amendmentClassMapping);
  XMLDirectMapping amendmentMethodNameMapping=new XMLDirectMapping();
  amendmentMethodNameMapping.setAttributeName(""String_Node_Str"");
  amendmentMethodNameMapping.setGetMethodName(""String_Node_Str"");
  amendmentMethodNameMapping.setSetMethodName(""String_Node_Str"");
  amendmentMethodNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(amendmentMethodNameMapping);
  XMLCompositeObjectMapping instantiationPolicyMapping=new XMLCompositeObjectMapping();
  instantiationPolicyMapping.setAttributeName(""String_Node_Str"");
  instantiationPolicyMapping.setGetMethodName(""String_Node_Str"");
  instantiationPolicyMapping.setSetMethodName(""String_Node_Str"");
  instantiationPolicyMapping.setReferenceClass(InstantiationPolicy.class);
  instantiationPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(instantiationPolicyMapping);
  XMLCompositeObjectMapping copyPolicyMapping=new XMLCompositeObjectMapping();
  copyPolicyMapping.setAttributeName(""String_Node_Str"");
  copyPolicyMapping.setGetMethodName(""String_Node_Str"");
  copyPolicyMapping.setSetMethodName(""String_Node_Str"");
  copyPolicyMapping.setReferenceClass(AbstractCopyPolicy.class);
  copyPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(copyPolicyMapping);
  XMLCompositeCollectionMapping queryKeysMapping=new XMLCompositeCollectionMapping();
  queryKeysMapping.setAttributeName(""String_Node_Str"");
  queryKeysMapping.setReferenceClass(QueryKey.class);
  queryKeysMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  queryKeysMapping.setSetMethodName(""String_Node_Str"");
  queryKeysMapping.setGetMethodName(""String_Node_Str"");
  queryKeysMapping.useMapClass(HashMap.class,""String_Node_Str"");
  descriptor.addMapping(queryKeysMapping);
  XMLCompositeObjectMapping cmpPolicyMapping=new XMLCompositeObjectMapping();
  cmpPolicyMapping.setAttributeName(""String_Node_Str"");
  cmpPolicyMapping.setGetMethodName(""String_Node_Str"");
  cmpPolicyMapping.setSetMethodName(""String_Node_Str"");
  cmpPolicyMapping.setReferenceClass(CMPPolicy.class);
  cmpPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(cmpPolicyMapping);
  XMLCompositeObjectMapping fetchGroupManagerMapping=new XMLCompositeObjectMapping();
  fetchGroupManagerMapping.setAttributeName(""String_Node_Str"");
  fetchGroupManagerMapping.setGetMethodName(""String_Node_Str"");
  fetchGroupManagerMapping.setSetMethodName(""String_Node_Str"");
  fetchGroupManagerMapping.setReferenceClass(FetchGroupManager.class);
  fetchGroupManagerMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fetchGroupManagerMapping);
  XMLCompositeObjectMapping changePolicyMapping=new XMLCompositeObjectMapping();
  changePolicyMapping.setAttributeName(""String_Node_Str"");
  changePolicyMapping.setReferenceClass(ObjectChangePolicy.class);
  changePolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(changePolicyMapping);
  XMLCompositeCollectionMapping propertiesMapping=new XMLCompositeCollectionMapping();
  propertiesMapping.setAttributeName(""String_Node_Str"");
  propertiesMapping.setReferenceClass(PropertyAssociation.class);
  propertiesMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      ClassDescriptor desc=(ClassDescriptor)object;
      Vector propertyAssociations=new NonSynchronizedVector();
      for (Iterator i=desc.getProperties().entrySet().iterator(); i.hasNext(); ) {
        Map.Entry me=(Map.Entry)i.next();
        PropertyAssociation propertyAssociation=new PropertyAssociation();
        propertyAssociation.setKey(me.getKey());
        propertyAssociation.setValue(me.getValue());
        propertyAssociations.add(propertyAssociation);
      }
      return propertyAssociations;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      ClassDescriptor desc=(ClassDescriptor)object;
      Vector propertyAssociations=(Vector)value;
      for (int i=0; i < propertyAssociations.size(); i++) {
        PropertyAssociation propertyAssociation=(PropertyAssociation)propertyAssociations.get(i);
        desc.getProperties().put(propertyAssociation.getKey(),propertyAssociation.getValue());
      }
    }
  }
);
  propertiesMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(propertiesMapping);
  return descriptor;
}"
66393,"protected ClassDescriptor buildVersionLockingPolicyDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(VersionLockingPolicy.class);
  descriptor.getInheritancePolicy().setParentClass(OptimisticLockingPolicy.class);
  XMLCompositeObjectMapping versionFieldMapping=new XMLCompositeObjectMapping();
  versionFieldMapping.setAttributeName(""String_Node_Str"");
  versionFieldMapping.setGetMethodName(""String_Node_Str"");
  versionFieldMapping.setSetMethodName(""String_Node_Str"");
  versionFieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  versionFieldMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(versionFieldMapping);
  XMLDirectMapping shouldStoreInCacheMapping=new XMLDirectMapping();
  shouldStoreInCacheMapping.setAttributeName(""String_Node_Str"");
  shouldStoreInCacheMapping.setGetMethodName(""String_Node_Str"");
  shouldStoreInCacheMapping.setSetMethodName(""String_Node_Str"");
  shouldStoreInCacheMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  shouldStoreInCacheMapping.setNullValue(Boolean.TRUE);
  descriptor.addMapping(shouldStoreInCacheMapping);
  return descriptor;
}","protected ClassDescriptor buildVersionLockingPolicyDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(VersionLockingPolicy.class);
  descriptor.getInheritancePolicy().setParentClass(OptimisticLockingPolicy.class);
  XMLCompositeObjectMapping versionFieldMapping=new XMLCompositeObjectMapping();
  versionFieldMapping.setAttributeName(""String_Node_Str"");
  versionFieldMapping.setGetMethodName(""String_Node_Str"");
  versionFieldMapping.setSetMethodName(""String_Node_Str"");
  versionFieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  versionFieldMapping.setReferenceClass(DatabaseField.class);
  ((XMLField)versionFieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(versionFieldMapping);
  XMLDirectMapping shouldStoreInCacheMapping=new XMLDirectMapping();
  shouldStoreInCacheMapping.setAttributeName(""String_Node_Str"");
  shouldStoreInCacheMapping.setGetMethodName(""String_Node_Str"");
  shouldStoreInCacheMapping.setSetMethodName(""String_Node_Str"");
  shouldStoreInCacheMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  shouldStoreInCacheMapping.setNullValue(Boolean.TRUE);
  descriptor.addMapping(shouldStoreInCacheMapping);
  return descriptor;
}"
66394,"protected ClassDescriptor buildDirectMapMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DirectMapMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DirectCollectionMapping.class);
  XMLCompositeObjectMapping directKeyFieldMapping=new XMLCompositeObjectMapping();
  directKeyFieldMapping.setAttributeName(""String_Node_Str"");
  directKeyFieldMapping.setGetMethodName(""String_Node_Str"");
  directKeyFieldMapping.setSetMethodName(""String_Node_Str"");
  directKeyFieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  directKeyFieldMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(directKeyFieldMapping);
  XMLCompositeObjectMapping keyConverterMapping=new XMLCompositeObjectMapping();
  keyConverterMapping.setAttributeName(""String_Node_Str"");
  keyConverterMapping.setGetMethodName(""String_Node_Str"");
  keyConverterMapping.setSetMethodName(""String_Node_Str"");
  keyConverterMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  keyConverterMapping.setReferenceClass(Converter.class);
  descriptor.addMapping(keyConverterMapping);
  return descriptor;
}","protected ClassDescriptor buildDirectMapMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DirectMapMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DirectCollectionMapping.class);
  XMLCompositeObjectMapping directKeyFieldMapping=new XMLCompositeObjectMapping();
  directKeyFieldMapping.setAttributeName(""String_Node_Str"");
  directKeyFieldMapping.setGetMethodName(""String_Node_Str"");
  directKeyFieldMapping.setSetMethodName(""String_Node_Str"");
  directKeyFieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  directKeyFieldMapping.setReferenceClass(DatabaseField.class);
  ((XMLField)directKeyFieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(directKeyFieldMapping);
  XMLCompositeObjectMapping keyConverterMapping=new XMLCompositeObjectMapping();
  keyConverterMapping.setAttributeName(""String_Node_Str"");
  keyConverterMapping.setGetMethodName(""String_Node_Str"");
  keyConverterMapping.setSetMethodName(""String_Node_Str"");
  keyConverterMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  keyConverterMapping.setReferenceClass(Converter.class);
  descriptor.addMapping(keyConverterMapping);
  return descriptor;
}"
66395,"protected ClassDescriptor buildOneToOneMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(OneToOneMapping.class);
  descriptor.getInheritancePolicy().setParentClass(ObjectReferenceMapping.class);
  XMLCompositeCollectionMapping sourceToTargetKeyFieldAssociationsMapping=new XMLCompositeCollectionMapping();
  sourceToTargetKeyFieldAssociationsMapping.setReferenceClass(Association.class);
  sourceToTargetKeyFieldAssociationsMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      Map sourceToTargetKeyFields=((OneToOneMapping)object).getSourceToTargetKeyFields();
      List associations=new ArrayList(sourceToTargetKeyFields.size());
      Iterator iterator=sourceToTargetKeyFields.entrySet().iterator();
      while (iterator.hasNext()) {
        Map.Entry entry=(Map.Entry)iterator.next();
        associations.add(new Association(entry.getKey(),entry.getValue()));
      }
      return associations;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      OneToOneMapping mapping=(OneToOneMapping)object;
      List associations=(List)value;
      mapping.setSourceToTargetKeyFields(new HashMap(associations.size() + 1));
      mapping.setTargetToSourceKeyFields(new HashMap(associations.size() + 1));
      Iterator iterator=associations.iterator();
      while (iterator.hasNext()) {
        Association association=(Association)iterator.next();
        mapping.getSourceToTargetKeyFields().put((DatabaseField)association.getKey(),(DatabaseField)association.getValue());
        mapping.getTargetToSourceKeyFields().put((DatabaseField)association.getValue(),(DatabaseField)association.getKey());
      }
    }
  }
);
  sourceToTargetKeyFieldAssociationsMapping.setAttributeName(""String_Node_Str"");
  sourceToTargetKeyFieldAssociationsMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sourceToTargetKeyFieldAssociationsMapping);
  XMLCompositeCollectionMapping foreignKeyFieldNamesMapping=new XMLCompositeCollectionMapping();
  foreignKeyFieldNamesMapping.useCollectionClass(NonSynchronizedVector.class);
  foreignKeyFieldNamesMapping.setAttributeName(""String_Node_Str"");
  foreignKeyFieldNamesMapping.setGetMethodName(""String_Node_Str"");
  foreignKeyFieldNamesMapping.setSetMethodName(""String_Node_Str"");
  foreignKeyFieldNamesMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  foreignKeyFieldNamesMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(foreignKeyFieldNamesMapping);
  XMLDirectMapping relationshipPartnerAttributeNameMapping=new XMLDirectMapping();
  relationshipPartnerAttributeNameMapping.setAttributeName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setGetMethodName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setSetMethodName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(relationshipPartnerAttributeNameMapping);
  XMLDirectMapping usesBatchReadingMapping=new XMLDirectMapping();
  usesBatchReadingMapping.setAttributeName(""String_Node_Str"");
  usesBatchReadingMapping.setGetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setSetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesBatchReadingMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesBatchReadingMapping);
  XMLDirectMapping joinFetchMapping=new XMLDirectMapping();
  joinFetchMapping.setAttributeName(""String_Node_Str"");
  joinFetchMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ObjectTypeConverter joinFetchConverter=new ObjectTypeConverter();
  joinFetchConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ForeignReferenceMapping.INNER_JOIN));
  joinFetchConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ForeignReferenceMapping.NONE));
  joinFetchMapping.setConverter(joinFetchConverter);
  joinFetchMapping.setNullValue(ForeignReferenceMapping.NONE);
  descriptor.addMapping(joinFetchMapping);
  XMLCompositeObjectMapping indirectionPolicyMapping=new XMLCompositeObjectMapping();
  indirectionPolicyMapping.setReferenceClass(IndirectionPolicy.class);
  indirectionPolicyMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      IndirectionPolicy policy=((ForeignReferenceMapping)object).getIndirectionPolicy();
      if (policy instanceof NoIndirectionPolicy) {
        return null;
      }
      return policy;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      IndirectionPolicy policy=(IndirectionPolicy)value;
      if (value == null) {
        policy=new NoIndirectionPolicy();
      }
      ((ForeignReferenceMapping)object).setIndirectionPolicy(policy);
    }
  }
);
  indirectionPolicyMapping.setAttributeName(""String_Node_Str"");
  indirectionPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(indirectionPolicyMapping);
  XMLCompositeObjectMapping selectionQueryMapping=new XMLCompositeObjectMapping();
  selectionQueryMapping.setAttributeName(""String_Node_Str"");
  selectionQueryMapping.setGetMethodName(""String_Node_Str"");
  selectionQueryMapping.setSetMethodName(""String_Node_Str"");
  selectionQueryMapping.setReferenceClass(ReadQuery.class);
  selectionQueryMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(selectionQueryMapping);
  return descriptor;
}","protected ClassDescriptor buildOneToOneMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(OneToOneMapping.class);
  descriptor.getInheritancePolicy().setParentClass(ObjectReferenceMapping.class);
  XMLCompositeCollectionMapping sourceToTargetKeyFieldAssociationsMapping=new XMLCompositeCollectionMapping();
  sourceToTargetKeyFieldAssociationsMapping.setReferenceClass(Association.class);
  sourceToTargetKeyFieldAssociationsMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      Map sourceToTargetKeyFields=((OneToOneMapping)object).getSourceToTargetKeyFields();
      List associations=new ArrayList(sourceToTargetKeyFields.size());
      Iterator iterator=sourceToTargetKeyFields.entrySet().iterator();
      while (iterator.hasNext()) {
        Map.Entry entry=(Map.Entry)iterator.next();
        associations.add(new Association(entry.getKey(),entry.getValue()));
      }
      return associations;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      OneToOneMapping mapping=(OneToOneMapping)object;
      List associations=(List)value;
      mapping.setSourceToTargetKeyFields(new HashMap(associations.size() + 1));
      mapping.setTargetToSourceKeyFields(new HashMap(associations.size() + 1));
      Iterator iterator=associations.iterator();
      while (iterator.hasNext()) {
        Association association=(Association)iterator.next();
        mapping.getSourceToTargetKeyFields().put((DatabaseField)association.getKey(),(DatabaseField)association.getValue());
        mapping.getTargetToSourceKeyFields().put((DatabaseField)association.getValue(),(DatabaseField)association.getKey());
      }
    }
  }
);
  sourceToTargetKeyFieldAssociationsMapping.setAttributeName(""String_Node_Str"");
  sourceToTargetKeyFieldAssociationsMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sourceToTargetKeyFieldAssociationsMapping);
  XMLCompositeCollectionMapping foreignKeyFieldNamesMapping=new XMLCompositeCollectionMapping();
  foreignKeyFieldNamesMapping.useCollectionClass(NonSynchronizedVector.class);
  foreignKeyFieldNamesMapping.setAttributeName(""String_Node_Str"");
  foreignKeyFieldNamesMapping.setGetMethodName(""String_Node_Str"");
  foreignKeyFieldNamesMapping.setSetMethodName(""String_Node_Str"");
  foreignKeyFieldNamesMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  foreignKeyFieldNamesMapping.setReferenceClass(DatabaseField.class);
  ((XMLField)foreignKeyFieldNamesMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(foreignKeyFieldNamesMapping);
  XMLDirectMapping relationshipPartnerAttributeNameMapping=new XMLDirectMapping();
  relationshipPartnerAttributeNameMapping.setAttributeName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setGetMethodName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setSetMethodName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(relationshipPartnerAttributeNameMapping);
  XMLDirectMapping usesBatchReadingMapping=new XMLDirectMapping();
  usesBatchReadingMapping.setAttributeName(""String_Node_Str"");
  usesBatchReadingMapping.setGetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setSetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesBatchReadingMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesBatchReadingMapping);
  XMLDirectMapping joinFetchMapping=new XMLDirectMapping();
  joinFetchMapping.setAttributeName(""String_Node_Str"");
  joinFetchMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ObjectTypeConverter joinFetchConverter=new ObjectTypeConverter();
  joinFetchConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ForeignReferenceMapping.INNER_JOIN));
  joinFetchConverter.addConversionValue(""String_Node_Str"",Integer.valueOf(ForeignReferenceMapping.NONE));
  joinFetchMapping.setConverter(joinFetchConverter);
  joinFetchMapping.setNullValue(ForeignReferenceMapping.NONE);
  descriptor.addMapping(joinFetchMapping);
  XMLCompositeObjectMapping indirectionPolicyMapping=new XMLCompositeObjectMapping();
  indirectionPolicyMapping.setReferenceClass(IndirectionPolicy.class);
  indirectionPolicyMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      IndirectionPolicy policy=((ForeignReferenceMapping)object).getIndirectionPolicy();
      if (policy instanceof NoIndirectionPolicy) {
        return null;
      }
      return policy;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      IndirectionPolicy policy=(IndirectionPolicy)value;
      if (value == null) {
        policy=new NoIndirectionPolicy();
      }
      ((ForeignReferenceMapping)object).setIndirectionPolicy(policy);
    }
  }
);
  indirectionPolicyMapping.setAttributeName(""String_Node_Str"");
  indirectionPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(indirectionPolicyMapping);
  XMLCompositeObjectMapping selectionQueryMapping=new XMLCompositeObjectMapping();
  selectionQueryMapping.setAttributeName(""String_Node_Str"");
  selectionQueryMapping.setGetMethodName(""String_Node_Str"");
  selectionQueryMapping.setSetMethodName(""String_Node_Str"");
  selectionQueryMapping.setReferenceClass(ReadQuery.class);
  selectionQueryMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(selectionQueryMapping);
  return descriptor;
}"
66396,"protected ClassDescriptor buildAbstractDirectMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(AbstractDirectMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fieldMapping);
  XMLDirectMapping nullValueMapping=new XMLDirectMapping();
  nullValueMapping.setAttributeName(""String_Node_Str"");
  nullValueMapping.setGetMethodName(""String_Node_Str"");
  nullValueMapping.setSetMethodName(""String_Node_Str"");
  nullValueMapping.setField(buildTypedField(getSecondaryNamespaceXPath() + ""String_Node_Str""));
  descriptor.addMapping(nullValueMapping);
  XMLCompositeObjectMapping converterMapping=new XMLCompositeObjectMapping();
  converterMapping.setAttributeName(""String_Node_Str"");
  converterMapping.setGetMethodName(""String_Node_Str"");
  converterMapping.setSetMethodName(""String_Node_Str"");
  converterMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  converterMapping.setReferenceClass(Converter.class);
  descriptor.addMapping(converterMapping);
  return descriptor;
}","protected ClassDescriptor buildAbstractDirectMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(AbstractDirectMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)fieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldMapping);
  XMLDirectMapping nullValueMapping=new XMLDirectMapping();
  nullValueMapping.setAttributeName(""String_Node_Str"");
  nullValueMapping.setGetMethodName(""String_Node_Str"");
  nullValueMapping.setSetMethodName(""String_Node_Str"");
  nullValueMapping.setField(buildTypedField(getSecondaryNamespaceXPath() + ""String_Node_Str""));
  descriptor.addMapping(nullValueMapping);
  XMLCompositeObjectMapping converterMapping=new XMLCompositeObjectMapping();
  converterMapping.setAttributeName(""String_Node_Str"");
  converterMapping.setGetMethodName(""String_Node_Str"");
  converterMapping.setSetMethodName(""String_Node_Str"");
  converterMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  converterMapping.setReferenceClass(Converter.class);
  descriptor.addMapping(converterMapping);
  return descriptor;
}"
66397,"protected ClassDescriptor buildNestedTableMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(NestedTableMapping.class);
  descriptor.getInheritancePolicy().setParentClass(CollectionMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(fieldMapping);
  XMLDirectMapping structureMapping=new XMLDirectMapping();
  structureMapping.setAttributeName(""String_Node_Str"");
  structureMapping.setGetMethodName(""String_Node_Str"");
  structureMapping.setSetMethodName(""String_Node_Str"");
  structureMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(structureMapping);
  return descriptor;
}","protected ClassDescriptor buildNestedTableMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(NestedTableMapping.class);
  descriptor.getInheritancePolicy().setParentClass(CollectionMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  ((XMLField)fieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldMapping);
  XMLDirectMapping structureMapping=new XMLDirectMapping();
  structureMapping.setAttributeName(""String_Node_Str"");
  structureMapping.setGetMethodName(""String_Node_Str"");
  structureMapping.setSetMethodName(""String_Node_Str"");
  structureMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(structureMapping);
  return descriptor;
}"
66398,"protected ClassDescriptor buildFieldTransformationDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(FieldTransformation.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().setShouldReadSubclasses(true);
  descriptor.getInheritancePolicy().addClassIndicator(FieldTransformation.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(MethodBasedFieldTransformation.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(TransformerBasedFieldTransformation.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(fieldMapping);
  return descriptor;
}","protected ClassDescriptor buildFieldTransformationDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(FieldTransformation.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().setShouldReadSubclasses(true);
  descriptor.getInheritancePolicy().addClassIndicator(FieldTransformation.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(MethodBasedFieldTransformation.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(TransformerBasedFieldTransformation.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  ((XMLField)fieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldMapping);
  return descriptor;
}"
66399,"protected ClassDescriptor buildReturningFieldInfoDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(ReturningPolicy.Info.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLDirectMapping referenceClassMapping=new XMLDirectMapping();
  referenceClassMapping.setAttributeName(""String_Node_Str"");
  referenceClassMapping.setGetMethodName(""String_Node_Str"");
  referenceClassMapping.setSetMethodName(""String_Node_Str"");
  referenceClassMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(referenceClassMapping);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fieldMapping);
  XMLDirectMapping sourceMapping1=new XMLDirectMapping();
  sourceMapping1.setAttributeName(""String_Node_Str"");
  sourceMapping1.setGetMethodName(""String_Node_Str"");
  sourceMapping1.setSetMethodName(""String_Node_Str"");
  sourceMapping1.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(sourceMapping1);
  XMLDirectMapping sourceMapping2=new XMLDirectMapping();
  sourceMapping2.setAttributeName(""String_Node_Str"");
  sourceMapping2.setGetMethodName(""String_Node_Str"");
  sourceMapping2.setSetMethodName(""String_Node_Str"");
  sourceMapping2.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(sourceMapping2);
  XMLDirectMapping sourceMapping3=new XMLDirectMapping();
  sourceMapping3.setAttributeName(""String_Node_Str"");
  sourceMapping3.setGetMethodName(""String_Node_Str"");
  sourceMapping3.setSetMethodName(""String_Node_Str"");
  sourceMapping3.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(sourceMapping3);
  return descriptor;
}","protected ClassDescriptor buildReturningFieldInfoDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(ReturningPolicy.Info.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLDirectMapping referenceClassMapping=new XMLDirectMapping();
  referenceClassMapping.setAttributeName(""String_Node_Str"");
  referenceClassMapping.setGetMethodName(""String_Node_Str"");
  referenceClassMapping.setSetMethodName(""String_Node_Str"");
  referenceClassMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(referenceClassMapping);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)fieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldMapping);
  XMLDirectMapping sourceMapping1=new XMLDirectMapping();
  sourceMapping1.setAttributeName(""String_Node_Str"");
  sourceMapping1.setGetMethodName(""String_Node_Str"");
  sourceMapping1.setSetMethodName(""String_Node_Str"");
  sourceMapping1.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(sourceMapping1);
  XMLDirectMapping sourceMapping2=new XMLDirectMapping();
  sourceMapping2.setAttributeName(""String_Node_Str"");
  sourceMapping2.setGetMethodName(""String_Node_Str"");
  sourceMapping2.setSetMethodName(""String_Node_Str"");
  sourceMapping2.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(sourceMapping2);
  XMLDirectMapping sourceMapping3=new XMLDirectMapping();
  sourceMapping3.setAttributeName(""String_Node_Str"");
  sourceMapping3.setGetMethodName(""String_Node_Str"");
  sourceMapping3.setSetMethodName(""String_Node_Str"");
  sourceMapping3.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(sourceMapping3);
  return descriptor;
}"
66400,"protected ClassDescriptor buildSelectedFieldsLockingPolicyDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(SelectedFieldsLockingPolicy.class);
  descriptor.getInheritancePolicy().setParentClass(OptimisticLockingPolicy.class);
  XMLCompositeCollectionMapping fieldsMapping=new XMLCompositeCollectionMapping();
  fieldsMapping.useCollectionClass(NonSynchronizedVector.class);
  fieldsMapping.setAttributeName(""String_Node_Str"");
  fieldsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  fieldsMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(fieldsMapping);
  return descriptor;
}","protected ClassDescriptor buildSelectedFieldsLockingPolicyDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(SelectedFieldsLockingPolicy.class);
  descriptor.getInheritancePolicy().setParentClass(OptimisticLockingPolicy.class);
  XMLCompositeCollectionMapping fieldsMapping=new XMLCompositeCollectionMapping();
  fieldsMapping.useCollectionClass(NonSynchronizedVector.class);
  fieldsMapping.setAttributeName(""String_Node_Str"");
  fieldsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  fieldsMapping.setReferenceClass(DatabaseField.class);
  ((XMLField)fieldsMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldsMapping);
  return descriptor;
}"
66401,"protected ClassDescriptor buildFieldExpressionDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(FieldExpression.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setParentClass(Expression.class);
  XMLCompositeObjectMapping parameterMapping=new XMLCompositeObjectMapping();
  parameterMapping.setAttributeName(""String_Node_Str"");
  parameterMapping.setReferenceClass(DatabaseField.class);
  parameterMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(parameterMapping);
  XMLCompositeObjectMapping baseMapping=new XMLCompositeObjectMapping();
  baseMapping.setAttributeName(""String_Node_Str"");
  baseMapping.setReferenceClass(Expression.class);
  baseMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(baseMapping);
  return descriptor;
}","protected ClassDescriptor buildFieldExpressionDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(FieldExpression.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setParentClass(Expression.class);
  XMLCompositeObjectMapping parameterMapping=new XMLCompositeObjectMapping();
  parameterMapping.setAttributeName(""String_Node_Str"");
  parameterMapping.setReferenceClass(DatabaseField.class);
  parameterMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)parameterMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(parameterMapping);
  XMLCompositeObjectMapping baseMapping=new XMLCompositeObjectMapping();
  baseMapping.setAttributeName(""String_Node_Str"");
  baseMapping.setReferenceClass(Expression.class);
  baseMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(baseMapping);
  return descriptor;
}"
66402,"protected ClassDescriptor buildHistoryPolicyDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(HistoryPolicy.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLCompositeCollectionMapping historyTablesMapping=new XMLCompositeCollectionMapping();
  historyTablesMapping.useCollectionClass(NonSynchronizedVector.class);
  historyTablesMapping.setAttributeName(""String_Node_Str"");
  historyTablesMapping.setReferenceClass(HistoricalDatabaseTable.class);
  historyTablesMapping.setGetMethodName(""String_Node_Str"");
  historyTablesMapping.setSetMethodName(""String_Node_Str"");
  historyTablesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(historyTablesMapping);
  XMLCompositeCollectionMapping startFieldNamesMapping=new XMLCompositeCollectionMapping();
  startFieldNamesMapping.useCollectionClass(NonSynchronizedVector.class);
  startFieldNamesMapping.setAttributeName(""String_Node_Str"");
  startFieldNamesMapping.setReferenceClass(DatabaseField.class);
  startFieldNamesMapping.setGetMethodName(""String_Node_Str"");
  startFieldNamesMapping.setSetMethodName(""String_Node_Str"");
  startFieldNamesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(startFieldNamesMapping);
  XMLCompositeCollectionMapping endFieldNamesMapping=new XMLCompositeCollectionMapping();
  endFieldNamesMapping.useCollectionClass(NonSynchronizedVector.class);
  endFieldNamesMapping.setAttributeName(""String_Node_Str"");
  endFieldNamesMapping.setReferenceClass(DatabaseField.class);
  endFieldNamesMapping.setGetMethodName(""String_Node_Str"");
  endFieldNamesMapping.setSetMethodName(""String_Node_Str"");
  endFieldNamesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(endFieldNamesMapping);
  XMLDirectMapping shouldHandleWritesMapping=new XMLDirectMapping();
  shouldHandleWritesMapping.setAttributeName(""String_Node_Str"");
  shouldHandleWritesMapping.setGetMethodName(""String_Node_Str"");
  shouldHandleWritesMapping.setSetMethodName(""String_Node_Str"");
  shouldHandleWritesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  shouldHandleWritesMapping.setNullValue(Boolean.TRUE);
  descriptor.addMapping(shouldHandleWritesMapping);
  XMLDirectMapping useDatabaseTimeMapping=new XMLDirectMapping();
  useDatabaseTimeMapping.setAttributeName(""String_Node_Str"");
  useDatabaseTimeMapping.setGetMethodName(""String_Node_Str"");
  useDatabaseTimeMapping.setSetMethodName(""String_Node_Str"");
  useDatabaseTimeMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  useDatabaseTimeMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(useDatabaseTimeMapping);
  return descriptor;
}","protected ClassDescriptor buildHistoryPolicyDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(HistoryPolicy.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLCompositeCollectionMapping historyTablesMapping=new XMLCompositeCollectionMapping();
  historyTablesMapping.useCollectionClass(NonSynchronizedVector.class);
  historyTablesMapping.setAttributeName(""String_Node_Str"");
  historyTablesMapping.setReferenceClass(HistoricalDatabaseTable.class);
  historyTablesMapping.setGetMethodName(""String_Node_Str"");
  historyTablesMapping.setSetMethodName(""String_Node_Str"");
  historyTablesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(historyTablesMapping);
  XMLCompositeCollectionMapping startFieldNamesMapping=new XMLCompositeCollectionMapping();
  startFieldNamesMapping.useCollectionClass(NonSynchronizedVector.class);
  startFieldNamesMapping.setAttributeName(""String_Node_Str"");
  startFieldNamesMapping.setReferenceClass(DatabaseField.class);
  startFieldNamesMapping.setGetMethodName(""String_Node_Str"");
  startFieldNamesMapping.setSetMethodName(""String_Node_Str"");
  startFieldNamesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  ((XMLField)startFieldNamesMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(startFieldNamesMapping);
  XMLCompositeCollectionMapping endFieldNamesMapping=new XMLCompositeCollectionMapping();
  endFieldNamesMapping.useCollectionClass(NonSynchronizedVector.class);
  endFieldNamesMapping.setAttributeName(""String_Node_Str"");
  endFieldNamesMapping.setReferenceClass(DatabaseField.class);
  endFieldNamesMapping.setGetMethodName(""String_Node_Str"");
  endFieldNamesMapping.setSetMethodName(""String_Node_Str"");
  endFieldNamesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  ((XMLField)endFieldNamesMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(endFieldNamesMapping);
  XMLDirectMapping shouldHandleWritesMapping=new XMLDirectMapping();
  shouldHandleWritesMapping.setAttributeName(""String_Node_Str"");
  shouldHandleWritesMapping.setGetMethodName(""String_Node_Str"");
  shouldHandleWritesMapping.setSetMethodName(""String_Node_Str"");
  shouldHandleWritesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  shouldHandleWritesMapping.setNullValue(Boolean.TRUE);
  descriptor.addMapping(shouldHandleWritesMapping);
  XMLDirectMapping useDatabaseTimeMapping=new XMLDirectMapping();
  useDatabaseTimeMapping.setAttributeName(""String_Node_Str"");
  useDatabaseTimeMapping.setGetMethodName(""String_Node_Str"");
  useDatabaseTimeMapping.setSetMethodName(""String_Node_Str"");
  useDatabaseTimeMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  useDatabaseTimeMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(useDatabaseTimeMapping);
  return descriptor;
}"
66403,"protected ClassDescriptor buildDirectQueryKeyDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DirectQueryKey.class);
  descriptor.getInheritancePolicy().setParentClass(QueryKey.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fieldMapping);
  return descriptor;
}","protected ClassDescriptor buildDirectQueryKeyDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DirectQueryKey.class);
  descriptor.getInheritancePolicy().setParentClass(QueryKey.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)fieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldMapping);
  return descriptor;
}"
66404,"protected ClassDescriptor buildAbstractCompositeObjectMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(AbstractCompositeObjectMapping.class);
  descriptor.getInheritancePolicy().setParentClass(AggregateMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fieldMapping);
  return descriptor;
}","protected ClassDescriptor buildAbstractCompositeObjectMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(AbstractCompositeObjectMapping.class);
  descriptor.getInheritancePolicy().setParentClass(AggregateMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)fieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldMapping);
  return descriptor;
}"
66405,"protected ClassDescriptor buildAssociationDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Association.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLCompositeObjectMapping keyMapping=new XMLCompositeObjectMapping();
  keyMapping.setAttributeName(""String_Node_Str"");
  keyMapping.setGetMethodName(""String_Node_Str"");
  keyMapping.setSetMethodName(""String_Node_Str"");
  keyMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  keyMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(keyMapping);
  XMLCompositeObjectMapping valueMapping=new XMLCompositeObjectMapping();
  valueMapping.setAttributeName(""String_Node_Str"");
  valueMapping.setGetMethodName(""String_Node_Str"");
  valueMapping.setSetMethodName(""String_Node_Str"");
  valueMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  valueMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(valueMapping);
  return descriptor;
}","protected ClassDescriptor buildAssociationDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Association.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLCompositeObjectMapping keyMapping=new XMLCompositeObjectMapping();
  keyMapping.setAttributeName(""String_Node_Str"");
  keyMapping.setGetMethodName(""String_Node_Str"");
  keyMapping.setSetMethodName(""String_Node_Str"");
  keyMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  keyMapping.setReferenceClass(DatabaseField.class);
  ((XMLField)keyMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(keyMapping);
  XMLCompositeObjectMapping valueMapping=new XMLCompositeObjectMapping();
  valueMapping.setAttributeName(""String_Node_Str"");
  valueMapping.setGetMethodName(""String_Node_Str"");
  valueMapping.setSetMethodName(""String_Node_Str"");
  valueMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  valueMapping.setReferenceClass(DatabaseField.class);
  ((XMLField)valueMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(valueMapping);
  return descriptor;
}"
66406,"protected ClassDescriptor buildFieldTranslationDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(FieldTranslation.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLCompositeObjectMapping keyMapping=new XMLCompositeObjectMapping();
  keyMapping.setAttributeName(""String_Node_Str"");
  keyMapping.setGetMethodName(""String_Node_Str"");
  keyMapping.setSetMethodName(""String_Node_Str"");
  keyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  keyMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(keyMapping);
  XMLCompositeObjectMapping valueMapping=new XMLCompositeObjectMapping();
  valueMapping.setAttributeName(""String_Node_Str"");
  valueMapping.setGetMethodName(""String_Node_Str"");
  valueMapping.setSetMethodName(""String_Node_Str"");
  valueMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  valueMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(valueMapping);
  return descriptor;
}","protected ClassDescriptor buildFieldTranslationDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(FieldTranslation.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLCompositeObjectMapping keyMapping=new XMLCompositeObjectMapping();
  keyMapping.setAttributeName(""String_Node_Str"");
  keyMapping.setGetMethodName(""String_Node_Str"");
  keyMapping.setSetMethodName(""String_Node_Str"");
  keyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  keyMapping.setReferenceClass(DatabaseField.class);
  ((XMLField)keyMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(keyMapping);
  XMLCompositeObjectMapping valueMapping=new XMLCompositeObjectMapping();
  valueMapping.setAttributeName(""String_Node_Str"");
  valueMapping.setGetMethodName(""String_Node_Str"");
  valueMapping.setSetMethodName(""String_Node_Str"");
  valueMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  valueMapping.setReferenceClass(DatabaseField.class);
  ((XMLField)valueMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(valueMapping);
  return descriptor;
}"
66407,"protected ClassDescriptor buildInheritancePolicyDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(InheritancePolicy.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(InheritancePolicy.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(QNameInheritancePolicy.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(String.class,""String_Node_Str"");
  XMLDirectMapping parentClassMapping=new XMLDirectMapping();
  parentClassMapping.setAttributeName(""String_Node_Str"");
  parentClassMapping.setGetMethodName(""String_Node_Str"");
  parentClassMapping.setSetMethodName(""String_Node_Str"");
  parentClassMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(parentClassMapping);
  XMLDirectMapping shouldReadSubclassesMapping=new XMLDirectMapping();
  shouldReadSubclassesMapping.setAttributeName(""String_Node_Str"");
  shouldReadSubclassesMapping.setGetMethodName(""String_Node_Str"");
  shouldReadSubclassesMapping.setSetMethodName(""String_Node_Str"");
  shouldReadSubclassesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(shouldReadSubclassesMapping);
  XMLDirectMapping readAllSubclassesViewMapping=new XMLDirectMapping();
  readAllSubclassesViewMapping.setAttributeName(""String_Node_Str"");
  readAllSubclassesViewMapping.setGetMethodName(""String_Node_Str"");
  readAllSubclassesViewMapping.setSetMethodName(""String_Node_Str"");
  readAllSubclassesViewMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(readAllSubclassesViewMapping);
  XMLDirectMapping shouldUseClassNameAsIndicatorMapping=new XMLDirectMapping();
  shouldUseClassNameAsIndicatorMapping.setAttributeName(""String_Node_Str"");
  shouldUseClassNameAsIndicatorMapping.setGetMethodName(""String_Node_Str"");
  shouldUseClassNameAsIndicatorMapping.setSetMethodName(""String_Node_Str"");
  shouldUseClassNameAsIndicatorMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  shouldUseClassNameAsIndicatorMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldUseClassNameAsIndicatorMapping);
  XMLDirectMapping classExtractionMethodMapping=new XMLDirectMapping();
  classExtractionMethodMapping.setAttributeName(""String_Node_Str"");
  classExtractionMethodMapping.setGetMethodName(""String_Node_Str"");
  classExtractionMethodMapping.setSetMethodName(""String_Node_Str"");
  classExtractionMethodMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(classExtractionMethodMapping);
  XMLCompositeObjectMapping classIndicatorFieldNameMapping=new XMLCompositeObjectMapping();
  classIndicatorFieldNameMapping.setAttributeName(""String_Node_Str"");
  classIndicatorFieldNameMapping.setReferenceClass(DatabaseField.class);
  classIndicatorFieldNameMapping.setGetMethodName(""String_Node_Str"");
  classIndicatorFieldNameMapping.setSetMethodName(""String_Node_Str"");
  classIndicatorFieldNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(classIndicatorFieldNameMapping);
  XMLCompositeCollectionMapping classIndicatorsMapping=new XMLCompositeCollectionMapping();
  classIndicatorsMapping.setAttributeName(""String_Node_Str"");
  classIndicatorsMapping.setGetMethodName(""String_Node_Str"");
  classIndicatorsMapping.setSetMethodName(""String_Node_Str"");
  classIndicatorsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  classIndicatorsMapping.setReferenceClass(TypedAssociation.class);
  descriptor.addMapping(classIndicatorsMapping);
  return descriptor;
}","protected ClassDescriptor buildInheritancePolicyDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(InheritancePolicy.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(InheritancePolicy.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(QNameInheritancePolicy.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(String.class,""String_Node_Str"");
  XMLDirectMapping parentClassMapping=new XMLDirectMapping();
  parentClassMapping.setAttributeName(""String_Node_Str"");
  parentClassMapping.setGetMethodName(""String_Node_Str"");
  parentClassMapping.setSetMethodName(""String_Node_Str"");
  parentClassMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(parentClassMapping);
  XMLDirectMapping shouldReadSubclassesMapping=new XMLDirectMapping();
  shouldReadSubclassesMapping.setAttributeName(""String_Node_Str"");
  shouldReadSubclassesMapping.setGetMethodName(""String_Node_Str"");
  shouldReadSubclassesMapping.setSetMethodName(""String_Node_Str"");
  shouldReadSubclassesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(shouldReadSubclassesMapping);
  XMLDirectMapping readAllSubclassesViewMapping=new XMLDirectMapping();
  readAllSubclassesViewMapping.setAttributeName(""String_Node_Str"");
  readAllSubclassesViewMapping.setGetMethodName(""String_Node_Str"");
  readAllSubclassesViewMapping.setSetMethodName(""String_Node_Str"");
  readAllSubclassesViewMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(readAllSubclassesViewMapping);
  XMLDirectMapping shouldUseClassNameAsIndicatorMapping=new XMLDirectMapping();
  shouldUseClassNameAsIndicatorMapping.setAttributeName(""String_Node_Str"");
  shouldUseClassNameAsIndicatorMapping.setGetMethodName(""String_Node_Str"");
  shouldUseClassNameAsIndicatorMapping.setSetMethodName(""String_Node_Str"");
  shouldUseClassNameAsIndicatorMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  shouldUseClassNameAsIndicatorMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(shouldUseClassNameAsIndicatorMapping);
  XMLDirectMapping classExtractionMethodMapping=new XMLDirectMapping();
  classExtractionMethodMapping.setAttributeName(""String_Node_Str"");
  classExtractionMethodMapping.setGetMethodName(""String_Node_Str"");
  classExtractionMethodMapping.setSetMethodName(""String_Node_Str"");
  classExtractionMethodMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(classExtractionMethodMapping);
  XMLCompositeObjectMapping classIndicatorFieldNameMapping=new XMLCompositeObjectMapping();
  classIndicatorFieldNameMapping.setAttributeName(""String_Node_Str"");
  classIndicatorFieldNameMapping.setReferenceClass(DatabaseField.class);
  classIndicatorFieldNameMapping.setGetMethodName(""String_Node_Str"");
  classIndicatorFieldNameMapping.setSetMethodName(""String_Node_Str"");
  classIndicatorFieldNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)classIndicatorFieldNameMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(classIndicatorFieldNameMapping);
  XMLCompositeCollectionMapping classIndicatorsMapping=new XMLCompositeCollectionMapping();
  classIndicatorsMapping.setAttributeName(""String_Node_Str"");
  classIndicatorsMapping.setGetMethodName(""String_Node_Str"");
  classIndicatorsMapping.setSetMethodName(""String_Node_Str"");
  classIndicatorsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  classIndicatorsMapping.setReferenceClass(TypedAssociation.class);
  descriptor.addMapping(classIndicatorsMapping);
  return descriptor;
}"
66408,"protected ClassDescriptor buildXMLAnyObjectMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(XMLAnyObjectMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fieldMapping);
  return descriptor;
}","protected ClassDescriptor buildXMLAnyObjectMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(XMLAnyObjectMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)fieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldMapping);
  return descriptor;
}"
66409,"protected ClassDescriptor buildParameterExpressionDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(ParameterExpression.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setParentClass(Expression.class);
  XMLCompositeObjectMapping parameterMapping=new XMLCompositeObjectMapping();
  parameterMapping.setAttributeName(""String_Node_Str"");
  parameterMapping.setReferenceClass(DatabaseField.class);
  parameterMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(parameterMapping);
  XMLCompositeObjectMapping baseMapping=new XMLCompositeObjectMapping();
  baseMapping.setAttributeName(""String_Node_Str"");
  baseMapping.setReferenceClass(Expression.class);
  baseMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(baseMapping);
  return descriptor;
}","protected ClassDescriptor buildParameterExpressionDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(ParameterExpression.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setParentClass(Expression.class);
  XMLCompositeObjectMapping parameterMapping=new XMLCompositeObjectMapping();
  parameterMapping.setAttributeName(""String_Node_Str"");
  parameterMapping.setReferenceClass(DatabaseField.class);
  parameterMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)parameterMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(parameterMapping);
  XMLCompositeObjectMapping baseMapping=new XMLCompositeObjectMapping();
  baseMapping.setAttributeName(""String_Node_Str"");
  baseMapping.setReferenceClass(Expression.class);
  baseMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(baseMapping);
  return descriptor;
}"
66410,"protected ClassDescriptor buildQueryKeyReferenceDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(QueryKeyReference.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLCompositeObjectMapping keyMapping=new XMLCompositeObjectMapping();
  keyMapping.setAttributeName(""String_Node_Str"");
  keyMapping.setGetMethodName(""String_Node_Str"");
  keyMapping.setSetMethodName(""String_Node_Str"");
  keyMapping.setReferenceClass(DatabaseField.class);
  keyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(keyMapping);
  XMLDirectMapping valueMapping=new XMLDirectMapping();
  valueMapping.setAttributeName(""String_Node_Str"");
  valueMapping.setGetMethodName(""String_Node_Str"");
  valueMapping.setSetMethodName(""String_Node_Str"");
  valueMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(valueMapping);
  return descriptor;
}","protected ClassDescriptor buildQueryKeyReferenceDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(QueryKeyReference.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLCompositeObjectMapping keyMapping=new XMLCompositeObjectMapping();
  keyMapping.setAttributeName(""String_Node_Str"");
  keyMapping.setGetMethodName(""String_Node_Str"");
  keyMapping.setSetMethodName(""String_Node_Str"");
  keyMapping.setReferenceClass(DatabaseField.class);
  keyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)keyMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(keyMapping);
  XMLDirectMapping valueMapping=new XMLDirectMapping();
  valueMapping.setAttributeName(""String_Node_Str"");
  valueMapping.setGetMethodName(""String_Node_Str"");
  valueMapping.setSetMethodName(""String_Node_Str"");
  valueMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(valueMapping);
  return descriptor;
}"
66411,"protected ClassDescriptor buildDatabaseFieldDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DatabaseField.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(DatabaseField.class,getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLField.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLUnionField.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  XMLDirectMapping tableMapping=new XMLDirectMapping();
  tableMapping.setAttributeName(""String_Node_Str"");
  tableMapping.setGetMethodName(""String_Node_Str"");
  tableMapping.setSetMethodName(""String_Node_Str"");
  tableMapping.setXPath(""String_Node_Str"");
  tableMapping.setNullValue(""String_Node_Str"");
  descriptor.addMapping(tableMapping);
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setGetMethodName(""String_Node_Str"");
  nameMapping.setSetMethodName(""String_Node_Str"");
  nameMapping.setXPath(""String_Node_Str"");
  nameMapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
  descriptor.addMapping(nameMapping);
  return descriptor;
}","protected ClassDescriptor buildDatabaseFieldDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DatabaseField.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(DatabaseField.class,getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLField.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLUnionField.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  XMLSchemaReference reference=new XMLSchemaClassPathReference();
  reference.setSchemaContext(""String_Node_Str"" + getSecondaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.setSchemaReference(reference);
  XMLDirectMapping tableMapping=new XMLDirectMapping();
  tableMapping.setAttributeName(""String_Node_Str"");
  tableMapping.setGetMethodName(""String_Node_Str"");
  tableMapping.setSetMethodName(""String_Node_Str"");
  tableMapping.setXPath(""String_Node_Str"");
  tableMapping.setNullValue(""String_Node_Str"");
  descriptor.addMapping(tableMapping);
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setGetMethodName(""String_Node_Str"");
  nameMapping.setSetMethodName(""String_Node_Str"");
  nameMapping.setXPath(""String_Node_Str"");
  nameMapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
  descriptor.addMapping(nameMapping);
  return descriptor;
}"
66412,"protected ClassDescriptor buildReferenceMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(ReferenceMapping.class);
  descriptor.getInheritancePolicy().setParentClass(ObjectReferenceMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fieldMapping);
  return descriptor;
}","protected ClassDescriptor buildReferenceMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(ReferenceMapping.class);
  descriptor.getInheritancePolicy().setParentClass(ObjectReferenceMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)fieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldMapping);
  return descriptor;
}"
66413,"protected ClassDescriptor buildXMLAnyCollectionMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(XMLAnyCollectionMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fieldMapping);
  XMLCompositeObjectMapping containerPolicyMapping=new XMLCompositeObjectMapping();
  containerPolicyMapping.setAttributeName(""String_Node_Str"");
  containerPolicyMapping.setGetMethodName(""String_Node_Str"");
  containerPolicyMapping.setSetMethodName(""String_Node_Str"");
  containerPolicyMapping.setReferenceClass(ContainerPolicy.class);
  containerPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(containerPolicyMapping);
  return descriptor;
}","protected ClassDescriptor buildXMLAnyCollectionMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(XMLAnyCollectionMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)fieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldMapping);
  XMLCompositeObjectMapping containerPolicyMapping=new XMLCompositeObjectMapping();
  containerPolicyMapping.setAttributeName(""String_Node_Str"");
  containerPolicyMapping.setGetMethodName(""String_Node_Str"");
  containerPolicyMapping.setSetMethodName(""String_Node_Str"");
  containerPolicyMapping.setReferenceClass(ContainerPolicy.class);
  containerPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(containerPolicyMapping);
  return descriptor;
}"
66414,"protected ClassDescriptor buildXMLObjectReferenceMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(XMLObjectReferenceMapping.class);
  descriptor.getInheritancePolicy().setParentClass(AggregateMapping.class);
  XMLCompositeCollectionMapping sourceToTargetKeyFieldAssociationsMapping=new XMLCompositeCollectionMapping();
  sourceToTargetKeyFieldAssociationsMapping.setReferenceClass(Association.class);
  sourceToTargetKeyFieldAssociationsMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      Map sourceToTargetKeyFields=((XMLObjectReferenceMapping)object).getSourceToTargetKeyFieldAssociations();
      List associations=new ArrayList(sourceToTargetKeyFields.size());
      Iterator iterator=sourceToTargetKeyFields.entrySet().iterator();
      while (iterator.hasNext()) {
        Map.Entry entry=(Map.Entry)iterator.next();
        associations.add(new Association(entry.getKey(),entry.getValue()));
      }
      return associations;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)object;
      List associations=(List)value;
      mapping.setSourceToTargetKeyFieldAssociations(new HashMap(associations.size() + 1));
      Iterator iterator=associations.iterator();
      while (iterator.hasNext()) {
        Association association=(Association)iterator.next();
        mapping.getSourceToTargetKeyFieldAssociations().put(association.getKey(),association.getValue());
      }
    }
  }
);
  sourceToTargetKeyFieldAssociationsMapping.setAttributeName(""String_Node_Str"");
  sourceToTargetKeyFieldAssociationsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sourceToTargetKeyFieldAssociationsMapping);
  XMLCompositeCollectionMapping sourceToTargetKeysMapping=new XMLCompositeCollectionMapping();
  sourceToTargetKeysMapping.setReferenceClass(DatabaseField.class);
  sourceToTargetKeysMapping.setAttributeName(""String_Node_Str"");
  sourceToTargetKeysMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sourceToTargetKeysMapping);
  return descriptor;
}","protected ClassDescriptor buildXMLObjectReferenceMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(XMLObjectReferenceMapping.class);
  descriptor.getInheritancePolicy().setParentClass(AggregateMapping.class);
  XMLCompositeCollectionMapping sourceToTargetKeyFieldAssociationsMapping=new XMLCompositeCollectionMapping();
  sourceToTargetKeyFieldAssociationsMapping.setReferenceClass(Association.class);
  sourceToTargetKeyFieldAssociationsMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      Map sourceToTargetKeyFields=((XMLObjectReferenceMapping)object).getSourceToTargetKeyFieldAssociations();
      List associations=new ArrayList(sourceToTargetKeyFields.size());
      Iterator iterator=sourceToTargetKeyFields.entrySet().iterator();
      while (iterator.hasNext()) {
        Map.Entry entry=(Map.Entry)iterator.next();
        associations.add(new Association(entry.getKey(),entry.getValue()));
      }
      return associations;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)object;
      List associations=(List)value;
      mapping.setSourceToTargetKeyFieldAssociations(new HashMap(associations.size() + 1));
      Iterator iterator=associations.iterator();
      while (iterator.hasNext()) {
        Association association=(Association)iterator.next();
        mapping.getSourceToTargetKeyFieldAssociations().put(association.getKey(),association.getValue());
      }
    }
  }
);
  sourceToTargetKeyFieldAssociationsMapping.setAttributeName(""String_Node_Str"");
  sourceToTargetKeyFieldAssociationsMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sourceToTargetKeyFieldAssociationsMapping);
  XMLCompositeCollectionMapping sourceToTargetKeysMapping=new XMLCompositeCollectionMapping();
  sourceToTargetKeysMapping.setReferenceClass(DatabaseField.class);
  sourceToTargetKeysMapping.setAttributeName(""String_Node_Str"");
  sourceToTargetKeysMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  ((XMLField)sourceToTargetKeysMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(sourceToTargetKeysMapping);
  return descriptor;
}"
66415,"protected ClassDescriptor buildXMLAnyAttributeMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(XMLAnyAttributeMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fieldMapping);
  XMLCompositeObjectMapping containerPolicyMapping=new XMLCompositeObjectMapping();
  containerPolicyMapping.setAttributeName(""String_Node_Str"");
  containerPolicyMapping.setGetMethodName(""String_Node_Str"");
  containerPolicyMapping.setSetMethodName(""String_Node_Str"");
  containerPolicyMapping.setReferenceClass(ContainerPolicy.class);
  containerPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(containerPolicyMapping);
  return descriptor;
}","protected ClassDescriptor buildXMLAnyAttributeMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(XMLAnyAttributeMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLCompositeObjectMapping fieldMapping=new XMLCompositeObjectMapping();
  fieldMapping.setAttributeName(""String_Node_Str"");
  fieldMapping.setReferenceClass(DatabaseField.class);
  fieldMapping.setGetMethodName(""String_Node_Str"");
  fieldMapping.setSetMethodName(""String_Node_Str"");
  fieldMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ((XMLField)fieldMapping.getField()).setLeafElementType(fieldQname);
  descriptor.addMapping(fieldMapping);
  XMLCompositeObjectMapping containerPolicyMapping=new XMLCompositeObjectMapping();
  containerPolicyMapping.setAttributeName(""String_Node_Str"");
  containerPolicyMapping.setGetMethodName(""String_Node_Str"");
  containerPolicyMapping.setSetMethodName(""String_Node_Str"");
  containerPolicyMapping.setReferenceClass(ContainerPolicy.class);
  containerPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(containerPolicyMapping);
  return descriptor;
}"
66416,"/** 
 * Initialize the logger: - add a handler that writes log entries to a file - register a hook to clean up the lock file on system exit
 */
private void configureLoggerForLaunch(){
  FileHandler fileHandler;
  try {
    fileHandler=new FileHandler(System.getProperty(""String_Node_Str"") + ""String_Node_Str"",50000,1,true);
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
  FileHandlerCleanup.register(fileHandler);
  fileHandler.setFormatter(new SimpleFormatter());
  this.logger.addHandler(fileHandler);
}","/** 
 * Initialize the logger: - add a handler that writes log entries to a file - register a hook to clean up the lock file on system exit
 */
private void configureLoggerForLaunch(){
  FileHandler fileHandler;
  try {
    fileHandler=new FileHandler(System.getProperty(""String_Node_Str"") + ""String_Node_Str"",50000,1,true);
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
  String version=System.getProperty(""String_Node_Str"");
  if (version.startsWith(""String_Node_Str"")) {
    FileHandlerCleanup.register(fileHandler);
  }
  fileHandler.setFormatter(new SimpleFormatter());
  this.logger.addHandler(fileHandler);
}"
66417,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + XMLConstants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(XMLConstants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + XMLConstants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + XMLConstants.COLON)) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),atts.getValue(x));
    }
 else {
      String value=atts.getValue(x);
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value);
      if (XMLConstants.SCHEMA_INSTANCE_URL.equals(attributeNamespaceURI) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(atts.getLocalName(x))) {
        int colonIndex=value.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=value.substring(0,colonIndex);
          String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          if (uri == null || uri.length() == 0) {
            String theUri=owningRecord.resolveNamespacePrefix(prefix);
            if (theUri != null && theUri.length() > 0) {
              element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,theUri);
            }
          }
        }
      }
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  if ((stringBuffer.length() > 0) && !(nodes.size() == 1)) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    Node parent=this.nodes.get(nodes.size() - 1);
    parent.appendChild(text);
    stringBuffer.reset();
  }
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + XMLConstants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(XMLConstants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + XMLConstants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + XMLConstants.COLON)) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),atts.getValue(x));
    }
 else {
      String value=atts.getValue(x);
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value);
      if (XMLConstants.SCHEMA_INSTANCE_URL.equals(attributeNamespaceURI) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(atts.getLocalName(x))) {
        int colonIndex=value.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=value.substring(0,colonIndex);
          String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          if (uri == null || uri.length() == 0) {
            String theUri=owningRecord.resolveNamespacePrefix(prefix);
            if (theUri != null && theUri.length() > 0) {
              element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,theUri);
            }
          }
        }
      }
    }
  }
}"
66418,"/** 
 * Inherited suite method for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(PurchaseOrderComplexDefineTestCases.class));
  suite.addTest(new TestSuite(PurchaseOrderDefineTestCases.class));
  suite.addTest(new TestSuite(PurchaseOrderWithAnnotationsDefineTestCases.class));
  suite.addTest(new TestSuite(DefineWithImportsTestCases.class));
  suite.addTest(new TestSuite(DefineWithIncludesTestCases.class));
  suite.addTest(new TestSuite(DefineWithImportsExceptionTestCases.class));
  suite.addTest(new TestSuite(CyclicImportsDefineTestCases.class));
  suite.addTest(new TestSuite(DefineWithBuiltInSchemaLocationTestCases.class));
  suite.addTest(new TestSuite(ClashingNamespacesTestCases.class));
  suite.addTestSuite(MultipleDefineSameTypeTestCases.class);
  suite.addTestSuite(AttributeGroupTestCases.class);
  suite.addTestSuite(CyclicElementRefTestCases.class);
  suite.addTestSuite(CyclicElementRefErrorTestCases.class);
  suite.addTestSuite(DefineWithNestedNamespacesTestCases.class);
  suite.addTestSuite(DefineWithImportsNoSchemaLocationTestCases.class);
  suite.addTestSuite(ComplexImportsAndIncludesTestCases.class);
  suite.addTestSuite(DefineFailsDontRegisterTypesTestCases.class);
  return suite;
}","/** 
 * Inherited suite method for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(PurchaseOrderComplexDefineTestCases.class));
  suite.addTest(new TestSuite(PurchaseOrderDefineTestCases.class));
  suite.addTest(new TestSuite(PurchaseOrderWithAnnotationsDefineTestCases.class));
  suite.addTest(new TestSuite(DefineWithImportsTestCases.class));
  suite.addTest(new TestSuite(DefineWithIncludesTestCases.class));
  suite.addTest(new TestSuite(DefineWithImportsExceptionTestCases.class));
  suite.addTest(new TestSuite(CyclicImportsDefineTestCases.class));
  suite.addTest(new TestSuite(DefineWithBuiltInSchemaLocationTestCases.class));
  suite.addTest(new TestSuite(ClashingNamespacesTestCases.class));
  suite.addTestSuite(MultipleDefineSameTypeTestCases.class);
  suite.addTestSuite(AttributeGroupTestCases.class);
  suite.addTestSuite(CyclicElementRefTestCases.class);
  suite.addTestSuite(CyclicElementRefErrorTestCases.class);
  suite.addTestSuite(DefineWithNestedNamespacesTestCases.class);
  suite.addTestSuite(DefineWithImportsNoSchemaLocationTestCases.class);
  suite.addTestSuite(ComplexImportsAndIncludesTestCases.class);
  suite.addTestSuite(DefineFailsDontRegisterTypesTestCases.class);
  suite.addTestSuite(SchemaResolverSystemIdTestCases.class);
  return suite;
}"
66419,"/** 
 * Return a Schema for the given Source object. Since this method is called recursively, and the SchemaResolverWrapper is stateful, the resolver wrapper must be created outside of this method.
 * @param xsdSource
 * @param schemaResolverWrapper wraps the schema resolver to be used to resolve imports/includes
 * @return
 */
public Schema getSchema(Source xsdSource,SchemaResolverWrapper schemaResolverWrapper){
  try {
    XMLContext context=new XMLContext(getSchemaProject());
    XMLUnmarshaller unmarshaller=context.createUnmarshaller();
    unmarshaller.setEntityResolver(schemaResolverWrapper.getSchemaResolver());
    Schema schema=(Schema)unmarshaller.unmarshal(xsdSource);
    java.util.List imports=schema.getImports();
    Iterator iter=imports.iterator();
    while (iter.hasNext()) {
      Import nextImport=(Import)iter.next();
      Source referencedSchema=getReferencedSchema(xsdSource,nextImport.getNamespace(),nextImport.getSchemaLocation(),schemaResolverWrapper);
      if (referencedSchema != null) {
        Schema importedSchema=getSchema(referencedSchema,schemaResolverWrapper);
        nextImport.setSchema(importedSchema);
      }
    }
    java.util.List includes=schema.getIncludes();
    Iterator includesIter=includes.iterator();
    while (includesIter.hasNext()) {
      Include nextInclude=(Include)includesIter.next();
      Source referencedSchema=getReferencedSchema(xsdSource,schema.getTargetNamespace(),nextInclude.getSchemaLocation(),schemaResolverWrapper);
      if (referencedSchema != null) {
        Schema includedSchema=getSchema(referencedSchema,schemaResolverWrapper);
        nextInclude.setSchema(includedSchema);
      }
    }
    return schema;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","/** 
 * Return a Schema for the given Source object. Since this method is called recursively, and the SchemaResolverWrapper is stateful, the resolver wrapper must be created outside of this method.
 * @param xsdSource
 * @param schemaResolverWrapper wraps the schema resolver to be used to resolve imports/includes
 * @return
 */
public Schema getSchema(Source xsdSource,SchemaResolverWrapper schemaResolverWrapper){
  try {
    if (xsdSource.getClass() == StreamSource.class) {
      String systemId=((StreamSource)xsdSource).getSystemId();
      if (systemId != null) {
        Source newSchemaSource=schemaResolverWrapper.resolveSchema(systemId);
        if (newSchemaSource != null) {
          xsdSource=newSchemaSource;
        }
      }
    }
    XMLContext context=new XMLContext(getSchemaProject());
    XMLUnmarshaller unmarshaller=context.createUnmarshaller();
    unmarshaller.setEntityResolver(schemaResolverWrapper.getSchemaResolver());
    Schema schema=(Schema)unmarshaller.unmarshal(xsdSource);
    java.util.List imports=schema.getImports();
    Iterator iter=imports.iterator();
    while (iter.hasNext()) {
      Import nextImport=(Import)iter.next();
      Source referencedSchema=getReferencedSchema(xsdSource,nextImport.getNamespace(),nextImport.getSchemaLocation(),schemaResolverWrapper);
      if (referencedSchema != null) {
        Schema importedSchema=getSchema(referencedSchema,schemaResolverWrapper);
        nextImport.setSchema(importedSchema);
      }
    }
    java.util.List includes=schema.getIncludes();
    Iterator includesIter=includes.iterator();
    while (includesIter.hasNext()) {
      Include nextInclude=(Include)includesIter.next();
      Source referencedSchema=getReferencedSchema(xsdSource,schema.getTargetNamespace(),nextInclude.getSchemaLocation(),schemaResolverWrapper);
      if (referencedSchema != null) {
        Schema includedSchema=getSchema(referencedSchema,schemaResolverWrapper);
        nextInclude.setSchema(includedSchema);
      }
    }
    return schema;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
66420,"/** 
 * Allow the SchemaResolver implementation to attempt to return the referenced Schema based on  given source schema, namespace and schemaLocation values from an import or include.  If the resolver fails, this method will attemt to resolve the schema 
 * @param sourceXSD The Source object of the source schema
 * @param namespace The namespace portion of the import/include
 * @param schemaLocation The schemaLocation portion of the import/include
 * @return Source for the referenced Schema or null if processing the referencedschema should be skipped
 */
public Source resolveSchema(Source sourceXSD,String namespace,String schemaLocation){
  addSchemaToList(sourceXSD.getSystemId());
  Source schemaSource=schemaResolver.resolveSchema(sourceXSD,namespace,schemaLocation);
  if (schemaSource != null) {
    String sysId=schemaSource.getSystemId();
    if (shouldProcessSchema(sysId)) {
      return schemaSource;
    }
  }
  return null;
}","/** 
 */
public Source resolveSchema(String systemId){
  if (!addSchemaToList(systemId)) {
    return null;
  }
  try {
    InputSource source=schemaResolver.resolveEntity(null,systemId);
    if (source != null) {
      return new StreamSource(source.getCharacterStream());
    }
  }
 catch (  Exception ex) {
    throw SDOException.errorResolvingSchema(ex);
  }
  return null;
}"
66421,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (stringBuffer.length() > 0) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    Node parent=this.nodes.get(nodes.size() - 1);
    parent.appendChild(text);
    stringBuffer.reset();
  }
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + XMLConstants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(XMLConstants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + XMLConstants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + XMLConstants.COLON)) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),atts.getValue(x));
    }
 else {
      String value=atts.getValue(x);
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value);
      if (XMLConstants.SCHEMA_INSTANCE_URL.equals(attributeNamespaceURI) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(atts.getLocalName(x))) {
        int colonIndex=value.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=value.substring(0,colonIndex);
          String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          if (uri == null || uri.length() == 0) {
            String theUri=owningRecord.resolveNamespacePrefix(prefix);
            if (theUri != null && theUri.length() > 0) {
              element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,theUri);
            }
          }
        }
      }
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  if ((stringBuffer.length() > 0) && !(nodes.size() == 1)) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    Node parent=this.nodes.get(nodes.size() - 1);
    parent.appendChild(text);
    stringBuffer.reset();
  }
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + XMLConstants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(XMLConstants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + XMLConstants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + XMLConstants.COLON)) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),atts.getValue(x));
    }
 else {
      String value=atts.getValue(x);
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value);
      if (XMLConstants.SCHEMA_INSTANCE_URL.equals(attributeNamespaceURI) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(atts.getLocalName(x))) {
        int colonIndex=value.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=value.substring(0,colonIndex);
          String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          if (uri == null || uri.length() == 0) {
            String theUri=owningRecord.resolveNamespacePrefix(prefix);
            if (theUri != null && theUri.length() > 0) {
              element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,theUri);
            }
          }
        }
      }
    }
  }
}"
66422,"public static TestSuite getDeleteObjectTestSuite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.setDescription(""String_Node_Str"");
  PopulationManager manager=PopulationManager.getDefaultManager();
  suite.addTest(new DeleteObjectTest(manager.getObject(Employee.class,""String_Node_Str"")));
  suite.addTest(new DeleteObjectTest(manager.getObject(Employee.class,""String_Node_Str"")));
  suite.addTest(new DeleteObjectTest(manager.getObject(Employee.class,""String_Node_Str"")));
  suite.addTest(new DeleteObjectTest(manager.getObject(Computer.class,""String_Node_Str"")));
  suite.addTest(new DeleteObjectTest(manager.getObject(Shipment.class,""String_Node_Str"")));
  suite.addTest(new MTMPrivateOwnedWithValueholderDeleteObjectTest());
  return suite;
}","public static TestSuite getDeleteObjectTestSuite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.setDescription(""String_Node_Str"");
  PopulationManager manager=PopulationManager.getDefaultManager();
  suite.addTest(new DeleteObjectTest(manager.getObject(Employee.class,""String_Node_Str"")));
  suite.addTest(new DeleteObjectTest(manager.getObject(Employee.class,""String_Node_Str"")));
  suite.addTest(new DeleteObjectTest(manager.getObject(Employee.class,""String_Node_Str"")));
  suite.addTest(new DeleteObjectTest(manager.getObject(Computer.class,""String_Node_Str"")));
  suite.addTest(new DeleteObjectTest(manager.getObject(Shipment.class,""String_Node_Str"")));
  suite.addTest(new MTMPrivateOwnedWithValueholderDeleteObjectTest());
  suite.addTest(new DirectCollectionMappingDeleteNullValueTest());
  return suite;
}"
66423,"/** 
 * INTERNAL: Update private owned part.
 */
protected void postUpdateWithChangeSetListOrder(WriteObjectQuery writeQuery) throws DatabaseException {
  ObjectChangeSet changeSet=writeQuery.getObjectChangeSet();
  DirectCollectionChangeRecord changeRecord=(DirectCollectionChangeRecord)changeSet.getChangesForAttributeNamed(this.getAttributeName());
  if (changeRecord == null) {
    return;
  }
  for (int index=0; index < getReferenceKeyFields().size(); index++) {
    DatabaseField referenceKey=getReferenceKeyFields().get(index);
    DatabaseField sourceKey=getSourceKeyFields().get(index);
    Object sourceKeyValue=writeQuery.getTranslationRow().get(sourceKey);
    writeQuery.getTranslationRow().put(referenceKey,sourceKeyValue);
  }
  boolean shouldRepairOrder=false;
  if ((List)changeRecord.getLatestCollection() instanceof IndirectList) {
    shouldRepairOrder=((IndirectList)changeRecord.getLatestCollection()).isListOrderBrokenInDb();
  }
  if (shouldRepairOrder) {
    DeleteObjectQuery deleteQuery=new DeleteObjectQuery();
    deleteQuery.setObject(writeQuery.getObject());
    deleteQuery.setSession(writeQuery.getSession());
    deleteQuery.setTranslationRow(writeQuery.getTranslationRow());
    Object[] eventDeleteAll=new Object[2];
    eventDeleteAll[0]=DeleteAll;
    eventDeleteAll[1]=deleteQuery;
    writeQuery.getSession().getCommitManager().addDataModificationEvent(this,eventDeleteAll);
    for (int i=0; i < ((List)changeRecord.getLatestCollection()).size(); i++) {
      Object value=((List)changeRecord.getLatestCollection()).get(i);
      value=getFieldValue(value,writeQuery.getSession());
      AbstractRecord insertRow=writeQuery.getTranslationRow().clone();
      insertRow.add(getDirectField(),value);
      insertRow.add(this.listOrderField,i);
      Object[] event=new Object[3];
      event[0]=Insert;
      event[1]=getInsertQuery();
      event[2]=insertRow;
      writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
    }
    ((IndirectList)changeRecord.getLatestCollection()).setIsListOrderBrokenInDb(false);
    changeRecord.setOrderHasBeenRepaired(true);
    return;
  }
  if (changeRecord.getChangedIndexes() == null) {
    compareListsForChange((List)changeRecord.getOriginalCollection(),(List)changeRecord.getLatestCollection(),changeRecord,writeQuery.getSession());
  }
  Iterator<Map.Entry<Object,Set[]>> it=changeRecord.getChangedIndexes().entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<Object,Set[]> entry=it.next();
    Object value=entry.getKey();
    if (getValueConverter() != null) {
      value=getValueConverter().convertObjectValueToDataValue(value,writeQuery.getSession());
    }
    Set[] indexes=entry.getValue();
    Set indexesBefore=indexes[0];
    Set indexesAfter=indexes[1];
    if (indexesAfter == null) {
      AbstractRecord deleteRow=writeQuery.getTranslationRow().clone();
      deleteRow.add(getDirectField(),value);
      Object[] event=new Object[3];
      event[0]=Delete;
      event[1]=getDeleteQuery();
      event[2]=deleteRow;
      writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
    }
 else     if (indexesAfter.isEmpty()) {
      Iterator<Integer> itBefore=indexesBefore.iterator();
      while (itBefore.hasNext()) {
        AbstractRecord deleteAtIndexRow=writeQuery.getTranslationRow().clone();
        deleteAtIndexRow.add(getDirectField(),value);
        deleteAtIndexRow.add(this.listOrderField,itBefore.next());
        Object[] event=new Object[3];
        event[0]=DeleteAtIndex;
        event[1]=deleteAtIndexQuery;
        event[2]=deleteAtIndexRow;
        writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
      }
    }
 else {
      if (indexesBefore == null || indexesBefore.isEmpty()) {
        Iterator<Integer> itAfter=indexesAfter.iterator();
        while (itAfter.hasNext()) {
          AbstractRecord insertRow=writeQuery.getTranslationRow().clone();
          insertRow.add(getDirectField(),value);
          insertRow.add(this.listOrderField,itAfter.next());
          Object[] event=new Object[3];
          event[0]=Insert;
          event[1]=getInsertQuery();
          event[2]=insertRow;
          writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
        }
      }
 else {
        Iterator<Integer> itBefore=indexesBefore.iterator();
        Iterator<Integer> itAfter=indexesAfter.iterator();
        while (itBefore.hasNext() || itAfter.hasNext()) {
          if (itBefore.hasNext()) {
            if (itAfter.hasNext()) {
              AbstractRecord updateAtIndexRow=writeQuery.getTranslationRow().clone();
              updateAtIndexRow.add(getDirectField(),value);
              updateAtIndexRow.add(this.listOrderField,itBefore.next());
              Object[] event=new Object[4];
              event[0]=UpdateAtIndex;
              event[1]=updateAtIndexQuery;
              event[2]=updateAtIndexRow;
              DatabaseRecord modifyRow=new DatabaseRecord(1);
              modifyRow.add(this.listOrderField,itAfter.next());
              event[3]=modifyRow;
              writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
            }
 else {
              AbstractRecord deleteAtIndexRow=writeQuery.getTranslationRow().clone();
              deleteAtIndexRow.add(getDirectField(),value);
              deleteAtIndexRow.add(this.listOrderField,itBefore.next());
              Object[] event=new Object[3];
              event[0]=DeleteAtIndex;
              event[1]=deleteAtIndexQuery;
              event[2]=deleteAtIndexRow;
              writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
            }
          }
 else {
            AbstractRecord insertRow=writeQuery.getTranslationRow().clone();
            insertRow.add(getDirectField(),value);
            insertRow.add(this.listOrderField,itAfter.next());
            Object[] event=new Object[3];
            event[0]=Insert;
            event[1]=getInsertQuery();
            event[2]=insertRow;
            writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
          }
        }
      }
    }
  }
}","/** 
 * INTERNAL: Update private owned part.
 */
protected void postUpdateWithChangeSetListOrder(WriteObjectQuery writeQuery) throws DatabaseException {
  ObjectChangeSet changeSet=writeQuery.getObjectChangeSet();
  DirectCollectionChangeRecord changeRecord=(DirectCollectionChangeRecord)changeSet.getChangesForAttributeNamed(this.getAttributeName());
  if (changeRecord == null) {
    return;
  }
  for (int index=0; index < getReferenceKeyFields().size(); index++) {
    DatabaseField referenceKey=getReferenceKeyFields().get(index);
    DatabaseField sourceKey=getSourceKeyFields().get(index);
    Object sourceKeyValue=writeQuery.getTranslationRow().get(sourceKey);
    writeQuery.getTranslationRow().put(referenceKey,sourceKeyValue);
  }
  boolean shouldRepairOrder=false;
  if ((List)changeRecord.getLatestCollection() instanceof IndirectList) {
    shouldRepairOrder=((IndirectList)changeRecord.getLatestCollection()).isListOrderBrokenInDb();
  }
  if (shouldRepairOrder) {
    DeleteObjectQuery deleteQuery=new DeleteObjectQuery();
    deleteQuery.setObject(writeQuery.getObject());
    deleteQuery.setSession(writeQuery.getSession());
    deleteQuery.setTranslationRow(writeQuery.getTranslationRow());
    Object[] eventDeleteAll=new Object[2];
    eventDeleteAll[0]=DeleteAll;
    eventDeleteAll[1]=deleteQuery;
    writeQuery.getSession().getCommitManager().addDataModificationEvent(this,eventDeleteAll);
    for (int i=0; i < ((List)changeRecord.getLatestCollection()).size(); i++) {
      Object value=((List)changeRecord.getLatestCollection()).get(i);
      value=getFieldValue(value,writeQuery.getSession());
      AbstractRecord insertRow=writeQuery.getTranslationRow().clone();
      insertRow.add(getDirectField(),value);
      insertRow.add(this.listOrderField,i);
      Object[] event=new Object[3];
      event[0]=Insert;
      event[1]=getInsertQuery();
      event[2]=insertRow;
      writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
    }
    ((IndirectList)changeRecord.getLatestCollection()).setIsListOrderBrokenInDb(false);
    changeRecord.setOrderHasBeenRepaired(true);
    return;
  }
  if (changeRecord.getChangedIndexes() == null) {
    compareListsForChange((List)changeRecord.getOriginalCollection(),(List)changeRecord.getLatestCollection(),changeRecord,writeQuery.getSession());
  }
  Iterator<Map.Entry<Object,Set[]>> it=changeRecord.getChangedIndexes().entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<Object,Set[]> entry=it.next();
    Object value=entry.getKey();
    if (getValueConverter() != null) {
      value=getValueConverter().convertObjectValueToDataValue(value,writeQuery.getSession());
    }
    Set[] indexes=entry.getValue();
    Set indexesBefore=indexes[0];
    Set indexesAfter=indexes[1];
    if (indexesAfter == null) {
      AbstractRecord deleteRow=writeQuery.getTranslationRow().clone();
      Object[] event=new Object[3];
      event[0]=Delete;
      if (value == null) {
        event[1]=getDeleteNullQuery();
      }
 else {
        deleteRow.add(getDirectField(),value);
        event[1]=getDeleteQuery();
      }
      event[2]=deleteRow;
      writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
    }
 else     if (indexesAfter.isEmpty()) {
      Iterator<Integer> itBefore=indexesBefore.iterator();
      while (itBefore.hasNext()) {
        AbstractRecord deleteAtIndexRow=writeQuery.getTranslationRow().clone();
        deleteAtIndexRow.add(getDirectField(),value);
        deleteAtIndexRow.add(this.listOrderField,itBefore.next());
        Object[] event=new Object[3];
        event[0]=DeleteAtIndex;
        event[1]=deleteAtIndexQuery;
        event[2]=deleteAtIndexRow;
        writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
      }
    }
 else {
      if (indexesBefore == null || indexesBefore.isEmpty()) {
        Iterator<Integer> itAfter=indexesAfter.iterator();
        while (itAfter.hasNext()) {
          AbstractRecord insertRow=writeQuery.getTranslationRow().clone();
          insertRow.add(getDirectField(),value);
          insertRow.add(this.listOrderField,itAfter.next());
          Object[] event=new Object[3];
          event[0]=Insert;
          event[1]=getInsertQuery();
          event[2]=insertRow;
          writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
        }
      }
 else {
        Iterator<Integer> itBefore=indexesBefore.iterator();
        Iterator<Integer> itAfter=indexesAfter.iterator();
        while (itBefore.hasNext() || itAfter.hasNext()) {
          if (itBefore.hasNext()) {
            if (itAfter.hasNext()) {
              AbstractRecord updateAtIndexRow=writeQuery.getTranslationRow().clone();
              updateAtIndexRow.add(getDirectField(),value);
              updateAtIndexRow.add(this.listOrderField,itBefore.next());
              Object[] event=new Object[4];
              event[0]=UpdateAtIndex;
              event[1]=updateAtIndexQuery;
              event[2]=updateAtIndexRow;
              DatabaseRecord modifyRow=new DatabaseRecord(1);
              modifyRow.add(this.listOrderField,itAfter.next());
              event[3]=modifyRow;
              writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
            }
 else {
              AbstractRecord deleteAtIndexRow=writeQuery.getTranslationRow().clone();
              deleteAtIndexRow.add(getDirectField(),value);
              deleteAtIndexRow.add(this.listOrderField,itBefore.next());
              Object[] event=new Object[3];
              event[0]=DeleteAtIndex;
              event[1]=deleteAtIndexQuery;
              event[2]=deleteAtIndexRow;
              writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
            }
          }
 else {
            AbstractRecord insertRow=writeQuery.getTranslationRow().clone();
            insertRow.add(getDirectField(),value);
            insertRow.add(this.listOrderField,itAfter.next());
            Object[] event=new Object[3];
            event[0]=Insert;
            event[1]=getInsertQuery();
            event[2]=insertRow;
            writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
          }
        }
      }
    }
  }
}"
66424,"/** 
 * INTERNAL: Initialize and validate the mapping properties.
 */
@Override public void initialize(AbstractSession session) throws DescriptorException {
  if (isKeyForSourceSpecified()) {
    initializeSourceKeys(session);
  }
 else {
    initializeSourceKeysWithDefaults(session);
  }
  initializeReferenceTable(session);
  initializeReferenceKeys(session);
  initializeDirectField(session);
  if (getReferenceTable().getName().indexOf(' ') != -1) {
    String beginQuote=((DatasourcePlatform)session.getDatasourcePlatform()).getStartDelimiter();
    String endQuote=((DatasourcePlatform)session.getDatasourcePlatform()).getEndDelimiter();
    if (getReferenceTable().getName().indexOf(beginQuote) == -1) {
      getReferenceTable().setName(beginQuote + getReferenceTable().getName() + endQuote);
    }
  }
  if (this.listOrderField != null) {
    this.initializeListOrderField(session);
  }
  getContainerPolicy().initialize(session,referenceTable);
  if (!hasCustomSelectionQuery()) {
    initOrRebuildSelectQuery();
    selectionQuery.setName(getAttributeName());
    if (shouldInitializeSelectionCriteria()) {
      initializeSelectionCriteria(session);
      initializeSelectionStatement(session);
    }
    if (!getSelectionQuery().hasSessionName()) {
      getSelectionQuery().setSessionName(session.getName());
    }
  }
  if ((getValueConverter() != null) && (getSelectionQuery() instanceof DirectReadQuery)) {
    ((DirectReadQuery)getSelectionQuery()).setValueConverter(getValueConverter());
  }
  initializeDeleteAllQuery(session);
  initializeDeleteQuery(session);
  initializeInsertQuery(session);
  initializeDeleteAtIndexQuery(session);
  initializeUpdateAtIndexQuery(session);
  if (getHistoryPolicy() != null) {
    getHistoryPolicy().initialize(session);
  }
  if (getValueConverter() != null) {
    getValueConverter().initialize(this,session);
  }
  super.initialize(session);
}","/** 
 * INTERNAL: Initialize and validate the mapping properties.
 */
@Override public void initialize(AbstractSession session) throws DescriptorException {
  if (isKeyForSourceSpecified()) {
    initializeSourceKeys(session);
  }
 else {
    initializeSourceKeysWithDefaults(session);
  }
  initializeReferenceTable(session);
  initializeReferenceKeys(session);
  initializeDirectField(session);
  if (getReferenceTable().getName().indexOf(' ') != -1) {
    String beginQuote=((DatasourcePlatform)session.getDatasourcePlatform()).getStartDelimiter();
    String endQuote=((DatasourcePlatform)session.getDatasourcePlatform()).getEndDelimiter();
    if (getReferenceTable().getName().indexOf(beginQuote) == -1) {
      getReferenceTable().setName(beginQuote + getReferenceTable().getName() + endQuote);
    }
  }
  if (this.listOrderField != null) {
    this.initializeListOrderField(session);
  }
  getContainerPolicy().initialize(session,referenceTable);
  if (!hasCustomSelectionQuery()) {
    initOrRebuildSelectQuery();
    selectionQuery.setName(getAttributeName());
    if (shouldInitializeSelectionCriteria()) {
      initializeSelectionCriteria(session);
      initializeSelectionStatement(session);
    }
    if (!getSelectionQuery().hasSessionName()) {
      getSelectionQuery().setSessionName(session.getName());
    }
  }
  if ((getValueConverter() != null) && (getSelectionQuery() instanceof DirectReadQuery)) {
    ((DirectReadQuery)getSelectionQuery()).setValueConverter(getValueConverter());
  }
  initializeDeleteAllQuery(session);
  initializeDeleteQuery(session);
  initializeDeleteNullQuery(session);
  initializeInsertQuery(session);
  initializeDeleteAtIndexQuery(session);
  initializeUpdateAtIndexQuery(session);
  if (getHistoryPolicy() != null) {
    getHistoryPolicy().initialize(session);
  }
  if (getValueConverter() != null) {
    getValueConverter().initialize(this,session);
  }
  super.initialize(session);
}"
66425,"/** 
 * INTERNAL: Update private owned part.
 */
protected void postUpdateWithChangeSet(WriteObjectQuery writeQuery) throws DatabaseException {
  ObjectChangeSet changeSet=writeQuery.getObjectChangeSet();
  DirectCollectionChangeRecord changeRecord=(DirectCollectionChangeRecord)changeSet.getChangesForAttributeNamed(this.getAttributeName());
  if (changeRecord == null) {
    return;
  }
  for (int index=0; index < getReferenceKeyFields().size(); index++) {
    DatabaseField referenceKey=getReferenceKeyFields().get(index);
    DatabaseField sourceKey=getSourceKeyFields().get(index);
    Object sourceKeyValue=writeQuery.getTranslationRow().get(sourceKey);
    writeQuery.getTranslationRow().put(referenceKey,sourceKeyValue);
  }
  for (Iterator iterator=changeRecord.getRemoveObjectMap().keySet().iterator(); iterator.hasNext(); ) {
    Object object=iterator.next();
    AbstractRecord thisRow=writeQuery.getTranslationRow().clone();
    Object value=getFieldValue(object,writeQuery.getSession());
    thisRow.add(getDirectField(),value);
    Object[] event=new Object[3];
    event[0]=Delete;
    event[1]=getDeleteQuery();
    event[2]=thisRow;
    writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
    Integer count=(Integer)changeRecord.getCommitAddMap().get(object);
    if (count != null) {
      for (int counter=count.intValue(); counter > 0; --counter) {
        thisRow=writeQuery.getTranslationRow().clone();
        thisRow.add(getDirectField(),value);
        event=new Object[3];
        event[0]=Insert;
        event[1]=getInsertQuery();
        event[2]=thisRow;
        writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
      }
    }
  }
  for (Iterator iterator=changeRecord.getAddObjectMap().keySet().iterator(); iterator.hasNext(); ) {
    Object object=iterator.next();
    Integer count=(Integer)changeRecord.getAddObjectMap().get(object);
    for (int counter=count.intValue(); counter > 0; --counter) {
      AbstractRecord thisRow=writeQuery.getTranslationRow().clone();
      Object value=object;
      if (getValueConverter() != null) {
        value=getValueConverter().convertObjectValueToDataValue(value,writeQuery.getSession());
      }
      thisRow.add(getDirectField(),value);
      Object[] event=new Object[3];
      event[0]=Insert;
      event[1]=getInsertQuery();
      event[2]=thisRow;
      writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
    }
  }
}","/** 
 * INTERNAL: Update private owned part.
 */
protected void postUpdateWithChangeSet(WriteObjectQuery writeQuery) throws DatabaseException {
  ObjectChangeSet changeSet=writeQuery.getObjectChangeSet();
  DirectCollectionChangeRecord changeRecord=(DirectCollectionChangeRecord)changeSet.getChangesForAttributeNamed(this.getAttributeName());
  if (changeRecord == null) {
    return;
  }
  for (int index=0; index < getReferenceKeyFields().size(); index++) {
    DatabaseField referenceKey=getReferenceKeyFields().get(index);
    DatabaseField sourceKey=getSourceKeyFields().get(index);
    Object sourceKeyValue=writeQuery.getTranslationRow().get(sourceKey);
    writeQuery.getTranslationRow().put(referenceKey,sourceKeyValue);
  }
  for (Iterator iterator=changeRecord.getRemoveObjectMap().keySet().iterator(); iterator.hasNext(); ) {
    Object object=iterator.next();
    AbstractRecord thisRow=writeQuery.getTranslationRow().clone();
    Object value=getFieldValue(object,writeQuery.getSession());
    Object[] event=new Object[3];
    event[0]=Delete;
    if (value == null) {
      event[1]=getDeleteNullQuery();
    }
 else {
      thisRow.add(getDirectField(),value);
      event[1]=getDeleteQuery();
    }
    event[2]=thisRow;
    writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
    Integer count=(Integer)changeRecord.getCommitAddMap().get(object);
    if (count != null) {
      for (int counter=count.intValue(); counter > 0; --counter) {
        thisRow=writeQuery.getTranslationRow().clone();
        thisRow.add(getDirectField(),value);
        event=new Object[3];
        event[0]=Insert;
        event[1]=getInsertQuery();
        event[2]=thisRow;
        writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
      }
    }
  }
  for (Iterator iterator=changeRecord.getAddObjectMap().keySet().iterator(); iterator.hasNext(); ) {
    Object object=iterator.next();
    Integer count=(Integer)changeRecord.getAddObjectMap().get(object);
    for (int counter=count.intValue(); counter > 0; --counter) {
      AbstractRecord thisRow=writeQuery.getTranslationRow().clone();
      Object value=object;
      if (getValueConverter() != null) {
        value=getValueConverter().convertObjectValueToDataValue(value,writeQuery.getSession());
      }
      thisRow.add(getDirectField(),value);
      Object[] event=new Object[3];
      event[0]=Insert;
      event[1]=getInsertQuery();
      event[2]=thisRow;
      writeQuery.getSession().getCommitManager().addDataModificationEvent(this,event);
    }
  }
}"
66426,"/** 
 * INTERNAL: The mapping clones itself to create deep copy.
 */
@Override public Object clone(){
  DirectCollectionMapping clone=(DirectCollectionMapping)super.clone();
  clone.setSourceKeyFields(cloneFields(getSourceKeyFields()));
  clone.setReferenceKeyFields(cloneFields(getReferenceKeyFields()));
  if (this.changeSetDeleteQuery != null) {
    clone.changeSetDeleteQuery=(ModifyQuery)this.changeSetDeleteQuery.clone();
  }
  if (this.deleteAtIndexQuery != null) {
    clone.deleteAtIndexQuery=(ModifyQuery)this.deleteAtIndexQuery.clone();
  }
  if (this.updateAtIndexQuery != null) {
    clone.updateAtIndexQuery=(ModifyQuery)this.updateAtIndexQuery.clone();
  }
  return clone;
}","/** 
 * INTERNAL: The mapping clones itself to create deep copy.
 */
@Override public Object clone(){
  DirectCollectionMapping clone=(DirectCollectionMapping)super.clone();
  clone.setSourceKeyFields(cloneFields(getSourceKeyFields()));
  clone.setReferenceKeyFields(cloneFields(getReferenceKeyFields()));
  if (this.changeSetDeleteQuery != null) {
    clone.changeSetDeleteQuery=(ModifyQuery)this.changeSetDeleteQuery.clone();
  }
  if (this.changeSetDeleteNullQuery != null) {
    clone.changeSetDeleteNullQuery=(ModifyQuery)this.changeSetDeleteNullQuery.clone();
  }
  if (this.deleteAtIndexQuery != null) {
    clone.deleteAtIndexQuery=(ModifyQuery)this.deleteAtIndexQuery.clone();
  }
  if (this.updateAtIndexQuery != null) {
    clone.updateAtIndexQuery=(ModifyQuery)this.updateAtIndexQuery.clone();
  }
  return clone;
}"
66427,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + XMLConstants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(XMLConstants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + XMLConstants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + XMLConstants.COLON)) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),atts.getValue(x));
    }
 else {
      String value=atts.getValue(x);
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value);
      if (XMLConstants.SCHEMA_INSTANCE_URL.equals(attributeNamespaceURI) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(atts.getLocalName(x))) {
        int colonIndex=value.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=value.substring(0,colonIndex);
          String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          if (uri == null || uri.length() == 0) {
            String theUri=owningRecord.resolveNamespacePrefix(prefix);
            if (theUri != null && theUri.length() > 0) {
              element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,theUri);
            }
          }
        }
      }
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (stringBuffer.length() > 0) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    Node parent=this.nodes.get(nodes.size() - 1);
    parent.appendChild(text);
    stringBuffer.reset();
  }
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + XMLConstants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(XMLConstants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + XMLConstants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + XMLConstants.COLON)) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),atts.getValue(x));
    }
 else {
      String value=atts.getValue(x);
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value);
      if (XMLConstants.SCHEMA_INSTANCE_URL.equals(attributeNamespaceURI) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(atts.getLocalName(x))) {
        int colonIndex=value.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=value.substring(0,colonIndex);
          String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          if (uri == null || uri.length() == 0) {
            String theUri=owningRecord.resolveNamespacePrefix(prefix);
            if (theUri != null && theUri.length() > 0) {
              element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,theUri);
            }
          }
        }
      }
    }
  }
}"
66428,"/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 */
public void resolveReferences(AbstractSession session){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object currentObject=reference.getSourceObject();
      Object container=null;
      if (mapping.getReuseContainer()) {
        container=mapping.getAttributeAccessor().getAttributeValueFromObject(currentObject);
      }
 else {
        container=cPolicy.containerInstance();
      }
      createPKVectorsFromMap(reference);
      for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
        Object primaryKey=pkIt.next();
        Object value=session.getIdentityMapAccessor().getFromIdentityMap(primaryKey,reference.getTargetClass());
        if (value != null) {
          cPolicy.addInto(value,container,session);
        }
      }
      mapping.setAttributeValueInObject(currentObject,container);
      if (mapping.getInverseReferenceMapping() != null) {
        Object iterator=cPolicy.iteratorFor(container);
        while (cPolicy.hasNext(iterator)) {
          Object next=cPolicy.next(iterator,session);
          if (mapping.getInverseReferenceMapping().getContainerPolicy() == null) {
            mapping.getInverseReferenceMapping().getAttributeAccessor().setAttributeValueInObject(next,currentObject);
          }
 else {
            Object backpointerContainer=mapping.getInverseReferenceMapping().getAttributeAccessor().getAttributeValueFromObject(next);
            if (backpointerContainer == null) {
              backpointerContainer=mapping.getInverseReferenceMapping().getContainerPolicy().containerInstance();
              mapping.getInverseReferenceMapping().getAttributeAccessor().setAttributeValueInObject(next,backpointerContainer);
            }
            mapping.getInverseReferenceMapping().getContainerPolicy().addInto(currentObject,backpointerContainer,session);
          }
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      Object value=session.getIdentityMapAccessor().getFromIdentityMap(reference.getPrimaryKey(),reference.getTargetClass());
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      if (mapping.getInverseReferenceMapping() != null) {
        AttributeAccessor backpointerAccessor=mapping.getInverseReferenceMapping().getAttributeAccessor();
        if (mapping.getInverseReferenceMapping().getContainerPolicy() == null) {
          backpointerAccessor.setAttributeValueInObject(value,reference.getSourceObject());
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=mapping.getInverseReferenceMapping().getContainerPolicy().containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          mapping.getInverseReferenceMapping().getContainerPolicy().addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList();
}","/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 */
public void resolveReferences(AbstractSession session){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    Object referenceSourceObject=reference.getSourceObject();
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=null;
      if (mapping.getReuseContainer()) {
        container=mapping.getAttributeAccessor().getAttributeValueFromObject(referenceSourceObject);
      }
 else {
        container=cPolicy.containerInstance();
      }
      createPKVectorsFromMap(reference,mapping);
      for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
        CacheId primaryKey=(CacheId)pkIt.next();
        Object value=getValue(session,reference,primaryKey);
        if (value != null) {
          cPolicy.addInto(value,container,session);
        }
      }
      mapping.setAttributeValueInObject(referenceSourceObject,container);
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        Object iterator=cPolicy.iteratorFor(container);
        while (cPolicy.hasNext(iterator)) {
          Object next=cPolicy.next(iterator,session);
          if (backpointerContainerPolicy == null) {
            backpointerAccessor.setAttributeValueInObject(next,referenceSourceObject);
          }
 else {
            Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(next);
            if (backpointerContainer == null) {
              backpointerContainer=backpointerContainerPolicy.containerInstance();
              backpointerAccessor.setAttributeValueInObject(next,backpointerContainer);
            }
            backpointerContainerPolicy.addInto(referenceSourceObject,backpointerContainer,session);
          }
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      CacheId primaryKey=(CacheId)reference.getPrimaryKey();
      Object value=getValue(session,reference,primaryKey);
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList();
}"
66429,"/** 
 * INTERNAL: Create primary key values to be used for cache lookup.  The map of primary keys on the reference is keyed on the reference descriptors primary key field names.  Each of these primary keys contains all of the values for a particular key - in the order that they we read in from the document.  For example, if the key field names are A, B, and C, and there are three reference object instances, then the hashmap would have the following: (A=[1,2,3], B=[X,Y,Z], C=[Jim, Joe, Jane]).  If the primary key field names on the reference descriptor contained [B, C, A], then the result of this method call would be reference.primaryKeys=([X, Jim, 1], [Y, Joe, 2], [Z, Jane, 3]).
 * @param reference
 */
private void createPKVectorsFromMap(Reference reference){
  XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
  Vector pks=new Vector();
  Vector pkFields=mapping.getReferenceDescriptor().getPrimaryKeyFieldNames();
  if (pkFields.size() <= 0) {
    return;
  }
  CacheId pkVals;
  boolean init=true;
  for (Iterator pkFieldNameIt=pkFields.iterator(); pkFieldNameIt.hasNext(); ) {
    pkVals=(CacheId)reference.getPrimaryKeyMap().get(pkFieldNameIt.next());
    if (pkVals == null) {
      return;
    }
    if (init) {
      for (int i=0; i < pkVals.getPrimaryKey().length; i++) {
        pks.add(new CacheId(new Object[0]));
      }
      init=false;
    }
    for (int i=0; i < pkVals.getPrimaryKey().length; i++) {
      Object val=pkVals.getPrimaryKey()[i];
      ((CacheId)pks.get(i)).add(val);
    }
  }
  reference.primaryKey=pks;
}","/** 
 * INTERNAL: Create primary key values to be used for cache lookup.  The map of primary keys on the reference is keyed on the reference descriptors primary key field names.  Each of these primary keys contains all of the values for a particular key - in the order that they we read in from the document.  For example, if the key field names are A, B, and C, and there are three reference object instances, then the hashmap would have the following: (A=[1,2,3], B=[X,Y,Z], C=[Jim, Joe, Jane]).  If the primary key field names on the reference descriptor contained [B, C, A], then the result of this method call would be reference.primaryKeys=([X, Jim, 1], [Y, Joe, 2], [Z, Jane, 3]).
 * @param reference
 */
private void createPKVectorsFromMap(Reference reference,XMLCollectionReferenceMapping mapping){
  ClassDescriptor referenceDescriptor=mapping.getReferenceDescriptor();
  Vector pks=new Vector();
  if (null == referenceDescriptor) {
    CacheId pkVals=(CacheId)reference.getPrimaryKeyMap().get(null);
    if (null == pkVals) {
      return;
    }
    for (int x=0; x < pkVals.getPrimaryKey().length; x++) {
      Object[] values=new Object[1];
      values[0]=pkVals.getPrimaryKey()[x];
      pks.add(new CacheId(values));
    }
  }
 else {
    Vector pkFields=referenceDescriptor.getPrimaryKeyFieldNames();
    if (pkFields.isEmpty()) {
      return;
    }
    boolean init=true;
    for (Iterator pkFieldNameIt=pkFields.iterator(); pkFieldNameIt.hasNext(); ) {
      CacheId pkVals=(CacheId)reference.getPrimaryKeyMap().get(pkFieldNameIt.next());
      if (pkVals == null) {
        return;
      }
      if (init) {
        for (int i=0; i < pkVals.getPrimaryKey().length; i++) {
          pks.add(new CacheId(new Object[0]));
        }
        init=false;
      }
      for (int i=0; i < pkVals.getPrimaryKey().length; i++) {
        Object val=pkVals.getPrimaryKey()[i];
        ((CacheId)pks.get(i)).add(val);
      }
    }
  }
  reference.setPrimaryKey(pks);
}"
66430,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object targetObject,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlObjectReferenceMapping.buildFieldValue(targetObject,xmlField,session);
  if (fieldValue == null) {
    if (null != targetObject) {
      XMLField fkField=(XMLField)xmlObjectReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
      fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(targetObject,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
    }
    if (null == fieldValue) {
      return false;
    }
  }
  QName schemaType=getSchemaType(xmlField,fieldValue,session);
  String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    marshalRecord.characters(stringValue);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object targetObject,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlObjectReferenceMapping.buildFieldValue(targetObject,xmlField,session);
  if (fieldValue == null) {
    if (null != targetObject) {
      XMLField fkField=(XMLField)xmlObjectReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
      if (null == fkField) {
        XMLDescriptor targetDescriptor=(XMLDescriptor)session.getDescriptor(targetObject);
        fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(targetObject,targetDescriptor.getPrimaryKeyFields().get(0).getName(),targetDescriptor.getNamespaceResolver(),Object.class);
      }
 else {
        fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(targetObject,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
      }
    }
    if (null == fieldValue) {
      return false;
    }
  }
  QName schemaType=getSchemaType(xmlField,fieldValue,session);
  String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    marshalRecord.characters(stringValue);
  }
  return true;
}"
66431,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=null;
    boolean isPrimitiveType=false;
    Class primitiveWrapperClass=null;
    String type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (null != type) {
      XPathFragment typeFragment=new XPathFragment(type);
      if (null != unmarshalNamespaceResolver) {
        typeFragment.setNamespaceURI(unmarshalNamespaceResolver.getNamespaceURI(typeFragment.getPrefix()));
      }
      xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      if (xmlDescriptor == null) {
        primitiveWrapperClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(new QName(typeFragment.getNamespaceURI(),typeFragment.getLocalName()));
      }
    }
    if (xmlDescriptor == null) {
      String name;
      if (localName == null || localName.length() == 0) {
        name=qName;
      }
 else {
        name=localName;
      }
      QName rootQName;
      if (namespaceURI == null || namespaceURI.length() == 0) {
        rootQName=new QName(name);
      }
 else {
        rootQName=new QName(namespaceURI,name);
      }
      xmlDescriptor=xmlContext.getDescriptor(rootQName);
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(XMLDescriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
        if (xmlDescriptor == null) {
          isPrimitiveType=primitiveWrapperClass != null;
        }
      }
      if (null == xmlDescriptor && !isPrimitiveType) {
        if (this.keepAsElementPolicy != UnmarshalKeepAsElementPolicy.KEEP_NONE_AS_ELEMENT) {
          this.documentBuilder=new SAXDocumentBuilder();
          documentBuilder.startDocument();
          for (          String prefix : this.unmarshalNamespaceResolver.getPrefixes()) {
            documentBuilder.startPrefixMapping(prefix,this.unmarshalNamespaceResolver.getNamespaceURI(prefix));
          }
          documentBuilder.startElement(namespaceURI,localName,qName,atts);
          this.xmlReader.setContentHandler(documentBuilder);
          return;
        }
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.setUnmarshalRecord(unmappedContentHandlerWrapper);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getReadSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (isPrimitiveType) {
      unmarshalRecord=new XMLRootRecord(primitiveWrapperClass);
      unmarshalRecord.setSession((AbstractSession)unmarshaller.getXMLContext().getSession(0));
    }
 else     if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecord(null);
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator == null) {
            throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
          classValue=(Class)indicator;
        }
      }
      if (classValue != null) {
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
 else {
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
    this.descriptor=xmlDescriptor;
    this.rootRecord=unmarshalRecord;
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(locator);
    }
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    unmarshalRecord.setAttributes(atts);
    if (atts != null && null == atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.startDocument();
      unmarshalRecord.initializeRecord(null);
      xmlReader.setContentHandler(unmarshalRecord);
      xmlReader.setLexicalHandler(unmarshalRecord);
      unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
    }
 else {
      unmarshalRecord.setRootElementName(qName);
      unmarshalRecord.setLocalName(localName);
      unmarshalRecord.setRootElementNamespaceUri(namespaceURI);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=null;
    boolean isPrimitiveType=false;
    Class primitiveWrapperClass=null;
    String type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (null != type) {
      XPathFragment typeFragment=new XPathFragment(type);
      if (null != unmarshalNamespaceResolver) {
        typeFragment.setNamespaceURI(unmarshalNamespaceResolver.getNamespaceURI(typeFragment.getPrefix()));
      }
      xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      if (xmlDescriptor == null) {
        primitiveWrapperClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(new QName(typeFragment.getNamespaceURI(),typeFragment.getLocalName()));
      }
    }
    if (xmlDescriptor == null) {
      String name;
      if (localName == null || localName.length() == 0) {
        name=qName;
      }
 else {
        name=localName;
      }
      QName rootQName;
      if (namespaceURI == null || namespaceURI.length() == 0) {
        rootQName=new QName(name);
      }
 else {
        rootQName=new QName(namespaceURI,name);
      }
      xmlDescriptor=xmlContext.getDescriptor(rootQName);
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(XMLDescriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
        if (xmlDescriptor == null) {
          isPrimitiveType=primitiveWrapperClass != null;
        }
      }
      if (null == xmlDescriptor && !isPrimitiveType) {
        if (this.keepAsElementPolicy != UnmarshalKeepAsElementPolicy.KEEP_NONE_AS_ELEMENT) {
          this.documentBuilder=new SAXDocumentBuilder();
          documentBuilder.startDocument();
          for (          String prefix : this.unmarshalNamespaceResolver.getPrefixes()) {
            documentBuilder.startPrefixMapping(prefix,this.unmarshalNamespaceResolver.getNamespaceURI(prefix));
          }
          documentBuilder.startElement(namespaceURI,localName,qName,atts);
          this.xmlReader.setContentHandler(documentBuilder);
          return;
        }
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.setUnmarshalRecord(unmappedContentHandlerWrapper);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getReadSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (isPrimitiveType) {
      unmarshalRecord=new XMLRootRecord(primitiveWrapperClass);
      unmarshalRecord.setSession((AbstractSession)unmarshaller.getXMLContext().getSession(0));
    }
 else     if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecord(null);
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator == null) {
            throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
          classValue=(Class)indicator;
        }
      }
      if (classValue != null) {
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
 else {
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
    this.descriptor=xmlDescriptor;
    this.rootRecord=unmarshalRecord;
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(locator);
    }
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    unmarshalRecord.setAttributes(atts);
    if (atts != null && null != atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
      unmarshalRecord.setNil(true);
    }
    unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
    unmarshalRecord.startDocument();
    unmarshalRecord.initializeRecord(null);
    xmlReader.setContentHandler(unmarshalRecord);
    xmlReader.setLexicalHandler(unmarshalRecord);
    unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
66432,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation())) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,null,root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (null == object) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.XMLNS + XMLConstants.COLON + XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.SCHEMA_INSTANCE_PREFIX + XMLConstants.COLON + XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
    }
 else {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
      marshalRecord.characters(value);
    }
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,null,root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
      marshalRecord.characters(value);
    }
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}"
66433,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        if (!isXsiNil) {
          if (textNode.getUnmarshalNodeValue().isMappingNodeValue()) {
            textNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
          }
        }
 else {
          isXsiNil=false;
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if (null != xPathFragment && xPathFragment.nameIsText()) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if ((0 == levelIndex) && (null != getParentRecord()) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=getParentRecord();
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        if (!isXsiNil) {
          if (textNode.getUnmarshalNodeValue().isMappingNodeValue()) {
            textNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
          }
        }
 else {
          if (textNode.getUnmarshalNodeValue().isMappingNodeValue()) {
            DatabaseMapping mapping=((MappingNodeValue)textNode.getUnmarshalNodeValue()).getMapping();
            if (mapping.isAbstractDirectMapping()) {
              Object nullValue=((AbstractDirectMapping)mapping).getNullValue();
              if (!(""String_Node_Str"".equals(nullValue))) {
                setAttributeValue(null,mapping);
                this.removeNullCapableValue((NullCapableValue)textNode.getUnmarshalNodeValue());
              }
            }
            isXsiNil=false;
          }
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if (null != xPathFragment && xPathFragment.nameIsText()) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if ((0 == levelIndex) && (null != getParentRecord()) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=getParentRecord();
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
66434,"public void updateAttributeWithObjectTest(){
  EntityManager em=createEntityManager(""String_Node_Str"");
  ServerSession session=(ServerSession)JpaHelper.getServerSession(em.getEntityManagerFactory());
  ClassDescriptor descriptor=session.getDescriptor(Employee.class);
  UpdateListener listener=new UpdateListener();
  descriptor.getEventManager().addListener(listener);
  beginTransaction(em);
  Employee emp=new Employee();
  emp.setFirstName(""String_Node_Str"");
  EmploymentPeriod period=new EmploymentPeriod();
  period.setStartDate(Date.valueOf(""String_Node_Str""));
  period.setEndDate(Date.valueOf(""String_Node_Str""));
  emp.setPeriod(period);
  em.persist(emp);
  em.flush();
  em.clear();
  emp=em.find(Employee.class,emp.getId());
  emp.setFirstName(""String_Node_Str"");
  em.flush();
  em.refresh(emp);
  assertTrue(""String_Node_Str"",emp.getPeriod().getStartDate().equals(Date.valueOf(""String_Node_Str"")) && emp.getPeriod().getEndDate().equals(Date.valueOf(""String_Node_Str"")));
  em.getTransaction().rollback();
  descriptor.getEventManager().removeListener(listener);
}","public void updateAttributeWithObjectTest(){
  EntityManagerFactory factory=getEntityManagerFactory(""String_Node_Str"");
  EntityManager em=factory.createEntityManager();
  ServerSession session=(ServerSession)JpaHelper.getServerSession(factory);
  ClassDescriptor descriptor=session.getDescriptor(Employee.class);
  UpdateListener listener=new UpdateListener();
  descriptor.getEventManager().addListener(listener);
  beginTransaction(em);
  Employee emp=new Employee();
  emp.setFirstName(""String_Node_Str"");
  EmploymentPeriod period=new EmploymentPeriod();
  period.setStartDate(Date.valueOf(""String_Node_Str""));
  period.setEndDate(Date.valueOf(""String_Node_Str""));
  emp.setPeriod(period);
  em.persist(emp);
  em.flush();
  em.clear();
  emp=em.find(Employee.class,emp.getId());
  emp.setFirstName(""String_Node_Str"");
  em.flush();
  em.refresh(emp);
  assertTrue(""String_Node_Str"",emp.getPeriod().getStartDate().equals(Date.valueOf(""String_Node_Str"")) && emp.getPeriod().getEndDate().equals(Date.valueOf(""String_Node_Str"")));
  em.getTransaction().rollback();
  descriptor.getEventManager().removeListener(listener);
}"
66435,"public void updateAttributeWithObjectTest(){
  EntityManagerFactory factory=getEntityManagerFactory(""String_Node_Str"");
  EntityManager em=factory.createEntityManager();
  ServerSession session=(ServerSession)JpaHelper.getServerSession(factory);
  ClassDescriptor descriptor=session.getDescriptor(Employee.class);
  UpdateListener listener=new UpdateListener();
  descriptor.getEventManager().addListener(listener);
  beginTransaction(em);
  Employee emp=new Employee();
  emp.setFirstName(""String_Node_Str"");
  EmploymentPeriod period=new EmploymentPeriod();
  period.setStartDate(Date.valueOf(""String_Node_Str""));
  period.setEndDate(Date.valueOf(""String_Node_Str""));
  emp.setPeriod(period);
  em.persist(emp);
  em.flush();
  em.clear();
  emp=em.find(Employee.class,emp.getId());
  emp.setFirstName(""String_Node_Str"");
  em.flush();
  em.refresh(emp);
  assertTrue(""String_Node_Str"",emp.getPeriod().getStartDate().equals(Date.valueOf(""String_Node_Str"")) && emp.getPeriod().getEndDate().equals(Date.valueOf(""String_Node_Str"")));
  rollbackTransaction(em);
  descriptor.getEventManager().removeListener(listener);
}","public void updateAttributeWithObjectTest(){
  EntityManagerFactory factory=getEntityManagerFactory(""String_Node_Str"");
  EntityManager em=factory.createEntityManager();
  ServerSession session=JUnitTestCase.getServerSession(""String_Node_Str"");
  ClassDescriptor descriptor=session.getDescriptor(Employee.class);
  UpdateListener listener=new UpdateListener();
  descriptor.getEventManager().addListener(listener);
  beginTransaction(em);
  Employee emp=new Employee();
  emp.setFirstName(""String_Node_Str"");
  EmploymentPeriod period=new EmploymentPeriod();
  period.setStartDate(Date.valueOf(""String_Node_Str""));
  period.setEndDate(Date.valueOf(""String_Node_Str""));
  emp.setPeriod(period);
  em.persist(emp);
  em.flush();
  em.clear();
  emp=em.find(Employee.class,emp.getId());
  emp.setFirstName(""String_Node_Str"");
  em.flush();
  em.refresh(emp);
  assertTrue(""String_Node_Str"",emp.getPeriod().getStartDate().equals(Date.valueOf(""String_Node_Str"")) && emp.getPeriod().getEndDate().equals(Date.valueOf(""String_Node_Str"")));
  rollbackTransaction(em);
  descriptor.getEventManager().removeListener(listener);
}"
66436,"/** 
 * @return Returns the wrapperByteArray2Blob.
 */
@Basic @Column(name=""String_Node_Str"") @Lob @Mutable public Byte[] getWrapperByteArray2Blob(){
  return _wrapperByteArray2Blob;
}","/** 
 * @return Returns the wrapperByteArray2Blob.
 */
@Basic @Column(name=""String_Node_Str"",length=65535) @Lob @Mutable public Byte[] getWrapperByteArray2Blob(){
  return _wrapperByteArray2Blob;
}"
66437,"/** 
 * @return Returns the serializable.
 */
@Basic @Column(name=""String_Node_Str"") @Lob public Serializable getSerializable(){
  return _serializable;
}","/** 
 * @return Returns the serializable.
 */
@Basic @Column(name=""String_Node_Str"",length=65535) @Lob public Serializable getSerializable(){
  return _serializable;
}"
66438,"/** 
 * @return Returns the primitiveByteArray2Blob.
 */
@Basic @Column(name=""String_Node_Str"") @Lob @Mutable public byte[] getPrimitiveByteArray2Blob(){
  return _primitiveByteArray2Blob;
}","/** 
 * @return Returns the primitiveByteArray2Blob.
 */
@Basic @Column(name=""String_Node_Str"",length=65535) @Lob @Mutable public byte[] getPrimitiveByteArray2Blob(){
  return _primitiveByteArray2Blob;
}"
66439,"/** 
 * INTERNAL: This method should only be called when using name access and presumably for dynamic persistence. No method validation is done and either the access methods specified or the default get and set methods for name access will be used.
 */
protected MetadataMethod getAccessibleNameMethod(MappingAccessor accessor){
  AccessMethodsMetadata accessMethods=accessor.getAccessMethods();
  MetadataMethod getMethod=new MetadataMethod(getMetadataFactory(),getJavaClass());
  MetadataMethod setMethod=new MetadataMethod(getMetadataFactory(),getJavaClass());
  getMethod.setSetMethod(setMethod);
  getMethod.setAttributeName(accessor.getName());
  if (accessMethods != null) {
    getMethod.setName(accessMethods.getGetMethodName());
    setMethod.setName(accessMethods.getSetMethodName());
  }
 else {
    getMethod.setName(MetadataMethod.DEFAULT_NAME_ACCESS_GET_METHOD);
    setMethod.setName(MetadataMethod.DEFAULT_NAME_ACCESS_SET_METHOD);
  }
  if (accessor.getRawClass() == null) {
    throw ValidationException.noAttributeTypeSpecification(accessor.getAttributeName(),getJavaClassName(),getLocation());
  }
  return getMethod;
}","/** 
 * INTERNAL: This method should only be called when using name access and presumably for dynamic persistence. No method validation is done and either the access methods specified or the default get and set methods for name access will be used.
 */
protected MetadataMethod getAccessibleNameMethod(MappingAccessor accessor){
  AccessMethodsMetadata accessMethods=accessor.getAccessMethods();
  MetadataMethod getMethod=new MetadataMethod(getMetadataFactory(),getJavaClass());
  MetadataMethod setMethod=new MetadataMethod(getMetadataFactory(),getJavaClass());
  getMethod.setSetMethod(setMethod);
  getMethod.setAttributeName(accessor.getName());
  if (accessMethods != null) {
    getMethod.setName(accessMethods.getGetMethodName());
    setMethod.setName(accessMethods.getSetMethodName());
  }
 else {
    getMethod.setName(MetadataMethod.DEFAULT_VIRTUAL_ACCESS_GET_METHOD);
    setMethod.setName(MetadataMethod.DEFAULT_VIRTUAL_ACCESS_SET_METHOD);
  }
  if (accessor.getRawClass() == null) {
    throw ValidationException.noAttributeTypeSpecification(accessor.getAttributeName(),getJavaClassName(),getLocation());
  }
  return getMethod;
}"
66440,"/** 
 * INTERNAL: Add the accessors from this class accessors java class to the descriptor tied to this class accessor. This method is called for every class accessor and is also called from parent class accessors to each of its subclasses of a TABLE_PER_CLASS inheritance strategy. Add accessors is called in the preProcess stage and must not be called until its owning class accessor has processed its access type.
 */
public void addAccessors(){
  if (m_attributes != null) {
    for (    MappingAccessor accessor : m_attributes.getAccessors()) {
      MetadataAccessibleObject accessibleObject=null;
      accessor.initXMLMappingAccessor(this);
      if (accessor.usesVirtualAccess()) {
        accessibleObject=getAccessibleNameMethod(accessor);
      }
 else       if (accessor.usesPropertyAccess()) {
        accessibleObject=getAccessibleMethod(accessor);
      }
 else {
        accessibleObject=getAccessibleField(accessor);
      }
      if (accessibleObject != null) {
        accessor.initXMLObject(accessibleObject,getEntityMappings());
        accessor.initAccess();
        addAccessor(accessor);
      }
    }
  }
  if (!usesNameAccess()) {
    if (usesPropertyAccess()) {
      addAccessorMethods(false);
    }
 else {
      addAccessorFields(false);
    }
  }
}","/** 
 * INTERNAL: Add the accessors from this class accessors java class to the descriptor tied to this class accessor. This method is called for every class accessor and is also called from parent class accessors to each of its subclasses of a TABLE_PER_CLASS inheritance strategy. Add accessors is called in the preProcess stage and must not be called until its owning class accessor has processed its access type.
 */
public void addAccessors(){
  if (m_attributes != null) {
    for (    MappingAccessor accessor : m_attributes.getAccessors()) {
      MetadataAccessibleObject accessibleObject=null;
      accessor.initXMLMappingAccessor(this);
      if (accessor.usesVirtualAccess()) {
        accessibleObject=getAccessibleNameMethod(accessor);
      }
 else       if (accessor.usesPropertyAccess()) {
        accessibleObject=getAccessibleMethod(accessor);
      }
 else {
        accessibleObject=getAccessibleField(accessor);
      }
      if (accessibleObject != null) {
        accessor.initXMLObject(accessibleObject,getEntityMappings());
        accessor.initAccess();
        addAccessor(accessor);
      }
    }
  }
  if (!usesVirtualAccess()) {
    if (usesPropertyAccess()) {
      addAccessorMethods(false);
    }
 else {
      addAccessorFields(false);
    }
  }
}"
66441,"/** 
 * INTERNAL: Returns true if this mapping or class uses virtual access. In an  inheritance hierarchy, the subclasses inherit their access type from  the parent (unless there is an explicit access setting).
 */
public boolean usesVirtualAccess(){
  if (hasAccess()) {
    return getAccess().equals(MetadataConstants.VIRTUAL);
  }
 else {
    return m_classAccessor.usesNameAccess();
  }
}","/** 
 * INTERNAL: Returns true if this mapping or class uses virtual access. In an  inheritance hierarchy, the subclasses inherit their access type from  the parent (unless there is an explicit access setting).
 */
public boolean usesVirtualAccess(){
  if (hasAccess()) {
    return getAccess().equals(MetadataConstants.VIRTUAL);
  }
 else {
    return m_classAccessor.usesVirtualAccess();
  }
}"
66442,"public static void main(String[] args) throws Throwable {
  Listener listener=new Listener();
  int compileSuccess=-1;
  String[] arguments=args;
  System.out.println(""String_Node_Str"" + args);
  if (args[0].equals(""String_Node_Str"")) {
    arguments=new String[args.length - 1];
    for (int i=1; i < args.length; i++) {
      arguments[i - 1]=args[i];
    }
  }
  System.out.println(""String_Node_Str"" + arguments);
  try {
    compileSuccess=Driver.run(arguments,listener);
  }
 catch (  BadCommandLineException e) {
    if (e.getMessage() != null) {
      System.out.println(e.getMessage());
      System.out.println();
    }
    Driver.usage(e.getOptions(),false);
    System.exit(1);
  }
  if (compileSuccess == 0) {
    String destDir=""String_Node_Str"";
    for (int i=0; i < args.length; i++) {
      if (args[i].equals(""String_Node_Str"")) {
        destDir=args[i + 1];
        break;
      }
    }
    if (listener.getGeneratedPackagePath() != null) {
      File jaxbPropsFile=new File(destDir + File.separator + listener.getGeneratedPackagePath(),""String_Node_Str"");
      FileWriter writer=new FileWriter(jaxbPropsFile);
      writer.write(""String_Node_Str"");
      listener.generatedFile(listener.getGeneratedPackagePath() + File.separator + ""String_Node_Str"",0,0);
      writer.close();
    }
  }
  System.exit(compileSuccess);
}","public static void main(String[] args) throws Throwable {
  Listener listener=new Listener();
  int compileSuccess=-1;
  try {
    for (int x=0; x < args.length; x++) {
      if (""String_Node_Str"".equals(args[x])) {
        String[] args2=new String[args.length - 1];
        System.arraycopy(args,0,args2,0,x);
        System.arraycopy(args,x + 1,args2,x,args.length - x - 1);
        args=args2;
        break;
      }
    }
    compileSuccess=Driver.run(args,listener);
  }
 catch (  BadCommandLineException e) {
    if (e.getMessage() != null) {
      System.out.println(e.getMessage());
      System.out.println();
    }
    Driver.usage(e.getOptions(),false);
    System.exit(1);
  }
  if (compileSuccess == 0) {
    String destDir=""String_Node_Str"";
    for (int i=0; i < args.length; i++) {
      if (args[i].equals(""String_Node_Str"")) {
        destDir=args[i + 1];
        break;
      }
    }
    if (listener.getGeneratedPackagePath() != null) {
      File jaxbPropsFile=new File(destDir + File.separator + listener.getGeneratedPackagePath(),""String_Node_Str"");
      FileWriter writer=new FileWriter(jaxbPropsFile);
      writer.write(""String_Node_Str"");
      listener.generatedFile(listener.getGeneratedPackagePath() + File.separator + ""String_Node_Str"",0,0);
      writer.close();
    }
  }
  System.exit(compileSuccess);
}"
66443,"/** 
 * Validates a given instance doc against the generated schema.
 * @param src
 * @param schemaIndex index in output resolver's list of generated schemas
 * @param outputResolver contains one or more schemas to validate against
 */
protected void validateBindingsFileAgainstSchema(InputStream src){
  String result=null;
  SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
  Schema theSchema;
  try {
    theSchema=sFact.newSchema(bindingsFileXSDSource);
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(src);
    validator.validate(ss);
  }
 catch (  Exception e) {
    e.printStackTrace();
    if (e.getMessage() == null) {
      result=""String_Node_Str"";
    }
    result=e.getMessage();
  }
  assertTrue(""String_Node_Str"" + result,result == null);
}","/** 
 * Validates a given instance doc against the generated schema.
 * @param src
 * @param schemaIndex index in output resolver's list of generated schemas
 * @param outputResolver contains one or more schemas to validate against
 */
protected void validateBindingsFileAgainstSchema(InputStream src){
  String result=null;
  SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
  Schema theSchema;
  try {
    InputStream bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
    if (bindingsFileXSDInputStream == null) {
      bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
    }
    if (bindingsFileXSDInputStream == null) {
      fail(""String_Node_Str"");
    }
    Source bindingsFileXSDSource=new StreamSource(bindingsFileXSDInputStream);
    theSchema=sFact.newSchema(bindingsFileXSDSource);
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(src);
    validator.validate(ss);
  }
 catch (  Exception e) {
    e.printStackTrace();
    if (e.getMessage() == null) {
      result=""String_Node_Str"";
    }
    result=e.getMessage();
  }
  assertTrue(""String_Node_Str"" + result,result == null);
}"
66444,"public void setUp() throws Exception {
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  builderFactory.setNamespaceAware(true);
  builderFactory.setIgnoringElementContentWhitespace(true);
  parser=builderFactory.newDocumentBuilder();
  xmlComparer=new XMLComparer();
  InputStream bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  if (bindingsFileXSDInputStream == null) {
    bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  }
  if (bindingsFileXSDInputStream == null) {
    fail(""String_Node_Str"");
  }
  bindingsFileXSDSource=new StreamSource(bindingsFileXSDInputStream);
}","public void setUp() throws Exception {
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  builderFactory.setNamespaceAware(true);
  builderFactory.setIgnoringElementContentWhitespace(true);
  parser=builderFactory.newDocumentBuilder();
  xmlComparer=new XMLComparer();
}"
66445,"/** 
 * Tests XmlDirectMapping configuration via eclipselink-oxm.xml. Here an unmarshal operation is performed. Utilizes xml-value. xml-attribute and xml-element are tested above. Positive test.
 */
public void testDirectMappingXmlValueUnmarshal(){
  try {
    super.setUp();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  JAXBContext jCtx=null;
  try {
    jCtx=createContext(new Class[]{Price.class},CONTEXT_PATH,PATH + ""String_Node_Str"");
  }
 catch (  JAXBException e1) {
    e1.printStackTrace();
    fail(""String_Node_Str"");
  }
  String src=PATH + ""String_Node_Str"";
  InputStream iDocStream=loader.getResourceAsStream(src);
  if (iDocStream == null) {
    fail(""String_Node_Str"" + src + ""String_Node_Str"");
  }
  Price ctrlPrice=getControlPriceObject();
  Unmarshaller unmarshaller=jCtx.createUnmarshaller();
  try {
    Price priceObj=(Price)unmarshaller.unmarshal(iDocStream);
    assertNotNull(""String_Node_Str"",priceObj);
    assertTrue(""String_Node_Str"",ctrlPrice.equals(priceObj));
    assertTrue(""String_Node_Str"",priceObj.wasSetCalled);
  }
 catch (  JAXBException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}","/** 
 * Tests XmlDirectMapping configuration via eclipselink-oxm.xml. Here an unmarshal operation is performed. Utilizes xml-value. xml-attribute and xml-element are tested above. Positive test.
 */
public void testDirectMappingXmlValueUnmarshal(){
  JAXBContext jCtx=null;
  try {
    jCtx=createContext(new Class[]{Price.class},CONTEXT_PATH,PATH + ""String_Node_Str"");
  }
 catch (  JAXBException e1) {
    e1.printStackTrace();
    fail(""String_Node_Str"");
  }
  String src=PATH + ""String_Node_Str"";
  InputStream iDocStream=loader.getResourceAsStream(src);
  if (iDocStream == null) {
    fail(""String_Node_Str"" + src + ""String_Node_Str"");
  }
  Price ctrlPrice=getControlPriceObject();
  Unmarshaller unmarshaller=jCtx.createUnmarshaller();
  try {
    Price priceObj=(Price)unmarshaller.unmarshal(iDocStream);
    assertNotNull(""String_Node_Str"",priceObj);
    assertTrue(""String_Node_Str"",ctrlPrice.equals(priceObj));
    assertTrue(""String_Node_Str"",priceObj.wasSetCalled);
  }
 catch (  JAXBException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}"
66446,"public void testTeamSchemaGen(){
  try {
    super.setUp();
    String metadataFile=PATH + ""String_Node_Str"";
    MySchemaOutputResolver oResolver=new MySchemaOutputResolver();
    oResolver=generateSchemaWithFileName(new Class[]{Team.class},CONTEXT_PATH,metadataFile,3);
    String controlSchema=PATH + ""String_Node_Str"";
    compareSchemas(oResolver.schemaFiles.get(EMPTY_NAMESPACE),new File(controlSchema));
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}","public void testTeamSchemaGen(){
  try {
    String metadataFile=PATH + ""String_Node_Str"";
    MySchemaOutputResolver oResolver=new MySchemaOutputResolver();
    oResolver=generateSchemaWithFileName(new Class[]{Team.class},CONTEXT_PATH,metadataFile,3);
    String controlSchema=PATH + ""String_Node_Str"";
    compareSchemas(oResolver.schemaFiles.get(EMPTY_NAMESPACE),new File(controlSchema));
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}"
66447,"/** 
 * Tests XmlDirectMapping configuration via eclipselink-oxm.xml. Here a marshal operation is performed. Utilizes xml-value. xml-attribute and xml-element are tested above. Positive test.
 */
public void testDirectMappingXmlValueMarshal(){
  try {
    super.setUp();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  JAXBContext jCtx=null;
  try {
    jCtx=createContext(new Class[]{Price.class},CONTEXT_PATH,PATH + ""String_Node_Str"");
  }
 catch (  JAXBException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  String src=PATH + ""String_Node_Str"";
  Document testDoc=parser.newDocument();
  Document ctrlDoc=parser.newDocument();
  try {
    ctrlDoc=getControlDocument(src);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"" + src + ""String_Node_Str"");
  }
  Marshaller marshaller=jCtx.createMarshaller();
  try {
    Price ctrlPrice=getControlPriceObject();
    marshaller.marshal(ctrlPrice,testDoc);
    assertTrue(""String_Node_Str"",compareDocuments(ctrlDoc,testDoc));
  }
 catch (  JAXBException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}","/** 
 * Tests XmlDirectMapping configuration via eclipselink-oxm.xml. Here a marshal operation is performed. Utilizes xml-value. xml-attribute and xml-element are tested above. Positive test.
 */
public void testDirectMappingXmlValueMarshal(){
  JAXBContext jCtx=null;
  try {
    jCtx=createContext(new Class[]{Price.class},CONTEXT_PATH,PATH + ""String_Node_Str"");
  }
 catch (  JAXBException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  String src=PATH + ""String_Node_Str"";
  Document testDoc=parser.newDocument();
  Document ctrlDoc=parser.newDocument();
  try {
    ctrlDoc=getControlDocument(src);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"" + src + ""String_Node_Str"");
  }
  Marshaller marshaller=jCtx.createMarshaller();
  try {
    Price ctrlPrice=getControlPriceObject();
    marshaller.marshal(ctrlPrice,testDoc);
    assertTrue(""String_Node_Str"",compareDocuments(ctrlDoc,testDoc));
  }
 catch (  JAXBException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}"
66448,"public void testVehiclesSchemaGen(){
  try {
    super.setUp();
    String metadataFile=PATH + ""String_Node_Str"";
    MySchemaOutputResolver oResolver=new MySchemaOutputResolver();
    oResolver=generateSchemaWithFileName(new Class[]{Car.class,Truck.class},CONTEXT_PATH,metadataFile,2);
    String controlSchema=PATH + ""String_Node_Str"";
    compareSchemas(oResolver.schemaFiles.get(EMPTY_NAMESPACE),new File(controlSchema));
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}","public void testVehiclesSchemaGen(){
  try {
    String metadataFile=PATH + ""String_Node_Str"";
    MySchemaOutputResolver oResolver=new MySchemaOutputResolver();
    oResolver=generateSchemaWithFileName(new Class[]{Car.class,Truck.class},CONTEXT_PATH,metadataFile,2);
    String controlSchema=PATH + ""String_Node_Str"";
    compareSchemas(oResolver.schemaFiles.get(EMPTY_NAMESPACE),new File(controlSchema));
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}"
66449,"/** 
 * Inits the DDL generation fields. Currently equivalent to the defaults from the EJB 3.0 spec.
 */
public void initDDLFields(){
  scale=0;
  length=255;
  precision=0;
  isUnique=false;
  isNullable=true;
  isUpdatable=true;
  isInsertable=true;
  columnDefinition=""String_Node_Str"";
}","/** 
 * Inits the DDL generation fields with our defaults. Note: we used to  initialize the length to the JPA default of 255 but since this default  value should only apply for string fields we set it to 0 to indicate that it was not specified and rely on the default (255) to come from individual platforms.
 */
public void initDDLFields(){
  scale=0;
  length=0;
  precision=0;
  isUnique=false;
  isNullable=true;
  isUpdatable=true;
  isInsertable=true;
  columnDefinition=""String_Node_Str"";
}"
66450,"protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
66451,"/** 
 * Create a table which can translate between java types and Attunity Connect data types.
 * @return java.util.Hashtable
 */
protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",10));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",19,4));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",19,4));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",5));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",3));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","/** 
 * Create a table which can translate between java types and Attunity Connect data types.
 * @return java.util.Hashtable
 */
protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",10));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",19,4));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",19,4));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",5));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",3));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
66452,"/** 
 * seems compatible with informix
 */
protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",32));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",32).setLimits(32,-19,19));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",32).setLimits(32,-19,19));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","/** 
 * seems compatible with informix
 */
protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",32));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",32).setLimits(32,-19,19));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",32).setLimits(32,-19,19));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
66453,"@Override protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",15));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",15));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","@Override protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",15));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",15));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
66454,"protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",11));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",12,5).setLimits(19,0,19));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",10,5).setLimits(19,0,19));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",6));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",4));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",19).setLimits(19,0,9));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",19).setLimits(19,0,9));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",15));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",25));
  return fieldTypeMapping;
}","protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",11));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",12,5).setLimits(19,0,19));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",10,5).setLimits(19,0,19));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",6));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",4));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",19).setLimits(19,0,9));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",19).setLimits(19,0,9));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",15));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",25));
  return fieldTypeMapping;
}"
66455,"protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",15));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",15));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",MAX_BLOB));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",MAX_CLOB));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",MAX_BLOB));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",MAX_CLOB));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",MAX_BLOB));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",MAX_CLOB));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",15));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",15));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",MAX_BLOB));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",MAX_CLOB));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",MAX_BLOB));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",MAX_CLOB));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",MAX_BLOB));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",MAX_CLOB));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
66456,"@Override protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping=super.buildFieldTypes();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",18).setLimits(18,-18,18));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",18).setLimits(18,-18,18));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",18).setLimits(18,-18,18));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",38).setLimits(18,-18,18));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",100));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",32000));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",32000));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",32000));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.util.Calendar.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.util.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","@Override protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping=super.buildFieldTypes();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",18).setLimits(18,-18,18));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",18).setLimits(18,-18,18));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",18).setLimits(18,-18,18));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",38).setLimits(18,-18,18));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",32000));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",32000));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",32000));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.util.Calendar.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.util.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
66457,"protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",32));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",32).setLimits(32,-19,19));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",32).setLimits(32,-19,19));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",32));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",32).setLimits(32,-19,19));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",32).setLimits(32,-19,19));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
66458,"/** 
 * Return the mapping of class types to database types for the schema framework.
 */
protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","/** 
 * Return the mapping of class types to database types for the schema framework.
 */
protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
66459,"/** 
 * INTERNAL:
 */
protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",10));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",19,4));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",19,4));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",5));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",3));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",38).setLimits(38,-38,38));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",38).setLimits(38,-38,38));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.util.Calendar.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.util.Date.class,new FieldTypeDefinition(""String_Node_Str""));
  return fieldTypeMapping;
}","/** 
 * INTERNAL:
 */
protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",10));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",19,4));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",19,4));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",5));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",3));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",38).setLimits(38,-38,38));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",38).setLimits(38,-38,38));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.util.Calendar.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.util.Date.class,new FieldTypeDefinition(""String_Node_Str""));
  return fieldTypeMapping;
}"
66460,"@Override protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","@Override protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
66461,"protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",28));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",28).setLimits(28,-19,19));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",28).setLimits(28,-19,19));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",19));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",28));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",28).setLimits(28,-19,19));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",28).setLimits(28,-19,19));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
66462,"/** 
 * Return the mapping of Java class types to database types for the schema framework.
 * @return hashtable of Java types to FieldTypeDefinition instancescontaining Symfoware SQL types.
 */
@Override protected Hashtable<Class<?>,FieldTypeDefinition> buildFieldTypes(){
  Hashtable<Class<?>,FieldTypeDefinition> fieldTypeMapping=new Hashtable<Class<?>,FieldTypeDefinition>();
  fieldTypeMapping.put(java.lang.Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.lang.Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.lang.Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.lang.Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.lang.Long.class,new FieldTypeDefinition(""String_Node_Str"",18));
  fieldTypeMapping.put(java.lang.Float.class,new FieldTypeDefinition(""String_Node_Str"",18,4));
  fieldTypeMapping.put(java.lang.Double.class,new FieldTypeDefinition(""String_Node_Str"",18,4));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",18).setLimits(18,-18,18));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",18).setLimits(18,-18,18));
  fieldTypeMapping.put(java.lang.Number.class,new FieldTypeDefinition(""String_Node_Str"",18));
  fieldTypeMapping.put(java.lang.String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(java.lang.Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",1024));
  fieldTypeMapping.put(java.lang.Byte[].class,new FieldTypeDefinition(""String_Node_Str"",1024));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(java.lang.Character[].class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",1024));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.util.Calendar.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.util.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","/** 
 * Return the mapping of Java class types to database types for the schema framework.
 * @return hashtable of Java types to FieldTypeDefinition instancescontaining Symfoware SQL types.
 */
@Override protected Hashtable<Class<?>,FieldTypeDefinition> buildFieldTypes(){
  Hashtable<Class<?>,FieldTypeDefinition> fieldTypeMapping=new Hashtable<Class<?>,FieldTypeDefinition>();
  fieldTypeMapping.put(java.lang.Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.lang.Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.lang.Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.lang.Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.lang.Long.class,new FieldTypeDefinition(""String_Node_Str"",18));
  fieldTypeMapping.put(java.lang.Float.class,new FieldTypeDefinition(""String_Node_Str"",18,4));
  fieldTypeMapping.put(java.lang.Double.class,new FieldTypeDefinition(""String_Node_Str"",18,4));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",18).setLimits(18,-18,18));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",18).setLimits(18,-18,18));
  fieldTypeMapping.put(java.lang.Number.class,new FieldTypeDefinition(""String_Node_Str"",18));
  fieldTypeMapping.put(java.lang.String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(java.lang.Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",1024));
  fieldTypeMapping.put(java.lang.Byte[].class,new FieldTypeDefinition(""String_Node_Str"",1024));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(java.lang.Character[].class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",1024));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.util.Calendar.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.util.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
66463,"/** 
 * Return the mapping of class types to database types for the schema framework.
 */
@Override protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","/** 
 * Return the mapping of class types to database types for the schema framework.
 */
@Override protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping;
  fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",DEFAULT_VARCHAR_SIZE));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str"",64000));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
66464,"/** 
 * Build a field definition object from a database field.
 */
private FieldDefinition getFieldDefFromDBField(DatabaseField dbField,boolean isPrimaryKey){
  FieldDefinition fieldDef=this.fieldMap.get(dbField);
  if (fieldDef == null) {
    fieldDef=new FieldDefinition();
    fieldDef.setName(dbField.getNameDelimited(databasePlatform));
    if (dbField.getColumnDefinition() != null && dbField.getColumnDefinition().length() > 0) {
      fieldDef.setTypeDefinition(dbField.getColumnDefinition());
    }
 else {
      Class fieldType=dbField.getType();
      FieldTypeDefinition fieldTypeDef=(fieldType == null) ? null : databasePlatform.getFieldTypeDefinition(fieldType);
      if (fieldType != null) {
        if (fieldType.equals(ClassConstants.STRING) || fieldType.equals(ClassConstants.BLOB) || fieldType.equals(ClassConstants.CLOB)|| fieldType.equals(ClassConstants.APCHAR)|| fieldType.equals(ClassConstants.ACHAR)|| fieldType.equals(ClassConstants.ABYTE)|| fieldType.equals(ClassConstants.APBYTE)) {
          if (fieldTypeDef == null || fieldTypeDef.isSizeAllowed()) {
            fieldDef.setSize(dbField.getLength());
          }
        }
 else {
          if (dbField.getPrecision() > 0) {
            if (fieldTypeDef == null || fieldTypeDef.isSizeAllowed()) {
              fieldDef.setSize(dbField.getPrecision());
              fieldDef.setSubSize(dbField.getScale());
            }
          }
        }
      }
      if ((fieldType == null) || (!fieldType.isPrimitive() && (fieldTypeDef == null))) {
        AbstractSessionLog.getLog().log(SessionLog.FINEST,""String_Node_Str"",dbField.getQualifiedName(),fieldType);
        fieldDef.setType(ClassConstants.STRING);
      }
 else {
        fieldDef.setType(ConversionManager.getObjectClass(fieldType));
      }
      fieldDef.setShouldAllowNull(dbField.isNullable());
      fieldDef.setUnique(dbField.isUnique());
    }
    fieldDef.setIsPrimaryKey(isPrimaryKey);
    fieldMap.put(dbField,fieldDef);
    databaseFields.put(dbField,dbField);
  }
  return fieldDef;
}","/** 
 * Build a field definition object from a database field.
 */
private FieldDefinition getFieldDefFromDBField(DatabaseField dbField,boolean isPrimaryKey){
  FieldDefinition fieldDef=this.fieldMap.get(dbField);
  if (fieldDef == null) {
    fieldDef=new FieldDefinition();
    fieldDef.setName(dbField.getNameDelimited(databasePlatform));
    if (dbField.getColumnDefinition() != null && dbField.getColumnDefinition().length() > 0) {
      fieldDef.setTypeDefinition(dbField.getColumnDefinition());
    }
 else {
      Class fieldType=dbField.getType();
      FieldTypeDefinition fieldTypeDef=(fieldType == null) ? null : databasePlatform.getFieldTypeDefinition(fieldType);
      if (fieldType != null) {
        if (dbField.getLength() > 0) {
          fieldDef.setSize(dbField.getLength());
        }
 else         if (dbField.getPrecision() > 0) {
          fieldDef.setSize(dbField.getPrecision());
          fieldDef.setSubSize(dbField.getScale());
        }
      }
      if ((fieldType == null) || (!fieldType.isPrimitive() && (fieldTypeDef == null))) {
        AbstractSessionLog.getLog().log(SessionLog.FINEST,""String_Node_Str"",dbField.getQualifiedName(),fieldType);
        fieldDef.setType(ClassConstants.STRING);
      }
 else {
        fieldDef.setType(ConversionManager.getObjectClass(fieldType));
      }
      fieldDef.setShouldAllowNull(dbField.isNullable());
      fieldDef.setUnique(dbField.isUnique());
    }
    fieldDef.setIsPrimaryKey(isPrimaryKey);
    fieldMap.put(dbField,fieldDef);
    databaseFields.put(dbField,dbField);
  }
  return fieldDef;
}"
66465,"/** 
 * INTERNAL:
 */
public DatabaseField getDatabaseField(){
  DatabaseField field=super.getDatabaseField();
  field.setUnique(m_unique == null ? false : m_unique.booleanValue());
  field.setScale(m_scale == null ? 0 : m_scale.intValue());
  field.setLength(m_length == null ? 255 : m_length.intValue());
  field.setPrecision(m_precision == null ? 0 : m_precision.intValue());
  field.setTableName(m_table == null ? ""String_Node_Str"" : m_table);
  return field;
}","/** 
 * INTERNAL:
 */
public DatabaseField getDatabaseField(){
  DatabaseField field=super.getDatabaseField();
  field.setUnique(m_unique == null ? false : m_unique.booleanValue());
  field.setScale(m_scale == null ? 0 : m_scale.intValue());
  field.setLength(m_length == null ? 0 : m_length.intValue());
  field.setPrecision(m_precision == null ? 0 : m_precision.intValue());
  field.setTableName(m_table == null ? ""String_Node_Str"" : m_table);
  return field;
}"
66466,"/** 
 * Builds a map of Java types to XML types.
 * @return
 */
private HashMap buildXMLToJavaTypeMap(){
  HashMap javaTypes=new HashMap();
  javaTypes.put(APBYTE,XMLConstants.BASE_64_BINARY_QNAME);
  javaTypes.put(BIGDECIMAL,XMLConstants.DECIMAL_QNAME);
  javaTypes.put(BIGINTEGER,XMLConstants.INTEGER_QNAME);
  javaTypes.put(PBOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(PBYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(PDOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(PFLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(PINT,XMLConstants.INT_QNAME);
  javaTypes.put(PLONG,XMLConstants.LONG_QNAME);
  javaTypes.put(PSHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(QNAME_CLASS,XMLConstants.QNAME_QNAME);
  javaTypes.put(STRING,XMLConstants.STRING_QNAME);
  javaTypes.put(ABYTE,XMLConstants.BASE_64_BINARY_QNAME);
  javaTypes.put(BOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(BYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(GREGORIAN_CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(DOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(FLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(INTEGER,XMLConstants.INT_QNAME);
  javaTypes.put(LONG,XMLConstants.LONG_QNAME);
  javaTypes.put(SHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(UTIL_DATE,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(SQL_DATE,XMLConstants.DATE_QNAME);
  javaTypes.put(SQL_TIME,XMLConstants.TIME_QNAME);
  javaTypes.put(SQL_TIMESTAMP,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(XMLGREGORIANCALENDAR,XMLConstants.ANY_SIMPLE_TYPE_QNAME);
  javaTypes.put(DURATION,XMLConstants.DURATION_QNAME);
  javaTypes.put(UUID,XMLConstants.STRING_QNAME);
  return javaTypes;
}","/** 
 * Builds a map of Java types to XML types.
 * @return
 */
private HashMap buildXMLToJavaTypeMap(){
  HashMap javaTypes=new HashMap();
  javaTypes.put(APBYTE,XMLConstants.BASE_64_BINARY_QNAME);
  javaTypes.put(BIGDECIMAL,XMLConstants.DECIMAL_QNAME);
  javaTypes.put(BIGINTEGER,XMLConstants.INTEGER_QNAME);
  javaTypes.put(PBOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(PBYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(PDOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(PFLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(PINT,XMLConstants.INT_QNAME);
  javaTypes.put(PLONG,XMLConstants.LONG_QNAME);
  javaTypes.put(PSHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(QNAME_CLASS,XMLConstants.QNAME_QNAME);
  javaTypes.put(STRING,XMLConstants.STRING_QNAME);
  javaTypes.put(ABYTE,XMLConstants.BASE_64_BINARY_QNAME);
  javaTypes.put(BOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(BYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(GREGORIAN_CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(DOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(FLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(INTEGER,XMLConstants.INT_QNAME);
  javaTypes.put(LONG,XMLConstants.LONG_QNAME);
  javaTypes.put(SHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(UTIL_DATE,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(SQL_DATE,XMLConstants.DATE_QNAME);
  javaTypes.put(SQL_TIME,XMLConstants.TIME_QNAME);
  javaTypes.put(SQL_TIMESTAMP,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(XMLGREGORIANCALENDAR,XMLConstants.ANY_SIMPLE_TYPE_QNAME);
  javaTypes.put(DURATION,XMLConstants.DURATION_QNAME);
  javaTypes.put(UUID,XMLConstants.STRING_QNAME);
  javaTypes.put(URI,XMLConstants.STRING_QNAME);
  return javaTypes;
}"
66467,"public static void main(String[] args) throws Throwable {
  Listener listener=new Listener();
  int compileSuccess=-1;
  try {
    compileSuccess=Driver.run(args,listener);
  }
 catch (  BadCommandLineException e) {
    if (e.getMessage() != null) {
      System.out.println(e.getMessage());
      System.out.println();
    }
    Driver.usage(e.getOptions(),false);
    System.exit(1);
  }
  if (compileSuccess == 0) {
    String destDir=""String_Node_Str"";
    for (int i=0; i < args.length; i++) {
      if (args[i].equals(""String_Node_Str"")) {
        destDir=args[i + 1];
        break;
      }
    }
    File jaxbPropsFile=new File(destDir + File.separator + listener.getGeneratedPackagePath(),""String_Node_Str"");
    FileWriter writer=new FileWriter(jaxbPropsFile);
    writer.write(""String_Node_Str"");
    listener.generatedFile(listener.getGeneratedPackagePath() + File.separator + ""String_Node_Str"",0,0);
    writer.close();
  }
  System.exit(compileSuccess);
}","public static void main(String[] args) throws Throwable {
  Listener listener=new Listener();
  int compileSuccess=-1;
  String[] arguments=args;
  System.out.println(""String_Node_Str"" + args);
  if (args[0].equals(""String_Node_Str"")) {
    arguments=new String[args.length - 1];
    for (int i=1; i < args.length; i++) {
      arguments[i - 1]=args[i];
    }
  }
  System.out.println(""String_Node_Str"" + arguments);
  try {
    compileSuccess=Driver.run(arguments,listener);
  }
 catch (  BadCommandLineException e) {
    if (e.getMessage() != null) {
      System.out.println(e.getMessage());
      System.out.println();
    }
    Driver.usage(e.getOptions(),false);
    System.exit(1);
  }
  if (compileSuccess == 0) {
    String destDir=""String_Node_Str"";
    for (int i=0; i < args.length; i++) {
      if (args[i].equals(""String_Node_Str"")) {
        destDir=args[i + 1];
        break;
      }
    }
    if (listener.getGeneratedPackagePath() != null) {
      File jaxbPropsFile=new File(destDir + File.separator + listener.getGeneratedPackagePath(),""String_Node_Str"");
      FileWriter writer=new FileWriter(jaxbPropsFile);
      writer.write(""String_Node_Str"");
      listener.generatedFile(listener.getGeneratedPackagePath() + File.separator + ""String_Node_Str"",0,0);
      writer.close();
    }
  }
  System.exit(compileSuccess);
}"
66468,"public URL getURL(){
  return loader.getResource(this.getResource());
}","public URL getURL(){
  if (null == loader) {
    return Thread.currentThread().getContextClassLoader().getResource(this.getResource());
  }
  return loader.getResource(this.getResource());
}"
66469,"public void testValidCar() throws Exception {
  XMLDescriptor carDesc=(XMLDescriptor)project.getDescriptors().get(Car.class);
  carDesc.setSchemaReference(schemaRef);
  Car car=new Car();
  car.setLicense(""String_Node_Str"");
  assertTrue(""String_Node_Str"",xmlValidator.validateRoot(car));
}","public void testValidCar() throws Exception {
  Car car=new Car();
  car.setLicense(""String_Node_Str"");
  assertTrue(""String_Node_Str"",xmlValidator.validateRoot(car));
}"
66470,"public void testDescriptorWithNoSchemaReference() throws Exception {
  Car car=new Car();
  car.setLicense(""String_Node_Str"");
  try {
    xmlValidator.validateRoot(car);
  }
 catch (  XMLMarshalException ex) {
    assertTrue(""String_Node_Str"",ex.getErrorCode() == XMLMarshalException.SCHEMA_REFERENCE_NOT_SET);
    return;
  }
  assertTrue(""String_Node_Str"",false);
}","public void testDescriptorWithNoSchemaReference() throws Exception {
  ((XMLDescriptor)project.getClassDescriptor(Car.class)).setSchemaReference(null);
  Car car=new Car();
  car.setLicense(""String_Node_Str"");
  try {
    xmlValidator.validateRoot(car);
  }
 catch (  XMLMarshalException ex) {
    assertTrue(""String_Node_Str"",ex.getErrorCode() == XMLMarshalException.SCHEMA_REFERENCE_NOT_SET);
    return;
  }
  assertTrue(""String_Node_Str"",false);
}"
66471,"public void setUp() throws Exception {
  schemaRef=new XMLSchemaClassPathReference(""String_Node_Str"");
  project=new XMLMarshallerCarProject();
  xmlContext=new XMLContext(project);
  xmlValidator=xmlContext.createValidator();
}","public void setUp() throws Exception {
  project=new XMLMarshallerCarProject();
  xmlContext=new XMLContext(project);
  xmlValidator=xmlContext.createValidator();
}"
66472,"public void testErrorHandler() throws Exception {
  XMLDescriptor carDesc=(XMLDescriptor)project.getDescriptors().get(Car.class);
  carDesc.setSchemaReference(schemaRef);
  ErrorHandler errorHandler=new IgnoreAllErrorHandler();
  xmlValidator.setErrorHandler(errorHandler);
  Car car=new Car();
  car.setLicense(""String_Node_Str"");
  assertTrue(""String_Node_Str"",xmlValidator.validateRoot(car));
}","public void testErrorHandler() throws Exception {
  ErrorHandler errorHandler=new IgnoreAllErrorHandler();
  xmlValidator.setErrorHandler(errorHandler);
  Car car=new Car();
  car.setLicense(""String_Node_Str"");
  assertTrue(""String_Node_Str"",xmlValidator.validateRoot(car));
}"
66473,"public void testInvalidCar() throws Exception {
  XMLDescriptor carDesc=(XMLDescriptor)project.getDescriptors().get(Car.class);
  carDesc.setSchemaReference(schemaRef);
  Car car=new Car();
  car.setLicense(""String_Node_Str"");
  assertFalse(""String_Node_Str"",xmlValidator.validateRoot(car));
}","public void testInvalidCar() throws Exception {
  Car car=new Car();
  car.setLicense(""String_Node_Str"");
  assertFalse(""String_Node_Str"",xmlValidator.validateRoot(car));
}"
66474,"public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,AbstractSession executionSession){
  Object value=((DOMRecord)row).getIndicatingNoEntry(this.getField(),true);
  if (value instanceof Element) {
    XMLPlatformFactory.getInstance().getXMLPlatform().namespaceQualifyFragment((Element)value);
  }
  return value;
}","public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,AbstractSession executionSession){
  DOMRecord domRecord=(DOMRecord)row;
  Object value=domRecord.getIndicatingNoEntry(this.getField(),true);
  if (value == domRecord) {
    value=domRecord.getDOM();
  }
  if (value instanceof Element) {
    XMLPlatformFactory.getInstance().getXMLPlatform().namespaceQualifyFragment((Element)value);
  }
  return value;
}"
66475,"/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else {
    try {
      FormattedOutputStreamRecordContentHandler handler=new FormattedOutputStreamRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(handler);
      xfragReader.setProperty(""String_Node_Str"",handler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}","/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    try {
      FormattedOutputStreamRecordContentHandler handler=new FormattedOutputStreamRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(handler);
      xfragReader.setProperty(""String_Node_Str"",handler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}"
66476,"/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else {
    try {
      FormattedWriterRecordContentHandler wrcHandler=new FormattedWriterRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(wrcHandler);
      xfragReader.setProperty(""String_Node_Str"",wrcHandler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}","/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    try {
      FormattedWriterRecordContentHandler wrcHandler=new FormattedWriterRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(wrcHandler);
      xfragReader.setProperty(""String_Node_Str"",wrcHandler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}"
66477,"protected void setOrAddAttributeValue(UnmarshalRecord unmarshalRecord,Object value,XPathFragment xPathFragment,Object collection){
  if (!xmlAnyCollectionMapping.usesXMLRoot()) {
    unmarshalRecord.addAttributeValue(this,value);
  }
 else {
    XMLRoot xmlRoot=new XMLRoot();
    xmlRoot.setNamespaceURI(xPathFragment.getNamespaceURI());
    xmlRoot.setSchemaType(unmarshalRecord.getTypeQName());
    xmlRoot.setLocalName(xPathFragment.getLocalName());
    xmlRoot.setObject(value);
    unmarshalRecord.addAttributeValue(this,xmlRoot);
  }
}","protected void setOrAddAttributeValue(UnmarshalRecord unmarshalRecord,Object value,XPathFragment xPathFragment,Object collection){
  if (!xmlAnyCollectionMapping.usesXMLRoot() || xPathFragment.getLocalName() == null) {
    unmarshalRecord.addAttributeValue(this,value);
  }
 else {
    XMLRoot xmlRoot=new XMLRoot();
    xmlRoot.setNamespaceURI(xPathFragment.getNamespaceURI());
    xmlRoot.setSchemaType(unmarshalRecord.getTypeQName());
    xmlRoot.setLocalName(xPathFragment.getLocalName());
    xmlRoot.setObject(value);
    unmarshalRecord.addAttributeValue(this,xmlRoot);
  }
}"
66478,"public void characters(char[] ch,int start,int length) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.characters(ch,start,length);
        }
 else {
          getFragmentBuilder().characters(ch,start,length);
        }
      }
    }
    XPathNode textNode=xPathNode.getTextNode();
    if (null == textNode) {
      textNode=xPathNode.getAnyNode();
      if (textNode != null) {
        if (0 == length) {
          return;
        }
        String tmpString=new String(ch,start,length);
        if (!textNode.isWhitespaceAware() && tmpString.trim().length() == 0) {
          return;
        }
      }
    }
    if (null != textNode) {
      xPathNode=textNode;
      unmarshalContext.characters(this);
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      getStringBuffer().append(ch,start,length);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void characters(char[] ch,int start,int length) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.characters(ch,start,length);
        }
 else {
          getFragmentBuilder().characters(ch,start,length);
        }
      }
    }
    XPathNode textNode=xPathNode.getTextNode();
    if (null == textNode) {
      textNode=xPathNode.getAnyNode();
      if (textNode != null) {
        xpathNodeIsMixedContent=true;
        this.xPathFragment.setLocalName(null);
        this.xPathFragment.setNamespaceURI(null);
        if (0 == length) {
          return;
        }
        String tmpString=new String(ch,start,length);
        if (!textNode.isWhitespaceAware() && tmpString.trim().length() == 0) {
          return;
        }
      }
    }
    if (null != textNode) {
      xPathNode=textNode;
      unmarshalContext.characters(this);
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      getStringBuffer().append(ch,start,length);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
66479,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        if (!isXsiNil) {
          if (textNode.getUnmarshalNodeValue().isMappingNodeValue()) {
            textNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
          }
        }
 else {
          isXsiNil=false;
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if (null != xPathFragment && xPathFragment.nameIsText()) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if ((0 == levelIndex) && (null != getParentRecord()) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=getParentRecord();
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        if (!isXsiNil) {
          if (textNode.getUnmarshalNodeValue().isMappingNodeValue()) {
            textNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
          }
        }
 else {
          isXsiNil=false;
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if (null != xPathFragment && xPathFragment.nameIsText()) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if ((0 == levelIndex) && (null != getParentRecord()) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=getParentRecord();
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
66480,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (getCurrentObject() == null) {
    initializeRecord(atts);
  }
  if (null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) {
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0, size=atts.getLength(); i < size; i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(XMLConstants.COLON);
            if (idx > 0) {
              attLocalName=qname.substring(idx + 1,qname.length());
              String attPrefix=qname.substring(0,idx);
              if (attPrefix.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
 else {
              attLocalName=qname;
              if (attLocalName.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=selfRecords.get(j);
            if (nestedRecord != null) {
              attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
              }
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (getCurrentObject() == null) {
    initializeRecord(atts);
  }
  if ((null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0, size=atts.getLength(); i < size; i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(XMLConstants.COLON);
            if (idx > 0) {
              attLocalName=qname.substring(idx + 1,qname.length());
              String attPrefix=qname.substring(0,idx);
              if (attPrefix.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
 else {
              attLocalName=qname;
              if (attLocalName.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=selfRecords.get(j);
            if (nestedRecord != null) {
              attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
              }
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
66481,"public boolean isNullCapableValue(){
  return true;
}","public boolean isNullCapableValue(){
  return xmlBinaryDataMapping.getNullPolicy().getIsSetPerformedForAbsentNode();
}"
66482,"protected void verifyDocument(XMLDocument document){
  super.verifyDocument(document);
  DataObject obj=document.getRootObject();
  String value=obj.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + value,value.equals(CONTROL_BASE64_VALUE));
}","protected void verifyDocument(XMLDocument document){
  super.verifyDocument(document);
  DataObject obj=document.getRootObject();
  assertTrue(obj.isSet(""String_Node_Str""));
  String value=obj.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + value,value.equals(CONTROL_BASE64_VALUE));
}"
66483,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(LoadWithDataHandlerGetStringTestCases.class));
  suite.addTest(new TestSuite(LoadSchemasWithImportAndInheritance.class));
  suite.addTest(new TestSuite(StringWrapperBug268335TestCases.class));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(LoadWithDataHandlerGetStringTestCases.class));
  suite.addTest(new TestSuite(LoadWithDataHandlerIsSetTestCases.class));
  suite.addTest(new TestSuite(LoadSchemasWithImportAndInheritance.class));
  suite.addTest(new TestSuite(StringWrapperBug268335TestCases.class));
  return suite;
}"
66484,"private DatabaseMapping buildXMLBinaryDataMapping(String mappingUri,MimeTypePolicy mimeTypePolicy){
  XMLBinaryDataMapping mapping=new XMLBinaryDataMapping();
  mapping.setAttributeName(getName());
  String xpath=getQualifiedXPath(mappingUri,false);
  mapping.setMimeTypePolicy(mimeTypePolicy);
  mapping.setXPath(xpath);
  ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
  if (shouldAddInstanceClassConverter()) {
    InstanceClassConverter converter=new InstanceClassConverter();
    converter.setCustomClass(getType().getInstanceClass());
    mapping.setConverter(converter);
  }
  return mapping;
}","private DatabaseMapping buildXMLBinaryDataMapping(String mappingUri,MimeTypePolicy mimeTypePolicy){
  XMLBinaryDataMapping mapping=new XMLBinaryDataMapping();
  mapping.setAttributeName(getName());
  String xpath=getQualifiedXPath(mappingUri,false);
  mapping.setMimeTypePolicy(mimeTypePolicy);
  mapping.setXPath(xpath);
  ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
  if (shouldAddInstanceClassConverter()) {
    InstanceClassConverter converter=new InstanceClassConverter();
    converter.setCustomClass(getType().getInstanceClass());
    mapping.setConverter(converter);
  }
  if (nullable) {
    setIsSetNillablePolicyOnMapping(mapping,propertyName);
  }
 else {
    setIsSetOptionalPolicyOnMapping(mapping,propertyName);
  }
  mapping.getNullPolicy().setNullRepresentedByEmptyNode(true);
  return mapping;
}"
66485,"/** 
 * INTERNAL:
 */
public void cdata(String value){
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
    isStartElementOpen=false;
  }
  outputStreamWrite(CR);
  outputStreamWriteTab();
  super.cdata(value);
  complexType=true;
}","/** 
 * INTERNAL:
 */
public void cdata(String value){
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
    isStartElementOpen=false;
  }
  super.cdata(value);
  complexType=false;
}"
66486,"/** 
 * INTERNAL:
 */
public void cdata(String value){
  try {
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write(Helper.cr());
    for (int x=0; x < numberOfTabs; x++) {
      writer.write(TAB);
    }
    super.cdata(value);
    complexType=true;
  }
 catch (  IOException ex) {
    throw XMLMarshalException.marshalException(ex);
  }
}","/** 
 * INTERNAL:
 */
public void cdata(String value){
  try {
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    super.cdata(value);
    complexType=false;
  }
 catch (  IOException ex) {
    throw XMLMarshalException.marshalException(ex);
  }
}"
66487,"public String getNamespaceURI(String prefix){
  if (null == prefix) {
    prefix=XMLConstants.EMPTY_STRING;
  }
  try {
    return xmlStreamReader.getNamespaceURI(prefix);
  }
 catch (  IllegalStateException e) {
    return null;
  }
}","public String getNamespaceURI(String prefix){
  if (null == prefix) {
    prefix=XMLConstants.EMPTY_STRING;
  }
  try {
    String namespaceURI=xmlStreamReader.getNamespaceURI(prefix);
    if (null == namespaceURI) {
      return xmlStreamReader.getAttributeValue(XMLConstants.XMLNS_URL,prefix);
    }
    return namespaceURI;
  }
 catch (  IllegalStateException e) {
    return null;
  }
}"
66488,"/** 
 * This function is invoked by the JUnit framework before test cases are executed
 */
public void setUp(){
  try {
    super.setUp();
    String xsdString=getXSDString(""String_Node_Str"");
    List types=xsdHelper.define(xsdString);
    FileInputStream inStream=new FileInputStream(""String_Node_Str"");
    XMLDocument document=xmlHelper.load(inStream);
    root=(DataObject)document.getRootObject();
    inStream.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}","/** 
 * This function is invoked by the JUnit framework before test cases are executed
 */
public void setUp(){
  try {
    xmlComparer=new SDOXMLComparer();
    aHelperContext=SDOHelperContext.getHelperContext();
    typeHelper=aHelperContext.getTypeHelper();
    xmlHelper=aHelperContext.getXMLHelper();
    xsdHelper=aHelperContext.getXSDHelper();
    equalityHelper=aHelperContext.getEqualityHelper();
    copyHelper=aHelperContext.getCopyHelper();
    dataFactory=aHelperContext.getDataFactory();
    dataHelper=(SDODataHelper)aHelperContext.getDataHelper();
    DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
    builderFactory.setNamespaceAware(true);
    builderFactory.setIgnoringElementContentWhitespace(true);
    try {
      parser=builderFactory.newDocumentBuilder();
    }
 catch (    Exception e) {
      fail(""String_Node_Str"");
      e.printStackTrace();
    }
    ((SDOTypeHelper)typeHelper).reset();
    ((SDOXMLHelper)xmlHelper).reset();
    ((SDOXSDHelper)xsdHelper).reset();
    String xsdString=getXSDString(""String_Node_Str"");
    List types=xsdHelper.define(xsdString);
    FileInputStream inStream=new FileInputStream(""String_Node_Str"");
    XMLDocument document=xmlHelper.load(inStream);
    root=(DataObject)document.getRootObject();
    inStream.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}"
66489,"/** 
 * Purpose: Serialize an SDODataObject to an ObjectOutputStream This function is mandated by the Externalizable interface. It writes binary data in the same order as was will be read back in readExternal(). Prerequisites: An object has already been constructed and associated with the theSDODataObject member
 */
public void writeExternal(ObjectOutput objectOutput) throws IOException {
  GZIPOutputStream aGZIPOutputStream=null;
  ByteArrayOutputStream aByteOutputStream=null;
  if ((theSDODataObject.getContainer() == null)) {
    try {
      objectOutput.writeByte(SDO_ROOT_OBJECT_IDENTIFIER);
      aByteOutputStream=new ByteArrayOutputStream();
      aGZIPOutputStream=new GZIPOutputStream(aByteOutputStream);
      XMLDocument aDocument=aHelperContext.getXMLHelper().createDocument(theSDODataObject,SDOConstants.SDO_URL,SDOConstants.SDO_PREFIX + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + DEFAULT_ROOT_ELEMENT_NAME);
      aHelperContext.getXMLHelper().save(aDocument,aGZIPOutputStream,null);
      aGZIPOutputStream.finish();
      aGZIPOutputStream.flush();
      aByteOutputStream.flush();
      byte[] buf=aByteOutputStream.toByteArray();
      objectOutput.writeInt(buf.length);
      objectOutput.write(buf);
    }
  finally {
      if (aGZIPOutputStream != null) {
        aGZIPOutputStream.close();
      }
      if (aByteOutputStream != null) {
        aByteOutputStream.close();
      }
    }
  }
 else {
    objectOutput.writeByte(SDO_INTERNAL_OBJECT_IDENTIFIER);
    String aPath=theSDODataObject._getPath();
    objectOutput.writeUTF(aPath);
    ((ObjectOutputStream)objectOutput).writeObject(theSDODataObject.getRootObject());
  }
}","/** 
 * Purpose: Serialize an SDODataObject to an ObjectOutputStream This function is mandated by the Externalizable interface. It writes binary data in the same order as was will be read back in readExternal(). Prerequisites: An object has already been constructed and associated with the theSDODataObject member
 */
public void writeExternal(ObjectOutput objectOutput) throws IOException {
  GZIPOutputStream aGZIPOutputStream=null;
  ByteArrayOutputStream aByteOutputStream=null;
  if ((theSDODataObject.getContainer() == null)) {
    try {
      String identifier=null;
      if (this.aHelperContext.getClass() == SDOHelperContext.class) {
        identifier=((SDOHelperContext)this.aHelperContext).getIdentifier();
      }
      if (identifier != null && !(identifier.equals(""String_Node_Str""))) {
        objectOutput.writeByte(SDO_HELPER_CONTEXT_ID_IDENTIFIER);
        objectOutput.writeUTF(identifier);
      }
 else {
        objectOutput.writeByte(SDO_ROOT_OBJECT_IDENTIFIER);
      }
      aByteOutputStream=new ByteArrayOutputStream();
      aGZIPOutputStream=new GZIPOutputStream(aByteOutputStream);
      XMLDocument aDocument=aHelperContext.getXMLHelper().createDocument(theSDODataObject,SDOConstants.SDO_URL,SDOConstants.SDO_PREFIX + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + DEFAULT_ROOT_ELEMENT_NAME);
      aHelperContext.getXMLHelper().save(aDocument,aGZIPOutputStream,null);
      aGZIPOutputStream.finish();
      aGZIPOutputStream.flush();
      aByteOutputStream.flush();
      byte[] buf=aByteOutputStream.toByteArray();
      objectOutput.writeInt(buf.length);
      objectOutput.write(buf);
    }
  finally {
      if (aGZIPOutputStream != null) {
        aGZIPOutputStream.close();
      }
      if (aByteOutputStream != null) {
        aByteOutputStream.close();
      }
    }
  }
 else {
    objectOutput.writeByte(SDO_INTERNAL_OBJECT_IDENTIFIER);
    String aPath=theSDODataObject._getPath();
    objectOutput.writeUTF(aPath);
    ((ObjectOutputStream)objectOutput).writeObject(theSDODataObject.getRootObject());
  }
}"
66490,"/** 
 * Purpose: Deserialize from an ObjectInputStream into an SDODataObject This function is mandated by the Externalizable interface. It reads back binary data in the same order as was written in writeExternal(). An object has already been constructed with the no-arg constructor before this function fills in the member fields. The deserialized object will be returned later in a call from the ObjectInputStream to readResolve()
 */
public void readExternal(ObjectInput objectInput) throws IOException, ClassNotFoundException {
  ByteArrayInputStream aByteInputStream=null;
  GZIPInputStream aGZIPInputStream=null;
  int dataObjectIdentifier=objectInput.read();
switch (dataObjectIdentifier) {
case SDO_INTERNAL_OBJECT_IDENTIFIER:
    String xPathString=objectInput.readUTF();
  SDODataObject deserializedDataObject=(SDODataObject)objectInput.readObject();
theSDODataObject=(SDODataObject)deserializedDataObject.get(xPathString);
break;
case SDO_ROOT_OBJECT_IDENTIFIER:
try {
int aStreamLength=objectInput.readInt();
byte[] aGZIPByteArray=new byte[aStreamLength];
objectInput.readFully(aGZIPByteArray);
aByteInputStream=new ByteArrayInputStream(aGZIPByteArray);
aGZIPInputStream=new GZIPInputStream(aByteInputStream);
XMLDocument aDocument=aHelperContext.getXMLHelper().load(aGZIPInputStream);
theSDODataObject=(SDODataObject)aDocument.getRootObject();
}
  finally {
if (aGZIPInputStream != null) {
aGZIPInputStream.close();
}
if (aByteInputStream != null) {
aByteInputStream.close();
}
}
break;
}
}","/** 
 * Purpose: Deserialize from an ObjectInputStream into an SDODataObject This function is mandated by the Externalizable interface. It reads back binary data in the same order as was written in writeExternal(). An object has already been constructed with the no-arg constructor before this function fills in the member fields. The deserialized object will be returned later in a call from the ObjectInputStream to readResolve()
 */
public void readExternal(ObjectInput objectInput) throws IOException, ClassNotFoundException {
  ByteArrayInputStream aByteInputStream=null;
  GZIPInputStream aGZIPInputStream=null;
  int dataObjectIdentifier=objectInput.read();
switch (dataObjectIdentifier) {
case SDO_INTERNAL_OBJECT_IDENTIFIER:
    String xPathString=objectInput.readUTF();
  SDODataObject deserializedDataObject=(SDODataObject)objectInput.readObject();
theSDODataObject=(SDODataObject)deserializedDataObject.get(xPathString);
break;
case SDO_ROOT_OBJECT_IDENTIFIER:
try {
int aStreamLength=objectInput.readInt();
byte[] aGZIPByteArray=new byte[aStreamLength];
objectInput.readFully(aGZIPByteArray);
aByteInputStream=new ByteArrayInputStream(aGZIPByteArray);
aGZIPInputStream=new GZIPInputStream(aByteInputStream);
XMLDocument aDocument=aHelperContext.getXMLHelper().load(aGZIPInputStream);
theSDODataObject=(SDODataObject)aDocument.getRootObject();
}
  finally {
if (aGZIPInputStream != null) {
aGZIPInputStream.close();
}
if (aByteInputStream != null) {
aByteInputStream.close();
}
}
break;
case SDO_HELPER_CONTEXT_ID_IDENTIFIER:
try {
String helperContextIdentifier=objectInput.readUTF();
int aStreamLength=objectInput.readInt();
byte[] aGZIPByteArray=new byte[aStreamLength];
objectInput.readFully(aGZIPByteArray);
aByteInputStream=new ByteArrayInputStream(aGZIPByteArray);
aGZIPInputStream=new GZIPInputStream(aByteInputStream);
HelperContext contextToUse=SDOHelperContext.getHelperContext(helperContextIdentifier);
XMLDocument aDocument=contextToUse.getXMLHelper().load(aGZIPInputStream);
theSDODataObject=(SDODataObject)aDocument.getRootObject();
}
  finally {
if (aGZIPInputStream != null) {
aGZIPInputStream.close();
}
if (aByteInputStream != null) {
aByteInputStream.close();
}
}
break;
}
}"
66491,"/** 
 * ADVANCED: Remove the HelperContext for the application associated with a given key, if it exists in the map.
 */
private static void resetHelperContext(Object key){
  HelperContext hCtx=helperContexts.get(key);
  if (hCtx != null) {
    helperContexts.remove(key);
  }
}","/** 
 * ADVANCED: Remove the HelperContext for the application associated with a given key, if it exists in the map.
 */
private static void resetHelperContext(Object key){
  HelperContext hCtx=helperContexts.get(key).get(GLOBAL_HELPER_IDENTIFIER);
  if (hCtx != null) {
    helperContexts.remove(key);
  }
}"
66492,"/** 
 * INTERNAL: Put a ClassLoader/HelperContext key/value pair in the Thread HelperContext  map.  If Thread.currentThread().getContextClassLoader() == key during  getHelperContext() call then the HelperContext (value) will be returned. This method will overwrite an existing entry in the map with the same ClassLoader key.
 * @param key class loader
 * @param value helper context
 */
public static void putHelperContext(ClassLoader key,HelperContext value){
  if (key == null || value == null) {
    return;
  }
  userSetHelperContexts.put(key,new WeakReference<HelperContext>(value));
}","/** 
 * Replaces the provided helper context in the map of identifiers to helper contexts for this application. ctx.getIdentifier() will be used to obtain identifier 
 */
public static void putHelperContext(HelperContext ctx){
  String identifier=((SDOHelperContext)ctx).getIdentifier();
  if (GLOBAL_HELPER_IDENTIFIER.equals(identifier)) {
    return;
  }
  getContextMap().put(identifier,ctx);
}"
66493,"/** 
 * ADVANCED Promote this helper context to be the default or global one. This will completely replace the existing default context including all types and properties defined. 
 */
public void makeDefaultContext(){
  ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
  Object key=getDelegateMapKey(contextClassLoader);
  helperContexts.put(key,this);
}","/** 
 * ADVANCED Promote this helper context to be the default or global one. This will completely replace the existing default context including all types and properties defined. 
 */
public void makeDefaultContext(){
  ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
  Object key=getDelegateMapKey(contextClassLoader);
  ConcurrentHashMap<String,HelperContext> contexts=helperContexts.get(key);
  if (contexts == null) {
    contexts=new ConcurrentHashMap<String,HelperContext>();
    ConcurrentHashMap<String,HelperContext> existingContexts=helperContexts.putIfAbsent(key,contexts);
    if (existingContexts != null) {
      contexts=existingContexts;
    }
  }
  this.identifier=GLOBAL_HELPER_IDENTIFIER;
  contexts.put(GLOBAL_HELPER_IDENTIFIER,this);
}"
66494,"/** 
 * Create a local HelperContext.  This constructor should be used in OSGi  environments.
 * @param aClassLoader This class loader will be used to find static instance classes.
 */
public SDOHelperContext(ClassLoader aClassLoader){
  super();
  initialize(aClassLoader);
}","/** 
 * Create a local HelperContext with the given identifier.  This constructor should be used in OSGi environments.
 * @param identifier The unique label for this HelperContext.
 * @param aClassLoader This class loader will be used to find static instance classes.
 */
public SDOHelperContext(String identifier,ClassLoader aClassLoader){
  super();
  this.identifier=identifier;
  initialize(aClassLoader);
}"
66495,"/** 
 * INTERNAL:  Return the helper context for a given key.  The key will either be a ClassLoader or a String (representing an application name). A new context will be created and put in the map if none exists  for the given key. The key is assumed to be non-null -  getDelegateKey should always return either a string representing the application name (for WLS) or a class loader.  This is relevant since 'putIfAbsent' will  throw a null pointer exception if the key is null.   
 */
public static HelperContext getHelperContext(){
  ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
  HelperContext hCtx=getHelperContext(contextClassLoader);
  if (hCtx != null) {
    return hCtx;
  }
  Object key=getDelegateMapKey(contextClassLoader);
  hCtx=helperContexts.get(key);
  if (hCtx == null) {
    hCtx=new SDOHelperContext();
    HelperContext existingCtx=helperContexts.putIfAbsent(key,hCtx);
    if (existingCtx != null) {
      hCtx=existingCtx;
    }
    if (key.getClass() == ClassConstants.STRING) {
      helperContexts.put(contextClassLoader,hCtx);
    }
    addNotificationListener(key);
  }
  return hCtx;
}","/** 
 * Return the local helper context with the given identifier, or create one if it does not already exist.
 */
public static HelperContext getHelperContext(String identifier,ClassLoader classLoader){
  ConcurrentMap<String,HelperContext> contextMap=getContextMap();
  HelperContext helperContext=contextMap.get(identifier);
  if (null == helperContext) {
    helperContext=new SDOHelperContext(identifier,classLoader);
    HelperContext existingContext=contextMap.putIfAbsent(identifier,helperContext);
    if (existingContext != null) {
      helperContext=existingContext;
    }
  }
  return helperContext;
}"
66496,"public List getNullCapableValues(){
  return this.nullCapableValues;
}","public List getNullCapableValues(){
  if (null == nullCapableValues) {
    this.nullCapableValues=new ArrayList<NullCapableValue>();
  }
  return this.nullCapableValues;
}"
66497,"/** 
 * INTERNAL: Saves the DataObject as an XML document with the specified root element. Same as save(createDocument(dataObject, rootElementURI, rootElementName), writer, null);
 * @param dataObject specifies DataObject to be saved
 * @param rootElementURI the Target Namespace URI of the root XML element
 * @param rootElementName the Name of the root XML element
 * @param writer specifies the Writer to write to.
 * @throws IOException for stream exceptions.
 * @throws IllegalArgumentException if the dataObject treeis not closed or has no container.
 */
private void save(DataObject rootObject,String rootElementURI,String rootElementName,Writer writer) throws XMLMarshalException {
  SDOXMLDocument xmlDocument=(SDOXMLDocument)createDocument(rootObject,rootElementURI,rootElementName);
  XMLMarshaller anXMLMarshaller=getXmlMarshaller();
  anXMLMarshaller.setFragment(!xmlDocument.isXMLDeclaration());
  WriterRecord writerRecord;
  if (anXMLMarshaller.isFormattedOutput()) {
    writerRecord=new FormattedWriterRecord();
  }
 else {
    writerRecord=new WriterRecord();
  }
  writerRecord.setWriter(writer);
  writerRecord.setMarshaller(anXMLMarshaller);
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setMarshalledObject(rootObject);
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setMarshalledObjectRootQName(new QName(rootElementURI,rootElementName));
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setRootMarshalReocrd(writerRecord);
  anXMLMarshaller.marshal(xmlDocument,writerRecord);
  try {
    writer.flush();
  }
 catch (  IOException ex) {
    throw XMLMarshalException.marshalException(ex);
  }
}","/** 
 * INTERNAL: Saves the DataObject as an XML document with the specified root element. Same as save(createDocument(dataObject, rootElementURI, rootElementName), writer, null);
 * @param dataObject specifies DataObject to be saved
 * @param rootElementURI the Target Namespace URI of the root XML element
 * @param rootElementName the Name of the root XML element
 * @param writer specifies the Writer to write to.
 * @throws IOException for stream exceptions.
 * @throws IllegalArgumentException if the dataObject treeis not closed or has no container.
 */
private void save(DataObject rootObject,String rootElementURI,String rootElementName,Writer writer) throws XMLMarshalException {
  SDOXMLDocument xmlDocument=(SDOXMLDocument)createDocument(rootObject,rootElementURI,rootElementName);
  XMLMarshaller anXMLMarshaller=getXmlMarshaller();
  anXMLMarshaller.setFragment(!xmlDocument.isXMLDeclaration());
  WriterRecord writerRecord;
  if (anXMLMarshaller.isFormattedOutput()) {
    writerRecord=new FormattedWriterRecord();
  }
 else {
    writerRecord=new WriterRecord();
  }
  writerRecord.setWriter(writer);
  writerRecord.setMarshaller(anXMLMarshaller);
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setMarshalledObject(rootObject);
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setMarshalledObjectRootQName(new QName(rootElementURI,rootElementName));
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setRootMarshalRecord(writerRecord);
  anXMLMarshaller.marshal(xmlDocument,writerRecord);
  try {
    writer.flush();
  }
 catch (  IOException ex) {
    throw XMLMarshalException.marshalException(ex);
  }
}"
66498,"/** 
 * ADVANCED: Appends the SQL standard outer join clause, and some variation per platform. Most platforms use this syntax, support is also offered for Oracle to join in the where clause (although it should use the FROM clause as the WHERE clause is obsolete).
 */
public void appendFromClauseForOuterJoin(ExpressionSQLPrinter printer,Vector outerJoinedAliases,Collection aliasesOfTablesToBeLocked,boolean shouldPrintUpdateClauseForAllTables) throws IOException {
  Writer writer=printer.getWriter();
  AbstractSession session=printer.getSession();
  DatabasePlatform platform=session.getPlatform();
  boolean firstTable=true;
  boolean requiresEscape=false;
  boolean usesHistory=(getBuilder() != null) && getBuilder().hasAsOfClause();
  OuterJoinExpressionHolders outerJoinExpressionHolders=new OuterJoinExpressionHolders();
  for (int index=0; index < getOuterJoinExpressions().size(); index++) {
    QueryKeyExpression outerExpression=(QueryKeyExpression)getOuterJoinExpressions().elementAt(index);
    DatabaseTable targetTable=null;
    DatabaseTable sourceTable=null;
    DatabaseTable sourceAlias=null;
    DatabaseTable targetAlias=null;
    if (outerExpression != null) {
      targetTable=outerExpression.getReferenceTable();
      sourceTable=outerExpression.getSourceTable();
      sourceAlias=outerExpression.getBaseExpression().aliasForTable(sourceTable);
      targetAlias=outerExpression.aliasForTable(targetTable);
      if (usesHistory) {
        sourceTable=(DatabaseTable)getTableAliases().get(sourceAlias);
        targetTable=(DatabaseTable)getTableAliases().get(targetAlias);
      }
    }
 else {
      sourceTable=((ClassDescriptor)getDescriptorsForMultitableInheritanceOnly().get(index)).getTables().firstElement();
      targetTable=((ClassDescriptor)getDescriptorsForMultitableInheritanceOnly().get(index)).getInheritancePolicy().getChildrenTables().get(0);
      Expression exp=(Expression)((Map)getOuterJoinedAdditionalJoinCriteria().elementAt(index)).get(targetTable);
      sourceAlias=exp.aliasForTable(sourceTable);
      targetAlias=exp.aliasForTable(targetTable);
    }
    outerJoinExpressionHolders.add(new OuterJoinExpressionHolder(outerExpression,index,targetTable,sourceTable,targetAlias,sourceAlias));
  }
  for (Iterator i=outerJoinExpressionHolders.linearize(this).iterator(); i.hasNext(); ) {
    OuterJoinExpressionHolder holder=(OuterJoinExpressionHolder)i.next();
    QueryKeyExpression outerExpression=holder.joinExpression;
    int index=holder.index;
    DatabaseTable targetTable=holder.targetTable;
    DatabaseTable sourceTable=holder.sourceTable;
    DatabaseTable sourceAlias=holder.sourceAlias;
    DatabaseTable targetAlias=holder.targetAlias;
    if (!outerJoinedAliases.contains(targetAlias)) {
      if (!outerJoinedAliases.contains(sourceAlias)) {
        if (requiresEscape && session.getPlatform().shouldUseJDBCOuterJoinSyntax()) {
          writer.write(""String_Node_Str"");
        }
        if (!firstTable) {
          writer.write(""String_Node_Str"");
        }
        if (platform.shouldUseJDBCOuterJoinSyntax()) {
          writer.write(platform.getJDBCOuterJoinString());
        }
        requiresEscape=true;
        firstTable=false;
        writer.write(sourceTable.getQualifiedNameDelimited(printer.getPlatform()));
        outerJoinedAliases.addElement(sourceAlias);
        writer.write(""String_Node_Str"");
        if (sourceAlias.isDecorated()) {
          ((DecoratedDatabaseTable)sourceAlias).getAsOfClause().printSQL(printer);
          writer.write(""String_Node_Str"");
        }
        writer.write(sourceAlias.getQualifiedNameDelimited(printer.getPlatform()));
        printForUpdateClauseOnJoin(sourceAlias,printer,shouldPrintUpdateClauseForAllTables,aliasesOfTablesToBeLocked,platform);
      }
      if (outerExpression == null) {
        printAdditionalJoins(printer,outerJoinedAliases,(ClassDescriptor)getDescriptorsForMultitableInheritanceOnly().get(index),(Map)getOuterJoinedAdditionalJoinCriteria().elementAt(index),aliasesOfTablesToBeLocked,shouldPrintUpdateClauseForAllTables,usesHistory);
      }
 else {
        DatabaseTable relationTable=outerExpression.getRelationTable();
        if (relationTable == null) {
          if (outerExpression.isDirectCollection()) {
            Expression onExpression=(Expression)getOuterJoinedMappingCriteria().elementAt(index);
            DatabaseTable newAlias=onExpression.aliasForTable(targetTable);
            writer.write(""String_Node_Str"");
            writer.write(targetTable.getQualifiedNameDelimited(printer.getPlatform()));
            writer.write(""String_Node_Str"");
            if (newAlias.isDecorated()) {
              ((DecoratedDatabaseTable)newAlias).getAsOfClause().printSQL(printer);
              writer.write(""String_Node_Str"");
            }
            outerJoinedAliases.addElement(newAlias);
            writer.write(newAlias.getQualifiedNameDelimited(printer.getPlatform()));
            printForUpdateClauseOnJoin(newAlias,printer,shouldPrintUpdateClauseForAllTables,aliasesOfTablesToBeLocked,platform);
            printOnClause(onExpression,printer,platform);
          }
 else {
            writer.write(""String_Node_Str"");
            Map tablesJoinExpression=(Map)getOuterJoinedAdditionalJoinCriteria().elementAt(index);
            boolean hasAdditionalJoinExpressions=tablesJoinExpression != null && !tablesJoinExpression.isEmpty();
            if (hasAdditionalJoinExpressions && platform.supportsNestingOuterJoins()) {
              writer.write(""String_Node_Str"");
            }
            writer.write(targetTable.getQualifiedNameDelimited(printer.getPlatform()));
            writer.write(""String_Node_Str"");
            if (targetAlias.isDecorated()) {
              ((DecoratedDatabaseTable)targetAlias).getAsOfClause().printSQL(printer);
              writer.write(""String_Node_Str"");
            }
            outerJoinedAliases.addElement(targetAlias);
            writer.write(targetAlias.getQualifiedNameDelimited(printer.getPlatform()));
            printForUpdateClauseOnJoin(targetAlias,printer,shouldPrintUpdateClauseForAllTables,aliasesOfTablesToBeLocked,platform);
            if (hasAdditionalJoinExpressions && platform.supportsNestingOuterJoins()) {
              printAdditionalJoins(printer,outerJoinedAliases,outerExpression.getDescriptor(),tablesJoinExpression,aliasesOfTablesToBeLocked,shouldPrintUpdateClauseForAllTables,usesHistory);
              writer.write(""String_Node_Str"");
            }
            Expression sourceToTargetJoin=(Expression)getOuterJoinedMappingCriteria().elementAt(index);
            printOnClause(sourceToTargetJoin,printer,platform);
            if (hasAdditionalJoinExpressions && !platform.supportsNestingOuterJoins()) {
              printAdditionalJoins(printer,outerJoinedAliases,outerExpression.getDescriptor(),tablesJoinExpression,aliasesOfTablesToBeLocked,shouldPrintUpdateClauseForAllTables,usesHistory);
            }
          }
        }
 else {
          DatabaseTable relationAlias=((Expression)getOuterJoinedMappingCriteria().elementAt(index)).aliasForTable(relationTable);
          Vector tablesInOrder=NonSynchronizedVector.newInstance(3);
          tablesInOrder.add(sourceAlias);
          tablesInOrder.add(relationAlias);
          tablesInOrder.add(targetAlias);
          TreeMap indexToExpressionMap=new TreeMap();
          mapTableIndexToExpression((Expression)getOuterJoinedMappingCriteria().elementAt(index),indexToExpressionMap,tablesInOrder);
          Expression sourceToRelationJoin=(Expression)indexToExpressionMap.get(Integer.valueOf(1));
          Expression relationToTargetJoin=(Expression)indexToExpressionMap.get(Integer.valueOf(2));
          writer.write(""String_Node_Str"");
          if (platform.supportsNestingOuterJoins()) {
            writer.write(""String_Node_Str"");
          }
          writer.write(relationTable.getQualifiedNameDelimited(printer.getPlatform()));
          writer.write(""String_Node_Str"");
          if (relationAlias.isDecorated()) {
            ((DecoratedDatabaseTable)relationAlias).getAsOfClause().printSQL(printer);
            writer.write(""String_Node_Str"");
          }
          outerJoinedAliases.add(relationAlias);
          printForUpdateClauseOnJoin(relationAlias,printer,shouldPrintUpdateClauseForAllTables,aliasesOfTablesToBeLocked,platform);
          writer.write(relationAlias.getQualifiedNameDelimited(printer.getPlatform()));
          if (!platform.supportsNestingOuterJoins()) {
            printOnClause(sourceToRelationJoin,printer,platform);
          }
          if (!session.getPlatform().supportsANSIInnerJoinSyntax()) {
            writer.write(""String_Node_Str"");
          }
          writer.write(""String_Node_Str"");
          writer.write(targetTable.getQualifiedNameDelimited(printer.getPlatform()));
          writer.write(""String_Node_Str"");
          if (targetAlias.isDecorated()) {
            ((DecoratedDatabaseTable)targetAlias).getAsOfClause().printSQL(printer);
            writer.write(""String_Node_Str"");
          }
          outerJoinedAliases.add(targetAlias);
          writer.write(targetAlias.getQualifiedNameDelimited(printer.getPlatform()));
          printForUpdateClauseOnJoin(targetAlias,printer,shouldPrintUpdateClauseForAllTables,aliasesOfTablesToBeLocked,platform);
          printOnClause(relationToTargetJoin,printer,platform);
          Map tablesJoinExpression=(Map)getOuterJoinedAdditionalJoinCriteria().elementAt(index);
          if (tablesJoinExpression != null && !tablesJoinExpression.isEmpty()) {
            printAdditionalJoins(printer,outerJoinedAliases,outerExpression.getDescriptor(),tablesJoinExpression,aliasesOfTablesToBeLocked,shouldPrintUpdateClauseForAllTables,usesHistory);
          }
          if (platform.supportsNestingOuterJoins()) {
            writer.write(""String_Node_Str"");
            printOnClause(sourceToRelationJoin,printer,platform);
          }
        }
      }
    }
  }
  if (requiresEscape && session.getPlatform().shouldUseJDBCOuterJoinSyntax()) {
    writer.write(""String_Node_Str"");
  }
}","/** 
 * ADVANCED: Appends the SQL standard outer join clause, and some variation per platform. Most platforms use this syntax, support is also offered for Oracle to join in the where clause (although it should use the FROM clause as the WHERE clause is obsolete).
 */
public void appendFromClauseForOuterJoin(ExpressionSQLPrinter printer,Vector outerJoinedAliases,Collection aliasesOfTablesToBeLocked,boolean shouldPrintUpdateClauseForAllTables) throws IOException {
  Writer writer=printer.getWriter();
  AbstractSession session=printer.getSession();
  DatabasePlatform platform=session.getPlatform();
  boolean firstTable=true;
  boolean requiresEscape=false;
  boolean usesHistory=(getBuilder() != null) && getBuilder().hasAsOfClause();
  int nSize=getOuterJoinExpressions().size();
  List<OuterJoinExpressionHolder> outerJoinExpressionHolders=new ArrayList(nSize);
  for (int index=0; index < nSize; index++) {
    QueryKeyExpression outerExpression=(QueryKeyExpression)getOuterJoinExpressions().elementAt(index);
    DatabaseTable targetTable=null;
    DatabaseTable sourceTable=null;
    DatabaseTable sourceAlias=null;
    DatabaseTable targetAlias=null;
    if (outerExpression != null) {
      targetTable=outerExpression.getReferenceTable();
      sourceTable=outerExpression.getSourceTable();
      sourceAlias=outerExpression.getBaseExpression().aliasForTable(sourceTable);
      targetAlias=outerExpression.aliasForTable(targetTable);
      if (usesHistory) {
        sourceTable=(DatabaseTable)getTableAliases().get(sourceAlias);
        targetTable=(DatabaseTable)getTableAliases().get(targetAlias);
      }
    }
 else {
      sourceTable=((ClassDescriptor)getDescriptorsForMultitableInheritanceOnly().get(index)).getTables().firstElement();
      targetTable=((ClassDescriptor)getDescriptorsForMultitableInheritanceOnly().get(index)).getInheritancePolicy().getChildrenTables().get(0);
      Expression exp=(Expression)((Map)getOuterJoinedAdditionalJoinCriteria().elementAt(index)).get(targetTable);
      sourceAlias=exp.aliasForTable(sourceTable);
      targetAlias=exp.aliasForTable(targetTable);
    }
    outerJoinExpressionHolders.add(new OuterJoinExpressionHolder(outerExpression,index,targetTable,sourceTable,targetAlias,sourceAlias));
  }
  if (nSize > 1) {
    sortOuterJoinExpressionHolders(outerJoinExpressionHolders);
  }
  for (  OuterJoinExpressionHolder holder : outerJoinExpressionHolders) {
    QueryKeyExpression outerExpression=holder.joinExpression;
    int index=holder.index;
    DatabaseTable targetTable=holder.targetTable;
    DatabaseTable sourceTable=holder.sourceTable;
    DatabaseTable sourceAlias=holder.sourceAlias;
    DatabaseTable targetAlias=holder.targetAlias;
    if (!outerJoinedAliases.contains(targetAlias)) {
      if (!outerJoinedAliases.contains(sourceAlias)) {
        if (requiresEscape && session.getPlatform().shouldUseJDBCOuterJoinSyntax()) {
          writer.write(""String_Node_Str"");
        }
        if (!firstTable) {
          writer.write(""String_Node_Str"");
        }
        if (platform.shouldUseJDBCOuterJoinSyntax()) {
          writer.write(platform.getJDBCOuterJoinString());
        }
        requiresEscape=true;
        firstTable=false;
        writer.write(sourceTable.getQualifiedNameDelimited(printer.getPlatform()));
        outerJoinedAliases.addElement(sourceAlias);
        writer.write(""String_Node_Str"");
        if (sourceAlias.isDecorated()) {
          ((DecoratedDatabaseTable)sourceAlias).getAsOfClause().printSQL(printer);
          writer.write(""String_Node_Str"");
        }
        writer.write(sourceAlias.getQualifiedNameDelimited(printer.getPlatform()));
        printForUpdateClauseOnJoin(sourceAlias,printer,shouldPrintUpdateClauseForAllTables,aliasesOfTablesToBeLocked,platform);
      }
      if (outerExpression == null) {
        printAdditionalJoins(printer,outerJoinedAliases,(ClassDescriptor)getDescriptorsForMultitableInheritanceOnly().get(index),(Map)getOuterJoinedAdditionalJoinCriteria().elementAt(index),aliasesOfTablesToBeLocked,shouldPrintUpdateClauseForAllTables,usesHistory);
      }
 else {
        DatabaseTable relationTable=outerExpression.getRelationTable();
        if (relationTable == null) {
          if (outerExpression.isDirectCollection()) {
            Expression onExpression=(Expression)getOuterJoinedMappingCriteria().elementAt(index);
            DatabaseTable newAlias=onExpression.aliasForTable(targetTable);
            writer.write(""String_Node_Str"");
            writer.write(targetTable.getQualifiedNameDelimited(printer.getPlatform()));
            writer.write(""String_Node_Str"");
            if (newAlias.isDecorated()) {
              ((DecoratedDatabaseTable)newAlias).getAsOfClause().printSQL(printer);
              writer.write(""String_Node_Str"");
            }
            outerJoinedAliases.addElement(newAlias);
            writer.write(newAlias.getQualifiedNameDelimited(printer.getPlatform()));
            printForUpdateClauseOnJoin(newAlias,printer,shouldPrintUpdateClauseForAllTables,aliasesOfTablesToBeLocked,platform);
            printOnClause(onExpression,printer,platform);
          }
 else {
            writer.write(""String_Node_Str"");
            Map tablesJoinExpression=(Map)getOuterJoinedAdditionalJoinCriteria().elementAt(index);
            boolean hasAdditionalJoinExpressions=tablesJoinExpression != null && !tablesJoinExpression.isEmpty();
            if (hasAdditionalJoinExpressions && platform.supportsNestingOuterJoins()) {
              writer.write(""String_Node_Str"");
            }
            writer.write(targetTable.getQualifiedNameDelimited(printer.getPlatform()));
            writer.write(""String_Node_Str"");
            if (targetAlias.isDecorated()) {
              ((DecoratedDatabaseTable)targetAlias).getAsOfClause().printSQL(printer);
              writer.write(""String_Node_Str"");
            }
            outerJoinedAliases.addElement(targetAlias);
            writer.write(targetAlias.getQualifiedNameDelimited(printer.getPlatform()));
            printForUpdateClauseOnJoin(targetAlias,printer,shouldPrintUpdateClauseForAllTables,aliasesOfTablesToBeLocked,platform);
            if (hasAdditionalJoinExpressions && platform.supportsNestingOuterJoins()) {
              printAdditionalJoins(printer,outerJoinedAliases,outerExpression.getDescriptor(),tablesJoinExpression,aliasesOfTablesToBeLocked,shouldPrintUpdateClauseForAllTables,usesHistory);
              writer.write(""String_Node_Str"");
            }
            Expression sourceToTargetJoin=(Expression)getOuterJoinedMappingCriteria().elementAt(index);
            printOnClause(sourceToTargetJoin,printer,platform);
            if (hasAdditionalJoinExpressions && !platform.supportsNestingOuterJoins()) {
              printAdditionalJoins(printer,outerJoinedAliases,outerExpression.getDescriptor(),tablesJoinExpression,aliasesOfTablesToBeLocked,shouldPrintUpdateClauseForAllTables,usesHistory);
            }
          }
        }
 else {
          DatabaseTable relationAlias=((Expression)getOuterJoinedMappingCriteria().elementAt(index)).aliasForTable(relationTable);
          Vector tablesInOrder=NonSynchronizedVector.newInstance(3);
          tablesInOrder.add(sourceAlias);
          tablesInOrder.add(relationAlias);
          tablesInOrder.add(targetAlias);
          TreeMap indexToExpressionMap=new TreeMap();
          mapTableIndexToExpression((Expression)getOuterJoinedMappingCriteria().elementAt(index),indexToExpressionMap,tablesInOrder);
          Expression sourceToRelationJoin=(Expression)indexToExpressionMap.get(Integer.valueOf(1));
          Expression relationToTargetJoin=(Expression)indexToExpressionMap.get(Integer.valueOf(2));
          writer.write(""String_Node_Str"");
          if (platform.supportsNestingOuterJoins()) {
            writer.write(""String_Node_Str"");
          }
          writer.write(relationTable.getQualifiedNameDelimited(printer.getPlatform()));
          writer.write(""String_Node_Str"");
          if (relationAlias.isDecorated()) {
            ((DecoratedDatabaseTable)relationAlias).getAsOfClause().printSQL(printer);
            writer.write(""String_Node_Str"");
          }
          outerJoinedAliases.add(relationAlias);
          printForUpdateClauseOnJoin(relationAlias,printer,shouldPrintUpdateClauseForAllTables,aliasesOfTablesToBeLocked,platform);
          writer.write(relationAlias.getQualifiedNameDelimited(printer.getPlatform()));
          if (!platform.supportsNestingOuterJoins()) {
            printOnClause(sourceToRelationJoin,printer,platform);
          }
          if (!session.getPlatform().supportsANSIInnerJoinSyntax()) {
            writer.write(""String_Node_Str"");
          }
          writer.write(""String_Node_Str"");
          writer.write(targetTable.getQualifiedNameDelimited(printer.getPlatform()));
          writer.write(""String_Node_Str"");
          if (targetAlias.isDecorated()) {
            ((DecoratedDatabaseTable)targetAlias).getAsOfClause().printSQL(printer);
            writer.write(""String_Node_Str"");
          }
          outerJoinedAliases.add(targetAlias);
          writer.write(targetAlias.getQualifiedNameDelimited(printer.getPlatform()));
          printForUpdateClauseOnJoin(targetAlias,printer,shouldPrintUpdateClauseForAllTables,aliasesOfTablesToBeLocked,platform);
          printOnClause(relationToTargetJoin,printer,platform);
          Map tablesJoinExpression=(Map)getOuterJoinedAdditionalJoinCriteria().elementAt(index);
          if (tablesJoinExpression != null && !tablesJoinExpression.isEmpty()) {
            printAdditionalJoins(printer,outerJoinedAliases,outerExpression.getDescriptor(),tablesJoinExpression,aliasesOfTablesToBeLocked,shouldPrintUpdateClauseForAllTables,usesHistory);
          }
          if (platform.supportsNestingOuterJoins()) {
            writer.write(""String_Node_Str"");
            printOnClause(sourceToRelationJoin,printer,platform);
          }
        }
      }
    }
  }
  if (requiresEscape && session.getPlatform().shouldUseJDBCOuterJoinSyntax()) {
    writer.write(""String_Node_Str"");
  }
}"
66499,"public static TableDefinition buildDEPTTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldID=new FieldDefinition();
  fieldID.setName(""String_Node_Str"");
  fieldID.setTypeName(""String_Node_Str"");
  fieldID.setSize(15);
  fieldID.setSubSize(0);
  fieldID.setIsPrimaryKey(true);
  fieldID.setIsIdentity(true);
  fieldID.setUnique(false);
  fieldID.setShouldAllowNull(false);
  table.addField(fieldID);
  FieldDefinition fieldNAME=new FieldDefinition();
  fieldNAME.setName(""String_Node_Str"");
  fieldNAME.setTypeName(""String_Node_Str"");
  fieldNAME.setSize(60);
  fieldNAME.setSubSize(0);
  fieldNAME.setIsPrimaryKey(false);
  fieldNAME.setIsIdentity(false);
  fieldNAME.setUnique(false);
  fieldNAME.setShouldAllowNull(true);
  table.addField(fieldNAME);
  return table;
}","public static TableDefinition buildDEPTTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldID=new FieldDefinition();
  fieldID.setName(""String_Node_Str"");
  fieldID.setTypeName(""String_Node_Str"");
  fieldID.setSize(15);
  fieldID.setSubSize(0);
  fieldID.setIsPrimaryKey(true);
  fieldID.setIsIdentity(true);
  fieldID.setUnique(false);
  fieldID.setShouldAllowNull(false);
  table.addField(fieldID);
  FieldDefinition fieldNAME=new FieldDefinition();
  fieldNAME.setName(""String_Node_Str"");
  fieldNAME.setTypeName(""String_Node_Str"");
  fieldNAME.setSize(60);
  fieldNAME.setSubSize(0);
  fieldNAME.setIsPrimaryKey(false);
  fieldNAME.setIsIdentity(false);
  fieldNAME.setUnique(false);
  fieldNAME.setShouldAllowNull(true);
  table.addField(fieldNAME);
  FieldDefinition fieldHEAD=new FieldDefinition();
  fieldHEAD.setName(""String_Node_Str"");
  fieldHEAD.setTypeName(""String_Node_Str"");
  fieldHEAD.setSize(15);
  fieldHEAD.setSubSize(0);
  fieldHEAD.setIsPrimaryKey(false);
  fieldHEAD.setIsIdentity(false);
  fieldHEAD.setUnique(false);
  fieldHEAD.setShouldAllowNull(true);
  table.addField(fieldHEAD);
  return table;
}"
66500,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new JoinedAttributeAdvancedJunitTest(""String_Node_Str""));
  return suite;
}"
66501,"protected XMLDescriptor findReferenceDescriptor(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,DatabaseMapping mapping,UnmarshalKeepAsElementPolicy policy){
  XMLDescriptor returnDescriptor=null;
  if (atts != null) {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    String schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (schemaType != null) {
      schemaType=schemaType.trim();
      if (schemaType.length() > 0) {
        XPathFragment frag=new XPathFragment();
        frag.setXPath(schemaType);
        QName qname=null;
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
          qname=new QName(url,frag.getLocalName());
          unmarshalRecord.setTypeQName(qname);
        }
        returnDescriptor=xmlContext.getDescriptorByGlobalType(frag);
        if (returnDescriptor == null) {
          if (policy == null || (policy != null && policy != UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT && policy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(qname);
            if (theClass == null) {
              throw XMLMarshalException.noDescriptorFound(mapping);
            }
          }
        }
      }
    }
  }
  return returnDescriptor;
}","protected XMLDescriptor findReferenceDescriptor(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,DatabaseMapping mapping,UnmarshalKeepAsElementPolicy policy){
  XMLDescriptor returnDescriptor=null;
  if (atts != null) {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    String schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (schemaType != null) {
      schemaType=schemaType.trim();
      if (schemaType.length() > 0) {
        XPathFragment frag=new XPathFragment();
        frag.setXPath(schemaType);
        QName qname=null;
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
          qname=new QName(url,frag.getLocalName());
          unmarshalRecord.setTypeQName(qname);
        }
 else {
          String url=unmarshalRecord.resolveNamespacePrefix(XMLConstants.EMPTY_STRING);
          if (null != url) {
            frag.setNamespaceURI(url);
            qname=new QName(url,frag.getLocalName());
            unmarshalRecord.setTypeQName(qname);
          }
        }
        returnDescriptor=xmlContext.getDescriptorByGlobalType(frag);
        if (returnDescriptor == null) {
          if (policy == null || (policy != null && policy != UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT && policy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(qname);
            if (theClass == null) {
              throw XMLMarshalException.noDescriptorFound(mapping);
            }
          }
        }
      }
    }
  }
  return returnDescriptor;
}"
66502,"public Project generateProject(ArrayList<JavaClass> typeInfoClasses,HashMap<String,TypeInfo> typeInfo,HashMap<String,QName> userDefinedSchemaTypes,HashMap<String,NamespaceInfo> packageToNamespaceMappings,HashMap<QName,ElementDeclaration> globalElements,List<ElementDeclaration> localElements,Map<TypeMappingInfo,Class> typeMappingInfoToGeneratedClass,Map<TypeMappingInfo,Class> typeMappingInfoToAdapterClasses,boolean isDefaultNamespaceAllowed) throws Exception {
  this.typeInfo=typeInfo;
  this.userDefinedSchemaTypes=userDefinedSchemaTypes;
  this.packageToNamespaceMappings=packageToNamespaceMappings;
  this.isDefaultNamespaceAllowed=isDefaultNamespaceAllowed;
  this.globalElements=globalElements;
  this.localElements=localElements;
  this.typeMappingInfoToGeneratedClasses=typeMappingInfoToGeneratedClass;
  this.typeMappingInfoToAdapterClasses=typeMappingInfoToAdapterClasses;
  project=new Project();
  for (  JavaClass next : typeInfoClasses) {
    if (!next.isEnum()) {
      generateDescriptor(next,project);
    }
  }
  for (  JavaClass next : typeInfoClasses) {
    if (!next.isEnum()) {
      setupInheritance(next);
    }
  }
  generateMappings();
  Set<Entry<String,TypeInfo>> entrySet=this.typeInfo.entrySet();
  for (  Entry<String,TypeInfo> entry : entrySet) {
    TypeInfo tInfo=entry.getValue();
    if (tInfo.getXmlCustomizer() != null) {
      String customizerClassName=tInfo.getXmlCustomizer();
      try {
        Class customizerClass=PrivilegedAccessHelper.getClassForName(customizerClassName);
        DescriptorCustomizer descriptorCustomizer=(DescriptorCustomizer)PrivilegedAccessHelper.newInstanceFromClass(customizerClass);
        descriptorCustomizer.customize(tInfo.getDescriptor());
      }
 catch (      IllegalAccessException iae) {
        throw JAXBException.couldNotCreateCustomizerInstance(iae,customizerClassName);
      }
catch (      InstantiationException ie) {
        throw JAXBException.couldNotCreateCustomizerInstance(ie,customizerClassName);
      }
catch (      ClassCastException cce) {
        throw JAXBException.invalidCustomizerClass(cce,customizerClassName);
      }
catch (      ClassNotFoundException cnfe) {
        throw JAXBException.couldNotCreateCustomizerInstance(cnfe,customizerClassName);
      }
    }
  }
  processGlobalElements(project);
  wrapperCounter=0;
  return project;
}","public Project generateProject(ArrayList<JavaClass> typeInfoClasses,HashMap<String,TypeInfo> typeInfo,HashMap<String,QName> userDefinedSchemaTypes,HashMap<String,NamespaceInfo> packageToNamespaceMappings,HashMap<QName,ElementDeclaration> globalElements,List<ElementDeclaration> localElements,Map<TypeMappingInfo,Class> typeMappingInfoToGeneratedClass,Map<TypeMappingInfo,Class> typeMappingInfoToAdapterClasses,boolean isDefaultNamespaceAllowed) throws Exception {
  this.typeInfo=typeInfo;
  this.userDefinedSchemaTypes=userDefinedSchemaTypes;
  this.packageToNamespaceMappings=packageToNamespaceMappings;
  this.isDefaultNamespaceAllowed=isDefaultNamespaceAllowed;
  this.globalElements=globalElements;
  this.localElements=localElements;
  this.typeMappingInfoToGeneratedClasses=typeMappingInfoToGeneratedClass;
  this.typeMappingInfoToAdapterClasses=typeMappingInfoToAdapterClasses;
  project=new Project();
  for (  JavaClass next : typeInfoClasses) {
    if (!next.isEnum()) {
      generateDescriptor(next,project);
    }
  }
  for (  JavaClass next : typeInfoClasses) {
    if (!next.isEnum()) {
      setupInheritance(next);
    }
  }
  generateMappings();
  Set<Entry<String,TypeInfo>> entrySet=this.typeInfo.entrySet();
  for (  Entry<String,TypeInfo> entry : entrySet) {
    TypeInfo tInfo=entry.getValue();
    if (tInfo.getXmlCustomizer() != null) {
      String customizerClassName=tInfo.getXmlCustomizer();
      try {
        Class customizerClass=PrivilegedAccessHelper.getClassForName(customizerClassName,true,helper.getClassLoader());
        DescriptorCustomizer descriptorCustomizer=(DescriptorCustomizer)PrivilegedAccessHelper.newInstanceFromClass(customizerClass);
        descriptorCustomizer.customize(tInfo.getDescriptor());
      }
 catch (      IllegalAccessException iae) {
        throw JAXBException.couldNotCreateCustomizerInstance(iae,customizerClassName);
      }
catch (      InstantiationException ie) {
        throw JAXBException.couldNotCreateCustomizerInstance(ie,customizerClassName);
      }
catch (      ClassCastException cce) {
        throw JAXBException.invalidCustomizerClass(cce,customizerClassName);
      }
catch (      ClassNotFoundException cnfe) {
        throw JAXBException.couldNotCreateCustomizerInstance(cnfe,customizerClassName);
      }
    }
  }
  processGlobalElements(project);
  wrapperCounter=0;
  return project;
}"
66503,"public void initialize(org.eclipse.persistence.internal.sessions.AbstractSession session){
  super.initialize(session);
  XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
  Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
  Iterator fieldTransformerIterator;
  DatabaseMapping xmlMapping;
  AbstractTransformationMapping transformationMapping;
  FieldTransformerNodeValue fieldTransformerNodeValue;
  Object[] nextFieldToTransformer;
  TypeNodeValue typeNodeValue;
  NodeValue mappingNodeValue=null;
  XMLField xmlField;
  while (mappingIterator.hasNext()) {
    xmlMapping=(DatabaseMapping)mappingIterator.next();
    if (xmlMapping instanceof XMLInverseReferenceMapping) {
      continue;
    }
    xmlField=(XMLField)xmlMapping.getField();
    if (xmlMapping.isTransformationMapping()) {
      transformationMapping=(AbstractTransformationMapping)xmlMapping;
      addTransformationMapping(transformationMapping);
      fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
      while (fieldTransformerIterator.hasNext()) {
        fieldTransformerNodeValue=new FieldTransformerNodeValue();
        nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
        xmlField=(XMLField)nextFieldToTransformer[0];
        fieldTransformerNodeValue.setXMLField(xmlField);
        fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
        addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
 else {
      if (xmlMapping.isAbstractDirectMapping()) {
        mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeObjectMapping()) {
        mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
        mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeCollectionMapping()) {
        mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyObjectMapping) {
        mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyCollectionMapping) {
        mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyAttributeMapping) {
        mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataMapping) {
        mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
        mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentMapping) {
        mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentCollectionMapping) {
        mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLCollectionReferenceMapping) {
        XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
        List fields=xmlColMapping.getFields();
        XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
        XPathNode branchNode;
        if (null == xmlColMappingField) {
          if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
            addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          branchNode=rootXPathNode;
        }
 else {
          branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
        }
        Iterator fieldIt=fields.iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLObjectReferenceMapping) {
        XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
        Iterator fieldIt=xmlORMapping.getFields().iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceObjectMapping) {
        XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
        firstNodeValue.setNullCapableNodeValue(firstNodeValue);
        this.addNullCapableValue(firstNodeValue);
        addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
          nodeValue.setNullCapableNodeValue(firstNodeValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceCollectionMapping) {
        XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
        XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
        HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
        unmarshalValue.setContainerNodeValue(unmarshalValue);
        marshalValue.setFieldToNodeValues(fieldToNodeValues);
        this.addContainerValue(unmarshalValue);
        fieldToNodeValues.put(firstField,unmarshalValue);
        addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
        addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
          nodeValue.setContainerNodeValue(unmarshalValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          fieldToNodeValues.put(next,nodeValue);
        }
        continue;
      }
      if (mappingNodeValue.isContainerValue()) {
        addContainerValue((ContainerValue)mappingNodeValue);
      }
      if (mappingNodeValue.isNullCapableValue()) {
        addNullCapableValue((NullCapableValue)mappingNodeValue);
      }
      if (xmlField != null) {
        addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
 else {
        addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
      if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
        XPathFragment nextFragment=xmlField.getXPathFragment();
        StringBuilder typeXPathStringBuilder=new StringBuilder();
        while (nextFragment.getNextFragment() != null) {
          typeXPathStringBuilder.append(nextFragment.getXPath());
          nextFragment=nextFragment.getNextFragment();
        }
        XMLField typeField=new XMLField();
        if (typeXPathStringBuilder.length() > 0) {
          typeXPathStringBuilder.append('/');
        }
        typeField.setXPath(typeXPathStringBuilder.toString() + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
        typeNodeValue=new TypeNodeValue();
        typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
        addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
  }
  if (xmlDescriptor.hasInheritance()) {
    InheritancePolicy inheritancePolicy=xmlDescriptor.getInheritancePolicy();
    if (!inheritancePolicy.hasClassExtractor()) {
      XMLField classIndicatorField=new XMLField(inheritancePolicy.getClassIndicatorFieldName());
      classIndicatorField.setNamespaceResolver(xmlDescriptor.getNamespaceResolver());
      InheritanceNodeValue inheritanceNodeValue=new InheritanceNodeValue();
      inheritanceNodeValue.setInheritancePolicy(inheritancePolicy);
      addChild(classIndicatorField.getXPathFragment(),inheritanceNodeValue,xmlDescriptor.getNamespaceResolver());
    }
  }
}","public void initialize(org.eclipse.persistence.internal.sessions.AbstractSession session){
  super.initialize(session);
  XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
  Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
  Iterator fieldTransformerIterator;
  DatabaseMapping xmlMapping;
  AbstractTransformationMapping transformationMapping;
  FieldTransformerNodeValue fieldTransformerNodeValue;
  Object[] nextFieldToTransformer;
  TypeNodeValue typeNodeValue;
  NodeValue mappingNodeValue=null;
  XMLField xmlField;
  while (mappingIterator.hasNext()) {
    xmlMapping=(DatabaseMapping)mappingIterator.next();
    if (xmlMapping instanceof XMLInverseReferenceMapping) {
      continue;
    }
    xmlField=(XMLField)xmlMapping.getField();
    if (xmlMapping.isTransformationMapping()) {
      transformationMapping=(AbstractTransformationMapping)xmlMapping;
      addTransformationMapping(transformationMapping);
      fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
      while (fieldTransformerIterator.hasNext()) {
        fieldTransformerNodeValue=new FieldTransformerNodeValue();
        nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
        xmlField=(XMLField)nextFieldToTransformer[0];
        fieldTransformerNodeValue.setXMLField(xmlField);
        fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
        addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
 else {
      if (xmlMapping.isAbstractDirectMapping()) {
        mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeObjectMapping()) {
        mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
        mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeCollectionMapping()) {
        mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyObjectMapping) {
        mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyCollectionMapping) {
        mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyAttributeMapping) {
        mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataMapping) {
        mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
        mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentMapping) {
        mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentCollectionMapping) {
        mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLCollectionReferenceMapping) {
        XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
        List fields=xmlColMapping.getFields();
        XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
        XPathNode branchNode;
        if (null == xmlColMappingField) {
          if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
            addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          branchNode=rootXPathNode;
        }
 else {
          branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
        }
        Iterator fieldIt=fields.iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLObjectReferenceMapping) {
        XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
        Iterator fieldIt=xmlORMapping.getFields().iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceObjectMapping) {
        XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
        firstNodeValue.setNullCapableNodeValue(firstNodeValue);
        this.addNullCapableValue(firstNodeValue);
        addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
          nodeValue.setNullCapableNodeValue(firstNodeValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceCollectionMapping) {
        XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
        XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
        HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
        unmarshalValue.setContainerNodeValue(unmarshalValue);
        marshalValue.setFieldToNodeValues(fieldToNodeValues);
        this.addContainerValue(unmarshalValue);
        fieldToNodeValues.put(firstField,unmarshalValue);
        addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
        addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
          nodeValue.setContainerNodeValue(unmarshalValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          fieldToNodeValues.put(next,nodeValue);
        }
        continue;
      }
      if (mappingNodeValue.isContainerValue()) {
        addContainerValue((ContainerValue)mappingNodeValue);
      }
      if (mappingNodeValue.isNullCapableValue()) {
        addNullCapableValue((NullCapableValue)mappingNodeValue);
      }
      if (xmlField != null) {
        addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
 else {
        addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
      if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
        XPathFragment nextFragment=xmlField.getXPathFragment();
        StringBuilder typeXPathStringBuilder=new StringBuilder();
        while (nextFragment.getNextFragment() != null) {
          typeXPathStringBuilder.append(nextFragment.getXPath());
          nextFragment=nextFragment.getNextFragment();
        }
        XMLField typeField=new XMLField();
        if (typeXPathStringBuilder.length() > 0) {
          typeXPathStringBuilder.append('/');
        }
        typeField.setXPath(typeXPathStringBuilder.toString() + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
        typeNodeValue=new TypeNodeValue();
        typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
        addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
  }
  if (xmlDescriptor.hasInheritance()) {
    InheritancePolicy inheritancePolicy=xmlDescriptor.getInheritancePolicy();
    if (!inheritancePolicy.hasClassExtractor()) {
      XMLField classIndicatorField=new XMLField(inheritancePolicy.getClassIndicatorFieldName());
      classIndicatorField.setNamespaceResolver(xmlDescriptor.getNamespaceResolver());
    }
  }
}"
66504,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  XMLDescriptor descriptor;
  TreeObjectBuilder objectBuilder;
  AbstractSession childSession;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    wasXMLRoot=true;
    value=((XMLRoot)value).getObject();
    if (null == value) {
      return false;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getXMLContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(XMLDescriptor)childSession.getDescriptor(value);
    objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        if (extraNamespaces == null) {
          extraNamespaces=new java.util.ArrayList();
        }
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().beforeMarshal(value);
      }
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      if (xmlAnyCollectionMapping.shouldAddXsiType(marshaller,descriptor,originalValue,wasXMLRoot)) {
        String typeValue=descriptor.getSchemaReference().getSchemaContext();
        addTypeAttribute(descriptor,marshalRecord,typeValue);
      }
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,WriteType.UNDEFINED);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().afterMarshal(value);
      }
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  XMLDescriptor descriptor;
  TreeObjectBuilder objectBuilder;
  AbstractSession childSession;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    wasXMLRoot=true;
    value=((XMLRoot)value).getObject();
    if (null == value) {
      return false;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getXMLContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(XMLDescriptor)childSession.getDescriptor(value);
    objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        if (extraNamespaces == null) {
          extraNamespaces=new java.util.ArrayList();
        }
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().beforeMarshal(value);
      }
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,WriteType.UNDEFINED);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().afterMarshal(value);
      }
    }
  }
  return true;
}"
66505,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlAnyObjectMapping.getConverter() != null) {
    objectValue=xmlAnyObjectMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  }
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    wasXMLRoot=true;
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    Session childSession=null;
    try {
      childSession=marshaller.getXMLContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().beforeMarshal(objectValue);
      }
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if ((rootFragment.getNamespaceURI() == null) && (rootFragment.getPrefix() != null)) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      if (xmlAnyObjectMapping.shouldAddXsiType(marshaller,descriptor,originalValue,wasXMLRoot)) {
        String typeValue=descriptor.getSchemaReference().getSchemaContext();
        addTypeAttribute(descriptor,marshalRecord,typeValue);
      }
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,WriteType.UNDEFINED);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().afterMarshal(objectValue);
      }
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlAnyObjectMapping.getConverter() != null) {
    objectValue=xmlAnyObjectMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  }
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    wasXMLRoot=true;
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    Session childSession=null;
    try {
      childSession=marshaller.getXMLContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().beforeMarshal(objectValue);
      }
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if ((rootFragment.getNamespaceURI() == null) && (rootFragment.getPrefix() != null)) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,WriteType.UNDEFINED);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().afterMarshal(objectValue);
      }
    }
  }
  return true;
}"
66506,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(value);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    if ((xmlCompositeCollectionMapping.getReferenceDescriptor() == null) && (descriptor.getSchemaReference() != null)) {
      addTypeAttributeIfNeeded(descriptor,xmlCompositeCollectionMapping,marshalRecord);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(stringValue);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(value);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(value);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(XMLField)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(stringValue);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(value);
  }
  return true;
}"
66507,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeObjectMapping.getConverter() != null) {
    Converter converter=xmlCompositeObjectMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(objectValue);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (xPathFragment.isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0; i < children.getLength(); i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!xPathFragment.isSelfFragment()) {
      getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if ((xmlCompositeObjectMapping.getReferenceDescriptor() == null) && (descriptor.getSchemaReference() != null)) {
      addTypeAttributeIfNeeded(descriptor,xmlCompositeObjectMapping,marshalRecord);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    if (!xPathFragment.isSelfFragment()) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!xPathFragment.isSelfFragment()) {
      getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    String stringValue=getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(stringValue);
    if (!xPathFragment.isSelfFragment()) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(objectValue);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeObjectMapping.getConverter() != null) {
    Converter converter=xmlCompositeObjectMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(objectValue);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (xPathFragment.isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0; i < children.getLength(); i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!xPathFragment.isSelfFragment()) {
      getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    if (!xPathFragment.isSelfFragment()) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!xPathFragment.isSelfFragment()) {
      getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    String stringValue=getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(stringValue);
    if (!xPathFragment.isSelfFragment()) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(objectValue);
  }
  return true;
}"
66508,"/** 
 * This tests verifies two things: 1 - That a metadata named query is processed correctly when it uses a  lock mode type. 2 - That a default persistence unit lock timeout value is correctly processed and utilized.
 */
public void testPessimisticLockingNamedQuery(){
  ServerSession session=JUnitTestCase.getServerSession(""String_Node_Str"");
  if (!isOnServer() && !session.getPlatform().isMySQL() && !session.getPlatform().isTimesTen()) {
    EntityManager em=createEntityManager(""String_Node_Str"");
    Employee employee;
    try {
      beginTransaction(em);
      employee=new Employee();
      employee.setFirstName(""String_Node_Str"");
      employee.setLastName(""String_Node_Str"");
      em.persist(employee);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    Exception lockTimeoutException=null;
    try {
      beginTransaction(em);
      employee=(Employee)em.createNamedQuery(""String_Node_Str"").setParameter(""String_Node_Str"",employee.getId()).getSingleResult();
      EntityManager em2=createEntityManager(""String_Node_Str"");
      try {
        beginTransaction(em2);
        HashMap properties=new HashMap();
        properties.put(QueryHints.JDBC_TIMEOUT,10);
        Employee emp2=em2.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_READ);
      }
 catch (      PersistenceException ex) {
        if (ex instanceof javax.persistence.LockTimeoutException) {
          lockTimeoutException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",lockTimeoutException == null);
  }
}","/** 
 * This tests verifies two things: 1 - That a metadata named query is processed correctly when it uses a  lock mode type. 2 - That a default persistence unit lock timeout value is correctly processed and utilized.
 */
public void testPessimisticLockingNamedQuery(){
  ServerSession session=JUnitTestCase.getServerSession(""String_Node_Str"");
  if (!isOnServer() && isSelectForUpateSupported()) {
    EntityManager em=createEntityManager(""String_Node_Str"");
    Employee employee;
    try {
      beginTransaction(em);
      employee=new Employee();
      employee.setFirstName(""String_Node_Str"");
      employee.setLastName(""String_Node_Str"");
      em.persist(employee);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    Exception lockTimeoutException=null;
    try {
      beginTransaction(em);
      employee=(Employee)em.createNamedQuery(""String_Node_Str"").setParameter(""String_Node_Str"",employee.getId()).getSingleResult();
      EntityManager em2=createEntityManager(""String_Node_Str"");
      try {
        beginTransaction(em2);
        HashMap properties=new HashMap();
        properties.put(QueryHints.JDBC_TIMEOUT,10);
        Employee emp2=em2.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_READ);
      }
 catch (      PersistenceException ex) {
        if (ex instanceof javax.persistence.LockTimeoutException) {
          lockTimeoutException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",lockTimeoutException == null);
  }
}"
66509,"/** 
 * Test for Bug 259974 - JPQL IN function doesn't work with negative literal values This test executes a JPQL statement with an IN function with a negative literal value and ensures it successfully returns the correct value.
 */
public void simpleInNegativeTest(){
  EntityManager em=createEntityManager();
  em.getTransaction().begin();
  try {
    Employee expectedResult=new Employee();
    expectedResult.setSalary(-12345);
    em.persist(expectedResult);
    em.flush();
    clearCache();
    String ejbqlString=""String_Node_Str"";
    Employee result=(Employee)em.createQuery(ejbqlString).getSingleResult();
    Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
  }
  finally {
    em.getTransaction().rollback();
  }
}","/** 
 * Test for Bug 259974 - JPQL IN function doesn't work with negative literal values This test executes a JPQL statement with an IN function with a negative literal value and ensures it successfully returns the correct value.
 */
public void simpleInNegativeTest(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  try {
    Employee expectedResult=new Employee();
    expectedResult.setSalary(-12345);
    em.persist(expectedResult);
    em.flush();
    clearCache();
    String ejbqlString=""String_Node_Str"";
    Employee result=(Employee)em.createQuery(ejbqlString).getSingleResult();
    Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
  }
  finally {
    rollbackTransaction(em);
    closeEntityManager(em);
  }
}"
66510,"/** 
 * Attempt to return the WAS application name based on a given class loader hierarchy.  The loader hierarchy will be traversed until the application  name is successfully retrieved, or the top of the hierarchy is reached.
 * @param loader
 * @return application name if successfully retrieved (i.e. loader exists inthe hierarchy with toString containing ""[app:"") or null
 */
private static String getApplicationNameForWAS(ClassLoader loader){
  String applicationName=null;
  int i=0;
  while ((applicationName == null) && (i < WAS_COUNTER_LIMIT)) {
    applicationName=getApplicationNameFromWASClassLoader(loader);
    i++;
    final ClassLoader parent=loader.getParent();
    if ((parent == null) || (parent == loader)) {
      break;
    }
 else {
      loader=parent;
    }
  }
  return applicationName;
}","/** 
 * Attempt to return the WAS application name based on a given class loader hierarchy.  The loader hierarchy will be traversed until the application  name is successfully retrieved, or the top of the hierarchy is reached.
 * @param loader
 * @return application name if successfully retrieved (i.e. loader exists inthe hierarchy with toString containing ""[app:"") or null
 */
private static String getApplicationNameForWAS(ClassLoader loader){
  String applicationName=null;
  int i=0;
  while ((applicationName == null) && (i < COUNTER_LIMIT)) {
    applicationName=getApplicationNameFromWASClassLoader(loader);
    i++;
    final ClassLoader parent=loader.getParent();
    if ((parent == null) || (parent == loader)) {
      break;
    }
 else {
      loader=parent;
    }
  }
  return applicationName;
}"
66511,"/** 
 * INTERNAL: This method will return the key to be used to store/retrieve the delegates for a given application. OC4J classLoader levels:  0 - APP.web (servlet/jsp) or APP.wrapper (ejb) 1 - APP.root (parent for helperContext) 2 - default.root 3 - system.root 4 - oc4j.10.1.3 (remote EJB) or org.eclipse.persistence:11.1.1.0.0 5 - api:1.4.0 6 - jre.extension:0.0.0 7 - jre.bootstrap:1.5.0_07 (with various J2SE versions)
 * @return Application classloader for OC4J, application name for WebLogic andWebSphere, otherwise Thread.currentThread().getContextClassLoader()
 */
private static Object getDelegateMapKey(ClassLoader classLoader){
  String classLoaderName=classLoader.getClass().getName();
  Object delegateKey=classLoader;
  if (classLoaderName.startsWith(OC4J_CLASSLOADER_NAME)) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
    delegateKey=classLoader;
  }
 else   if (classLoaderName.contains(WLS_CLASSLOADER_NAME)) {
    Object executeThread=getExecuteThread();
    if (executeThread != null) {
      try {
        Method getMethod=PrivilegedAccessHelper.getPublicMethod(executeThread.getClass(),WLS_APPLICATION_NAME_GET_METHOD_NAME,PARAMETER_TYPES,false);
        delegateKey=PrivilegedAccessHelper.invokeMethod(getMethod,executeThread);
        if (delegateKey == null) {
          delegateKey=classLoader;
        }
      }
 catch (      Exception e) {
        throw SDOException.errorInvokingWLSMethodReflectively(WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_EXECUTE_THREAD,e);
      }
    }
  }
 else   if (classLoaderName.contains(WAS_CLASSLOADER_NAME)) {
    delegateKey=getApplicationNameForWAS(classLoader);
    if (delegateKey == null) {
      delegateKey=classLoader;
    }
  }
  return delegateKey;
}","/** 
 * INTERNAL: This method will return the key to be used to store/retrieve the delegates for a given application. OC4J classLoader levels:  0 - APP.web (servlet/jsp) or APP.wrapper (ejb) 1 - APP.root (parent for helperContext) 2 - default.root 3 - system.root 4 - oc4j.10.1.3 (remote EJB) or org.eclipse.persistence:11.1.1.0.0 5 - api:1.4.0 6 - jre.extension:0.0.0 7 - jre.bootstrap:1.5.0_07 (with various J2SE versions)
 * @return Application classloader for OC4J, application name for WebLogic and WebSphere, archivefile name for JBoss, otherwise Thread.currentThread().getContextClassLoader()
 */
private static Object getDelegateMapKey(ClassLoader classLoader){
  String classLoaderName=classLoader.getClass().getName();
  Object delegateKey=classLoader;
  if (classLoaderName.startsWith(OC4J_CLASSLOADER_NAME)) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
    delegateKey=classLoader;
  }
 else   if (classLoaderName.contains(WLS_CLASSLOADER_NAME)) {
    Object executeThread=getExecuteThread();
    if (executeThread != null) {
      try {
        Method getMethod=PrivilegedAccessHelper.getPublicMethod(executeThread.getClass(),WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_PARAMETER_TYPES,false);
        delegateKey=PrivilegedAccessHelper.invokeMethod(getMethod,executeThread);
        if (delegateKey == null) {
          delegateKey=classLoader;
        }
      }
 catch (      Exception e) {
        throw SDOException.errorInvokingWLSMethodReflectively(WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_EXECUTE_THREAD,e);
      }
    }
  }
 else   if (classLoaderName.contains(WAS_CLASSLOADER_NAME)) {
    delegateKey=getApplicationNameForWAS(classLoader);
    if (delegateKey == null) {
      delegateKey=classLoader;
    }
  }
 else   if (classLoaderName.contains(JBOSS_CLASSLOADER_NAME)) {
    delegateKey=getApplicationNameForJBoss(classLoader);
    if (delegateKey == null) {
      delegateKey=classLoader;
    }
  }
  return delegateKey;
}"
66512,"/** 
 * INTERNAL: Converts a String which is in Base64 format to a Byte[]
 */
public byte[] convertSchemaBase64ToByteArray(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    try {
      byte[] bytes=Base64.base64Decode(((String)sourceObject).getBytes());
      return bytes;
    }
 catch (    ArrayIndexOutOfBoundsException ex) {
      StringTokenizer tokenizer=new StringTokenizer((String)sourceObject);
      StringBuilder builder=new StringBuilder();
      while (tokenizer.hasMoreTokens()) {
        builder.append(tokenizer.nextToken());
      }
      byte[] bytes=Base64.base64Decode(builder.toString().getBytes());
      return bytes;
    }
  }
  return convertObjectToByteArray(sourceObject);
}","/** 
 * INTERNAL: Converts a String which is in Base64 format to a Byte[]
 */
public byte[] convertSchemaBase64ToByteArray(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    StringTokenizer tokenizer=new StringTokenizer((String)sourceObject);
    StringBuilder builder=new StringBuilder();
    while (tokenizer.hasMoreTokens()) {
      builder.append(tokenizer.nextToken());
    }
    byte[] bytes=Base64.base64Decode(builder.toString().getBytes());
    return bytes;
  }
  return convertObjectToByteArray(sourceObject);
}"
66513,"/** 
 * INTERNAL: Converts a String which is in Base64 format to a Byte[]
 */
public byte[] convertSchemaBase64ToByteArray(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    byte[] bytes=Base64.base64Decode(((String)sourceObject).getBytes());
    return bytes;
  }
  return convertObjectToByteArray(sourceObject);
}","/** 
 * INTERNAL: Converts a String which is in Base64 format to a Byte[]
 */
public byte[] convertSchemaBase64ToByteArray(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    try {
      byte[] bytes=Base64.base64Decode(((String)sourceObject).getBytes());
      return bytes;
    }
 catch (    ArrayIndexOutOfBoundsException ex) {
      StringTokenizer tokenizer=new StringTokenizer((String)sourceObject);
      StringBuilder builder=new StringBuilder();
      while (tokenizer.hasMoreTokens()) {
        builder.append(tokenizer.nextToken());
      }
      byte[] bytes=Base64.base64Decode(builder.toString().getBytes());
      return bytes;
    }
  }
  return convertObjectToByteArray(sourceObject);
}"
66514,"public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,Attributes atts){
}","public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,UnmarshalRecord selfRecord,Attributes atts){
}"
66515,"public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,Attributes attributes){
  unmarshalRecord.getStringBuffer().reset();
}","public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,UnmarshalRecord selfRecord,Attributes attributes){
  unmarshalRecord.getStringBuffer().reset();
}"
66516,"public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        xsiType=element.getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
 else {
    Object valueToSet=unmarshalRecord.getChildRecord().getCurrentObject();
    if (xmlCompositeObjectMapping.getConverter() != null) {
      Converter converter=xmlCompositeObjectMapping.getConverter();
      if (converter instanceof XMLConverter) {
        valueToSet=((XMLConverter)converter).convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        valueToSet=converter.convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession());
      }
    }
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    if (xmlCompositeObjectMapping.getInverseReferenceMapping() != null) {
      xmlCompositeObjectMapping.getInverseReferenceMapping().getAttributeAccessor().setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    }
  }
}","public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,UnmarshalRecord selfRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        xsiType=element.getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
 else {
    Object valueToSet=selfRecord.getCurrentObject();
    if (xmlCompositeObjectMapping.getConverter() != null) {
      Converter converter=xmlCompositeObjectMapping.getConverter();
      if (converter instanceof XMLConverter) {
        valueToSet=((XMLConverter)converter).convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        valueToSet=converter.convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession());
      }
    }
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    if (xmlCompositeObjectMapping.getInverseReferenceMapping() != null) {
      xmlCompositeObjectMapping.getInverseReferenceMapping().getAttributeAccessor().setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    }
  }
}"
66517,"public void endDocument() throws SAXException {
  if (null != selfRecords) {
    for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
      UnmarshalRecord selfRecord=selfRecords.get(x);
      if (selfRecord != null) {
        selfRecord.endDocument();
      }
    }
  }
  if (null != xPathNode.getSelfChildren()) {
    int selfChildrenSize=xPathNode.getSelfChildren().size();
    for (int x=0; x < selfChildrenSize; x++) {
      XPathNode selfNode=xPathNode.getSelfChildren().get(x);
      if (null != selfNode.getNodeValue()) {
        selfNode.getNodeValue().endSelfNodeValue(this,attributes);
      }
    }
  }
  try {
    if (null != containersMap) {
      for (      Entry<ContainerValue,Object> entry : containersMap.entrySet()) {
        entry.getKey().setContainerInstance(currentObject,entry.getValue());
      }
    }
    if (null != nullCapableValues) {
      for (int x=0, nullValuesSize=nullCapableValues.size(); x < nullValuesSize; x++) {
        nullCapableValues.get(x).setNullValue(currentObject,session);
      }
    }
    List transformationMappings=treeObjectBuilder.getTransformationMappings();
    if (null != transformationMappings) {
      ReadObjectQuery query=new ReadObjectQuery();
      query.setSession(session);
      for (int x=0, transformationMappingsSize=transformationMappings.size(); x < transformationMappingsSize; x++) {
        AbstractTransformationMapping transformationMapping=(AbstractTransformationMapping)transformationMappings.get(x);
        transformationMapping.readFromRowIntoObject(transformationRecord,null,currentObject,query,session);
      }
    }
    if (getUnmarshaller().getUnmarshalListener() != null) {
      if (this.parentRecord != null) {
        getUnmarshaller().getUnmarshalListener().afterUnmarshal(currentObject,parentRecord.getCurrentObject());
      }
 else {
        getUnmarshaller().getUnmarshalListener().afterUnmarshal(currentObject,null);
      }
    }
    ClassDescriptor xmlDescriptor=treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.getEventManager().hasAnyEventListeners()) {
      DescriptorEvent event=new DescriptorEvent(currentObject);
      event.setSession(session);
      event.setRecord(this);
      event.setEventCode(DescriptorEventManager.PostBuildEvent);
      xmlDescriptor.getEventManager().executeEvent(event);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
  if (session.isUnitOfWork()) {
    ClassDescriptor xmlDescriptor=treeObjectBuilder.getDescriptor();
    if (null != xmlDescriptor) {
      List primaryKeyFields=xmlDescriptor.getPrimaryKeyFields();
      int primaryKeyFieldsSize=primaryKeyFields.size();
      if (primaryKeyFieldsSize > 0) {
        Object pk=treeObjectBuilder.extractPrimaryKeyFromObject(currentObject,session);
        for (int x=0; x < primaryKeyFieldsSize; x++) {
          Object value=((CacheId)pk).getPrimaryKey()[x];
          if (null == value) {
            XMLField pkField=(XMLField)xmlDescriptor.getPrimaryKeyFields().get(x);
            ((CacheId)pk).set(x,getUnmarshaller().getXMLContext().getValueByXPath(currentObject,pkField.getXPath(),pkField.getNamespaceResolver(),Object.class));
          }
        }
        CacheKey key=session.getIdentityMapAccessorInstance().acquireDeferredLock(pk,xmlDescriptor.getJavaClass(),xmlDescriptor);
        key.setRecord(this);
        key.setObject(currentObject);
        key.releaseDeferredLock();
      }
    }
  }
  if (null != parentRecord) {
    reset();
  }
}","public void endDocument() throws SAXException {
  if (null != selfRecords) {
    for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
      UnmarshalRecord selfRecord=selfRecords.get(x);
      if (selfRecord != null) {
        selfRecord.endDocument();
      }
    }
  }
  if (null != xPathNode.getSelfChildren()) {
    int selfChildrenSize=xPathNode.getSelfChildren().size();
    for (int x=0; x < selfChildrenSize; x++) {
      XPathNode selfNode=xPathNode.getSelfChildren().get(x);
      if (null != selfNode.getNodeValue()) {
        selfNode.getNodeValue().endSelfNodeValue(this,selfRecords.get(x),attributes);
      }
    }
  }
  try {
    if (null != containersMap) {
      for (      Entry<ContainerValue,Object> entry : containersMap.entrySet()) {
        entry.getKey().setContainerInstance(currentObject,entry.getValue());
      }
    }
    if (null != nullCapableValues) {
      for (int x=0, nullValuesSize=nullCapableValues.size(); x < nullValuesSize; x++) {
        nullCapableValues.get(x).setNullValue(currentObject,session);
      }
    }
    List transformationMappings=treeObjectBuilder.getTransformationMappings();
    if (null != transformationMappings) {
      ReadObjectQuery query=new ReadObjectQuery();
      query.setSession(session);
      for (int x=0, transformationMappingsSize=transformationMappings.size(); x < transformationMappingsSize; x++) {
        AbstractTransformationMapping transformationMapping=(AbstractTransformationMapping)transformationMappings.get(x);
        transformationMapping.readFromRowIntoObject(transformationRecord,null,currentObject,query,session);
      }
    }
    if (getUnmarshaller().getUnmarshalListener() != null) {
      if (this.parentRecord != null) {
        getUnmarshaller().getUnmarshalListener().afterUnmarshal(currentObject,parentRecord.getCurrentObject());
      }
 else {
        getUnmarshaller().getUnmarshalListener().afterUnmarshal(currentObject,null);
      }
    }
    ClassDescriptor xmlDescriptor=treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.getEventManager().hasAnyEventListeners()) {
      DescriptorEvent event=new DescriptorEvent(currentObject);
      event.setSession(session);
      event.setRecord(this);
      event.setEventCode(DescriptorEventManager.PostBuildEvent);
      xmlDescriptor.getEventManager().executeEvent(event);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
  if (session.isUnitOfWork()) {
    ClassDescriptor xmlDescriptor=treeObjectBuilder.getDescriptor();
    if (null != xmlDescriptor) {
      List primaryKeyFields=xmlDescriptor.getPrimaryKeyFields();
      int primaryKeyFieldsSize=primaryKeyFields.size();
      if (primaryKeyFieldsSize > 0) {
        Object pk=treeObjectBuilder.extractPrimaryKeyFromObject(currentObject,session);
        for (int x=0; x < primaryKeyFieldsSize; x++) {
          Object value=((CacheId)pk).getPrimaryKey()[x];
          if (null == value) {
            XMLField pkField=(XMLField)xmlDescriptor.getPrimaryKeyFields().get(x);
            ((CacheId)pk).set(x,getUnmarshaller().getXMLContext().getValueByXPath(currentObject,pkField.getXPath(),pkField.getNamespaceResolver(),Object.class));
          }
        }
        CacheKey key=session.getIdentityMapAccessorInstance().acquireDeferredLock(pk,xmlDescriptor.getJavaClass(),xmlDescriptor);
        key.setRecord(this);
        key.setObject(currentObject);
        key.releaseDeferredLock();
      }
    }
  }
  if (null != parentRecord) {
    reset();
  }
}"
66518,"protected void internalTestSequenceObjectDefinition(int preallocationSize,int startValue,String seqName,EntityManager em,ServerSession ss){
  NativeSequence sequence=new NativeSequence(seqName,preallocationSize,startValue,false);
  sequence.onConnect(ss.getPlatform());
  SequenceObjectDefinition def=new SequenceObjectDefinition(sequence);
  try {
    String createStr=def.buildCreationWriter(ss,new StringWriter()).toString();
    beginTransaction(em);
    em.createNativeQuery(createStr).executeUpdate();
    commitTransaction(em);
    Vector seqValues=sequence.getGeneratedVector(null,ss);
    int firstSequenceValue=((Number)seqValues.elementAt(0)).intValue();
    if (firstSequenceValue != startValue) {
      fail(seqName + ""String_Node_Str"" + preallocationSize+ ""String_Node_Str""+ startValue+ ""String_Node_Str""+ firstSequenceValue);
    }
  }
  finally {
    sequence.onDisconnect(ss.getPlatform());
    if (JUnitTestCase.getServerSession().getPlatform().isSymfoware())     return;
    String dropStr=def.buildDeletionWriter(ss,new StringWriter()).toString();
    beginTransaction(em);
    em.createNativeQuery(dropStr).executeUpdate();
    commitTransaction(em);
  }
}","protected void internalTestSequenceObjectDefinition(int preallocationSize,int startValue,String seqName,EntityManager em,ServerSession ss){
  NativeSequence sequence=new NativeSequence(seqName,preallocationSize,startValue,false);
  sequence.onConnect(ss.getPlatform());
  SequenceObjectDefinition def=new SequenceObjectDefinition(sequence);
  try {
    String createStr=def.buildCreationWriter(ss,new StringWriter()).toString();
    beginTransaction(em);
    em.createNativeQuery(createStr).executeUpdate();
    commitTransaction(em);
    Vector seqValues=sequence.getGeneratedVector(null,ss);
    int firstSequenceValue=((Number)seqValues.elementAt(0)).intValue();
    if (firstSequenceValue != startValue) {
      fail(seqName + ""String_Node_Str"" + preallocationSize+ ""String_Node_Str""+ startValue+ ""String_Node_Str""+ firstSequenceValue);
    }
  }
  finally {
    sequence.onDisconnect(ss.getPlatform());
    if (JUnitTestCase.getServerSession(""String_Node_Str"").getPlatform().isSymfoware())     return;
    String dropStr=def.buildDeletionWriter(ss,new StringWriter()).toString();
    beginTransaction(em);
    em.createNativeQuery(dropStr).executeUpdate();
    commitTransaction(em);
  }
}"
66519,"private void parseEvent(XMLStreamReader xmlStreamReader) throws SAXException {
switch (xmlStreamReader.getEventType()) {
case XMLStreamReader.START_ELEMENT:
{
      depth++;
      String localName=xmlStreamReader.getLocalName();
      if (qNameAware) {
        String prefix=xmlStreamReader.getPrefix();
        if (null == prefix || prefix.length() == 0) {
          contentHandler.startElement(xmlStreamReader.getNamespaceURI(),localName,localName,indexedAttributeList.reset());
        }
 else {
          contentHandler.startElement(xmlStreamReader.getNamespaceURI(),localName,prefix + XMLConstants.COLON + localName,indexedAttributeList.reset());
        }
      }
 else {
        contentHandler.startElement(xmlStreamReader.getNamespaceURI(),localName,null,indexedAttributeList.reset());
      }
      break;
    }
case XMLStreamReader.END_ELEMENT:
{
    depth--;
    String localName=xmlStreamReader.getLocalName();
    if (qNameAware) {
      String prefix=xmlStreamReader.getPrefix();
      if (null == prefix || prefix.length() == 0) {
        contentHandler.endElement(xmlStreamReader.getNamespaceURI(),localName,localName);
      }
 else {
        contentHandler.endElement(xmlStreamReader.getNamespaceURI(),localName,prefix + XMLConstants.COLON + localName);
      }
    }
 else {
      contentHandler.endElement(xmlStreamReader.getNamespaceURI(),localName,null);
    }
    break;
  }
case XMLStreamReader.PROCESSING_INSTRUCTION:
{
  contentHandler.processingInstruction(xmlStreamReader.getPITarget(),xmlStreamReader.getPIData());
  break;
}
case XMLStreamReader.CHARACTERS:
{
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
break;
}
case XMLStreamReader.COMMENT:
{
if (null != lexicalHandler) {
lexicalHandler.comment(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
}
break;
}
case XMLStreamReader.SPACE:
{
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
break;
}
case XMLStreamReader.START_DOCUMENT:
{
depth++;
break;
}
case XMLStreamReader.END_DOCUMENT:
{
depth--;
return;
}
case XMLStreamReader.ENTITY_REFERENCE:
{
break;
}
case XMLStreamReader.ATTRIBUTE:
{
break;
}
case XMLStreamReader.DTD:
{
break;
}
case XMLStreamReader.CDATA:
{
char[] characters=xmlStreamReader.getText().toCharArray();
if (null == lexicalHandler) {
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
}
 else {
lexicalHandler.startCDATA();
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
lexicalHandler.endCDATA();
}
break;
}
}
}","private void parseEvent(XMLStreamReader xmlStreamReader) throws SAXException {
switch (xmlStreamReader.getEventType()) {
case XMLStreamReader.START_ELEMENT:
{
      depth++;
      String localName=xmlStreamReader.getLocalName();
      String namespaceURI=xmlStreamReader.getNamespaceURI();
      if (XMLConstants.EMPTY_STRING.equals(namespaceURI)) {
        namespaceURI=null;
      }
      if (qNameAware) {
        String prefix=xmlStreamReader.getPrefix();
        if (null == prefix || prefix.length() == 0) {
          contentHandler.startElement(namespaceURI,localName,localName,indexedAttributeList.reset());
        }
 else {
          contentHandler.startElement(namespaceURI,localName,prefix + XMLConstants.COLON + localName,indexedAttributeList.reset());
        }
      }
 else {
        contentHandler.startElement(namespaceURI,localName,null,indexedAttributeList.reset());
      }
      break;
    }
case XMLStreamReader.END_ELEMENT:
{
    depth--;
    String localName=xmlStreamReader.getLocalName();
    String namespaceURI=xmlStreamReader.getNamespaceURI();
    if (XMLConstants.EMPTY_STRING.equals(namespaceURI)) {
      namespaceURI=null;
    }
    if (qNameAware) {
      String prefix=xmlStreamReader.getPrefix();
      if (null == prefix || prefix.length() == 0) {
        contentHandler.endElement(namespaceURI,localName,localName);
      }
 else {
        contentHandler.endElement(namespaceURI,localName,prefix + XMLConstants.COLON + localName);
      }
    }
 else {
      contentHandler.endElement(namespaceURI,localName,null);
    }
    break;
  }
case XMLStreamReader.PROCESSING_INSTRUCTION:
{
  contentHandler.processingInstruction(xmlStreamReader.getPITarget(),xmlStreamReader.getPIData());
  break;
}
case XMLStreamReader.CHARACTERS:
{
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
break;
}
case XMLStreamReader.COMMENT:
{
if (null != lexicalHandler) {
lexicalHandler.comment(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
}
break;
}
case XMLStreamReader.SPACE:
{
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
break;
}
case XMLStreamReader.START_DOCUMENT:
{
depth++;
break;
}
case XMLStreamReader.END_DOCUMENT:
{
depth--;
return;
}
case XMLStreamReader.ENTITY_REFERENCE:
{
break;
}
case XMLStreamReader.ATTRIBUTE:
{
break;
}
case XMLStreamReader.DTD:
{
break;
}
case XMLStreamReader.CDATA:
{
char[] characters=xmlStreamReader.getText().toCharArray();
if (null == lexicalHandler) {
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
}
 else {
lexicalHandler.startCDATA();
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
lexicalHandler.endCDATA();
}
break;
}
}
}"
66520,"public void test(){
  try {
    mapping.writeFromObjectIntoRowWithChangeRecord(changeRecord,new org.eclipse.persistence.sessions.DatabaseRecord(),(AbstractSession)getSession());
  }
 catch (  EclipseLinkException exception) {
    caughtException=exception;
  }
}","public void test(){
  try {
    mapping.writeFromObjectIntoRowWithChangeRecord(changeRecord,new org.eclipse.persistence.sessions.DatabaseRecord(),(AbstractSession)getSession(),WriteType.UNDEFINED);
  }
 catch (  EclipseLinkException exception) {
    caughtException=exception;
  }
}"
66521,"public void test(){
  try {
    if (testMode == 0) {
      mapping.writeFromObjectIntoRow(actor,databaseRow,(AbstractSession)getSession());
    }
 else     if (testMode == 1) {
      mapping.writeFromObjectIntoRowWithChangeRecord((org.eclipse.persistence.internal.sessions.ChangeRecord)changeRecord,databaseRow,(AbstractSession)getSession());
    }
 else     if (testMode == 2) {
      mapping.writeFromObjectIntoRowForWhereClause(deleteObjectQuery,databaseRow);
    }
 else {
      throw new org.eclipse.persistence.testing.framework.TestProblemException(""String_Node_Str"");
    }
  }
 catch (  EclipseLinkException exception) {
    caughtException=exception;
  }
}","public void test(){
  try {
    if (testMode == 0) {
      mapping.writeFromObjectIntoRow(actor,databaseRow,(AbstractSession)getSession(),WriteType.UNDEFINED);
    }
 else     if (testMode == 1) {
      mapping.writeFromObjectIntoRowWithChangeRecord((org.eclipse.persistence.internal.sessions.ChangeRecord)changeRecord,databaseRow,(AbstractSession)getSession(),WriteType.UNDEFINED);
    }
 else     if (testMode == 2) {
      mapping.writeFromObjectIntoRowForWhereClause(deleteObjectQuery,databaseRow);
    }
 else {
      throw new org.eclipse.persistence.testing.framework.TestProblemException(""String_Node_Str"");
    }
  }
 catch (  EclipseLinkException exception) {
    caughtException=exception;
  }
}"
66522,"/** 
 * INTERNAL: Values to be included in the locking mechanism are added to the translation row. For changed fields the normal build row is ok as only changed fields matter.
 */
public void addLockValuesToTranslationRow(ObjectLevelModifyQuery query) throws DatabaseException {
  Object object;
  verifyUsage(query.getSession());
  if (query.isDeleteObjectQuery()) {
    object=query.getObject();
  }
 else {
    object=query.getBackupClone();
  }
  for (Iterator vectors=getLockFieldsByTable().values().iterator(); vectors.hasNext(); ) {
    for (Enumeration fields=((Vector)vectors.next()).elements(); fields.hasMoreElements(); ) {
      DatabaseField field=(DatabaseField)fields.nextElement();
      DatabaseMapping mapping=descriptor.getObjectBuilder().getMappingForField(field);
      if (mapping == null) {
        throw DatabaseException.specifiedLockingFieldsNotFoundInDatabase(field.getQualifiedName());
      }
 else {
        mapping.writeFromObjectIntoRow(object,query.getTranslationRow(),query.getSession());
      }
    }
  }
}","/** 
 * INTERNAL: Values to be included in the locking mechanism are added to the translation row. For changed fields the normal build row is ok as only changed fields matter.
 */
public void addLockValuesToTranslationRow(ObjectLevelModifyQuery query) throws DatabaseException {
  Object object;
  verifyUsage(query.getSession());
  if (query.isDeleteObjectQuery()) {
    object=query.getObject();
  }
 else {
    object=query.getBackupClone();
  }
  for (Iterator vectors=getLockFieldsByTable().values().iterator(); vectors.hasNext(); ) {
    for (Enumeration fields=((Vector)vectors.next()).elements(); fields.hasMoreElements(); ) {
      DatabaseField field=(DatabaseField)fields.nextElement();
      DatabaseMapping mapping=descriptor.getObjectBuilder().getMappingForField(field);
      if (mapping == null) {
        throw DatabaseException.specifiedLockingFieldsNotFoundInDatabase(field.getQualifiedName());
      }
 else {
        mapping.writeFromObjectIntoRow(object,query.getTranslationRow(),query.getSession(),WriteType.UNDEFINED);
      }
    }
  }
}"
66523,"protected AbstractRecord buildCompositeRow(Object attributeValue,AbstractSession session,AbstractRecord parentRow){
  if (((EISDescriptor)getDescriptor()).getDataFormat() == EISDescriptor.XML) {
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)getReferenceDescriptor(attributeValue,session).getObjectBuilder();
    return objectBuilder.buildRow(attributeValue,session,getField(),(XMLRecord)parentRow);
  }
 else {
    return this.getObjectBuilder(attributeValue,session).buildRow(attributeValue,session);
  }
}","@Override protected AbstractRecord buildCompositeRow(Object attributeValue,AbstractSession session,AbstractRecord parentRow,WriteType writeType){
  if (((EISDescriptor)getDescriptor()).getDataFormat() == EISDescriptor.XML) {
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)getReferenceDescriptor(attributeValue,session).getObjectBuilder();
    return objectBuilder.buildRow(attributeValue,session,getField(),(XMLRecord)parentRow);
  }
 else {
    return this.getObjectBuilder(attributeValue,session).buildRow(attributeValue,session,writeType);
  }
}"
66524,"/** 
 * INTERNAL: Build the value for the database field and put it in the specified database row.
 */
public void writeFromObjectIntoRow(Object object,AbstractRecord record,AbstractSession session) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  Object attributeValue=this.getAttributeValueFromObject(object);
  if ((((EISDescriptor)getDescriptor()).getDataFormat() == EISDescriptor.XML) && ((XMLField)getField()).isSelfField()) {
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)getReferenceDescriptor(attributeValue,session).getObjectBuilder();
    objectBuilder.buildIntoNestedRow(record,attributeValue,session);
  }
 else {
    Object fieldValue=null;
    if (attributeValue != null) {
      fieldValue=buildCompositeRow(attributeValue,session,record);
    }
    record.put(this.getField(),fieldValue);
  }
}","/** 
 * INTERNAL: Build the value for the database field and put it in the specified database row.
 */
@Override public void writeFromObjectIntoRow(Object object,AbstractRecord record,AbstractSession session,WriteType writeType) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  Object attributeValue=this.getAttributeValueFromObject(object);
  if ((((EISDescriptor)getDescriptor()).getDataFormat() == EISDescriptor.XML) && ((XMLField)getField()).isSelfField()) {
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)getReferenceDescriptor(attributeValue,session).getObjectBuilder();
    objectBuilder.buildIntoNestedRow(record,attributeValue,session);
  }
 else {
    Object fieldValue=null;
    if (attributeValue != null) {
      fieldValue=buildCompositeRow(attributeValue,session,record,writeType);
    }
    record.put(this.getField(),fieldValue);
  }
}"
66525,"protected Object buildCompositeRow(Object attributeValue,AbstractSession session,AbstractRecord record){
  if (((EISDescriptor)getDescriptor()).getDataFormat() == EISDescriptor.XML) {
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)getReferenceDescriptor(attributeValue,session).getObjectBuilder();
    return objectBuilder.buildRow(attributeValue,session,getField(),(XMLRecord)record);
  }
 else {
    AbstractRecord nestedRow=this.getObjectBuilder(attributeValue,session).buildRow(attributeValue,session);
    return this.getReferenceDescriptor(attributeValue,session).buildFieldValueFromNestedRow(nestedRow,session);
  }
}","@Override protected Object buildCompositeRow(Object attributeValue,AbstractSession session,AbstractRecord record,WriteType writeType){
  if (((EISDescriptor)getDescriptor()).getDataFormat() == EISDescriptor.XML) {
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)getReferenceDescriptor(attributeValue,session).getObjectBuilder();
    return objectBuilder.buildRow(attributeValue,session,getField(),(XMLRecord)record);
  }
 else {
    AbstractRecord nestedRow=this.getObjectBuilder(attributeValue,session).buildRow(attributeValue,session,writeType);
    return this.getReferenceDescriptor(attributeValue,session).buildFieldValueFromNestedRow(nestedRow,session);
  }
}"
66526,"/** 
 * INTERNAL: We override this method in order to set the session on the record if the data format is XML. Get a value from the object and set that in the respective field of the row.
 */
public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session){
  if (((EISDescriptor)this.getDescriptor()).getDataFormat() == EISDescriptor.XML) {
    ((XMLRecord)row).setSession(session);
  }
  super.writeFromObjectIntoRow(object,row,session);
}","/** 
 * INTERNAL: We override this method in order to set the session on the record if the data format is XML. Get a value from the object and set that in the respective field of the row.
 */
@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType){
  if (((EISDescriptor)this.getDescriptor()).getDataFormat() == EISDescriptor.XML) {
    ((XMLRecord)row).setSession(session);
  }
  super.writeFromObjectIntoRow(object,row,session,writeType);
}"
66527,"/** 
 * INTERNAL: Get a value from the object and set that in the respective field of the row.
 */
@Override public void writeFromObjectIntoRow(Object object,AbstractRecord Record,AbstractSession session){
  if (isReadOnly() || (!isForeignKeyRelationship())) {
    return;
  }
  AbstractRecord referenceRow=getIndirectionPolicy().extractReferenceRow(getAttributeValueFromObject(object));
  if (referenceRow == null) {
    Object referenceObject=getRealAttributeValueFromObject(object,session);
    for (int i=0; i < getForeignKeyFields().size(); i++) {
      DatabaseField sourceKey=getForeignKeyFields().get(i);
      DatabaseField targetKey=getSourceToTargetKeyFields().get(sourceKey);
      Object referenceValue=null;
      if (referenceObject != null) {
        referenceValue=getReferenceDescriptor().getObjectBuilder().extractValueFromObjectForField(referenceObject,targetKey,session);
      }
      Record.add(sourceKey,referenceValue);
    }
  }
 else {
    for (int i=0; i < getForeignKeyFields().size(); i++) {
      DatabaseField sourceKey=getForeignKeyFields().get(i);
      Record.add(sourceKey,referenceRow.get(sourceKey));
    }
  }
}","/** 
 * INTERNAL: Get a value from the object and set that in the respective field of the row.
 */
@Override public void writeFromObjectIntoRow(Object object,AbstractRecord Record,AbstractSession session,WriteType writeType){
  if (isReadOnly() || (!isForeignKeyRelationship())) {
    return;
  }
  AbstractRecord referenceRow=getIndirectionPolicy().extractReferenceRow(getAttributeValueFromObject(object));
  if (referenceRow == null) {
    Object referenceObject=getRealAttributeValueFromObject(object,session);
    for (int i=0; i < getForeignKeyFields().size(); i++) {
      DatabaseField sourceKey=getForeignKeyFields().get(i);
      DatabaseField targetKey=getSourceToTargetKeyFields().get(sourceKey);
      Object referenceValue=null;
      if (referenceObject != null) {
        referenceValue=getReferenceDescriptor().getObjectBuilder().extractValueFromObjectForField(referenceObject,targetKey,session);
      }
      Record.add(sourceKey,referenceValue);
    }
  }
 else {
    for (int i=0; i < getForeignKeyFields().size(); i++) {
      DatabaseField sourceKey=getForeignKeyFields().get(i);
      Record.add(sourceKey,referenceRow.get(sourceKey));
    }
  }
}"
66528,"/** 
 * INTERNAL: Perform a logical insert into the historical schema, creating a new version of an object. <p>Called by postInsert() and also postUpdate() (which first does a logicalDelete of the previous version).
 */
public void logicalInsert(ObjectLevelModifyQuery writeQuery,boolean isUpdate){
  ClassDescriptor descriptor=getDescriptor();
  AbstractRecord modifyRow=null;
  AbstractRecord originalModifyRow=writeQuery.getModifyRow();
  Object currentTime=null;
  if (isUpdate) {
    modifyRow=descriptor.getObjectBuilder().buildRow(writeQuery.getObject(),writeQuery.getSession());
    modifyRow.putAll(originalModifyRow);
  }
 else {
    modifyRow=originalModifyRow;
    currentTime=getCurrentTime(writeQuery.getSession());
  }
  StatementQueryMechanism insertMechanism=new StatementQueryMechanism(writeQuery);
  for (int i=0; i < getHistoricalTables().size(); i++) {
    DatabaseTable table=(DatabaseTable)getHistoricalTables().elementAt(i);
    if (isUpdate && !checkWastedVersioning(originalModifyRow,table)) {
      continue;
    }
    if (!isUpdate) {
      modifyRow.add(getStart(i),currentTime);
    }
    SQLInsertStatement insertStatement=new SQLInsertStatement();
    insertStatement.setTable(table);
    insertMechanism.getSQLStatements().add(insertStatement);
  }
  if (insertMechanism.hasMultipleStatements()) {
    writeQuery.setTranslationRow(modifyRow);
    writeQuery.setModifyRow(modifyRow);
    insertMechanism.insertObject();
  }
}","/** 
 * INTERNAL: Perform a logical insert into the historical schema, creating a new version of an object. <p>Called by postInsert() and also postUpdate() (which first does a logicalDelete of the previous version).
 */
public void logicalInsert(ObjectLevelModifyQuery writeQuery,boolean isUpdate){
  ClassDescriptor descriptor=getDescriptor();
  AbstractRecord modifyRow=null;
  AbstractRecord originalModifyRow=writeQuery.getModifyRow();
  Object currentTime=null;
  if (isUpdate) {
    modifyRow=descriptor.getObjectBuilder().buildRow(writeQuery.getObject(),writeQuery.getSession(),WriteType.INSERT);
    modifyRow.putAll(originalModifyRow);
  }
 else {
    modifyRow=originalModifyRow;
    currentTime=getCurrentTime(writeQuery.getSession());
  }
  StatementQueryMechanism insertMechanism=new StatementQueryMechanism(writeQuery);
  for (int i=0; i < getHistoricalTables().size(); i++) {
    DatabaseTable table=(DatabaseTable)getHistoricalTables().elementAt(i);
    if (isUpdate && !checkWastedVersioning(originalModifyRow,table)) {
      continue;
    }
    if (!isUpdate) {
      modifyRow.add(getStart(i),currentTime);
    }
    SQLInsertStatement insertStatement=new SQLInsertStatement();
    insertStatement.setTable(table);
    insertMechanism.getSQLStatements().add(insertStatement);
  }
  if (insertMechanism.hasMultipleStatements()) {
    writeQuery.setTranslationRow(modifyRow);
    writeQuery.setModifyRow(modifyRow);
    insertMechanism.insertObject();
  }
}"
66529,"/** 
 * Process XmlBindings on a per package basis for a given AnnotationsPorcessor instance.
 * @param annotationsProcessor
 */
public void processXML(AnnotationsProcessor annotationsProcessor,JavaModelInput jModelInput,TypeMappingInfo[] typeMappingInfos,JavaClass[] originalJavaClasses){
  this.jModelInput=jModelInput;
  this.aProcessor=annotationsProcessor;
  Map<String,XmlEnum> xmlEnumMap=new HashMap<String,XmlEnum>();
  annotationsProcessor.init(originalJavaClasses,typeMappingInfos);
  Map<String,ArrayList<JavaClass>> pkgToClassMap=buildPackageToJavaClassMap();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    NamespaceInfo nsInfo=processXmlSchema(xmlBindings,packageName);
    if (nsInfo != null) {
      annotationsProcessor.addPackageToNamespaceMapping(packageName,nsInfo);
    }
    XmlRegistries xmlRegs=xmlBindings.getXmlRegistries();
    if (xmlRegs != null) {
      for (      XmlRegistry xmlReg : xmlRegs.getXmlRegistry()) {
        aProcessor.addXmlRegistry(xmlReg.getName(),xmlReg);
      }
    }
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    XmlEnums xmlEnums=xmlBindings.getXmlEnums();
    if (xmlEnums != null) {
      for (      XmlEnum xmlEnum : xmlEnums.getXmlEnum()) {
        xmlEnumMap.put(xmlEnum.getJavaEnum(),xmlEnum);
      }
    }
    Map<String,TypeInfo> typeInfoMap=annotationsProcessor.preBuildTypeInfo(javaClasses);
    List<XmlSchemaType> xmlSchemaTypes=null;
    XmlSchemaTypes sTypes=xmlBindings.getXmlSchemaTypes();
    if (sTypes != null) {
      xmlSchemaTypes=sTypes.getXmlSchemaType();
    }
 else {
      xmlSchemaTypes=new ArrayList<XmlSchemaType>();
    }
    if (xmlBindings.getXmlSchemaType() != null) {
      xmlSchemaTypes.add(xmlBindings.getXmlSchemaType());
    }
    for (    XmlSchemaType sType : xmlSchemaTypes) {
      JavaClass jClass=aProcessor.getHelper().getJavaClass(sType.getType());
      if (jClass != null) {
        aProcessor.processSchemaType(sType.getName(),sType.getNamespace(),jClass.getQualifiedName());
      }
    }
    nsInfo=annotationsProcessor.getPackageToNamespaceMappings().get(packageName);
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo info=typeInfoMap.get(javaType.getName());
        if (javaType.getXmlJavaTypeAdapter() != null) {
          info.setXmlJavaTypeAdapter(javaType.getXmlJavaTypeAdapter());
        }
        if (javaType.isSetXmlAccessorOrder()) {
          info.setXmlAccessOrder(javaType.getXmlAccessorOrder());
        }
 else         if (!info.isSetXmlAccessOrder()) {
          if (xmlBindings.isSetXmlAccessorOrder()) {
            info.setXmlAccessOrder(xmlBindings.getXmlAccessorOrder());
          }
 else {
            info.setXmlAccessOrder(nsInfo.getAccessOrder());
          }
        }
        if (javaType.isSetXmlAccessorType()) {
          info.setXmlAccessType(javaType.getXmlAccessorType());
        }
 else         if (!info.isSetXmlAccessType()) {
          if (xmlBindings.isSetXmlAccessorType()) {
            info.setXmlAccessType(xmlBindings.getXmlAccessorType());
          }
 else {
            info.setXmlAccessType(nsInfo.getAccessType());
          }
        }
        if (javaType.isSetXmlInlineBinaryData()) {
          info.setInlineBinaryData(javaType.isXmlInlineBinaryData());
        }
        if (javaType.isSetXmlTransient()) {
          info.setXmlTransient(javaType.isXmlTransient());
        }
        if (javaType.getXmlRootElement() != null) {
          info.setXmlRootElement(javaType.getXmlRootElement());
        }
        if (javaType.getXmlSeeAlso() != null && javaType.getXmlSeeAlso().size() > 0) {
          info.setXmlSeeAlso(javaType.getXmlSeeAlso());
        }
        if (javaType.getXmlType() != null) {
          info.setXmlType(javaType.getXmlType());
        }
        if (javaType.getXmlCustomizer() != null) {
          info.setXmlCustomizer(javaType.getXmlCustomizer());
        }
      }
    }
    if (xmlBindings.getXmlJavaTypeAdapters() != null) {
      Map<String,TypeInfo> typeInfos=aProcessor.getTypeInfosForPackage(packageName);
      for (      TypeInfo tInfo : typeInfos.values()) {
        List<XmlJavaTypeAdapter> adapters=xmlBindings.getXmlJavaTypeAdapters().getXmlJavaTypeAdapter();
        for (        XmlJavaTypeAdapter xja : adapters) {
          JavaClass adapterClass=jModelInput.getJavaModel().getClass(xja.getValue());
          JavaClass boundType=jModelInput.getJavaModel().getClass(xja.getType());
          if (boundType != null) {
            tInfo.addPackageLevelAdapterClass(adapterClass,boundType);
          }
        }
      }
    }
    javaClasses=annotationsProcessor.postBuildTypeInfo(javaClasses);
    annotationsProcessor.processJavaClasses(javaClasses);
    Map<String,TypeInfo> typeInfosForPackage=annotationsProcessor.getTypeInfosForPackage(packageName);
    for (    Entry<String,TypeInfo> entry : typeInfosForPackage.entrySet()) {
      TypeInfo tInfo=entry.getValue();
      if (tInfo.isEnumerationType()) {
        EnumTypeInfo etInfo=(EnumTypeInfo)tInfo;
        XmlEnum xmlEnum=xmlEnumMap.get(etInfo.getClassName());
        if (xmlEnum != null) {
          JavaClass restrictionClass=aProcessor.getHelper().getJavaClass(xmlEnum.getValue());
          if (restrictionClass == null) {
            restrictionClass=jModelInput.getJavaModel().getClass(String.class);
          }
          etInfo.setRestrictionBase(aProcessor.getSchemaTypeFor(restrictionClass));
          for (          XmlEnumValue xmlEnumValue : xmlEnum.getXmlEnumValue()) {
            etInfo.addJavaFieldToXmlEnumValuePair(true,xmlEnumValue.getJavaEnumValue(),xmlEnumValue.getValue());
          }
        }
      }
    }
    jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        processJavaType(javaType,typeInfosForPackage.get(javaType.getName()),nsInfo);
      }
    }
    pkgToClassMap.remove(packageName);
  }
  Iterator<ArrayList<JavaClass>> classIt=pkgToClassMap.values().iterator();
  while (classIt.hasNext()) {
    ArrayList<JavaClass> jClassList=classIt.next();
    JavaClass[] jClassArray=(JavaClass[])jClassList.toArray(new JavaClass[jClassList.size()]);
    annotationsProcessor.buildNewTypeInfo(jClassArray);
    annotationsProcessor.processJavaClasses(jClassArray);
  }
  Map<String,TypeInfo> typeInfos=(Map<String,TypeInfo>)aProcessor.getTypeInfo().clone();
  for (  String key : typeInfos.keySet()) {
    JavaClass[] jClassArray;
    TypeInfo tInfo=typeInfos.get(key);
    for (    Property prop : tInfo.getPropertyList()) {
      if (prop.isSetXmlJavaTypeAdapter()) {
        jClassArray=new JavaClass[]{prop.getActualType()};
        aProcessor.buildNewTypeInfo(jClassArray);
      }
    }
  }
  aProcessor.finalizeProperties();
  aProcessor.createElementsForTypeMappingInfo();
}","/** 
 * Process XmlBindings on a per package basis for a given AnnotationsPorcessor instance.
 * @param annotationsProcessor
 */
public void processXML(AnnotationsProcessor annotationsProcessor,JavaModelInput jModelInput,TypeMappingInfo[] typeMappingInfos,JavaClass[] originalJavaClasses){
  this.jModelInput=jModelInput;
  this.aProcessor=annotationsProcessor;
  Map<String,XmlEnum> xmlEnumMap=new HashMap<String,XmlEnum>();
  annotationsProcessor.init(originalJavaClasses,typeMappingInfos);
  Map<String,ArrayList<JavaClass>> pkgToClassMap=buildPackageToJavaClassMap();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    NamespaceInfo nsInfo=processXmlSchema(xmlBindings,packageName);
    if (nsInfo != null) {
      annotationsProcessor.addPackageToNamespaceMapping(packageName,nsInfo);
    }
    XmlRegistries xmlRegs=xmlBindings.getXmlRegistries();
    if (xmlRegs != null) {
      for (      XmlRegistry xmlReg : xmlRegs.getXmlRegistry()) {
        aProcessor.addXmlRegistry(xmlReg.getName(),xmlReg);
      }
    }
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    XmlEnums xmlEnums=xmlBindings.getXmlEnums();
    if (xmlEnums != null) {
      for (      XmlEnum xmlEnum : xmlEnums.getXmlEnum()) {
        xmlEnumMap.put(xmlEnum.getJavaEnum(),xmlEnum);
      }
    }
    Map<String,TypeInfo> typeInfoMap=annotationsProcessor.preBuildTypeInfo(javaClasses);
    List<XmlSchemaType> xmlSchemaTypes=null;
    XmlSchemaTypes sTypes=xmlBindings.getXmlSchemaTypes();
    if (sTypes != null) {
      xmlSchemaTypes=sTypes.getXmlSchemaType();
    }
 else {
      xmlSchemaTypes=new ArrayList<XmlSchemaType>();
    }
    if (xmlBindings.getXmlSchemaType() != null) {
      xmlSchemaTypes.add(xmlBindings.getXmlSchemaType());
    }
    for (    XmlSchemaType sType : xmlSchemaTypes) {
      JavaClass jClass=aProcessor.getHelper().getJavaClass(sType.getType());
      if (jClass != null) {
        aProcessor.processSchemaType(sType.getName(),sType.getNamespace(),jClass.getQualifiedName());
      }
    }
    nsInfo=annotationsProcessor.getPackageToNamespaceMappings().get(packageName);
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo info=typeInfoMap.get(javaType.getName());
        if (javaType.getXmlJavaTypeAdapter() != null) {
          info.setXmlJavaTypeAdapter(javaType.getXmlJavaTypeAdapter());
        }
        if (javaType.isSetXmlAccessorOrder()) {
          info.setXmlAccessOrder(javaType.getXmlAccessorOrder());
        }
 else         if (!info.isSetXmlAccessOrder()) {
          if (xmlBindings.isSetXmlAccessorOrder()) {
            info.setXmlAccessOrder(xmlBindings.getXmlAccessorOrder());
          }
 else {
            info.setXmlAccessOrder(nsInfo.getAccessOrder());
          }
        }
        if (javaType.isSetXmlAccessorType()) {
          info.setXmlAccessType(javaType.getXmlAccessorType());
        }
 else         if (!info.isSetXmlAccessType()) {
          if (xmlBindings.isSetXmlAccessorType()) {
            info.setXmlAccessType(xmlBindings.getXmlAccessorType());
          }
 else {
            info.setXmlAccessType(nsInfo.getAccessType());
          }
        }
        if (javaType.isSetXmlInlineBinaryData()) {
          info.setInlineBinaryData(javaType.isXmlInlineBinaryData());
        }
        if (javaType.isSetXmlTransient()) {
          info.setXmlTransient(javaType.isXmlTransient());
        }
        if (javaType.getXmlRootElement() != null) {
          info.setXmlRootElement(javaType.getXmlRootElement());
        }
        if (javaType.getXmlSeeAlso() != null && javaType.getXmlSeeAlso().size() > 0) {
          info.setXmlSeeAlso(javaType.getXmlSeeAlso());
        }
        if (javaType.getXmlType() != null) {
          info.setXmlType(javaType.getXmlType());
        }
        if (javaType.getXmlCustomizer() != null) {
          info.setXmlCustomizer(javaType.getXmlCustomizer());
        }
      }
    }
    if (xmlBindings.getXmlJavaTypeAdapters() != null) {
      Map<String,TypeInfo> typeInfos=aProcessor.getTypeInfosForPackage(packageName);
      for (      TypeInfo tInfo : typeInfos.values()) {
        List<XmlJavaTypeAdapter> adapters=xmlBindings.getXmlJavaTypeAdapters().getXmlJavaTypeAdapter();
        for (        XmlJavaTypeAdapter xja : adapters) {
          JavaClass adapterClass=jModelInput.getJavaModel().getClass(xja.getValue());
          JavaClass boundType=jModelInput.getJavaModel().getClass(xja.getType());
          if (boundType != null) {
            tInfo.addPackageLevelAdapterClass(adapterClass,boundType);
          }
        }
      }
    }
    javaClasses=annotationsProcessor.postBuildTypeInfo(javaClasses);
    annotationsProcessor.processJavaClasses(javaClasses);
    Map<String,TypeInfo> typeInfosForPackage=annotationsProcessor.getTypeInfosForPackage(packageName);
    for (    Entry<String,TypeInfo> entry : typeInfosForPackage.entrySet()) {
      TypeInfo tInfo=entry.getValue();
      if (tInfo.isEnumerationType()) {
        EnumTypeInfo etInfo=(EnumTypeInfo)tInfo;
        XmlEnum xmlEnum=xmlEnumMap.get(etInfo.getClassName());
        if (xmlEnum != null) {
          JavaClass restrictionClass=aProcessor.getHelper().getJavaClass(xmlEnum.getValue());
          if (restrictionClass == null) {
            restrictionClass=jModelInput.getJavaModel().getClass(String.class);
          }
          etInfo.setRestrictionBase(aProcessor.getSchemaTypeFor(restrictionClass));
          for (          XmlEnumValue xmlEnumValue : xmlEnum.getXmlEnumValue()) {
            etInfo.addJavaFieldToXmlEnumValuePair(true,xmlEnumValue.getJavaEnumValue(),xmlEnumValue.getValue());
          }
        }
      }
    }
    jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        processJavaType(javaType,typeInfosForPackage.get(javaType.getName()),nsInfo);
      }
    }
    pkgToClassMap.remove(packageName);
  }
  Iterator<ArrayList<JavaClass>> classIt=pkgToClassMap.values().iterator();
  while (classIt.hasNext()) {
    ArrayList<JavaClass> jClassList=classIt.next();
    JavaClass[] jClassArray=(JavaClass[])jClassList.toArray(new JavaClass[jClassList.size()]);
    annotationsProcessor.buildNewTypeInfo(jClassArray);
    annotationsProcessor.processJavaClasses(jClassArray);
  }
  Map<String,TypeInfo> typeInfos=(Map<String,TypeInfo>)aProcessor.getTypeInfo().clone();
  for (  Entry<String,TypeInfo> entry : typeInfos.entrySet()) {
    JavaClass[] jClassArray;
    for (    Property prop : entry.getValue().getPropertyList()) {
      if (prop.isSetXmlJavaTypeAdapter()) {
        jClassArray=new JavaClass[]{prop.getActualType()};
        aProcessor.buildNewTypeInfo(jClassArray);
      }
    }
  }
  aProcessor.finalizeProperties();
  aProcessor.createElementsForTypeMappingInfo();
}"
66530,"/** 
 * Convenience method that returns an array of Classes based on a map given XmlBindings and an array of existing classes. The resulting array will not contain duplicate entries.
 * @param xmlBindingMap
 * @param classLoader
 * @param existingClasses
 * @return
 */
private static ArrayList<Class> getXmlBindingsClassesFromMap(Map<String,XmlBindings> xmlBindingMap,ClassLoader classLoader,ArrayList<Class> existingClasses){
  ArrayList<Class> additionalClasses=existingClasses;
  for (  String packageName : xmlBindingMap.keySet()) {
    additionalClasses=getXmlBindingsClasses(xmlBindingMap.get(packageName),classLoader,additionalClasses);
  }
  return additionalClasses;
}","/** 
 * Convenience method that returns an array of Classes based on a map given XmlBindings and an array of existing classes. The resulting array will not contain duplicate entries.
 */
private static ArrayList<Class> getXmlBindingsClassesFromMap(Map<String,XmlBindings> xmlBindingMap,ClassLoader classLoader,ArrayList<Class> existingClasses){
  ArrayList<Class> additionalClasses=existingClasses;
  for (  String packageName : xmlBindingMap.keySet()) {
    additionalClasses=getXmlBindingsClasses(xmlBindingMap.get(packageName),classLoader,additionalClasses);
  }
  return additionalClasses;
}"
66531,"/** 
 * Convenience method for processing a properties map and creating a map of package names to XmlBindings instances. It is assumed that the given map's key will be ECLIPSELINK_OXM_XML_KEY, and the value will be Map<String, Source>, where String = package, Source = metadata file
 * @param properties
 * @param classLoader
 * @return
 */
private static Map<String,XmlBindings> getXmlBindingsFromProperties(Map properties,ClassLoader classLoader){
  Map<String,XmlBindings> bindings=new HashMap<String,XmlBindings>();
  if (properties != null) {
    Map<String,Source> metadataFiles=null;
    try {
      metadataFiles=(Map<String,Source>)properties.get(ECLIPSELINK_OXM_XML_KEY);
    }
 catch (    ClassCastException x) {
      throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
    }
    if (metadataFiles != null) {
      Iterator<String> keyIt=metadataFiles.keySet().iterator();
      while (keyIt.hasNext()) {
        String key=null;
        try {
          key=keyIt.next();
        }
 catch (        ClassCastException cce) {
          throw org.eclipse.persistence.exceptions.JAXBException.incorrectKeyParameterType();
        }
        if (key == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMapKey();
        }
        Source metadataSource=null;
        try {
          metadataSource=metadataFiles.get(key);
        }
 catch (        ClassCastException cce) {
          throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterType();
        }
        if (metadataSource == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource(key);
        }
        XmlBindings binding=getXmlBindings(metadataSource,classLoader);
        if (binding != null) {
          bindings.put(key,binding);
        }
      }
    }
  }
  return bindings;
}","/** 
 * Convenience method for processing a properties map and creating a map of package names to XmlBindings instances. It is assumed that the given map's key will be ECLIPSELINK_OXM_XML_KEY, and the value will be Map<String, Source>, where String = package, Source = metadata file
 */
private static Map<String,XmlBindings> getXmlBindingsFromProperties(Map properties,ClassLoader classLoader){
  Map<String,XmlBindings> bindings=new HashMap<String,XmlBindings>();
  if (properties != null) {
    Map<String,Source> metadataFiles=null;
    try {
      metadataFiles=(Map<String,Source>)properties.get(ECLIPSELINK_OXM_XML_KEY);
    }
 catch (    ClassCastException x) {
      throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
    }
    if (metadataFiles != null) {
      Iterator<String> keyIt=metadataFiles.keySet().iterator();
      while (keyIt.hasNext()) {
        String key=null;
        try {
          key=keyIt.next();
        }
 catch (        ClassCastException cce) {
          throw org.eclipse.persistence.exceptions.JAXBException.incorrectKeyParameterType();
        }
        if (key == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMapKey();
        }
        Source metadataSource=null;
        try {
          metadataSource=metadataFiles.get(key);
        }
 catch (        ClassCastException cce) {
          throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterType();
        }
        if (metadataSource == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource(key);
        }
        XmlBindings binding=getXmlBindings(metadataSource,classLoader);
        if (binding != null) {
          bindings.put(key,binding);
        }
      }
    }
  }
  return bindings;
}"
66532,"/** 
 * Convenience method that returns a list of Classes based on a given XmlBindings and an array of existing classes. The resulting array will not contain duplicate entries.
 * @param xmlBindings
 * @param classLoader
 * @param existingClasses
 * @return
 */
private static ArrayList<Class> getXmlBindingsClasses(XmlBindings xmlBindings,ClassLoader classLoader,ArrayList<Class> existingClasses){
  ArrayList<Class> additionalClasses=existingClasses;
  JavaTypes jTypes=xmlBindings.getJavaTypes();
  if (jTypes != null) {
    for (    JavaType javaType : jTypes.getJavaType()) {
      try {
        Class jClass=classLoader.loadClass(javaType.getName());
        if (!additionalClasses.contains(jClass)) {
          additionalClasses.add(jClass);
        }
      }
 catch (      ClassNotFoundException e) {
        throw org.eclipse.persistence.exceptions.JAXBException.couldNotLoadClassFromMetadata(javaType.getName());
      }
    }
  }
  return additionalClasses;
}","/** 
 * Convenience method that returns a list of Classes based on a given XmlBindings and an array of existing classes. The resulting array will not contain duplicate entries.
 */
private static ArrayList<Class> getXmlBindingsClasses(XmlBindings xmlBindings,ClassLoader classLoader,ArrayList<Class> existingClasses){
  ArrayList<Class> additionalClasses=existingClasses;
  JavaTypes jTypes=xmlBindings.getJavaTypes();
  if (jTypes != null) {
    for (    JavaType javaType : jTypes.getJavaType()) {
      try {
        Class jClass=classLoader.loadClass(javaType.getName());
        if (!additionalClasses.contains(jClass)) {
          additionalClasses.add(jClass);
        }
      }
 catch (      ClassNotFoundException e) {
        throw org.eclipse.persistence.exceptions.JAXBException.couldNotLoadClassFromMetadata(javaType.getName());
      }
    }
  }
  return additionalClasses;
}"
66533,"private static javax.xml.bind.JAXBContext createContext(Generator generator,java.util.Map properties,ClassLoader classLoader,JaxbClassLoader loader,TypeMappingInfo[] typesToBeBound) throws Exception {
  javax.xml.bind.JAXBContext jaxbContext=null;
  XMLContext xmlContext=null;
  Project proj=generator.generateProject();
  ConversionManager conversionManager=null;
  if (classLoader != null) {
    conversionManager=new ConversionManager();
    conversionManager.setLoader(loader);
  }
 else {
    conversionManager=ConversionManager.getDefaultManager();
  }
  proj.convertClassNamesToClasses(conversionManager.getLoader());
  for (Iterator<ClassDescriptor> descriptorIt=proj.getOrderedDescriptors().iterator(); descriptorIt.hasNext(); ) {
    ClassDescriptor descriptor=descriptorIt.next();
    if (descriptor.getJavaClass() == null) {
      descriptor.setJavaClass(conversionManager.convertClassNameToClass(descriptor.getJavaClassName()));
    }
  }
  SessionEventListener eventListener=new SessionEventListener();
  eventListener.setShouldValidateInstantiationPolicy(false);
  XMLPlatform platform=new SAXPlatform();
  platform.getConversionManager().setLoader(loader);
  xmlContext=new XMLContext(proj,loader,eventListener);
  if (generator.getAnnotationsProcessor().getPackageToNamespaceMappings().size() > 1) {
    ((XMLLogin)xmlContext.getSession(0).getDatasourceLogin()).setEqualNamespaceResolvers(false);
  }
  jaxbContext=new org.eclipse.persistence.jaxb.JAXBContext(xmlContext,generator,typesToBeBound);
  return jaxbContext;
}","private static JAXBContext createContext(Generator generator,Map properties,ClassLoader classLoader,JaxbClassLoader loader,TypeMappingInfo[] typesToBeBound) throws Exception {
  Project proj=generator.generateProject();
  ConversionManager conversionManager=null;
  if (classLoader != null) {
    conversionManager=new ConversionManager();
    conversionManager.setLoader(loader);
  }
 else {
    conversionManager=ConversionManager.getDefaultManager();
  }
  proj.convertClassNamesToClasses(conversionManager.getLoader());
  for (Iterator<ClassDescriptor> descriptorIt=proj.getOrderedDescriptors().iterator(); descriptorIt.hasNext(); ) {
    ClassDescriptor descriptor=descriptorIt.next();
    if (descriptor.getJavaClass() == null) {
      descriptor.setJavaClass(conversionManager.convertClassNameToClass(descriptor.getJavaClassName()));
    }
  }
  SessionEventListener eventListener=new SessionEventListener();
  eventListener.setShouldValidateInstantiationPolicy(false);
  XMLPlatform platform=new SAXPlatform();
  platform.getConversionManager().setLoader(loader);
  XMLContext xmlContext=new XMLContext(proj,loader,eventListener);
  if (generator.getAnnotationsProcessor().getPackageToNamespaceMappings().size() > 1) {
    ((XMLLogin)xmlContext.getSession(0).getDatasourceLogin()).setEqualNamespaceResolvers(false);
  }
  return new JAXBContext(xmlContext,generator,typesToBeBound);
}"
66534,"/** 
 * Convenience method for creating an XmlBindings object based on a given Source. The method will load the eclipselink metadata model and unmarshal the Source. This assumes that the Source represents the eclipselink-oxm.xml metadata file to be unmarshalled.
 * @param metadataSource
 * @param classLoader
 * @return
 */
private static XmlBindings getXmlBindings(Source metadataSource,ClassLoader classLoader){
  XmlBindings xmlBindings=null;
  Unmarshaller unmarshaller;
  JAXBContext jaxbContext=CompilerHelper.getXmlBindingsModelContext();
  try {
    unmarshaller=jaxbContext.createUnmarshaller();
    xmlBindings=(XmlBindings)unmarshaller.unmarshal(metadataSource);
  }
 catch (  JAXBException jaxbEx) {
    throw org.eclipse.persistence.exceptions.JAXBException.couldNotUnmarshalMetadata(jaxbEx);
  }
  return xmlBindings;
}","/** 
 * Convenience method for creating an XmlBindings object based on a given Source. The method will load the eclipselink metadata model and unmarshal the Source. This assumes that the Source represents the eclipselink-oxm.xml metadata file to be unmarshalled.
 */
private static XmlBindings getXmlBindings(Source metadataSource,ClassLoader classLoader){
  XmlBindings xmlBindings=null;
  Unmarshaller unmarshaller;
  JAXBContext jaxbContext=CompilerHelper.getXmlBindingsModelContext();
  try {
    unmarshaller=jaxbContext.createUnmarshaller();
    xmlBindings=(XmlBindings)unmarshaller.unmarshal(metadataSource);
  }
 catch (  JAXBException jaxbEx) {
    throw org.eclipse.persistence.exceptions.JAXBException.couldNotUnmarshalMetadata(jaxbEx);
  }
  return xmlBindings;
}"
66535,"/** 
 * Process a given XMLObjectReferenceMapping.  In the case of an XMLCollectionReferenceMapping,  i.e. the isCollection flag is set to true, maxOccurs will be set to 'unbounded' on any  source elements 
 * @param mapping
 * @param seq
 * @param ct
 * @param schemaForNamespace
 * @param workingSchema
 * @param properties
 * @param descriptors
 * @param isCollection
 */
protected void processXMLObjectReferenceMapping(XMLObjectReferenceMapping mapping,Sequence seq,ComplexType ct,HashMap<String,Schema> schemaForNamespace,Schema workingSchema,SchemaModelGeneratorProperties properties,List<XMLDescriptor> descriptors,boolean isCollection){
  String tgtClassName=mapping.getReferenceClassName();
  XMLDescriptor tgtDesc=getDescriptorByName(tgtClassName,descriptors);
  if (tgtDesc == null) {
    throw DescriptorException.descriptorIsMissing(tgtClassName,mapping);
  }
  String schemaTypeString=null;
  Map<XMLField,XMLField> associations=mapping.getSourceToTargetKeyFieldAssociations();
  for (  XMLField srcField : associations.keySet()) {
    XMLField tgtField=associations.get(srcField);
    Vector mappings=tgtDesc.getMappings();
    for (Enumeration mappingsNum=mappings.elements(); mappingsNum.hasMoreElements(); ) {
      DatabaseMapping dbMapping=(DatabaseMapping)mappingsNum.nextElement();
      if (dbMapping.getField() != null && dbMapping.getField() instanceof XMLField) {
        XMLField xFld=(XMLField)dbMapping.getField();
        if (xFld == tgtField) {
          schemaTypeString=getSchemaTypeForElement(tgtField,dbMapping.getAttributeClassification(),workingSchema);
        }
      }
    }
    if (schemaTypeString == null) {
      schemaTypeString=getSchemaTypeString(XMLConstants.STRING_QNAME,workingSchema);
    }
    XPathFragment frag=srcField.getXPathFragment();
    if (frag.isAttribute()) {
      Attribute attr=buildAttribute(frag,schemaTypeString);
      ct.getOrderedAttributes().add(attr);
    }
 else {
      Element elem=buildElement(frag,schemaTypeString,Occurs.ZERO,null);
      if (isCollection) {
        elem.setMaxOccurs(Occurs.UNBOUNDED);
      }
      seq.addElement(elem);
    }
  }
}","/** 
 * Process a given XMLObjectReferenceMapping.  In the case of an XMLCollectionReferenceMapping,  i.e. the isCollection flag is set to true, maxOccurs will be set to 'unbounded' on any  source elements 
 * @param mapping
 * @param seq
 * @param ct
 * @param schemaForNamespace
 * @param workingSchema
 * @param properties
 * @param descriptors
 * @param isCollection
 */
protected void processXMLObjectReferenceMapping(XMLObjectReferenceMapping mapping,Sequence seq,ComplexType ct,HashMap<String,Schema> schemaForNamespace,Schema workingSchema,SchemaModelGeneratorProperties properties,List<XMLDescriptor> descriptors,boolean isCollection){
  String tgtClassName=mapping.getReferenceClassName();
  XMLDescriptor tgtDesc=getDescriptorByName(tgtClassName,descriptors);
  if (tgtDesc == null) {
    throw DescriptorException.descriptorIsMissing(tgtClassName,mapping);
  }
  String schemaTypeString=null;
  Map<XMLField,XMLField> associations=mapping.getSourceToTargetKeyFieldAssociations();
  for (  Entry<XMLField,XMLField> entry : associations.entrySet()) {
    XMLField tgtField=entry.getValue();
    Vector mappings=tgtDesc.getMappings();
    for (Enumeration mappingsNum=mappings.elements(); mappingsNum.hasMoreElements(); ) {
      DatabaseMapping dbMapping=(DatabaseMapping)mappingsNum.nextElement();
      if (dbMapping.getField() != null && dbMapping.getField() instanceof XMLField) {
        XMLField xFld=(XMLField)dbMapping.getField();
        if (xFld == tgtField) {
          schemaTypeString=getSchemaTypeForElement(tgtField,dbMapping.getAttributeClassification(),workingSchema);
        }
      }
    }
    if (schemaTypeString == null) {
      schemaTypeString=getSchemaTypeString(XMLConstants.STRING_QNAME,workingSchema);
    }
    XPathFragment frag=entry.getKey().getXPathFragment();
    if (frag.isAttribute()) {
      Attribute attr=buildAttribute(frag,schemaTypeString);
      ct.getOrderedAttributes().add(attr);
    }
 else {
      Element elem=buildElement(frag,schemaTypeString,Occurs.ZERO,null);
      if (isCollection) {
        elem.setMaxOccurs(Occurs.UNBOUNDED);
      }
      seq.addElement(elem);
    }
  }
}"
66536,"private Map<TypeMappingInfo,JAXBContext.RootLevelXmlAdapter> createAdaptersForAdapterClasses(Map<TypeMappingInfo,Class> typeMappingInfoToAdapterClasses){
  Map<TypeMappingInfo,JAXBContext.RootLevelXmlAdapter> typeMappingInfoToAdapters=new HashMap<TypeMappingInfo,JAXBContext.RootLevelXmlAdapter>();
  for (  TypeMappingInfo tmi : typeMappingInfoToAdapterClasses.keySet()) {
    Class adapterClass=typeMappingInfoToAdapterClasses.get(tmi);
    if (adapterClass != null) {
      try {
        XmlAdapter adapter=(XmlAdapter)adapterClass.newInstance();
        Class boundType=getBoundTypeForXmlAdapterClass(adapterClass);
        RootLevelXmlAdapter rootLevelXmlAdapter=new RootLevelXmlAdapter(adapter,boundType);
        typeMappingInfoToAdapters.put(tmi,rootLevelXmlAdapter);
      }
 catch (      Exception ex) {
      }
    }
  }
  return typeMappingInfoToAdapters;
}","private Map<TypeMappingInfo,JAXBContext.RootLevelXmlAdapter> createAdaptersForAdapterClasses(Map<TypeMappingInfo,Class> typeMappingInfoToAdapterClasses){
  Map<TypeMappingInfo,JAXBContext.RootLevelXmlAdapter> typeMappingInfoToAdapters=new HashMap<TypeMappingInfo,JAXBContext.RootLevelXmlAdapter>();
  for (  Entry<TypeMappingInfo,Class> entry : typeMappingInfoToAdapterClasses.entrySet()) {
    Class adapterClass=entry.getValue();
    if (adapterClass != null) {
      try {
        XmlAdapter adapter=(XmlAdapter)adapterClass.newInstance();
        Class boundType=getBoundTypeForXmlAdapterClass(adapterClass);
        RootLevelXmlAdapter rootLevelXmlAdapter=new RootLevelXmlAdapter(adapter,boundType);
        typeMappingInfoToAdapters.put(entry.getKey(),rootLevelXmlAdapter);
      }
 catch (      Exception ex) {
      }
    }
  }
  return typeMappingInfoToAdapters;
}"
66537,"/** 
 * Convenience method that processes a given map of QName-Type entries.  For each an ElementDeclaration is created and added to the given AnnotationsProcessor instance's map of global elements. It is assumed that the map of QName-Type entries contains Type instances that are either a Class or a ParameterizedType.
 * @param additionalGlobalElements
 * @param annotationsProcessor
 */
private void processAdditionalElements(Map<QName,Type> additionalGlobalElements,AnnotationsProcessor annotationsProcessor){
  if (additionalGlobalElements != null) {
    ElementDeclaration declaration;
    for (Iterator<QName> keyIt=additionalGlobalElements.keySet().iterator(); keyIt.hasNext(); ) {
      QName key=keyIt.next();
      Type type=additionalGlobalElements.get(key);
      TypeMappingInfo tmi=null;
      if (this.typeToTypeMappingInfo != null) {
        tmi=this.typeToTypeMappingInfo.get(type);
      }
      if (tmi != null) {
        if (annotationsProcessor.getTypeMappingInfoToGeneratedClasses().get(tmi) != null) {
          type=annotationsProcessor.getTypeMappingInfoToGeneratedClasses().get(tmi);
        }
      }
      JavaClass jClass=null;
      if (type instanceof Class) {
        Class tClass=(Class)type;
        jClass=helper.getJavaClass(tClass);
      }
      if (jClass != null) {
        declaration=new ElementDeclaration(key,jClass,jClass.getQualifiedName(),false);
        annotationsProcessor.getGlobalElements().put(key,declaration);
      }
    }
  }
}","/** 
 * Convenience method that processes a given map of QName-Type entries.  For each an ElementDeclaration is created and added to the given AnnotationsProcessor instance's map of global elements. It is assumed that the map of QName-Type entries contains Type instances that are either a Class or a ParameterizedType.
 * @param additionalGlobalElements
 * @param annotationsProcessor
 */
private void processAdditionalElements(Map<QName,Type> additionalGlobalElements,AnnotationsProcessor annotationsProcessor){
  if (additionalGlobalElements != null) {
    ElementDeclaration declaration;
    for (    Entry<QName,Type> entry : additionalGlobalElements.entrySet()) {
      QName key=entry.getKey();
      Type type=entry.getValue();
      TypeMappingInfo tmi=null;
      if (this.typeToTypeMappingInfo != null) {
        tmi=this.typeToTypeMappingInfo.get(type);
      }
      if (tmi != null) {
        if (annotationsProcessor.getTypeMappingInfoToGeneratedClasses().get(tmi) != null) {
          type=annotationsProcessor.getTypeMappingInfoToGeneratedClasses().get(tmi);
        }
      }
      JavaClass jClass=null;
      if (type instanceof Class) {
        Class tClass=(Class)type;
        jClass=helper.getJavaClass(tClass);
      }
      if (jClass != null) {
        declaration=new ElementDeclaration(key,jClass,jClass.getQualifiedName(),false);
        annotationsProcessor.getGlobalElements().put(key,declaration);
      }
    }
  }
}"
66538,"public void addGlobalElements(HashMap<QName,ElementDeclaration> additionalElements){
  for (  QName next : additionalElements.keySet()) {
    if (next != null) {
      ElementDeclaration nextElement=additionalElements.get(next);
      if (nextElement.getScopeClass() == GLOBAL.class) {
        String namespaceURI=next.getNamespaceURI();
        Schema targetSchema=getSchemaForNamespace(namespaceURI);
        if (targetSchema == null) {
          break;
        }
        if (targetSchema.getTopLevelElements().get(next.getLocalPart()) == null) {
          Element element=new Element();
          element.setName(next.getLocalPart());
          JavaClass javaClass=nextElement.getJavaType();
          QName schemaType=(QName)helper.getXMLToJavaTypeMap().get(javaClass.getRawName());
          if (schemaType != null) {
            element.setType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + schemaType.getLocalPart());
          }
 else           if (areEquals(javaClass,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(javaClass,byte[].class) || areEquals(javaClass,Byte[].class)|| areEquals(javaClass,Image.class)|| areEquals(javaClass,Source.class)|| areEquals(javaClass,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
            schemaType=XMLConstants.BASE_64_BINARY_QNAME;
            if (nextElement.getTypeMappingInfo() != null) {
              if (nextElement.isXmlAttachmentRef()) {
                schemaType=XMLConstants.SWA_REF_QNAME;
              }
              if (nextElement.getXmlMimeType() != null) {
                element.getAttributesMap().put(XMLConstants.EXPECTED_CONTENT_TYPES_QNAME,nextElement.getXmlMimeType());
              }
            }
            String prefix=getOrGeneratePrefixForNamespace(schemaType.getNamespaceURI(),targetSchema);
            element.setType(prefix + ""String_Node_Str"" + schemaType.getLocalPart());
          }
 else {
            TypeInfo type=(TypeInfo)this.typeInfo.get(javaClass.getQualifiedName());
            if (type != null) {
              String typeName=null;
              if (type.isComplexType()) {
                typeName=type.getComplexType().getName();
              }
 else {
                typeName=type.getSimpleType().getName();
              }
              if (type.getClassNamespace().equals(namespaceURI)) {
                String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(namespaceURI);
                if (prefix != null && !(prefix.equals(""String_Node_Str""))) {
                  element.setType(prefix + ""String_Node_Str"" + typeName);
                }
 else {
                  element.setType(typeName);
                }
              }
 else {
                Schema complexTypeSchema=getSchemaForNamespace(type.getClassNamespace());
                String complexTypeSchemaNS=type.getClassNamespace();
                if (complexTypeSchemaNS == null) {
                  complexTypeSchemaNS=""String_Node_Str"";
                }
                addImportIfRequired(targetSchema,complexTypeSchema,type.getClassNamespace());
                String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(complexTypeSchemaNS);
                if (prefix != null) {
                  element.setType(prefix + ""String_Node_Str"" + typeName);
                }
 else {
                  element.setType(typeName);
                }
              }
            }
          }
          if (nextElement.getSubstitutionHead() != null) {
            String subLocal=nextElement.getSubstitutionHead().getLocalPart();
            String subNamespace=nextElement.getSubstitutionHead().getNamespaceURI();
            String prefix=getPrefixForNamespace(subNamespace,targetSchema.getNamespaceResolver());
            if (prefix == null || prefix.equals(""String_Node_Str"")) {
              element.setSubstitutionGroup(subLocal);
            }
 else {
              element.setSubstitutionGroup(prefix + ""String_Node_Str"" + subLocal);
            }
          }
          targetSchema.addTopLevelElement(element);
          SchemaTypeInfo info=this.schemaTypeInfo.get(javaClass.getQualifiedName());
          if (info == null) {
            info=new SchemaTypeInfo();
            info.setSchemaTypeName(schemaType);
            schemaTypeInfo.put(javaClass.getQualifiedName(),info);
          }
          info.getGlobalElementDeclarations().add(next);
        }
      }
    }
  }
}","public void addGlobalElements(HashMap<QName,ElementDeclaration> additionalElements){
  for (  Entry<QName,ElementDeclaration> entry : additionalElements.entrySet()) {
    QName next=entry.getKey();
    if (next != null) {
      ElementDeclaration nextElement=entry.getValue();
      if (nextElement.getScopeClass() == GLOBAL.class) {
        String namespaceURI=next.getNamespaceURI();
        Schema targetSchema=getSchemaForNamespace(namespaceURI);
        if (targetSchema == null) {
          break;
        }
        if (targetSchema.getTopLevelElements().get(next.getLocalPart()) == null) {
          Element element=new Element();
          element.setName(next.getLocalPart());
          JavaClass javaClass=nextElement.getJavaType();
          QName schemaType=(QName)helper.getXMLToJavaTypeMap().get(javaClass.getRawName());
          if (schemaType != null) {
            element.setType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + schemaType.getLocalPart());
          }
 else           if (areEquals(javaClass,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(javaClass,byte[].class) || areEquals(javaClass,Byte[].class)|| areEquals(javaClass,Image.class)|| areEquals(javaClass,Source.class)|| areEquals(javaClass,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
            schemaType=XMLConstants.BASE_64_BINARY_QNAME;
            if (nextElement.getTypeMappingInfo() != null) {
              if (nextElement.isXmlAttachmentRef()) {
                schemaType=XMLConstants.SWA_REF_QNAME;
              }
              if (nextElement.getXmlMimeType() != null) {
                element.getAttributesMap().put(XMLConstants.EXPECTED_CONTENT_TYPES_QNAME,nextElement.getXmlMimeType());
              }
            }
            String prefix=getOrGeneratePrefixForNamespace(schemaType.getNamespaceURI(),targetSchema);
            element.setType(prefix + ""String_Node_Str"" + schemaType.getLocalPart());
          }
 else {
            TypeInfo type=(TypeInfo)this.typeInfo.get(javaClass.getQualifiedName());
            if (type != null) {
              String typeName=null;
              if (type.isComplexType()) {
                typeName=type.getComplexType().getName();
              }
 else {
                typeName=type.getSimpleType().getName();
              }
              if (type.getClassNamespace().equals(namespaceURI)) {
                String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(namespaceURI);
                if (prefix != null && !(prefix.equals(""String_Node_Str""))) {
                  element.setType(prefix + ""String_Node_Str"" + typeName);
                }
 else {
                  element.setType(typeName);
                }
              }
 else {
                Schema complexTypeSchema=getSchemaForNamespace(type.getClassNamespace());
                String complexTypeSchemaNS=type.getClassNamespace();
                if (complexTypeSchemaNS == null) {
                  complexTypeSchemaNS=""String_Node_Str"";
                }
                addImportIfRequired(targetSchema,complexTypeSchema,type.getClassNamespace());
                String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(complexTypeSchemaNS);
                if (prefix != null) {
                  element.setType(prefix + ""String_Node_Str"" + typeName);
                }
 else {
                  element.setType(typeName);
                }
              }
            }
          }
          if (nextElement.getSubstitutionHead() != null) {
            String subLocal=nextElement.getSubstitutionHead().getLocalPart();
            String subNamespace=nextElement.getSubstitutionHead().getNamespaceURI();
            String prefix=getPrefixForNamespace(subNamespace,targetSchema.getNamespaceResolver());
            if (prefix == null || prefix.equals(""String_Node_Str"")) {
              element.setSubstitutionGroup(subLocal);
            }
 else {
              element.setSubstitutionGroup(prefix + ""String_Node_Str"" + subLocal);
            }
          }
          targetSchema.addTopLevelElement(element);
          SchemaTypeInfo info=this.schemaTypeInfo.get(javaClass.getQualifiedName());
          if (info == null) {
            info=new SchemaTypeInfo();
            info.setSchemaTypeName(schemaType);
            schemaTypeInfo.put(javaClass.getQualifiedName(),info);
          }
          info.getGlobalElementDeclarations().add(next);
        }
      }
    }
  }
}"
66539,"/** 
 * Process XmlBindings on a per package basis for a given AnnotationsPorcessor instance.
 * @param annotationsProcessor
 */
public void processXML(AnnotationsProcessor annotationsProcessor,JavaModelInput jModelInput,TypeMappingInfo[] typeMappingInfos,JavaClass[] originalJavaClasses){
  this.jModelInput=jModelInput;
  this.aProcessor=annotationsProcessor;
  Map<String,XmlEnum> xmlEnumMap=new HashMap<String,XmlEnum>();
  annotationsProcessor.init(originalJavaClasses,typeMappingInfos);
  Map<String,ArrayList<JavaClass>> pkgToClassMap=buildPackageToJavaClassMap();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    NamespaceInfo nsInfo=processXmlSchema(xmlBindings,packageName);
    if (nsInfo != null) {
      annotationsProcessor.addPackageToNamespaceMapping(packageName,nsInfo);
    }
    XmlRegistries xmlRegs=xmlBindings.getXmlRegistries();
    if (xmlRegs != null) {
      for (      XmlRegistry xmlReg : xmlRegs.getXmlRegistry()) {
        aProcessor.addXmlRegistry(xmlReg.getName(),xmlReg);
      }
    }
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    XmlEnums xmlEnums=xmlBindings.getXmlEnums();
    if (xmlEnums != null) {
      for (      XmlEnum xmlEnum : xmlEnums.getXmlEnum()) {
        xmlEnumMap.put(xmlEnum.getJavaEnum(),xmlEnum);
      }
    }
    Map<String,TypeInfo> typeInfoMap=annotationsProcessor.preBuildTypeInfo(javaClasses);
    List<XmlSchemaType> xmlSchemaTypes=null;
    XmlSchemaTypes sTypes=xmlBindings.getXmlSchemaTypes();
    if (sTypes != null) {
      xmlSchemaTypes=sTypes.getXmlSchemaType();
    }
 else {
      xmlSchemaTypes=new ArrayList<XmlSchemaType>();
    }
    if (xmlBindings.getXmlSchemaType() != null) {
      xmlSchemaTypes.add(xmlBindings.getXmlSchemaType());
    }
    for (    XmlSchemaType sType : xmlSchemaTypes) {
      JavaClass jClass=aProcessor.getHelper().getJavaClass(sType.getType());
      if (jClass != null) {
        aProcessor.processSchemaType(sType.getName(),sType.getNamespace(),jClass.getQualifiedName());
      }
    }
    nsInfo=annotationsProcessor.getPackageToNamespaceMappings().get(packageName);
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo info=typeInfoMap.get(javaType.getName());
        if (javaType.getXmlJavaTypeAdapter() != null) {
          info.setXmlJavaTypeAdapter(javaType.getXmlJavaTypeAdapter());
        }
        if (javaType.isSetXmlAccessorOrder()) {
          info.setXmlAccessOrder(javaType.getXmlAccessorOrder());
        }
 else         if (!info.isSetXmlAccessOrder()) {
          if (xmlBindings.isSetXmlAccessorOrder()) {
            info.setXmlAccessOrder(xmlBindings.getXmlAccessorOrder());
          }
 else {
            info.setXmlAccessOrder(nsInfo.getAccessOrder());
          }
        }
        if (javaType.isSetXmlAccessorType()) {
          info.setXmlAccessType(javaType.getXmlAccessorType());
        }
 else         if (!info.isSetXmlAccessType()) {
          if (xmlBindings.isSetXmlAccessorType()) {
            info.setXmlAccessType(xmlBindings.getXmlAccessorType());
          }
 else {
            info.setXmlAccessType(nsInfo.getAccessType());
          }
        }
        if (javaType.isSetXmlInlineBinaryData()) {
          info.setInlineBinaryData(javaType.isXmlInlineBinaryData());
        }
        if (javaType.isSetXmlTransient()) {
          info.setXmlTransient(javaType.isXmlTransient());
        }
        if (javaType.getXmlRootElement() != null) {
          info.setXmlRootElement(javaType.getXmlRootElement());
        }
        if (javaType.getXmlSeeAlso() != null && javaType.getXmlSeeAlso().size() > 0) {
          info.setXmlSeeAlso(javaType.getXmlSeeAlso());
        }
        if (javaType.getXmlType() != null) {
          info.setXmlType(javaType.getXmlType());
        }
        if (javaType.getXmlCustomizer() != null) {
          info.setXmlCustomizer(javaType.getXmlCustomizer());
        }
      }
    }
    if (xmlBindings.getXmlJavaTypeAdapters() != null) {
      Map<String,TypeInfo> typeInfos=aProcessor.getTypeInfosForPackage(packageName);
      for (      TypeInfo tInfo : typeInfos.values()) {
        List<XmlJavaTypeAdapter> adapters=xmlBindings.getXmlJavaTypeAdapters().getXmlJavaTypeAdapter();
        for (        XmlJavaTypeAdapter xja : adapters) {
          JavaClass adapterClass=jModelInput.getJavaModel().getClass(xja.getValue());
          JavaClass boundType=jModelInput.getJavaModel().getClass(xja.getType());
          if (boundType != null) {
            tInfo.addPackageLevelAdapterClass(adapterClass,boundType);
          }
        }
      }
    }
    javaClasses=annotationsProcessor.postBuildTypeInfo(javaClasses);
    annotationsProcessor.processJavaClasses(javaClasses);
    Map<String,TypeInfo> typeInfosForPackage=annotationsProcessor.getTypeInfosForPackage(packageName);
    for (    String key : typeInfosForPackage.keySet()) {
      TypeInfo tInfo=typeInfosForPackage.get(key);
      if (tInfo.isEnumerationType()) {
        EnumTypeInfo etInfo=(EnumTypeInfo)tInfo;
        XmlEnum xmlEnum=xmlEnumMap.get(etInfo.getClassName());
        if (xmlEnum != null) {
          JavaClass restrictionClass=aProcessor.getHelper().getJavaClass(xmlEnum.getValue());
          if (restrictionClass == null) {
            restrictionClass=jModelInput.getJavaModel().getClass(String.class);
          }
          etInfo.setRestrictionBase(aProcessor.getSchemaTypeFor(restrictionClass));
          for (          XmlEnumValue xmlEnumValue : xmlEnum.getXmlEnumValue()) {
            etInfo.addJavaFieldToXmlEnumValuePair(true,xmlEnumValue.getJavaEnumValue(),xmlEnumValue.getValue());
          }
        }
      }
    }
    jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        processJavaType(javaType,typeInfosForPackage.get(javaType.getName()),nsInfo);
      }
    }
    pkgToClassMap.remove(packageName);
  }
  Iterator<ArrayList<JavaClass>> classIt=pkgToClassMap.values().iterator();
  while (classIt.hasNext()) {
    ArrayList<JavaClass> jClassList=classIt.next();
    JavaClass[] jClassArray=(JavaClass[])jClassList.toArray(new JavaClass[jClassList.size()]);
    annotationsProcessor.buildNewTypeInfo(jClassArray);
    annotationsProcessor.processJavaClasses(jClassArray);
  }
  Map<String,TypeInfo> typeInfos=(Map<String,TypeInfo>)aProcessor.getTypeInfo().clone();
  for (  String key : typeInfos.keySet()) {
    JavaClass[] jClassArray;
    TypeInfo tInfo=typeInfos.get(key);
    for (    Property prop : tInfo.getPropertyList()) {
      if (prop.isSetXmlJavaTypeAdapter()) {
        jClassArray=new JavaClass[]{prop.getActualType()};
        aProcessor.buildNewTypeInfo(jClassArray);
      }
    }
  }
  aProcessor.finalizeProperties();
  aProcessor.createElementsForTypeMappingInfo();
}","/** 
 * Process XmlBindings on a per package basis for a given AnnotationsPorcessor instance.
 * @param annotationsProcessor
 */
public void processXML(AnnotationsProcessor annotationsProcessor,JavaModelInput jModelInput,TypeMappingInfo[] typeMappingInfos,JavaClass[] originalJavaClasses){
  this.jModelInput=jModelInput;
  this.aProcessor=annotationsProcessor;
  Map<String,XmlEnum> xmlEnumMap=new HashMap<String,XmlEnum>();
  annotationsProcessor.init(originalJavaClasses,typeMappingInfos);
  Map<String,ArrayList<JavaClass>> pkgToClassMap=buildPackageToJavaClassMap();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    NamespaceInfo nsInfo=processXmlSchema(xmlBindings,packageName);
    if (nsInfo != null) {
      annotationsProcessor.addPackageToNamespaceMapping(packageName,nsInfo);
    }
    XmlRegistries xmlRegs=xmlBindings.getXmlRegistries();
    if (xmlRegs != null) {
      for (      XmlRegistry xmlReg : xmlRegs.getXmlRegistry()) {
        aProcessor.addXmlRegistry(xmlReg.getName(),xmlReg);
      }
    }
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    XmlEnums xmlEnums=xmlBindings.getXmlEnums();
    if (xmlEnums != null) {
      for (      XmlEnum xmlEnum : xmlEnums.getXmlEnum()) {
        xmlEnumMap.put(xmlEnum.getJavaEnum(),xmlEnum);
      }
    }
    Map<String,TypeInfo> typeInfoMap=annotationsProcessor.preBuildTypeInfo(javaClasses);
    List<XmlSchemaType> xmlSchemaTypes=null;
    XmlSchemaTypes sTypes=xmlBindings.getXmlSchemaTypes();
    if (sTypes != null) {
      xmlSchemaTypes=sTypes.getXmlSchemaType();
    }
 else {
      xmlSchemaTypes=new ArrayList<XmlSchemaType>();
    }
    if (xmlBindings.getXmlSchemaType() != null) {
      xmlSchemaTypes.add(xmlBindings.getXmlSchemaType());
    }
    for (    XmlSchemaType sType : xmlSchemaTypes) {
      JavaClass jClass=aProcessor.getHelper().getJavaClass(sType.getType());
      if (jClass != null) {
        aProcessor.processSchemaType(sType.getName(),sType.getNamespace(),jClass.getQualifiedName());
      }
    }
    nsInfo=annotationsProcessor.getPackageToNamespaceMappings().get(packageName);
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo info=typeInfoMap.get(javaType.getName());
        if (javaType.getXmlJavaTypeAdapter() != null) {
          info.setXmlJavaTypeAdapter(javaType.getXmlJavaTypeAdapter());
        }
        if (javaType.isSetXmlAccessorOrder()) {
          info.setXmlAccessOrder(javaType.getXmlAccessorOrder());
        }
 else         if (!info.isSetXmlAccessOrder()) {
          if (xmlBindings.isSetXmlAccessorOrder()) {
            info.setXmlAccessOrder(xmlBindings.getXmlAccessorOrder());
          }
 else {
            info.setXmlAccessOrder(nsInfo.getAccessOrder());
          }
        }
        if (javaType.isSetXmlAccessorType()) {
          info.setXmlAccessType(javaType.getXmlAccessorType());
        }
 else         if (!info.isSetXmlAccessType()) {
          if (xmlBindings.isSetXmlAccessorType()) {
            info.setXmlAccessType(xmlBindings.getXmlAccessorType());
          }
 else {
            info.setXmlAccessType(nsInfo.getAccessType());
          }
        }
        if (javaType.isSetXmlInlineBinaryData()) {
          info.setInlineBinaryData(javaType.isXmlInlineBinaryData());
        }
        if (javaType.isSetXmlTransient()) {
          info.setXmlTransient(javaType.isXmlTransient());
        }
        if (javaType.getXmlRootElement() != null) {
          info.setXmlRootElement(javaType.getXmlRootElement());
        }
        if (javaType.getXmlSeeAlso() != null && javaType.getXmlSeeAlso().size() > 0) {
          info.setXmlSeeAlso(javaType.getXmlSeeAlso());
        }
        if (javaType.getXmlType() != null) {
          info.setXmlType(javaType.getXmlType());
        }
        if (javaType.getXmlCustomizer() != null) {
          info.setXmlCustomizer(javaType.getXmlCustomizer());
        }
      }
    }
    if (xmlBindings.getXmlJavaTypeAdapters() != null) {
      Map<String,TypeInfo> typeInfos=aProcessor.getTypeInfosForPackage(packageName);
      for (      TypeInfo tInfo : typeInfos.values()) {
        List<XmlJavaTypeAdapter> adapters=xmlBindings.getXmlJavaTypeAdapters().getXmlJavaTypeAdapter();
        for (        XmlJavaTypeAdapter xja : adapters) {
          JavaClass adapterClass=jModelInput.getJavaModel().getClass(xja.getValue());
          JavaClass boundType=jModelInput.getJavaModel().getClass(xja.getType());
          if (boundType != null) {
            tInfo.addPackageLevelAdapterClass(adapterClass,boundType);
          }
        }
      }
    }
    javaClasses=annotationsProcessor.postBuildTypeInfo(javaClasses);
    annotationsProcessor.processJavaClasses(javaClasses);
    Map<String,TypeInfo> typeInfosForPackage=annotationsProcessor.getTypeInfosForPackage(packageName);
    for (    Entry<String,TypeInfo> entry : typeInfosForPackage.entrySet()) {
      TypeInfo tInfo=entry.getValue();
      if (tInfo.isEnumerationType()) {
        EnumTypeInfo etInfo=(EnumTypeInfo)tInfo;
        XmlEnum xmlEnum=xmlEnumMap.get(etInfo.getClassName());
        if (xmlEnum != null) {
          JavaClass restrictionClass=aProcessor.getHelper().getJavaClass(xmlEnum.getValue());
          if (restrictionClass == null) {
            restrictionClass=jModelInput.getJavaModel().getClass(String.class);
          }
          etInfo.setRestrictionBase(aProcessor.getSchemaTypeFor(restrictionClass));
          for (          XmlEnumValue xmlEnumValue : xmlEnum.getXmlEnumValue()) {
            etInfo.addJavaFieldToXmlEnumValuePair(true,xmlEnumValue.getJavaEnumValue(),xmlEnumValue.getValue());
          }
        }
      }
    }
    jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        processJavaType(javaType,typeInfosForPackage.get(javaType.getName()),nsInfo);
      }
    }
    pkgToClassMap.remove(packageName);
  }
  Iterator<ArrayList<JavaClass>> classIt=pkgToClassMap.values().iterator();
  while (classIt.hasNext()) {
    ArrayList<JavaClass> jClassList=classIt.next();
    JavaClass[] jClassArray=(JavaClass[])jClassList.toArray(new JavaClass[jClassList.size()]);
    annotationsProcessor.buildNewTypeInfo(jClassArray);
    annotationsProcessor.processJavaClasses(jClassArray);
  }
  Map<String,TypeInfo> typeInfos=(Map<String,TypeInfo>)aProcessor.getTypeInfo().clone();
  for (  String key : typeInfos.keySet()) {
    JavaClass[] jClassArray;
    TypeInfo tInfo=typeInfos.get(key);
    for (    Property prop : tInfo.getPropertyList()) {
      if (prop.isSetXmlJavaTypeAdapter()) {
        jClassArray=new JavaClass[]{prop.getActualType()};
        aProcessor.buildNewTypeInfo(jClassArray);
      }
    }
  }
  aProcessor.finalizeProperties();
  aProcessor.createElementsForTypeMappingInfo();
}"
66540,"public Schema getSchema(){
  return saxParserFactory.getSchema();
}","public Schema getSchema(){
  Schema schema=null;
  try {
    schema=saxParserFactory.getSchema();
  }
 catch (  UnsupportedOperationException ex) {
  }
  return schema;
}"
66541,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  String c_id=null;
  byte[] bytes=null;
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  marshalRecord.closeStartGroupingElements(groupingFragment);
  if (!xPathFragment.isSelfFragment) {
    marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    marshalRecord.closeStartElement();
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      marshalRecord.characters(value);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
        marshalRecord.characters(value);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      String value=XMLConstants.EMPTY_STRING;
      if ((objectValue.getClass() == ClassConstants.ABYTE) || (objectValue.getClass() == ClassConstants.APBYTE)) {
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  String c_id=null;
  byte[] bytes=null;
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  marshalRecord.closeStartGroupingElements(groupingFragment);
  if (!xPathFragment.isSelfFragment) {
    marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    marshalRecord.closeStartElement();
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      marshalRecord.characters(value);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
        marshalRecord.characters(value);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      String value=XMLConstants.EMPTY_STRING;
      if ((objectValue.getClass() == ClassConstants.ABYTE) || (objectValue.getClass() == ClassConstants.APBYTE)) {
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
66542,"public void writeSingleValue(Object attributeValue,Object parent,XMLRecord record,AbstractSession session){
  XMLMarshaller marshaller=record.getMarshaller();
  if (getConverter() != null) {
    Converter converter=getConverter();
    if (converter instanceof XMLConverter) {
      attributeValue=((XMLConverter)converter).convertObjectValueToDataValue(attributeValue,session,record.getMarshaller());
    }
 else {
      attributeValue=converter.convertObjectValueToDataValue(attributeValue,session);
    }
  }
  XMLField field=(XMLField)getField();
  if (field.getLastXPathFragment().isAttribute()) {
    if (isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
      try {
        String value=null;
        if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
          value=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)attributeValue);
        }
 else {
          XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
          byte[] bytes=data.getData();
          value=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
        }
        record.put(field,value);
      }
 catch (      ClassCastException cce) {
        throw XMLMarshalException.invalidSwaRefAttribute(getAttributeClassification().getName());
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,record.getMarshaller(),getMimeType(parent));
      String base64Value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).buildBase64StringFromBytes(data.getData());
      record.put(field,base64Value);
    }
  }
  if (record.isXOPPackage() && !isSwaRef() && !shouldInlineBinaryData()) {
    String c_id=XMLConstants.EMPTY_STRING;
    byte[] bytes=null;
    String elementName=field.getLastXPathFragment().getLocalName();
    String namespaceUri=field.getLastXPathFragment().getNamespaceURI();
    if (field.getLastXPathFragment().isSelfFragment()) {
      DOMRecord domRecord=(DOMRecord)record;
      if (domRecord.getDOM().getNodeType() == Node.ELEMENT_NODE) {
        elementName=domRecord.getDOM().getLocalName();
        namespaceUri=domRecord.getDOM().getNamespaceURI();
      }
    }
    if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
      if (getAttributeClassification() == ClassConstants.ABYTE) {
        attributeValue=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(attributeValue,ClassConstants.APBYTE);
      }
      bytes=(byte[])attributeValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.getMimeType(parent),elementName,namespaceUri);
    }
 else     if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)attributeValue,elementName,namespaceUri);
      if (c_id == null) {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
        bytes=data.getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),elementName,namespaceUri);
    }
    if (c_id == null) {
      XMLField textField=null;
      if (field.isSelfField()) {
        textField=new XMLField(XMLConstants.TEXT);
      }
 else {
        textField=new XMLField(field.getXPath() + '/' + XMLConstants.TEXT);
      }
      textField.setNamespaceResolver(field.getNamespaceResolver());
      textField.setSchemaType(field.getSchemaType());
      record.put(textField,bytes);
    }
 else {
      String xpath=this.getXPath();
      String prefix=null;
      boolean prefixAlreadyDefined=false;
      NamespaceResolver resolver=field.getNamespaceResolver();
      if (resolver != null) {
        prefix=resolver.resolveNamespaceURI(XMLConstants.XOP_URL);
      }
      if (prefix == null) {
        prefix=XMLConstants.XOP_PREFIX;
        resolver=new NamespaceResolver();
        resolver.put(prefix,XMLConstants.XOP_URL);
      }
 else {
        prefixAlreadyDefined=true;
      }
      String incxpath=null;
      if (field.isSelfField()) {
        incxpath=prefix + ""String_Node_Str"";
        xpath=(prefix + include);
      }
 else {
        incxpath=xpath + '/' + prefix+ ""String_Node_Str"";
        xpath+=('/' + prefix + include);
      }
      XMLField xpathField=new XMLField(xpath);
      xpathField.setNamespaceResolver(resolver);
      record.put(xpathField,c_id);
      XMLField incField=new XMLField(incxpath);
      incField.setNamespaceResolver(resolver);
      Object obj=record.getIndicatingNoEntry(incField);
      if (!prefixAlreadyDefined && obj != null && obj instanceof DOMRecord) {
        if (((DOMRecord)obj).getDOM().getNodeType() == Node.ELEMENT_NODE) {
          ((Element)((DOMRecord)obj).getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,XMLConstants.XOP_URL);
        }
      }
    }
  }
 else   if (isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    try {
      String c_id=null;
      if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)attributeValue);
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
        byte[] bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
      }
      XMLField textField=new XMLField(field.getXPath() + '/' + XMLConstants.TEXT);
      textField.setNamespaceResolver(field.getNamespaceResolver());
      textField.setSchemaType(field.getSchemaType());
      record.put(textField,c_id);
    }
 catch (    Exception ex) {
    }
  }
 else {
    XMLField textField=null;
    if (field.isSelfField()) {
      textField=new XMLField(XMLConstants.TEXT);
    }
 else {
      textField=new XMLField(field.getXPath() + '/' + XMLConstants.TEXT);
    }
    textField.setNamespaceResolver(field.getNamespaceResolver());
    textField.setSchemaType(field.getSchemaType());
    if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
      record.put(textField,attributeValue);
    }
 else {
      byte[] bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent)).getData();
      record.put(textField,bytes);
    }
  }
}","public void writeSingleValue(Object attributeValue,Object parent,XMLRecord record,AbstractSession session){
  XMLMarshaller marshaller=record.getMarshaller();
  if (getConverter() != null) {
    Converter converter=getConverter();
    if (converter instanceof XMLConverter) {
      attributeValue=((XMLConverter)converter).convertObjectValueToDataValue(attributeValue,session,record.getMarshaller());
    }
 else {
      attributeValue=converter.convertObjectValueToDataValue(attributeValue,session);
    }
  }
  XMLField field=(XMLField)getField();
  if (field.getLastXPathFragment().isAttribute()) {
    if (isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
      try {
        String value=null;
        if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
          value=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)attributeValue);
        }
 else {
          XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
          byte[] bytes=data.getData();
          value=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
        }
        record.put(field,value);
      }
 catch (      ClassCastException cce) {
        throw XMLMarshalException.invalidSwaRefAttribute(getAttributeClassification().getName());
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,record.getMarshaller(),getMimeType(parent));
      String base64Value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).buildBase64StringFromBytes(data.getData());
      record.put(field,base64Value);
    }
    return;
  }
  if (record.isXOPPackage() && !isSwaRef() && !shouldInlineBinaryData()) {
    String c_id=XMLConstants.EMPTY_STRING;
    byte[] bytes=null;
    String elementName=field.getLastXPathFragment().getLocalName();
    String namespaceUri=field.getLastXPathFragment().getNamespaceURI();
    if (field.getLastXPathFragment().isSelfFragment()) {
      DOMRecord domRecord=(DOMRecord)record;
      if (domRecord.getDOM().getNodeType() == Node.ELEMENT_NODE) {
        elementName=domRecord.getDOM().getLocalName();
        namespaceUri=domRecord.getDOM().getNamespaceURI();
      }
    }
    if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
      if (getAttributeClassification() == ClassConstants.ABYTE) {
        attributeValue=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(attributeValue,ClassConstants.APBYTE);
      }
      bytes=(byte[])attributeValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.getMimeType(parent),elementName,namespaceUri);
    }
 else     if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)attributeValue,elementName,namespaceUri);
      if (c_id == null) {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
        bytes=data.getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),elementName,namespaceUri);
    }
    if (c_id == null) {
      XMLField textField=null;
      if (field.isSelfField()) {
        textField=new XMLField(XMLConstants.TEXT);
      }
 else {
        textField=new XMLField(field.getXPath() + '/' + XMLConstants.TEXT);
      }
      textField.setNamespaceResolver(field.getNamespaceResolver());
      textField.setSchemaType(field.getSchemaType());
      record.put(textField,bytes);
    }
 else {
      String xpath=this.getXPath();
      String prefix=null;
      boolean prefixAlreadyDefined=false;
      NamespaceResolver resolver=field.getNamespaceResolver();
      if (resolver != null) {
        prefix=resolver.resolveNamespaceURI(XMLConstants.XOP_URL);
      }
      if (prefix == null) {
        prefix=XMLConstants.XOP_PREFIX;
        resolver=new NamespaceResolver();
        resolver.put(prefix,XMLConstants.XOP_URL);
      }
 else {
        prefixAlreadyDefined=true;
      }
      String incxpath=null;
      if (field.isSelfField()) {
        incxpath=prefix + ""String_Node_Str"";
        xpath=(prefix + include);
      }
 else {
        incxpath=xpath + '/' + prefix+ ""String_Node_Str"";
        xpath+=('/' + prefix + include);
      }
      XMLField xpathField=new XMLField(xpath);
      xpathField.setNamespaceResolver(resolver);
      record.put(xpathField,c_id);
      XMLField incField=new XMLField(incxpath);
      incField.setNamespaceResolver(resolver);
      Object obj=record.getIndicatingNoEntry(incField);
      if (!prefixAlreadyDefined && obj != null && obj instanceof DOMRecord) {
        if (((DOMRecord)obj).getDOM().getNodeType() == Node.ELEMENT_NODE) {
          ((Element)((DOMRecord)obj).getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,XMLConstants.XOP_URL);
        }
      }
    }
  }
 else   if (isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    try {
      String c_id=null;
      if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)attributeValue);
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
        byte[] bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
      }
      XMLField textField=new XMLField(field.getXPath() + '/' + XMLConstants.TEXT);
      textField.setNamespaceResolver(field.getNamespaceResolver());
      textField.setSchemaType(field.getSchemaType());
      record.put(textField,c_id);
    }
 catch (    Exception ex) {
    }
  }
 else {
    XMLField textField=null;
    if (field.isSelfField()) {
      textField=new XMLField(XMLConstants.TEXT);
    }
 else {
      textField=new XMLField(field.getXPath() + '/' + XMLConstants.TEXT);
    }
    textField.setNamespaceResolver(field.getNamespaceResolver());
    textField.setSchemaType(field.getSchemaType());
    if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
      record.put(textField,attributeValue);
    }
 else {
      byte[] bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent)).getData();
      record.put(textField,bytes);
    }
  }
}"
66543,"public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,AbstractSession executionSession){
  Object value=row.get(this.field);
  if (value == null) {
    return value;
  }
  Object fieldValue=null;
  XMLUnmarshaller unmarshaller=((XMLRecord)row).getUnmarshaller();
  if (value instanceof String) {
    if (this.isSwaRef() && (unmarshaller.getAttachmentUnmarshaller() != null)) {
      if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
      }
 else {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
      }
    }
 else     if (!this.isSwaRef()) {
      byte[] bytes=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
      fieldValue=bytes;
    }
  }
 else {
    XMLRecord record=(XMLRecord)value;
    record.setSession(executionSession);
    if ((unmarshaller.getAttachmentUnmarshaller() != null) && unmarshaller.getAttachmentUnmarshaller().isXOPPackage() && !this.isSwaRef()&& !this.shouldInlineBinaryData()) {
      String xpath=XMLConstants.EMPTY_STRING;
      String prefix=null;
      NamespaceResolver descriptorResolver=((XMLDescriptor)getDescriptor()).getNamespaceResolver();
      if (descriptorResolver != null) {
        prefix=descriptorResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
      }
      if (prefix == null) {
        prefix=XMLConstants.XOP_PREFIX;
      }
      NamespaceResolver tempResolver=new NamespaceResolver();
      tempResolver.put(prefix,XMLConstants.XOP_URL);
      xpath=prefix + include;
      XMLField field=new XMLField(xpath);
      field.setNamespaceResolver(tempResolver);
      String includeValue=(String)record.get(field);
      if (includeValue != null) {
        if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray(includeValue);
        }
 else {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(includeValue);
        }
      }
 else {
        fieldValue=record.get(XMLConstants.TEXT);
        fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
      }
    }
 else     if ((unmarshaller.getAttachmentUnmarshaller() != null) && isSwaRef()) {
      String refValue=(String)record.get(XMLConstants.TEXT);
      if (refValue != null) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(refValue);
      }
    }
 else {
      fieldValue=record.get(XMLConstants.TEXT);
      if (fieldValue != null) {
        fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
      }
 else {
        fieldValue=new byte[0];
      }
    }
  }
  Object attributeValue=fieldValue;
  if (getConverter() != null) {
    if (getConverter() instanceof XMLConverter) {
      attributeValue=((XMLConverter)getConverter()).convertDataValueToObjectValue(fieldValue,executionSession,unmarshaller);
    }
 else {
      attributeValue=getConverter().convertDataValueToObjectValue(fieldValue,executionSession);
    }
  }
  attributeValue=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(attributeValue,getAttributeClassification(),executionSession);
  return attributeValue;
}","public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,AbstractSession executionSession){
  Object value=row.get(this.field);
  if (value == null) {
    return value;
  }
  Object fieldValue=null;
  XMLUnmarshaller unmarshaller=((XMLRecord)row).getUnmarshaller();
  if (value instanceof String) {
    if (this.isSwaRef() && (unmarshaller.getAttachmentUnmarshaller() != null)) {
      if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
      }
 else {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
      }
    }
 else     if (!this.isSwaRef()) {
      byte[] bytes=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
      fieldValue=bytes;
    }
  }
 else   if (value instanceof byte[] || value instanceof Byte[]) {
    fieldValue=value;
  }
 else {
    XMLRecord record=(XMLRecord)value;
    record.setSession(executionSession);
    if ((unmarshaller.getAttachmentUnmarshaller() != null) && unmarshaller.getAttachmentUnmarshaller().isXOPPackage() && !this.isSwaRef()&& !this.shouldInlineBinaryData()) {
      String xpath=XMLConstants.EMPTY_STRING;
      String prefix=null;
      NamespaceResolver descriptorResolver=((XMLDescriptor)getDescriptor()).getNamespaceResolver();
      if (descriptorResolver != null) {
        prefix=descriptorResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
      }
      if (prefix == null) {
        prefix=XMLConstants.XOP_PREFIX;
      }
      NamespaceResolver tempResolver=new NamespaceResolver();
      tempResolver.put(prefix,XMLConstants.XOP_URL);
      xpath=prefix + include;
      XMLField field=new XMLField(xpath);
      field.setNamespaceResolver(tempResolver);
      String includeValue=(String)record.get(field);
      if (includeValue != null) {
        if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray(includeValue);
        }
 else {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(includeValue);
        }
      }
 else {
        fieldValue=record.get(XMLConstants.TEXT);
        fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
      }
    }
 else     if ((unmarshaller.getAttachmentUnmarshaller() != null) && isSwaRef()) {
      String refValue=(String)record.get(XMLConstants.TEXT);
      if (refValue != null) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(refValue);
      }
    }
 else {
      fieldValue=record.get(XMLConstants.TEXT);
      if (fieldValue != null) {
        fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
      }
 else {
        fieldValue=new byte[0];
      }
    }
  }
  Object attributeValue=fieldValue;
  if (getConverter() != null) {
    if (getConverter() instanceof XMLConverter) {
      attributeValue=((XMLConverter)getConverter()).convertDataValueToObjectValue(fieldValue,executionSession,unmarshaller);
    }
 else {
      attributeValue=getConverter().convertDataValueToObjectValue(fieldValue,executionSession);
    }
  }
  attributeValue=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(attributeValue,getAttributeClassification(),executionSession);
  return attributeValue;
}"
66544,"/** 
 * INTERNAL: Register a ReferenceResolver as an event listener on the session,  if one doesn't already exist.  Each source/target field will have a namespace resolver set as well. 
 * @see org.eclipse.persistence.internal.oxm.ReferenceResolver
 * @see org.eclipse.persistence.oxm.NamespaceResolver
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (getReferenceClass() == null) {
    setReferenceClass(session.getDatasourcePlatform().getConversionManager().convertClassNameToClass(getReferenceClassName()));
  }
  super.initialize(session);
  ReferenceListener listener=new ReferenceListener();
  if (!(session.getEventManager().getListeners().contains(listener))) {
    session.getEventManager().addListener(listener);
  }
  XMLDescriptor descriptor=(XMLDescriptor)this.getDescriptor();
  XMLDescriptor targetDescriptor=(XMLDescriptor)getReferenceDescriptor();
  for (int index=0; index < sourceToTargetKeys.size(); index++) {
    XMLField sourceField=(XMLField)sourceToTargetKeys.get(index);
    XMLField targetField=(XMLField)sourceToTargetKeyFieldAssociations.remove(sourceField);
    sourceField=(XMLField)descriptor.buildField(sourceField);
    sourceToTargetKeys.set(index,sourceField);
    targetField=(XMLField)targetDescriptor.buildField(targetField);
    sourceToTargetKeyFieldAssociations.put(sourceField,targetField);
  }
  if (this.inverseReferenceMapping != null) {
    if (null != this.inverseReferenceMapping.getAttributeAccessor()) {
      this.inverseReferenceMapping.getAttributeAccessor().initializeAttributes(this.referenceClass);
    }
  }
}","/** 
 * INTERNAL: Register a ReferenceResolver as an event listener on the session,  if one doesn't already exist.  Each source/target field will have a namespace resolver set as well. 
 * @see org.eclipse.persistence.internal.oxm.ReferenceResolver
 * @see org.eclipse.persistence.oxm.NamespaceResolver
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (getReferenceClass() == null) {
    if (getReferenceClassName() == null) {
      throw DescriptorException.referenceClassNotSpecified(this);
    }
    setReferenceClass(session.getDatasourcePlatform().getConversionManager().convertClassNameToClass(getReferenceClassName()));
  }
  super.initialize(session);
  ReferenceListener listener=new ReferenceListener();
  if (!(session.getEventManager().getListeners().contains(listener))) {
    session.getEventManager().addListener(listener);
  }
  XMLDescriptor descriptor=(XMLDescriptor)this.getDescriptor();
  XMLDescriptor targetDescriptor=(XMLDescriptor)getReferenceDescriptor();
  for (int index=0; index < sourceToTargetKeys.size(); index++) {
    XMLField sourceField=(XMLField)sourceToTargetKeys.get(index);
    XMLField targetField=(XMLField)sourceToTargetKeyFieldAssociations.remove(sourceField);
    sourceField=(XMLField)descriptor.buildField(sourceField);
    sourceToTargetKeys.set(index,sourceField);
    targetField=(XMLField)targetDescriptor.buildField(targetField);
    sourceToTargetKeyFieldAssociations.put(sourceField,targetField);
  }
  if (this.inverseReferenceMapping != null) {
    if (null != this.inverseReferenceMapping.getAttributeAccessor()) {
      this.inverseReferenceMapping.getAttributeAccessor().initializeAttributes(this.referenceClass);
    }
  }
}"
66545,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(SingleAttributeKeyTestCases.class);
  suite.addTestSuite(SingleElementKeyTestCases.class);
  suite.addTestSuite(SingleElementKeyWithGroupingTestCases.class);
  suite.addTestSuite(SingleElementKeyUsingMapTestCases.class);
  suite.addTestSuite(NonStringKeyTypeTestCases.class);
  suite.addTestSuite(NestedAttributeKeyTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(SingleAttributeKeyTestCases.class);
  suite.addTestSuite(SingleElementKeyTestCases.class);
  suite.addTestSuite(SingleElementKeyWithGroupingTestCases.class);
  suite.addTestSuite(SingleElementKeyUsingMapTestCases.class);
  suite.addTestSuite(NonStringKeyTypeTestCases.class);
  suite.addTestSuite(NestedAttributeKeyTestCases.class);
  suite.addTestSuite(SingleElementNullReferenceClassTestCases.class);
  return suite;
}"
66546,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(SingleAttributeEmptyKeyTestCases.class);
  suite.addTestSuite(SingleAttributeInvalidKeyTestCases.class);
  suite.addTestSuite(SingleAttributeNullKeyTestCases.class);
  suite.addTestSuite(SingleAttributeKeyTestCases.class);
  suite.addTestSuite(SingleElementEmptyKeyTestCases.class);
  suite.addTestSuite(SingleElementInvalidKeyTestCases.class);
  suite.addTestSuite(SingleElementNullKeyTestCases.class);
  suite.addTestSuite(SingleElementKeyTestCases.class);
  suite.addTestSuite(NonStringKeyTypeTestCases.class);
  suite.addTestSuite(MultipleSourceTestCases.class);
  suite.addTestSuite(NestedAttributeKeyTestCases.class);
  suite.addTestSuite(MultithreadedTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(SingleAttributeEmptyKeyTestCases.class);
  suite.addTestSuite(SingleAttributeInvalidKeyTestCases.class);
  suite.addTestSuite(SingleAttributeNullKeyTestCases.class);
  suite.addTestSuite(SingleAttributeKeyTestCases.class);
  suite.addTestSuite(SingleElementEmptyKeyTestCases.class);
  suite.addTestSuite(SingleElementInvalidKeyTestCases.class);
  suite.addTestSuite(SingleElementNullKeyTestCases.class);
  suite.addTestSuite(SingleElementKeyTestCases.class);
  suite.addTestSuite(NonStringKeyTypeTestCases.class);
  suite.addTestSuite(MultipleSourceTestCases.class);
  suite.addTestSuite(NestedAttributeKeyTestCases.class);
  suite.addTestSuite(MultithreadedTestCases.class);
  suite.addTestSuite(SingleElementNullReferenceClassTestCases.class);
  return suite;
}"
66547,"public XMLContext getXMLContext(){
  return this.xmlContext;
}","/** 
 * Return the XMLContext associated with this JAXBContext. 
 */
public XMLContext getXMLContext(){
  return this.xmlContext;
}"
66548,"public void setQNamesToDeclaredClasses(HashMap<QName,Class> nameToDeclaredClasses){
  qNamesToDeclaredClasses=nameToDeclaredClasses;
}","/** 
 * INTERNAL: Set the map of which QName corresponds to which declared class.
 */
public void setQNamesToDeclaredClasses(HashMap<QName,Class> nameToDeclaredClasses){
  qNamesToDeclaredClasses=nameToDeclaredClasses;
}"
66549,"public JAXBContext(XMLContext context,Generator generator,TypeMappingInfo[] boundTypes){
  this(context);
  this.generator=generator;
  this.qNameToGeneratedClasses=generator.getMappingsGenerator().getQNamesToGeneratedClasses();
  this.classToGeneratedClasses=generator.getMappingsGenerator().getClassToGeneratedClasses();
  this.qNamesToDeclaredClasses=generator.getMappingsGenerator().getQNamesToDeclaredClasses();
  this.typeMappingInfoToGeneratedType=generator.getAnnotationsProcessor().getTypeMappingInfoToGeneratedClasses();
  this.setTypeMappingInfoToJavaTypeAdapaters(createAdaptersForAdapterClasses(generator.getAnnotationsProcessor().getTypeMappingInfoToAdapterClasses()));
  this.boundTypes=boundTypes;
}","/** 
 * Create a JAXBContext.  The XMLContext contains the metadata about the  Object to XML mappings.
 */
public JAXBContext(XMLContext context,Generator generator,TypeMappingInfo[] boundTypes){
  this(context);
  this.generator=generator;
  this.qNameToGeneratedClasses=generator.getMappingsGenerator().getQNamesToGeneratedClasses();
  this.classToGeneratedClasses=generator.getMappingsGenerator().getClassToGeneratedClasses();
  this.qNamesToDeclaredClasses=generator.getMappingsGenerator().getQNamesToDeclaredClasses();
  this.typeMappingInfoToGeneratedType=generator.getAnnotationsProcessor().getTypeMappingInfoToGeneratedClasses();
  this.setTypeMappingInfoToJavaTypeAdapaters(createAdaptersForAdapterClasses(generator.getAnnotationsProcessor().getTypeMappingInfoToAdapterClasses()));
  this.boundTypes=boundTypes;
}"
66550,"public HashMap<QName,Class> getQNamesToDeclaredClasses(){
  return qNamesToDeclaredClasses;
}","/** 
 * INTERNAL: Get the map of which QName corresponds to which declared class.
 */
public HashMap<QName,Class> getQNamesToDeclaredClasses(){
  return qNamesToDeclaredClasses;
}"
66551,"public HashMap<java.lang.reflect.Type,QName> getTypeToSchemaType(){
  if (typeToSchemaType == null) {
    initTypeToSchemaType();
  }
  return typeToSchemaType;
}","/** 
 * INTERNAL: Get the map of which Type corresponds to which QName. The keys should be all the boundTypes used to create the JAXBContext. If the JAXBContext was not created with the constructor that takes a Type[] then  this Map will be empty.
 */
public HashMap<java.lang.reflect.Type,QName> getTypeToSchemaType(){
  if (typeToSchemaType == null) {
    initTypeToSchemaType();
  }
  return typeToSchemaType;
}"
66552,"private QName getSchemaTypeForTypeMappingInfo(Type type){
  QName name=null;
  if (type instanceof Class) {
    name=this.generator.getAnnotationsProcessor().getUserDefinedSchemaTypes().get(((Class)type).getName());
    if (name == null) {
      Class theClass=(Class)type;
      if (type == ClassConstants.ABYTE || type == ClassConstants.APBYTE || type == Image.class || type == Source.class || theClass.getCanonicalName().equals(""String_Node_Str"")) {
        name=XMLConstants.BASE_64_BINARY_QNAME;
      }
 else       if (type == ClassConstants.OBJECT) {
        name=XMLConstants.ANY_TYPE_QNAME;
      }
 else {
        name=(QName)XMLConversionManager.getDefaultJavaTypes().get(type);
      }
    }
  }
  return name;
}","/** 
 * INTERNAL: Get the QName which the given Type corresponds to. Valid types should be all the boundTypes used to create the JAXBContext. If the JAXBContext was not created with the construction that takes a Type[] then  this will be return null.
 */
private QName getSchemaTypeForTypeMappingInfo(Type type){
  QName name=null;
  if (type instanceof Class) {
    name=this.generator.getAnnotationsProcessor().getUserDefinedSchemaTypes().get(((Class)type).getName());
    if (name == null) {
      Class theClass=(Class)type;
      if (type == ClassConstants.ABYTE || type == ClassConstants.APBYTE || type == Image.class || type == Source.class || theClass.getCanonicalName().equals(""String_Node_Str"")) {
        name=XMLConstants.BASE_64_BINARY_QNAME;
      }
 else       if (type == ClassConstants.OBJECT) {
        name=XMLConstants.ANY_TYPE_QNAME;
      }
 else {
        name=(QName)XMLConversionManager.getDefaultJavaTypes().get(type);
      }
    }
  }
  return name;
}"
66553,"public Map<TypeMappingInfo,QName> getTypeMappingInfoToSchemaType(){
  if (typeToTypeMappingInfo != null && typeToTypeMappingInfo.size() > 0) {
    return new HashMap<TypeMappingInfo,QName>();
  }
  return generator.getAnnotationsProcessor().getTypeMappingInfoToSchemaType();
}","/** 
 * INTERNAL: Get the map of which TypeMappingInfo corresponds to which QName. The keys should be all the boundTypes used to create the JAXBContext. If the JAXBContext was not created with the constructor that takes a TypeMappingInfo[]   this Map will be empty.
 */
public Map<TypeMappingInfo,QName> getTypeMappingInfoToSchemaType(){
  if (typeToTypeMappingInfo != null && typeToTypeMappingInfo.size() > 0) {
    return new HashMap<TypeMappingInfo,QName>();
  }
  return generator.getAnnotationsProcessor().getTypeMappingInfoToSchemaType();
}"
66554,"public void setClassToGeneratedClasses(HashMap<String,Class> classToClass){
  this.classToGeneratedClasses=classToClass;
}","/** 
 * INTERNAL: Set the map containing which Class (by name) corresponds to which generated class.
 */
public void setClassToGeneratedClasses(HashMap<String,Class> classToClass){
  this.classToGeneratedClasses=classToClass;
}"
66555,"public JAXBIntrospector createJAXBIntrospector(){
  return new JAXBIntrospector(xmlContext);
}","/** 
 * Creates a JAXBIntrospector object.  The JAXBIntrospector allows the user to  access certain pieces of metadata about an instance of a JAXB bound class.
 */
public JAXBIntrospector createJAXBIntrospector(){
  return new JAXBIntrospector(xmlContext);
}"
66556,"public void initTypeToSchemaType(){
  this.typeToSchemaType=new HashMap<Type,QName>();
  if (typeToTypeMappingInfo == null || typeToTypeMappingInfo.size() == 0) {
    return;
  }
  Iterator descriptors=xmlContext.getSession(0).getProject().getOrderedDescriptors().iterator();
  while (descriptors.hasNext()) {
    XMLDescriptor next=(XMLDescriptor)descriptors.next();
    Class javaClass=next.getJavaClass();
    if (next.getSchemaReference() != null) {
      QName schemaType=next.getSchemaReference().getSchemaContextAsQName(next.getNamespaceResolver());
      Type type=null;
      if (generator != null) {
        type=generator.getAnnotationsProcessor().getGeneratedClassesToCollectionClasses().get(javaClass);
        if (type == null) {
          JavaClass arrayClass=(JavaClass)generator.getAnnotationsProcessor().getGeneratedClassesToArrayClasses().get(javaClass);
          if (arrayClass != null) {
            String arrayClassName=arrayClass.getName();
            try {
              type=PrivilegedAccessHelper.getClassForName(arrayClassName);
            }
 catch (            Exception ex) {
            }
          }
          if (type == null && getTypeMappingInfoToGeneratedType() != null) {
            Iterator<Map.Entry<TypeMappingInfo,Class>> iter=getTypeMappingInfoToGeneratedType().entrySet().iterator();
            while (iter.hasNext()) {
              Map.Entry<TypeMappingInfo,Class> entry=iter.next();
              if (entry.getValue().equals(javaClass)) {
                type=entry.getKey().getType();
                break;
              }
            }
          }
        }
        if (type == null) {
          type=javaClass;
        }
      }
 else {
        type=javaClass;
      }
      this.typeToSchemaType.put(type,schemaType);
    }
  }
  if (boundTypes != null) {
    for (    TypeMappingInfo next : this.boundTypes) {
      if (this.typeToSchemaType.get(next) == null) {
        Type nextType=next.getType();
        QName name=getSchemaTypeForTypeMappingInfo(nextType);
        if (name != null) {
          this.typeToSchemaType.put(nextType,name);
        }
      }
    }
  }
}","/** 
 * INTERNAL: Populate the map of which Type corresponds to which QName. The keys should be all the boundTypes used to create the JAXBContext. If the JAXBContext was not created with the constructor that takes a Type[] then  this Map will be empty.
 */
public void initTypeToSchemaType(){
  this.typeToSchemaType=new HashMap<Type,QName>();
  if (typeToTypeMappingInfo == null || typeToTypeMappingInfo.size() == 0) {
    return;
  }
  Iterator descriptors=xmlContext.getSession(0).getProject().getOrderedDescriptors().iterator();
  while (descriptors.hasNext()) {
    XMLDescriptor next=(XMLDescriptor)descriptors.next();
    Class javaClass=next.getJavaClass();
    if (next.getSchemaReference() != null) {
      QName schemaType=next.getSchemaReference().getSchemaContextAsQName(next.getNamespaceResolver());
      Type type=null;
      if (generator != null) {
        type=generator.getAnnotationsProcessor().getGeneratedClassesToCollectionClasses().get(javaClass);
        if (type == null) {
          JavaClass arrayClass=(JavaClass)generator.getAnnotationsProcessor().getGeneratedClassesToArrayClasses().get(javaClass);
          if (arrayClass != null) {
            String arrayClassName=arrayClass.getName();
            try {
              type=PrivilegedAccessHelper.getClassForName(arrayClassName);
            }
 catch (            Exception ex) {
            }
          }
          if (type == null && getTypeMappingInfoToGeneratedType() != null) {
            Iterator<Map.Entry<TypeMappingInfo,Class>> iter=getTypeMappingInfoToGeneratedType().entrySet().iterator();
            while (iter.hasNext()) {
              Map.Entry<TypeMappingInfo,Class> entry=iter.next();
              if (entry.getValue().equals(javaClass)) {
                type=entry.getKey().getType();
                break;
              }
            }
          }
        }
        if (type == null) {
          type=javaClass;
        }
      }
 else {
        type=javaClass;
      }
      this.typeToSchemaType.put(type,schemaType);
    }
  }
  if (boundTypes != null) {
    for (    TypeMappingInfo next : this.boundTypes) {
      if (this.typeToSchemaType.get(next) == null) {
        Type nextType=next.getType();
        QName name=getSchemaTypeForTypeMappingInfo(nextType);
        if (name != null) {
          this.typeToSchemaType.put(nextType,name);
        }
      }
    }
  }
}"
66557,"public void setQNameToGeneratedClasses(HashMap<QName,Class> qNameToClass){
  this.qNameToGeneratedClasses=qNameToClass;
}","/** 
 * INTERNAL: Set the map containing which QName corresponds to which generated class.
 */
public void setQNameToGeneratedClasses(HashMap<QName,Class> qNameToClass){
  this.qNameToGeneratedClasses=qNameToClass;
}"
66558,"public JAXBMarshaller createMarshaller(){
  JAXBMarshaller marshaller=new JAXBMarshaller(xmlContext.createMarshaller(),new JAXBIntrospector(xmlContext));
  if (generator != null && generator.hasMarshalCallbacks()) {
    for (Iterator callIt=generator.getMarshalCallbacks().keySet().iterator(); callIt.hasNext(); ) {
      MarshalCallback cb=(MarshalCallback)generator.getMarshalCallbacks().get(callIt.next());
      cb.initialize(generator.getClass().getClassLoader());
    }
    marshaller.setMarshalCallbacks(generator.getMarshalCallbacks());
  }
  marshaller.setQNameToGeneratedClasses(this.qNameToGeneratedClasses);
  marshaller.setJaxbContext(this);
  return marshaller;
}","/** 
 * Create a JAXBMarshaller.  The JAXBMarshaller is used to convert Java objects to XML.
 */
public JAXBMarshaller createMarshaller(){
  JAXBMarshaller marshaller=new JAXBMarshaller(xmlContext.createMarshaller(),new JAXBIntrospector(xmlContext));
  if (generator != null && generator.hasMarshalCallbacks()) {
    for (Iterator callIt=generator.getMarshalCallbacks().keySet().iterator(); callIt.hasNext(); ) {
      MarshalCallback cb=(MarshalCallback)generator.getMarshalCallbacks().get(callIt.next());
      cb.initialize(generator.getClass().getClassLoader());
    }
    marshaller.setMarshalCallbacks(generator.getMarshalCallbacks());
  }
  marshaller.setQNameToGeneratedClasses(this.qNameToGeneratedClasses);
  marshaller.setJaxbContext(this);
  return marshaller;
}"
66559,"public JAXBUnmarshaller createUnmarshaller(){
  JAXBUnmarshaller unmarshaller=new JAXBUnmarshaller(xmlContext.createUnmarshaller(PARSER_FEATURES));
  if (generator != null && generator.hasUnmarshalCallbacks()) {
    for (Iterator callIt=generator.getUnmarshalCallbacks().keySet().iterator(); callIt.hasNext(); ) {
      UnmarshalCallback cb=(UnmarshalCallback)generator.getUnmarshalCallbacks().get(callIt.next());
      cb.initialize(generator.getClass().getClassLoader());
    }
    unmarshaller.setUnmarshalCallbacks(generator.getUnmarshalCallbacks());
  }
  unmarshaller.setJaxbContext(this);
  return unmarshaller;
}","/** 
 * Create a JAXBUnmarshaller.  The JAXBUnmarshaller is used to convert XML into Java objects.    
 */
public JAXBUnmarshaller createUnmarshaller(){
  JAXBUnmarshaller unmarshaller=new JAXBUnmarshaller(xmlContext.createUnmarshaller(PARSER_FEATURES));
  if (generator != null && generator.hasUnmarshalCallbacks()) {
    for (Iterator callIt=generator.getUnmarshalCallbacks().keySet().iterator(); callIt.hasNext(); ) {
      UnmarshalCallback cb=(UnmarshalCallback)generator.getUnmarshalCallbacks().get(callIt.next());
      cb.initialize(generator.getClass().getClassLoader());
    }
    unmarshaller.setUnmarshalCallbacks(generator.getUnmarshalCallbacks());
  }
  unmarshaller.setJaxbContext(this);
  return unmarshaller;
}"
66560,"/** 
 * ADVANCED: Adjust the OXM metadata to take into accound ORM mapping metadata,
 */
public void applyORMMetadata(AbstractSession ormSession){
  this.xmlContext.applyORMMetadata(ormSession);
}","/** 
 * ADVANCED: Adjust the OXM metadata to take into accound ORM mapping metadata
 */
public void applyORMMetadata(AbstractSession ormSession){
  this.xmlContext.applyORMMetadata(ormSession);
}"
66561,"public <T>JAXBBinder createBinder(Class<T> nodeClass){
  if (nodeClass.getName().equals(""String_Node_Str"")) {
    return new JAXBBinder(this.xmlContext);
  }
 else {
    throw new UnsupportedOperationException(JAXBException.unsupportedNodeClass(nodeClass.getName()));
  }
}","/** 
 * Create a JAXBBinder.  The JAXBBinder is used to preserve unmapped XML Data.
 * @param nodeClass The DOM Node class to use     
 */
public <T>JAXBBinder createBinder(Class<T> nodeClass){
  if (nodeClass.getName().equals(""String_Node_Str"")) {
    return new JAXBBinder(this.xmlContext);
  }
 else {
    throw new UnsupportedOperationException(JAXBException.unsupportedNodeClass(nodeClass.getName()));
  }
}"
66562,"public Map<String,Class> getArrayClassesToGeneratedClasses(){
  return generator.getAnnotationsProcessor().getArrayClassesToGeneratedClasses();
}","/** 
 * INTERNAL: Get the map for which array class (by name) corresponds to which generated class
 */
public Map<String,Class> getArrayClassesToGeneratedClasses(){
  return generator.getAnnotationsProcessor().getArrayClassesToGeneratedClasses();
}"
66563,"public JAXBValidator createValidator(){
  return new JAXBValidator(xmlContext.createValidator());
}","/** 
 * Create a JAXBValidator.  The JAXBValidator is used to validate Java objects against an XSD.   
 */
public JAXBValidator createValidator(){
  return new JAXBValidator(xmlContext.createValidator());
}"
66564,"public Map<Type,Class> getCollectionClassesToGeneratedClasses(){
  return generator.getAnnotationsProcessor().getCollectionClassesToGeneratedClasses();
}","/** 
 * INTERNAL: Get the map for which collection class (by Type) corresponds to which generated class
 */
public Map<Type,Class> getCollectionClassesToGeneratedClasses(){
  return generator.getAnnotationsProcessor().getCollectionClassesToGeneratedClasses();
}"
66565,"public HashMap<String,Class> getClassToGeneratedClasses(){
  return classToGeneratedClasses;
}","/** 
 * INTERNAL: Get the map containing which Class (by name) corresponds to which generated class.
 */
public HashMap<String,Class> getClassToGeneratedClasses(){
  return classToGeneratedClasses;
}"
66566,"public void testCreateEntityManagerFactory2(){
  EntityManagerFactory emf=null;
  PersistenceProvider provider=new PersistenceProvider();
  try {
    try {
      emf=provider.createEntityManagerFactory(""String_Node_Str"",null);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    assertNull(emf);
    try {
      emf=Persistence.createEntityManagerFactory(""String_Node_Str"");
      fail(""String_Node_Str"");
    }
 catch (    Exception e) {
      assertTrue(""String_Node_Str"",e instanceof PersistenceException);
    }
  }
  finally {
    if (emf != null) {
      emf.close();
    }
  }
}","public void testCreateEntityManagerFactory2(){
  if (getServerSession().getServerPlatform() != null && getServerSession().getServerPlatform() instanceof WebSphere_7_Platform) {
    warning(""String_Node_Str"");
    return;
  }
  EntityManagerFactory emf=null;
  PersistenceProvider provider=new PersistenceProvider();
  try {
    try {
      emf=provider.createEntityManagerFactory(""String_Node_Str"",null);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    assertNull(emf);
    try {
      emf=Persistence.createEntityManagerFactory(""String_Node_Str"");
      fail(""String_Node_Str"");
    }
 catch (    Exception e) {
      assertTrue(""String_Node_Str"",e instanceof PersistenceException);
    }
  }
  finally {
    if (emf != null) {
      emf.close();
    }
  }
}"
66567,"/** 
 * This exception should be used when XmlElements and XmlIDREF are set on a property,  but one or more of the XmlElement entries in the list has a type that does not  have an XmlID property.
 * @param propertyName
 * @param typeName
 * @param elementName
 * @return
 */
public static JAXBException invalidXmlElementInXmlElementsList(String propertyName,String elementName){
  Object[] args={propertyName,elementName};
  JAXBException exception=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,INVALID_XMLELEMENT_IN_XMLELEMENTS,args));
  exception.setErrorCode(INVALID_XMLELEMENT_IN_XMLELEMENTS);
  return exception;
}","/** 
 * This exception should be used when XmlElements and XmlIDREF are set on a property,  but one or more of the XmlElement entries in the list has a type that does not  have an XmlID property.
 * @param propertyName 
 * @param elementName
 * @return
 */
public static JAXBException invalidXmlElementInXmlElementsList(String propertyName,String elementName){
  Object[] args={propertyName,elementName};
  JAXBException exception=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,INVALID_XMLELEMENT_IN_XMLELEMENTS,args));
  exception.setErrorCode(INVALID_XMLELEMENT_IN_XMLELEMENTS);
  return exception;
}"
66568,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DatahandlerWithAnnotationsTestCases.class);
  suite.addTestSuite(DatahandlerWithXMLTestCases.class);
  suite.addTestSuite(DuplicateListOfStringsTestCases.class);
  suite.addTestSuite(DuplicateListOfStringsTestCasesWithXML.class);
  suite.addTestSuite(MapStringIntegerTestCases.class);
  suite.addTestSuite(ConflictingQNamesTestCases.class);
  suite.addTestSuite(MultipleMapTestCases.class);
  suite.addTestSuite(MultipleMapWithBindingsTestCases.class);
  suite.addTestSuite(ImageTestCases.class);
  suite.addTestSuite(JavaTypeAdapterListToStringTestCases.class);
  suite.addTestSuite(JavaTypeAdapterStringToListTestCases.class);
  suite.addTestSuite(JavaTypeAdapterMapToEmpTestCases.class);
  suite.addTestSuite(JavaTypeAdapterMapTypeTestCases.class);
  suite.addTestSuite(IntegerArrayTestCases.class);
  suite.addTestSuite(ListOfDataHandlerTestCases.class);
  suite.addTestSuite(ListOfByteArrayTestCases.class);
  suite.addTestSuite(ListOfByteObjectArrayTestCases.class);
  suite.addTestSuite(EmployeeTestCases.class);
  suite.addTestSuite(RootFromAnnotationTestCases.class);
  suite.addTestSuite(RootFromNothingTestCases.class);
  suite.addTestSuite(RootFromJAXBElementTestCases.class);
  suite.addTestSuite(RootFromTypeMappingInfoTestCases.class);
  suite.addTestSuite(RootLevelByteArrayTestCases.class);
  suite.addTestSuite(DefaultTargetNamespaceTestCases.class);
  suite.addTestSuite(GenericArrayTypeTestCases.class);
  suite.addTest(TypeMappingInfoCollisionsTestSuite.suite());
  suite.addTestSuite(ClassLoaderTestCases.class);
  suite.addTestSuite(EmptyClassTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DatahandlerWithAnnotationsTestCases.class);
  suite.addTestSuite(DatahandlerWithXMLTestCases.class);
  suite.addTestSuite(DuplicateListOfStringsTestCases.class);
  suite.addTestSuite(DuplicateListOfStringsTestCasesWithXML.class);
  suite.addTestSuite(MapStringIntegerTestCases.class);
  suite.addTestSuite(ConflictingQNamesTestCases.class);
  suite.addTestSuite(MultipleMapTestCases.class);
  suite.addTestSuite(MultipleMapWithBindingsTestCases.class);
  suite.addTestSuite(ImageTestCases.class);
  suite.addTestSuite(JavaTypeAdapterListToStringTestCases.class);
  suite.addTestSuite(JavaTypeAdapterStringToListTestCases.class);
  suite.addTestSuite(JavaTypeAdapterMapToEmpTestCases.class);
  suite.addTestSuite(JavaTypeAdapterMapTypeTestCases.class);
  suite.addTestSuite(IntegerArrayTestCases.class);
  suite.addTestSuite(ListOfDataHandlerTestCases.class);
  suite.addTestSuite(ListOfByteArrayTestCases.class);
  suite.addTestSuite(ListOfByteObjectArrayTestCases.class);
  suite.addTestSuite(EmployeeTestCases.class);
  suite.addTestSuite(RootFromAnnotationTestCases.class);
  suite.addTestSuite(RootFromNothingTestCases.class);
  suite.addTestSuite(RootFromJAXBElementTestCases.class);
  suite.addTestSuite(RootFromTypeMappingInfoTestCases.class);
  suite.addTestSuite(RootLevelByteArrayTestCases.class);
  suite.addTestSuite(DefaultTargetNamespaceTestCases.class);
  suite.addTestSuite(GenericArrayTypeTestCases.class);
  suite.addTest(TypeMappingInfoCollisionsTestSuite.suite());
  suite.addTestSuite(ClassLoaderTestCases.class);
  suite.addTestSuite(EmptyClassTestCases.class);
  suite.addTestSuite(TypeMappingInfoNullTypeTestCases.class);
  return suite;
}"
66569,"public JaxbClassLoader(ClassLoader nestedClassLoader,TypeMappingInfo[] types){
  this.nestedClassLoader=nestedClassLoader;
  this.generatedClasses=new HashMap();
  if (types != null) {
    for (int i=0; i < types.length; i++) {
      Type nextType=types[i].getType();
      if (nextType instanceof Class) {
        generatedClasses.put(((Class)nextType).getName(),nextType);
      }
    }
  }
}","public JaxbClassLoader(ClassLoader nestedClassLoader,TypeMappingInfo[] types){
  this.nestedClassLoader=nestedClassLoader;
  this.generatedClasses=new HashMap();
  if (types != null) {
    for (int i=0; i < types.length; i++) {
      TypeMappingInfo tmi=types[i];
      Type nextType=tmi.getType();
      if (nextType == null) {
        throw org.eclipse.persistence.exceptions.JAXBException.nullTypeOnTypeMappingInfo(tmi.getXmlTagName());
      }
      if (nextType instanceof Class) {
        generatedClasses.put(((Class)nextType).getName(),nextType);
      }
    }
  }
}"
66570,"/** 
 * INTERNAL: This method will return the key to be used to store/retrieve the delegates for a given application. OC4J classLoader levels:  0 - APP.web (servlet/jsp) or APP.wrapper (ejb) 1 - APP.root (parent for helperContext) 2 - default.root 3 - system.root 4 - oc4j.10.1.3 (remote EJB) or org.eclipse.persistence:11.1.1.0.0 5 - api:1.4.0 6 - jre.extension:0.0.0 7 - jre.bootstrap:1.5.0_07 (with various J2SE versions)
 * @return Application classloader for OC4J, application name for WebLogic, otherwise Thread.currentThread().getContextClassLoader()
 */
private static Object getDelegateMapKey(ClassLoader classLoader){
  String classLoaderName=classLoader.getClass().getName();
  Object delegateKey=classLoader;
  if (classLoaderName.startsWith(OC4J_CLASSLOADER_NAME)) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
    delegateKey=classLoader;
  }
 else   if (classLoaderName.contains(WLS_CLASSLOADER_NAME)) {
    Object executeThread=getExecuteThread();
    if (executeThread != null) {
      try {
        Method getMethod=PrivilegedAccessHelper.getPublicMethod(executeThread.getClass(),WLS_APPLICATION_NAME_GET_METHOD_NAME,PARAMETER_TYPES,false);
        delegateKey=PrivilegedAccessHelper.invokeMethod(getMethod,executeThread);
        if (delegateKey == null) {
          delegateKey=classLoader;
        }
      }
 catch (      Exception e) {
        throw SDOException.errorInvokingWLSMethodReflectively(WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_EXECUTE_THREAD,e);
      }
    }
  }
  return delegateKey;
}","/** 
 * INTERNAL: This method will return the key to be used to store/retrieve the delegates for a given application. OC4J classLoader levels:  0 - APP.web (servlet/jsp) or APP.wrapper (ejb) 1 - APP.root (parent for helperContext) 2 - default.root 3 - system.root 4 - oc4j.10.1.3 (remote EJB) or org.eclipse.persistence:11.1.1.0.0 5 - api:1.4.0 6 - jre.extension:0.0.0 7 - jre.bootstrap:1.5.0_07 (with various J2SE versions)
 * @return Application classloader for OC4J, application name for WebLogic andWebSphere, otherwise Thread.currentThread().getContextClassLoader()
 */
private static Object getDelegateMapKey(ClassLoader classLoader){
  String classLoaderName=classLoader.getClass().getName();
  Object delegateKey=classLoader;
  if (classLoaderName.startsWith(OC4J_CLASSLOADER_NAME)) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
    delegateKey=classLoader;
  }
 else   if (classLoaderName.contains(WLS_CLASSLOADER_NAME)) {
    Object executeThread=getExecuteThread();
    if (executeThread != null) {
      try {
        Method getMethod=PrivilegedAccessHelper.getPublicMethod(executeThread.getClass(),WLS_APPLICATION_NAME_GET_METHOD_NAME,PARAMETER_TYPES,false);
        delegateKey=PrivilegedAccessHelper.invokeMethod(getMethod,executeThread);
        if (delegateKey == null) {
          delegateKey=classLoader;
        }
      }
 catch (      Exception e) {
        throw SDOException.errorInvokingWLSMethodReflectively(WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_EXECUTE_THREAD,e);
      }
    }
  }
 else   if (classLoaderName.contains(WAS_CLASSLOADER_NAME)) {
    delegateKey=getApplicationNameForWAS(classLoader);
    if (delegateKey == null) {
      delegateKey=classLoader;
    }
  }
  return delegateKey;
}"
66571,"/** 
 * Get common properties (including database properties) from System, for unavailable ones, read from test.properties file. The location of properties file can be given by system property <tt>test.properties</tt>. The default location is ""test.properties"" file in current directory. 
 */
@SuppressWarnings(""String_Node_Str"") public static Map<String,String> getDatabaseProperties(){
  if (propertiesMap == null) {
    String dbDriver=System.getProperty(DB_DRIVER_KEY);
    String dbUrl=System.getProperty(DB_URL_KEY);
    String dbUser=System.getProperty(DB_USER_KEY);
    String dbPwd=System.getProperty(DB_PWD_KEY);
    String platform=System.getProperty(DB_PLATFORM_KEY);
    String logLevel=System.getProperty(LOGGING_LEVEL_KEY);
    if ((dbDriver == null) || (dbUrl == null) || (dbUser == null)|| (dbPwd == null)|| (platform == null)|| (logLevel == null)) {
      Properties properties=new Properties();
      File testPropertiesFile=new File(System.getProperty(TEST_PROPERTIES_FILE_KEY,TEST_PROPERTIES_FILE_DEFAULT));
      URL url=null;
      if (testPropertiesFile.exists()) {
        try {
          url=testPropertiesFile.toURL();
        }
 catch (        MalformedURLException exception) {
          throw new RuntimeException(""String_Node_Str"" + testPropertiesFile.getName() + ""String_Node_Str"",exception);
        }
      }
 else {
        url=JUnitTestCaseHelper.class.getResource(""String_Node_Str"" + System.getProperty(TEST_PROPERTIES_FILE_KEY,TEST_PROPERTIES_FILE_DEFAULT));
      }
      if (url != null) {
        try {
          properties.load(url.openStream());
        }
 catch (        java.io.IOException exception) {
          throw new RuntimeException(""String_Node_Str"" + testPropertiesFile.getName() + ""String_Node_Str"",exception);
        }
      }
      if (dbDriver == null) {
        dbDriver=(String)properties.get(""String_Node_Str"");
      }
      if (dbUrl == null) {
        dbUrl=(String)properties.get(""String_Node_Str"");
      }
      if (dbUser == null) {
        dbUser=(String)properties.get(""String_Node_Str"");
      }
      if (dbPwd == null) {
        dbPwd=(String)properties.get(""String_Node_Str"");
      }
      if (platform == null) {
        platform=(String)properties.get(""String_Node_Str"");
      }
      if (logLevel == null) {
        logLevel=(String)properties.get(PersistenceUnitProperties.LOGGING_LEVEL);
      }
    }
    propertiesMap=new HashMap();
    if (dbDriver != null) {
      propertiesMap.put(PersistenceUnitProperties.JDBC_DRIVER,dbDriver);
    }
    if (dbUrl != null) {
      propertiesMap.put(PersistenceUnitProperties.JDBC_URL,dbUrl);
    }
    if (dbUser != null) {
      propertiesMap.put(PersistenceUnitProperties.JDBC_USER,dbUser);
    }
    if (dbPwd != null) {
      propertiesMap.put(PersistenceUnitProperties.JDBC_PASSWORD,dbPwd);
    }
    if (logLevel != null) {
      propertiesMap.put(PersistenceUnitProperties.LOGGING_LEVEL,logLevel);
    }
    if (platform != null) {
      propertiesMap.put(PersistenceUnitProperties.TARGET_DATABASE,platform);
    }
    propertiesMap.putAll(persistencePropertiesTestMap);
  }
  return propertiesMap;
}","/** 
 * Get common properties (including database properties) from System, for unavailable ones, read from test.properties file. The location of properties file can be given by system property <tt>test.properties</tt>. The default location is ""test.properties"" file in current directory. 
 */
@SuppressWarnings(""String_Node_Str"") public static Map<String,String> getDatabaseProperties(){
  if (propertiesMap == null) {
    String dbDriver=System.getProperty(DB_DRIVER_KEY);
    String dbUrl=System.getProperty(DB_URL_KEY);
    String dbUser=System.getProperty(DB_USER_KEY);
    String dbPwd=System.getProperty(DB_PWD_KEY);
    String platform=System.getProperty(DB_PLATFORM_KEY);
    String logLevel=System.getProperty(LOGGING_LEVEL_KEY);
    if ((dbDriver == null) || (dbUrl == null) || (dbUser == null)|| (dbPwd == null)|| (platform == null)|| (logLevel == null)) {
      Properties properties=new Properties();
      File testPropertiesFile=new File(System.getProperty(TEST_PROPERTIES_FILE_KEY,TEST_PROPERTIES_FILE_DEFAULT));
      URL url=null;
      if (testPropertiesFile.exists()) {
        try {
          url=testPropertiesFile.toURL();
        }
 catch (        MalformedURLException exception) {
          throw new RuntimeException(""String_Node_Str"" + testPropertiesFile.getName() + ""String_Node_Str"",exception);
        }
      }
 else {
        url=JUnitTestCaseHelper.class.getResource(""String_Node_Str"" + System.getProperty(TEST_PROPERTIES_FILE_KEY,TEST_PROPERTIES_FILE_DEFAULT));
      }
      if (url != null) {
        try {
          properties.load(url.openStream());
        }
 catch (        java.io.IOException exception) {
          throw new RuntimeException(""String_Node_Str"" + testPropertiesFile.getName() + ""String_Node_Str"",exception);
        }
      }
      if (dbDriver == null) {
        dbDriver=(String)properties.get(DB_DRIVER_KEY);
      }
      if (dbUrl == null) {
        dbUrl=(String)properties.get(DB_URL_KEY);
      }
      if (dbUser == null) {
        dbUser=(String)properties.get(DB_USER_KEY);
      }
      if (dbPwd == null) {
        dbPwd=(String)properties.get(DB_PWD_KEY);
      }
      if (platform == null) {
        platform=(String)properties.get(DB_PLATFORM_KEY);
      }
      if (logLevel == null) {
        logLevel=(String)properties.get(PersistenceUnitProperties.LOGGING_LEVEL);
      }
    }
    propertiesMap=new HashMap();
    if (dbDriver != null) {
      propertiesMap.put(PersistenceUnitProperties.JDBC_DRIVER,dbDriver);
    }
    if (dbUrl != null) {
      propertiesMap.put(PersistenceUnitProperties.JDBC_URL,dbUrl);
    }
    if (dbUser != null) {
      propertiesMap.put(PersistenceUnitProperties.JDBC_USER,dbUser);
    }
    if (dbPwd != null) {
      propertiesMap.put(PersistenceUnitProperties.JDBC_PASSWORD,dbPwd);
    }
    if (logLevel != null) {
      propertiesMap.put(PersistenceUnitProperties.LOGGING_LEVEL,logLevel);
    }
    if (platform != null) {
      propertiesMap.put(PersistenceUnitProperties.TARGET_DATABASE,platform);
    }
    propertiesMap.putAll(persistencePropertiesTestMap);
  }
  return propertiesMap;
}"
66572,"public SkipBugzillaTestRunner(Class<?> klass) throws Throwable {
  super(klass);
  Properties properties=loadProperties();
  String databasePlatformClassName=properties.getProperty(JUnitTestCaseHelper.DB_PLATFORM_KEY);
  databasePlatformClass=(Class<? extends DatabasePlatform>)Class.forName(databasePlatformClassName);
  String testBugzillaRun=(String)properties.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(testBugzillaRun)) {
    runAllBugzilla=true;
    bugid=-1;
  }
 else {
    runAllBugzilla=false;
    if (testBugzillaRun != null) {
      bugid=Long.parseLong(testBugzillaRun);
    }
 else {
      bugid=-1;
    }
  }
  String testIssueRun=(String)properties.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(testIssueRun)) {
    runAllIssues=true;
    issueid=-1;
  }
 else {
    runAllIssues=false;
    if (testIssueRun != null) {
      issueid=Long.parseLong(testIssueRun);
    }
 else {
      issueid=-1;
    }
  }
  String testToBeInvestigatedRun=(String)properties.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(testToBeInvestigatedRun)) {
    runAllUnknown=true;
  }
 else {
    runAllUnknown=false;
  }
}","@SuppressWarnings(""String_Node_Str"") public SkipBugzillaTestRunner(Class<?> klass) throws Throwable {
  super(klass);
  Map<String,String> properties=JUnitTestCaseHelper.getDatabaseProperties();
  String databasePlatformClassName=properties.get(PersistenceUnitProperties.TARGET_DATABASE);
  databasePlatformClass=(Class<? extends DatabasePlatform>)Class.forName(databasePlatformClassName);
  String testBugzillaRun=(String)properties.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(testBugzillaRun)) {
    runAllBugzilla=true;
    bugid=-1;
  }
 else {
    runAllBugzilla=false;
    if (testBugzillaRun != null) {
      bugid=Long.parseLong(testBugzillaRun);
    }
 else {
      bugid=-1;
    }
  }
  String testIssueRun=(String)properties.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(testIssueRun)) {
    runAllIssues=true;
    issueid=-1;
  }
 else {
    runAllIssues=false;
    if (testIssueRun != null) {
      issueid=Long.parseLong(testIssueRun);
    }
 else {
      issueid=-1;
    }
  }
  String testToBeInvestigatedRun=(String)properties.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(testToBeInvestigatedRun)) {
    runAllUnknown=true;
  }
 else {
    runAllUnknown=false;
  }
}"
66573,"/** 
 * INTERNAL: Create an instance of the composite primary key class for the key object.
 */
public Object createPrimaryKeyInstance(Object key,AbstractSession session){
  KeyElementAccessor[] pkElementArray=this.getKeyClassFields(getPKClass());
  ObjectBuilder builder=getDescriptor().getObjectBuilder();
  if (pkElementArray.length == 1 && pkElementArray[0] instanceof KeyIsElementAccessor) {
    DatabaseMapping mapping=builder.getMappingForAttributeName(pkElementArray[0].getAttributeName());
    Object fieldValue=mapping.getRealAttributeValueFromObject(key,session);
    if (mapping.isObjectReferenceMapping()) {
      fieldValue=mapping.getReferenceDescriptor().getCMPPolicy().createPrimaryKeyInstance(fieldValue,session);
    }
    return fieldValue;
  }
  Object keyInstance=getPKClassInstance();
  Set<ObjectReferenceMapping> usedObjectReferenceMappings=new HashSet<ObjectReferenceMapping>();
  for (int index=0; index < pkElementArray.length; index++) {
    Object keyObj=key;
    KeyElementAccessor accessor=pkElementArray[index];
    DatabaseField field=accessor.getDatabaseField();
    DatabaseMapping mapping=builder.getMappingForField(field);
    if (!mapping.isObjectReferenceMapping() || !usedObjectReferenceMappings.contains(mapping)) {
      while (mapping.isAggregateObjectMapping()) {
        keyObj=mapping.getRealAttributeValueFromObject(keyObj,session);
        mapping=mapping.getReferenceDescriptor().getObjectBuilder().getMappingForField(field);
      }
      Object fieldValue=mapping.getRealAttributeValueFromObject(keyObj,session);
      if (mapping.isObjectReferenceMapping()) {
        fieldValue=mapping.getReferenceDescriptor().getCMPPolicy().createPrimaryKeyInstance(fieldValue,session);
        usedObjectReferenceMappings.add((ObjectReferenceMapping)mapping);
      }
      accessor.setValue(keyInstance,fieldValue);
    }
  }
  return keyInstance;
}","/** 
 * INTERNAL: Create an instance of the Id class or value from the object.
 */
public Object createPrimaryKeyInstance(Object object,AbstractSession session){
  KeyElementAccessor[] pkElementArray=this.getKeyClassFields(getPKClass());
  ObjectBuilder builder=getDescriptor().getObjectBuilder();
  if (pkElementArray.length == 1 && pkElementArray[0] instanceof KeyIsElementAccessor) {
    DatabaseMapping mapping=builder.getMappingForAttributeName(pkElementArray[0].getAttributeName());
    Object fieldValue=mapping.getRealAttributeValueFromObject(object,session);
    if (mapping.isObjectReferenceMapping()) {
      fieldValue=mapping.getReferenceDescriptor().getCMPPolicy().createPrimaryKeyInstance(fieldValue,session);
    }
    return fieldValue;
  }
  Object keyInstance=getPKClassInstance();
  Set<ObjectReferenceMapping> usedObjectReferenceMappings=new HashSet<ObjectReferenceMapping>();
  for (int index=0; index < pkElementArray.length; index++) {
    Object keyObj=object;
    KeyElementAccessor accessor=pkElementArray[index];
    DatabaseField field=accessor.getDatabaseField();
    DatabaseMapping mapping=builder.getMappingForField(field);
    if (!mapping.isObjectReferenceMapping() || !usedObjectReferenceMappings.contains(mapping)) {
      while (mapping.isAggregateObjectMapping()) {
        keyObj=mapping.getRealAttributeValueFromObject(keyObj,session);
        mapping=mapping.getReferenceDescriptor().getObjectBuilder().getMappingForField(field);
      }
      Object fieldValue=mapping.getRealAttributeValueFromObject(keyObj,session);
      if (mapping.isObjectReferenceMapping()) {
        fieldValue=mapping.getReferenceDescriptor().getCMPPolicy().createPrimaryKeyInstance(fieldValue,session);
        usedObjectReferenceMappings.add((ObjectReferenceMapping)mapping);
      }
      accessor.setValue(keyInstance,fieldValue);
    }
  }
  return keyInstance;
}"
66574,"/** 
 * INTERNAL: Check that the qualifier on the table names are properly set.
 */
protected void verifyTableQualifiers(Platform platform){
  DatabaseTable table;
  Enumeration tableEnumeration;
  String tableQualifier=platform.getTableQualifier();
  if (tableQualifier.length() == 0) {
    return;
  }
  tableEnumeration=getTables().elements();
  while (tableEnumeration.hasMoreElements()) {
    table=(DatabaseTable)tableEnumeration.nextElement();
    if (table.getTableQualifier().length() == 0) {
      table.setTableQualifier(tableQualifier);
    }
  }
}","/** 
 * INTERNAL: Check that the qualifier on the table names are properly set.
 */
protected void verifyTableQualifiers(Platform platform){
  String tableQualifier=platform.getTableQualifier();
  if (tableQualifier.length() == 0) {
    return;
  }
  for (  DatabaseTable table : getTables()) {
    if (table.getTableQualifier().length() == 0) {
      table.setTableQualifier(tableQualifier);
    }
  }
}"
66575,"/** 
 * INTERNAL: Validate the entire post-initialization descriptor.
 */
protected void validateAfterInitialization(AbstractSession session){
  selfValidationAfterInitialization(session);
  for (Enumeration mappings=getMappings().elements(); mappings.hasMoreElements(); ) {
    ((DatabaseMapping)mappings.nextElement()).validateAfterInitialization(session);
  }
}","/** 
 * INTERNAL: Validate the entire post-initialization descriptor.
 */
protected void validateAfterInitialization(AbstractSession session){
  selfValidationAfterInitialization(session);
  for (  DatabaseMapping mapping : getMappings()) {
    mapping.validateAfterInitialization(session);
  }
}"
66576,"/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (getHistoryPolicy() != null) {
    session.getProject().setHasGenericHistorySupport(true);
  }
  if (isIsolated()) {
    session.getProject().setHasIsolatedClasses(true);
  }
  if (!shouldIsolateObjectsInUnitOfWork() && !shouldBeReadOnly()) {
    session.getProject().setHasNonIsolatedUOWClasses(true);
  }
  if (isInitialized(INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(INITIALIZED);
  if (isChildDescriptor()) {
    getInheritancePolicy().getParentDescriptor().initialize(session);
    if (getInheritancePolicy().getParentDescriptor().isIsolated()) {
      setIsIsolated(true);
    }
    getInheritancePolicy().initializeOptimisticLocking();
  }
  if (shouldOrderMappings()) {
    Vector mappings=getMappings();
    Object[] mappingsArray=new Object[mappings.size()];
    for (int index=0; index < mappings.size(); index++) {
      mappingsArray[index]=mappings.elementAt(index);
    }
    Arrays.sort(mappingsArray,new MappingCompare());
    mappings=NonSynchronizedVector.newInstance(mappingsArray.length);
    for (int index=0; index < mappingsArray.length; index++) {
      mappings.addElement(mappingsArray[index]);
    }
    setMappings(mappings);
  }
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
    validateMappingType(mapping);
    mapping.initialize(session);
    if (mapping.isLockableMapping()) {
      getLockableMappings().add(mapping);
    }
    if ((mapping.isForeignReferenceMapping()) && (((ForeignReferenceMapping)mapping).getIndirectionPolicy() instanceof ProxyIndirectionPolicy)) {
      session.getProject().setHasProxyIndirection(true);
    }
    if ((usesOptimisticLocking() && getOptimisticLockingPolicy().isCascaded()) || hasCascadeLockingPolicies()) {
      prepareCascadeLockingPolicy(mapping);
    }
    if (mapping.derivesId()) {
      derivesIdMappings.put(mapping.getAttributeName(),mapping);
    }
    Helper.addAllUniqueToVector(getFields(),mapping.getFields());
  }
  if (hasMappingsPostCalculateChangesOnDeleted()) {
    session.getProject().setHasMappingsPostCalculateChangesOnDeleted(true);
  }
  if (!isAggregateDescriptor()) {
    if (!isChildDescriptor()) {
      if (usesOptimisticLocking()) {
        getOptimisticLockingPolicy().initializeProperties();
      }
    }
  }
  for (Iterator queryKeys=getQueryKeys().values().iterator(); queryKeys.hasNext(); ) {
    QueryKey queryKey=(QueryKey)queryKeys.next();
    queryKey.initialize(this);
  }
  if (hasInheritance()) {
    getInheritancePolicy().initialize(session);
    if (getInheritancePolicy().isChildDescriptor()) {
      for (Iterator iterator=getInheritancePolicy().getParentDescriptor().getMappings().iterator(); iterator.hasNext(); ) {
        DatabaseMapping mapping=(DatabaseMapping)iterator.next();
        if (mapping.isAggregateObjectMapping() || ((mapping.isForeignReferenceMapping() && (!mapping.isDirectCollectionMapping())) && (!((ForeignReferenceMapping)mapping).usesIndirection()))) {
          getLockableMappings().add(mapping);
        }
        if (mapping.derivesId()) {
          derivesIdMappings.put(mapping.getAttributeName(),mapping);
        }
      }
    }
  }
  if (hasInheritance() && shouldOrderMappings()) {
    Vector mappings=getMappings();
    Object[] mappingsArray=new Object[mappings.size()];
    for (int index=0; index < mappings.size(); index++) {
      mappingsArray[index]=mappings.elementAt(index);
    }
    Arrays.sort(mappingsArray,new MappingCompare());
    mappings=NonSynchronizedVector.newInstance(mappingsArray.length);
    for (int index=0; index < mappingsArray.length; index++) {
      mappings.addElement(mappingsArray[index]);
    }
    setMappings(mappings);
  }
  setAllFields((Vector)getFields().clone());
  getObjectBuilder().initialize(session);
  if (shouldOrderMappings()) {
    for (int index=getObjectBuilder().getPrimaryKeyMappings().size() - 1; index >= 0; index--) {
      DatabaseMapping mapping=getObjectBuilder().getPrimaryKeyMappings().get(index);
      if ((mapping != null) && mapping.isDirectToFieldMapping()) {
        getMappings().remove(mapping);
        getMappings().add(0,mapping);
        DatabaseField field=((AbstractDirectMapping)mapping).getField();
        getFields().remove(field);
        getFields().add(0,field);
        getAllFields().remove(field);
        getAllFields().add(0,field);
      }
    }
  }
  if (usesOptimisticLocking() && (!isChildDescriptor())) {
    getOptimisticLockingPolicy().initialize(session);
  }
  if (hasInterfacePolicy() || isDescriptorForInterface()) {
    interfaceInitialization(session);
  }
  if (hasWrapperPolicy()) {
    getWrapperPolicy().initialize(session);
  }
  if (hasReturningPolicy()) {
    getReturningPolicy().initialize(session);
  }
  getQueryManager().initialize(session);
  getEventManager().initialize(session);
  getCopyPolicy().initialize(session);
  getInstantiationPolicy().initialize(session);
  if (getHistoryPolicy() != null) {
    getHistoryPolicy().initialize(session);
  }
 else   if (hasInheritance()) {
    ClassDescriptor parentDescriptor=getInheritancePolicy().getParentDescriptor();
    if ((parentDescriptor != null) && (parentDescriptor.getHistoryPolicy() != null)) {
      setHistoryPolicy((HistoryPolicy)parentDescriptor.getHistoryPolicy().clone());
    }
  }
  if (this.getCMPPolicy() != null) {
    this.getCMPPolicy().initialize(this,session);
  }
  if (hasFetchGroupManager()) {
    getFetchGroupManager().initialize(session);
  }
  if ((getObjectChangePolicyInternal() == null) && (ChangeTracker.class.isAssignableFrom(getJavaClass()))) {
    if (Arrays.asList(getJavaClass().getInterfaces()).contains(PersistenceWeavedChangeTracking.class)) {
      if (supportsChangeTracking(session.getProject())) {
        setObjectChangePolicy(new AttributeChangeTrackingPolicy());
      }
    }
  }
  getObjectChangePolicy().initialize(session,this);
  if (getUnitOfWorkCacheIsolationLevel() == UNDEFINED_ISOLATATION) {
    if (isIsolated()) {
      setUnitOfWorkCacheIsolationLevel(ISOLATE_CACHE_ALWAYS);
    }
 else {
      setUnitOfWorkCacheIsolationLevel(ISOLATE_NEW_DATA_AFTER_TRANSACTION);
    }
  }
  if (getIdValidation() == null) {
    if (getPrimaryKeyFields().size() > 1 && !usesSequenceNumbers()) {
      setIdValidation(IdValidation.NULL);
    }
 else {
      setIdValidation(IdValidation.ZERO);
    }
  }
  if (this.defaultReadAllQueryRedirector == null) {
    this.defaultReadAllQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultReadObjectQueryRedirector == null) {
    this.defaultReadObjectQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultReportQueryRedirector == null) {
    this.defaultReportQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultInsertObjectQueryRedirector == null) {
    this.defaultInsertObjectQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultUpdateObjectQueryRedirector == null) {
    this.defaultUpdateObjectQueryRedirector=this.defaultQueryRedirector;
  }
}","/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (getHistoryPolicy() != null) {
    session.getProject().setHasGenericHistorySupport(true);
  }
  if (isIsolated()) {
    session.getProject().setHasIsolatedClasses(true);
  }
  if (!shouldIsolateObjectsInUnitOfWork() && !shouldBeReadOnly()) {
    session.getProject().setHasNonIsolatedUOWClasses(true);
  }
  if (isInitialized(INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(INITIALIZED);
  if (isChildDescriptor()) {
    getInheritancePolicy().getParentDescriptor().initialize(session);
    if (getInheritancePolicy().getParentDescriptor().isIsolated()) {
      setIsIsolated(true);
    }
    getInheritancePolicy().initializeOptimisticLocking();
  }
  if (shouldOrderMappings()) {
    Vector mappings=getMappings();
    Object[] mappingsArray=new Object[mappings.size()];
    for (int index=0; index < mappings.size(); index++) {
      mappingsArray[index]=mappings.get(index);
    }
    Arrays.sort(mappingsArray,new MappingCompare());
    mappings=NonSynchronizedVector.newInstance(mappingsArray.length);
    for (int index=0; index < mappingsArray.length; index++) {
      mappings.add(mappingsArray[index]);
    }
    setMappings(mappings);
  }
  for (  DatabaseMapping mapping : getMappings()) {
    validateMappingType(mapping);
    mapping.initialize(session);
    if (mapping.isLockableMapping()) {
      getLockableMappings().add(mapping);
    }
    if ((mapping.isForeignReferenceMapping()) && (((ForeignReferenceMapping)mapping).getIndirectionPolicy() instanceof ProxyIndirectionPolicy)) {
      session.getProject().setHasProxyIndirection(true);
    }
    if ((usesOptimisticLocking() && getOptimisticLockingPolicy().isCascaded()) || hasCascadeLockingPolicies()) {
      prepareCascadeLockingPolicy(mapping);
    }
    if (mapping.derivesId()) {
      this.derivesIdMappings.put(mapping.getAttributeName(),mapping);
    }
    Helper.addAllUniqueToVector(getFields(),mapping.getFields());
  }
  if (hasMappingsPostCalculateChangesOnDeleted()) {
    session.getProject().setHasMappingsPostCalculateChangesOnDeleted(true);
  }
  if (!isAggregateDescriptor()) {
    if (!isChildDescriptor()) {
      if (usesOptimisticLocking()) {
        getOptimisticLockingPolicy().initializeProperties();
      }
    }
  }
  for (Iterator queryKeys=getQueryKeys().values().iterator(); queryKeys.hasNext(); ) {
    QueryKey queryKey=(QueryKey)queryKeys.next();
    queryKey.initialize(this);
  }
  if (hasInheritance()) {
    getInheritancePolicy().initialize(session);
    if (getInheritancePolicy().isChildDescriptor()) {
      for (      DatabaseMapping mapping : getInheritancePolicy().getParentDescriptor().getMappings()) {
        if (mapping.isAggregateObjectMapping() || ((mapping.isForeignReferenceMapping() && (!mapping.isDirectCollectionMapping())) && (!((ForeignReferenceMapping)mapping).usesIndirection()))) {
          getLockableMappings().add(mapping);
        }
        if (mapping.derivesId()) {
          this.derivesIdMappings.put(mapping.getAttributeName(),mapping);
        }
      }
    }
  }
  if (hasInheritance() && shouldOrderMappings()) {
    Vector mappings=getMappings();
    Object[] mappingsArray=new Object[mappings.size()];
    for (int index=0; index < mappings.size(); index++) {
      mappingsArray[index]=mappings.get(index);
    }
    Arrays.sort(mappingsArray,new MappingCompare());
    mappings=NonSynchronizedVector.newInstance(mappingsArray.length);
    for (int index=0; index < mappingsArray.length; index++) {
      mappings.add(mappingsArray[index]);
    }
    setMappings(mappings);
  }
  setAllFields((Vector)getFields().clone());
  getObjectBuilder().initialize(session);
  if (shouldOrderMappings()) {
    for (int index=getObjectBuilder().getPrimaryKeyMappings().size() - 1; index >= 0; index--) {
      DatabaseMapping mapping=getObjectBuilder().getPrimaryKeyMappings().get(index);
      if ((mapping != null) && mapping.isDirectToFieldMapping()) {
        getMappings().remove(mapping);
        getMappings().add(0,mapping);
        DatabaseField field=((AbstractDirectMapping)mapping).getField();
        getFields().remove(field);
        getFields().add(0,field);
        getAllFields().remove(field);
        getAllFields().add(0,field);
      }
    }
  }
  if (usesOptimisticLocking() && (!isChildDescriptor())) {
    getOptimisticLockingPolicy().initialize(session);
  }
  if (hasInterfacePolicy() || isDescriptorForInterface()) {
    interfaceInitialization(session);
  }
  if (hasWrapperPolicy()) {
    getWrapperPolicy().initialize(session);
  }
  if (hasReturningPolicy()) {
    getReturningPolicy().initialize(session);
  }
  getQueryManager().initialize(session);
  getEventManager().initialize(session);
  getCopyPolicy().initialize(session);
  getInstantiationPolicy().initialize(session);
  if (getHistoryPolicy() != null) {
    getHistoryPolicy().initialize(session);
  }
 else   if (hasInheritance()) {
    ClassDescriptor parentDescriptor=getInheritancePolicy().getParentDescriptor();
    if ((parentDescriptor != null) && (parentDescriptor.getHistoryPolicy() != null)) {
      setHistoryPolicy((HistoryPolicy)parentDescriptor.getHistoryPolicy().clone());
    }
  }
  if (this.getCMPPolicy() != null) {
    this.getCMPPolicy().initialize(this,session);
  }
  if (hasFetchGroupManager()) {
    getFetchGroupManager().initialize(session);
  }
  if ((getObjectChangePolicyInternal() == null) && (ChangeTracker.class.isAssignableFrom(getJavaClass()))) {
    if (Arrays.asList(getJavaClass().getInterfaces()).contains(PersistenceWeavedChangeTracking.class)) {
      if (supportsChangeTracking(session.getProject())) {
        setObjectChangePolicy(new AttributeChangeTrackingPolicy());
      }
    }
  }
  getObjectChangePolicy().initialize(session,this);
  if (getUnitOfWorkCacheIsolationLevel() == UNDEFINED_ISOLATATION) {
    if (isIsolated()) {
      setUnitOfWorkCacheIsolationLevel(ISOLATE_CACHE_ALWAYS);
    }
 else {
      setUnitOfWorkCacheIsolationLevel(ISOLATE_NEW_DATA_AFTER_TRANSACTION);
    }
  }
  if (getIdValidation() == null) {
    if (getPrimaryKeyFields().size() > 1 && !usesSequenceNumbers()) {
      setIdValidation(IdValidation.NULL);
    }
 else {
      setIdValidation(IdValidation.ZERO);
    }
  }
  if (this.defaultReadAllQueryRedirector == null) {
    this.defaultReadAllQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultReadObjectQueryRedirector == null) {
    this.defaultReadObjectQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultReportQueryRedirector == null) {
    this.defaultReportQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultInsertObjectQueryRedirector == null) {
    this.defaultInsertObjectQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultUpdateObjectQueryRedirector == null) {
    this.defaultUpdateObjectQueryRedirector=this.defaultQueryRedirector;
  }
}"
66577,"/** 
 * INTERNAL: Post initializations after mappings are initialized.
 */
public void postInitialize(AbstractSession session) throws DescriptorException {
  if (isInitialized(POST_INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(POST_INITIALIZED);
  if (hasInheritance()) {
    for (    ClassDescriptor child : getInheritancePolicy().getChildDescriptors()) {
      child.postInitialize(session);
    }
  }
  for (  DatabaseMapping mapping : getMappings()) {
    mapping.postInitialize(session);
    if (!shouldAcquireCascadedLocks()) {
      if ((mapping instanceof ForeignReferenceMapping) && (!((ForeignReferenceMapping)mapping).usesIndirection())) {
        setShouldAcquireCascadedLocks(true);
      }
      if ((mapping instanceof AggregateObjectMapping) && mapping.getReferenceDescriptor().shouldAcquireCascadedLocks()) {
        setShouldAcquireCascadedLocks(true);
      }
    }
  }
  if (hasInheritance()) {
    getInheritancePolicy().postInitialize(session);
  }
  for (int index=(getPrimaryKeyFields().size() - 1); index >= 0; index--) {
    DatabaseField primaryKeyField=getPrimaryKeyFields().get(index);
    int fieldIndex=getFields().indexOf(primaryKeyField);
    if (fieldIndex != -1) {
      primaryKeyField=getFields().get(fieldIndex);
      getPrimaryKeyFields().set(index,primaryKeyField);
    }
  }
  for (int index=0; index < getFields().size(); index++) {
    DatabaseField field=getFields().elementAt(index);
    if (field.getType() == null) {
      DatabaseMapping mapping=getObjectBuilder().getMappingForField(field);
      if (mapping != null) {
        field.setType(mapping.getFieldClassification(field));
      }
    }
    field.setIndex(index);
  }
  if (getCacheKeyType() == null) {
    if ((getPrimaryKeyFields().size() > 1) || getObjectBuilder().isXMLObjectBuilder()) {
      setCacheKeyType(CacheKeyType.CACHE_ID);
    }
 else     if (getPrimaryKeyFields().size() == 1) {
      Class type=getObjectBuilder().getFieldClassification(getPrimaryKeyFields().get(0));
      if ((type == null) || type.isArray()) {
        setCacheKeyType(CacheKeyType.CACHE_ID);
      }
 else {
        setCacheKeyType(CacheKeyType.ID_VALUE);
      }
    }
 else {
      setCacheKeyType(CacheKeyType.CACHE_ID);
    }
  }
  getObjectBuilder().postInitialize(session);
  validateAfterInitialization(session);
  checkDatabase(session);
}","/** 
 * INTERNAL: Post initializations after mappings are initialized.
 */
public void postInitialize(AbstractSession session) throws DescriptorException {
  if (isInitialized(POST_INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(POST_INITIALIZED);
  if (hasInheritance()) {
    for (    ClassDescriptor child : getInheritancePolicy().getChildDescriptors()) {
      child.postInitialize(session);
    }
  }
  for (  DatabaseMapping mapping : getMappings()) {
    mapping.postInitialize(session);
    if (!shouldAcquireCascadedLocks()) {
      if ((mapping instanceof ForeignReferenceMapping) && (!((ForeignReferenceMapping)mapping).usesIndirection())) {
        setShouldAcquireCascadedLocks(true);
      }
      if ((mapping instanceof AggregateObjectMapping) && mapping.getReferenceDescriptor().shouldAcquireCascadedLocks()) {
        setShouldAcquireCascadedLocks(true);
      }
    }
  }
  if (hasInheritance()) {
    getInheritancePolicy().postInitialize(session);
  }
  for (int index=(getPrimaryKeyFields().size() - 1); index >= 0; index--) {
    DatabaseField primaryKeyField=getPrimaryKeyFields().get(index);
    int fieldIndex=getFields().indexOf(primaryKeyField);
    if (fieldIndex != -1) {
      primaryKeyField=getFields().get(fieldIndex);
      getPrimaryKeyFields().set(index,primaryKeyField);
    }
  }
  for (int index=0; index < getFields().size(); index++) {
    DatabaseField field=getFields().elementAt(index);
    if (field.getType() == null) {
      DatabaseMapping mapping=getObjectBuilder().getMappingForField(field);
      if (mapping != null) {
        field.setType(mapping.getFieldClassification(field));
      }
    }
    field.setIndex(index);
  }
  if (getCacheKeyType() == null || (getCacheKeyType() == CacheKeyType.AUTO)) {
    if ((getPrimaryKeyFields().size() > 1) || getObjectBuilder().isXMLObjectBuilder()) {
      setCacheKeyType(CacheKeyType.CACHE_ID);
    }
 else     if (getPrimaryKeyFields().size() == 1) {
      Class type=getObjectBuilder().getFieldClassification(getPrimaryKeyFields().get(0));
      if ((type == null) || type.isArray()) {
        setCacheKeyType(CacheKeyType.CACHE_ID);
      }
 else {
        setCacheKeyType(CacheKeyType.ID_VALUE);
      }
    }
 else {
      setCacheKeyType(CacheKeyType.CACHE_ID);
    }
  }
 else   if ((getCacheKeyType() == CacheKeyType.ID_VALUE) && (getPrimaryKeyFields().size() > 1)) {
    session.getIntegrityChecker().handleError(DescriptorException.cannotUseIdValueForCompositeId(this));
  }
  getObjectBuilder().postInitialize(session);
  validateAfterInitialization(session);
  checkDatabase(session);
}"
66578,"/** 
 * INTERNAL: Validate the entire pre-initialization descriptor.
 */
protected void validateBeforeInitialization(AbstractSession session){
  selfValidationBeforeInitialization(session);
  for (Enumeration mappings=getMappings().elements(); mappings.hasMoreElements(); ) {
    ((DatabaseMapping)mappings.nextElement()).validateBeforeInitialization(session);
  }
}","/** 
 * INTERNAL: Validate the entire pre-initialization descriptor.
 */
protected void validateBeforeInitialization(AbstractSession session){
  selfValidationBeforeInitialization(session);
  for (  DatabaseMapping mapping : getMappings()) {
    mapping.validateBeforeInitialization(session);
  }
}"
66579,"public static DescriptorException noRelationTableMechanism(DatabaseMapping mapping){
  Object[] args={};
  DescriptorException descriptorException=new DescriptorException(ExceptionMessageGenerator.buildMessage(DescriptorException.class,NO_RELATION_TABLE_MECHANISM,args),mapping);
  descriptorException.setErrorCode(NO_RELATION_TABLE_MECHANISM);
  return descriptorException;
}","public static DescriptorException noRelationTableMechanism(DatabaseMapping mapping){
  Object[] args={mapping};
  DescriptorException descriptorException=new DescriptorException(ExceptionMessageGenerator.buildMessage(DescriptorException.class,NO_RELATION_TABLE_MECHANISM,args),mapping);
  descriptorException.setErrorCode(NO_RELATION_TABLE_MECHANISM);
  return descriptorException;
}"
66580,"/** 
 * buildWorkingCopyCloneFromRow is an alternative to this which is the normal behavior. A row is read from the database, an original is built/refreshed/returned from the shared cache, and the original is registered/conformed/reverted in the UnitOfWork. <p> This default behavior is only safe when the query is executed on a read connection, otherwise uncommitted data might get loaded into the shared cache. <p> Represents the way TopLink has always worked.
 */
protected Object buildWorkingCopyCloneNormally(ObjectBuildingQuery query,AbstractRecord databaseRow,UnitOfWorkImpl unitOfWork,Object primaryKey,ClassDescriptor concreteDescriptor,JoinedAttributeManager joinManager) throws DatabaseException, QueryException {
  CacheKey unitOfWorkCacheKey=unitOfWork.getIdentityMapAccessorInstance().acquireLock(primaryKey,concreteDescriptor.getJavaClass(),concreteDescriptor);
  Object clone=unitOfWorkCacheKey.getObject();
  boolean found=clone != null;
  Object original=null;
  try {
    if (!found || query.shouldRefreshIdentityMapResult() || query.shouldRetrieveBypassCache()|| (concreteDescriptor.hasFetchGroupManager() && concreteDescriptor.getFetchGroupManager().isPartialObject(clone))) {
      AbstractSession session=unitOfWork.getParentIdentityMapSession(query);
      query.setSession(session);
      if (session.isUnitOfWork()) {
        original=buildObjectInUnitOfWork(query,joinManager,databaseRow,(UnitOfWorkImpl)session,primaryKey,concreteDescriptor);
        if (unitOfWork.shouldCascadeCloneToJoinedRelationship()) {
          return query.registerIndividualResult(original,primaryKey,unitOfWork,joinManager,concreteDescriptor);
        }
 else {
          return query.registerIndividualResult(original,primaryKey,unitOfWork,null,concreteDescriptor);
        }
      }
 else {
        CacheKey parentCacheKey=(CacheKey)buildObject(true,query,databaseRow,session,primaryKey,concreteDescriptor,joinManager);
        original=parentCacheKey.getObject();
        if (query.shouldCacheQueryResults()) {
          query.cacheResult(original);
        }
        if (unitOfWork.isClassReadOnly(original.getClass(),concreteDescriptor)) {
          query.recordCloneForPessimisticLocking(original,unitOfWork);
          return original;
        }
        if (!query.isRegisteringResults()) {
          return original;
        }
        if (clone == null) {
          clone=unitOfWork.cloneAndRegisterObject(original,parentCacheKey,unitOfWorkCacheKey,concreteDescriptor);
        }
        if (concreteDescriptor.hasFetchGroupManager()) {
          if (concreteDescriptor.getFetchGroupManager().shouldWriteInto(original,clone)) {
            concreteDescriptor.getFetchGroupManager().writePartialIntoClones(original,clone,unitOfWork);
          }
        }
      }
    }
    query.postRegisterIndividualResult(clone,original,primaryKey,unitOfWork,joinManager,concreteDescriptor);
  }
  finally {
    unitOfWorkCacheKey.release();
    query.setSession(unitOfWork);
  }
  return clone;
}","/** 
 * buildWorkingCopyCloneFromRow is an alternative to this which is the normal behavior. A row is read from the database, an original is built/refreshed/returned from the shared cache, and the original is registered/conformed/reverted in the UnitOfWork. <p> This default behavior is only safe when the query is executed on a read connection, otherwise uncommitted data might get loaded into the shared cache. <p> Represents the way TopLink has always worked.
 */
protected Object buildWorkingCopyCloneNormally(ObjectBuildingQuery query,AbstractRecord databaseRow,UnitOfWorkImpl unitOfWork,Object primaryKey,ClassDescriptor concreteDescriptor,JoinedAttributeManager joinManager) throws DatabaseException, QueryException {
  CacheKey unitOfWorkCacheKey=unitOfWork.getIdentityMapAccessorInstance().acquireLock(primaryKey,concreteDescriptor.getJavaClass(),concreteDescriptor);
  Object clone=unitOfWorkCacheKey.getObject();
  boolean found=clone != null;
  Object original=null;
  try {
    if (!found || query.shouldRefreshIdentityMapResult() || query.shouldCacheQueryResults()|| query.shouldRetrieveBypassCache()|| (concreteDescriptor.hasFetchGroupManager() && concreteDescriptor.getFetchGroupManager().isPartialObject(clone))) {
      AbstractSession session=unitOfWork.getParentIdentityMapSession(query);
      query.setSession(session);
      if (session.isUnitOfWork()) {
        original=buildObjectInUnitOfWork(query,joinManager,databaseRow,(UnitOfWorkImpl)session,primaryKey,concreteDescriptor);
        if (unitOfWork.shouldCascadeCloneToJoinedRelationship()) {
          return query.registerIndividualResult(original,primaryKey,unitOfWork,joinManager,concreteDescriptor);
        }
 else {
          return query.registerIndividualResult(original,primaryKey,unitOfWork,null,concreteDescriptor);
        }
      }
 else {
        CacheKey parentCacheKey=(CacheKey)buildObject(true,query,databaseRow,session,primaryKey,concreteDescriptor,joinManager);
        original=parentCacheKey.getObject();
        if (query.shouldCacheQueryResults()) {
          query.cacheResult(original);
        }
        if (unitOfWork.isClassReadOnly(original.getClass(),concreteDescriptor)) {
          query.recordCloneForPessimisticLocking(original,unitOfWork);
          return original;
        }
        if (!query.isRegisteringResults()) {
          return original;
        }
        if (clone == null) {
          clone=unitOfWork.cloneAndRegisterObject(original,parentCacheKey,unitOfWorkCacheKey,concreteDescriptor);
        }
        if (concreteDescriptor.hasFetchGroupManager()) {
          if (concreteDescriptor.getFetchGroupManager().shouldWriteInto(original,clone)) {
            concreteDescriptor.getFetchGroupManager().writePartialIntoClones(original,clone,unitOfWork);
          }
        }
      }
    }
    query.postRegisterIndividualResult(clone,original,primaryKey,unitOfWork,joinManager,concreteDescriptor);
  }
  finally {
    unitOfWorkCacheKey.release();
    query.setSession(unitOfWork);
  }
  return clone;
}"
66581,"/** 
 * Set the results for a query. Query results are cached based on the parameter values provided to the query different parameter values access different caches.
 */
public void putQueryResult(ReadQuery query,Vector parameters,Object results){
  Object queryKey=query.getName();
  if ((queryKey == null) || ((String)queryKey).length() == 0) {
    queryKey=query;
  }
  IdentityMap map=this.queryResults.get(queryKey);
  if (map == null) {
synchronized (this.queryResults) {
      map=this.queryResults.get(queryKey);
      if (map == null) {
        map=buildNewIdentityMap(query.getQueryResultsCachePolicy().getCacheType(),query.getQueryResultsCachePolicy().getMaximumCachedResults(),null);
        this.queryResults.put(queryKey,map);
      }
    }
  }
  Object lookupParameters;
  if (parameters == null) {
    lookupParameters=new CacheId(new Object[0]);
  }
 else {
    lookupParameters=new CacheId(parameters.toArray());
  }
  long queryTime=0;
  if (query.isObjectLevelReadQuery()) {
    queryTime=((ObjectLevelReadQuery)query).getExecutionTime();
  }
  if (queryTime == 0) {
    queryTime=System.currentTimeMillis();
  }
  if (results == null) {
    if (query.getQueryResultsCachePolicy().isNullIgnored()) {
      return;
    }
    results=InvalidObject.instance();
  }
  map.put(lookupParameters,results,null,queryTime);
}","/** 
 * Set the results for a query. Query results are cached based on the parameter values provided to the query different parameter values access different caches.
 */
public void putQueryResult(ReadQuery query,List parameters,Object results){
  if ((results == null) || (results == InvalidObject.instance())) {
    if (query.getQueryResultsCachePolicy().isNullIgnored()) {
      return;
    }
  }
  Object queryKey=query.getName();
  if ((queryKey == null) || ((String)queryKey).length() == 0) {
    queryKey=query;
  }
  IdentityMap map=this.queryResults.get(queryKey);
  if (map == null) {
synchronized (this.queryResults) {
      map=this.queryResults.get(queryKey);
      if (map == null) {
        map=buildNewIdentityMap(query.getQueryResultsCachePolicy().getCacheType(),query.getQueryResultsCachePolicy().getMaximumCachedResults(),null);
        this.queryResults.put(queryKey,map);
      }
    }
  }
  Object lookupParameters;
  if (parameters == null) {
    lookupParameters=new CacheId(new Object[0]);
  }
 else {
    lookupParameters=new CacheId(parameters.toArray());
  }
  long queryTime=0;
  if (query.isObjectLevelReadQuery()) {
    queryTime=((ObjectLevelReadQuery)query).getExecutionTime();
  }
  if (queryTime == 0) {
    queryTime=System.currentTimeMillis();
  }
  if (results == null) {
    results=InvalidObject.instance();
  }
  map.put(lookupParameters,results,null,queryTime);
}"
66582,"/** 
 * Get the cached results associated with a query.  Results are cached by the values of the parameters to the query so different parameters will have different cached results.
 */
public Object getQueryResult(ReadQuery query,Vector parameters,boolean shouldCheckExpiry){
  if (query.getQueryResultsCachePolicy() == null) {
    return null;
  }
  Object queryKey=query.getName();
  if ((queryKey == null) || ((String)queryKey).length() == 0) {
    queryKey=query;
  }
  IdentityMap map=this.queryResults.get(queryKey);
  if (map == null) {
    return null;
  }
  Object lookupParameters;
  if (parameters == null) {
    lookupParameters=new CacheId(new Object[0]);
  }
 else {
    lookupParameters=new CacheId(parameters.toArray());
  }
  CacheKey key=map.getCacheKey(lookupParameters);
  if ((key == null) || (shouldCheckExpiry && query.getQueryResultsCachePolicy().getCacheInvalidationPolicy().isInvalidated(key))) {
    return null;
  }
  return key.getObject();
}","/** 
 * Get the cached results associated with a query.  Results are cached by the values of the parameters to the query so different parameters will have different cached results.
 */
public Object getQueryResult(ReadQuery query,List parameters,boolean shouldCheckExpiry){
  if (query.getQueryResultsCachePolicy() == null) {
    return null;
  }
  Object queryKey=query.getName();
  if ((queryKey == null) || ((String)queryKey).length() == 0) {
    queryKey=query;
  }
  IdentityMap map=this.queryResults.get(queryKey);
  if (map == null) {
    return null;
  }
  Object lookupParameters;
  if (parameters == null) {
    lookupParameters=new CacheId(new Object[0]);
  }
 else {
    lookupParameters=new CacheId(parameters.toArray());
  }
  CacheKey key=map.getCacheKey(lookupParameters);
  if ((key == null) || (shouldCheckExpiry && query.getQueryResultsCachePolicy().getCacheInvalidationPolicy().isInvalidated(key))) {
    return null;
  }
  return key.getObject();
}"
66583,"/** 
 * INTERNAL: Set the results for a query. Query results are cached based on the parameter values provided to the query different parameter values access different caches.
 */
public void putQueryResult(ReadQuery query,Vector parameters,Object results){
  getIdentityMapManager().putQueryResult(query,parameters,results);
}","/** 
 * INTERNAL: Set the results for a query. Query results are cached based on the parameter values provided to the query different parameter values access different caches.
 */
public void putQueryResult(ReadQuery query,List parameters,Object results){
  getIdentityMapManager().putQueryResult(query,parameters,results);
}"
66584,"/** 
 * INTERNAL: Get the identity map for the given class from the IdentityMapManager
 */
public IdentityMap getIdentityMap(ClassDescriptor descriptor){
  return getIdentityMapManager().getIdentityMap(descriptor);
}","/** 
 * INTERNAL: Get the identity map for the given class from the IdentityMapManager
 */
public IdentityMap getIdentityMap(ClassDescriptor descriptor,boolean returnNullIfMissing){
  return getIdentityMapManager().getIdentityMap(descriptor,returnNullIfMissing);
}"
66585,"/** 
 * INTERNAL: This can be used to help debugging an object identity problem. An object identity problem is when an object in the cache references an object not in the cache. This method will validate that all cached objects are in a correct state.
 */
public void validateCache(){
  getSession().log(SessionLog.FINER,SessionLog.CACHE,""String_Node_Str"");
  DescriptorIterator iterator=new DescriptorIterator(){
    public void iterate(    Object object){
      if (!containsObjectInIdentityMap(IdentityMapAccessor.this.session.getDescriptor(object.getClass()).getObjectBuilder().extractPrimaryKeyFromObject(object,IdentityMapAccessor.this.getSession()),object.getClass())) {
        IdentityMapAccessor.this.session.log(SessionLog.FINEST,SessionLog.CACHE,""String_Node_Str"",getVisitedStack());
        IdentityMapAccessor.this.session.log(SessionLog.FINER,SessionLog.CACHE,""String_Node_Str"",getCurrentMapping());
        IdentityMapAccessor.this.session.log(SessionLog.FINER,SessionLog.CACHE,""String_Node_Str"",object);
      }
    }
  }
;
  iterator.setSession(getSession());
  Iterator descriptors=getSession().getDescriptors().values().iterator();
  while (descriptors.hasNext()) {
    ClassDescriptor descriptor=(ClassDescriptor)descriptors.next();
    for (Enumeration mapEnum=getIdentityMap(descriptor).elements(); mapEnum.hasMoreElements(); ) {
      iterator.startIterationOn(mapEnum.nextElement());
    }
  }
}","/** 
 * INTERNAL: This can be used to help debugging an object identity problem. An object identity problem is when an object in the cache references an object not in the cache. This method will validate that all cached objects are in a correct state.
 */
public void validateCache(){
  getSession().log(SessionLog.FINER,SessionLog.CACHE,""String_Node_Str"");
  DescriptorIterator iterator=new DescriptorIterator(){
    public void iterate(    Object object){
      if (!containsObjectInIdentityMap(IdentityMapAccessor.this.session.getDescriptor(object.getClass()).getObjectBuilder().extractPrimaryKeyFromObject(object,IdentityMapAccessor.this.getSession()),object.getClass())) {
        IdentityMapAccessor.this.session.log(SessionLog.FINEST,SessionLog.CACHE,""String_Node_Str"",getVisitedStack());
        IdentityMapAccessor.this.session.log(SessionLog.FINER,SessionLog.CACHE,""String_Node_Str"",getCurrentMapping());
        IdentityMapAccessor.this.session.log(SessionLog.FINER,SessionLog.CACHE,""String_Node_Str"",object);
      }
    }
  }
;
  iterator.setSession(getSession());
  Iterator descriptors=getSession().getDescriptors().values().iterator();
  while (descriptors.hasNext()) {
    ClassDescriptor descriptor=(ClassDescriptor)descriptors.next();
    IdentityMap cache=getIdentityMap(descriptor,true);
    if (cache != null) {
      for (Enumeration mapEnum=cache.elements(); mapEnum.hasMoreElements(); ) {
        iterator.startIterationOn(mapEnum.nextElement());
      }
    }
  }
}"
66586,"/** 
 * INTERNAL: Get the cached results associated with a query.  Results are cached by the values of the parameters to the query so different parameters will have different cached results.
 */
public Object getQueryResult(ReadQuery query,Vector parameters,boolean checkExpiry){
  return getIdentityMapManager().getQueryResult(query,parameters,checkExpiry);
}","/** 
 * INTERNAL: Get the cached results associated with a query.  Results are cached by the values of the parameters to the query so different parameters will have different cached results.
 */
public Object getQueryResult(ReadQuery query,List parameters,boolean checkExpiry){
  return getIdentityMapManager().getQueryResult(query,parameters,checkExpiry);
}"
66587,"/** 
 * INTERNAL: Set the results for a query. Query results are cached based on the parameter values provided to the query different parameter values access different caches.
 */
@Override public void putQueryResult(ReadQuery query,Vector parameters,Object results){
  if (((IsolatedClientSession)session).isIsolatedQuery(query)) {
    getIdentityMapManager().putQueryResult(query,parameters,results);
  }
 else {
    ((IsolatedClientSession)session).getParent().getIdentityMapAccessorInstance().putQueryResult(query,parameters,results);
  }
}","/** 
 * INTERNAL: Set the results for a query. Query results are cached based on the parameter values provided to the query different parameter values access different caches.
 */
@Override public void putQueryResult(ReadQuery query,List parameters,Object results){
  if (((IsolatedClientSession)session).isIsolatedQuery(query)) {
    getIdentityMapManager().putQueryResult(query,parameters,results);
  }
 else {
    ((IsolatedClientSession)session).getParent().getIdentityMapAccessorInstance().putQueryResult(query,parameters,results);
  }
}"
66588,"/** 
 * INTERNAL: Get the identity map for the given class from the IdentityMapManager
 */
@Override public IdentityMap getIdentityMap(ClassDescriptor descriptor){
  if (descriptor.isIsolated()) {
    return getIdentityMapManager().getIdentityMap(descriptor);
  }
 else {
    return ((IsolatedClientSession)session).getParent().getIdentityMapAccessorInstance().getIdentityMap(descriptor);
  }
}","/** 
 * INTERNAL: Get the identity map for the given class from the IdentityMapManager
 */
@Override public IdentityMap getIdentityMap(ClassDescriptor descriptor,boolean returnNullIfMissing){
  if (descriptor.isIsolated()) {
    return getIdentityMapManager().getIdentityMap(descriptor,returnNullIfMissing);
  }
 else {
    return ((IsolatedClientSession)session).getParent().getIdentityMapAccessorInstance().getIdentityMap(descriptor,returnNullIfMissing);
  }
}"
66589,"/** 
 * INTERNAL: Get the cached results associated with a query.  Results are cached by the values of the parameters to the query so different parameters will have different cached results.
 */
@Override public Object getQueryResult(ReadQuery query,Vector parameters,boolean checkExpiry){
  if (((IsolatedClientSession)session).isIsolatedQuery(query)) {
    return getIdentityMapManager().getQueryResult(query,parameters,checkExpiry);
  }
 else {
    return ((IsolatedClientSession)session).getParent().getIdentityMapAccessorInstance().getQueryResult(query,parameters,checkExpiry);
  }
}","/** 
 * INTERNAL: Get the cached results associated with a query.  Results are cached by the values of the parameters to the query so different parameters will have different cached results.
 */
@Override public Object getQueryResult(ReadQuery query,List parameters,boolean checkExpiry){
  if (((IsolatedClientSession)session).isIsolatedQuery(query)) {
    return getIdentityMapManager().getQueryResult(query,parameters,checkExpiry);
  }
 else {
    return ((IsolatedClientSession)session).getParent().getIdentityMapAccessorInstance().getQueryResult(query,parameters,checkExpiry);
  }
}"
66590,"public JAXBUnmarshaller(XMLUnmarshaller newXMLUnmarshaller){
  super();
  validationEventHandler=new DefaultValidationEventHandler();
  xmlUnmarshaller=newXMLUnmarshaller;
  xmlUnmarshaller.setValidationMode(XMLUnmarshaller.NONVALIDATING);
  xmlUnmarshaller.setUnmarshalListener(new JAXBUnmarshalListener(this));
}","public JAXBUnmarshaller(XMLUnmarshaller newXMLUnmarshaller){
  super();
  validationEventHandler=new DefaultValidationEventHandler();
  xmlUnmarshaller=newXMLUnmarshaller;
  xmlUnmarshaller.setValidationMode(XMLUnmarshaller.NONVALIDATING);
  xmlUnmarshaller.setUnmarshalListener(new JAXBUnmarshalListener(this));
  try {
    xmlInputFactory=XMLInputFactory.newInstance();
  }
 catch (  FactoryConfigurationError e) {
  }
}"
66591,"private Class generateWrapperForMapClass(JavaClass mapClass,JavaClass keyClass,JavaClass valueClass,TypeMappingInfo typeMappingInfo){
  NamespaceInfo combinedNamespaceInfo=null;
  NamespaceResolver combinedNamespaceResolver=new NamespaceResolver();
  String combinedNamespaceInfoNamespace=null;
  NamespaceInfo nsForMapClass=packageToNamespaceMappings.get(mapClass.getPackageName());
  if (nsForMapClass != null) {
    combinedNamespaceInfo=nsForMapClass;
    combinedNamespaceInfoNamespace=nsForMapClass.getNamespace();
  }
 else {
    combinedNamespaceInfo=new NamespaceInfo();
  }
  String packageName=""String_Node_Str"";
  if (!helper.isBuiltInJavaType(keyClass)) {
    NamespaceInfo keyNamespaceInfo=getNamespaceInfoForPackage(keyClass);
    String keyPackageName=keyClass.getPackageName();
    packageName=packageName + ""String_Node_Str"" + keyPackageName;
    if (combinedNamespaceInfoNamespace == null) {
      TypeInfo keyTypeInfo=getTypeInfo().get(keyClass.getQualifiedName());
      if (keyTypeInfo == null && shouldGenerateTypeInfo(keyClass)) {
        JavaClass[] jClassArray=new JavaClass[]{keyClass};
        buildNewTypeInfo(jClassArray);
        keyTypeInfo=getTypeInfo().get(keyClass.getQualifiedName());
      }
      combinedNamespaceInfoNamespace=keyTypeInfo.getClassNamespace();
    }
    java.util.Vector<Namespace> namespaces=keyNamespaceInfo.getNamespaceResolver().getNamespaces();
    for (    Namespace n : namespaces) {
      combinedNamespaceResolver.put(n.getPrefix(),n.getNamespaceURI());
    }
  }
  if (!helper.isBuiltInJavaType(valueClass)) {
    NamespaceInfo valueNamespaceInfo=getNamespaceInfoForPackage(valueClass);
    String valuePackageName=valueClass.getPackageName();
    packageName=packageName + ""String_Node_Str"" + valuePackageName;
    java.util.Vector<Namespace> namespaces=valueNamespaceInfo.getNamespaceResolver().getNamespaces();
    for (    Namespace n : namespaces) {
      combinedNamespaceResolver.put(n.getPrefix(),n.getNamespaceURI());
    }
  }
  if (combinedNamespaceInfoNamespace == null) {
    combinedNamespaceInfoNamespace=""String_Node_Str"";
  }
  combinedNamespaceInfo.setNamespace(combinedNamespaceInfoNamespace);
  combinedNamespaceInfo.setNamespaceResolver(combinedNamespaceResolver);
  getPackageToNamespaceMappings().put(packageName,combinedNamespaceInfo);
  int beginIndex=keyClass.getName().lastIndexOf(""String_Node_Str"") + 1;
  String keyName=keyClass.getName().substring(beginIndex);
  int dollarIndex=keyName.indexOf('$');
  if (dollarIndex > -1) {
    keyName=keyName.substring(dollarIndex + 1);
  }
  beginIndex=valueClass.getName().lastIndexOf(""String_Node_Str"") + 1;
  String valueName=valueClass.getName().substring(beginIndex);
  dollarIndex=valueName.indexOf('$');
  if (dollarIndex > -1) {
    valueName=valueName.substring(dollarIndex + 1);
  }
  String collectionClassShortName=mapClass.getRawName().substring(mapClass.getRawName().lastIndexOf('.') + 1);
  String suggestedClassName=keyName + valueName + collectionClassShortName;
  String qualifiedClassName=packageName + ""String_Node_Str"" + suggestedClassName;
  qualifiedClassName=getNextAvailableClassName(qualifiedClassName);
  String qualifiedInternalClassName=qualifiedClassName.replace('.','/');
  String internalKeyName=keyClass.getQualifiedName().replace('.','/');
  String internalValueName=valueClass.getQualifiedName().replace('.','/');
  Type mapType=Type.getType(""String_Node_Str"" + mapClass.getRawName().replace('.','/') + ""String_Node_Str"");
  ClassWriter cw=new ClassWriter(false);
  CodeVisitor cv;
  cw.visit(Constants.V1_5,Constants.ACC_PUBLIC + Constants.ACC_SUPER,qualifiedInternalClassName,""String_Node_Str"",null,""String_Node_Str"");
  RuntimeVisibleAnnotations fieldAttrs1=new RuntimeVisibleAnnotations();
  if (typeMappingInfo != null) {
    java.lang.annotation.Annotation[] annotations=typeMappingInfo.getAnnotations();
    if (annotations != null) {
      for (int i=0; i < annotations.length; i++) {
        java.lang.annotation.Annotation nextAnnotation=annotations[i];
        if (nextAnnotation != null && !(nextAnnotation instanceof XmlElement) && !(nextAnnotation instanceof XmlJavaTypeAdapter)) {
          String annotationClassName=nextAnnotation.annotationType().getName();
          Annotation fieldAttrs1ann0=new Annotation(""String_Node_Str"" + annotationClassName.replace('.','/') + ""String_Node_Str"");
          fieldAttrs1.annotations.add(fieldAttrs1ann0);
          for (          Method next : nextAnnotation.annotationType().getDeclaredMethods()) {
            try {
              Object nextValue=next.invoke(nextAnnotation,new Object[]{});
              if (nextValue instanceof Class) {
                Type nextType=Type.getType(""String_Node_Str"" + ((Class)nextValue).getName().replace('.','/') + ""String_Node_Str"");
                nextValue=nextType;
              }
              fieldAttrs1ann0.add(next.getName(),nextValue);
            }
 catch (            InvocationTargetException ex) {
            }
catch (            IllegalAccessException ex) {
            }
          }
        }
      }
    }
  }
  SignatureAttribute fieldAttrs2=new SignatureAttribute(""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str""+ internalKeyName+ ""String_Node_Str""+ internalValueName+ ""String_Node_Str"");
  fieldAttrs1.next=fieldAttrs2;
  cw.visitField(Constants.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"",null,fieldAttrs1);
  cv=cw.visitMethod(Constants.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitMethodInsn(Constants.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cv.visitInsn(Constants.RETURN);
  cv.visitMaxs(1,1);
  RuntimeVisibleAnnotations methodAttrs1=new RuntimeVisibleAnnotations();
  Annotation methodAttrs1ann0=new Annotation(""String_Node_Str"");
  methodAttrs1.annotations.add(methodAttrs1ann0);
  SignatureAttribute methodAttrs2=new SignatureAttribute(""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str""+ internalKeyName+ ""String_Node_Str""+ internalValueName+ ""String_Node_Str"");
  methodAttrs1.next=methodAttrs2;
  cv=cw.visitMethod(Constants.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"",null,methodAttrs1);
  Label l0=new Label();
  cv.visitLabel(l0);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitVarInsn(Constants.ALOAD,1);
  cv.visitFieldInsn(Constants.PUTFIELD,qualifiedInternalClassName,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"");
  cv.visitInsn(Constants.RETURN);
  Label l1=new Label();
  cv.visitLabel(l1);
  LocalVariableTypeTableAttribute cvAttr=new LocalVariableTypeTableAttribute();
  cv.visitAttribute(cvAttr);
  cv.visitMaxs(2,2);
  methodAttrs1=new RuntimeVisibleAnnotations();
  methodAttrs1ann0=new Annotation(""String_Node_Str"");
  methodAttrs1.annotations.add(methodAttrs1ann0);
  methodAttrs2=new SignatureAttribute(""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str""+ internalKeyName+ ""String_Node_Str""+ internalValueName+ ""String_Node_Str"");
  methodAttrs1.next=methodAttrs2;
  cv=cw.visitMethod(Constants.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"",null,methodAttrs1);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitFieldInsn(Constants.GETFIELD,qualifiedInternalClassName,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"");
  cv.visitInsn(Constants.ARETURN);
  cv.visitMaxs(1,1);
  cv=cw.visitMethod(Constants.ACC_PUBLIC + Constants.ACC_BRIDGE + Constants.ACC_SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitMethodInsn(Constants.INVOKEVIRTUAL,qualifiedInternalClassName,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"");
  cv.visitInsn(Constants.ARETURN);
  cv.visitMaxs(1,1);
  cv=cw.visitMethod(Constants.ACC_PUBLIC + Constants.ACC_BRIDGE + Constants.ACC_SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitVarInsn(Constants.ALOAD,1);
  cv.visitTypeInsn(Constants.CHECKCAST,mapType.getInternalName());
  cv.visitMethodInsn(Constants.INVOKEVIRTUAL,qualifiedInternalClassName,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"");
  cv.visitInsn(Constants.RETURN);
  cv.visitMaxs(2,2);
  SignatureAttribute attr=new SignatureAttribute(""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str""+ internalKeyName+ ""String_Node_Str""+ internalValueName+ ""String_Node_Str"");
  cw.visitAttribute(attr);
  cw.visitEnd();
  byte[] classBytes=cw.toByteArray();
  return generateClassFromBytes(qualifiedClassName,classBytes);
}","private Class generateWrapperForMapClass(JavaClass mapClass,JavaClass keyClass,JavaClass valueClass,TypeMappingInfo typeMappingInfo){
  NamespaceInfo combinedNamespaceInfo=null;
  NamespaceResolver combinedNamespaceResolver=new NamespaceResolver();
  String combinedNamespaceInfoNamespace=null;
  NamespaceInfo nsForMapClass=packageToNamespaceMappings.get(mapClass.getPackageName());
  if (nsForMapClass != null) {
    combinedNamespaceInfo=nsForMapClass;
    combinedNamespaceInfoNamespace=nsForMapClass.getNamespace();
  }
 else {
    combinedNamespaceInfo=new NamespaceInfo();
  }
  String packageName=""String_Node_Str"";
  if (!helper.isBuiltInJavaType(keyClass)) {
    NamespaceInfo keyNamespaceInfo=getNamespaceInfoForPackage(keyClass);
    String keyPackageName=keyClass.getPackageName();
    packageName=packageName + ""String_Node_Str"" + keyPackageName;
    if (combinedNamespaceInfoNamespace == null) {
      TypeInfo keyTypeInfo=getTypeInfo().get(keyClass.getQualifiedName());
      if (keyTypeInfo == null && shouldGenerateTypeInfo(keyClass)) {
        JavaClass[] jClassArray=new JavaClass[]{keyClass};
        buildNewTypeInfo(jClassArray);
        keyTypeInfo=getTypeInfo().get(keyClass.getQualifiedName());
      }
      combinedNamespaceInfoNamespace=keyTypeInfo.getClassNamespace();
    }
    java.util.Vector<Namespace> namespaces=keyNamespaceInfo.getNamespaceResolver().getNamespaces();
    for (    Namespace n : namespaces) {
      combinedNamespaceResolver.put(n.getPrefix(),n.getNamespaceURI());
    }
  }
  if (!helper.isBuiltInJavaType(valueClass)) {
    NamespaceInfo valueNamespaceInfo=getNamespaceInfoForPackage(valueClass);
    String valuePackageName=valueClass.getPackageName();
    packageName=packageName + ""String_Node_Str"" + valuePackageName;
    java.util.Vector<Namespace> namespaces=valueNamespaceInfo.getNamespaceResolver().getNamespaces();
    for (    Namespace n : namespaces) {
      combinedNamespaceResolver.put(n.getPrefix(),n.getNamespaceURI());
    }
  }
  if (combinedNamespaceInfoNamespace == null) {
    if (this.defaultTargetNamespace != null) {
      combinedNamespaceInfoNamespace=this.defaultTargetNamespace;
    }
 else {
      combinedNamespaceInfoNamespace=""String_Node_Str"";
    }
  }
  combinedNamespaceInfo.setNamespace(combinedNamespaceInfoNamespace);
  combinedNamespaceInfo.setNamespaceResolver(combinedNamespaceResolver);
  getPackageToNamespaceMappings().put(packageName,combinedNamespaceInfo);
  int beginIndex=keyClass.getName().lastIndexOf(""String_Node_Str"") + 1;
  String keyName=keyClass.getName().substring(beginIndex);
  int dollarIndex=keyName.indexOf('$');
  if (dollarIndex > -1) {
    keyName=keyName.substring(dollarIndex + 1);
  }
  beginIndex=valueClass.getName().lastIndexOf(""String_Node_Str"") + 1;
  String valueName=valueClass.getName().substring(beginIndex);
  dollarIndex=valueName.indexOf('$');
  if (dollarIndex > -1) {
    valueName=valueName.substring(dollarIndex + 1);
  }
  String collectionClassShortName=mapClass.getRawName().substring(mapClass.getRawName().lastIndexOf('.') + 1);
  String suggestedClassName=keyName + valueName + collectionClassShortName;
  String qualifiedClassName=packageName + ""String_Node_Str"" + suggestedClassName;
  qualifiedClassName=getNextAvailableClassName(qualifiedClassName);
  String qualifiedInternalClassName=qualifiedClassName.replace('.','/');
  String internalKeyName=keyClass.getQualifiedName().replace('.','/');
  String internalValueName=valueClass.getQualifiedName().replace('.','/');
  Type mapType=Type.getType(""String_Node_Str"" + mapClass.getRawName().replace('.','/') + ""String_Node_Str"");
  ClassWriter cw=new ClassWriter(false);
  CodeVisitor cv;
  cw.visit(Constants.V1_5,Constants.ACC_PUBLIC + Constants.ACC_SUPER,qualifiedInternalClassName,""String_Node_Str"",null,""String_Node_Str"");
  RuntimeVisibleAnnotations fieldAttrs1=new RuntimeVisibleAnnotations();
  if (typeMappingInfo != null) {
    java.lang.annotation.Annotation[] annotations=typeMappingInfo.getAnnotations();
    if (annotations != null) {
      for (int i=0; i < annotations.length; i++) {
        java.lang.annotation.Annotation nextAnnotation=annotations[i];
        if (nextAnnotation != null && !(nextAnnotation instanceof XmlElement) && !(nextAnnotation instanceof XmlJavaTypeAdapter)) {
          String annotationClassName=nextAnnotation.annotationType().getName();
          Annotation fieldAttrs1ann0=new Annotation(""String_Node_Str"" + annotationClassName.replace('.','/') + ""String_Node_Str"");
          fieldAttrs1.annotations.add(fieldAttrs1ann0);
          for (          Method next : nextAnnotation.annotationType().getDeclaredMethods()) {
            try {
              Object nextValue=next.invoke(nextAnnotation,new Object[]{});
              if (nextValue instanceof Class) {
                Type nextType=Type.getType(""String_Node_Str"" + ((Class)nextValue).getName().replace('.','/') + ""String_Node_Str"");
                nextValue=nextType;
              }
              fieldAttrs1ann0.add(next.getName(),nextValue);
            }
 catch (            InvocationTargetException ex) {
            }
catch (            IllegalAccessException ex) {
            }
          }
        }
      }
    }
  }
  SignatureAttribute fieldAttrs2=new SignatureAttribute(""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str""+ internalKeyName+ ""String_Node_Str""+ internalValueName+ ""String_Node_Str"");
  fieldAttrs1.next=fieldAttrs2;
  cw.visitField(Constants.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"",null,fieldAttrs1);
  cv=cw.visitMethod(Constants.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitMethodInsn(Constants.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cv.visitInsn(Constants.RETURN);
  cv.visitMaxs(1,1);
  RuntimeVisibleAnnotations methodAttrs1=new RuntimeVisibleAnnotations();
  Annotation methodAttrs1ann0=new Annotation(""String_Node_Str"");
  methodAttrs1.annotations.add(methodAttrs1ann0);
  SignatureAttribute methodAttrs2=new SignatureAttribute(""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str""+ internalKeyName+ ""String_Node_Str""+ internalValueName+ ""String_Node_Str"");
  methodAttrs1.next=methodAttrs2;
  cv=cw.visitMethod(Constants.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"",null,methodAttrs1);
  Label l0=new Label();
  cv.visitLabel(l0);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitVarInsn(Constants.ALOAD,1);
  cv.visitFieldInsn(Constants.PUTFIELD,qualifiedInternalClassName,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"");
  cv.visitInsn(Constants.RETURN);
  Label l1=new Label();
  cv.visitLabel(l1);
  LocalVariableTypeTableAttribute cvAttr=new LocalVariableTypeTableAttribute();
  cv.visitAttribute(cvAttr);
  cv.visitMaxs(2,2);
  methodAttrs1=new RuntimeVisibleAnnotations();
  methodAttrs1ann0=new Annotation(""String_Node_Str"");
  methodAttrs1.annotations.add(methodAttrs1ann0);
  methodAttrs2=new SignatureAttribute(""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str""+ internalKeyName+ ""String_Node_Str""+ internalValueName+ ""String_Node_Str"");
  methodAttrs1.next=methodAttrs2;
  cv=cw.visitMethod(Constants.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"",null,methodAttrs1);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitFieldInsn(Constants.GETFIELD,qualifiedInternalClassName,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"");
  cv.visitInsn(Constants.ARETURN);
  cv.visitMaxs(1,1);
  cv=cw.visitMethod(Constants.ACC_PUBLIC + Constants.ACC_BRIDGE + Constants.ACC_SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitMethodInsn(Constants.INVOKEVIRTUAL,qualifiedInternalClassName,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"");
  cv.visitInsn(Constants.ARETURN);
  cv.visitMaxs(1,1);
  cv=cw.visitMethod(Constants.ACC_PUBLIC + Constants.ACC_BRIDGE + Constants.ACC_SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null);
  cv.visitVarInsn(Constants.ALOAD,0);
  cv.visitVarInsn(Constants.ALOAD,1);
  cv.visitTypeInsn(Constants.CHECKCAST,mapType.getInternalName());
  cv.visitMethodInsn(Constants.INVOKEVIRTUAL,qualifiedInternalClassName,""String_Node_Str"",""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str"");
  cv.visitInsn(Constants.RETURN);
  cv.visitMaxs(2,2);
  SignatureAttribute attr=new SignatureAttribute(""String_Node_Str"" + mapType.getInternalName() + ""String_Node_Str""+ internalKeyName+ ""String_Node_Str""+ internalValueName+ ""String_Node_Str"");
  cw.visitAttribute(attr);
  cw.visitEnd();
  byte[] classBytes=cw.toByteArray();
  return generateClassFromBytes(qualifiedClassName,classBytes);
}"
66592,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      outputStream.write(CLOSE_ELEMENT);
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        outputStream.write(CR);
      }
      for (int x=0; x < numberOfTabs; x++) {
        outputStream.write(TAB);
      }
    }
    isStartElementOpen=true;
    outputStream.write(OPEN_START_ELEMENT);
    outputStream.write(xPathFragment.getShortNameBytes());
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
  }
  if (!isLastEventText) {
    if (numberOfTabs > 0) {
      outputStreamWrite(CR);
    }
    outputStreamWriteTab();
  }
  isStartElementOpen=true;
  outputStreamWrite(OPEN_START_ELEMENT);
  outputStreamWrite(xPathFragment.getShortNameBytes());
  numberOfTabs++;
  isLastEventText=false;
}"
66593,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    isLastEventText=false;
    numberOfTabs--;
    if (isStartElementOpen) {
      outputStream.write(CLOSE_EMPTY_ELEMENT);
      isStartElementOpen=false;
      complexType=true;
      return;
    }
    if (complexType) {
      outputStream.write(CR);
      for (int x=0; x < numberOfTabs; x++) {
        outputStream.write(TAB);
      }
    }
 else {
      complexType=true;
    }
    super.endElement(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  isLastEventText=false;
  numberOfTabs--;
  if (isStartElementOpen) {
    outputStreamWrite((byte)'/');
    outputStreamWrite((byte)'>');
    isStartElementOpen=false;
    complexType=true;
    return;
  }
  if (complexType) {
    outputStreamWrite(CR);
    outputStreamWriteTab();
  }
 else {
    complexType=true;
  }
  super.endElement(namespaceURI,localName,qName);
}"
66594,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      outputStream.write(CLOSE_ELEMENT);
    }
    if (!isLastEventText) {
      outputStream.write(CR);
      for (int x=0; x < numberOfTabs; x++) {
        outputStream.write(TAB);
      }
    }
    outputStream.write(OPEN_START_ELEMENT);
    outputStream.write(qName.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      outputStreamWrite(CLOSE_ELEMENT);
    }
    if (!isLastEventText) {
      outputStreamWrite(CR);
      outputStreamWriteTab();
    }
    outputStreamWrite(OPEN_START_ELEMENT);
    outputStreamWrite(qName.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  UnsupportedEncodingException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66595,"public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      outputStream.write(CLOSE_ELEMENT);
      outputStream.write(CR);
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
    complexType=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void comment(char[] ch,int start,int length) throws SAXException {
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
    outputStreamWrite(CR);
    isStartElementOpen=false;
  }
  writeComment(ch,start,length);
  complexType=false;
}"
66596,"/** 
 * INTERNAL:
 */
public void endDocument(){
  try {
    outputStream.write(CR);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void endDocument(){
  outputStreamWrite(CR);
}"
66597,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      outputStream.write(CLOSE_ELEMENT);
      isStartElementOpen=false;
    }
    outputStream.write(CR);
    for (int x=0; x < numberOfTabs; x++) {
      outputStream.write(TAB);
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  isLastEventText=false;
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
    isStartElementOpen=false;
  }
  outputStreamWrite(CR);
  outputStreamWriteTab();
  super.element(frag);
}"
66598,"/** 
 * INTERNAL:
 */
public void cdata(String value){
  try {
    if (isStartElementOpen) {
      outputStream.write(CLOSE_ELEMENT);
      isStartElementOpen=false;
    }
    outputStream.write(CR);
    for (int x=0; x < numberOfTabs; x++) {
      outputStream.write(TAB);
    }
    super.cdata(value);
    complexType=true;
  }
 catch (  IOException ex) {
    throw XMLMarshalException.marshalException(ex);
  }
}","/** 
 * INTERNAL:
 */
public void cdata(String value){
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
    isStartElementOpen=false;
  }
  outputStreamWrite(CR);
  outputStreamWriteTab();
  super.cdata(value);
  complexType=true;
}"
66599,"public UnmarshalRecord buildSelfRecord(UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(null,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
    }
    if (xmlDescriptor != null) {
      if (xmlDescriptor.hasInheritance()) {
        unmarshalRecord.setAttributes(atts);
        Class clazz=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
        if (clazz == null) {
          QName leafElementType=unmarshalRecord.getLeafElementType();
          if (leafElementType != null) {
            Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
            if (indicator == null) {
              throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
            }
            clazz=(Class)indicator;
          }
        }
        if (clazz != null) {
          xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(clazz);
        }
 else {
          if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
            throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
        }
      }
      TreeObjectBuilder stob2=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
      UnmarshalRecord childRecord=(UnmarshalRecord)stob2.createRecord(unmarshalRecord.getSession());
      childRecord.setUnmarshaller(unmarshalRecord.getUnmarshaller());
      childRecord.setSelfRecord(true);
      unmarshalRecord.setChildRecord(childRecord);
      childRecord.setXMLReader(unmarshalRecord.getXMLReader());
      childRecord.startDocument(this.xmlCompositeObjectMapping);
      return childRecord;
    }
 else {
      return null;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}","public UnmarshalRecord buildSelfRecord(UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(null,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
    }
    if (xmlDescriptor != null) {
      if (xmlDescriptor.hasInheritance()) {
        unmarshalRecord.setAttributes(atts);
        Class clazz=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
        if (clazz == null) {
          QName leafElementType=unmarshalRecord.getLeafElementType();
          if (leafElementType != null) {
            Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
            if (indicator == null) {
              throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
            }
            clazz=(Class)indicator;
          }
        }
        if (clazz != null) {
          xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(clazz);
        }
 else {
          if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
            throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
        }
      }
      TreeObjectBuilder stob2=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
      UnmarshalRecord childRecord=(UnmarshalRecord)stob2.createRecord(unmarshalRecord.getSession());
      childRecord.setUnmarshaller(unmarshalRecord.getUnmarshaller());
      childRecord.setSelfRecord(true);
      unmarshalRecord.setChildRecord(childRecord);
      childRecord.setXMLReader(unmarshalRecord.getXMLReader());
      childRecord.startDocument();
      childRecord.initializeRecord(this.xmlCompositeObjectMapping);
      return childRecord;
    }
 else {
      return null;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}"
66600,"public void processChild(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,XMLDescriptor xmlDescriptor,DatabaseMapping mapping) throws SAXException {
  if (xmlDescriptor == null) {
    DescriptorNotFoundContentHandler handler=new DescriptorNotFoundContentHandler(unmarshalRecord,mapping);
    String qnameString=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
    }
    handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(handler);
    xmlReader.setLexicalHandler(handler);
    return;
  }
  if (xmlDescriptor.hasInheritance()) {
    unmarshalRecord.setAttributes(atts);
    Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
    if (classValue == null) {
      QName leafElementType=unmarshalRecord.getLeafElementType();
      if (leafElementType != null) {
        Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator == null) {
          throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
        classValue=(Class)indicator;
      }
    }
    if (classValue != null) {
      xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(classValue);
    }
 else {
      if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  TreeObjectBuilder targetObjectBuilder=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
  UnmarshalRecord childRecord=unmarshalRecord.getChildUnmarshalRecord(targetObjectBuilder);
  unmarshalRecord.setChildRecord(childRecord);
  childRecord.setAttributes(atts);
  childRecord.startDocument();
  childRecord.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),atts);
  unmarshalRecord.getXMLReader().setContentHandler(unmarshalRecord.getChildRecord());
  try {
    unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord.getChildRecord());
  }
 catch (  SAXNotRecognizedException ex) {
  }
catch (  SAXNotSupportedException ex) {
  }
}","public void processChild(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,XMLDescriptor xmlDescriptor,DatabaseMapping mapping) throws SAXException {
  if (xmlDescriptor == null) {
    DescriptorNotFoundContentHandler handler=new DescriptorNotFoundContentHandler(unmarshalRecord,mapping);
    String qnameString=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
    }
    handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(handler);
    xmlReader.setLexicalHandler(handler);
    return;
  }
  if (xmlDescriptor.hasInheritance()) {
    unmarshalRecord.setAttributes(atts);
    Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
    if (classValue == null) {
      QName leafElementType=unmarshalRecord.getLeafElementType();
      if (leafElementType != null) {
        Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator == null) {
          throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
        classValue=(Class)indicator;
      }
    }
    if (classValue != null) {
      xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(classValue);
    }
 else {
      if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  TreeObjectBuilder targetObjectBuilder=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
  UnmarshalRecord childRecord=unmarshalRecord.getChildUnmarshalRecord(targetObjectBuilder);
  unmarshalRecord.setChildRecord(childRecord);
  childRecord.setAttributes(atts);
  childRecord.startDocument();
  childRecord.initializeRecord(null);
  childRecord.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),atts);
  unmarshalRecord.getXMLReader().setContentHandler(unmarshalRecord.getChildRecord());
  try {
    unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord.getChildRecord());
  }
 catch (  SAXNotRecognizedException ex) {
  }
catch (  SAXNotSupportedException ex) {
  }
}"
66601,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=null;
    boolean isPrimitiveType=false;
    Class primitiveWrapperClass=null;
    String type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (null != type) {
      XPathFragment typeFragment=new XPathFragment(type);
      if (null != unmarshalNamespaceResolver) {
        typeFragment.setNamespaceURI(unmarshalNamespaceResolver.getNamespaceURI(typeFragment.getPrefix()));
      }
      xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      if (xmlDescriptor == null) {
        primitiveWrapperClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(new QName(typeFragment.getNamespaceURI(),typeFragment.getLocalName()));
      }
    }
    if (xmlDescriptor == null) {
      String name;
      if (localName == null || localName.length() == 0) {
        name=qName;
      }
 else {
        name=localName;
      }
      QName rootQName;
      if (namespaceURI == null || namespaceURI.length() == 0) {
        rootQName=new QName(name);
      }
 else {
        rootQName=new QName(namespaceURI,name);
      }
      xmlDescriptor=xmlContext.getDescriptor(rootQName);
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(XMLDescriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
        if (xmlDescriptor == null) {
          isPrimitiveType=primitiveWrapperClass != null;
        }
      }
      if (null == xmlDescriptor && !isPrimitiveType) {
        if (this.keepAsElementPolicy != UnmarshalKeepAsElementPolicy.KEEP_NONE_AS_ELEMENT) {
          this.documentBuilder=new SAXDocumentBuilder();
          documentBuilder.startDocument();
          for (          String prefix : this.unmarshalNamespaceResolver.getPrefixes()) {
            documentBuilder.startPrefixMapping(prefix,this.unmarshalNamespaceResolver.getNamespaceURI(prefix));
          }
          documentBuilder.startElement(namespaceURI,localName,qName,atts);
          this.xmlReader.setContentHandler(documentBuilder);
          return;
        }
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.setUnmarshalRecord(unmappedContentHandlerWrapper);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getReadSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (isPrimitiveType) {
      unmarshalRecord=new XMLRootRecord(primitiveWrapperClass);
      unmarshalRecord.setSession((AbstractSession)unmarshaller.getXMLContext().getSession(0));
    }
 else     if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecord(null);
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator == null) {
            throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
          classValue=(Class)indicator;
        }
      }
      if (classValue != null) {
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
 else {
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
    this.descriptor=xmlDescriptor;
    this.rootRecord=unmarshalRecord;
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(locator);
    }
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    unmarshalRecord.setAttributes(atts);
    if (atts != null && null == atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.startDocument();
      xmlReader.setContentHandler(unmarshalRecord);
      unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
      try {
        unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord);
      }
 catch (      SAXNotRecognizedException ex) {
      }
catch (      SAXNotSupportedException ex) {
      }
    }
 else {
      unmarshalRecord.setRootElementName(qName);
      unmarshalRecord.setLocalName(localName);
      unmarshalRecord.setRootElementNamespaceUri(namespaceURI);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=null;
    boolean isPrimitiveType=false;
    Class primitiveWrapperClass=null;
    String type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (null != type) {
      XPathFragment typeFragment=new XPathFragment(type);
      if (null != unmarshalNamespaceResolver) {
        typeFragment.setNamespaceURI(unmarshalNamespaceResolver.getNamespaceURI(typeFragment.getPrefix()));
      }
      xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      if (xmlDescriptor == null) {
        primitiveWrapperClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(new QName(typeFragment.getNamespaceURI(),typeFragment.getLocalName()));
      }
    }
    if (xmlDescriptor == null) {
      String name;
      if (localName == null || localName.length() == 0) {
        name=qName;
      }
 else {
        name=localName;
      }
      QName rootQName;
      if (namespaceURI == null || namespaceURI.length() == 0) {
        rootQName=new QName(name);
      }
 else {
        rootQName=new QName(namespaceURI,name);
      }
      xmlDescriptor=xmlContext.getDescriptor(rootQName);
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(XMLDescriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
        if (xmlDescriptor == null) {
          isPrimitiveType=primitiveWrapperClass != null;
        }
      }
      if (null == xmlDescriptor && !isPrimitiveType) {
        if (this.keepAsElementPolicy != UnmarshalKeepAsElementPolicy.KEEP_NONE_AS_ELEMENT) {
          this.documentBuilder=new SAXDocumentBuilder();
          documentBuilder.startDocument();
          for (          String prefix : this.unmarshalNamespaceResolver.getPrefixes()) {
            documentBuilder.startPrefixMapping(prefix,this.unmarshalNamespaceResolver.getNamespaceURI(prefix));
          }
          documentBuilder.startElement(namespaceURI,localName,qName,atts);
          this.xmlReader.setContentHandler(documentBuilder);
          return;
        }
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.setUnmarshalRecord(unmappedContentHandlerWrapper);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getReadSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (isPrimitiveType) {
      unmarshalRecord=new XMLRootRecord(primitiveWrapperClass);
      unmarshalRecord.setSession((AbstractSession)unmarshaller.getXMLContext().getSession(0));
    }
 else     if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecord(null);
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator == null) {
            throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
          classValue=(Class)indicator;
        }
      }
      if (classValue != null) {
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
 else {
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
    this.descriptor=xmlDescriptor;
    this.rootRecord=unmarshalRecord;
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(locator);
    }
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    unmarshalRecord.setAttributes(atts);
    if (atts != null && null == atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.startDocument();
      unmarshalRecord.initializeRecord(null);
      xmlReader.setContentHandler(unmarshalRecord);
      unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
      try {
        unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord);
      }
 catch (      SAXNotRecognizedException ex) {
      }
catch (      SAXNotSupportedException ex) {
      }
    }
 else {
      unmarshalRecord.setRootElementName(qName);
      unmarshalRecord.setLocalName(localName);
      unmarshalRecord.setRootElementNamespaceUri(namespaceURI);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
66602,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) {
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0, size=atts.getLength(); i < size; i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(XMLConstants.COLON);
            if (idx > 0) {
              attLocalName=qname.substring(idx + 1,qname.length());
              String attPrefix=qname.substring(0,idx);
              if (attPrefix.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
 else {
              attLocalName=qname;
              if (attLocalName.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=selfRecords.get(j);
            if (nestedRecord != null) {
              attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
              }
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (getCurrentObject() == null) {
    initializeRecord(atts);
  }
  if (null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) {
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0, size=atts.getLength(); i < size; i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(XMLConstants.COLON);
            if (idx > 0) {
              attLocalName=qname.substring(idx + 1,qname.length());
              String attPrefix=qname.substring(0,idx);
              if (attPrefix.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
 else {
              attLocalName=qname;
              if (attLocalName.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=selfRecords.get(j);
            if (nestedRecord != null) {
              attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
              }
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
66603,"public void startDocument(XMLMapping selfRecordMapping) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.isSequencedObject()) {
      unmarshalContext=new SequencedUnmarshalContext();
    }
 else {
      unmarshalContext=ObjectUnmarshalContext.getInstance();
    }
    Object object=this.xmlReader.getCurrentObject(session,selfRecordMapping);
    if (object == null) {
      object=treeObjectBuilder.buildNewInstance();
    }
    this.setCurrentObject(object);
    XMLUnmarshalListener xmlUnmarshalListener=unmarshaller.getUnmarshalListener();
    if (null != xmlUnmarshalListener) {
      if (null == this.parentRecord) {
        xmlUnmarshalListener.beforeUnmarshal(object,null);
      }
 else {
        xmlUnmarshalListener.beforeUnmarshal(object,parentRecord.getCurrentObject());
      }
    }
    if (null == parentRecord) {
      this.xmlReader.newObjectEvent(object,null,selfRecordMapping);
    }
 else {
      this.xmlReader.newObjectEvent(object,parentRecord.getCurrentObject(),selfRecordMapping);
    }
    List containerValues=treeObjectBuilder.getContainerValues();
    if (null != containerValues) {
      containersMap=new HashMap(containerValues.size());
      for (int x=0, containerValuesSize=containerValues.size(); x < containerValuesSize; x++) {
        ContainerValue containerValue=(ContainerValue)containerValues.get(x);
        Object containerInstance=null;
        if (containerValue.getReuseContainer()) {
          containerInstance=containerValue.getMapping().getAttributeAccessor().getAttributeValueFromObject(object);
        }
        if (null == containerInstance) {
          containerInstance=containerValue.getContainerInstance();
        }
        containersMap.put(containerValue,containerInstance);
      }
    }
    if (null != xPathNode.getSelfChildren()) {
      int selfChildrenSize=xPathNode.getSelfChildren().size();
      selfRecords=new ArrayList<UnmarshalRecord>(selfChildrenSize);
      for (int x=0; x < selfChildrenSize; x++) {
        XPathNode selfNode=xPathNode.getSelfChildren().get(x);
        if (null != selfNode.getNodeValue()) {
          selfRecords.add(selfNode.getNodeValue().buildSelfRecord(this,attributes));
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startDocument() throws SAXException {
}"
66604,"public void endCDATA() throws SAXException {
  lexicalHandler.endCDATA();
}","public void endCDATA() throws SAXException {
  if (null != lexicalHandler) {
    lexicalHandler.endCDATA();
  }
}"
66605,"public void startCDATA() throws SAXException {
  lexicalHandler.startCDATA();
}","public void startCDATA() throws SAXException {
  if (null != lexicalHandler) {
    lexicalHandler.startCDATA();
  }
}"
66606,"public void startEntity(String name) throws SAXException {
  lexicalHandler.startEntity(name);
}","public void startEntity(String name) throws SAXException {
  if (null != lexicalHandler) {
    lexicalHandler.startEntity(name);
  }
}"
66607,"public void endEntity(String name) throws SAXException {
  lexicalHandler.endEntity(name);
}","public void endEntity(String name) throws SAXException {
  if (null != lexicalHandler) {
    lexicalHandler.endEntity(name);
  }
}"
66608,"public void startDTD(String name,String publicId,String systemId) throws SAXException {
  lexicalHandler.startCDATA();
}","public void startDTD(String name,String publicId,String systemId) throws SAXException {
  if (null != lexicalHandler) {
    lexicalHandler.startCDATA();
  }
}"
66609,"public void endDTD() throws SAXException {
  lexicalHandler.endDTD();
}","public void endDTD() throws SAXException {
  if (null != lexicalHandler) {
    lexicalHandler.endDTD();
  }
}"
66610,"public void comment(char[] ch,int start,int length) throws SAXException {
  lexicalHandler.comment(ch,start,length);
}","public void comment(char[] ch,int start,int length) throws SAXException {
  if (null != lexicalHandler) {
    lexicalHandler.comment(ch,start,length);
  }
}"
66611,"public void setTypes(Type[] newTypes) throws Exception {
  this.classLoader=new JaxbClassLoader(Thread.currentThread().getContextClassLoader());
  generator=new Generator(new JavaModelInputImpl(newTypes,new JavaModelImpl(this.classLoader)));
  Project proj=generator.generateProject();
  proj.convertClassNamesToClasses(classLoader);
  setProject(proj);
  xmlContext=getXMLContext(proj);
  ConversionManager manager=new ConversionManager();
  manager.setLoader(classLoader);
  for (Iterator<ClassDescriptor> descriptorIt=proj.getOrderedDescriptors().iterator(); descriptorIt.hasNext(); ) {
    ClassDescriptor descriptor=descriptorIt.next();
    if (descriptor.getJavaClass() == null) {
      descriptor.setJavaClass(manager.convertClassNameToClass(descriptor.getJavaClassName()));
    }
  }
  setProject(proj);
  jaxbContext=new org.eclipse.persistence.jaxb.JAXBContext(xmlContext,generator,newTypes);
  jaxbMarshaller=jaxbContext.createMarshaller();
  jaxbUnmarshaller=jaxbContext.createUnmarshaller();
}","public void setTypes(Type[] newTypes) throws Exception {
  classLoader=Thread.currentThread().getContextClassLoader();
  jaxbContext=JAXBContextFactory.createContext(newTypes,getProperties(),classLoader);
  xmlContext=((org.eclipse.persistence.jaxb.JAXBContext)jaxbContext).getXMLContext();
  setProject(xmlContext.getSession(0).getProject());
  jaxbMarshaller=jaxbContext.createMarshaller();
  jaxbUnmarshaller=jaxbContext.createUnmarshaller();
}"
66612,"public void setClasses(Class[] newClasses) throws Exception {
  this.classes=newClasses;
  this.classLoader=new JaxbClassLoader(Thread.currentThread().getContextClassLoader());
  generator=new Generator(new JavaModelInputImpl(classes,new JavaModelImpl(this.classLoader)));
  Project proj=generator.generateProject();
  proj.convertClassNamesToClasses(classLoader);
  XMLPlatform platform=new SAXPlatform();
  platform.getConversionManager().setLoader(classLoader);
  XMLLogin login=new XMLLogin(platform);
  login.setEqualNamespaceResolvers(false);
  proj.setLogin(login);
  setProject(proj);
  xmlContext=getXMLContext(proj);
  ConversionManager manager=new ConversionManager();
  manager.setLoader(classLoader);
  for (Iterator<ClassDescriptor> descriptorIt=proj.getOrderedDescriptors().iterator(); descriptorIt.hasNext(); ) {
    ClassDescriptor descriptor=descriptorIt.next();
    if (descriptor.getJavaClass() == null) {
      descriptor.setJavaClass(manager.convertClassNameToClass(descriptor.getJavaClassName()));
    }
  }
  setProject(proj);
  jaxbContext=new org.eclipse.persistence.jaxb.JAXBContext(xmlContext,generator,newClasses);
  jaxbMarshaller=jaxbContext.createMarshaller();
  jaxbUnmarshaller=jaxbContext.createUnmarshaller();
}","public void setClasses(Class[] newClasses) throws Exception {
  classLoader=Thread.currentThread().getContextClassLoader();
  jaxbContext=JAXBContextFactory.createContext(newClasses,null,classLoader);
  xmlContext=((org.eclipse.persistence.jaxb.JAXBContext)jaxbContext).getXMLContext();
  setProject(xmlContext.getSession(0).getProject());
  jaxbMarshaller=jaxbContext.createMarshaller();
  jaxbUnmarshaller=jaxbContext.createUnmarshaller();
}"
66613,"public EmployeeCollectionTestCases(String name) throws Exception {
  super(name);
  setControlDocument(XML_RESOURCE);
  Class[] classes=new Class[1];
  classes[0]=ObjectFactory.class;
  setClasses(classes);
}","public EmployeeCollectionTestCases(String name) throws Exception {
  super(name);
  setControlDocument(XML_RESOURCE);
  Class[] classes=new Class[1];
  classes[0]=TestObjectFactory.class;
  setClasses(classes);
}"
66614,"public EmployeeSingleTestCases(String name) throws Exception {
  super(name);
  setControlDocument(XML_RESOURCE);
  Class[] classes=new Class[1];
  classes[0]=ObjectFactory.class;
  setClasses(classes);
}","public EmployeeSingleTestCases(String name) throws Exception {
  super(name);
  setControlDocument(XML_RESOURCE);
  Class[] classes=new Class[1];
  classes[0]=TestObjectFactory.class;
  setClasses(classes);
}"
66615,"/** 
 * Return if the tests were run using weaving, agent or static.
 */
public static boolean isWeavingEnabled(){
  if (""String_Node_Str"".equals(JUnitTestCase.getServerSession().getProperty(""String_Node_Str""))) {
    return false;
  }
  return System.getProperty(""String_Node_Str"") == null;
}","/** 
 * Return if the tests were run using weaving, agent or static.
 */
public static boolean isWeavingEnabled(String persistenceUnitName){
  if (""String_Node_Str"".equals(JUnitTestCase.getServerSession(persistenceUnitName).getProperty(""String_Node_Str""))) {
    return false;
  }
  return System.getProperty(""String_Node_Str"") == null;
}"
66616,"public void testVerifyFetchGroups(){
  ClassDescriptor hockeyGearDescriptor=getServerSession().getDescriptor(HockeyGear.class);
  FetchGroupManager hockeyGearFetchGroupManager=hockeyGearDescriptor.getFetchGroupManager();
  assertTrue(""String_Node_Str"",hockeyGearFetchGroupManager.getFetchGroups().size() == 1);
  assertNotNull(""String_Node_Str"",hockeyGearFetchGroupManager.getFetchGroup(""String_Node_Str""));
  ClassDescriptor padsDescriptor=getServerSession().getDescriptor(Pads.class);
  FetchGroupManager padsFetchGroupManager=padsDescriptor.getFetchGroupManager();
  assertTrue(""String_Node_Str"",padsFetchGroupManager.getFetchGroups().size() == 3);
  assertNotNull(""String_Node_Str"",padsFetchGroupManager.getFetchGroup(""String_Node_Str""));
  assertNotNull(""String_Node_Str"",padsFetchGroupManager.getFetchGroup(""String_Node_Str""));
  assertNotNull(""String_Node_Str"",padsFetchGroupManager.getFetchGroup(""String_Node_Str""));
  ClassDescriptor chestProtectorDescriptor=getServerSession().getDescriptor(ChestProtector.class);
  FetchGroupManager chestProtectorFetchGroupManager=chestProtectorDescriptor.getFetchGroupManager();
  assertTrue(""String_Node_Str"",chestProtectorFetchGroupManager.getFetchGroups().size() == 1);
  assertNotNull(""String_Node_Str"",chestProtectorFetchGroupManager.getFetchGroup(""String_Node_Str""));
}","public void testVerifyFetchGroups(){
  if (isWeavingEnabled()) {
    ClassDescriptor hockeyGearDescriptor=getServerSession().getDescriptor(HockeyGear.class);
    FetchGroupManager hockeyGearFetchGroupManager=hockeyGearDescriptor.getFetchGroupManager();
    assertTrue(""String_Node_Str"",hockeyGearFetchGroupManager.getFetchGroups().size() == 1);
    assertNotNull(""String_Node_Str"",hockeyGearFetchGroupManager.getFetchGroup(""String_Node_Str""));
    ClassDescriptor padsDescriptor=getServerSession().getDescriptor(Pads.class);
    FetchGroupManager padsFetchGroupManager=padsDescriptor.getFetchGroupManager();
    assertTrue(""String_Node_Str"",padsFetchGroupManager.getFetchGroups().size() == 3);
    assertNotNull(""String_Node_Str"",padsFetchGroupManager.getFetchGroup(""String_Node_Str""));
    assertNotNull(""String_Node_Str"",padsFetchGroupManager.getFetchGroup(""String_Node_Str""));
    assertNotNull(""String_Node_Str"",padsFetchGroupManager.getFetchGroup(""String_Node_Str""));
    ClassDescriptor chestProtectorDescriptor=getServerSession().getDescriptor(ChestProtector.class);
    FetchGroupManager chestProtectorFetchGroupManager=chestProtectorDescriptor.getFetchGroupManager();
    assertTrue(""String_Node_Str"",chestProtectorFetchGroupManager.getFetchGroups().size() == 1);
    assertNotNull(""String_Node_Str"",chestProtectorFetchGroupManager.getFetchGroup(""String_Node_Str""));
  }
}"
66617,"public void testFetchGroupOnPadsFromInheritanceParent(){
  EntityManager em=createEntityManager();
  Map properties=new HashMap();
  properties.put(QueryHints.FETCH_GROUP_NAME,""String_Node_Str"");
  Class PadsClass=Pads.class;
  Pads pads=(Pads)em.find(PadsClass,padsId,properties);
  try {
    verifyFetchedField(PadsClass.getField(""String_Node_Str""),pads,999.99);
    verifyNonFetchedField(PadsClass.getDeclaredField(""String_Node_Str""),pads);
    verifyNonFetchedField(PadsClass.getDeclaredField(""String_Node_Str""),pads);
    verifyNonFetchedField(PadsClass.getDeclaredField(""String_Node_Str""),pads);
    verifyNonFetchedField(PadsClass.getField(""String_Node_Str""),pads);
    verifyNonFetchedField(PadsClass.getField(""String_Node_Str""),pads);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
 finally {
    closeEntityManager(em);
  }
}","public void testFetchGroupOnPadsFromInheritanceParent(){
  if (isWeavingEnabled()) {
    EntityManager em=createEntityManager();
    Map properties=new HashMap();
    properties.put(QueryHints.FETCH_GROUP_NAME,""String_Node_Str"");
    Class PadsClass=Pads.class;
    Pads pads=(Pads)em.find(PadsClass,padsId,properties);
    try {
      verifyFetchedField(PadsClass.getField(""String_Node_Str""),pads,999.99);
      verifyNonFetchedField(PadsClass.getDeclaredField(""String_Node_Str""),pads);
      verifyNonFetchedField(PadsClass.getDeclaredField(""String_Node_Str""),pads);
      verifyNonFetchedField(PadsClass.getDeclaredField(""String_Node_Str""),pads);
      verifyNonFetchedField(PadsClass.getField(""String_Node_Str""),pads);
      verifyNonFetchedField(PadsClass.getField(""String_Node_Str""),pads);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e.getMessage());
    }
 finally {
      closeEntityManager(em);
    }
  }
}"
66618,"public void testCreateHockeyGear(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  try {
    Pads pads=new Pads();
    pads.setAgeGroup(AgeGroup.SENIOR);
    pads.setDescription(""String_Node_Str"");
    pads.setHeight(35.5);
    pads.setMsrp(999.99);
    pads.setWeight(4.9);
    pads.setWidth(11.0);
    em.persist(pads);
    ChestProtector chestProtector=new ChestProtector();
    chestProtector.setAgeGroup(AgeGroup.INTERMEDIATE);
    chestProtector.setDescription(""String_Node_Str"");
    chestProtector.setMsrp(599.99);
    chestProtector.setSize(""String_Node_Str"");
    em.persist(chestProtector);
    commitTransaction(em);
    padsId=pads.getSerialNumber();
    chestProtectorId=chestProtector.getSerialNumber();
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
}","public void testCreateHockeyGear(){
  if (isWeavingEnabled()) {
    EntityManager em=createEntityManager();
    beginTransaction(em);
    try {
      Pads pads=new Pads();
      pads.setAgeGroup(AgeGroup.SENIOR);
      pads.setDescription(""String_Node_Str"");
      pads.setHeight(35.5);
      pads.setMsrp(999.99);
      pads.setWeight(4.9);
      pads.setWidth(11.0);
      em.persist(pads);
      ChestProtector chestProtector=new ChestProtector();
      chestProtector.setAgeGroup(AgeGroup.INTERMEDIATE);
      chestProtector.setDescription(""String_Node_Str"");
      chestProtector.setMsrp(599.99);
      chestProtector.setSize(""String_Node_Str"");
      em.persist(chestProtector);
      commitTransaction(em);
      padsId=pads.getSerialNumber();
      chestProtectorId=chestProtector.getSerialNumber();
    }
 catch (    RuntimeException e) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw e;
    }
  }
}"
66619,"public void testFetchGroupOnPads(){
  EntityManager em=createEntityManager();
  Map properties=new HashMap();
  properties.put(QueryHints.FETCH_GROUP_NAME,""String_Node_Str"");
  Class PadsClass=Pads.class;
  Pads pads=(Pads)em.find(PadsClass,padsId,properties);
  try {
    verifyFetchedField(PadsClass.getDeclaredField(""String_Node_Str""),pads,35.5);
    verifyFetchedField(PadsClass.getDeclaredField(""String_Node_Str""),pads,11.0);
    verifyNonFetchedField(PadsClass.getDeclaredField(""String_Node_Str""),pads);
    verifyNonFetchedField(PadsClass.getField(""String_Node_Str""),pads);
    verifyNonFetchedField(PadsClass.getField(""String_Node_Str""),pads);
    verifyNonFetchedField(PadsClass.getField(""String_Node_Str""),pads);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
 finally {
    closeEntityManager(em);
  }
}","public void testFetchGroupOnPads(){
  if (isWeavingEnabled()) {
    EntityManager em=createEntityManager();
    Map properties=new HashMap();
    properties.put(QueryHints.FETCH_GROUP_NAME,""String_Node_Str"");
    Class PadsClass=Pads.class;
    Pads pads=(Pads)em.find(PadsClass,padsId,properties);
    try {
      verifyFetchedField(PadsClass.getDeclaredField(""String_Node_Str""),pads,35.5);
      verifyFetchedField(PadsClass.getDeclaredField(""String_Node_Str""),pads,11.0);
      verifyNonFetchedField(PadsClass.getDeclaredField(""String_Node_Str""),pads);
      verifyNonFetchedField(PadsClass.getField(""String_Node_Str""),pads);
      verifyNonFetchedField(PadsClass.getField(""String_Node_Str""),pads);
      verifyNonFetchedField(PadsClass.getField(""String_Node_Str""),pads);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e.getMessage());
    }
 finally {
      closeEntityManager(em);
    }
  }
}"
66620,"public void testFetchGroupOnChestProtector(){
  EntityManager em=createEntityManager();
  Map properties=new HashMap();
  properties.put(QueryHints.FETCH_GROUP_NAME,""String_Node_Str"");
  Class chestProtectorClass=ChestProtector.class;
  ChestProtector chestProtector=(ChestProtector)em.find(chestProtectorClass,chestProtectorId,properties);
  try {
    verifyFetchedField(chestProtectorClass.getField(""String_Node_Str""),chestProtector,AgeGroup.INTERMEDIATE);
    verifyNonFetchedField(chestProtectorClass.getField(""String_Node_Str""),chestProtector);
    verifyNonFetchedField(chestProtectorClass.getField(""String_Node_Str""),chestProtector);
    verifyNonFetchedField(chestProtectorClass.getDeclaredField(""String_Node_Str""),chestProtector);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
 finally {
    closeEntityManager(em);
  }
}","public void testFetchGroupOnChestProtector(){
  if (isWeavingEnabled()) {
    EntityManager em=createEntityManager();
    Map properties=new HashMap();
    properties.put(QueryHints.FETCH_GROUP_NAME,""String_Node_Str"");
    Class chestProtectorClass=ChestProtector.class;
    ChestProtector chestProtector=(ChestProtector)em.find(chestProtectorClass,chestProtectorId,properties);
    try {
      verifyFetchedField(chestProtectorClass.getField(""String_Node_Str""),chestProtector,AgeGroup.INTERMEDIATE);
      verifyNonFetchedField(chestProtectorClass.getField(""String_Node_Str""),chestProtector);
      verifyNonFetchedField(chestProtectorClass.getField(""String_Node_Str""),chestProtector);
      verifyNonFetchedField(chestProtectorClass.getDeclaredField(""String_Node_Str""),chestProtector);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e.getMessage());
    }
 finally {
      closeEntityManager(em);
    }
  }
}"
66621,"public void addTests(){
  super.addTests();
  TestSuite unicodeSuite=new TestSuite();
  unicodeSuite.setName(""String_Node_Str"");
  unicodeSuite.setDescription(""String_Node_Str"");
  unicodeSuite.addTest(new ProjectClassGeneratorUnicodeTest());
  addTest(unicodeSuite);
  addTest(new ProjectClassGeneratorOrderByQueryKeysTest());
}","public void addTests(){
  super.addTests();
  TestSuite unicodeSuite=new TestSuite();
  unicodeSuite.setName(""String_Node_Str"");
  unicodeSuite.setDescription(""String_Node_Str"");
  unicodeSuite.addTest(new ProjectClassGeneratorUnicodeTest());
  addTest(unicodeSuite);
  addTest(new ProjectClassGeneratorOrderByQueryKeysTest());
  addTest(new ProjectClassGeneratorInheritanceMappingTest());
}"
66622,"/** 
 * Return the printed version of the primitive value object. This must determine the class and use the correct constrcutor arguments.
 */
protected String printString(Object value){
  if ((value == null) || (value == Helper.getNullWrapper())) {
    return ""String_Node_Str"";
  }
  if (value instanceof String) {
    return ""String_Node_Str"" + value + ""String_Node_Str"";
  }
  if (value instanceof Character) {
    return ""String_Node_Str"" + value + ""String_Node_Str"";
  }
  if (value instanceof java.util.Date) {
    java.util.Date date=(java.util.Date)value;
    return ""String_Node_Str"" + value.getClass().getName() + ""String_Node_Str""+ date.getTime()+ ""String_Node_Str"";
  }
  return ""String_Node_Str"" + value.getClass().getName() + ""String_Node_Str""+ value+ ""String_Node_Str"";
}","/** 
 * Return the printed version of the primitive value object. This must determine the class and use the correct constrcutor arguments.
 */
protected String printString(Object value){
  if ((value == null) || (value == Helper.getNullWrapper())) {
    return ""String_Node_Str"";
  }
  if (value instanceof String) {
    return ""String_Node_Str"" + value + ""String_Node_Str"";
  }
  if (value instanceof Character) {
    return ""String_Node_Str"" + value + ""String_Node_Str"";
  }
  if (value instanceof java.util.Date) {
    java.util.Date date=(java.util.Date)value;
    return ""String_Node_Str"" + value.getClass().getName() + ""String_Node_Str""+ date.getTime()+ ""String_Node_Str"";
  }
  return ""String_Node_Str"" + value.getClass().getName() + ""String_Node_Str""+ String.valueOf(value)+ ""String_Node_Str"";
}"
66623,"/** 
 * Return an object retrieved from resultSet with the getObject() method. Optimize the get for certain type to avoid double conversion. <b>NOTE</b>: This method handles a virtual machine error thrown when retrieving times & dates from Oracle or Sybase.
 */
public Object getObject(ResultSet resultSet,DatabaseField field,ResultSetMetaData metaData,int columnNumber,DatabasePlatform platform,boolean optimizeData,AbstractSession session) throws DatabaseException {
  Object value=null;
  try {
    int type=field.sqlType;
    if (type == NULL_SQL_TYPE) {
      type=metaData.getColumnType(columnNumber);
      field.setSqlType(type);
    }
    if (optimizeData) {
      try {
        value=getObjectThroughOptimizedDataConversion(resultSet,field,type,columnNumber,platform,session);
        if (value == null) {
          return null;
        }
        if (value == this) {
          value=null;
        }
      }
 catch (      SQLException exception) {
        if (session.shouldLog(SessionLog.WARNING,SessionLog.SQL)) {
          session.logThrowable(SessionLog.WARNING,SessionLog.SQL,exception);
        }
      }
    }
    if (value == null) {
      if ((type == Types.LONGVARBINARY) && platform.usesStreamsForBinding()) {
        InputStream tempInputStream;
        tempInputStream=resultSet.getBinaryStream(columnNumber);
        if (tempInputStream != null) {
          try {
            ByteArrayOutputStream tempOutputStream=new ByteArrayOutputStream();
            int tempInt=tempInputStream.read();
            while (tempInt != -1) {
              tempOutputStream.write(tempInt);
              tempInt=tempInputStream.read();
            }
            value=tempOutputStream.toByteArray();
          }
 catch (          IOException exception) {
            throw DatabaseException.errorReadingBlobData();
          }
        }
 else {
          value=null;
        }
      }
 else {
        value=platform.getObjectFromResultSet(resultSet,columnNumber,type,session);
        if (isBlob(type)) {
          value=platform.convertObject(value,ClassConstants.APBYTE);
        }
        if (isClob(type)) {
          value=platform.convertObject(value,ClassConstants.STRING);
        }
        if (isArray(type)) {
          value=ObjectRelationalDataTypeDescriptor.buildArrayObjectFromArray(value);
        }
        if (isStruct(type,value)) {
          value=ObjectRelationalDataTypeDescriptor.buildArrayObjectFromStruct(value);
        }
      }
    }
    if ((!optimizeData) && resultSet.wasNull()) {
      value=null;
    }
  }
 catch (  SQLException exception) {
    DatabaseException commException=processExceptionForCommError(session,exception,null);
    if (commException != null)     throw commException;
    throw DatabaseException.sqlException(exception,this,session,false);
  }
  return value;
}","/** 
 * Return an object retrieved from resultSet with the getObject() method. Optimize the get for certain type to avoid double conversion. <b>NOTE</b>: This method handles a virtual machine error thrown when retrieving times & dates from Oracle or Sybase.
 */
public Object getObject(ResultSet resultSet,DatabaseField field,ResultSetMetaData metaData,int columnNumber,DatabasePlatform platform,boolean optimizeData,AbstractSession session) throws DatabaseException {
  Object value=null;
  try {
    int type=field.sqlType;
    if (type == NULL_SQL_TYPE) {
      type=metaData.getColumnType(columnNumber);
      field.setSqlType(type);
    }
    if (optimizeData) {
      try {
        value=getObjectThroughOptimizedDataConversion(resultSet,field,type,columnNumber,platform,session);
        if (value == null) {
          return null;
        }
        if (value == this) {
          value=null;
        }
      }
 catch (      SQLException exception) {
        if (session.shouldLog(SessionLog.WARNING,SessionLog.SQL)) {
          session.logThrowable(SessionLog.WARNING,SessionLog.SQL,exception);
        }
      }
    }
    if (value == null) {
      if ((type == Types.LONGVARBINARY) && platform.usesStreamsForBinding()) {
        InputStream tempInputStream;
        tempInputStream=resultSet.getBinaryStream(columnNumber);
        if (tempInputStream != null) {
          try {
            ByteArrayOutputStream tempOutputStream=new ByteArrayOutputStream();
            int tempInt=tempInputStream.read();
            while (tempInt != -1) {
              tempOutputStream.write(tempInt);
              tempInt=tempInputStream.read();
            }
            value=tempOutputStream.toByteArray();
          }
 catch (          IOException exception) {
            throw DatabaseException.errorReadingBlobData();
          }
        }
 else {
          value=null;
        }
      }
 else {
        value=platform.getObjectFromResultSet(resultSet,columnNumber,type,session);
        if (isBlob(type)) {
          Object originalValue=value;
          value=platform.convertObject(value,ClassConstants.APBYTE);
          platform.freeTemporaryObject(originalValue);
        }
        if (isClob(type)) {
          Object originalValue=value;
          value=platform.convertObject(value,ClassConstants.STRING);
          platform.freeTemporaryObject(originalValue);
        }
        if (isArray(type)) {
          value=ObjectRelationalDataTypeDescriptor.buildArrayObjectFromArray(value);
        }
        if (isStruct(type,value)) {
          value=ObjectRelationalDataTypeDescriptor.buildArrayObjectFromStruct(value);
        }
      }
    }
    if ((!optimizeData) && resultSet.wasNull()) {
      value=null;
    }
  }
 catch (  SQLException exception) {
    DatabaseException commException=processExceptionForCommError(session,exception,null);
    if (commException != null)     throw commException;
    throw DatabaseException.sqlException(exception,this,session,false);
  }
  return value;
}"
66624,"public void testDatahandlerTypes() throws Exception {
  TypeMappingInfo tmi=new TypeMappingInfo();
  tmi.setType(DataHandler.class);
  tmi.setElementScope(TypeMappingInfo.ElementScope.Local);
  tmi.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
  Annotation[] annotations=getClass().getField(""String_Node_Str"").getAnnotations();
  tmi.setAnnotations(annotations);
  TypeMappingInfo tmi2=new TypeMappingInfo();
  tmi2.setElementScope(TypeMappingInfo.ElementScope.Local);
  tmi2.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
  tmi2.setType(DataHandler.class);
  TypeMappingInfo[] tmis=new TypeMappingInfo[]{tmi,tmi2};
  JAXBContext ctx=(JAXBContext)JAXBContextFactory.createContext(tmis,null,Thread.currentThread().getContextClassLoader());
  Map<Type,QName> typeMap=ctx.getTypeToSchemaType();
  assertEquals(0,typeMap.size());
  Map<TypeMappingInfo,QName> tmiMap=ctx.getTypeMappingInfoToSchemaType();
  assertEquals(2,tmiMap.size());
  assertNotNull(tmiMap.get(tmi2));
  assertEquals(XMLConstants.BASE_64_BINARY_QNAME,tmiMap.get(tmi2));
  assertNotNull(tmiMap.get(tmi));
}","public void testDatahandlerTypes() throws Exception {
  TypeMappingInfo tmi=new TypeMappingInfo();
  tmi.setType(DataHandler.class);
  tmi.setElementScope(TypeMappingInfo.ElementScope.Local);
  tmi.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
  Annotation[] annotations=getClass().getField(""String_Node_Str"").getAnnotations();
  tmi.setAnnotations(annotations);
  TypeMappingInfo tmi2=new TypeMappingInfo();
  tmi2.setElementScope(TypeMappingInfo.ElementScope.Local);
  tmi2.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
  tmi2.setType(DataHandler.class);
  TypeMappingInfo[] tmis=new TypeMappingInfo[]{tmi,tmi2};
  JAXBContext ctx=(JAXBContext)JAXBContextFactory.createContext(tmis,null,Thread.currentThread().getContextClassLoader());
  Map<Type,QName> typeMap=ctx.getTypeToSchemaType();
  assertEquals(0,typeMap.size());
  Map<TypeMappingInfo,QName> tmiMap=ctx.getTypeMappingInfoToSchemaType();
  assertEquals(2,tmiMap.size());
  assertNotNull(tmiMap.get(tmi2));
  assertEquals(XMLConstants.BASE_64_BINARY_QNAME,tmiMap.get(tmi2));
  assertNotNull(tmiMap.get(tmi));
  assertEquals(XMLConstants.SWA_REF_QNAME,tmiMap.get(tmi));
}"
66625,"public Map<TypeMappingInfo,QName> getTypeMappingInfoToSchemaType(){
  if (typeMappingInfoToSchemaType == null) {
    initTypeMappingInfoToSchemaType();
  }
  return typeMappingInfoToSchemaType;
}","public Map<TypeMappingInfo,QName> getTypeMappingInfoToSchemaType(){
  if (typeToTypeMappingInfo != null && typeToTypeMappingInfo.size() > 0) {
    return new HashMap<TypeMappingInfo,QName>();
  }
  return generator.getAnnotationsProcessor().getTypeMappingInfoToSchemaType();
}"
66626,"/** 
 * Initialize maps, lists, etc. Typically called prior to processing a set of  classes via preBuildTypeInfo, postBuildTypeInfo, processJavaClasses.
 */
void init(JavaClass[] classes,TypeMappingInfo[] typeMappingInfos){
  typeInfoClasses=new ArrayList<JavaClass>();
  typeInfo=new HashMap<String,TypeInfo>();
  typeQNames=new ArrayList<QName>();
  userDefinedSchemaTypes=new HashMap<String,QName>();
  if (packageToNamespaceMappings == null) {
    packageToNamespaceMappings=new HashMap<String,NamespaceInfo>();
  }
  this.factoryMethods=new HashMap<String,JavaMethod>();
  this.namespaceResolver=new NamespaceResolver();
  this.xmlRootElements=new HashMap<String,ElementDeclaration>();
  arrayClassesToGeneratedClasses=new HashMap<String,Class>();
  collectionClassesToGeneratedClasses=new HashMap<java.lang.reflect.Type,Class>();
  generatedClassesToArrayClasses=new HashMap<Class,JavaClass>();
  generatedClassesToCollectionClasses=new HashMap<Class,java.lang.reflect.Type>();
  typeMappingInfoToGeneratedClasses=new HashMap<TypeMappingInfo,Class>();
  globalElements=new HashMap<QName,ElementDeclaration>();
  localElements=new ArrayList<ElementDeclaration>();
  javaClassToTypeMappingInfos=new HashMap<JavaClass,TypeMappingInfo>();
  if (typeMappingInfos != null) {
    for (int i=0; i < typeMappingInfos.length; i++) {
      javaClassToTypeMappingInfos.put(classes[i],typeMappingInfos[i]);
    }
  }
  typeMappingInfoToAdapterClasses=new HashMap<TypeMappingInfo,Class>();
  if (typeMappingInfos != null) {
    for (    TypeMappingInfo next : typeMappingInfos) {
      java.lang.annotation.Annotation[] annotations=getAnnotations(next);
      if (annotations != null) {
        for (        java.lang.annotation.Annotation nextAnnotation : annotations) {
          if (nextAnnotation instanceof XmlJavaTypeAdapter) {
            typeMappingInfoToAdapterClasses.put(next,((XmlJavaTypeAdapter)nextAnnotation).value());
          }
        }
      }
    }
  }
}","/** 
 * Initialize maps, lists, etc. Typically called prior to processing a set of  classes via preBuildTypeInfo, postBuildTypeInfo, processJavaClasses.
 */
void init(JavaClass[] classes,TypeMappingInfo[] typeMappingInfos){
  typeInfoClasses=new ArrayList<JavaClass>();
  typeInfo=new HashMap<String,TypeInfo>();
  typeQNames=new ArrayList<QName>();
  userDefinedSchemaTypes=new HashMap<String,QName>();
  if (packageToNamespaceMappings == null) {
    packageToNamespaceMappings=new HashMap<String,NamespaceInfo>();
  }
  this.factoryMethods=new HashMap<String,JavaMethod>();
  this.namespaceResolver=new NamespaceResolver();
  this.xmlRootElements=new HashMap<String,ElementDeclaration>();
  arrayClassesToGeneratedClasses=new HashMap<String,Class>();
  collectionClassesToGeneratedClasses=new HashMap<java.lang.reflect.Type,Class>();
  generatedClassesToArrayClasses=new HashMap<Class,JavaClass>();
  generatedClassesToCollectionClasses=new HashMap<Class,java.lang.reflect.Type>();
  typeMappingInfoToGeneratedClasses=new HashMap<TypeMappingInfo,Class>();
  typeMappingInfoToSchemaType=new HashMap<TypeMappingInfo,QName>();
  globalElements=new HashMap<QName,ElementDeclaration>();
  localElements=new ArrayList<ElementDeclaration>();
  javaClassToTypeMappingInfos=new HashMap<JavaClass,TypeMappingInfo>();
  if (typeMappingInfos != null) {
    for (int i=0; i < typeMappingInfos.length; i++) {
      javaClassToTypeMappingInfos.put(classes[i],typeMappingInfos[i]);
    }
  }
  typeMappingInfoToAdapterClasses=new HashMap<TypeMappingInfo,Class>();
  if (typeMappingInfos != null) {
    for (    TypeMappingInfo next : typeMappingInfos) {
      java.lang.annotation.Annotation[] annotations=getAnnotations(next);
      if (annotations != null) {
        for (        java.lang.annotation.Annotation nextAnnotation : annotations) {
          if (nextAnnotation instanceof XmlJavaTypeAdapter) {
            typeMappingInfoToAdapterClasses.put(next,((XmlJavaTypeAdapter)nextAnnotation).value());
          }
        }
      }
    }
  }
}"
66627,"public void createElementsForTypeMappingInfo(){
  if (this.javaClassToTypeMappingInfos != null && !this.javaClassToTypeMappingInfos.isEmpty()) {
    Set<JavaClass> classes=this.javaClassToTypeMappingInfos.keySet();
    for (    JavaClass nextClass : classes) {
      TypeMappingInfo nextInfo=this.javaClassToTypeMappingInfos.get(nextClass);
      if (nextInfo != null) {
        boolean xmlAttachmentRef=false;
        String xmlMimeType=null;
        java.lang.annotation.Annotation[] annotations=getAnnotations(nextInfo);
        Class adapterClass=this.typeMappingInfoToAdapterClasses.get(nextInfo);
        if (annotations != null) {
          for (int j=0; j < annotations.length; j++) {
            java.lang.annotation.Annotation nextAnnotation=annotations[j];
            if (nextAnnotation != null) {
              if (nextAnnotation instanceof XmlMimeType) {
                XmlMimeType javaAnnotation=(XmlMimeType)nextAnnotation;
                xmlMimeType=javaAnnotation.value();
              }
 else               if (nextAnnotation instanceof XmlAttachmentRef) {
                xmlAttachmentRef=true;
              }
            }
          }
        }
        if (nextInfo.getXmlTagName() != null) {
          ElementDeclaration element=new ElementDeclaration(nextInfo.getXmlTagName(),nextClass,nextClass.getQualifiedName(),false);
          element.setTypeMappingInfo(nextInfo);
          element.setXmlMimeType(xmlMimeType);
          element.setXmlAttachmentRef(xmlAttachmentRef);
          if (adapterClass != null) {
            Class declJavaType=CompilerHelper.getTypeFromAdapterClass(adapterClass);
            if (declJavaType != null) {
              element.setJavaType(helper.getJavaClass(declJavaType));
            }
          }
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            element.setJavaType(helper.getJavaClass(generatedClass));
          }
          if (nextInfo.getElementScope() == TypeMappingInfo.ElementScope.Global) {
            this.globalElements.put(element.getElementName(),element);
          }
 else {
            this.localElements.add(element);
          }
        }
      }
    }
  }
}","public void createElementsForTypeMappingInfo(){
  if (this.javaClassToTypeMappingInfos != null && !this.javaClassToTypeMappingInfos.isEmpty()) {
    Set<JavaClass> classes=this.javaClassToTypeMappingInfos.keySet();
    for (    JavaClass nextClass : classes) {
      TypeMappingInfo nextInfo=this.javaClassToTypeMappingInfos.get(nextClass);
      if (nextInfo != null) {
        boolean xmlAttachmentRef=false;
        String xmlMimeType=null;
        java.lang.annotation.Annotation[] annotations=getAnnotations(nextInfo);
        Class adapterClass=this.typeMappingInfoToAdapterClasses.get(nextInfo);
        Class declJavaType=null;
        if (adapterClass != null) {
          declJavaType=CompilerHelper.getTypeFromAdapterClass(adapterClass);
        }
        if (annotations != null) {
          for (int j=0; j < annotations.length; j++) {
            java.lang.annotation.Annotation nextAnnotation=annotations[j];
            if (nextAnnotation != null) {
              if (nextAnnotation instanceof XmlMimeType) {
                XmlMimeType javaAnnotation=(XmlMimeType)nextAnnotation;
                xmlMimeType=javaAnnotation.value();
              }
 else               if (nextAnnotation instanceof XmlAttachmentRef) {
                xmlAttachmentRef=true;
              }
            }
          }
        }
        QName qname=null;
        String nextClassName=nextClass.getRawName();
        if (declJavaType != null) {
          nextClassName=declJavaType.getCanonicalName();
        }
        if (typeMappingInfoToGeneratedClasses != null) {
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            nextClassName=generatedClass.getCanonicalName();
          }
        }
        TypeInfo nextTypeInfo=typeInfo.get(nextClassName);
        if (nextTypeInfo != null) {
          qname=new QName(nextTypeInfo.getClassNamespace(),nextTypeInfo.getSchemaTypeName());
        }
 else {
          qname=getUserDefinedSchemaTypes().get(nextClassName);
          if (qname == null) {
            if (nextClassName.equals(ClassConstants.ABYTE.getCanonicalName()) || nextClassName.equals(ClassConstants.APBYTE.getCanonicalName()) || nextClassName.equals(Image.class.getCanonicalName())|| nextClassName.equals(Source.class.getCanonicalName())|| nextClassName.equals(""String_Node_Str"")) {
              if (xmlAttachmentRef) {
                qname=XMLConstants.SWA_REF_QNAME;
              }
 else {
                qname=XMLConstants.BASE_64_BINARY_QNAME;
              }
            }
 else             if (nextClassName.equals(ClassConstants.OBJECT.getCanonicalName())) {
              qname=XMLConstants.ANY_TYPE_QNAME;
            }
 else {
              Class theClass=helper.getClassForJavaClass(nextClass);
              qname=(QName)XMLConversionManager.getDefaultJavaTypes().get(theClass);
            }
          }
        }
        if (qname != null) {
          typeMappingInfoToSchemaType.put(nextInfo,qname);
        }
        if (nextInfo.getXmlTagName() != null) {
          ElementDeclaration element=new ElementDeclaration(nextInfo.getXmlTagName(),nextClass,nextClass.getQualifiedName(),false);
          element.setTypeMappingInfo(nextInfo);
          element.setXmlMimeType(xmlMimeType);
          element.setXmlAttachmentRef(xmlAttachmentRef);
          if (declJavaType != null) {
            element.setJavaType(helper.getJavaClass(declJavaType));
          }
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            element.setJavaType(helper.getJavaClass(generatedClass));
          }
          if (nextInfo.getElementScope() == TypeMappingInfo.ElementScope.Global) {
            this.globalElements.put(element.getElementName(),element);
          }
 else {
            this.localElements.add(element);
          }
        }
      }
    }
  }
}"
66628,"public InheritedTableManager(){
  setName(""String_Node_Str"");
  addTableDefinition(build_BEER_CONSUMER_Table());
  addTableDefinition(build_BEER_CONSUMER_REDSTRIPES_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_AWARDS_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_ACCLAIMS_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_AUDIO_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_CELEBRATIONS_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_COMMITTEE_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_DESIGNATIONS_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_QUOTES_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_RECORDS_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_ACCREDIDATION_WITNESS_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_AWARDS_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_ACCLAIMS_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_COMMITTEE_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_DESIGNATIONS_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_RECORDS_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_ACCREDIDATION_WITNESS_Table());
  addTableDefinition(build_ALPINE_Table());
  addTableDefinition(build_BECKS_Table());
  addTableDefinition(build_BECKS_TAG_Table());
  addTableDefinition(build_BLUE_Table());
  addTableDefinition(build_CANADIAN_Table());
  addTableDefinition(build_CORONA_Table());
  addTableDefinition(build_HEINEKEN_Table());
  addTableDefinition(build_OFFICIAL_Table());
  addTableDefinition(build_WITNESS_Table());
  addTableDefinition(build_CERTIFICATION_Table());
  addTableDefinition(build_COMMITTEE_Table());
  addTableDefinition(build_SERIALNUMBER_Table());
  addTableDefinition(build_TELEPHONE_NUMBER_Table());
  addTableDefinition(build_LOCATION_Table());
  addTableDefinition(build_BC_LOOKUP_Table());
}","public InheritedTableManager(){
  setName(""String_Node_Str"");
  addTableDefinition(build_BEER_CONSUMER_Table());
  addTableDefinition(build_BEER_CONSUMER_REDSTRIPES_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_AWARDS_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_COURSES_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_ACCLAIMS_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_AUDIO_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_CELEBRATIONS_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_COMMITTEE_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_DESIGNATIONS_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_QUOTES_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_RECORDS_Table());
  addTableDefinition(build_EXPERT_BEER_CONSUMER_ACCREDIDATION_WITNESS_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_AWARDS_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_ACCLAIMS_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_COMMITTEE_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_DESIGNATIONS_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_RECORDS_Table());
  addTableDefinition(build_NOVICE_BEER_CONSUMER_ACCREDIDATION_WITNESS_Table());
  addTableDefinition(build_ALPINE_Table());
  addTableDefinition(build_BECKS_Table());
  addTableDefinition(build_BECKS_TAG_Table());
  addTableDefinition(build_BLUE_Table());
  addTableDefinition(build_CANADIAN_Table());
  addTableDefinition(build_CORONA_Table());
  addTableDefinition(build_HEINEKEN_Table());
  addTableDefinition(build_OFFICIAL_Table());
  addTableDefinition(build_WITNESS_Table());
  addTableDefinition(build_CERTIFICATION_Table());
  addTableDefinition(build_COMMITTEE_Table());
  addTableDefinition(build_SERIALNUMBER_Table());
  addTableDefinition(build_TELEPHONE_NUMBER_Table());
  addTableDefinition(build_LOCATION_Table());
  addTableDefinition(build_BC_LOOKUP_Table());
}"
66629,"/** 
 * INTERNAL: Add the accessor to the descriptor
 */
protected void addAccessor(MappingAccessor accessor){
  if (accessor != null) {
    accessor.addConverters();
    if (accessor.isEmbeddedId()) {
      getProject().addIdClass(accessor.getReferenceClassName());
    }
    addPotentialEmbeddableAccessor(accessor.getReferenceClass(),accessor.getClassAccessor());
    if (accessor.isMappedKeyMapAccessor()) {
      MappedKeyMapAccessor mapAccessor=(MappedKeyMapAccessor)accessor;
      MetadataClass mapKeyClass=mapAccessor.getMapKeyClass();
      if (mapKeyClass == null || mapKeyClass.equals(void.class)) {
        mapKeyClass=accessor.getAccessibleObject().getMapKeyClass(getDescriptor());
        if (mapKeyClass == null) {
          throw ValidationException.unableToDetermineMapKeyClass(accessor.getAttributeName(),accessor.getJavaClass());
        }
 else {
          mapAccessor.setMapKeyClass(mapKeyClass);
        }
      }
      addPotentialEmbeddableAccessor(mapKeyClass,accessor.getClassAccessor());
    }
    getDescriptor().addAccessor(accessor);
  }
}","/** 
 * INTERNAL: Add the accessor to the descriptor
 */
protected void addAccessor(MappingAccessor accessor){
  if (accessor != null) {
    accessor.addConverters();
    if (accessor.isEmbeddedId()) {
      getProject().addIdClass(accessor.getReferenceClassName());
    }
    addPotentialEmbeddableAccessor(accessor.getReferenceClass(),accessor.getClassAccessor());
    if (accessor.isMappedKeyMapAccessor()) {
      MappedKeyMapAccessor mapAccessor=(MappedKeyMapAccessor)accessor;
      MetadataClass mapKeyClass=mapAccessor.getMapKeyClass();
      if (mapKeyClass == null || mapKeyClass.equals(void.class)) {
        mapKeyClass=accessor.getMapKeyReferenceClass();
        mapAccessor.setMapKeyClass(mapKeyClass);
      }
      addPotentialEmbeddableAccessor(mapKeyClass,accessor.getClassAccessor());
    }
    getDescriptor().addAccessor(accessor);
  }
}"
66630,"/** 
 * INTERNAL:
 */
protected DirectToFieldMapping processDirectMapKeyClass(MappedKeyMapAccessor mappedKeyMapAccessor){
  DirectToFieldMapping keyMapping=new DirectToFieldMapping();
  DatabaseField mapKeyField=getDatabaseField(getReferenceDatabaseTable(),MetadataLogger.MAP_KEY_COLUMN);
  keyMapping.setField(mapKeyField);
  keyMapping.setIsReadOnly(mapKeyField.isReadOnly());
  processMappingKeyConverter(keyMapping,mappedKeyMapAccessor.getMapKeyConvert(),mappedKeyMapAccessor.getMapKeyClass());
  keyMapping.setAttributeClassificationName(getMapKeyReferenceClass().getName());
  keyMapping.setDescriptor(getDescriptor().getClassDescriptor());
  return keyMapping;
}","/** 
 * INTERNAL:
 */
protected DirectToFieldMapping processDirectMapKeyClass(MappedKeyMapAccessor mappedKeyMapAccessor){
  DirectToFieldMapping keyMapping=new DirectToFieldMapping();
  DatabaseField mapKeyField=getDatabaseField(getReferenceDatabaseTable(),MetadataLogger.MAP_KEY_COLUMN);
  keyMapping.setField(mapKeyField);
  keyMapping.setIsReadOnly(mapKeyField.isReadOnly());
  processMappingKeyConverter(keyMapping,mappedKeyMapAccessor.getMapKeyConvert(),mappedKeyMapAccessor.getMapKeyClass());
  keyMapping.setAttributeClassificationName(mappedKeyMapAccessor.getMapKeyClass().getName());
  keyMapping.setDescriptor(getDescriptor().getClassDescriptor());
  return keyMapping;
}"
66631,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=null;
    boolean isPrimitiveType=false;
    Class primitiveWrapperClass=null;
    String type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (null != type) {
      XPathFragment typeFragment=new XPathFragment(type);
      if (null != unmarshalNamespaceResolver) {
        typeFragment.setNamespaceURI(unmarshalNamespaceResolver.getNamespaceURI(typeFragment.getPrefix()));
      }
      xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      if (xmlDescriptor == null) {
        primitiveWrapperClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(new QName(typeFragment.getNamespaceURI(),typeFragment.getLocalName()));
      }
    }
    if (xmlDescriptor == null) {
      String name;
      if (localName == null || localName.length() == 0) {
        name=qName;
      }
 else {
        name=localName;
      }
      QName rootQName;
      if (namespaceURI == null || namespaceURI.length() == 0) {
        rootQName=new QName(name);
      }
 else {
        rootQName=new QName(namespaceURI,name);
      }
      xmlDescriptor=xmlContext.getDescriptor(rootQName);
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(XMLDescriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
        if (xmlDescriptor == null) {
          isPrimitiveType=primitiveWrapperClass != null;
        }
      }
      if (null == xmlDescriptor && !isPrimitiveType) {
        if (this.keepAsElementPolicy != UnmarshalKeepAsElementPolicy.KEEP_NONE_AS_ELEMENT) {
          this.documentBuilder=new SAXDocumentBuilder();
          documentBuilder.startDocument();
          for (          String prefix : this.unmarshalNamespaceResolver.getPrefixes()) {
            documentBuilder.startPrefixMapping(prefix,this.unmarshalNamespaceResolver.getNamespaceURI(prefix));
          }
          documentBuilder.startElement(namespaceURI,localName,qName,atts);
          this.xmlReader.setContentHandler(documentBuilder);
          return;
        }
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.setUnmarshalRecord(unmappedContentHandlerWrapper);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getReadSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (isPrimitiveType) {
      unmarshalRecord=new XMLRootRecord(primitiveWrapperClass);
      unmarshalRecord.setSession((AbstractSession)unmarshaller.getXMLContext().getSession(0));
    }
 else     if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecord(null);
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator == null) {
            throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
          classValue=(Class)indicator;
        }
      }
      if (classValue != null) {
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
 else {
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
    this.descriptor=xmlDescriptor;
    this.rootRecord=unmarshalRecord;
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(locator);
    }
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    unmarshalRecord.setAttributes(atts);
    if (atts != null && null == atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.startDocument();
      xmlReader.setContentHandler(unmarshalRecord);
      unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
      try {
        unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord);
      }
 catch (      SAXNotRecognizedException ex) {
      }
catch (      SAXNotSupportedException ex) {
      }
    }
 else {
      unmarshalRecord.setRootElementName(qName);
      unmarshalRecord.setRootElementNamespaceUri(namespaceURI);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=null;
    boolean isPrimitiveType=false;
    Class primitiveWrapperClass=null;
    String type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (null != type) {
      XPathFragment typeFragment=new XPathFragment(type);
      if (null != unmarshalNamespaceResolver) {
        typeFragment.setNamespaceURI(unmarshalNamespaceResolver.getNamespaceURI(typeFragment.getPrefix()));
      }
      xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      if (xmlDescriptor == null) {
        primitiveWrapperClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(new QName(typeFragment.getNamespaceURI(),typeFragment.getLocalName()));
      }
    }
    if (xmlDescriptor == null) {
      String name;
      if (localName == null || localName.length() == 0) {
        name=qName;
      }
 else {
        name=localName;
      }
      QName rootQName;
      if (namespaceURI == null || namespaceURI.length() == 0) {
        rootQName=new QName(name);
      }
 else {
        rootQName=new QName(namespaceURI,name);
      }
      xmlDescriptor=xmlContext.getDescriptor(rootQName);
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(XMLDescriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
        if (xmlDescriptor == null) {
          isPrimitiveType=primitiveWrapperClass != null;
        }
      }
      if (null == xmlDescriptor && !isPrimitiveType) {
        if (this.keepAsElementPolicy != UnmarshalKeepAsElementPolicy.KEEP_NONE_AS_ELEMENT) {
          this.documentBuilder=new SAXDocumentBuilder();
          documentBuilder.startDocument();
          for (          String prefix : this.unmarshalNamespaceResolver.getPrefixes()) {
            documentBuilder.startPrefixMapping(prefix,this.unmarshalNamespaceResolver.getNamespaceURI(prefix));
          }
          documentBuilder.startElement(namespaceURI,localName,qName,atts);
          this.xmlReader.setContentHandler(documentBuilder);
          return;
        }
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.setUnmarshalRecord(unmappedContentHandlerWrapper);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getReadSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (isPrimitiveType) {
      unmarshalRecord=new XMLRootRecord(primitiveWrapperClass);
      unmarshalRecord.setSession((AbstractSession)unmarshaller.getXMLContext().getSession(0));
    }
 else     if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecord(null);
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator == null) {
            throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
          classValue=(Class)indicator;
        }
      }
      if (classValue != null) {
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
 else {
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
    this.descriptor=xmlDescriptor;
    this.rootRecord=unmarshalRecord;
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(locator);
    }
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    unmarshalRecord.setAttributes(atts);
    if (atts != null && null == atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.startDocument();
      xmlReader.setContentHandler(unmarshalRecord);
      unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
      try {
        unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord);
      }
 catch (      SAXNotRecognizedException ex) {
      }
catch (      SAXNotSupportedException ex) {
      }
    }
 else {
      unmarshalRecord.setRootElementName(qName);
      unmarshalRecord.setLocalName(localName);
      unmarshalRecord.setRootElementNamespaceUri(namespaceURI);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
66632,"public int getIndex(String uri,String localName){
  if (null == localName) {
    return -1;
  }
  int index=0;
  for (  Attribute attribute : attributes) {
    QName testQName=new QName(uri,localName);
    if (attribute.getQName().equals(testQName)) {
      return index;
    }
    index++;
  }
  return -1;
}","public int getIndex(String uri,String localName){
  if (null == localName) {
    return -1;
  }
  int index=0;
  for (  Attribute attribute : attributes()) {
    QName testQName=new QName(uri,localName);
    if (attribute.getQName().equals(testQName)) {
      return index;
    }
    index++;
  }
  return -1;
}"
66633,"public XMLStreamReaderReader(){
  unmarshalNamespaceContext=new UnmarshalNamespaceContext();
}","public XMLStreamReaderReader(){
  unmarshalNamespaceContext=new UnmarshalNamespaceContext();
  indexedAttributeList=new IndexedAttributeList();
}"
66634,"public String getLocalName(int index){
  return attributes.get(index).getQName().getLocalPart();
}","public String getLocalName(int index){
  return attributes().get(index).getQName().getLocalPart();
}"
66635,"@Override public void setContentHandler(ContentHandler handler){
  super.setContentHandler(handler);
  if (handler.getClass() == UnmarshalRecord.class) {
    ((UnmarshalRecord)handler).setUnmarshalNamespaceResolver(unmarshalNamespaceContext);
  }
 else   if (handler.getClass() == SAXUnmarshallerHandler.class) {
    ((SAXUnmarshallerHandler)handler).setUnmarshalNamespaceResolver(unmarshalNamespaceContext);
  }
}","@Override public void setContentHandler(ContentHandler handler){
  super.setContentHandler(handler);
  Class handlerClass=handler.getClass();
  if (handlerClass == UnmarshalRecord.class) {
    ((UnmarshalRecord)handler).setUnmarshalNamespaceResolver(unmarshalNamespaceContext);
    qNameAware=false;
  }
 else   if (handlerClass == SAXUnmarshallerHandler.class) {
    ((SAXUnmarshallerHandler)handler).setUnmarshalNamespaceResolver(unmarshalNamespaceContext);
    qNameAware=true;
  }
 else {
    qNameAware=true;
  }
}"
66636,"private void parseEvent(XMLStreamReader xmlStreamReader) throws SAXException {
switch (xmlStreamReader.getEventType()) {
case XMLStreamReader.START_ELEMENT:
{
      depth++;
      String prefix=xmlStreamReader.getPrefix();
      String localName=xmlStreamReader.getLocalName();
      if (null == prefix || prefix.length() == 0) {
        contentHandler.startElement(xmlStreamReader.getNamespaceURI(),localName,localName,new IndexedAttributeList(xmlStreamReader));
      }
 else {
        contentHandler.startElement(xmlStreamReader.getNamespaceURI(),localName,prefix + XMLConstants.COLON + localName,new IndexedAttributeList(xmlStreamReader));
      }
      break;
    }
case XMLStreamReader.END_ELEMENT:
{
    depth--;
    String prefix=xmlStreamReader.getPrefix();
    String localName=xmlStreamReader.getLocalName();
    if (null == prefix || prefix.length() == 0) {
      contentHandler.endElement(xmlStreamReader.getNamespaceURI(),localName,localName);
    }
 else {
      contentHandler.endElement(xmlStreamReader.getNamespaceURI(),localName,prefix + XMLConstants.COLON + localName);
    }
    break;
  }
case XMLStreamReader.PROCESSING_INSTRUCTION:
{
  contentHandler.processingInstruction(xmlStreamReader.getPITarget(),xmlStreamReader.getPIData());
  break;
}
case XMLStreamReader.CHARACTERS:
{
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
break;
}
case XMLStreamReader.COMMENT:
{
if (null != lexicalHandler) {
lexicalHandler.comment(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
}
break;
}
case XMLStreamReader.SPACE:
{
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
break;
}
case XMLStreamReader.START_DOCUMENT:
{
depth++;
break;
}
case XMLStreamReader.END_DOCUMENT:
{
depth--;
return;
}
case XMLStreamReader.ENTITY_REFERENCE:
{
break;
}
case XMLStreamReader.ATTRIBUTE:
{
break;
}
case XMLStreamReader.DTD:
{
break;
}
case XMLStreamReader.CDATA:
{
char[] characters=xmlStreamReader.getText().toCharArray();
if (null == lexicalHandler) {
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
}
 else {
lexicalHandler.startCDATA();
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
lexicalHandler.endCDATA();
}
break;
}
}
}","private void parseEvent(XMLStreamReader xmlStreamReader) throws SAXException {
switch (xmlStreamReader.getEventType()) {
case XMLStreamReader.START_ELEMENT:
{
      depth++;
      String localName=xmlStreamReader.getLocalName();
      if (qNameAware) {
        String prefix=xmlStreamReader.getPrefix();
        if (null == prefix || prefix.length() == 0) {
          contentHandler.startElement(xmlStreamReader.getNamespaceURI(),localName,localName,indexedAttributeList.reset());
        }
 else {
          contentHandler.startElement(xmlStreamReader.getNamespaceURI(),localName,prefix + XMLConstants.COLON + localName,indexedAttributeList.reset());
        }
      }
 else {
        contentHandler.startElement(xmlStreamReader.getNamespaceURI(),localName,null,indexedAttributeList.reset());
      }
      break;
    }
case XMLStreamReader.END_ELEMENT:
{
    depth--;
    String localName=xmlStreamReader.getLocalName();
    if (qNameAware) {
      String prefix=xmlStreamReader.getPrefix();
      if (null == prefix || prefix.length() == 0) {
        contentHandler.endElement(xmlStreamReader.getNamespaceURI(),localName,localName);
      }
 else {
        contentHandler.endElement(xmlStreamReader.getNamespaceURI(),localName,prefix + XMLConstants.COLON + localName);
      }
    }
 else {
      contentHandler.endElement(xmlStreamReader.getNamespaceURI(),localName,null);
    }
    break;
  }
case XMLStreamReader.PROCESSING_INSTRUCTION:
{
  contentHandler.processingInstruction(xmlStreamReader.getPITarget(),xmlStreamReader.getPIData());
  break;
}
case XMLStreamReader.CHARACTERS:
{
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
break;
}
case XMLStreamReader.COMMENT:
{
if (null != lexicalHandler) {
lexicalHandler.comment(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
}
break;
}
case XMLStreamReader.SPACE:
{
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
break;
}
case XMLStreamReader.START_DOCUMENT:
{
depth++;
break;
}
case XMLStreamReader.END_DOCUMENT:
{
depth--;
return;
}
case XMLStreamReader.ENTITY_REFERENCE:
{
break;
}
case XMLStreamReader.ATTRIBUTE:
{
break;
}
case XMLStreamReader.DTD:
{
break;
}
case XMLStreamReader.CDATA:
{
char[] characters=xmlStreamReader.getText().toCharArray();
if (null == lexicalHandler) {
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
}
 else {
lexicalHandler.startCDATA();
contentHandler.characters(xmlStreamReader.getTextCharacters(),xmlStreamReader.getTextStart(),xmlStreamReader.getTextLength());
lexicalHandler.endCDATA();
}
break;
}
}
}"
66637,"public int getLength(){
  return attributes.size();
}","public int getLength(){
  return attributes().size();
}"
66638,"public String getURI(int index){
  return attributes.get(index).getQName().getNamespaceURI();
}","public String getURI(int index){
  return attributes().get(index).getQName().getNamespaceURI();
}"
66639,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) {
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (rootElementName == null) {
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0, size=atts.getLength(); i < size; i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(XMLConstants.COLON);
            if (idx > 0) {
              attLocalName=qname.substring(idx + 1,qname.length());
              String attPrefix=qname.substring(0,idx);
              if (attPrefix.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
 else {
              attLocalName=qname;
              if (attLocalName.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=selfRecords.get(j);
            if (nestedRecord != null) {
              attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
              }
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) {
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0, size=atts.getLength(); i < size; i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(XMLConstants.COLON);
            if (idx > 0) {
              attLocalName=qname.substring(idx + 1,qname.length());
              String attPrefix=qname.substring(0,idx);
              if (attPrefix.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
 else {
              attLocalName=qname;
              if (attLocalName.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=selfRecords.get(j);
            if (nestedRecord != null) {
              attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
              }
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
66640,"public String getLocalName(){
  throw XMLMarshalException.operationNotSupported(""String_Node_Str"");
}","@Override public String getLocalName(){
  return rootElementLocalName;
}"
66641,"/** 
 * Initialize the aggregate query with the settings from the source query.
 */
protected void buildAggregateModifyQuery(ObjectLevelModifyQuery sourceQuery,ObjectLevelModifyQuery aggregateQuery,Object sourceAttributeValue){
  if (sourceQuery.getSession().isUnitOfWork()) {
    Object backupAttributeValue=getAttributeValueFromBackupClone(sourceQuery.getBackupClone());
    if (backupAttributeValue == null) {
      backupAttributeValue=getObjectBuilder(sourceAttributeValue,sourceQuery.getSession()).buildNewInstance();
    }
    aggregateQuery.setBackupClone(backupAttributeValue);
  }
  aggregateQuery.setCascadePolicy(sourceQuery.getCascadePolicy());
  aggregateQuery.setObject(sourceAttributeValue);
  aggregateQuery.setTranslationRow(sourceQuery.getTranslationRow());
  aggregateQuery.setSession(sourceQuery.getSession());
  aggregateQuery.setProperties(sourceQuery.getProperties());
}","/** 
 * Initialize the aggregate query with the settings from the source query.
 */
protected void buildAggregateModifyQuery(ObjectLevelModifyQuery sourceQuery,ObjectLevelModifyQuery aggregateQuery,Object sourceAttributeValue){
  if (sourceQuery.getSession().isUnitOfWork() && !isMapKeyMapping()) {
    Object backupAttributeValue=getAttributeValueFromBackupClone(sourceQuery.getBackupClone());
    if (backupAttributeValue == null) {
      backupAttributeValue=getObjectBuilder(sourceAttributeValue,sourceQuery.getSession()).buildNewInstance();
    }
    aggregateQuery.setBackupClone(backupAttributeValue);
  }
  aggregateQuery.setCascadePolicy(sourceQuery.getCascadePolicy());
  aggregateQuery.setObject(sourceAttributeValue);
  aggregateQuery.setTranslationRow(sourceQuery.getTranslationRow());
  aggregateQuery.setSession(sourceQuery.getSession());
  aggregateQuery.setProperties(sourceQuery.getProperties());
}"
66642,"public void initialize(DatabaseMapping mapping,Session session){
  try {
    ConversionManager cMgr=session.getDatasourcePlatform().getConversionManager();
    Class<? extends DomHandler> domHandlerClass=cMgr.convertClassNameToClass(domHandlerClassName);
    this.domHandler=domHandlerClass.newInstance();
    Method createUnmarshallerMethod=PrivilegedAccessHelper.getDeclaredMethod(domHandlerClass,""String_Node_Str"",new Class[]{ValidationEventHandler.class});
    resultType=createUnmarshallerMethod.getReturnType();
    Method getElementMethod=PrivilegedAccessHelper.getDeclaredMethod(domHandlerClass,""String_Node_Str"",new Class[]{resultType});
    elementClass=getElementMethod.getReturnType();
    xmlTransformer=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLTransformer();
    xmlTransformer.setFormattedOutput(true);
  }
 catch (  Exception ex) {
    throw JAXBException.couldNotInitializeDomHandlerConverter(ex,domHandlerClassName,mapping.getAttributeName());
  }
}","public void initialize(DatabaseMapping mapping,Session session){
  try {
    ConversionManager cMgr=session.getDatasourcePlatform().getConversionManager();
    Class<? extends DomHandler> domHandlerClass=cMgr.convertClassNameToClass(domHandlerClassName);
    this.domHandler=domHandlerClass.newInstance();
    Method createUnmarshallerMethod=PrivilegedAccessHelper.getDeclaredMethod(domHandlerClass,""String_Node_Str"",new Class[]{ValidationEventHandler.class});
    resultType=PrivilegedAccessHelper.getMethodReturnType(createUnmarshallerMethod);
    Method getElementMethod=PrivilegedAccessHelper.getDeclaredMethod(domHandlerClass,""String_Node_Str"",new Class[]{resultType});
    elementClass=PrivilegedAccessHelper.getMethodReturnType(getElementMethod);
    xmlTransformer=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLTransformer();
    xmlTransformer.setFormattedOutput(true);
  }
 catch (  Exception ex) {
    throw JAXBException.couldNotInitializeDomHandlerConverter(ex,domHandlerClassName,mapping.getAttributeName());
  }
}"
66643,"/** 
 * Figure out the BoundType and ValueType for the XmlAdapter class, then either create an instance of the XmlAdapter, or if an instance is set on the marshaller, use it.
 * @param mapping
 * @param session
 */
public void initialize(DatabaseMapping mapping,Session session){
  if (xmlAdapterClass == null) {
    ClassLoader loader=session.getDatasourceLogin().getDatasourcePlatform().getConversionManager().getLoader();
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          xmlAdapterClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(getXmlAdapterClassName(),true,loader));
        }
 catch (        PrivilegedActionException ex) {
          if (ex.getCause() instanceof ClassNotFoundException) {
            throw (ClassNotFoundException)ex.getCause();
          }
          throw (RuntimeException)ex.getCause();
        }
      }
 else {
        xmlAdapterClass=PrivilegedAccessHelper.getClassForName(getXmlAdapterClassName(),true,loader);
      }
    }
 catch (    ClassNotFoundException cnfe) {
      throw (RuntimeException)cnfe.getCause();
    }
  }
  this.mapping=mapping;
  Method[] methods=null;
  if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
    try {
      methods=(Method[])AccessController.doPrivileged(new PrivilegedGetDeclaredMethods(xmlAdapterClass));
      ;
    }
 catch (    PrivilegedActionException ex) {
      throw (RuntimeException)ex.getCause();
    }
  }
 else {
    methods=PrivilegedAccessHelper.getDeclaredMethods(xmlAdapterClass);
  }
  Method method;
  for (int i=0; i < methods.length; i++) {
    method=methods[i];
    if (method.getName().equals(""String_Node_Str"") && (method.getReturnType() != Object.class) && (method.getParameterTypes()[0] != Object.class)) {
      valueType=method.getReturnType();
      boundType=method.getParameterTypes()[0];
      break;
    }
  }
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        xmlAdapter=(XmlAdapter)AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(getXmlAdapterClass()));
        ;
      }
 catch (      PrivilegedActionException ex) {
        if (ex.getCause() instanceof IllegalAccessException) {
          throw (IllegalAccessException)ex.getCause();
        }
        if (ex.getCause() instanceof InstantiationException) {
          throw (InstantiationException)ex.getCause();
        }
        throw (RuntimeException)ex.getCause();
      }
    }
 else {
      xmlAdapter=(XmlAdapter)PrivilegedAccessHelper.newInstanceFromClass(getXmlAdapterClass());
    }
  }
 catch (  Exception ex) {
  }
}","/** 
 * Figure out the BoundType and ValueType for the XmlAdapter class, then either create an instance of the XmlAdapter, or if an instance is set on the marshaller, use it.
 * @param mapping
 * @param session
 */
public void initialize(DatabaseMapping mapping,Session session){
  if (xmlAdapterClass == null) {
    ClassLoader loader=session.getDatasourceLogin().getDatasourcePlatform().getConversionManager().getLoader();
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          xmlAdapterClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(getXmlAdapterClassName(),true,loader));
        }
 catch (        PrivilegedActionException ex) {
          if (ex.getCause() instanceof ClassNotFoundException) {
            throw (ClassNotFoundException)ex.getCause();
          }
          throw (RuntimeException)ex.getCause();
        }
      }
 else {
        xmlAdapterClass=PrivilegedAccessHelper.getClassForName(getXmlAdapterClassName(),true,loader);
      }
    }
 catch (    ClassNotFoundException cnfe) {
      throw (RuntimeException)cnfe.getCause();
    }
  }
  this.mapping=mapping;
  Method[] methods=null;
  if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
    try {
      methods=(Method[])AccessController.doPrivileged(new PrivilegedGetDeclaredMethods(xmlAdapterClass));
      ;
    }
 catch (    PrivilegedActionException ex) {
      throw (RuntimeException)ex.getCause();
    }
  }
 else {
    methods=PrivilegedAccessHelper.getDeclaredMethods(xmlAdapterClass);
  }
  Method method;
  for (int i=0; i < methods.length; i++) {
    method=methods[i];
    if (method.getName().equals(""String_Node_Str"") && (PrivilegedAccessHelper.getMethodReturnType(method) != Object.class) && (method.getParameterTypes()[0] != Object.class)) {
      valueType=method.getReturnType();
      boundType=method.getParameterTypes()[0];
      break;
    }
  }
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        xmlAdapter=(XmlAdapter)AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(getXmlAdapterClass()));
        ;
      }
 catch (      PrivilegedActionException ex) {
        if (ex.getCause() instanceof IllegalAccessException) {
          throw (IllegalAccessException)ex.getCause();
        }
        if (ex.getCause() instanceof InstantiationException) {
          throw (InstantiationException)ex.getCause();
        }
        throw (RuntimeException)ex.getCause();
      }
    }
 else {
      xmlAdapter=(XmlAdapter)PrivilegedAccessHelper.newInstanceFromClass(getXmlAdapterClass());
    }
  }
 catch (  Exception ex) {
  }
}"
66644,"private Class getBoundTypeForXmlAdapterClass(Class adapterClass){
  Class boundType=Object.class;
  for (  Method method : adapterClass.getDeclaredMethods()) {
    if (method.getName().equals(""String_Node_Str"")) {
      Class returnType=method.getReturnType();
      if (!returnType.getName().equals(boundType.getName())) {
        boundType=returnType;
        break;
      }
    }
  }
  return boundType;
}","private Class getBoundTypeForXmlAdapterClass(Class adapterClass){
  Class boundType=Object.class;
  for (  Method method : PrivilegedAccessHelper.getDeclaredMethods(adapterClass)) {
    if (method.getName().equals(""String_Node_Str"")) {
      Class returnType=PrivilegedAccessHelper.getMethodReturnType(method);
      if (!returnType.getName().equals(boundType.getName())) {
        boundType=returnType;
        break;
      }
    }
  }
  return boundType;
}"
66645,"/** 
 * INTERNAL: The fromString value on the enum class must be invoked with the field value specified as an argument.  The result returned should be an instance of the enum class.
 */
public Object convertDataValueToObjectValue(Object dataValue,Session session){
  Object result=null;
  try {
    result=fromStringMethod.invoke(enumClass,new Object[]{dataValue});
  }
 catch (  Exception ex) {
    throw XMLMarshalException.errorInvokingFromStringMethod(ex,enumClass.getName());
  }
  return result;
}","/** 
 * INTERNAL: The fromString value on the enum class must be invoked with the field value specified as an argument.  The result returned should be an instance of the enum class.
 */
public Object convertDataValueToObjectValue(Object dataValue,Session session){
  Object result=null;
  try {
    result=PrivilegedAccessHelper.invokeMethod(fromStringMethod,enumClass,new Object[]{dataValue});
  }
 catch (  Exception ex) {
    throw XMLMarshalException.errorInvokingFromStringMethod(ex,enumClass.getName());
  }
  return result;
}"
66646,"/** 
 * INTERNAL: Set the enum class.
 */
public void initialize(DatabaseMapping mapping,Session session){
  if (getEnumClass() == null) {
    if (getEnumClassName() == null) {
      throw XMLMarshalException.enumClassNotSpecified();
    }
 else {
      try {
        enumClass=session.getDatasourcePlatform().getConversionManager().getLoader().loadClass(enumClassName);
      }
 catch (      Exception e) {
        throw XMLMarshalException.invalidEnumClassSpecified(e,enumClassName);
      }
    }
  }
  try {
    fromStringMethod=enumClass.getMethod(""String_Node_Str"",new Class[]{String.class});
  }
 catch (  Exception ex) {
    throw XMLMarshalException.errorInvokingFromStringMethod(ex,enumClass.getName());
  }
}","/** 
 * INTERNAL: Set the enum class.
 */
public void initialize(DatabaseMapping mapping,Session session){
  if (getEnumClass() == null) {
    if (getEnumClassName() == null) {
      throw XMLMarshalException.enumClassNotSpecified();
    }
 else {
      try {
        enumClass=session.getDatasourcePlatform().getConversionManager().getLoader().loadClass(enumClassName);
      }
 catch (      Exception e) {
        throw XMLMarshalException.invalidEnumClassSpecified(e,enumClassName);
      }
    }
  }
  try {
    fromStringMethod=PrivilegedAccessHelper.getMethod(enumClass,""String_Node_Str"",new Class[]{String.class},true);
  }
 catch (  Exception ex) {
    throw XMLMarshalException.errorInvokingFromStringMethod(ex,enumClass.getName());
  }
}"
66647,"public void createElementsForTypeMappingInfo(){
  if (this.javaClassToTypeMappingInfos != null && !this.javaClassToTypeMappingInfos.isEmpty()) {
    Set<JavaClass> classes=this.javaClassToTypeMappingInfos.keySet();
    for (    JavaClass nextClass : classes) {
      TypeMappingInfo nextInfo=this.javaClassToTypeMappingInfos.get(nextClass);
      if (nextInfo != null) {
        boolean xmlAttachmentRef=false;
        String xmlMimeType=null;
        java.lang.annotation.Annotation[] annotations=getAnnotations(nextInfo);
        Class adapterClass=this.typeMappingInfoToAdapterClasses.get(nextInfo);
        if (annotations != null) {
          for (int j=0; j < annotations.length; j++) {
            java.lang.annotation.Annotation nextAnnotation=annotations[j];
            if (nextAnnotation != null) {
              if (nextAnnotation instanceof XmlMimeType) {
                XmlMimeType javaAnnotation=(XmlMimeType)nextAnnotation;
                xmlMimeType=javaAnnotation.value();
              }
 else               if (nextAnnotation instanceof XmlAttachmentRef) {
                xmlAttachmentRef=true;
              }
            }
          }
        }
        if (nextInfo.getXmlTagName() != null) {
          ElementDeclaration element=new ElementDeclaration(nextInfo.getXmlTagName(),nextClass,nextClass.getQualifiedName(),false);
          element.setTypeMappingInfo(nextInfo);
          element.setXmlMimeType(xmlMimeType);
          element.setXmlAttachmentRef(xmlAttachmentRef);
          if (adapterClass != null) {
            Method[] tacMethods=adapterClass.getMethods();
            Class declJavaType=Object.class;
            for (int i=0; i < tacMethods.length; i++) {
              Method method=tacMethods[i];
              if (method.getName().equals(""String_Node_Str"")) {
                if (!(method.getReturnType() == declJavaType)) {
                  declJavaType=method.getReturnType();
                  break;
                }
              }
            }
            element.setJavaType(helper.getJavaClass(declJavaType));
          }
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            element.setJavaType(helper.getJavaClass(generatedClass));
          }
          if (nextInfo.getElementScope() == TypeMappingInfo.ElementScope.Global) {
            this.globalElements.put(element.getElementName(),element);
          }
 else {
            this.localElements.add(element);
          }
        }
      }
    }
  }
}","public void createElementsForTypeMappingInfo(){
  if (this.javaClassToTypeMappingInfos != null && !this.javaClassToTypeMappingInfos.isEmpty()) {
    Set<JavaClass> classes=this.javaClassToTypeMappingInfos.keySet();
    for (    JavaClass nextClass : classes) {
      TypeMappingInfo nextInfo=this.javaClassToTypeMappingInfos.get(nextClass);
      if (nextInfo != null) {
        boolean xmlAttachmentRef=false;
        String xmlMimeType=null;
        java.lang.annotation.Annotation[] annotations=getAnnotations(nextInfo);
        Class adapterClass=this.typeMappingInfoToAdapterClasses.get(nextInfo);
        if (annotations != null) {
          for (int j=0; j < annotations.length; j++) {
            java.lang.annotation.Annotation nextAnnotation=annotations[j];
            if (nextAnnotation != null) {
              if (nextAnnotation instanceof XmlMimeType) {
                XmlMimeType javaAnnotation=(XmlMimeType)nextAnnotation;
                xmlMimeType=javaAnnotation.value();
              }
 else               if (nextAnnotation instanceof XmlAttachmentRef) {
                xmlAttachmentRef=true;
              }
            }
          }
        }
        if (nextInfo.getXmlTagName() != null) {
          ElementDeclaration element=new ElementDeclaration(nextInfo.getXmlTagName(),nextClass,nextClass.getQualifiedName(),false);
          element.setTypeMappingInfo(nextInfo);
          element.setXmlMimeType(xmlMimeType);
          element.setXmlAttachmentRef(xmlAttachmentRef);
          if (adapterClass != null) {
            Method[] tacMethods=PrivilegedAccessHelper.getMethods(adapterClass);
            Class declJavaType=Object.class;
            for (int i=0; i < tacMethods.length; i++) {
              Method method=tacMethods[i];
              if (method.getName().equals(""String_Node_Str"")) {
                if (!(PrivilegedAccessHelper.getMethodReturnType(method) == declJavaType)) {
                  declJavaType=method.getReturnType();
                  break;
                }
              }
            }
            element.setJavaType(helper.getJavaClass(declJavaType));
          }
          Class generatedClass=typeMappingInfoToGeneratedClasses.get(nextInfo);
          if (generatedClass != null) {
            element.setJavaType(helper.getJavaClass(generatedClass));
          }
          if (nextInfo.getElementScope() == TypeMappingInfo.ElementScope.Global) {
            this.globalElements.put(element.getElementName(),element);
          }
 else {
            this.localElements.add(element);
          }
        }
      }
    }
  }
}"
66648,"/** 
 * Assumes JavaType[] contains JavaClassImpl instances
 */
public JavaMethod getMethod(String arg0,JavaClass[] arg1){
  if (arg1 == null) {
    arg1=new JavaClass[0];
  }
  Class[] params=new Class[arg1.length];
  for (int i=0; i < arg1.length; i++) {
    JavaClass jType=arg1[i];
    if (jType != null) {
      params[i]=((JavaClassImpl)jType).getJavaClass();
    }
  }
  try {
    return new JavaMethodImpl(jClass.getMethod(arg0,params));
  }
 catch (  NoSuchMethodException nsme) {
    return null;
  }
}","/** 
 * Assumes JavaType[] contains JavaClassImpl instances
 */
public JavaMethod getMethod(String arg0,JavaClass[] arg1){
  if (arg1 == null) {
    arg1=new JavaClass[0];
  }
  Class[] params=new Class[arg1.length];
  for (int i=0; i < arg1.length; i++) {
    JavaClass jType=arg1[i];
    if (jType != null) {
      params[i]=((JavaClassImpl)jType).getJavaClass();
    }
  }
  try {
    Method method=PrivilegedAccessHelper.getMethod(jClass,arg0,params,true);
    return new JavaMethodImpl(method);
  }
 catch (  NoSuchMethodException nsme) {
    return null;
  }
}"
66649,"public JavaField getField(String arg0){
  try {
    return new JavaFieldImpl(jClass.getField(arg0));
  }
 catch (  NoSuchFieldException nsfe) {
    return null;
  }
}","public JavaField getField(String arg0){
  try {
    Field field=PrivilegedAccessHelper.getField(jClass,arg0,true);
    return new JavaFieldImpl(field);
  }
 catch (  NoSuchFieldException nsfe) {
    return null;
  }
}"
66650,"public JavaConstructor getConstructor(JavaClass[] paramTypes){
  if (paramTypes == null) {
    paramTypes=new JavaClass[0];
  }
  Class[] params=new Class[paramTypes.length];
  for (int i=0; i < paramTypes.length; i++) {
    JavaClass jType=paramTypes[i];
    if (jType != null) {
      params[i]=((JavaClassImpl)jType).getJavaClass();
    }
  }
  try {
    return new JavaConstructorImpl(jClass.getConstructor(params));
  }
 catch (  NoSuchMethodException nsme) {
    return null;
  }
}","public JavaConstructor getConstructor(JavaClass[] paramTypes){
  if (paramTypes == null) {
    paramTypes=new JavaClass[0];
  }
  Class[] params=new Class[paramTypes.length];
  for (int i=0; i < paramTypes.length; i++) {
    JavaClass jType=paramTypes[i];
    if (jType != null) {
      params[i]=((JavaClassImpl)jType).getJavaClass();
    }
  }
  try {
    Constructor constructor=PrivilegedAccessHelper.getConstructorFor(jClass,params,true);
    return new JavaConstructorImpl(constructor);
  }
 catch (  NoSuchMethodException nsme) {
    return null;
  }
}"
66651,"public Collection getFields(){
  ArrayList<JavaField> fieldCollection=new ArrayList<JavaField>();
  Field[] fields=jClass.getFields();
  for (  Field field : fields) {
    fieldCollection.add(new JavaFieldImpl(field));
  }
  return fieldCollection;
}","public Collection getFields(){
  ArrayList<JavaField> fieldCollection=new ArrayList<JavaField>();
  Field[] fields=PrivilegedAccessHelper.getFields(jClass);
  for (  Field field : fields) {
    fieldCollection.add(new JavaFieldImpl(field));
  }
  return fieldCollection;
}"
66652,"public Collection getMethods(){
  ArrayList<JavaMethod> methodCollection=new ArrayList<JavaMethod>();
  Method[] methods=jClass.getMethods();
  for (  Method method : methods) {
    methodCollection.add(new JavaMethodImpl(method));
  }
  return methodCollection;
}","public Collection getMethods(){
  ArrayList<JavaMethod> methodCollection=new ArrayList<JavaMethod>();
  Method[] methods=PrivilegedAccessHelper.getMethods(jClass);
  for (  Method method : methods) {
    methodCollection.add(new JavaMethodImpl(method));
  }
  return methodCollection;
}"
66653,"public JavaClass[] getParameterTypes(){
  Class[] params=jMethod.getParameterTypes();
  JavaClass[] paramArray=new JavaClass[params.length];
  for (int i=0; i < params.length; i++) {
    paramArray[i]=new JavaClassImpl(params[i]);
  }
  return paramArray;
}","public JavaClass[] getParameterTypes(){
  Class[] params=PrivilegedAccessHelper.getMethodParameterTypes(jMethod);
  JavaClass[] paramArray=new JavaClass[params.length];
  for (int i=0; i < params.length; i++) {
    paramArray[i]=new JavaClassImpl(params[i]);
  }
  return paramArray;
}"
66654,"public JavaClass getReturnType(){
  Type type=jMethod.getGenericReturnType();
  if (type instanceof ParameterizedType) {
    ParameterizedType pType=(ParameterizedType)type;
    return new JavaClassImpl(pType,jMethod.getReturnType());
  }
  return new JavaClassImpl(jMethod.getReturnType());
}","public JavaClass getReturnType(){
  Type type=jMethod.getGenericReturnType();
  Class returnType=PrivilegedAccessHelper.getMethodReturnType(jMethod);
  if (type instanceof ParameterizedType) {
    ParameterizedType pType=(ParameterizedType)type;
    return new JavaClassImpl(pType,returnType);
  }
  return new JavaClassImpl(returnType);
}"
66655,"public JavaClass getResolvedType(){
  return new JavaClassImpl(jMethod.getReturnType());
}","public JavaClass getResolvedType(){
  Class returnType=PrivilegedAccessHelper.getMethodReturnType(jMethod);
  return new JavaClassImpl(returnType);
}"
66656,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Object collection=unmarshalRecord.getContainerInstance(this);
    startElementProcessText(unmarshalRecord,collection);
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    workingDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlAnyCollectionMapping,xmlAnyCollectionMapping.getKeepAsElementPolicy());
    if (workingDescriptor == null) {
      QName qname=new QName(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
      workingDescriptor=xmlContext.getDescriptor(qname);
      if (workingDescriptor != null && workingDescriptor.isWrapper()) {
        workingDescriptor=null;
      }
    }
    UnmarshalKeepAsElementPolicy policy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if (((workingDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
      setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
    }
 else     if (workingDescriptor != null) {
      processChild(xPathFragment,unmarshalRecord,atts,workingDescriptor,xmlAnyCollectionMapping);
    }
 else {
      AnyMappingContentHandler handler=new AnyMappingContentHandler(unmarshalRecord,xmlAnyCollectionMapping.usesXMLRoot());
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      unmarshalRecord.getXMLReader().setContentHandler(handler);
      return true;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Object collection=unmarshalRecord.getContainerInstance(this);
    startElementProcessText(unmarshalRecord,collection);
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    workingDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlAnyCollectionMapping,xmlAnyCollectionMapping.getKeepAsElementPolicy());
    if (workingDescriptor == null) {
      QName qname=new QName(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
      workingDescriptor=xmlContext.getDescriptor(qname);
      if (workingDescriptor != null && workingDescriptor.isWrapper()) {
        workingDescriptor=null;
      }
    }
    UnmarshalKeepAsElementPolicy policy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if (((workingDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
      setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
    }
 else     if (workingDescriptor != null) {
      processChild(xPathFragment,unmarshalRecord,atts,workingDescriptor,xmlAnyCollectionMapping);
    }
 else {
      AnyMappingContentHandler handler=new AnyMappingContentHandler(unmarshalRecord,xmlAnyCollectionMapping.usesXMLRoot());
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      XMLReader xmlReader=unmarshalRecord.getXMLReader();
      xmlReader.setContentHandler(handler);
      xmlReader.setLexicalHandler(handler);
      return true;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
66657,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor workingDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlAnyObjectMapping,xmlAnyObjectMapping.getKeepAsElementPolicy());
    UnmarshalKeepAsElementPolicy policy=xmlAnyObjectMapping.getKeepAsElementPolicy();
    if (((workingDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
      setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
    }
 else     if (workingDescriptor != null) {
      processChild(xPathFragment,unmarshalRecord,atts,workingDescriptor,xmlAnyObjectMapping);
    }
 else {
      AnyMappingContentHandler handler=new AnyMappingContentHandler(unmarshalRecord,xmlAnyObjectMapping.usesXMLRoot());
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      unmarshalRecord.getXMLReader().setContentHandler(handler);
      return true;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor workingDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlAnyObjectMapping,xmlAnyObjectMapping.getKeepAsElementPolicy());
    UnmarshalKeepAsElementPolicy policy=xmlAnyObjectMapping.getKeepAsElementPolicy();
    if (((workingDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
      setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
    }
 else     if (workingDescriptor != null) {
      processChild(xPathFragment,unmarshalRecord,atts,workingDescriptor,xmlAnyObjectMapping);
    }
 else {
      AnyMappingContentHandler handler=new AnyMappingContentHandler(unmarshalRecord,xmlAnyObjectMapping.usesXMLRoot());
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      XMLReader xmlReader=unmarshalRecord.getXMLReader();
      xmlReader.setContentHandler(handler);
      xmlReader.setLexicalHandler(handler);
      return true;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
66658,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField xmlField=null;
  if (isCollection) {
    xmlField=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
  }
 else {
    xmlField=(XMLField)((XMLBinaryDataMapping)mapping).getField();
  }
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    if (!xmlField.isSelfField()) {
      record.getXMLReader().setContentHandler(record);
    }
  }
 else {
    if (!xmlField.isSelfField()) {
      record.getXMLReader().setContentHandler(record);
      record.endElement(namespaceURI,localName,qName);
    }
  }
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField xmlField=null;
  if (isCollection) {
    xmlField=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
  }
 else {
    xmlField=(XMLField)((XMLBinaryDataMapping)mapping).getField();
  }
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
    }
  }
 else {
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
      record.endElement(namespaceURI,localName,qName);
    }
  }
}"
66659,"@Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    this.c_id=atts.getValue(""String_Node_Str"",HREF_ATTRIBUTE_NAME);
  }
 else {
    record.getXMLReader().setContentHandler(record);
    record.startElement(namespaceURI,localName,qName,atts);
  }
}","@Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    this.c_id=atts.getValue(""String_Node_Str"",HREF_ATTRIBUTE_NAME);
  }
 else {
    XMLReader xmlReader=record.getXMLReader();
    xmlReader.setContentHandler(record);
    xmlReader.setLexicalHandler(record);
    record.startElement(namespaceURI,localName,qName,atts);
  }
}"
66660,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLField xmlField=(XMLField)xmlBinaryDataCollectionMapping.getField();
    XPathFragment lastFragment=xmlField.getLastXPathFragment();
    if (!lastFragment.isAttribute()) {
      BinaryMappingContentHandler handler=new BinaryMappingContentHandler(unmarshalRecord,this,this.xmlBinaryDataCollectionMapping);
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      unmarshalRecord.getXMLReader().setContentHandler(handler);
    }
 else     if (lastFragment.isAttribute()) {
      String value=atts.getValue(lastFragment.getNamespaceURI(),lastFragment.getLocalName());
      Object fieldValue=null;
      if (xmlBinaryDataCollectionMapping.isSwaRef()) {
        if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
          if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
          }
 else {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
          }
          xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
        }
      }
 else {
        fieldValue=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
        xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
      }
    }
    return true;
  }
 catch (  SAXException ex) {
    throw XMLMarshalException.unmarshalException(ex);
  }
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLField xmlField=(XMLField)xmlBinaryDataCollectionMapping.getField();
    XPathFragment lastFragment=xmlField.getLastXPathFragment();
    if (!lastFragment.isAttribute()) {
      BinaryMappingContentHandler handler=new BinaryMappingContentHandler(unmarshalRecord,this,this.xmlBinaryDataCollectionMapping);
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      XMLReader xmlReader=unmarshalRecord.getXMLReader();
      xmlReader.setContentHandler(handler);
      xmlReader.setLexicalHandler(handler);
    }
 else     if (lastFragment.isAttribute()) {
      String value=atts.getValue(lastFragment.getNamespaceURI(),lastFragment.getLocalName());
      Object fieldValue=null;
      if (xmlBinaryDataCollectionMapping.isSwaRef()) {
        if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
          if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
          }
 else {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
          }
          xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
        }
      }
 else {
        fieldValue=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
        xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
      }
    }
    return true;
  }
 catch (  SAXException ex) {
    throw XMLMarshalException.unmarshalException(ex);
  }
}"
66661,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLField xmlField=(XMLField)xmlBinaryDataMapping.getField();
    XPathFragment lastFragment=xmlField.getLastXPathFragment();
    BinaryMappingContentHandler handler=new BinaryMappingContentHandler(unmarshalRecord,this,this.xmlBinaryDataMapping);
    String qnameString=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
    }
    handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
    unmarshalRecord.getXMLReader().setContentHandler(handler);
    return true;
  }
 catch (  SAXException ex) {
    throw XMLMarshalException.unmarshalException(ex);
  }
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLField xmlField=(XMLField)xmlBinaryDataMapping.getField();
    XPathFragment lastFragment=xmlField.getLastXPathFragment();
    BinaryMappingContentHandler handler=new BinaryMappingContentHandler(unmarshalRecord,this,this.xmlBinaryDataMapping);
    String qnameString=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
    }
    handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(handler);
    xmlReader.setLexicalHandler(handler);
    return true;
  }
 catch (  SAXException ex) {
    throw XMLMarshalException.unmarshalException(ex);
  }
}"
66662,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeObjectMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeObjectMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeObjectMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByEmptyNode() || xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeObjectMappingContentHandler aHandler=new CompositeObjectMappingContentHandler(unmarshalRecord,this,xmlCompositeObjectMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        unmarshalRecord.getXMLReader().setContentHandler(aHandler);
      }
    }
 else {
      boolean isNull=xmlCompositeObjectMapping.getNullPolicy().valueIsNull(atts);
      if (isNull) {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
      }
 else {
        XMLField xmlFld=(XMLField)this.xmlCompositeObjectMapping.getField();
        if (xmlFld.hasLastXPathFragment()) {
          unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
        }
        processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeObjectMapping);
      }
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeObjectMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeObjectMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeObjectMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByEmptyNode() || xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeObjectMappingContentHandler aHandler=new CompositeObjectMappingContentHandler(unmarshalRecord,this,xmlCompositeObjectMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else {
      boolean isNull=xmlCompositeObjectMapping.getNullPolicy().valueIsNull(atts);
      if (isNull) {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
      }
 else {
        XMLField xmlFld=(XMLField)this.xmlCompositeObjectMapping.getField();
        if (xmlFld.hasLastXPathFragment()) {
          unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
        }
        processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeObjectMapping);
      }
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
66663,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    unmarshalRecord.getXMLReader().setContentHandler(builder);
  }
 catch (  SAXException ex) {
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
  return true;
}"
66664,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  unmarshalRecord.removeNullCapableValue(this);
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    unmarshalRecord.getXMLReader().setContentHandler(builder);
  }
 catch (  SAXException ex) {
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  unmarshalRecord.removeNullCapableValue(this);
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
  return true;
}"
66665,"protected void setupHandlerForKeepAsElementPolicy(UnmarshalRecord unmarshalRecord,XPathFragment xPathFragment,Attributes atts){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    unmarshalRecord.getXMLReader().setContentHandler(builder);
  }
 catch (  SAXException ex) {
  }
}","protected void setupHandlerForKeepAsElementPolicy(UnmarshalRecord unmarshalRecord,XPathFragment xPathFragment,Attributes atts){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
}"
66666,"public void processChild(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,XMLDescriptor xmlDescriptor,DatabaseMapping mapping) throws SAXException {
  if (xmlDescriptor == null) {
    DescriptorNotFoundContentHandler handler=new DescriptorNotFoundContentHandler(unmarshalRecord,mapping);
    String qnameString=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
    }
    handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
    unmarshalRecord.getXMLReader().setContentHandler(handler);
    return;
  }
  if (xmlDescriptor.hasInheritance()) {
    unmarshalRecord.setAttributes(atts);
    Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
    if (classValue == null) {
      QName leafElementType=unmarshalRecord.getLeafElementType();
      if (leafElementType != null) {
        Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator == null) {
          throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
        classValue=(Class)indicator;
      }
    }
    if (classValue != null) {
      xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(classValue);
    }
 else {
      if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  TreeObjectBuilder targetObjectBuilder=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
  UnmarshalRecord childRecord=unmarshalRecord.getChildUnmarshalRecord(targetObjectBuilder);
  unmarshalRecord.setChildRecord(childRecord);
  childRecord.setAttributes(atts);
  childRecord.startDocument();
  childRecord.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),atts);
  unmarshalRecord.getXMLReader().setContentHandler(unmarshalRecord.getChildRecord());
  try {
    unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord.getChildRecord());
  }
 catch (  SAXNotRecognizedException ex) {
  }
catch (  SAXNotSupportedException ex) {
  }
}","public void processChild(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,XMLDescriptor xmlDescriptor,DatabaseMapping mapping) throws SAXException {
  if (xmlDescriptor == null) {
    DescriptorNotFoundContentHandler handler=new DescriptorNotFoundContentHandler(unmarshalRecord,mapping);
    String qnameString=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
    }
    handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(handler);
    xmlReader.setLexicalHandler(handler);
    return;
  }
  if (xmlDescriptor.hasInheritance()) {
    unmarshalRecord.setAttributes(atts);
    Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
    if (classValue == null) {
      QName leafElementType=unmarshalRecord.getLeafElementType();
      if (leafElementType != null) {
        Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator == null) {
          throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
        classValue=(Class)indicator;
      }
    }
    if (classValue != null) {
      xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(classValue);
    }
 else {
      if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  TreeObjectBuilder targetObjectBuilder=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
  UnmarshalRecord childRecord=unmarshalRecord.getChildUnmarshalRecord(targetObjectBuilder);
  unmarshalRecord.setChildRecord(childRecord);
  childRecord.setAttributes(atts);
  childRecord.startDocument();
  childRecord.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),atts);
  unmarshalRecord.getXMLReader().setContentHandler(unmarshalRecord.getChildRecord());
  try {
    unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord.getChildRecord());
  }
 catch (  SAXNotRecognizedException ex) {
  }
catch (  SAXNotSupportedException ex) {
  }
}"
66667,"public void testInheritanceQuery(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  em.persist(new LargeProject());
  commitTransaction(em);
  clearCache();
  ClassDescriptor descriptor=getServerSession().getClassDescriptor(Project.class);
  ReadAllQuery query=new ReadAllQuery(Project.class);
  ExpressionBuilder b=query.getExpressionBuilder();
  query.addArgument(""String_Node_Str"",Integer.class);
  ReportQuery subQuery=new ReportQuery();
  subQuery.setReferenceClass(Project.class);
  SQLCall selectIdsCall=new SQLCall();
  String subSelect=""String_Node_Str"";
  selectIdsCall.setSQLString(subSelect);
  subQuery.setCall(selectIdsCall);
  Expression expr=b.get(""String_Node_Str"").in(subQuery);
  query.setSelectionCriteria(expr);
  Vector params=new Vector(1);
  params.add(new Integer(1));
  List res=(List)getServerSession().executeQuery(query,params);
  assertTrue(res.size() == 1);
}","public void testInheritanceQuery(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  LargeProject project=new LargeProject();
  em.persist(project);
  commitTransaction(em);
  int id=project.getId();
  clearCache();
  ClassDescriptor descriptor=getServerSession().getClassDescriptor(Project.class);
  ReadAllQuery query=new ReadAllQuery(Project.class);
  ExpressionBuilder b=query.getExpressionBuilder();
  query.addArgument(""String_Node_Str"",Integer.class);
  ReportQuery subQuery=new ReportQuery();
  subQuery.setReferenceClass(Project.class);
  SQLCall selectIdsCall=new SQLCall();
  String subSelect=""String_Node_Str"";
  selectIdsCall.setSQLString(subSelect);
  subQuery.setCall(selectIdsCall);
  Expression expr=b.get(""String_Node_Str"").in(subQuery);
  query.setSelectionCriteria(expr);
  Vector params=new Vector(1);
  params.add(id);
  List res=(List)getServerSession().executeQuery(query,params);
  assertTrue(res.size() == 1);
}"
66668,"/** 
 * INTERNAL: This method provides an optimization in cases where the value has already been calculated.
 * @param xPathFragment
 * @param marshalRecord
 * @param object
 * @param objectValue
 * @param session
 * @param namespaceResolver
 * @param marshalContext
 * @return
 */
public abstract boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext);","/** 
 * INTERNAL: This method provides an optimization in cases where the value has already been calculated.
 * @param xPathFragment
 * @param marshalRecord
 * @param object
 * @param objectValue
 * @param session
 * @param namespaceResolver
 * @param marshalContext
 * @return
 */
public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  return this.marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,marshalContext);
}"
66669,"public AbstractRecord buildRow(AbstractRecord record,Object object,org.eclipse.persistence.internal.sessions.AbstractSession session,XMLMarshaller marshaller){
  if (null == getRootXPathNode().getNonAttributeChildren()) {
    return record;
  }
  XMLDescriptor xmlDescriptor=(XMLDescriptor)this.descriptor;
  NamespaceResolver namespaceResolver=xmlDescriptor.getNamespaceResolver();
  MarshalContext marshalContext=null;
  if (xmlDescriptor.isSequencedObject()) {
    SequencedObject sequencedObject=(SequencedObject)object;
    marshalContext=new SequencedMarshalContext(sequencedObject.getSettings());
  }
 else {
    marshalContext=ObjectMarshalContext.getInstance();
  }
  for (int x=0, size=marshalContext.getNonAttributeChildrenSize(getRootXPathNode()); x < size; x++) {
    XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,getRootXPathNode());
    xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext.getMarshalContext(x));
  }
  return record;
}","public AbstractRecord buildRow(AbstractRecord record,Object object,org.eclipse.persistence.internal.sessions.AbstractSession session,XMLMarshaller marshaller,XPathFragment rootFragment){
  if (null == getRootXPathNode().getNonAttributeChildren()) {
    return record;
  }
  XMLDescriptor xmlDescriptor=(XMLDescriptor)this.descriptor;
  NamespaceResolver namespaceResolver=xmlDescriptor.getNamespaceResolver();
  MarshalContext marshalContext=null;
  if (xmlDescriptor.isSequencedObject()) {
    SequencedObject sequencedObject=(SequencedObject)object;
    marshalContext=new SequencedMarshalContext(sequencedObject.getSettings());
  }
 else {
    marshalContext=ObjectMarshalContext.getInstance();
  }
  for (int x=0, size=marshalContext.getNonAttributeChildrenSize(getRootXPathNode()); x < size; x++) {
    XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,getRootXPathNode());
    xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext.getMarshalContext(x),rootFragment);
  }
  return record;
}"
66670,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  String c_id=null;
  byte[] bytes=null;
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  marshalRecord.closeStartGroupingElements(groupingFragment);
  if (!xPathFragment.isSelfFragment) {
    marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    marshalRecord.closeStartElement();
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      marshalRecord.characters(value);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
        marshalRecord.characters(value);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      String value=XMLConstants.EMPTY_STRING;
      if ((objectValue.getClass() == ClassConstants.ABYTE) || (objectValue.getClass() == ClassConstants.APBYTE)) {
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  String c_id=null;
  byte[] bytes=null;
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  marshalRecord.closeStartGroupingElements(groupingFragment);
  if (!xPathFragment.isSelfFragment) {
    marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    marshalRecord.closeStartElement();
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      marshalRecord.characters(value);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
        marshalRecord.characters(value);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      String value=XMLConstants.EMPTY_STRING;
      if ((objectValue.getClass() == ClassConstants.ABYTE) || (objectValue.getClass() == ClassConstants.APBYTE)) {
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
66671,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlBinaryDataMapping.isReadOnly()) {
    return false;
  }
  Object objectValue=marshalContext.getAttributeValue(object,xmlBinaryDataMapping);
  return this.marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,marshalContext);
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  if (xmlBinaryDataMapping.isReadOnly()) {
    return false;
  }
  Object objectValue=marshalContext.getAttributeValue(object,xmlBinaryDataMapping);
  return this.marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,marshalContext,rootFragment);
}"
66672,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(value);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    if ((xmlCompositeCollectionMapping.getReferenceDescriptor() == null) && (descriptor.getSchemaReference() != null)) {
      addTypeAttributeIfNeeded(descriptor,xmlCompositeCollectionMapping,marshalRecord);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(stringValue);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(value);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(value);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    if ((xmlCompositeCollectionMapping.getReferenceDescriptor() == null) && (descriptor.getSchemaReference() != null)) {
      addTypeAttributeIfNeeded(descriptor,xmlCompositeCollectionMapping,marshalRecord);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(stringValue);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(value);
  }
  return true;
}"
66673,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeObjectMapping.getConverter() != null) {
    Converter converter=xmlCompositeObjectMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(objectValue);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (xPathFragment.isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0; i < children.getLength(); i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!xPathFragment.isSelfFragment()) {
      getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if ((xmlCompositeObjectMapping.getReferenceDescriptor() == null) && (descriptor.getSchemaReference() != null)) {
      addTypeAttributeIfNeeded(descriptor,xmlCompositeObjectMapping,marshalRecord);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller);
    if (!xPathFragment.isSelfFragment()) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!xPathFragment.isSelfFragment()) {
      getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    String stringValue=getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(stringValue);
    if (!xPathFragment.isSelfFragment()) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(objectValue);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeObjectMapping.getConverter() != null) {
    Converter converter=xmlCompositeObjectMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(objectValue);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (xPathFragment.isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0; i < children.getLength(); i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!xPathFragment.isSelfFragment()) {
      getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if ((xmlCompositeObjectMapping.getReferenceDescriptor() == null) && (descriptor.getSchemaReference() != null)) {
      addTypeAttributeIfNeeded(descriptor,xmlCompositeObjectMapping,marshalRecord);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment);
    if (!xPathFragment.isSelfFragment()) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!xPathFragment.isSelfFragment()) {
      getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    String stringValue=getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(stringValue);
    if (!xPathFragment.isSelfFragment()) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(objectValue);
  }
  return true;
}"
66674,"public boolean marshal(NodeValue nodeValue,XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  return nodeValue.marshal(xPathFragment,marshalRecord,object,session,namespaceResolver,this);
}","public boolean marshal(NodeValue nodeValue,XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,XPathFragment rootFragment){
  return nodeValue.marshal(xPathFragment,marshalRecord,object,session,namespaceResolver,this,rootFragment);
}"
66675,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  boolean shouldWriteTypeAttribute=shouldWriteTypeAttribute(object,descriptor,isXMLRoot);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || shouldWriteTypeAttribute) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (descriptor != null) {
      if (shouldWriteTypeAttribute) {
        writeTypeAttribute(marshalRecord,descriptor,xsiPrefix);
      }
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.namespaceDeclarations(nr);
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this);
  }
 else   if (isXMLRoot) {
    if (null == object) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.XMLNS + XMLConstants.COLON + XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.SCHEMA_INSTANCE_PREFIX + XMLConstants.COLON + XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
    }
 else {
      if (shouldWriteTypeAttribute) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
      marshalRecord.characters(value);
    }
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  boolean shouldWriteTypeAttribute=shouldWriteTypeAttribute(object,descriptor,isXMLRoot);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || shouldWriteTypeAttribute) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (descriptor != null) {
      if (shouldWriteTypeAttribute) {
        writeTypeAttribute(marshalRecord,descriptor,xsiPrefix);
      }
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.namespaceDeclarations(nr);
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment);
  }
 else   if (isXMLRoot) {
    if (null == object) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.XMLNS + XMLConstants.COLON + XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.SCHEMA_INSTANCE_PREFIX + XMLConstants.COLON + XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
    }
 else {
      if (shouldWriteTypeAttribute) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
      marshalRecord.characters(value);
    }
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}"
66676,"public void writeSingleValue(Object attributeValue,Object parent,XMLRecord record,AbstractSession session){
  XMLMarshaller marshaller=record.getMarshaller();
  if (getConverter() != null) {
    Converter converter=getConverter();
    if (converter instanceof XMLConverter) {
      attributeValue=((XMLConverter)converter).convertObjectValueToDataValue(attributeValue,session,record.getMarshaller());
    }
 else {
      attributeValue=converter.convertObjectValueToDataValue(attributeValue,session);
    }
  }
  XMLField field=(XMLField)getField();
  if (field.getLastXPathFragment().isAttribute()) {
    if (isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
      try {
        String value=null;
        if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
          value=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)attributeValue);
        }
 else {
          XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
          byte[] bytes=data.getData();
          value=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
        }
        record.put(field,value);
      }
 catch (      ClassCastException cce) {
        throw XMLMarshalException.invalidSwaRefAttribute(getAttributeClassification().getName());
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,record.getMarshaller(),getMimeType(parent));
      String base64Value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).buildBase64StringFromBytes(data.getData());
      record.put(field,base64Value);
    }
  }
  if (record.isXOPPackage() && !isSwaRef() && !shouldInlineBinaryData()) {
    String c_id=XMLConstants.EMPTY_STRING;
    byte[] bytes=null;
    if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
      if (getAttributeClassification() == ClassConstants.ABYTE) {
        attributeValue=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(attributeValue,ClassConstants.APBYTE);
      }
      bytes=(byte[])attributeValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.getMimeType(parent),field.getLastXPathFragment().getLocalName(),field.getLastXPathFragment().getNamespaceURI());
    }
 else     if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)attributeValue,field.getLastXPathFragment().getLocalName(),field.getLastXPathFragment().getNamespaceURI());
      if (c_id == null) {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
        bytes=data.getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),field.getLastXPathFragment().getLocalName(),field.getLastXPathFragment().getNamespaceURI());
    }
    if (c_id == null) {
      XMLField textField=null;
      if (field.isSelfField()) {
        textField=new XMLField(XMLConstants.TEXT);
      }
 else {
        textField=new XMLField(field.getXPath() + '/' + XMLConstants.TEXT);
      }
      textField.setNamespaceResolver(field.getNamespaceResolver());
      textField.setSchemaType(field.getSchemaType());
      record.put(textField,bytes);
    }
 else {
      String xpath=this.getXPath();
      String prefix=null;
      boolean prefixAlreadyDefined=false;
      NamespaceResolver resolver=field.getNamespaceResolver();
      if (resolver != null) {
        prefix=resolver.resolveNamespaceURI(XMLConstants.XOP_URL);
      }
      if (prefix == null) {
        prefix=XMLConstants.XOP_PREFIX;
        resolver=new NamespaceResolver();
        resolver.put(prefix,XMLConstants.XOP_URL);
      }
 else {
        prefixAlreadyDefined=true;
      }
      String incxpath=null;
      if (field.isSelfField()) {
        incxpath=prefix + ""String_Node_Str"";
        xpath=(prefix + include);
      }
 else {
        incxpath=xpath + '/' + prefix+ ""String_Node_Str"";
        xpath+=('/' + prefix + include);
      }
      XMLField xpathField=new XMLField(xpath);
      xpathField.setNamespaceResolver(resolver);
      record.put(xpathField,c_id);
      XMLField incField=new XMLField(incxpath);
      incField.setNamespaceResolver(resolver);
      Object obj=record.getIndicatingNoEntry(incField);
      if (!prefixAlreadyDefined && obj != null && obj instanceof DOMRecord) {
        if (((DOMRecord)obj).getDOM().getNodeType() == Node.ELEMENT_NODE) {
          ((Element)((DOMRecord)obj).getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,XMLConstants.XOP_URL);
        }
      }
    }
  }
 else   if (isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    try {
      String c_id=null;
      if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)attributeValue);
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
        byte[] bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
      }
      XMLField textField=new XMLField(field.getXPath() + '/' + XMLConstants.TEXT);
      textField.setNamespaceResolver(field.getNamespaceResolver());
      textField.setSchemaType(field.getSchemaType());
      record.put(textField,c_id);
    }
 catch (    Exception ex) {
    }
  }
 else {
    XMLField textField=null;
    if (field.isSelfField()) {
      textField=new XMLField(XMLConstants.TEXT);
    }
 else {
      textField=new XMLField(field.getXPath() + '/' + XMLConstants.TEXT);
    }
    textField.setNamespaceResolver(field.getNamespaceResolver());
    textField.setSchemaType(field.getSchemaType());
    if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
      record.put(textField,attributeValue);
    }
 else {
      byte[] bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent)).getData();
      record.put(textField,bytes);
    }
  }
}","public void writeSingleValue(Object attributeValue,Object parent,XMLRecord record,AbstractSession session){
  XMLMarshaller marshaller=record.getMarshaller();
  if (getConverter() != null) {
    Converter converter=getConverter();
    if (converter instanceof XMLConverter) {
      attributeValue=((XMLConverter)converter).convertObjectValueToDataValue(attributeValue,session,record.getMarshaller());
    }
 else {
      attributeValue=converter.convertObjectValueToDataValue(attributeValue,session);
    }
  }
  XMLField field=(XMLField)getField();
  if (field.getLastXPathFragment().isAttribute()) {
    if (isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
      try {
        String value=null;
        if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
          value=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)attributeValue);
        }
 else {
          XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
          byte[] bytes=data.getData();
          value=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
        }
        record.put(field,value);
      }
 catch (      ClassCastException cce) {
        throw XMLMarshalException.invalidSwaRefAttribute(getAttributeClassification().getName());
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,record.getMarshaller(),getMimeType(parent));
      String base64Value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).buildBase64StringFromBytes(data.getData());
      record.put(field,base64Value);
    }
  }
  if (record.isXOPPackage() && !isSwaRef() && !shouldInlineBinaryData()) {
    String c_id=XMLConstants.EMPTY_STRING;
    byte[] bytes=null;
    String elementName=field.getLastXPathFragment().getLocalName();
    String namespaceUri=field.getLastXPathFragment().getNamespaceURI();
    if (field.getLastXPathFragment().isSelfFragment()) {
      DOMRecord domRecord=(DOMRecord)record;
      if (domRecord.getDOM().getNodeType() == Node.ELEMENT_NODE) {
        elementName=domRecord.getDOM().getLocalName();
        namespaceUri=domRecord.getDOM().getNamespaceURI();
      }
    }
    if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
      if (getAttributeClassification() == ClassConstants.ABYTE) {
        attributeValue=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(attributeValue,ClassConstants.APBYTE);
      }
      bytes=(byte[])attributeValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.getMimeType(parent),elementName,namespaceUri);
    }
 else     if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)attributeValue,elementName,namespaceUri);
      if (c_id == null) {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
        bytes=data.getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),elementName,namespaceUri);
    }
    if (c_id == null) {
      XMLField textField=null;
      if (field.isSelfField()) {
        textField=new XMLField(XMLConstants.TEXT);
      }
 else {
        textField=new XMLField(field.getXPath() + '/' + XMLConstants.TEXT);
      }
      textField.setNamespaceResolver(field.getNamespaceResolver());
      textField.setSchemaType(field.getSchemaType());
      record.put(textField,bytes);
    }
 else {
      String xpath=this.getXPath();
      String prefix=null;
      boolean prefixAlreadyDefined=false;
      NamespaceResolver resolver=field.getNamespaceResolver();
      if (resolver != null) {
        prefix=resolver.resolveNamespaceURI(XMLConstants.XOP_URL);
      }
      if (prefix == null) {
        prefix=XMLConstants.XOP_PREFIX;
        resolver=new NamespaceResolver();
        resolver.put(prefix,XMLConstants.XOP_URL);
      }
 else {
        prefixAlreadyDefined=true;
      }
      String incxpath=null;
      if (field.isSelfField()) {
        incxpath=prefix + ""String_Node_Str"";
        xpath=(prefix + include);
      }
 else {
        incxpath=xpath + '/' + prefix+ ""String_Node_Str"";
        xpath+=('/' + prefix + include);
      }
      XMLField xpathField=new XMLField(xpath);
      xpathField.setNamespaceResolver(resolver);
      record.put(xpathField,c_id);
      XMLField incField=new XMLField(incxpath);
      incField.setNamespaceResolver(resolver);
      Object obj=record.getIndicatingNoEntry(incField);
      if (!prefixAlreadyDefined && obj != null && obj instanceof DOMRecord) {
        if (((DOMRecord)obj).getDOM().getNodeType() == Node.ELEMENT_NODE) {
          ((Element)((DOMRecord)obj).getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,XMLConstants.XOP_URL);
        }
      }
    }
  }
 else   if (isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    try {
      String c_id=null;
      if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)attributeValue);
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent));
        byte[] bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
      }
      XMLField textField=new XMLField(field.getXPath() + '/' + XMLConstants.TEXT);
      textField.setNamespaceResolver(field.getNamespaceResolver());
      textField.setSchemaType(field.getSchemaType());
      record.put(textField,c_id);
    }
 catch (    Exception ex) {
    }
  }
 else {
    XMLField textField=null;
    if (field.isSelfField()) {
      textField=new XMLField(XMLConstants.TEXT);
    }
 else {
      textField=new XMLField(field.getXPath() + '/' + XMLConstants.TEXT);
    }
    textField.setNamespaceResolver(field.getNamespaceResolver());
    textField.setSchemaType(field.getSchemaType());
    if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
      record.put(textField,attributeValue);
    }
 else {
      byte[] bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(attributeValue,marshaller,getMimeType(parent)).getData();
      record.put(textField,bytes);
    }
  }
}"
66677,"public static List<FieldInfo> getFieldInfo(String packageName,String methodName,String methodNo,int sequence,SqlReflector reflector) throws SQLException {
  int data_level=-1;
  int next_rec_sequence=-1;
  ViewCache viewCache=reflector.getViewCache();
  Iterator<ViewRow> iter=viewCache.getRows(ALL_ARGUMENTS,new String[0],new String[]{PACKAGE_NAME,OBJECT_NAME,OVERLOAD},new Object[]{packageName,methodName,methodNo},new String[]{SEQUENCE});
  ArrayList<ViewRow> viewRows=new ArrayList<ViewRow>();
  while (iter.hasNext()) {
    UserArguments item=(UserArguments)iter.next();
    viewRows.add(item);
  }
  PlsqlTypeInfo[] info=PlsqlTypeInfo.getPlsqlTypeInfo(viewRows);
  if (info != null) {
    for (int i=0; i < info.length; i++) {
      if (data_level == -1 && (sequence == -1 || sequence == info[i].sequence)) {
        data_level=info[i].dataLevel;
      }
      if (data_level > -1 && data_level == info[i].dataLevel && next_rec_sequence == -1 && sequence < info[i].sequence) {
        next_rec_sequence=info[i].sequence;
        break;
      }
    }
  }
  data_level++;
  iter=viewCache.getRows(ALL_ARGUMENTS,new String[0],new String[]{PACKAGE_NAME,OBJECT_NAME,OVERLOAD,DATA_LEVEL},new Object[]{packageName,methodName,methodNo,new Integer(data_level)},new String[]{SEQUENCE});
  viewRows=new ArrayList<ViewRow>();
  while (iter.hasNext()) {
    UserArguments item=(UserArguments)iter.next();
    if ((sequence == -1 || item.sequence > sequence) && (next_rec_sequence == -1 || item.sequence < next_rec_sequence)) {
      viewRows.add(item);
    }
  }
  return FieldInfo.getFieldInfo(viewRows);
}","public static List<FieldInfo> getFieldInfo(String packageName,String methodName,String methodNo,int sequence,SqlReflector reflector) throws SQLException {
  int data_level=-1;
  int next_rec_sequence=-1;
  ViewCache viewCache=reflector.getViewCache();
  Iterator<ViewRow> iter=viewCache.getRows(ALL_ARGUMENTS,new String[0],new String[]{PACKAGE_NAME,OBJECT_NAME,OVERLOAD},new Object[]{packageName,methodName,methodNo},new String[]{SEQUENCE});
  ArrayList<ViewRow> viewRows=new ArrayList<ViewRow>();
  while (iter.hasNext()) {
    UserArguments item=(UserArguments)iter.next();
    viewRows.add(item);
  }
  PlsqlTypeInfo[] info=PlsqlTypeInfo.getPlsqlTypeInfo(viewRows);
  if (info != null) {
    for (int i=0; i < info.length; i++) {
      if (data_level == -1 && (sequence == -1 || sequence == info[i].sequence)) {
        data_level=info[i].dataLevel;
      }
      if (data_level > -1 && data_level == info[i].dataLevel && next_rec_sequence == -1 && sequence < info[i].sequence) {
        next_rec_sequence=info[i].sequence;
        break;
      }
    }
  }
  data_level++;
  iter=viewCache.getRows(ALL_ARGUMENTS,new String[0],new String[]{PACKAGE_NAME,OBJECT_NAME,OVERLOAD,DATA_LEVEL},new Object[]{packageName,methodName,methodNo,Integer.valueOf(data_level)},new String[]{SEQUENCE});
  viewRows=new ArrayList<ViewRow>();
  while (iter.hasNext()) {
    UserArguments item=(UserArguments)iter.next();
    if ((sequence == -1 || item.sequence > sequence) && (next_rec_sequence == -1 || item.sequence < next_rec_sequence)) {
      viewRows.add(item);
    }
  }
  return FieldInfo.getFieldInfo(viewRows);
}"
66678,"protected MethodInfo[] getMethodInfo(String schema,String name) throws SQLException {
  String[] keys=null;
  Object[] values=null;
  if (m_methodFilter != null && m_methodFilter.isSingleMethod()) {
    keys=new String[]{OWNER,PACKAGE_NAME,OBJECT_NAME,DATA_LEVEL};
    values=new Object[]{schema,name,m_methodFilter.getSingleMethodName(),new Integer(0)};
  }
 else {
    keys=new String[]{OWNER,Util.PACKAGE_NAME,Util.DATA_LEVEL};
    values=new Object[]{schema,name,new Integer(0)};
  }
  Iterator<ViewRow> iter=m_viewCache.getRows(ALL_ARGUMENTS,new String[0],keys,values,new String[0]);
  MethodInfo[] minfo=MethodInfo.groupBy(iter);
  return minfo;
}","protected MethodInfo[] getMethodInfo(String schema,String name) throws SQLException {
  String[] keys=null;
  Object[] values=null;
  if (m_methodFilter != null && m_methodFilter.isSingleMethod()) {
    keys=new String[]{OWNER,PACKAGE_NAME,OBJECT_NAME,DATA_LEVEL};
    values=new Object[]{schema,name,m_methodFilter.getSingleMethodName(),Integer.valueOf(0)};
  }
 else {
    keys=new String[]{OWNER,Util.PACKAGE_NAME,Util.DATA_LEVEL};
    values=new Object[]{schema,name,Integer.valueOf(0)};
  }
  Iterator<ViewRow> iter=m_viewCache.getRows(ALL_ARGUMENTS,new String[0],keys,values,new String[0]);
  MethodInfo[] minfo=MethodInfo.groupBy(iter);
  return minfo;
}"
66679,"public ResultInfoValues(String schema,String name,MethodFilter methodFilter,ViewCache viewCache) throws SQLException {
  super(schema,name);
  String[] keys=null;
  Object[] values=null;
  if (methodFilter != null && methodFilter.isSingleMethod()) {
    keys=new String[]{OWNER,PACKAGE_NAME,OBJECT_NAME,DATA_LEVEL,POSITION};
    values=new Object[]{schema,name,methodFilter.getSingleMethodName(),new Integer(0),new Integer(0)};
  }
 else {
    keys=new String[]{OWNER,PACKAGE_NAME,DATA_LEVEL,POSITION};
    values=new Object[]{schema,name,new Integer(0),new Integer(0)};
  }
  Iterator<ViewRow> iter=viewCache.getRows(ALL_ARGUMENTS,new String[0],keys,values,new String[0]);
  while (iter.hasNext()) {
    UserArguments item=(UserArguments)iter.next();
    String key=makeKey(item.OBJECT_NAME,item.OVERLOAD);
    if (m_ht.get(key) == null) {
      ArrayList<ViewRow> itemWrapper=new ArrayList<ViewRow>();
      itemWrapper.add(item);
      m_ht.put(key,itemWrapper);
    }
  }
}","public ResultInfoValues(String schema,String name,MethodFilter methodFilter,ViewCache viewCache) throws SQLException {
  super(schema,name);
  String[] keys=null;
  Object[] values=null;
  if (methodFilter != null && methodFilter.isSingleMethod()) {
    keys=new String[]{OWNER,PACKAGE_NAME,OBJECT_NAME,DATA_LEVEL,POSITION};
    values=new Object[]{schema,name,methodFilter.getSingleMethodName(),Integer.valueOf(0),Integer.valueOf(0)};
  }
 else {
    keys=new String[]{OWNER,PACKAGE_NAME,DATA_LEVEL,POSITION};
    values=new Object[]{schema,name,Integer.valueOf(0),Integer.valueOf(0)};
  }
  Iterator<ViewRow> iter=viewCache.getRows(ALL_ARGUMENTS,new String[0],keys,values,new String[0]);
  while (iter.hasNext()) {
    UserArguments item=(UserArguments)iter.next();
    String key=makeKey(item.OBJECT_NAME,item.OVERLOAD);
    if (m_ht.get(key) == null) {
      ArrayList<ViewRow> itemWrapper=new ArrayList<ViewRow>();
      itemWrapper.add(item);
      m_ht.put(key,itemWrapper);
    }
  }
}"
66680,"public ParamInfoValues(String schema,String name,MethodFilter methodFilter,ViewCache viewCache) throws SQLException {
  super(schema,name);
  String[] keys=null;
  Object[] values=null;
  if (methodFilter != null && methodFilter.isSingleMethod()) {
    keys=new String[]{OWNER,PACKAGE_NAME,OBJECT_NAME,DATA_LEVEL};
    values=new Object[]{schema,name,methodFilter.getSingleMethodName(),new Integer(0)};
  }
 else {
    keys=new String[]{OWNER,PACKAGE_NAME,DATA_LEVEL};
    values=new Object[]{schema,name,new Integer(0)};
  }
  Iterator<ViewRow> iter=viewCache.getRows(ALL_ARGUMENTS,new String[0],keys,values,new String[0]);
  ArrayList<ViewRow> viewRows=new ArrayList<ViewRow>();
  while (iter.hasNext()) {
    UserArguments item=(UserArguments)iter.next();
    if (item.ARGUMENT_NAME != null) {
      viewRows.add(item);
    }
  }
  UserArguments.orderByPosition(viewRows);
  for (int i=0; i < viewRows.size(); i++) {
    UserArguments item=(UserArguments)viewRows.get(i);
    String key=makeKey(item.OBJECT_NAME,item.OVERLOAD);
    ArrayList<ViewRow> v=m_ht.get(key);
    if (v == null) {
      v=new ArrayList<ViewRow>();
      m_ht.put(key,v);
    }
    v.add(item);
  }
}","public ParamInfoValues(String schema,String name,MethodFilter methodFilter,ViewCache viewCache) throws SQLException {
  super(schema,name);
  String[] keys=null;
  Object[] values=null;
  if (methodFilter != null && methodFilter.isSingleMethod()) {
    keys=new String[]{OWNER,PACKAGE_NAME,OBJECT_NAME,DATA_LEVEL};
    values=new Object[]{schema,name,methodFilter.getSingleMethodName(),Integer.valueOf(0)};
  }
 else {
    keys=new String[]{OWNER,PACKAGE_NAME,DATA_LEVEL};
    values=new Object[]{schema,name,Integer.valueOf(0)};
  }
  Iterator<ViewRow> iter=viewCache.getRows(ALL_ARGUMENTS,new String[0],keys,values,new String[0]);
  ArrayList<ViewRow> viewRows=new ArrayList<ViewRow>();
  while (iter.hasNext()) {
    UserArguments item=(UserArguments)iter.next();
    if (item.ARGUMENT_NAME != null) {
      viewRows.add(item);
    }
  }
  UserArguments.orderByPosition(viewRows);
  for (int i=0; i < viewRows.size(); i++) {
    UserArguments item=(UserArguments)viewRows.get(i);
    String key=makeKey(item.OBJECT_NAME,item.OVERLOAD);
    ArrayList<ViewRow> v=m_ht.get(key);
    if (v == null) {
      v=new ArrayList<ViewRow>();
      m_ht.put(key,v);
    }
    v.add(item);
  }
}"
66681,"public boolean isPre920(){
  if (m_isPre920 == null) {
    try {
      String v=m_conn.getMetaData().getDatabaseProductVersion().toUpperCase();
      if (v.startsWith(""String_Node_Str"") || v.startsWith(""String_Node_Str"")) {
        m_isPre920=new Boolean(false);
        return false;
      }
      int pos=v.indexOf(""String_Node_Str"");
      if (0 < pos) {
        v=v.substring(pos);
      }
      String vp=v.substring(0,""String_Node_Str"".length()).toUpperCase();
      if (vp.equals(""String_Node_Str"") || vp.equals(""String_Node_Str"") || vp.equals(""String_Node_Str"")|| (vp.equals(""String_Node_Str"") && (v.indexOf(""String_Node_Str"") > 0 || v.indexOf(""String_Node_Str"") > 0 || v.indexOf(""String_Node_Str"") > 0))) {
        m_isPre920=new Boolean(false);
      }
    }
 catch (    Exception e) {
    }
    if (m_isPre920 == null) {
      m_isPre920=new Boolean(true);
    }
  }
  return m_isPre920.booleanValue();
}","public boolean isPre920(){
  if (m_isPre920 == null) {
    try {
      String v=m_conn.getMetaData().getDatabaseProductVersion().toUpperCase();
      if (v.startsWith(""String_Node_Str"") || v.startsWith(""String_Node_Str"")) {
        m_isPre920=Boolean.valueOf(false);
        return false;
      }
      int pos=v.indexOf(""String_Node_Str"");
      if (0 < pos) {
        v=v.substring(pos);
      }
      String vp=v.substring(0,""String_Node_Str"".length()).toUpperCase();
      if (vp.equals(""String_Node_Str"") || vp.equals(""String_Node_Str"") || vp.equals(""String_Node_Str"")|| (vp.equals(""String_Node_Str"") && (v.indexOf(""String_Node_Str"") > 0 || v.indexOf(""String_Node_Str"") > 0 || v.indexOf(""String_Node_Str"") > 0))) {
        m_isPre920=Boolean.valueOf(false);
      }
    }
 catch (    Exception e) {
    }
    if (m_isPre920 == null) {
      m_isPre920=Boolean.valueOf(true);
    }
  }
  return m_isPre920.booleanValue();
}"
66682,"protected MethodInfo[] getMethodInfo(String schema,String name) throws SQLException {
  Iterator<ViewRow> iter;
  List<String> names=new ArrayList<String>();
  List<Object> values=new ArrayList<Object>();
  names.add(Util.OWNER);
  values.add(schema);
  names.add(Util.PACKAGE_NAME);
  values.add(null);
  names.add(Util.DATA_LEVEL);
  values.add(new Integer(0));
  if (m_methodFilter != null) {
    List<String> methodNames=m_methodFilter.getMethodNames();
    if (methodNames != null) {
      for (int i=0, len=methodNames.size(); i < len; i++) {
        names.add(Util.OBJECT_NAME);
        values.add(SqlName.dbifyName(methodNames.get(i),m_reflector));
      }
    }
  }
  iter=m_viewCache.getRows(ALL_ARGUMENTS,new String[0],(String[])names.toArray(new String[0]),values.toArray(new Object[0]),new String[0]);
  MethodInfo[] minfo=MethodInfo.groupBy(iter);
  return minfo;
}","protected MethodInfo[] getMethodInfo(String schema,String name) throws SQLException {
  Iterator<ViewRow> iter;
  List<String> names=new ArrayList<String>();
  List<Object> values=new ArrayList<Object>();
  names.add(Util.OWNER);
  values.add(schema);
  names.add(Util.PACKAGE_NAME);
  values.add(null);
  names.add(Util.DATA_LEVEL);
  values.add(Integer.valueOf(0));
  if (m_methodFilter != null) {
    List<String> methodNames=m_methodFilter.getMethodNames();
    if (methodNames != null) {
      for (int i=0, len=methodNames.size(); i < len; i++) {
        names.add(Util.OBJECT_NAME);
        values.add(SqlName.dbifyName(methodNames.get(i),m_reflector));
      }
    }
  }
  iter=m_viewCache.getRows(ALL_ARGUMENTS,new String[0],(String[])names.toArray(new String[0]),values.toArray(new Object[0]),new String[0]);
  MethodInfo[] minfo=MethodInfo.groupBy(iter);
  return minfo;
}"
66683,"protected ResultInfo getResultInfo(String schema,String name,String method,String methodNo) throws SQLException {
  Iterator<ViewRow> iter=null;
  if (methodNo == null) {
    iter=m_viewCache.getRows(ALL_ARGUMENTS,new String[0],new String[]{OWNER,PACKAGE_NAME,PACKAGE_NAME,OBJECT_NAME,DATA_LEVEL,POSITION},new Object[]{schema,method,null,method,new Integer(0),new Integer(0)},new String[0]);
  }
 else {
    iter=m_viewCache.getRows(ALL_ARGUMENTS,new String[0],new String[]{OWNER,PACKAGE_NAME,PACKAGE_NAME,OBJECT_NAME,OVERLOAD,DATA_LEVEL,POSITION},new Object[]{schema,method,null,method,methodNo,new Integer(0),new Integer(0)},new String[0]);
  }
  return ResultInfo.getResultInfo(iter);
}","protected ResultInfo getResultInfo(String schema,String name,String method,String methodNo) throws SQLException {
  Iterator<ViewRow> iter=null;
  if (methodNo == null) {
    iter=m_viewCache.getRows(ALL_ARGUMENTS,new String[0],new String[]{OWNER,PACKAGE_NAME,PACKAGE_NAME,OBJECT_NAME,DATA_LEVEL,POSITION},new Object[]{schema,method,null,method,Integer.valueOf(0),Integer.valueOf(0)},new String[0]);
  }
 else {
    iter=m_viewCache.getRows(ALL_ARGUMENTS,new String[0],new String[]{OWNER,PACKAGE_NAME,PACKAGE_NAME,OBJECT_NAME,OVERLOAD,DATA_LEVEL,POSITION},new Object[]{schema,method,null,method,methodNo,Integer.valueOf(0),Integer.valueOf(0)},new String[0]);
  }
  return ResultInfo.getResultInfo(iter);
}"
66684,"protected ParamInfo[] getParamInfo(String schema,String name,String method,String methodNo) throws SQLException {
  Iterator<ViewRow> iter=null;
  if (methodNo == null) {
    iter=m_viewCache.getRows(ALL_ARGUMENTS,new String[0],new String[]{OWNER,PACKAGE_NAME,PACKAGE_NAME,OBJECT_NAME,DATA_LEVEL,ARGUMENT_NAME},new Object[]{schema,method,null,method,new Integer(0),NOT_NULL},new String[]{POSITION});
  }
 else {
    iter=m_viewCache.getRows(ALL_ARGUMENTS,new String[0],new String[]{OWNER,PACKAGE_NAME,PACKAGE_NAME,OBJECT_NAME,OVERLOAD,DATA_LEVEL,ARGUMENT_NAME},new Object[]{schema,method,null,method,methodNo,new Integer(0),NOT_NULL},new String[]{POSITION});
  }
  return ParamInfo.getParamInfo(iter);
}","protected ParamInfo[] getParamInfo(String schema,String name,String method,String methodNo) throws SQLException {
  Iterator<ViewRow> iter=null;
  if (methodNo == null) {
    iter=m_viewCache.getRows(ALL_ARGUMENTS,new String[0],new String[]{OWNER,PACKAGE_NAME,PACKAGE_NAME,OBJECT_NAME,DATA_LEVEL,ARGUMENT_NAME},new Object[]{schema,method,null,method,Integer.valueOf(0),NOT_NULL},new String[]{POSITION});
  }
 else {
    iter=m_viewCache.getRows(ALL_ARGUMENTS,new String[0],new String[]{OWNER,PACKAGE_NAME,PACKAGE_NAME,OBJECT_NAME,OVERLOAD,DATA_LEVEL,ARGUMENT_NAME},new Object[]{schema,method,null,method,methodNo,Integer.valueOf(0),NOT_NULL},new String[]{POSITION});
  }
  return ParamInfo.getParamInfo(iter);
}"
66685,"@SuppressWarnings(""String_Node_Str"") protected boolean hasDefault(int object_id,String methodName,int sequence,String overload) throws SQLException {
  Connection conn=null;
  PreparedStatement stmt=null;
  ResultSet rs=null;
  final int objectIdIdx=1;
  final int objectNameIdx=2;
  final int seqIdx=3;
  int hasDefaultInt=0;
  try {
    Iterator<ViewRow> rowIter;
    if (overload == null || overload.equals(""String_Node_Str"")) {
      rowIter=m_viewCache.getRows(Util.ALL_ARGUMENTS,new String[]{""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{new Integer(object_id),methodName,new Integer(sequence),null},new String[0]);
    }
 else {
      rowIter=m_viewCache.getRows(Util.ALL_ARGUMENTS,new String[]{""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{new Integer(object_id),methodName,new Integer(sequence),overload},new String[0]);
    }
    if (rowIter.hasNext()) {
      SingleColumnViewRow row=(SingleColumnViewRow)rowIter.next();
      String defaulted=row.getValue();
      hasDefaultInt=""String_Node_Str"".equalsIgnoreCase(defaulted) ? 1 : 0;
    }
 else {
      throw new SQLException(""String_Node_Str"");
    }
  }
 catch (  Exception se) {
    try {
      final int oidIdx=1;
      final int methodNameIdx=2;
      final int sequenceIdx=3;
      final int overloadIdx=4;
      String sqljutl=""String_Node_Str"" + object_id + ""String_Node_Str""+ ""String_Node_Str""+ methodName.toUpperCase()+ ""String_Node_Str""+ sequence+ ""String_Node_Str""+ ((overload == null || overload.equals(""String_Node_Str"")) ? ""String_Node_Str"" : overload)+ ""String_Node_Str"";
      Iterator<ViewRow> rowIter=m_viewCache.getRows(Util.DUAL,new String[]{sqljutl},new String[0],new Object[0],new String[0]);
      if (rowIter.hasNext()) {
        SingleColumnViewRow row=(SingleColumnViewRow)rowIter.next();
        if (row.getValue() != null) {
          hasDefaultInt=Integer.parseInt(row.getValue());
        }
      }
    }
 catch (    Exception e8) {
      e8.printStackTrace();
      System.err.println(""String_Node_Str"");
    }
  }
 finally {
    try {
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
    }
    try {
      if (rs != null) {
        rs.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  if (hasDefaultInt == 1) {
    return true;
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") protected boolean hasDefault(int object_id,String methodName,int sequence,String overload) throws SQLException {
  Connection conn=null;
  PreparedStatement stmt=null;
  ResultSet rs=null;
  final int objectIdIdx=1;
  final int objectNameIdx=2;
  final int seqIdx=3;
  int hasDefaultInt=0;
  try {
    Iterator<ViewRow> rowIter;
    if (overload == null || overload.equals(""String_Node_Str"")) {
      rowIter=m_viewCache.getRows(Util.ALL_ARGUMENTS,new String[]{""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{Integer.valueOf(object_id),methodName,Integer.valueOf(sequence),null},new String[0]);
    }
 else {
      rowIter=m_viewCache.getRows(Util.ALL_ARGUMENTS,new String[]{""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{Integer.valueOf(object_id),methodName,Integer.valueOf(sequence),overload},new String[0]);
    }
    if (rowIter.hasNext()) {
      SingleColumnViewRow row=(SingleColumnViewRow)rowIter.next();
      String defaulted=row.getValue();
      hasDefaultInt=""String_Node_Str"".equalsIgnoreCase(defaulted) ? 1 : 0;
    }
 else {
      throw new SQLException(""String_Node_Str"");
    }
  }
 catch (  Exception se) {
    try {
      final int oidIdx=1;
      final int methodNameIdx=2;
      final int sequenceIdx=3;
      final int overloadIdx=4;
      String sqljutl=""String_Node_Str"" + object_id + ""String_Node_Str""+ ""String_Node_Str""+ methodName.toUpperCase()+ ""String_Node_Str""+ sequence+ ""String_Node_Str""+ ((overload == null || overload.equals(""String_Node_Str"")) ? ""String_Node_Str"" : overload)+ ""String_Node_Str"";
      Iterator<ViewRow> rowIter=m_viewCache.getRows(Util.DUAL,new String[]{sqljutl},new String[0],new Object[0],new String[0]);
      if (rowIter.hasNext()) {
        SingleColumnViewRow row=(SingleColumnViewRow)rowIter.next();
        if (row.getValue() != null) {
          hasDefaultInt=Integer.parseInt(row.getValue());
        }
      }
    }
 catch (    Exception e8) {
      e8.printStackTrace();
      System.err.println(""String_Node_Str"");
    }
  }
 finally {
    try {
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
    }
    try {
      if (rs != null) {
        rs.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  if (hasDefaultInt == 1) {
    return true;
  }
  return false;
}"
66686,"private List<ProcedureMethod> reflectMethods(SqlName sqlName) throws SQLException, PublisherException {
  String schema=sqlName.getSchemaName();
  String type=sqlName.getTypeName();
  ArrayList<ProcedureMethod> methodl=new ArrayList<ProcedureMethod>();
  MethodInfo[] minfo=getMethodInfo(schema,type);
  for (int minfoi=0; minfoi < minfo.length; minfoi++) {
    String methodName=minfo[minfoi].methodName;
    String methodType=minfo[minfoi].methodType;
    String methodNo=minfo[minfoi].methodNo;
    int results=minfo[minfoi].results;
    int parameters=minfo[minfoi].parameters;
    boolean preApproved=true;
    if (m_methodFilter != null) {
      preApproved=m_methodFilter.acceptMethod(new ProcedureMethod(methodName,null,-1,null,null,null,null,null,0),true);
    }
    if (!preApproved) {
      continue;
    }
    int modifiers;
    modifiers=PublisherModifier.PUBLIC;
    if (methodType.equals(""String_Node_Str"")) {
      modifiers=modifiers ^ PublisherModifier.MAP;
    }
 else     if (methodType.equals(""String_Node_Str"")) {
      modifiers=modifiers ^ PublisherModifier.ORDER;
    }
    TypeClass returnType=null;
    ResultInfo resultInfo=null;
    if (results > 0) {
      resultInfo=getResultInfo(schema,type,methodName,methodNo);
      if (resultInfo != null) {
        try {
          String resultTypeOwner=resultInfo.resultTypeOwner;
          String resultTypeName=resultInfo.resultTypeName;
          String resultTypeSubname=resultInfo.resultTypeSubname;
          String resultTypeMod=resultInfo.resultTypeMod;
          boolean ncharFormOfUse=resultInfo.ncharFormOfUse;
          String resultMethodName=resultInfo.methodName;
          String resultMethodNo=resultInfo.methodNo;
          int sequence=resultInfo.sequence;
          returnType=m_reflector.addPlsqlDBType(resultTypeOwner,resultTypeName,resultTypeSubname,resultTypeMod,ncharFormOfUse,type,resultMethodName,resultMethodNo,sequence,this);
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
    int paramCount=parameters;
    List<TypeClass> paramTypes_v=new ArrayList<TypeClass>();
    List<String> paramNames_v=new ArrayList<String>();
    List<Integer> paramModes_v=new ArrayList<Integer>();
    List<Boolean> paramNCharFormOfUse_v=new ArrayList<Boolean>();
    int firstNoDefault=-1;
    boolean[] paramDefaults=new boolean[paramCount];
    if (paramCount > 0) {
      ParamInfo[] pinfo=null;
      pinfo=getParamInfo(schema,type,methodName,methodNo);
      String[] paramTypeOwner=new String[paramCount];
      String[] paramName=new String[paramCount];
      String[] paramTypeName=new String[paramCount];
      String[] paramTypeSubname=new String[paramCount];
      String[] paramTypeMod=new String[paramCount];
      String[] paramMode=new String[paramCount];
      boolean[] mcharFormOfUse=new boolean[paramCount];
      String[] paramMethodName=new String[paramCount];
      String[] paramMethodNo=new String[paramCount];
      int[] sequence=new int[paramCount];
      int[] objectId=new int[paramCount];
      for (int i=pinfo.length - 1; i >= 0; i--) {
        paramTypeOwner[i]=pinfo[i].paramTypeOwner;
        paramName[i]=pinfo[i].paramName;
        paramTypeName[i]=pinfo[i].paramTypeName;
        paramTypeSubname[i]=pinfo[i].paramTypeSubname;
        paramTypeMod[i]=pinfo[i].paramTypeMod;
        paramMode[i]=pinfo[i].paramMode;
        mcharFormOfUse[i]=pinfo[i].ncharFormOfUse;
        paramMethodName[i]=pinfo[i].methodName;
        paramMethodNo[i]=pinfo[i].methodNo;
        sequence[i]=pinfo[i].sequence;
        objectId[i]=pinfo[i].objectId;
      }
      paramDefaults=new boolean[pinfo.length];
      for (int i=pinfo.length - 1; i >= 0; i--) {
        paramDefaults[i]=hasDefault(objectId[i],paramMethodName[i],sequence[i],paramMethodNo[i]);
      }
      for (int i=pinfo.length - 1; i >= 0; i--) {
        if (!paramDefaults[i]) {
          firstNoDefault=i;
          break;
        }
      }
      for (int i=0; i < paramCount && paramMethodName[i] != null; i++) {
        try {
          paramNames_v.add(paramName[i]);
          String mode=paramMode[i];
          paramModes_v.add(new Integer((mode == null) ? ProcedureMethod.INOUT : (mode.equals(""String_Node_Str"") ? ProcedureMethod.IN : (mode.equals(""String_Node_Str"") ? ProcedureMethod.OUT : ProcedureMethod.INOUT))));
          paramTypes_v.add(m_reflector.addPlsqlDBType(paramTypeOwner[i],paramTypeName[i],paramTypeSubname[i],paramTypeMod[i],mcharFormOfUse[i],type,paramMethodName[i],paramMethodNo[i],sequence[i],this));
          paramNCharFormOfUse_v.add(new Boolean(mcharFormOfUse[i]));
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
    int len=paramTypes_v.size();
    if (len != paramCount) {
      System.err.println(""String_Node_Str"" + methodName + ""String_Node_Str""+ paramCount+ ""String_Node_Str""+ len);
    }
    TypeClass[] paramTypes=new TypeClass[len];
    String[] paramNames=new String[len];
    int[] paramModes=new int[len];
    boolean[] paramNCharFormOfUse=new boolean[len];
    for (int i=0; i < len; i++) {
      paramTypes[i]=(TypeClass)(paramTypes_v.get(i));
      paramNames[i]=paramNames_v.get(i);
      paramModes[i]=paramModes_v.get(i).intValue();
      paramNCharFormOfUse[i]=paramNCharFormOfUse_v.get(i).booleanValue();
    }
    paramTypes=generateDefaultArgsHolderParamTypes(paramTypes,paramDefaults,paramNCharFormOfUse);
    ProcedureMethod method=null;
    for (int paramLen=firstNoDefault + 1; paramLen <= paramCount; paramLen++) {
      if (this instanceof SqlPackageType && returnType != null && resultInfo != null && returnType.equals(SqlReflector.REF_CURSOR_TYPE)) {
        method=new PlsqlCursorMethod(type,methodName,methodNo,modifiers,resultInfo.sequence,paramTypes,paramNames,paramModes,paramDefaults,paramLen,false,m_reflector);
      }
 else       if (this instanceof SqlPackageType) {
        method=new PlsqlMethod(methodName,methodNo,modifiers,returnType,paramTypes,paramNames,paramModes,paramDefaults,paramLen);
      }
 else {
        method=new ProcedureMethod(methodName,methodNo,modifiers,returnType,paramTypes,paramNames,paramModes,paramDefaults,paramLen);
      }
      if (acceptMethod(method,false)) {
        methodl.add(method);
        if (returnType != null && resultInfo != null && returnType.equals(SqlReflector.REF_CURSOR_TYPE)) {
          method=new PlsqlCursorMethod(type,methodName,methodNo,modifiers,resultInfo.sequence,paramTypes,paramNames,paramModes,paramDefaults,paramLen,true,m_reflector);
          if (((PlsqlCursorMethod)method).getReturnColCount() != 0) {
            methodl.add(method);
          }
        }
      }
    }
  }
  Collections.sort(methodl);
  return methodl;
}","private List<ProcedureMethod> reflectMethods(SqlName sqlName) throws SQLException, PublisherException {
  String schema=sqlName.getSchemaName();
  String type=sqlName.getTypeName();
  ArrayList<ProcedureMethod> methodl=new ArrayList<ProcedureMethod>();
  MethodInfo[] minfo=getMethodInfo(schema,type);
  for (int minfoi=0; minfoi < minfo.length; minfoi++) {
    String methodName=minfo[minfoi].methodName;
    String methodType=minfo[minfoi].methodType;
    String methodNo=minfo[minfoi].methodNo;
    int results=minfo[minfoi].results;
    int parameters=minfo[minfoi].parameters;
    boolean preApproved=true;
    if (m_methodFilter != null) {
      preApproved=m_methodFilter.acceptMethod(new ProcedureMethod(methodName,null,-1,null,null,null,null,null,0),true);
    }
    if (!preApproved) {
      continue;
    }
    int modifiers;
    modifiers=PublisherModifier.PUBLIC;
    if (methodType.equals(""String_Node_Str"")) {
      modifiers=modifiers ^ PublisherModifier.MAP;
    }
 else     if (methodType.equals(""String_Node_Str"")) {
      modifiers=modifiers ^ PublisherModifier.ORDER;
    }
    TypeClass returnType=null;
    ResultInfo resultInfo=null;
    if (results > 0) {
      resultInfo=getResultInfo(schema,type,methodName,methodNo);
      if (resultInfo != null) {
        try {
          String resultTypeOwner=resultInfo.resultTypeOwner;
          String resultTypeName=resultInfo.resultTypeName;
          String resultTypeSubname=resultInfo.resultTypeSubname;
          String resultTypeMod=resultInfo.resultTypeMod;
          boolean ncharFormOfUse=resultInfo.ncharFormOfUse;
          String resultMethodName=resultInfo.methodName;
          String resultMethodNo=resultInfo.methodNo;
          int sequence=resultInfo.sequence;
          returnType=m_reflector.addPlsqlDBType(resultTypeOwner,resultTypeName,resultTypeSubname,resultTypeMod,ncharFormOfUse,type,resultMethodName,resultMethodNo,sequence,this);
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
    int paramCount=parameters;
    List<TypeClass> paramTypes_v=new ArrayList<TypeClass>();
    List<String> paramNames_v=new ArrayList<String>();
    List<Integer> paramModes_v=new ArrayList<Integer>();
    List<Boolean> paramNCharFormOfUse_v=new ArrayList<Boolean>();
    int firstNoDefault=-1;
    boolean[] paramDefaults=new boolean[paramCount];
    if (paramCount > 0) {
      ParamInfo[] pinfo=null;
      pinfo=getParamInfo(schema,type,methodName,methodNo);
      String[] paramTypeOwner=new String[paramCount];
      String[] paramName=new String[paramCount];
      String[] paramTypeName=new String[paramCount];
      String[] paramTypeSubname=new String[paramCount];
      String[] paramTypeMod=new String[paramCount];
      String[] paramMode=new String[paramCount];
      boolean[] mcharFormOfUse=new boolean[paramCount];
      String[] paramMethodName=new String[paramCount];
      String[] paramMethodNo=new String[paramCount];
      int[] sequence=new int[paramCount];
      int[] objectId=new int[paramCount];
      for (int i=pinfo.length - 1; i >= 0; i--) {
        paramTypeOwner[i]=pinfo[i].paramTypeOwner;
        paramName[i]=pinfo[i].paramName;
        paramTypeName[i]=pinfo[i].paramTypeName;
        paramTypeSubname[i]=pinfo[i].paramTypeSubname;
        paramTypeMod[i]=pinfo[i].paramTypeMod;
        paramMode[i]=pinfo[i].paramMode;
        mcharFormOfUse[i]=pinfo[i].ncharFormOfUse;
        paramMethodName[i]=pinfo[i].methodName;
        paramMethodNo[i]=pinfo[i].methodNo;
        sequence[i]=pinfo[i].sequence;
        objectId[i]=pinfo[i].objectId;
      }
      paramDefaults=new boolean[pinfo.length];
      for (int i=pinfo.length - 1; i >= 0; i--) {
        paramDefaults[i]=hasDefault(objectId[i],paramMethodName[i],sequence[i],paramMethodNo[i]);
      }
      for (int i=pinfo.length - 1; i >= 0; i--) {
        if (!paramDefaults[i]) {
          firstNoDefault=i;
          break;
        }
      }
      for (int i=0; i < paramCount && paramMethodName[i] != null; i++) {
        try {
          paramNames_v.add(paramName[i]);
          String mode=paramMode[i];
          paramModes_v.add(Integer.valueOf((mode == null) ? ProcedureMethod.INOUT : (mode.equals(""String_Node_Str"") ? ProcedureMethod.IN : (mode.equals(""String_Node_Str"") ? ProcedureMethod.OUT : ProcedureMethod.INOUT))));
          paramTypes_v.add(m_reflector.addPlsqlDBType(paramTypeOwner[i],paramTypeName[i],paramTypeSubname[i],paramTypeMod[i],mcharFormOfUse[i],type,paramMethodName[i],paramMethodNo[i],sequence[i],this));
          paramNCharFormOfUse_v.add(Boolean.valueOf(mcharFormOfUse[i]));
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
    int len=paramTypes_v.size();
    if (len != paramCount) {
      System.err.println(""String_Node_Str"" + methodName + ""String_Node_Str""+ paramCount+ ""String_Node_Str""+ len);
    }
    TypeClass[] paramTypes=new TypeClass[len];
    String[] paramNames=new String[len];
    int[] paramModes=new int[len];
    boolean[] paramNCharFormOfUse=new boolean[len];
    for (int i=0; i < len; i++) {
      paramTypes[i]=(TypeClass)(paramTypes_v.get(i));
      paramNames[i]=paramNames_v.get(i);
      paramModes[i]=paramModes_v.get(i).intValue();
      paramNCharFormOfUse[i]=paramNCharFormOfUse_v.get(i).booleanValue();
    }
    paramTypes=generateDefaultArgsHolderParamTypes(paramTypes,paramDefaults,paramNCharFormOfUse);
    ProcedureMethod method=null;
    for (int paramLen=firstNoDefault + 1; paramLen <= paramCount; paramLen++) {
      if (this instanceof SqlPackageType && returnType != null && resultInfo != null && returnType.equals(SqlReflector.REF_CURSOR_TYPE)) {
        method=new PlsqlCursorMethod(type,methodName,methodNo,modifiers,resultInfo.sequence,paramTypes,paramNames,paramModes,paramDefaults,paramLen,false,m_reflector);
      }
 else       if (this instanceof SqlPackageType) {
        method=new PlsqlMethod(methodName,methodNo,modifiers,returnType,paramTypes,paramNames,paramModes,paramDefaults,paramLen);
      }
 else {
        method=new ProcedureMethod(methodName,methodNo,modifiers,returnType,paramTypes,paramNames,paramModes,paramDefaults,paramLen);
      }
      if (acceptMethod(method,false)) {
        methodl.add(method);
        if (returnType != null && resultInfo != null && returnType.equals(SqlReflector.REF_CURSOR_TYPE)) {
          method=new PlsqlCursorMethod(type,methodName,methodNo,modifiers,resultInfo.sequence,paramTypes,paramNames,paramModes,paramDefaults,paramLen,true,m_reflector);
          if (((PlsqlCursorMethod)method).getReturnColCount() != 0) {
            methodl.add(method);
          }
        }
      }
    }
  }
  Collections.sort(methodl);
  return methodl;
}"
66687,"public void writeExternal(ObjectOutput out) throws IOException {
  if (m_viewCacheDebug) {
    System.out.println(""String_Node_Str"");
  }
  out.writeObject(m_user);
  out.writeObject(new Integer(m_hits));
  out.writeObject(new Integer(m_visits));
  out.writeObject(new Integer(m_rowsCache.size()));
  for (int i=0; i < m_rowsCache.size(); i++) {
    RowsCacheEntry rce=(RowsCacheEntry)m_rowsCache.get(i);
    out.writeObject(rce);
  }
  out.writeObject(new Integer(m_rowsCacheIndex.size()));
  Iterator keys=m_rowsCacheIndex.keySet().iterator();
  Iterator values=m_rowsCacheIndex.values().iterator();
  while (keys.hasNext()) {
    out.writeObject(keys.next());
    ArrayList rows=(ArrayList)values.next();
    out.writeObject(new Integer(rows.size()));
    for (int i=0; i < rows.size(); i++) {
      out.writeObject(rows.get(i));
    }
  }
}","public void writeExternal(ObjectOutput out) throws IOException {
  if (m_viewCacheDebug) {
    System.out.println(""String_Node_Str"");
  }
  out.writeObject(m_user);
  out.writeObject(Integer.valueOf(m_hits));
  out.writeObject(Integer.valueOf(m_visits));
  out.writeObject(Integer.valueOf(m_rowsCache.size()));
  for (int i=0; i < m_rowsCache.size(); i++) {
    RowsCacheEntry rce=(RowsCacheEntry)m_rowsCache.get(i);
    out.writeObject(rce);
  }
  out.writeObject(Integer.valueOf(m_rowsCacheIndex.size()));
  Iterator keys=m_rowsCacheIndex.keySet().iterator();
  Iterator values=m_rowsCacheIndex.values().iterator();
  while (keys.hasNext()) {
    out.writeObject(keys.next());
    ArrayList rows=(ArrayList)values.next();
    out.writeObject(Integer.valueOf(rows.size()));
    for (int i=0; i < rows.size(); i++) {
      out.writeObject(rows.get(i));
    }
  }
}"
66688,"public Object[] getOutParameters(String stmtText,Object[] inParams,int[] types) throws SQLException {
  m_visits++;
  Object[] objTypes=toObject(types);
  String cKey=makeKey(stmtText,new String[0],new String[0],inParams,new String[0]);
  ArrayList outParamList=(ArrayList)m_rowsCacheIndex.get(cKey);
  if (outParamList == null && m_conn != null) {
    outParamList=new ArrayList();
    CallableStatement stmt=m_conn.prepareCall(stmtText);
    int i=1;
    for (; i < inParams.length + 1; i++) {
      if (inParams[i - 1] instanceof byte[]) {
        stmt.setBytes(i,(byte[])inParams[i - 1]);
      }
 else {
        throw new SQLException(""String_Node_Str"" + inParams[i - 1].getClass().getName());
      }
    }
    for (; i < (inParams.length + types.length + 1); i++) {
      stmt.registerOutParameter(i,types[i - inParams.length - 1]);
    }
    stmt.executeUpdate();
    for (i=inParams.length; i < inParams.length + types.length; i++) {
      int index=i - inParams.length;
      if (types[index] == OracleTypes.INTEGER) {
        outParamList.add(new Integer(stmt.getInt(i + 1)));
      }
 else       if (types[index] == OracleTypes.VARCHAR) {
        outParamList.add(stmt.getString(i + 1));
      }
    }
    stmt.close();
    m_rowsCacheIndex.put(cKey,outParamList);
    m_rowsCache.add(new RowsCacheEntry(stmtText,new String[0],new String[0],objTypes,outParamList));
  }
  Object[] outParams=null;
  if (outParamList != null) {
    outParams=outParamList.toArray(new Object[0]);
  }
  return outParams;
}","public Object[] getOutParameters(String stmtText,Object[] inParams,int[] types) throws SQLException {
  m_visits++;
  Object[] objTypes=toObject(types);
  String cKey=makeKey(stmtText,new String[0],new String[0],inParams,new String[0]);
  ArrayList outParamList=(ArrayList)m_rowsCacheIndex.get(cKey);
  if (outParamList == null && m_conn != null) {
    outParamList=new ArrayList();
    CallableStatement stmt=m_conn.prepareCall(stmtText);
    int i=1;
    for (; i < inParams.length + 1; i++) {
      if (inParams[i - 1] instanceof byte[]) {
        stmt.setBytes(i,(byte[])inParams[i - 1]);
      }
 else {
        throw new SQLException(""String_Node_Str"" + inParams[i - 1].getClass().getName());
      }
    }
    for (; i < (inParams.length + types.length + 1); i++) {
      stmt.registerOutParameter(i,types[i - inParams.length - 1]);
    }
    stmt.executeUpdate();
    for (i=inParams.length; i < inParams.length + types.length; i++) {
      int index=i - inParams.length;
      if (types[index] == OracleTypes.INTEGER) {
        outParamList.add(Integer.valueOf(stmt.getInt(i + 1)));
      }
 else       if (types[index] == OracleTypes.VARCHAR) {
        outParamList.add(stmt.getString(i + 1));
      }
    }
    stmt.close();
    m_rowsCacheIndex.put(cKey,outParamList);
    m_rowsCache.add(new RowsCacheEntry(stmtText,new String[0],new String[0],objTypes,outParamList));
  }
  Object[] outParams=null;
  if (outParamList != null) {
    outParams=outParamList.toArray(new Object[0]);
  }
  return outParams;
}"
66689,"private Object[] toObject(int[] types){
  Object[] obj=new Object[types.length];
  for (int i=0; i < types.length; i++) {
    obj[i]=new Integer(types[i]);
  }
  return obj;
}","private Object[] toObject(int[] types){
  Object[] obj=new Object[types.length];
  for (int i=0; i < types.length; i++) {
    obj[i]=Integer.valueOf(types[i]);
  }
  return obj;
}"
66690,"public void test(){
  UnitOfWork uow=getSession().acquireUnitOfWork();
  uow.addReadOnlyClass(Address.class);
  Address address=(Address)uow.readObject(Address.class);
  Employee employee=new Employee();
  employee=(Employee)uow.registerObject(employee);
  employee.setAddress(address);
  uow.commit();
}","public void test(){
  UnitOfWork uow=getSession().acquireUnitOfWork();
  Address address=(Address)uow.readObject(Address.class);
  Employee employee=new Employee();
  employee=(Employee)uow.registerObject(employee);
  employee.setAddress(address);
  uow.commit();
}"
66691,"/** 
 * Tests saving a new object with a reference to a read-only object.
 */
public TransactionalTestCase buildRefReadOnlyTest(){
  TransactionalTestCase test=new TransactionalTestCase(){
    public void test(){
      UnitOfWork uow=getSession().acquireUnitOfWork();
      uow.addReadOnlyClass(Address.class);
      Address address=(Address)uow.readObject(Address.class);
      Employee employee=new Employee();
      employee=(Employee)uow.registerObject(employee);
      employee.setAddress(address);
      uow.commit();
    }
  }
;
  test.setName(""String_Node_Str"");
  test.setDescription(""String_Node_Str"");
  return test;
}","/** 
 * Tests saving a new object with a reference to a read-only object.
 */
public TransactionalTestCase buildRefReadOnlyTest(){
  TransactionalTestCase test=new TransactionalTestCase(){
    public void setup(){
      super.setup();
      getSession().getDescriptor(Address.class).setReadOnly();
    }
    public void test(){
      UnitOfWork uow=getSession().acquireUnitOfWork();
      Address address=(Address)uow.readObject(Address.class);
      Employee employee=new Employee();
      employee=(Employee)uow.registerObject(employee);
      employee.setAddress(address);
      uow.commit();
    }
    public void reset(){
      super.reset();
      getSession().getDescriptor(Address.class).setShouldBeReadOnly(false);
    }
  }
;
  test.setName(""String_Node_Str"");
  test.setDescription(""String_Node_Str"");
  return test;
}"
66692,"/** 
 * INTERNAL: This method is used to determine if the clone is a new Object in the UnitOfWork
 */
public boolean isObjectNew(Object clone){
  return (isCloneNewObject(clone) || (!isObjectRegistered(clone) && !isClassReadOnly(clone.getClass(),null) && !isUnregisteredExistingObject(clone)));
}","/** 
 * INTERNAL: This method is used to determine if the clone is a new Object in the UnitOfWork
 */
public boolean isObjectNew(Object clone){
  return (isCloneNewObject(clone) || (!isObjectRegistered(clone) && !isClassReadOnly(clone.getClass()) && !isUnregisteredExistingObject(clone)));
}"
66693,"/** 
 * INTERNAL: Looks up mapping for attribute during preExecute of ReportQuery
 */
public void initialize(ReportQuery query) throws QueryException {
  int size=getReportItems().size();
  List mappings=new ArrayList();
  for (int index=0; index < size; index++) {
    ReportItem item=(ReportItem)reportItems.get(index);
    item.initialize(query);
    mappings.add(item.getMapping());
  }
  setConstructorMappings(mappings);
  int numberOfItems=getReportItems().size();
  if (getConstructorArgTypes() == null) {
    setConstructorArgTypes(new Class[numberOfItems]);
  }
  Class[] constructorArgTypes=getConstructorArgTypes();
  for (int index=0; index < numberOfItems; index++) {
    if (constructorArgTypes[index] == null) {
      ReportItem argumentItem=(ReportItem)getReportItems().get(index);
      if (mappings.get(index) != null) {
        DatabaseMapping mapping=(DatabaseMapping)constructorMappings.get(index);
        if (argumentItem.getAttributeExpression() != null && argumentItem.getAttributeExpression().isMapEntryExpression()) {
          if (((MapEntryExpression)argumentItem.getAttributeExpression()).shouldReturnMapEntry()) {
            constructorArgTypes[index]=Map.Entry.class;
          }
 else {
            constructorArgTypes[index]=(Class)((CollectionMapping)mapping).getContainerPolicy().getKeyType();
          }
        }
 else {
          constructorArgTypes[index]=mapping.getAttributeClassification();
        }
      }
 else       if (argumentItem.getResultType() != null) {
        constructorArgTypes[index]=argumentItem.getResultType();
      }
 else       if (argumentItem.getDescriptor() != null) {
        constructorArgTypes[index]=argumentItem.getDescriptor().getJavaClass();
      }
 else       if (argumentItem.getAttributeExpression() != null && argumentItem.getAttributeExpression().isConstantExpression()) {
        constructorArgTypes[index]=((ConstantExpression)argumentItem.getAttributeExpression()).getValue().getClass();
      }
 else {
        constructorArgTypes[index]=ClassConstants.OBJECT;
      }
    }
  }
  try {
    Constructor constructor=null;
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        constructor=(Constructor)AccessController.doPrivileged(new PrivilegedGetConstructorFor(getResultType(),constructorArgTypes,true));
      }
 catch (      PrivilegedActionException exception) {
        throw QueryException.exceptionWhileUsingConstructorExpression(exception.getException(),query);
      }
    }
 else {
      constructor=PrivilegedAccessHelper.getConstructorFor(getResultType(),constructorArgTypes,true);
    }
    setConstructor(constructor);
  }
 catch (  NoSuchMethodException exception) {
    throw QueryException.exceptionWhileUsingConstructorExpression(exception,query);
  }
}","/** 
 * INTERNAL: Looks up mapping for attribute during preExecute of ReportQuery
 */
public void initialize(ReportQuery query) throws QueryException {
  int size=getReportItems().size();
  List mappings=new ArrayList();
  for (int index=0; index < size; index++) {
    ReportItem item=(ReportItem)reportItems.get(index);
    item.initialize(query);
    mappings.add(item.getMapping());
  }
  setConstructorMappings(mappings);
  int numberOfItems=getReportItems().size();
  if (getConstructorArgTypes() == null) {
    setConstructorArgTypes(new Class[numberOfItems]);
  }
  Class[] constructorArgTypes=getConstructorArgTypes();
  for (int index=0; index < numberOfItems; index++) {
    if (constructorArgTypes[index] == null) {
      ReportItem argumentItem=(ReportItem)getReportItems().get(index);
      if (mappings.get(index) != null) {
        DatabaseMapping mapping=(DatabaseMapping)constructorMappings.get(index);
        if (argumentItem.getAttributeExpression() != null && argumentItem.getAttributeExpression().isMapEntryExpression()) {
          if (((MapEntryExpression)argumentItem.getAttributeExpression()).shouldReturnMapEntry()) {
            constructorArgTypes[index]=Map.Entry.class;
          }
 else {
            constructorArgTypes[index]=(Class)((CollectionMapping)mapping).getContainerPolicy().getKeyType();
          }
        }
 else {
          constructorArgTypes[index]=mapping.getAttributeClassification();
        }
      }
 else       if (argumentItem.getResultType() != null) {
        constructorArgTypes[index]=argumentItem.getResultType();
      }
 else       if (argumentItem.getDescriptor() != null) {
        constructorArgTypes[index]=argumentItem.getDescriptor().getJavaClass();
      }
 else       if (argumentItem.getAttributeExpression() != null && argumentItem.getAttributeExpression().isConstantExpression()) {
        constructorArgTypes[index]=((ConstantExpression)argumentItem.getAttributeExpression()).getValue().getClass();
      }
 else {
        constructorArgTypes[index]=ClassConstants.OBJECT;
      }
    }
  }
  if (getConstructor() == null) {
    try {
      Constructor constructor=null;
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          constructor=(Constructor)AccessController.doPrivileged(new PrivilegedGetConstructorFor(getResultType(),constructorArgTypes,true));
        }
 catch (        PrivilegedActionException exception) {
          throw QueryException.exceptionWhileUsingConstructorExpression(exception.getException(),query);
        }
      }
 else {
        constructor=PrivilegedAccessHelper.getConstructorFor(getResultType(),constructorArgTypes,true);
      }
      setConstructor(constructor);
    }
 catch (    NoSuchMethodException exception) {
      throw QueryException.exceptionWhileUsingConstructorExpression(exception,query);
    }
  }
}"
66694,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitCriteriaUnitTestSuite(""String_Node_Str""));
  return suite;
}"
66695,"public ConstructorReportItem translate(){
  ConstructorReportItem item=new ConstructorReportItem(this.getAlias());
  item.setResultType(this.getJavaType());
  for (  Selection selection : this.getCompoundSelectionItems()) {
    if (((SelectionImpl)selection).isCompoundSelection()) {
      item.addItem(((ConstructorSelectionImpl)selection).translate());
    }
 else {
      item.addAttribute(((SelectionImpl)selection).getCurrentNode());
    }
  }
  return item;
}","public ConstructorReportItem translate(){
  ConstructorReportItem item=new ConstructorReportItem(this.getAlias());
  item.setResultType(this.getJavaType());
  item.setConstructor(constructor);
  for (  Selection selection : this.getCompoundSelectionItems()) {
    if (((SelectionImpl)selection).isCompoundSelection()) {
      item.addItem(((ConstructorSelectionImpl)selection).translate());
    }
 else {
      ReportItem reportItem=new ReportItem(item.getName() + item.getReportItems().size(),((SelectionImpl)selection).getCurrentNode());
      reportItem.setResultType(selection.getJavaType());
      item.addItem(reportItem);
    }
  }
  return item;
}"
66696,"/** 
 * Specify the item that is to be returned in the query result. Replaces the previously specified selection, if any.
 * @param selection selection specifying the item that is to be returned in the query result
 * @return the modified query
 */
public CriteriaQuery<T> select(Selection<? extends T> selection){
  findRootAndParameters(selection);
  this.selection=(SelectionImpl)selection;
  if (selection.isCompoundSelection()) {
    for (    Selection select : selection.getCompoundSelectionItems()) {
      if (((InternalSelection)select).isFrom()) {
        ((FromImpl)select).isLeaf=false;
      }
    }
    if (selection.getJavaType().equals(Tuple.class)) {
      this.queryResult=ResultType.TUPLE;
      this.queryType=Tuple.class;
    }
 else     if (((InternalSelection)selection).isConstructor()) {
      if (!findConstructor(this.selection.getJavaType(),selection.getCompoundSelectionItems().toArray(new Selection[selection.getCompoundSelectionItems().size()]))) {
        Object[] selections=new Object[selection.getCompoundSelectionItems().size()];
        Object[] params=new Object[2];
        params[0]=this.queryType;
        int count=0;
        for (        Selection select : selection.getCompoundSelectionItems()) {
          selections[++count]=select.getJavaType();
        }
        params[1]=params;
        throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str"",params));
      }
      this.queryResult=ResultType.CONSTRUCTOR;
      this.queryType=selection.getJavaType();
    }
 else {
      this.queryResult=ResultType.OBJECT_ARRAY;
      this.queryType=ClassConstants.AOBJECT;
    }
  }
 else {
    this.queryType=selection.getJavaType();
    TypeImpl type=((MetamodelImpl)this.metamodel).getType(this.queryType);
    if (type != null && type.getPersistenceType().equals(PersistenceType.ENTITY)) {
      this.queryResult=ResultType.ENTITY;
      ((FromImpl)selection).isLeaf=false;
    }
 else {
      this.queryResult=ResultType.OTHER;
    }
  }
  return this;
}","/** 
 * Specify the item that is to be returned in the query result. Replaces the previously specified selection, if any.
 * @param selection selection specifying the item that is to be returned in the query result
 * @return the modified query
 */
public CriteriaQuery<T> select(Selection<? extends T> selection){
  findRootAndParameters(selection);
  this.selection=(SelectionImpl)selection;
  if (selection.isCompoundSelection()) {
    for (    Selection select : selection.getCompoundSelectionItems()) {
      if (((InternalSelection)select).isFrom()) {
        ((FromImpl)select).isLeaf=false;
      }
    }
    if (selection.getJavaType().equals(Tuple.class)) {
      this.queryResult=ResultType.TUPLE;
      this.queryType=Tuple.class;
    }
 else     if (((InternalSelection)selection).isConstructor()) {
      Selection[] selectArray=selection.getCompoundSelectionItems().toArray(new Selection[selection.getCompoundSelectionItems().size()]);
      populateAndSetConstructorSelection((ConstructorSelectionImpl)selection,this.selection.getJavaType(),selectArray);
      this.queryType=selection.getJavaType();
    }
 else {
      this.queryResult=ResultType.OBJECT_ARRAY;
      this.queryType=ClassConstants.AOBJECT;
    }
  }
 else {
    this.queryType=selection.getJavaType();
    TypeImpl type=((MetamodelImpl)this.metamodel).getType(this.queryType);
    if (type != null && type.getPersistenceType().equals(PersistenceType.ENTITY)) {
      this.queryResult=ResultType.ENTITY;
      ((FromImpl)selection).isLeaf=false;
    }
 else {
      this.queryResult=ResultType.OTHER;
    }
  }
  return this;
}"
66697,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (objectValue == null) {
    return false;
  }
  boolean addDeclaration=false;
  boolean removePrefix=false;
  String xopPrefix=null;
  if (namespaceResolver != null) {
    xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
  }
  if (xopPrefix == null) {
    addDeclaration=true;
    xopPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(XMLConstants.XOP_URL);
    if (xopPrefix == null) {
      removePrefix=true;
      xopPrefix=XMLConstants.XOP_PREFIX;
      marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
    }
    namespaceResolver=marshalRecord.getNamespaceResolver();
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
    Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  marshalRecord.openStartElement(xPathFragment,namespaceResolver);
  marshalRecord.closeStartElement();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && marshaller.getAttachmentMarshaller() != null) {
    String c_id=null;
    byte[] bytes=null;
    if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),bytes,session);
      marshalRecord.characters(value);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((XMLField)xmlBinaryDataCollectionMapping.getField()).getLastXPathFragment();
      String c_id=XMLConstants.EMPTY_STRING;
      byte[] bytes=null;
      if (objectValue.getClass() == ClassConstants.APBYTE) {
        bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataCollectionMapping.getMimeType(object),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else       if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
        if (c_id == null) {
          bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object)).getData();
        }
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      if (c_id == null) {
        String value=getValueToWrite(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),bytes,session);
        marshalRecord.characters(value);
      }
 else {
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xPathFragment,namespaceResolver);
      }
    }
 else {
      String value=XMLConstants.EMPTY_STRING;
      if (objectValue.getClass() == ClassConstants.ABYTE || objectValue.getClass() == ClassConstants.APBYTE) {
        value=getValueToWrite(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        byte[] bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  if (removePrefix) {
    marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (objectValue == null) {
    return false;
  }
  boolean addDeclaration=false;
  boolean removePrefix=false;
  String xopPrefix=null;
  if (namespaceResolver != null) {
    xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
  }
  if (xopPrefix == null) {
    addDeclaration=true;
    xopPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(XMLConstants.XOP_URL);
    if (xopPrefix == null) {
      removePrefix=true;
      xopPrefix=XMLConstants.XOP_PREFIX;
      marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
    }
    namespaceResolver=marshalRecord.getNamespaceResolver();
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
    Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  marshalRecord.openStartElement(xPathFragment,namespaceResolver);
  marshalRecord.closeStartElement();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && marshaller.getAttachmentMarshaller() != null) {
    String c_id=null;
    byte[] bytes=null;
    if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),bytes,session);
      marshalRecord.characters(value);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((XMLField)xmlBinaryDataCollectionMapping.getField()).getLastXPathFragment();
      String c_id=XMLConstants.EMPTY_STRING;
      byte[] bytes=null;
      if (objectValue.getClass() == ClassConstants.APBYTE) {
        bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataCollectionMapping.getMimeType(object),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else       if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
        if (c_id == null) {
          bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object)).getData();
        }
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      if (c_id == null) {
        String value=getValueToWrite(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),bytes,session);
        marshalRecord.characters(value);
      }
 else {
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xPathFragment,namespaceResolver);
      }
    }
 else {
      String value=XMLConstants.EMPTY_STRING;
      if (objectValue.getClass() == ClassConstants.ABYTE || objectValue.getClass() == ClassConstants.APBYTE) {
        value=getValueToWrite(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        byte[] bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  if (removePrefix) {
    marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
  }
  return true;
}"
66698,"/** 
 * Set a property's value.
 * @param lastProperty      the property to queries.
 * @param lastDataObject    the DataObject, owner of the queried property
 * @param numInLastProperty the index number in the value list of the above property
 * @param value             the value to be set as the target property's value
 * @param convertValue     boolean used for set if we should convert the value 
 */
private void set(Property lastProperty,DataObject lastDataObject,int numInLastProperty,Object value,boolean convertValue){
  if (numInLastProperty == -1) {
    if (lastDataObject != null) {
      if (convertValue) {
        value=DataHelper.INSTANCE.convert(lastProperty,value);
      }
      lastDataObject.set(lastProperty,value);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    List objects=lastDataObject.getList(lastProperty);
    if (convertValue) {
      value=DataHelper.INSTANCE.convert(lastProperty.getType(),value);
    }
    Sequence seq=lastDataObject.getSequence();
    if (seq != null) {
      seq.setValue(numInLastProperty,value);
    }
 else {
      objects.set(numInLastProperty,value);
    }
  }
}","/** 
 * Set a property's value.
 * @param lastProperty      the property to queries.
 * @param lastDataObject    the DataObject, owner of the queried property
 * @param numInLastProperty the index number in the value list of the above property
 * @param value             the value to be set as the target property's value
 * @param convertValue     boolean used for set if we should convert the value 
 */
private void set(Property lastProperty,DataObject lastDataObject,int numInLastProperty,Object value,boolean convertValue){
  if (numInLastProperty == -1) {
    if (lastDataObject != null) {
      if (convertValue) {
        DataHelper dataHelper=((SDODataObject)lastDataObject).getType().getHelperContext().getDataHelper();
        value=dataHelper.convert(lastProperty,value);
      }
      lastDataObject.set(lastProperty,value);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    List objects=lastDataObject.getList(lastProperty);
    if (convertValue) {
      DataHelper dataHelper=((SDODataObject)lastDataObject).getType().getHelperContext().getDataHelper();
      value=dataHelper.convert(lastProperty.getType(),value);
    }
    Sequence seq=lastDataObject.getSequence();
    if (seq != null) {
      seq.setValue(numInLastProperty,value);
    }
 else {
      objects.set(numInLastProperty,value);
    }
  }
}"
66699,"public void setTypeMappingInfos(TypeMappingInfo[] newTypes) throws Exception {
  typeMappingInfos=newTypes;
  jaxbContext=new org.eclipse.persistence.jaxb.JAXBContextFactory().createContext(newTypes,null,Thread.currentThread().getContextClassLoader());
  jaxbMarshaller=jaxbContext.createMarshaller();
  jaxbUnmarshaller=jaxbContext.createUnmarshaller();
}","public void setTypeMappingInfos(TypeMappingInfo[] newTypes) throws Exception {
  typeMappingInfos=newTypes;
  jaxbContext=new org.eclipse.persistence.jaxb.JAXBContextFactory().createContext(newTypes,getProperties(),Thread.currentThread().getContextClassLoader());
  jaxbMarshaller=jaxbContext.createMarshaller();
  jaxbUnmarshaller=jaxbContext.createUnmarshaller();
}"
66700,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DatahandlerWithAnnotationsTestCases.class);
  suite.addTestSuite(DatahandlerWithXMLTestCases.class);
  suite.addTestSuite(DuplicateListOfStringsTestCases.class);
  suite.addTestSuite(DuplicateListOfStringsTestCasesWithXML.class);
  suite.addTestSuite(MapStringIntegerTestCases.class);
  suite.addTestSuite(ConflictingQNamesTestCases.class);
  suite.addTestSuite(MultipleMapTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DatahandlerWithAnnotationsTestCases.class);
  suite.addTestSuite(DatahandlerWithXMLTestCases.class);
  suite.addTestSuite(DuplicateListOfStringsTestCases.class);
  suite.addTestSuite(DuplicateListOfStringsTestCasesWithXML.class);
  suite.addTestSuite(MapStringIntegerTestCases.class);
  suite.addTestSuite(ConflictingQNamesTestCases.class);
  suite.addTestSuite(MultipleMapTestCases.class);
  suite.addTestSuite(MultipleMapWithBindingsTestCases.class);
  return suite;
}"
66701,"/** 
 * Convenience method for building a Map of package to classes.
 * @return
 */
private Map<String,ArrayList<JavaClass>> buildPackageToJavaClassMap(){
  Map<String,ArrayList<JavaClass>> theMap=new HashMap<String,ArrayList<JavaClass>>();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    xmlBindings=xmlBindingMap.get(packageName);
    ArrayList classes=new ArrayList<JavaClass>();
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        classes.add(jModelInput.getJavaModel().getClass(javaType.getName()));
      }
    }
    theMap.put(packageName,classes);
  }
  for (  JavaClass jClass : jModelInput.getJavaClasses()) {
    String pkg=jClass.getPackageName();
    ArrayList<JavaClass> existingClasses=theMap.get(pkg);
    if (existingClasses != null) {
      if (!classExistsInArray(jClass,existingClasses)) {
        existingClasses.add(jClass);
      }
    }
 else {
      ArrayList classes=new ArrayList<JavaClass>();
      classes.add(jClass);
      theMap.put(pkg,classes);
    }
  }
  return theMap;
}","/** 
 * Convenience method for building a Map of package to classes.
 * @return
 */
private Map<String,ArrayList<JavaClass>> buildPackageToJavaClassMap(){
  Map<String,ArrayList<JavaClass>> theMap=new HashMap<String,ArrayList<JavaClass>>();
  Map<String,ArrayList<JavaClass>> xmlBindingsMap=new HashMap<String,ArrayList<JavaClass>>();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    xmlBindings=xmlBindingMap.get(packageName);
    ArrayList classes=new ArrayList<JavaClass>();
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        classes.add(jModelInput.getJavaModel().getClass(javaType.getName()));
      }
    }
    theMap.put(packageName,classes);
    xmlBindingsMap.put(packageName,new ArrayList(classes));
  }
  for (  JavaClass jClass : jModelInput.getJavaClasses()) {
    String pkg=jClass.getPackageName();
    ArrayList<JavaClass> existingXmlBindingsClasses=xmlBindingsMap.get(pkg);
    ArrayList<JavaClass> allExistingClasses=theMap.get(pkg);
    if (existingXmlBindingsClasses != null) {
      if (!classExistsInArray(jClass,existingXmlBindingsClasses)) {
        allExistingClasses.add(jClass);
      }
    }
 else {
      if (allExistingClasses != null) {
        allExistingClasses.add(jClass);
      }
 else {
        ArrayList classes=new ArrayList<JavaClass>();
        classes.add(jClass);
        theMap.put(pkg,classes);
      }
    }
  }
  return theMap;
}"
66702,"public void setXPath(String xpathString){
  xpath=xpathString;
  shortName=xpathString;
  if (xpathString.length() > 0) {
    if ((xpath.indexOf('[') != -1) && (xpath.indexOf(']') == -1)) {
      setShouldExecuteSelectNodes(true);
      return;
    }
    if (xpath.indexOf(""String_Node_Str"") != -1) {
      setShouldExecuteSelectNodes(true);
      return;
    }
    if (xpathString.charAt(0) == '@') {
      hasAttribute=true;
      shortName=xpathString.substring(1);
      indexValue=hasIndex(xpathString);
      setupNamespaceInformation(shortName);
      return;
    }
    if (xpathString.charAt(0) == '/') {
      setShouldExecuteSelectNodes(true);
      shortName=xpathString;
      indexValue=hasIndex(xpathString);
      setupNamespaceInformation(shortName);
      return;
    }
  }
  if (xpathString.equals(XMLConstants.TEXT)) {
    nameIsText=true;
    shortName=xpathString;
    return;
  }
 else {
    nameIsText=false;
  }
  if (xpathString.equals(SELF_XPATH)) {
    isSelfFragment=true;
    shortName=xpathString;
    return;
  }
  indexValue=hasIndex(xpathString);
  setupNamespaceInformation(shortName);
  try {
    shortNameBytes=shortName.getBytes(XMLConstants.DEFAULT_XML_ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
  }
}","public void setXPath(String xpathString){
  xpath=xpathString;
  shortName=xpathString;
  if (xpathString.length() > 0) {
    if ((xpath.indexOf('[') != -1) && (xpath.indexOf(']') == -1)) {
      setShouldExecuteSelectNodes(true);
      return;
    }
    if (xpath.indexOf(""String_Node_Str"") != -1) {
      setShouldExecuteSelectNodes(true);
      return;
    }
    if (xpathString.charAt(0) == '@') {
      hasAttribute=true;
      shortName=xpathString.substring(1);
      indexValue=hasIndex(xpathString);
      setupNamespaceInformation(shortName);
      return;
    }
    if (xpathString.charAt(0) == '/') {
      setShouldExecuteSelectNodes(true);
      shortName=xpathString.substring(xpathString.lastIndexOf('/') + 1);
      indexValue=hasIndex(xpathString);
      setupNamespaceInformation(shortName);
      return;
    }
  }
  if (xpathString.equals(XMLConstants.TEXT)) {
    nameIsText=true;
    shortName=xpathString;
    return;
  }
 else {
    nameIsText=false;
  }
  if (xpathString.equals(SELF_XPATH)) {
    isSelfFragment=true;
    shortName=xpathString;
    return;
  }
  indexValue=hasIndex(xpathString);
  setupNamespaceInformation(shortName);
  try {
    shortNameBytes=shortName.getBytes(XMLConstants.DEFAULT_XML_ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
  }
}"
66703,"/** 
 * INTERNAL:
 */
@Override public void process(AbstractSession session,ClassLoader loader){
  Map<String,Object> hints=processQueryHints(session);
  if (m_resultClass.isVoid()) {
    if (hasResultSetMapping()) {
      session.addQuery(getName(),EJBQueryImpl.buildSQLDatabaseQuery(m_resultSetMapping,getQuery(),hints,loader,session));
    }
 else {
      session.addQuery(getName(),EJBQueryImpl.buildSQLDatabaseQuery(getQuery(),hints,loader,session));
    }
  }
 else {
    session.addQuery(getName(),EJBQueryImpl.buildSQLDatabaseQuery(MetadataHelper.getClassForName(m_resultClass.getName(),loader),getQuery(),hints,loader,session));
  }
}","/** 
 * INTERNAL:
 */
@Override public void process(AbstractSession session,ClassLoader loader){
  Map<String,Object> hints=processQueryHints(session);
  if (m_resultClass.isVoid()) {
    if (hasResultSetMapping(session)) {
      session.addQuery(getName(),EJBQueryImpl.buildSQLDatabaseQuery(m_resultSetMapping,getQuery(),hints,loader,session));
    }
 else {
      session.addQuery(getName(),EJBQueryImpl.buildSQLDatabaseQuery(getQuery(),hints,loader,session));
    }
  }
 else {
    session.addQuery(getName(),EJBQueryImpl.buildSQLDatabaseQuery(MetadataHelper.getClassForName(m_resultClass.getName(),loader),getQuery(),hints,loader,session));
  }
}"
66704,"/** 
 * INTERNAL: Return true is a result set mapping has been specified.
 */
protected boolean hasResultSetMapping(){
  return m_resultSetMapping != null && !m_resultSetMapping.equals(""String_Node_Str"");
}","/** 
 * INTERNAL: Return true is a result set mapping has been specified.
 */
protected boolean hasResultSetMapping(AbstractSession session){
  if (m_resultSetMapping != null && !m_resultSetMapping.equals(""String_Node_Str"")) {
    if (session.getProject().hasSQLResultSetMapping(m_resultSetMapping)) {
      return true;
    }
 else {
      throw ValidationException.invalidSQLResultSetMapping(m_resultSetMapping,getName(),getLocation());
    }
  }
  return false;
}"
66705,"/** 
 * INTERNAL:
 */
@Override public void process(AbstractSession session,ClassLoader loader){
  StoredProcedureCall call=new StoredProcedureCall();
  List<String> queryArguments=new ArrayList<String>();
  for (  StoredProcedureParameterMetadata parameter : m_parameters) {
    queryArguments.addAll(parameter.process(call));
  }
  call.setProcedureName(m_procedureName);
  call.setReturnsResultSet((m_returnsResultSet == null) ? false : m_returnsResultSet);
  Map<String,Object> hints=processQueryHints(session);
  if (getResultClass().isVoid()) {
    if (getResultSetMapping().equals(""String_Node_Str"")) {
      session.addQuery(getName(),EJBQueryImpl.buildStoredProcedureQuery(call,queryArguments,hints,loader,session));
    }
 else {
      session.addQuery(getName(),EJBQueryImpl.buildStoredProcedureQuery(getResultSetMapping(),call,queryArguments,hints,loader,session));
    }
  }
 else {
    session.addQuery(getName(),EJBQueryImpl.buildStoredProcedureQuery(MetadataHelper.getClassForName(getResultClass().getName(),loader),call,queryArguments,hints,loader,session));
  }
}","/** 
 * INTERNAL:
 */
@Override public void process(AbstractSession session,ClassLoader loader){
  StoredProcedureCall call=new StoredProcedureCall();
  List<String> queryArguments=new ArrayList<String>();
  for (  StoredProcedureParameterMetadata parameter : m_parameters) {
    queryArguments.addAll(parameter.process(call));
  }
  call.setProcedureName(m_procedureName);
  call.setReturnsResultSet((m_returnsResultSet == null) ? false : m_returnsResultSet);
  Map<String,Object> hints=processQueryHints(session);
  if (getResultClass().isVoid()) {
    if (hasResultSetMapping(session)) {
      session.addQuery(getName(),EJBQueryImpl.buildStoredProcedureQuery(getResultSetMapping(),call,queryArguments,hints,loader,session));
    }
 else {
      session.addQuery(getName(),EJBQueryImpl.buildStoredProcedureQuery(call,queryArguments,hints,loader,session));
    }
  }
 else {
    session.addQuery(getName(),EJBQueryImpl.buildStoredProcedureQuery(MetadataHelper.getClassForName(getResultClass().getName(),loader),call,queryArguments,hints,loader,session));
  }
}"
66706,"/** 
 * INTERNAL:
 */
public StoredProcedureParameterMetadata(MetadataAnnotation storedProcedureParameter,MetadataAccessibleObject accessibleObject){
  super(storedProcedureParameter,accessibleObject);
  m_direction=(String)storedProcedureParameter.getAttribute(""String_Node_Str"");
  m_name=(String)storedProcedureParameter.getAttribute(""String_Node_Str"");
  m_queryParameter=(String)storedProcedureParameter.getAttribute(""String_Node_Str"");
  m_type=getMetadataClass((String)storedProcedureParameter.getAttribute(""String_Node_Str""));
  m_jdbcType=(Integer)storedProcedureParameter.getAttribute(""String_Node_Str"");
  m_jdbcTypeName=(String)storedProcedureParameter.getAttribute(""String_Node_Str"");
}","/** 
 * INTERNAL:
 */
public StoredProcedureParameterMetadata(MetadataAnnotation storedProcedureParameter,MetadataAccessibleObject accessibleObject){
  super(storedProcedureParameter,accessibleObject);
  m_direction=(String)storedProcedureParameter.getAttribute(""String_Node_Str"");
  m_name=(String)storedProcedureParameter.getAttribute(""String_Node_Str"");
  m_queryParameter=(String)storedProcedureParameter.getAttribute(""String_Node_Str"");
  m_type=getMetadataClass((String)storedProcedureParameter.getAttributeClass(""String_Node_Str""));
  m_jdbcType=(Integer)storedProcedureParameter.getAttribute(""String_Node_Str"");
  m_jdbcTypeName=(String)storedProcedureParameter.getAttribute(""String_Node_Str"");
}"
66707,"/** 
 * INTERNAL: return if an xsi:type attribute should be added for the given XMLRootObject
 */
public boolean shouldWriteTypeAttribute(Object object,XMLDescriptor descriptor,boolean isXMLRoot){
  if (isXMLRoot) {
    boolean writeTypeAttribute=false;
    if (descriptor == null) {
      XMLRoot root=(XMLRoot)object;
      if (root.declaredType != null && root.getObject() != null && root.declaredType != root.getObject().getClass()) {
        return true;
      }
    }
 else {
      XMLRoot xr=(XMLRoot)object;
      if (descriptor.hasInheritance()) {
        XMLField classIndicatorField=(XMLField)descriptor.getInheritancePolicy().getClassIndicatorField();
        String classIndicatorUri=null;
        String classIndicatorLocalName=classIndicatorField.getXPathFragment().getLocalName();
        String classIndicatorPrefix=classIndicatorField.getXPathFragment().getPrefix();
        if (classIndicatorPrefix != null) {
          classIndicatorUri=descriptor.getNamespaceResolver().resolveNamespacePrefix(classIndicatorPrefix);
        }
        if ((classIndicatorLocalName != null) && classIndicatorLocalName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && (classIndicatorUri != null)&& classIndicatorUri.equals(XMLConstants.SCHEMA_INSTANCE_URL)) {
          return false;
        }
      }
      QName qName=new QName(xr.getNamespaceURI(),xr.getLocalName());
      XMLDescriptor xdesc=xmlContext.getDescriptor(qName);
      if (xdesc != null) {
        return xdesc.getJavaClass() != descriptor.getJavaClass();
      }
      if (descriptor.getSchemaReference() == null) {
        return false;
      }
      String xmlRootLocalName=xr.getLocalName();
      String xmlRootUri=xr.getNamespaceURI();
      writeTypeAttribute=true;
      for (int i=0; i < descriptor.getTableNames().size(); i++) {
        if (!writeTypeAttribute) {
          break;
        }
        String defaultRootQualifiedName=(String)descriptor.getTableNames().get(i);
        if (defaultRootQualifiedName != null) {
          String defaultRootLocalName=null;
          String defaultRootUri=null;
          int colonIndex=defaultRootQualifiedName.indexOf(XMLConstants.COLON);
          if (colonIndex > 0) {
            String defaultRootPrefix=defaultRootQualifiedName.substring(0,colonIndex);
            defaultRootLocalName=defaultRootQualifiedName.substring(colonIndex + 1);
            if (descriptor.getNamespaceResolver() != null) {
              defaultRootUri=descriptor.getNamespaceResolver().resolveNamespacePrefix(defaultRootPrefix);
            }
          }
 else {
            defaultRootLocalName=defaultRootQualifiedName;
          }
          if (xmlRootLocalName != null) {
            if ((((defaultRootLocalName == null) && (xmlRootLocalName == null)) || (defaultRootLocalName.equals(xmlRootLocalName))) && (((defaultRootUri == null) && (xmlRootUri == null)) || ((xmlRootUri != null) && (defaultRootUri != null) && (defaultRootUri.equals(xmlRootUri))))) {
              writeTypeAttribute=false;
            }
          }
        }
 else {
          if (xmlRootLocalName == null) {
            writeTypeAttribute=false;
          }
        }
      }
    }
    return writeTypeAttribute;
  }
  return false;
}","/** 
 * INTERNAL: return if an xsi:type attribute should be added for the given XMLRootObject
 */
public boolean shouldWriteTypeAttribute(Object object,XMLDescriptor descriptor,boolean isXMLRoot){
  if (isXMLRoot) {
    boolean writeTypeAttribute=false;
    if (descriptor == null) {
      XMLRoot root=(XMLRoot)object;
      if (root.declaredType != null && root.getObject() != null && root.declaredType != root.getObject().getClass()) {
        return true;
      }
    }
 else {
      XMLRoot xr=(XMLRoot)object;
      if (descriptor.hasInheritance()) {
        XMLField classIndicatorField=(XMLField)descriptor.getInheritancePolicy().getClassIndicatorField();
        String classIndicatorUri=null;
        String classIndicatorLocalName=classIndicatorField.getXPathFragment().getLocalName();
        String classIndicatorPrefix=classIndicatorField.getXPathFragment().getPrefix();
        if (classIndicatorPrefix != null) {
          classIndicatorUri=descriptor.getNamespaceResolver().resolveNamespacePrefix(classIndicatorPrefix);
        }
        if ((classIndicatorLocalName != null) && classIndicatorLocalName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && (classIndicatorUri != null)&& classIndicatorUri.equals(XMLConstants.SCHEMA_INSTANCE_URL)) {
          return false;
        }
      }
      if (descriptor.getSchemaReference() == null) {
        return false;
      }
      QName qName=new QName(xr.getNamespaceURI(),xr.getLocalName());
      XMLDescriptor xdesc=xmlContext.getDescriptor(qName);
      if (xdesc != null) {
        return xdesc.getJavaClass() != descriptor.getJavaClass();
      }
      String xmlRootLocalName=xr.getLocalName();
      String xmlRootUri=xr.getNamespaceURI();
      writeTypeAttribute=true;
      for (int i=0; i < descriptor.getTableNames().size(); i++) {
        if (!writeTypeAttribute) {
          break;
        }
        String defaultRootQualifiedName=(String)descriptor.getTableNames().get(i);
        if (defaultRootQualifiedName != null) {
          String defaultRootLocalName=null;
          String defaultRootUri=null;
          int colonIndex=defaultRootQualifiedName.indexOf(XMLConstants.COLON);
          if (colonIndex > 0) {
            String defaultRootPrefix=defaultRootQualifiedName.substring(0,colonIndex);
            defaultRootLocalName=defaultRootQualifiedName.substring(colonIndex + 1);
            if (descriptor.getNamespaceResolver() != null) {
              defaultRootUri=descriptor.getNamespaceResolver().resolveNamespacePrefix(defaultRootPrefix);
            }
          }
 else {
            defaultRootLocalName=defaultRootQualifiedName;
          }
          if (xmlRootLocalName != null) {
            if ((((defaultRootLocalName == null) && (xmlRootLocalName == null)) || (defaultRootLocalName.equals(xmlRootLocalName))) && (((defaultRootUri == null) && (xmlRootUri == null)) || ((xmlRootUri != null) && (defaultRootUri != null) && (defaultRootUri.equals(xmlRootUri))))) {
              writeTypeAttribute=false;
            }
          }
        }
 else {
          if (xmlRootLocalName == null) {
            writeTypeAttribute=false;
          }
        }
      }
    }
    return writeTypeAttribute;
  }
  return false;
}"
66708,"protected TypeMappingInfo[] getTypeMappingInfos() throws Exception {
  if (typeMappingInfos == null) {
    typeMappingInfos=new TypeMappingInfo[1];
    TypeMappingInfo tpi=new TypeMappingInfo();
    tpi.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
    tpi.setElementScope(ElementScope.Global);
    tpi.setXmlElement(getXmlElement(""String_Node_Str""));
    tpi.setType(DataHandler.class);
    typeMappingInfos[0]=tpi;
  }
  return typeMappingInfos;
}","protected TypeMappingInfo[] getTypeMappingInfos() throws Exception {
  if (typeMappingInfos == null) {
    typeMappingInfos=new TypeMappingInfo[1];
    TypeMappingInfo tpi=new TypeMappingInfo();
    tpi.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
    tpi.setElementScope(ElementScope.Global);
    Annotation[] annotations=new Annotation[2];
    annotations[0]=getClass().getField(""String_Node_Str"").getAnnotations()[0];
    annotations[1]=getClass().getField(""String_Node_Str"").getAnnotations()[0];
    tpi.setAnnotations(annotations);
    tpi.setXmlElement(getXmlElement(""String_Node_Str""));
    tpi.setType(DataHandler.class);
    typeMappingInfos[0]=tpi;
  }
  return typeMappingInfos;
}"
66709,"protected TypeMappingInfo[] getTypeMappingInfos() throws Exception {
  if (typeMappingInfos == null) {
    typeMappingInfos=new TypeMappingInfo[4];
    TypeMappingInfo tpi=new TypeMappingInfo();
    tpi.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
    tpi.setElementScope(ElementScope.Global);
    tpi.setXmlElement(getXmlElement(""String_Node_Str""));
    tpi.setType(List.class);
    typeMappingInfos[0]=tpi;
    TypeMappingInfo tpi2=new TypeMappingInfo();
    tpi2.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
    tpi2.setElementScope(ElementScope.Global);
    tpi2.setType(List.class);
    typeMappingInfos[1]=tpi2;
    TypeMappingInfo tpi3=new TypeMappingInfo();
    tpi3.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
    tpi3.setElementScope(ElementScope.Global);
    tpi3.setType(getClass().getField(""String_Node_Str"").getGenericType());
    typeMappingInfos[2]=tpi3;
    TypeMappingInfo tpi4=new TypeMappingInfo();
    tpi4.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
    tpi4.setElementScope(ElementScope.Global);
    tpi4.setType(List.class);
    typeMappingInfos[3]=tpi4;
  }
  return typeMappingInfos;
}","protected TypeMappingInfo[] getTypeMappingInfos() throws Exception {
  if (typeMappingInfos == null) {
    typeMappingInfos=new TypeMappingInfo[4];
    TypeMappingInfo tpi=new TypeMappingInfo();
    tpi.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
    tpi.setElementScope(ElementScope.Global);
    Annotation[] annotations=new Annotation[1];
    annotations[0]=getClass().getField(""String_Node_Str"").getAnnotations()[0];
    tpi.setAnnotations(annotations);
    tpi.setXmlElement(getXmlElement(""String_Node_Str""));
    tpi.setType(List.class);
    typeMappingInfos[0]=tpi;
    TypeMappingInfo tpi2=new TypeMappingInfo();
    tpi2.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
    tpi2.setElementScope(ElementScope.Global);
    tpi2.setType(List.class);
    typeMappingInfos[1]=tpi2;
    TypeMappingInfo tpi3=new TypeMappingInfo();
    tpi3.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
    tpi3.setElementScope(ElementScope.Global);
    tpi3.setType(getClass().getField(""String_Node_Str"").getGenericType());
    typeMappingInfos[2]=tpi3;
    TypeMappingInfo tpi4=new TypeMappingInfo();
    tpi4.setXmlTagName(new QName(""String_Node_Str"",""String_Node_Str""));
    tpi4.setElementScope(ElementScope.Global);
    tpi4.setType(List.class);
    typeMappingInfos[3]=tpi4;
  }
  return typeMappingInfos;
}"
66710,"public void init() throws Exception {
  setControlDocument(XML_RESOURCE);
  setTypeMappingInfos(getTypeMappingInfos());
  jaxbUnmarshaller.setAttachmentUnmarshaller(new MyAttachmentUnmarshaller());
  jaxbMarshaller.setAttachmentMarshaller(new MyAttachmentMarshaller());
  DataHandler data=new DataHandler(""String_Node_Str"",""String_Node_Str"");
  MyAttachmentMarshaller.attachments.put(MyAttachmentUnmarshaller.ATTACHMENT_TEST_ID,data);
}","public void init() throws Exception {
  setControlDocument(XML_RESOURCE);
  setupParser();
  setTypeMappingInfos(getTypeMappingInfos());
  jaxbUnmarshaller.setAttachmentUnmarshaller(new MyAttachmentUnmarshaller());
  jaxbMarshaller.setAttachmentMarshaller(new MyAttachmentMarshaller());
  DataHandler data=new DataHandler(""String_Node_Str"",""String_Node_Str"");
  MyAttachmentMarshaller.attachments.put(MyAttachmentUnmarshaller.ATTACHMENT_TEST_ID,data);
}"
66711,"public void init() throws Exception {
  setControlDocument(XML_RESOURCE);
  setTypeMappingInfos(getTypeMappingInfos());
  jaxbUnmarshaller.setAttachmentUnmarshaller(new MyAttachmentUnmarshaller());
  jaxbMarshaller.setAttachmentMarshaller(new MyAttachmentMarshaller());
  DataHandler data=new DataHandler(""String_Node_Str"",""String_Node_Str"");
  MyAttachmentMarshaller.attachments.put(MyAttachmentUnmarshaller.ATTACHMENT_TEST_ID,data);
}","public void init() throws Exception {
  setControlDocument(XML_RESOURCE);
  setupParser();
  setTypeMappingInfos(getTypeMappingInfos());
  jaxbUnmarshaller.setAttachmentUnmarshaller(new MyAttachmentUnmarshaller());
  jaxbMarshaller.setAttachmentMarshaller(new MyAttachmentMarshaller());
  DataHandler data=new DataHandler(""String_Node_Str"",""String_Node_Str"");
  MyAttachmentMarshaller.attachments.put(MyAttachmentUnmarshaller.ATTACHMENT_TEST_ID,data);
}"
66712,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DatahandlerWithAnnotationsTestCases.class);
  suite.addTestSuite(DuplicateListOfStringsTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DatahandlerWithAnnotationsTestCases.class);
  suite.addTestSuite(DatahandlerWithXMLTestCases.class);
  suite.addTestSuite(DuplicateListOfStringsTestCases.class);
  suite.addTestSuite(DuplicateListOfStringsTestCasesWithXML.class);
  return suite;
}"
66713,"public void initTypeMappingInfoToSchemaType(){
  this.typeMappingInfoToSchemaType=new HashMap<TypeMappingInfo,QName>();
  if (typeToTypeMappingInfo != null && typeToTypeMappingInfo.size() > 0) {
    return;
  }
  Iterator descriptors=xmlContext.getSession(0).getProject().getOrderedDescriptors().iterator();
  while (descriptors.hasNext()) {
    XMLDescriptor next=(XMLDescriptor)descriptors.next();
    Class javaClass=next.getJavaClass();
    if (next.getSchemaReference() != null) {
      QName schemaType=next.getSchemaReference().getSchemaContextAsQName(next.getNamespaceResolver());
      Type type=null;
      TypeMappingInfo tmi=null;
      if (generator != null) {
        type=generator.getAnnotationsProcessor().getGeneratedClassesToCollectionClasses().get(javaClass);
        if (type == null) {
          JavaClass arrayClass=(JavaClass)generator.getAnnotationsProcessor().getGeneratedClassesToArrayClasses().get(javaClass);
          if (arrayClass != null) {
            String arrayClassName=arrayClass.getName();
            try {
              type=PrivilegedAccessHelper.getClassForName(arrayClassName);
            }
 catch (            Exception ex) {
            }
          }
          if (type == null && getTypeMappingInfoToGeneratedType() != null) {
            Iterator<Map.Entry<TypeMappingInfo,Class>> iter=getTypeMappingInfoToGeneratedType().entrySet().iterator();
            while (iter.hasNext()) {
              Map.Entry<TypeMappingInfo,Class> entry=iter.next();
              if (entry.getValue().equals(javaClass)) {
                tmi=entry.getKey();
                break;
              }
            }
          }
        }
        if (type == null) {
          type=javaClass;
        }
      }
 else {
        type=javaClass;
      }
      if (tmi == null && type != null) {
        tmi=new TypeMappingInfo();
        tmi.setType(type);
      }
      this.typeMappingInfoToSchemaType.put(tmi,schemaType);
    }
  }
  if (boundTypes != null) {
    for (    TypeMappingInfo next : this.boundTypes) {
      if (this.typeToSchemaType.get(next) == null) {
        Type nextType=next.getType();
        QName name=getSchemaTypeForTypeMappingInfo(nextType);
        if (name != null) {
          this.typeMappingInfoToSchemaType.put(next,name);
        }
      }
    }
  }
}","public void initTypeMappingInfoToSchemaType(){
  this.typeMappingInfoToSchemaType=new HashMap<TypeMappingInfo,QName>();
  if (typeToTypeMappingInfo != null && typeToTypeMappingInfo.size() > 0) {
    return;
  }
  Iterator descriptors=xmlContext.getSession(0).getProject().getOrderedDescriptors().iterator();
  while (descriptors.hasNext()) {
    XMLDescriptor next=(XMLDescriptor)descriptors.next();
    Class javaClass=next.getJavaClass();
    if (next.getSchemaReference() != null) {
      QName schemaType=next.getSchemaReference().getSchemaContextAsQName(next.getNamespaceResolver());
      Type type=null;
      TypeMappingInfo tmi=null;
      if (generator != null) {
        type=generator.getAnnotationsProcessor().getGeneratedClassesToCollectionClasses().get(javaClass);
        if (type == null) {
          JavaClass arrayClass=(JavaClass)generator.getAnnotationsProcessor().getGeneratedClassesToArrayClasses().get(javaClass);
          if (arrayClass != null) {
            String arrayClassName=arrayClass.getName();
            try {
              type=PrivilegedAccessHelper.getClassForName(arrayClassName);
            }
 catch (            Exception ex) {
            }
          }
          if (type == null && getTypeMappingInfoToGeneratedType() != null) {
            Iterator<Map.Entry<TypeMappingInfo,Class>> iter=getTypeMappingInfoToGeneratedType().entrySet().iterator();
            while (iter.hasNext()) {
              Map.Entry<TypeMappingInfo,Class> entry=iter.next();
              if (entry.getValue().equals(javaClass)) {
                tmi=entry.getKey();
                break;
              }
            }
          }
        }
        if (type == null) {
          type=javaClass;
        }
      }
 else {
        type=javaClass;
      }
      if (tmi == null && type != null) {
        tmi=new TypeMappingInfo();
        tmi.setType(type);
      }
      this.typeMappingInfoToSchemaType.put(tmi,schemaType);
    }
  }
  if (boundTypes != null) {
    for (    TypeMappingInfo next : this.boundTypes) {
      if (this.typeMappingInfoToSchemaType.get(next) == null) {
        Type nextType=next.getType();
        QName name=getSchemaTypeForTypeMappingInfo(nextType);
        if (name != null) {
          this.typeMappingInfoToSchemaType.put(next,name);
        }
      }
    }
  }
}"
66714,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField xmlField=null;
  if (isCollection) {
    xmlField=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
  }
 else {
    xmlField=(XMLField)((XMLBinaryDataMapping)mapping).getField();
  }
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getCollectionContentType();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    if (!xmlField.isSelfField()) {
      record.getXMLReader().setContentHandler(record);
    }
  }
 else {
    if (!xmlField.isSelfField()) {
      record.getXMLReader().setContentHandler(record);
      record.endElement(namespaceURI,localName,qName);
    }
  }
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField xmlField=null;
  if (isCollection) {
    xmlField=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
  }
 else {
    xmlField=(XMLField)((XMLBinaryDataMapping)mapping).getField();
  }
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    if (!xmlField.isSelfField()) {
      record.getXMLReader().setContentHandler(record);
    }
  }
 else {
    if (!xmlField.isSelfField()) {
      record.getXMLReader().setContentHandler(record);
      record.endElement(namespaceURI,localName,qName);
    }
  }
}"
66715,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField field=null;
  Object value=this.getStringBuffer().toString();
  resetStringBuffer();
  boolean isSwaRef=false;
  if (isCollection) {
    isSwaRef=((XMLBinaryDataCollectionMapping)mapping).isSwaRef();
    field=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
  }
 else {
    isSwaRef=((XMLBinaryDataMapping)mapping).isSwaRef();
    field=(XMLField)((XMLBinaryDataMapping)mapping).getField();
  }
  if (isSwaRef && (parent.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (mapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
    }
 else {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
    }
    if (converter != null) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,parent.getSession());
      }
    }
  }
 else {
    value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ToByteArray(value);
    if (converter != null) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,parent.getSession());
      }
    }
  }
  value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,mapping.getAttributeClassification(),parent.getSession());
  if (isCollection) {
    if (value != null) {
      parent.addAttributeValue((ContainerValue)nodeValue,value);
    }
  }
 else {
    parent.setAttributeValue(value,mapping);
  }
  if (!field.isSelfField()) {
    parent.getXMLReader().setContentHandler(parent);
    parent.endElement(namespaceURI,localName,qName);
  }
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField field=null;
  Object value=this.getStringBuffer().toString();
  resetStringBuffer();
  Class attributeClassification=null;
  boolean isSwaRef=false;
  if (isCollection) {
    isSwaRef=((XMLBinaryDataCollectionMapping)mapping).isSwaRef();
    field=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
    attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
  }
 else {
    isSwaRef=((XMLBinaryDataMapping)mapping).isSwaRef();
    field=(XMLField)((XMLBinaryDataMapping)mapping).getField();
    attributeClassification=((XMLBinaryDataMapping)mapping).getAttributeClassification();
  }
  if (isSwaRef && (parent.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (attributeClassification != null && attributeClassification == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
    }
 else {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
    }
    if (converter != null) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,parent.getSession());
      }
    }
  }
 else {
    value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ToByteArray(value);
    if (converter != null) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,parent.getSession());
      }
    }
  }
  value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,attributeClassification,parent.getSession());
  if (isCollection) {
    if (value != null) {
      parent.addAttributeValue((ContainerValue)nodeValue,value);
    }
  }
 else {
    parent.setAttributeValue(value,mapping);
  }
  if (!field.isSelfField()) {
    parent.getXMLReader().setContentHandler(parent);
    parent.endElement(namespaceURI,localName,qName);
  }
}"
66716,"public Object getValueToWrite(Object value,Object parent,XMLRecord record,XMLField field,XMLField includeField,AbstractSession session){
  XMLMarshaller marshaller=record.getMarshaller();
  Object element=value;
  boolean isAttribute=((XMLField)getField()).getLastXPathFragment().isAttribute();
  if (getValueConverter() != null) {
    Converter converter=getValueConverter();
    if (converter instanceof XMLConverter) {
      element=((XMLConverter)converter).convertObjectValueToDataValue(element,session,record.getMarshaller());
    }
 else {
      element=converter.convertObjectValueToDataValue(element,session);
    }
  }
  if (isAttribute) {
    if (isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
      try {
        String id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)element);
        element=id;
      }
 catch (      ClassCastException cce) {
        throw XMLMarshalException.invalidSwaRefAttribute(getAttributeClassification().getName());
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(element,record.getMarshaller(),mimeTypePolicy.getMimeType(parent));
      String base64Value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).buildBase64StringFromBytes(data.getData());
      element=base64Value;
    }
  }
 else {
    if (record.isXOPPackage() && !isSwaRef() && !shouldInlineBinaryData()) {
      String c_id=XMLConstants.EMPTY_STRING;
      byte[] bytes=null;
      if ((getCollectionContentType() == ClassConstants.ABYTE) || (getCollectionContentType() == ClassConstants.APBYTE)) {
        if (getCollectionContentType() == ClassConstants.ABYTE) {
          element=session.getDatasourcePlatform().getConversionManager().convertObject(element,ClassConstants.APBYTE);
        }
        bytes=(byte[])element;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.mimeTypePolicy.getMimeType(parent),field.getLastXPathFragment().getLocalName(),field.getLastXPathFragment().getNamespaceURI());
      }
 else       if (getCollectionContentType() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)element,field.getLastXPathFragment().getLocalName(),field.getLastXPathFragment().getNamespaceURI());
        if (c_id == null) {
          XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(element,marshaller,this.mimeTypePolicy.getMimeType(parent));
          bytes=data.getData();
        }
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(element,marshaller,this.mimeTypePolicy.getMimeType(parent));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),field.getLastXPathFragment().getLocalName(),field.getLastXPathFragment().getNamespaceURI());
      }
      if (c_id == null) {
        element=bytes;
      }
 else {
        DOMRecord include=new DOMRecord(field.getLastXPathFragment().getLocalName());
        include.setSession(session);
        include.put(includeField,c_id);
        element=include;
        NamespaceResolver resolver=((XMLField)getField()).getNamespaceResolver();
        if (resolver == null || resolver.resolveNamespaceURI(XMLConstants.XOP_URL) == null) {
          resolver=new NamespaceResolver();
          resolver.put(XMLConstants.XOP_PREFIX,XMLConstants.XOP_URL);
          String xpath=XMLConstants.XOP_PREFIX + XMLConstants.COLON + INCLUDE;
          XMLField incField=new XMLField(xpath);
          incField.setNamespaceResolver(resolver);
          Object obj=include.getIndicatingNoEntry(incField);
          if (obj != null && obj instanceof DOMRecord) {
            if (((DOMRecord)obj).getDOM().getNodeType() == Node.ELEMENT_NODE) {
              ((Element)((DOMRecord)obj).getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + XMLConstants.XOP_PREFIX,XMLConstants.XOP_URL);
            }
          }
        }
      }
    }
 else     if (isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
      try {
        String c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)element);
        element=c_id;
      }
 catch (      Exception ex) {
      }
    }
 else {
      if (!((getCollectionContentType() == ClassConstants.ABYTE) || (getCollectionContentType() == ClassConstants.APBYTE))) {
        element=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(element,marshaller,this.mimeTypePolicy.getMimeType(parent)).getData();
      }
    }
  }
  return element;
}","public Object getValueToWrite(Object value,Object parent,XMLRecord record,XMLField field,XMLField includeField,AbstractSession session){
  XMLMarshaller marshaller=record.getMarshaller();
  Object element=value;
  boolean isAttribute=((XMLField)getField()).getLastXPathFragment().isAttribute();
  if (getValueConverter() != null) {
    Converter converter=getValueConverter();
    if (converter instanceof XMLConverter) {
      element=((XMLConverter)converter).convertObjectValueToDataValue(element,session,record.getMarshaller());
    }
 else {
      element=converter.convertObjectValueToDataValue(element,session);
    }
  }
  if (isAttribute) {
    if (isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
      try {
        String id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)element);
        element=id;
      }
 catch (      ClassCastException cce) {
        throw XMLMarshalException.invalidSwaRefAttribute(getAttributeClassification().getName());
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(element,record.getMarshaller(),mimeTypePolicy.getMimeType(parent));
      String base64Value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).buildBase64StringFromBytes(data.getData());
      element=base64Value;
    }
  }
 else {
    if (record.isXOPPackage() && !isSwaRef() && !shouldInlineBinaryData()) {
      String c_id=XMLConstants.EMPTY_STRING;
      byte[] bytes=null;
      if ((getAttributeElementClass() == ClassConstants.ABYTE) || (getAttributeElementClass() == ClassConstants.APBYTE)) {
        if (getAttributeElementClass() == ClassConstants.ABYTE) {
          element=session.getDatasourcePlatform().getConversionManager().convertObject(element,ClassConstants.APBYTE);
        }
        bytes=(byte[])element;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.mimeTypePolicy.getMimeType(parent),field.getLastXPathFragment().getLocalName(),field.getLastXPathFragment().getNamespaceURI());
      }
 else       if (getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)element,field.getLastXPathFragment().getLocalName(),field.getLastXPathFragment().getNamespaceURI());
        if (c_id == null) {
          XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(element,marshaller,this.mimeTypePolicy.getMimeType(parent));
          bytes=data.getData();
        }
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(element,marshaller,this.mimeTypePolicy.getMimeType(parent));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),field.getLastXPathFragment().getLocalName(),field.getLastXPathFragment().getNamespaceURI());
      }
      if (c_id == null) {
        element=bytes;
      }
 else {
        DOMRecord include=new DOMRecord(field.getLastXPathFragment().getLocalName());
        include.setSession(session);
        include.put(includeField,c_id);
        element=include;
        NamespaceResolver resolver=((XMLField)getField()).getNamespaceResolver();
        if (resolver == null || resolver.resolveNamespaceURI(XMLConstants.XOP_URL) == null) {
          resolver=new NamespaceResolver();
          resolver.put(XMLConstants.XOP_PREFIX,XMLConstants.XOP_URL);
          String xpath=XMLConstants.XOP_PREFIX + XMLConstants.COLON + INCLUDE;
          XMLField incField=new XMLField(xpath);
          incField.setNamespaceResolver(resolver);
          Object obj=include.getIndicatingNoEntry(incField);
          if (obj != null && obj instanceof DOMRecord) {
            if (((DOMRecord)obj).getDOM().getNodeType() == Node.ELEMENT_NODE) {
              ((Element)((DOMRecord)obj).getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + XMLConstants.XOP_PREFIX,XMLConstants.XOP_URL);
            }
          }
        }
      }
    }
 else     if (isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
      try {
        String c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)element);
        element=c_id;
      }
 catch (      Exception ex) {
      }
    }
 else {
      if (!((getAttributeElementClass() == ClassConstants.ABYTE) || (getAttributeElementClass() == ClassConstants.APBYTE))) {
        element=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(element,marshaller,this.mimeTypePolicy.getMimeType(parent)).getData();
      }
    }
  }
  return element;
}"
66717,"public Class getCollectionContentType(){
  return collectionContentType;
}","public Class getCollectionContentType(){
  return getAttributeElementClass();
}"
66718,"public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,AbstractSession executionSession){
  ContainerPolicy cp=this.getContainerPolicy();
  Object fieldValue=row.getValues(this.getField());
  if (fieldValue == null) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Vector fieldValues=this.getDescriptor().buildDirectValuesFromFieldValue(fieldValue);
  if (fieldValues == null) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Object result=null;
  if (reuseContainer) {
    Object currentObject=((XMLRecord)row).getCurrentObject();
    Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
    result=container != null ? container : cp.containerInstance();
  }
 else {
    result=cp.containerInstance(fieldValues.size());
  }
  for (Enumeration stream=fieldValues.elements(); stream.hasMoreElements(); ) {
    Object element=stream.nextElement();
    XMLUnmarshaller unmarshaller=((XMLRecord)row).getUnmarshaller();
    if (element instanceof String) {
      if (this.isSwaRef() && (unmarshaller.getAttachmentUnmarshaller() != null)) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)element);
      }
 else       if (!this.isSwaRef()) {
        byte[] bytes=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(element);
        fieldValue=bytes;
      }
    }
 else {
      XMLRecord record=(XMLRecord)element;
      record.setSession(executionSession);
      if ((unmarshaller.getAttachmentUnmarshaller() != null) && unmarshaller.getAttachmentUnmarshaller().isXOPPackage() && !this.isSwaRef()&& !this.shouldInlineBinaryData()) {
        String xpath=XMLConstants.EMPTY_STRING;
        String prefix=null;
        NamespaceResolver descriptorResolver=((XMLDescriptor)getDescriptor()).getNamespaceResolver();
        if (descriptorResolver != null) {
          prefix=descriptorResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        if (prefix == null) {
          prefix=XMLConstants.XOP_PREFIX;
        }
        NamespaceResolver tempResolver=new NamespaceResolver();
        tempResolver.put(prefix,XMLConstants.XOP_URL);
        xpath=prefix + XMLConstants.COLON + INCLUDE+ ""String_Node_Str"";
        XMLField field=new XMLField(xpath);
        field.setNamespaceResolver(tempResolver);
        String includeValue=(String)record.get(field);
        if (element != null && includeValue != null) {
          if ((getCollectionContentType() == ClassConstants.ABYTE) || (getCollectionContentType() == ClassConstants.APBYTE)) {
            fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray(includeValue);
          }
 else {
            fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(includeValue);
          }
        }
 else {
          fieldValue=record.get(XMLConstants.TEXT);
          fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
        }
      }
 else       if ((unmarshaller.getAttachmentUnmarshaller() != null) && isSwaRef()) {
        String refValue=(String)record.get(XMLConstants.TEXT);
        if (refValue != null) {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(refValue);
        }
      }
 else {
        fieldValue=record.get(XMLConstants.TEXT);
        fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
      }
    }
    Object attributeValue=fieldValue;
    if (getValueConverter() != null) {
      if (getValueConverter() instanceof XMLConverter) {
        attributeValue=((XMLConverter)getValueConverter()).convertDataValueToObjectValue(fieldValue,executionSession,unmarshaller);
      }
 else {
        attributeValue=getValueConverter().convertDataValueToObjectValue(fieldValue,executionSession);
      }
    }
    if (collectionContentType != null) {
      attributeValue=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(attributeValue,collectionContentType,executionSession);
    }
    cp.addInto(attributeValue,result,query.getSession());
  }
  return result;
}","public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,AbstractSession executionSession){
  ContainerPolicy cp=this.getContainerPolicy();
  Object fieldValue=row.getValues(this.getField());
  if (fieldValue == null) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Vector fieldValues=this.getDescriptor().buildDirectValuesFromFieldValue(fieldValue);
  if (fieldValues == null) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Object result=null;
  if (reuseContainer) {
    Object currentObject=((XMLRecord)row).getCurrentObject();
    Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
    result=container != null ? container : cp.containerInstance();
  }
 else {
    result=cp.containerInstance(fieldValues.size());
  }
  for (Enumeration stream=fieldValues.elements(); stream.hasMoreElements(); ) {
    Object element=stream.nextElement();
    XMLUnmarshaller unmarshaller=((XMLRecord)row).getUnmarshaller();
    if (element instanceof String) {
      if (this.isSwaRef() && (unmarshaller.getAttachmentUnmarshaller() != null)) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)element);
      }
 else       if (!this.isSwaRef()) {
        byte[] bytes=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(element);
        fieldValue=bytes;
      }
    }
 else {
      XMLRecord record=(XMLRecord)element;
      record.setSession(executionSession);
      if ((unmarshaller.getAttachmentUnmarshaller() != null) && unmarshaller.getAttachmentUnmarshaller().isXOPPackage() && !this.isSwaRef()&& !this.shouldInlineBinaryData()) {
        String xpath=XMLConstants.EMPTY_STRING;
        String prefix=null;
        NamespaceResolver descriptorResolver=((XMLDescriptor)getDescriptor()).getNamespaceResolver();
        if (descriptorResolver != null) {
          prefix=descriptorResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        if (prefix == null) {
          prefix=XMLConstants.XOP_PREFIX;
        }
        NamespaceResolver tempResolver=new NamespaceResolver();
        tempResolver.put(prefix,XMLConstants.XOP_URL);
        xpath=prefix + XMLConstants.COLON + INCLUDE+ ""String_Node_Str"";
        XMLField field=new XMLField(xpath);
        field.setNamespaceResolver(tempResolver);
        String includeValue=(String)record.get(field);
        if (element != null && includeValue != null) {
          if ((getAttributeElementClass() == ClassConstants.ABYTE) || (getAttributeElementClass() == ClassConstants.APBYTE)) {
            fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray(includeValue);
          }
 else {
            fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(includeValue);
          }
        }
 else {
          fieldValue=record.get(XMLConstants.TEXT);
          fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
        }
      }
 else       if ((unmarshaller.getAttachmentUnmarshaller() != null) && isSwaRef()) {
        String refValue=(String)record.get(XMLConstants.TEXT);
        if (refValue != null) {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(refValue);
        }
      }
 else {
        fieldValue=record.get(XMLConstants.TEXT);
        fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
      }
    }
    Object attributeValue=fieldValue;
    if (getValueConverter() != null) {
      if (getValueConverter() instanceof XMLConverter) {
        attributeValue=((XMLConverter)getValueConverter()).convertDataValueToObjectValue(fieldValue,executionSession,unmarshaller);
      }
 else {
        attributeValue=getValueConverter().convertDataValueToObjectValue(fieldValue,executionSession);
      }
    }
    cp.addInto(attributeValue,result,query.getSession());
  }
  return result;
}"
66719,"public void setCollectionContentType(Class javaClass){
  collectionContentType=javaClass;
}","public void setCollectionContentType(Class javaClass){
  setAttributeElementClass(javaClass);
}"
66720,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(BinaryDataIdentifiedByNameXOPonNSRTestCases.class);
  suite.addTestSuite(BinaryDataIdentifiedByNameNullNSRTestCases.class);
  suite.addTestSuite(BinaryDataIdentifiedByNameEmptyNSRTestCases.class);
  suite.addTestSuite(BinaryDataIdentifiedByNameNullTestCases.class);
  suite.addTestSuite(BinaryDataEmptyElementTestCases.class);
  suite.addTestSuite(BinaryDataSelfTestCases.class);
  suite.addTestSuite(BinaryDataSelfDataHandlerTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(BinaryDataIdentifiedByNameXOPonNSRTestCases.class);
  suite.addTestSuite(BinaryDataIdentifiedByNameNullNSRTestCases.class);
  suite.addTestSuite(BinaryDataIdentifiedByNameEmptyNSRTestCases.class);
  suite.addTestSuite(BinaryDataIdentifiedByNameNullTestCases.class);
  suite.addTestSuite(BinaryDataEmptyElementTestCases.class);
  suite.addTestSuite(BinaryDataSelfTestCases.class);
  suite.addTestSuite(BinaryDataSelfDataHandlerTestCases.class);
  suite.addTestSuite(BinaryDataByteObjectArrayTestCases.class);
  return suite;
}"
66721,"public void setInt(Property property,int value){
  convertValueAndSet(property,new Integer(value));
}","public void setInt(Property property,int value){
  convertValueAndSet(property,value);
}"
66722,"public void setBoolean(Property property,boolean value){
  convertValueAndSet(property,new Boolean(value));
}","public void setBoolean(Property property,boolean value){
  convertValueAndSet(property,value);
}"
66723,"public void setShort(Property property,short value){
  convertValueAndSet(property,new Short(value));
}","public void setShort(Property property,short value){
  convertValueAndSet(property,value);
}"
66724,"public void setChar(Property property,char value){
  convertValueAndSet(property,new Character(value));
}","public void setChar(Property property,char value){
  convertValueAndSet(property,value);
}"
66725,"public void setDouble(Property property,double value){
  convertValueAndSet(property,new Double(value));
}","public void setDouble(Property property,double value){
  convertValueAndSet(property,value);
}"
66726,"public void setLong(Property property,long value){
  convertValueAndSet(property,new Long(value));
}","public void setLong(Property property,long value){
  convertValueAndSet(property,value);
}"
66727,"public void setByte(Property property,byte value){
  convertValueAndSet(property,new Byte(value));
}","public void setByte(Property property,byte value){
  convertValueAndSet(property,value);
}"
66728,"public void setFloat(Property property,float value){
  convertValueAndSet(property,new Float(value));
}","public void setFloat(Property property,float value){
  convertValueAndSet(property,value);
}"
66729,"public DynamicClassWriter(String className,SDOType type,HelperContext aContext){
  this.aHelperContext=aContext;
  this.parentClass=SDODataObject.class;
  this.typeImplClassDescriptor=className.replace('.','/');
  this.type=type;
  initializeParentClass();
  if (type.isSubType()) {
    try {
      Field parentEndPropertyIndexField=PrivilegedAccessHelper.getField(parentClass,END_PROPERTY_INDEX,true);
      Integer parentEndPropertyIndex=(Integer)PrivilegedAccessHelper.getValueFromField(parentEndPropertyIndexField,parentClass);
      startPropertyIndex=parentEndPropertyIndex + 1;
    }
 catch (    NoSuchFieldException e) {
      startPropertyIndex=new Integer(0);
    }
catch (    IllegalAccessException e) {
      startPropertyIndex=new Integer(0);
    }
  }
 else {
    startPropertyIndex=new Integer(0);
  }
}","public DynamicClassWriter(String className,SDOType type,HelperContext aContext){
  this.aHelperContext=aContext;
  this.parentClass=SDODataObject.class;
  this.typeImplClassDescriptor=className.replace('.','/');
  this.type=type;
  initializeParentClass();
  if (type.isSubType()) {
    try {
      Field parentEndPropertyIndexField=PrivilegedAccessHelper.getField(parentClass,END_PROPERTY_INDEX,true);
      Integer parentEndPropertyIndex=(Integer)PrivilegedAccessHelper.getValueFromField(parentEndPropertyIndexField,parentClass);
      startPropertyIndex=parentEndPropertyIndex + 1;
    }
 catch (    NoSuchFieldException e) {
      startPropertyIndex=0;
    }
catch (    IllegalAccessException e) {
      startPropertyIndex=0;
    }
  }
 else {
    startPropertyIndex=0;
  }
}"
66730,"public void handleNotification(Notification notification,Object handback){
  if (notification instanceof AttributeChangeNotification) {
    try {
      AttributeChangeNotification acn=(AttributeChangeNotification)notification;
      if (acn.getAttributeName().equals(WLS_ACTIVE_VERSION_STATE)) {
        if (acn.getNewValue().equals(new Integer(0))) {
          resetHelperContext(mapKey);
        }
      }
    }
 catch (    Exception x) {
    }
  }
}","public void handleNotification(Notification notification,Object handback){
  if (notification instanceof AttributeChangeNotification) {
    try {
      AttributeChangeNotification acn=(AttributeChangeNotification)notification;
      if (acn.getAttributeName().equals(WLS_ACTIVE_VERSION_STATE)) {
        if (acn.getNewValue().equals(0)) {
          resetHelperContext(mapKey);
        }
      }
    }
 catch (    Exception x) {
    }
  }
}"
66731,"private SDOType startNewComplexType(String targetNamespace,String sdoTypeName,String xsdLocalName,ComplexType complexType){
  SDOType currentType;
  if (null == complexType.getName()) {
    currentType=createSDOTypeForName(targetNamespace,sdoTypeName,xsdLocalName);
  }
 else {
    currentType=getGeneratedTypesByXsdQName().get(new QName(targetNamespace,complexType.getName()));
  }
  if (complexType.isMixed()) {
    currentType.setMixed(true);
    currentType.setSequenced(true);
  }
  if (complexType.getAnyAttribute() != null) {
    currentType.setOpen(true);
  }
  currentType.setAbstract(complexType.isAbstractValue());
  currentType.setDataType(false);
  String value=(String)complexType.getAttributesMap().get(SDOConstants.SDOXML_ALIASNAME_QNAME);
  if (value != null) {
    XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
    java.util.List names=(java.util.List)xmlConversionManager.convertObject(value,java.util.List.class);
    currentType.setAliasNames(names);
  }
  String sequencedValue=(String)complexType.getAttributesMap().get(SDOConstants.SDOXML_SEQUENCE_QNAME);
  if (sequencedValue != null) {
    Boolean sequencedBoolean=new Boolean(sequencedValue);
    currentType.setSequenced(sequencedBoolean.booleanValue());
  }
  Annotation annotation=complexType.getAnnotation();
  if (annotation != null) {
    java.util.List documentation=annotation.getDocumentation();
    if ((documentation != null) && (documentation.size() > 0)) {
      currentType.setInstanceProperty(SDOConstants.DOCUMENTATION_PROPERTY,documentation);
    }
  }
  currentType.preInitialize(packageName,namespaceResolvers);
  if (complexType.getAnnotation() != null) {
    currentType.setAppInfoElements(complexType.getAnnotation().getAppInfo());
  }
  return currentType;
}","private SDOType startNewComplexType(String targetNamespace,String sdoTypeName,String xsdLocalName,ComplexType complexType){
  SDOType currentType;
  if (null == complexType.getName()) {
    currentType=createSDOTypeForName(targetNamespace,sdoTypeName,xsdLocalName);
  }
 else {
    currentType=getGeneratedTypesByXsdQName().get(new QName(targetNamespace,complexType.getName()));
  }
  if (complexType.isMixed()) {
    currentType.setMixed(true);
    currentType.setSequenced(true);
  }
  if (complexType.getAnyAttribute() != null) {
    currentType.setOpen(true);
  }
  currentType.setAbstract(complexType.isAbstractValue());
  currentType.setDataType(false);
  String value=(String)complexType.getAttributesMap().get(SDOConstants.SDOXML_ALIASNAME_QNAME);
  if (value != null) {
    XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
    java.util.List names=(java.util.List)xmlConversionManager.convertObject(value,java.util.List.class);
    currentType.setAliasNames(names);
  }
  String sequencedValue=(String)complexType.getAttributesMap().get(SDOConstants.SDOXML_SEQUENCE_QNAME);
  if (sequencedValue != null) {
    currentType.setSequenced(Boolean.valueOf(sequencedValue));
  }
  Annotation annotation=complexType.getAnnotation();
  if (annotation != null) {
    java.util.List documentation=annotation.getDocumentation();
    if ((documentation != null) && (documentation.size() > 0)) {
      currentType.setInstanceProperty(SDOConstants.DOCUMENTATION_PROPERTY,documentation);
    }
  }
  currentType.preInitialize(packageName,namespaceResolvers);
  if (complexType.getAnnotation() != null) {
    currentType.setAppInfoElements(complexType.getAnnotation().getAppInfo());
  }
  return currentType;
}"
66732,"private void processSimpleElement(String targetNamespace,String defaultNamespace,SDOType owningType,SDOType sdoPropertyType,TypeDefParticle typeDefParticle,Element element,boolean isQualified,boolean isGlobal,boolean isMany){
  if (element == null) {
    return;
  }
  String manyValue=(String)element.getAttributesMap().get(SDOConstants.SDOXML_MANY_QNAME);
  if (manyValue != null) {
    Boolean manyBoolean=new Boolean(manyValue);
    isMany=manyBoolean.booleanValue();
  }
  SDOProperty p=null;
  String typeName=null;
  String mappingUri=null;
  if (typeDefParticle != null) {
    mappingUri=owningType.getURI();
  }
  if (element.getRef() != null) {
    String ref=element.getRef();
    String localName=null;
    String uri=null;
    int index=ref.indexOf(':');
    if (index != -1) {
      String prefix=ref.substring(0,index);
      localName=ref.substring(index + 1,ref.length());
      uri=getURIForPrefix(prefix);
    }
 else {
      localName=ref;
      uri=defaultNamespace;
    }
    Property lookedUp=owningType.getProperty(localName);
    if (lookedUp != null) {
      if (inRestriction) {
        return;
      }
      updateCollisionProperty(owningType,(SDOProperty)lookedUp);
    }
 else {
      SDOProperty theProp=new SDOProperty(aHelperContext);
      theProp.setName(localName);
      theProp.setGlobal(false);
      theProp.setContainment(true);
      theProp.setXsd(true);
      theProp.setMany(isMany);
      theProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
      if (element.getAnnotation() != null) {
        java.util.List doc=element.getAnnotation().getDocumentation();
        if (doc != null) {
          theProp.setInstanceProperty(SDOConstants.DOCUMENTATION_PROPERTY,doc);
        }
      }
      owningType.addDeclaredProperty(theProp);
      GlobalRef globalRef=new GlobalRef();
      globalRef.setProperty(theProp);
      globalRef.setIsElement(true);
      globalRef.setOwningType(owningType);
      globalRef.setUri(uri);
      globalRef.setLocalName(localName);
      addGlobalRef(globalRef);
    }
    return;
  }
 else {
    if (isGlobal) {
      SDOProperty lookedUpProp=getExistingGlobalProperty(targetNamespace,element.getName(),true);
      if (lookedUpProp != null && lookedUpProp.isFinalized()) {
        return;
      }
    }
    p=createNewProperty(targetNamespace,element.getName(),isQualified,isGlobal,true,element.isNillable(),element.getAnnotation());
    if (element.getAnnotation() != null) {
      p.setAppInfoElements(element.getAnnotation().getAppInfo());
    }
    if (element.getType() != null) {
      typeName=element.getType();
      p.setName(element.getName());
      QName qname=getQNameForString(defaultNamespace,typeName);
      if (isGlobal) {
        if (qname.getNamespaceURI().equals(targetNamespace)) {
          processGlobalItem(targetNamespace,defaultNamespace,qname.getLocalPart());
        }
      }
      if ((qname.equals(XMLConstants.QNAME_QNAME)) || (qname.equals(XMLConstants.BASE_64_BINARY_QNAME)) || (qname.equals(XMLConstants.HEX_BINARY_QNAME))|| (qname.equals(XMLConstants.DATE_QNAME))|| (qname.equals(XMLConstants.TIME_QNAME))|| (qname.equals(XMLConstants.DATE_TIME_QNAME))) {
        p.setXsdType(qname);
      }
      String mimeType=(String)element.getAttributesMap().get(SDOConstants.XML_MIME_TYPE_QNAME);
      if (mimeType != null) {
        p.setInstanceProperty(SDOConstants.MIME_TYPE_PROPERTY,mimeType);
      }
      String mimeTypePropName=(String)element.getAttributesMap().get(SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME);
      if (mimeTypePropName != null) {
        p.setInstanceProperty(SDOConstants.MIME_TYPE_PROPERTY_PROPERTY,mimeTypePropName);
      }
      sdoPropertyType=getSDOTypeForName(targetNamespace,defaultNamespace,typeName);
      if (!sdoPropertyType.isFinalized() && qname.getNamespaceURI().equals(targetNamespace)) {
        if (sdoPropertyType.isDataType()) {
          SimpleType baseSimpleType=(SimpleType)rootSchema.getTopLevelSimpleTypes().get(qname.getLocalPart());
          processGlobalSimpleType(targetNamespace,defaultNamespace,baseSimpleType);
        }
      }
      if ((p.getXsdType() == null) && (sdoPropertyType.getXsdType() != null)) {
        p.setXsdType(sdoPropertyType.getXsdType());
      }
      if (sdoPropertyType.isDataType()) {
        p.setContainment(false);
      }
    }
 else     if (element.getComplexType() != null) {
      typeName=element.getName();
      p.setName(element.getComplexType().getNameOrOwnerName());
    }
 else     if (element.getSimpleType() != null) {
      typeName=element.getName();
      p.setName(element.getName());
      if (sdoPropertyType.isDataType()) {
        p.setContainment(false);
      }
    }
 else {
      p.setName(element.getName());
      sdoPropertyType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getSDOTypeFromXSDType(SDOConstants.ANY_TYPE_QNAME);
    }
  }
  sdoPropertyType=processSimpleComponentAnnotations(owningType,element,p,targetNamespace,defaultNamespace,sdoPropertyType);
  p.setType(sdoPropertyType);
  setDefaultValue(p,element);
  p.setMany(isMany);
  if (p.getType().isChangeSummaryType()) {
    p.setReadOnly(true);
  }
  if (typeDefParticle != null) {
    updateOwnerAndBuildMapping(owningType,p,defaultNamespace,targetNamespace,element,typeName,mappingUri);
  }
  if (isGlobal) {
    addRootElementToDescriptor(p,targetNamespace,element.getName());
  }
  p.setFinalized(true);
}","private void processSimpleElement(String targetNamespace,String defaultNamespace,SDOType owningType,SDOType sdoPropertyType,TypeDefParticle typeDefParticle,Element element,boolean isQualified,boolean isGlobal,boolean isMany){
  if (element == null) {
    return;
  }
  String manyValue=(String)element.getAttributesMap().get(SDOConstants.SDOXML_MANY_QNAME);
  if (manyValue != null) {
    isMany=Boolean.valueOf(manyValue);
  }
  SDOProperty p=null;
  String typeName=null;
  String mappingUri=null;
  if (typeDefParticle != null) {
    mappingUri=owningType.getURI();
  }
  if (element.getRef() != null) {
    String ref=element.getRef();
    String localName=null;
    String uri=null;
    int index=ref.indexOf(':');
    if (index != -1) {
      String prefix=ref.substring(0,index);
      localName=ref.substring(index + 1,ref.length());
      uri=getURIForPrefix(prefix);
    }
 else {
      localName=ref;
      uri=defaultNamespace;
    }
    Property lookedUp=owningType.getProperty(localName);
    if (lookedUp != null) {
      if (inRestriction) {
        return;
      }
      updateCollisionProperty(owningType,(SDOProperty)lookedUp);
    }
 else {
      SDOProperty theProp=new SDOProperty(aHelperContext);
      theProp.setName(localName);
      theProp.setGlobal(false);
      theProp.setContainment(true);
      theProp.setXsd(true);
      theProp.setMany(isMany);
      theProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
      if (element.getAnnotation() != null) {
        java.util.List doc=element.getAnnotation().getDocumentation();
        if (doc != null) {
          theProp.setInstanceProperty(SDOConstants.DOCUMENTATION_PROPERTY,doc);
        }
      }
      owningType.addDeclaredProperty(theProp);
      GlobalRef globalRef=new GlobalRef();
      globalRef.setProperty(theProp);
      globalRef.setIsElement(true);
      globalRef.setOwningType(owningType);
      globalRef.setUri(uri);
      globalRef.setLocalName(localName);
      addGlobalRef(globalRef);
    }
    return;
  }
 else {
    if (isGlobal) {
      SDOProperty lookedUpProp=getExistingGlobalProperty(targetNamespace,element.getName(),true);
      if (lookedUpProp != null && lookedUpProp.isFinalized()) {
        return;
      }
    }
    p=createNewProperty(targetNamespace,element.getName(),isQualified,isGlobal,true,element.isNillable(),element.getAnnotation());
    if (element.getAnnotation() != null) {
      p.setAppInfoElements(element.getAnnotation().getAppInfo());
    }
    if (element.getType() != null) {
      typeName=element.getType();
      p.setName(element.getName());
      QName qname=getQNameForString(defaultNamespace,typeName);
      if (isGlobal) {
        if (qname.getNamespaceURI().equals(targetNamespace)) {
          processGlobalItem(targetNamespace,defaultNamespace,qname.getLocalPart());
        }
      }
      if ((qname.equals(XMLConstants.QNAME_QNAME)) || (qname.equals(XMLConstants.BASE_64_BINARY_QNAME)) || (qname.equals(XMLConstants.HEX_BINARY_QNAME))|| (qname.equals(XMLConstants.DATE_QNAME))|| (qname.equals(XMLConstants.TIME_QNAME))|| (qname.equals(XMLConstants.DATE_TIME_QNAME))) {
        p.setXsdType(qname);
      }
      String mimeType=(String)element.getAttributesMap().get(SDOConstants.XML_MIME_TYPE_QNAME);
      if (mimeType != null) {
        p.setInstanceProperty(SDOConstants.MIME_TYPE_PROPERTY,mimeType);
      }
      String mimeTypePropName=(String)element.getAttributesMap().get(SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME);
      if (mimeTypePropName != null) {
        p.setInstanceProperty(SDOConstants.MIME_TYPE_PROPERTY_PROPERTY,mimeTypePropName);
      }
      sdoPropertyType=getSDOTypeForName(targetNamespace,defaultNamespace,typeName);
      if (!sdoPropertyType.isFinalized() && qname.getNamespaceURI().equals(targetNamespace)) {
        if (sdoPropertyType.isDataType()) {
          SimpleType baseSimpleType=(SimpleType)rootSchema.getTopLevelSimpleTypes().get(qname.getLocalPart());
          processGlobalSimpleType(targetNamespace,defaultNamespace,baseSimpleType);
        }
      }
      if ((p.getXsdType() == null) && (sdoPropertyType.getXsdType() != null)) {
        p.setXsdType(sdoPropertyType.getXsdType());
      }
      if (sdoPropertyType.isDataType()) {
        p.setContainment(false);
      }
    }
 else     if (element.getComplexType() != null) {
      typeName=element.getName();
      p.setName(element.getComplexType().getNameOrOwnerName());
    }
 else     if (element.getSimpleType() != null) {
      typeName=element.getName();
      p.setName(element.getName());
      if (sdoPropertyType.isDataType()) {
        p.setContainment(false);
      }
    }
 else {
      p.setName(element.getName());
      sdoPropertyType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getSDOTypeFromXSDType(SDOConstants.ANY_TYPE_QNAME);
    }
  }
  sdoPropertyType=processSimpleComponentAnnotations(owningType,element,p,targetNamespace,defaultNamespace,sdoPropertyType);
  p.setType(sdoPropertyType);
  setDefaultValue(p,element);
  p.setMany(isMany);
  if (p.getType().isChangeSummaryType()) {
    p.setReadOnly(true);
  }
  if (typeDefParticle != null) {
    updateOwnerAndBuildMapping(owningType,p,defaultNamespace,targetNamespace,element,typeName,mappingUri);
  }
  if (isGlobal) {
    addRootElementToDescriptor(p,targetNamespace,element.getName());
  }
  p.setFinalized(true);
}"
66733,"private SDOType processSimpleComponentAnnotations(SDOType owningType,SimpleComponent simpleComponent,SDOProperty p,String targetNamespace,String defaultNamespace,SDOType sdoPropertyType){
  String aliasNamesValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_ALIASNAME_QNAME);
  if (aliasNamesValue != null) {
    XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
    java.util.List names=(java.util.List)xmlConversionManager.convertObject(aliasNamesValue,java.util.List.class);
    p.setAliasNames(names);
  }
  String readOnlyValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_READONLY_QNAME);
  if (readOnlyValue != null) {
    Boolean readOnlyBoolean=new Boolean(readOnlyValue);
    p.setReadOnly(readOnlyBoolean.booleanValue());
  }
  String dataTypeValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_DATATYPE_QNAME);
  if (dataTypeValue != null) {
    QName xsdQName=((SDOTypeHelper)aHelperContext.getTypeHelper()).getXSDTypeFromSDOType(sdoPropertyType);
    if ((xsdQName == null) && !sdoPropertyType.isDataType()) {
      xsdQName=new QName(sdoPropertyType.getURI(),sdoPropertyType.getName());
    }
    p.setXsdType(xsdQName);
    SDOType sdoType=getSDOTypeForName(targetNamespace,defaultNamespace,dataTypeValue);
    sdoPropertyType=sdoType;
    Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
    p.setInstanceProperty(xmlDataTypeProperty,sdoType);
  }
  String stringValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_STRING_QNAME);
  if (stringValue != null) {
    QName xsdTypeQName=getQNameForString(defaultNamespace,simpleComponent.getType());
    p.setXsdType(xsdTypeQName);
    sdoPropertyType=SDOConstants.SDO_STRING;
  }
  String nameValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_NAME_QNAME);
  if (nameValue != null) {
    p.setName(nameValue);
    if (p.isGlobal() && targetNamespace != null) {
      QName propertyName=new QName(targetNamespace,nameValue);
      ((SDOTypeHelper)aHelperContext.getTypeHelper()).getOpenContentProperties().put(propertyName,p);
    }
  }
 else {
    if (p.isGlobal() && targetNamespace != null) {
      QName propertyName=new QName(targetNamespace,p.getName());
      ((SDOTypeHelper)aHelperContext.getTypeHelper()).getOpenContentProperties().put(propertyName,p);
    }
  }
  String propertyTypeValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_PROPERTYTYPE_QNAME);
  if (propertyTypeValue != null) {
    String uri=targetNamespace;
    int colonIndex=propertyTypeValue.indexOf(':');
    if (colonIndex > -1) {
      String prefix=propertyTypeValue.substring(0,colonIndex);
      uri=getURIForPrefix(prefix);
    }
    NonContainmentReference nonContainmentReference=new NonContainmentReference();
    nonContainmentReference.setPropertyTypeName(propertyTypeValue);
    nonContainmentReference.setPropertyTypeURI(uri);
    nonContainmentReference.setOwningType(owningType);
    nonContainmentReference.setOwningProp(p);
    String oppositePropValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_OPPOSITEPROPERTY_QNAME);
    nonContainmentReference.setOppositePropName(oppositePropValue);
    getNonContainmentReferences().add(nonContainmentReference);
  }
  return sdoPropertyType;
}","private SDOType processSimpleComponentAnnotations(SDOType owningType,SimpleComponent simpleComponent,SDOProperty p,String targetNamespace,String defaultNamespace,SDOType sdoPropertyType){
  String aliasNamesValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_ALIASNAME_QNAME);
  if (aliasNamesValue != null) {
    XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
    java.util.List names=(java.util.List)xmlConversionManager.convertObject(aliasNamesValue,java.util.List.class);
    p.setAliasNames(names);
  }
  String readOnlyValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_READONLY_QNAME);
  if (readOnlyValue != null) {
    p.setReadOnly(Boolean.valueOf(readOnlyValue));
  }
  String dataTypeValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_DATATYPE_QNAME);
  if (dataTypeValue != null) {
    QName xsdQName=((SDOTypeHelper)aHelperContext.getTypeHelper()).getXSDTypeFromSDOType(sdoPropertyType);
    if ((xsdQName == null) && !sdoPropertyType.isDataType()) {
      xsdQName=new QName(sdoPropertyType.getURI(),sdoPropertyType.getName());
    }
    p.setXsdType(xsdQName);
    SDOType sdoType=getSDOTypeForName(targetNamespace,defaultNamespace,dataTypeValue);
    sdoPropertyType=sdoType;
    Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
    p.setInstanceProperty(xmlDataTypeProperty,sdoType);
  }
  String stringValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_STRING_QNAME);
  if (stringValue != null) {
    QName xsdTypeQName=getQNameForString(defaultNamespace,simpleComponent.getType());
    p.setXsdType(xsdTypeQName);
    sdoPropertyType=SDOConstants.SDO_STRING;
  }
  String nameValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_NAME_QNAME);
  if (nameValue != null) {
    p.setName(nameValue);
    if (p.isGlobal() && targetNamespace != null) {
      QName propertyName=new QName(targetNamespace,nameValue);
      ((SDOTypeHelper)aHelperContext.getTypeHelper()).getOpenContentProperties().put(propertyName,p);
    }
  }
 else {
    if (p.isGlobal() && targetNamespace != null) {
      QName propertyName=new QName(targetNamespace,p.getName());
      ((SDOTypeHelper)aHelperContext.getTypeHelper()).getOpenContentProperties().put(propertyName,p);
    }
  }
  String propertyTypeValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_PROPERTYTYPE_QNAME);
  if (propertyTypeValue != null) {
    String uri=targetNamespace;
    int colonIndex=propertyTypeValue.indexOf(':');
    if (colonIndex > -1) {
      String prefix=propertyTypeValue.substring(0,colonIndex);
      uri=getURIForPrefix(prefix);
    }
    NonContainmentReference nonContainmentReference=new NonContainmentReference();
    nonContainmentReference.setPropertyTypeName(propertyTypeValue);
    nonContainmentReference.setPropertyTypeURI(uri);
    nonContainmentReference.setOwningType(owningType);
    nonContainmentReference.setOwningProp(p);
    String oppositePropValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_OPPOSITEPROPERTY_QNAME);
    nonContainmentReference.setOppositePropName(oppositePropValue);
    getNonContainmentReferences().add(nonContainmentReference);
  }
  return sdoPropertyType;
}"
66734,"/** 
 * INTERNAL:
 */
protected void generateCanonicalModelClass(Element element,PersistenceUnit persistenceUnit) throws IOException {
  Writer writer=null;
  try {
    ClassAccessor accessor=persistenceUnit.getClassAccessor(element);
    String qualifiedName=accessor.getAccessibleObjectName();
    String className=getName(qualifiedName);
    String classPackage=getPackage(qualifiedName);
    String qualifiedCanonicalName=persistenceUnit.getQualifiedCanonicalName(qualifiedName);
    String canonicalName=getName(qualifiedCanonicalName);
    String canonicalpackage=getPackage(qualifiedCanonicalName);
    JavaFileObject file=processingEnv.getFiler().createSourceFile(qualifiedCanonicalName,element);
    writer=file.openWriter();
    if (!canonicalpackage.equals(""String_Node_Str"")) {
      writer.append(""String_Node_Str"" + canonicalpackage + ""String_Node_Str"");
    }
    ArrayList<String> attributes=new ArrayList<String>();
    HashMap<String,String> imports=new HashMap<String,String>();
    if (!classPackage.equals(canonicalpackage)) {
      imports.put(className,qualifiedName);
    }
    for (    MappingAccessor mappingAccessor : accessor.getDescriptor().getAccessors()) {
      if (!mappingAccessor.isTransient()) {
        MetadataAnnotatedElement annotatedElement=mappingAccessor.getAnnotatedElement();
        MetadataClass rawClass=annotatedElement.getRawClass(mappingAccessor.getDescriptor());
        String attributeType;
        String types=className;
        if (mappingAccessor.isBasic()) {
          types=types + ""String_Node_Str"" + getUnqualifiedType(getBoxedType(annotatedElement),imports);
          attributeType=AttributeType.SingularAttribute.name();
          imports.put(attributeType,""String_Node_Str"");
        }
 else {
          if (rawClass.isList()) {
            attributeType=AttributeType.ListAttribute.name();
            imports.put(attributeType,""String_Node_Str"");
          }
 else           if (rawClass.isSet()) {
            attributeType=AttributeType.SetAttribute.name();
            imports.put(attributeType,""String_Node_Str"");
          }
 else           if (rawClass.isMap()) {
            attributeType=AttributeType.MapAttribute.name();
            imports.put(attributeType,""String_Node_Str"");
          }
 else           if (rawClass.isCollection()) {
            attributeType=AttributeType.CollectionAttribute.name();
            imports.put(attributeType,""String_Node_Str"");
          }
 else {
            attributeType=AttributeType.SingularAttribute.name();
            imports.put(attributeType,""String_Node_Str"");
          }
          if (mappingAccessor.isMapAccessor()) {
            if (mappingAccessor.isMappedKeyMapAccessor()) {
              MetadataClass mapKeyClass=((MappedKeyMapAccessor)mappingAccessor).getMapKeyClass();
              types=types + ""String_Node_Str"" + getUnqualifiedType(mapKeyClass.getName(),imports)+ ""String_Node_Str""+ getUnqualifiedType(mappingAccessor.getReferenceClassName(),imports);
            }
 else {
              String mapKeyType;
              if (annotatedElement.isGenericCollectionType()) {
                mapKeyType=annotatedElement.getGenericType().get(1);
              }
 else {
                if (mappingAccessor.getReferenceDescriptor().hasIdAccessor()) {
                  mapKeyType=mappingAccessor.getReferenceDescriptor().getIdAccessors().get(0).getAnnotatedElement().getType();
                }
 else {
                  mapKeyType=TypeVisitor.GENERIC_TYPE;
                }
              }
              types=types + ""String_Node_Str"" + getUnqualifiedType(mapKeyType,imports)+ ""String_Node_Str""+ getUnqualifiedType(mappingAccessor.getReferenceClassName(),imports);
            }
          }
 else {
            types=types + ""String_Node_Str"" + getUnqualifiedType(mappingAccessor.getReferenceClassName(),imports);
          }
        }
        attributes.add(""String_Node_Str"" + attributeType + ""String_Node_Str""+ types+ ""String_Node_Str""+ annotatedElement.getAttributeName()+ ""String_Node_Str"");
      }
    }
    String parent=writeImportStatements(imports,accessor,writer,persistenceUnit,canonicalpackage);
    writer.append(""String_Node_Str"" + new Date() + ""String_Node_Str"");
    writer.append(""String_Node_Str"" + className + ""String_Node_Str"");
    int modifier=accessor.getAccessibleObject().getModifiers();
    writer.append(java.lang.reflect.Modifier.toString(modifier) + ""String_Node_Str"" + canonicalName);
    if (parent == null) {
      writer.append(""String_Node_Str"");
    }
 else {
      writer.append(""String_Node_Str"" + parent + ""String_Node_Str"");
    }
    for (    String str : attributes) {
      writer.append(str);
    }
    writer.append(""String_Node_Str"");
  }
  finally {
    if (writer != null) {
      writer.flush();
      writer.close();
      writer=null;
    }
  }
}","/** 
 * INTERNAL:
 */
protected void generateCanonicalModelClass(Element element,PersistenceUnit persistenceUnit) throws IOException {
  Writer writer=null;
  try {
    ClassAccessor accessor=persistenceUnit.getClassAccessor(element);
    String qualifiedName=accessor.getAccessibleObjectName();
    String className=getName(qualifiedName);
    String classPackage=getPackage(qualifiedName);
    String qualifiedCanonicalName=persistenceUnit.getQualifiedCanonicalName(qualifiedName);
    String canonicalName=getName(qualifiedCanonicalName);
    String canonicalpackage=getPackage(qualifiedCanonicalName);
    JavaFileObject file=processingEnv.getFiler().createSourceFile(qualifiedCanonicalName,element);
    writer=file.openWriter();
    if (!canonicalpackage.equals(""String_Node_Str"")) {
      writer.append(""String_Node_Str"" + canonicalpackage + ""String_Node_Str"");
    }
    ArrayList<String> attributes=new ArrayList<String>();
    HashMap<String,String> imports=new HashMap<String,String>();
    if (!classPackage.equals(canonicalpackage)) {
      imports.put(className,qualifiedName);
    }
    for (    MappingAccessor mappingAccessor : accessor.getDescriptor().getAccessors()) {
      if (!mappingAccessor.isTransient()) {
        MetadataAnnotatedElement annotatedElement=mappingAccessor.getAnnotatedElement();
        MetadataClass rawClass=annotatedElement.getRawClass(mappingAccessor.getDescriptor());
        String attributeType;
        String types=className;
        if (mappingAccessor.isBasic()) {
          types=types + ""String_Node_Str"" + getUnqualifiedType(getBoxedType(annotatedElement),imports);
          attributeType=AttributeType.SingularAttribute.name();
          imports.put(attributeType,""String_Node_Str"");
        }
 else {
          if (rawClass.isList()) {
            attributeType=AttributeType.ListAttribute.name();
            imports.put(attributeType,""String_Node_Str"");
          }
 else           if (rawClass.isSet()) {
            attributeType=AttributeType.SetAttribute.name();
            imports.put(attributeType,""String_Node_Str"");
          }
 else           if (rawClass.isMap()) {
            attributeType=AttributeType.MapAttribute.name();
            imports.put(attributeType,""String_Node_Str"");
          }
 else           if (rawClass.isCollection()) {
            attributeType=AttributeType.CollectionAttribute.name();
            imports.put(attributeType,""String_Node_Str"");
          }
 else {
            attributeType=AttributeType.SingularAttribute.name();
            imports.put(attributeType,""String_Node_Str"");
          }
          if (mappingAccessor.isMapAccessor()) {
            if (mappingAccessor.isMappedKeyMapAccessor()) {
              MetadataClass mapKeyClass=((MappedKeyMapAccessor)mappingAccessor).getMapKeyClass();
              types=types + ""String_Node_Str"" + getUnqualifiedType(mapKeyClass.getName(),imports)+ ""String_Node_Str""+ getUnqualifiedType(mappingAccessor.getReferenceClassName(),imports);
            }
 else {
              String mapKeyType;
              if (annotatedElement.isGenericCollectionType()) {
                mapKeyType=annotatedElement.getGenericType().get(1);
              }
 else {
                if (mappingAccessor.getReferenceDescriptor().hasIdAccessor()) {
                  mapKeyType=mappingAccessor.getReferenceDescriptor().getIdAccessors().get(0).getAnnotatedElement().getType();
                }
 else {
                  mapKeyType=TypeVisitor.GENERIC_TYPE;
                }
              }
              types=types + ""String_Node_Str"" + getUnqualifiedType(mapKeyType,imports)+ ""String_Node_Str""+ getUnqualifiedType(mappingAccessor.getReferenceClassName(),imports);
            }
          }
 else {
            types=types + ""String_Node_Str"" + getUnqualifiedType(mappingAccessor.getReferenceClassName(),imports);
          }
        }
        attributes.add(""String_Node_Str"" + attributeType + ""String_Node_Str""+ types+ ""String_Node_Str""+ annotatedElement.getAttributeName()+ ""String_Node_Str"");
      }
    }
    String parent=writeImportStatements(imports,accessor,writer,persistenceUnit,canonicalpackage);
    writer.append(""String_Node_Str"" + Version.getVersion() + ""String_Node_Str""+ Version.getBuildDate()+ ""String_Node_Str""+ Version.getBuildRevision()+ ""String_Node_Str""+ new Date()+ ""String_Node_Str"");
    writer.append(""String_Node_Str"" + className + ""String_Node_Str"");
    int modifier=accessor.getAccessibleObject().getModifiers();
    writer.append(java.lang.reflect.Modifier.toString(modifier) + ""String_Node_Str"" + canonicalName);
    if (parent == null) {
      writer.append(""String_Node_Str"");
    }
 else {
      writer.append(""String_Node_Str"" + parent + ""String_Node_Str"");
    }
    for (    String str : attributes) {
      writer.append(str);
    }
    writer.append(""String_Node_Str"");
  }
  finally {
    if (writer != null) {
      writer.flush();
      writer.close();
      writer=null;
    }
  }
}"
66735,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  return suite;
}"
66736,"public HashMap<java.lang.reflect.Type,QName> getTypeToSchemaType(){
  HashMap<TypeMappingInfo,QName> typeMappingInfoToSchemaType=(HashMap)getTypeMappingInfoToSchemaType();
  HashMap<Type,QName> typeToSchemaTypeMap=new HashMap<Type,QName>(typeMappingInfoToSchemaType.size());
  java.util.Set<Entry<TypeMappingInfo,QName>> entrySet=typeMappingInfoToSchemaType.entrySet();
  for (  Entry<TypeMappingInfo,QName> entry : entrySet) {
    typeToSchemaTypeMap.put(entry.getKey().getType(),entry.getValue());
  }
  return typeToSchemaTypeMap;
}","public HashMap<java.lang.reflect.Type,QName> getTypeToSchemaType(){
  if (typeToSchemaType == null) {
    initTypeToSchemaType();
  }
  return typeToSchemaType;
}"
66737,"public Map<TypeMappingInfo,QName> getTypeMappingInfoToSchemaType(){
  if (typeMappingInfoToSchemaType == null) {
    initTypeToSchemaType();
  }
  return typeMappingInfoToSchemaType;
}","public Map<TypeMappingInfo,QName> getTypeMappingInfoToSchemaType(){
  if (typeMappingInfoToSchemaType == null) {
    initTypeMappingInfoToSchemaType();
  }
  return typeMappingInfoToSchemaType;
}"
66738,"public void initTypeToSchemaType(){
  this.typeMappingInfoToSchemaType=new HashMap<TypeMappingInfo,QName>();
  Iterator descriptors=xmlContext.getSession(0).getProject().getOrderedDescriptors().iterator();
  HashMap defaults=XMLConversionManager.getDefaultJavaTypes();
  while (descriptors.hasNext()) {
    XMLDescriptor next=(XMLDescriptor)descriptors.next();
    Class javaClass=next.getJavaClass();
    if (next.getSchemaReference() != null) {
      QName schemaType=next.getSchemaReference().getSchemaContextAsQName(next.getNamespaceResolver());
      Type type=null;
      TypeMappingInfo tmi=null;
      if (generator != null) {
        type=generator.getAnnotationsProcessor().getGeneratedClassesToCollectionClasses().get(javaClass);
        if (type == null) {
          JavaClass arrayClass=(JavaClass)generator.getAnnotationsProcessor().getGeneratedClassesToArrayClasses().get(javaClass);
          if (arrayClass != null) {
            String arrayClassName=arrayClass.getName();
            try {
              type=PrivilegedAccessHelper.getClassForName(arrayClassName);
            }
 catch (            Exception ex) {
            }
          }
          if (type == null && getTypeMappingInfoToGeneratedType() != null) {
            Iterator<Map.Entry<TypeMappingInfo,Class>> iter=getTypeMappingInfoToGeneratedType().entrySet().iterator();
            while (iter.hasNext()) {
              Map.Entry<TypeMappingInfo,Class> entry=iter.next();
              if (entry.getValue().equals(javaClass)) {
                tmi=entry.getKey();
                break;
              }
            }
          }
        }
        if (type == null) {
          type=javaClass;
        }
      }
 else {
        type=javaClass;
      }
      if (tmi == null && type != null) {
        tmi=new TypeMappingInfo();
        tmi.setType(type);
      }
      this.typeMappingInfoToSchemaType.put(tmi,schemaType);
    }
  }
  if (boundTypes != null) {
    for (    TypeMappingInfo next : this.boundTypes) {
      if (this.typeMappingInfoToSchemaType.get(next) == null) {
        Type nextType=next.getType();
        QName name=null;
        if (nextType instanceof Class) {
          name=this.generator.getAnnotationsProcessor().getUserDefinedSchemaTypes().get(((Class)nextType).getName());
        }
        if (name == null) {
          if (nextType == ClassConstants.ABYTE || nextType == ClassConstants.APBYTE) {
            name=XMLConstants.BASE_64_BINARY_QNAME;
          }
 else {
            name=(QName)defaults.get(next);
          }
        }
        if (name != null) {
          this.typeMappingInfoToSchemaType.put(next,name);
        }
      }
    }
  }
}","public void initTypeToSchemaType(){
  this.typeToSchemaType=new HashMap<Type,QName>();
  if (typeToTypeMappingInfo == null || typeToTypeMappingInfo.size() == 0) {
    return;
  }
  Iterator descriptors=xmlContext.getSession(0).getProject().getOrderedDescriptors().iterator();
  while (descriptors.hasNext()) {
    XMLDescriptor next=(XMLDescriptor)descriptors.next();
    Class javaClass=next.getJavaClass();
    if (next.getSchemaReference() != null) {
      QName schemaType=next.getSchemaReference().getSchemaContextAsQName(next.getNamespaceResolver());
      Type type=null;
      if (generator != null) {
        type=generator.getAnnotationsProcessor().getGeneratedClassesToCollectionClasses().get(javaClass);
        if (type == null) {
          JavaClass arrayClass=(JavaClass)generator.getAnnotationsProcessor().getGeneratedClassesToArrayClasses().get(javaClass);
          if (arrayClass != null) {
            String arrayClassName=arrayClass.getName();
            try {
              type=PrivilegedAccessHelper.getClassForName(arrayClassName);
            }
 catch (            Exception ex) {
            }
          }
          if (type == null && getTypeMappingInfoToGeneratedType() != null) {
            Iterator<Map.Entry<TypeMappingInfo,Class>> iter=getTypeMappingInfoToGeneratedType().entrySet().iterator();
            while (iter.hasNext()) {
              Map.Entry<TypeMappingInfo,Class> entry=iter.next();
              if (entry.getValue().equals(javaClass)) {
                type=entry.getKey().getType();
                break;
              }
            }
          }
        }
        if (type == null) {
          type=javaClass;
        }
      }
 else {
        type=javaClass;
      }
      this.typeToSchemaType.put(type,schemaType);
    }
  }
  if (boundTypes != null) {
    for (    TypeMappingInfo next : this.boundTypes) {
      if (this.typeToSchemaType.get(next) == null) {
        Type nextType=next.getType();
        QName name=getSchemaTypeForTypeMappingInfo(nextType);
        if (name != null) {
          this.typeToSchemaType.put(nextType,name);
        }
      }
    }
  }
}"
66739,"private void writeTypeAttribute(MarshalRecord marshalRecord,XMLDescriptor descriptor,String xsiPrefix){
  String typeValue=descriptor.getSchemaReference().getSchemaContext();
  if (typeValue == null) {
    QName contextAsQName=descriptor.getSchemaReference().getSchemaContextAsQName();
    if (contextAsQName == null) {
      return;
    }
    String uri=contextAsQName.getNamespaceURI();
    String localPart=contextAsQName.getLocalPart();
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(uri);
    if (prefix == null) {
      String defaultUri=marshalRecord.getNamespaceResolver().getDefaultNamespaceURI();
      if (defaultUri != null && defaultUri.equals(uri)) {
        typeValue=localPart;
      }
 else {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix();
        marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + XMLConstants.COLON + prefix,uri);
        typeValue=prefix + XMLConstants.COLON + localPart;
      }
    }
 else {
      typeValue=prefix + XMLConstants.COLON + localPart;
    }
  }
 else {
    typeValue=typeValue.substring(1);
  }
  marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
}","private void writeTypeAttribute(MarshalRecord marshalRecord,XMLDescriptor descriptor,String xsiPrefix){
  if (descriptor.getSchemaReference() == null) {
    return;
  }
  String typeValue=descriptor.getSchemaReference().getSchemaContext();
  if (typeValue == null) {
    QName contextAsQName=descriptor.getSchemaReference().getSchemaContextAsQName();
    if (contextAsQName == null) {
      return;
    }
    String uri=contextAsQName.getNamespaceURI();
    String localPart=contextAsQName.getLocalPart();
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(uri);
    if (prefix == null) {
      String defaultUri=marshalRecord.getNamespaceResolver().getDefaultNamespaceURI();
      if (defaultUri != null && defaultUri.equals(uri)) {
        typeValue=localPart;
      }
 else {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix();
        marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + XMLConstants.COLON + prefix,uri);
        typeValue=prefix + XMLConstants.COLON + localPart;
      }
    }
 else {
      typeValue=prefix + XMLConstants.COLON + localPart;
    }
  }
 else {
    typeValue=typeValue.substring(1);
  }
  marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
}"
66740,"private Class generateWrapperClassAndDescriptor(TypeInfo type,QName next,ElementDeclaration nextElement,String nextClassName,String attributeTypeName){
  String namespaceUri=null;
  if (next != null) {
    namespaceUri=next.getNamespaceURI();
    if (namespaceUri == null || namespaceUri.equals(""String_Node_Str"")) {
      namespaceUri=""String_Node_Str"";
    }
  }
  Class generatedClass=this.generateWrapperClass(WRAPPER_CLASS + wrapperCounter++,attributeTypeName,nextElement.isList(),next);
  this.qNamesToGeneratedClasses.put(next,generatedClass);
  try {
    Class declaredClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
    this.qNamesToDeclaredClasses.put(next,declaredClass);
  }
 catch (  Exception e) {
  }
  XMLDescriptor desc=new XMLDescriptor();
  desc.setJavaClass(generatedClass);
  if (nextElement.isList()) {
    XMLCompositeDirectCollectionMapping mapping=new XMLCompositeDirectCollectionMapping();
    mapping.setAttributeName(""String_Node_Str"");
    mapping.setXPath(""String_Node_Str"");
    mapping.setUsesSingleNode(true);
    mapping.setReuseContainer(true);
    if (type != null && type.isEnumerationType()) {
      mapping.setValueConverter(buildJAXBEnumTypeConverter(mapping,(EnumTypeInfo)type));
    }
 else {
      try {
        Class fieldElementClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
        mapping.setFieldElementClass(fieldElementClass);
      }
 catch (      ClassNotFoundException e) {
      }
    }
    if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
      ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    }
 else     if (nextClassName.equals(""String_Node_Str"")) {
      ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
    }
    desc.addMapping(mapping);
  }
 else {
    if (nextElement.getJavaTypeName().equals(OBJECT_CLASS_NAME)) {
      XMLCompositeObjectMapping mapping=new XMLCompositeObjectMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setSetMethodName(""String_Node_Str"");
      mapping.setGetMethodName(""String_Node_Str"");
      mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
      mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      mapping.setXPath(""String_Node_Str"");
      ((XMLField)mapping.getField()).setIsTypedTextField(true);
      ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
      desc.addMapping(mapping);
    }
 else     if (areEquals(nextElement.getJavaType(),ClassConstants.ABYTE) || areEquals(nextElement.getJavaType(),ClassConstants.APBYTE) || areEquals(nextElement.getJavaType(),""String_Node_Str"")) {
      XMLBinaryDataMapping mapping=new XMLBinaryDataMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
      mapping.setSetMethodName(""String_Node_Str"");
      mapping.setGetMethodName(""String_Node_Str"");
      Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(attributeTypeName,getClass().getClassLoader());
      mapping.setAttributeClassification(attributeClassification);
      mapping.setShouldInlineBinaryData(false);
      if (nextElement.getTypeMappingInfo() != null) {
        mapping.setSwaRef(nextElement.isXmlAttachmentRef());
        mapping.setMimeType(nextElement.getXmlMimeType());
      }
      desc.addMapping(mapping);
    }
 else {
      XMLDirectMapping mapping=new XMLDirectMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      mapping.setSetMethodName(""String_Node_Str"");
      mapping.setGetMethodName(""String_Node_Str"");
      if (nextElement.getDefaultValue() != null) {
        mapping.setNullValue(nextElement.getDefaultValue());
      }
      if (helper.isBuiltInJavaType(nextElement.getJavaType())) {
        Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(attributeTypeName,getClass().getClassLoader());
        mapping.setAttributeClassification(attributeClassification);
      }
      IsSetNullPolicy nullPolicy=new IsSetNullPolicy(""String_Node_Str"",false,true,XMLNullRepresentationType.ABSENT_NODE);
      mapping.setNullPolicy(nullPolicy);
      if (type != null && type.isEnumerationType()) {
        mapping.setConverter(buildJAXBEnumTypeConverter(mapping,(EnumTypeInfo)type));
      }
      if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
      }
 else       if (nextClassName.equals(""String_Node_Str"")) {
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
      }
      if (nextElement.getJavaTypeAdapterClass() != null) {
        mapping.setConverter(new XMLJavaTypeConverter(nextElement.getJavaTypeAdapterClass()));
      }
      desc.addMapping(mapping);
    }
  }
  if (next != null) {
    NamespaceInfo info=getNamespaceInfoForURI(namespaceUri);
    if (info != null) {
      NamespaceResolver resolver=info.getNamespaceResolverForDescriptor();
      String prefix=resolver.resolveNamespaceURI(namespaceUri);
      desc.setNamespaceResolver(resolver);
      desc.setDefaultRootElement(""String_Node_Str"");
      desc.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
    }
 else {
      if (namespaceUri.equals(""String_Node_Str"")) {
        desc.setDefaultRootElement(next.getLocalPart());
      }
 else {
        NamespaceResolver resolver=new NamespaceResolver();
        String prefix=getPrefixForNamespace(namespaceUri,resolver,null);
        desc.setNamespaceResolver(resolver);
        desc.setDefaultRootElement(""String_Node_Str"");
        desc.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
      }
    }
  }
  project.addDescriptor(desc);
  return generatedClass;
}","private Class generateWrapperClassAndDescriptor(TypeInfo type,QName next,ElementDeclaration nextElement,String nextClassName,String attributeTypeName){
  String namespaceUri=null;
  if (next != null) {
    namespaceUri=next.getNamespaceURI();
    if (namespaceUri == null || namespaceUri.equals(""String_Node_Str"")) {
      namespaceUri=""String_Node_Str"";
    }
  }
  Class generatedClass=this.generateWrapperClass(WRAPPER_CLASS + wrapperCounter++,attributeTypeName,nextElement.isList(),next);
  this.qNamesToGeneratedClasses.put(next,generatedClass);
  try {
    Class declaredClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
    this.qNamesToDeclaredClasses.put(next,declaredClass);
  }
 catch (  Exception e) {
  }
  XMLDescriptor desc=new XMLDescriptor();
  desc.setJavaClass(generatedClass);
  if (nextElement.isList()) {
    XMLCompositeDirectCollectionMapping mapping=new XMLCompositeDirectCollectionMapping();
    mapping.setAttributeName(""String_Node_Str"");
    mapping.setXPath(""String_Node_Str"");
    mapping.setUsesSingleNode(true);
    mapping.setReuseContainer(true);
    if (type != null && type.isEnumerationType()) {
      mapping.setValueConverter(buildJAXBEnumTypeConverter(mapping,(EnumTypeInfo)type));
    }
 else {
      try {
        Class fieldElementClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
        mapping.setFieldElementClass(fieldElementClass);
      }
 catch (      ClassNotFoundException e) {
      }
    }
    if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
      ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    }
 else     if (nextClassName.equals(""String_Node_Str"")) {
      ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
    }
    desc.addMapping(mapping);
  }
 else {
    if (nextElement.getJavaTypeName().equals(OBJECT_CLASS_NAME)) {
      XMLCompositeObjectMapping mapping=new XMLCompositeObjectMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setSetMethodName(""String_Node_Str"");
      mapping.setGetMethodName(""String_Node_Str"");
      mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
      mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      mapping.setXPath(""String_Node_Str"");
      ((XMLField)mapping.getField()).setIsTypedTextField(true);
      ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
      desc.addMapping(mapping);
    }
 else     if (areEquals(nextElement.getJavaType(),ClassConstants.ABYTE) || areEquals(nextElement.getJavaType(),ClassConstants.APBYTE) || areEquals(nextElement.getJavaType(),""String_Node_Str"")) {
      XMLBinaryDataMapping mapping=new XMLBinaryDataMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
      mapping.setSetMethodName(""String_Node_Str"");
      mapping.setGetMethodName(""String_Node_Str"");
      Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(attributeTypeName,getClass().getClassLoader());
      mapping.setAttributeClassification(attributeClassification);
      mapping.setShouldInlineBinaryData(false);
      if (nextElement.getTypeMappingInfo() != null) {
        mapping.setSwaRef(nextElement.isXmlAttachmentRef());
        mapping.setMimeType(nextElement.getXmlMimeType());
      }
      desc.addMapping(mapping);
    }
 else {
      XMLDirectMapping mapping=new XMLDirectMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      mapping.setSetMethodName(""String_Node_Str"");
      mapping.setGetMethodName(""String_Node_Str"");
      if (nextElement.getDefaultValue() != null) {
        mapping.setNullValue(nextElement.getDefaultValue());
      }
      if (helper.isBuiltInJavaType(nextElement.getJavaType())) {
        Class attributeClassification=null;
        if (nextElement.getJavaType().isPrimitive()) {
          attributeClassification=XMLConversionManager.getDefaultManager().convertClassNameToClass(attributeTypeName);
        }
 else {
          attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(attributeTypeName,getClass().getClassLoader());
        }
        mapping.setAttributeClassification(attributeClassification);
      }
      IsSetNullPolicy nullPolicy=new IsSetNullPolicy(""String_Node_Str"",false,true,XMLNullRepresentationType.ABSENT_NODE);
      mapping.setNullPolicy(nullPolicy);
      if (type != null && type.isEnumerationType()) {
        mapping.setConverter(buildJAXBEnumTypeConverter(mapping,(EnumTypeInfo)type));
      }
      if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
      }
 else       if (nextClassName.equals(""String_Node_Str"")) {
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
      }
      if (nextElement.getJavaTypeAdapterClass() != null) {
        mapping.setConverter(new XMLJavaTypeConverter(nextElement.getJavaTypeAdapterClass()));
      }
      desc.addMapping(mapping);
    }
  }
  if (next != null) {
    NamespaceInfo info=getNamespaceInfoForURI(namespaceUri);
    if (info != null) {
      NamespaceResolver resolver=info.getNamespaceResolverForDescriptor();
      String prefix=resolver.resolveNamespaceURI(namespaceUri);
      desc.setNamespaceResolver(resolver);
      desc.setDefaultRootElement(""String_Node_Str"");
      desc.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
    }
 else {
      if (namespaceUri.equals(""String_Node_Str"")) {
        desc.setDefaultRootElement(next.getLocalPart());
      }
 else {
        NamespaceResolver resolver=new NamespaceResolver();
        String prefix=getPrefixForNamespace(namespaceUri,resolver,null);
        desc.setNamespaceResolver(resolver);
        desc.setDefaultRootElement(""String_Node_Str"");
        desc.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
      }
    }
  }
  project.addDescriptor(desc);
  return generatedClass;
}"
66741,"public void processGlobalElements(Project project){
  if (this.globalElements == null) {
    return;
  }
  List<ElementDeclaration> elements=new ArrayList<ElementDeclaration>();
  elements.addAll(this.localElements);
  elements.addAll(this.globalElements.values());
  for (  ElementDeclaration nextElement : elements) {
    QName next=nextElement.getElementName();
    String nextClassName=nextElement.getJavaTypeName();
    TypeInfo type=this.typeInfo.get(nextClassName);
    if (helper.isBuiltInJavaType(nextElement.getJavaType()) || (type != null && type.isEnumerationType())) {
      String attributeTypeName=nextClassName;
      if (nextElement.getAdaptedJavaTypeName() != null) {
        attributeTypeName=nextElement.getAdaptedJavaTypeName();
      }
      if (next == null) {
        if (areEquals(nextElement.getJavaType(),ClassConstants.ABYTE) || areEquals(nextElement.getJavaType(),ClassConstants.APBYTE) || areEquals(nextElement.getJavaType(),""String_Node_Str"")) {
          Class generatedClass=addByteArrayWrapperAndDescriptor(type,nextElement.getJavaType().getRawName(),nextElement,nextClassName,attributeTypeName);
          this.qNamesToGeneratedClasses.put(next,generatedClass);
          if (nextElement.getTypeMappingInfo() != null) {
            typeMappingInfoToGeneratedClasses.put(nextElement.getTypeMappingInfo(),generatedClass);
          }
          try {
            Class declaredClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
            this.qNamesToDeclaredClasses.put(next,declaredClass);
          }
 catch (          Exception e) {
          }
          return;
        }
      }
      Class generatedClass=generateWrapperClassAndDescriptor(type,next,nextElement,nextClassName,attributeTypeName);
      this.qNamesToGeneratedClasses.put(next,generatedClass);
      if (nextElement.getTypeMappingInfo() != null) {
        typeMappingInfoToGeneratedClasses.put(nextElement.getTypeMappingInfo(),generatedClass);
      }
      try {
        Class declaredClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
        this.qNamesToDeclaredClasses.put(next,declaredClass);
      }
 catch (      Exception e) {
      }
    }
 else     if (type != null && !type.isTransient()) {
      if (next.getNamespaceURI() == null || next.getNamespaceURI().equals(""String_Node_Str"")) {
        type.getDescriptor().addRootElement(next.getLocalPart());
      }
 else {
        XMLDescriptor descriptor=type.getDescriptor();
        String uri=next.getNamespaceURI();
        String prefix=getPrefixForNamespace(uri,descriptor.getNamespaceResolver(),null);
        descriptor.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
      }
    }
  }
}","public void processGlobalElements(Project project){
  if (this.globalElements == null && this.localElements == null) {
    return;
  }
  List<ElementDeclaration> elements=new ArrayList<ElementDeclaration>();
  elements.addAll(this.localElements);
  elements.addAll(this.globalElements.values());
  for (  ElementDeclaration nextElement : elements) {
    QName next=nextElement.getElementName();
    String nextClassName=nextElement.getJavaTypeName();
    TypeInfo type=this.typeInfo.get(nextClassName);
    if (helper.isBuiltInJavaType(nextElement.getJavaType()) || (type != null && type.isEnumerationType())) {
      String attributeTypeName=nextClassName;
      if (nextElement.getJavaType().isPrimitive()) {
        attributeTypeName=helper.getClassForJavaClass(nextElement.getJavaType()).getName();
      }
      if (nextElement.getAdaptedJavaTypeName() != null) {
        attributeTypeName=nextElement.getAdaptedJavaTypeName();
      }
      if (next == null) {
        if (areEquals(nextElement.getJavaType(),ClassConstants.ABYTE) || areEquals(nextElement.getJavaType(),ClassConstants.APBYTE) || areEquals(nextElement.getJavaType(),""String_Node_Str"")) {
          Class generatedClass=addByteArrayWrapperAndDescriptor(type,nextElement.getJavaType().getRawName(),nextElement,nextClassName,attributeTypeName);
          this.qNamesToGeneratedClasses.put(next,generatedClass);
          if (nextElement.getTypeMappingInfo() != null) {
            typeMappingInfoToGeneratedClasses.put(nextElement.getTypeMappingInfo(),generatedClass);
          }
          try {
            Class declaredClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
            this.qNamesToDeclaredClasses.put(next,declaredClass);
          }
 catch (          Exception e) {
          }
          return;
        }
      }
      Class generatedClass=generateWrapperClassAndDescriptor(type,next,nextElement,nextClassName,attributeTypeName);
      this.qNamesToGeneratedClasses.put(next,generatedClass);
      if (nextElement.getTypeMappingInfo() != null) {
        typeMappingInfoToGeneratedClasses.put(nextElement.getTypeMappingInfo(),generatedClass);
      }
      try {
        Class declaredClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
        this.qNamesToDeclaredClasses.put(next,declaredClass);
      }
 catch (      Exception e) {
      }
    }
 else     if (type != null && !type.isTransient()) {
      if (next.getNamespaceURI() == null || next.getNamespaceURI().equals(""String_Node_Str"")) {
        type.getDescriptor().addRootElement(next.getLocalPart());
      }
 else {
        XMLDescriptor descriptor=type.getDescriptor();
        String uri=next.getNamespaceURI();
        String prefix=getPrefixForNamespace(uri,descriptor.getNamespaceResolver(),null);
        descriptor.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
      }
    }
  }
}"
66742,"/** 
 * Process XmlBindings on a per package basis for a given AnnotationsPorcessor instance.
 * @param annotationsProcessor
 */
public void processXML(AnnotationsProcessor annotationsProcessor,JavaModelInput jModelInput,TypeMappingInfo[] typeMappingInfos,JavaClass[] originalJavaClasses){
  this.jModelInput=jModelInput;
  this.aProcessor=annotationsProcessor;
  annotationsProcessor.init(originalJavaClasses,typeMappingInfos);
  Map<String,ArrayList<JavaClass>> pkgToClassMap=buildPackageToJavaClassMap();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    NamespaceInfo nsInfo=processXmlSchema(xmlBindings,packageName);
    if (nsInfo != null) {
      annotationsProcessor.addPackageToNamespaceMapping(packageName,nsInfo);
    }
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    Map<String,TypeInfo> typeInfoMap=annotationsProcessor.preBuildTypeInfo(javaClasses);
    nsInfo=annotationsProcessor.getPackageToNamespaceMappings().get(packageName);
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo info=typeInfoMap.get(javaType.getName());
        if (javaType.getXmlJavaTypeAdapter() != null) {
          info.setXmlJavaTypeAdapter(javaType.getXmlJavaTypeAdapter());
        }
        if (javaType.isSetXmlAccessorOrder()) {
          info.setXmlAccessOrder(javaType.getXmlAccessorOrder());
        }
 else         if (!info.isSetXmlAccessOrder()) {
          if (xmlBindings.isSetXmlAccessorOrder()) {
            info.setXmlAccessOrder(xmlBindings.getXmlAccessorOrder());
          }
 else {
            info.setXmlAccessOrder(nsInfo.getAccessOrder());
          }
        }
        if (javaType.isSetXmlAccessorType()) {
          info.setXmlAccessType(javaType.getXmlAccessorType());
        }
 else         if (!info.isSetXmlAccessType()) {
          if (xmlBindings.isSetXmlAccessorType()) {
            info.setXmlAccessType(xmlBindings.getXmlAccessorType());
          }
 else {
            info.setXmlAccessType(nsInfo.getAccessType());
          }
        }
        if (javaType.isSetXmlTransient()) {
          info.setXmlTransient(javaType.isXmlTransient());
        }
        if (javaType.getXmlRootElement() != null) {
          info.setXmlRootElement(javaType.getXmlRootElement());
        }
        if (javaType.getXmlSeeAlso() != null && javaType.getXmlSeeAlso().size() > 0) {
          info.setXmlSeeAlso(javaType.getXmlSeeAlso());
        }
        if (javaType.getXmlType() != null) {
          info.setXmlType(javaType.getXmlType());
        }
        if (javaType.getXmlCustomizer() != null) {
          info.setXmlCustomizer(javaType.getXmlCustomizer());
        }
      }
    }
    if (xmlBindings.getXmlJavaTypeAdapters() != null) {
      Map<String,TypeInfo> typeInfos=aProcessor.getTypeInfosForPackage(packageName);
      for (      TypeInfo tInfo : typeInfos.values()) {
        List<XmlJavaTypeAdapter> adapters=xmlBindings.getXmlJavaTypeAdapters().getXmlJavaTypeAdapter();
        for (        XmlJavaTypeAdapter xja : adapters) {
          JavaClass adapterClass=jModelInput.getJavaModel().getClass(xja.getValue());
          JavaClass boundType=jModelInput.getJavaModel().getClass(xja.getType());
          if (boundType != null) {
            tInfo.addPackageLevelAdapterClass(adapterClass,boundType);
          }
        }
      }
    }
    javaClasses=annotationsProcessor.postBuildTypeInfo(javaClasses);
    annotationsProcessor.processJavaClasses(javaClasses);
    Map<String,TypeInfo> typeInfosForPackage=annotationsProcessor.getTypeInfosForPackage(packageName);
    jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo typeInfo=typeInfosForPackage.get(javaType.getName());
        if (javaType != null) {
          processJavaType(javaType,typeInfo,nsInfo);
        }
      }
    }
    pkgToClassMap.remove(packageName);
  }
  Iterator<ArrayList<JavaClass>> classIt=pkgToClassMap.values().iterator();
  while (classIt.hasNext()) {
    ArrayList<JavaClass> jClassList=classIt.next();
    JavaClass[] jClassArray=(JavaClass[])jClassList.toArray(new JavaClass[jClassList.size()]);
    annotationsProcessor.buildNewTypeInfo(jClassArray);
    annotationsProcessor.processJavaClasses(jClassArray);
  }
  Map<String,TypeInfo> typeInfos=(Map<String,TypeInfo>)aProcessor.getTypeInfo().clone();
  for (  String key : typeInfos.keySet()) {
    JavaClass[] jClassArray;
    TypeInfo tInfo=typeInfos.get(key);
    for (    Property prop : tInfo.getPropertyList()) {
      if (prop.isSetXmlJavaTypeAdapter()) {
        jClassArray=new JavaClass[]{prop.getActualType()};
        aProcessor.buildNewTypeInfo(jClassArray);
      }
    }
  }
  aProcessor.finalizeProperties();
}","/** 
 * Process XmlBindings on a per package basis for a given AnnotationsPorcessor instance.
 * @param annotationsProcessor
 */
public void processXML(AnnotationsProcessor annotationsProcessor,JavaModelInput jModelInput,TypeMappingInfo[] typeMappingInfos,JavaClass[] originalJavaClasses){
  this.jModelInput=jModelInput;
  this.aProcessor=annotationsProcessor;
  annotationsProcessor.init(originalJavaClasses,typeMappingInfos);
  Map<String,ArrayList<JavaClass>> pkgToClassMap=buildPackageToJavaClassMap();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    NamespaceInfo nsInfo=processXmlSchema(xmlBindings,packageName);
    if (nsInfo != null) {
      annotationsProcessor.addPackageToNamespaceMapping(packageName,nsInfo);
    }
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    Map<String,TypeInfo> typeInfoMap=annotationsProcessor.preBuildTypeInfo(javaClasses);
    nsInfo=annotationsProcessor.getPackageToNamespaceMappings().get(packageName);
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo info=typeInfoMap.get(javaType.getName());
        if (javaType.getXmlJavaTypeAdapter() != null) {
          info.setXmlJavaTypeAdapter(javaType.getXmlJavaTypeAdapter());
        }
        if (javaType.isSetXmlAccessorOrder()) {
          info.setXmlAccessOrder(javaType.getXmlAccessorOrder());
        }
 else         if (!info.isSetXmlAccessOrder()) {
          if (xmlBindings.isSetXmlAccessorOrder()) {
            info.setXmlAccessOrder(xmlBindings.getXmlAccessorOrder());
          }
 else {
            info.setXmlAccessOrder(nsInfo.getAccessOrder());
          }
        }
        if (javaType.isSetXmlAccessorType()) {
          info.setXmlAccessType(javaType.getXmlAccessorType());
        }
 else         if (!info.isSetXmlAccessType()) {
          if (xmlBindings.isSetXmlAccessorType()) {
            info.setXmlAccessType(xmlBindings.getXmlAccessorType());
          }
 else {
            info.setXmlAccessType(nsInfo.getAccessType());
          }
        }
        if (javaType.isSetXmlTransient()) {
          info.setXmlTransient(javaType.isXmlTransient());
        }
        if (javaType.getXmlRootElement() != null) {
          info.setXmlRootElement(javaType.getXmlRootElement());
        }
        if (javaType.getXmlSeeAlso() != null && javaType.getXmlSeeAlso().size() > 0) {
          info.setXmlSeeAlso(javaType.getXmlSeeAlso());
        }
        if (javaType.getXmlType() != null) {
          info.setXmlType(javaType.getXmlType());
        }
        if (javaType.getXmlCustomizer() != null) {
          info.setXmlCustomizer(javaType.getXmlCustomizer());
        }
      }
    }
    if (xmlBindings.getXmlJavaTypeAdapters() != null) {
      Map<String,TypeInfo> typeInfos=aProcessor.getTypeInfosForPackage(packageName);
      for (      TypeInfo tInfo : typeInfos.values()) {
        List<XmlJavaTypeAdapter> adapters=xmlBindings.getXmlJavaTypeAdapters().getXmlJavaTypeAdapter();
        for (        XmlJavaTypeAdapter xja : adapters) {
          JavaClass adapterClass=jModelInput.getJavaModel().getClass(xja.getValue());
          JavaClass boundType=jModelInput.getJavaModel().getClass(xja.getType());
          if (boundType != null) {
            tInfo.addPackageLevelAdapterClass(adapterClass,boundType);
          }
        }
      }
    }
    javaClasses=annotationsProcessor.postBuildTypeInfo(javaClasses);
    annotationsProcessor.processJavaClasses(javaClasses);
    Map<String,TypeInfo> typeInfosForPackage=annotationsProcessor.getTypeInfosForPackage(packageName);
    jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo typeInfo=typeInfosForPackage.get(javaType.getName());
        if (javaType != null) {
          processJavaType(javaType,typeInfo,nsInfo);
        }
      }
    }
    pkgToClassMap.remove(packageName);
  }
  Iterator<ArrayList<JavaClass>> classIt=pkgToClassMap.values().iterator();
  while (classIt.hasNext()) {
    ArrayList<JavaClass> jClassList=classIt.next();
    JavaClass[] jClassArray=(JavaClass[])jClassList.toArray(new JavaClass[jClassList.size()]);
    annotationsProcessor.buildNewTypeInfo(jClassArray);
    annotationsProcessor.processJavaClasses(jClassArray);
  }
  Map<String,TypeInfo> typeInfos=(Map<String,TypeInfo>)aProcessor.getTypeInfo().clone();
  for (  String key : typeInfos.keySet()) {
    JavaClass[] jClassArray;
    TypeInfo tInfo=typeInfos.get(key);
    for (    Property prop : tInfo.getPropertyList()) {
      if (prop.isSetXmlJavaTypeAdapter()) {
        jClassArray=new JavaClass[]{prop.getActualType()};
        aProcessor.buildNewTypeInfo(jClassArray);
      }
    }
  }
  aProcessor.finalizeProperties();
  aProcessor.createElementsForTypeMappingInfo();
}"
66743,"public TableDefinition buildBRANCHB_LEAFBTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldLEAFB_ID=new FieldDefinition();
  fieldLEAFB_ID.setName(""String_Node_Str"");
  fieldLEAFB_ID.setTypeName(""String_Node_Str"");
  fieldLEAFB_ID.setSize(0);
  fieldLEAFB_ID.setSubSize(0);
  fieldLEAFB_ID.setIsPrimaryKey(true);
  fieldLEAFB_ID.setIsIdentity(false);
  fieldLEAFB_ID.setUnique(false);
  fieldLEAFB_ID.setShouldAllowNull(true);
  table.addField(fieldLEAFB_ID);
  FieldDefinition fieldBRANCHB_ID=new FieldDefinition();
  fieldBRANCHB_ID.setName(""String_Node_Str"");
  fieldBRANCHB_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHB_ID.setSize(0);
  fieldBRANCHB_ID.setSubSize(0);
  fieldBRANCHB_ID.setIsPrimaryKey(true);
  fieldBRANCHB_ID.setIsIdentity(false);
  fieldBRANCHB_ID.setUnique(false);
  fieldBRANCHB_ID.setShouldAllowNull(true);
  table.addField(fieldBRANCHB_ID);
  ForeignKeyConstraint foreignKeyBRANCHB_LEAFB_LEAFB=new ForeignKeyConstraint();
  foreignKeyBRANCHB_LEAFB_LEAFB.setName(""String_Node_Str"");
  foreignKeyBRANCHB_LEAFB_LEAFB.setTargetTable(""String_Node_Str"");
  foreignKeyBRANCHB_LEAFB_LEAFB.addSourceField(""String_Node_Str"");
  foreignKeyBRANCHB_LEAFB_LEAFB.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyBRANCHB_LEAFB_LEAFB);
  ForeignKeyConstraint foreignKeyBRANCHB_LEAFB_BRANCHB2=new ForeignKeyConstraint();
  foreignKeyBRANCHB_LEAFB_BRANCHB2.setName(""String_Node_Str"");
  foreignKeyBRANCHB_LEAFB_BRANCHB2.setTargetTable(""String_Node_Str"");
  foreignKeyBRANCHB_LEAFB_BRANCHB2.addSourceField(""String_Node_Str"");
  foreignKeyBRANCHB_LEAFB_BRANCHB2.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyBRANCHB_LEAFB_BRANCHB2);
  return table;
}","public TableDefinition buildBRANCHB_LEAFBTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldLEAFB_ID=new FieldDefinition();
  fieldLEAFB_ID.setName(""String_Node_Str"");
  fieldLEAFB_ID.setTypeName(""String_Node_Str"");
  fieldLEAFB_ID.setSize(0);
  fieldLEAFB_ID.setSubSize(0);
  fieldLEAFB_ID.setIsPrimaryKey(true);
  fieldLEAFB_ID.setIsIdentity(false);
  fieldLEAFB_ID.setUnique(false);
  fieldLEAFB_ID.setShouldAllowNull(false);
  table.addField(fieldLEAFB_ID);
  FieldDefinition fieldBRANCHB_ID=new FieldDefinition();
  fieldBRANCHB_ID.setName(""String_Node_Str"");
  fieldBRANCHB_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHB_ID.setSize(0);
  fieldBRANCHB_ID.setSubSize(0);
  fieldBRANCHB_ID.setIsPrimaryKey(true);
  fieldBRANCHB_ID.setIsIdentity(false);
  fieldBRANCHB_ID.setUnique(false);
  fieldBRANCHB_ID.setShouldAllowNull(false);
  table.addField(fieldBRANCHB_ID);
  ForeignKeyConstraint foreignKeyBRANCHB_LEAFB_LEAFB=new ForeignKeyConstraint();
  foreignKeyBRANCHB_LEAFB_LEAFB.setName(""String_Node_Str"");
  foreignKeyBRANCHB_LEAFB_LEAFB.setTargetTable(""String_Node_Str"");
  foreignKeyBRANCHB_LEAFB_LEAFB.addSourceField(""String_Node_Str"");
  foreignKeyBRANCHB_LEAFB_LEAFB.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyBRANCHB_LEAFB_LEAFB);
  ForeignKeyConstraint foreignKeyBRANCHB_LEAFB_BRANCHB2=new ForeignKeyConstraint();
  foreignKeyBRANCHB_LEAFB_BRANCHB2.setName(""String_Node_Str"");
  foreignKeyBRANCHB_LEAFB_BRANCHB2.setTargetTable(""String_Node_Str"");
  foreignKeyBRANCHB_LEAFB_BRANCHB2.addSourceField(""String_Node_Str"");
  foreignKeyBRANCHB_LEAFB_BRANCHB2.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyBRANCHB_LEAFB_BRANCHB2);
  return table;
}"
66744,"public TableDefinition buildROOTA_BRANCHATable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldBRANCHA_ID=new FieldDefinition();
  fieldBRANCHA_ID.setName(""String_Node_Str"");
  fieldBRANCHA_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHA_ID.setSize(0);
  fieldBRANCHA_ID.setSubSize(0);
  fieldBRANCHA_ID.setIsPrimaryKey(true);
  fieldBRANCHA_ID.setIsIdentity(false);
  fieldBRANCHA_ID.setUnique(false);
  fieldBRANCHA_ID.setShouldAllowNull(true);
  table.addField(fieldBRANCHA_ID);
  FieldDefinition fieldROOTA_ID=new FieldDefinition();
  fieldROOTA_ID.setName(""String_Node_Str"");
  fieldROOTA_ID.setTypeName(""String_Node_Str"");
  fieldROOTA_ID.setSize(0);
  fieldROOTA_ID.setSubSize(0);
  fieldROOTA_ID.setIsPrimaryKey(true);
  fieldROOTA_ID.setIsIdentity(false);
  fieldROOTA_ID.setUnique(false);
  fieldROOTA_ID.setShouldAllowNull(true);
  table.addField(fieldROOTA_ID);
  ForeignKeyConstraint foreignKeyROOTA_BRANCHA_BRANCHA=new ForeignKeyConstraint();
  foreignKeyROOTA_BRANCHA_BRANCHA.setName(""String_Node_Str"");
  foreignKeyROOTA_BRANCHA_BRANCHA.setTargetTable(""String_Node_Str"");
  foreignKeyROOTA_BRANCHA_BRANCHA.addSourceField(""String_Node_Str"");
  foreignKeyROOTA_BRANCHA_BRANCHA.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyROOTA_BRANCHA_BRANCHA);
  ForeignKeyConstraint foreignKeyROOTA_BRANCHA_ROOTA=new ForeignKeyConstraint();
  foreignKeyROOTA_BRANCHA_ROOTA.setName(""String_Node_Str"");
  foreignKeyROOTA_BRANCHA_ROOTA.setTargetTable(""String_Node_Str"");
  foreignKeyROOTA_BRANCHA_ROOTA.addSourceField(""String_Node_Str"");
  foreignKeyROOTA_BRANCHA_ROOTA.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyROOTA_BRANCHA_ROOTA);
  return table;
}","public TableDefinition buildROOTA_BRANCHATable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldBRANCHA_ID=new FieldDefinition();
  fieldBRANCHA_ID.setName(""String_Node_Str"");
  fieldBRANCHA_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHA_ID.setSize(0);
  fieldBRANCHA_ID.setSubSize(0);
  fieldBRANCHA_ID.setIsPrimaryKey(true);
  fieldBRANCHA_ID.setIsIdentity(false);
  fieldBRANCHA_ID.setUnique(false);
  fieldBRANCHA_ID.setShouldAllowNull(false);
  table.addField(fieldBRANCHA_ID);
  FieldDefinition fieldROOTA_ID=new FieldDefinition();
  fieldROOTA_ID.setName(""String_Node_Str"");
  fieldROOTA_ID.setTypeName(""String_Node_Str"");
  fieldROOTA_ID.setSize(0);
  fieldROOTA_ID.setSubSize(0);
  fieldROOTA_ID.setIsPrimaryKey(true);
  fieldROOTA_ID.setIsIdentity(false);
  fieldROOTA_ID.setUnique(false);
  fieldROOTA_ID.setShouldAllowNull(false);
  table.addField(fieldROOTA_ID);
  ForeignKeyConstraint foreignKeyROOTA_BRANCHA_BRANCHA=new ForeignKeyConstraint();
  foreignKeyROOTA_BRANCHA_BRANCHA.setName(""String_Node_Str"");
  foreignKeyROOTA_BRANCHA_BRANCHA.setTargetTable(""String_Node_Str"");
  foreignKeyROOTA_BRANCHA_BRANCHA.addSourceField(""String_Node_Str"");
  foreignKeyROOTA_BRANCHA_BRANCHA.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyROOTA_BRANCHA_BRANCHA);
  ForeignKeyConstraint foreignKeyROOTA_BRANCHA_ROOTA=new ForeignKeyConstraint();
  foreignKeyROOTA_BRANCHA_ROOTA.setName(""String_Node_Str"");
  foreignKeyROOTA_BRANCHA_ROOTA.setTargetTable(""String_Node_Str"");
  foreignKeyROOTA_BRANCHA_ROOTA.addSourceField(""String_Node_Str"");
  foreignKeyROOTA_BRANCHA_ROOTA.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyROOTA_BRANCHA_ROOTA);
  return table;
}"
66745,"public TableDefinition buildMACHINESTATE_THREADINFOTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldBRANCHB_ID=new FieldDefinition();
  fieldBRANCHB_ID.setName(""String_Node_Str"");
  fieldBRANCHB_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHB_ID.setSize(0);
  fieldBRANCHB_ID.setSubSize(0);
  fieldBRANCHB_ID.setIsPrimaryKey(true);
  fieldBRANCHB_ID.setIsIdentity(false);
  fieldBRANCHB_ID.setUnique(false);
  fieldBRANCHB_ID.setShouldAllowNull(true);
  table.addField(fieldBRANCHB_ID);
  FieldDefinition fieldBRANCHBS_ID=new FieldDefinition();
  fieldBRANCHBS_ID.setName(""String_Node_Str"");
  fieldBRANCHBS_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHBS_ID.setSize(0);
  fieldBRANCHBS_ID.setSubSize(0);
  fieldBRANCHBS_ID.setIsPrimaryKey(true);
  fieldBRANCHBS_ID.setIsIdentity(false);
  fieldBRANCHBS_ID.setUnique(false);
  fieldBRANCHBS_ID.setShouldAllowNull(true);
  table.addField(fieldBRANCHBS_ID);
  ForeignKeyConstraint foreignKeyM_THREADINFO_THREADINFO=new ForeignKeyConstraint();
  foreignKeyM_THREADINFO_THREADINFO.setName(""String_Node_Str"");
  foreignKeyM_THREADINFO_THREADINFO.setTargetTable(""String_Node_Str"");
  foreignKeyM_THREADINFO_THREADINFO.addSourceField(""String_Node_Str"");
  foreignKeyM_THREADINFO_THREADINFO.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyM_THREADINFO_THREADINFO);
  ForeignKeyConstraint foreignKeyM_THREADINFO_MACHINESTATE=new ForeignKeyConstraint();
  foreignKeyM_THREADINFO_MACHINESTATE.setName(""String_Node_Str"");
  foreignKeyM_THREADINFO_MACHINESTATE.setTargetTable(""String_Node_Str"");
  foreignKeyM_THREADINFO_MACHINESTATE.addSourceField(""String_Node_Str"");
  foreignKeyM_THREADINFO_MACHINESTATE.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyM_THREADINFO_MACHINESTATE);
  return table;
}","public TableDefinition buildMACHINESTATE_THREADINFOTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldBRANCHB_ID=new FieldDefinition();
  fieldBRANCHB_ID.setName(""String_Node_Str"");
  fieldBRANCHB_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHB_ID.setSize(0);
  fieldBRANCHB_ID.setSubSize(0);
  fieldBRANCHB_ID.setIsPrimaryKey(true);
  fieldBRANCHB_ID.setIsIdentity(false);
  fieldBRANCHB_ID.setUnique(false);
  fieldBRANCHB_ID.setShouldAllowNull(false);
  table.addField(fieldBRANCHB_ID);
  FieldDefinition fieldBRANCHBS_ID=new FieldDefinition();
  fieldBRANCHBS_ID.setName(""String_Node_Str"");
  fieldBRANCHBS_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHBS_ID.setSize(0);
  fieldBRANCHBS_ID.setSubSize(0);
  fieldBRANCHBS_ID.setIsPrimaryKey(true);
  fieldBRANCHBS_ID.setIsIdentity(false);
  fieldBRANCHBS_ID.setUnique(false);
  fieldBRANCHBS_ID.setShouldAllowNull(false);
  table.addField(fieldBRANCHBS_ID);
  ForeignKeyConstraint foreignKeyM_THREADINFO_THREADINFO=new ForeignKeyConstraint();
  foreignKeyM_THREADINFO_THREADINFO.setName(""String_Node_Str"");
  foreignKeyM_THREADINFO_THREADINFO.setTargetTable(""String_Node_Str"");
  foreignKeyM_THREADINFO_THREADINFO.addSourceField(""String_Node_Str"");
  foreignKeyM_THREADINFO_THREADINFO.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyM_THREADINFO_THREADINFO);
  ForeignKeyConstraint foreignKeyM_THREADINFO_MACHINESTATE=new ForeignKeyConstraint();
  foreignKeyM_THREADINFO_MACHINESTATE.setName(""String_Node_Str"");
  foreignKeyM_THREADINFO_MACHINESTATE.setTargetTable(""String_Node_Str"");
  foreignKeyM_THREADINFO_MACHINESTATE.addSourceField(""String_Node_Str"");
  foreignKeyM_THREADINFO_MACHINESTATE.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyM_THREADINFO_MACHINESTATE);
  return table;
}"
66746,"public TableDefinition buildBRANCHB_BRANCHBTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldBRANCHB_ID=new FieldDefinition();
  fieldBRANCHB_ID.setName(""String_Node_Str"");
  fieldBRANCHB_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHB_ID.setSize(0);
  fieldBRANCHB_ID.setSubSize(0);
  fieldBRANCHB_ID.setIsPrimaryKey(true);
  fieldBRANCHB_ID.setIsIdentity(false);
  fieldBRANCHB_ID.setUnique(false);
  fieldBRANCHB_ID.setShouldAllowNull(true);
  table.addField(fieldBRANCHB_ID);
  FieldDefinition fieldBRANCHBS_ID=new FieldDefinition();
  fieldBRANCHBS_ID.setName(""String_Node_Str"");
  fieldBRANCHBS_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHBS_ID.setSize(0);
  fieldBRANCHBS_ID.setSubSize(0);
  fieldBRANCHBS_ID.setIsPrimaryKey(true);
  fieldBRANCHBS_ID.setIsIdentity(false);
  fieldBRANCHBS_ID.setUnique(false);
  fieldBRANCHBS_ID.setShouldAllowNull(true);
  table.addField(fieldBRANCHBS_ID);
  ForeignKeyConstraint foreignKeyBRANCHB_BRANCHB_BRANCHB=new ForeignKeyConstraint();
  foreignKeyBRANCHB_BRANCHB_BRANCHB.setName(""String_Node_Str"");
  foreignKeyBRANCHB_BRANCHB_BRANCHB.setTargetTable(""String_Node_Str"");
  foreignKeyBRANCHB_BRANCHB_BRANCHB.addSourceField(""String_Node_Str"");
  foreignKeyBRANCHB_BRANCHB_BRANCHB.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyBRANCHB_BRANCHB_BRANCHB);
  ForeignKeyConstraint foreignKeyBRANCHB_BRANCHB_BRANCHB2=new ForeignKeyConstraint();
  foreignKeyBRANCHB_BRANCHB_BRANCHB2.setName(""String_Node_Str"");
  foreignKeyBRANCHB_BRANCHB_BRANCHB2.setTargetTable(""String_Node_Str"");
  foreignKeyBRANCHB_BRANCHB_BRANCHB2.addSourceField(""String_Node_Str"");
  foreignKeyBRANCHB_BRANCHB_BRANCHB2.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyBRANCHB_BRANCHB_BRANCHB2);
  return table;
}","public TableDefinition buildBRANCHB_BRANCHBTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldBRANCHB_ID=new FieldDefinition();
  fieldBRANCHB_ID.setName(""String_Node_Str"");
  fieldBRANCHB_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHB_ID.setSize(0);
  fieldBRANCHB_ID.setSubSize(0);
  fieldBRANCHB_ID.setIsPrimaryKey(true);
  fieldBRANCHB_ID.setIsIdentity(false);
  fieldBRANCHB_ID.setUnique(false);
  fieldBRANCHB_ID.setShouldAllowNull(false);
  table.addField(fieldBRANCHB_ID);
  FieldDefinition fieldBRANCHBS_ID=new FieldDefinition();
  fieldBRANCHBS_ID.setName(""String_Node_Str"");
  fieldBRANCHBS_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHBS_ID.setSize(0);
  fieldBRANCHBS_ID.setSubSize(0);
  fieldBRANCHBS_ID.setIsPrimaryKey(true);
  fieldBRANCHBS_ID.setIsIdentity(false);
  fieldBRANCHBS_ID.setUnique(false);
  fieldBRANCHBS_ID.setShouldAllowNull(false);
  table.addField(fieldBRANCHBS_ID);
  ForeignKeyConstraint foreignKeyBRANCHB_BRANCHB_BRANCHB=new ForeignKeyConstraint();
  foreignKeyBRANCHB_BRANCHB_BRANCHB.setName(""String_Node_Str"");
  foreignKeyBRANCHB_BRANCHB_BRANCHB.setTargetTable(""String_Node_Str"");
  foreignKeyBRANCHB_BRANCHB_BRANCHB.addSourceField(""String_Node_Str"");
  foreignKeyBRANCHB_BRANCHB_BRANCHB.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyBRANCHB_BRANCHB_BRANCHB);
  ForeignKeyConstraint foreignKeyBRANCHB_BRANCHB_BRANCHB2=new ForeignKeyConstraint();
  foreignKeyBRANCHB_BRANCHB_BRANCHB2.setName(""String_Node_Str"");
  foreignKeyBRANCHB_BRANCHB_BRANCHB2.setTargetTable(""String_Node_Str"");
  foreignKeyBRANCHB_BRANCHB_BRANCHB2.addSourceField(""String_Node_Str"");
  foreignKeyBRANCHB_BRANCHB_BRANCHB2.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyBRANCHB_BRANCHB_BRANCHB2);
  return table;
}"
66747,"public TableDefinition buildBRANCHA_LEAFATable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldLEAFB_ID=new FieldDefinition();
  fieldLEAFB_ID.setName(""String_Node_Str"");
  fieldLEAFB_ID.setTypeName(""String_Node_Str"");
  fieldLEAFB_ID.setSize(0);
  fieldLEAFB_ID.setSubSize(0);
  fieldLEAFB_ID.setIsPrimaryKey(true);
  fieldLEAFB_ID.setIsIdentity(false);
  fieldLEAFB_ID.setUnique(false);
  fieldLEAFB_ID.setShouldAllowNull(true);
  table.addField(fieldLEAFB_ID);
  FieldDefinition fieldBRANCHB_ID=new FieldDefinition();
  fieldBRANCHB_ID.setName(""String_Node_Str"");
  fieldBRANCHB_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHB_ID.setSize(0);
  fieldBRANCHB_ID.setSubSize(0);
  fieldBRANCHB_ID.setIsPrimaryKey(true);
  fieldBRANCHB_ID.setIsIdentity(false);
  fieldBRANCHB_ID.setUnique(false);
  fieldBRANCHB_ID.setShouldAllowNull(true);
  table.addField(fieldBRANCHB_ID);
  ForeignKeyConstraint foreignKeyBRANCHA_LEAFA_LEAFA=new ForeignKeyConstraint();
  foreignKeyBRANCHA_LEAFA_LEAFA.setName(""String_Node_Str"");
  foreignKeyBRANCHA_LEAFA_LEAFA.setTargetTable(""String_Node_Str"");
  foreignKeyBRANCHA_LEAFA_LEAFA.addSourceField(""String_Node_Str"");
  foreignKeyBRANCHA_LEAFA_LEAFA.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyBRANCHA_LEAFA_LEAFA);
  ForeignKeyConstraint foreignKeyBRANCHA_LEAFA_BRANCHA2=new ForeignKeyConstraint();
  foreignKeyBRANCHA_LEAFA_BRANCHA2.setName(""String_Node_Str"");
  foreignKeyBRANCHA_LEAFA_BRANCHA2.setTargetTable(""String_Node_Str"");
  foreignKeyBRANCHA_LEAFA_BRANCHA2.addSourceField(""String_Node_Str"");
  foreignKeyBRANCHA_LEAFA_BRANCHA2.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyBRANCHA_LEAFA_BRANCHA2);
  return table;
}","public TableDefinition buildBRANCHA_LEAFATable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldLEAFB_ID=new FieldDefinition();
  fieldLEAFB_ID.setName(""String_Node_Str"");
  fieldLEAFB_ID.setTypeName(""String_Node_Str"");
  fieldLEAFB_ID.setSize(0);
  fieldLEAFB_ID.setSubSize(0);
  fieldLEAFB_ID.setIsPrimaryKey(true);
  fieldLEAFB_ID.setIsIdentity(false);
  fieldLEAFB_ID.setUnique(false);
  fieldLEAFB_ID.setShouldAllowNull(false);
  table.addField(fieldLEAFB_ID);
  FieldDefinition fieldBRANCHB_ID=new FieldDefinition();
  fieldBRANCHB_ID.setName(""String_Node_Str"");
  fieldBRANCHB_ID.setTypeName(""String_Node_Str"");
  fieldBRANCHB_ID.setSize(0);
  fieldBRANCHB_ID.setSubSize(0);
  fieldBRANCHB_ID.setIsPrimaryKey(true);
  fieldBRANCHB_ID.setIsIdentity(false);
  fieldBRANCHB_ID.setUnique(false);
  fieldBRANCHB_ID.setShouldAllowNull(false);
  table.addField(fieldBRANCHB_ID);
  ForeignKeyConstraint foreignKeyBRANCHA_LEAFA_LEAFA=new ForeignKeyConstraint();
  foreignKeyBRANCHA_LEAFA_LEAFA.setName(""String_Node_Str"");
  foreignKeyBRANCHA_LEAFA_LEAFA.setTargetTable(""String_Node_Str"");
  foreignKeyBRANCHA_LEAFA_LEAFA.addSourceField(""String_Node_Str"");
  foreignKeyBRANCHA_LEAFA_LEAFA.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyBRANCHA_LEAFA_LEAFA);
  ForeignKeyConstraint foreignKeyBRANCHA_LEAFA_BRANCHA2=new ForeignKeyConstraint();
  foreignKeyBRANCHA_LEAFA_BRANCHA2.setName(""String_Node_Str"");
  foreignKeyBRANCHA_LEAFA_BRANCHA2.setTargetTable(""String_Node_Str"");
  foreignKeyBRANCHA_LEAFA_BRANCHA2.addSourceField(""String_Node_Str"");
  foreignKeyBRANCHA_LEAFA_BRANCHA2.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyBRANCHA_LEAFA_BRANCHA2);
  return table;
}"
66748,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(JAXBBigDecimalStackTestCases.class);
  suite.addTestSuite(JAXBEmployeeArrayTestCases.class);
  suite.addTestSuite(JAXBEmployeeListTestCases.class);
  suite.addTestSuite(JAXBIntegerArrayTestCases.class);
  suite.addTestSuite(JAXBIntegerListTestCases.class);
  suite.addTestSuite(JAXBIntegerMyListTestCases.class);
  suite.addTestSuite(JAXBIntegerLinkedListTestCases.class);
  suite.addTestSuite(JAXBIntArrayTestCases.class);
  suite.addTestSuite(JAXBCharArrayTestCases.class);
  suite.addTestSuite(JAXBBooleanArrayTestCases.class);
  suite.addTestSuite(JAXBListNameCollisionEmployeeTestCases.class);
  suite.addTestSuite(JAXBListNameCollisionEmployee2TestCases.class);
  suite.addTestSuite(JAXBEmployeesAndIntegersTestCases.class);
  suite.addTestSuite(JAXBStringIntegerHashMapTestCases.class);
  suite.addTestSuite(JAXBStringEmployeeMapTestCases.class);
  suite.addTestSuite(JAXBStringEmployeeHashtableTestCases.class);
  suite.addTestSuite(JAXBListOfObjectsNonRootTestCases.class);
  suite.addTestSuite(JAXBObjectCollectionsTestCases.class);
  suite.addTestSuite(JAXBMultipleMapsTestCases.class);
  suite.addTestSuite(JAXBMultipleMapsNamespaceTestCases.class);
  suite.addTestSuite(JAXBTypedListTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(JAXBBigDecimalStackTestCases.class);
  suite.addTestSuite(JAXBEmployeeArrayTestCases.class);
  suite.addTestSuite(JAXBEmployeeListTestCases.class);
  suite.addTestSuite(JAXBIntegerArrayTestCases.class);
  suite.addTestSuite(JAXBIntegerListTestCases.class);
  suite.addTestSuite(JAXBIntegerMyListTestCases.class);
  suite.addTestSuite(JAXBIntegerLinkedListTestCases.class);
  suite.addTestSuite(JAXBIntArrayTestCases.class);
  suite.addTestSuite(JAXBIntListTestCases.class);
  suite.addTestSuite(JAXBCharArrayTestCases.class);
  suite.addTestSuite(JAXBBooleanArrayTestCases.class);
  suite.addTestSuite(JAXBListNameCollisionEmployeeTestCases.class);
  suite.addTestSuite(JAXBListNameCollisionEmployee2TestCases.class);
  suite.addTestSuite(JAXBEmployeesAndIntegersTestCases.class);
  suite.addTestSuite(JAXBStringIntegerHashMapTestCases.class);
  suite.addTestSuite(JAXBStringEmployeeMapTestCases.class);
  suite.addTestSuite(JAXBStringEmployeeHashtableTestCases.class);
  suite.addTestSuite(JAXBListOfObjectsNonRootTestCases.class);
  suite.addTestSuite(JAXBObjectCollectionsTestCases.class);
  suite.addTestSuite(JAXBMultipleMapsTestCases.class);
  suite.addTestSuite(JAXBMultipleMapsNamespaceTestCases.class);
  suite.addTestSuite(JAXBTypedListTestCases.class);
  return suite;
}"
66749,"public void testcreateNativeQueryWithSelectSQL() throws Exception {
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    Query query1=em.createNativeQuery(""String_Node_Str"");
    Query query2=em.createNativeQuery(""String_Node_Str"");
    Query query3=em.createNativeQuery(""String_Node_Str"");
    Collection c1=query1.getResultList();
    assertTrue(""String_Node_Str"",c1 != null);
    int result=0;
    try {
      result=query1.executeUpdate();
    }
 catch (    RuntimeException ex) {
      rollbackTransaction(em);
      beginTransaction(em);
    }
    query2.executeUpdate();
    Collection c2=query1.getResultList();
    assertTrue(""String_Node_Str"",c2 != null);
    query3.executeUpdate();
    Collection c3=query1.getResultList();
    assertTrue(""String_Node_Str"",c3 != null);
    assertTrue(""String_Node_Str"" + result + ""String_Node_Str"",result == 0);
    assertTrue(""String_Node_Str"",c2.size() == (c1.size() + 1));
    assertTrue(""String_Node_Str"",c3.size() == c1.size());
  }
  finally {
    try {
      rollbackTransaction(em);
      closeEntityManager(em);
    }
 catch (    Exception ee) {
    }
  }
}","public void testcreateNativeQueryWithSelectSQL() throws Exception {
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    Query query1=em.createNativeQuery(""String_Node_Str"");
    Collection c1=query1.getResultList();
    assertTrue(""String_Node_Str"",c1 != null);
    int result=0;
    try {
      result=query1.executeUpdate();
    }
 catch (    RuntimeException ex) {
      rollbackTransaction(em);
      closeEntityManager(em);
      em=createEntityManager();
      beginTransaction(em);
      query1=em.createNativeQuery(""String_Node_Str"");
    }
    Query query2=em.createNativeQuery(""String_Node_Str"");
    Query query3=em.createNativeQuery(""String_Node_Str"");
    query2.executeUpdate();
    Collection c2=query1.getResultList();
    assertTrue(""String_Node_Str"",c2 != null);
    query3.executeUpdate();
    Collection c3=query1.getResultList();
    assertTrue(""String_Node_Str"",c3 != null);
    assertTrue(""String_Node_Str"" + result + ""String_Node_Str"",result == 0);
    assertTrue(""String_Node_Str"",c2.size() == (c1.size() + 1));
    assertTrue(""String_Node_Str"",c3.size() == c1.size());
  }
  finally {
    try {
      rollbackTransaction(em);
      closeEntityManager(em);
    }
 catch (    Exception ee) {
    }
  }
}"
66750,"public QName getXmlTagName(){
  return this.xmlTagName;
}","/** 
 * Root element name associated with this type;
 */
public QName getXmlTagName(){
  return this.xmlTagName;
}"
66751,"public Type getType(){
  return this.type;
}","/** 
 * The type to be bound.
 */
public Type getType(){
  return this.type;
}"
66752,"public ElementScope getElementScope(){
  return this.elementScope;
}","/** 
 * Indicates if a global element should be generated for this type.
 */
public ElementScope getElementScope(){
  return this.elementScope;
}"
66753,"public Annotation[] getAnnotations(){
  return this.annotations;
}","/** 
 * Representing parameter level annotations that should be applied to this  type.
 */
public Annotation[] getAnnotations(){
  return this.annotations;
}"
66754,"/** 
 * Convenience method for processing a properties map and creating a map of package names to XmlBindings instances. It is assumed that the given map's key will be ECLIPSELINK_OXM_XML_KEY, and the value will be Map<String, Source>, where String = package, Source = metadata file
 * @param properties
 * @param classLoader
 * @return
 */
private static Map<String,XmlBindings> getXmlBindingsFromProperties(Map properties,ClassLoader classLoader){
  Map<String,XmlBindings> bindings=new HashMap<String,XmlBindings>();
  if (properties != null) {
    Map<String,Source> metadataFiles=null;
    try {
      metadataFiles=(Map<String,Source>)properties.get(ECLIPSELINK_OXM_XML_KEY);
    }
 catch (    ClassCastException x) {
      throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
    }
    if (metadataFiles != null) {
      Iterator<String> keyIt=metadataFiles.keySet().iterator();
      while (keyIt.hasNext()) {
        String key=null;
        try {
          key=keyIt.next();
        }
 catch (        ClassCastException cce) {
          throw org.eclipse.persistence.exceptions.JAXBException.incorrectKeyParameterType();
        }
        if (key == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMapKey();
        }
        Source metadataSource=null;
        try {
          metadataSource=metadataFiles.get(key);
        }
 catch (        ClassCastException cce) {
          throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterType();
        }
        if (metadataSource == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource(key);
        }
        XmlBindings binding=getXmlBindings(metadataSource,classLoader);
        if (binding != null) {
          bindings.put(key,binding);
        }
 else {
        }
      }
    }
  }
  return bindings;
}","/** 
 * Convenience method for processing a properties map and creating a map of package names to XmlBindings instances. It is assumed that the given map's key will be ECLIPSELINK_OXM_XML_KEY, and the value will be Map<String, Source>, where String = package, Source = metadata file
 * @param properties
 * @param classLoader
 * @return
 */
private static Map<String,XmlBindings> getXmlBindingsFromProperties(Map properties,ClassLoader classLoader){
  Map<String,XmlBindings> bindings=new HashMap<String,XmlBindings>();
  if (properties != null) {
    Map<String,Source> metadataFiles=null;
    try {
      metadataFiles=(Map<String,Source>)properties.get(ECLIPSELINK_OXM_XML_KEY);
    }
 catch (    ClassCastException x) {
      throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
    }
    if (metadataFiles != null) {
      Iterator<String> keyIt=metadataFiles.keySet().iterator();
      while (keyIt.hasNext()) {
        String key=null;
        try {
          key=keyIt.next();
        }
 catch (        ClassCastException cce) {
          throw org.eclipse.persistence.exceptions.JAXBException.incorrectKeyParameterType();
        }
        if (key == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMapKey();
        }
        Source metadataSource=null;
        try {
          metadataSource=metadataFiles.get(key);
        }
 catch (        ClassCastException cce) {
          throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterType();
        }
        if (metadataSource == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource(key);
        }
        XmlBindings binding=getXmlBindings(metadataSource,classLoader);
        if (binding != null) {
          bindings.put(key,binding);
        }
      }
    }
  }
  return bindings;
}"
66755,"public void addToSchemaType(TypeInfo ownerTypeInfo,java.util.List<Property> properties,TypeDefParticle compositor,ComplexType type,Schema schema){
  Property xmlValueProperty=ownerTypeInfo.getXmlValueProperty();
  for (  Property next : properties) {
    if (next == null) {
      continue;
    }
    TypeDefParticle parentCompositor=compositor;
    boolean isChoice=(parentCompositor instanceof Choice);
    ComplexType parentType=type;
    if (!helper.isAnnotationPresent(next.getElement(),XmlTransient.class)) {
      if (!isChoice && next.isSetXmlElementWrapper()) {
        XmlElementWrapper wrapper=next.getXmlElementWrapper();
        Element wrapperElement=new Element();
        String name=wrapper.getName();
        if (name.equals(""String_Node_Str"")) {
          name=next.getPropertyName();
        }
        wrapperElement.setNillable(wrapper.isNillable());
        String wrapperNS=wrapper.getNamespace();
        if (!wrapperNS.equals(""String_Node_Str"") && !wrapperNS.equals(schema.getTargetNamespace())) {
          wrapperElement.setMinOccurs(Occurs.ONE);
          wrapperElement.setMaxOccurs(Occurs.ONE);
          String prefix=getOrGeneratePrefixForNamespace(wrapperNS,schema);
          wrapperElement.setRef(prefix + ""String_Node_Str"" + name);
          compositor.addElement(wrapperElement);
          continue;
        }
 else {
          wrapperElement.setName(name);
          if (wrapper.isRequired()) {
            wrapperElement.setMinOccurs(Occurs.ONE);
          }
 else {
            wrapperElement.setMinOccurs(Occurs.ZERO);
          }
          compositor.addElement(wrapperElement);
          ComplexType wrapperType=new ComplexType();
          Sequence wrapperSequence=new Sequence();
          wrapperType.setSequence(wrapperSequence);
          wrapperElement.setComplexType(wrapperType);
          parentType=wrapperType;
          parentCompositor=wrapperSequence;
        }
      }
      if (next.isAttribute() && !next.isAnyAttribute()) {
        Attribute attribute=new Attribute();
        QName attributeName=next.getSchemaName();
        attribute.setName(attributeName.getLocalPart());
        if (next.isRequired()) {
          attribute.setUse(Attribute.REQUIRED);
        }
        JavaClass javaType=next.getType();
        if (next.getGenericType() != null) {
          javaType=(JavaClass)next.getGenericType();
        }
        TypeInfo info=(TypeInfo)typeInfo.get(next.getType().getQualifiedName());
        String typeName=null;
        if (next.isXmlId()) {
          typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
        }
 else         if (next.isXmlIdRef()) {
          typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
        }
 else         if (info != null && !info.isComplexType()) {
          typeName=info.getSimpleType().getName();
        }
 else {
          QName schemaType=next.getSchemaType();
          if (schemaType == null) {
            schemaType=getSchemaTypeFor(javaType);
          }
          if (schemaType != null) {
            if (schemaType.getNamespaceURI() == null) {
              typeName=schemaType.getLocalPart();
            }
 else {
              String prefix=getOrGeneratePrefixForNamespace(schemaType.getNamespaceURI(),schema);
              typeName=prefix + ""String_Node_Str"" + schemaType.getLocalPart();
            }
          }
 else {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
        }
        if (isCollectionType(next)) {
          SimpleType localType=new SimpleType();
          org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
          list.setItemType(typeName);
          localType.setList(list);
          attribute.setSimpleType(localType);
        }
 else {
          if (typeName != null && !typeName.contains(""String_Node_Str"")) {
            if (info.getSchema() == schema) {
              String prefix=getPrefixForNamespace(schema.getTargetNamespace(),schema.getNamespaceResolver());
              if (prefix != null) {
                typeName=prefix + ""String_Node_Str"" + typeName;
              }
            }
          }
          attribute.setType(typeName);
        }
        String lookupNamespace=schema.getTargetNamespace();
        if (lookupNamespace == null) {
          lookupNamespace=""String_Node_Str"";
        }
        NamespaceInfo namespaceInfo=getNamespaceInfoForNamespace(lookupNamespace);
        boolean isAttributeFormQualified=true;
        if (namespaceInfo != null) {
          isAttributeFormQualified=namespaceInfo.isAttributeFormQualified();
        }
        if ((isAttributeFormQualified && !attributeName.getNamespaceURI().equals(lookupNamespace)) || (!namespaceInfo.isAttributeFormQualified() && !attributeName.getNamespaceURI().equals(""String_Node_Str""))) {
          Schema attributeSchema=this.getSchemaForNamespace(attributeName.getNamespaceURI());
          if (attributeSchema != null && attributeSchema.getTopLevelAttributes().get(attribute.getName()) == null) {
            attributeSchema.getTopLevelAttributes().put(attribute.getName(),attribute);
          }
          addImportIfRequired(schema,attributeSchema,attributeName.getNamespaceURI());
          Attribute reference=new Attribute();
          String prefix=getPrefixForNamespace(attributeName.getNamespaceURI(),schema.getNamespaceResolver());
          if (prefix == null) {
            reference.setRef(attribute.getName());
          }
 else {
            reference.setRef(prefix + ""String_Node_Str"" + attribute.getName());
          }
          if (parentType.getSimpleContent() != null) {
            parentType.getSimpleContent().getExtension().getOrderedAttributes().add(reference);
          }
 else {
            parentType.getOrderedAttributes().add(reference);
          }
        }
 else {
          if (parentType.getSimpleContent() != null) {
            parentType.getSimpleContent().getExtension().getOrderedAttributes().add(attribute);
          }
 else           if (parentType.getComplexContent() != null) {
            parentType.getComplexContent().getExtension().getOrderedAttributes().add(attribute);
          }
 else {
            parentType.getOrderedAttributes().add(attribute);
          }
        }
      }
 else       if (next.isAnyAttribute()) {
        AnyAttribute anyAttribute=new AnyAttribute();
        anyAttribute.setProcessContents(""String_Node_Str"");
        anyAttribute.setNamespace(""String_Node_Str"");
        if (type.getSimpleContent() != null) {
          SimpleContent content=type.getSimpleContent();
          content.getRestriction().setAnyAttribute(anyAttribute);
        }
 else {
          type.setAnyAttribute(anyAttribute);
        }
      }
 else       if (next.isChoice()) {
        Choice choice=new Choice();
        ArrayList<Property> choiceProperties=(ArrayList<Property>)((ChoiceProperty)next).getChoiceProperties();
        addToSchemaType(ownerTypeInfo,choiceProperties,choice,parentType,schema);
        if (next.getGenericType() != null) {
          choice.setMaxOccurs(Occurs.UNBOUNDED);
        }
        if (parentCompositor instanceof Sequence) {
          ((Sequence)parentCompositor).addChoice(choice);
        }
 else         if (parentCompositor instanceof Choice) {
          ((Choice)parentCompositor).addChoice(choice);
        }
      }
 else       if (next.isAny()) {
        Any any=new Any();
        any.setNamespace(""String_Node_Str"");
        if (next.isLax()) {
          any.setProcessContents(Any.LAX);
        }
 else {
          any.setProcessContents(""String_Node_Str"");
        }
        if (isCollectionType(next)) {
          any.setMinOccurs(Occurs.ZERO);
          any.setMaxOccurs(Occurs.UNBOUNDED);
        }
        if (parentCompositor instanceof Sequence) {
          ((Sequence)parentCompositor).addAny(any);
        }
 else         if (parentCompositor instanceof Choice) {
          ((Choice)parentCompositor).addAny(any);
        }
      }
 else       if (next.isReference()) {
        ReferenceProperty refProp=(ReferenceProperty)next;
        java.util.List<ElementDeclaration> referencedElements=refProp.getReferencedElements();
        if (referencedElements.size() == 1) {
          Element element=new Element();
          ElementDeclaration decl=referencedElements.get(0);
          String localName=decl.getElementName().getLocalPart();
          Schema referencedSchema=this.getSchemaForNamespace(decl.getElementName().getNamespaceURI());
          addImportIfRequired(schema,referencedSchema,decl.getElementName().getNamespaceURI());
          String prefix=this.getPrefixForNamespace(decl.getElementName().getNamespaceURI(),schema.getNamespaceResolver());
          if (prefix == null || prefix.equals(""String_Node_Str"")) {
            element.setRef(localName);
          }
 else {
            element.setRef(prefix + ""String_Node_Str"" + localName);
          }
          if (next.getGenericType() != null) {
            element.setMinOccurs(Occurs.ZERO);
            element.setMaxOccurs(Occurs.UNBOUNDED);
          }
          parentCompositor.addElement(element);
        }
 else {
          Choice choice=new Choice();
          if (next.getGenericType() != null) {
            choice.setMaxOccurs(Occurs.UNBOUNDED);
          }
          for (          ElementDeclaration elementDecl : referencedElements) {
            Element element=new Element();
            String localName=elementDecl.getElementName().getLocalPart();
            Schema referencedSchema=this.getSchemaForNamespace(elementDecl.getElementName().getNamespaceURI());
            addImportIfRequired(schema,referencedSchema,elementDecl.getElementName().getNamespaceURI());
            String prefix=this.getPrefixForNamespace(elementDecl.getElementName().getNamespaceURI(),schema.getNamespaceResolver());
            if (prefix == null || prefix.equals(""String_Node_Str"")) {
              element.setRef(localName);
            }
 else {
              element.setRef(prefix + ""String_Node_Str"" + localName);
            }
            choice.addElement(element);
          }
          if (parentCompositor instanceof Sequence) {
            ((Sequence)parentCompositor).addChoice(choice);
          }
 else           if (parentCompositor instanceof Choice) {
            ((Choice)parentCompositor).addChoice(choice);
          }
        }
      }
 else       if (!(xmlValueProperty != null && xmlValueProperty == next)) {
        Element element=new Element();
        if (!(parentCompositor instanceof All)) {
          element.setMinOccurs(next.isRequired() ? Occurs.ONE : Occurs.ZERO);
        }
        element.setNillable(next.isNillable());
        if (next.isSetDefaultValue()) {
          element.setDefaultValue(next.getDefaultValue());
        }
        if (next.getMimeType() != null) {
          element.getAttributesMap().put(XMLConstants.EXPECTED_CONTENT_TYPES_QNAME,next.getMimeType());
        }
        QName elementName=next.getSchemaName();
        JavaClass javaType=next.getActualType();
        boolean isComplexType=false;
        element.setName(elementName.getLocalPart());
        String typeName=null;
        if (next.isXmlId()) {
          typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
        }
 else         if (next.isXmlIdRef()) {
          typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
        }
 else {
          TypeInfo info=(TypeInfo)typeInfo.get(javaType.getQualifiedName());
          if (info != null) {
            isComplexType=info.isComplexType();
            if (isComplexType) {
              typeName=info.getComplexType().getName();
            }
 else             if (info.getSimpleType() != null) {
              typeName=info.getSimpleType().getName();
            }
 else {
              typeName=info.getSchemaTypeName();
            }
            if (typeName == null) {
              if (!info.hasRootElement()) {
                if (info.isComplexType()) {
                  element.setComplexType(info.getComplexType());
                }
 else {
                  element.setSimpleType(info.getSimpleType());
                }
              }
            }
            if (addImportIfRequired(schema,info.getSchema(),info.getClassNamespace())) {
              String prefix=schema.getNamespaceResolver().resolveNamespaceURI(info.getClassNamespace());
              if (prefix != null && !typeName.equals(""String_Node_Str"")) {
                typeName=prefix + ""String_Node_Str"" + typeName;
              }
            }
          }
 else           if (!next.isMap()) {
            QName schemaType=next.getSchemaType();
            if (schemaType == null) {
              schemaType=getSchemaTypeFor(javaType);
            }
            if (schemaType != null) {
              if (schemaType.getNamespaceURI() == null) {
                typeName=schemaType.getLocalPart();
              }
 else {
                String prefix=getOrGeneratePrefixForNamespace(schemaType.getNamespaceURI(),schema);
                typeName=prefix + ""String_Node_Str"" + schemaType.getLocalPart();
              }
            }
          }
          if (typeName != null && !typeName.contains(""String_Node_Str"")) {
            String prefix=getPrefixForNamespace(info.getSchema().getTargetNamespace(),schema.getNamespaceResolver());
            if (prefix != null) {
              typeName=prefix + ""String_Node_Str"" + typeName;
            }
          }
        }
        if (next.getGenericType() != null) {
          if (next.isXmlList()) {
            if (isComplexType) {
            }
            SimpleType localSimpleType=new SimpleType();
            org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
            list.setItemType(typeName);
            localSimpleType.setList(list);
            element.setSimpleType(localSimpleType);
          }
 else {
            element.setMaxOccurs(Occurs.UNBOUNDED);
            element.setType(typeName);
          }
        }
 else         if (next.isMap()) {
          ComplexType entryComplexType=new ComplexType();
          Sequence entrySequence=new Sequence();
          Element keyElement=new Element();
          keyElement.setName(Property.DEFAULT_KEY_NAME);
          keyElement.setMinOccurs(Occurs.ZERO);
          JavaClass keyType=next.getKeyType();
          JavaClass valueType=next.getValueType();
          if (keyType == null) {
            keyType=helper.getJavaClass(Object.class);
          }
          if (valueType == null) {
            valueType=helper.getJavaClass(Object.class);
          }
          QName keySchemaType=getSchemaTypeFor(keyType);
          if (keySchemaType != null) {
            TypeInfo targetInfo=this.typeInfo.get(keyType.getQualifiedName());
            if (targetInfo != null) {
              Schema keyElementSchema=this.getSchemaForNamespace(keySchemaType.getNamespaceURI());
              addImportIfRequired(schema,keyElementSchema,keySchemaType.getNamespaceURI());
            }
            String prefix;
            if (keySchemaType.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) {
              prefix=XMLConstants.SCHEMA_PREFIX;
            }
 else {
              prefix=getPrefixForNamespace(keySchemaType.getNamespaceURI(),schema.getNamespaceResolver());
            }
            if (prefix != null && !prefix.equals(""String_Node_Str"")) {
              typeName=prefix + ""String_Node_Str"" + keySchemaType.getLocalPart();
            }
 else {
              typeName=keySchemaType.getLocalPart();
            }
            keyElement.setType(typeName);
          }
          entrySequence.addElement(keyElement);
          Element valueElement=new Element();
          valueElement.setName(Property.DEFAULT_VALUE_NAME);
          valueElement.setMinOccurs(Occurs.ZERO);
          QName valueSchemaType=getSchemaTypeFor(valueType);
          if (valueSchemaType != null) {
            TypeInfo targetInfo=this.typeInfo.get(valueType.getQualifiedName());
            if (targetInfo != null) {
              Schema valueElementSchema=this.getSchemaForNamespace(valueSchemaType.getNamespaceURI());
              addImportIfRequired(schema,valueElementSchema,valueSchemaType.getNamespaceURI());
            }
            String prefix;
            if (valueSchemaType.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) {
              prefix=XMLConstants.SCHEMA_PREFIX;
            }
 else {
              prefix=getPrefixForNamespace(valueSchemaType.getNamespaceURI(),schema.getNamespaceResolver());
            }
            if (prefix != null && !prefix.equals(""String_Node_Str"")) {
              typeName=prefix + ""String_Node_Str"" + valueSchemaType.getLocalPart();
            }
 else {
              typeName=valueSchemaType.getLocalPart();
            }
            valueElement.setType(typeName);
          }
          entrySequence.addElement(valueElement);
          entryComplexType.setSequence(entrySequence);
          JavaClass descriptorClass=helper.getJavaClass(ownerTypeInfo.getDescriptor().getJavaClassName());
          JavaClass mapValueClass=helper.getJavaClass(MapValue.class);
          if (mapValueClass.isAssignableFrom(descriptorClass)) {
            element.setComplexType(entryComplexType);
            element.setMaxOccurs(Occurs.UNBOUNDED);
          }
 else {
            ComplexType complexType=new ComplexType();
            Sequence sequence=new Sequence();
            complexType.setSequence(sequence);
            Element entryElement=new Element();
            entryElement.setName(""String_Node_Str"");
            entryElement.setMinOccurs(Occurs.ZERO);
            entryElement.setMaxOccurs(Occurs.UNBOUNDED);
            sequence.addElement(entryElement);
            entryElement.setComplexType(entryComplexType);
            element.setComplexType(complexType);
          }
        }
 else {
          element.setType(typeName);
        }
        String lookupNamespace=schema.getTargetNamespace();
        if (lookupNamespace == null) {
          lookupNamespace=""String_Node_Str"";
        }
        NamespaceInfo namespaceInfo=getNamespaceInfoForNamespace(lookupNamespace);
        boolean isElementFormQualified=false;
        if (namespaceInfo != null) {
          isElementFormQualified=namespaceInfo.isElementFormQualified();
        }
        if ((isElementFormQualified && !elementName.getNamespaceURI().equals(lookupNamespace)) || (!isElementFormQualified && !elementName.getNamespaceURI().equals(""String_Node_Str""))) {
          Element reference=new Element();
          reference.setMinOccurs(element.getMinOccurs());
          reference.setMaxOccurs(element.getMaxOccurs());
          Schema attributeSchema=this.getSchemaForNamespace(elementName.getNamespaceURI());
          if (attributeSchema != null && attributeSchema.getTopLevelElements().get(element.getName()) == null) {
            element.setMinOccurs(null);
            element.setMaxOccurs(null);
            attributeSchema.getTopLevelElements().put(element.getName(),element);
          }
          addImportIfRequired(schema,attributeSchema,elementName.getNamespaceURI());
          String prefix=getPrefixForNamespace(elementName.getNamespaceURI(),schema.getNamespaceResolver());
          if (prefix == null) {
            reference.setRef(element.getName());
          }
 else {
            reference.setRef(prefix + ""String_Node_Str"" + element.getName());
          }
          parentCompositor.addElement(reference);
        }
 else {
          parentCompositor.addElement(element);
        }
      }
    }
  }
}","public void addToSchemaType(TypeInfo ownerTypeInfo,java.util.List<Property> properties,TypeDefParticle compositor,ComplexType type,Schema schema){
  Property xmlValueProperty=ownerTypeInfo.getXmlValueProperty();
  for (  Property next : properties) {
    if (next == null) {
      continue;
    }
    TypeDefParticle parentCompositor=compositor;
    boolean isChoice=(parentCompositor instanceof Choice);
    ComplexType parentType=type;
    if (!helper.isAnnotationPresent(next.getElement(),XmlTransient.class)) {
      if (!isChoice && next.isSetXmlElementWrapper()) {
        XmlElementWrapper wrapper=next.getXmlElementWrapper();
        Element wrapperElement=new Element();
        String name=wrapper.getName();
        if (name.equals(""String_Node_Str"")) {
          name=next.getPropertyName();
        }
        wrapperElement.setNillable(wrapper.isNillable());
        String wrapperNS=wrapper.getNamespace();
        if (!wrapperNS.equals(""String_Node_Str"") && !wrapperNS.equals(schema.getTargetNamespace())) {
          wrapperElement.setMinOccurs(Occurs.ONE);
          wrapperElement.setMaxOccurs(Occurs.ONE);
          String prefix=getOrGeneratePrefixForNamespace(wrapperNS,schema);
          wrapperElement.setRef(prefix + ""String_Node_Str"" + name);
          compositor.addElement(wrapperElement);
          continue;
        }
 else {
          wrapperElement.setName(name);
          if (wrapper.isRequired()) {
            wrapperElement.setMinOccurs(Occurs.ONE);
          }
 else {
            wrapperElement.setMinOccurs(Occurs.ZERO);
          }
          compositor.addElement(wrapperElement);
          ComplexType wrapperType=new ComplexType();
          Sequence wrapperSequence=new Sequence();
          wrapperType.setSequence(wrapperSequence);
          wrapperElement.setComplexType(wrapperType);
          parentType=wrapperType;
          parentCompositor=wrapperSequence;
        }
      }
      if (next.isAttribute() && !next.isAnyAttribute()) {
        Attribute attribute=new Attribute();
        QName attributeName=next.getSchemaName();
        attribute.setName(attributeName.getLocalPart());
        if (next.isRequired()) {
          attribute.setUse(Attribute.REQUIRED);
        }
        JavaClass javaType=next.getType();
        if (next.getGenericType() != null) {
          javaType=(JavaClass)next.getGenericType();
        }
        TypeInfo info=(TypeInfo)typeInfo.get(next.getType().getQualifiedName());
        String typeName=null;
        if (next.isXmlId()) {
          typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
        }
 else         if (next.isXmlIdRef()) {
          typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
        }
 else         if (info != null && !info.isComplexType()) {
          typeName=info.getSimpleType().getName();
        }
 else {
          QName schemaType=next.getSchemaType();
          if (schemaType == null) {
            schemaType=getSchemaTypeFor(javaType);
          }
          if (schemaType != null) {
            if (schemaType.getNamespaceURI() == null) {
              typeName=schemaType.getLocalPart();
            }
 else {
              String prefix=getOrGeneratePrefixForNamespace(schemaType.getNamespaceURI(),schema);
              typeName=prefix + ""String_Node_Str"" + schemaType.getLocalPart();
            }
          }
 else {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
        }
        if (isCollectionType(next)) {
          SimpleType localType=new SimpleType();
          org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
          list.setItemType(typeName);
          localType.setList(list);
          attribute.setSimpleType(localType);
        }
 else {
          if (typeName != null && !typeName.contains(""String_Node_Str"")) {
            if (info.getSchema() == schema) {
              String prefix=getPrefixForNamespace(schema.getTargetNamespace(),schema.getNamespaceResolver());
              if (prefix != null) {
                typeName=prefix + ""String_Node_Str"" + typeName;
              }
            }
          }
          attribute.setType(typeName);
        }
        String lookupNamespace=schema.getTargetNamespace();
        if (lookupNamespace == null) {
          lookupNamespace=""String_Node_Str"";
        }
        NamespaceInfo namespaceInfo=getNamespaceInfoForNamespace(lookupNamespace);
        boolean isAttributeFormQualified=true;
        if (namespaceInfo != null) {
          isAttributeFormQualified=namespaceInfo.isAttributeFormQualified();
        }
        if ((isAttributeFormQualified && !attributeName.getNamespaceURI().equals(lookupNamespace)) || (!namespaceInfo.isAttributeFormQualified() && !attributeName.getNamespaceURI().equals(""String_Node_Str""))) {
          Schema attributeSchema=this.getSchemaForNamespace(attributeName.getNamespaceURI());
          if (attributeSchema != null && attributeSchema.getTopLevelAttributes().get(attribute.getName()) == null) {
            attributeSchema.getTopLevelAttributes().put(attribute.getName(),attribute);
          }
          addImportIfRequired(schema,attributeSchema,attributeName.getNamespaceURI());
          Attribute reference=new Attribute();
          String prefix=getPrefixForNamespace(attributeName.getNamespaceURI(),schema.getNamespaceResolver());
          if (prefix == null) {
            reference.setRef(attribute.getName());
          }
 else {
            reference.setRef(prefix + ""String_Node_Str"" + attribute.getName());
          }
          if (parentType.getSimpleContent() != null) {
            parentType.getSimpleContent().getExtension().getOrderedAttributes().add(reference);
          }
 else {
            parentType.getOrderedAttributes().add(reference);
          }
        }
 else {
          if (parentType.getSimpleContent() != null) {
            parentType.getSimpleContent().getExtension().getOrderedAttributes().add(attribute);
          }
 else           if (parentType.getComplexContent() != null) {
            parentType.getComplexContent().getExtension().getOrderedAttributes().add(attribute);
          }
 else {
            parentType.getOrderedAttributes().add(attribute);
          }
        }
      }
 else       if (next.isAnyAttribute()) {
        AnyAttribute anyAttribute=new AnyAttribute();
        anyAttribute.setProcessContents(""String_Node_Str"");
        anyAttribute.setNamespace(""String_Node_Str"");
        if (type.getSimpleContent() != null) {
          SimpleContent content=type.getSimpleContent();
          content.getRestriction().setAnyAttribute(anyAttribute);
        }
 else {
          type.setAnyAttribute(anyAttribute);
        }
      }
 else       if (next.isChoice()) {
        Choice choice=new Choice();
        ArrayList<Property> choiceProperties=(ArrayList<Property>)((ChoiceProperty)next).getChoiceProperties();
        addToSchemaType(ownerTypeInfo,choiceProperties,choice,parentType,schema);
        if (next.getGenericType() != null) {
          choice.setMaxOccurs(Occurs.UNBOUNDED);
        }
        if (parentCompositor instanceof Sequence) {
          ((Sequence)parentCompositor).addChoice(choice);
        }
 else         if (parentCompositor instanceof Choice) {
          ((Choice)parentCompositor).addChoice(choice);
        }
      }
 else       if (next.isAny()) {
        Any any=new Any();
        any.setNamespace(""String_Node_Str"");
        if (next.isLax()) {
          any.setProcessContents(Any.LAX);
        }
 else {
          any.setProcessContents(""String_Node_Str"");
        }
        if (isCollectionType(next)) {
          any.setMinOccurs(Occurs.ZERO);
          any.setMaxOccurs(Occurs.UNBOUNDED);
        }
        if (parentCompositor instanceof Sequence) {
          ((Sequence)parentCompositor).addAny(any);
        }
 else         if (parentCompositor instanceof Choice) {
          ((Choice)parentCompositor).addAny(any);
        }
      }
 else       if (next.isReference()) {
        ReferenceProperty refProp=(ReferenceProperty)next;
        java.util.List<ElementDeclaration> referencedElements=refProp.getReferencedElements();
        if (referencedElements.size() == 1) {
          Element element=new Element();
          ElementDeclaration decl=referencedElements.get(0);
          String localName=decl.getElementName().getLocalPart();
          Schema referencedSchema=this.getSchemaForNamespace(decl.getElementName().getNamespaceURI());
          addImportIfRequired(schema,referencedSchema,decl.getElementName().getNamespaceURI());
          String prefix=this.getPrefixForNamespace(decl.getElementName().getNamespaceURI(),schema.getNamespaceResolver());
          if (prefix == null || prefix.equals(""String_Node_Str"")) {
            element.setRef(localName);
          }
 else {
            element.setRef(prefix + ""String_Node_Str"" + localName);
          }
          if (next.getGenericType() != null) {
            element.setMinOccurs(Occurs.ZERO);
            element.setMaxOccurs(Occurs.UNBOUNDED);
          }
          parentCompositor.addElement(element);
        }
 else {
          Choice choice=new Choice();
          if (next.getGenericType() != null) {
            choice.setMaxOccurs(Occurs.UNBOUNDED);
          }
          for (          ElementDeclaration elementDecl : referencedElements) {
            Element element=new Element();
            String localName=elementDecl.getElementName().getLocalPart();
            Schema referencedSchema=this.getSchemaForNamespace(elementDecl.getElementName().getNamespaceURI());
            addImportIfRequired(schema,referencedSchema,elementDecl.getElementName().getNamespaceURI());
            String prefix=this.getPrefixForNamespace(elementDecl.getElementName().getNamespaceURI(),schema.getNamespaceResolver());
            if (prefix == null || prefix.equals(""String_Node_Str"")) {
              element.setRef(localName);
            }
 else {
              element.setRef(prefix + ""String_Node_Str"" + localName);
            }
            choice.addElement(element);
          }
          if (parentCompositor instanceof Sequence) {
            ((Sequence)parentCompositor).addChoice(choice);
          }
 else           if (parentCompositor instanceof Choice) {
            ((Choice)parentCompositor).addChoice(choice);
          }
        }
      }
 else       if (!(xmlValueProperty != null && xmlValueProperty == next)) {
        Element element=new Element();
        if (!(parentCompositor instanceof All)) {
          element.setMinOccurs(next.isRequired() ? Occurs.ONE : Occurs.ZERO);
        }
        element.setNillable(next.isNillable());
        if (next.isSetDefaultValue()) {
          element.setDefaultValue(next.getDefaultValue());
        }
        if (next.getMimeType() != null) {
          element.getAttributesMap().put(XMLConstants.EXPECTED_CONTENT_TYPES_QNAME,next.getMimeType());
        }
        QName elementName=next.getSchemaName();
        JavaClass javaType=next.getActualType();
        boolean isComplexType=false;
        element.setName(elementName.getLocalPart());
        String typeName=null;
        if (next.isXmlId()) {
          typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
        }
 else         if (next.isXmlIdRef()) {
          typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
        }
 else {
          TypeInfo info=(TypeInfo)typeInfo.get(javaType.getQualifiedName());
          if (info != null) {
            isComplexType=info.isComplexType();
            if (isComplexType) {
              typeName=info.getComplexType().getName();
            }
 else             if (info.getSimpleType() != null) {
              typeName=info.getSimpleType().getName();
            }
 else {
              typeName=info.getSchemaTypeName();
            }
            if (typeName == null) {
              if (!info.hasRootElement()) {
                if (info.isComplexType()) {
                  element.setComplexType(info.getComplexType());
                }
 else {
                  element.setSimpleType(info.getSimpleType());
                }
              }
            }
            if (addImportIfRequired(schema,info.getSchema(),info.getClassNamespace())) {
              String prefix=schema.getNamespaceResolver().resolveNamespaceURI(info.getClassNamespace());
              if (prefix != null && !typeName.equals(""String_Node_Str"")) {
                typeName=prefix + ""String_Node_Str"" + typeName;
              }
            }
          }
 else           if (!next.isMap()) {
            QName schemaType=next.getSchemaType();
            if (schemaType == null) {
              schemaType=getSchemaTypeFor(javaType);
            }
            if (schemaType != null) {
              if (schemaType.getNamespaceURI() == null) {
                typeName=schemaType.getLocalPart();
              }
 else {
                String prefix=getOrGeneratePrefixForNamespace(schemaType.getNamespaceURI(),schema);
                typeName=prefix + ""String_Node_Str"" + schemaType.getLocalPart();
              }
            }
          }
          if (typeName != null && !typeName.contains(""String_Node_Str"")) {
            String prefix=getPrefixForNamespace(info.getSchema().getTargetNamespace(),schema.getNamespaceResolver());
            if (prefix != null) {
              typeName=prefix + ""String_Node_Str"" + typeName;
            }
          }
        }
        if (next.getGenericType() != null) {
          if (next.isXmlList()) {
            SimpleType localSimpleType=new SimpleType();
            org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
            list.setItemType(typeName);
            localSimpleType.setList(list);
            element.setSimpleType(localSimpleType);
          }
 else {
            element.setMaxOccurs(Occurs.UNBOUNDED);
            element.setType(typeName);
          }
        }
 else         if (next.isMap()) {
          ComplexType entryComplexType=new ComplexType();
          Sequence entrySequence=new Sequence();
          Element keyElement=new Element();
          keyElement.setName(Property.DEFAULT_KEY_NAME);
          keyElement.setMinOccurs(Occurs.ZERO);
          JavaClass keyType=next.getKeyType();
          JavaClass valueType=next.getValueType();
          if (keyType == null) {
            keyType=helper.getJavaClass(Object.class);
          }
          if (valueType == null) {
            valueType=helper.getJavaClass(Object.class);
          }
          QName keySchemaType=getSchemaTypeFor(keyType);
          if (keySchemaType != null) {
            TypeInfo targetInfo=this.typeInfo.get(keyType.getQualifiedName());
            if (targetInfo != null) {
              Schema keyElementSchema=this.getSchemaForNamespace(keySchemaType.getNamespaceURI());
              addImportIfRequired(schema,keyElementSchema,keySchemaType.getNamespaceURI());
            }
            String prefix;
            if (keySchemaType.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) {
              prefix=XMLConstants.SCHEMA_PREFIX;
            }
 else {
              prefix=getPrefixForNamespace(keySchemaType.getNamespaceURI(),schema.getNamespaceResolver());
            }
            if (prefix != null && !prefix.equals(""String_Node_Str"")) {
              typeName=prefix + ""String_Node_Str"" + keySchemaType.getLocalPart();
            }
 else {
              typeName=keySchemaType.getLocalPart();
            }
            keyElement.setType(typeName);
          }
          entrySequence.addElement(keyElement);
          Element valueElement=new Element();
          valueElement.setName(Property.DEFAULT_VALUE_NAME);
          valueElement.setMinOccurs(Occurs.ZERO);
          QName valueSchemaType=getSchemaTypeFor(valueType);
          if (valueSchemaType != null) {
            TypeInfo targetInfo=this.typeInfo.get(valueType.getQualifiedName());
            if (targetInfo != null) {
              Schema valueElementSchema=this.getSchemaForNamespace(valueSchemaType.getNamespaceURI());
              addImportIfRequired(schema,valueElementSchema,valueSchemaType.getNamespaceURI());
            }
            String prefix;
            if (valueSchemaType.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) {
              prefix=XMLConstants.SCHEMA_PREFIX;
            }
 else {
              prefix=getPrefixForNamespace(valueSchemaType.getNamespaceURI(),schema.getNamespaceResolver());
            }
            if (prefix != null && !prefix.equals(""String_Node_Str"")) {
              typeName=prefix + ""String_Node_Str"" + valueSchemaType.getLocalPart();
            }
 else {
              typeName=valueSchemaType.getLocalPart();
            }
            valueElement.setType(typeName);
          }
          entrySequence.addElement(valueElement);
          entryComplexType.setSequence(entrySequence);
          JavaClass descriptorClass=helper.getJavaClass(ownerTypeInfo.getDescriptor().getJavaClassName());
          JavaClass mapValueClass=helper.getJavaClass(MapValue.class);
          if (mapValueClass.isAssignableFrom(descriptorClass)) {
            element.setComplexType(entryComplexType);
            element.setMaxOccurs(Occurs.UNBOUNDED);
          }
 else {
            ComplexType complexType=new ComplexType();
            Sequence sequence=new Sequence();
            complexType.setSequence(sequence);
            Element entryElement=new Element();
            entryElement.setName(""String_Node_Str"");
            entryElement.setMinOccurs(Occurs.ZERO);
            entryElement.setMaxOccurs(Occurs.UNBOUNDED);
            sequence.addElement(entryElement);
            entryElement.setComplexType(entryComplexType);
            element.setComplexType(complexType);
          }
        }
 else {
          element.setType(typeName);
        }
        String lookupNamespace=schema.getTargetNamespace();
        if (lookupNamespace == null) {
          lookupNamespace=""String_Node_Str"";
        }
        NamespaceInfo namespaceInfo=getNamespaceInfoForNamespace(lookupNamespace);
        boolean isElementFormQualified=false;
        if (namespaceInfo != null) {
          isElementFormQualified=namespaceInfo.isElementFormQualified();
        }
        if ((isElementFormQualified && !elementName.getNamespaceURI().equals(lookupNamespace)) || (!isElementFormQualified && !elementName.getNamespaceURI().equals(""String_Node_Str""))) {
          Element reference=new Element();
          reference.setMinOccurs(element.getMinOccurs());
          reference.setMaxOccurs(element.getMaxOccurs());
          Schema attributeSchema=this.getSchemaForNamespace(elementName.getNamespaceURI());
          if (attributeSchema != null && attributeSchema.getTopLevelElements().get(element.getName()) == null) {
            element.setMinOccurs(null);
            element.setMaxOccurs(null);
            attributeSchema.getTopLevelElements().put(element.getName(),element);
          }
          addImportIfRequired(schema,attributeSchema,elementName.getNamespaceURI());
          String prefix=getPrefixForNamespace(elementName.getNamespaceURI(),schema.getNamespaceResolver());
          if (prefix == null) {
            reference.setRef(element.getName());
          }
 else {
            reference.setRef(prefix + ""String_Node_Str"" + element.getName());
          }
          parentCompositor.addElement(reference);
        }
 else {
          parentCompositor.addElement(element);
        }
      }
    }
  }
}"
66756,"public void postAcquireConnection(SessionEvent event){
  Connection conn=((DatabaseAccessor)event.getResult()).getConnection();
  Statement stmt1=null;
  Statement stmt2=null;
  ResultSet result=null;
  int isolationLevel;
  try {
    stmt1=conn.createStatement();
    result=stmt1.executeQuery(""String_Node_Str"");
    result.next();
    isolationLevel=result.getInt(1);
    if (isolationLevel > 0) {
      stmt2=conn.createStatement();
      stmt2.execute(""String_Node_Str"");
      stmt2.close();
      connections.put(conn,isolationLevel);
    }
  }
 catch (  SQLException sqlException) {
    throw new TestProblemException(""String_Node_Str"",sqlException);
  }
 finally {
    if (result != null) {
      try {
        result.close();
      }
 catch (      SQLException ex) {
      }
    }
    if (stmt1 != null) {
      try {
        stmt1.close();
      }
 catch (      SQLException ex) {
      }
    }
    if (stmt2 != null) {
      try {
        stmt2.close();
      }
 catch (      SQLException ex) {
      }
    }
  }
}","public void postAcquireConnection(SessionEvent event){
  Connection conn=((DatabaseAccessor)event.getResult()).getConnection();
  Statement stmt1=null;
  Statement stmt2=null;
  ResultSet result=null;
  Integer isolationLevel;
  try {
    stmt1=conn.createStatement();
    result=stmt1.executeQuery(""String_Node_Str"");
    result.next();
    isolationLevel=new Integer(result.getInt(1));
    if (isolationLevel > 0) {
      stmt2=conn.createStatement();
      stmt2.execute(""String_Node_Str"");
      stmt2.close();
      connections.put(conn,isolationLevel);
    }
  }
 catch (  SQLException sqlException) {
    throw new TestProblemException(""String_Node_Str"",sqlException);
  }
 finally {
    if (result != null) {
      try {
        result.close();
      }
 catch (      SQLException ex) {
      }
    }
    if (stmt1 != null) {
      try {
        stmt1.close();
      }
 catch (      SQLException ex) {
      }
    }
    if (stmt2 != null) {
      try {
        stmt2.close();
      }
 catch (      SQLException ex) {
      }
    }
  }
}"
66757,"public void preReleaseConnection(SessionEvent event){
  Connection conn=((DatabaseAccessor)event.getResult()).getConnection();
  Statement stmt=null;
  try {
    int isolationLevel=connections.remove(conn);
    stmt=conn.createStatement();
    stmt.execute(""String_Node_Str"" + isolationLevel);
    stmt.close();
  }
 catch (  SQLException sqlException) {
    throw new TestProblemException(""String_Node_Str"",sqlException);
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException ex) {
      }
    }
  }
}","public void preReleaseConnection(SessionEvent event){
  Connection conn=((DatabaseAccessor)event.getResult()).getConnection();
  Statement stmt=null;
  try {
    Integer isolationLevel=connections.remove(conn);
    if (isolationLevel != null) {
      stmt=conn.createStatement();
      stmt.execute(""String_Node_Str"" + isolationLevel);
      stmt.close();
    }
  }
 catch (  SQLException sqlException) {
    throw new TestProblemException(""String_Node_Str"",sqlException);
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException ex) {
      }
    }
  }
}"
66758,"public void testMerge(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  try {
    Image image=new Image();
    image.setId(5001);
    SerializableNonEntity sne=new SerializableNonEntity();
    sne.setSomeValue(1l);
    image.setCustomAttribute1(sne);
    em.persist(image);
    commitTransaction(em);
    closeEntityManager(em);
    image.getCustomAttribute1().setSomeValue(2l);
    em=createEntityManager();
    beginTransaction(em);
    em.merge(image);
    commitTransaction(em);
    em.clear();
    clearCache();
    image=em.find(Image.class,5001);
    assertTrue(""String_Node_Str"",image.getCustomAttribute1().getSomeValue() == 2l);
    beginTransaction(em);
    em.remove(image);
    commitTransaction(em);
    clearCache();
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
  closeEntityManager(em);
}","public void testMerge(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  try {
    Image image=new Image();
    image.setId(5001);
    SerializableNonEntity sne=new SerializableNonEntity();
    sne.setSomeValue(1l);
    image.setCustomAttribute1(sne);
    em.persist(image);
    commitTransaction(em);
    closeEntityManager(em);
    image.getCustomAttribute1().setSomeValue(2l);
    em=createEntityManager();
    beginTransaction(em);
    em.merge(image);
    commitTransaction(em);
    em.clear();
    clearCache();
    beginTransaction(em);
    image=em.find(Image.class,5001);
    assertTrue(""String_Node_Str"",image.getCustomAttribute1().getSomeValue() == 2l);
    em.remove(image);
    commitTransaction(em);
    clearCache();
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
  closeEntityManager(em);
}"
66759,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLField xmlField=(XMLField)xmlBinaryDataMapping.getField();
    XPathFragment lastFragment=xmlField.getLastXPathFragment();
    if (!lastFragment.isAttribute()) {
      BinaryMappingContentHandler handler=new BinaryMappingContentHandler(unmarshalRecord,this,this.xmlBinaryDataMapping);
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      unmarshalRecord.getXMLReader().setContentHandler(handler);
    }
 else     if (lastFragment.isAttribute()) {
      String value=atts.getValue(lastFragment.getNamespaceURI(),lastFragment.getLocalName());
      Object fieldValue=null;
      if (xmlBinaryDataMapping.isSwaRef()) {
        if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
          if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
          }
 else {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
          }
          xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession()));
        }
      }
 else {
        fieldValue=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
        xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession()));
      }
    }
    return true;
  }
 catch (  SAXException ex) {
    throw XMLMarshalException.unmarshalException(ex);
  }
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLField xmlField=(XMLField)xmlBinaryDataMapping.getField();
    XPathFragment lastFragment=xmlField.getLastXPathFragment();
    BinaryMappingContentHandler handler=new BinaryMappingContentHandler(unmarshalRecord,this,this.xmlBinaryDataMapping);
    String qnameString=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
    }
    handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
    unmarshalRecord.getXMLReader().setContentHandler(handler);
    return true;
  }
 catch (  SAXException ex) {
    throw XMLMarshalException.unmarshalException(ex);
  }
}"
66760,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  if (objectValue == null) {
    return true;
  }
  if (!xPathFragment.isSelfFragment) {
    marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    marshalRecord.closeStartElement();
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    String c_id=null;
    byte[] bytes=null;
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      marshalRecord.characters(value);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
      String c_id=XMLConstants.EMPTY_STRING;
      byte[] bytes=null;
      if (objectValue.getClass() == ClassConstants.APBYTE) {
        bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else       if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
        if (c_id == null) {
          bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
        }
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      if (c_id == null) {
        String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
        marshalRecord.characters(value);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      String value=XMLConstants.EMPTY_STRING;
      if ((objectValue.getClass() == ClassConstants.ABYTE) || (objectValue.getClass() == ClassConstants.APBYTE)) {
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        byte[] bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  String c_id=null;
  byte[] bytes=null;
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  marshalRecord.closeStartGroupingElements(groupingFragment);
  if (!xPathFragment.isSelfFragment) {
    marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    marshalRecord.closeStartElement();
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      marshalRecord.characters(value);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
        marshalRecord.characters(value);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      String value=XMLConstants.EMPTY_STRING;
      if ((objectValue.getClass() == ClassConstants.ABYTE) || (objectValue.getClass() == ClassConstants.APBYTE)) {
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
66761,"/** 
 * Load a dynamic project from deployment XML creating dynamic types for all descriptors where the provided class name does not exist.
 * @param resourceStream
 * @param login
 * @param dynamicClassLoader
 * @return a Project with {@link DynamicClassLoader} and associated{@link DynamicClassWriter} configured. Ensure if a newLogin/Platform is being configured that the {@link ConversionManager#getLoader()} is maintained.<p> <tt>null</tt> is returned if the resourcePath cannot locate a deployment XML
 * @throws IOException
 */
public static Project loadDynamicProject(InputStream resourceStream,DatabaseLogin login,DynamicClassLoader dynamicClassLoader) throws IOException {
  if (resourceStream == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (dynamicClassLoader == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  ObjectPersistenceWorkbenchXMLProject opmProject=new ObjectPersistenceWorkbenchXMLProject();
  Document document=xmlParser.parse(resourceStream);
  Project project=XMLProjectReader.readObjectPersistenceRuntimeFormat(document,dynamicClassLoader,opmProject);
  if (project != null) {
    if (login == null) {
      if (project.getLogin() == null) {
        project.setLogin(new DatabaseLogin());
      }
    }
 else {
      project.setLogin(login);
    }
    if (project.getLogin().getPlatform() == null) {
      project.getLogin().setPlatform(new DatabasePlatform());
    }
    project.getLogin().getPlatform().getConversionManager().setLoader(dynamicClassLoader);
    for (Iterator<?> i=project.getAliasDescriptors().values().iterator(); i.hasNext(); ) {
      ClassDescriptor descriptor=(ClassDescriptor)i.next();
      if (descriptor.getJavaClass() == null) {
        createType(dynamicClassLoader,descriptor,project);
      }
    }
    project.convertClassNamesToClasses(dynamicClassLoader);
  }
  return project;
}","public static Project loadDynamicProject(Project project,DatabaseLogin login,DynamicClassLoader dynamicClassLoader){
  if (project != null) {
    if (login == null) {
      if (project.getLogin() == null) {
        project.setLogin(new DatabaseLogin());
      }
    }
 else {
      project.setLogin(login);
    }
    if (project.getLogin().getPlatform() == null) {
      project.getLogin().setPlatform(new DatabasePlatform());
    }
    project.getLogin().getPlatform().getConversionManager().setLoader(dynamicClassLoader);
    for (Iterator<?> i=project.getAliasDescriptors().values().iterator(); i.hasNext(); ) {
      ClassDescriptor descriptor=(ClassDescriptor)i.next();
      if (descriptor.getJavaClass() == null) {
        createType(dynamicClassLoader,descriptor,project);
      }
    }
    project.convertClassNamesToClasses(dynamicClassLoader);
  }
  return project;
}"
66762,"/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 */
public void resolveReferences(AbstractSession session){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object currentObject=reference.getSourceObject();
      Object container=null;
      if (mapping.getReuseContainer()) {
        container=mapping.getAttributeAccessor().getAttributeValueFromObject(currentObject);
      }
 else {
        container=cPolicy.containerInstance();
      }
      createPKVectorsFromMap(reference);
      for (Iterator pkIt=reference.getPrimaryKeys().iterator(); pkIt.hasNext(); ) {
        Vector pkVector=(Vector)pkIt.next();
        Object value=session.getIdentityMapAccessor().getFromIdentityMap(pkVector,reference.getTargetClass());
        if (value != null) {
          cPolicy.addInto(value,container,session);
        }
      }
      mapping.setAttributeValueInObject(currentObject,container);
      if (mapping.getBidirectionalTargetAccessor() != null) {
        Object iterator=cPolicy.iteratorFor(container);
        while (cPolicy.hasNext(iterator)) {
          Object next=cPolicy.next(iterator,session);
          if (mapping.getBidirectionalTargetContainerPolicy() == null) {
            mapping.getBidirectionalTargetAccessor().setAttributeValueInObject(next,currentObject);
          }
 else {
            Object backpointerContainer=mapping.getBidirectionalTargetAccessor().getAttributeValueFromObject(next);
            if (backpointerContainer == null) {
              backpointerContainer=mapping.getBidirectionalTargetContainerPolicy().containerInstance();
              mapping.getBidirectionalTargetAccessor().setAttributeValueInObject(next,backpointerContainer);
            }
            mapping.getBidirectionalTargetContainerPolicy().addInto(currentObject,backpointerContainer,session);
          }
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      Object value=session.getIdentityMapAccessor().getFromIdentityMap(reference.getPrimaryKeys(),reference.getTargetClass());
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      AttributeAccessor backpointerAccessor=mapping.getBidirectionalTargetAccessor();
      if (backpointerAccessor != null) {
        if (mapping.getBidirectionalTargetContainerPolicy() == null) {
          mapping.getBidirectionalTargetAccessor().setAttributeValueInObject(value,reference.getSourceObject());
        }
 else {
          Object backpointerContainer=mapping.getBidirectionalTargetAccessor().getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=mapping.getBidirectionalTargetContainerPolicy().containerInstance();
            mapping.getBidirectionalTargetAccessor().setAttributeValueInObject(value,backpointerContainer);
          }
          mapping.getBidirectionalTargetContainerPolicy().addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList();
}","/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 */
public void resolveReferences(AbstractSession session){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object currentObject=reference.getSourceObject();
      Object container=null;
      if (mapping.getReuseContainer()) {
        container=mapping.getAttributeAccessor().getAttributeValueFromObject(currentObject);
      }
 else {
        container=cPolicy.containerInstance();
      }
      createPKVectorsFromMap(reference);
      for (Iterator pkIt=reference.getPrimaryKeys().iterator(); pkIt.hasNext(); ) {
        Vector pkVector=(Vector)pkIt.next();
        Object value=session.getIdentityMapAccessor().getFromIdentityMap(pkVector,reference.getTargetClass());
        if (value != null) {
          cPolicy.addInto(value,container,session);
        }
      }
      mapping.setAttributeValueInObject(currentObject,container);
      if (mapping.getInverseReferenceMapping() != null) {
        Object iterator=cPolicy.iteratorFor(container);
        while (cPolicy.hasNext(iterator)) {
          Object next=cPolicy.next(iterator,session);
          if (mapping.getInverseReferenceMapping().getContainerPolicy() == null) {
            mapping.getInverseReferenceMapping().getAttributeAccessor().setAttributeValueInObject(next,currentObject);
          }
 else {
            Object backpointerContainer=mapping.getInverseReferenceMapping().getAttributeAccessor().getAttributeValueFromObject(next);
            if (backpointerContainer == null) {
              backpointerContainer=mapping.getInverseReferenceMapping().getContainerPolicy().containerInstance();
              mapping.getInverseReferenceMapping().getAttributeAccessor().setAttributeValueInObject(next,backpointerContainer);
            }
            mapping.getInverseReferenceMapping().getContainerPolicy().addInto(currentObject,backpointerContainer,session);
          }
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      Object value=session.getIdentityMapAccessor().getFromIdentityMap(reference.getPrimaryKeys(),reference.getTargetClass());
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      if (mapping.getInverseReferenceMapping() != null) {
        AttributeAccessor backpointerAccessor=mapping.getInverseReferenceMapping().getAttributeAccessor();
        if (mapping.getInverseReferenceMapping().getContainerPolicy() == null) {
          backpointerAccessor.setAttributeValueInObject(value,reference.getSourceObject());
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=mapping.getInverseReferenceMapping().getContainerPolicy().containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          mapping.getInverseReferenceMapping().getContainerPolicy().addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList();
}"
66763,"public void initialize(org.eclipse.persistence.internal.sessions.AbstractSession session){
  super.initialize(session);
  XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
  Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
  Iterator fieldTransformerIterator;
  DatabaseMapping xmlMapping;
  AbstractTransformationMapping transformationMapping;
  FieldTransformerNodeValue fieldTransformerNodeValue;
  Object[] nextFieldToTransformer;
  TypeNodeValue typeNodeValue;
  NodeValue mappingNodeValue=null;
  XMLField xmlField;
  while (mappingIterator.hasNext()) {
    xmlMapping=(DatabaseMapping)mappingIterator.next();
    xmlField=(XMLField)xmlMapping.getField();
    if (xmlMapping.isTransformationMapping()) {
      transformationMapping=(AbstractTransformationMapping)xmlMapping;
      addTransformationMapping(transformationMapping);
      fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
      while (fieldTransformerIterator.hasNext()) {
        fieldTransformerNodeValue=new FieldTransformerNodeValue();
        nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
        xmlField=(XMLField)nextFieldToTransformer[0];
        fieldTransformerNodeValue.setXMLField(xmlField);
        fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
        addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
 else {
      if (xmlMapping.isAbstractDirectMapping()) {
        mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeObjectMapping()) {
        mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
        mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeCollectionMapping()) {
        mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyObjectMapping) {
        mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyCollectionMapping) {
        mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyAttributeMapping) {
        mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataMapping) {
        mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
        mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentMapping) {
        mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentCollectionMapping) {
        mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLCollectionReferenceMapping) {
        XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
        List fields=xmlColMapping.getFields();
        XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
        XPathNode branchNode;
        if (null == xmlColMappingField) {
          if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
            addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          branchNode=rootXPathNode;
        }
 else {
          branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
        }
        Iterator fieldIt=fields.iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLObjectReferenceMapping) {
        XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
        Iterator fieldIt=xmlORMapping.getFields().iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceObjectMapping) {
        XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
        firstNodeValue.setNullCapableNodeValue(firstNodeValue);
        this.addNullCapableValue(firstNodeValue);
        addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
          nodeValue.setNullCapableNodeValue(firstNodeValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceCollectionMapping) {
        XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
        XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
        HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
        unmarshalValue.setContainerNodeValue(unmarshalValue);
        marshalValue.setFieldToNodeValues(fieldToNodeValues);
        this.addContainerValue(unmarshalValue);
        fieldToNodeValues.put(firstField,unmarshalValue);
        addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
        addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
          nodeValue.setContainerNodeValue(unmarshalValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          fieldToNodeValues.put(next,nodeValue);
        }
        continue;
      }
      if (mappingNodeValue.isContainerValue()) {
        addContainerValue((ContainerValue)mappingNodeValue);
      }
      if (mappingNodeValue.isNullCapableValue()) {
        addNullCapableValue((NullCapableValue)mappingNodeValue);
      }
      if (xmlField != null) {
        addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
 else {
        addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
      if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
        XPathFragment nextFragment=xmlField.getXPathFragment();
        String typeXPath=XMLConstants.EMPTY_STRING;
        while (nextFragment.getNextFragment() != null) {
          typeXPath+=nextFragment.getXPath();
          nextFragment=nextFragment.getNextFragment();
        }
        XMLField typeField=new XMLField();
        if (typeXPath.length() > 0) {
          typeXPath+=""String_Node_Str"";
        }
        typeField.setXPath(typeXPath + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
        typeNodeValue=new TypeNodeValue();
        typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
        addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
  }
  if (xmlDescriptor.hasInheritance()) {
    InheritancePolicy inheritancePolicy=xmlDescriptor.getInheritancePolicy();
    if (!inheritancePolicy.hasClassExtractor()) {
      XMLField classIndicatorField=new XMLField(inheritancePolicy.getClassIndicatorFieldName());
      classIndicatorField.setNamespaceResolver(xmlDescriptor.getNamespaceResolver());
      InheritanceNodeValue inheritanceNodeValue=new InheritanceNodeValue();
      inheritanceNodeValue.setInheritancePolicy(inheritancePolicy);
      addChild(classIndicatorField.getXPathFragment(),inheritanceNodeValue,xmlDescriptor.getNamespaceResolver());
    }
  }
}","public void initialize(org.eclipse.persistence.internal.sessions.AbstractSession session){
  super.initialize(session);
  XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
  Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
  Iterator fieldTransformerIterator;
  DatabaseMapping xmlMapping;
  AbstractTransformationMapping transformationMapping;
  FieldTransformerNodeValue fieldTransformerNodeValue;
  Object[] nextFieldToTransformer;
  TypeNodeValue typeNodeValue;
  NodeValue mappingNodeValue=null;
  XMLField xmlField;
  while (mappingIterator.hasNext()) {
    xmlMapping=(DatabaseMapping)mappingIterator.next();
    if (xmlMapping instanceof XMLInverseReferenceMapping) {
      continue;
    }
    xmlField=(XMLField)xmlMapping.getField();
    if (xmlMapping.isTransformationMapping()) {
      transformationMapping=(AbstractTransformationMapping)xmlMapping;
      addTransformationMapping(transformationMapping);
      fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
      while (fieldTransformerIterator.hasNext()) {
        fieldTransformerNodeValue=new FieldTransformerNodeValue();
        nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
        xmlField=(XMLField)nextFieldToTransformer[0];
        fieldTransformerNodeValue.setXMLField(xmlField);
        fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
        addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
 else {
      if (xmlMapping.isAbstractDirectMapping()) {
        mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeObjectMapping()) {
        mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
        mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeCollectionMapping()) {
        mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyObjectMapping) {
        mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyCollectionMapping) {
        mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyAttributeMapping) {
        mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataMapping) {
        mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
        mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentMapping) {
        mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentCollectionMapping) {
        mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLCollectionReferenceMapping) {
        XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
        List fields=xmlColMapping.getFields();
        XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
        XPathNode branchNode;
        if (null == xmlColMappingField) {
          if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
            addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          branchNode=rootXPathNode;
        }
 else {
          branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
        }
        Iterator fieldIt=fields.iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLObjectReferenceMapping) {
        XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
        Iterator fieldIt=xmlORMapping.getFields().iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceObjectMapping) {
        XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
        firstNodeValue.setNullCapableNodeValue(firstNodeValue);
        this.addNullCapableValue(firstNodeValue);
        addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
          nodeValue.setNullCapableNodeValue(firstNodeValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceCollectionMapping) {
        XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
        XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
        HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
        unmarshalValue.setContainerNodeValue(unmarshalValue);
        marshalValue.setFieldToNodeValues(fieldToNodeValues);
        this.addContainerValue(unmarshalValue);
        fieldToNodeValues.put(firstField,unmarshalValue);
        addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
        addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
          nodeValue.setContainerNodeValue(unmarshalValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          fieldToNodeValues.put(next,nodeValue);
        }
        continue;
      }
      if (mappingNodeValue.isContainerValue()) {
        addContainerValue((ContainerValue)mappingNodeValue);
      }
      if (mappingNodeValue.isNullCapableValue()) {
        addNullCapableValue((NullCapableValue)mappingNodeValue);
      }
      if (xmlField != null) {
        addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
 else {
        addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
      if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
        XPathFragment nextFragment=xmlField.getXPathFragment();
        String typeXPath=XMLConstants.EMPTY_STRING;
        while (nextFragment.getNextFragment() != null) {
          typeXPath+=nextFragment.getXPath();
          nextFragment=nextFragment.getNextFragment();
        }
        XMLField typeField=new XMLField();
        if (typeXPath.length() > 0) {
          typeXPath+=""String_Node_Str"";
        }
        typeField.setXPath(typeXPath + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
        typeNodeValue=new TypeNodeValue();
        typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
        addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
  }
  if (xmlDescriptor.hasInheritance()) {
    InheritancePolicy inheritancePolicy=xmlDescriptor.getInheritancePolicy();
    if (!inheritancePolicy.hasClassExtractor()) {
      XMLField classIndicatorField=new XMLField(inheritancePolicy.getClassIndicatorFieldName());
      classIndicatorField.setNamespaceResolver(xmlDescriptor.getNamespaceResolver());
      InheritanceNodeValue inheritanceNodeValue=new InheritanceNodeValue();
      inheritanceNodeValue.setInheritancePolicy(inheritancePolicy);
      addChild(classIndicatorField.getXPathFragment(),inheritanceNodeValue,xmlDescriptor.getNamespaceResolver());
    }
  }
}"
66764,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping.getConverter(),xPathFragment,collection);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,(XMLMapping)xmlCompositeCollectionMapping,(XMLConverter)xmlCompositeCollectionMapping.getConverter(),unmarshalRecord,true,collection);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping.getConverter(),xPathFragment,collection);
      return;
    }
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  if (xmlCompositeCollectionMapping.getContainerAccessor() != null) {
    if (xmlCompositeCollectionMapping.getBidirectionalPolicy().getBidirectionalTargetContainerPolicy() == null) {
      xmlCompositeCollectionMapping.getContainerAccessor().setAttributeValueInObject(objectValue,unmarshalRecord.getCurrentObject());
    }
 else {
      Object backpointerContainer=xmlCompositeCollectionMapping.getContainerAccessor().getAttributeValueFromObject(objectValue);
      if (backpointerContainer == null) {
        backpointerContainer=xmlCompositeCollectionMapping.getBidirectionalPolicy().getBidirectionalTargetContainerPolicy().containerInstance();
        xmlCompositeCollectionMapping.getContainerAccessor().setAttributeValueInObject(objectValue,backpointerContainer);
      }
      xmlCompositeCollectionMapping.getBidirectionalPolicy().getBidirectionalTargetContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.setChildRecord(null);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping.getConverter(),xPathFragment,collection);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,(XMLMapping)xmlCompositeCollectionMapping,(XMLConverter)xmlCompositeCollectionMapping.getConverter(),unmarshalRecord,true,collection);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping.getConverter(),xPathFragment,collection);
      return;
    }
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  if (xmlCompositeCollectionMapping.getInverseReferenceMapping() != null) {
    if (xmlCompositeCollectionMapping.getInverseReferenceMapping().getContainerPolicy() == null) {
      xmlCompositeCollectionMapping.getInverseReferenceMapping().getAttributeAccessor().setAttributeValueInObject(objectValue,unmarshalRecord.getCurrentObject());
    }
 else {
      Object backpointerContainer=xmlCompositeCollectionMapping.getInverseReferenceMapping().getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (backpointerContainer == null) {
        backpointerContainer=xmlCompositeCollectionMapping.getInverseReferenceMapping().getContainerPolicy().containerInstance();
        xmlCompositeCollectionMapping.getInverseReferenceMapping().getAttributeAccessor().setAttributeValueInObject(objectValue,backpointerContainer);
      }
      xmlCompositeCollectionMapping.getInverseReferenceMapping().getContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.setChildRecord(null);
}"
66765,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),xPathFragment,null);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,(XMLMapping)xmlCompositeObjectMapping,(XMLConverter)xmlCompositeObjectMapping.getConverter(),unmarshalRecord,false,null);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),xPathFragment,null);
      return;
    }
  }
 else {
    Object object=unmarshalRecord.getChildRecord().getCurrentObject();
    if (xmlCompositeObjectMapping.getConverter() != null) {
      Converter converter=xmlCompositeObjectMapping.getConverter();
      if (converter instanceof XMLConverter) {
        object=((XMLConverter)converter).convertDataValueToObjectValue(object,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        object=converter.convertDataValueToObjectValue(object,unmarshalRecord.getSession());
      }
    }
    unmarshalRecord.setAttributeValue(object,xmlCompositeObjectMapping);
    if (xmlCompositeObjectMapping.getContainerAccessor() != null) {
      if (xmlCompositeObjectMapping.getBidirectionalPolicy().getBidirectionalTargetContainerPolicy() == null) {
        xmlCompositeObjectMapping.getContainerAccessor().setAttributeValueInObject(object,unmarshalRecord.getCurrentObject());
      }
 else {
        Object backpointerContainer=xmlCompositeObjectMapping.getContainerAccessor().getAttributeValueFromObject(object);
        if (backpointerContainer == null) {
          backpointerContainer=xmlCompositeObjectMapping.getBidirectionalPolicy().getBidirectionalTargetContainerPolicy().containerInstance();
          xmlCompositeObjectMapping.getContainerAccessor().setAttributeValueInObject(object,backpointerContainer);
        }
        xmlCompositeObjectMapping.getBidirectionalPolicy().getBidirectionalTargetContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),xPathFragment,null);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,(XMLMapping)xmlCompositeObjectMapping,(XMLConverter)xmlCompositeObjectMapping.getConverter(),unmarshalRecord,false,null);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),xPathFragment,null);
      return;
    }
  }
 else {
    Object object=unmarshalRecord.getChildRecord().getCurrentObject();
    if (xmlCompositeObjectMapping.getConverter() != null) {
      Converter converter=xmlCompositeObjectMapping.getConverter();
      if (converter instanceof XMLConverter) {
        object=((XMLConverter)converter).convertDataValueToObjectValue(object,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        object=converter.convertDataValueToObjectValue(object,unmarshalRecord.getSession());
      }
    }
    unmarshalRecord.setAttributeValue(object,xmlCompositeObjectMapping);
    if (xmlCompositeObjectMapping.getInverseReferenceMapping() != null) {
      if (xmlCompositeObjectMapping.getInverseReferenceMapping().getContainerPolicy() == null) {
        xmlCompositeObjectMapping.getInverseReferenceMapping().getAttributeAccessor().setAttributeValueInObject(object,unmarshalRecord.getCurrentObject());
      }
 else {
        Object backpointerContainer=xmlCompositeObjectMapping.getInverseReferenceMapping().getAttributeAccessor().getAttributeValueFromObject(object);
        if (backpointerContainer == null) {
          backpointerContainer=xmlCompositeObjectMapping.getInverseReferenceMapping().getContainerPolicy().containerInstance();
          xmlCompositeObjectMapping.getInverseReferenceMapping().getAttributeAccessor().setAttributeValueInObject(object,backpointerContainer);
        }
        xmlCompositeObjectMapping.getInverseReferenceMapping().getContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
}"
66766,"public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        xsiType=element.getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
 else {
    Object valueToSet=unmarshalRecord.getChildRecord().getCurrentObject();
    if (xmlCompositeObjectMapping.getConverter() != null) {
      Converter converter=xmlCompositeObjectMapping.getConverter();
      if (converter instanceof XMLConverter) {
        valueToSet=((XMLConverter)converter).convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        valueToSet=converter.convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession());
      }
    }
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    if (xmlCompositeObjectMapping.getContainerAccessor() != null) {
      xmlCompositeObjectMapping.getContainerAccessor().setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    }
  }
}","public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        xsiType=element.getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
 else {
    Object valueToSet=unmarshalRecord.getChildRecord().getCurrentObject();
    if (xmlCompositeObjectMapping.getConverter() != null) {
      Converter converter=xmlCompositeObjectMapping.getConverter();
      if (converter instanceof XMLConverter) {
        valueToSet=((XMLConverter)converter).convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        valueToSet=converter.convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession());
      }
    }
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    if (xmlCompositeObjectMapping.getInverseReferenceMapping() != null) {
      xmlCompositeObjectMapping.getInverseReferenceMapping().getAttributeAccessor().setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    }
  }
}"
66767,"/** 
 * ADVANCED: Adjust the OXM metadata to take into accound ORM mapping metadata,
 */
public void applyORMMetadata(AbstractSession ormSession){
  Iterator ormDescriptors=ormSession.getDescriptors().values().iterator();
  while (ormDescriptors.hasNext()) {
    ClassDescriptor ormDescriptor=(ClassDescriptor)ormDescriptors.next();
    Class javaClass=ormDescriptor.getJavaClass();
    AbstractSession oxmSession=null;
    try {
      oxmSession=this.getSession(javaClass);
    }
 catch (    XMLMarshalException ex) {
    }
    if (oxmSession != null) {
      ClassDescriptor oxmDescriptor=oxmSession.getDescriptor(javaClass);
      Iterator<DatabaseMapping> ormMappings=ormDescriptor.getMappings().iterator();
      while (ormMappings.hasNext()) {
        DatabaseMapping ormMapping=ormMappings.next();
        DatabaseMapping oxmMapping=oxmDescriptor.getMappingForAttributeName(ormMapping.getAttributeName());
        if (oxmMapping != null) {
          AttributeAccessor oxmAccessor=oxmMapping.getAttributeAccessor();
          OrmAttributeAccessor newAccessor=new OrmAttributeAccessor(ormMapping.getAttributeAccessor(),oxmAccessor);
          if (ormMapping.isOneToOneMapping() && ((OneToOneMapping)ormMapping).usesIndirection()) {
            newAccessor.setValueHolderProperty(true);
          }
          newAccessor.setChangeTracking(ormDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy());
          oxmMapping.setAttributeAccessor(newAccessor);
          AttributeAccessor containerAccessor=null;
          Class containerClass=null;
          if (oxmMapping instanceof XMLCompositeObjectMapping) {
            containerAccessor=((XMLCompositeObjectMapping)oxmMapping).getContainerAccessor();
            containerClass=((XMLCompositeObjectMapping)oxmMapping).getReferenceClass();
          }
 else           if (oxmMapping instanceof XMLCompositeCollectionMapping) {
            containerAccessor=((XMLCompositeCollectionMapping)oxmMapping).getContainerAccessor();
            containerClass=((XMLCompositeCollectionMapping)oxmMapping).getReferenceClass();
          }
          if (containerAccessor != null) {
            ClassDescriptor containerDescriptor=ormSession.getDescriptor(containerClass);
            if (containerDescriptor != null) {
              DatabaseMapping ormContainerMapping=containerDescriptor.getMappingForAttributeName(containerAccessor.getAttributeName());
              if (ormContainerMapping != null) {
                OrmAttributeAccessor ormAccessor=new OrmAttributeAccessor(ormContainerMapping.getAttributeAccessor(),containerAccessor);
                ormAccessor.setChangeTracking(containerDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy());
                ormAccessor.setValueHolderProperty(ormContainerMapping instanceof OneToOneMapping && ((OneToOneMapping)ormContainerMapping).usesIndirection());
                if (oxmMapping instanceof XMLCompositeObjectMapping) {
                  ((XMLCompositeObjectMapping)oxmMapping).setContainerAccessor(ormAccessor);
                }
 else                 if (oxmMapping instanceof XMLCompositeCollectionMapping) {
                  ((XMLCompositeCollectionMapping)oxmMapping).setContainerAccessor(ormAccessor);
                }
              }
            }
          }
        }
      }
      Iterator<DatabaseMapping> oxmMappingsIterator=oxmDescriptor.getMappings().iterator();
      while (oxmMappingsIterator.hasNext()) {
        DatabaseMapping nextMapping=oxmMappingsIterator.next();
        if (nextMapping instanceof XMLObjectReferenceMapping) {
          XMLObjectReferenceMapping refMapping=(XMLObjectReferenceMapping)nextMapping;
          if (refMapping.getBidirectionalTargetAccessor() != null && refMapping.getBidirectionalTargetContainerPolicy() != null) {
            ClassDescriptor refDescriptor=ormSession.getClassDescriptor(refMapping.getReferenceClass());
            if (refDescriptor != null) {
              DatabaseMapping backpointerMapping=refDescriptor.getMappingForAttributeName(refMapping.getBidirectionalTargetAttributeName());
              if (backpointerMapping != null && backpointerMapping.isCollectionMapping()) {
                refMapping.setBidirectionalTargetContainerClass(((CollectionMapping)backpointerMapping).getContainerPolicy().getContainerClass());
              }
            }
          }
        }
      }
    }
  }
}","/** 
 * ADVANCED: Adjust the OXM metadata to take into accound ORM mapping metadata,
 */
public void applyORMMetadata(AbstractSession ormSession){
  Iterator ormDescriptors=ormSession.getDescriptors().values().iterator();
  while (ormDescriptors.hasNext()) {
    ClassDescriptor ormDescriptor=(ClassDescriptor)ormDescriptors.next();
    Class javaClass=ormDescriptor.getJavaClass();
    AbstractSession oxmSession=null;
    try {
      oxmSession=this.getSession(javaClass);
    }
 catch (    XMLMarshalException ex) {
    }
    if (oxmSession != null) {
      ClassDescriptor oxmDescriptor=oxmSession.getDescriptor(javaClass);
      Iterator<DatabaseMapping> ormMappings=ormDescriptor.getMappings().iterator();
      while (ormMappings.hasNext()) {
        DatabaseMapping ormMapping=ormMappings.next();
        DatabaseMapping oxmMapping=oxmDescriptor.getMappingForAttributeName(ormMapping.getAttributeName());
        if (oxmMapping != null) {
          AttributeAccessor oxmAccessor=oxmMapping.getAttributeAccessor();
          OrmAttributeAccessor newAccessor=new OrmAttributeAccessor(ormMapping.getAttributeAccessor(),oxmAccessor);
          if (ormMapping.isOneToOneMapping() && ((OneToOneMapping)ormMapping).usesIndirection()) {
            newAccessor.setValueHolderProperty(true);
          }
          newAccessor.setChangeTracking(ormDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy());
          oxmMapping.setAttributeAccessor(newAccessor);
          AttributeAccessor containerAccessor=null;
          Class containerClass=null;
          if (oxmMapping instanceof XMLCompositeObjectMapping) {
            containerAccessor=((XMLCompositeObjectMapping)oxmMapping).getInverseReferenceMapping().getAttributeAccessor();
            containerClass=((XMLCompositeObjectMapping)oxmMapping).getReferenceClass();
          }
 else           if (oxmMapping instanceof XMLCompositeCollectionMapping) {
            containerAccessor=((XMLCompositeCollectionMapping)oxmMapping).getInverseReferenceMapping().getAttributeAccessor();
            containerClass=((XMLCompositeCollectionMapping)oxmMapping).getReferenceClass();
          }
          if (containerAccessor != null) {
            ClassDescriptor containerDescriptor=ormSession.getDescriptor(containerClass);
            if (containerDescriptor != null) {
              DatabaseMapping ormContainerMapping=containerDescriptor.getMappingForAttributeName(containerAccessor.getAttributeName());
              if (ormContainerMapping != null) {
                OrmAttributeAccessor ormAccessor=new OrmAttributeAccessor(ormContainerMapping.getAttributeAccessor(),containerAccessor);
                ormAccessor.setChangeTracking(containerDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy());
                ormAccessor.setValueHolderProperty(ormContainerMapping instanceof OneToOneMapping && ((OneToOneMapping)ormContainerMapping).usesIndirection());
                if (oxmMapping instanceof XMLCompositeObjectMapping) {
                  ((XMLCompositeObjectMapping)oxmMapping).getInverseReferenceMapping().setAttributeAccessor(ormAccessor);
                }
 else                 if (oxmMapping instanceof XMLCompositeCollectionMapping) {
                  ((XMLCompositeCollectionMapping)oxmMapping).getInverseReferenceMapping().setAttributeAccessor(ormAccessor);
                }
              }
            }
          }
        }
      }
      Iterator<DatabaseMapping> oxmMappingsIterator=oxmDescriptor.getMappings().iterator();
      while (oxmMappingsIterator.hasNext()) {
        DatabaseMapping nextMapping=oxmMappingsIterator.next();
        if (nextMapping instanceof XMLObjectReferenceMapping) {
          XMLObjectReferenceMapping refMapping=(XMLObjectReferenceMapping)nextMapping;
          if (refMapping.getInverseReferenceMapping().getAttributeAccessor() != null && refMapping.getInverseReferenceMapping().getContainerPolicy() != null) {
            ClassDescriptor refDescriptor=ormSession.getClassDescriptor(refMapping.getReferenceClass());
            if (refDescriptor != null) {
              DatabaseMapping backpointerMapping=refDescriptor.getMappingForAttributeName(refMapping.getInverseReferenceMapping().getAttributeName());
              if (backpointerMapping != null && backpointerMapping.isCollectionMapping()) {
                refMapping.getInverseReferenceMapping().getContainerPolicy().setContainerClass(((CollectionMapping)backpointerMapping).getContainerPolicy().getContainerClass());
              }
            }
          }
        }
      }
    }
  }
}"
66768,"/** 
 * INTERNAL: On persist and flush operations we must update any derived id fields.
 */
protected Object updateDerivedIds(Object clone,ClassDescriptor descriptor){
  if (descriptor.hasDerivedId()) {
    ObjectBuilder dependentBuilder=descriptor.getObjectBuilder();
    for (    DatabaseMapping derivesIdMapping : descriptor.getDerivesIdMappinps()) {
      DatabaseMapping derivedIdMapping=derivesIdMapping.getDerivedIdMapping();
      if (derivedIdMapping != null) {
        ClassDescriptor parentDescriptor=derivesIdMapping.getReferenceDescriptor();
        ObjectBuilder parentBuilder=parentDescriptor.getObjectBuilder();
        Object parentClone=derivesIdMapping.getRealAttributeValueFromObject(clone,this);
        if (parentClone != null) {
          Object key;
          if (parentDescriptor.hasDerivedId()) {
            key=updateDerivedIds(parentClone,parentDescriptor);
          }
 else {
            key=parentDescriptor.getCMPPolicy().createPrimaryKeyInstance(parentClone,this);
          }
          if (derivesIdMapping.hasMapsIdValue()) {
            Object aggregateClone=derivedIdMapping.getRealAttributeValueFromObject(clone,this);
            DatabaseMapping aggregateMapping=derivedIdMapping.getReferenceDescriptor().getMappingForAttributeName(derivesIdMapping.getMapsIdValue());
            aggregateMapping.setRealAttributeValueInObject(aggregateClone,key);
          }
 else {
            derivedIdMapping.setRealAttributeValueInObject(clone,key);
          }
          return key;
        }
      }
    }
  }
  return null;
}","/** 
 * INTERNAL: On persist and flush operations we must update any derived id fields.
 */
protected Object updateDerivedIds(Object clone,ClassDescriptor descriptor){
  if (descriptor.hasDerivedId()) {
    ObjectBuilder dependentBuilder=descriptor.getObjectBuilder();
    for (    DatabaseMapping derivesIdMapping : descriptor.getDerivesIdMappinps()) {
      DatabaseMapping derivedIdMapping=derivesIdMapping.getDerivedIdMapping();
      if (derivedIdMapping != null) {
        ClassDescriptor parentDescriptor=derivesIdMapping.getReferenceDescriptor();
        ObjectBuilder parentBuilder=parentDescriptor.getObjectBuilder();
        Object parentClone=derivesIdMapping.getRealAttributeValueFromObject(clone,this);
        if (parentClone != null) {
          Object key;
          if (parentDescriptor.hasDerivedId()) {
            key=updateDerivedIds(parentClone,parentDescriptor);
          }
 else {
            key=parentDescriptor.getCMPPolicy().createPrimaryKeyInstance(parentClone,this);
          }
          if (derivesIdMapping.hasMapsIdValue()) {
            Object aggregateClone=derivedIdMapping.getRealAttributeValueFromObject(clone,this);
            if (aggregateClone == null) {
              aggregateClone=derivedIdMapping.getReferenceDescriptor().getObjectBuilder().buildNewInstance();
              derivedIdMapping.setRealAttributeValueInObject(clone,aggregateClone);
            }
            DatabaseMapping aggregateMapping=derivedIdMapping.getReferenceDescriptor().getMappingForAttributeName(derivesIdMapping.getMapsIdValue());
            aggregateMapping.setRealAttributeValueInObject(aggregateClone,key);
          }
 else {
            derivedIdMapping.setRealAttributeValueInObject(clone,key);
          }
          return key;
        }
      }
    }
  }
  return null;
}"
66769,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  return suite;
}"
66770,"/** 
 * Return if pessimistic locking/select for update nowait is supported for this test platform. Currently testing supports nowait on Oracle, SQLServer. PostgreSQL also supports NOWAIT, but doesn't support the outer joins used in the tests.
 */
public boolean isSelectForUpateNoWaitSupported(){
  DatabasePlatform platform=getServerSession().getPlatform();
  if (!(platform.isOracle() || platform.isSQLServer())) {
    warning(""String_Node_Str"");
    return false;
  }
  return true;
}","public boolean isSelectForUpateNoWaitSupported(String puName){
  DatabasePlatform platform=getServerSession(puName).getPlatform();
  if (!(platform.isOracle() || platform.isSQLServer())) {
    warning(""String_Node_Str"");
    return false;
  }
  return true;
}"
66771,"/** 
 * Return if pessimistic locking/select for update is supported for this test platform. Currently testing supports select for update on Oracle, MySQL, SQLServer, TimesTen. Some of the other platforms may have some support for select for update, but the databases we test with for these do not have sufficient support to pass the tests. TODO: Need to recheck tests on DB2 as it has some support for this. Derby has some support, but does not work with joins (2008-12-01).
 */
public boolean isSelectForUpateSupported(){
  DatabasePlatform platform=getServerSession().getPlatform();
  if (platform.isFirebird() || platform.isH2() || platform.isHSQL()|| platform.isAccess()|| platform.isSybase()|| platform.isSQLAnywhere()|| platform.isDerby()|| platform.isPostgreSQL()) {
    warning(""String_Node_Str"");
    return false;
  }
  return true;
}","public boolean isSelectForUpateSupported(String puName){
  DatabasePlatform platform=getServerSession(puName).getPlatform();
  if (platform.isFirebird() || platform.isH2() || platform.isHSQL()|| platform.isAccess()|| platform.isSybase()|| platform.isSQLAnywhere()|| platform.isDerby()|| platform.isPostgreSQL()) {
    warning(""String_Node_Str"");
    return false;
  }
  return true;
}"
66772,"/** 
 * Return if stored procedures are supported for the database platform for the test database.
 */
public boolean supportsStoredProcedures(){
  DatabasePlatform platform=getServerSession().getPlatform();
  if (platform.isOracle() || platform.isSybase() || platform.isMySQL()|| platform.isSQLServer()) {
    return true;
  }
  warning(""String_Node_Str"");
  return false;
}","public boolean supportsStoredProcedures(String puName){
  DatabasePlatform platform=getServerSession(puName).getPlatform();
  if (platform.isOracle() || platform.isSybase() || platform.isMySQL()|| platform.isSQLServer()) {
    return true;
  }
  warning(""String_Node_Str"");
  return false;
}"
66773,"/** 
 * Tests a named-stored-procedure-query setting
 */
public void testNamedStoredProcedureQuery(){
  EntityManager em=createEntityManager(m_persistenceUnit);
  beginTransaction(em);
  try {
    Address address1=new Address();
    address1.setCity(""String_Node_Str"");
    address1.setPostalCode(""String_Node_Str"");
    address1.setProvince(""String_Node_Str"");
    address1.setStreet(""String_Node_Str"");
    address1.setCountry(""String_Node_Str"");
    em.persist(address1);
    commitTransaction(em);
    Address address2=(Address)em.createNamedQuery(""String_Node_Str"").setParameter(""String_Node_Str"",address1.getId()).getSingleResult();
    assertTrue(""String_Node_Str"",address2.equals(address1));
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
  closeEntityManager(em);
}","/** 
 * Tests a named-stored-procedure-query setting
 */
public void testNamedStoredProcedureQuery(){
  if (!supportsStoredProcedures(m_persistenceUnit)) {
    return;
  }
  EntityManager em=createEntityManager(m_persistenceUnit);
  beginTransaction(em);
  try {
    Address address1=new Address();
    address1.setCity(""String_Node_Str"");
    address1.setPostalCode(""String_Node_Str"");
    address1.setProvince(""String_Node_Str"");
    address1.setStreet(""String_Node_Str"");
    address1.setCountry(""String_Node_Str"");
    em.persist(address1);
    commitTransaction(em);
    Address address2=(Address)em.createNamedQuery(""String_Node_Str"").setParameter(""String_Node_Str"",address1.getId()).getSingleResult();
    assertTrue(""String_Node_Str"",address2.equals(address1));
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
  closeEntityManager(em);
}"
66774,"/** 
 * Tests a named-stored-procedure-query setting
 */
public void testNamedStoredProcedureQueryInOut(){
  EntityManager em=createEntityManager(m_persistenceUnit);
  beginTransaction(em);
  try {
    Address address1=new Address();
    address1.setCity(""String_Node_Str"");
    address1.setPostalCode(""String_Node_Str"");
    address1.setProvince(""String_Node_Str"");
    address1.setStreet(""String_Node_Str"");
    address1.setCountry(""String_Node_Str"");
    em.persist(address1);
    commitTransaction(em);
    Address address2=(Address)em.createNamedQuery(""String_Node_Str"").setParameter(""String_Node_Str"",address1.getId()).getSingleResult();
    assertTrue(""String_Node_Str"",(address1.getId() == address2.getId()) && (address1.getStreet().equals(address2.getStreet())));
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
  closeEntityManager(em);
}","/** 
 * Tests a named-stored-procedure-query setting
 */
public void testNamedStoredProcedureQueryInOut(){
  if (!supportsStoredProcedures(m_persistenceUnit)) {
    return;
  }
  EntityManager em=createEntityManager(m_persistenceUnit);
  beginTransaction(em);
  try {
    Address address1=new Address();
    address1.setCity(""String_Node_Str"");
    address1.setPostalCode(""String_Node_Str"");
    address1.setProvince(""String_Node_Str"");
    address1.setStreet(""String_Node_Str"");
    address1.setCountry(""String_Node_Str"");
    em.persist(address1);
    commitTransaction(em);
    Address address2=(Address)em.createNamedQuery(""String_Node_Str"").setParameter(""String_Node_Str"",address1.getId()).getSingleResult();
    assertTrue(""String_Node_Str"",(address1.getId() == address2.getId()) && (address1.getStreet().equals(address2.getStreet())));
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
  closeEntityManager(em);
}"
66775,"/** 
 * Process a given mapping.
 * @param mapping
 * @param seq
 * @param ct
 * @param schemaForNamespace
 * @param workingSchema
 * @param properties
 * @param descriptors
 */
protected void processMapping(DatabaseMapping mapping,Sequence seq,ComplexType ct,HashMap<String,Schema> schemaForNamespace,Schema workingSchema,SchemaModelGeneratorProperties properties,List<XMLDescriptor> descriptors){
  if (mapping instanceof XMLDirectMapping) {
    processXMLDirectMapping((XMLDirectMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties);
  }
 else   if (mapping instanceof XMLCompositeDirectCollectionMapping) {
    processXMLCompositeDirectCollectionMapping((XMLCompositeDirectCollectionMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties);
  }
 else   if (mapping instanceof XMLCompositeObjectMapping) {
    processXMLCompositeMapping((XMLCompositeObjectMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties,descriptors,false);
  }
 else   if (mapping instanceof XMLCompositeCollectionMapping) {
    processXMLCompositeMapping((XMLCompositeCollectionMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties,descriptors,true);
  }
 else   if (mapping instanceof XMLAnyAttributeMapping) {
    AnyAttribute anyAttribute=new AnyAttribute();
    anyAttribute.setProcessContents(AnyAttribute.LAX);
    ct.setAnyAttribute(anyAttribute);
  }
 else   if (mapping instanceof XMLAnyObjectMapping) {
    processAnyMapping(seq,false);
  }
 else   if (mapping instanceof XMLAnyCollectionMapping) {
    processAnyMapping(seq,true);
  }
 else   if (mapping instanceof XMLChoiceObjectMapping) {
    processXMLChoiceObjectMapping((XMLChoiceObjectMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties,descriptors);
  }
 else   if (mapping instanceof XMLChoiceCollectionMapping) {
    processXMLChoiceCollectionMapping((XMLChoiceCollectionMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties,descriptors);
  }
 else   if (mapping instanceof XMLCollectionReferenceMapping) {
    processXMLObjectReferenceMapping((XMLCollectionReferenceMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties,descriptors,true);
  }
 else   if (mapping instanceof XMLObjectReferenceMapping) {
    processXMLObjectReferenceMapping((XMLObjectReferenceMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties,descriptors,false);
  }
}","/** 
 * Process a given mapping.
 * @param mapping
 * @param seq
 * @param ct
 * @param schemaForNamespace
 * @param workingSchema
 * @param properties
 * @param descriptors
 */
protected void processMapping(DatabaseMapping mapping,Sequence seq,ComplexType ct,HashMap<String,Schema> schemaForNamespace,Schema workingSchema,SchemaModelGeneratorProperties properties,List<XMLDescriptor> descriptors){
  if (mapping instanceof XMLBinaryDataMapping) {
    processXMLBinaryDataMapping((XMLBinaryDataMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties);
  }
 else   if (mapping instanceof XMLBinaryDataCollectionMapping) {
    processXMLBinaryDataCollectionMapping((XMLBinaryDataCollectionMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties);
  }
 else   if (mapping instanceof XMLDirectMapping) {
    processXMLDirectMapping((XMLDirectMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties);
  }
 else   if (mapping instanceof XMLCompositeDirectCollectionMapping) {
    processXMLCompositeDirectCollectionMapping((XMLCompositeDirectCollectionMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties);
  }
 else   if (mapping instanceof XMLCompositeObjectMapping) {
    processXMLCompositeMapping((XMLCompositeObjectMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties,descriptors,false);
  }
 else   if (mapping instanceof XMLCompositeCollectionMapping) {
    processXMLCompositeMapping((XMLCompositeCollectionMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties,descriptors,true);
  }
 else   if (mapping instanceof XMLAnyAttributeMapping) {
    AnyAttribute anyAttribute=new AnyAttribute();
    anyAttribute.setProcessContents(AnyAttribute.LAX);
    ct.setAnyAttribute(anyAttribute);
  }
 else   if (mapping instanceof XMLAnyObjectMapping) {
    processAnyMapping(seq,false);
  }
 else   if (mapping instanceof XMLAnyCollectionMapping) {
    processAnyMapping(seq,true);
  }
 else   if (mapping instanceof XMLChoiceObjectMapping) {
    processXMLChoiceObjectMapping((XMLChoiceObjectMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties,descriptors);
  }
 else   if (mapping instanceof XMLChoiceCollectionMapping) {
    processXMLChoiceCollectionMapping((XMLChoiceCollectionMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties,descriptors);
  }
 else   if (mapping instanceof XMLCollectionReferenceMapping) {
    processXMLObjectReferenceMapping((XMLCollectionReferenceMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties,descriptors,true);
  }
 else   if (mapping instanceof XMLObjectReferenceMapping) {
    processXMLObjectReferenceMapping((XMLObjectReferenceMapping)mapping,seq,ct,schemaForNamespace,workingSchema,properties,descriptors,false);
  }
}"
66776,"/** 
 * Convenience method for determining if an element already exists in a given sequence.  If an element exists whose name is equal to 'elementName' true is returned.  False otherwise.
 * @param elementName
 * @param seq
 * @return
 */
protected Element elementExistsInSequence(String elementName,String refString,Sequence seq){
  if (seq.isEmpty()) {
    return null;
  }
  List<Element> existingElements=seq.getOrderedElements();
  for (  Element element : existingElements) {
    if ((element.getRef() != null && element.getRef().equals(refString)) || (element.getName() != null && element.getName().equals(elementName))) {
      return element;
    }
  }
  return null;
}","/** 
 * Convenience method for determining if an element already exists in a given sequence.  If an element exists whose name is equal to 'elementName' true is returned.  False otherwise.
 * @param elementName
 * @param seq
 * @return
 */
protected Element elementExistsInSequence(String elementName,String refString,Sequence seq){
  if (seq.isEmpty()) {
    return null;
  }
  List existingElements=seq.getOrderedElements();
  if (existingElements != null) {
    Iterator elementIt=existingElements.iterator();
    while (elementIt.hasNext()) {
      Element element;
      try {
        element=(Element)elementIt.next();
      }
 catch (      ClassCastException cce) {
        continue;
      }
      if ((element.getRef() != null && element.getRef().equals(refString)) || (element.getName() != null && element.getName().equals(elementName))) {
        return element;
      }
    }
  }
  return null;
}"
66777,"/** 
 * Return the schema type as a string for a given QName and Schema.  The schema's  namespace resolver will be used to determine the prefix (if any) to use. 
 * @param schemaType
 * @param workingSchema
 * @return
 */
protected String getSchemaTypeString(QName schemaType,Schema workingSchema){
  String schemaTypeString=schemaType.getLocalPart();
  String uri=schemaType.getNamespaceURI();
  String prefix=workingSchema.getNamespaceResolver().resolveNamespaceURI(uri);
  if (prefix == null && !areNamespacesEqual(uri,workingSchema.getDefaultNamespace())) {
    if (uri.equals(XMLConstants.SCHEMA_URL)) {
      prefix=workingSchema.getNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_PREFIX);
    }
 else     if (uri.equals(XMLConstants.SCHEMA_INSTANCE_URL)) {
      prefix=workingSchema.getNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
    }
 else {
      prefix=workingSchema.getNamespaceResolver().generatePrefix();
    }
    workingSchema.getNamespaceResolver().put(prefix,uri);
  }
  if (prefix != null) {
    schemaTypeString=prefix + XMLConstants.COLON + schemaTypeString;
  }
  return schemaTypeString;
}","/** 
 * Return the schema type as a string for a given QName and Schema.  The schema's  namespace resolver will be used to determine the prefix (if any) to use. 
 * @param schemaType
 * @param workingSchema
 * @return
 */
protected String getSchemaTypeString(QName schemaType,Schema workingSchema){
  String schemaTypeString=schemaType.getLocalPart();
  String uri=schemaType.getNamespaceURI();
  String prefix=workingSchema.getNamespaceResolver().resolveNamespaceURI(uri);
  if (prefix == null && !areNamespacesEqual(uri,workingSchema.getDefaultNamespace())) {
    if (uri.equals(XMLConstants.SCHEMA_URL)) {
      prefix=workingSchema.getNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_PREFIX);
    }
 else     if (uri.equals(XMLConstants.SCHEMA_INSTANCE_URL)) {
      prefix=workingSchema.getNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
    }
 else     if (uri.equals(XMLConstants.REF_URL)) {
      prefix=workingSchema.getNamespaceResolver().generatePrefix(XMLConstants.REF_PREFIX);
    }
 else {
      prefix=workingSchema.getNamespaceResolver().generatePrefix();
    }
    workingSchema.getNamespaceResolver().put(prefix,uri);
  }
  if (prefix != null) {
    schemaTypeString=prefix + XMLConstants.COLON + schemaTypeString;
  }
  return schemaTypeString;
}"
66778,"/** 
 * Default constructor.
 */
public AggregateObjectMapping(){
  aggregateToSourceFieldNames=new HashMap(5);
  overrideManyToManyMappings=new ArrayList<ManyToManyMapping>();
  overrideUnidirectionalOneToManyMappings=new ArrayList<UnidirectionalOneToManyMapping>();
  isNullAllowed=true;
}","/** 
 * Default constructor.
 */
public AggregateObjectMapping(){
  aggregateToSourceFieldNames=new HashMap(5);
  mapsIdMappings=new ArrayList<DatabaseMapping>();
  overrideManyToManyMappings=new ArrayList<ManyToManyMapping>();
  overrideUnidirectionalOneToManyMappings=new ArrayList<UnidirectionalOneToManyMapping>();
  isNullAllowed=true;
}"
66779,"/** 
 * INTERNAL: For an aggregate mapping the reference descriptor is cloned. The cloned descriptor is then assigned primary keys and table names before initialize. Once the cloned descriptor is initialized it is assigned as reference descriptor in the aggregate mapping. This is a very specific behavior for aggregate mappings. The original descriptor is used only for creating clones and after that the aggregate mapping never uses it. Some initialization is done in postInitialize to ensure the target descriptor's references are initialized.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  ClassDescriptor clonedDescriptor=(ClassDescriptor)getReferenceDescriptor().clone();
  if (clonedDescriptor.isChildDescriptor()) {
    ClassDescriptor parentDescriptor=session.getDescriptor(clonedDescriptor.getInheritancePolicy().getParentClass());
    initializeParentInheritance(parentDescriptor,clonedDescriptor,session);
  }
  setReferenceDescriptor(clonedDescriptor);
  for (  ManyToManyMapping overrideMapping : overrideManyToManyMappings) {
    DatabaseMapping mapping=clonedDescriptor.getMappingForAttributeName(overrideMapping.getAttributeName());
    if (mapping.isManyToManyMapping()) {
      ManyToManyMapping mappingClone=(ManyToManyMapping)mapping;
      mappingClone.setRelationTable(overrideMapping.getRelationTable());
      mappingClone.setSourceKeyFields(overrideMapping.getSourceKeyFields());
      mappingClone.setSourceRelationKeyFields(overrideMapping.getSourceRelationKeyFields());
      mappingClone.setTargetKeyFields(overrideMapping.getTargetKeyFields());
      mappingClone.setTargetRelationKeyFields(overrideMapping.getTargetRelationKeyFields());
    }
 else {
    }
  }
  for (  UnidirectionalOneToManyMapping overrideMapping : overrideUnidirectionalOneToManyMappings) {
    DatabaseMapping mapping=clonedDescriptor.getMappingForAttributeName(overrideMapping.getAttributeName());
    if (mapping.isUnidirectionalOneToManyMapping()) {
      UnidirectionalOneToManyMapping mappingClone=(UnidirectionalOneToManyMapping)mapping;
      mappingClone.setSourceKeyFields(overrideMapping.getSourceKeyFields());
      mappingClone.setTargetForeignKeyFields(overrideMapping.getTargetForeignKeyFields());
    }
 else {
    }
  }
  initializeReferenceDescriptor(clonedDescriptor);
  clonedDescriptor.preInitialize(session);
  clonedDescriptor.initialize(session);
  translateFields(clonedDescriptor,session);
  if (clonedDescriptor.hasInheritance() && clonedDescriptor.getInheritancePolicy().hasChildren()) {
    initializeChildInheritance(clonedDescriptor,session);
  }
  setFields(collectFields());
}","/** 
 * INTERNAL: For an aggregate mapping the reference descriptor is cloned. The cloned descriptor is then assigned primary keys and table names before initialize. Once the cloned descriptor is initialized it is assigned as reference descriptor in the aggregate mapping. This is a very specific behavior for aggregate mappings. The original descriptor is used only for creating clones and after that the aggregate mapping never uses it. Some initialization is done in postInitialize to ensure the target descriptor's references are initialized.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  ClassDescriptor clonedDescriptor=(ClassDescriptor)getReferenceDescriptor().clone();
  if (clonedDescriptor.isChildDescriptor()) {
    ClassDescriptor parentDescriptor=session.getDescriptor(clonedDescriptor.getInheritancePolicy().getParentClass());
    initializeParentInheritance(parentDescriptor,clonedDescriptor,session);
  }
  setReferenceDescriptor(clonedDescriptor);
  for (  ManyToManyMapping overrideMapping : overrideManyToManyMappings) {
    DatabaseMapping mapping=clonedDescriptor.getMappingForAttributeName(overrideMapping.getAttributeName());
    if (mapping.isManyToManyMapping()) {
      ManyToManyMapping mappingClone=(ManyToManyMapping)mapping;
      mappingClone.setRelationTable(overrideMapping.getRelationTable());
      mappingClone.setSourceKeyFields(overrideMapping.getSourceKeyFields());
      mappingClone.setSourceRelationKeyFields(overrideMapping.getSourceRelationKeyFields());
      mappingClone.setTargetKeyFields(overrideMapping.getTargetKeyFields());
      mappingClone.setTargetRelationKeyFields(overrideMapping.getTargetRelationKeyFields());
    }
  }
  for (  UnidirectionalOneToManyMapping overrideMapping : overrideUnidirectionalOneToManyMappings) {
    DatabaseMapping mapping=clonedDescriptor.getMappingForAttributeName(overrideMapping.getAttributeName());
    if (mapping.isUnidirectionalOneToManyMapping()) {
      UnidirectionalOneToManyMapping mappingClone=(UnidirectionalOneToManyMapping)mapping;
      mappingClone.setSourceKeyFields(overrideMapping.getSourceKeyFields());
      mappingClone.setTargetForeignKeyFields(overrideMapping.getTargetForeignKeyFields());
    }
  }
  for (  DatabaseMapping mapsIdMapping : mapsIdMappings) {
    DatabaseMapping mapping=clonedDescriptor.getMappingForAttributeName(mapsIdMapping.getAttributeName());
    if (mapping != null) {
      mapping.setIsReadOnly(true);
    }
  }
  initializeReferenceDescriptor(clonedDescriptor);
  clonedDescriptor.preInitialize(session);
  clonedDescriptor.initialize(session);
  translateFields(clonedDescriptor,session);
  if (clonedDescriptor.hasInheritance() && clonedDescriptor.getInheritancePolicy().hasChildren()) {
    initializeChildInheritance(clonedDescriptor,session);
  }
  setFields(collectFields());
}"
66780,"public CompositePKTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADMIN_CONTRACTTable());
  addTableDefinition(buildADMINTable());
  addTableDefinition(buildSCIENTISTTable());
  addTableDefinition(buildDEPARTMENTTable());
  addTableDefinition(buildDEPT_ADMINTable());
  addTableDefinition(buildCUBICLETable());
  addTableDefinition(buildSARGEANTTable());
  addTableDefinition(buildMASTERCORPORALTable());
  addTableDefinition(buildMAJORTable());
  addTableDefinition(buildMAJORGENERALTable());
  addTableDefinition(buildCAPTAINTable());
  addTableDefinition(buildBRIGADIERGENERALTable());
  addTableDefinition(buildCORPORALTable());
  addTableDefinition(buildPRIVATETable());
  addTableDefinition(buildGENERALTable());
  addTableDefinition(buildLIEUTENANTGENERALTable());
  addTableDefinition(buildLIEUTENANTTable());
  addTableDefinition(buildSECONDLIEUTENANTTable());
  addTableDefinition(buildOFFICERCADETTable());
  addTableDefinition(buildLACKEYTable());
  addTableDefinition(buildLACKEYCREWTable());
  addTableDefinition(buildOFFICETable());
  addTableDefinition(buildBOOKIETable());
  addTableDefinition(buildCELLNUMBERTable());
  addTableDefinition(buildADMINPOOLTable());
}","public CompositePKTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADMIN_CONTRACTTable());
  addTableDefinition(buildADMINTable());
  addTableDefinition(buildSCIENTISTTable());
  addTableDefinition(buildDEPARTMENTTable());
  addTableDefinition(buildDEPT_ADMINTable());
  addTableDefinition(buildCUBICLETable());
  addTableDefinition(buildSARGEANTTable());
  addTableDefinition(buildMASTERCORPORALTable());
  addTableDefinition(buildMASTERCORPORALCLONETable());
  addTableDefinition(buildMAJORTable());
  addTableDefinition(buildMAJORGENERALTable());
  addTableDefinition(buildCAPTAINTable());
  addTableDefinition(buildBRIGADIERGENERALTable());
  addTableDefinition(buildCORPORALTable());
  addTableDefinition(buildPRIVATETable());
  addTableDefinition(buildGENERALTable());
  addTableDefinition(buildLIEUTENANTGENERALTable());
  addTableDefinition(buildLIEUTENANTTable());
  addTableDefinition(buildSECONDLIEUTENANTTable());
  addTableDefinition(buildOFFICERCADETTable());
  addTableDefinition(buildLACKEYTable());
  addTableDefinition(buildLACKEYCREWTable());
  addTableDefinition(buildOFFICETable());
  addTableDefinition(buildBOOKIETable());
  addTableDefinition(buildCELLNUMBERTable());
  addTableDefinition(buildADMINPOOLTable());
}"
66781,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  return suite;
}"
66782,"public boolean isSelectForUpateSupported(String puName){
  DatabasePlatform platform=getServerSession(puName).getPlatform();
  if (platform.isFirebird() || platform.isH2() || platform.isHSQL()|| platform.isAccess()|| platform.isSybase()|| platform.isSQLAnywhere()|| platform.isDerby()|| platform.isPostgreSQL()) {
    warning(""String_Node_Str"");
    return false;
  }
  return true;
}","public boolean isSelectForUpateSupported(String puName){
  DatabasePlatform platform=getServerSession(puName).getPlatform();
  if (platform.isFirebird() || platform.isH2() || platform.isHSQL()|| platform.isAccess()|| platform.isSQLAnywhere()|| platform.isDerby()|| platform.isPostgreSQL()) {
    warning(""String_Node_Str"");
    return false;
  }
  return true;
}"
66783,"public void testPESSIMISTIC_ExtendedScope(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (isOnServer() || !isSelectForUpateSupported()) {
    return;
  }
  ServerSession ss=((EntityManagerFactoryImpl)getEntityManagerFactory()).getServerSession();
  boolean shouldSpawnThread=!isSelectForUpateNoWaitSupported();
  long timeToWait=1000;
  String errorMsg=""String_Node_Str"";
  LockModeType lockMode=LockModeType.PESSIMISTIC_WRITE;
  Employee emp=new Employee();
  emp.setFirstName(""String_Node_Str"");
  emp.setLastName(""String_Node_Str"");
  emp.addResponsibility(""String_Node_Str"");
  emp.addResponsibility(""String_Node_Str"");
  SmallProject smallProject=new SmallProject();
  smallProject.setName(""String_Node_Str"");
  emp.addProject(smallProject);
  LargeProject largeProject=new LargeProject();
  largeProject.setName(""String_Node_Str"");
  largeProject.setBudget(5000);
  emp.addProject(largeProject);
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    em.persist(emp);
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
  int id=emp.getId();
  int smallProjId=smallProject.getId();
  clearCache();
  Map<String,Object> properties=new HashMap();
  properties.put(QueryHints.PESSIMISTIC_LOCK_SCOPE,PessimisticLockScope.EXTENDED);
  String forUpdateClause=session.getPlatform().getSelectForUpdateString();
  if (isSelectForUpateNoWaitSupported()) {
    properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
    forUpdateClause=session.getPlatform().getSelectForUpdateNoWaitString();
  }
  String lockingClauseAfterWhereClause=""String_Node_Str"";
  String lockingClauseBeforeWhereClause=""String_Node_Str"";
  if (session.getPlatform().shouldPrintLockingClauseAfterWhereClause()) {
    lockingClauseAfterWhereClause=forUpdateClause;
  }
 else {
    lockingClauseBeforeWhereClause=forUpdateClause;
  }
  boolean[] isObjectCached={false,true};
  String[] testModeArray1={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] testModeArray2={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < testModeArray1.length; i++) {
    String testMode1=testModeArray1[i];
    for (int k=0; k < isObjectCached.length; k++) {
      boolean isObjCached=isObjectCached[k];
      for (int j=0; j < testModeArray2.length; j++) {
        String testMode2=testModeArray2[j];
        boolean isExceptionExpected=!testMode2.equals(""String_Node_Str"");
        EntityManager em1=createEntityManager();
        if (isObjCached) {
          ss.log(SessionLog.FINEST,SessionLog.QUERY,""String_Node_Str"",(Object[])null,null,false);
          em1.find(Employee.class,id);
        }
        Employee emp1;
        try {
          beginTransaction(em1);
          ss.log(SessionLog.FINEST,SessionLog.QUERY,""String_Node_Str"" + testMode1,(Object[])null,null,false);
          if (testMode1.equals(""String_Node_Str"")) {
            Query query1=em1.createQuery(""String_Node_Str"" + id).setLockMode(lockMode).setHint(QueryHints.PESSIMISTIC_LOCK_SCOPE,PessimisticLockScope.EXTENDED);
            if (isSelectForUpateNoWaitSupported()) {
              query1.setHint(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
            }
            emp1=(Employee)query1.getSingleResult();
          }
 else           if (testMode1.equals(""String_Node_Str"")) {
            emp1=em1.find(Employee.class,id,lockMode,properties);
          }
 else {
            emp1=em1.find(Employee.class,id);
            if (testMode1.equals(""String_Node_Str"")) {
              em1.lock(emp1,lockMode,properties);
            }
 else             if (testMode1.equals(""String_Node_Str"")) {
              em1.refresh(emp1,lockMode,properties);
            }
 else {
              fail(""String_Node_Str"" + testMode1);
            }
          }
          TransactionKiller transactionKiller=null;
          EntityManager em2=createEntityManager();
          Employee emp2;
          try {
            beginTransaction(em2);
            ss.log(SessionLog.FINEST,SessionLog.QUERY,""String_Node_Str"" + testMode2,(Object[])null,null,false);
            if (shouldSpawnThread) {
              transactionKiller=new TransactionKiller(em1,timeToWait);
              transactionKiller.start();
            }
            if (testMode2.equals(""String_Node_Str"")) {
              Query query2=em2.createQuery(""String_Node_Str"" + id).setLockMode(lockMode).setHint(QueryHints.PESSIMISTIC_LOCK_SCOPE,PessimisticLockScope.EXTENDED);
              if (isSelectForUpateNoWaitSupported()) {
                query2.setHint(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
              }
              emp2=(Employee)query2.getSingleResult();
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              emp2=em2.find(Employee.class,id,lockMode,properties);
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              em2.createNativeQuery(""String_Node_Str"" + lockingClauseBeforeWhereClause + ""String_Node_Str""+ id+ lockingClauseAfterWhereClause).getSingleResult();
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              em2.createNativeQuery(""String_Node_Str"" + lockingClauseBeforeWhereClause + ""String_Node_Str""+ id+ lockingClauseAfterWhereClause).getSingleResult();
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              em2.createNativeQuery(""String_Node_Str"" + lockingClauseBeforeWhereClause + ""String_Node_Str""+ id+ lockingClauseAfterWhereClause).getResultList();
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              em2.createNativeQuery(""String_Node_Str"" + lockingClauseBeforeWhereClause + ""String_Node_Str""+ id+ lockingClauseAfterWhereClause).getResultList();
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              em2.createNativeQuery(""String_Node_Str"" + lockingClauseBeforeWhereClause + ""String_Node_Str""+ smallProjId+ lockingClauseAfterWhereClause).getSingleResult();
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              em2.createNativeQuery(""String_Node_Str"" + lockingClauseBeforeWhereClause + ""String_Node_Str""+ id+ lockingClauseAfterWhereClause).getResultList();
            }
 else {
              emp2=em2.find(Employee.class,id);
              if (testMode2.equals(""String_Node_Str"")) {
                em2.lock(emp2,lockMode,properties);
              }
 else               if (testMode2.equals(""String_Node_Str"")) {
                em2.refresh(emp2,lockMode,properties);
              }
 else {
                fail(""String_Node_Str"" + testMode2);
              }
            }
            boolean hasKilledTransaction=false;
            if (transactionKiller != null) {
              transactionKiller.shouldKillTransaction=false;
              try {
                transactionKiller.join();
              }
 catch (              InterruptedException intEx) {
              }
              hasKilledTransaction=transactionKiller.hasKilledTransaction;
            }
            if (isExceptionExpected && !hasKilledTransaction) {
              String localErrorMsg=testMode1 + (isObjCached ? ""String_Node_Str"" : ""String_Node_Str"") + testMode2+ ""String_Node_Str"";
              ss.log(SessionLog.FINEST,SessionLog.QUERY,localErrorMsg,(Object[])null,null,false);
              errorMsg+='\n' + localErrorMsg;
            }
          }
 catch (          Exception ex) {
            if (transactionKiller != null) {
              transactionKiller.shouldKillTransaction=false;
              try {
                transactionKiller.join();
              }
 catch (              InterruptedException intEx) {
              }
            }
            if (!isExceptionExpected) {
              String localErrorMsg=testMode1 + (isObjCached ? ""String_Node_Str"" : ""String_Node_Str"") + testMode2+ ""String_Node_Str""+ ex.getMessage();
              ss.log(SessionLog.FINEST,SessionLog.QUERY,localErrorMsg,(Object[])null,null,false);
              errorMsg+='\n' + localErrorMsg;
            }
          }
 finally {
            if (isTransactionActive(em2)) {
              rollbackTransaction(em2);
            }
            closeEntityManager(em2);
          }
        }
  finally {
          if (isTransactionActive(em1)) {
            rollbackTransaction(em1);
          }
          closeEntityManager(em1);
        }
        clearCache();
      }
    }
  }
  em=createEntityManager();
  emp=em.find(Employee.class,id);
  try {
    beginTransaction(em);
    Iterator<Project> it=emp.getProjects().iterator();
    while (it.hasNext()) {
      Project project=it.next();
      it.remove();
      em.remove(project);
    }
    em.remove(emp);
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
  if (errorMsg.length() > 0) {
    fail(errorMsg);
  }
}","public void testPESSIMISTIC_ExtendedScope(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (isOnServer() || !isSelectForUpateSupported() || !isPessimisticWriteLockSupported()) {
    return;
  }
  ServerSession ss=((EntityManagerFactoryImpl)getEntityManagerFactory()).getServerSession();
  boolean shouldSpawnThread=!isSelectForUpateNoWaitSupported();
  long timeToWait=1000;
  String errorMsg=""String_Node_Str"";
  LockModeType lockMode=LockModeType.PESSIMISTIC_WRITE;
  Employee emp=new Employee();
  emp.setFirstName(""String_Node_Str"");
  emp.setLastName(""String_Node_Str"");
  emp.addResponsibility(""String_Node_Str"");
  emp.addResponsibility(""String_Node_Str"");
  SmallProject smallProject=new SmallProject();
  smallProject.setName(""String_Node_Str"");
  emp.addProject(smallProject);
  LargeProject largeProject=new LargeProject();
  largeProject.setName(""String_Node_Str"");
  largeProject.setBudget(5000);
  emp.addProject(largeProject);
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    em.persist(emp);
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
  int id=emp.getId();
  int smallProjId=smallProject.getId();
  clearCache();
  Map<String,Object> properties=new HashMap();
  properties.put(QueryHints.PESSIMISTIC_LOCK_SCOPE,PessimisticLockScope.EXTENDED);
  String forUpdateClause=session.getPlatform().getSelectForUpdateString();
  if (isSelectForUpateNoWaitSupported()) {
    properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
    forUpdateClause=session.getPlatform().getSelectForUpdateNoWaitString();
  }
  String lockingClauseAfterWhereClause=""String_Node_Str"";
  String lockingClauseBeforeWhereClause=""String_Node_Str"";
  if (session.getPlatform().shouldPrintLockingClauseAfterWhereClause()) {
    lockingClauseAfterWhereClause=forUpdateClause;
  }
 else {
    lockingClauseBeforeWhereClause=forUpdateClause;
  }
  boolean[] isObjectCached={false,true};
  String[] testModeArray1={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] testModeArray2={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < testModeArray1.length; i++) {
    String testMode1=testModeArray1[i];
    for (int k=0; k < isObjectCached.length; k++) {
      boolean isObjCached=isObjectCached[k];
      for (int j=0; j < testModeArray2.length; j++) {
        String testMode2=testModeArray2[j];
        boolean isExceptionExpected=!testMode2.equals(""String_Node_Str"");
        EntityManager em1=createEntityManager();
        if (isObjCached) {
          ss.log(SessionLog.FINEST,SessionLog.QUERY,""String_Node_Str"",(Object[])null,null,false);
          em1.find(Employee.class,id);
        }
        Employee emp1;
        try {
          beginTransaction(em1);
          ss.log(SessionLog.FINEST,SessionLog.QUERY,""String_Node_Str"" + testMode1,(Object[])null,null,false);
          if (testMode1.equals(""String_Node_Str"")) {
            Query query1=em1.createQuery(""String_Node_Str"" + id).setLockMode(lockMode).setHint(QueryHints.PESSIMISTIC_LOCK_SCOPE,PessimisticLockScope.EXTENDED);
            if (isSelectForUpateNoWaitSupported()) {
              query1.setHint(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
            }
            emp1=(Employee)query1.getSingleResult();
          }
 else           if (testMode1.equals(""String_Node_Str"")) {
            emp1=em1.find(Employee.class,id,lockMode,properties);
          }
 else {
            emp1=em1.find(Employee.class,id);
            if (testMode1.equals(""String_Node_Str"")) {
              em1.lock(emp1,lockMode,properties);
            }
 else             if (testMode1.equals(""String_Node_Str"")) {
              em1.refresh(emp1,lockMode,properties);
            }
 else {
              fail(""String_Node_Str"" + testMode1);
            }
          }
          TransactionKiller transactionKiller=null;
          EntityManager em2=createEntityManager();
          Employee emp2;
          try {
            beginTransaction(em2);
            ss.log(SessionLog.FINEST,SessionLog.QUERY,""String_Node_Str"" + testMode2,(Object[])null,null,false);
            if (shouldSpawnThread) {
              transactionKiller=new TransactionKiller(em1,timeToWait);
              transactionKiller.start();
            }
            if (testMode2.equals(""String_Node_Str"")) {
              Query query2=em2.createQuery(""String_Node_Str"" + id).setLockMode(lockMode).setHint(QueryHints.PESSIMISTIC_LOCK_SCOPE,PessimisticLockScope.EXTENDED);
              if (isSelectForUpateNoWaitSupported()) {
                query2.setHint(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
              }
              emp2=(Employee)query2.getSingleResult();
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              emp2=em2.find(Employee.class,id,lockMode,properties);
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              em2.createNativeQuery(""String_Node_Str"" + lockingClauseBeforeWhereClause + ""String_Node_Str""+ id+ lockingClauseAfterWhereClause).getSingleResult();
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              em2.createNativeQuery(""String_Node_Str"" + lockingClauseBeforeWhereClause + ""String_Node_Str""+ id+ lockingClauseAfterWhereClause).getSingleResult();
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              em2.createNativeQuery(""String_Node_Str"" + lockingClauseBeforeWhereClause + ""String_Node_Str""+ id+ lockingClauseAfterWhereClause).getResultList();
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              em2.createNativeQuery(""String_Node_Str"" + lockingClauseBeforeWhereClause + ""String_Node_Str""+ id+ lockingClauseAfterWhereClause).getResultList();
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              em2.createNativeQuery(""String_Node_Str"" + lockingClauseBeforeWhereClause + ""String_Node_Str""+ smallProjId+ lockingClauseAfterWhereClause).getSingleResult();
            }
 else             if (testMode2.equals(""String_Node_Str"")) {
              em2.createNativeQuery(""String_Node_Str"" + lockingClauseBeforeWhereClause + ""String_Node_Str""+ id+ lockingClauseAfterWhereClause).getResultList();
            }
 else {
              emp2=em2.find(Employee.class,id);
              if (testMode2.equals(""String_Node_Str"")) {
                em2.lock(emp2,lockMode,properties);
              }
 else               if (testMode2.equals(""String_Node_Str"")) {
                em2.refresh(emp2,lockMode,properties);
              }
 else {
                fail(""String_Node_Str"" + testMode2);
              }
            }
            boolean hasKilledTransaction=false;
            if (transactionKiller != null) {
              transactionKiller.shouldKillTransaction=false;
              try {
                transactionKiller.join();
              }
 catch (              InterruptedException intEx) {
              }
              hasKilledTransaction=transactionKiller.hasKilledTransaction;
            }
            if (isExceptionExpected && !hasKilledTransaction) {
              String localErrorMsg=testMode1 + (isObjCached ? ""String_Node_Str"" : ""String_Node_Str"") + testMode2+ ""String_Node_Str"";
              ss.log(SessionLog.FINEST,SessionLog.QUERY,localErrorMsg,(Object[])null,null,false);
              errorMsg+='\n' + localErrorMsg;
            }
          }
 catch (          Exception ex) {
            if (transactionKiller != null) {
              transactionKiller.shouldKillTransaction=false;
              try {
                transactionKiller.join();
              }
 catch (              InterruptedException intEx) {
              }
            }
            if (!isExceptionExpected) {
              String localErrorMsg=testMode1 + (isObjCached ? ""String_Node_Str"" : ""String_Node_Str"") + testMode2+ ""String_Node_Str""+ ex.getMessage();
              ss.log(SessionLog.FINEST,SessionLog.QUERY,localErrorMsg,(Object[])null,null,false);
              errorMsg+='\n' + localErrorMsg;
            }
          }
 finally {
            if (isTransactionActive(em2)) {
              rollbackTransaction(em2);
            }
            closeEntityManager(em2);
          }
        }
  finally {
          if (isTransactionActive(em1)) {
            rollbackTransaction(em1);
          }
          closeEntityManager(em1);
        }
        clearCache();
      }
    }
  }
  em=createEntityManager();
  emp=em.find(Employee.class,id);
  try {
    beginTransaction(em);
    Iterator<Project> it=emp.getProjects().iterator();
    while (it.hasNext()) {
      Project project=it.next();
      it.remove();
      em.remove(project);
    }
    em.remove(emp);
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
  if (errorMsg.length() > 0) {
    fail(errorMsg);
  }
}"
66784,"public void testLockWithJoinedInheritanceStrategy(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateSupported()) {
    Employee emp=null;
    LargeProject largeProject=null;
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      emp=new Employee();
      largeProject=new LargeProject();
      largeProject.setName(""String_Node_Str"");
      largeProject.setBudget(50000);
      emp.addProject(largeProject);
      em.persist(emp);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    try {
      beginTransaction(em);
      emp=em.find(Employee.class,emp.getId());
      Project lp1=emp.getProjects().iterator().next();
      em.lock(lp1,LockModeType.PESSIMISTIC_WRITE);
      lp1.setName(""String_Node_Str"");
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        LargeProject lp2=em2.find(LargeProject.class,lp1.getId());
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.lock(lp2,LockModeType.PESSIMISTIC_WRITE,properties);
      }
 catch (      PersistenceException ex) {
        if (!(ex instanceof javax.persistence.PessimisticLockException)) {
          throw ex;
        }
      }
 finally {
        rollbackTransaction(em2);
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
  }
}","public void testLockWithJoinedInheritanceStrategy(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (!isOnServer() && isSelectForUpateSupported()) {
    Employee emp=null;
    LargeProject largeProject=null;
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      emp=new Employee();
      largeProject=new LargeProject();
      largeProject.setName(""String_Node_Str"");
      largeProject.setBudget(50000);
      emp.addProject(largeProject);
      em.persist(emp);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    try {
      beginTransaction(em);
      emp=em.find(Employee.class,emp.getId());
      Project lp1=emp.getProjects().iterator().next();
      em.lock(lp1,LockModeType.PESSIMISTIC_WRITE);
      lp1.setName(""String_Node_Str"");
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        LargeProject lp2=em2.find(LargeProject.class,lp1.getId());
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.lock(lp2,LockModeType.PESSIMISTIC_WRITE,properties);
      }
 catch (      PersistenceException ex) {
        if (!(ex instanceof javax.persistence.PessimisticLockException)) {
          throw ex;
        }
      }
 finally {
        rollbackTransaction(em2);
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
  }
}"
66785,"public void testPESSIMISTIC_READLockWithNoChanges(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateSupported()) {
    Employee employee=null;
    Integer version1;
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      employee=new Employee();
      employee.setFirstName(""String_Node_Str"");
      employee.setLastName(""String_Node_Str"");
      em.persist(employee);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    version1=employee.getVersion();
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_READ);
      commitTransaction(em);
      assertTrue(""String_Node_Str"",version1.intValue() == employee.getVersion().intValue());
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
  }
}","public void testPESSIMISTIC_READLockWithNoChanges(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (!isOnServer() && isSelectForUpateSupported()) {
    Employee employee=null;
    Integer version1;
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      employee=new Employee();
      employee.setFirstName(""String_Node_Str"");
      employee.setLastName(""String_Node_Str"");
      em.persist(employee);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    version1=employee.getVersion();
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_READ);
      commitTransaction(em);
      assertTrue(""String_Node_Str"",version1.intValue() == employee.getVersion().intValue());
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
  }
}"
66786,"public void testPESSIMISTIC_FORCE_INCREMENTLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isJPA10() && isSelectForUpateSupported()) {
    Employee employee=null;
    Integer version1;
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      employee=new Employee();
      employee.setFirstName(""String_Node_Str"");
      employee.setLastName(""String_Node_Str"");
      em.persist(employee);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    version1=employee.getVersion();
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_FORCE_INCREMENT);
      commitTransaction(em);
      assertTrue(""String_Node_Str"",version1.intValue() < employee.getVersion().intValue());
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
  }
}","public void testPESSIMISTIC_FORCE_INCREMENTLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (!isJPA10() && isSelectForUpateSupported()) {
    Employee employee=null;
    Integer version1;
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      employee=new Employee();
      employee.setFirstName(""String_Node_Str"");
      employee.setLastName(""String_Node_Str"");
      em.persist(employee);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    version1=employee.getVersion();
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_FORCE_INCREMENT);
      commitTransaction(em);
      assertTrue(""String_Node_Str"",version1.intValue() < employee.getVersion().intValue());
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
  }
}"
66787,"public void testRefreshPESSIMISTIC_WRITELock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateNoWaitSupported()) {
    EntityManager em=createEntityManager();
    Department dept=null;
    try {
      beginTransaction(em);
      dept=new Department();
      dept.setName(""String_Node_Str"");
      em.persist(dept);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      dept=em.find(Department.class,dept.getId());
      em.lock(dept,LockModeType.PESSIMISTIC_WRITE);
      dept.setName(""String_Node_Str"");
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        Department dept2=em2.find(Department.class,dept.getId());
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.refresh(dept2,LockModeType.PESSIMISTIC_WRITE,properties);
      }
 catch (      PersistenceException ex) {
        if (ex instanceof javax.persistence.PessimisticLockException) {
          pessimisticLockException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}","public void testRefreshPESSIMISTIC_WRITELock(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (!isOnServer() && isSelectForUpateNoWaitSupported()) {
    EntityManager em=createEntityManager();
    Department dept=null;
    try {
      beginTransaction(em);
      dept=new Department();
      dept.setName(""String_Node_Str"");
      em.persist(dept);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      dept=em.find(Department.class,dept.getId());
      em.lock(dept,LockModeType.PESSIMISTIC_WRITE);
      dept.setName(""String_Node_Str"");
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        Department dept2=em2.find(Department.class,dept.getId());
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.refresh(dept2,LockModeType.PESSIMISTIC_WRITE,properties);
      }
 catch (      PersistenceException ex) {
        if (ex instanceof javax.persistence.PessimisticLockException) {
          pessimisticLockException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}"
66788,"public void testPESSIMISTIC_READLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateNoWaitSupported()) {
    EntityManager em=createEntityManager();
    Department dept=null;
    try {
      beginTransaction(em);
      dept=new Department();
      dept.setName(""String_Node_Str"");
      em.persist(dept);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      dept=em.find(Department.class,dept.getId());
      em.lock(dept,LockModeType.PESSIMISTIC_READ);
      dept.setName(""String_Node_Str"");
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        Department dept2=em2.find(Department.class,dept.getId());
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.lock(dept2,LockModeType.PESSIMISTIC_READ,properties);
      }
 catch (      PersistenceException ex) {
        if (ex instanceof javax.persistence.PessimisticLockException) {
          pessimisticLockException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        rollbackTransaction(em2);
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}","public void testPESSIMISTIC_READLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (!isOnServer() && isSelectForUpateNoWaitSupported()) {
    EntityManager em=createEntityManager();
    Department dept=null;
    try {
      beginTransaction(em);
      dept=new Department();
      dept.setName(""String_Node_Str"");
      em.persist(dept);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      dept=em.find(Department.class,dept.getId());
      em.lock(dept,LockModeType.PESSIMISTIC_READ);
      dept.setName(""String_Node_Str"");
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        Department dept2=em2.find(Department.class,dept.getId());
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.lock(dept2,LockModeType.PESSIMISTIC_READ,properties);
      }
 catch (      PersistenceException ex) {
        if (ex instanceof javax.persistence.PessimisticLockException) {
          pessimisticLockException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        rollbackTransaction(em2);
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}"
66789,"public void testPESSIMISTIC_WRITELockWithNoChanges(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateSupported()) {
    Employee employee=null;
    Integer version1;
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      employee=new Employee();
      employee.setFirstName(""String_Node_Str"");
      employee.setLastName(""String_Node_Str"");
      em.persist(employee);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    version1=employee.getVersion();
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_WRITE);
      commitTransaction(em);
      assertTrue(""String_Node_Str"",version1.intValue() == employee.getVersion().intValue());
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
  }
}","public void testPESSIMISTIC_WRITELockWithNoChanges(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (!isOnServer() && isSelectForUpateSupported()) {
    Employee employee=null;
    Integer version1;
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      employee=new Employee();
      employee.setFirstName(""String_Node_Str"");
      employee.setLastName(""String_Node_Str"");
      em.persist(employee);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    version1=employee.getVersion();
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_WRITE);
      commitTransaction(em);
      assertTrue(""String_Node_Str"",version1.intValue() == employee.getVersion().intValue());
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
  }
}"
66790,"public void testPESSIMISTIC_WRITELock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateNoWaitSupported()) {
    EntityManager em=createEntityManager();
    Department dept=null;
    try {
      beginTransaction(em);
      dept=new Department();
      dept.setName(""String_Node_Str"");
      em.persist(dept);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      dept=em.find(Department.class,dept.getId());
      em.lock(dept,LockModeType.PESSIMISTIC_WRITE);
      dept.setName(""String_Node_Str"");
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        Department dept2=em2.find(Department.class,dept.getId());
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.lock(dept2,LockModeType.PESSIMISTIC_WRITE,properties);
      }
 catch (      PersistenceException ex) {
        if (ex instanceof javax.persistence.PessimisticLockException) {
          pessimisticLockException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        rollbackTransaction(em2);
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}","public void testPESSIMISTIC_WRITELock(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (!isOnServer() && isSelectForUpateNoWaitSupported()) {
    EntityManager em=createEntityManager();
    Department dept=null;
    try {
      beginTransaction(em);
      dept=new Department();
      dept.setName(""String_Node_Str"");
      em.persist(dept);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      dept=em.find(Department.class,dept.getId());
      em.lock(dept,LockModeType.PESSIMISTIC_WRITE);
      dept.setName(""String_Node_Str"");
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        Department dept2=em2.find(Department.class,dept.getId());
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.lock(dept2,LockModeType.PESSIMISTIC_WRITE,properties);
      }
 catch (      PersistenceException ex) {
        if (ex instanceof javax.persistence.PessimisticLockException) {
          pessimisticLockException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        rollbackTransaction(em2);
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}"
66791,"public void testRefreshPESSIMISTIC_READLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateNoWaitSupported()) {
    EntityManager em=createEntityManager();
    Department dept=null;
    try {
      beginTransaction(em);
      dept=new Department();
      dept.setName(""String_Node_Str"");
      em.persist(dept);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      dept=em.find(Department.class,dept.getId());
      em.lock(dept,LockModeType.PESSIMISTIC_READ);
      dept.setName(""String_Node_Str"");
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        Department dept2=em2.find(Department.class,dept.getId());
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.refresh(dept2,LockModeType.PESSIMISTIC_READ,properties);
      }
 catch (      PersistenceException ex) {
        if (ex instanceof javax.persistence.PessimisticLockException) {
          pessimisticLockException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}","public void testRefreshPESSIMISTIC_READLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (!isOnServer() && isSelectForUpateNoWaitSupported()) {
    EntityManager em=createEntityManager();
    Department dept=null;
    try {
      beginTransaction(em);
      dept=new Department();
      dept.setName(""String_Node_Str"");
      em.persist(dept);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      dept=em.find(Department.class,dept.getId());
      em.lock(dept,LockModeType.PESSIMISTIC_READ);
      dept.setName(""String_Node_Str"");
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        Department dept2=em2.find(Department.class,dept.getId());
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.refresh(dept2,LockModeType.PESSIMISTIC_READ,properties);
      }
 catch (      PersistenceException ex) {
        if (ex instanceof javax.persistence.PessimisticLockException) {
          pessimisticLockException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}"
66792,"public void testPESSIMISTIC_FORCE_INCREMENTLockOnNonVersionedEntity(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isJPA10()) {
    Department dept=null;
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      dept=new Department();
      em.persist(dept);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    try {
      beginTransaction(em);
      dept=em.find(Department.class,dept.getId(),LockModeType.PESSIMISTIC_FORCE_INCREMENT);
      rollbackTransaction(em);
      fail(""String_Node_Str"");
    }
 catch (    PersistenceException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
    }
 finally {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
    }
  }
}","public void testPESSIMISTIC_FORCE_INCREMENTLockOnNonVersionedEntity(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (!isJPA10()) {
    Department dept=null;
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      dept=new Department();
      em.persist(dept);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    try {
      beginTransaction(em);
      dept=em.find(Department.class,dept.getId(),LockModeType.PESSIMISTIC_FORCE_INCREMENT);
      rollbackTransaction(em);
      fail(""String_Node_Str"");
    }
 catch (    PersistenceException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
    }
 finally {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
    }
  }
}"
66793,"public void testVersionChangeWithReadLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isJPA10() && isSelectForUpateNoWaitSupported()) {
    Employee employee=null;
    Integer version1;
    EntityManager em=createEntityManager();
    beginTransaction(em);
    try {
      employee=new Employee();
      employee.setFirstName(""String_Node_Str"");
      employee.setLastName(""String_Node_Str"");
      em.persist(employee);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    version1=employee.getVersion();
    try {
      beginTransaction(em);
      Query query=em.createQuery(""String_Node_Str"").setLockMode(LockModeType.PESSIMISTIC_READ);
      query.setHint(QueryHints.REFRESH,true);
      query.setHint(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
      query.setParameter(""String_Node_Str"",employee.getId());
      query.setParameter(""String_Node_Str"",employee.getFirstName());
      Employee queryResult=(Employee)query.getSingleResult();
      queryResult.setLastName(""String_Node_Str"");
      commitTransaction(em);
      assertTrue(""String_Node_Str"",version1.intValue() < employee.getVersion().intValue());
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
    }
  }
}","public void testVersionChangeWithReadLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (!isJPA10() && isSelectForUpateNoWaitSupported()) {
    Employee employee=null;
    Integer version1;
    EntityManager em=createEntityManager();
    beginTransaction(em);
    try {
      employee=new Employee();
      employee.setFirstName(""String_Node_Str"");
      employee.setLastName(""String_Node_Str"");
      em.persist(employee);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    version1=employee.getVersion();
    try {
      beginTransaction(em);
      Query query=em.createQuery(""String_Node_Str"").setLockMode(LockModeType.PESSIMISTIC_READ);
      query.setHint(QueryHints.REFRESH,true);
      query.setHint(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
      query.setParameter(""String_Node_Str"",employee.getId());
      query.setParameter(""String_Node_Str"",employee.getFirstName());
      Employee queryResult=(Employee)query.getSingleResult();
      queryResult.setLastName(""String_Node_Str"");
      commitTransaction(em);
      assertTrue(""String_Node_Str"",version1.intValue() < employee.getVersion().intValue());
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
    }
  }
}"
66794,"public void testVersionChangeWithWriteLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isJPA10() && isSelectForUpateNoWaitSupported()) {
    Employee employee=null;
    Integer version1;
    EntityManager em=createEntityManager();
    beginTransaction(em);
    try {
      employee=new Employee();
      employee.setFirstName(""String_Node_Str"");
      employee.setLastName(""String_Node_Str"");
      em.persist(employee);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    version1=employee.getVersion();
    try {
      beginTransaction(em);
      Query query=em.createQuery(""String_Node_Str"").setLockMode(LockModeType.PESSIMISTIC_WRITE);
      query.setHint(QueryHints.REFRESH,true);
      query.setHint(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
      query.setParameter(""String_Node_Str"",employee.getId());
      query.setParameter(""String_Node_Str"",employee.getFirstName());
      Employee queryResult=(Employee)query.getSingleResult();
      queryResult.setLastName(""String_Node_Str"");
      commitTransaction(em);
      assertTrue(""String_Node_Str"",version1.intValue() < employee.getVersion().intValue());
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
 finally {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
    }
  }
}","public void testVersionChangeWithWriteLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (!isJPA10() && isSelectForUpateNoWaitSupported()) {
    Employee employee=null;
    Integer version1;
    EntityManager em=createEntityManager();
    beginTransaction(em);
    try {
      employee=new Employee();
      employee.setFirstName(""String_Node_Str"");
      employee.setLastName(""String_Node_Str"");
      em.persist(employee);
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
    version1=employee.getVersion();
    try {
      beginTransaction(em);
      Query query=em.createQuery(""String_Node_Str"").setLockMode(LockModeType.PESSIMISTIC_WRITE);
      query.setHint(QueryHints.REFRESH,true);
      query.setHint(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
      query.setParameter(""String_Node_Str"",employee.getId());
      query.setParameter(""String_Node_Str"",employee.getFirstName());
      Employee queryResult=(Employee)query.getSingleResult();
      queryResult.setLastName(""String_Node_Str"");
      commitTransaction(em);
      assertTrue(""String_Node_Str"",version1.intValue() < employee.getVersion().intValue());
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
      throw ex;
    }
 finally {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      closeEntityManager(em);
    }
  }
}"
66795,"public void testLockWithSecondaryTable(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateSupported()) {
    EntityManager em=createEntityManager();
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      List employees=em.createQuery(""String_Node_Str"").setLockMode(LockModeType.PESSIMISTIC_WRITE).getResultList();
      Employee employee=(Employee)employees.get(0);
      employee.setSalary(90000);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        Employee employee2=em2.find(Employee.class,employee.getId());
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.lock(employee2,LockModeType.PESSIMISTIC_WRITE,properties);
        employee2.setSalary(100000);
        commitTransaction(em2);
      }
 catch (      PersistenceException ex) {
        if (ex instanceof javax.persistence.PessimisticLockException) {
          pessimisticLockException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}","public void testLockWithSecondaryTable(){
  ServerSession session=JUnitTestCase.getServerSession();
  if (!isOnServer() && isSelectForUpateSupported()) {
    EntityManager em=createEntityManager();
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      List employees=em.createQuery(""String_Node_Str"").setLockMode(LockModeType.PESSIMISTIC_WRITE).getResultList();
      Employee employee=(Employee)employees.get(0);
      employee.setSalary(90000);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        Employee employee2=em2.find(Employee.class,employee.getId());
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.lock(employee2,LockModeType.PESSIMISTIC_WRITE,properties);
        employee2.setSalary(100000);
        commitTransaction(em2);
      }
 catch (      PersistenceException ex) {
        if (ex instanceof javax.persistence.PessimisticLockException) {
          pessimisticLockException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}"
66796,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new CacheImplJUnitTest(""String_Node_Str""));
  suite.addTest(new CacheImplJUnitTest(""String_Node_Str""));
  suite.addTest(new CacheImplJUnitTest(""String_Node_Str""));
  suite.addTest(new CacheImplJUnitTest(""String_Node_Str""));
  suite.addTest(new CacheImplJUnitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new CacheImplJUnitTest(""String_Node_Str""));
  suite.addTest(new CacheImplJUnitTest(""String_Node_Str""));
  suite.addTest(new CacheImplJUnitTest(""String_Node_Str""));
  suite.addTest(new CacheImplJUnitTest(""String_Node_Str""));
  suite.addTest(new CacheImplJUnitTest(""String_Node_Str""));
  suite.addTest(new CacheImplJUnitTest(""String_Node_Str""));
  return suite;
}"
66797,"public boolean contains(Class cls,Object primaryKey){
  this.emf.verifyOpen();
  return this.accessor.containsObjectInIdentityMap(createPKVector(cls,primaryKey),cls);
}","public boolean contains(Class cls,Object primaryKey){
  this.emf.verifyOpen();
  Vector pk=createPKVector(cls,primaryKey);
  ClassDescriptor descriptor=this.serversession.getDescriptor(cls);
  CacheKey key=((org.eclipse.persistence.internal.sessions.IdentityMapAccessor)this.accessor).getCacheKeyForObject(pk,cls,descriptor);
  return key != null && !descriptor.getCacheInvalidationPolicy().isInvalidated(key);
}"
66798,"public CompositePKTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADMIN_CONTRACTTable());
  addTableDefinition(buildADMINTable());
  addTableDefinition(buildSCIENTISTTable());
  addTableDefinition(buildDEPARTMENTTable());
  addTableDefinition(buildDEPT_ADMINTable());
  addTableDefinition(buildCUBICLETable());
  addTableDefinition(buildSARGEANTTable());
  addTableDefinition(buildMASTERCORPORALTable());
  addTableDefinition(buildMAJORTable());
  addTableDefinition(buildMAJORGENERALTable());
  addTableDefinition(buildCAPTAINTable());
  addTableDefinition(buildBRIGADIERGENERALTable());
  addTableDefinition(buildCORPORALTable());
  addTableDefinition(buildPRIVATETable());
  addTableDefinition(buildGENERALTable());
  addTableDefinition(buildLIEUTENANTGENERALTable());
  addTableDefinition(buildLIEUTENANTTable());
  addTableDefinition(buildSECONDLIEUTENANTTable());
  addTableDefinition(buildOFFICERCADETTable());
  addTableDefinition(buildLACKEYTable());
  addTableDefinition(buildLACKEYCREWTable());
  addTableDefinition(buildOFFICETable());
  addTableDefinition(buildADMINPOOLTable());
}","public CompositePKTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADMIN_CONTRACTTable());
  addTableDefinition(buildADMINTable());
  addTableDefinition(buildSCIENTISTTable());
  addTableDefinition(buildDEPARTMENTTable());
  addTableDefinition(buildDEPT_ADMINTable());
  addTableDefinition(buildCUBICLETable());
  addTableDefinition(buildSARGEANTTable());
  addTableDefinition(buildMASTERCORPORALTable());
  addTableDefinition(buildMAJORTable());
  addTableDefinition(buildMAJORGENERALTable());
  addTableDefinition(buildCAPTAINTable());
  addTableDefinition(buildBRIGADIERGENERALTable());
  addTableDefinition(buildCORPORALTable());
  addTableDefinition(buildPRIVATETable());
  addTableDefinition(buildGENERALTable());
  addTableDefinition(buildLIEUTENANTGENERALTable());
  addTableDefinition(buildLIEUTENANTTable());
  addTableDefinition(buildSECONDLIEUTENANTTable());
  addTableDefinition(buildOFFICERCADETTable());
  addTableDefinition(buildLACKEYTable());
  addTableDefinition(buildLACKEYCREWTable());
  addTableDefinition(buildOFFICETable());
  addTableDefinition(buildBOOKIETable());
  addTableDefinition(buildCELLNUMBERTable());
  addTableDefinition(buildADMINPOOLTable());
}"
66799,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  return suite;
}"
66800,"/** 
 * INTERNAL:
 */
private static XMLDescriptor buildPUInfoDescriptor(NamespaceResolver resolver){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setNamespaceResolver(resolver);
  descriptor.setJavaClass(SEPersistenceUnitInfo.class);
  descriptor.addDirectMapping(""String_Node_Str"",""String_Node_Str"");
  descriptor.addDirectMapping(""String_Node_Str"",""String_Node_Str"");
  XMLCompositeDirectCollectionMapping classesMapping=new XMLCompositeDirectCollectionMapping();
  classesMapping.setAttributeName(""String_Node_Str"");
  classesMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(classesMapping);
  XMLCompositeDirectCollectionMapping mappingFilesMapping=new XMLCompositeDirectCollectionMapping();
  mappingFilesMapping.setAttributeName(""String_Node_Str"");
  mappingFilesMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(mappingFilesMapping);
  XMLCompositeCollectionMapping persistenceUnitPropertiesMapping=new XMLCompositeCollectionMapping();
  persistenceUnitPropertiesMapping.setAttributeName(""String_Node_Str"");
  persistenceUnitPropertiesMapping.setGetMethodName(""String_Node_Str"");
  persistenceUnitPropertiesMapping.setSetMethodName(""String_Node_Str"");
  persistenceUnitPropertiesMapping.setReferenceClass(SEPersistenceUnitProperty.class);
  persistenceUnitPropertiesMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(persistenceUnitPropertiesMapping);
  return descriptor;
}","/** 
 * INTERNAL:
 */
private static XMLDescriptor buildPUInfoDescriptor(NamespaceResolver resolver){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setNamespaceResolver(resolver);
  descriptor.setJavaClass(SEPersistenceUnitInfo.class);
  descriptor.addDirectMapping(""String_Node_Str"",""String_Node_Str"");
  XMLDirectMapping mapping=new XMLDirectMapping();
  mapping.setAttributeName(""String_Node_Str"");
  mapping.setXPath(""String_Node_Str"");
  mapping.setNullValue(false);
  descriptor.addMapping(mapping);
  XMLCompositeDirectCollectionMapping classesMapping=new XMLCompositeDirectCollectionMapping();
  classesMapping.setAttributeName(""String_Node_Str"");
  classesMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(classesMapping);
  XMLCompositeDirectCollectionMapping mappingFilesMapping=new XMLCompositeDirectCollectionMapping();
  mappingFilesMapping.setAttributeName(""String_Node_Str"");
  mappingFilesMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(mappingFilesMapping);
  XMLCompositeCollectionMapping persistenceUnitPropertiesMapping=new XMLCompositeCollectionMapping();
  persistenceUnitPropertiesMapping.setAttributeName(""String_Node_Str"");
  persistenceUnitPropertiesMapping.setGetMethodName(""String_Node_Str"");
  persistenceUnitPropertiesMapping.setSetMethodName(""String_Node_Str"");
  persistenceUnitPropertiesMapping.setReferenceClass(SEPersistenceUnitProperty.class);
  persistenceUnitPropertiesMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(persistenceUnitPropertiesMapping);
  return descriptor;
}"
66801,"public void close(){
  try {
    jarFile.close();
  }
 catch (  IOException e) {
  }
}","public void close(){
}"
66802,"/** 
 * INTERNAL:
 */
protected void addXMLEntityMappings(String mappingFile){
  try {
    FileObject fileObject=null;
    try {
      fileObject=persistenceUnitReader.getFileObject(mappingFile,processingEnv);
      addXMLEntityMappings(fileObject,mappingFile,XMLEntityMappingsReader.getEclipseLinkOrmProject());
    }
 catch (    XMLMarshalException e) {
      try {
        addXMLEntityMappings(fileObject,mappingFile,XMLEntityMappingsReader.getOrm2Project());
      }
 catch (      XMLMarshalException ee) {
        addXMLEntityMappings(fileObject,mappingFile,XMLEntityMappingsReader.getOrm1Project());
      }
    }
  }
 catch (  IOException exception) {
    processingEnv.getMessager().printMessage(Kind.NOTE,""String_Node_Str"" + mappingFile);
  }
}","/** 
 * INTERNAL:
 */
protected void addXMLEntityMappings(String mappingFile){
  try {
    addXMLEntityMappings(mappingFile,XMLEntityMappingsReader.getEclipseLinkOrmProject());
  }
 catch (  XMLMarshalException e) {
    try {
      addXMLEntityMappings(mappingFile,XMLEntityMappingsReader.getOrm2Project());
    }
 catch (    XMLMarshalException ee) {
      addXMLEntityMappings(mappingFile,XMLEntityMappingsReader.getOrm1Project());
    }
  }
}"
66803,"/** 
 * INTERNAL: If the accessor is no longer valid it we should probably look into removing the accessor from the project. For now I don't think its a big deal.
 */
public boolean containsElement(Element element){
  MetadataClass cls=factory.getMetadataClass(element);
  if (project.hasEntity(cls)) {
    return isValidAccessor(project.getEntityAccessor(cls),element.getAnnotation(javax.persistence.Entity.class));
  }
  if (project.hasEmbeddable(cls)) {
    return isValidAccessor(project.getEmbeddableAccessor(cls),element.getAnnotation(javax.persistence.Embeddable.class));
  }
  if (project.hasMappedSuperclass(cls)) {
    return isValidAccessor(project.getMappedSuperclassAccessor(cls),element.getAnnotation(javax.persistence.MappedSuperclass.class));
  }
  return false;
}","/** 
 * INTERNAL: If the accessor is no longer valid it we should probably look into removing the accessor from the project. For now I don't think it's  a big deal.
 */
public boolean containsElement(Element element){
  MetadataClass cls=factory.getMetadataClass(element);
  if (project.hasEntity(cls)) {
    return isValidAccessor(project.getEntityAccessor(cls),element.getAnnotation(javax.persistence.Entity.class));
  }
  if (project.hasEmbeddable(cls)) {
    return isValidAccessor(project.getEmbeddableAccessor(cls),element.getAnnotation(javax.persistence.Embeddable.class));
  }
  if (project.hasMappedSuperclass(cls)) {
    return isValidAccessor(project.getMappedSuperclassAccessor(cls),element.getAnnotation(javax.persistence.MappedSuperclass.class));
  }
  return false;
}"
66804,"public Project(){
  this.teamMembers=new Vector<Employee>();
}","public Project(){
  fieldOnlySetThroughConstructor=1;
  this.teamMembers=new Vector<Employee>();
}"
66805,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  return suite;
}"
66806,"/** 
 * Add an internal empty constructor, and new method. This is used to avoid unnecessary initialization and avoid reflection. public void _persistence_new(PersistenceObject factory) { return new ClassType(factory); } public ClassType(PersistenceObject factory) { super(); }
 */
public void addPersistenceNew(ClassDetails classDetails){
  CodeVisitor cv_new=cv.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"" + PERSISTENCE_OBJECT_SIGNATURE + ""String_Node_Str"",null,null);
  cv_new.visitTypeInsn(NEW,classDetails.getClassName());
  cv_new.visitInsn(DUP);
  cv_new.visitVarInsn(ALOAD,1);
  cv_new.visitMethodInsn(INVOKESPECIAL,classDetails.getClassName(),""String_Node_Str"",""String_Node_Str"" + PERSISTENCE_OBJECT_SIGNATURE + ""String_Node_Str"");
  cv_new.visitInsn(ARETURN);
  cv_new.visitMaxs(0,0);
  CodeVisitor cv_constructor=cv.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"" + PERSISTENCE_OBJECT_SIGNATURE + ""String_Node_Str"",null,null);
  cv_constructor.visitVarInsn(ALOAD,0);
  if (classDetails.getSuperClassDetails() == null) {
    cv_constructor.visitMethodInsn(INVOKESPECIAL,classDetails.getSuperClassName(),""String_Node_Str"",""String_Node_Str"");
  }
 else {
    cv_constructor.visitVarInsn(ALOAD,1);
    cv_constructor.visitMethodInsn(INVOKESPECIAL,classDetails.getSuperClassName(),""String_Node_Str"",""String_Node_Str"" + PERSISTENCE_OBJECT_SIGNATURE + ""String_Node_Str"");
  }
  cv_constructor.visitInsn(RETURN);
  cv_constructor.visitMaxs(0,0);
}","/** 
 * Add an internal empty constructor, and new method. This is used to avoid unnecessary initialization and avoid reflection. public void _persistence_new(PersistenceObject factory) { return new ClassType(factory); } public ClassType(PersistenceObject factory) { super(); }
 */
public void addPersistenceNew(ClassDetails classDetails){
  CodeVisitor cv_new=cv.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"" + PERSISTENCE_OBJECT_SIGNATURE + ""String_Node_Str"",null,null);
  cv_new.visitTypeInsn(NEW,classDetails.getClassName());
  cv_new.visitInsn(DUP);
  if (!classDetails.canWeaveConstructorOptimization()) {
    cv_new.visitMethodInsn(INVOKESPECIAL,classDetails.getClassName(),""String_Node_Str"",""String_Node_Str"");
    cv_new.visitInsn(ARETURN);
    cv_new.visitMaxs(0,0);
    return;
  }
 else {
    cv_new.visitVarInsn(ALOAD,1);
    cv_new.visitMethodInsn(INVOKESPECIAL,classDetails.getClassName(),""String_Node_Str"",""String_Node_Str"" + PERSISTENCE_OBJECT_SIGNATURE + ""String_Node_Str"");
  }
  cv_new.visitInsn(ARETURN);
  cv_new.visitMaxs(0,0);
  CodeVisitor cv_constructor=cv.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"" + PERSISTENCE_OBJECT_SIGNATURE + ""String_Node_Str"",null,null);
  cv_constructor.visitVarInsn(ALOAD,0);
  if (classDetails.getSuperClassDetails() == null) {
    cv_constructor.visitMethodInsn(INVOKESPECIAL,classDetails.getSuperClassName(),""String_Node_Str"",""String_Node_Str"");
  }
 else {
    cv_constructor.visitVarInsn(ALOAD,1);
    cv_constructor.visitMethodInsn(INVOKESPECIAL,classDetails.getSuperClassName(),""String_Node_Str"",""String_Node_Str"" + PERSISTENCE_OBJECT_SIGNATURE + ""String_Node_Str"");
  }
  cv_constructor.visitInsn(RETURN);
  cv_constructor.visitMaxs(0,0);
}"
66807,"/** 
 * INTERNAL: Store a set of attribute mappings on the given ClassDetails that correspont to the given class. Return the list of mappings that is not specifically found on the given class.  These attributes will  be found on MappedSuperclasses.
 */
protected List storeAttributeMappings(MetadataClass metadataClass,ClassDetails classDetails,List mappings,boolean weaveValueHolders){
  List unMappedAttributes=new ArrayList();
  Map<String,AttributeDetails> attributesMap=new HashMap<String,AttributeDetails>();
  Map<String,AttributeDetails> settersMap=new HashMap<String,AttributeDetails>();
  Map<String,AttributeDetails> gettersMap=new HashMap<String,AttributeDetails>();
  List lazyMappings=new ArrayList();
  for (Iterator iterator=mappings.iterator(); iterator.hasNext(); ) {
    DatabaseMapping mapping=(DatabaseMapping)iterator.next();
    String attribute=mapping.getAttributeName();
    AttributeDetails attributeDetails=new AttributeDetails(attribute,mapping);
    MetadataClass typeClass=getAttributeTypeFromClass(metadataClass,attribute,mapping,false);
    if (typeClass == null) {
      attributeDetails.setAttributeOnSuperClass(true);
      unMappedAttributes.add(mapping);
    }
    if (mapping.getGetMethodName() != null) {
      gettersMap.put(mapping.getGetMethodName(),attributeDetails);
      attributeDetails.setGetterMethodName(mapping.getGetMethodName());
      if (mapping.getSetMethodName() != null) {
        settersMap.put(mapping.getSetMethodName(),attributeDetails);
        attributeDetails.setSetterMethodName(mapping.getSetMethodName());
      }
      if (mapping.isForeignReferenceMapping() && ((ForeignReferenceMapping)mapping).requiresTransientWeavedFields()) {
        attributeDetails.setWeaveTransientFieldValueHolders();
      }
      if (this.weaveInternal) {
        attributeDetails.setHasField(hasFieldInClass(metadataClass,attribute));
      }
    }
 else {
      attributeDetails.setHasField(true);
    }
    if (attributeDetails.hasField()) {
      attributeDetails.setDeclaringType(Type.getType(getAttributeDeclaringClass(metadataClass,attribute).getTypeName()));
    }
    if (mapping.isForeignReferenceMapping()) {
      ForeignReferenceMapping foreignReferenceMapping=(ForeignReferenceMapping)mapping;
      attributeDetails.setReferenceClassName(foreignReferenceMapping.getReferenceClassName());
      if (attributeDetails.getReferenceClassName() != null) {
        MetadataClass referenceClass=metadataClass.getMetadataFactory().getMetadataClass(attributeDetails.getReferenceClassName());
        attributeDetails.setReferenceClassType(Type.getType(referenceClass.getTypeName()));
      }
      if (typeClass == null) {
        typeClass=getAttributeTypeFromClass(metadataClass,attribute,foreignReferenceMapping,true);
      }
      if (weaveValueHolders && (foreignReferenceMapping.getIndirectionPolicy() instanceof BasicIndirectionPolicy) && (typeClass != null)&& (!typeClass.extendsInterface(ValueHolderInterface.class))) {
        lazyMappings.add(foreignReferenceMapping);
        attributeDetails.weaveVH(weaveValueHolders,foreignReferenceMapping);
      }
    }
    if (attributeDetails.getReferenceClassType() == null) {
      if (typeClass == null) {
        typeClass=getAttributeTypeFromClass(metadataClass,attribute,mapping,true);
      }
    }
    if (typeClass != null) {
      attributeDetails.setReferenceClassName(typeClass.getName());
      attributeDetails.setReferenceClassType(Type.getType(typeClass.getTypeName()));
    }
    attributesMap.put(attribute,attributeDetails);
  }
  classDetails.setAttributesMap(attributesMap);
  classDetails.setGetterMethodToAttributeDetails(gettersMap);
  classDetails.setSetterMethodToAttributeDetails(settersMap);
  classDetails.setLazyMappings(lazyMappings);
  return unMappedAttributes;
}","/** 
 * INTERNAL: Store a set of attribute mappings on the given ClassDetails that correspond to the given class. Return the list of mappings that is not specifically found on the given class.  These attributes will  be found on MappedSuperclasses.
 */
protected List storeAttributeMappings(MetadataClass metadataClass,ClassDetails classDetails,List mappings,boolean weaveValueHolders){
  List unMappedAttributes=new ArrayList();
  Map<String,AttributeDetails> attributesMap=new HashMap<String,AttributeDetails>();
  Map<String,AttributeDetails> settersMap=new HashMap<String,AttributeDetails>();
  Map<String,AttributeDetails> gettersMap=new HashMap<String,AttributeDetails>();
  List lazyMappings=new ArrayList();
  for (Iterator iterator=mappings.iterator(); iterator.hasNext(); ) {
    DatabaseMapping mapping=(DatabaseMapping)iterator.next();
    String attribute=mapping.getAttributeName();
    AttributeDetails attributeDetails=new AttributeDetails(attribute,mapping);
    MetadataClass typeClass=getAttributeTypeFromClass(metadataClass,attribute,mapping,false);
    if (typeClass == null) {
      attributeDetails.setAttributeOnSuperClass(true);
      unMappedAttributes.add(mapping);
    }
    if (mapping.getGetMethodName() != null) {
      gettersMap.put(mapping.getGetMethodName(),attributeDetails);
      attributeDetails.setGetterMethodName(mapping.getGetMethodName());
      if (mapping.getSetMethodName() != null) {
        settersMap.put(mapping.getSetMethodName(),attributeDetails);
        attributeDetails.setSetterMethodName(mapping.getSetMethodName());
      }
      if (mapping.isForeignReferenceMapping() && ((ForeignReferenceMapping)mapping).requiresTransientWeavedFields()) {
        attributeDetails.setWeaveTransientFieldValueHolders();
      }
      if (this.weaveInternal) {
        attributeDetails.setHasField(hasFieldInClass(metadataClass,attribute));
      }
    }
 else {
      attributeDetails.setHasField(true);
    }
    if (attributeDetails.hasField()) {
      attributeDetails.setDeclaringType(Type.getType(getAttributeDeclaringClass(metadataClass,attribute).getTypeName()));
    }
    if (mapping.isForeignReferenceMapping()) {
      ForeignReferenceMapping foreignReferenceMapping=(ForeignReferenceMapping)mapping;
      attributeDetails.setReferenceClassName(foreignReferenceMapping.getReferenceClassName());
      if (attributeDetails.getReferenceClassName() != null) {
        MetadataClass referenceClass=metadataClass.getMetadataFactory().getMetadataClass(attributeDetails.getReferenceClassName());
        attributeDetails.setReferenceClassType(Type.getType(referenceClass.getTypeName()));
      }
      if (typeClass == null) {
        typeClass=getAttributeTypeFromClass(metadataClass,attribute,foreignReferenceMapping,true);
      }
      if (weaveValueHolders && (foreignReferenceMapping.getIndirectionPolicy() instanceof BasicIndirectionPolicy) && (typeClass != null)&& (!typeClass.extendsInterface(ValueHolderInterface.class))) {
        lazyMappings.add(foreignReferenceMapping);
        attributeDetails.weaveVH(weaveValueHolders,foreignReferenceMapping);
      }
    }
    if (attributeDetails.getReferenceClassType() == null) {
      if (typeClass == null) {
        typeClass=getAttributeTypeFromClass(metadataClass,attribute,mapping,true);
      }
    }
    if (typeClass != null) {
      attributeDetails.setReferenceClassName(typeClass.getName());
      attributeDetails.setReferenceClassType(Type.getType(typeClass.getTypeName()));
    }
    attributesMap.put(attribute,attributeDetails);
  }
  classDetails.setAttributesMap(attributesMap);
  classDetails.setGetterMethodToAttributeDetails(gettersMap);
  classDetails.setSetterMethodToAttributeDetails(settersMap);
  classDetails.setLazyMappings(lazyMappings);
  return unMappedAttributes;
}"
66808,"/** 
 * Build a list ClassDetails instance that contains a ClassDetails for each class in our entities list.
 */
public void buildClassDetailsAndModifyProject(){
  if (entityClasses != null && entityClasses.size() > 0) {
    for (    MetadataClass metaClass : entityClasses) {
      ClassDescriptor descriptor=findDescriptor(session.getProject(),metaClass.getName());
      if (descriptor == null) {
        log(SessionLog.FINER,WEAVER_CLASS_NOT_IN_PROJECT,new Object[]{metaClass.getName()});
      }
 else {
        log(SessionLog.FINER,WEAVER_PROCESSING_CLASS,new Object[]{metaClass.getName()});
        boolean weaveValueHoldersForClass=weaveLazy && canWeaveValueHolders(metaClass,descriptor.getMappings());
        boolean weaveChangeTrackingForClass=canChangeTrackingBeEnabled(descriptor,metaClass,weaveChangeTracking);
        ClassDetails classDetails=createClassDetails(metaClass,weaveValueHoldersForClass,weaveChangeTrackingForClass,weaveFetchGroups,weaveInternal);
        if (descriptor.isAggregateDescriptor()) {
          classDetails.setIsEmbedable(true);
          classDetails.setShouldWeaveFetchGroups(false);
        }
        List unMappedAttributes=storeAttributeMappings(metaClass,classDetails,descriptor.getMappings(),weaveValueHoldersForClass);
        classDetailsMap.put(classDetails.getClassName(),classDetails);
        if (!unMappedAttributes.isEmpty()) {
          addClassDetailsForMappedSuperClasses(metaClass,descriptor,classDetails,classDetailsMap,unMappedAttributes,weaveChangeTracking);
        }
        if (classDetails.getLazyMappings() != null) {
          Iterator iterator=classDetails.getLazyMappings().iterator();
          while (iterator.hasNext()) {
            ForeignReferenceMapping mapping=(ForeignReferenceMapping)iterator.next();
            mapping.setGetMethodName(ClassWeaver.getWeavedValueHolderGetMethodName(mapping.getAttributeName()));
            mapping.setSetMethodName(ClassWeaver.getWeavedValueHolderSetMethodName(mapping.getAttributeName()));
          }
        }
      }
    }
    for (Iterator i=classDetailsMap.values().iterator(); i.hasNext(); ) {
      ClassDetails classDetails=(ClassDetails)i.next();
      ClassDetails superClassDetails=classDetailsMap.get(classDetails.getSuperClassName());
      if (superClassDetails == null) {
        ClassDescriptor descriptor=findDescriptor(session.getProject(),classDetails.getClassName());
        if (descriptor != null && descriptor.hasInheritance()) {
          superClassDetails=classDetailsMap.get(descriptor.getInheritancePolicy().getParentClassName());
        }
      }
      if (superClassDetails != null) {
        classDetails.setSuperClassDetails(superClassDetails);
      }
    }
    for (Iterator i=classDetailsMap.values().iterator(); i.hasNext(); ) {
      ClassDetails classDetails=(ClassDetails)i.next();
      classDetails.setShouldWeaveChangeTracking(classDetails.canWeaveChangeTracking());
    }
  }
}","/** 
 * Build a list ClassDetails instance that contains a ClassDetails for each class in our entities list.
 */
public void buildClassDetailsAndModifyProject(){
  if (entityClasses != null && entityClasses.size() > 0) {
    for (    MetadataClass metaClass : entityClasses) {
      ClassDescriptor descriptor=findDescriptor(session.getProject(),metaClass.getName());
      if (descriptor == null) {
        log(SessionLog.FINER,WEAVER_CLASS_NOT_IN_PROJECT,new Object[]{metaClass.getName()});
      }
 else {
        log(SessionLog.FINER,WEAVER_PROCESSING_CLASS,new Object[]{metaClass.getName()});
        boolean weaveValueHoldersForClass=weaveLazy && canWeaveValueHolders(metaClass,descriptor.getMappings());
        boolean weaveChangeTrackingForClass=canChangeTrackingBeEnabled(descriptor,metaClass,weaveChangeTracking);
        ClassDetails classDetails=createClassDetails(metaClass,weaveValueHoldersForClass,weaveChangeTrackingForClass,weaveFetchGroups,weaveInternal);
        if (descriptor.isAggregateDescriptor()) {
          classDetails.setIsEmbedable(true);
          classDetails.setShouldWeaveFetchGroups(false);
        }
        List unMappedAttributes=storeAttributeMappings(metaClass,classDetails,descriptor.getMappings(),weaveValueHoldersForClass);
        classDetailsMap.put(classDetails.getClassName(),classDetails);
        classDetails.setShouldWeaveConstructorOptimization((classDetails.getDescribedClass().getFields().size() - (descriptor.getMappings().size() - unMappedAttributes.size())) <= 0);
        if (!unMappedAttributes.isEmpty()) {
          addClassDetailsForMappedSuperClasses(metaClass,descriptor,classDetails,classDetailsMap,unMappedAttributes,weaveChangeTracking);
        }
        if (classDetails.getLazyMappings() != null) {
          Iterator iterator=classDetails.getLazyMappings().iterator();
          while (iterator.hasNext()) {
            ForeignReferenceMapping mapping=(ForeignReferenceMapping)iterator.next();
            mapping.setGetMethodName(ClassWeaver.getWeavedValueHolderGetMethodName(mapping.getAttributeName()));
            mapping.setSetMethodName(ClassWeaver.getWeavedValueHolderSetMethodName(mapping.getAttributeName()));
          }
        }
      }
    }
    for (Iterator i=classDetailsMap.values().iterator(); i.hasNext(); ) {
      ClassDetails classDetails=(ClassDetails)i.next();
      ClassDetails superClassDetails=classDetailsMap.get(classDetails.getSuperClassName());
      if (superClassDetails == null) {
        ClassDescriptor descriptor=findDescriptor(session.getProject(),classDetails.getClassName());
        if (descriptor != null && descriptor.hasInheritance()) {
          superClassDetails=classDetailsMap.get(descriptor.getInheritancePolicy().getParentClassName());
        }
      }
      if (superClassDetails != null) {
        classDetails.setSuperClassDetails(superClassDetails);
      }
    }
    for (Iterator i=classDetailsMap.values().iterator(); i.hasNext(); ) {
      ClassDetails classDetails=(ClassDetails)i.next();
      classDetails.setShouldWeaveChangeTracking(classDetails.canWeaveChangeTracking());
    }
  }
}"
66809,"/** 
 * Set the Node that the object will be marshalled to.
 * @param writer The marshal target.
 */
public void setDOM(Node dom){
  nodes=new ArrayList();
  if (dom.getNodeType() == Node.DOCUMENT_NODE) {
    document=(Document)dom;
  }
 else   if ((dom.getNodeType() == Node.ELEMENT_NODE) || (dom.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE)) {
    document=dom.getOwnerDocument();
    nodes.add(dom);
    getNamespaceResolver().setDOM(dom);
  }
 else {
    throw XMLMarshalException.marshalException(null);
  }
}","/** 
 * Set the Node that the object will be marshalled to.
 * @param writer The marshal target.
 */
public void setDOM(Node dom){
  int nodeType=dom.getNodeType();
  if (Node.DOCUMENT_NODE == nodeType) {
    document=(Document)dom;
    node=dom;
  }
 else   if (Node.ELEMENT_NODE == nodeType || Node.DOCUMENT_FRAGMENT_NODE == nodeType) {
    document=dom.getOwnerDocument();
    node=dom;
    getNamespaceResolver().setDOM(dom);
  }
 else {
    throw XMLMarshalException.marshalException(null);
  }
}"
66810,"/** 
 * Return the Node that the object will be marshalled to.
 * @return The marshal target.
 */
public Element getDOM(){
  return (Element)nodes.get(nodes.size() - 1);
}","/** 
 * Return the Node that the object will be marshalled to.
 * @return The marshal target.
 */
public Element getDOM(){
  return (Element)node;
}"
66811,"/** 
 * INTERNAL: Create a record with the element.
 */
public NodeRecord(Document document){
  this();
  setDOM(document.getDocumentElement());
}","/** 
 * INTERNAL: Create a record with the element.
 */
public NodeRecord(Node node){
  setDOM(node);
}"
66812,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  Element element=document.createElementNS(xPathFragment.getNamespaceURI(),xPathFragment.getShortName());
  try {
    getNode().appendChild(element);
    nodes.add(element);
  }
 catch (  Exception e) {
    document.appendChild(element);
    setDOM(element);
    nodes.add(element);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  Element element=document.createElementNS(xPathFragment.getNamespaceURI(),xPathFragment.getShortName());
  node=node.appendChild(element);
}"
66813,"/** 
 * INTERNAL:
 */
public void characters(String value){
  if (value.length() > 0) {
    getNode().appendChild(document.createTextNode(value));
  }
}","/** 
 * INTERNAL:
 */
public void characters(String value){
  if (value.length() > 0) {
    node.appendChild(document.createTextNode(value));
  }
}"
66814,"/** 
 * INTERNAL:
 */
public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  nodes.remove(nodes.size() - 1);
}","/** 
 * INTERNAL:
 */
public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  node=node.getParentNode();
}"
66815,"/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  if (getNode().getNodeType() == Node.ELEMENT_NODE) {
    getDOM().setAttributeNS(namespaceURI,qName,value);
  }
}","/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  if (node.getNodeType() == Node.ELEMENT_NODE) {
    getDOM().setAttributeNS(namespaceURI,qName,value);
  }
}"
66816,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  Element element=document.createElementNS(frag.getNamespaceURI(),frag.getShortName());
  getNode().appendChild(element);
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  Element element=document.createElementNS(frag.getNamespaceURI(),frag.getShortName());
  node.appendChild(element);
}"
66817,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  Element element;
  if (namespaceURI == null) {
    element=document.createElement(qName);
  }
 else {
    element=document.createElementNS(namespaceURI,qName);
  }
  try {
    getNode().appendChild(element);
    nodes.add(element);
  }
 catch (  Exception e) {
    document.appendChild(element);
    setDOM(element);
    nodes.add(element);
  }
  for (int i=0; i < atts.getLength(); i++) {
    marshalRecord.attribute(atts.getURI(i),atts.getLocalName(i),atts.getQName(i),atts.getValue(i));
  }
  if (!prefixMappings.isEmpty()) {
    for (Iterator<Map.Entry<String,String>> entries=prefixMappings.entrySet().iterator(); entries.hasNext(); ) {
      Map.Entry<String,String> entry=entries.next();
      element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + entry.getKey(),entry.getValue());
    }
    prefixMappings.clear();
  }
  marshalRecord.closeStartElement();
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  Element element;
  if (namespaceURI == null) {
    element=document.createElement(qName);
  }
 else {
    element=document.createElementNS(namespaceURI,qName);
  }
  node=node.appendChild(element);
  for (int i=0; i < atts.getLength(); i++) {
    marshalRecord.attribute(atts.getURI(i),atts.getLocalName(i),atts.getQName(i),atts.getValue(i));
  }
  if (!prefixMappings.isEmpty()) {
    for (Iterator<Map.Entry<String,String>> entries=prefixMappings.entrySet().iterator(); entries.hasNext(); ) {
      Map.Entry<String,String> entry=entries.next();
      element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + entry.getKey(),entry.getValue());
    }
    prefixMappings.clear();
  }
  marshalRecord.closeStartElement();
}"
66818,"public void cdata(String value){
  CDATASection cdata=document.createCDATASection(value);
  getNode().appendChild(cdata);
}","public void cdata(String value){
  CDATASection cdata=document.createCDATASection(value);
  node.appendChild(cdata);
}"
66819,"public String getLocalName(){
  return getNode().getLocalName();
}","public String getLocalName(){
  return node.getLocalName();
}"
66820,"public String getNamespaceURI(){
  return getNode().getNamespaceURI();
}","public String getNamespaceURI(){
  return node.getNamespaceURI();
}"
66821,"/** 
 * INTERNAL: Create a start element tag - this call results in a complete start element,  i.e. closeStartElement() does not need to be called after a call to this  method.
 */
private void openAndCloseStartElement(){
  try {
    contentHandler.startElement(namespaceURI,xPathFragment.getLocalName(),xPathFragment.getShortName(),attributes);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL: Create a start element tag - this call results in a complete start element,  i.e. closeStartElement() does not need to be called after a call to this  method.
 */
private void openAndCloseStartElement(){
  try {
    contentHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),attributes);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66822,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    openAndCloseStartElement();
  }
  isStartElementOpen=true;
  this.namespaceURI=xPathFragment.getNamespaceURI();
  this.xPathFragment=xPathFragment;
  this.attributes=new AttributesImpl();
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    openAndCloseStartElement();
  }
  this.isStartElementOpen=true;
  this.xPathFragment=xPathFragment;
  this.attributes.clear();
}"
66823,"/** 
 * INTERNAL:
 */
public void characters(String value){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    contentHandler.characters(value.toCharArray(),0,value.length());
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void characters(String value){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    char[] characters=value.toCharArray();
    contentHandler.characters(characters,0,characters.length);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66824,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    this.attributes=new AttributesImpl();
    contentHandler.startElement(frag.getNamespaceURI(),frag.getLocalName(),frag.getShortName(),attributes);
    contentHandler.endElement(frag.getNamespaceURI(),frag.getLocalName(),frag.getShortName());
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    this.attributes.clear();
    String namespaceURI=frag.getNamespaceURI();
    String localName=frag.getLocalName();
    String shortName=frag.getShortName();
    contentHandler.startElement(namespaceURI,localName,shortName,attributes);
    contentHandler.endElement(namespaceURI,localName,shortName);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66825,"private void initialize(){
  XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
  transformer=xmlPlatform.newXMLTransformer();
  setEncoding(DEFAULT_XML_ENCODING);
  setFormattedOutput(true);
  marshalProperties=new Properties();
}","private void initialize(){
  XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
  transformer=xmlPlatform.newXMLTransformer();
  setEncoding(XMLConstants.DEFAULT_XML_ENCODING);
  setFormattedOutput(true);
  marshalProperties=new Properties();
}"
66826,"/** 
 * INTERNAL:
 */
public void element(String namespaceURI,String localName,String qName){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    this.attributes=new AttributesImpl();
    contentHandler.startElement(namespaceURI,localName,qName,attributes);
    contentHandler.endElement(namespaceURI,localName,qName);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    this.attributes=new AttributesImpl();
    contentHandler.startElement(frag.getNamespaceURI(),frag.getLocalName(),frag.getShortName(),attributes);
    contentHandler.endElement(frag.getNamespaceURI(),frag.getLocalName(),frag.getShortName());
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66827,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping.getConverter(),xPathFragment,collection);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,(XMLMapping)xmlCompositeCollectionMapping,(XMLConverter)xmlCompositeCollectionMapping.getConverter(),unmarshalRecord,true,collection);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping.getConverter(),xPathFragment,collection);
      return;
    }
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  if (xmlCompositeCollectionMapping.getContainerAccessor() != null) {
    xmlCompositeCollectionMapping.getContainerAccessor().setAttributeValueInObject(objectValue,unmarshalRecord.getCurrentObject());
  }
  unmarshalRecord.setChildRecord(null);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping.getConverter(),xPathFragment,collection);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,(XMLMapping)xmlCompositeCollectionMapping,(XMLConverter)xmlCompositeCollectionMapping.getConverter(),unmarshalRecord,true,collection);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping.getConverter(),xPathFragment,collection);
      return;
    }
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  if (xmlCompositeCollectionMapping.getContainerAccessor() != null) {
    if (xmlCompositeCollectionMapping.getBidirectionalPolicy().getBidirectionalTargetContainerPolicy() == null) {
      xmlCompositeCollectionMapping.getContainerAccessor().setAttributeValueInObject(objectValue,unmarshalRecord.getCurrentObject());
    }
 else {
      Object backpointerContainer=xmlCompositeCollectionMapping.getContainerAccessor().getAttributeValueFromObject(objectValue);
      if (backpointerContainer == null) {
        backpointerContainer=xmlCompositeCollectionMapping.getBidirectionalPolicy().getBidirectionalTargetContainerPolicy().containerInstance();
        xmlCompositeCollectionMapping.getContainerAccessor().setAttributeValueInObject(objectValue,backpointerContainer);
      }
      xmlCompositeCollectionMapping.getBidirectionalPolicy().getBidirectionalTargetContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.setChildRecord(null);
}"
66828,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),xPathFragment,null);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,(XMLMapping)xmlCompositeObjectMapping,(XMLConverter)xmlCompositeObjectMapping.getConverter(),unmarshalRecord,false,null);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),xPathFragment,null);
      return;
    }
  }
 else {
    Object object=unmarshalRecord.getChildRecord().getCurrentObject();
    if (xmlCompositeObjectMapping.getConverter() != null) {
      Converter converter=xmlCompositeObjectMapping.getConverter();
      if (converter instanceof XMLConverter) {
        object=((XMLConverter)converter).convertDataValueToObjectValue(object,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        object=converter.convertDataValueToObjectValue(object,unmarshalRecord.getSession());
      }
    }
    unmarshalRecord.setAttributeValue(object,xmlCompositeObjectMapping);
    if (xmlCompositeObjectMapping.getContainerAccessor() != null) {
      xmlCompositeObjectMapping.getContainerAccessor().setAttributeValueInObject(object,unmarshalRecord.getCurrentObject());
    }
    unmarshalRecord.setChildRecord(null);
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),xPathFragment,null);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,(XMLMapping)xmlCompositeObjectMapping,(XMLConverter)xmlCompositeObjectMapping.getConverter(),unmarshalRecord,false,null);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),xPathFragment,null);
      return;
    }
  }
 else {
    Object object=unmarshalRecord.getChildRecord().getCurrentObject();
    if (xmlCompositeObjectMapping.getConverter() != null) {
      Converter converter=xmlCompositeObjectMapping.getConverter();
      if (converter instanceof XMLConverter) {
        object=((XMLConverter)converter).convertDataValueToObjectValue(object,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        object=converter.convertDataValueToObjectValue(object,unmarshalRecord.getSession());
      }
    }
    unmarshalRecord.setAttributeValue(object,xmlCompositeObjectMapping);
    if (xmlCompositeObjectMapping.getContainerAccessor() != null) {
      if (xmlCompositeObjectMapping.getBidirectionalPolicy().getBidirectionalTargetContainerPolicy() == null) {
        xmlCompositeObjectMapping.getContainerAccessor().setAttributeValueInObject(object,unmarshalRecord.getCurrentObject());
      }
 else {
        Object backpointerContainer=xmlCompositeObjectMapping.getContainerAccessor().getAttributeValueFromObject(object);
        if (backpointerContainer == null) {
          backpointerContainer=xmlCompositeObjectMapping.getBidirectionalPolicy().getBidirectionalTargetContainerPolicy().containerInstance();
          xmlCompositeObjectMapping.getContainerAccessor().setAttributeValueInObject(object,backpointerContainer);
        }
        xmlCompositeObjectMapping.getBidirectionalPolicy().getBidirectionalTargetContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
}"
66829,"public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,AbstractSession executionSession) throws DatabaseException {
  ContainerPolicy cp=this.getContainerPolicy();
  Object fieldValue=row.getValues(this.getField());
  if ((fieldValue == null) || (fieldValue instanceof String)) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Vector nestedRows=this.getDescriptor().buildNestedRowsFromFieldValue(fieldValue,executionSession);
  if (nestedRows == null) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Object result=null;
  if (reuseContainer) {
    Object currentObject=((XMLRecord)row).getCurrentObject();
    Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
    result=container != null ? container : cp.containerInstance();
  }
 else {
    result=cp.containerInstance(nestedRows.size());
  }
  for (Enumeration stream=nestedRows.elements(); stream.hasMoreElements(); ) {
    AbstractRecord nestedRow=(AbstractRecord)stream.nextElement();
    Object objectToAdd=buildObjectFromNestedRow(nestedRow,joinManager,sourceQuery,executionSession);
    cp.addInto(objectToAdd,result,sourceQuery.getSession());
    if (null != getContainerAccessor()) {
      getContainerAccessor().setAttributeValueInObject(objectToAdd,((DOMRecord)nestedRow).getOwningObject());
    }
  }
  return result;
}","public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,AbstractSession executionSession) throws DatabaseException {
  ContainerPolicy cp=this.getContainerPolicy();
  Object fieldValue=row.getValues(this.getField());
  if ((fieldValue == null) || (fieldValue instanceof String)) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Vector nestedRows=this.getDescriptor().buildNestedRowsFromFieldValue(fieldValue,executionSession);
  if (nestedRows == null) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Object result=null;
  if (reuseContainer) {
    Object currentObject=((XMLRecord)row).getCurrentObject();
    Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
    result=container != null ? container : cp.containerInstance();
  }
 else {
    result=cp.containerInstance(nestedRows.size());
  }
  for (Enumeration stream=nestedRows.elements(); stream.hasMoreElements(); ) {
    AbstractRecord nestedRow=(AbstractRecord)stream.nextElement();
    Object objectToAdd=buildObjectFromNestedRow(nestedRow,joinManager,sourceQuery,executionSession);
    cp.addInto(objectToAdd,result,sourceQuery.getSession());
    if (null != getContainerAccessor()) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      if (this.bidirectionalPolicy.getBidirectionalTargetContainerPolicy() == null) {
        getContainerAccessor().setAttributeValueInObject(objectToAdd,currentObject);
      }
 else {
        Object backpointerContainer=getContainerAccessor().getAttributeValueFromObject(objectToAdd);
        if (backpointerContainer == null) {
          backpointerContainer=bidirectionalPolicy.getBidirectionalTargetContainerPolicy().containerInstance();
          getContainerAccessor().setAttributeValueInObject(objectToAdd,backpointerContainer);
        }
        bidirectionalPolicy.getBidirectionalTargetContainerPolicy().addInto(currentObject,backpointerContainer,executionSession);
      }
    }
  }
  return result;
}"
66830,"public Object readFromRowIntoObject(AbstractRecord databaseRow,JoinedAttributeManager joinManager,Object targetObject,ObjectBuildingQuery sourceQuery,AbstractSession executionSession) throws DatabaseException {
  Object fieldValue=databaseRow.getIndicatingNoEntry(getField());
  if ((null == fieldValue) || fieldValue instanceof String) {
    if (getNullPolicy().getIsSetPerformedForAbsentNode()) {
      setAttributeValueInObject(targetObject,null);
    }
 else {
      return null;
    }
    return null;
  }
  XMLRecord nestedRow=(XMLRecord)this.getDescriptor().buildNestedRowFromFieldValue(fieldValue);
  if (getNullPolicy().valueIsNull((Element)nestedRow.getDOM())) {
    setAttributeValueInObject(targetObject,null);
    return null;
  }
  Object attributeValue=valueFromRow(fieldValue,nestedRow,joinManager,sourceQuery,executionSession);
  setAttributeValueInObject(targetObject,attributeValue);
  if (null != getContainerAccessor()) {
    getContainerAccessor().setAttributeValueInObject(attributeValue,targetObject);
  }
  return attributeValue;
}","public Object readFromRowIntoObject(AbstractRecord databaseRow,JoinedAttributeManager joinManager,Object targetObject,ObjectBuildingQuery sourceQuery,AbstractSession executionSession) throws DatabaseException {
  Object fieldValue=databaseRow.getIndicatingNoEntry(getField());
  if ((null == fieldValue) || fieldValue instanceof String) {
    if (getNullPolicy().getIsSetPerformedForAbsentNode()) {
      setAttributeValueInObject(targetObject,null);
    }
 else {
      return null;
    }
    return null;
  }
  XMLRecord nestedRow=(XMLRecord)this.getDescriptor().buildNestedRowFromFieldValue(fieldValue);
  if (getNullPolicy().valueIsNull((Element)nestedRow.getDOM())) {
    setAttributeValueInObject(targetObject,null);
    return null;
  }
  Object attributeValue=valueFromRow(fieldValue,nestedRow,joinManager,sourceQuery,executionSession);
  setAttributeValueInObject(targetObject,attributeValue);
  if (null != getContainerAccessor()) {
    if (this.bidirectionalPolicy.getBidirectionalTargetContainerPolicy() == null) {
      getContainerAccessor().setAttributeValueInObject(attributeValue,targetObject);
    }
 else {
      Object backpointerContainer=getContainerAccessor().getAttributeValueFromObject(attributeValue);
      if (backpointerContainer == null) {
        backpointerContainer=bidirectionalPolicy.getBidirectionalTargetContainerPolicy().containerInstance();
        getContainerAccessor().setAttributeValueInObject(attributeValue,backpointerContainer);
      }
      bidirectionalPolicy.getBidirectionalTargetContainerPolicy().addInto(targetObject,backpointerContainer,executionSession);
    }
  }
  return attributeValue;
}"
66831,"private void processPropertyAnnotations(TypeInfo info,JavaClass cls,JavaHasAnnotations javaHasAnnotations,Property property){
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlMixed.class)) {
    info.setMixed(true);
    property.setMixedContent(true);
  }
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlContainerProperty.class)) {
    XmlContainerProperty container=(XmlContainerProperty)helper.getAnnotation(javaHasAnnotations,XmlContainerProperty.class);
    property.setBackpointerPropertyName(container.value());
    property.setBackpointerGetMethodName(container.getMethodName());
    property.setBackpointerSetMethodName(container.setMethodName());
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlBidirectional.class)) {
    XmlBidirectional backpointer=(XmlBidirectional)helper.getAnnotation(javaHasAnnotations,XmlBidirectional.class);
    property.setBackpointerPropertyName(backpointer.targetAttribute());
    TypeInfo targetInfo=this.getTypeInfo().get(property.getActualType().getName());
    if (targetInfo != null && targetInfo.getXmlAccessType() == XmlAccessType.PROPERTY) {
      String propName=property.getPropertyName();
      propName=Character.toUpperCase(propName.charAt(0)) + propName.substring(1);
      property.setBackpointerGetMethodName(""String_Node_Str"" + propName);
      property.setBackpointerSetMethodName(""String_Node_Str"" + propName);
    }
  }
  processXmlJavaTypeAdapter(property,info);
  processXmlElement(property,info);
  JavaClass ptype=property.getActualType();
  if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
    property.setIsSwaAttachmentRef(true);
    property.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
 else   if (areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(ptype,byte[].class) || areEquals(ptype,Byte[].class)|| areEquals(ptype,Image.class)|| areEquals(ptype,Source.class)|| areEquals(ptype,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
    property.setIsMtomAttachment(true);
    property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
    property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
  }
 else {
    property.setMimeType(""String_Node_Str"");
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
    XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
    QName schemaTypeQname=new QName(schemaType.namespace(),schemaType.name());
    property.setSchemaType(schemaTypeQname);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class)) {
    property.setIsAttribute(true);
    property.setIsRequired(((XmlAttribute)helper.getAnnotation(property.getElement(),XmlAttribute.class)).required());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
    if (info.isAnyAttributeProperty()) {
      throw org.eclipse.persistence.exceptions.JAXBException.multipleAnyAttributeMapping(cls.getName());
    }
    if (!property.getType().getName().equals(""String_Node_Str"")) {
      throw org.eclipse.persistence.exceptions.JAXBException.anyAttributeOnNonMap(property.getPropertyName());
    }
    property.setIsAnyAttribute(true);
    info.setAnyAttributeProperty(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlElementWrapper.class)) {
    if (!isCollectionType(property) && !property.getType().isArray()) {
      throw JAXBException.invalidElementWrapper(property.getPropertyName());
    }
    XmlElementWrapper wrapper=(XmlElementWrapper)helper.getAnnotation(property.getElement(),XmlElementWrapper.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper xmlEltWrapper=new org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper();
    xmlEltWrapper.setName(wrapper.name());
    xmlEltWrapper.setNamespace(wrapper.namespace());
    xmlEltWrapper.setNillable(wrapper.nillable());
    xmlEltWrapper.setRequired(wrapper.required());
    property.setXmlElementWrapper(xmlEltWrapper);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlList.class)) {
    if (!isCollectionType(property) && !property.getType().isArray()) {
      throw JAXBException.invalidList(property.getPropertyName());
    }
    property.setIsXmlList(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlValue.class)) {
    if (info.getXmlValueProperty() != null && info.getXmlValueProperty() != property) {
      throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),info.getXmlValueProperty().getPropertyName(),cls.getRawName());
    }
    info.setXmlValueProperty(property);
  }
}","private void processPropertyAnnotations(TypeInfo info,JavaClass cls,JavaHasAnnotations javaHasAnnotations,Property property){
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlMixed.class)) {
    info.setMixed(true);
    property.setMixedContent(true);
  }
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlContainerProperty.class)) {
    XmlContainerProperty container=(XmlContainerProperty)helper.getAnnotation(javaHasAnnotations,XmlContainerProperty.class);
    property.setBidirectionalPropertyName(container.value());
    property.setBidirectionalPropertyGetMethodName(container.getMethodName());
    property.setBidirectionalPropertySetMethodName(container.setMethodName());
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlBidirectional.class)) {
    XmlBidirectional backpointer=(XmlBidirectional)helper.getAnnotation(javaHasAnnotations,XmlBidirectional.class);
    property.setBidirectionalPropertyName(backpointer.targetAttribute());
    TypeInfo targetInfo=this.getTypeInfo().get(property.getActualType().getName());
    if (targetInfo != null && targetInfo.getXmlAccessType() == XmlAccessType.PROPERTY) {
      String propName=property.getPropertyName();
      propName=Character.toUpperCase(propName.charAt(0)) + propName.substring(1);
      property.setBidirectionalPropertyGetMethodName(""String_Node_Str"" + propName);
      property.setBidirectionalPropertySetMethodName(""String_Node_Str"" + propName);
    }
  }
  processXmlJavaTypeAdapter(property,info);
  processXmlElement(property,info);
  JavaClass ptype=property.getActualType();
  if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
    property.setIsSwaAttachmentRef(true);
    property.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
 else   if (areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(ptype,byte[].class) || areEquals(ptype,Byte[].class)|| areEquals(ptype,Image.class)|| areEquals(ptype,Source.class)|| areEquals(ptype,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
    property.setIsMtomAttachment(true);
    property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
    property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
  }
 else {
    property.setMimeType(""String_Node_Str"");
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
    XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
    QName schemaTypeQname=new QName(schemaType.namespace(),schemaType.name());
    property.setSchemaType(schemaTypeQname);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class)) {
    property.setIsAttribute(true);
    property.setIsRequired(((XmlAttribute)helper.getAnnotation(property.getElement(),XmlAttribute.class)).required());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
    if (info.isAnyAttributeProperty()) {
      throw org.eclipse.persistence.exceptions.JAXBException.multipleAnyAttributeMapping(cls.getName());
    }
    if (!property.getType().getName().equals(""String_Node_Str"")) {
      throw org.eclipse.persistence.exceptions.JAXBException.anyAttributeOnNonMap(property.getPropertyName());
    }
    property.setIsAnyAttribute(true);
    info.setAnyAttributeProperty(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlElementWrapper.class)) {
    if (!isCollectionType(property) && !property.getType().isArray()) {
      throw JAXBException.invalidElementWrapper(property.getPropertyName());
    }
    XmlElementWrapper wrapper=(XmlElementWrapper)helper.getAnnotation(property.getElement(),XmlElementWrapper.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper xmlEltWrapper=new org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper();
    xmlEltWrapper.setName(wrapper.name());
    xmlEltWrapper.setNamespace(wrapper.namespace());
    xmlEltWrapper.setNillable(wrapper.nillable());
    xmlEltWrapper.setRequired(wrapper.required());
    property.setXmlElementWrapper(xmlEltWrapper);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlList.class)) {
    if (!isCollectionType(property) && !property.getType().isArray()) {
      throw JAXBException.invalidList(property.getPropertyName());
    }
    property.setIsXmlList(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlValue.class)) {
    if (info.getXmlValueProperty() != null && info.getXmlValueProperty() != property) {
      throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),info.getXmlValueProperty().getPropertyName(),cls.getRawName());
    }
    info.setXmlValueProperty(property);
  }
}"
66832,"/** 
 * Create an XMLCollectionReferenceMapping and add it to the descriptor.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @param referenceClass
 */
public void generateXMLCollectionReferenceMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,JavaClass referenceClass){
  XMLField srcXPath=getXPathForField(property,namespaceInfo,true);
  XMLCollectionReferenceMapping mapping=new XMLCollectionReferenceMapping();
  mapping.setAttributeName(property.getPropertyName());
  mapping.setReuseContainer(true);
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  mapping.setReferenceClassName(referenceClass.getQualifiedName());
  JavaClass collectionType=property.getType();
  if (areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Set.class)) {
    collectionType=jotHashSet;
  }
  mapping.useCollectionClassName(collectionType.getRawName());
  TypeInfo referenceType=typeInfo.get(referenceClass.getQualifiedName());
  if (referenceType.isIDSet()) {
    Property prop=referenceType.getIDProperty();
    XMLField tgtXPath=getXPathForField(prop,namespaceInfo,!(helper.isAnnotationPresent(prop.getElement(),XmlAttribute.class)));
    mapping.addSourceToTargetKeyFieldAssociation(srcXPath.getXPath(),tgtXPath.getXPath());
  }
  if (property.getBackpointerPropertyName() != null) {
    mapping.setBidirectionalTargetAttributeName(property.getBackpointerPropertyName());
    JavaClass backPointerPropertyType=null;
    if (property.getBackpointerGetMethodName() != null && property.getBackpointerSetMethodName() != null && !property.getBackpointerGetMethodName().equals(""String_Node_Str"") && !property.getBackpointerSetMethodName().equals(""String_Node_Str"")) {
      mapping.setBidirectionalTargetGetMethodName(property.getBackpointerSetMethodName());
      mapping.setBidirectionalTargetSetMethodName(property.getBackpointerSetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getBidirectionalTargetGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getBackpointerPropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.setBidirectionalTargetContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  descriptor.addMapping(mapping);
}","/** 
 * Create an XMLCollectionReferenceMapping and add it to the descriptor.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @param referenceClass
 */
public void generateXMLCollectionReferenceMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,JavaClass referenceClass){
  XMLField srcXPath=getXPathForField(property,namespaceInfo,true);
  XMLCollectionReferenceMapping mapping=new XMLCollectionReferenceMapping();
  mapping.setAttributeName(property.getPropertyName());
  mapping.setReuseContainer(true);
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  mapping.setReferenceClassName(referenceClass.getQualifiedName());
  JavaClass collectionType=property.getType();
  if (areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Set.class)) {
    collectionType=jotHashSet;
  }
  mapping.useCollectionClassName(collectionType.getRawName());
  TypeInfo referenceType=typeInfo.get(referenceClass.getQualifiedName());
  if (referenceType.isIDSet()) {
    Property prop=referenceType.getIDProperty();
    XMLField tgtXPath=getXPathForField(prop,namespaceInfo,!(helper.isAnnotationPresent(prop.getElement(),XmlAttribute.class)));
    mapping.addSourceToTargetKeyFieldAssociation(srcXPath.getXPath(),tgtXPath.getXPath());
  }
  if (property.getBidirectionalPropertyName() != null) {
    mapping.setBidirectionalTargetAttributeName(property.getBidirectionalPropertyName());
    JavaClass backPointerPropertyType=null;
    if (property.getBidirectionalPropertyGetMethodName() != null && property.getBidirectionalPropertySetMethodName() != null && !property.getBidirectionalPropertyGetMethodName().equals(""String_Node_Str"") && !property.getBidirectionalPropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.setBidirectionalTargetGetMethodName(property.getBidirectionalPropertySetMethodName());
      mapping.setBidirectionalTargetSetMethodName(property.getBidirectionalPropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getBidirectionalTargetGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getBidirectionalPropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.setBidirectionalTargetContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  descriptor.addMapping(mapping);
}"
66833,"public XMLCompositeCollectionMapping generateCompositeCollectionMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,String referenceClassName){
  XMLCompositeCollectionMapping mapping=new XMLCompositeCollectionMapping();
  mapping.setAttributeName(property.getPropertyName());
  mapping.setReuseContainer(true);
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.isNillable()) {
    mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
  }
  JavaClass collectionType=property.getType();
  if (collectionType.isArray()) {
    JAXBObjectArrayAttributeAccessor accessor=new JAXBObjectArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy());
    accessor.setComponentClassName(collectionType.getComponentType().getRawName());
    mapping.setAttributeAccessor(accessor);
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Set.class)) {
    collectionType=jotHashSet;
  }
  mapping.useCollectionClassName(collectionType.getRawName());
  XMLField xmlField=getXPathForField(property,namespaceInfo,false);
  mapping.setXPath(xmlField.getXPath());
  if (referenceClassName == null) {
    ((XMLField)mapping.getField()).setIsTypedTextField(true);
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
  }
 else {
    mapping.setReferenceClassName(referenceClassName);
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.getBackpointerPropertyName() != null) {
    mapping.setContainerAttributeName(property.getBackpointerPropertyName());
    if (!property.getBackpointerGetMethodName().equals(""String_Node_Str"") && !property.getBackpointerSetMethodName().equals(""String_Node_Str"")) {
      mapping.setContainerGetMethodName(property.getBackpointerSetMethodName());
      mapping.setContainerSetMethodName(property.getBackpointerSetMethodName());
    }
  }
  descriptor.addMapping(mapping);
  return mapping;
}","public XMLCompositeCollectionMapping generateCompositeCollectionMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,String referenceClassName){
  XMLCompositeCollectionMapping mapping=new XMLCompositeCollectionMapping();
  mapping.setAttributeName(property.getPropertyName());
  mapping.setReuseContainer(true);
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.isNillable()) {
    mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
  }
  JavaClass collectionType=property.getType();
  if (collectionType.isArray()) {
    JAXBObjectArrayAttributeAccessor accessor=new JAXBObjectArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy());
    accessor.setComponentClassName(collectionType.getComponentType().getRawName());
    mapping.setAttributeAccessor(accessor);
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Set.class)) {
    collectionType=jotHashSet;
  }
  mapping.useCollectionClassName(collectionType.getRawName());
  XMLField xmlField=getXPathForField(property,namespaceInfo,false);
  mapping.setXPath(xmlField.getXPath());
  if (referenceClassName == null) {
    ((XMLField)mapping.getField()).setIsTypedTextField(true);
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
  }
 else {
    mapping.setReferenceClassName(referenceClassName);
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.getBidirectionalPropertyName() != null) {
    mapping.setContainerAttributeName(property.getBidirectionalPropertyName());
    JavaClass backPointerPropertyType=null;
    JavaClass referenceClass=property.getActualType();
    if (property.getBidirectionalPropertyGetMethodName() != null && property.getBidirectionalPropertySetMethodName() != null && !property.getBidirectionalPropertyGetMethodName().equals(""String_Node_Str"") && !property.getBidirectionalPropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.setContainerGetMethodName(property.getBidirectionalPropertySetMethodName());
      mapping.setContainerSetMethodName(property.getBidirectionalPropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getContainerGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getBidirectionalPropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.getBidirectionalPolicy().setBidirectionalTargetContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  descriptor.addMapping(mapping);
  return mapping;
}"
66834,"/** 
 * Create an XMLObjectReferenceMapping and add it to the descriptor.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @param referenceClass
 */
public void generateXMLObjectReferenceMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,JavaClass referenceClass){
  XMLField srcXPath=getXPathForField(property,namespaceInfo,true);
  XMLObjectReferenceMapping mapping=new XMLObjectReferenceMapping();
  mapping.setAttributeName(property.getPropertyName());
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  mapping.setReferenceClassName(referenceClass.getQualifiedName());
  TypeInfo referenceType=typeInfo.get(referenceClass.getQualifiedName());
  if (referenceType.isIDSet()) {
    Property prop=referenceType.getIDProperty();
    XMLField tgtXPath=getXPathForField(prop,namespaceInfo,!(helper.isAnnotationPresent(prop.getElement(),XmlAttribute.class)));
    mapping.addSourceToTargetKeyFieldAssociation(srcXPath.getXPath(),tgtXPath.getXPath());
  }
  if (property.getBackpointerPropertyName() != null) {
    mapping.setBidirectionalTargetAttributeName(property.getBackpointerPropertyName());
    JavaClass backPointerPropertyType=null;
    if (property.getBackpointerGetMethodName() != null && property.getBackpointerSetMethodName() != null && !property.getBackpointerGetMethodName().equals(""String_Node_Str"") && !property.getBackpointerSetMethodName().equals(""String_Node_Str"")) {
      mapping.setBidirectionalTargetGetMethodName(property.getBackpointerSetMethodName());
      mapping.setBidirectionalTargetSetMethodName(property.getBackpointerSetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getBidirectionalTargetGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getBackpointerPropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.setBidirectionalTargetContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  descriptor.addMapping(mapping);
}","/** 
 * Create an XMLObjectReferenceMapping and add it to the descriptor.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @param referenceClass
 */
public void generateXMLObjectReferenceMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,JavaClass referenceClass){
  XMLField srcXPath=getXPathForField(property,namespaceInfo,true);
  XMLObjectReferenceMapping mapping=new XMLObjectReferenceMapping();
  mapping.setAttributeName(property.getPropertyName());
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  mapping.setReferenceClassName(referenceClass.getQualifiedName());
  TypeInfo referenceType=typeInfo.get(referenceClass.getQualifiedName());
  if (referenceType.isIDSet()) {
    Property prop=referenceType.getIDProperty();
    XMLField tgtXPath=getXPathForField(prop,namespaceInfo,!(helper.isAnnotationPresent(prop.getElement(),XmlAttribute.class)));
    mapping.addSourceToTargetKeyFieldAssociation(srcXPath.getXPath(),tgtXPath.getXPath());
  }
  if (property.getBidirectionalPropertyName() != null) {
    mapping.setBidirectionalTargetAttributeName(property.getBidirectionalPropertyName());
    JavaClass backPointerPropertyType=null;
    if (property.getBidirectionalPropertyGetMethodName() != null && property.getBidirectionalPropertySetMethodName() != null && !property.getBidirectionalPropertyGetMethodName().equals(""String_Node_Str"") && !property.getBidirectionalPropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.setBidirectionalTargetGetMethodName(property.getBidirectionalPropertySetMethodName());
      mapping.setBidirectionalTargetSetMethodName(property.getBidirectionalPropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getBidirectionalTargetGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getBidirectionalPropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.setBidirectionalTargetContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  descriptor.addMapping(mapping);
}"
66835,"public XMLCompositeObjectMapping generateCompositeObjectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,String referenceClassName){
  XMLCompositeObjectMapping mapping=new XMLCompositeObjectMapping();
  mapping.setAttributeName(property.getPropertyName());
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.isNillable()) {
    mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
  }
  mapping.setXPath(getXPathForField(property,namespaceInfo,false).getXPath());
  if (referenceClassName == null) {
    ((XMLField)mapping.getField()).setIsTypedTextField(true);
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
    String defaultValue=property.getDefaultValue();
    if (null != defaultValue) {
      mapping.setConverter(new DefaultElementConverter(defaultValue));
    }
  }
 else {
    mapping.setReferenceClassName(referenceClassName);
  }
  if (property.getBackpointerPropertyName() != null) {
    mapping.setContainerAttributeName(property.getBackpointerPropertyName());
    if (!property.getBackpointerGetMethodName().equals(""String_Node_Str"") && !property.getBackpointerSetMethodName().equals(""String_Node_Str"")) {
      mapping.setContainerGetMethodName(property.getBackpointerSetMethodName());
      mapping.setContainerSetMethodName(property.getBackpointerSetMethodName());
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  descriptor.addMapping(mapping);
  return mapping;
}","public XMLCompositeObjectMapping generateCompositeObjectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,String referenceClassName){
  XMLCompositeObjectMapping mapping=new XMLCompositeObjectMapping();
  mapping.setAttributeName(property.getPropertyName());
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  if (property.isNillable()) {
    mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
  }
  mapping.setXPath(getXPathForField(property,namespaceInfo,false).getXPath());
  if (referenceClassName == null) {
    ((XMLField)mapping.getField()).setIsTypedTextField(true);
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.ANY_TYPE_QNAME);
    String defaultValue=property.getDefaultValue();
    if (null != defaultValue) {
      mapping.setConverter(new DefaultElementConverter(defaultValue));
    }
  }
 else {
    mapping.setReferenceClassName(referenceClassName);
  }
  if (property.getBidirectionalPropertyName() != null) {
    mapping.setContainerAttributeName(property.getBidirectionalPropertyName());
    JavaClass backPointerPropertyType=null;
    JavaClass referenceClass=property.getActualType();
    if (property.getBidirectionalPropertyGetMethodName() != null && property.getBidirectionalPropertySetMethodName() != null && !property.getBidirectionalPropertyGetMethodName().equals(""String_Node_Str"") && !property.getBidirectionalPropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.setContainerGetMethodName(property.getBidirectionalPropertySetMethodName());
      mapping.setContainerSetMethodName(property.getBidirectionalPropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getContainerGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getBidirectionalPropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.getBidirectionalPolicy().setBidirectionalTargetContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  descriptor.addMapping(mapping);
  return mapping;
}"
66836,"/** 
 * This exception should be used when an attempt is made to set an ID property when one has already been set.
 * @param propertyName attempting to set this property as ID
 * @param idPropertyName existing ID property
 * @param descriptorAlias descriptor in question
 * @return
 */
public static JAXBException idAlreadySet(String propertyName,String idPropertyName,String descriptorAlias){
  Object[] args={propertyName,descriptorAlias,idPropertyName};
  JAXBException exception=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,ID_ALREADY_SET,args));
  exception.setErrorCode(ID_ALREADY_SET);
  return exception;
}","/** 
 * This exception should be used when an attempt is made to set an ID property when one has already been set.
 * @param propertyName attempting to set this property as ID
 * @param idPropertyName existing ID property
 * @param className class in question
 * @return
 */
public static JAXBException idAlreadySet(String propertyName,String idPropertyName,String className){
  Object[] args={propertyName,className,idPropertyName};
  JAXBException exception=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,ID_ALREADY_SET,args));
  exception.setErrorCode(ID_ALREADY_SET);
  return exception;
}"
66837,"public boolean marshalAttributes(MarshalRecord marshalRecord,Object object,AbstractSession session){
  boolean hasValue=false;
  NamespaceResolver namespaceResolver=((XMLDescriptor)this.getDescriptor()).getNamespaceResolver();
  List attributeChildren=rootXPathNode.getAttributeChildren();
  if (null != attributeChildren) {
    for (int x=0, attributeChildrenSize=attributeChildren.size(); x < attributeChildrenSize; x++) {
      XPathNode attributeNode=(XPathNode)rootXPathNode.getAttributeChildren().get(x);
      hasValue=attributeNode.marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance()) || hasValue;
    }
  }
  if (rootXPathNode.getAnyAttributeNode() != null) {
    hasValue=rootXPathNode.getAnyAttributeNode().marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance()) || hasValue;
  }
  List selfChildren=rootXPathNode.getSelfChildren();
  if (null != selfChildren) {
    for (int x=0, selfChildrenSize=selfChildren.size(); x < selfChildrenSize; x++) {
      XPathNode childNode=(XPathNode)selfChildren.get(x);
      childNode.marshalSelfAttributes(marshalRecord,object,session,namespaceResolver,marshalRecord.getMarshaller());
    }
  }
  return hasValue;
}","public boolean marshalAttributes(MarshalRecord marshalRecord,Object object,AbstractSession session){
  boolean hasValue=false;
  NamespaceResolver namespaceResolver=((XMLDescriptor)this.getDescriptor()).getNamespaceResolver();
  List<XPathNode> attributeChildren=rootXPathNode.getAttributeChildren();
  if (null != attributeChildren) {
    for (int x=0, attributeChildrenSize=attributeChildren.size(); x < attributeChildrenSize; x++) {
      hasValue=attributeChildren.get(x).marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance()) || hasValue;
    }
  }
  if (rootXPathNode.getAnyAttributeNode() != null) {
    hasValue=rootXPathNode.getAnyAttributeNode().marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance()) || hasValue;
  }
  List<XPathNode> selfChildren=rootXPathNode.getSelfChildren();
  if (null != selfChildren) {
    for (int x=0, selfChildrenSize=selfChildren.size(); x < selfChildrenSize; x++) {
      selfChildren.get(x).marshalSelfAttributes(marshalRecord,object,session,namespaceResolver,marshalRecord.getMarshaller());
    }
  }
  return hasValue;
}"
66838,"public void addNullCapableValue(NullCapableValue nullCapableValue){
  if (null == getNullCapableValues()) {
    this.nullCapableValues=new ArrayList();
  }
  this.nullCapableValues.add(nullCapableValue);
}","public void addNullCapableValue(NullCapableValue nullCapableValue){
  if (null == this.nullCapableValues) {
    this.nullCapableValues=new ArrayList();
  }
  this.nullCapableValues.add(nullCapableValue);
}"
66839,"public void addTransformationMapping(AbstractTransformationMapping transformationMapping){
  if (null == getTransformationMappings()) {
    this.transformationMappings=new ArrayList();
  }
  transformationMappings.add(transformationMapping);
}","public void addTransformationMapping(AbstractTransformationMapping transformationMapping){
  if (null == this.transformationMappings) {
    this.transformationMappings=new ArrayList();
  }
  transformationMappings.add(transformationMapping);
}"
66840,"public void initialize(org.eclipse.persistence.internal.sessions.AbstractSession session){
  super.initialize(session);
  XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
  Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
  Iterator fieldTransformerIterator;
  DatabaseMapping xmlMapping;
  AbstractTransformationMapping transformationMapping;
  FieldTransformerNodeValue fieldTransformerNodeValue;
  Object[] nextFieldToTransformer;
  TypeNodeValue typeNodeValue;
  NodeValue mappingNodeValue=null;
  XMLField xmlField;
  while (mappingIterator.hasNext()) {
    xmlMapping=(DatabaseMapping)mappingIterator.next();
    xmlField=(XMLField)xmlMapping.getField();
    if (xmlMapping.isTransformationMapping()) {
      transformationMapping=(AbstractTransformationMapping)xmlMapping;
      addTransformationMapping(transformationMapping);
      fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
      while (fieldTransformerIterator.hasNext()) {
        fieldTransformerNodeValue=new FieldTransformerNodeValue();
        nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
        xmlField=(XMLField)nextFieldToTransformer[0];
        fieldTransformerNodeValue.setXMLField(xmlField);
        fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
        addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
 else {
      if (xmlMapping.isAbstractDirectMapping()) {
        mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeObjectMapping()) {
        mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
        mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeCollectionMapping()) {
        mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyObjectMapping) {
        mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyCollectionMapping) {
        mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyAttributeMapping) {
        mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataMapping) {
        mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
        mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentMapping) {
        mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentCollectionMapping) {
        mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLCollectionReferenceMapping) {
        XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
        Iterator fieldIt=xmlColMapping.getFields().iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLObjectReferenceMapping) {
        XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
        Iterator fieldIt=xmlORMapping.getFields().iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceObjectMapping) {
        XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
        firstNodeValue.setNullCapableNodeValue(firstNodeValue);
        this.addNullCapableValue(firstNodeValue);
        addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
          nodeValue.setNullCapableNodeValue(firstNodeValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceCollectionMapping) {
        XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
        XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
        HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
        unmarshalValue.setContainerNodeValue(unmarshalValue);
        marshalValue.setFieldToNodeValues(fieldToNodeValues);
        this.addContainerValue(unmarshalValue);
        fieldToNodeValues.put(firstField,unmarshalValue);
        addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
        addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
          nodeValue.setContainerNodeValue(unmarshalValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          fieldToNodeValues.put(next,nodeValue);
        }
        continue;
      }
      if (mappingNodeValue.isContainerValue()) {
        addContainerValue((ContainerValue)mappingNodeValue);
      }
      if (mappingNodeValue.isNullCapableValue()) {
        addNullCapableValue((NullCapableValue)mappingNodeValue);
      }
      if (xmlField != null) {
        addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
 else {
        addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
      if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
        XPathFragment nextFragment=xmlField.getXPathFragment();
        String typeXPath=XMLConstants.EMPTY_STRING;
        while (nextFragment.getNextFragment() != null) {
          typeXPath+=nextFragment.getXPath();
          nextFragment=nextFragment.getNextFragment();
        }
        XMLField typeField=new XMLField();
        if (typeXPath.length() > 0) {
          typeXPath+=""String_Node_Str"";
        }
        typeField.setXPath(typeXPath + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
        typeNodeValue=new TypeNodeValue();
        typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
        addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
  }
  if (xmlDescriptor.hasInheritance()) {
    InheritancePolicy inheritancePolicy=xmlDescriptor.getInheritancePolicy();
    if (!inheritancePolicy.hasClassExtractor()) {
      XMLField classIndicatorField=new XMLField(inheritancePolicy.getClassIndicatorFieldName());
      classIndicatorField.setNamespaceResolver(xmlDescriptor.getNamespaceResolver());
      InheritanceNodeValue inheritanceNodeValue=new InheritanceNodeValue();
      inheritanceNodeValue.setInheritancePolicy(inheritancePolicy);
      addChild(classIndicatorField.getXPathFragment(),inheritanceNodeValue,xmlDescriptor.getNamespaceResolver());
    }
  }
}","public void initialize(org.eclipse.persistence.internal.sessions.AbstractSession session){
  super.initialize(session);
  XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
  Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
  Iterator fieldTransformerIterator;
  DatabaseMapping xmlMapping;
  AbstractTransformationMapping transformationMapping;
  FieldTransformerNodeValue fieldTransformerNodeValue;
  Object[] nextFieldToTransformer;
  TypeNodeValue typeNodeValue;
  NodeValue mappingNodeValue=null;
  XMLField xmlField;
  while (mappingIterator.hasNext()) {
    xmlMapping=(DatabaseMapping)mappingIterator.next();
    xmlField=(XMLField)xmlMapping.getField();
    if (xmlMapping.isTransformationMapping()) {
      transformationMapping=(AbstractTransformationMapping)xmlMapping;
      addTransformationMapping(transformationMapping);
      fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
      while (fieldTransformerIterator.hasNext()) {
        fieldTransformerNodeValue=new FieldTransformerNodeValue();
        nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
        xmlField=(XMLField)nextFieldToTransformer[0];
        fieldTransformerNodeValue.setXMLField(xmlField);
        fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
        addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
 else {
      if (xmlMapping.isAbstractDirectMapping()) {
        mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeObjectMapping()) {
        mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
        mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping.isAbstractCompositeCollectionMapping()) {
        mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyObjectMapping) {
        mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyCollectionMapping) {
        mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLAnyAttributeMapping) {
        mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataMapping) {
        mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
        mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentMapping) {
        mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLFragmentCollectionMapping) {
        mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
      }
 else       if (xmlMapping instanceof XMLCollectionReferenceMapping) {
        XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
        List fields=xmlColMapping.getFields();
        XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
        XPathNode branchNode;
        if (null == xmlColMappingField) {
          if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
            addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          branchNode=rootXPathNode;
        }
 else {
          branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
        }
        Iterator fieldIt=fields.iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLObjectReferenceMapping) {
        XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
        Iterator fieldIt=xmlORMapping.getFields().iterator();
        while (fieldIt.hasNext()) {
          XMLField xmlFld=(XMLField)fieldIt.next();
          mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
          if (mappingNodeValue.isContainerValue()) {
            addContainerValue((ContainerValue)mappingNodeValue);
          }
          if (mappingNodeValue.isNullCapableValue()) {
            addNullCapableValue((NullCapableValue)mappingNodeValue);
          }
          addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceObjectMapping) {
        XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
        firstNodeValue.setNullCapableNodeValue(firstNodeValue);
        this.addNullCapableValue(firstNodeValue);
        addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
          nodeValue.setNullCapableNodeValue(firstNodeValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
        }
        continue;
      }
 else       if (xmlMapping instanceof XMLChoiceCollectionMapping) {
        XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
        Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
        XMLField firstField=(XMLField)fields.next();
        XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
        XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
        HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
        unmarshalValue.setContainerNodeValue(unmarshalValue);
        marshalValue.setFieldToNodeValues(fieldToNodeValues);
        this.addContainerValue(unmarshalValue);
        fieldToNodeValues.put(firstField,unmarshalValue);
        addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
        addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
        while (fields.hasNext()) {
          XMLField next=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
          nodeValue.setContainerNodeValue(unmarshalValue);
          addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          fieldToNodeValues.put(next,nodeValue);
        }
        continue;
      }
      if (mappingNodeValue.isContainerValue()) {
        addContainerValue((ContainerValue)mappingNodeValue);
      }
      if (mappingNodeValue.isNullCapableValue()) {
        addNullCapableValue((NullCapableValue)mappingNodeValue);
      }
      if (xmlField != null) {
        addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
 else {
        addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
      }
      if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
        XPathFragment nextFragment=xmlField.getXPathFragment();
        String typeXPath=XMLConstants.EMPTY_STRING;
        while (nextFragment.getNextFragment() != null) {
          typeXPath+=nextFragment.getXPath();
          nextFragment=nextFragment.getNextFragment();
        }
        XMLField typeField=new XMLField();
        if (typeXPath.length() > 0) {
          typeXPath+=""String_Node_Str"";
        }
        typeField.setXPath(typeXPath + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
        typeNodeValue=new TypeNodeValue();
        typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
        addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
      }
    }
  }
  if (xmlDescriptor.hasInheritance()) {
    InheritancePolicy inheritancePolicy=xmlDescriptor.getInheritancePolicy();
    if (!inheritancePolicy.hasClassExtractor()) {
      XMLField classIndicatorField=new XMLField(inheritancePolicy.getClassIndicatorFieldName());
      classIndicatorField.setNamespaceResolver(xmlDescriptor.getNamespaceResolver());
      InheritanceNodeValue inheritanceNodeValue=new InheritanceNodeValue();
      inheritanceNodeValue.setInheritancePolicy(inheritancePolicy);
      addChild(classIndicatorField.getXPathFragment(),inheritanceNodeValue,xmlDescriptor.getNamespaceResolver());
    }
  }
}"
66841,"public void addContainerValue(ContainerValue containerValue){
  if (null == getContainerValues()) {
    this.containerValues=new ArrayList();
  }
  this.containerValues.add(containerValue);
}","public void addContainerValue(ContainerValue containerValue){
  if (null == this.containerValues) {
    this.containerValues=new ArrayList();
  }
  this.containerValues.add(containerValue);
}"
66842,"public void addChild(XPathFragment xPathFragment,NodeValue nodeValue,NamespaceResolver namespaceResolver){
  getRootXPathNode().addChild(xPathFragment,nodeValue,namespaceResolver);
}","public XPathNode addChild(XPathFragment xPathFragment,NodeValue nodeValue,NamespaceResolver namespaceResolver){
  return getRootXPathNode().addChild(xPathFragment,nodeValue,namespaceResolver);
}"
66843,"private Node selectSingleAttribute(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver){
  if (xPathFragment.hasNamespace()) {
    String attributeNamespaceURI=xmlNamespaceResolver.resolveNamespacePrefix(xPathFragment.getPrefix());
    return contextNode.getAttributes().getNamedItemNS(attributeNamespaceURI,xPathFragment.getLocalName());
  }
 else {
    return contextNode.getAttributes().getNamedItem(xPathFragment.getShortName());
  }
}","private Node selectSingleAttribute(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver){
  if (xPathFragment.hasNamespace()) {
    if (Node.ELEMENT_NODE == contextNode.getNodeType()) {
      String attributeNamespaceURI=xmlNamespaceResolver.resolveNamespacePrefix(xPathFragment.getPrefix());
      return contextNode.getAttributes().getNamedItemNS(attributeNamespaceURI,xPathFragment.getLocalName());
    }
 else {
      return null;
    }
  }
 else {
    if (Node.ELEMENT_NODE == contextNode.getNodeType()) {
      return contextNode.getAttributes().getNamedItem(xPathFragment.getShortName());
    }
 else {
      return null;
    }
  }
}"
66844,"/** 
 * Indicate if the next XPathFragment is an attribute or text() node.
 */
public boolean isOwningNode(XPathFragment xPathFragment){
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    return xPathFragment.nameIsText() || xPathFragment.isAttribute();
  }
  XPathFragment nextFragment=xPathFragment.getNextFragment();
  return (nextFragment != null) && (nextFragment.nameIsText() || nextFragment.isAttribute());
}","/** 
 * Indicate if the next XPathFragment is an attribute or text() node.
 */
public boolean isOwningNode(XPathFragment xPathFragment){
  if (isMarshalNodeValue()) {
    if (xmlCollectionReferenceMapping.usesSingleNode()) {
      return xPathFragment.nameIsText() || xPathFragment.isAttribute();
    }
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    return (nextFragment != null) && (nextFragment.nameIsText() || nextFragment.isAttribute());
  }
  return super.isOwningNode(xPathFragment);
}"
66845,"/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  ContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  String stringValue=XMLConstants.EMPTY_STRING;
  String newValue;
  QName schemaType;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        return false;
      }
      schemaType=getSchemaType(xmlField,fieldValue,session);
      newValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
      if (newValue != null) {
        stringValue+=newValue;
        if (cp.hasNext(iterator)) {
          stringValue+=SPACE;
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}","/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  ContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  String stringValue=XMLConstants.EMPTY_STRING;
  String newValue;
  QName schemaType;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          XMLField fkField=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          return false;
        }
      }
      schemaType=getSchemaType(xmlField,fieldValue,session);
      newValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
      if (newValue != null) {
        stringValue+=newValue;
        if (cp.hasNext(iterator)) {
          stringValue+=SPACE;
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}"
66846,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object targetObject,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlObjectReferenceMapping.buildFieldValue(targetObject,xmlField,session);
  if (fieldValue == null) {
    return false;
  }
  QName schemaType=getSchemaType(xmlField,fieldValue,session);
  String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    marshalRecord.characters(stringValue);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object targetObject,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlObjectReferenceMapping.buildFieldValue(targetObject,xmlField,session);
  if (fieldValue == null) {
    if (null != targetObject) {
      XMLField fkField=(XMLField)xmlObjectReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
      fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(targetObject,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
    }
    if (null == fieldValue) {
      return false;
    }
  }
  QName schemaType=getSchemaType(xmlField,fieldValue,session);
  String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),namespaceResolver);
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    marshalRecord.characters(stringValue);
  }
  return true;
}"
66847,"/** 
 * INTERNAL: return if an xsi:type attribute should be added for the given XMLRootObject
 */
public boolean shouldWriteTypeAttribute(Object object,XMLDescriptor descriptor,boolean isXMLRoot){
  boolean writeTypeAttribute=false;
  if (isXMLRoot && descriptor == null) {
    XMLRoot root=(XMLRoot)object;
    if (root.declaredType != null && root.getObject() != null && root.declaredType != root.getObject().getClass()) {
      return true;
    }
  }
  if (isXMLRoot && (descriptor != null)) {
    XMLRoot xr=(XMLRoot)object;
    if (descriptor.hasInheritance()) {
      XMLField classIndicatorField=(XMLField)descriptor.getInheritancePolicy().getClassIndicatorField();
      String classIndicatorUri=null;
      String classIndicatorLocalName=classIndicatorField.getXPathFragment().getLocalName();
      String classIndicatorPrefix=classIndicatorField.getXPathFragment().getPrefix();
      if (classIndicatorPrefix != null) {
        classIndicatorUri=descriptor.getNamespaceResolver().resolveNamespacePrefix(classIndicatorPrefix);
      }
      if ((classIndicatorLocalName != null) && classIndicatorLocalName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && (classIndicatorUri != null)&& classIndicatorUri.equals(XMLConstants.SCHEMA_INSTANCE_URL)) {
        return false;
      }
    }
    QName qName=new QName(xr.getNamespaceURI(),xr.getLocalName());
    XMLDescriptor xdesc=xmlContext.getDescriptor(qName);
    if (xdesc != null) {
      return xdesc.getJavaClass() != descriptor.getJavaClass();
    }
    if (descriptor.getSchemaReference() == null) {
      return false;
    }
    String xmlRootLocalName=xr.getLocalName();
    String xmlRootUri=xr.getNamespaceURI();
    writeTypeAttribute=true;
    for (int i=0; i < descriptor.getTableNames().size(); i++) {
      if (!writeTypeAttribute) {
        break;
      }
      String defaultRootQualifiedName=(String)descriptor.getTableNames().get(i);
      if (defaultRootQualifiedName != null) {
        String defaultRootLocalName=null;
        String defaultRootUri=null;
        int colonIndex=defaultRootQualifiedName.indexOf(XMLConstants.COLON);
        if (colonIndex > 0) {
          String defaultRootPrefix=defaultRootQualifiedName.substring(0,colonIndex);
          defaultRootLocalName=defaultRootQualifiedName.substring(colonIndex + 1);
          if (descriptor.getNamespaceResolver() != null) {
            defaultRootUri=descriptor.getNamespaceResolver().resolveNamespacePrefix(defaultRootPrefix);
          }
        }
 else {
          defaultRootLocalName=defaultRootQualifiedName;
        }
        if (xmlRootLocalName != null) {
          if ((((defaultRootLocalName == null) && (xmlRootLocalName == null)) || (defaultRootLocalName.equals(xmlRootLocalName))) && (((defaultRootUri == null) && (xmlRootUri == null)) || ((xmlRootUri != null) && (defaultRootUri != null) && (defaultRootUri.equals(xmlRootUri))))) {
            writeTypeAttribute=false;
          }
        }
      }
 else {
        if (xmlRootLocalName == null) {
          writeTypeAttribute=false;
        }
      }
    }
  }
  return writeTypeAttribute;
}","/** 
 * INTERNAL: return if an xsi:type attribute should be added for the given XMLRootObject
 */
public boolean shouldWriteTypeAttribute(Object object,XMLDescriptor descriptor,boolean isXMLRoot){
  if (isXMLRoot) {
    boolean writeTypeAttribute=false;
    if (descriptor == null) {
      XMLRoot root=(XMLRoot)object;
      if (root.declaredType != null && root.getObject() != null && root.declaredType != root.getObject().getClass()) {
        return true;
      }
    }
 else {
      XMLRoot xr=(XMLRoot)object;
      if (descriptor.hasInheritance()) {
        XMLField classIndicatorField=(XMLField)descriptor.getInheritancePolicy().getClassIndicatorField();
        String classIndicatorUri=null;
        String classIndicatorLocalName=classIndicatorField.getXPathFragment().getLocalName();
        String classIndicatorPrefix=classIndicatorField.getXPathFragment().getPrefix();
        if (classIndicatorPrefix != null) {
          classIndicatorUri=descriptor.getNamespaceResolver().resolveNamespacePrefix(classIndicatorPrefix);
        }
        if ((classIndicatorLocalName != null) && classIndicatorLocalName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && (classIndicatorUri != null)&& classIndicatorUri.equals(XMLConstants.SCHEMA_INSTANCE_URL)) {
          return false;
        }
      }
      QName qName=new QName(xr.getNamespaceURI(),xr.getLocalName());
      XMLDescriptor xdesc=xmlContext.getDescriptor(qName);
      if (xdesc != null) {
        return xdesc.getJavaClass() != descriptor.getJavaClass();
      }
      if (descriptor.getSchemaReference() == null) {
        return false;
      }
      String xmlRootLocalName=xr.getLocalName();
      String xmlRootUri=xr.getNamespaceURI();
      writeTypeAttribute=true;
      for (int i=0; i < descriptor.getTableNames().size(); i++) {
        if (!writeTypeAttribute) {
          break;
        }
        String defaultRootQualifiedName=(String)descriptor.getTableNames().get(i);
        if (defaultRootQualifiedName != null) {
          String defaultRootLocalName=null;
          String defaultRootUri=null;
          int colonIndex=defaultRootQualifiedName.indexOf(XMLConstants.COLON);
          if (colonIndex > 0) {
            String defaultRootPrefix=defaultRootQualifiedName.substring(0,colonIndex);
            defaultRootLocalName=defaultRootQualifiedName.substring(colonIndex + 1);
            if (descriptor.getNamespaceResolver() != null) {
              defaultRootUri=descriptor.getNamespaceResolver().resolveNamespacePrefix(defaultRootPrefix);
            }
          }
 else {
            defaultRootLocalName=defaultRootQualifiedName;
          }
          if (xmlRootLocalName != null) {
            if ((((defaultRootLocalName == null) && (xmlRootLocalName == null)) || (defaultRootLocalName.equals(xmlRootLocalName))) && (((defaultRootUri == null) && (xmlRootUri == null)) || ((xmlRootUri != null) && (defaultRootUri != null) && (defaultRootUri.equals(xmlRootUri))))) {
              writeTypeAttribute=false;
            }
          }
        }
 else {
          if (xmlRootLocalName == null) {
            writeTypeAttribute=false;
          }
        }
      }
    }
    return writeTypeAttribute;
  }
  return false;
}"
66848,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      getOutputStream().write(CLOSE_ELEMENT);
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        getOutputStream().write(CR);
      }
      for (int x=0; x < numberOfTabs; x++) {
        getOutputStream().write(TAB);
      }
    }
    isStartElementOpen=true;
    getOutputStream().write(OPEN_START_ELEMENT);
    getOutputStream().write(xPathFragment.getShortNameBytes());
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      outputStream.write(CLOSE_ELEMENT);
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        outputStream.write(CR);
      }
      for (int x=0; x < numberOfTabs; x++) {
        outputStream.write(TAB);
      }
    }
    isStartElementOpen=true;
    outputStream.write(OPEN_START_ELEMENT);
    outputStream.write(xPathFragment.getShortNameBytes());
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66849,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    isLastEventText=false;
    numberOfTabs--;
    if (isStartElementOpen) {
      getOutputStream().write(CLOSE_EMPTY_ELEMENT);
      isStartElementOpen=false;
      complexType=true;
      return;
    }
    if (complexType) {
      getOutputStream().write(CR);
      for (int x=0; x < numberOfTabs; x++) {
        getOutputStream().write(TAB);
      }
    }
 else {
      complexType=true;
    }
    super.endElement(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    isLastEventText=false;
    numberOfTabs--;
    if (isStartElementOpen) {
      outputStream.write(CLOSE_EMPTY_ELEMENT);
      isStartElementOpen=false;
      complexType=true;
      return;
    }
    if (complexType) {
      outputStream.write(CR);
      for (int x=0; x < numberOfTabs; x++) {
        outputStream.write(TAB);
      }
    }
 else {
      complexType=true;
    }
    super.endElement(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66850,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      getOutputStream().write(CLOSE_ELEMENT);
    }
    if (!isLastEventText) {
      getOutputStream().write(CR);
      for (int x=0; x < numberOfTabs; x++) {
        getOutputStream().write(TAB);
      }
    }
    getOutputStream().write(OPEN_START_ELEMENT);
    getOutputStream().write(qName.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      outputStream.write(CLOSE_ELEMENT);
    }
    if (!isLastEventText) {
      outputStream.write(CR);
      for (int x=0; x < numberOfTabs; x++) {
        outputStream.write(TAB);
      }
    }
    outputStream.write(OPEN_START_ELEMENT);
    outputStream.write(qName.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66851,"public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      getOutputStream().write(CLOSE_ELEMENT);
      getOutputStream().write(CR);
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
    complexType=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      outputStream.write(CLOSE_ELEMENT);
      outputStream.write(CR);
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
    complexType=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66852,"/** 
 * INTERNAL:
 */
public void endDocument(){
  try {
    getOutputStream().write(CR);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void endDocument(){
  try {
    outputStream.write(CR);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66853,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      getOutputStream().write(CLOSE_ELEMENT);
      isStartElementOpen=false;
    }
    getOutputStream().write(CR);
    for (int x=0; x < numberOfTabs; x++) {
      getOutputStream().write(TAB);
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      outputStream.write(CLOSE_ELEMENT);
      isStartElementOpen=false;
    }
    outputStream.write(CR);
    for (int x=0; x < numberOfTabs; x++) {
      outputStream.write(TAB);
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66854,"/** 
 * INTERNAL:
 */
public void cdata(String value){
  try {
    if (isStartElementOpen) {
      getOutputStream().write(CLOSE_ELEMENT);
      isStartElementOpen=false;
    }
    getOutputStream().write(CR);
    for (int x=0; x < numberOfTabs; x++) {
      getOutputStream().write(TAB);
    }
    super.cdata(value);
    complexType=true;
  }
 catch (  IOException ex) {
    throw XMLMarshalException.marshalException(ex);
  }
}","/** 
 * INTERNAL:
 */
public void cdata(String value){
  try {
    if (isStartElementOpen) {
      outputStream.write(CLOSE_ELEMENT);
      isStartElementOpen=false;
    }
    outputStream.write(CR);
    for (int x=0; x < numberOfTabs; x++) {
      outputStream.write(TAB);
    }
    super.cdata(value);
    complexType=true;
  }
 catch (  IOException ex) {
    throw XMLMarshalException.marshalException(ex);
  }
}"
66855,"protected void handleAttributes(Attributes atts){
  for (int i=0, attsLength=atts.getLength(); i < attsLength; i++) {
    if ((atts.getQName(i) != null && (atts.getQName(i).startsWith(XMLConstants.XMLNS + XMLConstants.COLON) || atts.getQName(i).equals(XMLConstants.XMLNS)))) {
      continue;
    }
    attribute(atts.getURI(i),atts.getLocalName(i),atts.getQName(i),atts.getValue(i));
  }
}","protected void handleAttributes(Attributes atts){
  for (int i=0, attsLength=atts.getLength(); i < attsLength; i++) {
    String qName=atts.getQName(i);
    if ((qName != null && (qName.startsWith(XMLConstants.XMLNS + XMLConstants.COLON) || qName.equals(XMLConstants.XMLNS)))) {
      continue;
    }
    attribute(atts.getURI(i),atts.getLocalName(i),qName,atts.getValue(i));
  }
}"
66856,"protected void writePrefixMappings(){
  try {
    if (!prefixMappings.isEmpty()) {
      for (java.util.Iterator<String> keys=prefixMappings.keySet().iterator(); keys.hasNext(); ) {
        String prefix=keys.next();
        outputStream.write(' ');
        outputStream.write(XMLConstants.XMLNS.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
        if (prefix.length() > 0) {
          outputStream.write(XMLConstants.COLON);
          outputStream.write(prefix.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
        }
        outputStream.write('=');
        outputStream.write('""');
        outputStream.write(prefixMappings.get(prefix).getBytes(XMLConstants.DEFAULT_XML_ENCODING));
        outputStream.write('""');
      }
      prefixMappings.clear();
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","protected void writePrefixMappings(){
  try {
    if (!prefixMappings.isEmpty()) {
      for (java.util.Iterator<String> keys=prefixMappings.keySet().iterator(); keys.hasNext(); ) {
        String prefix=keys.next();
        outputStream.write(SPACE);
        outputStream.write(XMLConstants.XMLNS.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
        if (prefix.length() > 0) {
          outputStream.write(XMLConstants.COLON);
          outputStream.write(prefix.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
        }
        outputStream.write(OPEN_ATTRIBUTE_VALUE);
        outputStream.write(prefixMappings.get(prefix).getBytes(XMLConstants.DEFAULT_XML_ENCODING));
        outputStream.write(CLOSE_ATTRIBUTE_VALUE);
      }
      prefixMappings.clear();
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66857,"public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      outputStream.write('>');
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      outputStream.write(CLOSE_ELEMENT);
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
66858,"private Property buildChoiceProperty(TypeInfo info,JavaClass cls,JavaHasAnnotations javaHasAnnotations,String propertyName,JavaClass propertyType){
  ChoiceProperty property=new ChoiceProperty(helper);
  XmlElements xmlElements=(XmlElements)helper.getAnnotation(javaHasAnnotations,XmlElements.class);
  XmlElement[] elements=xmlElements.value();
  ArrayList<Property> choiceProperties=new ArrayList<Property>(elements.length);
  validateElementIsInPropOrder(info,propertyName);
  for (int i=0; i < elements.length; i++) {
    XmlElement next=elements[i];
    Property choiceProp=new Property(helper);
    String name=next.name();
    String namespace=next.namespace();
    QName qName=null;
    if (name.equals(""String_Node_Str"")) {
      name=propertyName;
    }
    if (!namespace.equals(""String_Node_Str"")) {
      qName=new QName(namespace,name);
    }
 else {
      NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(cls);
      if (namespaceInfo.isElementFormQualified()) {
        qName=new QName(namespaceInfo.getNamespace(),name);
      }
 else {
        qName=new QName(name);
      }
    }
    choiceProp.setPropertyName(property.getPropertyName());
    Class typeClass=next.type();
    if (typeClass.equals(XmlElement.DEFAULT.class)) {
      choiceProp.setType(propertyType);
    }
 else {
      choiceProp.setType(helper.getJavaClass(typeClass));
    }
    choiceProp.setSchemaName(qName);
    choiceProp.setSchemaType(getSchemaTypeFor(choiceProp.getType()));
    choiceProp.setElement(javaHasAnnotations);
    choiceProperties.add(choiceProp);
  }
  property.setChoiceProperties(choiceProperties);
  return property;
}","private Property buildChoiceProperty(TypeInfo info,JavaClass cls,JavaHasAnnotations javaHasAnnotations,String propertyName,JavaClass propertyType){
  ChoiceProperty property=new ChoiceProperty(helper);
  XmlElements xmlElements=(XmlElements)helper.getAnnotation(javaHasAnnotations,XmlElements.class);
  XmlElement[] elements=xmlElements.value();
  ArrayList<Property> choiceProperties=new ArrayList<Property>(elements.length);
  boolean isIdRef=helper.isAnnotationPresent(javaHasAnnotations,XmlIDREF.class);
  property.setIsXmlIdRef(isIdRef);
  validateElementIsInPropOrder(info,propertyName);
  for (int i=0; i < elements.length; i++) {
    XmlElement next=elements[i];
    Property choiceProp=new Property(helper);
    String name=next.name();
    String namespace=next.namespace();
    QName qName=null;
    if (name.equals(""String_Node_Str"")) {
      name=propertyName;
    }
    if (!namespace.equals(""String_Node_Str"")) {
      qName=new QName(namespace,name);
    }
 else {
      NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(cls);
      if (namespaceInfo.isElementFormQualified()) {
        qName=new QName(namespaceInfo.getNamespace(),name);
      }
 else {
        qName=new QName(name);
      }
    }
    choiceProp.setPropertyName(property.getPropertyName());
    Class typeClass=next.type();
    if (typeClass.equals(XmlElement.DEFAULT.class)) {
      choiceProp.setType(propertyType);
    }
 else {
      choiceProp.setType(helper.getJavaClass(typeClass));
    }
    choiceProp.setSchemaName(qName);
    choiceProp.setSchemaType(getSchemaTypeFor(choiceProp.getType()));
    choiceProp.setElement(javaHasAnnotations);
    choiceProp.setIsXmlIdRef(isIdRef);
    choiceProperties.add(choiceProp);
  }
  property.setChoiceProperties(choiceProperties);
  return property;
}"
66859,"public static ValidationException conflictingAccessTypeForEmbeddable(Object embeddableClass,boolean embeddableAccessType,Object descriptorClass,boolean descriptorAccessType){
  Object[] args={embeddableClass,embeddableAccessType,descriptorClass,descriptorAccessType};
  ValidationException validationException=new ValidationException(ExceptionMessageGenerator.buildMessage(ValidationException.class,CONFLICTNG_ACCESS_TYPE_FOR_EMBEDDABLE,args));
  validationException.setErrorCode(CONFLICTNG_ACCESS_TYPE_FOR_EMBEDDABLE);
  return validationException;
}","public static ValidationException conflictingAccessTypeForEmbeddable(String embeddableClassName,String embeddingClassName1,String accessType1,String embeddingClassName2,String accessType2){
  Object[] args={embeddableClassName,embeddingClassName1,accessType1,embeddingClassName2,accessType2};
  ValidationException validationException=new ValidationException(ExceptionMessageGenerator.buildMessage(ValidationException.class,CONFLICTNG_ACCESS_TYPE_FOR_EMBEDDABLE,args));
  validationException.setErrorCode(CONFLICTNG_ACCESS_TYPE_FOR_EMBEDDABLE);
  return validationException;
}"
66860,"public TableDefinition buildCOUNTRYDWELLERTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldID=new FieldDefinition();
  fieldID.setName(""String_Node_Str"");
  fieldID.setTypeName(""String_Node_Str"");
  fieldID.setSize(18);
  fieldID.setSubSize(0);
  fieldID.setIsPrimaryKey(true);
  fieldID.setIsIdentity(false);
  fieldID.setUnique(true);
  fieldID.setShouldAllowNull(false);
  table.addField(fieldID);
  FieldDefinition fieldFNAME=new FieldDefinition();
  fieldFNAME.setName(""String_Node_Str"");
  fieldFNAME.setTypeName(""String_Node_Str"");
  fieldFNAME.setSize(20);
  fieldFNAME.setSubSize(0);
  fieldFNAME.setIsPrimaryKey(true);
  fieldFNAME.setIsIdentity(false);
  fieldFNAME.setUnique(true);
  fieldFNAME.setShouldAllowNull(false);
  table.addField(fieldFNAME);
  FieldDefinition fieldLNAME=new FieldDefinition();
  fieldLNAME.setName(""String_Node_Str"");
  fieldLNAME.setTypeName(""String_Node_Str"");
  fieldLNAME.setSize(20);
  fieldLNAME.setSubSize(0);
  fieldLNAME.setIsPrimaryKey(true);
  fieldLNAME.setIsIdentity(false);
  fieldLNAME.setUnique(true);
  fieldLNAME.setShouldAllowNull(false);
  table.addField(fieldLNAME);
  FieldDefinition fieldAGE=new FieldDefinition();
  fieldAGE.setName(""String_Node_Str"");
  fieldAGE.setTypeName(""String_Node_Str"");
  fieldAGE.setSize(15);
  fieldAGE.setSubSize(0);
  fieldAGE.setIsPrimaryKey(false);
  fieldAGE.setIsIdentity(false);
  fieldAGE.setUnique(false);
  fieldAGE.setShouldAllowNull(false);
  table.addField(fieldAGE);
  FieldDefinition fieldGENDER=new FieldDefinition();
  fieldGENDER.setName(""String_Node_Str"");
  fieldGENDER.setTypeName(""String_Node_Str"");
  fieldGENDER.setSize(6);
  fieldGENDER.setSubSize(0);
  fieldGENDER.setIsPrimaryKey(false);
  fieldGENDER.setIsIdentity(false);
  fieldGENDER.setUnique(false);
  fieldGENDER.setShouldAllowNull(true);
  table.addField(fieldGENDER);
  FieldDefinition fieldWORLDID=new FieldDefinition();
  fieldWORLDID.setName(""String_Node_Str"");
  fieldWORLDID.setTypeName(""String_Node_Str"");
  fieldWORLDID.setSize(18);
  fieldWORLDID.setSubSize(0);
  fieldWORLDID.setIsPrimaryKey(false);
  fieldWORLDID.setIsIdentity(false);
  fieldWORLDID.setUnique(false);
  fieldWORLDID.setShouldAllowNull(true);
  fieldWORLDID.setForeignKeyFieldName(""String_Node_Str"");
  table.addField(fieldWORLDID);
  return table;
}","public TableDefinition buildCOUNTRYDWELLERTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldID=new FieldDefinition();
  fieldID.setName(""String_Node_Str"");
  fieldID.setTypeName(""String_Node_Str"");
  fieldID.setSize(18);
  fieldID.setSubSize(0);
  fieldID.setIsPrimaryKey(true);
  fieldID.setIsIdentity(true);
  fieldID.setUnique(true);
  fieldID.setShouldAllowNull(false);
  table.addField(fieldID);
  FieldDefinition fieldFNAME=new FieldDefinition();
  fieldFNAME.setName(""String_Node_Str"");
  fieldFNAME.setTypeName(""String_Node_Str"");
  fieldFNAME.setSize(20);
  fieldFNAME.setSubSize(0);
  fieldFNAME.setIsPrimaryKey(true);
  fieldFNAME.setIsIdentity(false);
  fieldFNAME.setUnique(true);
  fieldFNAME.setShouldAllowNull(false);
  table.addField(fieldFNAME);
  FieldDefinition fieldLNAME=new FieldDefinition();
  fieldLNAME.setName(""String_Node_Str"");
  fieldLNAME.setTypeName(""String_Node_Str"");
  fieldLNAME.setSize(20);
  fieldLNAME.setSubSize(0);
  fieldLNAME.setIsPrimaryKey(true);
  fieldLNAME.setIsIdentity(false);
  fieldLNAME.setUnique(true);
  fieldLNAME.setShouldAllowNull(false);
  table.addField(fieldLNAME);
  FieldDefinition fieldAGE=new FieldDefinition();
  fieldAGE.setName(""String_Node_Str"");
  fieldAGE.setTypeName(""String_Node_Str"");
  fieldAGE.setSize(15);
  fieldAGE.setSubSize(0);
  fieldAGE.setIsPrimaryKey(false);
  fieldAGE.setIsIdentity(false);
  fieldAGE.setUnique(false);
  fieldAGE.setShouldAllowNull(false);
  table.addField(fieldAGE);
  FieldDefinition fieldGENDER=new FieldDefinition();
  fieldGENDER.setName(""String_Node_Str"");
  fieldGENDER.setTypeName(""String_Node_Str"");
  fieldGENDER.setSize(6);
  fieldGENDER.setSubSize(0);
  fieldGENDER.setIsPrimaryKey(false);
  fieldGENDER.setIsIdentity(false);
  fieldGENDER.setUnique(false);
  fieldGENDER.setShouldAllowNull(true);
  table.addField(fieldGENDER);
  FieldDefinition fieldWORLDID=new FieldDefinition();
  fieldWORLDID.setName(""String_Node_Str"");
  fieldWORLDID.setTypeName(""String_Node_Str"");
  fieldWORLDID.setSize(18);
  fieldWORLDID.setSubSize(0);
  fieldWORLDID.setIsPrimaryKey(false);
  fieldWORLDID.setIsIdentity(false);
  fieldWORLDID.setUnique(false);
  fieldWORLDID.setShouldAllowNull(true);
  fieldWORLDID.setForeignKeyFieldName(""String_Node_Str"");
  table.addField(fieldWORLDID);
  return table;
}"
66861,"@ManyToMany(cascade={PERSIST,MERGE}) @JoinTable(name=""String_Node_Str"") public List<Witness> getWitnesses(){
  return witnesses;
}","public List<Witness> getWitnesses(){
  return witnesses;
}"
66862,"@Column(name=""String_Node_Str"") public String getDetails(){
  return details;
}","public String getDetails(){
  return details;
}"
66863,"@OneToMany(cascade={PERSIST,MERGE}) @JoinColumn(name=""String_Node_Str"") public List<Official> getOfficials(){
  return officials;
}","public List<Official> getOfficials(){
  return officials;
}"
66864,"@ManyToOne(cascade=PERSIST) @JoinColumn(name=""String_Node_Str"") public Location getLocation(){
  return location;
}","public Location getLocation(){
  return location;
}"
66865,"@Embedded @AttributeOverrides({@AttributeOverride(name=""String_Node_Str"",column=@Column(name=""String_Node_Str"")),@AttributeOverride(name=""String_Node_Str"",column=@Column(name=""String_Node_Str""))}) public Venue getVenue(){
  return venue;
}","public Venue getVenue(){
  return venue;
}"
66866,"@Column(name=""String_Node_Str"") public Date getDate(){
  return date;
}","public Date getDate(){
  return date;
}"
66867,"@Column(name=""String_Node_Str"") public String getDescription(){
  return description;
}","public String getDescription(){
  return description;
}"
66868,"@Embedded public VenueHistory getHistory(){
  return history;
}","public VenueHistory getHistory(){
  return history;
}"
66869,"public TableDefinition buildCOUNTRYDWELLERTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldID=new FieldDefinition();
  fieldID.setName(""String_Node_Str"");
  fieldID.setTypeName(""String_Node_Str"");
  fieldID.setSize(18);
  fieldID.setSubSize(0);
  fieldID.setIsPrimaryKey(true);
  fieldID.setIsIdentity(false);
  fieldID.setUnique(true);
  fieldID.setShouldAllowNull(false);
  table.addField(fieldID);
  FieldDefinition fieldFNAME=new FieldDefinition();
  fieldFNAME.setName(""String_Node_Str"");
  fieldFNAME.setTypeName(""String_Node_Str"");
  fieldFNAME.setSize(20);
  fieldFNAME.setSubSize(0);
  fieldFNAME.setIsPrimaryKey(true);
  fieldFNAME.setIsIdentity(false);
  fieldFNAME.setUnique(true);
  fieldFNAME.setShouldAllowNull(false);
  table.addField(fieldFNAME);
  FieldDefinition fieldLNAME=new FieldDefinition();
  fieldLNAME.setName(""String_Node_Str"");
  fieldLNAME.setTypeName(""String_Node_Str"");
  fieldLNAME.setSize(20);
  fieldLNAME.setSubSize(0);
  fieldLNAME.setIsPrimaryKey(true);
  fieldLNAME.setIsIdentity(false);
  fieldLNAME.setUnique(true);
  fieldLNAME.setShouldAllowNull(false);
  table.addField(fieldLNAME);
  FieldDefinition fieldAGE=new FieldDefinition();
  fieldAGE.setName(""String_Node_Str"");
  fieldAGE.setTypeName(""String_Node_Str"");
  fieldAGE.setSize(15);
  fieldAGE.setSubSize(0);
  fieldAGE.setIsPrimaryKey(false);
  fieldAGE.setIsIdentity(false);
  fieldAGE.setUnique(false);
  fieldAGE.setShouldAllowNull(false);
  table.addField(fieldAGE);
  FieldDefinition fieldGENDER=new FieldDefinition();
  fieldGENDER.setName(""String_Node_Str"");
  fieldGENDER.setTypeName(""String_Node_Str"");
  fieldGENDER.setSize(6);
  fieldGENDER.setSubSize(0);
  fieldGENDER.setIsPrimaryKey(false);
  fieldGENDER.setIsIdentity(false);
  fieldGENDER.setUnique(false);
  fieldGENDER.setShouldAllowNull(true);
  table.addField(fieldGENDER);
  FieldDefinition fieldWORLDID=new FieldDefinition();
  fieldWORLDID.setName(""String_Node_Str"");
  fieldWORLDID.setTypeName(""String_Node_Str"");
  fieldWORLDID.setSize(18);
  fieldWORLDID.setSubSize(0);
  fieldWORLDID.setIsPrimaryKey(false);
  fieldWORLDID.setIsIdentity(false);
  fieldWORLDID.setUnique(false);
  fieldWORLDID.setShouldAllowNull(true);
  fieldWORLDID.setForeignKeyFieldName(""String_Node_Str"");
  table.addField(fieldWORLDID);
  return table;
}","public TableDefinition buildCOUNTRYDWELLERTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldID=new FieldDefinition();
  fieldID.setName(""String_Node_Str"");
  fieldID.setTypeName(""String_Node_Str"");
  fieldID.setSize(18);
  fieldID.setSubSize(0);
  fieldID.setIsPrimaryKey(true);
  fieldID.setIsIdentity(true);
  fieldID.setUnique(true);
  fieldID.setShouldAllowNull(false);
  table.addField(fieldID);
  FieldDefinition fieldFNAME=new FieldDefinition();
  fieldFNAME.setName(""String_Node_Str"");
  fieldFNAME.setTypeName(""String_Node_Str"");
  fieldFNAME.setSize(20);
  fieldFNAME.setSubSize(0);
  fieldFNAME.setIsPrimaryKey(true);
  fieldFNAME.setIsIdentity(false);
  fieldFNAME.setUnique(true);
  fieldFNAME.setShouldAllowNull(false);
  table.addField(fieldFNAME);
  FieldDefinition fieldLNAME=new FieldDefinition();
  fieldLNAME.setName(""String_Node_Str"");
  fieldLNAME.setTypeName(""String_Node_Str"");
  fieldLNAME.setSize(20);
  fieldLNAME.setSubSize(0);
  fieldLNAME.setIsPrimaryKey(true);
  fieldLNAME.setIsIdentity(false);
  fieldLNAME.setUnique(true);
  fieldLNAME.setShouldAllowNull(false);
  table.addField(fieldLNAME);
  FieldDefinition fieldAGE=new FieldDefinition();
  fieldAGE.setName(""String_Node_Str"");
  fieldAGE.setTypeName(""String_Node_Str"");
  fieldAGE.setSize(15);
  fieldAGE.setSubSize(0);
  fieldAGE.setIsPrimaryKey(false);
  fieldAGE.setIsIdentity(false);
  fieldAGE.setUnique(false);
  fieldAGE.setShouldAllowNull(false);
  table.addField(fieldAGE);
  FieldDefinition fieldGENDER=new FieldDefinition();
  fieldGENDER.setName(""String_Node_Str"");
  fieldGENDER.setTypeName(""String_Node_Str"");
  fieldGENDER.setSize(6);
  fieldGENDER.setSubSize(0);
  fieldGENDER.setIsPrimaryKey(false);
  fieldGENDER.setIsIdentity(false);
  fieldGENDER.setUnique(false);
  fieldGENDER.setShouldAllowNull(true);
  table.addField(fieldGENDER);
  FieldDefinition fieldWORLDID=new FieldDefinition();
  fieldWORLDID.setName(""String_Node_Str"");
  fieldWORLDID.setTypeName(""String_Node_Str"");
  fieldWORLDID.setSize(18);
  fieldWORLDID.setSubSize(0);
  fieldWORLDID.setIsPrimaryKey(false);
  fieldWORLDID.setIsIdentity(false);
  fieldWORLDID.setUnique(false);
  fieldWORLDID.setShouldAllowNull(true);
  fieldWORLDID.setForeignKeyFieldName(""String_Node_Str"");
  table.addField(fieldWORLDID);
  return table;
}"
66870,"public void addTests(){
  addTest(new AggregatePrimaryKeyOrderByTest());
  addTest(new NestedAggregateTest());
}","public void addTests(){
  addTest(new AggregatePrimaryKeyTest());
  addTest(new AggregatePrimaryKeyOrderByTest());
  addTest(new NestedAggregateTest());
}"
66871,"public void testAutoGenerationOnEmbeddedId(){
  EntityManager em=createEntityManager(m_persistenceUnit);
  DatabaseSession session=JUnitTestCase.getServerSession(m_persistenceUnit);
  if (!session.getPlatform().isOracle()) {
    return;
  }
  try {
    Name sharedName=new Name();
    sharedName.setFirstName(""String_Node_Str"");
    sharedName.setLastName(""String_Node_Str"");
    CountryDweller countryDweller=new CountryDweller();
    countryDweller.setAge(30);
    countryDweller.setName(sharedName);
    CitySlicker citySlicker=new CitySlicker();
    citySlicker.setAge(53);
    citySlicker.setName(sharedName);
    Name name=new Name();
    name.setFirstName(""String_Node_Str"");
    name.setLastName(""String_Node_Str"");
    CountryDweller countryDweller2=new CountryDweller();
    countryDweller2.setAge(65);
    countryDweller2.setName(name);
    beginTransaction(em);
    em.persist(countryDweller);
    em.persist(countryDweller2);
    em.persist(citySlicker);
    commitTransaction(em);
    clearCache(m_persistenceUnit);
    beginTransaction(em);
    CitySlicker cs=em.find(CitySlicker.class,sharedName);
    CountryDweller cd=em.merge(countryDweller);
    CountryDweller cd2=em.merge(countryDweller2);
    em.remove(cs);
    em.remove(cd);
    em.remove(cd2);
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
  closeEntityManager(em);
}","public void testAutoGenerationOnEmbeddedId(){
  EntityManager em=createEntityManager(m_persistenceUnit);
  try {
    Name sharedName=new Name();
    sharedName.setFirstName(""String_Node_Str"");
    sharedName.setLastName(""String_Node_Str"");
    CountryDweller countryDweller=new CountryDweller();
    countryDweller.setAge(30);
    countryDweller.setName(sharedName);
    CitySlicker citySlicker=new CitySlicker();
    citySlicker.setAge(53);
    citySlicker.setName(sharedName);
    Name name=new Name();
    name.setFirstName(""String_Node_Str"");
    name.setLastName(""String_Node_Str"");
    CountryDweller countryDweller2=new CountryDweller();
    countryDweller2.setAge(65);
    countryDweller2.setName(name);
    beginTransaction(em);
    em.persist(countryDweller);
    em.persist(countryDweller2);
    em.persist(citySlicker);
    commitTransaction(em);
    clearCache(m_persistenceUnit);
    beginTransaction(em);
    CitySlicker cs=em.find(CitySlicker.class,sharedName);
    CountryDweller cd=em.merge(countryDweller);
    CountryDweller cd2=em.merge(countryDweller2);
    em.remove(cs);
    em.remove(cd);
    em.remove(cd2);
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
  closeEntityManager(em);
}"
66872,"/** 
 * INTERNAL:
 */
protected String getBoxedType(MetadataAnnotatedElement annotatedElement){
  PrimitiveType primitiveType=annotatedElement.getPrimitiveType();
  if (primitiveType != null) {
    return processingEnv.getTypeUtils().boxedClass(primitiveType).toString();
  }
  return annotatedElement.getType();
}","/** 
 * INTERNAL:
 */
protected String getBoxedType(MetadataAnnotatedElement annotatedElement){
  PrimitiveType primitiveType=(PrimitiveType)annotatedElement.getPrimitiveType();
  if (primitiveType != null) {
    return processingEnv.getTypeUtils().boxedClass(primitiveType).toString();
  }
  return annotatedElement.getType();
}"
66873,"/** 
 * INTERNAL: Add an embeddable accessor to the project, preserving any previous owning descriptors set if applicable.
 */
protected void addEmbeddableAccessor(EmbeddableAccessor embeddableAccessor){
  if (project.hasEmbeddable(embeddableAccessor.getJavaClass())) {
    embeddableAccessor.setOwningDescriptor(project.getEmbeddableAccessor(embeddableAccessor.getJavaClass()).getOwningDescriptor());
  }
  project.addEmbeddableAccessor(embeddableAccessor);
}","/** 
 * INTERNAL: Add an embeddable accessor to the project, preserving any previous owning descriptors set if applicable.
 */
protected void addEmbeddableAccessor(EmbeddableAccessor embeddableAccessor){
  if (project.hasEmbeddable(embeddableAccessor.getJavaClass())) {
    EmbeddableAccessor existingEmbeddableAccessor=project.getEmbeddableAccessor(embeddableAccessor.getJavaClass());
    embeddableAccessor.addEmbeddingAccessors(existingEmbeddableAccessor.getEmbeddingAccessors());
    embeddableAccessor.addOwningDescriptors(existingEmbeddableAccessor.getOwningDescriptors());
  }
  project.addEmbeddableAccessor(embeddableAccessor);
}"
66874,"/** 
 * INTERNAL:
 */
public void setClassAccessor(ClassAccessor accessor){
  m_classAccessor=accessor;
  accessor.setDescriptor(this);
}","/** 
 * INTERNAL:
 */
public void setClassAccessor(ClassAccessor accessor){
  m_classAccessor=accessor;
}"
66875,"/** 
 * INTERNAL: Process this descriptors accessors. Some accessors will not be processed right away, instead stored on the project for processing in a later  stage.
 */
public void processAccessors(MetadataDescriptor owningDescriptor){
  for (  MappingAccessor accessor : m_accessors.values()) {
    if (!accessor.isProcessed()) {
      if (accessor.isDirectEmbeddableCollection() || accessor.isEmbedded()) {
        EmbeddableAccessor embeddableAccessor=getProject().getEmbeddableAccessor(accessor.getReferenceClass());
        if (embeddableAccessor == null) {
          throw ValidationException.invalidEmbeddedAttribute(getJavaClass(),accessor.getAttributeName(),accessor.getReferenceClass());
        }
 else {
          embeddableAccessor.process(owningDescriptor);
          addEmbeddableDescriptor(embeddableAccessor.getDescriptor());
          if (accessor.isEmbeddedId() || accessor.isDerivedIdClass()) {
            accessor.process();
          }
 else {
            getProject().addEmbeddableMappingAccessor(accessor);
          }
        }
      }
 else       if (accessor.isDirectCollection()) {
        getProject().addDirectCollectionAccessor(accessor);
      }
 else       if (accessor.isRelationship()) {
        if (accessor.derivesId()) {
          m_derivedIdAccessors.add((ObjectAccessor)accessor);
          getProject().addAccessorWithDerivedId(m_classAccessor);
        }
 else {
          addRelationshipAccessor(accessor);
        }
      }
 else {
        accessor.process();
      }
    }
  }
}","/** 
 * INTERNAL: Process this descriptors accessors. Some accessors will not be processed right away, instead stored on the project for processing in a later  stage.
 */
public void processAccessors(){
  for (  MappingAccessor accessor : m_accessors.values()) {
    if (!accessor.isProcessed()) {
      if (accessor.isDirectEmbeddableCollection() || accessor.isEmbedded()) {
        EmbeddableAccessor embeddableAccessor=getProject().getEmbeddableAccessor(accessor.getReferenceClass());
        if (embeddableAccessor == null) {
          throw ValidationException.invalidEmbeddedAttribute(getJavaClass(),accessor.getAttributeName(),accessor.getReferenceClass());
        }
 else {
          if (!embeddableAccessor.isProcessed()) {
            embeddableAccessor.process();
          }
          addEmbeddableDescriptor(embeddableAccessor.getDescriptor());
          if (accessor.isEmbeddedId() || accessor.isDerivedIdClass()) {
            accessor.process();
          }
 else {
            getProject().addEmbeddableMappingAccessor(accessor);
          }
        }
      }
 else       if (accessor.isDirectCollection()) {
        getProject().addDirectCollectionAccessor(accessor);
      }
 else       if (accessor.isRelationship()) {
        if (accessor.derivesId()) {
          m_derivedIdAccessors.add((ObjectAccessor)accessor);
          getProject().addAccessorWithDerivedId(m_classAccessor);
        }
 else {
          addRelationshipAccessor(accessor);
        }
      }
 else {
        accessor.process();
      }
    }
  }
}"
66876,"/** 
 * INTERNAL: 
 */
public MetadataDescriptor(MetadataClass javaClass,ClassAccessor classAccessor){
  this(javaClass);
  setClassAccessor(classAccessor);
}","/** 
 * INTERNAL: 
 */
public MetadataDescriptor(MetadataClass javaClass,ClassAccessor classAccessor){
  this(javaClass);
  m_classAccessor=classAccessor;
}"
66877,"/** 
 * INTERNAL:  Set the metadata descriptor for this accessor.
 */
public void setDescriptor(MetadataDescriptor descriptor){
  m_descriptor=descriptor;
}","/** 
 * INTERNAL:  Set the metadata descriptor for this accessor. When setting the descriptor on entities, the owning descriptor is set to this descriptor.
 */
public void setDescriptor(MetadataDescriptor descriptor){
  m_descriptor=descriptor;
}"
66878,"/** 
 * INTERNAL:  This method should be subclassed in those methods that need to do  extra initialization.
 */
public void initXMLAccessor(MetadataDescriptor descriptor,MetadataProject project){
  m_project=project;
  m_descriptor=descriptor;
}","/** 
 * INTERNAL:  This method should be subclassed in those methods that need to do  extra initialization.
 */
public void initXMLAccessor(MetadataDescriptor descriptor,MetadataProject project){
  m_project=project;
  setDescriptor(descriptor);
}"
66879,"/** 
 * INTERNAL:
 */
public MetadataAccessor(MetadataAnnotation annotation,MetadataAccessibleObject accessibleObject,MetadataDescriptor descriptor,MetadataProject project){
  super(annotation,accessibleObject);
  m_project=project;
  m_descriptor=descriptor;
  initAccess();
}","/** 
 * INTERNAL:
 */
public MetadataAccessor(MetadataAnnotation annotation,MetadataAccessibleObject accessibleObject,MetadataDescriptor descriptor,MetadataProject project){
  super(annotation,accessibleObject);
  m_project=project;
  setDescriptor(descriptor);
  initAccess();
}"
66880,"public static JAXBException invalidCustomizerClass(Exception e,String customizerClassName){
  Object[] args={customizerClassName};
  JAXBException exception=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,INVALID_CUSTOMIZER_CLASS,args),e);
  exception.setErrorCode(INVALID_CUSTOMIZER_CLASS);
  return exception;
}","/** 
 * This exception would typically be thrown when a customizer class is set that is not an instance of DescriptorCustomizer. 
 * @param e
 * @param customizerClassName
 * @return
 */
public static JAXBException invalidCustomizerClass(Exception e,String customizerClassName){
  Object[] args={customizerClassName};
  JAXBException exception=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,INVALID_CUSTOMIZER_CLASS,args),e);
  exception.setErrorCode(INVALID_CUSTOMIZER_CLASS);
  return exception;
}"
66881,"/** 
 * This exception should be used when an attempt is made to set an XmlValue property when one has already been set.
 * @param propertyName attempting to set this property as XmlValue
 * @param idPropertyName existing XmlValue property
 * @param className class in question
 * @return
 */
public static JAXBException xmlValueAlreadySet(String propertyName,String xmlValuePropertyName,String className){
  Object[] args={className,propertyName,xmlValuePropertyName};
  JAXBException exception=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,XMLVALUE_ALREADY_SET,args));
  exception.setErrorCode(XMLVALUE_ALREADY_SET);
  return exception;
}","/** 
 * This exception should be used when an attempt is made to set an XmlValue property when one has already been set.
 * @param propertyName attempting to set this property as XmlValue
 * @param xmlValuePropertyName existing XmlValue property
 * @param className class in question
 * @return
 */
public static JAXBException xmlValueAlreadySet(String propertyName,String xmlValuePropertyName,String className){
  Object[] args={className,propertyName,xmlValuePropertyName};
  JAXBException exception=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,XMLVALUE_ALREADY_SET,args));
  exception.setErrorCode(XMLVALUE_ALREADY_SET);
  return exception;
}"
66882,"/** 
 * INTERNAL: Append the field name to the writer. Should be overridden for special operators such as functions.
 */
protected void writeField(ExpressionSQLPrinter printer,DatabaseField field,SQLSelectStatement statement){
  if (printer.isFirstElementPrinted()) {
    printer.printString(""String_Node_Str"");
  }
 else {
    printer.setIsFirstElementPrinted(true);
  }
  if (statement.requiresAliases()) {
    if (field.getTable() != lastTable) {
      lastTable=field.getTable();
      currentAlias=aliasForTable(lastTable);
    }
    printer.printString(currentAlias.getQualifiedNameDelimited(printer.getPlatform()));
    printer.printString(""String_Node_Str"");
  }
  printer.printString(field.getNameDelimited(printer.getPlatform()));
  if (statement.getUseUniqueFieldAliases()) {
    printer.printString(""String_Node_Str"" + field.getNameDelimited(printer.getPlatform()) + statement.getNextFieldCounterValue());
  }
}","/** 
 * INTERNAL: Append the field name to the writer. Should be overridden for special operators such as functions.
 */
protected void writeField(ExpressionSQLPrinter printer,DatabaseField field,SQLSelectStatement statement){
  if (printer.isFirstElementPrinted()) {
    printer.printString(""String_Node_Str"");
  }
 else {
    printer.setIsFirstElementPrinted(true);
  }
  if (statement.requiresAliases()) {
    if (field.getTable() != lastTable) {
      lastTable=field.getTable();
      currentAlias=aliasForTable(lastTable);
    }
    printer.printString(currentAlias.getQualifiedNameDelimited(printer.getPlatform()));
    printer.printString(""String_Node_Str"");
  }
  printer.printString(field.getNameDelimited(printer.getPlatform()));
  if (statement.getUseUniqueFieldAliases()) {
    printer.printString(""String_Node_Str"" + statement.generatedAlias(field.getNameDelimited(printer.getPlatform())));
  }
}"
66883,"/** 
 * Returns a generated alias based on the column name.  If the new alias will be too long The alias is automatically truncated
 */
protected String generatedAlias(String fieldName){
  final String counterValueString=String.valueOf(getNextFieldCounterValue());
  final Integer maximumAliasLength=getMaximumAliasLength();
  if (null != maximumAliasLength) {
    final int counterValueStringLength=counterValueString.length();
    final int fieldNameLength=fieldName.length();
    final int maximumAliasLengthValue=maximumAliasLength.intValue();
    if ((fieldNameLength + counterValueStringLength) > maximumAliasLengthValue) {
      return fieldName.substring(0,maximumAliasLengthValue - counterValueStringLength) + counterValueString;
    }
  }
  return fieldName + counterValueString;
}","/** 
 * Returns a generated alias based on the column name.  If the new alias will be too long The alias is automatically truncated
 */
public String generatedAlias(String fieldName){
  final String counterValueString=String.valueOf(getNextFieldCounterValue());
  final Integer maximumAliasLength=getMaximumAliasLength();
  if (null != maximumAliasLength) {
    final int counterValueStringLength=counterValueString.length();
    final int fieldNameLength=fieldName.length();
    final int maximumAliasLengthValue=maximumAliasLength.intValue();
    if ((fieldNameLength + counterValueStringLength) > maximumAliasLengthValue) {
      return fieldName.substring(0,maximumAliasLengthValue - counterValueStringLength - 1) + counterValueString;
    }
  }
  return fieldName + counterValueString;
}"
66884,"/** 
 * INTERNAL: TopLink exceptions should only be thrown by TopLink.
 */
protected ValidationException(String message,Exception internalException){
  super(message,internalException);
}","/** 
 * INTERNAL: TopLink exceptions should only be thrown by TopLink.
 */
protected ValidationException(String message,Throwable internalException){
  super(message,internalException);
}"
66885,"public static ValidationException platformClassNotFound(Exception exception,String className){
  Object[] args={className};
  ValidationException validationException=new ValidationException(ExceptionMessageGenerator.buildMessage(ValidationException.class,PLATFORM_CLASS_NOT_FOUND,args),exception);
  validationException.setErrorCode(PLATFORM_CLASS_NOT_FOUND);
  return validationException;
}","public static ValidationException platformClassNotFound(Throwable exception,String className){
  Object[] args={className};
  ValidationException validationException=new ValidationException(ExceptionMessageGenerator.buildMessage(ValidationException.class,PLATFORM_CLASS_NOT_FOUND,args),exception);
  validationException.setErrorCode(PLATFORM_CLASS_NOT_FOUND);
  return validationException;
}"
66886,"/** 
 * INTERNAL: Add XMLType as the default database type for org.w3c.dom.Documents. Add TIMESTAMP, TIMESTAMP WITH TIME ZONE and TIMESTAMP WITH LOCAL TIME ZONE
 */
protected Hashtable buildFieldTypes(){
  Hashtable fieldTypes=super.buildFieldTypes();
  fieldTypes.put(org.w3c.dom.Document.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypes.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypes.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypes.put(oracle.sql.TIMESTAMP.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypes.put(oracle.sql.TIMESTAMPTZ.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypes.put(oracle.sql.TIMESTAMPLTZ.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypes;
}","/** 
 * INTERNAL: Add XMLType as the default database type for org.w3c.dom.Documents. Add TIMESTAMP, TIMESTAMP WITH TIME ZONE and TIMESTAMP WITH LOCAL TIME ZONE
 */
protected Hashtable buildFieldTypes(){
  Hashtable fieldTypes=super.buildFieldTypes();
  fieldTypes.put(org.w3c.dom.Document.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypes.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypes.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypes.put(ORACLE_SQL_TIMESTAMP,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypes.put(ORACLE_SQL_TIMESTAMPTZ,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypes.put(ORACLE_SQL_TIMESTAMPLTZ,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypes;
}"
66887,"/** 
 * INTERNAL: Add TIMESTAMP, TIMESTAMP WITH TIME ZONE and TIMESTAMP WITH LOCAL TIME ZONE
 */
protected Hashtable buildClassTypes(){
  Hashtable classTypeMapping=super.buildClassTypes();
  classTypeMapping.put(""String_Node_Str"",oracle.sql.TIMESTAMP.class);
  classTypeMapping.put(""String_Node_Str"",oracle.sql.TIMESTAMPTZ.class);
  classTypeMapping.put(""String_Node_Str"",oracle.sql.TIMESTAMPLTZ.class);
  return classTypeMapping;
}","/** 
 * INTERNAL: Add TIMESTAMP, TIMESTAMP WITH TIME ZONE and TIMESTAMP WITH LOCAL TIME ZONE
 */
protected Hashtable buildClassTypes(){
  Hashtable classTypeMapping=super.buildClassTypes();
  classTypeMapping.put(""String_Node_Str"",ORACLE_SQL_TIMESTAMP);
  classTypeMapping.put(""String_Node_Str"",ORACLE_SQL_TIMESTAMPTZ);
  classTypeMapping.put(""String_Node_Str"",ORACLE_SQL_TIMESTAMPLTZ);
  return classTypeMapping;
}"
66888,"public void testRoundtripNoTimeZone() throws Exception {
  getXmlConversionManager().setTimeZone(null);
  Document controlDoc=getWriteControlDocument();
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  Object objFromXML=ctx.createUnmarshaller().unmarshal(inputStream);
  getXmlConversionManager().setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  ctx.createMarshaller().marshal(objFromXML,outputStream);
  StringReader sreader=new StringReader(outputStream.toString());
  InputSource inputSource=new InputSource(sreader);
  Document testDoc=parser.parse(inputSource);
  removeEmptyTextNodes(testDoc);
  sreader.close();
  assertXMLIdentical(controlDoc,testDoc);
}","public void testRoundtripNoTimeZone() throws Exception {
  getXmlConversionManager().setTimeZone(null);
  Document controlDoc=getWriteControlDocument();
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  Object objFromXML=xmlUnmarshaller.unmarshal(inputStream);
  getXmlConversionManager().setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  xmlMarshaller.marshal(objFromXML,outputStream);
  StringReader sreader=new StringReader(outputStream.toString());
  InputSource inputSource=new InputSource(sreader);
  Document testDoc=parser.parse(inputSource);
  removeEmptyTextNodes(testDoc);
  sreader.close();
  assertXMLIdentical(controlDoc,testDoc);
}"
66889,"public XMLConversionManager getXmlConversionManager(){
  return (XMLConversionManager)ctx.getSession(0).getDatasourceLogin().getDatasourcePlatform().getConversionManager();
}","public XMLConversionManager getXmlConversionManager(){
  return (XMLConversionManager)xmlContext.getSession(0).getDatasourceLogin().getDatasourcePlatform().getConversionManager();
}"
66890,"public void testRoundtrip() throws Exception {
  getXmlConversionManager().setTimeZoneQualified(true);
  Document controlDoc=getWriteControlDocument();
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  Object objFromXML=ctx.createUnmarshaller().unmarshal(inputStream);
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  ctx.createMarshaller().marshal(objFromXML,outputStream);
  StringReader sreader=new StringReader(outputStream.toString());
  InputSource inputSource=new InputSource(sreader);
  Document testDoc=parser.parse(inputSource);
  removeEmptyTextNodes(testDoc);
  sreader.close();
  assertXMLIdentical(controlDoc,testDoc);
}","public void testRoundtrip() throws Exception {
  getXmlConversionManager().setTimeZoneQualified(true);
  Document controlDoc=getWriteControlDocument();
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  Object objFromXML=xmlUnmarshaller.unmarshal(inputStream);
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  xmlMarshaller.marshal(objFromXML,outputStream);
  StringReader sreader=new StringReader(outputStream.toString());
  InputSource inputSource=new InputSource(sreader);
  Document testDoc=parser.parse(inputSource);
  removeEmptyTextNodes(testDoc);
  sreader.close();
  assertXMLIdentical(controlDoc,testDoc);
}"
66891,"public XMLGregorianCalendarTestCases(String name) throws Exception {
  super(name);
  setProject(proj);
  ctx=getXMLContext(proj);
  setControlDocument(""String_Node_Str"");
}","public XMLGregorianCalendarTestCases(String name) throws Exception {
  super(name);
  setProject(proj);
  setControlDocument(""String_Node_Str"");
}"
66892,"private NodeList getNodes(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver){
  if (xPathFragment.isAttribute()) {
    return selectAttributeNodes(contextNode,xPathFragment,xmlNamespaceResolver);
  }
 else   if (xPathFragment.nameIsText()) {
    return selectTextNodes(contextNode);
  }
 else   if (xPathFragment.isSelfFragment()) {
    XMLNodeList xmlNodeList=new XMLNodeList(1);
    xmlNodeList.add(contextNode);
    return xmlNodeList;
  }
  if (xPathFragment.containsIndex()) {
    return selectElementNodes(contextNode,xPathFragment,xmlNamespaceResolver,xPathFragment.getIndexValue());
  }
  return selectElementNodes(contextNode,xPathFragment,xmlNamespaceResolver);
}","private NodeList getNodes(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver,AbstractNullPolicy nullPolicy){
  if (xPathFragment.isAttribute()) {
    return selectAttributeNodes(contextNode,xPathFragment,xmlNamespaceResolver);
  }
 else   if (xPathFragment.nameIsText()) {
    return selectTextNodes(contextNode,nullPolicy);
  }
 else   if (xPathFragment.isSelfFragment()) {
    XMLNodeList xmlNodeList=new XMLNodeList(1);
    xmlNodeList.add(contextNode);
    return xmlNodeList;
  }
  if (xPathFragment.containsIndex()) {
    return selectElementNodes(contextNode,xPathFragment,xmlNamespaceResolver,xPathFragment.getIndexValue());
  }
  return selectElementNodes(contextNode,xPathFragment,xmlNamespaceResolver);
}"
66893,"private NodeList selectTextNodes(Node contextNode){
  Node n=selectSingleText(contextNode);
  XMLNodeList xmlNodeList=new XMLNodeList();
  if (n != null) {
    xmlNodeList.add(n);
  }
  return xmlNodeList;
}","private NodeList selectTextNodes(Node contextNode,AbstractNullPolicy nullPolicy){
  Node n=selectSingleText(contextNode);
  XMLNodeList xmlNodeList=new XMLNodeList();
  if (n == null && nullPolicy != null) {
    if (nullPolicy.valueIsNull((Element)contextNode)) {
      if (nullPolicy.getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
        xmlNodeList.add(n);
      }
    }
 else {
      xmlNodeList.add(contextNode.getOwnerDocument().createTextNode(XMLConstants.EMPTY_STRING));
    }
  }
 else {
    if (n != null) {
      xmlNodeList.add(n);
    }
  }
  return xmlNodeList;
}"
66894,"private NodeList selectNodes(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver){
  NodeList resultNodes=getNodes(contextNode,xPathFragment,xmlNamespaceResolver);
  if (xPathFragment.getNextFragment() != null) {
    Node resultNode;
    XMLNodeList result=new XMLNodeList();
    int numberOfResultNodes=resultNodes.getLength();
    for (int x=0; x < numberOfResultNodes; x++) {
      resultNode=resultNodes.item(x);
      result.addAll(selectNodes(resultNode,xPathFragment.getNextFragment(),xmlNamespaceResolver));
    }
    return result;
  }
  return resultNodes;
}","private NodeList selectNodes(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver,AbstractNullPolicy nullPolicy){
  NodeList resultNodes=getNodes(contextNode,xPathFragment,xmlNamespaceResolver,nullPolicy);
  if (xPathFragment.getNextFragment() != null) {
    Node resultNode;
    XMLNodeList result=new XMLNodeList();
    int numberOfResultNodes=resultNodes.getLength();
    for (int x=0; x < numberOfResultNodes; x++) {
      resultNode=resultNodes.item(x);
      result.addAll(selectNodes(resultNode,xPathFragment.getNextFragment(),xmlNamespaceResolver,nullPolicy));
    }
    return result;
  }
  return resultNodes;
}"
66895,"private Object selectSingleNode(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver,boolean checkForXsiNil){
  Node resultNode=getSingleNode(contextNode,xPathFragment,xmlNamespaceResolver);
  if (resultNode == null) {
    if (checkForXsiNil) {
      String nil=((Element)contextNode).getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE);
      if (nil.equals(XMLConstants.BOOLEAN_STRING_TRUE)) {
        return XMLRecord.nil;
      }
    }
    if (!xPathFragment.nameIsText()) {
      return XMLRecord.noEntry;
    }
    return null;
  }
  if (xPathFragment.getNextFragment() == null) {
    return resultNode;
  }
  return selectSingleNode(resultNode,xPathFragment.getNextFragment(),xmlNamespaceResolver,checkForXsiNil);
}","private Object selectSingleNode(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver,boolean checkForXsiNil){
  Node resultNode=getSingleNode(contextNode,xPathFragment,xmlNamespaceResolver);
  if (resultNode == null) {
    if (checkForXsiNil) {
      String nil=((Element)contextNode).getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE);
      if (nil.equals(XMLConstants.BOOLEAN_STRING_TRUE)) {
        return XMLRecord.NIL;
      }
    }
    if (!xPathFragment.nameIsText()) {
      return XMLRecord.noEntry;
    }
    return null;
  }
  if (xPathFragment.getNextFragment() == null) {
    return resultNode;
  }
  return selectSingleNode(resultNode,xPathFragment.getNextFragment(),xmlNamespaceResolver,checkForXsiNil);
}"
66896,"/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 */
public void resolveReferences(AbstractSession session){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=null;
      if (mapping.getReuseContainer()) {
        Object currentObject=reference.getSourceObject();
        container=mapping.getAttributeAccessor().getAttributeValueFromObject(currentObject);
      }
 else {
        container=cPolicy.containerInstance();
      }
      createPKVectorsFromMap(reference);
      for (Iterator pkIt=reference.getPrimaryKeys().iterator(); pkIt.hasNext(); ) {
        Vector pkVector=(Vector)pkIt.next();
        Object value=session.getIdentityMapAccessor().getFromIdentityMap(pkVector,reference.getTargetClass());
        if (value != null) {
          cPolicy.addInto(value,container,session);
        }
      }
      mapping.setAttributeValueInObject(reference.getSourceObject(),container);
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      Object value=session.getIdentityMapAccessor().getFromIdentityMap(reference.getPrimaryKeys(),reference.getTargetClass());
      if (value != null) {
        ((XMLObjectReferenceMapping)reference.getMapping()).setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList();
}","/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 */
public void resolveReferences(AbstractSession session){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object currentObject=reference.getSourceObject();
      Object container=null;
      if (mapping.getReuseContainer()) {
        container=mapping.getAttributeAccessor().getAttributeValueFromObject(currentObject);
      }
 else {
        container=cPolicy.containerInstance();
      }
      createPKVectorsFromMap(reference);
      for (Iterator pkIt=reference.getPrimaryKeys().iterator(); pkIt.hasNext(); ) {
        Vector pkVector=(Vector)pkIt.next();
        Object value=session.getIdentityMapAccessor().getFromIdentityMap(pkVector,reference.getTargetClass());
        if (value != null) {
          cPolicy.addInto(value,container,session);
        }
      }
      mapping.setAttributeValueInObject(currentObject,container);
      if (mapping.getBidirectionalTargetAccessor() != null) {
        Object iterator=cPolicy.iteratorFor(container);
        while (cPolicy.hasNext(iterator)) {
          Object next=cPolicy.next(iterator,session);
          if (mapping.getBidirectionalTargetContainerPolicy() == null) {
            mapping.getBidirectionalTargetAccessor().setAttributeValueInObject(next,currentObject);
          }
 else {
            Object backpointerContainer=mapping.getBidirectionalTargetAccessor().getAttributeValueFromObject(next);
            if (backpointerContainer == null) {
              backpointerContainer=mapping.getBidirectionalTargetContainerPolicy().containerInstance();
              mapping.getBidirectionalTargetAccessor().setAttributeValueInObject(next,backpointerContainer);
            }
            mapping.getBidirectionalTargetContainerPolicy().addInto(currentObject,backpointerContainer,session);
          }
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      Object value=session.getIdentityMapAccessor().getFromIdentityMap(reference.getPrimaryKeys(),reference.getTargetClass());
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      AttributeAccessor backpointerAccessor=mapping.getBidirectionalTargetAccessor();
      if (backpointerAccessor != null) {
        if (mapping.getBidirectionalTargetContainerPolicy() == null) {
          mapping.getBidirectionalTargetAccessor().setAttributeValueInObject(value,reference.getSourceObject());
        }
 else {
          Object backpointerContainer=mapping.getBidirectionalTargetAccessor().getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=mapping.getBidirectionalTargetContainerPolicy().containerInstance();
            mapping.getBidirectionalTargetAccessor().setAttributeValueInObject(value,backpointerContainer);
          }
          mapping.getBidirectionalTargetContainerPolicy().addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList();
}"
66897,"/** 
 * ADVANCED: Adjust the OXM metadata to take into accound ORM mapping metadata,
 */
public void applyORMMetadata(AbstractSession ormSession){
  Iterator ormDescriptors=ormSession.getDescriptors().values().iterator();
  while (ormDescriptors.hasNext()) {
    ClassDescriptor ormDescriptor=(ClassDescriptor)ormDescriptors.next();
    Class javaClass=ormDescriptor.getJavaClass();
    AbstractSession oxmSession=null;
    try {
      oxmSession=this.getSession(javaClass);
    }
 catch (    XMLMarshalException ex) {
    }
    if (oxmSession != null) {
      ClassDescriptor oxmDescriptor=oxmSession.getDescriptor(javaClass);
      Iterator<DatabaseMapping> ormMappings=ormDescriptor.getMappings().iterator();
      while (ormMappings.hasNext()) {
        DatabaseMapping ormMapping=ormMappings.next();
        DatabaseMapping oxmMapping=oxmDescriptor.getMappingForAttributeName(ormMapping.getAttributeName());
        if (oxmMapping != null) {
          AttributeAccessor oxmAccessor=oxmMapping.getAttributeAccessor();
          OrmAttributeAccessor newAccessor=new OrmAttributeAccessor(ormMapping.getAttributeAccessor(),oxmAccessor);
          if (ormMapping.isOneToOneMapping() && ((OneToOneMapping)ormMapping).usesIndirection()) {
            newAccessor.setValueHolderProperty(true);
          }
          newAccessor.setChangeTracking(ormDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy());
          oxmMapping.setAttributeAccessor(newAccessor);
          AttributeAccessor containerAccessor=null;
          Class containerClass=null;
          if (oxmMapping instanceof XMLCompositeObjectMapping) {
            containerAccessor=((XMLCompositeObjectMapping)oxmMapping).getContainerAccessor();
            containerClass=((XMLCompositeObjectMapping)oxmMapping).getReferenceClass();
          }
 else           if (oxmMapping instanceof XMLCompositeCollectionMapping) {
            containerAccessor=((XMLCompositeCollectionMapping)oxmMapping).getContainerAccessor();
            containerClass=((XMLCompositeCollectionMapping)oxmMapping).getReferenceClass();
          }
          if (containerAccessor != null) {
            ClassDescriptor containerDescriptor=ormSession.getDescriptor(containerClass);
            if (containerDescriptor != null) {
              DatabaseMapping ormContainerMapping=containerDescriptor.getMappingForAttributeName(containerAccessor.getAttributeName());
              if (ormContainerMapping != null) {
                OrmAttributeAccessor ormAccessor=new OrmAttributeAccessor(ormContainerMapping.getAttributeAccessor(),containerAccessor);
                ormAccessor.setChangeTracking(containerDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy());
                ormAccessor.setValueHolderProperty(ormContainerMapping instanceof OneToOneMapping && ((OneToOneMapping)ormContainerMapping).usesIndirection());
                if (oxmMapping instanceof XMLCompositeObjectMapping) {
                  ((XMLCompositeObjectMapping)oxmMapping).setContainerAccessor(ormAccessor);
                }
 else                 if (oxmMapping instanceof XMLCompositeCollectionMapping) {
                  ((XMLCompositeCollectionMapping)oxmMapping).setContainerAccessor(ormAccessor);
                }
              }
            }
          }
        }
      }
    }
  }
}","/** 
 * ADVANCED: Adjust the OXM metadata to take into accound ORM mapping metadata,
 */
public void applyORMMetadata(AbstractSession ormSession){
  Iterator ormDescriptors=ormSession.getDescriptors().values().iterator();
  while (ormDescriptors.hasNext()) {
    ClassDescriptor ormDescriptor=(ClassDescriptor)ormDescriptors.next();
    Class javaClass=ormDescriptor.getJavaClass();
    AbstractSession oxmSession=null;
    try {
      oxmSession=this.getSession(javaClass);
    }
 catch (    XMLMarshalException ex) {
    }
    if (oxmSession != null) {
      ClassDescriptor oxmDescriptor=oxmSession.getDescriptor(javaClass);
      Iterator<DatabaseMapping> ormMappings=ormDescriptor.getMappings().iterator();
      while (ormMappings.hasNext()) {
        DatabaseMapping ormMapping=ormMappings.next();
        DatabaseMapping oxmMapping=oxmDescriptor.getMappingForAttributeName(ormMapping.getAttributeName());
        if (oxmMapping != null) {
          AttributeAccessor oxmAccessor=oxmMapping.getAttributeAccessor();
          OrmAttributeAccessor newAccessor=new OrmAttributeAccessor(ormMapping.getAttributeAccessor(),oxmAccessor);
          if (ormMapping.isOneToOneMapping() && ((OneToOneMapping)ormMapping).usesIndirection()) {
            newAccessor.setValueHolderProperty(true);
          }
          newAccessor.setChangeTracking(ormDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy());
          oxmMapping.setAttributeAccessor(newAccessor);
          AttributeAccessor containerAccessor=null;
          Class containerClass=null;
          if (oxmMapping instanceof XMLCompositeObjectMapping) {
            containerAccessor=((XMLCompositeObjectMapping)oxmMapping).getContainerAccessor();
            containerClass=((XMLCompositeObjectMapping)oxmMapping).getReferenceClass();
          }
 else           if (oxmMapping instanceof XMLCompositeCollectionMapping) {
            containerAccessor=((XMLCompositeCollectionMapping)oxmMapping).getContainerAccessor();
            containerClass=((XMLCompositeCollectionMapping)oxmMapping).getReferenceClass();
          }
          if (containerAccessor != null) {
            ClassDescriptor containerDescriptor=ormSession.getDescriptor(containerClass);
            if (containerDescriptor != null) {
              DatabaseMapping ormContainerMapping=containerDescriptor.getMappingForAttributeName(containerAccessor.getAttributeName());
              if (ormContainerMapping != null) {
                OrmAttributeAccessor ormAccessor=new OrmAttributeAccessor(ormContainerMapping.getAttributeAccessor(),containerAccessor);
                ormAccessor.setChangeTracking(containerDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy());
                ormAccessor.setValueHolderProperty(ormContainerMapping instanceof OneToOneMapping && ((OneToOneMapping)ormContainerMapping).usesIndirection());
                if (oxmMapping instanceof XMLCompositeObjectMapping) {
                  ((XMLCompositeObjectMapping)oxmMapping).setContainerAccessor(ormAccessor);
                }
 else                 if (oxmMapping instanceof XMLCompositeCollectionMapping) {
                  ((XMLCompositeCollectionMapping)oxmMapping).setContainerAccessor(ormAccessor);
                }
              }
            }
          }
        }
      }
      Iterator<DatabaseMapping> oxmMappingsIterator=oxmDescriptor.getMappings().iterator();
      while (oxmMappingsIterator.hasNext()) {
        DatabaseMapping nextMapping=oxmMappingsIterator.next();
        if (nextMapping instanceof XMLObjectReferenceMapping) {
          XMLObjectReferenceMapping refMapping=(XMLObjectReferenceMapping)nextMapping;
          if (refMapping.getBidirectionalTargetAccessor() != null && refMapping.getBidirectionalTargetContainerPolicy() != null) {
            ClassDescriptor refDescriptor=ormSession.getClassDescriptor(refMapping.getReferenceClass());
            if (refDescriptor != null) {
              DatabaseMapping backpointerMapping=refDescriptor.getMappingForAttributeName(refMapping.getBidirectionalTargetAttributeName());
              if (backpointerMapping != null && backpointerMapping.isCollectionMapping()) {
                refMapping.setBidirectionalTargetContainerClass(((CollectionMapping)backpointerMapping).getContainerPolicy().getContainerClass());
              }
            }
          }
        }
      }
    }
  }
}"
66898,"protected QName getSingleValueToWriteForUnion(XMLUnionField xmlField,Object value,AbstractSession session){
  ArrayList schemaTypes=xmlField.getSchemaTypes();
  QName schemaType=null;
  QName nextQName;
  Class javaClass;
  for (int i=0; i < schemaTypes.size(); i++) {
    nextQName=(QName)(xmlField).getSchemaTypes().get(i);
    try {
      if (nextQName != null) {
        javaClass=xmlField.getJavaClass(nextQName);
        value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,javaClass,nextQName);
        schemaType=nextQName;
        break;
      }
    }
 catch (    ConversionException ce) {
      if (i == (schemaTypes.size() - 1)) {
        schemaType=nextQName;
      }
    }
  }
  return schemaType;
}","protected QName getSingleValueToWriteForUnion(XMLUnionField xmlField,Object value,AbstractSession session){
  ArrayList schemaTypes=xmlField.getSchemaTypes();
  QName schemaType=null;
  for (int i=0, schemaTypesSize=schemaTypes.size(); i < schemaTypesSize; i++) {
    QName nextQName=(QName)(xmlField).getSchemaTypes().get(i);
    try {
      if (nextQName != null) {
        Class javaClass=xmlField.getJavaClass(nextQName);
        value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,javaClass,nextQName);
        schemaType=nextQName;
        break;
      }
    }
 catch (    ConversionException ce) {
      if (i == (schemaTypes.size() - 1)) {
        schemaType=nextQName;
      }
    }
  }
  return schemaType;
}"
66899,"protected IndexedAttributeList buildAttributeList(Element elem) throws SAXException {
  IndexedAttributeList attributes=new IndexedAttributeList();
  NamedNodeMap attrs=elem.getAttributes();
  int length=attrs.getLength();
  for (int i=0; i < length; i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      getContentHandler().startPrefixMapping(next.getLocalName(),next.getValue());
      handleXMLNSPrefixedAttribute(elem,next);
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null && name.equals(XMLConstants.XMLNS)) {
        getContentHandler().startPrefixMapping(XMLConstants.EMPTY_STRING,next.getValue());
      }
    }
    attributes.addAttribute(next);
  }
  return attributes;
}","protected IndexedAttributeList buildAttributeList(Element elem) throws SAXException {
  IndexedAttributeList attributes=new IndexedAttributeList();
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0, length=attrs.getLength(); i < length; i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      getContentHandler().startPrefixMapping(next.getLocalName(),next.getValue());
      handleXMLNSPrefixedAttribute(elem,next);
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null && name.equals(XMLConstants.XMLNS)) {
        getContentHandler().startPrefixMapping(XMLConstants.EMPTY_STRING,next.getValue());
      }
    }
    attributes.addAttribute(next);
  }
  return attributes;
}"
66900,"protected void endPrefixMappings(Element elem) throws SAXException {
  NamedNodeMap attrs=elem.getAttributes();
  int numOfAtts=attrs.getLength();
  for (int i=0; i < numOfAtts; i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      getContentHandler().endPrefixMapping(next.getLocalName());
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null) {
        getContentHandler().endPrefixMapping(XMLConstants.EMPTY_STRING);
      }
    }
  }
}","protected void endPrefixMappings(Element elem) throws SAXException {
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0, numOfAtts=attrs.getLength(); i < numOfAtts; i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      getContentHandler().endPrefixMapping(next.getLocalName());
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null) {
        getContentHandler().endPrefixMapping(XMLConstants.EMPTY_STRING);
      }
    }
  }
}"
66901,"public XMLEventReaderReader(){
  this.namespaces=new HashMap<Integer,ArrayList<Namespace>>();
}","public XMLEventReaderReader(){
  this.namespaces=new HashMap<Integer,List<Namespace>>();
}"
66902,"private void parse(XMLEventReader xmlEventReader) throws SAXException {
  try {
    getContentHandler().startDocument();
    XMLEvent firstEvent=xmlEventReader.nextEvent();
    parseEvent(firstEvent);
    while (depth > 0 && xmlEventReader.hasNext()) {
      XMLEvent xmlEvent=(XMLEvent)xmlEventReader.nextEvent();
      parseEvent(xmlEvent);
    }
    getContentHandler().endDocument();
  }
 catch (  XMLStreamException ex) {
    throw new RuntimeException(ex);
  }
}","private void parse(XMLEventReader xmlEventReader) throws SAXException {
  try {
    contentHandler.startDocument();
    parseEvent(xmlEventReader.nextEvent());
    while (depth > 0) {
      parseEvent(xmlEventReader.nextEvent());
    }
    contentHandler.endDocument();
  }
 catch (  XMLStreamException ex) {
    throw new RuntimeException(ex);
  }
}"
66903,"private void parseEvent(XMLEvent xmlEvent) throws SAXException {
  if (null == getContentHandler()) {
    return;
  }
switch (xmlEvent.getEventType()) {
case XMLEvent.ATTRIBUTE:
{
      break;
    }
case XMLEvent.CDATA:
{
    Characters characters=xmlEvent.asCharacters();
    if (null == lexicalHandler) {
      getContentHandler().characters(characters.getData().toCharArray(),0,characters.getData().length());
    }
 else {
      lexicalHandler.startCDATA();
      getContentHandler().characters(characters.getData().toCharArray(),0,characters.getData().length());
      lexicalHandler.endCDATA();
    }
    break;
  }
case XMLEvent.CHARACTERS:
{
  Characters characters=xmlEvent.asCharacters();
  getContentHandler().characters(characters.getData().toCharArray(),0,characters.getData().length());
  break;
}
case XMLEvent.COMMENT:
{
if (null != lexicalHandler) {
  Comment comment=(Comment)xmlEvent;
  lexicalHandler.comment(comment.getText().toCharArray(),0,comment.getText().length());
}
break;
}
case XMLEvent.DTD:
{
break;
}
case XMLEvent.END_DOCUMENT:
{
depth--;
return;
}
case XMLEvent.END_ELEMENT:
{
ArrayList declaredNs=this.namespaces.get(new Integer(depth));
depth--;
EndElement endElement=xmlEvent.asEndElement();
QName name=endElement.getName();
String prefix=endElement.getName().getPrefix();
if (null == prefix || prefix.length() == 0) {
getContentHandler().endElement(name.getNamespaceURI(),name.getLocalPart(),name.getLocalPart());
}
 else {
getContentHandler().endElement(name.getNamespaceURI(),name.getLocalPart(),prefix + XMLConstants.COLON + name.getLocalPart());
}
if (declaredNs != null) {
Iterator iter=declaredNs.iterator();
while (iter.hasNext()) {
Namespace next=(Namespace)iter.next();
getContentHandler().endPrefixMapping(next.getPrefix());
}
}
break;
}
case XMLEvent.ENTITY_DECLARATION:
{
break;
}
case XMLEvent.ENTITY_REFERENCE:
{
break;
}
case XMLEvent.NAMESPACE:
{
break;
}
case XMLEvent.NOTATION_DECLARATION:
{
break;
}
case XMLEvent.PROCESSING_INSTRUCTION:
{
ProcessingInstruction pi=(ProcessingInstruction)xmlEvent;
getContentHandler().processingInstruction(pi.getTarget(),pi.getData());
break;
}
case XMLEvent.SPACE:
{
char[] characters=xmlEvent.asCharacters().getData().toCharArray();
getContentHandler().characters(characters,0,characters.length);
break;
}
case XMLEvent.START_DOCUMENT:
{
depth++;
break;
}
case XMLEvent.START_ELEMENT:
{
depth++;
StartElement startElement=xmlEvent.asStartElement();
Iterator namespaces=startElement.getNamespaces();
ArrayList<Namespace> declaredNs=null;
if (namespaces.hasNext()) {
declaredNs=new ArrayList<Namespace>();
}
while (namespaces.hasNext()) {
Namespace next=(Namespace)namespaces.next();
getContentHandler().startPrefixMapping(next.getPrefix(),next.getNamespaceURI());
declaredNs.add(next);
}
if (declaredNs != null) {
this.namespaces.put(new Integer(depth),declaredNs);
}
QName qName=startElement.getName();
String prefix=qName.getPrefix();
if (null == prefix || prefix.length() == 0) {
getContentHandler().startElement(qName.getNamespaceURI(),qName.getLocalPart(),qName.getLocalPart(),new IndexedAttributeList(startElement.getAttributes(),startElement.getNamespaces()));
}
 else {
getContentHandler().startElement(qName.getNamespaceURI(),qName.getLocalPart(),prefix + XMLConstants.COLON + qName.getLocalPart(),new IndexedAttributeList(startElement.getAttributes(),startElement.getNamespaces()));
}
break;
}
}
}","private void parseEvent(XMLEvent xmlEvent) throws SAXException {
switch (xmlEvent.getEventType()) {
case XMLEvent.ATTRIBUTE:
{
      break;
    }
case XMLEvent.CDATA:
{
    Characters characters=xmlEvent.asCharacters();
    if (null == lexicalHandler) {
      contentHandler.characters(characters.getData().toCharArray(),0,characters.getData().length());
    }
 else {
      lexicalHandler.startCDATA();
      contentHandler.characters(characters.getData().toCharArray(),0,characters.getData().length());
      lexicalHandler.endCDATA();
    }
    break;
  }
case XMLEvent.CHARACTERS:
{
  char[] characters=xmlEvent.asCharacters().getData().toCharArray();
  contentHandler.characters(characters,0,characters.length);
  break;
}
case XMLEvent.COMMENT:
{
if (null != lexicalHandler) {
  char[] comment=((Comment)xmlEvent).getText().toCharArray();
  lexicalHandler.comment(comment,0,comment.length);
}
break;
}
case XMLEvent.DTD:
{
break;
}
case XMLEvent.END_DOCUMENT:
{
depth--;
return;
}
case XMLEvent.END_ELEMENT:
{
List<Namespace> declaredNs=this.namespaces.get(new Integer(depth));
depth--;
EndElement endElement=xmlEvent.asEndElement();
QName name=endElement.getName();
String prefix=endElement.getName().getPrefix();
if (null == prefix || prefix.length() == 0) {
contentHandler.endElement(name.getNamespaceURI(),name.getLocalPart(),name.getLocalPart());
}
 else {
contentHandler.endElement(name.getNamespaceURI(),name.getLocalPart(),prefix + XMLConstants.COLON + name.getLocalPart());
}
if (declaredNs != null) {
for (Namespace next : declaredNs) {
contentHandler.endPrefixMapping(next.getPrefix());
}
}
break;
}
case XMLEvent.ENTITY_DECLARATION:
{
break;
}
case XMLEvent.ENTITY_REFERENCE:
{
break;
}
case XMLEvent.NAMESPACE:
{
break;
}
case XMLEvent.NOTATION_DECLARATION:
{
break;
}
case XMLEvent.PROCESSING_INSTRUCTION:
{
ProcessingInstruction pi=(ProcessingInstruction)xmlEvent;
contentHandler.processingInstruction(pi.getTarget(),pi.getData());
break;
}
case XMLEvent.SPACE:
{
char[] characters=xmlEvent.asCharacters().getData().toCharArray();
contentHandler.characters(characters,0,characters.length);
break;
}
case XMLEvent.START_DOCUMENT:
{
depth++;
break;
}
case XMLEvent.START_ELEMENT:
{
depth++;
StartElement startElement=xmlEvent.asStartElement();
Iterator namespaces=startElement.getNamespaces();
List<Namespace> declaredNs=null;
if (namespaces.hasNext()) {
declaredNs=new ArrayList<Namespace>();
}
while (namespaces.hasNext()) {
Namespace next=(Namespace)namespaces.next();
contentHandler.startPrefixMapping(next.getPrefix(),next.getNamespaceURI());
declaredNs.add(next);
}
if (declaredNs != null) {
this.namespaces.put(new Integer(depth),declaredNs);
}
QName qName=startElement.getName();
String prefix=qName.getPrefix();
if (null == prefix || prefix.length() == 0) {
contentHandler.startElement(qName.getNamespaceURI(),qName.getLocalPart(),qName.getLocalPart(),new IndexedAttributeList(startElement.getAttributes(),startElement.getNamespaces()));
}
 else {
contentHandler.startElement(qName.getNamespaceURI(),qName.getLocalPart(),prefix + XMLConstants.COLON + qName.getLocalPart(),new IndexedAttributeList(startElement.getAttributes(),startElement.getNamespaces()));
}
break;
}
}
}"
66904,"/** 
 * INTERNAL:
 */
protected void addXMLEntityMappings(String mappingFile){
  try {
    FileObject fileObject=null;
    try {
      fileObject=persistenceUnitReader.getFileObject(mappingFile,processingEnv);
      addXMLEntityMappings(fileObject,XMLEntityMappingsReader.getEclipseLinkOrmProject());
    }
 catch (    XMLMarshalException e) {
      try {
        addXMLEntityMappings(fileObject,XMLEntityMappingsReader.getOrm2Project());
      }
 catch (      XMLMarshalException ee) {
        addXMLEntityMappings(fileObject,XMLEntityMappingsReader.getOrm1Project());
      }
    }
  }
 catch (  IOException exception) {
    processingEnv.getMessager().printMessage(Kind.NOTE,""String_Node_Str"" + mappingFile);
  }
}","/** 
 * INTERNAL:
 */
protected void addXMLEntityMappings(String mappingFile){
  try {
    FileObject fileObject=null;
    try {
      fileObject=persistenceUnitReader.getFileObject(mappingFile,processingEnv);
      addXMLEntityMappings(fileObject,mappingFile,XMLEntityMappingsReader.getEclipseLinkOrmProject());
    }
 catch (    XMLMarshalException e) {
      try {
        addXMLEntityMappings(fileObject,mappingFile,XMLEntityMappingsReader.getOrm2Project());
      }
 catch (      XMLMarshalException ee) {
        addXMLEntityMappings(fileObject,mappingFile,XMLEntityMappingsReader.getOrm1Project());
      }
    }
  }
 catch (  IOException exception) {
    processingEnv.getMessager().printMessage(Kind.NOTE,""String_Node_Str"" + mappingFile);
  }
}"
66905,"/** 
 * INTERNAL:
 */
public PersistenceUnit(SEPersistenceUnitInfo puInfo,MetadataMirrorFactory mirrorFactory,PersistenceUnitReader reader){
  factory=mirrorFactory;
  persistenceUnitInfo=puInfo;
  persistenceUnitReader=reader;
  processingEnv=factory.getProcessingEnvironment();
  project=factory.getMetadataProject(persistenceUnitInfo);
  initXMLEntityMappings();
  initPersistenceUnitProperties();
}","/** 
 * INTERNAL:
 */
public PersistenceUnit(SEPersistenceUnitInfo puInfo,MetadataMirrorFactory mirrorFactory,PersistenceUnitReader reader){
  factory=mirrorFactory;
  persistenceUnitInfo=puInfo;
  persistenceUnitReader=reader;
  processingEnv=factory.getProcessingEnvironment();
  project=factory.getMetadataProject(persistenceUnitInfo);
  initPersistenceUnitProperties();
  initXMLEntityMappings();
}"
66906,"/** 
 * INTERNAL:
 */
protected void initXMLEntityMappings(){
  xmlEntityMappings=new ArrayList<XMLEntityMappings>();
  addXMLEntityMappings(""String_Node_Str"");
  for (  String mappingFile : persistenceUnitInfo.getMappingFileNames()) {
    if (!mappingFile.equals(""String_Node_Str"")) {
      addXMLEntityMappings(mappingFile);
    }
  }
  for (  XMLEntityMappings entityMappings : xmlEntityMappings) {
    entityMappings.setLoader(factory.getLoader());
    entityMappings.setProject(project);
    entityMappings.setMetadataFactory(factory);
    entityMappings.processPersistenceUnitMetadata();
  }
  HashMap<String,EntityAccessor> entities=new HashMap<String,EntityAccessor>();
  HashMap<String,EmbeddableAccessor> embeddables=new HashMap<String,EmbeddableAccessor>();
  for (  XMLEntityMappings entityMappings : xmlEntityMappings) {
    entityMappings.initPersistenceUnitClasses(entities,embeddables);
  }
  for (  EntityAccessor entity : entities.values()) {
    project.addEntityAccessor(entity);
    entity.getEntityMappings().processEntityMappingsDefaults(entity);
  }
  for (  EmbeddableAccessor embeddable : embeddables.values()) {
    addEmbeddableAccessor(embeddable);
    embeddable.getEntityMappings().processEntityMappingsDefaults(embeddable);
  }
}","/** 
 * INTERNAL:
 */
protected void initXMLEntityMappings(){
  xmlEntityMappings=new ArrayList<XMLEntityMappings>();
  addXMLEntityMappings(MetadataHelper.JPA_ORM_FILE);
  Boolean excludeEclipseLinkORM=false;
  if (persistenceUnitProperties.containsKey(PersistenceUnitProperties.EXCLUDE_ECLIPSELINK_ORM_FILE)) {
    excludeEclipseLinkORM=new Boolean((String)persistenceUnitProperties.get(PersistenceUnitProperties.EXCLUDE_ECLIPSELINK_ORM_FILE));
  }
  if (!excludeEclipseLinkORM) {
    addXMLEntityMappings(MetadataHelper.ECLIPSELINK_ORM_FILE);
  }
  for (  String mappingFile : persistenceUnitInfo.getMappingFileNames()) {
    if (!mappingFile.equals(MetadataHelper.JPA_ORM_FILE) && !mappingFile.equals(MetadataHelper.ECLIPSELINK_ORM_FILE)) {
      addXMLEntityMappings(mappingFile);
    }
  }
  for (  XMLEntityMappings entityMappings : xmlEntityMappings) {
    entityMappings.setLoader(factory.getLoader());
    entityMappings.setProject(project);
    entityMappings.setMetadataFactory(factory);
    entityMappings.processPersistenceUnitMetadata();
  }
  HashMap<String,EntityAccessor> entities=new HashMap<String,EntityAccessor>();
  HashMap<String,EmbeddableAccessor> embeddables=new HashMap<String,EmbeddableAccessor>();
  for (  XMLEntityMappings entityMappings : xmlEntityMappings) {
    entityMappings.initPersistenceUnitClasses(entities,embeddables);
  }
  for (  EntityAccessor entity : entities.values()) {
    project.addEntityAccessor(entity);
    entity.getEntityMappings().processEntityMappingsDefaults(entity);
  }
  for (  EmbeddableAccessor embeddable : embeddables.values()) {
    addEmbeddableAccessor(embeddable);
    embeddable.getEntityMappings().processEntityMappingsDefaults(embeddable);
  }
}"
66907,"/** 
 * INTERNAL: Return the canonical name. This will apply the prefix and suffix  qualifiers given to the canonical name. If the given prefix is null, the the default """" is applied. If the given suffix is null, then the default  ""_"" will be applied.
 */
protected static String getCanonicalName(String name,Map<String,String> properties){
  String prefix=properties.get(CANONICAL_MODEL_PREFIX);
  if (prefix == null) {
    prefix=CANONICAL_MODEL_PREFIX_DEFAULT;
  }
  String suffix=properties.get(CANONICAL_MODEL_SUFFIX);
  if (suffix == null) {
    suffix=CANONICAL_MODEL_SUFFIX_DEFAULT;
  }
  return prefix + name + suffix;
}","/** 
 * INTERNAL: Return the canonical name. This will apply the prefix and suffix  qualifiers given to the canonical name. If the given prefix is null, the the default """" is applied. If the given suffix is null, then the default  ""_"" will be applied.
 */
protected static String getCanonicalName(String name,Map<String,String> properties){
  String prefix=properties.get(CANONICAL_MODEL_PREFIX);
  String suffix=properties.get(CANONICAL_MODEL_SUFFIX);
  if (suffix == null) {
    if (prefix == null) {
      suffix=CANONICAL_MODEL_SUFFIX_DEFAULT;
    }
 else {
      suffix=""String_Node_Str"";
    }
  }
  if (prefix == null) {
    prefix=CANONICAL_MODEL_PREFIX_DEFAULT;
  }
  return prefix + name + suffix;
}"
66908,"/** 
 * INTERNAL:
 */
protected boolean loadedFromEclipseLinkXML(){
  if (loadedFromXML()) {
    return getLocation().toString().contains(MetadataHelper.ECLIPSELINK_ORM_FILE);
  }
  return false;
}","/** 
 * INTERNAL:
 */
protected boolean loadedFromEclipseLinkXML(){
  if (loadedFromXML()) {
    return m_entityMappings.isEclipseLinkORMFile();
  }
  return false;
}"
66909,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.externalizedmetadata.ExternalizedMetadataTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  return suite;
}"
66910,"/** 
 * Tests setting the metadata Source in the Map to null. Negative test.
 */
public void testInvalidMapParameterTypeNullValue(){
  Map<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(CONTEXT_PATH,null);
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  JAXBContext jaxbContext;
  try {
    jaxbContext=(JAXBContext)JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}","/** 
 * Tests setting the metadata Source in the Map to null. Negative test.
 */
public void testInvalidMapParameterTypeNullValue(){
  Map<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(CONTEXT_PATH,null);
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  try {
    JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}"
66911,"/** 
 * Tests invalid eclipselink-oxm.xml exception handling. Negative test.
 */
public void testInvalidMetadataFile(){
  String metadataFile=PATH + ""String_Node_Str"";
  InputStream iStream=loader.getResourceAsStream(metadataFile);
  if (iStream == null) {
    fail(""String_Node_Str"" + metadataFile + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(CONTEXT_PATH,new StreamSource(iStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  JAXBContext jaxbContext;
  try {
    jaxbContext=(JAXBContext)JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}","/** 
 * Tests invalid eclipselink-oxm.xml exception handling. Negative test.
 */
public void testInvalidMetadataFile(){
  String metadataFile=PATH + ""String_Node_Str"";
  InputStream iStream=loader.getResourceAsStream(metadataFile);
  if (iStream == null) {
    fail(""String_Node_Str"" + metadataFile + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(CONTEXT_PATH,new StreamSource(iStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  try {
    JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}"
66912,"/** 
 * Tests an invalid parameter type by setting a Key of type Class as opposed to String. Negative test.
 */
public void testInvalidMapParameterTypeBadKey(){
  Map<Class,Source> metadataSourceMap=new HashMap<Class,Source>();
  metadataSourceMap.put(JAXBContextFactory.class,new StreamSource());
  Map<String,Map<Class,Source>> properties=new HashMap<String,Map<Class,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  JAXBContext jaxbContext;
  try {
    jaxbContext=(JAXBContext)JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}","/** 
 * Tests an invalid parameter type by setting a Key of type Class as opposed to String. Negative test.
 */
public void testInvalidMapParameterTypeBadKey(){
  Map<Class,Source> metadataSourceMap=new HashMap<Class,Source>();
  metadataSourceMap.put(JAXBContextFactory.class,new StreamSource());
  Map<String,Map<Class,Source>> properties=new HashMap<String,Map<Class,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  try {
    JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}"
66913,"/** 
 * Tests associating something other than Map<String, Source> with the key 'eclipselink-oxm-xml' in the properties map. Negative test.
 */
public void testInvalidParameterTypeBadOxmXmlValue(){
  Map<String,List<Integer>> properties=new HashMap<String,List<Integer>>();
  ArrayList<Integer> ints=new ArrayList<Integer>();
  ints.add(new Integer(666));
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,ints);
  JAXBContext jaxbContext;
  try {
    jaxbContext=(JAXBContext)JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}","/** 
 * Tests associating something other than Map<String, Source> with the key 'eclipselink-oxm-xml' in the properties map. Negative test.
 */
public void testInvalidParameterTypeBadOxmXmlValue(){
  Map<String,List<Integer>> properties=new HashMap<String,List<Integer>>();
  ArrayList<Integer> ints=new ArrayList<Integer>();
  ints.add(new Integer(666));
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,ints);
  try {
    JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}"
66914,"/** 
 * Tests declaration of a non-existent class via eclipselink-oxm.xml Negative test.
 */
public void testInvalidClassName(){
  String metadataFile=PATH + ""String_Node_Str"";
  InputStream iStream=loader.getResourceAsStream(metadataFile);
  if (iStream == null) {
    fail(""String_Node_Str"" + metadataFile + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(CONTEXT_PATH,new StreamSource(iStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  JAXBContext jaxbContext;
  try {
    jaxbContext=(JAXBContext)JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}","/** 
 * Tests declaration of a non-existent class via eclipselink-oxm.xml Negative test.
 */
public void testInvalidClassName(){
  String metadataFile=PATH + ""String_Node_Str"";
  InputStream iStream=loader.getResourceAsStream(metadataFile);
  if (iStream == null) {
    fail(""String_Node_Str"" + metadataFile + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(CONTEXT_PATH,new StreamSource(iStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  try {
    JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}"
66915,"/** 
 * Tests an invalid parameter type by setting a null Key. Negative test.
 */
public void testInvalidMapParameterTypeNullKey(){
  Map<Class,Source> metadataSourceMap=new HashMap<Class,Source>();
  metadataSourceMap.put(null,new StreamSource());
  Map<String,Map<Class,Source>> properties=new HashMap<String,Map<Class,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  JAXBContext jaxbContext;
  try {
    jaxbContext=(JAXBContext)JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}","/** 
 * Tests an invalid parameter type by setting a null Key. Negative test.
 */
public void testInvalidMapParameterTypeNullKey(){
  Map<Class,Source> metadataSourceMap=new HashMap<Class,Source>();
  metadataSourceMap.put(null,new StreamSource());
  Map<String,Map<Class,Source>> properties=new HashMap<String,Map<Class,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  try {
    JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}"
66916,"/** 
 * Tests an invalid parameter type by setting Map<String, Class> instead  of Map<String, Source>. Negative test.
 */
public void testInvalidParameterTypeBadValue(){
  Map<String,Class> metadataSourceMap=new HashMap<String,Class>();
  metadataSourceMap.put(CONTEXT_PATH,this.getClass());
  Map<String,Map<String,Class>> properties=new HashMap<String,Map<String,Class>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  JAXBContext jaxbContext;
  try {
    jaxbContext=(JAXBContext)JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}","/** 
 * Tests an invalid parameter type by setting Map<String, Class> instead  of Map<String, Source>. Negative test.
 */
public void testInvalidParameterTypeBadValue(){
  Map<String,Class> metadataSourceMap=new HashMap<String,Class>();
  metadataSourceMap.put(CONTEXT_PATH,this.getClass());
  Map<String,Map<String,Class>> properties=new HashMap<String,Map<String,Class>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  try {
    JAXBContextFactory.createContext(CONTEXT_PATH,loader,properties);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}"
66917,"/** 
 * Tests a non-customizer class set via Java annotation. Negative test.
 */
public void testNonCustomizerClass(){
  Class<?>[] classes={Employee.class};
  JAXBContext jaxbContext;
  try {
    jaxbContext=(JAXBContext)JAXBContextFactory.createContext(classes,null);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}","/** 
 * Tests a non-customizer class set via Java annotation. Negative test.
 */
public void testNonCustomizerClass(){
  Class<?>[] classes={Employee.class};
  try {
    JAXBContextFactory.createContext(classes,null);
  }
 catch (  JAXBException e) {
    return;
  }
catch (  Exception x) {
  }
  fail(""String_Node_Str"");
}"
66918,"/** 
 * Test processing an eclipselink-oxm.xml file with no JavaTypes.
 */
public void testBindingsFileWithNoTypes(){
  String contextPath=""String_Node_Str"";
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  String metadataFile=PATH + ""String_Node_Str"";
  InputStream iStream=classLoader.getResourceAsStream(metadataFile);
  if (iStream == null) {
    fail(""String_Node_Str"" + metadataFile + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(""String_Node_Str"",new StreamSource(iStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  JAXBContext jaxbContext;
  try {
    jaxbContext=(JAXBContext)JAXBContextFactory.createContext(new Class[]{},properties);
    jaxbContext.generateSchema(outputResolver);
  }
 catch (  JAXBException e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","/** 
 * Test processing an eclipselink-oxm.xml file with no JavaTypes.
 */
public void testBindingsFileWithNoTypes(){
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  String metadataFile=PATH + ""String_Node_Str"";
  InputStream iStream=classLoader.getResourceAsStream(metadataFile);
  if (iStream == null) {
    fail(""String_Node_Str"" + metadataFile + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(""String_Node_Str"",new StreamSource(iStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  JAXBContext jaxbContext;
  try {
    jaxbContext=(JAXBContext)JAXBContextFactory.createContext(new Class[]{},properties);
    jaxbContext.generateSchema(outputResolver);
  }
 catch (  JAXBException e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}"
66919,"/** 
 * Tests the @XmlAccessorType set in package-info.java.  No overrides will  be performed. Positive test.
 */
public void testPkgXmlAccessorOrderNoOverride(){
  String contextPath=CONTEXT_PATH + ""String_Node_Str"";
  String path=PATH + ""String_Node_Str"";
  outputResolver=generateSchema(new Class[]{org.eclipse.persistence.testing.jaxb.externalizedmetadata.xmlaccessortype.packagelevel.nooverride.Employee.class},1);
  String src=PATH + ""String_Node_Str"";
  String result=validateAgainstSchema(src,EMPTY_NAMESPACE,outputResolver);
  assertTrue(""String_Node_Str"" + result,result == null);
}","/** 
 * Tests the @XmlAccessorType set in package-info.java.  No overrides will  be performed. Positive test.
 */
public void testPkgXmlAccessorOrderNoOverride(){
  outputResolver=generateSchema(new Class[]{org.eclipse.persistence.testing.jaxb.externalizedmetadata.xmlaccessortype.packagelevel.nooverride.Employee.class},1);
  String src=PATH + ""String_Node_Str"";
  String result=validateAgainstSchema(src,EMPTY_NAMESPACE,outputResolver);
  assertTrue(""String_Node_Str"" + result,result == null);
}"
66920,"/** 
 * Tests the @XmlAccessorType set in package-info.java.  No overrides will  be performed. Negative test.
 */
public void testPkgXmlAccessorOrderNoOverrideFail(){
  String contextPath=CONTEXT_PATH + ""String_Node_Str"";
  String path=PATH + ""String_Node_Str"";
  outputResolver=generateSchema(new Class[]{org.eclipse.persistence.testing.jaxb.externalizedmetadata.xmlaccessortype.packagelevel.nooverride.Employee.class},1);
  String src=PATH + ""String_Node_Str"";
  String result=validateAgainstSchema(src,null,outputResolver);
  assertTrue(""String_Node_Str"",result != null);
}","/** 
 * Tests the @XmlAccessorType set in package-info.java.  No overrides will  be performed. Negative test.
 */
public void testPkgXmlAccessorOrderNoOverrideFail(){
  outputResolver=generateSchema(new Class[]{org.eclipse.persistence.testing.jaxb.externalizedmetadata.xmlaccessortype.packagelevel.nooverride.Employee.class},1);
  String src=PATH + ""String_Node_Str"";
  String result=validateAgainstSchema(src,null,outputResolver);
  assertTrue(""String_Node_Str"",result != null);
}"
66921,"protected void verifyAfterLoad(XMLDocument doc){
  super.verifyAfterLoad(doc);
  Object value=doc.getRootObject().get(ID_NAME);
  boolean isSet=doc.getRootObject().isSet(ID_NAME);
  assertEquals(0,value);
  assertNotNull(value);
  assertFalse(isSet);
  value=doc.getRootObject().get(FIRSTNAME_NAME);
  isSet=doc.getRootObject().isSet(FIRSTNAME_NAME);
  assertNull(value);
  assertFalse(isSet);
}","protected void verifyAfterLoad(XMLDocument doc){
  super.verifyAfterLoad(doc);
  Object value=doc.getRootObject().get(ID_NAME);
  boolean isSet=doc.getRootObject().isSet(ID_NAME);
  assertEquals(null,value);
  assertNull(value);
  assertFalse(isSet);
  value=doc.getRootObject().get(FIRSTNAME_NAME);
  isSet=doc.getRootObject().isSet(FIRSTNAME_NAME);
  assertNull(value);
  assertFalse(isSet);
}"
66922,"/** 
 * INTERNAL:
 */
public void setNullable(boolean nullable){
  this.nullable=nullable;
}","/** 
 * INTERNAL:
 */
public void setNullable(boolean nullable){
  this.nullable=nullable;
  if (nullable && getType() != null) {
    updateType();
  }
}"
66923,"/** 
 * INTERNAL: Assign a Type to this Property.
 * @param type   the type of this property.
 */
public void setType(Type type){
  this.type=(SDOType)type;
}","/** 
 * INTERNAL: Assign a Type to this Property.
 * @param type   the type of this property.
 */
public void setType(Type type){
  this.type=(SDOType)type;
  if (isNullable()) {
    updateType();
  }
}"
66924,"private void addSimpleComponentAnnotations(SimpleComponent sc,Property property,boolean element){
  SDOProperty sdoProperty=(SDOProperty)property;
  if (sdoProperty.isReadOnly()) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_READONLY,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,""String_Node_Str"");
  }
  if ((sdoProperty.getAliasNames() != null) && (sdoProperty.getAliasNames().size() > 0)) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String aliasNamesString=buildAliasNameString(sdoProperty.getAliasNames());
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_ALIASNAME,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,aliasNamesString);
  }
  String xsdLocalName=sdoProperty.getXsdLocalName();
  if ((xsdLocalName != null) && !(xsdLocalName.equals(sdoProperty.getName()))) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_NAME,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,sdoProperty.getName());
  }
  if ((element && !sdoProperty.isContainment() && !sdoProperty.getType().isDataType()) || (!element && !sdoProperty.getType().isDataType())) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String uri=sdoProperty.getType().getURI();
    String value=sdoProperty.getType().getName();
    if (uri != null) {
      String typePrefix=getPrefixForURI(uri);
      if (typePrefix != null) {
        value=typePrefix + ""String_Node_Str"" + value;
      }
    }
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_PROPERTYTYPE,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,value);
  }
  if (sdoProperty.getOpposite() != null) {
    String value=sdoProperty.getOpposite().getName();
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_OPPOSITEPROPERTY,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,value);
  }
  Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  Type dataType=(Type)sdoProperty.get(xmlDataTypeProperty);
  if (dataType == null) {
    dataType=getAutomaticDataTypeForType(sdoProperty.getType());
  }
  if (dataType != null) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE,sdoXmlPrefix);
    String dataTypeString=dataType.getName();
    if (dataType.getURI() != null) {
      String dataTypePrefix=getPrefixForURI(dataType.getURI());
      if (dataTypePrefix != null) {
        dataTypeString=dataTypePrefix + ""String_Node_Str"" + dataTypeString;
      }
    }
    sc.getAttributesMap().put(qname,dataTypeString);
  }
  if (element) {
    String mimeType=(String)sdoProperty.get(SDOConstants.MIME_TYPE_PROPERTY);
    if (mimeType != null) {
      String prefix=getPrefixForURI(SDOConstants.MIMETYPE_URL);
      QName qname=new QName(SDOConstants.XML_MIME_TYPE_QNAME.getNamespaceURI(),SDOConstants.XML_MIME_TYPE_QNAME.getLocalPart(),prefix);
      sc.getAttributesMap().put(qname,mimeType);
    }
 else {
      mimeType=(String)sdoProperty.get(SDOConstants.MIME_TYPE_PROPERTY_PROPERTY);
      if (mimeType != null) {
        String prefix=getPrefixForURI(SDOConstants.ORACLE_SDO_URL);
        QName qname=new QName(SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME.getNamespaceURI(),SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME.getLocalPart(),prefix);
        sc.getAttributesMap().put(qname,mimeType);
      }
    }
  }
}","private void addSimpleComponentAnnotations(SimpleComponent sc,Property property,boolean element){
  SDOProperty sdoProperty=(SDOProperty)property;
  if (sdoProperty.isReadOnly()) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_READONLY,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,""String_Node_Str"");
  }
  if ((sdoProperty.getAliasNames() != null) && (sdoProperty.getAliasNames().size() > 0)) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String aliasNamesString=buildAliasNameString(sdoProperty.getAliasNames());
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_ALIASNAME,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,aliasNamesString);
  }
  String xsdLocalName=sdoProperty.getXsdLocalName();
  if ((xsdLocalName != null) && !(xsdLocalName.equals(sdoProperty.getName()))) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_NAME,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,sdoProperty.getName());
  }
  if ((element && !sdoProperty.isContainment() && !sdoProperty.getType().isDataType()) || (!element && !sdoProperty.getType().isDataType())) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String uri=sdoProperty.getType().getURI();
    String value=sdoProperty.getType().getName();
    if (uri != null) {
      String typePrefix=getPrefixForURI(uri);
      if (typePrefix != null) {
        value=typePrefix + ""String_Node_Str"" + value;
      }
    }
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_PROPERTYTYPE,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,value);
  }
  if (sdoProperty.getOpposite() != null) {
    String value=sdoProperty.getOpposite().getName();
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_OPPOSITEPROPERTY,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,value);
  }
  Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  Type dataType=(Type)sdoProperty.get(xmlDataTypeProperty);
  if (dataType == null) {
    dataType=getAutomaticDataTypeForType(sdoProperty.getType());
  }
  if (dataType != null && !shouldSuppressDataType(sdoProperty,dataType)) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE,sdoXmlPrefix);
    String dataTypeString=dataType.getName();
    if (dataType.getURI() != null) {
      String dataTypePrefix=getPrefixForURI(dataType.getURI());
      if (dataTypePrefix != null) {
        dataTypeString=dataTypePrefix + ""String_Node_Str"" + dataTypeString;
      }
    }
    sc.getAttributesMap().put(qname,dataTypeString);
  }
  if (element) {
    String mimeType=(String)sdoProperty.get(SDOConstants.MIME_TYPE_PROPERTY);
    if (mimeType != null) {
      String prefix=getPrefixForURI(SDOConstants.MIMETYPE_URL);
      QName qname=new QName(SDOConstants.XML_MIME_TYPE_QNAME.getNamespaceURI(),SDOConstants.XML_MIME_TYPE_QNAME.getLocalPart(),prefix);
      sc.getAttributesMap().put(qname,mimeType);
    }
 else {
      mimeType=(String)sdoProperty.get(SDOConstants.MIME_TYPE_PROPERTY_PROPERTY);
      if (mimeType != null) {
        String prefix=getPrefixForURI(SDOConstants.ORACLE_SDO_URL);
        QName qname=new QName(SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME.getNamespaceURI(),SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME.getLocalPart(),prefix);
        sc.getAttributesMap().put(qname,mimeType);
      }
    }
  }
}"
66925,"/** 
 * INTERNAL: Create an instance of the composite primary key class for the key object.
 */
public Object createPrimaryKeyInstance(Object key,AbstractSession session){
  KeyElementAccessor[] pkElementArray=this.getKeyClassFields(getPKClass());
  ObjectBuilder builder=getDescriptor().getObjectBuilder();
  if (pkElementArray.length == 1 && pkElementArray[0] instanceof KeyIsElementAccessor) {
    DatabaseMapping mapping=builder.getMappingForAttributeName(pkElementArray[0].getAttributeName());
    return mapping.getRealAttributeValueFromObject(key,session);
  }
  Object keyInstance=getPKClassInstance();
  for (int index=0; index < pkElementArray.length; index++) {
    KeyElementAccessor accessor=pkElementArray[index];
    DatabaseMapping mapping=builder.getMappingForAttributeName(accessor.getAttributeName());
    while (mapping.isAggregateObjectMapping()) {
      mapping=mapping.getReferenceDescriptor().getObjectBuilder().getMappingForAttributeName(pkElementArray[index].getAttributeName());
      if (mapping == null) {
        mapping=builder.getMappingForField(accessor.getDatabaseField());
      }
    }
    Object fieldValue=mapping.getRealAttributeValueFromObject(key,session);
    accessor.setValue(keyInstance,fieldValue);
  }
  return keyInstance;
}","/** 
 * INTERNAL: Create an instance of the composite primary key class for the key object.
 */
public Object createPrimaryKeyInstance(Object key,AbstractSession session){
  KeyElementAccessor[] pkElementArray=this.getKeyClassFields(getPKClass());
  ObjectBuilder builder=getDescriptor().getObjectBuilder();
  if (pkElementArray.length == 1 && pkElementArray[0] instanceof KeyIsElementAccessor) {
    DatabaseMapping mapping=builder.getMappingForAttributeName(pkElementArray[0].getAttributeName());
    return mapping.getRealAttributeValueFromObject(key,session);
  }
  Object keyInstance=getPKClassInstance();
  for (int index=0; index < pkElementArray.length; index++) {
    Object keyObj=key;
    KeyElementAccessor accessor=pkElementArray[index];
    DatabaseField field=accessor.getDatabaseField();
    DatabaseMapping mapping=builder.getMappingForField(field);
    while (mapping.isAggregateObjectMapping()) {
      keyObj=mapping.getRealAttributeValueFromObject(keyObj,session);
      mapping=mapping.getReferenceDescriptor().getObjectBuilder().getMappingForField(accessor.getDatabaseField());
    }
    Object fieldValue=mapping.getRealAttributeValueFromObject(keyObj,session);
    accessor.setValue(keyInstance,fieldValue);
  }
  return keyInstance;
}"
66926,"/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (getHistoryPolicy() != null) {
    session.getProject().setHasGenericHistorySupport(true);
  }
  if (isIsolated()) {
    session.getProject().setHasIsolatedClasses(true);
  }
  if (!shouldIsolateObjectsInUnitOfWork() && !shouldBeReadOnly()) {
    session.getProject().setHasNonIsolatedUOWClasses(true);
  }
  if (isInitialized(INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(INITIALIZED);
  if (isChildDescriptor()) {
    getInheritancePolicy().getParentDescriptor().initialize(session);
    if (getInheritancePolicy().getParentDescriptor().isIsolated()) {
      setIsIsolated(true);
    }
    getInheritancePolicy().initializeOptimisticLocking();
  }
  if (shouldOrderMappings()) {
    Vector mappings=getMappings();
    Object[] mappingsArray=new Object[mappings.size()];
    for (int index=0; index < mappings.size(); index++) {
      mappingsArray[index]=mappings.elementAt(index);
    }
    Arrays.sort(mappingsArray,new MappingCompare());
    mappings=NonSynchronizedVector.newInstance(mappingsArray.length);
    for (int index=0; index < mappingsArray.length; index++) {
      mappings.addElement(mappingsArray[index]);
    }
    setMappings(mappings);
  }
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
    validateMappingType(mapping);
    mapping.initialize(session);
    if (mapping.isLockableMapping()) {
      getLockableMappings().add(mapping);
    }
    if ((mapping.isForeignReferenceMapping()) && (((ForeignReferenceMapping)mapping).getIndirectionPolicy() instanceof ProxyIndirectionPolicy)) {
      session.getProject().setHasProxyIndirection(true);
    }
    if ((usesOptimisticLocking() && getOptimisticLockingPolicy().isCascaded()) || hasCascadeLockingPolicies()) {
      prepareCascadeLockingPolicy(mapping);
    }
    if (mapping.isDerivedIdMapping()) {
      this.hasDerivedId=true;
    }
    Helper.addAllUniqueToVector(getFields(),mapping.getFields());
  }
  if (hasMappingsPostCalculateChangesOnDeleted()) {
    session.getProject().setHasMappingsPostCalculateChangesOnDeleted(true);
  }
  if (!isAggregateDescriptor()) {
    if (!isChildDescriptor()) {
      if (usesOptimisticLocking()) {
        getOptimisticLockingPolicy().initializeProperties();
      }
    }
  }
  for (Iterator queryKeys=getQueryKeys().values().iterator(); queryKeys.hasNext(); ) {
    QueryKey queryKey=(QueryKey)queryKeys.next();
    queryKey.initialize(this);
  }
  if (hasInheritance()) {
    getInheritancePolicy().initialize(session);
    if (getInheritancePolicy().isChildDescriptor()) {
      for (Iterator iterator=getInheritancePolicy().getParentDescriptor().getMappings().iterator(); iterator.hasNext(); ) {
        DatabaseMapping mapping=(DatabaseMapping)iterator.next();
        if (mapping.isAggregateObjectMapping() || ((mapping.isForeignReferenceMapping() && (!mapping.isDirectCollectionMapping())) && (!((ForeignReferenceMapping)mapping).usesIndirection()))) {
          getLockableMappings().add(mapping);
        }
        if (mapping.isDerivedIdMapping()) {
          this.hasDerivedId=true;
        }
      }
    }
  }
  if (hasInheritance() && shouldOrderMappings()) {
    Vector mappings=getMappings();
    Object[] mappingsArray=new Object[mappings.size()];
    for (int index=0; index < mappings.size(); index++) {
      mappingsArray[index]=mappings.elementAt(index);
    }
    Arrays.sort(mappingsArray,new MappingCompare());
    mappings=NonSynchronizedVector.newInstance(mappingsArray.length);
    for (int index=0; index < mappingsArray.length; index++) {
      mappings.addElement(mappingsArray[index]);
    }
    setMappings(mappings);
  }
  setAllFields((Vector)getFields().clone());
  getObjectBuilder().initialize(session);
  if (shouldOrderMappings()) {
    for (int index=getObjectBuilder().getPrimaryKeyMappings().size() - 1; index >= 0; index--) {
      DatabaseMapping mapping=getObjectBuilder().getPrimaryKeyMappings().get(index);
      if ((mapping != null) && mapping.isDirectToFieldMapping()) {
        getMappings().remove(mapping);
        getMappings().add(0,mapping);
        DatabaseField field=((AbstractDirectMapping)mapping).getField();
        getFields().remove(field);
        getFields().add(0,field);
        getAllFields().remove(field);
        getAllFields().add(0,field);
      }
    }
  }
  if (usesOptimisticLocking() && (!isChildDescriptor())) {
    getOptimisticLockingPolicy().initialize(session);
  }
  if (hasInterfacePolicy() || isDescriptorForInterface()) {
    interfaceInitialization(session);
  }
  if (hasWrapperPolicy()) {
    getWrapperPolicy().initialize(session);
  }
  if (hasReturningPolicy()) {
    getReturningPolicy().initialize(session);
  }
  getQueryManager().initialize(session);
  getEventManager().initialize(session);
  getCopyPolicy().initialize(session);
  getInstantiationPolicy().initialize(session);
  if (getHistoryPolicy() != null) {
    getHistoryPolicy().initialize(session);
  }
 else   if (hasInheritance()) {
    ClassDescriptor parentDescriptor=getInheritancePolicy().getParentDescriptor();
    if ((parentDescriptor != null) && (parentDescriptor.getHistoryPolicy() != null)) {
      setHistoryPolicy((HistoryPolicy)parentDescriptor.getHistoryPolicy().clone());
    }
  }
  if (this.getCMPPolicy() != null) {
    this.getCMPPolicy().initialize(this,session);
  }
  if (hasFetchGroupManager()) {
    getFetchGroupManager().initialize(session);
  }
  if ((getObjectChangePolicyInternal() == null) && (ChangeTracker.class.isAssignableFrom(getJavaClass()))) {
    if (Arrays.asList(getJavaClass().getInterfaces()).contains(PersistenceWeavedChangeTracking.class)) {
      if (supportsChangeTracking(session.getProject())) {
        setObjectChangePolicy(new AttributeChangeTrackingPolicy());
      }
    }
  }
  getObjectChangePolicy().initialize(session,this);
  if (getUnitOfWorkCacheIsolationLevel() == UNDEFINED_ISOLATATION) {
    if (isIsolated()) {
      setUnitOfWorkCacheIsolationLevel(ISOLATE_CACHE_ALWAYS);
    }
 else {
      setUnitOfWorkCacheIsolationLevel(ISOLATE_NEW_DATA_AFTER_TRANSACTION);
    }
  }
  if (getIdValidation() == null) {
    if (getPrimaryKeyFields().size() > 1) {
      setIdValidation(IdValidation.NULL);
    }
 else {
      setIdValidation(IdValidation.ZERO);
    }
  }
  if (this.defaultReadAllQueryRedirector == null) {
    this.defaultReadAllQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultReadObjectQueryRedirector == null) {
    this.defaultReadObjectQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultReportQueryRedirector == null) {
    this.defaultReportQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultInsertObjectQueryRedirector == null) {
    this.defaultInsertObjectQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultUpdateObjectQueryRedirector == null) {
    this.defaultUpdateObjectQueryRedirector=this.defaultQueryRedirector;
  }
}","/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (getHistoryPolicy() != null) {
    session.getProject().setHasGenericHistorySupport(true);
  }
  if (isIsolated()) {
    session.getProject().setHasIsolatedClasses(true);
  }
  if (!shouldIsolateObjectsInUnitOfWork() && !shouldBeReadOnly()) {
    session.getProject().setHasNonIsolatedUOWClasses(true);
  }
  if (isInitialized(INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(INITIALIZED);
  if (isChildDescriptor()) {
    getInheritancePolicy().getParentDescriptor().initialize(session);
    if (getInheritancePolicy().getParentDescriptor().isIsolated()) {
      setIsIsolated(true);
    }
    getInheritancePolicy().initializeOptimisticLocking();
  }
  if (shouldOrderMappings()) {
    Vector mappings=getMappings();
    Object[] mappingsArray=new Object[mappings.size()];
    for (int index=0; index < mappings.size(); index++) {
      mappingsArray[index]=mappings.elementAt(index);
    }
    Arrays.sort(mappingsArray,new MappingCompare());
    mappings=NonSynchronizedVector.newInstance(mappingsArray.length);
    for (int index=0; index < mappingsArray.length; index++) {
      mappings.addElement(mappingsArray[index]);
    }
    setMappings(mappings);
  }
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
    validateMappingType(mapping);
    mapping.initialize(session);
    if (mapping.isLockableMapping()) {
      getLockableMappings().add(mapping);
    }
    if ((mapping.isForeignReferenceMapping()) && (((ForeignReferenceMapping)mapping).getIndirectionPolicy() instanceof ProxyIndirectionPolicy)) {
      session.getProject().setHasProxyIndirection(true);
    }
    if ((usesOptimisticLocking() && getOptimisticLockingPolicy().isCascaded()) || hasCascadeLockingPolicies()) {
      prepareCascadeLockingPolicy(mapping);
    }
    if (mapping.derivesId()) {
      derivesIdMappings.put(mapping.getAttributeName(),mapping);
    }
    Helper.addAllUniqueToVector(getFields(),mapping.getFields());
  }
  if (hasMappingsPostCalculateChangesOnDeleted()) {
    session.getProject().setHasMappingsPostCalculateChangesOnDeleted(true);
  }
  if (!isAggregateDescriptor()) {
    if (!isChildDescriptor()) {
      if (usesOptimisticLocking()) {
        getOptimisticLockingPolicy().initializeProperties();
      }
    }
  }
  for (Iterator queryKeys=getQueryKeys().values().iterator(); queryKeys.hasNext(); ) {
    QueryKey queryKey=(QueryKey)queryKeys.next();
    queryKey.initialize(this);
  }
  if (hasInheritance()) {
    getInheritancePolicy().initialize(session);
    if (getInheritancePolicy().isChildDescriptor()) {
      for (Iterator iterator=getInheritancePolicy().getParentDescriptor().getMappings().iterator(); iterator.hasNext(); ) {
        DatabaseMapping mapping=(DatabaseMapping)iterator.next();
        if (mapping.isAggregateObjectMapping() || ((mapping.isForeignReferenceMapping() && (!mapping.isDirectCollectionMapping())) && (!((ForeignReferenceMapping)mapping).usesIndirection()))) {
          getLockableMappings().add(mapping);
        }
        if (mapping.derivesId()) {
          derivesIdMappings.put(mapping.getAttributeName(),mapping);
        }
      }
    }
  }
  if (hasInheritance() && shouldOrderMappings()) {
    Vector mappings=getMappings();
    Object[] mappingsArray=new Object[mappings.size()];
    for (int index=0; index < mappings.size(); index++) {
      mappingsArray[index]=mappings.elementAt(index);
    }
    Arrays.sort(mappingsArray,new MappingCompare());
    mappings=NonSynchronizedVector.newInstance(mappingsArray.length);
    for (int index=0; index < mappingsArray.length; index++) {
      mappings.addElement(mappingsArray[index]);
    }
    setMappings(mappings);
  }
  setAllFields((Vector)getFields().clone());
  getObjectBuilder().initialize(session);
  if (shouldOrderMappings()) {
    for (int index=getObjectBuilder().getPrimaryKeyMappings().size() - 1; index >= 0; index--) {
      DatabaseMapping mapping=getObjectBuilder().getPrimaryKeyMappings().get(index);
      if ((mapping != null) && mapping.isDirectToFieldMapping()) {
        getMappings().remove(mapping);
        getMappings().add(0,mapping);
        DatabaseField field=((AbstractDirectMapping)mapping).getField();
        getFields().remove(field);
        getFields().add(0,field);
        getAllFields().remove(field);
        getAllFields().add(0,field);
      }
    }
  }
  if (usesOptimisticLocking() && (!isChildDescriptor())) {
    getOptimisticLockingPolicy().initialize(session);
  }
  if (hasInterfacePolicy() || isDescriptorForInterface()) {
    interfaceInitialization(session);
  }
  if (hasWrapperPolicy()) {
    getWrapperPolicy().initialize(session);
  }
  if (hasReturningPolicy()) {
    getReturningPolicy().initialize(session);
  }
  getQueryManager().initialize(session);
  getEventManager().initialize(session);
  getCopyPolicy().initialize(session);
  getInstantiationPolicy().initialize(session);
  if (getHistoryPolicy() != null) {
    getHistoryPolicy().initialize(session);
  }
 else   if (hasInheritance()) {
    ClassDescriptor parentDescriptor=getInheritancePolicy().getParentDescriptor();
    if ((parentDescriptor != null) && (parentDescriptor.getHistoryPolicy() != null)) {
      setHistoryPolicy((HistoryPolicy)parentDescriptor.getHistoryPolicy().clone());
    }
  }
  if (this.getCMPPolicy() != null) {
    this.getCMPPolicy().initialize(this,session);
  }
  if (hasFetchGroupManager()) {
    getFetchGroupManager().initialize(session);
  }
  if ((getObjectChangePolicyInternal() == null) && (ChangeTracker.class.isAssignableFrom(getJavaClass()))) {
    if (Arrays.asList(getJavaClass().getInterfaces()).contains(PersistenceWeavedChangeTracking.class)) {
      if (supportsChangeTracking(session.getProject())) {
        setObjectChangePolicy(new AttributeChangeTrackingPolicy());
      }
    }
  }
  getObjectChangePolicy().initialize(session,this);
  if (getUnitOfWorkCacheIsolationLevel() == UNDEFINED_ISOLATATION) {
    if (isIsolated()) {
      setUnitOfWorkCacheIsolationLevel(ISOLATE_CACHE_ALWAYS);
    }
 else {
      setUnitOfWorkCacheIsolationLevel(ISOLATE_NEW_DATA_AFTER_TRANSACTION);
    }
  }
  if (getIdValidation() == null) {
    if (getPrimaryKeyFields().size() > 1) {
      setIdValidation(IdValidation.NULL);
    }
 else {
      setIdValidation(IdValidation.ZERO);
    }
  }
  if (this.defaultReadAllQueryRedirector == null) {
    this.defaultReadAllQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultReadObjectQueryRedirector == null) {
    this.defaultReadObjectQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultReportQueryRedirector == null) {
    this.defaultReportQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultInsertObjectQueryRedirector == null) {
    this.defaultInsertObjectQueryRedirector=this.defaultQueryRedirector;
  }
  if (this.defaultUpdateObjectQueryRedirector == null) {
    this.defaultUpdateObjectQueryRedirector=this.defaultQueryRedirector;
  }
}"
66927,"/** 
 * INTERNAL: returns true if users have designated one or more mappings as IDs.  Used for CMP3Policy  primary key class processing. 
 */
public boolean hasDerivedId(){
  return this.hasDerivedId;
}","/** 
 * INTERNAL: returns true if users have designated one or more mappings as IDs. Used  for CMP3Policy primary key class processing. 
 */
public boolean hasDerivedId(){
  return !derivesIdMappings.isEmpty();
}"
66928,"/** 
 * PUBLIC: Return a new descriptor.
 */
public ClassDescriptor(){
  this.tables=NonSynchronizedVector.newInstance(3);
  this.mappings=NonSynchronizedVector.newInstance();
  this.primaryKeyFields=new ArrayList(2);
  this.fields=NonSynchronizedVector.newInstance();
  this.allFields=NonSynchronizedVector.newInstance();
  this.constraintDependencies=NonSynchronizedVector.newInstance(2);
  this.multipleTableForeignKeys=new HashMap(5);
  this.queryKeys=new HashMap(5);
  this.initializationStage=UNINITIALIZED;
  this.interfaceInitializationStage=UNINITIALIZED;
  this.shouldAlwaysRefreshCache=false;
  this.shouldOnlyRefreshCacheIfNewerVersion=false;
  this.shouldDisableCacheHits=false;
  this.identityMapSize=-1;
  this.remoteIdentityMapSize=-1;
  this.remoteIdentityMapClass=null;
  this.descriptorType=NORMAL;
  this.shouldAlwaysRefreshCacheOnRemote=false;
  this.shouldDisableCacheHitsOnRemote=false;
  this.shouldOrderMappings=true;
  this.shouldBeReadOnly=false;
  this.shouldAlwaysConformResultsInUnitOfWork=false;
  this.shouldAcquireCascadedLocks=false;
  this.hasSimplePrimaryKey=false;
  this.hasDerivedId=false;
  this.objectBuilder=new ObjectBuilder(this);
  this.cascadeLockingPolicies=NonSynchronizedVector.newInstance();
}","/** 
 * PUBLIC: Return a new descriptor.
 */
public ClassDescriptor(){
  this.tables=NonSynchronizedVector.newInstance(3);
  this.mappings=NonSynchronizedVector.newInstance();
  this.primaryKeyFields=new ArrayList(2);
  this.fields=NonSynchronizedVector.newInstance();
  this.allFields=NonSynchronizedVector.newInstance();
  this.constraintDependencies=NonSynchronizedVector.newInstance(2);
  this.multipleTableForeignKeys=new HashMap(5);
  this.queryKeys=new HashMap(5);
  this.initializationStage=UNINITIALIZED;
  this.interfaceInitializationStage=UNINITIALIZED;
  this.shouldAlwaysRefreshCache=false;
  this.shouldOnlyRefreshCacheIfNewerVersion=false;
  this.shouldDisableCacheHits=false;
  this.identityMapSize=-1;
  this.remoteIdentityMapSize=-1;
  this.remoteIdentityMapClass=null;
  this.descriptorType=NORMAL;
  this.shouldAlwaysRefreshCacheOnRemote=false;
  this.shouldDisableCacheHitsOnRemote=false;
  this.shouldOrderMappings=true;
  this.shouldBeReadOnly=false;
  this.shouldAlwaysConformResultsInUnitOfWork=false;
  this.shouldAcquireCascadedLocks=false;
  this.hasSimplePrimaryKey=false;
  this.derivesIdMappings=new HashMap(5);
  this.objectBuilder=new ObjectBuilder(this);
  this.cascadeLockingPolicies=NonSynchronizedVector.newInstance();
}"
66929,"/** 
 * INTERNAL: <p> This calculates changes in two passes, first on registered objects, second it discovers unregistered new objects on only those objects that changed, and calculates their changes. This also assigns sequence numbers to new objects.
 */
public UnitOfWorkChangeSet calculateChanges(Map registeredObjects,UnitOfWorkChangeSet changeSet,boolean assignSequences){
  if (this.eventManager != null) {
    this.eventManager.preCalculateUnitOfWorkChangeSet();
  }
  if (assignSequences && hasNewObjects()) {
    assignSequenceNumbers(this.newObjectsCloneToOriginal);
  }
  Iterator objects=registeredObjects.keySet().iterator();
  Map changedObjects=new IdentityHashMap();
  Map visitedNodes=new IdentityHashMap();
  while (objects.hasNext()) {
    Object object=objects.next();
    ClassDescriptor descriptor=getDescriptor(object);
    boolean isNew=isObjectNew(object);
    if (isNew || descriptor.getObjectChangePolicy().shouldCompareExistingObjectForChange(object,this,descriptor)) {
      ObjectChangeSet changes=null;
      if (isNew) {
        changes=descriptor.getObjectChangePolicy().calculateChangesForNewObject(object,changeSet,this,descriptor,true);
      }
 else {
        changes=descriptor.getObjectChangePolicy().calculateChangesForExistingObject(object,changeSet,this,descriptor,true);
      }
      if (changes != null) {
        changeSet.addObjectChangeSet(changes,this,true);
        changedObjects.put(object,object);
        if (changes.hasChanges() && !changes.hasForcedChangesFromCascadeLocking()) {
          if (descriptor.hasCascadeLockingPolicies()) {
            for (Enumeration policies=descriptor.getCascadeLockingPolicies().elements(); policies.hasMoreElements(); ) {
              ((CascadeLockingPolicy)policies.nextElement()).lockNotifyParent(object,changeSet,this);
            }
          }
 else           if (descriptor.usesOptimisticLocking() && descriptor.getOptimisticLockingPolicy().isCascaded()) {
            changes.setHasForcedChangesFromCascadeLocking(true);
          }
        }
      }
 else {
        visitedNodes.put(object,object);
      }
    }
 else {
      visitedNodes.put(object,object);
    }
  }
  if (hasDeletedObjects() && !isNestedUnitOfWork()) {
    Object obj1;
    for (Iterator iterator1=((IdentityHashMap)((IdentityHashMap)deletedObjects).clone()).keySet().iterator(); iterator1.hasNext(); getDescriptor(obj1).getObjectBuilder().recordPrivateOwnedRemovals(obj1,this,true))     obj1=iterator1.next();
  }
  if (deletedPrivateOwnedObjects != null && !isNestedUnitOfWork()) {
    for (Iterator iterator2=deletedPrivateOwnedObjects.entrySet().iterator(); iterator2.hasNext(); ) {
      java.util.Map.Entry entry=(java.util.Map.Entry)iterator2.next();
      DatabaseMapping databasemapping=(DatabaseMapping)entry.getKey();
      Iterator iterator6=((List)entry.getValue()).iterator();
      while (iterator6.hasNext()) {
        Object obj4=iterator6.next();
        databasemapping.getReferenceDescriptor().getObjectBuilder().recordPrivateOwnedRemovals(obj4,this,false);
      }
    }
    deletedPrivateOwnedObjects.clear();
  }
  if (this.project.hasMappingsPostCalculateChangesOnDeleted()) {
    if (hasDeletedObjects()) {
      for (Iterator deletedObjects=getDeletedObjects().keySet().iterator(); deletedObjects.hasNext(); ) {
        Object deletedObject=deletedObjects.next();
        ClassDescriptor descriptor=getDescriptor(deletedObject);
        if (descriptor.hasMappingsPostCalculateChangesOnDeleted()) {
          int size=descriptor.getMappingsPostCalculateChangesOnDeleted().size();
          for (int i=0; i < size; i++) {
            DatabaseMapping mapping=descriptor.getMappingsPostCalculateChangesOnDeleted().get(i);
            mapping.postCalculateChangesOnDeleted(deletedObject,changeSet,this);
          }
        }
      }
    }
  }
  if (this.shouldDiscoverNewObjects) {
    Map newObjects=new IdentityHashMap();
    Map existingObjects=new IdentityHashMap(2);
    discoverUnregisteredNewObjects(changedObjects,newObjects,existingObjects,visitedNodes);
    setUnregisteredExistingObjects(existingObjects);
    setUnregisteredNewObjects(newObjects);
    if (assignSequences) {
      assignSequenceNumbers(newObjects);
    }
    for (Iterator newObjectsEnum=newObjects.values().iterator(); newObjectsEnum.hasNext(); ) {
      Object object=newObjectsEnum.next();
      ClassDescriptor descriptor=getDescriptor(object);
      ObjectChangeSet changes=descriptor.getObjectChangePolicy().calculateChangesForNewObject(object,changeSet,this,descriptor,true);
      changeSet.addObjectChangeSet(changes,this,true);
    }
  }
  if (this.hasPrivateOwnedObjects()) {
    Map visitedObjects=new IdentityHashMap();
    for (    Set privateOwnedObjects : getPrivateOwnedObjects().values()) {
      for (      Object objectToRemove : privateOwnedObjects) {
        performRemovePrivateOwnedObjectFromChangeSet(objectToRemove,visitedObjects);
      }
    }
    this.privateOwnedObjects.clear();
  }
  if (this.eventManager != null) {
    this.eventManager.postCalculateUnitOfWorkChangeSet(changeSet);
  }
  return changeSet;
}","/** 
 * INTERNAL: <p> This calculates changes in two passes, first on registered objects, second it discovers unregistered new objects on only those objects that changed, and calculates their changes. This also assigns sequence numbers to new objects.
 */
public UnitOfWorkChangeSet calculateChanges(Map registeredObjects,UnitOfWorkChangeSet changeSet,boolean assignSequences){
  if (this.eventManager != null) {
    this.eventManager.preCalculateUnitOfWorkChangeSet();
  }
  if (assignSequences && hasNewObjects()) {
    assignSequenceNumbers(this.newObjectsCloneToOriginal);
  }
  Iterator objects=registeredObjects.keySet().iterator();
  Map changedObjects=new IdentityHashMap();
  Map visitedNodes=new IdentityHashMap();
  while (objects.hasNext()) {
    Object object=objects.next();
    ClassDescriptor descriptor=getDescriptor(object);
    updateDerivedIds(object,descriptor);
    boolean isNew=isObjectNew(object);
    if (isNew || descriptor.getObjectChangePolicy().shouldCompareExistingObjectForChange(object,this,descriptor)) {
      ObjectChangeSet changes=null;
      if (isNew) {
        changes=descriptor.getObjectChangePolicy().calculateChangesForNewObject(object,changeSet,this,descriptor,true);
      }
 else {
        changes=descriptor.getObjectChangePolicy().calculateChangesForExistingObject(object,changeSet,this,descriptor,true);
      }
      if (changes != null) {
        changeSet.addObjectChangeSet(changes,this,true);
        changedObjects.put(object,object);
        if (changes.hasChanges() && !changes.hasForcedChangesFromCascadeLocking()) {
          if (descriptor.hasCascadeLockingPolicies()) {
            for (Enumeration policies=descriptor.getCascadeLockingPolicies().elements(); policies.hasMoreElements(); ) {
              ((CascadeLockingPolicy)policies.nextElement()).lockNotifyParent(object,changeSet,this);
            }
          }
 else           if (descriptor.usesOptimisticLocking() && descriptor.getOptimisticLockingPolicy().isCascaded()) {
            changes.setHasForcedChangesFromCascadeLocking(true);
          }
        }
      }
 else {
        visitedNodes.put(object,object);
      }
    }
 else {
      visitedNodes.put(object,object);
    }
  }
  if (hasDeletedObjects() && !isNestedUnitOfWork()) {
    Object obj1;
    for (Iterator iterator1=((IdentityHashMap)((IdentityHashMap)deletedObjects).clone()).keySet().iterator(); iterator1.hasNext(); getDescriptor(obj1).getObjectBuilder().recordPrivateOwnedRemovals(obj1,this,true))     obj1=iterator1.next();
  }
  if (deletedPrivateOwnedObjects != null && !isNestedUnitOfWork()) {
    for (Iterator iterator2=deletedPrivateOwnedObjects.entrySet().iterator(); iterator2.hasNext(); ) {
      java.util.Map.Entry entry=(java.util.Map.Entry)iterator2.next();
      DatabaseMapping databasemapping=(DatabaseMapping)entry.getKey();
      Iterator iterator6=((List)entry.getValue()).iterator();
      while (iterator6.hasNext()) {
        Object obj4=iterator6.next();
        databasemapping.getReferenceDescriptor().getObjectBuilder().recordPrivateOwnedRemovals(obj4,this,false);
      }
    }
    deletedPrivateOwnedObjects.clear();
  }
  if (this.project.hasMappingsPostCalculateChangesOnDeleted()) {
    if (hasDeletedObjects()) {
      for (Iterator deletedObjects=getDeletedObjects().keySet().iterator(); deletedObjects.hasNext(); ) {
        Object deletedObject=deletedObjects.next();
        ClassDescriptor descriptor=getDescriptor(deletedObject);
        if (descriptor.hasMappingsPostCalculateChangesOnDeleted()) {
          int size=descriptor.getMappingsPostCalculateChangesOnDeleted().size();
          for (int i=0; i < size; i++) {
            DatabaseMapping mapping=descriptor.getMappingsPostCalculateChangesOnDeleted().get(i);
            mapping.postCalculateChangesOnDeleted(deletedObject,changeSet,this);
          }
        }
      }
    }
  }
  if (this.shouldDiscoverNewObjects) {
    Map newObjects=new IdentityHashMap();
    Map existingObjects=new IdentityHashMap(2);
    discoverUnregisteredNewObjects(changedObjects,newObjects,existingObjects,visitedNodes);
    setUnregisteredExistingObjects(existingObjects);
    setUnregisteredNewObjects(newObjects);
    if (assignSequences) {
      assignSequenceNumbers(newObjects);
    }
    for (Iterator newObjectsEnum=newObjects.values().iterator(); newObjectsEnum.hasNext(); ) {
      Object object=newObjectsEnum.next();
      ClassDescriptor descriptor=getDescriptor(object);
      ObjectChangeSet changes=descriptor.getObjectChangePolicy().calculateChangesForNewObject(object,changeSet,this,descriptor,true);
      changeSet.addObjectChangeSet(changes,this,true);
    }
  }
  if (this.hasPrivateOwnedObjects()) {
    Map visitedObjects=new IdentityHashMap();
    for (    Set privateOwnedObjects : getPrivateOwnedObjects().values()) {
      for (      Object objectToRemove : privateOwnedObjects) {
        performRemovePrivateOwnedObjectFromChangeSet(objectToRemove,visitedObjects);
      }
    }
    this.privateOwnedObjects.clear();
  }
  if (this.eventManager != null) {
    this.eventManager.postCalculateUnitOfWorkChangeSet(changeSet);
  }
  return changeSet;
}"
66930,"/** 
 * INTERNAL: Register the new object with the unit of work. This will register the new object without cloning. Checks based on existence will be completed and the create will be cascaded based on the object's mappings cascade requirements.  This is specific to EJB 3.0 support.
 * @see #registerObject(Object)
 */
public void registerNewObjectForPersist(Object newObject,Map visitedObjects){
  if (newObject == null) {
    return;
  }
  if (visitedObjects.containsKey(newObject)) {
    return;
  }
  visitedObjects.put(newObject,newObject);
  ClassDescriptor descriptor=getDescriptor(newObject);
  if ((descriptor == null) || descriptor.isDescriptorTypeAggregate()) {
    throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{newObject}));
  }
  startOperationProfile(SessionProfiler.Register);
  try {
    Object registeredObject=checkIfAlreadyRegistered(newObject,descriptor);
    if (registeredObject == null) {
      registerNotRegisteredNewObjectForPersist(newObject,descriptor);
    }
 else     if (this.isObjectDeleted(newObject)) {
      this.undeleteObject(newObject);
    }
    descriptor.getObjectBuilder().cascadeRegisterNewForCreate(newObject,this,visitedObjects);
  }
  finally {
    endOperationProfile(SessionProfiler.Register);
  }
}","/** 
 * INTERNAL: Register the new object with the unit of work. This will register the new object without cloning. Checks based on existence will be completed and the create will be cascaded based on the object's mappings cascade requirements.  This is specific to EJB 3.0 support.
 * @see #registerObject(Object)
 */
public void registerNewObjectForPersist(Object newObject,Map visitedObjects){
  if (newObject == null) {
    return;
  }
  if (visitedObjects.containsKey(newObject)) {
    return;
  }
  visitedObjects.put(newObject,newObject);
  ClassDescriptor descriptor=getDescriptor(newObject);
  if ((descriptor == null) || descriptor.isDescriptorTypeAggregate()) {
    throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{newObject}));
  }
  startOperationProfile(SessionProfiler.Register);
  try {
    Object registeredObject=checkIfAlreadyRegistered(newObject,descriptor);
    if (registeredObject == null) {
      registerNotRegisteredNewObjectForPersist(newObject,descriptor);
    }
 else     if (this.isObjectDeleted(newObject)) {
      this.undeleteObject(newObject);
    }
    descriptor.getObjectBuilder().cascadeRegisterNewForCreate(newObject,this,visitedObjects);
    updateDerivedIds(newObject,descriptor);
  }
  finally {
    endOperationProfile(SessionProfiler.Register);
  }
}"
66931,"/** 
 * Create the node path specified by <code>xpathString</code> under <code>element</code> and initialize the leaf node with <code>value</code>. This method also supports creating attributes and integer-indexed elements using the appropriate XPath syntax ('<code>@</code>' and '<code>[ ]</code>' respectively).
 * @param xmlField XMLField containing xpath expression representing the node path to create
 * @param element Root element under which to create path
 * @param value Initial value for the leaf node (should not be a list)
 * @return The last <code>XMLNode</code> in the path
 * @exception org.eclipse.persistence.oxm.exceptions.XMLMarshalException Thrown if passed an invalid XPath string
 */
public Node create(XMLField xmlField,Node element,Object value,XMLField lastUpdated,DocumentPreservationPolicy docPresPolicy,AbstractSession session) throws XMLMarshalException {
  if (null == value) {
    return null;
  }
  if (docPresPolicy == null) {
    docPresPolicy=this.noDocPresPolicy;
  }
  XPathFragment fragment=xmlField.getXPathFragment();
  if (fragment.getNextFragment() == null) {
    if (fragment.nameIsText()) {
      Object textValue=getValueToWrite(value,xmlField,session);
      if (textValue instanceof String) {
        if (xmlField.isTypedTextField()) {
          XMLNodeList createdElements=new XMLNodeList();
          createdElements.add(element);
          addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,getNamespaceResolverForField(xmlField)));
        }
        return addText(xmlField,element,(String)textValue);
      }
      return null;
    }
  }
  NodeList created=createCollection(xmlField,element,value,lastUpdated,docPresPolicy,session);
  if ((created == null) || (created.getLength() == 0)) {
    return null;
  }
  return created.item(0);
}","public void create(List<XMLField> xmlFields,Node contextNode,List<XMLEntry> values,XMLField lastUpdatedField,DocumentPreservationPolicy docPresPolicy,AbstractSession session){
  List itemsToWrite=new ArrayList();
  for (int i=0, size=values.size(); i < size; i++) {
    XMLEntry nextEntry=values.get(i);
    itemsToWrite.add(nextEntry.getValue());
    if (i == (values.size() - 1) || values.get(i + 1).getXMLField() != nextEntry.getXMLField()) {
      create(nextEntry.getXMLField(),contextNode,itemsToWrite,lastUpdatedField,docPresPolicy,session);
      itemsToWrite=new ArrayList();
      lastUpdatedField=nextEntry.getXMLField();
    }
  }
}"
66932,"/** 
 * Create the node path specified by <code>xpathString</code> under <code>element</code> and initialize the leaf node with <code>value</code>. This method also supports creating attributes and integer-indexed elements using the appropriate XPath syntax ('<code>@</code>' and '<code>[ ]</code>' respectively).
 * @param xmlField XMLField containing xpath expression representing the node path to create
 * @param element Root element under which to create path
 * @param value Initial value for the leaf node (this can be a value or a collection of values)
 * @return The last <code>XMLNode</code> in the path
 * @exception org.eclipse.persistence.oxm.exceptions.XMLMarshalException Thrown if passed an invalid XPath string
 */
private NodeList createCollection(XMLField xmlField,Node element,Object value,XMLField lastUpdated,DocumentPreservationPolicy docPresPolicy,AbstractSession session) throws XMLMarshalException {
  XMLNodeList createdElements=new XMLNodeList();
  if ((value == null) || (value instanceof Collection && (((Collection)value).size() == 0))) {
    return createdElements;
  }
  Node nextElement=element;
  Element sibling=null;
  if ((lastUpdated != null) && !lastUpdated.getXPathFragment().isAttribute() && !lastUpdated.getXPathFragment().nameIsText()) {
    NodeList nodes=unmarshalXPathEngine.selectElementNodes(element,lastUpdated.getXPathFragment(),getNamespaceResolverForField(lastUpdated));
    if (nodes.getLength() > 0) {
      sibling=(Element)nodes.item(nodes.getLength() - 1);
    }
  }
  NodeList elements;
  XPathFragment next=xmlField.getXPathFragment();
  while (next != null) {
    if (next.isAttribute()) {
      addAttribute(next,xmlField,nextElement,value,session);
    }
 else     if (next.containsIndex()) {
      boolean hasMore=!(next.getHasText() || (next.getNextFragment() == null));
      if (hasMore) {
        nextElement=addIndexedElement(next,xmlField,nextElement,this,!hasMore,session);
      }
 else {
        Object valueToWrite=getValueToWrite(value,xmlField,session);
        nextElement=addIndexedElement(next,xmlField,nextElement,valueToWrite,!hasMore,session);
        createdElements.add(nextElement);
      }
    }
 else {
      boolean hasMore=!(next.getHasText() || (next.getNextFragment() == null));
      if (hasMore) {
        elements=addElements(next,xmlField,nextElement,this,!hasMore,sibling,docPresPolicy,session);
      }
 else {
        XPathFragment nextFragment=next.getNextFragment();
        if ((nextFragment != null) && nextFragment.isAttribute() && !(value instanceof List)) {
          elements=addElements(next,xmlField,nextElement,this,hasMore,sibling,docPresPolicy,session);
        }
 else {
          Object valueToWrite=getValueToWrite(value,xmlField,session);
          elements=addElements(next,xmlField,nextElement,valueToWrite,!hasMore,sibling,docPresPolicy,session);
          createdElements.addAll(elements);
        }
      }
      nextElement=elements.item(elements.getLength() - 1);
    }
    next=next.getNextFragment();
    sibling=null;
    if ((next != null) && next.nameIsText()) {
      next=null;
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,getNamespaceResolverForField(xmlField)));
  }
  return createdElements;
}","/** 
 * Create the node path specified by <code>xpathString</code> under <code>element</code> and initialize the leaf node with <code>value</code>. This method also supports creating attributes and integer-indexed elements using the appropriate XPath syntax ('<code>@</code>' and '<code>[ ]</code>' respectively).
 * @param xmlField XMLField containing xpath expression representing the node path to create
 * @param element Root element under which to create path
 * @param value Initial value for the leaf node (this can be a value or a collection of values)
 * @return The last <code>XMLNode</code> in the path
 * @exception org.eclipse.persistence.oxm.exceptions.XMLMarshalException Thrown if passed an invalid XPath string
 */
private NodeList createCollection(XMLField xmlField,Node element,Object value,XMLField lastUpdated,DocumentPreservationPolicy docPresPolicy,AbstractSession session) throws XMLMarshalException {
  XMLNodeList createdElements=new XMLNodeList();
  if ((value == null) || (value instanceof Collection && (((Collection)value).size() == 0))) {
    return createdElements;
  }
  Node nextElement=element;
  Element sibling=null;
  XPathFragment siblingFragment=null;
  if (lastUpdated != null) {
    siblingFragment=lastUpdated.getXPathFragment();
  }
  if ((lastUpdated != null) && !siblingFragment.isAttribute() && !siblingFragment.nameIsText()) {
    NodeList nodes=unmarshalXPathEngine.selectElementNodes(element,siblingFragment,getNamespaceResolverForField(lastUpdated));
    if (nodes.getLength() > 0) {
      sibling=(Element)nodes.item(nodes.getLength() - 1);
    }
  }
  NodeList elements;
  XPathFragment next=xmlField.getXPathFragment();
  while (next != null) {
    if (next.isAttribute()) {
      addAttribute(next,xmlField,nextElement,value,session);
    }
 else     if (next.containsIndex()) {
      boolean hasMore=!(next.getHasText() || (next.getNextFragment() == null));
      if (hasMore) {
        nextElement=addIndexedElement(next,xmlField,nextElement,this,!hasMore,session);
      }
 else {
        Object valueToWrite=getValueToWrite(value,xmlField,session);
        nextElement=addIndexedElement(next,xmlField,nextElement,valueToWrite,!hasMore,session);
        createdElements.add(nextElement);
      }
    }
 else {
      boolean hasMore=!(next.getHasText() || (next.getNextFragment() == null));
      if (hasMore) {
        elements=addElements(next,xmlField,nextElement,this,!hasMore,sibling,docPresPolicy,session);
      }
 else {
        XPathFragment nextFragment=next.getNextFragment();
        if ((nextFragment != null) && nextFragment.isAttribute() && !(value instanceof List)) {
          elements=addElements(next,xmlField,nextElement,this,hasMore,sibling,docPresPolicy,session);
        }
 else {
          Object valueToWrite=getValueToWrite(value,xmlField,session);
          elements=addElements(next,xmlField,nextElement,valueToWrite,!hasMore,sibling,docPresPolicy,session);
          createdElements.addAll(elements);
        }
      }
      nextElement=elements.item(elements.getLength() - 1);
    }
    if (siblingFragment != null && sibling != null && siblingFragment.equals(next)) {
      siblingFragment=siblingFragment.getNextFragment();
      if ((siblingFragment != null) && !siblingFragment.isAttribute() && !siblingFragment.nameIsText()) {
        NodeList nodes=unmarshalXPathEngine.selectElementNodes(nextElement,siblingFragment,getNamespaceResolverForField(lastUpdated));
        if (nodes.getLength() > 0) {
          sibling=(Element)nodes.item(nodes.getLength() - 1);
        }
 else {
          sibling=null;
        }
      }
 else {
        sibling=null;
      }
    }
 else {
      sibling=null;
    }
    next=next.getNextFragment();
    if ((next != null) && next.nameIsText()) {
      next=null;
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,getNamespaceResolverForField(xmlField)));
  }
  return createdElements;
}"
66933,"private void buildFragments(String xpathString){
  StringTokenizer st=new StringTokenizer(xpathString,""String_Node_Str"");
  String next;
  int i=0;
  XPathFragment currentXPathFragment=null;
  XPathFragment nextXPathFragment=null;
  if (xpathString.charAt(0) == '/') {
    next=st.nextToken();
    next='/' + next;
    currentXPathFragment=new XPathFragment(next);
    setXPathFragment(currentXPathFragment);
    i++;
  }
  while (st.hasMoreTokens()) {
    next=st.nextToken().intern();
    if (null != next) {
      if (next.equals(XMLConstants.TEXT)) {
        nextXPathFragment=new XPathFragment(XMLConstants.TEXT);
      }
 else {
        nextXPathFragment=new XPathFragment(next);
      }
      if (0 == i) {
        setXPathFragment(nextXPathFragment);
      }
 else {
        currentXPathFragment.setNextFragment(nextXPathFragment);
        if (nextXPathFragment.isAttribute() || nextXPathFragment.nameIsText()) {
          currentXPathFragment.setHasText(true);
        }
      }
      currentXPathFragment=nextXPathFragment;
      i++;
    }
    setLastXPathFragment(currentXPathFragment);
  }
}","private void buildFragments(String xpathString){
  StringTokenizer st=new StringTokenizer(xpathString,""String_Node_Str"");
  String next;
  int i=0;
  XPathFragment currentXPathFragment=null;
  XPathFragment nextXPathFragment=null;
  if (xpathString.charAt(0) == '/') {
    next=st.nextToken();
    next='/' + next;
    currentXPathFragment=new XPathFragment(next);
    setXPathFragment(currentXPathFragment);
    currentXPathFragment.setXMLField(this);
    i++;
  }
  while (st.hasMoreTokens()) {
    next=st.nextToken().intern();
    if (null != next) {
      if (next.equals(XMLConstants.TEXT)) {
        nextXPathFragment=new XPathFragment(XMLConstants.TEXT);
      }
 else {
        nextXPathFragment=new XPathFragment(next);
      }
      if (0 == i) {
        setXPathFragment(nextXPathFragment);
      }
 else {
        currentXPathFragment.setNextFragment(nextXPathFragment);
        if (nextXPathFragment.isAttribute() || nextXPathFragment.nameIsText()) {
          currentXPathFragment.setHasText(true);
        }
      }
      nextXPathFragment.setXMLField(this);
      currentXPathFragment=nextXPathFragment;
      i++;
    }
    setLastXPathFragment(currentXPathFragment);
  }
}"
66934,"public static Test suite(){
  TestSuite fullSuite=new TestSuite();
  fullSuite.setName(""String_Node_Str"");
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleJUnitTest.suite());
  suite.addTest(ConcurrencyTest.suite());
  suite.addTest(NamedNativeQueryJUnitTest.suite());
  suite.addTest(CacheImplJUnitTest.suite());
  suite.addTest(CallbackEventJUnitTestSuite.suite());
  suite.addTest(EntityManagerJUnitTestSuite.suite());
  suite.addTest(SQLResultSetMappingTestSuite.suite());
  suite.addTest(JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(ReportQueryAdvancedJUnitTest.suite());
  suite.addTest(ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(AdvancedJPAJunitTest.suite());
  suite.addTest(AdvancedJunitTest.suite());
  suite.addTest(AdvancedCompositePKJunitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.NamedNativeQueryJUnitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.CallbackEventJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.EntityManagerJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.SQLResultSetMappingTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJPAJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.ExpressionJUnitTestSuite.class);
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.VirtualAttributeTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.JAXBTestSuite.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleCallbackJunitTest.suite());
  suite.addTest(DeleteAllQueryInheritanceJunitTest.suite());
  suite.addTest(EntityManagerJUnitTestCase.suite());
  suite.addTest(MixedInheritanceJUnitTestCase.suite());
  suite.addTest(JoinedAttributeInheritanceJunitTest.suite());
  suite.addTest(TablePerClassInheritanceJUnitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(OrderedListJunitTest.suite());
  suite.addTest(OrderedListAttributeChangeTrackingJunitTest.suite());
  suite.addTest(InheritedModelJunitTest.suite());
  suite.addTest(InheritedCallbacksJunitTest.suite());
  suite.addTest(EmbeddableSuperclassJunitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTestSuite(EMQueryJUnitTestSuite.class);
  suite.addTestSuite(ExpressionJUnitTestSuite.class);
  suite.addTest(VirtualAttributeTestSuite.suite());
  suite.addTest(ValidationTestSuite.suite());
  suite.addTest(QueryParameterValidationTestSuite.suite());
  suite.addTest(UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTest(RelationshipModelJUnitTestSuite.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(JUnitJPQLUnitTestSuite.suite());
  suite.addTest(JUnitJPQLSimpleTestSuite.suite());
  suite.addTest(JUnitJPQLComplexTestSuite.suite());
  suite.addTest(JUnitJPQLInheritanceTestSuite.suite());
  suite.addTest(JUnitJPQLValidationTestSuite.suite());
  suite.addTest(JUnitJPQLComplexAggregateTestSuite.suite());
  suite.addTest(JUnitJPQLDateTimeTestSuite.suite());
  suite.addTest(JUnitJPQLParameterTestSuite.suite());
  suite.addTest(JUnitJPQLExamplesTestSuite.suite());
  suite.addTest(JUnitJPQLModifyTestSuite.suite());
  suite.addTest(AdvancedQueryTestSuite.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(EntityMappingsJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationJUnitTestSuite.suite());
  fullSuite.addTest(JPAAdvPropertiesJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.NullBindingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.arraypks.PrimitiveArrayPKCachingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datetime.NullBindingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.lob.LobJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.privateowned.PrivateOwnedJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.orphanremoval.OrphanRemovalJUnitTestCase.suite());
  fullSuite.addTestSuite(CompositeEnumerationTest.class);
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.metamodel.MetamodelTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCriteriaQueryTestSuite.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(CacheableModelJunitTest.suite());
  fullSuite.addTest(DelimitedPUTestSuite.suite());
  return fullSuite;
}","public static Test suite(){
  TestSuite fullSuite=new TestSuite();
  fullSuite.setName(""String_Node_Str"");
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleJUnitTest.suite());
  suite.addTest(ConcurrencyTest.suite());
  suite.addTest(NamedNativeQueryJUnitTest.suite());
  suite.addTest(CacheImplJUnitTest.suite());
  suite.addTest(CallbackEventJUnitTestSuite.suite());
  suite.addTest(EntityManagerJUnitTestSuite.suite());
  suite.addTest(SQLResultSetMappingTestSuite.suite());
  suite.addTest(JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(ReportQueryAdvancedJUnitTest.suite());
  suite.addTest(ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(AdvancedJPAJunitTest.suite());
  suite.addTest(AdvancedJunitTest.suite());
  suite.addTest(AdvancedCompositePKJunitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.NamedNativeQueryJUnitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.CallbackEventJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.EntityManagerJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.SQLResultSetMappingTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJPAJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.ExpressionJUnitTestSuite.class);
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.VirtualAttributeTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.JAXBTestSuite.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleCallbackJunitTest.suite());
  suite.addTest(DeleteAllQueryInheritanceJunitTest.suite());
  suite.addTest(EntityManagerJUnitTestCase.suite());
  suite.addTest(MixedInheritanceJUnitTestCase.suite());
  suite.addTest(JoinedAttributeInheritanceJunitTest.suite());
  suite.addTest(TablePerClassInheritanceJUnitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(OrderedListJunitTest.suite());
  suite.addTest(OrderedListAttributeChangeTrackingJunitTest.suite());
  suite.addTest(InheritedModelJunitTest.suite());
  suite.addTest(InheritedCallbacksJunitTest.suite());
  suite.addTest(EmbeddableSuperclassJunitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTestSuite(EMQueryJUnitTestSuite.class);
  suite.addTestSuite(ExpressionJUnitTestSuite.class);
  suite.addTest(VirtualAttributeTestSuite.suite());
  suite.addTest(ValidationTestSuite.suite());
  suite.addTest(QueryParameterValidationTestSuite.suite());
  suite.addTest(UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTest(RelationshipModelJUnitTestSuite.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(JUnitJPQLUnitTestSuite.suite());
  suite.addTest(JUnitJPQLSimpleTestSuite.suite());
  suite.addTest(JUnitJPQLComplexTestSuite.suite());
  suite.addTest(JUnitJPQLInheritanceTestSuite.suite());
  suite.addTest(JUnitJPQLValidationTestSuite.suite());
  suite.addTest(JUnitJPQLComplexAggregateTestSuite.suite());
  suite.addTest(JUnitJPQLDateTimeTestSuite.suite());
  suite.addTest(JUnitJPQLParameterTestSuite.suite());
  suite.addTest(JUnitJPQLExamplesTestSuite.suite());
  suite.addTest(JUnitJPQLModifyTestSuite.suite());
  suite.addTest(AdvancedQueryTestSuite.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(EntityMappingsJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationJUnitTestSuite.suite());
  fullSuite.addTest(JPAAdvPropertiesJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.NullBindingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.arraypks.PrimitiveArrayPKCachingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datetime.NullBindingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.lob.LobJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.privateowned.PrivateOwnedJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.orphanremoval.OrphanRemovalJUnitTestCase.suite());
  fullSuite.addTestSuite(CompositeEnumerationTest.class);
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.metamodel.MetamodelTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCriteriaQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaSimpleTestSuite.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(CacheableModelJunitTest.suite());
  fullSuite.addTest(DelimitedPUTestSuite.suite());
  return fullSuite;
}"
66935,"public void testMappedByIdExample1(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  Sargeant sargeant=new Sargeant();
  MasterCorporal masterCorporal=new MasterCorporal();
  MasterCorporalId masterCorporalId=new MasterCorporalId();
  try {
    sargeant.setName(""String_Node_Str"");
    em.persist(sargeant);
    masterCorporalId.setName(""String_Node_Str"");
    masterCorporal.setId(masterCorporalId);
    masterCorporal.setSargeant(sargeant);
    em.persist(masterCorporal);
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
  em=createEntityManager();
  CriteriaBuilder qb=em.getCriteriaBuilder();
  CriteriaQuery<MasterCorporal> cq=qb.createQuery(MasterCorporal.class);
  Root<MasterCorporal> from=cq.from(MasterCorporal.class);
  cq.where(qb.and(qb.equal(from.get(""String_Node_Str"").get(""String_Node_Str""),""String_Node_Str""),qb.equal(from.get(""String_Node_Str"").get(""String_Node_Str""),sargeant.getSargeantId())));
  Query query1=em.createQuery(cq);
  MasterCorporal results1=(MasterCorporal)query1.getSingleResult();
  qb=em.getCriteriaBuilder();
  cq=qb.createQuery(MasterCorporal.class);
  from=cq.from(MasterCorporal.class);
  cq.where(qb.and(qb.equal(from.get(""String_Node_Str"").get(""String_Node_Str""),""String_Node_Str""),qb.equal(from.get(""String_Node_Str"").get(""String_Node_Str""),sargeant.getSargeantId())));
  Query query2=em.createQuery(cq);
  MasterCorporal results2=(MasterCorporal)query2.getSingleResult();
  MasterCorporal refreshedMasterCorporal=em.find(MasterCorporal.class,masterCorporalId);
  assertTrue(""String_Node_Str"",getServerSession().compareObjects(masterCorporal,refreshedMasterCorporal));
  assertTrue(""String_Node_Str"",refreshedMasterCorporal == results1);
  assertTrue(""String_Node_Str"",refreshedMasterCorporal == results2);
}","public void testMappedByIdExample1(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  Sargeant sargeant=new Sargeant();
  MasterCorporal masterCorporal=new MasterCorporal();
  MasterCorporalId masterCorporalId=new MasterCorporalId();
  try {
    sargeant.setName(""String_Node_Str"");
    em.persist(sargeant);
    masterCorporalId.setName(""String_Node_Str"");
    masterCorporal.setId(masterCorporalId);
    masterCorporal.setSargeant(sargeant);
    em.persist(masterCorporal);
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
  em=createEntityManager();
  beginTransaction(em);
  try {
    CriteriaBuilder qb=em.getCriteriaBuilder();
    CriteriaQuery<MasterCorporal> cq=qb.createQuery(MasterCorporal.class);
    Root<MasterCorporal> from=cq.from(MasterCorporal.class);
    cq.where(qb.and(qb.equal(from.get(""String_Node_Str"").get(""String_Node_Str""),""String_Node_Str""),qb.equal(from.get(""String_Node_Str"").get(""String_Node_Str""),sargeant.getSargeantId())));
    Query query1=em.createQuery(cq);
    MasterCorporal results1=(MasterCorporal)query1.getSingleResult();
    qb=em.getCriteriaBuilder();
    cq=qb.createQuery(MasterCorporal.class);
    from=cq.from(MasterCorporal.class);
    cq.where(qb.and(qb.equal(from.get(""String_Node_Str"").get(""String_Node_Str""),""String_Node_Str""),qb.equal(from.get(""String_Node_Str"").get(""String_Node_Str""),sargeant.getSargeantId())));
    Query query2=em.createQuery(cq);
    MasterCorporal results2=(MasterCorporal)query2.getSingleResult();
    MasterCorporal refreshedMasterCorporal=em.find(MasterCorporal.class,masterCorporalId);
    assertTrue(""String_Node_Str"",getServerSession().compareObjects(masterCorporal,refreshedMasterCorporal));
    assertTrue(""String_Node_Str"",refreshedMasterCorporal == results1);
    assertTrue(""String_Node_Str"",refreshedMasterCorporal == results2);
  }
  finally {
    rollbackTransaction(em);
    closeEntityManager(em);
  }
}"
66936,"public void copyTo(ExpressionOperator operator){
  operator.selector=selector;
  operator.isPrefix=isPrefix;
  operator.isRepeating=isRepeating;
  operator.nodeClass=nodeClass;
  operator.type=type;
  operator.databaseStrings=databaseStrings == null ? null : Arrays.copyOf(databaseStrings,databaseStrings.length);
  operator.argumentIndices=argumentIndices == null ? null : Arrays.copyOf(argumentIndices,argumentIndices.length);
  operator.javaStrings=javaStrings == null ? null : Arrays.copyOf(javaStrings,javaStrings.length);
}","public void copyTo(ExpressionOperator operator){
  operator.selector=selector;
  operator.isPrefix=isPrefix;
  operator.isRepeating=isRepeating;
  operator.nodeClass=nodeClass;
  operator.type=type;
  operator.databaseStrings=databaseStrings == null ? null : Helper.copyStringArray(databaseStrings);
  operator.argumentIndices=argumentIndices == null ? null : Helper.copyIntArray(argumentIndices);
  operator.javaStrings=javaStrings == null ? null : Helper.copyStringArray(javaStrings);
}"
66937,"public void copyTo(ExpressionOperator operator){
  super.copyTo(operator);
  if (operator instanceof ListExpressionOperator) {
    ((ListExpressionOperator)operator).startStrings=Arrays.copyOf(startStrings,startStrings.length);
    ((ListExpressionOperator)operator).separators=Arrays.copyOf(separators,separators.length);
    ((ListExpressionOperator)operator).terminationStrings=Arrays.copyOf(terminationStrings,terminationStrings.length);
  }
}","public void copyTo(ExpressionOperator operator){
  super.copyTo(operator);
  if (operator instanceof ListExpressionOperator) {
    ((ListExpressionOperator)operator).startStrings=Helper.copyStringArray(startStrings);
    ((ListExpressionOperator)operator).separators=Helper.copyStringArray(separators);
    ((ListExpressionOperator)operator).terminationStrings=Helper.copyStringArray(terminationStrings);
  }
}"
66938,"@OneToMany(targetEntity=Becks.class,mappedBy=""String_Node_Str"",cascade=ALL) @MapKeyClass(BecksTag.class) @MapKeyJoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"") public Map getBecksBeersToConsume(){
  return becksBeersToConsume;
}","@OneToMany(targetEntity=Becks.class,mappedBy=""String_Node_Str"",cascade=ALL,orphanRemoval=true) @MapKeyClass(BecksTag.class) @MapKeyJoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"") public Map getBecksBeersToConsume(){
  return becksBeersToConsume;
}"
66939,"public void testFindWithProperties(){
  if (!isJPA10()) {
    Employee employee=new Employee();
    employee.setFirstName(""String_Node_Str"");
    HashMap<String,Object> queryhints=new HashMap<String,Object>();
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      em.persist(employee);
      commitTransaction(em);
      beginTransaction(em);
      int empId=employee.getId();
      Employee e1=em.find(Employee.class,empId);
      e1.setFirstName(""String_Node_Str"");
      queryhints.put(QueryHints.REFRESH,""String_Node_Str"");
      Employee e2=em.find(Employee.class,empId,queryhints);
      assertFalse(e2.getFirstName().equals(""String_Node_Str""));
      commitTransaction(em);
    }
 catch (    IllegalArgumentException iae) {
      return;
    }
catch (    Exception e) {
      fail(""String_Node_Str"" + e.getClass());
    }
 finally {
      closeEntityManager(em);
    }
  }
}","public void testFindWithProperties(){
  if (!isJPA10()) {
    Employee employee=new Employee();
    employee.setFirstName(""String_Node_Str"");
    HashMap<String,Object> queryhints=new HashMap<String,Object>();
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      em.persist(employee);
      commitTransaction(em);
      beginTransaction(em);
      int empId=employee.getId();
      Employee e1=em.find(Employee.class,empId);
      e1.setFirstName(""String_Node_Str"");
      queryhints.put(QueryHints.REFRESH,""String_Node_Str"");
      Employee e2=(Employee)em.find(Employee.class,empId,queryhints);
      assertFalse(e2.getFirstName().equals(""String_Node_Str""));
      commitTransaction(em);
    }
 catch (    IllegalArgumentException iae) {
      return;
    }
catch (    Exception e) {
      fail(""String_Node_Str"" + e.getClass());
    }
 finally {
      closeEntityManager(em);
    }
  }
}"
66940,"public void testIsLoadedWithReference(){
  EntityManagerFactory emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  beginTransaction(em);
  try {
    Employee emp=new Employee();
    emp.setFirstName(""String_Node_Str"");
    emp.setLastName(""String_Node_Str"");
    Address addr=new Address();
    addr.setCity(""String_Node_Str"");
    emp.setAddress(addr);
    PhoneNumber pn=new PhoneNumber();
    pn.setNumber(""String_Node_Str"");
    pn.setType(""String_Node_Str"");
    emp.addPhoneNumber(pn);
    pn.setOwner(emp);
    Employee manager=new Employee();
    manager.addManagedEmployee(emp);
    emp.setManager(manager);
    em.persist(emp);
    em.flush();
    Integer id=emp.getId();
    em.clear();
    clearCache();
    emp=em.find(Employee.class,emp.getId());
    emp.getAddress().getCity();
    emp.getPhoneNumbers().size();
    ProviderUtil util=(new PersistenceProvider()).getProviderUtil();
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.LOADED));
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.LOADED));
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.NOT_LOADED));
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.NOT_LOADED));
  }
  finally {
    rollbackTransaction(em);
  }
}","public void testIsLoadedWithReference(){
  EntityManagerFactory emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  beginTransaction(em);
  try {
    Employee emp=new Employee();
    emp.setFirstName(""String_Node_Str"");
    emp.setLastName(""String_Node_Str"");
    Address addr=new Address();
    addr.setCity(""String_Node_Str"");
    emp.setAddress(addr);
    PhoneNumber pn=new PhoneNumber();
    pn.setNumber(""String_Node_Str"");
    pn.setType(""String_Node_Str"");
    emp.addPhoneNumber(pn);
    pn.setOwner(emp);
    Employee manager=new Employee();
    manager.addManagedEmployee(emp);
    emp.setManager(manager);
    em.persist(emp);
    em.flush();
    Integer id=emp.getId();
    em.clear();
    clearCache();
    emp=em.find(Employee.class,emp.getId());
    emp.getAddress().getCity();
    emp.getPhoneNumbers().size();
    ProviderUtil util=(new PersistenceProvider()).getProviderUtil();
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.LOADED));
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.LOADED));
    if (emp instanceof PersistenceWeaved) {
      assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.NOT_LOADED));
    }
 else {
      assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.LOADED));
    }
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.NOT_LOADED));
  }
  finally {
    rollbackTransaction(em);
  }
}"
66941,"public void testPESSIMISTIC_WRITE_TIMEOUTLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateSupported() && !session.getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    List result=em.createQuery(""String_Node_Str"").getResultList();
    Employee employee=(Employee)result.get(0);
    Exception lockTimeOutException=null;
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_WRITE);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        HashMap<String,Object> properties=new HashMap<String,Object>();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,5);
        Employee employee2=em2.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_WRITE,properties);
        employee2.setFirstName(""String_Node_Str"");
        commitTransaction(em2);
      }
 catch (      PersistenceException ex) {
        if (isTransactionActive(em2)) {
          rollbackTransaction(em2);
        }
        if (ex instanceof javax.persistence.LockTimeoutException) {
          lockTimeOutException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",lockTimeOutException == null);
  }
}","public void testPESSIMISTIC_WRITE_TIMEOUTLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateSupported() && !session.getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    List result=em.createQuery(""String_Node_Str"").getResultList();
    Employee employee=(Employee)result.get(0);
    Exception lockTimeOutException=null;
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_WRITE);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        HashMap<String,Object> properties=new HashMap<String,Object>();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,5);
        Employee employee2=(Employee)em2.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_WRITE,properties);
        employee2.setFirstName(""String_Node_Str"");
        commitTransaction(em2);
      }
 catch (      PersistenceException ex) {
        if (isTransactionActive(em2)) {
          rollbackTransaction(em2);
        }
        if (ex instanceof javax.persistence.LockTimeoutException) {
          lockTimeOutException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",lockTimeOutException == null);
  }
}"
66942,"public void testPESSIMISTIC_READ_TIMEOUTLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateSupported() && !session.getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    List result=em.createQuery(""String_Node_Str"").getResultList();
    Employee employee=(Employee)result.get(0);
    Exception lockTimeOutException=null;
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_READ);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        HashMap<String,Object> properties=new HashMap<String,Object>();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,5);
        Employee employee2=em2.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_READ,properties);
        employee2.setFirstName(""String_Node_Str"");
        commitTransaction(em2);
      }
 catch (      PersistenceException ex) {
        if (isTransactionActive(em2)) {
          rollbackTransaction(em2);
        }
        if (ex instanceof javax.persistence.LockTimeoutException) {
          lockTimeOutException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",lockTimeOutException == null);
  }
}","public void testPESSIMISTIC_READ_TIMEOUTLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateSupported() && !session.getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    List result=em.createQuery(""String_Node_Str"").getResultList();
    Employee employee=(Employee)result.get(0);
    Exception lockTimeOutException=null;
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_READ);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        HashMap<String,Object> properties=new HashMap<String,Object>();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,5);
        Employee employee2=(Employee)em2.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_READ,properties);
        employee2.setFirstName(""String_Node_Str"");
        commitTransaction(em2);
      }
 catch (      PersistenceException ex) {
        if (isTransactionActive(em2)) {
          rollbackTransaction(em2);
        }
        if (ex instanceof javax.persistence.LockTimeoutException) {
          lockTimeOutException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",lockTimeOutException == null);
  }
}"
66943,"public void testIsLoadedAttribute(){
  if (!isJPA10()) {
    EntityManagerFactory emf=getEntityManagerFactory();
    EntityManager em=emf.createEntityManager();
    beginTransaction(em);
    try {
      Employee emp=new Employee();
      emp.setFirstName(""String_Node_Str"");
      emp.setLastName(""String_Node_Str"");
      Address addr=new Address();
      addr.setCity(""String_Node_Str"");
      emp.setAddress(addr);
      PhoneNumber pn=new PhoneNumber();
      pn.setNumber(""String_Node_Str"");
      pn.setType(""String_Node_Str"");
      emp.addPhoneNumber(pn);
      pn.setOwner(emp);
      SmallProject project=new SmallProject();
      project.setName(""String_Node_Str"");
      project.addTeamMember(emp);
      emp.addProject(project);
      em.persist(emp);
      em.flush();
      em.clear();
      clearCache();
      emp=(Employee)em.find(Employee.class,emp.getId());
      PersistenceUnitUtil util=emf.getPersistenceUnitUtil();
      assertFalse(""String_Node_Str"",util.isLoaded(emp,""String_Node_Str""));
      assertFalse(""String_Node_Str"",util.isLoaded(emp,""String_Node_Str""));
      emp.getPhoneNumbers().size();
      assertTrue(""String_Node_Str"",util.isLoaded(emp,""String_Node_Str""));
      assertTrue(""String_Node_Str"",util.isLoaded(emp,""String_Node_Str""));
    }
  finally {
      rollbackTransaction(em);
    }
  }
}","public void testIsLoadedAttribute(){
  if (!isJPA10()) {
    EntityManagerFactory emf=getEntityManagerFactory();
    EntityManager em=emf.createEntityManager();
    beginTransaction(em);
    try {
      Employee emp=new Employee();
      emp.setFirstName(""String_Node_Str"");
      emp.setLastName(""String_Node_Str"");
      Address addr=new Address();
      addr.setCity(""String_Node_Str"");
      emp.setAddress(addr);
      PhoneNumber pn=new PhoneNumber();
      pn.setNumber(""String_Node_Str"");
      pn.setType(""String_Node_Str"");
      emp.addPhoneNumber(pn);
      pn.setOwner(emp);
      SmallProject project=new SmallProject();
      project.setName(""String_Node_Str"");
      project.addTeamMember(emp);
      emp.addProject(project);
      em.persist(emp);
      em.flush();
      em.clear();
      clearCache();
      emp=(Employee)em.find(Employee.class,emp.getId());
      PersistenceUnitUtil util=emf.getPersistenceUnitUtil();
      if (emp instanceof PersistenceWeaved) {
        assertFalse(""String_Node_Str"",util.isLoaded(emp,""String_Node_Str""));
      }
 else {
        assertTrue(""String_Node_Str"",util.isLoaded(emp,""String_Node_Str""));
      }
      assertFalse(""String_Node_Str"",util.isLoaded(emp,""String_Node_Str""));
      emp.getPhoneNumbers().size();
      assertTrue(""String_Node_Str"",util.isLoaded(emp,""String_Node_Str""));
      assertTrue(""String_Node_Str"",util.isLoaded(emp,""String_Node_Str""));
    }
  finally {
      rollbackTransaction(em);
    }
  }
}"
66944,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  return suite;
}"
66945,"public void testIsLoadedWithoutReferenceAttribute(){
  EntityManagerFactory emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  beginTransaction(em);
  try {
    Employee emp=new Employee();
    emp.setFirstName(""String_Node_Str"");
    emp.setLastName(""String_Node_Str"");
    Address addr=new Address();
    addr.setCity(""String_Node_Str"");
    emp.setAddress(addr);
    PhoneNumber pn=new PhoneNumber();
    pn.setNumber(""String_Node_Str"");
    pn.setType(""String_Node_Str"");
    emp.addPhoneNumber(pn);
    pn.setOwner(emp);
    Employee manager=new Employee();
    manager.addManagedEmployee(emp);
    emp.setManager(manager);
    em.persist(emp);
    em.flush();
    Integer id=emp.getId();
    em.clear();
    clearCache();
    emp=em.find(Employee.class,emp.getId());
    emp.getAddress().getCity();
    emp.getPhoneNumbers().size();
    ProviderUtil util=(new PersistenceProvider()).getProviderUtil();
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.LOADED));
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.LOADED));
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.NOT_LOADED));
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.NOT_LOADED));
    assertTrue(""String_Node_Str"",util.isLoaded(new NonEntity()).equals(LoadState.UNKNOWN));
  }
  finally {
    rollbackTransaction(em);
  }
}","public void testIsLoadedWithoutReferenceAttribute(){
  EntityManagerFactory emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  beginTransaction(em);
  try {
    Employee emp=new Employee();
    emp.setFirstName(""String_Node_Str"");
    emp.setLastName(""String_Node_Str"");
    Address addr=new Address();
    addr.setCity(""String_Node_Str"");
    emp.setAddress(addr);
    PhoneNumber pn=new PhoneNumber();
    pn.setNumber(""String_Node_Str"");
    pn.setType(""String_Node_Str"");
    emp.addPhoneNumber(pn);
    pn.setOwner(emp);
    Employee manager=new Employee();
    manager.addManagedEmployee(emp);
    emp.setManager(manager);
    em.persist(emp);
    em.flush();
    Integer id=emp.getId();
    em.clear();
    clearCache();
    emp=em.find(Employee.class,emp.getId());
    emp.getAddress().getCity();
    emp.getPhoneNumbers().size();
    ProviderUtil util=(new PersistenceProvider()).getProviderUtil();
    if (emp instanceof PersistenceWeaved) {
      assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.LOADED));
      assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.NOT_LOADED));
    }
 else {
      assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.LOADED));
      assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.LOADED));
    }
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.LOADED));
    assertTrue(""String_Node_Str"",util.isLoadedWithReference(emp,""String_Node_Str"").equals(LoadState.NOT_LOADED));
    assertTrue(""String_Node_Str"",util.isLoaded(new NonEntity()).equals(LoadState.UNKNOWN));
  }
  finally {
    rollbackTransaction(em);
  }
}"
66946,"public void testIsLoadedWithoutReference(){
  EntityManagerFactory emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  beginTransaction(em);
  try {
    Employee emp=new Employee();
    emp.setFirstName(""String_Node_Str"");
    emp.setLastName(""String_Node_Str"");
    Address addr=new Address();
    addr.setCity(""String_Node_Str"");
    emp.setAddress(addr);
    PhoneNumber pn=new PhoneNumber();
    pn.setNumber(""String_Node_Str"");
    pn.setType(""String_Node_Str"");
    emp.addPhoneNumber(pn);
    pn.setOwner(emp);
    Employee manager=new Employee();
    manager.addManagedEmployee(emp);
    emp.setManager(manager);
    em.persist(emp);
    em.flush();
    Integer id=emp.getId();
    em.clear();
    clearCache();
    ProviderUtil util=(new PersistenceProvider()).getProviderUtil();
    assertTrue(""String_Node_Str"",util.isLoaded(emp).equals(LoadState.LOADED));
    emp=em.getReference(Employee.class,emp.getId());
    assertTrue(""String_Node_Str"",util.isLoaded(emp).equals(LoadState.NOT_LOADED));
    assertTrue(""String_Node_Str"",util.isLoaded(new NonEntity()).equals(LoadState.UNKNOWN));
  }
  finally {
    rollbackTransaction(em);
  }
}","public void testIsLoadedWithoutReference(){
  EntityManagerFactory emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  beginTransaction(em);
  try {
    Employee emp=new Employee();
    emp.setFirstName(""String_Node_Str"");
    emp.setLastName(""String_Node_Str"");
    Address addr=new Address();
    addr.setCity(""String_Node_Str"");
    emp.setAddress(addr);
    PhoneNumber pn=new PhoneNumber();
    pn.setNumber(""String_Node_Str"");
    pn.setType(""String_Node_Str"");
    emp.addPhoneNumber(pn);
    pn.setOwner(emp);
    Employee manager=new Employee();
    manager.addManagedEmployee(emp);
    emp.setManager(manager);
    em.persist(emp);
    em.flush();
    Integer id=emp.getId();
    em.clear();
    clearCache();
    ProviderUtil util=(new PersistenceProvider()).getProviderUtil();
    if (emp instanceof PersistenceWeaved) {
      assertTrue(""String_Node_Str"",util.isLoaded(emp).equals(LoadState.LOADED));
      emp=em.getReference(Employee.class,emp.getId());
      assertTrue(""String_Node_Str"",util.isLoaded(emp).equals(LoadState.NOT_LOADED));
    }
 else {
      assertTrue(""String_Node_Str"",util.isLoaded(emp).equals(LoadState.UNKNOWN));
      emp=em.getReference(Employee.class,emp.getId());
      assertTrue(""String_Node_Str"",util.isLoaded(emp).equals(LoadState.UNKNOWN));
    }
    assertTrue(""String_Node_Str"",util.isLoaded(new NonEntity()).equals(LoadState.UNKNOWN));
  }
  finally {
    rollbackTransaction(em);
  }
}"
66947,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  return suite;
}"
66948,"public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        xsiType=element.getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
}","public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        xsiType=element.getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
 else {
    Object valueToSet=unmarshalRecord.getChildRecord().getCurrentObject();
    if (xmlCompositeObjectMapping.getConverter() != null) {
      Converter converter=xmlCompositeObjectMapping.getConverter();
      if (converter instanceof XMLConverter) {
        valueToSet=((XMLConverter)converter).convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        valueToSet=converter.convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession());
      }
    }
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    if (xmlCompositeObjectMapping.getContainerAccessor() != null) {
      xmlCompositeObjectMapping.getContainerAccessor().setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    }
  }
}"
66949,"public UnmarshalRecord buildSelfRecord(UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(null,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
    }
    if (xmlDescriptor != null) {
      if (xmlDescriptor.hasInheritance()) {
        unmarshalRecord.setAttributes(atts);
        Class clazz=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
        if (clazz == null) {
          QName leafElementType=unmarshalRecord.getLeafElementType();
          if (leafElementType != null) {
            Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
            if (indicator == null) {
              throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
            }
            clazz=(Class)indicator;
          }
        }
        if (clazz != null) {
          xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(clazz);
        }
 else {
          if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
            throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
        }
      }
      TreeObjectBuilder stob2=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
      UnmarshalRecord childRecord=(UnmarshalRecord)stob2.createRecord(unmarshalRecord.getSession());
      childRecord.setUnmarshaller(unmarshalRecord.getUnmarshaller());
      childRecord.setSelfRecord(true);
      unmarshalRecord.setChildRecord(childRecord);
      childRecord.setXMLReader(unmarshalRecord.getXMLReader());
      childRecord.startDocument(this.xmlCompositeObjectMapping);
      xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),childRecord.getCurrentObject());
      if (xmlCompositeObjectMapping.getContainerAccessor() != null) {
        xmlCompositeObjectMapping.getContainerAccessor().setAttributeValueInObject(childRecord.getCurrentObject(),unmarshalRecord.getCurrentObject());
      }
      return childRecord;
    }
 else {
      return null;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}","public UnmarshalRecord buildSelfRecord(UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(null,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
    }
    if (xmlDescriptor != null) {
      if (xmlDescriptor.hasInheritance()) {
        unmarshalRecord.setAttributes(atts);
        Class clazz=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
        if (clazz == null) {
          QName leafElementType=unmarshalRecord.getLeafElementType();
          if (leafElementType != null) {
            Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
            if (indicator == null) {
              throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
            }
            clazz=(Class)indicator;
          }
        }
        if (clazz != null) {
          xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(clazz);
        }
 else {
          if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
            throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
        }
      }
      TreeObjectBuilder stob2=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
      UnmarshalRecord childRecord=(UnmarshalRecord)stob2.createRecord(unmarshalRecord.getSession());
      childRecord.setUnmarshaller(unmarshalRecord.getUnmarshaller());
      childRecord.setSelfRecord(true);
      unmarshalRecord.setChildRecord(childRecord);
      childRecord.setXMLReader(unmarshalRecord.getXMLReader());
      childRecord.startDocument(this.xmlCompositeObjectMapping);
      return childRecord;
    }
 else {
      return null;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}"
66950,"/** 
 * Process @XmlID annotation on a given property
 * @param property
 * @param info
 */
private void processXmlID(Property property,TypeInfo info){
  if (helper.isAnnotationPresent(property.getElement(),XmlID.class)) {
    if (!areEquals(property.getType(),String.class)) {
      throw JAXBException.invalidId(property.getPropertyName());
    }
    if (info.isIDSet()) {
      throw JAXBException.idAlreadySet(property.getPropertyName(),info.getIDProperty().getPropertyName(),info.getDescriptor().getAlias());
    }
    info.setIDProperty(property);
  }
}","/** 
 * Process @XmlID annotation on a given property
 * @param property
 * @param info
 */
private void processXmlID(Property property,TypeInfo info){
  if (helper.isAnnotationPresent(property.getElement(),XmlID.class)) {
    if (info.isIDSet()) {
      throw JAXBException.idAlreadySet(property.getPropertyName(),info.getIDProperty().getPropertyName(),info.getDescriptor().getAlias());
    }
    info.setIDProperty(property);
  }
}"
66951,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (super.nodes.size() == 2) {
    Element endedElement=(Element)nodes.peek();
    if (stringBuffer.length() > 0) {
      Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
      endedElement.appendChild(text);
      stringBuffer.reset();
    }
    owningRecord.getXMLReader().setContentHandler(owningRecord);
    owningRecord.endElement(namespaceURI,localName,qName);
  }
 else {
    super.endElement(namespaceURI,localName,qName);
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (super.nodes.size() == 2) {
    Element endedElement=(Element)nodes.get(nodes.size() - 1);
    if (stringBuffer.length() > 0) {
      Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
      endedElement.appendChild(text);
      stringBuffer.reset();
    }
    owningRecord.getXMLReader().setContentHandler(owningRecord);
    owningRecord.endElement(namespaceURI,localName,qName);
  }
 else {
    super.endElement(namespaceURI,localName,qName);
  }
}"
66952,"public Stack getNodes(){
  return super.nodes;
}","public List<Node> getNodes(){
  return super.nodes;
}"
66953,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + XMLConstants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(XMLConstants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + XMLConstants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=(Node)nodes.peek();
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  appendChildNode(parentNode,element);
  nodes.push(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + XMLConstants.COLON)) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),atts.getValue(x));
    }
 else {
      String value=atts.getValue(x);
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value);
      if (XMLConstants.SCHEMA_INSTANCE_URL.equals(attributeNamespaceURI) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(atts.getLocalName(x))) {
        int colonIndex=value.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=value.substring(0,colonIndex);
          String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          if (uri == null || uri.length() == 0) {
            String theUri=owningRecord.resolveNamespacePrefix(prefix);
            if (theUri != null && theUri.length() > 0) {
              element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,theUri);
            }
          }
        }
      }
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + XMLConstants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(XMLConstants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + XMLConstants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + XMLConstants.COLON)) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),atts.getValue(x));
    }
 else {
      String value=atts.getValue(x);
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value);
      if (XMLConstants.SCHEMA_INSTANCE_URL.equals(attributeNamespaceURI) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(atts.getLocalName(x))) {
        int colonIndex=value.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=value.substring(0,colonIndex);
          String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          if (uri == null || uri.length() == 0) {
            String theUri=owningRecord.resolveNamespacePrefix(prefix);
            if (theUri != null && theUri.length() > 0) {
              element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,theUri);
            }
          }
        }
      }
    }
  }
}"
66954,"public void endSelfElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (super.nodes.size() == 2) {
    Element endedElement=(Element)nodes.peek();
    if (stringBuffer.length() > 0) {
      Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
      endedElement.appendChild(text);
      stringBuffer.reset();
    }
  }
 else {
    super.endElement(namespaceURI,localName,qName);
  }
}","public void endSelfElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (super.nodes.size() == 2) {
    Element endedElement=(Element)nodes.get(nodes.size() - 1);
    if (stringBuffer.length() > 0) {
      Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
      endedElement.appendChild(text);
      stringBuffer.reset();
    }
  }
 else {
    super.endElement(namespaceURI,localName,qName);
  }
}"
66955,"public boolean marshalAttributes(MarshalRecord marshalRecord,Object object,AbstractSession session){
  boolean hasValue=false;
  NamespaceResolver namespaceResolver=((XMLDescriptor)this.getDescriptor()).getNamespaceResolver();
  List attributeChildren=rootXPathNode.getAttributeChildren();
  if (null != attributeChildren) {
    for (int x=0, attributeChildrenSize=attributeChildren.size(); x < attributeChildrenSize; x++) {
      XPathNode attributeNode=(XPathNode)rootXPathNode.getAttributeChildren().get(x);
      hasValue=attributeNode.marshal(marshalRecord,object,session,namespaceResolver,ObjectMarshalContext.getInstance()) || hasValue;
    }
  }
  if (rootXPathNode.getAnyAttributeNode() != null) {
    hasValue=rootXPathNode.getAnyAttributeNode().marshal(marshalRecord,object,session,namespaceResolver,ObjectMarshalContext.getInstance()) || hasValue;
  }
  List selfChildren=rootXPathNode.getSelfChildren();
  if (null != selfChildren) {
    for (int x=0, selfChildrenSize=selfChildren.size(); x < selfChildrenSize; x++) {
      XPathNode childNode=(XPathNode)selfChildren.get(x);
      childNode.marshalSelfAttributes(marshalRecord,object,session,namespaceResolver,marshalRecord.getMarshaller());
    }
  }
  return hasValue;
}","public boolean marshalAttributes(MarshalRecord marshalRecord,Object object,AbstractSession session){
  boolean hasValue=false;
  NamespaceResolver namespaceResolver=((XMLDescriptor)this.getDescriptor()).getNamespaceResolver();
  List attributeChildren=rootXPathNode.getAttributeChildren();
  if (null != attributeChildren) {
    for (int x=0, attributeChildrenSize=attributeChildren.size(); x < attributeChildrenSize; x++) {
      XPathNode attributeNode=(XPathNode)rootXPathNode.getAttributeChildren().get(x);
      hasValue=attributeNode.marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance()) || hasValue;
    }
  }
  if (rootXPathNode.getAnyAttributeNode() != null) {
    hasValue=rootXPathNode.getAnyAttributeNode().marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance()) || hasValue;
  }
  List selfChildren=rootXPathNode.getSelfChildren();
  if (null != selfChildren) {
    for (int x=0, selfChildrenSize=selfChildren.size(); x < selfChildrenSize; x++) {
      XPathNode childNode=(XPathNode)selfChildren.get(x);
      childNode.marshalSelfAttributes(marshalRecord,object,session,namespaceResolver,marshalRecord.getMarshaller());
    }
  }
  return hasValue;
}"
66956,"public AbstractRecord buildRow(AbstractRecord record,Object object,org.eclipse.persistence.internal.sessions.AbstractSession session,XMLMarshaller marshaller){
  if (null == getRootXPathNode().getNonAttributeChildren()) {
    return record;
  }
  XMLDescriptor xmlDescriptor=(XMLDescriptor)this.getDescriptor();
  NamespaceResolver namespaceResolver=xmlDescriptor.getNamespaceResolver();
  MarshalContext marshalContext=null;
  if (xmlDescriptor.isSequencedObject()) {
    SequencedObject sequencedObject=(SequencedObject)object;
    marshalContext=new SequencedMarshalContext(sequencedObject.getSettings());
  }
 else {
    marshalContext=ObjectMarshalContext.getInstance();
  }
  int size=marshalContext.getNonAttributeChildrenSize(getRootXPathNode());
  for (int x=0; x < size; x++) {
    XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,getRootXPathNode());
    xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext.getMarshalContext(x));
  }
  return record;
}","public AbstractRecord buildRow(AbstractRecord record,Object object,org.eclipse.persistence.internal.sessions.AbstractSession session,XMLMarshaller marshaller){
  if (null == getRootXPathNode().getNonAttributeChildren()) {
    return record;
  }
  XMLDescriptor xmlDescriptor=(XMLDescriptor)this.descriptor;
  NamespaceResolver namespaceResolver=xmlDescriptor.getNamespaceResolver();
  MarshalContext marshalContext=null;
  if (xmlDescriptor.isSequencedObject()) {
    SequencedObject sequencedObject=(SequencedObject)object;
    marshalContext=new SequencedMarshalContext(sequencedObject.getSettings());
  }
 else {
    marshalContext=ObjectMarshalContext.getInstance();
  }
  for (int x=0, size=marshalContext.getNonAttributeChildrenSize(getRootXPathNode()); x < size; x++) {
    XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,getRootXPathNode());
    xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext.getMarshalContext(x));
  }
  return record;
}"
66957,"public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().pop();
      String xsiType=null;
      if (null != element) {
        xsiType=element.getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
}","public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        xsiType=element.getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
}"
66958,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  Object value=builder.getNodes().pop();
  unmarshalRecord.addAttributeValue(this,value);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  Object value=builder.getNodes().remove(builder.getNodes().size() - 1);
  unmarshalRecord.addAttributeValue(this,value);
}"
66959,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.removeNullCapableValue(this);
  XPathFragment lastFrag=((XMLField)xmlFragmentMapping.getField()).getLastXPathFragment();
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  if (lastFrag.nameIsText()) {
    Object attributeValue=builder.buildTextNode(unmarshalRecord.getStringBuffer().toString());
    unmarshalRecord.resetStringBuffer();
    xmlFragmentMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),attributeValue);
  }
 else   if (!lastFrag.isAttribute()) {
    Object value=builder.getNodes().pop();
    unmarshalRecord.setAttributeValue(value,xmlFragmentMapping);
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.removeNullCapableValue(this);
  XPathFragment lastFrag=((XMLField)xmlFragmentMapping.getField()).getLastXPathFragment();
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  if (lastFrag.nameIsText()) {
    Object attributeValue=builder.buildTextNode(unmarshalRecord.getStringBuffer().toString());
    unmarshalRecord.resetStringBuffer();
    xmlFragmentMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),attributeValue);
  }
 else   if (!lastFrag.isAttribute()) {
    Object value=builder.getNodes().remove(builder.getNodes().size() - 1);
    unmarshalRecord.setAttributeValue(value,xmlFragmentMapping);
  }
}"
66960,"protected List addExtraNamespacesToNamespaceResolver(XMLDescriptor desc,XMLRecord marshalRecord,AbstractSession session){
  if (((XMLLogin)session.getDatasourceLogin()).hasEqualNamespaceResolvers()) {
    return null;
  }
  List returnList=new ArrayList();
  List namespaces=desc.getNonNullNamespaceResolver().getNamespaces();
  for (int i=0; i < namespaces.size(); i++) {
    Namespace next=(Namespace)namespaces.get(i);
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(next.getNamespaceURI());
    if (prefix == null || prefix.length() == 0) {
      marshalRecord.getNamespaceResolver().put(next.getPrefix(),next.getNamespaceURI());
      returnList.add(next);
    }
 else {
      if (!prefix.equals(next.getPrefix())) {
        marshalRecord.getNamespaceResolver().put(next.getPrefix(),next.getNamespaceURI());
        returnList.add(next);
      }
    }
  }
  return returnList;
}","protected List addExtraNamespacesToNamespaceResolver(XMLDescriptor desc,XMLRecord marshalRecord,AbstractSession session){
  if (((XMLLogin)session.getDatasourceLogin()).hasEqualNamespaceResolvers()) {
    return null;
  }
  List returnList=new ArrayList();
  for (  Entry<String,String> entry : desc.getNonNullNamespaceResolver().getPrefixesToNamespaces().entrySet()) {
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(entry.getValue());
    if (prefix == null || prefix.length() == 0) {
      marshalRecord.getNamespaceResolver().put(entry.getKey(),entry.getValue());
      returnList.add(new Namespace(entry.getKey(),entry.getValue()));
    }
 else {
      if (!prefix.equals(entry.getKey())) {
        marshalRecord.getNamespaceResolver().put(entry.getKey(),entry.getValue());
        returnList.add(new Namespace(entry.getKey(),entry.getValue()));
      }
    }
  }
  return returnList;
}"
66961,"protected void setOrAddAttributeValueForKeepAsElement(SAXFragmentBuilder builder,XMLMapping mapping,XMLConverter converter,UnmarshalRecord unmarshalRecord,boolean isCollection,Object collection){
  Object node=builder.getNodes().pop();
  if (converter != null) {
    node=converter.convertDataValueToObjectValue(node,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  }
  if (isCollection) {
    if (collection != null) {
      unmarshalRecord.addAttributeValue((ContainerValue)this,node,collection);
    }
 else {
      unmarshalRecord.addAttributeValue((ContainerValue)this,node);
    }
  }
 else {
    unmarshalRecord.setAttributeValue(node,(DatabaseMapping)mapping);
  }
}","protected void setOrAddAttributeValueForKeepAsElement(SAXFragmentBuilder builder,XMLMapping mapping,XMLConverter converter,UnmarshalRecord unmarshalRecord,boolean isCollection,Object collection){
  Object node=builder.getNodes().remove(builder.getNodes().size() - 1);
  if (converter != null) {
    node=converter.convertDataValueToObjectValue(node,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  }
  if (isCollection) {
    if (collection != null) {
      unmarshalRecord.addAttributeValue((ContainerValue)this,node,collection);
    }
 else {
      unmarshalRecord.addAttributeValue((ContainerValue)this,node);
    }
  }
 else {
    unmarshalRecord.setAttributeValue(node,(DatabaseMapping)mapping);
  }
}"
66962,"public boolean marshal(MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,org.eclipse.persistence.oxm.XMLMarshaller marshaller,MarshalContext marshalContext){
  if ((null == marshalNodeValue) || marshalNodeValue.isMarshalOnlyNodeValue()) {
    marshalRecord.addGroupingElement(this);
    XPathNode xPathNode;
    boolean hasValue=false;
    if (null != attributeChildren) {
      int size=attributeChildren.size();
      for (int x=0; x < size; x++) {
        xPathNode=(XPathNode)attributeChildren.get(x);
        hasValue=xPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance()) || hasValue;
      }
    }
    if (anyAttributeNode != null) {
      hasValue=anyAttributeNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance()) || hasValue;
    }
    if (null != nonAttributeChildren) {
      int size=marshalContext.getNonAttributeChildrenSize(this);
      for (int x=0; x < size; x++) {
        xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,this);
        MarshalContext childMarshalContext=marshalContext.getMarshalContext(x);
        hasValue=xPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,childMarshalContext) || hasValue;
      }
    }
    if (hasValue) {
      marshalRecord.endElement(this.getXPathFragment(),namespaceResolver);
    }
 else {
      marshalRecord.removeGroupingElement(this);
    }
    return hasValue;
  }
 else {
    return marshalContext.marshal(marshalNodeValue,xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
}","public boolean marshal(MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,XMLMarshaller marshaller,MarshalContext marshalContext){
  if ((null == marshalNodeValue) || marshalNodeValue.isMarshalOnlyNodeValue()) {
    marshalRecord.addGroupingElement(this);
    boolean hasValue=false;
    if (null != attributeChildren) {
      for (int x=0, size=attributeChildren.size(); x < size; x++) {
        XPathNode xPathNode=attributeChildren.get(x);
        hasValue=xPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance()) || hasValue;
      }
    }
    if (anyAttributeNode != null) {
      hasValue=anyAttributeNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance()) || hasValue;
    }
    if (null != nonAttributeChildren) {
      for (int x=0, size=marshalContext.getNonAttributeChildrenSize(this); x < size; x++) {
        XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,this);
        MarshalContext childMarshalContext=marshalContext.getMarshalContext(x);
        hasValue=xPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,childMarshalContext) || hasValue;
      }
    }
    if (hasValue) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
 else {
      marshalRecord.removeGroupingElement(this);
    }
    return hasValue;
  }
 else {
    return marshalContext.marshal(marshalNodeValue,xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
}"
66963,"public boolean startElement(MarshalRecord marshalRecord,XPathFragment anXPathFragment,Object object,AbstractSession session,NamespaceResolver namespaceResolver,TreeObjectBuilder compositeObjectBuilder,Object compositeObject){
  if (null == anXPathFragment) {
    return false;
  }
  marshalRecord.openStartElement(anXPathFragment,namespaceResolver);
  XPathNode attributeNode;
  boolean hasValue=false;
  if (null != attributeChildren) {
    int size=attributeChildren.size();
    for (int x=0; x < size; x++) {
      attributeNode=(XPathNode)attributeChildren.get(x);
      hasValue=attributeNode.marshal(marshalRecord,object,session,namespaceResolver,ObjectMarshalContext.getInstance()) || hasValue;
    }
  }
  if (anyAttributeNode != null) {
    hasValue=anyAttributeNode.marshal(marshalRecord,object,session,namespaceResolver,ObjectMarshalContext.getInstance()) || hasValue;
  }
  if (null != compositeObjectBuilder) {
    hasValue=compositeObjectBuilder.marshalAttributes(marshalRecord,compositeObject,session) || hasValue;
  }
  marshalRecord.closeStartElement();
  return hasValue;
}","public boolean startElement(MarshalRecord marshalRecord,XPathFragment anXPathFragment,Object object,AbstractSession session,NamespaceResolver namespaceResolver,TreeObjectBuilder compositeObjectBuilder,Object compositeObject){
  if (null == anXPathFragment) {
    return false;
  }
  marshalRecord.openStartElement(anXPathFragment,namespaceResolver);
  boolean hasValue=false;
  if (null != attributeChildren) {
    for (int x=0, size=attributeChildren.size(); x < size; x++) {
      XPathNode attributeNode=(XPathNode)attributeChildren.get(x);
      hasValue=attributeNode.marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance()) || hasValue;
    }
  }
  if (anyAttributeNode != null) {
    hasValue=anyAttributeNode.marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance()) || hasValue;
  }
  if (null != compositeObjectBuilder) {
    hasValue=compositeObjectBuilder.marshalAttributes(marshalRecord,compositeObject,session) || hasValue;
  }
  marshalRecord.closeStartElement();
  return hasValue;
}"
66964,"public int getIndex(String uri,String localName){
  Attr item;
  int size=attrs.size();
  for (int i=0; i < size; i++) {
    item=attrs.get(i);
    try {
      if (item.getNamespaceURI().equals(uri) && item.getLocalName().equals(localName)) {
        return i;
      }
    }
 catch (    Exception x) {
    }
  }
  return -1;
}","public int getIndex(String uri,String localName){
  for (int i=0, size=attrs.size(); i < size; i++) {
    Attr item=attrs.get(i);
    try {
      if (item.getNamespaceURI().equals(uri) && item.getLocalName().equals(localName)) {
        return i;
      }
    }
 catch (    Exception x) {
    }
  }
  return -1;
}"
66965,"/** 
 * Process namespace declarations on parent elements if not the root. For each parent node from current to root push each onto a stack,  then pop each off, calling startPrefixMapping for each XMLNS  attribute.  Using a stack ensures that the parent nodes are  processed top down.
 * @param element
 */
protected void processParentNamespaces(Element element) throws SAXException {
  Node parent=element.getParentNode();
  if (parent != null && parent.getNodeType() == Node.DOCUMENT_NODE) {
    return;
  }
  Stack<Node> parentElements=new Stack();
  while (parent != null && parent.getNodeType() != Node.DOCUMENT_NODE) {
    parentElements.push(parent);
    parent=parent.getParentNode();
  }
  for (Iterator stackIt=parentElements.iterator(); stackIt.hasNext(); ) {
    NamedNodeMap attrs=parentElements.pop().getAttributes();
    if (attrs != null) {
      int length=attrs.getLength();
      for (int i=0; i < length; i++) {
        Attr next=(Attr)attrs.item(i);
        String attrPrefix=next.getPrefix();
        if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
          getContentHandler().startPrefixMapping(next.getLocalName(),next.getValue());
        }
      }
    }
  }
}","/** 
 * Process namespace declarations on parent elements if not the root. For each parent node from current to root push each onto a stack,  then pop each off, calling startPrefixMapping for each XMLNS  attribute.  Using a stack ensures that the parent nodes are  processed top down.
 * @param element
 */
protected void processParentNamespaces(Element element) throws SAXException {
  Node parent=element.getParentNode();
  if (parent != null && parent.getNodeType() == Node.DOCUMENT_NODE) {
    return;
  }
  List<Node> parentElements=new ArrayList();
  while (parent != null && parent.getNodeType() != Node.DOCUMENT_NODE) {
    parentElements.add(parent);
    parent=parent.getParentNode();
  }
  for (Iterator stackIt=parentElements.iterator(); stackIt.hasNext(); ) {
    NamedNodeMap attrs=parentElements.remove(parentElements.size() - 1).getAttributes();
    if (attrs != null) {
      for (int i=0, length=attrs.getLength(); i < length; i++) {
        Attr next=(Attr)attrs.item(i);
        String attrPrefix=next.getPrefix();
        if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
          getContentHandler().startPrefixMapping(next.getLocalName(),next.getValue());
        }
      }
    }
  }
}"
66966,"public String getValue(String uri,String localName){
  Attr item;
  int size=attrs.size();
  for (int i=0; i < size; i++) {
    item=attrs.get(i);
    if (item != null) {
      String itemNS=item.getNamespaceURI();
      if (item.getNamespaceURI() == null) {
        itemNS=XMLConstants.EMPTY_STRING;
      }
      if ((itemNS.equals(uri)) && (item.getLocalName() != null && item.getLocalName().equals(localName))) {
        return item.getValue();
      }
    }
  }
  return null;
}","public String getValue(String uri,String localName){
  for (int i=0, size=attrs.size(); i < size; i++) {
    Attr item=attrs.get(i);
    if (item != null) {
      String itemNS=item.getNamespaceURI();
      if (item.getNamespaceURI() == null) {
        itemNS=XMLConstants.EMPTY_STRING;
      }
      if ((itemNS.equals(uri)) && (item.getLocalName() != null && item.getLocalName().equals(localName))) {
        return item.getValue();
      }
    }
  }
  return null;
}"
66967,"public boolean handleEvent(ValidationEvent event){
  if (event.getSeverity() != ValidationEvent.ERROR) {
    return false;
  }
  Exception ex=(Exception)event.getLinkedException();
  String message=ex.getMessage();
  System.out.println(""String_Node_Str"" + message);
  if (message.indexOf(""String_Node_Str"") != -1) {
    System.out.println(""String_Node_Str"");
    return true;
  }
  return false;
}","public boolean handleEvent(ValidationEvent event){
  if (event.getSeverity() != ValidationEvent.ERROR) {
    return false;
  }
  errorCount++;
  if (errorCount == 1) {
    return true;
  }
  return false;
}"
66968,"/** 
 * Figure out the BoundType and ValueType for the XmlAdapter class, then either create an instance of the XmlAdapter, or if an instance is set on the marshaller, use it.
 * @param mapping
 * @param session
 */
public void initialize(DatabaseMapping mapping,Session session){
  if (xmlAdapterClass == null) {
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          xmlAdapterClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(getXmlAdapterClassName()));
        }
 catch (        PrivilegedActionException ex) {
          if (ex.getCause() instanceof ClassNotFoundException) {
            throw (ClassNotFoundException)ex.getCause();
          }
          throw (RuntimeException)ex.getCause();
        }
      }
 else {
        xmlAdapterClass=PrivilegedAccessHelper.getClassForName(getXmlAdapterClassName());
      }
    }
 catch (    ClassNotFoundException cnfe) {
      return;
    }
  }
  this.mapping=mapping;
  Method[] methods=null;
  if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
    try {
      methods=(Method[])AccessController.doPrivileged(new PrivilegedGetDeclaredMethods(xmlAdapterClass));
      ;
    }
 catch (    PrivilegedActionException ex) {
      throw (RuntimeException)ex.getCause();
    }
  }
 else {
    methods=PrivilegedAccessHelper.getDeclaredMethods(xmlAdapterClass);
  }
  Method method;
  for (int i=0; i < methods.length; i++) {
    method=methods[i];
    if (method.getName().equals(""String_Node_Str"") && (method.getReturnType() != Object.class) && (method.getParameterTypes()[0] != Object.class)) {
      valueType=method.getReturnType();
      boundType=method.getParameterTypes()[0];
      break;
    }
  }
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        xmlAdapter=(XmlAdapter)AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(getXmlAdapterClass()));
        ;
      }
 catch (      PrivilegedActionException ex) {
        if (ex.getCause() instanceof IllegalAccessException) {
          throw (IllegalAccessException)ex.getCause();
        }
        if (ex.getCause() instanceof InstantiationException) {
          throw (InstantiationException)ex.getCause();
        }
        throw (RuntimeException)ex.getCause();
      }
    }
 else {
      xmlAdapter=(XmlAdapter)PrivilegedAccessHelper.newInstanceFromClass(getXmlAdapterClass());
    }
  }
 catch (  Exception ex) {
  }
}","/** 
 * Figure out the BoundType and ValueType for the XmlAdapter class, then either create an instance of the XmlAdapter, or if an instance is set on the marshaller, use it.
 * @param mapping
 * @param session
 */
public void initialize(DatabaseMapping mapping,Session session){
  if (xmlAdapterClass == null) {
    ClassLoader loader=session.getDatasourceLogin().getDatasourcePlatform().getConversionManager().getLoader();
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          xmlAdapterClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(getXmlAdapterClassName(),true,loader));
        }
 catch (        PrivilegedActionException ex) {
          if (ex.getCause() instanceof ClassNotFoundException) {
            throw (ClassNotFoundException)ex.getCause();
          }
          throw (RuntimeException)ex.getCause();
        }
      }
 else {
        xmlAdapterClass=PrivilegedAccessHelper.getClassForName(getXmlAdapterClassName(),true,loader);
      }
    }
 catch (    ClassNotFoundException cnfe) {
      throw (RuntimeException)cnfe.getCause();
    }
  }
  this.mapping=mapping;
  Method[] methods=null;
  if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
    try {
      methods=(Method[])AccessController.doPrivileged(new PrivilegedGetDeclaredMethods(xmlAdapterClass));
      ;
    }
 catch (    PrivilegedActionException ex) {
      throw (RuntimeException)ex.getCause();
    }
  }
 else {
    methods=PrivilegedAccessHelper.getDeclaredMethods(xmlAdapterClass);
  }
  Method method;
  for (int i=0; i < methods.length; i++) {
    method=methods[i];
    if (method.getName().equals(""String_Node_Str"") && (method.getReturnType() != Object.class) && (method.getParameterTypes()[0] != Object.class)) {
      valueType=method.getReturnType();
      boundType=method.getParameterTypes()[0];
      break;
    }
  }
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        xmlAdapter=(XmlAdapter)AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(getXmlAdapterClass()));
        ;
      }
 catch (      PrivilegedActionException ex) {
        if (ex.getCause() instanceof IllegalAccessException) {
          throw (IllegalAccessException)ex.getCause();
        }
        if (ex.getCause() instanceof InstantiationException) {
          throw (InstantiationException)ex.getCause();
        }
        throw (RuntimeException)ex.getCause();
      }
    }
 else {
      xmlAdapter=(XmlAdapter)PrivilegedAccessHelper.newInstanceFromClass(getXmlAdapterClass());
    }
  }
 catch (  Exception ex) {
  }
}"
66969,"/** 
 * INTERNAL: EJB 3.0 support. Returns the default listeners.
 */
public Vector getDefaultEventListeners(){
  if (defaultEventListeners == null) {
    defaultEventListeners=new Vector();
  }
  return defaultEventListeners;
}","/** 
 * INTERNAL: EJB 3.0 support. Returns the default listeners.
 */
public Vector getDefaultEventListeners(){
  if (defaultEventListeners == null) {
    defaultEventListeners=new NonSynchronizedVector();
  }
  return defaultEventListeners;
}"
66970,"/** 
 * INTERNAL: EJB 3.0 support. Builds our chains of descriptor event managers that will  need to be notified. The chains are cache so we only need to build them once.
 */
protected void initializeEJB30EventManagers(){
  entityEventManagers=new Vector();
  entityListenerEventManagers=new Vector();
  if (hasEntityEventListener()) {
    entityEventManagers.add(this);
  }
  if (hasEntityListenerEventListeners()) {
    entityListenerEventManagers.add(this);
  }
  ClassDescriptor currentDescriptor=getDescriptor();
  boolean excludeEntityListeners=excludeSuperclassListeners();
  while (currentDescriptor.isChildDescriptor()) {
    currentDescriptor=currentDescriptor.getInheritancePolicy().getParentDescriptor();
    DescriptorEventManager eventManager=currentDescriptor.getEventManager();
    if (eventManager.hasEntityEventListener()) {
      entityEventManagers.add(eventManager);
    }
    if (eventManager.hasEntityListenerEventListeners()) {
      if (!excludeEntityListeners) {
        entityListenerEventManagers.add(eventManager);
      }
    }
    excludeEntityListeners=eventManager.excludeSuperclassListeners();
  }
}","/** 
 * INTERNAL: EJB 3.0 support. Builds our chains of descriptor event managers that will  need to be notified. The chains are cache so we only need to build them once.
 */
protected void initializeEJB30EventManagers(){
  entityEventManagers=new NonSynchronizedVector();
  entityListenerEventManagers=new NonSynchronizedVector();
  if (hasEntityEventListener()) {
    entityEventManagers.add(this);
  }
  if (hasEntityListenerEventListeners()) {
    entityListenerEventManagers.add(this);
  }
  ClassDescriptor currentDescriptor=getDescriptor();
  boolean excludeEntityListeners=excludeSuperclassListeners();
  while (currentDescriptor.isChildDescriptor()) {
    currentDescriptor=currentDescriptor.getInheritancePolicy().getParentDescriptor();
    DescriptorEventManager eventManager=currentDescriptor.getEventManager();
    if (eventManager.hasEntityEventListener()) {
      entityEventManagers.add(eventManager);
    }
    if (eventManager.hasEntityListenerEventListeners()) {
      if (!excludeEntityListeners) {
        entityListenerEventManagers.add(eventManager);
      }
    }
    excludeEntityListeners=eventManager.excludeSuperclassListeners();
  }
}"
66971,"public static DiffEngine buildRuntimeDeploymentXmlDiffEngine(){
  DiffEngine diffEngine=new DiffEngine();
  ReflectiveDifferentiator rd;
  rd=diffEngine.addReflectiveDifferentiator(Project.class);
  rd.addCollectionFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(DatasourceLogin.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldsNamed(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new ContainerDifferentiator(MapAdapter.instance(),new MapEntryDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (((Map)object2).containsKey(""String_Node_Str"")) {
        if (((char[])((Map)object2).get(""String_Node_Str"")).length == 0 && !((Map)object1).containsKey(""String_Node_Str"")) {
          return new NullDiff(object1,object2,this);
        }
        if (((Map)object1).containsKey(""String_Node_Str"")) {
          char[] passwordArray1=(char[])((Map)object1).get(""String_Node_Str"");
          char[] passwordArray2=(char[])((Map)object1).get(""String_Node_Str"");
          if (passwordArray1 != null && passwordArray2 != null) {
            String password1=new String(passwordArray1);
            String password2=new String(passwordArray2);
            if (password1.equals(password2)) {
              return new NullDiff(object1,object2,this);
            }
          }
        }
      }
      return super.diff(object1,object2);
    }
  }
);
  diffEngine.setUserDifferentiator(DatasourcePlatform.class,new ReflectiveDifferentiator(DatasourcePlatform.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 instanceof DatabasePlatform) {
        ((DatabasePlatform)object1).getDefaultSequence();
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(DatasourcePlatform.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new ContainerDifferentiator(MapAdapter.instance(),new MapEntryDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object2 == null && ((Map)object1).size() == 0) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=diffEngine.addReflectiveDifferentiator(DefaultConnector.class);
  diffEngine.setUserDifferentiator(ClassDescriptor.class,new ReflectiveDifferentiator(ClassDescriptor.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      if (((ClassDescriptor)object1).getAmendmentClass() == null) {
        return new NullDiff(object1,object2,this);
      }
      String descriptor1Name=((ClassDescriptor)object1).getAmendmentClass().getName();
      String descriptor2Name=((ClassDescriptor)object2).getAmendmentClassName();
      return EqualityDifferentiator.instance().diff(descriptor1Name,descriptor2Name);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(ClassDescriptor.class);
  rd.addCollectionFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.setKeyDifferentiator(new ReflectiveDifferentiator.KeyDifferentiator(){
    public Diff keyDiff(    Object object1,    Object object2){
      return EqualityDifferentiator.instance().diff(((ClassDescriptor)object1).getJavaClass().getName(),((ClassDescriptor)object2).getJavaClassName());
    }
  }
);
  rd=diffEngine.addReflectiveDifferentiator(RelationalDescriptor.class);
  rd=diffEngine.addReflectiveDifferentiator(XMLSchemaReference.class);
  rd=diffEngine.addReflectiveDifferentiator(QueryKey.class);
  rd.addKeyFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(ObjectBuilder.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(AbstractCopyPolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(DescriptorEventManager.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  diffEngine.setUserDifferentiator(DescriptorQueryManager.class,new ReflectiveDifferentiator(DescriptorQueryManager.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      ((DescriptorQueryManager)object1).getDoesExistCall();
      return super.diff(object1,object2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(DescriptorQueryManager.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  ContainerDifferentiator cd=rd.addMapFieldNamed(""String_Node_Str"");
  MapEntryDifferentiator med=(MapEntryDifferentiator)cd.getElementDifferentiator();
  med.setValueDifferentiator(ContainerDifferentiator.forCollections(rd.getDefaultFieldDifferentiator()));
  rd=diffEngine.addReflectiveDifferentiator(ConcurrentFixedCache.class);
  diffEngine.setUserDifferentiator(InheritancePolicy.class,new ReflectiveDifferentiator(InheritancePolicy.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      if (((InheritancePolicy)object1).getParentClass() == null) {
        return new NullDiff(object1,object2,this);
      }
      String parentClassName1=((InheritancePolicy)object1).getParentClass().getName();
      String parentClassName2=((InheritancePolicy)object2).getParentClassName();
      Map classIndicatorMapping=((InheritancePolicy)object1).getClassIndicatorMapping();
      Hashtable classIndicatorNameMapping1=new Hashtable();
      for (Iterator stream=classIndicatorMapping.keySet().iterator(); stream.hasNext(); ) {
        Object key=stream.next();
        classIndicatorNameMapping1.put(key,classIndicatorMapping.get(key));
      }
      Map classIndicatorNameMapping2=((InheritancePolicy)object2).getClassNameIndicatorMapping();
      return new CompositeDiff(object1,object2,new Diff[]{EqualityDifferentiator.instance().diff(parentClassName1,parentClassName2),ContainerDifferentiator.forMaps().diff(classIndicatorNameMapping1,classIndicatorNameMapping2)},this);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(InheritancePolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(ClassExtractor.class);
  diffEngine.setUserDifferentiator(InstantiationPolicy.class,new ReflectiveDifferentiator(InstantiationPolicy.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      if (((InstantiationPolicy)object1).getFactoryClass() == null) {
        return new NullDiff(object1,object2,this);
      }
      String factoryClassName1=((InstantiationPolicy)object1).getFactoryClass().getName();
      String factoryClassName2=((InstantiationPolicy)object2).getFactoryClassName();
      return EqualityDifferentiator.instance().diff(factoryClassName1,factoryClassName2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(InstantiationPolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(VersionLockingPolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(FieldsLockingPolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(DeferredChangeDetectionPolicy.class);
  rd=diffEngine.addReflectiveDifferentiator(ReturningPolicy.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(CacheInvalidationPolicy.class);
  diffEngine.setUserDifferentiator(InterfacePolicy.class,new ReflectiveDifferentiator(InterfacePolicy.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      Vector parentInterfaces=((InterfacePolicy)object1).getParentInterfaces();
      Vector parentInterfaceNames1=new Vector();
      for (int i=0; i < parentInterfaces.size(); i++) {
        parentInterfaceNames1.add(((Class)parentInterfaces.get(i)).getName());
      }
      Vector parentInterfaceNames2=((InterfacePolicy)object1).getParentInterfaceNames();
      return EqualityDifferentiator.instance().diff(parentInterfaceNames1,parentInterfaceNames2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(InterfacePolicy.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(DataReadQuery.class);
  rd=diffEngine.addReflectiveDifferentiator(QueryResultsCachePolicy.class);
  rd=diffEngine.addReflectiveDifferentiator(ReportItem.class);
  rd=diffEngine.addReflectiveDifferentiator(DatabaseQueryMechanism.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(Expression.class);
  rd=diffEngine.addReflectiveDifferentiator(BaseExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(ObjectExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(CompoundExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(FunctionExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.ignoreFieldsNamed(""String_Node_Str"",""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(ConstantExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new ReflectiveDifferentiator(Object.class){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == null && object2 == ""String_Node_Str"") {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=diffEngine.addReflectiveDifferentiator(LiteralExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(ParameterExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(QueryKeyExpression.class);
  rd.addKeyFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(DatasourceCall.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(ContainerPolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(NullPolicy.class);
  diffEngine.setUserDifferentiator(DatabaseQuery.class,new ReflectiveDifferentiator(DatabaseQuery.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      Vector argumentTypes=((DatabaseQuery)object1).getArgumentTypes();
      Vector argumentTypeNames1=new Vector();
      for (int i=0; i < argumentTypes.size(); i++) {
        argumentTypeNames1.add(((Class)argumentTypes.get(i)).getName());
      }
      Vector argumentTypeNames2=((DatabaseQuery)object1).getArgumentTypeNames();
      return EqualityDifferentiator.instance().diff(argumentTypeNames1,argumentTypeNames2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(DatabaseQuery.class);
  rd.addKeyFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object1 == null && ((List)object2).size() == 0) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object1 == null && ((List)object2).size() == 0) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=diffEngine.addReflectiveDifferentiator(ReadAllQuery.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance(),diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object2 == null && ((List)object1).size() == 0) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance(),diffEngine.getUserDifferentiator(Expression.class)){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (((List)object1).size() == 0 && object2 == null) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.setUserDifferentiator(ObjectLevelReadQuery.class,new ReflectiveDifferentiator(ObjectLevelReadQuery.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == null && object2 == null) {
        return new NullDiff(object1,object2,this);
      }
      if (object1 != null) {
        ((ObjectLevelReadQuery)object1).getJoinedAttributeManager();
      }
      if (object2 != null) {
        ((ObjectLevelReadQuery)object2).getJoinedAttributeManager();
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.addReflectiveDifferentiator(ObjectBuildingQuery.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=(ReflectiveDifferentiator)diffEngine.addReflectiveDifferentiator(JoinedAttributeManager.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance(),diffEngine.getUserDifferentiator(Expression.class)){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object1 != null && ((List)object1).size() == 0 && object2 == null) {
        return new NullDiff(object1,object2,this);
      }
      if (object2 != null && ((List)object2).size() == 0 && object1 == null) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(ObjectLevelReadQuery.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(EISInteraction.class);
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object1 == null && ((List)object2).size() == 0) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=diffEngine.addReflectiveDifferentiator(MappedInteraction.class);
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object1 == null && ((List)object2).size() == 0) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=diffEngine.addReflectiveDifferentiator(InterfaceContainerPolicy.class);
  rd.setKeyDifferentiator(new ReflectiveDifferentiator.KeyDifferentiator(){
    public Diff keyDiff(    Object object1,    Object object2){
      return EqualityDifferentiator.instance().diff(((InterfaceContainerPolicy)object1).getContainerClassName(),((InterfaceContainerPolicy)object2).getContainerClassName());
    }
  }
);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(InMemoryQueryIndirectionPolicy.class);
  rd=diffEngine.addReflectiveDifferentiator(ForUpdateClause.class);
  rd=diffEngine.addReflectiveDifferentiator(DatabaseMapping.class);
  rd.setKeyDifferentiator(new ReflectiveDifferentiator.SimpleMethodKeyDifferentiator(""String_Node_Str""));
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=(ReflectiveDifferentiator)diffEngine.setUserDifferentiator(AbstractTransformationMapping.class,new ReflectiveDifferentiator(AbstractTransformationMapping.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (((AbstractTransformationMapping)object1).getAttributeTransformerClass() == null && ((AbstractTransformationMapping)object2).getAttributeTransformerClassName() == null) {
        return new NullDiff(object1,object2,this);
      }
      String className1=((AbstractTransformationMapping)object1).getAttributeTransformerClass().getName();
      String className2=((AbstractTransformationMapping)object2).getAttributeTransformerClassName();
      return EqualityDifferentiator.instance().diff(className1,className2);
    }
  }
);
  rd.addCollectionFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  diffEngine.setUserDifferentiator(ForeignReferenceMapping.class,new ReflectiveDifferentiator(ForeignReferenceMapping.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      if (((ForeignReferenceMapping)object1).getReferenceClass() == null) {
        return new NullDiff(object1,object2,this);
      }
      String referenceClassName1=((ForeignReferenceMapping)object1).getReferenceClass().getName();
      String referenceClassName2=((ForeignReferenceMapping)object2).getReferenceClassName();
      return EqualityDifferentiator.instance().diff(referenceClassName1,referenceClassName2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(ForeignReferenceMapping.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(CollectionMapping.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  diffEngine.setUserDifferentiator(ManyToManyMapping.class,new ReflectiveDifferentiator(ManyToManyMapping.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      DataModifyQuery query=((DataModifyQuery)ClassTools.getFieldValue(object1,""String_Node_Str""));
      query.getSelectionCriteria();
      query=((DataModifyQuery)ClassTools.getFieldValue(object1,""String_Node_Str""));
      query.getSelectionCriteria();
      query=((DataModifyQuery)ClassTools.invokeMethod(object1,""String_Node_Str""));
      query.getSelectionCriteria();
      return super.diff(object1,object2);
    }
  }
);
  diffEngine.setUserDifferentiator(VariableOneToOneMapping.class,new ReflectiveDifferentiator(VariableOneToOneMapping.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      Map typeIndicatorTranslation=((VariableOneToOneMapping)object1).getTypeIndicatorTranslation();
      Hashtable typeIndicatorNameTranslation1=new Hashtable();
      for (Iterator stream=typeIndicatorTranslation.keySet().iterator(); stream.hasNext(); ) {
        Object key=stream.next();
        if (key instanceof Class) {
          typeIndicatorNameTranslation1.put(((Class)key).getName(),typeIndicatorTranslation.get(key));
        }
      }
      Map typeIndicatorNameTranslation2=((VariableOneToOneMapping)object2).getTypeIndicatorNameTranslation();
      return EqualityDifferentiator.instance().diff(typeIndicatorNameTranslation1,typeIndicatorNameTranslation2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(VariableOneToOneMapping.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.addReferenceMapFieldsNamed(""String_Node_Str"");
  diffEngine.setUserDifferentiator(AggregateMapping.class,new ReflectiveDifferentiator(AggregateMapping.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      if (((AggregateMapping)object1).getReferenceClass() == null) {
        return new NullDiff(object1,object2,this);
      }
      String referenceClassName1=((AggregateMapping)object1).getReferenceClass().getName();
      String referenceClassName2=((AggregateMapping)object2).getReferenceClassName();
      return EqualityDifferentiator.instance().diff(referenceClassName1,referenceClassName2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(AggregateMapping.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(EISOneToOneMapping.class);
  rd.addReferenceMapFieldsNamed(""String_Node_Str"",""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(XMLDirectMapping.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(XMLCompositeObjectMapping.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(XMLCompositeCollectionMapping.class);
  rd=diffEngine.addReflectiveDifferentiator(XMLObjectReferenceMapping.class);
  rd.addReferenceMapFieldsNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(OneToOneMapping.class);
  rd.addReferenceMapFieldsNamed(""String_Node_Str"",""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(DatabaseField.class);
  rd.addKeyFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  Differentiator tableFieldDifferentiator=rd.getFieldDifferentiator(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new DatabaseFieldTableFieldDifferentiator(tableFieldDifferentiator));
  rd=diffEngine.addReflectiveDifferentiator(DatabaseTable.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(IndirectionPolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(AttributeAccessor.class);
  rd=diffEngine.addReflectiveDifferentiator(ObjectTypeConverter.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  diffEngine.setUserDifferentiator(TypeConversionConverter.class,new ReflectiveDifferentiator(TypeConversionConverter.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      if (((TypeConversionConverter)object1).getDataClass() == null) {
        return new NullDiff(object1,object2,this);
      }
      String dataClassName1=((TypeConversionConverter)object1).getDataClass().getName();
      String dataClassName2=((TypeConversionConverter)object2).getDataClassName();
      String objectClassName1=((TypeConversionConverter)object1).getObjectClass().getName();
      String objectClassName2=((TypeConversionConverter)object2).getObjectClassName();
      return new CompositeDiff(object1,object2,new Diff[]{EqualityDifferentiator.instance().diff(dataClassName1,dataClassName2),EqualityDifferentiator.instance().diff(objectClassName1,objectClassName2)},this);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(TypeConversionConverter.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(SerializedObjectConverter.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(MethodBasedAttributeTransformer.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(FieldTransformation.class);
  rd=diffEngine.addReflectiveDifferentiator(MethodBasedFieldTransformation.class);
  rd.addKeyFieldNamed(""String_Node_Str"");
  rd=(ReflectiveDifferentiator)diffEngine.setUserDifferentiator(TransformerBasedFieldTransformation.class,new ReflectiveDifferentiator(TransformerBasedFieldTransformation.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (((TransformerBasedFieldTransformation)object1).getTransformerClass() == null && ((TransformerBasedFieldTransformation)object2).getTransformerClassName() == null) {
        return new NullDiff(object1,object2,this);
      }
      String className1=((TransformerBasedFieldTransformation)object1).getTransformerClass().getName();
      String className2=((TransformerBasedFieldTransformation)object2).getTransformerClassName();
      return EqualityDifferentiator.instance().diff(className1,className2);
    }
  }
);
  rd.setKeyDifferentiator(new ReflectiveDifferentiator.SimpleMethodKeyDifferentiator(""String_Node_Str""));
  rd=diffEngine.addReflectiveDifferentiator(EISConnectionSpec.class);
  rd=diffEngine.addReflectiveDifferentiator(NamespaceResolver.class);
  rd=diffEngine.addReflectiveDifferentiator(InitialContext.class);
  rd=diffEngine.addReflectiveDifferentiator(XMLComparer.class);
  return diffEngine;
}","public static DiffEngine buildRuntimeDeploymentXmlDiffEngine(){
  DiffEngine diffEngine=new DiffEngine();
  ReflectiveDifferentiator rd;
  rd=diffEngine.addReflectiveDifferentiator(Project.class);
  rd.addCollectionFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(DatasourceLogin.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldsNamed(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new ContainerDifferentiator(MapAdapter.instance(),new MapEntryDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (((Map)object2).containsKey(""String_Node_Str"")) {
        if (((char[])((Map)object2).get(""String_Node_Str"")).length == 0 && !((Map)object1).containsKey(""String_Node_Str"")) {
          return new NullDiff(object1,object2,this);
        }
        if (((Map)object1).containsKey(""String_Node_Str"")) {
          char[] passwordArray1=(char[])((Map)object1).get(""String_Node_Str"");
          char[] passwordArray2=(char[])((Map)object1).get(""String_Node_Str"");
          if (passwordArray1 != null && passwordArray2 != null) {
            String password1=new String(passwordArray1);
            String password2=new String(passwordArray2);
            if (password1.equals(password2)) {
              return new NullDiff(object1,object2,this);
            }
          }
        }
      }
      return super.diff(object1,object2);
    }
  }
);
  diffEngine.setUserDifferentiator(DatasourcePlatform.class,new ReflectiveDifferentiator(DatasourcePlatform.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 instanceof DatabasePlatform) {
        ((DatabasePlatform)object1).getDefaultSequence();
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(DatasourcePlatform.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new ContainerDifferentiator(MapAdapter.instance(),new MapEntryDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object2 == null && ((Map)object1).size() == 0) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=diffEngine.addReflectiveDifferentiator(DefaultConnector.class);
  diffEngine.setUserDifferentiator(ClassDescriptor.class,new ReflectiveDifferentiator(ClassDescriptor.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      if (((ClassDescriptor)object1).getAmendmentClass() == null) {
        return new NullDiff(object1,object2,this);
      }
      String descriptor1Name=((ClassDescriptor)object1).getAmendmentClass().getName();
      String descriptor2Name=((ClassDescriptor)object2).getAmendmentClassName();
      return EqualityDifferentiator.instance().diff(descriptor1Name,descriptor2Name);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(ClassDescriptor.class);
  rd.addCollectionFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.setKeyDifferentiator(new ReflectiveDifferentiator.KeyDifferentiator(){
    public Diff keyDiff(    Object object1,    Object object2){
      return EqualityDifferentiator.instance().diff(((ClassDescriptor)object1).getJavaClass().getName(),((ClassDescriptor)object2).getJavaClassName());
    }
  }
);
  rd=diffEngine.addReflectiveDifferentiator(RelationalDescriptor.class);
  rd=diffEngine.addReflectiveDifferentiator(XMLSchemaReference.class);
  rd=diffEngine.addReflectiveDifferentiator(QueryKey.class);
  rd.addKeyFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(ObjectBuilder.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(AbstractCopyPolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(DescriptorEventManager.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  diffEngine.setUserDifferentiator(DescriptorQueryManager.class,new ReflectiveDifferentiator(DescriptorQueryManager.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      ((DescriptorQueryManager)object1).getDoesExistCall();
      return super.diff(object1,object2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(DescriptorQueryManager.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  ContainerDifferentiator cd=rd.addMapFieldNamed(""String_Node_Str"");
  MapEntryDifferentiator med=(MapEntryDifferentiator)cd.getElementDifferentiator();
  med.setValueDifferentiator(ContainerDifferentiator.forCollections(rd.getDefaultFieldDifferentiator()));
  rd=diffEngine.addReflectiveDifferentiator(ConcurrentFixedCache.class);
  diffEngine.setUserDifferentiator(InheritancePolicy.class,new ReflectiveDifferentiator(InheritancePolicy.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      if (((InheritancePolicy)object1).getParentClass() == null) {
        return new NullDiff(object1,object2,this);
      }
      String parentClassName1=((InheritancePolicy)object1).getParentClass().getName();
      String parentClassName2=((InheritancePolicy)object2).getParentClassName();
      Map classIndicatorMapping=((InheritancePolicy)object1).getClassIndicatorMapping();
      Hashtable classIndicatorNameMapping1=new Hashtable();
      for (Iterator stream=classIndicatorMapping.keySet().iterator(); stream.hasNext(); ) {
        Object key=stream.next();
        classIndicatorNameMapping1.put(key,classIndicatorMapping.get(key));
      }
      Map classIndicatorNameMapping2=((InheritancePolicy)object2).getClassNameIndicatorMapping();
      return new CompositeDiff(object1,object2,new Diff[]{EqualityDifferentiator.instance().diff(parentClassName1,parentClassName2),ContainerDifferentiator.forMaps().diff(classIndicatorNameMapping1,classIndicatorNameMapping2)},this);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(InheritancePolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(ClassExtractor.class);
  diffEngine.setUserDifferentiator(InstantiationPolicy.class,new ReflectiveDifferentiator(InstantiationPolicy.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      if (((InstantiationPolicy)object1).getFactoryClass() == null) {
        return new NullDiff(object1,object2,this);
      }
      String factoryClassName1=((InstantiationPolicy)object1).getFactoryClass().getName();
      String factoryClassName2=((InstantiationPolicy)object2).getFactoryClassName();
      return EqualityDifferentiator.instance().diff(factoryClassName1,factoryClassName2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(InstantiationPolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(VersionLockingPolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(FieldsLockingPolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(DeferredChangeDetectionPolicy.class);
  rd=diffEngine.addReflectiveDifferentiator(ReturningPolicy.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(CacheInvalidationPolicy.class);
  diffEngine.setUserDifferentiator(InterfacePolicy.class,new ReflectiveDifferentiator(InterfacePolicy.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      Vector parentInterfaces=((InterfacePolicy)object1).getParentInterfaces();
      Vector parentInterfaceNames1=new Vector();
      for (int i=0; i < parentInterfaces.size(); i++) {
        parentInterfaceNames1.add(((Class)parentInterfaces.get(i)).getName());
      }
      Vector parentInterfaceNames2=((InterfacePolicy)object1).getParentInterfaceNames();
      return EqualityDifferentiator.instance().diff(parentInterfaceNames1,parentInterfaceNames2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(InterfacePolicy.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(DataReadQuery.class);
  rd=diffEngine.addReflectiveDifferentiator(QueryResultsCachePolicy.class);
  rd=diffEngine.addReflectiveDifferentiator(ReportItem.class);
  rd=diffEngine.addReflectiveDifferentiator(DatabaseQueryMechanism.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(Expression.class);
  rd=diffEngine.addReflectiveDifferentiator(BaseExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(ObjectExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(CompoundExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(FunctionExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.ignoreFieldsNamed(""String_Node_Str"",""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(ConstantExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new ReflectiveDifferentiator(Object.class){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == null && object2 == ""String_Node_Str"") {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=diffEngine.addReflectiveDifferentiator(LiteralExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(ParameterExpression.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(QueryKeyExpression.class);
  rd.addKeyFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(DatasourceCall.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(ContainerPolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(NullPolicy.class);
  diffEngine.setUserDifferentiator(DatabaseQuery.class,new ReflectiveDifferentiator(DatabaseQuery.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      List<Class> argumentTypes=((DatabaseQuery)object1).getArgumentTypes();
      Vector argumentTypeNames1=new Vector();
      for (int i=0; i < argumentTypes.size(); i++) {
        argumentTypeNames1.add(((Class)argumentTypes.get(i)).getName());
      }
      List<String> argumentTypeNames2=((DatabaseQuery)object1).getArgumentTypeNames();
      return EqualityDifferentiator.instance().diff(argumentTypeNames1,argumentTypeNames2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(DatabaseQuery.class);
  rd.addKeyFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object1 == null && ((List)object2).size() == 0) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object1 == null && ((List)object2).size() == 0) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=diffEngine.addReflectiveDifferentiator(ReadAllQuery.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance(),diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object2 == null && ((List)object1).size() == 0) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance(),diffEngine.getUserDifferentiator(Expression.class)){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (((List)object1).size() == 0 && object2 == null) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.setUserDifferentiator(ObjectLevelReadQuery.class,new ReflectiveDifferentiator(ObjectLevelReadQuery.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == null && object2 == null) {
        return new NullDiff(object1,object2,this);
      }
      if (object1 != null) {
        ((ObjectLevelReadQuery)object1).getJoinedAttributeManager();
      }
      if (object2 != null) {
        ((ObjectLevelReadQuery)object2).getJoinedAttributeManager();
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.addReflectiveDifferentiator(ObjectBuildingQuery.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=(ReflectiveDifferentiator)diffEngine.addReflectiveDifferentiator(JoinedAttributeManager.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance(),diffEngine.getUserDifferentiator(Expression.class)){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object1 != null && ((List)object1).size() == 0 && object2 == null) {
        return new NullDiff(object1,object2,this);
      }
      if (object2 != null && ((List)object2).size() == 0 && object1 == null) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(ObjectLevelReadQuery.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(EISInteraction.class);
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object1 == null && ((List)object2).size() == 0) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=diffEngine.addReflectiveDifferentiator(MappedInteraction.class);
  rd.setFieldDifferentiator(""String_Node_Str"",new OrderedContainerDifferentiator(ListAdapter.instance()){
    public Diff diff(    Object object1,    Object object2){
      if (object1 == object2) {
        return new NullDiff(object1,object2,this);
      }
      if (object1 == null && ((List)object2).size() == 0) {
        return new NullDiff(object1,object2,this);
      }
      return super.diff(object1,object2);
    }
  }
);
  rd=diffEngine.addReflectiveDifferentiator(InterfaceContainerPolicy.class);
  rd.setKeyDifferentiator(new ReflectiveDifferentiator.KeyDifferentiator(){
    public Diff keyDiff(    Object object1,    Object object2){
      return EqualityDifferentiator.instance().diff(((InterfaceContainerPolicy)object1).getContainerClassName(),((InterfaceContainerPolicy)object2).getContainerClassName());
    }
  }
);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(InMemoryQueryIndirectionPolicy.class);
  rd=diffEngine.addReflectiveDifferentiator(ForUpdateClause.class);
  rd=diffEngine.addReflectiveDifferentiator(DatabaseMapping.class);
  rd.setKeyDifferentiator(new ReflectiveDifferentiator.SimpleMethodKeyDifferentiator(""String_Node_Str""));
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=(ReflectiveDifferentiator)diffEngine.setUserDifferentiator(AbstractTransformationMapping.class,new ReflectiveDifferentiator(AbstractTransformationMapping.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (((AbstractTransformationMapping)object1).getAttributeTransformerClass() == null && ((AbstractTransformationMapping)object2).getAttributeTransformerClassName() == null) {
        return new NullDiff(object1,object2,this);
      }
      String className1=((AbstractTransformationMapping)object1).getAttributeTransformerClass().getName();
      String className2=((AbstractTransformationMapping)object2).getAttributeTransformerClassName();
      return EqualityDifferentiator.instance().diff(className1,className2);
    }
  }
);
  rd.addCollectionFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  diffEngine.setUserDifferentiator(ForeignReferenceMapping.class,new ReflectiveDifferentiator(ForeignReferenceMapping.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      if (((ForeignReferenceMapping)object1).getReferenceClass() == null) {
        return new NullDiff(object1,object2,this);
      }
      String referenceClassName1=((ForeignReferenceMapping)object1).getReferenceClass().getName();
      String referenceClassName2=((ForeignReferenceMapping)object2).getReferenceClassName();
      return EqualityDifferentiator.instance().diff(referenceClassName1,referenceClassName2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(ForeignReferenceMapping.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(CollectionMapping.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  diffEngine.setUserDifferentiator(ManyToManyMapping.class,new ReflectiveDifferentiator(ManyToManyMapping.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      DataModifyQuery query=((DataModifyQuery)ClassTools.getFieldValue(object1,""String_Node_Str""));
      query.getSelectionCriteria();
      query=((DataModifyQuery)ClassTools.getFieldValue(object1,""String_Node_Str""));
      query.getSelectionCriteria();
      query=((DataModifyQuery)ClassTools.invokeMethod(object1,""String_Node_Str""));
      query.getSelectionCriteria();
      return super.diff(object1,object2);
    }
  }
);
  diffEngine.setUserDifferentiator(VariableOneToOneMapping.class,new ReflectiveDifferentiator(VariableOneToOneMapping.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      Map typeIndicatorTranslation=((VariableOneToOneMapping)object1).getTypeIndicatorTranslation();
      Hashtable typeIndicatorNameTranslation1=new Hashtable();
      for (Iterator stream=typeIndicatorTranslation.keySet().iterator(); stream.hasNext(); ) {
        Object key=stream.next();
        if (key instanceof Class) {
          typeIndicatorNameTranslation1.put(((Class)key).getName(),typeIndicatorTranslation.get(key));
        }
      }
      Map typeIndicatorNameTranslation2=((VariableOneToOneMapping)object2).getTypeIndicatorNameTranslation();
      return EqualityDifferentiator.instance().diff(typeIndicatorNameTranslation1,typeIndicatorNameTranslation2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(VariableOneToOneMapping.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.addReferenceMapFieldsNamed(""String_Node_Str"");
  diffEngine.setUserDifferentiator(AggregateMapping.class,new ReflectiveDifferentiator(AggregateMapping.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      if (((AggregateMapping)object1).getReferenceClass() == null) {
        return new NullDiff(object1,object2,this);
      }
      String referenceClassName1=((AggregateMapping)object1).getReferenceClass().getName();
      String referenceClassName2=((AggregateMapping)object2).getReferenceClassName();
      return EqualityDifferentiator.instance().diff(referenceClassName1,referenceClassName2);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(AggregateMapping.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(EISOneToOneMapping.class);
  rd.addReferenceMapFieldsNamed(""String_Node_Str"",""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(XMLDirectMapping.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(XMLCompositeObjectMapping.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(XMLCompositeCollectionMapping.class);
  rd=diffEngine.addReflectiveDifferentiator(XMLObjectReferenceMapping.class);
  rd.addReferenceMapFieldsNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(OneToOneMapping.class);
  rd.addReferenceMapFieldsNamed(""String_Node_Str"",""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(DatabaseField.class);
  rd.addKeyFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  Differentiator tableFieldDifferentiator=rd.getFieldDifferentiator(""String_Node_Str"");
  rd.setFieldDifferentiator(""String_Node_Str"",new DatabaseFieldTableFieldDifferentiator(tableFieldDifferentiator));
  rd=diffEngine.addReflectiveDifferentiator(DatabaseTable.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(IndirectionPolicy.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(AttributeAccessor.class);
  rd=diffEngine.addReflectiveDifferentiator(ObjectTypeConverter.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  diffEngine.setUserDifferentiator(TypeConversionConverter.class,new ReflectiveDifferentiator(TypeConversionConverter.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      return new CompositeDiff(object1,object2,new Diff[]{super.diff(object1,object2),bonusDiff(object1,object2)},this);
    }
    private Diff bonusDiff(    Object object1,    Object object2){
      if (((TypeConversionConverter)object1).getDataClass() == null) {
        return new NullDiff(object1,object2,this);
      }
      String dataClassName1=((TypeConversionConverter)object1).getDataClass().getName();
      String dataClassName2=((TypeConversionConverter)object2).getDataClassName();
      String objectClassName1=((TypeConversionConverter)object1).getObjectClass().getName();
      String objectClassName2=((TypeConversionConverter)object2).getObjectClassName();
      return new CompositeDiff(object1,object2,new Diff[]{EqualityDifferentiator.instance().diff(dataClassName1,dataClassName2),EqualityDifferentiator.instance().diff(objectClassName1,objectClassName2)},this);
    }
  }
);
  rd=(ReflectiveDifferentiator)diffEngine.getUserDifferentiator(TypeConversionConverter.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(SerializedObjectConverter.class);
  rd.ignoreFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(MethodBasedAttributeTransformer.class);
  rd.addReferenceFieldNamed(""String_Node_Str"");
  rd=diffEngine.addReflectiveDifferentiator(FieldTransformation.class);
  rd=diffEngine.addReflectiveDifferentiator(MethodBasedFieldTransformation.class);
  rd.addKeyFieldNamed(""String_Node_Str"");
  rd=(ReflectiveDifferentiator)diffEngine.setUserDifferentiator(TransformerBasedFieldTransformation.class,new ReflectiveDifferentiator(TransformerBasedFieldTransformation.class,diffEngine.getRecordingDifferentiator()){
    public Diff diff(    Object object1,    Object object2){
      if (((TransformerBasedFieldTransformation)object1).getTransformerClass() == null && ((TransformerBasedFieldTransformation)object2).getTransformerClassName() == null) {
        return new NullDiff(object1,object2,this);
      }
      String className1=((TransformerBasedFieldTransformation)object1).getTransformerClass().getName();
      String className2=((TransformerBasedFieldTransformation)object2).getTransformerClassName();
      return EqualityDifferentiator.instance().diff(className1,className2);
    }
  }
);
  rd.setKeyDifferentiator(new ReflectiveDifferentiator.SimpleMethodKeyDifferentiator(""String_Node_Str""));
  rd=diffEngine.addReflectiveDifferentiator(EISConnectionSpec.class);
  rd=diffEngine.addReflectiveDifferentiator(NamespaceResolver.class);
  rd=diffEngine.addReflectiveDifferentiator(InitialContext.class);
  rd=diffEngine.addReflectiveDifferentiator(XMLComparer.class);
  return diffEngine;
}"
66972,"/** 
 * Add a Reference object to the list - these References will  be resolved after unmarshalling is complete.
 * @param ref
 */
public void addReference(Reference ref){
  references.add(ref);
}","/** 
 * Add a Reference object to the list - these References will be resolved after unmarshalling is complete.
 * @param ref
 */
public void addReference(Reference ref){
  references.add(ref);
}"
66973,"/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 */
public void resolveReferences(AbstractSession session){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=cPolicy.containerInstance();
      createPKVectorsFromMap(reference);
      for (Iterator pkIt=reference.getPrimaryKeys().iterator(); pkIt.hasNext(); ) {
        Vector pkVector=(Vector)pkIt.next();
        Object value=session.getIdentityMapAccessor().getFromIdentityMap(pkVector,reference.getTargetClass());
        if (value != null) {
          cPolicy.addInto(value,container,session);
        }
      }
      mapping.setAttributeValueInObject(reference.getSourceObject(),container);
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      Object value=session.getIdentityMapAccessor().getFromIdentityMap(reference.getPrimaryKeys(),reference.getTargetClass());
      if (value != null) {
        ((XMLObjectReferenceMapping)reference.getMapping()).setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList();
}","/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 */
public void resolveReferences(AbstractSession session){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=null;
      if (mapping.getReuseContainer()) {
        Object currentObject=reference.getSourceObject();
        container=mapping.getAttributeAccessor().getAttributeValueFromObject(currentObject);
      }
 else {
        container=cPolicy.containerInstance();
      }
      createPKVectorsFromMap(reference);
      for (Iterator pkIt=reference.getPrimaryKeys().iterator(); pkIt.hasNext(); ) {
        Vector pkVector=(Vector)pkIt.next();
        Object value=session.getIdentityMapAccessor().getFromIdentityMap(pkVector,reference.getTargetClass());
        if (value != null) {
          cPolicy.addInto(value,container,session);
        }
      }
      mapping.setAttributeValueInObject(reference.getSourceObject(),container);
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      Object value=session.getIdentityMapAccessor().getFromIdentityMap(reference.getPrimaryKeys(),reference.getTargetClass());
      if (value != null) {
        ((XMLObjectReferenceMapping)reference.getMapping()).setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList();
}"
66974,"/** 
 * INTERNAL: Create vectors of primary key values to be used for cache lookup.  The map of vectors on the reference is keyed on the reference descriptors primary key field names.  Each of these vectors contains all of the values for a  particular key - in the order that they we read in from the document.  For example, if the key field names are A, B, and C, and there are three reference object instances, then the hashmap would have the following:   (A=[1,2,3], B=[X,Y,Z], C=[Jim, Joe, Jane]).  If the primary key field names on the reference descriptor contained [B, C, A], then the result of this method call would be reference.primaryKeys=([X, Jim, 1], [Y, Joe, 2], [Z, Jane, 3]).
 * @param reference
 */
private void createPKVectorsFromMap(Reference reference){
  XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
  Vector pks=new Vector();
  Vector pkFields=mapping.getReferenceDescriptor().getPrimaryKeyFieldNames();
  if (pkFields.size() <= 0) {
    return;
  }
  Vector pkVals;
  boolean init=true;
  for (Iterator pkFieldNameIt=pkFields.iterator(); pkFieldNameIt.hasNext(); ) {
    pkVals=(Vector)reference.getPrimaryKeyMap().get(pkFieldNameIt.next());
    if (pkVals == null) {
      return;
    }
    if (init) {
      for (int i=0; i < pkVals.size(); i++) {
        pks.add(new Vector());
      }
      init=false;
    }
    for (int i=0; i < pkVals.size(); i++) {
      Object val=pkVals.get(i);
      ((Vector)pks.get(i)).add(val);
    }
  }
  reference.primaryKeys=pks;
}","/** 
 * INTERNAL: Create vectors of primary key values to be used for cache lookup.  The map of vectors on the reference is keyed on the reference descriptors primary key field names.  Each of these vectors contains all of the values for a particular key - in the order that they we read in from the document.  For example, if the key field names are A, B, and C, and there are three reference object instances, then the hashmap would have the following: (A=[1,2,3], B=[X,Y,Z], C=[Jim, Joe, Jane]).  If the primary key field names on the reference descriptor contained [B, C, A], then the result of this method call would be reference.primaryKeys=([X, Jim, 1], [Y, Joe, 2], [Z, Jane, 3]).
 * @param reference
 */
private void createPKVectorsFromMap(Reference reference){
  XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
  Vector pks=new Vector();
  Vector pkFields=mapping.getReferenceDescriptor().getPrimaryKeyFieldNames();
  if (pkFields.size() <= 0) {
    return;
  }
  Vector pkVals;
  boolean init=true;
  for (Iterator pkFieldNameIt=pkFields.iterator(); pkFieldNameIt.hasNext(); ) {
    pkVals=(Vector)reference.getPrimaryKeyMap().get(pkFieldNameIt.next());
    if (pkVals == null) {
      return;
    }
    if (init) {
      for (int i=0; i < pkVals.size(); i++) {
        pks.add(new Vector());
      }
      init=false;
    }
    for (int i=0; i < pkVals.size(); i++) {
      Object val=pkVals.get(i);
      ((Vector)pks.get(i)).add(val);
    }
  }
  reference.primaryKeys=pks;
}"
66975,"/** 
 * Return true if the original container on the object should be used if  present.  If it is not present then the container policy will be used to create the container. 
 */
public boolean getReuseContainer(){
  return reuseContainer;
}","/** 
 * Return true if the original container on the object should be used if present.  If it is not present then the container policy will be used to create the container.
 */
public boolean getReuseContainer(){
  return reuseContainer;
}"
66976,"/** 
 * INTERNAL: Indicates the name of the Map class to be used.  
 * @param concreteMapClassName
 */
public void useMapClassName(String concreteMapClassName){
  this.setContainerPolicy(new DirectMapContainerPolicy());
  this.getContainerPolicy().setContainerClassName(concreteMapClassName);
}","/** 
 * INTERNAL: Indicates the name of the Map class to be used.
 * @param concreteMapClassName
 */
public void useMapClassName(String concreteMapClassName){
  this.setContainerPolicy(new DirectMapContainerPolicy());
  this.getContainerPolicy().setContainerClassName(concreteMapClassName);
}"
66977,"private Object buildObjectValuesFromDOMRecord(DOMRecord record,AbstractSession session,ObjectBuildingQuery query){
  DirectMapContainerPolicy cp=(DirectMapContainerPolicy)getContainerPolicy();
  Object container=cp.containerInstance();
  org.w3c.dom.Element root=(Element)record.getDOM();
  NamedNodeMap attributes=root.getAttributes();
  Attr next;
  String localName;
  int numberOfAtts=attributes.getLength();
  for (int i=0; i < numberOfAtts; i++) {
    next=(Attr)attributes.item(i);
    localName=next.getLocalName();
    if (null == localName) {
      localName=next.getName();
    }
    String namespaceURI=next.getNamespaceURI();
    boolean includeAttribute=true;
    if (!isNamespaceDeclarationIncluded && XMLConstants.XMLNS_URL.equals(namespaceURI)) {
      includeAttribute=false;
    }
 else     if (!isSchemaInstanceIncluded && XMLConstants.SCHEMA_INSTANCE_URL.equals(namespaceURI)) {
      includeAttribute=false;
    }
    if (includeAttribute) {
      String value=next.getValue();
      QName key=new QName(namespaceURI,localName);
      cp.addInto(key,value,container,session);
    }
  }
  return container;
}","private Object buildObjectValuesFromDOMRecord(DOMRecord record,AbstractSession session,ObjectBuildingQuery query){
  DirectMapContainerPolicy cp=(DirectMapContainerPolicy)getContainerPolicy();
  Object container=null;
  if (reuseContainer) {
    Object currentObject=record.getCurrentObject();
    Object value=getAttributeAccessor().getAttributeValueFromObject(currentObject);
    container=value != null ? value : cp.containerInstance();
  }
 else {
    container=cp.containerInstance();
  }
  org.w3c.dom.Element root=(Element)record.getDOM();
  NamedNodeMap attributes=root.getAttributes();
  Attr next;
  String localName;
  int numberOfAtts=attributes.getLength();
  for (int i=0; i < numberOfAtts; i++) {
    next=(Attr)attributes.item(i);
    localName=next.getLocalName();
    if (null == localName) {
      localName=next.getName();
    }
    String namespaceURI=next.getNamespaceURI();
    boolean includeAttribute=true;
    if (!isNamespaceDeclarationIncluded && XMLConstants.XMLNS_URL.equals(namespaceURI)) {
      includeAttribute=false;
    }
 else     if (!isSchemaInstanceIncluded && XMLConstants.SCHEMA_INSTANCE_URL.equals(namespaceURI)) {
      includeAttribute=false;
    }
    if (includeAttribute) {
      String value=next.getValue();
      QName key=new QName(namespaceURI,localName);
      cp.addInto(key,value,container,session);
    }
  }
  return container;
}"
66978,"/** 
 * Specify whether the original container on the object should be used if  present.  If it is not present then the container policy will be used to create the container. 
 */
public void setReuseContainer(boolean reuseContainer){
  this.reuseContainer=reuseContainer;
}","/** 
 * Specify whether the original container on the object should be used if present.  If it is not present then the container policy will be used to create the container.
 */
public void setReuseContainer(boolean reuseContainer){
  this.reuseContainer=reuseContainer;
}"
66979,"public void testTemporalOnClosedEm(){
  EntityManager em=createEntityManager();
  Query numericParameterQuery=em.createQuery(""String_Node_Str"");
  Query namedParameterQuery=em.createQuery(""String_Node_Str"");
  closeEntityManager(em);
  Exception caughtException=null;
  try {
    numericParameterQuery.setParameter(1,new Date(System.currentTimeMillis()),TemporalType.DATE);
  }
 catch (  Exception e) {
    caughtException=e;
  }
  assertTrue(""String_Node_Str"",caughtException instanceof IllegalStateException);
  try {
    numericParameterQuery.setParameter(1,Calendar.getInstance(),TemporalType.DATE);
  }
 catch (  Exception e) {
    caughtException=e;
  }
  assertTrue(""String_Node_Str"",caughtException instanceof IllegalStateException);
  try {
    namedParameterQuery.setParameter(""String_Node_Str"",new Date(System.currentTimeMillis()),TemporalType.DATE);
  }
 catch (  Exception e) {
    caughtException=e;
  }
  assertTrue(""String_Node_Str"",caughtException instanceof IllegalStateException);
  try {
    namedParameterQuery.setParameter(""String_Node_Str"",Calendar.getInstance(),TemporalType.DATE);
  }
 catch (  Exception e) {
    caughtException=e;
  }
  assertTrue(""String_Node_Str"",caughtException instanceof IllegalStateException);
}","public void testTemporalOnClosedEm(){
  if (isOnServer()) {
    return;
  }
  EntityManager em=createEntityManager();
  Query numericParameterQuery=em.createQuery(""String_Node_Str"");
  Query namedParameterQuery=em.createQuery(""String_Node_Str"");
  closeEntityManager(em);
  Exception caughtException=null;
  try {
    numericParameterQuery.setParameter(1,new Date(System.currentTimeMillis()),TemporalType.DATE);
  }
 catch (  Exception e) {
    caughtException=e;
  }
  assertTrue(""String_Node_Str"",caughtException instanceof IllegalStateException);
  try {
    numericParameterQuery.setParameter(1,Calendar.getInstance(),TemporalType.DATE);
  }
 catch (  Exception e) {
    caughtException=e;
  }
  assertTrue(""String_Node_Str"",caughtException instanceof IllegalStateException);
  try {
    namedParameterQuery.setParameter(""String_Node_Str"",new Date(System.currentTimeMillis()),TemporalType.DATE);
  }
 catch (  Exception e) {
    caughtException=e;
  }
  assertTrue(""String_Node_Str"",caughtException instanceof IllegalStateException);
  try {
    namedParameterQuery.setParameter(""String_Node_Str"",Calendar.getInstance(),TemporalType.DATE);
  }
 catch (  Exception e) {
    caughtException=e;
  }
  assertTrue(""String_Node_Str"",caughtException instanceof IllegalStateException);
}"
66980,"public Object unmarshal(org.xml.sax.XMLReader xmlReader,InputSource inputSource,Class clazz){
  try {
    XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
    if (xmlContext.hasDocumentPreservation()) {
      SAXDocumentBuilder saxDocumentBuilder=new SAXDocumentBuilder();
      xmlReader.setContentHandler(saxDocumentBuilder);
      xmlReader.parse(inputSource);
      return unmarshal(saxDocumentBuilder.getDocument().getDocumentElement(),clazz);
    }
    boolean isPrimitiveWrapper=isPrimitiveWrapper(clazz);
    UnmarshalRecord unmarshalRecord;
    XMLDescriptor xmlDescriptor=null;
    AbstractSession session=null;
    if (isPrimitiveWrapper) {
      unmarshalRecord=new XMLRootRecord(clazz);
      unmarshalRecord.setSession((AbstractSession)xmlUnmarshaller.getXMLContext().getSession(0));
    }
 else     if (clazz == ClassConstants.OBJECT) {
      SAXUnmarshallerHandler saxUnmarshallerHandler=new SAXUnmarshallerHandler(xmlUnmarshaller.getXMLContext());
      saxUnmarshallerHandler.setXMLReader((XMLReader)xmlReader);
      saxUnmarshallerHandler.setUnmarshaller(xmlUnmarshaller);
      saxUnmarshallerHandler.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      xmlReader.setContentHandler(saxUnmarshallerHandler);
      ((XMLReader)xmlReader).parse(inputSource,saxUnmarshallerHandler);
      saxUnmarshallerHandler.resolveReferences();
      return saxUnmarshallerHandler.getObject();
    }
 else {
      session=xmlContext.getReadSession(clazz);
      xmlDescriptor=(XMLDescriptor)session.getDescriptor(clazz);
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
    XMLReader extendedXMLReader;
    if (xmlReader instanceof XMLReader) {
      extendedXMLReader=(XMLReader)xmlReader;
    }
 else {
      extendedXMLReader=new XMLReader(xmlReader);
    }
    unmarshalRecord.setXMLReader(extendedXMLReader);
    unmarshalRecord.setUnmarshaller(xmlUnmarshaller);
    extendedXMLReader.setContentHandler(unmarshalRecord);
    try {
      extendedXMLReader.setProperty(""String_Node_Str"",unmarshalRecord);
    }
 catch (    SAXNotRecognizedException ex) {
    }
catch (    SAXNotSupportedException ex) {
    }
    extendedXMLReader.parse(inputSource);
    xmlUnmarshaller.resolveReferences(session);
    if (isPrimitiveWrapper || clazz == ClassConstants.OBJECT) {
      return unmarshalRecord.getCurrentObject();
    }
    return xmlDescriptor.wrapObjectInXMLRoot(unmarshalRecord,this.isResultAlwaysXMLRoot);
  }
 catch (  IOException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
catch (  SAXException e) {
    throw convertSAXException(e);
  }
}","public Object unmarshal(org.xml.sax.XMLReader xmlReader,InputSource inputSource,Class clazz){
  try {
    XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
    if (xmlContext.hasDocumentPreservation()) {
      SAXDocumentBuilder saxDocumentBuilder=new SAXDocumentBuilder();
      xmlReader.setContentHandler(saxDocumentBuilder);
      xmlReader.parse(inputSource);
      return unmarshal(saxDocumentBuilder.getDocument().getDocumentElement(),clazz);
    }
    boolean isPrimitiveWrapper=isPrimitiveWrapper(clazz);
    UnmarshalRecord unmarshalRecord;
    XMLDescriptor xmlDescriptor=null;
    AbstractSession session=null;
    if (isPrimitiveWrapper) {
      unmarshalRecord=new XMLRootRecord(clazz);
      unmarshalRecord.setSession((AbstractSession)xmlUnmarshaller.getXMLContext().getSession(0));
    }
 else     if (clazz == ClassConstants.OBJECT) {
      SAXUnmarshallerHandler saxUnmarshallerHandler=new SAXUnmarshallerHandler(xmlUnmarshaller.getXMLContext());
      saxUnmarshallerHandler.setXMLReader((XMLReader)xmlReader);
      saxUnmarshallerHandler.setUnmarshaller(xmlUnmarshaller);
      saxUnmarshallerHandler.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      xmlReader.setContentHandler(saxUnmarshallerHandler);
      xmlReader.parse(inputSource);
      saxUnmarshallerHandler.resolveReferences();
      return saxUnmarshallerHandler.getObject();
    }
 else {
      session=xmlContext.getReadSession(clazz);
      xmlDescriptor=(XMLDescriptor)session.getDescriptor(clazz);
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
    XMLReader extendedXMLReader;
    if (xmlReader instanceof XMLReader) {
      extendedXMLReader=(XMLReader)xmlReader;
    }
 else {
      extendedXMLReader=new XMLReader(xmlReader);
    }
    unmarshalRecord.setXMLReader(extendedXMLReader);
    unmarshalRecord.setUnmarshaller(xmlUnmarshaller);
    extendedXMLReader.setContentHandler(unmarshalRecord);
    try {
      extendedXMLReader.setProperty(""String_Node_Str"",unmarshalRecord);
    }
 catch (    SAXNotRecognizedException ex) {
    }
catch (    SAXNotSupportedException ex) {
    }
    extendedXMLReader.parse(inputSource);
    xmlUnmarshaller.resolveReferences(session);
    if (isPrimitiveWrapper || clazz == ClassConstants.OBJECT) {
      return unmarshalRecord.getCurrentObject();
    }
    return xmlDescriptor.wrapObjectInXMLRoot(unmarshalRecord,this.isResultAlwaysXMLRoot);
  }
 catch (  IOException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
catch (  SAXException e) {
    throw convertSAXException(e);
  }
}"
66981,"public XMLStreamReaderReader(){
}","public XMLStreamReaderReader(){
  unmarshalNamespaceContext=new UnmarshalNamespaceContext();
}"
66982,"@Override public void setContentHandler(ContentHandler aContentHandler){
  this.contentHandler=aContentHandler;
}","@Override public void setContentHandler(ContentHandler handler){
  this.contentHandler=handler;
  if (handler.getClass() == UnmarshalRecord.class) {
    ((UnmarshalRecord)handler).setUnmarshalNamespaceResolver(unmarshalNamespaceContext);
  }
 else   if (handler.getClass() == SAXUnmarshallerHandler.class) {
    ((SAXUnmarshallerHandler)handler).setUnmarshalNamespaceResolver(unmarshalNamespaceContext);
  }
}"
66983,"private Object selectSingleNode(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver){
  Node resultNode=getSingleNode(contextNode,xPathFragment,xmlNamespaceResolver);
  if (resultNode == null) {
    if (!xPathFragment.nameIsText()) {
      return XMLRecord.noEntry;
    }
    return null;
  }
  if (xPathFragment.getNextFragment() == null) {
    return resultNode;
  }
  return selectSingleNode(resultNode,xPathFragment.getNextFragment(),xmlNamespaceResolver);
}","private Object selectSingleNode(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver,boolean checkForXsiNil){
  Node resultNode=getSingleNode(contextNode,xPathFragment,xmlNamespaceResolver);
  if (resultNode == null) {
    if (checkForXsiNil) {
      String nil=((Element)contextNode).getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE);
      if (nil.equals(XMLConstants.BOOLEAN_STRING_TRUE)) {
        return XMLRecord.nil;
      }
    }
    if (!xPathFragment.nameIsText()) {
      return XMLRecord.noEntry;
    }
    return null;
  }
  if (xPathFragment.getNextFragment() == null) {
    return resultNode;
  }
  return selectSingleNode(resultNode,xPathFragment.getNextFragment(),xmlNamespaceResolver,checkForXsiNil);
}"
66984,"/** 
 * INTERNAL: Allows for subclasses to convert the attribute value.
 */
public Object getAttributeValue(Object fieldValue,AbstractSession session,XMLRecord record){
  boolean isNullRepresentedByEmptyNode=getNullPolicy().isNullRepresentedByEmptyNode();
  if (XMLConstants.EMPTY_STRING.equals(fieldValue) && isNullRepresentedByEmptyNode) {
    fieldValue=null;
  }
 else   if (null == fieldValue && !isNullRepresentedByEmptyNode) {
    fieldValue=XMLConstants.EMPTY_STRING;
  }
  Object attributeValue=fieldValue;
  if (attributeValue == XMLRecord.noEntry) {
    if (!getNullPolicy().getIsSetPerformedForAbsentNode()) {
      return attributeValue;
    }
 else {
      fieldValue=null;
      attributeValue=null;
    }
  }
  if (hasConverter()) {
    if (getConverter() instanceof XMLConverter) {
      attributeValue=((XMLConverter)getConverter()).convertDataValueToObjectValue(attributeValue,session,record.getUnmarshaller());
    }
 else {
      attributeValue=getConverter().convertDataValueToObjectValue(attributeValue,session);
    }
  }
 else {
    if ((attributeValue == null) || (attributeValue.getClass() != this.attributeObjectClassification)) {
      try {
        attributeValue=session.getDatasourcePlatform().convertObject(attributeValue,this.attributeClassification);
      }
 catch (      ConversionException e) {
        throw ConversionException.couldNotBeConverted(this,getDescriptor(),e);
      }
    }
  }
  if (attributeValue == null) {
    attributeValue=this.nullValue;
  }
  return attributeValue;
}","/** 
 * INTERNAL: Allows for subclasses to convert the attribute value.
 */
public Object getAttributeValue(Object fieldValue,AbstractSession session,XMLRecord record){
  boolean isNullRepresentedByEmptyNode=getNullPolicy().isNullRepresentedByEmptyNode();
  boolean isNullRepresentedByXsiNil=getNullPolicy().isNullRepresentedByXsiNil();
  if (XMLConstants.EMPTY_STRING.equals(fieldValue) && isNullRepresentedByEmptyNode) {
    fieldValue=null;
  }
 else   if (null == fieldValue && !isNullRepresentedByEmptyNode) {
    fieldValue=XMLConstants.EMPTY_STRING;
  }
  Object attributeValue=fieldValue;
  if (attributeValue == XMLRecord.noEntry) {
    if (!getNullPolicy().getIsSetPerformedForAbsentNode()) {
      return attributeValue;
    }
 else {
      fieldValue=null;
      attributeValue=null;
    }
  }
  if (attributeValue == XMLRecord.nil && isNullRepresentedByXsiNil) {
    fieldValue=null;
    attributeValue=null;
  }
  if (hasConverter()) {
    if (getConverter() instanceof XMLConverter) {
      attributeValue=((XMLConverter)getConverter()).convertDataValueToObjectValue(attributeValue,session,record.getUnmarshaller());
    }
 else {
      attributeValue=getConverter().convertDataValueToObjectValue(attributeValue,session);
    }
  }
 else {
    if ((attributeValue == null) || (attributeValue.getClass() != this.attributeObjectClassification)) {
      try {
        attributeValue=session.getDatasourcePlatform().convertObject(attributeValue,this.attributeClassification);
      }
 catch (      ConversionException e) {
        throw ConversionException.couldNotBeConverted(this,getDescriptor(),e);
      }
    }
  }
  if (attributeValue == null) {
    attributeValue=this.nullValue;
  }
  return attributeValue;
}"
66985,"/** 
 * INTERNAL: Return the mapping's attribute value from the row. The execution session is passed for the case of building a UnitOfWork clone directly from a row, the session set in the query will not know which platform to use for converting the value.  Allows the correct session to be passed in.
 */
public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,AbstractSession executionSession){
  return getAttributeValue(row.getIndicatingNoEntry(this.field),executionSession,(XMLRecord)row);
}","/** 
 * INTERNAL: Return the mapping's attribute value from the row. The execution session is passed for the case of building a UnitOfWork clone directly from a row, the session set in the query will not know which platform to use for converting the value.  Allows the correct session to be passed in.
 */
public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,AbstractSession executionSession){
  boolean shouldCheckForXsiNil=getNullPolicy().isNullRepresentedByXsiNil();
  return getAttributeValue(((DOMRecord)row).getIndicatingNoEntry(this.field,false,shouldCheckForXsiNil),executionSession,(XMLRecord)row);
}"
66986,"public Object getIndicatingNoEntry(DatabaseField key,boolean shouldReturnNode){
  XMLField field=convertToXMLField(key);
  if (field.isSelfField()) {
    return this;
  }
  Object result=UnmarshalXPathEngine.getInstance().selectSingleNode(dom,field,field.getNamespaceResolver());
  if (result == noEntry) {
    if (shouldReturnNode) {
      return null;
    }
    return noEntry;
  }
  Node node=(Node)result;
  if (shouldReturnNode) {
    return node;
  }
  if (null == node) {
    return null;
  }
  if (Node.ELEMENT_NODE != node.getNodeType()) {
    if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
      getValueFromAttribute((Attr)node,field);
    }
    return getValueFromElement((Element)node.getParentNode(),node,field);
  }
  return buildNestedRow((Element)node);
}","public Object getIndicatingNoEntry(DatabaseField key,boolean shouldReturnNode,boolean checkForXsiNil){
  XMLField field=convertToXMLField(key);
  if (field.isSelfField()) {
    return this;
  }
  Object result=UnmarshalXPathEngine.getInstance().selectSingleNode(dom,field,field.getNamespaceResolver(),checkForXsiNil);
  if (result == noEntry) {
    if (shouldReturnNode) {
      return null;
    }
    return noEntry;
  }
  if (result == nil) {
    return nil;
  }
  Node node=(Node)result;
  if (shouldReturnNode) {
    return node;
  }
  if (null == node) {
    return null;
  }
  if (Node.ELEMENT_NODE != node.getNodeType()) {
    if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
      getValueFromAttribute((Attr)node,field);
    }
    return getValueFromElement((Element)node.getParentNode(),node,field);
  }
  return buildNestedRow((Element)node);
}"
66987,"public DirectNullPolicyElementSetNillableTestCases(String name) throws Exception {
  super(name);
  setControlDocument(XML_RESOURCE);
  AbstractNullPolicy aNullPolicy=new NullPolicy();
  aNullPolicy.setNullRepresentedByEmptyNode(true);
  aNullPolicy.setNullRepresentedByXsiNil(true);
  aNullPolicy.setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
  Project aProject=new DirectNodeNullPolicyProject(true);
  XMLDescriptor employeeDescriptor=(XMLDescriptor)aProject.getDescriptor(Employee.class);
  NamespaceResolver namespaceResolver=new NamespaceResolver();
  namespaceResolver.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
  employeeDescriptor.setNamespaceResolver(namespaceResolver);
  XMLDirectMapping aMapping=(XMLDirectMapping)aProject.getDescriptor(Employee.class).getMappingForAttributeName(""String_Node_Str"");
  aMapping.setNullPolicy(aNullPolicy);
  setProject(aProject);
}","public DirectNullPolicyElementSetNillableTestCases(String name) throws Exception {
  super(name);
  setControlDocument(XML_RESOURCE);
  AbstractNullPolicy aNullPolicy=new NullPolicy();
  aNullPolicy.setNullRepresentedByEmptyNode(false);
  aNullPolicy.setNullRepresentedByXsiNil(true);
  aNullPolicy.setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
  Project aProject=new DirectNodeNullPolicyProject(true);
  XMLDescriptor employeeDescriptor=(XMLDescriptor)aProject.getDescriptor(Employee.class);
  NamespaceResolver namespaceResolver=new NamespaceResolver();
  namespaceResolver.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
  employeeDescriptor.setNamespaceResolver(namespaceResolver);
  XMLDirectMapping aMapping=(XMLDirectMapping)aProject.getDescriptor(Employee.class).getMappingForAttributeName(""String_Node_Str"");
  aMapping.setNullPolicy(aNullPolicy);
  setProject(aProject);
}"
66988,"/** 
 * INTERNAL: Copy statements counts into UOW properties.
 */
private void copyStatementsCountIntoProperties(){
  try {
    Accessor accessor=getAccessor();
  }
 catch (  DatabaseException exception) {
  }
  if (accessor != null && accessor instanceof DatasourceAccessor) {
    getProperties().put(DatasourceAccessor.READ_STATEMENTS_COUNT_PROPERTY,new Integer(((DatasourceAccessor)accessor).getReadStatementsCount()));
    getProperties().put(DatasourceAccessor.WRITE_STATEMENTS_COUNT_PROPERTY,new Integer(((DatasourceAccessor)accessor).getWriteStatementsCount()));
    getProperties().put(DatasourceAccessor.STOREDPROCEDURE_STATEMENTS_COUNT_PROPERTY,new Integer(((DatasourceAccessor)accessor).getStoredProcedureStatementsCount()));
  }
}","/** 
 * INTERNAL: Copy statements counts into UOW properties.
 */
private void copyStatementsCountIntoProperties(){
  Accessor accessor=null;
  try {
    accessor=getAccessor();
  }
 catch (  DatabaseException exception) {
  }
  if (accessor != null && accessor instanceof DatasourceAccessor) {
    getProperties().put(DatasourceAccessor.READ_STATEMENTS_COUNT_PROPERTY,new Integer(((DatasourceAccessor)accessor).getReadStatementsCount()));
    getProperties().put(DatasourceAccessor.WRITE_STATEMENTS_COUNT_PROPERTY,new Integer(((DatasourceAccessor)accessor).getWriteStatementsCount()));
    getProperties().put(DatasourceAccessor.STOREDPROCEDURE_STATEMENTS_COUNT_PROPERTY,new Integer(((DatasourceAccessor)accessor).getStoredProcedureStatementsCount()));
  }
}"
66989,"/** 
 * PUBLIC: Return a new expression that aplies the function to the given expression.
 */
public static Expression atan(Expression expression){
  ExpressionOperator anOperator=expression.getOperator(ExpressionOperator.Atan);
  return anOperator.expressionFor(expression);
}","/** 
 * PUBLIC: Return a new expression that applies the function to the given expression.
 */
public static Expression atan(Expression expression){
  ExpressionOperator anOperator=expression.getOperator(ExpressionOperator.Atan);
  return anOperator.expressionFor(expression);
}"
66990,"/** 
 * PUBLIC: Return a new expression that aplies the function to the given expression.
 */
public static Expression add(Expression right,Object left){
  ExpressionOperator anOperator=right.getOperator(ExpressionOperator.Add);
  return anOperator.expressionFor(right,left);
}","/** 
 * PUBLIC: Return a new expression that applies the function to the given expression.
 */
public static Expression add(Expression right,Object left){
  ExpressionOperator anOperator=right.getOperator(ExpressionOperator.Add);
  return anOperator.expressionFor(right,left);
}"
66991,"/** 
 * PUBLIC: Return a new expression that aplies the function to the given expression.
 */
public static Expression acos(Expression expression){
  ExpressionOperator anOperator=expression.getOperator(ExpressionOperator.Acos);
  return anOperator.expressionFor(expression);
}","/** 
 * PUBLIC: Return a new expression that applies the function to the given expression.
 */
public static Expression acos(Expression expression){
  ExpressionOperator anOperator=expression.getOperator(ExpressionOperator.Acos);
  return anOperator.expressionFor(expression);
}"
66992,"/** 
 * PUBLIC: Return a new expression that aplies the function to the given expression. <p>Example: <pre><blockquote> Example: ExpressionMath.abs(builder.get(""netWorth"")).greaterThan(1000000); </blockquote></pre>
 */
public static Expression abs(Expression expression){
  ExpressionOperator anOperator=expression.getOperator(ExpressionOperator.Abs);
  return anOperator.expressionFor(expression);
}","/** 
 * PUBLIC: Return a new expression that applies the function to the given expression. <p>Example: <pre><blockquote> Example: ExpressionMath.abs(builder.get(""netWorth"")).greaterThan(1000000); </blockquote></pre>
 */
public static Expression abs(Expression expression){
  ExpressionOperator anOperator=expression.getOperator(ExpressionOperator.Abs);
  return anOperator.expressionFor(expression);
}"
66993,"/** 
 * PUBLIC: Return a new expression that aplies the function to the given expression.
 */
public static Expression asin(Expression expression){
  ExpressionOperator anOperator=expression.getOperator(ExpressionOperator.Asin);
  return anOperator.expressionFor(expression);
}","/** 
 * PUBLIC: Return a new expression that applies the function to the given expression.
 */
public static Expression asin(Expression expression){
  ExpressionOperator anOperator=expression.getOperator(ExpressionOperator.Asin);
  return anOperator.expressionFor(expression);
}"
66994,"/** 
 */
public boolean isAssignableFrom(Object left,Object right){
  if ((left == null) || (right == null)) {
    return true;
  }
  if (left == right) {
    return true;
  }
  if ((left == ClassConstants.OBJECT) || (right == ClassConstants.OBJECT)) {
    return true;
  }
 else   if (isNumericType(left) && isNumericType(right)) {
    return true;
  }
 else   if (isDateClass(left) && isDateClass(right)) {
    return true;
  }
 else   if (isBooleanType(left) && isBooleanType(right)) {
    return true;
  }
  return getJavaClass(left).isAssignableFrom(getJavaClass(right));
}","/** 
 * convenience method for java's isAssignableFrom that allows auto-boxing, taking java class or a descriptor as arguments.  It will return true if both sides are in the same category (Numberic, Date or Boolean) otherwise it will use java's  isAssignableFrom on the argument classes.    Returns true if either arguments is null.
 */
public boolean isAssignableFrom(Object left,Object right){
  if ((left == null) || (right == null)) {
    return true;
  }
  if (left == right) {
    return true;
  }
  if ((left == ClassConstants.OBJECT) || (right == ClassConstants.OBJECT)) {
    return true;
  }
 else   if (isNumericType(left) && isNumericType(right)) {
    return true;
  }
 else   if (isDateClass(left) && isDateClass(right)) {
    return true;
  }
 else   if (isBooleanType(left) && isBooleanType(right)) {
    return true;
  }
  return getJavaClass(left).isAssignableFrom(getJavaClass(right));
}"
66995,"/** 
 * Returns the primitive for the specified wrapper class. 
 */
protected Object getPrimitiveType(Object wrapper){
  return wrapperToPrimitive.get(wrapper);
}","/** 
 * Returns the primitive for the specified wrapper class. 
 */
protected Class getPrimitiveType(Object wrapper){
  return wrapperToPrimitive.get(wrapper);
}"
66996,"/** 
 * Returns the wrapper class for the specified primitive. 
 */
protected Object getWrapperClass(Object primitive){
  return primitiveToWrapper.get(primitive);
}","/** 
 * Returns the wrapper class for the specified primitive. 
 */
protected Class getWrapperClass(Object primitive){
  return primitiveToWrapper.get(primitive);
}"
66997,"/** 
 * Find by primary key.
 * @param entityClass - the entity class to find.
 * @param primaryKey - the entity primary key value, or primary key class, or a List of primary key values.
 * @return the found entity instance or null, if the entity does not exist.
 * @throws IllegalArgumentException if the first argument does not denote an entity type or the second argument is not a valid type for that entity's primary key.
 */
protected Object findInternal(ClassDescriptor descriptor,AbstractSession session,Object primaryKey,LockModeType lockMode,Map<String,Object> properties){
  if (primaryKey == null) {
    throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str""));
  }
  List primaryKeyValues;
  if (primaryKey instanceof List) {
    primaryKeyValues=(List)primaryKey;
  }
 else {
    CMPPolicy policy=descriptor.getCMPPolicy();
    Class pkClass=policy.getPKClass();
    if ((pkClass != null) && (!BasicTypeHelperImpl.getInstance().isAssignableFrom(pkClass,primaryKey.getClass()))) {
      throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{descriptor.getCMPPolicy().getPKClass(),primaryKey.getClass()}));
    }
    primaryKeyValues=policy.createPkVectorFromKey(primaryKey,session);
  }
  ReadObjectQuery query=descriptor.getQueryManager().getReadObjectQuery();
  if (query == null) {
    query=getReadObjectQuery(descriptor.getJavaClass(),primaryKeyValues,properties);
  }
 else {
    query.checkPrepare(session,null);
    query=(ReadObjectQuery)query.clone();
    QueryHintsHandler.apply(properties,query,session.getLoader());
    query.setIsExecutionClone(true);
    query.setSelectionKey(primaryKeyValues);
  }
  if (properties == null || (!properties.containsKey(QueryHints.CACHE_USAGE) && !properties.containsKey(QueryHints.CACHE_RETRIEVE_MODE) && !properties.containsKey(QueryHints.CACHE_STORE_MODE))) {
    query.conformResultsInUnitOfWork();
  }
  return executeQuery(query,lockMode,session);
}","/** 
 * Find by primary key.
 * @param entityClass - the entity class to find.
 * @param primaryKey - the entity primary key value, or primary key class, or a List of primary key values.
 * @return the found entity instance or null, if the entity does not exist.
 * @throws IllegalArgumentException if the first argument does not denote an entity type or the second argument is not a valid type for that entity's primary key.
 */
protected Object findInternal(ClassDescriptor descriptor,AbstractSession session,Object primaryKey,LockModeType lockMode,Map<String,Object> properties){
  if (primaryKey == null) {
    throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str""));
  }
  List primaryKeyValues;
  if (primaryKey instanceof List) {
    primaryKeyValues=(List)primaryKey;
  }
 else {
    CMPPolicy policy=descriptor.getCMPPolicy();
    Class pkClass=policy.getPKClass();
    if ((pkClass != null) && (!BasicTypeHelperImpl.getInstance().isStrictlyAssignableFrom(pkClass,primaryKey.getClass()))) {
      throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{descriptor.getCMPPolicy().getPKClass(),primaryKey.getClass()}));
    }
    primaryKeyValues=policy.createPkVectorFromKey(primaryKey,session);
  }
  ReadObjectQuery query=descriptor.getQueryManager().getReadObjectQuery();
  if (query == null) {
    query=getReadObjectQuery(descriptor.getJavaClass(),primaryKeyValues,properties);
  }
 else {
    query.checkPrepare(session,null);
    query=(ReadObjectQuery)query.clone();
    QueryHintsHandler.apply(properties,query,session.getLoader());
    query.setIsExecutionClone(true);
    query.setSelectionKey(primaryKeyValues);
  }
  if (properties == null || (!properties.containsKey(QueryHints.CACHE_USAGE) && !properties.containsKey(QueryHints.CACHE_RETRIEVE_MODE) && !properties.containsKey(QueryHints.CACHE_STORE_MODE))) {
    query.conformResultsInUnitOfWork();
  }
  return executeQuery(query,lockMode,session);
}"
66998,"public void testFindWithProperties(){
  if (!isJPA10()) {
    Employee employee=new Employee();
    employee.setFirstName(""String_Node_Str"");
    HashMap queryhints=new HashMap();
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      em.persist(employee);
      commitTransaction(em);
      beginTransaction(em);
      int empId=employee.getId();
      Employee e1=em.find(Employee.class,empId);
      e1.setFirstName(""String_Node_Str"");
      queryhints.put(QueryHints.REFRESH,""String_Node_Str"");
      Employee e2=em.find(Employee.class,empId,queryhints);
      assertFalse(e2.getFirstName().equals(""String_Node_Str""));
      commitTransaction(em);
    }
 catch (    IllegalArgumentException iae) {
      return;
    }
catch (    Exception e) {
      fail(""String_Node_Str"" + e.getClass());
    }
 finally {
      closeEntityManager(em);
    }
  }
}","public void testFindWithProperties(){
  if (!isJPA10()) {
    Employee employee=new Employee();
    employee.setFirstName(""String_Node_Str"");
    HashMap<String,Object> queryhints=new HashMap<String,Object>();
    EntityManager em=createEntityManager();
    try {
      beginTransaction(em);
      em.persist(employee);
      commitTransaction(em);
      beginTransaction(em);
      int empId=employee.getId();
      Employee e1=em.find(Employee.class,empId);
      e1.setFirstName(""String_Node_Str"");
      queryhints.put(QueryHints.REFRESH,""String_Node_Str"");
      Employee e2=em.find(Employee.class,empId,queryhints);
      assertFalse(e2.getFirstName().equals(""String_Node_Str""));
      commitTransaction(em);
    }
 catch (    IllegalArgumentException iae) {
      return;
    }
catch (    Exception e) {
      fail(""String_Node_Str"" + e.getClass());
    }
 finally {
      closeEntityManager(em);
    }
  }
}"
66999,"public void testPESSIMISTIC_WRITE_TIMEOUTLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateSupported() && !session.getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    List result=em.createQuery(""String_Node_Str"").getResultList();
    Employee employee=(Employee)result.get(0);
    Exception lockTimeOutException=null;
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_WRITE);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,5);
        Employee employee2=em2.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_WRITE,properties);
        employee2.setFirstName(""String_Node_Str"");
        commitTransaction(em2);
      }
 catch (      PersistenceException ex) {
        if (isTransactionActive(em2)) {
          rollbackTransaction(em2);
        }
        if (ex instanceof javax.persistence.LockTimeoutException) {
          lockTimeOutException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",lockTimeOutException == null);
  }
}","public void testPESSIMISTIC_WRITE_TIMEOUTLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateSupported() && !session.getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    List result=em.createQuery(""String_Node_Str"").getResultList();
    Employee employee=(Employee)result.get(0);
    Exception lockTimeOutException=null;
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_WRITE);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        HashMap<String,Object> properties=new HashMap<String,Object>();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,5);
        Employee employee2=em2.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_WRITE,properties);
        employee2.setFirstName(""String_Node_Str"");
        commitTransaction(em2);
      }
 catch (      PersistenceException ex) {
        if (isTransactionActive(em2)) {
          rollbackTransaction(em2);
        }
        if (ex instanceof javax.persistence.LockTimeoutException) {
          lockTimeOutException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",lockTimeOutException == null);
  }
}"
67000,"public void testPESSIMISTIC_READ_TIMEOUTLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateSupported() && !session.getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    List result=em.createQuery(""String_Node_Str"").getResultList();
    Employee employee=(Employee)result.get(0);
    Exception lockTimeOutException=null;
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_READ);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,5);
        Employee employee2=em2.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_READ,properties);
        employee2.setFirstName(""String_Node_Str"");
        commitTransaction(em2);
      }
 catch (      PersistenceException ex) {
        if (isTransactionActive(em2)) {
          rollbackTransaction(em2);
        }
        if (ex instanceof javax.persistence.LockTimeoutException) {
          lockTimeOutException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",lockTimeOutException == null);
  }
}","public void testPESSIMISTIC_READ_TIMEOUTLock(){
  ServerSession session=JUnitTestCase.getServerSession();
  Assert.assertFalse(""String_Node_Str"",session.getPlatform().isSybase());
  if (!isOnServer() && isSelectForUpateSupported() && !session.getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    List result=em.createQuery(""String_Node_Str"").getResultList();
    Employee employee=(Employee)result.get(0);
    Exception lockTimeOutException=null;
    try {
      beginTransaction(em);
      employee=em.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_READ);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        HashMap<String,Object> properties=new HashMap<String,Object>();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,5);
        Employee employee2=em2.find(Employee.class,employee.getId(),LockModeType.PESSIMISTIC_READ,properties);
        employee2.setFirstName(""String_Node_Str"");
        commitTransaction(em2);
      }
 catch (      PersistenceException ex) {
        if (isTransactionActive(em2)) {
          rollbackTransaction(em2);
        }
        if (ex instanceof javax.persistence.LockTimeoutException) {
          lockTimeOutException=ex;
        }
 else {
          throw ex;
        }
      }
 finally {
        closeEntityManager(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",lockTimeOutException == null);
  }
}"
